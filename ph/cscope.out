cscope 15 $HOME/pmem/ph/ph               0000562415
	@/home/cgmin/pmem/ph/ph/cceh.cpp

2 
	~<queue
>

3 
	~<°rög.h
>

4 
	~<°dio.h
>

5 
	~<°dlib.h
>

6 
	~<x86öåö.h
>

9 
	~<time.h
>

10 
	~<uni°d.h
>

12 
	~"c˚h.h
"

13 
	~"thªad2.h
"

14 
	~"lock.h
"

15 
	~"d©a2.h
"

17 
«me•a˚
 
	gPH


20 
thªad_loˇl
 
PH_Thªad
* 
my_thªad
;

22 
thªad_loˇl
 
SEG
* 
	gãmp_£g
 = 
NULL
;

26 
PH_Quîy_Thªad
 
quîy_thªad_li°
[
QUERY_THREAD_MAX
];

27 
num_quîy_thªad
;

28 
PH_Evi˘_Thªad
 
evi˘_thªad_li°
[
EVICT_THREAD_MAX
];

29 
num_evi˘_thªad
;

31 
CCEH
* 
	ghash_ödex
;

40 
	g°d
::
©omic
<
uöt32_t
> 
£g_‰ì_hód
;

42 
thªad_loˇl
 
uöt32_t
 
	gloˇl_£g_‰ì_mö_hód
=0;

43 
	g°d
::
©omic
<
uöt32_t
> 
£g_‰ì_èû
;

47 
	#FREE_SEG_LEN
 (1024*8)

	)

48 
	#FREE_QUEUE_LEN
 (1024*8)

49 

	)

50 
SEG
* 
	g‰ì_£g_queue
[
FREE_SEG_LEN
];

52 
	g°d
::
©omic
<
uöt8_t
> 
‰ì_£g_lock
;

54 
uöt64_t
 
	gr_mask
[65];

56 ** 
	gkey_¨øy
 = 0;

57 * 
	gkey_˙t
 = 0;

58 
	g°d
::
©omic
<> 
key_¨øy_˙t
;

59 
thªad_loˇl
 
	gkey_¨øy_ödex
=0;

60 
	gmax_ödex
;

63 
	g°d
::
©omic
<
uöt32_t
> 
Æloc_£g_˙t
;

65 
uöt64_t
 
MurmurHash64A_L8
 ( c⁄° * 
key
 )

67 c⁄° 
	gÀn
 = 8;

68 c⁄° 
uöt64_t
 
	g£ed
 = 5516;

71 c⁄° 
uöt64_t
 
	gm
 = 0xc6a4a7935bd1e995;

73 c⁄° 
	gr
 = 47;

75 
uöt64_t
 
	gh
 = 
£ed
 ^ (
Àn
 * 
m
);

77 c⁄° 
uöt64_t
 * 
	gd©a
 = (c⁄° uöt64_à*)
key
;

78 c⁄° 
uöt64_t
 * 
	gíd
 = 
d©a
 + (
Àn
/8);

80 
	gd©a
 !
íd
)

82 
uöt64_t
 
k
 = *
d©a
++;

84 
	gk
 *
m
;

85 
	gk
 ^
k
 >> 
r
;

86 
	gk
 *
m
;

88 
	gh
 ^
k
;

89 
	gh
 *
m
;

92 c⁄° * 
	gd©a2
 = (c⁄° *)
d©a
;

94 
	gÀn
 & 7)

96 7: 
h
 ^((
uöt64_t
Ë
d©a2
[6]) << 48;

97 6: 
h
 ^((
uöt64_t
Ë
d©a2
[5]) << 40;

98 5: 
h
 ^((
uöt64_t
Ë
d©a2
[4]) << 32;

99 4: 
h
 ^((
uöt64_t
Ë
d©a2
[3]) << 24;

100 3: 
h
 ^((
uöt64_t
Ë
d©a2
[2]) << 16;

101 2: 
h
 ^((
uöt64_t
Ë
d©a2
[1]) << 8;

102 1: 
h
 ^((
uöt64_t
Ë
d©a2
[0]);

103 
	gh
 *
m
;

106 
	gh
 ^
h
 >> 
r
;

107 
	gh
 *
m
;

108 
	gh
 ^
h
 >> 
r
;

110  
	gh
;

113 
ölöe
 * 
	gCCEH
::
lﬂd_key
(c⁄° 
uöt64_t
 &
key
)

115  (*)&
key
;

118 
ölöe
 
boﬁ
 
	gCCEH
::
com∑ª_key
–c⁄° vﬁ©ûê
uöt64_t
 &
key1
,* c⁄° &
key2
,c⁄° 
uöt32_t
 &
hash
)

120  
	gkey1
 =(*(
uöt64_t
*)
key2
);

122 
ölöe
 
	gCCEH
::
ö£π_key
(vﬁ©ûê
uöt64_t
 &
key1
,* c⁄° &
key2
,c⁄° 
uöt32_t
 &
hash
)

124 
	gkey1
 = (*((
uöt64_t
*)
key2
));

127 
ölöe
 
uöt64_t
 
	gCCEH
::
hf
(* c⁄° &
key
)

140  
°d
::
_Hash_byãs
(
key
,8,5516);

143 
ölöe
 
uöt64_t
 
	gCCEH
::
hf
(uöt64_à
key
)

145  
°d
::
_Hash_byãs
((* c⁄°)&
key
,8,5516);

154 
ölöe
 
boﬁ
 
zîo_check
(
uöt64_t
 &
key
)

156  
	gkey
 =
INV0
;

159 
öv_£g
(
SEG
* vﬁ©ûê
£g
)

161 
	gi
;

164 
KVP
* 
	gkvp_p
;

166 
	gkvp_p
 = (
KVP
*)
£g
->
˛
;

178 
mem£t
(
£g
->
˛
,0xffffffff,
CL_PER_SEG
*
CL_SIZE
);

186 
SEG
* 
Æloc_£g
()

188 
SEG
* 
	g£g
;

201 i‡(
	gloˇl_£g_‰ì_mö_hód
 <
£g_‰ì_èû
)

202 
loˇl_£g_‰ì_mö_hód
 = 
PH
::
mö_£g_‰ì_˙t
();

204 
uöt32_t
 
	gíd
;

205 
uöt32_t
 
	gs·
;

206 
	gåue
)

208 
	gíd
 = 
loˇl_£g_‰ì_mö_hód
;

209 
	gs·
 = 
£g_‰ì_èû
;

210 
	gs·
 < 
	gíd
)

212 i‡(
	g£g_‰ì_èû
.
com∑ª_exch™ge_°r⁄g
(
s·
,sft+1))

214 
	g£g
 = 
‰ì_£g_queue
[
s·
%
FREE_SEG_LEN
];

215  
	g£g
;

217 
	gs·
 = 
£g_‰ì_èû
;

220 i‡(
	g£g_‰ì_èû
 + 
	gFREE_SEG_LEN
 > 
	g£g_‰ì_hód
)

223 
	gÆloc_£g_˙t
++;

224 i‡(
posix_memÆign
((**)&
£g
,64,(
SEG
)) != 0)

225 
¥ötf
("posix_memalignÉrror2\n");

228 i‡(
	gmy_thªad
->
	gupd©e_ªque°
)

229 
	gmy_thªad
->
sync_thªad
();

230 
	gloˇl_£g_‰ì_mö_hód
 = 
PH
::
mö_£g_‰ì_˙t
();

232 
¥ötf
("u£ fªêqueuê%u %u\n",
£g_‰ì_èû
.
lﬂd
(),
£g_‰ì_hód
.load());

233 
u¶ìp
(100*1000);

238  
	g£g
;

242 
SEG
* 
Æloc_£g
()

244 
SEG
* 
	g£g
;

245 
	gÆloc_£g_˙t
++;

246 i‡(
posix_memÆign
((**)&
£g
,64,(
SEG
)) != 0)

247 
¥ötf
("posix_memalignÉrror2\n");

248  
	g£g
;

251 
‰ì_£g
(
SEG
* 
£g
)

269 
uöt32_t
 
	gsfh
;

270 
	gåue
)

272 
	gsfh
 = 
£g_‰ì_hód
;

273 
	g£g_‰ì_èû
 + 
	gFREE_SEG_LEN
 <
sfh
)

275 
¥ötf
("‰ì seg fuŒ %u %u\n",
£g_‰ì_èû
.
lﬂd
(),
£g_‰ì_hód
.load());

276 i‡(
	gmy_thªad
->
	gupd©e_ªque°
)

277 
	gmy_thªad
->
sync_thªad
();

278 
u¶ìp
(1000*100);

280 i‡(
	g£g_‰ì_hód
.
com∑ª_exch™ge_°r⁄g
(
sfh
,sfh+1))

282 
	g‰ì_£g_queue
[
sfh
%
FREE_SEG_LEN
] = 
£g
;

308 
	gCCEH
::
CCEH
()

310 
poöt
 = 0;

311 
öô
(1);

313 
	gCCEH
::
CCEH
(
ö_dïth
)

315 
poöt
 = 1;

316 
öô
(
ö_dïth
);

318 
	gCCEH
::~
CCEH
()

320 
˛ón
();

323 
	gCCEH
::
thªad_loˇl_öô
()

325 
ãmp_£g
 = 
Æloc_£g
();

328 
	gCCEH
::
thªad_loˇl_˛ón
()

330 
‰ì
(
ãmp_£g
);

333 
	gCCEH
::
öô
(
ö_dïth
)

336 
i
;

337 
	gdïth
 = 
ö_dïth
;

338 
	gdm
 = 
r_mask
[
dïth
];

339 
	g£g_˙t
 = 1 << 
dïth
;

344 
	g£g_li°
 = (
SEG
** vﬁ©ûe)
mÆloc
((SEG* vﬁ©ûeË* 
£g_˙t
);

353 
	gi
=0;i<
	g£g_˙t
;i++)

358 
	g£g_li°
[
i
] = 
Æloc_£g
();

361 
öv_£g
(
£g_li°
[
i
]);

362 
	g£g_li°
[
i
]->
	glock
 = 0;

364 
	g£g_li°
[
i
]->
	gdïth
 = 
dïth
;

370 
	gwrôe_lock
 = 0;

374 #i‡
˘t


375 
	gbc
 = 
sc
 = 
˘t1
 = 
˘t3
 = 
˘t2
 = 0;

376 
	gföd_˙t
 = 
pic
 = 1;

380 
	gCCEH
::
˛ón
()

382 
i
;

383 
	gi
=
£g_˙t
-1;i>=0;i--)

385 i‡(
	gi
 + 1 <((
uöt64_t
)1 << 
£g_li°
[
i
]->
dïth
))

398 
‰ì
(
£g_li°
[
i
]);

401 
‰ì
((*)
£g_li°
);

403 #ifde‡
˘t


404 
¥ötf
("dïth %d s∂ô_˙à%d in£π %ld in£π_avg %ld s∂ô %ld câ3 %ld in£π_˙à%d b¯%d föd %ld föd_˙à%d föd_avg %ld \n",
dïth
,
sc
,
˘t1
,˘t1/
pic
,
˘t2
,
˘t3
,pic,
bc
,
˘t4
,
föd_˙t
,ctt4/find_cnt);

410 
boﬁ
 
	gCCEH
::
ªad
(
uöt64_t
 &
key
,vﬁ©ûêuöt64_à**
ªt
,vﬁ©ûê**
£g_dïth
)

412 
boﬁ
 
	gsf
 = 
Ál£
;

413 
boﬁ
 
	gexi°
;

414 
	gåue
)

416 
	gexi°
 = 
ªad_wôh_Áû
(
key
,
ªt
,
£g_dïth
,
sf
);

417 i‡(
	gsf
)

418  
	gexi°
;

422 
boﬁ
 
	gCCEH
::
ªad_wôh_Áû
(
uöt64_t
 &
key
,vﬁ©ûêuöt64_à**
ªt
,vﬁ©ûê**
£g_dïth
, boﬁ &
sf
)

432 #ifde‡
˘t


433 
	gföd_˙t
++;

434 
time•ec
 
	gts1
,
	gts2
;

435 
˛ock_gëtime
(
CLOCK_MONOTONIC
,&
ts1
);

436 
_mm_m„n˚
();

438 
	g¢
,
	g˙
,
	gi
;

439 
KVP
* 
	gkvp_p
;

440 
uöt64_t
 
	ghk
;

442 c⁄° 
	g˛_shi·
 = 64-
CL_BIT
;

443 
	gl
;

444 
	g°¨t_dïth
;

447 i‡(
zîo_check
(
key
))

449 *
	gªt
 = &
zîo_íåy
.
vÆue
;

450 *
	g£g_dïth
 = 
NULL
;

451 i‡(
	gzîo_íåy
.
	gvîsi⁄
 & (
	gVER_DELETE
))

452  
	gÁl£
;

454  
	gåue
;

462 
	ghk
 = 
hf
(
key
);

468 
	g¢
 = 
hk
 & 
dm
;

471 
	g˙
 = 
hk
 >> 
˛_shi·
;

474 
	gl
 = 
˙
*
KVP_PER_CL
;

476 *
	g£g_dïth
 = &
£g_li°
[
¢
]->
dïth
;

477 
	g°¨t_dïth
 = 
£g_li°
[
¢
]->
dïth
;

478 
_mm_s„n˚
();

479 
	gkvp_p
 = (
KVP
*)
£g_li°
[
¢
]->
˛
;

494 
	gi
=0;i<
KVP_PER_CL
 * 
	gLINEAR_MULTI
;i++)

497 
	gl
%=
CL_PER_SEG
*
KVP_PER_CL
;

501 i‡(
	gkvp_p
[
l
].
	gkey
 =
key
)

503 #ifde‡
˘t


504 
_mm_m„n˚
();

505 
˛ock_gëtime
(
CLOCK_MONOTONIC
,&
ts2
);

506 
	g˘t4
+=(
ts2
.
tv_£c
-
ts1
.tv_£c)*1000000000+ts2.
tv_n£c
-ts1.tv_nsec;

509 *
	gªt
 = &
kvp_p
[
l
].
vÆue
;

510 
_mm_s„n˚
();

511 
	gsf
 = (
°¨t_dïth
 =
£g_li°
[
¢
]->
dïth
);

512  
	gåue
;

516 
	gl
++;

519 
_mm_s„n˚
();

520 
	gsf
 = (
°¨t_dïth
 =
£g_li°
[
¢
]->
dïth
);

521  
	gÁl£
;

525 
	gCCEH
::
ªmove
(
uöt64_t
 &
key
)

530 
¢
,
	g˙
,
	gi
;

532 
KVP
* 
	gkvp_p
;

533 
SEG
* 
	g£g
;

534 * 
	grv
;

535 
	gz
 = 0;

537 
	gl
;

541 i‡(
zîo_check
(
key
))

543 
	göv0_vÆue
 = 0;

547 c⁄° 
uöt64_t
 
	ghk
 = 
hf
(
key
);

548 c⁄° 
uöt32_t
 
	ghk2
 = *(uöt32_t*)(&
hk
);

550 
	gªåy
:

555 
¢
 = 
hk
 % ((
uöt64_t
)1 << 
dïth
);

557 
	g˙
 = 
hk
 >> (64-
CL_BIT
);

559 
	g£g
 = (
SEG
*)
£g_li°
[
¢
];

563 
©_lock2
(
£g
->
lock
);

566 i‡(
	g¢
 !
hk
 % ((
uöt64_t
)1 << 
dïth
))

569 
©_u∆ock2
(
£g
->
lock
);

571 
	gªåy
;

575 
	gkvp_p
 = (
KVP
*)
£g_li°
[
¢
]->
˛
;

576 
	gl
 = 
˙
*
KVP_PER_CL
;

578 
	gi
=0;i<
KVP_PER_CL
 * 
	gLINEAR_MULTI
;i++)

580 
	gl
%=
KVP_PER_CL
*
CL_PER_SEG
;

583 i‡(
com∑ª_key
(
kvp_p
[
l
].
key
,key,
hk2
))

585 
	gkvp_p
[
l
].
	gvÆue
 = 0;

589 
©_u∆ock2
(
£g
->
lock
);

592 
	gl
++;

596 
©_u∆ock2
(
£g
->
lock
);

605 
£g_gc
()

608 
SEG
* 
	g£g
;

610 
uöt32_t
 
	gi
,
	gèû
,
	ghód
;

611 
	gèû
 = 
£g_‰ì_èû
;

612 
	ghód
 = 
£g_‰ì_hód
;

613 
	gi
 = 
èû
;ò< 
	ghód
;i++)

622 
	g£g
 = 
‰ì_£g_queue
[
i
%
FREE_SEG_LEN
];

623 
‰ì
(
£g
);

629 
	gCCEH
::
dú_doubÀ
()

631 
¥ötf
("c˚h dú doubÀ dïth %d\n",
dïth
);

632 
SEG
** vﬁ©ûê
	g√w_li°
;

633 
SEG
** vﬁ©ûê
	gﬁd_li°
;

634 
	gﬁd_li°
 = (
SEG
** vﬁ©ûe)
£g_li°
;

635 
	g√w_li°
 = (
SEG
** vﬁ©ûe)
mÆloc
((SEG* vﬁ©ûeË* 
£g_˙t
*2);

638 
	gi
;

639 
	gi
=0;i<
	g£g_˙t
;i++)

640 
	g√w_li°
[
i
] = 
√w_li°
[
£g_˙t
+i] = 
ﬁd_li°
[i];

644 
	g£g_li°
 = 
√w_li°
;

645 
	g£g_˙t
*=2;

646 ++
	gdïth
;

647 
	gdm
 = 
r_mask
[
dïth
];

648 
_mm_s„n˚
();

649 
‰ì
(
ﬁd_li°
);

653 
¥öt_£g
(
SEG
* 
£g
,
¢
)

681 
	gCCEH
::
•lô
(
¢
)

684 
SEG
* 
£g
;

685 
	gi
;

686 
	g˙t
;

688 
uöt64_t
 
	gmask
;

689 
KVP
* 
	gkvp_p
;

690 
KVP
* 
	g√w_kvp_p1
;

691 
KVP
* 
	g√w_kvp_p2
;

693 
	g£g
 = 
£g_li°
[
¢
];

696 i‡(
	g£g
->
	gdïth
 =
dïth
)

698 
uöt8_t
 
lock
;

718 
	glock
 = 
wrôe_lock
;

720 i‡(
	glock
)

722 
©_u∆ock2
(
£g
->
lock
);

726 i‡(
	gwrôe_lock
.
com∑ª_exch™ge_°r⁄g
(
lock
,lock+1))

732 i‡(
	g£g
->
	gdïth
 !
dïth
)

734 
©_u∆ock2
(
£g
->
lock
);

736 
	gwrôe_lock
--;

742 
	gåue
)

744 
	g˙t
 = 0;

745 
	gi
=0;i<
	gnum_quîy_thªad
;i++)

748 i‡(
	gquîy_thªad_li°
[
i
].
	gªad_lock
)

749 ++
	g˙t
;

751 
	gi
=0;i<
	gnum_evi˘_thªad
;i++)

754 i‡(
	gevi˘_thªad_li°
[
i
].
	gªad_lock
)

755 ++
	g˙t
;

757 i‡(
	g˙t
 < 1)

769 
dú_doubÀ
();

774 
	gwrôe_lock
--;

786 
	gkvp_p
 = (
KVP
*)
£g
->
˛
;

788 
SEG
* 
	g√w_£g1
;

789 
SEG
* 
	g√w_£g2
;

792 
	g√w_£g1
 = 
ãmp_£g
;

793 
	g√w_£g2
 = 
Æloc_£g
();

797 
öv_£g
(
√w_£g1
);

798 
öv_£g
(
√w_£g2
);

800 
	g√w_£g1
->
	glock
 = 0;

802 
	g√w_£g1
->
	gdïth
 = 
£g
->
dïth
+1;

804 
	g√w_£g2
->
	glock
 = 0;

806 
	g√w_£g2
->
	gdïth
 = 
£g
->
dïth
+1;

808 
	g√w_kvp_p1
 = (
KVP
*)
√w_£g1
->
˛
;

809 
	g√w_kvp_p2
 = (
KVP
*)
√w_£g2
->
˛
;

812 
	gmask
 = (
uöt64_t
)1 << 
£g
->
dïth
;

814 
	gj
,
	gl
;

816 
uöt64_t
 
	ghk
;

820 
	gi
=0;i<
	gCL_PER_SEG
;i++)

824 
	gl
 = 
i
*
KVP_PER_CL
;

826 
	gj
=0;j<
	gKVP_PER_CL
;j++)

828 i‡(
	gkvp_p
[
l
].
	gkey
 =
INV0
 || 
kvp_p
[l].
vÆue
 == 0)

833 
l
++;

846 
	ghk
 = 
hf
(
kvp_p
[
l
].
key
);

876 i‡(
	ghk
 & 
	gmask
)

877 
	g√w_kvp_p2
[
l
] = 
kvp_p
[l];

879 
	g√w_kvp_p1
[
l
] = 
kvp_p
[l];

888 
	gl
++;

892 
_mm_s„n˚
();

899 
	gl
 = 1 << (
£g
->
dïth
+1);

902 
	gi
=
¢
;i<
	g£g_˙t
;i+=
l
)

903 
£g_li°
[
i
] = 
√w_£g1
;

908 
	gi
=
¢
 + (1 << 
£g
->
dïth
);i<
	g£g_˙t
;i+=
l
)

909 
£g_li°
[
i
] = 
√w_£g2
;

943 
_mm_s„n˚
();

945 
	gãmp_£g
 = 
£g
;

950 
KVP
* 
	gCCEH
::
ö£π
(
uöt64_t
 &
key
,
°d
::
©omic
<
uöt8_t
> **
u∆ock_p
,vﬁ©ûêuöt8_à&
ªad_lock
)

952 
KVP
* 
	gªt
;

953 
	gåue
)

955 
	gªt
 = 
ö£π_wôh_Áû
(
key
,
u∆ock_p
,
ªad_lock
);

956 i‡(
	gªt
 !
NULL
)

957  
ªt
;

963 
KVP
* 
	gCCEH
::
ö£π_wôh_Áû
(
uöt64_t
 &
key
,
°d
::
©omic
<
uöt8_t
> **
u∆ock_p
,vﬁ©ûêuöt8_à&
ªad_lock
)

973 #ifde‡
˘t


974 
	gpic
++;

975 
time•ec
 
	gts1
,
	gts2
,
	gts3
,
	gts4
;

976 
˛ock_gëtime
(
CLOCK_MONOTONIC
,&
ts3
);

977 
_mm_m„n˚
();

979 
	g¢
,
	g˙
,
	gi
;

980 
uöt64_t
 
	ghk
;

981 
uöt32_t
 
	ghk2
;

982 c⁄° 
	g˛_shi·
 = 64-
CL_BIT
;

983 
	gl
;

984 
SEG
* 
	g£g
;

985 
KVP
* 
	gkvp_p
;

989 i‡(
zîo_check
(
key
))

991 
¥ötf
("zero\n");

992 
©_lock2
(
zîo_lock
);

993 *
	gu∆ock_p
 = &
zîo_lock
;

994 
	gdú_lock
++;

995  &
	gzîo_íåy
;

997 
	göv0_vÆue
 = 
ve_u
.
ve_64
;

998 i‡(
	gu∆ock
)

999 *(**)
	gu∆ock
 = 
NULL
;

1000  &
	göv0_vÆue
;

1009 i‡(
	gwrôe_lock
)

1012  
	gNULL
;

1020 ++
	gªad_lock
;

1024 i‡(
	gwrôe_lock
)

1026 
¥ötf
("split?\n");

1028 --
	gªad_lock
;

1029  
	gNULL
;

1039 i‡(
zîo_check
(
key
))

1041 
¥ötf
("zero\n");

1042 
©_lock2
(
zîo_lock
);

1043 *
	gu∆ock_p
 = &
zîo_lock
;

1044  &
	gzîo_íåy
;

1047 
	ghk
 = 
hf
(
key
);

1061 
	g¢
 = 
hk
 & 
dm
;

1066 
	g˙
 = 
hk
 >> 
˛_shi·
;

1074 
	g£g
 = 
£g_li°
[
¢
];

1084 i‡(
åy_©_lock2
(
£g
->
lock
) == 0)

1094 --
ªad_lock
;

1095  
	gNULL
;

1103 i‡(
	g£g
 !
£g_li°
[
¢
])

1108 
©_u∆ock2
(
£g
->
lock
);

1112 
	gdú_lock
--;

1117 i‡(
ö£π2
(
key
,
vÆue
,
¢
,
˙
))

1120 
©_u∆ock2
(
£g
->
lock
);

1122 #ifde‡
˘t


1123 
˛ock_gëtime
(
CLOCK_MONOTONIC
,&
ts4
);

1124 
	g˘t1
+=(
ts4
.
tv_£c
-
ts3
.tv_£c)*1000000000+ts4.
tv_n£c
-ts3.tv_nsec;

1131  
	gkvp_p
 = (
KVP
*)
£g
->
˛
;

1132 
	gl
 = 
˙
*
KVP_PER_CL
;

1146 #ifde‡
˘t


1151 i‡(
	gpoöt
)

1153 
	göv0_vÆue
.
	gnode_off£t
 = 0;

1154  &
	göv0_vÆue
;

1157 
	gi
=0;i<
KVP_PER_CL
 * 
	gLINEAR_MULTI
;i++)

1159 #ifde‡
˘t


1162 
	gl
%=
KVP_PER_CL
*
CL_PER_SEG
;

1166 i‡(
	gkvp_p
[
l
].
	gkey
 =
INV0
 || 
kvp_p
[l].
key
 == key)

1175 *
u∆ock_p
 = &
£g
->
lock
;

1176 #ifde‡
˘t


1177 
_mm_m„n˚
();

1178 
˛ock_gëtime
(
CLOCK_MONOTONIC
,&
ts4
);

1179 
	g˘t1
+=(
ts4
.
tv_£c
-
ts3
.tv_£c)*1000000000+ts4.
tv_n£c
-ts3.tv_nsec;

1182  &
	gkvp_p
[
l
];

1184 
	gl
++;

1188 i‡(
	gi
 < 
KVP_PER_CL
*
	gLINEAR_MULTI
)

1190 i‡(
	gkvp_p
[
l
].
	gkey
 =
INV0
)

1192 
kvp_p
[
l
].
vÆue
 = value;

1193 
_mm_s„n˚
();

1194 
	gkvp_p
[
l
].
	gkey
 = 
key
;

1198 i‡(
	gu∆ock
)

1199 *(**)
	gu∆ock
 = 
£g
;

1201 
©_u∆ock2
(
£g
->
lock
);

1202 #ifde‡
˘t


1203 
_mm_m„n˚
();

1204 
˛ock_gëtime
(
CLOCK_MONOTONIC
,&
ts4
);

1205 
	g˘t1
+=(
ts4
.
tv_£c
-
ts3
.tv_£c)*1000000000+ts4.
tv_n£c
-ts3.tv_nsec;

1208  &
	gkvp_p
[
l
].
	gvÆue
;

1210 i‡(
	gkvp_p
[
l
].
	gkey
 =
key
)

1212 i‡(
u∆ock
)

1213 *(**)
u∆ock
 = 
£g
;

1216 
	gkvp_p
[
l
].
	gvÆue
 = 
vÆue
;

1217 
_mm_s„n˚
();

1218 
©_u∆ock2
(
£g
->
lock
);

1223 #ifde‡
˘t


1224 
_mm_m„n˚
();

1225 
˛ock_gëtime
(
CLOCK_MONOTONIC
,&
ts4
);

1226 
	g˘t1
+=(
ts4
.
tv_£c
-
ts3
.tv_£c)*1000000000+ts4.
tv_n£c
-ts3.tv_nsec;

1229  &
	gkvp_p
[
l
].
	gvÆue
;

1235 #ifde‡
˘t


1236 
_mm_m„n˚
();

1237 
	gsc
++;

1238 
˛ock_gëtime
(
CLOCK_MONOTONIC
,&
ts1
);

1240 
•lô
(
¢
 % ((
uöt64_t
)1 << 
£g
->
dïth
));

1241 #ifde‡
˘t


1242 
_mm_m„n˚
();

1243 
˛ock_gëtime
(
CLOCK_MONOTONIC
,&
ts2
);

1244 
	g˘t2
+=(
ts2
.
tv_£c
-
ts1
.tv_£c)*1000000000+ts2.
tv_n£c
-ts1.tv_nsec;

1258 --
	gªad_lock
;

1260  
	gNULL
;

1266 
	gCCEH
::
u∆ock_íåy2
(
°d
::
©omic
<
uöt8_t
> *
lock_p
,vﬁ©ûêuöt8_à&
ªad_lock
)

1279 i‡(!
	gpoöt
)

1280 
¥ötf
("ueÉrrror?\n");

1281 i‡(
	glock_p
)

1284 
©_u∆ock2
(*
lock_p
);

1286 --
	gªad_lock
;

1290 
öô_c˚h
()

1292 
¥ötf
("init cceh\n");

1295 
¥ötf
("sizeo‡KVP %ld\n",(
KVP
));

1296 
¥ötf
("sizeo‡CL %ld\n",(
CL
));

1297 
	gi
;

1298 
	gr_mask
[0] = 0;

1299 
	gi
=1;i<=64;i++)

1300 
	gr_mask
[
i
] = 
r_mask
[i-1]*2+1;

1303 i‡(
	gKEY_SIZE
 != 8)

1305 
key_¨øy
 = (**)
mÆloc
((*Ë* 
KEY_ARRAY_MAX
);

1306 
	gkey_˙t
 = (*)
mÆloc
((*Ë* 
KEY_ARRAY_MAX
);

1307 
	gkey_¨øy_˙t
 = 0;

1309 
	gmax_ödex
 = 
KEY_SIZE
*
KEY_ARRAY_MAX
;

1310 
	gkey_˙t
[0] = 
max_ödex
;

1311 
	gkey_¨øy
[0] = 
NULL
;

1316 
	ghash_ödex
 = 
√w
 
CCEH
(20);

1319 
˛ón_c˚h
()

1321 
¥ötf
("clean cceh\n");

1324 
¥ötf
("SEG sizê%ld hash %lfGB\n",(
SEG
),(
Æloc_£g_˙t
*(SEG))/1024/1024/1024);

1325 
¥ötf
("SEG cou¡ %u\n",
Æloc_£g_˙t
.
lﬂd
());

1329 i‡(
	gkey_¨øy
)

1331 
	gi
;

1332 
	gi
=0+1;i<
	gkey_¨øy_˙t
;i++)

1333 
‰ì
(
key_¨øy
[
i
]);

1334 
‰ì
(
key_¨øy
);

1335 
‰ì
(
key_˙t
);

1338 
dñëe
 
	ghash_ödex
;

1355 
ölöe
 * 
	gCCEH_vk
::
lﬂd_key
(c⁄° 
uöt64_t
 &
key
)

1359 
KeyE¡ry_u
 
ku
;

1360 
	gku
.
	gke_64
 = 
key
;

1361  &
	gkey_¨øy
[
ku
.
ke
.
hp
.
key_¨øy
][ku.ke.hp.
key_off£t
];

1366 
ölöe
 * 
	gCCEH_vk
::
lﬂd_key2
(c⁄° 
KeyE¡ry
 &
key
)

1370  &
key_¨øy
[
key
.
hp
.key_¨øy][key.hp.
key_off£t
];

1375 
ölöe
 
boﬁ
 
	gCCEH_vk
::
com∑ª_key
(c⁄° vﬁ©ûê
uöt64_t
 &
key1
,* c⁄° &
key2
,c⁄° 
uöt32_t
 &
hash
)

1377 
KeyE¡ry_u
 
	gkey
;

1378 
	gkey
.
	gke_64
 = 
key1
;

1379 i‡(
	ghash
 !
key
.
ke
.
hp
.
hash
)

1380  
Ál£
;

1381 * 
	gkl
 = 
lﬂd_key2
(
key
.
ke
);

1382  *((
	guöt64_t
*)
	gkl
Ë=*((
uöt64_t
*)
key2
Ë&& *((uöt64_t*)
kl
+1) == *((uint64_t*)key2+1);

1384 
ölöe
 
	gCCEH_vk
::
ö£π_key
(vﬁ©ûê
uöt64_t
 &
key1
,* c⁄° &
key2
,c⁄° 
uöt32_t
 &
hash
)

1387 i‡(
	gkey_˙t
[
key_¨øy_ödex
] + 
	gPH_KEY_SIZE
 >
max_ödex
)

1389 
key_¨øy_ödex
 = 
key_¨øy_˙t
.
„tch_add
(1);

1390 
	gkey_˙t
[
key_¨øy_ödex
] = 0;

1391 
	gkey_¨øy
[
key_¨øy_ödex
] = (*)
mÆloc
(
max_ödex
);

1394 
mem˝y
(&
key_¨øy
[
key_¨øy_ödex
][
key_˙t
[key_¨øy_ödex]],
key2
,
PH_KEY_SIZE
);

1396 
KeyE¡ry_u
 
	gkey
;

1397 
	gkey
.
	gke
.
	ghp
.
	gkey_¨øy
 = 
key_¨øy_ödex
;

1398 
	gkey
.
	gke
.
	ghp
.
	gkey_off£t
 = 
key_˙t
[
key_¨øy_ödex
];

1399 
	gkey
.
	gke
.
	ghp
.
	ghash
 = 
hash
;

1401 
	gkey_˙t
[
key_¨øy_ödex
]+=
PH_KEY_SIZE
;

1403 
	gkey1
 = 
key
.
ke_64
;

1408 
ölöe
 
uöt64_t
 
	gCCEH_vk
::
hf
(* c⁄° &
key
)

1421  
°d
::
_Hash_byãs
(
key
,16,5516);

1425 
ölöe
 
boﬁ
 
	gCCEH_vk
::
zîo_check
(* c⁄° &
key
)

1427  
Ál£
;

	@/home/cgmin/pmem/ph/ph/cceh.h

4 
	~<©omic
>

10 
	#INV0
 0xffffffffffffffff

	)

14 
	#KVP_PER_CL
 2

15 
	#CL_SIZE
 64

	)

18 
	#CL_BIT
 4

	)

19 
	#CL_PER_SEG
 (1 << 
CL_BIT
)

	)

20 
	#LINEAR_MULTI
 4

	)

22 
	#SPLIT_MASK
 (1 << 6)

23 

	)

26 
«me•a˚
 
	gPH


31 
	#KEY_ARRAY_MAX
 (1 << 16)

	)

35 
	sH™dP


37 
uöt32_t
 
	ghash
;

38 
uöt16_t
 
	gkey_¨øy
;

39 
uöt16_t
 
	gkey_off£t
;

42 
	uKeyE¡ry


44 
uöt64_t
 
	gkey_vÆue
;

45 
H™dP
 
	ghp
;

48 
	uKeyE¡ry_u


50 
KeyE¡ry
 
	gke
;

51 
uöt64_t
 
	gke_64
;

54 
	sKVP


73 vﬁ©ûê
uöt64_t
 
	gkey
;

74 vﬁ©ûê
uöt64_t
 
	gvÆue
;

78 
	sKVP


80 vﬁ©ûê
uöt64_t
 
	gkey
;

81 vﬁ©ûê
uöt64_t
 
	gvÆue
;

83 vﬁ©ûê
uöt64_t
 
	gvîsi⁄
;

85 vﬁ©ûê
uöt64_t
 
	g∑ddög
;

95 
	sCL


97 
KVP
 
	gkvp
[
KVP_PER_CL
];

100 
	sSEG


102 
CL
 
	g˛
[
CL_PER_SEG
];

104 
	g°d
::
©omic
<
uöt8_t
> 
lock
;

107 vﬁ©ûê
	gdïth
;

111 ˛as†
	cCCEH


113 
	gpublic
:

114 
CCEH
();

115 
CCEH
(
ö_dïth
);

116 ~
CCEH
();

118 
thªad_loˇl_öô
();

119 
thªad_loˇl_˛ón
();

121 
	g¥iv©e
:

125 
ölöe
 
uöt64_t
 
hf
(* c⁄° &
key
);

126 
ölöe
 
uöt64_t
 
hf
(uöt64_à
key
);

131 vﬁ©ûê
	gdïth
;

132 vﬁ©ûê
	g£g_˙t
;

134 
SEG
* vﬁ©ûê* vﬁ©ûê
	g£g_li°
;

148 
dú_doubÀ
();

149 
•lô
(
¢
);

151 
öô
(
ö_dïth
);

152 
˛ón
();

155 
	gpublic
:

160 
KVP
* 
ö£π
(
uöt64_t
 &
key
,
°d
::
©omic
<
uöt8_t
> **
u∆ock_p
,vﬁ©ûêuöt8_à&
ªad_lock
);

161 
KVP
* 
ö£π_wôh_Áû
(
uöt64_t
 &
key
,
°d
::
©omic
<
uöt8_t
> **
u∆ock_p
,vﬁ©ûêuöt8_à&
ªad_lock
);

163 
lock
(
KVP
* 
kvp
);

164 
u∆ock
(
KVP
* 
kvp
);

166 
boﬁ
 
ªad
(
uöt64_t
 &
key
,vﬁ©ûêuöt64_à**
ªt
,vﬁ©ûê**
£g_dïth
);

167 
boﬁ
 
ªad_wôh_Áû
(
uöt64_t
 &
key
,vﬁ©ûêuöt64_à**
ªt
,vﬁ©ûê**
£g_dïth
,boﬁ &
sf
);

168 
ªmove
(
uöt64_t
 &
key
);

171 
u∆ock_íåy2
(
°d
::
©omic
<
uöt8_t
> *
lock_p
,vﬁ©ûêuöt8_à&
ªad_lock
);

173 
	g¥iv©e
:

175 
uöt64_t
 
dm
;

176 
	gpoöt
;

178 
	gsc
,
	gpic
,
	gbc
,
	gföd_˙t
;

179 
uöt64_t
 
	g˘t1
,
	g˘t2
,
	g˘t3
,
	g˘t4
;

182 
	g°d
::
©omic
<
uöt8_t
> 
wrôe_lock
;

184 
KVP
 
	gzîo_íåy
;

185 
	g°d
::
©omic
<
uöt8_t
> 
zîo_lock
;

188 ˛as†
	cCCEH_vk
 : 
public
 
CCEH


190 
ölöe
 
boﬁ
 
com∑ª_key
(c⁄° vﬁ©ûê
uöt64_t
 &
key1
,* c⁄° &
key2
,c⁄° 
uöt32_t
 &
hash
);

191 
ölöe
 
ö£π_key
(vﬁ©ûê
uöt64_t
 &
key1
,* c⁄° &
key2
,c⁄° 
uöt32_t
 &
hash
);

192 
ölöe
 
uöt64_t
 
hf
(* c⁄° &
key
);

193 
ölöe
 * 
lﬂd_key
(c⁄° 
uöt64_t
 &
key
);

194 
ölöe
 * 
lﬂd_key2
(c⁄° 
KeyE¡ry
 &
key
);

195 
ölöe
 
boﬁ
 
zîo_check
(* c⁄° &
key
);

199 
öô_c˚h
();

200 
˛ón_c˚h
();

	@/home/cgmin/pmem/ph/ph/copy.h

3 
«me•a˚
 
	gPH


7 
	gNode
;

10 
ölöe
 
pf64x4
(*
ss
)

12 
__buûtö_¥e„tch
(
ss
,0,1);

13 
__buûtö_¥e„tch
(
ss
+1,0,1);

14 
__buûtö_¥e„tch
(
ss
+2,0,1);

15 
__buûtö_¥e„tch
(
ss
+3,0,1);

18 
ölöe
 
Rmm32x8
(* 
d
,*
s
)

21 
__m256i
 *
	gss
 = (__m256i*)
s
;

22 
__m256i
 *
	gdd
 = (__m256i*)
d
;

24 *(
	gdd
+7Ë
_mm256_°ªam_lﬂd_si256
(
ss
+7);

25 *(
	gdd
+6Ë
_mm256_°ªam_lﬂd_si256
(
ss
+6);

26 *(
	gdd
+5Ë
_mm256_°ªam_lﬂd_si256
(
ss
+5);

27 *(
	gdd
+4Ë
_mm256_°ªam_lﬂd_si256
(
ss
+4);

28 *(
	gdd
+3Ë
_mm256_°ªam_lﬂd_si256
(
ss
+3);

29 *(
	gdd
+2Ë
_mm256_°ªam_lﬂd_si256
(
ss
+2);

30 *(
	gdd
+1Ë
_mm256_°ªam_lﬂd_si256
(
ss
+1);

31 *(
	gdd
+0Ë
_mm256_°ªam_lﬂd_si256
(
ss
+0);

36 
ölöe
 
mm32x8
(* 
d
,*
s
)

39 
__m256i
 *
	gss
 = (__m256i*)
s
;

40 
__m256i
 *
	gdd
 = (__m256i*)
d
;

42 *
	gdd
 = 
_mm256_°ªam_lﬂd_si256
(
ss
);

43 *(
	gdd
+1Ë
_mm256_°ªam_lﬂd_si256
(
ss
+1);

44 *(
	gdd
+2Ë
_mm256_°ªam_lﬂd_si256
(
ss
+2);

45 *(
	gdd
+3Ë
_mm256_°ªam_lﬂd_si256
(
ss
+3);

46 *(
	gdd
+4Ë
_mm256_°ªam_lﬂd_si256
(
ss
+4);

47 *(
	gdd
+5Ë
_mm256_°ªam_lﬂd_si256
(
ss
+5);

48 *(
	gdd
+6Ë
_mm256_°ªam_lﬂd_si256
(
ss
+6);

49 *(
	gdd
+7Ë
_mm256_°ªam_lﬂd_si256
(
ss
+7);

53 
ölöe
 
mm64x4h1
(* 
d
,*
s
)

56 
__m512i
 *
	gss
 = (__m512i*)
s
;

57 
__m512i
 *
	gdd
 = (__m512i*)
d
;

59 *
	gdd
 = 
_mm512_°ªam_lﬂd_si512
(
ss
);

60 *(
	gdd
+2Ë
_mm512_°ªam_lﬂd_si512
(
ss
+2);

71 
ölöe
 
mm64x4h2
(* 
d
,*
s
)

74 
__m512i
 *
	gss
 = (__m512i*)
s
;

75 
__m512i
 *
	gdd
 = (__m512i*)
d
;

77 *(
	gdd
+1Ë
_mm512_°ªam_lﬂd_si512
(
ss
+1);

78 *(
	gdd
+3Ë
_mm512_°ªam_lﬂd_si512
(
ss
+3);

88 
ölöe
 
mm64x4
(* 
d
,*
s
)

91 
__m512i
 *
	gss
 = (__m512i*)
s
;

92 
__m512i
 *
	gdd
 = (__m512i*)
d
;

94 *
	gdd
 = 
_mm512_°ªam_lﬂd_si512
(
ss
);

95 *(
	gdd
+1Ë
_mm512_°ªam_lﬂd_si512
(
ss
+1);

96 *(
	gdd
+2Ë
_mm512_°ªam_lﬂd_si512
(
ss
+2);

97 *(
	gdd
+3Ë
_mm512_°ªam_lﬂd_si512
(
ss
+3);

109 
ölöe
 
˛64x4
(* 
d
,*
s
)

112 
	gbuf„r
[64];

114 
__m512i
 *
	gss
 = (__m512i*)
s
;

115 
__m512i
 *
	gdd
 = (__m512i*)
d
;

123 *
	gdd
 = 
_mm512_°ªam_lﬂd_si512
(
ss
);

124 *(
	gdd
+1Ë
_mm512_°ªam_lﬂd_si512
(
ss
+1);

125 *(
	gdd
+2Ë
_mm512_°ªam_lﬂd_si512
(
ss
+2);

126 *(
	gdd
+3Ë
_mm512_°ªam_lﬂd_si512
(
ss
+3);

131 
ölöe
 
pf256
(* 
a
,
size_t
 
s
)

136 
	gi
=0;

137 
	gi
 < 
	gs
)

140 
pf64x4
(
a
);

141 
	gi
+=256;

142 
	ga
+=256;

146 
ölöe
 
˝256h1
(* 
a
,* 
b
,
size_t
 
s
)

148 
	gi
=0;

149 
	gi
 < 
	gs
)

151 
mm64x4h1
(
a
,
b
);

152 
	gi
+=256;

153 
	ga
+=256;

154 
	gb
+=256;

158 
ölöe
 
˝256h2
(* 
a
,* 
b
,
size_t
 
s
)

160 
	gi
=0;

161 
	gi
 < 
	gs
)

163 
mm64x4h2
(
a
,
b
);

164 
	gi
+=256;

165 
	ga
+=256;

166 
	gb
+=256;

171 
ölöe
 
˝256
(* 
a
,* 
b
,
size_t
 
s
)

177 
	gi
=0;

178 
	gi
 < 
	gs
)

180 #i‚de‡
AVX


181 
mem˝y
(
a
,
b
,256);

185 
	gi
+=256;

186 
	ga
+=256;

187 
	gb
+=256;

192 
ölöe
 
¡256
(* 
a
,* 
b
,
size_t
 
s
)

195 
	gi
=0;

196 
	gi
 < 
	gs
)

198 
pmem_mem˝y
(
a
,
b
,256,
PMEM_F_MEM_NONTEMPORAL
);

199 
	gi
+=256;

200 
	ga
+=256;

201 
	gb
+=256;

205 
ölöe
 
˝256
(* 
a
,* 
b
)

210 
	gi
=0;

211 
	gi
 < (
	gNode
))

213 
mem˝y
(
a
,
b
,256);

214 
	gi
+=256;

215 
	ga
+=256;

216 
	gb
+=256;

221 
ölöe
 
¡256
(* 
a
,* 
b
)

224 
	gi
=0;

225 
	gi
 < (
	gNode
))

227 
pmem_mem˝y
(
a
,
b
,256,
PMEM_F_MEM_NONTEMPORAL
);

228 
	gi
+=256;

229 
	ga
+=256;

230 
	gb
+=256;

	@/home/cgmin/pmem/ph/ph/data.cpp

1 
	~<libpmem.h
>

3 
	~<©omic
>

5 
	~<°dio.h
>

6 
	~<°rög.h
>

7 
	~<°dlib.h
>

8 
	~<x86öåö.h
>

10 
	~<uni°d.h
>

12 
	~"d©a.h
"

13 
	~"hash.h
"

15 
	~"quîy.h
"

16 
	~"thªad.h
"

18 
	~"c›y.h
"

22 
	#¥öt
 0

	)

27 
	#DRAM_BUF


	)

29 
«me•a˚
 
	gPH


36 ** 
	gpmem_addr
;

37 
	gis_pmem
;

38 
size_t
 
	gpmem_Àn
;

41 
Node
** 
	gnode_d©a_¨øy
;

44 ** 
	gmëa_addr
;

47 
Node_mëa
** 
	gmëa_¨øy
;

48 vﬁ©ûê
	gfûe_num
;

53 vﬁ©ûê
	g∑π_fûe_num
[
PM_N
];

54 vﬁ©ûê
	g∑π_off£t_˙t
[
PM_N
];

56 
	g°d
::
©omic
 <
uöt8_t
> 
Æloc_lock
;

62 vﬁ©ûê
	g‰ì_˙t
[
PM_N
];

63 vﬁ©ûê
	g‰ì_mö
[
PM_N
];

64 vﬁ©ûê
	g‰ì_ödex
[
PM_N
];

65 
Node_off£t
 
	g‰ì_queue
[
PM_N
][
FREE_QUEUE_LEN
];

74 
	#LOCAL_QUEUE_LEN
 20

	)

75 
thªad_loˇl
 
Node_off£t
 
	gloˇl_b©ch_Æloc
[
PM_N
][
LOCAL_QUEUE_LEN
];

76 
thªad_loˇl
 
	glbac
[
PM_N
];

77 
thªad_loˇl
 
Node_off£t
 
	gloˇl_b©ch_‰ì
[
PM_N
][
LOCAL_QUEUE_LEN
];

78 
thªad_loˇl
 
	glbfc
[
PM_N
];

80 
thªad_loˇl
 
	g∑π_rŸ©i⁄
=0;

89 
thªad_loˇl
 
Node
 *
	gd0
,*
	gd1
,*
	gd2
;

91 
˛ón_thªad_loˇl
()

93 
¥ötf
("ctr\n");

94 
	gi
,
	gj
;

95 
©_lock
(
Æloc_lock
);

96 
	gi
=0;i<
	gPM_N
;i++)

98 
	gj
=
lbac
[
i
];j<
	gLOCAL_QUEUE_LEN
;j++)

100 i‡(
	g‰ì_˙t
[
i
]-
	g‰ì_ödex
[i] >
FREE_QUEUE_LEN
)

102 
¥ötf
("queue fullÅl\n");

105 
	g‰ì_queue
[
i
][
‰ì_˙t
[i]%
	gFREE_QUEUE_LEN
] = 
loˇl_b©ch_Æloc
[i][
j
];

106 ++
	g‰ì_˙t
[
i
];

108 
	gj
=0;j<
	glbfc
[
i
];j++)

110 i‡(
	g‰ì_˙t
[
i
]-
	g‰ì_ödex
[i] >
FREE_QUEUE_LEN
)

112 
¥ötf
("queue fullÅl2\n");

115 
	g‰ì_queue
[
i
][
‰ì_˙t
[i]%
	gFREE_QUEUE_LEN
] = 
loˇl_b©ch_‰ì
[i][
j
];

116 ++
	g‰ì_˙t
[
i
];

120 
©_u∆ock
(
Æloc_lock
);

122 
‰ì
(
d0
);

123 
‰ì
(
d1
);

124 
‰ì
(
d2
);

133 
boﬁ
 
	gã°_Æloc_check
[1000][
MAX_OFFSET
];

134 
ã°_Æloc
(
Node_off£t
 
off£t
)

137 i‡(
	gã°_Æloc_check
[
off£t
.
fûe
][offset.offset])

139 
	gt
;

140 
¥ötf
("errorálloc\n");

141 
sˇnf
("%d\n",&
t
);

144 
ã°_‰ì
(
Node_off£t
 
off£t
)

147 i‡(
	gã°_Æloc_check
[
off£t
.
fûe
][offset.offset] == 0)

149 
t
;

150 
¥ötf
("error free\n");

151 
sˇnf
("%d\n",&
t
);

156 
uöt64_t
 
	gâ1
,
	gâ2
,
	gâ3
,
	gâ4
,
	gâ5
;

157 
uöt64_t
 
	gqâ1
,
	gqâ2
,
	gqâ3
,
	gqâ4
,
	gqâ5
,
	gqâ6
,
	gqâ7
,
	gqâ8
;

165 
©_lock
(
°d
::
©omic
<
uöt8_t
> &
lock
)

167 
uöt8_t
 
z
;

168 
	gåue
)

170 
	gz
 = 0;

171 i‡(
	glock
.
com∑ª_exch™ge_°r⁄g
(
z
,1))

202 
ölöe
 
Êush_mëa
(
Node_off£t
 
off£t
)

216 
pmem_mem˝y
(
off£t_to_node_d©a
(
off£t
),(
Node_mëa
*)
off£t_to_node
(off£t),()+(),
PMEM_F_MEM_NONTEMPORAL
);

221 
ölöe
 
Êush_√xt_off£t
(
Node_off£t
 
off£t
,Node_off£à
√xt_off£t
)

223 
pmem_mem˝y
(
off£t_to_node_d©a
(
off£t
),&
√xt_off£t
,(),
PMEM_F_MEM_NONTEMPORAL
);

227 
ölöe
 
Êush_√xt_off£t_ig
(
Node_off£t
 
off£t
,Node_off£à
√xt_off£t_ig
)

229 
pmem_mem˝y
((*)
off£t_to_node_d©a
(
off£t
)+(),&
√xt_off£t_ig
,(),
PMEM_F_MEM_NONTEMPORAL
);

234 
√w_fûe
()

236 
	gfûe_«me
[100];

237 
	gbuf„r
[10];

238 
	gÀn
,
	gnum
,
	gi
;

239 
	gfûe_num
++;

240 
°r˝y
(
fûe_«me
,
pmem_fûe
);

241 
°rˇt
(
fûe_«me
,"data");

242 
	gÀn
 = 
°æí
(
fûe_«me
);

243 
	gnum
 = 
fûe_num
+1;

244 
	gi
 = 0;

245 
	gnum
 > 0)

247 
	gbuf„r
[
i
] = 
num
%10+'0';

248 
	gi
++;

249 
	gnum
/=10;

251 
	gi
=
i
-1;i>=0;i--)

252 
	gfûe_«me
[
Àn
++] = 
buf„r
[
i
];

253 
	gfûe_«me
[
Àn
] = 0;

255 i‡(
	gUSE_DRAM
)

256 
	gpmem_addr
[
fûe_num
]=(*)
mm≠
(
NULL
,
FILE_SIZE
,
PROT_READ
|
PROT_WRITE
,
MAP_PRIVATE
|
MAP_ANONYMOUS
 ,-1,0);

259 
	gpmem_addr
[
fûe_num
] = (*)
pmem_m≠_fûe
(
fûe_«me
,
FILE_SIZE
,
PMEM_FILE_CREATE
,0777,&
pmem_Àn
,&
is_pmem
);

260 
	gmëa_addr
[
fûe_num
] = (*)
mm≠
(
NULL
,
META_SIZE
,
PROT_READ
|
PROT_WRITE
,
MAP_PRIVATE
|
MAP_ANONYMOUS
|
MAP_POPULATE
,-1,0);

262 
	gnode_d©a_¨øy
[
fûe_num
] = (
Node
*)
pmem_addr
[file_num];

263 
	gmëa_¨øy
[
fûe_num
] = (
Node_mëa
*)
mëa_addr
[file_num];

269 
Node_off£t
 
Æloc_node0
(
∑π
)

271 #ifde‡
dâ


272 
time•ec
 
	gts1
,
	gts2
;

273 
˛ock_gëtime
(
CLOCK_MONOTONIC
,&
ts1
);

274 
_mm_m„n˚
();

276 
Node_mëa
* 
	gnode
;

277 
Node_off£t
 
	goff£t
;

279 
©_lock
(
Æloc_lock
);

281 i‡(
	g‰ì_ödex
[
∑π
] =
‰ì_mö
[part])

283 
ãmp
;

284 
	gãmp
 = 
mö_‰ì_˙t
(
∑π
);

285 i‡(
	gãmp
 > 
	g‰ì_ödex
[
∑π
])

286 
	g‰ì_mö
[
∑π
] = 
ãmp
;

290 i‡(
	g‰ì_ödex
[
∑π
] < 
	g‰ì_mö
[part])

292 
	goff£t
 = 
‰ì_queue
[
∑π
][
‰ì_ödex
[∑π]%
FREE_QUEUE_LEN
];

295 ++
	g‰ì_ödex
[
∑π
];

296 
©_u∆ock
(
Æloc_lock
);

297 i‡(
	g¥öt
)

298 
¥ötf
("Ælo¯nodêª %p\n",
node
);

299 #ifde‡
dâ


300 
˛ock_gëtime
(
CLOCK_MONOTONIC
,&
ts2
);

301 
_mm_m„n˚
();

302 
	gâ5
 +(
ts2
.
tv_£c
-
ts1
.tv_£c)*1000000000+ts2.
tv_n£c
-ts1.tv_nsec;

306 #ifde‡
Æloc_ã°


307 
ã°_Æloc
(
off£t
);

308 
	gã°_Æloc_check
[
off£t
.
fûe
][offset.offset] = 1;

310  
	goff£t
;

313 i‡(
	g∑π_off£t_˙t
[
∑π
] =
MAX_OFFSET
/
PM_N
)

315 i‡(
∑π_fûe_num
[
∑π
] =
fûe_num
)

316 
√w_fûe
();

317 
	g∑π_fûe_num
[
∑π
]++;

318 
	g∑π_off£t_˙t
[
∑π
] = 0;

336 
	goff£t
.
	gfûe
 = 
∑π_fûe_num
[
∑π
];

339 
	goff£t_˙t
 = 
∑π_off£t_˙t
[
∑π
];

340 #ifde‡
SMALL_NODE


341 
	goff£t
.off£à(
off£t_˙t
/(
PAGE_SIZE
/
PM_N
/(
Node
))*PAGE_SIZE + 
∑π
*(PAGE_SIZE/PM_N) + (offset_cnt%(PAGE_SIZE/PM_N/(Node)))*(Node)) / (Node);

343 
	goff£t
.off£à
off£t_˙t
 * 
PM_N
 + 
∑π
;

346 
	gnode
 = 
off£t_to_node
(
off£t
);

347 ++
	g∑π_off£t_˙t
[
∑π
];

348 
©_u∆ock
(
Æloc_lock
);

350 
	gnode
->
	göv_kv
 = (
uöt16_t
*)
mÆloc
((uint16_t)*4);

351 
	gnode
->
	göv_max
 = 4;

352 
	gnode
->
	göv_˙t
 = 0;

353 #ifde‡
DOUBLE_LOG


354 
	gnode
->
	gÊush_kv
 = (**)
mÆloc
((*)*4);

355 
	gnode
->
	gÊush_max
 = 4;

356 
	gnode
->
	gÊush_˙t
 = 0;

360 #ifde‡
Æloc_ã°


361 
ã°_Æloc
(
off£t
);

362 
	gã°_Æloc_check
[
off£t
.
fûe
][offset.offset] = 1;

365 #ifde‡
dâ


366 
˛ock_gëtime
(
CLOCK_MONOTONIC
,&
ts2
);

367 
_mm_m„n˚
();

368 
	gâ5
 +(
ts2
.
tv_£c
-
ts1
.tv_£c)*1000000000+ts2.
tv_n£c
-ts1.tv_nsec;

370  
	goff£t
;

373 
Node_off£t
 
Æloc_node
(
∑π
)

375 i‡(
	glbac
[
∑π
] < 
	gLOCAL_QUEUE_LEN
)

378 #ifde‡
Æloc_ã°


380 
Node_off£t
 
	goff£t
 = 
loˇl_b©ch_Æloc
[
∑π
][
lbac
[part]];

381 
ã°_Æloc
(
off£t
);

382 
	gã°_Æloc_check
[
off£t
.
fûe
][offset.offset] = 1;

385  
	gloˇl_b©ch_Æloc
[
∑π
][
lbac
[part]++];

387 
Node_mëa
* 
	gnode
;

388 
Node_off£t
 
	goff£t
;

391 
©_lock
(
Æloc_lock
);

392 
	gi
;

393 
	gi
=0;i<
	gLOCAL_QUEUE_LEN
;i++)

396 i‡(
	g‰ì_ödex
[
∑π
] =
‰ì_mö
[part])

398 
ãmp
;

399 
	gãmp
 = 
mö_‰ì_˙t
(
∑π
);

400 i‡(
	gãmp
 > 
	g‰ì_ödex
[
∑π
])

401 
	g‰ì_mö
[
∑π
] = 
ãmp
;

404 i‡(
	g‰ì_ödex
[
∑π
] < 
	g‰ì_mö
[part])

406 
	gloˇl_b©ch_Æloc
[
∑π
][
i
] = 
‰ì_queue
[∑π][
‰ì_ödex
[∑π]%
FREE_QUEUE_LEN
];

407 ++
	g‰ì_ödex
[
∑π
];

410 i‡(
	g∑π_off£t_˙t
[
∑π
] =
MAX_OFFSET
/
PM_N
)

412 i‡(
∑π_fûe_num
[
∑π
] =
fûe_num
)

413 
√w_fûe
();

414 
	g∑π_fûe_num
[
∑π
]++;

415 
	g∑π_off£t_˙t
[
∑π
] = 0;

418 
	goff£t
.
	gfûe
 = 
∑π_fûe_num
[
∑π
];

420 
	goff£t_˙t
 = 
∑π_off£t_˙t
[
∑π
];

421 #ifde‡
SMALL_NODE


422 
	goff£t
.off£à(
off£t_˙t
/(
PAGE_SIZE
/
PM_N
/(
Node
))*PAGE_SIZE + 
∑π
*(PAGE_SIZE/PM_N) + (offset_cnt%(PAGE_SIZE/PM_N/(Node)))*(Node)) / (Node);

424 
	goff£t
.off£à
off£t_˙t
 * 
PM_N
 + 
∑π
;

428 
	gnode
 = 
off£t_to_node
(
off£t
);

429 ++
	g∑π_off£t_˙t
[
∑π
];

431 
	gnode
->
	göv_kv
 = (
uöt16_t
*)
mÆloc
((uint16_t)*4);

432 
	gnode
->
	göv_max
 = 4;

433 
	gnode
->
	göv_˙t
 = 0;

435 #ifde‡
DOUBLE_LOG


436 
	gnode
->
	gÊush_kv
 = (**)
mÆloc
((*)*4);

437 
	gnode
->
	gÊush_max
 = 4;

438 
	gnode
->
	gÊush_˙t
 = 0;

442 
	gloˇl_b©ch_Æloc
[
∑π
][
i
] = 
off£t
;

444 
©_u∆ock
(
Æloc_lock
);

445 
	glbac
[
∑π
] = 0;

447 #ifde‡
Æloc_ã°


449 
	goff£t
 = 
loˇl_b©ch_Æloc
[
∑π
][
lbac
[part]];

450 
ã°_Æloc
(
off£t
);

451 
	gã°_Æloc_check
[
off£t
.
fûe
][offset.offset] = 1;

454  
	gloˇl_b©ch_Æloc
[
∑π
][
lbac
[part]++];

456 
‰ì_node
(
Node_off£t
 
off£t
)

458 #ifde‡
SMALL_NODE


459 
	g∑π
 = 
off£t
.off£t%(
PAGE_SIZE
/(
Node
))/(PAGE_SIZE/
PM_N
/(Node));

461 
	g∑π
 = 
off£t
.off£t%
PM_N
;

464 i‡(
	glbfc
[
∑π
] < 
	gLOCAL_QUEUE_LEN
)

466 #ifde‡
Æloc_ã°


467 
ã°_‰ì
(
off£t
);

468 
	gã°_Æloc_check
[
off£t
.
fûe
][offset.offset] = 0;

470 
	gloˇl_b©ch_‰ì
[
∑π
][
lbfc
[∑π]++] = 
off£t
;

475 
©_lock
(
Æloc_lock
);

477 
	gi
;

478 
	gi
=0;i<
	gLOCAL_QUEUE_LEN
;i++)

481 
	g‰ì_ödex
[
∑π
] + 
	gFREE_QUEUE_LEN
/2 < 
	g‰ì_˙t
[part])

485 
upd©e_idÀ
();

487 
	gt
;

491 i‡(
	g‰ì_ödex
[
∑π
] + 
	gFREE_QUEUE_LEN
 < 
	g‰ì_˙t
[part])

493 
¥ötf
("queuêfuŒ %d %d %d %d\n",
∑π
,
‰ì_ödex
[∑π],
‰ì_mö
[∑π],
‰ì_˙t
[part]);

494 
¥ötf
("queue full\n");

495 
¥öt_thªad_öfo
();

496 
sˇnf
("%d",&
t
);

504 
	g‰ì_queue
[
∑π
][
‰ì_˙t
[∑π]%
	gFREE_QUEUE_LEN
] = 
loˇl_b©ch_‰ì
[∑π][
i
];

505 ++
	g‰ì_˙t
[
∑π
];

507 
©_u∆ock
(
Æloc_lock
);

508 #ifde‡
Æloc_ã°


509 
ã°_‰ì
(
off£t
);

510 
	gã°_Æloc_check
[
off£t
.
fûe
][offset.offset] = 0;

512 
	glbfc
[
∑π
]=0;

513 
	gloˇl_b©ch_‰ì
[
∑π
][
lbfc
[∑π]++] = 
off£t
;

516 
‰ì_node0
(
Node_off£t
 
off£t
)

518 #ifde‡
SMALL_NODE


519 
	g∑π
 = 
off£t
.off£t%(
PAGE_SIZE
/(
Node
)/(PAGE_SIZE/
PM_N
/(Node)));

521 
	g∑π
 = 
off£t
.off£à% 
PM_N
;

526 i‡(
	g‰ì_ödex
[
∑π
] + 
	gFREE_QUEUE_LEN
/2 < 
	g‰ì_˙t
[part])

528 
upd©e_idÀ
();

531 i‡(
	g‰ì_ödex
[
∑π
] + 
	gFREE_QUEUE_LEN
 < 
	g‰ì_˙t
[part])

534 
¥ötf
("queue full\n");

536 
	gt
;

537 
sˇnf
("%d",&
t
);

541 
©_lock
(
Æloc_lock
);

543 #ifde‡
Æloc_ã°


545 
ã°_‰ì
(
off£t
);

546 
	gã°_Æloc_check
[
off£t
.
fûe
][offset.offset] = 0;

549 
	g‰ì_queue
[
∑π
][
‰ì_˙t
[∑π]%
	gFREE_QUEUE_LEN
] = 
off£t
;

551 ++
	g‰ì_˙t
[
∑π
];

552 
©_u∆ock
(
Æloc_lock
);

560 
öô_fûe
()

563 i‡(
	gUSE_DRAM
)

564 
	gpmem_addr
=(*)
mm≠
(
NULL
,
pmem_size
,
PROT_READ
|
PROT_WRITE
,
MAP_PRIVATE
|
MAP_ANONYMOUS
 ,-1,0);

567 
	gpmem_addr
 = (*)
pmem_m≠_fûe
(
pmem_fûe
,
pmem_size
,
PMEM_FILE_CREATE
,0777,&
pmem_Àn
,&
is_pmem
);

569 
	gfûe_num
 = -1;

570 
	gpmem_addr
 = (**)
mÆloc
((*)*
MAX_FILE_NUM
);

571 
	gmëa_addr
 = (**)
mÆloc
((*)*
MAX_FILE_NUM
);

572 
	gnode_d©a_¨øy
 = (
Node
**)
mÆloc
((*)*
MAX_FILE_NUM
);

573 
	gmëa_¨øy
 = (
Node_mëa
**)
mÆloc
((*)*
MAX_FILE_NUM
);

593 
check_ªcovî
()

596 #i‚de‡
åy_ªcovî


597 
¥ötf
("don'tÅryÑecover\n");

601 
¥ötf
("tryÑecover\n");

605 
	gfûe_«me
[100];

606 
	gbuf„r
[10];

607 
	gÀn
,
	gnum
,
	gi
;

610 
	gfûe_num
++;

611 
°r˝y
(
fûe_«me
,
pmem_fûe
);

612 
°rˇt
(
fûe_«me
,"data");

613 
	gÀn
 = 
°æí
(
fûe_«me
);

614 
	gnum
 = 
fûe_num
+1;

615 
	gi
 = 0;

616 
	gnum
 > 0)

618 
	gbuf„r
[
i
] = 
num
%10+'0';

619 
	gi
++;

620 
	gnum
/=10;

622 
	gi
=
i
-1;i>=0;i--)

623 
	gfûe_«me
[
Àn
++] = 
buf„r
[
i
];

624 
	gfûe_«me
[
Àn
] = 0;

626 i‡(
ac˚ss
(
fûe_«me
,
F_OK
) == -1)

628 
fûe_num
--;

629  
	gfûe_num
;

633 i‡(
	gUSE_DRAM
)

635 
¥ötf
("???");

640 
	gpmem_addr
[
fûe_num
] = (*)
pmem_m≠_fûe
(
fûe_«me
,
FILE_SIZE
,
PMEM_FILE_CREATE
,0777,&
pmem_Àn
,&
is_pmem
);

641 
	gmëa_addr
[
fûe_num
] = (*)
mm≠
(
NULL
,
META_SIZE
,
PROT_READ
|
PROT_WRITE
,
MAP_PRIVATE
|
MAP_ANONYMOUS
|
MAP_POPULATE
,-1,0);

643 
	gnode_d©a_¨øy
[
fûe_num
] = (
Node
*)
pmem_addr
[file_num];

644 
	gmëa_¨øy
[
fûe_num
] = (
Node_mëa
*)
mëa_addr
[file_num];

653 
uöt64_t
 
	g¥e_LSB
[65];

655 
	#DUP_HASH_MAX
 1024

	)

656 
Node_off£t
 
	gdup_hash
[
DUP_HASH_MAX
];

658 
ªcovî_node
(
Node_off£t
 
node_off£t
)

660 
uöt64_t
 
	g¥efix64
=0;

661 
	g¥efix_Àn
=0;

662 
Node
 
	gnode_d©a_ãmp
[
PART_MAX
];

664 
Node
* 
	gnode_d©a
;

665 
Node_mëa
* 
	gnode_mëa
;

666 
Node_mëa
* 
	gmëa0
;

668 
	g√w_Àn
;

670 
	gnode_mëa
 = 
off£t_to_node
(
node_off£t
);

671 
	gnode_d©a
 = 
off£t_to_node_d©a
(
node_off£t
);

673 
	gmëa0
 = 
node_mëa
;

675 
	g√w_Àn
 = 
node_d©a
->
c⁄töue_Àn
;

677 i‡(
	g¥efix_Àn
 > 0)

678 
	g¥efix64
+=
¥e_LSB
[
¥efix_Àn
-1];

680 
	gi
;

681 
	gi
=
¥efix_Àn
;i<
	g√w_Àn
;i++)

684 
ö£π_ønge_íåy
((*)&
¥efix64
,
i
,
SPLIT_OFFSET
);

685 
	g¥efix64
 &~
¥e_LSB
[
i
];

688 
ö£π_ønge_íåy
((*)&
¥efix64
,
√w_Àn
,
node_off£t
);

689 
	g¥efix_Àn
 = 
√w_Àn
;

691 
	g∑π
=0;

692 
	gtc
 = 0;

693 
uöt64_t
 
	gãmp_key
[
PART_MAX
*100];

694 
VÆueE¡ry
 
	gvó
[
PART_MAX
*100];

695 
Node_off£t
 
	gãmp_off£t
[
PART_MAX
];

697 * 
	gbuf„r
;

699 
	gnode_mëa
->
	g∑π
 = 0;

700 
	gnode_mëa
->
	g°©e
 = 0;

701 
	gnode_mëa
->
	ggroup_size
 = 0;

702 
	gnode_mëa
->
	gövÆid©ed_size
 = 0;

703 
	gnode_mëa
->
	g°¨t_off£t
 = 
node_off£t
;

704 
	gnode_mëa
->
	gc⁄töue_Àn
 = 
¥efix_Àn
;

710 
	gãmp_off£t
[
∑π
] = 
node_off£t
;

712 
	gnode_mëa
 = 
off£t_to_node
(
node_off£t
);

713 
	gnode_d©a
 = 
off£t_to_node_d©a
(
node_off£t
);

715 
˝256
((*)&
node_d©a_ãmp
[
∑π
],(*)
node_d©a
,(
Node
));

719 
	gnode_mëa
->
	göv_kv
 = (
uöt16_t
*)
mÆloc
((uint16_t)*4);

720 
	gnode_mëa
->
	göv_max
 = 4;

721 
	gnode_mëa
->
	göv_˙t
 = 0;

724 
	gnode_mëa
->
	gsize
 = 0;

725 
	gnode_mëa
->
	g∑π
 = 
∑π
;

727 
	gnode_mëa
->
	g°¨t_off£t
 = 
ãmp_off£t
[0];

728 
	gnode_mëa
->
	g√xt_off£t_ig
 = 
INIT_OFFSET
;

730 
	gbuf„r
 = 
node_d©a_ãmp
[
∑π
].
buf„r
;

733 
uöt16_t
 
	gvl16
;

734 
	gvl16
 = *((
uöt16_t
*)
buf„r
);

735 i‡(
	gvl16
 == 0)

737 i‡(
	gvl16
 & 
	gINV_BIT
)

738 
	gvl16
-=
INV_BIT
;

741 
	gãmp_key
[
tc
] = *((
uöt64_t
*)(
buf„r
+
PH_LEN_SIZE
));

742 i‡(
	gdup_hash
[
ãmp_key
[
tc
]%
	gDUP_HASH_MAX
] =
ãmp_off£t
[0])

744 
i
=
tc
-1;
	gi
>=0;i--)

746 i‡(
	gãmp_key
[
i
] =
ãmp_key
[
tc
])

749 i‡(
	gi
 >= 0)

751 
övÆid©e_kv
(
vó
[
i
]);

752 
	gvó
[
i
].
	gkv_off£t
 = 0;

755 
	gdup_hash
[
ãmp_key
[
tc
]%
	gDUP_HASH_MAX
] = 
ãmp_off£t
[0];

756 
	gvó
[
tc
].
	gnode_off£t
 = 
ãmp_off£t
[
∑π
];

757 
	gvó
[
tc
].
	gkv_off£t
 = 
buf„r
-(*)&
node_d©a_ãmp
[
∑π
];

758 
	gvó
[
tc
].
	gÀn
 = 
vl16
;

759 
	gtc
++;

761 
	gbuf„r
+=
LK_SIZE
+
vl16
;

764 
	gnode_mëa
->
	gsize
 = 
buf„r
-
node_d©a_ãmp
[
∑π
].buffer;

765 
	gmëa0
->
	ggroup_size
+=
node_mëa
->
size
;

771 
	gnode_mëa
->
	g√xt_off£t_ig
 = 
node_d©a_ãmp
[
∑π
].
√xt_off£t_ig
;

772 
	gnode_off£t
 = 
node_d©a_ãmp
[
∑π
].
√xt_off£t_ig
;

773 i‡(
	gnode_off£t
 =
INIT_OFFSET
)

776 
	g∑π
++;

780 
	gi
=0;i<
	gtc
;i++)

782 i‡(
	gvó
[
i
].
	gkv_off£t
 > 0)

783 
ö£π_poöt_íåy
((*)&
ãmp_key
[
i
],
vó
[i]);

787 
	gi
=0;i<
	g∑π
;i++)

788 
off£t_to_node
(
ãmp_off£t
[
i
])->
	gíd_off£t
 =Åemp_off£t[
∑π
];

790 
Node_off£t_u
 
	gnu
;

791 
	gnu
.
	gno
 = 
node_d©a_ãmp
[0].
√xt_off£t
;

792 
	gmëa0
->
	g√xt_off£t
 = 
nu
.
no_32
;

797 
ªcovî
()

801 
	gi
,
	gj
;

802 
	g¥e_LSB
[63] = 1;

803 
	gi
=62;i>=0;i--)

804 
	g¥e_LSB
[
i
] = 
¥e_LSB
[i+1] << 1;

806 
	gi
=0;i<=
fûe_num
;i++)

808 
	gj
=0;j<
	gMAX_OFFSET
;j++)

809 
	gmëa_¨øy
[
i
][
j
].
	g∑π
 = 
PART_MAX
+1;

812 
Node_off£t_u
 
	gnode_off£t
;

813 
Node_off£t_u
 
	g¥ev_off£t
;

814 
Node
* 
	gnode_d©a
;

815 
Node_mëa
* 
	gnode_mëa
;

817 
	gnode_off£t
.
	gno
 = 
HEAD_OFFSET
;

818 
	gnode_mëa
 = 
off£t_to_node
(
node_off£t
.
no
);

819 
	gnode_d©a
 = 
off£t_to_node_d©a
(
node_off£t
.
no
);

822 
	gnode_mëa
->
	g°©e
 = 0;

823 
	gnode_mëa
->
	g∑π
 = 0;

824 
	gnode_mëa
->
	gsˇn_li°
 = 
NULL
;

825 
	gnode_mëa
->
	g¥ev_off£t
 = 0;

827 
	gnode_mëa
->
	g√xt_off£t_ig
 = 
INIT_OFFSET
;

829 
	g¥ev_off£t
 = 
node_off£t
;

830 
	gnode_off£t
.
	gno
 = 
node_d©a
->
√xt_off£t
;

831 
	gnode_mëa
->
	g√xt_off£t
 = 
node_off£t
.
no_32
;

839 
	gnode_mëa
 = 
off£t_to_node
(
node_off£t
.
no
);

840 
	gnode_mëa
->
	g¥ev_off£t
 = 
¥ev_off£t
.
no_32
;

842 i‡(
	gnode_off£t
.
	gno
 =
TAIL_OFFSET
)

847 
ªcovî_node
(
node_off£t
.
no
);

849 
	g¥ev_off£t
 = 
node_off£t
;

850 
	gnode_off£t
.
	gno_32
 = 
node_mëa
->
√xt_off£t
;

856 
	gnode_mëa
 = 
off£t_to_node
(
node_off£t
.
no
);

857 
	gnode_mëa
->
	g°©e
 = 0;

858 
	gnode_mëa
->
	g∑π
 = 0;

859 
	gnode_mëa
->
	gsˇn_li°
 = 
NULL
;

860 
	gnode_mëa
->
	g√xt_off£t
 = 0;

861 
	gnode_mëa
->
	g√xt_off£t_ig
 = 
INIT_OFFSET
;

864 
Node_off£t
 
	gno
;

865 
	g∑π
;

866 
	gi
=0;i<=
fûe_num
;i++)

868 
	gj
=0;j<
	gMAX_OFFSET
;j++)

870 i‡(
	gmëa_¨øy
[
i
][
j
].
	g∑π
 =
PART_MAX
+1)

872 
no
.
fûe
 = 
i
;

873 
	gno
.
	goff£t
 = 
j
;

875 
	g∑π
 = 
no
.
off£t
 % 
PM_N
;

877 i‡(
	g‰ì_ödex
[
∑π
] + 
	gFREE_QUEUE_LEN
 < 
	g‰ì_˙t
[part])

879 
¥ötf
("full!!\n");

880 
sˇnf
("%d",&
∑π
);

884 
	g‰ì_queue
[
∑π
][
‰ì_˙t
[∑π]%
	gFREE_QUEUE_LEN
] = 
no
;

885 ++
	g‰ì_˙t
[
∑π
];

894 
öô_d©a
()

896 i‡(
check_ªcovî
() >= 0)

899 
time•ec
 
°
,
ë
;

900 
uöt64_t
 
	gâ
;

902 
¥ötf
("startÑecover\n");

903 
˛ock_gëtime
(
CLOCK_MONOTONIC
,&
°
);

904 
ªcovî
();

905 
˛ock_gëtime
(
CLOCK_MONOTONIC
,&
ë
);

907 
	gâ
 = (
ë
.
tv_£c
-
°
.tv_£c)*1000000000+ë.
tv_n£c
-st.tv_nsec;

909 
¥ötf
("ídÑecovî %ld†%ldns\n",
â
/1000000000,tt%1000000000);

916 
¥ötf
("noÑecovery.Çew DB\n");

917 
	gfûe_num
 = -1;

919 
√w_fûe
();

921 
	gi
;

922 
	gi
=0;i<
	gPM_N
;i++)

923 
	g‰ì_˙t
[
i
] = 
‰ì_mö
[i] = 
‰ì_ödex
[i] = 0;

925 
uöt64_t
 
	gzîo
=0;

927 
Node_off£t_u
 
	ghód_off£t
;

928 
Node_off£t_u
 
	gèû_off£t
;

930 
Node_mëa
* 
	ghód_node
;

931 
Node_mëa
* 
	gèû_node
;

937 #i‡
PM_N
 > 1

938 
Æloc_node0
(0);

939 
Æloc_node0
(1);

940 
	ghód_off£t
.
	gno
 = 
Æloc_node0
(2);

941 
	gèû_off£t
.
	gno
 = 
Æloc_node0
(3);

943 
Æloc_node0
(0);

944 
Æloc_node0
(0);

945 
	ghód_off£t
.
	gno
 = 
Æloc_node0
(0);

946 
	gèû_off£t
.
	gno
 = 
Æloc_node0
(0);

950 
	ghód_node
 = 
off£t_to_node
(
hód_off£t
.
no
);

951 
	gèû_node
 = 
off£t_to_node
(
èû_off£t
.
no
);

954 
Node_off£t_u
 
	gnode_off£t
;

955 
	gnode_off£t
.
	gno
 = 
Æloc_node0
(0);

956 
Node_mëa
* 
	gnode
 = 
off£t_to_node
(
node_off£t
.
no
);

957 
	gnode
->
	g°©e
 = 0;

958 
	gnode
->
	gsize
 = 0;

959 
	gnode
->
	gövÆid©ed_size
 = 0;

960 
	gnode
->
	göv_˙t
 = 0;

961 #ifde‡
DOUBLE_LOG


962 
	gnode
->
	gÊush_size
 = 0;

963 
	gnode
->
	gÊush_˙t
 = 0;

965 
	gnode
->
	gc⁄töue_Àn
 = 0;

966 
	gnode
->
	gsˇn_li°
 = 
NULL
;

967 
	gnode
->
	g¥ev_off£t
 = 
hód_off£t
.
no_32
;

968 
	gnode
->
	g√xt_off£t
 = 
èû_off£t
.
no_32
;

969 
	gnode
->
	gíd_off£t
 = 
node_off£t
.
no
;

970 
	gnode
->
	g°¨t_off£t
 = 
node_off£t
.
no
;

971 
	gnode
->
	g∑π
 = 0;

972 
	gnode
->
	ggroup_size
 = 0;

973 
	gnode
->
	g√xt_off£t_ig
 = 
INIT_OFFSET
;

975 i‡(
	g¥öt
)

976 
¥ötf
("nodê0 %p\n",
node
);

979 
	ghód_node
->
	g√xt_off£t
 = 
node_off£t
.
no_32
;

980 
	ghód_node
->
	g¥ev_off£t
 = 0;

981 
	gèû_node
->
	g¥ev_off£t
 = 
node_off£t
.
no_32
;

982 
	gèû_node
->
	g√xt_off£t
 = 0;

983 
	ghód_node
->
	g°©e
 = 0;

984 
	ghód_node
->
	gsˇn_li°
 = 
NULL
;

985 
	ghód_node
->
	g∑π
 = 0;

986 
	gèû_node
->
	g°©e
 = 0;

987 
	gèû_node
->
	gsˇn_li°
 = 
NULL
;

988 
	gèû_node
->
	g∑π
 = 0;

989 
	ghód_node
->
	g√xt_off£t_ig
 = 
INIT_OFFSET
;

990 
	gèû_node
->
	g√xt_off£t_ig
 = 
INIT_OFFSET
;

993 
Êush_mëa
(
hód_off£t
.
no
);

994 
Êush_mëa
(
èû_off£t
.
no
);

996 
_mm_s„n˚
();

1001 
ö£π_ønge_íåy
((*)(&
zîo
),0,
node_off£t
.
no
);

1007 i‡(
	gUSE_DRAM
)

1008 
¥ötf
("USE_DRAM\n");

1010 
¥ötf
("USE_PM\n");

1011 
¥ötf
("sizêo‡nodê%ld\n",(
Node
));

1012 
¥ötf
("sizêo‡node_më®%ld\n",(
Node_mëa
));

1014 
	gâ1
 = 0;

1015 
	gâ2
 = 0;

1016 
	gâ3
 = 0;

1017 
	gâ4
 = 
â5
 = 0;

1019 
	gqâ1
 = 
qâ2
 = 
qâ3
 = 
qâ4
 = 
qâ5
 = 
qâ6
 = 
qâ7
 = 
qâ8
 = 0;

1022 
öô_d©a_loˇl
()

1024 
	gi
;

1025 
	gi
=0;i<
	gPM_N
;i++)

1027 
	glbac
[
i
] = 
LOCAL_QUEUE_LEN
;

1028 
	glbfc
[
i
] = 0;

1031 
posix_memÆign
((**)&
d0
,(
Node
),(Node)*
PART_MAX
);

1032 
posix_memÆign
((**)&
d1
,(
Node
),(Node)*
PART_MAX
);

1033 
posix_memÆign
((**)&
d2
,(
Node
),(Node)*
PART_MAX
);

1036 
˛ón_node
(
Node_off£t
 
off£t
)

1038 
Node_mëa
* 
	gnode
 = 
off£t_to_node
(
off£t
);

1039 
‰ì
(
node
->
öv_kv
);

1040 #ifde‡
DOUBLE_LOG


1041 
‰ì
(
node
->
Êush_kv
);

1044 
˛ón_öv
()

1073 
˛ón_d©a
()

1075 
¥ötf
("clean data\n");

1082 
˛ón_öv
();

1085 
	gi
;

1086 i‡(
	gUSE_DRAM
)

1088 
	gi
=0;i<
	gfûe_num
;i++)

1089 
munm≠
(
pmem_addr
[
i
],
FILE_SIZE
);

1093 
	gi
=0;i<
	gfûe_num
;i++)

1094 
pmem_unm≠
(
pmem_addr
[
i
],
FILE_SIZE
);

1096 
	gi
=9;i<
	gfûe_num
;i++)

1097 
munm≠
(
mëa_addr
[
i
],
META_SIZE
);

1099 
‰ì
(
pmem_addr
);

1100 
‰ì
(
mëa_addr
);

1101 
‰ì
(
node_d©a_¨øy
);

1102 
‰ì
(
mëa_¨øy
);

1107 #ifde‡
dâ


1108 
¥ötf
("data\n");

1109 
¥ötf
("ö£π %ld %ld\n",
â1
/1000000000,tt1%1000000000);

1110 
¥ötf
("•lô %ld %ld\n",
â2
/1000000000,tt2%1000000000);

1111 
¥ötf
("com∑˘ %ld %ld\n",
â3
/1000000000,tt3%1000000000);

1112 
¥ötf
("check_sizê%ld %ld\n",
â4
/1000000000,tt4%1000000000);

1113 
¥ötf
("Ælo¯nodê%ld %ld\n",
â5
/1000000000,tt5%1000000000);

1117 
¥ötf
("më®%lfGB\n",(
fûe_num
*
MAX_OFFSET
*(
Node_mëa
))/1024/1024/1024);

1118 
¥ötf
("tŸÆ %lfGB fûê˙à%d fûêsizê%ld\n",(
fûe_num
*
FILE_SIZE
)/1024/1024/1024,file_num,FILE_SIZE);

1122 #ifde‡
qâ


1124 
¥ötf
("query\n");

1125 
¥ötf
("ö£π quîy %ld %ld\n",
qâ1
/1000000000,qtt1%1000000000);

1126 
¥ötf
("ö£π index %ld %ld\n",
qâ2
/1000000000,qtt2%1000000000);

1127 
¥ötf
("ö£π d©®%ld %ld\n",
qâ3
/1000000000,qtt3%1000000000);

1128 
¥ötf
("ö£π kv %ld %ld\n",
qâ4
/1000000000,qtt4%1000000000);

1129 
¥ötf
("•lô kv %ld %ld\n",
qâ5
/1000000000,qtt5%1000000000);

1130 
¥ötf
("\n");

1131 
¥ötf
("looku∞quîy %ld %ld\n",
qâ8
/1000000000,qtt8%1000000000);

1132 
¥ötf
("looku∞ödex %ld %ld\n",
qâ6
/1000000000,qtt6%1000000000);

1133 
¥ötf
("looku∞d©®%ld %ld\n",
qâ7
/1000000000,qtt7%1000000000);

1140 
ölöe
 
öc_ªf
(
Node_off£t
 
off£t
)

1142  
åy_©_lock
(
off£t_to_node
(
off£t
)->
°©e
);

1144 
ölöe
 
dec_ªf
(
Node_off£t
 
off£t
)

1147 
©_u∆ock
(
off£t_to_node
(
off£t
)->
°©e
);

1152 
¥öt_kv
(* 
kv_p
)

1154 
	gi
,
	gvÆue_Àn
;

1155 * 
	gv_p
;

1156 
¥ötf
("key ");

1157 
	gi
=0;i<8;i++)

1158 
¥ötf
("[%d]",()(
kv_p
[
i
]));

1159 
	gvÆue_Àn
 = *((
uöt16_t
*)(
kv_p
+
key_size
));

1160 i‡(
	gvÆue_Àn
 & (1 << 15))

1162 
¥ötf
(" invalidated\n");

1165 
¥ötf
(" vÆuêÀ¿%d ",
vÆue_Àn
);

1166 
	gv_p
 = 
kv_p
 + 
key_size
 + 
Àn_size
;

1167 
	gi
=0;i<
	gvÆue_Àn
;i++)

1168 
¥ötf
("[%d]",()(
v_p
[
i
]));

1169 
¥ötf
("\n");

1173 
¥öt_node
(
Node
* 
node
)

1175 
	gcur
=0,
	gvÆue_Àn
;

1176 
¥ötf
("nodêsizê%d\n",
node
->
size
);

1177 
	gcur
 < 
	gnode
->
	gsize
)

1179 
¥öt_kv
(&
node
->
buf„r
[
cur
]);

1180 
	gvÆue_Àn
 = *((
uöt16_t
*)(
node
->
buf„r
+
cur
+
key_size
));

1181 i‡((
	gvÆue_Àn
 & (1 <<15)) != 0)

1182 
vÆue_Àn
-= (1<<15);

1183 
	gcur
+=
vÆue_Àn
+
key_size
+
Àn_size
;

1196 
dñëe_kv
(* 
kv_p
)

1198 i‡(
	gUSE_DRAM
)

1199 *((
	guöt16_t
*)(
	gkv_p
 ))|
INV_BIT
;

1202 
uöt16_t
 
	gvl16
;

1203 
	gvl16
 = *((
uöt16_t
*)(
kv_p
 )Ë| 
INV_BIT
;

1204 
pmem_mem˝y
(
kv_p
 ,&
vl16
,(
uöt16_t
),
PMEM_F_MEM_NONTEMPORAL
);

1205 
_mm_s„n˚
();

1211 
Node_off£t
 
≠≥nd_node
(Node_off£t& 
°¨t_off£t
)

1214 
Node_mëa
* 
	g°¨t_mëa
 = 
off£t_to_node
(
°¨t_off£t
);

1215 
Node_mëa
* 
	gmëa
 = 
off£t_to_node
(
°¨t_mëa
->
íd_off£t
);

1216 
Node_off£t
 
	gíd_off£t
;

1217 
Node_mëa
* 
	gíd_mëa
;

1218 
Node
* 
	gíd_d©a
;

1224 
	gíd_off£t
 = 
Æloc_node
();

1225 
	gíd_mëa
 = 
off£t_to_node
(
íd_off£t
);

1226 
	gíd_d©a
 = 
off£t_to_node_d©a
(
íd_off£t
);

1230 
	gíd_mëa
->
	g√xt_off£t_ig
 = 
INIT_OFFSET
;

1232 
	gíd_mëa
->
	g∑π
 = 
mëa
->
∑π
+1;

1233 
	gíd_mëa
->
	gsize
 = 0;

1234 
	gíd_mëa
->
	göv_˙t
 = 0;

1235 #ifde‡
DOUBLE_LOG


1236 
	gíd_mëa
->
	gÊush_size
 = 0;

1237 
	gíd_mëa
->
	gÊush_˙t
 = 0;

1239 
	gíd_mëa
->
	g°¨t_off£t
 = 
°¨t_off£t
;

1242 
	gíd_mëa
->
	gíd_off£t
 = 
íd_off£t
;

1250 
	gíd_d©a
->
	g√xt_off£t
 = 
íd_d©a
->
√xt_off£t_ig
 = 
INIT_OFFSET
;

1252 
	gíd_d©a
->
	gbuf„r
[0] = 
íd_d©a
->
buf„r
[1] = 0;

1253 
pmem_≥rsi°
((*)
íd_d©a
,(
uöt16_t
)+(uöt16_t)+(
uöt32_t
)+
Àn_size
);

1254 
_mm_s„n˚
();

1256 
	gmëa
->
	g√xt_off£t_ig
 = 
íd_off£t
;

1257 
pmem_mem˝y
((*)
off£t_to_node_d©a
(
°¨t_mëa
->
íd_off£t
Ë+ (),(
uöt32_t
*)&íd_off£t,(),
PMEM_F_MEM_NONTEMPORAL
);

1258 
	g°¨t_mëa
->
	gíd_off£t
 = 
íd_off£t
;

1259 
_mm_s„n˚
();

1261  
	gíd_off£t
;

1265 * 
ö£π_kv
(
Node_off£t
& 
off£t
,* 
key
,* 
vÆue
,
vÆue_Àn
 )

1267 #ifde‡
dâ


1268 
time•ec
 
	gts1
,
	gts2
;

1269 
˛ock_gëtime
(
CLOCK_MONOTONIC
,&
ts1
);

1270 
_mm_m„n˚
();

1278 
Node_mëa
* 
	gmëa
 = 
off£t_to_node
(
off£t
);

1279 
Node_off£t
 
	gíd_off£t
 = 
mëa
->
íd_off£t
;

1280 
Node_mëa
* 
	gíd_mëa
 = 
off£t_to_node
(
íd_off£t
);

1282 
Node_off£t
 
	gmid_off£t
;

1283 
Node_mëa
* 
	gmid_mëa
 = 
NULL
;

1285 
	gíåy_size
 = 
LK_SIZE
 + 
vÆue_Àn
;

1287 i‡(
	gíåy_size
 % 2)

1288 ++
	gíåy_size
;

1290 i‡(
	gíd_mëa
->
	gsize
 + 
	gíåy_size
 +
	gPH_LEN_SIZE
 > 
	gNODE_BUFFER
)

1292 i‡(
	gíd_mëa
->
	g∑π
 =
PART_MAX
-1)

1293  
NULL
;

1295 i‡(
•lô_‹_com∑˘
(
off£t
) == 0)

1296  
NULL
;

1299 
	gmid_off£t
 = 
íd_off£t
;

1300 
	gmid_mëa
 = 
íd_mëa
;

1301 #ifde‡
SMALL_NODE


1302 
	g∑π
 = 
íd_off£t
.
off£t
%(
PAGE_SIZE
/(
Node
))/(PAGE_SIZE/
PM_N
/(Node));

1304 
	g∑π
 = 
íd_off£t
.
off£t
 % 
PM_N
;

1307 
	gíd_off£t
 = 
mëa
->
íd_off£t
 = 
Æloc_node
((
∑π
+1)%
PM_N
);

1308 
	gíd_mëa
 = 
off£t_to_node
(
íd_off£t
);

1311 
	gíd_mëa
->
	g∑π
 = 
mid_mëa
->
∑π
+1;

1312 
	gíd_mëa
->
	gsize
 = 0;

1313 
	gíd_mëa
->
	göv_˙t
 = 0;

1314 #ifde‡
DOUBLE_LOG


1315 
	gíd_mëa
->
	gÊush_size
 = 0;

1316 
	gíd_mëa
->
	gÊush_˙t
 = 0;

1318 
	gíd_mëa
->
	g°¨t_off£t
 = 
off£t
;

1319 
	gíd_mëa
->
	g√xt_off£t_ig
 = 
INIT_OFFSET
;

1323 
	gmëa
->
	gíd_off£t
 = 
íd_off£t
;

1330 c⁄° 
uöt16_t
 
	gvl16
 = 
vÆue_Àn
;

1335 * 
	gbuf„r
 = 
off£t_to_node_d©a
(
íd_off£t
)->
buf„r
;

1336 
	gﬁd_size
 = 
íd_mëa
->
size
;

1338 
	gíd_mëa
->
	gsize
+=
íåy_size
;

1339 
	gmëa
->
	ggroup_size
+=
íåy_size
;

1341 c⁄° 
uöt16_t
 
	gz
 = 0;

1342 i‡(!
	gUSE_DRAM
)

1344 i‡(
	gmid_mëa
)

1346 
Node
* 
	gnode_d©a
 = 
off£t_to_node_d©a
(
íd_off£t
);

1351 
	gnode_d©a
->
	g√xt_off£t
 = 
node_d©a
->
√xt_off£t_ig
 = 
INIT_OFFSET
;

1354 
mem˝y
(
buf„r
+
ﬁd_size
,&
vl16
,
PH_LEN_SIZE
 );

1355 
mem˝y
(
buf„r
+
ﬁd_size
+
PH_LEN_SIZE
 ,
key
,
PH_KEY_SIZE
 );

1356 
mem˝y
(
buf„r
+
ﬁd_size
+
LK_SIZE
 ,
vÆue
,
vÆue_Àn
);

1357 
mem˝y
(
buf„r
+
ﬁd_size
+
íåy_size
,&
z
,
PH_LEN_SIZE
);

1358 
pmem_≥rsi°
(
node_d©a
,(
uöt32_t
)*3+
íåy_size
+
PH_LEN_SIZE
);

1359 
_mm_s„n˚
();

1372 
mem˝y
(
buf„r
+
ﬁd_size
+
PH_LEN_SIZE
 ,
key
,
PH_KEY_SIZE
);

1374 
mem˝y
(
buf„r
+
ﬁd_size
+
LK_SIZE
 ,
vÆue
,
vÆue_Àn
);

1375 
mem˝y
(
buf„r
+
ﬁd_size
+
íåy_size
,&
z
,
PH_LEN_SIZE
);

1377 
pmem_≥rsi°
(
buf„r
+
ﬁd_size
+
PH_LEN_SIZE
 ,
íåy_size
);

1383 
_mm_s„n˚
();

1385 
pmem_mem˝y
(
buf„r
+
ﬁd_size
,&
vl16
,
PH_LEN_SIZE
 ,
PMEM_F_MEM_NONTEMPORAL
);

1389 
_mm_s„n˚
();

1395 
mem˝y
(
buf„r
+
ﬁd_size
+
PH_LEN_SIZE
 ,
key
,
PH_KEY_SIZE
);

1396 
mem˝y
(
buf„r
+
ﬁd_size
+
LK_SIZE
 ,
vÆue
,
vÆue_Àn
);

1397 
mem˝y
(
buf„r
+
ﬁd_size
,&
vl16
,
PH_LEN_SIZE
);

1409 #ifde‡
dâ


1410 
_mm_m„n˚
();

1411 
˛ock_gëtime
(
CLOCK_MONOTONIC
,&
ts2
);

1412 
	gâ1
+(
ts2
.
tv_£c
-
ts1
.tv_£c)*1000000000+ts2.
tv_n£c
-ts1.tv_nsec;

1416 i‡(
	gmid_mëa
)

1423 
	gmid_mëa
->
	g√xt_off£t_ig
 = 
íd_off£t
;

1424 
pmem_mem˝y
((*)
off£t_to_node_d©a
(
mid_off£t
Ë+ (),(
uöt32_t
*)&
íd_off£t
,(),
PMEM_F_MEM_NONTEMPORAL
);

1425 
_mm_s„n˚
();

1427  
	gbuf„r
+
	gﬁd_size
;

1432 
move_sˇn_li°
(
Node_off£t
 &
ﬁd_off£t
,Node_off£à&
√w_off£t
)

1434 
Node_mëa
* 
	gnode_ﬁd
 = 
off£t_to_node
(
ﬁd_off£t
);

1435 
Node_mëa
* 
	gnode_√w
 = 
off£t_to_node
(
√w_off£t
);

1436 i‡(
	gnode_ﬁd
->
	gsˇn_li°
 =
NULL
)

1438 
node_√w
->
sˇn_li°
 = 
NULL
;

1441 
Sˇn_li°
* 
	g¶
;

1442 
Sˇn_li°
** 
	g¶p
;

1444 
Quîy
* 
	gquîy
;

1447 
	g¶
 = 
node_ﬁd
->
sˇn_li°
;

1448 
	g¶p
 = &(
node_ﬁd
->
sˇn_li°
);

1449 
Node_off£t_u
 
	goou
,
	gnou
;

1450 
	goou
.
	gno
 = 
ﬁd_off£t
;

1451 
	gnou
.
	gno
 = 
√w_off£t
;

1452 
	g¶
)

1454 
	gquîy
 = (
Quîy
*)(
¶
->
quîy
);

1457 i‡(
	gquîy
->
	gsˇn_off£t
 =
oou
.
no_32
)

1459 
quîy
->
sˇn_off£t
 = 
nou
.
no_32
;

1462 
	g¶p
 = &(
¶
->
√xt
);

1463 
	g¶
 = 
¶
->
√xt
;

1469 
¥ötf
("abandoned scanÉntry??\n");

1470 *
	g¶p
 = 
¶
->
√xt
;

1471 
‰ì
(
¶
);

1472 
	g¶
 = *
¶p
;

1475 
	gnode_√w
->
	gsˇn_li°
 = 
node_ﬁd
->
sˇn_li°
;

1497 
s‹t_öv
(
˙t
,
uöt16_t
* 
¨øy
)

1499 
	gi
,
	gj
;

1500 
uöt16_t
 
	gãmp
;

1501 
	gi
=0;i<
	g˙t
;i++)

1503 
	gãmp
 = 0;

1504 
	gj
=0;j<
	g˙t
-
	gi
-1;j++)

1506 i‡(
	g¨øy
[
j
] >árray[j+1])

1508 
	gãmp
 = 
¨øy
[
j
+1];

1509 
	g¨øy
[
j
+1] = 
¨øy
[j];

1510 
	g¨øy
[
j
] = 
ãmp
;

1513 i‡(
	gãmp
 == 0)

1520 
lock_check
(
Node_off£t
 
off£t
)

1522 
Node_mëa
* 
	g¥ev_node
;

1523 
Node_mëa
* 
	g√xt_node
;

1524 
Node_mëa
* 
	gnode
;

1526 
	gnode
 = 
off£t_to_node
(
off£t
);

1528 
Node_off£t_u
 
	g¥ev_off£t
,
	g√xt_off£t
;

1529 
	g¥ev_off£t
.
	gno_32
 = 
node
->
¥ev_off£t
;

1530 
	g¥ev_node
 = 
off£t_to_node
(
¥ev_off£t
.
no
);

1534 i‡(
	g¥ev_node
->
	g°©e
 == 1)

1541 
	g√xt_off£t
.
	gno_32
 = 
node
->
√xt_off£t
;

1542 
	g√xt_node
 = 
off£t_to_node
(
√xt_off£t
.
no
);

1543 i‡(
	g√xt_node
->
	g°©e
 == 1)

1561 
•lô2
(
Node_off£t
 
off£t
)

1575 
Node_off£t
 
	gnode_off£t
;

1576 
Node_mëa
* 
	gnode_mëa
;

1577 
Node
* 
	gnode_d©a
;

1580 c⁄° 
	gmëa_size
 = 
d0
[0].
buf„r
-(*)&d0[0];

1581 
	g∑π0
,
	g∑π1
,
	g∑π2
;

1583 
	g∑π0
 = 0;

1586 
	gnode_off£t
 = 
off£t
;

1589 
	gnode_mëa
 = 
off£t_to_node
(
node_off£t
);

1590 
	gnode_d©a
 = 
off£t_to_node_d©a
(
node_off£t
);

1592 
˝256
((*)&
d0
[
∑π0
],(*)
node_d©a
,
node_mëa
->
size
 + 
mëa_size
);

1593 
	g∑π0
++;

1595 
	gnode_off£t
 = 
node_mëa
->
√xt_off£t_ig
;

1596 i‡(
	gnode_off£t
 =
INIT_OFFSET
)

1608 
	gi
;

1609 
uöt16_t
 
	gsize
;

1611 
	gtc
;

1612 
uöt64_t
 
	gãmp_key
[100*
PART_MAX
];

1613 
VÆueE¡ry
 
	gvó
[100*
PART_MAX
];

1614 
Node_off£t
 
	gãmp_off£t
[
PART_MAX
];

1615 
	goc
;

1617 
	gc⁄töue_Àn
 = 
off£t_to_node
(
off£t
)->
c⁄töue_Àn
;

1618 
uöt64_t
 
	g¥efix_64
;

1619 
uöt64_t
 
	gm
;

1620 
	g¥efix_64
 = *((
uöt64_t
*)(
d0
[0].
buf„r
+
PH_LEN_SIZE
));

1622 
	gm
 = ~(((
uöt64_t
)1 << (63-
c⁄töue_Àn
))-1);

1623 
	g¥efix_64
 = (
¥efix_64
 & 
m
Ë| ((
uöt64_t
)1 << (63-
c⁄töue_Àn
));

1625 
	g∑π1
 = 0;

1626 
	g∑π2
 = 0;

1629 
Node_mëa
* 
	g√w_node1
;

1630 
Node_mëa
* 
	g√w_node2
;

1631 
Node_mëa
* 
	g¥ev_node
;

1632 
Node_mëa
* 
	g√xt_node
;

1638 
Node_off£t_u
 
	g¥ev_off£t
,
	g√xt_off£t
;

1640 
	gnode_mëa
 = 
off£t_to_node
(
off£t
);

1641 
	gnode_d©a
 = 
off£t_to_node_d©a
(
off£t
);

1643 
	g¥ev_off£t
.
	gno_32
 = 
node_mëa
->
¥ev_off£t
;

1644 
	g√xt_off£t
.
	gno_32
 = 
node_mëa
->
√xt_off£t
;

1645 
	g√xt_node
 = 
off£t_to_node
(
√xt_off£t
.
no
);

1646 
	g¥ev_node
 = 
off£t_to_node
(
¥ev_off£t
.
no
);

1648 
Node_off£t_u
 
	g√w_node1_off£t
;

1649 
Node_off£t_u
 
	g√w_node2_off£t
;

1651 
	grŸ©i⁄1
,
	grŸ©i⁄2
;

1652 
	g√w_node1_off£t
.
	gno
 = 
Æloc_node
(
∑π_rŸ©i⁄
);

1653 
	g∑π_rŸ©i⁄
 = (
∑π_rŸ©i⁄
+1)%
PM_N
;

1654 
	grŸ©i⁄1
 = 
∑π_rŸ©i⁄
;

1656 
	g√w_node2_off£t
.
	gno
 = 
Æloc_node
(
∑π_rŸ©i⁄
);

1657 
	g∑π_rŸ©i⁄
 = (
∑π_rŸ©i⁄
+1)%
PM_N
;

1658 
	grŸ©i⁄2
 = 
∑π_rŸ©i⁄
;

1660 
	g√w_node1
 = 
off£t_to_node
(
√w_node1_off£t
.
no
);

1661 
	g√w_node2
 = 
off£t_to_node
(
√w_node2_off£t
.
no
);

1663 
	g√w_node1
->
	g∑π
 = 0;

1664 
	g√w_node2
->
	g∑π
 = 0;

1666 
	g√w_node1
->
	g°©e
 = 1;

1667 
	g√w_node2
->
	g°©e
 = 1;

1671 
	g√w_node1
->
	göv_˙t
 = 
√w_node2
->
öv_˙t
 = 0;

1672 
	g√w_node1
->
	ggroup_size
 = 
√w_node2
->
group_size
 = 0;

1673 
	g√w_node1
->
	gövÆid©ed_size
 = 
√w_node2
->
övÆid©ed_size
 = 0;

1675 
	g√w_node1
->
	g°¨t_off£t
 = 
√w_node1_off£t
.
no
;

1676 
	g√w_node2
->
	g°¨t_off£t
 = 
√w_node2_off£t
.
no
;

1678 
	g√w_node1
->
	gc⁄töue_Àn
 = 
√w_node2
->
c⁄töue_Àn
 = continue_len+1;

1681 
	g√w_node2
->
	g√xt_off£t
 = 
√xt_off£t
.
no_32
;

1682 
	g√w_node2
->
	g¥ev_off£t
 = 
√w_node1_off£t
.
no_32
;

1684 
	g√w_node1
->
	g√xt_off£t
 = 
√w_node2_off£t
.
no_32
;

1685 
	g√w_node1
->
	g¥ev_off£t
 = 
¥ev_off£t
.
no_32
;

1692 
	gd1
[0].
	g√xt_off£t
 = 
√w_node2_off£t
.
no
;

1693 
	gd2
[0].
	g√xt_off£t
 = 
√xt_off£t
.
no
;

1694 
	gd1
[0].
	gc⁄töue_Àn
 = 
d2
[0].
c⁄töue_Àn
 = continue_len+1;

1704 
uöt16_t
 
	gvl16
;

1706 
uöt16_t
 
	gkvs
;

1708 * 
	gbuf„r
;

1709 * 
	gbuf„r1
;

1710 * 
	gbuf„r2
;

1713 
	gbuf„r1
 = 
d1
[0].
buf„r
;

1714 
	gbuf„r2
 = 
d2
[0].
buf„r
;

1716 
	gtc
 = 0;

1718 
	gj
;

1727 
Node_mëa
* 
	gcuºít_node0_mëa
;

1728 
Node_mëa
* 
	gcuºít_node1_mëa
 = 
√w_node1
;

1729 
Node_mëa
* 
	gcuºít_node2_mëa
 = 
√w_node2
;

1730 
Node_off£t
 
	gcuºít_node0_off£t
 = 
off£t
;

1731 
Node_off£t
 
	gcuºít_node1_off£t
 = 
√w_node1_off£t
.
no
;

1732 
Node_off£t
 
	gcuºít_node2_off£t
 = 
√w_node2_off£t
.
no
;

1733 * 
	gbuf„r_íd
;

1734 * 
	gbuf„r1_íd
 = 
buf„r1
+
NODE_BUFFER
;

1735 * 
	gbuf„r2_íd
 = 
buf„r2
+
NODE_BUFFER
;

1737 * 
	gkvp
;

1738 
	goc
 = 0;

1739 
	gi
=0;

1742 
	gcuºít_node0_mëa
 = 
off£t_to_node
(
cuºít_node0_off£t
);

1754 
	gbuf„r
 = 
d0
[
i
].
buf„r
;

1759 
	gbuf„r_íd
 = 
buf„r
 + 
cuºít_node0_mëa
->
size
;

1760 
s‹t_öv
(
cuºít_node0_mëa
->
öv_˙t
,cuºít_node0_mëa->
öv_kv
);

1761 
	gj
 = 0;

1762 
	gcuºít_node0_mëa
->
	göv_kv
[
cuºít_node0_mëa
->
öv_˙t
] = 0;

1765 
	gãmp_off£t
[
oc
++] = 
cuºít_node0_off£t
;

1768 
	gbuf„r
 < 
	gbuf„r_íd
)

1773 
	gvl16
 = *((
uöt16_t
*)(
buf„r
 ));

1775 
	gkvs
 = 
LK_SIZE
 + 
vl16
;

1777 i‡(
	gkvs
 % 2)

1778 
	gkvs
++;

1781 i‡(((*)&
	gd0
[
i
] + 
	gcuºít_node0_mëa
->
	göv_kv
[
j
] =
buf„r
) )

1786 
j
++;

1787 
	gkvs
 &~(
INV_BIT
);

1791 
	gãmp_key
[
tc
] = *((
uöt64_t
*)(
buf„r
+
PH_LEN_SIZE
));

1795 i‡(
	gãmp_key
[
tc
] < 
	g¥efix_64
)

1799 i‡(
	gbuf„r1
+
	gkvs
+
	gPH_LEN_SIZE
 > 
	gbuf„r1_íd
)

1802 
	gbuf„r1
[0] = 
buf„r1
[1] = 0;

1804 
	gcuºít_node1_mëa
->
	gsize
 = 
buf„r1
-
d1
[
∑π1
].
buf„r
;

1809 
	g√w_node1
->
	ggroup_size
+=
cuºít_node1_mëa
->
size
;

1812 
Node_off£t
 
	gãmp_off£t
;

1814 
	gãmp_off£t
 = 
Æloc_node
(
rŸ©i⁄1
);

1815 
	grŸ©i⁄1
 = (
rŸ©i⁄1
+1)%
PM_N
;

1816 
Node_mëa
* 
	gãmp_mëa
 = 
off£t_to_node
(
ãmp_off£t
);

1818 
	gd1
[
∑π1
].
	g√xt_off£t_ig
 = 
ãmp_off£t
;

1825 
	gcuºít_node1_mëa
->
	g√xt_off£t_ig
 = 
ãmp_off£t
;

1830 
	gãmp_mëa
->
	g∑π
 = 
cuºít_node1_mëa
->
∑π
+1;

1833 
	gãmp_mëa
->
	g°¨t_off£t
 = 
√w_node1_off£t
.
no
;

1834 
	gãmp_mëa
->
	göv_˙t
=0;

1836 
	gcuºít_node1_off£t
 = 
ãmp_off£t
;

1837 
	gcuºít_node1_mëa
 = 
ãmp_mëa
;

1840 
	g∑π1
++;

1841 
	gbuf„r1
 = 
d1
[
∑π1
].
buf„r
;

1845 
	gbuf„r1_íd
 = 
buf„r1
+
NODE_BUFFER
;

1853 
mem˝y
(
buf„r1
,
buf„r
,
kvs
);

1863 
	gvó
[
tc
].
	gnode_off£t
 = 
cuºít_node1_off£t
;

1865 
	gvó
[
tc
].
	gkv_off£t
 = 
buf„r1
-(*)&
d1
[
∑π1
];

1870 
	gbuf„r1
+=
kvs
;

1874 i‡(
	gbuf„r2
+
	gkvs
+
	gPH_LEN_SIZE
 > 
	gbuf„r2_íd
)

1876 
	gbuf„r2
[0] = 
buf„r2
[1] = 0;

1878 
	gcuºít_node2_mëa
->
	gsize
 = 
buf„r2
-
d2
[
∑π2
].
buf„r
;

1883 
	g√w_node2
->
	ggroup_size
+=
cuºít_node2_mëa
->
size
;

1886 
Node_off£t
 
	gãmp_off£t
;

1888 
	gãmp_off£t
 = 
Æloc_node
(
rŸ©i⁄2
);

1889 
	grŸ©i⁄2
 = (
rŸ©i⁄2
+1)%
PM_N
;

1891 
Node_mëa
* 
	gãmp_mëa
 = 
off£t_to_node
(
ãmp_off£t
);

1893 
	gd2
[
∑π2
].
	g√xt_off£t_ig
 = 
ãmp_off£t
;

1900 
	gcuºít_node2_mëa
->
	g√xt_off£t_ig
 = 
ãmp_off£t
;

1905 
	gãmp_mëa
->
	g∑π
 = 
cuºít_node2_mëa
->
∑π
+1;

1908 
	gãmp_mëa
->
	g°¨t_off£t
 = 
√w_node2_off£t
.
no
;

1909 
	gãmp_mëa
->
	göv_˙t
 = 0;

1911 
	gcuºít_node2_off£t
 = 
ãmp_off£t
;

1912 
	gcuºít_node2_mëa
 = 
ãmp_mëa
;

1915 
	g∑π2
++;

1916 
	gbuf„r2
 = 
d2
[
∑π2
].
buf„r
;

1920 
	gbuf„r2_íd
 = 
buf„r2
+
NODE_BUFFER
;

1927 
mem˝y
(
buf„r2
,
buf„r
,
kvs
);

1936 
	gvó
[
tc
].
	gnode_off£t
 = 
cuºít_node2_off£t
;

1938 
	gvó
[
tc
].
	gkv_off£t
 = 
buf„r2
-(*)&
d2
[
∑π2
];

1943 
	gbuf„r2
+=
kvs
;

1945 
	gvó
[
tc
].
	gÀn
 = 
vl16
;

1946 
	gtc
++;

1948 
	gbuf„r
+=
kvs
;

1951 
	gcuºít_node0_off£t
 = 
cuºít_node0_mëa
->
√xt_off£t_ig
;

1952 i‡(
	gcuºít_node0_off£t
 =
INIT_OFFSET
)

1954 
	gi
++;

1957 
	gbuf„r1
[0] = 
buf„r1
[1] = 0;

1958 
	gbuf„r2
[0] = 
buf„r2
[1] = 0;

1967 
	g√w_node1
->
	gíd_off£t
 = 
cuºít_node1_off£t
;

1972 
	gd1
[
∑π1
].
	g√xt_off£t_ig
 = 
INIT_OFFSET
;

1973 
	gcuºít_node1_mëa
->
	g√xt_off£t_ig
 = 
INIT_OFFSET
;

1976 
	gcuºít_node1_mëa
->
	gsize
 = 
buf„r1
-
d1
[
∑π1
].
buf„r
;

1982 
	g√w_node1
->
	ggroup_size
+=
cuºít_node1_mëa
->
size
;

1989 
	g√w_node2
->
	gíd_off£t
 = 
cuºít_node2_off£t
;

1993 
	gd2
[
∑π2
].
	g√xt_off£t_ig
 = 
INIT_OFFSET
;

1994 
	gcuºít_node2_mëa
->
	g√xt_off£t_ig
 = 
INIT_OFFSET
;

1997 
	gcuºít_node2_mëa
->
	gsize
 = 
buf„r2
-
d2
[
∑π2
].
buf„r
;

2004 
	g√w_node2
->
	ggroup_size
+=
cuºít_node2_mëa
->
size
;

2010 
	gnode_off£t
 = 
√w_node1_off£t
.
no
;

2011 
	gi
 = 0;

2014 
	gnode_mëa
 = 
off£t_to_node
(
node_off£t
);

2015 
	gnode_d©a
 = 
off£t_to_node_d©a
(
node_off£t
);

2017 
¡256
((*)
node_d©a
,(*)&
d1
[
i
],
node_mëa
->
size
 + 
mëa_size
 + 
PH_LEN_SIZE
 );

2018 
	gi
++;

2020 
	gnode_off£t
 = 
node_mëa
->
√xt_off£t_ig
;

2021 i‡(
	gnode_off£t
 =
INIT_OFFSET
)

2025 
	gnode_off£t
 = 
√w_node2_off£t
.
no
;

2026 
	gi
 = 0;

2029 
	gnode_mëa
 = 
off£t_to_node
(
node_off£t
);

2030 
	gnode_d©a
 = 
off£t_to_node_d©a
(
node_off£t
);

2032 
¡256
((*)
node_d©a
,(*)&
d2
[
i
],
node_mëa
->
size
 + 
mëa_size
 + 
PH_LEN_SIZE
 );

2033 
	gi
++;

2035 
	gnode_off£t
 = 
node_mëa
->
√xt_off£t_ig
;

2036 i‡(
	gnode_off£t
 =
INIT_OFFSET
)

2041 
_mm_s„n˚
();

2043 
	g√xt_node
->
	g¥ev_off£t
 = 
√w_node2_off£t
.
no_32
;

2044 
	g¥ev_node
->
	g√xt_off£t
 = 
√w_node1_off£t
.
no_32
;

2047 
pmem_mem˝y
((
Node
*)
off£t_to_node_d©a
(
¥ev_off£t
.
no
 ),&
√w_node1_off£t
,(),
PMEM_F_MEM_NONTEMPORAL
);

2050 
_mm_s„n˚
();

2054 
uöt64_t
 
	gv
;

2055 
	gv
 = (
uöt64_t
)1 <<(63-
c⁄töue_Àn
);

2057 
ö£π_ønge_íåy
((*)&
¥efix_64
,
c⁄töue_Àn
,
SPLIT_OFFSET
);

2059 
	g¥efix_64
-=
v
;

2060 
ö£π_ønge_íåy
((*)&
¥efix_64
,
c⁄töue_Àn
+1,
√w_node1_off£t
.
no
);

2062 
	g¥efix_64
+=
v
;

2063 
ö£π_ønge_íåy
((*)&
¥efix_64
,
c⁄töue_Àn
+1,
√w_node2_off£t
.
no
);

2066 
	gi
=0;i<
	gtc
;i++)

2070 
ö£π_poöt_íåy
((*)&
ãmp_key
[
i
],
vó
[i]);

2075 
_mm_s„n˚
();

2078 
	g√w_node1
->
	g°©e
 = 0;

2079 
	g√w_node2
->
	g°©e
 = 0;

2083 
	gi
=0;i<
	goc
;i++)

2084 
‰ì_node
(
ãmp_off£t
[
i
]);

2089 
•lô2p
(
Node_off£t
 
off£t
)

2115 i‡(
lock_check
(
off£t
) == -1)

2117  
•lô2
(
off£t
);

2121 
•lô
(
Node_off£t
 
off£t
)

2123 #ifde‡
dâ


2124 
time•ec
 
	gts1
,
	gts2
;

2125 
˛ock_gëtime
(
CLOCK_MONOTONIC
,&
ts1
);

2126 
_mm_m„n˚
();

2133 
	gi
;

2134 
uöt16_t
 
	gsize
;

2135 * 
	gbuf„r
;

2137 * 
	gbuf„r1
;

2138 * 
	gbuf„r2
;

2140 
	gtc
;

2141 
uöt64_t
 
	gãmp_key
[100*
PART_MAX
];

2144 
VÆueE¡ry
 
	gvó
[100*
PART_MAX
];

2145 
Node_off£t
 
	gãmp_off£t
[100*
PART_MAX
];

2146 
	goc
;

2149 
Node_mëa
* 
	g√w_node1
;

2150 
Node_mëa
* 
	g√w_node2
;

2151 
Node_mëa
* 
	g¥ev_node
;

2152 
Node_mëa
* 
	g√xt_node
;

2153 
Node_mëa
* 
	gnode
;

2155 
Node
* 
	gnode_d©a
;

2156 
Node
* 
	g√w_node1_d©a
;

2157 
Node
* 
	g√w_node2_d©a
;

2161 
	gnode
 = 
off£t_to_node
(
off£t
);

2162 
	gnode_d©a
 = 
off£t_to_node_d©a
(
off£t
);

2164 
	gc⁄töue_Àn
 = 
node
->
c⁄töue_Àn
;

2173 
Node_off£t_u
 
	g¥ev_off£t
,
	g√xt_off£t
;

2174 
	g¥ev_off£t
.
	gno_32
 = 
node
->
¥ev_off£t
;

2175 
	g¥ev_node
 = 
off£t_to_node
(
¥ev_off£t
.
no
);

2211 i‡(
	g¥ev_node
->
	g°©e
 == 1)

2249 
	g√xt_off£t
.
	gno_32
 = 
node
->
√xt_off£t
;

2250 
	g√xt_node
 = 
off£t_to_node
(
√xt_off£t
.
no
);

2251 i‡(
	g√xt_node
->
	g°©e
 == 1)

2256 
√xt_node
->
°©e
 == 1)

2258 
√xt_off£t
.
no_32
 = 
node
->next_offset;

2259 
	g√xt_node
 = 
off£t_to_node
(
√xt_off£t
.
no
);

2266 i‡(
	g¥öt
)

2267 
¥ötf
("locked\n");

2276 
Node_off£t_u
 
	g√w_node1_off£t
;

2277 
Node_off£t_u
 
	g√w_node2_off£t
;

2280 
	g√w_node1_off£t
.
	gno
 = 
Æloc_node
(0);

2281 
	g√w_node2_off£t
.
	gno
 = 
Æloc_node
(0);

2283 
	g√w_node1
 = 
off£t_to_node
(
√w_node1_off£t
.
no
);

2284 
	g√w_node2
 = 
off£t_to_node
(
√w_node2_off£t
.
no
);

2286 
	g√w_node1
->
	g∑π
 = 0;

2287 
	g√w_node2
->
	g∑π
 = 0;

2289 
	g√w_node1
->
	g°©e
 = 1;

2290 
	g√w_node1
->
	gsˇn_li°
 = 
NULL
;

2291 
	g√w_node2
->
	g°©e
 = 1;

2292 
	g√w_node2
->
	gsˇn_li°
 = 
NULL
;

2294 
	g√w_node1
->
	göv_˙t
 = 
√w_node2
->
öv_˙t
 = 0;

2295 
	g√w_node1
->
	ggroup_size
 = 
√w_node2
->
group_size
 = 0;

2296 
	g√w_node1
->
	gövÆid©ed_size
 = 
√w_node2
->
övÆid©ed_size
 = 0;

2297 #ifde‡
DOUBLE_LOG


2298 
	g√w_node1
->
	gÊush_˙t
 = 
√w_node2
->
Êush_˙t
 = 0;

2299 
	g√w_node1
->
	gÊush_size
 = 
√w_node2
->
Êush_size
 = 0;

2302 
	g√w_node1
->
	g°¨t_off£t
 = 
√w_node1_off£t
.
no
;

2303 
	g√w_node2
->
	g°¨t_off£t
 = 
√w_node2_off£t
.
no
;

2305 
	g√w_node1
->
	gc⁄töue_Àn
 = 
√w_node2
->
c⁄töue_Àn
 = continue_len+1;

2312 
	g√w_node2
->
	g√xt_off£t
 = 
√xt_off£t
.
no_32
;

2313 
	g√w_node2
->
	g¥ev_off£t
 = 
√w_node1_off£t
.
no_32
;

2317 
	g√w_node1
->
	g√xt_off£t
 = 
√w_node2_off£t
.
no_32
;

2318 
	g√w_node1
->
	g¥ev_off£t
 = 
¥ev_off£t
.
no_32
;

2322 i‡(
	gnode
->
	gsˇn_li°
 !
NULL
)

2323 
move_sˇn_li°
(
off£t
,
√w_node2_off£t
.
no
);

2341 
	g√w_node1_d©a
 = 
off£t_to_node_d©a
(
√w_node1_off£t
.
no
);

2342 
	g√w_node2_d©a
 = 
off£t_to_node_d©a
(
√w_node2_off£t
.
no
);

2344 
mem˝y
(
√w_node1_d©a
,
√w_node1
,()*3);

2345 
mem˝y
(
√w_node2_d©a
,
√w_node2
,()*3);

2354 
uöt64_t
 
	g¥efix_64
;

2355 
uöt64_t
 
	gm
;

2358 #ifde‡
DOUBLE_LOG


2359 i‡(
	gnode
->
	gÊush_˙t
 != 0)

2360 
¥efix_64
 = *((
uöt64_t
*)(
node
->
Êush_kv
[0]+
PH_LEN_SIZE
));

2366 
	g¥efix_64
 = *((
uöt64_t
*)(
node_d©a
->
buf„r
+
PH_LEN_SIZE
));

2375 
	gm
 = ~(((
uöt64_t
)1 << (63-
c⁄töue_Àn
))-1);

2381 
	g¥efix_64
 = (
¥efix_64
 & 
m
Ë| ((
uöt64_t
)1 << (63-
c⁄töue_Àn
));

2382 i‡(
	g¥öt
)

2383 
¥ötf
("pivŸ %lx m %lx sizê%d\n",
¥efix_64
,
m
,
size
);

2385 
uöt16_t
 
	gvl16
;

2387 
uöt16_t
 
	gkvs
;

2389 #ifde‡
DRAM_BUF


2390 
Node
 
	gd_node0
;

2391 
Node
 
	gd_node1
;

2392 
Node
 
	gd_node2
;

2394 
	gbuf„r
 = 
d_node0
.
buf„r
;

2395 
	gbuf„r1
 = 
d_node1
.
buf„r
;

2396 
	gbuf„r2
 = 
d_node2
.
buf„r
;

2399 
	gbuf„r
 = 
node_d©a
->
buf„r
;

2400 
	gbuf„r1
 = 
√w_node1_d©a
->
buf„r
;

2401 
	gbuf„r2
 = 
√w_node2_d©a
->
buf„r
;

2405 
	gtc
 = 0;

2407 
	gj
;

2412 
Node_off£t
 
	g√xt_off£t0
;

2413 
Node
* 
	gcuºít_node0_d©a
 = 
node_d©a
;

2414 
Node
* 
	gcuºít_node1_d©a
 = 
√w_node1_d©a
;

2415 
Node
* 
	gcuºít_node2_d©a
 = 
√w_node2_d©a
;

2416 
Node_mëa
* 
	gcuºít_node0_mëa
;

2417 
Node_mëa
* 
	gcuºít_node1_mëa
 = 
√w_node1
;

2418 
Node_mëa
* 
	gcuºít_node2_mëa
 = 
√w_node2
;

2419 
Node_off£t
 
	gcuºít_node0_off£t
 = 
off£t
;

2420 
Node_off£t
 
	gcuºít_node1_off£t
 = 
√w_node1_off£t
.
no
;

2421 
Node_off£t
 
	gcuºít_node2_off£t
 = 
√w_node2_off£t
.
no
;

2422 * 
	gbuf„r_íd
;

2423 * 
	gbuf„r1_íd
 = 
buf„r1
+
NODE_BUFFER
;

2424 * 
	gbuf„r2_íd
 = 
buf„r2
+
NODE_BUFFER
;

2426 * 
	gkvp
;

2427 
	goc
 = 0;

2428 
	gi
=0;

2431 
	gcuºít_node0_mëa
 = 
off£t_to_node
(
cuºít_node0_off£t
);

2432 
	gcuºít_node0_d©a
 = 
off£t_to_node_d©a
(
cuºít_node0_off£t
);

2435 
	g√xt_off£t0
 = 
cuºít_node0_mëa
->
√xt_off£t_ig
;

2437 #ifde‡
DRAM_BUF


2443 
	gbuf„r
 = 
d_node0
.
buf„r
;

2445 
	gbuf„r
 = 
cuºít_node0_d©a
->
buf„r
;

2448 
	gbuf„r_íd
 = 
buf„r
 + 
cuºít_node0_mëa
->
size
;

2449 
s‹t_öv
(
cuºít_node0_mëa
->
öv_˙t
,cuºít_node0_mëa->
öv_kv
);

2450 
	gj
 = 0;

2453 
	gcuºít_node0_mëa
->
	göv_kv
[
cuºít_node0_mëa
->
öv_˙t
] = 0;

2456 
	gãmp_off£t
[
oc
++] = 
cuºít_node0_off£t
;

2459 
	gbuf„r
 < 
	gbuf„r_íd
)

2464 
	gvl16
 = *((
uöt16_t
*)(
buf„r
 ));

2466 
	gkvs
 = 
LK_SIZE
 + 
vl16
;

2468 i‡(
	gkvs
 % 2)

2469 
	gkvs
++;

2471 #ifde‡
DRAM_BUF


2472 i‡(((*)&
	gd_node0
 + 
	gcuºít_node0_mëa
->
	göv_kv
[
j
] =
buf„r
) )

2474 i‡(((*)
cuºít_node0_d©a
 + 
cuºít_node0_mëa
->
öv_kv
[
j
] =
buf„r
) )

2477 
j
++;

2485 
	gkvs
 &~(
INV_BIT
);

2501 i‡(
	g¥öt
)

2502 
¥ötf
("pivŸ %lx key %lx\n",
¥efix_64
,*((
uöt64_t
*)(
buf„r
)));

2508 
	gãmp_key
[
tc
] = *((
uöt64_t
*)(
buf„r
+
PH_LEN_SIZE
));

2512 i‡(
	gãmp_key
[
tc
] < 
	g¥efix_64
)

2516 i‡(
	gbuf„r1
+
	gkvs
+
	gPH_LEN_SIZE
 > 
	gbuf„r1_íd
)

2519 
	gbuf„r1
[0] = 
buf„r1
[1] = 0;

2520 #ifde‡
DRAM_BUF


2521 
	gcuºít_node1_mëa
->
	gsize
 = 
buf„r1
-
d_node1
.
buf„r
;

2523 
	gcuºít_node1_mëa
->
	gsize
 = 
buf„r1
-
cuºít_node1_d©a
->
buf„r
;

2525 #ifde‡
DOUBLE_LOG


2526 
	gcuºít_node1_mëa
->
	gÊush_size
=0;

2529 
	g√w_node1
->
	ggroup_size
+=
cuºít_node1_mëa
->
size
;

2532 
Node_off£t
 
	gãmp_off£t
;

2533 
	gãmp_off£t
 = 
Æloc_node
(
cuºít_node1_mëa
->
∑π
+1);

2534 
Node_mëa
* 
	gãmp_mëa
 = 
off£t_to_node
(
ãmp_off£t
);

2535 #ifde‡
DRAM_BUF


2536 
	gd_node1
.
	g√xt_off£t_ig
 = 
ãmp_off£t
;

2538 
¡256
((*)
cuºít_node1_d©a
,(*)&
d_node1
,(
Node
));

2540 
	gcuºít_node1_d©a
->
	g√xt_off£t_ig
 = 
ãmp_off£t
;

2543 
	gcuºít_node1_mëa
->
	g√xt_off£t_ig
 = 
ãmp_off£t
;

2548 
	gãmp_mëa
->
	g∑π
 = 
cuºít_node1_mëa
->
∑π
+1;

2551 
	gãmp_mëa
->
	g°¨t_off£t
 = 
√w_node1_off£t
.
no
;

2552 
	gãmp_mëa
->
	göv_˙t
=0;

2553 #ifde‡
DOUBLE_LOG


2554 
	gãmp_mëa
->
	gÊush_˙t
=0;

2557 
	gcuºít_node1_off£t
 = 
ãmp_off£t
;

2558 
	gcuºít_node1_mëa
 = 
ãmp_mëa
;

2559 
	gcuºít_node1_d©a
 = 
off£t_to_node_d©a
(
ãmp_off£t
);

2560 #ifde‡
DRAM_BUF


2561 
	gbuf„r1
 = 
d_node1
.
buf„r
;

2563 
	gbuf„r1
 = 
cuºít_node1_d©a
->
buf„r
;

2565 
	gbuf„r1_íd
 = 
buf„r1
+
NODE_BUFFER
;

2572 #ifde‡
DRAM_BUF


2573 
mem˝y
(
buf„r1
,
buf„r
,
kvs
);

2575 
pmem_mem˝y
(
buf„r1
,
buf„r
,
kvs
,
PMEM_F_MEM_NODRAIN
);

2584 
	gvó
[
tc
].
	gnode_off£t
 = 
cuºít_node1_off£t
;

2585 #ifde‡
DRAM_BUF


2586 
	gvó
[
tc
].
	gkv_off£t
 = 
buf„r1
-(*)&
d_node1
;

2588 
	gvó
[
tc
].
	gkv_off£t
 = 
buf„r1
-(*)
cuºít_node1_d©a
;

2591 
	gbuf„r1
+=
kvs
;

2595 i‡(
	gbuf„r2
+
	gkvs
+
	gPH_LEN_SIZE
 > 
	gbuf„r2_íd
)

2597 
	gbuf„r2
[0] = 
buf„r2
[1] = 0;

2598 #ifde‡
DRAM_BUF


2599 
	gcuºít_node2_mëa
->
	gsize
 = 
buf„r2
-
d_node2
.
buf„r
;

2601 
	gcuºít_node2_mëa
->
	gsize
 = 
buf„r2
-
cuºít_node2_d©a
->
buf„r
;

2603 #ifde‡
DOUBLE_LOG


2604 
	gcuºít_node2_mëa
->
	gÊush_size
 = 0;

2607 
	g√w_node2
->
	ggroup_size
+=
cuºít_node2_mëa
->
size
;

2610 
Node_off£t
 
	gãmp_off£t
;

2611 
	gãmp_off£t
 = 
Æloc_node
(
cuºít_node2_mëa
->
∑π
+1);

2612 
Node_mëa
* 
	gãmp_mëa
 = 
off£t_to_node
(
ãmp_off£t
);

2613 #ifde‡
DRAM_BUF


2614 
	gd_node2
.
	g√xt_off£t_ig
 = 
ãmp_off£t
;

2616 
¡256
((*)
cuºít_node2_d©a
,(*)&
d_node2
,(
Node
));

2618 
	gcuºít_node2_d©a
->
	g√xt_off£t_ig
 = 
ãmp_off£t
;

2621 
	gcuºít_node2_mëa
->
	g√xt_off£t_ig
 = 
ãmp_off£t
;

2626 
	gãmp_mëa
->
	g∑π
 = 
cuºít_node2_mëa
->
∑π
+1;

2629 
	gãmp_mëa
->
	g°¨t_off£t
 = 
√w_node2_off£t
.
no
;

2630 
	gãmp_mëa
->
	göv_˙t
 = 0;

2631 #ifde‡
DOUBLE_LOG


2632 
	gãmp_mëa
->
	gÊush_˙t
 = 0;

2635 
	gcuºít_node2_off£t
 = 
ãmp_off£t
;

2636 
	gcuºít_node2_mëa
 = 
ãmp_mëa
;

2637 
	gcuºít_node2_d©a
 = 
off£t_to_node_d©a
(
ãmp_off£t
);

2638 #ifde‡
DRAM_BUF


2639 
	gbuf„r2
 = 
d_node2
.
buf„r
;

2641 
	gbuf„r2
 = 
cuºít_node2_d©a
->
buf„r
;

2643 
	gbuf„r2_íd
 = 
buf„r2
+
NODE_BUFFER
;

2649 #ifde‡
DRAM_BUF


2650 
mem˝y
(
buf„r2
,
buf„r
,
kvs
);

2652 
pmem_mem˝y
(
buf„r2
,
buf„r
,
kvs
,
PMEM_F_MEM_NODRAIN
);

2659 
	gvó
[
tc
].
	gnode_off£t
 = 
cuºít_node2_off£t
;

2660 #ifde‡
DRAM_BUF


2661 
	gvó
[
tc
].
	gkv_off£t
 = 
buf„r2
-(*)&
d_node2
;

2663 
	gvó
[
tc
].
	gkv_off£t
 = 
buf„r2
-(*)
cuºít_node2_d©a
;

2666 
	gbuf„r2
+=
kvs
;

2669 
	gvó
[
tc
].
	gÀn
 = 
vl16
;

2670 
	gtc
++;

2688 
	gbuf„r
+=
kvs
;

2690 #ifde‡
DOUBLE_LOG


2692 
	gi
=0;i<
	gcuºít_node0_mëa
->
	gÊush_˙t
;i++)

2694 
	gkvp
 = 
cuºít_node0_mëa
->
Êush_kv
[
i
];

2696 
	gvl16
 = *((
uöt16_t
*)
kvp
);

2697 i‡((
	gvl16
 & 
	gINV_BIT
))

2699 
	gkvs
 = 
LK_SIZE
+
vl16
;

2700 i‡(
	gkvs
%2)

2701 ++
	gkvs
;

2704 
	gãmp_key
[
tc
] = *((
uöt64_t
*)(
kvp
+
PH_LEN_SIZE
));

2705 i‡(
	gãmp_key
[
tc
] < 
	g¥efix_64
)

2707 i‡(
	gbuf„r1
+
	gkvs
+
	gPH_LEN_SIZE
 > 
	gbuf„r1_íd
)

2709 
	gbuf„r1
[0] = 
buf„r1
[1] = 0;

2712 
	gcuºít_node1_mëa
->
	gsize
 = 
buf„r1
-
cuºít_node1_d©a
->
buf„r
;

2713 
	gcuºít_node1_mëa
->
	gÊush_size
=0;

2715 
	g√w_node1
->
	ggroup_size
+=
cuºít_node1_mëa
->
size
;

2718 
Node_off£t
 
	gãmp_off£t
;

2719 
	gãmp_off£t
 = 
Æloc_node
(
cuºít_node1_mëa
->
∑π
+1);

2720 
Node_mëa
* 
	gãmp_mëa
 = 
off£t_to_node
(
ãmp_off£t
);

2722 
	gcuºít_node1_d©a
->
	g√xt_off£t_ig
 = 
ãmp_off£t
;

2723 
	gcuºít_node1_mëa
->
	g√xt_off£t_ig
 = 
ãmp_off£t
;

2724 
pmem_≥rsi°
(
cuºít_node1_d©a
,(
Node
));

2728 
	gãmp_mëa
->
	g∑π
 = 
cuºít_node1_mëa
->
∑π
+1;

2731 
	gãmp_mëa
->
	g°¨t_off£t
 = 
√w_node1_off£t
.
no
;

2732 
	gãmp_mëa
->
	göv_˙t
=0;

2733 
	gãmp_mëa
->
	gÊush_˙t
=0;

2735 
	gcuºít_node1_off£t
 = 
ãmp_off£t
;

2736 
	gcuºít_node1_mëa
 = 
ãmp_mëa
;

2737 
	gcuºít_node1_d©a
 = 
off£t_to_node_d©a
(
ãmp_off£t
);

2739 
	gbuf„r1
 = 
cuºít_node1_d©a
->
buf„r
;

2740 
	gbuf„r1_íd
 = 
buf„r1
+
NODE_BUFFER
;

2744 
mem˝y
(
buf„r1
,
kvp
,
kvs
);

2745 *((
	guöt16_t
*)
	gkvp
Ë|
INV_BIT
;

2749 
	gvó
[
tc
].
	gnode_off£t
 = 
cuºít_node1_off£t
;

2750 
	gvó
[
tc
].
	gkv_off£t
 = 
buf„r1
-(*)
cuºít_node1_d©a
;

2752 
	gbuf„r1
+=
kvs
;

2756 i‡(
	gbuf„r2
+
	gkvs
+
	gPH_LEN_SIZE
 > 
	gbuf„r2_íd
)

2758 
	gbuf„r2
[0] = 
buf„r2
[1] = 0;

2760 
	gcuºít_node2_mëa
->
	gsize
 = 
buf„r2
-
cuºít_node2_d©a
->
buf„r
;

2761 
	gcuºít_node2_mëa
->
	gÊush_size
=0;

2763 
	g√w_node2
->
	ggroup_size
+=
cuºít_node2_mëa
->
size
;

2766 
Node_off£t
 
	gãmp_off£t
;

2767 
	gãmp_off£t
 = 
Æloc_node
(
cuºít_node2_mëa
->
∑π
+1);

2768 
Node_mëa
* 
	gãmp_mëa
 = 
off£t_to_node
(
ãmp_off£t
);

2770 
	gcuºít_node2_d©a
->
	g√xt_off£t_ig
 = 
ãmp_off£t
;

2771 
	gcuºít_node2_mëa
->
	g√xt_off£t_ig
 = 
ãmp_off£t
;

2772 
pmem_≥rsi°
(
cuºít_node2_d©a
,(
Node
));

2776 
	gãmp_mëa
->
	g∑π
 = 
cuºít_node2_mëa
->
∑π
+1;

2779 
	gãmp_mëa
->
	g°¨t_off£t
 = 
√w_node2_off£t
.
no
;

2780 
	gãmp_mëa
->
	göv_˙t
=0;

2781 
	gãmp_mëa
->
	gÊush_˙t
=0;

2783 
	gcuºít_node2_off£t
 = 
ãmp_off£t
;

2784 
	gcuºít_node2_mëa
 = 
ãmp_mëa
;

2785 
	gcuºít_node2_d©a
 = 
off£t_to_node_d©a
(
ãmp_off£t
);

2787 
	gbuf„r2
 = 
cuºít_node2_d©a
->
buf„r
;

2788 
	gbuf„r2_íd
 = 
buf„r2
+
NODE_BUFFER
;

2792 
mem˝y
(
buf„r2
,
kvp
,
kvs
);

2794 *((
	guöt16_t
*)
	gkvp
Ë|
INV_BIT
;

2797 
	gvó
[
tc
].
	gnode_off£t
 = 
cuºít_node2_off£t
;

2798 
	gvó
[
tc
].
	gkv_off£t
 = 
buf„r2
-(*)
cuºít_node2_d©a
;

2800 
	gbuf„r2
+=
kvs
;

2804 
	gvó
[
tc
].
	gÀn
 = 
vl16
;

2805 
	gtc
++;

2809 i‡(
	gcuºít_node0_off£t
 =
node
->
íd_off£t
)

2812 
	gcuºít_node0_off£t
 = 
√xt_off£t0
;

2816 
	gbuf„r1
[0] = 
buf„r1
[1] = 0;

2817 
	gbuf„r2
[0] = 
buf„r2
[1] = 0;

2833 
	g√w_node1
->
	gíd_off£t
 = 
cuºít_node1_off£t
;

2835 #ifde‡
DOUBLE_LOG


2836 
	gcuºít_node1_mëa
->
	gÊush_size
 = 0;

2840 #ifde‡
DRAM_BUF


2841 
	gd_node1
.
	g√xt_off£t_ig
 = 
INIT_OFFSET
;

2843 
¡256
((*)
cuºít_node1_d©a
,(*)&
d_node1
,(
Node
));

2844 
	gcuºít_node1_mëa
->
	gsize
 = 
buf„r1
-
d_node1
.
buf„r
;

2846  
	gcuºít_node1_d©a
->
	g√xt_off£t_ig
 = 
INIT_OFFSET
;

2848 
	gcuºít_node1_mëa
->
	gsize
 = 
buf„r1
-
cuºít_node1_d©a
->
buf„r
;

2850 
	g√w_node1
->
	ggroup_size
+=
cuºít_node1_mëa
->
size
;

2857 
	g√w_node2
->
	gíd_off£t
 = 
cuºít_node2_off£t
;

2858 #ifde‡
DOUBLE_LOG


2859 
	gcuºít_node2_mëa
->
	gÊush_size
 = 0;

2863 #ifde‡
DRAM_BUF


2864 
	gd_node2
.
	g√xt_off£t_ig
 = 
INIT_OFFSET
;

2866 
¡256
((*)
cuºít_node2_d©a
,(*)&
d_node2
,(
Node
));

2867 
	gcuºít_node2_mëa
->
	gsize
 = 
buf„r2
-
d_node2
.
buf„r
;

2869  
	gcuºít_node2_d©a
->
	g√xt_off£t_ig
 = 
INIT_OFFSET
;

2872 
	gcuºít_node2_mëa
->
	gsize
 = 
buf„r2
-
cuºít_node2_d©a
->
buf„r
;

2874 
	g√w_node2
->
	ggroup_size
+=
cuºít_node2_mëa
->
size
;

2876 #i‚de‡
DRAM_BUF


2877 
pmem_døö
();

2879 
_mm_s„n˚
();

2881 
	g√xt_node
->
	g¥ev_off£t
 = 
√w_node2_off£t
.
no_32
;

2882 
	g¥ev_node
->
	g√xt_off£t
 = 
√w_node1_off£t
.
no_32
;

2885 
pmem_mem˝y
((
Node
*)
off£t_to_node_d©a
(
¥ev_off£t
.
no
 ),&
√w_node1_off£t
,(),
PMEM_F_MEM_NONTEMPORAL
);

2888 
_mm_s„n˚
();

2892 i‡(
	g¥öt
)

2893 
¥ötf
("insertÑange\n");

2897 
uöt64_t
 
	gv
;

2900 
	gv
 = (
uöt64_t
)1 <<(63-
c⁄töue_Àn
);

2906 
ö£π_ønge_íåy
((*)&
¥efix_64
,
c⁄töue_Àn
,
SPLIT_OFFSET
);

2924 
	g¥efix_64
-=
v
;

2925 
ö£π_ønge_íåy
((*)&
¥efix_64
,
c⁄töue_Àn
+1,
√w_node1_off£t
.
no
);

2927 
	g√w_node1
->
	gc⁄töue_Àn
 = 
c⁄töue_Àn
+1;

2928 
	g¥efix_64
+=
v
;

2929 
ö£π_ønge_íåy
((*)&
¥efix_64
,
c⁄töue_Àn
+1,
√w_node2_off£t
.
no
);

2930 
	g√w_node2
->
	gc⁄töue_Àn
 = 
c⁄töue_Àn
+1;

2939 
	gi
=0;i<
	gtc
;i++)

2943 
ö£π_poöt_íåy
((*)&
ãmp_key
[
i
],
vó
[i]);

2949 i‡(
	g¥öt
)

2950 
¥ötf
("rehash\n");

2955 
	gbuf„r
 = 
node_d©a
->
buf„r
;

2956 
	gbuf„r1
 = 
√w_node1_d©a
->
buf„r
;

2957 
	gbuf„r2
 = 
√w_node2_d©a
->
buf„r
;

2959 
	gbuf„r
 < 
	gbe
)

2963 
	gvÆue_Àn
 = *((
uöt16_t
*)(
buf„r
));

2964 
	gkvs
 = 
kls
 + 
vÆue_Àn
;

2965 i‡((
	gvÆue_Àn
 & (1 << 15)) == 0)

2979 i‡(*((
uöt64_t
*)(
buf„r
+
Àn_size
)Ë< 
¥efix_64
)

2986 
ö£π_poöt_íåy
(
buf„r
+
Àn_size
,
buf„r1
);

2987 
	gbuf„r1
+
kvs
;

2995 
ö£π_poöt_íåy
(
buf„r
+
Àn_size
,
buf„r2
);

2996 
	gbuf„r2
+=
kvs
;

3001 
	gkvs
-= (1 << 15);

3002 
	gbuf„r
+=
kvs
;

3008 
_mm_s„n˚
();

3011 
	g√w_node1
->
	g°©e
 = 0;

3012 
	g√w_node2
->
	g°©e
 = 0;

3017 
	gi
=0;i<
	goc
;i++)

3018 
‰ì_node
(
ãmp_off£t
[
i
]);

3020 #ifde‡
dâ


3021 
_mm_m„n˚
();

3022 
˛ock_gëtime
(
CLOCK_MONOTONIC
,&
ts2
);

3023 
	gâ2
+=(
ts2
.
tv_£c
-
ts1
.tv_£c)*1000000000+ts2.
tv_n£c
-ts1.tv_nsec;

3029 
com∑˘2
(
Node_off£t
 
off£t
)

3042 
Node_off£t
 
	gnode_off£t
;

3043 
Node_mëa
* 
	gnode_mëa
;

3044 
Node
* 
	gnode_d©a
;

3046 c⁄° 
	gmëa_size
 = 
d0
[0].
buf„r
-(*)&d0[0];

3047 
	g∑π0
,
	g∑π1
;

3049 
	g∑π0
 = 0;

3052 
	gnode_off£t
 = 
off£t
;

3055 
	gnode_mëa
 = 
off£t_to_node
(
node_off£t
);

3056 
	gnode_d©a
 = 
off£t_to_node_d©a
(
node_off£t
);

3058 
˝256
((*)&
d0
[
∑π0
],(*)
node_d©a
,
node_mëa
->
size
 + 
mëa_size
);

3059 
	g∑π0
++;

3061 
	gnode_off£t
 = 
node_mëa
->
√xt_off£t_ig
;

3062 i‡(
	gnode_off£t
 =
INIT_OFFSET
)

3068 
	gi
;

3069 
uöt16_t
 
	gsize
;

3071 
	gtc
;

3072 
uöt64_t
 
	gãmp_key
[100*
PART_MAX
];

3073 
VÆueE¡ry
 
	gvó
[100*
PART_MAX
];

3074 
Node_off£t
 
	gãmp_off£t
[
PART_MAX
];

3075 
	goc
;

3077 
	gc⁄töue_Àn
 = 
off£t_to_node
(
off£t
)->
c⁄töue_Àn
;

3079 
	g∑π1
 = 0;

3081 
Node_mëa
* 
	g√w_node1
;

3082 
Node_mëa
* 
	g¥ev_node
;

3083 
Node_mëa
* 
	g√xt_node
;

3085 
Node_off£t_u
 
	g¥ev_off£t
,
	g√xt_off£t
;

3087 
	gnode_mëa
 = 
off£t_to_node
(
off£t
);

3088 
	gnode_d©a
 = 
off£t_to_node_d©a
(
off£t
);

3090 
	g¥ev_off£t
.
	gno_32
 = 
node_mëa
->
¥ev_off£t
;

3091 
	g√xt_off£t
.
	gno_32
 = 
node_mëa
->
√xt_off£t
;

3092 
	g√xt_node
 = 
off£t_to_node
(
√xt_off£t
.
no
);

3093 
	g¥ev_node
 = 
off£t_to_node
(
¥ev_off£t
.
no
);

3095 
Node_off£t_u
 
	g√w_node1_off£t
;

3097 
	grŸ©i⁄1
;

3098 
	g√w_node1_off£t
.
	gno
 = 
Æloc_node
(
∑π_rŸ©i⁄
);

3099 
	g∑π_rŸ©i⁄
 = (
∑π_rŸ©i⁄
+1)%
PM_N
;

3100 
	grŸ©i⁄1
 = 
∑π_rŸ©i⁄
;

3102 
	g√w_node1
 = 
off£t_to_node
(
√w_node1_off£t
.
no
);

3104 
	g√w_node1
->
	g∑π
 = 0;

3106 
	g√w_node1
->
	g°©e
 = 1;

3110 
	g√w_node1
->
	göv_˙t
 = 0;

3111 
	g√w_node1
->
	ggroup_size
 = 0;

3112 
	g√w_node1
->
	gövÆid©ed_size
 = 0;

3114 
	g√w_node1
->
	g°¨t_off£t
 = 
√w_node1_off£t
.
no
;

3116 
	g√w_node1
->
	gc⁄töue_Àn
 = 
c⁄töue_Àn
;

3119 
	g√w_node1
->
	g√xt_off£t
 = 
√xt_off£t
.
no_32
;

3120 
	g√w_node1
->
	g¥ev_off£t
 = 
¥ev_off£t
.
no_32
;

3127 
	gd1
[0].
	g√xt_off£t
 = 
√xt_off£t
.
no
;

3128 
	gd1
[0].
	gc⁄töue_Àn
 = 
c⁄töue_Àn
;

3138 
uöt16_t
 
	gvl16
;

3140 
uöt16_t
 
	gkvs
;

3142 * 
	gbuf„r
;

3143 * 
	gbuf„r1
;

3144 * 
	gbuf„r2
;

3147 
	gbuf„r1
 = 
d1
[0].
buf„r
;

3149 
	gtc
 = 0;

3151 
	gj
;

3160 
Node_mëa
* 
	gcuºít_node0_mëa
;

3161 
Node_mëa
* 
	gcuºít_node1_mëa
 = 
√w_node1
;

3162 
Node_off£t
 
	gcuºít_node0_off£t
 = 
off£t
;

3163 
Node_off£t
 
	gcuºít_node1_off£t
 = 
√w_node1_off£t
.
no
;

3164 * 
	gbuf„r_íd
;

3165 * 
	gbuf„r1_íd
 = 
buf„r1
+
NODE_BUFFER
;

3167 * 
	gkvp
;

3168 
	goc
 = 0;

3169 
	gi
=0;

3172 
	gcuºít_node0_mëa
 = 
off£t_to_node
(
cuºít_node0_off£t
);

3184 
	gbuf„r
 = 
d0
[
i
].
buf„r
;

3189 
	gbuf„r_íd
 = 
buf„r
 + 
cuºít_node0_mëa
->
size
;

3190 
s‹t_öv
(
cuºít_node0_mëa
->
öv_˙t
,cuºít_node0_mëa->
öv_kv
);

3191 
	gj
 = 0;

3192 
	gcuºít_node0_mëa
->
	göv_kv
[
cuºít_node0_mëa
->
öv_˙t
] = 0;

3195 
	gãmp_off£t
[
oc
++] = 
cuºít_node0_off£t
;

3197 
	gbuf„r
 < 
	gbuf„r_íd
)

3202 
	gvl16
 = *((
uöt16_t
*)(
buf„r
 ));

3204 
	gkvs
 = 
LK_SIZE
 + 
vl16
;

3206 i‡(
	gkvs
 % 2)

3207 
	gkvs
++;

3210 i‡(((*)&
	gd0
[
i
] + 
	gcuºít_node0_mëa
->
	göv_kv
[
j
] =
buf„r
) )

3215 
j
++;

3216 
	gkvs
 &~(
INV_BIT
);

3220 
	gãmp_key
[
tc
] = *((
uöt64_t
*)(
buf„r
+
PH_LEN_SIZE
));

3226 i‡(
	gbuf„r1
+
	gkvs
+
	gPH_LEN_SIZE
 > 
	gbuf„r1_íd
)

3229 
	gbuf„r1
[0] = 
buf„r1
[1] = 0;

3231 
	gcuºít_node1_mëa
->
	gsize
 = 
buf„r1
-
d1
[
∑π1
].
buf„r
;

3236 
	g√w_node1
->
	ggroup_size
+=
cuºít_node1_mëa
->
size
;

3239 
Node_off£t
 
	gãmp_off£t
;

3241 
	gãmp_off£t
 = 
Æloc_node
(
rŸ©i⁄1
);

3242 
	grŸ©i⁄1
 = (
rŸ©i⁄1
+1)%
PM_N
;

3243 
Node_mëa
* 
	gãmp_mëa
 = 
off£t_to_node
(
ãmp_off£t
);

3245 
	gd1
[
∑π1
].
	g√xt_off£t_ig
 = 
ãmp_off£t
;

3252 
	gcuºít_node1_mëa
->
	g√xt_off£t_ig
 = 
ãmp_off£t
;

3257 
	gãmp_mëa
->
	g∑π
 = 
cuºít_node1_mëa
->
∑π
+1;

3260 
	gãmp_mëa
->
	g°¨t_off£t
 = 
√w_node1_off£t
.
no
;

3261 
	gãmp_mëa
->
	göv_˙t
=0;

3263 
	gcuºít_node1_off£t
 = 
ãmp_off£t
;

3264 
	gcuºít_node1_mëa
 = 
ãmp_mëa
;

3267 
	g∑π1
++;

3268 
	gbuf„r1
 = 
d1
[
∑π1
].
buf„r
;

3272 
	gbuf„r1_íd
 = 
buf„r1
+
NODE_BUFFER
;

3280 
mem˝y
(
buf„r1
,
buf„r
,
kvs
);

3290 
	gvó
[
tc
].
	gnode_off£t
 = 
cuºít_node1_off£t
;

3292 
	gvó
[
tc
].
	gkv_off£t
 = 
buf„r1
-(*)&
d1
[
∑π1
];

3297 
	gbuf„r1
+=
kvs
;

3299 
	gvó
[
tc
].
	gÀn
 = 
vl16
;

3300 
	gtc
++;

3302 
	gbuf„r
+=
kvs
;

3305 
	gcuºít_node0_off£t
 = 
cuºít_node0_mëa
->
√xt_off£t_ig
;

3306 i‡(
	gcuºít_node0_off£t
 =
INIT_OFFSET
)

3308 
	gi
++;

3311 
	gbuf„r1
[0] = 
buf„r1
[1] = 0;

3320 
	g√w_node1
->
	gíd_off£t
 = 
cuºít_node1_off£t
;

3325 
	gd1
[
∑π1
].
	g√xt_off£t_ig
 = 
INIT_OFFSET
;

3326 
	gcuºít_node1_mëa
->
	g√xt_off£t_ig
 = 
INIT_OFFSET
;

3329 
	gcuºít_node1_mëa
->
	gsize
 = 
buf„r1
-
d1
[
∑π1
].
buf„r
;

3335 
	g√w_node1
->
	ggroup_size
+=
cuºít_node1_mëa
->
size
;

3343 
	gnode_off£t
 = 
√w_node1_off£t
.
no
;

3344 
	gi
 = 0;

3347 
	gnode_mëa
 = 
off£t_to_node
(
node_off£t
);

3348 
	gnode_d©a
 = 
off£t_to_node_d©a
(
node_off£t
);

3350 
¡256
((*)
node_d©a
,(*)&
d1
[
i
],
node_mëa
->
size
 + 
mëa_size
 + 
PH_LEN_SIZE
);

3351 
	gi
++;

3353 
	gnode_off£t
 = 
node_mëa
->
√xt_off£t_ig
;

3354 i‡(
	gnode_off£t
 =
INIT_OFFSET
)

3359 
_mm_s„n˚
();

3361 
	g√xt_node
->
	g¥ev_off£t
 = 
√w_node1_off£t
.
no_32
;

3362 
	g¥ev_node
->
	g√xt_off£t
 = 
√w_node1_off£t
.
no_32
;

3365 
pmem_mem˝y
(
off£t_to_node_d©a
(
¥ev_off£t
.
no
 ),&
√w_node1_off£t
,(),
PMEM_F_MEM_NONTEMPORAL
);

3368 
_mm_s„n˚
();

3372 
ö£π_ønge_íåy
((*)
d0
[0].
buf„r
+
PH_LEN_SIZE
 ,
c⁄töue_Àn
,
√w_node1_off£t
.
no
);

3374 
	gi
=0;i<
	gtc
;i++)

3375 
ö£π_poöt_íåy
((*)&
ãmp_key
[
i
],
vó
[i]);

3378 
_mm_s„n˚
();

3381 
	g√w_node1
->
	g°©e
 = 0;

3385 
	gi
=0;i<
	goc
;i++)

3386 
‰ì_node
(
ãmp_off£t
[
i
]);

3392 
com∑˘2p
(
Node_off£t
 
off£t
)

3419 i‡(
lock_check
(
off£t
) == -1)

3421  
com∑˘2
(
off£t
);

3425 
com∑˘
(
Node_off£t
 
off£t
)

3428 #ifde‡
dâ


3429 
time•ec
 
	gts1
,
	gts2
;

3430 
˛ock_gëtime
(
CLOCK_MONOTONIC
,&
ts1
);

3431 
_mm_m„n˚
();

3436 if(
	g¥öt
)

3437 
¥ötf
("com∑˘i⁄ off£à%d/%d\n",
off£t
.
fûe
,offset.offset);

3443 
	gi
;

3444 
uöt16_t
 
	gsize
;

3445 * 
	gbuf„r
;

3447 * 
	gbuf„r1
;

3449 
	gtc
;

3450 
uöt64_t
 
	gãmp_key
[100 * 
PART_MAX
];

3453 
VÆueE¡ry
 
	gvó
[100 * 
PART_MAX
];

3454 
Node_off£t
 
	gãmp_off£t
[100 * 
PART_MAX
];

3455 
	goc
;

3457 
Node_mëa
* 
	g√w_node1
;

3458 
Node_mëa
* 
	g¥ev_node
;

3459 
Node_mëa
* 
	g√xt_node
;

3460 
Node_mëa
* 
	gnode
;

3462 
Node
* 
	gnode_d©a
;

3463 
Node
* 
	g√w_node1_d©a
;

3466 
	gnode
 = 
off£t_to_node
(
off£t
);

3467 
	gnode_d©a
 = 
off£t_to_node_d©a
(
off£t
);

3469 
	gc⁄töue_Àn
 = 
node
->
c⁄töue_Àn
;

3472 
Node_off£t_u
 
	g¥ev_off£t
,
	g√xt_off£t
;

3473 
	g¥ev_off£t
.
	gno_32
 = 
node
->
¥ev_off£t
;

3474 
	g¥ev_node
 = 
off£t_to_node
(
¥ev_off£t
.
no
);

3498 i‡(
	g¥ev_node
->
	g°©e
 == 1)

3513 
_mm_m„n˚
();

3515 
	g√xt_off£t
.
	gno_32
 = 
node
->
√xt_off£t
;

3516 
	g√xt_node
 = 
off£t_to_node
(
√xt_off£t
.
no
);

3518 i‡(
	g√xt_node
->
	g°©e
 == 1)

3520 
√xt_node
->
°©e
 == 1)

3522 
√xt_off£t
.
no_32
 = 
node
->next_offset;

3523 
	g√xt_node
 = 
off£t_to_node
(
√xt_off£t
.
no
);

3526 i‡(
	g¥öt
)

3527 
¥ötf
("locked\n");

3535 
Node_off£t_u
 
	g√w_node1_off£t
;

3536 
	g√w_node1_off£t
.
	gno
 = 
Æloc_node
(0);

3538 
	g√w_node1
 = 
off£t_to_node
(
√w_node1_off£t
.
no
);

3542 
	g√w_node1
->
	g∑π
 = 0;

3544 
	g√w_node1
->
	g°©e
 = 1;

3551 
	g√w_node1
->
	göv_˙t
 = 0;

3552 
	g√w_node1
->
	ggroup_size
 = 0;

3553 
	g√w_node1
->
	g°¨t_off£t
 = 
√w_node1_off£t
.
no
;

3554 
	g√w_node1
->
	gövÆid©ed_size
 = 0;

3556 
	g√w_node1
->
	gsˇn_li°
 = 
NULL
;

3557 #ifde‡
DOUBLE_LOG


3558 
	g√w_node1
->
	gÊush_˙t
 = 0;

3559 
	g√w_node1
->
	gÊush_size
 = 0;

3562 
	g√w_node1
->
	g√xt_off£t
 = 
node
->
√xt_off£t
;

3563 
	g√w_node1
->
	g¥ev_off£t
 = 
node
->
¥ev_off£t
;

3565 
	g√w_node1
->
	gc⁄töue_Àn
 = 
c⁄töue_Àn
;

3573 i‡(
	gnode
->
	gsˇn_li°
 !
NULL
)

3574 
move_sˇn_li°
(
off£t
,
√w_node1_off£t
.
no
);

3576 
	g√w_node1_d©a
 = 
off£t_to_node_d©a
(
√w_node1_off£t
.
no
);

3578 
mem˝y
(
√w_node1_d©a
,
√w_node1
,()*3);

3599 
uöt16_t
 
	gvl16
;

3603 #ifde‡
DRAM_BUF


3604 
Node
 
	gd_node0
;

3605 
Node
 
	gd_node1
;

3607 
	gbuf„r
 = 
d_node0
.
buf„r
;

3608 
	gbuf„r1
 = 
d_node1
.
buf„r
;

3611 
	gbuf„r
 = 
node_d©a
->
buf„r
;

3612 
	gbuf„r1
 = 
√w_node1_d©a
->
buf„r
;

3619 
uöt16_t
 
	gkvs
;

3621 
	gtc
 = 0;

3628 
Node_off£t
 
	g√xt_off£t0
;

3629 
Node
* 
	gcuºít_node0_d©a
 = 
node_d©a
;

3630 
Node
* 
	gcuºít_node1_d©a
 = 
√w_node1_d©a
;

3631 
Node_mëa
* 
	gcuºít_node0_mëa
;

3632 
Node_mëa
* 
	gcuºít_node1_mëa
 = 
√w_node1
;

3633 
Node_off£t
 
	gcuºít_node0_off£t
 = 
off£t
;

3634 
Node_off£t
 
	gcuºít_node1_off£t
 = 
√w_node1_off£t
.
no
;

3636 * 
	gbuf„r_íd
;

3637 * 
	gbuf„r1_íd
 = 
buf„r1
+
NODE_BUFFER
;

3638 
	gj
;

3639 * 
	gkvp
;

3642 
	goc
 = 0;

3645 
	gcuºít_node0_mëa
 = 
off£t_to_node
(
cuºít_node0_off£t
);

3646 
	gcuºít_node0_d©a
 = 
off£t_to_node_d©a
(
cuºít_node0_off£t
);

3649 
	g√xt_off£t0
 = 
cuºít_node0_mëa
->
√xt_off£t_ig
;

3651 #ifde‡
DRAM_BUF


3652 
	gd_node0
 = *
cuºít_node0_d©a
;

3653 
	gbuf„r
 = 
d_node0
.
buf„r
;

3656 
	gbuf„r
 = 
cuºít_node0_d©a
->
buf„r
;

3658 
	gbuf„r_íd
 = 
buf„r
 + 
cuºít_node0_mëa
->
size
;

3659 
s‹t_öv
(
cuºít_node0_mëa
->
öv_˙t
,cuºít_node0_mëa->
öv_kv
);

3660 
	gj
 = 0;

3663 
	gcuºít_node0_mëa
->
	göv_kv
[
cuºít_node0_mëa
->
öv_˙t
] = 0;

3664 
	gãmp_off£t
[
oc
++] = 
cuºít_node0_off£t
;

3665 
	gbuf„r
 < 
	gbuf„r_íd
)

3672 
	gvl16
 = *((
uöt16_t
*)(
buf„r
));

3674 
	gkvs
 = 
LK_SIZE
 + 
vl16
;

3675 i‡(
	gkvs
%2)

3676 ++
	gkvs
;

3678 #ifde‡
DRAM_BUF


3679 i‡(((*)&
	gd_node0
 + 
	gcuºít_node0_mëa
->
	göv_kv
[
j
] =
buf„r
))

3681 i‡(((*)
cuºít_node0_d©a
 + 
cuºít_node0_mëa
->
öv_kv
[
j
] =
buf„r
) )

3684 
j
++;

3693 
	gkvs
&~(
INV_BIT
);

3710 
	gãmp_key
[
tc
] = *((
uöt64_t
*)(
buf„r
+
PH_LEN_SIZE
 ));

3711 i‡(
	gbuf„r1
+
	gkvs
+
	gPH_LEN_SIZE
 > 
	gbuf„r1_íd
)

3713 
	gbuf„r1
[0] = 
buf„r1
[1] = 0;

3714 #ifde‡
DRAM_BUF


3715 
	gcuºít_node1_mëa
->
	gsize
 = 
buf„r1
-
d_node1
.
buf„r
;

3717 
	gcuºít_node1_mëa
->
	gsize
 = 
buf„r1
-
cuºít_node1_d©a
->
buf„r
;

3719 #ifde‡
DOUBLE_LOG


3720 
	gcuºít_node1_mëa
->
	gÊush_size
 = 0;

3723 
	g√w_node1
->
	ggroup_size
+=
cuºít_node1_mëa
->
size
;

3726 
Node_off£t
 
	gãmp_off£t
;

3727 
	gãmp_off£t
 = 
Æloc_node
(
cuºít_node1_mëa
->
∑π
+1);

3728 
Node_mëa
* 
	gãmp_mëa
 = 
off£t_to_node
(
ãmp_off£t
);

3729 #ifde‡
DRAM_BUF


3730 
	gd_node1
.
	g√xt_off£t_ig
 = 
ãmp_off£t
;

3732 
¡256
((*)
cuºít_node1_d©a
,(*)&
d_node1
,(
Node
));

3734 
	gcuºít_node1_d©a
->
	g√xt_off£t_ig
 = 
ãmp_off£t
;

3737 
	gcuºít_node1_mëa
->
	g√xt_off£t_ig
 = 
ãmp_off£t
;

3741 
	gãmp_mëa
->
	g∑π
 = 
cuºít_node1_mëa
->
∑π
+1;

3744 
	gãmp_mëa
->
	g°¨t_off£t
 = 
√w_node1_off£t
.
no
;

3745 
	gãmp_mëa
->
	göv_˙t
=0;

3746 #ifde‡
DOUBLE_LOG


3747 
	gãmp_mëa
->
	gÊush_˙t
=0;

3750 
	gcuºít_node1_off£t
 = 
ãmp_off£t
;

3751 
	gcuºít_node1_mëa
 = 
ãmp_mëa
;

3752 
	gcuºít_node1_d©a
 = 
off£t_to_node_d©a
(
ãmp_off£t
);

3753 #ifde‡
DRAM_BUF


3754 
	gbuf„r1
 = 
d_node1
.
buf„r
;

3756 
	gbuf„r1
 = 
cuºít_node1_d©a
->
buf„r
;

3758 
	gbuf„r1_íd
 = 
buf„r1
+
NODE_BUFFER
;

3761 #ifde‡
DRAM_BUF


3762 
mem˝y
(
buf„r1
,
buf„r
,
kvs
);

3764 
pmem_mem˝y
(
buf„r1
,
buf„r
,
kvs
,
PMEM_F_MEM_NODRAIN
);

3769 
	gvó
[
tc
].
	gnode_off£t
 = 
cuºít_node1_off£t
;

3770 #ifde‡
DRAM_BUF


3771 
	gvó
[
tc
].
	gkv_off£t
 = 
buf„r1
-(*)&
d_node1
;

3773 
	gvó
[
tc
].
	gkv_off£t
 = 
buf„r1
-(*)
cuºít_node1_d©a
;

3776 
	gvó
[
tc
].
	gÀn
 = 
vl16
;

3777 
	gbuf„r1
+=
kvs
;

3778 
	gtc
++;

3794 
	gbuf„r
+=
kvs
;

3796 #ifde‡
DOUBLE_LOG


3798 
	gi
=0;i<
	gcuºít_node0_mëa
->
	gÊush_˙t
;i++)

3800 
	gkvp
 = 
cuºít_node0_mëa
->
Êush_kv
[
i
];

3802 
	gvl16
 = *((
uöt16_t
*)
kvp
);

3803 i‡((
	gvl16
 & 
	gINV_BIT
))

3805 
	gkvs
 = 
LK_SIZE
+
vl16
;

3806 i‡(
	gkvs
%2)

3807 ++
	gkvs
;

3810 
	gãmp_key
[
tc
] = *((
uöt64_t
*)(
kvp
+
PH_LEN_SIZE
));

3811 i‡(
	gbuf„r1
+
	gkvs
+
	gPH_LEN_SIZE
 > 
	gbuf„r1_íd
)

3813 
	gbuf„r1
[0] = 
buf„r1
[1] = 0;

3814 
	gcuºít_node1_mëa
->
	gsize
 = 
buf„r1
-
cuºít_node1_d©a
->
buf„r
;

3815 
	gcuºít_node1_mëa
->
	gÊush_size
=0;

3817 
	g√w_node1
->
	ggroup_size
+=
cuºít_node1_mëa
->
size
;

3820 
Node_off£t
 
	gãmp_off£t
;

3821 
	gãmp_off£t
 = 
Æloc_node
(
cuºít_node1_mëa
->
∑π
+1);

3822 
Node_mëa
* 
	gãmp_mëa
 = 
off£t_to_node
(
ãmp_off£t
);

3824 
	gcuºít_node1_d©a
->
	g√xt_off£t_ig
 = 
ãmp_off£t
;

3825 
	gcuºít_node1_mëa
->
	g√xt_off£t_ig
 = 
ãmp_off£t
;

3826 
pmem_≥rsi°
(
cuºít_node1_d©a
,(
Node
));

3830 
	gãmp_mëa
->
	g∑π
 = 
cuºít_node1_mëa
->
∑π
+1;

3833 
	gãmp_mëa
->
	g°¨t_off£t
 = 
√w_node1_off£t
.
no
;

3834 
	gãmp_mëa
->
	göv_˙t
=0;

3835 
	gãmp_mëa
->
	gÊush_˙t
=0;

3837 
	gcuºít_node1_off£t
 = 
ãmp_off£t
;

3838 
	gcuºít_node1_mëa
 = 
ãmp_mëa
;

3839 
	gcuºít_node1_d©a
 = 
off£t_to_node_d©a
(
ãmp_off£t
);

3841 
	gbuf„r1
 = 
cuºít_node1_d©a
->
buf„r
;

3842 
	gbuf„r1_íd
 = 
buf„r1
+
NODE_BUFFER
;

3846 
mem˝y
(
buf„r1
,
kvp
,
kvs
);

3848 *((
	guöt16_t
*)
	gkvp
Ë|
INV_BIT
;

3851 
	gvó
[
tc
].
	gnode_off£t
 = 
cuºít_node1_off£t
;

3852 
	gvó
[
tc
].
	gkv_off£t
 = 
buf„r1
-(*)
cuºít_node1_d©a
;

3854 
	gvó
[
tc
].
	gÀn
 = 
vl16
;

3855 
	gbuf„r1
+=
kvs
;

3856 
	gtc
++;

3861 i‡(
	gcuºít_node0_off£t
 =
node
->
íd_off£t
)

3863 
	gcuºít_node0_off£t
 = 
√xt_off£t0
;

3866 
	gbuf„r1
[0] = 
buf„r1
[1] = 0;

3869 
uöt16_t
* 
	gãmp_kv
;

3870 
uöt16_t
 
	gãmp_max
;

3871 
	gãmp_kv
 = 
node
->
öv_kv
;

3872 
	gnode
->
	göv_kv
 = 
√w_node1
->
öv_kv
;

3873 
	g√w_node1
->
	göv_kv
 = 
ãmp_kv
;

3874 
	gãmp_max
 = 
node
->
öv_max
;

3875 
	gnode
->
	göv_max
 = 
√w_node1
->
öv_max
;

3876 
	g√w_node1
->
	göv_max
 = 
ãmp_max
;

3877 #ifde‡
DOUBLE_LOG


3878 ** 
	gãmp_Êush
;

3879 
	gãmp_Êush
 = 
node
->
Êush_kv
;

3880 
	gnode
->
	gÊush_kv
 = 
√w_node1
->
Êush_kv
;

3881 
	g√w_node1
->
	gÊush_kv
 = 
ãmp_Êush
;

3882 
	gãmp_max
 = 
node
->
Êush_max
;

3883 
	gnode
->
	gÊush_max
 = 
√w_node1
->
Êush_max
;

3884 
	g√w_node1
->
	gÊush_max
 = 
ãmp_max
;

3889 
	g√w_node1
->
	gíd_off£t
 = 
cuºít_node1_off£t
;

3890 #ifde‡
DOUBLE_LOG


3891 
	gcuºít_node1_mëa
->
	gÊush_size
 = 0;

3894 #ifde‡
DRAM_BUF


3895 
	gd_node1
.
	g√xt_off£t_ig
 = 
INIT_OFFSET
;

3897 
¡256
((*)
cuºít_node1_d©a
,(*)&
d_node1
,(
Node
));

3898 
	gcuºít_node1_mëa
->
	gsize
 = 
buf„r1
-
d_node1
.
buf„r
;

3901 
	gcuºít_node1_d©a
->
	g√xt_off£t_ig
 = 
INIT_OFFSET
;

3902 
	gcuºít_node1_mëa
->
	gsize
 = 
buf„r1
-
cuºít_node1_d©a
->
buf„r
;

3905 
	g√w_node1
->
	ggroup_size
+=
cuºít_node1_mëa
->
size
;

3907 #i‚de‡
DRAM_BUF


3908 
pmem_døö
();

3911 
_mm_s„n˚
();

3913 
	g√xt_node
->
	g¥ev_off£t
 = 
√w_node1_off£t
.
no_32
;

3914 
	g¥ev_node
->
	g√xt_off£t
 = 
√w_node1_off£t
.
no_32
;

3917 
pmem_mem˝y
(
off£t_to_node_d©a
(
¥ev_off£t
.
no
 ),&
√w_node1_off£t
,(),
PMEM_F_MEM_NONTEMPORAL
);

3919 
_mm_s„n˚
();

3929 i‡(!
	gUSE_DRAM
)

3942 
pmem_≥rsi°
(
√w_node1_d©a
,()+
√w_node1
->
size
);

3943 
_mm_s„n˚
();

3944 
Êush_mëa
(
√w_node1
->
¥ev_off£t
);

3945 
_mm_s„n˚
();

3956 
	gi
=0;i<
	gtc
;i++)

3957 
ö£π_poöt_íåy
((*)&
ãmp_key
[
i
],
vó
[i]);

3959 i‡(
	g¥öt
)

3960 
¥ötf
("rehash\n");

3964 
	gbuf„r
 = 
node1_d©a
->
buf„r1
;

3966 
	gbuf„r
 < 
	gbe
)

3970 
	gvÆue_Àn
 = *((
uöt16_t
*)(
buf„r
));

3972 i‡((
	gvÆue_Àn
 & (1 << 15)) == 0)

3986 
ö£π_poöt_íåy
(
buf„r
+
cur
,
√w_node1_d©a
->buf„r+
size1
);

3987 
	gsize1
+
key_size
 + 
Àn_size
 + 
vÆue_Àn
;

3990 
	gvÆue_Àn
 -= (1 << 15);

3991 
	gcur
+=
key_size
+
Àn_size
+
vÆue_Àn
;

4000 
ö£π_ønge_íåy
((*)
node_d©a
->
buf„r
+
PH_LEN_SIZE
 ,
c⁄töue_Àn
,
√w_node1_off£t
.
no
);

4002 
	g√w_node1
->
	gc⁄töue_Àn
 = 
c⁄töue_Àn
;

4006 
_mm_s„n˚
();

4008 
	g√w_node1
->
	g°©e
 = 0;

4011 
	gi
=0;i<
	goc
;i++)

4012 
‰ì_node
(
ãmp_off£t
[
i
]);

4014 #ifde‡
dâ


4015 
_mm_m„n˚
();

4016 
˛ock_gëtime
(
CLOCK_MONOTONIC
,&
ts2
);

4017 
	gâ3
+=(
ts2
.
tv_£c
-
ts1
.tv_£c)*1000000000+ts2.
tv_n£c
-ts1.tv_nsec;

4031 
adv™˚
(** 
kv_µ
,* 
off£t
,
Node
* 
node_p
)

4033 
uöt16_t
 
	gsize
;

4034 
	gﬁd_off£t
,
	g√w_off£t
,
	göv
;

4039 
	göv
 = 0;

4040 
	gsize
 = *((
uöt16_t
*)(*
kv_µ
+
key_size
));

4041 i‡(
	gsize
 & (1 << 15))

4043 
	göv
 = 1;

4044 
	gsize
-=(1<<15);

4046 *
	gkv_µ
+=
size
+
key_size
+
Àn_size
;

4047 i‡(*
	gkv_µ
 >
node_p
->
buf„r
+node_p->
size
)

4049 i‡(
	göv
 == 0)

4053 
	gﬁd_off£t
 = *
off£t
;

4056 
	g√w_off£t
 = 
off£t_to_node
(
ﬁd_off£t
)->
√xt_off£t
;

4057 i‡(
	g√w_off£t
 =
TAIL_OFFSET
)

4059 *
off£t
 = 
TAIL_OFFSET
;

4060 
dec_ªf
(
ﬁd_off£t
);

4061 *
	gkv_µ
 = 
NULL
;

4064 i‡(
öc_ªf
(
√w_off£t
,0))

4066 
c›y_node
(
node_p
,
off£t_to_node
(
√w_off£t
));

4070 
dec_ªf
(
ﬁd_off£t
);

4071 *
	goff£t
 = 
√w_off£t
;

4072 *
	gkv_µ
 = 
node_p
->
buf„r
;

4077 
dñëe_sˇn_íåy
(
Node_off£t
 &
sˇn_off£t
,* 
quîy
)

4079 
Node_mëa
* 
	gnode
;

4080 
Sˇn_li°
* 
	g¶
;

4081 
Sˇn_li°
** 
	g¶p
;

4082 
	gnode
 = 
off£t_to_node
(
sˇn_off£t
);

4083 
	g¶
 = 
node
->
sˇn_li°
;

4084 
	g¶p
 = &(
node
->
sˇn_li°
);

4085 
	g¶
 !
NULL
)

4087 i‡(
¶
->
quîy
 == query)

4090 *
¶p
 = 
¶
->
√xt
;

4091 
‰ì
(
¶
);

4094 
	g¶p
 = &(
¶
->
√xt
);

4095 
	g¶
 = 
¶
->
√xt
;

4099 
adv™˚_off£t
(
Quîy
* 
quîy
)

4101 
Node_off£t_u
 
	gﬁd_off£t
,
	g√w_off£t
;

4102 
	göv
;

4103 
Node_mëa
* 
	gnode
;

4104 
Node_mëa
* 
	g√xt_node
;

4111 
	gﬁd_off£t
.
	gno_32
 = 
quîy
->
sˇn_off£t
;

4112 
	gnode
 = 
off£t_to_node
(
ﬁd_off£t
.
no
);

4129 i‡(
åy_©_lock
(
node
->
°©e
) == 0)

4132 
	g√w_off£t
.
	gno_32
 = 
node
->
√xt_off£t
;

4134 i‡(
	g√w_off£t
.
	gno
 =
TAIL_OFFSET
)

4136 
dñëe_sˇn_íåy
(
ﬁd_off£t
.
no
,
quîy
);

4138 
©_u∆ock
(
node
->
°©e
);

4139 
	gquîy
->
	gsˇn_off£t
 = 
TAIL_OFFSET_u
.
no_32
;

4150 
	g√xt_node
 = 
off£t_to_node
(
√w_off£t
.
no
);

4152 i‡(
åy_©_lock
(
√xt_node
->
°©e
) )

4166 
Sˇn_li°
* 
	g¶
;

4167 
Sˇn_li°
** 
	g¶p
;

4169 
	g¶
 = 
node
->
sˇn_li°
;

4170 
	g¶p
 = &(
node
->
sˇn_li°
);

4171 
	g¶
)

4173 i‡(
	g¶
->
	gquîy
 =
quîy
)

4175 *
¶p
 = 
¶
->
√xt
;

4178 
	g¶p
 = &(
¶
->
√xt
);

4179 
	g¶
 = 
¶
->
√xt
;

4185 
	g¶
->
	g√xt
 = 
√xt_node
->
sˇn_li°
;

4186 
	g√xt_node
->
	gsˇn_li°
 = 
¶
;

4188 
	gquîy
->
	gsˇn_off£t
 = 
√w_off£t
.
no_32
;

4210 
c›y_™d_s‹t_node
(
quîy
);

4211 
©_u∆ock
(
node
->
°©e
);

4220 
©_u∆ock
(
√xt_node
->
°©e
);

4233 
adv™˚_off£t
(* 
quîy
)

4235  
adv™˚_off£t
((
Quîy
*)
quîy
);

4248 
c›y_™d_s‹t_node
(
Quîy
 *
quîy
)

4250 
Node
* 
	gnode_d©a
 = (Node*)
quîy
->
node_d©a
;

4251 
Node_off£t
 
	gnode_off£t
;

4252 
Node_mëa
* 
	gnode_mëa
;

4253 
Node_off£t
 
	gíd_off£t
;

4254 
	gi
 = 0;

4255 
	g∑π
;

4256 
	gnode_size
[100*
PART_MAX
];

4257 
Node_off£t_u
 
	gnou
;

4258 
	gnou
.
	gno_32
 = 
quîy
->
sˇn_off£t
;

4259 
	gnode_off£t
 = 
nou
.
no
;

4261 
	gnode_mëa
 = 
off£t_to_node
(
node_off£t
);

4262 
	gíd_off£t
 = 
node_mëa
->
íd_off£t
;

4263 
	gmëa_size
 = (*)
node_d©a
->
buf„r
-(*)node_data;

4267 
	gnode_size
[
i
] = 
off£t_to_node
(
node_off£t
)->
size
;

4268 
mem˝y
(&
node_d©a
[
i
],
off£t_to_node_d©a
(
node_off£t
),
node_size
[i]+
mëa_size
);

4270 i‡(
	gnode_off£t
 =
íd_off£t
)

4273 
	gnode_off£t
 = 
off£t_to_node
(
node_off£t
)->
√xt_off£t_ig
;

4274 
	gi
++;

4276 
	g∑π
 = 
i
+1;

4282 * 
	gkv
;

4283 
uöt16_t
 
	gv_size
;

4286 
	gquîy
->
	gs‹ãd_kv_max
 = 0;

4287 
	gquîy
->
	gs‹ãd_kv_i
 = 0;

4288 
	gj
;

4290 * 
	gnode_íd
;

4292 
	gj
 = 0;

4293 i‡(
	gnode_mëa
->
	göv_max
 == 0)

4294 
node_mëa
->
öv_kv
 = 0;

4295 
	gi
=0;i<
	g∑π
;i++)

4297 
	gnode_d©a
 = &(((
Node
*)
quîy
->
node_d©a
)[
i
]);

4298 
	gkv
 = 
node_d©a
->
buf„r
;

4299 
	gnode_íd
 = (*)
node_d©a
+
node_size
[
i
];

4301 
	gkv
 < 
	gnode_íd
)

4303 
	gv_size
 = *((
uöt16_t
*)(
kv
));

4304 i‡(
	gv_size
 & 
	gINV_BIT
)

4305 
	gv_size
-=
INV_BIT
;

4306 i‡(
	gkv
-(*)
	gnode_d©a
 =
node_mëa
->
öv_kv
[
j
])

4308 
j
++;

4309 i‡(
	gj
 =
node_mëa
->
öv_max
)

4310 
j
 = 0;

4313 
	gquîy
->
	gs‹ãd_kv
[(
quîy
->
s‹ãd_kv_max
)++] = 
kv
;

4314 
	gkv
+=
LK_SIZE
+
v_size
;

4335 
ö£π_sˇn_li°
(
Node_off£t
 &
node_off£t
,* 
quîy
)

4337 
Node_mëa
* 
	gnode
 = 
off£t_to_node
(
node_off£t
);

4338 
Sˇn_li°
* 
	g¶
;

4339 
	g¶
 = (
Sˇn_li°
*)
mÆloc
((Scan_list));

4340 
	g¶
->
	gquîy
 = 
quîy
;

4341 
	g¶
->
	g√xt
 = 
node
->
sˇn_li°
;

4342 
	gnode
->
	gsˇn_li°
 = 
¶
;

4350 
övÆid©e_kv
(
VÆueE¡ry
& 
ve
)

4353 
Node_mëa
* 
	gmëa
;

4355 #ifde‡
DOUBLE_LOG


4356 i‡(
	gve
.
	gnode_off£t
.
	gfûe
 & 
	gLOG_BIT
)

4358 * 
	gkvp
;

4360 
	gkvp
 = (*)
off£t_to_node_d©a
(
ve
.
node_off£t
)+ve.
kv_off£t
;

4361 *((
	guöt16_t
*)
	gkvp
Ë|
INV_BIT
;

4364 
Node_off£t
 
	gnode_off£t
;

4365 
	gnode_off£t
 = *(
Node_off£t
*)(
kvp
+
PH_LEN_SIZE
 +
key_size
+
ve
.
Àn
);

4366 
	gmëa
 = 
off£t_to_node
(
node_off£t
);

4367 
off£t_to_node
(
mëa
->
°¨t_off£t
)->
	gövÆid©ed_size
+=
ve
.
Àn
+
LK_SIZE
;

4379 
	gmëa
 = 
off£t_to_node
(
ve
.
node_off£t
);

4380 i‡(
	gmëa
->
	göv_˙t
+1 =
mëa
->
öv_max
)

4382 
mëa
->
öv_max
*=2;

4383 
	gmëa
->
	göv_kv
 = (
uöt16_t
*)
ªÆloc
(
mëa
->
öv_kv
,(uöt16_t)*mëa->
öv_max
);

4386 
	gmëa
->
	göv_kv
[
mëa
->
öv_˙t
++] = 
ve
.
kv_off£t
;

4387 
off£t_to_node
(
mëa
->
°¨t_off£t
)->
	gövÆid©ed_size
+=
ve
.
Àn
+
LK_SIZE
;

4388 i‡(
	gve
.
	gÀn
%2)

4389 
off£t_to_node
(
mëa
->
°¨t_off£t
)->
	gövÆid©ed_size
++;

4395 
•lô_‹_com∑˘
(
Node_off£t
 
node_off£t
)

4397 
Node_mëa
* 
	gmëa
;

4398 
	gmëa
 = 
off£t_to_node
(
node_off£t
);

4402  
	gmëa
->
	ggroup_size
 > mëa->
	gövÆid©ed_size
*2;

4420 #ifde‡
DOUBLE_LOG


4421 
Êush
(
Node_off£t
 
node_off£t
)

4423 
Node_mëa
* 
	gmëa
;

4424 
Node
* 
	gnode_d©a
;

4425 
	gmëa
 = 
off£t_to_node
(
node_off£t
);

4426 
	gnode_d©a
 = 
off£t_to_node_d©a
(
node_off£t
);

4427 i‡(
	gmëa
->
	g∑π
 =
PART_MAX
-1)

4429 
Node_off£t
 
°¨t_off£t
 = 
gë_°¨t_off£t
(
node_off£t
);

4430 i‡(
•lô_‹_com∑˘
(
°¨t_off£t
))

4433 i‡–
•lô
(
°¨t_off£t
) == -1)

4442 i‡–
com∑˘
(
°¨t_off£t
) == -1)

4449 
	gi
,
	gsize
;

4450 * 
	gkvp
;

4451 * 
	gbuf„r
;

4452 
uöt16_t
 
	gvl16
;

4454 
	gbuf„r
 = 
node_d©a
->
buf„r
+
mëa
->
size
;

4463 
uöt16_t
 
	gfú°_vl16
=0;

4469 
VÆueE¡ry
 
	gve
;

4470 
	gve
.
	gnode_off£t
 = 
node_off£t
;

4471 
	gi
=0;i<
	gmëa
->
	gÊush_˙t
;i++)

4476 
	gkvp
 = 
mëa
->
Êush_kv
[
i
];

4478 
	gvl16
 = *((
uöt16_t
*)
kvp
);

4479 i‡–(
	gvl16
 & 
	gINV_BIT
))

4485 
	gsize
 = 
LK_SIZE
+
vl16
;

4486 i‡(
	gfú°_vl16
)

4488 
mem˝y
(
buf„r
,
kvp
,
size
);

4492 
mem˝y
(
buf„r
+
PH_LEN_SIZE
 ,
kvp
+PH_LEN_SIZE ,
size
-PH_LEN_SIZE );

4493 
	gfú°_vl16
 = *((
uöt16_t
*)
kvp
);

4495 
	gve
.
	gkv_off£t
 = 
buf„r
-(*)
node_d©a
;

4496 
	gve
.
	gÀn
 = 
vl16
;

4497 
ö£π_poöt_íåy
((*)
kvp
+
PH_LEN_SIZE
 ,
ve
);

4498 
_mm_s„n˚
();

4499 *((
	guöt16_t
*)
	gkvp
Ë|
INV_BIT
;

4500 i‡(
	gsize
%2)

4501 
	gsize
++;

4502 
	gbuf„r
+=
size
;

4511 
	gbuf„r
[0] = 0;

4512 
	gbuf„r
[1] = 0;

4513 
pmem_≥rsi°
(
node_d©a
->
buf„r
+
mëa
->
size
,buf„r-“ode_d©a->buf„r+mëa->sizeË+ 
PH_LEN_SIZE
);

4516 
_mm_s„n˚
();

4519 
pmem_mem˝y
(
node_d©a
->
buf„r
+
mëa
->
size
,&
fú°_vl16
,
PH_LEN_SIZE
 ,
PMEM_F_MEM_NONTEMPORAL
);

4522 
_mm_s„n˚
();

4524 
	gmëa
->
	gsize
 = 
buf„r
-
node_d©a
->buffer;

4526 
	gmëa
->
	gÊush_˙t
 = 0;

4527 
	gmëa
->
	gÊush_size
 = 0;

4532 
Êush
(
Node_off£t
 
node_off£t
)

4556 
	g°d
::
©omic
<> 
•lô_queue_°¨t
[
SPLIT_NUM
];

4557 
	g°d
::
©omic
<> 
•lô_queue_íd
[
SPLIT_NUM
];

4558 
	g°d
::
©omic
<
Node_off£t
> 
•lô_queue
[
SPLIT_NUM
][
SPLIT_QUEUE_LEN
];

4559 
	g°d
::
©omic
<
uöt8_t
> 
•lô_queue_lock
[
SPLIT_NUM
];

4561 #ifde‡
idÀ_thªad


4563 
thªad_loˇl
 
PH_Thªad
* 
my_thªad
;

4564 
	#THREAD_RUN
 
my_thªad
->
ru¬ög
=1;

	)

4565 
	#THREAD_IDLE
 
my_thªad
->
ru¬ög
=0;

	)

4569 
	#THREAD_RUN


	)

4570 
	#THREAD_IDLE


	)

4574 #ifde‡
•lô_thªad


4575 * 
•lô_w‹k
(* 
iid
)

4577 
	gi
,
	gid
 = *((*)
iid
);

4578 
Node_off£t
 
	gnode_off£t
;

4580 
upd©e_‰ì_˙t
();

4583 
upd©e_‰ì_˙t
();

4584 
	g•lô_queue_°¨t
[
id
] < 
	g•lô_queue_íd
[id])

4586 
THREAD_RUN


4587 
upd©e_‰ì_˙t
();

4588 
	gi
 = 
•lô_queue_°¨t
[
id
].
„tch_add
(1);

4589 
	gnode_off£t
 = 
•lô_queue
[
id
][
i
%
SPLIT_QUEUE_LEN
];

4592 i‡(
åy_•lô
(
node_off£t
) == 0)

4595 i‡(
•lô_‹_com∑˘
(
node_off£t
))

4597 i‡(
•lô2p
(
node_off£t
) < 0)

4598 
dec_ªf
(
node_off£t
);

4602 i‡(
com∑˘2p
(
node_off£t
) < 0)

4603 
dec_ªf
(
node_off£t
);

4607 
	gTHREAD_IDLE


4609 
u¶ìp
(1);

4611 i‡(
	g•lô_queue_íd
[
id
] == -1)

4614 
˛ón_thªad_loˇl
();

4615  
	gNULL
;

4618 
thªad_loˇl
 
	g•lô_ödex
=0;

4619 
add_•lô
(
Node_off£t
 
node_off£t
)

4622 
	gj
;

4623 
	gj
=0;j<
	gnum_of_•lô
;j++)

4625 
	g•lô_ödex
++;

4626 i‡(
	g•lô_ödex
>=
num_of_•lô
)

4627 
•lô_ödex
 = 0;

4630 i‡(
	g•lô_queue_íd
[
•lô_ödex
] - 
	g•lô_queue_°¨t
[•lô_ödex] < 
	gSPLIT_MAX
 && 
åy_©_lock
(
•lô_queue_lock
[split_index]))

4634 
Node_mëa
* 
	gmëa
 = 
off£t_to_node
(
node_off£t
);

4635 
	gmëa
->
	g°©e
 = 2;

4636 
	g•lô_queue
[
•lô_ödex
][
•lô_queue_íd
[•lô_ödex]%
	gSPLIT_QUEUE_LEN
] = 
node_off£t
;

4637 
	g•lô_queue_íd
[
•lô_ödex
]++;

4638 
	g•lô_queue_lock
[
•lô_ödex
] = 0;

4639 
	g•lô_ödex
++;

4648 
öô_•lô
()

4650 
	gi
;

4651 
	gi
=0;i<
	gnum_of_•lô
;i++)

4652 
	g•lô_queue_lock
[
i
] = 
•lô_queue_°¨t
[i] = 
•lô_queue_íd
[i] = 0;

4655 
˛ón_•lô
()

4657 
	gi
;

4658 
	gi
=0;i<
	gnum_of_•lô
;i++)

4660 
¥ötf
("•lôÅhªad %d qê%d\n",
i
,()
•lô_queue_íd
[i]);

4661 
	g•lô_queue_íd
[
i
] = -1;

4666 
sˇn_node
(
Node_off£t
 
off£t
,* 
key
,
ªsu…_ªq
,
°d
::
°rög
* 
sˇn_ªsu…
)

4670 
uöt64_t
 
ãmp_key
[100*
PART_MAX
],
	gtk
;

4672 * 
	gãmp_off£t
[100*
PART_MAX
], *
	gto
;

4673 
	gtc
=0;

4675 
	g˙t
=0;

4676 
uöt64_t
 
	g°¨t_key
 = *(uöt64_t*)
key
;

4679 * 
	gbuf„r
;

4680 * 
	gbuf„r_íd
;

4682 
Node
* 
	gnode_d©a
;

4683 
Node_mëa
* 
	gnode_mëa
;

4694 
	g∑π0
=0;

4695 c⁄° 
	gmëa_size
 = 
d0
[0].
buf„r
-(*)&d0[0];

4697 
Node_off£t
 
	gnode_off£t
 = 
off£t
;

4718 
	gnode_off£t
 = 
off£t
;

4722 
	gnode_mëa
 = 
off£t_to_node
(
node_off£t
);

4723 
	gnode_d©a
 = 
off£t_to_node_d©a
(
node_off£t
);

4725 
˝256
((*)&
d0
[
∑π0
],(*)
node_d©a
,
node_mëa
->
size
 + 
mëa_size
);

4728 
	g∑π0
++;

4732 
	gnode_off£t
 = 
node_mëa
->
√xt_off£t_ig
;

4733 i‡(
	gnode_off£t
 =
INIT_OFFSET
)

4745 
	gi
,
	gj
,
	gk
;

4746 
uöt16_t
 
	gsize
;

4749 
	gnode_off£t
 = 
off£t
;

4751 
	gi
 = 0;

4755 
	gnode_mëa
 = 
off£t_to_node
(
node_off£t
);

4756 
	gnode_d©a
 = &
d0
[
i
];

4757 
	gbuf„r
 = 
node_d©a
->
buf„r
;

4758 
	gbuf„r_íd
 = 
buf„r
 + 
node_mëa
->
size
;

4759 
s‹t_öv
(
node_mëa
->
öv_˙t
,node_mëa->
öv_kv
);

4760 
	gj
 = 0;

4761 
	gnode_mëa
->
	göv_kv
[
node_mëa
->
öv_˙t
] = 0;

4763 
	gbuf„r
 < 
	gbuf„r_íd
)

4765 
	gsize
 = *((
uöt16_t
*)
buf„r
);

4766 i‡(((*)
	gnode_d©a
 + 
	gnode_mëa
->
	göv_kv
[
j
] =
buf„r
) )

4768 
j
++;

4769 
	gsize
&~(
INV_BIT
);

4773 
	gãmp_key
[
tc
] = *((
uöt64_t
*)(
buf„r
+
PH_LEN_SIZE
));

4775 
	gãmp_off£t
[
tc
] = 
buf„r
;

4776 
	gtc
++;

4778 
	gbuf„r
+=
size
+
LK_SIZE
;

4788 
	gnode_off£t
 = 
node_mëa
->
√xt_off£t_ig
;

4789 i‡(
	gnode_off£t
 =
INIT_OFFSET
)

4791 
	gi
++;

4796 
	gj
=0;j<
	gtc
;j++)

4798 
	gk
=
j
+1;k<
	gtc
;k++)

4800 i‡(
	gãmp_key
[
j
] >Åemp_key[
k
])

4802 
	gtk
 = 
ãmp_key
[
j
];

4803 
	gãmp_key
[
j
] = 
ãmp_key
[
k
];

4804 
	gãmp_key
[
k
] = 
tk
;

4805 
	gto
 = 
ãmp_off£t
[
j
];

4806 
	gãmp_off£t
[
j
] = 
ãmp_off£t
[
k
];

4807 
	gãmp_off£t
[
k
] = 
to
;

4812 
	gi
=0;i<
	gtc
;i++)

4814 i‡(
	g°¨t_key
 > 
	gãmp_key
[
i
])

4816 
	gsˇn_ªsu…
[
˙t
].
assign
((*)(
ãmp_off£t
[
i
]),*(
uöt16_t
*Èemp_off£t[i] + 
LK_SIZE
);

4817 
	g˙t
++;

4818 i‡(
	gªsu…_ªq
 <
˙t
)

4823  
	g˙t
;

	@/home/cgmin/pmem/ph/ph/data.h

3 
	~<±hªad.h
>

4 
	~<©omic
>

5 
	~<sys/mm™.h
>

7 
	~"globÆ.h
"

8 
	~"quîy.h
"

10 
«me•a˚
 
	gPH


13 vﬁ©ûê
fûe_num
;

15 
	sNode


29 
Node_off£t
 
	g√xt_off£t
;

31 
Node_off£t
 
	g√xt_off£t_ig
;

34 
uöt16_t
 
	gc⁄töue_Àn
;

35 
	g∑ddög
[8-2];

37 
	gbuf„r
[
NODE_BUFFER
];

42 
	sNode_mëa


49 vﬁ©ûê
uöt32_t
 
	g√xt_off£t
;

51 
Node_off£t
 
	g√xt_off£t_ig
;

53 vﬁ©ûê
uöt32_t
 
	g¥ev_off£t
;

55 
Node_off£t
 
	g°¨t_off£t
;

56  
Node_off£t
 
	gíd_off£t
;

58 
	g°d
::
©omic
<
uöt8_t
> 
°©e
;

59 
uöt8_t
 
	g∑π
;

61 
uöt16_t
 
	gc⁄töue_Àn
;

69  
uöt16_t
 
	gsize
;

70 
uöt16_t
 
	gövÆid©ed_size
;

71 
uöt16_t
 
	ggroup_size
;

89 
Sˇn_li°
* 
	gsˇn_li°
;

93 
uöt16_t
* 
	göv_kv
;

94 
uöt16_t
 
	göv_˙t
;

95 
uöt16_t
 
	göv_max
;

97 #ifde‡
DOUBLE_LOG


98 
uöt16_t
 
	gÊush_size
;

100 
uöt16_t
 
	gÊush_˙t
;

101 
uöt16_t
 
	gÊush_max
;

102 ** 
	gÊush_kv
;

104 
	g∑ddög
[8];

108 ** 
mëa_addr
;

109 
Node_mëa
** 
mëa_¨øy
;

110 ** 
pmem_addr
;

111 
Node
** 
node_d©a_¨øy
;

113 
	#FILE_SIZE
 (
Node
)*(1<<16)

	)

114 
	#META_SIZE
 (
Node_mëa
)*(1<<16)

	)

115 
	#MAX_FILE_NUM
 (1 << 16)

	)

116 
	#MAX_OFFSET
 (1 << 16)

	)

118 
öô_fûe
();

119 
öô_d©a
();

120 
˛ón_d©a
();

141 
ölöe
 
Node_mëa
* 
off£t_to_node
(
Node_off£t
 &
off£t
)

143  &
	gmëa_¨øy
[
off£t
.
fûe
][offset.offset];

147 
ölöe
 
Node
* 
off£t_to_node_d©a
(
Node_off£t
 &
off£t
)

149  (
	gNode
*)(
	gpmem_addr
[
off£t
.
fûe
] + (NodeË* 
	goff£t
.offset);

172 
dñëe_kv
(* 
kv_p
);

174 * 
ö£π_kv
(
Node_off£t
& 
off£t
,* 
key
,* 
vÆue
,
vÆue_Àngth
);

175 
•lô
(
Node_off£t
 
off£t
);

176 
•lô2p
(
Node_off£t
 
off£t
);

179 
com∑˘
(
Node_off£t
 
off£t
);

180 
com∑˘2p
(
Node_off£t
 
off£t
);

182 
Êush
(
Node_off£t
 
off£t
);

183 
Node_off£t
 
≠≥nd_node
(Node_off£t& 
off£t
);

186 
¥öt_kv
(* 
kv_p
);

190 
adv™˚_off£t
(
Quîy
 *
quîy
);

194 
c›y_™d_s‹t_node
(
Quîy
 *
quîy
);

195 
ö£π_sˇn_li°
(
Node_off£t
 &
node
,* 
quîy
);

196 
dñëe_sˇn_íåy
(
Node_off£t
 &
sˇn_off£t
,* 
quîy
);

198 
©_lock
(
°d
::
©omic
<
uöt8_t
> &
lock
);

199 
ölöe
 
©_u∆ock
(
°d
::
©omic
<
uöt8_t
> &
lock
)

201 
lock
 = 0;

203 
ölöe
 
åy_©_lock
(
°d
::
©omic
<
uöt8_t
> &
lock
)

205 
uöt8_t
 
z
 = 0;

206  
	glock
.
com∑ª_exch™ge_°r⁄g
(
z
,1);

210 
övÆid©e_kv
(
VÆueE¡ry
& 
ve
);

211 
•lô_‹_com∑˘
(
Node_off£t
 
node_off£t
);

212 
ölöe
 
gë_c⁄töue_Àn
(
Node_off£t
 
node_off£t
)

214  
off£t_to_node
(
node_off£t
)->
	gc⁄töue_Àn
;

217 
ölöe
 
Node_off£t
 
gë_°¨t_off£t
(Node_off£t& 
node_off£t
)

219  
off£t_to_node
(
node_off£t
)->
	g°¨t_off£t
;

221 
ölöe
 
move_to_íd_off£t
(
Node_off£t
& 
node_off£t
)

223 
	gnode_off£t
 = 
off£t_to_node
(
node_off£t
)->
íd_off£t
;

226 
ölöe
 
öc_ªf
(
Node_off£t
 
off£t
)

228  
åy_©_lock
(
off£t_to_node
(
off£t
)->
°©e
);

230 
ölöe
 
dec_ªf
(
Node_off£t
 
off£t
)

232 
©_u∆ock
(
off£t_to_node
(
off£t
)->
°©e
);

237 #ifde‡
•lô_thªad


238 
ölöe
 
åy_•lô
(
Node_off£t
 
off£t
)

240 
uöt8_t
 
	gt
=2;

241 
Node_mëa
* 
	gmëa
 = 
off£t_to_node
(
off£t
);

242  (
	gmëa
->
	g°©e
 =2Ë&& 
mëa
->
°©e
.
com∑ª_exch™ge_°r⁄g
(
t
,1);

244 * 
•lô_w‹k
(* 
id
);

245 
add_•lô
(
Node_off£t
 
node_off£t
);

246 
ölöe
 
√ed_•lô
(
Node_off£t
 
node_off£t
,
vÆue_Àn
)

248 
Node_mëa
* 
	gmëa
 = 
off£t_to_node
(
node_off£t
);

249  (
	gmëa
->
	g∑π
 =
PART_MAX
-1);

252 
öô_•lô
();

253 
˛ón_•lô
();

256 
sˇn_node
(
Node_off£t
 
off£t
,* 
key
,
ªsu…_ªq
,
°d
::
°rög
* 
sˇn_ªsu…
);

258 
öô_d©a_loˇl
();

259 
˛ón_thªad_loˇl
();

	@/home/cgmin/pmem/ph/ph/data2.cpp

1 
	~<°dio.h
>

2 
	~<sys/mm™.h
>

3 
	~<°dlib.h
>

4 
	~<x86öåö.h
>

5 
	~<libpmem.h
>

6 
	~<°rög.h
>

8 
	~"lock.h
"

9 
	~"d©a2.h
"

10 
	~"globÆ2.h
"

12 
«me•a˚
 
	gPH


15 
size_t
 
	gNODE_SLOT_MAX
;

17 
NodeAŒoˇt‹
* 
	gnodeAŒoˇt‹
;

19 
num_pmem
;

21 
	gNodeAŒoˇt‹
::
lökNext
(
NodeAddr
 
nodeAddr
)

23 
NodeMëa
* 
nm
 = 
nodeAddr_to_nodeMëa
(
nodeAddr
);

24 
Node
* 
	gpmem_node
 = 
nodeAddr_to_node
(
nodeAddr
);

25 
mem£t
(
pmem_node
,0,
NODE_SIZE
);

26 
¥ötf
("efefe\n");

27 
	gpmem_node
->
	g√xt_off£t
 = 
nm
->
√xt_p
->
my_off£t
;

28 
pmem_≥rsi°
(&
pmem_node
->
√xt_off£t
,(
NodeAddr
));

29 
_mm_s„n˚
();

30 
¥ötf
("xxxxx\n");

35 
	gNodeAŒoˇt‹
::
lökNext
(
NodeMëa
* 
nm1
,NodeMëa* 
nm2
)

37 
	gnm1
->
	g√xt_p
 = 
nm2
;

38 
D©aNode
* 
	gpmem_node
 = 
nodeAddr_to_node
(
nm1
->
my_off£t
);

39 
mem£t
(
pmem_node
,0,
NODE_SIZE
);

40 
	gpmem_node
->
	g√xt_off£t
 = 
nm2
->
my_off£t
;

41 
pmem_≥rsi°
(&
pmem_node
->
√xt_off£t
,(
NodeAddr
));

42 
_mm_s„n˚
();

46 
	gNodeAŒoˇt‹
::
öô
()

49 
NODE_SLOT_MAX
 = 
NODE_BUFFER_SIZE
 / 
ENTRY_SIZE
;

51 
	gnodeMëaPoﬁLi°
 = (**)
mÆloc
((*)*
POOL_MAX
);

52 
	gnodePoﬁLi°
 = (**)
mÆloc
((*)*
POOL_MAX
);

54 
	gpoﬁ_˙t
 = 0;

55 
	gnode_˙t
 = (*)
mÆloc
(()*
POOL_MAX
);

57 
	g‰ì_hód_p
 = 
NULL
;

58 
	gÆloc_˙t
 = 0;

63 
Æloc_poﬁ
();

72 
	gNodeAŒoˇt‹
::
˛ón
()

74 
i
;

75 
	gi
=0;i<
	gpoﬁ_˙t
;i++)

77 
munm≠
(
nodeMëaPoﬁLi°
[
i
],(
NodeMëa
)*
POOL_NODE_MAX
);

78 
pmem_unm≠
(
nodePoﬁLi°
[
i
],
POOL_SIZE
);

80 
‰ì
(
nodeMëaPoﬁLi°
);

81 
‰ì
(
nodePoﬁLi°
);

84 
	gNodeAŒoˇt‹
::
Æloc_poﬁ
()

86 i‡(
poﬁ_˙t
 + 
num_pmem
 > 
POOL_MAX
)

87 
¥ötf
("allocÖool max\n");

88 
	gi
;

89 
	gis_pmem
;

90 
	g∑th
[100];

91 
size_t
 
	gªq_size
,
	gmy_size
;

92 
	gªq_size
 = 
POOL_SIZE
;

93 
	gi
=0;i<
	gnum_pmem
;i++)

95 
•rötf
(
∑th
,"/m¡/pmem%d/d©a%d",
i
+1,
poﬁ_˙t
+i);

96 
	gnodeMëaPoﬁLi°
[
poﬁ_˙t
 + 
i
] = (*)
mm≠
(
NULL
,(
NodeMëa
)*
POOL_NODE_MAX
,
PROT_READ
|
PROT_WRITE
,
MAP_PRIVATE
|
MAP_ANONYMOUS
|
MAP_POPULATE
,-1,0);

97 i‡(!
	gnodeMëaPoﬁLi°
[
poﬁ_˙t
 + 
i
])

98 
¥ötf
("alloc_poolÉrror1----------------------------------------------\n");

99 
	gnodePoﬁLi°
[
poﬁ_˙t
 + 
i
] = (*)
pmem_m≠_fûe
(
∑th
,
POOL_SIZE
,
PMEM_FILE_CREATE
,0777,&
my_size
,&
is_pmem
);

100 i‡(!
	gnodePoﬁLi°
[
poﬁ_˙t
 +
i
])

101 
¥ötf
("alloc_poolÉrror2----------------------------------------------\n");

103 i‡(
	gis_pmem
 == 0)

104 
¥ötf
("isÇotÖmem\n");

105 i‡(
	gmy_size
 !
ªq_size
)

106 
¥ötf
("my size isÇotÑeq size\n");

108 
	gpoﬁ_˙t
 +
num_pmem
;

112 
NodeAddr
 
	gNodeAŒoˇt‹
::
Æloc_node
()

114 
©_lock2
(
lock
);

115 
NodeMëa
 *
	gnm
;

116 i‡(
	g‰ì_hód_p
)

118 
	gnm
 = (
NodeMëa
*)
‰ì_hód_p
;

119 
	g‰ì_hód_p
 = 
‰ì_hód_p
->
√xt_p
;

120 
©_u∆ock2
(
lock
);

124 i‡(
	gnode_˙t
[
poﬁ_˙t
 - 
num_pmem
 + 
Æloc_˙t
 %Çum_pmem] >
POOL_NODE_MAX
)

125 
Æloc_poﬁ
();

127 
size_t
 
	gpoﬁ_num
 = 
poﬁ_˙t
 - 
num_pmem
 + 
Æloc_˙t
 %Çum_pmem;

129 
	gnm
 = (
NodeMëa
*)(
nodeMëaPoﬁLi°
[
poﬁ_num
]+(NodeMëa)*
node_˙t
[pool_num]);

130 
	gnm
->
	gmy_off£t
.
	gpoﬁ_num
 = 
poﬁ_num
;

131 
	gnm
->
	gmy_off£t
.
	gnode_off£t
 = 
node_˙t
[
poﬁ_num
];

132 ++
	gnode_˙t
[
poﬁ_num
];

133 ++
	gÆloc_˙t
;

134 
©_u∆ock2
(
lock
);

138 
	gnm
->
	gwrôãn_size
 = 0;

139 
	gnm
->
	g¶Ÿ_˙t
 = 0;

145 
	gnm
->
	gvÆid
.
ªsize
(
NODE_SLOT_MAX
);

146 
	gnm
->
	gvÆid_˙t
 = 0;

148  
	gnm
->
	gmy_off£t
;

151 
	gNodeAŒoˇt‹
::
‰ì_node
(
NodeMëa
* 
nm
)

153 
©_lock2
(
lock
);

154 
	gnm
->
	g√xt_p
 = 
‰ì_hód_p
;

155 
	g‰ì_hód_p
 = 
nm
;

156 
©_u∆ock2
(
lock
);

159 
uöt64_t
 
föd_hÆf_ö_node
(
NodeMëa
* 
nm
,
D©aNode
* 
node
)

161 
	gi
,
	gj
;

162 
uöt64_t
 
	gkeys
[
NODE_SLOT_MAX
];

163 
uöt64_t
 
	g√w_key
;

164 
	g˙t
 = 0;

165 
size_t
 
	goff£t
 = (
NodeAddr
);

166 * 
	gaddr
 = (*)
node
;

168 
	gi
=0;i<
	gNODE_SLOT_MAX
;i++)

170 i‡(
	gnm
->
	gvÆid
[
i
] =
Ál£
)

172 
	g√w_key
 = *(
uöt64_t
*)(
addr
+
off£t
+
HEADER_SIZE
);

173 
	goff£t
+=
ENTRY_SIZE
;

174 
	gj
=
˙t
;j>0;j--)

176 i‡(
	g√w_key
 < 
	gkeys
[
j
-1])

177 
	gkeys
[
j
] = 
keys
[j-1];

181 
	gkeys
[
j
] = 
√w_key
;

182 
	g˙t
++;

186  
	gkeys
[
˙t
/2];

	@/home/cgmin/pmem/ph/ph/data2.h

1 
	~<c°döt
>

2 
	~<©omic
>

3 
	~<ve˘‹
>

5 
	~"sh¨ed.h
"

8 
«me•a˚
 
	gPH


11 
size_t
 
NODE_SLOT_MAX
;

25 c⁄° 
size_t
 
	gHEADER_SIZE
 = 8;

26 c⁄° 
size_t
 
	gKEY_SIZE
 = 8;

30 c⁄° 
size_t
 
	gVER_DRAM_VALID
 = (size_t(1)<<63);

31 c⁄° 
size_t
 
	gVER_DELETE
 = (size_t(1)<<62);

32 c⁄° 
size_t
 
	gVER_CL_LOC1
 = (size_t(1)<<61);

33 c⁄° 
size_t
 
	gVER_CL_LOC2
 = (size_t(1)<<60);

34 c⁄° 
size_t
 
	gVER_PL_LOC1
 = (size_t(1)<<59);

35 c⁄° 
size_t
 
	gVER_PL_LOC2
 = (size_t(1)<<58);

37 c⁄° 
size_t
 
	gVER_LOC_MASK
 = (
VER_CL_LOC1
+
VER_CL_LOC2
+
VER_PL_LOC1
+
VER_PL_LOC2
);

38 c⁄° 
size_t
 
	gVER_LOC_INV_MASK
 = ~
VER_LOC_MASK
;

39 c⁄° 
size_t
 
	gVER_CL_MASK
 = (
VER_CL_LOC1
+
VER_CL_LOC2
);

41 c⁄° 
size_t
 
	gVER_NUM_MASK
 = (size_t(1)<<58)-1;

64 
boﬁ
 
ölöe
 
is_loc_hŸ
(
uöt64_t
 
vîsi⁄
)

66  (((
	gvîsi⁄
 & 
	gVER_CL_LOC1
Ë=0Ë&& (
vîsi⁄
 & 
VER_CL_LOC2
));

69 
ölöe
 
ªmove_loc_mask
(
uöt64_t
 &
vîsi⁄
)

71 
	gvîsi⁄
 &
VER_LOC_INV_MASK
;

74 
uöt64_t
 
ölöe
 
£t_loc_hŸ
(uöt64_à
vîsi⁄
)

76 
	gvîsi⁄
 &
VER_LOC_INV_MASK
;

77 
	gvîsi⁄
 |
VER_CL_LOC2
;

78  
	gvîsi⁄
;

80 
uöt64_t
 
ölöe
 
£t_loc_cﬁd
(uöt64_à
vîsi⁄
)

82 
	gvîsi⁄
 &
VER_LOC_INV_MASK
;

83 
	gvîsi⁄
 |
VER_CL_LOC1
 | 
VER_CL_LOC2
;

84  
	gvîsi⁄
;

86 
uöt64_t
 
ölöe
 
£t_loc_w¨m
(uöt64_à
vîsi⁄
)

88 
	gvîsi⁄
 &
VER_LOC_INV_MASK
;

89 
	gvîsi⁄
 |
VER_CL_LOC1
;

90  
	gvîsi⁄
;

95 
ölöe
 
£t_¥ev_loc
(
uöt64_t
 &
d°_vîsi⁄
,uöt64_à&
§c_vîsi⁄
)

97 
	gd°_vîsi⁄
 |((
§c_vîsi⁄
&
VER_CL_MASK
) >> 2);

99 
ölöe
 
£t_vÆid
(
uöt64_t
 &
vîsi⁄
)

101 
	gvîsi⁄
 |
VER_DRAM_VALID
;

103 
ölöe
 
£t_övÆid
(
uöt64_t
 &
vîsi⁄
)

105 
	gvîsi⁄
 &(~
VER_DRAM_VALID
);

107 
ölöe
 
£t_övÆid
(
uöt64_t
 *
vîsi⁄
)

109 *
	gvîsi⁄
 &(~
VER_DRAM_VALID
);

111 
boﬁ
 
ölöe
 
is_vÆid
(
uöt64_t
 &
vîsi⁄
)

113  
	gvîsi⁄
 & 
	gVER_DRAM_VALID
;

115 
boﬁ
 
ölöe
 
is_vÆid
(
uöt64_t
 *
vîsi⁄
)

117  *
	gvîsi⁄
 & 
	gVER_DRAM_VALID
;

121 
	sBa£LogE¡ry


123 
uöt64_t
 
	ghódî
;

124 
uöt64_t
 
	gkey
;

125 
	gvÆue
[
VALUE_SIZE
];

126 
	g∑d
[4];

140 c⁄° 
size_t
 
	gPOOL_MAX
 = 1024;

141 c⁄° 
size_t
 
	gPOOL_SIZE
 = 1024*1024*1024;

142 c⁄° 
size_t
 
	gPOOL_NODE_MAX
 = 
POOL_SIZE
/
NODE_SIZE
;

146 
	sNodeMëa


150 
NodeMëa
* 
	g√xt_p
;

151 
size_t
 
	gwrôãn_size
;

156 
NodeAddr
 
	gmy_off£t
;

159 
	g°d
::
ve˘‹
<
boﬁ
> 
vÆid
;

160 
	g¶Ÿ_˙t
;

162 
	gvÆid_˙t
;

168 
uöt64_t
 
föd_hÆf_ö_node
(
NodeMëa
* 
nm
,
D©aNode
* 
node
);

175 ˛as†
	cNodeAŒoˇt‹


177 
	gpublic
:

178 
öô
();

179 
˛ón
();

183 
NodeAddr
 
Æloc_node
();

184 
‰ì_node
(
NodeMëa
* 
nm
);

187 
	gpublic
:

190 
lökNext
(
NodeMëa
* 
nm1
,NodeMëa* 
nm2
);

193 
Æloc_poﬁ
();

195 ** 
	gnodeMëaPoﬁLi°
;

196 ** 
	gnodePoﬁLi°
;

202 
	gpoﬁ_˙t
;

203 * 
	gnode_˙t
;

211 
NodeMëa
* 
	g‰ì_hód_p
;

214 
	g°d
::
©omic
<
uöt8_t
> 
lock
=0;

216 
size_t
 
	gÆloc_˙t
;

220 
NodeAŒoˇt‹
* 
nodeAŒoˇt‹
;

222 
ölöe
 
D©aNode
* 
	$nodeAddr_to_node
(
NodeAddr
 
nodeAddr
)

224  (
D©aNode
*)(
nodeAŒoˇt‹
->
nodePoﬁLi°
[
nodeAddr
.
poﬁ_num
] +ÇodeAddr.
node_off£t
*(DataNode));

225 
	}
}

226 
ölöe
 
NodeMëa
* 
	$nodeAddr_to_nodeMëa
(
NodeAddr
 
nodeAddr
)

228  (
NodeMëa
*)(
nodeAŒoˇt‹
->
nodeMëaPoﬁLi°
[
nodeAddr
.
poﬁ_num
] +ÇodeAddr.
node_off£t
*(NodeMeta));

229 
	}
}

	@/home/cgmin/pmem/ph/ph/global.cpp

1 
	~<°rög.h
>

3 
	~"globÆ.h
"

6 
	~"d©a.h
"

7 
	~"thªad.h
"

8 
	~"hash.h
"

12 
«me•a˚
 
	gPH


15 
	gnum_thªad
;

16 
	gnum_pmem
;

17 
	gnum_log
;

22 
	gnum_of_•lô
;

27 
	gpoöt_hash_èbÀ_size
;

28 * 
	gønge_hash_èbÀ_size
;

31 
	gnode_size
;

33 
	gkey_size
;

34 
	gÀn_size
;

35 
	gvÆue_size
;

36 
	gíåy_size
;

37 
	gkey_bô
;

41 
uöt64_t
 
	gpmem_size
;

42 
	gpmem_fûe
[100];

45 
	gem±y
[10];

46 
	gem±y_Àn
;

48 
˛ón
()

50 
¥ötf
("clean\n");

51 
˛ón_hash
();

52 
˛ón_thªad
();

53 
˛ón_d©a
();

55 
ãmp_°©ic_c⁄f
(
ä
, 
ks
,
vs
)

57 #ifde‡
•lô_thªad


58 
	gnum_of_•lô
 = 
SPLIT_NUM
;

60 
	gnum_of_•lô
 = 0;

65 
	gä
 = 24;

67 
	gnum_of_thªad
 = 
ä
 + 
num_of_•lô
;

75 
	gÀn_size
 = 2;

77 
	gkey_size
 = 
ks
;

78 
	gvÆue_size
 = 
vs
;

79 
	gíåy_size
 = 
key_size
 + 
Àn_size
 + 
vÆue_size
;

80 
	gkey_bô
 = 
ks
 * 8;

82 
	gpoöt_hash_èbÀ_size
 = 10*1000*1000;

85 
	gpmem_size
 = (
uöt64_t
)1024*1024*1024*80;

95 
	gem±y_Àn
 = 
°æí
("empty");

96 
mem˝y
(
em±y
,"em±y",
em±y_Àn
);

97 
	gem±y
[
em±y_Àn
] = 0;

99 
mem˝y
(
pmem_fûe
,"/m¡/pmem0/",
°æí
("/mnt/pmem0/"));

100 
	gpmem_fûe
[
°æí
("/mnt/pmem0/")] = 0;

102 
öô_fûe
();

103 
öô_log
();

105 
öô_thªad
();

106 
öô_hash
();

107 
öô_d©a
();

	@/home/cgmin/pmem/ph/ph/global.h

1 #¥agm®
⁄˚


5 
	~<°döt.h
>

21 
	#VALUE_SIZE
 100

	)

23 
«me•a˚
 
	gPH


26 
num_of_thªad
;

31 
num_of_•lô
;

34 
	#USE_DRAM
 0

	)

38 
poöt_hash_èbÀ_size
;

39 * 
ønge_hash_èbÀ_size
;

41 
	#PH_KEY_SIZE
 8

	)

42 
	#PH_LEN_SIZE
 2

	)

43 
	#LK_SIZE
 
PH_KEY_SIZE
+
PH_LEN_SIZE


	)

47 
vÆue_size
;

48 
íåy_size
;

49 
key_bô
;

60 
uöt64_t
 
pmem_size
;

61 
pmem_fûe
[100];

64 
em±y
[10];

65 
em±y_Àn
;

67 
ãmp_°©ic_c⁄f
(
ä
,
ks
,
vs
);

68 
˛ón
();

	@/home/cgmin/pmem/ph/ph/global2.cpp

1 
	~<°dio.h
>

3 
	~"globÆ2.h
"

4 
	~"log.h
"

5 
	~"thªad2.h
"

6 
	~"c˚h.h
"

7 
	~"lock.h
"

8 
	~"skùli°.h
"

9 
	~"d©a2.h
"

11 
«me•a˚
 
	gPH


14 
size_t
 
HARD_EVICT_SPACE
;

15 
size_t
 
SOFT_EVICT_SPACE
;

17 
PH_Quîy_Thªad
 
quîy_thªad_li°
[
QUERY_THREAD_MAX
];

18 
PH_Evi˘_Thªad
 
evi˘_thªad_li°
[
EVICT_THREAD_MAX
];

20 
Skùli°
* 
skùli°
;

21 
PH_Li°
* 
li°
;

23 
NodeAŒoˇt‹
* 
nodeAŒoˇt‹
;

25 
thªad_loˇl
 
PH_Quîy_Thªad
* 
	gmy_quîy_thªad
 = 
NULL
;

26 
thªad_loˇl
 
PH_Evi˘_Thªad
* 
	gmy_evi˘_thªad
 = 
NULL
;

27 
thªad_loˇl
 
PH_Thªad
* 
	gmy_thªad
;

29 
size_t
 
	gVALUE_SIZE
;

30 
size_t
 
	gKEY_RANGE
;

32 
size_t
 
	gENTRY_SIZE
;

33 
size_t
 
	gTOTAL_DATA_SIZE
;

38 
	gnum_thªad
;

39 
	gnum_pmem
;

40 
	gnum_log
;

41 
	gnum_quîy_thªad
;

42 
	gnum_evi˘_thªad
;

44 
	gPH_I¡îÁ˚
::
√w_quîy_thªad
()

46 i‡(
my_quîy_thªad
)

47 
¥ötf
("new queryÅhreadÉrror\n");

48 
	gi
;

49 
	gi
=0;i<
	gQUERY_THREAD_MAX
;i++)

51 
	gquîy_thªad_li°
[
i
].
	glock
 == 0)

53 i‡(
åy_©_lock2
(
quîy_thªad_li°
[
i
].
lock
))

54 
my_quîy_thªad
 = &
quîy_thªad_li°
[
i
];

56 i‡(
	gmy_quîy_thªad
)

62 
	gmy_quîy_thªad
->
öô
();

63 
	gmy_thªad
 = 
my_quîy_thªad
;

65 
	gPH_I¡îÁ˚
::
˛ón_quîy_thªad
()

67 
my_quîy_thªad
->
˛ón
();

69 
©_u∆ock2
(
my_quîy_thªad
->
lock
);

70 
	gmy_quîy_thªad
 = 
NULL
;

71 
	gmy_thªad
 = 
NULL
;

74 
	gPH_I¡îÁ˚
::
√w_evi˘_thªad
()

76 i‡(
my_evi˘_thªad
)

77 
¥ötf
("newÉvictÅhreadÉrror\n");

78 
	gi
;

79 
	gi
=0;i<
	gEVICT_THREAD_MAX
;i++)

81 
	gevi˘_thªad_li°
[
i
].
	glock
 == 0)

83 i‡(
åy_©_lock2
(
evi˘_thªad_li°
[
i
].
lock
))

84 
my_evi˘_thªad
 = &
evi˘_thªad_li°
[
i
];

86 i‡(
	gmy_evi˘_thªad
)

90 
	gmy_evi˘_thªad
->
öô
();

91 
	gmy_thªad
 = 
my_evi˘_thªad
;

94 
	gPH_I¡îÁ˚
::
˛ón_evi˘_thªad
()

96 
my_evi˘_thªad
->
˛ón
();

98 
©_u∆ock2
(
my_evi˘_thªad
->
lock
);

99 
	gmy_evi˘_thªad
=
NULL
;

100 
	gmy_thªad
 = 
NULL
;

103 
	gPH_I¡îÁ˚
::
globÆ_öô
(
size_t
 
VS
,size_à
KR
,
n_t
,
n_p
,
n_e
)

105 
¥ötf
("global init\n");

107 
	gVALUE_SIZE
 = 
VS
;

108 
	gKEY_RANGE
 = 
KR
;

109 
	gENTRY_SIZE
 = 8 + 8 + 
VS
;

110 
	gTOTAL_DATA_SIZE
 = 
ENTRY_SIZE
*
KEY_RANGE
;

112 
	gnum_quîy_thªad
 = 
n_t
;

113 
	gnum_pmem
 = 
n_p
;

114 
	gnum_log
 = (
n_t
-1)/
n_p
+1;

115 
	gnum_evi˘_thªad
 = 
n_e
;

116 
	gnum_thªad
 = 
num_quîy_thªad
 + 
num_evi˘_thªad
;

119 
öô_log
(
num_pmem
,
num_log
);

121 
öô_c˚h
();

123 
	gnodeAŒoˇt‹
 = 
√w
 
NodeAŒoˇt‹
;

124 
	gnodeAŒoˇt‹
->
öô
();

133 
	gli°
 = 
√w
 
PH_Li°
;

134 
	gli°
->
öô
();

135 
	gskùli°
 = 
√w
 
Skùli°
;

136 
	gskùli°
->
öô
();

138 
¥ötf
("global initÉnd\n");

141 
	gPH_I¡îÁ˚
::
exô_thªads
()

143 
i
;

144 
	gi
=0;i<
	gnum_quîy_thªad
;i++)

146 i‡(
	gquîy_thªad_li°
[
i
].
	glock
 == 0)

148 
	gquîy_thªad_li°
[
i
].
	gexô
 = 1;

150 
	gi
=0;i<
	gnum_evi˘_thªad
;i++)

152 i‡(
	gevi˘_thªad_li°
[
i
].
	glock
 == 0)

154 
	gevi˘_thªad_li°
[
i
].
	gexô
 = 1;

159 
	gi
=0;i<
	gnum_evi˘_thªad
;i++)

161 i‡(
	gevi˘_thªad_li°
[
i
].
	gexô
)

163 
±hªad_joö
(
evi˘_±hªads
[
i
],
NULL
);

164 
	gevi˘_thªad_li°
[
i
].
	gexô
 = 0;

169 
	gPH_I¡îÁ˚
::
globÆ_˛ón
()

171 
¥ötf
("global clean\n");

173 
exô_thªads
();

174 
¥ötf
("cc\n");

175 
	gskùli°
->
˛ón
();

176 
dñëe
 
	gskùli°
;

177 
	gli°
->
˛ón
();

178 
dñëe
 
	gli°
;

179 
¥ötf
("ccc\n");

180 
	gnodeAŒoˇt‹
->
˛ón
();

182 
˛ón_c˚h
();

183 
˛ón_log
();

186 
	gPH_I¡îÁ˚
::
ö£π_›
(
uöt64_t
 
key
,* 
vÆue
)

188 i‡(
	gmy_quîy_thªad
 =
NULL
)

189 
√w_quîy_thªad
();

190  
	gmy_quîy_thªad
->
ö£π_›
(
key
,
vÆue
);

192 
	gPH_I¡îÁ˚
::
ªad_›
(
uöt64_t
 
key
,* 
buf
)

194 i‡(
	gmy_quîy_thªad
 =
NULL
)

195 
√w_quîy_thªad
();

196  
	gmy_quîy_thªad
->
ªad_›
(
key
,
buf
);

198 
	gPH_I¡îÁ˚
::
dñëe_›
(
uöt64_t
 
key
)

200 i‡(
my_quîy_thªad
 =
NULL
)

201 
√w_quîy_thªad
();

202  
	gmy_quîy_thªad
->
dñëe_›
(
key
);

204 
	gPH_I¡îÁ˚
::
sˇn_›
(
uöt64_t
 
°¨t_key
,uöt64_à
íd_key
)

206 i‡(
	gmy_quîy_thªad
 =
NULL
)

207 
√w_quîy_thªad
();

208  
	gmy_quîy_thªad
->
sˇn_›
(
°¨t_key
,
íd_key
);

210 
	gPH_I¡îÁ˚
::
√xt_›
(* 
buf
)

212 i‡(
my_quîy_thªad
 =
NULL
)

213 
√w_quîy_thªad
();

214  
	gmy_quîy_thªad
->
√xt_›
(
buf
);

217 
	gPH_I¡îÁ˚
::
íd_›
()

219 i‡(
my_quîy_thªad
)

220 
my_quîy_thªad
->
˛ón
();

224 
	gPH_I¡îÁ˚
::
run_evi˘_dúe˘
()

226 i‡(
my_evi˘_thªad
 =
NULL
)

227 
√w_evi˘_thªad
();

228 
	gmy_evi˘_thªad
->
evi˘_lo›
();

229 
˛ón_evi˘_thªad
();

233 *
run_evi˘
(* 
p
)

235 
PH_I¡îÁ˚
* 
	gphi
 = (PH_I¡îÁ˚*)
p
;

236 
	gphi
->
run_evi˘_dúe˘
();

237  
	gNULL
;

240 
	gPH_I¡îÁ˚
::
run_evi˘_thªad
()

242 
¥ötf
("runÉvictÅhread\n");

243 
	gi
;

244 
	gi
=0;i<
	gnum_evi˘_thªad
;i++)

246 
±hªad_¸óã
(&
evi˘_±hªads
[
i
],
NULL
,
run_evi˘
,
this
);

	@/home/cgmin/pmem/ph/ph/global2.h

2 #i‚de‡
GLOBAL2


3 
	#GLOBAL2


	)

5 
	~<c°döt
>

6 
	~<±hªad.h
>

11 
«me•a˚
 
	gPH


22 
size_t
 
VALUE_SIZE
;

23 
size_t
 
KEY_RANGE
;

25 
size_t
 
ENTRY_SIZE
;

26 
size_t
 
TOTAL_DATA_SIZE
;

29 ˛as†
	cPH_I¡îÁ˚


32 
	g¥iv©e
:

43 
√w_quîy_thªad
();

44 
˛ón_quîy_thªad
();

46 
√w_evi˘_thªad
();

47 
˛ón_evi˘_thªad
();

49 
exô_thªads
();

51 
±hªad_t
 
	gevi˘_±hªads
[100];

55 
	gpublic
:

56 
globÆ_öô
(
size_t
 
VS
,size_à
KR
,
num_thªad
,
num_pmem
,
num_evi˘
);

57 
globÆ_˛ón
();

60 
ö£π_›
(
uöt64_t
 
key
,* 
vÆue
);

61 
ªad_›
(
uöt64_t
 
key
,* 
buf
);

62 
dñëe_›
(
uöt64_t
 
key
);

63 
sˇn_›
(
uöt64_t
 
°¨t_key
,uöt64_à
íd_key
);

64 
√xt_›
(* 
buf
);

66 
íd_›
();

68 
run_evi˘_dúe˘
();

69 
run_evi˘_thªad
();

	@/home/cgmin/pmem/ph/ph/hash.cpp

1 
	~<°dlib.h
>

3 
	~<°dio.h
>

5 
	~<x86öåö.h
>

7 
	~"globÆ.h
"

8 
	~"hash.h
"

9 
	~"c˚h.h
"

11 
	~"d©a.h
"

15 
«me•a˚
 
	gPH


18 
CCEH
* 
	gpoöt_hash
;

19 
CCEH
* 
	gønge_hash_¨øy
;

23 
	#¥öt
 0

	)

28 
uöt64_t
 
	ghâ1
,
	ghâ2
,
	ghâ3
,
	gÂc
,
	ghâ4
,
	ghâ5
,
	gÂc2
;

30 
uöt64_t
 
	g¥e_bô_mask
[128+1];

31 
uöt64_t
 
	g¥e_bô_mask2
[128+1];

34 * 
decode_íåy
(* 
íåy
, * 
vÆue_Àn_p
)

38 * 
	g±r
;

40 i‡(
	gvÆue_Àn_p
 !
NULL
)

41 *
vÆue_Àn_p
 = ((
uöt64_t
)
íåy
 >> 16) % (256*256);

42 
	g±r
 = (*)((
uöt64_t
)
off£t_to_node_d©a
((uöt64_t)
íåy
 >> 32) | ((uint64_t)entry % (256*256)));

43  
	g±r
;

51 * 
ícode_íåy
(* 
±r
, 
vÆue_Àn
)

55 * 
	gíåy
;

57 
	gíåy
 = (*)(((
uöt64_t
)
ˇlc_off£t_d©a
(
±r
Ë<< 32Ë| (
vÆue_Àn
 << 16) | ((uint64_t)ptr % (256*256)));

59  
	gíåy
;

70 
¥öt64
(
uöt64_t
 
v
)

72 
	gi
;

73 
uöt64_t
 
	gmask
;

74 
	gmask
 = (
uöt64_t
)1 << 63;

75 
	gi
=0;i<64;i++)

77 i‡(
	gv
 & 
	gmask
)

78 
¥ötf
("1");

80 
¥ötf
("0");

81 
	gmask
/=2;

83 
¥ötf
("\n");

86 
hash_fun˘i⁄
(c⁄° *
buf
 )

88 
	ghash
 = 5381;

89 
	gÀn
=
PH_KEY_SIZE
;

90 
	gÀn
--)

91 
	ghash
 = ((
hash
 << 5Ë+ hashË+ (*
buf
++);

92  
	ghash
;

95 
VÆueE¡ry
 
föd_poöt_íåy
(* &
key_p
)

97 #ifde‡
hâ


98 
time•ec
 
	gts1
,
	gts2
;

99 
˛ock_gëtime
(
CLOCK_MONOTONIC
,&
ts1
);

100 
	gÂc
++;

101 
_mm_m„n˚
();

105 
VÆueE¡ry
 
	gíåy
;

107 
	gíåy
 = 
poöt_hash
->
föd
(
key_p
);

113 #ifde‡
hâ


114 
_mm_m„n˚
();

115 
˛ock_gëtime
(
CLOCK_MONOTONIC
,&
ts2
);

116 
	ghâ1
+=(
ts2
.
tv_£c
-
ts1
.tv_£c)*1000000000+ts2.
tv_n£c
-ts1.tv_nsec;

118  
	gíåy
;

121 vﬁ©ûê
uöt64_t
* 
föd_‹_ö£π_poöt_íåy
(* &
key_p
,* 
u∆ock
)

123 #ifde‡
hâ


124 
time•ec
 
	gts1
,
	gts2
;

125 
˛ock_gëtime
(
CLOCK_MONOTONIC
,&
ts1
);

126 
	gÂc2
++;

127 
_mm_m„n˚
();

131 vﬁ©ûê
uöt64_t
* 
	gíåy_p
;

132 
VÆueE¡ry
 
	gve
;

133 
	gve
.
	gkv_off£t
 = 0;

134 
	gve
.
	gnode_off£t
 = 
INIT_OFFSET
;

135 (
	gíåy_p
=
poöt_hash
->
ö£π
(–
key_p
),
ve
,
u∆ock
)Ë=
NULL
);

141 #ifde‡
hâ


142 
_mm_m„n˚
();

143 
˛ock_gëtime
(
CLOCK_MONOTONIC
,&
ts2
);

144 
	ghâ5
+=(
ts2
.
tv_£c
-
ts1
.tv_£c)*1000000000+ts2.
tv_n£c
-ts1.tv_nsec;

146  
	gíåy_p
;

149 
u∆ock_íåy
(* 
u∆ock
)

151 
	gpoöt_hash
->
u∆ock_íåy2
(
u∆ock
);

154 
ö£π_poöt_íåy
(* 
key_p
,
VÆueE¡ry
& 
ve
)

156 #ifde‡
hâ


157 
time•ec
 
	gts1
,
	gts2
;

158 
˛ock_gëtime
(
CLOCK_MONOTONIC
,&
ts1
);

159 
_mm_m„n˚
();

162 
	gpoöt_hash
->
ö£π
(–
key_p
),
ve
) == 0);

163 #ifde‡
hâ


164 
_mm_m„n˚
();

166 
˛ock_gëtime
(
CLOCK_MONOTONIC
,&
ts2
);

167 
	ghâ3
+=(
ts2
.
tv_£c
-
ts1
.tv_£c)*1000000000+ts2.
tv_n£c
-ts1.tv_nsec;

171 
ªmove_poöt_íåy
(* &
key_p
)

174 
	gpoöt_hash
->
ªmove
(
key_p
);

178 
bô_Êush
(* 
¥efix
,* 
key_p
,
°¨t
,
íd
)

181 
	gi
,
	g°¨t_byã
,
	gíd_byã
,
	gèrgë_byã
;

182 
	gbô_cou¡
,
	gbô_mask
;

183 i‡(
	gkey_p
 =
NULL
)

185 
°¨t_byã
 = 
°¨t
 / 8+1;

186 
	gíd_byã
 = 
íd
 / 8;

187 
	gi
=
°¨t_byã
;i<=
íd_byã
;i++)

188 
	g¥efix
[
key_size
-1 - 
i
] = 0;

189 
	gèrgë_byã
 = 
°¨t_byã
 -1;

190 
	gbô_cou¡
 = 8-
°¨t
%8;

192 i‡(
	gbô_cou¡
 == 8)

193 
¥efix
[
key_size
-1 - 
èrgë_byã
] = 0;

196 
	gbô_mask
 = ~((1 << (
bô_cou¡
))-1);

197 
	g¥efix
[
key_size
-1 - 
èrgë_byã
] = 
¥efix
[key_size-1 -Å¨gë_byã] & 
bô_mask
;

203 
	g°¨t_byã
 = 
°¨t
 / 8;

204 
	gíd_byã
 = 
íd
 / 8 -1;

205 
	gi
=
°¨t_byã
;i<=
íd_byã
;i++)

206 
	g¥efix
[
key_size
-1 - 
i
] = 
key_p
[key_size-1 - i];

207 
	gèrgë_byã
 = 
íd_byã
+1;

208 
	gbô_cou¡
 = 8 - (
íd
 % 8 + 1);

210 i‡(
	gbô_cou¡
 == 0)

211 
¥efix
[
key_size
-1 - 
èrgë_byã
] = 
key_p
[key_size-1 -Åarget_byte];

214 
	gbô_mask
 = ~((1 << (
bô_cou¡
))-1);

215 
	g¥efix
[
key_size
-1 - 
èrgë_byã
] = 
key_p
[key_size-1 -Å¨gë_byã] & 
bô_mask
;

221 
Node_off£t
 
föd_ønge_íåy2
(* &
key_p
,* 
c⁄töue_Àn
)

223 #ifde‡
hâ


224 
time•ec
 
	gts1
,
	gts2
;

225 
˛ock_gëtime
(
CLOCK_MONOTONIC
,&
ts1
);

227 
_mm_m„n˚
();

231 
	gmö
,
	gmax
,
	gmid
;

232 
Node_off£t
 
	ghash
;

234 
	g¥efix
[16] = {0,};

235 * 
	g¥efix2
=0;

236 * 
	gkey_p2
=0;

244 i‡(
	gÁl£
 && *
	gc⁄töue_Àn
 > 0)

247 
	ghash
 = 
föd_ønge_íåy
(
key_p
,
c⁄töue_Àn
);

248 #ifde‡
hâ


249 
_mm_m„n˚
();

250 
˛ock_gëtime
(
CLOCK_MONOTONIC
,&
ts2
);

251 
	ghâ2
+=(
ts2
.
tv_£c
-
ts1
.tv_£c)*1000000000+ts2.
tv_n£c
-ts1.tv_nsec;

253  
	ghash
;

256 i‡(
	gPH_KEY_SIZE
 > 8)

258 
	g¥efix2
 = 
¥efix
+8;

259 
	gkey_p2
 = 
key_p
+8;

262 
	gmax
 = 
PH_KEY_SIZE
*8;

263 
	gmö
 = 0;

264 
	gmid
 = (
mö
+
max
)/2;

279 
VÆueE¡ry
 
	gve
;

282 *(
	guöt64_t
*)
	g¥efix
 = *(
uöt64_t
*)
key_p
 & 
¥e_bô_mask
[
mid
];

283 i‡(
	g¥efix2
)

284 *(
	guöt64_t
*)
	g¥efix2
 = *(
uöt64_t
*)
key_p2
 & 
¥e_bô_mask2
[
mid
];

291 
	gve
 = 
ønge_hash_¨øy
[
mid
].
föd
(
¥efix
);

294 i‡(
	gve
.
	gnode_off£t
 =
INIT_OFFSET
)

296 
max
 = 
mid
;

303 i‡(
	gve
.
	gnode_off£t
 =
SPLIT_OFFSET
)

307 *
c⁄töue_Àn
 = 
mid
;

309 i‡(
	gmid
+1 =
max
)

310 
mö
 = 
mid
+1;

312 
	gmö
 = 
mid
;

317 #ifde‡
hâ


318 
_mm_m„n˚
();

320 
˛ock_gëtime
(
CLOCK_MONOTONIC
,&
ts2
);

321 
	ghâ2
+=(
ts2
.
tv_£c
-
ts1
.tv_£c)*1000000000+ts2.
tv_n£c
-ts1.tv_nsec;

324 *
	gc⁄töue_Àn
 = 
mid
;

325  
	gve
.
	gnode_off£t
;

328 i‡(
	gmid
 =(
mö
+
max
)/2)

341  
INIT_OFFSET
;

343 
	gmid
 = (
mö
+
max
)/2;

347 
¥ötf
("never come here\n");

349  
	gINIT_OFFSET
;

353 
Node_off£t
 
föd_ønge_íåy
(* 
key_p
,* 
c⁄töue_Àn
)

355 #ifde‡
hâ


356 
time•ec
 
	gts1
,
	gts2
;

357 
˛ock_gëtime
(
CLOCK_MONOTONIC
,&
ts1
);

359 
_mm_m„n˚
();

363 
	gi
;

364 
	ghash
;

366 
	g¥efix
[16] = {0,};

369 * 
	g¥efix2
;

370 * 
	gkey_p2
;

371 
uöt64_t
 
	gb
;

373 
VÆueE¡ry
 
	gve
;

378 i‡(*
	gc⁄töue_Àn
 < 64)

380 
	gb
 = ((
uöt64_t
)1 << *
c⁄töue_Àn
) -1;

381 
	gb
 = 
b
 << (64-*
c⁄töue_Àn
);

382 *((
	guöt64_t
*)
	g¥efix
Ë(
b
 & *((
uöt64_t
*)
key_p
));

383 
	gb
 = (
uöt64_t
)1 << (63 -*
c⁄töue_Àn
);

387 *((
	guöt64_t
*)
	g¥efix
Ë(*((
uöt64_t
*)
key_p
));

390 i‡(
	g¥öt
)

391 
¥ötf
("key %lx cÀ¿%d\n",*((
uöt64_t
*)
key_p
),*
c⁄töue_Àn
);

392 
	gi
=*
c⁄töue_Àn
;i<=64;i++)

396 i‡(
	g¥öt
)

397 
¥ötf
("¥efix %lx\n",*((
uöt64_t
*)
¥efix
));

400 
	gve
 = 
ønge_hash_¨øy
[
i
].
föd
(
¥efix
);

403 i‡(
	gve
.
	gnode_off£t
 !
SPLIT_OFFSET
)

405 *
c⁄töue_Àn
 = 
i
;

406 #ifde‡
hâ


407 
_mm_m„n˚
();

409 
˛ock_gëtime
(
CLOCK_MONOTONIC
,&
ts2
);

410 
	ghâ2
+=(
ts2
.
tv_£c
-
ts1
.tv_£c)*1000000000+ts2.
tv_n£c
-ts1.tv_nsec;

412  
	gve
.
	gnode_off£t
;

415 (*((
	guöt64_t
*)
	g¥efix
)Ë|(*((
uöt64_t
*)
key_p
Ë& 
b
);

416 
	gb
 = 
b
 >> 1;

420 
	g¥efix2
 = 
¥efix
+8;

421 
	gkey_p2
 = 
key_p
+8;

422 i‡(*
	gc⁄töue_Àn
 < 128)

424 
	gb
 = ((
uöt64_t
)1 << *
c⁄töue_Àn
) -1;

425 
	gb
 = 
b
 << (64-*
c⁄töue_Àn
);

426 *((
	guöt64_t
*)
	g¥efix2
Ë(
b
 & *((
uöt64_t
*)
key_p2
));

429 *((
	guöt64_t
*)
	g¥efix2
Ë(*((
uöt64_t
*)
key_p2
));

430 
	gb
 = (
uöt64_t
)1 << (128-1 -*
c⁄töue_Àn
);

433 
	gi
=64+1;i<=
key_bô
;i++)

436 
	gve
 = 
ønge_hash_¨øy
[
i
].
föd
(
¥efix
);

438 i‡(
	gve
.
	gnode_off£t
 !
SPLIT_OFFSET
)

440 *
c⁄töue_Àn
 = 
i
;

441 #ifde‡
hâ


442 
_mm_m„n˚
();

444 
˛ock_gëtime
(
CLOCK_MONOTONIC
,&
ts2
);

445 
	ghâ2
+=(
ts2
.
tv_£c
-
ts1
.tv_£c)*1000000000+ts2.
tv_n£c
-ts1.tv_nsec;

447  
	gve
.
	gnode_off£t
;

450 (*((
	guöt64_t
*)
	g¥efix2
)Ë|(*((
uöt64_t
*)
key_p2
Ë& 
b
);

451 
	gb
 = 
b
 >> 1;

456 
¥ötf
("range hashÉrror\n");

457  
	gINIT_OFFSET
;

460 #ifde‡
HASH_TEST


462 
uöt64_t
 
	gö£π_log
[65][1000000];

463 
	gö£π_a
[65][1000000];

464 
	gö£π_b
[65][1000000];

465 
	g°d
::
©omic
<> 
Œ
[65];

468 
föd_ö_log
(* 
key_p
,
Àn
)

470 
	gi
,
	gŒi
;

471 
uöt64_t
 
	gv
 = *((uöt64_t*)
key_p
);

472 
	gŒi
 = 
Œ
[
Àn
];

473 
	gi
=0;i<
	gŒi
;i++)

475 i‡((
	gö£π_log
[
Àn
][
i
] & 
	g¥e_bô_mask
[Àn]Ë=(
v
 & 
¥e_bô_mask
[len]))

477 
¥ötf
("found %d %d\n",
ö£π_a
[
Àn
][
i
],
ö£π_b
[len][i]);

481 
¥ötf
("nŸ found %d\n",
Œi
);

484 
föd_ö_log
(* 
key_p
,
Àn
)

486 
¥ötf
("HASH TEST DISABLED\n");

493 
ö£π_ønge_íåy
(* 
key_p
,
Àn
,
Node_off£t
 
off£t
)

505 #ifde‡
hâ


506 
time•ec
 
	gts1
,
	gts2
;

507 
˛ock_gëtime
(
CLOCK_MONOTONIC
,&
ts1
);

509 
_mm_m„n˚
();

512 
	g¥efix
[16] = {0,};

532 i‡(
	gÀn
 <= 64)

533 *((
uöt64_t
*)
¥efix
Ë(
¥e_bô_mask
[
Àn
] & *((uöt64_t*)
key_p
));

536 * 
	g¥efix2
 = 
¥efix
+8;

537 * 
	gkey_p2
 = 
key_p
+8;

538 *((
	guöt64_t
*)
	g¥efix
Ë*((
uöt64_t
*)
key_p
);

539 *((
	guöt64_t
*)
	g¥efix2
Ë(
¥e_bô_mask2
[
Àn
] & *((
uöt64_t
*)
key_p2
));

544 i‡(
	g¥öt
)

545 
¥ötf
("key_∞%lxÑ™gê%lxÜí %d off£à%d/%d in£π\n",*((
uöt64_t
*)
key_p
),*((uöt64_t*)
¥efix
),
Àn
,
off£t
.
fûe
,offset.offset);

551 
VÆueE¡ry
 
	gve
;

552 
	gve
.
	gnode_off£t
 = 
off£t
;

554 
	gønge_hash_¨øy
[
Àn
].
ö£π
(
¥efix
,
ve
) == 0);

556 #ifde‡
hâ


557 
_mm_m„n˚
();

558 
˛ock_gëtime
(
CLOCK_MONOTONIC
,&
ts2
);

559 
	ghâ4
+=(
ts2
.
tv_£c
-
ts1
.tv_£c)*1000000000+ts2.
tv_n£c
-ts1.tv_nsec;

564 
öô_hash
()

567 
	gi
;

569 
	g¥e_bô_mask
[0] = 0;

571 
	gi
=1;i<=64;i++)

572 
	g¥e_bô_mask
[
i
] = (
¥e_bô_mask
[i-1] >> 1Ë+ ((
uöt64_t
)1 << 63);

573 
	gi
=64+1;i<=128;i++)

574 
	g¥e_bô_mask
[
i
] = 
¥e_bô_mask
[64];

575 
	gi
=1;i<=64;i++)

576 
	g¥e_bô_mask2
[
i
] = 
¥e_bô_mask
[64];

577 
	gi
=64+1;i<=128;i++)

578 
	g¥e_bô_mask2
[
i
] = 
¥e_bô_mask
[i-64];

581 
öô_c˚h
();

583 
	gpoöt_hash
 = 
√w
 
CCEH
(10);

584 
	gønge_hash_¨øy
 = 
√w
 
CCEH
[64+1];

594 
	ghâ4
 = 
hâ3
 = 
hâ5
 = 
hâ1
 = 
hâ2
 = 0;

595 
	gÂc2
 = 
Âc
 = 1;

600 
˛ón_hash
()

603 
¥ötf
("clean hash\n");

624 
dñëe
 
	gpoöt_hash
;

625 
	gdñëe
[] 
	gønge_hash_¨øy
;

627 
˛ón_c˚h
();

628 #ifde‡
hâ


629 
¥ötf
("hash\n");

630 
¥ötf
("poöàªad %ld %ld\n",
hâ1
/1000000000,htt1%1000000000);

631 
¥ötf
("poöàªadávg %ld %ld %ld\n",(
hâ1
/
Âc
)/1000000000,(htt1/fpc)%1000000000,fpc);

632 
¥ötf
("poöàªad2 %ld %ld\n",
hâ5
/1000000000,htt5%1000000000);

633 
¥ötf
("poöàªad2ávg %ld %ld %ld\n",(
hâ5
/
Âc2
)/1000000000,(htt5/fpc2)%1000000000,fpc2);

634 
¥ötf
("øngêªad %ld %ld\n",
hâ2
/1000000000,htt2%1000000000);

635 
¥ötf
("øngêö£π %ld %ld\n",
hâ4
/1000000000,htt4%1000000000);

636 
¥ötf
("poöàö£π %ld %ld\n",
hâ3
/1000000000,htt3%1000000000);

	@/home/cgmin/pmem/ph/ph/hash.h

1 
	~<±hªad.h
>

3 
	~"globÆ.h
"

10 
«me•a˚
 
	gPH


21 
VÆueE¡ry
 
föd_poöt_íåy
(* &
key_p
);

22 vﬁ©ûê
uöt64_t
* 
föd_‹_ö£π_poöt_íåy
(* &
key_p
,* 
u∆ock
);

23 
ö£π_poöt_íåy
(* 
key_p
,
VÆueE¡ry
& 
ve
);

24 
u∆ock_íåy
(* 
u∆ock
);

28 
Node_off£t
 
föd_ønge_íåy
(* 
key_p
,* 
c⁄töue_Àn
);

30 
Node_off£t
 
föd_ønge_íåy2
(* &
key_p
,* 
c⁄töue_Àn
);

32 
ö£π_ønge_íåy
(* 
key_p
,
Àn
,
Node_off£t
 
off£t
);

33 
ªmove_poöt_íåy
(* &
key_p
);

35 
öô_hash
();

36 
˛ón_hash
();

38 
föd_ö_log
(* 
key_p
,
Àn
);

	@/home/cgmin/pmem/ph/ph/kvs.h

3 
	~"quîy.h
"

4 
	~"globÆ.h
"

5 
	~"d©a.h
"

6 
	~"hash.h
"

7 
	~"thªad.h
"

11 ˛as†
	cKVS_ph
 : 
public
 
KVS


13 
public
:

16 ~
	$KVS_ph
()

22 
vútuÆ
 
	$öô
(
num
,
key
,
vÆue
,
ªc‹d
)

24 
KVS
::
	`öô
(
num
,
key
,
vÆue
,
ªc‹d
);

25 
PH
::
	`ãmp_°©ic_c⁄f
(
num
,
key
,
vÆue
);

30 
	`¥ötf
("kvs_ph init\n");

31 
	}
}

33 
vútuÆ
 
	$ö£π_›
(* 
key
,* 
vÆue
)

35 
PH
::
	`ö£π_quîy
(
key
,
vÆue
);

36 
	}
}

37 
vútuÆ
 
	$ªad_›
(* 
key
,* 
ªsu…
)

39 
Àn
;

40 
PH
::
	`lookup_quîy
(
key
,
ªsu…
,&
Àn
);

41 
	}
}

43 
vútuÆ
 
	$ªad_›2
(* 
key
,* 
ªsu…
)

45 
Àn
;

46  
PH
::
	`lookup_quîy
(
key
,
ªsu…
,&
Àn
);

50 
	}
}

51 
vútuÆ
 
	$ªad_›2
(* 
key
,
°d
::
°rög
 *
vÆue
)

53  
PH
::
	`lookup_quîy
(
key
,
vÆue
);

55 
	}
}

56 
vútuÆ
 
	$upd©e_›
(* 
key
,* 
vÆue
)

58 
PH
::
	`ö£π_quîy
(
key
,
vÆue
);

59 
	}
}

60 
vútuÆ
 
	$dñëe_›
(* 
key
)

62 
PH
::
	`dñëe_quîy
(
key
);

63 
	}
}

64 
vútuÆ
 
	$sˇn_›
(* 
key
,
˙t
,** 
sˇn_ªsu…
)

66 
PH
::
Quîy
 
quîy
;

67 
PH
::
	`öô_quîy
(&
quîy
);

68 
quîy
.
key_p
 = 
key
;

69 
quîy
.
›
 = 6;

70 
PH
::
	`sˇn_quîy
(&
quîy
);

72 
i
,
Àn
;

73 
quîy
.
›
 = 7;

74 
i
=0;i<
˙t
;i++)

76 
PH
::
	`√xt_quîy
(&
quîy
,
sˇn_ªsu…
[
i
],&
Àn
);

78 
PH
::
	`‰ì_quîy
(&
quîy
);

79 
	}
}

81 
vútuÆ
 
	$˛ón
()

83 
	`¥ötf
("ph clean1\n");

87 
PH
::
	`˛ón
();

88 
	`¥ötf
("ph clean2\n");

89 
	}
}

91 
vútuÆ
 
	$run
(
Te°Quîy
* 
tqa
, 
›s
)

93 
i
,
Àn
,
j
;

94 * 
ªsu…
;

95 
ªsu…
 = (*)
	`mÆloc
(
vÆue_size
+
PH_KEY_SIZE
+
PH_LEN_SIZE
);

97 
i10
 = 
›s
/10;

98 
i10s
 = 0;

100 
°d
::
°rög
 
sˇn_ªsu…
[100];

102 
i
=0;i<
›s
;i++)

104 i‡(
tqa
[
i
].
›
 == 1)

106 
PH
::
	`ö£π_quîy
(
tqa
[
i
].
key
,tqa[i].
vÆue
);

107 i‡(
tqa
[
i
].
›
 == 2)

109 
PH
::
	`lookup_quîy
(
tqa
[
i
].
key
,
ªsu…
,&
Àn
);

110 i‡(
Àn
 =0 && 
ªsu…
[0] == 0)

111 
	`¥ötf
("0\n");

113 i‡(
tqa
[
i
].
›
 == 3)

115 
PH
::
	`ö£π_quîy
(
tqa
[
i
].
key
,tqa[i].
vÆue
);

116 i‡(
tqa
[
i
].
›
 == 4)

117 
PH
::
	`dñëe_quîy
(
tqa
[
i
].
key
);

118 i‡(
tqa
[
i
].
›
 == 5)

120 
PH
::
	`sˇn_quîy2
(
tqa
[
i
].
key
,tqa[i].
˙t
,
sˇn_ªsu…
);

138 i‡(
i
 =
i10s
)

140 
i10s
+=
i10
;

141 
	`¥ötf
("ò: %d / %d\n",
i
,
›s
);

144 
	`‰ì
(
ªsu…
);

145 
	}
}

147 
vútuÆ
 
	$ª£t
()

149 
PH
::
	`ª£t_thªad
();

150 
	}
}

151 
vútuÆ
 
	$exô_thªad
()

153 
PH
::
	`exô_thªad
();

154 
	}
}

	@/home/cgmin/pmem/ph/ph/kvs2.h

3 
	~"quîy.h
"

4 
	~"globÆ.h
"

5 
	~"d©a.h
"

6 
	~"hash.h
"

7 
	~"thªad.h
"

9 
	~<ve˘‹
>

11 
usög
 
«me•a˚
 
	gPH
;

13 ˛as†
	cKVS_ph


15 
	mpublic
:

17 
vútuÆ
 
	$öô
(
num
,
key
,
vÆue
)

20 
PH
::
	`ãmp_°©ic_c⁄f
(
num
,
key
,
vÆue
);

24 
	`¥ötf
("kvs_ph init\n");

27 
vútuÆ
 
	$ö£π_›
(* 
key
,* 
vÆue
,
vÆue_Àn
)

29 
PH
::
	`ö£π_quîy
(
key
,
vÆue
,
vÆue_Àn
);

32 
	}
}

33 
vútuÆ
 
	$ªad_›
(* 
key
,* 
ªsu…
)

35 
Àn
;

36  
PH
::
	`lookup_quîy
(
key
,
ªsu…
,&
Àn
);

40 
	}
}

41 
vútuÆ
 
	$ªad_›2
(* 
key
,
°d
::
°rög
 *
vÆue
)

43  
PH
::
	`lookup_quîy
(
key
,
vÆue
);

45 
	}
}

46 
vútuÆ
 
	$upd©e_›
(* 
key
,* 
vÆue
,
vÆue_Àn
)

48 
PH
::
	`ö£π_quîy
(
key
,
vÆue
,
vÆue_Àn
);

51 
	}
}

52 
vútuÆ
 
	$dñëe_›
(* 
key
)

54 
PH
::
	`dñëe_quîy
(
key
);

55 
	}
}

56 
vútuÆ
 
	$sˇn_›
(* 
key
,
˙t
,** 
sˇn_ªsu…
)

58 
PH
::
Quîy
 
quîy
;

59 
PH
::
	`öô_quîy
(&
quîy
);

60 
quîy
.
key_p
 = 
key
;

61 
quîy
.
›
 = 6;

62 
PH
::
	`sˇn_quîy
(&
quîy
);

64 
i
,
Àn
;

65 
quîy
.
›
 = 7;

66 
i
=0;i<
˙t
;i++)

68 
PH
::
	`√xt_quîy
(&
quîy
,
sˇn_ªsu…
[
i
],&
Àn
);

70 
PH
::
	`‰ì_quîy
(&
quîy
);

71 
	}
}

73 
vútuÆ
 
size_t
 
	$sˇn_›
(* 
key
,
˙t
,
°d
::
°rög
* 
sˇn_ªsu…
)

75 
PH
::
Quîy
 
quîy
;

76 
PH
::
	`öô_quîy
(&
quîy
);

77 
quîy
.
key_p
 = 
key
;

78 
quîy
.
›
 = 6;

79 
PH
::
	`sˇn_quîy
(&
quîy
);

81 
i
;

82 
quîy
.
›
 = 7;

83 
i
=0;i<
˙t
;i++)

85 
PH
::
	`√xt_quîy
(&
quîy
,&
sˇn_ªsu…
[
i
]);

87 
PH
::
	`‰ì_quîy
(&
quîy
);

89  
˙t
;

90 
	}
}

92 
vútuÆ
 
size_t
 
	$sˇn_›2
(* 
key
,
˙t
,
°d
::
°rög
* 
sˇn_ªsu…
)

94 
˙t
 = 
PH
::
	`sˇn_quîy2
(
key
,˙t,
sˇn_ªsu…
);

95  
˙t
;

96 
	}
}

98 
vútuÆ
 
	$˛ón
()

100 
	`¥ötf
("ph clean1\n");

104 
PH
::
	`˛ón
();

105 
	`¥ötf
("ph clean2\n");

106 
	}
}

143 
vútuÆ
 
	$ª£t
()

145 
PH
::
	`ª£t_thªad
();

146 
	}
}

147 
vútuÆ
 
	$exô_thªad
()

149 
PH
::
	`exô_thªad
();

150 
	}
}

	@/home/cgmin/pmem/ph/ph/lock.cpp

1 
	~<©omic
>

3 
	~"lock.h
"

5 
«me•a˚
 
	gPH


7 
	#USE_CAS


	)

8 
©_lock2
(
°d
::
©omic
<
uöt8_t
> &
lock
)

10 #ifde‡
USE_CAS


11 
uöt8_t
 
z
;

12 
	gåue
)

14 
	gz
 = 0;

15 i‡(
	glock
.
com∑ª_exch™ge_°r⁄g
(
z
,1))

19 
	gåue
)

21 
	glock
++;

22 i‡(
	glock
 == 1)

24 
	glock
--;

28 
©_u∆ock2
(
°d
::
©omic
<
uöt8_t
> &
lock
)

30 
lock
 = 0;

34 
åy_©_lock2
(
°d
::
©omic
<
uöt8_t
> &
lock
)

36 #ifde‡
USE_CAS


37 
uöt8_t
 
z
=0;

38  
	glock
.
com∑ª_exch™ge_°r⁄g
(
z
,1);

40 
	glock
++;

41 i‡(
	glock
 == 1)

43 
	glock
--;

	@/home/cgmin/pmem/ph/ph/lock.h

1 
	~<©omic
>

2 
«me•a˚
 
	gPH


5 
©_lock2
(
°d
::
©omic
<
uöt8_t
> &
lock
);

6 
©_u∆ock2
(
°d
::
©omic
<
uöt8_t
> &
lock
);

7 
åy_©_lock2
(
°d
::
©omic
<
uöt8_t
> &
lock
);

	@/home/cgmin/pmem/ph/ph/log.cpp

1 
	~<libpmem.h
>

2 
	~<°rög.h
>

3 
	~<x86öåö.h
>

4 
	~<°dio.h
>

5 
	~<sys/mm™.h
>

6 
	~<uni°d.h
>

8 
	~"log.h
"

9 
	~"d©a2.h
"

10 
	~"thªad2.h
"

11 
	~"globÆ2.h
"

15 
«me•a˚
 
	gPH


20 
size_t
 
	glog_size
;

21 
	glog_max
;

22 
DoubÀLog
* 
	gdoubÀLogLi°
;

24 
size_t
 
	gHARD_EVICT_SPACE
;

25 
size_t
 
	gSOFT_EVICT_SPACE
;

27 
thªad_loˇl
 
PH_Thªad
* 
my_thªad
;

31 
öô_log
(
num_pmem
, 
num_log
)

34 
¥ötf
("initÜog\n");

36 
	glog_max
 = 
num_pmem
*
num_log
;

37 
	gdoubÀLogLi°
 = 
√w
 
DoubÀLog
[
log_max
];

41 
	glog_size
 = 
TOTAL_DATA_SIZE
/10/(
num_pmem
*
num_log
);

42 
	gHARD_EVICT_SPACE
 = 
log_size
/20;

43 
	gSOFT_EVICT_SPACE
 = 
log_size
/10;

45 
¥ötf
("LOG NUM %d LOG SIZE %lfGB\n",
num_log
,(
log_size
)/1024/1024/1024);

47 
	gi
,
	gj
,
	g˙t
=0;

48 
	gi
=0;i<
	gnum_log
;i++)

50 
	gj
=0;j<
	gnum_pmem
;j++)

52 
	g∑th
[100];

53 
	gÀn
;

54 #ifde‡
INTERLEAVE


55 
•rötf
(
∑th
,"/m¡/pmem0/log%d",
˙t
);

57 
•rötf
(
∑th
,"/m¡/pmem%d/log%d",
j
+1,
i
+1);

59 
	gÀn
 = 
°æí
(
∑th
);

60 
	g∑th
[
Àn
] = 0;

61 
	gdoubÀLogLi°
[
˙t
].
	glog_num
 = cnt;

62 
	gdoubÀLogLi°
[
˙t
++].
öô
(
∑th
,
log_size
);

67 
˛ón_log
()

70 
¥ötf
("cleanÜog\n");

72 
	gi
;

73 
	gi
=0;i<
	glog_max
;i++)

75 
	gdoubÀLogLi°
[
i
].
˛ón
();

78 
	gdñëe
[] 
	gdoubÀLogLi°
;

80 
¥ötf
("cleanÇow\n");

83 
	#SKIP_MEMSET


	)

85 
	gDoubÀLog
::
Æloc_√w_døm_poﬁ
()

88 
døm_li°_poﬁ
[
døm_li°_poﬁ_˙t
] = (
Døm_Li°
*)
mÆloc
((Døm_Li°)*
DRAM_LIST_UNIT
);

89 ++
	gdøm_li°_poﬁ_˙t
;

90 i‡(
	gdøm_li°_poﬁ_˙t
 >
døm_li°_poﬁ_max
)

91 
¥ötf
("implÑealloc\n");

92 
	gdøm_li°_poﬁ_Ælo˚d
 = 0;

95 
Døm_Li°
* 
	gDoubÀLog
::
Æloc_√w_døm_li°
()

97 i‡(
‰ì_døm_li°_hód
)

99 
Døm_Li°
* 
rv
 = 
‰ì_døm_li°_hód
;

100 
	g‰ì_døm_li°_hód
 = 
‰ì_døm_li°_hód
->
√xt
;

101  
	grv
;

104 i‡(
	gdøm_li°_poﬁ_Ælo˚d
 >
DRAM_LIST_UNIT
)

107 
Æloc_√w_døm_poﬁ
();

109  &
	gdøm_li°_poﬁ
[
døm_li°_poﬁ_˙t
-1][
døm_li°_poﬁ_Ælo˚d
++];

112 
Døm_Li°
* 
	gDoubÀLog
::
≠≥nd_√w_døm_li°
(
uöt64_t
 
vîsi⁄
,uöt64_à
key
,* 
vÆue
)

114 
Døm_Li°
* 
	gdl
 = 
Æloc_√w_døm_li°
();

115 
	gdl
->
	gbÀ
.
	ghódî
 = 
vîsi⁄
;

116 
	gdl
->
	gbÀ
.
	gkey
 = 
key
;

117 
mem˝y
(
dl
->
bÀ
.
vÆue
,vÆue,
VALUE_SIZE
);

119 i‡(
	gdøm_li°_hód
)

120 
	gdøm_li°_hód
->
	g√xt
 = 
dl
;

121 
	gdl
->
	g¥ev
 = 
døm_li°_hód
;

122 
	gdl
->
	g√xt
 = 
NULL
;

123 
	gdøm_li°_hód
 = 
dl
;

125  
	gdl
;

128 
	gDoubÀLog
::
ªmove_døm_li°
(
Døm_Li°
* 
dl
)

131 i‡(
dl
->
√xt
 && dl->
¥ev
)

133 
dl
->
√xt
->
¥ev
 = dl->prev;

134 
	gdl
->
	g¥ev
->
	g√xt
 = 
dl
->
√xt
;

136 i‡(
	gdl
->
	g√xt
)

138 
	gdl
->
	g√xt
->
	g¥ev
 = 
NULL
;

139 
	gdøm_li°_èû
 = 
dl
->
√xt
;

141 i‡(
	gdl
->
	g¥ev
)

143 
	gdl
->
	g¥ev
->
	g√xt
 = 
NULL
;

144 
	gdøm_li°_hód
 = 
dl
->
¥ev
;

148 
	gdøm_li°_hód
 = 
døm_li°_èû
 = 
NULL
;

153 
	gdl
->
	g√xt
 = 
‰ì_døm_li°_hód
;

154 
	g‰ì_døm_li°_hód
 = 
dl
;

158 
	gDoubÀLog
::
öô
(* 
fûeP©h
, 
size_t
 
ªq_size
)

165 
	gis_pmem
;

166 
	gpmemLogAddr
 = (*)
pmem_m≠_fûe
(
fûeP©h
,
ªq_size
,
PMEM_FILE_CREATE
,0777,&
my_size
,&
is_pmem
);

167 i‡(
	gmy_size
 !
ªq_size
)

168 
¥ötf
("my_sizê%lu i†nŸÑeq_sizê%lu\n",
my_size
,
ªq_size
);

169 i‡(
	gis_pmem
 == 0)

170 
¥ötf
("isÇotÖmem\n");

171 #ifde‡
SKIP_MEMSET


172 
¥ötf
("----------------skip memset----------------------\n");

174 
mem£t
(
pmemLogAddr
,0,
my_size
);

178 
	ghód_p
 = 
pmemLogAddr
;

179 
	gèû_p
 = 
pmemLogAddr
;

180 
	gíd_p
 = 
pmemLogAddr
 + 
my_size
;

182 
	gdøm_li°_poﬁ_max
 = 
LIST_POOL_UNIT
;

183 
	gdøm_li°_poﬁ
 = (
Døm_Li°
**)
mÆloc
((Døm_Li°*)*
døm_li°_poﬁ_max
);

184 
	gdøm_li°_poﬁ_˙t
 = 0;

185 
Æloc_√w_døm_poﬁ
();

188 
	g‰ì_døm_li°_hód
 = 
NULL
;

189 
	gdøm_li°_hód
 = 
døm_li°_èû
 = 
NULL
;

192 
	ghód_sum
 = 
èû_sum
 = 0;

194 #ifde‡
USE_DRAM_CACHE


195 
	gdømLogAddr
 = (*)
mm≠
(
NULL
,
ªq_size
,
PROT_READ
|
PROT_WRITE
,
MAP_PRIVATE
|
MAP_ANONYMOUS
|
MAP_POPULATE
,-1,0);

196 i‡(!
	gdømLogAddr
)

197 
¥ötf
("dram mmapÉrror\n");

201 
	gu£
 = 0;

202 
	gevi˘_Æloc
 = 0;

203 
	gmö_èû_sum
 = 0;

205 
	gso·_adv_off£t
 = 0;

208 
	gDoubÀLog
::
˛ón
()

212 
i
;

213 
	gi
=0;i<
	gdøm_li°_poﬁ_˙t
;i++)

214 
‰ì
(
døm_li°_poﬁ
[
i
]);

215 
‰ì
(
døm_li°_poﬁ
);

217 
¥ötf
(" my sizê%lu\n",
my_size
);

218 #ifde‡
USE_DRAM_CACHE


219 
munm≠
(
dømLogAddr
,
my_size
);

221 
pmem_unm≠
(
pmemLogAddr
,
my_size
);

231 
	gDoubÀLog
::
ªady_log
()

234 
size_t
 
off£t
 = 
hód_sum
 % 
my_size
;

235 i‡(
	goff£t
+
	gENTRY_SIZE
 > 
	gmy_size
)

236 
	ghód_sum
+=(
my_size
-
off£t
);

238 i‡(
	gmö_èû_sum
 + 
	gmy_size
 < 
	ghód_sum
 + 
	gENTRY_SIZE
)

239 
	gmö_èû_sum
 = 
gë_mö_èû
(
log_num
);

240 
	gmö_èû_sum
 + 
	gmy_size
 < 
	ghód_sum
 + 
	gENTRY_SIZE
)

244 
u¶ìp
(1000*100);

246 
	gmy_thªad
->
sync_thªad
();

247 
	gmö_èû_sum
 = 
gë_mö_èû
(
log_num
);

253 
	gDoubÀLog
::
ö£π_log
(
Ba£LogE¡ry
 *
ba£LogE¡ry_p
)

261 * 
§c
 = (*)
ba£LogE¡ry_p
;

262 
mem˝y
(
hód_p
+
hódî_size
 ,
§c
+hódî_sizê,
bÀ_Àn
-header_size);

263 
pmem_≥rsi°
(
hód_p
+
hódî_size
,
bÀ_Àn
-header_size);

264 
_mm_s„n˚
();

268 
	gDoubÀLog
::
ö£π_pmem_log
(
uöt64_t
 
key
,*
vÆue
)

277 * 
	ghód_p
 = 
pmemLogAddr
 + 
hód_sum
%
my_size
;

278 
mem˝y
(
hód_p
+
HEADER_SIZE
, &
key
, (
uöt64_t
));

279 
mem˝y
(
hód_p
+
HEADER_SIZE
+
KEY_SIZE
, 
vÆue
, 
VALUE_SIZE
);

281 
pmem_≥rsi°
(
hód_p
+
HEADER_SIZE
,
KEY_SIZE
+
VALUE_SIZE
);

282 
_mm_s„n˚
();

285 c⁄° 
size_t
 
	gCACHE_MASK
 = 0xffffffffffffffc0;

286 
˛wb
(* 
addr
,
size_t
 
Àn
)

288 
	gi
;

289 * 
	g°¨t
 = (
addr
 & 
CACHE_MASK
);

290 i‡(
	gÀn
 % 64 > 0)

291 
	gÀn
+=64;

292 
	gi
=0;i<
	gÀn
;i+=64)

293 
_mm_˛wb
((*)(
°¨t
+
i
));

296 
	gDoubÀLog
::
ö£π_døm_log
(
uöt64_t
 
vîsi⁄
, uöt64_à
key
,*
vÆue
)

305 * 
	ghód_p
 = 
dømLogAddr
 + 
hód_sum
%
my_size
;

306 
mem˝y
(
hód_p
,&
vîsi⁄
,
HEADER_SIZE
);

307 
mem˝y
(
hód_p
+
HEADER_SIZE
, &
key
, 
KEY_SIZE
);

308 
mem˝y
(
hód_p
+
HEADER_SIZE
+
KEY_SIZE
, 
vÆue
, 
VALUE_SIZE
);

312 
_mm_s„n˚
();

316 
	#VERSION


	)

318 
	gDoubÀLog
::
wrôe_vîsi⁄
(
uöt64_t
 
vîsi⁄
)

320 #ifde‡
VERSION


321 
mem˝y
(
pmemLogAddr
+
hód_sum
%
my_size
 ,&
vîsi⁄
,
hódî_size
);

322 
pmem_≥rsi°
(
pmemLogAddr
 + 
hód_sum
%
my_size
 ,
hódî_size
);

323 
_mm_s„n˚
();

333 
	gLOG
::
ö£π_log
(* &
key_p
, * &
vÆue_p
,
vÆue_Àn
)

335 
VÆueE¡ry_u
 
	gve_u
,
	gﬁd_ve_u
;

336 vﬁ©ûê
uöt64_t
* 
	gv64_p
;

337 * 
	gu∆ock
;

338 
Node_off£t
 
	g°¨t_off£t
,
	glocked_off£t
;

340 
	gv64_p
 = 
föd_‹_ö£π_poöt_íåy
(
key_p
,&
u∆ock
);

341 
	gﬁd_ve_u
.
	gve_64
 = *
v64_p
;

342 
	gﬁd_ve_u
.
	gve
.
	gnode_off£t
 !
INIT_OFFEST
)

344 
°¨t_off£t
 = 
gë_°¨t_off£t
(
ﬁd_ve_u
.
ve
.
node_off£t
);

345 i‡(
öc_ªf
(
°¨t_off£t
))

347 
	gve_u
.
	gve
.
	gnode_off£t
 = 
°¨t_off£t
;

350 
u∆ock_íåy
(
u∆ock
);

351 
	gv64_p
 = 
föd_‹_ö£π_poöt_íåy
(
key_p
,&
u∆ock
);

352 
	gﬁd_ve_u
.
	gve_64
 = *
v64_p
;

355 
	gc⁄töue_Àn
 = 0;

356 i‡(
	gve_u
.
	gve
.
	gnode_off£t
 =
INIT_OFFSET
)

360 i‡((
ve_u
.
ve
.
node_off£t
 = 
föd_ønge_íåy2
(
key_p
,&
c⁄töue_Àn
)Ë=
INIT_OFFSET
)

362 i‡(
öc_ªf
(
ve_u
.
ve
.
node_off£t
))

364 
	gﬁd_ve_u
.
	gve
.
	gnode_off£t
 = 
INIT_OFFSET
;

370 
	glocked_off£t
 = 
ve_u
.
ve
.
node_off£t
;

376 
VÆueE¡ry
 
	gLOG
::
ö£π_log
(
Node_off£t
 
°¨t_node_off£t
,* &
key_p
, * &
vÆue_p
,
vÆue_Àn
)

378 
VÆueE¡ry
 
	grv
;

379 
	gíåy_size
 = 
Àn_size
 + 
key_size
 + 
vÆue_Àn
;

380 
LogOff£t
 
	gkv_ö_√xt
 = 
kv_ö
;

382 i‡(
	gíåy_size
%2)

383 ++
	gíåy_size
;

385 
	gkv_ö_√xt
.
	goff£t
+=
íåy_size
+
LF_SIZE
;

387 i‡(
	gkv_ö_√xt
.
	goff£t
+
	gÀn_size
 >
FILE_SIZE
)

389 
kv_ö_√xt
.
off£t
 = 
íåy_size
+
LF_SIZE
;

390 
	gkv_ö_√xt
.
	gfûe
++;

391 i‡(
	gkv_ö_√xt
.
	gfûe
 >
fûe_max
)

393 i‡(
kv_ö_√xt
.
fûe
 * 
LOG_RATIO
 * 
num_of_thªad
 <
fûe_num
)

394 
√w_log_fûe
();

396 
	gkv_ö_√xt
.
	gfûe
 = 0;

398 
	gkv_ö
.
	gfûe
 = 
kv_ö_√xt
.
fûe
;

399 
	gkv_ö
.
	goff£t
 = 0;

402 
Node_off£t
 
	gíd_off£t
 = 
off£t_to_node
(
°¨t_node_off£t
)->
íd_off£t
;

403 
Node_mëa
* 
	gíd_mëa
 = 
off£t_to_node
(
íd_off£t
);

405 i‡(
	gíd_mëa
->
	gsize
 +Énd_mëa->
	gÊush_size
 + 
	gíåy_size
 + 
	gÀn_size
 >
NODE_BUFFER
)

408 i‡(
íd_mëa
->
∑π
 =
PART_MAX
-1)

417 
rv
.
Àn
 = 0;

418  
	grv
;

422 
	gíd_off£t
 = 
≠≥nd_node
(
°¨t_node_off£t
);

423 
	gíd_mëa
 = 
off£t_to_node
(
íd_off£t
);

428 
uöt16_t
 
	gkv_off£t
 = (
Node_off£t
)*3 + 
íd_mëa
->
size
 +Énd_mëa->
Êush_size
;

429 
uöt16_t
 
	gz
 = 0;

430 
uöt16_t
 
	gvl16
 = 
vÆue_Àn
;

431 * c⁄° 
	gde°
 = 
pmem_addr
[
døm_num
[
kv_ö
.
fûe
]]+kv_ö.
off£t
;

435 
mem˝y
(
de°
,&
vl16
,
Àn_size
);

436 
mem˝y
(
de°
+
Àn_size
,
key_p
,
key_size
);

437 
mem˝y
(
de°
+
Àn_size
+
key_size
,
vÆue_p
,
vÆue_Àn
);

438 
mem˝y
(
de°
+
íåy_size
,&
íd_off£t
,(
Node_off£t
));

439 
mem˝y
(
de°
+
íåy_size
+(
Node_off£t
),&
kv_off£t
,(
uöt16_t
));

440 
mem˝y
(
de°
+
íåy_size
+(
Node_off£t
)+(
uöt16_t
),&
z
,(uint16_t));

442 
pmem_mem˝y
(
pmem_¨øy
[
kv_ö
.
fûe
]+kv_ö.
off£t
+
Àn_size
,
de°
+Àn_size,
íåy_size
+
LF_SIZE
+Àn_size,
PMEM_F_MEM_NONTEMPORAL
);

443 
_mm_s„n˚
();

444 
pmem_mem˝y
(
pmem_¨øy
[
kv_ö
.
fûe
]+kv_ö.
off£t
,
de°
,
Àn_size
,
PMEM_F_MEM_NONTEMPORAL
);

445 
_mm_s„n˚
();

449 
	grv
.
	gnode_off£t
.
	gfûe
 = 
døm_num
[
kv_ö
.
fûe
];

450 
	grv
.
	gnode_off£t
.
	goff£t
 = 
kv_ö
.
off£t
 / (
Node
);

451 
	grv
.
	gkv_off£t
 = 
kv_ö
.
off£t
 % (
Node
);

452 
	grv
.
	gÀn
 = 
vÆue_Àn
;

454 
	gíd_mëa
->
	gÊush_size
+=
íåy_size
;

455 
Node_mëa
* 
	g°¨t_mëa
 = 
off£t_to_node
(
íd_mëa
->
°¨t_off£t
);

456 
	g°¨t_mëa
->
	ggroup_size
+=
íåy_size
;

458 i‡(
	gíd_mëa
->
	gÊush_˙t
 =
íd_mëa
->
Êush_max
)

460 
íd_mëa
->
Êush_max
*=2;

461 
	gíd_mëa
->
	gÊush_kv
 = (**)
ªÆloc
(
íd_mëa
->
Êush_kv
,(*)*íd_mëa->
Êush_max
);

463 
	gíd_mëa
->
	gÊush_kv
[
íd_mëa
->
Êush_˙t
++] = 
de°
;

465 
	gkv_ö
 = 
kv_ö_√xt
;

467  
	grv
;

469 
VÆueE¡ry
 
	gLOG
::
ö£π_log
(
Node_off£t
 
node_off£t
,* &
key_p
, * &
vÆue_p
)

471  
ö£π_log
(
node_off£t
,
key_p
,
vÆue_p
,
vÆue_size
);

473 
	gLOG
::
ªady
(
vÆue_Àn
)

475 
size
 = 
Àn_size
 + 
key_size
 + 
vÆue_Àn
 + 
LF_SIZE
;

478 
LogOff£t
 
	gkv_ö2
;

479 
	gt_fûe
,
	gt_off£t
;

480 
	gt_fûe
 = 
kv_ö
.
fûe
;

481 
	gt_off£t
 = 
kv_ö
.
off£t
;

482 
	gt_off£t
+=
size
;

484 i‡(
	gt_off£t
 % 2)

485 ++
	gt_off£t
;

487 i‡(
	gt_off£t
 >
FILE_SIZE
)

489 
t_off£t
 = 
size
;

490 i‡(
	gt_off£t
 % 2)

491 ++
	gt_off£t
;

492 
	gt_fûe
++;

493 i‡(
	gt_fûe
 >
fûe_max
)

494 
t_fûe
 = 0;

496 
	gkv_ö2
.
	gfûe
 = 
t_fûe
;

497 
	gkv_ö2
.
	goff£t
 = 
t_off£t
;

499 
	grv
;

500 * 
	gkvp
;

501 
uöt16_t
 
	gvl16
;

502 
Node_off£t
 
	gnode_off£t
;

503 
Node_off£t
 
	g°¨t_off£t
;

504 c⁄° 
	gdeÁu…_size
 = 
Àn_size
 + 
key_size
 + 
LF_SIZE
;

506 (
	gkv_ö2
.
	gfûe
 =
kv_out
.
fûe
 && 
kv_ö2
.
off£t
 < kv_out.offset) ||

507 (((
kv_ö2
.
fûe
+1)%
fûe_max
Ë=
kv_out
.fûê&& kv_ö2.
off£t
 > kv_out.offset)

510 
kvp
 = (*)
pmem_addr
[
døm_num
[
kv_out
.
fûe
]] + kv_out.
off£t
;

511 
	gvl16
 = *((
uöt16_t
*)
kvp
);

512 i‡(
	gvl16
 & 
	gINV_BIT
)

514 
	gvl16
-=
INV_BIT
;

515 
	gkv_out
.
	goff£t
+=
deÁu…_size
+
vl16
;

516 i‡(
	gkv_out
.
	goff£t
 % 2)

517 ++
	gkv_out
.
	goff£t
;

519 if(
	gvl16
 == 0)

521 
kv_out
.
fûe
 = (kv_out.fûe+1)%
fûe_max
;

522 
	gkv_out
.
	goff£t
 = 0;

526 
	gnode_off£t
 = *((
Node_off£t
*)(
kvp
+
Àn_size
+
key_size
+
vl16
));

527 
	g°¨t_off£t
 = 
gë_°¨t_off£t
(
node_off£t
);

531 i‡(*((
	guöt16_t
*)
	gkvp
Ë& 
	gINV_BIT
)

535 i‡(
öc_ªf
(
°¨t_off£t
))

537 
	grv
 = 
Êush
(
node_off£t
);

538 i‡(
	grv
 == 1)

540 
dec_ªf
(
°¨t_off£t
);

543 i‡(
	grv
 == 0)

546 
dec_ªf
(
°¨t_off£t
);

549 
	gkv_out
.
	goff£t
+=
deÁu…_size
+
vl16
;

550 i‡(
	gkv_out
.
	goff£t
 % 2)

551 ++
	gkv_out
.
	goff£t
;

	@/home/cgmin/pmem/ph/ph/log.h

2 #i‚de‡
PH_LOG


3 
	#PH_LOG


	)

6 
	~<©omic
>

11 
«me•a˚
 
	gPH


14 
	#USE_DRAM_CACHE


	)

26 c⁄° 
size_t
 
	gVALUE_FIRST_MASK
 = 0xc000000000000000;

27 c⁄° 
	gVALUE_FIRST_SHIFT
 = 62;

28 c⁄° 
size_t
 
	gVALUE_SECOND_MASK
 = 0x3ff0000000000000;

29 c⁄° 
	gVALUE_SECOND_SHIFT
 = 52;

30 c⁄° 
size_t
 
	gVALUE_THIRD_MASK
 = 0x000fffffffffffff;

32 c⁄° 
size_t
 
	ghódî_size
 = (
uöt64_t
);

35 
öô_log
(
num_pmem
,
num_log
);

36 
˛ón_log
();

46 
˛ass
 
	gPH_Thªad
;

48 ˛as†
	cDoubÀLog


52 
	gpublic
:

55 
size_t
 
my_size
;

56 
size_t
 
	gso·_adv_off£t
;

59 * 
	gpmemLogAddr
;

64 * 
	gdømLogAddr
;

71 vﬁ©ûê
size_t
 
	ghód_sum
;

72 vﬁ©ûê
size_t
 
	gèû_sum
;

76 
size_t
 
	gmö_èû_sum
;

79 
Døm_Li°
** 
	gdøm_li°_poﬁ
 = 
NULL
;

80 
	gdøm_li°_poﬁ_max
;

81 
	gdøm_li°_poﬁ_˙t
;

82 
	gdøm_li°_poﬁ_Ælo˚d
;

83 
Døm_Li°
* 
	g‰ì_døm_li°_hód
 = 
NULL
;

93 
	gpublic
:

94 
öô
(* 
fûeP©h
,
size_t
 
size
);

95 
˛ón
();

97 
ªady_log
();

101 
ö£π_pmem_log
(
uöt64_t
 
key
,* 
vÆue
);

102 
ö£π_døm_log
(
uöt64_t
 
vîsi⁄
, uöt64_à
key
,* 
vÆue
);

103 
wrôe_vîsi⁄
(
uöt64_t
 
vîsi⁄
);

113 
Døm_Li°
* 
≠≥nd_√w_døm_li°
(
uöt64_t
 
vîsi⁄
,uöt64_à
key
,* 
vÆue
);

114 
ªmove_døm_li°
(
Døm_Li°
* 
dl
);

116 
	glog_num
;

118 
	g°d
::
©omic
<
uöt8_t
> 
u£
=0;

119 
	g°d
::
©omic
<
uöt8_t
> 
evi˘_Æloc
=0;

122 
DoubÀLog
* 
doubÀLogLi°
;

124 
ölöe
 * 
	$vÆue_to_log_addr
(
uöt64_t
 
vÆue
)

126  
doubÀLogLi°
[(
vÆue
 & 
VALUE_SECOND_MASK
)>>
VALUE_SECOND_SHIFT
].
dømLogAddr
 + (vÆuê& 
VALUE_THIRD_MASK
);

127 
	}
}

129 
ölöe
 
uöt64_t
 
	$log_addr_to_vÆue
(
log_num
,
size_t
 
off£t
)

131  
	`size_t
(1Ë<< 
VALUE_FIRST_SHIFT
 + size_t(
log_num
Ë<< 
VALUE_SECOND_SHIFT
 + 
off£t
;

132 
	}
}

	@/home/cgmin/pmem/ph/ph/ph_test.cpp

1 
	~<°dio.h
>

2 
	~<time.h
>

3 
	~<±hªad.h
>

5 
	~<°dlib.h
>

7 
	~"globÆ2.h
"

11 c⁄° 
size_t
 
	gvÆue_size
 = 100;

12 c⁄° 
size_t
 
	gkey_ønge
 = 100*1000*1000;

13 c⁄° 
size_t
 
	gtŸÆ_›s
 = 1000*1000*1000;

20 
	#THREAD_NUM
 4

	)

21 
	#PMEM_NUM
 1

	)

22 
	#EVICT_NUM
 4

	)

24 
	#PRINT_OPS


	)

26 
	eOP_TYPE


28 
	mINSERT_OP
,

29 
	mREAD_OP
,

33 
	sP¨amëî


35 
	mPH
::
PH_I¡îÁ˚
 *
phi
;

36 
	m›s
;

37 
size_t
 
	mtime
;

38 
size_t
 
	m›_id
;

39 
OP_TYPE
 
	m›_ty≥
;

42 
	#VALIDATION


	)

44 
size_t
 
	$key_gí
()

46 
size_t
 
v1
,
v2
,
v3
;

47 
v1
 = 
	`ønd
()%1000;

48 
v2
 = 
	`ønd
()%1000;

49 
v3
 = 
	`ønd
()%1000;

50  (
v1
 + 
v2
 * 1000 + 
v3
 * 1000000Ë% 
key_ønge
;

51 
	}
}

53 *
	$run
(*
∑ømëî
)

55 
i
;

56 
P¨amëî
 *
∑ø
 = (P¨amëî*)
∑ømëî
;

58 
uöt64_t
 
key
;

59 
vÆue
[
vÆue_size
];

61 
time•ec
 
ts1
,
ts2
,
ts3
,
ts4
;

62 
∑ø
->
time
 = 0;

64 
	`˛ock_gëtime
(
CLOCK_MONOTONIC
,&
ts1
);

65 i‡(
∑ø
->
›_ty≥
 =
INSERT_OP
)

67 #ifde‡
PRINT_OPS


68 
size_t
 
ﬁd_›s
=0;

69 
	`˛ock_gëtime
(
CLOCK_MONOTONIC
,&
ts3
);

71 
i
=0;i<
∑ø
->
›s
;i++)

75 
key
 = 
	`key_gí
();

76 *(
uöt64_t
*)
vÆue
 = 
∑ø
->
›_id
+
i
;

77 
∑ø
->
phi
->
	`ö£π_›
(
key
,
vÆue
);

79 #ifde‡
PRINT_OPS


80 
	`˛ock_gëtime
(
CLOCK_MONOTONIC
,&
ts4
);

81 i‡((
ts4
.
tv_£c
-
ts3
.tv_£c)*1000000000+ts4.
tv_n£c
-ts3.tv_nsec > 1000000000)

83 
	`¥ötf
("ﬁd op†%lu op†%d dif‡%lu\n",
ﬁd_›s
,
i
,i-old_ops);

84 
ﬁd_›s
 = 
i
;

85 
ts3
 = 
ts4
;

92 i‡(
∑ø
->
›_ty≥
 =
READ_OP
)

94 
i
=0;i<
∑ø
->
›s
;i++)

96 
key
 = (
∑ø
->
›_id
+
i
)%
key_ønge
;

97 i‡(
∑ø
->
phi
->
	`ªad_›
(
key
,
vÆue
) < 0)

98 
	`¥ötf
("not found!\n");

99 #ifde‡
VALIDATION


100 i‡(*(
uöt64_t
*)
vÆue
 !
∑ø
->
›_id
+
i
)

101 
	`¥ötf
("vÆid©i⁄ faû key %lu vÆuê%lu\n",
key
,(*(
uöt64_t
*)
vÆue
));

107 
	`˛ock_gëtime
(
CLOCK_MONOTONIC
,&
ts2
);

109 
∑ø
->
time
 = (
ts2
.
tv_£c
-
ts1
.tv_£c)*1000000000+ts2.
tv_n£c
-ts1.tv_nsec;

110 
∑ø
->
phi
->
	`íd_›
();

111  
NULL
;

112 
	}
}

115 
	$w‹k
(
PH
::
PH_I¡îÁ˚
 &
phi
, 
size_t
 
›s
, 
OP_TYPE
 
›_ty≥
)

119 
P¨amëî
 
∑ø
[100];

121 
i
;

122 
i
=0;i<
THREAD_NUM
;i++)

124 
∑ø
[
i
].
phi
 = &phi;

125 
∑ø
[
i
].
›s
 = ops/
THREAD_NUM
;

126 
∑ø
[
i
].
›_id
 = (
›s
/
THREAD_NUM
)*i;

127 
∑ø
[
i
].
›_ty≥
 = op_type;

130 
	`¥ötf
("keyÑ™gê%lu\n",
key_ønge
);

131 
	`¥ötf
("›†%lu\n",
›s
);

135 
±hªad_t
 
±hªad
[100];

136 
i
=0;i<
THREAD_NUM
;i++)

138 
	`±hªad_¸óã
(&
±hªad
[
i
],
NULL
,
run
,(*)&
∑ø
[i]);

143 
size_t
 
time
=0;

144 
i
=0;i<
THREAD_NUM
;i++)

146 
	`±hªad_joö
(
±hªad
[
i
],
NULL
);

147 
time
+=
∑ø
[
i
].time;

149 
time
/=
THREAD_NUM
;

151 
d›s
=
›s
;

152 
	`¥ötf
("timêsum %luÇs\n",
time
);

153 
	`¥ötf
("œàavg %luÇs\n",
time
/(
›s
/
THREAD_NUM
));

154 
	`¥ötf
("M›†avg %lf\n",
d›s
*1000/
time
);

155 
	`¥ötf
("GB/†avg %lf\n",
d›s
*(8+8+
vÆue_size
+4)*1000*1000*1000/1024/1024/1024/
time
);

157 
	}
}

158 
	$maö
()

161 
	`¥ötf
("THREAD_NUM %d\n",
THREAD_NUM
);

162 
	`¥ötf
("PMEM_NUM %d\n",
PMEM_NUM
);

164 
	`¥ötf
("ph_tset start\n");

166 
PH
::
PH_I¡îÁ˚
 
phi
;

168 
phi
.
	`globÆ_öô
(
vÆue_size
,
key_ønge
,
THREAD_NUM
,
PMEM_NUM
,
EVICT_NUM
);

171 
phi
.
	`run_evi˘_thªad
();

173 
size_t
 
›s
=
tŸÆ_›s
;

175 
	`¥ötf
("insert\n");

176 
	`w‹k
(
phi
,
›s
,
INSERT_OP
);

177 
	`¥ötf
("read\n");

178 
	`w‹k
(
phi
,
›s
,
READ_OP
);

180 
phi
.
	`globÆ_˛ón
();

181 
	`¥ötf
("ph_testÉnd\n");

183 
	}
}

	@/home/cgmin/pmem/ph/ph/query.cpp

1 
	~"quîy.h
"

2 
	~"hash.h
"

3 
	~"d©a.h
"

4 
	~"thªad.h
"

6 #i‚de‡
NULL


7 
	#NULL
 0

	)

10 
	~<°dio.h
>

11 
	~<°dlib.h
>

12 
	~<°rög.h
>

14 
	~<x86öåö.h
>

19 
	#¥öt
 0

	)

25 
«me•a˚
 
	gPH


28 #ifde‡
idÀ_thªad


30 
thªad_loˇl
 
PH_Thªad
* 
my_thªad
;

31 
	#THREAD_RUN
 
my_thªad
->
ru¬ög
=1;

	)

32 
	#THREAD_IDLE
 
my_thªad
->
ru¬ög
=0;

	)

36 
	#THREAD_RUN


	)

37 
	#THREAD_IDLE


	)

43 
uöt64_t
 
qâ1
,
qâ2
,
qâ3
,
qâ4
,
qâ5
,
qâ6
,
qâ7
,
qâ8
;

44 
tf
()

46 
¥ötf
("test function\n");

48 
¥öt_quîy
(
Quîy
* 
quîy
)

50 
¥ötf
("print query\n");

51 
	gi
;

52 
¥ötf
("key %d ",
quîy
->
key_Àn
);

53 
	gi
=0;i<8;i++)

54 
¥ötf
("[%d]",()
quîy
->
key_p
[
i
]);

55 
¥ötf
("\n");

56 
¥ötf
("vÆuê%d ",
quîy
->
vÆue_Àn
);

57 
	gi
=0;i<
	gquîy
->
	gvÆue_Àn
;i++)

58 
¥ötf
("[%d]",()
quîy
->
vÆue_p
[
i
]);

59 
¥ötf
("\n");

74 
öô_quîy
(
Quîy
* 
quîy
)

76 
	gquîy
->
	gnode_d©a
 = 
NULL
;

78 
	gquîy
->
	gsˇn_off£t
 = 
TAIL_OFFSET_u
.
no_32
;

82 
lookup_quîy
(* &
key_p
, * &
ªsu…_p
,* 
ªsu…_Àn_p
)

85 #ifde‡
qâ


86 
time•ec
 
	gts1
,
	gts2
,
	gts3
,
	gts4
;

87 
˛ock_gëtime
(
CLOCK_MONOTONIC
,&
ts1
);

88 
_mm_m„n˚
();

91 
VÆueE¡ry
 
	gve
;

93 c⁄° 
	gkls
 = 
PH_KEY_SIZE
+
PH_LEN_SIZE
;

95 
upd©e_‰ì_˙t
();

96 
	gTHREAD_RUN


97 #ifde‡
qâ


102 #ifde‡
ªad_lock


106 
	gve
 = 
föd_poöt_íåy
(
key_p
);

107 #ifde‡
qâ


108 
_mm_m„n˚
();

109 
˛ock_gëtime
(
CLOCK_MONOTONIC
,&
ts4
);

111 
	gqâ6
+=(
ts4
.
tv_£c
-
ts1
.tv_£c)*1000000000+ts4.
tv_n£c
-ts1.tv_nsec;

114 #ifde‡
qâ


115 
˛ock_gëtime
(
CLOCK_MONOTONIC
,&
ts3
);

116 
_mm_m„n˚
();

119 i‡(
	gve
.
	gnode_off£t
 =
INIT_OFFSET
 || 
ve
.
kv_off£t
 == 0)

122 
mem˝y
(
ªsu…_p
,
em±y
,
em±y_Àn
);

123 *
	gªsu…_Àn_p
 = 
em±y_Àn
;

126 
THREAD_IDLE


139 #ifde‡
ªad_lock


141 i‡(
öc_ªf
(
ve
.
node_off£t
))

162 *
	gªsu…_Àn_p
 = 
ve
.
Àn
;

168 i‡((*
	gªsu…_Àn_p
 & (1 << 15)) != 0)

171 
mem˝y
(
ªsu…_p
,
em±y
,
em±y_Àn
);

172 *
	gªsu…_Àn_p
 = 
em±y_Àn
;

173 *
	gªsu…_Àn_p
 = 0;

181 
mem˝y
(
ªsu…_p
,(*)
off£t_to_node_d©a
(
ve
.
node_off£t
)+ve.
kv_off£t
+
kls
,*
ªsu…_Àn_p
);

182 #ifde‡
ªad_lock


183 
dec_ªf
(
ve
.
node_off£t
);

194 #ifde‡
qâ


195 
_mm_m„n˚
();

196 
˛ock_gëtime
(
CLOCK_MONOTONIC
,&
ts4
);

197 
	gqâ7
+=(
ts4
.
tv_£c
-
ts3
.tv_£c)*1000000000+ts4.
tv_n£c
-ts3.tv_nsec;

198 
	gqâ8
+=(
ts4
.
tv_£c
-
ts1
.tv_£c)*1000000000+ts4.
tv_n£c
-ts1.tv_nsec;

202 
THREAD_IDLE


223 
lookup_quîy
(* &
key_p
, 
°d
::
°rög
 *
vÆue
)

226 
VÆueE¡ry
 
ve
;

227 c⁄° 
	gkls
 = 
PH_KEY_SIZE
+
PH_LEN_SIZE
;

228 
upd©e_‰ì_˙t
();

229 
THREAD_RUN


230 
	gve
 = 
föd_poöt_íåy
(
key_p
);

231 i‡(
	gve
.
	gnode_off£t
 =
INIT_OFFSET
 || 
ve
.
kv_off£t
 == 0)

233 
vÆue
->
assign
((*)
em±y
,
em±y_Àn
);

235 
THREAD_IDLE


246 * 
	gkv_p
 = (*)
off£t_to_node_d©a
(
ve
.
node_off£t
)+ve.
kv_off£t
;

247 
uöt16_t
 
	gÀn
 = *((uöt16_t*)(
kv_p
));

248 
	gvÆue
->
assign
((*)
kv_p
+
kls
,
Àn
);

256 
	gvÆue
->
assign
((*)
off£t_to_node_d©a
(
ve
.
node_off£t
)+ve.
kv_off£t
+
kls
,ve.
Àn
);

259 
THREAD_IDLE


265 
dñëe_quîy
(* 
key_p
)

268 
upd©e_‰ì_˙t
();

271 * 
	gkv_p
;

272 
VÆueE¡ry
 
	gve
;

273 
	goff£t
;

280 
	gve
 = 
föd_poöt_íåy
(
key_p
);

281 i‡(
	gve
.
	gnode_off£t
 =
INIT_OFFSET
)

286 #ifde‡
•lô_thªad


287 i‡(
öc_ªf
(
ve
.
node_off£t
Ë|| 
åy_•lô
(ve.node_offset))

289 i‡(
öc_ªf
(
ve
.
node_off£t
))

292 
	gkv_p
 = (*)
off£t_to_node_d©a
(
ve
.
node_off£t
Ë+ ve.
kv_off£t
;

293 i‡(*((
	guöt64_t
*)
	gkv_p
Ë!*((
uöt64_t
*)
key_p
))

295 
dec_ªf
(
ve
.
node_off£t
);

309 
dñëe_kv
(
kv_p
);

311 
övÆid©e_kv
(
ve
);

312 
ªmove_poöt_íåy
(
key_p
);

317 
dec_ªf
(
ve
.
node_off£t
);

338 
	#kìp_lock


	)

340 
ö£π_quîy
(* &
key_p
, * &
vÆue_p
)

342 
ö£π_quîy
(
key_p
,
vÆue_p
,
vÆue_size
);

345 
ö£π_quîy
(* &
key_p
, * &
vÆue_p
,&
vÆue_Àn
)

354 * 
	gkv_p
;

356 
VÆueE¡ry_u
 
	gve_u
;

358 vﬁ©ûê
uöt64_t
* 
	gv64_p
;

359 * 
	gu∆ock
;

362 
	gc⁄töue_Àn
;

364 
	gc⁄töue_Àn
 = 0;

366 
	grv
;

368 
	gã°
=0,
	gã°2
=0;

369 
	gz
 = 0;

370 
	gec
=0;

373 
VÆueE¡ry_u
 
	gﬁd_ve_u
;

374 
Node_off£t
 
	glocked_off£t
;

375 * 
	g√w_kv_p
;

377 
Node_off£t
 
	g°¨t_off£t
;

378 #ifde‡
qâ


379 
time•ec
 
	gts1
,
	gts2
,
	gts3
,
	gts4
,
	gts5
,
	gts6
;

381 
˛ock_gëtime
(
CLOCK_MONOTONIC
,&
ts1
);

382 
_mm_m„n˚
();

384 
upd©e_‰ì_˙t
();

386 
THREAD_RUN


390 i‡(
	g¥öt
)

391 
¥ötf
("insertÜoop\n");

392 #ifde‡
qâ


393 
˛ock_gëtime
(
CLOCK_MONOTONIC
,&
ts3
);

394 
_mm_m„n˚
();

403 
	gve_u
.
	gve
.
	gnode_off£t
 = 
INIT_OFFSET
;

404 #ifde‡
kìp_lock


406 
	gv64_p
 = 
föd_‹_ö£π_poöt_íåy
(
key_p
,&
u∆ock
);

408 
	gﬁd_ve_u
.
	gve_64
 = *
v64_p
;

413 
	gve_u
.
	gve
 = 
föd_poöt_íåy
(
key_p
);

419 
	gﬁd_ve_u
.
	gve
.
	gnode_off£t
 !
INIT_OFFSET
)

431 
°¨t_off£t
 = 
gë_°¨t_off£t
(
ﬁd_ve_u
.
ve
.
node_off£t
);

432 #ifde‡
•lô_thªad


433 i‡(
öc_ªf
(
°¨t_off£t
Ë|| 
åy_•lô
(start_offset))

435 i‡(
öc_ªf
(
°¨t_off£t
))

438 
	gve_u
.
	gve
.
	gnode_off£t
 = 
°¨t_off£t
;

476 #ifde‡
kìp_lock


477 
u∆ock_íåy
(
u∆ock
);

479 
	gv64_p
 = 
föd_‹_ö£π_poöt_íåy
(
key_p
,&
u∆ock
);

481 
	gﬁd_ve_u
.
	gve_64
 = *
v64_p
;

485 
	gve_u
.
	gve
 = 
föd_poöt_íåy
(
key_p
);

491 
	gvï
 = &
ve
;

492 
	gvï
->
	gnode_off£t
 = 0;

496 i‡(
	gve_u
.
	gve
.
	gnode_off£t
 =
INIT_OFFSET
)

499 i‡(
¥öt
)

500 
¥ötf
("findÇode\n");

503 i‡((
	gve_u
.
	gve
.
	gnode_off£t
 = 
föd_ønge_íåy2
(
key_p
,&
c⁄töue_Àn
)Ë=
INIT_OFFSET
)

520 
u∆ock_íåy
(
u∆ock
);

526 i‡(
	gec
 > 1000)

530 
¥ötf
("noÑangeÉntry\n");

531 
föd_ö_log
(
key_p
,
c⁄töue_Àn
);

533 
föd_ö_log
(
key_p
,
c⁄töue_Àn
+1);

535 
	gve_u
.
	gve
.
	gnode_off£t
 = 
föd_ønge_íåy
(
key_p
,&
c⁄töue_Àn
);

536 
¥ötf
("%d %d\n",
ve_u
.
ve
.
node_off£t
.
fûe
,ve_u.ve.node_off£t.
off£t
);

538 
sˇnf
("%d",&
ec
);

544 #ifde‡
•lô_thªad


545 i‡(
öc_ªf
(
ve_u
.
ve
.
node_off£t
Ë|| 
åy_•lô
(ve_u.ve.node_offset))

547 if(
öc_ªf
(
ve_u
.
ve
.
node_off£t
))

550 
	gﬁd_ve_u
.
	gve
.
	gnode_off£t
 = 
INIT_OFFSET
;

582 
u∆ock_íåy
(
u∆ock
);

584 i‡(
	gec
 > 100000)

587 
¥ötf
("locked\n");

588 
föd_ö_log
(
key_p
,
c⁄töue_Àn
);

590 
föd_ö_log
(
key_p
,
c⁄töue_Àn
+1);

592 
¥ötf
("%d\n",()
off£t_to_node
(
ve_u
.
ve
.
node_off£t
)->
°©e
);

593 
sˇnf
("%d",&
ec
);

617 #ifde‡
qâ


618 
_mm_m„n˚
();

619 
˛ock_gëtime
(
CLOCK_MONOTONIC
,&
ts4
);

620 
	gqâ2
+=(
ts4
.
tv_£c
-
ts3
.tv_£c)*1000000000+ts4.
tv_n£c
-ts3.tv_nsec;

624 #ifde‡
qâ


625 
˛ock_gëtime
(
CLOCK_MONOTONIC
,&
ts3
);

626 
_mm_m„n˚
();

629 
	glocked_off£t
 = 
ve_u
.
ve
.
node_off£t
;

630 i‡(
	g√w_kv_p
 = 
ö£π_kv
(
ve_u
.
ve
.
node_off£t
,
key_p
,
vÆue_p
,
vÆue_Àn
))

632 #ifde‡
qâ


633 
˛ock_gëtime
(
CLOCK_MONOTONIC
,&
ts5
);

635 
move_to_íd_off£t
(
ve_u
.
ve
.
node_off£t
);

643 
	gve_u
.
	gve
.
	gkv_off£t
 = 
√w_kv_p
-(*)
off£t_to_node_d©a
(
ve_u
.
ve
.
node_off£t
);

646 
	gve_u
.
	gve
.
	gÀn
 = 
vÆue_Àn
;

648 #ifde‡
kìp_lock


650 *
	gv64_p
 = 
ve_u
.
ve_64
;

651 
u∆ock_íåy
(
u∆ock
);

654 
ö£π_poöt_íåy
(
key_p
,
ve_u
.
ve
);

661 i‡(
	gﬁd_ve_u
.
	gve
.
	gnode_off£t
 !
INIT_OFFSET
)

674 
övÆid©e_kv
(
ﬁd_ve_u
.
ve
);

690 #ifde‡
qâ


691 
_mm_m„n˚
();

692 
˛ock_gëtime
(
CLOCK_MONOTONIC
,&
ts6
);

693 
	gqâ4
+=(
ts6
.
tv_£c
-
ts5
.tv_£c)*1000000000+ts6.
tv_n£c
-ts5.tv_nsec;

694 
˛ock_gëtime
(
CLOCK_MONOTONIC
,&
ts4
);

695 
	gqâ3
+=(
ts4
.
tv_£c
-
ts3
.tv_£c)*1000000000+ts4.
tv_n£c
-ts3.tv_nsec;

697 #ifde‡
•lô_thªad


698 i‡(
√ed_•lô
(
ve_u
.
ve
.
node_off£t
,
vÆue_Àn
))

700 i‡(
add_•lô
(
locked_off£t
) == 1)

705 
dec_ªf
(
locked_off£t
);

712 #ifde‡
qâ


713 
˛ock_gëtime
(
CLOCK_MONOTONIC
,&
ts5
);

715 #ifde‡
kìp_lock


716 
u∆ock_íåy
(
u∆ock
);

734 i‡(
	gc⁄töue_Àn
 == 0)

736 
c⁄töue_Àn
 = 
gë_c⁄töue_Àn
(
ve_u
.
ve
.
node_off£t
);

748 i‡(
•lô_‹_com∑˘
(
ve_u
.
ve
.
node_off£t
))

750 i‡(
	g¥öt
)

751 
¥ötf
("split\n");

767 i‡((
	grv
 = 
•lô2p
(
ve_u
.
ve
.
node_off£t
))<0)

770 
dec_ªf
(
locked_off£t
);

792 
	gc⁄töue_Àn
++;

796 i‡(
	g¥öt
)

797 
¥ötf
("splitÉnd\n");

808 i‡(
com∑˘2p
(
ve_u
.
ve
.
node_off£t
) < 0)

809 
dec_ªf
(
locked_off£t
);

834 #ifde‡
qâ


835 
_mm_m„n˚
();

836 
˛ock_gëtime
(
CLOCK_MONOTONIC
,&
ts6
);

837 
	gqâ5
+=(
ts6
.
tv_£c
-
ts5
.tv_£c)*1000000000+ts6.
tv_n£c
-ts5.tv_nsec;

840 i‡(
	g¥öt
)

841 
¥ötf
("insertÑetry\n");

842 #ifde‡
qâ


843 
_mm_m„n˚
();

845 
˛ock_gëtime
(
CLOCK_MONOTONIC
,&
ts4
);

846 
	gqâ3
+=(
ts4
.
tv_£c
-
ts3
.tv_£c)*1000000000+ts4.
tv_n£c
-ts3.tv_nsec;

849 
	gTHREAD_IDLE


852 #ifde‡
qâ


853 
_mm_m„n˚
();

854 
˛ock_gëtime
(
CLOCK_MONOTONIC
,&
ts2
);

855 
	gqâ1
+=(
ts2
.
tv_£c
-
ts1
.tv_£c)*1000000000+ts2.
tv_n£c
-ts1.tv_nsec;

861 #ifde‡
DOUBLE_LOG


862 
ö£π_quîy_l
(* &
key_p
, * &
vÆue_p
)

864 
ö£π_quîy_l
(
key_p
,
vÆue_p
,
vÆue_size
);

872 
ö£π_quîy_l
(* &
key_p
, * &
vÆue_p
,&
vÆue_Àn
)

874 * 
	gkv_p
;

876 
VÆueE¡ry_u
 
	gve_u
;

877 vﬁ©ûê
uöt64_t
* 
	gv64_p
;

878 * 
	gu∆ock
;

879 
	gc⁄töue_Àn
 = 0;

880 
VÆueE¡ry_u
 
	gﬁd_ve_u
;

881 
Node_off£t
 
	glocked_off£t
;

882 * 
	g√w_kv_p
;

884 
Node_off£t
 
	g°¨t_off£t
;

886 
upd©e_‰ì_˙t
();

888 
THREAD_RUN


890 
	gmy_thªad
->
	glog
->
ªady
(
vÆue_Àn
);

895 
	gve_u
.
	gve
.
	gnode_off£t
 = 
INIT_OFFSET
;

896 
	gv64_p
 = 
föd_‹_ö£π_poöt_íåy
(
key_p
,&
u∆ock
);

897 
	gﬁd_ve_u
.
	gve_64
 = *
v64_p
;

898 
	gﬁd_ve_u
.
	gve
.
	gnode_off£t
 !
INIT_OFFSET
)

900 i‡(
ﬁd_ve_u
.
ve
.
node_off£t
.
fûe
 & 
LOG_BIT
)

902 
uöt16_t
 
íåy_size
 = 
PH_KEY_SIZE
+
PH_LEN_SIZE
 +
ﬁd_ve_u
.
ve
.
Àn
;

903 i‡(
	gíåy_size
%2)

904 ++
	gíåy_size
;

906 
	g°¨t_off£t
 = 
gë_°¨t_off£t
(*((
Node_off£t
*)((*)
off£t_to_node_d©a
(
ﬁd_ve_u
.
ve
.
node_off£t
Ë+ old_ve_u.ve.
kv_off£t
 + 
íåy_size
)));

909 
	g°¨t_off£t
 = 
gë_°¨t_off£t
(
ﬁd_ve_u
.
ve
.
node_off£t
);

910 i‡(
öc_ªf
(
°¨t_off£t
))

921 
	gve_u
.
	gve
.
	gnode_off£t
 = 
°¨t_off£t
;

924 
u∆ock_íåy
(
u∆ock
);

925 
	gv64_p
 = 
föd_‹_ö£π_poöt_íåy
(
key_p
,&
u∆ock
);

926 
	gﬁd_ve_u
.
	gve_64
 = *
v64_p
;

928 i‡(
	gve_u
.
	gve
.
	gnode_off£t
 =
INIT_OFFSET
)

932 i‡((
ve_u
.
ve
.
node_off£t
 = 
föd_ønge_íåy2
(
key_p
,&
c⁄töue_Àn
)Ë=
INIT_OFFSET
)

934 i‡(
öc_ªf
(
ve_u
.
ve
.
node_off£t
))

936 
	gﬁd_ve_u
.
	gve
.
	gnode_off£t
 = 
INIT_OFFSET
;

941 
	glocked_off£t
 = 
ve_u
.
ve
.
node_off£t
;

943 
VÆueE¡ry_u
 
	grv
;

944 i‡((
	grv
.
	gve
 = 
my_thªad
->
log
->
ö£π_log
(
ve_u
.
ve
.
node_off£t
,
key_p
,
vÆue_p
,
vÆue_Àn
)).
	gÀn
 != 0)

950 *
v64_p
 = 
rv
.
ve_64
;

952 
u∆ock_íåy
(
u∆ock
);

953 i‡(
	gﬁd_ve_u
.
	gve
.
	gnode_off£t
 !
INIT_OFFSET
)

954 
övÆid©e_kv
(
ﬁd_ve_u
.
ve
);

955 
dec_ªf
(
locked_off£t
);

960 
u∆ock_íåy
(
u∆ock
);

961 i‡(
	gc⁄töue_Àn
 == 0)

962 
c⁄töue_Àn
 = 
gë_c⁄töue_Àn
(
ve_u
.
ve
.
node_off£t
);

963 i‡(
•lô_‹_com∑˘
(
ve_u
.
ve
.
node_off£t
))

965 i‡(
•lô
(
ve_u
.
ve
.
node_off£t
) >= 0)

966 ++
c⁄töue_Àn
;

968 
dec_ªf
(
locked_off£t
);

972 i‡(
com∑˘
(
ve_u
.
ve
.
node_off£t
) < 0)

973 
dec_ªf
(
locked_off£t
);

978 
	gTHREAD_IDLE


985 
dñëe_quîy_sˇn_íåy
(
Quîy
* 
quîy
)

987 
Node_mëa
* 
	gnode
;

988 
Node_off£t_u
 
	gnou
;

993 i‡(
	gquîy
->
	gsˇn_off£t
 !
TAIL_OFFSET_u
.
no_32
)

995 
nou
.
no_32
 = 
quîy
->
sˇn_off£t
;

996 
	gnode
 = 
off£t_to_node
(
nou
.
no
);

1000 i‡(
åy_©_lock
(
node
->
°©e
) == 0)

1016 
dñëe_sˇn_íåy
(
nou
.
no
,
quîy
);

1017 
	gquîy
->
	gsˇn_off£t
 = 
TAIL_OFFSET_u
.
no_32
;

1019 
©_u∆ock
(
node
->
°©e
);

1037 
sˇn_quîy
(
Quîy
* 
quîy
)

1047 
VÆueE¡ry
 
	gve
;

1048 
	gc⁄töue_Àn
;

1049 
Node
* 
	gnode_d©a
;

1050 
Node_off£t
 
	g°¨t_off£t
;

1051 
	gsize
;

1053 
upd©e_‰ì_˙t
();

1055 i‡(
	gquîy
->
	gnode_d©a
 =
NULL
)

1057 
quîy
->
node_d©a
 = (
Node
*)
mÆloc
((Node)*
PART_MAX
);

1058 i‡(
	gquîy
->
	gnode_d©a
 =
NULL
)

1059 
¥ötf
("node dataálloc fail\n");

1063 
dñëe_quîy_sˇn_íåy
(
quîy
);

1065 
	gnode_d©a
 = (
Node
*)
quîy
->
node_d©a
;

1072 
	gve
 = 
föd_poöt_íåy
(
quîy
->
key_p
);

1073 
	gve
.
	gnode_off£t
 !
INIT_OFFSET
)

1078 
°¨t_off£t
 = 
gë_°¨t_off£t
(
ve
.
node_off£t
);

1079 i‡(
öc_ªf
(
°¨t_off£t
))

1081 
	gve
.
	gnode_off£t
 = 
°¨t_off£t
;

1094 *
	gnode_d©a
 = *
off£t_to_node_d©a
(
ve
.
node_off£t
);

1095 
	gsize
 = 
off£t_to_node
(
ve
.
node_off£t
)->
size
;

1096 
ö£π_sˇn_li°
(
off£t_to_node
(
ve
.
node_off£t
),(*)
quîy
);

1097 
h¨d_u∆ock
(
ve
.
node_off£t
);

1098 
s‹t_node
(
node_d©a
,(*)(
quîy
->
s‹ãd_ödex
),&(quîy->
ödex_max
),
size
);

1101 
	gquîy
->
	gödex_num
 = 0;

1104 
©_lock
(
quîy
->
sˇn_lock
);

1105 
	gquîy
->
	gsˇn_off£t
 = 
ve
.
node_off£t
;

1107 
	gquîy
->
	gsˇn_lock
 = 0;

1115 *((
	guöt64_t
*)(
	gnode_d©a
->
	gbuf„r
+
	gquîy
->
	gs‹ãd_ödex
[
quîy
->
ödex_num
])Ë< *((uöt64_t*)quîy->
	gkey_p
))

1117 
	gquîy
->
	gödex_num
++;

1118 i‡(
	gquîy
->
	gödex_num
 >
quîy
->
ödex_max
)

1120 i‡(
adv™˚_off£t
((*)
quîy
) < 0)

1126 
	gsize
 = 
off£t_to_node
(
quîy
->
sˇn_off£t
)->
size
;

1127 
s‹t_node
(
node_d©a
,(*)(
quîy
->
s‹ãd_ödex
),&(quîy->
ödex_max
),
size
);

1128 
	gquîy
->
	gödex_num
=0;

1135 
	gve
 = 
föd_poöt_íåy
(
quîy
->
key_p
);

1139 i‡(
	gve
.
	gnode_off£t
 =
INIT_OFFSET
)

1141 
c⁄töue_Àn
 = 0;

1148 i‡((
	gve
.
	gnode_off£t
 = 
föd_ønge_íåy2
(
quîy
->
key_p
,&
c⁄töue_Àn
)Ë=
INIT_OFFSET
)

1155 i‡(
öc_ªf
(
ve
.
node_off£t
))

1159 
	goff£t2
 = 
föd_ønge_íåy2
(
quîy
->
key_p
,&
c⁄töue_Àn
);

1160 i‡(
	goff£t
 !
off£t2
)

1162 
h¨d_u∆ock
(
off£t
);

1163 
	goff£t
 = 
INIT_OFFSET
;

1168 *
	gnode_d©a
 = *
off£t_to_node_d©a
(
off£t
);

1169 
	gsize
 = 
off£t_to_node
(
off£t
)->
size
;

1170 
ö£π_sˇn_li°
(
off£t_to_node
(
off£t
),(*)
quîy
);

1171 
h¨d_u∆ock
(
off£t
);

1172 
s‹t_node
(
node_d©a
,(*)(
quîy
->
s‹ãd_ödex
),&(quîy->
ödex_max
),
size
);

1175 
	gquîy
->
	gödex_num
 = 0;

1178 
©_lock
(
quîy
->
sˇn_lock
);

1179 
	gquîy
->
	gsˇn_off£t
 = 
off£t
;

1181 
	gquîy
->
	gsˇn_lock
 = 0;

1189 *((
	guöt64_t
*)(
	gnode_d©a
->
	gbuf„r
+
	gquîy
->
	gs‹ãd_ödex
[
quîy
->
ödex_num
])Ë< *((uöt64_t*)quîy->
	gkey_p
))

1191 
	gquîy
->
	gödex_num
++;

1192 i‡(
	gquîy
->
	gödex_num
 >
quîy
->
ödex_max
)

1194 i‡(
adv™˚_off£t
((*)
quîy
) < 0)

1200 
s‹t_node
(
node_d©a
,(*)(
quîy
->
s‹ãd_ödex
),&(quîy->
ödex_max
),
size
);

1201 
	gquîy
->
	gödex_num
=0;

1217 
Node_off£t_u
 
	gnou
;

1218 
	gnou
.
	gno
 = 
ve
.
node_off£t
;

1220 
	gquîy
->
	gsˇn_off£t
 = 
nou
.
no_32
;

1223 
ö£π_sˇn_li°
(
ve
.
node_off£t
,
quîy
);

1231 
c›y_™d_s‹t_node
(
quîy
);

1233 
dec_ªf
(
ve
.
node_off£t
);

1245 
	gquîy
->
	gs‹ãd_kv_max
 > quîy->
	gs‹ãd_kv_i
)

1247 if(*((
	guöt64_t
*)(
	gquîy
->
	gs‹ãd_kv
[
quîy
->
s‹ãd_kv_i
]+
	gPH_LEN_SIZE
 )Ë>*((
uöt64_t
*)quîy->
key_p
))

1249 ++
	gquîy
->
	gs‹ãd_kv_i
;

1252 i‡(
adv™˚_off£t
(
quîy
) < 0)

1261 
√xt_quîy
(
Quîy
* 
quîy
,* 
ªsu…_p
,* 
ªsu…_Àn_p
)

1263 
upd©e_‰ì_˙t
();

1265 i‡(
	gquîy
->
	gsˇn_off£t
 =
TAIL_OFFSET_u
.
no_32
)

1268 
mem˝y
(
ªsu…_p
,
em±y
,
em±y_Àn
);

1269 *
	gªsu…_Àn_p
 = 
em±y_Àn
;

1276 *
	gªsu…_Àn_p
 = *((
uöt16_t
*)(
quîy
->
s‹ãd_kv
[quîy->
s‹ãd_kv_i
]));

1289 *
	gªsu…_Àn_p
+=8+2;

1291 
mem˝y
(
ªsu…_p
,
quîy
->
s‹ãd_kv
[quîy->
s‹ãd_kv_i
],*
ªsu…_Àn_p
);

1295 
	gquîy
->
	gs‹ãd_kv_i
++;

1296 
	gquîy
->
	gs‹ãd_kv_i
 >
quîy
->
s‹ãd_kv_max
)

1299 i‡(
adv™˚_off£t
(
quîy
) < 0)

1313 
√xt_quîy
(
Quîy
* 
quîy
,
°d
::
°rög
* 
ªsu…
)

1315 
THREAD_RUN


1316 
upd©e_‰ì_˙t
();

1318 i‡(
	gquîy
->
	gsˇn_off£t
 =
TAIL_OFFSET_u
.
no_32
)

1320 
ªsu…
->
assign
((*)
em±y
,
em±y_Àn
);

1321 
THREAD_IDLE


1326 
	gªsu…_Àn_p
;

1327 
	gªsu…_Àn_p
 = *((
uöt16_t
*)(
quîy
->
s‹ãd_kv
[quîy->
s‹ãd_kv_i
]));

1328 
	gªsu…_Àn_p
+=8+2;

1330 
	gªsu…
->
assign
((*)
quîy
->
s‹ãd_kv
[quîy->
s‹ãd_kv_i
],
ªsu…_Àn_p
);

1334 
	gquîy
->
	gs‹ãd_kv_i
++;

1335 
	gquîy
->
	gs‹ãd_kv_i
 >
quîy
->
s‹ãd_kv_max
)

1337 i‡(
adv™˚_off£t
(
quîy
) < 0)

1339 
THREAD_IDLE


1349 
THREAD_IDLE


1355 
‰ì_quîy
(
Quîy
* 
quîy
)

1370 
dñëe_quîy_sˇn_íåy
(
quîy
);

1371 
‰ì
(
quîy
->
node_d©a
);

1375 
size_t
 
sˇn_quîy2
(* 
key
,
˙t
,
°d
::
°rög
* 
sˇn_ªsu…
)

1377 
VÆueE¡ry
 
ve
;

1378 
	gc⁄töue_Àn
;

1379 
Node
* 
	gnode_d©a
;

1380 
Node_off£t
 
	g°¨t_off£t
;

1381 
	gsize
;

1382 
Node_mëa
* 
	gnode_mëa
;

1384 
THREAD_RUN


1385 
upd©e_‰ì_˙t
();

1387 
	gve
 = 
föd_poöt_íåy
(
key
);

1388 
	gve
.
	gnode_off£t
 !
INIT_OFFSET
)

1391 
°¨t_off£t
 = 
gë_°¨t_off£t
(
ve
.
node_off£t
);

1392 i‡(
öc_ªf
(
°¨t_off£t
))

1394 
	gve
.
	gnode_off£t
 = 
°¨t_off£t
;

1397 
	gve
 = 
föd_poöt_íåy
(
key
);

1400 i‡(
	gve
.
	gnode_off£t
 =
INIT_OFFSET
)

1402 
c⁄töue_Àn
 = 0;

1405 i‡((
	gve
.
	gnode_off£t
 = 
föd_ønge_íåy2
(
key
,&
c⁄töue_Àn
)Ë=
INIT_OFFSET
)

1407 i‡(
öc_ªf
(
ve
.
node_off£t
))

1415 
	gªsu…_num
,
	gªsu…_sum
=0;

1416 
Node_off£t
 
	gnode_off£t
 = 
ve
.
node_off£t
;

1417 
Node_off£t_u
 
	g√xt_off£t
;

1421 
	gªsu…_num
 = 
sˇn_node
(
node_off£t
,
key
,
˙t
-
ªsu…_sum
,
sˇn_ªsu…
);

1422 
	gªsu…_sum
+=
ªsu…_num
;

1423 
	gsˇn_ªsu…
+=
ªsu…_num
;

1425 i‡(
	g˙t
 <
ªsu…_sum
)

1427 
dec_ªf
(
node_off£t
);

1428  
	gªsu…_sum
;

1433 
	g√xt_off£t
.
	gno_32
 = 
off£t_to_node
(
node_off£t
)->
√xt_off£t
;

1434 i‡(
	g√xt_off£t
.
	gno
 =
TAIL_OFFSET
)

1436 
dec_ªf
(
node_off£t
);

1437  
	gªsu…_sum
;

1439 i‡(
öc_ªf
(
√xt_off£t
.
no
))

1443 
dec_ªf
(
node_off£t
);

1445 
	gnode_off£t
 = 
√xt_off£t
.
no
;

1447 
THREAD_IDLE


1450  
	gªsu…_sum
;

1455 
Node_off£t_u
 
	gnou
;

1456 
	gnou
.
	gno
 = 
ve
.
node_off£t
;

1461 
c›y_™d_s‹t_node
(
quîy
);

1463 
dec_ªf
(
ve
.
node_off£t
);

1475 
	gquîy
->
	gs‹ãd_kv_max
 > quîy->
	gs‹ãd_kv_i
)

1477 if(*((
	guöt64_t
*)(
	gquîy
->
	gs‹ãd_kv
[
quîy
->
s‹ãd_kv_i
]+
	gÀn_size
)Ë>*((
uöt64_t
*)quîy->
key_p
))

1479 ++
	gquîy
->
	gs‹ãd_kv_i
;

1482 i‡(
adv™˚_off£t
(
quîy
) < 0)

	@/home/cgmin/pmem/ph/ph/query.h

1 #¥agm®
⁄˚


3 
	#QUERY_BUFFER
 10000

	)

5 
	~<±hªad.h
>

6 
	~<©omic
>

7 
	~<°rög
>

9 
	~"globÆ.h
"

13 
«me•a˚
 
	gPH


16 
	sQuîy


35 * 
	gkey_p
;

36 * 
	gvÆue_p
;

37 
	g›
;

38 
	gkey_Àn
,
	gvÆue_Àn
;

40 
	gªf_off£t
;

43 vﬁ©ûê
uöt32_t
 
	gsˇn_off£t
;

44 * 
	gnode_d©a
;

52 * 
	gs‹ãd_kv
[100*
PART_MAX
];

53 
	gs‹ãd_kv_i
,
	gs‹ãd_kv_max
;

62 
öô_quîy
(
Quîy
* 
quîy
);

63 
ª£t_quîy
(
Quîy
* 
quîy
);

65 
‰ì_quîy
(
Quîy
* 
quîy
);

67 
lookup_quîy
(* &
key_p
, * &
ªsu…_p
,* 
ªsu…_Àn_p
);

68 
lookup_quîy
(* &
key_p
, 
°d
::
°rög
 *
vÆue
);

70 
dñëe_quîy
(* 
key_p
);

72 
ö£π_quîy
(* &
key_p
, * &
vÆue_p
);

73 
ö£π_quîy
(* &
key_p
, * &
vÆue_p
, &
vÆue_Àn
);

75 
ö£π_quîy_l
(* &
key_p
, * &
vÆue_p
);

76 
ö£π_quîy_l
(* &
key_p
, * &
vÆue_p
, &
vÆue_Àn
);

78 
sˇn_quîy
(
Quîy
* 
quîy
);

79 
√xt_quîy
(
Quîy
* 
quîy
,* 
ªsu…_p
,* 
ªsu…_Àn_p
);

80 
√xt_quîy
(
Quîy
* 
quîy
,
°d
::
°rög
* 
ªsu…
);

82 
size_t
 
sˇn_quîy2
(* 
key
,
˙t
,
°d
::
°rög
* 
sˇn_ªsu…
);

	@/home/cgmin/pmem/ph/ph/shared.h

1 #¥agm®
⁄˚


3 
«me•a˚
 
	gPH


7 
	sNodeAddr


12 
uöt32_t
 
	gpoﬁ_num
;

13 
uöt32_t
 
	gnode_off£t
;

16 c⁄° 
size_t
 
	gNODE_SIZE
 = 4096;

17 c⁄° 
size_t
 
	gNODE_BUFFER_SIZE
 = 
NODE_SIZE
-8;

19 
	sD©aNode


21 
NodeAddr
 
	g√xt_off£t
;

22 
	gbuf„r
[
NODE_BUFFER_SIZE
];

	@/home/cgmin/pmem/ph/ph/skiplist.cpp

2 
	~<©omic
>

3 
	~<°dlib.h
>

4 
	~<°dio.h
>

6 
	~"skùli°.h
"

7 
	~"lock.h
"

8 
	~"d©a2.h
"

10 
«me•a˚
 
	gPH


13 
size_t
 
HARD_EVICT_SPACE
;

14 
size_t
 
SOFT_EVICT_SPACE
;

19 c⁄° 
size_t
 
	gNODE_POOL_LIST_SIZE
 = 1024*1024;

20 c⁄° 
size_t
 
	gNODE_POOL_SIZE
 = 1024;

21 c⁄° 
size_t
 
	gSKIPLIST_NODE_POOL_LIMIT
 = 1024 * 4*3;

24 c⁄° 
size_t
 
	gKEY_MIN
 = 0x0000000000000000;

25 c⁄° 
size_t
 
	gKEY_MAX
 = 0xffffffffffffffff;

30 
Skùli°
* 
	gskùli°
;

31 
PH_Li°
* 
	gli°
;

33 
NodeAŒoˇt‹
* 
nodeAŒoˇt‹
;

35 
size_t
 
gëR™domLevñ
()

37 
size_t
 
	gÀvñ
 = 0;

38 
	gÀvñ
 < 
	gMAX_LEVEL
)

40 i‡(
ønd
()%2 == 0)

42 ++
	gÀvñ
;

44  
	gÀvñ
;

47 
	gSkùli°Node
::
£tLevñ
(
size_t
 
l
)

49 
Àvñ
 = 
l
;

50 
dñëe
 
	g√xt
;

51 
	g√xt
 = 
√w
 
°d
::
©omic
<
Skùli°Node
*>[
l
+1];

52 
	gbuût
 = 0;

55 
	gSkùli°Node
::
£tLevñ
()

57 
Àvñ
 = 
gëR™domLevñ
();

58 
dñëe
 
	g√xt
;

59 
	g√xt
 = 
√w
 
°d
::
©omic
<
Skùli°Node
*>[
Àvñ
+1];

60 
	gbuût
 = 0;

63 
	gSkùli°
::
öô
()

66 
node_poﬁ_li°
 = 
√w
 
Skùli°Node
*[
NODE_POOL_LIST_SIZE
];

69 
	gnode_poﬁ_li°
[0] = 
√w
 
Skùli°Node
[
NODE_POOL_SIZE
];

70 
	gnode_poﬁ_˙t
=0;

71 
	gnode_poﬁ_li°_˙t
 = 0;

72 
	gnode_‰ì_hód
 = 
NULL
;

74 
	gnode_Æloc_lock
 = 0;

76 
	gem±y_node
 = 
Æloc_¶_node
();

77 
	gem±y_node
->
	gkey
 = 
KEY_MIN
;

78 
	gem±y_node
->
	gmy_li°Node
 = 
li°
->
em±y_node
;

80 
	g°¨t_node
 = 
Æloc_¶_node
();

81 
	g°¨t_node
->
£tLevñ
(
MAX_LEVEL
);

82 
	g°¨t_node
->
	gkey
 = 
KEY_MIN
;

83 
	g°¨t_node
->
	gmy_li°Node
 = 
li°
->
°¨t_node
;

85 
	gíd_node
 = 
Æloc_¶_node
();

87 
	gíd_node
->
£tLevñ
(
MAX_LEVEL
);

88 
	gíd_node
->
	gkey
 = 
KEY_MAX
;

89 
	gíd_node
->
	gmy_li°Node
 = 
li°
->
em±y_node
;

91 
	gi
;

92 
	gi
=0;i<=
MAX_LEVEL
;i++)

93 
	g°¨t_node
->
	g√xt
[
i
] = 
íd_node
;

94 
	g°¨t_node
->
	gbuût
 = 
MAX_LEVEL
;

96 
NodeMëa
* 
	gnm_em±y
 = 
nodeAddr_to_nodeMëa
(
em±y_node
->
d©a_node_addr
);

97 
NodeMëa
* 
	gnm_°¨t
 = 
nodeAddr_to_nodeMëa
(
°¨t_node
->
d©a_node_addr
);

98 
NodeMëa
* 
	gnm_íd
 = 
nodeAddr_to_nodeMëa
(
íd_node
->
d©a_node_addr
);

100 
	gnodeAŒoˇt‹
->
lökNext
(
nm_em±y
,
nm_°¨t
);

101 
	gnodeAŒoˇt‹
->
lökNext
(
nm_°¨t
,
nm_íd
);

108 
	gSkùli°
::
˛ón
()

110 
¥ötf
("s¯˙à%ldÖoﬁ0 %∞Öoﬁ %∞\n",
node_poﬁ_li°_˙t
,
node_poﬁ_li°
[0],node_pool_list);

111 
	gi
;

112 
	gi
=0;i<=
node_poﬁ_li°_˙t
;i++)

115 
	gdñëe
[] 
	gnode_poﬁ_li°
[
i
];

118 
	gdñëe
[] 
	gnode_poﬁ_li°
;

122 
Skùli°Node
* 
	gSkùli°
::
Æloc_¶_node
()

125 
node_Æloc_lock
);

126 
©_lock2
(
node_Æloc_lock
);

128 i‡(
	gnode_‰ì_hód
)

130 
Skùli°Node
* 
	grv
 = 
node_‰ì_hód
;

131 
	gnode_‰ì_hód
 = 
node_‰ì_hód
->
√xt
[0];

132 
©_u∆ock2
(
node_Æloc_lock
);

133  
	grv
;

137 i‡(
	gnode_poﬁ_˙t
 >
NODE_POOL_SIZE
)

139 i‡(
node_poﬁ_li°_˙t
 >
SKIPLIST_NODE_POOL_LIMIT
)

141 
¥ötf
("no space forÇode!\n");

142  
	gNULL
;

144 ++
	gnode_poﬁ_li°_˙t
;

145 
	gnode_poﬁ_li°
[
node_poﬁ_li°_˙t
] = 
√w
 
Skùli°Node
[
NODE_POOL_SIZE
];

146 
	gnode_poﬁ_˙t
 = 0;

149 
Skùli°Node
* 
	gnode
 = &
node_poﬁ_li°
[
node_poﬁ_li°_˙t
][
node_poﬁ_˙t
];

150 
	gnode
->
	glock
 = 0;

151 
	gnode
->
	gdñëe_lock
 = 0;

152 
	gnode
->
	g√xt
 = 
NULL
;

153 
	gnode
->
£tLevñ
();

154 
	gnode
->
	gd©a_node_addr
 = 
nodeAŒoˇt‹
->
Æloc_node
();

158 
	gnode_poﬁ_˙t
++;

159 
©_u∆ock2
(
node_Æloc_lock
);

160  
	gnode
;

164 
	gSkùli°
::
‰ì_¶_node
(
Skùli°Node
* 
node
)

166 
©_lock2
(
node_Æloc_lock
);

167 
	gnode
->
	g√xt
[0] = 
node_‰ì_hód
;

168 
	gnode_‰ì_hód
 = 
node
;

169 
©_u∆ock2
(
node_Æloc_lock
);

172 
Skùli°Node
* 
	gSkùli°
::
föd_node
(
size_t
 
key
,Skùli°Node** 
¥ev
,Skùli°Node** 
√xt
)

174 
Skùli°Node
* 
	gnode
 = 
°¨t_node
;

175 
	gi
;

176 
	gi
=
MAX_LEVEL
;i>=0;i--)

178 
	gåue
)

180 
	gnode
->
	g√xt
[
i
].
lﬂd
()->
	gdñëe_lock
);

181 i‡(
	gnode
->
	g√xt
[
i
].
lﬂd
()->
	gkey
 <
key
)

182 
node
 =Çode->
√xt
[
i
];

186 
	g¥ev
[
i
] = 
node
;

187 
	g√xt
[
i
] = 
node
->
√xt
[i];

190  
	gnode
;

193 
	gSkùli°
::
dñëe_node
(
Skùli°Node
* 
node
,Skùli°Node** 
¥ev
,Skùli°Node** 
√xt
)

195 
size_t
 
	gkey
 = 
node
->
key
;

196 
©_lock2
(
node
->
dñëe_lock
);

201 i‡(
dñëe_node_wôh_Áû
(
node
,
¥ev
,
√xt
))

208 
	gnode
 = 
föd_node
(
key
,
¥ev
,
√xt
);

214 
boﬁ
 
	gSkùli°
::
dñëe_node_wôh_Áû
(
Skùli°Node
* 
node
, Skùli°Node** 
¥ev
,Skùli°Node** 
√xt
)

216 i‡(
åy_©_lock2
(
node
->
lock
) == 0)

217  
Ál£
;

219 
Skùli°Node
* 
	g≤
;

220 
Skùli°Node
* 
	g¬
;

221 
	gi
;

223 
	gi
=
node
->
Àvñ
;i>=0;i--)

225 i‡(
	g¥ev
[
i
]->
	gdñëe_lock
)

226  
	gÁl£
;

230 
	g≤
 = 
¥ev
[
i
]->
√xt
[i];

231 
	g¬
 = 
node
->
√xt
[
i
];

232 i‡(
	g≤
 !
node
)

233  
Ál£
;

234 i‡(
	g¥ev
[
i
]->
	g√xt
[i].
com∑ª_exch™ge_°r⁄g
(
≤
,
¬
Ë=
Ál£
)

235  
Ál£
;

236 
	gnode
->
	gÀvñ
--;

238  
	gåue
;

242 
boﬁ
 
	gSkùli°
::
ö£π_node_wôh_Áû
(
Skùli°Node
* 
node
, Skùli°Node** 
¥ev
,Skùli°Node** 
√xt
)

245 
	gi
;

247 
Skùli°Node
 *
	g≤
;

249 
	gi
=
node
->
buût
;i<Úode->
Àvñ
;i++)

251 i‡(
	g¥ev
[
i
]->
	gdñëe_lock
)

252  
	gÁl£
;

253 
	g≤
 = 
¥ev
[
i
]->
√xt
[i];

254 i‡(
	g≤
 !
√xt
[
i
])

255  
Ál£
;

256 
	gnode
->
	g√xt
[
i
] = 
√xt
[i];

257 i‡(
	g¥ev
[
i
]->
	g√xt
[i].
com∑ª_exch™ge_°r⁄g
(
≤
,
node
Ë=
Ál£
)

258  
Ál£
;

259 
	gnode
->
	gbuût
++;

261  
	gåue
;

264 
	gSkùli°
::
ö£π_node
(
Skùli°Node
* 
node
, Skùli°Node** 
¥ev
,Skùli°Node** 
√xt
)

268 
föd_node
(
node
->
key
,
¥ev
,
√xt
);

269 i‡(
ö£π_node_wôh_Áû
(
node
,
¥ev
,
√xt
))

276 
	gPH_Li°
::
öô
()

279 
node_poﬁ_li°
 = 
√w
 
Li°Node
*[
NODE_POOL_LIST_SIZE
];

282 
	gnode_poﬁ_li°
[0] = 
√w
 
Li°Node
[
NODE_POOL_SIZE
];

283 
	gnode_poﬁ_˙t
=0;

284 
	gnode_poﬁ_li°_˙t
 = 0;

285 
	gnode_‰ì_hód
 = 
NULL
;

287 
	gnode_Æloc_lock
 = 0;

290 
	gem±y_node
 = 
Æloc_li°_node
();

291 
	gem±y_node
->
	gkey
 = 
KEY_MIN
;

293 
	g°¨t_node
 = 
Æloc_li°_node
();

294 
	g°¨t_node
->
	gkey
 = 
KEY_MIN
;

296 
	gíd_node
 = 
Æloc_li°_node
();

297 
	gíd_node
->
	gkey
 = 
KEY_MAX
;

300 
	gem±y_node
->
	g√xt
 = 
°¨t_node
;

301 
	g°¨t_node
->
	g√xt
 = 
íd_node
;

302 
	g°¨t_node
->
	g¥ev
 = 
em±y_node
;

303 
	gíd_node
->
	g¥ev
 = 
°¨t_node
;

305 
NodeMëa
* 
	gnm_em±y
 = 
nodeAddr_to_nodeMëa
(
em±y_node
->
d©a_node_addr
);

306 
NodeMëa
* 
	gnm_°¨t
 = 
nodeAddr_to_nodeMëa
(
°¨t_node
->
d©a_node_addr
);

307 
NodeMëa
* 
	gnm_íd
 = 
nodeAddr_to_nodeMëa
(
íd_node
->
d©a_node_addr
);

309 
	gnodeAŒoˇt‹
->
lökNext
(
nm_em±y
,
nm_°¨t
);

310 
	gnodeAŒoˇt‹
->
lökNext
(
nm_°¨t
,
nm_íd
);

313 
	gPH_Li°
::
˛ón
()

315 
¥ötf
("l¯˙à%ldÖoﬁ0 %∞Öoﬁ %∞\n",
node_poﬁ_li°_˙t
,
node_poﬁ_li°
[0],node_pool_list);

317 
	gi
;

318 
	gi
=0;i<=
node_poﬁ_li°_˙t
;i++)

321 
	gdñëe
[] 
	gnode_poﬁ_li°
[
i
];

324 
	gdñëe
[] 
	gnode_poﬁ_li°
;

328 
Li°Node
* 
	gPH_Li°
::
Æloc_li°_node
()

331 
node_Æloc_lock
);

332 
©_lock2
(
node_Æloc_lock
);

334 i‡(
	gnode_‰ì_hód
)

336 
Li°Node
* 
	grv
 = 
node_‰ì_hód
;

337 
	gnode_‰ì_hód
 = 
node_‰ì_hód
->
√xt
;

339 
	grv
->
	glock
 = 0;

340 
	grv
->
	g√xt
 = 
NULL
;

341 
	grv
->
	g¥ev
 = 
NULL
;

343 
©_u∆ock2
(
node_Æloc_lock
);

344  
	grv
;

348 i‡(
	gnode_poﬁ_˙t
 >
NODE_POOL_SIZE
)

350 i‡(
node_poﬁ_li°_˙t
 >
NODE_POOL_LIST_SIZE
)

351 
¥ötf
("no space forÇode!\n");

352 ++
	gnode_poﬁ_li°_˙t
;

353 
	gnode_poﬁ_li°
[
node_poﬁ_li°_˙t
] = 
√w
 
Li°Node
[
NODE_POOL_SIZE
];

354 
	gnode_poﬁ_˙t
 = 0;

357 
Li°Node
* 
	gnode
 = &
node_poﬁ_li°
[
node_poﬁ_li°_˙t
][
node_poﬁ_˙t
];

358 
	gnode
->
	glock
 = 0;

359 
	gnode
->
	g√xt
 = 
NULL
;

360 
	gnode
->
	g¥ev
 = 
NULL
;

361 
	gnode
->
	gd©a_node_addr
 = 
nodeAŒoˇt‹
->
Æloc_node
();

365 
	gnode_poﬁ_˙t
++;

366 
©_u∆ock2
(
node_Æloc_lock
);

367  
	gnode
;

371 
	gPH_Li°
::
‰ì_li°_node
(
Li°Node
* 
node
)

373 
©_lock2
(
node_Æloc_lock
);

374 
	gnode
->
	g√xt
 = 
node_‰ì_hód
;

375 
	gnode_‰ì_hód
 = 
node
;

376 
©_u∆ock2
(
node_Æloc_lock
);

379 
Li°Node
* 
	gPH_Li°
::
föd_node
(
size_t
 
key
,Li°Node* 
node
)

382 
	gnode
->
	g√xt
 &&Çode->√xt->
	gkey
 < key)

384 
	gnode
 = 
node
->
√xt
;

386  
	gnode
;

390 
	gPH_Li°
::
dñëe_node
(
Li°Node
* 
node
)

393 
Li°Node
* 
¥ev
 = 
node
->prev;

394 
Li°Node
* 
	g√xt
 = 
node
->
√xt
;

396 
©_lock2
(
¥ev
->
lock
);

397 
©_lock2
(
node
->
lock
);

398 
©_lock2
(
√xt
->
lock
);

400 
	g¥ev
->
	g√xt
 = 
√xt
;

401 
	g√xt
->
	g¥ev
 = 
¥ev
;

403 
©_u∆ock2
(
√xt
->
lock
);

404 
©_u∆ock2
(
node
->
lock
);

405 
©_u∆ock2
(
¥ev
->
lock
);

409 
	gPH_Li°
::
ö£π_node
(
Li°Node
* 
¥ev
, Li°Node* 
node
)

411 
Li°Node
* 
	g√xt
 = 
¥ev
->
√xt
;

414 
©_lock2
(
√xt
->
lock
);

416 
	g¥ev
->
	g√xt
 = 
node
;

417 
	gnode
->
	g√xt
 = 
√xt
;

418 
	gnode
->
	g¥ev
 = 
¥ev
;

419 
	g√xt
->
	g¥ev
 = 
node
;

421 
©_u∆ock2
(
√xt
->
lock
);

	@/home/cgmin/pmem/ph/ph/skiplist.h

1 
	~<ve˘‹
>

2 
	~<©omic
>

4 
	~"sh¨ed.h
"

6 
«me•a˚
 
	gPH


9 c⁄° 
size_t
 
	gMAX_LEVEL
 = 30;

15 
˛ass
 
	gSkùli°Node
;

16 ˛as†
	cAtomicPoöãr


18 
	gpublic
:

19 
AtomicPoöãr
() {};

22 
AtomicPoöãr
(AtomicPoöã∏&
≠
Ë{
	g¢p
 =áp.
¢p
.
lﬂd
();}

26 
	g°d
::
©omic
<
Skùli°Node
*> 
¢p
=
NULL
;

30 
	sLogLoc


32 
	glog_num
;

33 
size_t
 
	goff£t
;

43 ˛as†
	cLi°Node


45 
	gpublic
:

46 
Li°Node
(Ë: 
key
(0), 
√xt
(
NULL
), 
¥ev
(NULL), 
lock
(0) {};

47 
size_t
 
	gkey
;

48 
Li°Node
* 
	g√xt
;

49 
Li°Node
* 
	g¥ev
;

52 
NodeAddr
 
	gd©a_node_addr
;

54 
	g°d
::
©omic
<
uöt8_t
> 
lock
;

57 ˛as†
	cPH_Li°


59 
	gpublic
:

61 
Li°Node
* 
em±y_node
;

62 
Li°Node
* 
	g°¨t_node
;

63 
Li°Node
* 
	gíd_node
;

65 
Li°Node
** 
	gnode_poﬁ_li°
;

66 
size_t
 
	gnode_poﬁ_˙t
;

67 
size_t
 
	gnode_poﬁ_li°_˙t
;

69 
	g°d
::
©omic
<
uöt8_t
> 
node_Æloc_lock
;

70 
Li°Node
* 
	gnode_‰ì_hód
;

72 
öô
();

73 
˛ón
();

75 
Li°Node
* 
Æloc_li°_node
();

76 
‰ì_li°_node
(
Li°Node
* 
node
);

78 
Li°Node
* 
föd_node
(
size_t
 
key
,Li°Node* 
node
);

79 
ö£π_node
(
Li°Node
* 
¥ev
,Li°Node* 
node
);

80 
dñëe_node
(
Li°Node
* 
node
);

86 ˛as†
	cSkùli°Node


88 
	gpublic
:

89 ~
Skùli°Node
(Ë{ 
dñëe
 
√xt
; }

90 
size_t
 
	gkey
;

94 
	g°d
::
©omic
<
Skùli°Node
*> *
√xt
 = 
NULL
;

96 
	g°d
::
ve˘‹
<
LogLoc
> 
íåy_li°
;

97 
LogLoc
 
	gt‹n_íåy
;

98 
size_t
 
	gt‹n_À·
=0;

99 
size_t
 
	gt‹n_right
=0;

100 
size_t
 
	gíåy_size_sum
=0;

102 
size_t
 
	gÀvñ
;

103 
size_t
 
	gbuût
;

104 
	g°d
::
©omic
<
Li°Node
*> 
my_li°Node
;

106 
NodeAddr
 
	gd©a_node_addr
;

109 
	g°d
::
©omic
<
uöt8_t
> 
lock
;

110 
	g°d
::
©omic
<
uöt8_t
> 
dñëe_lock
;

112 
£tLevñ
();

113 
£tLevñ
(
size_t
 
l
);

116 ˛as†
	cSkùli°


118 
	g¥iv©e
:

119 
Skùli°Node
* 
em±y_node
;

120 
Skùli°Node
* 
	g°¨t_node
;

121 
Skùli°Node
* 
	gíd_node
;

123 
Skùli°Node
** 
	gnode_poﬁ_li°
;

124 
size_t
 
	gnode_poﬁ_˙t
;

125 
size_t
 
	gnode_poﬁ_li°_˙t
;

127 
	g°d
::
©omic
<
uöt8_t
> 
node_Æloc_lock
;

128 
Skùli°Node
* 
	gnode_‰ì_hód
;

130 
	gpublic
:

131 
öô
();

132 
˛ón
();

134 
Skùli°Node
* 
Æloc_¶_node
();

135 
‰ì_¶_node
(
Skùli°Node
* 
node
);

137 
Skùli°Node
* 
föd_node
(
size_t
 
key
,Skùli°Node** 
¥ev
,Skùli°Node** 
√xt
);

138 
boﬁ
 
dñëe_node_wôh_Áû
(
Skùli°Node
* 
node
, Skùli°Node** 
¥ev
,Skùli°Node** 
√xt
);

139 
dñëe_node
(
Skùli°Node
* 
node
, Skùli°Node** 
¥ev
,Skùli°Node** 
√xt
);

140 
boﬁ
 
ö£π_node_wôh_Áû
(
Skùli°Node
* 
node
, Skùli°Node** 
¥ev
,Skùli°Node** 
√xt
);

141 
ö£π_node
(
Skùli°Node
* 
node
, Skùli°Node** 
¥ev
,Skùli°Node** 
√xt
);

	@/home/cgmin/pmem/ph/ph/thread.cpp

1 
	~"thªad.h
"

2 
	~"d©a.h
"

3 
	~"globÆ.h
"

5 
	~<°dlib.h
>

7 
	~<°dio.h
>

9 
	#FCCT
 1000

10 

	)

12 
«me•a˚
 
	gPH


15 
	#INV9
 999999999

	)

17 
PH_Thªad
* 
	gthªad_li°
;

19 
thªad_loˇl
 
PH_Thªad
* 
	gmy_thªad
 = 
NULL
;

22 vﬁ©ûê
‰ì_˙t
[
PM_N
];

23 
num_of_thªad
;

25 vﬁ©ûê
£g_‰ì_˙t
;

29 
	g°d
::
©omic
<
uöt8_t
> 
thªad_lock
;

58 
ª£t_thªad
()

60 
	gi
;

61 
	gi
=0;i<
	gnum_of_thªad
;i++)

63 
	gthªad_li°
[
i
].
˛ón
();

91 
exô_thªad
()

93 i‡(
	gmy_thªad
)

94 
	gmy_thªad
->
˛ón
();

96 
	gPH_Thªad
::
˛ón
()

98 
i
;

99 
	gi
=0;i<
	gPM_N
;i++)

100 
	gloˇl_‰ì_˙t
[
i
] = 
INV9
;

101 
	gloˇl_£g_‰ì_˙t
 = 
INV9
;

103 
˛ón_thªad_loˇl
();

106 #ifde‡
•lô_thªad


107 
±hªad_t
* 
	g•lô_thªads
;

108 * 
	gsi
;

111 
öô_thªad
()

113 
	gi
;

116 
	gthªad_li°
 = 
√w
 
PH_Thªad
[
num_of_thªad
+1];

117 
	gi
=0;i<
	gnum_of_thªad
;i++)

120 
	gthªad_li°
[
i
].
öô
();

121 #ifde‡
idÀ_thªad


126 
	gthªad_lock
 = 0;

127 #ifde‡
•lô_thªad


128 
öô_•lô
();

129 
	g•lô_thªads
 = (
±hªad_t
*)
mÆloc
(’thªad_t)*
num_of_•lô
);

130 
	gsi
 = (*)
mÆloc
(()*
num_of_•lô
);

131 
	gi
=0;i<
	gnum_of_•lô
;i++)

133 
	gsi
[
i
] = i;

134 
±hªad_¸óã
(&
•lô_thªads
[
i
],
NULL
,
•lô_w‹k
,(*)&
si
[i]);

139 
˛ón_thªad
()

143 #ifde‡
DOUBLE_LOG


144 
	gi
;

145 
	gi
=0;i<
	gnum_of_thªad
;i++)

147 i‡(
	gthªad_li°
[
i
].
	glog
)

148 
	gthªad_li°
[
i
].
	glog
->
˛ón
();

151 #ifde‡
•lô_thªad


152 
˛ón_•lô
();

154 
	gi
;

155 
	gi
=0;i<
	gnum_of_•lô
;i++)

156 
±hªad_joö
(
•lô_thªads
[
i
],
NULL
);

158 
‰ì
(
•lô_thªads
);

159 
‰ì
(
si
);

162 
	gdñëe
[] 
	gthªad_li°
;

165 
	gPH_Thªad
::
öô
()

167 
›_˙t
 = 0;

171 #ifde‡
DOUBLE_LOG


172 
	glog
 = 
NULL
;

175 #ifde‡
idÀ_thªad


176 
	gru¬ög
 = 0;

178 
	gi
;

179 
	gi
=0;i<
	gPM_N
;i++)

180 
	gloˇl_‰ì_˙t
[
i
] = 
INV9
;

181 
	gloˇl_£g_‰ì_˙t
 = 
INV9
;

186 
√w_thªad
()

188 
	gi
,
	gj
;

192 
©_lock
(
thªad_lock
);

193 
	gi
=0;i<
	gnum_of_thªad
;i++)

195 i‡(
	gthªad_li°
[
i
].
	gloˇl_‰ì_˙t
[0] =
INV9
)

199 
j
=0;
	gj
<
	gPM_N
;j++)

200 
	gthªad_li°
[
i
].
	gloˇl_‰ì_˙t
[
j
] = 
‰ì_˙t
[j];

201 
	gthªad_li°
[
i
].
	gloˇl_£g_‰ì_˙t
 = 
£g_‰ì_˙t
;

202 #ifde‡
DOUBLE_LOG


203 i‡(
	gthªad_li°
[
i
].
	glog
 =
NULL
)

205 
thªad_li°
[
i
].
log
 = 
√w
 
LOG
();

206 
	gthªad_li°
[
i
].
	glog
->
öô
();

209 
öô_d©a_loˇl
();

210 
	gmy_thªad
 = &
thªad_li°
[
i
];

219 
©_u∆ock
(
thªad_lock
);

222 #ifde‡
idÀ_thªad


224 
upd©e_idÀ
()

226 
	gi
,
	gj
;

228 
	gi
=0;i<
	gnum_of_thªad
;i++)

230 i‡(
	gthªad_li°
[
i
].
	gloˇl_‰ì_˙t
[0] !
INV9
)

232 i‡(
thªad_li°
[
i
].
ru¬ög
 == 0)

234 
j
=0;
	gj
<
	gPM_N
;j++)

235 
	gthªad_li°
[
i
].
	gloˇl_‰ì_˙t
[
j
] = 
‰ì_˙t
[j];

236 
	gthªad_li°
[
i
].
	gloˇl_£g_‰ì_˙t
 = 
£g_‰ì_˙t
;

243 
upd©e_idÀ
()

249 
	#waô_f‹_¶ow


	)

251 
upd©e_‰ì_˙t
()

253 i‡(
	gmy_thªad
)

255 
	gmy_thªad
->
	g›_˙t
++;

256 i‡(
	gmy_thªad
->
	g›_˙t
 % 128 == 0)

258 
i
;

259 
	gi
=0;i<
	gPM_N
;i++)

261 
	gmy_thªad
->
	gloˇl_‰ì_˙t
[
i
] = 
‰ì_˙t
[i];

262 #ifde‡
waô_f‹_¶ow


263 
	gmö
 = 
mö_‰ì_˙t
(
i
);

264 i‡(
	gmö
 + 
	gFREE_QUEUE_LEN
/2 < 
	gmy_thªad
->
	gloˇl_‰ì_˙t
[
i
])

266 
¥ötf
("in1\n");

267 
	gmö
 + 
	gFREE_QUEUE_LEN
/2 < 
	gmy_thªad
->
	gloˇl_‰ì_˙t
[
i
])

268 
	gmö
 = 
mö_‰ì_˙t
(
i
);

269 
¥ötf
("out1\n");

275 
	gmy_thªad
->
	gloˇl_£g_‰ì_˙t
 = 
£g_‰ì_˙t
;

276 #ifde‡
waô_f‹_¶ow


277 
	gmö
 = 
mö_£g_‰ì_˙t
();

278 i‡(
	gmö
 + 
	gFREE_SEG_LEN
/2 < 
	gmy_thªad
->
	gloˇl_£g_‰ì_˙t
)

280 
¥ötf
("in2\n");

281 
	gmö
 + 
	gFREE_SEG_LEN
/2 < 
	gmy_thªad
->
	gloˇl_£g_‰ì_˙t
)

283 
upd©e_idÀ
();

284 
	gmö
 = 
mö_£g_‰ì_˙t
();

286 
¥ötf
("out2\n");

293 
√w_thªad
();

295 
	gi
;

296 
±hªad_t
 
	g±
;

298 
	g±
 = 
±hªad_£lf
();

299 
	gi
=0;i<
	gnum_of_thªad
;i++)

301 i‡(
±hªad_equÆ
(
thªad_li°
[
i
].
tid
,
±
))

303 
	gthªad_li°
[
i
].
	g‰ì_˙t
 = 
‰ì_˙t
;

304 
	gthªad_li°
[
i
].
	g£g_‰ì_˙t
 = 
£g_‰ì_˙t
;

308 
√w_thªad
();

312 
mö_‰ì_˙t
(
∑π
)

314 
	gi
;

315 
	gmö
=999999999;

316 
	gi
=0;i<
	gnum_of_thªad
;i++)

318 i‡(
	gthªad_li°
[
i
].
	gru¬ög
 && 
	gmö
 >Åhªad_li°[i].
	gloˇl_‰ì_˙t
[
∑π
])

319 
	gmö
 = 
thªad_li°
[
i
].
loˇl_‰ì_˙t
[
∑π
];

321 i‡(
	gmö
 == 999999999)

322  
‰ì_˙t
[
∑π
];

323  
	gmö
;

326 
¥öt_thªad_öfo
()

328 
	gi
,
	gj
;

329 
	gi
=0;i<
	gnum_of_thªad
;i++)

331 
	gj
=0;j<
	gPM_N
;j++)

333 i‡(
	gthªad_li°
[
i
].
	gloˇl_‰ì_˙t
[
j
] != 999999999)

335 
¥ötf
("thªad %dÖ¨à%d / %d\n",
i
,
j
,
thªad_li°
[i].
loˇl_‰ì_˙t
[j]);

342 
mö_£g_‰ì_˙t
()

344 
	gi
;

345 
	gmö
=999999999;

346 
	gi
=0;i<
	gnum_of_thªad
;i++)

348 i‡(
	gmö
 > 
	gthªad_li°
[
i
].
	gloˇl_£g_‰ì_˙t
)

349 
	gmö
 = 
thªad_li°
[
i
].
loˇl_£g_‰ì_˙t
;

351 i‡(
	gmö
 == 999999999)

352  
£g_‰ì_˙t
;

353  
	gmö
;

	@/home/cgmin/pmem/ph/ph/thread.h

1 
	~<±hªad.h
>

2 
	~"log.h
"

4 
	#idÀ_thªad


	)

6 
«me•a˚
 
	gPH


9 
	#FREE_SEG_LEN
 10000

	)

10 
	#FREE_QUEUE_LEN
 100000

	)

12 ˛as†
	cPH_Thªad


14 
	gpublic
:

15 vﬁ©ûê
loˇl_‰ì_˙t
[
PM_N
];

16 vﬁ©ûê
	gloˇl_£g_‰ì_˙t
;

20 #ifde‡
idÀ_thªad


22 
	gru¬ög
;

24 
	g›_˙t
;

26 #ifde‡
DOUBLE_LOG


27 
˛ass
 
LOG
 *
	glog
;

30 
öô
();

31 
˛ón
();

36 
thªad_loˇl
 
PH_Thªad
* 
my_thªad
;

39 
ª£t_thªad
();

40 
exô_thªad
();

41 
upd©e_‰ì_˙t
();

42 
mö_‰ì_˙t
(
∑π
);

43 
mö_£g_‰ì_˙t
();

44 
öô_thªad
();

45 
˛ón_thªad
();

47 
¥öt_thªad_öfo
();

50 
upd©e_idÀ
();

	@/home/cgmin/pmem/ph/ph/thread2.cpp

1 
	~<°dio.h
>

2 
	~<c°rög
>

3 
	~<x86öåö.h
>

4 
	~<uni°d.h
>

5 
	~<libpmem.h
>

7 
	~"thªad2.h
"

8 
	~"log.h
"

9 
	~"lock.h
"

10 
	~"c˚h.h
"

11 
	~"skùli°.h
"

12 
	~"d©a2.h
"

13 
	~"globÆ2.h
"

15 
«me•a˚
 
	gPH


18 
size_t
 
HARD_EVICT_SPACE
;

19 
size_t
 
SOFT_EVICT_SPACE
;

22 
num_quîy_thªad
;

23 
num_evi˘_thªad
;

24 
log_max
;

25 
DoubÀLog
* 
doubÀLogLi°
;

28 
CCEH
* 
hash_ödex
;

33 
PH_Quîy_Thªad
 
	gquîy_thªad_li°
[
QUERY_THREAD_MAX
];

34 
PH_Evi˘_Thªad
 
	gevi˘_thªad_li°
[
EVICT_THREAD_MAX
];

36 
Skùli°
* 
skùli°
;

37 
PH_Li°
* 
li°
;

40 
	uE¡ryAddr


44 
size_t
 
	gloc
 : 2;

45 
size_t
 
	gfûe_num
 : 14;

46 
size_t
 
	goff£t
 : 48;

48 
uöt64_t
 
	gvÆue
;

53 
mö_£g_‰ì_˙t
()

55 
	gi
,
	gmi
;

56 
	gmö
=999999999;

57 
	gi
=0;i<
	gnum_quîy_thªad
;i++)

59 i‡(
	gquîy_thªad_li°
[
i
].
	grun
 && 
	gmö
 > quîy_thªad_li°[i].
	gloˇl_£g_‰ì_hód
)

61 
	gmö
 = 
quîy_thªad_li°
[
i
].
loˇl_£g_‰ì_hód
;

62 
	gmi
 = 
i
;

65 
	gi
=0;i<
	gnum_evi˘_thªad
;i++)

67 i‡(
	gevi˘_thªad_li°
[
i
].
	grun
 && 
	gmö
 >Évi˘_thªad_li°[i].
	gloˇl_£g_‰ì_hód
)

69 
	gmö
 = 
evi˘_thªad_li°
[
i
].
loˇl_£g_‰ì_hód
;

70 
	gmi
 = 
i
 + 
num_quîy_thªad
;

73 i‡(
	gmö
 == 999999999)

74  
£g_‰ì_hód
;

75 i‡(
	gmi
 < 
	gnum_quîy_thªad
)

76 
	gquîy_thªad_li°
[
mi
].
	gupd©e_ªque°
 = 1;

78 
	gevi˘_thªad_li°
[
mi
-
num_quîy_thªad
].
	gupd©e_ªque°
 = 1;

79  
	gmö
;

82 
size_t
 
gë_mö_èû
(
log_num
)

84 
	gi
,
	gmi
;

85 
size_t
 
	gmö
 = 0xffffffffffffffff;

86 
	gi
=0;i<
	gnum_quîy_thªad
;i++)

88 i‡(
	gquîy_thªad_li°
[
i
].
	grun
 && 
	gmö
 > quîy_thªad_li°[i].
	gª˚¡_log_èûs
[
log_num
])

90 
	gmö
 = 
quîy_thªad_li°
[
i
].
ª˚¡_log_èûs
[
log_num
];

91 
	gmi
 = 
i
;

94 
	gquîy_thªad_li°
[
mi
].
	gupd©e_ªque°
 = 1;

95  
	gmö
;

98 
	gPH_Thªad
::
›_check
()

100 ++
›_˙t
;

101 i‡(
	g›_˙t
 % 128 =0 || 
upd©e_ªque°
)

102 
sync_thªad
();

105 
	gPH_Thªad
::
sync_thªad
()

108 
upd©e_èû_sum
();

109 
	gupd©e_ªque°
 = 0;

112 
	gPH_Thªad
::
upd©e_èû_sum
()

114 
i
;

115 
	gi
=0;i<
	glog_max
;i++)

116 
	gª˚¡_log_èûs
[
i
] = 
doubÀLogLi°
[i].
èû_sum
;

119 
	gPH_Thªad
::
upd©e_‰ì_˙t
()

121 
loˇl_£g_‰ì_hód
 = 
£g_‰ì_hód
;

122 #ifde‡
waô_f‹_¶ow


123 
	gmö
 = 
mö_£g_‰ì_˙t
();

124 i‡(
	gmö
 + 
	gFREE_SEG_LEN
/2 < 
	gmy_thªad
->
	gloˇl_£g_‰ì_˙t
)

126 
¥ötf
("in2\n");

127 
	gmö
 + 
	gFREE_SEG_LEN
/2 < 
	gmy_thªad
->
	gloˇl_£g_‰ì_˙t
)

129 
upd©e_idÀ
();

130 
	gmö
 = 
mö_£g_‰ì_˙t
();

132 
¥ötf
("out2\n");

136 
	gi
;

137 
±hªad_t
 
	g±
;

139 
	g±
 = 
±hªad_£lf
();

140 
	gi
=0;i<
	gnum_of_thªad
;i++)

142 i‡(
±hªad_equÆ
(
thªad_li°
[
i
].
tid
,
±
))

144 
	gthªad_li°
[
i
].
	g‰ì_˙t
 = 
‰ì_˙t
;

145 
	gthªad_li°
[
i
].
	g£g_‰ì_˙t
 = 
£g_‰ì_˙t
;

149 
√w_thªad
();

157 
	gPH_Quîy_Thªad
::
öô
()

160 
i
;

162 
	gmy_log
 = 0;

163 
	gexô
 = 0;

165 
	gi
=0;i<
	glog_max
;i++)

167 
	gdoubÀLogLi°
[
i
].
	gu£
 == 0)

170 i‡(
åy_©_lock2
(
doubÀLogLi°
[
i
].
u£
))

171 
my_log
 = &
doubÀLogLi°
[
i
];

173 i‡(
	gmy_log
)

177 i‡(
	gmy_log
 == 0)

178 
¥ötf
("new queryÅhreadÇoÜog!!!\n");

180 
¥ötf
("logállocated\n");

187 
	ghash_ödex
->
thªad_loˇl_öô
();

191 
	gªad_lock
 = 0;

193 
	grun
 = 1;

196 
	gPH_Quîy_Thªad
::
˛ón
()

198 
my_log
->
u£
 = 0;

199 
	gmy_log
 = 
NULL
;

201 
	ghash_ödex
->
thªad_loˇl_˛ón
();

202 
	grun
 = 0;

203 
	gªad_lock
 = 0;

208 
	#INDEX


	)

210 
	gPH_Quîy_Thªad
::
ö£π_›
(
uöt64_t
 
key
,* 
vÆue
)

213 
›_check
();

217 
uöt64_t
 
	g√w_addr
,
	gﬁd_addr
;

218 
E¡ryAddr
 
	gó
;

219 * 
	gpmem_hód_p
;

220 * 
	gdøm_hód_p
;

223 * 
	gchecksum_i
 = (*)&
bÀ
;

224 
	gi
,
	g˙t
=0;

225 
	gi
=0;i<8+8+
	gVALUE_SIZE
;i++)

227 i‡(*
	gchecksum_i
 == 0)

228 
˙t
++;

230 i‡(
	g˙t
 == -1)

231 
¥ötf
("xxx\n");

241 
	gmy_log
->
ªady_log
();

243 
	gpmem_hód_p
 = 
my_log
->
pmemLogAddr
 + my_log->
hód_sum
%my_log->
my_size
;

246 
	gó
.
	gloc
 = 1;

247 
	gó
.
	gfûe_num
 = 
my_log
->
log_num
;

248 
	gó
.
	goff£t
 = 
my_log
->
hód_sum
%my_log->
my_size
;

250 
	gmy_log
->
ö£π_pmem_log
(
key
,
vÆue
);

263 #ifde‡
INDEX


264 
KVP
* 
	gkvp_p
;

265 
	g°d
::
©omic
<
uöt8_t
> *
£g_lock
;

266 
	gkvp_p
 = 
hash_ödex
->
ö£π
(
key
,&
£g_lock
,
ªad_lock
);

268 
	gﬁd_addr
 = 
kvp_p
->
vÆue
;

273 
uöt64_t
 
	gﬁd_vîsi⁄
,
	g√w_vîsi⁄
;

274 #ifde‡
INDEX


275 
	gﬁd_vîsi⁄
 = 
kvp_p
->
vîsi⁄
;

276 
	g√w_vîsi⁄
 = 
ﬁd_vîsi⁄
+1;

277 
	g√w_vîsi⁄
 = 
£t_loc_hŸ
(
√w_vîsi⁄
);

278 
£t_vÆid
(
√w_vîsi⁄
);

281 #ifde‡
USE_DRAM_CACHE


283 
	g√w_addr
 = 
ó
.
vÆue
;

285 
	gmy_log
->
ö£π_døm_log
(
√w_vîsi⁄
,
key
,
vÆue
);

287 
	g√w_addr
 = 
pmem_hód_p
;

292 
	gmy_log
->
wrôe_vîsi⁄
(
√w_vîsi⁄
);

293 
	gmy_log
->
	ghód_sum
+=
ENTRY_SIZE
;

296 #ifde‡
INDEX


297 
boﬁ
 
	g√w_key
;

299 
	gkvp_p
->
	gvÆue
 = 
√w_addr
;

300 
	gkvp_p
->
	gvîsi⁄
 = 
√w_vîsi⁄
;

301 
_mm_s„n˚
();

302 i‡(
	gkvp_p
->
	gkey
 !
key
)

304 
√w_key
 = 
åue
;

305 
	gkvp_p
->
	gkey
 = 
key
;

306 
_mm_s„n˚
();

309 
	g√w_key
 = 
Ál£
;

313 #ifde‡
INDEX


315 
	ghash_ödex
->
u∆ock_íåy2
(
£g_lock
,
ªad_lock
);

320 #ifde‡
USE_DRAM_CACHE


321 i‡(
	g√w_key
)

323 
E¡ryAddr
 
	gﬁd_ó
;

324 * 
	gaddr
;

325 
	gﬁd_ó
.
	gvÆue
 = 
ﬁd_addr
;

326 i‡(
	gﬁd_ó
.
	gloc
 == 1)

328 
addr
 = 
doubÀLogLi°
[
ﬁd_ó
.
fûe_num
].
dømLogAddr
 + old_ó.
off£t
;

329 
£t_övÆid
((
uöt64_t
*)
addr
);

333 
size_t
 
	goff£t_ö_node
;

334 
NodeMëa
* 
	gnm
;

335 
	g˙t
;

336 
	gnode_˙t
;

338 
	goff£t_ö_node
 = 
ﬁd_ó
.
off£t
 % 
NODE_SIZE
;

339 
	gnode_˙t
 = 
ﬁd_ó
.
off£t
/
NODE_SIZE
;

340 
	gnm
 = (
NodeMëa
*)(
nodeAŒoˇt‹
->
nodeMëaPoﬁLi°
[
ﬁd_ó
.
fûe_num
]+
node_˙t
*(NodeMeta));

341 
	g˙t
 = (
off£t_ö_node
-(
NodeAddr
))/
ENTRY_SIZE
;

342 
	gnm
->
	gvÆid
[
˙t
] = 
Ál£
;

343 --
	gnm
->
	gvÆid_˙t
;

360 
	gPH_Quîy_Thªad
::
ªad_›
(
uöt64_t
 
key
,* 
buf
)

363 
›_check
();

368 
E¡ryAddr
 
	gó
;

369 vﬁ©ûê*
	g£g_dïth_p
;

370 vﬁ©ûê
uöt64_t
 *
	gªt_p
;

371 
	g£g_dïth
;

372 
uöt64_t
 
	gªt
;

373 
boﬁ
 
	gex
;

374 
	gåue
)

376 
	gex
 = 
hash_ödex
->
ªad
(
key
,&
ªt_p
,&
£g_dïth_p
);

378 
	g£g_dïth
 = *
£g_dïth_p
;

379 
	gªt
 = *
ªt_p
;

381 i‡(
	gex
 =
Ál£
)

384 * 
	gaddr
;

385 i‡(
	gó
.
	gloc
 == 1)

387 
addr
 = 
doubÀLogLi°
[
ó
.
fûe_num
].
dømLogAddr
 +Éa.
off£t
;

388 
mem˝y
(
buf
,
addr
+
HEADER_SIZE
+
KEY_SIZE
,
VALUE_SIZE
);

392 
NodeMëa
* 
	gnm
;

393 
	gnode_˙t
;

398 
	gnode_˙t
 = 
ó
.
off£t
/
NODE_SIZE
;

399 
	gnm
 = (
NodeMëa
*)(
nodeAŒoˇt‹
->
nodeMëaPoﬁLi°
[
ó
.
fûe_num
]+
node_˙t
*(NodeMeta));

401 
	gaddr
 = (*)
nodeAŒoˇt‹
->
nodePoﬁLi°
[
ó
.
fûe_num
]+ó.
off£t
;

409 
mem˝y
(
buf
,
addr
+
HEADER_SIZE
+
KEY_SIZE
,
VALUE_SIZE
);

413 i‡(
	g£g_dïth
 =*
£g_dïth_p
 && 
ªt
 =*
ªt_p
)

420 
	gPH_Quîy_Thªad
::
dñëe_›
(
uöt64_t
 
key
)

423 
›_check
();

427 
	gPH_Quîy_Thªad
::
sˇn_›
(
uöt64_t
 
°¨t_key
,uöt64_à
íd_key
)

430 
›_check
();

434 
	gPH_Quîy_Thªad
::
√xt_›
(* 
buf
)

437 
›_check
();

444 
	gPH_Evi˘_Thªad
::
öô
()

447 
¶ìp_time
 = 1000;

449 
	gexô
 = 0;

451 
	g 
 = (
log_max
-1Ë/ 
num_evi˘_thªad
+1;

453 
	glog_˙t
 = 0;

454 
	glog_li°
 = 
√w
 
DoubÀLog
*[
 
];

456 
	gi
;

457 
	gi
=0;i<
	glog_max
;i++)

459 
	gdoubÀLogLi°
[
i
].
	gevi˘_Æloc
 == 0)

462 i‡(
åy_©_lock2
(
doubÀLogLi°
[
i
].
evi˘_Æloc
))

464 
log_li°
[
log_˙t
++] = &
doubÀLogLi°
[
i
];

468 i‡(
	glog_˙t
 >
 
)

472 
	gi
=
log_˙t
;i<
	g 
;i++)

473 
	glog_li°
[
i
] = 
NULL
;

475 
	ghash_ödex
->
thªad_loˇl_öô
();

476 
	gªad_lock
 = 0;

477 
	grun
 = 1;

480 
	gPH_Evi˘_Thªad
::
˛ón
()

482 
hash_ödex
->
thªad_loˇl_˛ón
();

483 
	grun
 = 0;

484 
	gªad_lock
 = 0;

486 
	gdñëe
[] 
	glog_li°
;

495 
pmem_¡_wrôe
(* 
d°_addr
,* 
§c_addr
, 
size_t
 
Àn
)

497 
pmem_mem˝y
(
d°_addr
,
§c_addr
,
Àn
,
PMEM_F_MEM_NONTEMPORAL
);

498 
_mm_s„n˚
();

502 
pmem_íåy_wrôe
(* 
d°
, * 
§c
, 
size_t
 
Àn
)

505 
mem˝y
(
d°
,
§c
,
Àn
);

506 
pmem_≥rsi°
(
d°
,
Àn
);

507 
_mm_s„n˚
();

509 
pmem_√xt_wrôe
(
D©aNode
* 
d°_node
,
NodeAddr
 
nodeAddr
)

511 
	gd°_node
->
	g√xt_off£t
 = 
nodeAddr
;

512 
pmem_≥rsi°
(
d°_node
,(
NodeAddr
));

513 
_mm_s„n˚
();

516 c⁄° 
size_t
 
	gPMEM_BUFFER_SIZE
 = 256;

518 
	gPH_Evi˘_Thªad
::
•lô_li°Node
(
Li°Node
 *
li°Node
,
Skùli°Node
 *
skùli°Node
)

521 
D©aNode
 *
	gli°_d©aNode
 = 
nodeAddr_to_node
(
li°Node
->
d©a_node_addr
);

522 
NodeMëa
 *
	gli°_nodeMëa
 = 
nodeAddr_to_nodeMëa
(
li°Node
->
d©a_node_addr
);

524 i‡(
	gli°_nodeMëa
->
	gvÆid_˙t
 == 0)

527 
D©aNode
 
	gãmp_node
 = *
li°_d©aNode
;

528 
D©aNode
 
	gãmp_√w_node
;

529 
uöt64_t
 
	ghÆf_key
;

530 
uöt64_t
 
	gkey
;

532 
size_t
 
	goff£t
;

533 
size_t
 
	goff£t2
;

534 * 
	gaddr
;

535 
	gaddr
 = (*)&
ãmp_node
;

536 
	goff£t
 = (
NodeAddr
);

537 
	goff£t2
 = (
NodeAddr
);

539 
	ghÆf_key
 = 
föd_hÆf_ö_node
(
li°_nodeMëa
,&
ãmp_node
);

540 i‡(
	ghÆf_key
 =
li°Node
->
key
)

543 
Li°Node
* 
	g√w_li°Node
 = 
li°
->
Æloc_li°_node
();

544 
NodeMëa
* 
	g√w_nodeMëa
 = 
nodeAddr_to_nodeMëa
(
√w_li°Node
->
d©a_node_addr
);

545 
D©aNode
* 
	g√w_d©aNode
 = 
nodeAddr_to_node
(
√w_li°Node
->
d©a_node_addr
);

547 
	g√w_li°Node
->
	gkey
 = 
hÆf_key
;

548 
	g√w_li°Node
->
	g√xt
 = 
li°Node
->
√xt
;

549 
	g√w_li°Node
->
	g¥ev
 = 
li°Node
;

551 
	gmoved_idx
[
NODE_SLOT_MAX
];

552 
	gmoved_˙t
=0;

553 
	gi
;

554 
	gi
=0;i<
	gNODE_SLOT_MAX
;i++)

556 i‡(
	gli°_nodeMëa
->
	gvÆid
[
i
] =
Ál£
)

559 
off£t
+=
ENTRY_SIZE
;

562 
	gkey
 = *(
uöt64_t
*)(
addr
+
off£t
+
HEADER_SIZE
);

563 i‡(
	gkey
 >
hÆf_key
)

566 
mem˝y
((*)&
ãmp_√w_node
+
off£t2
,(*)&
ãmp_node
+
off£t
,
ENTRY_SIZE
);

568 
	gmoved_idx
[
moved_˙t
] = 
i
;

569 ++
	gmoved_˙t
;

574 
	goff£t2
+=
ENTRY_SIZE
;

576 
	goff£t
+=
ENTRY_SIZE
;

579 
	gãmp_√w_node
.
	g√xt_off£t
 = 
li°_nodeMëa
->
√xt_p
->
my_off£t
;

581 
pmem_¡_wrôe
((*)
√w_d©aNode
,(*)&
ãmp_√w_node
,
off£t2
);

582 
KVP
* 
	gkvp_p
;

583 
	g°d
::
©omic
<
uöt8_t
> *
£g_lock
;

584 
E¡ryAddr
 
	gó
;

585 
	gi
=0;i<
	gmoved_˙t
;i++)

587 
	gkey
 = *(
uöt64_t
*)(
ãmp_√w_node
.
buf„r
 + 
ENTRY_SIZE
*
i
 + 
HEADER_SIZE
);

588 
	gkvp_p
 = 
hash_ödex
->
ö£π
(
key
,&
£g_lock
,
ªad_lock
);

589 
	gó
.
	gloc
 = 3;

590 
	gó
.
	gfûe_num
 = 
li°_nodeMëa
->
my_off£t
.
poﬁ_num
;

591 
	gó
.
	goff£t
 = 
li°_nodeMëa
->
my_off£t
.
node_off£t
*
NODE_SIZE
 + (
NodeAddr
Ë+ 
ENTRY_SIZE
*
moved_idx
[
i
];

592 i‡(
	gkvp_p
->
	gvÆue
 =
ó
.
vÆue
)

595 
ó
.
fûe_num
 = 
√w_nodeMëa
->
my_off£t
.
poﬁ_num
;

596 
	gó
.
	goff£t
 = 
√w_nodeMëa
->
my_off£t
.
node_off£t
*
NODE_SIZE
 + (
NodeAddr
Ë+ 
ENTRY_SIZE
*
i
;

597 
	gkvp_p
->
	gvÆue
 = 
ó
.
vÆue
;

598 
	gkvp_p
->
	gvîsi⁄
 = 
£t_loc_cﬁd
(
kvp_p
->
vîsi⁄
);

599 
	g√w_nodeMëa
->
	gvÆid
[
i
] = 
åue
;

600 
	g√w_nodeMëa
->
	gvÆid_˙t
++;

601 
	gli°_nodeMëa
->
	gvÆid_˙t
--;

604 
	g√w_nodeMëa
->
	gvÆid
[
i
] = 
Ál£
;

605 
_mm_s„n˚
();

606 
	ghash_ödex
->
u∆ock_íåy2
(
£g_lock
,
ªad_lock
);

607 
	gli°_nodeMëa
->
	gvÆid
[
moved_idx
[
i
]] = 
Ál£
;

614 
	g√w_nodeMëa
->
	g√xt_p
 = 
li°_nodeMëa
->
√xt_p
;

617 
pmem_√xt_wrôe
(
li°_d©aNode
,
√w_nodeMëa
->
my_off£t
);

618 
	gli°_nodeMëa
->
	g√xt_p
 = 
√w_nodeMëa
;

620 
Li°Node
* 
	gﬁd
;

621 
	gskùli°Node
->
	gmy_li°Node
.
lﬂd
()->
	gkey
 < 
	ghÆf_key
)

624 i‡(
	gskùli°Node
->
	gkey
 >
hÆf_key
)

626 
ﬁd
 = 
skùli°Node
->
my_li°Node
;

627 i‡(
	gﬁd
->
	gkey
 >
hÆf_key
)

629 i‡(
	gskùli°Node
->
	gmy_li°Node
.
com∑ª_exch™ge_°r⁄g
(
ﬁd
,
√w_li°Node
Ë=
Ál£
)

634 
	gskùli°Node
 = 
skùli°Node
->
√xt
[0];

638 
	gli°
->
ö£π_node
(
li°Node
,
√w_li°Node
);

642 
	gPH_Evi˘_Thªad
::
w¨m_to_cﬁd
(
Skùli°Node
* 
node
)

645 
Li°Node
* 
li°Node
;

646 
NodeMëa
 *
	gnodeMëa
 = 
nodeAddr_to_nodeMëa
(
node
->
d©a_node_addr
);

647 
D©aNode
 
	gd©aNode
 = *
nodeAddr_to_node
(
node
->
d©a_node_addr
);

648 
size_t
 
	g§c_off£t
 = (
NodeAddr
);

649 
	g˙t
 = 0;

650 
uöt64_t
 
	gkey
;

651 * 
	gaddr
 = (*)&
d©aNode
;

652 
E¡ryAddr
 
	gﬁd_ó
,
	g√w_ó
;

653 
	gi
;

654 
	g¶Ÿ_idx
;

656 
KVP
* 
	gkvp_p
;

657 
	g°d
::
©omic
<
uöt8_t
> *
£g_lock
;

659 
	gﬁd_ó
.
	gloc
 = 2;

660 
	gﬁd_ó
.
	gfûe_num
 = 
node
->
d©a_node_addr
.
poﬁ_num
;

663 
	g√w_ó
.
	gloc
 = 3;

666 
	g˙t
 = 0;

667 
	g˙t
 < 
	gnodeMëa
->
	g¶Ÿ_˙t
)

670 i‡(
	gnodeMëa
->
	gvÆid
[
˙t
] =
Ál£
)

672 ++
˙t
;

673 
	g§c_off£t
+=
ENTRY_SIZE
;

677 
	gkey
 = *(
uöt64_t
*)(
addr
+
§c_off£t
+
HEADER_SIZE
);

678 
	gli°Node
 = 
node
->
my_li°Node
;

679 
	gkey
 > 
	gli°Node
->
	g√xt
->key)

680 
	gli°Node
 = 
li°Node
->
√xt
;

682 
NodeMëa
* 
	gli°_nodeMëa
 = 
nodeAddr_to_nodeMëa
(
li°Node
->
d©a_node_addr
);

683 
D©aNode
* 
	gli°_d©aNode
 = 
nodeAddr_to_node
(
li°Node
->
d©a_node_addr
);

684 
	g√w_ó
.
	gfûe_num
 = 
li°Node
->
d©a_node_addr
.
poﬁ_num
;

688 
©_lock2
(
li°Node
->
lock
);

689 i‡(
	gkey
 > 
	gli°Node
->
	g√xt
->key)

691 
©_u∆ock2
(
li°Node
->
lock
);

695 
	g¶Ÿ_idx
=0;¶Ÿ_idx<
	gNODE_SLOT_MAX
;slot_idx++)

697 i‡(
	gli°_nodeMëa
->
	gvÆid
[
¶Ÿ_idx
] =
Ál£
)

700 i‡(
	g¶Ÿ_idx
 < 
	gNODE_SLOT_MAX
)

702 
	gﬁd_ó
.
	goff£t
 = 
node
->
d©a_node_addr
.
node_off£t
*
NODE_SIZE
 + 
§c_off£t
;

703 
	g√w_ó
.
	goff£t
 = 
li°Node
->
d©a_node_addr
.
node_off£t
*
NODE_SIZE
 + (
NodeAddr
Ë+ 
ENTRY_SIZE
*
¶Ÿ_idx
;

705 
	gkvp_p
 = 
hash_ödex
->
ö£π
(
key
,&
£g_lock
,
ªad_lock
);

707 i‡(
	gkvp_p
->
	gvÆue
 !
ﬁd_ó
.
vÆue
)

712 
hash_ödex
->
u∆ock_íåy2
(
£g_lock
,
ªad_lock
);

714 
©_u∆ock2
(
li°Node
->
lock
);

715 ++
	g˙t
;

716 
	g§c_off£t
+=
ENTRY_SIZE
;

721 
pmem_íåy_wrôe
((*)
li°_d©aNode
 + (
NodeAddr
Ë+ 
ENTRY_SIZE
*
¶Ÿ_idx
 , 
addr
 + 
§c_off£t
, ENTRY_SIZE);

722 
	gli°_nodeMëa
->
	gvÆid
[
¶Ÿ_idx
] = 
åue
;

723 ++
	gli°_nodeMëa
->
	gvÆid_˙t
;

729 
	gkvp_p
->
	gvîsi⁄
 = 
£t_loc_cﬁd
(
kvp_p
->
vîsi⁄
);

731 
	gkvp_p
->
	gvÆue
 = 
√w_ó
.
vÆue
;

732 
_mm_s„n˚
();

733 
	ghash_ödex
->
u∆ock_íåy2
(
£g_lock
,
ªad_lock
);

737 ++
	g˙t
;

738 
	g§c_off£t
+=
ENTRY_SIZE
;

746 
•lô_li°Node
(
li°Node
,
node
);

750 
©_u∆ock2
(
li°Node
->
lock
);

756 i‡(
	gnodeMëa
->
	gvÆid_˙t
)

758 
Skùli°Node
* 
	g√w_skùNode
 = 
NULL
;

760 
	g√w_skùNode
 = 
skùli°
->
Æloc_¶_node
();

762 i‡(
	g√w_skùNode
)

764 
uöt64_t
 
	ghÆf_key
;

765 
	ghÆf_key
 = 
föd_hÆf_ö_node
(
nodeMëa
,&
d©aNode
);

767 i‡(
	ghÆf_key
 > 
	gnode
->
	gkey
)

769 
	g√w_skùNode
->
	gkey
 = 
hÆf_key
;

771 
Li°Node
* 
	gli°_node
 = 
node
->
my_li°Node
;

772 
	gli°_node
->
	g√xt
->
	gkey
 < 
	ghÆf_key
)

773 
	gli°_node
 = 
li°_node
->
√xt
;

774 
	g√w_skùNode
->
	gmy_li°Node
 = 
li°_node
;

776 
Skùli°Node
* 
	g¥ev
[
MAX_LEVEL
+1];

777 
Skùli°Node
* 
	g√xt
[
MAX_LEVEL
+1];

778 
	gskùli°
->
ö£π_node
(
√w_skùNode
,
¥ev
,
√xt
);

781 
	gskùli°
->
‰ì_¶_node
(
√w_skùNode
);

794 
	gi
=0;i<
	gnodeMëa
->
	g¶Ÿ_˙t
;i++)

795 
	gnodeMëa
->
	gvÆid
[
i
] = 
Ál£
;

796 
	gnodeMëa
->
	gwrôãn_size
 = 0;

797 
	gnodeMëa
->
	g¶Ÿ_˙t
 = 0;

798 
	gnodeMëa
->
	gvÆid_˙t
 = 0;

804 
	gPH_Evi˘_Thªad
::
hŸ_to_w¨m
(
Skùli°Node
* 
node
,
boﬁ
 
f‹˚
)

807 
	gi
;

808 
LogLoc
 
	gŒ
;

809 * 
	gaddr
;

810 
uöt64_t
* 
	ghódî
;

811 
DoubÀLog
* 
	gdl
;

813 
size_t
 
	gíåy_li°_˙t
;

816 
NodeMëa
* 
	gnodeMëa
 = 
nodeAddr_to_nodeMëa
(
node
->
d©a_node_addr
);

820 
D©aNode
* 
	gd°_node
 = 
nodeAddr_to_node
(
node
->
d©a_node_addr
);

822 
uöt64_t
* 
	gﬁd_t‹n_hódî
 = 
NULL
;

823 
E¡ryAddr
 
	gﬁd_t‹n_addr
;

824 
size_t
 
	gﬁd_t‹n_right
 = 
node
->
t‹n_right
;

825 
boﬁ
 
	gmoved
[
NODE_SLOT_MAX
] = {
Ál£
,};

827 
size_t
 
	gwrôe_size
=0;

828 * 
	gbuf„r_wrôe_°¨t
 = 
ãmp_node
.
buf„r
+
nodeMëa
->
wrôãn_size
;

830 
	g°d
::
©omic
<
uöt8_t
>* 
£g_lock
;

838 i‡(
	gnode
->
	gt‹n_À·
)

840 
	gdl
 = &
doubÀLogLi°
[
node
->
t‹n_íåy
.
log_num
];

841 
	gaddr
 = 
dl
->
dømLogAddr
 + (
Œ
.
off£t
%dl->
my_size
);

842 
	gﬁd_t‹n_hódî
 = (
uöt64_t
*)
addr
;

843 
	gﬁd_t‹n_addr
.
	gloc
 = 0;

844 
	gﬁd_t‹n_addr
.
	gfûe_num
 = 
node
->
t‹n_íåy
.
log_num
;

845 
	gﬁd_t‹n_addr
.
	goff£t
 = 
Œ
.
off£t
%
dl
->
my_size
;

846 
mem˝y
(
buf„r_wrôe_°¨t
,
addr
+
node
->
t‹n_À·
,node->
t‹n_right
);

847 
	gwrôe_size
+=
node
->
t‹n_right
;

850 * 
	gﬁd_addr
[100];

852 
	gíåy_li°_˙t
 = 
node
->
íåy_li°
.
size
();

853 
	gi
=0;i<
	gíåy_li°_˙t
;i++)

855 
	gŒ
 = 
node
->
íåy_li°
[
i
];

856 
	gdl
 = &
doubÀLogLi°
[
Œ
.
log_num
];

857 
	gaddr
 = 
dl
->
dømLogAddr
 + (
Œ
.
off£t
%dl->
my_size
);

859 
	gﬁd_addr
[
i
] = 
addr
;

861 
	ghódî
 = (
uöt64_t
*)
addr
;

862 i‡(
	gdl
->
	gèû_sum
 > 
	gŒ
.
	goff£t
 || 
is_vÆid
(
hódî
Ë=
Ál£
)

864 
node
->
íåy_li°
[
i
].
log_num
 = -1;

868 
uöt64_t
 
	gkey
;

869 
	gkey
 = *(
uöt64_t
*)(
addr
+
HEADER_SIZE
);

870 i‡(
	gkey
 < 
	gnode
->key)

872 
¥ötf
("key is smallerÅhanÇode key\n");

875 
mem˝y
(
buf„r_wrôe_°¨t
+
wrôe_size
,
addr
,
ENTRY_SIZE
);

876 
	gwrôe_size
+=
ENTRY_SIZE
;

880 i‡(
	gf‹˚
)

882 
pmem_¡_wrôe
(
d°_node
->
buf„r
 + 
nodeMëa
->
wrôãn_size
 , 
buf„r_wrôe_°¨t
 , 
wrôe_size
);

883 
	gnode
->
	gt‹n_À·
 = 0;

884 
	gnode
->
	gt‹n_right
 = 0;

886 i‡(
	gwrôe_size
 > 0)

888 
	gnode
->
	gt‹n_íåy
 = 
Œ
;

889 
	gnode
->
	gt‹n_right
 = ((
NodeAddr
)+
nodeMëa
->
wrôãn_size
+
wrôe_size
Ë% 
PMEM_BUFFER_SIZE
;

890 
	gnode
->
	gt‹n_À·
 = 
ENTRY_SIZE
-
node
->
t‹n_right
;

891 
	gwrôe_size
-=
node
->
t‹n_right
;

893 
pmem_¡_wrôe
(
d°_node
->
buf„r
 + 
nodeMëa
->
wrôãn_size
 , 
buf„r_wrôe_°¨t
 , 
wrôe_size
);

894 --
	gíåy_li°_˙t
;

899 
_mm_s„n˚
();

901 
KVP
* 
	gkvp_p
;

902 
size_t
 
	gkey
;

904 
E¡ryAddr
 
	gd°_addr
,
	g§c_addr
;

905 
	gd°_addr
.
	gloc
 = 2;

906 
	gd°_addr
.
	gfûe_num
 = 
nodeMëa
->
my_off£t
.
poﬁ_num
;

907 
	gd°_addr
.
	goff£t
 = 
nodeMëa
->
my_off£t
.
node_off£t
 * 
NODE_SIZE
 + (
NodeAddr
Ë+ÇodeMëa->
wrôãn_size
;

909 i‡(
	gﬁd_t‹n_hódî
)

911 
¥ötf
("notÇow\n");

912 
	gkey
 = *(
uöt64_t
*)((*)
ﬁd_t‹n_hódî
+
HEADER_SIZE
);

913 
	gkvp_p
 = 
hash_ödex
->
ö£π
(
key
,&
£g_lock
,
ªad_lock
);

914 i‡(
	gkvp_p
->
	gvÆue
 =
ﬁd_t‹n_addr
.
vÆue
)

916 
kvp_p
->
vÆue
 = 
d°_addr
.value;

917 
	gkvp_p
->
	gvîsi⁄
 = 
£t_loc_w¨m
(
kvp_p
->
vîsi⁄
);

918 
	gnodeMëa
->
	gvÆid
[
nodeMëa
->
¶Ÿ_˙t
++] = 
åue
;

921 
	gnodeMëa
->
	gvÆid
[
nodeMëa
->
¶Ÿ_˙t
++] = 
Ál£
;

923 
	ghash_ödex
->
u∆ock_íåy2
(
£g_lock
,
ªad_lock
);

924 
£t_övÆid
(
ﬁd_t‹n_hódî
);

926 
	gd°_addr
.
	goff£t
+=
ﬁd_t‹n_right
;

929 
	g§c_addr
.
	gloc
 = 1;

931 
	gi
=0;i<
	gíåy_li°_˙t
;i++)

933 
	gŒ
 = 
node
->
íåy_li°
[
i
];

934 i‡(
	gŒ
.
	glog_num
 == -1)

936 
	gdl
 = &
doubÀLogLi°
[
Œ
.
log_num
];

937 
	gaddr
 = 
dl
->
dømLogAddr
 + (
Œ
.
off£t
%dl->
my_size
);

938 
	ghódî
 = (
uöt64_t
*)
addr
;

939 
	gkey
 = *(
uöt64_t
*)(
addr
+
HEADER_SIZE
);

943 
	g§c_addr
.
	gfûe_num
 = 
Œ
.
log_num
;

944 
	g§c_addr
.
	goff£t
 = 
Œ
.
off£t
%
dl
->
my_size
;

946 
	gkvp_p
 = 
hash_ödex
->
ö£π
(
key
,&
£g_lock
,
ªad_lock
);

947 i‡(
	gkvp_p
->
	gvÆue
 =
§c_addr
.
vÆue
)

949 
kvp_p
->
vÆue
 = 
d°_addr
.value;

950 
	gkvp_p
->
	gvîsi⁄
 = 
£t_loc_w¨m
(
kvp_p
->
vîsi⁄
);

951 
	gnodeMëa
->
	gvÆid
[
nodeMëa
->
¶Ÿ_˙t
++] = 
åue
;

952 ++
	gnodeMëa
->
	gvÆid_˙t
;

955 
	gnodeMëa
->
	gvÆid
[
nodeMëa
->
¶Ÿ_˙t
++] = 
Ál£
;

957 
	ghash_ödex
->
u∆ock_íåy2
(
£g_lock
,
ªad_lock
);

958 
£t_övÆid
(
hódî
);

960 i‡(
is_vÆid
((
uöt64_t
*)
addr
))

961 
¥ötf
("validÉrorr\n");

963 
	gd°_addr
.
	goff£t
+=
ENTRY_SIZE
;

966 
	gnodeMëa
->
	gwrôãn_size
+=
wrôe_size
;

971 
	gi
=0;i<
	gnode
->
	gíåy_li°
.
size
();i++)

973 
	gaddr
 = 
ﬁd_addr
[
i
];

974 
	ghódî
 = (
uöt64_t
*)
addr
;

975 
	gkey
 = *(
uöt64_t
*)(
addr
+
HEADER_SIZE
);

976 i‡(
is_vÆid
(
hódî
))

977 
¥ötf
("hotÅo warm validerror\n");

982 i‡(
	gnode
->
	gíåy_li°
.
size
(Ë* 
	gENTRY_SIZE
 !
node
->
íåy_size_sum
)

984 
¥ötf
("missm©ch %lu %lu\n",
node
->
íåy_li°
.
size
(Ë* 
ENTRY_SIZE
,Çode->
íåy_size_sum
);

987 
	gnode
->
	gíåy_li°
.
˛ór
();

988 
	gnode
->
	gíåy_size_sum
 = 0;

994 
	gPH_Evi˘_Thªad
::
åy_push
(
DoubÀLog
* 
dl
)

997 * 
addr
;

998 
uöt64_t
 
	ghódî
;

999 
	grv
=0;

1002 
	gdl
->
	gèû_sum
+
	gENTRY_SIZE
 <
dl
->
hód_sum
)

1004 
addr
 = 
dl
->
dømLogAddr
+(dl->
èû_sum
%dl->
my_size
);

1005 
	ghódî
 = *(
uöt64_t
*)
addr
;

1007 i‡(
is_vÆid
(
hódî
))

1009 
	gdl
->
	gèû_sum
+=
ENTRY_SIZE
;

1011 i‡(
	gdl
->
	gèû_sum
%dl->
	gmy_size
 + 
	gENTRY_SIZE
 > dl->my_size)

1012 
	gdl
->
	gèû_sum
+(
dl
->
my_size
 - (dl->
èû_sum
%dl->my_size));

1013 
	grv
 = 1;

1015  
	grv
;

1018 
	gPH_Evi˘_Thªad
::
åy_h¨d_evi˘
(
DoubÀLog
* 
dl
)

1023 * 
addr
;

1024 
uöt64_t
 
	ghódî
;

1025 
uöt64_t
 
	gkey
;

1026 
	grv
=0;

1034 i‡(
	gdl
->
	gèû_sum
 + dl->
	gmy_size
 <
dl
->
hód_sum
 + 
HARD_EVICT_SPACE
)

1037 
addr
 = 
dl
->
dømLogAddr
 + (dl->
èû_sum
 % dl->
my_size
);

1038 
	gkey
 = *(
uöt64_t
*)(
addr
+
HEADER_SIZE
);

1041 
Skùli°Node
* 
	g¥ev
[
MAX_LEVEL
+1];

1042 
Skùli°Node
* 
	g√xt
[
MAX_LEVEL
+1];

1043 
Skùli°Node
* 
	gnode
;

1045 
	gnode
 = 
skùli°
->
föd_node
(
key
,
¥ev
,
√xt
);

1046 i‡(
	gnode
->
	gíåy_li°
.
size
() == 0)

1047  
rv
;

1048 i‡(
åy_©_lock2
(
node
->
lock
Ë=
Ál£
)

1049  
rv
;

1051 
hŸ_to_w¨m
(
node
,
åue
);

1057 
©_u∆ock2
(
node
->
lock
);

1059 
	grv
 = 1;

1060 
åy_push
(
dl
);

1063  
	grv
;

1066 
	gPH_Evi˘_Thªad
::
åy_so·_evi˘
(
DoubÀLog
* 
dl
)

1068 * 
addr
;

1070 
uöt64_t
 
	ghódî
,
	gkey
;

1071 
	grv
 = 0;

1074 
Skùli°Node
* 
	g¥ev
[
MAX_LEVEL
+1];

1075 
Skùli°Node
* 
	g√xt
[
MAX_LEVEL
+1];

1076 
Skùli°Node
* 
	gnode
;

1077 
NodeMëa
* 
	gnodeMëa
;

1078 
LogLoc
 
	gŒ
;

1087 i‡(
	gdl
->
	gso·_adv_off£t
 < dl->
	gèû_sum
)

1088 
	gdl
->
	gso·_adv_off£t
 = 
dl
->
èû_sum
;

1090 
	gdl
->
	gso·_adv_off£t
 + 
	gENTRY_SIZE
 + dl->
	gmy_size
 <
dl
->
hód_sum
 + 
SOFT_EVICT_SPACE
)

1092 
addr
 = 
dl
->
dømLogAddr
 + ((dl->
so·_adv_off£t
Ë% dl->
my_size
);

1093 
	ghódî
 = *(
uöt64_t
*)
addr
;

1094 
	gkey
 = *(
uöt64_t
*)(
addr
+
HEADER_SIZE
);

1096 i‡(
is_vÆid
(
hódî
))

1098 
	grv
 = 1;

1100 
	gåue
)

1102 
	gnode
 = 
skùli°
->
föd_node
(
key
,
¥ev
,
√xt
);

1103 i‡(
åy_©_lock2
(
node
->
lock
Ë=
Ál£
)

1106 
	gnodeMëa
 = 
nodeAddr_to_nodeMëa
(
node
->
d©a_node_addr
);

1107 i‡((
	gNodeAddr
Ë+ 
	gnodeMëa
->
	gwrôãn_size
 + 
	gnode
->
	gíåy_size_sum
 + 
	gENTRY_SIZE
 > 
	gNODE_SIZE
)

1110 
hŸ_to_w¨m
(
node
,
åue
);

1112 i‡((
	gNodeAddr
Ë+ 
	gnodeMëa
->
	gwrôãn_size
 + 
	gENTRY_SIZE
 > 
	gNODE_SIZE
)

1113 
w¨m_to_cﬁd
(
node
);

1114 
©_u∆ock2
(
node
->
lock
);

1119 
	gŒ
.
	glog_num
 = 
dl
->
log_num
;

1120 
	gŒ
.
	goff£t
 = 
dl
->
so·_adv_off£t
;

1121 
	gnode
->
	gíåy_li°
.
push_back
(
Œ
);

1122 
	gnode
->
	gíåy_size_sum
+=
ENTRY_SIZE
;

1124 i‡(
	gkey
 < 
	gnode
->key)

1125 
¥ötf
("thread2 1026\n");

1133 #ifde‡
SOFT_FLUSH


1134 
hŸ_to_w¨m
(
node
,
Ál£
);

1136 
©_u∆ock2
(
node
->
lock
);

1141 
	gdl
->
	gso·_adv_off£t
+=
ENTRY_SIZE
;

1142 i‡((
	gdl
->
	gso·_adv_off£t
)%dl->
	gmy_size
 + 
	gENTRY_SIZE
 > dl->my_size)

1143 
	gdl
->
	gso·_adv_off£t
+=(
dl
->
my_size
-((dl->
so·_adv_off£t
)%dl->my_size));

1149  
	grv
;

1152 
	gPH_Evi˘_Thªad
::
evi˘_log
(
DoubÀLog
* 
dl
)

1154 
diff
=0;

1155 i‡(
åy_so·_evi˘
(
dl
))

1156 
	gdiff
 = 1;

1157 i‡(
åy_push
(
dl
))

1158 
	gdiff
 = 1;

1159 i‡(
åy_h¨d_evi˘
(
dl
))

1160 
	gdiff
 = 1;

1161 i‡(
åy_push
(
dl
))

1162 
	gdiff
 = 1;

1163  
	gdiff
;

1166 
	gPH_Evi˘_Thªad
::
evi˘_lo›
()

1168 
i
,
	gd⁄e
;

1170 
¥ötf
("evict start\n");

1171 
	gexô
 == 0)

1174 
›_check
();

1176 
	gd⁄e
 = 1;

1177 
	gi
=0;i<
	glog_˙t
;i++)

1179 i‡(
evi˘_log
(
log_li°
[
i
]))

1180 
	gd⁄e
 = 0;

1182 i‡(
	gd⁄e
)

1184 
	grun
 = 0;

1185 i‡(
	g¶ìp_time
 > 1000*1000)

1186 
¥ötf
("evict idle\n");

1188 
u¶ìp
(
¶ìp_time
);

1189 
_mm_m„n˚
();

1190 
sync_thªad
();

1191 
_mm_m„n˚
();

1192 
	grun
 = 1;

1193 i‡(
	g¶ìp_time
 < 1000*1000)

1194 
	g¶ìp_time
*=1.5;

1198 i‡(
	g¶ìp_time
 > 100*2)

1199 
	g¶ìp_time
*=0.5;

1202 
	grun
 = 0;

1203 
¥ötf
("evictÉnd\n");

	@/home/cgmin/pmem/ph/ph/thread2.h

4 
	~<c°döt
>

5 
	~<©omic
>

8 
	~"sh¨ed.h
"

10 
«me•a˚
 
	gPH


13 
	#QUERY_THREAD_MAX
 100

	)

14 
	#EVICT_THREAD_MAX
 100

	)

17 
˛ass
 
	gDoubÀLog
;

18 
˛ass
 
	gSkùli°Node
;

19 
˛ass
 
	gLi°Node
;

24 ˛as†
	cPH_Thªad


26 
	gpublic
:

27 
PH_Thªad
(Ë: 
lock
(0),
ªad_lock
(0),
run
(0),
exô
(0),
loˇl_£g_‰ì_hód
(0),
›_˙t
(0),
upd©e_ªque°
(0) {}

29 
upd©e_‰ì_˙t
();

30 
upd©e_èû_sum
();

31 
›_check
();

32 
sync_thªad
();

34 
	g°d
::
©omic
<
uöt8_t
> 
lock
;

35 vﬁ©ûê
uöt8_t
 
	gªad_lock
;

36 vﬁ©ûê
uöt8_t
 
	grun
;

37 vﬁ©ûê
uöt8_t
 
	gexô
;

38 vﬁ©ûê
size_t
 
	gloˇl_£g_‰ì_hód
;

39 
size_t
 
	g›_˙t
;

40 
	gupd©e_ªque°
;

42 
size_t
 
	gª˚¡_log_èûs
[64];

44 
	g∑ddög
[64];

47 ˛as†
	cPH_Quîy_Thªad
 : 
public
 
PH_Thªad


49 
¥iv©e
:

50 
DoubÀLog
* 
my_log
;

52 
	gpublic
:

53 
öô
();

54 
˛ón
();

56 
ö£π_›
(
uöt64_t
 
key
,* 
vÆue
);

57 
ªad_›
(
uöt64_t
 
key
,* 
buf
);

58 
dñëe_›
(
uöt64_t
 
key
);

59 
sˇn_›
(
uöt64_t
 
°¨t_key
,uöt64_à
íd_key
);

60 
√xt_›
(* 
buf
);

64 ˛as†
	cPH_Evi˘_Thªad
 : 
public
 
PH_Thªad


66 
¥iv©e
:

68 
evi˘_log
(
DoubÀLog
* 
dl
);

69 
åy_so·_evi˘
(
DoubÀLog
* 
dl
);

70 
åy_h¨d_evi˘
(
DoubÀLog
* 
dl
);

71 
åy_push
(
DoubÀLog
* 
dl
);

72 
hŸ_to_w¨m
(
Skùli°Node
* 
node
,
boﬁ
 
f‹˚
);

73 
w¨m_to_cﬁd
(
Skùli°Node
* 
node
);

74 
•lô_li°Node
(
Li°Node
* 
li°Node
,
Skùli°Node
* 
skùli°Node
);

76 
DoubÀLog
** 
	glog_li°
;

77 
	glog_˙t
;

79 
D©aNode
 
	gãmp_node
;

81 
size_t
 
	g¶ìp_time
;

83 
	gpublic
:

84 
öô
();

85 
˛ón
();

86 
evi˘_lo›
();

94 
size_t
 
gë_mö_èû
(
log_num
);

	@/home/cgmin/pmem/ph/ph/tree.cpp

1 
	~"åì.h
"

3 
	~<©omic
>

5 c⁄° 
size_t
 
	gNODE_POOL_LIST_SIZE
 = 1024;

6 c⁄° 
size_t
 
	gNODE_POOL_SIZE
 = 1024*1024;

8 c⁄° 
size_t
 
	gKEY_MIN
 0x0000000000000000

9 c⁄° 
size_t
 
	gKEY_MAX
 0xffffffffffffffff

11 
Tªe_Node
* 
	groŸ
;

13 
Tªe_Node
** 
	gnode_poﬁ_li°
;

14 
size_t
 
	gnode_poﬁ_˙t
;

15 
size_t
 
	gnode_poﬁ_li°_˙t
;

17 
Tªe_node
* 
	gnode_‰ì_hód
;

19 
	g°d
::
©omic
<
uöt8_t
> 
node_Æloc_lock
;

21 
	$åì_öô
()

23 
node_poﬁ_li°
 = (
Tªe_Node
**)
	`mÆloc
((Tªe_Node*Ë* 
NODE_POOL_LIST_SIZE
);

25 
node_poﬁ_li°
[0] = (
Tªe_Node
*)
	`mÆloc
((Tªe_NodeË* 
NODE_POOL_SIZE
);

26 
node_poﬁ_˙t
=0;

27 
node_poﬁ_li°_˙t
 = 0;

28 
node_‰ì_hód
 = 
NULL
;

30 
node_Æloc_lock
 = 0;

32 
roŸ
 = 
	`Æloc_åì_node
();

33 
roŸ
->
Àn
 = 0;

34 
roŸ
->
node_p
[0] =

36 
	}
}

38 
	$åì_˛ón
()

40 
i
;

41 
i
=0;i<=
node_poﬁ_li°_˙t
;i++)

43 
	`‰ì
(
node_poﬁ_li°
[
i
]);

45 
	`‰ì
(
node_poﬁ_li°
);

46 
	}
}

49 
Tªe_Node
* 
	$Æloc_åì_node
()

52 
node_Æloc_lock
);

53 
	`©_lock2
(
node_Æloc_lock
);

55 i‡(
node_‰ì_hód
)

57 
Tªe_Node
* 
rv
 = 
node_‰ì_hód
;

58 
node_‰ì_hód
 =Çode_‰ì_hód->
√xt
;

59 
	`©_u∆ock2
(
node_Æloc_lock
);

60  
rv
;

64 i‡(
node_poﬁ_˙t
 >
NODE_POOL_SIZE
)

66 i‡(
node_poﬁ_li°_˙t
 >
NODE_POOL_LIST_SIZE
)

67 
	`¥ötf
("no space forÇode!\n");

68 ++
node_poﬁ_li°_˙t
;

69 
node_poﬁ_li°
[
node_poﬁ_li°_˙t
] = (
Tªe_Node
*)
	`mÆloc
((Tªe_NodeË* 
NODE_POOL_SIZE
);

74 
	`©_u∆ock2
(
node_Æloc_lock
);

75  
node_poﬁ_li°
[
node_poﬁ_li°_˙t
][
node_poﬁ_˙t
++];

77 
	}
}

79 
	$‰ì_åì_node
(
Tªe_Node
* 
node
)

81 
	`©_lock2
(
node_Æloc_lock
);

82 
node
->
√xt
 = 
node_‰ì_hód
;

83 
node_‰ì_hód
 = 
node
;

84 
	`©_u∆ock2
(
node_Æloc_lock
);

85 
	}
}

	@/home/cgmin/pmem/ph/ph/tree.h

2 
«me•a˚
 
	gPH


5 c⁄° 
size_t
 
	gTREE_M
 = 8;

7 
	sTªe_Node


9 
size_t
 
	gkey
[
TREE_M
];

10 * 
	gnode_p
[
TREE_M
];

11 
size_t
 
	gÀn
;

12 
Tªe_Node
* 
	g√xt
;

15 
	sTªe_Lóf


17 * 
	g√xt
;

20 
åì_öô
();

21 
åì_˛ón
();

23 
Tªe_Node
* 
Æloc_åì_node
();

24 
‰ì_åì_node
(
Tªe_Node
* 
node
);

	@cceh.cpp

2 
	~<queue
>

3 
	~<°rög.h
>

4 
	~<°dio.h
>

5 
	~<°dlib.h
>

6 
	~<x86öåö.h
>

9 
	~<time.h
>

10 
	~<uni°d.h
>

12 
	~"c˚h.h
"

13 
	~"thªad2.h
"

14 
	~"lock.h
"

15 
	~"d©a2.h
"

17 
«me•a˚
 
	gPH


20 
thªad_loˇl
 
PH_Thªad
* 
my_thªad
;

22 
thªad_loˇl
 
SEG
* 
	gãmp_£g
 = 
NULL
;

26 
PH_Quîy_Thªad
 
quîy_thªad_li°
[
QUERY_THREAD_MAX
];

27 
num_quîy_thªad
;

28 
PH_Evi˘_Thªad
 
evi˘_thªad_li°
[
EVICT_THREAD_MAX
];

29 
num_evi˘_thªad
;

31 
CCEH
* 
	ghash_ödex
;

40 
	g°d
::
©omic
<
uöt32_t
> 
£g_‰ì_hód
;

42 
thªad_loˇl
 
uöt32_t
 
	gloˇl_£g_‰ì_mö_hód
=0;

43 
	g°d
::
©omic
<
uöt32_t
> 
£g_‰ì_èû
;

47 
	#FREE_SEG_LEN
 (1024*8)

	)

48 
	#FREE_QUEUE_LEN
 (1024*8)

49 

	)

50 
SEG
* 
	g‰ì_£g_queue
[
FREE_SEG_LEN
];

52 
	g°d
::
©omic
<
uöt8_t
> 
‰ì_£g_lock
;

54 
uöt64_t
 
	gr_mask
[65];

56 ** 
	gkey_¨øy
 = 0;

57 * 
	gkey_˙t
 = 0;

58 
	g°d
::
©omic
<> 
key_¨øy_˙t
;

59 
thªad_loˇl
 
	gkey_¨øy_ödex
=0;

60 
	gmax_ödex
;

63 
	g°d
::
©omic
<
uöt32_t
> 
Æloc_£g_˙t
;

65 
uöt64_t
 
MurmurHash64A_L8
 ( c⁄° * 
key
 )

67 c⁄° 
	gÀn
 = 8;

68 c⁄° 
uöt64_t
 
	g£ed
 = 5516;

71 c⁄° 
uöt64_t
 
	gm
 = 0xc6a4a7935bd1e995;

73 c⁄° 
	gr
 = 47;

75 
uöt64_t
 
	gh
 = 
£ed
 ^ (
Àn
 * 
m
);

77 c⁄° 
uöt64_t
 * 
	gd©a
 = (c⁄° uöt64_à*)
key
;

78 c⁄° 
uöt64_t
 * 
	gíd
 = 
d©a
 + (
Àn
/8);

80 
	gd©a
 !
íd
)

82 
uöt64_t
 
k
 = *
d©a
++;

84 
	gk
 *
m
;

85 
	gk
 ^
k
 >> 
r
;

86 
	gk
 *
m
;

88 
	gh
 ^
k
;

89 
	gh
 *
m
;

92 c⁄° * 
	gd©a2
 = (c⁄° *)
d©a
;

94 
	gÀn
 & 7)

96 7: 
h
 ^((
uöt64_t
Ë
d©a2
[6]) << 48;

97 6: 
h
 ^((
uöt64_t
Ë
d©a2
[5]) << 40;

98 5: 
h
 ^((
uöt64_t
Ë
d©a2
[4]) << 32;

99 4: 
h
 ^((
uöt64_t
Ë
d©a2
[3]) << 24;

100 3: 
h
 ^((
uöt64_t
Ë
d©a2
[2]) << 16;

101 2: 
h
 ^((
uöt64_t
Ë
d©a2
[1]) << 8;

102 1: 
h
 ^((
uöt64_t
Ë
d©a2
[0]);

103 
	gh
 *
m
;

106 
	gh
 ^
h
 >> 
r
;

107 
	gh
 *
m
;

108 
	gh
 ^
h
 >> 
r
;

110  
	gh
;

113 
ölöe
 * 
	gCCEH
::
lﬂd_key
(c⁄° 
uöt64_t
 &
key
)

115  (*)&
key
;

118 
ölöe
 
boﬁ
 
	gCCEH
::
com∑ª_key
–c⁄° vﬁ©ûê
uöt64_t
 &
key1
,* c⁄° &
key2
,c⁄° 
uöt32_t
 &
hash
)

120  
	gkey1
 =(*(
uöt64_t
*)
key2
);

122 
ölöe
 
	gCCEH
::
ö£π_key
(vﬁ©ûê
uöt64_t
 &
key1
,* c⁄° &
key2
,c⁄° 
uöt32_t
 &
hash
)

124 
	gkey1
 = (*((
uöt64_t
*)
key2
));

127 
ölöe
 
uöt64_t
 
	gCCEH
::
hf
(* c⁄° &
key
)

140  
°d
::
_Hash_byãs
(
key
,8,5516);

143 
ölöe
 
uöt64_t
 
	gCCEH
::
hf
(uöt64_à
key
)

145  
°d
::
_Hash_byãs
((* c⁄°)&
key
,8,5516);

154 
ölöe
 
boﬁ
 
zîo_check
(
uöt64_t
 &
key
)

156  
	gkey
 =
INV0
;

159 
öv_£g
(
SEG
* vﬁ©ûê
£g
)

161 
	gi
;

164 
KVP
* 
	gkvp_p
;

166 
	gkvp_p
 = (
KVP
*)
£g
->
˛
;

178 
mem£t
(
£g
->
˛
,0xffffffff,
CL_PER_SEG
*
CL_SIZE
);

186 
SEG
* 
Æloc_£g
()

188 
SEG
* 
	g£g
;

201 i‡(
	gloˇl_£g_‰ì_mö_hód
 <
£g_‰ì_èû
)

202 
loˇl_£g_‰ì_mö_hód
 = 
PH
::
mö_£g_‰ì_˙t
();

204 
uöt32_t
 
	gíd
;

205 
uöt32_t
 
	gs·
;

206 
	gåue
)

208 
	gíd
 = 
loˇl_£g_‰ì_mö_hód
;

209 
	gs·
 = 
£g_‰ì_èû
;

210 
	gs·
 < 
	gíd
)

212 i‡(
	g£g_‰ì_èû
.
com∑ª_exch™ge_°r⁄g
(
s·
,sft+1))

214 
	g£g
 = 
‰ì_£g_queue
[
s·
%
FREE_SEG_LEN
];

215  
	g£g
;

217 
	gs·
 = 
£g_‰ì_èû
;

220 i‡(
	g£g_‰ì_èû
 + 
	gFREE_SEG_LEN
 > 
	g£g_‰ì_hód
)

223 
	gÆloc_£g_˙t
++;

224 i‡(
posix_memÆign
((**)&
£g
,64,(
SEG
)) != 0)

225 
¥ötf
("posix_memalignÉrror2\n");

228 i‡(
	gmy_thªad
->
	gupd©e_ªque°
)

229 
	gmy_thªad
->
sync_thªad
();

230 
	gloˇl_£g_‰ì_mö_hód
 = 
PH
::
mö_£g_‰ì_˙t
();

232 
¥ötf
("u£ fªêqueuê%u %u\n",
£g_‰ì_èû
.
lﬂd
(),
£g_‰ì_hód
.load());

233 
u¶ìp
(100*1000);

238  
	g£g
;

242 
SEG
* 
Æloc_£g
()

244 
SEG
* 
	g£g
;

245 
	gÆloc_£g_˙t
++;

246 i‡(
posix_memÆign
((**)&
£g
,64,(
SEG
)) != 0)

247 
¥ötf
("posix_memalignÉrror2\n");

248  
	g£g
;

251 
‰ì_£g
(
SEG
* 
£g
)

269 
uöt32_t
 
	gsfh
;

270 
	gåue
)

272 
	gsfh
 = 
£g_‰ì_hód
;

273 
	g£g_‰ì_èû
 + 
	gFREE_SEG_LEN
 <
sfh
)

275 
¥ötf
("‰ì seg fuŒ %u %u\n",
£g_‰ì_èû
.
lﬂd
(),
£g_‰ì_hód
.load());

276 i‡(
	gmy_thªad
->
	gupd©e_ªque°
)

277 
	gmy_thªad
->
sync_thªad
();

278 
u¶ìp
(1000*100);

280 i‡(
	g£g_‰ì_hód
.
com∑ª_exch™ge_°r⁄g
(
sfh
,sfh+1))

282 
	g‰ì_£g_queue
[
sfh
%
FREE_SEG_LEN
] = 
£g
;

308 
	gCCEH
::
CCEH
()

310 
poöt
 = 0;

311 
öô
(1);

313 
	gCCEH
::
CCEH
(
ö_dïth
)

315 
poöt
 = 1;

316 
öô
(
ö_dïth
);

318 
	gCCEH
::~
CCEH
()

320 
˛ón
();

323 
	gCCEH
::
thªad_loˇl_öô
()

325 
ãmp_£g
 = 
Æloc_£g
();

328 
	gCCEH
::
thªad_loˇl_˛ón
()

330 
‰ì
(
ãmp_£g
);

333 
	gCCEH
::
öô
(
ö_dïth
)

336 
i
;

337 
	gdïth
 = 
ö_dïth
;

338 
	gdm
 = 
r_mask
[
dïth
];

339 
	g£g_˙t
 = 1 << 
dïth
;

344 
	g£g_li°
 = (
SEG
** vﬁ©ûe)
mÆloc
((SEG* vﬁ©ûeË* 
£g_˙t
);

353 
	gi
=0;i<
	g£g_˙t
;i++)

358 
	g£g_li°
[
i
] = 
Æloc_£g
();

361 
öv_£g
(
£g_li°
[
i
]);

362 
	g£g_li°
[
i
]->
	glock
 = 0;

364 
	g£g_li°
[
i
]->
	gdïth
 = 
dïth
;

370 
	gwrôe_lock
 = 0;

374 #i‡
˘t


375 
	gbc
 = 
sc
 = 
˘t1
 = 
˘t3
 = 
˘t2
 = 0;

376 
	gföd_˙t
 = 
pic
 = 1;

380 
	gCCEH
::
˛ón
()

382 
i
;

383 
	gi
=
£g_˙t
-1;i>=0;i--)

385 i‡(
	gi
 + 1 <((
uöt64_t
)1 << 
£g_li°
[
i
]->
dïth
))

398 
‰ì
(
£g_li°
[
i
]);

401 
‰ì
((*)
£g_li°
);

403 #ifde‡
˘t


404 
¥ötf
("dïth %d s∂ô_˙à%d in£π %ld in£π_avg %ld s∂ô %ld câ3 %ld in£π_˙à%d b¯%d föd %ld föd_˙à%d föd_avg %ld \n",
dïth
,
sc
,
˘t1
,˘t1/
pic
,
˘t2
,
˘t3
,pic,
bc
,
˘t4
,
föd_˙t
,ctt4/find_cnt);

410 
boﬁ
 
	gCCEH
::
ªad
(
uöt64_t
 &
key
,vﬁ©ûêuöt64_à**
ªt
,vﬁ©ûê**
£g_dïth
)

412 
boﬁ
 
	gsf
 = 
Ál£
;

413 
boﬁ
 
	gexi°
;

414 
	gåue
)

416 
	gexi°
 = 
ªad_wôh_Áû
(
key
,
ªt
,
£g_dïth
,
sf
);

417 i‡(
	gsf
)

418  
	gexi°
;

422 
boﬁ
 
	gCCEH
::
ªad_wôh_Áû
(
uöt64_t
 &
key
,vﬁ©ûêuöt64_à**
ªt
,vﬁ©ûê**
£g_dïth
, boﬁ &
sf
)

432 #ifde‡
˘t


433 
	gföd_˙t
++;

434 
time•ec
 
	gts1
,
	gts2
;

435 
˛ock_gëtime
(
CLOCK_MONOTONIC
,&
ts1
);

436 
_mm_m„n˚
();

438 
	g¢
,
	g˙
,
	gi
;

439 
KVP
* 
	gkvp_p
;

440 
uöt64_t
 
	ghk
;

442 c⁄° 
	g˛_shi·
 = 64-
CL_BIT
;

443 
	gl
;

444 
	g°¨t_dïth
;

447 i‡(
zîo_check
(
key
))

449 *
	gªt
 = &
zîo_íåy
.
vÆue
;

450 *
	g£g_dïth
 = 
NULL
;

451 i‡(
	gzîo_íåy
.
	gvîsi⁄
 & (
	gVER_DELETE
))

452  
	gÁl£
;

454  
	gåue
;

462 
	ghk
 = 
hf
(
key
);

468 
	g¢
 = 
hk
 & 
dm
;

471 
	g˙
 = 
hk
 >> 
˛_shi·
;

474 
	gl
 = 
˙
*
KVP_PER_CL
;

476 *
	g£g_dïth
 = &
£g_li°
[
¢
]->
dïth
;

477 
	g°¨t_dïth
 = 
£g_li°
[
¢
]->
dïth
;

478 
_mm_s„n˚
();

479 
	gkvp_p
 = (
KVP
*)
£g_li°
[
¢
]->
˛
;

494 
	gi
=0;i<
KVP_PER_CL
 * 
	gLINEAR_MULTI
;i++)

497 
	gl
%=
CL_PER_SEG
*
KVP_PER_CL
;

501 i‡(
	gkvp_p
[
l
].
	gkey
 =
key
)

503 #ifde‡
˘t


504 
_mm_m„n˚
();

505 
˛ock_gëtime
(
CLOCK_MONOTONIC
,&
ts2
);

506 
	g˘t4
+=(
ts2
.
tv_£c
-
ts1
.tv_£c)*1000000000+ts2.
tv_n£c
-ts1.tv_nsec;

509 *
	gªt
 = &
kvp_p
[
l
].
vÆue
;

510 
_mm_s„n˚
();

511 
	gsf
 = (
°¨t_dïth
 =
£g_li°
[
¢
]->
dïth
);

512  
	gåue
;

516 
	gl
++;

519 
_mm_s„n˚
();

520 
	gsf
 = (
°¨t_dïth
 =
£g_li°
[
¢
]->
dïth
);

521  
	gÁl£
;

525 
	gCCEH
::
ªmove
(
uöt64_t
 &
key
)

530 
¢
,
	g˙
,
	gi
;

532 
KVP
* 
	gkvp_p
;

533 
SEG
* 
	g£g
;

534 * 
	grv
;

535 
	gz
 = 0;

537 
	gl
;

541 i‡(
zîo_check
(
key
))

543 
	göv0_vÆue
 = 0;

547 c⁄° 
uöt64_t
 
	ghk
 = 
hf
(
key
);

548 c⁄° 
uöt32_t
 
	ghk2
 = *(uöt32_t*)(&
hk
);

550 
	gªåy
:

555 
¢
 = 
hk
 % ((
uöt64_t
)1 << 
dïth
);

557 
	g˙
 = 
hk
 >> (64-
CL_BIT
);

559 
	g£g
 = (
SEG
*)
£g_li°
[
¢
];

563 
©_lock2
(
£g
->
lock
);

566 i‡(
	g¢
 !
hk
 % ((
uöt64_t
)1 << 
dïth
))

569 
©_u∆ock2
(
£g
->
lock
);

571 
	gªåy
;

575 
	gkvp_p
 = (
KVP
*)
£g_li°
[
¢
]->
˛
;

576 
	gl
 = 
˙
*
KVP_PER_CL
;

578 
	gi
=0;i<
KVP_PER_CL
 * 
	gLINEAR_MULTI
;i++)

580 
	gl
%=
KVP_PER_CL
*
CL_PER_SEG
;

583 i‡(
com∑ª_key
(
kvp_p
[
l
].
key
,key,
hk2
))

585 
	gkvp_p
[
l
].
	gvÆue
 = 0;

589 
©_u∆ock2
(
£g
->
lock
);

592 
	gl
++;

596 
©_u∆ock2
(
£g
->
lock
);

605 
£g_gc
()

608 
SEG
* 
	g£g
;

610 
uöt32_t
 
	gi
,
	gèû
,
	ghód
;

611 
	gèû
 = 
£g_‰ì_èû
;

612 
	ghód
 = 
£g_‰ì_hód
;

613 
	gi
 = 
èû
;ò< 
	ghód
;i++)

622 
	g£g
 = 
‰ì_£g_queue
[
i
%
FREE_SEG_LEN
];

623 
‰ì
(
£g
);

629 
	gCCEH
::
dú_doubÀ
()

631 
¥ötf
("c˚h dú doubÀ dïth %d\n",
dïth
);

632 
SEG
** vﬁ©ûê
	g√w_li°
;

633 
SEG
** vﬁ©ûê
	gﬁd_li°
;

634 
	gﬁd_li°
 = (
SEG
** vﬁ©ûe)
£g_li°
;

635 
	g√w_li°
 = (
SEG
** vﬁ©ûe)
mÆloc
((SEG* vﬁ©ûeË* 
£g_˙t
*2);

638 
	gi
;

639 
	gi
=0;i<
	g£g_˙t
;i++)

640 
	g√w_li°
[
i
] = 
√w_li°
[
£g_˙t
+i] = 
ﬁd_li°
[i];

644 
	g£g_li°
 = 
√w_li°
;

645 
	g£g_˙t
*=2;

646 ++
	gdïth
;

647 
	gdm
 = 
r_mask
[
dïth
];

648 
_mm_s„n˚
();

649 
‰ì
(
ﬁd_li°
);

653 
¥öt_£g
(
SEG
* 
£g
,
¢
)

681 
	gCCEH
::
•lô
(
¢
)

684 
SEG
* 
£g
;

685 
	gi
;

686 
	g˙t
;

688 
uöt64_t
 
	gmask
;

689 
KVP
* 
	gkvp_p
;

690 
KVP
* 
	g√w_kvp_p1
;

691 
KVP
* 
	g√w_kvp_p2
;

693 
	g£g
 = 
£g_li°
[
¢
];

696 i‡(
	g£g
->
	gdïth
 =
dïth
)

698 
uöt8_t
 
lock
;

718 
	glock
 = 
wrôe_lock
;

720 i‡(
	glock
)

722 
©_u∆ock2
(
£g
->
lock
);

726 i‡(
	gwrôe_lock
.
com∑ª_exch™ge_°r⁄g
(
lock
,lock+1))

732 i‡(
	g£g
->
	gdïth
 !
dïth
)

734 
©_u∆ock2
(
£g
->
lock
);

736 
	gwrôe_lock
--;

742 
	gåue
)

744 
	g˙t
 = 0;

745 
	gi
=0;i<
	gnum_quîy_thªad
;i++)

748 i‡(
	gquîy_thªad_li°
[
i
].
	gªad_lock
)

749 ++
	g˙t
;

751 
	gi
=0;i<
	gnum_evi˘_thªad
;i++)

754 i‡(
	gevi˘_thªad_li°
[
i
].
	gªad_lock
)

755 ++
	g˙t
;

757 i‡(
	g˙t
 < 1)

769 
dú_doubÀ
();

774 
	gwrôe_lock
--;

786 
	gkvp_p
 = (
KVP
*)
£g
->
˛
;

788 
SEG
* 
	g√w_£g1
;

789 
SEG
* 
	g√w_£g2
;

792 
	g√w_£g1
 = 
ãmp_£g
;

793 
	g√w_£g2
 = 
Æloc_£g
();

797 
öv_£g
(
√w_£g1
);

798 
öv_£g
(
√w_£g2
);

800 
	g√w_£g1
->
	glock
 = 0;

802 
	g√w_£g1
->
	gdïth
 = 
£g
->
dïth
+1;

804 
	g√w_£g2
->
	glock
 = 0;

806 
	g√w_£g2
->
	gdïth
 = 
£g
->
dïth
+1;

808 
	g√w_kvp_p1
 = (
KVP
*)
√w_£g1
->
˛
;

809 
	g√w_kvp_p2
 = (
KVP
*)
√w_£g2
->
˛
;

812 
	gmask
 = (
uöt64_t
)1 << 
£g
->
dïth
;

814 
	gj
,
	gl
;

816 
uöt64_t
 
	ghk
;

820 
	gi
=0;i<
	gCL_PER_SEG
;i++)

824 
	gl
 = 
i
*
KVP_PER_CL
;

826 
	gj
=0;j<
	gKVP_PER_CL
;j++)

828 i‡(
	gkvp_p
[
l
].
	gkey
 =
INV0
 || 
kvp_p
[l].
vÆue
 == 0)

833 
l
++;

846 
	ghk
 = 
hf
(
kvp_p
[
l
].
key
);

876 i‡(
	ghk
 & 
	gmask
)

877 
	g√w_kvp_p2
[
l
] = 
kvp_p
[l];

879 
	g√w_kvp_p1
[
l
] = 
kvp_p
[l];

888 
	gl
++;

892 
_mm_s„n˚
();

899 
	gl
 = 1 << (
£g
->
dïth
+1);

902 
	gi
=
¢
;i<
	g£g_˙t
;i+=
l
)

903 
£g_li°
[
i
] = 
√w_£g1
;

908 
	gi
=
¢
 + (1 << 
£g
->
dïth
);i<
	g£g_˙t
;i+=
l
)

909 
£g_li°
[
i
] = 
√w_£g2
;

943 
_mm_s„n˚
();

945 
	gãmp_£g
 = 
£g
;

950 
KVP
* 
	gCCEH
::
ö£π
(
uöt64_t
 &
key
,
°d
::
©omic
<
uöt8_t
> **
u∆ock_p
,vﬁ©ûêuöt8_à&
ªad_lock
)

952 
KVP
* 
	gªt
;

953 
	gåue
)

955 
	gªt
 = 
ö£π_wôh_Áû
(
key
,
u∆ock_p
,
ªad_lock
);

956 i‡(
	gªt
 !
NULL
)

957  
ªt
;

963 
KVP
* 
	gCCEH
::
ö£π_wôh_Áû
(
uöt64_t
 &
key
,
°d
::
©omic
<
uöt8_t
> **
u∆ock_p
,vﬁ©ûêuöt8_à&
ªad_lock
)

973 #ifde‡
˘t


974 
	gpic
++;

975 
time•ec
 
	gts1
,
	gts2
,
	gts3
,
	gts4
;

976 
˛ock_gëtime
(
CLOCK_MONOTONIC
,&
ts3
);

977 
_mm_m„n˚
();

979 
	g¢
,
	g˙
,
	gi
;

980 
uöt64_t
 
	ghk
;

981 
uöt32_t
 
	ghk2
;

982 c⁄° 
	g˛_shi·
 = 64-
CL_BIT
;

983 
	gl
;

984 
SEG
* 
	g£g
;

985 
KVP
* 
	gkvp_p
;

989 i‡(
zîo_check
(
key
))

991 
¥ötf
("zero\n");

992 
©_lock2
(
zîo_lock
);

993 *
	gu∆ock_p
 = &
zîo_lock
;

994 
	gdú_lock
++;

995  &
	gzîo_íåy
;

997 
	göv0_vÆue
 = 
ve_u
.
ve_64
;

998 i‡(
	gu∆ock
)

999 *(**)
	gu∆ock
 = 
NULL
;

1000  &
	göv0_vÆue
;

1009 i‡(
	gwrôe_lock
)

1012  
	gNULL
;

1020 ++
	gªad_lock
;

1024 i‡(
	gwrôe_lock
)

1026 
¥ötf
("split?\n");

1028 --
	gªad_lock
;

1029  
	gNULL
;

1039 i‡(
zîo_check
(
key
))

1041 
¥ötf
("zero\n");

1042 
©_lock2
(
zîo_lock
);

1043 *
	gu∆ock_p
 = &
zîo_lock
;

1044  &
	gzîo_íåy
;

1047 
	ghk
 = 
hf
(
key
);

1061 
	g¢
 = 
hk
 & 
dm
;

1066 
	g˙
 = 
hk
 >> 
˛_shi·
;

1074 
	g£g
 = 
£g_li°
[
¢
];

1084 i‡(
åy_©_lock2
(
£g
->
lock
) == 0)

1094 --
ªad_lock
;

1095  
	gNULL
;

1103 i‡(
	g£g
 !
£g_li°
[
¢
])

1108 
©_u∆ock2
(
£g
->
lock
);

1112 
	gdú_lock
--;

1117 i‡(
ö£π2
(
key
,
vÆue
,
¢
,
˙
))

1120 
©_u∆ock2
(
£g
->
lock
);

1122 #ifde‡
˘t


1123 
˛ock_gëtime
(
CLOCK_MONOTONIC
,&
ts4
);

1124 
	g˘t1
+=(
ts4
.
tv_£c
-
ts3
.tv_£c)*1000000000+ts4.
tv_n£c
-ts3.tv_nsec;

1131  
	gkvp_p
 = (
KVP
*)
£g
->
˛
;

1132 
	gl
 = 
˙
*
KVP_PER_CL
;

1146 #ifde‡
˘t


1151 i‡(
	gpoöt
)

1153 
	göv0_vÆue
.
	gnode_off£t
 = 0;

1154  &
	göv0_vÆue
;

1157 
	gi
=0;i<
KVP_PER_CL
 * 
	gLINEAR_MULTI
;i++)

1159 #ifde‡
˘t


1162 
	gl
%=
KVP_PER_CL
*
CL_PER_SEG
;

1166 i‡(
	gkvp_p
[
l
].
	gkey
 =
INV0
 || 
kvp_p
[l].
key
 == key)

1175 *
u∆ock_p
 = &
£g
->
lock
;

1176 #ifde‡
˘t


1177 
_mm_m„n˚
();

1178 
˛ock_gëtime
(
CLOCK_MONOTONIC
,&
ts4
);

1179 
	g˘t1
+=(
ts4
.
tv_£c
-
ts3
.tv_£c)*1000000000+ts4.
tv_n£c
-ts3.tv_nsec;

1182  &
	gkvp_p
[
l
];

1184 
	gl
++;

1188 i‡(
	gi
 < 
KVP_PER_CL
*
	gLINEAR_MULTI
)

1190 i‡(
	gkvp_p
[
l
].
	gkey
 =
INV0
)

1192 
kvp_p
[
l
].
vÆue
 = value;

1193 
_mm_s„n˚
();

1194 
	gkvp_p
[
l
].
	gkey
 = 
key
;

1198 i‡(
	gu∆ock
)

1199 *(**)
	gu∆ock
 = 
£g
;

1201 
©_u∆ock2
(
£g
->
lock
);

1202 #ifde‡
˘t


1203 
_mm_m„n˚
();

1204 
˛ock_gëtime
(
CLOCK_MONOTONIC
,&
ts4
);

1205 
	g˘t1
+=(
ts4
.
tv_£c
-
ts3
.tv_£c)*1000000000+ts4.
tv_n£c
-ts3.tv_nsec;

1208  &
	gkvp_p
[
l
].
	gvÆue
;

1210 i‡(
	gkvp_p
[
l
].
	gkey
 =
key
)

1212 i‡(
u∆ock
)

1213 *(**)
u∆ock
 = 
£g
;

1216 
	gkvp_p
[
l
].
	gvÆue
 = 
vÆue
;

1217 
_mm_s„n˚
();

1218 
©_u∆ock2
(
£g
->
lock
);

1223 #ifde‡
˘t


1224 
_mm_m„n˚
();

1225 
˛ock_gëtime
(
CLOCK_MONOTONIC
,&
ts4
);

1226 
	g˘t1
+=(
ts4
.
tv_£c
-
ts3
.tv_£c)*1000000000+ts4.
tv_n£c
-ts3.tv_nsec;

1229  &
	gkvp_p
[
l
].
	gvÆue
;

1235 #ifde‡
˘t


1236 
_mm_m„n˚
();

1237 
	gsc
++;

1238 
˛ock_gëtime
(
CLOCK_MONOTONIC
,&
ts1
);

1240 
•lô
(
¢
 % ((
uöt64_t
)1 << 
£g
->
dïth
));

1241 #ifde‡
˘t


1242 
_mm_m„n˚
();

1243 
˛ock_gëtime
(
CLOCK_MONOTONIC
,&
ts2
);

1244 
	g˘t2
+=(
ts2
.
tv_£c
-
ts1
.tv_£c)*1000000000+ts2.
tv_n£c
-ts1.tv_nsec;

1258 --
	gªad_lock
;

1260  
	gNULL
;

1266 
	gCCEH
::
u∆ock_íåy2
(
°d
::
©omic
<
uöt8_t
> *
lock_p
,vﬁ©ûêuöt8_à&
ªad_lock
)

1279 i‡(!
	gpoöt
)

1280 
¥ötf
("ueÉrrror?\n");

1281 i‡(
	glock_p
)

1284 
©_u∆ock2
(*
lock_p
);

1286 --
	gªad_lock
;

1290 
öô_c˚h
()

1292 
¥ötf
("init cceh\n");

1295 
¥ötf
("sizeo‡KVP %ld\n",(
KVP
));

1296 
¥ötf
("sizeo‡CL %ld\n",(
CL
));

1297 
	gi
;

1298 
	gr_mask
[0] = 0;

1299 
	gi
=1;i<=64;i++)

1300 
	gr_mask
[
i
] = 
r_mask
[i-1]*2+1;

1303 i‡(
	gKEY_SIZE
 != 8)

1305 
key_¨øy
 = (**)
mÆloc
((*Ë* 
KEY_ARRAY_MAX
);

1306 
	gkey_˙t
 = (*)
mÆloc
((*Ë* 
KEY_ARRAY_MAX
);

1307 
	gkey_¨øy_˙t
 = 0;

1309 
	gmax_ödex
 = 
KEY_SIZE
*
KEY_ARRAY_MAX
;

1310 
	gkey_˙t
[0] = 
max_ödex
;

1311 
	gkey_¨øy
[0] = 
NULL
;

1316 
	ghash_ödex
 = 
√w
 
CCEH
(20);

1319 
˛ón_c˚h
()

1321 
¥ötf
("clean cceh\n");

1324 
¥ötf
("SEG sizê%ld hash %lfGB\n",(
SEG
),(
Æloc_£g_˙t
*(SEG))/1024/1024/1024);

1325 
¥ötf
("SEG cou¡ %u\n",
Æloc_£g_˙t
.
lﬂd
());

1329 i‡(
	gkey_¨øy
)

1331 
	gi
;

1332 
	gi
=0+1;i<
	gkey_¨øy_˙t
;i++)

1333 
‰ì
(
key_¨øy
[
i
]);

1334 
‰ì
(
key_¨øy
);

1335 
‰ì
(
key_˙t
);

1338 
dñëe
 
	ghash_ödex
;

1355 
ölöe
 * 
	gCCEH_vk
::
lﬂd_key
(c⁄° 
uöt64_t
 &
key
)

1359 
KeyE¡ry_u
 
ku
;

1360 
	gku
.
	gke_64
 = 
key
;

1361  &
	gkey_¨øy
[
ku
.
ke
.
hp
.
key_¨øy
][ku.ke.hp.
key_off£t
];

1366 
ölöe
 * 
	gCCEH_vk
::
lﬂd_key2
(c⁄° 
KeyE¡ry
 &
key
)

1370  &
key_¨øy
[
key
.
hp
.key_¨øy][key.hp.
key_off£t
];

1375 
ölöe
 
boﬁ
 
	gCCEH_vk
::
com∑ª_key
(c⁄° vﬁ©ûê
uöt64_t
 &
key1
,* c⁄° &
key2
,c⁄° 
uöt32_t
 &
hash
)

1377 
KeyE¡ry_u
 
	gkey
;

1378 
	gkey
.
	gke_64
 = 
key1
;

1379 i‡(
	ghash
 !
key
.
ke
.
hp
.
hash
)

1380  
Ál£
;

1381 * 
	gkl
 = 
lﬂd_key2
(
key
.
ke
);

1382  *((
	guöt64_t
*)
	gkl
Ë=*((
uöt64_t
*)
key2
Ë&& *((uöt64_t*)
kl
+1) == *((uint64_t*)key2+1);

1384 
ölöe
 
	gCCEH_vk
::
ö£π_key
(vﬁ©ûê
uöt64_t
 &
key1
,* c⁄° &
key2
,c⁄° 
uöt32_t
 &
hash
)

1387 i‡(
	gkey_˙t
[
key_¨øy_ödex
] + 
	gPH_KEY_SIZE
 >
max_ödex
)

1389 
key_¨øy_ödex
 = 
key_¨øy_˙t
.
„tch_add
(1);

1390 
	gkey_˙t
[
key_¨øy_ödex
] = 0;

1391 
	gkey_¨øy
[
key_¨øy_ödex
] = (*)
mÆloc
(
max_ödex
);

1394 
mem˝y
(&
key_¨øy
[
key_¨øy_ödex
][
key_˙t
[key_¨øy_ödex]],
key2
,
PH_KEY_SIZE
);

1396 
KeyE¡ry_u
 
	gkey
;

1397 
	gkey
.
	gke
.
	ghp
.
	gkey_¨øy
 = 
key_¨øy_ödex
;

1398 
	gkey
.
	gke
.
	ghp
.
	gkey_off£t
 = 
key_˙t
[
key_¨øy_ödex
];

1399 
	gkey
.
	gke
.
	ghp
.
	ghash
 = 
hash
;

1401 
	gkey_˙t
[
key_¨øy_ödex
]+=
PH_KEY_SIZE
;

1403 
	gkey1
 = 
key
.
ke_64
;

1408 
ölöe
 
uöt64_t
 
	gCCEH_vk
::
hf
(* c⁄° &
key
)

1421  
°d
::
_Hash_byãs
(
key
,16,5516);

1425 
ölöe
 
boﬁ
 
	gCCEH_vk
::
zîo_check
(* c⁄° &
key
)

1427  
Ál£
;

	@cceh.h

4 
	~<©omic
>

10 
	#INV0
 0xffffffffffffffff

	)

14 
	#KVP_PER_CL
 2

15 
	#CL_SIZE
 64

	)

18 
	#CL_BIT
 4

	)

19 
	#CL_PER_SEG
 (1 << 
CL_BIT
)

	)

20 
	#LINEAR_MULTI
 4

	)

22 
	#SPLIT_MASK
 (1 << 6)

23 

	)

26 
«me•a˚
 
	gPH


31 
	#KEY_ARRAY_MAX
 (1 << 16)

	)

35 
	sH™dP


37 
uöt32_t
 
	ghash
;

38 
uöt16_t
 
	gkey_¨øy
;

39 
uöt16_t
 
	gkey_off£t
;

42 
	uKeyE¡ry


44 
uöt64_t
 
	gkey_vÆue
;

45 
H™dP
 
	ghp
;

48 
	uKeyE¡ry_u


50 
KeyE¡ry
 
	gke
;

51 
uöt64_t
 
	gke_64
;

54 
	sKVP


73 vﬁ©ûê
uöt64_t
 
	gkey
;

74 vﬁ©ûê
uöt64_t
 
	gvÆue
;

78 
	sKVP


80 vﬁ©ûê
uöt64_t
 
	gkey
;

81 vﬁ©ûê
uöt64_t
 
	gvÆue
;

83 vﬁ©ûê
uöt64_t
 
	gvîsi⁄
;

85 vﬁ©ûê
uöt64_t
 
	g∑ddög
;

95 
	sCL


97 
KVP
 
	gkvp
[
KVP_PER_CL
];

100 
	sSEG


102 
CL
 
	g˛
[
CL_PER_SEG
];

104 
	g°d
::
©omic
<
uöt8_t
> 
lock
;

107 vﬁ©ûê
	gdïth
;

111 ˛as†
	cCCEH


113 
	gpublic
:

114 
CCEH
();

115 
CCEH
(
ö_dïth
);

116 ~
CCEH
();

118 
thªad_loˇl_öô
();

119 
thªad_loˇl_˛ón
();

121 
	g¥iv©e
:

125 
ölöe
 
uöt64_t
 
hf
(* c⁄° &
key
);

126 
ölöe
 
uöt64_t
 
hf
(uöt64_à
key
);

131 vﬁ©ûê
	gdïth
;

132 vﬁ©ûê
	g£g_˙t
;

134 
SEG
* vﬁ©ûê* vﬁ©ûê
	g£g_li°
;

148 
dú_doubÀ
();

149 
•lô
(
¢
);

151 
öô
(
ö_dïth
);

152 
˛ón
();

155 
	gpublic
:

160 
KVP
* 
ö£π
(
uöt64_t
 &
key
,
°d
::
©omic
<
uöt8_t
> **
u∆ock_p
,vﬁ©ûêuöt8_à&
ªad_lock
);

161 
KVP
* 
ö£π_wôh_Áû
(
uöt64_t
 &
key
,
°d
::
©omic
<
uöt8_t
> **
u∆ock_p
,vﬁ©ûêuöt8_à&
ªad_lock
);

163 
lock
(
KVP
* 
kvp
);

164 
u∆ock
(
KVP
* 
kvp
);

166 
boﬁ
 
ªad
(
uöt64_t
 &
key
,vﬁ©ûêuöt64_à**
ªt
,vﬁ©ûê**
£g_dïth
);

167 
boﬁ
 
ªad_wôh_Áû
(
uöt64_t
 &
key
,vﬁ©ûêuöt64_à**
ªt
,vﬁ©ûê**
£g_dïth
,boﬁ &
sf
);

168 
ªmove
(
uöt64_t
 &
key
);

171 
u∆ock_íåy2
(
°d
::
©omic
<
uöt8_t
> *
lock_p
,vﬁ©ûêuöt8_à&
ªad_lock
);

173 
	g¥iv©e
:

175 
uöt64_t
 
dm
;

176 
	gpoöt
;

178 
	gsc
,
	gpic
,
	gbc
,
	gföd_˙t
;

179 
uöt64_t
 
	g˘t1
,
	g˘t2
,
	g˘t3
,
	g˘t4
;

182 
	g°d
::
©omic
<
uöt8_t
> 
wrôe_lock
;

184 
KVP
 
	gzîo_íåy
;

185 
	g°d
::
©omic
<
uöt8_t
> 
zîo_lock
;

188 ˛as†
	cCCEH_vk
 : 
public
 
CCEH


190 
ölöe
 
boﬁ
 
com∑ª_key
(c⁄° vﬁ©ûê
uöt64_t
 &
key1
,* c⁄° &
key2
,c⁄° 
uöt32_t
 &
hash
);

191 
ölöe
 
ö£π_key
(vﬁ©ûê
uöt64_t
 &
key1
,* c⁄° &
key2
,c⁄° 
uöt32_t
 &
hash
);

192 
ölöe
 
uöt64_t
 
hf
(* c⁄° &
key
);

193 
ölöe
 * 
lﬂd_key
(c⁄° 
uöt64_t
 &
key
);

194 
ölöe
 * 
lﬂd_key2
(c⁄° 
KeyE¡ry
 &
key
);

195 
ölöe
 
boﬁ
 
zîo_check
(* c⁄° &
key
);

199 
öô_c˚h
();

200 
˛ón_c˚h
();

	@copy.h

3 
«me•a˚
 
	gPH


7 
	gNode
;

10 
ölöe
 
pf64x4
(*
ss
)

12 
__buûtö_¥e„tch
(
ss
,0,1);

13 
__buûtö_¥e„tch
(
ss
+1,0,1);

14 
__buûtö_¥e„tch
(
ss
+2,0,1);

15 
__buûtö_¥e„tch
(
ss
+3,0,1);

18 
ölöe
 
Rmm32x8
(* 
d
,*
s
)

21 
__m256i
 *
	gss
 = (__m256i*)
s
;

22 
__m256i
 *
	gdd
 = (__m256i*)
d
;

24 *(
	gdd
+7Ë
_mm256_°ªam_lﬂd_si256
(
ss
+7);

25 *(
	gdd
+6Ë
_mm256_°ªam_lﬂd_si256
(
ss
+6);

26 *(
	gdd
+5Ë
_mm256_°ªam_lﬂd_si256
(
ss
+5);

27 *(
	gdd
+4Ë
_mm256_°ªam_lﬂd_si256
(
ss
+4);

28 *(
	gdd
+3Ë
_mm256_°ªam_lﬂd_si256
(
ss
+3);

29 *(
	gdd
+2Ë
_mm256_°ªam_lﬂd_si256
(
ss
+2);

30 *(
	gdd
+1Ë
_mm256_°ªam_lﬂd_si256
(
ss
+1);

31 *(
	gdd
+0Ë
_mm256_°ªam_lﬂd_si256
(
ss
+0);

36 
ölöe
 
mm32x8
(* 
d
,*
s
)

39 
__m256i
 *
	gss
 = (__m256i*)
s
;

40 
__m256i
 *
	gdd
 = (__m256i*)
d
;

42 *
	gdd
 = 
_mm256_°ªam_lﬂd_si256
(
ss
);

43 *(
	gdd
+1Ë
_mm256_°ªam_lﬂd_si256
(
ss
+1);

44 *(
	gdd
+2Ë
_mm256_°ªam_lﬂd_si256
(
ss
+2);

45 *(
	gdd
+3Ë
_mm256_°ªam_lﬂd_si256
(
ss
+3);

46 *(
	gdd
+4Ë
_mm256_°ªam_lﬂd_si256
(
ss
+4);

47 *(
	gdd
+5Ë
_mm256_°ªam_lﬂd_si256
(
ss
+5);

48 *(
	gdd
+6Ë
_mm256_°ªam_lﬂd_si256
(
ss
+6);

49 *(
	gdd
+7Ë
_mm256_°ªam_lﬂd_si256
(
ss
+7);

53 
ölöe
 
mm64x4h1
(* 
d
,*
s
)

56 
__m512i
 *
	gss
 = (__m512i*)
s
;

57 
__m512i
 *
	gdd
 = (__m512i*)
d
;

59 *
	gdd
 = 
_mm512_°ªam_lﬂd_si512
(
ss
);

60 *(
	gdd
+2Ë
_mm512_°ªam_lﬂd_si512
(
ss
+2);

71 
ölöe
 
mm64x4h2
(* 
d
,*
s
)

74 
__m512i
 *
	gss
 = (__m512i*)
s
;

75 
__m512i
 *
	gdd
 = (__m512i*)
d
;

77 *(
	gdd
+1Ë
_mm512_°ªam_lﬂd_si512
(
ss
+1);

78 *(
	gdd
+3Ë
_mm512_°ªam_lﬂd_si512
(
ss
+3);

88 
ölöe
 
mm64x4
(* 
d
,*
s
)

91 
__m512i
 *
	gss
 = (__m512i*)
s
;

92 
__m512i
 *
	gdd
 = (__m512i*)
d
;

94 *
	gdd
 = 
_mm512_°ªam_lﬂd_si512
(
ss
);

95 *(
	gdd
+1Ë
_mm512_°ªam_lﬂd_si512
(
ss
+1);

96 *(
	gdd
+2Ë
_mm512_°ªam_lﬂd_si512
(
ss
+2);

97 *(
	gdd
+3Ë
_mm512_°ªam_lﬂd_si512
(
ss
+3);

109 
ölöe
 
˛64x4
(* 
d
,*
s
)

112 
	gbuf„r
[64];

114 
__m512i
 *
	gss
 = (__m512i*)
s
;

115 
__m512i
 *
	gdd
 = (__m512i*)
d
;

123 *
	gdd
 = 
_mm512_°ªam_lﬂd_si512
(
ss
);

124 *(
	gdd
+1Ë
_mm512_°ªam_lﬂd_si512
(
ss
+1);

125 *(
	gdd
+2Ë
_mm512_°ªam_lﬂd_si512
(
ss
+2);

126 *(
	gdd
+3Ë
_mm512_°ªam_lﬂd_si512
(
ss
+3);

131 
ölöe
 
pf256
(* 
a
,
size_t
 
s
)

136 
	gi
=0;

137 
	gi
 < 
	gs
)

140 
pf64x4
(
a
);

141 
	gi
+=256;

142 
	ga
+=256;

146 
ölöe
 
˝256h1
(* 
a
,* 
b
,
size_t
 
s
)

148 
	gi
=0;

149 
	gi
 < 
	gs
)

151 
mm64x4h1
(
a
,
b
);

152 
	gi
+=256;

153 
	ga
+=256;

154 
	gb
+=256;

158 
ölöe
 
˝256h2
(* 
a
,* 
b
,
size_t
 
s
)

160 
	gi
=0;

161 
	gi
 < 
	gs
)

163 
mm64x4h2
(
a
,
b
);

164 
	gi
+=256;

165 
	ga
+=256;

166 
	gb
+=256;

171 
ölöe
 
˝256
(* 
a
,* 
b
,
size_t
 
s
)

177 
	gi
=0;

178 
	gi
 < 
	gs
)

180 #i‚de‡
AVX


181 
mem˝y
(
a
,
b
,256);

185 
	gi
+=256;

186 
	ga
+=256;

187 
	gb
+=256;

192 
ölöe
 
¡256
(* 
a
,* 
b
,
size_t
 
s
)

195 
	gi
=0;

196 
	gi
 < 
	gs
)

198 
pmem_mem˝y
(
a
,
b
,256,
PMEM_F_MEM_NONTEMPORAL
);

199 
	gi
+=256;

200 
	ga
+=256;

201 
	gb
+=256;

205 
ölöe
 
˝256
(* 
a
,* 
b
)

210 
	gi
=0;

211 
	gi
 < (
	gNode
))

213 
mem˝y
(
a
,
b
,256);

214 
	gi
+=256;

215 
	ga
+=256;

216 
	gb
+=256;

221 
ölöe
 
¡256
(* 
a
,* 
b
)

224 
	gi
=0;

225 
	gi
 < (
	gNode
))

227 
pmem_mem˝y
(
a
,
b
,256,
PMEM_F_MEM_NONTEMPORAL
);

228 
	gi
+=256;

229 
	ga
+=256;

230 
	gb
+=256;

	@data.cpp

1 
	~<libpmem.h
>

3 
	~<©omic
>

5 
	~<°dio.h
>

6 
	~<°rög.h
>

7 
	~<°dlib.h
>

8 
	~<x86öåö.h
>

10 
	~<uni°d.h
>

12 
	~"d©a.h
"

13 
	~"hash.h
"

15 
	~"quîy.h
"

16 
	~"thªad.h
"

18 
	~"c›y.h
"

22 
	#¥öt
 0

	)

27 
	#DRAM_BUF


	)

29 
«me•a˚
 
	gPH


36 ** 
	gpmem_addr
;

37 
	gis_pmem
;

38 
size_t
 
	gpmem_Àn
;

41 
Node
** 
	gnode_d©a_¨øy
;

44 ** 
	gmëa_addr
;

47 
Node_mëa
** 
	gmëa_¨øy
;

48 vﬁ©ûê
	gfûe_num
;

53 vﬁ©ûê
	g∑π_fûe_num
[
PM_N
];

54 vﬁ©ûê
	g∑π_off£t_˙t
[
PM_N
];

56 
	g°d
::
©omic
 <
uöt8_t
> 
Æloc_lock
;

62 vﬁ©ûê
	g‰ì_˙t
[
PM_N
];

63 vﬁ©ûê
	g‰ì_mö
[
PM_N
];

64 vﬁ©ûê
	g‰ì_ödex
[
PM_N
];

65 
Node_off£t
 
	g‰ì_queue
[
PM_N
][
FREE_QUEUE_LEN
];

74 
	#LOCAL_QUEUE_LEN
 20

	)

75 
thªad_loˇl
 
Node_off£t
 
	gloˇl_b©ch_Æloc
[
PM_N
][
LOCAL_QUEUE_LEN
];

76 
thªad_loˇl
 
	glbac
[
PM_N
];

77 
thªad_loˇl
 
Node_off£t
 
	gloˇl_b©ch_‰ì
[
PM_N
][
LOCAL_QUEUE_LEN
];

78 
thªad_loˇl
 
	glbfc
[
PM_N
];

80 
thªad_loˇl
 
	g∑π_rŸ©i⁄
=0;

89 
thªad_loˇl
 
Node
 *
	gd0
,*
	gd1
,*
	gd2
;

91 
˛ón_thªad_loˇl
()

93 
¥ötf
("ctr\n");

94 
	gi
,
	gj
;

95 
©_lock
(
Æloc_lock
);

96 
	gi
=0;i<
	gPM_N
;i++)

98 
	gj
=
lbac
[
i
];j<
	gLOCAL_QUEUE_LEN
;j++)

100 i‡(
	g‰ì_˙t
[
i
]-
	g‰ì_ödex
[i] >
FREE_QUEUE_LEN
)

102 
¥ötf
("queue fullÅl\n");

105 
	g‰ì_queue
[
i
][
‰ì_˙t
[i]%
	gFREE_QUEUE_LEN
] = 
loˇl_b©ch_Æloc
[i][
j
];

106 ++
	g‰ì_˙t
[
i
];

108 
	gj
=0;j<
	glbfc
[
i
];j++)

110 i‡(
	g‰ì_˙t
[
i
]-
	g‰ì_ödex
[i] >
FREE_QUEUE_LEN
)

112 
¥ötf
("queue fullÅl2\n");

115 
	g‰ì_queue
[
i
][
‰ì_˙t
[i]%
	gFREE_QUEUE_LEN
] = 
loˇl_b©ch_‰ì
[i][
j
];

116 ++
	g‰ì_˙t
[
i
];

120 
©_u∆ock
(
Æloc_lock
);

122 
‰ì
(
d0
);

123 
‰ì
(
d1
);

124 
‰ì
(
d2
);

133 
boﬁ
 
	gã°_Æloc_check
[1000][
MAX_OFFSET
];

134 
ã°_Æloc
(
Node_off£t
 
off£t
)

137 i‡(
	gã°_Æloc_check
[
off£t
.
fûe
][offset.offset])

139 
	gt
;

140 
¥ötf
("errorálloc\n");

141 
sˇnf
("%d\n",&
t
);

144 
ã°_‰ì
(
Node_off£t
 
off£t
)

147 i‡(
	gã°_Æloc_check
[
off£t
.
fûe
][offset.offset] == 0)

149 
t
;

150 
¥ötf
("error free\n");

151 
sˇnf
("%d\n",&
t
);

156 
uöt64_t
 
	gâ1
,
	gâ2
,
	gâ3
,
	gâ4
,
	gâ5
;

157 
uöt64_t
 
	gqâ1
,
	gqâ2
,
	gqâ3
,
	gqâ4
,
	gqâ5
,
	gqâ6
,
	gqâ7
,
	gqâ8
;

165 
©_lock
(
°d
::
©omic
<
uöt8_t
> &
lock
)

167 
uöt8_t
 
z
;

168 
	gåue
)

170 
	gz
 = 0;

171 i‡(
	glock
.
com∑ª_exch™ge_°r⁄g
(
z
,1))

202 
ölöe
 
Êush_mëa
(
Node_off£t
 
off£t
)

216 
pmem_mem˝y
(
off£t_to_node_d©a
(
off£t
),(
Node_mëa
*)
off£t_to_node
(off£t),()+(),
PMEM_F_MEM_NONTEMPORAL
);

221 
ölöe
 
Êush_√xt_off£t
(
Node_off£t
 
off£t
,Node_off£à
√xt_off£t
)

223 
pmem_mem˝y
(
off£t_to_node_d©a
(
off£t
),&
√xt_off£t
,(),
PMEM_F_MEM_NONTEMPORAL
);

227 
ölöe
 
Êush_√xt_off£t_ig
(
Node_off£t
 
off£t
,Node_off£à
√xt_off£t_ig
)

229 
pmem_mem˝y
((*)
off£t_to_node_d©a
(
off£t
)+(),&
√xt_off£t_ig
,(),
PMEM_F_MEM_NONTEMPORAL
);

234 
√w_fûe
()

236 
	gfûe_«me
[100];

237 
	gbuf„r
[10];

238 
	gÀn
,
	gnum
,
	gi
;

239 
	gfûe_num
++;

240 
°r˝y
(
fûe_«me
,
pmem_fûe
);

241 
°rˇt
(
fûe_«me
,"data");

242 
	gÀn
 = 
°æí
(
fûe_«me
);

243 
	gnum
 = 
fûe_num
+1;

244 
	gi
 = 0;

245 
	gnum
 > 0)

247 
	gbuf„r
[
i
] = 
num
%10+'0';

248 
	gi
++;

249 
	gnum
/=10;

251 
	gi
=
i
-1;i>=0;i--)

252 
	gfûe_«me
[
Àn
++] = 
buf„r
[
i
];

253 
	gfûe_«me
[
Àn
] = 0;

255 i‡(
	gUSE_DRAM
)

256 
	gpmem_addr
[
fûe_num
]=(*)
mm≠
(
NULL
,
FILE_SIZE
,
PROT_READ
|
PROT_WRITE
,
MAP_PRIVATE
|
MAP_ANONYMOUS
 ,-1,0);

259 
	gpmem_addr
[
fûe_num
] = (*)
pmem_m≠_fûe
(
fûe_«me
,
FILE_SIZE
,
PMEM_FILE_CREATE
,0777,&
pmem_Àn
,&
is_pmem
);

260 
	gmëa_addr
[
fûe_num
] = (*)
mm≠
(
NULL
,
META_SIZE
,
PROT_READ
|
PROT_WRITE
,
MAP_PRIVATE
|
MAP_ANONYMOUS
|
MAP_POPULATE
,-1,0);

262 
	gnode_d©a_¨øy
[
fûe_num
] = (
Node
*)
pmem_addr
[file_num];

263 
	gmëa_¨øy
[
fûe_num
] = (
Node_mëa
*)
mëa_addr
[file_num];

269 
Node_off£t
 
Æloc_node0
(
∑π
)

271 #ifde‡
dâ


272 
time•ec
 
	gts1
,
	gts2
;

273 
˛ock_gëtime
(
CLOCK_MONOTONIC
,&
ts1
);

274 
_mm_m„n˚
();

276 
Node_mëa
* 
	gnode
;

277 
Node_off£t
 
	goff£t
;

279 
©_lock
(
Æloc_lock
);

281 i‡(
	g‰ì_ödex
[
∑π
] =
‰ì_mö
[part])

283 
ãmp
;

284 
	gãmp
 = 
mö_‰ì_˙t
(
∑π
);

285 i‡(
	gãmp
 > 
	g‰ì_ödex
[
∑π
])

286 
	g‰ì_mö
[
∑π
] = 
ãmp
;

290 i‡(
	g‰ì_ödex
[
∑π
] < 
	g‰ì_mö
[part])

292 
	goff£t
 = 
‰ì_queue
[
∑π
][
‰ì_ödex
[∑π]%
FREE_QUEUE_LEN
];

295 ++
	g‰ì_ödex
[
∑π
];

296 
©_u∆ock
(
Æloc_lock
);

297 i‡(
	g¥öt
)

298 
¥ötf
("Ælo¯nodêª %p\n",
node
);

299 #ifde‡
dâ


300 
˛ock_gëtime
(
CLOCK_MONOTONIC
,&
ts2
);

301 
_mm_m„n˚
();

302 
	gâ5
 +(
ts2
.
tv_£c
-
ts1
.tv_£c)*1000000000+ts2.
tv_n£c
-ts1.tv_nsec;

306 #ifde‡
Æloc_ã°


307 
ã°_Æloc
(
off£t
);

308 
	gã°_Æloc_check
[
off£t
.
fûe
][offset.offset] = 1;

310  
	goff£t
;

313 i‡(
	g∑π_off£t_˙t
[
∑π
] =
MAX_OFFSET
/
PM_N
)

315 i‡(
∑π_fûe_num
[
∑π
] =
fûe_num
)

316 
√w_fûe
();

317 
	g∑π_fûe_num
[
∑π
]++;

318 
	g∑π_off£t_˙t
[
∑π
] = 0;

336 
	goff£t
.
	gfûe
 = 
∑π_fûe_num
[
∑π
];

339 
	goff£t_˙t
 = 
∑π_off£t_˙t
[
∑π
];

340 #ifde‡
SMALL_NODE


341 
	goff£t
.off£à(
off£t_˙t
/(
PAGE_SIZE
/
PM_N
/(
Node
))*PAGE_SIZE + 
∑π
*(PAGE_SIZE/PM_N) + (offset_cnt%(PAGE_SIZE/PM_N/(Node)))*(Node)) / (Node);

343 
	goff£t
.off£à
off£t_˙t
 * 
PM_N
 + 
∑π
;

346 
	gnode
 = 
off£t_to_node
(
off£t
);

347 ++
	g∑π_off£t_˙t
[
∑π
];

348 
©_u∆ock
(
Æloc_lock
);

350 
	gnode
->
	göv_kv
 = (
uöt16_t
*)
mÆloc
((uint16_t)*4);

351 
	gnode
->
	göv_max
 = 4;

352 
	gnode
->
	göv_˙t
 = 0;

353 #ifde‡
DOUBLE_LOG


354 
	gnode
->
	gÊush_kv
 = (**)
mÆloc
((*)*4);

355 
	gnode
->
	gÊush_max
 = 4;

356 
	gnode
->
	gÊush_˙t
 = 0;

360 #ifde‡
Æloc_ã°


361 
ã°_Æloc
(
off£t
);

362 
	gã°_Æloc_check
[
off£t
.
fûe
][offset.offset] = 1;

365 #ifde‡
dâ


366 
˛ock_gëtime
(
CLOCK_MONOTONIC
,&
ts2
);

367 
_mm_m„n˚
();

368 
	gâ5
 +(
ts2
.
tv_£c
-
ts1
.tv_£c)*1000000000+ts2.
tv_n£c
-ts1.tv_nsec;

370  
	goff£t
;

373 
Node_off£t
 
Æloc_node
(
∑π
)

375 i‡(
	glbac
[
∑π
] < 
	gLOCAL_QUEUE_LEN
)

378 #ifde‡
Æloc_ã°


380 
Node_off£t
 
	goff£t
 = 
loˇl_b©ch_Æloc
[
∑π
][
lbac
[part]];

381 
ã°_Æloc
(
off£t
);

382 
	gã°_Æloc_check
[
off£t
.
fûe
][offset.offset] = 1;

385  
	gloˇl_b©ch_Æloc
[
∑π
][
lbac
[part]++];

387 
Node_mëa
* 
	gnode
;

388 
Node_off£t
 
	goff£t
;

391 
©_lock
(
Æloc_lock
);

392 
	gi
;

393 
	gi
=0;i<
	gLOCAL_QUEUE_LEN
;i++)

396 i‡(
	g‰ì_ödex
[
∑π
] =
‰ì_mö
[part])

398 
ãmp
;

399 
	gãmp
 = 
mö_‰ì_˙t
(
∑π
);

400 i‡(
	gãmp
 > 
	g‰ì_ödex
[
∑π
])

401 
	g‰ì_mö
[
∑π
] = 
ãmp
;

404 i‡(
	g‰ì_ödex
[
∑π
] < 
	g‰ì_mö
[part])

406 
	gloˇl_b©ch_Æloc
[
∑π
][
i
] = 
‰ì_queue
[∑π][
‰ì_ödex
[∑π]%
FREE_QUEUE_LEN
];

407 ++
	g‰ì_ödex
[
∑π
];

410 i‡(
	g∑π_off£t_˙t
[
∑π
] =
MAX_OFFSET
/
PM_N
)

412 i‡(
∑π_fûe_num
[
∑π
] =
fûe_num
)

413 
√w_fûe
();

414 
	g∑π_fûe_num
[
∑π
]++;

415 
	g∑π_off£t_˙t
[
∑π
] = 0;

418 
	goff£t
.
	gfûe
 = 
∑π_fûe_num
[
∑π
];

420 
	goff£t_˙t
 = 
∑π_off£t_˙t
[
∑π
];

421 #ifde‡
SMALL_NODE


422 
	goff£t
.off£à(
off£t_˙t
/(
PAGE_SIZE
/
PM_N
/(
Node
))*PAGE_SIZE + 
∑π
*(PAGE_SIZE/PM_N) + (offset_cnt%(PAGE_SIZE/PM_N/(Node)))*(Node)) / (Node);

424 
	goff£t
.off£à
off£t_˙t
 * 
PM_N
 + 
∑π
;

428 
	gnode
 = 
off£t_to_node
(
off£t
);

429 ++
	g∑π_off£t_˙t
[
∑π
];

431 
	gnode
->
	göv_kv
 = (
uöt16_t
*)
mÆloc
((uint16_t)*4);

432 
	gnode
->
	göv_max
 = 4;

433 
	gnode
->
	göv_˙t
 = 0;

435 #ifde‡
DOUBLE_LOG


436 
	gnode
->
	gÊush_kv
 = (**)
mÆloc
((*)*4);

437 
	gnode
->
	gÊush_max
 = 4;

438 
	gnode
->
	gÊush_˙t
 = 0;

442 
	gloˇl_b©ch_Æloc
[
∑π
][
i
] = 
off£t
;

444 
©_u∆ock
(
Æloc_lock
);

445 
	glbac
[
∑π
] = 0;

447 #ifde‡
Æloc_ã°


449 
	goff£t
 = 
loˇl_b©ch_Æloc
[
∑π
][
lbac
[part]];

450 
ã°_Æloc
(
off£t
);

451 
	gã°_Æloc_check
[
off£t
.
fûe
][offset.offset] = 1;

454  
	gloˇl_b©ch_Æloc
[
∑π
][
lbac
[part]++];

456 
‰ì_node
(
Node_off£t
 
off£t
)

458 #ifde‡
SMALL_NODE


459 
	g∑π
 = 
off£t
.off£t%(
PAGE_SIZE
/(
Node
))/(PAGE_SIZE/
PM_N
/(Node));

461 
	g∑π
 = 
off£t
.off£t%
PM_N
;

464 i‡(
	glbfc
[
∑π
] < 
	gLOCAL_QUEUE_LEN
)

466 #ifde‡
Æloc_ã°


467 
ã°_‰ì
(
off£t
);

468 
	gã°_Æloc_check
[
off£t
.
fûe
][offset.offset] = 0;

470 
	gloˇl_b©ch_‰ì
[
∑π
][
lbfc
[∑π]++] = 
off£t
;

475 
©_lock
(
Æloc_lock
);

477 
	gi
;

478 
	gi
=0;i<
	gLOCAL_QUEUE_LEN
;i++)

481 
	g‰ì_ödex
[
∑π
] + 
	gFREE_QUEUE_LEN
/2 < 
	g‰ì_˙t
[part])

485 
upd©e_idÀ
();

487 
	gt
;

491 i‡(
	g‰ì_ödex
[
∑π
] + 
	gFREE_QUEUE_LEN
 < 
	g‰ì_˙t
[part])

493 
¥ötf
("queuêfuŒ %d %d %d %d\n",
∑π
,
‰ì_ödex
[∑π],
‰ì_mö
[∑π],
‰ì_˙t
[part]);

494 
¥ötf
("queue full\n");

495 
¥öt_thªad_öfo
();

496 
sˇnf
("%d",&
t
);

504 
	g‰ì_queue
[
∑π
][
‰ì_˙t
[∑π]%
	gFREE_QUEUE_LEN
] = 
loˇl_b©ch_‰ì
[∑π][
i
];

505 ++
	g‰ì_˙t
[
∑π
];

507 
©_u∆ock
(
Æloc_lock
);

508 #ifde‡
Æloc_ã°


509 
ã°_‰ì
(
off£t
);

510 
	gã°_Æloc_check
[
off£t
.
fûe
][offset.offset] = 0;

512 
	glbfc
[
∑π
]=0;

513 
	gloˇl_b©ch_‰ì
[
∑π
][
lbfc
[∑π]++] = 
off£t
;

516 
‰ì_node0
(
Node_off£t
 
off£t
)

518 #ifde‡
SMALL_NODE


519 
	g∑π
 = 
off£t
.off£t%(
PAGE_SIZE
/(
Node
)/(PAGE_SIZE/
PM_N
/(Node)));

521 
	g∑π
 = 
off£t
.off£à% 
PM_N
;

526 i‡(
	g‰ì_ödex
[
∑π
] + 
	gFREE_QUEUE_LEN
/2 < 
	g‰ì_˙t
[part])

528 
upd©e_idÀ
();

531 i‡(
	g‰ì_ödex
[
∑π
] + 
	gFREE_QUEUE_LEN
 < 
	g‰ì_˙t
[part])

534 
¥ötf
("queue full\n");

536 
	gt
;

537 
sˇnf
("%d",&
t
);

541 
©_lock
(
Æloc_lock
);

543 #ifde‡
Æloc_ã°


545 
ã°_‰ì
(
off£t
);

546 
	gã°_Æloc_check
[
off£t
.
fûe
][offset.offset] = 0;

549 
	g‰ì_queue
[
∑π
][
‰ì_˙t
[∑π]%
	gFREE_QUEUE_LEN
] = 
off£t
;

551 ++
	g‰ì_˙t
[
∑π
];

552 
©_u∆ock
(
Æloc_lock
);

560 
öô_fûe
()

563 i‡(
	gUSE_DRAM
)

564 
	gpmem_addr
=(*)
mm≠
(
NULL
,
pmem_size
,
PROT_READ
|
PROT_WRITE
,
MAP_PRIVATE
|
MAP_ANONYMOUS
 ,-1,0);

567 
	gpmem_addr
 = (*)
pmem_m≠_fûe
(
pmem_fûe
,
pmem_size
,
PMEM_FILE_CREATE
,0777,&
pmem_Àn
,&
is_pmem
);

569 
	gfûe_num
 = -1;

570 
	gpmem_addr
 = (**)
mÆloc
((*)*
MAX_FILE_NUM
);

571 
	gmëa_addr
 = (**)
mÆloc
((*)*
MAX_FILE_NUM
);

572 
	gnode_d©a_¨øy
 = (
Node
**)
mÆloc
((*)*
MAX_FILE_NUM
);

573 
	gmëa_¨øy
 = (
Node_mëa
**)
mÆloc
((*)*
MAX_FILE_NUM
);

593 
check_ªcovî
()

596 #i‚de‡
åy_ªcovî


597 
¥ötf
("don'tÅryÑecover\n");

601 
¥ötf
("tryÑecover\n");

605 
	gfûe_«me
[100];

606 
	gbuf„r
[10];

607 
	gÀn
,
	gnum
,
	gi
;

610 
	gfûe_num
++;

611 
°r˝y
(
fûe_«me
,
pmem_fûe
);

612 
°rˇt
(
fûe_«me
,"data");

613 
	gÀn
 = 
°æí
(
fûe_«me
);

614 
	gnum
 = 
fûe_num
+1;

615 
	gi
 = 0;

616 
	gnum
 > 0)

618 
	gbuf„r
[
i
] = 
num
%10+'0';

619 
	gi
++;

620 
	gnum
/=10;

622 
	gi
=
i
-1;i>=0;i--)

623 
	gfûe_«me
[
Àn
++] = 
buf„r
[
i
];

624 
	gfûe_«me
[
Àn
] = 0;

626 i‡(
ac˚ss
(
fûe_«me
,
F_OK
) == -1)

628 
fûe_num
--;

629  
	gfûe_num
;

633 i‡(
	gUSE_DRAM
)

635 
¥ötf
("???");

640 
	gpmem_addr
[
fûe_num
] = (*)
pmem_m≠_fûe
(
fûe_«me
,
FILE_SIZE
,
PMEM_FILE_CREATE
,0777,&
pmem_Àn
,&
is_pmem
);

641 
	gmëa_addr
[
fûe_num
] = (*)
mm≠
(
NULL
,
META_SIZE
,
PROT_READ
|
PROT_WRITE
,
MAP_PRIVATE
|
MAP_ANONYMOUS
|
MAP_POPULATE
,-1,0);

643 
	gnode_d©a_¨øy
[
fûe_num
] = (
Node
*)
pmem_addr
[file_num];

644 
	gmëa_¨øy
[
fûe_num
] = (
Node_mëa
*)
mëa_addr
[file_num];

653 
uöt64_t
 
	g¥e_LSB
[65];

655 
	#DUP_HASH_MAX
 1024

	)

656 
Node_off£t
 
	gdup_hash
[
DUP_HASH_MAX
];

658 
ªcovî_node
(
Node_off£t
 
node_off£t
)

660 
uöt64_t
 
	g¥efix64
=0;

661 
	g¥efix_Àn
=0;

662 
Node
 
	gnode_d©a_ãmp
[
PART_MAX
];

664 
Node
* 
	gnode_d©a
;

665 
Node_mëa
* 
	gnode_mëa
;

666 
Node_mëa
* 
	gmëa0
;

668 
	g√w_Àn
;

670 
	gnode_mëa
 = 
off£t_to_node
(
node_off£t
);

671 
	gnode_d©a
 = 
off£t_to_node_d©a
(
node_off£t
);

673 
	gmëa0
 = 
node_mëa
;

675 
	g√w_Àn
 = 
node_d©a
->
c⁄töue_Àn
;

677 i‡(
	g¥efix_Àn
 > 0)

678 
	g¥efix64
+=
¥e_LSB
[
¥efix_Àn
-1];

680 
	gi
;

681 
	gi
=
¥efix_Àn
;i<
	g√w_Àn
;i++)

684 
ö£π_ønge_íåy
((*)&
¥efix64
,
i
,
SPLIT_OFFSET
);

685 
	g¥efix64
 &~
¥e_LSB
[
i
];

688 
ö£π_ønge_íåy
((*)&
¥efix64
,
√w_Àn
,
node_off£t
);

689 
	g¥efix_Àn
 = 
√w_Àn
;

691 
	g∑π
=0;

692 
	gtc
 = 0;

693 
uöt64_t
 
	gãmp_key
[
PART_MAX
*100];

694 
VÆueE¡ry
 
	gvó
[
PART_MAX
*100];

695 
Node_off£t
 
	gãmp_off£t
[
PART_MAX
];

697 * 
	gbuf„r
;

699 
	gnode_mëa
->
	g∑π
 = 0;

700 
	gnode_mëa
->
	g°©e
 = 0;

701 
	gnode_mëa
->
	ggroup_size
 = 0;

702 
	gnode_mëa
->
	gövÆid©ed_size
 = 0;

703 
	gnode_mëa
->
	g°¨t_off£t
 = 
node_off£t
;

704 
	gnode_mëa
->
	gc⁄töue_Àn
 = 
¥efix_Àn
;

710 
	gãmp_off£t
[
∑π
] = 
node_off£t
;

712 
	gnode_mëa
 = 
off£t_to_node
(
node_off£t
);

713 
	gnode_d©a
 = 
off£t_to_node_d©a
(
node_off£t
);

715 
˝256
((*)&
node_d©a_ãmp
[
∑π
],(*)
node_d©a
,(
Node
));

719 
	gnode_mëa
->
	göv_kv
 = (
uöt16_t
*)
mÆloc
((uint16_t)*4);

720 
	gnode_mëa
->
	göv_max
 = 4;

721 
	gnode_mëa
->
	göv_˙t
 = 0;

724 
	gnode_mëa
->
	gsize
 = 0;

725 
	gnode_mëa
->
	g∑π
 = 
∑π
;

727 
	gnode_mëa
->
	g°¨t_off£t
 = 
ãmp_off£t
[0];

728 
	gnode_mëa
->
	g√xt_off£t_ig
 = 
INIT_OFFSET
;

730 
	gbuf„r
 = 
node_d©a_ãmp
[
∑π
].
buf„r
;

733 
uöt16_t
 
	gvl16
;

734 
	gvl16
 = *((
uöt16_t
*)
buf„r
);

735 i‡(
	gvl16
 == 0)

737 i‡(
	gvl16
 & 
	gINV_BIT
)

738 
	gvl16
-=
INV_BIT
;

741 
	gãmp_key
[
tc
] = *((
uöt64_t
*)(
buf„r
+
PH_LEN_SIZE
));

742 i‡(
	gdup_hash
[
ãmp_key
[
tc
]%
	gDUP_HASH_MAX
] =
ãmp_off£t
[0])

744 
i
=
tc
-1;
	gi
>=0;i--)

746 i‡(
	gãmp_key
[
i
] =
ãmp_key
[
tc
])

749 i‡(
	gi
 >= 0)

751 
övÆid©e_kv
(
vó
[
i
]);

752 
	gvó
[
i
].
	gkv_off£t
 = 0;

755 
	gdup_hash
[
ãmp_key
[
tc
]%
	gDUP_HASH_MAX
] = 
ãmp_off£t
[0];

756 
	gvó
[
tc
].
	gnode_off£t
 = 
ãmp_off£t
[
∑π
];

757 
	gvó
[
tc
].
	gkv_off£t
 = 
buf„r
-(*)&
node_d©a_ãmp
[
∑π
];

758 
	gvó
[
tc
].
	gÀn
 = 
vl16
;

759 
	gtc
++;

761 
	gbuf„r
+=
LK_SIZE
+
vl16
;

764 
	gnode_mëa
->
	gsize
 = 
buf„r
-
node_d©a_ãmp
[
∑π
].buffer;

765 
	gmëa0
->
	ggroup_size
+=
node_mëa
->
size
;

771 
	gnode_mëa
->
	g√xt_off£t_ig
 = 
node_d©a_ãmp
[
∑π
].
√xt_off£t_ig
;

772 
	gnode_off£t
 = 
node_d©a_ãmp
[
∑π
].
√xt_off£t_ig
;

773 i‡(
	gnode_off£t
 =
INIT_OFFSET
)

776 
	g∑π
++;

780 
	gi
=0;i<
	gtc
;i++)

782 i‡(
	gvó
[
i
].
	gkv_off£t
 > 0)

783 
ö£π_poöt_íåy
((*)&
ãmp_key
[
i
],
vó
[i]);

787 
	gi
=0;i<
	g∑π
;i++)

788 
off£t_to_node
(
ãmp_off£t
[
i
])->
	gíd_off£t
 =Åemp_off£t[
∑π
];

790 
Node_off£t_u
 
	gnu
;

791 
	gnu
.
	gno
 = 
node_d©a_ãmp
[0].
√xt_off£t
;

792 
	gmëa0
->
	g√xt_off£t
 = 
nu
.
no_32
;

797 
ªcovî
()

801 
	gi
,
	gj
;

802 
	g¥e_LSB
[63] = 1;

803 
	gi
=62;i>=0;i--)

804 
	g¥e_LSB
[
i
] = 
¥e_LSB
[i+1] << 1;

806 
	gi
=0;i<=
fûe_num
;i++)

808 
	gj
=0;j<
	gMAX_OFFSET
;j++)

809 
	gmëa_¨øy
[
i
][
j
].
	g∑π
 = 
PART_MAX
+1;

812 
Node_off£t_u
 
	gnode_off£t
;

813 
Node_off£t_u
 
	g¥ev_off£t
;

814 
Node
* 
	gnode_d©a
;

815 
Node_mëa
* 
	gnode_mëa
;

817 
	gnode_off£t
.
	gno
 = 
HEAD_OFFSET
;

818 
	gnode_mëa
 = 
off£t_to_node
(
node_off£t
.
no
);

819 
	gnode_d©a
 = 
off£t_to_node_d©a
(
node_off£t
.
no
);

822 
	gnode_mëa
->
	g°©e
 = 0;

823 
	gnode_mëa
->
	g∑π
 = 0;

824 
	gnode_mëa
->
	gsˇn_li°
 = 
NULL
;

825 
	gnode_mëa
->
	g¥ev_off£t
 = 0;

827 
	gnode_mëa
->
	g√xt_off£t_ig
 = 
INIT_OFFSET
;

829 
	g¥ev_off£t
 = 
node_off£t
;

830 
	gnode_off£t
.
	gno
 = 
node_d©a
->
√xt_off£t
;

831 
	gnode_mëa
->
	g√xt_off£t
 = 
node_off£t
.
no_32
;

839 
	gnode_mëa
 = 
off£t_to_node
(
node_off£t
.
no
);

840 
	gnode_mëa
->
	g¥ev_off£t
 = 
¥ev_off£t
.
no_32
;

842 i‡(
	gnode_off£t
.
	gno
 =
TAIL_OFFSET
)

847 
ªcovî_node
(
node_off£t
.
no
);

849 
	g¥ev_off£t
 = 
node_off£t
;

850 
	gnode_off£t
.
	gno_32
 = 
node_mëa
->
√xt_off£t
;

856 
	gnode_mëa
 = 
off£t_to_node
(
node_off£t
.
no
);

857 
	gnode_mëa
->
	g°©e
 = 0;

858 
	gnode_mëa
->
	g∑π
 = 0;

859 
	gnode_mëa
->
	gsˇn_li°
 = 
NULL
;

860 
	gnode_mëa
->
	g√xt_off£t
 = 0;

861 
	gnode_mëa
->
	g√xt_off£t_ig
 = 
INIT_OFFSET
;

864 
Node_off£t
 
	gno
;

865 
	g∑π
;

866 
	gi
=0;i<=
fûe_num
;i++)

868 
	gj
=0;j<
	gMAX_OFFSET
;j++)

870 i‡(
	gmëa_¨øy
[
i
][
j
].
	g∑π
 =
PART_MAX
+1)

872 
no
.
fûe
 = 
i
;

873 
	gno
.
	goff£t
 = 
j
;

875 
	g∑π
 = 
no
.
off£t
 % 
PM_N
;

877 i‡(
	g‰ì_ödex
[
∑π
] + 
	gFREE_QUEUE_LEN
 < 
	g‰ì_˙t
[part])

879 
¥ötf
("full!!\n");

880 
sˇnf
("%d",&
∑π
);

884 
	g‰ì_queue
[
∑π
][
‰ì_˙t
[∑π]%
	gFREE_QUEUE_LEN
] = 
no
;

885 ++
	g‰ì_˙t
[
∑π
];

894 
öô_d©a
()

896 i‡(
check_ªcovî
() >= 0)

899 
time•ec
 
°
,
ë
;

900 
uöt64_t
 
	gâ
;

902 
¥ötf
("startÑecover\n");

903 
˛ock_gëtime
(
CLOCK_MONOTONIC
,&
°
);

904 
ªcovî
();

905 
˛ock_gëtime
(
CLOCK_MONOTONIC
,&
ë
);

907 
	gâ
 = (
ë
.
tv_£c
-
°
.tv_£c)*1000000000+ë.
tv_n£c
-st.tv_nsec;

909 
¥ötf
("ídÑecovî %ld†%ldns\n",
â
/1000000000,tt%1000000000);

916 
¥ötf
("noÑecovery.Çew DB\n");

917 
	gfûe_num
 = -1;

919 
√w_fûe
();

921 
	gi
;

922 
	gi
=0;i<
	gPM_N
;i++)

923 
	g‰ì_˙t
[
i
] = 
‰ì_mö
[i] = 
‰ì_ödex
[i] = 0;

925 
uöt64_t
 
	gzîo
=0;

927 
Node_off£t_u
 
	ghód_off£t
;

928 
Node_off£t_u
 
	gèû_off£t
;

930 
Node_mëa
* 
	ghód_node
;

931 
Node_mëa
* 
	gèû_node
;

937 #i‡
PM_N
 > 1

938 
Æloc_node0
(0);

939 
Æloc_node0
(1);

940 
	ghód_off£t
.
	gno
 = 
Æloc_node0
(2);

941 
	gèû_off£t
.
	gno
 = 
Æloc_node0
(3);

943 
Æloc_node0
(0);

944 
Æloc_node0
(0);

945 
	ghód_off£t
.
	gno
 = 
Æloc_node0
(0);

946 
	gèû_off£t
.
	gno
 = 
Æloc_node0
(0);

950 
	ghód_node
 = 
off£t_to_node
(
hód_off£t
.
no
);

951 
	gèû_node
 = 
off£t_to_node
(
èû_off£t
.
no
);

954 
Node_off£t_u
 
	gnode_off£t
;

955 
	gnode_off£t
.
	gno
 = 
Æloc_node0
(0);

956 
Node_mëa
* 
	gnode
 = 
off£t_to_node
(
node_off£t
.
no
);

957 
	gnode
->
	g°©e
 = 0;

958 
	gnode
->
	gsize
 = 0;

959 
	gnode
->
	gövÆid©ed_size
 = 0;

960 
	gnode
->
	göv_˙t
 = 0;

961 #ifde‡
DOUBLE_LOG


962 
	gnode
->
	gÊush_size
 = 0;

963 
	gnode
->
	gÊush_˙t
 = 0;

965 
	gnode
->
	gc⁄töue_Àn
 = 0;

966 
	gnode
->
	gsˇn_li°
 = 
NULL
;

967 
	gnode
->
	g¥ev_off£t
 = 
hód_off£t
.
no_32
;

968 
	gnode
->
	g√xt_off£t
 = 
èû_off£t
.
no_32
;

969 
	gnode
->
	gíd_off£t
 = 
node_off£t
.
no
;

970 
	gnode
->
	g°¨t_off£t
 = 
node_off£t
.
no
;

971 
	gnode
->
	g∑π
 = 0;

972 
	gnode
->
	ggroup_size
 = 0;

973 
	gnode
->
	g√xt_off£t_ig
 = 
INIT_OFFSET
;

975 i‡(
	g¥öt
)

976 
¥ötf
("nodê0 %p\n",
node
);

979 
	ghód_node
->
	g√xt_off£t
 = 
node_off£t
.
no_32
;

980 
	ghód_node
->
	g¥ev_off£t
 = 0;

981 
	gèû_node
->
	g¥ev_off£t
 = 
node_off£t
.
no_32
;

982 
	gèû_node
->
	g√xt_off£t
 = 0;

983 
	ghód_node
->
	g°©e
 = 0;

984 
	ghód_node
->
	gsˇn_li°
 = 
NULL
;

985 
	ghód_node
->
	g∑π
 = 0;

986 
	gèû_node
->
	g°©e
 = 0;

987 
	gèû_node
->
	gsˇn_li°
 = 
NULL
;

988 
	gèû_node
->
	g∑π
 = 0;

989 
	ghód_node
->
	g√xt_off£t_ig
 = 
INIT_OFFSET
;

990 
	gèû_node
->
	g√xt_off£t_ig
 = 
INIT_OFFSET
;

993 
Êush_mëa
(
hód_off£t
.
no
);

994 
Êush_mëa
(
èû_off£t
.
no
);

996 
_mm_s„n˚
();

1001 
ö£π_ønge_íåy
((*)(&
zîo
),0,
node_off£t
.
no
);

1007 i‡(
	gUSE_DRAM
)

1008 
¥ötf
("USE_DRAM\n");

1010 
¥ötf
("USE_PM\n");

1011 
¥ötf
("sizêo‡nodê%ld\n",(
Node
));

1012 
¥ötf
("sizêo‡node_më®%ld\n",(
Node_mëa
));

1014 
	gâ1
 = 0;

1015 
	gâ2
 = 0;

1016 
	gâ3
 = 0;

1017 
	gâ4
 = 
â5
 = 0;

1019 
	gqâ1
 = 
qâ2
 = 
qâ3
 = 
qâ4
 = 
qâ5
 = 
qâ6
 = 
qâ7
 = 
qâ8
 = 0;

1022 
öô_d©a_loˇl
()

1024 
	gi
;

1025 
	gi
=0;i<
	gPM_N
;i++)

1027 
	glbac
[
i
] = 
LOCAL_QUEUE_LEN
;

1028 
	glbfc
[
i
] = 0;

1031 
posix_memÆign
((**)&
d0
,(
Node
),(Node)*
PART_MAX
);

1032 
posix_memÆign
((**)&
d1
,(
Node
),(Node)*
PART_MAX
);

1033 
posix_memÆign
((**)&
d2
,(
Node
),(Node)*
PART_MAX
);

1036 
˛ón_node
(
Node_off£t
 
off£t
)

1038 
Node_mëa
* 
	gnode
 = 
off£t_to_node
(
off£t
);

1039 
‰ì
(
node
->
öv_kv
);

1040 #ifde‡
DOUBLE_LOG


1041 
‰ì
(
node
->
Êush_kv
);

1044 
˛ón_öv
()

1073 
˛ón_d©a
()

1075 
¥ötf
("clean data\n");

1082 
˛ón_öv
();

1085 
	gi
;

1086 i‡(
	gUSE_DRAM
)

1088 
	gi
=0;i<
	gfûe_num
;i++)

1089 
munm≠
(
pmem_addr
[
i
],
FILE_SIZE
);

1093 
	gi
=0;i<
	gfûe_num
;i++)

1094 
pmem_unm≠
(
pmem_addr
[
i
],
FILE_SIZE
);

1096 
	gi
=9;i<
	gfûe_num
;i++)

1097 
munm≠
(
mëa_addr
[
i
],
META_SIZE
);

1099 
‰ì
(
pmem_addr
);

1100 
‰ì
(
mëa_addr
);

1101 
‰ì
(
node_d©a_¨øy
);

1102 
‰ì
(
mëa_¨øy
);

1107 #ifde‡
dâ


1108 
¥ötf
("data\n");

1109 
¥ötf
("ö£π %ld %ld\n",
â1
/1000000000,tt1%1000000000);

1110 
¥ötf
("•lô %ld %ld\n",
â2
/1000000000,tt2%1000000000);

1111 
¥ötf
("com∑˘ %ld %ld\n",
â3
/1000000000,tt3%1000000000);

1112 
¥ötf
("check_sizê%ld %ld\n",
â4
/1000000000,tt4%1000000000);

1113 
¥ötf
("Ælo¯nodê%ld %ld\n",
â5
/1000000000,tt5%1000000000);

1117 
¥ötf
("më®%lfGB\n",(
fûe_num
*
MAX_OFFSET
*(
Node_mëa
))/1024/1024/1024);

1118 
¥ötf
("tŸÆ %lfGB fûê˙à%d fûêsizê%ld\n",(
fûe_num
*
FILE_SIZE
)/1024/1024/1024,file_num,FILE_SIZE);

1122 #ifde‡
qâ


1124 
¥ötf
("query\n");

1125 
¥ötf
("ö£π quîy %ld %ld\n",
qâ1
/1000000000,qtt1%1000000000);

1126 
¥ötf
("ö£π index %ld %ld\n",
qâ2
/1000000000,qtt2%1000000000);

1127 
¥ötf
("ö£π d©®%ld %ld\n",
qâ3
/1000000000,qtt3%1000000000);

1128 
¥ötf
("ö£π kv %ld %ld\n",
qâ4
/1000000000,qtt4%1000000000);

1129 
¥ötf
("•lô kv %ld %ld\n",
qâ5
/1000000000,qtt5%1000000000);

1130 
¥ötf
("\n");

1131 
¥ötf
("looku∞quîy %ld %ld\n",
qâ8
/1000000000,qtt8%1000000000);

1132 
¥ötf
("looku∞ödex %ld %ld\n",
qâ6
/1000000000,qtt6%1000000000);

1133 
¥ötf
("looku∞d©®%ld %ld\n",
qâ7
/1000000000,qtt7%1000000000);

1140 
ölöe
 
öc_ªf
(
Node_off£t
 
off£t
)

1142  
åy_©_lock
(
off£t_to_node
(
off£t
)->
°©e
);

1144 
ölöe
 
dec_ªf
(
Node_off£t
 
off£t
)

1147 
©_u∆ock
(
off£t_to_node
(
off£t
)->
°©e
);

1152 
¥öt_kv
(* 
kv_p
)

1154 
	gi
,
	gvÆue_Àn
;

1155 * 
	gv_p
;

1156 
¥ötf
("key ");

1157 
	gi
=0;i<8;i++)

1158 
¥ötf
("[%d]",()(
kv_p
[
i
]));

1159 
	gvÆue_Àn
 = *((
uöt16_t
*)(
kv_p
+
key_size
));

1160 i‡(
	gvÆue_Àn
 & (1 << 15))

1162 
¥ötf
(" invalidated\n");

1165 
¥ötf
(" vÆuêÀ¿%d ",
vÆue_Àn
);

1166 
	gv_p
 = 
kv_p
 + 
key_size
 + 
Àn_size
;

1167 
	gi
=0;i<
	gvÆue_Àn
;i++)

1168 
¥ötf
("[%d]",()(
v_p
[
i
]));

1169 
¥ötf
("\n");

1173 
¥öt_node
(
Node
* 
node
)

1175 
	gcur
=0,
	gvÆue_Àn
;

1176 
¥ötf
("nodêsizê%d\n",
node
->
size
);

1177 
	gcur
 < 
	gnode
->
	gsize
)

1179 
¥öt_kv
(&
node
->
buf„r
[
cur
]);

1180 
	gvÆue_Àn
 = *((
uöt16_t
*)(
node
->
buf„r
+
cur
+
key_size
));

1181 i‡((
	gvÆue_Àn
 & (1 <<15)) != 0)

1182 
vÆue_Àn
-= (1<<15);

1183 
	gcur
+=
vÆue_Àn
+
key_size
+
Àn_size
;

1196 
dñëe_kv
(* 
kv_p
)

1198 i‡(
	gUSE_DRAM
)

1199 *((
	guöt16_t
*)(
	gkv_p
 ))|
INV_BIT
;

1202 
uöt16_t
 
	gvl16
;

1203 
	gvl16
 = *((
uöt16_t
*)(
kv_p
 )Ë| 
INV_BIT
;

1204 
pmem_mem˝y
(
kv_p
 ,&
vl16
,(
uöt16_t
),
PMEM_F_MEM_NONTEMPORAL
);

1205 
_mm_s„n˚
();

1211 
Node_off£t
 
≠≥nd_node
(Node_off£t& 
°¨t_off£t
)

1214 
Node_mëa
* 
	g°¨t_mëa
 = 
off£t_to_node
(
°¨t_off£t
);

1215 
Node_mëa
* 
	gmëa
 = 
off£t_to_node
(
°¨t_mëa
->
íd_off£t
);

1216 
Node_off£t
 
	gíd_off£t
;

1217 
Node_mëa
* 
	gíd_mëa
;

1218 
Node
* 
	gíd_d©a
;

1224 
	gíd_off£t
 = 
Æloc_node
();

1225 
	gíd_mëa
 = 
off£t_to_node
(
íd_off£t
);

1226 
	gíd_d©a
 = 
off£t_to_node_d©a
(
íd_off£t
);

1230 
	gíd_mëa
->
	g√xt_off£t_ig
 = 
INIT_OFFSET
;

1232 
	gíd_mëa
->
	g∑π
 = 
mëa
->
∑π
+1;

1233 
	gíd_mëa
->
	gsize
 = 0;

1234 
	gíd_mëa
->
	göv_˙t
 = 0;

1235 #ifde‡
DOUBLE_LOG


1236 
	gíd_mëa
->
	gÊush_size
 = 0;

1237 
	gíd_mëa
->
	gÊush_˙t
 = 0;

1239 
	gíd_mëa
->
	g°¨t_off£t
 = 
°¨t_off£t
;

1242 
	gíd_mëa
->
	gíd_off£t
 = 
íd_off£t
;

1250 
	gíd_d©a
->
	g√xt_off£t
 = 
íd_d©a
->
√xt_off£t_ig
 = 
INIT_OFFSET
;

1252 
	gíd_d©a
->
	gbuf„r
[0] = 
íd_d©a
->
buf„r
[1] = 0;

1253 
pmem_≥rsi°
((*)
íd_d©a
,(
uöt16_t
)+(uöt16_t)+(
uöt32_t
)+
Àn_size
);

1254 
_mm_s„n˚
();

1256 
	gmëa
->
	g√xt_off£t_ig
 = 
íd_off£t
;

1257 
pmem_mem˝y
((*)
off£t_to_node_d©a
(
°¨t_mëa
->
íd_off£t
Ë+ (),(
uöt32_t
*)&íd_off£t,(),
PMEM_F_MEM_NONTEMPORAL
);

1258 
	g°¨t_mëa
->
	gíd_off£t
 = 
íd_off£t
;

1259 
_mm_s„n˚
();

1261  
	gíd_off£t
;

1265 * 
ö£π_kv
(
Node_off£t
& 
off£t
,* 
key
,* 
vÆue
,
vÆue_Àn
 )

1267 #ifde‡
dâ


1268 
time•ec
 
	gts1
,
	gts2
;

1269 
˛ock_gëtime
(
CLOCK_MONOTONIC
,&
ts1
);

1270 
_mm_m„n˚
();

1278 
Node_mëa
* 
	gmëa
 = 
off£t_to_node
(
off£t
);

1279 
Node_off£t
 
	gíd_off£t
 = 
mëa
->
íd_off£t
;

1280 
Node_mëa
* 
	gíd_mëa
 = 
off£t_to_node
(
íd_off£t
);

1282 
Node_off£t
 
	gmid_off£t
;

1283 
Node_mëa
* 
	gmid_mëa
 = 
NULL
;

1285 
	gíåy_size
 = 
LK_SIZE
 + 
vÆue_Àn
;

1287 i‡(
	gíåy_size
 % 2)

1288 ++
	gíåy_size
;

1290 i‡(
	gíd_mëa
->
	gsize
 + 
	gíåy_size
 +
	gPH_LEN_SIZE
 > 
	gNODE_BUFFER
)

1292 i‡(
	gíd_mëa
->
	g∑π
 =
PART_MAX
-1)

1293  
NULL
;

1295 i‡(
•lô_‹_com∑˘
(
off£t
) == 0)

1296  
NULL
;

1299 
	gmid_off£t
 = 
íd_off£t
;

1300 
	gmid_mëa
 = 
íd_mëa
;

1301 #ifde‡
SMALL_NODE


1302 
	g∑π
 = 
íd_off£t
.
off£t
%(
PAGE_SIZE
/(
Node
))/(PAGE_SIZE/
PM_N
/(Node));

1304 
	g∑π
 = 
íd_off£t
.
off£t
 % 
PM_N
;

1307 
	gíd_off£t
 = 
mëa
->
íd_off£t
 = 
Æloc_node
((
∑π
+1)%
PM_N
);

1308 
	gíd_mëa
 = 
off£t_to_node
(
íd_off£t
);

1311 
	gíd_mëa
->
	g∑π
 = 
mid_mëa
->
∑π
+1;

1312 
	gíd_mëa
->
	gsize
 = 0;

1313 
	gíd_mëa
->
	göv_˙t
 = 0;

1314 #ifde‡
DOUBLE_LOG


1315 
	gíd_mëa
->
	gÊush_size
 = 0;

1316 
	gíd_mëa
->
	gÊush_˙t
 = 0;

1318 
	gíd_mëa
->
	g°¨t_off£t
 = 
off£t
;

1319 
	gíd_mëa
->
	g√xt_off£t_ig
 = 
INIT_OFFSET
;

1323 
	gmëa
->
	gíd_off£t
 = 
íd_off£t
;

1330 c⁄° 
uöt16_t
 
	gvl16
 = 
vÆue_Àn
;

1335 * 
	gbuf„r
 = 
off£t_to_node_d©a
(
íd_off£t
)->
buf„r
;

1336 
	gﬁd_size
 = 
íd_mëa
->
size
;

1338 
	gíd_mëa
->
	gsize
+=
íåy_size
;

1339 
	gmëa
->
	ggroup_size
+=
íåy_size
;

1341 c⁄° 
uöt16_t
 
	gz
 = 0;

1342 i‡(!
	gUSE_DRAM
)

1344 i‡(
	gmid_mëa
)

1346 
Node
* 
	gnode_d©a
 = 
off£t_to_node_d©a
(
íd_off£t
);

1351 
	gnode_d©a
->
	g√xt_off£t
 = 
node_d©a
->
√xt_off£t_ig
 = 
INIT_OFFSET
;

1354 
mem˝y
(
buf„r
+
ﬁd_size
,&
vl16
,
PH_LEN_SIZE
 );

1355 
mem˝y
(
buf„r
+
ﬁd_size
+
PH_LEN_SIZE
 ,
key
,
PH_KEY_SIZE
 );

1356 
mem˝y
(
buf„r
+
ﬁd_size
+
LK_SIZE
 ,
vÆue
,
vÆue_Àn
);

1357 
mem˝y
(
buf„r
+
ﬁd_size
+
íåy_size
,&
z
,
PH_LEN_SIZE
);

1358 
pmem_≥rsi°
(
node_d©a
,(
uöt32_t
)*3+
íåy_size
+
PH_LEN_SIZE
);

1359 
_mm_s„n˚
();

1372 
mem˝y
(
buf„r
+
ﬁd_size
+
PH_LEN_SIZE
 ,
key
,
PH_KEY_SIZE
);

1374 
mem˝y
(
buf„r
+
ﬁd_size
+
LK_SIZE
 ,
vÆue
,
vÆue_Àn
);

1375 
mem˝y
(
buf„r
+
ﬁd_size
+
íåy_size
,&
z
,
PH_LEN_SIZE
);

1377 
pmem_≥rsi°
(
buf„r
+
ﬁd_size
+
PH_LEN_SIZE
 ,
íåy_size
);

1383 
_mm_s„n˚
();

1385 
pmem_mem˝y
(
buf„r
+
ﬁd_size
,&
vl16
,
PH_LEN_SIZE
 ,
PMEM_F_MEM_NONTEMPORAL
);

1389 
_mm_s„n˚
();

1395 
mem˝y
(
buf„r
+
ﬁd_size
+
PH_LEN_SIZE
 ,
key
,
PH_KEY_SIZE
);

1396 
mem˝y
(
buf„r
+
ﬁd_size
+
LK_SIZE
 ,
vÆue
,
vÆue_Àn
);

1397 
mem˝y
(
buf„r
+
ﬁd_size
,&
vl16
,
PH_LEN_SIZE
);

1409 #ifde‡
dâ


1410 
_mm_m„n˚
();

1411 
˛ock_gëtime
(
CLOCK_MONOTONIC
,&
ts2
);

1412 
	gâ1
+(
ts2
.
tv_£c
-
ts1
.tv_£c)*1000000000+ts2.
tv_n£c
-ts1.tv_nsec;

1416 i‡(
	gmid_mëa
)

1423 
	gmid_mëa
->
	g√xt_off£t_ig
 = 
íd_off£t
;

1424 
pmem_mem˝y
((*)
off£t_to_node_d©a
(
mid_off£t
Ë+ (),(
uöt32_t
*)&
íd_off£t
,(),
PMEM_F_MEM_NONTEMPORAL
);

1425 
_mm_s„n˚
();

1427  
	gbuf„r
+
	gﬁd_size
;

1432 
move_sˇn_li°
(
Node_off£t
 &
ﬁd_off£t
,Node_off£à&
√w_off£t
)

1434 
Node_mëa
* 
	gnode_ﬁd
 = 
off£t_to_node
(
ﬁd_off£t
);

1435 
Node_mëa
* 
	gnode_√w
 = 
off£t_to_node
(
√w_off£t
);

1436 i‡(
	gnode_ﬁd
->
	gsˇn_li°
 =
NULL
)

1438 
node_√w
->
sˇn_li°
 = 
NULL
;

1441 
Sˇn_li°
* 
	g¶
;

1442 
Sˇn_li°
** 
	g¶p
;

1444 
Quîy
* 
	gquîy
;

1447 
	g¶
 = 
node_ﬁd
->
sˇn_li°
;

1448 
	g¶p
 = &(
node_ﬁd
->
sˇn_li°
);

1449 
Node_off£t_u
 
	goou
,
	gnou
;

1450 
	goou
.
	gno
 = 
ﬁd_off£t
;

1451 
	gnou
.
	gno
 = 
√w_off£t
;

1452 
	g¶
)

1454 
	gquîy
 = (
Quîy
*)(
¶
->
quîy
);

1457 i‡(
	gquîy
->
	gsˇn_off£t
 =
oou
.
no_32
)

1459 
quîy
->
sˇn_off£t
 = 
nou
.
no_32
;

1462 
	g¶p
 = &(
¶
->
√xt
);

1463 
	g¶
 = 
¶
->
√xt
;

1469 
¥ötf
("abandoned scanÉntry??\n");

1470 *
	g¶p
 = 
¶
->
√xt
;

1471 
‰ì
(
¶
);

1472 
	g¶
 = *
¶p
;

1475 
	gnode_√w
->
	gsˇn_li°
 = 
node_ﬁd
->
sˇn_li°
;

1497 
s‹t_öv
(
˙t
,
uöt16_t
* 
¨øy
)

1499 
	gi
,
	gj
;

1500 
uöt16_t
 
	gãmp
;

1501 
	gi
=0;i<
	g˙t
;i++)

1503 
	gãmp
 = 0;

1504 
	gj
=0;j<
	g˙t
-
	gi
-1;j++)

1506 i‡(
	g¨øy
[
j
] >árray[j+1])

1508 
	gãmp
 = 
¨øy
[
j
+1];

1509 
	g¨øy
[
j
+1] = 
¨øy
[j];

1510 
	g¨øy
[
j
] = 
ãmp
;

1513 i‡(
	gãmp
 == 0)

1520 
lock_check
(
Node_off£t
 
off£t
)

1522 
Node_mëa
* 
	g¥ev_node
;

1523 
Node_mëa
* 
	g√xt_node
;

1524 
Node_mëa
* 
	gnode
;

1526 
	gnode
 = 
off£t_to_node
(
off£t
);

1528 
Node_off£t_u
 
	g¥ev_off£t
,
	g√xt_off£t
;

1529 
	g¥ev_off£t
.
	gno_32
 = 
node
->
¥ev_off£t
;

1530 
	g¥ev_node
 = 
off£t_to_node
(
¥ev_off£t
.
no
);

1534 i‡(
	g¥ev_node
->
	g°©e
 == 1)

1541 
	g√xt_off£t
.
	gno_32
 = 
node
->
√xt_off£t
;

1542 
	g√xt_node
 = 
off£t_to_node
(
√xt_off£t
.
no
);

1543 i‡(
	g√xt_node
->
	g°©e
 == 1)

1561 
•lô2
(
Node_off£t
 
off£t
)

1575 
Node_off£t
 
	gnode_off£t
;

1576 
Node_mëa
* 
	gnode_mëa
;

1577 
Node
* 
	gnode_d©a
;

1580 c⁄° 
	gmëa_size
 = 
d0
[0].
buf„r
-(*)&d0[0];

1581 
	g∑π0
,
	g∑π1
,
	g∑π2
;

1583 
	g∑π0
 = 0;

1586 
	gnode_off£t
 = 
off£t
;

1589 
	gnode_mëa
 = 
off£t_to_node
(
node_off£t
);

1590 
	gnode_d©a
 = 
off£t_to_node_d©a
(
node_off£t
);

1592 
˝256
((*)&
d0
[
∑π0
],(*)
node_d©a
,
node_mëa
->
size
 + 
mëa_size
);

1593 
	g∑π0
++;

1595 
	gnode_off£t
 = 
node_mëa
->
√xt_off£t_ig
;

1596 i‡(
	gnode_off£t
 =
INIT_OFFSET
)

1608 
	gi
;

1609 
uöt16_t
 
	gsize
;

1611 
	gtc
;

1612 
uöt64_t
 
	gãmp_key
[100*
PART_MAX
];

1613 
VÆueE¡ry
 
	gvó
[100*
PART_MAX
];

1614 
Node_off£t
 
	gãmp_off£t
[
PART_MAX
];

1615 
	goc
;

1617 
	gc⁄töue_Àn
 = 
off£t_to_node
(
off£t
)->
c⁄töue_Àn
;

1618 
uöt64_t
 
	g¥efix_64
;

1619 
uöt64_t
 
	gm
;

1620 
	g¥efix_64
 = *((
uöt64_t
*)(
d0
[0].
buf„r
+
PH_LEN_SIZE
));

1622 
	gm
 = ~(((
uöt64_t
)1 << (63-
c⁄töue_Àn
))-1);

1623 
	g¥efix_64
 = (
¥efix_64
 & 
m
Ë| ((
uöt64_t
)1 << (63-
c⁄töue_Àn
));

1625 
	g∑π1
 = 0;

1626 
	g∑π2
 = 0;

1629 
Node_mëa
* 
	g√w_node1
;

1630 
Node_mëa
* 
	g√w_node2
;

1631 
Node_mëa
* 
	g¥ev_node
;

1632 
Node_mëa
* 
	g√xt_node
;

1638 
Node_off£t_u
 
	g¥ev_off£t
,
	g√xt_off£t
;

1640 
	gnode_mëa
 = 
off£t_to_node
(
off£t
);

1641 
	gnode_d©a
 = 
off£t_to_node_d©a
(
off£t
);

1643 
	g¥ev_off£t
.
	gno_32
 = 
node_mëa
->
¥ev_off£t
;

1644 
	g√xt_off£t
.
	gno_32
 = 
node_mëa
->
√xt_off£t
;

1645 
	g√xt_node
 = 
off£t_to_node
(
√xt_off£t
.
no
);

1646 
	g¥ev_node
 = 
off£t_to_node
(
¥ev_off£t
.
no
);

1648 
Node_off£t_u
 
	g√w_node1_off£t
;

1649 
Node_off£t_u
 
	g√w_node2_off£t
;

1651 
	grŸ©i⁄1
,
	grŸ©i⁄2
;

1652 
	g√w_node1_off£t
.
	gno
 = 
Æloc_node
(
∑π_rŸ©i⁄
);

1653 
	g∑π_rŸ©i⁄
 = (
∑π_rŸ©i⁄
+1)%
PM_N
;

1654 
	grŸ©i⁄1
 = 
∑π_rŸ©i⁄
;

1656 
	g√w_node2_off£t
.
	gno
 = 
Æloc_node
(
∑π_rŸ©i⁄
);

1657 
	g∑π_rŸ©i⁄
 = (
∑π_rŸ©i⁄
+1)%
PM_N
;

1658 
	grŸ©i⁄2
 = 
∑π_rŸ©i⁄
;

1660 
	g√w_node1
 = 
off£t_to_node
(
√w_node1_off£t
.
no
);

1661 
	g√w_node2
 = 
off£t_to_node
(
√w_node2_off£t
.
no
);

1663 
	g√w_node1
->
	g∑π
 = 0;

1664 
	g√w_node2
->
	g∑π
 = 0;

1666 
	g√w_node1
->
	g°©e
 = 1;

1667 
	g√w_node2
->
	g°©e
 = 1;

1671 
	g√w_node1
->
	göv_˙t
 = 
√w_node2
->
öv_˙t
 = 0;

1672 
	g√w_node1
->
	ggroup_size
 = 
√w_node2
->
group_size
 = 0;

1673 
	g√w_node1
->
	gövÆid©ed_size
 = 
√w_node2
->
övÆid©ed_size
 = 0;

1675 
	g√w_node1
->
	g°¨t_off£t
 = 
√w_node1_off£t
.
no
;

1676 
	g√w_node2
->
	g°¨t_off£t
 = 
√w_node2_off£t
.
no
;

1678 
	g√w_node1
->
	gc⁄töue_Àn
 = 
√w_node2
->
c⁄töue_Àn
 = continue_len+1;

1681 
	g√w_node2
->
	g√xt_off£t
 = 
√xt_off£t
.
no_32
;

1682 
	g√w_node2
->
	g¥ev_off£t
 = 
√w_node1_off£t
.
no_32
;

1684 
	g√w_node1
->
	g√xt_off£t
 = 
√w_node2_off£t
.
no_32
;

1685 
	g√w_node1
->
	g¥ev_off£t
 = 
¥ev_off£t
.
no_32
;

1692 
	gd1
[0].
	g√xt_off£t
 = 
√w_node2_off£t
.
no
;

1693 
	gd2
[0].
	g√xt_off£t
 = 
√xt_off£t
.
no
;

1694 
	gd1
[0].
	gc⁄töue_Àn
 = 
d2
[0].
c⁄töue_Àn
 = continue_len+1;

1704 
uöt16_t
 
	gvl16
;

1706 
uöt16_t
 
	gkvs
;

1708 * 
	gbuf„r
;

1709 * 
	gbuf„r1
;

1710 * 
	gbuf„r2
;

1713 
	gbuf„r1
 = 
d1
[0].
buf„r
;

1714 
	gbuf„r2
 = 
d2
[0].
buf„r
;

1716 
	gtc
 = 0;

1718 
	gj
;

1727 
Node_mëa
* 
	gcuºít_node0_mëa
;

1728 
Node_mëa
* 
	gcuºít_node1_mëa
 = 
√w_node1
;

1729 
Node_mëa
* 
	gcuºít_node2_mëa
 = 
√w_node2
;

1730 
Node_off£t
 
	gcuºít_node0_off£t
 = 
off£t
;

1731 
Node_off£t
 
	gcuºít_node1_off£t
 = 
√w_node1_off£t
.
no
;

1732 
Node_off£t
 
	gcuºít_node2_off£t
 = 
√w_node2_off£t
.
no
;

1733 * 
	gbuf„r_íd
;

1734 * 
	gbuf„r1_íd
 = 
buf„r1
+
NODE_BUFFER
;

1735 * 
	gbuf„r2_íd
 = 
buf„r2
+
NODE_BUFFER
;

1737 * 
	gkvp
;

1738 
	goc
 = 0;

1739 
	gi
=0;

1742 
	gcuºít_node0_mëa
 = 
off£t_to_node
(
cuºít_node0_off£t
);

1754 
	gbuf„r
 = 
d0
[
i
].
buf„r
;

1759 
	gbuf„r_íd
 = 
buf„r
 + 
cuºít_node0_mëa
->
size
;

1760 
s‹t_öv
(
cuºít_node0_mëa
->
öv_˙t
,cuºít_node0_mëa->
öv_kv
);

1761 
	gj
 = 0;

1762 
	gcuºít_node0_mëa
->
	göv_kv
[
cuºít_node0_mëa
->
öv_˙t
] = 0;

1765 
	gãmp_off£t
[
oc
++] = 
cuºít_node0_off£t
;

1768 
	gbuf„r
 < 
	gbuf„r_íd
)

1773 
	gvl16
 = *((
uöt16_t
*)(
buf„r
 ));

1775 
	gkvs
 = 
LK_SIZE
 + 
vl16
;

1777 i‡(
	gkvs
 % 2)

1778 
	gkvs
++;

1781 i‡(((*)&
	gd0
[
i
] + 
	gcuºít_node0_mëa
->
	göv_kv
[
j
] =
buf„r
) )

1786 
j
++;

1787 
	gkvs
 &~(
INV_BIT
);

1791 
	gãmp_key
[
tc
] = *((
uöt64_t
*)(
buf„r
+
PH_LEN_SIZE
));

1795 i‡(
	gãmp_key
[
tc
] < 
	g¥efix_64
)

1799 i‡(
	gbuf„r1
+
	gkvs
+
	gPH_LEN_SIZE
 > 
	gbuf„r1_íd
)

1802 
	gbuf„r1
[0] = 
buf„r1
[1] = 0;

1804 
	gcuºít_node1_mëa
->
	gsize
 = 
buf„r1
-
d1
[
∑π1
].
buf„r
;

1809 
	g√w_node1
->
	ggroup_size
+=
cuºít_node1_mëa
->
size
;

1812 
Node_off£t
 
	gãmp_off£t
;

1814 
	gãmp_off£t
 = 
Æloc_node
(
rŸ©i⁄1
);

1815 
	grŸ©i⁄1
 = (
rŸ©i⁄1
+1)%
PM_N
;

1816 
Node_mëa
* 
	gãmp_mëa
 = 
off£t_to_node
(
ãmp_off£t
);

1818 
	gd1
[
∑π1
].
	g√xt_off£t_ig
 = 
ãmp_off£t
;

1825 
	gcuºít_node1_mëa
->
	g√xt_off£t_ig
 = 
ãmp_off£t
;

1830 
	gãmp_mëa
->
	g∑π
 = 
cuºít_node1_mëa
->
∑π
+1;

1833 
	gãmp_mëa
->
	g°¨t_off£t
 = 
√w_node1_off£t
.
no
;

1834 
	gãmp_mëa
->
	göv_˙t
=0;

1836 
	gcuºít_node1_off£t
 = 
ãmp_off£t
;

1837 
	gcuºít_node1_mëa
 = 
ãmp_mëa
;

1840 
	g∑π1
++;

1841 
	gbuf„r1
 = 
d1
[
∑π1
].
buf„r
;

1845 
	gbuf„r1_íd
 = 
buf„r1
+
NODE_BUFFER
;

1853 
mem˝y
(
buf„r1
,
buf„r
,
kvs
);

1863 
	gvó
[
tc
].
	gnode_off£t
 = 
cuºít_node1_off£t
;

1865 
	gvó
[
tc
].
	gkv_off£t
 = 
buf„r1
-(*)&
d1
[
∑π1
];

1870 
	gbuf„r1
+=
kvs
;

1874 i‡(
	gbuf„r2
+
	gkvs
+
	gPH_LEN_SIZE
 > 
	gbuf„r2_íd
)

1876 
	gbuf„r2
[0] = 
buf„r2
[1] = 0;

1878 
	gcuºít_node2_mëa
->
	gsize
 = 
buf„r2
-
d2
[
∑π2
].
buf„r
;

1883 
	g√w_node2
->
	ggroup_size
+=
cuºít_node2_mëa
->
size
;

1886 
Node_off£t
 
	gãmp_off£t
;

1888 
	gãmp_off£t
 = 
Æloc_node
(
rŸ©i⁄2
);

1889 
	grŸ©i⁄2
 = (
rŸ©i⁄2
+1)%
PM_N
;

1891 
Node_mëa
* 
	gãmp_mëa
 = 
off£t_to_node
(
ãmp_off£t
);

1893 
	gd2
[
∑π2
].
	g√xt_off£t_ig
 = 
ãmp_off£t
;

1900 
	gcuºít_node2_mëa
->
	g√xt_off£t_ig
 = 
ãmp_off£t
;

1905 
	gãmp_mëa
->
	g∑π
 = 
cuºít_node2_mëa
->
∑π
+1;

1908 
	gãmp_mëa
->
	g°¨t_off£t
 = 
√w_node2_off£t
.
no
;

1909 
	gãmp_mëa
->
	göv_˙t
 = 0;

1911 
	gcuºít_node2_off£t
 = 
ãmp_off£t
;

1912 
	gcuºít_node2_mëa
 = 
ãmp_mëa
;

1915 
	g∑π2
++;

1916 
	gbuf„r2
 = 
d2
[
∑π2
].
buf„r
;

1920 
	gbuf„r2_íd
 = 
buf„r2
+
NODE_BUFFER
;

1927 
mem˝y
(
buf„r2
,
buf„r
,
kvs
);

1936 
	gvó
[
tc
].
	gnode_off£t
 = 
cuºít_node2_off£t
;

1938 
	gvó
[
tc
].
	gkv_off£t
 = 
buf„r2
-(*)&
d2
[
∑π2
];

1943 
	gbuf„r2
+=
kvs
;

1945 
	gvó
[
tc
].
	gÀn
 = 
vl16
;

1946 
	gtc
++;

1948 
	gbuf„r
+=
kvs
;

1951 
	gcuºít_node0_off£t
 = 
cuºít_node0_mëa
->
√xt_off£t_ig
;

1952 i‡(
	gcuºít_node0_off£t
 =
INIT_OFFSET
)

1954 
	gi
++;

1957 
	gbuf„r1
[0] = 
buf„r1
[1] = 0;

1958 
	gbuf„r2
[0] = 
buf„r2
[1] = 0;

1967 
	g√w_node1
->
	gíd_off£t
 = 
cuºít_node1_off£t
;

1972 
	gd1
[
∑π1
].
	g√xt_off£t_ig
 = 
INIT_OFFSET
;

1973 
	gcuºít_node1_mëa
->
	g√xt_off£t_ig
 = 
INIT_OFFSET
;

1976 
	gcuºít_node1_mëa
->
	gsize
 = 
buf„r1
-
d1
[
∑π1
].
buf„r
;

1982 
	g√w_node1
->
	ggroup_size
+=
cuºít_node1_mëa
->
size
;

1989 
	g√w_node2
->
	gíd_off£t
 = 
cuºít_node2_off£t
;

1993 
	gd2
[
∑π2
].
	g√xt_off£t_ig
 = 
INIT_OFFSET
;

1994 
	gcuºít_node2_mëa
->
	g√xt_off£t_ig
 = 
INIT_OFFSET
;

1997 
	gcuºít_node2_mëa
->
	gsize
 = 
buf„r2
-
d2
[
∑π2
].
buf„r
;

2004 
	g√w_node2
->
	ggroup_size
+=
cuºít_node2_mëa
->
size
;

2010 
	gnode_off£t
 = 
√w_node1_off£t
.
no
;

2011 
	gi
 = 0;

2014 
	gnode_mëa
 = 
off£t_to_node
(
node_off£t
);

2015 
	gnode_d©a
 = 
off£t_to_node_d©a
(
node_off£t
);

2017 
¡256
((*)
node_d©a
,(*)&
d1
[
i
],
node_mëa
->
size
 + 
mëa_size
 + 
PH_LEN_SIZE
 );

2018 
	gi
++;

2020 
	gnode_off£t
 = 
node_mëa
->
√xt_off£t_ig
;

2021 i‡(
	gnode_off£t
 =
INIT_OFFSET
)

2025 
	gnode_off£t
 = 
√w_node2_off£t
.
no
;

2026 
	gi
 = 0;

2029 
	gnode_mëa
 = 
off£t_to_node
(
node_off£t
);

2030 
	gnode_d©a
 = 
off£t_to_node_d©a
(
node_off£t
);

2032 
¡256
((*)
node_d©a
,(*)&
d2
[
i
],
node_mëa
->
size
 + 
mëa_size
 + 
PH_LEN_SIZE
 );

2033 
	gi
++;

2035 
	gnode_off£t
 = 
node_mëa
->
√xt_off£t_ig
;

2036 i‡(
	gnode_off£t
 =
INIT_OFFSET
)

2041 
_mm_s„n˚
();

2043 
	g√xt_node
->
	g¥ev_off£t
 = 
√w_node2_off£t
.
no_32
;

2044 
	g¥ev_node
->
	g√xt_off£t
 = 
√w_node1_off£t
.
no_32
;

2047 
pmem_mem˝y
((
Node
*)
off£t_to_node_d©a
(
¥ev_off£t
.
no
 ),&
√w_node1_off£t
,(),
PMEM_F_MEM_NONTEMPORAL
);

2050 
_mm_s„n˚
();

2054 
uöt64_t
 
	gv
;

2055 
	gv
 = (
uöt64_t
)1 <<(63-
c⁄töue_Àn
);

2057 
ö£π_ønge_íåy
((*)&
¥efix_64
,
c⁄töue_Àn
,
SPLIT_OFFSET
);

2059 
	g¥efix_64
-=
v
;

2060 
ö£π_ønge_íåy
((*)&
¥efix_64
,
c⁄töue_Àn
+1,
√w_node1_off£t
.
no
);

2062 
	g¥efix_64
+=
v
;

2063 
ö£π_ønge_íåy
((*)&
¥efix_64
,
c⁄töue_Àn
+1,
√w_node2_off£t
.
no
);

2066 
	gi
=0;i<
	gtc
;i++)

2070 
ö£π_poöt_íåy
((*)&
ãmp_key
[
i
],
vó
[i]);

2075 
_mm_s„n˚
();

2078 
	g√w_node1
->
	g°©e
 = 0;

2079 
	g√w_node2
->
	g°©e
 = 0;

2083 
	gi
=0;i<
	goc
;i++)

2084 
‰ì_node
(
ãmp_off£t
[
i
]);

2089 
•lô2p
(
Node_off£t
 
off£t
)

2115 i‡(
lock_check
(
off£t
) == -1)

2117  
•lô2
(
off£t
);

2121 
•lô
(
Node_off£t
 
off£t
)

2123 #ifde‡
dâ


2124 
time•ec
 
	gts1
,
	gts2
;

2125 
˛ock_gëtime
(
CLOCK_MONOTONIC
,&
ts1
);

2126 
_mm_m„n˚
();

2133 
	gi
;

2134 
uöt16_t
 
	gsize
;

2135 * 
	gbuf„r
;

2137 * 
	gbuf„r1
;

2138 * 
	gbuf„r2
;

2140 
	gtc
;

2141 
uöt64_t
 
	gãmp_key
[100*
PART_MAX
];

2144 
VÆueE¡ry
 
	gvó
[100*
PART_MAX
];

2145 
Node_off£t
 
	gãmp_off£t
[100*
PART_MAX
];

2146 
	goc
;

2149 
Node_mëa
* 
	g√w_node1
;

2150 
Node_mëa
* 
	g√w_node2
;

2151 
Node_mëa
* 
	g¥ev_node
;

2152 
Node_mëa
* 
	g√xt_node
;

2153 
Node_mëa
* 
	gnode
;

2155 
Node
* 
	gnode_d©a
;

2156 
Node
* 
	g√w_node1_d©a
;

2157 
Node
* 
	g√w_node2_d©a
;

2161 
	gnode
 = 
off£t_to_node
(
off£t
);

2162 
	gnode_d©a
 = 
off£t_to_node_d©a
(
off£t
);

2164 
	gc⁄töue_Àn
 = 
node
->
c⁄töue_Àn
;

2173 
Node_off£t_u
 
	g¥ev_off£t
,
	g√xt_off£t
;

2174 
	g¥ev_off£t
.
	gno_32
 = 
node
->
¥ev_off£t
;

2175 
	g¥ev_node
 = 
off£t_to_node
(
¥ev_off£t
.
no
);

2211 i‡(
	g¥ev_node
->
	g°©e
 == 1)

2249 
	g√xt_off£t
.
	gno_32
 = 
node
->
√xt_off£t
;

2250 
	g√xt_node
 = 
off£t_to_node
(
√xt_off£t
.
no
);

2251 i‡(
	g√xt_node
->
	g°©e
 == 1)

2256 
√xt_node
->
°©e
 == 1)

2258 
√xt_off£t
.
no_32
 = 
node
->next_offset;

2259 
	g√xt_node
 = 
off£t_to_node
(
√xt_off£t
.
no
);

2266 i‡(
	g¥öt
)

2267 
¥ötf
("locked\n");

2276 
Node_off£t_u
 
	g√w_node1_off£t
;

2277 
Node_off£t_u
 
	g√w_node2_off£t
;

2280 
	g√w_node1_off£t
.
	gno
 = 
Æloc_node
(0);

2281 
	g√w_node2_off£t
.
	gno
 = 
Æloc_node
(0);

2283 
	g√w_node1
 = 
off£t_to_node
(
√w_node1_off£t
.
no
);

2284 
	g√w_node2
 = 
off£t_to_node
(
√w_node2_off£t
.
no
);

2286 
	g√w_node1
->
	g∑π
 = 0;

2287 
	g√w_node2
->
	g∑π
 = 0;

2289 
	g√w_node1
->
	g°©e
 = 1;

2290 
	g√w_node1
->
	gsˇn_li°
 = 
NULL
;

2291 
	g√w_node2
->
	g°©e
 = 1;

2292 
	g√w_node2
->
	gsˇn_li°
 = 
NULL
;

2294 
	g√w_node1
->
	göv_˙t
 = 
√w_node2
->
öv_˙t
 = 0;

2295 
	g√w_node1
->
	ggroup_size
 = 
√w_node2
->
group_size
 = 0;

2296 
	g√w_node1
->
	gövÆid©ed_size
 = 
√w_node2
->
övÆid©ed_size
 = 0;

2297 #ifde‡
DOUBLE_LOG


2298 
	g√w_node1
->
	gÊush_˙t
 = 
√w_node2
->
Êush_˙t
 = 0;

2299 
	g√w_node1
->
	gÊush_size
 = 
√w_node2
->
Êush_size
 = 0;

2302 
	g√w_node1
->
	g°¨t_off£t
 = 
√w_node1_off£t
.
no
;

2303 
	g√w_node2
->
	g°¨t_off£t
 = 
√w_node2_off£t
.
no
;

2305 
	g√w_node1
->
	gc⁄töue_Àn
 = 
√w_node2
->
c⁄töue_Àn
 = continue_len+1;

2312 
	g√w_node2
->
	g√xt_off£t
 = 
√xt_off£t
.
no_32
;

2313 
	g√w_node2
->
	g¥ev_off£t
 = 
√w_node1_off£t
.
no_32
;

2317 
	g√w_node1
->
	g√xt_off£t
 = 
√w_node2_off£t
.
no_32
;

2318 
	g√w_node1
->
	g¥ev_off£t
 = 
¥ev_off£t
.
no_32
;

2322 i‡(
	gnode
->
	gsˇn_li°
 !
NULL
)

2323 
move_sˇn_li°
(
off£t
,
√w_node2_off£t
.
no
);

2341 
	g√w_node1_d©a
 = 
off£t_to_node_d©a
(
√w_node1_off£t
.
no
);

2342 
	g√w_node2_d©a
 = 
off£t_to_node_d©a
(
√w_node2_off£t
.
no
);

2344 
mem˝y
(
√w_node1_d©a
,
√w_node1
,()*3);

2345 
mem˝y
(
√w_node2_d©a
,
√w_node2
,()*3);

2354 
uöt64_t
 
	g¥efix_64
;

2355 
uöt64_t
 
	gm
;

2358 #ifde‡
DOUBLE_LOG


2359 i‡(
	gnode
->
	gÊush_˙t
 != 0)

2360 
¥efix_64
 = *((
uöt64_t
*)(
node
->
Êush_kv
[0]+
PH_LEN_SIZE
));

2366 
	g¥efix_64
 = *((
uöt64_t
*)(
node_d©a
->
buf„r
+
PH_LEN_SIZE
));

2375 
	gm
 = ~(((
uöt64_t
)1 << (63-
c⁄töue_Àn
))-1);

2381 
	g¥efix_64
 = (
¥efix_64
 & 
m
Ë| ((
uöt64_t
)1 << (63-
c⁄töue_Àn
));

2382 i‡(
	g¥öt
)

2383 
¥ötf
("pivŸ %lx m %lx sizê%d\n",
¥efix_64
,
m
,
size
);

2385 
uöt16_t
 
	gvl16
;

2387 
uöt16_t
 
	gkvs
;

2389 #ifde‡
DRAM_BUF


2390 
Node
 
	gd_node0
;

2391 
Node
 
	gd_node1
;

2392 
Node
 
	gd_node2
;

2394 
	gbuf„r
 = 
d_node0
.
buf„r
;

2395 
	gbuf„r1
 = 
d_node1
.
buf„r
;

2396 
	gbuf„r2
 = 
d_node2
.
buf„r
;

2399 
	gbuf„r
 = 
node_d©a
->
buf„r
;

2400 
	gbuf„r1
 = 
√w_node1_d©a
->
buf„r
;

2401 
	gbuf„r2
 = 
√w_node2_d©a
->
buf„r
;

2405 
	gtc
 = 0;

2407 
	gj
;

2412 
Node_off£t
 
	g√xt_off£t0
;

2413 
Node
* 
	gcuºít_node0_d©a
 = 
node_d©a
;

2414 
Node
* 
	gcuºít_node1_d©a
 = 
√w_node1_d©a
;

2415 
Node
* 
	gcuºít_node2_d©a
 = 
√w_node2_d©a
;

2416 
Node_mëa
* 
	gcuºít_node0_mëa
;

2417 
Node_mëa
* 
	gcuºít_node1_mëa
 = 
√w_node1
;

2418 
Node_mëa
* 
	gcuºít_node2_mëa
 = 
√w_node2
;

2419 
Node_off£t
 
	gcuºít_node0_off£t
 = 
off£t
;

2420 
Node_off£t
 
	gcuºít_node1_off£t
 = 
√w_node1_off£t
.
no
;

2421 
Node_off£t
 
	gcuºít_node2_off£t
 = 
√w_node2_off£t
.
no
;

2422 * 
	gbuf„r_íd
;

2423 * 
	gbuf„r1_íd
 = 
buf„r1
+
NODE_BUFFER
;

2424 * 
	gbuf„r2_íd
 = 
buf„r2
+
NODE_BUFFER
;

2426 * 
	gkvp
;

2427 
	goc
 = 0;

2428 
	gi
=0;

2431 
	gcuºít_node0_mëa
 = 
off£t_to_node
(
cuºít_node0_off£t
);

2432 
	gcuºít_node0_d©a
 = 
off£t_to_node_d©a
(
cuºít_node0_off£t
);

2435 
	g√xt_off£t0
 = 
cuºít_node0_mëa
->
√xt_off£t_ig
;

2437 #ifde‡
DRAM_BUF


2443 
	gbuf„r
 = 
d_node0
.
buf„r
;

2445 
	gbuf„r
 = 
cuºít_node0_d©a
->
buf„r
;

2448 
	gbuf„r_íd
 = 
buf„r
 + 
cuºít_node0_mëa
->
size
;

2449 
s‹t_öv
(
cuºít_node0_mëa
->
öv_˙t
,cuºít_node0_mëa->
öv_kv
);

2450 
	gj
 = 0;

2453 
	gcuºít_node0_mëa
->
	göv_kv
[
cuºít_node0_mëa
->
öv_˙t
] = 0;

2456 
	gãmp_off£t
[
oc
++] = 
cuºít_node0_off£t
;

2459 
	gbuf„r
 < 
	gbuf„r_íd
)

2464 
	gvl16
 = *((
uöt16_t
*)(
buf„r
 ));

2466 
	gkvs
 = 
LK_SIZE
 + 
vl16
;

2468 i‡(
	gkvs
 % 2)

2469 
	gkvs
++;

2471 #ifde‡
DRAM_BUF


2472 i‡(((*)&
	gd_node0
 + 
	gcuºít_node0_mëa
->
	göv_kv
[
j
] =
buf„r
) )

2474 i‡(((*)
cuºít_node0_d©a
 + 
cuºít_node0_mëa
->
öv_kv
[
j
] =
buf„r
) )

2477 
j
++;

2485 
	gkvs
 &~(
INV_BIT
);

2501 i‡(
	g¥öt
)

2502 
¥ötf
("pivŸ %lx key %lx\n",
¥efix_64
,*((
uöt64_t
*)(
buf„r
)));

2508 
	gãmp_key
[
tc
] = *((
uöt64_t
*)(
buf„r
+
PH_LEN_SIZE
));

2512 i‡(
	gãmp_key
[
tc
] < 
	g¥efix_64
)

2516 i‡(
	gbuf„r1
+
	gkvs
+
	gPH_LEN_SIZE
 > 
	gbuf„r1_íd
)

2519 
	gbuf„r1
[0] = 
buf„r1
[1] = 0;

2520 #ifde‡
DRAM_BUF


2521 
	gcuºít_node1_mëa
->
	gsize
 = 
buf„r1
-
d_node1
.
buf„r
;

2523 
	gcuºít_node1_mëa
->
	gsize
 = 
buf„r1
-
cuºít_node1_d©a
->
buf„r
;

2525 #ifde‡
DOUBLE_LOG


2526 
	gcuºít_node1_mëa
->
	gÊush_size
=0;

2529 
	g√w_node1
->
	ggroup_size
+=
cuºít_node1_mëa
->
size
;

2532 
Node_off£t
 
	gãmp_off£t
;

2533 
	gãmp_off£t
 = 
Æloc_node
(
cuºít_node1_mëa
->
∑π
+1);

2534 
Node_mëa
* 
	gãmp_mëa
 = 
off£t_to_node
(
ãmp_off£t
);

2535 #ifde‡
DRAM_BUF


2536 
	gd_node1
.
	g√xt_off£t_ig
 = 
ãmp_off£t
;

2538 
¡256
((*)
cuºít_node1_d©a
,(*)&
d_node1
,(
Node
));

2540 
	gcuºít_node1_d©a
->
	g√xt_off£t_ig
 = 
ãmp_off£t
;

2543 
	gcuºít_node1_mëa
->
	g√xt_off£t_ig
 = 
ãmp_off£t
;

2548 
	gãmp_mëa
->
	g∑π
 = 
cuºít_node1_mëa
->
∑π
+1;

2551 
	gãmp_mëa
->
	g°¨t_off£t
 = 
√w_node1_off£t
.
no
;

2552 
	gãmp_mëa
->
	göv_˙t
=0;

2553 #ifde‡
DOUBLE_LOG


2554 
	gãmp_mëa
->
	gÊush_˙t
=0;

2557 
	gcuºít_node1_off£t
 = 
ãmp_off£t
;

2558 
	gcuºít_node1_mëa
 = 
ãmp_mëa
;

2559 
	gcuºít_node1_d©a
 = 
off£t_to_node_d©a
(
ãmp_off£t
);

2560 #ifde‡
DRAM_BUF


2561 
	gbuf„r1
 = 
d_node1
.
buf„r
;

2563 
	gbuf„r1
 = 
cuºít_node1_d©a
->
buf„r
;

2565 
	gbuf„r1_íd
 = 
buf„r1
+
NODE_BUFFER
;

2572 #ifde‡
DRAM_BUF


2573 
mem˝y
(
buf„r1
,
buf„r
,
kvs
);

2575 
pmem_mem˝y
(
buf„r1
,
buf„r
,
kvs
,
PMEM_F_MEM_NODRAIN
);

2584 
	gvó
[
tc
].
	gnode_off£t
 = 
cuºít_node1_off£t
;

2585 #ifde‡
DRAM_BUF


2586 
	gvó
[
tc
].
	gkv_off£t
 = 
buf„r1
-(*)&
d_node1
;

2588 
	gvó
[
tc
].
	gkv_off£t
 = 
buf„r1
-(*)
cuºít_node1_d©a
;

2591 
	gbuf„r1
+=
kvs
;

2595 i‡(
	gbuf„r2
+
	gkvs
+
	gPH_LEN_SIZE
 > 
	gbuf„r2_íd
)

2597 
	gbuf„r2
[0] = 
buf„r2
[1] = 0;

2598 #ifde‡
DRAM_BUF


2599 
	gcuºít_node2_mëa
->
	gsize
 = 
buf„r2
-
d_node2
.
buf„r
;

2601 
	gcuºít_node2_mëa
->
	gsize
 = 
buf„r2
-
cuºít_node2_d©a
->
buf„r
;

2603 #ifde‡
DOUBLE_LOG


2604 
	gcuºít_node2_mëa
->
	gÊush_size
 = 0;

2607 
	g√w_node2
->
	ggroup_size
+=
cuºít_node2_mëa
->
size
;

2610 
Node_off£t
 
	gãmp_off£t
;

2611 
	gãmp_off£t
 = 
Æloc_node
(
cuºít_node2_mëa
->
∑π
+1);

2612 
Node_mëa
* 
	gãmp_mëa
 = 
off£t_to_node
(
ãmp_off£t
);

2613 #ifde‡
DRAM_BUF


2614 
	gd_node2
.
	g√xt_off£t_ig
 = 
ãmp_off£t
;

2616 
¡256
((*)
cuºít_node2_d©a
,(*)&
d_node2
,(
Node
));

2618 
	gcuºít_node2_d©a
->
	g√xt_off£t_ig
 = 
ãmp_off£t
;

2621 
	gcuºít_node2_mëa
->
	g√xt_off£t_ig
 = 
ãmp_off£t
;

2626 
	gãmp_mëa
->
	g∑π
 = 
cuºít_node2_mëa
->
∑π
+1;

2629 
	gãmp_mëa
->
	g°¨t_off£t
 = 
√w_node2_off£t
.
no
;

2630 
	gãmp_mëa
->
	göv_˙t
 = 0;

2631 #ifde‡
DOUBLE_LOG


2632 
	gãmp_mëa
->
	gÊush_˙t
 = 0;

2635 
	gcuºít_node2_off£t
 = 
ãmp_off£t
;

2636 
	gcuºít_node2_mëa
 = 
ãmp_mëa
;

2637 
	gcuºít_node2_d©a
 = 
off£t_to_node_d©a
(
ãmp_off£t
);

2638 #ifde‡
DRAM_BUF


2639 
	gbuf„r2
 = 
d_node2
.
buf„r
;

2641 
	gbuf„r2
 = 
cuºít_node2_d©a
->
buf„r
;

2643 
	gbuf„r2_íd
 = 
buf„r2
+
NODE_BUFFER
;

2649 #ifde‡
DRAM_BUF


2650 
mem˝y
(
buf„r2
,
buf„r
,
kvs
);

2652 
pmem_mem˝y
(
buf„r2
,
buf„r
,
kvs
,
PMEM_F_MEM_NODRAIN
);

2659 
	gvó
[
tc
].
	gnode_off£t
 = 
cuºít_node2_off£t
;

2660 #ifde‡
DRAM_BUF


2661 
	gvó
[
tc
].
	gkv_off£t
 = 
buf„r2
-(*)&
d_node2
;

2663 
	gvó
[
tc
].
	gkv_off£t
 = 
buf„r2
-(*)
cuºít_node2_d©a
;

2666 
	gbuf„r2
+=
kvs
;

2669 
	gvó
[
tc
].
	gÀn
 = 
vl16
;

2670 
	gtc
++;

2688 
	gbuf„r
+=
kvs
;

2690 #ifde‡
DOUBLE_LOG


2692 
	gi
=0;i<
	gcuºít_node0_mëa
->
	gÊush_˙t
;i++)

2694 
	gkvp
 = 
cuºít_node0_mëa
->
Êush_kv
[
i
];

2696 
	gvl16
 = *((
uöt16_t
*)
kvp
);

2697 i‡((
	gvl16
 & 
	gINV_BIT
))

2699 
	gkvs
 = 
LK_SIZE
+
vl16
;

2700 i‡(
	gkvs
%2)

2701 ++
	gkvs
;

2704 
	gãmp_key
[
tc
] = *((
uöt64_t
*)(
kvp
+
PH_LEN_SIZE
));

2705 i‡(
	gãmp_key
[
tc
] < 
	g¥efix_64
)

2707 i‡(
	gbuf„r1
+
	gkvs
+
	gPH_LEN_SIZE
 > 
	gbuf„r1_íd
)

2709 
	gbuf„r1
[0] = 
buf„r1
[1] = 0;

2712 
	gcuºít_node1_mëa
->
	gsize
 = 
buf„r1
-
cuºít_node1_d©a
->
buf„r
;

2713 
	gcuºít_node1_mëa
->
	gÊush_size
=0;

2715 
	g√w_node1
->
	ggroup_size
+=
cuºít_node1_mëa
->
size
;

2718 
Node_off£t
 
	gãmp_off£t
;

2719 
	gãmp_off£t
 = 
Æloc_node
(
cuºít_node1_mëa
->
∑π
+1);

2720 
Node_mëa
* 
	gãmp_mëa
 = 
off£t_to_node
(
ãmp_off£t
);

2722 
	gcuºít_node1_d©a
->
	g√xt_off£t_ig
 = 
ãmp_off£t
;

2723 
	gcuºít_node1_mëa
->
	g√xt_off£t_ig
 = 
ãmp_off£t
;

2724 
pmem_≥rsi°
(
cuºít_node1_d©a
,(
Node
));

2728 
	gãmp_mëa
->
	g∑π
 = 
cuºít_node1_mëa
->
∑π
+1;

2731 
	gãmp_mëa
->
	g°¨t_off£t
 = 
√w_node1_off£t
.
no
;

2732 
	gãmp_mëa
->
	göv_˙t
=0;

2733 
	gãmp_mëa
->
	gÊush_˙t
=0;

2735 
	gcuºít_node1_off£t
 = 
ãmp_off£t
;

2736 
	gcuºít_node1_mëa
 = 
ãmp_mëa
;

2737 
	gcuºít_node1_d©a
 = 
off£t_to_node_d©a
(
ãmp_off£t
);

2739 
	gbuf„r1
 = 
cuºít_node1_d©a
->
buf„r
;

2740 
	gbuf„r1_íd
 = 
buf„r1
+
NODE_BUFFER
;

2744 
mem˝y
(
buf„r1
,
kvp
,
kvs
);

2745 *((
	guöt16_t
*)
	gkvp
Ë|
INV_BIT
;

2749 
	gvó
[
tc
].
	gnode_off£t
 = 
cuºít_node1_off£t
;

2750 
	gvó
[
tc
].
	gkv_off£t
 = 
buf„r1
-(*)
cuºít_node1_d©a
;

2752 
	gbuf„r1
+=
kvs
;

2756 i‡(
	gbuf„r2
+
	gkvs
+
	gPH_LEN_SIZE
 > 
	gbuf„r2_íd
)

2758 
	gbuf„r2
[0] = 
buf„r2
[1] = 0;

2760 
	gcuºít_node2_mëa
->
	gsize
 = 
buf„r2
-
cuºít_node2_d©a
->
buf„r
;

2761 
	gcuºít_node2_mëa
->
	gÊush_size
=0;

2763 
	g√w_node2
->
	ggroup_size
+=
cuºít_node2_mëa
->
size
;

2766 
Node_off£t
 
	gãmp_off£t
;

2767 
	gãmp_off£t
 = 
Æloc_node
(
cuºít_node2_mëa
->
∑π
+1);

2768 
Node_mëa
* 
	gãmp_mëa
 = 
off£t_to_node
(
ãmp_off£t
);

2770 
	gcuºít_node2_d©a
->
	g√xt_off£t_ig
 = 
ãmp_off£t
;

2771 
	gcuºít_node2_mëa
->
	g√xt_off£t_ig
 = 
ãmp_off£t
;

2772 
pmem_≥rsi°
(
cuºít_node2_d©a
,(
Node
));

2776 
	gãmp_mëa
->
	g∑π
 = 
cuºít_node2_mëa
->
∑π
+1;

2779 
	gãmp_mëa
->
	g°¨t_off£t
 = 
√w_node2_off£t
.
no
;

2780 
	gãmp_mëa
->
	göv_˙t
=0;

2781 
	gãmp_mëa
->
	gÊush_˙t
=0;

2783 
	gcuºít_node2_off£t
 = 
ãmp_off£t
;

2784 
	gcuºít_node2_mëa
 = 
ãmp_mëa
;

2785 
	gcuºít_node2_d©a
 = 
off£t_to_node_d©a
(
ãmp_off£t
);

2787 
	gbuf„r2
 = 
cuºít_node2_d©a
->
buf„r
;

2788 
	gbuf„r2_íd
 = 
buf„r2
+
NODE_BUFFER
;

2792 
mem˝y
(
buf„r2
,
kvp
,
kvs
);

2794 *((
	guöt16_t
*)
	gkvp
Ë|
INV_BIT
;

2797 
	gvó
[
tc
].
	gnode_off£t
 = 
cuºít_node2_off£t
;

2798 
	gvó
[
tc
].
	gkv_off£t
 = 
buf„r2
-(*)
cuºít_node2_d©a
;

2800 
	gbuf„r2
+=
kvs
;

2804 
	gvó
[
tc
].
	gÀn
 = 
vl16
;

2805 
	gtc
++;

2809 i‡(
	gcuºít_node0_off£t
 =
node
->
íd_off£t
)

2812 
	gcuºít_node0_off£t
 = 
√xt_off£t0
;

2816 
	gbuf„r1
[0] = 
buf„r1
[1] = 0;

2817 
	gbuf„r2
[0] = 
buf„r2
[1] = 0;

2833 
	g√w_node1
->
	gíd_off£t
 = 
cuºít_node1_off£t
;

2835 #ifde‡
DOUBLE_LOG


2836 
	gcuºít_node1_mëa
->
	gÊush_size
 = 0;

2840 #ifde‡
DRAM_BUF


2841 
	gd_node1
.
	g√xt_off£t_ig
 = 
INIT_OFFSET
;

2843 
¡256
((*)
cuºít_node1_d©a
,(*)&
d_node1
,(
Node
));

2844 
	gcuºít_node1_mëa
->
	gsize
 = 
buf„r1
-
d_node1
.
buf„r
;

2846  
	gcuºít_node1_d©a
->
	g√xt_off£t_ig
 = 
INIT_OFFSET
;

2848 
	gcuºít_node1_mëa
->
	gsize
 = 
buf„r1
-
cuºít_node1_d©a
->
buf„r
;

2850 
	g√w_node1
->
	ggroup_size
+=
cuºít_node1_mëa
->
size
;

2857 
	g√w_node2
->
	gíd_off£t
 = 
cuºít_node2_off£t
;

2858 #ifde‡
DOUBLE_LOG


2859 
	gcuºít_node2_mëa
->
	gÊush_size
 = 0;

2863 #ifde‡
DRAM_BUF


2864 
	gd_node2
.
	g√xt_off£t_ig
 = 
INIT_OFFSET
;

2866 
¡256
((*)
cuºít_node2_d©a
,(*)&
d_node2
,(
Node
));

2867 
	gcuºít_node2_mëa
->
	gsize
 = 
buf„r2
-
d_node2
.
buf„r
;

2869  
	gcuºít_node2_d©a
->
	g√xt_off£t_ig
 = 
INIT_OFFSET
;

2872 
	gcuºít_node2_mëa
->
	gsize
 = 
buf„r2
-
cuºít_node2_d©a
->
buf„r
;

2874 
	g√w_node2
->
	ggroup_size
+=
cuºít_node2_mëa
->
size
;

2876 #i‚de‡
DRAM_BUF


2877 
pmem_døö
();

2879 
_mm_s„n˚
();

2881 
	g√xt_node
->
	g¥ev_off£t
 = 
√w_node2_off£t
.
no_32
;

2882 
	g¥ev_node
->
	g√xt_off£t
 = 
√w_node1_off£t
.
no_32
;

2885 
pmem_mem˝y
((
Node
*)
off£t_to_node_d©a
(
¥ev_off£t
.
no
 ),&
√w_node1_off£t
,(),
PMEM_F_MEM_NONTEMPORAL
);

2888 
_mm_s„n˚
();

2892 i‡(
	g¥öt
)

2893 
¥ötf
("insertÑange\n");

2897 
uöt64_t
 
	gv
;

2900 
	gv
 = (
uöt64_t
)1 <<(63-
c⁄töue_Àn
);

2906 
ö£π_ønge_íåy
((*)&
¥efix_64
,
c⁄töue_Àn
,
SPLIT_OFFSET
);

2924 
	g¥efix_64
-=
v
;

2925 
ö£π_ønge_íåy
((*)&
¥efix_64
,
c⁄töue_Àn
+1,
√w_node1_off£t
.
no
);

2927 
	g√w_node1
->
	gc⁄töue_Àn
 = 
c⁄töue_Àn
+1;

2928 
	g¥efix_64
+=
v
;

2929 
ö£π_ønge_íåy
((*)&
¥efix_64
,
c⁄töue_Àn
+1,
√w_node2_off£t
.
no
);

2930 
	g√w_node2
->
	gc⁄töue_Àn
 = 
c⁄töue_Àn
+1;

2939 
	gi
=0;i<
	gtc
;i++)

2943 
ö£π_poöt_íåy
((*)&
ãmp_key
[
i
],
vó
[i]);

2949 i‡(
	g¥öt
)

2950 
¥ötf
("rehash\n");

2955 
	gbuf„r
 = 
node_d©a
->
buf„r
;

2956 
	gbuf„r1
 = 
√w_node1_d©a
->
buf„r
;

2957 
	gbuf„r2
 = 
√w_node2_d©a
->
buf„r
;

2959 
	gbuf„r
 < 
	gbe
)

2963 
	gvÆue_Àn
 = *((
uöt16_t
*)(
buf„r
));

2964 
	gkvs
 = 
kls
 + 
vÆue_Àn
;

2965 i‡((
	gvÆue_Àn
 & (1 << 15)) == 0)

2979 i‡(*((
uöt64_t
*)(
buf„r
+
Àn_size
)Ë< 
¥efix_64
)

2986 
ö£π_poöt_íåy
(
buf„r
+
Àn_size
,
buf„r1
);

2987 
	gbuf„r1
+
kvs
;

2995 
ö£π_poöt_íåy
(
buf„r
+
Àn_size
,
buf„r2
);

2996 
	gbuf„r2
+=
kvs
;

3001 
	gkvs
-= (1 << 15);

3002 
	gbuf„r
+=
kvs
;

3008 
_mm_s„n˚
();

3011 
	g√w_node1
->
	g°©e
 = 0;

3012 
	g√w_node2
->
	g°©e
 = 0;

3017 
	gi
=0;i<
	goc
;i++)

3018 
‰ì_node
(
ãmp_off£t
[
i
]);

3020 #ifde‡
dâ


3021 
_mm_m„n˚
();

3022 
˛ock_gëtime
(
CLOCK_MONOTONIC
,&
ts2
);

3023 
	gâ2
+=(
ts2
.
tv_£c
-
ts1
.tv_£c)*1000000000+ts2.
tv_n£c
-ts1.tv_nsec;

3029 
com∑˘2
(
Node_off£t
 
off£t
)

3042 
Node_off£t
 
	gnode_off£t
;

3043 
Node_mëa
* 
	gnode_mëa
;

3044 
Node
* 
	gnode_d©a
;

3046 c⁄° 
	gmëa_size
 = 
d0
[0].
buf„r
-(*)&d0[0];

3047 
	g∑π0
,
	g∑π1
;

3049 
	g∑π0
 = 0;

3052 
	gnode_off£t
 = 
off£t
;

3055 
	gnode_mëa
 = 
off£t_to_node
(
node_off£t
);

3056 
	gnode_d©a
 = 
off£t_to_node_d©a
(
node_off£t
);

3058 
˝256
((*)&
d0
[
∑π0
],(*)
node_d©a
,
node_mëa
->
size
 + 
mëa_size
);

3059 
	g∑π0
++;

3061 
	gnode_off£t
 = 
node_mëa
->
√xt_off£t_ig
;

3062 i‡(
	gnode_off£t
 =
INIT_OFFSET
)

3068 
	gi
;

3069 
uöt16_t
 
	gsize
;

3071 
	gtc
;

3072 
uöt64_t
 
	gãmp_key
[100*
PART_MAX
];

3073 
VÆueE¡ry
 
	gvó
[100*
PART_MAX
];

3074 
Node_off£t
 
	gãmp_off£t
[
PART_MAX
];

3075 
	goc
;

3077 
	gc⁄töue_Àn
 = 
off£t_to_node
(
off£t
)->
c⁄töue_Àn
;

3079 
	g∑π1
 = 0;

3081 
Node_mëa
* 
	g√w_node1
;

3082 
Node_mëa
* 
	g¥ev_node
;

3083 
Node_mëa
* 
	g√xt_node
;

3085 
Node_off£t_u
 
	g¥ev_off£t
,
	g√xt_off£t
;

3087 
	gnode_mëa
 = 
off£t_to_node
(
off£t
);

3088 
	gnode_d©a
 = 
off£t_to_node_d©a
(
off£t
);

3090 
	g¥ev_off£t
.
	gno_32
 = 
node_mëa
->
¥ev_off£t
;

3091 
	g√xt_off£t
.
	gno_32
 = 
node_mëa
->
√xt_off£t
;

3092 
	g√xt_node
 = 
off£t_to_node
(
√xt_off£t
.
no
);

3093 
	g¥ev_node
 = 
off£t_to_node
(
¥ev_off£t
.
no
);

3095 
Node_off£t_u
 
	g√w_node1_off£t
;

3097 
	grŸ©i⁄1
;

3098 
	g√w_node1_off£t
.
	gno
 = 
Æloc_node
(
∑π_rŸ©i⁄
);

3099 
	g∑π_rŸ©i⁄
 = (
∑π_rŸ©i⁄
+1)%
PM_N
;

3100 
	grŸ©i⁄1
 = 
∑π_rŸ©i⁄
;

3102 
	g√w_node1
 = 
off£t_to_node
(
√w_node1_off£t
.
no
);

3104 
	g√w_node1
->
	g∑π
 = 0;

3106 
	g√w_node1
->
	g°©e
 = 1;

3110 
	g√w_node1
->
	göv_˙t
 = 0;

3111 
	g√w_node1
->
	ggroup_size
 = 0;

3112 
	g√w_node1
->
	gövÆid©ed_size
 = 0;

3114 
	g√w_node1
->
	g°¨t_off£t
 = 
√w_node1_off£t
.
no
;

3116 
	g√w_node1
->
	gc⁄töue_Àn
 = 
c⁄töue_Àn
;

3119 
	g√w_node1
->
	g√xt_off£t
 = 
√xt_off£t
.
no_32
;

3120 
	g√w_node1
->
	g¥ev_off£t
 = 
¥ev_off£t
.
no_32
;

3127 
	gd1
[0].
	g√xt_off£t
 = 
√xt_off£t
.
no
;

3128 
	gd1
[0].
	gc⁄töue_Àn
 = 
c⁄töue_Àn
;

3138 
uöt16_t
 
	gvl16
;

3140 
uöt16_t
 
	gkvs
;

3142 * 
	gbuf„r
;

3143 * 
	gbuf„r1
;

3144 * 
	gbuf„r2
;

3147 
	gbuf„r1
 = 
d1
[0].
buf„r
;

3149 
	gtc
 = 0;

3151 
	gj
;

3160 
Node_mëa
* 
	gcuºít_node0_mëa
;

3161 
Node_mëa
* 
	gcuºít_node1_mëa
 = 
√w_node1
;

3162 
Node_off£t
 
	gcuºít_node0_off£t
 = 
off£t
;

3163 
Node_off£t
 
	gcuºít_node1_off£t
 = 
√w_node1_off£t
.
no
;

3164 * 
	gbuf„r_íd
;

3165 * 
	gbuf„r1_íd
 = 
buf„r1
+
NODE_BUFFER
;

3167 * 
	gkvp
;

3168 
	goc
 = 0;

3169 
	gi
=0;

3172 
	gcuºít_node0_mëa
 = 
off£t_to_node
(
cuºít_node0_off£t
);

3184 
	gbuf„r
 = 
d0
[
i
].
buf„r
;

3189 
	gbuf„r_íd
 = 
buf„r
 + 
cuºít_node0_mëa
->
size
;

3190 
s‹t_öv
(
cuºít_node0_mëa
->
öv_˙t
,cuºít_node0_mëa->
öv_kv
);

3191 
	gj
 = 0;

3192 
	gcuºít_node0_mëa
->
	göv_kv
[
cuºít_node0_mëa
->
öv_˙t
] = 0;

3195 
	gãmp_off£t
[
oc
++] = 
cuºít_node0_off£t
;

3197 
	gbuf„r
 < 
	gbuf„r_íd
)

3202 
	gvl16
 = *((
uöt16_t
*)(
buf„r
 ));

3204 
	gkvs
 = 
LK_SIZE
 + 
vl16
;

3206 i‡(
	gkvs
 % 2)

3207 
	gkvs
++;

3210 i‡(((*)&
	gd0
[
i
] + 
	gcuºít_node0_mëa
->
	göv_kv
[
j
] =
buf„r
) )

3215 
j
++;

3216 
	gkvs
 &~(
INV_BIT
);

3220 
	gãmp_key
[
tc
] = *((
uöt64_t
*)(
buf„r
+
PH_LEN_SIZE
));

3226 i‡(
	gbuf„r1
+
	gkvs
+
	gPH_LEN_SIZE
 > 
	gbuf„r1_íd
)

3229 
	gbuf„r1
[0] = 
buf„r1
[1] = 0;

3231 
	gcuºít_node1_mëa
->
	gsize
 = 
buf„r1
-
d1
[
∑π1
].
buf„r
;

3236 
	g√w_node1
->
	ggroup_size
+=
cuºít_node1_mëa
->
size
;

3239 
Node_off£t
 
	gãmp_off£t
;

3241 
	gãmp_off£t
 = 
Æloc_node
(
rŸ©i⁄1
);

3242 
	grŸ©i⁄1
 = (
rŸ©i⁄1
+1)%
PM_N
;

3243 
Node_mëa
* 
	gãmp_mëa
 = 
off£t_to_node
(
ãmp_off£t
);

3245 
	gd1
[
∑π1
].
	g√xt_off£t_ig
 = 
ãmp_off£t
;

3252 
	gcuºít_node1_mëa
->
	g√xt_off£t_ig
 = 
ãmp_off£t
;

3257 
	gãmp_mëa
->
	g∑π
 = 
cuºít_node1_mëa
->
∑π
+1;

3260 
	gãmp_mëa
->
	g°¨t_off£t
 = 
√w_node1_off£t
.
no
;

3261 
	gãmp_mëa
->
	göv_˙t
=0;

3263 
	gcuºít_node1_off£t
 = 
ãmp_off£t
;

3264 
	gcuºít_node1_mëa
 = 
ãmp_mëa
;

3267 
	g∑π1
++;

3268 
	gbuf„r1
 = 
d1
[
∑π1
].
buf„r
;

3272 
	gbuf„r1_íd
 = 
buf„r1
+
NODE_BUFFER
;

3280 
mem˝y
(
buf„r1
,
buf„r
,
kvs
);

3290 
	gvó
[
tc
].
	gnode_off£t
 = 
cuºít_node1_off£t
;

3292 
	gvó
[
tc
].
	gkv_off£t
 = 
buf„r1
-(*)&
d1
[
∑π1
];

3297 
	gbuf„r1
+=
kvs
;

3299 
	gvó
[
tc
].
	gÀn
 = 
vl16
;

3300 
	gtc
++;

3302 
	gbuf„r
+=
kvs
;

3305 
	gcuºít_node0_off£t
 = 
cuºít_node0_mëa
->
√xt_off£t_ig
;

3306 i‡(
	gcuºít_node0_off£t
 =
INIT_OFFSET
)

3308 
	gi
++;

3311 
	gbuf„r1
[0] = 
buf„r1
[1] = 0;

3320 
	g√w_node1
->
	gíd_off£t
 = 
cuºít_node1_off£t
;

3325 
	gd1
[
∑π1
].
	g√xt_off£t_ig
 = 
INIT_OFFSET
;

3326 
	gcuºít_node1_mëa
->
	g√xt_off£t_ig
 = 
INIT_OFFSET
;

3329 
	gcuºít_node1_mëa
->
	gsize
 = 
buf„r1
-
d1
[
∑π1
].
buf„r
;

3335 
	g√w_node1
->
	ggroup_size
+=
cuºít_node1_mëa
->
size
;

3343 
	gnode_off£t
 = 
√w_node1_off£t
.
no
;

3344 
	gi
 = 0;

3347 
	gnode_mëa
 = 
off£t_to_node
(
node_off£t
);

3348 
	gnode_d©a
 = 
off£t_to_node_d©a
(
node_off£t
);

3350 
¡256
((*)
node_d©a
,(*)&
d1
[
i
],
node_mëa
->
size
 + 
mëa_size
 + 
PH_LEN_SIZE
);

3351 
	gi
++;

3353 
	gnode_off£t
 = 
node_mëa
->
√xt_off£t_ig
;

3354 i‡(
	gnode_off£t
 =
INIT_OFFSET
)

3359 
_mm_s„n˚
();

3361 
	g√xt_node
->
	g¥ev_off£t
 = 
√w_node1_off£t
.
no_32
;

3362 
	g¥ev_node
->
	g√xt_off£t
 = 
√w_node1_off£t
.
no_32
;

3365 
pmem_mem˝y
(
off£t_to_node_d©a
(
¥ev_off£t
.
no
 ),&
√w_node1_off£t
,(),
PMEM_F_MEM_NONTEMPORAL
);

3368 
_mm_s„n˚
();

3372 
ö£π_ønge_íåy
((*)
d0
[0].
buf„r
+
PH_LEN_SIZE
 ,
c⁄töue_Àn
,
√w_node1_off£t
.
no
);

3374 
	gi
=0;i<
	gtc
;i++)

3375 
ö£π_poöt_íåy
((*)&
ãmp_key
[
i
],
vó
[i]);

3378 
_mm_s„n˚
();

3381 
	g√w_node1
->
	g°©e
 = 0;

3385 
	gi
=0;i<
	goc
;i++)

3386 
‰ì_node
(
ãmp_off£t
[
i
]);

3392 
com∑˘2p
(
Node_off£t
 
off£t
)

3419 i‡(
lock_check
(
off£t
) == -1)

3421  
com∑˘2
(
off£t
);

3425 
com∑˘
(
Node_off£t
 
off£t
)

3428 #ifde‡
dâ


3429 
time•ec
 
	gts1
,
	gts2
;

3430 
˛ock_gëtime
(
CLOCK_MONOTONIC
,&
ts1
);

3431 
_mm_m„n˚
();

3436 if(
	g¥öt
)

3437 
¥ötf
("com∑˘i⁄ off£à%d/%d\n",
off£t
.
fûe
,offset.offset);

3443 
	gi
;

3444 
uöt16_t
 
	gsize
;

3445 * 
	gbuf„r
;

3447 * 
	gbuf„r1
;

3449 
	gtc
;

3450 
uöt64_t
 
	gãmp_key
[100 * 
PART_MAX
];

3453 
VÆueE¡ry
 
	gvó
[100 * 
PART_MAX
];

3454 
Node_off£t
 
	gãmp_off£t
[100 * 
PART_MAX
];

3455 
	goc
;

3457 
Node_mëa
* 
	g√w_node1
;

3458 
Node_mëa
* 
	g¥ev_node
;

3459 
Node_mëa
* 
	g√xt_node
;

3460 
Node_mëa
* 
	gnode
;

3462 
Node
* 
	gnode_d©a
;

3463 
Node
* 
	g√w_node1_d©a
;

3466 
	gnode
 = 
off£t_to_node
(
off£t
);

3467 
	gnode_d©a
 = 
off£t_to_node_d©a
(
off£t
);

3469 
	gc⁄töue_Àn
 = 
node
->
c⁄töue_Àn
;

3472 
Node_off£t_u
 
	g¥ev_off£t
,
	g√xt_off£t
;

3473 
	g¥ev_off£t
.
	gno_32
 = 
node
->
¥ev_off£t
;

3474 
	g¥ev_node
 = 
off£t_to_node
(
¥ev_off£t
.
no
);

3498 i‡(
	g¥ev_node
->
	g°©e
 == 1)

3513 
_mm_m„n˚
();

3515 
	g√xt_off£t
.
	gno_32
 = 
node
->
√xt_off£t
;

3516 
	g√xt_node
 = 
off£t_to_node
(
√xt_off£t
.
no
);

3518 i‡(
	g√xt_node
->
	g°©e
 == 1)

3520 
√xt_node
->
°©e
 == 1)

3522 
√xt_off£t
.
no_32
 = 
node
->next_offset;

3523 
	g√xt_node
 = 
off£t_to_node
(
√xt_off£t
.
no
);

3526 i‡(
	g¥öt
)

3527 
¥ötf
("locked\n");

3535 
Node_off£t_u
 
	g√w_node1_off£t
;

3536 
	g√w_node1_off£t
.
	gno
 = 
Æloc_node
(0);

3538 
	g√w_node1
 = 
off£t_to_node
(
√w_node1_off£t
.
no
);

3542 
	g√w_node1
->
	g∑π
 = 0;

3544 
	g√w_node1
->
	g°©e
 = 1;

3551 
	g√w_node1
->
	göv_˙t
 = 0;

3552 
	g√w_node1
->
	ggroup_size
 = 0;

3553 
	g√w_node1
->
	g°¨t_off£t
 = 
√w_node1_off£t
.
no
;

3554 
	g√w_node1
->
	gövÆid©ed_size
 = 0;

3556 
	g√w_node1
->
	gsˇn_li°
 = 
NULL
;

3557 #ifde‡
DOUBLE_LOG


3558 
	g√w_node1
->
	gÊush_˙t
 = 0;

3559 
	g√w_node1
->
	gÊush_size
 = 0;

3562 
	g√w_node1
->
	g√xt_off£t
 = 
node
->
√xt_off£t
;

3563 
	g√w_node1
->
	g¥ev_off£t
 = 
node
->
¥ev_off£t
;

3565 
	g√w_node1
->
	gc⁄töue_Àn
 = 
c⁄töue_Àn
;

3573 i‡(
	gnode
->
	gsˇn_li°
 !
NULL
)

3574 
move_sˇn_li°
(
off£t
,
√w_node1_off£t
.
no
);

3576 
	g√w_node1_d©a
 = 
off£t_to_node_d©a
(
√w_node1_off£t
.
no
);

3578 
mem˝y
(
√w_node1_d©a
,
√w_node1
,()*3);

3599 
uöt16_t
 
	gvl16
;

3603 #ifde‡
DRAM_BUF


3604 
Node
 
	gd_node0
;

3605 
Node
 
	gd_node1
;

3607 
	gbuf„r
 = 
d_node0
.
buf„r
;

3608 
	gbuf„r1
 = 
d_node1
.
buf„r
;

3611 
	gbuf„r
 = 
node_d©a
->
buf„r
;

3612 
	gbuf„r1
 = 
√w_node1_d©a
->
buf„r
;

3619 
uöt16_t
 
	gkvs
;

3621 
	gtc
 = 0;

3628 
Node_off£t
 
	g√xt_off£t0
;

3629 
Node
* 
	gcuºít_node0_d©a
 = 
node_d©a
;

3630 
Node
* 
	gcuºít_node1_d©a
 = 
√w_node1_d©a
;

3631 
Node_mëa
* 
	gcuºít_node0_mëa
;

3632 
Node_mëa
* 
	gcuºít_node1_mëa
 = 
√w_node1
;

3633 
Node_off£t
 
	gcuºít_node0_off£t
 = 
off£t
;

3634 
Node_off£t
 
	gcuºít_node1_off£t
 = 
√w_node1_off£t
.
no
;

3636 * 
	gbuf„r_íd
;

3637 * 
	gbuf„r1_íd
 = 
buf„r1
+
NODE_BUFFER
;

3638 
	gj
;

3639 * 
	gkvp
;

3642 
	goc
 = 0;

3645 
	gcuºít_node0_mëa
 = 
off£t_to_node
(
cuºít_node0_off£t
);

3646 
	gcuºít_node0_d©a
 = 
off£t_to_node_d©a
(
cuºít_node0_off£t
);

3649 
	g√xt_off£t0
 = 
cuºít_node0_mëa
->
√xt_off£t_ig
;

3651 #ifde‡
DRAM_BUF


3652 
	gd_node0
 = *
cuºít_node0_d©a
;

3653 
	gbuf„r
 = 
d_node0
.
buf„r
;

3656 
	gbuf„r
 = 
cuºít_node0_d©a
->
buf„r
;

3658 
	gbuf„r_íd
 = 
buf„r
 + 
cuºít_node0_mëa
->
size
;

3659 
s‹t_öv
(
cuºít_node0_mëa
->
öv_˙t
,cuºít_node0_mëa->
öv_kv
);

3660 
	gj
 = 0;

3663 
	gcuºít_node0_mëa
->
	göv_kv
[
cuºít_node0_mëa
->
öv_˙t
] = 0;

3664 
	gãmp_off£t
[
oc
++] = 
cuºít_node0_off£t
;

3665 
	gbuf„r
 < 
	gbuf„r_íd
)

3672 
	gvl16
 = *((
uöt16_t
*)(
buf„r
));

3674 
	gkvs
 = 
LK_SIZE
 + 
vl16
;

3675 i‡(
	gkvs
%2)

3676 ++
	gkvs
;

3678 #ifde‡
DRAM_BUF


3679 i‡(((*)&
	gd_node0
 + 
	gcuºít_node0_mëa
->
	göv_kv
[
j
] =
buf„r
))

3681 i‡(((*)
cuºít_node0_d©a
 + 
cuºít_node0_mëa
->
öv_kv
[
j
] =
buf„r
) )

3684 
j
++;

3693 
	gkvs
&~(
INV_BIT
);

3710 
	gãmp_key
[
tc
] = *((
uöt64_t
*)(
buf„r
+
PH_LEN_SIZE
 ));

3711 i‡(
	gbuf„r1
+
	gkvs
+
	gPH_LEN_SIZE
 > 
	gbuf„r1_íd
)

3713 
	gbuf„r1
[0] = 
buf„r1
[1] = 0;

3714 #ifde‡
DRAM_BUF


3715 
	gcuºít_node1_mëa
->
	gsize
 = 
buf„r1
-
d_node1
.
buf„r
;

3717 
	gcuºít_node1_mëa
->
	gsize
 = 
buf„r1
-
cuºít_node1_d©a
->
buf„r
;

3719 #ifde‡
DOUBLE_LOG


3720 
	gcuºít_node1_mëa
->
	gÊush_size
 = 0;

3723 
	g√w_node1
->
	ggroup_size
+=
cuºít_node1_mëa
->
size
;

3726 
Node_off£t
 
	gãmp_off£t
;

3727 
	gãmp_off£t
 = 
Æloc_node
(
cuºít_node1_mëa
->
∑π
+1);

3728 
Node_mëa
* 
	gãmp_mëa
 = 
off£t_to_node
(
ãmp_off£t
);

3729 #ifde‡
DRAM_BUF


3730 
	gd_node1
.
	g√xt_off£t_ig
 = 
ãmp_off£t
;

3732 
¡256
((*)
cuºít_node1_d©a
,(*)&
d_node1
,(
Node
));

3734 
	gcuºít_node1_d©a
->
	g√xt_off£t_ig
 = 
ãmp_off£t
;

3737 
	gcuºít_node1_mëa
->
	g√xt_off£t_ig
 = 
ãmp_off£t
;

3741 
	gãmp_mëa
->
	g∑π
 = 
cuºít_node1_mëa
->
∑π
+1;

3744 
	gãmp_mëa
->
	g°¨t_off£t
 = 
√w_node1_off£t
.
no
;

3745 
	gãmp_mëa
->
	göv_˙t
=0;

3746 #ifde‡
DOUBLE_LOG


3747 
	gãmp_mëa
->
	gÊush_˙t
=0;

3750 
	gcuºít_node1_off£t
 = 
ãmp_off£t
;

3751 
	gcuºít_node1_mëa
 = 
ãmp_mëa
;

3752 
	gcuºít_node1_d©a
 = 
off£t_to_node_d©a
(
ãmp_off£t
);

3753 #ifde‡
DRAM_BUF


3754 
	gbuf„r1
 = 
d_node1
.
buf„r
;

3756 
	gbuf„r1
 = 
cuºít_node1_d©a
->
buf„r
;

3758 
	gbuf„r1_íd
 = 
buf„r1
+
NODE_BUFFER
;

3761 #ifde‡
DRAM_BUF


3762 
mem˝y
(
buf„r1
,
buf„r
,
kvs
);

3764 
pmem_mem˝y
(
buf„r1
,
buf„r
,
kvs
,
PMEM_F_MEM_NODRAIN
);

3769 
	gvó
[
tc
].
	gnode_off£t
 = 
cuºít_node1_off£t
;

3770 #ifde‡
DRAM_BUF


3771 
	gvó
[
tc
].
	gkv_off£t
 = 
buf„r1
-(*)&
d_node1
;

3773 
	gvó
[
tc
].
	gkv_off£t
 = 
buf„r1
-(*)
cuºít_node1_d©a
;

3776 
	gvó
[
tc
].
	gÀn
 = 
vl16
;

3777 
	gbuf„r1
+=
kvs
;

3778 
	gtc
++;

3794 
	gbuf„r
+=
kvs
;

3796 #ifde‡
DOUBLE_LOG


3798 
	gi
=0;i<
	gcuºít_node0_mëa
->
	gÊush_˙t
;i++)

3800 
	gkvp
 = 
cuºít_node0_mëa
->
Êush_kv
[
i
];

3802 
	gvl16
 = *((
uöt16_t
*)
kvp
);

3803 i‡((
	gvl16
 & 
	gINV_BIT
))

3805 
	gkvs
 = 
LK_SIZE
+
vl16
;

3806 i‡(
	gkvs
%2)

3807 ++
	gkvs
;

3810 
	gãmp_key
[
tc
] = *((
uöt64_t
*)(
kvp
+
PH_LEN_SIZE
));

3811 i‡(
	gbuf„r1
+
	gkvs
+
	gPH_LEN_SIZE
 > 
	gbuf„r1_íd
)

3813 
	gbuf„r1
[0] = 
buf„r1
[1] = 0;

3814 
	gcuºít_node1_mëa
->
	gsize
 = 
buf„r1
-
cuºít_node1_d©a
->
buf„r
;

3815 
	gcuºít_node1_mëa
->
	gÊush_size
=0;

3817 
	g√w_node1
->
	ggroup_size
+=
cuºít_node1_mëa
->
size
;

3820 
Node_off£t
 
	gãmp_off£t
;

3821 
	gãmp_off£t
 = 
Æloc_node
(
cuºít_node1_mëa
->
∑π
+1);

3822 
Node_mëa
* 
	gãmp_mëa
 = 
off£t_to_node
(
ãmp_off£t
);

3824 
	gcuºít_node1_d©a
->
	g√xt_off£t_ig
 = 
ãmp_off£t
;

3825 
	gcuºít_node1_mëa
->
	g√xt_off£t_ig
 = 
ãmp_off£t
;

3826 
pmem_≥rsi°
(
cuºít_node1_d©a
,(
Node
));

3830 
	gãmp_mëa
->
	g∑π
 = 
cuºít_node1_mëa
->
∑π
+1;

3833 
	gãmp_mëa
->
	g°¨t_off£t
 = 
√w_node1_off£t
.
no
;

3834 
	gãmp_mëa
->
	göv_˙t
=0;

3835 
	gãmp_mëa
->
	gÊush_˙t
=0;

3837 
	gcuºít_node1_off£t
 = 
ãmp_off£t
;

3838 
	gcuºít_node1_mëa
 = 
ãmp_mëa
;

3839 
	gcuºít_node1_d©a
 = 
off£t_to_node_d©a
(
ãmp_off£t
);

3841 
	gbuf„r1
 = 
cuºít_node1_d©a
->
buf„r
;

3842 
	gbuf„r1_íd
 = 
buf„r1
+
NODE_BUFFER
;

3846 
mem˝y
(
buf„r1
,
kvp
,
kvs
);

3848 *((
	guöt16_t
*)
	gkvp
Ë|
INV_BIT
;

3851 
	gvó
[
tc
].
	gnode_off£t
 = 
cuºít_node1_off£t
;

3852 
	gvó
[
tc
].
	gkv_off£t
 = 
buf„r1
-(*)
cuºít_node1_d©a
;

3854 
	gvó
[
tc
].
	gÀn
 = 
vl16
;

3855 
	gbuf„r1
+=
kvs
;

3856 
	gtc
++;

3861 i‡(
	gcuºít_node0_off£t
 =
node
->
íd_off£t
)

3863 
	gcuºít_node0_off£t
 = 
√xt_off£t0
;

3866 
	gbuf„r1
[0] = 
buf„r1
[1] = 0;

3869 
uöt16_t
* 
	gãmp_kv
;

3870 
uöt16_t
 
	gãmp_max
;

3871 
	gãmp_kv
 = 
node
->
öv_kv
;

3872 
	gnode
->
	göv_kv
 = 
√w_node1
->
öv_kv
;

3873 
	g√w_node1
->
	göv_kv
 = 
ãmp_kv
;

3874 
	gãmp_max
 = 
node
->
öv_max
;

3875 
	gnode
->
	göv_max
 = 
√w_node1
->
öv_max
;

3876 
	g√w_node1
->
	göv_max
 = 
ãmp_max
;

3877 #ifde‡
DOUBLE_LOG


3878 ** 
	gãmp_Êush
;

3879 
	gãmp_Êush
 = 
node
->
Êush_kv
;

3880 
	gnode
->
	gÊush_kv
 = 
√w_node1
->
Êush_kv
;

3881 
	g√w_node1
->
	gÊush_kv
 = 
ãmp_Êush
;

3882 
	gãmp_max
 = 
node
->
Êush_max
;

3883 
	gnode
->
	gÊush_max
 = 
√w_node1
->
Êush_max
;

3884 
	g√w_node1
->
	gÊush_max
 = 
ãmp_max
;

3889 
	g√w_node1
->
	gíd_off£t
 = 
cuºít_node1_off£t
;

3890 #ifde‡
DOUBLE_LOG


3891 
	gcuºít_node1_mëa
->
	gÊush_size
 = 0;

3894 #ifde‡
DRAM_BUF


3895 
	gd_node1
.
	g√xt_off£t_ig
 = 
INIT_OFFSET
;

3897 
¡256
((*)
cuºít_node1_d©a
,(*)&
d_node1
,(
Node
));

3898 
	gcuºít_node1_mëa
->
	gsize
 = 
buf„r1
-
d_node1
.
buf„r
;

3901 
	gcuºít_node1_d©a
->
	g√xt_off£t_ig
 = 
INIT_OFFSET
;

3902 
	gcuºít_node1_mëa
->
	gsize
 = 
buf„r1
-
cuºít_node1_d©a
->
buf„r
;

3905 
	g√w_node1
->
	ggroup_size
+=
cuºít_node1_mëa
->
size
;

3907 #i‚de‡
DRAM_BUF


3908 
pmem_døö
();

3911 
_mm_s„n˚
();

3913 
	g√xt_node
->
	g¥ev_off£t
 = 
√w_node1_off£t
.
no_32
;

3914 
	g¥ev_node
->
	g√xt_off£t
 = 
√w_node1_off£t
.
no_32
;

3917 
pmem_mem˝y
(
off£t_to_node_d©a
(
¥ev_off£t
.
no
 ),&
√w_node1_off£t
,(),
PMEM_F_MEM_NONTEMPORAL
);

3919 
_mm_s„n˚
();

3929 i‡(!
	gUSE_DRAM
)

3942 
pmem_≥rsi°
(
√w_node1_d©a
,()+
√w_node1
->
size
);

3943 
_mm_s„n˚
();

3944 
Êush_mëa
(
√w_node1
->
¥ev_off£t
);

3945 
_mm_s„n˚
();

3956 
	gi
=0;i<
	gtc
;i++)

3957 
ö£π_poöt_íåy
((*)&
ãmp_key
[
i
],
vó
[i]);

3959 i‡(
	g¥öt
)

3960 
¥ötf
("rehash\n");

3964 
	gbuf„r
 = 
node1_d©a
->
buf„r1
;

3966 
	gbuf„r
 < 
	gbe
)

3970 
	gvÆue_Àn
 = *((
uöt16_t
*)(
buf„r
));

3972 i‡((
	gvÆue_Àn
 & (1 << 15)) == 0)

3986 
ö£π_poöt_íåy
(
buf„r
+
cur
,
√w_node1_d©a
->buf„r+
size1
);

3987 
	gsize1
+
key_size
 + 
Àn_size
 + 
vÆue_Àn
;

3990 
	gvÆue_Àn
 -= (1 << 15);

3991 
	gcur
+=
key_size
+
Àn_size
+
vÆue_Àn
;

4000 
ö£π_ønge_íåy
((*)
node_d©a
->
buf„r
+
PH_LEN_SIZE
 ,
c⁄töue_Àn
,
√w_node1_off£t
.
no
);

4002 
	g√w_node1
->
	gc⁄töue_Àn
 = 
c⁄töue_Àn
;

4006 
_mm_s„n˚
();

4008 
	g√w_node1
->
	g°©e
 = 0;

4011 
	gi
=0;i<
	goc
;i++)

4012 
‰ì_node
(
ãmp_off£t
[
i
]);

4014 #ifde‡
dâ


4015 
_mm_m„n˚
();

4016 
˛ock_gëtime
(
CLOCK_MONOTONIC
,&
ts2
);

4017 
	gâ3
+=(
ts2
.
tv_£c
-
ts1
.tv_£c)*1000000000+ts2.
tv_n£c
-ts1.tv_nsec;

4031 
adv™˚
(** 
kv_µ
,* 
off£t
,
Node
* 
node_p
)

4033 
uöt16_t
 
	gsize
;

4034 
	gﬁd_off£t
,
	g√w_off£t
,
	göv
;

4039 
	göv
 = 0;

4040 
	gsize
 = *((
uöt16_t
*)(*
kv_µ
+
key_size
));

4041 i‡(
	gsize
 & (1 << 15))

4043 
	göv
 = 1;

4044 
	gsize
-=(1<<15);

4046 *
	gkv_µ
+=
size
+
key_size
+
Àn_size
;

4047 i‡(*
	gkv_µ
 >
node_p
->
buf„r
+node_p->
size
)

4049 i‡(
	göv
 == 0)

4053 
	gﬁd_off£t
 = *
off£t
;

4056 
	g√w_off£t
 = 
off£t_to_node
(
ﬁd_off£t
)->
√xt_off£t
;

4057 i‡(
	g√w_off£t
 =
TAIL_OFFSET
)

4059 *
off£t
 = 
TAIL_OFFSET
;

4060 
dec_ªf
(
ﬁd_off£t
);

4061 *
	gkv_µ
 = 
NULL
;

4064 i‡(
öc_ªf
(
√w_off£t
,0))

4066 
c›y_node
(
node_p
,
off£t_to_node
(
√w_off£t
));

4070 
dec_ªf
(
ﬁd_off£t
);

4071 *
	goff£t
 = 
√w_off£t
;

4072 *
	gkv_µ
 = 
node_p
->
buf„r
;

4077 
dñëe_sˇn_íåy
(
Node_off£t
 &
sˇn_off£t
,* 
quîy
)

4079 
Node_mëa
* 
	gnode
;

4080 
Sˇn_li°
* 
	g¶
;

4081 
Sˇn_li°
** 
	g¶p
;

4082 
	gnode
 = 
off£t_to_node
(
sˇn_off£t
);

4083 
	g¶
 = 
node
->
sˇn_li°
;

4084 
	g¶p
 = &(
node
->
sˇn_li°
);

4085 
	g¶
 !
NULL
)

4087 i‡(
¶
->
quîy
 == query)

4090 *
¶p
 = 
¶
->
√xt
;

4091 
‰ì
(
¶
);

4094 
	g¶p
 = &(
¶
->
√xt
);

4095 
	g¶
 = 
¶
->
√xt
;

4099 
adv™˚_off£t
(
Quîy
* 
quîy
)

4101 
Node_off£t_u
 
	gﬁd_off£t
,
	g√w_off£t
;

4102 
	göv
;

4103 
Node_mëa
* 
	gnode
;

4104 
Node_mëa
* 
	g√xt_node
;

4111 
	gﬁd_off£t
.
	gno_32
 = 
quîy
->
sˇn_off£t
;

4112 
	gnode
 = 
off£t_to_node
(
ﬁd_off£t
.
no
);

4129 i‡(
åy_©_lock
(
node
->
°©e
) == 0)

4132 
	g√w_off£t
.
	gno_32
 = 
node
->
√xt_off£t
;

4134 i‡(
	g√w_off£t
.
	gno
 =
TAIL_OFFSET
)

4136 
dñëe_sˇn_íåy
(
ﬁd_off£t
.
no
,
quîy
);

4138 
©_u∆ock
(
node
->
°©e
);

4139 
	gquîy
->
	gsˇn_off£t
 = 
TAIL_OFFSET_u
.
no_32
;

4150 
	g√xt_node
 = 
off£t_to_node
(
√w_off£t
.
no
);

4152 i‡(
åy_©_lock
(
√xt_node
->
°©e
) )

4166 
Sˇn_li°
* 
	g¶
;

4167 
Sˇn_li°
** 
	g¶p
;

4169 
	g¶
 = 
node
->
sˇn_li°
;

4170 
	g¶p
 = &(
node
->
sˇn_li°
);

4171 
	g¶
)

4173 i‡(
	g¶
->
	gquîy
 =
quîy
)

4175 *
¶p
 = 
¶
->
√xt
;

4178 
	g¶p
 = &(
¶
->
√xt
);

4179 
	g¶
 = 
¶
->
√xt
;

4185 
	g¶
->
	g√xt
 = 
√xt_node
->
sˇn_li°
;

4186 
	g√xt_node
->
	gsˇn_li°
 = 
¶
;

4188 
	gquîy
->
	gsˇn_off£t
 = 
√w_off£t
.
no_32
;

4210 
c›y_™d_s‹t_node
(
quîy
);

4211 
©_u∆ock
(
node
->
°©e
);

4220 
©_u∆ock
(
√xt_node
->
°©e
);

4233 
adv™˚_off£t
(* 
quîy
)

4235  
adv™˚_off£t
((
Quîy
*)
quîy
);

4248 
c›y_™d_s‹t_node
(
Quîy
 *
quîy
)

4250 
Node
* 
	gnode_d©a
 = (Node*)
quîy
->
node_d©a
;

4251 
Node_off£t
 
	gnode_off£t
;

4252 
Node_mëa
* 
	gnode_mëa
;

4253 
Node_off£t
 
	gíd_off£t
;

4254 
	gi
 = 0;

4255 
	g∑π
;

4256 
	gnode_size
[100*
PART_MAX
];

4257 
Node_off£t_u
 
	gnou
;

4258 
	gnou
.
	gno_32
 = 
quîy
->
sˇn_off£t
;

4259 
	gnode_off£t
 = 
nou
.
no
;

4261 
	gnode_mëa
 = 
off£t_to_node
(
node_off£t
);

4262 
	gíd_off£t
 = 
node_mëa
->
íd_off£t
;

4263 
	gmëa_size
 = (*)
node_d©a
->
buf„r
-(*)node_data;

4267 
	gnode_size
[
i
] = 
off£t_to_node
(
node_off£t
)->
size
;

4268 
mem˝y
(&
node_d©a
[
i
],
off£t_to_node_d©a
(
node_off£t
),
node_size
[i]+
mëa_size
);

4270 i‡(
	gnode_off£t
 =
íd_off£t
)

4273 
	gnode_off£t
 = 
off£t_to_node
(
node_off£t
)->
√xt_off£t_ig
;

4274 
	gi
++;

4276 
	g∑π
 = 
i
+1;

4282 * 
	gkv
;

4283 
uöt16_t
 
	gv_size
;

4286 
	gquîy
->
	gs‹ãd_kv_max
 = 0;

4287 
	gquîy
->
	gs‹ãd_kv_i
 = 0;

4288 
	gj
;

4290 * 
	gnode_íd
;

4292 
	gj
 = 0;

4293 i‡(
	gnode_mëa
->
	göv_max
 == 0)

4294 
node_mëa
->
öv_kv
 = 0;

4295 
	gi
=0;i<
	g∑π
;i++)

4297 
	gnode_d©a
 = &(((
Node
*)
quîy
->
node_d©a
)[
i
]);

4298 
	gkv
 = 
node_d©a
->
buf„r
;

4299 
	gnode_íd
 = (*)
node_d©a
+
node_size
[
i
];

4301 
	gkv
 < 
	gnode_íd
)

4303 
	gv_size
 = *((
uöt16_t
*)(
kv
));

4304 i‡(
	gv_size
 & 
	gINV_BIT
)

4305 
	gv_size
-=
INV_BIT
;

4306 i‡(
	gkv
-(*)
	gnode_d©a
 =
node_mëa
->
öv_kv
[
j
])

4308 
j
++;

4309 i‡(
	gj
 =
node_mëa
->
öv_max
)

4310 
j
 = 0;

4313 
	gquîy
->
	gs‹ãd_kv
[(
quîy
->
s‹ãd_kv_max
)++] = 
kv
;

4314 
	gkv
+=
LK_SIZE
+
v_size
;

4335 
ö£π_sˇn_li°
(
Node_off£t
 &
node_off£t
,* 
quîy
)

4337 
Node_mëa
* 
	gnode
 = 
off£t_to_node
(
node_off£t
);

4338 
Sˇn_li°
* 
	g¶
;

4339 
	g¶
 = (
Sˇn_li°
*)
mÆloc
((Scan_list));

4340 
	g¶
->
	gquîy
 = 
quîy
;

4341 
	g¶
->
	g√xt
 = 
node
->
sˇn_li°
;

4342 
	gnode
->
	gsˇn_li°
 = 
¶
;

4350 
övÆid©e_kv
(
VÆueE¡ry
& 
ve
)

4353 
Node_mëa
* 
	gmëa
;

4355 #ifde‡
DOUBLE_LOG


4356 i‡(
	gve
.
	gnode_off£t
.
	gfûe
 & 
	gLOG_BIT
)

4358 * 
	gkvp
;

4360 
	gkvp
 = (*)
off£t_to_node_d©a
(
ve
.
node_off£t
)+ve.
kv_off£t
;

4361 *((
	guöt16_t
*)
	gkvp
Ë|
INV_BIT
;

4364 
Node_off£t
 
	gnode_off£t
;

4365 
	gnode_off£t
 = *(
Node_off£t
*)(
kvp
+
PH_LEN_SIZE
 +
key_size
+
ve
.
Àn
);

4366 
	gmëa
 = 
off£t_to_node
(
node_off£t
);

4367 
off£t_to_node
(
mëa
->
°¨t_off£t
)->
	gövÆid©ed_size
+=
ve
.
Àn
+
LK_SIZE
;

4379 
	gmëa
 = 
off£t_to_node
(
ve
.
node_off£t
);

4380 i‡(
	gmëa
->
	göv_˙t
+1 =
mëa
->
öv_max
)

4382 
mëa
->
öv_max
*=2;

4383 
	gmëa
->
	göv_kv
 = (
uöt16_t
*)
ªÆloc
(
mëa
->
öv_kv
,(uöt16_t)*mëa->
öv_max
);

4386 
	gmëa
->
	göv_kv
[
mëa
->
öv_˙t
++] = 
ve
.
kv_off£t
;

4387 
off£t_to_node
(
mëa
->
°¨t_off£t
)->
	gövÆid©ed_size
+=
ve
.
Àn
+
LK_SIZE
;

4388 i‡(
	gve
.
	gÀn
%2)

4389 
off£t_to_node
(
mëa
->
°¨t_off£t
)->
	gövÆid©ed_size
++;

4395 
•lô_‹_com∑˘
(
Node_off£t
 
node_off£t
)

4397 
Node_mëa
* 
	gmëa
;

4398 
	gmëa
 = 
off£t_to_node
(
node_off£t
);

4402  
	gmëa
->
	ggroup_size
 > mëa->
	gövÆid©ed_size
*2;

4420 #ifde‡
DOUBLE_LOG


4421 
Êush
(
Node_off£t
 
node_off£t
)

4423 
Node_mëa
* 
	gmëa
;

4424 
Node
* 
	gnode_d©a
;

4425 
	gmëa
 = 
off£t_to_node
(
node_off£t
);

4426 
	gnode_d©a
 = 
off£t_to_node_d©a
(
node_off£t
);

4427 i‡(
	gmëa
->
	g∑π
 =
PART_MAX
-1)

4429 
Node_off£t
 
°¨t_off£t
 = 
gë_°¨t_off£t
(
node_off£t
);

4430 i‡(
•lô_‹_com∑˘
(
°¨t_off£t
))

4433 i‡–
•lô
(
°¨t_off£t
) == -1)

4442 i‡–
com∑˘
(
°¨t_off£t
) == -1)

4449 
	gi
,
	gsize
;

4450 * 
	gkvp
;

4451 * 
	gbuf„r
;

4452 
uöt16_t
 
	gvl16
;

4454 
	gbuf„r
 = 
node_d©a
->
buf„r
+
mëa
->
size
;

4463 
uöt16_t
 
	gfú°_vl16
=0;

4469 
VÆueE¡ry
 
	gve
;

4470 
	gve
.
	gnode_off£t
 = 
node_off£t
;

4471 
	gi
=0;i<
	gmëa
->
	gÊush_˙t
;i++)

4476 
	gkvp
 = 
mëa
->
Êush_kv
[
i
];

4478 
	gvl16
 = *((
uöt16_t
*)
kvp
);

4479 i‡–(
	gvl16
 & 
	gINV_BIT
))

4485 
	gsize
 = 
LK_SIZE
+
vl16
;

4486 i‡(
	gfú°_vl16
)

4488 
mem˝y
(
buf„r
,
kvp
,
size
);

4492 
mem˝y
(
buf„r
+
PH_LEN_SIZE
 ,
kvp
+PH_LEN_SIZE ,
size
-PH_LEN_SIZE );

4493 
	gfú°_vl16
 = *((
uöt16_t
*)
kvp
);

4495 
	gve
.
	gkv_off£t
 = 
buf„r
-(*)
node_d©a
;

4496 
	gve
.
	gÀn
 = 
vl16
;

4497 
ö£π_poöt_íåy
((*)
kvp
+
PH_LEN_SIZE
 ,
ve
);

4498 
_mm_s„n˚
();

4499 *((
	guöt16_t
*)
	gkvp
Ë|
INV_BIT
;

4500 i‡(
	gsize
%2)

4501 
	gsize
++;

4502 
	gbuf„r
+=
size
;

4511 
	gbuf„r
[0] = 0;

4512 
	gbuf„r
[1] = 0;

4513 
pmem_≥rsi°
(
node_d©a
->
buf„r
+
mëa
->
size
,buf„r-“ode_d©a->buf„r+mëa->sizeË+ 
PH_LEN_SIZE
);

4516 
_mm_s„n˚
();

4519 
pmem_mem˝y
(
node_d©a
->
buf„r
+
mëa
->
size
,&
fú°_vl16
,
PH_LEN_SIZE
 ,
PMEM_F_MEM_NONTEMPORAL
);

4522 
_mm_s„n˚
();

4524 
	gmëa
->
	gsize
 = 
buf„r
-
node_d©a
->buffer;

4526 
	gmëa
->
	gÊush_˙t
 = 0;

4527 
	gmëa
->
	gÊush_size
 = 0;

4532 
Êush
(
Node_off£t
 
node_off£t
)

4556 
	g°d
::
©omic
<> 
•lô_queue_°¨t
[
SPLIT_NUM
];

4557 
	g°d
::
©omic
<> 
•lô_queue_íd
[
SPLIT_NUM
];

4558 
	g°d
::
©omic
<
Node_off£t
> 
•lô_queue
[
SPLIT_NUM
][
SPLIT_QUEUE_LEN
];

4559 
	g°d
::
©omic
<
uöt8_t
> 
•lô_queue_lock
[
SPLIT_NUM
];

4561 #ifde‡
idÀ_thªad


4563 
thªad_loˇl
 
PH_Thªad
* 
my_thªad
;

4564 
	#THREAD_RUN
 
my_thªad
->
ru¬ög
=1;

	)

4565 
	#THREAD_IDLE
 
my_thªad
->
ru¬ög
=0;

	)

4569 
	#THREAD_RUN


	)

4570 
	#THREAD_IDLE


	)

4574 #ifde‡
•lô_thªad


4575 * 
•lô_w‹k
(* 
iid
)

4577 
	gi
,
	gid
 = *((*)
iid
);

4578 
Node_off£t
 
	gnode_off£t
;

4580 
upd©e_‰ì_˙t
();

4583 
upd©e_‰ì_˙t
();

4584 
	g•lô_queue_°¨t
[
id
] < 
	g•lô_queue_íd
[id])

4586 
THREAD_RUN


4587 
upd©e_‰ì_˙t
();

4588 
	gi
 = 
•lô_queue_°¨t
[
id
].
„tch_add
(1);

4589 
	gnode_off£t
 = 
•lô_queue
[
id
][
i
%
SPLIT_QUEUE_LEN
];

4592 i‡(
åy_•lô
(
node_off£t
) == 0)

4595 i‡(
•lô_‹_com∑˘
(
node_off£t
))

4597 i‡(
•lô2p
(
node_off£t
) < 0)

4598 
dec_ªf
(
node_off£t
);

4602 i‡(
com∑˘2p
(
node_off£t
) < 0)

4603 
dec_ªf
(
node_off£t
);

4607 
	gTHREAD_IDLE


4609 
u¶ìp
(1);

4611 i‡(
	g•lô_queue_íd
[
id
] == -1)

4614 
˛ón_thªad_loˇl
();

4615  
	gNULL
;

4618 
thªad_loˇl
 
	g•lô_ödex
=0;

4619 
add_•lô
(
Node_off£t
 
node_off£t
)

4622 
	gj
;

4623 
	gj
=0;j<
	gnum_of_•lô
;j++)

4625 
	g•lô_ödex
++;

4626 i‡(
	g•lô_ödex
>=
num_of_•lô
)

4627 
•lô_ödex
 = 0;

4630 i‡(
	g•lô_queue_íd
[
•lô_ödex
] - 
	g•lô_queue_°¨t
[•lô_ödex] < 
	gSPLIT_MAX
 && 
åy_©_lock
(
•lô_queue_lock
[split_index]))

4634 
Node_mëa
* 
	gmëa
 = 
off£t_to_node
(
node_off£t
);

4635 
	gmëa
->
	g°©e
 = 2;

4636 
	g•lô_queue
[
•lô_ödex
][
•lô_queue_íd
[•lô_ödex]%
	gSPLIT_QUEUE_LEN
] = 
node_off£t
;

4637 
	g•lô_queue_íd
[
•lô_ödex
]++;

4638 
	g•lô_queue_lock
[
•lô_ödex
] = 0;

4639 
	g•lô_ödex
++;

4648 
öô_•lô
()

4650 
	gi
;

4651 
	gi
=0;i<
	gnum_of_•lô
;i++)

4652 
	g•lô_queue_lock
[
i
] = 
•lô_queue_°¨t
[i] = 
•lô_queue_íd
[i] = 0;

4655 
˛ón_•lô
()

4657 
	gi
;

4658 
	gi
=0;i<
	gnum_of_•lô
;i++)

4660 
¥ötf
("•lôÅhªad %d qê%d\n",
i
,()
•lô_queue_íd
[i]);

4661 
	g•lô_queue_íd
[
i
] = -1;

4666 
sˇn_node
(
Node_off£t
 
off£t
,* 
key
,
ªsu…_ªq
,
°d
::
°rög
* 
sˇn_ªsu…
)

4670 
uöt64_t
 
ãmp_key
[100*
PART_MAX
],
	gtk
;

4672 * 
	gãmp_off£t
[100*
PART_MAX
], *
	gto
;

4673 
	gtc
=0;

4675 
	g˙t
=0;

4676 
uöt64_t
 
	g°¨t_key
 = *(uöt64_t*)
key
;

4679 * 
	gbuf„r
;

4680 * 
	gbuf„r_íd
;

4682 
Node
* 
	gnode_d©a
;

4683 
Node_mëa
* 
	gnode_mëa
;

4694 
	g∑π0
=0;

4695 c⁄° 
	gmëa_size
 = 
d0
[0].
buf„r
-(*)&d0[0];

4697 
Node_off£t
 
	gnode_off£t
 = 
off£t
;

4718 
	gnode_off£t
 = 
off£t
;

4722 
	gnode_mëa
 = 
off£t_to_node
(
node_off£t
);

4723 
	gnode_d©a
 = 
off£t_to_node_d©a
(
node_off£t
);

4725 
˝256
((*)&
d0
[
∑π0
],(*)
node_d©a
,
node_mëa
->
size
 + 
mëa_size
);

4728 
	g∑π0
++;

4732 
	gnode_off£t
 = 
node_mëa
->
√xt_off£t_ig
;

4733 i‡(
	gnode_off£t
 =
INIT_OFFSET
)

4745 
	gi
,
	gj
,
	gk
;

4746 
uöt16_t
 
	gsize
;

4749 
	gnode_off£t
 = 
off£t
;

4751 
	gi
 = 0;

4755 
	gnode_mëa
 = 
off£t_to_node
(
node_off£t
);

4756 
	gnode_d©a
 = &
d0
[
i
];

4757 
	gbuf„r
 = 
node_d©a
->
buf„r
;

4758 
	gbuf„r_íd
 = 
buf„r
 + 
node_mëa
->
size
;

4759 
s‹t_öv
(
node_mëa
->
öv_˙t
,node_mëa->
öv_kv
);

4760 
	gj
 = 0;

4761 
	gnode_mëa
->
	göv_kv
[
node_mëa
->
öv_˙t
] = 0;

4763 
	gbuf„r
 < 
	gbuf„r_íd
)

4765 
	gsize
 = *((
uöt16_t
*)
buf„r
);

4766 i‡(((*)
	gnode_d©a
 + 
	gnode_mëa
->
	göv_kv
[
j
] =
buf„r
) )

4768 
j
++;

4769 
	gsize
&~(
INV_BIT
);

4773 
	gãmp_key
[
tc
] = *((
uöt64_t
*)(
buf„r
+
PH_LEN_SIZE
));

4775 
	gãmp_off£t
[
tc
] = 
buf„r
;

4776 
	gtc
++;

4778 
	gbuf„r
+=
size
+
LK_SIZE
;

4788 
	gnode_off£t
 = 
node_mëa
->
√xt_off£t_ig
;

4789 i‡(
	gnode_off£t
 =
INIT_OFFSET
)

4791 
	gi
++;

4796 
	gj
=0;j<
	gtc
;j++)

4798 
	gk
=
j
+1;k<
	gtc
;k++)

4800 i‡(
	gãmp_key
[
j
] >Åemp_key[
k
])

4802 
	gtk
 = 
ãmp_key
[
j
];

4803 
	gãmp_key
[
j
] = 
ãmp_key
[
k
];

4804 
	gãmp_key
[
k
] = 
tk
;

4805 
	gto
 = 
ãmp_off£t
[
j
];

4806 
	gãmp_off£t
[
j
] = 
ãmp_off£t
[
k
];

4807 
	gãmp_off£t
[
k
] = 
to
;

4812 
	gi
=0;i<
	gtc
;i++)

4814 i‡(
	g°¨t_key
 > 
	gãmp_key
[
i
])

4816 
	gsˇn_ªsu…
[
˙t
].
assign
((*)(
ãmp_off£t
[
i
]),*(
uöt16_t
*Èemp_off£t[i] + 
LK_SIZE
);

4817 
	g˙t
++;

4818 i‡(
	gªsu…_ªq
 <
˙t
)

4823  
	g˙t
;

	@data.h

3 
	~<±hªad.h
>

4 
	~<©omic
>

5 
	~<sys/mm™.h
>

7 
	~"globÆ.h
"

8 
	~"quîy.h
"

10 
«me•a˚
 
	gPH


13 vﬁ©ûê
fûe_num
;

15 
	sNode


29 
Node_off£t
 
	g√xt_off£t
;

31 
Node_off£t
 
	g√xt_off£t_ig
;

34 
uöt16_t
 
	gc⁄töue_Àn
;

35 
	g∑ddög
[8-2];

37 
	gbuf„r
[
NODE_BUFFER
];

42 
	sNode_mëa


49 vﬁ©ûê
uöt32_t
 
	g√xt_off£t
;

51 
Node_off£t
 
	g√xt_off£t_ig
;

53 vﬁ©ûê
uöt32_t
 
	g¥ev_off£t
;

55 
Node_off£t
 
	g°¨t_off£t
;

56  
Node_off£t
 
	gíd_off£t
;

58 
	g°d
::
©omic
<
uöt8_t
> 
°©e
;

59 
uöt8_t
 
	g∑π
;

61 
uöt16_t
 
	gc⁄töue_Àn
;

69  
uöt16_t
 
	gsize
;

70 
uöt16_t
 
	gövÆid©ed_size
;

71 
uöt16_t
 
	ggroup_size
;

89 
Sˇn_li°
* 
	gsˇn_li°
;

93 
uöt16_t
* 
	göv_kv
;

94 
uöt16_t
 
	göv_˙t
;

95 
uöt16_t
 
	göv_max
;

97 #ifde‡
DOUBLE_LOG


98 
uöt16_t
 
	gÊush_size
;

100 
uöt16_t
 
	gÊush_˙t
;

101 
uöt16_t
 
	gÊush_max
;

102 ** 
	gÊush_kv
;

104 
	g∑ddög
[8];

108 ** 
mëa_addr
;

109 
Node_mëa
** 
mëa_¨øy
;

110 ** 
pmem_addr
;

111 
Node
** 
node_d©a_¨øy
;

113 
	#FILE_SIZE
 (
Node
)*(1<<16)

	)

114 
	#META_SIZE
 (
Node_mëa
)*(1<<16)

	)

115 
	#MAX_FILE_NUM
 (1 << 16)

	)

116 
	#MAX_OFFSET
 (1 << 16)

	)

118 
öô_fûe
();

119 
öô_d©a
();

120 
˛ón_d©a
();

141 
ölöe
 
Node_mëa
* 
off£t_to_node
(
Node_off£t
 &
off£t
)

143  &
	gmëa_¨øy
[
off£t
.
fûe
][offset.offset];

147 
ölöe
 
Node
* 
off£t_to_node_d©a
(
Node_off£t
 &
off£t
)

149  (
	gNode
*)(
	gpmem_addr
[
off£t
.
fûe
] + (NodeË* 
	goff£t
.offset);

172 
dñëe_kv
(* 
kv_p
);

174 * 
ö£π_kv
(
Node_off£t
& 
off£t
,* 
key
,* 
vÆue
,
vÆue_Àngth
);

175 
•lô
(
Node_off£t
 
off£t
);

176 
•lô2p
(
Node_off£t
 
off£t
);

179 
com∑˘
(
Node_off£t
 
off£t
);

180 
com∑˘2p
(
Node_off£t
 
off£t
);

182 
Êush
(
Node_off£t
 
off£t
);

183 
Node_off£t
 
≠≥nd_node
(Node_off£t& 
off£t
);

186 
¥öt_kv
(* 
kv_p
);

190 
adv™˚_off£t
(
Quîy
 *
quîy
);

194 
c›y_™d_s‹t_node
(
Quîy
 *
quîy
);

195 
ö£π_sˇn_li°
(
Node_off£t
 &
node
,* 
quîy
);

196 
dñëe_sˇn_íåy
(
Node_off£t
 &
sˇn_off£t
,* 
quîy
);

198 
©_lock
(
°d
::
©omic
<
uöt8_t
> &
lock
);

199 
ölöe
 
©_u∆ock
(
°d
::
©omic
<
uöt8_t
> &
lock
)

201 
lock
 = 0;

203 
ölöe
 
åy_©_lock
(
°d
::
©omic
<
uöt8_t
> &
lock
)

205 
uöt8_t
 
z
 = 0;

206  
	glock
.
com∑ª_exch™ge_°r⁄g
(
z
,1);

210 
övÆid©e_kv
(
VÆueE¡ry
& 
ve
);

211 
•lô_‹_com∑˘
(
Node_off£t
 
node_off£t
);

212 
ölöe
 
gë_c⁄töue_Àn
(
Node_off£t
 
node_off£t
)

214  
off£t_to_node
(
node_off£t
)->
	gc⁄töue_Àn
;

217 
ölöe
 
Node_off£t
 
gë_°¨t_off£t
(Node_off£t& 
node_off£t
)

219  
off£t_to_node
(
node_off£t
)->
	g°¨t_off£t
;

221 
ölöe
 
move_to_íd_off£t
(
Node_off£t
& 
node_off£t
)

223 
	gnode_off£t
 = 
off£t_to_node
(
node_off£t
)->
íd_off£t
;

226 
ölöe
 
öc_ªf
(
Node_off£t
 
off£t
)

228  
åy_©_lock
(
off£t_to_node
(
off£t
)->
°©e
);

230 
ölöe
 
dec_ªf
(
Node_off£t
 
off£t
)

232 
©_u∆ock
(
off£t_to_node
(
off£t
)->
°©e
);

237 #ifde‡
•lô_thªad


238 
ölöe
 
åy_•lô
(
Node_off£t
 
off£t
)

240 
uöt8_t
 
	gt
=2;

241 
Node_mëa
* 
	gmëa
 = 
off£t_to_node
(
off£t
);

242  (
	gmëa
->
	g°©e
 =2Ë&& 
mëa
->
°©e
.
com∑ª_exch™ge_°r⁄g
(
t
,1);

244 * 
•lô_w‹k
(* 
id
);

245 
add_•lô
(
Node_off£t
 
node_off£t
);

246 
ölöe
 
√ed_•lô
(
Node_off£t
 
node_off£t
,
vÆue_Àn
)

248 
Node_mëa
* 
	gmëa
 = 
off£t_to_node
(
node_off£t
);

249  (
	gmëa
->
	g∑π
 =
PART_MAX
-1);

252 
öô_•lô
();

253 
˛ón_•lô
();

256 
sˇn_node
(
Node_off£t
 
off£t
,* 
key
,
ªsu…_ªq
,
°d
::
°rög
* 
sˇn_ªsu…
);

258 
öô_d©a_loˇl
();

259 
˛ón_thªad_loˇl
();

	@data2.cpp

1 
	~<°dio.h
>

2 
	~<sys/mm™.h
>

3 
	~<°dlib.h
>

4 
	~<x86öåö.h
>

5 
	~<libpmem.h
>

6 
	~<°rög.h
>

8 
	~"lock.h
"

9 
	~"d©a2.h
"

10 
	~"globÆ2.h
"

12 
«me•a˚
 
	gPH


15 
size_t
 
	gNODE_SLOT_MAX
;

17 
NodeAŒoˇt‹
* 
	gnodeAŒoˇt‹
;

19 
num_pmem
;

21 
	gNodeAŒoˇt‹
::
lökNext
(
NodeAddr
 
nodeAddr
)

23 
NodeMëa
* 
nm
 = 
nodeAddr_to_nodeMëa
(
nodeAddr
);

24 
Node
* 
	gpmem_node
 = 
nodeAddr_to_node
(
nodeAddr
);

25 
mem£t
(
pmem_node
,0,
NODE_SIZE
);

26 
¥ötf
("efefe\n");

27 
	gpmem_node
->
	g√xt_off£t
 = 
nm
->
√xt_p
->
my_off£t
;

28 
pmem_≥rsi°
(&
pmem_node
->
√xt_off£t
,(
NodeAddr
));

29 
_mm_s„n˚
();

30 
¥ötf
("xxxxx\n");

35 
	gNodeAŒoˇt‹
::
lökNext
(
NodeMëa
* 
nm1
,NodeMëa* 
nm2
)

37 
	gnm1
->
	g√xt_p
 = 
nm2
;

38 
D©aNode
* 
	gpmem_node
 = 
nodeAddr_to_node
(
nm1
->
my_off£t
);

39 
mem£t
(
pmem_node
,0,
NODE_SIZE
);

40 
	gpmem_node
->
	g√xt_off£t
 = 
nm2
->
my_off£t
;

41 
pmem_≥rsi°
(&
pmem_node
->
√xt_off£t
,(
NodeAddr
));

42 
_mm_s„n˚
();

46 
	gNodeAŒoˇt‹
::
öô
()

49 
NODE_SLOT_MAX
 = 
NODE_BUFFER_SIZE
 / 
ENTRY_SIZE
;

51 
	gnodeMëaPoﬁLi°
 = (**)
mÆloc
((*)*
POOL_MAX
);

52 
	gnodePoﬁLi°
 = (**)
mÆloc
((*)*
POOL_MAX
);

54 
	gpoﬁ_˙t
 = 0;

55 
	gnode_˙t
 = (*)
mÆloc
(()*
POOL_MAX
);

57 
	g‰ì_hód_p
 = 
NULL
;

58 
	gÆloc_˙t
 = 0;

63 
Æloc_poﬁ
();

72 
	gNodeAŒoˇt‹
::
˛ón
()

74 
i
;

75 
	gi
=0;i<
	gpoﬁ_˙t
;i++)

77 
munm≠
(
nodeMëaPoﬁLi°
[
i
],(
NodeMëa
)*
POOL_NODE_MAX
);

78 
pmem_unm≠
(
nodePoﬁLi°
[
i
],
POOL_SIZE
);

80 
‰ì
(
nodeMëaPoﬁLi°
);

81 
‰ì
(
nodePoﬁLi°
);

84 
	gNodeAŒoˇt‹
::
Æloc_poﬁ
()

86 i‡(
poﬁ_˙t
 + 
num_pmem
 > 
POOL_MAX
)

87 
¥ötf
("allocÖool max\n");

88 
	gi
;

89 
	gis_pmem
;

90 
	g∑th
[100];

91 
size_t
 
	gªq_size
,
	gmy_size
;

92 
	gªq_size
 = 
POOL_SIZE
;

93 
	gi
=0;i<
	gnum_pmem
;i++)

95 
•rötf
(
∑th
,"/m¡/pmem%d/d©a%d",
i
+1,
poﬁ_˙t
+i);

96 
	gnodeMëaPoﬁLi°
[
poﬁ_˙t
 + 
i
] = (*)
mm≠
(
NULL
,(
NodeMëa
)*
POOL_NODE_MAX
,
PROT_READ
|
PROT_WRITE
,
MAP_PRIVATE
|
MAP_ANONYMOUS
|
MAP_POPULATE
,-1,0);

97 i‡(!
	gnodeMëaPoﬁLi°
[
poﬁ_˙t
 + 
i
])

98 
¥ötf
("alloc_poolÉrror1----------------------------------------------\n");

99 
	gnodePoﬁLi°
[
poﬁ_˙t
 + 
i
] = (*)
pmem_m≠_fûe
(
∑th
,
POOL_SIZE
,
PMEM_FILE_CREATE
,0777,&
my_size
,&
is_pmem
);

100 i‡(!
	gnodePoﬁLi°
[
poﬁ_˙t
 +
i
])

101 
¥ötf
("alloc_poolÉrror2----------------------------------------------\n");

103 i‡(
	gis_pmem
 == 0)

104 
¥ötf
("isÇotÖmem\n");

105 i‡(
	gmy_size
 !
ªq_size
)

106 
¥ötf
("my size isÇotÑeq size\n");

108 
	gpoﬁ_˙t
 +
num_pmem
;

112 
NodeAddr
 
	gNodeAŒoˇt‹
::
Æloc_node
()

114 
©_lock2
(
lock
);

115 
NodeMëa
 *
	gnm
;

116 i‡(
	g‰ì_hód_p
)

118 
	gnm
 = (
NodeMëa
*)
‰ì_hód_p
;

119 
	g‰ì_hód_p
 = 
‰ì_hód_p
->
√xt_p
;

120 
©_u∆ock2
(
lock
);

124 i‡(
	gnode_˙t
[
poﬁ_˙t
 - 
num_pmem
 + 
Æloc_˙t
 %Çum_pmem] >
POOL_NODE_MAX
)

125 
Æloc_poﬁ
();

127 
size_t
 
	gpoﬁ_num
 = 
poﬁ_˙t
 - 
num_pmem
 + 
Æloc_˙t
 %Çum_pmem;

129 
	gnm
 = (
NodeMëa
*)(
nodeMëaPoﬁLi°
[
poﬁ_num
]+(NodeMëa)*
node_˙t
[pool_num]);

130 
	gnm
->
	gmy_off£t
.
	gpoﬁ_num
 = 
poﬁ_num
;

131 
	gnm
->
	gmy_off£t
.
	gnode_off£t
 = 
node_˙t
[
poﬁ_num
];

132 ++
	gnode_˙t
[
poﬁ_num
];

133 ++
	gÆloc_˙t
;

134 
©_u∆ock2
(
lock
);

138 
	gnm
->
	gwrôãn_size
 = 0;

139 
	gnm
->
	g¶Ÿ_˙t
 = 0;

145 
	gnm
->
	gvÆid
.
ªsize
(
NODE_SLOT_MAX
);

146 
	gnm
->
	gvÆid_˙t
 = 0;

148  
	gnm
->
	gmy_off£t
;

151 
	gNodeAŒoˇt‹
::
‰ì_node
(
NodeMëa
* 
nm
)

153 
©_lock2
(
lock
);

154 
	gnm
->
	g√xt_p
 = 
‰ì_hód_p
;

155 
	g‰ì_hód_p
 = 
nm
;

156 
©_u∆ock2
(
lock
);

159 
uöt64_t
 
föd_hÆf_ö_node
(
NodeMëa
* 
nm
,
D©aNode
* 
node
)

161 
	gi
,
	gj
;

162 
uöt64_t
 
	gkeys
[
NODE_SLOT_MAX
];

163 
uöt64_t
 
	g√w_key
;

164 
	g˙t
 = 0;

165 
size_t
 
	goff£t
 = (
NodeAddr
);

166 * 
	gaddr
 = (*)
node
;

168 
	gi
=0;i<
	gNODE_SLOT_MAX
;i++)

170 i‡(
	gnm
->
	gvÆid
[
i
] =
Ál£
)

172 
	g√w_key
 = *(
uöt64_t
*)(
addr
+
off£t
+
HEADER_SIZE
);

173 
	goff£t
+=
ENTRY_SIZE
;

174 
	gj
=
˙t
;j>0;j--)

176 i‡(
	g√w_key
 < 
	gkeys
[
j
-1])

177 
	gkeys
[
j
] = 
keys
[j-1];

181 
	gkeys
[
j
] = 
√w_key
;

182 
	g˙t
++;

186  
	gkeys
[
˙t
/2];

	@data2.h

1 
	~<c°döt
>

2 
	~<©omic
>

3 
	~<ve˘‹
>

5 
	~"sh¨ed.h
"

8 
«me•a˚
 
	gPH


11 
size_t
 
NODE_SLOT_MAX
;

25 c⁄° 
size_t
 
	gHEADER_SIZE
 = 8;

26 c⁄° 
size_t
 
	gKEY_SIZE
 = 8;

30 c⁄° 
size_t
 
	gVER_DRAM_VALID
 = (size_t(1)<<63);

31 c⁄° 
size_t
 
	gVER_DELETE
 = (size_t(1)<<62);

32 c⁄° 
size_t
 
	gVER_CL_LOC1
 = (size_t(1)<<61);

33 c⁄° 
size_t
 
	gVER_CL_LOC2
 = (size_t(1)<<60);

34 c⁄° 
size_t
 
	gVER_PL_LOC1
 = (size_t(1)<<59);

35 c⁄° 
size_t
 
	gVER_PL_LOC2
 = (size_t(1)<<58);

37 c⁄° 
size_t
 
	gVER_LOC_MASK
 = (
VER_CL_LOC1
+
VER_CL_LOC2
+
VER_PL_LOC1
+
VER_PL_LOC2
);

38 c⁄° 
size_t
 
	gVER_LOC_INV_MASK
 = ~
VER_LOC_MASK
;

39 c⁄° 
size_t
 
	gVER_CL_MASK
 = (
VER_CL_LOC1
+
VER_CL_LOC2
);

41 c⁄° 
size_t
 
	gVER_NUM_MASK
 = (size_t(1)<<58)-1;

64 
boﬁ
 
ölöe
 
is_loc_hŸ
(
uöt64_t
 
vîsi⁄
)

66  (((
	gvîsi⁄
 & 
	gVER_CL_LOC1
Ë=0Ë&& (
vîsi⁄
 & 
VER_CL_LOC2
));

69 
ölöe
 
ªmove_loc_mask
(
uöt64_t
 &
vîsi⁄
)

71 
	gvîsi⁄
 &
VER_LOC_INV_MASK
;

74 
uöt64_t
 
ölöe
 
£t_loc_hŸ
(uöt64_à
vîsi⁄
)

76 
	gvîsi⁄
 &
VER_LOC_INV_MASK
;

77 
	gvîsi⁄
 |
VER_CL_LOC2
;

78  
	gvîsi⁄
;

80 
uöt64_t
 
ölöe
 
£t_loc_cﬁd
(uöt64_à
vîsi⁄
)

82 
	gvîsi⁄
 &
VER_LOC_INV_MASK
;

83 
	gvîsi⁄
 |
VER_CL_LOC1
 | 
VER_CL_LOC2
;

84  
	gvîsi⁄
;

86 
uöt64_t
 
ölöe
 
£t_loc_w¨m
(uöt64_à
vîsi⁄
)

88 
	gvîsi⁄
 &
VER_LOC_INV_MASK
;

89 
	gvîsi⁄
 |
VER_CL_LOC1
;

90  
	gvîsi⁄
;

95 
ölöe
 
£t_¥ev_loc
(
uöt64_t
 &
d°_vîsi⁄
,uöt64_à&
§c_vîsi⁄
)

97 
	gd°_vîsi⁄
 |((
§c_vîsi⁄
&
VER_CL_MASK
) >> 2);

99 
ölöe
 
£t_vÆid
(
uöt64_t
 &
vîsi⁄
)

101 
	gvîsi⁄
 |
VER_DRAM_VALID
;

103 
ölöe
 
£t_övÆid
(
uöt64_t
 &
vîsi⁄
)

105 
	gvîsi⁄
 &(~
VER_DRAM_VALID
);

107 
ölöe
 
£t_övÆid
(
uöt64_t
 *
vîsi⁄
)

109 *
	gvîsi⁄
 &(~
VER_DRAM_VALID
);

111 
boﬁ
 
ölöe
 
is_vÆid
(
uöt64_t
 &
vîsi⁄
)

113  
	gvîsi⁄
 & 
	gVER_DRAM_VALID
;

115 
boﬁ
 
ölöe
 
is_vÆid
(
uöt64_t
 *
vîsi⁄
)

117  *
	gvîsi⁄
 & 
	gVER_DRAM_VALID
;

121 
	sBa£LogE¡ry


123 
uöt64_t
 
	ghódî
;

124 
uöt64_t
 
	gkey
;

125 
	gvÆue
[
VALUE_SIZE
];

126 
	g∑d
[4];

140 c⁄° 
size_t
 
	gPOOL_MAX
 = 1024;

141 c⁄° 
size_t
 
	gPOOL_SIZE
 = 1024*1024*1024;

142 c⁄° 
size_t
 
	gPOOL_NODE_MAX
 = 
POOL_SIZE
/
NODE_SIZE
;

146 
	sNodeMëa


150 
NodeMëa
* 
	g√xt_p
;

151 
size_t
 
	gwrôãn_size
;

156 
NodeAddr
 
	gmy_off£t
;

159 
	g°d
::
ve˘‹
<
boﬁ
> 
vÆid
;

160 
	g¶Ÿ_˙t
;

162 
	gvÆid_˙t
;

168 
uöt64_t
 
föd_hÆf_ö_node
(
NodeMëa
* 
nm
,
D©aNode
* 
node
);

175 ˛as†
	cNodeAŒoˇt‹


177 
	gpublic
:

178 
öô
();

179 
˛ón
();

183 
NodeAddr
 
Æloc_node
();

184 
‰ì_node
(
NodeMëa
* 
nm
);

187 
	gpublic
:

190 
lökNext
(
NodeMëa
* 
nm1
,NodeMëa* 
nm2
);

193 
Æloc_poﬁ
();

195 ** 
	gnodeMëaPoﬁLi°
;

196 ** 
	gnodePoﬁLi°
;

202 
	gpoﬁ_˙t
;

203 * 
	gnode_˙t
;

211 
NodeMëa
* 
	g‰ì_hód_p
;

214 
	g°d
::
©omic
<
uöt8_t
> 
lock
=0;

216 
size_t
 
	gÆloc_˙t
;

220 
NodeAŒoˇt‹
* 
nodeAŒoˇt‹
;

222 
ölöe
 
D©aNode
* 
	$nodeAddr_to_node
(
NodeAddr
 
nodeAddr
)

224  (
D©aNode
*)(
nodeAŒoˇt‹
->
nodePoﬁLi°
[
nodeAddr
.
poﬁ_num
] +ÇodeAddr.
node_off£t
*(DataNode));

225 
	}
}

226 
ölöe
 
NodeMëa
* 
	$nodeAddr_to_nodeMëa
(
NodeAddr
 
nodeAddr
)

228  (
NodeMëa
*)(
nodeAŒoˇt‹
->
nodeMëaPoﬁLi°
[
nodeAddr
.
poﬁ_num
] +ÇodeAddr.
node_off£t
*(NodeMeta));

229 
	}
}

	@global.cpp

1 
	~<°rög.h
>

3 
	~"globÆ.h
"

6 
	~"d©a.h
"

7 
	~"thªad.h
"

8 
	~"hash.h
"

12 
«me•a˚
 
	gPH


15 
	gnum_thªad
;

16 
	gnum_pmem
;

17 
	gnum_log
;

22 
	gnum_of_•lô
;

27 
	gpoöt_hash_èbÀ_size
;

28 * 
	gønge_hash_èbÀ_size
;

31 
	gnode_size
;

33 
	gkey_size
;

34 
	gÀn_size
;

35 
	gvÆue_size
;

36 
	gíåy_size
;

37 
	gkey_bô
;

41 
uöt64_t
 
	gpmem_size
;

42 
	gpmem_fûe
[100];

45 
	gem±y
[10];

46 
	gem±y_Àn
;

48 
˛ón
()

50 
¥ötf
("clean\n");

51 
˛ón_hash
();

52 
˛ón_thªad
();

53 
˛ón_d©a
();

55 
ãmp_°©ic_c⁄f
(
ä
, 
ks
,
vs
)

57 #ifde‡
•lô_thªad


58 
	gnum_of_•lô
 = 
SPLIT_NUM
;

60 
	gnum_of_•lô
 = 0;

65 
	gä
 = 24;

67 
	gnum_of_thªad
 = 
ä
 + 
num_of_•lô
;

75 
	gÀn_size
 = 2;

77 
	gkey_size
 = 
ks
;

78 
	gvÆue_size
 = 
vs
;

79 
	gíåy_size
 = 
key_size
 + 
Àn_size
 + 
vÆue_size
;

80 
	gkey_bô
 = 
ks
 * 8;

82 
	gpoöt_hash_èbÀ_size
 = 10*1000*1000;

85 
	gpmem_size
 = (
uöt64_t
)1024*1024*1024*80;

95 
	gem±y_Àn
 = 
°æí
("empty");

96 
mem˝y
(
em±y
,"em±y",
em±y_Àn
);

97 
	gem±y
[
em±y_Àn
] = 0;

99 
mem˝y
(
pmem_fûe
,"/m¡/pmem0/",
°æí
("/mnt/pmem0/"));

100 
	gpmem_fûe
[
°æí
("/mnt/pmem0/")] = 0;

102 
öô_fûe
();

103 
öô_log
();

105 
öô_thªad
();

106 
öô_hash
();

107 
öô_d©a
();

	@global.h

1 #¥agm®
⁄˚


5 
	~<°döt.h
>

21 
	#VALUE_SIZE
 100

	)

23 
«me•a˚
 
	gPH


26 
num_of_thªad
;

31 
num_of_•lô
;

34 
	#USE_DRAM
 0

	)

38 
poöt_hash_èbÀ_size
;

39 * 
ønge_hash_èbÀ_size
;

41 
	#PH_KEY_SIZE
 8

	)

42 
	#PH_LEN_SIZE
 2

	)

43 
	#LK_SIZE
 
PH_KEY_SIZE
+
PH_LEN_SIZE


	)

47 
vÆue_size
;

48 
íåy_size
;

49 
key_bô
;

60 
uöt64_t
 
pmem_size
;

61 
pmem_fûe
[100];

64 
em±y
[10];

65 
em±y_Àn
;

67 
ãmp_°©ic_c⁄f
(
ä
,
ks
,
vs
);

68 
˛ón
();

	@global2.cpp

1 
	~<°dio.h
>

3 
	~"globÆ2.h
"

4 
	~"log.h
"

5 
	~"thªad2.h
"

6 
	~"c˚h.h
"

7 
	~"lock.h
"

8 
	~"skùli°.h
"

9 
	~"d©a2.h
"

11 
«me•a˚
 
	gPH


14 
size_t
 
HARD_EVICT_SPACE
;

15 
size_t
 
SOFT_EVICT_SPACE
;

17 
PH_Quîy_Thªad
 
quîy_thªad_li°
[
QUERY_THREAD_MAX
];

18 
PH_Evi˘_Thªad
 
evi˘_thªad_li°
[
EVICT_THREAD_MAX
];

20 
Skùli°
* 
skùli°
;

21 
PH_Li°
* 
li°
;

23 
NodeAŒoˇt‹
* 
nodeAŒoˇt‹
;

25 
thªad_loˇl
 
PH_Quîy_Thªad
* 
	gmy_quîy_thªad
 = 
NULL
;

26 
thªad_loˇl
 
PH_Evi˘_Thªad
* 
	gmy_evi˘_thªad
 = 
NULL
;

27 
thªad_loˇl
 
PH_Thªad
* 
	gmy_thªad
;

29 
size_t
 
	gVALUE_SIZE
;

30 
size_t
 
	gKEY_RANGE
;

32 
size_t
 
	gENTRY_SIZE
;

33 
size_t
 
	gTOTAL_DATA_SIZE
;

38 
	gnum_thªad
;

39 
	gnum_pmem
;

40 
	gnum_log
;

41 
	gnum_quîy_thªad
;

42 
	gnum_evi˘_thªad
;

44 
	gPH_I¡îÁ˚
::
√w_quîy_thªad
()

46 i‡(
my_quîy_thªad
)

47 
¥ötf
("new queryÅhreadÉrror\n");

48 
	gi
;

49 
	gi
=0;i<
	gQUERY_THREAD_MAX
;i++)

51 
	gquîy_thªad_li°
[
i
].
	glock
 == 0)

53 i‡(
åy_©_lock2
(
quîy_thªad_li°
[
i
].
lock
))

54 
my_quîy_thªad
 = &
quîy_thªad_li°
[
i
];

56 i‡(
	gmy_quîy_thªad
)

62 
	gmy_quîy_thªad
->
öô
();

63 
	gmy_thªad
 = 
my_quîy_thªad
;

65 
	gPH_I¡îÁ˚
::
˛ón_quîy_thªad
()

67 
my_quîy_thªad
->
˛ón
();

69 
©_u∆ock2
(
my_quîy_thªad
->
lock
);

70 
	gmy_quîy_thªad
 = 
NULL
;

71 
	gmy_thªad
 = 
NULL
;

74 
	gPH_I¡îÁ˚
::
√w_evi˘_thªad
()

76 i‡(
my_evi˘_thªad
)

77 
¥ötf
("newÉvictÅhreadÉrror\n");

78 
	gi
;

79 
	gi
=0;i<
	gEVICT_THREAD_MAX
;i++)

81 
	gevi˘_thªad_li°
[
i
].
	glock
 == 0)

83 i‡(
åy_©_lock2
(
evi˘_thªad_li°
[
i
].
lock
))

84 
my_evi˘_thªad
 = &
evi˘_thªad_li°
[
i
];

86 i‡(
	gmy_evi˘_thªad
)

90 
	gmy_evi˘_thªad
->
öô
();

91 
	gmy_thªad
 = 
my_evi˘_thªad
;

94 
	gPH_I¡îÁ˚
::
˛ón_evi˘_thªad
()

96 
my_evi˘_thªad
->
˛ón
();

98 
©_u∆ock2
(
my_evi˘_thªad
->
lock
);

99 
	gmy_evi˘_thªad
=
NULL
;

100 
	gmy_thªad
 = 
NULL
;

103 
	gPH_I¡îÁ˚
::
globÆ_öô
(
size_t
 
VS
,size_à
KR
,
n_t
,
n_p
,
n_e
)

105 
¥ötf
("global init\n");

107 
	gVALUE_SIZE
 = 
VS
;

108 
	gKEY_RANGE
 = 
KR
;

109 
	gENTRY_SIZE
 = 8 + 8 + 
VS
;

110 
	gTOTAL_DATA_SIZE
 = 
ENTRY_SIZE
*
KEY_RANGE
;

112 
	gnum_quîy_thªad
 = 
n_t
;

113 
	gnum_pmem
 = 
n_p
;

114 
	gnum_log
 = (
n_t
-1)/
n_p
+1;

115 
	gnum_evi˘_thªad
 = 
n_e
;

116 
	gnum_thªad
 = 
num_quîy_thªad
 + 
num_evi˘_thªad
;

119 
öô_log
(
num_pmem
,
num_log
);

121 
öô_c˚h
();

123 
	gnodeAŒoˇt‹
 = 
√w
 
NodeAŒoˇt‹
;

124 
	gnodeAŒoˇt‹
->
öô
();

133 
	gli°
 = 
√w
 
PH_Li°
;

134 
	gli°
->
öô
();

135 
	gskùli°
 = 
√w
 
Skùli°
;

136 
	gskùli°
->
öô
();

138 
¥ötf
("global initÉnd\n");

141 
	gPH_I¡îÁ˚
::
exô_thªads
()

143 
i
;

144 
	gi
=0;i<
	gnum_quîy_thªad
;i++)

146 i‡(
	gquîy_thªad_li°
[
i
].
	glock
 == 0)

148 
	gquîy_thªad_li°
[
i
].
	gexô
 = 1;

150 
	gi
=0;i<
	gnum_evi˘_thªad
;i++)

152 i‡(
	gevi˘_thªad_li°
[
i
].
	glock
 == 0)

154 
	gevi˘_thªad_li°
[
i
].
	gexô
 = 1;

159 
	gi
=0;i<
	gnum_evi˘_thªad
;i++)

161 i‡(
	gevi˘_thªad_li°
[
i
].
	gexô
)

163 
±hªad_joö
(
evi˘_±hªads
[
i
],
NULL
);

164 
	gevi˘_thªad_li°
[
i
].
	gexô
 = 0;

169 
	gPH_I¡îÁ˚
::
globÆ_˛ón
()

171 
¥ötf
("global clean\n");

173 
exô_thªads
();

174 
¥ötf
("cc\n");

175 
	gskùli°
->
˛ón
();

176 
dñëe
 
	gskùli°
;

177 
	gli°
->
˛ón
();

178 
dñëe
 
	gli°
;

179 
¥ötf
("ccc\n");

180 
	gnodeAŒoˇt‹
->
˛ón
();

182 
˛ón_c˚h
();

183 
˛ón_log
();

186 
	gPH_I¡îÁ˚
::
ö£π_›
(
uöt64_t
 
key
,* 
vÆue
)

188 i‡(
	gmy_quîy_thªad
 =
NULL
)

189 
√w_quîy_thªad
();

190  
	gmy_quîy_thªad
->
ö£π_›
(
key
,
vÆue
);

192 
	gPH_I¡îÁ˚
::
ªad_›
(
uöt64_t
 
key
,* 
buf
)

194 i‡(
	gmy_quîy_thªad
 =
NULL
)

195 
√w_quîy_thªad
();

196  
	gmy_quîy_thªad
->
ªad_›
(
key
,
buf
);

198 
	gPH_I¡îÁ˚
::
dñëe_›
(
uöt64_t
 
key
)

200 i‡(
my_quîy_thªad
 =
NULL
)

201 
√w_quîy_thªad
();

202  
	gmy_quîy_thªad
->
dñëe_›
(
key
);

204 
	gPH_I¡îÁ˚
::
sˇn_›
(
uöt64_t
 
°¨t_key
,uöt64_à
íd_key
)

206 i‡(
	gmy_quîy_thªad
 =
NULL
)

207 
√w_quîy_thªad
();

208  
	gmy_quîy_thªad
->
sˇn_›
(
°¨t_key
,
íd_key
);

210 
	gPH_I¡îÁ˚
::
√xt_›
(* 
buf
)

212 i‡(
my_quîy_thªad
 =
NULL
)

213 
√w_quîy_thªad
();

214  
	gmy_quîy_thªad
->
√xt_›
(
buf
);

217 
	gPH_I¡îÁ˚
::
íd_›
()

219 i‡(
my_quîy_thªad
)

220 
my_quîy_thªad
->
˛ón
();

224 
	gPH_I¡îÁ˚
::
run_evi˘_dúe˘
()

226 i‡(
my_evi˘_thªad
 =
NULL
)

227 
√w_evi˘_thªad
();

228 
	gmy_evi˘_thªad
->
evi˘_lo›
();

229 
˛ón_evi˘_thªad
();

233 *
run_evi˘
(* 
p
)

235 
PH_I¡îÁ˚
* 
	gphi
 = (PH_I¡îÁ˚*)
p
;

236 
	gphi
->
run_evi˘_dúe˘
();

237  
	gNULL
;

240 
	gPH_I¡îÁ˚
::
run_evi˘_thªad
()

242 
¥ötf
("runÉvictÅhread\n");

243 
	gi
;

244 
	gi
=0;i<
	gnum_evi˘_thªad
;i++)

246 
±hªad_¸óã
(&
evi˘_±hªads
[
i
],
NULL
,
run_evi˘
,
this
);

	@global2.h

2 #i‚de‡
GLOBAL2


3 
	#GLOBAL2


	)

5 
	~<c°döt
>

6 
	~<±hªad.h
>

11 
«me•a˚
 
	gPH


22 
size_t
 
VALUE_SIZE
;

23 
size_t
 
KEY_RANGE
;

25 
size_t
 
ENTRY_SIZE
;

26 
size_t
 
TOTAL_DATA_SIZE
;

29 ˛as†
	cPH_I¡îÁ˚


32 
	g¥iv©e
:

43 
√w_quîy_thªad
();

44 
˛ón_quîy_thªad
();

46 
√w_evi˘_thªad
();

47 
˛ón_evi˘_thªad
();

49 
exô_thªads
();

51 
±hªad_t
 
	gevi˘_±hªads
[100];

55 
	gpublic
:

56 
globÆ_öô
(
size_t
 
VS
,size_à
KR
,
num_thªad
,
num_pmem
,
num_evi˘
);

57 
globÆ_˛ón
();

60 
ö£π_›
(
uöt64_t
 
key
,* 
vÆue
);

61 
ªad_›
(
uöt64_t
 
key
,* 
buf
);

62 
dñëe_›
(
uöt64_t
 
key
);

63 
sˇn_›
(
uöt64_t
 
°¨t_key
,uöt64_à
íd_key
);

64 
√xt_›
(* 
buf
);

66 
íd_›
();

68 
run_evi˘_dúe˘
();

69 
run_evi˘_thªad
();

	@hash.cpp

1 
	~<°dlib.h
>

3 
	~<°dio.h
>

5 
	~<x86öåö.h
>

7 
	~"globÆ.h
"

8 
	~"hash.h
"

9 
	~"c˚h.h
"

11 
	~"d©a.h
"

15 
«me•a˚
 
	gPH


18 
CCEH
* 
	gpoöt_hash
;

19 
CCEH
* 
	gønge_hash_¨øy
;

23 
	#¥öt
 0

	)

28 
uöt64_t
 
	ghâ1
,
	ghâ2
,
	ghâ3
,
	gÂc
,
	ghâ4
,
	ghâ5
,
	gÂc2
;

30 
uöt64_t
 
	g¥e_bô_mask
[128+1];

31 
uöt64_t
 
	g¥e_bô_mask2
[128+1];

34 * 
decode_íåy
(* 
íåy
, * 
vÆue_Àn_p
)

38 * 
	g±r
;

40 i‡(
	gvÆue_Àn_p
 !
NULL
)

41 *
vÆue_Àn_p
 = ((
uöt64_t
)
íåy
 >> 16) % (256*256);

42 
	g±r
 = (*)((
uöt64_t
)
off£t_to_node_d©a
((uöt64_t)
íåy
 >> 32) | ((uint64_t)entry % (256*256)));

43  
	g±r
;

51 * 
ícode_íåy
(* 
±r
, 
vÆue_Àn
)

55 * 
	gíåy
;

57 
	gíåy
 = (*)(((
uöt64_t
)
ˇlc_off£t_d©a
(
±r
Ë<< 32Ë| (
vÆue_Àn
 << 16) | ((uint64_t)ptr % (256*256)));

59  
	gíåy
;

70 
¥öt64
(
uöt64_t
 
v
)

72 
	gi
;

73 
uöt64_t
 
	gmask
;

74 
	gmask
 = (
uöt64_t
)1 << 63;

75 
	gi
=0;i<64;i++)

77 i‡(
	gv
 & 
	gmask
)

78 
¥ötf
("1");

80 
¥ötf
("0");

81 
	gmask
/=2;

83 
¥ötf
("\n");

86 
hash_fun˘i⁄
(c⁄° *
buf
 )

88 
	ghash
 = 5381;

89 
	gÀn
=
PH_KEY_SIZE
;

90 
	gÀn
--)

91 
	ghash
 = ((
hash
 << 5Ë+ hashË+ (*
buf
++);

92  
	ghash
;

95 
VÆueE¡ry
 
föd_poöt_íåy
(* &
key_p
)

97 #ifde‡
hâ


98 
time•ec
 
	gts1
,
	gts2
;

99 
˛ock_gëtime
(
CLOCK_MONOTONIC
,&
ts1
);

100 
	gÂc
++;

101 
_mm_m„n˚
();

105 
VÆueE¡ry
 
	gíåy
;

107 
	gíåy
 = 
poöt_hash
->
föd
(
key_p
);

113 #ifde‡
hâ


114 
_mm_m„n˚
();

115 
˛ock_gëtime
(
CLOCK_MONOTONIC
,&
ts2
);

116 
	ghâ1
+=(
ts2
.
tv_£c
-
ts1
.tv_£c)*1000000000+ts2.
tv_n£c
-ts1.tv_nsec;

118  
	gíåy
;

121 vﬁ©ûê
uöt64_t
* 
föd_‹_ö£π_poöt_íåy
(* &
key_p
,* 
u∆ock
)

123 #ifde‡
hâ


124 
time•ec
 
	gts1
,
	gts2
;

125 
˛ock_gëtime
(
CLOCK_MONOTONIC
,&
ts1
);

126 
	gÂc2
++;

127 
_mm_m„n˚
();

131 vﬁ©ûê
uöt64_t
* 
	gíåy_p
;

132 
VÆueE¡ry
 
	gve
;

133 
	gve
.
	gkv_off£t
 = 0;

134 
	gve
.
	gnode_off£t
 = 
INIT_OFFSET
;

135 (
	gíåy_p
=
poöt_hash
->
ö£π
(–
key_p
),
ve
,
u∆ock
)Ë=
NULL
);

141 #ifde‡
hâ


142 
_mm_m„n˚
();

143 
˛ock_gëtime
(
CLOCK_MONOTONIC
,&
ts2
);

144 
	ghâ5
+=(
ts2
.
tv_£c
-
ts1
.tv_£c)*1000000000+ts2.
tv_n£c
-ts1.tv_nsec;

146  
	gíåy_p
;

149 
u∆ock_íåy
(* 
u∆ock
)

151 
	gpoöt_hash
->
u∆ock_íåy2
(
u∆ock
);

154 
ö£π_poöt_íåy
(* 
key_p
,
VÆueE¡ry
& 
ve
)

156 #ifde‡
hâ


157 
time•ec
 
	gts1
,
	gts2
;

158 
˛ock_gëtime
(
CLOCK_MONOTONIC
,&
ts1
);

159 
_mm_m„n˚
();

162 
	gpoöt_hash
->
ö£π
(–
key_p
),
ve
) == 0);

163 #ifde‡
hâ


164 
_mm_m„n˚
();

166 
˛ock_gëtime
(
CLOCK_MONOTONIC
,&
ts2
);

167 
	ghâ3
+=(
ts2
.
tv_£c
-
ts1
.tv_£c)*1000000000+ts2.
tv_n£c
-ts1.tv_nsec;

171 
ªmove_poöt_íåy
(* &
key_p
)

174 
	gpoöt_hash
->
ªmove
(
key_p
);

178 
bô_Êush
(* 
¥efix
,* 
key_p
,
°¨t
,
íd
)

181 
	gi
,
	g°¨t_byã
,
	gíd_byã
,
	gèrgë_byã
;

182 
	gbô_cou¡
,
	gbô_mask
;

183 i‡(
	gkey_p
 =
NULL
)

185 
°¨t_byã
 = 
°¨t
 / 8+1;

186 
	gíd_byã
 = 
íd
 / 8;

187 
	gi
=
°¨t_byã
;i<=
íd_byã
;i++)

188 
	g¥efix
[
key_size
-1 - 
i
] = 0;

189 
	gèrgë_byã
 = 
°¨t_byã
 -1;

190 
	gbô_cou¡
 = 8-
°¨t
%8;

192 i‡(
	gbô_cou¡
 == 8)

193 
¥efix
[
key_size
-1 - 
èrgë_byã
] = 0;

196 
	gbô_mask
 = ~((1 << (
bô_cou¡
))-1);

197 
	g¥efix
[
key_size
-1 - 
èrgë_byã
] = 
¥efix
[key_size-1 -Å¨gë_byã] & 
bô_mask
;

203 
	g°¨t_byã
 = 
°¨t
 / 8;

204 
	gíd_byã
 = 
íd
 / 8 -1;

205 
	gi
=
°¨t_byã
;i<=
íd_byã
;i++)

206 
	g¥efix
[
key_size
-1 - 
i
] = 
key_p
[key_size-1 - i];

207 
	gèrgë_byã
 = 
íd_byã
+1;

208 
	gbô_cou¡
 = 8 - (
íd
 % 8 + 1);

210 i‡(
	gbô_cou¡
 == 0)

211 
¥efix
[
key_size
-1 - 
èrgë_byã
] = 
key_p
[key_size-1 -Åarget_byte];

214 
	gbô_mask
 = ~((1 << (
bô_cou¡
))-1);

215 
	g¥efix
[
key_size
-1 - 
èrgë_byã
] = 
key_p
[key_size-1 -Å¨gë_byã] & 
bô_mask
;

221 
Node_off£t
 
föd_ønge_íåy2
(* &
key_p
,* 
c⁄töue_Àn
)

223 #ifde‡
hâ


224 
time•ec
 
	gts1
,
	gts2
;

225 
˛ock_gëtime
(
CLOCK_MONOTONIC
,&
ts1
);

227 
_mm_m„n˚
();

231 
	gmö
,
	gmax
,
	gmid
;

232 
Node_off£t
 
	ghash
;

234 
	g¥efix
[16] = {0,};

235 * 
	g¥efix2
=0;

236 * 
	gkey_p2
=0;

244 i‡(
	gÁl£
 && *
	gc⁄töue_Àn
 > 0)

247 
	ghash
 = 
föd_ønge_íåy
(
key_p
,
c⁄töue_Àn
);

248 #ifde‡
hâ


249 
_mm_m„n˚
();

250 
˛ock_gëtime
(
CLOCK_MONOTONIC
,&
ts2
);

251 
	ghâ2
+=(
ts2
.
tv_£c
-
ts1
.tv_£c)*1000000000+ts2.
tv_n£c
-ts1.tv_nsec;

253  
	ghash
;

256 i‡(
	gPH_KEY_SIZE
 > 8)

258 
	g¥efix2
 = 
¥efix
+8;

259 
	gkey_p2
 = 
key_p
+8;

262 
	gmax
 = 
PH_KEY_SIZE
*8;

263 
	gmö
 = 0;

264 
	gmid
 = (
mö
+
max
)/2;

279 
VÆueE¡ry
 
	gve
;

282 *(
	guöt64_t
*)
	g¥efix
 = *(
uöt64_t
*)
key_p
 & 
¥e_bô_mask
[
mid
];

283 i‡(
	g¥efix2
)

284 *(
	guöt64_t
*)
	g¥efix2
 = *(
uöt64_t
*)
key_p2
 & 
¥e_bô_mask2
[
mid
];

291 
	gve
 = 
ønge_hash_¨øy
[
mid
].
föd
(
¥efix
);

294 i‡(
	gve
.
	gnode_off£t
 =
INIT_OFFSET
)

296 
max
 = 
mid
;

303 i‡(
	gve
.
	gnode_off£t
 =
SPLIT_OFFSET
)

307 *
c⁄töue_Àn
 = 
mid
;

309 i‡(
	gmid
+1 =
max
)

310 
mö
 = 
mid
+1;

312 
	gmö
 = 
mid
;

317 #ifde‡
hâ


318 
_mm_m„n˚
();

320 
˛ock_gëtime
(
CLOCK_MONOTONIC
,&
ts2
);

321 
	ghâ2
+=(
ts2
.
tv_£c
-
ts1
.tv_£c)*1000000000+ts2.
tv_n£c
-ts1.tv_nsec;

324 *
	gc⁄töue_Àn
 = 
mid
;

325  
	gve
.
	gnode_off£t
;

328 i‡(
	gmid
 =(
mö
+
max
)/2)

341  
INIT_OFFSET
;

343 
	gmid
 = (
mö
+
max
)/2;

347 
¥ötf
("never come here\n");

349  
	gINIT_OFFSET
;

353 
Node_off£t
 
föd_ønge_íåy
(* 
key_p
,* 
c⁄töue_Àn
)

355 #ifde‡
hâ


356 
time•ec
 
	gts1
,
	gts2
;

357 
˛ock_gëtime
(
CLOCK_MONOTONIC
,&
ts1
);

359 
_mm_m„n˚
();

363 
	gi
;

364 
	ghash
;

366 
	g¥efix
[16] = {0,};

369 * 
	g¥efix2
;

370 * 
	gkey_p2
;

371 
uöt64_t
 
	gb
;

373 
VÆueE¡ry
 
	gve
;

378 i‡(*
	gc⁄töue_Àn
 < 64)

380 
	gb
 = ((
uöt64_t
)1 << *
c⁄töue_Àn
) -1;

381 
	gb
 = 
b
 << (64-*
c⁄töue_Àn
);

382 *((
	guöt64_t
*)
	g¥efix
Ë(
b
 & *((
uöt64_t
*)
key_p
));

383 
	gb
 = (
uöt64_t
)1 << (63 -*
c⁄töue_Àn
);

387 *((
	guöt64_t
*)
	g¥efix
Ë(*((
uöt64_t
*)
key_p
));

390 i‡(
	g¥öt
)

391 
¥ötf
("key %lx cÀ¿%d\n",*((
uöt64_t
*)
key_p
),*
c⁄töue_Àn
);

392 
	gi
=*
c⁄töue_Àn
;i<=64;i++)

396 i‡(
	g¥öt
)

397 
¥ötf
("¥efix %lx\n",*((
uöt64_t
*)
¥efix
));

400 
	gve
 = 
ønge_hash_¨øy
[
i
].
föd
(
¥efix
);

403 i‡(
	gve
.
	gnode_off£t
 !
SPLIT_OFFSET
)

405 *
c⁄töue_Àn
 = 
i
;

406 #ifde‡
hâ


407 
_mm_m„n˚
();

409 
˛ock_gëtime
(
CLOCK_MONOTONIC
,&
ts2
);

410 
	ghâ2
+=(
ts2
.
tv_£c
-
ts1
.tv_£c)*1000000000+ts2.
tv_n£c
-ts1.tv_nsec;

412  
	gve
.
	gnode_off£t
;

415 (*((
	guöt64_t
*)
	g¥efix
)Ë|(*((
uöt64_t
*)
key_p
Ë& 
b
);

416 
	gb
 = 
b
 >> 1;

420 
	g¥efix2
 = 
¥efix
+8;

421 
	gkey_p2
 = 
key_p
+8;

422 i‡(*
	gc⁄töue_Àn
 < 128)

424 
	gb
 = ((
uöt64_t
)1 << *
c⁄töue_Àn
) -1;

425 
	gb
 = 
b
 << (64-*
c⁄töue_Àn
);

426 *((
	guöt64_t
*)
	g¥efix2
Ë(
b
 & *((
uöt64_t
*)
key_p2
));

429 *((
	guöt64_t
*)
	g¥efix2
Ë(*((
uöt64_t
*)
key_p2
));

430 
	gb
 = (
uöt64_t
)1 << (128-1 -*
c⁄töue_Àn
);

433 
	gi
=64+1;i<=
key_bô
;i++)

436 
	gve
 = 
ønge_hash_¨øy
[
i
].
föd
(
¥efix
);

438 i‡(
	gve
.
	gnode_off£t
 !
SPLIT_OFFSET
)

440 *
c⁄töue_Àn
 = 
i
;

441 #ifde‡
hâ


442 
_mm_m„n˚
();

444 
˛ock_gëtime
(
CLOCK_MONOTONIC
,&
ts2
);

445 
	ghâ2
+=(
ts2
.
tv_£c
-
ts1
.tv_£c)*1000000000+ts2.
tv_n£c
-ts1.tv_nsec;

447  
	gve
.
	gnode_off£t
;

450 (*((
	guöt64_t
*)
	g¥efix2
)Ë|(*((
uöt64_t
*)
key_p2
Ë& 
b
);

451 
	gb
 = 
b
 >> 1;

456 
¥ötf
("range hashÉrror\n");

457  
	gINIT_OFFSET
;

460 #ifde‡
HASH_TEST


462 
uöt64_t
 
	gö£π_log
[65][1000000];

463 
	gö£π_a
[65][1000000];

464 
	gö£π_b
[65][1000000];

465 
	g°d
::
©omic
<> 
Œ
[65];

468 
föd_ö_log
(* 
key_p
,
Àn
)

470 
	gi
,
	gŒi
;

471 
uöt64_t
 
	gv
 = *((uöt64_t*)
key_p
);

472 
	gŒi
 = 
Œ
[
Àn
];

473 
	gi
=0;i<
	gŒi
;i++)

475 i‡((
	gö£π_log
[
Àn
][
i
] & 
	g¥e_bô_mask
[Àn]Ë=(
v
 & 
¥e_bô_mask
[len]))

477 
¥ötf
("found %d %d\n",
ö£π_a
[
Àn
][
i
],
ö£π_b
[len][i]);

481 
¥ötf
("nŸ found %d\n",
Œi
);

484 
föd_ö_log
(* 
key_p
,
Àn
)

486 
¥ötf
("HASH TEST DISABLED\n");

493 
ö£π_ønge_íåy
(* 
key_p
,
Àn
,
Node_off£t
 
off£t
)

505 #ifde‡
hâ


506 
time•ec
 
	gts1
,
	gts2
;

507 
˛ock_gëtime
(
CLOCK_MONOTONIC
,&
ts1
);

509 
_mm_m„n˚
();

512 
	g¥efix
[16] = {0,};

532 i‡(
	gÀn
 <= 64)

533 *((
uöt64_t
*)
¥efix
Ë(
¥e_bô_mask
[
Àn
] & *((uöt64_t*)
key_p
));

536 * 
	g¥efix2
 = 
¥efix
+8;

537 * 
	gkey_p2
 = 
key_p
+8;

538 *((
	guöt64_t
*)
	g¥efix
Ë*((
uöt64_t
*)
key_p
);

539 *((
	guöt64_t
*)
	g¥efix2
Ë(
¥e_bô_mask2
[
Àn
] & *((
uöt64_t
*)
key_p2
));

544 i‡(
	g¥öt
)

545 
¥ötf
("key_∞%lxÑ™gê%lxÜí %d off£à%d/%d in£π\n",*((
uöt64_t
*)
key_p
),*((uöt64_t*)
¥efix
),
Àn
,
off£t
.
fûe
,offset.offset);

551 
VÆueE¡ry
 
	gve
;

552 
	gve
.
	gnode_off£t
 = 
off£t
;

554 
	gønge_hash_¨øy
[
Àn
].
ö£π
(
¥efix
,
ve
) == 0);

556 #ifde‡
hâ


557 
_mm_m„n˚
();

558 
˛ock_gëtime
(
CLOCK_MONOTONIC
,&
ts2
);

559 
	ghâ4
+=(
ts2
.
tv_£c
-
ts1
.tv_£c)*1000000000+ts2.
tv_n£c
-ts1.tv_nsec;

564 
öô_hash
()

567 
	gi
;

569 
	g¥e_bô_mask
[0] = 0;

571 
	gi
=1;i<=64;i++)

572 
	g¥e_bô_mask
[
i
] = (
¥e_bô_mask
[i-1] >> 1Ë+ ((
uöt64_t
)1 << 63);

573 
	gi
=64+1;i<=128;i++)

574 
	g¥e_bô_mask
[
i
] = 
¥e_bô_mask
[64];

575 
	gi
=1;i<=64;i++)

576 
	g¥e_bô_mask2
[
i
] = 
¥e_bô_mask
[64];

577 
	gi
=64+1;i<=128;i++)

578 
	g¥e_bô_mask2
[
i
] = 
¥e_bô_mask
[i-64];

581 
öô_c˚h
();

583 
	gpoöt_hash
 = 
√w
 
CCEH
(10);

584 
	gønge_hash_¨øy
 = 
√w
 
CCEH
[64+1];

594 
	ghâ4
 = 
hâ3
 = 
hâ5
 = 
hâ1
 = 
hâ2
 = 0;

595 
	gÂc2
 = 
Âc
 = 1;

600 
˛ón_hash
()

603 
¥ötf
("clean hash\n");

624 
dñëe
 
	gpoöt_hash
;

625 
	gdñëe
[] 
	gønge_hash_¨øy
;

627 
˛ón_c˚h
();

628 #ifde‡
hâ


629 
¥ötf
("hash\n");

630 
¥ötf
("poöàªad %ld %ld\n",
hâ1
/1000000000,htt1%1000000000);

631 
¥ötf
("poöàªadávg %ld %ld %ld\n",(
hâ1
/
Âc
)/1000000000,(htt1/fpc)%1000000000,fpc);

632 
¥ötf
("poöàªad2 %ld %ld\n",
hâ5
/1000000000,htt5%1000000000);

633 
¥ötf
("poöàªad2ávg %ld %ld %ld\n",(
hâ5
/
Âc2
)/1000000000,(htt5/fpc2)%1000000000,fpc2);

634 
¥ötf
("øngêªad %ld %ld\n",
hâ2
/1000000000,htt2%1000000000);

635 
¥ötf
("øngêö£π %ld %ld\n",
hâ4
/1000000000,htt4%1000000000);

636 
¥ötf
("poöàö£π %ld %ld\n",
hâ3
/1000000000,htt3%1000000000);

	@hash.h

1 
	~<±hªad.h
>

3 
	~"globÆ.h
"

10 
«me•a˚
 
	gPH


21 
VÆueE¡ry
 
föd_poöt_íåy
(* &
key_p
);

22 vﬁ©ûê
uöt64_t
* 
föd_‹_ö£π_poöt_íåy
(* &
key_p
,* 
u∆ock
);

23 
ö£π_poöt_íåy
(* 
key_p
,
VÆueE¡ry
& 
ve
);

24 
u∆ock_íåy
(* 
u∆ock
);

28 
Node_off£t
 
föd_ønge_íåy
(* 
key_p
,* 
c⁄töue_Àn
);

30 
Node_off£t
 
föd_ønge_íåy2
(* &
key_p
,* 
c⁄töue_Àn
);

32 
ö£π_ønge_íåy
(* 
key_p
,
Àn
,
Node_off£t
 
off£t
);

33 
ªmove_poöt_íåy
(* &
key_p
);

35 
öô_hash
();

36 
˛ón_hash
();

38 
föd_ö_log
(* 
key_p
,
Àn
);

	@kvs.h

3 
	~"quîy.h
"

4 
	~"globÆ.h
"

5 
	~"d©a.h
"

6 
	~"hash.h
"

7 
	~"thªad.h
"

11 ˛as†
	cKVS_ph
 : 
public
 
KVS


13 
public
:

16 ~
	$KVS_ph
()

22 
vútuÆ
 
	$öô
(
num
,
key
,
vÆue
,
ªc‹d
)

24 
KVS
::
	`öô
(
num
,
key
,
vÆue
,
ªc‹d
);

25 
PH
::
	`ãmp_°©ic_c⁄f
(
num
,
key
,
vÆue
);

30 
	`¥ötf
("kvs_ph init\n");

31 
	}
}

33 
vútuÆ
 
	$ö£π_›
(* 
key
,* 
vÆue
)

35 
PH
::
	`ö£π_quîy
(
key
,
vÆue
);

36 
	}
}

37 
vútuÆ
 
	$ªad_›
(* 
key
,* 
ªsu…
)

39 
Àn
;

40 
PH
::
	`lookup_quîy
(
key
,
ªsu…
,&
Àn
);

41 
	}
}

43 
vútuÆ
 
	$ªad_›2
(* 
key
,* 
ªsu…
)

45 
Àn
;

46  
PH
::
	`lookup_quîy
(
key
,
ªsu…
,&
Àn
);

50 
	}
}

51 
vútuÆ
 
	$ªad_›2
(* 
key
,
°d
::
°rög
 *
vÆue
)

53  
PH
::
	`lookup_quîy
(
key
,
vÆue
);

55 
	}
}

56 
vútuÆ
 
	$upd©e_›
(* 
key
,* 
vÆue
)

58 
PH
::
	`ö£π_quîy
(
key
,
vÆue
);

59 
	}
}

60 
vútuÆ
 
	$dñëe_›
(* 
key
)

62 
PH
::
	`dñëe_quîy
(
key
);

63 
	}
}

64 
vútuÆ
 
	$sˇn_›
(* 
key
,
˙t
,** 
sˇn_ªsu…
)

66 
PH
::
Quîy
 
quîy
;

67 
PH
::
	`öô_quîy
(&
quîy
);

68 
quîy
.
key_p
 = 
key
;

69 
quîy
.
›
 = 6;

70 
PH
::
	`sˇn_quîy
(&
quîy
);

72 
i
,
Àn
;

73 
quîy
.
›
 = 7;

74 
i
=0;i<
˙t
;i++)

76 
PH
::
	`√xt_quîy
(&
quîy
,
sˇn_ªsu…
[
i
],&
Àn
);

78 
PH
::
	`‰ì_quîy
(&
quîy
);

79 
	}
}

81 
vútuÆ
 
	$˛ón
()

83 
	`¥ötf
("ph clean1\n");

87 
PH
::
	`˛ón
();

88 
	`¥ötf
("ph clean2\n");

89 
	}
}

91 
vútuÆ
 
	$run
(
Te°Quîy
* 
tqa
, 
›s
)

93 
i
,
Àn
,
j
;

94 * 
ªsu…
;

95 
ªsu…
 = (*)
	`mÆloc
(
vÆue_size
+
PH_KEY_SIZE
+
PH_LEN_SIZE
);

97 
i10
 = 
›s
/10;

98 
i10s
 = 0;

100 
°d
::
°rög
 
sˇn_ªsu…
[100];

102 
i
=0;i<
›s
;i++)

104 i‡(
tqa
[
i
].
›
 == 1)

106 
PH
::
	`ö£π_quîy
(
tqa
[
i
].
key
,tqa[i].
vÆue
);

107 i‡(
tqa
[
i
].
›
 == 2)

109 
PH
::
	`lookup_quîy
(
tqa
[
i
].
key
,
ªsu…
,&
Àn
);

110 i‡(
Àn
 =0 && 
ªsu…
[0] == 0)

111 
	`¥ötf
("0\n");

113 i‡(
tqa
[
i
].
›
 == 3)

115 
PH
::
	`ö£π_quîy
(
tqa
[
i
].
key
,tqa[i].
vÆue
);

116 i‡(
tqa
[
i
].
›
 == 4)

117 
PH
::
	`dñëe_quîy
(
tqa
[
i
].
key
);

118 i‡(
tqa
[
i
].
›
 == 5)

120 
PH
::
	`sˇn_quîy2
(
tqa
[
i
].
key
,tqa[i].
˙t
,
sˇn_ªsu…
);

138 i‡(
i
 =
i10s
)

140 
i10s
+=
i10
;

141 
	`¥ötf
("ò: %d / %d\n",
i
,
›s
);

144 
	`‰ì
(
ªsu…
);

145 
	}
}

147 
vútuÆ
 
	$ª£t
()

149 
PH
::
	`ª£t_thªad
();

150 
	}
}

151 
vútuÆ
 
	$exô_thªad
()

153 
PH
::
	`exô_thªad
();

154 
	}
}

	@kvs2.h

3 
	~"quîy.h
"

4 
	~"globÆ.h
"

5 
	~"d©a.h
"

6 
	~"hash.h
"

7 
	~"thªad.h
"

9 
	~<ve˘‹
>

11 
usög
 
«me•a˚
 
	gPH
;

13 ˛as†
	cKVS_ph


15 
	mpublic
:

17 
vútuÆ
 
	$öô
(
num
,
key
,
vÆue
)

20 
PH
::
	`ãmp_°©ic_c⁄f
(
num
,
key
,
vÆue
);

24 
	`¥ötf
("kvs_ph init\n");

27 
vútuÆ
 
	$ö£π_›
(* 
key
,* 
vÆue
,
vÆue_Àn
)

29 
PH
::
	`ö£π_quîy
(
key
,
vÆue
,
vÆue_Àn
);

32 
	}
}

33 
vútuÆ
 
	$ªad_›
(* 
key
,* 
ªsu…
)

35 
Àn
;

36  
PH
::
	`lookup_quîy
(
key
,
ªsu…
,&
Àn
);

40 
	}
}

41 
vútuÆ
 
	$ªad_›2
(* 
key
,
°d
::
°rög
 *
vÆue
)

43  
PH
::
	`lookup_quîy
(
key
,
vÆue
);

45 
	}
}

46 
vútuÆ
 
	$upd©e_›
(* 
key
,* 
vÆue
,
vÆue_Àn
)

48 
PH
::
	`ö£π_quîy
(
key
,
vÆue
,
vÆue_Àn
);

51 
	}
}

52 
vútuÆ
 
	$dñëe_›
(* 
key
)

54 
PH
::
	`dñëe_quîy
(
key
);

55 
	}
}

56 
vútuÆ
 
	$sˇn_›
(* 
key
,
˙t
,** 
sˇn_ªsu…
)

58 
PH
::
Quîy
 
quîy
;

59 
PH
::
	`öô_quîy
(&
quîy
);

60 
quîy
.
key_p
 = 
key
;

61 
quîy
.
›
 = 6;

62 
PH
::
	`sˇn_quîy
(&
quîy
);

64 
i
,
Àn
;

65 
quîy
.
›
 = 7;

66 
i
=0;i<
˙t
;i++)

68 
PH
::
	`√xt_quîy
(&
quîy
,
sˇn_ªsu…
[
i
],&
Àn
);

70 
PH
::
	`‰ì_quîy
(&
quîy
);

71 
	}
}

73 
vútuÆ
 
size_t
 
	$sˇn_›
(* 
key
,
˙t
,
°d
::
°rög
* 
sˇn_ªsu…
)

75 
PH
::
Quîy
 
quîy
;

76 
PH
::
	`öô_quîy
(&
quîy
);

77 
quîy
.
key_p
 = 
key
;

78 
quîy
.
›
 = 6;

79 
PH
::
	`sˇn_quîy
(&
quîy
);

81 
i
;

82 
quîy
.
›
 = 7;

83 
i
=0;i<
˙t
;i++)

85 
PH
::
	`√xt_quîy
(&
quîy
,&
sˇn_ªsu…
[
i
]);

87 
PH
::
	`‰ì_quîy
(&
quîy
);

89  
˙t
;

90 
	}
}

92 
vútuÆ
 
size_t
 
	$sˇn_›2
(* 
key
,
˙t
,
°d
::
°rög
* 
sˇn_ªsu…
)

94 
˙t
 = 
PH
::
	`sˇn_quîy2
(
key
,˙t,
sˇn_ªsu…
);

95  
˙t
;

96 
	}
}

98 
vútuÆ
 
	$˛ón
()

100 
	`¥ötf
("ph clean1\n");

104 
PH
::
	`˛ón
();

105 
	`¥ötf
("ph clean2\n");

106 
	}
}

143 
vútuÆ
 
	$ª£t
()

145 
PH
::
	`ª£t_thªad
();

146 
	}
}

147 
vútuÆ
 
	$exô_thªad
()

149 
PH
::
	`exô_thªad
();

150 
	}
}

	@lock.cpp

1 
	~<©omic
>

3 
	~"lock.h
"

5 
«me•a˚
 
	gPH


7 
	#USE_CAS


	)

8 
©_lock2
(
°d
::
©omic
<
uöt8_t
> &
lock
)

10 #ifde‡
USE_CAS


11 
uöt8_t
 
z
;

12 
	gåue
)

14 
	gz
 = 0;

15 i‡(
	glock
.
com∑ª_exch™ge_°r⁄g
(
z
,1))

19 
	gåue
)

21 
	glock
++;

22 i‡(
	glock
 == 1)

24 
	glock
--;

28 
©_u∆ock2
(
°d
::
©omic
<
uöt8_t
> &
lock
)

30 
lock
 = 0;

34 
åy_©_lock2
(
°d
::
©omic
<
uöt8_t
> &
lock
)

36 #ifde‡
USE_CAS


37 
uöt8_t
 
z
=0;

38  
	glock
.
com∑ª_exch™ge_°r⁄g
(
z
,1);

40 
	glock
++;

41 i‡(
	glock
 == 1)

43 
	glock
--;

	@lock.h

1 
	~<©omic
>

2 
«me•a˚
 
	gPH


5 
©_lock2
(
°d
::
©omic
<
uöt8_t
> &
lock
);

6 
©_u∆ock2
(
°d
::
©omic
<
uöt8_t
> &
lock
);

7 
åy_©_lock2
(
°d
::
©omic
<
uöt8_t
> &
lock
);

	@log.cpp

1 
	~<libpmem.h
>

2 
	~<°rög.h
>

3 
	~<x86öåö.h
>

4 
	~<°dio.h
>

5 
	~<sys/mm™.h
>

6 
	~<uni°d.h
>

8 
	~"log.h
"

9 
	~"d©a2.h
"

10 
	~"thªad2.h
"

11 
	~"globÆ2.h
"

15 
«me•a˚
 
	gPH


20 
size_t
 
	glog_size
;

21 
	glog_max
;

22 
DoubÀLog
* 
	gdoubÀLogLi°
;

24 
size_t
 
	gHARD_EVICT_SPACE
;

25 
size_t
 
	gSOFT_EVICT_SPACE
;

27 
thªad_loˇl
 
PH_Thªad
* 
my_thªad
;

31 
öô_log
(
num_pmem
, 
num_log
)

34 
¥ötf
("initÜog\n");

36 
	glog_max
 = 
num_pmem
*
num_log
;

37 
	gdoubÀLogLi°
 = 
√w
 
DoubÀLog
[
log_max
];

41 
	glog_size
 = 
TOTAL_DATA_SIZE
/10/(
num_pmem
*
num_log
);

42 
	gHARD_EVICT_SPACE
 = 
log_size
/20;

43 
	gSOFT_EVICT_SPACE
 = 
log_size
/10;

45 
¥ötf
("LOG NUM %d LOG SIZE %lfGB\n",
num_log
,(
log_size
)/1024/1024/1024);

47 
	gi
,
	gj
,
	g˙t
=0;

48 
	gi
=0;i<
	gnum_log
;i++)

50 
	gj
=0;j<
	gnum_pmem
;j++)

52 
	g∑th
[100];

53 
	gÀn
;

54 #ifde‡
INTERLEAVE


55 
•rötf
(
∑th
,"/m¡/pmem0/log%d",
˙t
);

57 
•rötf
(
∑th
,"/m¡/pmem%d/log%d",
j
+1,
i
+1);

59 
	gÀn
 = 
°æí
(
∑th
);

60 
	g∑th
[
Àn
] = 0;

61 
	gdoubÀLogLi°
[
˙t
].
	glog_num
 = cnt;

62 
	gdoubÀLogLi°
[
˙t
++].
öô
(
∑th
,
log_size
);

67 
˛ón_log
()

70 
¥ötf
("cleanÜog\n");

72 
	gi
;

73 
	gi
=0;i<
	glog_max
;i++)

75 
	gdoubÀLogLi°
[
i
].
˛ón
();

78 
	gdñëe
[] 
	gdoubÀLogLi°
;

80 
¥ötf
("cleanÇow\n");

83 
	#SKIP_MEMSET


	)

85 
	gDoubÀLog
::
Æloc_√w_døm_poﬁ
()

88 
døm_li°_poﬁ
[
døm_li°_poﬁ_˙t
] = (
Døm_Li°
*)
mÆloc
((Døm_Li°)*
DRAM_LIST_UNIT
);

89 ++
	gdøm_li°_poﬁ_˙t
;

90 i‡(
	gdøm_li°_poﬁ_˙t
 >
døm_li°_poﬁ_max
)

91 
¥ötf
("implÑealloc\n");

92 
	gdøm_li°_poﬁ_Ælo˚d
 = 0;

95 
Døm_Li°
* 
	gDoubÀLog
::
Æloc_√w_døm_li°
()

97 i‡(
‰ì_døm_li°_hód
)

99 
Døm_Li°
* 
rv
 = 
‰ì_døm_li°_hód
;

100 
	g‰ì_døm_li°_hód
 = 
‰ì_døm_li°_hód
->
√xt
;

101  
	grv
;

104 i‡(
	gdøm_li°_poﬁ_Ælo˚d
 >
DRAM_LIST_UNIT
)

107 
Æloc_√w_døm_poﬁ
();

109  &
	gdøm_li°_poﬁ
[
døm_li°_poﬁ_˙t
-1][
døm_li°_poﬁ_Ælo˚d
++];

112 
Døm_Li°
* 
	gDoubÀLog
::
≠≥nd_√w_døm_li°
(
uöt64_t
 
vîsi⁄
,uöt64_à
key
,* 
vÆue
)

114 
Døm_Li°
* 
	gdl
 = 
Æloc_√w_døm_li°
();

115 
	gdl
->
	gbÀ
.
	ghódî
 = 
vîsi⁄
;

116 
	gdl
->
	gbÀ
.
	gkey
 = 
key
;

117 
mem˝y
(
dl
->
bÀ
.
vÆue
,vÆue,
VALUE_SIZE
);

119 i‡(
	gdøm_li°_hód
)

120 
	gdøm_li°_hód
->
	g√xt
 = 
dl
;

121 
	gdl
->
	g¥ev
 = 
døm_li°_hód
;

122 
	gdl
->
	g√xt
 = 
NULL
;

123 
	gdøm_li°_hód
 = 
dl
;

125  
	gdl
;

128 
	gDoubÀLog
::
ªmove_døm_li°
(
Døm_Li°
* 
dl
)

131 i‡(
dl
->
√xt
 && dl->
¥ev
)

133 
dl
->
√xt
->
¥ev
 = dl->prev;

134 
	gdl
->
	g¥ev
->
	g√xt
 = 
dl
->
√xt
;

136 i‡(
	gdl
->
	g√xt
)

138 
	gdl
->
	g√xt
->
	g¥ev
 = 
NULL
;

139 
	gdøm_li°_èû
 = 
dl
->
√xt
;

141 i‡(
	gdl
->
	g¥ev
)

143 
	gdl
->
	g¥ev
->
	g√xt
 = 
NULL
;

144 
	gdøm_li°_hód
 = 
dl
->
¥ev
;

148 
	gdøm_li°_hód
 = 
døm_li°_èû
 = 
NULL
;

153 
	gdl
->
	g√xt
 = 
‰ì_døm_li°_hód
;

154 
	g‰ì_døm_li°_hód
 = 
dl
;

158 
	gDoubÀLog
::
öô
(* 
fûeP©h
, 
size_t
 
ªq_size
)

165 
	gis_pmem
;

166 
	gpmemLogAddr
 = (*)
pmem_m≠_fûe
(
fûeP©h
,
ªq_size
,
PMEM_FILE_CREATE
,0777,&
my_size
,&
is_pmem
);

167 i‡(
	gmy_size
 !
ªq_size
)

168 
¥ötf
("my_sizê%lu i†nŸÑeq_sizê%lu\n",
my_size
,
ªq_size
);

169 i‡(
	gis_pmem
 == 0)

170 
¥ötf
("isÇotÖmem\n");

171 #ifde‡
SKIP_MEMSET


172 
¥ötf
("----------------skip memset----------------------\n");

174 
mem£t
(
pmemLogAddr
,0,
my_size
);

178 
	ghód_p
 = 
pmemLogAddr
;

179 
	gèû_p
 = 
pmemLogAddr
;

180 
	gíd_p
 = 
pmemLogAddr
 + 
my_size
;

182 
	gdøm_li°_poﬁ_max
 = 
LIST_POOL_UNIT
;

183 
	gdøm_li°_poﬁ
 = (
Døm_Li°
**)
mÆloc
((Døm_Li°*)*
døm_li°_poﬁ_max
);

184 
	gdøm_li°_poﬁ_˙t
 = 0;

185 
Æloc_√w_døm_poﬁ
();

188 
	g‰ì_døm_li°_hód
 = 
NULL
;

189 
	gdøm_li°_hód
 = 
døm_li°_èû
 = 
NULL
;

192 
	ghód_sum
 = 
èû_sum
 = 0;

194 #ifde‡
USE_DRAM_CACHE


195 
	gdømLogAddr
 = (*)
mm≠
(
NULL
,
ªq_size
,
PROT_READ
|
PROT_WRITE
,
MAP_PRIVATE
|
MAP_ANONYMOUS
|
MAP_POPULATE
,-1,0);

196 i‡(!
	gdømLogAddr
)

197 
¥ötf
("dram mmapÉrror\n");

201 
	gu£
 = 0;

202 
	gevi˘_Æloc
 = 0;

203 
	gmö_èû_sum
 = 0;

205 
	gso·_adv_off£t
 = 0;

208 
	gDoubÀLog
::
˛ón
()

212 
i
;

213 
	gi
=0;i<
	gdøm_li°_poﬁ_˙t
;i++)

214 
‰ì
(
døm_li°_poﬁ
[
i
]);

215 
‰ì
(
døm_li°_poﬁ
);

217 
¥ötf
(" my sizê%lu\n",
my_size
);

218 #ifde‡
USE_DRAM_CACHE


219 
munm≠
(
dømLogAddr
,
my_size
);

221 
pmem_unm≠
(
pmemLogAddr
,
my_size
);

231 
	gDoubÀLog
::
ªady_log
()

234 
size_t
 
off£t
 = 
hód_sum
 % 
my_size
;

235 i‡(
	goff£t
+
	gENTRY_SIZE
 > 
	gmy_size
)

236 
	ghód_sum
+=(
my_size
-
off£t
);

238 i‡(
	gmö_èû_sum
 + 
	gmy_size
 < 
	ghód_sum
 + 
	gENTRY_SIZE
)

239 
	gmö_èû_sum
 = 
gë_mö_èû
(
log_num
);

240 
	gmö_èû_sum
 + 
	gmy_size
 < 
	ghód_sum
 + 
	gENTRY_SIZE
)

244 
u¶ìp
(1000*100);

246 
	gmy_thªad
->
sync_thªad
();

247 
	gmö_èû_sum
 = 
gë_mö_èû
(
log_num
);

253 
	gDoubÀLog
::
ö£π_log
(
Ba£LogE¡ry
 *
ba£LogE¡ry_p
)

261 * 
§c
 = (*)
ba£LogE¡ry_p
;

262 
mem˝y
(
hód_p
+
hódî_size
 ,
§c
+hódî_sizê,
bÀ_Àn
-header_size);

263 
pmem_≥rsi°
(
hód_p
+
hódî_size
,
bÀ_Àn
-header_size);

264 
_mm_s„n˚
();

268 
	gDoubÀLog
::
ö£π_pmem_log
(
uöt64_t
 
key
,*
vÆue
)

277 * 
	ghód_p
 = 
pmemLogAddr
 + 
hód_sum
%
my_size
;

278 
mem˝y
(
hód_p
+
HEADER_SIZE
, &
key
, (
uöt64_t
));

279 
mem˝y
(
hód_p
+
HEADER_SIZE
+
KEY_SIZE
, 
vÆue
, 
VALUE_SIZE
);

281 
pmem_≥rsi°
(
hód_p
+
HEADER_SIZE
,
KEY_SIZE
+
VALUE_SIZE
);

282 
_mm_s„n˚
();

285 c⁄° 
size_t
 
	gCACHE_MASK
 = 0xffffffffffffffc0;

286 
˛wb
(* 
addr
,
size_t
 
Àn
)

288 
	gi
;

289 * 
	g°¨t
 = (
addr
 & 
CACHE_MASK
);

290 i‡(
	gÀn
 % 64 > 0)

291 
	gÀn
+=64;

292 
	gi
=0;i<
	gÀn
;i+=64)

293 
_mm_˛wb
((*)(
°¨t
+
i
));

296 
	gDoubÀLog
::
ö£π_døm_log
(
uöt64_t
 
vîsi⁄
, uöt64_à
key
,*
vÆue
)

305 * 
	ghód_p
 = 
dømLogAddr
 + 
hód_sum
%
my_size
;

306 
mem˝y
(
hód_p
,&
vîsi⁄
,
HEADER_SIZE
);

307 
mem˝y
(
hód_p
+
HEADER_SIZE
, &
key
, 
KEY_SIZE
);

308 
mem˝y
(
hód_p
+
HEADER_SIZE
+
KEY_SIZE
, 
vÆue
, 
VALUE_SIZE
);

312 
_mm_s„n˚
();

316 
	#VERSION


	)

318 
	gDoubÀLog
::
wrôe_vîsi⁄
(
uöt64_t
 
vîsi⁄
)

320 #ifde‡
VERSION


321 
mem˝y
(
pmemLogAddr
+
hód_sum
%
my_size
 ,&
vîsi⁄
,
hódî_size
);

322 
pmem_≥rsi°
(
pmemLogAddr
 + 
hód_sum
%
my_size
 ,
hódî_size
);

323 
_mm_s„n˚
();

333 
	gLOG
::
ö£π_log
(* &
key_p
, * &
vÆue_p
,
vÆue_Àn
)

335 
VÆueE¡ry_u
 
	gve_u
,
	gﬁd_ve_u
;

336 vﬁ©ûê
uöt64_t
* 
	gv64_p
;

337 * 
	gu∆ock
;

338 
Node_off£t
 
	g°¨t_off£t
,
	glocked_off£t
;

340 
	gv64_p
 = 
föd_‹_ö£π_poöt_íåy
(
key_p
,&
u∆ock
);

341 
	gﬁd_ve_u
.
	gve_64
 = *
v64_p
;

342 
	gﬁd_ve_u
.
	gve
.
	gnode_off£t
 !
INIT_OFFEST
)

344 
°¨t_off£t
 = 
gë_°¨t_off£t
(
ﬁd_ve_u
.
ve
.
node_off£t
);

345 i‡(
öc_ªf
(
°¨t_off£t
))

347 
	gve_u
.
	gve
.
	gnode_off£t
 = 
°¨t_off£t
;

350 
u∆ock_íåy
(
u∆ock
);

351 
	gv64_p
 = 
föd_‹_ö£π_poöt_íåy
(
key_p
,&
u∆ock
);

352 
	gﬁd_ve_u
.
	gve_64
 = *
v64_p
;

355 
	gc⁄töue_Àn
 = 0;

356 i‡(
	gve_u
.
	gve
.
	gnode_off£t
 =
INIT_OFFSET
)

360 i‡((
ve_u
.
ve
.
node_off£t
 = 
föd_ønge_íåy2
(
key_p
,&
c⁄töue_Àn
)Ë=
INIT_OFFSET
)

362 i‡(
öc_ªf
(
ve_u
.
ve
.
node_off£t
))

364 
	gﬁd_ve_u
.
	gve
.
	gnode_off£t
 = 
INIT_OFFSET
;

370 
	glocked_off£t
 = 
ve_u
.
ve
.
node_off£t
;

376 
VÆueE¡ry
 
	gLOG
::
ö£π_log
(
Node_off£t
 
°¨t_node_off£t
,* &
key_p
, * &
vÆue_p
,
vÆue_Àn
)

378 
VÆueE¡ry
 
	grv
;

379 
	gíåy_size
 = 
Àn_size
 + 
key_size
 + 
vÆue_Àn
;

380 
LogOff£t
 
	gkv_ö_√xt
 = 
kv_ö
;

382 i‡(
	gíåy_size
%2)

383 ++
	gíåy_size
;

385 
	gkv_ö_√xt
.
	goff£t
+=
íåy_size
+
LF_SIZE
;

387 i‡(
	gkv_ö_√xt
.
	goff£t
+
	gÀn_size
 >
FILE_SIZE
)

389 
kv_ö_√xt
.
off£t
 = 
íåy_size
+
LF_SIZE
;

390 
	gkv_ö_√xt
.
	gfûe
++;

391 i‡(
	gkv_ö_√xt
.
	gfûe
 >
fûe_max
)

393 i‡(
kv_ö_√xt
.
fûe
 * 
LOG_RATIO
 * 
num_of_thªad
 <
fûe_num
)

394 
√w_log_fûe
();

396 
	gkv_ö_√xt
.
	gfûe
 = 0;

398 
	gkv_ö
.
	gfûe
 = 
kv_ö_√xt
.
fûe
;

399 
	gkv_ö
.
	goff£t
 = 0;

402 
Node_off£t
 
	gíd_off£t
 = 
off£t_to_node
(
°¨t_node_off£t
)->
íd_off£t
;

403 
Node_mëa
* 
	gíd_mëa
 = 
off£t_to_node
(
íd_off£t
);

405 i‡(
	gíd_mëa
->
	gsize
 +Énd_mëa->
	gÊush_size
 + 
	gíåy_size
 + 
	gÀn_size
 >
NODE_BUFFER
)

408 i‡(
íd_mëa
->
∑π
 =
PART_MAX
-1)

417 
rv
.
Àn
 = 0;

418  
	grv
;

422 
	gíd_off£t
 = 
≠≥nd_node
(
°¨t_node_off£t
);

423 
	gíd_mëa
 = 
off£t_to_node
(
íd_off£t
);

428 
uöt16_t
 
	gkv_off£t
 = (
Node_off£t
)*3 + 
íd_mëa
->
size
 +Énd_mëa->
Êush_size
;

429 
uöt16_t
 
	gz
 = 0;

430 
uöt16_t
 
	gvl16
 = 
vÆue_Àn
;

431 * c⁄° 
	gde°
 = 
pmem_addr
[
døm_num
[
kv_ö
.
fûe
]]+kv_ö.
off£t
;

435 
mem˝y
(
de°
,&
vl16
,
Àn_size
);

436 
mem˝y
(
de°
+
Àn_size
,
key_p
,
key_size
);

437 
mem˝y
(
de°
+
Àn_size
+
key_size
,
vÆue_p
,
vÆue_Àn
);

438 
mem˝y
(
de°
+
íåy_size
,&
íd_off£t
,(
Node_off£t
));

439 
mem˝y
(
de°
+
íåy_size
+(
Node_off£t
),&
kv_off£t
,(
uöt16_t
));

440 
mem˝y
(
de°
+
íåy_size
+(
Node_off£t
)+(
uöt16_t
),&
z
,(uint16_t));

442 
pmem_mem˝y
(
pmem_¨øy
[
kv_ö
.
fûe
]+kv_ö.
off£t
+
Àn_size
,
de°
+Àn_size,
íåy_size
+
LF_SIZE
+Àn_size,
PMEM_F_MEM_NONTEMPORAL
);

443 
_mm_s„n˚
();

444 
pmem_mem˝y
(
pmem_¨øy
[
kv_ö
.
fûe
]+kv_ö.
off£t
,
de°
,
Àn_size
,
PMEM_F_MEM_NONTEMPORAL
);

445 
_mm_s„n˚
();

449 
	grv
.
	gnode_off£t
.
	gfûe
 = 
døm_num
[
kv_ö
.
fûe
];

450 
	grv
.
	gnode_off£t
.
	goff£t
 = 
kv_ö
.
off£t
 / (
Node
);

451 
	grv
.
	gkv_off£t
 = 
kv_ö
.
off£t
 % (
Node
);

452 
	grv
.
	gÀn
 = 
vÆue_Àn
;

454 
	gíd_mëa
->
	gÊush_size
+=
íåy_size
;

455 
Node_mëa
* 
	g°¨t_mëa
 = 
off£t_to_node
(
íd_mëa
->
°¨t_off£t
);

456 
	g°¨t_mëa
->
	ggroup_size
+=
íåy_size
;

458 i‡(
	gíd_mëa
->
	gÊush_˙t
 =
íd_mëa
->
Êush_max
)

460 
íd_mëa
->
Êush_max
*=2;

461 
	gíd_mëa
->
	gÊush_kv
 = (**)
ªÆloc
(
íd_mëa
->
Êush_kv
,(*)*íd_mëa->
Êush_max
);

463 
	gíd_mëa
->
	gÊush_kv
[
íd_mëa
->
Êush_˙t
++] = 
de°
;

465 
	gkv_ö
 = 
kv_ö_√xt
;

467  
	grv
;

469 
VÆueE¡ry
 
	gLOG
::
ö£π_log
(
Node_off£t
 
node_off£t
,* &
key_p
, * &
vÆue_p
)

471  
ö£π_log
(
node_off£t
,
key_p
,
vÆue_p
,
vÆue_size
);

473 
	gLOG
::
ªady
(
vÆue_Àn
)

475 
size
 = 
Àn_size
 + 
key_size
 + 
vÆue_Àn
 + 
LF_SIZE
;

478 
LogOff£t
 
	gkv_ö2
;

479 
	gt_fûe
,
	gt_off£t
;

480 
	gt_fûe
 = 
kv_ö
.
fûe
;

481 
	gt_off£t
 = 
kv_ö
.
off£t
;

482 
	gt_off£t
+=
size
;

484 i‡(
	gt_off£t
 % 2)

485 ++
	gt_off£t
;

487 i‡(
	gt_off£t
 >
FILE_SIZE
)

489 
t_off£t
 = 
size
;

490 i‡(
	gt_off£t
 % 2)

491 ++
	gt_off£t
;

492 
	gt_fûe
++;

493 i‡(
	gt_fûe
 >
fûe_max
)

494 
t_fûe
 = 0;

496 
	gkv_ö2
.
	gfûe
 = 
t_fûe
;

497 
	gkv_ö2
.
	goff£t
 = 
t_off£t
;

499 
	grv
;

500 * 
	gkvp
;

501 
uöt16_t
 
	gvl16
;

502 
Node_off£t
 
	gnode_off£t
;

503 
Node_off£t
 
	g°¨t_off£t
;

504 c⁄° 
	gdeÁu…_size
 = 
Àn_size
 + 
key_size
 + 
LF_SIZE
;

506 (
	gkv_ö2
.
	gfûe
 =
kv_out
.
fûe
 && 
kv_ö2
.
off£t
 < kv_out.offset) ||

507 (((
kv_ö2
.
fûe
+1)%
fûe_max
Ë=
kv_out
.fûê&& kv_ö2.
off£t
 > kv_out.offset)

510 
kvp
 = (*)
pmem_addr
[
døm_num
[
kv_out
.
fûe
]] + kv_out.
off£t
;

511 
	gvl16
 = *((
uöt16_t
*)
kvp
);

512 i‡(
	gvl16
 & 
	gINV_BIT
)

514 
	gvl16
-=
INV_BIT
;

515 
	gkv_out
.
	goff£t
+=
deÁu…_size
+
vl16
;

516 i‡(
	gkv_out
.
	goff£t
 % 2)

517 ++
	gkv_out
.
	goff£t
;

519 if(
	gvl16
 == 0)

521 
kv_out
.
fûe
 = (kv_out.fûe+1)%
fûe_max
;

522 
	gkv_out
.
	goff£t
 = 0;

526 
	gnode_off£t
 = *((
Node_off£t
*)(
kvp
+
Àn_size
+
key_size
+
vl16
));

527 
	g°¨t_off£t
 = 
gë_°¨t_off£t
(
node_off£t
);

531 i‡(*((
	guöt16_t
*)
	gkvp
Ë& 
	gINV_BIT
)

535 i‡(
öc_ªf
(
°¨t_off£t
))

537 
	grv
 = 
Êush
(
node_off£t
);

538 i‡(
	grv
 == 1)

540 
dec_ªf
(
°¨t_off£t
);

543 i‡(
	grv
 == 0)

546 
dec_ªf
(
°¨t_off£t
);

549 
	gkv_out
.
	goff£t
+=
deÁu…_size
+
vl16
;

550 i‡(
	gkv_out
.
	goff£t
 % 2)

551 ++
	gkv_out
.
	goff£t
;

	@log.h

2 #i‚de‡
PH_LOG


3 
	#PH_LOG


	)

6 
	~<©omic
>

11 
«me•a˚
 
	gPH


14 
	#USE_DRAM_CACHE


	)

26 c⁄° 
size_t
 
	gVALUE_FIRST_MASK
 = 0xc000000000000000;

27 c⁄° 
	gVALUE_FIRST_SHIFT
 = 62;

28 c⁄° 
size_t
 
	gVALUE_SECOND_MASK
 = 0x3ff0000000000000;

29 c⁄° 
	gVALUE_SECOND_SHIFT
 = 52;

30 c⁄° 
size_t
 
	gVALUE_THIRD_MASK
 = 0x000fffffffffffff;

32 c⁄° 
size_t
 
	ghódî_size
 = (
uöt64_t
);

35 
öô_log
(
num_pmem
,
num_log
);

36 
˛ón_log
();

46 
˛ass
 
	gPH_Thªad
;

48 ˛as†
	cDoubÀLog


52 
	gpublic
:

55 
size_t
 
my_size
;

56 
size_t
 
	gso·_adv_off£t
;

59 * 
	gpmemLogAddr
;

64 * 
	gdømLogAddr
;

71 vﬁ©ûê
size_t
 
	ghód_sum
;

72 vﬁ©ûê
size_t
 
	gèû_sum
;

76 
size_t
 
	gmö_èû_sum
;

79 
Døm_Li°
** 
	gdøm_li°_poﬁ
 = 
NULL
;

80 
	gdøm_li°_poﬁ_max
;

81 
	gdøm_li°_poﬁ_˙t
;

82 
	gdøm_li°_poﬁ_Ælo˚d
;

83 
Døm_Li°
* 
	g‰ì_døm_li°_hód
 = 
NULL
;

93 
	gpublic
:

94 
öô
(* 
fûeP©h
,
size_t
 
size
);

95 
˛ón
();

97 
ªady_log
();

101 
ö£π_pmem_log
(
uöt64_t
 
key
,* 
vÆue
);

102 
ö£π_døm_log
(
uöt64_t
 
vîsi⁄
, uöt64_à
key
,* 
vÆue
);

103 
wrôe_vîsi⁄
(
uöt64_t
 
vîsi⁄
);

113 
Døm_Li°
* 
≠≥nd_√w_døm_li°
(
uöt64_t
 
vîsi⁄
,uöt64_à
key
,* 
vÆue
);

114 
ªmove_døm_li°
(
Døm_Li°
* 
dl
);

116 
	glog_num
;

118 
	g°d
::
©omic
<
uöt8_t
> 
u£
=0;

119 
	g°d
::
©omic
<
uöt8_t
> 
evi˘_Æloc
=0;

122 
DoubÀLog
* 
doubÀLogLi°
;

124 
ölöe
 * 
	$vÆue_to_log_addr
(
uöt64_t
 
vÆue
)

126  
doubÀLogLi°
[(
vÆue
 & 
VALUE_SECOND_MASK
)>>
VALUE_SECOND_SHIFT
].
dømLogAddr
 + (vÆuê& 
VALUE_THIRD_MASK
);

127 
	}
}

129 
ölöe
 
uöt64_t
 
	$log_addr_to_vÆue
(
log_num
,
size_t
 
off£t
)

131  
	`size_t
(1Ë<< 
VALUE_FIRST_SHIFT
 + size_t(
log_num
Ë<< 
VALUE_SECOND_SHIFT
 + 
off£t
;

132 
	}
}

	@ph_test.cpp

1 
	~<°dio.h
>

2 
	~<time.h
>

3 
	~<±hªad.h
>

5 
	~<°dlib.h
>

7 
	~"globÆ2.h
"

11 c⁄° 
size_t
 
	gvÆue_size
 = 100;

12 c⁄° 
size_t
 
	gkey_ønge
 = 100*1000*1000;

13 c⁄° 
size_t
 
	gtŸÆ_›s
 = 1000*1000*1000;

20 
	#THREAD_NUM
 4

	)

21 
	#PMEM_NUM
 1

	)

22 
	#EVICT_NUM
 4

	)

24 
	#PRINT_OPS


	)

26 
	eOP_TYPE


28 
	mINSERT_OP
,

29 
	mREAD_OP
,

33 
	sP¨amëî


35 
	mPH
::
PH_I¡îÁ˚
 *
phi
;

36 
	m›s
;

37 
size_t
 
	mtime
;

38 
size_t
 
	m›_id
;

39 
OP_TYPE
 
	m›_ty≥
;

42 
	#VALIDATION


	)

44 
size_t
 
	$key_gí
()

46 
size_t
 
v1
,
v2
,
v3
;

47 
v1
 = 
	`ønd
()%1000;

48 
v2
 = 
	`ønd
()%1000;

49 
v3
 = 
	`ønd
()%1000;

50  (
v1
 + 
v2
 * 1000 + 
v3
 * 1000000Ë% 
key_ønge
;

51 
	}
}

53 *
	$run
(*
∑ømëî
)

55 
i
;

56 
P¨amëî
 *
∑ø
 = (P¨amëî*)
∑ømëî
;

58 
uöt64_t
 
key
;

59 
vÆue
[
vÆue_size
];

61 
time•ec
 
ts1
,
ts2
,
ts3
,
ts4
;

62 
∑ø
->
time
 = 0;

64 
	`˛ock_gëtime
(
CLOCK_MONOTONIC
,&
ts1
);

65 i‡(
∑ø
->
›_ty≥
 =
INSERT_OP
)

67 #ifde‡
PRINT_OPS


68 
size_t
 
ﬁd_›s
=0;

69 
	`˛ock_gëtime
(
CLOCK_MONOTONIC
,&
ts3
);

71 
i
=0;i<
∑ø
->
›s
;i++)

75 
key
 = 
	`key_gí
();

76 *(
uöt64_t
*)
vÆue
 = 
∑ø
->
›_id
+
i
;

77 
∑ø
->
phi
->
	`ö£π_›
(
key
,
vÆue
);

79 #ifde‡
PRINT_OPS


80 
	`˛ock_gëtime
(
CLOCK_MONOTONIC
,&
ts4
);

81 i‡((
ts4
.
tv_£c
-
ts3
.tv_£c)*1000000000+ts4.
tv_n£c
-ts3.tv_nsec > 1000000000)

83 
	`¥ötf
("ﬁd op†%lu op†%d dif‡%lu\n",
ﬁd_›s
,
i
,i-old_ops);

84 
ﬁd_›s
 = 
i
;

85 
ts3
 = 
ts4
;

92 i‡(
∑ø
->
›_ty≥
 =
READ_OP
)

94 
i
=0;i<
∑ø
->
›s
;i++)

96 
key
 = (
∑ø
->
›_id
+
i
)%
key_ønge
;

97 i‡(
∑ø
->
phi
->
	`ªad_›
(
key
,
vÆue
) < 0)

98 
	`¥ötf
("not found!\n");

99 #ifde‡
VALIDATION


100 i‡(*(
uöt64_t
*)
vÆue
 !
∑ø
->
›_id
+
i
)

101 
	`¥ötf
("vÆid©i⁄ faû key %lu vÆuê%lu\n",
key
,(*(
uöt64_t
*)
vÆue
));

107 
	`˛ock_gëtime
(
CLOCK_MONOTONIC
,&
ts2
);

109 
∑ø
->
time
 = (
ts2
.
tv_£c
-
ts1
.tv_£c)*1000000000+ts2.
tv_n£c
-ts1.tv_nsec;

110 
∑ø
->
phi
->
	`íd_›
();

111  
NULL
;

112 
	}
}

115 
	$w‹k
(
PH
::
PH_I¡îÁ˚
 &
phi
, 
size_t
 
›s
, 
OP_TYPE
 
›_ty≥
)

119 
P¨amëî
 
∑ø
[100];

121 
i
;

122 
i
=0;i<
THREAD_NUM
;i++)

124 
∑ø
[
i
].
phi
 = &phi;

125 
∑ø
[
i
].
›s
 = ops/
THREAD_NUM
;

126 
∑ø
[
i
].
›_id
 = (
›s
/
THREAD_NUM
)*i;

127 
∑ø
[
i
].
›_ty≥
 = op_type;

130 
	`¥ötf
("keyÑ™gê%lu\n",
key_ønge
);

131 
	`¥ötf
("›†%lu\n",
›s
);

135 
±hªad_t
 
±hªad
[100];

136 
i
=0;i<
THREAD_NUM
;i++)

138 
	`±hªad_¸óã
(&
±hªad
[
i
],
NULL
,
run
,(*)&
∑ø
[i]);

143 
size_t
 
time
=0;

144 
i
=0;i<
THREAD_NUM
;i++)

146 
	`±hªad_joö
(
±hªad
[
i
],
NULL
);

147 
time
+=
∑ø
[
i
].time;

149 
time
/=
THREAD_NUM
;

151 
d›s
=
›s
;

152 
	`¥ötf
("timêsum %luÇs\n",
time
);

153 
	`¥ötf
("œàavg %luÇs\n",
time
/(
›s
/
THREAD_NUM
));

154 
	`¥ötf
("M›†avg %lf\n",
d›s
*1000/
time
);

155 
	`¥ötf
("GB/†avg %lf\n",
d›s
*(8+8+
vÆue_size
+4)*1000*1000*1000/1024/1024/1024/
time
);

157 
	}
}

158 
	$maö
()

161 
	`¥ötf
("THREAD_NUM %d\n",
THREAD_NUM
);

162 
	`¥ötf
("PMEM_NUM %d\n",
PMEM_NUM
);

164 
	`¥ötf
("ph_tset start\n");

166 
PH
::
PH_I¡îÁ˚
 
phi
;

168 
phi
.
	`globÆ_öô
(
vÆue_size
,
key_ønge
,
THREAD_NUM
,
PMEM_NUM
,
EVICT_NUM
);

171 
phi
.
	`run_evi˘_thªad
();

173 
size_t
 
›s
=
tŸÆ_›s
;

175 
	`¥ötf
("insert\n");

176 
	`w‹k
(
phi
,
›s
,
INSERT_OP
);

177 
	`¥ötf
("read\n");

178 
	`w‹k
(
phi
,
›s
,
READ_OP
);

180 
phi
.
	`globÆ_˛ón
();

181 
	`¥ötf
("ph_testÉnd\n");

183 
	}
}

	@query.cpp

1 
	~"quîy.h
"

2 
	~"hash.h
"

3 
	~"d©a.h
"

4 
	~"thªad.h
"

6 #i‚de‡
NULL


7 
	#NULL
 0

	)

10 
	~<°dio.h
>

11 
	~<°dlib.h
>

12 
	~<°rög.h
>

14 
	~<x86öåö.h
>

19 
	#¥öt
 0

	)

25 
«me•a˚
 
	gPH


28 #ifde‡
idÀ_thªad


30 
thªad_loˇl
 
PH_Thªad
* 
my_thªad
;

31 
	#THREAD_RUN
 
my_thªad
->
ru¬ög
=1;

	)

32 
	#THREAD_IDLE
 
my_thªad
->
ru¬ög
=0;

	)

36 
	#THREAD_RUN


	)

37 
	#THREAD_IDLE


	)

43 
uöt64_t
 
qâ1
,
qâ2
,
qâ3
,
qâ4
,
qâ5
,
qâ6
,
qâ7
,
qâ8
;

44 
tf
()

46 
¥ötf
("test function\n");

48 
¥öt_quîy
(
Quîy
* 
quîy
)

50 
¥ötf
("print query\n");

51 
	gi
;

52 
¥ötf
("key %d ",
quîy
->
key_Àn
);

53 
	gi
=0;i<8;i++)

54 
¥ötf
("[%d]",()
quîy
->
key_p
[
i
]);

55 
¥ötf
("\n");

56 
¥ötf
("vÆuê%d ",
quîy
->
vÆue_Àn
);

57 
	gi
=0;i<
	gquîy
->
	gvÆue_Àn
;i++)

58 
¥ötf
("[%d]",()
quîy
->
vÆue_p
[
i
]);

59 
¥ötf
("\n");

74 
öô_quîy
(
Quîy
* 
quîy
)

76 
	gquîy
->
	gnode_d©a
 = 
NULL
;

78 
	gquîy
->
	gsˇn_off£t
 = 
TAIL_OFFSET_u
.
no_32
;

82 
lookup_quîy
(* &
key_p
, * &
ªsu…_p
,* 
ªsu…_Àn_p
)

85 #ifde‡
qâ


86 
time•ec
 
	gts1
,
	gts2
,
	gts3
,
	gts4
;

87 
˛ock_gëtime
(
CLOCK_MONOTONIC
,&
ts1
);

88 
_mm_m„n˚
();

91 
VÆueE¡ry
 
	gve
;

93 c⁄° 
	gkls
 = 
PH_KEY_SIZE
+
PH_LEN_SIZE
;

95 
upd©e_‰ì_˙t
();

96 
	gTHREAD_RUN


97 #ifde‡
qâ


102 #ifde‡
ªad_lock


106 
	gve
 = 
föd_poöt_íåy
(
key_p
);

107 #ifde‡
qâ


108 
_mm_m„n˚
();

109 
˛ock_gëtime
(
CLOCK_MONOTONIC
,&
ts4
);

111 
	gqâ6
+=(
ts4
.
tv_£c
-
ts1
.tv_£c)*1000000000+ts4.
tv_n£c
-ts1.tv_nsec;

114 #ifde‡
qâ


115 
˛ock_gëtime
(
CLOCK_MONOTONIC
,&
ts3
);

116 
_mm_m„n˚
();

119 i‡(
	gve
.
	gnode_off£t
 =
INIT_OFFSET
 || 
ve
.
kv_off£t
 == 0)

122 
mem˝y
(
ªsu…_p
,
em±y
,
em±y_Àn
);

123 *
	gªsu…_Àn_p
 = 
em±y_Àn
;

126 
THREAD_IDLE


139 #ifde‡
ªad_lock


141 i‡(
öc_ªf
(
ve
.
node_off£t
))

162 *
	gªsu…_Àn_p
 = 
ve
.
Àn
;

168 i‡((*
	gªsu…_Àn_p
 & (1 << 15)) != 0)

171 
mem˝y
(
ªsu…_p
,
em±y
,
em±y_Àn
);

172 *
	gªsu…_Àn_p
 = 
em±y_Àn
;

173 *
	gªsu…_Àn_p
 = 0;

181 
mem˝y
(
ªsu…_p
,(*)
off£t_to_node_d©a
(
ve
.
node_off£t
)+ve.
kv_off£t
+
kls
,*
ªsu…_Àn_p
);

182 #ifde‡
ªad_lock


183 
dec_ªf
(
ve
.
node_off£t
);

194 #ifde‡
qâ


195 
_mm_m„n˚
();

196 
˛ock_gëtime
(
CLOCK_MONOTONIC
,&
ts4
);

197 
	gqâ7
+=(
ts4
.
tv_£c
-
ts3
.tv_£c)*1000000000+ts4.
tv_n£c
-ts3.tv_nsec;

198 
	gqâ8
+=(
ts4
.
tv_£c
-
ts1
.tv_£c)*1000000000+ts4.
tv_n£c
-ts1.tv_nsec;

202 
THREAD_IDLE


223 
lookup_quîy
(* &
key_p
, 
°d
::
°rög
 *
vÆue
)

226 
VÆueE¡ry
 
ve
;

227 c⁄° 
	gkls
 = 
PH_KEY_SIZE
+
PH_LEN_SIZE
;

228 
upd©e_‰ì_˙t
();

229 
THREAD_RUN


230 
	gve
 = 
föd_poöt_íåy
(
key_p
);

231 i‡(
	gve
.
	gnode_off£t
 =
INIT_OFFSET
 || 
ve
.
kv_off£t
 == 0)

233 
vÆue
->
assign
((*)
em±y
,
em±y_Àn
);

235 
THREAD_IDLE


246 * 
	gkv_p
 = (*)
off£t_to_node_d©a
(
ve
.
node_off£t
)+ve.
kv_off£t
;

247 
uöt16_t
 
	gÀn
 = *((uöt16_t*)(
kv_p
));

248 
	gvÆue
->
assign
((*)
kv_p
+
kls
,
Àn
);

256 
	gvÆue
->
assign
((*)
off£t_to_node_d©a
(
ve
.
node_off£t
)+ve.
kv_off£t
+
kls
,ve.
Àn
);

259 
THREAD_IDLE


265 
dñëe_quîy
(* 
key_p
)

268 
upd©e_‰ì_˙t
();

271 * 
	gkv_p
;

272 
VÆueE¡ry
 
	gve
;

273 
	goff£t
;

280 
	gve
 = 
föd_poöt_íåy
(
key_p
);

281 i‡(
	gve
.
	gnode_off£t
 =
INIT_OFFSET
)

286 #ifde‡
•lô_thªad


287 i‡(
öc_ªf
(
ve
.
node_off£t
Ë|| 
åy_•lô
(ve.node_offset))

289 i‡(
öc_ªf
(
ve
.
node_off£t
))

292 
	gkv_p
 = (*)
off£t_to_node_d©a
(
ve
.
node_off£t
Ë+ ve.
kv_off£t
;

293 i‡(*((
	guöt64_t
*)
	gkv_p
Ë!*((
uöt64_t
*)
key_p
))

295 
dec_ªf
(
ve
.
node_off£t
);

309 
dñëe_kv
(
kv_p
);

311 
övÆid©e_kv
(
ve
);

312 
ªmove_poöt_íåy
(
key_p
);

317 
dec_ªf
(
ve
.
node_off£t
);

338 
	#kìp_lock


	)

340 
ö£π_quîy
(* &
key_p
, * &
vÆue_p
)

342 
ö£π_quîy
(
key_p
,
vÆue_p
,
vÆue_size
);

345 
ö£π_quîy
(* &
key_p
, * &
vÆue_p
,&
vÆue_Àn
)

354 * 
	gkv_p
;

356 
VÆueE¡ry_u
 
	gve_u
;

358 vﬁ©ûê
uöt64_t
* 
	gv64_p
;

359 * 
	gu∆ock
;

362 
	gc⁄töue_Àn
;

364 
	gc⁄töue_Àn
 = 0;

366 
	grv
;

368 
	gã°
=0,
	gã°2
=0;

369 
	gz
 = 0;

370 
	gec
=0;

373 
VÆueE¡ry_u
 
	gﬁd_ve_u
;

374 
Node_off£t
 
	glocked_off£t
;

375 * 
	g√w_kv_p
;

377 
Node_off£t
 
	g°¨t_off£t
;

378 #ifde‡
qâ


379 
time•ec
 
	gts1
,
	gts2
,
	gts3
,
	gts4
,
	gts5
,
	gts6
;

381 
˛ock_gëtime
(
CLOCK_MONOTONIC
,&
ts1
);

382 
_mm_m„n˚
();

384 
upd©e_‰ì_˙t
();

386 
THREAD_RUN


390 i‡(
	g¥öt
)

391 
¥ötf
("insertÜoop\n");

392 #ifde‡
qâ


393 
˛ock_gëtime
(
CLOCK_MONOTONIC
,&
ts3
);

394 
_mm_m„n˚
();

403 
	gve_u
.
	gve
.
	gnode_off£t
 = 
INIT_OFFSET
;

404 #ifde‡
kìp_lock


406 
	gv64_p
 = 
föd_‹_ö£π_poöt_íåy
(
key_p
,&
u∆ock
);

408 
	gﬁd_ve_u
.
	gve_64
 = *
v64_p
;

413 
	gve_u
.
	gve
 = 
föd_poöt_íåy
(
key_p
);

419 
	gﬁd_ve_u
.
	gve
.
	gnode_off£t
 !
INIT_OFFSET
)

431 
°¨t_off£t
 = 
gë_°¨t_off£t
(
ﬁd_ve_u
.
ve
.
node_off£t
);

432 #ifde‡
•lô_thªad


433 i‡(
öc_ªf
(
°¨t_off£t
Ë|| 
åy_•lô
(start_offset))

435 i‡(
öc_ªf
(
°¨t_off£t
))

438 
	gve_u
.
	gve
.
	gnode_off£t
 = 
°¨t_off£t
;

476 #ifde‡
kìp_lock


477 
u∆ock_íåy
(
u∆ock
);

479 
	gv64_p
 = 
föd_‹_ö£π_poöt_íåy
(
key_p
,&
u∆ock
);

481 
	gﬁd_ve_u
.
	gve_64
 = *
v64_p
;

485 
	gve_u
.
	gve
 = 
föd_poöt_íåy
(
key_p
);

491 
	gvï
 = &
ve
;

492 
	gvï
->
	gnode_off£t
 = 0;

496 i‡(
	gve_u
.
	gve
.
	gnode_off£t
 =
INIT_OFFSET
)

499 i‡(
¥öt
)

500 
¥ötf
("findÇode\n");

503 i‡((
	gve_u
.
	gve
.
	gnode_off£t
 = 
föd_ønge_íåy2
(
key_p
,&
c⁄töue_Àn
)Ë=
INIT_OFFSET
)

520 
u∆ock_íåy
(
u∆ock
);

526 i‡(
	gec
 > 1000)

530 
¥ötf
("noÑangeÉntry\n");

531 
föd_ö_log
(
key_p
,
c⁄töue_Àn
);

533 
föd_ö_log
(
key_p
,
c⁄töue_Àn
+1);

535 
	gve_u
.
	gve
.
	gnode_off£t
 = 
föd_ønge_íåy
(
key_p
,&
c⁄töue_Àn
);

536 
¥ötf
("%d %d\n",
ve_u
.
ve
.
node_off£t
.
fûe
,ve_u.ve.node_off£t.
off£t
);

538 
sˇnf
("%d",&
ec
);

544 #ifde‡
•lô_thªad


545 i‡(
öc_ªf
(
ve_u
.
ve
.
node_off£t
Ë|| 
åy_•lô
(ve_u.ve.node_offset))

547 if(
öc_ªf
(
ve_u
.
ve
.
node_off£t
))

550 
	gﬁd_ve_u
.
	gve
.
	gnode_off£t
 = 
INIT_OFFSET
;

582 
u∆ock_íåy
(
u∆ock
);

584 i‡(
	gec
 > 100000)

587 
¥ötf
("locked\n");

588 
föd_ö_log
(
key_p
,
c⁄töue_Àn
);

590 
föd_ö_log
(
key_p
,
c⁄töue_Àn
+1);

592 
¥ötf
("%d\n",()
off£t_to_node
(
ve_u
.
ve
.
node_off£t
)->
°©e
);

593 
sˇnf
("%d",&
ec
);

617 #ifde‡
qâ


618 
_mm_m„n˚
();

619 
˛ock_gëtime
(
CLOCK_MONOTONIC
,&
ts4
);

620 
	gqâ2
+=(
ts4
.
tv_£c
-
ts3
.tv_£c)*1000000000+ts4.
tv_n£c
-ts3.tv_nsec;

624 #ifde‡
qâ


625 
˛ock_gëtime
(
CLOCK_MONOTONIC
,&
ts3
);

626 
_mm_m„n˚
();

629 
	glocked_off£t
 = 
ve_u
.
ve
.
node_off£t
;

630 i‡(
	g√w_kv_p
 = 
ö£π_kv
(
ve_u
.
ve
.
node_off£t
,
key_p
,
vÆue_p
,
vÆue_Àn
))

632 #ifde‡
qâ


633 
˛ock_gëtime
(
CLOCK_MONOTONIC
,&
ts5
);

635 
move_to_íd_off£t
(
ve_u
.
ve
.
node_off£t
);

643 
	gve_u
.
	gve
.
	gkv_off£t
 = 
√w_kv_p
-(*)
off£t_to_node_d©a
(
ve_u
.
ve
.
node_off£t
);

646 
	gve_u
.
	gve
.
	gÀn
 = 
vÆue_Àn
;

648 #ifde‡
kìp_lock


650 *
	gv64_p
 = 
ve_u
.
ve_64
;

651 
u∆ock_íåy
(
u∆ock
);

654 
ö£π_poöt_íåy
(
key_p
,
ve_u
.
ve
);

661 i‡(
	gﬁd_ve_u
.
	gve
.
	gnode_off£t
 !
INIT_OFFSET
)

674 
övÆid©e_kv
(
ﬁd_ve_u
.
ve
);

690 #ifde‡
qâ


691 
_mm_m„n˚
();

692 
˛ock_gëtime
(
CLOCK_MONOTONIC
,&
ts6
);

693 
	gqâ4
+=(
ts6
.
tv_£c
-
ts5
.tv_£c)*1000000000+ts6.
tv_n£c
-ts5.tv_nsec;

694 
˛ock_gëtime
(
CLOCK_MONOTONIC
,&
ts4
);

695 
	gqâ3
+=(
ts4
.
tv_£c
-
ts3
.tv_£c)*1000000000+ts4.
tv_n£c
-ts3.tv_nsec;

697 #ifde‡
•lô_thªad


698 i‡(
√ed_•lô
(
ve_u
.
ve
.
node_off£t
,
vÆue_Àn
))

700 i‡(
add_•lô
(
locked_off£t
) == 1)

705 
dec_ªf
(
locked_off£t
);

712 #ifde‡
qâ


713 
˛ock_gëtime
(
CLOCK_MONOTONIC
,&
ts5
);

715 #ifde‡
kìp_lock


716 
u∆ock_íåy
(
u∆ock
);

734 i‡(
	gc⁄töue_Àn
 == 0)

736 
c⁄töue_Àn
 = 
gë_c⁄töue_Àn
(
ve_u
.
ve
.
node_off£t
);

748 i‡(
•lô_‹_com∑˘
(
ve_u
.
ve
.
node_off£t
))

750 i‡(
	g¥öt
)

751 
¥ötf
("split\n");

767 i‡((
	grv
 = 
•lô2p
(
ve_u
.
ve
.
node_off£t
))<0)

770 
dec_ªf
(
locked_off£t
);

792 
	gc⁄töue_Àn
++;

796 i‡(
	g¥öt
)

797 
¥ötf
("splitÉnd\n");

808 i‡(
com∑˘2p
(
ve_u
.
ve
.
node_off£t
) < 0)

809 
dec_ªf
(
locked_off£t
);

834 #ifde‡
qâ


835 
_mm_m„n˚
();

836 
˛ock_gëtime
(
CLOCK_MONOTONIC
,&
ts6
);

837 
	gqâ5
+=(
ts6
.
tv_£c
-
ts5
.tv_£c)*1000000000+ts6.
tv_n£c
-ts5.tv_nsec;

840 i‡(
	g¥öt
)

841 
¥ötf
("insertÑetry\n");

842 #ifde‡
qâ


843 
_mm_m„n˚
();

845 
˛ock_gëtime
(
CLOCK_MONOTONIC
,&
ts4
);

846 
	gqâ3
+=(
ts4
.
tv_£c
-
ts3
.tv_£c)*1000000000+ts4.
tv_n£c
-ts3.tv_nsec;

849 
	gTHREAD_IDLE


852 #ifde‡
qâ


853 
_mm_m„n˚
();

854 
˛ock_gëtime
(
CLOCK_MONOTONIC
,&
ts2
);

855 
	gqâ1
+=(
ts2
.
tv_£c
-
ts1
.tv_£c)*1000000000+ts2.
tv_n£c
-ts1.tv_nsec;

861 #ifde‡
DOUBLE_LOG


862 
ö£π_quîy_l
(* &
key_p
, * &
vÆue_p
)

864 
ö£π_quîy_l
(
key_p
,
vÆue_p
,
vÆue_size
);

872 
ö£π_quîy_l
(* &
key_p
, * &
vÆue_p
,&
vÆue_Àn
)

874 * 
	gkv_p
;

876 
VÆueE¡ry_u
 
	gve_u
;

877 vﬁ©ûê
uöt64_t
* 
	gv64_p
;

878 * 
	gu∆ock
;

879 
	gc⁄töue_Àn
 = 0;

880 
VÆueE¡ry_u
 
	gﬁd_ve_u
;

881 
Node_off£t
 
	glocked_off£t
;

882 * 
	g√w_kv_p
;

884 
Node_off£t
 
	g°¨t_off£t
;

886 
upd©e_‰ì_˙t
();

888 
THREAD_RUN


890 
	gmy_thªad
->
	glog
->
ªady
(
vÆue_Àn
);

895 
	gve_u
.
	gve
.
	gnode_off£t
 = 
INIT_OFFSET
;

896 
	gv64_p
 = 
föd_‹_ö£π_poöt_íåy
(
key_p
,&
u∆ock
);

897 
	gﬁd_ve_u
.
	gve_64
 = *
v64_p
;

898 
	gﬁd_ve_u
.
	gve
.
	gnode_off£t
 !
INIT_OFFSET
)

900 i‡(
ﬁd_ve_u
.
ve
.
node_off£t
.
fûe
 & 
LOG_BIT
)

902 
uöt16_t
 
íåy_size
 = 
PH_KEY_SIZE
+
PH_LEN_SIZE
 +
ﬁd_ve_u
.
ve
.
Àn
;

903 i‡(
	gíåy_size
%2)

904 ++
	gíåy_size
;

906 
	g°¨t_off£t
 = 
gë_°¨t_off£t
(*((
Node_off£t
*)((*)
off£t_to_node_d©a
(
ﬁd_ve_u
.
ve
.
node_off£t
Ë+ old_ve_u.ve.
kv_off£t
 + 
íåy_size
)));

909 
	g°¨t_off£t
 = 
gë_°¨t_off£t
(
ﬁd_ve_u
.
ve
.
node_off£t
);

910 i‡(
öc_ªf
(
°¨t_off£t
))

921 
	gve_u
.
	gve
.
	gnode_off£t
 = 
°¨t_off£t
;

924 
u∆ock_íåy
(
u∆ock
);

925 
	gv64_p
 = 
föd_‹_ö£π_poöt_íåy
(
key_p
,&
u∆ock
);

926 
	gﬁd_ve_u
.
	gve_64
 = *
v64_p
;

928 i‡(
	gve_u
.
	gve
.
	gnode_off£t
 =
INIT_OFFSET
)

932 i‡((
ve_u
.
ve
.
node_off£t
 = 
föd_ønge_íåy2
(
key_p
,&
c⁄töue_Àn
)Ë=
INIT_OFFSET
)

934 i‡(
öc_ªf
(
ve_u
.
ve
.
node_off£t
))

936 
	gﬁd_ve_u
.
	gve
.
	gnode_off£t
 = 
INIT_OFFSET
;

941 
	glocked_off£t
 = 
ve_u
.
ve
.
node_off£t
;

943 
VÆueE¡ry_u
 
	grv
;

944 i‡((
	grv
.
	gve
 = 
my_thªad
->
log
->
ö£π_log
(
ve_u
.
ve
.
node_off£t
,
key_p
,
vÆue_p
,
vÆue_Àn
)).
	gÀn
 != 0)

950 *
v64_p
 = 
rv
.
ve_64
;

952 
u∆ock_íåy
(
u∆ock
);

953 i‡(
	gﬁd_ve_u
.
	gve
.
	gnode_off£t
 !
INIT_OFFSET
)

954 
övÆid©e_kv
(
ﬁd_ve_u
.
ve
);

955 
dec_ªf
(
locked_off£t
);

960 
u∆ock_íåy
(
u∆ock
);

961 i‡(
	gc⁄töue_Àn
 == 0)

962 
c⁄töue_Àn
 = 
gë_c⁄töue_Àn
(
ve_u
.
ve
.
node_off£t
);

963 i‡(
•lô_‹_com∑˘
(
ve_u
.
ve
.
node_off£t
))

965 i‡(
•lô
(
ve_u
.
ve
.
node_off£t
) >= 0)

966 ++
c⁄töue_Àn
;

968 
dec_ªf
(
locked_off£t
);

972 i‡(
com∑˘
(
ve_u
.
ve
.
node_off£t
) < 0)

973 
dec_ªf
(
locked_off£t
);

978 
	gTHREAD_IDLE


985 
dñëe_quîy_sˇn_íåy
(
Quîy
* 
quîy
)

987 
Node_mëa
* 
	gnode
;

988 
Node_off£t_u
 
	gnou
;

993 i‡(
	gquîy
->
	gsˇn_off£t
 !
TAIL_OFFSET_u
.
no_32
)

995 
nou
.
no_32
 = 
quîy
->
sˇn_off£t
;

996 
	gnode
 = 
off£t_to_node
(
nou
.
no
);

1000 i‡(
åy_©_lock
(
node
->
°©e
) == 0)

1016 
dñëe_sˇn_íåy
(
nou
.
no
,
quîy
);

1017 
	gquîy
->
	gsˇn_off£t
 = 
TAIL_OFFSET_u
.
no_32
;

1019 
©_u∆ock
(
node
->
°©e
);

1037 
sˇn_quîy
(
Quîy
* 
quîy
)

1047 
VÆueE¡ry
 
	gve
;

1048 
	gc⁄töue_Àn
;

1049 
Node
* 
	gnode_d©a
;

1050 
Node_off£t
 
	g°¨t_off£t
;

1051 
	gsize
;

1053 
upd©e_‰ì_˙t
();

1055 i‡(
	gquîy
->
	gnode_d©a
 =
NULL
)

1057 
quîy
->
node_d©a
 = (
Node
*)
mÆloc
((Node)*
PART_MAX
);

1058 i‡(
	gquîy
->
	gnode_d©a
 =
NULL
)

1059 
¥ötf
("node dataálloc fail\n");

1063 
dñëe_quîy_sˇn_íåy
(
quîy
);

1065 
	gnode_d©a
 = (
Node
*)
quîy
->
node_d©a
;

1072 
	gve
 = 
föd_poöt_íåy
(
quîy
->
key_p
);

1073 
	gve
.
	gnode_off£t
 !
INIT_OFFSET
)

1078 
°¨t_off£t
 = 
gë_°¨t_off£t
(
ve
.
node_off£t
);

1079 i‡(
öc_ªf
(
°¨t_off£t
))

1081 
	gve
.
	gnode_off£t
 = 
°¨t_off£t
;

1094 *
	gnode_d©a
 = *
off£t_to_node_d©a
(
ve
.
node_off£t
);

1095 
	gsize
 = 
off£t_to_node
(
ve
.
node_off£t
)->
size
;

1096 
ö£π_sˇn_li°
(
off£t_to_node
(
ve
.
node_off£t
),(*)
quîy
);

1097 
h¨d_u∆ock
(
ve
.
node_off£t
);

1098 
s‹t_node
(
node_d©a
,(*)(
quîy
->
s‹ãd_ödex
),&(quîy->
ödex_max
),
size
);

1101 
	gquîy
->
	gödex_num
 = 0;

1104 
©_lock
(
quîy
->
sˇn_lock
);

1105 
	gquîy
->
	gsˇn_off£t
 = 
ve
.
node_off£t
;

1107 
	gquîy
->
	gsˇn_lock
 = 0;

1115 *((
	guöt64_t
*)(
	gnode_d©a
->
	gbuf„r
+
	gquîy
->
	gs‹ãd_ödex
[
quîy
->
ödex_num
])Ë< *((uöt64_t*)quîy->
	gkey_p
))

1117 
	gquîy
->
	gödex_num
++;

1118 i‡(
	gquîy
->
	gödex_num
 >
quîy
->
ödex_max
)

1120 i‡(
adv™˚_off£t
((*)
quîy
) < 0)

1126 
	gsize
 = 
off£t_to_node
(
quîy
->
sˇn_off£t
)->
size
;

1127 
s‹t_node
(
node_d©a
,(*)(
quîy
->
s‹ãd_ödex
),&(quîy->
ödex_max
),
size
);

1128 
	gquîy
->
	gödex_num
=0;

1135 
	gve
 = 
föd_poöt_íåy
(
quîy
->
key_p
);

1139 i‡(
	gve
.
	gnode_off£t
 =
INIT_OFFSET
)

1141 
c⁄töue_Àn
 = 0;

1148 i‡((
	gve
.
	gnode_off£t
 = 
föd_ønge_íåy2
(
quîy
->
key_p
,&
c⁄töue_Àn
)Ë=
INIT_OFFSET
)

1155 i‡(
öc_ªf
(
ve
.
node_off£t
))

1159 
	goff£t2
 = 
föd_ønge_íåy2
(
quîy
->
key_p
,&
c⁄töue_Àn
);

1160 i‡(
	goff£t
 !
off£t2
)

1162 
h¨d_u∆ock
(
off£t
);

1163 
	goff£t
 = 
INIT_OFFSET
;

1168 *
	gnode_d©a
 = *
off£t_to_node_d©a
(
off£t
);

1169 
	gsize
 = 
off£t_to_node
(
off£t
)->
size
;

1170 
ö£π_sˇn_li°
(
off£t_to_node
(
off£t
),(*)
quîy
);

1171 
h¨d_u∆ock
(
off£t
);

1172 
s‹t_node
(
node_d©a
,(*)(
quîy
->
s‹ãd_ödex
),&(quîy->
ödex_max
),
size
);

1175 
	gquîy
->
	gödex_num
 = 0;

1178 
©_lock
(
quîy
->
sˇn_lock
);

1179 
	gquîy
->
	gsˇn_off£t
 = 
off£t
;

1181 
	gquîy
->
	gsˇn_lock
 = 0;

1189 *((
	guöt64_t
*)(
	gnode_d©a
->
	gbuf„r
+
	gquîy
->
	gs‹ãd_ödex
[
quîy
->
ödex_num
])Ë< *((uöt64_t*)quîy->
	gkey_p
))

1191 
	gquîy
->
	gödex_num
++;

1192 i‡(
	gquîy
->
	gödex_num
 >
quîy
->
ödex_max
)

1194 i‡(
adv™˚_off£t
((*)
quîy
) < 0)

1200 
s‹t_node
(
node_d©a
,(*)(
quîy
->
s‹ãd_ödex
),&(quîy->
ödex_max
),
size
);

1201 
	gquîy
->
	gödex_num
=0;

1217 
Node_off£t_u
 
	gnou
;

1218 
	gnou
.
	gno
 = 
ve
.
node_off£t
;

1220 
	gquîy
->
	gsˇn_off£t
 = 
nou
.
no_32
;

1223 
ö£π_sˇn_li°
(
ve
.
node_off£t
,
quîy
);

1231 
c›y_™d_s‹t_node
(
quîy
);

1233 
dec_ªf
(
ve
.
node_off£t
);

1245 
	gquîy
->
	gs‹ãd_kv_max
 > quîy->
	gs‹ãd_kv_i
)

1247 if(*((
	guöt64_t
*)(
	gquîy
->
	gs‹ãd_kv
[
quîy
->
s‹ãd_kv_i
]+
	gPH_LEN_SIZE
 )Ë>*((
uöt64_t
*)quîy->
key_p
))

1249 ++
	gquîy
->
	gs‹ãd_kv_i
;

1252 i‡(
adv™˚_off£t
(
quîy
) < 0)

1261 
√xt_quîy
(
Quîy
* 
quîy
,* 
ªsu…_p
,* 
ªsu…_Àn_p
)

1263 
upd©e_‰ì_˙t
();

1265 i‡(
	gquîy
->
	gsˇn_off£t
 =
TAIL_OFFSET_u
.
no_32
)

1268 
mem˝y
(
ªsu…_p
,
em±y
,
em±y_Àn
);

1269 *
	gªsu…_Àn_p
 = 
em±y_Àn
;

1276 *
	gªsu…_Àn_p
 = *((
uöt16_t
*)(
quîy
->
s‹ãd_kv
[quîy->
s‹ãd_kv_i
]));

1289 *
	gªsu…_Àn_p
+=8+2;

1291 
mem˝y
(
ªsu…_p
,
quîy
->
s‹ãd_kv
[quîy->
s‹ãd_kv_i
],*
ªsu…_Àn_p
);

1295 
	gquîy
->
	gs‹ãd_kv_i
++;

1296 
	gquîy
->
	gs‹ãd_kv_i
 >
quîy
->
s‹ãd_kv_max
)

1299 i‡(
adv™˚_off£t
(
quîy
) < 0)

1313 
√xt_quîy
(
Quîy
* 
quîy
,
°d
::
°rög
* 
ªsu…
)

1315 
THREAD_RUN


1316 
upd©e_‰ì_˙t
();

1318 i‡(
	gquîy
->
	gsˇn_off£t
 =
TAIL_OFFSET_u
.
no_32
)

1320 
ªsu…
->
assign
((*)
em±y
,
em±y_Àn
);

1321 
THREAD_IDLE


1326 
	gªsu…_Àn_p
;

1327 
	gªsu…_Àn_p
 = *((
uöt16_t
*)(
quîy
->
s‹ãd_kv
[quîy->
s‹ãd_kv_i
]));

1328 
	gªsu…_Àn_p
+=8+2;

1330 
	gªsu…
->
assign
((*)
quîy
->
s‹ãd_kv
[quîy->
s‹ãd_kv_i
],
ªsu…_Àn_p
);

1334 
	gquîy
->
	gs‹ãd_kv_i
++;

1335 
	gquîy
->
	gs‹ãd_kv_i
 >
quîy
->
s‹ãd_kv_max
)

1337 i‡(
adv™˚_off£t
(
quîy
) < 0)

1339 
THREAD_IDLE


1349 
THREAD_IDLE


1355 
‰ì_quîy
(
Quîy
* 
quîy
)

1370 
dñëe_quîy_sˇn_íåy
(
quîy
);

1371 
‰ì
(
quîy
->
node_d©a
);

1375 
size_t
 
sˇn_quîy2
(* 
key
,
˙t
,
°d
::
°rög
* 
sˇn_ªsu…
)

1377 
VÆueE¡ry
 
ve
;

1378 
	gc⁄töue_Àn
;

1379 
Node
* 
	gnode_d©a
;

1380 
Node_off£t
 
	g°¨t_off£t
;

1381 
	gsize
;

1382 
Node_mëa
* 
	gnode_mëa
;

1384 
THREAD_RUN


1385 
upd©e_‰ì_˙t
();

1387 
	gve
 = 
föd_poöt_íåy
(
key
);

1388 
	gve
.
	gnode_off£t
 !
INIT_OFFSET
)

1391 
°¨t_off£t
 = 
gë_°¨t_off£t
(
ve
.
node_off£t
);

1392 i‡(
öc_ªf
(
°¨t_off£t
))

1394 
	gve
.
	gnode_off£t
 = 
°¨t_off£t
;

1397 
	gve
 = 
föd_poöt_íåy
(
key
);

1400 i‡(
	gve
.
	gnode_off£t
 =
INIT_OFFSET
)

1402 
c⁄töue_Àn
 = 0;

1405 i‡((
	gve
.
	gnode_off£t
 = 
föd_ønge_íåy2
(
key
,&
c⁄töue_Àn
)Ë=
INIT_OFFSET
)

1407 i‡(
öc_ªf
(
ve
.
node_off£t
))

1415 
	gªsu…_num
,
	gªsu…_sum
=0;

1416 
Node_off£t
 
	gnode_off£t
 = 
ve
.
node_off£t
;

1417 
Node_off£t_u
 
	g√xt_off£t
;

1421 
	gªsu…_num
 = 
sˇn_node
(
node_off£t
,
key
,
˙t
-
ªsu…_sum
,
sˇn_ªsu…
);

1422 
	gªsu…_sum
+=
ªsu…_num
;

1423 
	gsˇn_ªsu…
+=
ªsu…_num
;

1425 i‡(
	g˙t
 <
ªsu…_sum
)

1427 
dec_ªf
(
node_off£t
);

1428  
	gªsu…_sum
;

1433 
	g√xt_off£t
.
	gno_32
 = 
off£t_to_node
(
node_off£t
)->
√xt_off£t
;

1434 i‡(
	g√xt_off£t
.
	gno
 =
TAIL_OFFSET
)

1436 
dec_ªf
(
node_off£t
);

1437  
	gªsu…_sum
;

1439 i‡(
öc_ªf
(
√xt_off£t
.
no
))

1443 
dec_ªf
(
node_off£t
);

1445 
	gnode_off£t
 = 
√xt_off£t
.
no
;

1447 
THREAD_IDLE


1450  
	gªsu…_sum
;

1455 
Node_off£t_u
 
	gnou
;

1456 
	gnou
.
	gno
 = 
ve
.
node_off£t
;

1461 
c›y_™d_s‹t_node
(
quîy
);

1463 
dec_ªf
(
ve
.
node_off£t
);

1475 
	gquîy
->
	gs‹ãd_kv_max
 > quîy->
	gs‹ãd_kv_i
)

1477 if(*((
	guöt64_t
*)(
	gquîy
->
	gs‹ãd_kv
[
quîy
->
s‹ãd_kv_i
]+
	gÀn_size
)Ë>*((
uöt64_t
*)quîy->
key_p
))

1479 ++
	gquîy
->
	gs‹ãd_kv_i
;

1482 i‡(
adv™˚_off£t
(
quîy
) < 0)

	@query.h

1 #¥agm®
⁄˚


3 
	#QUERY_BUFFER
 10000

	)

5 
	~<±hªad.h
>

6 
	~<©omic
>

7 
	~<°rög
>

9 
	~"globÆ.h
"

13 
«me•a˚
 
	gPH


16 
	sQuîy


35 * 
	gkey_p
;

36 * 
	gvÆue_p
;

37 
	g›
;

38 
	gkey_Àn
,
	gvÆue_Àn
;

40 
	gªf_off£t
;

43 vﬁ©ûê
uöt32_t
 
	gsˇn_off£t
;

44 * 
	gnode_d©a
;

52 * 
	gs‹ãd_kv
[100*
PART_MAX
];

53 
	gs‹ãd_kv_i
,
	gs‹ãd_kv_max
;

62 
öô_quîy
(
Quîy
* 
quîy
);

63 
ª£t_quîy
(
Quîy
* 
quîy
);

65 
‰ì_quîy
(
Quîy
* 
quîy
);

67 
lookup_quîy
(* &
key_p
, * &
ªsu…_p
,* 
ªsu…_Àn_p
);

68 
lookup_quîy
(* &
key_p
, 
°d
::
°rög
 *
vÆue
);

70 
dñëe_quîy
(* 
key_p
);

72 
ö£π_quîy
(* &
key_p
, * &
vÆue_p
);

73 
ö£π_quîy
(* &
key_p
, * &
vÆue_p
, &
vÆue_Àn
);

75 
ö£π_quîy_l
(* &
key_p
, * &
vÆue_p
);

76 
ö£π_quîy_l
(* &
key_p
, * &
vÆue_p
, &
vÆue_Àn
);

78 
sˇn_quîy
(
Quîy
* 
quîy
);

79 
√xt_quîy
(
Quîy
* 
quîy
,* 
ªsu…_p
,* 
ªsu…_Àn_p
);

80 
√xt_quîy
(
Quîy
* 
quîy
,
°d
::
°rög
* 
ªsu…
);

82 
size_t
 
sˇn_quîy2
(* 
key
,
˙t
,
°d
::
°rög
* 
sˇn_ªsu…
);

	@shared.h

1 #¥agm®
⁄˚


3 
«me•a˚
 
	gPH


7 
	sNodeAddr


12 
uöt32_t
 
	gpoﬁ_num
;

13 
uöt32_t
 
	gnode_off£t
;

16 c⁄° 
size_t
 
	gNODE_SIZE
 = 4096;

17 c⁄° 
size_t
 
	gNODE_BUFFER_SIZE
 = 
NODE_SIZE
-8;

19 
	sD©aNode


21 
NodeAddr
 
	g√xt_off£t
;

22 
	gbuf„r
[
NODE_BUFFER_SIZE
];

	@skiplist.cpp

2 
	~<©omic
>

3 
	~<°dlib.h
>

4 
	~<°dio.h
>

6 
	~"skùli°.h
"

7 
	~"lock.h
"

8 
	~"d©a2.h
"

10 
«me•a˚
 
	gPH


13 
size_t
 
HARD_EVICT_SPACE
;

14 
size_t
 
SOFT_EVICT_SPACE
;

19 c⁄° 
size_t
 
	gNODE_POOL_LIST_SIZE
 = 1024*1024;

20 c⁄° 
size_t
 
	gNODE_POOL_SIZE
 = 1024;

21 c⁄° 
size_t
 
	gSKIPLIST_NODE_POOL_LIMIT
 = 1024 * 4*3;

24 c⁄° 
size_t
 
	gKEY_MIN
 = 0x0000000000000000;

25 c⁄° 
size_t
 
	gKEY_MAX
 = 0xffffffffffffffff;

30 
Skùli°
* 
	gskùli°
;

31 
PH_Li°
* 
	gli°
;

33 
NodeAŒoˇt‹
* 
nodeAŒoˇt‹
;

35 
size_t
 
gëR™domLevñ
()

37 
size_t
 
	gÀvñ
 = 0;

38 
	gÀvñ
 < 
	gMAX_LEVEL
)

40 i‡(
ønd
()%2 == 0)

42 ++
	gÀvñ
;

44  
	gÀvñ
;

47 
	gSkùli°Node
::
£tLevñ
(
size_t
 
l
)

49 
Àvñ
 = 
l
;

50 
dñëe
 
	g√xt
;

51 
	g√xt
 = 
√w
 
°d
::
©omic
<
Skùli°Node
*>[
l
+1];

52 
	gbuût
 = 0;

55 
	gSkùli°Node
::
£tLevñ
()

57 
Àvñ
 = 
gëR™domLevñ
();

58 
dñëe
 
	g√xt
;

59 
	g√xt
 = 
√w
 
°d
::
©omic
<
Skùli°Node
*>[
Àvñ
+1];

60 
	gbuût
 = 0;

63 
	gSkùli°
::
öô
()

66 
node_poﬁ_li°
 = 
√w
 
Skùli°Node
*[
NODE_POOL_LIST_SIZE
];

69 
	gnode_poﬁ_li°
[0] = 
√w
 
Skùli°Node
[
NODE_POOL_SIZE
];

70 
	gnode_poﬁ_˙t
=0;

71 
	gnode_poﬁ_li°_˙t
 = 0;

72 
	gnode_‰ì_hód
 = 
NULL
;

74 
	gnode_Æloc_lock
 = 0;

76 
	gem±y_node
 = 
Æloc_¶_node
();

77 
	gem±y_node
->
	gkey
 = 
KEY_MIN
;

78 
	gem±y_node
->
	gmy_li°Node
 = 
li°
->
em±y_node
;

80 
	g°¨t_node
 = 
Æloc_¶_node
();

81 
	g°¨t_node
->
£tLevñ
(
MAX_LEVEL
);

82 
	g°¨t_node
->
	gkey
 = 
KEY_MIN
;

83 
	g°¨t_node
->
	gmy_li°Node
 = 
li°
->
°¨t_node
;

85 
	gíd_node
 = 
Æloc_¶_node
();

87 
	gíd_node
->
£tLevñ
(
MAX_LEVEL
);

88 
	gíd_node
->
	gkey
 = 
KEY_MAX
;

89 
	gíd_node
->
	gmy_li°Node
 = 
li°
->
em±y_node
;

91 
	gi
;

92 
	gi
=0;i<=
MAX_LEVEL
;i++)

93 
	g°¨t_node
->
	g√xt
[
i
] = 
íd_node
;

94 
	g°¨t_node
->
	gbuût
 = 
MAX_LEVEL
;

96 
NodeMëa
* 
	gnm_em±y
 = 
nodeAddr_to_nodeMëa
(
em±y_node
->
d©a_node_addr
);

97 
NodeMëa
* 
	gnm_°¨t
 = 
nodeAddr_to_nodeMëa
(
°¨t_node
->
d©a_node_addr
);

98 
NodeMëa
* 
	gnm_íd
 = 
nodeAddr_to_nodeMëa
(
íd_node
->
d©a_node_addr
);

100 
	gnodeAŒoˇt‹
->
lökNext
(
nm_em±y
,
nm_°¨t
);

101 
	gnodeAŒoˇt‹
->
lökNext
(
nm_°¨t
,
nm_íd
);

108 
	gSkùli°
::
˛ón
()

110 
¥ötf
("s¯˙à%ldÖoﬁ0 %∞Öoﬁ %∞\n",
node_poﬁ_li°_˙t
,
node_poﬁ_li°
[0],node_pool_list);

111 
	gi
;

112 
	gi
=0;i<=
node_poﬁ_li°_˙t
;i++)

115 
	gdñëe
[] 
	gnode_poﬁ_li°
[
i
];

118 
	gdñëe
[] 
	gnode_poﬁ_li°
;

122 
Skùli°Node
* 
	gSkùli°
::
Æloc_¶_node
()

125 
node_Æloc_lock
);

126 
©_lock2
(
node_Æloc_lock
);

128 i‡(
	gnode_‰ì_hód
)

130 
Skùli°Node
* 
	grv
 = 
node_‰ì_hód
;

131 
	gnode_‰ì_hód
 = 
node_‰ì_hód
->
√xt
[0];

132 
©_u∆ock2
(
node_Æloc_lock
);

133  
	grv
;

137 i‡(
	gnode_poﬁ_˙t
 >
NODE_POOL_SIZE
)

139 i‡(
node_poﬁ_li°_˙t
 >
SKIPLIST_NODE_POOL_LIMIT
)

141 
¥ötf
("no space forÇode!\n");

142  
	gNULL
;

144 ++
	gnode_poﬁ_li°_˙t
;

145 
	gnode_poﬁ_li°
[
node_poﬁ_li°_˙t
] = 
√w
 
Skùli°Node
[
NODE_POOL_SIZE
];

146 
	gnode_poﬁ_˙t
 = 0;

149 
Skùli°Node
* 
	gnode
 = &
node_poﬁ_li°
[
node_poﬁ_li°_˙t
][
node_poﬁ_˙t
];

150 
	gnode
->
	glock
 = 0;

151 
	gnode
->
	gdñëe_lock
 = 0;

152 
	gnode
->
	g√xt
 = 
NULL
;

153 
	gnode
->
£tLevñ
();

154 
	gnode
->
	gd©a_node_addr
 = 
nodeAŒoˇt‹
->
Æloc_node
();

158 
	gnode_poﬁ_˙t
++;

159 
©_u∆ock2
(
node_Æloc_lock
);

160  
	gnode
;

164 
	gSkùli°
::
‰ì_¶_node
(
Skùli°Node
* 
node
)

166 
©_lock2
(
node_Æloc_lock
);

167 
	gnode
->
	g√xt
[0] = 
node_‰ì_hód
;

168 
	gnode_‰ì_hód
 = 
node
;

169 
©_u∆ock2
(
node_Æloc_lock
);

172 
Skùli°Node
* 
	gSkùli°
::
föd_node
(
size_t
 
key
,Skùli°Node** 
¥ev
,Skùli°Node** 
√xt
)

174 
Skùli°Node
* 
	gnode
 = 
°¨t_node
;

175 
	gi
;

176 
	gi
=
MAX_LEVEL
;i>=0;i--)

178 
	gåue
)

180 
	gnode
->
	g√xt
[
i
].
lﬂd
()->
	gdñëe_lock
);

181 i‡(
	gnode
->
	g√xt
[
i
].
lﬂd
()->
	gkey
 <
key
)

182 
node
 =Çode->
√xt
[
i
];

186 
	g¥ev
[
i
] = 
node
;

187 
	g√xt
[
i
] = 
node
->
√xt
[i];

190  
	gnode
;

193 
	gSkùli°
::
dñëe_node
(
Skùli°Node
* 
node
,Skùli°Node** 
¥ev
,Skùli°Node** 
√xt
)

195 
size_t
 
	gkey
 = 
node
->
key
;

196 
©_lock2
(
node
->
dñëe_lock
);

201 i‡(
dñëe_node_wôh_Áû
(
node
,
¥ev
,
√xt
))

208 
	gnode
 = 
föd_node
(
key
,
¥ev
,
√xt
);

214 
boﬁ
 
	gSkùli°
::
dñëe_node_wôh_Áû
(
Skùli°Node
* 
node
, Skùli°Node** 
¥ev
,Skùli°Node** 
√xt
)

216 i‡(
åy_©_lock2
(
node
->
lock
) == 0)

217  
Ál£
;

219 
Skùli°Node
* 
	g≤
;

220 
Skùli°Node
* 
	g¬
;

221 
	gi
;

223 
	gi
=
node
->
Àvñ
;i>=0;i--)

225 i‡(
	g¥ev
[
i
]->
	gdñëe_lock
)

226  
	gÁl£
;

230 
	g≤
 = 
¥ev
[
i
]->
√xt
[i];

231 
	g¬
 = 
node
->
√xt
[
i
];

232 i‡(
	g≤
 !
node
)

233  
Ál£
;

234 i‡(
	g¥ev
[
i
]->
	g√xt
[i].
com∑ª_exch™ge_°r⁄g
(
≤
,
¬
Ë=
Ál£
)

235  
Ál£
;

236 
	gnode
->
	gÀvñ
--;

238  
	gåue
;

242 
boﬁ
 
	gSkùli°
::
ö£π_node_wôh_Áû
(
Skùli°Node
* 
node
, Skùli°Node** 
¥ev
,Skùli°Node** 
√xt
)

245 
	gi
;

247 
Skùli°Node
 *
	g≤
;

249 
	gi
=
node
->
buût
;i<Úode->
Àvñ
;i++)

251 i‡(
	g¥ev
[
i
]->
	gdñëe_lock
)

252  
	gÁl£
;

253 
	g≤
 = 
¥ev
[
i
]->
√xt
[i];

254 i‡(
	g≤
 !
√xt
[
i
])

255  
Ál£
;

256 
	gnode
->
	g√xt
[
i
] = 
√xt
[i];

257 i‡(
	g¥ev
[
i
]->
	g√xt
[i].
com∑ª_exch™ge_°r⁄g
(
≤
,
node
Ë=
Ál£
)

258  
Ál£
;

259 
	gnode
->
	gbuût
++;

261  
	gåue
;

264 
	gSkùli°
::
ö£π_node
(
Skùli°Node
* 
node
, Skùli°Node** 
¥ev
,Skùli°Node** 
√xt
)

268 
föd_node
(
node
->
key
,
¥ev
,
√xt
);

269 i‡(
ö£π_node_wôh_Áû
(
node
,
¥ev
,
√xt
))

276 
	gPH_Li°
::
öô
()

279 
node_poﬁ_li°
 = 
√w
 
Li°Node
*[
NODE_POOL_LIST_SIZE
];

282 
	gnode_poﬁ_li°
[0] = 
√w
 
Li°Node
[
NODE_POOL_SIZE
];

283 
	gnode_poﬁ_˙t
=0;

284 
	gnode_poﬁ_li°_˙t
 = 0;

285 
	gnode_‰ì_hód
 = 
NULL
;

287 
	gnode_Æloc_lock
 = 0;

290 
	gem±y_node
 = 
Æloc_li°_node
();

291 
	gem±y_node
->
	gkey
 = 
KEY_MIN
;

293 
	g°¨t_node
 = 
Æloc_li°_node
();

294 
	g°¨t_node
->
	gkey
 = 
KEY_MIN
;

296 
	gíd_node
 = 
Æloc_li°_node
();

297 
	gíd_node
->
	gkey
 = 
KEY_MAX
;

300 
	gem±y_node
->
	g√xt
 = 
°¨t_node
;

301 
	g°¨t_node
->
	g√xt
 = 
íd_node
;

302 
	g°¨t_node
->
	g¥ev
 = 
em±y_node
;

303 
	gíd_node
->
	g¥ev
 = 
°¨t_node
;

305 
NodeMëa
* 
	gnm_em±y
 = 
nodeAddr_to_nodeMëa
(
em±y_node
->
d©a_node_addr
);

306 
NodeMëa
* 
	gnm_°¨t
 = 
nodeAddr_to_nodeMëa
(
°¨t_node
->
d©a_node_addr
);

307 
NodeMëa
* 
	gnm_íd
 = 
nodeAddr_to_nodeMëa
(
íd_node
->
d©a_node_addr
);

309 
	gnodeAŒoˇt‹
->
lökNext
(
nm_em±y
,
nm_°¨t
);

310 
	gnodeAŒoˇt‹
->
lökNext
(
nm_°¨t
,
nm_íd
);

313 
	gPH_Li°
::
˛ón
()

315 
¥ötf
("l¯˙à%ldÖoﬁ0 %∞Öoﬁ %∞\n",
node_poﬁ_li°_˙t
,
node_poﬁ_li°
[0],node_pool_list);

317 
	gi
;

318 
	gi
=0;i<=
node_poﬁ_li°_˙t
;i++)

321 
	gdñëe
[] 
	gnode_poﬁ_li°
[
i
];

324 
	gdñëe
[] 
	gnode_poﬁ_li°
;

328 
Li°Node
* 
	gPH_Li°
::
Æloc_li°_node
()

331 
node_Æloc_lock
);

332 
©_lock2
(
node_Æloc_lock
);

334 i‡(
	gnode_‰ì_hód
)

336 
Li°Node
* 
	grv
 = 
node_‰ì_hód
;

337 
	gnode_‰ì_hód
 = 
node_‰ì_hód
->
√xt
;

339 
	grv
->
	glock
 = 0;

340 
	grv
->
	g√xt
 = 
NULL
;

341 
	grv
->
	g¥ev
 = 
NULL
;

343 
©_u∆ock2
(
node_Æloc_lock
);

344  
	grv
;

348 i‡(
	gnode_poﬁ_˙t
 >
NODE_POOL_SIZE
)

350 i‡(
node_poﬁ_li°_˙t
 >
NODE_POOL_LIST_SIZE
)

351 
¥ötf
("no space forÇode!\n");

352 ++
	gnode_poﬁ_li°_˙t
;

353 
	gnode_poﬁ_li°
[
node_poﬁ_li°_˙t
] = 
√w
 
Li°Node
[
NODE_POOL_SIZE
];

354 
	gnode_poﬁ_˙t
 = 0;

357 
Li°Node
* 
	gnode
 = &
node_poﬁ_li°
[
node_poﬁ_li°_˙t
][
node_poﬁ_˙t
];

358 
	gnode
->
	glock
 = 0;

359 
	gnode
->
	g√xt
 = 
NULL
;

360 
	gnode
->
	g¥ev
 = 
NULL
;

361 
	gnode
->
	gd©a_node_addr
 = 
nodeAŒoˇt‹
->
Æloc_node
();

365 
	gnode_poﬁ_˙t
++;

366 
©_u∆ock2
(
node_Æloc_lock
);

367  
	gnode
;

371 
	gPH_Li°
::
‰ì_li°_node
(
Li°Node
* 
node
)

373 
©_lock2
(
node_Æloc_lock
);

374 
	gnode
->
	g√xt
 = 
node_‰ì_hód
;

375 
	gnode_‰ì_hód
 = 
node
;

376 
©_u∆ock2
(
node_Æloc_lock
);

379 
Li°Node
* 
	gPH_Li°
::
föd_node
(
size_t
 
key
,Li°Node* 
node
)

382 
	gnode
->
	g√xt
 &&Çode->√xt->
	gkey
 < key)

384 
	gnode
 = 
node
->
√xt
;

386  
	gnode
;

390 
	gPH_Li°
::
dñëe_node
(
Li°Node
* 
node
)

393 
Li°Node
* 
¥ev
 = 
node
->prev;

394 
Li°Node
* 
	g√xt
 = 
node
->
√xt
;

396 
©_lock2
(
¥ev
->
lock
);

397 
©_lock2
(
node
->
lock
);

398 
©_lock2
(
√xt
->
lock
);

400 
	g¥ev
->
	g√xt
 = 
√xt
;

401 
	g√xt
->
	g¥ev
 = 
¥ev
;

403 
©_u∆ock2
(
√xt
->
lock
);

404 
©_u∆ock2
(
node
->
lock
);

405 
©_u∆ock2
(
¥ev
->
lock
);

409 
	gPH_Li°
::
ö£π_node
(
Li°Node
* 
¥ev
, Li°Node* 
node
)

411 
Li°Node
* 
	g√xt
 = 
¥ev
->
√xt
;

414 
©_lock2
(
√xt
->
lock
);

416 
	g¥ev
->
	g√xt
 = 
node
;

417 
	gnode
->
	g√xt
 = 
√xt
;

418 
	gnode
->
	g¥ev
 = 
¥ev
;

419 
	g√xt
->
	g¥ev
 = 
node
;

421 
©_u∆ock2
(
√xt
->
lock
);

	@skiplist.h

1 
	~<ve˘‹
>

2 
	~<©omic
>

4 
	~"sh¨ed.h
"

6 
«me•a˚
 
	gPH


9 c⁄° 
size_t
 
	gMAX_LEVEL
 = 30;

15 
˛ass
 
	gSkùli°Node
;

16 ˛as†
	cAtomicPoöãr


18 
	gpublic
:

19 
AtomicPoöãr
() {};

22 
AtomicPoöãr
(AtomicPoöã∏&
≠
Ë{
	g¢p
 =áp.
¢p
.
lﬂd
();}

26 
	g°d
::
©omic
<
Skùli°Node
*> 
¢p
=
NULL
;

30 
	sLogLoc


32 
	glog_num
;

33 
size_t
 
	goff£t
;

43 ˛as†
	cLi°Node


45 
	gpublic
:

46 
Li°Node
(Ë: 
key
(0), 
√xt
(
NULL
), 
¥ev
(NULL), 
lock
(0) {};

47 
size_t
 
	gkey
;

48 
Li°Node
* 
	g√xt
;

49 
Li°Node
* 
	g¥ev
;

52 
NodeAddr
 
	gd©a_node_addr
;

54 
	g°d
::
©omic
<
uöt8_t
> 
lock
;

57 ˛as†
	cPH_Li°


59 
	gpublic
:

61 
Li°Node
* 
em±y_node
;

62 
Li°Node
* 
	g°¨t_node
;

63 
Li°Node
* 
	gíd_node
;

65 
Li°Node
** 
	gnode_poﬁ_li°
;

66 
size_t
 
	gnode_poﬁ_˙t
;

67 
size_t
 
	gnode_poﬁ_li°_˙t
;

69 
	g°d
::
©omic
<
uöt8_t
> 
node_Æloc_lock
;

70 
Li°Node
* 
	gnode_‰ì_hód
;

72 
öô
();

73 
˛ón
();

75 
Li°Node
* 
Æloc_li°_node
();

76 
‰ì_li°_node
(
Li°Node
* 
node
);

78 
Li°Node
* 
föd_node
(
size_t
 
key
,Li°Node* 
node
);

79 
ö£π_node
(
Li°Node
* 
¥ev
,Li°Node* 
node
);

80 
dñëe_node
(
Li°Node
* 
node
);

86 ˛as†
	cSkùli°Node


88 
	gpublic
:

89 ~
Skùli°Node
(Ë{ 
dñëe
 
√xt
; }

90 
size_t
 
	gkey
;

94 
	g°d
::
©omic
<
Skùli°Node
*> *
√xt
 = 
NULL
;

96 
	g°d
::
ve˘‹
<
LogLoc
> 
íåy_li°
;

97 
LogLoc
 
	gt‹n_íåy
;

98 
size_t
 
	gt‹n_À·
=0;

99 
size_t
 
	gt‹n_right
=0;

100 
size_t
 
	gíåy_size_sum
=0;

102 
size_t
 
	gÀvñ
;

103 
size_t
 
	gbuût
;

104 
	g°d
::
©omic
<
Li°Node
*> 
my_li°Node
;

106 
NodeAddr
 
	gd©a_node_addr
;

109 
	g°d
::
©omic
<
uöt8_t
> 
lock
;

110 
	g°d
::
©omic
<
uöt8_t
> 
dñëe_lock
;

112 
£tLevñ
();

113 
£tLevñ
(
size_t
 
l
);

116 ˛as†
	cSkùli°


118 
	g¥iv©e
:

119 
Skùli°Node
* 
em±y_node
;

120 
Skùli°Node
* 
	g°¨t_node
;

121 
Skùli°Node
* 
	gíd_node
;

123 
Skùli°Node
** 
	gnode_poﬁ_li°
;

124 
size_t
 
	gnode_poﬁ_˙t
;

125 
size_t
 
	gnode_poﬁ_li°_˙t
;

127 
	g°d
::
©omic
<
uöt8_t
> 
node_Æloc_lock
;

128 
Skùli°Node
* 
	gnode_‰ì_hód
;

130 
	gpublic
:

131 
öô
();

132 
˛ón
();

134 
Skùli°Node
* 
Æloc_¶_node
();

135 
‰ì_¶_node
(
Skùli°Node
* 
node
);

137 
Skùli°Node
* 
föd_node
(
size_t
 
key
,Skùli°Node** 
¥ev
,Skùli°Node** 
√xt
);

138 
boﬁ
 
dñëe_node_wôh_Áû
(
Skùli°Node
* 
node
, Skùli°Node** 
¥ev
,Skùli°Node** 
√xt
);

139 
dñëe_node
(
Skùli°Node
* 
node
, Skùli°Node** 
¥ev
,Skùli°Node** 
√xt
);

140 
boﬁ
 
ö£π_node_wôh_Áû
(
Skùli°Node
* 
node
, Skùli°Node** 
¥ev
,Skùli°Node** 
√xt
);

141 
ö£π_node
(
Skùli°Node
* 
node
, Skùli°Node** 
¥ev
,Skùli°Node** 
√xt
);

	@thread.cpp

1 
	~"thªad.h
"

2 
	~"d©a.h
"

3 
	~"globÆ.h
"

5 
	~<°dlib.h
>

7 
	~<°dio.h
>

9 
	#FCCT
 1000

10 

	)

12 
«me•a˚
 
	gPH


15 
	#INV9
 999999999

	)

17 
PH_Thªad
* 
	gthªad_li°
;

19 
thªad_loˇl
 
PH_Thªad
* 
	gmy_thªad
 = 
NULL
;

22 vﬁ©ûê
‰ì_˙t
[
PM_N
];

23 
num_of_thªad
;

25 vﬁ©ûê
£g_‰ì_˙t
;

29 
	g°d
::
©omic
<
uöt8_t
> 
thªad_lock
;

58 
ª£t_thªad
()

60 
	gi
;

61 
	gi
=0;i<
	gnum_of_thªad
;i++)

63 
	gthªad_li°
[
i
].
˛ón
();

91 
exô_thªad
()

93 i‡(
	gmy_thªad
)

94 
	gmy_thªad
->
˛ón
();

96 
	gPH_Thªad
::
˛ón
()

98 
i
;

99 
	gi
=0;i<
	gPM_N
;i++)

100 
	gloˇl_‰ì_˙t
[
i
] = 
INV9
;

101 
	gloˇl_£g_‰ì_˙t
 = 
INV9
;

103 
˛ón_thªad_loˇl
();

106 #ifde‡
•lô_thªad


107 
±hªad_t
* 
	g•lô_thªads
;

108 * 
	gsi
;

111 
öô_thªad
()

113 
	gi
;

116 
	gthªad_li°
 = 
√w
 
PH_Thªad
[
num_of_thªad
+1];

117 
	gi
=0;i<
	gnum_of_thªad
;i++)

120 
	gthªad_li°
[
i
].
öô
();

121 #ifde‡
idÀ_thªad


126 
	gthªad_lock
 = 0;

127 #ifde‡
•lô_thªad


128 
öô_•lô
();

129 
	g•lô_thªads
 = (
±hªad_t
*)
mÆloc
(’thªad_t)*
num_of_•lô
);

130 
	gsi
 = (*)
mÆloc
(()*
num_of_•lô
);

131 
	gi
=0;i<
	gnum_of_•lô
;i++)

133 
	gsi
[
i
] = i;

134 
±hªad_¸óã
(&
•lô_thªads
[
i
],
NULL
,
•lô_w‹k
,(*)&
si
[i]);

139 
˛ón_thªad
()

143 #ifde‡
DOUBLE_LOG


144 
	gi
;

145 
	gi
=0;i<
	gnum_of_thªad
;i++)

147 i‡(
	gthªad_li°
[
i
].
	glog
)

148 
	gthªad_li°
[
i
].
	glog
->
˛ón
();

151 #ifde‡
•lô_thªad


152 
˛ón_•lô
();

154 
	gi
;

155 
	gi
=0;i<
	gnum_of_•lô
;i++)

156 
±hªad_joö
(
•lô_thªads
[
i
],
NULL
);

158 
‰ì
(
•lô_thªads
);

159 
‰ì
(
si
);

162 
	gdñëe
[] 
	gthªad_li°
;

165 
	gPH_Thªad
::
öô
()

167 
›_˙t
 = 0;

171 #ifde‡
DOUBLE_LOG


172 
	glog
 = 
NULL
;

175 #ifde‡
idÀ_thªad


176 
	gru¬ög
 = 0;

178 
	gi
;

179 
	gi
=0;i<
	gPM_N
;i++)

180 
	gloˇl_‰ì_˙t
[
i
] = 
INV9
;

181 
	gloˇl_£g_‰ì_˙t
 = 
INV9
;

186 
√w_thªad
()

188 
	gi
,
	gj
;

192 
©_lock
(
thªad_lock
);

193 
	gi
=0;i<
	gnum_of_thªad
;i++)

195 i‡(
	gthªad_li°
[
i
].
	gloˇl_‰ì_˙t
[0] =
INV9
)

199 
j
=0;
	gj
<
	gPM_N
;j++)

200 
	gthªad_li°
[
i
].
	gloˇl_‰ì_˙t
[
j
] = 
‰ì_˙t
[j];

201 
	gthªad_li°
[
i
].
	gloˇl_£g_‰ì_˙t
 = 
£g_‰ì_˙t
;

202 #ifde‡
DOUBLE_LOG


203 i‡(
	gthªad_li°
[
i
].
	glog
 =
NULL
)

205 
thªad_li°
[
i
].
log
 = 
√w
 
LOG
();

206 
	gthªad_li°
[
i
].
	glog
->
öô
();

209 
öô_d©a_loˇl
();

210 
	gmy_thªad
 = &
thªad_li°
[
i
];

219 
©_u∆ock
(
thªad_lock
);

222 #ifde‡
idÀ_thªad


224 
upd©e_idÀ
()

226 
	gi
,
	gj
;

228 
	gi
=0;i<
	gnum_of_thªad
;i++)

230 i‡(
	gthªad_li°
[
i
].
	gloˇl_‰ì_˙t
[0] !
INV9
)

232 i‡(
thªad_li°
[
i
].
ru¬ög
 == 0)

234 
j
=0;
	gj
<
	gPM_N
;j++)

235 
	gthªad_li°
[
i
].
	gloˇl_‰ì_˙t
[
j
] = 
‰ì_˙t
[j];

236 
	gthªad_li°
[
i
].
	gloˇl_£g_‰ì_˙t
 = 
£g_‰ì_˙t
;

243 
upd©e_idÀ
()

249 
	#waô_f‹_¶ow


	)

251 
upd©e_‰ì_˙t
()

253 i‡(
	gmy_thªad
)

255 
	gmy_thªad
->
	g›_˙t
++;

256 i‡(
	gmy_thªad
->
	g›_˙t
 % 128 == 0)

258 
i
;

259 
	gi
=0;i<
	gPM_N
;i++)

261 
	gmy_thªad
->
	gloˇl_‰ì_˙t
[
i
] = 
‰ì_˙t
[i];

262 #ifde‡
waô_f‹_¶ow


263 
	gmö
 = 
mö_‰ì_˙t
(
i
);

264 i‡(
	gmö
 + 
	gFREE_QUEUE_LEN
/2 < 
	gmy_thªad
->
	gloˇl_‰ì_˙t
[
i
])

266 
¥ötf
("in1\n");

267 
	gmö
 + 
	gFREE_QUEUE_LEN
/2 < 
	gmy_thªad
->
	gloˇl_‰ì_˙t
[
i
])

268 
	gmö
 = 
mö_‰ì_˙t
(
i
);

269 
¥ötf
("out1\n");

275 
	gmy_thªad
->
	gloˇl_£g_‰ì_˙t
 = 
£g_‰ì_˙t
;

276 #ifde‡
waô_f‹_¶ow


277 
	gmö
 = 
mö_£g_‰ì_˙t
();

278 i‡(
	gmö
 + 
	gFREE_SEG_LEN
/2 < 
	gmy_thªad
->
	gloˇl_£g_‰ì_˙t
)

280 
¥ötf
("in2\n");

281 
	gmö
 + 
	gFREE_SEG_LEN
/2 < 
	gmy_thªad
->
	gloˇl_£g_‰ì_˙t
)

283 
upd©e_idÀ
();

284 
	gmö
 = 
mö_£g_‰ì_˙t
();

286 
¥ötf
("out2\n");

293 
√w_thªad
();

295 
	gi
;

296 
±hªad_t
 
	g±
;

298 
	g±
 = 
±hªad_£lf
();

299 
	gi
=0;i<
	gnum_of_thªad
;i++)

301 i‡(
±hªad_equÆ
(
thªad_li°
[
i
].
tid
,
±
))

303 
	gthªad_li°
[
i
].
	g‰ì_˙t
 = 
‰ì_˙t
;

304 
	gthªad_li°
[
i
].
	g£g_‰ì_˙t
 = 
£g_‰ì_˙t
;

308 
√w_thªad
();

312 
mö_‰ì_˙t
(
∑π
)

314 
	gi
;

315 
	gmö
=999999999;

316 
	gi
=0;i<
	gnum_of_thªad
;i++)

318 i‡(
	gthªad_li°
[
i
].
	gru¬ög
 && 
	gmö
 >Åhªad_li°[i].
	gloˇl_‰ì_˙t
[
∑π
])

319 
	gmö
 = 
thªad_li°
[
i
].
loˇl_‰ì_˙t
[
∑π
];

321 i‡(
	gmö
 == 999999999)

322  
‰ì_˙t
[
∑π
];

323  
	gmö
;

326 
¥öt_thªad_öfo
()

328 
	gi
,
	gj
;

329 
	gi
=0;i<
	gnum_of_thªad
;i++)

331 
	gj
=0;j<
	gPM_N
;j++)

333 i‡(
	gthªad_li°
[
i
].
	gloˇl_‰ì_˙t
[
j
] != 999999999)

335 
¥ötf
("thªad %dÖ¨à%d / %d\n",
i
,
j
,
thªad_li°
[i].
loˇl_‰ì_˙t
[j]);

342 
mö_£g_‰ì_˙t
()

344 
	gi
;

345 
	gmö
=999999999;

346 
	gi
=0;i<
	gnum_of_thªad
;i++)

348 i‡(
	gmö
 > 
	gthªad_li°
[
i
].
	gloˇl_£g_‰ì_˙t
)

349 
	gmö
 = 
thªad_li°
[
i
].
loˇl_£g_‰ì_˙t
;

351 i‡(
	gmö
 == 999999999)

352  
£g_‰ì_˙t
;

353  
	gmö
;

	@thread.h

1 
	~<±hªad.h
>

2 
	~"log.h
"

4 
	#idÀ_thªad


	)

6 
«me•a˚
 
	gPH


9 
	#FREE_SEG_LEN
 10000

	)

10 
	#FREE_QUEUE_LEN
 100000

	)

12 ˛as†
	cPH_Thªad


14 
	gpublic
:

15 vﬁ©ûê
loˇl_‰ì_˙t
[
PM_N
];

16 vﬁ©ûê
	gloˇl_£g_‰ì_˙t
;

20 #ifde‡
idÀ_thªad


22 
	gru¬ög
;

24 
	g›_˙t
;

26 #ifde‡
DOUBLE_LOG


27 
˛ass
 
LOG
 *
	glog
;

30 
öô
();

31 
˛ón
();

36 
thªad_loˇl
 
PH_Thªad
* 
my_thªad
;

39 
ª£t_thªad
();

40 
exô_thªad
();

41 
upd©e_‰ì_˙t
();

42 
mö_‰ì_˙t
(
∑π
);

43 
mö_£g_‰ì_˙t
();

44 
öô_thªad
();

45 
˛ón_thªad
();

47 
¥öt_thªad_öfo
();

50 
upd©e_idÀ
();

	@thread2.cpp

1 
	~<°dio.h
>

2 
	~<c°rög
>

3 
	~<x86öåö.h
>

4 
	~<uni°d.h
>

5 
	~<libpmem.h
>

7 
	~"thªad2.h
"

8 
	~"log.h
"

9 
	~"lock.h
"

10 
	~"c˚h.h
"

11 
	~"skùli°.h
"

12 
	~"d©a2.h
"

13 
	~"globÆ2.h
"

15 
«me•a˚
 
	gPH


18 
size_t
 
HARD_EVICT_SPACE
;

19 
size_t
 
SOFT_EVICT_SPACE
;

22 
num_quîy_thªad
;

23 
num_evi˘_thªad
;

24 
log_max
;

25 
DoubÀLog
* 
doubÀLogLi°
;

28 
CCEH
* 
hash_ödex
;

33 
PH_Quîy_Thªad
 
	gquîy_thªad_li°
[
QUERY_THREAD_MAX
];

34 
PH_Evi˘_Thªad
 
	gevi˘_thªad_li°
[
EVICT_THREAD_MAX
];

36 
Skùli°
* 
skùli°
;

37 
PH_Li°
* 
li°
;

40 
	uE¡ryAddr


44 
size_t
 
	gloc
 : 2;

45 
size_t
 
	gfûe_num
 : 14;

46 
size_t
 
	goff£t
 : 48;

48 
uöt64_t
 
	gvÆue
;

53 
mö_£g_‰ì_˙t
()

55 
	gi
,
	gmi
;

56 
	gmö
=999999999;

57 
	gi
=0;i<
	gnum_quîy_thªad
;i++)

59 i‡(
	gquîy_thªad_li°
[
i
].
	grun
 && 
	gmö
 > quîy_thªad_li°[i].
	gloˇl_£g_‰ì_hód
)

61 
	gmö
 = 
quîy_thªad_li°
[
i
].
loˇl_£g_‰ì_hód
;

62 
	gmi
 = 
i
;

65 
	gi
=0;i<
	gnum_evi˘_thªad
;i++)

67 i‡(
	gevi˘_thªad_li°
[
i
].
	grun
 && 
	gmö
 >Évi˘_thªad_li°[i].
	gloˇl_£g_‰ì_hód
)

69 
	gmö
 = 
evi˘_thªad_li°
[
i
].
loˇl_£g_‰ì_hód
;

70 
	gmi
 = 
i
 + 
num_quîy_thªad
;

73 i‡(
	gmö
 == 999999999)

74  
£g_‰ì_hód
;

75 i‡(
	gmi
 < 
	gnum_quîy_thªad
)

76 
	gquîy_thªad_li°
[
mi
].
	gupd©e_ªque°
 = 1;

78 
	gevi˘_thªad_li°
[
mi
-
num_quîy_thªad
].
	gupd©e_ªque°
 = 1;

79  
	gmö
;

82 
size_t
 
gë_mö_èû
(
log_num
)

84 
	gi
,
	gmi
;

85 
size_t
 
	gmö
 = 0xffffffffffffffff;

86 
	gi
=0;i<
	gnum_quîy_thªad
;i++)

88 i‡(
	gquîy_thªad_li°
[
i
].
	grun
 && 
	gmö
 > quîy_thªad_li°[i].
	gª˚¡_log_èûs
[
log_num
])

90 
	gmö
 = 
quîy_thªad_li°
[
i
].
ª˚¡_log_èûs
[
log_num
];

91 
	gmi
 = 
i
;

94 
	gquîy_thªad_li°
[
mi
].
	gupd©e_ªque°
 = 1;

95  
	gmö
;

98 
	gPH_Thªad
::
›_check
()

100 ++
›_˙t
;

101 i‡(
	g›_˙t
 % 128 =0 || 
upd©e_ªque°
)

102 
sync_thªad
();

105 
	gPH_Thªad
::
sync_thªad
()

108 
upd©e_èû_sum
();

109 
	gupd©e_ªque°
 = 0;

112 
	gPH_Thªad
::
upd©e_èû_sum
()

114 
i
;

115 
	gi
=0;i<
	glog_max
;i++)

116 
	gª˚¡_log_èûs
[
i
] = 
doubÀLogLi°
[i].
èû_sum
;

119 
	gPH_Thªad
::
upd©e_‰ì_˙t
()

121 
loˇl_£g_‰ì_hód
 = 
£g_‰ì_hód
;

122 #ifde‡
waô_f‹_¶ow


123 
	gmö
 = 
mö_£g_‰ì_˙t
();

124 i‡(
	gmö
 + 
	gFREE_SEG_LEN
/2 < 
	gmy_thªad
->
	gloˇl_£g_‰ì_˙t
)

126 
¥ötf
("in2\n");

127 
	gmö
 + 
	gFREE_SEG_LEN
/2 < 
	gmy_thªad
->
	gloˇl_£g_‰ì_˙t
)

129 
upd©e_idÀ
();

130 
	gmö
 = 
mö_£g_‰ì_˙t
();

132 
¥ötf
("out2\n");

136 
	gi
;

137 
±hªad_t
 
	g±
;

139 
	g±
 = 
±hªad_£lf
();

140 
	gi
=0;i<
	gnum_of_thªad
;i++)

142 i‡(
±hªad_equÆ
(
thªad_li°
[
i
].
tid
,
±
))

144 
	gthªad_li°
[
i
].
	g‰ì_˙t
 = 
‰ì_˙t
;

145 
	gthªad_li°
[
i
].
	g£g_‰ì_˙t
 = 
£g_‰ì_˙t
;

149 
√w_thªad
();

157 
	gPH_Quîy_Thªad
::
öô
()

160 
i
;

162 
	gmy_log
 = 0;

163 
	gexô
 = 0;

165 
	gi
=0;i<
	glog_max
;i++)

167 
	gdoubÀLogLi°
[
i
].
	gu£
 == 0)

170 i‡(
åy_©_lock2
(
doubÀLogLi°
[
i
].
u£
))

171 
my_log
 = &
doubÀLogLi°
[
i
];

173 i‡(
	gmy_log
)

177 i‡(
	gmy_log
 == 0)

178 
¥ötf
("new queryÅhreadÇoÜog!!!\n");

180 
¥ötf
("logállocated\n");

187 
	ghash_ödex
->
thªad_loˇl_öô
();

191 
	gªad_lock
 = 0;

193 
	grun
 = 1;

196 
	gPH_Quîy_Thªad
::
˛ón
()

198 
my_log
->
u£
 = 0;

199 
	gmy_log
 = 
NULL
;

201 
	ghash_ödex
->
thªad_loˇl_˛ón
();

202 
	grun
 = 0;

203 
	gªad_lock
 = 0;

208 
	#INDEX


	)

210 
	gPH_Quîy_Thªad
::
ö£π_›
(
uöt64_t
 
key
,* 
vÆue
)

213 
›_check
();

217 
uöt64_t
 
	g√w_addr
,
	gﬁd_addr
;

218 
E¡ryAddr
 
	gó
;

219 * 
	gpmem_hód_p
;

220 * 
	gdøm_hód_p
;

223 * 
	gchecksum_i
 = (*)&
bÀ
;

224 
	gi
,
	g˙t
=0;

225 
	gi
=0;i<8+8+
	gVALUE_SIZE
;i++)

227 i‡(*
	gchecksum_i
 == 0)

228 
˙t
++;

230 i‡(
	g˙t
 == -1)

231 
¥ötf
("xxx\n");

241 
	gmy_log
->
ªady_log
();

243 
	gpmem_hód_p
 = 
my_log
->
pmemLogAddr
 + my_log->
hód_sum
%my_log->
my_size
;

246 
	gó
.
	gloc
 = 1;

247 
	gó
.
	gfûe_num
 = 
my_log
->
log_num
;

248 
	gó
.
	goff£t
 = 
my_log
->
hód_sum
%my_log->
my_size
;

250 
	gmy_log
->
ö£π_pmem_log
(
key
,
vÆue
);

263 #ifde‡
INDEX


264 
KVP
* 
	gkvp_p
;

265 
	g°d
::
©omic
<
uöt8_t
> *
£g_lock
;

266 
	gkvp_p
 = 
hash_ödex
->
ö£π
(
key
,&
£g_lock
,
ªad_lock
);

268 
	gﬁd_addr
 = 
kvp_p
->
vÆue
;

273 
uöt64_t
 
	gﬁd_vîsi⁄
,
	g√w_vîsi⁄
;

274 #ifde‡
INDEX


275 
	gﬁd_vîsi⁄
 = 
kvp_p
->
vîsi⁄
;

276 
	g√w_vîsi⁄
 = 
ﬁd_vîsi⁄
+1;

277 
	g√w_vîsi⁄
 = 
£t_loc_hŸ
(
√w_vîsi⁄
);

278 
£t_vÆid
(
√w_vîsi⁄
);

281 #ifde‡
USE_DRAM_CACHE


283 
	g√w_addr
 = 
ó
.
vÆue
;

285 
	gmy_log
->
ö£π_døm_log
(
√w_vîsi⁄
,
key
,
vÆue
);

287 
	g√w_addr
 = 
pmem_hód_p
;

292 
	gmy_log
->
wrôe_vîsi⁄
(
√w_vîsi⁄
);

293 
	gmy_log
->
	ghód_sum
+=
ENTRY_SIZE
;

296 #ifde‡
INDEX


297 
boﬁ
 
	g√w_key
;

299 
	gkvp_p
->
	gvÆue
 = 
√w_addr
;

300 
	gkvp_p
->
	gvîsi⁄
 = 
√w_vîsi⁄
;

301 
_mm_s„n˚
();

302 i‡(
	gkvp_p
->
	gkey
 !
key
)

304 
√w_key
 = 
åue
;

305 
	gkvp_p
->
	gkey
 = 
key
;

306 
_mm_s„n˚
();

309 
	g√w_key
 = 
Ál£
;

313 #ifde‡
INDEX


315 
	ghash_ödex
->
u∆ock_íåy2
(
£g_lock
,
ªad_lock
);

320 #ifde‡
USE_DRAM_CACHE


321 i‡(
	g√w_key
)

323 
E¡ryAddr
 
	gﬁd_ó
;

324 * 
	gaddr
;

325 
	gﬁd_ó
.
	gvÆue
 = 
ﬁd_addr
;

326 i‡(
	gﬁd_ó
.
	gloc
 == 1)

328 
addr
 = 
doubÀLogLi°
[
ﬁd_ó
.
fûe_num
].
dømLogAddr
 + old_ó.
off£t
;

329 
£t_övÆid
((
uöt64_t
*)
addr
);

333 
size_t
 
	goff£t_ö_node
;

334 
NodeMëa
* 
	gnm
;

335 
	g˙t
;

336 
	gnode_˙t
;

338 
	goff£t_ö_node
 = 
ﬁd_ó
.
off£t
 % 
NODE_SIZE
;

339 
	gnode_˙t
 = 
ﬁd_ó
.
off£t
/
NODE_SIZE
;

340 
	gnm
 = (
NodeMëa
*)(
nodeAŒoˇt‹
->
nodeMëaPoﬁLi°
[
ﬁd_ó
.
fûe_num
]+
node_˙t
*(NodeMeta));

341 
	g˙t
 = (
off£t_ö_node
-(
NodeAddr
))/
ENTRY_SIZE
;

342 
	gnm
->
	gvÆid
[
˙t
] = 
Ál£
;

343 --
	gnm
->
	gvÆid_˙t
;

360 
	gPH_Quîy_Thªad
::
ªad_›
(
uöt64_t
 
key
,* 
buf
)

363 
›_check
();

368 
E¡ryAddr
 
	gó
;

369 vﬁ©ûê*
	g£g_dïth_p
;

370 vﬁ©ûê
uöt64_t
 *
	gªt_p
;

371 
	g£g_dïth
;

372 
uöt64_t
 
	gªt
;

373 
boﬁ
 
	gex
;

374 
	gåue
)

376 
	gex
 = 
hash_ödex
->
ªad
(
key
,&
ªt_p
,&
£g_dïth_p
);

378 
	g£g_dïth
 = *
£g_dïth_p
;

379 
	gªt
 = *
ªt_p
;

381 i‡(
	gex
 =
Ál£
)

384 * 
	gaddr
;

385 i‡(
	gó
.
	gloc
 == 1)

387 
addr
 = 
doubÀLogLi°
[
ó
.
fûe_num
].
dømLogAddr
 +Éa.
off£t
;

388 
mem˝y
(
buf
,
addr
+
HEADER_SIZE
+
KEY_SIZE
,
VALUE_SIZE
);

392 
NodeMëa
* 
	gnm
;

393 
	gnode_˙t
;

398 
	gnode_˙t
 = 
ó
.
off£t
/
NODE_SIZE
;

399 
	gnm
 = (
NodeMëa
*)(
nodeAŒoˇt‹
->
nodeMëaPoﬁLi°
[
ó
.
fûe_num
]+
node_˙t
*(NodeMeta));

401 
	gaddr
 = (*)
nodeAŒoˇt‹
->
nodePoﬁLi°
[
ó
.
fûe_num
]+ó.
off£t
;

409 
mem˝y
(
buf
,
addr
+
HEADER_SIZE
+
KEY_SIZE
,
VALUE_SIZE
);

413 i‡(
	g£g_dïth
 =*
£g_dïth_p
 && 
ªt
 =*
ªt_p
)

420 
	gPH_Quîy_Thªad
::
dñëe_›
(
uöt64_t
 
key
)

423 
›_check
();

427 
	gPH_Quîy_Thªad
::
sˇn_›
(
uöt64_t
 
°¨t_key
,uöt64_à
íd_key
)

430 
›_check
();

434 
	gPH_Quîy_Thªad
::
√xt_›
(* 
buf
)

437 
›_check
();

444 
	gPH_Evi˘_Thªad
::
öô
()

447 
¶ìp_time
 = 1000;

449 
	gexô
 = 0;

451 
	g 
 = (
log_max
-1Ë/ 
num_evi˘_thªad
+1;

453 
	glog_˙t
 = 0;

454 
	glog_li°
 = 
√w
 
DoubÀLog
*[
 
];

456 
	gi
;

457 
	gi
=0;i<
	glog_max
;i++)

459 
	gdoubÀLogLi°
[
i
].
	gevi˘_Æloc
 == 0)

462 i‡(
åy_©_lock2
(
doubÀLogLi°
[
i
].
evi˘_Æloc
))

464 
log_li°
[
log_˙t
++] = &
doubÀLogLi°
[
i
];

468 i‡(
	glog_˙t
 >
 
)

472 
	gi
=
log_˙t
;i<
	g 
;i++)

473 
	glog_li°
[
i
] = 
NULL
;

475 
	ghash_ödex
->
thªad_loˇl_öô
();

476 
	gªad_lock
 = 0;

477 
	grun
 = 1;

480 
	gPH_Evi˘_Thªad
::
˛ón
()

482 
hash_ödex
->
thªad_loˇl_˛ón
();

483 
	grun
 = 0;

484 
	gªad_lock
 = 0;

486 
	gdñëe
[] 
	glog_li°
;

495 
pmem_¡_wrôe
(* 
d°_addr
,* 
§c_addr
, 
size_t
 
Àn
)

497 
pmem_mem˝y
(
d°_addr
,
§c_addr
,
Àn
,
PMEM_F_MEM_NONTEMPORAL
);

498 
_mm_s„n˚
();

502 
pmem_íåy_wrôe
(* 
d°
, * 
§c
, 
size_t
 
Àn
)

505 
mem˝y
(
d°
,
§c
,
Àn
);

506 
pmem_≥rsi°
(
d°
,
Àn
);

507 
_mm_s„n˚
();

509 
pmem_√xt_wrôe
(
D©aNode
* 
d°_node
,
NodeAddr
 
nodeAddr
)

511 
	gd°_node
->
	g√xt_off£t
 = 
nodeAddr
;

512 
pmem_≥rsi°
(
d°_node
,(
NodeAddr
));

513 
_mm_s„n˚
();

516 c⁄° 
size_t
 
	gPMEM_BUFFER_SIZE
 = 256;

518 
	gPH_Evi˘_Thªad
::
•lô_li°Node
(
Li°Node
 *
li°Node
,
Skùli°Node
 *
skùli°Node
)

521 
D©aNode
 *
	gli°_d©aNode
 = 
nodeAddr_to_node
(
li°Node
->
d©a_node_addr
);

522 
NodeMëa
 *
	gli°_nodeMëa
 = 
nodeAddr_to_nodeMëa
(
li°Node
->
d©a_node_addr
);

524 i‡(
	gli°_nodeMëa
->
	gvÆid_˙t
 == 0)

527 
D©aNode
 
	gãmp_node
 = *
li°_d©aNode
;

528 
D©aNode
 
	gãmp_√w_node
;

529 
uöt64_t
 
	ghÆf_key
;

530 
uöt64_t
 
	gkey
;

532 
size_t
 
	goff£t
;

533 
size_t
 
	goff£t2
;

534 * 
	gaddr
;

535 
	gaddr
 = (*)&
ãmp_node
;

536 
	goff£t
 = (
NodeAddr
);

537 
	goff£t2
 = (
NodeAddr
);

539 
	ghÆf_key
 = 
föd_hÆf_ö_node
(
li°_nodeMëa
,&
ãmp_node
);

540 i‡(
	ghÆf_key
 =
li°Node
->
key
)

543 
Li°Node
* 
	g√w_li°Node
 = 
li°
->
Æloc_li°_node
();

544 
NodeMëa
* 
	g√w_nodeMëa
 = 
nodeAddr_to_nodeMëa
(
√w_li°Node
->
d©a_node_addr
);

545 
D©aNode
* 
	g√w_d©aNode
 = 
nodeAddr_to_node
(
√w_li°Node
->
d©a_node_addr
);

547 
	g√w_li°Node
->
	gkey
 = 
hÆf_key
;

548 
	g√w_li°Node
->
	g√xt
 = 
li°Node
->
√xt
;

549 
	g√w_li°Node
->
	g¥ev
 = 
li°Node
;

551 
	gmoved_idx
[
NODE_SLOT_MAX
];

552 
	gmoved_˙t
=0;

553 
	gi
;

554 
	gi
=0;i<
	gNODE_SLOT_MAX
;i++)

556 i‡(
	gli°_nodeMëa
->
	gvÆid
[
i
] =
Ál£
)

559 
off£t
+=
ENTRY_SIZE
;

562 
	gkey
 = *(
uöt64_t
*)(
addr
+
off£t
+
HEADER_SIZE
);

563 i‡(
	gkey
 >
hÆf_key
)

566 
mem˝y
((*)&
ãmp_√w_node
+
off£t2
,(*)&
ãmp_node
+
off£t
,
ENTRY_SIZE
);

568 
	gmoved_idx
[
moved_˙t
] = 
i
;

569 ++
	gmoved_˙t
;

574 
	goff£t2
+=
ENTRY_SIZE
;

576 
	goff£t
+=
ENTRY_SIZE
;

579 
	gãmp_√w_node
.
	g√xt_off£t
 = 
li°_nodeMëa
->
√xt_p
->
my_off£t
;

581 
pmem_¡_wrôe
((*)
√w_d©aNode
,(*)&
ãmp_√w_node
,
off£t2
);

582 
KVP
* 
	gkvp_p
;

583 
	g°d
::
©omic
<
uöt8_t
> *
£g_lock
;

584 
E¡ryAddr
 
	gó
;

585 
	gi
=0;i<
	gmoved_˙t
;i++)

587 
	gkey
 = *(
uöt64_t
*)(
ãmp_√w_node
.
buf„r
 + 
ENTRY_SIZE
*
i
 + 
HEADER_SIZE
);

588 
	gkvp_p
 = 
hash_ödex
->
ö£π
(
key
,&
£g_lock
,
ªad_lock
);

589 
	gó
.
	gloc
 = 3;

590 
	gó
.
	gfûe_num
 = 
li°_nodeMëa
->
my_off£t
.
poﬁ_num
;

591 
	gó
.
	goff£t
 = 
li°_nodeMëa
->
my_off£t
.
node_off£t
*
NODE_SIZE
 + (
NodeAddr
Ë+ 
ENTRY_SIZE
*
moved_idx
[
i
];

592 i‡(
	gkvp_p
->
	gvÆue
 =
ó
.
vÆue
)

595 
ó
.
fûe_num
 = 
√w_nodeMëa
->
my_off£t
.
poﬁ_num
;

596 
	gó
.
	goff£t
 = 
√w_nodeMëa
->
my_off£t
.
node_off£t
*
NODE_SIZE
 + (
NodeAddr
Ë+ 
ENTRY_SIZE
*
i
;

597 
	gkvp_p
->
	gvÆue
 = 
ó
.
vÆue
;

598 
	gkvp_p
->
	gvîsi⁄
 = 
£t_loc_cﬁd
(
kvp_p
->
vîsi⁄
);

599 
	g√w_nodeMëa
->
	gvÆid
[
i
] = 
åue
;

600 
	g√w_nodeMëa
->
	gvÆid_˙t
++;

601 
	gli°_nodeMëa
->
	gvÆid_˙t
--;

604 
	g√w_nodeMëa
->
	gvÆid
[
i
] = 
Ál£
;

605 
_mm_s„n˚
();

606 
	ghash_ödex
->
u∆ock_íåy2
(
£g_lock
,
ªad_lock
);

607 
	gli°_nodeMëa
->
	gvÆid
[
moved_idx
[
i
]] = 
Ál£
;

614 
	g√w_nodeMëa
->
	g√xt_p
 = 
li°_nodeMëa
->
√xt_p
;

617 
pmem_√xt_wrôe
(
li°_d©aNode
,
√w_nodeMëa
->
my_off£t
);

618 
	gli°_nodeMëa
->
	g√xt_p
 = 
√w_nodeMëa
;

620 
Li°Node
* 
	gﬁd
;

621 
	gskùli°Node
->
	gmy_li°Node
.
lﬂd
()->
	gkey
 < 
	ghÆf_key
)

624 i‡(
	gskùli°Node
->
	gkey
 >
hÆf_key
)

626 
ﬁd
 = 
skùli°Node
->
my_li°Node
;

627 i‡(
	gﬁd
->
	gkey
 >
hÆf_key
)

629 i‡(
	gskùli°Node
->
	gmy_li°Node
.
com∑ª_exch™ge_°r⁄g
(
ﬁd
,
√w_li°Node
Ë=
Ál£
)

634 
	gskùli°Node
 = 
skùli°Node
->
√xt
[0];

638 
	gli°
->
ö£π_node
(
li°Node
,
√w_li°Node
);

642 
	gPH_Evi˘_Thªad
::
w¨m_to_cﬁd
(
Skùli°Node
* 
node
)

645 
Li°Node
* 
li°Node
;

646 
NodeMëa
 *
	gnodeMëa
 = 
nodeAddr_to_nodeMëa
(
node
->
d©a_node_addr
);

647 
D©aNode
 
	gd©aNode
 = *
nodeAddr_to_node
(
node
->
d©a_node_addr
);

648 
size_t
 
	g§c_off£t
 = (
NodeAddr
);

649 
	g˙t
 = 0;

650 
uöt64_t
 
	gkey
;

651 * 
	gaddr
 = (*)&
d©aNode
;

652 
E¡ryAddr
 
	gﬁd_ó
,
	g√w_ó
;

653 
	gi
;

654 
	g¶Ÿ_idx
;

656 
KVP
* 
	gkvp_p
;

657 
	g°d
::
©omic
<
uöt8_t
> *
£g_lock
;

659 
	gﬁd_ó
.
	gloc
 = 2;

660 
	gﬁd_ó
.
	gfûe_num
 = 
node
->
d©a_node_addr
.
poﬁ_num
;

663 
	g√w_ó
.
	gloc
 = 3;

666 
	g˙t
 = 0;

667 
	g˙t
 < 
	gnodeMëa
->
	g¶Ÿ_˙t
)

670 i‡(
	gnodeMëa
->
	gvÆid
[
˙t
] =
Ál£
)

672 ++
˙t
;

673 
	g§c_off£t
+=
ENTRY_SIZE
;

677 
	gkey
 = *(
uöt64_t
*)(
addr
+
§c_off£t
+
HEADER_SIZE
);

678 
	gli°Node
 = 
node
->
my_li°Node
;

679 
	gkey
 > 
	gli°Node
->
	g√xt
->key)

680 
	gli°Node
 = 
li°Node
->
√xt
;

682 
NodeMëa
* 
	gli°_nodeMëa
 = 
nodeAddr_to_nodeMëa
(
li°Node
->
d©a_node_addr
);

683 
D©aNode
* 
	gli°_d©aNode
 = 
nodeAddr_to_node
(
li°Node
->
d©a_node_addr
);

684 
	g√w_ó
.
	gfûe_num
 = 
li°Node
->
d©a_node_addr
.
poﬁ_num
;

688 
©_lock2
(
li°Node
->
lock
);

689 i‡(
	gkey
 > 
	gli°Node
->
	g√xt
->key)

691 
©_u∆ock2
(
li°Node
->
lock
);

695 
	g¶Ÿ_idx
=0;¶Ÿ_idx<
	gNODE_SLOT_MAX
;slot_idx++)

697 i‡(
	gli°_nodeMëa
->
	gvÆid
[
¶Ÿ_idx
] =
Ál£
)

700 i‡(
	g¶Ÿ_idx
 < 
	gNODE_SLOT_MAX
)

702 
	gﬁd_ó
.
	goff£t
 = 
node
->
d©a_node_addr
.
node_off£t
*
NODE_SIZE
 + 
§c_off£t
;

703 
	g√w_ó
.
	goff£t
 = 
li°Node
->
d©a_node_addr
.
node_off£t
*
NODE_SIZE
 + (
NodeAddr
Ë+ 
ENTRY_SIZE
*
¶Ÿ_idx
;

705 
	gkvp_p
 = 
hash_ödex
->
ö£π
(
key
,&
£g_lock
,
ªad_lock
);

707 i‡(
	gkvp_p
->
	gvÆue
 !
ﬁd_ó
.
vÆue
)

712 
hash_ödex
->
u∆ock_íåy2
(
£g_lock
,
ªad_lock
);

714 
©_u∆ock2
(
li°Node
->
lock
);

715 ++
	g˙t
;

716 
	g§c_off£t
+=
ENTRY_SIZE
;

721 
pmem_íåy_wrôe
((*)
li°_d©aNode
 + (
NodeAddr
Ë+ 
ENTRY_SIZE
*
¶Ÿ_idx
 , 
addr
 + 
§c_off£t
, ENTRY_SIZE);

722 
	gli°_nodeMëa
->
	gvÆid
[
¶Ÿ_idx
] = 
åue
;

723 ++
	gli°_nodeMëa
->
	gvÆid_˙t
;

729 
	gkvp_p
->
	gvîsi⁄
 = 
£t_loc_cﬁd
(
kvp_p
->
vîsi⁄
);

731 
	gkvp_p
->
	gvÆue
 = 
√w_ó
.
vÆue
;

732 
_mm_s„n˚
();

733 
	ghash_ödex
->
u∆ock_íåy2
(
£g_lock
,
ªad_lock
);

737 ++
	g˙t
;

738 
	g§c_off£t
+=
ENTRY_SIZE
;

746 
•lô_li°Node
(
li°Node
,
node
);

750 
©_u∆ock2
(
li°Node
->
lock
);

756 i‡(
	gnodeMëa
->
	gvÆid_˙t
)

758 
Skùli°Node
* 
	g√w_skùNode
 = 
NULL
;

760 
	g√w_skùNode
 = 
skùli°
->
Æloc_¶_node
();

762 i‡(
	g√w_skùNode
)

764 
uöt64_t
 
	ghÆf_key
;

765 
	ghÆf_key
 = 
föd_hÆf_ö_node
(
nodeMëa
,&
d©aNode
);

767 i‡(
	ghÆf_key
 > 
	gnode
->
	gkey
)

769 
	g√w_skùNode
->
	gkey
 = 
hÆf_key
;

771 
Li°Node
* 
	gli°_node
 = 
node
->
my_li°Node
;

772 
	gli°_node
->
	g√xt
->
	gkey
 < 
	ghÆf_key
)

773 
	gli°_node
 = 
li°_node
->
√xt
;

774 
	g√w_skùNode
->
	gmy_li°Node
 = 
li°_node
;

776 
Skùli°Node
* 
	g¥ev
[
MAX_LEVEL
+1];

777 
Skùli°Node
* 
	g√xt
[
MAX_LEVEL
+1];

778 
	gskùli°
->
ö£π_node
(
√w_skùNode
,
¥ev
,
√xt
);

781 
	gskùli°
->
‰ì_¶_node
(
√w_skùNode
);

794 
	gi
=0;i<
	gnodeMëa
->
	g¶Ÿ_˙t
;i++)

795 
	gnodeMëa
->
	gvÆid
[
i
] = 
Ál£
;

796 
	gnodeMëa
->
	gwrôãn_size
 = 0;

797 
	gnodeMëa
->
	g¶Ÿ_˙t
 = 0;

798 
	gnodeMëa
->
	gvÆid_˙t
 = 0;

804 
	gPH_Evi˘_Thªad
::
hŸ_to_w¨m
(
Skùli°Node
* 
node
,
boﬁ
 
f‹˚
)

807 
	gi
;

808 
LogLoc
 
	gŒ
;

809 * 
	gaddr
;

810 
uöt64_t
* 
	ghódî
;

811 
DoubÀLog
* 
	gdl
;

813 
size_t
 
	gíåy_li°_˙t
;

816 
NodeMëa
* 
	gnodeMëa
 = 
nodeAddr_to_nodeMëa
(
node
->
d©a_node_addr
);

820 
D©aNode
* 
	gd°_node
 = 
nodeAddr_to_node
(
node
->
d©a_node_addr
);

822 
uöt64_t
* 
	gﬁd_t‹n_hódî
 = 
NULL
;

823 
E¡ryAddr
 
	gﬁd_t‹n_addr
;

824 
size_t
 
	gﬁd_t‹n_right
 = 
node
->
t‹n_right
;

825 
boﬁ
 
	gmoved
[
NODE_SLOT_MAX
] = {
Ál£
,};

827 
size_t
 
	gwrôe_size
=0;

828 * 
	gbuf„r_wrôe_°¨t
 = 
ãmp_node
.
buf„r
+
nodeMëa
->
wrôãn_size
;

830 
	g°d
::
©omic
<
uöt8_t
>* 
£g_lock
;

838 i‡(
	gnode
->
	gt‹n_À·
)

840 
	gdl
 = &
doubÀLogLi°
[
node
->
t‹n_íåy
.
log_num
];

841 
	gaddr
 = 
dl
->
dømLogAddr
 + (
Œ
.
off£t
%dl->
my_size
);

842 
	gﬁd_t‹n_hódî
 = (
uöt64_t
*)
addr
;

843 
	gﬁd_t‹n_addr
.
	gloc
 = 0;

844 
	gﬁd_t‹n_addr
.
	gfûe_num
 = 
node
->
t‹n_íåy
.
log_num
;

845 
	gﬁd_t‹n_addr
.
	goff£t
 = 
Œ
.
off£t
%
dl
->
my_size
;

846 
mem˝y
(
buf„r_wrôe_°¨t
,
addr
+
node
->
t‹n_À·
,node->
t‹n_right
);

847 
	gwrôe_size
+=
node
->
t‹n_right
;

850 * 
	gﬁd_addr
[100];

852 
	gíåy_li°_˙t
 = 
node
->
íåy_li°
.
size
();

853 
	gi
=0;i<
	gíåy_li°_˙t
;i++)

855 
	gŒ
 = 
node
->
íåy_li°
[
i
];

856 
	gdl
 = &
doubÀLogLi°
[
Œ
.
log_num
];

857 
	gaddr
 = 
dl
->
dømLogAddr
 + (
Œ
.
off£t
%dl->
my_size
);

859 
	gﬁd_addr
[
i
] = 
addr
;

861 
	ghódî
 = (
uöt64_t
*)
addr
;

862 i‡(
	gdl
->
	gèû_sum
 > 
	gŒ
.
	goff£t
 || 
is_vÆid
(
hódî
Ë=
Ál£
)

864 
node
->
íåy_li°
[
i
].
log_num
 = -1;

868 
uöt64_t
 
	gkey
;

869 
	gkey
 = *(
uöt64_t
*)(
addr
+
HEADER_SIZE
);

870 i‡(
	gkey
 < 
	gnode
->key)

872 
¥ötf
("key is smallerÅhanÇode key\n");

875 
mem˝y
(
buf„r_wrôe_°¨t
+
wrôe_size
,
addr
,
ENTRY_SIZE
);

876 
	gwrôe_size
+=
ENTRY_SIZE
;

880 i‡(
	gf‹˚
)

882 
pmem_¡_wrôe
(
d°_node
->
buf„r
 + 
nodeMëa
->
wrôãn_size
 , 
buf„r_wrôe_°¨t
 , 
wrôe_size
);

883 
	gnode
->
	gt‹n_À·
 = 0;

884 
	gnode
->
	gt‹n_right
 = 0;

886 i‡(
	gwrôe_size
 > 0)

888 
	gnode
->
	gt‹n_íåy
 = 
Œ
;

889 
	gnode
->
	gt‹n_right
 = ((
NodeAddr
)+
nodeMëa
->
wrôãn_size
+
wrôe_size
Ë% 
PMEM_BUFFER_SIZE
;

890 
	gnode
->
	gt‹n_À·
 = 
ENTRY_SIZE
-
node
->
t‹n_right
;

891 
	gwrôe_size
-=
node
->
t‹n_right
;

893 
pmem_¡_wrôe
(
d°_node
->
buf„r
 + 
nodeMëa
->
wrôãn_size
 , 
buf„r_wrôe_°¨t
 , 
wrôe_size
);

894 --
	gíåy_li°_˙t
;

899 
_mm_s„n˚
();

901 
KVP
* 
	gkvp_p
;

902 
size_t
 
	gkey
;

904 
E¡ryAddr
 
	gd°_addr
,
	g§c_addr
;

905 
	gd°_addr
.
	gloc
 = 2;

906 
	gd°_addr
.
	gfûe_num
 = 
nodeMëa
->
my_off£t
.
poﬁ_num
;

907 
	gd°_addr
.
	goff£t
 = 
nodeMëa
->
my_off£t
.
node_off£t
 * 
NODE_SIZE
 + (
NodeAddr
Ë+ÇodeMëa->
wrôãn_size
;

909 i‡(
	gﬁd_t‹n_hódî
)

911 
¥ötf
("notÇow\n");

912 
	gkey
 = *(
uöt64_t
*)((*)
ﬁd_t‹n_hódî
+
HEADER_SIZE
);

913 
	gkvp_p
 = 
hash_ödex
->
ö£π
(
key
,&
£g_lock
,
ªad_lock
);

914 i‡(
	gkvp_p
->
	gvÆue
 =
ﬁd_t‹n_addr
.
vÆue
)

916 
kvp_p
->
vÆue
 = 
d°_addr
.value;

917 
	gkvp_p
->
	gvîsi⁄
 = 
£t_loc_w¨m
(
kvp_p
->
vîsi⁄
);

918 
	gnodeMëa
->
	gvÆid
[
nodeMëa
->
¶Ÿ_˙t
++] = 
åue
;

921 
	gnodeMëa
->
	gvÆid
[
nodeMëa
->
¶Ÿ_˙t
++] = 
Ál£
;

923 
	ghash_ödex
->
u∆ock_íåy2
(
£g_lock
,
ªad_lock
);

924 
£t_övÆid
(
ﬁd_t‹n_hódî
);

926 
	gd°_addr
.
	goff£t
+=
ﬁd_t‹n_right
;

929 
	g§c_addr
.
	gloc
 = 1;

931 
	gi
=0;i<
	gíåy_li°_˙t
;i++)

933 
	gŒ
 = 
node
->
íåy_li°
[
i
];

934 i‡(
	gŒ
.
	glog_num
 == -1)

936 
	gdl
 = &
doubÀLogLi°
[
Œ
.
log_num
];

937 
	gaddr
 = 
dl
->
dømLogAddr
 + (
Œ
.
off£t
%dl->
my_size
);

938 
	ghódî
 = (
uöt64_t
*)
addr
;

939 
	gkey
 = *(
uöt64_t
*)(
addr
+
HEADER_SIZE
);

943 
	g§c_addr
.
	gfûe_num
 = 
Œ
.
log_num
;

944 
	g§c_addr
.
	goff£t
 = 
Œ
.
off£t
%
dl
->
my_size
;

946 
	gkvp_p
 = 
hash_ödex
->
ö£π
(
key
,&
£g_lock
,
ªad_lock
);

947 i‡(
	gkvp_p
->
	gvÆue
 =
§c_addr
.
vÆue
)

949 
kvp_p
->
vÆue
 = 
d°_addr
.value;

950 
	gkvp_p
->
	gvîsi⁄
 = 
£t_loc_w¨m
(
kvp_p
->
vîsi⁄
);

951 
	gnodeMëa
->
	gvÆid
[
nodeMëa
->
¶Ÿ_˙t
++] = 
åue
;

952 ++
	gnodeMëa
->
	gvÆid_˙t
;

955 
	gnodeMëa
->
	gvÆid
[
nodeMëa
->
¶Ÿ_˙t
++] = 
Ál£
;

957 
	ghash_ödex
->
u∆ock_íåy2
(
£g_lock
,
ªad_lock
);

958 
£t_övÆid
(
hódî
);

960 i‡(
is_vÆid
((
uöt64_t
*)
addr
))

961 
¥ötf
("validÉrorr\n");

963 
	gd°_addr
.
	goff£t
+=
ENTRY_SIZE
;

966 
	gnodeMëa
->
	gwrôãn_size
+=
wrôe_size
;

971 
	gi
=0;i<
	gnode
->
	gíåy_li°
.
size
();i++)

973 
	gaddr
 = 
ﬁd_addr
[
i
];

974 
	ghódî
 = (
uöt64_t
*)
addr
;

975 
	gkey
 = *(
uöt64_t
*)(
addr
+
HEADER_SIZE
);

976 i‡(
is_vÆid
(
hódî
))

977 
¥ötf
("hotÅo warm validerror\n");

982 i‡(
	gnode
->
	gíåy_li°
.
size
(Ë* 
	gENTRY_SIZE
 !
node
->
íåy_size_sum
)

984 
¥ötf
("missm©ch %lu %lu\n",
node
->
íåy_li°
.
size
(Ë* 
ENTRY_SIZE
,Çode->
íåy_size_sum
);

987 
	gnode
->
	gíåy_li°
.
˛ór
();

988 
	gnode
->
	gíåy_size_sum
 = 0;

994 
	gPH_Evi˘_Thªad
::
åy_push
(
DoubÀLog
* 
dl
)

997 * 
addr
;

998 
uöt64_t
 
	ghódî
;

999 
	grv
=0;

1002 
	gdl
->
	gèû_sum
+
	gENTRY_SIZE
 <
dl
->
hód_sum
)

1004 
addr
 = 
dl
->
dømLogAddr
+(dl->
èû_sum
%dl->
my_size
);

1005 
	ghódî
 = *(
uöt64_t
*)
addr
;

1007 i‡(
is_vÆid
(
hódî
))

1009 
	gdl
->
	gèû_sum
+=
ENTRY_SIZE
;

1011 i‡(
	gdl
->
	gèû_sum
%dl->
	gmy_size
 + 
	gENTRY_SIZE
 > dl->my_size)

1012 
	gdl
->
	gèû_sum
+(
dl
->
my_size
 - (dl->
èû_sum
%dl->my_size));

1013 
	grv
 = 1;

1015  
	grv
;

1018 
	gPH_Evi˘_Thªad
::
åy_h¨d_evi˘
(
DoubÀLog
* 
dl
)

1023 * 
addr
;

1024 
uöt64_t
 
	ghódî
;

1025 
uöt64_t
 
	gkey
;

1026 
	grv
=0;

1034 i‡(
	gdl
->
	gèû_sum
 + dl->
	gmy_size
 <
dl
->
hód_sum
 + 
HARD_EVICT_SPACE
)

1037 
addr
 = 
dl
->
dømLogAddr
 + (dl->
èû_sum
 % dl->
my_size
);

1038 
	gkey
 = *(
uöt64_t
*)(
addr
+
HEADER_SIZE
);

1041 
Skùli°Node
* 
	g¥ev
[
MAX_LEVEL
+1];

1042 
Skùli°Node
* 
	g√xt
[
MAX_LEVEL
+1];

1043 
Skùli°Node
* 
	gnode
;

1045 
	gnode
 = 
skùli°
->
föd_node
(
key
,
¥ev
,
√xt
);

1046 i‡(
	gnode
->
	gíåy_li°
.
size
() == 0)

1047  
rv
;

1048 i‡(
åy_©_lock2
(
node
->
lock
Ë=
Ál£
)

1049  
rv
;

1051 
hŸ_to_w¨m
(
node
,
åue
);

1057 
©_u∆ock2
(
node
->
lock
);

1059 
	grv
 = 1;

1060 
åy_push
(
dl
);

1063  
	grv
;

1066 
	gPH_Evi˘_Thªad
::
åy_so·_evi˘
(
DoubÀLog
* 
dl
)

1068 * 
addr
;

1070 
uöt64_t
 
	ghódî
,
	gkey
;

1071 
	grv
 = 0;

1074 
Skùli°Node
* 
	g¥ev
[
MAX_LEVEL
+1];

1075 
Skùli°Node
* 
	g√xt
[
MAX_LEVEL
+1];

1076 
Skùli°Node
* 
	gnode
;

1077 
NodeMëa
* 
	gnodeMëa
;

1078 
LogLoc
 
	gŒ
;

1087 i‡(
	gdl
->
	gso·_adv_off£t
 < dl->
	gèû_sum
)

1088 
	gdl
->
	gso·_adv_off£t
 = 
dl
->
èû_sum
;

1090 
	gdl
->
	gso·_adv_off£t
 + 
	gENTRY_SIZE
 + dl->
	gmy_size
 <
dl
->
hód_sum
 + 
SOFT_EVICT_SPACE
)

1092 
addr
 = 
dl
->
dømLogAddr
 + ((dl->
so·_adv_off£t
Ë% dl->
my_size
);

1093 
	ghódî
 = *(
uöt64_t
*)
addr
;

1094 
	gkey
 = *(
uöt64_t
*)(
addr
+
HEADER_SIZE
);

1096 i‡(
is_vÆid
(
hódî
))

1098 
	grv
 = 1;

1100 
	gåue
)

1102 
	gnode
 = 
skùli°
->
föd_node
(
key
,
¥ev
,
√xt
);

1103 i‡(
åy_©_lock2
(
node
->
lock
Ë=
Ál£
)

1106 
	gnodeMëa
 = 
nodeAddr_to_nodeMëa
(
node
->
d©a_node_addr
);

1107 i‡((
	gNodeAddr
Ë+ 
	gnodeMëa
->
	gwrôãn_size
 + 
	gnode
->
	gíåy_size_sum
 + 
	gENTRY_SIZE
 > 
	gNODE_SIZE
)

1110 
hŸ_to_w¨m
(
node
,
åue
);

1112 i‡((
	gNodeAddr
Ë+ 
	gnodeMëa
->
	gwrôãn_size
 + 
	gENTRY_SIZE
 > 
	gNODE_SIZE
)

1113 
w¨m_to_cﬁd
(
node
);

1114 
©_u∆ock2
(
node
->
lock
);

1119 
	gŒ
.
	glog_num
 = 
dl
->
log_num
;

1120 
	gŒ
.
	goff£t
 = 
dl
->
so·_adv_off£t
;

1121 
	gnode
->
	gíåy_li°
.
push_back
(
Œ
);

1122 
	gnode
->
	gíåy_size_sum
+=
ENTRY_SIZE
;

1124 i‡(
	gkey
 < 
	gnode
->key)

1125 
¥ötf
("thread2 1026\n");

1133 #ifde‡
SOFT_FLUSH


1134 
hŸ_to_w¨m
(
node
,
Ál£
);

1136 
©_u∆ock2
(
node
->
lock
);

1141 
	gdl
->
	gso·_adv_off£t
+=
ENTRY_SIZE
;

1142 i‡((
	gdl
->
	gso·_adv_off£t
)%dl->
	gmy_size
 + 
	gENTRY_SIZE
 > dl->my_size)

1143 
	gdl
->
	gso·_adv_off£t
+=(
dl
->
my_size
-((dl->
so·_adv_off£t
)%dl->my_size));

1149  
	grv
;

1152 
	gPH_Evi˘_Thªad
::
evi˘_log
(
DoubÀLog
* 
dl
)

1154 
diff
=0;

1155 i‡(
åy_so·_evi˘
(
dl
))

1156 
	gdiff
 = 1;

1157 i‡(
åy_push
(
dl
))

1158 
	gdiff
 = 1;

1159 i‡(
åy_h¨d_evi˘
(
dl
))

1160 
	gdiff
 = 1;

1161 i‡(
åy_push
(
dl
))

1162 
	gdiff
 = 1;

1163  
	gdiff
;

1166 
	gPH_Evi˘_Thªad
::
evi˘_lo›
()

1168 
i
,
	gd⁄e
;

1170 
¥ötf
("evict start\n");

1171 
	gexô
 == 0)

1174 
›_check
();

1176 
	gd⁄e
 = 1;

1177 
	gi
=0;i<
	glog_˙t
;i++)

1179 i‡(
evi˘_log
(
log_li°
[
i
]))

1180 
	gd⁄e
 = 0;

1182 i‡(
	gd⁄e
)

1184 
	grun
 = 0;

1185 i‡(
	g¶ìp_time
 > 1000*1000)

1186 
¥ötf
("evict idle\n");

1188 
u¶ìp
(
¶ìp_time
);

1189 
_mm_m„n˚
();

1190 
sync_thªad
();

1191 
_mm_m„n˚
();

1192 
	grun
 = 1;

1193 i‡(
	g¶ìp_time
 < 1000*1000)

1194 
	g¶ìp_time
*=1.5;

1198 i‡(
	g¶ìp_time
 > 100*2)

1199 
	g¶ìp_time
*=0.5;

1202 
	grun
 = 0;

1203 
¥ötf
("evictÉnd\n");

	@thread2.h

4 
	~<c°döt
>

5 
	~<©omic
>

8 
	~"sh¨ed.h
"

10 
«me•a˚
 
	gPH


13 
	#QUERY_THREAD_MAX
 100

	)

14 
	#EVICT_THREAD_MAX
 100

	)

17 
˛ass
 
	gDoubÀLog
;

18 
˛ass
 
	gSkùli°Node
;

19 
˛ass
 
	gLi°Node
;

24 ˛as†
	cPH_Thªad


26 
	gpublic
:

27 
PH_Thªad
(Ë: 
lock
(0),
ªad_lock
(0),
run
(0),
exô
(0),
loˇl_£g_‰ì_hód
(0),
›_˙t
(0),
upd©e_ªque°
(0) {}

29 
upd©e_‰ì_˙t
();

30 
upd©e_èû_sum
();

31 
›_check
();

32 
sync_thªad
();

34 
	g°d
::
©omic
<
uöt8_t
> 
lock
;

35 vﬁ©ûê
uöt8_t
 
	gªad_lock
;

36 vﬁ©ûê
uöt8_t
 
	grun
;

37 vﬁ©ûê
uöt8_t
 
	gexô
;

38 vﬁ©ûê
size_t
 
	gloˇl_£g_‰ì_hód
;

39 
size_t
 
	g›_˙t
;

40 
	gupd©e_ªque°
;

42 
size_t
 
	gª˚¡_log_èûs
[64];

44 
	g∑ddög
[64];

47 ˛as†
	cPH_Quîy_Thªad
 : 
public
 
PH_Thªad


49 
¥iv©e
:

50 
DoubÀLog
* 
my_log
;

52 
	gpublic
:

53 
öô
();

54 
˛ón
();

56 
ö£π_›
(
uöt64_t
 
key
,* 
vÆue
);

57 
ªad_›
(
uöt64_t
 
key
,* 
buf
);

58 
dñëe_›
(
uöt64_t
 
key
);

59 
sˇn_›
(
uöt64_t
 
°¨t_key
,uöt64_à
íd_key
);

60 
√xt_›
(* 
buf
);

64 ˛as†
	cPH_Evi˘_Thªad
 : 
public
 
PH_Thªad


66 
¥iv©e
:

68 
evi˘_log
(
DoubÀLog
* 
dl
);

69 
åy_so·_evi˘
(
DoubÀLog
* 
dl
);

70 
åy_h¨d_evi˘
(
DoubÀLog
* 
dl
);

71 
åy_push
(
DoubÀLog
* 
dl
);

72 
hŸ_to_w¨m
(
Skùli°Node
* 
node
,
boﬁ
 
f‹˚
);

73 
w¨m_to_cﬁd
(
Skùli°Node
* 
node
);

74 
•lô_li°Node
(
Li°Node
* 
li°Node
,
Skùli°Node
* 
skùli°Node
);

76 
DoubÀLog
** 
	glog_li°
;

77 
	glog_˙t
;

79 
D©aNode
 
	gãmp_node
;

81 
size_t
 
	g¶ìp_time
;

83 
	gpublic
:

84 
öô
();

85 
˛ón
();

86 
evi˘_lo›
();

94 
size_t
 
gë_mö_èû
(
log_num
);

	@tree.cpp

1 
	~"åì.h
"

3 
	~<©omic
>

5 c⁄° 
size_t
 
	gNODE_POOL_LIST_SIZE
 = 1024;

6 c⁄° 
size_t
 
	gNODE_POOL_SIZE
 = 1024*1024;

8 c⁄° 
size_t
 
	gKEY_MIN
 0x0000000000000000

9 c⁄° 
size_t
 
	gKEY_MAX
 0xffffffffffffffff

11 
Tªe_Node
* 
	groŸ
;

13 
Tªe_Node
** 
	gnode_poﬁ_li°
;

14 
size_t
 
	gnode_poﬁ_˙t
;

15 
size_t
 
	gnode_poﬁ_li°_˙t
;

17 
Tªe_node
* 
	gnode_‰ì_hód
;

19 
	g°d
::
©omic
<
uöt8_t
> 
node_Æloc_lock
;

21 
	$åì_öô
()

23 
node_poﬁ_li°
 = (
Tªe_Node
**)
	`mÆloc
((Tªe_Node*Ë* 
NODE_POOL_LIST_SIZE
);

25 
node_poﬁ_li°
[0] = (
Tªe_Node
*)
	`mÆloc
((Tªe_NodeË* 
NODE_POOL_SIZE
);

26 
node_poﬁ_˙t
=0;

27 
node_poﬁ_li°_˙t
 = 0;

28 
node_‰ì_hód
 = 
NULL
;

30 
node_Æloc_lock
 = 0;

32 
roŸ
 = 
	`Æloc_åì_node
();

33 
roŸ
->
Àn
 = 0;

34 
roŸ
->
node_p
[0] =

36 
	}
}

38 
	$åì_˛ón
()

40 
i
;

41 
i
=0;i<=
node_poﬁ_li°_˙t
;i++)

43 
	`‰ì
(
node_poﬁ_li°
[
i
]);

45 
	`‰ì
(
node_poﬁ_li°
);

46 
	}
}

49 
Tªe_Node
* 
	$Æloc_åì_node
()

52 
node_Æloc_lock
);

53 
	`©_lock2
(
node_Æloc_lock
);

55 i‡(
node_‰ì_hód
)

57 
Tªe_Node
* 
rv
 = 
node_‰ì_hód
;

58 
node_‰ì_hód
 =Çode_‰ì_hód->
√xt
;

59 
	`©_u∆ock2
(
node_Æloc_lock
);

60  
rv
;

64 i‡(
node_poﬁ_˙t
 >
NODE_POOL_SIZE
)

66 i‡(
node_poﬁ_li°_˙t
 >
NODE_POOL_LIST_SIZE
)

67 
	`¥ötf
("no space forÇode!\n");

68 ++
node_poﬁ_li°_˙t
;

69 
node_poﬁ_li°
[
node_poﬁ_li°_˙t
] = (
Tªe_Node
*)
	`mÆloc
((Tªe_NodeË* 
NODE_POOL_SIZE
);

74 
	`©_u∆ock2
(
node_Æloc_lock
);

75  
node_poﬁ_li°
[
node_poﬁ_li°_˙t
][
node_poﬁ_˙t
++];

77 
	}
}

79 
	$‰ì_åì_node
(
Tªe_Node
* 
node
)

81 
	`©_lock2
(
node_Æloc_lock
);

82 
node
->
√xt
 = 
node_‰ì_hód
;

83 
node_‰ì_hód
 = 
node
;

84 
	`©_u∆ock2
(
node_Æloc_lock
);

85 
	}
}

	@tree.h

2 
«me•a˚
 
	gPH


5 c⁄° 
size_t
 
	gTREE_M
 = 8;

7 
	sTªe_Node


9 
size_t
 
	gkey
[
TREE_M
];

10 * 
	gnode_p
[
TREE_M
];

11 
size_t
 
	gÀn
;

12 
Tªe_Node
* 
	g√xt
;

15 
	sTªe_Lóf


17 * 
	g√xt
;

20 
åì_öô
();

21 
åì_˛ón
();

23 
Tªe_Node
* 
Æloc_åì_node
();

24 
‰ì_åì_node
(
Tªe_Node
* 
node
);

	@/usr/include/libpmem.h

14 #i‚de‡
LIBPMEM_H


15 
	#LIBPMEM_H
 1

	)

17 
	~<sys/ty≥s.h
>

19 #ifde‡
_WIN32


20 
	~<pmemcom∑t.h
>

22 #i‚de‡
PMDK_UTF8_API


23 
	#pmem_m≠_fûe
 
pmem_m≠_fûeW


	)

24 
	#pmem_check_vîsi⁄
 
pmem_check_vîsi⁄W


	)

25 
	#pmem_îr‹msg
 
pmem_îr‹msgW


	)

27 
	#pmem_m≠_fûe
 
pmem_m≠_fûeU


	)

28 
	#pmem_check_vîsi⁄
 
pmem_check_vîsi⁄U


	)

29 
	#pmem_îr‹msg
 
pmem_îr‹msgU


	)

34 #ifde‡
__˝lu•lus


42 
	#PMEM_MIN_PART
 ((
size_t
)(1024 * 1024 * 2)Ë

	)

47 
	#PMEM_FILE_CREATE
 (1 << 0)

	)

48 
	#PMEM_FILE_EXCL
 (1 << 1)

	)

49 
	#PMEM_FILE_SPARSE
 (1 << 2)

	)

50 
	#PMEM_FILE_TMPFILE
 (1 << 3)

	)

52 #i‚de‡
_WIN32


53 *
pmem_m≠_fûe
(c⁄° *
∑th
, 
size_t
 
Àn
, 
Êags
, 
mode_t
 
mode
,

54 
size_t
 *
m≠≥d_À≈
, *
is_pmemp
);

56 *
pmem_m≠_fûeU
(c⁄° *
∑th
, 
size_t
 
Àn
, 
Êags
, 
mode_t
 
mode
,

57 
size_t
 *
m≠≥d_À≈
, *
is_pmemp
);

58 *
pmem_m≠_fûeW
(c⁄° 
wch¨_t
 *
∑th
, 
size_t
 
Àn
, 
Êags
, 
mode_t
 
mode
,

59 
size_t
 *
m≠≥d_À≈
, *
is_pmemp
);

62 
pmem_unm≠
(*
addr
, 
size_t
 
Àn
);

63 
pmem_is_pmem
(c⁄° *
addr
, 
size_t
 
Àn
);

64 
pmem_≥rsi°
(c⁄° *
addr
, 
size_t
 
Àn
);

65 
pmem_msync
(c⁄° *
addr
, 
size_t
 
Àn
);

66 
pmem_has_auto_Êush
();

67 
pmem_Êush
(c⁄° *
addr
, 
size_t
 
Àn
);

68 
pmem_dìp_Êush
(c⁄° *
addr
, 
size_t
 
Àn
);

69 
pmem_dìp_døö
(c⁄° *
addr
, 
size_t
 
Àn
);

70 
pmem_dìp_≥rsi°
(c⁄° *
addr
, 
size_t
 
Àn
);

71 
pmem_døö
();

72 
pmem_has_hw_døö
();

74 *
pmem_memmove_≥rsi°
(*
pmemde°
, c⁄° *
§c
, 
size_t
 
Àn
);

75 *
pmem_mem˝y_≥rsi°
(*
pmemde°
, c⁄° *
§c
, 
size_t
 
Àn
);

76 *
pmem_mem£t_≥rsi°
(*
pmemde°
, 
c
, 
size_t
 
Àn
);

77 *
pmem_memmove_nodøö
(*
pmemde°
, c⁄° *
§c
, 
size_t
 
Àn
);

78 *
pmem_mem˝y_nodøö
(*
pmemde°
, c⁄° *
§c
, 
size_t
 
Àn
);

79 *
pmem_mem£t_nodøö
(*
pmemde°
, 
c
, 
size_t
 
Àn
);

81 
	#PMEM_F_MEM_NODRAIN
 (1U << 0)

	)

83 
	#PMEM_F_MEM_NONTEMPORAL
 (1U << 1)

	)

84 
	#PMEM_F_MEM_TEMPORAL
 (1U << 2)

	)

86 
	#PMEM_F_MEM_WC
 (1U << 3)

	)

87 
	#PMEM_F_MEM_WB
 (1U << 4)

	)

89 
	#PMEM_F_MEM_NOFLUSH
 (1U << 5)

	)

91 
	#PMEM_F_MEM_VALID_FLAGS
 (
PMEM_F_MEM_NODRAIN
 | \

92 
PMEM_F_MEM_NONTEMPORAL
 | \

93 
PMEM_F_MEM_TEMPORAL
 | \

94 
PMEM_F_MEM_WC
 | \

95 
PMEM_F_MEM_WB
 | \

96 
PMEM_F_MEM_NOFLUSH
)

	)

98 *
pmem_memmove
(*
pmemde°
, c⁄° *
§c
, 
size_t
 
Àn
, 
Êags
);

99 *
pmem_mem˝y
(*
pmemde°
, c⁄° *
§c
, 
size_t
 
Àn
, 
Êags
);

100 *
pmem_mem£t
(*
pmemde°
, 
c
, 
size_t
 
Àn
, 
Êags
);

108 
	#PMEM_MAJOR_VERSION
 1

	)

109 
	#PMEM_MINOR_VERSION
 1

	)

111 #i‚de‡
_WIN32


112 c⁄° *
pmem_check_vîsi⁄
(
maj‹_ªquúed
,

113 
mö‹_ªquúed
);

115 c⁄° *
pmem_check_vîsi⁄U
(
maj‹_ªquúed
,

116 
mö‹_ªquúed
);

117 c⁄° 
wch¨_t
 *
pmem_check_vîsi⁄W
(
maj‹_ªquúed
,

118 
mö‹_ªquúed
);

121 #i‚de‡
_WIN32


122 c⁄° *
pmem_îr‹msg
();

124 c⁄° *
pmem_îr‹msgU
();

125 c⁄° 
wch¨_t
 *
pmem_îr‹msgW
();

128 #ifde‡
__˝lu•lus


	@/usr/include/pthread.h

18 #i‚de‡
_PTHREAD_H


19 
	#_PTHREAD_H
 1

	)

21 
	~<„©uªs.h
>

22 
	~<sched.h
>

23 
	~<time.h
>

25 
	~<bôs/ídün.h
>

26 
	~<bôs/±hªadty≥s.h
>

27 
	~<bôs/£tjmp.h
>

28 
	~<bôs/w‹dsize.h
>

29 
	~<bôs/ty≥s/°ru˘_time•ec.h
>

30 
	~<bôs/ty≥s/__sig£t_t.h
>

31 
	~<bôs/ty≥s/°ru˘___jmp_buf_èg.h
>

32 #ifde‡
__USE_MISC


33 
	~<bôs/±hªad_°ack_mö-dy«mic.h
>

39 
	mPTHREAD_CREATE_JOINABLE
,

40 
	#PTHREAD_CREATE_JOINABLE
 
PTHREAD_CREATE_JOINABLE


	)

41 
	mPTHREAD_CREATE_DETACHED


42 
	#PTHREAD_CREATE_DETACHED
 
PTHREAD_CREATE_DETACHED


	)

49 
	mPTHREAD_MUTEX_TIMED_NP
,

50 
	mPTHREAD_MUTEX_RECURSIVE_NP
,

51 
	mPTHREAD_MUTEX_ERRORCHECK_NP
,

52 
	mPTHREAD_MUTEX_ADAPTIVE_NP


53 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


55 
	mPTHREAD_MUTEX_NORMAL
 = 
PTHREAD_MUTEX_TIMED_NP
,

56 
	mPTHREAD_MUTEX_RECURSIVE
 = 
PTHREAD_MUTEX_RECURSIVE_NP
,

57 
	mPTHREAD_MUTEX_ERRORCHECK
 = 
PTHREAD_MUTEX_ERRORCHECK_NP
,

58 
	mPTHREAD_MUTEX_DEFAULT
 = 
PTHREAD_MUTEX_NORMAL


60 #ifde‡
__USE_GNU


62 , 
	mPTHREAD_MUTEX_FAST_NP
 = 
PTHREAD_MUTEX_TIMED_NP


67 #ifde‡
__USE_XOPEN2K


71 
	mPTHREAD_MUTEX_STALLED
,

72 
	mPTHREAD_MUTEX_STALLED_NP
 = 
PTHREAD_MUTEX_STALLED
,

73 
	mPTHREAD_MUTEX_ROBUST
,

74 
	mPTHREAD_MUTEX_ROBUST_NP
 = 
PTHREAD_MUTEX_ROBUST


79 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


83 
	mPTHREAD_PRIO_NONE
,

84 
	mPTHREAD_PRIO_INHERIT
,

85 
	mPTHREAD_PRIO_PROTECT


90 
	#PTHREAD_MUTEX_INITIALIZER
 \

91 { { 
	`__PTHREAD_MUTEX_INITIALIZER
 (
PTHREAD_MUTEX_TIMED_NP
Ë} }

	)

92 #ifde‡
__USE_GNU


93 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
 \

94 { { 
	`__PTHREAD_MUTEX_INITIALIZER
 (
PTHREAD_MUTEX_RECURSIVE_NP
Ë} }

	)

95 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
 \

96 { { 
	`__PTHREAD_MUTEX_INITIALIZER
 (
PTHREAD_MUTEX_ERRORCHECK_NP
Ë} }

	)

97 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

98 { { 
	`__PTHREAD_MUTEX_INITIALIZER
 (
PTHREAD_MUTEX_ADAPTIVE_NP
Ë} }

	)

103 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


106 
	mPTHREAD_RWLOCK_PREFER_READER_NP
,

107 
	mPTHREAD_RWLOCK_PREFER_WRITER_NP
,

108 
	mPTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
,

109 
	mPTHREAD_RWLOCK_DEFAULT_NP
 = 
PTHREAD_RWLOCK_PREFER_READER_NP


114 
	#PTHREAD_RWLOCK_INITIALIZER
 \

115 { { 
	`__PTHREAD_RWLOCK_INITIALIZER
 (
PTHREAD_RWLOCK_DEFAULT_NP
Ë} }

	)

116 #ifde‡
__USE_GNU


117 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

118 { { 
	`__PTHREAD_RWLOCK_INITIALIZER
 (
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
Ë} }

	)

126 
	mPTHREAD_INHERIT_SCHED
,

127 
	#PTHREAD_INHERIT_SCHED
 
PTHREAD_INHERIT_SCHED


	)

128 
	mPTHREAD_EXPLICIT_SCHED


129 
	#PTHREAD_EXPLICIT_SCHED
 
PTHREAD_EXPLICIT_SCHED


	)

136 
	mPTHREAD_SCOPE_SYSTEM
,

137 
	#PTHREAD_SCOPE_SYSTEM
 
PTHREAD_SCOPE_SYSTEM


	)

138 
	mPTHREAD_SCOPE_PROCESS


139 
	#PTHREAD_SCOPE_PROCESS
 
PTHREAD_SCOPE_PROCESS


	)

146 
	mPTHREAD_PROCESS_PRIVATE
,

147 
	#PTHREAD_PROCESS_PRIVATE
 
PTHREAD_PROCESS_PRIVATE


	)

148 
	mPTHREAD_PROCESS_SHARED


149 
	#PTHREAD_PROCESS_SHARED
 
PTHREAD_PROCESS_SHARED


	)

155 
	#PTHREAD_COND_INITIALIZER
 { { {0}, {0}, {0, 0}, {0, 0}, 0, 0, {0, 0} } }

	)

159 
	s_±hªad_˛ónup_buf„r


161 (*
	m__routöe
) (*);

162 *
	m__¨g
;

163 
	m__ˇn˚…y≥
;

164 
_±hªad_˛ónup_buf„r
 *
	m__¥ev
;

170 
	mPTHREAD_CANCEL_ENABLE
,

171 
	#PTHREAD_CANCEL_ENABLE
 
PTHREAD_CANCEL_ENABLE


	)

172 
	mPTHREAD_CANCEL_DISABLE


173 
	#PTHREAD_CANCEL_DISABLE
 
PTHREAD_CANCEL_DISABLE


	)

177 
	mPTHREAD_CANCEL_DEFERRED
,

178 
	#PTHREAD_CANCEL_DEFERRED
 
PTHREAD_CANCEL_DEFERRED


	)

179 
	mPTHREAD_CANCEL_ASYNCHRONOUS


180 
	#PTHREAD_CANCEL_ASYNCHRONOUS
 
PTHREAD_CANCEL_ASYNCHRONOUS


	)

182 
	#PTHREAD_CANCELED
 ((*Ë-1)

	)

186 
	#PTHREAD_ONCE_INIT
 0

	)

189 #ifde‡
__USE_XOPEN2K


193 
	#PTHREAD_BARRIER_SERIAL_THREAD
 -1

	)

197 
__BEGIN_DECLS


202 
	$±hªad_¸óã
 (
±hªad_t
 *
__ª°ri˘
 
__√wthªad
,

203 c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

204 *(*
__°¨t_routöe
) (*),

205 *
__ª°ri˘
 
__¨g
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 3));

211 
	$±hªad_exô
 (*
__ªtvÆ
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

219 
	`±hªad_joö
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
);

221 #ifde‡
__USE_GNU


224 
	$±hªad_åyjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
Ë
__THROW
;

226 #i‚de‡
__USE_TIME_BITS64


233 
	`±hªad_timedjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
,

234 c⁄° 
time•ec
 *
__ab°ime
);

243 
	`±hªad_˛ockjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
,

244 
˛ockid_t
 
__˛ockid
,

245 c⁄° 
time•ec
 *
__ab°ime
);

247 #ifde‡
__REDIRECT


248 
	`__REDIRECT
 (
±hªad_timedjoö_≈
,

249 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
,

250 c⁄° 
time•ec
 *
__ab°ime
),

251 
__±hªad_timedjoö_≈64
);

253 
	`__REDIRECT
 (
±hªad_˛ockjoö_≈
,

254 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
,

255 
˛ockid_t
 
__˛ockid
,

256 c⁄° 
time•ec
 *
__ab°ime
),

257 
__±hªad_˛ockjoö_≈64
);

259 
	#±hªad_timedjoö_≈
 
__±hªad_timedjoö_≈64


	)

260 
	#±hªad_˛ockjoö_≈
 
__±hªad_˛ockjoö_≈64


	)

269 
	$±hªad_dëach
 (
±hªad_t
 
__th
Ë
__THROW
;

273 
±hªad_t
 
	$±hªad_£lf
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

276 
	$±hªad_equÆ
 (
±hªad_t
 
__thªad1
,Öthªad_à
__thªad2
)

277 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

285 
	$±hªad_©å_öô
 (
±hªad_©å_t
 *
__©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

288 
	$±hªad_©å_de°roy
 (
±hªad_©å_t
 *
__©å
)

289 
__THROW
 
	`__n⁄nuŒ
 ((1));

292 
	$±hªad_©å_gëdëach°©e
 (c⁄° 
±hªad_©å_t
 *
__©å
,

293 *
__dëach°©e
)

294 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

297 
	$±hªad_©å_£tdëach°©e
 (
±hªad_©å_t
 *
__©å
,

298 
__dëach°©e
)

299 
__THROW
 
	`__n⁄nuŒ
 ((1));

303 
	$±hªad_©å_gëgu¨dsize
 (c⁄° 
±hªad_©å_t
 *
__©å
,

304 
size_t
 *
__gu¨dsize
)

305 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

308 
	$±hªad_©å_£tgu¨dsize
 (
±hªad_©å_t
 *
__©å
,

309 
size_t
 
__gu¨dsize
)

310 
__THROW
 
	`__n⁄nuŒ
 ((1));

314 
	$±hªad_©å_gësched∑øm
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

315 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

316 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

319 
	$±hªad_©å_£tsched∑øm
 (
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

320 c⁄° 
sched_∑øm
 *
__ª°ri˘


321 
__∑øm
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

324 
	$±hªad_©å_gëschedpﬁicy
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


325 
__©å
, *
__ª°ri˘
 
__pﬁicy
)

326 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

329 
	$±hªad_©å_£tschedpﬁicy
 (
±hªad_©å_t
 *
__©å
, 
__pﬁicy
)

330 
__THROW
 
	`__n⁄nuŒ
 ((1));

333 
	$±hªad_©å_gëöhîôsched
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


334 
__©å
, *
__ª°ri˘
 
__öhîô
)

335 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

338 
	$±hªad_©å_£töhîôsched
 (
±hªad_©å_t
 *
__©å
,

339 
__öhîô
)

340 
__THROW
 
	`__n⁄nuŒ
 ((1));

344 
	$±hªad_©å_gësc›e
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

345 *
__ª°ri˘
 
__sc›e
)

346 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

349 
	$±hªad_©å_£tsc›e
 (
±hªad_©å_t
 *
__©å
, 
__sc›e
)

350 
__THROW
 
	`__n⁄nuŒ
 ((1));

353 
	$±hªad_©å_gë°ackaddr
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


354 
__©å
, **
__ª°ri˘
 
__°ackaddr
)

355 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__©åibuã_dïªˇãd__
;

361 
	$±hªad_©å_£t°ackaddr
 (
±hªad_©å_t
 *
__©å
,

362 *
__°ackaddr
)

363 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
;

366 
	$±hªad_©å_gë°acksize
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


367 
__©å
, 
size_t
 *
__ª°ri˘
 
__°acksize
)

368 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

373 
	$±hªad_©å_£t°acksize
 (
±hªad_©å_t
 *
__©å
,

374 
size_t
 
__°acksize
)

375 
__THROW
 
	`__n⁄nuŒ
 ((1));

377 #ifde‡
__USE_XOPEN2K


379 
	$±hªad_©å_gë°ack
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

380 **
__ª°ri˘
 
__°ackaddr
,

381 
size_t
 *
__ª°ri˘
 
__°acksize
)

382 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

387 
	$±hªad_©å_£t°ack
 (
±hªad_©å_t
 *
__©å
, *
__°ackaddr
,

388 
size_t
 
__°acksize
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

391 #ifde‡
__USE_GNU


394 
	$±hªad_©å_£èfföôy_≈
 (
±hªad_©å_t
 *
__©å
,

395 
size_t
 
__˝u£tsize
,

396 c⁄° 
˝u_£t_t
 *
__˝u£t
)

397 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

401 
	$±hªad_©å_gëafföôy_≈
 (c⁄° 
±hªad_©å_t
 *
__©å
,

402 
size_t
 
__˝u£tsize
,

403 
˝u_£t_t
 *
__˝u£t
)

404 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

407 
	$±hªad_gë©å_deÁu…_≈
 (
±hªad_©å_t
 *
__©å
)

408 
__THROW
 
	`__n⁄nuŒ
 ((1));

411 
	`±hªad_©å_£tsigmask_≈
 (
±hªad_©å_t
 *
__©å
,

412 c⁄° 
__sig£t_t
 *
sigmask
);

417 
	`±hªad_©å_gësigmask_≈
 (c⁄° 
±hªad_©å_t
 *
__©å
,

418 
__sig£t_t
 *
sigmask
);

422 
	#PTHREAD_ATTR_NO_SIGMASK_NP
 (-1)

	)

426 
	$±hªad_£èâr_deÁu…_≈
 (c⁄° 
±hªad_©å_t
 *
__©å
)

427 
__THROW
 
	`__n⁄nuŒ
 ((1));

432 
	$±hªad_gë©å_≈
 (
±hªad_t
 
__th
, 
±hªad_©å_t
 *
__©å
)

433 
__THROW
 
	`__n⁄nuŒ
 ((2));

441 
	$±hªad_£tsched∑øm
 (
±hªad_t
 
__èrgë_thªad
, 
__pﬁicy
,

442 c⁄° 
sched_∑øm
 *
__∑øm
)

443 
__THROW
 
	`__n⁄nuŒ
 ((3));

446 
	$±hªad_gësched∑øm
 (
±hªad_t
 
__èrgë_thªad
,

447 *
__ª°ri˘
 
__pﬁicy
,

448 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

449 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

452 
	$±hªad_£tsched¥io
 (
±hªad_t
 
__èrgë_thªad
, 
__¥io
)

453 
__THROW
;

456 #ifde‡
__USE_GNU


458 
	$±hªad_gë«me_≈
 (
±hªad_t
 
__èrgë_thªad
, *
__buf
,

459 
size_t
 
__buÊí
)

460 
__THROW
 
	`__n⁄nuŒ
 ((2));

463 
	$±hªad_£äame_≈
 (
±hªad_t
 
__èrgë_thªad
, c⁄° *
__«me
)

464 
__THROW
 
	`__n⁄nuŒ
 ((2));

468 #ifde‡
__USE_UNIX98


470 
	$±hªad_gëc⁄cuºícy
 (Ë
__THROW
;

473 
	$±hªad_£tc⁄cuºícy
 (
__Àvñ
Ë
__THROW
;

476 #ifde‡
__USE_GNU


477 
	$±hªad_yõld
 (Ë
__THROW
;

478 #ifde‡
__REDIRECT_NTH


479 
	`__REDIRECT_NTH
 (
±hªad_yõld
, (), 
sched_yõld
)

480 
	`__©åibuã_dïªˇãd_msg__
 ("\
_yield is deprecated, use sched_yield instead");

483 
	#±hªad_yõld
 
sched_yõld


	)

489 
	$±hªad_£èfföôy_≈
 (
±hªad_t
 
__th
, 
size_t
 
__˝u£tsize
,

490 c⁄° 
˝u_£t_t
 *
__˝u£t
)

491 
__THROW
 
	`__n⁄nuŒ
 ((3));

494 
	$±hªad_gëafföôy_≈
 (
±hªad_t
 
__th
, 
size_t
 
__˝u£tsize
,

495 
˝u_£t_t
 *
__˝u£t
)

496 
__THROW
 
	`__n⁄nuŒ
 ((3));

509 
	$±hªad_⁄˚
 (
±hªad_⁄˚_t
 *
__⁄˚_c⁄åﬁ
,

510 (*
__öô_routöe
Ë()Ë
	`__n⁄nuŒ
 ((1, 2));

521 
	`±hªad_£tˇn˚l°©e
 (
__°©e
, *
__ﬁd°©e
);

525 
	`±hªad_£tˇn˚…y≥
 (
__ty≥
, *
__ﬁdty≥
);

528 
	`±hªad_ˇn˚l
 (
±hªad_t
 
__th
);

533 
	`±hªad_ã°ˇn˚l
 ();

538 
	s__ˇn˚l_jmp_buf_èg


540 
__jmp_buf
 
__ˇn˚l_jmp_buf
;

541 
__mask_was_ßved
;

546 
__ˇn˚l_jmp_buf_èg
 
__ˇn˚l_jmp_buf
[1];

547 *
__∑d
[4];

548 } 
	t__±hªad_unwöd_buf_t
 
	t__©åibuã__
 ((
	t__Æig√d__
));

551 #i‚de‡
__˛ónup_f˘_©åibuã


552 
	#__˛ónup_f˘_©åibuã


	)

557 
	s__±hªad_˛ónup_‰ame


559 (*
__ˇn˚l_routöe
) (*);

560 *
__ˇn˚l_¨g
;

561 
__do_ô
;

562 
__ˇn˚l_ty≥
;

565 #i‡
deföed
 
__GNUC__
 && deföed 
__EXCEPTIONS


566 #ifde‡
__˝lu•lus


568 ˛as†
	c__±hªad_˛ónup_˛ass


570 (*
__ˇn˚l_routöe
) (*);

571 *
__ˇn˚l_¨g
;

572 
__do_ô
;

573 
__ˇn˚l_ty≥
;

575 
public
:

576 
	$__±hªad_˛ónup_˛ass
 ((*
__f˘
Ë(*), *
__¨g
)

577 : 
	`__ˇn˚l_routöe
 (
__f˘
), 
	`__ˇn˚l_¨g
 (
__¨g
), 
	$__do_ô
 (1) { }

578 ~
	$__±hªad_˛ónup_˛ass
 (Ë{ i‡(
__do_ô
Ë
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); 
	}
}

579 
	$__£tdoô
 (
__√wvÆ
Ë{ 
__do_ô
 = __√wvÆ; 
	}
}

580 
	$__de„r
 (Ë{ 
	`±hªad_£tˇn˚…y≥
 (
PTHREAD_CANCEL_DEFERRED
,

581 &
__ˇn˚l_ty≥
); 
	}
}

582 
	$__ª°‹e
 (Ëc⁄° { 
	`±hªad_£tˇn˚…y≥
 (
__ˇn˚l_ty≥
, 0); 
	}
}

592 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

594 
__±hªad_˛ónup_˛ass
 
	`__˛‰ame
 (
routöe
, 
¨g
)

	)

598 
	#±hªad_˛ónup_p›
(
execuã
) \

599 
__˛‰ame
.
	`__£tdoô
 (
execuã
); \

600 } 0)

	)

602 #ifde‡
__USE_GNU


606 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

608 
__±hªad_˛ónup_˛ass
 
	`__˛‰ame
 (
routöe
, 
¨g
); \

609 
__˛‰ame
.
	`__de„r
 ()

	)

614 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

615 
__˛‰ame
.
	`__ª°‹e
 (); \

616 
__˛‰ame
.
	`__£tdoô
 (
execuã
); \

617 } 0)

	)

624 
__exã∫_ölöe
 

625 
	$__±hªad_˛ónup_routöe
 (
__±hªad_˛ónup_‰ame
 *
__‰ame
)

627 i‡(
__‰ame
->
__do_ô
)

628 
__‰ame
->
	`__ˇn˚l_routöe
 (__‰ame->
__ˇn˚l_¨g
);

629 
	}
}

638 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

640 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

641 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__±hªad_˛ónup_routöe
))) \

642 { .
__ˇn˚l_routöe
 = (
routöe
), .
__ˇn˚l_¨g
 = (
¨g
), \

643 .
__do_ô
 = 1 };

	)

647 
	#±hªad_˛ónup_p›
(
execuã
) \

648 
__˛‰ame
.
__do_ô
 = (
execuã
); \

649 } 0)

	)

651 #ifde‡
__USE_GNU


655 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

657 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

658 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__±hªad_˛ónup_routöe
))) \

659 { .
__ˇn˚l_routöe
 = (
routöe
), .
__ˇn˚l_¨g
 = (
¨g
), \

660 .
__do_ô
 = 1 }; \

661 (Ë
	`±hªad_£tˇn˚…y≥
 (
PTHREAD_CANCEL_DEFERRED
, \

662 &
__˛‰ame
.
__ˇn˚l_ty≥
)

	)

667 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

668 (Ë
	`±hªad_£tˇn˚…y≥
 (
__˛‰ame
.
__ˇn˚l_ty≥
, 
NULL
); \

669 
__˛‰ame
.
__do_ô
 = (
execuã
); \

670 } 0)

	)

681 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

683 
__±hªad_unwöd_buf_t
 
__ˇn˚l_buf
; \

684 (*
__ˇn˚l_routöe
Ë(*Ë(
routöe
); \

685 *
__ˇn˚l_¨g
 = (
¨g
); \

686 
__nŸ_fú°_ˇŒ
 = 
	`__sig£tjmp_ˇn˚l
 (
__ˇn˚l_buf
.
__ˇn˚l_jmp_buf
, \

688 i‡(
	`__glibc_u∆ikñy
 (
__nŸ_fú°_ˇŒ
)) \

690 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

691 
	`__±hªad_unwöd_√xt
 (&
__ˇn˚l_buf
); \

695 
	`__±hªad_ªgi°î_ˇn˚l
 (&
__ˇn˚l_buf
); \

696 dÿ{

	)

697 
__±hªad_ªgi°î_ˇn˚l
 (
__±hªad_unwöd_buf_t
 *
__buf
)

698 
__˛ónup_f˘_©åibuã
;

702 
	#±hªad_˛ónup_p›
(
execuã
) \

705 
	`__±hªad_uƒegi°î_ˇn˚l
 (&
__ˇn˚l_buf
); \

706 i‡(
execuã
) \

707 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

708 } 0)

	)

709 
	$__±hªad_uƒegi°î_ˇn˚l
 (
__±hªad_unwöd_buf_t
 *
__buf
)

710 
__˛ónup_f˘_©åibuã
;

712 #ifde‡
__USE_GNU


716 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

718 
__±hªad_unwöd_buf_t
 
__ˇn˚l_buf
; \

719 (*
__ˇn˚l_routöe
Ë(*Ë(
routöe
); \

720 *
__ˇn˚l_¨g
 = (
¨g
); \

721 
__nŸ_fú°_ˇŒ
 = 
	`__sig£tjmp_ˇn˚l
 (
__ˇn˚l_buf
.
__ˇn˚l_jmp_buf
, \

723 i‡(
	`__glibc_u∆ikñy
 (
__nŸ_fú°_ˇŒ
)) \

725 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

726 
	`__±hªad_unwöd_√xt
 (&
__ˇn˚l_buf
); \

730 
	`__±hªad_ªgi°î_ˇn˚l_de„r
 (&
__ˇn˚l_buf
); \

731 dÿ{

	)

732 
	`__±hªad_ªgi°î_ˇn˚l_de„r
 (
__±hªad_unwöd_buf_t
 *
__buf
)

733 
__˛ónup_f˘_©åibuã
;

738 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

741 
	`__±hªad_uƒegi°î_ˇn˚l_ª°‹e
 (&
__ˇn˚l_buf
); \

742 i‡(
execuã
) \

743 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

744 
	}
} 0)

	)

745 
	$__±hªad_uƒegi°î_ˇn˚l_ª°‹e
 (
__±hªad_unwöd_buf_t
 *
__buf
)

746 
__˛ónup_f˘_©åibuã
;

750 
	$__±hªad_unwöd_√xt
 (
__±hªad_unwöd_buf_t
 *
__buf
)

751 
__˛ónup_f˘_©åibuã
 
	`__©åibuã__
 ((
__n‹ëu∫__
))

752 #i‚de‡
SHARED


753 
	`__©åibuã__
 ((
__wók__
))

765 #i‡
	`__GNUC_PREREQ
 (11, 0)

766 
	`__REDIRECT_NTHNL
 (
__sig£tjmp_ˇn˚l
,

767 (
__ˇn˚l_jmp_buf_èg
 
__ív
[1],

768 
__ßvemask
),

769 
__sig£tjmp
Ë
__©åibuã_ªtu∫s_twi˚__
;

771 
	#__sig£tjmp_ˇn˚l
(
ív
, 
ßvemask
) \

772 
	`__sig£tjmp
 ((
__jmp_buf_èg
 *Ë(*Ë(
ív
), (
ßvemask
))

	)

773 
	$__sig£tjmp
 (
__jmp_buf_èg
 
__ív
[1],

774 
__ßvemask
Ë
__THROWNL
;

781 
	$±hªad_muãx_öô
 (
±hªad_muãx_t
 *
__muãx
,

782 c⁄° 
±hªad_muãx©å_t
 *
__muãx©å
)

783 
__THROW
 
	`__n⁄nuŒ
 ((1));

786 
	$±hªad_muãx_de°roy
 (
±hªad_muãx_t
 *
__muãx
)

787 
__THROW
 
	`__n⁄nuŒ
 ((1));

790 
	$±hªad_muãx_åylock
 (
±hªad_muãx_t
 *
__muãx
)

791 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

794 
	$±hªad_muãx_lock
 (
±hªad_muãx_t
 *
__muãx
)

795 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

797 #ifde‡
__USE_XOPEN2K


799 #i‚de‡
__USE_TIME_BITS64


800 
	$±hªad_muãx_timedlock
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

801 c⁄° 
time•ec
 *
__ª°ri˘


802 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 2));

804 #ifde‡
__REDIRECT_NTHNL


805 
	`__REDIRECT_NTHNL
 (
±hªad_muãx_timedlock
,

806 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

807 c⁄° 
time•ec
 *
__ª°ri˘
 
__ab°ime
),

808 
__±hªad_muãx_timedlock64
Ë
	`__n⁄nuŒ
 ((1, 2));

810 
	#±hªad_muãx_timedlock
 
__±hªad_muãx_timedlock64


	)

815 #ifde‡
__USE_GNU


816 #i‚de‡
__USE_TIME_BITS64


817 
	$±hªad_muãx_˛ocklock
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

818 
˛ockid_t
 
__˛ockid
,

819 c⁄° 
time•ec
 *
__ª°ri˘


820 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 3));

822 #ifde‡
__REDIRECT_NTHNL


823 
	`__REDIRECT_NTHNL
 (
±hªad_muãx_˛ocklock
,

824 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

825 
˛ockid_t
 
__˛ockid
,

826 c⁄° 
time•ec
 *
__ª°ri˘
 
__ab°ime
),

827 
__±hªad_muãx_˛ocklock64
Ë
	`__n⁄nuŒ
 ((1, 3));

829 
	#±hªad_muãx_˛ocklock
 
__±hªad_muãx_˛ocklock64


	)

835 
	$±hªad_muãx_u∆ock
 (
±hªad_muãx_t
 *
__muãx
)

836 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

840 
	$±hªad_muãx_gë¥io˚ûög
 (c⁄° 
±hªad_muãx_t
 *

841 
__ª°ri˘
 
__muãx
,

842 *
__ª°ri˘
 
__¥io˚ûög
)

843 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

847 
	$±hªad_muãx_£çrio˚ûög
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

848 
__¥io˚ûög
,

849 *
__ª°ri˘
 
__ﬁd_˚ûög
)

850 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

853 #ifde‡
__USE_XOPEN2K8


855 
	$±hªad_muãx_c⁄si°ít
 (
±hªad_muãx_t
 *
__muãx
)

856 
__THROW
 
	`__n⁄nuŒ
 ((1));

857 #ifde‡
__USE_GNU


858 #ifde‡
__REDIRECT_NTH


859 
	`__REDIRECT_NTH
 (
±hªad_muãx_c⁄si°ít_≈
, (
±hªad_muãx_t
 *),

860 
±hªad_muãx_c⁄si°ít
Ë
	`__n⁄nuŒ
 ((1))

861 
	`__©åibuã_dïªˇãd_msg__
 ("\
_mutex_consistent_np is deprecated, useÖthread_mutex_consistent");

864 
	#±hªad_muãx_c⁄si°ít_≈
 
±hªad_muãx_c⁄si°ít


	)

874 
	$±hªad_muãx©å_öô
 (
±hªad_muãx©å_t
 *
__©å
)

875 
__THROW
 
	`__n⁄nuŒ
 ((1));

878 
	$±hªad_muãx©å_de°roy
 (
±hªad_muãx©å_t
 *
__©å
)

879 
__THROW
 
	`__n⁄nuŒ
 ((1));

882 
	$±hªad_muãx©å_gëpsh¨ed
 (c⁄° 
±hªad_muãx©å_t
 *

883 
__ª°ri˘
 
__©å
,

884 *
__ª°ri˘
 
__psh¨ed
)

885 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

888 
	$±hªad_muãx©å_£çsh¨ed
 (
±hªad_muãx©å_t
 *
__©å
,

889 
__psh¨ed
)

890 
__THROW
 
	`__n⁄nuŒ
 ((1));

892 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


894 
	$±hªad_muãx©å_gëty≥
 (c⁄° 
±hªad_muãx©å_t
 *
__ª°ri˘


895 
__©å
, *
__ª°ri˘
 
__köd
)

896 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

901 
	$±hªad_muãx©å_£ây≥
 (
±hªad_muãx©å_t
 *
__©å
, 
__köd
)

902 
__THROW
 
	`__n⁄nuŒ
 ((1));

906 
	$±hªad_muãx©å_gë¥Ÿocﬁ
 (c⁄° 
±hªad_muãx©å_t
 *

907 
__ª°ri˘
 
__©å
,

908 *
__ª°ri˘
 
__¥Ÿocﬁ
)

909 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

913 
	$±hªad_muãx©å_£çrŸocﬁ
 (
±hªad_muãx©å_t
 *
__©å
,

914 
__¥Ÿocﬁ
)

915 
__THROW
 
	`__n⁄nuŒ
 ((1));

918 
	$±hªad_muãx©å_gë¥io˚ûög
 (c⁄° 
±hªad_muãx©å_t
 *

919 
__ª°ri˘
 
__©å
,

920 *
__ª°ri˘
 
__¥io˚ûög
)

921 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

924 
	$±hªad_muãx©å_£çrio˚ûög
 (
±hªad_muãx©å_t
 *
__©å
,

925 
__¥io˚ûög
)

926 
__THROW
 
	`__n⁄nuŒ
 ((1));

928 #ifde‡
__USE_XOPEN2K


930 
	$±hªad_muãx©å_gërobu°
 (c⁄° 
±hªad_muãx©å_t
 *
__©å
,

931 *
__robu°√ss
)

932 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

933 #ifde‡
__USE_GNU


934 #ifde‡
__REDIRECT_NTH


935 
	`__REDIRECT_NTH
 (
±hªad_muãx©å_gërobu°_≈
,

936 (
±hªad_muãx©å_t
 *, *),

937 
±hªad_muãx©å_gërobu°
Ë
	`__n⁄nuŒ
 ((1))

938 
	`__©åibuã_dïªˇãd_msg__
 ("\
_mutexattr_getrobust_np is deprecated, useÖthread_mutexattr_getrobust");

941 
	#±hªad_muãx©å_gërobu°_≈
 
±hªad_muãx©å_gërobu°


	)

946 
	$±hªad_muãx©å_£åobu°
 (
±hªad_muãx©å_t
 *
__©å
,

947 
__robu°√ss
)

948 
__THROW
 
	`__n⁄nuŒ
 ((1));

949 #ifde‡
__USE_GNU


950 #ifde‡
__REDIRECT_NTH


951 
	`__REDIRECT_NTH
 (
±hªad_muãx©å_£åobu°_≈
,

952 (
±hªad_muãx©å_t
 *, ),

953 
±hªad_muãx©å_£åobu°
Ë
	`__n⁄nuŒ
 ((1))

954 
	`__©åibuã_dïªˇãd_msg__
 ("\
_mutexattr_setrobust_np is deprecated, useÖthread_mutexattr_setrobust");

957 
	#±hªad_muãx©å_£åobu°_≈
 
±hªad_muãx©å_£åobu°


	)

962 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


967 
	$±hªad_rwlock_öô
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

968 c⁄° 
±hªad_rwlock©å_t
 *
__ª°ri˘


969 
__©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

972 
	$±hªad_rwlock_de°roy
 (
±hªad_rwlock_t
 *
__rwlock
)

973 
__THROW
 
	`__n⁄nuŒ
 ((1));

976 
	$±hªad_rwlock_rdlock
 (
±hªad_rwlock_t
 *
__rwlock
)

977 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

980 
	$±hªad_rwlock_åyrdlock
 (
±hªad_rwlock_t
 *
__rwlock
)

981 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

983 #ifde‡
__USE_XOPEN2K


985 #i‚de‡
__USE_TIME_BITS64


986 
	$±hªad_rwlock_timedrdlock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

987 c⁄° 
time•ec
 *
__ª°ri˘


988 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 2));

990 #ifde‡
__REDIRECT_NTHNL


991 
	`__REDIRECT_NTHNL
 (
±hªad_rwlock_timedrdlock
,

992 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

993 c⁄° 
time•ec
 *
__ª°ri˘
 
__ab°ime
),

994 
__±hªad_rwlock_timedrdlock64
)

995 
	`__n⁄nuŒ
 ((1, 2));

997 
	#±hªad_rwlock_timedrdlock
 
__±hªad_rwlock_timedrdlock64


	)

1002 #ifde‡
__USE_GNU


1003 #i‚de‡
__USE_TIME_BITS64


1004 
	$±hªad_rwlock_˛ockrdlock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

1005 
˛ockid_t
 
__˛ockid
,

1006 c⁄° 
time•ec
 *
__ª°ri˘


1007 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 3));

1009 #ifde‡
__REDIRECT_NTHNL


1010 
	`__REDIRECT_NTHNL
 (
±hªad_rwlock_˛ockrdlock
,

1011 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

1012 
˛ockid_t
 
__˛ockid
,

1013 c⁄° 
time•ec
 *
__ª°ri˘
 
__ab°ime
),

1014 
__±hªad_rwlock_˛ockrdlock64
)

1015 
	`__n⁄nuŒ
 ((1, 3));

1017 
	#±hªad_rwlock_˛ockrdlock
 
__±hªad_rwlock_˛ockrdlock64


	)

1023 
	$±hªad_rwlock_wæock
 (
±hªad_rwlock_t
 *
__rwlock
)

1024 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1027 
	$±hªad_rwlock_åywæock
 (
±hªad_rwlock_t
 *
__rwlock
)

1028 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1030 #ifde‡
__USE_XOPEN2K


1032 #i‚de‡
__USE_TIME_BITS64


1033 
	$±hªad_rwlock_timedwæock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

1034 c⁄° 
time•ec
 *
__ª°ri˘


1035 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 2));

1037 #ifde‡
__REDIRECT_NTHNL


1038 
	`__REDIRECT_NTHNL
 (
±hªad_rwlock_timedwæock
,

1039 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

1040 c⁄° 
time•ec
 *
__ª°ri˘
 
__ab°ime
),

1041 
__±hªad_rwlock_timedwæock64
)

1042 
	`__n⁄nuŒ
 ((1, 2));

1044 
	#±hªad_rwlock_timedwæock
 
__±hªad_rwlock_timedwæock64


	)

1049 #ifde‡
__USE_GNU


1050 #i‚de‡
__USE_TIME_BITS64


1051 
	$±hªad_rwlock_˛ockwæock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

1052 
˛ockid_t
 
__˛ockid
,

1053 c⁄° 
time•ec
 *
__ª°ri˘


1054 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 3));

1057 #ifde‡
__REDIRECT_NTHNL


1058 
	`__REDIRECT_NTHNL
 (
±hªad_rwlock_˛ockwæock
,

1059 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

1060 
˛ockid_t
 
__˛ockid
,

1061 c⁄° 
time•ec
 *
__ª°ri˘
 
__ab°ime
),

1062 
__±hªad_rwlock_˛ockwæock64
)

1063 
	`__n⁄nuŒ
 ((1, 3));

1065 
	#±hªad_rwlock_˛ockwæock
 
__±hªad_rwlock_˛ockwæock64


	)

1071 
	$±hªad_rwlock_u∆ock
 (
±hªad_rwlock_t
 *
__rwlock
)

1072 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1078 
	$±hªad_rwlock©å_öô
 (
±hªad_rwlock©å_t
 *
__©å
)

1079 
__THROW
 
	`__n⁄nuŒ
 ((1));

1082 
	$±hªad_rwlock©å_de°roy
 (
±hªad_rwlock©å_t
 *
__©å
)

1083 
__THROW
 
	`__n⁄nuŒ
 ((1));

1086 
	$±hªad_rwlock©å_gëpsh¨ed
 (c⁄° 
±hªad_rwlock©å_t
 *

1087 
__ª°ri˘
 
__©å
,

1088 *
__ª°ri˘
 
__psh¨ed
)

1089 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1092 
	$±hªad_rwlock©å_£çsh¨ed
 (
±hªad_rwlock©å_t
 *
__©å
,

1093 
__psh¨ed
)

1094 
__THROW
 
	`__n⁄nuŒ
 ((1));

1097 
	$±hªad_rwlock©å_gëköd_≈
 (c⁄° 
±hªad_rwlock©å_t
 *

1098 
__ª°ri˘
 
__©å
,

1099 *
__ª°ri˘
 
__¥ef
)

1100 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1103 
	$±hªad_rwlock©å_£tköd_≈
 (
±hªad_rwlock©å_t
 *
__©å
,

1104 
__¥ef
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

1112 
	$±hªad_c⁄d_öô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

1113 c⁄° 
±hªad_c⁄d©å_t
 *
__ª°ri˘
 
__c⁄d_©å
)

1114 
__THROW
 
	`__n⁄nuŒ
 ((1));

1117 
	$±hªad_c⁄d_de°roy
 (
±hªad_c⁄d_t
 *
__c⁄d
)

1118 
__THROW
 
	`__n⁄nuŒ
 ((1));

1121 
	$±hªad_c⁄d_sig«l
 (
±hªad_c⁄d_t
 *
__c⁄d
)

1122 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1125 
	$±hªad_c⁄d_brﬂdˇ°
 (
±hªad_c⁄d_t
 *
__c⁄d
)

1126 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1133 
	$±hªad_c⁄d_waô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

1134 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
)

1135 
	`__n⁄nuŒ
 ((1, 2));

1144 #i‚de‡
__USE_TIME_BITS64


1145 
	$±hªad_c⁄d_timedwaô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

1146 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

1147 c⁄° 
time•ec
 *
__ª°ri˘
 
__ab°ime
)

1148 
	`__n⁄nuŒ
 ((1, 2, 3));

1150 #ifde‡
__REDIRECT


1151 
	`__REDIRECT
 (
±hªad_c⁄d_timedwaô
,

1152 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

1153 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

1154 c⁄° 
time•ec
 *
__ª°ri˘
 
__ab°ime
),

1155 
__±hªad_c⁄d_timedwaô64
)

1156 
	`__n⁄nuŒ
 ((1, 2, 3));

1158 
	#±hªad_c⁄d_timedwaô
 
__±hªad_c⁄d_timedwaô64


	)

1162 #ifde‡
__USE_GNU


1170 #i‚de‡
__USE_TIME_BITS64


1171 
	$±hªad_c⁄d_˛ockwaô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

1172 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

1173 
__˛ockid_t
 
__˛ock_id
,

1174 c⁄° 
time•ec
 *
__ª°ri˘
 
__ab°ime
)

1175 
	`__n⁄nuŒ
 ((1, 2, 4));

1177 #ifde‡
__REDIRECT


1178 
	`__REDIRECT
 (
±hªad_c⁄d_˛ockwaô
,

1179 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

1180 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

1181 
__˛ockid_t
 
__˛ock_id
,

1182 c⁄° 
time•ec
 *
__ª°ri˘
 
__ab°ime
),

1183 
__±hªad_c⁄d_˛ockwaô64
)

1184 
	`__n⁄nuŒ
 ((1, 2, 4));

1186 
	#±hªad_c⁄d_˛ockwaô
 
__±hªad_c⁄d_˛ockwaô64


	)

1194 
	$±hªad_c⁄d©å_öô
 (
±hªad_c⁄d©å_t
 *
__©å
)

1195 
__THROW
 
	`__n⁄nuŒ
 ((1));

1198 
	$±hªad_c⁄d©å_de°roy
 (
±hªad_c⁄d©å_t
 *
__©å
)

1199 
__THROW
 
	`__n⁄nuŒ
 ((1));

1202 
	$±hªad_c⁄d©å_gëpsh¨ed
 (c⁄° 
±hªad_c⁄d©å_t
 *

1203 
__ª°ri˘
 
__©å
,

1204 *
__ª°ri˘
 
__psh¨ed
)

1205 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1208 
	$±hªad_c⁄d©å_£çsh¨ed
 (
±hªad_c⁄d©å_t
 *
__©å
,

1209 
__psh¨ed
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

1211 #ifde‡
__USE_XOPEN2K


1213 
	$±hªad_c⁄d©å_gë˛ock
 (c⁄° 
±hªad_c⁄d©å_t
 *

1214 
__ª°ri˘
 
__©å
,

1215 
__˛ockid_t
 *
__ª°ri˘
 
__˛ock_id
)

1216 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1219 
	$±hªad_c⁄d©å_£t˛ock
 (
±hªad_c⁄d©å_t
 *
__©å
,

1220 
__˛ockid_t
 
__˛ock_id
)

1221 
__THROW
 
	`__n⁄nuŒ
 ((1));

1225 #ifde‡
__USE_XOPEN2K


1230 
	$±hªad_•ö_öô
 (
±hªad_•ölock_t
 *
__lock
, 
__psh¨ed
)

1231 
__THROW
 
	`__n⁄nuŒ
 ((1));

1234 
	$±hªad_•ö_de°roy
 (
±hªad_•ölock_t
 *
__lock
)

1235 
__THROW
 
	`__n⁄nuŒ
 ((1));

1238 
	$±hªad_•ö_lock
 (
±hªad_•ölock_t
 *
__lock
)

1239 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1242 
	$±hªad_•ö_åylock
 (
±hªad_•ölock_t
 *
__lock
)

1243 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1246 
	$±hªad_•ö_u∆ock
 (
±hªad_•ölock_t
 *
__lock
)

1247 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1254 
	$±hªad_b¨rõr_öô
 (
±hªad_b¨rõr_t
 *
__ª°ri˘
 
__b¨rõr
,

1255 c⁄° 
±hªad_b¨rõøâr_t
 *
__ª°ri˘


1256 
__©å
, 
__cou¡
)

1257 
__THROW
 
	`__n⁄nuŒ
 ((1));

1260 
	$±hªad_b¨rõr_de°roy
 (
±hªad_b¨rõr_t
 *
__b¨rõr
)

1261 
__THROW
 
	`__n⁄nuŒ
 ((1));

1264 
	$±hªad_b¨rõr_waô
 (
±hªad_b¨rõr_t
 *
__b¨rõr
)

1265 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1269 
	$±hªad_b¨rõøâr_öô
 (
±hªad_b¨rõøâr_t
 *
__©å
)

1270 
__THROW
 
	`__n⁄nuŒ
 ((1));

1273 
	$±hªad_b¨rõøâr_de°roy
 (
±hªad_b¨rõøâr_t
 *
__©å
)

1274 
__THROW
 
	`__n⁄nuŒ
 ((1));

1277 
	$±hªad_b¨rõøâr_gëpsh¨ed
 (c⁄° 
±hªad_b¨rõøâr_t
 *

1278 
__ª°ri˘
 
__©å
,

1279 *
__ª°ri˘
 
__psh¨ed
)

1280 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1283 
	$±hªad_b¨rõøâr_£çsh¨ed
 (
±hªad_b¨rõøâr_t
 *
__©å
,

1284 
__psh¨ed
)

1285 
__THROW
 
	`__n⁄nuŒ
 ((1));

1297 
	$±hªad_key_¸óã
 (
±hªad_key_t
 *
__key
,

1298 (*
__de°r_fun˘i⁄
) (*))

1299 
__THROW
 
	`__n⁄nuŒ
 ((1));

1302 
	$±hªad_key_dñëe
 (
±hªad_key_t
 
__key
Ë
__THROW
;

1305 *
	$±hªad_gë•ecific
 (
±hªad_key_t
 
__key
Ë
__THROW
;

1308 
	$±hªad_£t•ecific
 (
±hªad_key_t
 
__key
,

1309 c⁄° *
__poöãr
)

1310 
__THROW
 
	`__©å_ac˚ss_n⁄e
 (2);

1313 #ifde‡
__USE_XOPEN2K


1315 
	$±hªad_gë˝u˛ockid
 (
±hªad_t
 
__thªad_id
,

1316 
__˛ockid_t
 *
__˛ock_id
)

1317 
__THROW
 
	`__n⁄nuŒ
 ((2));

1332 
	$±hªad_©f‹k
 ((*
__¥ï¨e
) (),

1333 (*
__∑ª¡
) (),

1334 (*
__chûd
Ë()Ë
__THROW
;

1337 #ifde‡
__USE_EXTERN_INLINES


1339 
__exã∫_ölöe
 

1340 
	`__NTH
 (
	$±hªad_equÆ
 (
±hªad_t
 
__thªad1
,Öthªad_à
__thªad2
))

1342  
__thªad1
 =
__thªad2
;

1343 
	}
}

1346 
	g__END_DECLS


	@/usr/include/stdint.h

22 #i‚de‡
_STDINT_H


23 
	#_STDINT_H
 1

	)

25 
	#__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION


	)

26 
	~<bôs/libc-hódî-°¨t.h
>

27 
	~<bôs/ty≥s.h
>

28 
	~<bôs/wch¨.h
>

29 
	~<bôs/w‹dsize.h
>

34 
	~<bôs/°döt-öä.h
>

37 
	~<bôs/°döt-uöä.h
>

43 
__öt_Àa°8_t
 
	töt_Àa°8_t
;

44 
__öt_Àa°16_t
 
	töt_Àa°16_t
;

45 
__öt_Àa°32_t
 
	töt_Àa°32_t
;

46 
__öt_Àa°64_t
 
	töt_Àa°64_t
;

49 
__uöt_Àa°8_t
 
	tuöt_Àa°8_t
;

50 
__uöt_Àa°16_t
 
	tuöt_Àa°16_t
;

51 
__uöt_Àa°32_t
 
	tuöt_Àa°32_t
;

52 
__uöt_Àa°64_t
 
	tuöt_Àa°64_t
;

58 sig√d 
	töt_Á°8_t
;

59 #i‡
__WORDSIZE
 == 64

60 
	töt_Á°16_t
;

61 
	töt_Á°32_t
;

62 
	töt_Á°64_t
;

64 
	töt_Á°16_t
;

65 
	töt_Á°32_t
;

66 
__exãnsi⁄__


67 
	töt_Á°64_t
;

71 
	tuöt_Á°8_t
;

72 #i‡
__WORDSIZE
 == 64

73 
	tuöt_Á°16_t
;

74 
	tuöt_Á°32_t
;

75 
	tuöt_Á°64_t
;

77 
	tuöt_Á°16_t
;

78 
	tuöt_Á°32_t
;

79 
__exãnsi⁄__


80 
	tuöt_Á°64_t
;

85 #i‡
__WORDSIZE
 == 64

86 #i‚de‡
__öçå_t_deföed


87 
	töçå_t
;

88 
	#__öçå_t_deföed


	)

90 
	tuöçå_t
;

92 #i‚de‡
__öçå_t_deföed


93 
	töçå_t
;

94 
	#__öçå_t_deföed


	)

96 
	tuöçå_t
;

101 
__ötmax_t
 
	tötmax_t
;

102 
__uötmax_t
 
	tuötmax_t
;

105 #i‡
__WORDSIZE
 == 64

106 
	#__INT64_C
(
c
Ë¯## 
L


	)

107 
	#__UINT64_C
(
c
Ë¯## 
UL


	)

109 
	#__INT64_C
(
c
Ë¯## 
LL


	)

110 
	#__UINT64_C
(
c
Ë¯## 
ULL


	)

116 
	#INT8_MIN
 (-128)

	)

117 
	#INT16_MIN
 (-32767-1)

	)

118 
	#INT32_MIN
 (-2147483647-1)

	)

119 
	#INT64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

121 
	#INT8_MAX
 (127)

	)

122 
	#INT16_MAX
 (32767)

	)

123 
	#INT32_MAX
 (2147483647)

	)

124 
	#INT64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

127 
	#UINT8_MAX
 (255)

	)

128 
	#UINT16_MAX
 (65535)

	)

129 
	#UINT32_MAX
 (4294967295U)

	)

130 
	#UINT64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

134 
	#INT_LEAST8_MIN
 (-128)

	)

135 
	#INT_LEAST16_MIN
 (-32767-1)

	)

136 
	#INT_LEAST32_MIN
 (-2147483647-1)

	)

137 
	#INT_LEAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

139 
	#INT_LEAST8_MAX
 (127)

	)

140 
	#INT_LEAST16_MAX
 (32767)

	)

141 
	#INT_LEAST32_MAX
 (2147483647)

	)

142 
	#INT_LEAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

145 
	#UINT_LEAST8_MAX
 (255)

	)

146 
	#UINT_LEAST16_MAX
 (65535)

	)

147 
	#UINT_LEAST32_MAX
 (4294967295U)

	)

148 
	#UINT_LEAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

152 
	#INT_FAST8_MIN
 (-128)

	)

153 #i‡
__WORDSIZE
 == 64

154 
	#INT_FAST16_MIN
 (-9223372036854775807L-1)

	)

155 
	#INT_FAST32_MIN
 (-9223372036854775807L-1)

	)

157 
	#INT_FAST16_MIN
 (-2147483647-1)

	)

158 
	#INT_FAST32_MIN
 (-2147483647-1)

	)

160 
	#INT_FAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

162 
	#INT_FAST8_MAX
 (127)

	)

163 #i‡
__WORDSIZE
 == 64

164 
	#INT_FAST16_MAX
 (9223372036854775807L)

	)

165 
	#INT_FAST32_MAX
 (9223372036854775807L)

	)

167 
	#INT_FAST16_MAX
 (2147483647)

	)

168 
	#INT_FAST32_MAX
 (2147483647)

	)

170 
	#INT_FAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

173 
	#UINT_FAST8_MAX
 (255)

	)

174 #i‡
__WORDSIZE
 == 64

175 
	#UINT_FAST16_MAX
 (18446744073709551615UL)

	)

176 
	#UINT_FAST32_MAX
 (18446744073709551615UL)

	)

178 
	#UINT_FAST16_MAX
 (4294967295U)

	)

179 
	#UINT_FAST32_MAX
 (4294967295U)

	)

181 
	#UINT_FAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

185 #i‡
__WORDSIZE
 == 64

186 
	#INTPTR_MIN
 (-9223372036854775807L-1)

	)

187 
	#INTPTR_MAX
 (9223372036854775807L)

	)

188 
	#UINTPTR_MAX
 (18446744073709551615UL)

	)

190 
	#INTPTR_MIN
 (-2147483647-1)

	)

191 
	#INTPTR_MAX
 (2147483647)

	)

192 
	#UINTPTR_MAX
 (4294967295U)

	)

197 
	#INTMAX_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

199 
	#INTMAX_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

202 
	#UINTMAX_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

208 #i‡
__WORDSIZE
 == 64

209 
	#PTRDIFF_MIN
 (-9223372036854775807L-1)

	)

210 
	#PTRDIFF_MAX
 (9223372036854775807L)

	)

212 #i‡
__WORDSIZE32_PTRDIFF_LONG


213 
	#PTRDIFF_MIN
 (-2147483647L-1)

	)

214 
	#PTRDIFF_MAX
 (2147483647L)

	)

216 
	#PTRDIFF_MIN
 (-2147483647-1)

	)

217 
	#PTRDIFF_MAX
 (2147483647)

	)

222 
	#SIG_ATOMIC_MIN
 (-2147483647-1)

	)

223 
	#SIG_ATOMIC_MAX
 (2147483647)

	)

226 #i‡
__WORDSIZE
 == 64

227 
	#SIZE_MAX
 (18446744073709551615UL)

	)

229 #i‡
__WORDSIZE32_SIZE_ULONG


230 
	#SIZE_MAX
 (4294967295UL)

	)

232 
	#SIZE_MAX
 (4294967295U)

	)

237 #i‚de‡
WCHAR_MIN


239 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

240 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

244 
	#WINT_MIN
 (0u)

	)

245 
	#WINT_MAX
 (4294967295u)

	)

248 
	#INT8_C
(
c
Ë
	)
c

249 
	#INT16_C
(
c
Ë
	)
c

250 
	#INT32_C
(
c
Ë
	)
c

251 #i‡
__WORDSIZE
 == 64

252 
	#INT64_C
(
c
Ë¯## 
L


	)

254 
	#INT64_C
(
c
Ë¯## 
LL


	)

258 
	#UINT8_C
(
c
Ë
	)
c

259 
	#UINT16_C
(
c
Ë
	)
c

260 
	#UINT32_C
(
c
Ë¯## 
U


	)

261 #i‡
__WORDSIZE
 == 64

262 
	#UINT64_C
(
c
Ë¯## 
UL


	)

264 
	#UINT64_C
(
c
Ë¯## 
ULL


	)

268 #i‡
__WORDSIZE
 == 64

269 
	#INTMAX_C
(
c
Ë¯## 
L


	)

270 
	#UINTMAX_C
(
c
Ë¯## 
UL


	)

272 
	#INTMAX_C
(
c
Ë¯## 
LL


	)

273 
	#UINTMAX_C
(
c
Ë¯## 
ULL


	)

276 #i‡
__GLIBC_USE
 (
IEC_60559_BFP_EXT_C2X
)

278 
	#INT8_WIDTH
 8

	)

279 
	#UINT8_WIDTH
 8

	)

280 
	#INT16_WIDTH
 16

	)

281 
	#UINT16_WIDTH
 16

	)

282 
	#INT32_WIDTH
 32

	)

283 
	#UINT32_WIDTH
 32

	)

284 
	#INT64_WIDTH
 64

	)

285 
	#UINT64_WIDTH
 64

	)

287 
	#INT_LEAST8_WIDTH
 8

	)

288 
	#UINT_LEAST8_WIDTH
 8

	)

289 
	#INT_LEAST16_WIDTH
 16

	)

290 
	#UINT_LEAST16_WIDTH
 16

	)

291 
	#INT_LEAST32_WIDTH
 32

	)

292 
	#UINT_LEAST32_WIDTH
 32

	)

293 
	#INT_LEAST64_WIDTH
 64

	)

294 
	#UINT_LEAST64_WIDTH
 64

	)

296 
	#INT_FAST8_WIDTH
 8

	)

297 
	#UINT_FAST8_WIDTH
 8

	)

298 
	#INT_FAST16_WIDTH
 
__WORDSIZE


	)

299 
	#UINT_FAST16_WIDTH
 
__WORDSIZE


	)

300 
	#INT_FAST32_WIDTH
 
__WORDSIZE


	)

301 
	#UINT_FAST32_WIDTH
 
__WORDSIZE


	)

302 
	#INT_FAST64_WIDTH
 64

	)

303 
	#UINT_FAST64_WIDTH
 64

	)

305 
	#INTPTR_WIDTH
 
__WORDSIZE


	)

306 
	#UINTPTR_WIDTH
 
__WORDSIZE


	)

308 
	#INTMAX_WIDTH
 64

	)

309 
	#UINTMAX_WIDTH
 64

	)

311 
	#PTRDIFF_WIDTH
 
__WORDSIZE


	)

312 
	#SIG_ATOMIC_WIDTH
 32

	)

313 
	#SIZE_WIDTH
 
__WORDSIZE


	)

314 
	#WCHAR_WIDTH
 32

	)

315 
	#WINT_WIDTH
 32

	)

	@/usr/include/stdio.h

23 #i‚de‡
_STDIO_H


24 
	#_STDIO_H
 1

	)

26 
	#__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION


	)

27 
	~<bôs/libc-hódî-°¨t.h
>

29 
	g__BEGIN_DECLS


31 
	#__√ed_size_t


	)

32 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

35 
	#__√ed___va_li°


	)

36 
	~<°d¨g.h
>

38 
	~<bôs/ty≥s.h
>

39 
	~<bôs/ty≥s/__Âos_t.h
>

40 
	~<bôs/ty≥s/__Âos64_t.h
>

41 
	~<bôs/ty≥s/__FILE.h
>

42 
	~<bôs/ty≥s/FILE.h
>

43 
	~<bôs/ty≥s/°ru˘_FILE.h
>

45 #ifde‡
__USE_GNU


46 
	~<bôs/ty≥s/cookõ_io_fun˘i⁄s_t.h
>

49 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


50 #ifde‡
__GNUC__


51 #i‚de‡
_VA_LIST_DEFINED


52 
__gnuc_va_li°
 
	tva_li°
;

53 
	#_VA_LIST_DEFINED


	)

56 
	~<°d¨g.h
>

60 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


61 #i‚de‡
__off_t_deföed


62 #i‚de‡
__USE_FILE_OFFSET64


63 
__off_t
 
	toff_t
;

65 
__off64_t
 
	toff_t
;

67 
	#__off_t_deföed


	)

69 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


70 
__off64_t
 
	toff64_t
;

71 
	#__off64_t_deföed


	)

75 #ifde‡
__USE_XOPEN2K8


76 #i‚de‡
__ssize_t_deföed


77 
__ssize_t
 
	tssize_t
;

78 
	#__ssize_t_deföed


	)

83 #i‚de‡
__USE_FILE_OFFSET64


84 
__Âos_t
 
	tÂos_t
;

86 
__Âos64_t
 
	tÂos_t
;

88 #ifde‡
__USE_LARGEFILE64


89 
__Âos64_t
 
	tÂos64_t
;

93 
	#_IOFBF
 0

	)

94 
	#_IOLBF
 1

	)

95 
	#_IONBF
 2

	)

99 
	#BUFSIZ
 8192

	)

104 
	#EOF
 (-1)

	)

109 
	#SEEK_SET
 0

	)

110 
	#SEEK_CUR
 1

	)

111 
	#SEEK_END
 2

	)

112 #ifde‡
__USE_GNU


113 
	#SEEK_DATA
 3

	)

114 
	#SEEK_HOLE
 4

	)

118 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


120 
	#P_tmpdú
 "/tmp"

	)

133 
	~<bôs/°dio_lim.h
>

136 #i‡
__GLIBC_USE
 (
ISOC2X
)

138 
	#_PRINTF_NAN_LEN_MAX
 4

	)

143 
FILE
 *
°dö
;

144 
FILE
 *
°dout
;

145 
FILE
 *
°dîr
;

147 
	#°dö
 
°dö


	)

148 
	#°dout
 
°dout


	)

149 
	#°dîr
 
°dîr


	)

152 
	$ªmove
 (c⁄° *
__fûíame
Ë
__THROW
;

154 
	$ª«me
 (c⁄° *
__ﬁd
, c⁄° *
__√w
Ë
__THROW
;

156 #ifde‡
__USE_ATFILE


158 
	$ª«mót
 (
__ﬁdfd
, c⁄° *
__ﬁd
, 
__√wfd
,

159 c⁄° *
__√w
Ë
__THROW
;

162 #ifde‡
__USE_GNU


164 
	#RENAME_NOREPLACE
 (1 << 0)

	)

165 
	#RENAME_EXCHANGE
 (1 << 1)

	)

166 
	#RENAME_WHITEOUT
 (1 << 2)

	)

170 
	$ª«mót2
 (
__ﬁdfd
, c⁄° *
__ﬁd
, 
__√wfd
,

171 c⁄° *
__√w
, 
__Êags
Ë
__THROW
;

178 
	`f˛o£
 (
FILE
 *
__°ªam
);

180 #unde‡
__©å_dóŒoc_f˛o£


181 
	#__©å_dóŒoc_f˛o£
 
	`__©å_dóŒoc
 (
f˛o£
, 1)

	)

187 #i‚de‡
__USE_FILE_OFFSET64


188 
FILE
 *
	$tmpfûe
 ()

189 
__©åibuã_mÆloc__
 
__©å_dóŒoc_f˛o£
 
__wur
;

191 #ifde‡
__REDIRECT


192 
FILE
 *
	`__REDIRECT
 (
tmpfûe
, (), 
tmpfûe64
)

193 
__©åibuã_mÆloc__
 
__©å_dóŒoc_f˛o£
 
__wur
;

195 
	#tmpfûe
 
tmpfûe64


	)

199 #ifde‡
__USE_LARGEFILE64


200 
FILE
 *
	$tmpfûe64
 ()

201 
__©åibuã_mÆloc__
 
__©å_dóŒoc_f˛o£
 
__wur
;

205 *
	$tm≤am
 ([
L_tm≤am
]Ë
__THROW
 
__wur
;

207 #ifde‡
__USE_MISC


210 *
	$tm≤am_r
 (
__s
[
L_tm≤am
]Ë
__THROW
 
__wur
;

214 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


222 *
	$ãm≤am
 (c⁄° *
__dú
, c⁄° *
__pfx
)

223 
__THROW
 
__©åibuã_mÆloc__
 
__wur
 
__©å_dóŒoc_‰ì
;

230 
	`fÊush
 (
FILE
 *
__°ªam
);

232 #ifde‡
__USE_MISC


239 
	`fÊush_u∆ocked
 (
FILE
 *
__°ªam
);

242 #ifde‡
__USE_GNU


249 
	`f˛o£Æl
 ();

253 #i‚de‡
__USE_FILE_OFFSET64


258 
FILE
 *
	$f›í
 (c⁄° *
__ª°ri˘
 
__fûíame
,

259 c⁄° *
__ª°ri˘
 
__modes
)

260 
__©åibuã_mÆloc__
 
__©å_dóŒoc_f˛o£
 
__wur
;

265 
FILE
 *
	$‰e›í
 (c⁄° *
__ª°ri˘
 
__fûíame
,

266 c⁄° *
__ª°ri˘
 
__modes
,

267 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

269 #ifde‡
__REDIRECT


270 
FILE
 *
	`__REDIRECT
 (
f›í
, (c⁄° *
__ª°ri˘
 
__fûíame
,

271 c⁄° *
__ª°ri˘
 
__modes
), 
f›í64
)

272 
__©åibuã_mÆloc__
 
__©å_dóŒoc_f˛o£
 
__wur
;

273 
FILE
 *
	`__REDIRECT
 (
‰e›í
, (c⁄° *
__ª°ri˘
 
__fûíame
,

274 c⁄° *
__ª°ri˘
 
__modes
,

275 
FILE
 *
__ª°ri˘
 
__°ªam
), 
‰e›í64
)

276 
__wur
;

278 
	#f›í
 
f›í64


	)

279 
	#‰e›í
 
‰e›í64


	)

282 #ifde‡
__USE_LARGEFILE64


283 
FILE
 *
	$f›í64
 (c⁄° *
__ª°ri˘
 
__fûíame
,

284 c⁄° *
__ª°ri˘
 
__modes
)

285 
__©åibuã_mÆloc__
 
__©å_dóŒoc_f˛o£
 
__wur
;

286 
FILE
 *
	$‰e›í64
 (c⁄° *
__ª°ri˘
 
__fûíame
,

287 c⁄° *
__ª°ri˘
 
__modes
,

288 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

291 #ifdef 
__USE_POSIX


293 
FILE
 *
	$fd›í
 (
__fd
, c⁄° *
__modes
Ë
__THROW


294 
__©åibuã_mÆloc__
 
__©å_dóŒoc_f˛o£
 
__wur
;

297 #ifdef 
__USE_GNU


300 
FILE
 *
	$f›ícookõ
 (*
__ª°ri˘
 
__magic_cookõ
,

301 c⁄° *
__ª°ri˘
 
__modes
,

302 
cookõ_io_fun˘i⁄s_t
 
__io_funcs
Ë
__THROW


303 
__©åibuã_mÆloc__
 
__©å_dóŒoc_f˛o£
 
__wur
;

306 #i‡
deföed
 
__USE_XOPEN2K8
 || 
	`__GLIBC_USE
 (
LIB_EXT2
)

308 
FILE
 *
	$fmem›í
 (*
__s
, 
size_t
 
__Àn
, c⁄° *
__modes
)

309 
__THROW
 
__©åibuã_mÆloc__
 
__©å_dóŒoc_f˛o£
 
__wur
;

314 
FILE
 *
	$›í_mem°ªam
 (**
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW


315 
__©åibuã_mÆloc__
 
__©å_dóŒoc_f˛o£
 
__wur
;

317 #ifde‡
_WCHAR_H


321 
__FILE
 *
	$›í_wmem°ªam
 (
wch¨_t
 **
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW


322 
__©åibuã_mÆloc__
 
__©å_dóŒoc_f˛o£
;

328 
	$£tbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
Ë
__THROW
;

332 
	$£tvbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

333 
__modes
, 
size_t
 
__n
Ë
__THROW
;

335 #ifdef 
__USE_MISC


338 
	$£tbuf„r
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

339 
size_t
 
__size
Ë
__THROW
;

342 
	$£éöebuf
 (
FILE
 *
__°ªam
Ë
__THROW
;

350 
	`Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

351 c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

356 
	`¥ötf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

358 
	$•rötf
 (*
__ª°ri˘
 
__s
,

359 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROWNL
;

365 
	`vÂrötf
 (
FILE
 *
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

366 
__gnuc_va_li°
 
__¨g
);

371 
	`v¥ötf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, 
__gnuc_va_li°
 
__¨g
);

373 
	$v•rötf
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

374 
__gnuc_va_li°
 
__¨g
Ë
__THROWNL
;

376 #i‡
deföed
 
__USE_ISOC99
 || deföed 
__USE_UNIX98


378 
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

379 c⁄° *
__ª°ri˘
 
__f‹m©
, ...)

380 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

382 
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

383 c⁄° *
__ª°ri˘
 
__f‹m©
, 
__gnuc_va_li°
 
__¨g
)

384 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

387 #i‡
	`__GLIBC_USE
 (
LIB_EXT2
)

390 
	$va•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__f
,

391 
__gnuc_va_li°
 
__¨g
)

392 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 0))Ë
__wur
;

393 
	$__a•rötf
 (**
__ª°ri˘
 
__±r
,

394 c⁄° *
__ª°ri˘
 
__fmt
, ...)

395 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

396 
	$a•rötf
 (**
__ª°ri˘
 
__±r
,

397 c⁄° *
__ª°ri˘
 
__fmt
, ...)

398 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

401 #ifde‡
__USE_XOPEN2K8


403 
	$vd¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
,

404 
__gnuc_va_li°
 
__¨g
)

405 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

406 
	$d¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
, ...)

407 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

415 
	$fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

416 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

421 
	$sˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

423 
	$ssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

424 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

430 
	~<bôs/Êﬂä.h
>

431 #i‡!
	`__GLIBC_USE
 (
DEPRECATED_SCANF
Ë&& !
deföed
 
__LDBL_COMPAT
 \

432 && 
__LDOUBLE_REDIRECTS_TO_FLOAT128_ABI
 == 0

433 #ifde‡
__REDIRECT


434 
	`__REDIRECT
 (
fsˇnf
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

435 c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

436 
__isoc99_fsˇnf
Ë
__wur
;

437 
	`__REDIRECT
 (
sˇnf
, (c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

438 
__isoc99_sˇnf
Ë
__wur
;

439 
	`__REDIRECT_NTH
 (
ssˇnf
, (c⁄° *
__ª°ri˘
 
__s
,

440 c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

441 
__isoc99_ssˇnf
);

443 
	$__isoc99_fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

444 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

445 
	$__isoc99_sˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

446 
	$__isoc99_ssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

447 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

448 
	#fsˇnf
 
__isoc99_fsˇnf


	)

449 
	#sˇnf
 
__isoc99_sˇnf


	)

450 
	#ssˇnf
 
__isoc99_ssˇnf


	)

454 #ifdef 
__USE_ISOC99


459 
	$vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

460 
__gnuc_va_li°
 
__¨g
)

461 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

467 
	$vsˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, 
__gnuc_va_li°
 
__¨g
)

468 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

471 
	$vssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

472 c⁄° *
__ª°ri˘
 
__f‹m©
, 
__gnuc_va_li°
 
__¨g
)

473 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

476 #i‡!
	`__GLIBC_USE
 (
DEPRECATED_SCANF
)

477 #i‡
deföed
 
__REDIRECT
 && !deföed 
__LDBL_COMPAT
 \

478 && 
__LDOUBLE_REDIRECTS_TO_FLOAT128_ABI
 == 0

479 
	`__REDIRECT
 (
vfsˇnf
,

480 (
FILE
 *
__ª°ri˘
 
__s
,

481 c⁄° *
__ª°ri˘
 
__f‹m©
, 
__gnuc_va_li°
 
__¨g
),

482 
__isoc99_vfsˇnf
)

483 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

484 
	`__REDIRECT
 (
vsˇnf
, (c⁄° *
__ª°ri˘
 
__f‹m©
,

485 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vsˇnf
)

486 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

487 
	`__REDIRECT_NTH
 (
vssˇnf
,

488 (c⁄° *
__ª°ri˘
 
__s
,

489 c⁄° *
__ª°ri˘
 
__f‹m©
,

490 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vssˇnf
)

491 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

492 #ñi‡!
deföed
 
__REDIRECT


493 
	$__isoc99_vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
,

494 c⁄° *
__ª°ri˘
 
__f‹m©
,

495 
__gnuc_va_li°
 
__¨g
Ë
__wur
;

496 
	$__isoc99_vsˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
,

497 
__gnuc_va_li°
 
__¨g
Ë
__wur
;

498 
	$__isoc99_vssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

499 c⁄° *
__ª°ri˘
 
__f‹m©
,

500 
__gnuc_va_li°
 
__¨g
Ë
__THROW
;

501 
	#vfsˇnf
 
__isoc99_vfsˇnf


	)

502 
	#vsˇnf
 
__isoc99_vsˇnf


	)

503 
	#vssˇnf
 
__isoc99_vssˇnf


	)

513 
	`fgëc
 (
FILE
 *
__°ªam
);

514 
	`gëc
 (
FILE
 *
__°ªam
);

520 
	`gëch¨
 ();

522 #ifde‡
__USE_POSIX199506


527 
	`gëc_u∆ocked
 (
FILE
 *
__°ªam
);

528 
	`gëch¨_u∆ocked
 ();

531 #ifde‡
__USE_MISC


538 
	`fgëc_u∆ocked
 (
FILE
 *
__°ªam
);

549 
	`Âutc
 (
__c
, 
FILE
 *
__°ªam
);

550 
	`putc
 (
__c
, 
FILE
 *
__°ªam
);

556 
	`putch¨
 (
__c
);

558 #ifde‡
__USE_MISC


565 
	`Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

568 #ifde‡
__USE_POSIX199506


573 
	`putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

574 
	`putch¨_u∆ocked
 (
__c
);

578 #i‡
deföed
 
__USE_MISC
 \

579 || (
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

581 
	`gëw
 (
FILE
 *
__°ªam
);

584 
	`putw
 (
__w
, 
FILE
 *
__°ªam
);

592 *
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

593 
__wur
 
	`__f‹tifõd_©å_ac˚ss
 (
__wrôe_⁄ly__
, 1, 2);

595 #i‡
	`__GLIBC_USE
 (
DEPRECATED_GETS
)

605 *
	$gës
 (*
__s
Ë
__wur
 
__©åibuã_dïªˇãd__
;

608 #ifde‡
__USE_GNU


615 *
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
,

616 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur


617 
	`__f‹tifõd_©å_ac˚ss
 (
__wrôe_⁄ly__
, 1, 2);

621 #i‡
deföed
 
__USE_XOPEN2K8
 || 
	`__GLIBC_USE
 (
LIB_EXT2
)

632 
__ssize_t
 
	$__gëdñim
 (**
__ª°ri˘
 
__löïå
,

633 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

634 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

635 
__ssize_t
 
	$gëdñim
 (**
__ª°ri˘
 
__löïå
,

636 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

637 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

645 
__ssize_t
 
	$gëlöe
 (**
__ª°ri˘
 
__löïå
,

646 
size_t
 *
__ª°ri˘
 
__n
,

647 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

655 
	`Âuts
 (c⁄° *
__ª°ri˘
 
__s
, 
FILE
 *__ª°ri˘ 
__°ªam
);

661 
	`puts
 (c⁄° *
__s
);

668 
	`ungëc
 (
__c
, 
FILE
 *
__°ªam
);

675 
size_t
 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

676 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

681 
size_t
 
	`fwrôe
 (c⁄° *
__ª°ri˘
 
__±r
, size_à
__size
,

682 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__s
);

684 #ifde‡
__USE_GNU


691 
	`Âuts_u∆ocked
 (c⁄° *
__ª°ri˘
 
__s
,

692 
FILE
 *
__ª°ri˘
 
__°ªam
);

695 #ifde‡
__USE_MISC


702 
size_t
 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

703 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

704 
size_t
 
	`fwrôe_u∆ocked
 (c⁄° *
__ª°ri˘
 
__±r
, size_à
__size
,

705 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
);

713 
	`f£ek
 (
FILE
 *
__°ªam
, 
__off
, 
__whí˚
);

718 
	$·ñl
 (
FILE
 *
__°ªam
Ë
__wur
;

723 
	`ªwöd
 (
FILE
 *
__°ªam
);

730 #i‡
deföed
 
__USE_LARGEFILE
 || deföed 
__USE_XOPEN2K


731 #i‚de‡
__USE_FILE_OFFSET64


736 
	`f£eko
 (
FILE
 *
__°ªam
, 
__off_t
 
__off
, 
__whí˚
);

741 
__off_t
 
	$·ñlo
 (
FILE
 *
__°ªam
Ë
__wur
;

743 #ifde‡
__REDIRECT


744 
	`__REDIRECT
 (
f£eko
,

745 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
),

746 
f£eko64
);

747 
__off64_t
 
	`__REDIRECT
 (
·ñlo
, (
FILE
 *
__°ªam
), 
·ñlo64
);

749 
	#f£eko
 
f£eko64


	)

750 
	#·ñlo
 
·ñlo64


	)

755 #i‚de‡
__USE_FILE_OFFSET64


760 
	`fgëpos
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos_t
 *__ª°ri˘ 
__pos
);

765 
	`f£ços
 (
FILE
 *
__°ªam
, c⁄° 
Âos_t
 *
__pos
);

767 #ifde‡
__REDIRECT


768 
	`__REDIRECT
 (
fgëpos
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

769 
Âos_t
 *
__ª°ri˘
 
__pos
), 
fgëpos64
);

770 
	`__REDIRECT
 (
f£ços
,

771 (
FILE
 *
__°ªam
, c⁄° 
Âos_t
 *
__pos
), 
f£ços64
);

773 
	#fgëpos
 
fgëpos64


	)

774 
	#f£ços
 
f£ços64


	)

778 #ifde‡
__USE_LARGEFILE64


779 
	`f£eko64
 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
);

780 
__off64_t
 
	$·ñlo64
 (
FILE
 *
__°ªam
Ë
__wur
;

781 
	`fgëpos64
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos64_t
 *__ª°ri˘ 
__pos
);

782 
	`f£ços64
 (
FILE
 *
__°ªam
, c⁄° 
Âos64_t
 *
__pos
);

786 
	$˛óªº
 (
FILE
 *
__°ªam
Ë
__THROW
;

788 
	$„of
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

790 
	$„º‹
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

792 #ifde‡
__USE_MISC


794 
	$˛óªº_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
;

795 
	$„of_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

796 
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

804 
	`≥º‹
 (c⁄° *
__s
);

807 #ifdef 
__USE_POSIX


809 
	$fûío
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

812 #ifde‡
__USE_MISC


814 
	$fûío_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

818 #ifde‡
__USE_POSIX2


823 
	`p˛o£
 (
FILE
 *
__°ªam
);

829 
FILE
 *
	$p›í
 (c⁄° *
__comm™d
, c⁄° *
__modes
)

830 
__©åibuã_mÆloc__
 
	$__©å_dóŒoc
 (
p˛o£
, 1Ë
__wur
;

835 #ifdef 
__USE_POSIX


837 *
	$˘îmid
 (*
__s
Ë
__THROW


838 
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 1));

842 #i‡(
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
Ë|| deföed 
__USE_GNU


844 *
	$cu£rid
 (*
__s
)

845 
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 1));

849 #ifdef 
__USE_GNU


850 
ob°ack
;

853 
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

854 c⁄° *
__ª°ri˘
 
__f‹m©
, ...)

855 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

856 
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

857 c⁄° *
__ª°ri˘
 
__f‹m©
,

858 
__gnuc_va_li°
 
__¨gs
)

859 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

863 #ifde‡
__USE_POSIX199506


867 
	$Êockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

871 
	$·rylockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

874 
	$fu∆ockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

877 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


880 
	~<bôs/gë›t_posix.h
>

885 
	`__uÊow
 (
FILE
 *);

886 
	`__ovîÊow
 (
FILE
 *, );

890 #ifde‡
__USE_EXTERN_INLINES


891 
	~<bôs/°dio.h
>

893 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


894 
	~<bôs/°dio2.h
>

897 
	~<bôs/Êﬂä.h
>

898 #i‡
deföed
 
__LDBL_COMPAT
 || 
__LDOUBLE_REDIRECTS_TO_FLOAT128_ABI
 == 1

899 
	~<bôs/°dio-ldbl.h
>

902 
__END_DECLS


	@/usr/include/stdlib.h

23 #i‚def 
_STDLIB_H


25 
	#__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION


	)

26 
	~<bôs/libc-hódî-°¨t.h
>

29 
	#__√ed_size_t


	)

30 
	#__√ed_wch¨_t


	)

31 
	#__√ed_NULL


	)

32 
	~<°ddef.h
>

34 
	g__BEGIN_DECLS


36 
	#_STDLIB_H
 1

	)

38 #i‡(
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
Ë&& !deföed 
_SYS_WAIT_H


40 
	~<bôs/waôÊags.h
>

41 
	~<bôs/waô°©us.h
>

44 
	#WEXITSTATUS
(
°©us
Ë
	`__WEXITSTATUS
 (°©us)

	)

45 
	#WTERMSIG
(
°©us
Ë
	`__WTERMSIG
 (°©us)

	)

46 
	#WSTOPSIG
(
°©us
Ë
	`__WSTOPSIG
 (°©us)

	)

47 
	#WIFEXITED
(
°©us
Ë
	`__WIFEXITED
 (°©us)

	)

48 
	#WIFSIGNALED
(
°©us
Ë
	`__WIFSIGNALED
 (°©us)

	)

49 
	#WIFSTOPPED
(
°©us
Ë
	`__WIFSTOPPED
 (°©us)

	)

50 #ifde‡
__WIFCONTINUED


51 
	#WIFCONTINUED
(
°©us
Ë
	`__WIFCONTINUED
 (°©us)

	)

56 
	~<bôs/Êﬂä.h
>

61 
	mquŸ
;

62 
	mªm
;

63 } 
	tdiv_t
;

66 #i‚de‡
__ldiv_t_deföed


69 
	mquŸ
;

70 
	mªm
;

71 } 
	tldiv_t
;

72 
	#__ldiv_t_deföed
 1

	)

75 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__Œdiv_t_deföed


77 
__exãnsi⁄__
 struct

79 
	mquŸ
;

80 
	mªm
;

81 } 
	tŒdiv_t
;

82 
	#__Œdiv_t_deföed
 1

	)

87 
	#RAND_MAX
 2147483647

	)

92 
	#EXIT_FAILURE
 1

	)

93 
	#EXIT_SUCCESS
 0

	)

97 
	#MB_CUR_MAX
 (
	`__˘y≥_gë_mb_cur_max
 ())

	)

98 
size_t
 
	$__˘y≥_gë_mb_cur_max
 (Ë
__THROW
 
__wur
;

102 
	$©of
 (c⁄° *
__≈å
)

103 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

105 
	$©oi
 (c⁄° *
__≈å
)

106 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

108 
	$©ﬁ
 (c⁄° *
__≈å
)

109 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

111 #ifde‡
__USE_ISOC99


113 
__exãnsi⁄__
 
	$©ﬁl
 (c⁄° *
__≈å
)

114 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

118 
	$°πod
 (c⁄° *
__ª°ri˘
 
__≈å
,

119 **
__ª°ri˘
 
__íd±r
)

120 
__THROW
 
	`__n⁄nuŒ
 ((1));

122 #ifdef 
__USE_ISOC99


124 
	$°πof
 (c⁄° *
__ª°ri˘
 
__≈å
,

125 **
__ª°ri˘
 
__íd±r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

127 
	$°πﬁd
 (c⁄° *
__ª°ri˘
 
__≈å
,

128 **
__ª°ri˘
 
__íd±r
)

129 
__THROW
 
	`__n⁄nuŒ
 ((1));

134 #i‡
__HAVE_FLOAT16
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

135 
_Flﬂt16
 
	$°πof16
 (c⁄° *
__ª°ri˘
 
__≈å
,

136 **
__ª°ri˘
 
__íd±r
)

137 
__THROW
 
	`__n⁄nuŒ
 ((1));

140 #i‡
__HAVE_FLOAT32
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

141 
_Flﬂt32
 
	$°πof32
 (c⁄° *
__ª°ri˘
 
__≈å
,

142 **
__ª°ri˘
 
__íd±r
)

143 
__THROW
 
	`__n⁄nuŒ
 ((1));

146 #i‡
__HAVE_FLOAT64
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

147 
_Flﬂt64
 
	$°πof64
 (c⁄° *
__ª°ri˘
 
__≈å
,

148 **
__ª°ri˘
 
__íd±r
)

149 
__THROW
 
	`__n⁄nuŒ
 ((1));

152 #i‡
__HAVE_FLOAT128
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

153 
_Flﬂt128
 
	$°πof128
 (c⁄° *
__ª°ri˘
 
__≈å
,

154 **
__ª°ri˘
 
__íd±r
)

155 
__THROW
 
	`__n⁄nuŒ
 ((1));

158 #i‡
__HAVE_FLOAT32X
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

159 
_Flﬂt32x
 
	$°πof32x
 (c⁄° *
__ª°ri˘
 
__≈å
,

160 **
__ª°ri˘
 
__íd±r
)

161 
__THROW
 
	`__n⁄nuŒ
 ((1));

164 #i‡
__HAVE_FLOAT64X
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

165 
_Flﬂt64x
 
	$°πof64x
 (c⁄° *
__ª°ri˘
 
__≈å
,

166 **
__ª°ri˘
 
__íd±r
)

167 
__THROW
 
	`__n⁄nuŒ
 ((1));

170 #i‡
__HAVE_FLOAT128X
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

171 
_Flﬂt128x
 
	$°πof128x
 (c⁄° *
__ª°ri˘
 
__≈å
,

172 **
__ª°ri˘
 
__íd±r
)

173 
__THROW
 
	`__n⁄nuŒ
 ((1));

177 
	$°πﬁ
 (c⁄° *
__ª°ri˘
 
__≈å
,

178 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

179 
__THROW
 
	`__n⁄nuŒ
 ((1));

181 
	$°πoul
 (c⁄° *
__ª°ri˘
 
__≈å
,

182 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

183 
__THROW
 
	`__n⁄nuŒ
 ((1));

185 #ifde‡
__USE_MISC


187 
__exãnsi⁄__


188 
	$°πoq
 (c⁄° *
__ª°ri˘
 
__≈å
,

189 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

190 
__THROW
 
	`__n⁄nuŒ
 ((1));

192 
__exãnsi⁄__


193 
	$°πouq
 (c⁄° *
__ª°ri˘
 
__≈å
,

194 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

195 
__THROW
 
	`__n⁄nuŒ
 ((1));

198 #ifde‡
__USE_ISOC99


200 
__exãnsi⁄__


201 
	$°πﬁl
 (c⁄° *
__ª°ri˘
 
__≈å
,

202 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

203 
__THROW
 
	`__n⁄nuŒ
 ((1));

205 
__exãnsi⁄__


206 
	$°πouŒ
 (c⁄° *
__ª°ri˘
 
__≈å
,

207 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

208 
__THROW
 
	`__n⁄nuŒ
 ((1));

212 #i‡
	`__GLIBC_USE
 (
IEC_60559_BFP_EXT_C2X
)

213 
	$°r‰omd
 (*
__de°
, 
size_t
 
__size
, c⁄° *
__f‹m©
,

214 
__f
)

215 
__THROW
 
	`__n⁄nuŒ
 ((3));

217 
	$°r‰omf
 (*
__de°
, 
size_t
 
__size
, c⁄° *
__f‹m©
,

218 
__f
)

219 
__THROW
 
	`__n⁄nuŒ
 ((3));

221 
	$°r‰oml
 (*
__de°
, 
size_t
 
__size
, c⁄° *
__f‹m©
,

222 
__f
)

223 
__THROW
 
	`__n⁄nuŒ
 ((3));

226 #i‡
__HAVE_FLOAT16
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

227 
	$°r‰omf16
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

228 
_Flﬂt16
 
__f
)

229 
__THROW
 
	`__n⁄nuŒ
 ((3));

232 #i‡
__HAVE_FLOAT32
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

233 
	$°r‰omf32
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

234 
_Flﬂt32
 
__f
)

235 
__THROW
 
	`__n⁄nuŒ
 ((3));

238 #i‡
__HAVE_FLOAT64
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

239 
	$°r‰omf64
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

240 
_Flﬂt64
 
__f
)

241 
__THROW
 
	`__n⁄nuŒ
 ((3));

244 #i‡
__HAVE_FLOAT128
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

245 
	$°r‰omf128
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

246 
_Flﬂt128
 
__f
)

247 
__THROW
 
	`__n⁄nuŒ
 ((3));

250 #i‡
__HAVE_FLOAT32X
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

251 
	$°r‰omf32x
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

252 
_Flﬂt32x
 
__f
)

253 
__THROW
 
	`__n⁄nuŒ
 ((3));

256 #i‡
__HAVE_FLOAT64X
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

257 
	$°r‰omf64x
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

258 
_Flﬂt64x
 
__f
)

259 
__THROW
 
	`__n⁄nuŒ
 ((3));

262 #i‡
__HAVE_FLOAT128X
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

263 
	$°r‰omf128x
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

264 
_Flﬂt128x
 
__f
)

265 
__THROW
 
	`__n⁄nuŒ
 ((3));

269 #ifde‡
__USE_GNU


273 
	~<bôs/ty≥s/loˇÀ_t.h
>

275 
	$°πﬁ_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

276 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

277 
loˇÀ_t
 
__loc
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

279 
	$°πoul_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

280 **
__ª°ri˘
 
__íd±r
,

281 
__ba£
, 
loˇÀ_t
 
__loc
)

282 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

284 
__exãnsi⁄__


285 
	$°πﬁl_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

286 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

287 
loˇÀ_t
 
__loc
)

288 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

290 
__exãnsi⁄__


291 
	$°πouŒ_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

292 **
__ª°ri˘
 
__íd±r
,

293 
__ba£
, 
loˇÀ_t
 
__loc
)

294 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

296 
	$°πod_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

297 **
__ª°ri˘
 
__íd±r
, 
loˇÀ_t
 
__loc
)

298 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

300 
	$°πof_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

301 **
__ª°ri˘
 
__íd±r
, 
loˇÀ_t
 
__loc
)

302 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

304 
	$°πﬁd_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

305 **
__ª°ri˘
 
__íd±r
,

306 
loˇÀ_t
 
__loc
)

307 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

309 #i‡
__HAVE_FLOAT16


310 
_Flﬂt16
 
	$°πof16_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

311 **
__ª°ri˘
 
__íd±r
,

312 
loˇÀ_t
 
__loc
)

313 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

316 #i‡
__HAVE_FLOAT32


317 
_Flﬂt32
 
	$°πof32_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

318 **
__ª°ri˘
 
__íd±r
,

319 
loˇÀ_t
 
__loc
)

320 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

323 #i‡
__HAVE_FLOAT64


324 
_Flﬂt64
 
	$°πof64_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

325 **
__ª°ri˘
 
__íd±r
,

326 
loˇÀ_t
 
__loc
)

327 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

330 #i‡
__HAVE_FLOAT128


331 
_Flﬂt128
 
	$°πof128_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

332 **
__ª°ri˘
 
__íd±r
,

333 
loˇÀ_t
 
__loc
)

334 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

337 #i‡
__HAVE_FLOAT32X


338 
_Flﬂt32x
 
	$°πof32x_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

339 **
__ª°ri˘
 
__íd±r
,

340 
loˇÀ_t
 
__loc
)

341 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

344 #i‡
__HAVE_FLOAT64X


345 
_Flﬂt64x
 
	$°πof64x_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

346 **
__ª°ri˘
 
__íd±r
,

347 
loˇÀ_t
 
__loc
)

348 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

351 #i‡
__HAVE_FLOAT128X


352 
_Flﬂt128x
 
	$°πof128x_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

353 **
__ª°ri˘
 
__íd±r
,

354 
loˇÀ_t
 
__loc
)

355 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

360 #ifde‡
__USE_EXTERN_INLINES


361 
__exã∫_ölöe
 

362 
	`__NTH
 (
	$©oi
 (c⁄° *
__≈å
))

364  (Ë
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

365 
	}
}

366 
__exã∫_ölöe
 

367 
__NTH
 (
	$©ﬁ
 (c⁄° *
__≈å
))

369  
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

370 
	}
}

372 #ifde‡
__USE_ISOC99


373 
__exãnsi⁄__
 
__exã∫_ölöe
 

374 
__NTH
 (
	$©ﬁl
 (c⁄° *
__≈å
))

376  
	`°πﬁl
 (
__≈å
, (**Ë
NULL
, 10);

377 
	}
}

382 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


386 *
	$l64a
 (
__n
Ë
__THROW
 
__wur
;

389 
	$a64l
 (c⁄° *
__s
)

390 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

394 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


395 
	~<sys/ty≥s.h
>

402 
	$øndom
 (Ë
__THROW
;

405 
	$§™dom
 (
__£ed
Ë
__THROW
;

411 *
	$öô°©e
 (
__£ed
, *
__°©ebuf
,

412 
size_t
 
__°©ñí
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

416 *
	$£t°©e
 (*
__°©ebuf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

419 #ifde‡
__USE_MISC


424 
	søndom_d©a


426 
öt32_t
 *
Âå
;

427 
öt32_t
 *
Ωå
;

428 
öt32_t
 *
°©e
;

429 
ønd_ty≥
;

430 
ønd_deg
;

431 
ønd_£p
;

432 
öt32_t
 *
íd_±r
;

435 
	$øndom_r
 (
øndom_d©a
 *
__ª°ri˘
 
__buf
,

436 
öt32_t
 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

438 
	$§™dom_r
 (
__£ed
, 
øndom_d©a
 *
__buf
)

439 
__THROW
 
	`__n⁄nuŒ
 ((2));

441 
	$öô°©e_r
 (
__£ed
, *
__ª°ri˘
 
__°©ebuf
,

442 
size_t
 
__°©ñí
,

443 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

444 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

446 
	$£t°©e_r
 (*
__ª°ri˘
 
__°©ebuf
,

447 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

448 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

454 
	$ønd
 (Ë
__THROW
;

456 
	$§™d
 (
__£ed
Ë
__THROW
;

458 #ifde‡
__USE_POSIX199506


460 
	$ønd_r
 (*
__£ed
Ë
__THROW
;

464 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


468 
	$dønd48
 (Ë
__THROW
;

469 
	$î™d48
 (
__xsubi
[3]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

472 
	$Ã™d48
 (Ë
__THROW
;

473 
	$ƒ™d48
 (
__xsubi
[3])

474 
__THROW
 
	`__n⁄nuŒ
 ((1));

477 
	$mønd48
 (Ë
__THROW
;

478 
	$jønd48
 (
__xsubi
[3])

479 
__THROW
 
	`__n⁄nuŒ
 ((1));

482 
	$§™d48
 (
__£edvÆ
Ë
__THROW
;

483 *
	$£ed48
 (
__£ed16v
[3])

484 
__THROW
 
	`__n⁄nuŒ
 ((1));

485 
	$lc⁄g48
 (
__∑øm
[7]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

487 #ifde‡
__USE_MISC


491 
	sdønd48_d©a


493 
__x
[3];

494 
__ﬁd_x
[3];

495 
__c
;

496 
__öô
;

497 
__exãnsi⁄__
 
__a
;

502 
	$dønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

503 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

504 
	$î™d48_r
 (
__xsubi
[3],

505 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

506 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

509 
	$Ã™d48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

510 *
__ª°ri˘
 
__ªsu…
)

511 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

512 
	$ƒ™d48_r
 (
__xsubi
[3],

513 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

514 *
__ª°ri˘
 
__ªsu…
)

515 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

518 
	$mønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

519 *
__ª°ri˘
 
__ªsu…
)

520 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

521 
	$jønd48_r
 (
__xsubi
[3],

522 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

523 *
__ª°ri˘
 
__ªsu…
)

524 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

527 
	$§™d48_r
 (
__£edvÆ
, 
dønd48_d©a
 *
__buf„r
)

528 
__THROW
 
	`__n⁄nuŒ
 ((2));

530 
	$£ed48_r
 (
__£ed16v
[3],

531 
dønd48_d©a
 *
__buf„r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

533 
	$lc⁄g48_r
 (
__∑øm
[7],

534 
dønd48_d©a
 *
__buf„r
)

535 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

540 *
	$mÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__


541 
	`__©åibuã_Æloc_size__
 ((1)Ë
__wur
;

543 *
	$ˇŒoc
 (
size_t
 
__nmemb
, size_à
__size
)

544 
__THROW
 
__©åibuã_mÆloc__
 
	`__©åibuã_Æloc_size__
 ((1, 2)Ë
__wur
;

551 *
	$ªÆloc
 (*
__±r
, 
size_t
 
__size
)

552 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
 
	`__©åibuã_Æloc_size__
 ((2));

555 
	$‰ì
 (*
__±r
Ë
__THROW
;

557 #ifde‡
__USE_MISC


563 *
	$ªÆloˇºay
 (*
__±r
, 
size_t
 
__nmemb
, size_à
__size
)

564 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__


565 
	`__©åibuã_Æloc_size__
 ((2, 3))

566 
__©å_dóŒoc_‰ì
;

569 *
	$ªÆloˇºay
 (*
__±r
, 
size_t
 
__nmemb
, size_à
__size
)

570 
__THROW
 
	`__©å_dóŒoc
 (
ªÆloˇºay
, 1);

573 #ifde‡
__USE_MISC


574 
	~<Æloˇ.h
>

577 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

578 || 
deföed
 
__USE_MISC


580 *
	$vÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__


581 
	`__©åibuã_Æloc_size__
 ((1)Ë
__wur
;

584 #ifde‡
__USE_XOPEN2K


586 
	$posix_memÆign
 (**
__mem±r
, 
size_t
 
__Æignmít
, size_à
__size
)

587 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

590 #ifde‡
__USE_ISOC11


592 *
	$Æig√d_Æloc
 (
size_t
 
__Æignmít
, size_à
__size
)

593 
__THROW
 
__©åibuã_mÆloc__
 
	`__©åibuã_Æloc_Æign__
 ((1))

594 
	`__©åibuã_Æloc_size__
 ((2)Ë
__wur
;

598 
	$ab‹t
 (Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

602 
	$©exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

604 #i‡
deföed
 
__USE_ISOC11
 || deföed 
__USE_ISOCXX11


606 #ifde‡
__˝lu•lus


607 "C++" 
	$©_quick_exô
 ((*
__func
) ())

608 
__THROW
 
	`__asm
 ("©_quick_exô"Ë
	`__n⁄nuŒ
 ((1));

610 
	$©_quick_exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

614 #ifdef 
__USE_MISC


617 
	$⁄_exô
 ((*
__func
Ë(
__°©us
, *
__¨g
), *__arg)

618 
__THROW
 
	`__n⁄nuŒ
 ((1));

624 
	$exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

626 #i‡
deföed
 
__USE_ISOC11
 || deföed 
__USE_ISOCXX11


630 
	$quick_exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

633 #ifde‡
__USE_ISOC99


636 
	$_Exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

641 *
	$gëív
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

643 #ifde‡
__USE_GNU


646 *
	$£cuª_gëív
 (c⁄° *
__«me
)

647 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

650 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


654 
	$puãnv
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

657 #ifde‡
__USE_XOPEN2K


660 
	$£ãnv
 (c⁄° *
__«me
, c⁄° *
__vÆue
, 
__ª∂a˚
)

661 
__THROW
 
	`__n⁄nuŒ
 ((2));

664 
	$un£ãnv
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

667 #ifdef 
__USE_MISC


671 
	$˛óªnv
 (Ë
__THROW
;

675 #i‡
deföed
 
__USE_MISC
 \

676 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
)

682 *
	$mkãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

685 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


694 #i‚de‡
__USE_FILE_OFFSET64


695 
	$mk°emp
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

697 #ifde‡
__REDIRECT


698 
	`__REDIRECT
 (
mk°emp
, (*
__ãm∂©e
), 
mk°emp64
)

699 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

701 
	#mk°emp
 
mk°emp64


	)

704 #ifde‡
__USE_LARGEFILE64


705 
	$mk°emp64
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

709 #ifde‡
__USE_MISC


716 #i‚de‡
__USE_FILE_OFFSET64


717 
	$mk°emps
 (*
__ãm∂©e
, 
__suffixÀn
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

719 #ifde‡
__REDIRECT


720 
	`__REDIRECT
 (
mk°emps
, (*
__ãm∂©e
, 
__suffixÀn
),

721 
mk°emps64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

723 
	#mk°emps
 
mk°emps64


	)

726 #ifde‡
__USE_LARGEFILE64


727 
	$mk°emps64
 (*
__ãm∂©e
, 
__suffixÀn
)

728 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

732 #ifde‡
__USE_XOPEN2K8


738 *
	$mkdãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

741 #ifde‡
__USE_GNU


748 #i‚de‡
__USE_FILE_OFFSET64


749 
	$mko°emp
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

751 #ifde‡
__REDIRECT


752 
	`__REDIRECT
 (
mko°emp
, (*
__ãm∂©e
, 
__Êags
), 
mko°emp64
)

753 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

755 
	#mko°emp
 
mko°emp64


	)

758 #ifde‡
__USE_LARGEFILE64


759 
	$mko°emp64
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

768 #i‚de‡
__USE_FILE_OFFSET64


769 
	$mko°emps
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

770 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

772 #ifde‡
__REDIRECT


773 
	`__REDIRECT
 (
mko°emps
, (*
__ãm∂©e
, 
__suffixÀn
,

774 
__Êags
), 
mko°emps64
)

775 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

777 
	#mko°emps
 
mko°emps64


	)

780 #ifde‡
__USE_LARGEFILE64


781 
	$mko°emps64
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

782 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

791 
	$sy°em
 (c⁄° *
__comm™d
Ë
__wur
;

794 #ifdef 
__USE_GNU


797 *
	$ˇn⁄iˇlize_fûe_«me
 (c⁄° *
__«me
)

798 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_mÆloc__


799 
__©å_dóŒoc_‰ì
 
__wur
;

802 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


808 *
	$ªÆ∑th
 (c⁄° *
__ª°ri˘
 
__«me
,

809 *
__ª°ri˘
 
__ªsﬁved
Ë
__THROW
 
__wur
;

814 #i‚de‡
__COMPAR_FN_T


815 
	#__COMPAR_FN_T


	)

816 (*
	t__com∑r_‚_t
) (const *, const *);

818 #ifdef 
__USE_GNU


819 
__com∑r_‚_t
 
	tcom∑ris⁄_‚_t
;

822 #ifde‡
__USE_GNU


823 (*
	t__com∑r_d_‚_t
) (const *, const *, *);

828 *
	$b£¨ch
 (c⁄° *
__key
, c⁄° *
__ba£
,

829 
size_t
 
__nmemb
, size_à
__size
, 
__com∑r_‚_t
 
__com∑r
)

830 
	`__n⁄nuŒ
 ((1, 2, 5)Ë
__wur
;

832 #ifde‡
__USE_EXTERN_INLINES


833 
	~<bôs/°dlib-b£¨ch.h
>

838 
	$qs‹t
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

839 
__com∑r_‚_t
 
__com∑r
Ë
	`__n⁄nuŒ
 ((1, 4));

840 #ifde‡
__USE_GNU


841 
	$qs‹t_r
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

842 
__com∑r_d_‚_t
 
__com∑r
, *
__¨g
)

843 
	`__n⁄nuŒ
 ((1, 4));

848 
	$abs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

849 
	$œbs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

851 #ifde‡
__USE_ISOC99


852 
__exãnsi⁄__
 
	$Œabs
 (
__x
)

853 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

860 
div_t
 
	$div
 (
__numî
, 
__díom
)

861 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

862 
ldiv_t
 
	$ldiv
 (
__numî
, 
__díom
)

863 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

865 #ifde‡
__USE_ISOC99


866 
__exãnsi⁄__
 
Œdiv_t
 
	$Œdiv
 (
__numî
,

867 
__díom
)

868 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

872 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

873 || 
deföed
 
__USE_MISC


880 *
	$ecvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

881 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

886 *
	$fcvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

887 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

892 *
	$gcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

893 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

896 #ifde‡
__USE_MISC


898 *
	$qecvt
 (
__vÆue
, 
__ndigô
,

899 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

900 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

901 *
	$qfcvt
 (
__vÆue
, 
__ndigô
,

902 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

903 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

904 *
	$qgcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

905 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

910 
	$ecvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

911 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

912 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

913 
	$fcvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

914 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

915 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

917 
	$qecvt_r
 (
__vÆue
, 
__ndigô
,

918 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

919 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

920 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

921 
	$qfcvt_r
 (
__vÆue
, 
__ndigô
,

922 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

923 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

924 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

930 
	$mbÀn
 (c⁄° *
__s
, 
size_t
 
__n
Ë
__THROW
;

933 
	$mbtowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

934 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

937 
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
Ë
__THROW
;

941 
size_t
 
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__pwcs
,

942 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW


943 
	`__©å_ac˚ss
 ((
__ªad_⁄ly__
, 2));

945 
size_t
 
	$wc°ombs
 (*
__ª°ri˘
 
__s
,

946 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__pwcs
, 
size_t
 
__n
)

947 
__THROW


948 
	$__f‹tifõd_©å_ac˚ss
 (
__wrôe_⁄ly__
, 1, 3)

949 
	`__©å_ac˚ss
 ((
__ªad_⁄ly__
, 2));

951 #ifde‡
__USE_MISC


956 
	$Ωm©ch
 (c⁄° *
__ª•⁄£
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

960 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


967 
	$gësub›t
 (**
__ª°ri˘
 
__›ti⁄p
,

968 *c⁄° *
__ª°ri˘
 
__tokís
,

969 **
__ª°ri˘
 
__vÆuï
)

970 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3)Ë
__wur
;

976 #ifde‡
__USE_XOPEN2KXSI


978 
	$posix_›í±
 (
__oÊag
Ë
__wur
;

981 #ifde‡
__USE_XOPEN_EXTENDED


986 
	$gø¡±
 (
__fd
Ë
__THROW
;

990 
	$u∆ock±
 (
__fd
Ë
__THROW
;

995 *
	$±¢ame
 (
__fd
Ë
__THROW
 
__wur
;

998 #ifde‡
__USE_GNU


1002 
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

1003 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
	`__f‹tifõd_©å_ac˚ss
 (
__wrôe_⁄ly__
, 2, 3);

1006 
	`gë±
 ();

1009 #ifde‡
__USE_MISC


1013 
	$gëlﬂdavg
 (
__lﬂdavg
[], 
__√Àm
)

1014 
__THROW
 
	`__n⁄nuŒ
 ((1));

1017 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K


1020 
	$ây¶Ÿ
 (Ë
__THROW
;

1023 
	~<bôs/°dlib-Êﬂt.h
>

1026 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


1027 
	~<bôs/°dlib.h
>

1030 
	~<bôs/Êﬂä.h
>

1031 #i‡
deföed
 
__LDBL_COMPAT
 || 
__LDOUBLE_REDIRECTS_TO_FLOAT128_ABI
 == 1

1032 
	~<bôs/°dlib-ldbl.h
>

1035 
__END_DECLS


	@/usr/include/string.h

22 #i‚def 
_STRING_H


23 
	#_STRING_H
 1

	)

25 
	#__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION


	)

26 
	~<bôs/libc-hódî-°¨t.h
>

28 
	g__BEGIN_DECLS


31 
	#__√ed_size_t


	)

32 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

36 #i‡
deföed
 
__˝lu•lus
 && (
__GNUC_PREREQ
 (4, 4) \

37 || 
	$__glibc_˛™g_¥îeq
 (3, 5))

38 
	#__CORRECT_ISO_CPP_STRING_H_PROTO


	)

43 *
	$mem˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

44 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

47 *
	$memmove
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

48 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

53 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN
 || 
	`__GLIBC_USE
 (
ISOC2X
)

54 *
	$memc˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

55 
__c
, 
size_t
 
__n
)

56 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 1, 4));

61 *
	$mem£t
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

64 
	$memcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

65 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

80 
	$__memcm≥q
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

81 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

84 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


87 *
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

88 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

89 c⁄° *
	`memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

90 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

92 #ifde‡
__OPTIMIZE__


93 
__exã∫_Æways_ölöe
 *

94 
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


96  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

99 
__exã∫_Æways_ölöe
 const *

100 
	`memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


102  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

105 
	}
}

107 *
	$memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

108 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

111 #ifde‡
__USE_GNU


114 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


115 "C++" *
	$øwmemchr
 (*
__s
, 
__c
)

116 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

117 "C++" c⁄° *
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

118 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

120 *
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

121 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

125 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


126 "C++" *
	$memrchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

127 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1))

128 
	`__©å_ac˚ss
 ((
__ªad_⁄ly__
, 1, 3));

129 "C++" c⁄° *
	$memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

130 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1))

131 
	`__©å_ac˚ss
 ((
__ªad_⁄ly__
, 1, 3));

133 *
	$memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

134 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1))

135 
	`__©å_ac˚ss
 ((
__ªad_⁄ly__
, 1, 3));

141 *
	$°r˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

142 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

144 *
	$°∫˝y
 (*
__ª°ri˘
 
__de°
,

145 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

146 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

149 *
	$°rˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

150 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

152 *
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

153 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

156 
	$°rcmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

157 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

159 
	$°∫cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

160 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

163 
	$°rcﬁl
 (c⁄° *
__s1
, c⁄° *
__s2
)

164 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

166 
size_t
 
	$°rx‰m
 (*
__ª°ri˘
 
__de°
,

167 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

168 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 1, 3));

170 #ifde‡
__USE_XOPEN2K8


172 
	~<bôs/ty≥s/loˇÀ_t.h
>

175 
	$°rcﬁl_l
 (c⁄° *
__s1
, c⁄° *
__s2
, 
loˇÀ_t
 
__l
)

176 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

179 
size_t
 
	$°rx‰m_l
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
,

180 
loˇÀ_t
 
__l
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4))

181 
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 1, 3));

184 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8
 \

185 || 
	`__GLIBC_USE
 (
LIB_EXT2
Ë|| 
	$__GLIBC_USE
 (
ISOC2X
))

187 *
	$°rdup
 (c⁄° *
__s
)

188 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

194 #i‡
deföed
 
__USE_XOPEN2K8
 || 
	`__GLIBC_USE
 (
LIB_EXT2
Ë|| __GLIBC_USE (
ISOC2X
)

195 *
	$°∫dup
 (c⁄° *
__°rög
, 
size_t
 
__n
)

196 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

199 #i‡
deföed
 
__USE_GNU
 && deföed 
__GNUC__


201 
	#°rdu∑
(
s
) \

202 (
__exãnsi⁄__
 \

204 c⁄° *
__ﬁd
 = (
s
); \

205 
size_t
 
__Àn
 = 
	`°æí
 (
__ﬁd
) + 1; \

206 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
); \

207 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

208 
	}
}))

	)

211 
	#°∫du∑
(
s
, 
n
) \

212 (
__exãnsi⁄__
 \

214 c⁄° *
__ﬁd
 = (
s
); \

215 
size_t
 
__Àn
 = 
	`°∫Àn
 (
__ﬁd
, (
n
)); \

216 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
 + 1); \

217 
__√w
[
__Àn
] = '\0'; \

218 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

219 }))

	)

223 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


226 *
°rchr
 (*
__s
, 
__c
)

227 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

228 c⁄° *
°rchr
 (c⁄° *
__s
, 
__c
)

229 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

231 #ifde‡
__OPTIMIZE__


232 
__exã∫_Æways_ölöe
 *

233 
°rchr
 (*
__s
, 
__c
Ë
	g__THROW


235  
__buûtö_°rchr
 (
__s
, 
__c
);

238 
__exã∫_Æways_ölöe
 const *

239 
°rchr
 (c⁄° *
__s
, 
__c
Ë
	g__THROW


241  
__buûtö_°rchr
 (
__s
, 
__c
);

246 *
	$°rchr
 (c⁄° *
__s
, 
__c
)

247 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

250 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


253 *
	`°ºchr
 (*
__s
, 
__c
)

254 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

255 c⁄° *
	`°ºchr
 (c⁄° *
__s
, 
__c
)

256 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

258 #ifde‡
__OPTIMIZE__


259 
__exã∫_Æways_ölöe
 *

260 
	`°ºchr
 (*
__s
, 
__c
Ë
__THROW


262  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

265 
__exã∫_Æways_ölöe
 const *

266 
	`°ºchr
 (c⁄° *
__s
, 
__c
Ë
__THROW


268  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

271 
	}
}

273 *
	$°ºchr
 (c⁄° *
__s
, 
__c
)

274 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

277 #ifde‡
__USE_GNU


280 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


281 "C++" *
	$°rch∫ul
 (*
__s
, 
__c
)

282 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

283 "C++" c⁄° *
	$°rch∫ul
 (c⁄° *
__s
, 
__c
)

284 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

286 *
	$°rch∫ul
 (c⁄° *
__s
, 
__c
)

287 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

293 
size_t
 
	$°rc•n
 (c⁄° *
__s
, c⁄° *
__ªje˘
)

294 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

297 
size_t
 
	$°r•n
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

298 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

300 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


303 *
	`°Ωbrk
 (*
__s
, c⁄° *
__ac˚±
)

304 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

305 c⁄° *
	`°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

306 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

308 #ifde‡
__OPTIMIZE__


309 
__exã∫_Æways_ölöe
 *

310 
	`°Ωbrk
 (*
__s
, c⁄° *
__ac˚±
Ë
__THROW


312  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

315 
__exã∫_Æways_ölöe
 const *

316 
	`°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
Ë
__THROW


318  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

321 
	}
}

323 *
	$°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

324 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

327 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


330 *
	`°r°r
 (*
__hay°ack
, c⁄° *
__√edÀ
)

331 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

332 c⁄° *
	`°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

333 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

335 #ifde‡
__OPTIMIZE__


336 
__exã∫_Æways_ölöe
 *

337 
	`°r°r
 (*
__hay°ack
, c⁄° *
__√edÀ
Ë
__THROW


339  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

342 
__exã∫_Æways_ölöe
 const *

343 
	`°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
Ë
__THROW


345  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

348 
	}
}

350 *
	$°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

351 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

356 *
	$°πok
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__dñim
)

357 
__THROW
 
	`__n⁄nuŒ
 ((2));

361 *
	$__°πok_r
 (*
__ª°ri˘
 
__s
,

362 c⁄° *
__ª°ri˘
 
__dñim
,

363 **
__ª°ri˘
 
__ßve_±r
)

364 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

365 #ifde‡
__USE_POSIX


366 *
	$°πok_r
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__dñim
,

367 **
__ª°ri˘
 
__ßve_±r
)

368 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

371 #ifde‡
__USE_GNU


373 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


374 "C++" *
	$°rˇ£°r
 (*
__hay°ack
, c⁄° *
__√edÀ
)

375 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

376 "C++" c⁄° *
	$°rˇ£°r
 (c⁄° *
__hay°ack
,

377 c⁄° *
__√edÀ
)

378 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

380 *
	$°rˇ£°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

381 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

385 #ifde‡
__USE_GNU


389 *
	$memmem
 (c⁄° *
__hay°ack
, 
size_t
 
__hay°ackÀn
,

390 c⁄° *
__√edÀ
, 
size_t
 
__√edÀÀn
)

391 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 3))

392 
	`__©å_ac˚ss
 ((
__ªad_⁄ly__
, 1, 2))

393 
	`__©å_ac˚ss
 ((
__ªad_⁄ly__
, 3, 4));

397 *
	$__memp˝y
 (*
__ª°ri˘
 
__de°
,

398 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

399 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

400 *
	$memp˝y
 (*
__ª°ri˘
 
__de°
,

401 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

402 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

407 
size_t
 
	$°æí
 (c⁄° *
__s
)

408 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

410 #ifdef 
__USE_XOPEN2K8


413 
size_t
 
	$°∫Àn
 (c⁄° *
__°rög
, 
size_t
 
__maxÀn
)

414 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

419 *
	$°ªº‹
 (
__î∫um
Ë
__THROW
;

420 #ifde‡
__USE_XOPEN2K


428 #i‡
deföed
 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


431 #ifde‡
__REDIRECT_NTH


432 
	`__REDIRECT_NTH
 (
°ªº‹_r
,

433 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
),

434 
__xpg_°ªº‹_r
Ë
	`__n⁄nuŒ
 ((2))

435 
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 2, 3));

437 
	$__xpg_°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

438 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 2, 3));

439 
	#°ªº‹_r
 
__xpg_°ªº‹_r


	)

444 *
	$°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

445 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
 
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 2, 3));

448 #ifde‡
__USE_GNU


450 c⁄° *
	$°ªº‹desc_≈
 (
__îr
Ë
__THROW
;

452 c⁄° *
	$°ªº‹«me_≈
 (
__îr
Ë
__THROW
;

456 #ifde‡
__USE_XOPEN2K8


458 *
	$°ªº‹_l
 (
__î∫um
, 
loˇÀ_t
 
__l
Ë
__THROW
;

461 #ifde‡
__USE_MISC


462 
	~<°rögs.h
>

466 
	$ex∂icô_bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1))

467 
	`__f‹tifõd_©å_ac˚ss
 (
__wrôe_⁄ly__
, 1, 2);

471 *
	$°r£p
 (**
__ª°ri˘
 
__°rögp
,

472 c⁄° *
__ª°ri˘
 
__dñim
)

473 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

476 #ifdef 
__USE_XOPEN2K8


478 *
	$°rsig«l
 (
__sig
Ë
__THROW
;

480 #ifde‡
__USE_GNU


482 c⁄° *
	$sigabbªv_≈
 (
__sig
Ë
__THROW
;

485 c⁄° *
	$sigdes¸_≈
 (
__sig
Ë
__THROW
;

489 *
	$__°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

490 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

491 *
	$°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

492 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

496 *
	$__°≤˝y
 (*
__ª°ri˘
 
__de°
,

497 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

498 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

499 *
	$°≤˝y
 (*
__ª°ri˘
 
__de°
,

500 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

501 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

504 #ifdef 
__USE_GNU


506 
	$°rvîscmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

507 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

510 *
	$°r‰y
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

513 *
	$mem‰ob
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1))

514 
	`__©å_ac˚ss
 ((
__ªad_wrôe__
, 1, 2));

516 #i‚de‡
ba£«me


521 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


522 "C++" *
	$ba£«me
 (*
__fûíame
)

523 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

524 "C++" c⁄° *
	$ba£«me
 (c⁄° *
__fûíame
)

525 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

527 *
	$ba£«me
 (c⁄° *
__fûíame
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

532 #i‡
	`__GNUC_PREREQ
 (3,4)

533 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


535 
	~<bôs/°rög_f‹tifõd.h
>

539 
__END_DECLS


	@/usr/include/time.h

22 #i‚def 
_TIME_H


23 
	#_TIME_H
 1

	)

25 
	~<„©uªs.h
>

27 
	#__√ed_size_t


	)

28 
	#__√ed_NULL


	)

29 
	~<°ddef.h
>

33 
	~<bôs/time.h
>

37 
	~<bôs/ty≥s/˛ock_t.h
>

38 
	~<bôs/ty≥s/time_t.h
>

39 
	~<bôs/ty≥s/°ru˘_tm.h
>

41 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_ISOC11


42 
	~<bôs/ty≥s/°ru˘_time•ec.h
>

45 #ifde‡
__USE_POSIX199309


46 
	~<bôs/ty≥s/˛ockid_t.h
>

47 
	~<bôs/ty≥s/timî_t.h
>

48 
	~<bôs/ty≥s/°ru˘_ôimî•ec.h
>

49 
	gsigevít
;

52 #ifde‡
__USE_XOPEN2K


53 #i‚de‡
__pid_t_deföed


54 
__pid_t
 
	tpid_t
;

55 
	#__pid_t_deföed


	)

59 #ifde‡
__USE_XOPEN2K8


60 
	~<bôs/ty≥s/loˇÀ_t.h
>

63 #ifde‡
__USE_ISOC11


65 
	#TIME_UTC
 1

	)

68 
__BEGIN_DECLS


72 
˛ock_t
 
	$˛ock
 (Ë
__THROW
;

74 #i‚de‡
__USE_TIME_BITS64


76 
time_t
 
	$time
 (
time_t
 *
__timî
Ë
__THROW
;

79 
	$dif·ime
 (
time_t
 
__time1
,Åime_à
__time0
)

80 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

83 
time_t
 
	$mktime
 (
tm
 *
__ç
Ë
__THROW
;

85 #ifde‡
__REDIRECT_NTH


86 
time_t
 
	`__REDIRECT_NTH
 (
time
, (time_à*
__timî
), 
__time64
);

87 
	`__REDIRECT_NTH
 (
dif·ime
, (
time_t
 
__time1
,Åime_à
__time0
),

88 
__dif·ime64
Ë
	`__©åibuã__
 ((
__c⁄°__
));

89 
time_t
 
	`__REDIRECT_NTH
 (
mktime
, (
tm
 *
__ç
), 
__mktime64
);

91 
	#time
 
__time64


	)

92 
	#dif·ime
 
__dif·ime64


	)

93 
	#mktime
 
__mktime64


	)

100 
size_t
 
	$°r·ime
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

101 c⁄° *
__ª°ri˘
 
__f‹m©
,

102 c⁄° 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

104 #ifde‡
__USE_XOPEN


107 *
	$°Ωtime
 (c⁄° *
__ª°ri˘
 
__s
,

108 c⁄° *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
)

109 
__THROW
;

112 #ifde‡
__USE_XOPEN2K8


116 
size_t
 
	$°r·ime_l
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

117 c⁄° *
__ª°ri˘
 
__f‹m©
,

118 c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

119 
loˇÀ_t
 
__loc
Ë
__THROW
;

122 #ifde‡
__USE_GNU


123 *
	$°Ωtime_l
 (c⁄° *
__ª°ri˘
 
__s
,

124 c⁄° *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
,

125 
loˇÀ_t
 
__loc
Ë
__THROW
;

129 #i‚de‡
__USE_TIME_BITS64


132 
tm
 *
	$gmtime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

136 
tm
 *
	$loˇ…ime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

139 #ifde‡
__REDIRECT_NTH


140 
tm
*
	`__REDIRECT_NTH
 (
gmtime
, (c⁄° 
time_t
 *
__timî
), 
__gmtime64
);

141 
tm
 *
	`__REDIRECT_NTH
 (
loˇ…ime
, (c⁄° 
time_t
 *
__timî
),

142 
__loˇ…ime64
);

144 
	#gmtime
 
__gmtime64


	)

145 
	#loˇ…ime
 
__loˇ…ime64


	)

150 #i‡
deföed
 
__USE_POSIX
 || 
	`__GLIBC_USE
 (
ISOC2X
)

151 #i‚de‡
__USE_TIME_BITS64


154 
tm
 *
	$gmtime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

155 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

159 
tm
 *
	$loˇ…ime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

160 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

162 #ifde‡
__REDIRECT_NTH


163 
tm
*
	`__REDIRECT_NTH
 (
gmtime_r
, (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

164 
tm
 *
__ª°ri˘
 
__ç
),

165 
__gmtime64_r
);

167 
tm
*
	`__REDIRECT_NTH
 (
loˇ…ime_r
, (c⁄° 
time_t
 *
__ª°ri˘
 
__t
,

168 
tm
 *
__ª°ri˘
 
__ç
),

169 
__loˇ…ime64_r
);

171 
	#gmtime_r
 
__gmtime64_r


	)

172 
	#loˇ…ime_r
 
__loˇ…ime_r


	)

179 *
	$as˘ime
 (c⁄° 
tm
 *
__ç
Ë
__THROW
;

182 #i‚de‡
__USE_TIME_BITS64


183 *
	$˘ime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

185 #ifde‡
__REDIRECT_NTH


186 *
	`__REDIRECT_NTH
 (
˘ime
, (c⁄° 
time_t
 *
__timî
), 
__˘ime64
);

188 
	#˘ime
 
__˘ime64


	)

192 #ifde‡
__USE_POSIX


197 *
	$as˘ime_r
 (c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

198 *
__ª°ri˘
 
__buf
Ë
__THROW
;

201 #i‚de‡
__USE_TIME_BITS64


202 *
	$˘ime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

203 *
__ª°ri˘
 
__buf
Ë
__THROW
;

205 #ifde‡
__REDIRECT_NTH


206 *
	`__REDIRECT_NTH
 (
˘ime_r
, (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

207 *
__ª°ri˘
 
__buf
), 
__˘ime64_r
);

209 
	#˘ime_r
 
__˘ime64_r


	)

217 *
__tz«me
[2];

218 
__daylight
;

219 
__timez⁄e
;

222 #ifdef 
__USE_POSIX


224 *
tz«me
[2];

228 
	$tz£t
 (Ë
__THROW
;

231 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


232 
daylight
;

233 
timez⁄e
;

239 
	#__i¶óp
(
yór
) \

240 ((
yór
Ë% 4 =0 && ((yórË% 100 !0 || (yórË% 400 =0))

	)

243 #ifde‡
__USE_MISC


247 #i‚de‡
__USE_TIME_BITS64


249 
time_t
 
	$timegm
 (
tm
 *
__ç
Ë
__THROW
;

251 
time_t
 
	$timñoˇl
 (
tm
 *
__ç
Ë
__THROW
;

253 #ifde‡
__REDIRECT_NTH


254 
time_t
 
	`__REDIRECT_NTH
 (
timegm
, (
tm
 *
__ç
), 
__timegm64
);

255 
time_t
 
	`__REDIRECT_NTH
 (
timñoˇl
, (
tm
 *
__ç
), 
__mktime64
);

257 
	#timegm
 
__timegm64


	)

262 
	$dysize
 (
__yór
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

266 #ifde‡
__USE_POSIX199309


267 #i‚de‡
__USE_TIME_BITS64


272 
	`«no¶ìp
 (c⁄° 
time•ec
 *
__ªque°ed_time
,

273 
time•ec
 *
__ªmaöög
);

276 
	$˛ock_gëªs
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ªs
Ë
__THROW
;

279 
	$˛ock_gëtime
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ç
Ë
__THROW
;

282 
	$˛ock_£âime
 (
˛ockid_t
 
__˛ock_id
, c⁄° 
time•ec
 *
__ç
)

283 
__THROW
;

285 #ifde‡
__REDIRECT


286 
	`__REDIRECT
 (
«no¶ìp
, (c⁄° 
time•ec
 *
__ªque°ed_time
,

287 
time•ec
 *
__ªmaöög
),

288 
__«no¶ìp64
);

289 
	`__REDIRECT_NTH
 (
˛ock_gëªs
, (
˛ockid_t
 
__˛ock_id
,

290 
time•ec
 *
__ªs
),

291 
__˛ock_gëªs64
);

292 
	`__REDIRECT_NTH
 (
˛ock_gëtime
, (
˛ockid_t
 
__˛ock_id
, 

293 
time•ec
 *
__ç
), 
__˛ock_gëtime64
);

294 
	`__REDIRECT_NTH
 (
˛ock_£âime
, (
˛ockid_t
 
__˛ock_id
, const 

295 
time•ec
 *
__ç
), 
__˛ock_£âime64
);

297 
	#«no¶ìp
 
__«no¶ìp64


	)

298 
	#˛ock_gëªs
 
__˛ock_gëªs64


	)

299 
	#˛ock_gëtime
 
__˛ock_gëtime64


	)

300 
	#˛ock_£âime
 
__˛ock_£âime64


	)

305 #ifde‡
__USE_XOPEN2K


310 #i‚de‡
__USE_TIME_BITS64


311 
	`˛ock_«no¶ìp
 (
˛ockid_t
 
__˛ock_id
, 
__Êags
,

312 c⁄° 
time•ec
 *
__ªq
,

313 
time•ec
 *
__ªm
);

315 #ifde‡
__REDIRECT


316 
	`__REDIRECT
 (
˛ock_«no¶ìp
, (
˛ockid_t
 
__˛ock_id
, 
__Êags
,

317 c⁄° 
time•ec
 *
__ªq
,

318 
time•ec
 *
__ªm
),

319 
__˛ock_«no¶ìp_time64
);

321 
	#˛ock_«no¶ìp
 
__˛ock_«no¶ìp_time64


	)

326 
	$˛ock_gë˝u˛ockid
 (
pid_t
 
__pid
, 
˛ockid_t
 *
__˛ock_id
Ë
__THROW
;

331 
	$timî_¸óã
 (
˛ockid_t
 
__˛ock_id
,

332 
sigevít
 *
__ª°ri˘
 
__evp
,

333 
timî_t
 *
__ª°ri˘
 
__timîid
Ë
__THROW
;

336 
	$timî_dñëe
 (
timî_t
 
__timîid
Ë
__THROW
;

339 #i‚de‡
__USE_TIME_BITS64


340 
	$timî_£âime
 (
timî_t
 
__timîid
, 
__Êags
,

341 c⁄° 
ôimî•ec
 *
__ª°ri˘
 
__vÆue
,

342 
ôimî•ec
 *
__ª°ri˘
 
__ovÆue
Ë
__THROW
;

345 
	$timî_gëtime
 (
timî_t
 
__timîid
, 
ôimî•ec
 *
__vÆue
)

346 
__THROW
;

348 #ifde‡
__REDIRECT_NTH


349 
	`__REDIRECT_NTH
 (
timî_£âime
, (
timî_t
 
__timîid
, 
__Êags
,

350 c⁄° 
ôimî•ec
 *
__ª°ri˘
 
__vÆue
,

351 
ôimî•ec
 *
__ª°ri˘
 
__ovÆue
),

352 
__timî_£âime64
);

354 
	`__REDIRECT_NTH
 (
timî_gëtime
, (
timî_t
 
__timîid
,

355 
ôimî•ec
 *
__vÆue
),

356 
__timî_gëtime64
);

358 
	#timî_£âime
 
__timî_£âime64


	)

359 
	#timî_gëtime
 
__timî_gëtime64


	)

364 
	$timî_gëovîrun
 (
timî_t
 
__timîid
Ë
__THROW
;

368 #ifde‡
__USE_ISOC11


369 #i‚de‡
__USE_TIME_BITS64


371 
	$time•ec_gë
 (
time•ec
 *
__ts
, 
__ba£
)

372 
__THROW
 
	`__n⁄nuŒ
 ((1));

374 #ifde‡
__REDIRECT_NTH


375 
	`__REDIRECT_NTH
 (
time•ec_gë
, (
time•ec
 *
__ts
, 
__ba£
),

376 
__time•ec_gë64
Ë
	`__n⁄nuŒ
 ((1));

378 
	#time•ec_gë
 
__time•ec_gë64


	)

384 #i‡
	`__GLIBC_USE
 (
ISOC2X
)

385 #i‚de‡
__USE_TIME_BITS64


387 
	$time•ec_gëªs
 (
time•ec
 *
__ts
, 
__ba£
)

388 
__THROW
;

390 #ifde‡
__REDIRECT_NTH


391 
	`__REDIRECT_NTH
 (
time•ec_gëªs
, (
time•ec
 *
__ts
,

392 
__ba£
),

393 
__time•ec_gëªs64
);

395 
	#time•ec_gëªs
 
__time•ec_gëªs64


	)

401 #ifde‡
__USE_XOPEN_EXTENDED


413 
gëd©e_îr
;

422 
tm
 *
	`gëd©e
 (c⁄° *
__°rög
);

425 #ifde‡
__USE_GNU


436 
	`gëd©e_r
 (c⁄° *
__ª°ri˘
 
__°rög
,

437 
tm
 *
__ª°ri˘
 
__ªsbuÂ
);

440 
__END_DECLS


	@/usr/include/unistd.h

22 #i‚def 
_UNISTD_H


23 
	#_UNISTD_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


32 #ifde‡
__USE_XOPEN2K8


34 
	#_POSIX_VERSION
 200809L

	)

35 #ñi‡
deföed
 
__USE_XOPEN2K


37 
	#_POSIX_VERSION
 200112L

	)

38 #ñi‡
deföed
 
__USE_POSIX199506


40 
	#_POSIX_VERSION
 199506L

	)

41 #ñi‡
deföed
 
__USE_POSIX199309


43 
	#_POSIX_VERSION
 199309L

	)

46 
	#_POSIX_VERSION
 199009L

	)

52 #ifde‡
__USE_XOPEN2K8


53 
	#__POSIX2_THIS_VERSION
 200809L

	)

55 #ñi‡
deföed
 
__USE_XOPEN2K


57 
	#__POSIX2_THIS_VERSION
 200112L

	)

58 #ñi‡
deföed
 
__USE_POSIX199506


60 
	#__POSIX2_THIS_VERSION
 199506L

	)

63 
	#__POSIX2_THIS_VERSION
 199209L

	)

67 
	#_POSIX2_VERSION
 
__POSIX2_THIS_VERSION


	)

70 
	#_POSIX2_C_VERSION
 
__POSIX2_THIS_VERSION


	)

74 
	#_POSIX2_C_BIND
 
__POSIX2_THIS_VERSION


	)

78 
	#_POSIX2_C_DEV
 
__POSIX2_THIS_VERSION


	)

82 
	#_POSIX2_SW_DEV
 
__POSIX2_THIS_VERSION


	)

86 
	#_POSIX2_LOCALEDEF
 
__POSIX2_THIS_VERSION


	)

89 #ifde‡
__USE_XOPEN2K8


90 
	#_XOPEN_VERSION
 700

	)

91 #ñi‡
deföed
 
__USE_XOPEN2K


92 
	#_XOPEN_VERSION
 600

	)

93 #ñi‡
deföed
 
__USE_UNIX98


94 
	#_XOPEN_VERSION
 500

	)

96 
	#_XOPEN_VERSION
 4

	)

100 
	#_XOPEN_XCU_VERSION
 4

	)

103 
	#_XOPEN_XPG2
 1

	)

104 
	#_XOPEN_XPG3
 1

	)

105 
	#_XOPEN_XPG4
 1

	)

108 
	#_XOPEN_UNIX
 1

	)

112 
	#_XOPEN_ENH_I18N
 1

	)

115 
	#_XOPEN_LEGACY
 1

	)

202 
	~<bôs/posix_›t.h
>

205 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


206 
	~<bôs/ívú⁄míts.h
>

210 
	#STDIN_FILENO
 0

	)

211 
	#STDOUT_FILENO
 1

	)

212 
	#STDERR_FILENO
 2

	)

217 
	~<bôs/ty≥s.h
>

219 #i‚def 
__ssize_t_deföed


220 
__ssize_t
 
	tssize_t
;

221 
	#__ssize_t_deföed


	)

224 
	#__√ed_size_t


	)

225 
	#__√ed_NULL


	)

226 
	~<°ddef.h
>

228 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


231 #i‚de‡
__gid_t_deföed


232 
__gid_t
 
	tgid_t
;

233 
	#__gid_t_deföed


	)

236 #i‚de‡
__uid_t_deföed


237 
__uid_t
 
	tuid_t
;

238 
	#__uid_t_deföed


	)

241 #i‚de‡
__off_t_deföed


242 #i‚de‡
__USE_FILE_OFFSET64


243 
__off_t
 
	toff_t
;

245 
__off64_t
 
	toff_t
;

247 
	#__off_t_deföed


	)

249 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


250 
__off64_t
 
	toff64_t
;

251 
	#__off64_t_deföed


	)

254 #i‚de‡
__u£c⁄ds_t_deföed


255 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

256 
	#__u£c⁄ds_t_deföed


	)

259 #i‚de‡
__pid_t_deföed


260 
__pid_t
 
	tpid_t
;

261 
	#__pid_t_deföed


	)

265 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


266 #i‚de‡
__öçå_t_deföed


267 
__öçå_t
 
	töçå_t
;

268 
	#__öçå_t_deföed


	)

272 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


273 #i‚de‡
__sockÀn_t_deföed


274 
__sockÀn_t
 
	tsockÀn_t
;

275 
	#__sockÀn_t_deföed


	)

281 
	#R_OK
 4

	)

282 
	#W_OK
 2

	)

283 
	#X_OK
 1

	)

284 
	#F_OK
 0

	)

287 
	$ac˚ss
 (c⁄° *
__«me
, 
__ty≥
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

289 #ifde‡
__USE_GNU


292 
	$euidac˚ss
 (c⁄° *
__«me
, 
__ty≥
)

293 
__THROW
 
	`__n⁄nuŒ
 ((1));

296 
	$óc˚ss
 (c⁄° *
__«me
, 
__ty≥
)

297 
__THROW
 
	`__n⁄nuŒ
 ((1));

300 
	$execvót
 (
__fd
, c⁄° *
__∑th
, *c⁄° 
__¨gv
[],

301 *c⁄° 
__ívp
[], 
__Êags
)

302 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

305 #ifde‡
__USE_ATFILE


309 
	$Ác˚sßt
 (
__fd
, c⁄° *
__fûe
, 
__ty≥
, 
__Êag
)

310 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

315 #i‚def 
_STDIO_H


316 
	#SEEK_SET
 0

	)

317 
	#SEEK_CUR
 1

	)

318 
	#SEEK_END
 2

	)

319 #ifde‡
__USE_GNU


320 
	#SEEK_DATA
 3

	)

321 
	#SEEK_HOLE
 4

	)

325 #i‡
deföed
 
__USE_MISC
 && !deföed 
L_SET


327 
	#L_SET
 
SEEK_SET


	)

328 
	#L_INCR
 
SEEK_CUR


	)

329 
	#L_XTND
 
SEEK_END


	)

338 #i‚de‡
__USE_FILE_OFFSET64


339 
__off_t
 
	$l£ek
 (
__fd
, 
__off_t
 
__off£t
, 
__whí˚
Ë
__THROW
;

341 #ifde‡
__REDIRECT_NTH


342 
__off64_t
 
	`__REDIRECT_NTH
 (
l£ek
,

343 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
),

344 
l£ek64
);

346 
	#l£ek
 
l£ek64


	)

349 #ifde‡
__USE_LARGEFILE64


350 
__off64_t
 
	$l£ek64
 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
)

351 
__THROW
;

358 
	`˛o£
 (
__fd
);

360 #ifde‡
__USE_MISC


363 
	$˛o£‰om
 (
__lowfd
Ë
__THROW
;

371 
ssize_t
 
	$ªad
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
Ë
__wur


372 
	`__f‹tifõd_©å_ac˚ss
 (
__wrôe_⁄ly__
, 2, 3);

378 
ssize_t
 
	$wrôe
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
Ë
__wur


379 
	`__©å_ac˚ss
 ((
__ªad_⁄ly__
, 2, 3));

381 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


382 #i‚de‡
__USE_FILE_OFFSET64


389 
ssize_t
 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

390 
__off_t
 
__off£t
Ë
__wur


391 
	`__f‹tifõd_©å_ac˚ss
 (
__wrôe_⁄ly__
, 2, 3);

398 
ssize_t
 
	$pwrôe
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
,

399 
__off_t
 
__off£t
Ë
__wur


400 
	`__©å_ac˚ss
 ((
__ªad_⁄ly__
, 2, 3));

403 #ifde‡
__REDIRECT


404 
ssize_t
 
	`__REDIRECT
 (
¥ód
, (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

405 
__off64_t
 
__off£t
),

406 
¥ód64
Ë
__wur


407 
	`__f‹tifõd_©å_ac˚ss
 (
__wrôe_⁄ly__
, 2, 3);

408 
ssize_t
 
	`__REDIRECT
 (
pwrôe
, (
__fd
, c⁄° *
__buf
,

409 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
),

410 
pwrôe64
Ë
__wur


411 
	`__©å_ac˚ss
 ((
__ªad_⁄ly__
, 2, 3));

413 
	#¥ód
 
¥ód64


	)

414 
	#pwrôe
 
pwrôe64


	)

418 #ifde‡
__USE_LARGEFILE64


422 
ssize_t
 
	$¥ód64
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

423 
__off64_t
 
__off£t
Ë
__wur


424 
	`__f‹tifõd_©å_ac˚ss
 (
__wrôe_⁄ly__
, 2, 3);

427 
ssize_t
 
	$pwrôe64
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
,

428 
__off64_t
 
__off£t
Ë
__wur


429 
	`__©å_ac˚ss
 ((
__ªad_⁄ly__
, 2, 3));

437 
	$pùe
 (
__pùedes
[2]Ë
__THROW
 
__wur
;

439 #ifde‡
__USE_GNU


442 
	$pùe2
 (
__pùedes
[2], 
__Êags
Ë
__THROW
 
__wur
;

452 
	$Æ¨m
 (
__£c⁄ds
Ë
__THROW
;

464 
	`¶ìp
 (
__£c⁄ds
);

466 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

467 || 
deföed
 
__USE_MISC


472 
__u£c⁄ds_t
 
	$uÆ¨m
 (
__u£c⁄ds_t
 
__vÆue
, __u£c⁄ds_à
__öãrvÆ
)

473 
__THROW
;

480 
	`u¶ìp
 (
__u£c⁄ds_t
 
__u£c⁄ds
);

489 
	`∑u£
 ();

493 
	$chown
 (c⁄° *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

494 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

496 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


498 
	$fchown
 (
__fd
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
Ë
__THROW
 
__wur
;

503 
	$lchown
 (c⁄° *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

504 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

508 #ifde‡
__USE_ATFILE


511 
	$fchow«t
 (
__fd
, c⁄° *
__fûe
, 
__uid_t
 
__ow√r
,

512 
__gid_t
 
__group
, 
__Êag
)

513 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

517 
	$chdú
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

519 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


521 
	$fchdú
 (
__fd
Ë
__THROW
 
__wur
;

531 *
	$gëcwd
 (*
__buf
, 
size_t
 
__size
Ë
__THROW
 
__wur
;

533 #ifdef 
__USE_GNU


537 *
	$gë_cuºít_dú_«me
 (Ë
__THROW
;

540 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

541 || 
deföed
 
__USE_MISC


545 *
	$gëwd
 (*
__buf
)

546 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
 
__wur


547 
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 1));

552 
	$dup
 (
__fd
Ë
__THROW
 
__wur
;

555 
	$dup2
 (
__fd
, 
__fd2
Ë
__THROW
;

557 #ifde‡
__USE_GNU


560 
	$dup3
 (
__fd
, 
__fd2
, 
__Êags
Ë
__THROW
;

564 **
__ívú⁄
;

565 #ifde‡
__USE_GNU


566 **
ívú⁄
;

572 
	$execve
 (c⁄° *
__∑th
, *c⁄° 
__¨gv
[],

573 *c⁄° 
__ívp
[]Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

575 #ifde‡
__USE_XOPEN2K8


578 
	$„xecve
 (
__fd
, *c⁄° 
__¨gv
[], *c⁄° 
__ívp
[])

579 
__THROW
 
	`__n⁄nuŒ
 ((2));

584 
	$execv
 (c⁄° *
__∑th
, *c⁄° 
__¨gv
[])

585 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

589 
	$exe˛e
 (c⁄° *
__∑th
, c⁄° *
__¨g
, ...)

590 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

594 
	$exe˛
 (c⁄° *
__∑th
, c⁄° *
__¨g
, ...)

595 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

599 
	$execvp
 (c⁄° *
__fûe
, *c⁄° 
__¨gv
[])

600 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

605 
	$exe˛p
 (c⁄° *
__fûe
, c⁄° *
__¨g
, ...)

606 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

608 #ifde‡
__USE_GNU


611 
	$execv≥
 (c⁄° *
__fûe
, *c⁄° 
__¨gv
[],

612 *c⁄° 
__ívp
[])

613 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

617 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


619 
	$ni˚
 (
__öc
Ë
__THROW
 
__wur
;

624 
	$_exô
 (
__°©us
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

630 
	~<bôs/c⁄‚ame.h
>

633 
	$∑thc⁄f
 (c⁄° *
__∑th
, 
__«me
)

634 
__THROW
 
	`__n⁄nuŒ
 ((1));

637 
	$Â©hc⁄f
 (
__fd
, 
__«me
Ë
__THROW
;

640 
	$sysc⁄f
 (
__«me
Ë
__THROW
;

642 #ifdef 
__USE_POSIX2


644 
size_t
 
	$c⁄f°r
 (
__«me
, *
__buf
, 
size_t
 
__Àn
Ë
__THROW


645 
	`__f‹tifõd_©å_ac˚ss
 (
__wrôe_⁄ly__
, 2, 3);

650 
__pid_t
 
	$gëpid
 (Ë
__THROW
;

653 
__pid_t
 
	$gëµid
 (Ë
__THROW
;

656 
__pid_t
 
	$gëpgΩ
 (Ë
__THROW
;

659 
__pid_t
 
	$__gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

660 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


661 
__pid_t
 
	$gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

668 
	$£çgid
 (
__pid_t
 
__pid
, __pid_à
__pgid
Ë
__THROW
;

670 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


682 
	$£çgΩ
 (Ë
__THROW
;

689 
__pid_t
 
	$£tsid
 (Ë
__THROW
;

691 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


693 
__pid_t
 
	$gësid
 (
__pid_t
 
__pid
Ë
__THROW
;

697 
__uid_t
 
	$gëuid
 (Ë
__THROW
;

700 
__uid_t
 
	$gëeuid
 (Ë
__THROW
;

703 
__gid_t
 
	$gëgid
 (Ë
__THROW
;

706 
__gid_t
 
	$gëegid
 (Ë
__THROW
;

711 
	$gëgroups
 (
__size
, 
__gid_t
 
__li°
[]Ë
__THROW
 
__wur


712 
	`__f‹tifõd_©å_ac˚ss
 (
__wrôe_⁄ly__
, 2, 1);

713 #ifdef 
__USE_GNU


715 
	$group_membî
 (
__gid_t
 
__gid
Ë
__THROW
;

722 
	$£tuid
 (
__uid_t
 
__uid
Ë
__THROW
 
__wur
;

724 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


727 
	$£åeuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
Ë
__THROW
 
__wur
;

730 #ifde‡
__USE_XOPEN2K


732 
	$£ãuid
 (
__uid_t
 
__uid
Ë
__THROW
 
__wur
;

739 
	$£tgid
 (
__gid_t
 
__gid
Ë
__THROW
 
__wur
;

741 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


744 
	$£åegid
 (
__gid_t
 
__rgid
, __gid_à
__egid
Ë
__THROW
 
__wur
;

747 #ifde‡
__USE_XOPEN2K


749 
	$£ãgid
 (
__gid_t
 
__gid
Ë
__THROW
 
__wur
;

752 #ifde‡
__USE_GNU


755 
	$gëªsuid
 (
__uid_t
 *
__ruid
, __uid_à*
__euid
, __uid_à*
__suid
)

756 
__THROW
;

760 
	$gëªsgid
 (
__gid_t
 *
__rgid
, __gid_à*
__egid
, __gid_à*
__sgid
)

761 
__THROW
;

765 
	$£åesuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
, __uid_à
__suid
)

766 
__THROW
 
__wur
;

770 
	$£åesgid
 (
__gid_t
 
__rgid
, __gid_à
__egid
, __gid_à
__sgid
)

771 
__THROW
 
__wur
;

778 
__pid_t
 
	$f‹k
 (Ë
__THROWNL
;

780 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

781 || 
deföed
 
__USE_MISC


786 
__pid_t
 
	$vf‹k
 (Ë
__THROW
;

789 #ifde‡
__USE_GNU


793 
__pid_t
 
	$_F‹k
 (Ë
__THROW
;

799 *
	$ây«me
 (
__fd
Ë
__THROW
;

803 
	$ây«me_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

804 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur


805 
	`__f‹tifõd_©å_ac˚ss
 (
__wrôe_⁄ly__
, 2, 3);

809 
	$ißây
 (
__fd
Ë
__THROW
;

811 #ifde‡
__USE_MISC


814 
	$ây¶Ÿ
 (Ë
__THROW
;

819 
	$lök
 (c⁄° *
__‰om
, c⁄° *
__to
)

820 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

822 #ifde‡
__USE_ATFILE


825 
	$lök©
 (
__‰omfd
, c⁄° *
__‰om
, 
__tofd
,

826 c⁄° *
__to
, 
__Êags
)

827 
__THROW
 
	`__n⁄nuŒ
 ((2, 4)Ë
__wur
;

830 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


832 
	$symlök
 (c⁄° *
__‰om
, c⁄° *
__to
)

833 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

838 
ssize_t
 
	$ªadlök
 (c⁄° *
__ª°ri˘
 
__∑th
,

839 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

840 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur


841 
	`__f‹tifõd_©å_ac˚ss
 (
__wrôe_⁄ly__
, 2, 3);

845 #ifde‡
__USE_ATFILE


847 
	$symlök©
 (c⁄° *
__‰om
, 
__tofd
,

848 c⁄° *
__to
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

851 
ssize_t
 
	$ªadlök©
 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

852 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

853 
__THROW
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur


854 
	`__f‹tifõd_©å_ac˚ss
 (
__wrôe_⁄ly__
, 3, 4);

858 
	$u∆ök
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

860 #ifde‡
__USE_ATFILE


862 
	$u∆ök©
 (
__fd
, c⁄° *
__«me
, 
__Êag
)

863 
__THROW
 
	`__n⁄nuŒ
 ((2));

867 
	$rmdú
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

871 
__pid_t
 
	$tcgëpgΩ
 (
__fd
Ë
__THROW
;

874 
	$tc£çgΩ
 (
__fd
, 
__pid_t
 
__pgΩ_id
Ë
__THROW
;

881 *
	`gëlogö
 ();

882 #ifde‡
__USE_POSIX199506


889 
	$gëlogö_r
 (*
__«me
, 
size_t
 
__«me_Àn
Ë
	`__n⁄nuŒ
 ((1))

890 
	`__f‹tifõd_©å_ac˚ss
 (
__wrôe_⁄ly__
, 1, 2);

893 #ifdef 
__USE_MISC


895 
	$£éogö
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

899 #ifdef 
__USE_POSIX2


903 
	~<bôs/gë›t_posix.h
>

907 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


911 
	$gëho°«me
 (*
__«me
, 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((1))

912 
	`__f‹tifõd_©å_ac˚ss
 (
__wrôe_⁄ly__
, 1, 2);

916 #i‡
deföed
 
__USE_MISC


919 
	$£tho°«me
 (c⁄° *
__«me
, 
size_t
 
__Àn
)

920 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
 
	`__©å_ac˚ss
 ((
__ªad_⁄ly__
, 1, 2));

924 
	$£tho°id
 (
__id
Ë
__THROW
 
__wur
;

930 
	$gëdomaö«me
 (*
__«me
, 
size_t
 
__Àn
)

931 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur


932 
	`__f‹tifõd_©å_ac˚ss
 (
__wrôe_⁄ly__
, 1, 2);

933 
	$£tdomaö«me
 (c⁄° *
__«me
, 
size_t
 
__Àn
)

934 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
 
	`__©å_ac˚ss
 ((
__ªad_⁄ly__
, 1, 2));

939 
	$vh™gup
 (Ë
__THROW
;

942 
	$ªvoke
 (c⁄° *
__fûe
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

950 
	$¥ofû
 (*
__ßm∂e_buf„r
, 
size_t
 
__size
,

951 
size_t
 
__off£t
, 
__sˇÀ
)

952 
__THROW
 
	`__n⁄nuŒ
 ((1));

958 
	$ac˘
 (c⁄° *
__«me
Ë
__THROW
;

962 *
	$gëu£rshñl
 (Ë
__THROW
;

963 
	$ídu£rshñl
 (Ë
__THROW
;

964 
	$£tu£rshñl
 (Ë
__THROW
;

970 
	$d´m⁄
 (
__nochdú
, 
__no˛o£
Ë
__THROW
 
__wur
;

974 #i‡
deföed
 
__USE_MISC
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

977 
	$chroŸ
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

981 *
	$gë∑ss
 (c⁄° *
__¥om±
Ë
	`__n⁄nuŒ
 ((1));

989 
	`fsync
 (
__fd
);

992 #ifde‡
__USE_GNU


995 
	$syncfs
 (
__fd
Ë
__THROW
;

999 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


1002 
	`gëho°id
 ();

1005 
	$sync
 (Ë
__THROW
;

1008 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K


1011 
	$gë∑gesize
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

1016 
	$gëdèbÀsize
 (Ë
__THROW
;

1022 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


1025 #i‚de‡
__USE_FILE_OFFSET64


1026 
	$åunˇã
 (c⁄° *
__fûe
, 
__off_t
 
__Àngth
)

1027 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1029 #ifde‡
__REDIRECT_NTH


1030 
	`__REDIRECT_NTH
 (
åunˇã
,

1031 (c⁄° *
__fûe
, 
__off64_t
 
__Àngth
),

1032 
åunˇã64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1034 
	#åunˇã
 
åunˇã64


	)

1037 #ifde‡
__USE_LARGEFILE64


1038 
	$åunˇã64
 (c⁄° *
__fûe
, 
__off64_t
 
__Àngth
)

1039 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1044 #i‡
deföed
 
__USE_POSIX199309
 \

1045 || 
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


1048 #i‚de‡
__USE_FILE_OFFSET64


1049 
	$·runˇã
 (
__fd
, 
__off_t
 
__Àngth
Ë
__THROW
 
__wur
;

1051 #ifde‡
__REDIRECT_NTH


1052 
	`__REDIRECT_NTH
 (
·runˇã
, (
__fd
, 
__off64_t
 
__Àngth
),

1053 
·runˇã64
Ë
__wur
;

1055 
	#·runˇã
 
·runˇã64


	)

1058 #ifde‡
__USE_LARGEFILE64


1059 
	$·runˇã64
 (
__fd
, 
__off64_t
 
__Àngth
Ë
__THROW
 
__wur
;

1065 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

1066 || 
deföed
 
__USE_MISC


1070 
	$brk
 (*
__addr
Ë
__THROW
 
__wur
;

1076 *
	$sbrk
 (
öçå_t
 
__dñè
Ë
__THROW
;

1080 #ifde‡
__USE_MISC


1091 
	$sysˇŒ
 (
__sy¢o
, ...Ë
__THROW
;

1096 #i‡(
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
Ë&& !deföed 
F_LOCK


1108 
	#F_ULOCK
 0

	)

1109 
	#F_LOCK
 1

	)

1110 
	#F_TLOCK
 2

	)

1111 
	#F_TEST
 3

	)

1113 #i‚de‡
__USE_FILE_OFFSET64


1114 
	$lockf
 (
__fd
, 
__cmd
, 
__off_t
 
__Àn
Ë
__wur
;

1116 #ifde‡
__REDIRECT


1117 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
),

1118 
lockf64
Ë
__wur
;

1120 
	#lockf
 
lockf64


	)

1123 #ifde‡
__USE_LARGEFILE64


1124 
	$lockf64
 (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
Ë
__wur
;

1129 #ifde‡
__USE_GNU


1134 
	#TEMP_FAILURE_RETRY
(
ex¥essi⁄
) \

1135 (
__exãnsi⁄__
 \

1136 ({ 
__ªsu…
; \

1137 dÿ
__ªsu…
 = (Ë(
ex¥essi⁄
); \

1138 
__ªsu…
 =-1L && 
î∫o
 =
EINTR
); \

1139 
__ªsu…
; 
	}
}))

	)

1142 
ssize_t
 
c›y_fûe_ønge
 (
__öfd
, 
__off64_t
 *
__pöoff
,

1143 
__outfd
, 
__off64_t
 *
__poutoff
,

1144 
size_t
 
__Àngth
, 
__Êags
);

1147 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_UNIX98


1150 
fd©async
 (
__fûdes
);

1153 #ifde‡
__USE_MISC


1159 *
	$¸y±
 (c⁄° *
__key
, c⁄° *
__ß…
)

1160 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1163 #ifdef 
__USE_XOPEN


1168 
	$swab
 (c⁄° *
__ª°ri˘
 
__‰om
, *__ª°ri˘ 
__to
,

1169 
ssize_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2))

1170 
	`__©å_ac˚ss
 ((
__ªad_⁄ly__
, 1, 3))

1171 
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 2, 3));

1178 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K


1180 *
	$˘îmid
 (*
__s
Ë
__THROW
;

1183 *
	`cu£rid
 (*
__s
);

1189 #i‡
deföed
 
__USE_UNIX98
 && !deföed 
__USE_XOPEN2K


1190 
	$±hªad_©f‹k
 ((*
__¥ï¨e
) (),

1191 (*
__∑ª¡
) (),

1192 (*
__chûd
Ë()Ë
__THROW
;

1195 #ifde‡
__USE_MISC


1198 
	$gëíå›y
 (*
__buf„r
, 
size_t
 
__Àngth
Ë
__wur


1199 
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 1, 2));

1202 #ifde‡
__USE_GNU


1208 
	$˛o£_ønge
 (
__fd
, 
__max_fd
,

1209 
__Êags
Ë
__THROW
;

1213 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


1214 
	~<bôs/uni°d.h
>

1218 
	~<bôs/uni°d_ext.h
>

1220 
__END_DECLS


	@/usr/include/alloca.h

18 #i‚def 
_ALLOCA_H


19 
	#_ALLOCA_H
 1

	)

21 
	~<„©uªs.h
>

23 
	#__√ed_size_t


	)

24 
	~<°ddef.h
>

26 
	g__BEGIN_DECLS


29 #unde‡
Æloˇ


32 *
	$Æloˇ
 (
size_t
 
__size
Ë
__THROW
;

34 #ifdef 
__GNUC__


35 
	#Æloˇ
(
size
Ë
	`__buûtö_Æloˇ
 (size)

	)

38 
__END_DECLS


	@/usr/include/features.h

18 #i‚def 
_FEATURES_H


19 
	#_FEATURES_H
 1

	)

126 #unde‡
__USE_ISOC11


127 #unde‡
__USE_ISOC99


128 #unde‡
__USE_ISOC95


129 #unde‡
__USE_ISOCXX11


130 #unde‡
__USE_POSIX


131 #unde‡
__USE_POSIX2


132 #unde‡
__USE_POSIX199309


133 #unde‡
__USE_POSIX199506


134 #unde‡
__USE_XOPEN


135 #unde‡
__USE_XOPEN_EXTENDED


136 #unde‡
__USE_UNIX98


137 #unde‡
__USE_XOPEN2K


138 #unde‡
__USE_XOPEN2KXSI


139 #unde‡
__USE_XOPEN2K8


140 #unde‡
__USE_XOPEN2K8XSI


141 #unde‡
__USE_LARGEFILE


142 #unde‡
__USE_LARGEFILE64


143 #unde‡
__USE_FILE_OFFSET64


144 #unde‡
__USE_MISC


145 #unde‡
__USE_ATFILE


146 #unde‡
__USE_DYNAMIC_STACK_SIZE


147 #unde‡
__USE_GNU


148 #unde‡
__USE_FORTIFY_LEVEL


149 #unde‡
__KERNEL_STRICT_NAMES


150 #unde‡
__GLIBC_USE_ISOC2X


151 #unde‡
__GLIBC_USE_DEPRECATED_GETS


152 #unde‡
__GLIBC_USE_DEPRECATED_SCANF


156 #i‚de‡
_LOOSE_KERNEL_NAMES


157 
	#__KERNEL_STRICT_NAMES


	)

167 #i‡
deföed
 
__GNUC__
 && deföed 
__GNUC_MINOR__


168 
	#__GNUC_PREREQ
(
maj
, 
mö
) \

169 ((
__GNUC__
 << 16Ë+ 
__GNUC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

171 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë0

	)

178 #i‡
deföed
 
__˛™g_maj‹__
 && deföed 
__˛™g_mö‹__


179 
	#__glibc_˛™g_¥îeq
(
maj
, 
mö
) \

180 ((
__˛™g_maj‹__
 << 16Ë+ 
__˛™g_mö‹__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

182 
	#__glibc_˛™g_¥îeq
(
maj
, 
mö
Ë0

	)

186 
	#__GLIBC_USE
(
F
Ë
__GLIBC_USE_
 ## 
	)
F

192 #i‡(
deföed
 
_BSD_SOURCE
 || deföed 
_SVID_SOURCE
) \

193 && !
deföed
 
	g_DEFAULT_SOURCE


195 #unde‡
_DEFAULT_SOURCE


196 
	#_DEFAULT_SOURCE
 1

	)

200 #ifde‡
_GNU_SOURCE


201 #unde‡
_ISOC95_SOURCE


202 
	#_ISOC95_SOURCE
 1

	)

203 #unde‡
_ISOC99_SOURCE


204 
	#_ISOC99_SOURCE
 1

	)

205 #unde‡
_ISOC11_SOURCE


206 
	#_ISOC11_SOURCE
 1

	)

207 #unde‡
_ISOC2X_SOURCE


208 
	#_ISOC2X_SOURCE
 1

	)

209 #unde‡
_POSIX_SOURCE


210 
	#_POSIX_SOURCE
 1

	)

211 #unde‡
_POSIX_C_SOURCE


212 
	#_POSIX_C_SOURCE
 200809L

	)

213 #unde‡
_XOPEN_SOURCE


214 
	#_XOPEN_SOURCE
 700

	)

215 #unde‡
_XOPEN_SOURCE_EXTENDED


216 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

217 #unde‡
_LARGEFILE64_SOURCE


218 
	#_LARGEFILE64_SOURCE
 1

	)

219 #unde‡
_DEFAULT_SOURCE


220 
	#_DEFAULT_SOURCE
 1

	)

221 #unde‡
_ATFILE_SOURCE


222 
	#_ATFILE_SOURCE
 1

	)

223 #unde‡
_DYNAMIC_STACK_SIZE_SOURCE


224 
	#_DYNAMIC_STACK_SIZE_SOURCE
 1

	)

229 #i‡(
deföed
 
_DEFAULT_SOURCE
 \

230 || (!
deföed
 
	g__STRICT_ANSI__
 \

231 && !
deföed
 
	g_ISOC99_SOURCE
 && !deföed 
	g_ISOC11_SOURCE
 \

232 && !
deföed
 
	g_ISOC2X_SOURCE
 \

233 && !
deföed
 
	g_POSIX_SOURCE
 && !deföed 
	g_POSIX_C_SOURCE
 \

234 && !
deföed
 
	g_XOPEN_SOURCE
))

235 #unde‡
_DEFAULT_SOURCE


236 
	#_DEFAULT_SOURCE
 1

	)

240 #i‡(
deföed
 
_ISOC2X_SOURCE
 \

241 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ > 201710L))

242 
	#__GLIBC_USE_ISOC2X
 1

	)

244 
	#__GLIBC_USE_ISOC2X
 0

	)

248 #i‡(
deföed
 
_ISOC11_SOURCE
 || deföed 
_ISOC2X_SOURCE
 \

249 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 201112L))

250 
	#__USE_ISOC11
 1

	)

254 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

255 || 
deföed
 
_ISOC2X_SOURCE
 \

256 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

257 
	#__USE_ISOC99
 1

	)

261 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

262 || 
deföed
 
_ISOC2X_SOURCE
 \

263 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199409L))

264 
	#__USE_ISOC95
 1

	)

267 #ifde‡
__˝lu•lus


269 #i‡
__˝lu•lus
 >= 201703L

270 
	#__USE_ISOC11
 1

	)

274 #i‡
__˝lu•lus
 >201103L || 
deföed
 
__GXX_EXPERIMENTAL_CXX0X__


275 
	#__USE_ISOCXX11
 1

	)

276 
	#__USE_ISOC99
 1

	)

283 #ifde‡
_DEFAULT_SOURCE


284 #i‡!
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE


285 
	#__USE_POSIX_IMPLICITLY
 1

	)

287 #unde‡
_POSIX_SOURCE


288 
	#_POSIX_SOURCE
 1

	)

289 #unde‡
_POSIX_C_SOURCE


290 
	#_POSIX_C_SOURCE
 200809L

	)

293 #i‡((!
deföed
 
__STRICT_ANSI__
 \

294 || (
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) >= 500)) \

295 && !
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE
)

296 
	#_POSIX_SOURCE
 1

	)

297 #i‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 500

298 
	#_POSIX_C_SOURCE
 2

	)

299 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 600

300 
	#_POSIX_C_SOURCE
 199506L

	)

301 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 700

302 
	#_POSIX_C_SOURCE
 200112L

	)

304 
	#_POSIX_C_SOURCE
 200809L

	)

306 
	#__USE_POSIX_IMPLICITLY
 1

	)

315 #i‡((!
deföed
 
_POSIX_C_SOURCE
 || (_POSIX_C_SOURCE - 0) < 199506L) \

316 && (
deföed
 
_REENTRANT
 || deföed 
_THREAD_SAFE
))

317 
	#_POSIX_SOURCE
 1

	)

318 #unde‡
_POSIX_C_SOURCE


319 
	#_POSIX_C_SOURCE
 199506L

	)

322 #i‡(
deföed
 
_POSIX_SOURCE
 \

323 || (
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >= 1) \

324 || 
deföed
 
_XOPEN_SOURCE
)

325 
	#__USE_POSIX
 1

	)

328 #i‡
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >2 || deföed 
_XOPEN_SOURCE


329 
	#__USE_POSIX2
 1

	)

332 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 199309L

333 
	#__USE_POSIX199309
 1

	)

336 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 199506L

337 
	#__USE_POSIX199506
 1

	)

340 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 200112L

341 
	#__USE_XOPEN2K
 1

	)

342 #unde‡
__USE_ISOC95


343 
	#__USE_ISOC95
 1

	)

344 #unde‡
__USE_ISOC99


345 
	#__USE_ISOC99
 1

	)

348 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 200809L

349 
	#__USE_XOPEN2K8
 1

	)

350 #unde‡
_ATFILE_SOURCE


351 
	#_ATFILE_SOURCE
 1

	)

354 #ifdef 
_XOPEN_SOURCE


355 
	#__USE_XOPEN
 1

	)

356 #i‡(
_XOPEN_SOURCE
 - 0) >= 500

357 
	#__USE_XOPEN_EXTENDED
 1

	)

358 
	#__USE_UNIX98
 1

	)

359 #unde‡
_LARGEFILE_SOURCE


360 
	#_LARGEFILE_SOURCE
 1

	)

361 #i‡(
_XOPEN_SOURCE
 - 0) >= 600

362 #i‡(
_XOPEN_SOURCE
 - 0) >= 700

363 
	#__USE_XOPEN2K8
 1

	)

364 
	#__USE_XOPEN2K8XSI
 1

	)

366 
	#__USE_XOPEN2K
 1

	)

367 
	#__USE_XOPEN2KXSI
 1

	)

368 #unde‡
__USE_ISOC95


369 
	#__USE_ISOC95
 1

	)

370 #unde‡
__USE_ISOC99


371 
	#__USE_ISOC99
 1

	)

374 #ifde‡
_XOPEN_SOURCE_EXTENDED


375 
	#__USE_XOPEN_EXTENDED
 1

	)

380 #ifde‡
_LARGEFILE_SOURCE


381 
	#__USE_LARGEFILE
 1

	)

384 #ifde‡
_LARGEFILE64_SOURCE


385 
	#__USE_LARGEFILE64
 1

	)

388 #i‡
deföed
 
_FILE_OFFSET_BITS
 && _FILE_OFFSET_BITS == 64

389 
	#__USE_FILE_OFFSET64
 1

	)

392 
	~<„©uªs-time64.h
>

394 #i‡
deföed
 
_DEFAULT_SOURCE


395 
	#__USE_MISC
 1

	)

398 #ifdef 
_ATFILE_SOURCE


399 
	#__USE_ATFILE
 1

	)

402 #ifdef 
_DYNAMIC_STACK_SIZE_SOURCE


403 
	#__USE_DYNAMIC_STACK_SIZE
 1

	)

406 #ifdef 
_GNU_SOURCE


407 
	#__USE_GNU
 1

	)

410 #i‡
deföed
 
_FORTIFY_SOURCE
 && _FORTIFY_SOURCE > 0

411 #i‡!
deföed
 
__OPTIMIZE__
 || __OPTIMIZE__ <= 0

412 #ñi‡!
__GNUC_PREREQ
 (4, 1)

413 #ñi‡
_FORTIFY_SOURCE
 > 2 && (
__glibc_˛™g_¥îeq
 (9, 0) \

414 || 
	$__GNUC_PREREQ
 (12, 0))

416 #i‡
_FORTIFY_SOURCE
 > 3

418 
	#__USE_FORTIFY_LEVEL
 3

	)

419 #ñi‡
_FORTIFY_SOURCE
 > 1

420 #i‡
_FORTIFY_SOURCE
 > 2

422 
	#__USE_FORTIFY_LEVEL
 2

	)

424 
	#__USE_FORTIFY_LEVEL
 1

	)

427 #i‚de‡
__USE_FORTIFY_LEVEL


428 
	#__USE_FORTIFY_LEVEL
 0

	)

435 #i‡
deföed
 
__˝lu•lus
 ? __˝lu•lu†>201402L : deföed 
__USE_ISOC11


436 
	#__GLIBC_USE_DEPRECATED_GETS
 0

	)

438 
	#__GLIBC_USE_DEPRECATED_GETS
 1

	)

453 #i‡(
deföed
 
__USE_GNU
 \

454 && (
deföed
 
__˝lu•lus
 \

455 ? (
__˝lu•lus
 < 201103L && !
deföed
 
__GXX_EXPERIMENTAL_CXX0X__
) \

456 : (!
deföed
 
__STDC_VERSION__
 || __STDC_VERSION__ < 199901L)))

457 
	#__GLIBC_USE_DEPRECATED_SCANF
 1

	)

459 
	#__GLIBC_USE_DEPRECATED_SCANF
 0

	)

464 
	~<°dc-¥edef.h
>

472 #unde‡
__GNU_LIBRARY__


473 
	#__GNU_LIBRARY__
 6

	)

477 
	#__GLIBC__
 2

	)

478 
	#__GLIBC_MINOR__
 35

	)

480 
	#__GLIBC_PREREQ
(
maj
, 
mö
) \

481 ((
__GLIBC__
 << 16Ë+ 
__GLIBC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

484 #i‚de‡
__ASSEMBLER__


485 #i‚de‡
_SYS_CDEFS_H


486 
	~<sys/cdefs.h
>

491 #i‡
deföed
 
__USE_FILE_OFFSET64
 && !deföed 
__REDIRECT


492 
	#__USE_LARGEFILE
 1

	)

493 
	#__USE_LARGEFILE64
 1

	)

499 #i‡
	`__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

500 && !
deföed
 
__OPTIMIZE_SIZE__
 && !deföed 
__NO_INLINE__
 \

501 && 
deföed
 
__exã∫_ölöe


502 
	#__USE_EXTERN_INLINES
 1

	)

510 
	~<gnu/°ubs.h
>

	@/usr/include/sched.h

19 #i‚def 
_SCHED_H


20 
	#_SCHED_H
 1

	)

22 
	~<„©uªs.h
>

25 
	~<bôs/ty≥s.h
>

27 
	#__√ed_size_t


	)

28 
	#__√ed_NULL


	)

29 
	~<°ddef.h
>

31 
	~<bôs/ty≥s/time_t.h
>

32 
	~<bôs/ty≥s/°ru˘_time•ec.h
>

33 #i‚de‡
__USE_XOPEN2K


34 
	~<time.h
>

37 #i‚de‡
__pid_t_deföed


38 
__pid_t
 
	tpid_t
;

39 
	#__pid_t_deföed


	)

43 
	~<bôs/sched.h
>

44 
	~<bôs/˝u-£t.h
>

47 
	#sched_¥i‹ôy
 
sched_¥i‹ôy


	)

48 
	#__sched_¥i‹ôy
 
sched_¥i‹ôy


	)

51 
__BEGIN_DECLS


54 
	$sched_£ç¨am
 (
__pid_t
 
__pid
, c⁄° 
sched_∑øm
 *
__∑øm
)

55 
__THROW
;

58 
	$sched_gë∑øm
 (
__pid_t
 
__pid
, 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

61 
	$sched_£tscheduÀr
 (
__pid_t
 
__pid
, 
__pﬁicy
,

62 c⁄° 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

65 
	$sched_gëscheduÀr
 (
__pid_t
 
__pid
Ë
__THROW
;

68 
	$sched_yõld
 (Ë
__THROW
;

71 
	$sched_gë_¥i‹ôy_max
 (
__Æg‹ôhm
Ë
__THROW
;

74 
	$sched_gë_¥i‹ôy_mö
 (
__Æg‹ôhm
Ë
__THROW
;

77 #i‚de‡
__USE_TIME_BITS64


78 
	$sched_º_gë_öãrvÆ
 (
__pid_t
 
__pid
, 
time•ec
 *
__t
Ë
__THROW
;

80 #ifde‡
__REDIRECT_NTH


81 
	`__REDIRECT_NTH
 (
sched_º_gë_öãrvÆ
,

82 (
__pid_t
 
__pid
, 
time•ec
 *
__t
),

83 
__sched_º_gë_öãrvÆ64
);

85 
	#sched_º_gë_öãrvÆ
 
__sched_º_gë_öãrvÆ64


	)

89 #ifde‡
__USE_GNU


91 
	#CPU_SETSIZE
 
__CPU_SETSIZE


	)

92 
	#CPU_SET
(
˝u
, 
˝u£ç
Ë
	`__CPU_SET_S
 (˝u,  (
˝u_£t_t
), cpu£ç)

	)

93 
	#CPU_CLR
(
˝u
, 
˝u£ç
Ë
	`__CPU_CLR_S
 (˝u,  (
˝u_£t_t
), cpu£ç)

	)

94 
	#CPU_ISSET
(
˝u
, 
˝u£ç
Ë
	`__CPU_ISSET_S
 (˝u,  (
˝u_£t_t
), \

95 
˝u£ç
)

	)

96 
	#CPU_ZERO
(
˝u£ç
Ë
	`__CPU_ZERO_S
 ( (
˝u_£t_t
), cpu£ç)

	)

97 
	#CPU_COUNT
(
˝u£ç
Ë
	`__CPU_COUNT_S
 ( (
˝u_£t_t
), cpu£ç)

	)

99 
	#CPU_SET_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_SET_S
 (˝u, sësize, cpu£ç)

	)

100 
	#CPU_CLR_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_CLR_S
 (˝u, sësize, cpu£ç)

	)

101 
	#CPU_ISSET_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_ISSET_S
 (cpu, setsize, \

102 
˝u£ç
)

	)

103 
	#CPU_ZERO_S
(
£tsize
, 
˝u£ç
Ë
	`__CPU_ZERO_S
 (£tsize, cpu£ç)

	)

104 
	#CPU_COUNT_S
(
£tsize
, 
˝u£ç
Ë
	`__CPU_COUNT_S
 (£tsize, cpu£ç)

	)

106 
	#CPU_EQUAL
(
˝u£ç1
, 
˝u£ç2
) \

107 
	`__CPU_EQUAL_S
 ( (
˝u_£t_t
), 
˝u£ç1
, 
˝u£ç2
)

	)

108 
	#CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

109 
	`__CPU_EQUAL_S
 (
£tsize
, 
˝u£ç1
, 
˝u£ç2
)

	)

111 
	#CPU_AND
(
de°£t
, 
§c£t1
, 
§c£t2
) \

112 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, &)

	)

113 
	#CPU_OR
(
de°£t
, 
§c£t1
, 
§c£t2
) \

114 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, |)

	)

115 
	#CPU_XOR
(
de°£t
, 
§c£t1
, 
§c£t2
) \

116 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, ^)

	)

117 
	#CPU_AND_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

118 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, &)

	)

119 
	#CPU_OR_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

120 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, |)

	)

121 
	#CPU_XOR_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

122 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, ^)

	)

124 
	#CPU_ALLOC_SIZE
(
cou¡
Ë
	`__CPU_ALLOC_SIZE
 (cou¡)

	)

125 
	#CPU_ALLOC
(
cou¡
Ë
	`__CPU_ALLOC
 (cou¡)

	)

126 
	#CPU_FREE
(
˝u£t
Ë
	`__CPU_FREE
 (˝u£t)

	)

130 
	$sched_£èfföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

131 c⁄° 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

134 
	$sched_gëafföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

135 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

138 
__END_DECLS


	@/usr/include/strings.h

18 #i‚def 
_STRINGS_H


19 
	#_STRINGS_H
 1

	)

21 
	~<„©uªs.h
>

22 
	#__√ed_size_t


	)

23 
	~<°ddef.h
>

26 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

27 
	#__CORRECT_ISO_CPP_STRINGS_H_PROTO


	)

30 
	g__BEGIN_DECLS


32 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K8


34 
	$bcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

35 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

38 
	$bc›y
 (c⁄° *
__§c
, *
__de°
, 
size_t
 
__n
)

39 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

42 
	$bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

45 #ifde‡
__CORRECT_ISO_CPP_STRINGS_H_PROTO


48 *
	`ödex
 (*
__s
, 
__c
)

49 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

50 c⁄° *
	`ödex
 (c⁄° *
__s
, 
__c
)

51 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

53 #i‡
deföed
 
__OPTIMIZE__


54 
__exã∫_Æways_ölöe
 *

55 
	`ödex
 (*
__s
, 
__c
Ë
__THROW


57  
	`__buûtö_ödex
 (
__s
, 
__c
);

60 
__exã∫_Æways_ölöe
 const *

61 
	`ödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


63  
	`__buûtö_ödex
 (
__s
, 
__c
);

66 
	}
}

68 *
	$ödex
 (c⁄° *
__s
, 
__c
)

69 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

73 #ifde‡
__CORRECT_ISO_CPP_STRINGS_H_PROTO


76 *
	`rödex
 (*
__s
, 
__c
)

77 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

78 c⁄° *
	`rödex
 (c⁄° *
__s
, 
__c
)

79 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

81 #i‡
deföed
 
__OPTIMIZE__


82 
__exã∫_Æways_ölöe
 *

83 
	`rödex
 (*
__s
, 
__c
Ë
__THROW


85  
	`__buûtö_rödex
 (
__s
, 
__c
);

88 
__exã∫_Æways_ölöe
 const *

89 
	`rödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


91  
	`__buûtö_rödex
 (
__s
, 
__c
);

94 
	}
}

96 *
	$rödex
 (c⁄° *
__s
, 
__c
)

97 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

101 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K8
 || deföed 
__USE_XOPEN2K8XSI


104 
	$ffs
 (
__i
Ë
__THROW
 
__©åibuã_c⁄°__
;

109 #ifdef 
__USE_MISC


110 
	$ff¶
 (
__l
Ë
__THROW
 
__©åibuã_c⁄°__
;

111 
__exãnsi⁄__
 
	$ff¶l
 (
__Œ
)

112 
__THROW
 
__©åibuã_c⁄°__
;

116 
	$°rˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

117 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

120 
	$°∫ˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

121 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

123 #ifdef 
__USE_XOPEN2K8


125 
	~<bôs/ty≥s/loˇÀ_t.h
>

128 
	$°rˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
, 
loˇÀ_t
 
__loc
)

129 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

133 
	$°∫ˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
,

134 
size_t
 
__n
, 
loˇÀ_t
 
__loc
)

135 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 4));

138 
__END_DECLS


140 #i‡
	`__GNUC_PREREQ
 (3,4Ë&& 
__USE_FORTIFY_LEVEL
 > 0 \

141 && 
deföed
 
__f‹tify_fun˘i⁄


143 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K8


144 
	~<bôs/°rögs_f‹tifõd.h
>

	@/usr/include/features-time64.h

20 
	~<bôs/w‹dsize.h
>

21 
	~<bôs/timesize.h
>

23 #i‡
deföed
 
_TIME_BITS


24 #i‡
_TIME_BITS
 == 64

25 #i‡! 
deföed
 (
_FILE_OFFSET_BITS
) || _FILE_OFFSET_BITS != 64

27 #ñi‡
__TIMESIZE
 == 32

28 
	#__USE_TIME_BITS64
 1

	)

30 #ñi‡
_TIME_BITS
 == 32

31 #i‡
__TIMESIZE
 > 32

35 #îr‹ 
InvÆid
 
_TIME_BITS
 
vÆue
 (
ˇn
 
⁄ly
 
be
 32 
‹
 64-
bô
)

	@/usr/include/stdc-predef.h

18 #i‚def 
_STDC_PREDEF_H


19 
	#_STDC_PREDEF_H
 1

	)

36 #ifde‡
__GCC_IEC_559


37 #i‡
__GCC_IEC_559
 > 0

38 
	#__STDC_IEC_559__
 1

	)

39 
	#__STDC_IEC_60559_BFP__
 201404L

	)

42 
	#__STDC_IEC_559__
 1

	)

43 
	#__STDC_IEC_60559_BFP__
 201404L

	)

46 #ifde‡
__GCC_IEC_559_COMPLEX


47 #i‡
__GCC_IEC_559_COMPLEX
 > 0

48 
	#__STDC_IEC_559_COMPLEX__
 1

	)

49 
	#__STDC_IEC_60559_COMPLEX__
 201404L

	)

52 
	#__STDC_IEC_559_COMPLEX__
 1

	)

53 
	#__STDC_IEC_60559_COMPLEX__
 201404L

	)

62 
	#__STDC_ISO_10646__
 201706L

	)

	@
1
.
1
/usr/include
76
1594
/home/cgmin/pmem/ph/ph/cceh.cpp
/home/cgmin/pmem/ph/ph/cceh.h
/home/cgmin/pmem/ph/ph/copy.h
/home/cgmin/pmem/ph/ph/data.cpp
/home/cgmin/pmem/ph/ph/data.h
/home/cgmin/pmem/ph/ph/data2.cpp
/home/cgmin/pmem/ph/ph/data2.h
/home/cgmin/pmem/ph/ph/global.cpp
/home/cgmin/pmem/ph/ph/global.h
/home/cgmin/pmem/ph/ph/global2.cpp
/home/cgmin/pmem/ph/ph/global2.h
/home/cgmin/pmem/ph/ph/hash.cpp
/home/cgmin/pmem/ph/ph/hash.h
/home/cgmin/pmem/ph/ph/kvs.h
/home/cgmin/pmem/ph/ph/kvs2.h
/home/cgmin/pmem/ph/ph/lock.cpp
/home/cgmin/pmem/ph/ph/lock.h
/home/cgmin/pmem/ph/ph/log.cpp
/home/cgmin/pmem/ph/ph/log.h
/home/cgmin/pmem/ph/ph/ph_test.cpp
/home/cgmin/pmem/ph/ph/query.cpp
/home/cgmin/pmem/ph/ph/query.h
/home/cgmin/pmem/ph/ph/shared.h
/home/cgmin/pmem/ph/ph/skiplist.cpp
/home/cgmin/pmem/ph/ph/skiplist.h
/home/cgmin/pmem/ph/ph/thread.cpp
/home/cgmin/pmem/ph/ph/thread.h
/home/cgmin/pmem/ph/ph/thread2.cpp
/home/cgmin/pmem/ph/ph/thread2.h
/home/cgmin/pmem/ph/ph/tree.cpp
/home/cgmin/pmem/ph/ph/tree.h
cceh.cpp
cceh.h
copy.h
data.cpp
data.h
data2.cpp
data2.h
global.cpp
global.h
global2.cpp
global2.h
hash.cpp
hash.h
kvs.h
kvs2.h
lock.cpp
lock.h
log.cpp
log.h
ph_test.cpp
query.cpp
query.h
shared.h
skiplist.cpp
skiplist.h
thread.cpp
thread.h
thread2.cpp
thread2.h
tree.cpp
tree.h
/usr/include/libpmem.h
/usr/include/pthread.h
/usr/include/stdint.h
/usr/include/stdio.h
/usr/include/stdlib.h
/usr/include/string.h
/usr/include/time.h
/usr/include/unistd.h
/usr/include/alloca.h
/usr/include/features.h
/usr/include/sched.h
/usr/include/strings.h
/usr/include/features-time64.h
/usr/include/stdc-predef.h
