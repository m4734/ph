cscope 15 $HOME/20220321/pacman/benchmarks/other/ph               0000269194
	@cceh.cpp

1 
	~"c˚h.h
"

2 
	~"thªad.h
"

4 
	~<queue
>

5 
	~<°rög.h
>

6 
	~<°dio.h
>

7 
	~<°dlib.h
>

8 
	~<x86öåö.h
>

11 
	~<time.h
>

13 
«me•a˚
 
	gPH


16 vﬁ©ûê
	g£g_‰ì_˙t
;

17 vﬁ©ûê
	g£g_‰ì_mö
;

18 vﬁ©ûê
	g£g_‰ì_ödex
;

21 
SEG
* 
	g‰ì_£g_queue
[
FREE_SEG_LEN
];

23 
	g°d
::
©omic
<
uöt8_t
> 
‰ì_£g_lock
;

25 
uöt64_t
 
	gr_mask
[65];

27 ** 
	gkey_¨øy
 = 0;

28 * 
	gkey_˙t
 = 0;

29 
	g°d
::
©omic
<> 
key_¨øy_˙t
;

30 
thªad_loˇl
 
	gkey_¨øy_ödex
=0;

31 
	gmax_ödex
;

34 
uöt64_t
 
	gÆloc_£g_˙t
;

37 
©_lock2
(
°d
::
©omic
<
uöt8_t
> &
lock
)

39 
uöt8_t
 
z
;

40 
	gåue
)

42 
	gz
 = 0;

43 i‡(
	glock
.
com∑ª_exch™ge_°r⁄g
(
z
,1))

47 
©_u∆ock2
(
°d
::
©omic
<
uöt8_t
> &
lock
)

49 
lock
 = 0;

53 
åy_©_lock2
(
°d
::
©omic
<
uöt8_t
> &
lock
)

55 
uöt8_t
 
z
=0;

56  
	glock
.
com∑ª_exch™ge_°r⁄g
(
z
,1);

59 
uöt64_t
 
MurmurHash64A_L8
 ( c⁄° * 
key
 )

61 c⁄° 
	gÀn
 = 8;

62 c⁄° 
uöt64_t
 
	g£ed
 = 5516;

65 c⁄° 
uöt64_t
 
	gm
 = 0xc6a4a7935bd1e995;

67 c⁄° 
	gr
 = 47;

69 
uöt64_t
 
	gh
 = 
£ed
 ^ (
Àn
 * 
m
);

71 c⁄° 
uöt64_t
 * 
	gd©a
 = (c⁄° uöt64_à*)
key
;

72 c⁄° 
uöt64_t
 * 
	gíd
 = 
d©a
 + (
Àn
/8);

74 
	gd©a
 !
íd
)

76 
uöt64_t
 
k
 = *
d©a
++;

78 
	gk
 *
m
;

79 
	gk
 ^
k
 >> 
r
;

80 
	gk
 *
m
;

82 
	gh
 ^
k
;

83 
	gh
 *
m
;

86 c⁄° * 
	gd©a2
 = (c⁄° *)
d©a
;

88 
	gÀn
 & 7)

90 7: 
h
 ^((
uöt64_t
Ë
d©a2
[6]) << 48;

91 6: 
h
 ^((
uöt64_t
Ë
d©a2
[5]) << 40;

92 5: 
h
 ^((
uöt64_t
Ë
d©a2
[4]) << 32;

93 4: 
h
 ^((
uöt64_t
Ë
d©a2
[3]) << 24;

94 3: 
h
 ^((
uöt64_t
Ë
d©a2
[2]) << 16;

95 2: 
h
 ^((
uöt64_t
Ë
d©a2
[1]) << 8;

96 1: 
h
 ^((
uöt64_t
Ë
d©a2
[0]);

97 
	gh
 *
m
;

100 
	gh
 ^
h
 >> 
r
;

101 
	gh
 *
m
;

102 
	gh
 ^
h
 >> 
r
;

104  
	gh
;

107 
ölöe
 * 
	gCCEH
::
lﬂd_key
(c⁄° 
uöt64_t
 &
key
)

109  (*)&
key
;

112 
ölöe
 
boﬁ
 
	gCCEH
::
com∑ª_key
–c⁄° vﬁ©ûê
uöt64_t
 &
key1
,* c⁄° &
key2
,c⁄° 
uöt32_t
 &
hash
)

114  
	gkey1
 =(*(
uöt64_t
*)
key2
);

116 
ölöe
 
	gCCEH
::
ö£π_key
(vﬁ©ûê
uöt64_t
 &
key1
,* c⁄° &
key2
,c⁄° 
uöt32_t
 &
hash
)

118 
	gkey1
 = (*((
uöt64_t
*)
key2
));

121 
ölöe
 
uöt64_t
 
	gCCEH
::
hf
(* c⁄° &
key
)

134  
°d
::
_Hash_byãs
(
key
,8,5516);

138 
ölöe
 
boﬁ
 
	gCCEH
::
zîo_check
(* c⁄° &
key
)

140  *(
uöt64_t
*)
key
 =
INV0
;

143 
öv_£g
(
SEG
* 
£g
)

145 
	gi
;

148 
KVP
* 
	gkvp_p
;

150 
	gkvp_p
 = (
KVP
*)
£g
->
˛
;

162 
mem£t
(
£g
->
˛
,0xffffffff,
CL_PER_SEG
*
CL_SIZE
);

170 
SEG
* 
Æloc_£g
()

172 
SEG
* 
	g£g
;

174 
©_lock2
(
‰ì_£g_lock
);

175 i‡(
	g£g_‰ì_ödex
 =
£g_‰ì_mö
)

177 
ãmp
;

178 
	gãmp
 = 
PH
::
mö_£g_‰ì_˙t
();

179 i‡(
	gãmp
 > 
	g£g_‰ì_ödex
)

180 
	g£g_‰ì_mö
 = 
ãmp
;

182 i‡(
	g£g_‰ì_ödex
 < 
	g£g_‰ì_mö
)

184 
	g£g
 = 
‰ì_£g_queue
[
£g_‰ì_ödex
%
FREE_SEG_LEN
];

185 
	g£g_‰ì_ödex
++;

190 
	gÆloc_£g_˙t
++;

191 i‡(
posix_memÆign
((**)&
£g
,64,(
SEG
)) != 0)

192 
¥ötf
("posix_memalignÉrror2\n");

194 
©_u∆ock2
(
‰ì_£g_lock
);

197  
	g£g
;

200 
‰ì_£g
(
SEG
* 
£g
)

209 
©_lock2
(
‰ì_£g_lock
);

210 i‡(
	g£g_‰ì_ödex
+
	gFREE_SEG_LEN
/2 <
£g_‰ì_˙t
)

212 
upd©e_idÀ
();

213 i‡(
	g£g_‰ì_ödex
+
	gFREE_SEG_LEN
 <
£g_‰ì_˙t
)

215 
¥ötf
("‰ì seg fuŒ %d %d %d\n",
£g_‰ì_mö
,
£g_‰ì_ödex
,
£g_‰ì_˙t
);

217 
	g£g_‰ì_ödex
+
	gFREE_SEG_LEN
 <
£g_‰ì_˙t
);

220 
	g‰ì_£g_queue
[
£g_‰ì_˙t
%
FREE_SEG_LEN
] = 
£g
;

221 
	g£g_‰ì_˙t
++;

222 
©_u∆ock2
(
‰ì_£g_lock
);

224 
	gCCEH
::
CCEH
()

226 
poöt
 = 0;

227 
öô
(1);

229 
	gCCEH
::
CCEH
(
ö_dïth
)

231 
poöt
 = 1;

232 
öô
(
ö_dïth
);

234 
	gCCEH
::~
CCEH
()

236 
˛ón
();

239 
	gCCEH
::
öô
(
ö_dïth
)

242 
i
;

243 
	gdïth
 = 
ö_dïth
;

244 
	gdm
 = 
r_mask
[
dïth
];

245 
	g£g_˙t
 = 1 << 
dïth
;

250 
	g£g_li°
 = (
SEG
**)
mÆloc
((SEG*Ë* 
£g_˙t
);

256 
	gi
=0;i<
	g£g_˙t
;i++)

261 
	g£g_li°
[
i
] = 
Æloc_£g
();

264 
öv_£g
(
£g_li°
[
i
]);

265 
	g£g_li°
[
i
]->
	glock
 = 0;

267 
	g£g_li°
[
i
]->
	gdïth
 = 
dïth
;

270  
	göv0_vÆue
 = 0;

272 
	gdú_lock
 = 0;

273 
	g‰ì_£g_lock
 = 0;

276 #i‡
˘t


277 
	gbc
 = 
sc
 = 
˘t1
 = 
˘t3
 = 
˘t2
 = 0;

278 
	gföd_˙t
 = 
pic
 = 1;

282 
	gCCEH
::
˛ón
()

284 
i
;

285 
	gi
=
£g_˙t
-1;i>=0;i--)

287 i‡(
	gi
 + 1 <((
uöt64_t
)1 << 
£g_li°
[
i
]->
dïth
))

300 
‰ì
(
£g_li°
[
i
]);

303 
‰ì
(
£g_li°
);

305 #ifde‡
˘t


306 
¥ötf
("dïth %d s∂ô_˙à%d in£π %ld in£π_avg %ld s∂ô %ld câ3 %ld in£π_˙à%d b¯%d föd %ld föd_˙à%d föd_avg %ld \n",
dïth
,
sc
,
˘t1
,˘t1/
pic
,
˘t2
,
˘t3
,pic,
bc
,
˘t4
,
föd_˙t
,ctt4/find_cnt);

310 
VÆueE¡ry
 
	gCCEH
::
föd
(* c⁄° &
key
)

320 #ifde‡
˘t


321 
föd_˙t
++;

322 
time•ec
 
	gts1
,
	gts2
;

323 
˛ock_gëtime
(
CLOCK_MONOTONIC
,&
ts1
);

324 
_mm_m„n˚
();

326 
	g¢
,
	g˙
,
	gi
;

327 
KVP
* 
	gkvp_p
;

328 
uöt64_t
 
	ghk
;

329 
uöt32_t
 
	ghk2
;

330 c⁄° 
	g˛_shi·
 = 64-
CL_BIT
;

331 
	gl
;

333 
VÆueE¡ry_u
 
	gve_u
;

335 i‡(
zîo_check
(
key
))

338 
	gve_u
.
	gve_64
 = 
öv0_vÆue
;

339  
	gve_u
.
	gve
;

344 
	ghk
 = 
hf
(
key
);

345 
	ghk2
 = *(
uöt32_t
*)(&
hk
);

350 
	g¢
 = 
hk
 & 
dm
;

353 
	g˙
 = 
hk
 >> 
˛_shi·
;

356 
	gkvp_p
 = (
KVP
*)
£g_li°
[
¢
]->
˛
;

357 
	gl
 = 
˙
*
KVP_PER_CL
;

363 
	gve_u
.
	gve
.
	gnode_off£t
 = 
INIT_OFFSET
;

366 
	gi
=0;i<
KVP_PER_CL
 * 
	gLINEAR_MULTI
;i++)

369 
	gl
%=
CL_PER_SEG
*
KVP_PER_CL
;

372 i‡(
com∑ª_key
(
kvp_p
[
l
].
key
,key,
hk2
))

374 #ifde‡
˘t


375 
_mm_m„n˚
();

376 
˛ock_gëtime
(
CLOCK_MONOTONIC
,&
ts2
);

377 
	g˘t4
+=(
ts2
.
tv_£c
-
ts1
.tv_£c)*1000000000+ts2.
tv_n£c
-ts1.tv_nsec;

379 
	gve_u
.
	gve_64
 = 
kvp_p
[
l
].
vÆue
;

383 
	gl
++;

385  
	gve_u
.
	gve
;

388 
	gCCEH
::
ªmove
(* c⁄° &
key
)

390 
¢
,
	g˙
,
	gi
;

392 
KVP
* 
	gkvp_p
;

393 
SEG
* 
	g£g
;

394 * 
	grv
;

395 
	gz
 = 0;

397 
	gl
;

401 i‡(
zîo_check
(
key
))

403 
	göv0_vÆue
 = 0;

407 c⁄° 
uöt64_t
 
	ghk
 = 
hf
(
key
);

408 c⁄° 
uöt32_t
 
	ghk2
 = *(uöt32_t*)(&
hk
);

410 
	gªåy
:

415 
¢
 = 
hk
 % ((
uöt64_t
)1 << 
dïth
);

417 
	g˙
 = 
hk
 >> (64-
CL_BIT
);

419 
	g£g
 = 
£g_li°
[
¢
];

423 
©_lock2
(
£g
->
lock
);

426 i‡(
	g¢
 !
hk
 % ((
uöt64_t
)1 << 
dïth
))

429 
©_u∆ock2
(
£g
->
lock
);

431 
	gªåy
;

435 
	gkvp_p
 = (
KVP
*)
£g_li°
[
¢
]->
˛
;

436 
	gl
 = 
˙
*
KVP_PER_CL
;

438 
	gi
=0;i<
KVP_PER_CL
 * 
	gLINEAR_MULTI
;i++)

440 
	gl
%=
KVP_PER_CL
*
CL_PER_SEG
;

443 i‡(
com∑ª_key
(
kvp_p
[
l
].
key
,key,
hk2
))

445 
	gkvp_p
[
l
].
	gvÆue
 = 0;

449 
©_u∆ock2
(
£g
->
lock
);

452 
	gl
++;

456 
©_u∆ock2
(
£g
->
lock
);

464 
£g_gc
()

466 
©_lock2
(
‰ì_£g_lock
);

467 
SEG
* 
	g£g
;

468 
	g£g_‰ì_mö
 = 
PH
::
mö_£g_‰ì_˙t
();

469 ;
	g£g_‰ì_ödex
 < 
	g£g_‰ì_mö
;seg_free_index++)

478 
	g£g
 = 
‰ì_£g_queue
[
£g_‰ì_ödex
%
FREE_SEG_LEN
];

479 
‰ì
(
£g
);

481 
©_u∆ock2
(
‰ì_£g_lock
);

485 
	gCCEH
::
dú_doubÀ
()

487 
SEG
** 
√w_li°
;

488 
SEG
** 
	gﬁd_li°
;

489 
	gﬁd_li°
 = 
£g_li°
;

490 
	g√w_li°
 = (
SEG
**)
mÆloc
((SEG*Ë* 
£g_˙t
*2);

493 
	gi
;

494 
	gi
=0;i<
	g£g_˙t
;i++)

495 
	g√w_li°
[
i
] = 
√w_li°
[
£g_˙t
+i] = 
ﬁd_li°
[i];

499 
	g£g_li°
 = 
√w_li°
;

500 
	g£g_˙t
*=2;

501 ++
	gdïth
;

502 
	gdm
 = 
r_mask
[
dïth
];

503 
_mm_s„n˚
();

504 
‰ì
(
ﬁd_li°
);

508 
¥öt_£g
(
SEG
* 
£g
,
¢
)

536 
	gCCEH
::
•lô
(
¢
)

538 
SEG
* 
£g
;

539 
	gi
;

541 
uöt64_t
 
	gmask
;

542 
KVP
* 
	gkvp_p
;

543 
KVP
* 
	g√w_kvp_p1
;

544 
KVP
* 
	g√w_kvp_p2
;

546 
	g£g
 = 
£g_li°
[
¢
];

549 i‡(
	g£g
->
	gdïth
 =
dïth
)

551 
uöt8_t
 
lock
;

570 
	glock
 = 
dú_lock
;

571 i‡(
	glock
 & 
	gSPLIT_MASK
)

573 
©_u∆ock2
(
£g
->
lock
);

576 i‡(
	gdú_lock
.
com∑ª_exch™ge_°r⁄g
(
lock
,lock | 
SPLIT_MASK
))

582 i‡(
	g£g
->
	gdïth
 !
dïth
)

584 
©_u∆ock2
(
£g
->
lock
);

585 
	gdú_lock
-=
SPLIT_MASK
;

589 
	gdú_lock
 !
SPLIT_MASK
+1);

597 
dú_doubÀ
();

601 
	gdú_lock
-=
SPLIT_MASK
;

613 
	gkvp_p
 = (
KVP
*)
£g
->
˛
;

615 
SEG
* 
	g√w_£g1
;

616 
SEG
* 
	g√w_£g2
;

618 
	g√w_£g1
 = 
Æloc_£g
();

619 
	g√w_£g2
 = 
Æloc_£g
();

623 
öv_£g
(
√w_£g1
);

624 
öv_£g
(
√w_£g2
);

626 
	g√w_£g1
->
	glock
 = 0;

628 
	g√w_£g1
->
	gdïth
 = 
£g
->
dïth
+1;

630 
	g√w_£g2
->
	glock
 = 0;

632 
	g√w_£g2
->
	gdïth
 = 
£g
->
dïth
+1;

634 
	g√w_kvp_p1
 = (
KVP
*)
√w_£g1
->
˛
;

635 
	g√w_kvp_p2
 = (
KVP
*)
√w_£g2
->
˛
;

638 
	gmask
 = (
uöt64_t
)1 << 
£g
->
dïth
;

640 
	gj
,
	gl
,
	g∆1
,
	g∆2
;

641 
	g∆l1
[
CL_PER_SEG
],
	g∆l2
[CL_PER_SEG],
	gkc
;

642 
uöt64_t
 
	ghk
;

644 
	gi
=0;i<
	gCL_PER_SEG
;i++)

645 
	g∆l1
[
i
] = 
∆l2
[i] = 
KVP_PER_CL
*i;

646 
	gi
=0;i<
	gCL_PER_SEG
;i++)

648 
	g∆1
 = 
i
*
KVP_PER_CL
;

649 
	g∆2
 = 
i
*
KVP_PER_CL
;

650 
	gl
 = 
i
*
KVP_PER_CL
;

652 
	gj
=0;j<
	gKVP_PER_CL
;j++)

654 i‡(
	gkvp_p
[
l
].
	gkey
 =
INV0
 || 
kvp_p
[l].
vÆue
 == 0)

659 
l
++;

671 
	ghk
 = 
hf
(
lﬂd_key
((
uöt64_t
)
kvp_p
[
l
].
key
));

672 
	gkc
 = 
hk
 >> (64-
CL_BIT
);

673 i‡(
	ghk
 & 
	gmask
)

675 
	g√w_kvp_p2
[
∆l2
[
kc
]].
	gkey
 !
INV0
)

677 
∆l2
[
kc
]++;

678 
	g∆l2
[
kc
]%=
KVP_PER_CL
*
CL_PER_SEG
;

680 
	g√w_kvp_p2
[
∆l2
[
kc
]] = 
kvp_p
[
l
];

681 
	g∆l2
[
kc
]++;

682 
	g∆l2
[
kc
]%=
KVP_PER_CL
*
CL_PER_SEG
;

687 
	g√w_kvp_p1
[
∆l1
[
kc
]].
	gkey
 !
INV0
)

689 
∆l1
[
kc
]++;

690 
	g∆l1
[
kc
]%=
KVP_PER_CL
*
CL_PER_SEG
;

692 
	g√w_kvp_p1
[
∆l1
[
kc
]] = 
kvp_p
[
l
];

693 
	g∆l1
[
kc
]++;

694 
	g∆l1
[
kc
]%=
KVP_PER_CL
*
CL_PER_SEG
;

705 
	gl
++;

709 
_mm_s„n˚
();

716 
	gl
 = 1 << (
£g
->
dïth
+1);

719 
	gi
=
¢
;i<
	g£g_˙t
;i+=
l
)

720 
£g_li°
[
i
] = 
√w_£g1
;

725 
	gi
=
¢
 + (1 << 
£g
->
dïth
);i<
	g£g_˙t
;i+=
l
)

726 
£g_li°
[
i
] = 
√w_£g2
;

760 
‰ì_£g
(
£g
);

763 vﬁ©ûê
uöt64_t
* 
	gCCEH
::
ö£π
(* c⁄° &
key
,
VÆueE¡ry
 &
ve
,* 
u∆ock
)

773 #ifde‡
˘t


774 
	gpic
++;

775 
time•ec
 
	gts1
,
	gts2
,
	gts3
,
	gts4
;

776 
˛ock_gëtime
(
CLOCK_MONOTONIC
,&
ts3
);

777 
_mm_m„n˚
();

779 
	g¢
,
	g˙
,
	gi
;

780 
uöt64_t
 
	ghk
;

781 
uöt32_t
 
	ghk2
;

782 c⁄° 
	g˛_shi·
 = 64-
CL_BIT
;

783 
	gl
;

784 
SEG
* 
	g£g
;

785 
KVP
* 
	gkvp_p
;

787 
VÆueE¡ry_u
 
	gve_u
;

788 
	gve_u
.
	gve
 = 
ve
;

791 i‡(
zîo_check
(
key
))

793 
	göv0_vÆue
 = 
ve_u
.
ve_64
;

794 i‡(
	gu∆ock
)

795 *(**)
	gu∆ock
 = 
NULL
;

796  &
	göv0_vÆue
;

801 i‡(
	gdú_lock
 & 
	gSPLIT_MASK
)

805 
	gdú_lock
++;

806 i‡(
	gdú_lock
 & 
	gSPLIT_MASK
)

808 
	gdú_lock
--;

813 
	ghk
 = 
hf
(
key
);

814 
	ghk2
 = *(
uöt32_t
*)(&
hk
);

827 
	g¢
 = 
hk
 & 
dm
;

832 
	g˙
 = 
hk
 >> 
˛_shi·
;

840 
	g£g
 = 
£g_li°
[
¢
];

850 i‡(
åy_©_lock2
(
£g
->
lock
) == 0)

853 
dú_lock
--;

862 i‡(
	g£g
 !
£g_li°
[
¢
])

867 
©_u∆ock2
(
£g
->
lock
);

871 
	gdú_lock
--;

876 i‡(
ö£π2
(
key
,
vÆue
,
¢
,
˙
))

879 
©_u∆ock2
(
£g
->
lock
);

881 #ifde‡
˘t


882 
˛ock_gëtime
(
CLOCK_MONOTONIC
,&
ts4
);

883 
	g˘t1
+=(
ts4
.
tv_£c
-
ts3
.tv_£c)*1000000000+ts4.
tv_n£c
-ts3.tv_nsec;

890  
	gkvp_p
 = (
KVP
*)
£g
->
˛
;

891 
	gl
 = 
˙
*
KVP_PER_CL
;

905 #ifde‡
˘t


910 i‡(
	gpoöt
)

912 
	göv0_vÆue
.
	gnode_off£t
 = 0;

913  &
	göv0_vÆue
;

916 
	gi
=0;i<
KVP_PER_CL
 * 
	gLINEAR_MULTI
;i++)

918 #ifde‡
˘t


921 
	gl
%=
KVP_PER_CL
*
CL_PER_SEG
;

925 i‡(
	gkvp_p
[
l
].
	gkey
 =
INV0
)

927 
kvp_p
[
l
].
vÆue
 = 
ve_u
.
ve_64
;

928 
_mm_s„n˚
();

930 
ö£π_key
(
kvp_p
[
l
].
key
,key,
hk2
);

934 i‡(
	gu∆ock
)

935 *(**)
	gu∆ock
 = 
£g
;

938 
©_u∆ock2
(
£g
->
lock
);

939 
	gdú_lock
--;

941 #ifde‡
˘t


942 
_mm_m„n˚
();

943 
˛ock_gëtime
(
CLOCK_MONOTONIC
,&
ts4
);

944 
	g˘t1
+=(
ts4
.
tv_£c
-
ts3
.tv_£c)*1000000000+ts4.
tv_n£c
-ts3.tv_nsec;

947  &
	gkvp_p
[
l
].
	gvÆue
;

950 i‡(
com∑ª_key
(
kvp_p
[
l
].
key
,key,
hk2
))

952 i‡(
	gu∆ock
)

953 *(**)
	gu∆ock
 = 
£g
;

956 
	gkvp_p
[
l
].
	gvÆue
 = 
ve_u
.
ve_64
;

957 
_mm_s„n˚
();

958 
©_u∆ock2
(
£g
->
lock
);

959 
	gdú_lock
--;

964 #ifde‡
˘t


965 
_mm_m„n˚
();

966 
˛ock_gëtime
(
CLOCK_MONOTONIC
,&
ts4
);

967 
	g˘t1
+=(
ts4
.
tv_£c
-
ts3
.tv_£c)*1000000000+ts4.
tv_n£c
-ts3.tv_nsec;

971  &
	gkvp_p
[
l
].
	gvÆue
;

974 
	gl
++;

978 i‡(
	gi
 < 
KVP_PER_CL
*
	gLINEAR_MULTI
)

980 i‡(
	gkvp_p
[
l
].
	gkey
 =
INV0
)

982 
kvp_p
[
l
].
vÆue
 = value;

983 
_mm_s„n˚
();

984 
	gkvp_p
[
l
].
	gkey
 = 
key
;

988 i‡(
	gu∆ock
)

989 *(**)
	gu∆ock
 = 
£g
;

991 
©_u∆ock2
(
£g
->
lock
);

992 #ifde‡
˘t


993 
_mm_m„n˚
();

994 
˛ock_gëtime
(
CLOCK_MONOTONIC
,&
ts4
);

995 
	g˘t1
+=(
ts4
.
tv_£c
-
ts3
.tv_£c)*1000000000+ts4.
tv_n£c
-ts3.tv_nsec;

998  &
	gkvp_p
[
l
].
	gvÆue
;

1000 i‡(
	gkvp_p
[
l
].
	gkey
 =
key
)

1002 i‡(
u∆ock
)

1003 *(**)
u∆ock
 = 
£g
;

1006 
	gkvp_p
[
l
].
	gvÆue
 = 
vÆue
;

1007 
_mm_s„n˚
();

1008 
©_u∆ock2
(
£g
->
lock
);

1013 #ifde‡
˘t


1014 
_mm_m„n˚
();

1015 
˛ock_gëtime
(
CLOCK_MONOTONIC
,&
ts4
);

1016 
	g˘t1
+=(
ts4
.
tv_£c
-
ts3
.tv_£c)*1000000000+ts4.
tv_n£c
-ts3.tv_nsec;

1019  &
	gkvp_p
[
l
].
	gvÆue
;

1025 #ifde‡
˘t


1026 
_mm_m„n˚
();

1027 
	gsc
++;

1028 
˛ock_gëtime
(
CLOCK_MONOTONIC
,&
ts1
);

1030 
•lô
(
¢
 % ((
uöt64_t
)1 << 
£g
->
dïth
));

1031 #ifde‡
˘t


1032 
_mm_m„n˚
();

1033 
˛ock_gëtime
(
CLOCK_MONOTONIC
,&
ts2
);

1034 
	g˘t2
+=(
ts2
.
tv_£c
-
ts1
.tv_£c)*1000000000+ts2.
tv_n£c
-ts1.tv_nsec;

1047 
	gdú_lock
--;

1053 
	gCCEH
::
u∆ock_íåy2
(* 
u∆ock
)

1066 i‡(!
poöt
)

1067 
¥ötf
("ueÉrrror?\n");

1068 i‡(
	gu∆ock
)

1070 
©_u∆ock2
(((
SEG
*)
u∆ock
)->
lock
);

1071 
	gdú_lock
--;

1075 
öô_c˚h
()

1077 
	g£g_‰ì_˙t
 = 
£g_‰ì_mö
 = 
£g_‰ì_ödex
 = 0;

1078 
¥ötf
("sizeo‡KVP %ld\n",(
KVP
));

1079 
¥ötf
("sizeo‡CL %ld\n",(
CL
));

1080 
	gi
;

1081 
	gr_mask
[0] = 0;

1082 
	gi
=1;i<=64;i++)

1083 
	gr_mask
[
i
] = 
r_mask
[i-1]*2+1;

1086 i‡(
	gPH_KEY_SIZE
 != 8)

1088 
key_¨øy
 = (**)
mÆloc
((*Ë* 
KEY_ARRAY_MAX
);

1089 
	gkey_˙t
 = (*)
mÆloc
((*Ë* 
KEY_ARRAY_MAX
);

1090 
	gkey_¨øy_˙t
 = 0;

1092 
	gmax_ödex
 = 
PH_KEY_SIZE
*
KEY_ARRAY_MAX
;

1093 
	gkey_˙t
[0] = 
max_ödex
;

1094 
	gkey_¨øy
[0] = 
NULL
;

1101 
˛ón_c˚h
()

1103 
£g_gc
();

1105 
¥ötf
("SEG sizê%ld hash %lfGB\n",(
SEG
),(
Æloc_£g_˙t
*(SEG))/1024/1024/1024);

1106 
¥ötf
("SEG cou¡ %ld\n",
Æloc_£g_˙t
);

1108 
¥ötf
("£g index %d mö %d c¡ %d\n",
£g_‰ì_ödex
,
£g_‰ì_mö
,
£g_‰ì_˙t
);

1110 i‡(
	gkey_¨øy
)

1112 
	gi
;

1113 
	gi
=0+1;i<
	gkey_¨øy_˙t
;i++)

1114 
‰ì
(
key_¨øy
[
i
]);

1115 
‰ì
(
key_¨øy
);

1116 
‰ì
(
key_˙t
);

1122 
ölöe
 * 
	gCCEH_vk
::
lﬂd_key
(c⁄° 
uöt64_t
 &
key
)

1126 
KeyE¡ry_u
 
ku
;

1127 
	gku
.
	gke_64
 = 
key
;

1128  &
	gkey_¨øy
[
ku
.
ke
.
hp
.
key_¨øy
][ku.ke.hp.
key_off£t
];

1133 
ölöe
 * 
	gCCEH_vk
::
lﬂd_key2
(c⁄° 
KeyE¡ry
 &
key
)

1137  &
key_¨øy
[
key
.
hp
.key_¨øy][key.hp.
key_off£t
];

1142 
ölöe
 
boﬁ
 
	gCCEH_vk
::
com∑ª_key
(c⁄° vﬁ©ûê
uöt64_t
 &
key1
,* c⁄° &
key2
,c⁄° 
uöt32_t
 &
hash
)

1144 
KeyE¡ry_u
 
	gkey
;

1145 
	gkey
.
	gke_64
 = 
key1
;

1146 i‡(
	ghash
 !
key
.
ke
.
hp
.
hash
)

1147  
Ál£
;

1148 * 
	gkl
 = 
lﬂd_key2
(
key
.
ke
);

1149  *((
	guöt64_t
*)
	gkl
Ë=*((
uöt64_t
*)
key2
Ë&& *((uöt64_t*)
kl
+1) == *((uint64_t*)key2+1);

1151 
ölöe
 
	gCCEH_vk
::
ö£π_key
(vﬁ©ûê
uöt64_t
 &
key1
,* c⁄° &
key2
,c⁄° 
uöt32_t
 &
hash
)

1154 i‡(
	gkey_˙t
[
key_¨øy_ödex
] + 
	gPH_KEY_SIZE
 >
max_ödex
)

1156 
key_¨øy_ödex
 = 
key_¨øy_˙t
.
„tch_add
(1);

1157 
	gkey_˙t
[
key_¨øy_ödex
] = 0;

1158 
	gkey_¨øy
[
key_¨øy_ödex
] = (*)
mÆloc
(
max_ödex
);

1161 
mem˝y
(&
key_¨øy
[
key_¨øy_ödex
][
key_˙t
[key_¨øy_ödex]],
key2
,
PH_KEY_SIZE
);

1163 
KeyE¡ry_u
 
	gkey
;

1164 
	gkey
.
	gke
.
	ghp
.
	gkey_¨øy
 = 
key_¨øy_ödex
;

1165 
	gkey
.
	gke
.
	ghp
.
	gkey_off£t
 = 
key_˙t
[
key_¨øy_ödex
];

1166 
	gkey
.
	gke
.
	ghp
.
	ghash
 = 
hash
;

1168 
	gkey_˙t
[
key_¨øy_ödex
]+=
PH_KEY_SIZE
;

1170 
	gkey1
 = 
key
.
ke_64
;

1175 
ölöe
 
uöt64_t
 
	gCCEH_vk
::
hf
(* c⁄° &
key
)

1188  
°d
::
_Hash_byãs
(
key
,16,5516);

1192 
ölöe
 
boﬁ
 
	gCCEH_vk
::
zîo_check
(* c⁄° &
key
)

1194  
Ál£
;

	@cceh.h

4 
	~<©omic
>

7 
	~"globÆ.h
"

10 
	#INV0
 0xffffffffffffffff

	)

13 
	#KVP_PER_CL
 4

14 
	#CL_SIZE
 64

	)

17 
	#CL_BIT
 4

	)

18 
	#CL_PER_SEG
 (1 << 
CL_BIT
)

	)

19 
	#LINEAR_MULTI
 4

	)

21 
	#SPLIT_MASK
 (1 << 6)

22 

	)

25 
«me•a˚
 
	gPH


30 
	#KEY_ARRAY_MAX
 (1 << 16)

	)

34 
	sH™dP


36 
uöt32_t
 
	ghash
;

37 
uöt16_t
 
	gkey_¨øy
;

38 
uöt16_t
 
	gkey_off£t
;

41 
	uKeyE¡ry


43 
uöt64_t
 
	gkey_vÆue
;

44 
H™dP
 
	ghp
;

47 
	uKeyE¡ry_u


49 
KeyE¡ry
 
	gke
;

50 
uöt64_t
 
	gke_64
;

53 
	sKVP


72 vﬁ©ûê
uöt64_t
 
	gkey
;

73 vﬁ©ûê
uöt64_t
 
	gvÆue
;

76 
	sKVP_vk


79 
KeyE¡ry
 
	gkey
;

80 
VÆueE¡ry
 
	gvÆue
;

83 
	sCL


85 
KVP
 
	gkvp
[
KVP_PER_CL
];

88 
	sSEG


90 
CL
 
	g˛
[
CL_PER_SEG
];

92 
	g°d
::
©omic
<
uöt8_t
> 
lock
;

95 
	gdïth
;

99 ˛as†
	cCCEH


101 
	gpublic
:

102 
CCEH
();

103 
CCEH
(
ö_dïth
);

104 ~
CCEH
();

106 
ölöe
 
boﬁ
 
com∑ª_key
(c⁄° vﬁ©ûê
uöt64_t
 &
key1
,* c⁄° &
key2
,c⁄° 
uöt32_t
 &
hash
);

107 
ölöe
 
ö£π_key
(vﬁ©ûê
uöt64_t
 &
key1
,* c⁄° &
key2
,c⁄° 
uöt32_t
 &
hash
);

108 
ölöe
 
uöt64_t
 
hf
(* c⁄° &
key
);

109 
ölöe
 * 
lﬂd_key
(c⁄° 
uöt64_t
 &
key
);

110 
ölöe
 
boﬁ
 
zîo_check
(* c⁄° &
key
);

113 vﬁ©ûê
	gdïth
;

114 vﬁ©ûê
	g£g_˙t
;

117 
	g°d
::
©omic
<
SEG
**> 
£g_li°
;

122 vﬁ©ûê
uöt64_t
 
	göv0_vÆue
;

125 
dú_doubÀ
();

126 
•lô
(
¢
);

128 
öô
(
ö_dïth
);

129 
˛ón
();

132 
	gpublic
:

135 vﬁ©ûê
uöt64_t
* 
ö£π
(* c⁄° &
key
,
VÆueE¡ry
 &
ve
,* 
u∆ock
 = 0);

137 
VÆueE¡ry
 
föd
(* c⁄° &
key
);

138 
ªmove
(* c⁄° &
key
);

140 
u∆ock_íåy2
(* 
u∆ock
);

142 
uöt64_t
 
	gdm
;

143 
	gpoöt
;

145 
	gsc
,
	gpic
,
	gbc
,
	gföd_˙t
;

146 
uöt64_t
 
	g˘t1
,
	g˘t2
,
	g˘t3
,
	g˘t4
;

148 
	g°d
::
©omic
<
uöt8_t
> 
dú_lock
;

152 ˛as†
	cCCEH_vk
 : 
public
 
CCEH


154 
ölöe
 
boﬁ
 
com∑ª_key
(c⁄° vﬁ©ûê
uöt64_t
 &
key1
,* c⁄° &
key2
,c⁄° 
uöt32_t
 &
hash
);

155 
ölöe
 
ö£π_key
(vﬁ©ûê
uöt64_t
 &
key1
,* c⁄° &
key2
,c⁄° 
uöt32_t
 &
hash
);

156 
ölöe
 
uöt64_t
 
hf
(* c⁄° &
key
);

157 
ölöe
 * 
lﬂd_key
(c⁄° 
uöt64_t
 &
key
);

158 
ölöe
 * 
lﬂd_key2
(c⁄° 
KeyE¡ry
 &
key
);

159 
ölöe
 
boﬁ
 
zîo_check
(* c⁄° &
key
);

163 
öô_c˚h
();

164 
˛ón_c˚h
();

	@copy.h

3 
«me•a˚
 
	gPH


7 
	gNode
;

10 
ölöe
 
pf64x4
(*
ss
)

12 
__buûtö_¥e„tch
(
ss
,0,1);

13 
__buûtö_¥e„tch
(
ss
+1,0,1);

14 
__buûtö_¥e„tch
(
ss
+2,0,1);

15 
__buûtö_¥e„tch
(
ss
+3,0,1);

18 
ölöe
 
Rmm32x8
(* 
d
,*
s
)

21 
__m256i
 *
	gss
 = (__m256i*)
s
;

22 
__m256i
 *
	gdd
 = (__m256i*)
d
;

24 *(
	gdd
+7Ë
_mm256_°ªam_lﬂd_si256
(
ss
+7);

25 *(
	gdd
+6Ë
_mm256_°ªam_lﬂd_si256
(
ss
+6);

26 *(
	gdd
+5Ë
_mm256_°ªam_lﬂd_si256
(
ss
+5);

27 *(
	gdd
+4Ë
_mm256_°ªam_lﬂd_si256
(
ss
+4);

28 *(
	gdd
+3Ë
_mm256_°ªam_lﬂd_si256
(
ss
+3);

29 *(
	gdd
+2Ë
_mm256_°ªam_lﬂd_si256
(
ss
+2);

30 *(
	gdd
+1Ë
_mm256_°ªam_lﬂd_si256
(
ss
+1);

31 *(
	gdd
+0Ë
_mm256_°ªam_lﬂd_si256
(
ss
+0);

36 
ölöe
 
mm32x8
(* 
d
,*
s
)

39 
__m256i
 *
	gss
 = (__m256i*)
s
;

40 
__m256i
 *
	gdd
 = (__m256i*)
d
;

42 *
	gdd
 = 
_mm256_°ªam_lﬂd_si256
(
ss
);

43 *(
	gdd
+1Ë
_mm256_°ªam_lﬂd_si256
(
ss
+1);

44 *(
	gdd
+2Ë
_mm256_°ªam_lﬂd_si256
(
ss
+2);

45 *(
	gdd
+3Ë
_mm256_°ªam_lﬂd_si256
(
ss
+3);

46 *(
	gdd
+4Ë
_mm256_°ªam_lﬂd_si256
(
ss
+4);

47 *(
	gdd
+5Ë
_mm256_°ªam_lﬂd_si256
(
ss
+5);

48 *(
	gdd
+6Ë
_mm256_°ªam_lﬂd_si256
(
ss
+6);

49 *(
	gdd
+7Ë
_mm256_°ªam_lﬂd_si256
(
ss
+7);

53 
ölöe
 
mm64x4h1
(* 
d
,*
s
)

56 
__m512i
 *
	gss
 = (__m512i*)
s
;

57 
__m512i
 *
	gdd
 = (__m512i*)
d
;

59 *
	gdd
 = 
_mm512_°ªam_lﬂd_si512
(
ss
);

60 *(
	gdd
+2Ë
_mm512_°ªam_lﬂd_si512
(
ss
+2);

71 
ölöe
 
mm64x4h2
(* 
d
,*
s
)

74 
__m512i
 *
	gss
 = (__m512i*)
s
;

75 
__m512i
 *
	gdd
 = (__m512i*)
d
;

77 *(
	gdd
+1Ë
_mm512_°ªam_lﬂd_si512
(
ss
+1);

78 *(
	gdd
+3Ë
_mm512_°ªam_lﬂd_si512
(
ss
+3);

88 
ölöe
 
mm64x4
(* 
d
,*
s
)

91 
__m512i
 *
	gss
 = (__m512i*)
s
;

92 
__m512i
 *
	gdd
 = (__m512i*)
d
;

94 *
	gdd
 = 
_mm512_°ªam_lﬂd_si512
(
ss
);

95 *(
	gdd
+1Ë
_mm512_°ªam_lﬂd_si512
(
ss
+1);

96 *(
	gdd
+2Ë
_mm512_°ªam_lﬂd_si512
(
ss
+2);

97 *(
	gdd
+3Ë
_mm512_°ªam_lﬂd_si512
(
ss
+3);

109 
ölöe
 
˛64x4
(* 
d
,*
s
)

112 
	gbuf„r
[64];

114 
__m512i
 *
	gss
 = (__m512i*)
s
;

115 
__m512i
 *
	gdd
 = (__m512i*)
d
;

123 *
	gdd
 = 
_mm512_°ªam_lﬂd_si512
(
ss
);

124 *(
	gdd
+1Ë
_mm512_°ªam_lﬂd_si512
(
ss
+1);

125 *(
	gdd
+2Ë
_mm512_°ªam_lﬂd_si512
(
ss
+2);

126 *(
	gdd
+3Ë
_mm512_°ªam_lﬂd_si512
(
ss
+3);

131 
ölöe
 
pf256
(* 
a
,
size_t
 
s
)

136 
	gi
=0;

137 
	gi
 < 
	gs
)

140 
pf64x4
(
a
);

141 
	gi
+=256;

142 
	ga
+=256;

146 
ölöe
 
˝256h1
(* 
a
,* 
b
,
size_t
 
s
)

148 
	gi
=0;

149 
	gi
 < 
	gs
)

151 
mm64x4h1
(
a
,
b
);

152 
	gi
+=256;

153 
	ga
+=256;

154 
	gb
+=256;

158 
ölöe
 
˝256h2
(* 
a
,* 
b
,
size_t
 
s
)

160 
	gi
=0;

161 
	gi
 < 
	gs
)

163 
mm64x4h2
(
a
,
b
);

164 
	gi
+=256;

165 
	ga
+=256;

166 
	gb
+=256;

171 
ölöe
 
˝256
(* 
a
,* 
b
,
size_t
 
s
)

177 
	gi
=0;

178 
	gi
 < 
	gs
)

180 #i‚de‡
AVX


181 
mem˝y
(
a
,
b
,256);

183 
mm64x4
(
a
,
b
);

185 
	gi
+=256;

186 
	ga
+=256;

187 
	gb
+=256;

192 
ölöe
 
¡256
(* 
a
,* 
b
,
size_t
 
s
)

195 
	gi
=0;

196 
	gi
 < 
	gs
)

198 
pmem_mem˝y
(
a
,
b
,256,
PMEM_F_MEM_NONTEMPORAL
);

199 
	gi
+=256;

200 
	ga
+=256;

201 
	gb
+=256;

205 
ölöe
 
˝256
(* 
a
,* 
b
)

210 
	gi
=0;

211 
	gi
 < (
	gNode
))

213 
mem˝y
(
a
,
b
,256);

214 
	gi
+=256;

215 
	ga
+=256;

216 
	gb
+=256;

221 
ölöe
 
¡256
(* 
a
,* 
b
)

224 
	gi
=0;

225 
	gi
 < (
	gNode
))

227 
pmem_mem˝y
(
a
,
b
,256,
PMEM_F_MEM_NONTEMPORAL
);

228 
	gi
+=256;

229 
	ga
+=256;

230 
	gb
+=256;

	@data.cpp

1 
	~<libpmem.h
>

3 
	~<©omic
>

5 
	~<°dio.h
>

6 
	~<°rög.h
>

7 
	~<°dlib.h
>

8 
	~<x86öåö.h
>

10 
	~<uni°d.h
>

12 
	~"d©a.h
"

13 
	~"hash.h
"

15 
	~"quîy.h
"

16 
	~"thªad.h
"

18 
	~"c›y.h
"

22 
	#¥öt
 0

	)

27 
	#DRAM_BUF


	)

29 
«me•a˚
 
	gPH


36 ** 
	gpmem_addr
;

37 
	gis_pmem
;

38 
size_t
 
	gpmem_Àn
;

41 
Node
** 
	gnode_d©a_¨øy
;

44 ** 
	gmëa_addr
;

47 
Node_mëa
** 
	gmëa_¨øy
;

48 vﬁ©ûê
	gfûe_num
;

53 vﬁ©ûê
	g∑π_fûe_num
[
PM_N
];

54 vﬁ©ûê
	g∑π_off£t_˙t
[
PM_N
];

56 
	g°d
::
©omic
 <
uöt8_t
> 
Æloc_lock
;

62 vﬁ©ûê
	g‰ì_˙t
[
PM_N
];

63 vﬁ©ûê
	g‰ì_mö
[
PM_N
];

64 vﬁ©ûê
	g‰ì_ödex
[
PM_N
];

65 
Node_off£t
 
	g‰ì_queue
[
PM_N
][
FREE_QUEUE_LEN
];

74 
	#LOCAL_QUEUE_LEN
 20

	)

75 
thªad_loˇl
 
Node_off£t
 
	gloˇl_b©ch_Æloc
[
PM_N
][
LOCAL_QUEUE_LEN
];

76 
thªad_loˇl
 
	glbac
[
PM_N
];

77 
thªad_loˇl
 
Node_off£t
 
	gloˇl_b©ch_‰ì
[
PM_N
][
LOCAL_QUEUE_LEN
];

78 
thªad_loˇl
 
	glbfc
[
PM_N
];

80 
thªad_loˇl
 
	g∑π_rŸ©i⁄
=0;

89 
thªad_loˇl
 
Node
 *
	gd0
,*
	gd1
,*
	gd2
;

91 
˛ón_thªad_loˇl
()

93 
¥ötf
("ctr\n");

94 
	gi
,
	gj
;

95 
©_lock
(
Æloc_lock
);

96 
	gi
=0;i<
	gPM_N
;i++)

98 
	gj
=
lbac
[
i
];j<
	gLOCAL_QUEUE_LEN
;j++)

100 i‡(
	g‰ì_˙t
[
i
]-
	g‰ì_ödex
[i] >
FREE_QUEUE_LEN
)

102 
¥ötf
("queue fullÅl\n");

105 
	g‰ì_queue
[
i
][
‰ì_˙t
[i]%
	gFREE_QUEUE_LEN
] = 
loˇl_b©ch_Æloc
[i][
j
];

106 ++
	g‰ì_˙t
[
i
];

108 
	gj
=0;j<
	glbfc
[
i
];j++)

110 i‡(
	g‰ì_˙t
[
i
]-
	g‰ì_ödex
[i] >
FREE_QUEUE_LEN
)

112 
¥ötf
("queue fullÅl2\n");

115 
	g‰ì_queue
[
i
][
‰ì_˙t
[i]%
	gFREE_QUEUE_LEN
] = 
loˇl_b©ch_‰ì
[i][
j
];

116 ++
	g‰ì_˙t
[
i
];

120 
©_u∆ock
(
Æloc_lock
);

122 
‰ì
(
d0
);

123 
‰ì
(
d1
);

124 
‰ì
(
d2
);

133 
boﬁ
 
	gã°_Æloc_check
[1000][
MAX_OFFSET
];

134 
ã°_Æloc
(
Node_off£t
 
off£t
)

137 i‡(
	gã°_Æloc_check
[
off£t
.
fûe
][offset.offset])

139 
	gt
;

140 
¥ötf
("errorálloc\n");

141 
sˇnf
("%d\n",&
t
);

144 
ã°_‰ì
(
Node_off£t
 
off£t
)

147 i‡(
	gã°_Æloc_check
[
off£t
.
fûe
][offset.offset] == 0)

149 
t
;

150 
¥ötf
("error free\n");

151 
sˇnf
("%d\n",&
t
);

156 
uöt64_t
 
	gâ1
,
	gâ2
,
	gâ3
,
	gâ4
,
	gâ5
;

157 
uöt64_t
 
	gqâ1
,
	gqâ2
,
	gqâ3
,
	gqâ4
,
	gqâ5
,
	gqâ6
,
	gqâ7
,
	gqâ8
;

165 
©_lock
(
°d
::
©omic
<
uöt8_t
> &
lock
)

167 
uöt8_t
 
z
;

168 
	gåue
)

170 
	gz
 = 0;

171 i‡(
	glock
.
com∑ª_exch™ge_°r⁄g
(
z
,1))

202 
ölöe
 
Êush_mëa
(
Node_off£t
 
off£t
)

216 
pmem_mem˝y
(
off£t_to_node_d©a
(
off£t
),(
Node_mëa
*)
off£t_to_node
(off£t),()+(),
PMEM_F_MEM_NONTEMPORAL
);

221 
ölöe
 
Êush_√xt_off£t
(
Node_off£t
 
off£t
,Node_off£à
√xt_off£t
)

223 
pmem_mem˝y
(
off£t_to_node_d©a
(
off£t
),&
√xt_off£t
,(),
PMEM_F_MEM_NONTEMPORAL
);

227 
ölöe
 
Êush_√xt_off£t_ig
(
Node_off£t
 
off£t
,Node_off£à
√xt_off£t_ig
)

229 
pmem_mem˝y
((*)
off£t_to_node_d©a
(
off£t
)+(),&
√xt_off£t_ig
,(),
PMEM_F_MEM_NONTEMPORAL
);

234 
√w_fûe
()

236 
	gfûe_«me
[100];

237 
	gbuf„r
[10];

238 
	gÀn
,
	gnum
,
	gi
;

239 
	gfûe_num
++;

240 
°r˝y
(
fûe_«me
,
pmem_fûe
);

241 
°rˇt
(
fûe_«me
,"data");

242 
	gÀn
 = 
°æí
(
fûe_«me
);

243 
	gnum
 = 
fûe_num
+1;

244 
	gi
 = 0;

245 
	gnum
 > 0)

247 
	gbuf„r
[
i
] = 
num
%10+'0';

248 
	gi
++;

249 
	gnum
/=10;

251 
	gi
=
i
-1;i>=0;i--)

252 
	gfûe_«me
[
Àn
++] = 
buf„r
[
i
];

253 
	gfûe_«me
[
Àn
] = 0;

255 i‡(
	gUSE_DRAM
)

256 
	gpmem_addr
[
fûe_num
]=(*)
mm≠
(
NULL
,
FILE_SIZE
,
PROT_READ
|
PROT_WRITE
,
MAP_PRIVATE
|
MAP_ANONYMOUS
 ,-1,0);

259 
	gpmem_addr
[
fûe_num
] = (*)
pmem_m≠_fûe
(
fûe_«me
,
FILE_SIZE
,
PMEM_FILE_CREATE
,0777,&
pmem_Àn
,&
is_pmem
);

260 
	gmëa_addr
[
fûe_num
] = (*)
mm≠
(
NULL
,
META_SIZE
,
PROT_READ
|
PROT_WRITE
,
MAP_PRIVATE
|
MAP_ANONYMOUS
|
MAP_POPULATE
,-1,0);

262 
	gnode_d©a_¨øy
[
fûe_num
] = (
Node
*)
pmem_addr
[file_num];

263 
	gmëa_¨øy
[
fûe_num
] = (
Node_mëa
*)
mëa_addr
[file_num];

269 
Node_off£t
 
Æloc_node0
(
∑π
)

271 #ifde‡
dâ


272 
time•ec
 
	gts1
,
	gts2
;

273 
˛ock_gëtime
(
CLOCK_MONOTONIC
,&
ts1
);

274 
_mm_m„n˚
();

276 
Node_mëa
* 
	gnode
;

277 
Node_off£t
 
	goff£t
;

279 
©_lock
(
Æloc_lock
);

281 i‡(
	g‰ì_ödex
[
∑π
] =
‰ì_mö
[part])

283 
ãmp
;

284 
	gãmp
 = 
mö_‰ì_˙t
(
∑π
);

285 i‡(
	gãmp
 > 
	g‰ì_ödex
[
∑π
])

286 
	g‰ì_mö
[
∑π
] = 
ãmp
;

290 i‡(
	g‰ì_ödex
[
∑π
] < 
	g‰ì_mö
[part])

292 
	goff£t
 = 
‰ì_queue
[
∑π
][
‰ì_ödex
[∑π]%
FREE_QUEUE_LEN
];

295 ++
	g‰ì_ödex
[
∑π
];

296 
©_u∆ock
(
Æloc_lock
);

297 i‡(
	g¥öt
)

298 
¥ötf
("Ælo¯nodêª %p\n",
node
);

299 #ifde‡
dâ


300 
˛ock_gëtime
(
CLOCK_MONOTONIC
,&
ts2
);

301 
_mm_m„n˚
();

302 
	gâ5
 +(
ts2
.
tv_£c
-
ts1
.tv_£c)*1000000000+ts2.
tv_n£c
-ts1.tv_nsec;

306 #ifde‡
Æloc_ã°


307 
ã°_Æloc
(
off£t
);

308 
	gã°_Æloc_check
[
off£t
.
fûe
][offset.offset] = 1;

310  
	goff£t
;

313 i‡(
	g∑π_off£t_˙t
[
∑π
] =
MAX_OFFSET
/
PM_N
)

315 i‡(
∑π_fûe_num
[
∑π
] =
fûe_num
)

316 
√w_fûe
();

317 
	g∑π_fûe_num
[
∑π
]++;

318 
	g∑π_off£t_˙t
[
∑π
] = 0;

336 
	goff£t
.
	gfûe
 = 
∑π_fûe_num
[
∑π
];

339 
	goff£t_˙t
 = 
∑π_off£t_˙t
[
∑π
];

340 #ifde‡
SMALL_NODE


341 
	goff£t
.off£à(
off£t_˙t
/(
PAGE_SIZE
/
PM_N
/(
Node
))*PAGE_SIZE + 
∑π
*(PAGE_SIZE/PM_N) + (offset_cnt%(PAGE_SIZE/PM_N/(Node)))*(Node)) / (Node);

343 
	goff£t
.off£à
off£t_˙t
 * 
PM_N
 + 
∑π
;

346 
	gnode
 = 
off£t_to_node
(
off£t
);

347 ++
	g∑π_off£t_˙t
[
∑π
];

348 
©_u∆ock
(
Æloc_lock
);

350 
	gnode
->
	göv_kv
 = (
uöt16_t
*)
mÆloc
((uint16_t)*4);

351 
	gnode
->
	göv_max
 = 4;

352 
	gnode
->
	göv_˙t
 = 0;

353 #ifde‡
DOUBLE_LOG


354 
	gnode
->
	gÊush_kv
 = (**)
mÆloc
((*)*4);

355 
	gnode
->
	gÊush_max
 = 4;

356 
	gnode
->
	gÊush_˙t
 = 0;

360 #ifde‡
Æloc_ã°


361 
ã°_Æloc
(
off£t
);

362 
	gã°_Æloc_check
[
off£t
.
fûe
][offset.offset] = 1;

365 #ifde‡
dâ


366 
˛ock_gëtime
(
CLOCK_MONOTONIC
,&
ts2
);

367 
_mm_m„n˚
();

368 
	gâ5
 +(
ts2
.
tv_£c
-
ts1
.tv_£c)*1000000000+ts2.
tv_n£c
-ts1.tv_nsec;

370  
	goff£t
;

373 
Node_off£t
 
Æloc_node
(
∑π
)

375 i‡(
	glbac
[
∑π
] < 
	gLOCAL_QUEUE_LEN
)

378 #ifde‡
Æloc_ã°


380 
Node_off£t
 
	goff£t
 = 
loˇl_b©ch_Æloc
[
∑π
][
lbac
[part]];

381 
ã°_Æloc
(
off£t
);

382 
	gã°_Æloc_check
[
off£t
.
fûe
][offset.offset] = 1;

385  
	gloˇl_b©ch_Æloc
[
∑π
][
lbac
[part]++];

387 
Node_mëa
* 
	gnode
;

388 
Node_off£t
 
	goff£t
;

391 
©_lock
(
Æloc_lock
);

392 
	gi
;

393 
	gi
=0;i<
	gLOCAL_QUEUE_LEN
;i++)

396 i‡(
	g‰ì_ödex
[
∑π
] =
‰ì_mö
[part])

398 
ãmp
;

399 
	gãmp
 = 
mö_‰ì_˙t
(
∑π
);

400 i‡(
	gãmp
 > 
	g‰ì_ödex
[
∑π
])

401 
	g‰ì_mö
[
∑π
] = 
ãmp
;

404 i‡(
	g‰ì_ödex
[
∑π
] < 
	g‰ì_mö
[part])

406 
	gloˇl_b©ch_Æloc
[
∑π
][
i
] = 
‰ì_queue
[∑π][
‰ì_ödex
[∑π]%
FREE_QUEUE_LEN
];

407 ++
	g‰ì_ödex
[
∑π
];

410 i‡(
	g∑π_off£t_˙t
[
∑π
] =
MAX_OFFSET
/
PM_N
)

412 i‡(
∑π_fûe_num
[
∑π
] =
fûe_num
)

413 
√w_fûe
();

414 
	g∑π_fûe_num
[
∑π
]++;

415 
	g∑π_off£t_˙t
[
∑π
] = 0;

418 
	goff£t
.
	gfûe
 = 
∑π_fûe_num
[
∑π
];

420 
	goff£t_˙t
 = 
∑π_off£t_˙t
[
∑π
];

421 #ifde‡
SMALL_NODE


422 
	goff£t
.off£à(
off£t_˙t
/(
PAGE_SIZE
/
PM_N
/(
Node
))*PAGE_SIZE + 
∑π
*(PAGE_SIZE/PM_N) + (offset_cnt%(PAGE_SIZE/PM_N/(Node)))*(Node)) / (Node);

424 
	goff£t
.off£à
off£t_˙t
 * 
PM_N
 + 
∑π
;

428 
	gnode
 = 
off£t_to_node
(
off£t
);

429 ++
	g∑π_off£t_˙t
[
∑π
];

431 
	gnode
->
	göv_kv
 = (
uöt16_t
*)
mÆloc
((uint16_t)*4);

432 
	gnode
->
	göv_max
 = 4;

433 
	gnode
->
	göv_˙t
 = 0;

435 #ifde‡
DOUBLE_LOG


436 
	gnode
->
	gÊush_kv
 = (**)
mÆloc
((*)*4);

437 
	gnode
->
	gÊush_max
 = 4;

438 
	gnode
->
	gÊush_˙t
 = 0;

442 
	gloˇl_b©ch_Æloc
[
∑π
][
i
] = 
off£t
;

444 
©_u∆ock
(
Æloc_lock
);

445 
	glbac
[
∑π
] = 0;

447 #ifde‡
Æloc_ã°


449 
	goff£t
 = 
loˇl_b©ch_Æloc
[
∑π
][
lbac
[part]];

450 
ã°_Æloc
(
off£t
);

451 
	gã°_Æloc_check
[
off£t
.
fûe
][offset.offset] = 1;

454  
	gloˇl_b©ch_Æloc
[
∑π
][
lbac
[part]++];

456 
‰ì_node
(
Node_off£t
 
off£t
)

458 #ifde‡
SMALL_NODE


459 
	g∑π
 = 
off£t
.off£t%(
PAGE_SIZE
/(
Node
))/(PAGE_SIZE/
PM_N
/(Node));

461 
	g∑π
 = 
off£t
.off£t%
PM_N
;

464 i‡(
	glbfc
[
∑π
] < 
	gLOCAL_QUEUE_LEN
)

466 #ifde‡
Æloc_ã°


467 
ã°_‰ì
(
off£t
);

468 
	gã°_Æloc_check
[
off£t
.
fûe
][offset.offset] = 0;

470 
	gloˇl_b©ch_‰ì
[
∑π
][
lbfc
[∑π]++] = 
off£t
;

475 
©_lock
(
Æloc_lock
);

477 
	gi
;

478 
	gi
=0;i<
	gLOCAL_QUEUE_LEN
;i++)

481 
	g‰ì_ödex
[
∑π
] + 
	gFREE_QUEUE_LEN
/2 < 
	g‰ì_˙t
[part])

485 
upd©e_idÀ
();

487 
	gt
;

491 i‡(
	g‰ì_ödex
[
∑π
] + 
	gFREE_QUEUE_LEN
 < 
	g‰ì_˙t
[part])

493 
¥ötf
("queuêfuŒ %d %d %d %d\n",
∑π
,
‰ì_ödex
[∑π],
‰ì_mö
[∑π],
‰ì_˙t
[part]);

494 
¥ötf
("queue full\n");

495 
¥öt_thªad_öfo
();

496 
sˇnf
("%d",&
t
);

504 
	g‰ì_queue
[
∑π
][
‰ì_˙t
[∑π]%
	gFREE_QUEUE_LEN
] = 
loˇl_b©ch_‰ì
[∑π][
i
];

505 ++
	g‰ì_˙t
[
∑π
];

507 
©_u∆ock
(
Æloc_lock
);

508 #ifde‡
Æloc_ã°


509 
ã°_‰ì
(
off£t
);

510 
	gã°_Æloc_check
[
off£t
.
fûe
][offset.offset] = 0;

512 
	glbfc
[
∑π
]=0;

513 
	gloˇl_b©ch_‰ì
[
∑π
][
lbfc
[∑π]++] = 
off£t
;

516 
‰ì_node0
(
Node_off£t
 
off£t
)

518 #ifde‡
SMALL_NODE


519 
	g∑π
 = 
off£t
.off£t%(
PAGE_SIZE
/(
Node
)/(PAGE_SIZE/
PM_N
/(Node)));

521 
	g∑π
 = 
off£t
.off£à% 
PM_N
;

526 i‡(
	g‰ì_ödex
[
∑π
] + 
	gFREE_QUEUE_LEN
/2 < 
	g‰ì_˙t
[part])

528 
upd©e_idÀ
();

531 i‡(
	g‰ì_ödex
[
∑π
] + 
	gFREE_QUEUE_LEN
 < 
	g‰ì_˙t
[part])

534 
¥ötf
("queue full\n");

536 
	gt
;

537 
sˇnf
("%d",&
t
);

541 
©_lock
(
Æloc_lock
);

543 #ifde‡
Æloc_ã°


545 
ã°_‰ì
(
off£t
);

546 
	gã°_Æloc_check
[
off£t
.
fûe
][offset.offset] = 0;

549 
	g‰ì_queue
[
∑π
][
‰ì_˙t
[∑π]%
	gFREE_QUEUE_LEN
] = 
off£t
;

551 ++
	g‰ì_˙t
[
∑π
];

552 
©_u∆ock
(
Æloc_lock
);

560 
öô_fûe
()

563 i‡(
	gUSE_DRAM
)

564 
	gpmem_addr
=(*)
mm≠
(
NULL
,
pmem_size
,
PROT_READ
|
PROT_WRITE
,
MAP_PRIVATE
|
MAP_ANONYMOUS
 ,-1,0);

567 
	gpmem_addr
 = (*)
pmem_m≠_fûe
(
pmem_fûe
,
pmem_size
,
PMEM_FILE_CREATE
,0777,&
pmem_Àn
,&
is_pmem
);

569 
	gfûe_num
 = -1;

570 
	gpmem_addr
 = (**)
mÆloc
((*)*
MAX_FILE_NUM
);

571 
	gmëa_addr
 = (**)
mÆloc
((*)*
MAX_FILE_NUM
);

572 
	gnode_d©a_¨øy
 = (
Node
**)
mÆloc
((*)*
MAX_FILE_NUM
);

573 
	gmëa_¨øy
 = (
Node_mëa
**)
mÆloc
((*)*
MAX_FILE_NUM
);

593 
check_ªcovî
()

596 #i‚de‡
åy_ªcovî


597 
¥ötf
("don'tÅryÑecover\n");

601 
¥ötf
("tryÑecover\n");

605 
	gfûe_«me
[100];

606 
	gbuf„r
[10];

607 
	gÀn
,
	gnum
,
	gi
;

610 
	gfûe_num
++;

611 
°r˝y
(
fûe_«me
,
pmem_fûe
);

612 
°rˇt
(
fûe_«me
,"data");

613 
	gÀn
 = 
°æí
(
fûe_«me
);

614 
	gnum
 = 
fûe_num
+1;

615 
	gi
 = 0;

616 
	gnum
 > 0)

618 
	gbuf„r
[
i
] = 
num
%10+'0';

619 
	gi
++;

620 
	gnum
/=10;

622 
	gi
=
i
-1;i>=0;i--)

623 
	gfûe_«me
[
Àn
++] = 
buf„r
[
i
];

624 
	gfûe_«me
[
Àn
] = 0;

626 i‡(
ac˚ss
(
fûe_«me
,
F_OK
) == -1)

628 
fûe_num
--;

629  
	gfûe_num
;

633 i‡(
	gUSE_DRAM
)

635 
¥ötf
("???");

640 
	gpmem_addr
[
fûe_num
] = (*)
pmem_m≠_fûe
(
fûe_«me
,
FILE_SIZE
,
PMEM_FILE_CREATE
,0777,&
pmem_Àn
,&
is_pmem
);

641 
	gmëa_addr
[
fûe_num
] = (*)
mm≠
(
NULL
,
META_SIZE
,
PROT_READ
|
PROT_WRITE
,
MAP_PRIVATE
|
MAP_ANONYMOUS
|
MAP_POPULATE
,-1,0);

643 
	gnode_d©a_¨øy
[
fûe_num
] = (
Node
*)
pmem_addr
[file_num];

644 
	gmëa_¨øy
[
fûe_num
] = (
Node_mëa
*)
mëa_addr
[file_num];

653 
uöt64_t
 
	g¥e_LSB
[65];

655 
	#DUP_HASH_MAX
 1024

	)

656 
Node_off£t
 
	gdup_hash
[
DUP_HASH_MAX
];

658 
ªcovî_node
(
Node_off£t
 
node_off£t
)

660 
uöt64_t
 
	g¥efix64
=0;

661 
	g¥efix_Àn
=0;

662 
Node
 
	gnode_d©a_ãmp
[
PART_MAX
];

664 
Node
* 
	gnode_d©a
;

665 
Node_mëa
* 
	gnode_mëa
;

666 
Node_mëa
* 
	gmëa0
;

668 
	g√w_Àn
;

670 
	gnode_mëa
 = 
off£t_to_node
(
node_off£t
);

671 
	gnode_d©a
 = 
off£t_to_node_d©a
(
node_off£t
);

673 
	gmëa0
 = 
node_mëa
;

675 
	g√w_Àn
 = 
node_d©a
->
c⁄töue_Àn
;

677 i‡(
	g¥efix_Àn
 > 0)

678 
	g¥efix64
+=
¥e_LSB
[
¥efix_Àn
-1];

680 
	gi
;

681 
	gi
=
¥efix_Àn
;i<
	g√w_Àn
;i++)

684 
ö£π_ønge_íåy
((*)&
¥efix64
,
i
,
SPLIT_OFFSET
);

685 
	g¥efix64
 &~
¥e_LSB
[
i
];

688 
ö£π_ønge_íåy
((*)&
¥efix64
,
√w_Àn
,
node_off£t
);

689 
	g¥efix_Àn
 = 
√w_Àn
;

691 
	g∑π
=0;

692 
	gtc
 = 0;

693 
uöt64_t
 
	gãmp_key
[
PART_MAX
*100];

694 
VÆueE¡ry
 
	gvó
[
PART_MAX
*100];

695 
Node_off£t
 
	gãmp_off£t
[
PART_MAX
];

697 * 
	gbuf„r
;

699 
	gnode_mëa
->
	g∑π
 = 0;

700 
	gnode_mëa
->
	g°©e
 = 0;

701 
	gnode_mëa
->
	ggroup_size
 = 0;

702 
	gnode_mëa
->
	gövÆid©ed_size
 = 0;

703 
	gnode_mëa
->
	g°¨t_off£t
 = 
node_off£t
;

704 
	gnode_mëa
->
	gc⁄töue_Àn
 = 
¥efix_Àn
;

710 
	gãmp_off£t
[
∑π
] = 
node_off£t
;

712 
	gnode_mëa
 = 
off£t_to_node
(
node_off£t
);

713 
	gnode_d©a
 = 
off£t_to_node_d©a
(
node_off£t
);

715 
˝256
((*)&
node_d©a_ãmp
[
∑π
],(*)
node_d©a
,(
Node
));

719 
	gnode_mëa
->
	göv_kv
 = (
uöt16_t
*)
mÆloc
((uint16_t)*4);

720 
	gnode_mëa
->
	göv_max
 = 4;

721 
	gnode_mëa
->
	göv_˙t
 = 0;

724 
	gnode_mëa
->
	gsize
 = 0;

725 
	gnode_mëa
->
	g∑π
 = 
∑π
;

727 
	gnode_mëa
->
	g°¨t_off£t
 = 
ãmp_off£t
[0];

728 
	gnode_mëa
->
	g√xt_off£t_ig
 = 
INIT_OFFSET
;

730 
	gbuf„r
 = 
node_d©a_ãmp
[
∑π
].
buf„r
;

733 
uöt16_t
 
	gvl16
;

734 
	gvl16
 = *((
uöt16_t
*)
buf„r
);

735 i‡(
	gvl16
 == 0)

737 i‡(
	gvl16
 & 
	gINV_BIT
)

738 
	gvl16
-=
INV_BIT
;

741 
	gãmp_key
[
tc
] = *((
uöt64_t
*)(
buf„r
+
PH_LEN_SIZE
));

742 i‡(
	gdup_hash
[
ãmp_key
[
tc
]%
	gDUP_HASH_MAX
] =
ãmp_off£t
[0])

744 
i
=
tc
-1;
	gi
>=0;i--)

746 i‡(
	gãmp_key
[
i
] =
ãmp_key
[
tc
])

749 i‡(
	gi
 >= 0)

751 
övÆid©e_kv
(
vó
[
i
]);

752 
	gvó
[
i
].
	gkv_off£t
 = 0;

755 
	gdup_hash
[
ãmp_key
[
tc
]%
	gDUP_HASH_MAX
] = 
ãmp_off£t
[0];

756 
	gvó
[
tc
].
	gnode_off£t
 = 
ãmp_off£t
[
∑π
];

757 
	gvó
[
tc
].
	gkv_off£t
 = 
buf„r
-(*)&
node_d©a_ãmp
[
∑π
];

758 
	gvó
[
tc
].
	gÀn
 = 
vl16
;

759 
	gtc
++;

761 
	gbuf„r
+=
LK_SIZE
+
vl16
;

764 
	gnode_mëa
->
	gsize
 = 
buf„r
-
node_d©a_ãmp
[
∑π
].buffer;

765 
	gmëa0
->
	ggroup_size
+=
node_mëa
->
size
;

771 
	gnode_mëa
->
	g√xt_off£t_ig
 = 
node_d©a_ãmp
[
∑π
].
√xt_off£t_ig
;

772 
	gnode_off£t
 = 
node_d©a_ãmp
[
∑π
].
√xt_off£t_ig
;

773 i‡(
	gnode_off£t
 =
INIT_OFFSET
)

776 
	g∑π
++;

780 
	gi
=0;i<
	gtc
;i++)

782 i‡(
	gvó
[
i
].
	gkv_off£t
 > 0)

783 
ö£π_poöt_íåy
((*)&
ãmp_key
[
i
],
vó
[i]);

787 
	gi
=0;i<
	g∑π
;i++)

788 
off£t_to_node
(
ãmp_off£t
[
i
])->
	gíd_off£t
 =Åemp_off£t[
∑π
];

790 
Node_off£t_u
 
	gnu
;

791 
	gnu
.
	gno
 = 
node_d©a_ãmp
[0].
√xt_off£t
;

792 
	gmëa0
->
	g√xt_off£t
 = 
nu
.
no_32
;

797 
ªcovî
()

801 
	gi
,
	gj
;

802 
	g¥e_LSB
[63] = 1;

803 
	gi
=62;i>=0;i--)

804 
	g¥e_LSB
[
i
] = 
¥e_LSB
[i+1] << 1;

806 
	gi
=0;i<=
fûe_num
;i++)

808 
	gj
=0;j<
	gMAX_OFFSET
;j++)

809 
	gmëa_¨øy
[
i
][
j
].
	g∑π
 = 
PART_MAX
+1;

812 
Node_off£t_u
 
	gnode_off£t
;

813 
Node_off£t_u
 
	g¥ev_off£t
;

814 
Node
* 
	gnode_d©a
;

815 
Node_mëa
* 
	gnode_mëa
;

817 
	gnode_off£t
.
	gno
 = 
HEAD_OFFSET
;

818 
	gnode_mëa
 = 
off£t_to_node
(
node_off£t
.
no
);

819 
	gnode_d©a
 = 
off£t_to_node_d©a
(
node_off£t
.
no
);

822 
	gnode_mëa
->
	g°©e
 = 0;

823 
	gnode_mëa
->
	g∑π
 = 0;

824 
	gnode_mëa
->
	gsˇn_li°
 = 
NULL
;

825 
	gnode_mëa
->
	g¥ev_off£t
 = 0;

827 
	gnode_mëa
->
	g√xt_off£t_ig
 = 
INIT_OFFSET
;

829 
	g¥ev_off£t
 = 
node_off£t
;

830 
	gnode_off£t
.
	gno
 = 
node_d©a
->
√xt_off£t
;

831 
	gnode_mëa
->
	g√xt_off£t
 = 
node_off£t
.
no_32
;

839 
	gnode_mëa
 = 
off£t_to_node
(
node_off£t
.
no
);

840 
	gnode_mëa
->
	g¥ev_off£t
 = 
¥ev_off£t
.
no_32
;

842 i‡(
	gnode_off£t
.
	gno
 =
TAIL_OFFSET
)

847 
ªcovî_node
(
node_off£t
.
no
);

849 
	g¥ev_off£t
 = 
node_off£t
;

850 
	gnode_off£t
.
	gno_32
 = 
node_mëa
->
√xt_off£t
;

856 
	gnode_mëa
 = 
off£t_to_node
(
node_off£t
.
no
);

857 
	gnode_mëa
->
	g°©e
 = 0;

858 
	gnode_mëa
->
	g∑π
 = 0;

859 
	gnode_mëa
->
	gsˇn_li°
 = 
NULL
;

860 
	gnode_mëa
->
	g√xt_off£t
 = 0;

861 
	gnode_mëa
->
	g√xt_off£t_ig
 = 
INIT_OFFSET
;

864 
Node_off£t
 
	gno
;

865 
	g∑π
;

866 
	gi
=0;i<=
fûe_num
;i++)

868 
	gj
=0;j<
	gMAX_OFFSET
;j++)

870 i‡(
	gmëa_¨øy
[
i
][
j
].
	g∑π
 =
PART_MAX
+1)

872 
no
.
fûe
 = 
i
;

873 
	gno
.
	goff£t
 = 
j
;

875 
	g∑π
 = 
no
.
off£t
 % 
PM_N
;

877 i‡(
	g‰ì_ödex
[
∑π
] + 
	gFREE_QUEUE_LEN
 < 
	g‰ì_˙t
[part])

879 
¥ötf
("full!!\n");

880 
sˇnf
("%d",&
∑π
);

884 
	g‰ì_queue
[
∑π
][
‰ì_˙t
[∑π]%
	gFREE_QUEUE_LEN
] = 
no
;

885 ++
	g‰ì_˙t
[
∑π
];

894 
öô_d©a
()

896 i‡(
check_ªcovî
() >= 0)

899 
time•ec
 
°
,
ë
;

900 
uöt64_t
 
	gâ
;

902 
¥ötf
("startÑecover\n");

903 
˛ock_gëtime
(
CLOCK_MONOTONIC
,&
°
);

904 
ªcovî
();

905 
˛ock_gëtime
(
CLOCK_MONOTONIC
,&
ë
);

907 
	gâ
 = (
ë
.
tv_£c
-
°
.tv_£c)*1000000000+ë.
tv_n£c
-st.tv_nsec;

909 
¥ötf
("ídÑecovî %ld†%ldns\n",
â
/1000000000,tt%1000000000);

916 
¥ötf
("noÑecovery.Çew DB\n");

917 
	gfûe_num
 = -1;

919 
√w_fûe
();

921 
	gi
;

922 
	gi
=0;i<
	gPM_N
;i++)

923 
	g‰ì_˙t
[
i
] = 
‰ì_mö
[i] = 
‰ì_ödex
[i] = 0;

925 
uöt64_t
 
	gzîo
=0;

927 
Node_off£t_u
 
	ghód_off£t
;

928 
Node_off£t_u
 
	gèû_off£t
;

930 
Node_mëa
* 
	ghód_node
;

931 
Node_mëa
* 
	gèû_node
;

937 #i‡
PM_N
 > 1

938 
Æloc_node0
(0);

939 
Æloc_node0
(1);

940 
	ghód_off£t
.
	gno
 = 
Æloc_node0
(2);

941 
	gèû_off£t
.
	gno
 = 
Æloc_node0
(3);

943 
Æloc_node0
(0);

944 
Æloc_node0
(0);

945 
	ghód_off£t
.
	gno
 = 
Æloc_node0
(0);

946 
	gèû_off£t
.
	gno
 = 
Æloc_node0
(0);

950 
	ghód_node
 = 
off£t_to_node
(
hód_off£t
.
no
);

951 
	gèû_node
 = 
off£t_to_node
(
èû_off£t
.
no
);

954 
Node_off£t_u
 
	gnode_off£t
;

955 
	gnode_off£t
.
	gno
 = 
Æloc_node0
(0);

956 
Node_mëa
* 
	gnode
 = 
off£t_to_node
(
node_off£t
.
no
);

957 
	gnode
->
	g°©e
 = 0;

958 
	gnode
->
	gsize
 = 0;

959 
	gnode
->
	gövÆid©ed_size
 = 0;

960 
	gnode
->
	göv_˙t
 = 0;

961 #ifde‡
DOUBLE_LOG


962 
	gnode
->
	gÊush_size
 = 0;

963 
	gnode
->
	gÊush_˙t
 = 0;

965 
	gnode
->
	gc⁄töue_Àn
 = 0;

966 
	gnode
->
	gsˇn_li°
 = 
NULL
;

967 
	gnode
->
	g¥ev_off£t
 = 
hód_off£t
.
no_32
;

968 
	gnode
->
	g√xt_off£t
 = 
èû_off£t
.
no_32
;

969 
	gnode
->
	gíd_off£t
 = 
node_off£t
.
no
;

970 
	gnode
->
	g°¨t_off£t
 = 
node_off£t
.
no
;

971 
	gnode
->
	g∑π
 = 0;

972 
	gnode
->
	ggroup_size
 = 0;

973 
	gnode
->
	g√xt_off£t_ig
 = 
INIT_OFFSET
;

975 i‡(
	g¥öt
)

976 
¥ötf
("nodê0 %p\n",
node
);

979 
	ghód_node
->
	g√xt_off£t
 = 
node_off£t
.
no_32
;

980 
	ghód_node
->
	g¥ev_off£t
 = 0;

981 
	gèû_node
->
	g¥ev_off£t
 = 
node_off£t
.
no_32
;

982 
	gèû_node
->
	g√xt_off£t
 = 0;

983 
	ghód_node
->
	g°©e
 = 0;

984 
	ghód_node
->
	gsˇn_li°
 = 
NULL
;

985 
	ghód_node
->
	g∑π
 = 0;

986 
	gèû_node
->
	g°©e
 = 0;

987 
	gèû_node
->
	gsˇn_li°
 = 
NULL
;

988 
	gèû_node
->
	g∑π
 = 0;

989 
	ghód_node
->
	g√xt_off£t_ig
 = 
INIT_OFFSET
;

990 
	gèû_node
->
	g√xt_off£t_ig
 = 
INIT_OFFSET
;

993 
Êush_mëa
(
hód_off£t
.
no
);

994 
Êush_mëa
(
èû_off£t
.
no
);

996 
_mm_s„n˚
();

1001 
ö£π_ønge_íåy
((*)(&
zîo
),0,
node_off£t
.
no
);

1007 i‡(
	gUSE_DRAM
)

1008 
¥ötf
("USE_DRAM\n");

1010 
¥ötf
("USE_PM\n");

1011 
¥ötf
("sizêo‡nodê%ld\n",(
Node
));

1012 
¥ötf
("sizêo‡node_më®%ld\n",(
Node_mëa
));

1014 
	gâ1
 = 0;

1015 
	gâ2
 = 0;

1016 
	gâ3
 = 0;

1017 
	gâ4
 = 
â5
 = 0;

1019 
	gqâ1
 = 
qâ2
 = 
qâ3
 = 
qâ4
 = 
qâ5
 = 
qâ6
 = 
qâ7
 = 
qâ8
 = 0;

1022 
öô_d©a_loˇl
()

1024 
	gi
;

1025 
	gi
=0;i<
	gPM_N
;i++)

1027 
	glbac
[
i
] = 
LOCAL_QUEUE_LEN
;

1028 
	glbfc
[
i
] = 0;

1031 
posix_memÆign
((**)&
d0
,(
Node
),(Node)*
PART_MAX
);

1032 
posix_memÆign
((**)&
d1
,(
Node
),(Node)*
PART_MAX
);

1033 
posix_memÆign
((**)&
d2
,(
Node
),(Node)*
PART_MAX
);

1036 
˛ón_node
(
Node_off£t
 
off£t
)

1038 
Node_mëa
* 
	gnode
 = 
off£t_to_node
(
off£t
);

1039 
‰ì
(
node
->
öv_kv
);

1040 #ifde‡
DOUBLE_LOG


1041 
‰ì
(
node
->
Êush_kv
);

1044 
˛ón_öv
()

1073 
˛ón_d©a
()

1075 
¥ötf
("clean data\n");

1082 
˛ón_öv
();

1085 
	gi
;

1086 i‡(
	gUSE_DRAM
)

1088 
	gi
=0;i<
	gfûe_num
;i++)

1089 
munm≠
(
pmem_addr
[
i
],
FILE_SIZE
);

1093 
	gi
=0;i<
	gfûe_num
;i++)

1094 
pmem_unm≠
(
pmem_addr
[
i
],
FILE_SIZE
);

1096 
	gi
=9;i<
	gfûe_num
;i++)

1097 
munm≠
(
mëa_addr
[
i
],
META_SIZE
);

1099 
‰ì
(
pmem_addr
);

1100 
‰ì
(
mëa_addr
);

1101 
‰ì
(
node_d©a_¨øy
);

1102 
‰ì
(
mëa_¨øy
);

1107 #ifde‡
dâ


1108 
¥ötf
("data\n");

1109 
¥ötf
("ö£π %ld %ld\n",
â1
/1000000000,tt1%1000000000);

1110 
¥ötf
("•lô %ld %ld\n",
â2
/1000000000,tt2%1000000000);

1111 
¥ötf
("com∑˘ %ld %ld\n",
â3
/1000000000,tt3%1000000000);

1112 
¥ötf
("check_sizê%ld %ld\n",
â4
/1000000000,tt4%1000000000);

1113 
¥ötf
("Ælo¯nodê%ld %ld\n",
â5
/1000000000,tt5%1000000000);

1117 
¥ötf
("më®%lfGB\n",(
fûe_num
*
MAX_OFFSET
*(
Node_mëa
))/1024/1024/1024);

1118 
¥ötf
("tŸÆ %lfGB fûê˙à%d fûêsizê%ld\n",
fûe_num
,
FILE_SIZE
,(file_num*FILE_SIZE)/1024/1024/1024);

1122 #ifde‡
qâ


1124 
¥ötf
("query\n");

1125 
¥ötf
("ö£π quîy %ld %ld\n",
qâ1
/1000000000,qtt1%1000000000);

1126 
¥ötf
("ö£π index %ld %ld\n",
qâ2
/1000000000,qtt2%1000000000);

1127 
¥ötf
("ö£π d©®%ld %ld\n",
qâ3
/1000000000,qtt3%1000000000);

1128 
¥ötf
("ö£π kv %ld %ld\n",
qâ4
/1000000000,qtt4%1000000000);

1129 
¥ötf
("•lô kv %ld %ld\n",
qâ5
/1000000000,qtt5%1000000000);

1130 
¥ötf
("\n");

1131 
¥ötf
("looku∞quîy %ld %ld\n",
qâ8
/1000000000,qtt8%1000000000);

1132 
¥ötf
("looku∞ödex %ld %ld\n",
qâ6
/1000000000,qtt6%1000000000);

1133 
¥ötf
("looku∞d©®%ld %ld\n",
qâ7
/1000000000,qtt7%1000000000);

1140 
ölöe
 
öc_ªf
(
Node_off£t
 
off£t
)

1142  
åy_©_lock
(
off£t_to_node
(
off£t
)->
°©e
);

1144 
ölöe
 
dec_ªf
(
Node_off£t
 
off£t
)

1147 
©_u∆ock
(
off£t_to_node
(
off£t
)->
°©e
);

1152 
¥öt_kv
(* 
kv_p
)

1154 
	gi
,
	gvÆue_Àn
;

1155 * 
	gv_p
;

1156 
¥ötf
("key ");

1157 
	gi
=0;i<8;i++)

1158 
¥ötf
("[%d]",()(
kv_p
[
i
]));

1159 
	gvÆue_Àn
 = *((
uöt16_t
*)(
kv_p
+
key_size
));

1160 i‡(
	gvÆue_Àn
 & (1 << 15))

1162 
¥ötf
(" invalidated\n");

1165 
¥ötf
(" vÆuêÀ¿%d ",
vÆue_Àn
);

1166 
	gv_p
 = 
kv_p
 + 
key_size
 + 
Àn_size
;

1167 
	gi
=0;i<
	gvÆue_Àn
;i++)

1168 
¥ötf
("[%d]",()(
v_p
[
i
]));

1169 
¥ötf
("\n");

1173 
¥öt_node
(
Node
* 
node
)

1175 
	gcur
=0,
	gvÆue_Àn
;

1176 
¥ötf
("nodêsizê%d\n",
node
->
size
);

1177 
	gcur
 < 
	gnode
->
	gsize
)

1179 
¥öt_kv
(&
node
->
buf„r
[
cur
]);

1180 
	gvÆue_Àn
 = *((
uöt16_t
*)(
node
->
buf„r
+
cur
+
key_size
));

1181 i‡((
	gvÆue_Àn
 & (1 <<15)) != 0)

1182 
vÆue_Àn
-= (1<<15);

1183 
	gcur
+=
vÆue_Àn
+
key_size
+
Àn_size
;

1196 
dñëe_kv
(* 
kv_p
)

1198 i‡(
	gUSE_DRAM
)

1199 *((
	guöt16_t
*)(
	gkv_p
 ))|
INV_BIT
;

1202 
uöt16_t
 
	gvl16
;

1203 
	gvl16
 = *((
uöt16_t
*)(
kv_p
 )Ë| 
INV_BIT
;

1204 
pmem_mem˝y
(
kv_p
 ,&
vl16
,(
uöt16_t
),
PMEM_F_MEM_NONTEMPORAL
);

1205 
_mm_s„n˚
();

1211 
Node_off£t
 
≠≥nd_node
(Node_off£t& 
°¨t_off£t
)

1214 
Node_mëa
* 
	g°¨t_mëa
 = 
off£t_to_node
(
°¨t_off£t
);

1215 
Node_mëa
* 
	gmëa
 = 
off£t_to_node
(
°¨t_mëa
->
íd_off£t
);

1216 
Node_off£t
 
	gíd_off£t
;

1217 
Node_mëa
* 
	gíd_mëa
;

1218 
Node
* 
	gíd_d©a
;

1224 
	gíd_off£t
 = 
Æloc_node
();

1225 
	gíd_mëa
 = 
off£t_to_node
(
íd_off£t
);

1226 
	gíd_d©a
 = 
off£t_to_node_d©a
(
íd_off£t
);

1230 
	gíd_mëa
->
	g√xt_off£t_ig
 = 
INIT_OFFSET
;

1232 
	gíd_mëa
->
	g∑π
 = 
mëa
->
∑π
+1;

1233 
	gíd_mëa
->
	gsize
 = 0;

1234 
	gíd_mëa
->
	göv_˙t
 = 0;

1235 #ifde‡
DOUBLE_LOG


1236 
	gíd_mëa
->
	gÊush_size
 = 0;

1237 
	gíd_mëa
->
	gÊush_˙t
 = 0;

1239 
	gíd_mëa
->
	g°¨t_off£t
 = 
°¨t_off£t
;

1242 
	gíd_mëa
->
	gíd_off£t
 = 
íd_off£t
;

1250 
	gíd_d©a
->
	g√xt_off£t
 = 
íd_d©a
->
√xt_off£t_ig
 = 
INIT_OFFSET
;

1252 
	gíd_d©a
->
	gbuf„r
[0] = 
íd_d©a
->
buf„r
[1] = 0;

1253 
pmem_≥rsi°
((*)
íd_d©a
,(
uöt16_t
)+(uöt16_t)+(
uöt32_t
)+
Àn_size
);

1254 
_mm_s„n˚
();

1256 
	gmëa
->
	g√xt_off£t_ig
 = 
íd_off£t
;

1257 
pmem_mem˝y
((*)
off£t_to_node_d©a
(
°¨t_mëa
->
íd_off£t
Ë+ (),(
uöt32_t
*)&íd_off£t,(),
PMEM_F_MEM_NONTEMPORAL
);

1258 
	g°¨t_mëa
->
	gíd_off£t
 = 
íd_off£t
;

1259 
_mm_s„n˚
();

1261  
	gíd_off£t
;

1265 * 
ö£π_kv
(
Node_off£t
& 
off£t
,* 
key
,* 
vÆue
,
vÆue_Àn
 )

1267 #ifde‡
dâ


1268 
time•ec
 
	gts1
,
	gts2
;

1269 
˛ock_gëtime
(
CLOCK_MONOTONIC
,&
ts1
);

1270 
_mm_m„n˚
();

1278 
Node_mëa
* 
	gmëa
 = 
off£t_to_node
(
off£t
);

1279 
Node_off£t
 
	gíd_off£t
 = 
mëa
->
íd_off£t
;

1280 
Node_mëa
* 
	gíd_mëa
 = 
off£t_to_node
(
íd_off£t
);

1282 
Node_off£t
 
	gmid_off£t
;

1283 
Node_mëa
* 
	gmid_mëa
 = 
NULL
;

1285 
	gíåy_size
 = 
LK_SIZE
 + 
vÆue_Àn
;

1287 i‡(
	gíåy_size
 % 2)

1288 ++
	gíåy_size
;

1290 i‡(
	gíd_mëa
->
	gsize
 + 
	gíåy_size
 +
	gPH_LEN_SIZE
 > 
	gNODE_BUFFER
)

1292 i‡(
	gíd_mëa
->
	g∑π
 =
PART_MAX
-1)

1293  
NULL
;

1299 
	gmid_off£t
 = 
íd_off£t
;

1300 
	gmid_mëa
 = 
íd_mëa
;

1301 #ifde‡
SMALL_NODE


1302 
	g∑π
 = 
íd_off£t
.
off£t
%(
PAGE_SIZE
/(
Node
))/(PAGE_SIZE/
PM_N
/(Node));

1304 
	g∑π
 = 
íd_off£t
.
off£t
 % 
PM_N
;

1307 
	gíd_off£t
 = 
mëa
->
íd_off£t
 = 
Æloc_node
((
∑π
+1)%
PM_N
);

1308 
	gíd_mëa
 = 
off£t_to_node
(
íd_off£t
);

1311 
	gíd_mëa
->
	g∑π
 = 
mid_mëa
->
∑π
+1;

1312 
	gíd_mëa
->
	gsize
 = 0;

1313 
	gíd_mëa
->
	göv_˙t
 = 0;

1314 #ifde‡
DOUBLE_LOG


1315 
	gíd_mëa
->
	gÊush_size
 = 0;

1316 
	gíd_mëa
->
	gÊush_˙t
 = 0;

1318 
	gíd_mëa
->
	g°¨t_off£t
 = 
off£t
;

1319 
	gíd_mëa
->
	g√xt_off£t_ig
 = 
INIT_OFFSET
;

1323 
	gmëa
->
	gíd_off£t
 = 
íd_off£t
;

1330 c⁄° 
uöt16_t
 
	gvl16
 = 
vÆue_Àn
;

1335 * 
	gbuf„r
 = 
off£t_to_node_d©a
(
íd_off£t
)->
buf„r
;

1336 
	gﬁd_size
 = 
íd_mëa
->
size
;

1338 
	gíd_mëa
->
	gsize
+=
íåy_size
;

1339 
	gmëa
->
	ggroup_size
+=
íåy_size
;

1341 c⁄° 
uöt16_t
 
	gz
 = 0;

1342 i‡(!
	gUSE_DRAM
)

1344 i‡(
	gmid_mëa
)

1346 
Node
* 
	gnode_d©a
 = 
off£t_to_node_d©a
(
íd_off£t
);

1351 
	gnode_d©a
->
	g√xt_off£t
 = 
node_d©a
->
√xt_off£t_ig
 = 
INIT_OFFSET
;

1354 
mem˝y
(
buf„r
+
ﬁd_size
,&
vl16
,
PH_LEN_SIZE
 );

1355 
mem˝y
(
buf„r
+
ﬁd_size
+
PH_LEN_SIZE
 ,
key
,
PH_KEY_SIZE
 );

1356 
mem˝y
(
buf„r
+
ﬁd_size
+
LK_SIZE
 ,
vÆue
,
vÆue_Àn
);

1357 
mem˝y
(
buf„r
+
ﬁd_size
+
íåy_size
,&
z
,
PH_LEN_SIZE
);

1358 
pmem_≥rsi°
(
node_d©a
,(
uöt32_t
)*3+
íåy_size
+
PH_LEN_SIZE
);

1359 
_mm_s„n˚
();

1372 
mem˝y
(
buf„r
+
ﬁd_size
+
PH_LEN_SIZE
 ,
key
,
PH_KEY_SIZE
);

1374 
mem˝y
(
buf„r
+
ﬁd_size
+
LK_SIZE
 ,
vÆue
,
vÆue_Àn
);

1375 
mem˝y
(
buf„r
+
ﬁd_size
+
íåy_size
,&
z
,
PH_LEN_SIZE
);

1377 
pmem_≥rsi°
(
buf„r
+
ﬁd_size
+
PH_LEN_SIZE
 ,
íåy_size
);

1383 
_mm_s„n˚
();

1385 
pmem_mem˝y
(
buf„r
+
ﬁd_size
,&
vl16
,
PH_LEN_SIZE
 ,
PMEM_F_MEM_NONTEMPORAL
);

1389 
_mm_s„n˚
();

1395 
mem˝y
(
buf„r
+
ﬁd_size
+
PH_LEN_SIZE
 ,
key
,
PH_KEY_SIZE
);

1396 
mem˝y
(
buf„r
+
ﬁd_size
+
LK_SIZE
 ,
vÆue
,
vÆue_Àn
);

1397 
mem˝y
(
buf„r
+
ﬁd_size
,&
vl16
,
PH_LEN_SIZE
);

1409 #ifde‡
dâ


1410 
_mm_m„n˚
();

1411 
˛ock_gëtime
(
CLOCK_MONOTONIC
,&
ts2
);

1412 
	gâ1
+(
ts2
.
tv_£c
-
ts1
.tv_£c)*1000000000+ts2.
tv_n£c
-ts1.tv_nsec;

1416 i‡(
	gmid_mëa
)

1423 
	gmid_mëa
->
	g√xt_off£t_ig
 = 
íd_off£t
;

1424 
pmem_mem˝y
((*)
off£t_to_node_d©a
(
mid_off£t
Ë+ (),(
uöt32_t
*)&
íd_off£t
,(),
PMEM_F_MEM_NONTEMPORAL
);

1425 
_mm_s„n˚
();

1427  
	gbuf„r
+
	gﬁd_size
;

1432 
move_sˇn_li°
(
Node_off£t
 &
ﬁd_off£t
,Node_off£à&
√w_off£t
)

1434 
Node_mëa
* 
	gnode_ﬁd
 = 
off£t_to_node
(
ﬁd_off£t
);

1435 
Node_mëa
* 
	gnode_√w
 = 
off£t_to_node
(
√w_off£t
);

1436 i‡(
	gnode_ﬁd
->
	gsˇn_li°
 =
NULL
)

1438 
node_√w
->
sˇn_li°
 = 
NULL
;

1441 
Sˇn_li°
* 
	g¶
;

1442 
Sˇn_li°
** 
	g¶p
;

1444 
Quîy
* 
	gquîy
;

1447 
	g¶
 = 
node_ﬁd
->
sˇn_li°
;

1448 
	g¶p
 = &(
node_ﬁd
->
sˇn_li°
);

1449 
Node_off£t_u
 
	goou
,
	gnou
;

1450 
	goou
.
	gno
 = 
ﬁd_off£t
;

1451 
	gnou
.
	gno
 = 
√w_off£t
;

1452 
	g¶
)

1454 
	gquîy
 = (
Quîy
*)(
¶
->
quîy
);

1457 i‡(
	gquîy
->
	gsˇn_off£t
 =
oou
.
no_32
)

1459 
quîy
->
sˇn_off£t
 = 
nou
.
no_32
;

1462 
	g¶p
 = &(
¶
->
√xt
);

1463 
	g¶
 = 
¶
->
√xt
;

1469 
¥ötf
("abandoned scanÉntry??\n");

1470 *
	g¶p
 = 
¶
->
√xt
;

1471 
‰ì
(
¶
);

1472 
	g¶
 = *
¶p
;

1475 
	gnode_√w
->
	gsˇn_li°
 = 
node_ﬁd
->
sˇn_li°
;

1497 
s‹t_öv
(
˙t
,
uöt16_t
* 
¨øy
)

1499 
	gi
,
	gj
;

1500 
uöt16_t
 
	gãmp
;

1501 
	gi
=0;i<
	g˙t
;i++)

1503 
	gãmp
 = 0;

1504 
	gj
=0;j<
	g˙t
-
	gi
-1;j++)

1506 i‡(
	g¨øy
[
j
] >árray[j+1])

1508 
	gãmp
 = 
¨øy
[
j
+1];

1509 
	g¨øy
[
j
+1] = 
¨øy
[j];

1510 
	g¨øy
[
j
] = 
ãmp
;

1513 i‡(
	gãmp
 == 0)

1520 
lock_check
(
Node_off£t
 
off£t
)

1522 
Node_mëa
* 
	g¥ev_node
;

1523 
Node_mëa
* 
	g√xt_node
;

1524 
Node_mëa
* 
	gnode
;

1526 
	gnode
 = 
off£t_to_node
(
off£t
);

1528 
Node_off£t_u
 
	g¥ev_off£t
,
	g√xt_off£t
;

1529 
	g¥ev_off£t
.
	gno_32
 = 
node
->
¥ev_off£t
;

1530 
	g¥ev_node
 = 
off£t_to_node
(
¥ev_off£t
.
no
);

1534 i‡(
	g¥ev_node
->
	g°©e
 == 1)

1541 
	g√xt_off£t
.
	gno_32
 = 
node
->
√xt_off£t
;

1542 
	g√xt_node
 = 
off£t_to_node
(
√xt_off£t
.
no
);

1543 i‡(
	g√xt_node
->
	g°©e
 == 1)

1561 
•lô2
(
Node_off£t
 
off£t
)

1575 
Node_off£t
 
	gnode_off£t
;

1576 
Node_mëa
* 
	gnode_mëa
;

1577 
Node
* 
	gnode_d©a
;

1580 c⁄° 
	gmëa_size
 = 
d0
[0].
buf„r
-(*)&d0[0];

1581 
	g∑π0
,
	g∑π1
,
	g∑π2
;

1583 
	g∑π0
 = 0;

1586 
	gnode_off£t
 = 
off£t
;

1589 
	gnode_mëa
 = 
off£t_to_node
(
node_off£t
);

1590 
	gnode_d©a
 = 
off£t_to_node_d©a
(
node_off£t
);

1592 
˝256
((*)&
d0
[
∑π0
],(*)
node_d©a
,
node_mëa
->
size
 + 
mëa_size
);

1593 
	g∑π0
++;

1595 
	gnode_off£t
 = 
node_mëa
->
√xt_off£t_ig
;

1596 i‡(
	gnode_off£t
 =
INIT_OFFSET
)

1608 
	gi
;

1609 
uöt16_t
 
	gsize
;

1611 
	gtc
;

1612 
uöt64_t
 
	gãmp_key
[100*
PART_MAX
];

1613 
VÆueE¡ry
 
	gvó
[100*
PART_MAX
];

1614 
Node_off£t
 
	gãmp_off£t
[
PART_MAX
];

1615 
	goc
;

1617 
	gc⁄töue_Àn
 = 
off£t_to_node
(
off£t
)->
c⁄töue_Àn
;

1618 
uöt64_t
 
	g¥efix_64
;

1619 
uöt64_t
 
	gm
;

1620 
	g¥efix_64
 = *((
uöt64_t
*)(
d0
[0].
buf„r
+
PH_LEN_SIZE
));

1622 
	gm
 = ~(((
uöt64_t
)1 << (63-
c⁄töue_Àn
))-1);

1623 
	g¥efix_64
 = (
¥efix_64
 & 
m
Ë| ((
uöt64_t
)1 << (63-
c⁄töue_Àn
));

1625 
	g∑π1
 = 0;

1626 
	g∑π2
 = 0;

1629 
Node_mëa
* 
	g√w_node1
;

1630 
Node_mëa
* 
	g√w_node2
;

1631 
Node_mëa
* 
	g¥ev_node
;

1632 
Node_mëa
* 
	g√xt_node
;

1638 
Node_off£t_u
 
	g¥ev_off£t
,
	g√xt_off£t
;

1640 
	gnode_mëa
 = 
off£t_to_node
(
off£t
);

1641 
	gnode_d©a
 = 
off£t_to_node_d©a
(
off£t
);

1643 
	g¥ev_off£t
.
	gno_32
 = 
node_mëa
->
¥ev_off£t
;

1644 
	g√xt_off£t
.
	gno_32
 = 
node_mëa
->
√xt_off£t
;

1645 
	g√xt_node
 = 
off£t_to_node
(
√xt_off£t
.
no
);

1646 
	g¥ev_node
 = 
off£t_to_node
(
¥ev_off£t
.
no
);

1648 
Node_off£t_u
 
	g√w_node1_off£t
;

1649 
Node_off£t_u
 
	g√w_node2_off£t
;

1651 
	grŸ©i⁄1
,
	grŸ©i⁄2
;

1652 
	g√w_node1_off£t
.
	gno
 = 
Æloc_node
(
∑π_rŸ©i⁄
);

1653 
	g∑π_rŸ©i⁄
 = (
∑π_rŸ©i⁄
+1)%
PM_N
;

1654 
	grŸ©i⁄1
 = 
∑π_rŸ©i⁄
;

1656 
	g√w_node2_off£t
.
	gno
 = 
Æloc_node
(
∑π_rŸ©i⁄
);

1657 
	g∑π_rŸ©i⁄
 = (
∑π_rŸ©i⁄
+1)%
PM_N
;

1658 
	grŸ©i⁄2
 = 
∑π_rŸ©i⁄
;

1660 
	g√w_node1
 = 
off£t_to_node
(
√w_node1_off£t
.
no
);

1661 
	g√w_node2
 = 
off£t_to_node
(
√w_node2_off£t
.
no
);

1663 
	g√w_node1
->
	g∑π
 = 0;

1664 
	g√w_node2
->
	g∑π
 = 0;

1666 
	g√w_node1
->
	g°©e
 = 1;

1667 
	g√w_node2
->
	g°©e
 = 1;

1671 
	g√w_node1
->
	göv_˙t
 = 
√w_node2
->
öv_˙t
 = 0;

1672 
	g√w_node1
->
	ggroup_size
 = 
√w_node2
->
group_size
 = 0;

1673 
	g√w_node1
->
	gövÆid©ed_size
 = 
√w_node2
->
övÆid©ed_size
 = 0;

1675 
	g√w_node1
->
	g°¨t_off£t
 = 
√w_node1_off£t
.
no
;

1676 
	g√w_node2
->
	g°¨t_off£t
 = 
√w_node2_off£t
.
no
;

1678 
	g√w_node1
->
	gc⁄töue_Àn
 = 
√w_node2
->
c⁄töue_Àn
 = continue_len+1;

1681 
	g√w_node2
->
	g√xt_off£t
 = 
√xt_off£t
.
no_32
;

1682 
	g√w_node2
->
	g¥ev_off£t
 = 
√w_node1_off£t
.
no_32
;

1684 
	g√w_node1
->
	g√xt_off£t
 = 
√w_node2_off£t
.
no_32
;

1685 
	g√w_node1
->
	g¥ev_off£t
 = 
¥ev_off£t
.
no_32
;

1692 
	gd1
[0].
	g√xt_off£t
 = 
√w_node2_off£t
.
no
;

1693 
	gd2
[0].
	g√xt_off£t
 = 
√xt_off£t
.
no
;

1694 
	gd1
[0].
	gc⁄töue_Àn
 = 
d2
[0].
c⁄töue_Àn
 = continue_len+1;

1704 
uöt16_t
 
	gvl16
;

1706 
uöt16_t
 
	gkvs
;

1708 * 
	gbuf„r
;

1709 * 
	gbuf„r1
;

1710 * 
	gbuf„r2
;

1713 
	gbuf„r1
 = 
d1
[0].
buf„r
;

1714 
	gbuf„r2
 = 
d2
[0].
buf„r
;

1716 
	gtc
 = 0;

1718 
	gj
;

1727 
Node_mëa
* 
	gcuºít_node0_mëa
;

1728 
Node_mëa
* 
	gcuºít_node1_mëa
 = 
√w_node1
;

1729 
Node_mëa
* 
	gcuºít_node2_mëa
 = 
√w_node2
;

1730 
Node_off£t
 
	gcuºít_node0_off£t
 = 
off£t
;

1731 
Node_off£t
 
	gcuºít_node1_off£t
 = 
√w_node1_off£t
.
no
;

1732 
Node_off£t
 
	gcuºít_node2_off£t
 = 
√w_node2_off£t
.
no
;

1733 * 
	gbuf„r_íd
;

1734 * 
	gbuf„r1_íd
 = 
buf„r1
+
NODE_BUFFER
;

1735 * 
	gbuf„r2_íd
 = 
buf„r2
+
NODE_BUFFER
;

1737 * 
	gkvp
;

1738 
	goc
 = 0;

1739 
	gi
=0;

1742 
	gcuºít_node0_mëa
 = 
off£t_to_node
(
cuºít_node0_off£t
);

1754 
	gbuf„r
 = 
d0
[
i
].
buf„r
;

1759 
	gbuf„r_íd
 = 
buf„r
 + 
cuºít_node0_mëa
->
size
;

1760 
s‹t_öv
(
cuºít_node0_mëa
->
öv_˙t
,cuºít_node0_mëa->
öv_kv
);

1761 
	gj
 = 0;

1762 
	gcuºít_node0_mëa
->
	göv_kv
[
cuºít_node0_mëa
->
öv_˙t
] = 0;

1765 
	gãmp_off£t
[
oc
++] = 
cuºít_node0_off£t
;

1768 
	gbuf„r
 < 
	gbuf„r_íd
)

1773 
	gvl16
 = *((
uöt16_t
*)(
buf„r
 ));

1775 
	gkvs
 = 
LK_SIZE
 + 
vl16
;

1777 i‡(
	gkvs
 % 2)

1778 
	gkvs
++;

1781 i‡(((*)&
	gd0
[
i
] + 
	gcuºít_node0_mëa
->
	göv_kv
[
j
] =
buf„r
) )

1786 
j
++;

1787 
	gkvs
 &~(
INV_BIT
);

1791 
	gãmp_key
[
tc
] = *((
uöt64_t
*)(
buf„r
+
PH_LEN_SIZE
));

1795 i‡(
	gãmp_key
[
tc
] < 
	g¥efix_64
)

1799 i‡(
	gbuf„r1
+
	gkvs
+
	gPH_LEN_SIZE
 > 
	gbuf„r1_íd
)

1802 
	gbuf„r1
[0] = 
buf„r1
[1] = 0;

1804 
	gcuºít_node1_mëa
->
	gsize
 = 
buf„r1
-
d1
[
∑π1
].
buf„r
;

1809 
	g√w_node1
->
	ggroup_size
+=
cuºít_node1_mëa
->
size
;

1812 
Node_off£t
 
	gãmp_off£t
;

1814 
	gãmp_off£t
 = 
Æloc_node
(
rŸ©i⁄1
);

1815 
	grŸ©i⁄1
 = (
rŸ©i⁄1
+1)%
PM_N
;

1816 
Node_mëa
* 
	gãmp_mëa
 = 
off£t_to_node
(
ãmp_off£t
);

1818 
	gd1
[
∑π1
].
	g√xt_off£t_ig
 = 
ãmp_off£t
;

1825 
	gcuºít_node1_mëa
->
	g√xt_off£t_ig
 = 
ãmp_off£t
;

1830 
	gãmp_mëa
->
	g∑π
 = 
cuºít_node1_mëa
->
∑π
+1;

1833 
	gãmp_mëa
->
	g°¨t_off£t
 = 
√w_node1_off£t
.
no
;

1834 
	gãmp_mëa
->
	göv_˙t
=0;

1836 
	gcuºít_node1_off£t
 = 
ãmp_off£t
;

1837 
	gcuºít_node1_mëa
 = 
ãmp_mëa
;

1840 
	g∑π1
++;

1841 
	gbuf„r1
 = 
d1
[
∑π1
].
buf„r
;

1845 
	gbuf„r1_íd
 = 
buf„r1
+
NODE_BUFFER
;

1853 
mem˝y
(
buf„r1
,
buf„r
,
kvs
);

1863 
	gvó
[
tc
].
	gnode_off£t
 = 
cuºít_node1_off£t
;

1865 
	gvó
[
tc
].
	gkv_off£t
 = 
buf„r1
-(*)&
d1
[
∑π1
];

1870 
	gbuf„r1
+=
kvs
;

1874 i‡(
	gbuf„r2
+
	gkvs
+
	gPH_LEN_SIZE
 > 
	gbuf„r2_íd
)

1876 
	gbuf„r2
[0] = 
buf„r2
[1] = 0;

1878 
	gcuºít_node2_mëa
->
	gsize
 = 
buf„r2
-
d2
[
∑π2
].
buf„r
;

1883 
	g√w_node2
->
	ggroup_size
+=
cuºít_node2_mëa
->
size
;

1886 
Node_off£t
 
	gãmp_off£t
;

1888 
	gãmp_off£t
 = 
Æloc_node
(
rŸ©i⁄2
);

1889 
	grŸ©i⁄2
 = (
rŸ©i⁄2
+1)%
PM_N
;

1891 
Node_mëa
* 
	gãmp_mëa
 = 
off£t_to_node
(
ãmp_off£t
);

1893 
	gd2
[
∑π2
].
	g√xt_off£t_ig
 = 
ãmp_off£t
;

1900 
	gcuºít_node2_mëa
->
	g√xt_off£t_ig
 = 
ãmp_off£t
;

1905 
	gãmp_mëa
->
	g∑π
 = 
cuºít_node2_mëa
->
∑π
+1;

1908 
	gãmp_mëa
->
	g°¨t_off£t
 = 
√w_node2_off£t
.
no
;

1909 
	gãmp_mëa
->
	göv_˙t
 = 0;

1911 
	gcuºít_node2_off£t
 = 
ãmp_off£t
;

1912 
	gcuºít_node2_mëa
 = 
ãmp_mëa
;

1915 
	g∑π2
++;

1916 
	gbuf„r2
 = 
d2
[
∑π2
].
buf„r
;

1920 
	gbuf„r2_íd
 = 
buf„r2
+
NODE_BUFFER
;

1927 
mem˝y
(
buf„r2
,
buf„r
,
kvs
);

1936 
	gvó
[
tc
].
	gnode_off£t
 = 
cuºít_node2_off£t
;

1938 
	gvó
[
tc
].
	gkv_off£t
 = 
buf„r2
-(*)&
d2
[
∑π2
];

1943 
	gbuf„r2
+=
kvs
;

1945 
	gvó
[
tc
].
	gÀn
 = 
vl16
;

1946 
	gtc
++;

1948 
	gbuf„r
+=
kvs
;

1951 
	gcuºít_node0_off£t
 = 
cuºít_node0_mëa
->
√xt_off£t_ig
;

1952 i‡(
	gcuºít_node0_off£t
 =
INIT_OFFSET
)

1954 
	gi
++;

1957 
	gbuf„r1
[0] = 
buf„r1
[1] = 0;

1958 
	gbuf„r2
[0] = 
buf„r2
[1] = 0;

1967 
	g√w_node1
->
	gíd_off£t
 = 
cuºít_node1_off£t
;

1972 
	gd1
[
∑π1
].
	g√xt_off£t_ig
 = 
INIT_OFFSET
;

1973 
	gcuºít_node1_mëa
->
	g√xt_off£t_ig
 = 
INIT_OFFSET
;

1976 
	gcuºít_node1_mëa
->
	gsize
 = 
buf„r1
-
d1
[
∑π1
].
buf„r
;

1982 
	g√w_node1
->
	ggroup_size
+=
cuºít_node1_mëa
->
size
;

1989 
	g√w_node2
->
	gíd_off£t
 = 
cuºít_node2_off£t
;

1993 
	gd2
[
∑π2
].
	g√xt_off£t_ig
 = 
INIT_OFFSET
;

1994 
	gcuºít_node2_mëa
->
	g√xt_off£t_ig
 = 
INIT_OFFSET
;

1997 
	gcuºít_node2_mëa
->
	gsize
 = 
buf„r2
-
d2
[
∑π2
].
buf„r
;

2004 
	g√w_node2
->
	ggroup_size
+=
cuºít_node2_mëa
->
size
;

2010 
	gnode_off£t
 = 
√w_node1_off£t
.
no
;

2011 
	gi
 = 0;

2014 
	gnode_mëa
 = 
off£t_to_node
(
node_off£t
);

2015 
	gnode_d©a
 = 
off£t_to_node_d©a
(
node_off£t
);

2017 
¡256
((*)
node_d©a
,(*)&
d1
[
i
],
node_mëa
->
size
 + 
mëa_size
 + 
PH_LEN_SIZE
 );

2018 
	gi
++;

2020 
	gnode_off£t
 = 
node_mëa
->
√xt_off£t_ig
;

2021 i‡(
	gnode_off£t
 =
INIT_OFFSET
)

2025 
	gnode_off£t
 = 
√w_node2_off£t
.
no
;

2026 
	gi
 = 0;

2029 
	gnode_mëa
 = 
off£t_to_node
(
node_off£t
);

2030 
	gnode_d©a
 = 
off£t_to_node_d©a
(
node_off£t
);

2032 
¡256
((*)
node_d©a
,(*)&
d2
[
i
],
node_mëa
->
size
 + 
mëa_size
 + 
PH_LEN_SIZE
 );

2033 
	gi
++;

2035 
	gnode_off£t
 = 
node_mëa
->
√xt_off£t_ig
;

2036 i‡(
	gnode_off£t
 =
INIT_OFFSET
)

2041 
_mm_s„n˚
();

2043 
	g√xt_node
->
	g¥ev_off£t
 = 
√w_node2_off£t
.
no_32
;

2044 
	g¥ev_node
->
	g√xt_off£t
 = 
√w_node1_off£t
.
no_32
;

2047 
pmem_mem˝y
((
Node
*)
off£t_to_node_d©a
(
¥ev_off£t
.
no
 ),&
√w_node1_off£t
,(),
PMEM_F_MEM_NONTEMPORAL
);

2050 
_mm_s„n˚
();

2054 
uöt64_t
 
	gv
;

2055 
	gv
 = (
uöt64_t
)1 <<(63-
c⁄töue_Àn
);

2057 
ö£π_ønge_íåy
((*)&
¥efix_64
,
c⁄töue_Àn
,
SPLIT_OFFSET
);

2059 
	g¥efix_64
-=
v
;

2060 
ö£π_ønge_íåy
((*)&
¥efix_64
,
c⁄töue_Àn
+1,
√w_node1_off£t
.
no
);

2062 
	g¥efix_64
+=
v
;

2063 
ö£π_ønge_íåy
((*)&
¥efix_64
,
c⁄töue_Àn
+1,
√w_node2_off£t
.
no
);

2066 
	gi
=0;i<
	gtc
;i++)

2070 
ö£π_poöt_íåy
((*)&
ãmp_key
[
i
],
vó
[i]);

2075 
_mm_s„n˚
();

2078 
	g√w_node1
->
	g°©e
 = 0;

2079 
	g√w_node2
->
	g°©e
 = 0;

2083 
	gi
=0;i<
	goc
;i++)

2084 
‰ì_node
(
ãmp_off£t
[
i
]);

2089 
•lô2p
(
Node_off£t
 
off£t
)

2115 i‡(
lock_check
(
off£t
) == -1)

2117  
•lô2
(
off£t
);

2121 
•lô
(
Node_off£t
 
off£t
)

2123 #ifde‡
dâ


2124 
time•ec
 
	gts1
,
	gts2
;

2125 
˛ock_gëtime
(
CLOCK_MONOTONIC
,&
ts1
);

2126 
_mm_m„n˚
();

2133 
	gi
;

2134 
uöt16_t
 
	gsize
;

2135 * 
	gbuf„r
;

2137 * 
	gbuf„r1
;

2138 * 
	gbuf„r2
;

2140 
	gtc
;

2141 
uöt64_t
 
	gãmp_key
[100*
PART_MAX
];

2144 
VÆueE¡ry
 
	gvó
[100*
PART_MAX
];

2145 
Node_off£t
 
	gãmp_off£t
[100*
PART_MAX
];

2146 
	goc
;

2149 
Node_mëa
* 
	g√w_node1
;

2150 
Node_mëa
* 
	g√w_node2
;

2151 
Node_mëa
* 
	g¥ev_node
;

2152 
Node_mëa
* 
	g√xt_node
;

2153 
Node_mëa
* 
	gnode
;

2155 
Node
* 
	gnode_d©a
;

2156 
Node
* 
	g√w_node1_d©a
;

2157 
Node
* 
	g√w_node2_d©a
;

2161 
	gnode
 = 
off£t_to_node
(
off£t
);

2162 
	gnode_d©a
 = 
off£t_to_node_d©a
(
off£t
);

2164 
	gc⁄töue_Àn
 = 
node
->
c⁄töue_Àn
;

2173 
Node_off£t_u
 
	g¥ev_off£t
,
	g√xt_off£t
;

2174 
	g¥ev_off£t
.
	gno_32
 = 
node
->
¥ev_off£t
;

2175 
	g¥ev_node
 = 
off£t_to_node
(
¥ev_off£t
.
no
);

2211 i‡(
	g¥ev_node
->
	g°©e
 == 1)

2249 
	g√xt_off£t
.
	gno_32
 = 
node
->
√xt_off£t
;

2250 
	g√xt_node
 = 
off£t_to_node
(
√xt_off£t
.
no
);

2251 i‡(
	g√xt_node
->
	g°©e
 == 1)

2256 
√xt_node
->
°©e
 == 1)

2258 
√xt_off£t
.
no_32
 = 
node
->next_offset;

2259 
	g√xt_node
 = 
off£t_to_node
(
√xt_off£t
.
no
);

2266 i‡(
	g¥öt
)

2267 
¥ötf
("locked\n");

2276 
Node_off£t_u
 
	g√w_node1_off£t
;

2277 
Node_off£t_u
 
	g√w_node2_off£t
;

2280 
	g√w_node1_off£t
.
	gno
 = 
Æloc_node
(0);

2281 
	g√w_node2_off£t
.
	gno
 = 
Æloc_node
(0);

2283 
	g√w_node1
 = 
off£t_to_node
(
√w_node1_off£t
.
no
);

2284 
	g√w_node2
 = 
off£t_to_node
(
√w_node2_off£t
.
no
);

2286 
	g√w_node1
->
	g∑π
 = 0;

2287 
	g√w_node2
->
	g∑π
 = 0;

2289 
	g√w_node1
->
	g°©e
 = 1;

2290 
	g√w_node1
->
	gsˇn_li°
 = 
NULL
;

2291 
	g√w_node2
->
	g°©e
 = 1;

2292 
	g√w_node2
->
	gsˇn_li°
 = 
NULL
;

2294 
	g√w_node1
->
	göv_˙t
 = 
√w_node2
->
öv_˙t
 = 0;

2295 
	g√w_node1
->
	ggroup_size
 = 
√w_node2
->
group_size
 = 0;

2296 
	g√w_node1
->
	gövÆid©ed_size
 = 
√w_node2
->
övÆid©ed_size
 = 0;

2297 #ifde‡
DOUBLE_LOG


2298 
	g√w_node1
->
	gÊush_˙t
 = 
√w_node2
->
Êush_˙t
 = 0;

2299 
	g√w_node1
->
	gÊush_size
 = 
√w_node2
->
Êush_size
 = 0;

2302 
	g√w_node1
->
	g°¨t_off£t
 = 
√w_node1_off£t
.
no
;

2303 
	g√w_node2
->
	g°¨t_off£t
 = 
√w_node2_off£t
.
no
;

2305 
	g√w_node1
->
	gc⁄töue_Àn
 = 
√w_node2
->
c⁄töue_Àn
 = continue_len+1;

2312 
	g√w_node2
->
	g√xt_off£t
 = 
√xt_off£t
.
no_32
;

2313 
	g√w_node2
->
	g¥ev_off£t
 = 
√w_node1_off£t
.
no_32
;

2317 
	g√w_node1
->
	g√xt_off£t
 = 
√w_node2_off£t
.
no_32
;

2318 
	g√w_node1
->
	g¥ev_off£t
 = 
¥ev_off£t
.
no_32
;

2322 i‡(
	gnode
->
	gsˇn_li°
 !
NULL
)

2323 
move_sˇn_li°
(
off£t
,
√w_node2_off£t
.
no
);

2341 
	g√w_node1_d©a
 = 
off£t_to_node_d©a
(
√w_node1_off£t
.
no
);

2342 
	g√w_node2_d©a
 = 
off£t_to_node_d©a
(
√w_node2_off£t
.
no
);

2344 
mem˝y
(
√w_node1_d©a
,
√w_node1
,()*3);

2345 
mem˝y
(
√w_node2_d©a
,
√w_node2
,()*3);

2354 
uöt64_t
 
	g¥efix_64
;

2355 
uöt64_t
 
	gm
;

2358 #ifde‡
DOUBLE_LOG


2359 i‡(
	gnode
->
	gÊush_˙t
 != 0)

2360 
¥efix_64
 = *((
uöt64_t
*)(
node
->
Êush_kv
[0]+
PH_LEN_SIZE
));

2366 
	g¥efix_64
 = *((
uöt64_t
*)(
node_d©a
->
buf„r
+
PH_LEN_SIZE
));

2375 
	gm
 = ~(((
uöt64_t
)1 << (63-
c⁄töue_Àn
))-1);

2381 
	g¥efix_64
 = (
¥efix_64
 & 
m
Ë| ((
uöt64_t
)1 << (63-
c⁄töue_Àn
));

2382 i‡(
	g¥öt
)

2383 
¥ötf
("pivŸ %lx m %lx sizê%d\n",
¥efix_64
,
m
,
size
);

2385 
uöt16_t
 
	gvl16
;

2387 
uöt16_t
 
	gkvs
;

2389 #ifde‡
DRAM_BUF


2390 
Node
 
	gd_node0
;

2391 
Node
 
	gd_node1
;

2392 
Node
 
	gd_node2
;

2394 
	gbuf„r
 = 
d_node0
.
buf„r
;

2395 
	gbuf„r1
 = 
d_node1
.
buf„r
;

2396 
	gbuf„r2
 = 
d_node2
.
buf„r
;

2399 
	gbuf„r
 = 
node_d©a
->
buf„r
;

2400 
	gbuf„r1
 = 
√w_node1_d©a
->
buf„r
;

2401 
	gbuf„r2
 = 
√w_node2_d©a
->
buf„r
;

2405 
	gtc
 = 0;

2407 
	gj
;

2412 
Node_off£t
 
	g√xt_off£t0
;

2413 
Node
* 
	gcuºít_node0_d©a
 = 
node_d©a
;

2414 
Node
* 
	gcuºít_node1_d©a
 = 
√w_node1_d©a
;

2415 
Node
* 
	gcuºít_node2_d©a
 = 
√w_node2_d©a
;

2416 
Node_mëa
* 
	gcuºít_node0_mëa
;

2417 
Node_mëa
* 
	gcuºít_node1_mëa
 = 
√w_node1
;

2418 
Node_mëa
* 
	gcuºít_node2_mëa
 = 
√w_node2
;

2419 
Node_off£t
 
	gcuºít_node0_off£t
 = 
off£t
;

2420 
Node_off£t
 
	gcuºít_node1_off£t
 = 
√w_node1_off£t
.
no
;

2421 
Node_off£t
 
	gcuºít_node2_off£t
 = 
√w_node2_off£t
.
no
;

2422 * 
	gbuf„r_íd
;

2423 * 
	gbuf„r1_íd
 = 
buf„r1
+
NODE_BUFFER
;

2424 * 
	gbuf„r2_íd
 = 
buf„r2
+
NODE_BUFFER
;

2426 * 
	gkvp
;

2427 
	goc
 = 0;

2428 
	gi
=0;

2431 
	gcuºít_node0_mëa
 = 
off£t_to_node
(
cuºít_node0_off£t
);

2432 
	gcuºít_node0_d©a
 = 
off£t_to_node_d©a
(
cuºít_node0_off£t
);

2435 
	g√xt_off£t0
 = 
cuºít_node0_mëa
->
√xt_off£t_ig
;

2437 #ifde‡
DRAM_BUF


2443 
	gbuf„r
 = 
d_node0
.
buf„r
;

2445 
	gbuf„r
 = 
cuºít_node0_d©a
->
buf„r
;

2448 
	gbuf„r_íd
 = 
buf„r
 + 
cuºít_node0_mëa
->
size
;

2449 
s‹t_öv
(
cuºít_node0_mëa
->
öv_˙t
,cuºít_node0_mëa->
öv_kv
);

2450 
	gj
 = 0;

2453 
	gcuºít_node0_mëa
->
	göv_kv
[
cuºít_node0_mëa
->
öv_˙t
] = 0;

2456 
	gãmp_off£t
[
oc
++] = 
cuºít_node0_off£t
;

2459 
	gbuf„r
 < 
	gbuf„r_íd
)

2464 
	gvl16
 = *((
uöt16_t
*)(
buf„r
 ));

2466 
	gkvs
 = 
LK_SIZE
 + 
vl16
;

2468 i‡(
	gkvs
 % 2)

2469 
	gkvs
++;

2471 #ifde‡
DRAM_BUF


2472 i‡(((*)&
	gd_node0
 + 
	gcuºít_node0_mëa
->
	göv_kv
[
j
] =
buf„r
) )

2474 i‡(((*)
cuºít_node0_d©a
 + 
cuºít_node0_mëa
->
öv_kv
[
j
] =
buf„r
) )

2477 
j
++;

2485 
	gkvs
 &~(
INV_BIT
);

2501 i‡(
	g¥öt
)

2502 
¥ötf
("pivŸ %lx key %lx\n",
¥efix_64
,*((
uöt64_t
*)(
buf„r
)));

2508 
	gãmp_key
[
tc
] = *((
uöt64_t
*)(
buf„r
+
PH_LEN_SIZE
));

2512 i‡(
	gãmp_key
[
tc
] < 
	g¥efix_64
)

2516 i‡(
	gbuf„r1
+
	gkvs
+
	gPH_LEN_SIZE
 > 
	gbuf„r1_íd
)

2519 
	gbuf„r1
[0] = 
buf„r1
[1] = 0;

2520 #ifde‡
DRAM_BUF


2521 
	gcuºít_node1_mëa
->
	gsize
 = 
buf„r1
-
d_node1
.
buf„r
;

2523 
	gcuºít_node1_mëa
->
	gsize
 = 
buf„r1
-
cuºít_node1_d©a
->
buf„r
;

2525 #ifde‡
DOUBLE_LOG


2526 
	gcuºít_node1_mëa
->
	gÊush_size
=0;

2529 
	g√w_node1
->
	ggroup_size
+=
cuºít_node1_mëa
->
size
;

2532 
Node_off£t
 
	gãmp_off£t
;

2533 
	gãmp_off£t
 = 
Æloc_node
(
cuºít_node1_mëa
->
∑π
+1);

2534 
Node_mëa
* 
	gãmp_mëa
 = 
off£t_to_node
(
ãmp_off£t
);

2535 #ifde‡
DRAM_BUF


2536 
	gd_node1
.
	g√xt_off£t_ig
 = 
ãmp_off£t
;

2538 
¡256
((*)
cuºít_node1_d©a
,(*)&
d_node1
,(
Node
));

2540 
	gcuºít_node1_d©a
->
	g√xt_off£t_ig
 = 
ãmp_off£t
;

2543 
	gcuºít_node1_mëa
->
	g√xt_off£t_ig
 = 
ãmp_off£t
;

2548 
	gãmp_mëa
->
	g∑π
 = 
cuºít_node1_mëa
->
∑π
+1;

2551 
	gãmp_mëa
->
	g°¨t_off£t
 = 
√w_node1_off£t
.
no
;

2552 
	gãmp_mëa
->
	göv_˙t
=0;

2553 #ifde‡
DOUBLE_LOG


2554 
	gãmp_mëa
->
	gÊush_˙t
=0;

2557 
	gcuºít_node1_off£t
 = 
ãmp_off£t
;

2558 
	gcuºít_node1_mëa
 = 
ãmp_mëa
;

2559 
	gcuºít_node1_d©a
 = 
off£t_to_node_d©a
(
ãmp_off£t
);

2560 #ifde‡
DRAM_BUF


2561 
	gbuf„r1
 = 
d_node1
.
buf„r
;

2563 
	gbuf„r1
 = 
cuºít_node1_d©a
->
buf„r
;

2565 
	gbuf„r1_íd
 = 
buf„r1
+
NODE_BUFFER
;

2572 #ifde‡
DRAM_BUF


2573 
mem˝y
(
buf„r1
,
buf„r
,
kvs
);

2575 
pmem_mem˝y
(
buf„r1
,
buf„r
,
kvs
,
PMEM_F_MEM_NODRAIN
);

2584 
	gvó
[
tc
].
	gnode_off£t
 = 
cuºít_node1_off£t
;

2585 #ifde‡
DRAM_BUF


2586 
	gvó
[
tc
].
	gkv_off£t
 = 
buf„r1
-(*)&
d_node1
;

2588 
	gvó
[
tc
].
	gkv_off£t
 = 
buf„r1
-(*)
cuºít_node1_d©a
;

2591 
	gbuf„r1
+=
kvs
;

2595 i‡(
	gbuf„r2
+
	gkvs
+
	gPH_LEN_SIZE
 > 
	gbuf„r2_íd
)

2597 
	gbuf„r2
[0] = 
buf„r2
[1] = 0;

2598 #ifde‡
DRAM_BUF


2599 
	gcuºít_node2_mëa
->
	gsize
 = 
buf„r2
-
d_node2
.
buf„r
;

2601 
	gcuºít_node2_mëa
->
	gsize
 = 
buf„r2
-
cuºít_node2_d©a
->
buf„r
;

2603 #ifde‡
DOUBLE_LOG


2604 
	gcuºít_node2_mëa
->
	gÊush_size
 = 0;

2607 
	g√w_node2
->
	ggroup_size
+=
cuºít_node2_mëa
->
size
;

2610 
Node_off£t
 
	gãmp_off£t
;

2611 
	gãmp_off£t
 = 
Æloc_node
(
cuºít_node2_mëa
->
∑π
+1);

2612 
Node_mëa
* 
	gãmp_mëa
 = 
off£t_to_node
(
ãmp_off£t
);

2613 #ifde‡
DRAM_BUF


2614 
	gd_node2
.
	g√xt_off£t_ig
 = 
ãmp_off£t
;

2616 
¡256
((*)
cuºít_node2_d©a
,(*)&
d_node2
,(
Node
));

2618 
	gcuºít_node2_d©a
->
	g√xt_off£t_ig
 = 
ãmp_off£t
;

2621 
	gcuºít_node2_mëa
->
	g√xt_off£t_ig
 = 
ãmp_off£t
;

2626 
	gãmp_mëa
->
	g∑π
 = 
cuºít_node2_mëa
->
∑π
+1;

2629 
	gãmp_mëa
->
	g°¨t_off£t
 = 
√w_node2_off£t
.
no
;

2630 
	gãmp_mëa
->
	göv_˙t
 = 0;

2631 #ifde‡
DOUBLE_LOG


2632 
	gãmp_mëa
->
	gÊush_˙t
 = 0;

2635 
	gcuºít_node2_off£t
 = 
ãmp_off£t
;

2636 
	gcuºít_node2_mëa
 = 
ãmp_mëa
;

2637 
	gcuºít_node2_d©a
 = 
off£t_to_node_d©a
(
ãmp_off£t
);

2638 #ifde‡
DRAM_BUF


2639 
	gbuf„r2
 = 
d_node2
.
buf„r
;

2641 
	gbuf„r2
 = 
cuºít_node2_d©a
->
buf„r
;

2643 
	gbuf„r2_íd
 = 
buf„r2
+
NODE_BUFFER
;

2649 #ifde‡
DRAM_BUF


2650 
mem˝y
(
buf„r2
,
buf„r
,
kvs
);

2652 
pmem_mem˝y
(
buf„r2
,
buf„r
,
kvs
,
PMEM_F_MEM_NODRAIN
);

2659 
	gvó
[
tc
].
	gnode_off£t
 = 
cuºít_node2_off£t
;

2660 #ifde‡
DRAM_BUF


2661 
	gvó
[
tc
].
	gkv_off£t
 = 
buf„r2
-(*)&
d_node2
;

2663 
	gvó
[
tc
].
	gkv_off£t
 = 
buf„r2
-(*)
cuºít_node2_d©a
;

2666 
	gbuf„r2
+=
kvs
;

2669 
	gvó
[
tc
].
	gÀn
 = 
vl16
;

2670 
	gtc
++;

2688 
	gbuf„r
+=
kvs
;

2690 #ifde‡
DOUBLE_LOG


2692 
	gi
=0;i<
	gcuºít_node0_mëa
->
	gÊush_˙t
;i++)

2694 
	gkvp
 = 
cuºít_node0_mëa
->
Êush_kv
[
i
];

2696 
	gvl16
 = *((
uöt16_t
*)
kvp
);

2697 i‡((
	gvl16
 & 
	gINV_BIT
))

2699 
	gkvs
 = 
LK_SIZE
+
vl16
;

2700 i‡(
	gkvs
%2)

2701 ++
	gkvs
;

2704 
	gãmp_key
[
tc
] = *((
uöt64_t
*)(
kvp
+
PH_LEN_SIZE
));

2705 i‡(
	gãmp_key
[
tc
] < 
	g¥efix_64
)

2707 i‡(
	gbuf„r1
+
	gkvs
+
	gPH_LEN_SIZE
 > 
	gbuf„r1_íd
)

2709 
	gbuf„r1
[0] = 
buf„r1
[1] = 0;

2712 
	gcuºít_node1_mëa
->
	gsize
 = 
buf„r1
-
cuºít_node1_d©a
->
buf„r
;

2713 
	gcuºít_node1_mëa
->
	gÊush_size
=0;

2715 
	g√w_node1
->
	ggroup_size
+=
cuºít_node1_mëa
->
size
;

2718 
Node_off£t
 
	gãmp_off£t
;

2719 
	gãmp_off£t
 = 
Æloc_node
(
cuºít_node1_mëa
->
∑π
+1);

2720 
Node_mëa
* 
	gãmp_mëa
 = 
off£t_to_node
(
ãmp_off£t
);

2722 
	gcuºít_node1_d©a
->
	g√xt_off£t_ig
 = 
ãmp_off£t
;

2723 
	gcuºít_node1_mëa
->
	g√xt_off£t_ig
 = 
ãmp_off£t
;

2724 
pmem_≥rsi°
(
cuºít_node1_d©a
,(
Node
));

2728 
	gãmp_mëa
->
	g∑π
 = 
cuºít_node1_mëa
->
∑π
+1;

2731 
	gãmp_mëa
->
	g°¨t_off£t
 = 
√w_node1_off£t
.
no
;

2732 
	gãmp_mëa
->
	göv_˙t
=0;

2733 
	gãmp_mëa
->
	gÊush_˙t
=0;

2735 
	gcuºít_node1_off£t
 = 
ãmp_off£t
;

2736 
	gcuºít_node1_mëa
 = 
ãmp_mëa
;

2737 
	gcuºít_node1_d©a
 = 
off£t_to_node_d©a
(
ãmp_off£t
);

2739 
	gbuf„r1
 = 
cuºít_node1_d©a
->
buf„r
;

2740 
	gbuf„r1_íd
 = 
buf„r1
+
NODE_BUFFER
;

2744 
mem˝y
(
buf„r1
,
kvp
,
kvs
);

2745 *((
	guöt16_t
*)
	gkvp
Ë|
INV_BIT
;

2749 
	gvó
[
tc
].
	gnode_off£t
 = 
cuºít_node1_off£t
;

2750 
	gvó
[
tc
].
	gkv_off£t
 = 
buf„r1
-(*)
cuºít_node1_d©a
;

2752 
	gbuf„r1
+=
kvs
;

2756 i‡(
	gbuf„r2
+
	gkvs
+
	gPH_LEN_SIZE
 > 
	gbuf„r2_íd
)

2758 
	gbuf„r2
[0] = 
buf„r2
[1] = 0;

2760 
	gcuºít_node2_mëa
->
	gsize
 = 
buf„r2
-
cuºít_node2_d©a
->
buf„r
;

2761 
	gcuºít_node2_mëa
->
	gÊush_size
=0;

2763 
	g√w_node2
->
	ggroup_size
+=
cuºít_node2_mëa
->
size
;

2766 
Node_off£t
 
	gãmp_off£t
;

2767 
	gãmp_off£t
 = 
Æloc_node
(
cuºít_node2_mëa
->
∑π
+1);

2768 
Node_mëa
* 
	gãmp_mëa
 = 
off£t_to_node
(
ãmp_off£t
);

2770 
	gcuºít_node2_d©a
->
	g√xt_off£t_ig
 = 
ãmp_off£t
;

2771 
	gcuºít_node2_mëa
->
	g√xt_off£t_ig
 = 
ãmp_off£t
;

2772 
pmem_≥rsi°
(
cuºít_node2_d©a
,(
Node
));

2776 
	gãmp_mëa
->
	g∑π
 = 
cuºít_node2_mëa
->
∑π
+1;

2779 
	gãmp_mëa
->
	g°¨t_off£t
 = 
√w_node2_off£t
.
no
;

2780 
	gãmp_mëa
->
	göv_˙t
=0;

2781 
	gãmp_mëa
->
	gÊush_˙t
=0;

2783 
	gcuºít_node2_off£t
 = 
ãmp_off£t
;

2784 
	gcuºít_node2_mëa
 = 
ãmp_mëa
;

2785 
	gcuºít_node2_d©a
 = 
off£t_to_node_d©a
(
ãmp_off£t
);

2787 
	gbuf„r2
 = 
cuºít_node2_d©a
->
buf„r
;

2788 
	gbuf„r2_íd
 = 
buf„r2
+
NODE_BUFFER
;

2792 
mem˝y
(
buf„r2
,
kvp
,
kvs
);

2794 *((
	guöt16_t
*)
	gkvp
Ë|
INV_BIT
;

2797 
	gvó
[
tc
].
	gnode_off£t
 = 
cuºít_node2_off£t
;

2798 
	gvó
[
tc
].
	gkv_off£t
 = 
buf„r2
-(*)
cuºít_node2_d©a
;

2800 
	gbuf„r2
+=
kvs
;

2804 
	gvó
[
tc
].
	gÀn
 = 
vl16
;

2805 
	gtc
++;

2809 i‡(
	gcuºít_node0_off£t
 =
node
->
íd_off£t
)

2812 
	gcuºít_node0_off£t
 = 
√xt_off£t0
;

2816 
	gbuf„r1
[0] = 
buf„r1
[1] = 0;

2817 
	gbuf„r2
[0] = 
buf„r2
[1] = 0;

2833 
	g√w_node1
->
	gíd_off£t
 = 
cuºít_node1_off£t
;

2835 #ifde‡
DOUBLE_LOG


2836 
	gcuºít_node1_mëa
->
	gÊush_size
 = 0;

2840 #ifde‡
DRAM_BUF


2841 
	gd_node1
.
	g√xt_off£t_ig
 = 
INIT_OFFSET
;

2843 
¡256
((*)
cuºít_node1_d©a
,(*)&
d_node1
,(
Node
));

2844 
	gcuºít_node1_mëa
->
	gsize
 = 
buf„r1
-
d_node1
.
buf„r
;

2846  
	gcuºít_node1_d©a
->
	g√xt_off£t_ig
 = 
INIT_OFFSET
;

2848 
	gcuºít_node1_mëa
->
	gsize
 = 
buf„r1
-
cuºít_node1_d©a
->
buf„r
;

2850 
	g√w_node1
->
	ggroup_size
+=
cuºít_node1_mëa
->
size
;

2857 
	g√w_node2
->
	gíd_off£t
 = 
cuºít_node2_off£t
;

2858 #ifde‡
DOUBLE_LOG


2859 
	gcuºít_node2_mëa
->
	gÊush_size
 = 0;

2863 #ifde‡
DRAM_BUF


2864 
	gd_node2
.
	g√xt_off£t_ig
 = 
INIT_OFFSET
;

2866 
¡256
((*)
cuºít_node2_d©a
,(*)&
d_node2
,(
Node
));

2867 
	gcuºít_node2_mëa
->
	gsize
 = 
buf„r2
-
d_node2
.
buf„r
;

2869  
	gcuºít_node2_d©a
->
	g√xt_off£t_ig
 = 
INIT_OFFSET
;

2872 
	gcuºít_node2_mëa
->
	gsize
 = 
buf„r2
-
cuºít_node2_d©a
->
buf„r
;

2874 
	g√w_node2
->
	ggroup_size
+=
cuºít_node2_mëa
->
size
;

2876 #i‚de‡
DRAM_BUF


2877 
pmem_døö
();

2879 
_mm_s„n˚
();

2881 
	g√xt_node
->
	g¥ev_off£t
 = 
√w_node2_off£t
.
no_32
;

2882 
	g¥ev_node
->
	g√xt_off£t
 = 
√w_node1_off£t
.
no_32
;

2885 
pmem_mem˝y
((
Node
*)
off£t_to_node_d©a
(
¥ev_off£t
.
no
 ),&
√w_node1_off£t
,(),
PMEM_F_MEM_NONTEMPORAL
);

2888 
_mm_s„n˚
();

2892 i‡(
	g¥öt
)

2893 
¥ötf
("insertÑange\n");

2897 
uöt64_t
 
	gv
;

2900 
	gv
 = (
uöt64_t
)1 <<(63-
c⁄töue_Àn
);

2906 
ö£π_ønge_íåy
((*)&
¥efix_64
,
c⁄töue_Àn
,
SPLIT_OFFSET
);

2924 
	g¥efix_64
-=
v
;

2925 
ö£π_ønge_íåy
((*)&
¥efix_64
,
c⁄töue_Àn
+1,
√w_node1_off£t
.
no
);

2927 
	g√w_node1
->
	gc⁄töue_Àn
 = 
c⁄töue_Àn
+1;

2928 
	g¥efix_64
+=
v
;

2929 
ö£π_ønge_íåy
((*)&
¥efix_64
,
c⁄töue_Àn
+1,
√w_node2_off£t
.
no
);

2930 
	g√w_node2
->
	gc⁄töue_Àn
 = 
c⁄töue_Àn
+1;

2939 
	gi
=0;i<
	gtc
;i++)

2943 
ö£π_poöt_íåy
((*)&
ãmp_key
[
i
],
vó
[i]);

2949 i‡(
	g¥öt
)

2950 
¥ötf
("rehash\n");

2955 
	gbuf„r
 = 
node_d©a
->
buf„r
;

2956 
	gbuf„r1
 = 
√w_node1_d©a
->
buf„r
;

2957 
	gbuf„r2
 = 
√w_node2_d©a
->
buf„r
;

2959 
	gbuf„r
 < 
	gbe
)

2963 
	gvÆue_Àn
 = *((
uöt16_t
*)(
buf„r
));

2964 
	gkvs
 = 
kls
 + 
vÆue_Àn
;

2965 i‡((
	gvÆue_Àn
 & (1 << 15)) == 0)

2979 i‡(*((
uöt64_t
*)(
buf„r
+
Àn_size
)Ë< 
¥efix_64
)

2986 
ö£π_poöt_íåy
(
buf„r
+
Àn_size
,
buf„r1
);

2987 
	gbuf„r1
+
kvs
;

2995 
ö£π_poöt_íåy
(
buf„r
+
Àn_size
,
buf„r2
);

2996 
	gbuf„r2
+=
kvs
;

3001 
	gkvs
-= (1 << 15);

3002 
	gbuf„r
+=
kvs
;

3008 
_mm_s„n˚
();

3011 
	g√w_node1
->
	g°©e
 = 0;

3012 
	g√w_node2
->
	g°©e
 = 0;

3017 
	gi
=0;i<
	goc
;i++)

3018 
‰ì_node
(
ãmp_off£t
[
i
]);

3020 #ifde‡
dâ


3021 
_mm_m„n˚
();

3022 
˛ock_gëtime
(
CLOCK_MONOTONIC
,&
ts2
);

3023 
	gâ2
+=(
ts2
.
tv_£c
-
ts1
.tv_£c)*1000000000+ts2.
tv_n£c
-ts1.tv_nsec;

3029 
com∑˘2
(
Node_off£t
 
off£t
)

3042 
Node_off£t
 
	gnode_off£t
;

3043 
Node_mëa
* 
	gnode_mëa
;

3044 
Node
* 
	gnode_d©a
;

3046 c⁄° 
	gmëa_size
 = 
d0
[0].
buf„r
-(*)&d0[0];

3047 
	g∑π0
,
	g∑π1
;

3049 
	g∑π0
 = 0;

3052 
	gnode_off£t
 = 
off£t
;

3055 
	gnode_mëa
 = 
off£t_to_node
(
node_off£t
);

3056 
	gnode_d©a
 = 
off£t_to_node_d©a
(
node_off£t
);

3058 
˝256
((*)&
d0
[
∑π0
],(*)
node_d©a
,
node_mëa
->
size
 + 
mëa_size
);

3059 
	g∑π0
++;

3061 
	gnode_off£t
 = 
node_mëa
->
√xt_off£t_ig
;

3062 i‡(
	gnode_off£t
 =
INIT_OFFSET
)

3068 
	gi
;

3069 
uöt16_t
 
	gsize
;

3071 
	gtc
;

3072 
uöt64_t
 
	gãmp_key
[100*
PART_MAX
];

3073 
VÆueE¡ry
 
	gvó
[100*
PART_MAX
];

3074 
Node_off£t
 
	gãmp_off£t
[
PART_MAX
];

3075 
	goc
;

3077 
	gc⁄töue_Àn
 = 
off£t_to_node
(
off£t
)->
c⁄töue_Àn
;

3079 
	g∑π1
 = 0;

3081 
Node_mëa
* 
	g√w_node1
;

3082 
Node_mëa
* 
	g¥ev_node
;

3083 
Node_mëa
* 
	g√xt_node
;

3085 
Node_off£t_u
 
	g¥ev_off£t
,
	g√xt_off£t
;

3087 
	gnode_mëa
 = 
off£t_to_node
(
off£t
);

3088 
	gnode_d©a
 = 
off£t_to_node_d©a
(
off£t
);

3090 
	g¥ev_off£t
.
	gno_32
 = 
node_mëa
->
¥ev_off£t
;

3091 
	g√xt_off£t
.
	gno_32
 = 
node_mëa
->
√xt_off£t
;

3092 
	g√xt_node
 = 
off£t_to_node
(
√xt_off£t
.
no
);

3093 
	g¥ev_node
 = 
off£t_to_node
(
¥ev_off£t
.
no
);

3095 
Node_off£t_u
 
	g√w_node1_off£t
;

3097 
	grŸ©i⁄1
;

3098 
	g√w_node1_off£t
.
	gno
 = 
Æloc_node
(
∑π_rŸ©i⁄
);

3099 
	g∑π_rŸ©i⁄
 = (
∑π_rŸ©i⁄
+1)%
PM_N
;

3100 
	grŸ©i⁄1
 = 
∑π_rŸ©i⁄
;

3102 
	g√w_node1
 = 
off£t_to_node
(
√w_node1_off£t
.
no
);

3104 
	g√w_node1
->
	g∑π
 = 0;

3106 
	g√w_node1
->
	g°©e
 = 1;

3110 
	g√w_node1
->
	göv_˙t
 = 0;

3111 
	g√w_node1
->
	ggroup_size
 = 0;

3112 
	g√w_node1
->
	gövÆid©ed_size
 = 0;

3114 
	g√w_node1
->
	g°¨t_off£t
 = 
√w_node1_off£t
.
no
;

3116 
	g√w_node1
->
	gc⁄töue_Àn
 = 
c⁄töue_Àn
;

3119 
	g√w_node1
->
	g√xt_off£t
 = 
√xt_off£t
.
no_32
;

3120 
	g√w_node1
->
	g¥ev_off£t
 = 
¥ev_off£t
.
no_32
;

3127 
	gd1
[0].
	g√xt_off£t
 = 
√xt_off£t
.
no
;

3128 
	gd1
[0].
	gc⁄töue_Àn
 = 
c⁄töue_Àn
;

3138 
uöt16_t
 
	gvl16
;

3140 
uöt16_t
 
	gkvs
;

3142 * 
	gbuf„r
;

3143 * 
	gbuf„r1
;

3144 * 
	gbuf„r2
;

3147 
	gbuf„r1
 = 
d1
[0].
buf„r
;

3149 
	gtc
 = 0;

3151 
	gj
;

3160 
Node_mëa
* 
	gcuºít_node0_mëa
;

3161 
Node_mëa
* 
	gcuºít_node1_mëa
 = 
√w_node1
;

3162 
Node_off£t
 
	gcuºít_node0_off£t
 = 
off£t
;

3163 
Node_off£t
 
	gcuºít_node1_off£t
 = 
√w_node1_off£t
.
no
;

3164 * 
	gbuf„r_íd
;

3165 * 
	gbuf„r1_íd
 = 
buf„r1
+
NODE_BUFFER
;

3167 * 
	gkvp
;

3168 
	goc
 = 0;

3169 
	gi
=0;

3172 
	gcuºít_node0_mëa
 = 
off£t_to_node
(
cuºít_node0_off£t
);

3184 
	gbuf„r
 = 
d0
[
i
].
buf„r
;

3189 
	gbuf„r_íd
 = 
buf„r
 + 
cuºít_node0_mëa
->
size
;

3190 
s‹t_öv
(
cuºít_node0_mëa
->
öv_˙t
,cuºít_node0_mëa->
öv_kv
);

3191 
	gj
 = 0;

3192 
	gcuºít_node0_mëa
->
	göv_kv
[
cuºít_node0_mëa
->
öv_˙t
] = 0;

3195 
	gãmp_off£t
[
oc
++] = 
cuºít_node0_off£t
;

3197 
	gbuf„r
 < 
	gbuf„r_íd
)

3202 
	gvl16
 = *((
uöt16_t
*)(
buf„r
 ));

3204 
	gkvs
 = 
LK_SIZE
 + 
vl16
;

3206 i‡(
	gkvs
 % 2)

3207 
	gkvs
++;

3210 i‡(((*)&
	gd0
[
i
] + 
	gcuºít_node0_mëa
->
	göv_kv
[
j
] =
buf„r
) )

3215 
j
++;

3216 
	gkvs
 &~(
INV_BIT
);

3220 
	gãmp_key
[
tc
] = *((
uöt64_t
*)(
buf„r
+
PH_LEN_SIZE
));

3226 i‡(
	gbuf„r1
+
	gkvs
+
	gPH_LEN_SIZE
 > 
	gbuf„r1_íd
)

3229 
	gbuf„r1
[0] = 
buf„r1
[1] = 0;

3231 
	gcuºít_node1_mëa
->
	gsize
 = 
buf„r1
-
d1
[
∑π1
].
buf„r
;

3236 
	g√w_node1
->
	ggroup_size
+=
cuºít_node1_mëa
->
size
;

3239 
Node_off£t
 
	gãmp_off£t
;

3241 
	gãmp_off£t
 = 
Æloc_node
(
rŸ©i⁄1
);

3242 
	grŸ©i⁄1
 = (
rŸ©i⁄1
+1)%
PM_N
;

3243 
Node_mëa
* 
	gãmp_mëa
 = 
off£t_to_node
(
ãmp_off£t
);

3245 
	gd1
[
∑π1
].
	g√xt_off£t_ig
 = 
ãmp_off£t
;

3252 
	gcuºít_node1_mëa
->
	g√xt_off£t_ig
 = 
ãmp_off£t
;

3257 
	gãmp_mëa
->
	g∑π
 = 
cuºít_node1_mëa
->
∑π
+1;

3260 
	gãmp_mëa
->
	g°¨t_off£t
 = 
√w_node1_off£t
.
no
;

3261 
	gãmp_mëa
->
	göv_˙t
=0;

3263 
	gcuºít_node1_off£t
 = 
ãmp_off£t
;

3264 
	gcuºít_node1_mëa
 = 
ãmp_mëa
;

3267 
	g∑π1
++;

3268 
	gbuf„r1
 = 
d1
[
∑π1
].
buf„r
;

3272 
	gbuf„r1_íd
 = 
buf„r1
+
NODE_BUFFER
;

3280 
mem˝y
(
buf„r1
,
buf„r
,
kvs
);

3290 
	gvó
[
tc
].
	gnode_off£t
 = 
cuºít_node1_off£t
;

3292 
	gvó
[
tc
].
	gkv_off£t
 = 
buf„r1
-(*)&
d1
[
∑π1
];

3297 
	gbuf„r1
+=
kvs
;

3299 
	gvó
[
tc
].
	gÀn
 = 
vl16
;

3300 
	gtc
++;

3302 
	gbuf„r
+=
kvs
;

3305 
	gcuºít_node0_off£t
 = 
cuºít_node0_mëa
->
√xt_off£t_ig
;

3306 i‡(
	gcuºít_node0_off£t
 =
INIT_OFFSET
)

3308 
	gi
++;

3311 
	gbuf„r1
[0] = 
buf„r1
[1] = 0;

3320 
	g√w_node1
->
	gíd_off£t
 = 
cuºít_node1_off£t
;

3325 
	gd1
[
∑π1
].
	g√xt_off£t_ig
 = 
INIT_OFFSET
;

3326 
	gcuºít_node1_mëa
->
	g√xt_off£t_ig
 = 
INIT_OFFSET
;

3329 
	gcuºít_node1_mëa
->
	gsize
 = 
buf„r1
-
d1
[
∑π1
].
buf„r
;

3335 
	g√w_node1
->
	ggroup_size
+=
cuºít_node1_mëa
->
size
;

3343 
	gnode_off£t
 = 
√w_node1_off£t
.
no
;

3344 
	gi
 = 0;

3347 
	gnode_mëa
 = 
off£t_to_node
(
node_off£t
);

3348 
	gnode_d©a
 = 
off£t_to_node_d©a
(
node_off£t
);

3350 
¡256
((*)
node_d©a
,(*)&
d1
[
i
],
node_mëa
->
size
 + 
mëa_size
 + 
PH_LEN_SIZE
);

3351 
	gi
++;

3353 
	gnode_off£t
 = 
node_mëa
->
√xt_off£t_ig
;

3354 i‡(
	gnode_off£t
 =
INIT_OFFSET
)

3359 
_mm_s„n˚
();

3361 
	g√xt_node
->
	g¥ev_off£t
 = 
√w_node1_off£t
.
no_32
;

3362 
	g¥ev_node
->
	g√xt_off£t
 = 
√w_node1_off£t
.
no_32
;

3365 
pmem_mem˝y
(
off£t_to_node_d©a
(
¥ev_off£t
.
no
 ),&
√w_node1_off£t
,(),
PMEM_F_MEM_NONTEMPORAL
);

3368 
_mm_s„n˚
();

3372 
ö£π_ønge_íåy
((*)
d0
[0].
buf„r
+
PH_LEN_SIZE
 ,
c⁄töue_Àn
,
√w_node1_off£t
.
no
);

3374 
	gi
=0;i<
	gtc
;i++)

3375 
ö£π_poöt_íåy
((*)&
ãmp_key
[
i
],
vó
[i]);

3378 
_mm_s„n˚
();

3381 
	g√w_node1
->
	g°©e
 = 0;

3385 
	gi
=0;i<
	goc
;i++)

3386 
‰ì_node
(
ãmp_off£t
[
i
]);

3392 
com∑˘2p
(
Node_off£t
 
off£t
)

3419 i‡(
lock_check
(
off£t
) == -1)

3421  
com∑˘2
(
off£t
);

3425 
com∑˘
(
Node_off£t
 
off£t
)

3428 #ifde‡
dâ


3429 
time•ec
 
	gts1
,
	gts2
;

3430 
˛ock_gëtime
(
CLOCK_MONOTONIC
,&
ts1
);

3431 
_mm_m„n˚
();

3436 if(
	g¥öt
)

3437 
¥ötf
("com∑˘i⁄ off£à%d/%d\n",
off£t
.
fûe
,offset.offset);

3443 
	gi
;

3444 
uöt16_t
 
	gsize
;

3445 * 
	gbuf„r
;

3447 * 
	gbuf„r1
;

3449 
	gtc
;

3450 
uöt64_t
 
	gãmp_key
[100 * 
PART_MAX
];

3453 
VÆueE¡ry
 
	gvó
[100 * 
PART_MAX
];

3454 
Node_off£t
 
	gãmp_off£t
[100 * 
PART_MAX
];

3455 
	goc
;

3457 
Node_mëa
* 
	g√w_node1
;

3458 
Node_mëa
* 
	g¥ev_node
;

3459 
Node_mëa
* 
	g√xt_node
;

3460 
Node_mëa
* 
	gnode
;

3462 
Node
* 
	gnode_d©a
;

3463 
Node
* 
	g√w_node1_d©a
;

3466 
	gnode
 = 
off£t_to_node
(
off£t
);

3467 
	gnode_d©a
 = 
off£t_to_node_d©a
(
off£t
);

3469 
	gc⁄töue_Àn
 = 
node
->
c⁄töue_Àn
;

3472 
Node_off£t_u
 
	g¥ev_off£t
,
	g√xt_off£t
;

3473 
	g¥ev_off£t
.
	gno_32
 = 
node
->
¥ev_off£t
;

3474 
	g¥ev_node
 = 
off£t_to_node
(
¥ev_off£t
.
no
);

3498 i‡(
	g¥ev_node
->
	g°©e
 == 1)

3513 
_mm_m„n˚
();

3515 
	g√xt_off£t
.
	gno_32
 = 
node
->
√xt_off£t
;

3516 
	g√xt_node
 = 
off£t_to_node
(
√xt_off£t
.
no
);

3518 i‡(
	g√xt_node
->
	g°©e
 == 1)

3520 
√xt_node
->
°©e
 == 1)

3522 
√xt_off£t
.
no_32
 = 
node
->next_offset;

3523 
	g√xt_node
 = 
off£t_to_node
(
√xt_off£t
.
no
);

3526 i‡(
	g¥öt
)

3527 
¥ötf
("locked\n");

3535 
Node_off£t_u
 
	g√w_node1_off£t
;

3536 
	g√w_node1_off£t
.
	gno
 = 
Æloc_node
(0);

3538 
	g√w_node1
 = 
off£t_to_node
(
√w_node1_off£t
.
no
);

3542 
	g√w_node1
->
	g∑π
 = 0;

3544 
	g√w_node1
->
	g°©e
 = 1;

3551 
	g√w_node1
->
	göv_˙t
 = 0;

3552 
	g√w_node1
->
	ggroup_size
 = 0;

3553 
	g√w_node1
->
	g°¨t_off£t
 = 
√w_node1_off£t
.
no
;

3554 
	g√w_node1
->
	gövÆid©ed_size
 = 0;

3556 
	g√w_node1
->
	gsˇn_li°
 = 
NULL
;

3557 #ifde‡
DOUBLE_LOG


3558 
	g√w_node1
->
	gÊush_˙t
 = 0;

3559 
	g√w_node1
->
	gÊush_size
 = 0;

3562 
	g√w_node1
->
	g√xt_off£t
 = 
node
->
√xt_off£t
;

3563 
	g√w_node1
->
	g¥ev_off£t
 = 
node
->
¥ev_off£t
;

3565 
	g√w_node1
->
	gc⁄töue_Àn
 = 
c⁄töue_Àn
;

3573 i‡(
	gnode
->
	gsˇn_li°
 !
NULL
)

3574 
move_sˇn_li°
(
off£t
,
√w_node1_off£t
.
no
);

3576 
	g√w_node1_d©a
 = 
off£t_to_node_d©a
(
√w_node1_off£t
.
no
);

3578 
mem˝y
(
√w_node1_d©a
,
√w_node1
,()*3);

3599 
uöt16_t
 
	gvl16
;

3603 #ifde‡
DRAM_BUF


3604 
Node
 
	gd_node0
;

3605 
Node
 
	gd_node1
;

3607 
	gbuf„r
 = 
d_node0
.
buf„r
;

3608 
	gbuf„r1
 = 
d_node1
.
buf„r
;

3611 
	gbuf„r
 = 
node_d©a
->
buf„r
;

3612 
	gbuf„r1
 = 
√w_node1_d©a
->
buf„r
;

3619 
uöt16_t
 
	gkvs
;

3621 
	gtc
 = 0;

3628 
Node_off£t
 
	g√xt_off£t0
;

3629 
Node
* 
	gcuºít_node0_d©a
 = 
node_d©a
;

3630 
Node
* 
	gcuºít_node1_d©a
 = 
√w_node1_d©a
;

3631 
Node_mëa
* 
	gcuºít_node0_mëa
;

3632 
Node_mëa
* 
	gcuºít_node1_mëa
 = 
√w_node1
;

3633 
Node_off£t
 
	gcuºít_node0_off£t
 = 
off£t
;

3634 
Node_off£t
 
	gcuºít_node1_off£t
 = 
√w_node1_off£t
.
no
;

3636 * 
	gbuf„r_íd
;

3637 * 
	gbuf„r1_íd
 = 
buf„r1
+
NODE_BUFFER
;

3638 
	gj
;

3639 * 
	gkvp
;

3642 
	goc
 = 0;

3645 
	gcuºít_node0_mëa
 = 
off£t_to_node
(
cuºít_node0_off£t
);

3646 
	gcuºít_node0_d©a
 = 
off£t_to_node_d©a
(
cuºít_node0_off£t
);

3649 
	g√xt_off£t0
 = 
cuºít_node0_mëa
->
√xt_off£t_ig
;

3651 #ifde‡
DRAM_BUF


3652 
	gd_node0
 = *
cuºít_node0_d©a
;

3653 
	gbuf„r
 = 
d_node0
.
buf„r
;

3656 
	gbuf„r
 = 
cuºít_node0_d©a
->
buf„r
;

3658 
	gbuf„r_íd
 = 
buf„r
 + 
cuºít_node0_mëa
->
size
;

3659 
s‹t_öv
(
cuºít_node0_mëa
->
öv_˙t
,cuºít_node0_mëa->
öv_kv
);

3660 
	gj
 = 0;

3663 
	gcuºít_node0_mëa
->
	göv_kv
[
cuºít_node0_mëa
->
öv_˙t
] = 0;

3664 
	gãmp_off£t
[
oc
++] = 
cuºít_node0_off£t
;

3665 
	gbuf„r
 < 
	gbuf„r_íd
)

3672 
	gvl16
 = *((
uöt16_t
*)(
buf„r
));

3674 
	gkvs
 = 
LK_SIZE
 + 
vl16
;

3675 i‡(
	gkvs
%2)

3676 ++
	gkvs
;

3678 #ifde‡
DRAM_BUF


3679 i‡(((*)&
	gd_node0
 + 
	gcuºít_node0_mëa
->
	göv_kv
[
j
] =
buf„r
))

3681 i‡(((*)
cuºít_node0_d©a
 + 
cuºít_node0_mëa
->
öv_kv
[
j
] =
buf„r
) )

3684 
j
++;

3693 
	gkvs
&~(
INV_BIT
);

3710 
	gãmp_key
[
tc
] = *((
uöt64_t
*)(
buf„r
+
PH_LEN_SIZE
 ));

3711 i‡(
	gbuf„r1
+
	gkvs
+
	gPH_LEN_SIZE
 > 
	gbuf„r1_íd
)

3713 
	gbuf„r1
[0] = 
buf„r1
[1] = 0;

3714 #ifde‡
DRAM_BUF


3715 
	gcuºít_node1_mëa
->
	gsize
 = 
buf„r1
-
d_node1
.
buf„r
;

3717 
	gcuºít_node1_mëa
->
	gsize
 = 
buf„r1
-
cuºít_node1_d©a
->
buf„r
;

3719 #ifde‡
DOUBLE_LOG


3720 
	gcuºít_node1_mëa
->
	gÊush_size
 = 0;

3723 
	g√w_node1
->
	ggroup_size
+=
cuºít_node1_mëa
->
size
;

3726 
Node_off£t
 
	gãmp_off£t
;

3727 
	gãmp_off£t
 = 
Æloc_node
(
cuºít_node1_mëa
->
∑π
+1);

3728 
Node_mëa
* 
	gãmp_mëa
 = 
off£t_to_node
(
ãmp_off£t
);

3729 #ifde‡
DRAM_BUF


3730 
	gd_node1
.
	g√xt_off£t_ig
 = 
ãmp_off£t
;

3732 
¡256
((*)
cuºít_node1_d©a
,(*)&
d_node1
,(
Node
));

3734 
	gcuºít_node1_d©a
->
	g√xt_off£t_ig
 = 
ãmp_off£t
;

3737 
	gcuºít_node1_mëa
->
	g√xt_off£t_ig
 = 
ãmp_off£t
;

3741 
	gãmp_mëa
->
	g∑π
 = 
cuºít_node1_mëa
->
∑π
+1;

3744 
	gãmp_mëa
->
	g°¨t_off£t
 = 
√w_node1_off£t
.
no
;

3745 
	gãmp_mëa
->
	göv_˙t
=0;

3746 #ifde‡
DOUBLE_LOG


3747 
	gãmp_mëa
->
	gÊush_˙t
=0;

3750 
	gcuºít_node1_off£t
 = 
ãmp_off£t
;

3751 
	gcuºít_node1_mëa
 = 
ãmp_mëa
;

3752 
	gcuºít_node1_d©a
 = 
off£t_to_node_d©a
(
ãmp_off£t
);

3753 #ifde‡
DRAM_BUF


3754 
	gbuf„r1
 = 
d_node1
.
buf„r
;

3756 
	gbuf„r1
 = 
cuºít_node1_d©a
->
buf„r
;

3758 
	gbuf„r1_íd
 = 
buf„r1
+
NODE_BUFFER
;

3761 #ifde‡
DRAM_BUF


3762 
mem˝y
(
buf„r1
,
buf„r
,
kvs
);

3764 
pmem_mem˝y
(
buf„r1
,
buf„r
,
kvs
,
PMEM_F_MEM_NODRAIN
);

3769 
	gvó
[
tc
].
	gnode_off£t
 = 
cuºít_node1_off£t
;

3770 #ifde‡
DRAM_BUF


3771 
	gvó
[
tc
].
	gkv_off£t
 = 
buf„r1
-(*)&
d_node1
;

3773 
	gvó
[
tc
].
	gkv_off£t
 = 
buf„r1
-(*)
cuºít_node1_d©a
;

3776 
	gvó
[
tc
].
	gÀn
 = 
vl16
;

3777 
	gbuf„r1
+=
kvs
;

3778 
	gtc
++;

3794 
	gbuf„r
+=
kvs
;

3796 #ifde‡
DOUBLE_LOG


3798 
	gi
=0;i<
	gcuºít_node0_mëa
->
	gÊush_˙t
;i++)

3800 
	gkvp
 = 
cuºít_node0_mëa
->
Êush_kv
[
i
];

3802 
	gvl16
 = *((
uöt16_t
*)
kvp
);

3803 i‡((
	gvl16
 & 
	gINV_BIT
))

3805 
	gkvs
 = 
LK_SIZE
+
vl16
;

3806 i‡(
	gkvs
%2)

3807 ++
	gkvs
;

3810 
	gãmp_key
[
tc
] = *((
uöt64_t
*)(
kvp
+
PH_LEN_SIZE
));

3811 i‡(
	gbuf„r1
+
	gkvs
+
	gPH_LEN_SIZE
 > 
	gbuf„r1_íd
)

3813 
	gbuf„r1
[0] = 
buf„r1
[1] = 0;

3814 
	gcuºít_node1_mëa
->
	gsize
 = 
buf„r1
-
cuºít_node1_d©a
->
buf„r
;

3815 
	gcuºít_node1_mëa
->
	gÊush_size
=0;

3817 
	g√w_node1
->
	ggroup_size
+=
cuºít_node1_mëa
->
size
;

3820 
Node_off£t
 
	gãmp_off£t
;

3821 
	gãmp_off£t
 = 
Æloc_node
(
cuºít_node1_mëa
->
∑π
+1);

3822 
Node_mëa
* 
	gãmp_mëa
 = 
off£t_to_node
(
ãmp_off£t
);

3824 
	gcuºít_node1_d©a
->
	g√xt_off£t_ig
 = 
ãmp_off£t
;

3825 
	gcuºít_node1_mëa
->
	g√xt_off£t_ig
 = 
ãmp_off£t
;

3826 
pmem_≥rsi°
(
cuºít_node1_d©a
,(
Node
));

3830 
	gãmp_mëa
->
	g∑π
 = 
cuºít_node1_mëa
->
∑π
+1;

3833 
	gãmp_mëa
->
	g°¨t_off£t
 = 
√w_node1_off£t
.
no
;

3834 
	gãmp_mëa
->
	göv_˙t
=0;

3835 
	gãmp_mëa
->
	gÊush_˙t
=0;

3837 
	gcuºít_node1_off£t
 = 
ãmp_off£t
;

3838 
	gcuºít_node1_mëa
 = 
ãmp_mëa
;

3839 
	gcuºít_node1_d©a
 = 
off£t_to_node_d©a
(
ãmp_off£t
);

3841 
	gbuf„r1
 = 
cuºít_node1_d©a
->
buf„r
;

3842 
	gbuf„r1_íd
 = 
buf„r1
+
NODE_BUFFER
;

3846 
mem˝y
(
buf„r1
,
kvp
,
kvs
);

3848 *((
	guöt16_t
*)
	gkvp
Ë|
INV_BIT
;

3851 
	gvó
[
tc
].
	gnode_off£t
 = 
cuºít_node1_off£t
;

3852 
	gvó
[
tc
].
	gkv_off£t
 = 
buf„r1
-(*)
cuºít_node1_d©a
;

3854 
	gvó
[
tc
].
	gÀn
 = 
vl16
;

3855 
	gbuf„r1
+=
kvs
;

3856 
	gtc
++;

3861 i‡(
	gcuºít_node0_off£t
 =
node
->
íd_off£t
)

3863 
	gcuºít_node0_off£t
 = 
√xt_off£t0
;

3866 
	gbuf„r1
[0] = 
buf„r1
[1] = 0;

3869 
uöt16_t
* 
	gãmp_kv
;

3870 
uöt16_t
 
	gãmp_max
;

3871 
	gãmp_kv
 = 
node
->
öv_kv
;

3872 
	gnode
->
	göv_kv
 = 
√w_node1
->
öv_kv
;

3873 
	g√w_node1
->
	göv_kv
 = 
ãmp_kv
;

3874 
	gãmp_max
 = 
node
->
öv_max
;

3875 
	gnode
->
	göv_max
 = 
√w_node1
->
öv_max
;

3876 
	g√w_node1
->
	göv_max
 = 
ãmp_max
;

3877 #ifde‡
DOUBLE_LOG


3878 ** 
	gãmp_Êush
;

3879 
	gãmp_Êush
 = 
node
->
Êush_kv
;

3880 
	gnode
->
	gÊush_kv
 = 
√w_node1
->
Êush_kv
;

3881 
	g√w_node1
->
	gÊush_kv
 = 
ãmp_Êush
;

3882 
	gãmp_max
 = 
node
->
Êush_max
;

3883 
	gnode
->
	gÊush_max
 = 
√w_node1
->
Êush_max
;

3884 
	g√w_node1
->
	gÊush_max
 = 
ãmp_max
;

3889 
	g√w_node1
->
	gíd_off£t
 = 
cuºít_node1_off£t
;

3890 #ifde‡
DOUBLE_LOG


3891 
	gcuºít_node1_mëa
->
	gÊush_size
 = 0;

3894 #ifde‡
DRAM_BUF


3895 
	gd_node1
.
	g√xt_off£t_ig
 = 
INIT_OFFSET
;

3897 
¡256
((*)
cuºít_node1_d©a
,(*)&
d_node1
,(
Node
));

3898 
	gcuºít_node1_mëa
->
	gsize
 = 
buf„r1
-
d_node1
.
buf„r
;

3901 
	gcuºít_node1_d©a
->
	g√xt_off£t_ig
 = 
INIT_OFFSET
;

3902 
	gcuºít_node1_mëa
->
	gsize
 = 
buf„r1
-
cuºít_node1_d©a
->
buf„r
;

3905 
	g√w_node1
->
	ggroup_size
+=
cuºít_node1_mëa
->
size
;

3907 #i‚de‡
DRAM_BUF


3908 
pmem_døö
();

3911 
_mm_s„n˚
();

3913 
	g√xt_node
->
	g¥ev_off£t
 = 
√w_node1_off£t
.
no_32
;

3914 
	g¥ev_node
->
	g√xt_off£t
 = 
√w_node1_off£t
.
no_32
;

3917 
pmem_mem˝y
(
off£t_to_node_d©a
(
¥ev_off£t
.
no
 ),&
√w_node1_off£t
,(),
PMEM_F_MEM_NONTEMPORAL
);

3919 
_mm_s„n˚
();

3929 i‡(!
	gUSE_DRAM
)

3942 
pmem_≥rsi°
(
√w_node1_d©a
,()+
√w_node1
->
size
);

3943 
_mm_s„n˚
();

3944 
Êush_mëa
(
√w_node1
->
¥ev_off£t
);

3945 
_mm_s„n˚
();

3956 
	gi
=0;i<
	gtc
;i++)

3957 
ö£π_poöt_íåy
((*)&
ãmp_key
[
i
],
vó
[i]);

3959 i‡(
	g¥öt
)

3960 
¥ötf
("rehash\n");

3964 
	gbuf„r
 = 
node1_d©a
->
buf„r1
;

3966 
	gbuf„r
 < 
	gbe
)

3970 
	gvÆue_Àn
 = *((
uöt16_t
*)(
buf„r
));

3972 i‡((
	gvÆue_Àn
 & (1 << 15)) == 0)

3986 
ö£π_poöt_íåy
(
buf„r
+
cur
,
√w_node1_d©a
->buf„r+
size1
);

3987 
	gsize1
+
key_size
 + 
Àn_size
 + 
vÆue_Àn
;

3990 
	gvÆue_Àn
 -= (1 << 15);

3991 
	gcur
+=
key_size
+
Àn_size
+
vÆue_Àn
;

4000 
ö£π_ønge_íåy
((*)
node_d©a
->
buf„r
+
PH_LEN_SIZE
 ,
c⁄töue_Àn
,
√w_node1_off£t
.
no
);

4002 
	g√w_node1
->
	gc⁄töue_Àn
 = 
c⁄töue_Àn
;

4006 
_mm_s„n˚
();

4008 
	g√w_node1
->
	g°©e
 = 0;

4011 
	gi
=0;i<
	goc
;i++)

4012 
‰ì_node
(
ãmp_off£t
[
i
]);

4014 #ifde‡
dâ


4015 
_mm_m„n˚
();

4016 
˛ock_gëtime
(
CLOCK_MONOTONIC
,&
ts2
);

4017 
	gâ3
+=(
ts2
.
tv_£c
-
ts1
.tv_£c)*1000000000+ts2.
tv_n£c
-ts1.tv_nsec;

4031 
adv™˚
(** 
kv_µ
,* 
off£t
,
Node
* 
node_p
)

4033 
uöt16_t
 
	gsize
;

4034 
	gﬁd_off£t
,
	g√w_off£t
,
	göv
;

4039 
	göv
 = 0;

4040 
	gsize
 = *((
uöt16_t
*)(*
kv_µ
+
key_size
));

4041 i‡(
	gsize
 & (1 << 15))

4043 
	göv
 = 1;

4044 
	gsize
-=(1<<15);

4046 *
	gkv_µ
+=
size
+
key_size
+
Àn_size
;

4047 i‡(*
	gkv_µ
 >
node_p
->
buf„r
+node_p->
size
)

4049 i‡(
	göv
 == 0)

4053 
	gﬁd_off£t
 = *
off£t
;

4056 
	g√w_off£t
 = 
off£t_to_node
(
ﬁd_off£t
)->
√xt_off£t
;

4057 i‡(
	g√w_off£t
 =
TAIL_OFFSET
)

4059 *
off£t
 = 
TAIL_OFFSET
;

4060 
dec_ªf
(
ﬁd_off£t
);

4061 *
	gkv_µ
 = 
NULL
;

4064 i‡(
öc_ªf
(
√w_off£t
,0))

4066 
c›y_node
(
node_p
,
off£t_to_node
(
√w_off£t
));

4070 
dec_ªf
(
ﬁd_off£t
);

4071 *
	goff£t
 = 
√w_off£t
;

4072 *
	gkv_µ
 = 
node_p
->
buf„r
;

4077 
dñëe_sˇn_íåy
(
Node_off£t
 &
sˇn_off£t
,* 
quîy
)

4079 
Node_mëa
* 
	gnode
;

4080 
Sˇn_li°
* 
	g¶
;

4081 
Sˇn_li°
** 
	g¶p
;

4082 
	gnode
 = 
off£t_to_node
(
sˇn_off£t
);

4083 
	g¶
 = 
node
->
sˇn_li°
;

4084 
	g¶p
 = &(
node
->
sˇn_li°
);

4085 
	g¶
 !
NULL
)

4087 i‡(
¶
->
quîy
 == query)

4090 *
¶p
 = 
¶
->
√xt
;

4091 
‰ì
(
¶
);

4094 
	g¶p
 = &(
¶
->
√xt
);

4095 
	g¶
 = 
¶
->
√xt
;

4099 
adv™˚_off£t
(
Quîy
* 
quîy
)

4101 
Node_off£t_u
 
	gﬁd_off£t
,
	g√w_off£t
;

4102 
	göv
;

4103 
Node_mëa
* 
	gnode
;

4104 
Node_mëa
* 
	g√xt_node
;

4111 
	gﬁd_off£t
.
	gno_32
 = 
quîy
->
sˇn_off£t
;

4112 
	gnode
 = 
off£t_to_node
(
ﬁd_off£t
.
no
);

4129 i‡(
åy_©_lock
(
node
->
°©e
) == 0)

4132 
	g√w_off£t
.
	gno_32
 = 
node
->
√xt_off£t
;

4134 i‡(
	g√w_off£t
.
	gno
 =
TAIL_OFFSET
)

4136 
dñëe_sˇn_íåy
(
ﬁd_off£t
.
no
,
quîy
);

4138 
©_u∆ock
(
node
->
°©e
);

4139 
	gquîy
->
	gsˇn_off£t
 = 
TAIL_OFFSET_u
.
no_32
;

4150 
	g√xt_node
 = 
off£t_to_node
(
√w_off£t
.
no
);

4152 i‡(
åy_©_lock
(
√xt_node
->
°©e
) )

4166 
Sˇn_li°
* 
	g¶
;

4167 
Sˇn_li°
** 
	g¶p
;

4169 
	g¶
 = 
node
->
sˇn_li°
;

4170 
	g¶p
 = &(
node
->
sˇn_li°
);

4171 
	g¶
)

4173 i‡(
	g¶
->
	gquîy
 =
quîy
)

4175 *
¶p
 = 
¶
->
√xt
;

4178 
	g¶p
 = &(
¶
->
√xt
);

4179 
	g¶
 = 
¶
->
√xt
;

4185 
	g¶
->
	g√xt
 = 
√xt_node
->
sˇn_li°
;

4186 
	g√xt_node
->
	gsˇn_li°
 = 
¶
;

4188 
	gquîy
->
	gsˇn_off£t
 = 
√w_off£t
.
no_32
;

4210 
c›y_™d_s‹t_node
(
quîy
);

4211 
©_u∆ock
(
node
->
°©e
);

4220 
©_u∆ock
(
√xt_node
->
°©e
);

4233 
adv™˚_off£t
(* 
quîy
)

4235  
adv™˚_off£t
((
Quîy
*)
quîy
);

4248 
c›y_™d_s‹t_node
(
Quîy
 *
quîy
)

4250 
Node
* 
	gnode_d©a
 = (Node*)
quîy
->
node_d©a
;

4251 
Node_off£t
 
	gnode_off£t
;

4252 
Node_mëa
* 
	gnode_mëa
;

4253 
Node_off£t
 
	gíd_off£t
;

4254 
	gi
 = 0;

4255 
	g∑π
;

4256 
	gnode_size
[100*
PART_MAX
];

4257 
Node_off£t_u
 
	gnou
;

4258 
	gnou
.
	gno_32
 = 
quîy
->
sˇn_off£t
;

4259 
	gnode_off£t
 = 
nou
.
no
;

4261 
	gnode_mëa
 = 
off£t_to_node
(
node_off£t
);

4262 
	gíd_off£t
 = 
node_mëa
->
íd_off£t
;

4263 
	gmëa_size
 = (*)
node_d©a
->
buf„r
-(*)node_data;

4267 
	gnode_size
[
i
] = 
off£t_to_node
(
node_off£t
)->
size
;

4268 
mem˝y
(&
node_d©a
[
i
],
off£t_to_node_d©a
(
node_off£t
),
node_size
[i]+
mëa_size
);

4270 i‡(
	gnode_off£t
 =
íd_off£t
)

4273 
	gnode_off£t
 = 
off£t_to_node
(
node_off£t
)->
√xt_off£t_ig
;

4274 
	gi
++;

4276 
	g∑π
 = 
i
+1;

4282 * 
	gkv
;

4283 
uöt16_t
 
	gv_size
;

4286 
	gquîy
->
	gs‹ãd_kv_max
 = 0;

4287 
	gquîy
->
	gs‹ãd_kv_i
 = 0;

4288 
	gj
;

4290 * 
	gnode_íd
;

4292 
	gj
 = 0;

4293 i‡(
	gnode_mëa
->
	göv_max
 == 0)

4294 
node_mëa
->
öv_kv
 = 0;

4295 
	gi
=0;i<
	g∑π
;i++)

4297 
	gnode_d©a
 = &(((
Node
*)
quîy
->
node_d©a
)[
i
]);

4298 
	gkv
 = 
node_d©a
->
buf„r
;

4299 
	gnode_íd
 = (*)
node_d©a
+
node_size
[
i
];

4301 
	gkv
 < 
	gnode_íd
)

4303 
	gv_size
 = *((
uöt16_t
*)(
kv
));

4304 i‡(
	gv_size
 & 
	gINV_BIT
)

4305 
	gv_size
-=
INV_BIT
;

4306 i‡(
	gkv
-(*)
	gnode_d©a
 =
node_mëa
->
öv_kv
[
j
])

4308 
j
++;

4309 i‡(
	gj
 =
node_mëa
->
öv_max
)

4310 
j
 = 0;

4313 
	gquîy
->
	gs‹ãd_kv
[(
quîy
->
s‹ãd_kv_max
)++] = 
kv
;

4314 
	gkv
+=
LK_SIZE
+
v_size
;

4335 
ö£π_sˇn_li°
(
Node_off£t
 &
node_off£t
,* 
quîy
)

4337 
Node_mëa
* 
	gnode
 = 
off£t_to_node
(
node_off£t
);

4338 
Sˇn_li°
* 
	g¶
;

4339 
	g¶
 = (
Sˇn_li°
*)
mÆloc
((Scan_list));

4340 
	g¶
->
	gquîy
 = 
quîy
;

4341 
	g¶
->
	g√xt
 = 
node
->
sˇn_li°
;

4342 
	gnode
->
	gsˇn_li°
 = 
¶
;

4350 
övÆid©e_kv
(
VÆueE¡ry
& 
ve
)

4353 
Node_mëa
* 
	gmëa
;

4355 #ifde‡
DOUBLE_LOG


4356 i‡(
	gve
.
	gnode_off£t
.
	gfûe
 & 
	gLOG_BIT
)

4358 * 
	gkvp
;

4360 
	gkvp
 = (*)
off£t_to_node_d©a
(
ve
.
node_off£t
)+ve.
kv_off£t
;

4361 *((
	guöt16_t
*)
	gkvp
Ë|
INV_BIT
;

4364 
Node_off£t
 
	gnode_off£t
;

4365 
	gnode_off£t
 = *(
Node_off£t
*)(
kvp
+
PH_LEN_SIZE
 +
key_size
+
ve
.
Àn
);

4366 
	gmëa
 = 
off£t_to_node
(
node_off£t
);

4367 
off£t_to_node
(
mëa
->
°¨t_off£t
)->
	gövÆid©ed_size
+=
ve
.
Àn
+
LK_SIZE
;

4379 
	gmëa
 = 
off£t_to_node
(
ve
.
node_off£t
);

4380 i‡(
	gmëa
->
	göv_˙t
+1 =
mëa
->
öv_max
)

4382 
mëa
->
öv_max
*=2;

4383 
	gmëa
->
	göv_kv
 = (
uöt16_t
*)
ªÆloc
(
mëa
->
öv_kv
,(uöt16_t)*mëa->
öv_max
);

4386 
	gmëa
->
	göv_kv
[
mëa
->
öv_˙t
++] = 
ve
.
kv_off£t
;

4387 
off£t_to_node
(
mëa
->
°¨t_off£t
)->
	gövÆid©ed_size
+=
ve
.
Àn
+
LK_SIZE
;

4388 i‡(
	gve
.
	gÀn
%2)

4389 
off£t_to_node
(
mëa
->
°¨t_off£t
)->
	gövÆid©ed_size
++;

4395 
•lô_‹_com∑˘
(
Node_off£t
 
node_off£t
)

4397 
Node_mëa
* 
	gmëa
;

4398 
	gmëa
 = 
off£t_to_node
(
node_off£t
);

4401  
	gmëa
->
	ggroup_size
 > mëa->
	gövÆid©ed_size
*2;

4419 #ifde‡
DOUBLE_LOG


4420 
Êush
(
Node_off£t
 
node_off£t
)

4422 
Node_mëa
* 
	gmëa
;

4423 
Node
* 
	gnode_d©a
;

4424 
	gmëa
 = 
off£t_to_node
(
node_off£t
);

4425 
	gnode_d©a
 = 
off£t_to_node_d©a
(
node_off£t
);

4426 i‡(
	gmëa
->
	g∑π
 =
PART_MAX
-1)

4428 
Node_off£t
 
°¨t_off£t
 = 
gë_°¨t_off£t
(
node_off£t
);

4429 i‡(
•lô_‹_com∑˘
(
°¨t_off£t
))

4432 i‡–
•lô
(
°¨t_off£t
) == -1)

4441 i‡–
com∑˘
(
°¨t_off£t
) == -1)

4448 
	gi
,
	gsize
;

4449 * 
	gkvp
;

4450 * 
	gbuf„r
;

4451 
uöt16_t
 
	gvl16
;

4453 
	gbuf„r
 = 
node_d©a
->
buf„r
+
mëa
->
size
;

4462 
uöt16_t
 
	gfú°_vl16
=0;

4468 
VÆueE¡ry
 
	gve
;

4469 
	gve
.
	gnode_off£t
 = 
node_off£t
;

4470 
	gi
=0;i<
	gmëa
->
	gÊush_˙t
;i++)

4475 
	gkvp
 = 
mëa
->
Êush_kv
[
i
];

4477 
	gvl16
 = *((
uöt16_t
*)
kvp
);

4478 i‡–(
	gvl16
 & 
	gINV_BIT
))

4484 
	gsize
 = 
LK_SIZE
+
vl16
;

4485 i‡(
	gfú°_vl16
)

4487 
mem˝y
(
buf„r
,
kvp
,
size
);

4491 
mem˝y
(
buf„r
+
PH_LEN_SIZE
 ,
kvp
+PH_LEN_SIZE ,
size
-PH_LEN_SIZE );

4492 
	gfú°_vl16
 = *((
uöt16_t
*)
kvp
);

4494 
	gve
.
	gkv_off£t
 = 
buf„r
-(*)
node_d©a
;

4495 
	gve
.
	gÀn
 = 
vl16
;

4496 
ö£π_poöt_íåy
((*)
kvp
+
PH_LEN_SIZE
 ,
ve
);

4497 
_mm_s„n˚
();

4498 *((
	guöt16_t
*)
	gkvp
Ë|
INV_BIT
;

4499 i‡(
	gsize
%2)

4500 
	gsize
++;

4501 
	gbuf„r
+=
size
;

4510 
	gbuf„r
[0] = 0;

4511 
	gbuf„r
[1] = 0;

4512 
pmem_≥rsi°
(
node_d©a
->
buf„r
+
mëa
->
size
,buf„r-“ode_d©a->buf„r+mëa->sizeË+ 
PH_LEN_SIZE
);

4515 
_mm_s„n˚
();

4518 
pmem_mem˝y
(
node_d©a
->
buf„r
+
mëa
->
size
,&
fú°_vl16
,
PH_LEN_SIZE
 ,
PMEM_F_MEM_NONTEMPORAL
);

4521 
_mm_s„n˚
();

4523 
	gmëa
->
	gsize
 = 
buf„r
-
node_d©a
->buffer;

4525 
	gmëa
->
	gÊush_˙t
 = 0;

4526 
	gmëa
->
	gÊush_size
 = 0;

4531 
Êush
(
Node_off£t
 
node_off£t
)

4555 
	g°d
::
©omic
<> 
•lô_queue_°¨t
[
SPLIT_NUM
];

4556 
	g°d
::
©omic
<> 
•lô_queue_íd
[
SPLIT_NUM
];

4557 
	g°d
::
©omic
<
Node_off£t
> 
•lô_queue
[
SPLIT_NUM
][
SPLIT_QUEUE_LEN
];

4558 
	g°d
::
©omic
<
uöt8_t
> 
•lô_queue_lock
[
SPLIT_NUM
];

4560 #ifde‡
idÀ_thªad


4562 
thªad_loˇl
 
PH_Thªad
* 
my_thªad
;

4563 
	#THREAD_RUN
 
my_thªad
->
ru¬ög
=1;

	)

4564 
	#THREAD_IDLE
 
my_thªad
->
ru¬ög
=0;

	)

4568 
	#THREAD_RUN


	)

4569 
	#THREAD_IDLE


	)

4573 #ifde‡
•lô_thªad


4574 * 
•lô_w‹k
(* 
iid
)

4576 
	gi
,
	gid
 = *((*)
iid
);

4577 
Node_off£t
 
	gnode_off£t
;

4579 
upd©e_‰ì_˙t
();

4582 
upd©e_‰ì_˙t
();

4583 
	g•lô_queue_°¨t
[
id
] < 
	g•lô_queue_íd
[id])

4585 
THREAD_RUN


4586 
upd©e_‰ì_˙t
();

4587 
	gi
 = 
•lô_queue_°¨t
[
id
].
„tch_add
(1);

4588 
	gnode_off£t
 = 
•lô_queue
[
id
][
i
%
SPLIT_QUEUE_LEN
];

4591 i‡(
åy_•lô
(
node_off£t
) == 0)

4594 i‡(
•lô_‹_com∑˘
(
node_off£t
))

4596 i‡(
•lô2p
(
node_off£t
) < 0)

4597 
dec_ªf
(
node_off£t
);

4601 i‡(
com∑˘2p
(
node_off£t
) < 0)

4602 
dec_ªf
(
node_off£t
);

4606 
	gTHREAD_IDLE


4608 
u¶ìp
(1);

4610 i‡(
	g•lô_queue_íd
[
id
] == -1)

4613 
˛ón_thªad_loˇl
();

4614  
	gNULL
;

4617 
thªad_loˇl
 
	g•lô_ödex
=0;

4618 
add_•lô
(
Node_off£t
 
node_off£t
)

4621 
	gj
;

4622 
	gj
=0;j<
	gnum_of_•lô
;j++)

4624 
	g•lô_ödex
++;

4625 i‡(
	g•lô_ödex
>=
num_of_•lô
)

4626 
•lô_ödex
 = 0;

4629 i‡(
	g•lô_queue_íd
[
•lô_ödex
] - 
	g•lô_queue_°¨t
[•lô_ödex] < 
	gSPLIT_MAX
 && 
åy_©_lock
(
•lô_queue_lock
[split_index]))

4633 
Node_mëa
* 
	gmëa
 = 
off£t_to_node
(
node_off£t
);

4634 
	gmëa
->
	g°©e
 = 2;

4635 
	g•lô_queue
[
•lô_ödex
][
•lô_queue_íd
[•lô_ödex]%
	gSPLIT_QUEUE_LEN
] = 
node_off£t
;

4636 
	g•lô_queue_íd
[
•lô_ödex
]++;

4637 
	g•lô_queue_lock
[
•lô_ödex
] = 0;

4638 
	g•lô_ödex
++;

4647 
öô_•lô
()

4649 
	gi
;

4650 
	gi
=0;i<
	gnum_of_•lô
;i++)

4651 
	g•lô_queue_lock
[
i
] = 
•lô_queue_°¨t
[i] = 
•lô_queue_íd
[i] = 0;

4654 
˛ón_•lô
()

4656 
	gi
;

4657 
	gi
=0;i<
	gnum_of_•lô
;i++)

4659 
¥ötf
("•lôÅhªad %d qê%d\n",
i
,()
•lô_queue_íd
[i]);

4660 
	g•lô_queue_íd
[
i
] = -1;

4665 
sˇn_node
(
Node_off£t
 
off£t
,* 
key
,
ªsu…_ªq
,
°d
::
°rög
* 
sˇn_ªsu…
)

4669 
uöt64_t
 
ãmp_key
[100*
PART_MAX
],
	gtk
;

4671 * 
	gãmp_off£t
[100*
PART_MAX
], *
	gto
;

4672 
	gtc
=0;

4674 
	g˙t
=0;

4675 
uöt64_t
 
	g°¨t_key
 = *(uöt64_t*)
key
;

4678 * 
	gbuf„r
;

4679 * 
	gbuf„r_íd
;

4681 
Node
* 
	gnode_d©a
;

4682 
Node_mëa
* 
	gnode_mëa
;

4693 
	g∑π0
=0;

4694 c⁄° 
	gmëa_size
 = 
d0
[0].
buf„r
-(*)&d0[0];

4696 
Node_off£t
 
	gnode_off£t
 = 
off£t
;

4717 
	gnode_off£t
 = 
off£t
;

4721 
	gnode_mëa
 = 
off£t_to_node
(
node_off£t
);

4722 
	gnode_d©a
 = 
off£t_to_node_d©a
(
node_off£t
);

4724 
˝256
((*)&
d0
[
∑π0
],(*)
node_d©a
,
node_mëa
->
size
 + 
mëa_size
);

4727 
	g∑π0
++;

4731 
	gnode_off£t
 = 
node_mëa
->
√xt_off£t_ig
;

4732 i‡(
	gnode_off£t
 =
INIT_OFFSET
)

4744 
	gi
,
	gj
,
	gk
;

4745 
uöt16_t
 
	gsize
;

4748 
	gnode_off£t
 = 
off£t
;

4750 
	gi
 = 0;

4754 
	gnode_mëa
 = 
off£t_to_node
(
node_off£t
);

4755 
	gnode_d©a
 = &
d0
[
i
];

4756 
	gbuf„r
 = 
node_d©a
->
buf„r
;

4757 
	gbuf„r_íd
 = 
buf„r
 + 
node_mëa
->
size
;

4758 
s‹t_öv
(
node_mëa
->
öv_˙t
,node_mëa->
öv_kv
);

4759 
	gj
 = 0;

4760 
	gnode_mëa
->
	göv_kv
[
node_mëa
->
öv_˙t
] = 0;

4762 
	gbuf„r
 < 
	gbuf„r_íd
)

4764 
	gsize
 = *((
uöt16_t
*)
buf„r
);

4765 i‡(((*)
	gnode_d©a
 + 
	gnode_mëa
->
	göv_kv
[
j
] =
buf„r
) )

4767 
j
++;

4768 
	gsize
&~(
INV_BIT
);

4772 
	gãmp_key
[
tc
] = *((
uöt64_t
*)(
buf„r
+
PH_LEN_SIZE
));

4774 
	gãmp_off£t
[
tc
] = 
buf„r
;

4775 
	gtc
++;

4777 
	gbuf„r
+=
size
+
LK_SIZE
;

4787 
	gnode_off£t
 = 
node_mëa
->
√xt_off£t_ig
;

4788 i‡(
	gnode_off£t
 =
INIT_OFFSET
)

4790 
	gi
++;

4795 
	gj
=0;j<
	gtc
;j++)

4797 
	gk
=
j
+1;k<
	gtc
;k++)

4799 i‡(
	gãmp_key
[
j
] >Åemp_key[
k
])

4801 
	gtk
 = 
ãmp_key
[
j
];

4802 
	gãmp_key
[
j
] = 
ãmp_key
[
k
];

4803 
	gãmp_key
[
k
] = 
tk
;

4804 
	gto
 = 
ãmp_off£t
[
j
];

4805 
	gãmp_off£t
[
j
] = 
ãmp_off£t
[
k
];

4806 
	gãmp_off£t
[
k
] = 
to
;

4811 
	gi
=0;i<
	gtc
;i++)

4813 i‡(
	g°¨t_key
 > 
	gãmp_key
[
i
])

4815 
	gsˇn_ªsu…
[
˙t
].
assign
((*)(
ãmp_off£t
[
i
]),*(
uöt16_t
*Èemp_off£t[i] + 
LK_SIZE
);

4816 
	g˙t
++;

4817 i‡(
	gªsu…_ªq
 <
˙t
)

4822  
	g˙t
;

	@data.h

3 
	~<±hªad.h
>

4 
	~<©omic
>

6 
	~<sys/mm™.h
>

8 
	~"globÆ.h
"

9 
	~"quîy.h
"

22 
«me•a˚
 
	gPH


25 vﬁ©ûê
fûe_num
;

27 
	#INV_BIT
 ((
uöt16_t
)1<<15)

	)

28 
	#LOG_BIT
 ((
uöt16_t
)1<<15)

	)

31 
	#SPLIT_QUEUE_LEN
 500

	)

32 
	#SPLIT_MAX
 
SPLIT_QUEUE_LEN
-10

	)

47 
	sSˇn_li°


49 * 
	gquîy
;

50 
Sˇn_li°
* 
	g√xt
;

53 
	sNode


67 
Node_off£t
 
	g√xt_off£t
;

69 
Node_off£t
 
	g√xt_off£t_ig
;

72 
uöt16_t
 
	gc⁄töue_Àn
;

73 
	g∑ddög
[8-2];

75 
	gbuf„r
[
NODE_BUFFER
];

80 
	sNode_mëa


87 vﬁ©ûê
uöt32_t
 
	g√xt_off£t
;

89 
Node_off£t
 
	g√xt_off£t_ig
;

91 vﬁ©ûê
uöt32_t
 
	g¥ev_off£t
;

93 
Node_off£t
 
	g°¨t_off£t
;

94  
Node_off£t
 
	gíd_off£t
;

96 
	g°d
::
©omic
<
uöt8_t
> 
°©e
;

97 
uöt8_t
 
	g∑π
;

99 
uöt16_t
 
	gc⁄töue_Àn
;

107  
uöt16_t
 
	gsize
;

108 
uöt16_t
 
	gövÆid©ed_size
;

109 
uöt16_t
 
	ggroup_size
;

127 
Sˇn_li°
* 
	gsˇn_li°
;

131 
uöt16_t
* 
	göv_kv
;

132 
uöt16_t
 
	göv_˙t
;

133 
uöt16_t
 
	göv_max
;

135 #ifde‡
DOUBLE_LOG


136 
uöt16_t
 
	gÊush_size
;

138 
uöt16_t
 
	gÊush_˙t
;

139 
uöt16_t
 
	gÊush_max
;

140 ** 
	gÊush_kv
;

142 
	g∑ddög
[8];

146 ** 
mëa_addr
;

147 
Node_mëa
** 
mëa_¨øy
;

148 ** 
pmem_addr
;

149 
Node
** 
node_d©a_¨øy
;

151 
	#FILE_SIZE
 (
Node
)*(1<<16)

	)

152 
	#META_SIZE
 (
Node_mëa
)*(1<<16)

	)

153 
	#MAX_FILE_NUM
 (1 << 16)

	)

154 
	#MAX_OFFSET
 (1 << 16)

	)

156 
öô_fûe
();

157 
öô_d©a
();

158 
˛ón_d©a
();

179 
ölöe
 
Node_mëa
* 
off£t_to_node
(
Node_off£t
 &
off£t
)

181  &
	gmëa_¨øy
[
off£t
.
fûe
][offset.offset];

185 
ölöe
 
Node
* 
off£t_to_node_d©a
(
Node_off£t
 &
off£t
)

187  (
	gNode
*)(
	gpmem_addr
[
off£t
.
fûe
] + (NodeË* 
	goff£t
.offset);

210 
dñëe_kv
(* 
kv_p
);

212 * 
ö£π_kv
(
Node_off£t
& 
off£t
,* 
key
,* 
vÆue
,
vÆue_Àngth
);

213 
•lô
(
Node_off£t
 
off£t
);

214 
•lô2p
(
Node_off£t
 
off£t
);

217 
com∑˘
(
Node_off£t
 
off£t
);

218 
com∑˘2p
(
Node_off£t
 
off£t
);

220 
Êush
(
Node_off£t
 
off£t
);

221 
Node_off£t
 
≠≥nd_node
(Node_off£t& 
off£t
);

224 
¥öt_kv
(* 
kv_p
);

228 
adv™˚_off£t
(
Quîy
 *
quîy
);

232 
c›y_™d_s‹t_node
(
Quîy
 *
quîy
);

233 
ö£π_sˇn_li°
(
Node_off£t
 &
node
,* 
quîy
);

234 
dñëe_sˇn_íåy
(
Node_off£t
 &
sˇn_off£t
,* 
quîy
);

236 
©_lock
(
°d
::
©omic
<
uöt8_t
> &
lock
);

237 
ölöe
 
©_u∆ock
(
°d
::
©omic
<
uöt8_t
> &
lock
)

239 
lock
 = 0;

241 
ölöe
 
åy_©_lock
(
°d
::
©omic
<
uöt8_t
> &
lock
)

243 
uöt8_t
 
z
 = 0;

244  
	glock
.
com∑ª_exch™ge_°r⁄g
(
z
,1);

248 
övÆid©e_kv
(
VÆueE¡ry
& 
ve
);

249 
•lô_‹_com∑˘
(
Node_off£t
 
node_off£t
);

250 
ölöe
 
gë_c⁄töue_Àn
(
Node_off£t
 
node_off£t
)

252  
off£t_to_node
(
node_off£t
)->
	gc⁄töue_Àn
;

255 
ölöe
 
Node_off£t
 
gë_°¨t_off£t
(Node_off£t& 
node_off£t
)

257  
off£t_to_node
(
node_off£t
)->
	g°¨t_off£t
;

259 
ölöe
 
move_to_íd_off£t
(
Node_off£t
& 
node_off£t
)

261 
	gnode_off£t
 = 
off£t_to_node
(
node_off£t
)->
íd_off£t
;

264 
ölöe
 
öc_ªf
(
Node_off£t
 
off£t
)

266  
åy_©_lock
(
off£t_to_node
(
off£t
)->
°©e
);

268 
ölöe
 
dec_ªf
(
Node_off£t
 
off£t
)

270 
©_u∆ock
(
off£t_to_node
(
off£t
)->
°©e
);

275 #ifde‡
•lô_thªad


276 
ölöe
 
åy_•lô
(
Node_off£t
 
off£t
)

278 
uöt8_t
 
	gt
=2;

279 
Node_mëa
* 
	gmëa
 = 
off£t_to_node
(
off£t
);

280  (
	gmëa
->
	g°©e
 =2Ë&& 
mëa
->
°©e
.
com∑ª_exch™ge_°r⁄g
(
t
,1);

282 * 
•lô_w‹k
(* 
id
);

283 
add_•lô
(
Node_off£t
 
node_off£t
);

284 
ölöe
 
√ed_•lô
(
Node_off£t
 
node_off£t
,
vÆue_Àn
)

286 
Node_mëa
* 
	gmëa
 = 
off£t_to_node
(
node_off£t
);

287  (
	gmëa
->
	g∑π
 =
PART_MAX
-1);

290 
öô_•lô
();

291 
˛ón_•lô
();

294 
sˇn_node
(
Node_off£t
 
off£t
,* 
key
,
ªsu…_ªq
,
°d
::
°rög
* 
sˇn_ªsu…
);

296 
öô_d©a_loˇl
();

297 
˛ón_thªad_loˇl
();

	@global.cpp

1 
	~<°rög.h
>

3 
	~"globÆ.h
"

6 
	~"d©a.h
"

7 
	~"thªad.h
"

8 
	~"hash.h
"

12 
«me•a˚
 
	gPH


15 
	gnum_of_thªad
;

20 
	gnum_of_•lô
;

25 
	gpoöt_hash_èbÀ_size
;

26 * 
	gønge_hash_èbÀ_size
;

29 
	gnode_size
;

31 
	gkey_size
;

32 
	gÀn_size
;

33 
	gvÆue_size
;

34 
	gíåy_size
;

35 
	gkey_bô
;

39 
uöt64_t
 
	gpmem_size
;

40 
	gpmem_fûe
[100];

43 
	gem±y
[10];

44 
	gem±y_Àn
;

46 
˛ón
()

48 
¥ötf
("clean\n");

49 
˛ón_hash
();

50 
˛ón_thªad
();

51 
˛ón_d©a
();

53 
ãmp_°©ic_c⁄f
(
ä
, 
ks
,
vs
)

55 #ifde‡
•lô_thªad


56 
	gnum_of_•lô
 = 
SPLIT_NUM
;

58 
	gnum_of_•lô
 = 0;

63 
	gä
 = 24;

65 
	gnum_of_thªad
 = 
ä
 + 
num_of_•lô
;

73 
	gÀn_size
 = 2;

75 
	gkey_size
 = 
ks
;

76 
	gvÆue_size
 = 
vs
;

77 
	gíåy_size
 = 
key_size
 + 
Àn_size
 + 
vÆue_size
;

78 
	gkey_bô
 = 
ks
 * 8;

80 
	gpoöt_hash_èbÀ_size
 = 10*1000*1000;

83 
	gpmem_size
 = (
uöt64_t
)1024*1024*1024*80;

93 
	gem±y_Àn
 = 
°æí
("empty");

94 
mem˝y
(
em±y
,"em±y",
em±y_Àn
);

95 
	gem±y
[
em±y_Àn
] = 0;

97 
mem˝y
(
pmem_fûe
,"/m¡/pmem0/",
°æí
("/mnt/pmem0/"));

98 
	gpmem_fûe
[
°æí
("/mnt/pmem0/")] = 0;

100 
öô_fûe
();

101 #ifde‡
DOUBLE_LOG


102 
öô_log
();

104 
öô_thªad
();

105 
öô_hash
();

106 
öô_d©a
();

	@global.h

1 #¥agm®
⁄˚


5 
	~<°döt.h
>

28 
	#NSK
 1

	)

29 
	#NODE_BUFFER
 1024*
NSK
-4-4-8

	)

32 
	#PART_MAX
 4

	)

36 #i‡
PART_MAX
 == 1

37 
	#PM_N
 1

	)

39 
	#PM_N
 4

	)

42 
	#PAGE_SIZE
 4096

	)

53 #ifde‡
•lô_thªad


54 
	#SPLIT_NUM
 4

	)

56 
	#SPLIT_NUM
 0

	)

59 
«me•a˚
 
	gPH


62 
	sNode_off£t


64 
uöt16_t
 
	gfûe
;

65 
uöt16_t
 
	goff£t
;

66 
boﬁ
 
	g›î©‹
==(c⁄° 
Node_off£t
 &
v
Ë{  (
fûe
 =v.fûeË&& (
off£t
 == v.offset); }

67 
boﬁ
 
	g›î©‹
!=(c⁄° 
Node_off£t
 &
v
Ë{  (
fûe
 !v.fûeË|| (
off£t
 != v.offset); }

78 c⁄° 
Node_off£t
 
	gINIT_OFFSET
={0,0};

79 c⁄° 
Node_off£t
 
	gSPLIT_OFFSET
={0,1};

80 c⁄° 
Node_off£t
 
	gHEAD_OFFSET
={0,2};

81 c⁄° 
Node_off£t
 
	gTAIL_OFFSET
={0,3};

83 
	sNode_off£t_u


87 
Node_off£t
 
	gno
;

88 
uöt32_t
 
	gno_32
;

92 c⁄° 
Node_off£t_u
 
	gTAIL_OFFSET_u
 = {0,3};

101 
	sVÆueE¡ry


104 
Node_off£t
 
	gnode_off£t
;

105 
uöt16_t
 
	gkv_off£t
;

106 
uöt16_t
 
	gÀn
;

150 
	sVÆueE¡ry_u


154 
VÆueE¡ry
 
	gve
;

155 
uöt64_t
 
	gve_64
;

159 
num_of_thªad
;

164 
num_of_•lô
;

167 
	#USE_DRAM
 0

	)

171 
poöt_hash_èbÀ_size
;

172 * 
ønge_hash_èbÀ_size
;

174 
	#PH_KEY_SIZE
 8

	)

175 
	#PH_LEN_SIZE
 2

	)

176 
	#LK_SIZE
 
PH_KEY_SIZE
+
PH_LEN_SIZE


	)

180 
vÆue_size
;

181 
íåy_size
;

182 
key_bô
;

193 
uöt64_t
 
pmem_size
;

194 
pmem_fûe
[100];

197 
em±y
[10];

198 
em±y_Àn
;

200 
ãmp_°©ic_c⁄f
(
ä
,
ks
,
vs
);

201 
˛ón
();

	@hash.cpp

1 
	~<°dlib.h
>

3 
	~<°dio.h
>

5 
	~<x86öåö.h
>

7 
	~"globÆ.h
"

8 
	~"hash.h
"

9 
	~"c˚h.h
"

11 
	~"d©a.h
"

15 
«me•a˚
 
	gPH


18 
CCEH
* 
	gpoöt_hash
;

19 
CCEH
* 
	gønge_hash_¨øy
;

23 
	#¥öt
 0

	)

28 
uöt64_t
 
	ghâ1
,
	ghâ2
,
	ghâ3
,
	gÂc
,
	ghâ4
,
	ghâ5
,
	gÂc2
;

30 
uöt64_t
 
	g¥e_bô_mask
[128+1];

31 
uöt64_t
 
	g¥e_bô_mask2
[128+1];

34 * 
decode_íåy
(* 
íåy
, * 
vÆue_Àn_p
)

38 * 
	g±r
;

40 i‡(
	gvÆue_Àn_p
 !
NULL
)

41 *
vÆue_Àn_p
 = ((
uöt64_t
)
íåy
 >> 16) % (256*256);

42 
	g±r
 = (*)((
uöt64_t
)
off£t_to_node_d©a
((uöt64_t)
íåy
 >> 32) | ((uint64_t)entry % (256*256)));

43  
	g±r
;

51 * 
ícode_íåy
(* 
±r
, 
vÆue_Àn
)

55 * 
	gíåy
;

57 
	gíåy
 = (*)(((
uöt64_t
)
ˇlc_off£t_d©a
(
±r
Ë<< 32Ë| (
vÆue_Àn
 << 16) | ((uint64_t)ptr % (256*256)));

59  
	gíåy
;

70 
¥öt64
(
uöt64_t
 
v
)

72 
	gi
;

73 
uöt64_t
 
	gmask
;

74 
	gmask
 = (
uöt64_t
)1 << 63;

75 
	gi
=0;i<64;i++)

77 i‡(
	gv
 & 
	gmask
)

78 
¥ötf
("1");

80 
¥ötf
("0");

81 
	gmask
/=2;

83 
¥ötf
("\n");

86 
hash_fun˘i⁄
(c⁄° *
buf
 )

88 
	ghash
 = 5381;

89 
	gÀn
=
PH_KEY_SIZE
;

90 
	gÀn
--)

91 
	ghash
 = ((
hash
 << 5Ë+ hashË+ (*
buf
++);

92  
	ghash
;

95 
VÆueE¡ry
 
föd_poöt_íåy
(* &
key_p
)

97 #ifde‡
hâ


98 
time•ec
 
	gts1
,
	gts2
;

99 
˛ock_gëtime
(
CLOCK_MONOTONIC
,&
ts1
);

100 
	gÂc
++;

101 
_mm_m„n˚
();

105 
VÆueE¡ry
 
	gíåy
;

107 
	gíåy
 = 
poöt_hash
->
föd
(
key_p
);

113 #ifde‡
hâ


114 
_mm_m„n˚
();

115 
˛ock_gëtime
(
CLOCK_MONOTONIC
,&
ts2
);

116 
	ghâ1
+=(
ts2
.
tv_£c
-
ts1
.tv_£c)*1000000000+ts2.
tv_n£c
-ts1.tv_nsec;

118  
	gíåy
;

121 vﬁ©ûê
uöt64_t
* 
föd_‹_ö£π_poöt_íåy
(* &
key_p
,* 
u∆ock
)

123 #ifde‡
hâ


124 
time•ec
 
	gts1
,
	gts2
;

125 
˛ock_gëtime
(
CLOCK_MONOTONIC
,&
ts1
);

126 
	gÂc2
++;

127 
_mm_m„n˚
();

131 vﬁ©ûê
uöt64_t
* 
	gíåy_p
;

132 
VÆueE¡ry
 
	gve
;

133 
	gve
.
	gkv_off£t
 = 0;

134 
	gve
.
	gnode_off£t
 = 
INIT_OFFSET
;

135 (
	gíåy_p
=
poöt_hash
->
ö£π
(–
key_p
),
ve
,
u∆ock
)Ë=
NULL
);

141 #ifde‡
hâ


142 
_mm_m„n˚
();

143 
˛ock_gëtime
(
CLOCK_MONOTONIC
,&
ts2
);

144 
	ghâ5
+=(
ts2
.
tv_£c
-
ts1
.tv_£c)*1000000000+ts2.
tv_n£c
-ts1.tv_nsec;

146  
	gíåy_p
;

149 
u∆ock_íåy
(* 
u∆ock
)

151 
	gpoöt_hash
->
u∆ock_íåy2
(
u∆ock
);

154 
ö£π_poöt_íåy
(* 
key_p
,
VÆueE¡ry
& 
ve
)

156 #ifde‡
hâ


157 
time•ec
 
	gts1
,
	gts2
;

158 
˛ock_gëtime
(
CLOCK_MONOTONIC
,&
ts1
);

159 
_mm_m„n˚
();

162 
	gpoöt_hash
->
ö£π
(–
key_p
),
ve
) == 0);

163 #ifde‡
hâ


164 
_mm_m„n˚
();

166 
˛ock_gëtime
(
CLOCK_MONOTONIC
,&
ts2
);

167 
	ghâ3
+=(
ts2
.
tv_£c
-
ts1
.tv_£c)*1000000000+ts2.
tv_n£c
-ts1.tv_nsec;

171 
ªmove_poöt_íåy
(* &
key_p
)

174 
	gpoöt_hash
->
ªmove
(
key_p
);

178 
bô_Êush
(* 
¥efix
,* 
key_p
,
°¨t
,
íd
)

181 
	gi
,
	g°¨t_byã
,
	gíd_byã
,
	gèrgë_byã
;

182 
	gbô_cou¡
,
	gbô_mask
;

183 i‡(
	gkey_p
 =
NULL
)

185 
°¨t_byã
 = 
°¨t
 / 8+1;

186 
	gíd_byã
 = 
íd
 / 8;

187 
	gi
=
°¨t_byã
;i<=
íd_byã
;i++)

188 
	g¥efix
[
key_size
-1 - 
i
] = 0;

189 
	gèrgë_byã
 = 
°¨t_byã
 -1;

190 
	gbô_cou¡
 = 8-
°¨t
%8;

192 i‡(
	gbô_cou¡
 == 8)

193 
¥efix
[
key_size
-1 - 
èrgë_byã
] = 0;

196 
	gbô_mask
 = ~((1 << (
bô_cou¡
))-1);

197 
	g¥efix
[
key_size
-1 - 
èrgë_byã
] = 
¥efix
[key_size-1 -Å¨gë_byã] & 
bô_mask
;

203 
	g°¨t_byã
 = 
°¨t
 / 8;

204 
	gíd_byã
 = 
íd
 / 8 -1;

205 
	gi
=
°¨t_byã
;i<=
íd_byã
;i++)

206 
	g¥efix
[
key_size
-1 - 
i
] = 
key_p
[key_size-1 - i];

207 
	gèrgë_byã
 = 
íd_byã
+1;

208 
	gbô_cou¡
 = 8 - (
íd
 % 8 + 1);

210 i‡(
	gbô_cou¡
 == 0)

211 
¥efix
[
key_size
-1 - 
èrgë_byã
] = 
key_p
[key_size-1 -Åarget_byte];

214 
	gbô_mask
 = ~((1 << (
bô_cou¡
))-1);

215 
	g¥efix
[
key_size
-1 - 
èrgë_byã
] = 
key_p
[key_size-1 -Å¨gë_byã] & 
bô_mask
;

221 
Node_off£t
 
föd_ønge_íåy2
(* &
key_p
,* 
c⁄töue_Àn
)

223 #ifde‡
hâ


224 
time•ec
 
	gts1
,
	gts2
;

225 
˛ock_gëtime
(
CLOCK_MONOTONIC
,&
ts1
);

227 
_mm_m„n˚
();

231 
	gmö
,
	gmax
,
	gmid
;

232 
Node_off£t
 
	ghash
;

234 
	g¥efix
[16] = {0,};

235 * 
	g¥efix2
=0;

236 * 
	gkey_p2
=0;

244 i‡(
	gÁl£
 && *
	gc⁄töue_Àn
 > 0)

247 
	ghash
 = 
föd_ønge_íåy
(
key_p
,
c⁄töue_Àn
);

248 #ifde‡
hâ


249 
_mm_m„n˚
();

250 
˛ock_gëtime
(
CLOCK_MONOTONIC
,&
ts2
);

251 
	ghâ2
+=(
ts2
.
tv_£c
-
ts1
.tv_£c)*1000000000+ts2.
tv_n£c
-ts1.tv_nsec;

253  
	ghash
;

256 i‡(
	gPH_KEY_SIZE
 > 8)

258 
	g¥efix2
 = 
¥efix
+8;

259 
	gkey_p2
 = 
key_p
+8;

262 
	gmax
 = 
PH_KEY_SIZE
*8;

263 
	gmö
 = 0;

264 
	gmid
 = (
mö
+
max
)/2;

279 
VÆueE¡ry
 
	gve
;

282 *(
	guöt64_t
*)
	g¥efix
 = *(
uöt64_t
*)
key_p
 & 
¥e_bô_mask
[
mid
];

283 i‡(
	g¥efix2
)

284 *(
	guöt64_t
*)
	g¥efix2
 = *(
uöt64_t
*)
key_p2
 & 
¥e_bô_mask2
[
mid
];

291 
	gve
 = 
ønge_hash_¨øy
[
mid
].
föd
(
¥efix
);

294 i‡(
	gve
.
	gnode_off£t
 =
INIT_OFFSET
)

296 
max
 = 
mid
;

303 i‡(
	gve
.
	gnode_off£t
 =
SPLIT_OFFSET
)

307 *
c⁄töue_Àn
 = 
mid
;

309 i‡(
	gmid
+1 =
max
)

310 
mö
 = 
mid
+1;

312 
	gmö
 = 
mid
;

317 #ifde‡
hâ


318 
_mm_m„n˚
();

320 
˛ock_gëtime
(
CLOCK_MONOTONIC
,&
ts2
);

321 
	ghâ2
+=(
ts2
.
tv_£c
-
ts1
.tv_£c)*1000000000+ts2.
tv_n£c
-ts1.tv_nsec;

324 *
	gc⁄töue_Àn
 = 
mid
;

325  
	gve
.
	gnode_off£t
;

328 i‡(
	gmid
 =(
mö
+
max
)/2)

339  
INIT_OFFSET
;

341 
	gmid
 = (
mö
+
max
)/2;

345 
¥ötf
("never come here\n");

347  
	gINIT_OFFSET
;

351 
Node_off£t
 
föd_ønge_íåy
(* 
key_p
,* 
c⁄töue_Àn
)

353 #ifde‡
hâ


354 
time•ec
 
	gts1
,
	gts2
;

355 
˛ock_gëtime
(
CLOCK_MONOTONIC
,&
ts1
);

357 
_mm_m„n˚
();

361 
	gi
;

362 
	ghash
;

364 
	g¥efix
[16] = {0,};

367 * 
	g¥efix2
;

368 * 
	gkey_p2
;

369 
uöt64_t
 
	gb
;

371 
VÆueE¡ry
 
	gve
;

376 i‡(*
	gc⁄töue_Àn
 < 64)

378 
	gb
 = ((
uöt64_t
)1 << *
c⁄töue_Àn
) -1;

379 
	gb
 = 
b
 << (64-*
c⁄töue_Àn
);

380 *((
	guöt64_t
*)
	g¥efix
Ë(
b
 & *((
uöt64_t
*)
key_p
));

381 
	gb
 = (
uöt64_t
)1 << (63 -*
c⁄töue_Àn
);

385 *((
	guöt64_t
*)
	g¥efix
Ë(*((
uöt64_t
*)
key_p
));

388 i‡(
	g¥öt
)

389 
¥ötf
("key %lx cÀ¿%d\n",*((
uöt64_t
*)
key_p
),*
c⁄töue_Àn
);

390 
	gi
=*
c⁄töue_Àn
;i<=64;i++)

394 i‡(
	g¥öt
)

395 
¥ötf
("¥efix %lx\n",*((
uöt64_t
*)
¥efix
));

398 
	gve
 = 
ønge_hash_¨øy
[
i
].
föd
(
¥efix
);

401 i‡(
	gve
.
	gnode_off£t
 !
SPLIT_OFFSET
)

403 *
c⁄töue_Àn
 = 
i
;

404 #ifde‡
hâ


405 
_mm_m„n˚
();

407 
˛ock_gëtime
(
CLOCK_MONOTONIC
,&
ts2
);

408 
	ghâ2
+=(
ts2
.
tv_£c
-
ts1
.tv_£c)*1000000000+ts2.
tv_n£c
-ts1.tv_nsec;

410  
	gve
.
	gnode_off£t
;

413 (*((
	guöt64_t
*)
	g¥efix
)Ë|(*((
uöt64_t
*)
key_p
Ë& 
b
);

414 
	gb
 = 
b
 >> 1;

418 
	g¥efix2
 = 
¥efix
+8;

419 
	gkey_p2
 = 
key_p
+8;

420 i‡(*
	gc⁄töue_Àn
 < 128)

422 
	gb
 = ((
uöt64_t
)1 << *
c⁄töue_Àn
) -1;

423 
	gb
 = 
b
 << (64-*
c⁄töue_Àn
);

424 *((
	guöt64_t
*)
	g¥efix2
Ë(
b
 & *((
uöt64_t
*)
key_p2
));

427 *((
	guöt64_t
*)
	g¥efix2
Ë(*((
uöt64_t
*)
key_p2
));

428 
	gb
 = (
uöt64_t
)1 << (128-1 -*
c⁄töue_Àn
);

431 
	gi
=64+1;i<=
key_bô
;i++)

434 
	gve
 = 
ønge_hash_¨øy
[
i
].
föd
(
¥efix
);

436 i‡(
	gve
.
	gnode_off£t
 !
SPLIT_OFFSET
)

438 *
c⁄töue_Àn
 = 
i
;

439 #ifde‡
hâ


440 
_mm_m„n˚
();

442 
˛ock_gëtime
(
CLOCK_MONOTONIC
,&
ts2
);

443 
	ghâ2
+=(
ts2
.
tv_£c
-
ts1
.tv_£c)*1000000000+ts2.
tv_n£c
-ts1.tv_nsec;

445  
	gve
.
	gnode_off£t
;

448 (*((
	guöt64_t
*)
	g¥efix2
)Ë|(*((
uöt64_t
*)
key_p2
Ë& 
b
);

449 
	gb
 = 
b
 >> 1;

454 
¥ötf
("range hashÉrror\n");

455  
	gINIT_OFFSET
;

458 #ifde‡
HASH_TEST


460 
uöt64_t
 
	gö£π_log
[65][1000000];

461 
	gö£π_a
[65][1000000];

462 
	gö£π_b
[65][1000000];

463 
	g°d
::
©omic
<> 
Œ
[65];

466 
föd_ö_log
(* 
key_p
,
Àn
)

468 
	gi
,
	gŒi
;

469 
uöt64_t
 
	gv
 = *((uöt64_t*)
key_p
);

470 
	gŒi
 = 
Œ
[
Àn
];

471 
	gi
=0;i<
	gŒi
;i++)

473 i‡((
	gö£π_log
[
Àn
][
i
] & 
	g¥e_bô_mask
[Àn]Ë=(
v
 & 
¥e_bô_mask
[len]))

475 
¥ötf
("found %d %d\n",
ö£π_a
[
Àn
][
i
],
ö£π_b
[len][i]);

479 
¥ötf
("nŸ found %d\n",
Œi
);

482 
föd_ö_log
(* 
key_p
,
Àn
)

484 
¥ötf
("HASH TEST DISABLED\n");

491 
ö£π_ønge_íåy
(* 
key_p
,
Àn
,
Node_off£t
 
off£t
)

503 #ifde‡
hâ


504 
time•ec
 
	gts1
,
	gts2
;

505 
˛ock_gëtime
(
CLOCK_MONOTONIC
,&
ts1
);

507 
_mm_m„n˚
();

510 
	g¥efix
[16] = {0,};

530 i‡(
	gÀn
 <= 64)

531 *((
uöt64_t
*)
¥efix
Ë(
¥e_bô_mask
[
Àn
] & *((uöt64_t*)
key_p
));

534 * 
	g¥efix2
 = 
¥efix
+8;

535 * 
	gkey_p2
 = 
key_p
+8;

536 *((
	guöt64_t
*)
	g¥efix
Ë*((
uöt64_t
*)
key_p
);

537 *((
	guöt64_t
*)
	g¥efix2
Ë(
¥e_bô_mask2
[
Àn
] & *((
uöt64_t
*)
key_p2
));

542 i‡(
	g¥öt
)

543 
¥ötf
("key_∞%lxÑ™gê%lxÜí %d off£à%d/%d in£π\n",*((
uöt64_t
*)
key_p
),*((uöt64_t*)
¥efix
),
Àn
,
off£t
.
fûe
,offset.offset);

549 
VÆueE¡ry
 
	gve
;

550 
	gve
.
	gnode_off£t
 = 
off£t
;

552 
	gønge_hash_¨øy
[
Àn
].
ö£π
(
¥efix
,
ve
) == 0);

554 #ifde‡
hâ


555 
_mm_m„n˚
();

556 
˛ock_gëtime
(
CLOCK_MONOTONIC
,&
ts2
);

557 
	ghâ4
+=(
ts2
.
tv_£c
-
ts1
.tv_£c)*1000000000+ts2.
tv_n£c
-ts1.tv_nsec;

562 
öô_hash
()

565 
	gi
;

567 
	g¥e_bô_mask
[0] = 0;

569 
	gi
=1;i<=64;i++)

570 
	g¥e_bô_mask
[
i
] = (
¥e_bô_mask
[i-1] >> 1Ë+ ((
uöt64_t
)1 << 63);

571 
	gi
=64+1;i<=128;i++)

572 
	g¥e_bô_mask
[
i
] = 
¥e_bô_mask
[64];

573 
	gi
=1;i<=64;i++)

574 
	g¥e_bô_mask2
[
i
] = 
¥e_bô_mask
[64];

575 
	gi
=64+1;i<=128;i++)

576 
	g¥e_bô_mask2
[
i
] = 
¥e_bô_mask
[i-64];

579 
öô_c˚h
();

581 
	gpoöt_hash
 = 
√w
 
CCEH
(10);

582 
	gønge_hash_¨øy
 = 
√w
 
CCEH
[64+1];

592 
	ghâ4
 = 
hâ3
 = 
hâ5
 = 
hâ1
 = 
hâ2
 = 0;

593 
	gÂc2
 = 
Âc
 = 1;

598 
˛ón_hash
()

601 
¥ötf
("clean hash\n");

622 
dñëe
 
	gpoöt_hash
;

623 
	gdñëe
[] 
	gønge_hash_¨øy
;

625 
˛ón_c˚h
();

626 #ifde‡
hâ


627 
¥ötf
("hash\n");

628 
¥ötf
("poöàªad %ld %ld\n",
hâ1
/1000000000,htt1%1000000000);

629 
¥ötf
("poöàªadávg %ld %ld %ld\n",(
hâ1
/
Âc
)/1000000000,(htt1/fpc)%1000000000,fpc);

630 
¥ötf
("poöàªad2 %ld %ld\n",
hâ5
/1000000000,htt5%1000000000);

631 
¥ötf
("poöàªad2ávg %ld %ld %ld\n",(
hâ5
/
Âc2
)/1000000000,(htt5/fpc2)%1000000000,fpc2);

632 
¥ötf
("øngêªad %ld %ld\n",
hâ2
/1000000000,htt2%1000000000);

633 
¥ötf
("øngêö£π %ld %ld\n",
hâ4
/1000000000,htt4%1000000000);

634 
¥ötf
("poöàö£π %ld %ld\n",
hâ3
/1000000000,htt3%1000000000);

	@hash.h

1 
	~<±hªad.h
>

3 
	~"globÆ.h
"

10 
«me•a˚
 
	gPH


21 
VÆueE¡ry
 
föd_poöt_íåy
(* &
key_p
);

22 vﬁ©ûê
uöt64_t
* 
föd_‹_ö£π_poöt_íåy
(* &
key_p
,* 
u∆ock
);

23 
ö£π_poöt_íåy
(* 
key_p
,
VÆueE¡ry
& 
ve
);

24 
u∆ock_íåy
(* 
u∆ock
);

28 
Node_off£t
 
föd_ønge_íåy
(* 
key_p
,* 
c⁄töue_Àn
);

30 
Node_off£t
 
föd_ønge_íåy2
(* &
key_p
,* 
c⁄töue_Àn
);

32 
ö£π_ønge_íåy
(* 
key_p
,
Àn
,
Node_off£t
 
off£t
);

33 
ªmove_poöt_íåy
(* &
key_p
);

35 
öô_hash
();

36 
˛ón_hash
();

38 
föd_ö_log
(* 
key_p
,
Àn
);

	@kvs.h

3 
	~"quîy.h
"

4 
	~"globÆ.h
"

5 
	~"d©a.h
"

6 
	~"hash.h
"

7 
	~"thªad.h
"

11 ˛as†
	cKVS_ph
 : 
public
 
KVS


13 
public
:

16 ~
	$KVS_ph
()

22 
vútuÆ
 
	$öô
(
num
,
key
,
vÆue
,
ªc‹d
)

24 
KVS
::
	`öô
(
num
,
key
,
vÆue
,
ªc‹d
);

25 
PH
::
	`ãmp_°©ic_c⁄f
(
num
,
key
,
vÆue
);

30 
	`¥ötf
("kvs_ph init\n");

31 
	}
}

33 
vútuÆ
 
	$ö£π_›
(* 
key
,* 
vÆue
)

35 
PH
::
	`ö£π_quîy
(
key
,
vÆue
);

36 
	}
}

37 
vútuÆ
 
	$ªad_›
(* 
key
,* 
ªsu…
)

39 
Àn
;

40 
PH
::
	`lookup_quîy
(
key
,
ªsu…
,&
Àn
);

41 
	}
}

43 
vútuÆ
 
	$ªad_›2
(* 
key
,* 
ªsu…
)

45 
Àn
;

46  
PH
::
	`lookup_quîy
(
key
,
ªsu…
,&
Àn
);

50 
	}
}

51 
vútuÆ
 
	$ªad_›2
(* 
key
,
°d
::
°rög
 *
vÆue
)

53  
PH
::
	`lookup_quîy
(
key
,
vÆue
);

55 
	}
}

56 
vútuÆ
 
	$upd©e_›
(* 
key
,* 
vÆue
)

58 
PH
::
	`ö£π_quîy
(
key
,
vÆue
);

59 
	}
}

60 
vútuÆ
 
	$dñëe_›
(* 
key
)

62 
PH
::
	`dñëe_quîy
(
key
);

63 
	}
}

64 
vútuÆ
 
	$sˇn_›
(* 
key
,
˙t
,** 
sˇn_ªsu…
)

66 
PH
::
Quîy
 
quîy
;

67 
PH
::
	`öô_quîy
(&
quîy
);

68 
quîy
.
key_p
 = 
key
;

69 
quîy
.
›
 = 6;

70 
PH
::
	`sˇn_quîy
(&
quîy
);

72 
i
,
Àn
;

73 
quîy
.
›
 = 7;

74 
i
=0;i<
˙t
;i++)

76 
PH
::
	`√xt_quîy
(&
quîy
,
sˇn_ªsu…
[
i
],&
Àn
);

78 
PH
::
	`‰ì_quîy
(&
quîy
);

79 
	}
}

81 
vútuÆ
 
	$˛ón
()

83 
	`¥ötf
("ph clean1\n");

87 
PH
::
	`˛ón
();

88 
	`¥ötf
("ph clean2\n");

89 
	}
}

91 
vútuÆ
 
	$run
(
Te°Quîy
* 
tqa
, 
›s
)

93 
i
,
Àn
,
j
;

94 * 
ªsu…
;

95 
ªsu…
 = (*)
	`mÆloc
(
vÆue_size
+
PH_KEY_SIZE
+
PH_LEN_SIZE
);

97 
i10
 = 
›s
/10;

98 
i10s
 = 0;

100 
°d
::
°rög
 
sˇn_ªsu…
[100];

102 
i
=0;i<
›s
;i++)

104 i‡(
tqa
[
i
].
›
 == 1)

106 
PH
::
	`ö£π_quîy
(
tqa
[
i
].
key
,tqa[i].
vÆue
);

107 i‡(
tqa
[
i
].
›
 == 2)

109 
PH
::
	`lookup_quîy
(
tqa
[
i
].
key
,
ªsu…
,&
Àn
);

110 i‡(
Àn
 =0 && 
ªsu…
[0] == 0)

111 
	`¥ötf
("0\n");

113 i‡(
tqa
[
i
].
›
 == 3)

115 
PH
::
	`ö£π_quîy
(
tqa
[
i
].
key
,tqa[i].
vÆue
);

116 i‡(
tqa
[
i
].
›
 == 4)

117 
PH
::
	`dñëe_quîy
(
tqa
[
i
].
key
);

118 i‡(
tqa
[
i
].
›
 == 5)

120 
PH
::
	`sˇn_quîy2
(
tqa
[
i
].
key
,tqa[i].
˙t
,
sˇn_ªsu…
);

138 i‡(
i
 =
i10s
)

140 
i10s
+=
i10
;

141 
	`¥ötf
("ò: %d / %d\n",
i
,
›s
);

144 
	`‰ì
(
ªsu…
);

145 
	}
}

147 
vútuÆ
 
	$ª£t
()

149 
PH
::
	`ª£t_thªad
();

150 
	}
}

151 
vútuÆ
 
	$exô_thªad
()

153 
PH
::
	`exô_thªad
();

154 
	}
}

	@kvs2.h

3 
	~"quîy.h
"

4 
	~"globÆ.h
"

5 
	~"d©a.h
"

6 
	~"hash.h
"

7 
	~"thªad.h
"

9 
	~<ve˘‹
>

11 
usög
 
«me•a˚
 
	gPH
;

13 ˛as†
	cKVS_ph


15 
	mpublic
:

17 
vútuÆ
 
	$öô
(
num
,
key
,
vÆue
)

20 
PH
::
	`ãmp_°©ic_c⁄f
(
num
,
key
,
vÆue
);

24 
	`¥ötf
("kvs_ph init\n");

27 
vútuÆ
 
	$ö£π_›
(* 
key
,* 
vÆue
,
vÆue_Àn
)

29 
PH
::
	`ö£π_quîy
(
key
,
vÆue
,
vÆue_Àn
);

32 
	}
}

33 
vútuÆ
 
	$ªad_›
(* 
key
,* 
ªsu…
)

35 
Àn
;

36  
PH
::
	`lookup_quîy
(
key
,
ªsu…
,&
Àn
);

40 
	}
}

41 
vútuÆ
 
	$ªad_›2
(* 
key
,
°d
::
°rög
 *
vÆue
)

43  
PH
::
	`lookup_quîy
(
key
,
vÆue
);

45 
	}
}

46 
vútuÆ
 
	$upd©e_›
(* 
key
,* 
vÆue
,
vÆue_Àn
)

48 
PH
::
	`ö£π_quîy
(
key
,
vÆue
,
vÆue_Àn
);

51 
	}
}

52 
vútuÆ
 
	$dñëe_›
(* 
key
)

54 
PH
::
	`dñëe_quîy
(
key
);

55 
	}
}

56 
vútuÆ
 
	$sˇn_›
(* 
key
,
˙t
,** 
sˇn_ªsu…
)

58 
PH
::
Quîy
 
quîy
;

59 
PH
::
	`öô_quîy
(&
quîy
);

60 
quîy
.
key_p
 = 
key
;

61 
quîy
.
›
 = 6;

62 
PH
::
	`sˇn_quîy
(&
quîy
);

64 
i
,
Àn
;

65 
quîy
.
›
 = 7;

66 
i
=0;i<
˙t
;i++)

68 
PH
::
	`√xt_quîy
(&
quîy
,
sˇn_ªsu…
[
i
],&
Àn
);

70 
PH
::
	`‰ì_quîy
(&
quîy
);

71 
	}
}

73 
vútuÆ
 
size_t
 
	$sˇn_›
(* 
key
,
˙t
,
°d
::
°rög
* 
sˇn_ªsu…
)

75 
PH
::
Quîy
 
quîy
;

76 
PH
::
	`öô_quîy
(&
quîy
);

77 
quîy
.
key_p
 = 
key
;

78 
quîy
.
›
 = 6;

79 
PH
::
	`sˇn_quîy
(&
quîy
);

81 
i
;

82 
quîy
.
›
 = 7;

83 
i
=0;i<
˙t
;i++)

85 
PH
::
	`√xt_quîy
(&
quîy
,&
sˇn_ªsu…
[
i
]);

87 
PH
::
	`‰ì_quîy
(&
quîy
);

89  
˙t
;

90 
	}
}

92 
vútuÆ
 
size_t
 
	$sˇn_›2
(* 
key
,
˙t
,
°d
::
°rög
* 
sˇn_ªsu…
)

94 
˙t
 = 
PH
::
	`sˇn_quîy2
(
key
,˙t,
sˇn_ªsu…
);

95  
˙t
;

96 
	}
}

98 
vútuÆ
 
	$˛ón
()

100 
	`¥ötf
("ph clean1\n");

104 
PH
::
	`˛ón
();

105 
	`¥ötf
("ph clean2\n");

106 
	}
}

143 
vútuÆ
 
	$ª£t
()

145 
PH
::
	`ª£t_thªad
();

146 
	}
}

147 
vútuÆ
 
	$exô_thªad
()

149 
PH
::
	`exô_thªad
();

150 
	}
}

	@log.cpp

1 
	~<libpmem.h
>

2 
	~<°rög.h
>

3 
	~<x86öåö.h
>

5 
	~"log.h
"

6 
	~"d©a.h
"

7 
	~"hash.h
"

10 #ifde‡
DOUBLE_LOG


11 
«me•a˚
 
	gPH


15 
	#LF_SIZE
 2+2+2

	)

17 ** 
pmem_addr
;

19 
	g°d
::
©omic
<
uöt8_t
> 
log_fûe_˙t
;

21 
öô_log
()

24 
	glog_fûe_˙t
 = 0;

27 
	gLOG
::
öô
()

29 
fûe_max
 = 0;

30 
	gfûe_ödex
 = 0;

34 
√w_log_fûe
();

35 
√w_log_fûe
();

37 
	gkv_ö
 = {0,0};

38 
	gkv_out
 = {0,0};

41 
	gLOG
::
˛ón
()

43 
i
;

44 
	gi
=0;i<
	gfûe_max
;i++)

46 
munm≠
(
pmem_addr
[
døm_num
[
i
]],
FILE_SIZE
);

47 
pmem_unm≠
(
pmem_¨øy
[
i
],
FILE_SIZE
);

57 
	gLOG
::
ö£π_log
(* &
key_p
, * &
vÆue_p
,
vÆue_Àn
)

59 
VÆueE¡ry_u
 
	gve_u
,
	gﬁd_ve_u
;

60 vﬁ©ûê
uöt64_t
* 
	gv64_p
;

61 * 
	gu∆ock
;

62 
Node_off£t
 
	g°¨t_off£t
,
	glocked_off£t
;

64 
	gv64_p
 = 
föd_‹_ö£π_poöt_íåy
(
key_p
,&
u∆ock
);

65 
	gﬁd_ve_u
.
	gve_64
 = *
v64_p
;

66 
	gﬁd_ve_u
.
	gve
.
	gnode_off£t
 !
INIT_OFFEST
)

68 
°¨t_off£t
 = 
gë_°¨t_off£t
(
ﬁd_ve_u
.
ve
.
node_off£t
);

69 i‡(
öc_ªf
(
°¨t_off£t
))

71 
	gve_u
.
	gve
.
	gnode_off£t
 = 
°¨t_off£t
;

74 
u∆ock_íåy
(
u∆ock
);

75 
	gv64_p
 = 
föd_‹_ö£π_poöt_íåy
(
key_p
,&
u∆ock
);

76 
	gﬁd_ve_u
.
	gve_64
 = *
v64_p
;

79 
	gc⁄töue_Àn
 = 0;

80 i‡(
	gve_u
.
	gve
.
	gnode_off£t
 =
INIT_OFFSET
)

84 i‡((
ve_u
.
ve
.
node_off£t
 = 
föd_ønge_íåy2
(
key_p
,&
c⁄töue_Àn
)Ë=
INIT_OFFSET
)

86 i‡(
öc_ªf
(
ve_u
.
ve
.
node_off£t
))

88 
	gﬁd_ve_u
.
	gve
.
	gnode_off£t
 = 
INIT_OFFSET
;

94 
	glocked_off£t
 = 
ve_u
.
ve
.
node_off£t
;

98 
VÆueE¡ry
 
	gLOG
::
ö£π_log
(
Node_off£t
 
°¨t_node_off£t
,* &
key_p
, * &
vÆue_p
,
vÆue_Àn
)

100 
VÆueE¡ry
 
	grv
;

101 
	gíåy_size
 = 
Àn_size
 + 
key_size
 + 
vÆue_Àn
;

102 
LogOff£t
 
	gkv_ö_√xt
 = 
kv_ö
;

104 i‡(
	gíåy_size
%2)

105 ++
	gíåy_size
;

107 
	gkv_ö_√xt
.
	goff£t
+=
íåy_size
+
LF_SIZE
;

109 i‡(
	gkv_ö_√xt
.
	goff£t
+
	gÀn_size
 >
FILE_SIZE
)

111 
kv_ö_√xt
.
off£t
 = 
íåy_size
+
LF_SIZE
;

112 
	gkv_ö_√xt
.
	gfûe
++;

113 i‡(
	gkv_ö_√xt
.
	gfûe
 >
fûe_max
)

115 i‡(
kv_ö_√xt
.
fûe
 * 
LOG_RATIO
 * 
num_of_thªad
 <
fûe_num
)

116 
√w_log_fûe
();

118 
	gkv_ö_√xt
.
	gfûe
 = 0;

120 
	gkv_ö
.
	gfûe
 = 
kv_ö_√xt
.
fûe
;

121 
	gkv_ö
.
	goff£t
 = 0;

124 
Node_off£t
 
	gíd_off£t
 = 
off£t_to_node
(
°¨t_node_off£t
)->
íd_off£t
;

125 
Node_mëa
* 
	gíd_mëa
 = 
off£t_to_node
(
íd_off£t
);

127 i‡(
	gíd_mëa
->
	gsize
 +Énd_mëa->
	gÊush_size
 + 
	gíåy_size
 + 
	gÀn_size
 >
NODE_BUFFER
)

130 i‡(
íd_mëa
->
∑π
 =
PART_MAX
-1)

139 
rv
.
Àn
 = 0;

140  
	grv
;

144 
	gíd_off£t
 = 
≠≥nd_node
(
°¨t_node_off£t
);

145 
	gíd_mëa
 = 
off£t_to_node
(
íd_off£t
);

150 
uöt16_t
 
	gkv_off£t
 = (
Node_off£t
)*3 + 
íd_mëa
->
size
 +Énd_mëa->
Êush_size
;

151 
uöt16_t
 
	gz
 = 0;

152 
uöt16_t
 
	gvl16
 = 
vÆue_Àn
;

153 * c⁄° 
	gde°
 = 
pmem_addr
[
døm_num
[
kv_ö
.
fûe
]]+kv_ö.
off£t
;

157 
mem˝y
(
de°
,&
vl16
,
Àn_size
);

158 
mem˝y
(
de°
+
Àn_size
,
key_p
,
key_size
);

159 
mem˝y
(
de°
+
Àn_size
+
key_size
,
vÆue_p
,
vÆue_Àn
);

160 
mem˝y
(
de°
+
íåy_size
,&
íd_off£t
,(
Node_off£t
));

161 
mem˝y
(
de°
+
íåy_size
+(
Node_off£t
),&
kv_off£t
,(
uöt16_t
));

162 
mem˝y
(
de°
+
íåy_size
+(
Node_off£t
)+(
uöt16_t
),&
z
,(uint16_t));

164 
pmem_mem˝y
(
pmem_¨øy
[
kv_ö
.
fûe
]+kv_ö.
off£t
+
Àn_size
,
de°
+Àn_size,
íåy_size
+
LF_SIZE
+Àn_size,
PMEM_F_MEM_NONTEMPORAL
);

165 
_mm_s„n˚
();

166 
pmem_mem˝y
(
pmem_¨øy
[
kv_ö
.
fûe
]+kv_ö.
off£t
,
de°
,
Àn_size
,
PMEM_F_MEM_NONTEMPORAL
);

167 
_mm_s„n˚
();

171 
	grv
.
	gnode_off£t
.
	gfûe
 = 
døm_num
[
kv_ö
.
fûe
];

172 
	grv
.
	gnode_off£t
.
	goff£t
 = 
kv_ö
.
off£t
 / (
Node
);

173 
	grv
.
	gkv_off£t
 = 
kv_ö
.
off£t
 % (
Node
);

174 
	grv
.
	gÀn
 = 
vÆue_Àn
;

176 
	gíd_mëa
->
	gÊush_size
+=
íåy_size
;

177 
Node_mëa
* 
	g°¨t_mëa
 = 
off£t_to_node
(
íd_mëa
->
°¨t_off£t
);

178 
	g°¨t_mëa
->
	ggroup_size
+=
íåy_size
;

180 i‡(
	gíd_mëa
->
	gÊush_˙t
 =
íd_mëa
->
Êush_max
)

182 
íd_mëa
->
Êush_max
*=2;

183 
	gíd_mëa
->
	gÊush_kv
 = (**)
ªÆloc
(
íd_mëa
->
Êush_kv
,(*)*íd_mëa->
Êush_max
);

185 
	gíd_mëa
->
	gÊush_kv
[
íd_mëa
->
Êush_˙t
++] = 
de°
;

187 
	gkv_ö
 = 
kv_ö_√xt
;

189  
	grv
;

191 
VÆueE¡ry
 
	gLOG
::
ö£π_log
(
Node_off£t
 
node_off£t
,* &
key_p
, * &
vÆue_p
)

193  
ö£π_log
(
node_off£t
,
key_p
,
vÆue_p
,
vÆue_size
);

195 
	gLOG
::
ªady
(
vÆue_Àn
)

197 
size
 = 
Àn_size
 + 
key_size
 + 
vÆue_Àn
 + 
LF_SIZE
;

200 
LogOff£t
 
	gkv_ö2
;

201 
	gt_fûe
,
	gt_off£t
;

202 
	gt_fûe
 = 
kv_ö
.
fûe
;

203 
	gt_off£t
 = 
kv_ö
.
off£t
;

204 
	gt_off£t
+=
size
;

206 i‡(
	gt_off£t
 % 2)

207 ++
	gt_off£t
;

209 i‡(
	gt_off£t
 >
FILE_SIZE
)

211 
t_off£t
 = 
size
;

212 i‡(
	gt_off£t
 % 2)

213 ++
	gt_off£t
;

214 
	gt_fûe
++;

215 i‡(
	gt_fûe
 >
fûe_max
)

216 
t_fûe
 = 0;

218 
	gkv_ö2
.
	gfûe
 = 
t_fûe
;

219 
	gkv_ö2
.
	goff£t
 = 
t_off£t
;

221 
	grv
;

222 * 
	gkvp
;

223 
uöt16_t
 
	gvl16
;

224 
Node_off£t
 
	gnode_off£t
;

225 
Node_off£t
 
	g°¨t_off£t
;

226 c⁄° 
	gdeÁu…_size
 = 
Àn_size
 + 
key_size
 + 
LF_SIZE
;

228 (
	gkv_ö2
.
	gfûe
 =
kv_out
.
fûe
 && 
kv_ö2
.
off£t
 < kv_out.offset) ||

229 (((
kv_ö2
.
fûe
+1)%
fûe_max
Ë=
kv_out
.fûê&& kv_ö2.
off£t
 > kv_out.offset)

232 
kvp
 = (*)
pmem_addr
[
døm_num
[
kv_out
.
fûe
]] + kv_out.
off£t
;

233 
	gvl16
 = *((
uöt16_t
*)
kvp
);

234 i‡(
	gvl16
 & 
	gINV_BIT
)

236 
	gvl16
-=
INV_BIT
;

237 
	gkv_out
.
	goff£t
+=
deÁu…_size
+
vl16
;

238 i‡(
	gkv_out
.
	goff£t
 % 2)

239 ++
	gkv_out
.
	goff£t
;

241 if(
	gvl16
 == 0)

243 
kv_out
.
fûe
 = (kv_out.fûe+1)%
fûe_max
;

244 
	gkv_out
.
	goff£t
 = 0;

248 
	gnode_off£t
 = *((
Node_off£t
*)(
kvp
+
Àn_size
+
key_size
+
vl16
));

249 
	g°¨t_off£t
 = 
gë_°¨t_off£t
(
node_off£t
);

253 i‡(*((
	guöt16_t
*)
	gkvp
Ë& 
	gINV_BIT
)

257 i‡(
öc_ªf
(
°¨t_off£t
))

259 
	grv
 = 
Êush
(
node_off£t
);

260 i‡(
	grv
 == 1)

262 
dec_ªf
(
°¨t_off£t
);

265 i‡(
	grv
 == 0)

268 
dec_ªf
(
°¨t_off£t
);

271 
	gkv_out
.
	goff£t
+=
deÁu…_size
+
vl16
;

272 i‡(
	gkv_out
.
	goff£t
 % 2)

273 ++
	gkv_out
.
	goff£t
;

277 
	gLOG
::
√w_log_fûe
()

279 
˙t
;

280 
	g˙t
 = 
log_fûe_˙t
.
„tch_add
(1)+1;

282 
	gfûe_«me
[100];

283 
	gbuf„r
[10];

284 
	gÀn
,
	gnum
,
	gi
;

285 
°r˝y
(
fûe_«me
,
pmem_fûe
);

286 
°rˇt
(
fûe_«me
,"log");

287 
	gÀn
 = 
°æí
(
fûe_«me
);

288 
	gnum
 = 
˙t
;

289 
	gi
 = 0;

290 
	gnum
 > 0)

292 
	gbuf„r
[
i
] = 
num
%10+'0';

293 
	gi
++;

294 
	gnum
/=10;

296 
	gi
=
i
-1;i>=0;i--)

297 
	gfûe_«me
[
Àn
++] = 
buf„r
[
i
];

298 
	gfûe_«me
[
Àn
] = 0;

301 
	gis_pmem
;

302 
size_t
 
	gpmem_Àn
;

305 
	gpmem_addr
[
MAX_FILE_NUM
-
˙t
] = (*)
mm≠
(
NULL
,
FILE_SIZE
,
PROT_READ
|
PROT_WRITE
,
MAP_PRIVATE
|
MAP_ANONYMOUS
,-1,0);

306 
	gdøm_num
[
fûe_max
] = 
MAX_FILE_NUM
-
˙t
;

307 
	gpmem_¨øy
[
fûe_max
] = (*)
pmem_m≠_fûe
(
fûe_«me
,
FILE_SIZE
,
PMEM_FILE_CREATE
,0777,&
pmem_Àn
,&
is_pmem
);

309 
	gfûe_max
++;

	@log.h

1 
	~<©omic
>

3 
	~"globÆ.h
"

4 #ifde‡
DOUBLE_LOG


5 
«me•a˚
 
	gPH


8 
	#LOG_RATIO
 10

	)

10 
fûe_num
;

13 
°d
::
©omic
<
uöt8_t
> 
log_fûe_˙t
;

15 
öô_log
();

16 
˛ón_log
();

18 
	sLogOff£t


21 
	gfûe
;

22 
	goff£t
;

25 ˛as†
	cLOG


27 
	gfûe_max
;

28 
	gfûe_ödex
;

31 
LogOff£t
 
	gkv_ö
;

32 
LogOff£t
 
	gkv_out
;

34 
	gdøm_num
[100];

35 * 
	gpmem_¨øy
[100];

38 
	gpublic
:

39 
öô
();

40 
˛ón
();

41 
VÆueE¡ry
 
ö£π_log
(
Node_off£t
 
node_off£t
,* &
key_p
, * &
vÆue_p
);

42 
VÆueE¡ry
 
ö£π_log
(
Node_off£t
 
node_off£t
,* &
key_p
, * &
vÆue_p
,
vÆue_Àn
);

43 
ªady
(
vÆue_Àn
);

44 
	g¥iv©e
:

45 
√w_log_fûe
();

	@query.cpp

1 
	~"quîy.h
"

2 
	~"hash.h
"

3 
	~"d©a.h
"

4 
	~"thªad.h
"

6 #i‚de‡
NULL


7 
	#NULL
 0

	)

10 
	~<°dio.h
>

11 
	~<°dlib.h
>

12 
	~<°rög.h
>

14 
	~<x86öåö.h
>

19 
	#¥öt
 0

	)

25 
«me•a˚
 
	gPH


28 #ifde‡
idÀ_thªad


30 
thªad_loˇl
 
PH_Thªad
* 
my_thªad
;

31 
	#THREAD_RUN
 
my_thªad
->
ru¬ög
=1;

	)

32 
	#THREAD_IDLE
 
my_thªad
->
ru¬ög
=0;

	)

36 
	#THREAD_RUN


	)

37 
	#THREAD_IDLE


	)

43 
uöt64_t
 
qâ1
,
qâ2
,
qâ3
,
qâ4
,
qâ5
,
qâ6
,
qâ7
,
qâ8
;

44 
tf
()

46 
¥ötf
("test function\n");

48 
¥öt_quîy
(
Quîy
* 
quîy
)

50 
¥ötf
("print query\n");

51 
	gi
;

52 
¥ötf
("key %d ",
quîy
->
key_Àn
);

53 
	gi
=0;i<8;i++)

54 
¥ötf
("[%d]",()
quîy
->
key_p
[
i
]);

55 
¥ötf
("\n");

56 
¥ötf
("vÆuê%d ",
quîy
->
vÆue_Àn
);

57 
	gi
=0;i<
	gquîy
->
	gvÆue_Àn
;i++)

58 
¥ötf
("[%d]",()
quîy
->
vÆue_p
[
i
]);

59 
¥ötf
("\n");

74 
öô_quîy
(
Quîy
* 
quîy
)

76 
	gquîy
->
	gnode_d©a
 = 
NULL
;

78 
	gquîy
->
	gsˇn_off£t
 = 
TAIL_OFFSET_u
.
no_32
;

82 
lookup_quîy
(* &
key_p
, * &
ªsu…_p
,* 
ªsu…_Àn_p
)

85 #ifde‡
qâ


86 
time•ec
 
	gts1
,
	gts2
,
	gts3
,
	gts4
;

87 
˛ock_gëtime
(
CLOCK_MONOTONIC
,&
ts1
);

88 
_mm_m„n˚
();

91 
VÆueE¡ry
 
	gve
;

93 c⁄° 
	gkls
 = 
PH_KEY_SIZE
+
PH_LEN_SIZE
;

95 
upd©e_‰ì_˙t
();

96 
	gTHREAD_RUN


97 #ifde‡
qâ


102 #ifde‡
ªad_lock


106 
	gve
 = 
föd_poöt_íåy
(
key_p
);

107 #ifde‡
qâ


108 
_mm_m„n˚
();

109 
˛ock_gëtime
(
CLOCK_MONOTONIC
,&
ts4
);

111 
	gqâ6
+=(
ts4
.
tv_£c
-
ts1
.tv_£c)*1000000000+ts4.
tv_n£c
-ts1.tv_nsec;

114 #ifde‡
qâ


115 
˛ock_gëtime
(
CLOCK_MONOTONIC
,&
ts3
);

116 
_mm_m„n˚
();

119 i‡(
	gve
.
	gnode_off£t
 =
INIT_OFFSET
 || 
ve
.
kv_off£t
 == 0)

122 
mem˝y
(
ªsu…_p
,
em±y
,
em±y_Àn
);

123 *
	gªsu…_Àn_p
 = 
em±y_Àn
;

126 
THREAD_IDLE


139 #ifde‡
ªad_lock


141 i‡(
öc_ªf
(
ve
.
node_off£t
))

162 *
	gªsu…_Àn_p
 = 
ve
.
Àn
;

168 i‡((*
	gªsu…_Àn_p
 & (1 << 15)) != 0)

171 
mem˝y
(
ªsu…_p
,
em±y
,
em±y_Àn
);

172 *
	gªsu…_Àn_p
 = 
em±y_Àn
;

173 *
	gªsu…_Àn_p
 = 0;

181 
mem˝y
(
ªsu…_p
,(*)
off£t_to_node_d©a
(
ve
.
node_off£t
)+ve.
kv_off£t
+
kls
,*
ªsu…_Àn_p
);

182 #ifde‡
ªad_lock


183 
dec_ªf
(
ve
.
node_off£t
);

194 #ifde‡
qâ


195 
_mm_m„n˚
();

196 
˛ock_gëtime
(
CLOCK_MONOTONIC
,&
ts4
);

197 
	gqâ7
+=(
ts4
.
tv_£c
-
ts3
.tv_£c)*1000000000+ts4.
tv_n£c
-ts3.tv_nsec;

198 
	gqâ8
+=(
ts4
.
tv_£c
-
ts1
.tv_£c)*1000000000+ts4.
tv_n£c
-ts1.tv_nsec;

202 
THREAD_IDLE


223 
lookup_quîy
(* &
key_p
, 
°d
::
°rög
 *
vÆue
)

226 
VÆueE¡ry
 
ve
;

227 c⁄° 
	gkls
 = 
PH_KEY_SIZE
+
PH_LEN_SIZE
;

228 
upd©e_‰ì_˙t
();

229 
THREAD_RUN


230 
	gve
 = 
föd_poöt_íåy
(
key_p
);

231 i‡(
	gve
.
	gnode_off£t
 =
INIT_OFFSET
 || 
ve
.
kv_off£t
 == 0)

233 
vÆue
->
assign
((*)
em±y
,
em±y_Àn
);

235 
THREAD_IDLE


246 * 
	gkv_p
 = (*)
off£t_to_node_d©a
(
ve
.
node_off£t
)+ve.
kv_off£t
;

247 
uöt16_t
 
	gÀn
 = *(uöt16_t*)(
kv_p
);

248 
	gvÆue
->
assign
((*)
kv_p
+
kls
,
Àn
);

256 
	gvÆue
->
assign
((*)
off£t_to_node_d©a
(
ve
.
node_off£t
)+ve.
kv_off£t
+
kls
,ve.
Àn
);

259 
THREAD_IDLE


265 
dñëe_quîy
(* 
key_p
)

268 
upd©e_‰ì_˙t
();

271 * 
	gkv_p
;

272 
VÆueE¡ry
 
	gve
;

273 
	goff£t
;

280 
	gve
 = 
föd_poöt_íåy
(
key_p
);

281 i‡(
	gve
.
	gnode_off£t
 =
INIT_OFFSET
)

286 #ifde‡
•lô_thªad


287 i‡(
öc_ªf
(
ve
.
node_off£t
Ë|| 
åy_•lô
(ve.node_offset))

289 i‡(
öc_ªf
(
ve
.
node_off£t
))

292 
	gkv_p
 = (*)
off£t_to_node_d©a
(
ve
.
node_off£t
Ë+ ve.
kv_off£t
;

293 i‡(*((
	guöt64_t
*)
	gkv_p
Ë!*((
uöt64_t
*)
key_p
))

295 
dec_ªf
(
ve
.
node_off£t
);

309 
dñëe_kv
(
kv_p
);

311 
övÆid©e_kv
(
ve
);

312 
ªmove_poöt_íåy
(
key_p
);

317 
dec_ªf
(
ve
.
node_off£t
);

338 
	#kìp_lock


	)

340 
ö£π_quîy
(* &
key_p
, * &
vÆue_p
)

342 
ö£π_quîy
(
key_p
,
vÆue_p
,
vÆue_size
);

345 
ö£π_quîy
(* &
key_p
, * &
vÆue_p
,&
vÆue_Àn
)

354 * 
	gkv_p
;

356 
VÆueE¡ry_u
 
	gve_u
;

358 vﬁ©ûê
uöt64_t
* 
	gv64_p
;

359 * 
	gu∆ock
;

362 
	gc⁄töue_Àn
;

364 
	gc⁄töue_Àn
 = 0;

366 
	grv
;

368 
	gã°
=0,
	gã°2
=0;

369 
	gz
 = 0;

370 
	gec
=0;

373 
VÆueE¡ry_u
 
	gﬁd_ve_u
;

374 
Node_off£t
 
	glocked_off£t
;

375 * 
	g√w_kv_p
;

377 
Node_off£t
 
	g°¨t_off£t
;

378 #ifde‡
qâ


379 
time•ec
 
	gts1
,
	gts2
,
	gts3
,
	gts4
,
	gts5
,
	gts6
;

381 
˛ock_gëtime
(
CLOCK_MONOTONIC
,&
ts1
);

382 
_mm_m„n˚
();

384 
upd©e_‰ì_˙t
();

386 
THREAD_RUN


390 i‡(
	g¥öt
)

391 
¥ötf
("insertÜoop\n");

392 #ifde‡
qâ


393 
˛ock_gëtime
(
CLOCK_MONOTONIC
,&
ts3
);

394 
_mm_m„n˚
();

403 
	gve_u
.
	gve
.
	gnode_off£t
 = 
INIT_OFFSET
;

404 #ifde‡
kìp_lock


406 
	gv64_p
 = 
föd_‹_ö£π_poöt_íåy
(
key_p
,&
u∆ock
);

408 
	gﬁd_ve_u
.
	gve_64
 = *
v64_p
;

413 
	gve_u
.
	gve
 = 
föd_poöt_íåy
(
key_p
);

419 
	gﬁd_ve_u
.
	gve
.
	gnode_off£t
 !
INIT_OFFSET
)

431 
°¨t_off£t
 = 
gë_°¨t_off£t
(
ﬁd_ve_u
.
ve
.
node_off£t
);

432 #ifde‡
•lô_thªad


433 i‡(
öc_ªf
(
°¨t_off£t
Ë|| 
åy_•lô
(start_offset))

435 i‡(
öc_ªf
(
°¨t_off£t
))

438 
	gve_u
.
	gve
.
	gnode_off£t
 = 
°¨t_off£t
;

476 #ifde‡
kìp_lock


477 
u∆ock_íåy
(
u∆ock
);

479 
	gv64_p
 = 
föd_‹_ö£π_poöt_íåy
(
key_p
,&
u∆ock
);

481 
	gﬁd_ve_u
.
	gve_64
 = *
v64_p
;

485 
	gve_u
.
	gve
 = 
föd_poöt_íåy
(
key_p
);

491 
	gvï
 = &
ve
;

492 
	gvï
->
	gnode_off£t
 = 0;

496 i‡(
	gve_u
.
	gve
.
	gnode_off£t
 =
INIT_OFFSET
)

499 i‡(
¥öt
)

500 
¥ötf
("findÇode\n");

503 i‡((
	gve_u
.
	gve
.
	gnode_off£t
 = 
föd_ønge_íåy2
(
key_p
,&
c⁄töue_Àn
)Ë=
INIT_OFFSET
)

520 
u∆ock_íåy
(
u∆ock
);

523 i‡(
	gec
 > 1000)

527 
¥ötf
("noÑangeÉntry\n");

528 
föd_ö_log
(
key_p
,
c⁄töue_Àn
);

530 
föd_ö_log
(
key_p
,
c⁄töue_Àn
+1);

532 
	gve_u
.
	gve
.
	gnode_off£t
 = 
föd_ønge_íåy
(
key_p
,&
c⁄töue_Àn
);

533 
¥ötf
("%d %d\n",
ve_u
.
ve
.
node_off£t
.
fûe
,ve_u.ve.node_off£t.
off£t
);

535 
sˇnf
("%d",&
ec
);

541 #ifde‡
•lô_thªad


542 i‡(
öc_ªf
(
ve_u
.
ve
.
node_off£t
Ë|| 
åy_•lô
(ve_u.ve.node_offset))

544 if(
öc_ªf
(
ve_u
.
ve
.
node_off£t
))

547 
	gﬁd_ve_u
.
	gve
.
	gnode_off£t
 = 
INIT_OFFSET
;

579 
u∆ock_íåy
(
u∆ock
);

581 i‡(
	gec
 > 100000)

584 
¥ötf
("locked\n");

585 
föd_ö_log
(
key_p
,
c⁄töue_Àn
);

587 
föd_ö_log
(
key_p
,
c⁄töue_Àn
+1);

589 
¥ötf
("%d\n",()
off£t_to_node
(
ve_u
.
ve
.
node_off£t
)->
°©e
);

590 
sˇnf
("%d",&
ec
);

614 #ifde‡
qâ


615 
_mm_m„n˚
();

616 
˛ock_gëtime
(
CLOCK_MONOTONIC
,&
ts4
);

617 
	gqâ2
+=(
ts4
.
tv_£c
-
ts3
.tv_£c)*1000000000+ts4.
tv_n£c
-ts3.tv_nsec;

621 #ifde‡
qâ


622 
˛ock_gëtime
(
CLOCK_MONOTONIC
,&
ts3
);

623 
_mm_m„n˚
();

626 
	glocked_off£t
 = 
ve_u
.
ve
.
node_off£t
;

627 i‡(
	g√w_kv_p
 = 
ö£π_kv
(
ve_u
.
ve
.
node_off£t
,
key_p
,
vÆue_p
,
vÆue_Àn
))

629 #ifde‡
qâ


630 
˛ock_gëtime
(
CLOCK_MONOTONIC
,&
ts5
);

632 
move_to_íd_off£t
(
ve_u
.
ve
.
node_off£t
);

640 
	gve_u
.
	gve
.
	gkv_off£t
 = 
√w_kv_p
-(*)
off£t_to_node_d©a
(
ve_u
.
ve
.
node_off£t
);

643 
	gve_u
.
	gve
.
	gÀn
 = 
vÆue_Àn
;

645 #ifde‡
kìp_lock


647 *
	gv64_p
 = 
ve_u
.
ve_64
;

648 
u∆ock_íåy
(
u∆ock
);

651 
ö£π_poöt_íåy
(
key_p
,
ve_u
.
ve
);

658 i‡(
	gﬁd_ve_u
.
	gve
.
	gnode_off£t
 !
INIT_OFFSET
)

671 
övÆid©e_kv
(
ﬁd_ve_u
.
ve
);

687 #ifde‡
qâ


688 
_mm_m„n˚
();

689 
˛ock_gëtime
(
CLOCK_MONOTONIC
,&
ts6
);

690 
	gqâ4
+=(
ts6
.
tv_£c
-
ts5
.tv_£c)*1000000000+ts6.
tv_n£c
-ts5.tv_nsec;

691 
˛ock_gëtime
(
CLOCK_MONOTONIC
,&
ts4
);

692 
	gqâ3
+=(
ts4
.
tv_£c
-
ts3
.tv_£c)*1000000000+ts4.
tv_n£c
-ts3.tv_nsec;

694 #ifde‡
•lô_thªad


695 i‡(
√ed_•lô
(
ve_u
.
ve
.
node_off£t
,
vÆue_Àn
))

697 i‡(
add_•lô
(
locked_off£t
) == 1)

702 
dec_ªf
(
locked_off£t
);

709 #ifde‡
qâ


710 
˛ock_gëtime
(
CLOCK_MONOTONIC
,&
ts5
);

712 #ifde‡
kìp_lock


713 
u∆ock_íåy
(
u∆ock
);

731 i‡(
	gc⁄töue_Àn
 == 0)

733 
c⁄töue_Àn
 = 
gë_c⁄töue_Àn
(
ve_u
.
ve
.
node_off£t
);

745 i‡(
•lô_‹_com∑˘
(
ve_u
.
ve
.
node_off£t
))

747 i‡(
	g¥öt
)

748 
¥ötf
("split\n");

764 i‡((
	grv
 = 
•lô2p
(
ve_u
.
ve
.
node_off£t
))<0)

767 
dec_ªf
(
locked_off£t
);

789 
	gc⁄töue_Àn
++;

793 i‡(
	g¥öt
)

794 
¥ötf
("splitÉnd\n");

805 i‡(
com∑˘2p
(
ve_u
.
ve
.
node_off£t
) < 0)

806 
dec_ªf
(
locked_off£t
);

831 #ifde‡
qâ


832 
_mm_m„n˚
();

833 
˛ock_gëtime
(
CLOCK_MONOTONIC
,&
ts6
);

834 
	gqâ5
+=(
ts6
.
tv_£c
-
ts5
.tv_£c)*1000000000+ts6.
tv_n£c
-ts5.tv_nsec;

837 i‡(
	g¥öt
)

838 
¥ötf
("insertÑetry\n");

839 #ifde‡
qâ


840 
_mm_m„n˚
();

842 
˛ock_gëtime
(
CLOCK_MONOTONIC
,&
ts4
);

843 
	gqâ3
+=(
ts4
.
tv_£c
-
ts3
.tv_£c)*1000000000+ts4.
tv_n£c
-ts3.tv_nsec;

846 
	gTHREAD_IDLE


849 #ifde‡
qâ


850 
_mm_m„n˚
();

851 
˛ock_gëtime
(
CLOCK_MONOTONIC
,&
ts2
);

852 
	gqâ1
+=(
ts2
.
tv_£c
-
ts1
.tv_£c)*1000000000+ts2.
tv_n£c
-ts1.tv_nsec;

858 #ifde‡
DOUBLE_LOG


859 
ö£π_quîy_l
(* &
key_p
, * &
vÆue_p
)

861 
ö£π_quîy_l
(
key_p
,
vÆue_p
,
vÆue_size
);

869 
ö£π_quîy_l
(* &
key_p
, * &
vÆue_p
,&
vÆue_Àn
)

871 * 
	gkv_p
;

873 
VÆueE¡ry_u
 
	gve_u
;

874 vﬁ©ûê
uöt64_t
* 
	gv64_p
;

875 * 
	gu∆ock
;

876 
	gc⁄töue_Àn
 = 0;

877 
VÆueE¡ry_u
 
	gﬁd_ve_u
;

878 
Node_off£t
 
	glocked_off£t
;

879 * 
	g√w_kv_p
;

881 
Node_off£t
 
	g°¨t_off£t
;

883 
upd©e_‰ì_˙t
();

885 
THREAD_RUN


887 
	gmy_thªad
->
	glog
->
ªady
(
vÆue_Àn
);

892 
	gve_u
.
	gve
.
	gnode_off£t
 = 
INIT_OFFSET
;

893 
	gv64_p
 = 
föd_‹_ö£π_poöt_íåy
(
key_p
,&
u∆ock
);

894 
	gﬁd_ve_u
.
	gve_64
 = *
v64_p
;

895 
	gﬁd_ve_u
.
	gve
.
	gnode_off£t
 !
INIT_OFFSET
)

897 i‡(
ﬁd_ve_u
.
ve
.
node_off£t
.
fûe
 & 
LOG_BIT
)

899 
uöt16_t
 
íåy_size
 = 
PH_KEY_SIZE
+
PH_LEN_SIZE
 +
ﬁd_ve_u
.
ve
.
Àn
;

900 i‡(
	gíåy_size
%2)

901 ++
	gíåy_size
;

903 
	g°¨t_off£t
 = 
gë_°¨t_off£t
(*((
Node_off£t
*)((*)
off£t_to_node_d©a
(
ﬁd_ve_u
.
ve
.
node_off£t
Ë+ old_ve_u.ve.
kv_off£t
 + 
íåy_size
)));

906 
	g°¨t_off£t
 = 
gë_°¨t_off£t
(
ﬁd_ve_u
.
ve
.
node_off£t
);

907 i‡(
öc_ªf
(
°¨t_off£t
))

918 
	gve_u
.
	gve
.
	gnode_off£t
 = 
°¨t_off£t
;

921 
u∆ock_íåy
(
u∆ock
);

922 
	gv64_p
 = 
föd_‹_ö£π_poöt_íåy
(
key_p
,&
u∆ock
);

923 
	gﬁd_ve_u
.
	gve_64
 = *
v64_p
;

925 i‡(
	gve_u
.
	gve
.
	gnode_off£t
 =
INIT_OFFSET
)

929 i‡((
ve_u
.
ve
.
node_off£t
 = 
föd_ønge_íåy2
(
key_p
,&
c⁄töue_Àn
)Ë=
INIT_OFFSET
)

931 i‡(
öc_ªf
(
ve_u
.
ve
.
node_off£t
))

933 
	gﬁd_ve_u
.
	gve
.
	gnode_off£t
 = 
INIT_OFFSET
;

938 
	glocked_off£t
 = 
ve_u
.
ve
.
node_off£t
;

940 
VÆueE¡ry_u
 
	grv
;

941 i‡((
	grv
.
	gve
 = 
my_thªad
->
log
->
ö£π_log
(
ve_u
.
ve
.
node_off£t
,
key_p
,
vÆue_p
,
vÆue_Àn
)).
	gÀn
 != 0)

947 *
v64_p
 = 
rv
.
ve_64
;

949 
u∆ock_íåy
(
u∆ock
);

950 i‡(
	gﬁd_ve_u
.
	gve
.
	gnode_off£t
 !
INIT_OFFSET
)

951 
övÆid©e_kv
(
ﬁd_ve_u
.
ve
);

952 
dec_ªf
(
locked_off£t
);

957 
u∆ock_íåy
(
u∆ock
);

958 i‡(
	gc⁄töue_Àn
 == 0)

959 
c⁄töue_Àn
 = 
gë_c⁄töue_Àn
(
ve_u
.
ve
.
node_off£t
);

960 i‡(
•lô_‹_com∑˘
(
ve_u
.
ve
.
node_off£t
))

962 i‡(
•lô
(
ve_u
.
ve
.
node_off£t
) >= 0)

963 ++
c⁄töue_Àn
;

965 
dec_ªf
(
locked_off£t
);

969 i‡(
com∑˘
(
ve_u
.
ve
.
node_off£t
) < 0)

970 
dec_ªf
(
locked_off£t
);

975 
	gTHREAD_IDLE


982 
dñëe_quîy_sˇn_íåy
(
Quîy
* 
quîy
)

984 
Node_mëa
* 
	gnode
;

985 
Node_off£t_u
 
	gnou
;

990 i‡(
	gquîy
->
	gsˇn_off£t
 !
TAIL_OFFSET_u
.
no_32
)

992 
nou
.
no_32
 = 
quîy
->
sˇn_off£t
;

993 
	gnode
 = 
off£t_to_node
(
nou
.
no
);

997 i‡(
åy_©_lock
(
node
->
°©e
) == 0)

1013 
dñëe_sˇn_íåy
(
nou
.
no
,
quîy
);

1014 
	gquîy
->
	gsˇn_off£t
 = 
TAIL_OFFSET_u
.
no_32
;

1016 
©_u∆ock
(
node
->
°©e
);

1034 
sˇn_quîy
(
Quîy
* 
quîy
)

1044 
VÆueE¡ry
 
	gve
;

1045 
	gc⁄töue_Àn
;

1046 
Node
* 
	gnode_d©a
;

1047 
Node_off£t
 
	g°¨t_off£t
;

1048 
	gsize
;

1050 
upd©e_‰ì_˙t
();

1052 i‡(
	gquîy
->
	gnode_d©a
 =
NULL
)

1054 
quîy
->
node_d©a
 = (
Node
*)
mÆloc
((Node)*
PART_MAX
);

1055 i‡(
	gquîy
->
	gnode_d©a
 =
NULL
)

1056 
¥ötf
("node dataálloc fail\n");

1060 
dñëe_quîy_sˇn_íåy
(
quîy
);

1062 
	gnode_d©a
 = (
Node
*)
quîy
->
node_d©a
;

1069 
	gve
 = 
föd_poöt_íåy
(
quîy
->
key_p
);

1070 
	gve
.
	gnode_off£t
 !
INIT_OFFSET
)

1075 
°¨t_off£t
 = 
gë_°¨t_off£t
(
ve
.
node_off£t
);

1076 i‡(
öc_ªf
(
°¨t_off£t
))

1078 
	gve
.
	gnode_off£t
 = 
°¨t_off£t
;

1091 *
	gnode_d©a
 = *
off£t_to_node_d©a
(
ve
.
node_off£t
);

1092 
	gsize
 = 
off£t_to_node
(
ve
.
node_off£t
)->
size
;

1093 
ö£π_sˇn_li°
(
off£t_to_node
(
ve
.
node_off£t
),(*)
quîy
);

1094 
h¨d_u∆ock
(
ve
.
node_off£t
);

1095 
s‹t_node
(
node_d©a
,(*)(
quîy
->
s‹ãd_ödex
),&(quîy->
ödex_max
),
size
);

1098 
	gquîy
->
	gödex_num
 = 0;

1101 
©_lock
(
quîy
->
sˇn_lock
);

1102 
	gquîy
->
	gsˇn_off£t
 = 
ve
.
node_off£t
;

1104 
	gquîy
->
	gsˇn_lock
 = 0;

1112 *((
	guöt64_t
*)(
	gnode_d©a
->
	gbuf„r
+
	gquîy
->
	gs‹ãd_ödex
[
quîy
->
ödex_num
])Ë< *((uöt64_t*)quîy->
	gkey_p
))

1114 
	gquîy
->
	gödex_num
++;

1115 i‡(
	gquîy
->
	gödex_num
 >
quîy
->
ödex_max
)

1117 i‡(
adv™˚_off£t
((*)
quîy
) < 0)

1123 
	gsize
 = 
off£t_to_node
(
quîy
->
sˇn_off£t
)->
size
;

1124 
s‹t_node
(
node_d©a
,(*)(
quîy
->
s‹ãd_ödex
),&(quîy->
ödex_max
),
size
);

1125 
	gquîy
->
	gödex_num
=0;

1132 
	gve
 = 
föd_poöt_íåy
(
quîy
->
key_p
);

1136 i‡(
	gve
.
	gnode_off£t
 =
INIT_OFFSET
)

1138 
c⁄töue_Àn
 = 0;

1145 i‡((
	gve
.
	gnode_off£t
 = 
föd_ønge_íåy2
(
quîy
->
key_p
,&
c⁄töue_Àn
)Ë=
INIT_OFFSET
)

1152 i‡(
öc_ªf
(
ve
.
node_off£t
))

1156 
	goff£t2
 = 
föd_ønge_íåy2
(
quîy
->
key_p
,&
c⁄töue_Àn
);

1157 i‡(
	goff£t
 !
off£t2
)

1159 
h¨d_u∆ock
(
off£t
);

1160 
	goff£t
 = 
INIT_OFFSET
;

1165 *
	gnode_d©a
 = *
off£t_to_node_d©a
(
off£t
);

1166 
	gsize
 = 
off£t_to_node
(
off£t
)->
size
;

1167 
ö£π_sˇn_li°
(
off£t_to_node
(
off£t
),(*)
quîy
);

1168 
h¨d_u∆ock
(
off£t
);

1169 
s‹t_node
(
node_d©a
,(*)(
quîy
->
s‹ãd_ödex
),&(quîy->
ödex_max
),
size
);

1172 
	gquîy
->
	gödex_num
 = 0;

1175 
©_lock
(
quîy
->
sˇn_lock
);

1176 
	gquîy
->
	gsˇn_off£t
 = 
off£t
;

1178 
	gquîy
->
	gsˇn_lock
 = 0;

1186 *((
	guöt64_t
*)(
	gnode_d©a
->
	gbuf„r
+
	gquîy
->
	gs‹ãd_ödex
[
quîy
->
ödex_num
])Ë< *((uöt64_t*)quîy->
	gkey_p
))

1188 
	gquîy
->
	gödex_num
++;

1189 i‡(
	gquîy
->
	gödex_num
 >
quîy
->
ödex_max
)

1191 i‡(
adv™˚_off£t
((*)
quîy
) < 0)

1197 
s‹t_node
(
node_d©a
,(*)(
quîy
->
s‹ãd_ödex
),&(quîy->
ödex_max
),
size
);

1198 
	gquîy
->
	gödex_num
=0;

1214 
Node_off£t_u
 
	gnou
;

1215 
	gnou
.
	gno
 = 
ve
.
node_off£t
;

1217 
	gquîy
->
	gsˇn_off£t
 = 
nou
.
no_32
;

1220 
ö£π_sˇn_li°
(
ve
.
node_off£t
,
quîy
);

1228 
c›y_™d_s‹t_node
(
quîy
);

1230 
dec_ªf
(
ve
.
node_off£t
);

1242 
	gquîy
->
	gs‹ãd_kv_max
 > quîy->
	gs‹ãd_kv_i
)

1244 if(*((
	guöt64_t
*)(
	gquîy
->
	gs‹ãd_kv
[
quîy
->
s‹ãd_kv_i
]+
	gPH_LEN_SIZE
 )Ë>*((
uöt64_t
*)quîy->
key_p
))

1246 ++
	gquîy
->
	gs‹ãd_kv_i
;

1249 i‡(
adv™˚_off£t
(
quîy
) < 0)

1258 
√xt_quîy
(
Quîy
* 
quîy
,* 
ªsu…_p
,* 
ªsu…_Àn_p
)

1260 
upd©e_‰ì_˙t
();

1262 i‡(
	gquîy
->
	gsˇn_off£t
 =
TAIL_OFFSET_u
.
no_32
)

1265 
mem˝y
(
ªsu…_p
,
em±y
,
em±y_Àn
);

1266 *
	gªsu…_Àn_p
 = 
em±y_Àn
;

1273 *
	gªsu…_Àn_p
 = *((
uöt16_t
*)(
quîy
->
s‹ãd_kv
[quîy->
s‹ãd_kv_i
]));

1286 *
	gªsu…_Àn_p
+=8+2;

1288 
mem˝y
(
ªsu…_p
,
quîy
->
s‹ãd_kv
[quîy->
s‹ãd_kv_i
],*
ªsu…_Àn_p
);

1292 
	gquîy
->
	gs‹ãd_kv_i
++;

1293 
	gquîy
->
	gs‹ãd_kv_i
 >
quîy
->
s‹ãd_kv_max
)

1296 i‡(
adv™˚_off£t
(
quîy
) < 0)

1310 
√xt_quîy
(
Quîy
* 
quîy
,
°d
::
°rög
* 
ªsu…
)

1312 
THREAD_RUN


1313 
upd©e_‰ì_˙t
();

1315 i‡(
	gquîy
->
	gsˇn_off£t
 =
TAIL_OFFSET_u
.
no_32
)

1317 
ªsu…
->
assign
((*)
em±y
,
em±y_Àn
);

1318 
THREAD_IDLE


1323 
	gªsu…_Àn_p
;

1324 
	gªsu…_Àn_p
 = *((
uöt16_t
*)(
quîy
->
s‹ãd_kv
[quîy->
s‹ãd_kv_i
]));

1325 
	gªsu…_Àn_p
+=8+2;

1327 
	gªsu…
->
assign
((*)
quîy
->
s‹ãd_kv
[quîy->
s‹ãd_kv_i
],
ªsu…_Àn_p
);

1331 
	gquîy
->
	gs‹ãd_kv_i
++;

1332 
	gquîy
->
	gs‹ãd_kv_i
 >
quîy
->
s‹ãd_kv_max
)

1334 i‡(
adv™˚_off£t
(
quîy
) < 0)

1336 
THREAD_IDLE


1346 
THREAD_IDLE


1352 
‰ì_quîy
(
Quîy
* 
quîy
)

1367 
dñëe_quîy_sˇn_íåy
(
quîy
);

1368 
‰ì
(
quîy
->
node_d©a
);

1372 
size_t
 
sˇn_quîy2
(* 
key
,
˙t
,
°d
::
°rög
* 
sˇn_ªsu…
)

1374 
VÆueE¡ry
 
ve
;

1375 
	gc⁄töue_Àn
;

1376 
Node
* 
	gnode_d©a
;

1377 
Node_off£t
 
	g°¨t_off£t
;

1378 
	gsize
;

1379 
Node_mëa
* 
	gnode_mëa
;

1381 
THREAD_RUN


1382 
upd©e_‰ì_˙t
();

1384 
	gve
 = 
föd_poöt_íåy
(
key
);

1385 
	gve
.
	gnode_off£t
 !
INIT_OFFSET
)

1388 
°¨t_off£t
 = 
gë_°¨t_off£t
(
ve
.
node_off£t
);

1389 i‡(
öc_ªf
(
°¨t_off£t
))

1391 
	gve
.
	gnode_off£t
 = 
°¨t_off£t
;

1394 
	gve
 = 
föd_poöt_íåy
(
key
);

1397 i‡(
	gve
.
	gnode_off£t
 =
INIT_OFFSET
)

1399 
c⁄töue_Àn
 = 0;

1402 i‡((
	gve
.
	gnode_off£t
 = 
föd_ønge_íåy2
(
key
,&
c⁄töue_Àn
)Ë=
INIT_OFFSET
)

1404 i‡(
öc_ªf
(
ve
.
node_off£t
))

1412 
	gªsu…_num
,
	gªsu…_sum
=0;

1413 
Node_off£t
 
	gnode_off£t
 = 
ve
.
node_off£t
;

1414 
Node_off£t_u
 
	g√xt_off£t
;

1418 
	gªsu…_num
 = 
sˇn_node
(
node_off£t
,
key
,
˙t
-
ªsu…_sum
,
sˇn_ªsu…
);

1419 
	gªsu…_sum
+=
ªsu…_num
;

1420 
	gsˇn_ªsu…
+=
ªsu…_num
;

1422 i‡(
	g˙t
 <
ªsu…_sum
)

1424 
dec_ªf
(
node_off£t
);

1425  
	gªsu…_sum
;

1430 
	g√xt_off£t
.
	gno_32
 = 
off£t_to_node
(
node_off£t
)->
√xt_off£t
;

1431 i‡(
	g√xt_off£t
.
	gno
 =
TAIL_OFFSET
)

1433 
dec_ªf
(
node_off£t
);

1434  
	gªsu…_sum
;

1436 i‡(
öc_ªf
(
√xt_off£t
.
no
))

1440 
dec_ªf
(
node_off£t
);

1442 
	gnode_off£t
 = 
√xt_off£t
.
no
;

1444 
THREAD_IDLE


1447  
	gªsu…_sum
;

1452 
Node_off£t_u
 
	gnou
;

1453 
	gnou
.
	gno
 = 
ve
.
node_off£t
;

1458 
c›y_™d_s‹t_node
(
quîy
);

1460 
dec_ªf
(
ve
.
node_off£t
);

1472 
	gquîy
->
	gs‹ãd_kv_max
 > quîy->
	gs‹ãd_kv_i
)

1474 if(*((
	guöt64_t
*)(
	gquîy
->
	gs‹ãd_kv
[
quîy
->
s‹ãd_kv_i
]+
	gÀn_size
)Ë>*((
uöt64_t
*)quîy->
key_p
))

1476 ++
	gquîy
->
	gs‹ãd_kv_i
;

1479 i‡(
adv™˚_off£t
(
quîy
) < 0)

	@query.h

1 #¥agm®
⁄˚


3 
	#QUERY_BUFFER
 10000

	)

5 
	~<±hªad.h
>

6 
	~<©omic
>

7 
	~<°rög
>

9 
	~"globÆ.h
"

13 
«me•a˚
 
	gPH


16 
	sQuîy


35 * 
	gkey_p
;

36 * 
	gvÆue_p
;

37 
	g›
;

38 
	gkey_Àn
,
	gvÆue_Àn
;

40 
	gªf_off£t
;

43 vﬁ©ûê
uöt32_t
 
	gsˇn_off£t
;

44 * 
	gnode_d©a
;

52 * 
	gs‹ãd_kv
[100*
PART_MAX
];

53 
	gs‹ãd_kv_i
,
	gs‹ãd_kv_max
;

62 
öô_quîy
(
Quîy
* 
quîy
);

63 
ª£t_quîy
(
Quîy
* 
quîy
);

65 
‰ì_quîy
(
Quîy
* 
quîy
);

67 
lookup_quîy
(* &
key_p
, * &
ªsu…_p
,* 
ªsu…_Àn_p
);

68 
lookup_quîy
(* &
key_p
, 
°d
::
°rög
 *
vÆue
);

70 
dñëe_quîy
(* 
key_p
);

72 
ö£π_quîy
(* &
key_p
, * &
vÆue_p
);

73 
ö£π_quîy
(* &
key_p
, * &
vÆue_p
, &
vÆue_Àn
);

75 
ö£π_quîy_l
(* &
key_p
, * &
vÆue_p
);

76 
ö£π_quîy_l
(* &
key_p
, * &
vÆue_p
, &
vÆue_Àn
);

78 
sˇn_quîy
(
Quîy
* 
quîy
);

79 
√xt_quîy
(
Quîy
* 
quîy
,* 
ªsu…_p
,* 
ªsu…_Àn_p
);

80 
√xt_quîy
(
Quîy
* 
quîy
,
°d
::
°rög
* 
ªsu…
);

82 
size_t
 
sˇn_quîy2
(* 
key
,
˙t
,
°d
::
°rög
* 
sˇn_ªsu…
);

	@thread.cpp

1 
	~"thªad.h
"

2 
	~"d©a.h
"

3 
	~"globÆ.h
"

5 
	~<°dlib.h
>

7 
	~<°dio.h
>

9 
	#FCCT
 1000

10 

	)

12 
«me•a˚
 
	gPH


15 
	#INV9
 999999999

	)

17 
PH_Thªad
* 
	gthªad_li°
;

19 
thªad_loˇl
 
PH_Thªad
* 
	gmy_thªad
 = 
NULL
;

22 vﬁ©ûê
‰ì_˙t
[
PM_N
];

23 
num_of_thªad
;

25 vﬁ©ûê
£g_‰ì_˙t
;

29 
	g°d
::
©omic
<
uöt8_t
> 
thªad_lock
;

58 
ª£t_thªad
()

60 
	gi
;

61 
	gi
=0;i<
	gnum_of_thªad
;i++)

63 
	gthªad_li°
[
i
].
˛ón
();

91 
exô_thªad
()

93 i‡(
	gmy_thªad
)

94 
	gmy_thªad
->
˛ón
();

96 
	gPH_Thªad
::
˛ón
()

98 
i
;

99 
	gi
=0;i<
	gPM_N
;i++)

100 
	gloˇl_‰ì_˙t
[
i
] = 
INV9
;

101 
	gloˇl_£g_‰ì_˙t
 = 
INV9
;

103 
˛ón_thªad_loˇl
();

106 #ifde‡
•lô_thªad


107 
±hªad_t
* 
	g•lô_thªads
;

108 * 
	gsi
;

111 
öô_thªad
()

113 
	gi
;

116 
	gthªad_li°
 = 
√w
 
PH_Thªad
[
num_of_thªad
+1];

117 
	gi
=0;i<
	gnum_of_thªad
;i++)

120 
	gthªad_li°
[
i
].
öô
();

121 #ifde‡
idÀ_thªad


126 
	gthªad_lock
 = 0;

127 #ifde‡
•lô_thªad


128 
öô_•lô
();

129 
	g•lô_thªads
 = (
±hªad_t
*)
mÆloc
(’thªad_t)*
num_of_•lô
);

130 
	gsi
 = (*)
mÆloc
(()*
num_of_•lô
);

131 
	gi
=0;i<
	gnum_of_•lô
;i++)

133 
	gsi
[
i
] = i;

134 
±hªad_¸óã
(&
•lô_thªads
[
i
],
NULL
,
•lô_w‹k
,(*)&
si
[i]);

139 
˛ón_thªad
()

143 #ifde‡
DOUBLE_LOG


144 
	gi
;

145 
	gi
=0;i<
	gnum_of_thªad
;i++)

147 i‡(
	gthªad_li°
[
i
].
	glog
)

148 
	gthªad_li°
[
i
].
	glog
->
˛ón
();

151 #ifde‡
•lô_thªad


152 
˛ón_•lô
();

154 
	gi
;

155 
	gi
=0;i<
	gnum_of_•lô
;i++)

156 
±hªad_joö
(
•lô_thªads
[
i
],
NULL
);

158 
‰ì
(
•lô_thªads
);

159 
‰ì
(
si
);

162 
	gdñëe
[] 
	gthªad_li°
;

165 
	gPH_Thªad
::
öô
()

167 
›_˙t
 = 0;

171 #ifde‡
DOUBLE_LOG


172 
	glog
 = 
NULL
;

175 #ifde‡
idÀ_thªad


176 
	gru¬ög
 = 0;

178 
	gi
;

179 
	gi
=0;i<
	gPM_N
;i++)

180 
	gloˇl_‰ì_˙t
[
i
] = 
INV9
;

181 
	gloˇl_£g_‰ì_˙t
 = 
INV9
;

186 
√w_thªad
()

188 
	gi
,
	gj
;

192 
©_lock
(
thªad_lock
);

193 
	gi
=0;i<
	gnum_of_thªad
;i++)

195 i‡(
	gthªad_li°
[
i
].
	gloˇl_‰ì_˙t
[0] =
INV9
)

199 
j
=0;
	gj
<
	gPM_N
;j++)

200 
	gthªad_li°
[
i
].
	gloˇl_‰ì_˙t
[
j
] = 
‰ì_˙t
[j];

201 
	gthªad_li°
[
i
].
	gloˇl_£g_‰ì_˙t
 = 
£g_‰ì_˙t
;

202 #ifde‡
DOUBLE_LOG


203 i‡(
	gthªad_li°
[
i
].
	glog
 =
NULL
)

205 
thªad_li°
[
i
].
log
 = 
√w
 
LOG
();

206 
	gthªad_li°
[
i
].
	glog
->
öô
();

209 
öô_d©a_loˇl
();

210 
	gmy_thªad
 = &
thªad_li°
[
i
];

219 
©_u∆ock
(
thªad_lock
);

222 #ifde‡
idÀ_thªad


224 
upd©e_idÀ
()

226 
	gi
,
	gj
;

228 
	gi
=0;i<
	gnum_of_thªad
;i++)

230 i‡(
	gthªad_li°
[
i
].
	gloˇl_‰ì_˙t
[0] !
INV9
)

232 i‡(
thªad_li°
[
i
].
ru¬ög
 == 0)

234 
j
=0;
	gj
<
	gPM_N
;j++)

235 
	gthªad_li°
[
i
].
	gloˇl_‰ì_˙t
[
j
] = 
‰ì_˙t
[j];

236 
	gthªad_li°
[
i
].
	gloˇl_£g_‰ì_˙t
 = 
£g_‰ì_˙t
;

243 
upd©e_idÀ
()

249 
	#waô_f‹_¶ow


	)

251 
upd©e_‰ì_˙t
()

253 i‡(
	gmy_thªad
)

255 
	gmy_thªad
->
	g›_˙t
++;

256 i‡(
	gmy_thªad
->
	g›_˙t
 % 128 == 0)

258 
i
;

259 
	gi
=0;i<
	gPM_N
;i++)

261 
	gmy_thªad
->
	gloˇl_‰ì_˙t
[
i
] = 
‰ì_˙t
[i];

262 #ifde‡
waô_f‹_¶ow


263 
	gmö
 = 
mö_‰ì_˙t
(
i
);

264 i‡(
	gmö
 + 
	gFREE_QUEUE_LEN
/2 < 
	gmy_thªad
->
	gloˇl_‰ì_˙t
[
i
])

266 
¥ötf
("in1\n");

267 
	gmö
 + 
	gFREE_QUEUE_LEN
/2 < 
	gmy_thªad
->
	gloˇl_‰ì_˙t
[
i
])

268 
	gmö
 = 
mö_‰ì_˙t
(
i
);

269 
¥ötf
("out1\n");

275 
	gmy_thªad
->
	gloˇl_£g_‰ì_˙t
 = 
£g_‰ì_˙t
;

276 #ifde‡
waô_f‹_¶ow


277 
	gmö
 = 
mö_£g_‰ì_˙t
();

278 i‡(
	gmö
 + 
	gFREE_SEG_LEN
/2 < 
	gmy_thªad
->
	gloˇl_£g_‰ì_˙t
)

280 
¥ötf
("in2\n");

281 
	gmö
 + 
	gFREE_SEG_LEN
/2 < 
	gmy_thªad
->
	gloˇl_£g_‰ì_˙t
)

282 
	gmö
 = 
mö_£g_‰ì_˙t
();

283 
¥ötf
("out2\n");

290 
√w_thªad
();

292 
	gi
;

293 
±hªad_t
 
	g±
;

295 
	g±
 = 
±hªad_£lf
();

296 
	gi
=0;i<
	gnum_of_thªad
;i++)

298 i‡(
±hªad_equÆ
(
thªad_li°
[
i
].
tid
,
±
))

300 
	gthªad_li°
[
i
].
	g‰ì_˙t
 = 
‰ì_˙t
;

301 
	gthªad_li°
[
i
].
	g£g_‰ì_˙t
 = 
£g_‰ì_˙t
;

305 
√w_thªad
();

309 
mö_‰ì_˙t
(
∑π
)

311 
	gi
;

312 
	gmö
=999999999;

313 
	gi
=0;i<
	gnum_of_thªad
;i++)

315 i‡(
	gthªad_li°
[
i
].
	gru¬ög
 && 
	gmö
 >Åhªad_li°[i].
	gloˇl_‰ì_˙t
[
∑π
])

316 
	gmö
 = 
thªad_li°
[
i
].
loˇl_‰ì_˙t
[
∑π
];

318 i‡(
	gmö
 == 999999999)

319  
‰ì_˙t
[
∑π
];

320  
	gmö
;

323 
¥öt_thªad_öfo
()

325 
	gi
,
	gj
;

326 
	gi
=0;i<
	gnum_of_thªad
;i++)

328 
	gj
=0;j<
	gPM_N
;j++)

330 i‡(
	gthªad_li°
[
i
].
	gloˇl_‰ì_˙t
[
j
] != 999999999)

332 
¥ötf
("thªad %dÖ¨à%d / %d\n",
i
,
j
,
thªad_li°
[i].
loˇl_‰ì_˙t
[j]);

339 
mö_£g_‰ì_˙t
()

341 
	gi
;

342 
	gmö
=999999999;

343 
	gi
=0;i<
	gnum_of_thªad
;i++)

345 i‡(
	gmö
 > 
	gthªad_li°
[
i
].
	gloˇl_£g_‰ì_˙t
)

346 
	gmö
 = 
thªad_li°
[
i
].
loˇl_£g_‰ì_˙t
;

348 i‡(
	gmö
 == 999999999)

349  
£g_‰ì_˙t
;

350  
	gmö
;

	@thread.h

1 
	~<±hªad.h
>

2 
	~"log.h
"

4 
	#idÀ_thªad


	)

6 
«me•a˚
 
	gPH


9 
	#FREE_SEG_LEN
 10000

	)

10 
	#FREE_QUEUE_LEN
 100000

	)

12 ˛as†
	cPH_Thªad


14 
	gpublic
:

15 vﬁ©ûê
loˇl_‰ì_˙t
[
PM_N
];

16 vﬁ©ûê
	gloˇl_£g_‰ì_˙t
;

20 #ifde‡
idÀ_thªad


22 
	gru¬ög
;

24 
	g›_˙t
;

26 #ifde‡
DOUBLE_LOG


27 
˛ass
 
LOG
 *
	glog
;

30 
öô
();

31 
˛ón
();

34 
thªad_loˇl
 
PH_Thªad
* 
my_thªad
;

37 
ª£t_thªad
();

38 
exô_thªad
();

39 
upd©e_‰ì_˙t
();

40 
mö_‰ì_˙t
(
∑π
);

41 
mö_£g_‰ì_˙t
();

42 
öô_thªad
();

43 
˛ón_thªad
();

45 
¥öt_thªad_öfo
();

48 
upd©e_idÀ
();

	@/usr/include/libpmem.h

43 #i‚de‡
LIBPMEM_H


44 
	#LIBPMEM_H
 1

	)

46 
	~<sys/ty≥s.h
>

48 #ifde‡
_WIN32


49 
	~<pmemcom∑t.h
>

51 #i‚de‡
PMDK_UTF8_API


52 
	#pmem_m≠_fûe
 
pmem_m≠_fûeW


	)

53 
	#pmem_check_vîsi⁄
 
pmem_check_vîsi⁄W


	)

54 
	#pmem_îr‹msg
 
pmem_îr‹msgW


	)

56 
	#pmem_m≠_fûe
 
pmem_m≠_fûeU


	)

57 
	#pmem_check_vîsi⁄
 
pmem_check_vîsi⁄U


	)

58 
	#pmem_îr‹msg
 
pmem_îr‹msgU


	)

63 #ifde‡
__˝lu•lus


71 
	#PMEM_MIN_PART
 ((
size_t
)(1024 * 1024 * 2)Ë

	)

76 
	#PMEM_FILE_CREATE
 (1 << 0)

	)

77 
	#PMEM_FILE_EXCL
 (1 << 1)

	)

78 
	#PMEM_FILE_SPARSE
 (1 << 2)

	)

79 
	#PMEM_FILE_TMPFILE
 (1 << 3)

	)

81 #i‚de‡
_WIN32


82 *
pmem_m≠_fûe
(c⁄° *
∑th
, 
size_t
 
Àn
, 
Êags
, 
mode_t
 
mode
,

83 
size_t
 *
m≠≥d_À≈
, *
is_pmemp
);

85 *
pmem_m≠_fûeU
(c⁄° *
∑th
, 
size_t
 
Àn
, 
Êags
, 
mode_t
 
mode
,

86 
size_t
 *
m≠≥d_À≈
, *
is_pmemp
);

87 *
pmem_m≠_fûeW
(c⁄° 
wch¨_t
 *
∑th
, 
size_t
 
Àn
, 
Êags
, 
mode_t
 
mode
,

88 
size_t
 *
m≠≥d_À≈
, *
is_pmemp
);

91 
pmem_unm≠
(*
addr
, 
size_t
 
Àn
);

92 
pmem_is_pmem
(c⁄° *
addr
, 
size_t
 
Àn
);

93 
pmem_≥rsi°
(c⁄° *
addr
, 
size_t
 
Àn
);

94 
pmem_msync
(c⁄° *
addr
, 
size_t
 
Àn
);

95 
pmem_has_auto_Êush
();

96 
pmem_Êush
(c⁄° *
addr
, 
size_t
 
Àn
);

97 
pmem_dìp_Êush
(c⁄° *
addr
, 
size_t
 
Àn
);

98 
pmem_dìp_døö
(c⁄° *
addr
, 
size_t
 
Àn
);

99 
pmem_dìp_≥rsi°
(c⁄° *
addr
, 
size_t
 
Àn
);

100 
pmem_døö
();

101 
pmem_has_hw_døö
();

103 *
pmem_memmove_≥rsi°
(*
pmemde°
, c⁄° *
§c
, 
size_t
 
Àn
);

104 *
pmem_mem˝y_≥rsi°
(*
pmemde°
, c⁄° *
§c
, 
size_t
 
Àn
);

105 *
pmem_mem£t_≥rsi°
(*
pmemde°
, 
c
, 
size_t
 
Àn
);

106 *
pmem_memmove_nodøö
(*
pmemde°
, c⁄° *
§c
, 
size_t
 
Àn
);

107 *
pmem_mem˝y_nodøö
(*
pmemde°
, c⁄° *
§c
, 
size_t
 
Àn
);

108 *
pmem_mem£t_nodøö
(*
pmemde°
, 
c
, 
size_t
 
Àn
);

110 
	#PMEM_F_MEM_NODRAIN
 (1U << 0)

	)

112 
	#PMEM_F_MEM_NONTEMPORAL
 (1U << 1)

	)

113 
	#PMEM_F_MEM_TEMPORAL
 (1U << 2)

	)

115 
	#PMEM_F_MEM_WC
 (1U << 3)

	)

116 
	#PMEM_F_MEM_WB
 (1U << 4)

	)

118 
	#PMEM_F_MEM_NOFLUSH
 (1U << 5)

	)

120 
	#PMEM_F_MEM_VALID_FLAGS
 (
PMEM_F_MEM_NODRAIN
 | \

121 
PMEM_F_MEM_NONTEMPORAL
 | \

122 
PMEM_F_MEM_TEMPORAL
 | \

123 
PMEM_F_MEM_WC
 | \

124 
PMEM_F_MEM_WB
 | \

125 
PMEM_F_MEM_NOFLUSH
)

	)

127 *
pmem_memmove
(*
pmemde°
, c⁄° *
§c
, 
size_t
 
Àn
, 
Êags
);

128 *
pmem_mem˝y
(*
pmemde°
, c⁄° *
§c
, 
size_t
 
Àn
, 
Êags
);

129 *
pmem_mem£t
(*
pmemde°
, 
c
, 
size_t
 
Àn
, 
Êags
);

137 
	#PMEM_MAJOR_VERSION
 1

	)

138 
	#PMEM_MINOR_VERSION
 1

	)

140 #i‚de‡
_WIN32


141 c⁄° *
pmem_check_vîsi⁄
(
maj‹_ªquúed
,

142 
mö‹_ªquúed
);

144 c⁄° *
pmem_check_vîsi⁄U
(
maj‹_ªquúed
,

145 
mö‹_ªquúed
);

146 c⁄° 
wch¨_t
 *
pmem_check_vîsi⁄W
(
maj‹_ªquúed
,

147 
mö‹_ªquúed
);

150 #i‚de‡
_WIN32


151 c⁄° *
pmem_îr‹msg
();

153 c⁄° *
pmem_îr‹msgU
();

154 c⁄° 
wch¨_t
 *
pmem_îr‹msgW
();

157 #ifde‡
__˝lu•lus


	@/usr/include/pthread.h

18 #i‚de‡
_PTHREAD_H


19 
	#_PTHREAD_H
 1

	)

21 
	~<„©uªs.h
>

22 
	~<sched.h
>

23 
	~<time.h
>

25 
	~<bôs/ídün.h
>

26 
	~<bôs/±hªadty≥s.h
>

27 
	~<bôs/£tjmp.h
>

28 
	~<bôs/w‹dsize.h
>

29 
	~<bôs/ty≥s/°ru˘_time•ec.h
>

35 
	mPTHREAD_CREATE_JOINABLE
,

36 
	#PTHREAD_CREATE_JOINABLE
 
PTHREAD_CREATE_JOINABLE


	)

37 
	mPTHREAD_CREATE_DETACHED


38 
	#PTHREAD_CREATE_DETACHED
 
PTHREAD_CREATE_DETACHED


	)

45 
	mPTHREAD_MUTEX_TIMED_NP
,

46 
	mPTHREAD_MUTEX_RECURSIVE_NP
,

47 
	mPTHREAD_MUTEX_ERRORCHECK_NP
,

48 
	mPTHREAD_MUTEX_ADAPTIVE_NP


49 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


51 
	mPTHREAD_MUTEX_NORMAL
 = 
PTHREAD_MUTEX_TIMED_NP
,

52 
	mPTHREAD_MUTEX_RECURSIVE
 = 
PTHREAD_MUTEX_RECURSIVE_NP
,

53 
	mPTHREAD_MUTEX_ERRORCHECK
 = 
PTHREAD_MUTEX_ERRORCHECK_NP
,

54 
	mPTHREAD_MUTEX_DEFAULT
 = 
PTHREAD_MUTEX_NORMAL


56 #ifde‡
__USE_GNU


58 , 
	mPTHREAD_MUTEX_FAST_NP
 = 
PTHREAD_MUTEX_TIMED_NP


63 #ifde‡
__USE_XOPEN2K


67 
	mPTHREAD_MUTEX_STALLED
,

68 
	mPTHREAD_MUTEX_STALLED_NP
 = 
PTHREAD_MUTEX_STALLED
,

69 
	mPTHREAD_MUTEX_ROBUST
,

70 
	mPTHREAD_MUTEX_ROBUST_NP
 = 
PTHREAD_MUTEX_ROBUST


75 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


79 
	mPTHREAD_PRIO_NONE
,

80 
	mPTHREAD_PRIO_INHERIT
,

81 
	mPTHREAD_PRIO_PROTECT


86 
	#PTHREAD_MUTEX_INITIALIZER
 \

87 { { 
	`__PTHREAD_MUTEX_INITIALIZER
 (
PTHREAD_MUTEX_TIMED_NP
Ë} }

	)

88 #ifde‡
__USE_GNU


89 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
 \

90 { { 
	`__PTHREAD_MUTEX_INITIALIZER
 (
PTHREAD_MUTEX_RECURSIVE_NP
Ë} }

	)

91 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
 \

92 { { 
	`__PTHREAD_MUTEX_INITIALIZER
 (
PTHREAD_MUTEX_ERRORCHECK_NP
Ë} }

	)

93 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

94 { { 
	`__PTHREAD_MUTEX_INITIALIZER
 (
PTHREAD_MUTEX_ADAPTIVE_NP
Ë} }

	)

99 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


102 
	mPTHREAD_RWLOCK_PREFER_READER_NP
,

103 
	mPTHREAD_RWLOCK_PREFER_WRITER_NP
,

104 
	mPTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
,

105 
	mPTHREAD_RWLOCK_DEFAULT_NP
 = 
PTHREAD_RWLOCK_PREFER_READER_NP


110 
	#PTHREAD_RWLOCK_INITIALIZER
 \

111 { { 
	`__PTHREAD_RWLOCK_INITIALIZER
 (
PTHREAD_RWLOCK_DEFAULT_NP
Ë} }

	)

112 #ifde‡
__USE_GNU


113 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

114 { { 
	`__PTHREAD_RWLOCK_INITIALIZER
 (
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
Ë} }

	)

122 
	mPTHREAD_INHERIT_SCHED
,

123 
	#PTHREAD_INHERIT_SCHED
 
PTHREAD_INHERIT_SCHED


	)

124 
	mPTHREAD_EXPLICIT_SCHED


125 
	#PTHREAD_EXPLICIT_SCHED
 
PTHREAD_EXPLICIT_SCHED


	)

132 
	mPTHREAD_SCOPE_SYSTEM
,

133 
	#PTHREAD_SCOPE_SYSTEM
 
PTHREAD_SCOPE_SYSTEM


	)

134 
	mPTHREAD_SCOPE_PROCESS


135 
	#PTHREAD_SCOPE_PROCESS
 
PTHREAD_SCOPE_PROCESS


	)

142 
	mPTHREAD_PROCESS_PRIVATE
,

143 
	#PTHREAD_PROCESS_PRIVATE
 
PTHREAD_PROCESS_PRIVATE


	)

144 
	mPTHREAD_PROCESS_SHARED


145 
	#PTHREAD_PROCESS_SHARED
 
PTHREAD_PROCESS_SHARED


	)

151 
	#PTHREAD_COND_INITIALIZER
 { { {0}, {0}, {0, 0}, {0, 0}, 0, 0, {0, 0} } }

	)

155 
	s_±hªad_˛ónup_buf„r


157 (*
	m__routöe
) (*);

158 *
	m__¨g
;

159 
	m__ˇn˚…y≥
;

160 
_±hªad_˛ónup_buf„r
 *
	m__¥ev
;

166 
	mPTHREAD_CANCEL_ENABLE
,

167 
	#PTHREAD_CANCEL_ENABLE
 
PTHREAD_CANCEL_ENABLE


	)

168 
	mPTHREAD_CANCEL_DISABLE


169 
	#PTHREAD_CANCEL_DISABLE
 
PTHREAD_CANCEL_DISABLE


	)

173 
	mPTHREAD_CANCEL_DEFERRED
,

174 
	#PTHREAD_CANCEL_DEFERRED
 
PTHREAD_CANCEL_DEFERRED


	)

175 
	mPTHREAD_CANCEL_ASYNCHRONOUS


176 
	#PTHREAD_CANCEL_ASYNCHRONOUS
 
PTHREAD_CANCEL_ASYNCHRONOUS


	)

178 
	#PTHREAD_CANCELED
 ((*Ë-1)

	)

182 
	#PTHREAD_ONCE_INIT
 0

	)

185 #ifde‡
__USE_XOPEN2K


189 
	#PTHREAD_BARRIER_SERIAL_THREAD
 -1

	)

193 
__BEGIN_DECLS


198 
	$±hªad_¸óã
 (
±hªad_t
 *
__ª°ri˘
 
__√wthªad
,

199 c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

200 *(*
__°¨t_routöe
) (*),

201 *
__ª°ri˘
 
__¨g
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 3));

207 
	$±hªad_exô
 (*
__ªtvÆ
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

215 
	`±hªad_joö
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
);

217 #ifde‡
__USE_GNU


220 
	$±hªad_åyjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
Ë
__THROW
;

228 
	`±hªad_timedjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
,

229 c⁄° 
time•ec
 *
__ab°ime
);

238 
	`±hªad_˛ockjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
,

239 
˛ockid_t
 
__˛ockid
,

240 c⁄° 
time•ec
 *
__ab°ime
);

247 
	$±hªad_dëach
 (
±hªad_t
 
__th
Ë
__THROW
;

251 
±hªad_t
 
	$±hªad_£lf
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

254 
	$±hªad_equÆ
 (
±hªad_t
 
__thªad1
,Öthªad_à
__thªad2
)

255 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

263 
	$±hªad_©å_öô
 (
±hªad_©å_t
 *
__©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

266 
	$±hªad_©å_de°roy
 (
±hªad_©å_t
 *
__©å
)

267 
__THROW
 
	`__n⁄nuŒ
 ((1));

270 
	$±hªad_©å_gëdëach°©e
 (c⁄° 
±hªad_©å_t
 *
__©å
,

271 *
__dëach°©e
)

272 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

275 
	$±hªad_©å_£tdëach°©e
 (
±hªad_©å_t
 *
__©å
,

276 
__dëach°©e
)

277 
__THROW
 
	`__n⁄nuŒ
 ((1));

281 
	$±hªad_©å_gëgu¨dsize
 (c⁄° 
±hªad_©å_t
 *
__©å
,

282 
size_t
 *
__gu¨dsize
)

283 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

286 
	$±hªad_©å_£tgu¨dsize
 (
±hªad_©å_t
 *
__©å
,

287 
size_t
 
__gu¨dsize
)

288 
__THROW
 
	`__n⁄nuŒ
 ((1));

292 
	$±hªad_©å_gësched∑øm
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

293 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

294 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

297 
	$±hªad_©å_£tsched∑øm
 (
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

298 c⁄° 
sched_∑øm
 *
__ª°ri˘


299 
__∑øm
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

302 
	$±hªad_©å_gëschedpﬁicy
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


303 
__©å
, *
__ª°ri˘
 
__pﬁicy
)

304 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

307 
	$±hªad_©å_£tschedpﬁicy
 (
±hªad_©å_t
 *
__©å
, 
__pﬁicy
)

308 
__THROW
 
	`__n⁄nuŒ
 ((1));

311 
	$±hªad_©å_gëöhîôsched
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


312 
__©å
, *
__ª°ri˘
 
__öhîô
)

313 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

316 
	$±hªad_©å_£töhîôsched
 (
±hªad_©å_t
 *
__©å
,

317 
__öhîô
)

318 
__THROW
 
	`__n⁄nuŒ
 ((1));

322 
	$±hªad_©å_gësc›e
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

323 *
__ª°ri˘
 
__sc›e
)

324 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

327 
	$±hªad_©å_£tsc›e
 (
±hªad_©å_t
 *
__©å
, 
__sc›e
)

328 
__THROW
 
	`__n⁄nuŒ
 ((1));

331 
	$±hªad_©å_gë°ackaddr
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


332 
__©å
, **
__ª°ri˘
 
__°ackaddr
)

333 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__©åibuã_dïªˇãd__
;

339 
	$±hªad_©å_£t°ackaddr
 (
±hªad_©å_t
 *
__©å
,

340 *
__°ackaddr
)

341 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
;

344 
	$±hªad_©å_gë°acksize
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


345 
__©å
, 
size_t
 *
__ª°ri˘
 
__°acksize
)

346 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

351 
	$±hªad_©å_£t°acksize
 (
±hªad_©å_t
 *
__©å
,

352 
size_t
 
__°acksize
)

353 
__THROW
 
	`__n⁄nuŒ
 ((1));

355 #ifde‡
__USE_XOPEN2K


357 
	$±hªad_©å_gë°ack
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

358 **
__ª°ri˘
 
__°ackaddr
,

359 
size_t
 *
__ª°ri˘
 
__°acksize
)

360 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

365 
	$±hªad_©å_£t°ack
 (
±hªad_©å_t
 *
__©å
, *
__°ackaddr
,

366 
size_t
 
__°acksize
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

369 #ifde‡
__USE_GNU


372 
	$±hªad_©å_£èfföôy_≈
 (
±hªad_©å_t
 *
__©å
,

373 
size_t
 
__˝u£tsize
,

374 c⁄° 
˝u_£t_t
 *
__˝u£t
)

375 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

379 
	$±hªad_©å_gëafföôy_≈
 (c⁄° 
±hªad_©å_t
 *
__©å
,

380 
size_t
 
__˝u£tsize
,

381 
˝u_£t_t
 *
__˝u£t
)

382 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

385 
	$±hªad_gë©å_deÁu…_≈
 (
±hªad_©å_t
 *
__©å
)

386 
__THROW
 
	`__n⁄nuŒ
 ((1));

390 
	$±hªad_£èâr_deÁu…_≈
 (c⁄° 
±hªad_©å_t
 *
__©å
)

391 
__THROW
 
	`__n⁄nuŒ
 ((1));

396 
	$±hªad_gë©å_≈
 (
±hªad_t
 
__th
, 
±hªad_©å_t
 *
__©å
)

397 
__THROW
 
	`__n⁄nuŒ
 ((2));

405 
	$±hªad_£tsched∑øm
 (
±hªad_t
 
__èrgë_thªad
, 
__pﬁicy
,

406 c⁄° 
sched_∑øm
 *
__∑øm
)

407 
__THROW
 
	`__n⁄nuŒ
 ((3));

410 
	$±hªad_gësched∑øm
 (
±hªad_t
 
__èrgë_thªad
,

411 *
__ª°ri˘
 
__pﬁicy
,

412 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

413 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

416 
	$±hªad_£tsched¥io
 (
±hªad_t
 
__èrgë_thªad
, 
__¥io
)

417 
__THROW
;

420 #ifde‡
__USE_GNU


422 
	$±hªad_gë«me_≈
 (
±hªad_t
 
__èrgë_thªad
, *
__buf
,

423 
size_t
 
__buÊí
)

424 
__THROW
 
	`__n⁄nuŒ
 ((2));

427 
	$±hªad_£äame_≈
 (
±hªad_t
 
__èrgë_thªad
, c⁄° *
__«me
)

428 
__THROW
 
	`__n⁄nuŒ
 ((2));

432 #ifde‡
__USE_UNIX98


434 
	$±hªad_gëc⁄cuºícy
 (Ë
__THROW
;

437 
	$±hªad_£tc⁄cuºícy
 (
__Àvñ
Ë
__THROW
;

440 #ifde‡
__USE_GNU


445 
	$±hªad_yõld
 (Ë
__THROW
;

450 
	$±hªad_£èfföôy_≈
 (
±hªad_t
 
__th
, 
size_t
 
__˝u£tsize
,

451 c⁄° 
˝u_£t_t
 *
__˝u£t
)

452 
__THROW
 
	`__n⁄nuŒ
 ((3));

455 
	$±hªad_gëafföôy_≈
 (
±hªad_t
 
__th
, 
size_t
 
__˝u£tsize
,

456 
˝u_£t_t
 *
__˝u£t
)

457 
__THROW
 
	`__n⁄nuŒ
 ((3));

470 
	$±hªad_⁄˚
 (
±hªad_⁄˚_t
 *
__⁄˚_c⁄åﬁ
,

471 (*
__öô_routöe
Ë()Ë
	`__n⁄nuŒ
 ((1, 2));

482 
	`±hªad_£tˇn˚l°©e
 (
__°©e
, *
__ﬁd°©e
);

486 
	`±hªad_£tˇn˚…y≥
 (
__ty≥
, *
__ﬁdty≥
);

489 
	`±hªad_ˇn˚l
 (
±hªad_t
 
__th
);

494 
	`±hªad_ã°ˇn˚l
 ();

503 
__jmp_buf
 
__ˇn˚l_jmp_buf
;

504 
__mask_was_ßved
;

505 } 
__ˇn˚l_jmp_buf
[1];

506 *
__∑d
[4];

507 } 
	t__±hªad_unwöd_buf_t
 
	t__©åibuã__
 ((
	t__Æig√d__
));

510 #i‚de‡
__˛ónup_f˘_©åibuã


511 
	#__˛ónup_f˘_©åibuã


	)

516 
	s__±hªad_˛ónup_‰ame


518 (*
__ˇn˚l_routöe
) (*);

519 *
__ˇn˚l_¨g
;

520 
__do_ô
;

521 
__ˇn˚l_ty≥
;

524 #i‡
deföed
 
__GNUC__
 && deföed 
__EXCEPTIONS


525 #ifde‡
__˝lu•lus


527 ˛as†
	c__±hªad_˛ónup_˛ass


529 (*
__ˇn˚l_routöe
) (*);

530 *
__ˇn˚l_¨g
;

531 
__do_ô
;

532 
__ˇn˚l_ty≥
;

534 
public
:

535 
	$__±hªad_˛ónup_˛ass
 ((*
__f˘
Ë(*), *
__¨g
)

536 : 
	`__ˇn˚l_routöe
 (
__f˘
), 
	`__ˇn˚l_¨g
 (
__¨g
), 
	$__do_ô
 (1) { }

537 ~
	$__±hªad_˛ónup_˛ass
 (Ë{ i‡(
__do_ô
Ë
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); 
	}
}

538 
	$__£tdoô
 (
__√wvÆ
Ë{ 
__do_ô
 = __√wvÆ; 
	}
}

539 
	$__de„r
 (Ë{ 
	`±hªad_£tˇn˚…y≥
 (
PTHREAD_CANCEL_DEFERRED
,

540 &
__ˇn˚l_ty≥
); 
	}
}

541 
	$__ª°‹e
 (Ëc⁄° { 
	`±hªad_£tˇn˚…y≥
 (
__ˇn˚l_ty≥
, 0); 
	}
}

551 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

553 
__±hªad_˛ónup_˛ass
 
	`__˛‰ame
 (
routöe
, 
¨g
)

	)

557 
	#±hªad_˛ónup_p›
(
execuã
) \

558 
__˛‰ame
.
	`__£tdoô
 (
execuã
); \

559 } 0)

	)

561 #ifde‡
__USE_GNU


565 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

567 
__±hªad_˛ónup_˛ass
 
	`__˛‰ame
 (
routöe
, 
¨g
); \

568 
__˛‰ame
.
	`__de„r
 ()

	)

573 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

574 
__˛‰ame
.
	`__ª°‹e
 (); \

575 
__˛‰ame
.
	`__£tdoô
 (
execuã
); \

576 } 0)

	)

583 
__exã∫_ölöe
 

584 
	$__±hªad_˛ónup_routöe
 (
__±hªad_˛ónup_‰ame
 *
__‰ame
)

586 i‡(
__‰ame
->
__do_ô
)

587 
__‰ame
->
	`__ˇn˚l_routöe
 (__‰ame->
__ˇn˚l_¨g
);

588 
	}
}

597 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

599 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

600 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__±hªad_˛ónup_routöe
))) \

601 { .
__ˇn˚l_routöe
 = (
routöe
), .
__ˇn˚l_¨g
 = (
¨g
), \

602 .
__do_ô
 = 1 };

	)

606 
	#±hªad_˛ónup_p›
(
execuã
) \

607 
__˛‰ame
.
__do_ô
 = (
execuã
); \

608 } 0)

	)

610 #ifde‡
__USE_GNU


614 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

616 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

617 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__±hªad_˛ónup_routöe
))) \

618 { .
__ˇn˚l_routöe
 = (
routöe
), .
__ˇn˚l_¨g
 = (
¨g
), \

619 .
__do_ô
 = 1 }; \

620 (Ë
	`±hªad_£tˇn˚…y≥
 (
PTHREAD_CANCEL_DEFERRED
, \

621 &
__˛‰ame
.
__ˇn˚l_ty≥
)

	)

626 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

627 (Ë
	`±hªad_£tˇn˚…y≥
 (
__˛‰ame
.
__ˇn˚l_ty≥
, 
NULL
); \

628 
__˛‰ame
.
__do_ô
 = (
execuã
); \

629 } 0)

	)

640 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

642 
__±hªad_unwöd_buf_t
 
__ˇn˚l_buf
; \

643 (*
__ˇn˚l_routöe
Ë(*Ë(
routöe
); \

644 *
__ˇn˚l_¨g
 = (
¨g
); \

645 
__nŸ_fú°_ˇŒ
 = 
	`__sig£tjmp
 ((
__jmp_buf_èg
 *) (*) \

646 
__ˇn˚l_buf
.
__ˇn˚l_jmp_buf
, 0); \

647 i‡(
	`__glibc_u∆ikñy
 (
__nŸ_fú°_ˇŒ
)) \

649 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

650 
	`__±hªad_unwöd_√xt
 (&
__ˇn˚l_buf
); \

654 
	`__±hªad_ªgi°î_ˇn˚l
 (&
__ˇn˚l_buf
); \

655 dÿ{

	)

656 
__±hªad_ªgi°î_ˇn˚l
 (
__±hªad_unwöd_buf_t
 *
__buf
)

657 
__˛ónup_f˘_©åibuã
;

661 
	#±hªad_˛ónup_p›
(
execuã
) \

664 
	`__±hªad_uƒegi°î_ˇn˚l
 (&
__ˇn˚l_buf
); \

665 i‡(
execuã
) \

666 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

667 } 0)

	)

668 
	$__±hªad_uƒegi°î_ˇn˚l
 (
__±hªad_unwöd_buf_t
 *
__buf
)

669 
__˛ónup_f˘_©åibuã
;

671 #ifde‡
__USE_GNU


675 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

677 
__±hªad_unwöd_buf_t
 
__ˇn˚l_buf
; \

678 (*
__ˇn˚l_routöe
Ë(*Ë(
routöe
); \

679 *
__ˇn˚l_¨g
 = (
¨g
); \

680 
__nŸ_fú°_ˇŒ
 = 
	`__sig£tjmp
 ((
__jmp_buf_èg
 *) (*) \

681 
__ˇn˚l_buf
.
__ˇn˚l_jmp_buf
, 0); \

682 i‡(
	`__glibc_u∆ikñy
 (
__nŸ_fú°_ˇŒ
)) \

684 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

685 
	`__±hªad_unwöd_√xt
 (&
__ˇn˚l_buf
); \

689 
	`__±hªad_ªgi°î_ˇn˚l_de„r
 (&
__ˇn˚l_buf
); \

690 dÿ{

	)

691 
	`__±hªad_ªgi°î_ˇn˚l_de„r
 (
__±hªad_unwöd_buf_t
 *
__buf
)

692 
__˛ónup_f˘_©åibuã
;

697 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

700 
	`__±hªad_uƒegi°î_ˇn˚l_ª°‹e
 (&
__ˇn˚l_buf
); \

701 i‡(
execuã
) \

702 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

703 
	}
} 0)

	)

704 
	$__±hªad_uƒegi°î_ˇn˚l_ª°‹e
 (
__±hªad_unwöd_buf_t
 *
__buf
)

705 
__˛ónup_f˘_©åibuã
;

709 
	$__±hªad_unwöd_√xt
 (
__±hªad_unwöd_buf_t
 *
__buf
)

710 
__˛ónup_f˘_©åibuã
 
	`__©åibuã__
 ((
__n‹ëu∫__
))

711 #i‚de‡
SHARED


712 
	`__©åibuã__
 ((
__wók__
))

718 
__jmp_buf_èg
;

719 
	$__sig£tjmp
 (
__jmp_buf_èg
 *
__ív
, 
__ßvemask
Ë
__THROWNL
;

725 
	$±hªad_muãx_öô
 (
±hªad_muãx_t
 *
__muãx
,

726 c⁄° 
±hªad_muãx©å_t
 *
__muãx©å
)

727 
__THROW
 
	`__n⁄nuŒ
 ((1));

730 
	$±hªad_muãx_de°roy
 (
±hªad_muãx_t
 *
__muãx
)

731 
__THROW
 
	`__n⁄nuŒ
 ((1));

734 
	$±hªad_muãx_åylock
 (
±hªad_muãx_t
 *
__muãx
)

735 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

738 
	$±hªad_muãx_lock
 (
±hªad_muãx_t
 *
__muãx
)

739 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

741 #ifde‡
__USE_XOPEN2K


743 
	$±hªad_muãx_timedlock
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

744 c⁄° 
time•ec
 *
__ª°ri˘


745 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 2));

748 #ifde‡
__USE_GNU


749 
	$±hªad_muãx_˛ocklock
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

750 
˛ockid_t
 
__˛ockid
,

751 c⁄° 
time•ec
 *
__ª°ri˘


752 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 3));

756 
	$±hªad_muãx_u∆ock
 (
±hªad_muãx_t
 *
__muãx
)

757 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

761 
	$±hªad_muãx_gë¥io˚ûög
 (c⁄° 
±hªad_muãx_t
 *

762 
__ª°ri˘
 
__muãx
,

763 *
__ª°ri˘
 
__¥io˚ûög
)

764 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

768 
	$±hªad_muãx_£çrio˚ûög
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

769 
__¥io˚ûög
,

770 *
__ª°ri˘
 
__ﬁd_˚ûög
)

771 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

774 #ifde‡
__USE_XOPEN2K8


776 
	$±hªad_muãx_c⁄si°ít
 (
±hªad_muãx_t
 *
__muãx
)

777 
__THROW
 
	`__n⁄nuŒ
 ((1));

778 #ifde‡
__USE_GNU


779 
	$±hªad_muãx_c⁄si°ít_≈
 (
±hªad_muãx_t
 *
__muãx
)

780 
__THROW
 
	`__n⁄nuŒ
 ((1));

789 
	$±hªad_muãx©å_öô
 (
±hªad_muãx©å_t
 *
__©å
)

790 
__THROW
 
	`__n⁄nuŒ
 ((1));

793 
	$±hªad_muãx©å_de°roy
 (
±hªad_muãx©å_t
 *
__©å
)

794 
__THROW
 
	`__n⁄nuŒ
 ((1));

797 
	$±hªad_muãx©å_gëpsh¨ed
 (c⁄° 
±hªad_muãx©å_t
 *

798 
__ª°ri˘
 
__©å
,

799 *
__ª°ri˘
 
__psh¨ed
)

800 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

803 
	$±hªad_muãx©å_£çsh¨ed
 (
±hªad_muãx©å_t
 *
__©å
,

804 
__psh¨ed
)

805 
__THROW
 
	`__n⁄nuŒ
 ((1));

807 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


809 
	$±hªad_muãx©å_gëty≥
 (c⁄° 
±hªad_muãx©å_t
 *
__ª°ri˘


810 
__©å
, *
__ª°ri˘
 
__köd
)

811 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

816 
	$±hªad_muãx©å_£ây≥
 (
±hªad_muãx©å_t
 *
__©å
, 
__köd
)

817 
__THROW
 
	`__n⁄nuŒ
 ((1));

821 
	$±hªad_muãx©å_gë¥Ÿocﬁ
 (c⁄° 
±hªad_muãx©å_t
 *

822 
__ª°ri˘
 
__©å
,

823 *
__ª°ri˘
 
__¥Ÿocﬁ
)

824 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

828 
	$±hªad_muãx©å_£çrŸocﬁ
 (
±hªad_muãx©å_t
 *
__©å
,

829 
__¥Ÿocﬁ
)

830 
__THROW
 
	`__n⁄nuŒ
 ((1));

833 
	$±hªad_muãx©å_gë¥io˚ûög
 (c⁄° 
±hªad_muãx©å_t
 *

834 
__ª°ri˘
 
__©å
,

835 *
__ª°ri˘
 
__¥io˚ûög
)

836 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

839 
	$±hªad_muãx©å_£çrio˚ûög
 (
±hªad_muãx©å_t
 *
__©å
,

840 
__¥io˚ûög
)

841 
__THROW
 
	`__n⁄nuŒ
 ((1));

843 #ifde‡
__USE_XOPEN2K


845 
	$±hªad_muãx©å_gërobu°
 (c⁄° 
±hªad_muãx©å_t
 *
__©å
,

846 *
__robu°√ss
)

847 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

848 #ifde‡
__USE_GNU


849 
	$±hªad_muãx©å_gërobu°_≈
 (c⁄° 
±hªad_muãx©å_t
 *
__©å
,

850 *
__robu°√ss
)

851 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

855 
	$±hªad_muãx©å_£åobu°
 (
±hªad_muãx©å_t
 *
__©å
,

856 
__robu°√ss
)

857 
__THROW
 
	`__n⁄nuŒ
 ((1));

858 #ifde‡
__USE_GNU


859 
	$±hªad_muãx©å_£åobu°_≈
 (
±hªad_muãx©å_t
 *
__©å
,

860 
__robu°√ss
)

861 
__THROW
 
	`__n⁄nuŒ
 ((1));

866 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


871 
	$±hªad_rwlock_öô
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

872 c⁄° 
±hªad_rwlock©å_t
 *
__ª°ri˘


873 
__©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

876 
	$±hªad_rwlock_de°roy
 (
±hªad_rwlock_t
 *
__rwlock
)

877 
__THROW
 
	`__n⁄nuŒ
 ((1));

880 
	$±hªad_rwlock_rdlock
 (
±hªad_rwlock_t
 *
__rwlock
)

881 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

884 
	$±hªad_rwlock_åyrdlock
 (
±hªad_rwlock_t
 *
__rwlock
)

885 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

887 #ifde‡
__USE_XOPEN2K


889 
	$±hªad_rwlock_timedrdlock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

890 c⁄° 
time•ec
 *
__ª°ri˘


891 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 2));

894 #ifde‡
__USE_GNU


895 
	$±hªad_rwlock_˛ockrdlock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

896 
˛ockid_t
 
__˛ockid
,

897 c⁄° 
time•ec
 *
__ª°ri˘


898 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 3));

902 
	$±hªad_rwlock_wæock
 (
±hªad_rwlock_t
 *
__rwlock
)

903 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

906 
	$±hªad_rwlock_åywæock
 (
±hªad_rwlock_t
 *
__rwlock
)

907 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

909 #ifde‡
__USE_XOPEN2K


911 
	$±hªad_rwlock_timedwæock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

912 c⁄° 
time•ec
 *
__ª°ri˘


913 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 2));

916 #ifde‡
__USE_GNU


917 
	$±hªad_rwlock_˛ockwæock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

918 
˛ockid_t
 
__˛ockid
,

919 c⁄° 
time•ec
 *
__ª°ri˘


920 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 3));

924 
	$±hªad_rwlock_u∆ock
 (
±hªad_rwlock_t
 *
__rwlock
)

925 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

931 
	$±hªad_rwlock©å_öô
 (
±hªad_rwlock©å_t
 *
__©å
)

932 
__THROW
 
	`__n⁄nuŒ
 ((1));

935 
	$±hªad_rwlock©å_de°roy
 (
±hªad_rwlock©å_t
 *
__©å
)

936 
__THROW
 
	`__n⁄nuŒ
 ((1));

939 
	$±hªad_rwlock©å_gëpsh¨ed
 (c⁄° 
±hªad_rwlock©å_t
 *

940 
__ª°ri˘
 
__©å
,

941 *
__ª°ri˘
 
__psh¨ed
)

942 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

945 
	$±hªad_rwlock©å_£çsh¨ed
 (
±hªad_rwlock©å_t
 *
__©å
,

946 
__psh¨ed
)

947 
__THROW
 
	`__n⁄nuŒ
 ((1));

950 
	$±hªad_rwlock©å_gëköd_≈
 (c⁄° 
±hªad_rwlock©å_t
 *

951 
__ª°ri˘
 
__©å
,

952 *
__ª°ri˘
 
__¥ef
)

953 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

956 
	$±hªad_rwlock©å_£tköd_≈
 (
±hªad_rwlock©å_t
 *
__©å
,

957 
__¥ef
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

965 
	$±hªad_c⁄d_öô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

966 c⁄° 
±hªad_c⁄d©å_t
 *
__ª°ri˘
 
__c⁄d_©å
)

967 
__THROW
 
	`__n⁄nuŒ
 ((1));

970 
	$±hªad_c⁄d_de°roy
 (
±hªad_c⁄d_t
 *
__c⁄d
)

971 
__THROW
 
	`__n⁄nuŒ
 ((1));

974 
	$±hªad_c⁄d_sig«l
 (
±hªad_c⁄d_t
 *
__c⁄d
)

975 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

978 
	$±hªad_c⁄d_brﬂdˇ°
 (
±hªad_c⁄d_t
 *
__c⁄d
)

979 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

986 
	$±hªad_c⁄d_waô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

987 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
)

988 
	`__n⁄nuŒ
 ((1, 2));

997 
	$±hªad_c⁄d_timedwaô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

998 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

999 c⁄° 
time•ec
 *
__ª°ri˘
 
__ab°ime
)

1000 
	`__n⁄nuŒ
 ((1, 2, 3));

1002 #ifde‡
__USE_GNU


1010 
	$±hªad_c⁄d_˛ockwaô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

1011 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

1012 
__˛ockid_t
 
__˛ock_id
,

1013 c⁄° 
time•ec
 *
__ª°ri˘
 
__ab°ime
)

1014 
	`__n⁄nuŒ
 ((1, 2, 4));

1020 
	$±hªad_c⁄d©å_öô
 (
±hªad_c⁄d©å_t
 *
__©å
)

1021 
__THROW
 
	`__n⁄nuŒ
 ((1));

1024 
	$±hªad_c⁄d©å_de°roy
 (
±hªad_c⁄d©å_t
 *
__©å
)

1025 
__THROW
 
	`__n⁄nuŒ
 ((1));

1028 
	$±hªad_c⁄d©å_gëpsh¨ed
 (c⁄° 
±hªad_c⁄d©å_t
 *

1029 
__ª°ri˘
 
__©å
,

1030 *
__ª°ri˘
 
__psh¨ed
)

1031 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1034 
	$±hªad_c⁄d©å_£çsh¨ed
 (
±hªad_c⁄d©å_t
 *
__©å
,

1035 
__psh¨ed
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

1037 #ifde‡
__USE_XOPEN2K


1039 
	$±hªad_c⁄d©å_gë˛ock
 (c⁄° 
±hªad_c⁄d©å_t
 *

1040 
__ª°ri˘
 
__©å
,

1041 
__˛ockid_t
 *
__ª°ri˘
 
__˛ock_id
)

1042 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1045 
	$±hªad_c⁄d©å_£t˛ock
 (
±hªad_c⁄d©å_t
 *
__©å
,

1046 
__˛ockid_t
 
__˛ock_id
)

1047 
__THROW
 
	`__n⁄nuŒ
 ((1));

1051 #ifde‡
__USE_XOPEN2K


1056 
	$±hªad_•ö_öô
 (
±hªad_•ölock_t
 *
__lock
, 
__psh¨ed
)

1057 
__THROW
 
	`__n⁄nuŒ
 ((1));

1060 
	$±hªad_•ö_de°roy
 (
±hªad_•ölock_t
 *
__lock
)

1061 
__THROW
 
	`__n⁄nuŒ
 ((1));

1064 
	$±hªad_•ö_lock
 (
±hªad_•ölock_t
 *
__lock
)

1065 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1068 
	$±hªad_•ö_åylock
 (
±hªad_•ölock_t
 *
__lock
)

1069 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1072 
	$±hªad_•ö_u∆ock
 (
±hªad_•ölock_t
 *
__lock
)

1073 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1080 
	$±hªad_b¨rõr_öô
 (
±hªad_b¨rõr_t
 *
__ª°ri˘
 
__b¨rõr
,

1081 c⁄° 
±hªad_b¨rõøâr_t
 *
__ª°ri˘


1082 
__©å
, 
__cou¡
)

1083 
__THROW
 
	`__n⁄nuŒ
 ((1));

1086 
	$±hªad_b¨rõr_de°roy
 (
±hªad_b¨rõr_t
 *
__b¨rõr
)

1087 
__THROW
 
	`__n⁄nuŒ
 ((1));

1090 
	$±hªad_b¨rõr_waô
 (
±hªad_b¨rõr_t
 *
__b¨rõr
)

1091 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1095 
	$±hªad_b¨rõøâr_öô
 (
±hªad_b¨rõøâr_t
 *
__©å
)

1096 
__THROW
 
	`__n⁄nuŒ
 ((1));

1099 
	$±hªad_b¨rõøâr_de°roy
 (
±hªad_b¨rõøâr_t
 *
__©å
)

1100 
__THROW
 
	`__n⁄nuŒ
 ((1));

1103 
	$±hªad_b¨rõøâr_gëpsh¨ed
 (c⁄° 
±hªad_b¨rõøâr_t
 *

1104 
__ª°ri˘
 
__©å
,

1105 *
__ª°ri˘
 
__psh¨ed
)

1106 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1109 
	$±hªad_b¨rõøâr_£çsh¨ed
 (
±hªad_b¨rõøâr_t
 *
__©å
,

1110 
__psh¨ed
)

1111 
__THROW
 
	`__n⁄nuŒ
 ((1));

1123 
	$±hªad_key_¸óã
 (
±hªad_key_t
 *
__key
,

1124 (*
__de°r_fun˘i⁄
) (*))

1125 
__THROW
 
	`__n⁄nuŒ
 ((1));

1128 
	$±hªad_key_dñëe
 (
±hªad_key_t
 
__key
Ë
__THROW
;

1131 *
	$±hªad_gë•ecific
 (
±hªad_key_t
 
__key
Ë
__THROW
;

1134 
	$±hªad_£t•ecific
 (
±hªad_key_t
 
__key
,

1135 c⁄° *
__poöãr
Ë
__THROW
 ;

1138 #ifde‡
__USE_XOPEN2K


1140 
	$±hªad_gë˝u˛ockid
 (
±hªad_t
 
__thªad_id
,

1141 
__˛ockid_t
 *
__˛ock_id
)

1142 
__THROW
 
	`__n⁄nuŒ
 ((2));

1157 
	$±hªad_©f‹k
 ((*
__¥ï¨e
) (),

1158 (*
__∑ª¡
) (),

1159 (*
__chûd
Ë()Ë
__THROW
;

1162 #ifde‡
__USE_EXTERN_INLINES


1164 
__exã∫_ölöe
 

1165 
	`__NTH
 (
	$±hªad_equÆ
 (
±hªad_t
 
__thªad1
,Öthªad_à
__thªad2
))

1167  
__thªad1
 =
__thªad2
;

1168 
	}
}

1171 
	g__END_DECLS


	@/usr/include/stdint.h

22 #i‚de‡
_STDINT_H


23 
	#_STDINT_H
 1

	)

25 
	#__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION


	)

26 
	~<bôs/libc-hódî-°¨t.h
>

27 
	~<bôs/ty≥s.h
>

28 
	~<bôs/wch¨.h
>

29 
	~<bôs/w‹dsize.h
>

34 
	~<bôs/°döt-öä.h
>

37 
	~<bôs/°döt-uöä.h
>

43 
__öt_Àa°8_t
 
	töt_Àa°8_t
;

44 
__öt_Àa°16_t
 
	töt_Àa°16_t
;

45 
__öt_Àa°32_t
 
	töt_Àa°32_t
;

46 
__öt_Àa°64_t
 
	töt_Àa°64_t
;

49 
__uöt_Àa°8_t
 
	tuöt_Àa°8_t
;

50 
__uöt_Àa°16_t
 
	tuöt_Àa°16_t
;

51 
__uöt_Àa°32_t
 
	tuöt_Àa°32_t
;

52 
__uöt_Àa°64_t
 
	tuöt_Àa°64_t
;

58 sig√d 
	töt_Á°8_t
;

59 #i‡
__WORDSIZE
 == 64

60 
	töt_Á°16_t
;

61 
	töt_Á°32_t
;

62 
	töt_Á°64_t
;

64 
	töt_Á°16_t
;

65 
	töt_Á°32_t
;

66 
__exãnsi⁄__


67 
	töt_Á°64_t
;

71 
	tuöt_Á°8_t
;

72 #i‡
__WORDSIZE
 == 64

73 
	tuöt_Á°16_t
;

74 
	tuöt_Á°32_t
;

75 
	tuöt_Á°64_t
;

77 
	tuöt_Á°16_t
;

78 
	tuöt_Á°32_t
;

79 
__exãnsi⁄__


80 
	tuöt_Á°64_t
;

85 #i‡
__WORDSIZE
 == 64

86 #i‚de‡
__öçå_t_deföed


87 
	töçå_t
;

88 
	#__öçå_t_deföed


	)

90 
	tuöçå_t
;

92 #i‚de‡
__öçå_t_deföed


93 
	töçå_t
;

94 
	#__öçå_t_deföed


	)

96 
	tuöçå_t
;

101 
__ötmax_t
 
	tötmax_t
;

102 
__uötmax_t
 
	tuötmax_t
;

105 #i‡
__WORDSIZE
 == 64

106 
	#__INT64_C
(
c
Ë¯## 
L


	)

107 
	#__UINT64_C
(
c
Ë¯## 
UL


	)

109 
	#__INT64_C
(
c
Ë¯## 
LL


	)

110 
	#__UINT64_C
(
c
Ë¯## 
ULL


	)

116 
	#INT8_MIN
 (-128)

	)

117 
	#INT16_MIN
 (-32767-1)

	)

118 
	#INT32_MIN
 (-2147483647-1)

	)

119 
	#INT64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

121 
	#INT8_MAX
 (127)

	)

122 
	#INT16_MAX
 (32767)

	)

123 
	#INT32_MAX
 (2147483647)

	)

124 
	#INT64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

127 
	#UINT8_MAX
 (255)

	)

128 
	#UINT16_MAX
 (65535)

	)

129 
	#UINT32_MAX
 (4294967295U)

	)

130 
	#UINT64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

134 
	#INT_LEAST8_MIN
 (-128)

	)

135 
	#INT_LEAST16_MIN
 (-32767-1)

	)

136 
	#INT_LEAST32_MIN
 (-2147483647-1)

	)

137 
	#INT_LEAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

139 
	#INT_LEAST8_MAX
 (127)

	)

140 
	#INT_LEAST16_MAX
 (32767)

	)

141 
	#INT_LEAST32_MAX
 (2147483647)

	)

142 
	#INT_LEAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

145 
	#UINT_LEAST8_MAX
 (255)

	)

146 
	#UINT_LEAST16_MAX
 (65535)

	)

147 
	#UINT_LEAST32_MAX
 (4294967295U)

	)

148 
	#UINT_LEAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

152 
	#INT_FAST8_MIN
 (-128)

	)

153 #i‡
__WORDSIZE
 == 64

154 
	#INT_FAST16_MIN
 (-9223372036854775807L-1)

	)

155 
	#INT_FAST32_MIN
 (-9223372036854775807L-1)

	)

157 
	#INT_FAST16_MIN
 (-2147483647-1)

	)

158 
	#INT_FAST32_MIN
 (-2147483647-1)

	)

160 
	#INT_FAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

162 
	#INT_FAST8_MAX
 (127)

	)

163 #i‡
__WORDSIZE
 == 64

164 
	#INT_FAST16_MAX
 (9223372036854775807L)

	)

165 
	#INT_FAST32_MAX
 (9223372036854775807L)

	)

167 
	#INT_FAST16_MAX
 (2147483647)

	)

168 
	#INT_FAST32_MAX
 (2147483647)

	)

170 
	#INT_FAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

173 
	#UINT_FAST8_MAX
 (255)

	)

174 #i‡
__WORDSIZE
 == 64

175 
	#UINT_FAST16_MAX
 (18446744073709551615UL)

	)

176 
	#UINT_FAST32_MAX
 (18446744073709551615UL)

	)

178 
	#UINT_FAST16_MAX
 (4294967295U)

	)

179 
	#UINT_FAST32_MAX
 (4294967295U)

	)

181 
	#UINT_FAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

185 #i‡
__WORDSIZE
 == 64

186 
	#INTPTR_MIN
 (-9223372036854775807L-1)

	)

187 
	#INTPTR_MAX
 (9223372036854775807L)

	)

188 
	#UINTPTR_MAX
 (18446744073709551615UL)

	)

190 
	#INTPTR_MIN
 (-2147483647-1)

	)

191 
	#INTPTR_MAX
 (2147483647)

	)

192 
	#UINTPTR_MAX
 (4294967295U)

	)

197 
	#INTMAX_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

199 
	#INTMAX_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

202 
	#UINTMAX_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

208 #i‡
__WORDSIZE
 == 64

209 
	#PTRDIFF_MIN
 (-9223372036854775807L-1)

	)

210 
	#PTRDIFF_MAX
 (9223372036854775807L)

	)

212 #i‡
__WORDSIZE32_PTRDIFF_LONG


213 
	#PTRDIFF_MIN
 (-2147483647L-1)

	)

214 
	#PTRDIFF_MAX
 (2147483647L)

	)

216 
	#PTRDIFF_MIN
 (-2147483647-1)

	)

217 
	#PTRDIFF_MAX
 (2147483647)

	)

222 
	#SIG_ATOMIC_MIN
 (-2147483647-1)

	)

223 
	#SIG_ATOMIC_MAX
 (2147483647)

	)

226 #i‡
__WORDSIZE
 == 64

227 
	#SIZE_MAX
 (18446744073709551615UL)

	)

229 #i‡
__WORDSIZE32_SIZE_ULONG


230 
	#SIZE_MAX
 (4294967295UL)

	)

232 
	#SIZE_MAX
 (4294967295U)

	)

237 #i‚de‡
WCHAR_MIN


239 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

240 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

244 
	#WINT_MIN
 (0u)

	)

245 
	#WINT_MAX
 (4294967295u)

	)

248 
	#INT8_C
(
c
Ë
	)
c

249 
	#INT16_C
(
c
Ë
	)
c

250 
	#INT32_C
(
c
Ë
	)
c

251 #i‡
__WORDSIZE
 == 64

252 
	#INT64_C
(
c
Ë¯## 
L


	)

254 
	#INT64_C
(
c
Ë¯## 
LL


	)

258 
	#UINT8_C
(
c
Ë
	)
c

259 
	#UINT16_C
(
c
Ë
	)
c

260 
	#UINT32_C
(
c
Ë¯## 
U


	)

261 #i‡
__WORDSIZE
 == 64

262 
	#UINT64_C
(
c
Ë¯## 
UL


	)

264 
	#UINT64_C
(
c
Ë¯## 
ULL


	)

268 #i‡
__WORDSIZE
 == 64

269 
	#INTMAX_C
(
c
Ë¯## 
L


	)

270 
	#UINTMAX_C
(
c
Ë¯## 
UL


	)

272 
	#INTMAX_C
(
c
Ë¯## 
LL


	)

273 
	#UINTMAX_C
(
c
Ë¯## 
ULL


	)

276 #i‡
__GLIBC_USE
 (
IEC_60559_BFP_EXT_C2X
)

278 
	#INT8_WIDTH
 8

	)

279 
	#UINT8_WIDTH
 8

	)

280 
	#INT16_WIDTH
 16

	)

281 
	#UINT16_WIDTH
 16

	)

282 
	#INT32_WIDTH
 32

	)

283 
	#UINT32_WIDTH
 32

	)

284 
	#INT64_WIDTH
 64

	)

285 
	#UINT64_WIDTH
 64

	)

287 
	#INT_LEAST8_WIDTH
 8

	)

288 
	#UINT_LEAST8_WIDTH
 8

	)

289 
	#INT_LEAST16_WIDTH
 16

	)

290 
	#UINT_LEAST16_WIDTH
 16

	)

291 
	#INT_LEAST32_WIDTH
 32

	)

292 
	#UINT_LEAST32_WIDTH
 32

	)

293 
	#INT_LEAST64_WIDTH
 64

	)

294 
	#UINT_LEAST64_WIDTH
 64

	)

296 
	#INT_FAST8_WIDTH
 8

	)

297 
	#UINT_FAST8_WIDTH
 8

	)

298 
	#INT_FAST16_WIDTH
 
__WORDSIZE


	)

299 
	#UINT_FAST16_WIDTH
 
__WORDSIZE


	)

300 
	#INT_FAST32_WIDTH
 
__WORDSIZE


	)

301 
	#UINT_FAST32_WIDTH
 
__WORDSIZE


	)

302 
	#INT_FAST64_WIDTH
 64

	)

303 
	#UINT_FAST64_WIDTH
 64

	)

305 
	#INTPTR_WIDTH
 
__WORDSIZE


	)

306 
	#UINTPTR_WIDTH
 
__WORDSIZE


	)

308 
	#INTMAX_WIDTH
 64

	)

309 
	#UINTMAX_WIDTH
 64

	)

311 
	#PTRDIFF_WIDTH
 
__WORDSIZE


	)

312 
	#SIG_ATOMIC_WIDTH
 32

	)

313 
	#SIZE_WIDTH
 
__WORDSIZE


	)

314 
	#WCHAR_WIDTH
 32

	)

315 
	#WINT_WIDTH
 32

	)

	@/usr/include/stdio.h

23 #i‚de‡
_STDIO_H


24 
	#_STDIO_H
 1

	)

26 
	#__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION


	)

27 
	~<bôs/libc-hódî-°¨t.h
>

29 
	g__BEGIN_DECLS


31 
	#__√ed_size_t


	)

32 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

35 
	#__√ed___va_li°


	)

36 
	~<°d¨g.h
>

38 
	~<bôs/ty≥s.h
>

39 
	~<bôs/ty≥s/__Âos_t.h
>

40 
	~<bôs/ty≥s/__Âos64_t.h
>

41 
	~<bôs/ty≥s/__FILE.h
>

42 
	~<bôs/ty≥s/FILE.h
>

43 
	~<bôs/ty≥s/°ru˘_FILE.h
>

45 #ifde‡
__USE_GNU


46 
	~<bôs/ty≥s/cookõ_io_fun˘i⁄s_t.h
>

49 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


50 #ifde‡
__GNUC__


51 #i‚de‡
_VA_LIST_DEFINED


52 
__gnuc_va_li°
 
	tva_li°
;

53 
	#_VA_LIST_DEFINED


	)

56 
	~<°d¨g.h
>

60 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


61 #i‚de‡
__off_t_deföed


62 #i‚de‡
__USE_FILE_OFFSET64


63 
__off_t
 
	toff_t
;

65 
__off64_t
 
	toff_t
;

67 
	#__off_t_deföed


	)

69 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


70 
__off64_t
 
	toff64_t
;

71 
	#__off64_t_deföed


	)

75 #ifde‡
__USE_XOPEN2K8


76 #i‚de‡
__ssize_t_deföed


77 
__ssize_t
 
	tssize_t
;

78 
	#__ssize_t_deföed


	)

83 #i‚de‡
__USE_FILE_OFFSET64


84 
__Âos_t
 
	tÂos_t
;

86 
__Âos64_t
 
	tÂos_t
;

88 #ifde‡
__USE_LARGEFILE64


89 
__Âos64_t
 
	tÂos64_t
;

93 
	#_IOFBF
 0

	)

94 
	#_IOLBF
 1

	)

95 
	#_IONBF
 2

	)

99 
	#BUFSIZ
 8192

	)

104 
	#EOF
 (-1)

	)

109 
	#SEEK_SET
 0

	)

110 
	#SEEK_CUR
 1

	)

111 
	#SEEK_END
 2

	)

112 #ifde‡
__USE_GNU


113 
	#SEEK_DATA
 3

	)

114 
	#SEEK_HOLE
 4

	)

118 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


120 
	#P_tmpdú
 "/tmp"

	)

133 
	~<bôs/°dio_lim.h
>

137 
FILE
 *
°dö
;

138 
FILE
 *
°dout
;

139 
FILE
 *
°dîr
;

141 
	#°dö
 
°dö


	)

142 
	#°dout
 
°dout


	)

143 
	#°dîr
 
°dîr


	)

146 
	$ªmove
 (c⁄° *
__fûíame
Ë
__THROW
;

148 
	$ª«me
 (c⁄° *
__ﬁd
, c⁄° *
__√w
Ë
__THROW
;

150 #ifde‡
__USE_ATFILE


152 
	$ª«mót
 (
__ﬁdfd
, c⁄° *
__ﬁd
, 
__√wfd
,

153 c⁄° *
__√w
Ë
__THROW
;

156 #ifde‡
__USE_GNU


158 
	#RENAME_NOREPLACE
 (1 << 0)

	)

159 
	#RENAME_EXCHANGE
 (1 << 1)

	)

160 
	#RENAME_WHITEOUT
 (1 << 2)

	)

164 
	$ª«mót2
 (
__ﬁdfd
, c⁄° *
__ﬁd
, 
__√wfd
,

165 c⁄° *
__√w
, 
__Êags
Ë
__THROW
;

172 #i‚de‡
__USE_FILE_OFFSET64


173 
FILE
 *
	$tmpfûe
 (Ë
__wur
;

175 #ifde‡
__REDIRECT


176 
FILE
 *
	`__REDIRECT
 (
tmpfûe
, (), 
tmpfûe64
Ë
__wur
;

178 
	#tmpfûe
 
tmpfûe64


	)

182 #ifde‡
__USE_LARGEFILE64


183 
FILE
 *
	$tmpfûe64
 (Ë
__wur
;

187 *
	$tm≤am
 (*
__s
Ë
__THROW
 
__wur
;

189 #ifde‡
__USE_MISC


192 *
	$tm≤am_r
 (*
__s
Ë
__THROW
 
__wur
;

196 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


204 *
	$ãm≤am
 (c⁄° *
__dú
, c⁄° *
__pfx
)

205 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

213 
	`f˛o£
 (
FILE
 *
__°ªam
);

218 
	`fÊush
 (
FILE
 *
__°ªam
);

220 #ifde‡
__USE_MISC


227 
	`fÊush_u∆ocked
 (
FILE
 *
__°ªam
);

230 #ifde‡
__USE_GNU


237 
	`f˛o£Æl
 ();

241 #i‚de‡
__USE_FILE_OFFSET64


246 
FILE
 *
	$f›í
 (c⁄° *
__ª°ri˘
 
__fûíame
,

247 c⁄° *
__ª°ri˘
 
__modes
Ë
__wur
;

252 
FILE
 *
	$‰e›í
 (c⁄° *
__ª°ri˘
 
__fûíame
,

253 c⁄° *
__ª°ri˘
 
__modes
,

254 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

256 #ifde‡
__REDIRECT


257 
FILE
 *
	`__REDIRECT
 (
f›í
, (c⁄° *
__ª°ri˘
 
__fûíame
,

258 c⁄° *
__ª°ri˘
 
__modes
), 
f›í64
)

259 
__wur
;

260 
FILE
 *
	`__REDIRECT
 (
‰e›í
, (c⁄° *
__ª°ri˘
 
__fûíame
,

261 c⁄° *
__ª°ri˘
 
__modes
,

262 
FILE
 *
__ª°ri˘
 
__°ªam
), 
‰e›í64
)

263 
__wur
;

265 
	#f›í
 
f›í64


	)

266 
	#‰e›í
 
‰e›í64


	)

269 #ifde‡
__USE_LARGEFILE64


270 
FILE
 *
	$f›í64
 (c⁄° *
__ª°ri˘
 
__fûíame
,

271 c⁄° *
__ª°ri˘
 
__modes
Ë
__wur
;

272 
FILE
 *
	$‰e›í64
 (c⁄° *
__ª°ri˘
 
__fûíame
,

273 c⁄° *
__ª°ri˘
 
__modes
,

274 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

277 #ifdef 
__USE_POSIX


279 
FILE
 *
	$fd›í
 (
__fd
, c⁄° *
__modes
Ë
__THROW
 
__wur
;

282 #ifdef 
__USE_GNU


285 
FILE
 *
	$f›ícookõ
 (*
__ª°ri˘
 
__magic_cookõ
,

286 c⁄° *
__ª°ri˘
 
__modes
,

287 
cookõ_io_fun˘i⁄s_t
 
__io_funcs
Ë
__THROW
 
__wur
;

290 #i‡
deföed
 
__USE_XOPEN2K8
 || 
	`__GLIBC_USE
 (
LIB_EXT2
)

292 
FILE
 *
	$fmem›í
 (*
__s
, 
size_t
 
__Àn
, c⁄° *
__modes
)

293 
__THROW
 
__wur
;

298 
FILE
 *
	$›í_mem°ªam
 (**
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
 
__wur
;

304 
	$£tbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
Ë
__THROW
;

308 
	$£tvbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

309 
__modes
, 
size_t
 
__n
Ë
__THROW
;

311 #ifdef 
__USE_MISC


314 
	$£tbuf„r
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

315 
size_t
 
__size
Ë
__THROW
;

318 
	$£éöebuf
 (
FILE
 *
__°ªam
Ë
__THROW
;

326 
	`Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

327 c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

332 
	`¥ötf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

334 
	$•rötf
 (*
__ª°ri˘
 
__s
,

335 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROWNL
;

341 
	`vÂrötf
 (
FILE
 *
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

342 
__gnuc_va_li°
 
__¨g
);

347 
	`v¥ötf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, 
__gnuc_va_li°
 
__¨g
);

349 
	$v•rötf
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

350 
__gnuc_va_li°
 
__¨g
Ë
__THROWNL
;

352 #i‡
deföed
 
__USE_ISOC99
 || deföed 
__USE_UNIX98


354 
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

355 c⁄° *
__ª°ri˘
 
__f‹m©
, ...)

356 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

358 
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

359 c⁄° *
__ª°ri˘
 
__f‹m©
, 
__gnuc_va_li°
 
__¨g
)

360 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

363 #i‡
	`__GLIBC_USE
 (
LIB_EXT2
)

366 
	$va•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__f
,

367 
__gnuc_va_li°
 
__¨g
)

368 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 0))Ë
__wur
;

369 
	$__a•rötf
 (**
__ª°ri˘
 
__±r
,

370 c⁄° *
__ª°ri˘
 
__fmt
, ...)

371 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

372 
	$a•rötf
 (**
__ª°ri˘
 
__±r
,

373 c⁄° *
__ª°ri˘
 
__fmt
, ...)

374 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

377 #ifde‡
__USE_XOPEN2K8


379 
	$vd¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
,

380 
__gnuc_va_li°
 
__¨g
)

381 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

382 
	$d¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
, ...)

383 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

391 
	$fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

392 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

397 
	$sˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

399 
	$ssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

400 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

405 #i‡!
	`__GLIBC_USE
 (
DEPRECATED_SCANF
Ë&& !
deföed
 
__LDBL_COMPAT


406 #ifde‡
__REDIRECT


407 
	`__REDIRECT
 (
fsˇnf
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

408 c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

409 
__isoc99_fsˇnf
Ë
__wur
;

410 
	`__REDIRECT
 (
sˇnf
, (c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

411 
__isoc99_sˇnf
Ë
__wur
;

412 
	`__REDIRECT_NTH
 (
ssˇnf
, (c⁄° *
__ª°ri˘
 
__s
,

413 c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

414 
__isoc99_ssˇnf
);

416 
	$__isoc99_fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

417 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

418 
	$__isoc99_sˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

419 
	$__isoc99_ssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

420 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

421 
	#fsˇnf
 
__isoc99_fsˇnf


	)

422 
	#sˇnf
 
__isoc99_sˇnf


	)

423 
	#ssˇnf
 
__isoc99_ssˇnf


	)

427 #ifdef 
__USE_ISOC99


432 
	$vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

433 
__gnuc_va_li°
 
__¨g
)

434 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

440 
	$vsˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, 
__gnuc_va_li°
 
__¨g
)

441 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

444 
	$vssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

445 c⁄° *
__ª°ri˘
 
__f‹m©
, 
__gnuc_va_li°
 
__¨g
)

446 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

449 #i‡!
	`__GLIBC_USE
 (
DEPRECATED_SCANF
)

450 #i‡
deföed
 
__REDIRECT
 && !deföed 
__LDBL_COMPAT


451 
	`__REDIRECT
 (
vfsˇnf
,

452 (
FILE
 *
__ª°ri˘
 
__s
,

453 c⁄° *
__ª°ri˘
 
__f‹m©
, 
__gnuc_va_li°
 
__¨g
),

454 
__isoc99_vfsˇnf
)

455 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

456 
	`__REDIRECT
 (
vsˇnf
, (c⁄° *
__ª°ri˘
 
__f‹m©
,

457 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vsˇnf
)

458 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

459 
	`__REDIRECT_NTH
 (
vssˇnf
,

460 (c⁄° *
__ª°ri˘
 
__s
,

461 c⁄° *
__ª°ri˘
 
__f‹m©
,

462 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vssˇnf
)

463 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

464 #ñi‡!
deföed
 
__REDIRECT


465 
	$__isoc99_vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
,

466 c⁄° *
__ª°ri˘
 
__f‹m©
,

467 
__gnuc_va_li°
 
__¨g
Ë
__wur
;

468 
	$__isoc99_vsˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
,

469 
__gnuc_va_li°
 
__¨g
Ë
__wur
;

470 
	$__isoc99_vssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

471 c⁄° *
__ª°ri˘
 
__f‹m©
,

472 
__gnuc_va_li°
 
__¨g
Ë
__THROW
;

473 
	#vfsˇnf
 
__isoc99_vfsˇnf


	)

474 
	#vsˇnf
 
__isoc99_vsˇnf


	)

475 
	#vssˇnf
 
__isoc99_vssˇnf


	)

485 
	`fgëc
 (
FILE
 *
__°ªam
);

486 
	`gëc
 (
FILE
 *
__°ªam
);

492 
	`gëch¨
 ();

494 #ifde‡
__USE_POSIX199506


499 
	`gëc_u∆ocked
 (
FILE
 *
__°ªam
);

500 
	`gëch¨_u∆ocked
 ();

503 #ifde‡
__USE_MISC


510 
	`fgëc_u∆ocked
 (
FILE
 *
__°ªam
);

521 
	`Âutc
 (
__c
, 
FILE
 *
__°ªam
);

522 
	`putc
 (
__c
, 
FILE
 *
__°ªam
);

528 
	`putch¨
 (
__c
);

530 #ifde‡
__USE_MISC


537 
	`Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

540 #ifde‡
__USE_POSIX199506


545 
	`putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

546 
	`putch¨_u∆ocked
 (
__c
);

550 #i‡
deföed
 
__USE_MISC
 \

551 || (
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

553 
	`gëw
 (
FILE
 *
__°ªam
);

556 
	`putw
 (
__w
, 
FILE
 *
__°ªam
);

564 *
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

565 
__wur
;

567 #i‡
	`__GLIBC_USE
 (
DEPRECATED_GETS
)

577 *
	$gës
 (*
__s
Ë
__wur
 
__©åibuã_dïªˇãd__
;

580 #ifde‡
__USE_GNU


587 *
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
,

588 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

592 #i‡
deföed
 
__USE_XOPEN2K8
 || 
	`__GLIBC_USE
 (
LIB_EXT2
)

603 
__ssize_t
 
	$__gëdñim
 (**
__ª°ri˘
 
__löïå
,

604 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

605 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

606 
__ssize_t
 
	$gëdñim
 (**
__ª°ri˘
 
__löïå
,

607 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

608 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

616 
__ssize_t
 
	$gëlöe
 (**
__ª°ri˘
 
__löïå
,

617 
size_t
 *
__ª°ri˘
 
__n
,

618 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

626 
	`Âuts
 (c⁄° *
__ª°ri˘
 
__s
, 
FILE
 *__ª°ri˘ 
__°ªam
);

632 
	`puts
 (c⁄° *
__s
);

639 
	`ungëc
 (
__c
, 
FILE
 *
__°ªam
);

646 
size_t
 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

647 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

652 
size_t
 
	`fwrôe
 (c⁄° *
__ª°ri˘
 
__±r
, size_à
__size
,

653 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__s
);

655 #ifde‡
__USE_GNU


662 
	`Âuts_u∆ocked
 (c⁄° *
__ª°ri˘
 
__s
,

663 
FILE
 *
__ª°ri˘
 
__°ªam
);

666 #ifde‡
__USE_MISC


673 
size_t
 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

674 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

675 
size_t
 
	`fwrôe_u∆ocked
 (c⁄° *
__ª°ri˘
 
__±r
, size_à
__size
,

676 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
);

684 
	`f£ek
 (
FILE
 *
__°ªam
, 
__off
, 
__whí˚
);

689 
	$·ñl
 (
FILE
 *
__°ªam
Ë
__wur
;

694 
	`ªwöd
 (
FILE
 *
__°ªam
);

701 #i‡
deföed
 
__USE_LARGEFILE
 || deföed 
__USE_XOPEN2K


702 #i‚de‡
__USE_FILE_OFFSET64


707 
	`f£eko
 (
FILE
 *
__°ªam
, 
__off_t
 
__off
, 
__whí˚
);

712 
__off_t
 
	$·ñlo
 (
FILE
 *
__°ªam
Ë
__wur
;

714 #ifde‡
__REDIRECT


715 
	`__REDIRECT
 (
f£eko
,

716 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
),

717 
f£eko64
);

718 
__off64_t
 
	`__REDIRECT
 (
·ñlo
, (
FILE
 *
__°ªam
), 
·ñlo64
);

720 
	#f£eko
 
f£eko64


	)

721 
	#·ñlo
 
·ñlo64


	)

726 #i‚de‡
__USE_FILE_OFFSET64


731 
	`fgëpos
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos_t
 *__ª°ri˘ 
__pos
);

736 
	`f£ços
 (
FILE
 *
__°ªam
, c⁄° 
Âos_t
 *
__pos
);

738 #ifde‡
__REDIRECT


739 
	`__REDIRECT
 (
fgëpos
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

740 
Âos_t
 *
__ª°ri˘
 
__pos
), 
fgëpos64
);

741 
	`__REDIRECT
 (
f£ços
,

742 (
FILE
 *
__°ªam
, c⁄° 
Âos_t
 *
__pos
), 
f£ços64
);

744 
	#fgëpos
 
fgëpos64


	)

745 
	#f£ços
 
f£ços64


	)

749 #ifde‡
__USE_LARGEFILE64


750 
	`f£eko64
 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
);

751 
__off64_t
 
	$·ñlo64
 (
FILE
 *
__°ªam
Ë
__wur
;

752 
	`fgëpos64
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos64_t
 *__ª°ri˘ 
__pos
);

753 
	`f£ços64
 (
FILE
 *
__°ªam
, c⁄° 
Âos64_t
 *
__pos
);

757 
	$˛óªº
 (
FILE
 *
__°ªam
Ë
__THROW
;

759 
	$„of
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

761 
	$„º‹
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

763 #ifde‡
__USE_MISC


765 
	$˛óªº_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
;

766 
	$„of_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

767 
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

775 
	`≥º‹
 (c⁄° *
__s
);

781 
	~<bôs/sys_îæi°.h
>

784 #ifdef 
__USE_POSIX


786 
	$fûío
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

789 #ifde‡
__USE_MISC


791 
	$fûío_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

795 #ifde‡
__USE_POSIX2


800 
FILE
 *
	$p›í
 (c⁄° *
__comm™d
, c⁄° *
__modes
Ë
__wur
;

806 
	`p˛o£
 (
FILE
 *
__°ªam
);

810 #ifdef 
__USE_POSIX


812 *
	$˘îmid
 (*
__s
Ë
__THROW
;

816 #i‡(
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
Ë|| deföed 
__USE_GNU


818 *
	`cu£rid
 (*
__s
);

822 #ifdef 
__USE_GNU


823 
ob°ack
;

826 
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

827 c⁄° *
__ª°ri˘
 
__f‹m©
, ...)

828 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

829 
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

830 c⁄° *
__ª°ri˘
 
__f‹m©
,

831 
__gnuc_va_li°
 
__¨gs
)

832 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

836 #ifde‡
__USE_POSIX199506


840 
	$Êockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

844 
	$·rylockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

847 
	$fu∆ockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

850 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


853 
	~<bôs/gë›t_posix.h
>

858 
	`__uÊow
 (
FILE
 *);

859 
	`__ovîÊow
 (
FILE
 *, );

863 #ifde‡
__USE_EXTERN_INLINES


864 
	~<bôs/°dio.h
>

866 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


867 
	~<bôs/°dio2.h
>

869 #ifde‡
__LDBL_COMPAT


870 
	~<bôs/°dio-ldbl.h
>

873 
__END_DECLS


	@/usr/include/stdlib.h

22 #i‚def 
_STDLIB_H


24 
	#__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION


	)

25 
	~<bôs/libc-hódî-°¨t.h
>

28 
	#__√ed_size_t


	)

29 
	#__√ed_wch¨_t


	)

30 
	#__√ed_NULL


	)

31 
	~<°ddef.h
>

33 
	g__BEGIN_DECLS


35 
	#_STDLIB_H
 1

	)

37 #i‡(
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
Ë&& !deföed 
_SYS_WAIT_H


39 
	~<bôs/waôÊags.h
>

40 
	~<bôs/waô°©us.h
>

43 
	#WEXITSTATUS
(
°©us
Ë
	`__WEXITSTATUS
 (°©us)

	)

44 
	#WTERMSIG
(
°©us
Ë
	`__WTERMSIG
 (°©us)

	)

45 
	#WSTOPSIG
(
°©us
Ë
	`__WSTOPSIG
 (°©us)

	)

46 
	#WIFEXITED
(
°©us
Ë
	`__WIFEXITED
 (°©us)

	)

47 
	#WIFSIGNALED
(
°©us
Ë
	`__WIFSIGNALED
 (°©us)

	)

48 
	#WIFSTOPPED
(
°©us
Ë
	`__WIFSTOPPED
 (°©us)

	)

49 #ifde‡
__WIFCONTINUED


50 
	#WIFCONTINUED
(
°©us
Ë
	`__WIFCONTINUED
 (°©us)

	)

55 
	~<bôs/Êﬂä.h
>

60 
	mquŸ
;

61 
	mªm
;

62 } 
	tdiv_t
;

65 #i‚de‡
__ldiv_t_deföed


68 
	mquŸ
;

69 
	mªm
;

70 } 
	tldiv_t
;

71 
	#__ldiv_t_deföed
 1

	)

74 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__Œdiv_t_deföed


76 
__exãnsi⁄__
 struct

78 
	mquŸ
;

79 
	mªm
;

80 } 
	tŒdiv_t
;

81 
	#__Œdiv_t_deföed
 1

	)

86 
	#RAND_MAX
 2147483647

	)

91 
	#EXIT_FAILURE
 1

	)

92 
	#EXIT_SUCCESS
 0

	)

96 
	#MB_CUR_MAX
 (
	`__˘y≥_gë_mb_cur_max
 ())

	)

97 
size_t
 
	$__˘y≥_gë_mb_cur_max
 (Ë
__THROW
 
__wur
;

101 
	$©of
 (c⁄° *
__≈å
)

102 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

104 
	$©oi
 (c⁄° *
__≈å
)

105 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

107 
	$©ﬁ
 (c⁄° *
__≈å
)

108 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

110 #ifde‡
__USE_ISOC99


112 
__exãnsi⁄__
 
	$©ﬁl
 (c⁄° *
__≈å
)

113 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

117 
	$°πod
 (c⁄° *
__ª°ri˘
 
__≈å
,

118 **
__ª°ri˘
 
__íd±r
)

119 
__THROW
 
	`__n⁄nuŒ
 ((1));

121 #ifdef 
__USE_ISOC99


123 
	$°πof
 (c⁄° *
__ª°ri˘
 
__≈å
,

124 **
__ª°ri˘
 
__íd±r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

126 
	$°πﬁd
 (c⁄° *
__ª°ri˘
 
__≈å
,

127 **
__ª°ri˘
 
__íd±r
)

128 
__THROW
 
	`__n⁄nuŒ
 ((1));

133 #i‡
__HAVE_FLOAT16
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

134 
_Flﬂt16
 
	$°πof16
 (c⁄° *
__ª°ri˘
 
__≈å
,

135 **
__ª°ri˘
 
__íd±r
)

136 
__THROW
 
	`__n⁄nuŒ
 ((1));

139 #i‡
__HAVE_FLOAT32
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

140 
_Flﬂt32
 
	$°πof32
 (c⁄° *
__ª°ri˘
 
__≈å
,

141 **
__ª°ri˘
 
__íd±r
)

142 
__THROW
 
	`__n⁄nuŒ
 ((1));

145 #i‡
__HAVE_FLOAT64
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

146 
_Flﬂt64
 
	$°πof64
 (c⁄° *
__ª°ri˘
 
__≈å
,

147 **
__ª°ri˘
 
__íd±r
)

148 
__THROW
 
	`__n⁄nuŒ
 ((1));

151 #i‡
__HAVE_FLOAT128
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

152 
_Flﬂt128
 
	$°πof128
 (c⁄° *
__ª°ri˘
 
__≈å
,

153 **
__ª°ri˘
 
__íd±r
)

154 
__THROW
 
	`__n⁄nuŒ
 ((1));

157 #i‡
__HAVE_FLOAT32X
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

158 
_Flﬂt32x
 
	$°πof32x
 (c⁄° *
__ª°ri˘
 
__≈å
,

159 **
__ª°ri˘
 
__íd±r
)

160 
__THROW
 
	`__n⁄nuŒ
 ((1));

163 #i‡
__HAVE_FLOAT64X
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

164 
_Flﬂt64x
 
	$°πof64x
 (c⁄° *
__ª°ri˘
 
__≈å
,

165 **
__ª°ri˘
 
__íd±r
)

166 
__THROW
 
	`__n⁄nuŒ
 ((1));

169 #i‡
__HAVE_FLOAT128X
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

170 
_Flﬂt128x
 
	$°πof128x
 (c⁄° *
__ª°ri˘
 
__≈å
,

171 **
__ª°ri˘
 
__íd±r
)

172 
__THROW
 
	`__n⁄nuŒ
 ((1));

176 
	$°πﬁ
 (c⁄° *
__ª°ri˘
 
__≈å
,

177 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

178 
__THROW
 
	`__n⁄nuŒ
 ((1));

180 
	$°πoul
 (c⁄° *
__ª°ri˘
 
__≈å
,

181 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

182 
__THROW
 
	`__n⁄nuŒ
 ((1));

184 #ifde‡
__USE_MISC


186 
__exãnsi⁄__


187 
	$°πoq
 (c⁄° *
__ª°ri˘
 
__≈å
,

188 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

189 
__THROW
 
	`__n⁄nuŒ
 ((1));

191 
__exãnsi⁄__


192 
	$°πouq
 (c⁄° *
__ª°ri˘
 
__≈å
,

193 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

194 
__THROW
 
	`__n⁄nuŒ
 ((1));

197 #ifde‡
__USE_ISOC99


199 
__exãnsi⁄__


200 
	$°πﬁl
 (c⁄° *
__ª°ri˘
 
__≈å
,

201 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

202 
__THROW
 
	`__n⁄nuŒ
 ((1));

204 
__exãnsi⁄__


205 
	$°πouŒ
 (c⁄° *
__ª°ri˘
 
__≈å
,

206 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

207 
__THROW
 
	`__n⁄nuŒ
 ((1));

211 #i‡
	`__GLIBC_USE
 (
IEC_60559_BFP_EXT_C2X
)

212 
	$°r‰omd
 (*
__de°
, 
size_t
 
__size
, c⁄° *
__f‹m©
,

213 
__f
)

214 
__THROW
 
	`__n⁄nuŒ
 ((3));

216 
	$°r‰omf
 (*
__de°
, 
size_t
 
__size
, c⁄° *
__f‹m©
,

217 
__f
)

218 
__THROW
 
	`__n⁄nuŒ
 ((3));

220 
	$°r‰oml
 (*
__de°
, 
size_t
 
__size
, c⁄° *
__f‹m©
,

221 
__f
)

222 
__THROW
 
	`__n⁄nuŒ
 ((3));

225 #i‡
__HAVE_FLOAT16
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

226 
	$°r‰omf16
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

227 
_Flﬂt16
 
__f
)

228 
__THROW
 
	`__n⁄nuŒ
 ((3));

231 #i‡
__HAVE_FLOAT32
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

232 
	$°r‰omf32
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

233 
_Flﬂt32
 
__f
)

234 
__THROW
 
	`__n⁄nuŒ
 ((3));

237 #i‡
__HAVE_FLOAT64
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

238 
	$°r‰omf64
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

239 
_Flﬂt64
 
__f
)

240 
__THROW
 
	`__n⁄nuŒ
 ((3));

243 #i‡
__HAVE_FLOAT128
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

244 
	$°r‰omf128
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

245 
_Flﬂt128
 
__f
)

246 
__THROW
 
	`__n⁄nuŒ
 ((3));

249 #i‡
__HAVE_FLOAT32X
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

250 
	$°r‰omf32x
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

251 
_Flﬂt32x
 
__f
)

252 
__THROW
 
	`__n⁄nuŒ
 ((3));

255 #i‡
__HAVE_FLOAT64X
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

256 
	$°r‰omf64x
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

257 
_Flﬂt64x
 
__f
)

258 
__THROW
 
	`__n⁄nuŒ
 ((3));

261 #i‡
__HAVE_FLOAT128X
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

262 
	$°r‰omf128x
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

263 
_Flﬂt128x
 
__f
)

264 
__THROW
 
	`__n⁄nuŒ
 ((3));

268 #ifde‡
__USE_GNU


272 
	~<bôs/ty≥s/loˇÀ_t.h
>

274 
	$°πﬁ_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

275 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

276 
loˇÀ_t
 
__loc
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

278 
	$°πoul_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

279 **
__ª°ri˘
 
__íd±r
,

280 
__ba£
, 
loˇÀ_t
 
__loc
)

281 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

283 
__exãnsi⁄__


284 
	$°πﬁl_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

285 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

286 
loˇÀ_t
 
__loc
)

287 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

289 
__exãnsi⁄__


290 
	$°πouŒ_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

291 **
__ª°ri˘
 
__íd±r
,

292 
__ba£
, 
loˇÀ_t
 
__loc
)

293 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

295 
	$°πod_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

296 **
__ª°ri˘
 
__íd±r
, 
loˇÀ_t
 
__loc
)

297 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

299 
	$°πof_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

300 **
__ª°ri˘
 
__íd±r
, 
loˇÀ_t
 
__loc
)

301 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

303 
	$°πﬁd_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

304 **
__ª°ri˘
 
__íd±r
,

305 
loˇÀ_t
 
__loc
)

306 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

308 #i‡
__HAVE_FLOAT16


309 
_Flﬂt16
 
	$°πof16_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

310 **
__ª°ri˘
 
__íd±r
,

311 
loˇÀ_t
 
__loc
)

312 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

315 #i‡
__HAVE_FLOAT32


316 
_Flﬂt32
 
	$°πof32_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

317 **
__ª°ri˘
 
__íd±r
,

318 
loˇÀ_t
 
__loc
)

319 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

322 #i‡
__HAVE_FLOAT64


323 
_Flﬂt64
 
	$°πof64_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

324 **
__ª°ri˘
 
__íd±r
,

325 
loˇÀ_t
 
__loc
)

326 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

329 #i‡
__HAVE_FLOAT128


330 
_Flﬂt128
 
	$°πof128_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

331 **
__ª°ri˘
 
__íd±r
,

332 
loˇÀ_t
 
__loc
)

333 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

336 #i‡
__HAVE_FLOAT32X


337 
_Flﬂt32x
 
	$°πof32x_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

338 **
__ª°ri˘
 
__íd±r
,

339 
loˇÀ_t
 
__loc
)

340 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

343 #i‡
__HAVE_FLOAT64X


344 
_Flﬂt64x
 
	$°πof64x_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

345 **
__ª°ri˘
 
__íd±r
,

346 
loˇÀ_t
 
__loc
)

347 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

350 #i‡
__HAVE_FLOAT128X


351 
_Flﬂt128x
 
	$°πof128x_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

352 **
__ª°ri˘
 
__íd±r
,

353 
loˇÀ_t
 
__loc
)

354 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

359 #ifde‡
__USE_EXTERN_INLINES


360 
__exã∫_ölöe
 

361 
	`__NTH
 (
	$©oi
 (c⁄° *
__≈å
))

363  (Ë
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

364 
	}
}

365 
__exã∫_ölöe
 

366 
__NTH
 (
	$©ﬁ
 (c⁄° *
__≈å
))

368  
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

369 
	}
}

371 #ifde‡
__USE_ISOC99


372 
__exãnsi⁄__
 
__exã∫_ölöe
 

373 
__NTH
 (
	$©ﬁl
 (c⁄° *
__≈å
))

375  
	`°πﬁl
 (
__≈å
, (**Ë
NULL
, 10);

376 
	}
}

381 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


385 *
	$l64a
 (
__n
Ë
__THROW
 
__wur
;

388 
	$a64l
 (c⁄° *
__s
)

389 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

393 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


394 
	~<sys/ty≥s.h
>

401 
	$øndom
 (Ë
__THROW
;

404 
	$§™dom
 (
__£ed
Ë
__THROW
;

410 *
	$öô°©e
 (
__£ed
, *
__°©ebuf
,

411 
size_t
 
__°©ñí
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

415 *
	$£t°©e
 (*
__°©ebuf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

418 #ifde‡
__USE_MISC


423 
	søndom_d©a


425 
öt32_t
 *
Âå
;

426 
öt32_t
 *
Ωå
;

427 
öt32_t
 *
°©e
;

428 
ønd_ty≥
;

429 
ønd_deg
;

430 
ønd_£p
;

431 
öt32_t
 *
íd_±r
;

434 
	$øndom_r
 (
øndom_d©a
 *
__ª°ri˘
 
__buf
,

435 
öt32_t
 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

437 
	$§™dom_r
 (
__£ed
, 
øndom_d©a
 *
__buf
)

438 
__THROW
 
	`__n⁄nuŒ
 ((2));

440 
	$öô°©e_r
 (
__£ed
, *
__ª°ri˘
 
__°©ebuf
,

441 
size_t
 
__°©ñí
,

442 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

443 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

445 
	$£t°©e_r
 (*
__ª°ri˘
 
__°©ebuf
,

446 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

447 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

453 
	$ønd
 (Ë
__THROW
;

455 
	$§™d
 (
__£ed
Ë
__THROW
;

457 #ifde‡
__USE_POSIX199506


459 
	$ønd_r
 (*
__£ed
Ë
__THROW
;

463 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


467 
	$dønd48
 (Ë
__THROW
;

468 
	$î™d48
 (
__xsubi
[3]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

471 
	$Ã™d48
 (Ë
__THROW
;

472 
	$ƒ™d48
 (
__xsubi
[3])

473 
__THROW
 
	`__n⁄nuŒ
 ((1));

476 
	$mønd48
 (Ë
__THROW
;

477 
	$jønd48
 (
__xsubi
[3])

478 
__THROW
 
	`__n⁄nuŒ
 ((1));

481 
	$§™d48
 (
__£edvÆ
Ë
__THROW
;

482 *
	$£ed48
 (
__£ed16v
[3])

483 
__THROW
 
	`__n⁄nuŒ
 ((1));

484 
	$lc⁄g48
 (
__∑øm
[7]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

486 #ifde‡
__USE_MISC


490 
	sdønd48_d©a


492 
__x
[3];

493 
__ﬁd_x
[3];

494 
__c
;

495 
__öô
;

496 
__exãnsi⁄__
 
__a
;

501 
	$dønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

502 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

503 
	$î™d48_r
 (
__xsubi
[3],

504 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

505 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

508 
	$Ã™d48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

509 *
__ª°ri˘
 
__ªsu…
)

510 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

511 
	$ƒ™d48_r
 (
__xsubi
[3],

512 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

513 *
__ª°ri˘
 
__ªsu…
)

514 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

517 
	$mønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

518 *
__ª°ri˘
 
__ªsu…
)

519 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

520 
	$jønd48_r
 (
__xsubi
[3],

521 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

522 *
__ª°ri˘
 
__ªsu…
)

523 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

526 
	$§™d48_r
 (
__£edvÆ
, 
dønd48_d©a
 *
__buf„r
)

527 
__THROW
 
	`__n⁄nuŒ
 ((2));

529 
	$£ed48_r
 (
__£ed16v
[3],

530 
dønd48_d©a
 *
__buf„r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

532 
	$lc⁄g48_r
 (
__∑øm
[7],

533 
dønd48_d©a
 *
__buf„r
)

534 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

539 *
	$mÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__


540 
	`__©åibuã_Æloc_size__
 ((1)Ë
__wur
;

542 *
	$ˇŒoc
 (
size_t
 
__nmemb
, size_à
__size
)

543 
__THROW
 
__©åibuã_mÆloc__
 
	`__©åibuã_Æloc_size__
 ((1, 2)Ë
__wur
;

550 *
	$ªÆloc
 (*
__±r
, 
size_t
 
__size
)

551 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
 
	`__©åibuã_Æloc_size__
 ((2));

553 #ifde‡
__USE_MISC


559 *
	$ªÆloˇºay
 (*
__±r
, 
size_t
 
__nmemb
, size_à
__size
)

560 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__


561 
	`__©åibuã_Æloc_size__
 ((2, 3));

565 
	$‰ì
 (*
__±r
Ë
__THROW
;

567 #ifde‡
__USE_MISC


568 
	~<Æloˇ.h
>

571 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

572 || 
deföed
 
__USE_MISC


574 *
	$vÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__


575 
	`__©åibuã_Æloc_size__
 ((1)Ë
__wur
;

578 #ifde‡
__USE_XOPEN2K


580 
	$posix_memÆign
 (**
__mem±r
, 
size_t
 
__Æignmít
, size_à
__size
)

581 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

584 #ifde‡
__USE_ISOC11


586 *
	$Æig√d_Æloc
 (
size_t
 
__Æignmít
, size_à
__size
)

587 
__THROW
 
__©åibuã_mÆloc__
 
	`__©åibuã_Æloc_size__
 ((2)Ë
__wur
;

591 
	$ab‹t
 (Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

595 
	$©exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

597 #i‡
deföed
 
__USE_ISOC11
 || deföed 
__USE_ISOCXX11


599 #ifde‡
__˝lu•lus


600 "C++" 
	$©_quick_exô
 ((*
__func
) ())

601 
__THROW
 
	`__asm
 ("©_quick_exô"Ë
	`__n⁄nuŒ
 ((1));

603 
	$©_quick_exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

607 #ifdef 
__USE_MISC


610 
	$⁄_exô
 ((*
__func
Ë(
__°©us
, *
__¨g
), *__arg)

611 
__THROW
 
	`__n⁄nuŒ
 ((1));

617 
	$exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

619 #i‡
deföed
 
__USE_ISOC11
 || deföed 
__USE_ISOCXX11


623 
	$quick_exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

626 #ifde‡
__USE_ISOC99


629 
	$_Exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

634 *
	$gëív
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

636 #ifde‡
__USE_GNU


639 *
	$£cuª_gëív
 (c⁄° *
__«me
)

640 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

643 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


647 
	$puãnv
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

650 #ifde‡
__USE_XOPEN2K


653 
	$£ãnv
 (c⁄° *
__«me
, c⁄° *
__vÆue
, 
__ª∂a˚
)

654 
__THROW
 
	`__n⁄nuŒ
 ((2));

657 
	$un£ãnv
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

660 #ifdef 
__USE_MISC


664 
	$˛óªnv
 (Ë
__THROW
;

668 #i‡
deföed
 
__USE_MISC
 \

669 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
)

675 *
	$mkãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

678 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


687 #i‚de‡
__USE_FILE_OFFSET64


688 
	$mk°emp
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

690 #ifde‡
__REDIRECT


691 
	`__REDIRECT
 (
mk°emp
, (*
__ãm∂©e
), 
mk°emp64
)

692 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

694 
	#mk°emp
 
mk°emp64


	)

697 #ifde‡
__USE_LARGEFILE64


698 
	$mk°emp64
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

702 #ifde‡
__USE_MISC


709 #i‚de‡
__USE_FILE_OFFSET64


710 
	$mk°emps
 (*
__ãm∂©e
, 
__suffixÀn
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

712 #ifde‡
__REDIRECT


713 
	`__REDIRECT
 (
mk°emps
, (*
__ãm∂©e
, 
__suffixÀn
),

714 
mk°emps64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

716 
	#mk°emps
 
mk°emps64


	)

719 #ifde‡
__USE_LARGEFILE64


720 
	$mk°emps64
 (*
__ãm∂©e
, 
__suffixÀn
)

721 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

725 #ifde‡
__USE_XOPEN2K8


731 *
	$mkdãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

734 #ifde‡
__USE_GNU


741 #i‚de‡
__USE_FILE_OFFSET64


742 
	$mko°emp
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

744 #ifde‡
__REDIRECT


745 
	`__REDIRECT
 (
mko°emp
, (*
__ãm∂©e
, 
__Êags
), 
mko°emp64
)

746 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

748 
	#mko°emp
 
mko°emp64


	)

751 #ifde‡
__USE_LARGEFILE64


752 
	$mko°emp64
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

761 #i‚de‡
__USE_FILE_OFFSET64


762 
	$mko°emps
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

763 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

765 #ifde‡
__REDIRECT


766 
	`__REDIRECT
 (
mko°emps
, (*
__ãm∂©e
, 
__suffixÀn
,

767 
__Êags
), 
mko°emps64
)

768 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

770 
	#mko°emps
 
mko°emps64


	)

773 #ifde‡
__USE_LARGEFILE64


774 
	$mko°emps64
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

775 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

784 
	$sy°em
 (c⁄° *
__comm™d
Ë
__wur
;

787 #ifdef 
__USE_GNU


790 *
	$ˇn⁄iˇlize_fûe_«me
 (c⁄° *
__«me
)

791 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

794 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


800 *
	$ªÆ∑th
 (c⁄° *
__ª°ri˘
 
__«me
,

801 *
__ª°ri˘
 
__ªsﬁved
Ë
__THROW
 
__wur
;

806 #i‚de‡
__COMPAR_FN_T


807 
	#__COMPAR_FN_T


	)

808 (*
	t__com∑r_‚_t
) (const *, const *);

810 #ifdef 
__USE_GNU


811 
__com∑r_‚_t
 
	tcom∑ris⁄_‚_t
;

814 #ifde‡
__USE_GNU


815 (*
	t__com∑r_d_‚_t
) (const *, const *, *);

820 *
	$b£¨ch
 (c⁄° *
__key
, c⁄° *
__ba£
,

821 
size_t
 
__nmemb
, size_à
__size
, 
__com∑r_‚_t
 
__com∑r
)

822 
	`__n⁄nuŒ
 ((1, 2, 5)Ë
__wur
;

824 #ifde‡
__USE_EXTERN_INLINES


825 
	~<bôs/°dlib-b£¨ch.h
>

830 
	$qs‹t
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

831 
__com∑r_‚_t
 
__com∑r
Ë
	`__n⁄nuŒ
 ((1, 4));

832 #ifde‡
__USE_GNU


833 
	$qs‹t_r
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

834 
__com∑r_d_‚_t
 
__com∑r
, *
__¨g
)

835 
	`__n⁄nuŒ
 ((1, 4));

840 
	$abs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

841 
	$œbs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

843 #ifde‡
__USE_ISOC99


844 
__exãnsi⁄__
 
	$Œabs
 (
__x
)

845 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

852 
div_t
 
	$div
 (
__numî
, 
__díom
)

853 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

854 
ldiv_t
 
	$ldiv
 (
__numî
, 
__díom
)

855 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

857 #ifde‡
__USE_ISOC99


858 
__exãnsi⁄__
 
Œdiv_t
 
	$Œdiv
 (
__numî
,

859 
__díom
)

860 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

864 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

865 || 
deföed
 
__USE_MISC


872 *
	$ecvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

873 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

878 *
	$fcvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

879 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

884 *
	$gcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

885 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

888 #ifde‡
__USE_MISC


890 *
	$qecvt
 (
__vÆue
, 
__ndigô
,

891 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

892 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

893 *
	$qfcvt
 (
__vÆue
, 
__ndigô
,

894 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

895 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

896 *
	$qgcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

897 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

902 
	$ecvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

903 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

904 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

905 
	$fcvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

906 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

907 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

909 
	$qecvt_r
 (
__vÆue
, 
__ndigô
,

910 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

911 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

912 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

913 
	$qfcvt_r
 (
__vÆue
, 
__ndigô
,

914 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

915 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

916 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

922 
	$mbÀn
 (c⁄° *
__s
, 
size_t
 
__n
Ë
__THROW
;

925 
	$mbtowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

926 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

929 
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
Ë
__THROW
;

933 
size_t
 
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__pwcs
,

934 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

936 
size_t
 
	$wc°ombs
 (*
__ª°ri˘
 
__s
,

937 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__pwcs
, 
size_t
 
__n
)

938 
__THROW
;

941 #ifde‡
__USE_MISC


946 
	$Ωm©ch
 (c⁄° *
__ª•⁄£
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

950 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


957 
	$gësub›t
 (**
__ª°ri˘
 
__›ti⁄p
,

958 *c⁄° *
__ª°ri˘
 
__tokís
,

959 **
__ª°ri˘
 
__vÆuï
)

960 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3)Ë
__wur
;

966 #ifde‡
__USE_XOPEN2KXSI


968 
	$posix_›í±
 (
__oÊag
Ë
__wur
;

971 #ifde‡
__USE_XOPEN_EXTENDED


976 
	$gø¡±
 (
__fd
Ë
__THROW
;

980 
	$u∆ock±
 (
__fd
Ë
__THROW
;

985 *
	$±¢ame
 (
__fd
Ë
__THROW
 
__wur
;

988 #ifde‡
__USE_GNU


992 
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

993 
__THROW
 
	`__n⁄nuŒ
 ((2));

996 
	`gë±
 ();

999 #ifde‡
__USE_MISC


1003 
	$gëlﬂdavg
 (
__lﬂdavg
[], 
__√Àm
)

1004 
__THROW
 
	`__n⁄nuŒ
 ((1));

1007 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K


1010 
	$ây¶Ÿ
 (Ë
__THROW
;

1013 
	~<bôs/°dlib-Êﬂt.h
>

1016 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


1017 
	~<bôs/°dlib.h
>

1019 #ifde‡
__LDBL_COMPAT


1020 
	~<bôs/°dlib-ldbl.h
>

1023 
__END_DECLS


	@/usr/include/string.h

22 #i‚def 
_STRING_H


23 
	#_STRING_H
 1

	)

25 
	#__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION


	)

26 
	~<bôs/libc-hódî-°¨t.h
>

28 
	g__BEGIN_DECLS


31 
	#__√ed_size_t


	)

32 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

36 #i‡
deföed
 
__˝lu•lus
 && (
__GNUC_PREREQ
 (4, 4) \

37 || 
	$__glibc_˛™g_¥îeq
 (3, 5))

38 
	#__CORRECT_ISO_CPP_STRING_H_PROTO


	)

43 *
	$mem˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

44 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

47 *
	$memmove
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

48 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

53 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN
 || 
	`__GLIBC_USE
 (
ISOC2X
)

54 *
	$memc˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

55 
__c
, 
size_t
 
__n
)

56 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

61 *
	$mem£t
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

64 
	$memcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

65 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

68 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


71 *
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

72 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

73 c⁄° *
	`memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

74 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

76 #ifde‡
__OPTIMIZE__


77 
__exã∫_Æways_ölöe
 *

78 
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


80  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

83 
__exã∫_Æways_ölöe
 const *

84 
	`memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


86  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

89 
	}
}

91 *
	$memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

92 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

95 #ifde‡
__USE_GNU


98 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


99 "C++" *
	$øwmemchr
 (*
__s
, 
__c
)

100 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

101 "C++" c⁄° *
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

102 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

104 *
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

105 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

109 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


110 "C++" *
	$memrchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

111 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

112 "C++" c⁄° *
	$memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

113 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

115 *
	$memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

116 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

122 *
	$°r˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

123 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

125 *
	$°∫˝y
 (*
__ª°ri˘
 
__de°
,

126 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

127 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

130 *
	$°rˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

131 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

133 *
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

134 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

137 
	$°rcmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

138 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

140 
	$°∫cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

141 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

144 
	$°rcﬁl
 (c⁄° *
__s1
, c⁄° *
__s2
)

145 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

147 
size_t
 
	$°rx‰m
 (*
__ª°ri˘
 
__de°
,

148 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

149 
__THROW
 
	`__n⁄nuŒ
 ((2));

151 #ifde‡
__USE_XOPEN2K8


153 
	~<bôs/ty≥s/loˇÀ_t.h
>

156 
	$°rcﬁl_l
 (c⁄° *
__s1
, c⁄° *
__s2
, 
loˇÀ_t
 
__l
)

157 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

160 
size_t
 
	$°rx‰m_l
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
,

161 
loˇÀ_t
 
__l
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

164 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8
 \

165 || 
	`__GLIBC_USE
 (
LIB_EXT2
Ë|| 
	$__GLIBC_USE
 (
ISOC2X
))

167 *
	$°rdup
 (c⁄° *
__s
)

168 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

174 #i‡
deföed
 
__USE_XOPEN2K8
 || 
	`__GLIBC_USE
 (
LIB_EXT2
Ë|| __GLIBC_USE (
ISOC2X
)

175 *
	$°∫dup
 (c⁄° *
__°rög
, 
size_t
 
__n
)

176 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

179 #i‡
deföed
 
__USE_GNU
 && deföed 
__GNUC__


181 
	#°rdu∑
(
s
) \

182 (
__exãnsi⁄__
 \

184 c⁄° *
__ﬁd
 = (
s
); \

185 
size_t
 
__Àn
 = 
	`°æí
 (
__ﬁd
) + 1; \

186 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
); \

187 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

188 
	}
}))

	)

191 
	#°∫du∑
(
s
, 
n
) \

192 (
__exãnsi⁄__
 \

194 c⁄° *
__ﬁd
 = (
s
); \

195 
size_t
 
__Àn
 = 
	`°∫Àn
 (
__ﬁd
, (
n
)); \

196 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
 + 1); \

197 
__√w
[
__Àn
] = '\0'; \

198 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

199 }))

	)

203 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


206 *
°rchr
 (*
__s
, 
__c
)

207 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

208 c⁄° *
°rchr
 (c⁄° *
__s
, 
__c
)

209 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

211 #ifde‡
__OPTIMIZE__


212 
__exã∫_Æways_ölöe
 *

213 
°rchr
 (*
__s
, 
__c
Ë
	g__THROW


215  
__buûtö_°rchr
 (
__s
, 
__c
);

218 
__exã∫_Æways_ölöe
 const *

219 
°rchr
 (c⁄° *
__s
, 
__c
Ë
	g__THROW


221  
__buûtö_°rchr
 (
__s
, 
__c
);

226 *
	$°rchr
 (c⁄° *
__s
, 
__c
)

227 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

230 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


233 *
	`°ºchr
 (*
__s
, 
__c
)

234 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

235 c⁄° *
	`°ºchr
 (c⁄° *
__s
, 
__c
)

236 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

238 #ifde‡
__OPTIMIZE__


239 
__exã∫_Æways_ölöe
 *

240 
	`°ºchr
 (*
__s
, 
__c
Ë
__THROW


242  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

245 
__exã∫_Æways_ölöe
 const *

246 
	`°ºchr
 (c⁄° *
__s
, 
__c
Ë
__THROW


248  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

251 
	}
}

253 *
	$°ºchr
 (c⁄° *
__s
, 
__c
)

254 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

257 #ifde‡
__USE_GNU


260 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


261 "C++" *
	$°rch∫ul
 (*
__s
, 
__c
)

262 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

263 "C++" c⁄° *
	$°rch∫ul
 (c⁄° *
__s
, 
__c
)

264 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

266 *
	$°rch∫ul
 (c⁄° *
__s
, 
__c
)

267 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

273 
size_t
 
	$°rc•n
 (c⁄° *
__s
, c⁄° *
__ªje˘
)

274 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

277 
size_t
 
	$°r•n
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

278 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

280 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


283 *
	`°Ωbrk
 (*
__s
, c⁄° *
__ac˚±
)

284 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

285 c⁄° *
	`°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

286 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

288 #ifde‡
__OPTIMIZE__


289 
__exã∫_Æways_ölöe
 *

290 
	`°Ωbrk
 (*
__s
, c⁄° *
__ac˚±
Ë
__THROW


292  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

295 
__exã∫_Æways_ölöe
 const *

296 
	`°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
Ë
__THROW


298  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

301 
	}
}

303 *
	$°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

304 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

307 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


310 *
	`°r°r
 (*
__hay°ack
, c⁄° *
__√edÀ
)

311 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

312 c⁄° *
	`°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

313 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

315 #ifde‡
__OPTIMIZE__


316 
__exã∫_Æways_ölöe
 *

317 
	`°r°r
 (*
__hay°ack
, c⁄° *
__√edÀ
Ë
__THROW


319  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

322 
__exã∫_Æways_ölöe
 const *

323 
	`°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
Ë
__THROW


325  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

328 
	}
}

330 *
	$°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

331 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

336 *
	$°πok
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__dñim
)

337 
__THROW
 
	`__n⁄nuŒ
 ((2));

341 *
	$__°πok_r
 (*
__ª°ri˘
 
__s
,

342 c⁄° *
__ª°ri˘
 
__dñim
,

343 **
__ª°ri˘
 
__ßve_±r
)

344 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

345 #ifde‡
__USE_POSIX


346 *
	$°πok_r
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__dñim
,

347 **
__ª°ri˘
 
__ßve_±r
)

348 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

351 #ifde‡
__USE_GNU


353 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


354 "C++" *
	$°rˇ£°r
 (*
__hay°ack
, c⁄° *
__√edÀ
)

355 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

356 "C++" c⁄° *
	$°rˇ£°r
 (c⁄° *
__hay°ack
,

357 c⁄° *
__√edÀ
)

358 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

360 *
	$°rˇ£°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

361 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

365 #ifde‡
__USE_GNU


369 *
	$memmem
 (c⁄° *
__hay°ack
, 
size_t
 
__hay°ackÀn
,

370 c⁄° *
__√edÀ
, 
size_t
 
__√edÀÀn
)

371 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 3));

375 *
	$__memp˝y
 (*
__ª°ri˘
 
__de°
,

376 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

377 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

378 *
	$memp˝y
 (*
__ª°ri˘
 
__de°
,

379 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

380 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

385 
size_t
 
	$°æí
 (c⁄° *
__s
)

386 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

388 #ifdef 
__USE_XOPEN2K8


391 
size_t
 
	$°∫Àn
 (c⁄° *
__°rög
, 
size_t
 
__maxÀn
)

392 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

397 *
	$°ªº‹
 (
__î∫um
Ë
__THROW
;

398 #ifde‡
__USE_XOPEN2K


406 #i‡
deföed
 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


409 #ifde‡
__REDIRECT_NTH


410 
	`__REDIRECT_NTH
 (
°ªº‹_r
,

411 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
),

412 
__xpg_°ªº‹_r
Ë
	`__n⁄nuŒ
 ((2));

414 
	$__xpg_°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

415 
__THROW
 
	`__n⁄nuŒ
 ((2));

416 
	#°ªº‹_r
 
__xpg_°ªº‹_r


	)

421 *
	$°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

422 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

426 #ifde‡
__USE_XOPEN2K8


428 *
	$°ªº‹_l
 (
__î∫um
, 
loˇÀ_t
 
__l
Ë
__THROW
;

431 #ifde‡
__USE_MISC


432 
	~<°rögs.h
>

436 
	$ex∂icô_bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

440 *
	$°r£p
 (**
__ª°ri˘
 
__°rögp
,

441 c⁄° *
__ª°ri˘
 
__dñim
)

442 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

445 #ifdef 
__USE_XOPEN2K8


447 *
	$°rsig«l
 (
__sig
Ë
__THROW
;

450 *
	$__°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

451 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

452 *
	$°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

453 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

457 *
	$__°≤˝y
 (*
__ª°ri˘
 
__de°
,

458 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

459 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

460 *
	$°≤˝y
 (*
__ª°ri˘
 
__de°
,

461 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

462 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

465 #ifdef 
__USE_GNU


467 
	$°rvîscmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

468 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

471 *
	$°r‰y
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

474 *
	$mem‰ob
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

476 #i‚de‡
ba£«me


481 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


482 "C++" *
	$ba£«me
 (*
__fûíame
)

483 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

484 "C++" c⁄° *
	$ba£«me
 (c⁄° *
__fûíame
)

485 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

487 *
	$ba£«me
 (c⁄° *
__fûíame
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

492 #i‡
	`__GNUC_PREREQ
 (3,4)

493 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


495 
	~<bôs/°rög_f‹tifõd.h
>

499 
__END_DECLS


	@/usr/include/time.h

22 #i‚def 
_TIME_H


23 
	#_TIME_H
 1

	)

25 
	~<„©uªs.h
>

27 
	#__√ed_size_t


	)

28 
	#__√ed_NULL


	)

29 
	~<°ddef.h
>

33 
	~<bôs/time.h
>

37 
	~<bôs/ty≥s/˛ock_t.h
>

38 
	~<bôs/ty≥s/time_t.h
>

39 
	~<bôs/ty≥s/°ru˘_tm.h
>

41 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_ISOC11


42 
	~<bôs/ty≥s/°ru˘_time•ec.h
>

45 #ifde‡
__USE_POSIX199309


46 
	~<bôs/ty≥s/˛ockid_t.h
>

47 
	~<bôs/ty≥s/timî_t.h
>

48 
	~<bôs/ty≥s/°ru˘_ôimî•ec.h
>

49 
	gsigevít
;

52 #ifde‡
__USE_XOPEN2K


53 #i‚de‡
__pid_t_deföed


54 
__pid_t
 
	tpid_t
;

55 
	#__pid_t_deföed


	)

59 #ifde‡
__USE_XOPEN2K8


60 
	~<bôs/ty≥s/loˇÀ_t.h
>

63 #ifde‡
__USE_ISOC11


65 
	#TIME_UTC
 1

	)

68 
__BEGIN_DECLS


72 
˛ock_t
 
	$˛ock
 (Ë
__THROW
;

75 
time_t
 
	$time
 (
time_t
 *
__timî
Ë
__THROW
;

78 
	$dif·ime
 (
time_t
 
__time1
,Åime_à
__time0
)

79 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

82 
time_t
 
	$mktime
 (
tm
 *
__ç
Ë
__THROW
;

88 
size_t
 
	$°r·ime
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

89 c⁄° *
__ª°ri˘
 
__f‹m©
,

90 c⁄° 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

92 #ifde‡
__USE_XOPEN


95 *
	$°Ωtime
 (c⁄° *
__ª°ri˘
 
__s
,

96 c⁄° *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
)

97 
__THROW
;

100 #ifde‡
__USE_XOPEN2K8


104 
size_t
 
	$°r·ime_l
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

105 c⁄° *
__ª°ri˘
 
__f‹m©
,

106 c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

107 
loˇÀ_t
 
__loc
Ë
__THROW
;

110 #ifde‡
__USE_GNU


111 *
	$°Ωtime_l
 (c⁄° *
__ª°ri˘
 
__s
,

112 c⁄° *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
,

113 
loˇÀ_t
 
__loc
Ë
__THROW
;

119 
tm
 *
	$gmtime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

123 
tm
 *
	$loˇ…ime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

125 #i‡
deföed
 
__USE_POSIX
 || 
	`__GLIBC_USE
 (
ISOC2X
)

128 
tm
 *
	$gmtime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

129 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

133 
tm
 *
	$loˇ…ime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

134 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

139 *
	$as˘ime
 (c⁄° 
tm
 *
__ç
Ë
__THROW
;

142 *
	$˘ime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

144 #i‡
deföed
 
__USE_POSIX
 || 
	`__GLIBC_USE
 (
ISOC2X
)

149 *
	$as˘ime_r
 (c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

150 *
__ª°ri˘
 
__buf
Ë
__THROW
;

153 *
	$˘ime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

154 *
__ª°ri˘
 
__buf
Ë
__THROW
;

159 *
__tz«me
[2];

160 
__daylight
;

161 
__timez⁄e
;

164 #ifdef 
__USE_POSIX


166 *
tz«me
[2];

170 
	$tz£t
 (Ë
__THROW
;

173 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


174 
daylight
;

175 
timez⁄e
;

181 
	#__i¶óp
(
yór
) \

182 ((
yór
Ë% 4 =0 && ((yórË% 100 !0 || (yórË% 400 =0))

	)

185 #ifde‡
__USE_MISC


190 
time_t
 
	$timegm
 (
tm
 *
__ç
Ë
__THROW
;

193 
time_t
 
	$timñoˇl
 (
tm
 *
__ç
Ë
__THROW
;

196 
	$dysize
 (
__yór
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

200 #ifde‡
__USE_POSIX199309


205 
	`«no¶ìp
 (c⁄° 
time•ec
 *
__ªque°ed_time
,

206 
time•ec
 *
__ªmaöög
);

210 
	$˛ock_gëªs
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ªs
Ë
__THROW
;

213 
	$˛ock_gëtime
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ç
Ë
__THROW
;

216 
	$˛ock_£âime
 (
˛ockid_t
 
__˛ock_id
, c⁄° 
time•ec
 *
__ç
)

217 
__THROW
;

219 #ifde‡
__USE_XOPEN2K


224 
	`˛ock_«no¶ìp
 (
˛ockid_t
 
__˛ock_id
, 
__Êags
,

225 c⁄° 
time•ec
 *
__ªq
,

226 
time•ec
 *
__ªm
);

229 
	$˛ock_gë˝u˛ockid
 (
pid_t
 
__pid
, 
˛ockid_t
 *
__˛ock_id
Ë
__THROW
;

234 
	$timî_¸óã
 (
˛ockid_t
 
__˛ock_id
,

235 
sigevít
 *
__ª°ri˘
 
__evp
,

236 
timî_t
 *
__ª°ri˘
 
__timîid
Ë
__THROW
;

239 
	$timî_dñëe
 (
timî_t
 
__timîid
Ë
__THROW
;

242 
	$timî_£âime
 (
timî_t
 
__timîid
, 
__Êags
,

243 c⁄° 
ôimî•ec
 *
__ª°ri˘
 
__vÆue
,

244 
ôimî•ec
 *
__ª°ri˘
 
__ovÆue
Ë
__THROW
;

247 
	$timî_gëtime
 (
timî_t
 
__timîid
, 
ôimî•ec
 *
__vÆue
)

248 
__THROW
;

251 
	$timî_gëovîrun
 (
timî_t
 
__timîid
Ë
__THROW
;

255 #ifde‡
__USE_ISOC11


257 
	$time•ec_gë
 (
time•ec
 *
__ts
, 
__ba£
)

258 
__THROW
 
	`__n⁄nuŒ
 ((1));

262 #ifde‡
__USE_XOPEN_EXTENDED


274 
gëd©e_îr
;

283 
tm
 *
	`gëd©e
 (c⁄° *
__°rög
);

286 #ifde‡
__USE_GNU


297 
	`gëd©e_r
 (c⁄° *
__ª°ri˘
 
__°rög
,

298 
tm
 *
__ª°ri˘
 
__ªsbuÂ
);

301 
__END_DECLS


	@/usr/include/unistd.h

22 #i‚def 
_UNISTD_H


23 
	#_UNISTD_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


32 #ifde‡
__USE_XOPEN2K8


34 
	#_POSIX_VERSION
 200809L

	)

35 #ñi‡
deföed
 
__USE_XOPEN2K


37 
	#_POSIX_VERSION
 200112L

	)

38 #ñi‡
deföed
 
__USE_POSIX199506


40 
	#_POSIX_VERSION
 199506L

	)

41 #ñi‡
deföed
 
__USE_POSIX199309


43 
	#_POSIX_VERSION
 199309L

	)

46 
	#_POSIX_VERSION
 199009L

	)

52 #ifde‡
__USE_XOPEN2K8


53 
	#__POSIX2_THIS_VERSION
 200809L

	)

55 #ñi‡
deföed
 
__USE_XOPEN2K


57 
	#__POSIX2_THIS_VERSION
 200112L

	)

58 #ñi‡
deföed
 
__USE_POSIX199506


60 
	#__POSIX2_THIS_VERSION
 199506L

	)

63 
	#__POSIX2_THIS_VERSION
 199209L

	)

67 
	#_POSIX2_VERSION
 
__POSIX2_THIS_VERSION


	)

70 
	#_POSIX2_C_VERSION
 
__POSIX2_THIS_VERSION


	)

74 
	#_POSIX2_C_BIND
 
__POSIX2_THIS_VERSION


	)

78 
	#_POSIX2_C_DEV
 
__POSIX2_THIS_VERSION


	)

82 
	#_POSIX2_SW_DEV
 
__POSIX2_THIS_VERSION


	)

86 
	#_POSIX2_LOCALEDEF
 
__POSIX2_THIS_VERSION


	)

89 #ifde‡
__USE_XOPEN2K8


90 
	#_XOPEN_VERSION
 700

	)

91 #ñi‡
deföed
 
__USE_XOPEN2K


92 
	#_XOPEN_VERSION
 600

	)

93 #ñi‡
deföed
 
__USE_UNIX98


94 
	#_XOPEN_VERSION
 500

	)

96 
	#_XOPEN_VERSION
 4

	)

100 
	#_XOPEN_XCU_VERSION
 4

	)

103 
	#_XOPEN_XPG2
 1

	)

104 
	#_XOPEN_XPG3
 1

	)

105 
	#_XOPEN_XPG4
 1

	)

108 
	#_XOPEN_UNIX
 1

	)

112 
	#_XOPEN_ENH_I18N
 1

	)

115 
	#_XOPEN_LEGACY
 1

	)

202 
	~<bôs/posix_›t.h
>

205 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


206 
	~<bôs/ívú⁄míts.h
>

210 
	#STDIN_FILENO
 0

	)

211 
	#STDOUT_FILENO
 1

	)

212 
	#STDERR_FILENO
 2

	)

217 
	~<bôs/ty≥s.h
>

219 #i‚def 
__ssize_t_deföed


220 
__ssize_t
 
	tssize_t
;

221 
	#__ssize_t_deföed


	)

224 
	#__√ed_size_t


	)

225 
	#__√ed_NULL


	)

226 
	~<°ddef.h
>

228 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


231 #i‚de‡
__gid_t_deföed


232 
__gid_t
 
	tgid_t
;

233 
	#__gid_t_deföed


	)

236 #i‚de‡
__uid_t_deföed


237 
__uid_t
 
	tuid_t
;

238 
	#__uid_t_deföed


	)

241 #i‚de‡
__off_t_deföed


242 #i‚de‡
__USE_FILE_OFFSET64


243 
__off_t
 
	toff_t
;

245 
__off64_t
 
	toff_t
;

247 
	#__off_t_deföed


	)

249 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


250 
__off64_t
 
	toff64_t
;

251 
	#__off64_t_deföed


	)

254 #i‚de‡
__u£c⁄ds_t_deföed


255 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

256 
	#__u£c⁄ds_t_deföed


	)

259 #i‚de‡
__pid_t_deföed


260 
__pid_t
 
	tpid_t
;

261 
	#__pid_t_deföed


	)

265 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


266 #i‚de‡
__öçå_t_deföed


267 
__öçå_t
 
	töçå_t
;

268 
	#__öçå_t_deföed


	)

272 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


273 #i‚de‡
__sockÀn_t_deföed


274 
__sockÀn_t
 
	tsockÀn_t
;

275 
	#__sockÀn_t_deföed


	)

281 
	#R_OK
 4

	)

282 
	#W_OK
 2

	)

283 
	#X_OK
 1

	)

284 
	#F_OK
 0

	)

287 
	$ac˚ss
 (c⁄° *
__«me
, 
__ty≥
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

289 #ifde‡
__USE_GNU


292 
	$euidac˚ss
 (c⁄° *
__«me
, 
__ty≥
)

293 
__THROW
 
	`__n⁄nuŒ
 ((1));

296 
	$óc˚ss
 (c⁄° *
__«me
, 
__ty≥
)

297 
__THROW
 
	`__n⁄nuŒ
 ((1));

300 #ifde‡
__USE_ATFILE


304 
	$Ác˚sßt
 (
__fd
, c⁄° *
__fûe
, 
__ty≥
, 
__Êag
)

305 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

310 #i‚def 
_STDIO_H


311 
	#SEEK_SET
 0

	)

312 
	#SEEK_CUR
 1

	)

313 
	#SEEK_END
 2

	)

314 #ifde‡
__USE_GNU


315 
	#SEEK_DATA
 3

	)

316 
	#SEEK_HOLE
 4

	)

320 #i‡
deföed
 
__USE_MISC
 && !deföed 
L_SET


322 
	#L_SET
 
SEEK_SET


	)

323 
	#L_INCR
 
SEEK_CUR


	)

324 
	#L_XTND
 
SEEK_END


	)

333 #i‚de‡
__USE_FILE_OFFSET64


334 
__off_t
 
	$l£ek
 (
__fd
, 
__off_t
 
__off£t
, 
__whí˚
Ë
__THROW
;

336 #ifde‡
__REDIRECT_NTH


337 
__off64_t
 
	`__REDIRECT_NTH
 (
l£ek
,

338 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
),

339 
l£ek64
);

341 
	#l£ek
 
l£ek64


	)

344 #ifde‡
__USE_LARGEFILE64


345 
__off64_t
 
	$l£ek64
 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
)

346 
__THROW
;

353 
	`˛o£
 (
__fd
);

360 
ssize_t
 
	$ªad
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
Ë
__wur
;

366 
ssize_t
 
	$wrôe
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
Ë
__wur
;

368 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


369 #i‚de‡
__USE_FILE_OFFSET64


376 
ssize_t
 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

377 
__off_t
 
__off£t
Ë
__wur
;

384 
ssize_t
 
	$pwrôe
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
,

385 
__off_t
 
__off£t
Ë
__wur
;

387 #ifde‡
__REDIRECT


388 
ssize_t
 
	`__REDIRECT
 (
¥ód
, (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

389 
__off64_t
 
__off£t
),

390 
¥ód64
Ë
__wur
;

391 
ssize_t
 
	`__REDIRECT
 (
pwrôe
, (
__fd
, c⁄° *
__buf
,

392 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
),

393 
pwrôe64
Ë
__wur
;

395 
	#¥ód
 
¥ód64


	)

396 
	#pwrôe
 
pwrôe64


	)

400 #ifde‡
__USE_LARGEFILE64


404 
ssize_t
 
	$¥ód64
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

405 
__off64_t
 
__off£t
Ë
__wur
;

408 
ssize_t
 
	$pwrôe64
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
,

409 
__off64_t
 
__off£t
Ë
__wur
;

417 
	$pùe
 (
__pùedes
[2]Ë
__THROW
 
__wur
;

419 #ifde‡
__USE_GNU


422 
	$pùe2
 (
__pùedes
[2], 
__Êags
Ë
__THROW
 
__wur
;

432 
	$Æ¨m
 (
__£c⁄ds
Ë
__THROW
;

444 
	`¶ìp
 (
__£c⁄ds
);

446 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

447 || 
deföed
 
__USE_MISC


452 
__u£c⁄ds_t
 
	$uÆ¨m
 (
__u£c⁄ds_t
 
__vÆue
, __u£c⁄ds_à
__öãrvÆ
)

453 
__THROW
;

460 
	`u¶ìp
 (
__u£c⁄ds_t
 
__u£c⁄ds
);

469 
	`∑u£
 ();

473 
	$chown
 (c⁄° *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

474 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

476 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


478 
	$fchown
 (
__fd
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
Ë
__THROW
 
__wur
;

483 
	$lchown
 (c⁄° *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

484 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

488 #ifde‡
__USE_ATFILE


491 
	$fchow«t
 (
__fd
, c⁄° *
__fûe
, 
__uid_t
 
__ow√r
,

492 
__gid_t
 
__group
, 
__Êag
)

493 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

497 
	$chdú
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

499 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


501 
	$fchdú
 (
__fd
Ë
__THROW
 
__wur
;

511 *
	$gëcwd
 (*
__buf
, 
size_t
 
__size
Ë
__THROW
 
__wur
;

513 #ifdef 
__USE_GNU


517 *
	$gë_cuºít_dú_«me
 (Ë
__THROW
;

520 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

521 || 
deföed
 
__USE_MISC


525 *
	$gëwd
 (*
__buf
)

526 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
 
__wur
;

531 
	$dup
 (
__fd
Ë
__THROW
 
__wur
;

534 
	$dup2
 (
__fd
, 
__fd2
Ë
__THROW
;

536 #ifde‡
__USE_GNU


539 
	$dup3
 (
__fd
, 
__fd2
, 
__Êags
Ë
__THROW
;

543 **
__ívú⁄
;

544 #ifde‡
__USE_GNU


545 **
ívú⁄
;

551 
	$execve
 (c⁄° *
__∑th
, *c⁄° 
__¨gv
[],

552 *c⁄° 
__ívp
[]Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

554 #ifde‡
__USE_XOPEN2K8


557 
	$„xecve
 (
__fd
, *c⁄° 
__¨gv
[], *c⁄° 
__ívp
[])

558 
__THROW
 
	`__n⁄nuŒ
 ((2));

563 
	$execv
 (c⁄° *
__∑th
, *c⁄° 
__¨gv
[])

564 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

568 
	$exe˛e
 (c⁄° *
__∑th
, c⁄° *
__¨g
, ...)

569 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

573 
	$exe˛
 (c⁄° *
__∑th
, c⁄° *
__¨g
, ...)

574 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

578 
	$execvp
 (c⁄° *
__fûe
, *c⁄° 
__¨gv
[])

579 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

584 
	$exe˛p
 (c⁄° *
__fûe
, c⁄° *
__¨g
, ...)

585 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

587 #ifde‡
__USE_GNU


590 
	$execv≥
 (c⁄° *
__fûe
, *c⁄° 
__¨gv
[],

591 *c⁄° 
__ívp
[])

592 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

596 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


598 
	$ni˚
 (
__öc
Ë
__THROW
 
__wur
;

603 
	$_exô
 (
__°©us
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

609 
	~<bôs/c⁄‚ame.h
>

612 
	$∑thc⁄f
 (c⁄° *
__∑th
, 
__«me
)

613 
__THROW
 
	`__n⁄nuŒ
 ((1));

616 
	$Â©hc⁄f
 (
__fd
, 
__«me
Ë
__THROW
;

619 
	$sysc⁄f
 (
__«me
Ë
__THROW
;

621 #ifdef 
__USE_POSIX2


623 
size_t
 
	$c⁄f°r
 (
__«me
, *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

628 
__pid_t
 
	$gëpid
 (Ë
__THROW
;

631 
__pid_t
 
	$gëµid
 (Ë
__THROW
;

634 
__pid_t
 
	$gëpgΩ
 (Ë
__THROW
;

637 
__pid_t
 
	$__gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

638 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


639 
__pid_t
 
	$gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

646 
	$£çgid
 (
__pid_t
 
__pid
, __pid_à
__pgid
Ë
__THROW
;

648 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


660 
	$£çgΩ
 (Ë
__THROW
;

667 
__pid_t
 
	$£tsid
 (Ë
__THROW
;

669 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


671 
__pid_t
 
	$gësid
 (
__pid_t
 
__pid
Ë
__THROW
;

675 
__uid_t
 
	$gëuid
 (Ë
__THROW
;

678 
__uid_t
 
	$gëeuid
 (Ë
__THROW
;

681 
__gid_t
 
	$gëgid
 (Ë
__THROW
;

684 
__gid_t
 
	$gëegid
 (Ë
__THROW
;

689 
	$gëgroups
 (
__size
, 
__gid_t
 
__li°
[]Ë
__THROW
 
__wur
;

691 #ifdef 
__USE_GNU


693 
	$group_membî
 (
__gid_t
 
__gid
Ë
__THROW
;

700 
	$£tuid
 (
__uid_t
 
__uid
Ë
__THROW
 
__wur
;

702 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


705 
	$£åeuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
Ë
__THROW
 
__wur
;

708 #ifde‡
__USE_XOPEN2K


710 
	$£ãuid
 (
__uid_t
 
__uid
Ë
__THROW
 
__wur
;

717 
	$£tgid
 (
__gid_t
 
__gid
Ë
__THROW
 
__wur
;

719 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


722 
	$£åegid
 (
__gid_t
 
__rgid
, __gid_à
__egid
Ë
__THROW
 
__wur
;

725 #ifde‡
__USE_XOPEN2K


727 
	$£ãgid
 (
__gid_t
 
__gid
Ë
__THROW
 
__wur
;

730 #ifde‡
__USE_GNU


733 
	$gëªsuid
 (
__uid_t
 *
__ruid
, __uid_à*
__euid
, __uid_à*
__suid
)

734 
__THROW
;

738 
	$gëªsgid
 (
__gid_t
 *
__rgid
, __gid_à*
__egid
, __gid_à*
__sgid
)

739 
__THROW
;

743 
	$£åesuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
, __uid_à
__suid
)

744 
__THROW
 
__wur
;

748 
	$£åesgid
 (
__gid_t
 
__rgid
, __gid_à
__egid
, __gid_à
__sgid
)

749 
__THROW
 
__wur
;

756 
__pid_t
 
	$f‹k
 (Ë
__THROWNL
;

758 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

759 || 
deföed
 
__USE_MISC


764 
__pid_t
 
	$vf‹k
 (Ë
__THROW
;

770 *
	$ây«me
 (
__fd
Ë
__THROW
;

774 
	$ây«me_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

775 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

779 
	$ißây
 (
__fd
Ë
__THROW
;

781 #ifde‡
__USE_MISC


784 
	$ây¶Ÿ
 (Ë
__THROW
;

789 
	$lök
 (c⁄° *
__‰om
, c⁄° *
__to
)

790 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

792 #ifde‡
__USE_ATFILE


795 
	$lök©
 (
__‰omfd
, c⁄° *
__‰om
, 
__tofd
,

796 c⁄° *
__to
, 
__Êags
)

797 
__THROW
 
	`__n⁄nuŒ
 ((2, 4)Ë
__wur
;

800 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


802 
	$symlök
 (c⁄° *
__‰om
, c⁄° *
__to
)

803 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

808 
ssize_t
 
	$ªadlök
 (c⁄° *
__ª°ri˘
 
__∑th
,

809 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

810 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

813 #ifde‡
__USE_ATFILE


815 
	$symlök©
 (c⁄° *
__‰om
, 
__tofd
,

816 c⁄° *
__to
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

819 
ssize_t
 
	$ªadlök©
 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

820 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

821 
__THROW
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

825 
	$u∆ök
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

827 #ifde‡
__USE_ATFILE


829 
	$u∆ök©
 (
__fd
, c⁄° *
__«me
, 
__Êag
)

830 
__THROW
 
	`__n⁄nuŒ
 ((2));

834 
	$rmdú
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

838 
__pid_t
 
	$tcgëpgΩ
 (
__fd
Ë
__THROW
;

841 
	$tc£çgΩ
 (
__fd
, 
__pid_t
 
__pgΩ_id
Ë
__THROW
;

848 *
	`gëlogö
 ();

849 #ifde‡
__USE_POSIX199506


856 
	$gëlogö_r
 (*
__«me
, 
size_t
 
__«me_Àn
Ë
	`__n⁄nuŒ
 ((1));

859 #ifdef 
__USE_MISC


861 
	$£éogö
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

865 #ifdef 
__USE_POSIX2


869 
	~<bôs/gë›t_posix.h
>

873 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


877 
	$gëho°«me
 (*
__«me
, 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

881 #i‡
deföed
 
__USE_MISC


884 
	$£tho°«me
 (c⁄° *
__«me
, 
size_t
 
__Àn
)

885 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

889 
	$£tho°id
 (
__id
Ë
__THROW
 
__wur
;

895 
	$gëdomaö«me
 (*
__«me
, 
size_t
 
__Àn
)

896 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

897 
	$£tdomaö«me
 (c⁄° *
__«me
, 
size_t
 
__Àn
)

898 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

904 
	$vh™gup
 (Ë
__THROW
;

907 
	$ªvoke
 (c⁄° *
__fûe
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

915 
	$¥ofû
 (*
__ßm∂e_buf„r
, 
size_t
 
__size
,

916 
size_t
 
__off£t
, 
__sˇÀ
)

917 
__THROW
 
	`__n⁄nuŒ
 ((1));

923 
	$ac˘
 (c⁄° *
__«me
Ë
__THROW
;

927 *
	$gëu£rshñl
 (Ë
__THROW
;

928 
	$ídu£rshñl
 (Ë
__THROW
;

929 
	$£tu£rshñl
 (Ë
__THROW
;

935 
	$d´m⁄
 (
__nochdú
, 
__no˛o£
Ë
__THROW
 
__wur
;

939 #i‡
deföed
 
__USE_MISC
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

942 
	$chroŸ
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

946 *
	$gë∑ss
 (c⁄° *
__¥om±
Ë
	`__n⁄nuŒ
 ((1));

954 
	`fsync
 (
__fd
);

957 #ifde‡
__USE_GNU


960 
	$syncfs
 (
__fd
Ë
__THROW
;

964 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


967 
	`gëho°id
 ();

970 
	$sync
 (Ë
__THROW
;

973 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K


976 
	$gë∑gesize
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

981 
	$gëdèbÀsize
 (Ë
__THROW
;

987 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


990 #i‚de‡
__USE_FILE_OFFSET64


991 
	$åunˇã
 (c⁄° *
__fûe
, 
__off_t
 
__Àngth
)

992 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

994 #ifde‡
__REDIRECT_NTH


995 
	`__REDIRECT_NTH
 (
åunˇã
,

996 (c⁄° *
__fûe
, 
__off64_t
 
__Àngth
),

997 
åunˇã64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

999 
	#åunˇã
 
åunˇã64


	)

1002 #ifde‡
__USE_LARGEFILE64


1003 
	$åunˇã64
 (c⁄° *
__fûe
, 
__off64_t
 
__Àngth
)

1004 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1009 #i‡
deföed
 
__USE_POSIX199309
 \

1010 || 
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


1013 #i‚de‡
__USE_FILE_OFFSET64


1014 
	$·runˇã
 (
__fd
, 
__off_t
 
__Àngth
Ë
__THROW
 
__wur
;

1016 #ifde‡
__REDIRECT_NTH


1017 
	`__REDIRECT_NTH
 (
·runˇã
, (
__fd
, 
__off64_t
 
__Àngth
),

1018 
·runˇã64
Ë
__wur
;

1020 
	#·runˇã
 
·runˇã64


	)

1023 #ifde‡
__USE_LARGEFILE64


1024 
	$·runˇã64
 (
__fd
, 
__off64_t
 
__Àngth
Ë
__THROW
 
__wur
;

1030 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

1031 || 
deföed
 
__USE_MISC


1035 
	$brk
 (*
__addr
Ë
__THROW
 
__wur
;

1041 *
	$sbrk
 (
öçå_t
 
__dñè
Ë
__THROW
;

1045 #ifde‡
__USE_MISC


1056 
	$sysˇŒ
 (
__sy¢o
, ...Ë
__THROW
;

1061 #i‡(
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
Ë&& !deföed 
F_LOCK


1073 
	#F_ULOCK
 0

	)

1074 
	#F_LOCK
 1

	)

1075 
	#F_TLOCK
 2

	)

1076 
	#F_TEST
 3

	)

1078 #i‚de‡
__USE_FILE_OFFSET64


1079 
	$lockf
 (
__fd
, 
__cmd
, 
__off_t
 
__Àn
Ë
__wur
;

1081 #ifde‡
__REDIRECT


1082 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
),

1083 
lockf64
Ë
__wur
;

1085 
	#lockf
 
lockf64


	)

1088 #ifde‡
__USE_LARGEFILE64


1089 
	$lockf64
 (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
Ë
__wur
;

1094 #ifde‡
__USE_GNU


1099 
	#TEMP_FAILURE_RETRY
(
ex¥essi⁄
) \

1100 (
__exãnsi⁄__
 \

1101 ({ 
__ªsu…
; \

1102 dÿ
__ªsu…
 = (Ë(
ex¥essi⁄
); \

1103 
__ªsu…
 =-1L && 
î∫o
 =
EINTR
); \

1104 
__ªsu…
; 
	}
}))

	)

1107 
ssize_t
 
c›y_fûe_ønge
 (
__öfd
, 
__off64_t
 *
__pöoff
,

1108 
__outfd
, 
__off64_t
 *
__poutoff
,

1109 
size_t
 
__Àngth
, 
__Êags
);

1112 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_UNIX98


1115 
fd©async
 (
__fûdes
);

1118 #ifde‡
__USE_MISC


1124 *
	$¸y±
 (c⁄° *
__key
, c⁄° *
__ß…
)

1125 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1128 #ifdef 
__USE_XOPEN


1133 
	$swab
 (c⁄° *
__ª°ri˘
 
__‰om
, *__ª°ri˘ 
__to
,

1134 
ssize_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1141 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K


1143 *
	$˘îmid
 (*
__s
Ë
__THROW
;

1146 *
	`cu£rid
 (*
__s
);

1152 #i‡
deföed
 
__USE_UNIX98
 && !deföed 
__USE_XOPEN2K


1153 
	$±hªad_©f‹k
 ((*
__¥ï¨e
) (),

1154 (*
__∑ª¡
) (),

1155 (*
__chûd
Ë()Ë
__THROW
;

1158 #ifde‡
__USE_MISC


1161 
	$gëíå›y
 (*
__buf„r
, 
size_t
 
__Àngth
Ë
__wur
;

1165 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


1166 
	~<bôs/uni°d.h
>

1170 
	~<bôs/uni°d_ext.h
>

1172 
__END_DECLS


	@/usr/include/alloca.h

18 #i‚def 
_ALLOCA_H


19 
	#_ALLOCA_H
 1

	)

21 
	~<„©uªs.h
>

23 
	#__√ed_size_t


	)

24 
	~<°ddef.h
>

26 
	g__BEGIN_DECLS


29 #unde‡
Æloˇ


32 *
	$Æloˇ
 (
size_t
 
__size
Ë
__THROW
;

34 #ifdef 
__GNUC__


35 
	#Æloˇ
(
size
Ë
	`__buûtö_Æloˇ
 (size)

	)

38 
__END_DECLS


	@/usr/include/features.h

18 #i‚def 
_FEATURES_H


19 
	#_FEATURES_H
 1

	)

120 #unde‡
__USE_ISOC11


121 #unde‡
__USE_ISOC99


122 #unde‡
__USE_ISOC95


123 #unde‡
__USE_ISOCXX11


124 #unde‡
__USE_POSIX


125 #unde‡
__USE_POSIX2


126 #unde‡
__USE_POSIX199309


127 #unde‡
__USE_POSIX199506


128 #unde‡
__USE_XOPEN


129 #unde‡
__USE_XOPEN_EXTENDED


130 #unde‡
__USE_UNIX98


131 #unde‡
__USE_XOPEN2K


132 #unde‡
__USE_XOPEN2KXSI


133 #unde‡
__USE_XOPEN2K8


134 #unde‡
__USE_XOPEN2K8XSI


135 #unde‡
__USE_LARGEFILE


136 #unde‡
__USE_LARGEFILE64


137 #unde‡
__USE_FILE_OFFSET64


138 #unde‡
__USE_MISC


139 #unde‡
__USE_ATFILE


140 #unde‡
__USE_GNU


141 #unde‡
__USE_FORTIFY_LEVEL


142 #unde‡
__KERNEL_STRICT_NAMES


143 #unde‡
__GLIBC_USE_ISOC2X


144 #unde‡
__GLIBC_USE_DEPRECATED_GETS


145 #unde‡
__GLIBC_USE_DEPRECATED_SCANF


149 #i‚de‡
_LOOSE_KERNEL_NAMES


150 
	#__KERNEL_STRICT_NAMES


	)

160 #i‡
deföed
 
__GNUC__
 && deföed 
__GNUC_MINOR__


161 
	#__GNUC_PREREQ
(
maj
, 
mö
) \

162 ((
__GNUC__
 << 16Ë+ 
__GNUC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

164 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë0

	)

171 #i‡
deföed
 
__˛™g_maj‹__
 && deföed 
__˛™g_mö‹__


172 
	#__glibc_˛™g_¥îeq
(
maj
, 
mö
) \

173 ((
__˛™g_maj‹__
 << 16Ë+ 
__˛™g_mö‹__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

175 
	#__glibc_˛™g_¥îeq
(
maj
, 
mö
Ë0

	)

179 
	#__GLIBC_USE
(
F
Ë
__GLIBC_USE_
 ## 
	)
F

185 #i‡(
deföed
 
_BSD_SOURCE
 || deföed 
_SVID_SOURCE
) \

186 && !
deföed
 
	g_DEFAULT_SOURCE


188 #unde‡
_DEFAULT_SOURCE


189 
	#_DEFAULT_SOURCE
 1

	)

193 #ifde‡
_GNU_SOURCE


194 #unde‡
_ISOC95_SOURCE


195 
	#_ISOC95_SOURCE
 1

	)

196 #unde‡
_ISOC99_SOURCE


197 
	#_ISOC99_SOURCE
 1

	)

198 #unde‡
_ISOC11_SOURCE


199 
	#_ISOC11_SOURCE
 1

	)

200 #unde‡
_ISOC2X_SOURCE


201 
	#_ISOC2X_SOURCE
 1

	)

202 #unde‡
_POSIX_SOURCE


203 
	#_POSIX_SOURCE
 1

	)

204 #unde‡
_POSIX_C_SOURCE


205 
	#_POSIX_C_SOURCE
 200809L

	)

206 #unde‡
_XOPEN_SOURCE


207 
	#_XOPEN_SOURCE
 700

	)

208 #unde‡
_XOPEN_SOURCE_EXTENDED


209 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

210 #unde‡
_LARGEFILE64_SOURCE


211 
	#_LARGEFILE64_SOURCE
 1

	)

212 #unde‡
_DEFAULT_SOURCE


213 
	#_DEFAULT_SOURCE
 1

	)

214 #unde‡
_ATFILE_SOURCE


215 
	#_ATFILE_SOURCE
 1

	)

220 #i‡(
deföed
 
_DEFAULT_SOURCE
 \

221 || (!
deföed
 
	g__STRICT_ANSI__
 \

222 && !
deföed
 
	g_ISOC99_SOURCE
 && !deföed 
	g_ISOC11_SOURCE
 \

223 && !
deföed
 
	g_ISOC2X_SOURCE
 \

224 && !
deföed
 
	g_POSIX_SOURCE
 && !deföed 
	g_POSIX_C_SOURCE
 \

225 && !
deföed
 
	g_XOPEN_SOURCE
))

226 #unde‡
_DEFAULT_SOURCE


227 
	#_DEFAULT_SOURCE
 1

	)

231 #i‡(
deföed
 
_ISOC2X_SOURCE
 \

232 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ > 201710L))

233 
	#__GLIBC_USE_ISOC2X
 1

	)

235 
	#__GLIBC_USE_ISOC2X
 0

	)

239 #i‡(
deföed
 
_ISOC11_SOURCE
 || deföed 
_ISOC2X_SOURCE
 \

240 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 201112L))

241 
	#__USE_ISOC11
 1

	)

245 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

246 || 
deföed
 
_ISOC2X_SOURCE
 \

247 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

248 
	#__USE_ISOC99
 1

	)

252 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

253 || 
deföed
 
_ISOC2X_SOURCE
 \

254 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199409L))

255 
	#__USE_ISOC95
 1

	)

258 #ifde‡
__˝lu•lus


260 #i‡
__˝lu•lus
 >= 201703L

261 
	#__USE_ISOC11
 1

	)

265 #i‡
__˝lu•lus
 >201103L || 
deföed
 
__GXX_EXPERIMENTAL_CXX0X__


266 
	#__USE_ISOCXX11
 1

	)

267 
	#__USE_ISOC99
 1

	)

274 #ifde‡
_DEFAULT_SOURCE


275 #i‡!
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE


276 
	#__USE_POSIX_IMPLICITLY
 1

	)

278 #unde‡
_POSIX_SOURCE


279 
	#_POSIX_SOURCE
 1

	)

280 #unde‡
_POSIX_C_SOURCE


281 
	#_POSIX_C_SOURCE
 200809L

	)

284 #i‡((!
deföed
 
__STRICT_ANSI__
 \

285 || (
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) >= 500)) \

286 && !
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE
)

287 
	#_POSIX_SOURCE
 1

	)

288 #i‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 500

289 
	#_POSIX_C_SOURCE
 2

	)

290 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 600

291 
	#_POSIX_C_SOURCE
 199506L

	)

292 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 700

293 
	#_POSIX_C_SOURCE
 200112L

	)

295 
	#_POSIX_C_SOURCE
 200809L

	)

297 
	#__USE_POSIX_IMPLICITLY
 1

	)

306 #i‡((!
deföed
 
_POSIX_C_SOURCE
 || (_POSIX_C_SOURCE - 0) < 199506L) \

307 && (
deföed
 
_REENTRANT
 || deföed 
_THREAD_SAFE
))

308 
	#_POSIX_SOURCE
 1

	)

309 #unde‡
_POSIX_C_SOURCE


310 
	#_POSIX_C_SOURCE
 199506L

	)

313 #i‡(
deföed
 
_POSIX_SOURCE
 \

314 || (
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >= 1) \

315 || 
deföed
 
_XOPEN_SOURCE
)

316 
	#__USE_POSIX
 1

	)

319 #i‡
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >2 || deföed 
_XOPEN_SOURCE


320 
	#__USE_POSIX2
 1

	)

323 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 199309L

324 
	#__USE_POSIX199309
 1

	)

327 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 199506L

328 
	#__USE_POSIX199506
 1

	)

331 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 200112L

332 
	#__USE_XOPEN2K
 1

	)

333 #unde‡
__USE_ISOC95


334 
	#__USE_ISOC95
 1

	)

335 #unde‡
__USE_ISOC99


336 
	#__USE_ISOC99
 1

	)

339 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 200809L

340 
	#__USE_XOPEN2K8
 1

	)

341 #unde‡
_ATFILE_SOURCE


342 
	#_ATFILE_SOURCE
 1

	)

345 #ifdef 
_XOPEN_SOURCE


346 
	#__USE_XOPEN
 1

	)

347 #i‡(
_XOPEN_SOURCE
 - 0) >= 500

348 
	#__USE_XOPEN_EXTENDED
 1

	)

349 
	#__USE_UNIX98
 1

	)

350 #unde‡
_LARGEFILE_SOURCE


351 
	#_LARGEFILE_SOURCE
 1

	)

352 #i‡(
_XOPEN_SOURCE
 - 0) >= 600

353 #i‡(
_XOPEN_SOURCE
 - 0) >= 700

354 
	#__USE_XOPEN2K8
 1

	)

355 
	#__USE_XOPEN2K8XSI
 1

	)

357 
	#__USE_XOPEN2K
 1

	)

358 
	#__USE_XOPEN2KXSI
 1

	)

359 #unde‡
__USE_ISOC95


360 
	#__USE_ISOC95
 1

	)

361 #unde‡
__USE_ISOC99


362 
	#__USE_ISOC99
 1

	)

365 #ifde‡
_XOPEN_SOURCE_EXTENDED


366 
	#__USE_XOPEN_EXTENDED
 1

	)

371 #ifde‡
_LARGEFILE_SOURCE


372 
	#__USE_LARGEFILE
 1

	)

375 #ifde‡
_LARGEFILE64_SOURCE


376 
	#__USE_LARGEFILE64
 1

	)

379 #i‡
deföed
 
_FILE_OFFSET_BITS
 && _FILE_OFFSET_BITS == 64

380 
	#__USE_FILE_OFFSET64
 1

	)

383 #i‡
deföed
 
_DEFAULT_SOURCE


384 
	#__USE_MISC
 1

	)

387 #ifdef 
_ATFILE_SOURCE


388 
	#__USE_ATFILE
 1

	)

391 #ifdef 
_GNU_SOURCE


392 
	#__USE_GNU
 1

	)

395 #i‡
deföed
 
_FORTIFY_SOURCE
 && _FORTIFY_SOURCE > 0 \

396 && 
__GNUC_PREREQ
 (4, 1Ë&& 
deföed
 
	g__OPTIMIZE__
 && __OPTIMIZE__ > 0

397 #i‡
_FORTIFY_SOURCE
 > 1

398 
	#__USE_FORTIFY_LEVEL
 2

	)

400 
	#__USE_FORTIFY_LEVEL
 1

	)

403 
	#__USE_FORTIFY_LEVEL
 0

	)

410 #i‡
deföed
 
__˝lu•lus
 ? __˝lu•lu†>201402L : deföed 
__USE_ISOC11


411 
	#__GLIBC_USE_DEPRECATED_GETS
 0

	)

413 
	#__GLIBC_USE_DEPRECATED_GETS
 1

	)

428 #i‡(
deföed
 
__USE_GNU
 \

429 && (
deföed
 
	g__˝lu•lus
 \

430 ? (
	g__˝lu•lus
 < 201103L && !
deföed
 
	g__GXX_EXPERIMENTAL_CXX0X__
) \

431 : (!
deföed
 
__STDC_VERSION__
 || __STDC_VERSION__ < 199901L)))

432 
	#__GLIBC_USE_DEPRECATED_SCANF
 1

	)

434 
	#__GLIBC_USE_DEPRECATED_SCANF
 0

	)

439 
	~<°dc-¥edef.h
>

447 #unde‡
__GNU_LIBRARY__


448 
	#__GNU_LIBRARY__
 6

	)

452 
	#__GLIBC__
 2

	)

453 
	#__GLIBC_MINOR__
 31

	)

455 
	#__GLIBC_PREREQ
(
maj
, 
mö
) \

456 ((
__GLIBC__
 << 16Ë+ 
__GLIBC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

459 #i‚de‡
__ASSEMBLER__


460 #i‚de‡
_SYS_CDEFS_H


461 
	~<sys/cdefs.h
>

466 #i‡
deföed
 
__USE_FILE_OFFSET64
 && !deföed 
__REDIRECT


467 
	#__USE_LARGEFILE
 1

	)

468 
	#__USE_LARGEFILE64
 1

	)

474 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

475 && !
deföed
 
	g__OPTIMIZE_SIZE__
 && !deföed 
	g__NO_INLINE__
 \

476 && 
deföed
 
	g__exã∫_ölöe


477 
	#__USE_EXTERN_INLINES
 1

	)

485 
	~<gnu/°ubs.h
>

	@/usr/include/sched.h

19 #i‚def 
_SCHED_H


20 
	#_SCHED_H
 1

	)

22 
	~<„©uªs.h
>

25 
	~<bôs/ty≥s.h
>

27 
	#__√ed_size_t


	)

28 
	#__√ed_NULL


	)

29 
	~<°ddef.h
>

31 
	~<bôs/ty≥s/time_t.h
>

32 
	~<bôs/ty≥s/°ru˘_time•ec.h
>

33 #i‚de‡
__USE_XOPEN2K


34 
	~<time.h
>

37 #i‚de‡
__pid_t_deföed


38 
__pid_t
 
	tpid_t
;

39 
	#__pid_t_deföed


	)

43 
	~<bôs/sched.h
>

44 
	~<bôs/˝u-£t.h
>

47 
	#sched_¥i‹ôy
 
sched_¥i‹ôy


	)

48 
	#__sched_¥i‹ôy
 
sched_¥i‹ôy


	)

51 
__BEGIN_DECLS


54 
	$sched_£ç¨am
 (
__pid_t
 
__pid
, c⁄° 
sched_∑øm
 *
__∑øm
)

55 
__THROW
;

58 
	$sched_gë∑øm
 (
__pid_t
 
__pid
, 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

61 
	$sched_£tscheduÀr
 (
__pid_t
 
__pid
, 
__pﬁicy
,

62 c⁄° 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

65 
	$sched_gëscheduÀr
 (
__pid_t
 
__pid
Ë
__THROW
;

68 
	$sched_yõld
 (Ë
__THROW
;

71 
	$sched_gë_¥i‹ôy_max
 (
__Æg‹ôhm
Ë
__THROW
;

74 
	$sched_gë_¥i‹ôy_mö
 (
__Æg‹ôhm
Ë
__THROW
;

77 
	$sched_º_gë_öãrvÆ
 (
__pid_t
 
__pid
, 
time•ec
 *
__t
Ë
__THROW
;

80 #ifde‡
__USE_GNU


82 
	#CPU_SETSIZE
 
__CPU_SETSIZE


	)

83 
	#CPU_SET
(
˝u
, 
˝u£ç
Ë
	`__CPU_SET_S
 (˝u,  (
˝u_£t_t
), cpu£ç)

	)

84 
	#CPU_CLR
(
˝u
, 
˝u£ç
Ë
	`__CPU_CLR_S
 (˝u,  (
˝u_£t_t
), cpu£ç)

	)

85 
	#CPU_ISSET
(
˝u
, 
˝u£ç
Ë
	`__CPU_ISSET_S
 (˝u,  (
˝u_£t_t
), \

86 
˝u£ç
)

	)

87 
	#CPU_ZERO
(
˝u£ç
Ë
	`__CPU_ZERO_S
 ( (
˝u_£t_t
), cpu£ç)

	)

88 
	#CPU_COUNT
(
˝u£ç
Ë
	`__CPU_COUNT_S
 ( (
˝u_£t_t
), cpu£ç)

	)

90 
	#CPU_SET_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_SET_S
 (˝u, sësize, cpu£ç)

	)

91 
	#CPU_CLR_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_CLR_S
 (˝u, sësize, cpu£ç)

	)

92 
	#CPU_ISSET_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_ISSET_S
 (cpu, setsize, \

93 
˝u£ç
)

	)

94 
	#CPU_ZERO_S
(
£tsize
, 
˝u£ç
Ë
	`__CPU_ZERO_S
 (£tsize, cpu£ç)

	)

95 
	#CPU_COUNT_S
(
£tsize
, 
˝u£ç
Ë
	`__CPU_COUNT_S
 (£tsize, cpu£ç)

	)

97 
	#CPU_EQUAL
(
˝u£ç1
, 
˝u£ç2
) \

98 
	`__CPU_EQUAL_S
 ( (
˝u_£t_t
), 
˝u£ç1
, 
˝u£ç2
)

	)

99 
	#CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

100 
	`__CPU_EQUAL_S
 (
£tsize
, 
˝u£ç1
, 
˝u£ç2
)

	)

102 
	#CPU_AND
(
de°£t
, 
§c£t1
, 
§c£t2
) \

103 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, &)

	)

104 
	#CPU_OR
(
de°£t
, 
§c£t1
, 
§c£t2
) \

105 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, |)

	)

106 
	#CPU_XOR
(
de°£t
, 
§c£t1
, 
§c£t2
) \

107 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, ^)

	)

108 
	#CPU_AND_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

109 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, &)

	)

110 
	#CPU_OR_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

111 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, |)

	)

112 
	#CPU_XOR_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

113 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, ^)

	)

115 
	#CPU_ALLOC_SIZE
(
cou¡
Ë
	`__CPU_ALLOC_SIZE
 (cou¡)

	)

116 
	#CPU_ALLOC
(
cou¡
Ë
	`__CPU_ALLOC
 (cou¡)

	)

117 
	#CPU_FREE
(
˝u£t
Ë
	`__CPU_FREE
 (˝u£t)

	)

121 
	$sched_£èfföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

122 c⁄° 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

125 
	$sched_gëafföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

126 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

129 
__END_DECLS


	@/usr/include/strings.h

18 #i‚def 
_STRINGS_H


19 
	#_STRINGS_H
 1

	)

21 
	~<„©uªs.h
>

22 
	#__√ed_size_t


	)

23 
	~<°ddef.h
>

26 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

27 
	#__CORRECT_ISO_CPP_STRINGS_H_PROTO


	)

30 
	g__BEGIN_DECLS


32 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K8


34 
	$bcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

35 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

38 
	$bc›y
 (c⁄° *
__§c
, *
__de°
, 
size_t
 
__n
)

39 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

42 
	$bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

45 #ifde‡
__CORRECT_ISO_CPP_STRINGS_H_PROTO


48 *
	`ödex
 (*
__s
, 
__c
)

49 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

50 c⁄° *
	`ödex
 (c⁄° *
__s
, 
__c
)

51 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

53 #i‡
deföed
 
__OPTIMIZE__


54 
__exã∫_Æways_ölöe
 *

55 
	`ödex
 (*
__s
, 
__c
Ë
__THROW


57  
	`__buûtö_ödex
 (
__s
, 
__c
);

60 
__exã∫_Æways_ölöe
 const *

61 
	`ödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


63  
	`__buûtö_ödex
 (
__s
, 
__c
);

66 
	}
}

68 *
	$ödex
 (c⁄° *
__s
, 
__c
)

69 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

73 #ifde‡
__CORRECT_ISO_CPP_STRINGS_H_PROTO


76 *
	`rödex
 (*
__s
, 
__c
)

77 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

78 c⁄° *
	`rödex
 (c⁄° *
__s
, 
__c
)

79 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

81 #i‡
deföed
 
__OPTIMIZE__


82 
__exã∫_Æways_ölöe
 *

83 
	`rödex
 (*
__s
, 
__c
Ë
__THROW


85  
	`__buûtö_rödex
 (
__s
, 
__c
);

88 
__exã∫_Æways_ölöe
 const *

89 
	`rödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


91  
	`__buûtö_rödex
 (
__s
, 
__c
);

94 
	}
}

96 *
	$rödex
 (c⁄° *
__s
, 
__c
)

97 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

101 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K8
 || deföed 
__USE_XOPEN2K8XSI


104 
	$ffs
 (
__i
Ë
__THROW
 
__©åibuã_c⁄°__
;

109 #ifdef 
__USE_MISC


110 
	$ff¶
 (
__l
Ë
__THROW
 
__©åibuã_c⁄°__
;

111 
__exãnsi⁄__
 
	$ff¶l
 (
__Œ
)

112 
__THROW
 
__©åibuã_c⁄°__
;

116 
	$°rˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

117 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

120 
	$°∫ˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

121 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

123 #ifdef 
__USE_XOPEN2K8


125 
	~<bôs/ty≥s/loˇÀ_t.h
>

128 
	$°rˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
, 
loˇÀ_t
 
__loc
)

129 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

133 
	$°∫ˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
,

134 
size_t
 
__n
, 
loˇÀ_t
 
__loc
)

135 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 4));

138 
__END_DECLS


140 #i‡
	`__GNUC_PREREQ
 (3,4Ë&& 
__USE_FORTIFY_LEVEL
 > 0 \

141 && 
deföed
 
__f‹tify_fun˘i⁄


143 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K8


144 
	~<bôs/°rögs_f‹tifõd.h
>

	@/usr/include/stdc-predef.h

18 #i‚def 
_STDC_PREDEF_H


19 
	#_STDC_PREDEF_H
 1

	)

36 #ifde‡
__GCC_IEC_559


37 #i‡
__GCC_IEC_559
 > 0

38 
	#__STDC_IEC_559__
 1

	)

41 
	#__STDC_IEC_559__
 1

	)

44 #ifde‡
__GCC_IEC_559_COMPLEX


45 #i‡
__GCC_IEC_559_COMPLEX
 > 0

46 
	#__STDC_IEC_559_COMPLEX__
 1

	)

49 
	#__STDC_IEC_559_COMPLEX__
 1

	)

58 
	#__STDC_ISO_10646__
 201706L

	)

	@
1
.
1
/usr/include
30
432
cceh.cpp
cceh.h
copy.h
data.cpp
data.h
global.cpp
global.h
hash.cpp
hash.h
kvs.h
kvs2.h
log.cpp
log.h
query.cpp
query.h
thread.cpp
thread.h
/usr/include/libpmem.h
/usr/include/pthread.h
/usr/include/stdint.h
/usr/include/stdio.h
/usr/include/stdlib.h
/usr/include/string.h
/usr/include/time.h
/usr/include/unistd.h
/usr/include/alloca.h
/usr/include/features.h
/usr/include/sched.h
/usr/include/strings.h
/usr/include/stdc-predef.h
