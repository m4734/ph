cscope 15 $HOME/20220321/ph               0003202285
	@ph/cceh.c

1 
	~"c˚h.h
"

2 
	~"thªad.h
"

4 
	~<queue
>

5 
	~<°rög.h
>

6 
	~<°dio.h
>

7 
	~<°dlib.h
>

8 
	~<x86öåö.h
>

11 
	~<time.h
>

13 
«me•a˚
 
	gPH


16 vﬁ©ûê
	g£g_‰ì_˙t
;

17 vﬁ©ûê
	g£g_‰ì_mö
;

18 vﬁ©ûê
	g£g_‰ì_ödex
;

20 
	#FREE_SEG_LEN
 10000

	)

21 
SEG
* 
	g‰ì_£g_queue
[
FREE_SEG_LEN
];

23 
	g°d
::
©omic
<
uöt8_t
> 
‰ì_£g_lock
;

25 
uöt64_t
 
	gr_mask
[65];

27 
©_lock2
(
°d
::
©omic
<
uöt8_t
> &
lock
)

29 
uöt8_t
 
z
;

30 
	gåue
)

32 
	gz
 = 0;

33 i‡(
	glock
.
com∑ª_exch™ge_°r⁄g
(
z
,1))

38 
©_u∆ock2
(
°d
::
©omic
<
uöt8_t
> &
lock
)

40 
lock
 = 0;

44 
åy_©_lock2
(
°d
::
©omic
<
uöt8_t
> &
lock
)

46 
uöt8_t
 
z
=0;

47  
	glock
.
com∑ª_exch™ge_°r⁄g
(
z
,1);

50 
uöt64_t
 
MurmurHash64A_L8
 ( c⁄° * 
key
 )

52 c⁄° 
	gÀn
 = 8;

53 c⁄° 
uöt64_t
 
	g£ed
 = 5516;

56 c⁄° 
uöt64_t
 
	gm
 = 0xc6a4a7935bd1e995;

58 c⁄° 
	gr
 = 47;

60 
uöt64_t
 
	gh
 = 
£ed
 ^ (
Àn
 * 
m
);

62 c⁄° 
uöt64_t
 * 
	gd©a
 = (c⁄° uöt64_à*)
key
;

63 c⁄° 
uöt64_t
 * 
	gíd
 = 
d©a
 + (
Àn
/8);

65 
	gd©a
 !
íd
)

67 
uöt64_t
 
k
 = *
d©a
++;

69 
	gk
 *
m
;

70 
	gk
 ^
k
 >> 
r
;

71 
	gk
 *
m
;

73 
	gh
 ^
k
;

74 
	gh
 *
m
;

77 c⁄° * 
	gd©a2
 = (c⁄° *)
d©a
;

79 
	gÀn
 & 7)

81 7: 
h
 ^((
uöt64_t
Ë
d©a2
[6]) << 48;

82 6: 
h
 ^((
uöt64_t
Ë
d©a2
[5]) << 40;

83 5: 
h
 ^((
uöt64_t
Ë
d©a2
[4]) << 32;

84 4: 
h
 ^((
uöt64_t
Ë
d©a2
[3]) << 24;

85 3: 
h
 ^((
uöt64_t
Ë
d©a2
[2]) << 16;

86 2: 
h
 ^((
uöt64_t
Ë
d©a2
[1]) << 8;

87 1: 
h
 ^((
uöt64_t
Ë
d©a2
[0]);

88 
	gh
 *
m
;

91 
	gh
 ^
h
 >> 
r
;

92 
	gh
 *
m
;

93 
	gh
 ^
h
 >> 
r
;

95  
	gh
;

98 
uöt64_t
 
hf
(c⁄° *
key
)

111  
	g°d
::
_Hash_byãs
(
key
,8,5516);

115 
öv_£g
(
SEG
* 
£g
)

117 
	gi
;

120 
KVP
* 
	gkvp_p
;

122 
	gkvp_p
 = (
KVP
*)
£g
->
˛
;

134 
mem£t
(
£g
->
˛
,0xffffffff,
CL_PER_SEG
*
CL_SIZE
);

142 
SEG
* 
Æloc_£g
()

144 
SEG
* 
	g£g
;

146 
©_lock2
(
‰ì_£g_lock
);

147 i‡(
	g£g_‰ì_ödex
 =
£g_‰ì_mö
)

149 
ãmp
;

150 
	gãmp
 = 
PH
::
mö_£g_‰ì_˙t
();

151 i‡(
	gãmp
 > 
	g£g_‰ì_ödex
)

152 
	g£g_‰ì_mö
 = 
ãmp
;

154 i‡(
	g£g_‰ì_ödex
 < 
	g£g_‰ì_mö
)

157 
	g£g
 = 
‰ì_£g_queue
[
£g_‰ì_ödex
%
FREE_SEG_LEN
];

158 
	g£g_‰ì_ödex
++;

162 i‡(
posix_memÆign
((**)&
£g
,64,(
SEG
)) != 0)

163 
¥ötf
("posix_memalignÉrror2\n");

165 
©_u∆ock2
(
‰ì_£g_lock
);

168  
	g£g
;

171 
‰ì_£g
(
SEG
* 
£g
)

180 
©_lock2
(
‰ì_£g_lock
);

181 i‡(
	g£g_‰ì_ödex
+
	gFREE_SEG_LEN
 <
£g_‰ì_˙t
)

183 
¥ötf
("‰ì seg fuŒ %d %d\n",
£g_‰ì_ödex
,
£g_‰ì_˙t
);

184 
	g£g_‰ì_ödex
+
	gFREE_SEG_LEN
 <
£g_‰ì_˙t
);

186 
	g‰ì_£g_queue
[
£g_‰ì_˙t
%
FREE_SEG_LEN
] = 
£g
;

187 
	g£g_‰ì_˙t
++;

188 
©_u∆ock2
(
‰ì_£g_lock
);

190 
	gCCEH
::
CCEH
()

192 
poöt
 = 0;

193 
öô
(1);

195 
	gCCEH
::
CCEH
(
ö_dïth
)

197 
poöt
 = 1;

198 
öô
(
ö_dïth
);

200 
	gCCEH
::~
CCEH
()

202 
˛ón
();

205 
	gCCEH
::
öô
(
ö_dïth
)

208 
i
;

209 
	gdïth
 = 
ö_dïth
;

210 
	gdm
 = 
r_mask
[
dïth
];

211 
	g£g_˙t
 = 1 << 
dïth
;

215 i‡(
posix_memÆign
((**)&
£g_li°
,64,(
SEG
*Ë* 
£g_˙t
) != 0)

216 
¥ötf
("posix memalignÉrror0\n");

219 
	gi
=0;i<
	g£g_˙t
;i++)

224 
	g£g_li°
[
i
] = 
Æloc_£g
();

227 
öv_£g
(
£g_li°
[
i
]);

229 
©_u∆ock2
(
£g_li°
[
i
]->
lock
);

230 
	g£g_li°
[
i
]->
	gdïth
 = 
dïth
;

233 
	göv0_vÆue
.
	gnode_off£t
 = 0;

235 
	gdú_lock
 = 0;

236 
	g‰ì_£g_lock
 = 0;

239 #i‡
˘t


240 
	gbc
 = 
sc
 = 
˘t1
 = 
˘t3
 = 
˘t2
 = 0;

241 
	gföd_˙t
 = 
pic
 = 1;

245 
	gCCEH
::
˛ón
()

247 
i
;

248 
	gi
=
£g_˙t
-1;i>=0;i--)

250 i‡(
	gi
 + 1 <((
uöt64_t
)1 << 
£g_li°
[
i
]->
dïth
))

263 
‰ì
(
£g_li°
[
i
]);

266 
‰ì
(
£g_li°
);

268 #ifde‡
˘t


269 
¥ötf
("dïth %d s∂ô_˙à%d in£π %ld in£π_avg %ld s∂ô %ld câ3 %ld in£π_˙à%d b¯%d föd %ld föd_˙à%d föd_avg %ld \n",
dïth
,
sc
,
˘t1
,˘t1/
pic
,
˘t2
,
˘t3
,pic,
bc
,
˘t4
,
föd_˙t
,ctt4/find_cnt);

273 
VÆueE¡ry
 
	gCCEH
::
föd
(c⁄° 
uöt64_t
 &
key
)

283 #ifde‡
˘t


284 
föd_˙t
++;

285 
time•ec
 
	gts1
,
	gts2
;

286 
˛ock_gëtime
(
CLOCK_MONOTONIC
,&
ts1
);

287 
_mm_m„n˚
();

289 
	g¢
,
	g˙
,
	gi
;

290 
KVP
* 
	gkvp_p
;

291 
uöt64_t
 
	ghk
;

292 c⁄° 
	g˛_shi·
 = 64-
CL_BIT
;

293 
	gl
;

295 i‡(
	gkey
 =
INV0
)

296  
öv0_vÆue
;

300 
	ghk
 = 
hf
(&
key
);

305 
	g¢
 = 
hk
 & 
dm
;

308 
	g˙
 = 
hk
 >> 
˛_shi·
;

311 
	gkvp_p
 = (
KVP
*)
£g_li°
[
¢
]->
˛
;

312 
	gl
 = 
˙
*
KVP_PER_CL
;

318 
VÆueE¡ry
 
	gve
;

319 
	gve
.
	gnode_off£t
 = 0;

322 
	gi
=0;i<
KVP_PER_CL
 * 
	gLINEAR_MULTI
;i++)

325 
	gl
%=
CL_PER_SEG
*
KVP_PER_CL
;

327 i‡(
	gkvp_p
[
l
].
	gkey
 =
key
)

329 #ifde‡
˘t


330 
_mm_m„n˚
();

331 
˛ock_gëtime
(
CLOCK_MONOTONIC
,&
ts2
);

332 
	g˘t4
+=(
ts2
.
tv_£c
-
ts1
.tv_£c)*1000000000+ts2.
tv_n£c
-ts1.tv_nsec;

334 
	gve
 = 
kvp_p
[
l
].
vÆue
;

338 
	gl
++;

340  
	gve
;

343 
	gCCEH
::
ªmove
(c⁄° 
uöt64_t
 &
key
)

345 
¢
,
	g˙
,
	gi
;

347 
KVP
* 
	gkvp_p
;

348 
SEG
* 
	g£g
;

349 * 
	grv
;

350 
	gz
 = 0;

352 
	gl
;

355 i‡(
	gkey
 =
INV0
)

357 
öv0_vÆue
.
node_off£t
 = 0;

361 c⁄° 
uöt64_t
 
	ghk
 = 
hf
(&
key
);

363 
	gªåy
:

368 
¢
 = 
hk
 % ((
uöt64_t
)1 << 
dïth
);

370 
	g˙
 = 
hk
 >> (64-
CL_BIT
);

372 
	g£g
 = 
£g_li°
[
¢
];

376 
©_lock2
(
£g
->
lock
);

379 i‡(
	g¢
 !
hk
 % ((
uöt64_t
)1 << 
dïth
))

382 
©_u∆ock2
(
£g
->
lock
);

384 
	gªåy
;

388 
	gkvp_p
 = (
KVP
*)
£g_li°
[
¢
]->
˛
;

389 
	gl
 = 
˙
*
KVP_PER_CL
;

391 
	gi
=0;i<
KVP_PER_CL
 * 
	gLINEAR_MULTI
;i++)

393 
	gl
%=
KVP_PER_CL
*
CL_PER_SEG
;

395 i‡(
	gkvp_p
[
l
].
	gkey
 =
key
)

397 
kvp_p
[
l
].
vÆue
.
node_off£t
 = 0;

401 
©_u∆ock2
(
£g
->
lock
);

404 
	gl
++;

408 
©_u∆ock2
(
£g
->
lock
);

416 
£g_gc
()

418 
©_lock2
(
‰ì_£g_lock
);

419 
SEG
* 
	g£g
;

420 
	g£g_‰ì_mö
 = 
PH
::
mö_£g_‰ì_˙t
();

421 ;
	g£g_‰ì_ödex
 < 
	g£g_‰ì_mö
;seg_free_index++)

430 
	g£g
 = 
‰ì_£g_queue
[
£g_‰ì_ödex
%
FREE_SEG_LEN
];

431 
‰ì
(
£g
);

433 
©_u∆ock2
(
‰ì_£g_lock
);

437 
	gCCEH
::
dú_doubÀ
()

439 
SEG
** 
√w_li°
;

440 
SEG
** 
	gﬁd_li°
;

441 
	gﬁd_li°
 = 
£g_li°
;

442 
	g√w_li°
 = (
SEG
**)
mÆloc
((SEG*Ë* 
£g_˙t
*2);

445 
	gi
;

446 
	gi
=0;i<
	g£g_˙t
;i++)

447 
	g√w_li°
[
i
] = 
√w_li°
[
£g_˙t
+i] = 
ﬁd_li°
[i];

451 
	g£g_li°
 = 
√w_li°
;

452 
	g£g_˙t
*=2;

453 ++
	gdïth
;

454 
	gdm
 = 
r_mask
[
dïth
];

455 
_mm_s„n˚
();

456 
‰ì
(
ﬁd_li°
);

460 
¥öt_£g
(
SEG
* 
£g
,
¢
)

462 
	gi
,
	gj
,
	gk
;

463 
uöt64_t
 
	gmask
;

464 
¥ötf
("£g %d dïth %d\n",
¢
,
£g
->
dïth
);

465 
	gi
=0;i<
	gCL_PER_SEG
;i++)

467 
¥ötf
("-------------------------------\n");

468 
	gj
=0;j<
	gKVP_PER_CL
;j++)

470 
	gmask
 = (
uöt64_t
)1 << 63;

471 
	gk
=0;k<64;k++)

473 i‡((
	guöt64_t
)
	g£g
->
	g˛
[
i
].
	gkvp
[
j
].
	gkey
 & 
	gmask
)

474 
¥ötf
("1");

476 
¥ötf
("0");

477 
	gmask
 /=2;

479 
¥ötf
("\n");

482 
¥ötf
("--------------------------------------\n");

483 
sˇnf
("%d",&
k
);

486 
	gCCEH
::
•lô
(
¢
)

488 
SEG
* 
£g
;

489 
	gi
;

491 
uöt64_t
 
	gmask
;

492 
KVP
* 
	gkvp_p
;

493 
KVP
* 
	g√w_kvp_p1
;

494 
KVP
* 
	g√w_kvp_p2
;

496 
	g£g
 = 
£g_li°
[
¢
];

499 i‡(
	g£g
->
	gdïth
 =
dïth
)

501 
lock
;

504 
	glock
 = 
dú_lock
;

505 i‡(
	glock
 & 
	gSPLIT_MASK
)

507 i‡(
	gdú_lock
.
com∑ª_exch™ge_°r⁄g
(
lock
,lock | 
SPLIT_MASK
))

510 
	gdú_lock
 !
SPLIT_MASK
+1);

517 
dú_doubÀ
();

521 
	gdú_lock
-=
SPLIT_MASK
;

533 
	gkvp_p
 = (
KVP
*)
£g
->
˛
;

535 
SEG
* 
	g√w_£g1
;

536 
SEG
* 
	g√w_£g2
;

538 
	g√w_£g1
 = 
Æloc_£g
();

539 
	g√w_£g2
 = 
Æloc_£g
();

543 
öv_£g
(
√w_£g1
);

544 
öv_£g
(
√w_£g2
);

547 
©_u∆ock2
(
√w_£g1
->
lock
);

548 
	g√w_£g1
->
	gdïth
 = 
£g
->
dïth
+1;

551 
©_u∆ock2
(
√w_£g2
->
lock
);

552 
	g√w_£g2
->
	gdïth
 = 
£g
->
dïth
+1;

554 
	g√w_kvp_p1
 = (
KVP
*)
√w_£g1
->
˛
;

555 
	g√w_kvp_p2
 = (
KVP
*)
√w_£g2
->
˛
;

558 
	gmask
 = (
uöt64_t
)1 << 
£g
->
dïth
;

560 
	gj
,
	gl
,
	g∆1
,
	g∆2
;

561 
	g∆l1
[
CL_PER_SEG
],
	g∆l2
[CL_PER_SEG],
	gkc
;

562 
uöt64_t
 
	ghk
;

564 
	gi
=0;i<
	gCL_PER_SEG
;i++)

565 
	g∆l1
[
i
] = 
∆l2
[i] = 
KVP_PER_CL
*i;

566 
	gi
=0;i<
	gCL_PER_SEG
;i++)

568 
	g∆1
 = 
i
*
KVP_PER_CL
;

569 
	g∆2
 = 
i
*
KVP_PER_CL
;

570 
	gl
 = 
i
*
KVP_PER_CL
;

572 
	gj
=0;j<
	gKVP_PER_CL
;j++)

574 i‡((
	guöt64_t
)
	gkvp_p
[
l
].
	gkey
 =
INV0
)

579 
l
++;

583 i‡(
	gkvp_p
[
l
].
	gvÆue
.
	gnode_off£t
 == 0)

585 
l
++;

589 
	ghk
 = 
hf
(&
kvp_p
[
l
].
key
);

590 
	gkc
 = 
hk
 >> (64-
CL_BIT
);

591 i‡(
	ghk
 & 
	gmask
)

593 (
	guöt64_t
)
	g√w_kvp_p2
[
∆l2
[
kc
]].
	gkey
 !
INV0
)

595 
∆l2
[
kc
]++;

596 
	g∆l2
[
kc
]%=
KVP_PER_CL
*
CL_PER_SEG
;

598 
	g√w_kvp_p2
[
∆l2
[
kc
]] = 
kvp_p
[
l
];

599 
	g∆l2
[
kc
]++;

600 
	g∆l2
[
kc
]%=
KVP_PER_CL
*
CL_PER_SEG
;

605 (
	guöt64_t
)
	g√w_kvp_p1
[
∆l1
[
kc
]].
	gkey
 !
INV0
)

607 
∆l1
[
kc
]++;

608 
	g∆l1
[
kc
]%=
KVP_PER_CL
*
CL_PER_SEG
;

610 
	g√w_kvp_p1
[
∆l1
[
kc
]] = 
kvp_p
[
l
];

611 
	g∆l1
[
kc
]++;

612 
	g∆l1
[
kc
]%=
KVP_PER_CL
*
CL_PER_SEG
;

623 
	gl
++;

627 
_mm_s„n˚
();

634 
	gl
 = 1 << (
£g
->
dïth
+1);

637 
	gi
=
¢
;i<
	g£g_˙t
;i+=
l
)

638 
£g_li°
[
i
] = 
√w_£g1
;

643 
	gi
=
¢
 + (1 << 
£g
->
dïth
);i<
	g£g_˙t
;i+=
l
)

644 
£g_li°
[
i
] = 
√w_£g2
;

679 
VÆueE¡ry
* 
	gCCEH
::
ö£π
(c⁄° 
uöt64_t
 &
key
,VÆueE¡ry &
vÆue
,* 
u∆ock
)

689 #ifde‡
˘t


690 
	gpic
++;

691 
time•ec
 
	gts1
,
	gts2
,
	gts3
,
	gts4
;

692 
˛ock_gëtime
(
CLOCK_MONOTONIC
,&
ts3
);

693 
_mm_m„n˚
();

695 
	g¢
,
	g˙
,
	gi
;

696 
uöt64_t
 
	ghk
;

697 c⁄° 
	g˛_shi·
 = 64-
CL_BIT
;

698 
	gl
;

699 
SEG
* 
	g£g
;

700 
KVP
* 
	gkvp_p
;

702 i‡(
	gkey
 =
INV0
)

704 
öv0_vÆue
 = 
vÆue
;

705 i‡(
	gu∆ock
)

706 *(**)
	gu∆ock
 = 
NULL
;

707  &
	göv0_vÆue
;

710 
	glock
 = 
dú_lock
;

711 i‡(
	glock
 & 
	gSPLIT_MASK
)

715 
	gdú_lock
++;

718 
	ghk
 = 
hf
(&
key
);

731 
	g¢
 = 
hk
 & 
dm
;

736 
	g˙
 = 
hk
 >> 
˛_shi·
;

744 
	g£g
 = 
£g_li°
[
¢
];

754 i‡(
åy_©_lock2
(
£g
->
lock
) == 0)

756 
dú_lock
--;

762 i‡(
	g£g
 !
£g_li°
[
¢
])

765 
¥ötf
("lockÑetry\n");

767 
©_u∆ock2
(
£g
->
lock
);

771 
	gdú_lock
--;

775 i‡(
ö£π2
(
key
,
vÆue
,
¢
,
˙
))

778 
©_u∆ock2
(
£g
->
lock
);

780 #ifde‡
˘t


781 
˛ock_gëtime
(
CLOCK_MONOTONIC
,&
ts4
);

782 
	g˘t1
+=(
ts4
.
tv_£c
-
ts3
.tv_£c)*1000000000+ts4.
tv_n£c
-ts3.tv_nsec;

789  
	gkvp_p
 = (
KVP
*)
£g
->
˛
;

790 
	gl
 = 
˙
*
KVP_PER_CL
;

804 #ifde‡
˘t


809 i‡(
	gpoöt
)

811 
	göv0_vÆue
.
	gnode_off£t
 = 0;

812  &
	göv0_vÆue
;

815 
	gi
=0;i<
KVP_PER_CL
 * 
	gLINEAR_MULTI
;i++)

817 #ifde‡
˘t


820 
	gl
%=
KVP_PER_CL
*
CL_PER_SEG
;

824 i‡(
	gkvp_p
[
l
].
	gkey
 =
INV0
)

826 
kvp_p
[
l
].
vÆue
 = value;

827 
_mm_s„n˚
();

828 
	gkvp_p
[
l
].
	gkey
 = 
key
;

832 i‡(
	gu∆ock
)

833 *(**)
	gu∆ock
 = 
£g
;

836 
©_u∆ock2
(
£g
->
lock
);

837 
	gdú_lock
--;

839 #ifde‡
˘t


840 
_mm_m„n˚
();

841 
˛ock_gëtime
(
CLOCK_MONOTONIC
,&
ts4
);

842 
	g˘t1
+=(
ts4
.
tv_£c
-
ts3
.tv_£c)*1000000000+ts4.
tv_n£c
-ts3.tv_nsec;

845  (
	gVÆueE¡ry
*)&
	gkvp_p
[
l
].
	gvÆue
;

847 i‡(
	gkvp_p
[
l
].
	gkey
 =
key
)

849 i‡(
u∆ock
)

850 *(**)
u∆ock
 = 
£g
;

853 
	gkvp_p
[
l
].
	gvÆue
 = 
vÆue
;

854 
_mm_s„n˚
();

855 
©_u∆ock2
(
£g
->
lock
);

856 
	gdú_lock
--;

861 #ifde‡
˘t


862 
_mm_m„n˚
();

863 
˛ock_gëtime
(
CLOCK_MONOTONIC
,&
ts4
);

864 
	g˘t1
+=(
ts4
.
tv_£c
-
ts3
.tv_£c)*1000000000+ts4.
tv_n£c
-ts3.tv_nsec;

868  (
	gVÆueE¡ry
*)&
	gkvp_p
[
l
].
	gvÆue
;

871 
	gl
++;

875 i‡(
	gi
 < 
KVP_PER_CL
*
	gLINEAR_MULTI
)

877 i‡(
	gkvp_p
[
l
].
	gkey
 =
INV0
)

879 
kvp_p
[
l
].
vÆue
 = value;

880 
_mm_s„n˚
();

881 
	gkvp_p
[
l
].
	gkey
 = 
key
;

885 i‡(
	gu∆ock
)

886 *(**)
	gu∆ock
 = 
£g
;

888 
©_u∆ock2
(
£g
->
lock
);

889 #ifde‡
˘t


890 
_mm_m„n˚
();

891 
˛ock_gëtime
(
CLOCK_MONOTONIC
,&
ts4
);

892 
	g˘t1
+=(
ts4
.
tv_£c
-
ts3
.tv_£c)*1000000000+ts4.
tv_n£c
-ts3.tv_nsec;

895  &
	gkvp_p
[
l
].
	gvÆue
;

897 i‡(
	gkvp_p
[
l
].
	gkey
 =
key
)

899 i‡(
u∆ock
)

900 *(**)
u∆ock
 = 
£g
;

903 
	gkvp_p
[
l
].
	gvÆue
 = 
vÆue
;

904 
_mm_s„n˚
();

905 
©_u∆ock2
(
£g
->
lock
);

910 #ifde‡
˘t


911 
_mm_m„n˚
();

912 
˛ock_gëtime
(
CLOCK_MONOTONIC
,&
ts4
);

913 
	g˘t1
+=(
ts4
.
tv_£c
-
ts3
.tv_£c)*1000000000+ts4.
tv_n£c
-ts3.tv_nsec;

916  &
	gkvp_p
[
l
].
	gvÆue
;

922 #ifde‡
˘t


923 
_mm_m„n˚
();

924 
	gsc
++;

925 
˛ock_gëtime
(
CLOCK_MONOTONIC
,&
ts1
);

927 
•lô
(
¢
 % ((
uöt64_t
)1 << 
£g
->
dïth
));

928 #ifde‡
˘t


929 
_mm_m„n˚
();

930 
˛ock_gëtime
(
CLOCK_MONOTONIC
,&
ts2
);

931 
	g˘t2
+=(
ts2
.
tv_£c
-
ts1
.tv_£c)*1000000000+ts2.
tv_n£c
-ts1.tv_nsec;

934 
©_u∆ock2
(
£g
->
lock
);

939 
‰ì_£g
(
£g
);

943 
	gdú_lock
--;

949 
	gCCEH
::
u∆ock_íåy2
(* 
u∆ock
)

962 i‡(
u∆ock
)

964 
©_u∆ock2
(((
SEG
*)
u∆ock
)->
lock
);

965 
	gdú_lock
--;

969 
öô_c˚h
()

971 
	g£g_‰ì_˙t
 = 
£g_‰ì_mö
 = 
£g_‰ì_ödex
 = 0;

972 
¥ötf
("sizeo‡KVP %ld\n",(
KVP
));

973 
¥ötf
("sizeo‡CL %ld\n",(
CL
));

974 
	gi
;

975 
	gr_mask
[0] = 0;

976 
	gi
=1;i<=64;i++)

977 
	gr_mask
[
i
] = 
r_mask
[i-1]*2+1;

980 
˛ón_c˚h
()

982 
£g_gc
();

	@ph/cceh.h

4 
	~<©omic
>

7 
	~"globÆ.h
"

10 
	#INV0
 0xffffffffffffffff

	)

13 
	#KVP_PER_CL
 4

14 
	#CL_SIZE
 64

	)

17 
	#CL_BIT
 4

	)

18 
	#CL_PER_SEG
 (2 << 
CL_BIT
)

	)

19 
	#LINEAR_MULTI
 4

	)

21 
	#SPLIT_MASK
 (1 << 30)

	)

25 
«me•a˚
 
	gPH


28 c⁄° 
uöt64_t
 
	g£g_mask
 = ~((uöt64_t)
CL_SIZE
*
CL_PER_SEG
-1);

30 
	sKVP


35 
uöt64_t
 
	gkey
;

37 
VÆueE¡ry
 
	gvÆue
;

40 
	sCL


42 
KVP
 
	gkvp
[
KVP_PER_CL
];

45 
	sSEG


47 
CL
 
	g˛
[
CL_PER_SEG
];

49 
	g°d
::
©omic
<
uöt8_t
> 
lock
;

52 
	gdïth
;

56 ˛as†
	cCCEH


58 
	gpublic
:

59 
CCEH
();

60 
CCEH
(
ö_dïth
);

61 ~
CCEH
();

62 vﬁ©ûê
	gdïth
;

63 vﬁ©ûê
	g£g_˙t
;

66 
	g°d
::
©omic
<
SEG
**> 
£g_li°
;

68 
	g°d
::
©omic
<> 
dú_lock
;

71  
VÆueE¡ry
 
	göv0_vÆue
;

73 
dú_doubÀ
();

74 
•lô
(
¢
);

76 
öô
(
ö_dïth
);

77 
˛ón
();

80 
	gpublic
:

83 
VÆueE¡ry
* 
ö£π
(c⁄° 
uöt64_t
 &
key
,VÆueE¡ry &
ve
,* 
u∆ock
 = 0);

85 
VÆueE¡ry
 
föd
(c⁄° 
uöt64_t
 &
key
);

86 
ªmove
(c⁄° 
uöt64_t
 &
key
);

88 
u∆ock_íåy2
(* 
u∆ock
);

90 
uöt64_t
 
	gdm
;

91 
	gpoöt
;

93 
	gsc
,
	gpic
,
	gbc
,
	gföd_˙t
;

94 
uöt64_t
 
	g˘t1
,
	g˘t2
,
	g˘t3
,
	g˘t4
;

98 
öô_c˚h
();

99 
˛ón_c˚h
();

	@ph/data.c

1 
	~<libpmem.h
>

2 
	~<queue
>

3 
	~<©omic
>

5 
	~<°dio.h
>

6 
	~<°rög.h
>

7 
	~<°dlib.h
>

8 
	~<x86öåö.h
>

10 
	~"d©a.h
"

11 
	~"hash.h
"

13 
	~"quîy.h
"

14 
	~"thªad.h
"

16 
	~<muãx
>

25 
	#¥öt
 0

	)

30 
«me•a˚
 
	gPH


33 * 
	gpmem_addr
;

34 
	gis_pmem
;

35 
size_t
 
	gpmem_Àn
;

37 
Node
* 
	gnode_d©a_¨øy
;

39 * 
	gmëa_addr
;

40 
uöt64_t
 
	gmëa_size
;

41  
uöt64_t
 
	gmëa_u£d
;

42 
Node_mëa
* 
	gmëa_¨øy
;

48 
	g°d
::
©omic
 <
uöt8_t
> 
Æloc_lock
;

50 vﬁ©ûê
	g‰ì_˙t
;

51 vﬁ©ûê
	g‰ì_mö
;

52 vﬁ©ûê
	g‰ì_ödex
;

54 
	#FREE_QUEUE_LEN
 10000

	)

55 
	g‰ì_queue
[
FREE_QUEUE_LEN
];

57 
uöt64_t
 
	gâ1
,
	gâ2
,
	gâ3
,
	gâ4
,
	gâ5
;

58 
uöt64_t
 
	gqâ1
,
	gqâ2
,
	gqâ3
,
	gqâ4
,
	gqâ5
,
	gqâ6
,
	gqâ7
,
	gqâ8
;

63 
©_lock
(
°d
::
©omic
<
uöt8_t
> &
lock
)

65 
uöt8_t
 
z
;

66 
	gåue
)

68 
	gz
 = 0;

69 i‡(
	glock
.
com∑ª_exch™ge_°r⁄g
(
z
,1))

73 
©_u∆ock
(
°d
::
©omic
<
uöt8_t
> &
lock
)

76 
lock
 = 0;

79 
åy_©_lock
(
°d
::
©omic
<
uöt8_t
> &
lock
)

83 
uöt8_t
 
z
 = 0;

93  
	glock
.
com∑ª_exch™ge_°r⁄g
(
z
,1);

97 
ˇlc_off£t
(
Node_mëa
* 
node
)

99  ((*)
	gnode
-
	gmëa_addr
)/(
	gNode_mëa
);

101 
Node_mëa
* 
off£t_to_node
(
off£t
)

103  &
	gmëa_¨øy
[
off£t
];

106 
Node
* 
off£t_to_node_d©a
(
off£t
)

108  &
	gnode_d©a_¨øy
[
off£t
];

113 
poöt_to_off£t
(* 
kv_p
)

115  (
	gkv_p
 - 
	gmëa_addr
)/(
	gNode_mëa
);

118 
d©a_poöt_to_off£t
(* 
kv_p
)

120  (
	gkv_p
 - 
	gpmem_addr
)/(
	gNode
);

123 
ˇlc_off£t_d©a
(* 
node
)

125  ((*)
	gnode
-
	gpmem_addr
)/(
	gNode
);

130 
Êush_mëa
(
off£t
)

137 
pmem_mem˝y
((
Node
*)(
pmem_addr
 + 
off£t
*(Node)),(
Node_mëa
*)(
mëa_addr
 + off£t*(Node_mëa)),(),
PMEM_F_MEM_NONTEMPORAL
);

146 
Node_mëa
* 
Æloc_node
()

148 #ifde‡
dâ


149 
time•ec
 
	gts1
,
	gts2
;

150 
˛ock_gëtime
(
CLOCK_MONOTONIC
,&
ts1
);

151 
_mm_m„n˚
();

153 
Node_mëa
* 
	gnode
;

156 
©_lock
(
Æloc_lock
);

158 i‡(
	g‰ì_ödex
 =
‰ì_mö
)

160 
ãmp
;

161 
	gãmp
 = 
mö_‰ì_˙t
();

162 i‡(
	gãmp
 > 
	g‰ì_ödex
)

163 
	g‰ì_mö
 = 
ãmp
;

167 i‡(
	g‰ì_ödex
 < 
	g‰ì_mö
)

172 
	gnode
 = 
off£t_to_node
(
‰ì_queue
[
‰ì_ödex
%
FREE_QUEUE_LEN
]);

176 ++
	g‰ì_ödex
;

178 
©_u∆ock
(
Æloc_lock
);

180 i‡(
	g¥öt
)

181 
¥ötf
("Ælo¯nodêª %p\n",
node
);

182 #ifde‡
dâ


183 
˛ock_gëtime
(
CLOCK_MONOTONIC
,&
ts2
);

184 
_mm_m„n˚
();

185 
	gâ5
 +(
ts2
.
tv_£c
-
ts1
.tv_£c)*1000000000+ts2.
tv_n£c
-ts1.tv_nsec;

187  
	gnode
;

192 i‡(
	gmëa_size
 < 
	gmëa_u£d
 + (
	gNode_mëa
))

194 
¥ötf
("error!!!Çeed more memory\n");

195 
¥ötf
("ödex %d mö %d c¡ %d\n",
‰ì_ödex
,
‰ì_mö
,
‰ì_˙t
);

196 
	gt
;

197 
sˇnf
("%d",&
t
);

200 
	gnode
 = (
Node_mëa
*)(
mëa_addr
 + 
mëa_u£d
);

202 
	gmëa_u£d
 +(
Node_mëa
);

204 
©_u∆ock
(
Æloc_lock
);

205 i‡(
	g¥öt
)

206 
¥ötf
("Ælo¯nodê%p\n",
node
);

210 
	gnode
->
	g°©e
 = 0;

211 #ifde‡
dâ


212 
˛ock_gëtime
(
CLOCK_MONOTONIC
,&
ts2
);

213 
_mm_m„n˚
();

214 
	gâ5
 +(
ts2
.
tv_£c
-
ts1
.tv_£c)*1000000000+ts2.
tv_n£c
-ts1.tv_nsec;

216  
	gnode
;

218 
‰ì_node
(
Node_mëa
* 
node
)

222 
	gnode
->
	g°©e
 = 2;

229 i‡(
	g‰ì_ödex
 + 
	gFREE_QUEUE_LEN
 < 
	g‰ì_˙t
)

231 
¥ötf
("queuêfuŒ %d %d\n",
‰ì_ödex
,
‰ì_˙t
);

232 
¥öt_thªad_öfo
();

233 
	gt
;

234 
sˇnf
("%d",&
t
);

237 
©_lock
(
Æloc_lock
);

240 
	g‰ì_queue
[
‰ì_˙t
%
FREE_QUEUE_LEN
] = 
ˇlc_off£t
(
node
);

242 ++
	g‰ì_˙t
;

245 
©_u∆ock
(
Æloc_lock
);

249 i‡(
	g¥öt
)

250 
¥ötf
("‰ìÇodê%p\n",
node
);

254 
öô_d©a
()

258 i‡(
	gUSE_DRAM
)

259 
	gpmem_addr
=(*)
mm≠
(
NULL
,
pmem_size
,
PROT_READ
|
PROT_WRITE
,
MAP_PRIVATE
|
MAP_ANONYMOUS
 ,-1,0);

262 
	gpmem_addr
 = (*)
pmem_m≠_fûe
(
pmem_fûe
,
pmem_size
,
PMEM_FILE_CREATE
,0777,&
pmem_Àn
,&
is_pmem
);

263 
	gnode_d©a_¨øy
 = (
Node
*)
pmem_addr
;

265 
	gmëa_size
 = 
pmem_size
/(
Node
)*(
Node_mëa
);

266 
	gmëa_addr
 = (*)
mm≠
(
NULL
,
mëa_size
,
PROT_READ
|
PROT_WRITE
,
MAP_PRIVATE
|
MAP_ANONYMOUS
|
MAP_POPULATE
,-1,0);

267 
	gmëa_¨øy
 = (
Node_mëa
*)
mëa_addr
;

269 i‡(
	gpmem_addr
 =
NULL
)

271 
¥ötf
("pmemÉrror\n");

276 
	gmëa_u£d
 = 0;

281 
	g‰ì_˙t
 = 
‰ì_mö
 = 
‰ì_ödex
 = 0;

283 
uöt64_t
 
	gzîo
=0;

285 
Node_mëa
* 
	ghód_node
;

286 
Node_mëa
* 
	gèû_node
;

288 
upd©e_‰ì_˙t
();

291 
Æloc_node
();

292 
	ghód_node
 = 
Æloc_node
();

293 
	gèû_node
 = 
Æloc_node
();

295 
Node_mëa
* 
	gnode
 = 
Æloc_node
();

296 
	gnode
->
	g°©e
 = 0;

297 
	gnode
->
	gsize
 = 0;

298 
	gnode
->
	gic
 = 0;

300 
	gnode
->
	gsˇn_li°
 = 
NULL
;

301 
	gnode
->
	g¥ev_off£t
 = 
HEAD_OFFSET
;

302 
	gnode
->
	g√xt_off£t
 = 
TAIL_OFFSET
;

304 i‡(
	g¥öt
)

305 
¥ötf
("nodê0 %p\n",
node
);

307 
	ghód_node
->
	g√xt_off£t
 = 3;

308 
	gèû_node
->
	g¥ev_off£t
 = 3;

310 
	ghód_node
->
	g°©e
 = 0;

311 
	ghód_node
->
	gsˇn_li°
 = 
NULL
;

313 
	gèû_node
->
	g°©e
 = 0;

314 
	gèû_node
->
	gsˇn_li°
 = 
NULL
;

318 
Êush_mëa
(
HEAD_OFFSET
);

319 
Êush_mëa
(
TAIL_OFFSET
);

320 
_mm_s„n˚
();

325 
ö£π_ønge_íåy
((*)(&
zîo
),0,
ˇlc_off£t
(
node
));

328 
exô_thªad
();

337 i‡(
	gUSE_DRAM
)

338 
¥ötf
("USE_DRAM\n");

340 
¥ötf
("USE_PM\n");

341 
¥ötf
("sizêo‡nodê%ld\n",(
Node
));

342 
¥ötf
("sizêo‡node_më®%ld\n",(
Node_mëa
));

344 
	gâ1
 = 0;

345 
	gâ2
 = 0;

346 
	gâ3
 = 0;

347 
	gâ4
 = 
â5
 = 0;

349 
	gqâ1
 = 
qâ2
 = 
qâ3
 = 
qâ4
 = 
qâ5
 = 
qâ6
 = 
qâ7
 = 
qâ8
 = 0;

354 
˛ón_d©a
()

363 i‡(
	gUSE_DRAM
)

364 
munm≠
(
pmem_addr
,
pmem_size
);

366 
pmem_unm≠
(
pmem_addr
,
pmem_size
);

367 
munm≠
(
mëa_addr
,
mëa_size
);

372 #ifde‡
dâ


373 
¥ötf
("data\n");

374 
¥ötf
("ö£π %ld %ld\n",
â1
/1000000000,tt1%1000000000);

375 
¥ötf
("•lô %ld %ld\n",
â2
/1000000000,tt2%1000000000);

376 
¥ötf
("com∑˘ %ld %ld\n",
â3
/1000000000,tt3%1000000000);

377 
¥ötf
("check_sizê%ld %ld\n",
â4
/1000000000,tt4%1000000000);

378 
¥ötf
("Ælo¯nodê%ld %ld\n",
â5
/1000000000,tt5%1000000000);

381 
¥ötf
("u£d %ld sizê%ld\n",(
uöt64_t
)
mëa_u£d
/(
Node_mëa
),(uöt64_t)mëa_u£d/(Node_mëa)*(
Node
));

382 
¥ötf
("ödex %d mö %d c¡ %d\n",
‰ì_ödex
,
‰ì_mö
,
‰ì_˙t
);

385 #ifde‡
qâ


387 
¥ötf
("query\n");

388 
¥ötf
("ö£π quîy %ld %ld\n",
qâ1
/1000000000,qtt1%1000000000);

389 
¥ötf
("ö£π index %ld %ld\n",
qâ2
/1000000000,qtt2%1000000000);

390 
¥ötf
("ö£π d©®%ld %ld\n",
qâ3
/1000000000,qtt3%1000000000);

391 
¥ötf
("ö£π kv %ld %ld\n",
qâ4
/1000000000,qtt4%1000000000);

392 
¥ötf
("•lô kv %ld %ld\n",
qâ5
/1000000000,qtt5%1000000000);

393 
¥ötf
("\n");

394 
¥ötf
("looku∞quîy %ld %ld\n",
qâ8
/1000000000,qtt8%1000000000);

395 
¥ötf
("looku∞ödex %ld %ld\n",
qâ6
/1000000000,qtt6%1000000000);

396 
¥ötf
("looku∞d©®%ld %ld\n",
qâ7
/1000000000,qtt7%1000000000);

462 
öc_ªf
(
Node_mëa
* 
node
)

476  
åy_©_lock
(
node
->
°©e
);

502 
dec_ªf
(
Node_mëa
* 
node
)

513 
©_u∆ock
(
node
->
°©e
);

515 i‡(
	g¥öt
)

516 
¥ötf
("dec_ref\n");

527 
	gnode
->
	gªf
--;

540 
öc_ªf
(
off£t
)

542  
öc_ªf
(
off£t_to_node
(
off£t
));

544 
dec_ªf
(
off£t
)

548  
dec_ªf
(
off£t_to_node
(
off£t
));

551 
åy_h¨d_lock
(
Node_mëa
* 
node
)

560  
åy_©_lock
(
node
->
°©e
);

562 
h¨d_u∆ock
(
Node_mëa
* 
node
)

565 
©_u∆ock
(
node
->
°©e
);

568 
åy_h¨d_lock
(
off£t
)

570  
åy_h¨d_lock
(
off£t_to_node
(
off£t
));

573 
h¨d_u∆ock
(
off£t
)

575 
h¨d_u∆ock
(
off£t_to_node
(
off£t
));

578 
so·_lock
(
Node_mëa
* 
node
)

583 
so·_lock
(
off£t
)

585 
so·_lock
(
off£t_to_node
(
off£t
));

588 
¥öt_kv
(* 
kv_p
)

590 
	gi
,
	gvÆue_Àn
;

591 * 
	gv_p
;

592 
¥ötf
("key ");

593 
	gi
=0;i<8;i++)

594 
¥ötf
("[%d]",()(
kv_p
[
i
]));

595 
	gvÆue_Àn
 = *((
uöt16_t
*)(
kv_p
+
key_size
));

596 i‡(
	gvÆue_Àn
 & (1 << 15))

598 
¥ötf
(" invalidated\n");

601 
¥ötf
(" vÆuêÀ¿%d ",
vÆue_Àn
);

602 
	gv_p
 = 
kv_p
 + 
key_size
 + 
Àn_size
;

603 
	gi
=0;i<
	gvÆue_Àn
;i++)

604 
¥ötf
("[%d]",()(
v_p
[
i
]));

605 
¥ötf
("\n");

608 
¥öt_node
(
Node
* 
node
)

610 
	gcur
=0,
	gvÆue_Àn
;

611 
¥ötf
("nodêsizê%d\n",
node
->
size
);

612 
	gcur
 < 
	gnode
->
	gsize
)

614 
¥öt_kv
(&
node
->
buf„r
[
cur
]);

615 
	gvÆue_Àn
 = *((
uöt16_t
*)(
node
->
buf„r
+
cur
+
key_size
));

616 i‡((
	gvÆue_Àn
 & (1 <<15)) != 0)

617 
vÆue_Àn
-= (1<<15);

618 
	gcur
+=
vÆue_Àn
+
key_size
+
Àn_size
;

631 
dñëe_kv
(* 
kv_p
)

633 i‡(
	gUSE_DRAM
)

634 *((
	guöt16_t
*)(
	gkv_p
 ))|= (1<<15);

637 
uöt16_t
 
	gvl16
;

638 
	gvl16
 = *((
uöt16_t
*)(
kv_p
 )) | (1<<15);

639 
pmem_mem˝y
(
kv_p
 ,&
vl16
,(
uöt16_t
),
PMEM_F_MEM_NONTEMPORAL
);

640 
_mm_s„n˚
();

646 
check_size
(
off£t
,
vÆue_Àngth
)

648 #ifde‡
dâ


649 
time•ec
 
	gts1
,
	gts2
;

650 
˛ock_gëtime
(
CLOCK_MONOTONIC
,&
ts1
);

651 
_mm_m„n˚
();

654 i‡(
	g¥öt
)

655 
¥ötf
("check_size\n");

657 
Node_mëa
* 
	gnode
 = 
off£t_to_node
(
off£t
);

673 c⁄° 
	ges
 = 
key_size
 + 
Àn_size
 + 
vÆue_Àngth
;

674 c⁄° 
	gns
 = 
node
->
size
;

675 i‡(
	gns
 + 
	ges
 > 
	gNODE_BUFFER
)

679 #ifde‡
dâ


680 
_mm_m„n˚
();

681 
˛ock_gëtime
(
CLOCK_MONOTONIC
,&
ts2
);

682 
	gâ4
 +(
ts2
.
tv_£c
-
ts1
.tv_£c)*1000000000+ts2.
tv_n£c
-ts1.tv_nsec;

689 
	gnode
->
	gsize
+
es
;

711 i‡(
	g¥öt
)

712 
¥ötf
("incÑef - insert\n");

713 #ifde‡
dâ


714 
_mm_m„n˚
();

715 
˛ock_gëtime
(
CLOCK_MONOTONIC
,&
ts2
);

716 
	gâ4
 +(
ts2
.
tv_£c
-
ts1
.tv_£c)*1000000000+ts2.
tv_n£c
-ts1.tv_nsec;

719  
	gns
;

723 * 
ö£π_kv
(
off£t
,* 
key
,* 
vÆue
,
vÆue_Àngth
,
ﬁd_size
)

725 #ifde‡
dâ


726 
time•ec
 
	gts1
,
	gts2
;

727 
˛ock_gëtime
(
CLOCK_MONOTONIC
,&
ts1
);

728 
_mm_m„n˚
();

731 i‡(
	g¥öt
)

732 
¥ötf
("ö£π kv off£à%u\n",
off£t
);

736 
uöt16_t
 
	gvl16
 = 
vÆue_size
;

741 * c⁄° 
	gbuf„r
 = 
off£t_to_node_d©a
(
off£t
)->
buf„r
;

753 i‡(!
	gUSE_DRAM
)

766 
mem˝y
(
buf„r
+
ﬁd_size
+
Àn_size
,
key
,
key_size
);

768 
mem˝y
(
buf„r
+
ﬁd_size
+
key_size
+
Àn_size
,
vÆue
,
vÆue_Àngth
);

770 
pmem_≥rsi°
(
buf„r
+
ﬁd_size
+
Àn_size
,
key_size
+
vÆue_Àngth
);

776 
_mm_s„n˚
();

778 
pmem_mem˝y
(
buf„r
+
ﬁd_size
,&
vl16
,
Àn_size
,
PMEM_F_MEM_NONTEMPORAL
);

783 
_mm_s„n˚
();

787 
mem˝y
(
node_d©a
->
buf„r
+
√w_size
,&
vl16
,
Àn_size
);

788 
	g√w_size
+=
Àn_size
;

789 
mem˝y
(
node_d©a
->
buf„r
+
√w_size
,
key
,
key_size
);

790 
	g√w_size
+=
key_size
;

791 
mem˝y
(
node_d©a
->
buf„r
+
√w_size
,
vÆue
,
vÆue_Àngth
);

792 
	g√w_size
+=
vÆue_Àngth
;

794 
pmem_≥rsi°
(
node_d©a
->
buf„r
+
ﬁd_size
,
key_size
+
Àn_size
+
vÆue_Àngth
);

796 
_mm_s„n˚
();

798 
pmem_mem˝y
((*)&
node_d©a
->
size
,&
√w_size
,(
uöt16_t
),
PMEM_F_MEM_NONTEMPORAL
);

802 
_mm_s„n˚
();

816 
mem˝y
(
buf„r
+
ﬁd_size
+
Àn_size
,
key
,
key_size
);

817 
mem˝y
(
buf„r
+
ﬁd_size
+
key_size
+
Àn_size
,
vÆue
,
vÆue_Àngth
);

821 
mem˝y
(
buf„r
+
ﬁd_size
,&
vl16
,
Àn_size
);

828 *(
	guöt64_t
*)(
	gnode_d©a
->
	gbuf„r
 + 
	gﬁd_size
Ë*((
uöt64_t
*)
key
);

834 
mem˝y
(
node_d©a
->
buf„r
 + 
ﬁd_size
 + 
key_size
 + 
Àn_size
, 
vÆue
, 
vÆue_Àngth
);

835 *((
	guöt16_t
*)(
	gnode_d©a
->
	gbuf„r
 + 
	gﬁd_size
 + 
	gkey_size
)Ë
vl16
;

849 #ifde‡
dâ


850 
_mm_m„n˚
();

851 
˛ock_gëtime
(
CLOCK_MONOTONIC
,&
ts2
);

852 
	gâ1
+(
ts2
.
tv_£c
-
ts1
.tv_£c)*1000000000+ts2.
tv_n£c
-ts1.tv_nsec;

856  
	gbuf„r
+
	gﬁd_size
;

859 
move_sˇn_li°
(
Node_mëa
* 
node_ﬁd
,Node_mëa* 
node_√w
)

861 i‡(
	gnode_ﬁd
->
	gsˇn_li°
 =
NULL
)

863 
node_√w
->
sˇn_li°
 = 
NULL
;

866 
Sˇn_li°
* 
	g¶
;

867 
Sˇn_li°
** 
	g¶p
;

868 
	gﬁd_off£t
,
	g√w_off£t
;

869 
Quîy
* 
	gquîy
;

870 
	gﬁd_off£t
 = 
poöt_to_off£t
((*)
node_ﬁd
);

871 
	g√w_off£t
 = 
poöt_to_off£t
((*)
node_√w
);

872 
	g¶
 = 
node_ﬁd
->
sˇn_li°
;

873 
	g¶p
 = &(
node_ﬁd
->
sˇn_li°
);

874 
	g¶
)

876 
	gquîy
 = (
Quîy
*)(
¶
->
quîy
);

878 
©_lock
(
quîy
->
sˇn_lock
);

879 i‡(
	gquîy
->
	gsˇn_off£t
 =
ﬁd_off£t
)

881 
quîy
->
sˇn_off£t
 = 
√w_off£t
;

883 
©_u∆ock
(
quîy
->
sˇn_lock
);

884 
	g¶p
 = &(
¶
->
√xt
);

885 
	g¶
 = 
¶
->
√xt
;

890 
©_u∆ock
(
quîy
->
sˇn_lock
);

891 
¥ötf
("abandoned scanÉntry??\n");

892 *
	g¶p
 = 
¶
->
√xt
;

893 
‰ì
(
¶
);

894 
	g¶
 = *
¶p
;

897 
	gnode_√w
->
	gsˇn_li°
 = 
node_ﬁd
->
sˇn_li°
;

917 
•lô
(
off£t
,* 
¥efix
, 
c⁄töue_Àn
)

919 #ifde‡
dâ


920 
time•ec
 
	gts1
,
	gts2
;

921 
˛ock_gëtime
(
CLOCK_MONOTONIC
,&
ts1
);

922 
_mm_m„n˚
();

925 
	gec
=0;

927 i‡(
	g¥öt
)

928 
¥ötf
("°¨à•lô off£à%dÜí %d\n",
off£t
,
c⁄töue_Àn
);

930 
	gi
;

931 
uöt16_t
 
	gsize
;

932 * 
	gbuf„r
;

934 * 
	gbuf„r1
;

935 * 
	gbuf„r2
;

937 
	gtc
;

938 
uöt64_t
 
	gãmp_key
[100];

941 
VÆueE¡ry
 
	gvó
[100];

944 
Node_mëa
* 
	g√w_node1
;

945 
Node_mëa
* 
	g√w_node2
;

946 
Node_mëa
* 
	g¥ev_node
;

947 
Node_mëa
* 
	g√xt_node
;

948 
Node_mëa
* 
	gnode
;

950 
Node
* 
	gnode_d©a
;

951 
Node
* 
	g√w_node1_d©a
;

952 
Node
* 
	g√w_node2_d©a
;

956 
	gnode
 = 
off£t_to_node
(
off£t
);

957 
	gnode_d©a
 = 
off£t_to_node_d©a
(
off£t
);

959 
	g¥ev_node
 = 
off£t_to_node
(
node
->
¥ev_off£t
);

960 
	g√xt_node
 = 
off£t_to_node
(
node
->
√xt_off£t
);

996 i‡(
	g¥ev_node
->
	g°©e
 > 0)

1006 
¥ötf
("•lô off£à%dÖªv %d sèã %d\n",
off£t
,
node
->
¥ev_off£t
,()
¥ev_node
->
°©e
);

1007 
	gec
++;

1008 i‡(
	gec
 >= 1000)

1010 
¥ötf
("ec 1000\n");

1011 
sˇnf
("%d",&
ec
);

1027 i‡(
	g√xt_node
->
	g°©e
 > 0)

1036 
¥ötf
("•lô off£à%dÇexà%d sèã %d\n",
off£t
,
node
->
√xt_off£t
,()
√xt_node
->
°©e
);

1037 
	gec
++;

1038 i‡(
	gec
 >= 1000)

1040 
¥ötf
("ec 1000\n");

1041 
sˇnf
("%d",&
ec
);

1062 
	g√xt_node
->
	g°©e
 > 0)

1064 
	g√xt_node
 = 
off£t_to_node
(
node
->
√xt_off£t
);

1065 i‡(
check_¶ow
())

1067 
¥ötf
("inÜoop!!\n");

1068 
	gt
;

1069 
sˇnf
("%d",&
t
);

1078 i‡(
	g¥öt
)

1079 
¥ötf
("locked\n");

1083 
	gsize
 = 
node
->
size
;

1086 
	g√w_node1
 = 
Æloc_node
();

1087 
	g√w_node2
 = 
Æloc_node
();

1089 
	g√w_node1
->
	g°©e
 = 0;

1091 
	g√w_node1
->
	gsˇn_li°
 = 
NULL
;

1092 
	g√w_node2
->
	g°©e
 = 0;

1094 
	g√w_node2
->
	gsˇn_li°
 = 
NULL
;

1098 
	g√w_node1
->
	gic
 = 
√w_node2
->
ic
 = 0;

1105 
	g√w_node2
->
	g√xt_off£t
 = 
node
->
√xt_off£t
;

1106 
	g√w_node2
->
	g¥ev_off£t
 = 
ˇlc_off£t
(
√w_node1
);

1108 
	g√w_node1
->
	g√xt_off£t
 = 
ˇlc_off£t
(
√w_node2
);

1109 
	g√w_node1
->
	g¥ev_off£t
 = 
node
->
¥ev_off£t
;

1112 
move_sˇn_li°
(
node
,
√w_node2
);

1116 
_mm_s„n˚
();

1118 
	g√xt_node
->
	g¥ev_off£t
 = 
ˇlc_off£t
(
√w_node2
);

1122 
	g¥ev_node
->
	g√xt_off£t
 = 
ˇlc_off£t
(
√w_node1
);

1130 
	g√w_node1_d©a
 = 
off£t_to_node_d©a
(
ˇlc_off£t
(
√w_node1
));

1131 
	g√w_node2_d©a
 = 
off£t_to_node_d©a
(
ˇlc_off£t
(
√w_node2
));

1133 
mem˝y
(
√w_node1_d©a
,
√w_node1
,());

1134 
mem˝y
(
√w_node2_d©a
,
√w_node2
,());

1138 
	gj
,
	gãmp
;

1139 
	gi
=0;i<
	gnode
->
	gic
;i++)

1141 
	gãmp
 = 0;

1142 
	gj
=0;j<
	gnode
->
	gic
-
	gi
-1;j++)

1144 i‡(
	gnode
->
	göv_kv
[
j
] >Çode->inv_kv[j+1])

1146 
	gãmp
 = 
node
->
öv_kv
[
j
+1];

1147 
	gnode
->
	göv_kv
[
j
+1] = 
node
->
öv_kv
[j];

1148 
	gnode
->
	göv_kv
[
j
] = 
ãmp
;

1151 i‡(
	gãmp
 == 0)

1156 
uöt64_t
 
	g¥efix_64
 = *((uöt64_t*)
¥efix
),
	gm
;

1170 
	gm
 = ~(((
uöt64_t
)1 << (63-
c⁄töue_Àn
))-1);

1172 
	g¥efix_64
 = (
¥efix_64
 & 
m
Ë| ((
uöt64_t
)1 << (63-
c⁄töue_Àn
));

1173 i‡(
	g¥öt
)

1174 
¥ötf
("pivŸ %lx m %lx sizê%d\n",
¥efix_64
,
m
,
size
);

1176 
uöt16_t
 
	gvÆue_Àn
;

1177 c⁄° 
	gkls
 = 
key_size
 + 
Àn_size
;

1178 
uöt16_t
 
	gkvs
;

1181 
	gbuf„r
 = 
node_d©a
->
buf„r
;

1185 
	gbuf„r1
 = 
√w_node1_d©a
->
buf„r
;

1186 
	gbuf„r2
 = 
√w_node2_d©a
->
buf„r
;

1187 * c⁄° 
	gbe
 = 
buf„r
+
size
;

1188 
	gtc
 = 0;

1190 c⁄° 
	g√w_off£t1
 = 
ˇlc_off£t
(
√w_node1
);

1191 c⁄° 
	g√w_off£t2
 = 
ˇlc_off£t
(
√w_node2
);

1195 
	gj
 = 0;

1196 
	gnode
->
	göv_kv
[
node
->
ic
] = 0;

1197 
	gbuf„r
 < 
	gbe
)

1202 
	gvÆue_Àn
 = *((
uöt16_t
*)(
buf„r
 ));

1204 
	gkvs
 = 
kls
 + 
vÆue_Àn
;

1206 i‡((*)
	gnode_d©a
 + 
	gnode
->
	göv_kv
[
j
] !
buf„r
)

1209 i‡(
¥öt
)

1210 
¥ötf
("pivŸ %lx key %lx\n",
¥efix_64
,*((
uöt64_t
*)(
buf„r
)));

1216 
	gãmp_key
[
tc
] = *((
uöt64_t
*)(
buf„r
+
Àn_size
));

1220 i‡(
	gãmp_key
[
tc
] < 
	g¥efix_64
)

1227 
mem˝y
(
buf„r1
,
buf„r
,
kvs
);

1232 
	gvó
[
tc
].
	gnode_off£t
 = 
√w_off£t1
;

1233 
	gvó
[
tc
].
	gkv_off£t
 = 
buf„r1
-(*)
√w_node1_d©a
;

1236 
	gbuf„r1
+=
kvs
;

1243 
mem˝y
(
buf„r2
,
buf„r
,
kvs
);

1248 
	gvó
[
tc
].
	gnode_off£t
 = 
√w_off£t2
;

1249 
	gvó
[
tc
].
	gkv_off£t
 = 
buf„r2
-(*)
√w_node2_d©a
;

1251 
	gbuf„r2
+=
kvs
;

1254 
	gvó
[
tc
].
	gÀn
 = 
vÆue_Àn
;

1255 
	gtc
++;

1260 
	gj
++;

1263 
	gkvs
&~((
uöt16_t
)1 << 15);

1266 
	gbuf„r
+=
kvs
;

1269 
	g√w_node1
->
	gsize
 = 
buf„r1
-
√w_node1_d©a
->
buf„r
;

1270 
	g√w_node2
->
	gsize
 = 
buf„r2
-
√w_node2_d©a
->
buf„r
;

1280 i‡(
	g¥öt
)

1281 
¥ötf
("¬1 %∞¬2 %∞√xà%∞¥ev %p\n",
√w_node1
,
√w_node2
,
√xt_node
,
¥ev_node
);

1285 
	g√w_node1
->
	g°©e
 = 0;

1287 
	g√w_node1
->
	gsˇn_li°
 = 
NULL
;

1288 
	g√w_node2
->
	g°©e
 = 0;

1290 
	g√w_node2
->
	gsˇn_li°
 = 
NULL
;

1295 
	g√w_node1
->
	gsize
 = 
size1
;

1297 
	g√w_node2
->
	gsize
 = 
size2
;

1300 
	g√w_node2
->
	g√xt_off£t
 = 
node
->
√xt_off£t
;

1301 
	g√w_node2
->
	g¥ev_off£t
 = 
ˇlc_off£t
(
√w_node1
);

1303 
	g√w_node1
->
	g√xt_off£t
 = 
ˇlc_off£t
(
√w_node2
);

1304 
	g√w_node1
->
	g¥ev_off£t
 = 
node
->
¥ev_off£t
;

1307 
	g√xt_node
->
	g¥ev_off£t
 = 
ˇlc_off£t
(
√w_node2
);

1311 
	g¥ev_node
->
	g√xt_off£t
 = 
ˇlc_off£t
(
√w_node1
);

1316 
move_sˇn_li°
(
node
,
√w_node2
);

1322 i‡(!
	gUSE_DRAM
)

1330 
pmem_≥rsi°
(
√w_node1_d©a
,()+
√w_node1
->
size
);

1338 
pmem_≥rsi°
(
√w_node2_d©a
,()+
√w_node2
->
size
);

1350 
_mm_s„n˚
();

1356 
Êush_mëa
(
√w_node1
->
¥ev_off£t
);

1357 
_mm_s„n˚
();

1367 i‡(
	g¥öt
)

1368 
¥ötf
("insertÑange\n");

1372 
uöt64_t
 
	gv
;

1375 
	gv
 = (
uöt64_t
)1 <<(63-
c⁄töue_Àn
);

1381 
ö£π_ønge_íåy
((*)&
¥efix_64
,
c⁄töue_Àn
,
SPLIT_OFFSET
);

1392 
	g¥efix_64
-=
v
;

1393 
ö£π_ønge_íåy
((*)&
¥efix_64
,
c⁄töue_Àn
+1,
ˇlc_off£t
(
√w_node1
));

1394 
	g¥efix_64
+=
v
;

1395 
ö£π_ønge_íåy
((*)&
¥efix_64
,
c⁄töue_Àn
+1,
ˇlc_off£t
(
√w_node2
));

1401 
Node_mëa
* 
	g√w_node
;

1402 
Node
* 
	g√w_node_d©a
;

1403 * 
	g√w_buf„r
;

1404 i‡(
	gsize2
 == 0)

1406 
√w_node
 = 
√w_node1
;

1407 
	g√w_node
->
	gsize
 = 
size1
;

1408 
	g√w_buf„r
 = 
buf„r1
;

1409 
	g√w_node_d©a
 = 
off£t_to_node_d©a
(
ˇlc_off£t
(
√w_node1
));

1413 
	g√w_node
 = 
√w_node2
;

1414 
	g√w_node
->
	gsize
 = 
size2
;

1415 
	g√w_buf„r
 = 
buf„r2
;

1416 
	g√w_node_d©a
 = 
off£t_to_node_d©a
(
ˇlc_off£t
(
√w_node2
));

1418 
	g√w_node
->
	g°©e
 = 0;

1419 
	g√w_node
->
	gªf
 = 0;

1422 
	g√w_node
->
	g√xt_off£t
 = 
node
->
√xt_off£t
;

1423 
	g√w_node
->
	g¥ev_off£t
 = 
node
->
¥ev_off£t
;

1426 
	g√xt_node
->
	g¥ev_off£t
 = 
ˇlc_off£t
(
√w_node
);

1430 
	g¥ev_node
->
	g√xt_off£t
 = 
ˇlc_off£t
(
√w_node
);

1433 
move_sˇn_li°
(
node
,
√w_node
);

1435 i‡(!
	gUSE_DRAM
)

1439 
Êush_mëa
(
ˇlc_off£t
(
√w_node
));

1440 
pmem_mem˝y
(
√w_node_d©a
->
buf„r
, 
√w_buf„r
, 
√w_node
->
size
, 
PMEM_F_MEM_NONTEMPORAL
);

1441 
_mm_s„n˚
();

1443 
	gto
;

1444 
	gto
 = 
ˇlc_off£t
(
√w_node
);

1445 
pmem_mem˝y
(&
¥ev_node_d©a
->
√xt_off£t
,&
to
,(),
PMEM_F_MEM_NONTEMPORAL
);

1446 
_mm_s„n˚
();

1450 
mem˝y
(
√w_node_d©a
->
buf„r
,
√w_buf„r
,
√w_node
->
size
);

1455 
ö£π_ønge_íåy
((*)&
¥efix_64
,
c⁄töue_Àn
,
ˇlc_off£t
(
√w_node
));

1466 
	gi
=0;i<
	gtc
;i++)

1467 
ö£π_poöt_íåy
((*)&
ãmp_key
[
i
],
vó
[i]);

1472 i‡(
	g¥öt
)

1473 
¥ötf
("rehash\n");

1478 
	gbuf„r
 = 
node_d©a
->
buf„r
;

1479 
	gbuf„r1
 = 
√w_node1_d©a
->
buf„r
;

1480 
	gbuf„r2
 = 
√w_node2_d©a
->
buf„r
;

1482 
	gbuf„r
 < 
	gbe
)

1486 
	gvÆue_Àn
 = *((
uöt16_t
*)(
buf„r
));

1487 
	gkvs
 = 
kls
 + 
vÆue_Àn
;

1488 i‡((
	gvÆue_Àn
 & (1 << 15)) == 0)

1502 i‡(*((
uöt64_t
*)(
buf„r
+
Àn_size
)Ë< 
¥efix_64
)

1509 
ö£π_poöt_íåy
(
buf„r
+
Àn_size
,
buf„r1
);

1510 
	gbuf„r1
+
kvs
;

1518 
ö£π_poöt_íåy
(
buf„r
+
Àn_size
,
buf„r2
);

1519 
	gbuf„r2
+=
kvs
;

1524 
	gkvs
-= (1 << 15);

1525 
	gbuf„r
+=
kvs
;

1531 
_mm_s„n˚
();

1535 
‰ì_node
(
node
);

1537 #ifde‡
dâ


1538 
_mm_m„n˚
();

1539 
˛ock_gëtime
(
CLOCK_MONOTONIC
,&
ts2
);

1540 
	gâ2
+=(
ts2
.
tv_£c
-
ts1
.tv_£c)*1000000000+ts2.
tv_n£c
-ts1.tv_nsec;

1558 
com∑˘
(
off£t
)

1560 #ifde‡
dâ


1561 
time•ec
 
	gts1
,
	gts2
;

1562 
˛ock_gëtime
(
CLOCK_MONOTONIC
,&
ts1
);

1563 
_mm_m„n˚
();

1568 if(
	g¥öt
)

1569 
¥ötf
("com∑˘i⁄ off£à%d\n",
off£t
);

1575 
	gi
;

1576 
uöt16_t
 
	gsize
;

1577 * 
	gbuf„r
;

1579 * 
	gbuf„r1
;

1581 
	gtc
;

1582 
uöt64_t
 
	gãmp_key
[100];

1585 
VÆueE¡ry
 
	gvó
[100];

1587 
Node_mëa
* 
	g√w_node1
;

1588 
Node_mëa
* 
	g¥ev_node
;

1589 
Node_mëa
* 
	g√xt_node
;

1590 
Node_mëa
* 
	gnode
;

1592 
Node
* 
	gnode_d©a
;

1593 
Node
* 
	g√w_node1_d©a
;

1596 
	gnode
 = 
off£t_to_node
(
off£t
);

1597 
	gnode_d©a
 = 
off£t_to_node_d©a
(
off£t
);

1600 
	g¥ev_node
 = 
off£t_to_node
(
node
->
¥ev_off£t
);

1601 
	g√xt_node
 = 
off£t_to_node
(
node
->
√xt_off£t
);

1624 i‡(
	g¥ev_node
->
	g°©e
 > 0)

1649 i‡(
	g√xt_node
->
	g°©e
 > 0)

1659 
	g√xt_node
->
	g°©e
 > 0)

1660 
	g√xt_node
 = 
off£t_to_node
(
node
->
√xt_off£t
);

1680 i‡(
	g¥öt
)

1681 
¥ötf
("locked\n");

1685 
	gsize
 = 
node
->
size
;

1686 
	gbuf„r
 = 
node_d©a
->
buf„r
;

1689 
	g√w_node1
 = 
Æloc_node
();

1691 
	g√w_node1
->
	g°©e
 = 0;

1698 
	g√w_node1
->
	gic
 = 0;

1700 
	g√w_node1
->
	g√xt_off£t
 = 
node
->
√xt_off£t
;

1701 
	g√w_node1
->
	g¥ev_off£t
 = 
node
->
¥ev_off£t
;

1704 
	g√xt_node
->
	g¥ev_off£t
 = 
ˇlc_off£t
(
√w_node1
);

1708 
	g¥ev_node
->
	g√xt_off£t
 = 
ˇlc_off£t
(
√w_node1
);

1711 
move_sˇn_li°
(
node
,
√w_node1
);

1713 
	g√w_node1_d©a
 = 
off£t_to_node_d©a
(
ˇlc_off£t
(
√w_node1
));

1715 
mem˝y
(
√w_node1_d©a
,
√w_node1
,());

1718 
	gj
,
	gãmp
;

1719 
	gi
=0;i<
	gnode
->
	gic
;i++)

1721 
	gãmp
 = 0;

1722 
	gj
=0;j<
	gnode
->
	gic
-
	gi
-1;j++)

1724 i‡(
	gnode
->
	göv_kv
[
j
] >Çode->inv_kv[j+1])

1726 
	gãmp
 = 
node
->
öv_kv
[
j
+1];

1727 
	gnode
->
	göv_kv
[
j
+1] = 
node
->
öv_kv
[j];

1728 
	gnode
->
	göv_kv
[
j
] = 
ãmp
;

1731 i‡(
	gãmp
 == 0)

1736 
uöt16_t
 
	gvÆue_Àn
;

1740 
	gbuf„r1
 = 
√w_node1_d©a
->
buf„r
;

1742 * c⁄° 
	gbe
 = 
buf„r
+
size
;

1744 c⁄° 
	gkls
 = 
key_size
 + 
Àn_size
;

1745 
uöt16_t
 
	gkvs
;

1746 c⁄° 
	g√w_off£t
 = 
ˇlc_off£t
(
√w_node1
);

1747 
	gtc
 = 0;

1750 
	gj
 = 0;

1751 
	gnode
->
	göv_kv
[
node
->
ic
] = 0;

1752 
	gbuf„r
 < 
	gbe
)

1759 
	gvÆue_Àn
 = *((
uöt16_t
*)(
buf„r
));

1761 
	gkvs
 = 
kls
 + 
vÆue_Àn
;

1763 i‡((*)
	gnode_d©a
 + 
	gnode
->
	göv_kv
[
j
] !
buf„r
)

1765 
mem˝y
(
buf„r1
,
buf„r
,
kvs
);

1767 
	gãmp_key
[
tc
] = *((
uöt64_t
*)(
buf„r
+
Àn_size
));

1770 
	gvó
[
tc
].
	gnode_off£t
 = 
√w_off£t
;

1771 
	gvó
[
tc
].
	gkv_off£t
 = 
buf„r1
-(*)
√w_node1_d©a
;

1773 
	gvó
[
tc
].
	gÀn
 = 
vÆue_Àn
;

1774 
	gbuf„r1
+=
kvs
;

1775 
	gtc
++;

1779 
	gj
++;

1780 
	gkvs
&~((
uöt16_t
)1 << 15);

1783 
	gbuf„r
+=
kvs
;

1786 
	g√w_node1
->
	gsize
 = 
buf„r1
-
√w_node1_d©a
->
buf„r
;

1796 i‡(!
	gUSE_DRAM
)

1809 
pmem_≥rsi°
(
√w_node1_d©a
,()+
√w_node1
->
size
);

1810 
_mm_s„n˚
();

1811 
Êush_mëa
(
√w_node1
->
¥ev_off£t
);

1812 
_mm_s„n˚
();

1822 
	gi
=0;i<
	gtc
;i++)

1823 
ö£π_poöt_íåy
((*)&
ãmp_key
[
i
],
vó
[i]);

1826 i‡(
	g¥öt
)

1827 
¥ötf
("rehash\n");

1831 
	gbuf„r
 = 
node1_d©a
->
buf„r1
;

1833 
	gbuf„r
 < 
	gbe
)

1837 
	gvÆue_Àn
 = *((
uöt16_t
*)(
buf„r
));

1839 i‡((
	gvÆue_Àn
 & (1 << 15)) == 0)

1853 
ö£π_poöt_íåy
(
buf„r
+
cur
,
√w_node1_d©a
->buf„r+
size1
);

1854 
	gsize1
+
key_size
 + 
Àn_size
 + 
vÆue_Àn
;

1857 
	gvÆue_Àn
 -= (1 << 15);

1858 
	gcur
+=
key_size
+
Àn_size
+
vÆue_Àn
;

1863 
ö£π_ønge_íåy
((*)
√w_node1_d©a
->
buf„r
+
Àn_size
,
key_bô
,
ˇlc_off£t
(
√w_node1
));

1866 
_mm_s„n˚
();

1868 
‰ì_node
(
node
);

1870 #ifde‡
dâ


1871 
_mm_m„n˚
();

1872 
˛ock_gëtime
(
CLOCK_MONOTONIC
,&
ts2
);

1873 
	gâ3
+=(
ts2
.
tv_£c
-
ts1
.tv_£c)*1000000000+ts2.
tv_n£c
-ts1.tv_nsec;

1876  
ˇlc_off£t
(
√w_node1
);

1881 
adv™˚
(** 
kv_µ
,* 
off£t
,
Node
* 
node_p
)

1883 
uöt16_t
 
	gsize
;

1884 
	gﬁd_off£t
,
	g√w_off£t
,
	göv
;

1889 
	göv
 = 0;

1890 
	gsize
 = *((
uöt16_t
*)(*
kv_µ
+
key_size
));

1891 i‡(
	gsize
 & (1 << 15))

1893 
	göv
 = 1;

1894 
	gsize
-=(1<<15);

1896 *
	gkv_µ
+=
size
+
key_size
+
Àn_size
;

1897 i‡(*
	gkv_µ
 >
node_p
->
buf„r
+node_p->
size
)

1899 i‡(
	göv
 == 0)

1903 
	gﬁd_off£t
 = *
off£t
;

1906 
	g√w_off£t
 = 
off£t_to_node
(
ﬁd_off£t
)->
√xt_off£t
;

1907 i‡(
	g√w_off£t
 =
TAIL_OFFSET
)

1909 *
off£t
 = 
TAIL_OFFSET
;

1910 
dec_ªf
(
ﬁd_off£t
);

1911 *
	gkv_µ
 = 
NULL
;

1914 i‡(
öc_ªf
(
√w_off£t
,0))

1916 
c›y_node
(
node_p
,
off£t_to_node
(
√w_off£t
));

1920 
dec_ªf
(
ﬁd_off£t
);

1921 *
	goff£t
 = 
√w_off£t
;

1922 *
	gkv_µ
 = 
node_p
->
buf„r
;

1928 
adv™˚_off£t
(
Quîy
* 
quîy
)

1930 
	gﬁd_off£t
,
	g√w_off£t
,
	göv
;

1931 
Node_mëa
* 
	gnode
;

1932 
Node_mëa
* 
	g√xt_node
;

1935 
©_lock
(
quîy
->
sˇn_lock
);

1937 
	gﬁd_off£t
 = 
quîy
->
sˇn_off£t
;

1940 
	gnode
 = 
off£t_to_node
(
ﬁd_off£t
);

1956 
©_lock
(
node
->
°©e
);

1958 
	g√w_off£t
 = 
node
->
√xt_off£t
;

1959 i‡(
	g√w_off£t
 =
TAIL_OFFSET
)

1961 
dñëe_sˇn_íåy
(
ﬁd_off£t
,
quîy
);

1963 
©_u∆ock
(
node
->
°©e
);

1964 
	gquîy
->
	gsˇn_off£t
 = 
TAIL_OFFSET
;

1968 
©_u∆ock
(
quîy
->
sˇn_lock
);

1972 
	g√xt_node
 = 
off£t_to_node
(
√w_off£t
);

1976 i‡(
	g√xt_node
->
	g°©e
 > 0)

1980 
©_u∆ock
(
node
->
°©e
);

1993 
Sˇn_li°
* 
	g¶
;

1994 
Sˇn_li°
** 
	g¶p
;

1996 
	g¶
 = 
node
->
sˇn_li°
;

1997 
	g¶p
 = &(
node
->
sˇn_li°
);

1998 
	g¶
)

2000 i‡(
	g¶
->
	gquîy
 =
quîy
)

2002 *
¶p
 = 
¶
->
√xt
;

2005 
	g¶p
 = &(
¶
->
√xt
);

2006 
	g¶
 = 
¶
->
√xt
;

2011 
	g¶
->
	g√xt
 = 
√xt_node
->
sˇn_li°
;

2012 
	g√xt_node
->
	gsˇn_li°
 = 
¶
;

2014 
©_lock
(
√xt_node
->
°©e
);

2015 
©_u∆ock
(
node
->
°©e
);

2023 
Node
* 
	g√xt_node_d©a
;

2024 
	g√xt_node_d©a
 = 
off£t_to_node_d©a
(
ˇlc_off£t
(
√xt_node
));

2033 *((
	gNode
*)
	gquîy
->
	gnode_d©a
Ë*
√xt_node_d©a
;

2039 
©_u∆ock
(
√xt_node
->
°©e
);

2045 
	gquîy
->
	gsˇn_off£t
 = 
√w_off£t
;

2048 
©_u∆ock
(
quîy
->
sˇn_lock
);

2053 
adv™˚_off£t
(* 
quîy
)

2055  
adv™˚_off£t
((
Quîy
*)
quîy
);

2067 
s‹t_node
(
Node
* 
node_d©a
,* 
s‹ãd_ödex
,* 
max
)

2069 * 
	gkv
;

2070 
uöt16_t
 
	gv_size
;

2071 c⁄° 
	gnode_size
 = 
off£t_to_node
(
d©a_poöt_to_off£t
((*)
node_d©a
))->
size
;

2072 
	gkv
 = 
node_d©a
->
buf„r
;

2073 *
	gmax
 = 0;

2074 
	gkv
 < 
	gnode_d©a
->
	gbuf„r
 + 
	gnode_size
)

2076 
	gv_size
 = *((
uöt16_t
*)(
kv
+
key_size
));

2077 i‡(
	gv_size
 & (1 << 15))

2078 
	gv_size
-=(1<<15);

2080 (
	gs‹ãd_ödex
)[(*
max
)++] = 
kv
-
node_d©a
->
buf„r
;

2081 
	gkv
+=
key_size
+
Àn_size
+
v_size
;

2085 
	gi
,
	gj
,
	gt
;

2086 
	gi
=0;i<*
	gmax
;i++)

2088 
	gj
=
i
+1;j<*
	gmax
;j++)

2090 i‡(*((
	guöt64_t
*)(
	gnode_d©a
->
	gbuf„r
+(
	gs‹ãd_ödex
)[
i
])Ë> *((uöt64_t*)“ode_d©a->buf„r+(s‹ãd_ödex)[
j
])))

2092 
	gt
 = (
s‹ãd_ödex
)[
i
];

2093 (
	gs‹ãd_ödex
)[
i
] = (
s‹ãd_ödex
)[
j
];

2094 (
	gs‹ãd_ödex
)[
j
] = 
t
;

2100 
ö£π_sˇn_li°
(
Node_mëa
* 
node
,* 
quîy
)

2102 
Sˇn_li°
* 
	g¶
;

2103 
	g¶
 = (
Sˇn_li°
*)
mÆloc
((Scan_list));

2104 
	g¶
->
	gquîy
 = 
quîy
;

2105 
	g¶
->
	g√xt
 = 
node
->
sˇn_li°
;

2106 
	gnode
->
	gsˇn_li°
 = 
¶
;

2109 
dñëe_sˇn_íåy
(
sˇn_off£t
,* 
quîy
)

2111 
Node_mëa
* 
	gnode
;

2112 
Sˇn_li°
* 
	g¶
;

2113 
Sˇn_li°
** 
	g¶p
;

2117 
	gnode
 = 
off£t_to_node
(
sˇn_off£t
);

2119 
	g¶
 = 
node
->
sˇn_li°
;

2120 
	g¶p
 = &(
node
->
sˇn_li°
);

2121 
	g¶
 !
NULL
)

2123 i‡(
¶
->
quîy
 == query)

2126 *
¶p
 = 
¶
->
√xt
;

2127 
‰ì
(
¶
);

2130 
	g¶p
 = &(
¶
->
√xt
);

2131 
	g¶
 = 
¶
->
√xt
;

2139 
övÆid©e_kv
(
node_off£t
, 
kv_off£t
)

2141 
Node_mëa
* 
	gmëa
;

2142 
	gmëa
 = 
off£t_to_node
(
node_off£t
);

2143 
	gmëa
->
	göv_kv
[
mëa
->
ic
++] = 
kv_off£t
;

	@ph/data.h

3 
	~<±hªad.h
>

4 
	~<©omic
>

6 
	~<sys/mm™.h
>

8 
	~"globÆ.h
"

14 
	#HEAD_OFFSET
 1

	)

15 
	#TAIL_OFFSET
 2

	)

19 
«me•a˚
 
	gPH


22 
±hªad_muãx_t
 
Æloc_muãx
;

24 
	sSˇn_li°


26 * 
	gquîy
;

27 
Sˇn_li°
* 
	g√xt
;

30 
	sNode


43 
	g√xt_off£t
;

45 
	gbuf„r
[
NODE_BUFFER
];

50 
	sNode_mëa


52 vﬁ©ûê
	g√xt_off£t
;

53  
uöt16_t
 
	gsize
;

60 
	g°d
::
©omic
<
uöt8_t
> 
°©e
;

69 vﬁ©ûê
	g¥ev_off£t
;

71 
Sˇn_li°
* 
	gsˇn_li°
;

73 
uöt16_t
 
	gic
;

74 
uöt16_t
 
	göv_kv
[20-1];

93 
öô_d©a
();

94 
˛ón_d©a
();

96 
s_u∆ock
(
off£t
);

97 
e_u∆ock
(
off£t
);

98 
åy_s_lock
(
off£t
);

99 
åy_e_lock
(
off£t
);

100 
öc_ªf
(
off£t
);

101 
dec_ªf
(
off£t
);

102 
åy_h¨d_lock
(
off£t
);

103 
h¨d_u∆ock
(
off£t
);

104 
so·_lock
(
off£t
);

106 
Node_mëa
* 
off£t_to_node
(
off£t
);

107 
Node
* 
off£t_to_node_d©a
(
off£t
);

108 
poöt_to_off£t
(* 
kv_p
);

109 
d©a_poöt_to_off£t
(* 
kv_p
);

110 
ˇlc_off£t_d©a
(* 
node
);

113 
dñëe_kv
(* 
kv_p
);

115 * 
ö£π_kv
(
off£t
,* 
key
,* 
vÆue
,
vÆue_Àngth
,
ﬁd_size
);

116 
•lô
(
off£t
, * 
¥efix
, 
c⁄töue_Àn
);

118 
com∑˘
(
off£t
);

119 
¥öt_kv
(* 
kv_p
);

120 
check_size
(
off£t
,
vÆue_Àngth
);

123 
adv™˚_off£t
(* 
quîy
);

125 
s‹t_node
(
Node
* 
node
,* 
s‹ãd_ödex
,* 
max
);

126 
ö£π_sˇn_li°
(
Node_mëa
* 
node
,* 
quîy
);

127 
dñëe_sˇn_íåy
(
sˇn_off£t
,* 
quîy
);

129 
©_lock
(
°d
::
©omic
<
uöt8_t
> &
lock
);

130 
©_u∆ock
(
°d
::
©omic
<
uöt8_t
> &
lock
);

131 
åy_©_lock
(
°d
::
©omic
<
uöt8_t
> &
lock
);

133 
övÆid©e_kv
(
node_off£t
, 
kv_off£t
);

	@ph/global.c

1 
	~<°rög.h
>

3 
	~"globÆ.h
"

6 
	~"d©a.h
"

7 
	~"thªad.h
"

8 
	~"hash.h
"

12 
«me•a˚
 
	gPH


15 
	gnum_of_thªad
;

16 
	gc⁄√˘i⁄_≥r_thªad
;

17 
	gtŸÆ_c⁄√˘i⁄
;

18 
	gp‹t
;

23 
	gpoöt_hash_èbÀ_size
;

24 * 
	gønge_hash_èbÀ_size
;

27 
	gnode_size
;

29 
	gkey_size
;

30 
	gÀn_size
;

31 
	gvÆue_size
;

32 
	gíåy_size
;

33 
	gkey_bô
;

37 
uöt64_t
 
	gpmem_size
;

38 
	gpmem_fûe
[100];

41 
	gem±y
[10];

42 
	gem±y_Àn
;

45 
ãmp_°©ic_c⁄f
(
ä
, 
ks
,
vs
)

48 
	gnum_of_thªad
 = 
ä
;

49 
	gc⁄√˘i⁄_≥r_thªad
 = 1;

50 
	gp‹t
 = 5516;

51 
	gtŸÆ_c⁄√˘i⁄
 = 
num_of_thªad
 * 
c⁄√˘i⁄_≥r_thªad
;

55 
	gÀn_size
 = 2;

57 
	gkey_size
 = 
ks
;

58 
	gvÆue_size
 = 
vs
;

59 
	gíåy_size
 = 
key_size
 + 
Àn_size
 + 
vÆue_size
;

60 
	gkey_bô
 = 
ks
 * 8;

62 
	gpoöt_hash_èbÀ_size
 = 10*1000*1000;

65 
	gpmem_size
 = (
uöt64_t
)1024*1024*1024*80;

75 
	gem±y_Àn
 = 
°æí
("empty");

76 
mem˝y
(
em±y
,"em±y",
em±y_Àn
);

77 
	gem±y
[
em±y_Àn
] = 0;

79 
mem˝y
(
pmem_fûe
,"/m¡/pmem0/fûe",
°æí
("/mnt/pmem0/file"));

80 
	gpmem_fûe
[
°æí
("/mnt/pmem0/file")] = 0;

82 
öô_thªad
();

83 
öô_hash
();

84 
öô_d©a
();

	@ph/global.h

1 #¥agm®
⁄˚


5 
	~<°döt.h
>

21 
«me•a˚
 
	gPH


24 
	sVÆueE¡ry


28 
uöt32_t
 
	gnode_off£t
;

29 
uöt16_t
 
	gkv_off£t
;

30 
uöt16_t
 
	gÀn
;

75 
num_of_thªad
;

76 
c⁄√˘i⁄_≥r_thªad
;

77 
tŸÆ_c⁄√˘i⁄
;

78 
p‹t
;

80 
	#USE_DRAM
 0

	)

84 
poöt_hash_èbÀ_size
;

85 * 
ønge_hash_èbÀ_size
;

87 
	#NODE_BUFFER
 2048-4

	)

89 
node_size
;

92 
key_size
;

93 
Àn_size
;

94 
vÆue_size
;

95 
íåy_size
;

96 
key_bô
;

107 
uöt64_t
 
pmem_size
;

108 
pmem_fûe
[100];

111 
em±y
[10];

112 
em±y_Àn
;

115 
ãmp_°©ic_c⁄f
(
ä
,
ks
,
vs
);

	@ph/hash.c

1 
	~<°dlib.h
>

3 
	~<°dio.h
>

5 
	~<x86öåö.h
>

7 
	~"globÆ.h
"

8 
	~"hash.h
"

9 
	~"c˚h.h
"

11 
	~"d©a.h
"

15 
«me•a˚
 
	gPH


18 
CCEH
* 
	gpoöt_hash
;

19 
CCEH
* 
	gønge_hash_¨øy
;

23 
	#¥öt
 0

	)

28 
uöt64_t
 
	ghâ1
,
	ghâ2
,
	ghâ3
,
	gÂc
,
	ghâ4
,
	ghâ5
,
	gÂc2
;

30 
uöt64_t
 
	g¥e_bô_mask
[65];

32 * 
decode_íåy
(* 
íåy
, * 
vÆue_Àn_p
)

36 * 
	g±r
;

38 i‡(
	gvÆue_Àn_p
 !
NULL
)

39 *
vÆue_Àn_p
 = ((
uöt64_t
)
íåy
 >> 16) % (256*256);

40 
	g±r
 = (*)((
uöt64_t
)
off£t_to_node_d©a
((uöt64_t)
íåy
 >> 32) | ((uint64_t)entry % (256*256)));

41  
	g±r
;

50 * 
ícode_íåy
(* 
±r
, 
vÆue_Àn
)

54 * 
	gíåy
;

56 
	gíåy
 = (*)(((
uöt64_t
)
ˇlc_off£t_d©a
(
±r
Ë<< 32Ë| (
vÆue_Àn
 << 16) | ((uint64_t)ptr % (256*256)));

58  
	gíåy
;

69 
¥öt64
(
uöt64_t
 
v
)

71 
	gi
;

72 
uöt64_t
 
	gmask
;

73 
	gmask
 = (
uöt64_t
)1 << 63;

74 
	gi
=0;i<64;i++)

76 i‡(
	gv
 & 
	gmask
)

77 
¥ötf
("1");

79 
¥ötf
("0");

80 
	gmask
/=2;

82 
¥ötf
("\n");

85 
hash_fun˘i⁄
(c⁄° *
buf
 )

87 
	ghash
 = 5381;

88 
	gÀn
=8;

89 
	gÀn
--)

90 
	ghash
 = ((
hash
 << 5Ë+ hashË+ (*
buf
++);

91  
	ghash
;

94 
VÆueE¡ry
 
föd_poöt_íåy
(* &
key_p
)

96 #ifde‡
hâ


97 
time•ec
 
	gts1
,
	gts2
;

98 
˛ock_gëtime
(
CLOCK_MONOTONIC
,&
ts1
);

99 
	gÂc
++;

100 
_mm_m„n˚
();

104 
VÆueE¡ry
 
	gíåy
;

105 
	gíåy
 = 
poöt_hash
->
föd
(*((
uöt64_t
*)
key_p
));

110 #ifde‡
hâ


111 
_mm_m„n˚
();

112 
˛ock_gëtime
(
CLOCK_MONOTONIC
,&
ts2
);

113 
	ghâ1
+=(
ts2
.
tv_£c
-
ts1
.tv_£c)*1000000000+ts2.
tv_n£c
-ts1.tv_nsec;

115  
	gíåy
;

118 
VÆueE¡ry
* 
föd_‹_ö£π_poöt_íåy
(* &
key_p
,* 
u∆ock
)

120 #ifde‡
hâ


121 
time•ec
 
	gts1
,
	gts2
;

122 
˛ock_gëtime
(
CLOCK_MONOTONIC
,&
ts1
);

123 
	gÂc2
++;

124 
_mm_m„n˚
();

128 
VÆueE¡ry
* 
	gíåy_p
;

129 
VÆueE¡ry
 
	gve
;

130 
	gve
.
	gkv_off£t
 = 
ve
.
node_off£t
 = 0;

131 (
	gíåy_p
=
poöt_hash
->
ö£π
((*(
uöt64_t
*)
key_p
),
ve
,
u∆ock
)Ë=
NULL
);

137 #ifde‡
hâ


138 
_mm_m„n˚
();

139 
˛ock_gëtime
(
CLOCK_MONOTONIC
,&
ts2
);

140 
	ghâ5
+=(
ts2
.
tv_£c
-
ts1
.tv_£c)*1000000000+ts2.
tv_n£c
-ts1.tv_nsec;

142  
	gíåy_p
;

145 
u∆ock_íåy
(* 
u∆ock
)

147 
	gpoöt_hash
->
u∆ock_íåy2
(
u∆ock
);

150 
ö£π_poöt_íåy
(* 
key_p
,
VÆueE¡ry
 
ve
)

152 #ifde‡
hâ


153 
time•ec
 
	gts1
,
	gts2
;

154 
˛ock_gëtime
(
CLOCK_MONOTONIC
,&
ts1
);

155 
_mm_m„n˚
();

158 
	gpoöt_hash
->
ö£π
((*(
uöt64_t
*)
key_p
),
ve
) == 0);

159 #ifde‡
hâ


160 
_mm_m„n˚
();

162 
˛ock_gëtime
(
CLOCK_MONOTONIC
,&
ts2
);

163 
	ghâ3
+=(
ts2
.
tv_£c
-
ts1
.tv_£c)*1000000000+ts2.
tv_n£c
-ts1.tv_nsec;

167 
ªmove_poöt_íåy
(* 
key_p
)

169 
	gpoöt_hash
->
ªmove
(*((
uöt64_t
*)
key_p
));

173 
bô_Êush
(* 
¥efix
,* 
key_p
,
°¨t
,
íd
)

176 
	gi
,
	g°¨t_byã
,
	gíd_byã
,
	gèrgë_byã
;

177 
	gbô_cou¡
,
	gbô_mask
;

178 i‡(
	gkey_p
 =
NULL
)

180 
°¨t_byã
 = 
°¨t
 / 8+1;

181 
	gíd_byã
 = 
íd
 / 8;

182 
	gi
=
°¨t_byã
;i<=
íd_byã
;i++)

183 
	g¥efix
[
key_size
-1 - 
i
] = 0;

184 
	gèrgë_byã
 = 
°¨t_byã
 -1;

185 
	gbô_cou¡
 = 8-
°¨t
%8;

187 i‡(
	gbô_cou¡
 == 8)

188 
¥efix
[
key_size
-1 - 
èrgë_byã
] = 0;

191 
	gbô_mask
 = ~((1 << (
bô_cou¡
))-1);

192 
	g¥efix
[
key_size
-1 - 
èrgë_byã
] = 
¥efix
[key_size-1 -Å¨gë_byã] & 
bô_mask
;

198 
	g°¨t_byã
 = 
°¨t
 / 8;

199 
	gíd_byã
 = 
íd
 / 8 -1;

200 
	gi
=
°¨t_byã
;i<=
íd_byã
;i++)

201 
	g¥efix
[
key_size
-1 - 
i
] = 
key_p
[key_size-1 - i];

202 
	gèrgë_byã
 = 
íd_byã
+1;

203 
	gbô_cou¡
 = 8 - (
íd
 % 8 + 1);

205 i‡(
	gbô_cou¡
 == 0)

206 
¥efix
[
key_size
-1 - 
èrgë_byã
] = 
key_p
[key_size-1 -Åarget_byte];

209 
	gbô_mask
 = ~((1 << (
bô_cou¡
))-1);

210 
	g¥efix
[
key_size
-1 - 
èrgë_byã
] = 
key_p
[key_size-1 -Å¨gë_byã] & 
bô_mask
;

216 
föd_ønge_íåy2
(* 
key_p
,* 
c⁄töue_Àn
)

218 #ifde‡
hâ


219 
time•ec
 
	gts1
,
	gts2
;

220 
˛ock_gëtime
(
CLOCK_MONOTONIC
,&
ts1
);

222 
_mm_m„n˚
();

226 
	gmö
,
	gmax
,
	gmid
;

227 
	ghash
;

228 
	g¥efix
[8]={0,};

236 i‡(*
	gc⁄töue_Àn
 > 0)

239 
	ghash
 = 
föd_ønge_íåy
(
key_p
,
c⁄töue_Àn
);

240 #ifde‡
hâ


241 
_mm_m„n˚
();

242 
˛ock_gëtime
(
CLOCK_MONOTONIC
,&
ts2
);

243 
	ghâ2
+=(
ts2
.
tv_£c
-
ts1
.tv_£c)*1000000000+ts2.
tv_n£c
-ts1.tv_nsec;

245  
	ghash
;

248 
	gmax
 = 
key_bô
;

249 
	gmö
 = 0;

250 
	gmid
 = (
mö
+
max
)/2;

265 
VÆueE¡ry
 
	gve
;

269 *(
	guöt64_t
*)
	g¥efix
 = *(
uöt64_t
*)
key_p
 & 
¥e_bô_mask
[
mid
];

275 
	gve
 = 
ønge_hash_¨øy
[
mid
].
föd
(*((
uöt64_t
*)
¥efix
));

277 i‡(
	gve
.
	gnode_off£t
 == 0)

279 
max
 = 
mid
;

286 i‡(
	gve
.
	gnode_off£t
 =
SPLIT_OFFSET
)

290 i‡(
mid
+1 =
max
)

291 
mö
 = 
mid
+1;

293 
	gmö
 = 
mid
;

298 #ifde‡
hâ


299 
_mm_m„n˚
();

301 
˛ock_gëtime
(
CLOCK_MONOTONIC
,&
ts2
);

302 
	ghâ2
+=(
ts2
.
tv_£c
-
ts1
.tv_£c)*1000000000+ts2.
tv_n£c
-ts1.tv_nsec;

305 *
	gc⁄töue_Àn
 = 
mid
;

306  
	gve
.
	gnode_off£t
;

309 i‡(
	gmid
 =(
mö
+
max
)/2)

322 
	gmid
 = (
mö
+
max
)/2;

326 
¥ötf
("never come here\n");

332 
föd_ønge_íåy
(* 
key_p
,* 
c⁄töue_Àn
)

334 #ifde‡
hâ


335 
time•ec
 
	gts1
,
	gts2
;

336 
˛ock_gëtime
(
CLOCK_MONOTONIC
,&
ts1
);

338 
_mm_m„n˚
();

342 
	gi
;

343 
	ghash
;

344 
	g¥efix
[8]={0,};

347 
uöt64_t
 
	gb
;

349 
VÆueE¡ry
 
	gve
;

354 i‡(*
	gc⁄töue_Àn
 < 64)

356 
	gb
 = ((
uöt64_t
)1 << *
c⁄töue_Àn
) -1;

357 
	gb
 = 
b
 << (64-*
c⁄töue_Àn
);

358 *((
	guöt64_t
*)
	g¥efix
Ë(
b
 & *((
uöt64_t
*)
key_p
));

361 *((
	guöt64_t
*)
	g¥efix
Ë(*((
uöt64_t
*)
key_p
));

363 
	gb
 = (
uöt64_t
)1 << (63 -*
c⁄töue_Àn
);

364 i‡(
	g¥öt
)

365 
¥ötf
("key %lx cÀ¿%d\n",*((
uöt64_t
*)
key_p
),*
c⁄töue_Àn
);

366 
	gi
=*
c⁄töue_Àn
;i<=64;i++)

370 i‡(
	g¥öt
)

371 
¥ötf
("¥efix %lx\n",*((
uöt64_t
*)
¥efix
));

373 
	gve
 = 
ønge_hash_¨øy
[
i
].
föd
(*((
uöt64_t
*)
¥efix
));

375 i‡(
	gve
.
	gnode_off£t
 !
SPLIT_OFFSET
)

377 *
c⁄töue_Àn
 = 
i
;

378 #ifde‡
hâ


379 
_mm_m„n˚
();

381 
˛ock_gëtime
(
CLOCK_MONOTONIC
,&
ts2
);

382 
	ghâ2
+=(
ts2
.
tv_£c
-
ts1
.tv_£c)*1000000000+ts2.
tv_n£c
-ts1.tv_nsec;

384  
	gve
.
	gnode_off£t
;

387 (*((
	guöt64_t
*)
	g¥efix
)Ë|(*((
uöt64_t
*)
key_p
Ë& 
b
);

388 
	gb
 = 
b
 >> 1;

393 
¥ötf
("range hashÉrror\n");

399 
ö£π_ønge_íåy
(* 
key_p
,
Àn
,
off£t
)

403 #ifde‡
hâ


404 
time•ec
 
	gts1
,
	gts2
;

405 
˛ock_gëtime
(
CLOCK_MONOTONIC
,&
ts1
);

407 
_mm_m„n˚
();

410 
	g¥efix
[8] = {0,};

411 
	gi
;

413 
uöt64_t
 
	gb
=0;

414 
uöt64_t
 
	goff£t64
 = 
off£t
;

420 i‡(
	gÀn
 < 64)

422 
	gb
 = ((
uöt64_t
)1 << 
Àn
)-1;

423 
	gb
 = 
b
 << (64-
Àn
);

425 *((
	guöt64_t
*)
	g¥efix
Ë(
b
 & *((
uöt64_t
*)
key_p
));

428 *((
	guöt64_t
*)
	g¥efix
Ë(*((
uöt64_t
*)
key_p
));

431 i‡(
	g¥öt
)

432 
¥ötf
("key_∞%lxÑ™gê%lxÜí %d off£à%d in£π\n",*((
uöt64_t
*)
key_p
),*((uöt64_t*)
¥efix
),
Àn
,
off£t
);

438 
VÆueE¡ry
 
	gve
;

439 
	gve
.
	gnode_off£t
 = 
off£t64
;

440 
	gønge_hash_¨øy
[
Àn
].
ö£π
(*((
uöt64_t
*)
¥efix
),
ve
) == 0);

441 #ifde‡
hâ


442 
_mm_m„n˚
();

443 
˛ock_gëtime
(
CLOCK_MONOTONIC
,&
ts2
);

444 
	ghâ4
+=(
ts2
.
tv_£c
-
ts1
.tv_£c)*1000000000+ts2.
tv_n£c
-ts1.tv_nsec;

449 
öô_hash
()

452 
	gi
;

454 
	g¥e_bô_mask
[0] = 0;

456 
	gi
=1;i<=64;i++)

457 
	g¥e_bô_mask
[
i
] = (
¥e_bô_mask
[i-1] >> 1Ë+ ((
uöt64_t
)1 << 63);

459 
öô_c˚h
();

461 
	gpoöt_hash
 = 
√w
 
CCEH
(20);

462 
	gønge_hash_¨øy
 = 
√w
 
CCEH
[64+1];

472 
	ghâ4
 = 
hâ3
 = 
hâ5
 = 
hâ1
 = 
hâ2
 = 0;

473 
	gÂc2
 = 
Âc
 = 1;

476 
˛ón_hash
()

480 
dñëe
 
	gpoöt_hash
;

481 
	gdñëe
[] 
	gønge_hash_¨øy
;

483 
˛ón_c˚h
();

484 #ifde‡
hâ


485 
¥ötf
("hash\n");

486 
¥ötf
("poöàªad %ld %ld\n",
hâ1
/1000000000,htt1%1000000000);

487 
¥ötf
("poöàªadávg %ld %ld %ld\n",(
hâ1
/
Âc
)/1000000000,(htt1/fpc)%1000000000,fpc);

488 
¥ötf
("poöàªad2 %ld %ld\n",
hâ5
/1000000000,htt5%1000000000);

489 
¥ötf
("poöàªad2ávg %ld %ld %ld\n",(
hâ5
/
Âc2
)/1000000000,(htt5/fpc2)%1000000000,fpc2);

490 
¥ötf
("øngêªad %ld %ld\n",
hâ2
/1000000000,htt2%1000000000);

491 
¥ötf
("øngêö£π %ld %ld\n",
hâ4
/1000000000,htt4%1000000000);

492 
¥ötf
("poöàö£π %ld %ld\n",
hâ3
/1000000000,htt3%1000000000);

	@ph/hash.h

1 
	~<±hªad.h
>

3 
	~"globÆ.h
"

5 
	#INIT_OFFSET
 0

6 
	#SPLIT_OFFSET
 1

	)

10 
«me•a˚
 
	gPH


21 
VÆueE¡ry
 
föd_poöt_íåy
(* &
key_p
);

22 
VÆueE¡ry
* 
föd_‹_ö£π_poöt_íåy
(* &
key_p
,* 
u∆ock
);

23 
ö£π_poöt_íåy
(* 
key_p
,
VÆueE¡ry
 
ve
);

24 
u∆ock_íåy
(* 
u∆ock
);

28 
föd_ønge_íåy
(* 
key_p
,* 
c⁄töue_Àn
);

30 
föd_ønge_íåy2
(* 
key_p
,* 
c⁄töue_Àn
);

32 
ö£π_ønge_íåy
(* 
key_p
,
Àn
,
off£t
);

33 
ªmove_poöt_íåy
(* 
key_p
);

35 
öô_hash
();

36 
˛ón_hash
();

	@ph/kvs.h

1 
	~"../ã°/ã°.h
"

3 
	~"quîy.h
"

4 
	~"globÆ.h
"

5 
	~"d©a.h
"

6 
	~"hash.h
"

7 
	~"thªad.h
"

11 ˛as†
	cKVS_ph
 : 
public
 
KVS


13 
public
:

15 
vútuÆ
 
	$öô
(
num
,
key
,
vÆue
,
ªc‹d
)

17 
KVS
::
	`öô
(
num
,
key
,
vÆue
,
ªc‹d
);

18 
PH
::
	`ãmp_°©ic_c⁄f
(
num
,
key
,
vÆue
);

22 
	`¥ötf
("kvs_ph init\n");

25 
vútuÆ
 
	$ö£π_›
(* 
key
,* 
vÆue
)

27 
PH
::
	`ö£π_quîy
(
key
,
vÆue
);

28 
	}
}

29 
vútuÆ
 
	$ªad_›
(* 
key
,* 
ªsu…
)

31 
Àn
;

32 
PH
::
	`lookup_quîy
(
key
,
ªsu…
,&
Àn
);

33 
	}
}

34 
vútuÆ
 
	$upd©e_›
(* 
key
,* 
vÆue
)

36 
PH
::
	`ö£π_quîy
(
key
,
vÆue
);

37 
	}
}

38 
vútuÆ
 
	$dñëe_›
(* 
key
)

40 
PH
::
	`dñëe_quîy
(
key
);

41 
	}
}

42 
vútuÆ
 
	$sˇn_›
(* 
key
,
˙t
,** 
sˇn_ªsu…
)

44 
PH
::
Quîy
 
quîy
;

45 
PH
::
	`öô_quîy
(&
quîy
);

46 
quîy
.
key_p
 = 
key
;

47 
quîy
.
›
 = 6;

48 
PH
::
	`sˇn_quîy
(&
quîy
);

50 
i
,
Àn
;

51 
quîy
.
›
 = 7;

52 
i
=0;i<
˙t
;i++)

54 
PH
::
	`√xt_quîy
(&
quîy
,
sˇn_ªsu…
[
i
],&
Àn
);

56 
PH
::
	`‰ì_quîy
(&
quîy
);

57 
	}
}

59 
vútuÆ
 
	$˛ón
()

61 
PH
::
	`˛ón_d©a
();

62 
PH
::
	`˛ón_hash
();

63 
PH
::
	`˛ón_thªad
();

64 
	}
}

66 
vútuÆ
 
	$run
(
Te°Quîy
* 
tqa
, 
›s
)

68 
i
,
Àn
,
j
;

69 * 
ªsu…
;

70 
ªsu…
 = (*)
	`mÆloc
((*)*1000);

71 
i
=0;i<
›s
;i++)

73 i‡(
tqa
[
i
].
›
 == 1)

74 
PH
::
	`ö£π_quîy
(
tqa
[
i
].
key
,tqa[i].
vÆue
);

75 i‡(
tqa
[
i
].
›
 == 2)

76 
PH
::
	`lookup_quîy
(
tqa
[
i
].
key
,
ªsu…
,&
Àn
);

77 i‡(
tqa
[
i
].
›
 == 3)

78 
PH
::
	`ö£π_quîy
(
tqa
[
i
].
key
,tqa[i].
vÆue
);

79 i‡(
tqa
[
i
].
›
 == 4)

80 
PH
::
	`dñëe_quîy
(
tqa
[
i
].
key
);

81 i‡(
tqa
[
i
].
›
 == 5)

83 
PH
::
Quîy
 
quîy
;

84 
PH
::
	`öô_quîy
(&
quîy
);

85 
quîy
.
key_p
 = 
tqa
[
i
].
key
;

86 
quîy
.
›
 = 6;

87 
PH
::
	`sˇn_quîy
(&
quîy
);

89 
Àn
;

90 
quîy
.
›
 = 7;

91 
j
=0;j<
tqa
[
i
].
˙t
;j++)

93 
PH
::
	`√xt_quîy
(&
quîy
,
ªsu…
,&
Àn
);

95 
PH
::
	`‰ì_quîy
(&
quîy
);

98 
	`‰ì
(
ªsu…
);

99 
	}
}

100 
vútuÆ
 
	$ª£t
()

102 
PH
::
	`ª£t_thªad
();

103 
	}
}

104 
vútuÆ
 
	$exô_thªad
()

106 
PH
::
	`exô_thªad
();

107 
	}
}

	@ph/query.c

1 
	~"quîy.h
"

2 
	~"hash.h
"

3 
	~"d©a.h
"

4 
	~"thªad.h
"

6 #i‚de‡
NULL


7 
	#NULL
 0

	)

10 
	~<°dio.h
>

11 
	~<°dlib.h
>

12 
	~<°rög.h
>

14 
	~<x86öåö.h
>

16 
	~<muãx
>

19 
	#¥öt
 0

	)

22 
«me•a˚
 
	gPH


25 
uöt64_t
 
qâ1
,
qâ2
,
qâ3
,
qâ4
,
qâ5
,
qâ6
,
qâ7
,
qâ8
;

27 
¥öt_quîy
(
Quîy
* 
quîy
)

29 
¥ötf
("print query\n");

30 
	gi
;

31 
¥ötf
("key %d ",
quîy
->
key_Àn
);

32 
	gi
=0;i<8;i++)

33 
¥ötf
("[%d]",()
quîy
->
key_p
[
i
]);

34 
¥ötf
("\n");

35 
¥ötf
("vÆuê%d ",
quîy
->
vÆue_Àn
);

36 
	gi
=0;i<
	gquîy
->
	gvÆue_Àn
;i++)

37 
¥ötf
("[%d]",()
quîy
->
vÆue_p
[
i
]);

38 
¥ötf
("\n");

53 
öô_quîy
(
Quîy
* 
quîy
)

55 
	gquîy
->
	gnode_d©a
 = 
NULL
;

56 
	gquîy
->
	gsˇn_off£t
 = 
TAIL_OFFSET
;

58 
	gquîy
->
	gsˇn_lock
 = 0;

61 
lookup_quîy
(* &
key_p
, * &
ªsu…_p
,* 
ªsu…_Àn_p
)

63 #ifde‡
qâ


64 
time•ec
 
	gts1
,
	gts2
,
	gts3
,
	gts4
;

65 
˛ock_gëtime
(
CLOCK_MONOTONIC
,&
ts1
);

66 
_mm_m„n˚
();

69 
VÆueE¡ry
 
	gve
;

71 c⁄° 
	gkls
 = 
key_size
+
Àn_size
;

73 
upd©e_‰ì_˙t
();

74 #ifde‡
qâ


78 
	gve
 = 
föd_poöt_íåy
(
key_p
);

79 #ifde‡
qâ


80 
_mm_m„n˚
();

81 
˛ock_gëtime
(
CLOCK_MONOTONIC
,&
ts4
);

83 
	gqâ6
+=(
ts4
.
tv_£c
-
ts1
.tv_£c)*1000000000+ts4.
tv_n£c
-ts1.tv_nsec;

86 #ifde‡
qâ


87 
˛ock_gëtime
(
CLOCK_MONOTONIC
,&
ts3
);

88 
_mm_m„n˚
();

91 i‡(
	gve
.
	gnode_off£t
 =0|| 
ve
.
kv_off£t
 == 0)

94 
mem˝y
(
ªsu…_p
,
em±y
,
em±y_Àn
);

95 *
	gªsu…_Àn_p
 = 
em±y_Àn
;

121 *
	gªsu…_Àn_p
 = 
ve
.
Àn
;

124 i‡((*
	gªsu…_Àn_p
 & (1 << 15)) != 0)

127 
mem˝y
(
ªsu…_p
,
em±y
,
em±y_Àn
);

128 *
	gªsu…_Àn_p
 = 
em±y_Àn
;

129 *
	gªsu…_Àn_p
 = 0;

137 
mem˝y
(
ªsu…_p
,(*)
off£t_to_node_d©a
(
ve
.
node_off£t
)+ve.
kv_off£t
+
kls
,*
ªsu…_Àn_p
);

144 #ifde‡
qâ


145 
_mm_m„n˚
();

146 
˛ock_gëtime
(
CLOCK_MONOTONIC
,&
ts4
);

147 
	gqâ7
+=(
ts4
.
tv_£c
-
ts3
.tv_£c)*1000000000+ts4.
tv_n£c
-ts3.tv_nsec;

148 
	gqâ8
+=(
ts4
.
tv_£c
-
ts1
.tv_£c)*1000000000+ts4.
tv_n£c
-ts1.tv_nsec;

171 
dñëe_quîy
(* 
key_p
)

174 
upd©e_‰ì_˙t
();

177 * 
	gkv_p
;

178 
VÆueE¡ry
 
	gve
;

179 
	goff£t
;

186 
	gve
 = 
föd_poöt_íåy
(
key_p
);

187 i‡(
	gve
.
	gnode_off£t
 == 0)

192 i‡(
öc_ªf
(
ve
.
node_off£t
))

194 
	gkv_p
 = (*)
off£t_to_node_d©a
(
ve
.
node_off£t
Ë+ ve.
kv_off£t
;

195 i‡(*((
	guöt64_t
*)
	gkv_p
Ë!*((
uöt64_t
*)
key_p
))

197 
dec_ªf
(
ve
.
node_off£t
);

211 
dñëe_kv
(
kv_p
);

212 
övÆid©e_kv
(
ve
.
node_off£t
,ve.
kv_off£t
);

213 
ªmove_poöt_íåy
(
key_p
);

218 
dec_ªf
(
ve
.
node_off£t
);

239 
	#kìp_lock


	)

241 
ö£π_quîy
(* 
key_p
, * 
vÆue_p
)

243 i‡(
	g¥öt
)

244 
¥ötf
("insert\n");

250 * 
	gkv_p
;

252 
VÆueE¡ry
 
	gve
;

253 
VÆueE¡ry
* 
	gvï
;

254 * 
	gu∆ock
;

257 
	gc⁄töue_Àn
;

258 c⁄° 
	gvÆue_Àn
 = 
vÆue_size
;

259 
	gc⁄töue_Àn
 = 0;

261 
	grv
;

263 
	gã°
=0,
	gã°2
=0;

264 
	gz
 = 0;

265 
	gﬁd_kv_off£t
;

266 #ifde‡
qâ


267 
time•ec
 
	gts1
,
	gts2
,
	gts3
,
	gts4
,
	gts5
,
	gts6
;

269 
˛ock_gëtime
(
CLOCK_MONOTONIC
,&
ts1
);

270 
_mm_m„n˚
();

272 
upd©e_‰ì_˙t
();

277 i‡(
	g¥öt
)

278 
¥ötf
("insertÜoop\n");

279 #ifde‡
qâ


280 
˛ock_gëtime
(
CLOCK_MONOTONIC
,&
ts3
);

281 
_mm_m„n˚
();

290 #ifde‡
kìp_lock


291 
	gvï
 = 
föd_‹_ö£π_poöt_íåy
(
key_p
,&
u∆ock
);

293 
	gvï
 = &
ve
;

294 *
	gvï
 = 
föd_poöt_íåy
(
key_p
);

296 
	gﬁd_kv_off£t
 = 0;

298 
	gvï
->
	gnode_off£t
 != 0)

310 i‡(
öc_ªf
(
vï
->
node_off£t
))

334 
rv
 = 
check_size
(
vï
->
node_off£t
,
vÆue_Àn
);

335 
	gﬁd_kv_off£t
 = 
vï
->
kv_off£t
;

343 #ifde‡
kìp_lock


344 
u∆ock_íåy
(
u∆ock
);

345 
	gvï
 = 
föd_‹_ö£π_poöt_íåy
(
key_p
,&
u∆ock
);

347 *
	gvï
 = 
föd_poöt_íåy
(
key_p
);

353 
	gvï
 = &
ve
;

354 
	gvï
->
	gnode_off£t
 = 0;

358 i‡(
	gvï
->
	gnode_off£t
 == 0)

361 i‡(
¥öt
)

362 
¥ötf
("findÇode\n");

365 i‡((
	gve
.
	gnode_off£t
 = 
föd_ønge_íåy2
(
key_p
,&
c⁄töue_Àn
)) == 0)

369 
¥ötf
("---------------split collision\n");

371 
	gã°
++;

372 i‡(
	gã°
 > 1000)

374 
¥ötf
("toÿm™y faû %lu\n",*((
uöt64_t
*)
key_p
));

377 
	gã°
 = 0;

381 i‡(
öc_ªf
(
ve
.
node_off£t
))

405 
	grv
 = 
check_size
(
ve
.
node_off£t
,
vÆue_Àn
);

427 
	gve
 = *
vï
;

430 #ifde‡
qâ


431 
_mm_m„n˚
();

432 
˛ock_gëtime
(
CLOCK_MONOTONIC
,&
ts4
);

433 
	gqâ2
+=(
ts4
.
tv_£c
-
ts3
.tv_£c)*1000000000+ts4.
tv_n£c
-ts3.tv_nsec;

437 #ifde‡
qâ


438 
˛ock_gëtime
(
CLOCK_MONOTONIC
,&
ts3
);

439 
_mm_m„n˚
();

441 i‡(
	grv
 >= 0)

443 #ifde‡
qâ


444 
˛ock_gëtime
(
CLOCK_MONOTONIC
,&
ts5
);

446 * 
	gΩ
;

449 
	gΩ
 = 
ö£π_kv
(
ve
.
node_off£t
,
key_p
,
vÆue_p
,
vÆue_Àn
 ,
rv
);

453 
	gve
.
	gkv_off£t
 = (*)
off£t_to_node_d©a
(
ve
.
node_off£t
)-
Ω
;

454 
	gve
.
	gÀn
 = 
vÆue_Àn
;

456 #ifde‡
kìp_lock


457 *
	gvï
 = 
ve
;

458 
u∆ock_íåy
(
u∆ock
);

460 
ö£π_poöt_íåy
(
key_p
,
ve
);

462 i‡(
	gﬁd_kv_off£t
)

463 
övÆid©e_kv
(
ve
.
node_off£t
,
ﬁd_kv_off£t
);

476 
dec_ªf
(
ve
.
node_off£t
);

477 #ifde‡
qâ


478 
_mm_m„n˚
();

479 
˛ock_gëtime
(
CLOCK_MONOTONIC
,&
ts6
);

480 
	gqâ4
+=(
ts6
.
tv_£c
-
ts5
.tv_£c)*1000000000+ts6.
tv_n£c
-ts5.tv_nsec;

481 
˛ock_gëtime
(
CLOCK_MONOTONIC
,&
ts4
);

482 
	gqâ3
+=(
ts4
.
tv_£c
-
ts3
.tv_£c)*1000000000+ts4.
tv_n£c
-ts3.tv_nsec;

488 #ifde‡
qâ


489 
˛ock_gëtime
(
CLOCK_MONOTONIC
,&
ts5
);

491 #ifde‡
kìp_lock


492 
u∆ock_íåy
(
u∆ock
);

510 i‡(
	gc⁄töue_Àn
 == 0)

512 
rv
 = 
föd_ønge_íåy2
(
key_p
,&
c⁄töue_Àn
);

515 i‡(
	grv
 == 0)

516 
¥ötf
("rv == 0\n");

519 i‡(
	gc⁄töue_Àn
 < 
	gkey_bô
)

521 i‡(
	g¥öt
)

522 
¥ötf
("split\n");

538 i‡((
	grv
 = 
•lô
(
ve
.
node_off£t
,
key_p
,
c⁄töue_Àn
))<0)

540 
¥ötf
("•lôÜock faûed %d\n",
ve
.
node_off£t
);

542 
dec_ªf
(
ve
.
node_off£t
);

543 
	gã°
++;

544 i‡(
	gã°
 > 1000)

546 
	gt
;

547 
¥ötf
("???\n");

557 
	gc⁄töue_Àn
++;

561 i‡(
	g¥öt
)

562 
¥ötf
("splitÉnd\n");

573 
com∑˘
(
ve
.
node_off£t
);

597 #ifde‡
qâ


598 
_mm_m„n˚
();

599 
˛ock_gëtime
(
CLOCK_MONOTONIC
,&
ts6
);

600 
	gqâ5
+=(
ts6
.
tv_£c
-
ts5
.tv_£c)*1000000000+ts6.
tv_n£c
-ts5.tv_nsec;

603 i‡(
	g¥öt
)

604 
¥ötf
("insertÑetry\n");

605 #ifde‡
qâ


606 
_mm_m„n˚
();

608 
˛ock_gëtime
(
CLOCK_MONOTONIC
,&
ts4
);

609 
	gqâ3
+=(
ts4
.
tv_£c
-
ts3
.tv_£c)*1000000000+ts4.
tv_n£c
-ts3.tv_nsec;

612 #ifde‡
qâ


613 
_mm_m„n˚
();

614 
˛ock_gëtime
(
CLOCK_MONOTONIC
,&
ts2
);

615 
	gqâ1
+=(
ts2
.
tv_£c
-
ts1
.tv_£c)*1000000000+ts2.
tv_n£c
-ts1.tv_nsec;

621 
dñëe_quîy_sˇn_íåy
(
Quîy
* 
quîy
)

623 
Node_mëa
* 
	gnode
;

624 c⁄° 
	gz
 = 0;

629 
©_lock
(
quîy
->
sˇn_lock
);

630 i‡(
	gquîy
->
	gsˇn_off£t
 !
TAIL_OFFSET
)

632 
node
 = 
off£t_to_node
(
quîy
->
sˇn_off£t
);

635 i‡(
åy_©_lock
(
node
->
°©e
) == 0)

637 
©_u∆ock
(
quîy
->
sˇn_lock
);

650 
dñëe_sˇn_íåy
(
quîy
->
sˇn_off£t
,query);

651 
	gquîy
->
	gsˇn_off£t
 = 
TAIL_OFFSET
;

653 
©_u∆ock
(
node
->
°©e
);

655 
©_u∆ock
(
quîy
->
sˇn_lock
);

663 
©_u∆ock
(
quîy
->
sˇn_lock
);

671 
sˇn_quîy
(
Quîy
* 
quîy
)

681 
VÆueE¡ry
 
	gve
;

682 
	gc⁄töue_Àn
;

683 
Node
* 
	gnode_d©a
;

685 
upd©e_‰ì_˙t
();

687 i‡(
	gquîy
->
	gnode_d©a
 =
NULL
)

688 
quîy
->
node_d©a
 = (
Node
*)
mÆloc
((Node));

690 
dñëe_quîy_sˇn_íåy
(
quîy
);

692 
	gnode_d©a
 = (
Node
*)
quîy
->
node_d©a
;

700 
	gve
 = 
föd_poöt_íåy
(
quîy
->
key_p
);

702 i‡(
	gve
.
	gnode_off£t
 == 0)

706 i‡(
åy_h¨d_lock
(
ve
.
node_off£t
))

718 *
	gnode_d©a
 = *
off£t_to_node_d©a
(
ve
.
node_off£t
);

719 
ö£π_sˇn_li°
(
off£t_to_node
(
ve
.
node_off£t
),(*)
quîy
);

720 
h¨d_u∆ock
(
ve
.
node_off£t
);

721 
s‹t_node
(
node_d©a
,(*)(
quîy
->
s‹ãd_ödex
),&(quîy->
ödex_max
));

724 
	gquîy
->
	gödex_num
 = 0;

727 
©_lock
(
quîy
->
sˇn_lock
);

728 
	gquîy
->
	gsˇn_off£t
 = 
ve
.
node_off£t
;

730 
	gquîy
->
	gsˇn_lock
 = 0;

738 *((
	guöt64_t
*)(
	gnode_d©a
->
	gbuf„r
+
	gquîy
->
	gs‹ãd_ödex
[
quîy
->
ödex_num
])Ë< *((uöt64_t*)quîy->
	gkey_p
))

740 
	gquîy
->
	gödex_num
++;

741 i‡(
	gquîy
->
	gödex_num
 >
quîy
->
ödex_max
)

743 i‡(
adv™˚_off£t
((*)
quîy
) < 0)

749 
s‹t_node
(
node_d©a
,(*)(
quîy
->
s‹ãd_ödex
),&(quîy->
ödex_max
));

750 
	gquîy
->
	gödex_num
=0;

759 
	gc⁄töue_Àn
 = 0;

761 
	goff£t
,
	goff£t2
;

765 
	goff£t
 = 
föd_ønge_íåy2
(
quîy
->
key_p
,&
c⁄töue_Àn
);

771 i‡(
	goff£t
 == 0)

773 i‡(
åy_h¨d_lock
(
off£t
))

775 
	goff£t2
 = 
föd_ønge_íåy2
(
quîy
->
key_p
,&
c⁄töue_Àn
);

776 i‡(
	goff£t
 !
off£t2
)

778 
h¨d_u∆ock
(
off£t
);

779 
	goff£t
 = 0;

784 *
	gnode_d©a
 = *
off£t_to_node_d©a
(
off£t
);

785 
ö£π_sˇn_li°
(
off£t_to_node
(
off£t
),(*)
quîy
);

786 
h¨d_u∆ock
(
off£t
);

787 
s‹t_node
(
node_d©a
,(*)(
quîy
->
s‹ãd_ödex
),&(quîy->
ödex_max
));

790 
	gquîy
->
	gödex_num
 = 0;

793 
©_lock
(
quîy
->
sˇn_lock
);

794 
	gquîy
->
	gsˇn_off£t
 = 
off£t
;

796 
	gquîy
->
	gsˇn_lock
 = 0;

804 *((
	guöt64_t
*)(
	gnode_d©a
->
	gbuf„r
+
	gquîy
->
	gs‹ãd_ödex
[
quîy
->
ödex_num
])Ë< *((uöt64_t*)quîy->
	gkey_p
))

806 
	gquîy
->
	gödex_num
++;

807 i‡(
	gquîy
->
	gödex_num
 >
quîy
->
ödex_max
)

809 i‡(
adv™˚_off£t
((*)
quîy
) < 0)

815 
s‹t_node
(
node_d©a
,(*)(
quîy
->
s‹ãd_ödex
),&(quîy->
ödex_max
));

816 
	gquîy
->
	gödex_num
=0;

826 
¥ötf
("never should come here\b");

831 
√xt_quîy
(
Quîy
* 
quîy
,* 
ªsu…_p
,* 
ªsu…_Àn_p
)

833 
upd©e_‰ì_˙t
();

835 i‡(
	gquîy
->
	gsˇn_off£t
 =
TAIL_OFFSET
)

838 
mem˝y
(
ªsu…_p
,
em±y
,
em±y_Àn
);

839 *
	gªsu…_Àn_p
 = 
em±y_Àn
;

842 
Node
* 
	gnode_d©a
 = (Node*)
quîy
->
node_d©a
;

844 *
	gªsu…_Àn_p
 = *((
uöt16_t
*)(
node_d©a
->
buf„r
+
quîy
->
s‹ãd_ödex
[quîy->
ödex_num
]+
key_size
));

857 *
	gªsu…_Àn_p
+=8+2;

858 
mem˝y
(
ªsu…_p
,
node_d©a
->
buf„r
+
quîy
->
s‹ãd_ödex
[quîy->
ödex_num
],*
ªsu…_Àn_p
);

862 
	gquîy
->
	gödex_num
++;

863 
	gquîy
->
	gödex_num
 >
quîy
->
ödex_max
)

866 i‡(
adv™˚_off£t
((*)
quîy
) < 0)

873 
s‹t_node
(
node_d©a
,(*)(
quîy
->
s‹ãd_ödex
),&(quîy->
ödex_max
));

874 
	gquîy
->
	gödex_num
=0;

880 
‰ì_quîy
(
Quîy
* 
quîy
)

895 
dñëe_quîy_sˇn_íåy
(
quîy
);

896 
‰ì
(
quîy
->
node_d©a
);

	@ph/query.h

1 #¥agm®
⁄˚


3 
	#QUERY_BUFFER
 10000

	)

5 
	~<±hªad.h
>

6 
	~<©omic
>

10 
«me•a˚
 
	gPH


13 
	sQuîy


32 * 
	gkey_p
;

33 * 
	gvÆue_p
;

34 
	g›
;

35 
	gkey_Àn
,
	gvÆue_Àn
;

37 
	gªf_off£t
;

39 
	gsˇn_off£t
;

40 * 
	gnode_d©a
;

43 
	gs‹ãd_ödex
[100];

44 
	gödex_num
,
	gödex_max
;

47 
	g°d
::
©omic
<
uöt8_t
> 
sˇn_lock
;

53 
öô_quîy
(
Quîy
* 
quîy
);

54 
ª£t_quîy
(
Quîy
* 
quîy
);

56 
‰ì_quîy
(
Quîy
* 
quîy
);

58 
lookup_quîy
(* &
key_p
, * &
ªsu…_p
,* 
ªsu…_Àn_p
);

59 
dñëe_quîy
(* 
key_p
);

60 
ö£π_quîy
(* 
key_p
, * 
vÆue_p
);

61 
sˇn_quîy
(
Quîy
* 
quîy
);

62 
√xt_quîy
(
Quîy
* 
quîy
,* 
ªsu…_p
,* 
ªsu…_Àn_p
);

	@ph/thread.c

1 
	~"thªad.h
"

2 
	~"d©a.h
"

3 
	~"globÆ.h
"

5 
	~<°dlib.h
>

7 
	~<°dio.h
>

9 
	#FCCT
 1000

10 

	)

12 
«me•a˚
 
	gPH


15 
PH_Thªad
* 
	gthªad_li°
;

17 
thªad_loˇl
 
PH_Thªad
* 
	gmy_thªad
 = 
NULL
;

20 vﬁ©ûê
‰ì_˙t
;

21 
num_of_thªad
;

23 vﬁ©ûê
£g_‰ì_˙t
;

27 
	g°d
::
©omic
<
uöt8_t
> 
thªad_lock
;

30 
ª£t_thªad
()

32 
	gi
;

33 
	gi
=0;i<
	gnum_of_thªad
;i++)

34 
	gthªad_li°
[
i
].
	g£g_‰ì_˙t
 = 
thªad_li°
[i].
‰ì_˙t
 = 999999999;

37 
exô_thªad
()

39 
	gi
;

40 
±hªad_t
 
	g±
;

41 
	g±
 = 
±hªad_£lf
();

42 
	gi
=0;i<
	gnum_of_thªad
;i++)

44 i‡(
±hªad_equÆ
(
thªad_li°
[
i
].
tid
,
±
))

47 
	gthªad_li°
[
i
].
	g£g_‰ì_˙t
 = 
thªad_li°
[i].
‰ì_˙t
 = 999999999;

51 
	gmy_thªad
 = 
NULL
;

55 
öô_thªad
()

57 
	gi
;

59 
	gthªad_li°
 = (
PH_Thªad
*)
mÆloc
(
num_of_thªad
 * (PH_Thread) * 2);

60 
	gi
=0;i<
	gnum_of_thªad
;i++)

61 
	gthªad_li°
[
i
].
	g£g_‰ì_˙t
 = 
thªad_li°
[i].
‰ì_˙t
 = 999999999;

63 
	gthªad_lock
 = 0;

66 
˛ón_thªad
()

69 
‰ì
(
thªad_li°
);

72 
√w_thªad
()

74 
	gi
;

75 
±hªad_t
 
	g±
;

76 
	g±
 = 
±hªad_£lf
();

78 
©_lock
(
thªad_lock
);

79 
	gi
=0;i<
	gnum_of_thªad
;i++)

81 i‡(
	gthªad_li°
[
i
].
	g‰ì_˙t
 == 999999999)

83 
thªad_li°
[
i
].
tid
 = 
±
;

84 
	gthªad_li°
[
i
].
	g‰ì_˙t
 = 
‰ì_˙t
;

85 
	gthªad_li°
[
i
].
	g£g_‰ì_˙t
 = 
£g_‰ì_˙t
;

86 
	gmy_thªad
 = &
thªad_li°
[
i
];

92 
©_u∆ock
(
thªad_lock
);

95 
upd©e_‰ì_˙t
()

97 i‡(
	gmy_thªad
)

102 
	gmy_thªad
->
	g‰ì_˙t
 = 
‰ì_˙t
;

103 
	gmy_thªad
->
	g£g_‰ì_˙t
 = 
£g_‰ì_˙t
;

107 
√w_thªad
();

109 
	gi
;

110 
±hªad_t
 
	g±
;

112 
	g±
 = 
±hªad_£lf
();

113 
	gi
=0;i<
	gnum_of_thªad
;i++)

115 i‡(
±hªad_equÆ
(
thªad_li°
[
i
].
tid
,
±
))

117 
	gthªad_li°
[
i
].
	g‰ì_˙t
 = 
‰ì_˙t
;

118 
	gthªad_li°
[
i
].
	g£g_‰ì_˙t
 = 
£g_‰ì_˙t
;

122 
√w_thªad
();

126 
mö_‰ì_˙t
()

128 
	gi
;

129 
	gmö
=999999999;

130 
	gi
=0;i<
	gnum_of_thªad
;i++)

132 i‡(
	gmö
 > 
	gthªad_li°
[
i
].
	g‰ì_˙t
)

133 
	gmö
 = 
thªad_li°
[
i
].
‰ì_˙t
;

135 i‡(
	gmö
 == 999999999)

136  
‰ì_˙t
;

137  
	gmö
;

140 
¥öt_thªad_öfo
()

142 
	gi
;

143 
	gi
=0;i<
	gnum_of_thªad
;i++)

145 i‡(
	gthªad_li°
[
i
].
	g‰ì_˙t
 != 999999999)

147 
¥ötf
("thªad %d %d\n",
i
,
thªad_li°
[i].
‰ì_˙t
);

153 
mö_£g_‰ì_˙t
()

155 
	gi
;

156 
	gmö
=999999999;

157 
	gi
=0;i<
	gnum_of_thªad
;i++)

159 i‡(
	gmö
 > 
	gthªad_li°
[
i
].
	g£g_‰ì_˙t
)

160 
	gmö
 = 
thªad_li°
[
i
].
£g_‰ì_˙t
;

162 i‡(
	gmö
 == 999999999)

163  
£g_‰ì_˙t
;

164  
	gmö
;

167 
check_¶ow
()

169 i‡(
	g‰ì_˙t
-
	gmy_thªad
->free_cnt > 500)

	@ph/thread.h

1 
	~<±hªad.h
>

3 
«me•a˚
 
	gPH


6 
	sPH_Thªad


8 
±hªad_t
 
	gtid
;

9 
	g‰ì_˙t
;

10 
	g£g_‰ì_˙t
;

13 
ª£t_thªad
();

14 
exô_thªad
();

15 
upd©e_‰ì_˙t
();

16 
mö_‰ì_˙t
();

17 
mö_£g_‰ì_˙t
();

18 
öô_thªad
();

19 
˛ón_thªad
();

21 
¥öt_thªad_öfo
();

22 
check_¶ow
();

	@test/test.c

1 
	~<°dio.h
>

2 
	~<°rög.h
>

3 
	~<°dlib.h
>

4 
	~<±hªad.h
>

6 
	~<time.h
>

8 
	~"ã°.h
"

10 #ifde‡
BUILD_PH


11 
	~"../ph/kvs.h
"

14 #ifde‡
BUILD_Vùî


15 
	~"../vùî/kvs.h
"

18 #ifde‡
BUILD_PMEMKV


19 
	~<libpmemkv.h
>

20 
	~"../pmemkv/kvs.h
"

23 #ifde‡
BUILD_PMEMROCKSDB


24 
	~"../pmem-rocksdb/kvs.h
"

27 
	sThªad_∑ømëî


29 
	mä
;

32 
	gty≥
;

34 
	gnum_of_thªads
;

35 
	gw‹klﬂd_key_size
;

36 
	gw‹klﬂd_vÆue_size
;

37 
	g›s
,
	gt›s
;

39 
Te°Quîy
** 
	gquîõs
;

41 * 
	gkey_¨øy
;

43 ** 
	gvÆue_¨øy
;

48 
KVS
* 
	gkvs
;

50 * 
	gdummy_±r
;

52 
	#LINE_LENGTH
 2000

	)

54 
	$lﬂd_w‹klﬂd
(* 
∑th
)

56 
FILE
* 
ö
;

57 
›
[100];

58 
löe
[
LINE_LENGTH
];

59 
i
,
t
,
o
,
j
;

60 * 
key_±r
;

61 * 
vÆue_±r
;

62 
key_ty≥
;

63 
n32
;

65 
ö
 = 
	`f›í
(
∑th
,"r");

67 i‡(
ö
 =
NULL
)

68 
	`¥ötf
("file open fail\n");

71 
	`fgës
(
löe
,
LINE_LENGTH
,
ö
);

72 
	`ssˇnf
(
löe
,"%d %d\n",&
›s
,&
key_ty≥
);

74 
t›s
 = 
›s
/
num_of_thªads
+1;

76 
quîõs
 = (
Te°Quîy
**)
	`mÆloc
((Te°Quîy*Ë* 
num_of_thªads
);

77 
i
=0;i<
num_of_thªads
;i++)

78 
quîõs
[
i
] = (
Te°Quîy
*)
	`mÆloc
((Te°QuîyË* 
t›s
);

80 
key_¨øy
 = (*)
	`mÆloc
(
w‹klﬂd_key_size
 * 
›s
);

83 
vÆue_¨øy
 = (**)
	`mÆloc
((*Ë* 
›s
);

84 
i
=0;i<
›s
;i++)

85 
vÆue_¨øy
[
i
] = (*)
	`mÆloc
(
w‹klﬂd_vÆue_size
);

87 
dummy_±r
 = (*)
	`mÆloc
(
w‹klﬂd_vÆue_size
);

89 
	`mem£t
(
key_¨øy
,0,
w‹klﬂd_key_size
 * 
›s
);

92 
i
=0;i<
w‹klﬂd_vÆue_size
;i++)

93 
dummy_±r
[
i
] = i%256;

106 
t
 = 0;

107 
o
 = 0;

108 
key_±r
 = 
key_¨øy
;

111 
i
=0;i<
›s
;i++)

113 
	`fgës
(
löe
,
LINE_LENGTH
,
ö
);

114 i‡(
key_ty≥
 == 0)

116 
	`ssˇnf
(
löe
,"%†%s",
›
,
key_±r
);

118 i‡(
key_ty≥
 == 1 || key_type == 2)

120 
	`ssˇnf
(
löe
,"%†%ld",
›
,(
uöt64_t
*)
key_±r
);

124 i‡(
	`°rcmp
(
›
,"INSERT") == 0)

125 
quîõs
[
t
][
o
].
›
 = 1;

126 i‡(
	`°rcmp
(
›
,"READ") == 0)

127 
quîõs
[
t
][
o
].
›
 = 2;

128 i‡(
	`°rcmp
(
›
,"UPDATE") == 0)

129 
quîõs
[
t
][
o
].
›
 = 3;

130 i‡(
	`°rcmp
(
›
,"DELETE") == 0)

131 
quîõs
[
t
][
o
].
›
 = 4;

132 i‡(
	`°rcmp
(
›
,"SCAN") == 0)

134 
quîõs
[
t
][
o
].
›
 = 5;

135 
quîõs
[
t
][
o
].
˙t
 = 100;

139 
	`¥ötf
("opÉrror\n");

140 
quîõs
[
t
][
o
].
›
 = 0;

143 
quîõs
[
t
][
o
].
key
 = 
key_±r
;

144 
key_±r
+=
w‹klﬂd_key_size
;

146 i‡(
quîõs
[
t
][
o
].
›
 == 1 || queries[t][o].op == 3)

148 i‡(
key_ty≥
 == 2)

150 
quîõs
[
t
][
o
].
vÆue
 = 
dummy_±r
;

154 
n32
 = 0;

155 
j
=0;j<
LINE_LENGTH
;j++)

157 i‡(
löe
[
j
] == ' ')

159 
n32
++;

160 i‡(
n32
 == 2)

164 
j
++;

165 
	`mem˝y
(
vÆue_¨øy
[
i
],
löe
+
j
,
w‹klﬂd_vÆue_size
);

168 
quîõs
[
t
][
o
].
vÆue
 = 
vÆue_¨øy
[
i
];

173 i‡(
quîõs
[
t
][
o
].
›
 == 5)

175 
n32
 = 0;

176 
j
=0;j<
LINE_LENGTH
;j++)

178 i‡(
löe
[
j
] == ' ')

180 
n32
++;

181 i‡(
n32
 == 2)

185 
j
++;

187 
	`ssˇnf
(
löe
+
j
,"%d",&
quîõs
[
t
][
o
].
˙t
);

193 
t
++;

194 i‡(
t
 =
num_of_thªads
)

196 
t
=0;

197 
o
++;

202 ;
i
<
t›s
*
num_of_thªads
;i++)

204 
quîõs
[
t
][
o
].
›
 = 0;

205 
t
++;

209 
	`f˛o£
(
ö
);

210 
	}
}

212 * 
	$w‹kî_fun˘i⁄
(* 
thªad_∑ømëî
)

214 
i
,
ä
;

215 
Thªad_∑ømëî
* 
ç
;

217 
ç
 = (
Thªad_∑ømëî
*)
thªad_∑ømëî
;

218 
ä
 = 
ç
->tn;

236 
kvs
->
	`run
(
quîõs
[
ä
],
t›s
);

237 
kvs
->
	`exô_thªad
();

238  
NULL
;

239 
	}
}

241 
	$run
()

243 
i
;

245 
±hªad_t
* 
±hªad_¨øy
;

246 
Thªad_∑ømëî
* 
thªad_∑ømëî_¨øy
;

248 
time•ec
 
ts1
,
ts2
;

249 
t
;

251 
±hªad_¨øy
 = (
±hªad_t
*)
	`mÆloc
(’thªad_tË* 
num_of_thªads
);

252 
thªad_∑ømëî_¨øy
 = (
Thªad_∑ømëî
*)
	`mÆloc
((Thªad_∑ømëîË* 
num_of_thªads
);

254 
	`˛ock_gëtime
(
CLOCK_MONOTONIC
,&
ts1
);

255 
i
=0;i<
num_of_thªads
;i++)

257 
thªad_∑ømëî_¨øy
[
i
].
ä
 = i;

258 
	`±hªad_¸óã
(&
±hªad_¨øy
[
i
],
NULL
,
w‹kî_fun˘i⁄
,(*)&
thªad_∑ømëî_¨øy
[i]);

261 
i
=0;i<
num_of_thªads
;i++)

263 
	`±hªad_joö
(
±hªad_¨øy
[
i
],
NULL
);

265 
	`˛ock_gëtime
(
CLOCK_MONOTONIC
,&
ts2
);

266 
t
 = (
ts2
.
tv_£c
-
ts1
.tv_£c)*1000000000 +Ås2.
tv_n£c
-ts1.tv_nsec;

268 
	`‰ì
(
thªad_∑ømëî_¨øy
);

269 
	`‰ì
(
±hªad_¨øy
);

271 
	`¥ötf
("result\n");

272 
	`¥ötf
("---------------------------------\n");

273 
	`¥ötf
("thªad %d\n",
num_of_thªads
);

274 
	`¥ötf
("›†%d\n",
›s
);

275 
	`¥ötf
("ru¿timê%Œd %Œd\n",
t
/1000000000,t%1000000000);

276 
	`¥ötf
("---------------------------------\n");

278 
	}
}

280 
	$˛ón
()

284 
i
,
j
;

285 
i
=0;i<
num_of_thªads
;i++)

286 
	`‰ì
(
quîõs
[
i
]);

287 
	`‰ì
(
quîõs
);

289 
	`‰ì
(
key_¨øy
);

293 
i
=0;i<
›s
;i++)

294 
	`‰ì
(
vÆue_¨øy
[
i
]);

295 
	`‰ì
(
vÆue_¨øy
);

309 
	}
}

311 
	$maö
()

314 
ty≥
;

315 
∑th
[1000];

316 
öô
;

324 
	`¥ötf
("num_of_threads\n");

325 
	`sˇnf
("%d",&
num_of_thªads
);

327 
	`¥ötf
("key_size\n");

328 
	`sˇnf
("%d",&
w‹klﬂd_key_size
);

330 
	`¥ötf
("value_size\n");

331 
	`sˇnf
("%d",&
w‹klﬂd_vÆue_size
);

353 
öô
 = 0;

356 
	`¥ötf
("workload fileÇame orÉxit\n");

357 
	`sˇnf
("%s",
∑th
);

358 i‡(
	`°rcmp
(
∑th
,"exit") == 0)

361 
	`¥ötf
("loading workload\n");

362 
	`lﬂd_w‹klﬂd
(
∑th
);

363 
	`¥ötf
("loaded\n");

365 i‡(
öô
 == 0)

367 #ifde‡
BUILD_PH


368 
	`¥ötf
("kvs_ph\n");

369 
kvs
 = 
√w
 
	`KVS_ph
();

370 #ñi‡
BUILD_Vùî


371 
	`¥ötf
("kvs_viper\n");

372 i‡(
w‹klﬂd_vÆue_size
 == 100)

373 
kvs
 = 
√w
 
KVS_vùî
<
Byã_8
,
Byã_100
>();

374 if(
w‹klﬂd_vÆue_size
 == 200)

375 
kvs
 = 
√w
 
KVS_vùî
<
Byã_8
,
Byã_200
>();

376 #ñi‡
BUILD_PMEMKV


377 
	`¥ötf
("kvs_pmemkv\n");

378 
kvs
 = 
√w
 
	`KVS_pmemkv
();

379 #ñi‡
BUILD_PMEMROCKSDB


380 
	`¥ötf
("kvs_pmem-rocksdb\n");

381 
kvs
 = 
√w
 
	`KVS_pmemrocksdb
();

383 
	`¥ötf
("ph?\n");

384 
kvs
 = 
√w
 
	`KVS
();

386 
kvs
->
	`öô
(
num_of_thªads
,
w‹klﬂd_key_size
,
w‹klﬂd_vÆue_size
,
›s
*2);

387 
öô
 = 1;

392 
	`¥ötf
("run\n");

393 
	`run
();

395 
	`¥ötf
("clean\n");

396 
	`˛ón
();

398 
	`¥ötf
("end\n");

402 
	`¥ötf
("clean2\n");

403 i‡(
öô
)

405 
kvs
->
	`˛ón
();

406 
dñëe
 
kvs
;

410 
	}
}

	@test/test.h

2 #i‚de‡
kvs_h


3 
	#kvs_h


	)

5 
	sTe°Quîy


7 
	m›
;

8 
	m˙t
;

9 * 
	mkey
;

10 * 
	mvÆue
;

14 ˛as†
	cKVS


16 
	mnum_of_thªads
;

17 
	mkey_size
;

18 
	mvÆue_size
;

19 
	mªc‹d_˙t
;

21 
	mpublic
:

23 
vútuÆ
 
	$öô
(
num
,
key
,
vÆue
,
ªc‹d
)

26 
num_of_thªads
 = 
num
;

27 
key_size
 = 
key
;

28 
vÆue_size
 = 
vÆue
;

29 
ªc‹d_˙t
 = 
ªc‹d
;

30 
	`¥ötf
("init..\n");

33 
vútuÆ
 
	$ö£π_›
(* 
key
,* 
vÆue
)

35 
	}
}

36 
vútuÆ
 
	$ªad_›
(* 
key
,* 
ªsu…
)

38 
	}
}

39 
vútuÆ
 
	$upd©e_›
(* 
key
,* 
vÆue
)

41 
	}
}

42 
vútuÆ
 
	$dñëe_›
(* 
key
)

44 
	}
}

45 
vútuÆ
 
	$sˇn_›
(* 
key
,
˙t
,** 
sˇn_ªsu…
)

47 
	}
}

49 
vútuÆ
 
	$˛ón
()

51 
	}
}

53 
vútuÆ
 
	$run
(
Te°Quîy
* 
tqa
, 
›s
)

55 
	}
}

57 
vútuÆ
 
	$ª£t
()

59 
	}
}

61 
vútuÆ
 
	$exô_thªad
()

63 
	}
}

	@util/gen.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<time.h
>

6 
	g›s
;

7 
	gkey_size
;

8 
	gvÆue_size
;

10 ** 
	gkey_¨øy
;

12 
	$ønd_ch¨
()

14 
rv
;

15 
rv
 = 
	`ønd
()%(26+26+10);

16 i‡(
rv
 < 26)

17  'A'+
rv
;

18 i‡(
rv
 < 26+26)

19  'a'+
rv
-26;

20  '0'+
rv
-26-26;

21 
	}
}

23 
	$ønd_gí
(* 
±r
,
size
)

25 
i
;

26 
i
=0;i<
size
;i++)

27 
±r
[
i
] = 
	`ønd_ch¨
();

28 
	}
}

30 
	$maö
()

32 
	`§™d
(
	`time
(
NULL
));

37 
	`¥ötf
("ops\n");

38 
	`sˇnf
("%d",&
›s
);

39 
	`¥ötf
("key_size\n");

40 
	`sˇnf
("%d",&
key_size
);

41 
	`¥ötf
("value_size\n");

42 
	`sˇnf
("%d",&
vÆue_size
);

44 
i
,
rv
;

45 * 
vÆue
;

47 
FILE
* 
out
;

49 
vÆue
 = (*)
	`mÆloc
(
vÆue_size
);

50 
key_¨øy
 = (**)
	`mÆloc
((*)*
›s
);

51 
i
=0;i<
›s
;i++)

52 
key_¨øy
[
i
] = (*)
	`mÆloc
(
key_size
);

55 
	`¥ötf
("insert\n");

56 
out
 = 
	`f›í
("insert","w");

57 
	`Ârötf
(
out
,"%d 0\n",
›s
);

58 
i
=0;i<
›s
;i++)

60 
	`ønd_gí
(
key_¨øy
[
i
],
key_size
);

61 
	`ønd_gí
(
vÆue
,
vÆue_size
);

62 
	`Ârötf
(
out
,"INSERT %†%s\n",
key_¨øy
[
i
],
vÆue
);

64 
	`f˛o£
(
out
);

66 
	`¥ötf
("read\n");

67 
out
 = 
	`f›í
("read","w");

68 
	`Ârötf
(
out
,"%d\n",
›s
);

69 
i
=0;i<
›s
;i++)

71 
rv
 = 
	`ønd
()%
›s
;

72 
	`Ârötf
(
out
,"READ %s\n",
key_¨øy
[
rv
]);

74 
	`f˛o£
(
out
);

76 
	`¥ötf
("update\n");

77 
out
 = 
	`f›í
("update","w");

78 
	`Ârötf
(
out
,"%d\n",
›s
);

79 
i
=0;i<
›s
;i++)

81 
rv
 = 
	`ønd
()%
›s
;

82 
	`ønd_gí
(
vÆue
,
vÆue_size
);

83 
	`Ârötf
(
out
,"UPDATE %†%s\n",
key_¨øy
[
rv
],
vÆue
);

85 
	`f˛o£
(
out
);

87 
	`¥ötf
("delete\n");

88 
out
 = 
	`f›í
("delete","w");

89 
	`Ârötf
(
out
,"%d\n",
›s
);

90 
i
=0;i<
›s
;i++)

92 
rv
 = 
	`ønd
()%
›s
;

93 
	`Ârötf
(
out
,"DELETE %s\n",
key_¨øy
[
rv
]);

95 
	`f˛o£
(
out
);

97 
	`¥ötf
("scan\n");

98 
out
 = 
	`f›í
("scan","w");

99 
	`Ârötf
(
out
,"%d\n",
›s
);

100 
i
=0;i<
›s
;i++)

102 
rv
 = 
	`ønd
()%
›s
;

103 
	`ønd_gí
(
key_¨øy
[
i
],
key_size
);

104 
	`Ârötf
(
out
,"SCAN %†100\n",
key_¨øy
[
rv
]);

106 
	`f˛o£
(
out
);

108 
i
=0;i<
›s
;i++)

109 
	`‰ì
(
key_¨øy
[
i
]);

110 
	`‰ì
(
key_¨øy
);

111 
	`‰ì
(
vÆue
);

114 
	}
}

	@viper/concurrentqueue-src/benchmarks/benchmarks.cpp

9 
	~<c°dio
>

10 
	~<c°rög
>

11 
	~<°rög
>

12 
	~<c°döt
>

13 
	~<cm©h
>

14 
	~<c°d¨g
>

15 
	~<f°ªam
>

16 
	~<˘ime
>

17 
	~<øndom
>

18 
	~<ve˘‹
>

19 
	~<m≠
>

20 
	~<ˇs£π
>

21 
	~<thªad
>

22 
	~<Æg‹ôhm
>

23 
	~<c˘y≥
>

25 
	~"../blockögc⁄cuºítqueue.h
"

26 
	~"lockba£dqueue.h
"

27 
	~"sim∂ñock‰ì.h
"

28 
	~"boo°queue.h
"

29 
	~"tbbqueue.h
"

30 
	~"°dqueue.h
"

31 
	~"dlibqueue.h
"

32 
	~"../ã°s/comm⁄/sim∂ëhªad.h
"

33 
	~"../ã°s/comm⁄/sy°emtime.h
"

34 
	~"˝uid.h
"

36 
usög
 
«me•a˚
 
	gmoodyˇmñ
;

39 
	g°d
::
	tmö°d_ønd
 
	tRNG_t
;

41 
boﬁ
 
	g¥eci£
 = 
Ál£
;

44 
	ebíchm¨k_ty≥_t


46 
	mbích_bÆ™˚d
,

47 
	mbích_⁄ly_íqueue
,

48 
	mbích_⁄ly_íqueue_¥óŒoc
,

49 
	mbích_⁄ly_íqueue_bulk
,

50 
	mbích_⁄ly_íqueue_bulk_¥óŒoc
,

51 
	mbích_⁄ly_dequeue
,

52 
	mbích_⁄ly_dequeue_bulk
,

53 
	mbích_mo°ly_íqueue
,

54 
	mbích_mo°ly_íqueue_bulk
,

55 
	mbích_mo°ly_dequeue
,

56 
	mbích_mo°ly_dequeue_bulk
,

57 
	mbích_•mc
,

58 
	mbích_•mc_¥ïrodu˚d
,

59 
	mbích_mpsc
,

60 
	mbích_em±y_dequeue
,

61 
	mbích_íqueue_dequeue_∑ús
,

62 
	mbích_hóvy_c⁄cuºít
,

64 
	mBENCHMARK_TYPE_COUNT


67 c⁄° 
	gBENCHMARK_SHORT_NAMES
[
BENCHMARK_TYPE_COUNT
][32] = {

87 c⁄° 
	gBENCHMARK_NAMES
[
BENCHMARK_TYPE_COUNT
][64] = {

107 c⁄° 
	gBENCHMARK_DESCS
[
BENCHMARK_TYPE_COUNT
][256] = {

127 c⁄° 
	gBENCHMARK_SINGLE_THREAD_NOTES
[
BENCHMARK_TYPE_COUNT
][256] = {

147 
	gBENCHMARK_THREADS_MEASURED
[
BENCHMARK_TYPE_COUNT
] = {

167 
	gBENCHMARK_THREADS
[
BENCHMARK_TYPE_COUNT
][9] = {

187 
	equeue_id_t


189 
	mqueue_moodyˇmñ_C⁄cuºítQueue
,

190 
	mqueue_moodyˇmñ_BlockögC⁄cuºítQueue
,

191 
	mqueue_boo°
,

192 
	mqueue_tbb
,

193 
	mqueue_sim∂ñock‰ì
,

194 
	mqueue_lockba£d
,

195 
	mqueue_°d
,

196 
	mqueue_dlib
,

197 
	mQUEUE_COUNT


200 c⁄° 
	gQUEUE_NAMES
[
QUEUE_COUNT
][64] = {

211 c⁄° 
	gQUEUE_SUMMARY_NOTES
[
QUEUE_COUNT
][128] = {

222 c⁄° 
boﬁ
 
	gQUEUE_TOKEN_SUPPORT
[
QUEUE_COUNT
] = {

223 
åue
,

224 
åue
,

225 
Ál£
,

226 
Ál£
,

227 
Ál£
,

228 
Ál£
,

229 
Ál£
,

230 
Ál£


233 c⁄° 
	gQUEUE_MAX_THREADS
[
QUEUE_COUNT
] = {

244 c⁄° 
boﬁ
 
	gQUEUE_BENCH_SUPPORT
[
QUEUE_COUNT
][
BENCHMARK_TYPE_COUNT
] = {

256 
	gTøôs
 : 
public
 
moodyˇmñ
::
C⁄cuºítQueueDeÁu…Tøôs


262 c⁄° 
size_t
 
BLOCK_SIZE
 = 64;

266 
	g°d
::
	tuöt64_t
 
	tcou¡î_t
;

268 c⁄° 
cou¡î_t
 
	gBULK_BATCH_SIZE
 = 2300;

270 
	sBíchm¨kResu…


272 
	mñ≠£dTime
;

273 
cou¡î_t
 
	m›î©i⁄s
;

275 
ölöe
 
boﬁ
 
	m›î©‹
<(
Bíchm¨kResu…
 c⁄°& 
	mŸhî
) const

277  
	mñ≠£dTime
 < 
	mŸhî
.elapsedTime;

282 
	gãm∂©e
<
ty≥«me
 
	gTFunc
>

283 
cou¡î_t
 
	$ømpUpToMósuøbÀNumbîOfMaxOps
(
TFunc
 c⁄°& 
func
, 
cou¡î_t
 
°¨tOps
 = 256)

285 
cou¡î_t
 
›s
 = 
°¨tOps
;

286 
time
;

288 
time
 = 
	`func
(
›s
);

289 
›s
 *= 2;

290 } 
time
 < (
¥eci£
 ? 30 : 10));

291 #ifde‡
NDEBUG


292  
›s
 / 2;

294  
›s
 / 4;

296 
	}
}

298 
cou¡î_t
 
	$adju°F‹Thªads
(
cou¡î_t
 
sugge°edOps
, 
¡hªads
)

300  
°d
::
	`max
((
cou¡î_t
)(
sugge°edOps
 / std::
	`pow
(2, std::
	`sqπ
((
¡hªads
 - 1) * 3))), suggestedOps / 16);

301 
	}
}

304 
	gãm∂©e
<
ty≥«me
 
	gTQueue
,Åy≥«mê
	gôem_t
>

305 
cou¡î_t
 
	$dëîmöeMaxOpsF‹Bíchm¨k
(
bíchm¨k_ty≥_t
 
bíchm¨k
, 
¡hªads
, 
boﬁ
 
u£Tokís
, 
øndSìd
)

307 
bíchm¨k
) {

308 
bích_bÆ™˚d
: {

309  
	`adju°F‹Thªads
(
	`ømpUpToMósuøbÀNumbîOfMaxOps
([&](
cou¡î_t
 
›s
) {

310 
TQueue
 
q
;

311 
RNG_t
 
	`∫g
(
øndSìd
 * 1);

312 
°d
::
unif‹m_öt_di°ributi⁄
<> 
	`ønd
(0, 20);

313 
tŸÆ
 = 0;

314 
Sy°emTime
 
°¨t
;

315 
ôem_t
 
ôem
 = 1;

316 
cou¡î_t
 
i
 = 0; i !
›s
; ++i) {

317 
°¨t
 = 
	`gëSy°emTime
();

318 
q
.
	`íqueue
(
ôem
);

319 
tŸÆ
 +
	`gëTimeDñè
(
°¨t
);

321  
tŸÆ
;

322 }), 
¡hªads
);

324 
bích_⁄ly_íqueue
:

325 
bích_⁄ly_íqueue_¥óŒoc
:

326 
bích_mo°ly_íqueue
: {

327  
	`adju°F‹Thªads
(
	`ømpUpToMósuøbÀNumbîOfMaxOps
([](
cou¡î_t
 
›s
) {

328 
TQueue
 
q
;

329 
ôem_t
 
ôem
 = 1;

330 autÿ
°¨t
 = 
	`gëSy°emTime
();

331 
cou¡î_t
 
i
 = 0; i !
›s
; ++i) {

332 
q
.
	`íqueue
(
ôem
);

334  
	`gëTimeDñè
(
°¨t
);

335 }), 
¡hªads
);

337 
bích_⁄ly_dequeue
:

338 
bích_mo°ly_dequeue
:

339 
bích_•mc
:

340 
bích_•mc_¥ïrodu˚d
:

341 
bích_mpsc
: {

342  
	`adju°F‹Thªads
(
	`ømpUpToMósuøbÀNumbîOfMaxOps
([](
cou¡î_t
 
›s
) {

343 
TQueue
 
q
;

344 
ôem_t
 
ôem
 = 1;

345 
cou¡î_t
 
i
 = 0; i !
›s
; ++i) {

346 
q
.
	`íqueue
(
ôem
);

348 
ôem_t
 
ôem_ªc
;

349 autÿ
°¨t
 = 
	`gëSy°emTime
();

350 
cou¡î_t
 
i
 = 0; i !
›s
; ++i) {

351 
q
.
	`åy_dequeue
(
ôem_ªc
);

353  
	`gëTimeDñè
(
°¨t
);

354 }), 
¡hªads
);

356 
bích_⁄ly_íqueue_bulk
:

357 
bích_⁄ly_íqueue_bulk_¥óŒoc
:

358 
bích_mo°ly_íqueue_bulk
: {

359 
°d
::
ve˘‹
<
ôem_t
> 
d©a
;

360 
cou¡î_t
 
i
 = 0; i !
BULK_BATCH_SIZE
; ++i) {

361 
d©a
.
	`push_back
(
i
);

363  
	`adju°F‹Thªads
(
	`ømpUpToMósuøbÀNumbîOfMaxOps
([&](
cou¡î_t
 
›s
) {

364 
TQueue
 
q
;

365 autÿ
°¨t
 = 
	`gëSy°emTime
();

366 
cou¡î_t
 
i
 = 0; i !
›s
; ++i) {

367 
q
.
	`íqueue_bulk
(
d©a
.
	`cbegö
(), d©a.
	`size
());

369  
	`gëTimeDñè
(
°¨t
);

370 }), 
¡hªads
);

372 
bích_⁄ly_dequeue_bulk
:

373 
bích_mo°ly_dequeue_bulk
: {

374  
	`adju°F‹Thªads
(
	`ømpUpToMósuøbÀNumbîOfMaxOps
([](
cou¡î_t
 
›s
) {

375 
TQueue
 
q
;

376 
°d
::
ve˘‹
<
ôem_t
> 
	`d©a
(
BULK_BATCH_SIZE
);

377 
cou¡î_t
 
i
 = 0; i !
›s
; ++i) {

378 
q
.
	`íqueue_bulk
(
d©a
.
	`cbegö
(), d©a.
	`size
());

380 autÿ
°¨t
 = 
	`gëSy°emTime
();

381 
cou¡î_t
 
i
 = 0; i !
›s
; ++i) {

382 
q
.
	`åy_dequeue_bulk
(
d©a
.
	`begö
(), d©a.
	`size
());

384  
	`gëTimeDñè
(
°¨t
);

385 }), 
¡hªads
);

388 
bích_em±y_dequeue
: {

389  
	`adju°F‹Thªads
(
	`ømpUpToMósuøbÀNumbîOfMaxOps
([](
cou¡î_t
 
›s
) {

390 
TQueue
 
q
;

391 
ôem_t
 
ôem_ªc
;

392 autÿ
°¨t
 = 
	`gëSy°emTime
();

393 
cou¡î_t
 
i
 = 0; i !
›s
; ++i) {

394 
q
.
	`åy_dequeue
(
ôem_ªc
);

396  
	`gëTimeDñè
(
°¨t
);

397 }), 
¡hªads
);

399 
bích_íqueue_dequeue_∑ús
: {

400  
	`adju°F‹Thªads
(
	`ømpUpToMósuøbÀNumbîOfMaxOps
([](
cou¡î_t
 
›s
) {

401 
TQueue
 
q
;

402 
ôem_t
 
ôem
 = 1;

403 
ôem_t
 
ôem_ªc
;

404 autÿ
°¨t
 = 
	`gëSy°emTime
();

405 
cou¡î_t
 
i
 = 0; i !
›s
; ++i) {

406 
q
.
	`íqueue
(
ôem
);

407 
q
.
	`åy_dequeue
(
ôem_ªc
);

409  
	`gëTimeDñè
(
°¨t
);

410 }), 
¡hªads
);

413 
bích_hóvy_c⁄cuºít
: {

414  
	`adju°F‹Thªads
(
	`ømpUpToMósuøbÀNumbîOfMaxOps
([](
cou¡î_t
 
›s
) {

415 
TQueue
 
q
;

416 
ôem_t
 
ôem
=1;

417 
ôem_t
 
ôem_ªc
;

418 autÿ
°¨t
 = 
	`gëSy°emTime
();

419 
cou¡î_t
 
i
 = 0; i !
›s
; ++i) {

420 
q
.
	`íqueue
(
ôem
);

421 
q
.
	`åy_dequeue
(
ôem_ªc
);

423  
	`gëTimeDñè
(
°¨t
);

424 }), 
¡hªads
);

428 
	`as£π
(
Ál£
 && "Every benchmarkÅype must be handled here!");

431 
	}
}

435 
	gãm∂©e
<
ty≥«me
 
	gTQueue
,Åy≥«mê
	gôem_t
>

436 
	$runBíchm¨k
(
bíchm¨k_ty≥_t
 
bíchm¨k
, 
¡hªads
, 
boﬁ
 
u£Tokís
, 
øndSìd
, 
cou¡î_t
 
maxOps
, 
maxThªads
, cou¡î_t& 
out_›Cou¡
)

438 
ªsu…
 = 0;

439 vﬁ©ûê
f‹˚NoO±imizeDummy
;

441 
bíchm¨k
) {

442 
bích_bÆ™˚d
: {

444 
TQueue
 
q
;

445 
°d
::
ve˘‹
<
Sim∂eThªad
> 
	`thªads
(
¡hªads
);

446 
°d
::
ve˘‹
<
cou¡î_t
> 
	`›s
(
¡hªads
);

447 
°d
::
ve˘‹
<> 
	`times
(
¡hªads
);

448 
°d
::
©omic
<> 
	`ªady
(0);

449 
ôem_t
 
ôem_ªc
;

450 
ôem_t
 
ôem
 = 1;

451 
tid
 = 0;Åid !
¡hªads
; ++tid) {

452 
thªads
[
tid
] = 
	`Sim∂eThªad
([&](
id
) {

453 
ªady
.
	`„tch_add
(1, 
°d
::
mem‹y_‹dî_ªœxed
);

454 
ªady
.
	`lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
Ë!
¡hªads
)

457 
Sy°emTime
 
°¨t
;

458 
RNG_t
 
	`∫g
(
øndSìd
 * (
id
 + 1));

459 
°d
::
unif‹m_öt_di°ributi⁄
<> 
	`ønd
(0, 20);

460 
›s
[
id
] = 0;

461 
times
[
id
] = 0;

462 
ty≥«me
 
TQueue
::
c⁄sumî_tokí_t
 
	`c⁄sTok
(
q
);

463 
ty≥«me
 
TQueue
::
¥odu˚r_tokí_t
 
	`¥odTok
(
q
);

466 
cou¡î_t
 
i
 = 0; i !
maxOps
; ++i) {

467 i‡(
	`ønd
(
∫g
) == 0) {

468 
°¨t
 = 
	`gëSy°emTime
();

469 i‡((
i
 & 1) == 0) {

470 i‡(
u£Tokís
) {

471 
q
.
	`åy_dequeue
(
c⁄sTok
, 
ôem_ªc
);

474 
q
.
	`åy_dequeue
(
ôem_ªc
);

478 i‡(
u£Tokís
) {

479 
q
.
	`íqueue
(
¥odTok
, 
ôem
);

482 
q
.
	`íqueue
(
ôem
);

485 
times
[
id
] +
	`gëTimeDñè
(
°¨t
);

486 ++
›s
[
id
];

489 }, 
tid
);

491 
out_›Cou¡
 = 0;

492 
ªsu…
 = 0;

493 
tid
 = 0;Åid !
¡hªads
; ++tid) {

494 
thªads
[
tid
].
	`joö
();

495 
out_›Cou¡
 +
›s
[
tid
];

496 
ªsu…
 +
times
[
tid
];

498 
f‹˚NoO±imizeDummy
 = 
q
.
	`åy_dequeue
(
ôem_ªc
) ? 1 : 0;

502 
bích_⁄ly_íqueue_¥óŒoc
: {

503 
out_›Cou¡
 = 
maxOps
 * 
¡hªads
;

505 
TQueue
 
q
;

506 
ôem_t
 
ôem
 = 1;

507 
ôem_t
 
ôem_ªc
;

513 
°d
::
ve˘‹
<
Sim∂eThªad
> 
	`thªads
(
¡hªads
);

515 
tid
 = 0;Åid !
¡hªads
; ++tid) {

516 
thªads
[
tid
] = 
	`Sim∂eThªad
([&](
id
) {

517 i‡(
u£Tokís
) {

518 
ty≥«me
 
TQueue
::
¥odu˚r_tokí_t
 
	`tok
(
q
);

519 
cou¡î_t
 
i
 = 0; i !
maxOps
; ++i) {

520 
q
.
	`íqueue
(
tok
, 
ôem
);

524 
cou¡î_t
 
i
 = 0; i !
maxOps
; ++i) {

525 
q
.
	`íqueue
(
ôem
);

528 }, 
tid
);

530 
tid
 = 0;Åid !
¡hªads
; ++tid) {

531 
thªads
[
tid
].
	`joö
();

536 
q
.
	`åy_dequeue
(
ôem_ªc
))

540 i‡(
¡hªads
 == 1) {

542 autÿ
°¨t
 = 
	`gëSy°emTime
();

543 i‡(
u£Tokís
) {

544 
ty≥«me
 
TQueue
::
¥odu˚r_tokí_t
 
	`tok
(
q
);

545 
cou¡î_t
 
i
 = 0; i !
maxOps
; ++i) {

546 
q
.
	`íqueue
(
tok
, 
ôem
);

550 
cou¡î_t
 
i
 = 0; i !
maxOps
; ++i) {

551 
q
.
	`íqueue
(
ôem
);

554 
ªsu…
 = 
	`gëTimeDñè
(
°¨t
);

557 
°d
::
ve˘‹
<
Sim∂eThªad
> 
	`thªads
(
¡hªads
);

558 
°d
::
ve˘‹
<> 
	`timögs
(
¡hªads
);

559 
°d
::
©omic
<> 
	`ªady
(0);

560 
tid
 = 0;Åid !
¡hªads
; ++tid) {

561 
thªads
[
tid
] = 
	`Sim∂eThªad
([&](
id
) {

562 
ªady
.
	`„tch_add
(1, 
°d
::
mem‹y_‹dî_ªœxed
);

563 
ªady
.
	`lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
Ë!
¡hªads
)

566 autÿ
°¨t
 = 
	`gëSy°emTime
();

567 i‡(
u£Tokís
) {

568 
ty≥«me
 
TQueue
::
¥odu˚r_tokí_t
 
	`tok
(
q
);

569 
cou¡î_t
 
i
 = 0; i !
maxOps
; ++i) {

570 
q
.
	`íqueue
(
tok
, 
ôem
);

574 
cou¡î_t
 
i
 = 0; i !
maxOps
; ++i) {

575 
q
.
	`íqueue
(
ôem
);

578 
timögs
[
id
] = 
	`gëTimeDñè
(
°¨t
);

579 }, 
tid
);

581 
ªsu…
 = 0;

582 
tid
 = 0;Åid !
¡hªads
; ++tid) {

583 
thªads
[
tid
].
	`joö
();

584 
ªsu…
 +
timögs
[
tid
];

587 
f‹˚NoO±imizeDummy
 = 
q
.
	`åy_dequeue
(
ôem_ªc
) ? 1 : 0;

591 
bích_⁄ly_íqueue
: {

592 
out_›Cou¡
 = 
maxOps
 * 
¡hªads
;

594 
TQueue
 
q
;

595 
ôem_t
 
ôem
 = 1;

596 
ôem_t
 
ôem_ªc
;

597 i‡(
¡hªads
 == 1) {

599 autÿ
°¨t
 = 
	`gëSy°emTime
();

600 i‡(
u£Tokís
) {

601 
ty≥«me
 
TQueue
::
¥odu˚r_tokí_t
 
	`tok
(
q
);

602 
cou¡î_t
 
i
 = 0; i !
maxOps
; ++i) {

603 
q
.
	`íqueue
(
tok
, 
ôem
);

607 
cou¡î_t
 
i
 = 0; i !
maxOps
; ++i) {

608 
q
.
	`íqueue
(
ôem
);

611 
ªsu…
 = 
	`gëTimeDñè
(
°¨t
);

614 
°d
::
ve˘‹
<
Sim∂eThªad
> 
	`thªads
(
¡hªads
);

615 
°d
::
ve˘‹
<> 
	`timögs
(
¡hªads
);

616 
°d
::
©omic
<> 
	`ªady
(0);

617 
tid
 = 0;Åid !
¡hªads
; ++tid) {

618 
thªads
[
tid
] = 
	`Sim∂eThªad
([&](
id
) {

619 
ªady
.
	`„tch_add
(1, 
°d
::
mem‹y_‹dî_ªœxed
);

620 
ªady
.
	`lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
Ë!
¡hªads
)

623 autÿ
°¨t
 = 
	`gëSy°emTime
();

624 i‡(
u£Tokís
) {

625 
ty≥«me
 
TQueue
::
¥odu˚r_tokí_t
 
	`tok
(
q
);

626 
cou¡î_t
 
i
 = 0; i !
maxOps
; ++i) {

627 
q
.
	`íqueue
(
tok
, 
ôem
);

631 
cou¡î_t
 
i
 = 0; i !
maxOps
; ++i) {

632 
q
.
	`íqueue
(
ôem
);

635 
timögs
[
id
] = 
	`gëTimeDñè
(
°¨t
);

636 }, 
tid
);

638 
ªsu…
 = 0;

639 
tid
 = 0;Åid !
¡hªads
; ++tid) {

640 
thªads
[
tid
].
	`joö
();

641 
ªsu…
 +
timögs
[
tid
];

644 
f‹˚NoO±imizeDummy
 = 
q
.
	`åy_dequeue
(
ôem_ªc
) ? 1 : 0;

648 
bích_•mc_¥ïrodu˚d
:

649 
bích_⁄ly_dequeue
: {

650 
out_›Cou¡
 = 
maxOps
 * 
¡hªads
;

652 
TQueue
 
q
;

653 
ôem_t
 
ôem
 = 1;

654 
ôem_t
 
ôem_ªc
;

657 
°d
::
ve˘‹
<
Sim∂eThªad
> 
	`thªads
(
bíchm¨k
 =
bích_•mc_¥ïrodu˚d
 ? 1 : 
¡hªads
);

658 
cou¡î_t
 
ôemsPîThªad
 = 
bíchm¨k
 =
bích_•mc_¥ïrodu˚d
 ? 
maxOps
 * 
¡hªads
 : maxOps;

659 
size_t
 
tid
 = 0;Åid !
thªads
.
	`size
(); ++tid) {

660 
thªads
[
tid
] = 
	`Sim∂eThªad
([&](
size_t
 
id
) {

661 i‡(
u£Tokís
) {

662 
ty≥«me
 
TQueue
::
¥odu˚r_tokí_t
 
	`tok
(
q
);

663 
cou¡î_t
 
i
 = 0; i !
ôemsPîThªad
; ++i) {

664 
q
.
	`íqueue
(
tok
, 
ôem
);

668 
cou¡î_t
 
i
 = 0; i !
ôemsPîThªad
; ++i) {

669 
q
.
	`íqueue
(
ôem
);

672 }, 
tid
);

674 
size_t
 
tid
 = 0;Åid !
thªads
.
	`size
(); ++tid) {

675 
thªads
[
tid
].
	`joö
();

679 i‡(
¡hªads
 == 1) {

681 autÿ
°¨t
 = 
	`gëSy°emTime
();

682 i‡(
u£Tokís
) {

683 
ty≥«me
 
TQueue
::
c⁄sumî_tokí_t
 
	`tok
(
q
);

684 
cou¡î_t
 
i
 = 0; i !
maxOps
; ++i) {

685 
q
.
	`åy_dequeue
(
tok
, 
ôem_ªc
);

689 
cou¡î_t
 
i
 = 0; i !
maxOps
; ++i) {

690 
q
.
	`åy_dequeue
(
ôem_ªc
);

693 
ªsu…
 = 
	`gëTimeDñè
(
°¨t
);

696 
°d
::
ve˘‹
<
Sim∂eThªad
> 
	`thªads
(
¡hªads
);

697 
°d
::
ve˘‹
<> 
	`timögs
(
¡hªads
);

698 
°d
::
©omic
<> 
	`ªady
(0);

699 
tid
 = 0;Åid !
¡hªads
; ++tid) {

700 
thªads
[
tid
] = 
	`Sim∂eThªad
([&](
id
) {

701 
ªady
.
	`„tch_add
(1, 
°d
::
mem‹y_‹dî_ªœxed
);

702 
ªady
.
	`lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
Ë!
¡hªads
)

705 autÿ
°¨t
 = 
	`gëSy°emTime
();

706 i‡(
u£Tokís
) {

707 
ty≥«me
 
TQueue
::
c⁄sumî_tokí_t
 
	`tok
(
q
);

708 
cou¡î_t
 
i
 = 0; i !
maxOps
; ++i) {

709 
q
.
	`åy_dequeue
(
tok
, 
ôem_ªc
);

713 
cou¡î_t
 
i
 = 0; i !
maxOps
; ++i) {

714 
q
.
	`åy_dequeue
(
ôem_ªc
);

717 
timögs
[
id
] = 
	`gëTimeDñè
(
°¨t
);

718 }, 
tid
);

720 
ªsu…
 = 0;

721 
tid
 = 0;Åid !
¡hªads
; ++tid) {

722 
thªads
[
tid
].
	`joö
();

723 
ªsu…
 +
timögs
[
tid
];

726 
f‹˚NoO±imizeDummy
 = 
q
.
	`åy_dequeue
(
ôem_ªc
) ? 1 : 0;

730 
bích_mo°ly_íqueue
: {

732 
TQueue
 
q
;

733 
ôem_t
 
ôem
 = 1;

734 
ôem_t
 
ôem_ªc
;

735 
out_›Cou¡
 = 
maxOps
 * 
¡hªads
;

736 
°d
::
ve˘‹
<
Sim∂eThªad
> 
	`thªads
(
¡hªads
);

737 
°d
::
ve˘‹
<> 
	`timögs
(
¡hªads
);

738 autÿ
dequeueThªads
 = 
°d
::
	`max
(1, 
¡hªads
 / 4);

739 
°d
::
©omic
<> 
	`ªady
(0);

740 
tid
 = 0;Åid !
¡hªads
 - 
dequeueThªads
; ++tid) {

741 
thªads
[
tid
] = 
	`Sim∂eThªad
([&](
id
) {

742 
ªady
.
	`„tch_add
(1, 
°d
::
mem‹y_‹dî_ªœxed
);

743 
ªady
.
	`lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
Ë!
¡hªads
)

746 autÿ
°¨t
 = 
	`gëSy°emTime
();

747 i‡(
u£Tokís
) {

748 
ty≥«me
 
TQueue
::
¥odu˚r_tokí_t
 
	`tok
(
q
);

749 
cou¡î_t
 
i
 = 0; i !
maxOps
; ++i) {

750 
q
.
	`íqueue
(
tok
, 
ôem
);

754 
cou¡î_t
 
i
 = 0; i !
maxOps
; ++i) {

755 
q
.
	`íqueue
(
ôem
);

758 
timögs
[
id
] = 
	`gëTimeDñè
(
°¨t
);

759 }, 
tid
);

761 
tid
 = 
¡hªads
 - 
dequeueThªads
;Åid !=Çthreads; ++tid) {

762 
thªads
[
tid
] = 
	`Sim∂eThªad
([&](
id
) {

763 
ªady
.
	`„tch_add
(1, 
°d
::
mem‹y_‹dî_ªœxed
);

764 
ªady
.
	`lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
Ë!
¡hªads
)

767 autÿ
°¨t
 = 
	`gëSy°emTime
();

768 i‡(
u£Tokís
) {

769 
ty≥«me
 
TQueue
::
c⁄sumî_tokí_t
 
	`tok
(
q
);

770 
cou¡î_t
 
i
 = 0; i !
maxOps
; ++i) {

771 
q
.
	`åy_dequeue
(
tok
, 
ôem_ªc
);

775 
cou¡î_t
 
i
 = 0; i !
maxOps
; ++i) {

776 
q
.
	`åy_dequeue
(
ôem_ªc
);

779 
timögs
[
id
] = 
	`gëTimeDñè
(
°¨t
);

780 }, 
tid
);

782 
ªsu…
 = 0;

783 
tid
 = 0;Åid !
¡hªads
; ++tid) {

784 
thªads
[
tid
].
	`joö
();

785 
ªsu…
 +
timögs
[
tid
];

787 
f‹˚NoO±imizeDummy
 = 
q
.
	`åy_dequeue
(
ôem_ªc
) ? 1 : 0;

791 
bích_mo°ly_dequeue
: {

793 
TQueue
 
q
;

794 
ôem_t
 
ôem
 = 1;

795 
ôem_t
 
ôem_ªc
;

796 
out_›Cou¡
 = 
maxOps
 * 
¡hªads
;

797 
°d
::
ve˘‹
<
Sim∂eThªad
> 
	`thªads
(
¡hªads
);

798 
°d
::
ve˘‹
<> 
	`timögs
(
¡hªads
);

799 autÿ
íqueueThªads
 = 
°d
::
	`max
(1, 
¡hªads
 / 4);

802 
°d
::
ve˘‹
<
Sim∂eThªad
> 
	`thªads
(
íqueueThªads
);

803 
tid
 = 0;Åid !
íqueueThªads
; ++tid) {

804 
thªads
[
tid
] = 
	`Sim∂eThªad
([&](
id
) {

805 i‡(
u£Tokís
) {

806 
ty≥«me
 
TQueue
::
¥odu˚r_tokí_t
 
	`tok
(
q
);

807 
cou¡î_t
 
i
 = 0; i !
maxOps
; ++i) {

808 
q
.
	`íqueue
(
tok
, 
ôem
);

812 
cou¡î_t
 
i
 = 0; i !
maxOps
; ++i) {

813 
q
.
	`íqueue
(
ôem
);

816 }, 
tid
);

818 
tid
 = 0;Åid !
íqueueThªads
; ++tid) {

819 
thªads
[
tid
].
	`joö
();

822 
°d
::
©omic
<> 
	`ªady
(0);

823 
tid
 = 0;Åid !
¡hªads
 - 
íqueueThªads
; ++tid) {

824 
thªads
[
tid
] = 
	`Sim∂eThªad
([&](
id
) {

825 
ªady
.
	`„tch_add
(1, 
°d
::
mem‹y_‹dî_ªœxed
);

826 
ªady
.
	`lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
Ë!
¡hªads
)

829 autÿ
°¨t
 = 
	`gëSy°emTime
();

830 i‡(
u£Tokís
) {

831 
ty≥«me
 
TQueue
::
c⁄sumî_tokí_t
 
	`tok
(
q
);

832 
cou¡î_t
 
i
 = 0; i !
maxOps
; ++i) {

833 
q
.
	`åy_dequeue
(
tok
, 
ôem_ªc
);

837 
cou¡î_t
 
i
 = 0; i !
maxOps
; ++i) {

838 
q
.
	`åy_dequeue
(
ôem_ªc
);

841 
timögs
[
id
] = 
	`gëTimeDñè
(
°¨t
);

842 }, 
tid
);

844 
tid
 = 
¡hªads
 - 
íqueueThªads
;Åid !=Çthreads; ++tid) {

845 
thªads
[
tid
] = 
	`Sim∂eThªad
([&](
id
) {

846 
ªady
.
	`„tch_add
(1, 
°d
::
mem‹y_‹dî_ªœxed
);

847 
ªady
.
	`lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
Ë!
¡hªads
)

850 autÿ
°¨t
 = 
	`gëSy°emTime
();

851 i‡(
u£Tokís
) {

852 
ty≥«me
 
TQueue
::
¥odu˚r_tokí_t
 
	`tok
(
q
);

853 
cou¡î_t
 
i
 = 0; i !
maxOps
; ++i) {

854 
q
.
	`íqueue
(
tok
, 
ôem
);

858 
cou¡î_t
 
i
 = 0; i !
maxOps
; ++i) {

859 
q
.
	`íqueue
(
ôem
);

862 
timögs
[
id
] = 
	`gëTimeDñè
(
°¨t
);

863 }, 
tid
);

865 
ªsu…
 = 0;

866 
tid
 = 0;Åid !
¡hªads
; ++tid) {

867 
thªads
[
tid
].
	`joö
();

868 
ªsu…
 +
timögs
[
tid
];

870 
f‹˚NoO±imizeDummy
 = 
q
.
	`åy_dequeue
(
ôem_ªc
) ? 1 : 0;

874 
bích_⁄ly_íqueue_bulk_¥óŒoc
: {

875 
TQueue
 
q
;

876 
ôem_t
 
ôem
 = 1;

877 
ôem_t
 
ôem_ªc
;

883 
°d
::
ve˘‹
<
Sim∂eThªad
> 
	`thªads
(
¡hªads
);

884 
tid
 = 0;Åid !
¡hªads
; ++tid) {

885 
thªads
[
tid
] = 
	`Sim∂eThªad
([&](
id
) {

886 i‡(
u£Tokís
) {

887 
ty≥«me
 
TQueue
::
¥odu˚r_tokí_t
 
	`tok
(
q
);

888 
cou¡î_t
 
i
 = 0; i !
maxOps
; ++i) {

889 
q
.
	`íqueue
(
tok
, 
ôem
);

893 
cou¡î_t
 
i
 = 0; i !
maxOps
; ++i) {

894 
q
.
	`íqueue
(
ôem
);

897 }, 
tid
);

899 
tid
 = 0;Åid !
¡hªads
; ++tid) {

900 
thªads
[
tid
].
	`joö
();

904 
q
.
	`åy_dequeue
(
ôem_ªc
))

908 
°d
::
ve˘‹
<
cou¡î_t
> 
d©a
;

909 
cou¡î_t
 
i
 = 0; i !
BULK_BATCH_SIZE
; ++i) {

910 
d©a
.
	`push_back
(
i
);

913 
out_›Cou¡
 = 
maxOps
 * 
BULK_BATCH_SIZE
 * 
¡hªads
;

914 i‡(
¡hªads
 == 1) {

915 autÿ
°¨t
 = 
	`gëSy°emTime
();

916 i‡(
u£Tokís
) {

917 
ty≥«me
 
TQueue
::
¥odu˚r_tokí_t
 
	`tok
(
q
);

918 
cou¡î_t
 
i
 = 0; i !
maxOps
; ++i) {

919 
q
.
	`íqueue_bulk
(
tok
, 
d©a
.
	`cbegö
(), d©a.
	`size
());

923 
cou¡î_t
 
i
 = 0; i !
maxOps
; ++i) {

924 
q
.
	`íqueue_bulk
(
d©a
.
	`cbegö
(), d©a.
	`size
());

927 
ªsu…
 = 
	`gëTimeDñè
(
°¨t
);

930 
°d
::
ve˘‹
<
Sim∂eThªad
> 
	`thªads
(
¡hªads
);

931 
°d
::
ve˘‹
<> 
	`timögs
(
¡hªads
);

932 
°d
::
©omic
<> 
	`ªady
(0);

933 
tid
 = 0;Åid !
¡hªads
; ++tid) {

934 
thªads
[
tid
] = 
	`Sim∂eThªad
([&](
id
) {

935 
ªady
.
	`„tch_add
(1, 
°d
::
mem‹y_‹dî_ªœxed
);

936 
ªady
.
	`lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
Ë!
¡hªads
)

939 autÿ
°¨t
 = 
	`gëSy°emTime
();

940 i‡(
u£Tokís
) {

941 
ty≥«me
 
TQueue
::
¥odu˚r_tokí_t
 
	`tok
(
q
);

942 
cou¡î_t
 
i
 = 0; i !
maxOps
; ++i) {

943 
q
.
	`íqueue_bulk
(
tok
, 
d©a
.
	`cbegö
(), d©a.
	`size
());

947 
cou¡î_t
 
i
 = 0; i !
maxOps
; ++i) {

948 
q
.
	`íqueue_bulk
(
d©a
.
	`cbegö
(), d©a.
	`size
());

951 
timögs
[
id
] = 
	`gëTimeDñè
(
°¨t
);

952 }, 
tid
);

954 
ªsu…
 = 0;

955 
tid
 = 0;Åid !
¡hªads
; ++tid) {

956 
thªads
[
tid
].
	`joö
();

957 
ªsu…
 +
timögs
[
tid
];

960 
f‹˚NoO±imizeDummy
 = 
q
.
	`åy_dequeue
(
ôem_ªc
) ? 1 : 0;

964 
bích_⁄ly_íqueue_bulk
: {

965 
TQueue
 
q
;

966 
ôem_t
 
ôem
 = 1;

967 
ôem_t
 
ôem_ªc
;

968 
°d
::
ve˘‹
<
cou¡î_t
> 
d©a
;

969 
cou¡î_t
 
i
 = 0; i !
BULK_BATCH_SIZE
; ++i) {

970 
d©a
.
	`push_back
(
i
);

973 
out_›Cou¡
 = 
maxOps
 * 
BULK_BATCH_SIZE
 * 
¡hªads
;

974 i‡(
¡hªads
 == 1) {

975 autÿ
°¨t
 = 
	`gëSy°emTime
();

976 i‡(
u£Tokís
) {

977 
ty≥«me
 
TQueue
::
¥odu˚r_tokí_t
 
	`tok
(
q
);

978 
cou¡î_t
 
i
 = 0; i !
maxOps
; ++i) {

979 
q
.
	`íqueue_bulk
(
tok
, 
d©a
.
	`cbegö
(), d©a.
	`size
());

983 
cou¡î_t
 
i
 = 0; i !
maxOps
; ++i) {

984 
q
.
	`íqueue_bulk
(
d©a
.
	`cbegö
(), d©a.
	`size
());

987 
ªsu…
 = 
	`gëTimeDñè
(
°¨t
);

990 
°d
::
ve˘‹
<
Sim∂eThªad
> 
	`thªads
(
¡hªads
);

991 
°d
::
ve˘‹
<> 
	`timögs
(
¡hªads
);

992 
°d
::
©omic
<> 
	`ªady
(0);

993 
tid
 = 0;Åid !
¡hªads
; ++tid) {

994 
thªads
[
tid
] = 
	`Sim∂eThªad
([&](
id
) {

995 
ªady
.
	`„tch_add
(1, 
°d
::
mem‹y_‹dî_ªœxed
);

996 
ªady
.
	`lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
Ë!
¡hªads
)

999 autÿ
°¨t
 = 
	`gëSy°emTime
();

1000 i‡(
u£Tokís
) {

1001 
ty≥«me
 
TQueue
::
¥odu˚r_tokí_t
 
	`tok
(
q
);

1002 
cou¡î_t
 
i
 = 0; i !
maxOps
; ++i) {

1003 
q
.
	`íqueue_bulk
(
tok
, 
d©a
.
	`cbegö
(), d©a.
	`size
());

1007 
cou¡î_t
 
i
 = 0; i !
maxOps
; ++i) {

1008 
q
.
	`íqueue_bulk
(
d©a
.
	`cbegö
(), d©a.
	`size
());

1011 
timögs
[
id
] = 
	`gëTimeDñè
(
°¨t
);

1012 }, 
tid
);

1014 
ªsu…
 = 0;

1015 
tid
 = 0;Åid !
¡hªads
; ++tid) {

1016 
thªads
[
tid
].
	`joö
();

1017 
ªsu…
 +
timögs
[
tid
];

1020 
f‹˚NoO±imizeDummy
 = 
q
.
	`åy_dequeue
(
ôem_ªc
) ? 1 : 0;

1024 
bích_mo°ly_íqueue_bulk
: {

1026 
TQueue
 
q
;

1027 
ôem_t
 
ôem
 = 1;

1028 
ôem_t
 
ôem_ªc
;

1029 
°d
::
ve˘‹
<
cou¡î_t
> 
d©a
;

1030 
cou¡î_t
 
i
 = 0; i !
BULK_BATCH_SIZE
; ++i) {

1031 
d©a
.
	`push_back
(
i
);

1034 
°d
::
ve˘‹
<
Sim∂eThªad
> 
	`thªads
(
¡hªads
);

1035 
°d
::
ve˘‹
<> 
	`timögs
(
¡hªads
);

1036 autÿ
dequeueThªads
 = 
°d
::
	`max
(1, 
¡hªads
 / 4);

1037 
°d
::
ve˘‹
<
cou¡î_t
> 
	`›s
(
¡hªads
 - 
dequeueThªads
);

1038 
out_›Cou¡
 = 
maxOps
 * 
BULK_BATCH_SIZE
 * (
¡hªads
 - 
dequeueThªads
);

1039 
°d
::
©omic
<> 
	`ªady
(0);

1040 
tid
 = 0;Åid !
¡hªads
 - 
dequeueThªads
; ++tid) {

1041 
thªads
[
tid
] = 
	`Sim∂eThªad
([&](
id
) {

1042 
ªady
.
	`„tch_add
(1, 
°d
::
mem‹y_‹dî_ªœxed
);

1043 
ªady
.
	`lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
Ë!
¡hªads
)

1046 autÿ
°¨t
 = 
	`gëSy°emTime
();

1047 i‡(
u£Tokís
) {

1048 
ty≥«me
 
TQueue
::
¥odu˚r_tokí_t
 
	`tok
(
q
);

1049 
cou¡î_t
 
i
 = 0; i !
maxOps
; ++i) {

1050 
q
.
	`íqueue_bulk
(
tok
, 
d©a
.
	`cbegö
(), d©a.
	`size
());

1054 
cou¡î_t
 
i
 = 0; i !
maxOps
; ++i) {

1055 
q
.
	`íqueue_bulk
(
d©a
.
	`cbegö
(), d©a.
	`size
());

1058 
timögs
[
id
] = 
	`gëTimeDñè
(
°¨t
);

1059 }, 
tid
);

1061 
tid
 = 
¡hªads
 - 
dequeueThªads
;Åid !=Çthreads; ++tid) {

1062 
thªads
[
tid
] = 
	`Sim∂eThªad
([&](
id
, 
idBa£0
) {

1063 
°d
::
ve˘‹
<> 
	`ôems
(
BULK_BATCH_SIZE
);

1065 
ªady
.
	`„tch_add
(1, 
°d
::
mem‹y_‹dî_ªœxed
);

1066 
ªady
.
	`lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
Ë!
¡hªads
)

1069 
cou¡î_t
 
tŸÆOps
 = 0;

1070 autÿ
°¨t
 = 
	`gëSy°emTime
();

1071 i‡(
u£Tokís
) {

1072 
ty≥«me
 
TQueue
::
c⁄sumî_tokí_t
 
	`tok
(
q
);

1073 
cou¡î_t
 
i
 = 0; i !
maxOps
; ++i) {

1074 autÿ
a˘uÆ
 = 
q
.
	`åy_dequeue_bulk
(
tok
, 
ôems
.
	`begö
(), iãms.
	`size
());

1075 
tŸÆOps
 +
a˘uÆ
 + (a˘uÆ =
ôems
.
	`size
() ? 0 : 1);

1079 
cou¡î_t
 
i
 = 0; i !
maxOps
; ++i) {

1080 autÿ
a˘uÆ
 = 
q
.
	`åy_dequeue_bulk
(
ôems
.
	`begö
(), iãms.
	`size
());

1081 
tŸÆOps
 +
a˘uÆ
 + (a˘uÆ =
ôems
.
	`size
() ? 0 : 1);

1084 
timögs
[
id
] = 
	`gëTimeDñè
(
°¨t
);

1085 
›s
[
idBa£0
] = 
tŸÆOps
;

1086 }, 
tid
,Åid - (
¡hªads
 - 
dequeueThªads
));

1088 
ªsu…
 = 0;

1089 
tid
 = 0;Åid !
¡hªads
; ++tid) {

1090 
thªads
[
tid
].
	`joö
();

1091 
ªsu…
 +
timögs
[
tid
];

1092 i‡(
tid
 < 
dequeueThªads
) {

1093 
out_›Cou¡
 +
›s
[
tid
];

1096 
f‹˚NoO±imizeDummy
 = 
q
.
	`åy_dequeue
(
ôem_ªc
) ? 1 : 0;

1100 
bích_⁄ly_dequeue_bulk
: {

1102 
TQueue
 
q
;

1103 
ôem_t
 
ôem
 = 1;

1104 
ôem_t
 
ôem_ªc
;

1107 
°d
::
ve˘‹
<> 
	`d©a
(
BULK_BATCH_SIZE
);

1108 
i
 = 0; i !
BULK_BATCH_SIZE
; ++i) {

1109 
d©a
[
i
] = i;

1111 
°d
::
ve˘‹
<
Sim∂eThªad
> 
	`thªads
(
¡hªads
);

1112 
tid
 = 0;Åid !
¡hªads
; ++tid) {

1113 
thªads
[
tid
] = 
	`Sim∂eThªad
([&](
id
) {

1114 i‡(
u£Tokís
) {

1115 
ty≥«me
 
TQueue
::
¥odu˚r_tokí_t
 
	`tok
(
q
);

1116 
cou¡î_t
 
i
 = 0; i !
maxOps
; ++i) {

1117 
q
.
	`íqueue_bulk
(
tok
, 
d©a
.
	`cbegö
(), d©a.
	`size
());

1121 
cou¡î_t
 
i
 = 0; i !
maxOps
; ++i) {

1122 
q
.
	`íqueue_bulk
(
d©a
.
	`cbegö
(), d©a.
	`size
());

1125 }, 
tid
);

1127 
tid
 = 0;Åid !
¡hªads
; ++tid) {

1128 
thªads
[
tid
].
	`joö
();

1131 i‡(
¡hªads
 == 1) {

1132 
out_›Cou¡
 = 
maxOps
 * 
BULK_BATCH_SIZE
;

1133 autÿ
°¨t
 = 
	`gëSy°emTime
();

1134 
°d
::
ve˘‹
<> 
	`ôems
(
BULK_BATCH_SIZE
);

1135 i‡(
u£Tokís
) {

1136 
ty≥«me
 
TQueue
::
c⁄sumî_tokí_t
 
	`tok
(
q
);

1137 
cou¡î_t
 
i
 = 0; i !
maxOps
; ++i) {

1138 
q
.
	`åy_dequeue_bulk
(
tok
, 
ôems
.
	`begö
(), iãms.
	`size
());

1142 
cou¡î_t
 
i
 = 0; i !
maxOps
; ++i) {

1143 
q
.
	`åy_dequeue_bulk
(
ôems
.
	`begö
(), iãms.
	`size
());

1146 
ªsu…
 = 
	`gëTimeDñè
(
°¨t
);

1149 
°d
::
ve˘‹
<
Sim∂eThªad
> 
	`thªads
(
¡hªads
);

1150 
°d
::
ve˘‹
<> 
	`timögs
(
¡hªads
);

1151 
°d
::
ve˘‹
<
cou¡î_t
> 
	`›s
(
¡hªads
);

1152 
°d
::
©omic
<> 
	`ªady
(0);

1153 
tid
 = 0;Åid !
¡hªads
; ++tid) {

1154 
thªads
[
tid
] = 
	`Sim∂eThªad
([&](
id
) {

1155 
°d
::
ve˘‹
<> 
	`ôems
(
BULK_BATCH_SIZE
);

1156 
ªady
.
	`„tch_add
(1, 
°d
::
mem‹y_‹dî_ªœxed
);

1157 
ªady
.
	`lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
Ë!
¡hªads
)

1160 
cou¡î_t
 
tŸÆOps
 = 0;

1161 autÿ
°¨t
 = 
	`gëSy°emTime
();

1162 i‡(
u£Tokís
) {

1163 
ty≥«me
 
TQueue
::
c⁄sumî_tokí_t
 
	`tok
(
q
);

1164 
cou¡î_t
 
i
 = 0; i !
maxOps
; ++i) {

1165 autÿ
a˘uÆ
 = 
q
.
	`åy_dequeue_bulk
(
tok
, 
ôems
.
	`begö
(), iãms.
	`size
());

1166 
tŸÆOps
 +
a˘uÆ
 + (a˘uÆ =
ôems
.
	`size
() ? 0 : 1);

1170 
cou¡î_t
 
i
 = 0; i !
maxOps
; ++i) {

1171 autÿ
a˘uÆ
 = 
q
.
	`åy_dequeue_bulk
(
ôems
.
	`begö
(), iãms.
	`size
());

1172 
tŸÆOps
 +
a˘uÆ
 + (a˘uÆ =
ôems
.
	`size
() ? 0 : 1);

1175 
timögs
[
id
] = 
	`gëTimeDñè
(
°¨t
);

1176 
›s
[
id
] = 
tŸÆOps
;

1177 }, 
tid
);

1179 
ªsu…
 = 0;

1180 
out_›Cou¡
 = 0;

1181 
tid
 = 0;Åid !
¡hªads
; ++tid) {

1182 
thªads
[
tid
].
	`joö
();

1183 
ªsu…
 +
timögs
[
tid
];

1184 
out_›Cou¡
 +
›s
[
tid
];

1187 
f‹˚NoO±imizeDummy
 = 
q
.
	`åy_dequeue
(
ôem_ªc
) ? 1 : 0;

1191 
bích_mo°ly_dequeue_bulk
: {

1193 
TQueue
 
q
;

1194 
ôem_t
 
ôem
 = 1;

1195 
ôem_t
 
ôem_ªc
;

1196 autÿ
íqueueThªads
 = 
°d
::
	`max
(1, 
¡hªads
 / 4);

1197 
out_›Cou¡
 = 
maxOps
 * 
BULK_BATCH_SIZE
 * 
íqueueThªads
;

1198 
°d
::
ve˘‹
<
Sim∂eThªad
> 
	`thªads
(
¡hªads
);

1199 
°d
::
ve˘‹
<> 
	`timögs
(
¡hªads
);

1200 
°d
::
ve˘‹
<
cou¡î_t
> 
	`›s
(
¡hªads
 - 
íqueueThªads
);

1201 
°d
::
ve˘‹
<> 
	`íqueueD©a
(
BULK_BATCH_SIZE
);

1202 
i
 = 0; i !
BULK_BATCH_SIZE
; ++i) {

1203 
íqueueD©a
[
i
] = i;

1207 
°d
::
ve˘‹
<
Sim∂eThªad
> 
	`thªads
(
íqueueThªads
);

1208 
tid
 = 0;Åid !
íqueueThªads
; ++tid) {

1209 
thªads
[
tid
] = 
	`Sim∂eThªad
([&](
id
) {

1210 i‡(
u£Tokís
) {

1211 
ty≥«me
 
TQueue
::
¥odu˚r_tokí_t
 
	`tok
(
q
);

1212 
cou¡î_t
 
i
 = 0; i !
maxOps
; ++i) {

1213 
q
.
	`íqueue_bulk
(
tok
, 
íqueueD©a
.
	`cbegö
(),ÉnqueueD©a.
	`size
());

1217 
cou¡î_t
 
i
 = 0; i !
maxOps
; ++i) {

1218 
q
.
	`íqueue_bulk
(
íqueueD©a
.
	`cbegö
(),ÉnqueueD©a.
	`size
());

1221 }, 
tid
);

1223 
tid
 = 0;Åid !
íqueueThªads
; ++tid) {

1224 
thªads
[
tid
].
	`joö
();

1227 
°d
::
©omic
<> 
	`ªady
(0);

1228 
tid
 = 0;Åid !
¡hªads
 - 
íqueueThªads
; ++tid) {

1229 
thªads
[
tid
] = 
	`Sim∂eThªad
([&](
id
) {

1230 
°d
::
ve˘‹
<> 
	`d©a
(
BULK_BATCH_SIZE
);

1231 
ªady
.
	`„tch_add
(1, 
°d
::
mem‹y_‹dî_ªœxed
);

1232 
ªady
.
	`lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
Ë!
¡hªads
)

1234 
cou¡î_t
 
tŸÆOps
 = 0;

1235 autÿ
°¨t
 = 
	`gëSy°emTime
();

1236 i‡(
u£Tokís
) {

1237 
ty≥«me
 
TQueue
::
c⁄sumî_tokí_t
 
	`tok
(
q
);

1238 
cou¡î_t
 
i
 = 0; i !
maxOps
; ++i) {

1239 autÿ
a˘uÆ
 = 
q
.
	`åy_dequeue_bulk
(
tok
, 
d©a
.
	`begö
(), d©a.
	`size
());

1240 
tŸÆOps
 +
a˘uÆ
 + (a˘uÆ =
d©a
.
	`size
() ? 0 : 1);

1244 
cou¡î_t
 
i
 = 0; i !
maxOps
; ++i) {

1245 autÿ
a˘uÆ
 = 
q
.
	`åy_dequeue_bulk
(
d©a
.
	`begö
(), d©a.
	`size
());

1246 
tŸÆOps
 +
a˘uÆ
 + (a˘uÆ =
d©a
.
	`size
() ? 0 : 1);

1249 
timögs
[
id
] = 
	`gëTimeDñè
(
°¨t
);

1250 
›s
[
id
] = 
tŸÆOps
;

1251 }, 
tid
);

1253 
tid
 = 
¡hªads
 - 
íqueueThªads
;Åid !=Çthreads; ++tid) {

1254 
thªads
[
tid
] = 
	`Sim∂eThªad
([&](
id
) {

1255 
ªady
.
	`„tch_add
(1, 
°d
::
mem‹y_‹dî_ªœxed
);

1256 
ªady
.
	`lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
Ë!
¡hªads
)

1259 autÿ
°¨t
 = 
	`gëSy°emTime
();

1260 i‡(
u£Tokís
) {

1261 
ty≥«me
 
TQueue
::
¥odu˚r_tokí_t
 
	`tok
(
q
);

1262 
cou¡î_t
 
i
 = 0; i !
maxOps
; ++i) {

1263 
q
.
	`íqueue_bulk
(
tok
, 
íqueueD©a
.
	`cbegö
(),ÉnqueueD©a.
	`size
());

1267 
cou¡î_t
 
i
 = 0; i !
maxOps
; ++i) {

1268 
q
.
	`íqueue_bulk
(
íqueueD©a
.
	`cbegö
(),ÉnqueueD©a.
	`size
());

1271 
timögs
[
id
] = 
	`gëTimeDñè
(
°¨t
);

1272 }, 
tid
);

1274 
ªsu…
 = 0;

1275 
tid
 = 0;Åid !
¡hªads
; ++tid) {

1276 
thªads
[
tid
].
	`joö
();

1277 
ªsu…
 +
timögs
[
tid
];

1278 i‡(
tid
 < 
¡hªads
 - 
íqueueThªads
) {

1279 
out_›Cou¡
 +
›s
[
tid
];

1282 
f‹˚NoO±imizeDummy
 = 
q
.
	`åy_dequeue
(
ôem_ªc
) ? 1 : 0;

1286 
bích_•mc
: {

1287 
cou¡î_t
 
ñemítsToDequeue
 = 
maxOps
 * (
¡hªads
 - 1);

1289 
TQueue
 
q
;

1290 
ôem_t
 
ôem
 = 1;

1291 
ôem_t
 
ôem_ªc
;

1292 
°d
::
ve˘‹
<
Sim∂eThªad
> 
	`thªads
(
¡hªads
 - 1);

1293 
°d
::
ve˘‹
<> 
	`timögs
(
¡hªads
 - 1);

1294 
°d
::
ve˘‹
<
cou¡î_t
> 
	`›s
(
¡hªads
 - 1);

1295 
°d
::
©omic
<
boﬁ
> 
	`lynchpö
(
Ál£
);

1296 
°d
::
©omic
<
cou¡î_t
> 
	`tŸÆDequeued
(0);

1297 
tid
 = 0;Åid !
¡hªads
 - 1; ++tid) {

1298 
thªads
[
tid
] = 
	`Sim∂eThªad
([&](
id
) {

1299 !
lynchpö
.
	`lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
)) {

1303 
ôem
;

1304 
cou¡î_t
 
i
 = 0;

1305 autÿ
°¨t
 = 
	`gëSy°emTime
();

1306 i‡(
u£Tokís
) {

1307 
ty≥«me
 
TQueue
::
c⁄sumî_tokí_t
 
	`tok
(
q
);

1308 
åue
) {

1309 i‡(
q
.
	`åy_dequeue
(
tok
, 
ôem
)) {

1310 
tŸÆDequeued
.
	`„tch_add
(1, 
°d
::
mem‹y_‹dî_ªœxed
);

1312 i‡(
tŸÆDequeued
.
	`lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
Ë=
ñemítsToDequeue
) {

1315 ++
i
;

1319 
åue
) {

1320 i‡(
q
.
	`åy_dequeue
(
ôem_ªc
)) {

1321 
tŸÆDequeued
.
	`„tch_add
(1, 
°d
::
mem‹y_‹dî_ªœxed
);

1323 i‡(
tŸÆDequeued
.
	`lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
Ë=
ñemítsToDequeue
) {

1326 ++
i
;

1329 
timögs
[
id
] = 
	`gëTimeDñè
(
°¨t
);

1330 
›s
[
id
] = 
i
;

1331 }, 
tid
);

1334 
lynchpö
.
	`°‹e
(
åue
, 
°d
::
mem‹y_‹dî_£q_c°
);

1335 
cou¡î_t
 
i
 = 0; i !
ñemítsToDequeue
; ++i) {

1336 
q
.
	`íqueue
(
ôem
);

1339 
ªsu…
 = 0;

1340 
out_›Cou¡
 = 0;

1341 
tid
 = 0;Åid !
¡hªads
 - 1; ++tid) {

1342 
thªads
[
tid
].
	`joö
();

1343 
ªsu…
 +
timögs
[
tid
];

1344 
out_›Cou¡
 +
›s
[
tid
];

1346 
f‹˚NoO±imizeDummy
 = 
q
.
	`åy_dequeue
(
ôem_ªc
) ? 1 : 0;

1350 
bích_mpsc
: {

1351 
TQueue
 
q
;

1352 
ôem_t
 
ôem
 = 1;

1353 
ôem_t
 
ôem_ªc
;

1354 
cou¡î_t
 
ñemítsToDequeue
 = 
maxOps
 * (
¡hªads
 - 1);

1355 
°d
::
ve˘‹
<
Sim∂eThªad
> 
	`thªads
(
¡hªads
);

1356 
°d
::
©omic
<> 
	`ªady
(0);

1357 
tid
 = 0;Åid !
¡hªads
; ++tid) {

1358 i‡(
tid
 == 0) {

1360 
thªads
[
tid
] = 
	`Sim∂eThªad
([&](
id
) {

1361 
ªady
.
	`„tch_add
(1, 
°d
::
mem‹y_‹dî_£q_c°
);

1362 
ªady
.
	`lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
Ë!
¡hªads
)

1365 
ôem
;

1366 
out_›Cou¡
 = 0;

1367 autÿ
°¨t
 = 
	`gëSy°emTime
();

1368 i‡(
u£Tokís
) {

1369 
ty≥«me
 
TQueue
::
c⁄sumî_tokí_t
 
	`tok
(
q
);

1370 
cou¡î_t
 
i
 = 0; i !
ñemítsToDequeue
;) {

1371 
i
 +
q
.
	`åy_dequeue
(
tok
, 
ôem
) ? 1 : 0;

1372 ++
out_›Cou¡
;

1376 
cou¡î_t
 
i
 = 0; i !
ñemítsToDequeue
;) {

1377 
i
 +
q
.
	`åy_dequeue
(
ôem_ªc
) ? 1 : 0;

1378 ++
out_›Cou¡
;

1381 
ªsu…
 = 
	`gëTimeDñè
(
°¨t
);

1382 }, 
tid
);

1385 
thªads
[
tid
] = 
	`Sim∂eThªad
([&](
id
) {

1386 
ªady
.
	`„tch_add
(1, 
°d
::
mem‹y_‹dî_£q_c°
);

1387 
ªady
.
	`lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
Ë!
¡hªads
)

1390 i‡(
u£Tokís
) {

1391 
ty≥«me
 
TQueue
::
¥odu˚r_tokí_t
 
	`tok
(
q
);

1392 
cou¡î_t
 
i
 = 0; i !
maxOps
; ++i) {

1393 
q
.
	`íqueue
(
tok
, 
ôem
);

1397 
cou¡î_t
 
i
 = 0; i !
maxOps
; ++i) {

1398 
q
.
	`íqueue
(
ôem
);

1401 }, 
tid
);

1405 
tid
 = 0;Åid !
¡hªads
; ++tid) {

1406 
thªads
[
tid
].
	`joö
();

1408 
f‹˚NoO±imizeDummy
 = 
q
.
	`åy_dequeue
(
ôem_ªc
) ? 1 : 0;

1412 
bích_em±y_dequeue
: {

1414 
TQueue
 
q
;

1415 
ôem_t
 
ôem
 = 1;

1416 
ôem_t
 
ôem_ªc
;

1419 
°d
::
ve˘‹
<
Sim∂eThªad
> 
	`thªads
(
maxThªads
 > 0 ? maxThreads : 8);

1420 
size_t
 
tid
 = 0;Åid !
thªads
.
	`size
(); ++tid) {

1421 
thªads
[
tid
] = 
	`Sim∂eThªad
([&](
size_t
 
id
) {

1422 i‡(
u£Tokís
) {

1423 
ty≥«me
 
TQueue
::
¥odu˚r_tokí_t
 
	`tok
(
q
);

1424 
cou¡î_t
 
i
 = 0; i != 10000; ++i) {

1425 
q
.
	`íqueue
(
tok
, 
ôem
);

1429 
cou¡î_t
 
i
 = 0; i != 10000; ++i) {

1430 
q
.
	`íqueue
(
ôem
);

1433 }, 
tid
);

1435 
size_t
 
tid
 = 0;Åid !
thªads
.
	`size
(); ++tid) {

1436 
thªads
[
tid
].
	`joö
();

1440 
q
.
	`åy_dequeue
(
ôem_ªc
))

1444 i‡(
¡hªads
 == 1) {

1446 
ôem
;

1447 
out_›Cou¡
 = 
maxOps
;

1448 autÿ
°¨t
 = 
	`gëSy°emTime
();

1449 i‡(
u£Tokís
) {

1450 
ty≥«me
 
TQueue
::
c⁄sumî_tokí_t
 
	`tok
(
q
);

1451 
cou¡î_t
 
i
 = 0; i !
maxOps
; ++i) {

1452 
q
.
	`åy_dequeue
(
tok
, 
ôem
);

1456 
cou¡î_t
 
i
 = 0; i !
maxOps
; ++i) {

1457 
q
.
	`åy_dequeue
(
ôem_ªc
);

1460 
ªsu…
 = 
	`gëTimeDñè
(
°¨t
);

1461 
f‹˚NoO±imizeDummy
 = 
q
.
	`åy_dequeue
(
ôem_ªc
) ? 1 : 0;

1464 
out_›Cou¡
 = 
maxOps
 * 
¡hªads
;

1465 
°d
::
ve˘‹
<
Sim∂eThªad
> 
	`thªads
(
¡hªads
);

1466 
°d
::
ve˘‹
<> 
	`timögs
(
¡hªads
);

1467 
°d
::
©omic
<> 
	`ªady
(0);

1468 
tid
 = 0;Åid !
¡hªads
; ++tid) {

1469 
thªads
[
tid
] = 
	`Sim∂eThªad
([&](
id
) {

1470 
ªady
.
	`„tch_add
(1, 
°d
::
mem‹y_‹dî_ªœxed
);

1471 
ªady
.
	`lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
Ë!
¡hªads
)

1474 
ôem
;

1475 autÿ
°¨t
 = 
	`gëSy°emTime
();

1476 i‡(
u£Tokís
) {

1477 
ty≥«me
 
TQueue
::
c⁄sumî_tokí_t
 
	`tok
(
q
);

1478 
cou¡î_t
 
i
 = 0; i !
maxOps
; ++i) {

1479 
q
.
	`åy_dequeue
(
tok
, 
ôem
);

1483 
cou¡î_t
 
i
 = 0; i !
maxOps
; ++i) {

1484 
q
.
	`åy_dequeue
(
ôem_ªc
);

1487 
timögs
[
id
] = 
	`gëTimeDñè
(
°¨t
);

1488 }, 
tid
);

1490 
ªsu…
 = 0;

1491 
tid
 = 0;Åid !
¡hªads
; ++tid) {

1492 
thªads
[
tid
].
	`joö
();

1493 
ªsu…
 +
timögs
[
tid
];

1495 
f‹˚NoO±imizeDummy
 = 
q
.
	`åy_dequeue
(
ôem_ªc
) ? 1 : 0;

1500 
bích_íqueue_dequeue_∑ús
: {

1503 
out_›Cou¡
 = 
maxOps
 * 2 * 
¡hªads
;

1504 
TQueue
 
q
;

1505 
ôem_t
 
ôem
 = 1;

1506 
ôem_t
 
ôem_ªc
;

1507 i‡(
¡hªads
 == 1) {

1509 
ôem
;

1510 autÿ
°¨t
 = 
	`gëSy°emTime
();

1511 i‡(
u£Tokís
) {

1512 
ty≥«me
 
TQueue
::
¥odu˚r_tokí_t
 
	`¥odTok
(
q
);

1513 
ty≥«me
 
TQueue
::
c⁄sumî_tokí_t
 
	`c⁄sTok
(
q
);

1514 
cou¡î_t
 
i
 = 0; i !
maxOps
; ++i) {

1515 
q
.
	`íqueue
(
¥odTok
, 
ôem
);

1516 
q
.
	`åy_dequeue
(
c⁄sTok
, 
ôem
);

1520 
cou¡î_t
 
i
 = 0; i !
maxOps
; ++i) {

1521 
q
.
	`íqueue
(
ôem
);

1522 
q
.
	`åy_dequeue
(
ôem_ªc
);

1525 
ªsu…
 = 
	`gëTimeDñè
(
°¨t
);

1526 
f‹˚NoO±imizeDummy
 = 
q
.
	`åy_dequeue
(
ôem_ªc
) ? 1 : 0;

1529 
°d
::
ve˘‹
<
Sim∂eThªad
> 
	`thªads
(
¡hªads
);

1530 
°d
::
ve˘‹
<> 
	`timögs
(
¡hªads
);

1531 
°d
::
©omic
<> 
	`ªady
(0);

1532 
tid
 = 0;Åid !
¡hªads
; ++tid) {

1533 
thªads
[
tid
] = 
	`Sim∂eThªad
([&](
id
) {

1534 
ªady
.
	`„tch_add
(1, 
°d
::
mem‹y_‹dî_ªœxed
);

1535 
ªady
.
	`lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
Ë!
¡hªads
)

1538 
ôem
;

1539 autÿ
°¨t
 = 
	`gëSy°emTime
();

1540 i‡(
u£Tokís
) {

1541 
ty≥«me
 
TQueue
::
¥odu˚r_tokí_t
 
	`¥odTok
(
q
);

1542 
ty≥«me
 
TQueue
::
c⁄sumî_tokí_t
 
	`c⁄sTok
(
q
);

1543 
cou¡î_t
 
i
 = 0; i !
maxOps
; ++i) {

1544 
q
.
	`íqueue
(
¥odTok
, 
ôem
);

1545 
q
.
	`åy_dequeue
(
c⁄sTok
, 
ôem
);

1549 
cou¡î_t
 
i
 = 0; i !
maxOps
; ++i) {

1550 
q
.
	`íqueue
(
ôem
);

1551 
q
.
	`åy_dequeue
(
ôem_ªc
);

1554 
timögs
[
id
] = 
	`gëTimeDñè
(
°¨t
);

1555 }, 
tid
);

1557 
ªsu…
 = 0;

1558 
tid
 = 0;Åid !
¡hªads
; ++tid) {

1559 
thªads
[
tid
].
	`joö
();

1560 
ªsu…
 +
timögs
[
tid
];

1562 
f‹˚NoO±imizeDummy
 = 
q
.
	`åy_dequeue
(
ôem_ªc
) ? 1 : 0;

1567 
bích_hóvy_c⁄cuºít
: {

1569 
out_›Cou¡
 = 
maxOps
 * 
¡hªads
;

1570 
TQueue
 
q
;

1571 
ôem_t
 
ôem
 = 1;

1572 
ôem_t
 
ôem_ªc
;

1573 
°d
::
ve˘‹
<
Sim∂eThªad
> 
	`thªads
(
¡hªads
);

1574 
°d
::
ve˘‹
<> 
	`timögs
(
¡hªads
);

1575 
°d
::
©omic
<> 
	`ªady
(0);

1576 
tid
 = 0;Åid !
¡hªads
; ++tid) {

1577 
thªads
[
tid
] = 
	`Sim∂eThªad
([&](
id
) {

1578 
ªady
.
	`„tch_add
(1, 
°d
::
mem‹y_‹dî_ªœxed
);

1579 
ªady
.
	`lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
Ë!
¡hªads
)

1582 autÿ
°¨t
 = 
	`gëSy°emTime
();

1583 i‡(
id
 < 2) {

1585 
ôem
;

1586 i‡(
u£Tokís
) {

1587 
ty≥«me
 
TQueue
::
c⁄sumî_tokí_t
 
	`c⁄sTok
(
q
);

1588 
ty≥«me
 
TQueue
::
¥odu˚r_tokí_t
 
	`¥odTok
(
q
);

1590 
cou¡î_t
 
i
 = 0; i !
maxOps
 / 2; ++i) {

1591 
q
.
	`åy_dequeue
(
c⁄sTok
, 
ôem
);

1592 
q
.
	`íqueue
(
¥odTok
, 
ôem
);

1596 
cou¡î_t
 
i
 = 0; i !
maxOps
 / 2; ++i) {

1597 
q
.
	`åy_dequeue
(
ôem_ªc
);

1598 
q
.
	`íqueue
(
ôem
);

1603 i‡((
id
 & 1) == 0) {

1605 i‡(
u£Tokís
) {

1606 
ty≥«me
 
TQueue
::
¥odu˚r_tokí_t
 
	`¥odTok
(
q
);

1607 
cou¡î_t
 
i
 = 0; i !
maxOps
; ++i) {

1608 
q
.
	`íqueue
(
¥odTok
, 
ôem
);

1612 
cou¡î_t
 
i
 = 0; i !
maxOps
; ++i) {

1613 
q
.
	`íqueue
(
ôem
);

1619 
ôem
;

1620 i‡(
u£Tokís
) {

1621 
ty≥«me
 
TQueue
::
c⁄sumî_tokí_t
 
	`c⁄sTok
(
q
);

1622 
cou¡î_t
 
i
 = 0; i !
maxOps
; ++i) {

1623 
q
.
	`åy_dequeue
(
c⁄sTok
, 
ôem
);

1627 
cou¡î_t
 
i
 = 0; i !
maxOps
; ++i) {

1628 
q
.
	`åy_dequeue
(
ôem_ªc
);

1633 
timögs
[
id
] = 
	`gëTimeDñè
(
°¨t
);

1634 }, 
tid
);

1636 
ªsu…
 = 0;

1637 
tid
 = 0;Åid !
¡hªads
; ++tid) {

1638 
thªads
[
tid
].
	`joö
();

1639 
ªsu…
 +
timögs
[
tid
];

1641 
f‹˚NoO±imizeDummy
 = 
q
.
	`åy_dequeue
(
ôem_ªc
) ? 1 : 0;

1646 
	`as£π
(
Ál£
 && "Every benchmarkÅype must be handled here!");

1647 
ªsu…
 = 0;

1648 
out_›Cou¡
 = 0;

1651 ()
f‹˚NoO±imizeDummy
;

1653  
ªsu…
;

1654 
	}
}

1657 c⁄° * 
	gLOG_FILE
 = "benchmarks.log";

1658 
	g°d
::
of°ªam
* 
logOut
;

1659 
boﬁ
 
	glogEº‹Rï‹ãd
 = 
Ál£
;

1661 
	$ßyf
(
ödít
, c⁄° * 
fmt
, ...)

1663 
ödítBuf„r
[] = " ";

1664 
buf
[2048];

1666 
ödítBuf„r
[
ödít
] = '\0';

1668 
va_li°
 
¨gli°
;

1669 
	`va_°¨t
(
¨gli°
, 
fmt
);

1670 
	`v•rötf
(
buf
, 
fmt
, 
¨gli°
);

1671 
	`va_íd
(
¨gli°
);

1673 i‡(*
logOut
) {

1674 (*
logOut
Ë<< 
ödítBuf„r
 << 
buf
;

1676 i‡(!
logEº‹Rï‹ãd
) {

1677 
°d
::
	`¥ötf
("Note: Error writingÅoÜog file. Future output willáppear only on stdout\n");

1678 
logEº‹Rï‹ãd
 = 
åue
;

1680 
°d
::
	`¥ötf
("%s%s", 
ödítBuf„r
, 
buf
);

1682 
ödítBuf„r
[
ödít
] = ' ';

1683 
	}
}

1689 c⁄° * 
	$time°amp
()

1691 
buf
[32];

1692 
time_t
 
time
 = 
°d
::
	`time
(
NULL
);

1693 
	`°r˝y
(
buf
, 
°d
::
	`as˘ime
(°d::
	`loˇ…ime
(&
time
)));

1694 
buf
[
	`°æí
(buf) - 1] = '\0';

1695  
buf
;

1696 
	}
}

1698 
ölöe
 
boﬁ
 
	$isvowñ
(
ch
)

1700 
ch
 = 
°d
::
	`tﬁowî
(ch);

1701 c⁄° * 
v
 = "aeiou"; *v != '\0'; ++v) {

1702 i‡(*
v
 =
ch
) {

1703  
åue
;

1706  
Ál£
;

1707 
	}
}

1709 
ölöe
 
	$ß„_divide
(
a
, 
b
)

1711  
b
 =0 ? 0 : 
a
 / b;

1712 
	}
}

1718 c⁄° * 
	$¥ëty
(
num
)

1720 
	`as£π
(
num
 >= 0);

1722 #i‡
	`deföed
(
_MSC_VER
) && _MSC_VER < 1800

1723 i‡(!
	`_föôe
(
num
)) {

1726 i‡(
	`_i¢™
(
num
)) {

1730 i‡(
°d
::
	`isöf
(
num
)) {

1733 i‡(
°d
::
	`i¢™
(
num
)) {

1738 
bufs
[16][8];

1739 
√xtBuf
 = 0;

1740 * 
buf
 = 
bufs
[
√xtBuf
++];

1741 
√xtBuf
 &= 15;

1743 
suffix
 = 0;

1744 i‡(
num
 < 1) {

1745 c⁄° 
möisufs
[] = "\0munpfazy";

1746 
num
 < 0.01) {

1747 ++
suffix
;

1748 
num
 *= 1000;

1750 
	`•rötf
(
buf
, "%1.4f%c", 
num
, 
möisufs
[
suffix
]);

1753 c⁄° 
megasufs
[] = "\0kMGTPEZY";

1754 
num
 >= 1000) {

1755 ++
suffix
;

1756 
num
 /= 1000;

1758 
	`•rötf
(
buf
, "%.2f%c", 
num
, 
megasufs
[
suffix
]);

1761  
buf
;

1762 
	}
}

1764 
	$¥ötBíchm¨kNames
()

1766 
°d
::
	`¥ötf
(" Supported benchmarksáre:\n");

1768 
i
 = 0; i !
BENCHMARK_TYPE_COUNT
; ++i) {

1769 
°d
::
	`¥ötf
(" %s\n", 
BENCHMARK_SHORT_NAMES
[
i
]);

1771 
	}
}

1774 
	$maö
(
¨gc
, ** 
¨gv
)

1777 
°d
::
	`£tvbuf
(
°dout
, 
nuŒ±r
, 
_IONBF
, 0);

1780 
°d
::
°rög
 
¥ogName
 = 
¨gv
[0];

1781 autÿ
¶ash
 = 
¥ogName
.
	`föd_œ°_of
("/\\");

1782 i‡(
¶ash
 !
°d
::
°rög
::
≈os
) {

1783 
¥ogName
 =ÖrogName.
	`sub°r
(
¶ash
 + 1);

1786 
°d
::
m≠
<°d::
°rög
, 
bíchm¨k_ty≥_t
> 
bíchm¨kM≠
;

1787 
i
 = 0; i !
BENCHMARK_TYPE_COUNT
; ++i) {

1788 
bíchm¨kM≠
.
	`ö£π
(
°d
::
	`make_∑ú
(°d::
	`°rög
(
BENCHMARK_SHORT_NAMES
[
i
]), (
bíchm¨k_ty≥_t
)i));

1790 
°d
::
ve˘‹
<
bíchm¨k_ty≥_t
> 
£À˘edBíchm¨ks
;

1792 
boﬁ
 
showHñp
 = 
Ál£
;

1793 
boﬁ
 
îr‹
 = 
Ál£
;

1794 
boﬁ
 
¥öãdBíchm¨ks
 = 
Ál£
;

1795 
i
 = 1; i < 
¨gc
; ++i) {

1796 i‡(
°d
::
	`°rcmp
(
¨gv
[
i
], "-h") == 0 || std::strcmp(argv[i], "--help") == 0) {

1797 
showHñp
 = 
åue
;

1799 i‡(
°d
::
	`°rcmp
(
¨gv
[
i
], "-p") == 0 || std::strcmp(argv[i], "--precise") == 0) {

1800 
¥eci£
 = 
åue
;

1802 i‡(
°d
::
	`°rcmp
(
¨gv
[
i
], "--run") == 0) {

1803 i‡(
i
 + 1 =
¨gc
 || 
¨gv
[i + 1][0] == '-') {

1804 
°d
::
	`¥ötf
("Expected benchmarkÇameárgument for --run option.\n");

1805 i‡(!
¥öãdBíchm¨ks
) {

1806 
	`¥ötBíchm¨kNames
();

1807 
¥öãdBíchm¨ks
 = 
åue
;

1809 
îr‹
 = 
åue
;

1813 autÿ
ô
 = 
bíchm¨kM≠
.
	`föd
(
¨gv
[++
i
]);

1814 i‡(
ô
 =
bíchm¨kM≠
.
	`íd
()) {

1815 
°d
::
	`¥ötf
("Uƒecognized bíchm¨kÇamê'%s'.\n", 
¨gv
[
i
]);

1816 i‡(!
¥öãdBíchm¨ks
) {

1817 
	`¥ötBíchm¨kNames
();

1818 
¥öãdBíchm¨ks
 = 
åue
;

1820 
îr‹
 = 
åue
;

1824 
£À˘edBíchm¨ks
.
	`push_back
(
ô
->
£c⁄d
);

1827 
°d
::
	`¥ötf
("Uƒecognized o±i⁄ '%s'\n", 
¨gv
[
i
]);

1828 
îr‹
 = 
åue
;

1831 i‡(
showHñp
 || 
îr‹
) {

1832 i‡(
îr‹
) {

1833 
°d
::
	`¥ötf
("\n");

1835 
°d
::
	`¥ötf
("%s\¿ Des¸ùti⁄: Run†bíchm¨k†f‹ moodyˇmñ::C⁄cuºítQueue\n", 
¥ogName
.
	`c_°r
());

1836 
°d
::
	`¥ötf
(" --help PrintsÅhis help blurb\n");

1837 
°d
::
	`¥ötf
(" --precise Generate moreÖrecise benchmarkÑesults (slower)\n");

1838 
°d
::
	`¥ötf
(" --run benchmark Runs onlyÅhe selected benchmark (can be used multipleÅimes)\n");

1839  
îr‹
 ? 1 : 0;

1842 
boﬁ
 
logExi°s
 = 
åue
;

1844 
°d
::
if°ªam
 
	`fö
(
LOG_FILE
);

1845 i‡(!
fö
) {

1846 
logExi°s
 = 
Ál£
;

1850 
°d
::
of°ªam
 
	`fout
(
LOG_FILE
, std::
ios
::
≠p
);

1851 
logOut
 = &
fout
;

1852 i‡(
fout
) {

1853 i‡(
logExi°s
) {

1854 
fout
 << "\n\n\n";

1856 
fout
 << "--- NewÑu¿(" << 
	`time°amp
() << ") ---\n";

1859 
°d
::
	`¥ötf
("NŸe: Eº‹ o≥nögÜog fûê'%s'. Ouçuàwû»≠≥¨ o∆y o¿°dout.\n\n", 
LOG_FILE
);

1860 
logEº‹Rï‹ãd
 = 
åue
;

1863 c⁄° * 
bôSå
 = "";

1865 
bôSå
 = (*) == 4 ? " 32-bit" : " 64-bit";

1868 c⁄° * 
˝uSå
 = 
	`gëCPUSåög
();

1869 
	`ßyf
(0, "Ru¬ög%†bíchm¨k†⁄á%†%s\n", 
bôSå
, 
	`isvowñ
(
˝uSå
[0]) ? "n" : "", cpuStr);

1870 i‡(
¥eci£
) {

1871 
	`ßyf
(4, "(precise mode)\n");

1873 i‡(
£À˘edBíchm¨ks
.
	`size
() > 0) {

1874 
	`ßyf
(4, "(selected benchmarks only)\n");

1876 
	`ßyf
(0, "NoteÅhatÅheseáre synthetic benchmarks. TakeÅhem withá grain of salt.\n\n");

1878 
	`ßyf
(0, "Legend:\n");

1879 
	`ßyf
(4, "'Avg': AverageÅimeÅakenÖer operation,ÇormalizedÅo beÖerÅhread\n");

1880 
	`ßyf
(4, "'Range': The minimumánd maximumÅimesÅakenÖer operation (perÅhread)\n");

1881 
	`ßyf
(4, "'Ops/s': Overall operationsÖer second\n");

1882 
	`ßyf
(4, "'Ops/s/t': OperationsÖer secondÖerÅhread (inverse of 'Avg')\n");

1883 
	`ßyf
(4, "Operations includeÅhoseÅhat fail (e.g. becauseÅhe queue isÉmpty).\n");

1884 
	`ßyf
(4, "EachÜogicalÉnqueue/dequeue countsásán individual operation when in bulk.\n");

1885 
	`ßyf
(0, "\n");

1888 #ifde‡
NDEBUG


1889 c⁄° 
ITERATIONS
 = 
¥eci£
 ? 100 : 10;

1891 c⁄° 
ITERATIONS
 = 
¥eci£
 ? 20 : 2;

1895 c⁄° 
FASTEST_PERCENT_CONSIDERED
 = 
¥eci£
 ? 8 : 50;

1898 
°d
::
	`§™d
(°d::
	`time
(
NULL
));

1899 
øndSìds
[
BENCHMARK_TYPE_COUNT
];

1900 
i
 = 0; i !
BENCHMARK_TYPE_COUNT
; ++i) {

1901 
øndSìds
[
i
] = 
°d
::
	`ønd
() * (i + 1) + 1;

1904 
›s°
 = 0;

1906 
tŸÆWeighãdOps°
[
QUEUE_COUNT
];

1907 
tŸÆWeight
[
QUEUE_COUNT
];

1908 
i
 = 0; i !
QUEUE_COUNT
; ++i) {

1909 
tŸÆWeighãdOps°
[
i
] = 0;

1910 
tŸÆWeight
[
i
] = 0;

1913 autÿ
logiˇlC‹es
 = 
°d
::
thªad
::
	`h¨dw¨e_c⁄cuºícy
();

1915 i‡(
£À˘edBíchm¨ks
.
	`size
() == 0) {

1916 
i
 = 0; i !
BENCHMARK_TYPE_COUNT
; ++i) {

1917 
£À˘edBíchm¨ks
.
	`push_back
((
bíchm¨k_ty≥_t
)
i
);

1921 
ödít
 = 0;

1922 autÿ
£À˘edIt
 = 
£À˘edBíchm¨ks
.
	`cbegö
(); sñe˘edIà!£À˘edBíchm¨ks.
	`˚nd
(); ++selectedIt) {

1923 
bíchm¨k
 = 
°©ic_ˇ°
<>(*
£À˘edIt
);

1924 autÿ
£ed
 = 
øndSìds
[
bíchm¨k
];

1926 
boﬁ
 
™yQueueSuµ‹tsBíchm¨k
 = 
Ál£
;

1927 
queue
 = 0; queuê!
QUEUE_COUNT
; ++queue) {

1928 i‡(
QUEUE_BENCH_SUPPORT
[
queue
][
bíchm¨k
]) {

1929 
™yQueueSuµ‹tsBíchm¨k
 = 
åue
;

1933 i‡(!
™yQueueSuµ‹tsBíchm¨k
) {

1937 
	`ßyf
(0, "%s", 
BENCHMARK_NAMES
[
bíchm¨k
]);

1938 i‡(
BENCHMARK_THREADS_MEASURED
[
bíchm¨k
] != 0) {

1939 i‡(
BENCHMARK_THREADS_MEASURED
[
bíchm¨k
] < 0) {

1940 
	`ßyf
(0, " (mósurögáŒ buà%d %s)", -
BENCHMARK_THREADS_MEASURED
[
bíchm¨k
], BENCHMARK_THREADS_MEASURED[benchmark] == -1 ? "thread" : "threads");

1943 
	`ßyf
(0, " (mósurög %d %s)", 
BENCHMARK_THREADS_MEASURED
[
bíchm¨k
], BENCHMARK_THREADS_MEASURED[benchmark] == 1 ? "thread" : "threads");

1946 
	`ßyf
(0, ":\n");

1947 
ödít
 += 2;

1948 
	`ßyf
(
ödít
, "(%s)\n", 
BENCHMARK_DESCS
[
bíchm¨k
]);

1950 
queue
 = 0; queuê!
QUEUE_COUNT
; ++queue) {

1951 
	`ßyf
(
ödít
, "> %s\n", 
QUEUE_NAMES
[
queue
]);

1953 i‡(!
QUEUE_BENCH_SUPPORT
[
queue
][
bíchm¨k
]) {

1954 
	`ßyf
(
ödít
 + 3, "(skipping, benchmarkÇot supported...)\n\n");

1958 i‡(
QUEUE_TOKEN_SUPPORT
[
queue
]) {

1959 
ödít
 += 4;

1961 
u£Tokís
 = 0; useTokens != 2; ++useTokens) {

1962 i‡(
QUEUE_TOKEN_SUPPORT
[
queue
]) {

1963 
	`ßyf
(
ödít
, "%†tokís\n", 
u£Tokís
 == 0 ? "Without" : "With");

1965 i‡(
u£Tokís
 =1 && !
QUEUE_TOKEN_SUPPORT
[
queue
]) {

1968 
ödít
 += 3;

1970 
°d
::
ve˘‹
<> 
›s°s
;

1971 
°d
::
ve˘‹
<> 
thªadCou¡s
;

1972 
¡hªadIndex
 = 0; 
BENCHMARK_THREADS
[
bíchm¨k
][nthreadIndex] != 0; ++nthreadIndex) {

1973 
¡hªads
 = 
BENCHMARK_THREADS
[
bíchm¨k
][
¡hªadIndex
];

1974 
mósuªdThªads
 = 
¡hªads
;

1975 i‡(
BENCHMARK_THREADS_MEASURED
[
bíchm¨k
] != 0) {

1976 
mósuªdThªads
 = 
BENCHMARK_THREADS_MEASURED
[
bíchm¨k
] < 0 ? 
¡hªads
 + BENCHMARK_THREADS_MEASURED[benchmark] : BENCHMARK_THREADS_MEASURED[benchmark];

1979 i‡(
logiˇlC‹es
 > 0 && ()
¡hªads
 > 3 *ÜogicalCores) {

1982 i‡(
QUEUE_MAX_THREADS
[
queue
] >0 && QUEUE_MAX_THREADS[queue] < 
¡hªads
) {

1986 
cou¡î_t
 
maxOps
;

1987 (
queue_id_t
)
queue
) {

1988 
queue_moodyˇmñ_C⁄cuºítQueue
:

1989 
maxOps
 = 
dëîmöeMaxOpsF‹Bíchm¨k
<
moodyˇmñ
::
C⁄cuºítQueue
<, 
Tøôs
>, >((
bíchm¨k_ty≥_t
)
bíchm¨k
, 
¡hªads
, (
boﬁ
)
u£Tokís
, 
£ed
);

1991 
queue_moodyˇmñ_BlockögC⁄cuºítQueue
:

1992 
maxOps
 = 
dëîmöeMaxOpsF‹Bíchm¨k
<
moodyˇmñ
::
BlockögC⁄cuºítQueue
<, 
Tøôs
>, >((
bíchm¨k_ty≥_t
)
bíchm¨k
, 
¡hªads
, (
boﬁ
)
u£Tokís
, 
£ed
);

1994 
queue_lockba£d
:

1995 
maxOps
 = 
dëîmöeMaxOpsF‹Bíchm¨k
<
LockBa£dQueue
<>, >((
bíchm¨k_ty≥_t
)
bíchm¨k
, 
¡hªads
, (
boﬁ
)
u£Tokís
, 
£ed
);

1997 
queue_sim∂ñock‰ì
:

1998 
maxOps
 = 
dëîmöeMaxOpsF‹Bíchm¨k
<
Sim∂eLockFªeQueue
<>, >((
bíchm¨k_ty≥_t
)
bíchm¨k
, 
¡hªads
, (
boﬁ
)
u£Tokís
, 
£ed
);

2000 
queue_boo°
:

2001 
maxOps
 = 
dëîmöeMaxOpsF‹Bíchm¨k
<
Boo°QueueWøµî
<>, >((
bíchm¨k_ty≥_t
)
bíchm¨k
, 
¡hªads
, (
boﬁ
)
u£Tokís
, 
£ed
);

2003 
queue_tbb
:

2004 
maxOps
 = 
dëîmöeMaxOpsF‹Bíchm¨k
<
TbbQueueWøµî
<>, >((
bíchm¨k_ty≥_t
)
bíchm¨k
, 
¡hªads
, (
boﬁ
)
u£Tokís
, 
£ed
);

2006 
queue_°d
:

2007 
maxOps
 = 
dëîmöeMaxOpsF‹Bíchm¨k
<
StdQueueWøµî
<>, >((
bíchm¨k_ty≥_t
)
bíchm¨k
, 
¡hªads
, (
boﬁ
)
u£Tokís
, 
£ed
);

2009 
queue_dlib
:

2010 
maxOps
 = 
dëîmöeMaxOpsF‹Bíchm¨k
<
DlibQueueWøµî
<>, >((
bíchm¨k_ty≥_t
)
bíchm¨k
, 
¡hªads
, (
boﬁ
)
u£Tokís
, 
£ed
);

2013 
	`as£π
(
Ál£
 && "There should beá case here forÉvery queue inÅhe benchmarks!");

2017 
maxThªads
 = 
QUEUE_MAX_THREADS
[
queue
];

2018 
°d
::
ve˘‹
<
Bíchm¨kResu…
> 
	`ªsu…s
(
ITERATIONS
);

2019 
i
 = 0; i < 
ITERATIONS
; ++i) {

2020 
ñ≠£d
;

2021 
cou¡î_t
 
›s
 = 0;

2023 (
queue_id_t
)
queue
) {

2024 
queue_moodyˇmñ_C⁄cuºítQueue
:

2025 
ñ≠£d
 = 
runBíchm¨k
<
moodyˇmñ
::
C⁄cuºítQueue
<, 
Tøôs
>, >((
bíchm¨k_ty≥_t
)
bíchm¨k
, 
¡hªads
, (
boﬁ
)
u£Tokís
, 
£ed
, 
maxOps
, 
maxThªads
, 
›s
);

2027 
queue_moodyˇmñ_BlockögC⁄cuºítQueue
:

2028 
ñ≠£d
 = 
runBíchm¨k
<
moodyˇmñ
::
BlockögC⁄cuºítQueue
<, 
Tøôs
>, >((
bíchm¨k_ty≥_t
)
bíchm¨k
, 
¡hªads
, (
boﬁ
)
u£Tokís
, 
£ed
, 
maxOps
, 
maxThªads
, 
›s
);

2030 
queue_lockba£d
:

2031 
ñ≠£d
 = 
runBíchm¨k
<
LockBa£dQueue
<>, >((
bíchm¨k_ty≥_t
)
bíchm¨k
, 
¡hªads
, (
boﬁ
)
u£Tokís
, 
£ed
, 
maxOps
, 
maxThªads
, 
›s
);

2033 
queue_sim∂ñock‰ì
:

2034 
ñ≠£d
 = 
runBíchm¨k
<
Sim∂eLockFªeQueue
<>, >((
bíchm¨k_ty≥_t
)
bíchm¨k
, 
¡hªads
, (
boﬁ
)
u£Tokís
, 
£ed
, 
maxOps
, 
maxThªads
, 
›s
);

2036 
queue_boo°
:

2037 
ñ≠£d
 = 
runBíchm¨k
<
Boo°QueueWøµî
<>, >((
bíchm¨k_ty≥_t
)
bíchm¨k
, 
¡hªads
, (
boﬁ
)
u£Tokís
, 
£ed
, 
maxOps
, 
maxThªads
, 
›s
);

2039 
queue_tbb
:

2040 
ñ≠£d
 = 
runBíchm¨k
<
TbbQueueWøµî
<>, >((
bíchm¨k_ty≥_t
)
bíchm¨k
, 
¡hªads
, (
boﬁ
)
u£Tokís
, 
£ed
, 
maxOps
, 
maxThªads
, 
›s
);

2042 
queue_°d
:

2043 
ñ≠£d
 = 
runBíchm¨k
<
StdQueueWøµî
<>, >((
bíchm¨k_ty≥_t
)
bíchm¨k
, 
¡hªads
, (
boﬁ
)
u£Tokís
, 
£ed
, 
maxOps
, 
maxThªads
, 
›s
);

2045 
queue_dlib
:

2046 
ñ≠£d
 = 
runBíchm¨k
<
DlibQueueWøµî
<>, >((
bíchm¨k_ty≥_t
)
bíchm¨k
, 
¡hªads
, (
boﬁ
)
u£Tokís
, 
£ed
, 
maxOps
, 
maxThªads
, 
›s
);

2049 
	`as£π
(
Ál£
 && "There should beá case here forÉvery queue inÅhe benchmarks!");

2052 
ªsu…s
[
i
].
ñ≠£dTime
 = 
ñ≠£d
;

2053 
ªsu…s
[
i
].
›î©i⁄s
 = 
›s
;

2056 
°d
::
	`s‹t
(&
ªsu…s
[0], &ªsu…s[0] + 
ITERATIONS
);

2057 
c⁄sidîedCou¡
 = 
°d
::
	`max
(2, ()(
ITERATIONS
 * 
FASTEST_PERCENT_CONSIDERED
 / 100));

2059 
mö
 = 
	`ß„_divide
(
ªsu…s
[0].
ñ≠£dTime
 / 1000.0, (Ïesu…s[0].
›î©i⁄s
 / 
mósuªdThªads
);

2060 
max
 = 
	`ß„_divide
(
ªsu…s
[0].
ñ≠£dTime
 / 1000.0, (Ïesu…s[0].
›î©i⁄s
 / 
mósuªdThªads
);

2061 
›s
 = 0;

2062 
time
 = 0;

2063 
i
 = 0; i !
c⁄sidîedCou¡
; ++i) {

2064 
msPîO≥øti⁄
 = 
	`ß„_divide
(
ªsu…s
[
i
].
ñ≠£dTime
 / 1000.0, (Ïesu…s[i].
›î©i⁄s
 / 
mósuªdThªads
);

2065 i‡(
msPîO≥øti⁄
 < 
mö
) {

2066 
mö
 = 
msPîO≥øti⁄
;

2068 i‡(
msPîO≥øti⁄
 > 
max
) {

2069 
max
 = 
msPîO≥øti⁄
;

2072 
time
 +
ªsu…s
[
i
].
ñ≠£dTime
;

2073 
›s
 +
ªsu…s
[
i
].
›î©i⁄s
;

2076 
avg
 = 
	`ß„_divide
(
time
 / 1000.0, 
›s
 / 
mósuªdThªads
);

2077 
›sPîSec⁄d
 = 
	`ß„_divide
(
›s
, 
time
 / 1000.0);

2078 
›s°
 = 
›sPîSec⁄d
 / ()
mósuªdThªads
;

2080 
›s°s
.
	`push_back
(
›s°
);

2081 
thªadCou¡s
.
	`push_back
(
mósuªdThªads
);

2083 
	`ßyf
(
ödít
, "%-3d %7s: Avg: %7s† R™ge: [%7ss, %7ss] Ops/s: %7† Ops/s/t: %7s\n", 
¡hªads
,Çthªad†!1 ? "thªads" : "thªad", 
	`¥ëty
(
avg
),Öªây(
mö
),Öªây(
max
),Öªây(
›sPîSec⁄d
),Öªây(
›s°
));

2084 i‡(
¡hªads
 =1 && 
BENCHMARK_SINGLE_THREAD_NOTES
[
bíchm¨k
][0] != '\0') {

2085 
	`ßyf
(
ödít
 + 7, "^ NŸe: %s\n", 
BENCHMARK_SINGLE_THREAD_NOTES
[
bíchm¨k
]);

2089 
›s°
 = 0;

2090 
divis‹
 = 0;

2091 
size_t
 
i
 = 0; i !
›s°s
.
	`size
(); ++i) {

2092 
›s°
 +
›s°s
[
i
] * 
°d
::
	`sqπ
(
thªadCou¡s
[i]);

2093 
tŸÆWeighãdOps°
[
queue
] +
›s°s
[
i
] * 
°d
::
	`sqπ
(
thªadCou¡s
[i]);

2094 
divis‹
 +
°d
::
	`sqπ
(
thªadCou¡s
[
i
]);

2095 
tŸÆWeight
[
queue
] +
°d
::
	`sqπ
(
thªadCou¡s
[
i
]);

2097 
›s°
 /
divis‹
;

2098 
	`ßyf
(
ödít
, "O≥øti⁄†≥∏£c⁄dÖîÅhªad (weighãdávîage): %7s\n\n", 
›s°
 =0 ? "“/a)" : 
	`¥ëty
(opsst));

2100 
ödít
 -= 3;

2102 i‡(
QUEUE_TOKEN_SUPPORT
[
queue
]) {

2103 
ödít
 -= 4;

2106 
ödít
 -= 2;

2109 
	`ßyf
(0, "Overalláverage operationsÖer secondÖerÅhread (where higher-concurrencyÑuns have more weight):\n");

2110 
	`ßyf
(0, "(TakeÅhis summary withá grain of salt --ÜookátÅhe individual benchmarkÑesults forá much\nbetter idea of howÅhe queues measure upÅoÉach other):\n");

2111 
queue
 = 0; queuê!
QUEUE_COUNT
; ++queue) {

2112 
›s°
 = 
	`ß„_divide
(
tŸÆWeighãdOps°
[
queue
], 
tŸÆWeight
[queue]);

2113 i‡(
QUEUE_SUMMARY_NOTES
[
queue
] !
nuŒ±r
 && QUEUE_SUMMARY_NOTES[queue][0] != '\0') {

2114 
	`ßyf
(4, "%†(%s): %7s\n", 
QUEUE_NAMES
[
queue
], 
QUEUE_SUMMARY_NOTES
[queue], 
›s°
 =0 ? "“/a)" : 
	`¥ëty
(opsst));

2117 
	`ßyf
(4, "%s: %7s\n", 
QUEUE_NAMES
[
queue
], 
›s°
 =0 ? "“/a)" : 
	`¥ëty
(opsst));

2122 
	}
}

	@viper/concurrentqueue-src/benchmarks/boostqueue.h

1 #¥agm®
⁄˚


3 
	~<utûôy
>

5 
	~"boo°/lock‰ì/queue.hµ
"

6 
	~"wøµîs.h
"

8 
	gãm∂©e
<
ty≥«me
 
	gT
>

9 
	sBoo°QueueWøµî


11 
	mpublic
:

12 
DummyTokí
 
	t¥odu˚r_tokí_t
;

13 
DummyTokí
 
	tc⁄sumî_tokí_t
;

15 
	mpublic
:

16 
Boo°QueueWøµî
(Ë: 
q
( 16384) { }

18 
ãm∂©e
<
ty≥«me
 
U
>

19 
ölöe
 
boﬁ
 
íqueue
(
U
&& 
ôem
)

21  
q
.
push
(
°d
::
f‹w¨d
<
U
>(
ôem
));

24 
ölöe
 
boﬁ
 
åy_dequeue
(
T
& 
ôem
)

26  
	mq
.
p›
(
ôem
);

30 
boﬁ
 
íqueue
(
¥odu˚r_tokí_t
 c⁄°&, 
T
 c⁄°&Ë{  
	mÁl£
; }

31 
boﬁ
 
åy_íqueue
(
¥odu˚r_tokí_t
, 
T
 c⁄°&Ë{  
	mÁl£
; }

32 
boﬁ
 
åy_dequeue
(
c⁄sumî_tokí_t
, 
T
& 
ôem
Ë{  
	mÁl£
; }

33 
	mãm∂©e
<
ty≥«me
 
	mIt
> 
boﬁ
 
íqueue_bulk
(
It
, 
size_t
Ë{  
	mÁl£
; }

34 
	mãm∂©e
<
ty≥«me
 
	mIt
> 
boﬁ
 
íqueue_bulk
(
¥odu˚r_tokí_t
 c⁄°&, 
It
, 
size_t
Ë{  
	mÁl£
; }

35 
	mãm∂©e
<
ty≥«me
 
	mIt
> 
size_t
 
åy_dequeue_bulk
(
It
, size_t) {  0; }

36 
	mãm∂©e
<
ty≥«me
 
	mIt
> 
size_t
 
åy_dequeue_bulk
(
c⁄sumî_tokí_t
, 
It
, size_t) {  0; }

38 
	m¥iv©e
:

39 
boo°
::
lock‰ì
::
queue
<
T
> 
q
;

	@viper/concurrentqueue-src/benchmarks/cpuid.cpp

1 
	~<c°döt
>

2 
	~<c°rög
>

3 
	~<c°dio
>

4 
	~<c°dlib
>

6 
	~"˝uid.h
"

8 #ifde‡
_WIN32


9 
	#WIN32_LEAN_AND_MEAN


	)

10 
	~<wödows.h
>

13 
	$BOOL
 (
	tWINAPI
 *
	tLPFN_GLPI
)(
	tPSYSTEM_LOGICAL_PROCESSOR_INFORMATION
, 
	tPDWORD
);

16 
	$cou¡BôsSë
(
ULONG_PTR
 
bôMask
)

18 
ªsu…
 = 0;

19 
bôMask
 != 0) {

20 
ªsu…
 +()(
bôMask
 & 1);

21 
bôMask
 >>= 1;

23  
ªsu…
;

24 
	}
}

26 
boﬁ
 
	$gëPro˚ss‹InfoFromOS
(& 
˝us
, & 
c‹es
, & 
logiˇlC‹es
, & 
˛ockS≥ed
)

28 
˝us
 = 0;

29 
c‹es
 = 0;

30 
logiˇlC‹es
 = 0;

31 
˛ockS≥ed
 = 0;

34 
HKEY
 
hKey
;

35 i‡(
	`RegO≥nKeyEx
(
HKEY_LOCAL_MACHINE
, 
	`TEXT
("HARDWARE\\DESCRIPTION\\Sy°em\\CíåÆPro˚ss‹\\0"), 0, 
KEY_EXECUTE
, &
hKey
Ë=
ERROR_SUCCESS
) {

36 
DWORD
 
ty≥
 = 
REG_DWORD
;

37 
DWORD
 
vÆ
;

38 
DWORD
 
cbD©a
 = (
vÆ
);

39 i‡(
	`RegQuîyVÆueEx
(
hKey
, 
	`TEXT
("~MHz"), 
NULL
, &
ty≥
, (
LPBYTE
)&
vÆ
, &
cbD©a
Ë=
ERROR_SUCCESS
) {

40 i‡(
ty≥
 =
REG_DWORD
 && 
cbD©a
 =(
DWORD
)) {

41 
˛ockS≥ed
 = 
vÆ
 / 1000.0;

46 i‡(
˛ockS≥ed
 == 0) {

48 
LARGE_INTEGER
 
f
;

49 i‡(!
	`QuîyPîf‹m™˚Fªquícy
(&
f
)) {

50  
Ál£
;

52 
˛ockS≥ed
 = 
f
.
QuadP¨t
 / 1000.0 / 1000.0;

56 
LPFN_GLPI
 
gÕi
;

57 
gÕi
 = (
LPFN_GLPI
)
	`GëProcAddªss
(
	`GëModuÀH™dÀ
(
	`TEXT
("kernel32")), "GetLogicalProcessorInformation");

58 i‡(
gÕi
 =
NULL
) {

59  
Ál£
;

62 
PSYSTEM_LOGICAL_PROCESSOR_INFORMATION
 
buf„r
 = 
NULL
;

63 
DWORD
 
buf„rLígth
 = 0;

64 i‡(
	`gÕi
(
buf„r
, &
buf„rLígth
Ë=
TRUE
) {

65  
Ál£
;

68 
	`GëLa°Eº‹
(Ë=
ERROR_INSUFFICIENT_BUFFER
) {

69 i‡(
buf„r
 !
NULL
) {

70 
°d
::
	`‰ì
(
buf„r
);

72 
buf„r
 = (
PSYSTEM_LOGICAL_PROCESSOR_INFORMATION
)
°d
::
	`mÆloc
(
buf„rLígth
);

73 i‡(
buf„r
 =
NULL
) {

74  
Ál£
;

76 i‡(
	`gÕi
(
buf„r
, &
buf„rLígth
Ë=
TRUE
) {

77 i‡(
buf„rLígth
 / (
SYSTEM_LOGICAL_PROCESSOR_INFORMATION
) * (SYSTEM_LOGICAL_PROCESSOR_INFORMATION) != bufferLength) {

79 
°d
::
	`‰ì
(
buf„r
);

80  
Ál£
;

83 autÿ
íd
 = (
PSYSTEM_LOGICAL_PROCESSOR_INFORMATION
)((*)
buf„r
 + 
buf„rLígth
);

84 autÿ
±r
 = 
buf„r
;Öå !
íd
; ++ptr) {

85 
±r
->
Rñ©i⁄shù
) {

86 
Rñ©i⁄Pro˚ss‹C‹e
:

87 ++
c‹es
;

88 
logiˇlC‹es
 +
	`cou¡BôsSë
(
±r
->
Pro˚ss‹Mask
);

90 
Rñ©i⁄Pro˚ss‹Package
:

91 ++
˝us
;

98 
°d
::
	`‰ì
(
buf„r
);

99  
åue
;

102 i‡(
buf„r
 !
NULL
) {

103 
°d
::
	`‰ì
(
buf„r
);

105  
Ál£
;

106 
	}
}

109 
boﬁ
 
	$gëPro˚ss‹InfoFromOS
(& 
˝us
, & 
c‹es
, & 
logiˇlC‹es
, & 
˛ockS≥ed
)

111  
Ál£
;

112 
	}
}

116 #i‡
deföed
(
__x86_64__
Ë|| deföed(
_M_AMD64
Ë|| deföed(
__amd64__
Ë|| deföed (
_M_X64
Ë|| deföed(
_M_IX86
Ë|| deföed(
__i386__
)

117 
	#MOODYCAMEL_X86_OR_X64


	)

120 #ifde‡
MOODYCAMEL_X86_OR_X64


121 
	sCPUIDInfo


123 
	m°d
::
uöt32_t
 
d©a
[4];

126 #ifde‡
_MSC_VER


127 
	~<öåö.h
>

129 
ölöe
 
CPUIDInfo
 
	$˝uid
(
°d
::
uöt32_t
 
óx
)

131 
CPUIDInfo
 
öfo
;

132 
	`__˝uidex
((*)&
öfo
.
d©a
[0], 
óx
, 0);

133  
öfo
;

134 
	}
}

137 
ölöe
 
CPUIDInfo
 
	$˝uid
(
°d
::
uöt32_t
 
óx
)

139 
CPUIDInfo
 
öfo
;

140 
asm
 volatile("cpuid"

141 : "˜" (
öfo
.
d©a
[0]), "=b" (info.data[1]), "=c" (info.data[2]), "=d" (info.data[3])

142 : "a" (
óx
), "c" (0));

143  
öfo
;

144 
	}
}

148 
«me•a˚
 
	gmoodyˇmñ


150 c⁄° * 
gëCPUSåög
()

153 #ifde‡
MOODYCAMEL_X86_OR_X64


154 
	gbuf
[128] = { 0 };

155 i‡(
	gbuf
[0] != 0) {

156  
buf
;

159 
CPUIDInfo
 
	göfo
 = 
˝uid
(0x80000000);

160 
	g°d
::
uöt32_t
 
ex
 = 
öfo
.
d©a
[0];

161 
	g°d
::
uöt32_t
 
i
 = 0; 
	gi
 + 0x80000002 <
ex
 && i != 3; ++i) {

162 *(
	gªöãΩªt_ˇ°
<
	gCPUIDInfo
*>(
	gbuf
Ë+ 
	gi
Ë
˝uid
(
i
 + 0x80000002);

165 i‡(
	gbuf
[0] == 0) {

166 
°r˝y
(
buf
, 
UNKNOWN_CPU_STRING
);

167  
	gbuf
;

170 
	göfo
 = 
˝uid
(0);

171 i‡(
	göfo
.
	gd©a
[0] < 1) {

173  
	gbuf
;

177 
	göfo
 = 
˝uid
(1);

178 
boﬁ
 
	ght
 = ((
öfo
.
d©a
[3] >> 28) & 1) == 1;

179 
	g˝us
, 
	gc‹es
, 
	glogiˇlC‹es
;

180 
	g˛ockS≥ed
;

181 i‡(!
gëPro˚ss‹InfoFromOS
(
˝us
, 
c‹es
, 
logiˇlC‹es
, 
˛ockS≥ed
)) {

182  
	gbuf
;

185 
	g©Index
;

186 
	g©Index
 = ()
°d
::
°æí
(
buf
) - 1;átIndex != -1; --atIndex) {

187 i‡(
	gbuf
[
©Index
] == '@') {

188 i‡(
©Index
 > 0 && 
buf
[atIndex - 1] == ' ') {

189 --
©Index
;

191 
	gbuf
[
©Index
] = '\0';

196 * 
	gs
 = 
buf
 + 
°d
::
°æí
(buf); s !bu‡&& 
s
[-1] == ' '; --s)

197 
	gs
[-1] = '\0';

198 * 
	g°r
 = 
buf
 + 
°d
::
°æí
(buf);

199 i‡(
	g˝us
 > 1) {

201 
	glogiˇlC‹es
 /
˝us
;

202 
	gc‹es
 /
˝us
;

203 
	g°d
::
•rötf
(
°r
, " x%d", 
˝us
);

204 
	g°r
 +
°æí
(
°r
);

206 
	ght
 = 
ht
 && 
logiˇlC‹es
 !
c‹es
;

207 
	g°d
::
•rötf
(
°r
, " wôh %d c‹e%s%†@ %.1fGHz%s", 
c‹es
, c‹e†=1 ? "" : "s", 
ht
 ? " (Hy≥rThªaded)" : "", 
˛ockS≥ed
, 
˝us
 > 1 ? "Éach" : "");

209  
	gbuf
;

211  
	gUNKNOWN_CPU_STRING
;

	@viper/concurrentqueue-src/benchmarks/cpuid.h

1 #¥agm®
⁄˚


3 
«me•a˚
 
	gmoodyˇmñ


5 c⁄° 
	gUNKNOWN_CPU_STRING
[] = "unknownÖrocessor";

11 c⁄° * 
gëCPUSåög
();

	@viper/concurrentqueue-src/benchmarks/dlib/algs.h

4 #ifde‡
DLIB_ALL_SOURCE_END


5 
	~"dlib_basic_˝p_buûd_tut‹ül.txt
"

8 #i‚de‡
DLIB_ALGs_


9 
	#DLIB_ALGs_


	)

14 #i‡(
deföed
(
__GNUC__
Ë&& ((__GNUC__ >4 && 
__GNUC_MINOR__
 >= 8) || (__GNUC__ > 4))) || \

15 (
deföed
(
__˛™g__
Ë&& ((
	g__˛™g_maj‹__
 >3 && 
__˛™g_mö‹__
 >4Ë|| (
__˛™g_maj‹__
 >= 3)))

16 #i‡
__˝lu•lus
 < 201103

21 #i‡
deföed
 
__NVCC__


25 #¥agm®
düg_suµªss
 
code_is_uƒóchabÀ


29 #ifde‡
_MSC_VER


31 #i‡ 
_MSC_VER
 < 1900

41 #¥agm®
w¨nög
(
dißbÀ
 : 4355)

46 #¥agm®
w¨nög
(
dißbÀ
 : 4675)

51 #¥agm®
w¨nög
(
dißbÀ
 : 4996)

57 #¥agm®
w¨nög
(
dißbÀ
 : 4345)

61 #¥agm®
w¨nög
(
dißbÀ
 : 4267)

64 #¥agm®
w¨nög
(
dißbÀ
 : 4244)

65 #¥agm®
w¨nög
(
dißbÀ
 : 4305)

69 #¥agm®
w¨nög
(
dißbÀ
 : 4180)

72 #¥agm®
w¨nög
(
dißbÀ
 : 4290)

78 #¥agm®
w¨nög
–
dißbÀ
: 4503 )

83 #ifde‡
__BORLANDC__


89 #¥agm®
›ti⁄
 -
w
-8027

90 #¥agm®
›ti⁄
 -
w
-8026

93 
	~<°rög
>

95 #ifde‡
__CYGWIN__


96 
«me•a˚
 
°d


98 
°d
::
	tbasic_°rög
<
	twch¨_t
> 
	tw°rög
;

102 
	~"∂©f‹m.h
"

103 
	~"wödows_magic.h
"

106 
	~<Æg‹ôhm
>

107 
	~<√w
>

108 
	~<c°dlib
>

109 
	~<°ddef.h
>

110 
	~<limôs
>

111 
	~"as£π.h
"

112 
	~"îr‹.h
"

113 
	~"n⁄c›yabÀ.h
"

114 
	~"íabÀ_if.h
"

115 
	~"uöä.h
"

116 
	~"numîic_c⁄°™ts.h
"

117 
	~"mem‹y_m™agî_°©ñess/mem‹y_m™agî_°©ñess_kî√l_1.h
"

124 
	gãm∂©e
 <
ty≥«me
 
	gch¨T
>

125 
ölöe
 
ch¨T
 
_dTˇ°
 (c⁄° 
a
, c⁄° 
wch¨_t
 
b
);

126 
	gãm∂©e
 <>

127 
ölöe
 
	g_dTˇ°
<> (c⁄° 
	ga
, c⁄° 
	gwch¨_t
 ) { á; }

128 
	gãm∂©e
 <>

129 
ölöe
 
wch¨_t
 
	g_dTˇ°
<
	gwch¨_t
> (c⁄° , c⁄° wch¨_à
	gb
) {  b; }

131 
	gãm∂©e
 <
ty≥«me
 
	gch¨T
>

132 
ölöe
 c⁄° 
ch¨T
* 
_dTˇ°
 ( c⁄° * 
a
, c⁄° 
wch¨_t
* 
b
);

133 
	gãm∂©e
 <>

134 
ölöe
 c⁄° * 
	g_dTˇ°
<> ( c⁄° * 
	ga
, c⁄° 
	gwch¨_t
* ) { á; }

135 
	gãm∂©e
 <>

136 
ölöe
 c⁄° 
wch¨_t
* 
	g_dTˇ°
<
	gwch¨_t
> ( c⁄° * , c⁄° wch¨_t* 
	gb
) {  b; }

139 
	#_dT
(
ch¨T
,
°r
Ë
_dTˇ°
<ch¨T>(°r,
L
##°r)

	)

152 
«me•a˚
 
	gdlib


162 
	gmem‹y_m™agî_°©ñess_kî√l_1
<> 
	tdeÁu…_mem‹y_m™agî
;

168 
usög
 
	g°d
::
sw≠
;

177 
	egíîÆ_ªtu∫_codes


179 
	gTIMEOUT
 = -1,

180 
	gWOULDBLOCK
 = -2,

181 
	gOTHER_ERROR
 = -3,

182 
	gSHUTDOWN
 = -4,

183 
	gPORTINUSE
 = -5

188 
ölöe
 
squ¨e_roŸ
 (

189 
vÆue


199 
	gx
;

203 i‡(
	gvÆue
 < 3)

204  
	gvÆue
;

205 i‡(
	gvÆue
 < 4096)

206 
	gx
 = 45;

207 i‡(
	gvÆue
 < 65536)

208 
	gx
 = 179;

209 i‡(
	gvÆue
 < 1048576)

210 
	gx
 = 717;

211 i‡(
	gvÆue
 < 16777216)

212 
	gx
 = 2867;

213 i‡(
	gvÆue
 < 268435456)

214 
	gx
 = 11469;

216 
	gx
 = 45875;

221 
	gx
 = (
x
 + 
vÆue
/x)>>1;

222 
	gx
 = (
x
 + 
vÆue
/x)>>1;

223 
	gx
 = (
x
 + 
vÆue
/x)>>1;

224 
	gx
 = (
x
 + 
vÆue
/x)>>1;

228 i‡(
x
*
	gx
 < 
	gvÆue
)

229  
	gx
+1;

231  
	gx
;

236 
	gãm∂©e
 <

237 
ty≥«me
 
	gT


239 
medün
 (

240 
T
& 
⁄e
,

241 
T
& 
two
,

242 
T
& 
thªe


254 
	gãm∂©e
 <

255 
ty≥«me
 
	gT


257 
medün
 (

258 
T
& 
⁄e
,

259 
T
& 
two
,

260 
T
& 
thªe


263 
usög
 
	g°d
::
sw≠
;

264 
usög
 
	gdlib
::
sw≠
;

266 i‡–
	g⁄e
 < 
	gtwo
 )

269 i‡–
	gtwo
 < 
	gthªe
 )

272 
sw≠
(
⁄e
,
two
);

278 i‡–
	g⁄e
 < 
	gthªe
)

281 
sw≠
(
thªe
,
⁄e
);

289 i‡–
	gthªe
 < 
	g⁄e
 )

292 i‡–
	gthªe
 < 
	gtwo
 )

295 
sw≠
(
two
,
⁄e
);

300 
sw≠
(
thªe
,
⁄e
);

308 
«me•a˚
 
	gªœti⁄Æ_›î©‹s


310 
	gãm∂©e
 <

311 
ty≥«me
 
	gA
,

312 
ty≥«me
 
	gB


314 
c⁄°ex¥
 
boﬁ
 
	g›î©‹
> (

315 c⁄° 
	gA
& 
	ga
,

316 c⁄° 
	gB
& 
	gb


317 Ë{  
	gb
 < 
	ga
; }

321 
	gãm∂©e
 <

322 
ty≥«me
 
	gA
,

323 
ty≥«me
 
	gB


325 
c⁄°ex¥
 
boﬁ
 
	g›î©‹
!= (

326 c⁄° 
A
& 
a
,

327 c⁄° 
	gB
& 
	gb


328 Ë{  !(
	ga
 =
b
); }

332 
	gãm∂©e
 <

333 
ty≥«me
 
	gA
,

334 
ty≥«me
 
	gB


336 
c⁄°ex¥
 
boﬁ
 
	g›î©‹
<= (

337 c⁄° 
A
& 
a
,

338 c⁄° 
	gB
& 
	gb


339 Ë{  !(
	gb
 < 
	ga
); }

343 
	gãm∂©e
 <

344 
ty≥«me
 
	gA
,

345 
ty≥«me
 
	gB


347 
c⁄°ex¥
 
boﬁ
 
	g›î©‹
>= (

348 c⁄° 
A
& 
a
,

349 c⁄° 
	gB
& 
	gb


350 Ë{  !(
	ga
 < 
	gb
); }

356 
	gãm∂©e
 <

357 
ty≥«me
 
	gT


359 
exch™ge
 (

360 
T
& 
a
,

361 
T
& 
b


376 
usög
 
	g°d
::
sw≠
;

377 
usög
 
	gdlib
::
sw≠
;

378 
sw≠
(
a
,
b
);

389 
	gãm∂©e
 <

390 
ty≥«me
 
	gT


392 ˛as†
	cis_poöãr_ty≥


394 
	gpublic
:

395 íum { 
vÆue
 = 
Ál£
 };

396 
	g¥iv©e
:

397 
is_poöãr_ty≥
();

400 
	gãm∂©e
 <

401 
ty≥«me
 
	gT


403 
˛ass
 
	gis_poöãr_ty≥
<
	gT
*>

405 
	gpublic
:

406 íum { 
vÆue
 = 
åue
 };

407 
	g¥iv©e
:

408 
is_poöãr_ty≥
();

419 
	gãm∂©e
 <
ty≥«me
 
	gT
>

420 
	sis_c⁄°_ty≥


422 c⁄° 
boﬁ
 
	gvÆue
 = 
Ál£
;

424 
	gãm∂©e
 <
ty≥«me
 
	gT
>

425 
	gis_c⁄°_ty≥
<c⁄° 
	gT
>

427 c⁄° 
boﬁ
 
	gvÆue
 = 
åue
;

429 
	gãm∂©e
 <
ty≥«me
 
	gT
>

430 
	gis_c⁄°_ty≥
<c⁄° 
	gT
&>

432 c⁄° 
boﬁ
 
	gvÆue
 = 
åue
;

443 
	gãm∂©e
 <
ty≥«me
 
	gT
>

444 
	sis_ª„ªn˚_ty≥


446 c⁄° 
boﬁ
 
	gvÆue
 = 
Ál£
;

449 
	gãm∂©e
 <
ty≥«me
 
	gT
> 
	gis_ª„ªn˚_ty≥
<c⁄° T&> { c⁄° 
boﬁ
 
	gvÆue
 = 
åue
; };

450 
	gãm∂©e
 <
ty≥«me
 
	gT
> 
	gis_ª„ªn˚_ty≥
<T&> { c⁄° 
boﬁ
 
	gvÆue
 = 
åue
; };

460 
	gãm∂©e
 <

461 
ty≥«me
 
	gT
,

462 
ty≥«me
 
	gU


464 ˛as†
	cis_ßme_ty≥


466 
	gpublic
:

467 íum {
vÆue
 = 
Ál£
};

468 
	g¥iv©e
:

469 
is_ßme_ty≥
();

472 
	gãm∂©e
 <
ty≥«me
 
	gT
>

473 
˛ass
 
	gis_ßme_ty≥
<
	gT
,T>

475 
	gpublic
:

476 íum {
vÆue
 = 
åue
};

477 
	g¥iv©e
:

478 
is_ßme_ty≥
();

489 
	gãm∂©e
 < 
ty≥«me
 
	gT
 > 
	sis_Êﬂt_ty≥
 { c⁄° 
boﬁ
 
	gvÆue
 = 
Ál£
; };

490 
	gãm∂©e
 <> 
	gis_Êﬂt_ty≥
<> { c⁄° 
boﬁ
 
	gvÆue
 = 
åue
; };

491 
	gãm∂©e
 <> 
	gis_Êﬂt_ty≥
<> { c⁄° 
boﬁ
 
	gvÆue
 = 
åue
; };

492 
	gãm∂©e
 <> 
	gis_Êﬂt_ty≥
<> { c⁄° 
boﬁ
 
	gvÆue
 = 
åue
; };

506 
	gãm∂©e
 <
ty≥«me
 
	g‰om
,Åy≥«mê
	gto
>

507 
	sis_c⁄vîtibÀ


509 
	syes_ty≥
 { 
	ga
; };

510 
	sno_ty≥
 { 
yes_ty≥
 
	ga
[2]; };

511 c⁄° 
	g‰om
& 
‰om_hñ≥r
();

512 
yes_ty≥
 
ã°
(
to
);

513 
no_ty≥
 
ã°
(...);

514 c⁄° 
boﬁ
 
	gvÆue
 = (
ã°
(
‰om_hñ≥r
())Ë=(
yes_ty≥
);

519 
	sgíîÆ_
 {};

520 
	g•ecül_
 : 
gíîÆ_
 {};

521 
	gãm∂©e
<
	gty≥«me
> 
	söt_
 { 
	tty≥
; };

534 
	gãm∂©e
 < 
ty≥«me
 
	gT
,Åy≥«mê
	gU
 >

535 
ty≥«me
 
	gdißbÀ_if_c
<
	gis_c⁄vîtibÀ
<
	gT
*, 
	gU
*>::
vÆue
 || 
is_c⁄vîtibÀ
<
U
*,T*>::vÆue, 
	gboﬁ
>::
ty≥


536 
	$is_ßme_obje˘
 (

537 c⁄° 
T
& 
a
,

538 c⁄° 
U
& 
b


541  ((*)&
a
 =(*)&
b
);

542 
	}
}

549 
	gãm∂©e
 < 
ty≥«me
 
	gT
,Åy≥«mê
	gU
 >

550 
ty≥«me
 
	gíabÀ_if_c
<
	gis_c⁄vîtibÀ
<
	gT
*, 
	gU
*>::
vÆue
 || 
is_c⁄vîtibÀ
<
U
*,T*>::vÆue, 
	gboﬁ
>::
ty≥


551 
	$is_ßme_obje˘
 (

552 c⁄° 
T
& 
a
,

553 c⁄° 
U
& 
b


556  (&
a
 =&
b
);

557 
	}
}

566 
	gãm∂©e
 <

567 
ty≥«me
 
	gT


569 
	sis_unsig√d_ty≥


571 c⁄° 
boﬁ
 
	gvÆue
 = 
°©ic_ˇ°
<
T
>((static_cast<T>(0)-static_cast<T>(1))) > 0;

573 
	gãm∂©e
 <> 
	gis_unsig√d_ty≥
<> { c⁄° 
boﬁ
 
	gvÆue
 = 
Ál£
; };

574 
	gãm∂©e
 <> 
	gis_unsig√d_ty≥
<> { c⁄° 
boﬁ
 
	gvÆue
 = 
Ál£
; };

575 
	gãm∂©e
 <> 
	gis_unsig√d_ty≥
<> { c⁄° 
boﬁ
 
	gvÆue
 = 
Ál£
; };

584 
	gãm∂©e
 <

585 
ty≥«me
 
	gT


587 
	sis_sig√d_ty≥


589 c⁄° 
boﬁ
 
	gvÆue
 = !
is_unsig√d_ty≥
<
T
>::
vÆue
;

594 
	gãm∂©e
 <

595 
ty≥«me
 
	gT


597 ˛as†
	cc›y_fun˘‹


599 
	gpublic
:

600 
›î©‹
() (

601 c⁄° 
T
& 
sour˚
,

602 
	gT
& 
	gde°ö©i⁄


605 
	gde°ö©i⁄
 = 
sour˚
;

624 
	gãm∂©e
 < 
boﬁ
 
	gv1
 = 0, boﬁ 
	gv2
 = 0, boﬁ 
	gv3
 = 0, boﬁ 
	gv4
 = 0, boﬁ 
	gv5
 = 0,

625 
boﬁ
 
	gv6
 = 0, boﬁ 
	gv7
 = 0, boﬁ 
	gv8
 = 0, boﬁ 
	gv9
 = 0, boﬁ 
	gv10
 = 0,

626 
boﬁ
 
	gv11
 = 0, boﬁ 
	gv12
 = 0, boﬁ 
	gv13
 = 0, boﬁ 
	gv14
 = 0, boﬁ 
	gv15
 = 0 >

627 
°©ic_swôch
;

629 
	gãm∂©e
 <> 
	g°©ic_swôch
<0,0,0,0,0,0,0,0,0,0,0,0,0,0,0> { c⁄° 
	gvÆue
 = 0; };

630 
	gãm∂©e
 <> 
	g°©ic_swôch
<1,0,0,0,0,0,0,0,0,0,0,0,0,0,0> { c⁄° 
	gvÆue
 = 1; };

631 
	gãm∂©e
 <> 
	g°©ic_swôch
<0,1,0,0,0,0,0,0,0,0,0,0,0,0,0> { c⁄° 
	gvÆue
 = 2; };

632 
	gãm∂©e
 <> 
	g°©ic_swôch
<0,0,1,0,0,0,0,0,0,0,0,0,0,0,0> { c⁄° 
	gvÆue
 = 3; };

633 
	gãm∂©e
 <> 
	g°©ic_swôch
<0,0,0,1,0,0,0,0,0,0,0,0,0,0,0> { c⁄° 
	gvÆue
 = 4; };

634 
	gãm∂©e
 <> 
	g°©ic_swôch
<0,0,0,0,1,0,0,0,0,0,0,0,0,0,0> { c⁄° 
	gvÆue
 = 5; };

635 
	gãm∂©e
 <> 
	g°©ic_swôch
<0,0,0,0,0,1,0,0,0,0,0,0,0,0,0> { c⁄° 
	gvÆue
 = 6; };

636 
	gãm∂©e
 <> 
	g°©ic_swôch
<0,0,0,0,0,0,1,0,0,0,0,0,0,0,0> { c⁄° 
	gvÆue
 = 7; };

637 
	gãm∂©e
 <> 
	g°©ic_swôch
<0,0,0,0,0,0,0,1,0,0,0,0,0,0,0> { c⁄° 
	gvÆue
 = 8; };

638 
	gãm∂©e
 <> 
	g°©ic_swôch
<0,0,0,0,0,0,0,0,1,0,0,0,0,0,0> { c⁄° 
	gvÆue
 = 9; };

639 
	gãm∂©e
 <> 
	g°©ic_swôch
<0,0,0,0,0,0,0,0,0,1,0,0,0,0,0> { c⁄° 
	gvÆue
 = 10; };

640 
	gãm∂©e
 <> 
	g°©ic_swôch
<0,0,0,0,0,0,0,0,0,0,1,0,0,0,0> { c⁄° 
	gvÆue
 = 11; };

641 
	gãm∂©e
 <> 
	g°©ic_swôch
<0,0,0,0,0,0,0,0,0,0,0,1,0,0,0> { c⁄° 
	gvÆue
 = 12; };

642 
	gãm∂©e
 <> 
	g°©ic_swôch
<0,0,0,0,0,0,0,0,0,0,0,0,1,0,0> { c⁄° 
	gvÆue
 = 13; };

643 
	gãm∂©e
 <> 
	g°©ic_swôch
<0,0,0,0,0,0,0,0,0,0,0,0,0,1,0> { c⁄° 
	gvÆue
 = 14; };

644 
	gãm∂©e
 <> 
	g°©ic_swôch
<0,0,0,0,0,0,0,0,0,0,0,0,0,0,1> { c⁄° 
	gvÆue
 = 15; };

656 
	gãm∂©e
 <
ty≥«me
 
	gT
> 
	sis_buût_ö_sˇœr_ty≥
 { c⁄° 
boﬁ
 
	gvÆue
 = 
Ál£
; };

658 
	gãm∂©e
 <> 
	gis_buût_ö_sˇœr_ty≥
<> { c⁄° 
boﬁ
 
	gvÆue
 = 
åue
; };

659 
	gãm∂©e
 <> 
	gis_buût_ö_sˇœr_ty≥
<> { c⁄° 
boﬁ
 
	gvÆue
 = 
åue
; };

660 
	gãm∂©e
 <> 
	gis_buût_ö_sˇœr_ty≥
<> { c⁄° 
boﬁ
 
	gvÆue
 = 
åue
; };

661 
	gãm∂©e
 <> 
	gis_buût_ö_sˇœr_ty≥
<> { c⁄° 
boﬁ
 
	gvÆue
 = 
åue
; };

662 
	gãm∂©e
 <> 
	gis_buût_ö_sˇœr_ty≥
<> { c⁄° 
boﬁ
 
	gvÆue
 = 
åue
; };

663 
	gãm∂©e
 <> 
	gis_buût_ö_sˇœr_ty≥
<> { c⁄° 
boﬁ
 
	gvÆue
 = 
åue
; };

664 
	gãm∂©e
 <> 
	gis_buût_ö_sˇœr_ty≥
<> { c⁄° 
boﬁ
 
	gvÆue
 = 
åue
; };

665 
	gãm∂©e
 <> 
	gis_buût_ö_sˇœr_ty≥
<> { c⁄° 
boﬁ
 
	gvÆue
 = 
åue
; };

666 
	gãm∂©e
 <> 
	gis_buût_ö_sˇœr_ty≥
<> { c⁄° 
boﬁ
 
	gvÆue
 = 
åue
; };

667 
	gãm∂©e
 <> 
	gis_buût_ö_sˇœr_ty≥
<
	guöt64
> { c⁄° 
boﬁ
 
	gvÆue
 = 
åue
; };

668 
	gãm∂©e
 <> 
	gis_buût_ö_sˇœr_ty≥
<
	göt64
> { c⁄° 
boﬁ
 
	gvÆue
 = 
åue
; };

669 
	gãm∂©e
 <> 
	gis_buût_ö_sˇœr_ty≥
<> { c⁄° 
boﬁ
 
	gvÆue
 = 
åue
; };

670 
	gãm∂©e
 <> 
	gis_buût_ö_sˇœr_ty≥
<sig√d > { c⁄° 
boﬁ
 
	gvÆue
 = 
åue
; };

671 
	gãm∂©e
 <> 
	gis_buût_ö_sˇœr_ty≥
<> { c⁄° 
boﬁ
 
	gvÆue
 = 
åue
; };

676 #i‡!
deföed
(
_MSC_VER
Ë|| 
_NATIVE_WCHAR_T_DEFINED


677 
	gãm∂©e
 <> 
	gis_buût_ö_sˇœr_ty≥
<
	gwch¨_t
> { c⁄° 
boﬁ
 
	gvÆue
 = 
åue
; };

682 
	gãm∂©e
 <

683 
ty≥«me
 
	gT


685 
ty≥«me
 
	gíabÀ_if
<
	gis_buût_ö_sˇœr_ty≥
<
	gT
>,
	gboﬁ
>::
ty≥
 
	$is_föôe
 (

686 c⁄° 
T
& 
vÆue


696 i‡(
is_Êﬂt_ty≥
<
T
>::
vÆue
)

697  -
°d
::
numîic_limôs
<
T
>::
	`öföôy
(Ë< 
vÆue
 && value < std::numeric_limits<T>::infinity();

699  
åue
;

700 
	}
}

713 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
size_t
 
	gs
 = (
T
)> 
¥omŸe
;

714 
	gãm∂©e
 <
ty≥«me
 
	gT
> 
	g¥omŸe
<T,1> { 
öt32
 
	tty≥
; };

715 
	gãm∂©e
 <
ty≥«me
 
	gT
> 
	g¥omŸe
<T,2> { 
öt32
 
	tty≥
; };

716 
	gãm∂©e
 <
ty≥«me
 
	gT
> 
	g¥omŸe
<T,4> { 
öt64
 
	tty≥
; };

717 
	gãm∂©e
 <
ty≥«me
 
	gT
> 
	g¥omŸe
<T,8> { 
öt64
 
	tty≥
; };

719 
	gãm∂©e
 <> 
	g¥omŸe
<,()> { 
	tty≥
; };

720 
	gãm∂©e
 <> 
	g¥omŸe
<,()> { 
	tty≥
; };

721 
	gãm∂©e
 <> 
	g¥omŸe
<,()> { 
	tty≥
; };

732 
	gãm∂©e
 <
ty≥«me
 
	gT
> 
ölöe
Åy≥«mê
	gdißbÀ_if
<
	gis_buût_ö_sˇœr_ty≥
<T>,>::
ty≥
 
	$assign_zîo_if_buût_ö_sˇœr_ty≥
 (
T
&){
	}
}

733 
ãm∂©e
 <
ty≥«me
 
T
> 
ölöe
Åy≥«mê
íabÀ_if
<
is_buût_ö_sˇœr_ty≥
<T>,>::
ty≥
 
	$assign_zîo_if_buût_ö_sˇœr_ty≥
 (
T
& 
a
){a=0;
	}
}

745 
	gãm∂©e
 <
ty≥«me
 
	gT
> 
	sbasic_ty≥
 { 
T
 
	tty≥
; };

746 
	gãm∂©e
 <
ty≥«me
 
	gT
> 
	gbasic_ty≥
<c⁄° T> { 
T
 
	tty≥
; };

747 
	gãm∂©e
 <
ty≥«me
 
	gT
> 
	gbasic_ty≥
<c⁄° T&> { 
T
 
	tty≥
; };

748 
	gãm∂©e
 <
ty≥«me
 
	gT
> 
	gbasic_ty≥
<vﬁ©ûêc⁄° T&> { 
T
 
	tty≥
; };

749 
	gãm∂©e
 <
ty≥«me
 
	gT
> 
	gbasic_ty≥
<T&> { 
T
 
	tty≥
; };

750 
	gãm∂©e
 <
ty≥«me
 
	gT
> 
	gbasic_ty≥
<vﬁ©ûêT&> { 
T
 
	tty≥
; };

751 
	gãm∂©e
 <
ty≥«me
 
	gT
> 
	gbasic_ty≥
<vﬁ©ûêT> { 
T
 
	tty≥
; };

752 
	gãm∂©e
 <
ty≥«me
 
	gT
> 
	gbasic_ty≥
<vﬁ©ûêc⁄° T> { 
T
 
	tty≥
; };

756 
	gãm∂©e
 <
ty≥«me
 
	gT
>

757 
T
 
	$put_ö_ønge
 (

758 c⁄° 
T
& 
a
,

759 c⁄° 
T
& 
b
,

760 c⁄° 
T
& 
vÆ


772 i‡(
a
 < 
b
)

774 i‡(
vÆ
 < 
a
)

775  
a
;

776 i‡(
vÆ
 > 
b
)

777  
b
;

781 i‡(
vÆ
 < 
b
)

782  
b
;

783 i‡(
vÆ
 > 
a
)

784  
a
;

787  
vÆ
;

788 
	}
}

791 
ölöe
 
	$put_ö_ønge
(c⁄° & 
a
, c⁄° & 
b
, c⁄° & 
vÆ
)

792 {  
put_ö_ønge
<>(
a
,
b
,
vÆ
); 
	}
}

805 
	gãm∂©e
 <
	gx
, 
ty≥«me
 
	gíabÀd
=>

806 
	sèbs
 { c⁄° 
vÆue
 = 
x
; };

807 
	gãm∂©e
 <
	gx
>

808 
	gèbs
<
	gx
,
ty≥«me
 
	gíabÀ_if_c
<(x < 0)>::
ty≥
> { c⁄° 
vÆue
 = -
x
; };

820 
	gãm∂©e
 <
	gx
, 
	gy
, 
ty≥«me
 
	gíabÀd
=>

821 
	stmax
 { c⁄° 
vÆue
 = 
x
; };

822 
	gãm∂©e
 <
	gx
, 
	gy
>

823 
	gtmax
<
	gx
,
	gy
,
ty≥«me
 
	gíabÀ_if_c
<(y > x)>::
ty≥
> { c⁄° 
vÆue
 = 
y
; };

835 
	gãm∂©e
 <
	gx
, 
	gy
, 
ty≥«me
 
	gíabÀd
=>

836 
	stmö
 { c⁄° 
vÆue
 = 
x
; };

837 
	gãm∂©e
 <
	gx
, 
	gy
>

838 
	gtmö
<
	gx
,
	gy
,
ty≥«me
 
	gíabÀ_if_c
<(y < x)>::
ty≥
> { c⁄° 
vÆue
 = 
y
; };

842 
	#DLIB_MAKE_HAS_MEMBER_FUNCTION_TEST
(
ã°«me
, 
ªtu∫T
, 
fun˘_«me
, 
¨gs
) \

843 
_two_byãs_
##
ã°«me
 { 
a
[2]; }; \

844 
ãm∂©e
 < 
ty≥«me
 
T
, 
	$ªtu∫T
 (
T
::*
fun˘
)
¨gs
 > \

845 
_hñ≥r_
##
ã°«me
 { 
	tty≥
; 
	}
}; \

846 
ãm∂©e
 <
ty≥«me
 
T
> \

847 
_has_
##
ã°«me
##
	`_hñ≥r
–
ty≥«me
 
_hñ≥r_
##ã°«me<
T
,&T::
fun˘_«me
 >::
ty≥
 ) {  0;} \

848 
ãm∂©e
 <
ty≥«me
 
T
> \

849 
_two_byãs_
##
ã°«me
 
_has_
##ã°«me##
	$_hñ≥r
(Ë{  
_two_byãs_
##
	`ã°«me
();
	}
} \

850 
ãm∂©e
 <
ty≥«me
 
T
> 
_
##
ã°«me
##
w‹k¨oundbug
 { \

851 c⁄° 
U
 = (
_has_
##
ã°«me
##
_hñ≥r
<
T
>('a')); }; \

852 
ãm∂©e
 <
ty≥«me
 
T
, 
U
 = 
_
##
ã°«me
##
w‹k¨oundbug
<T>::U > \

853 
	sã°«me
 { c⁄° 
boﬁ
 
vÆue
 = 
Ál£
; }; \

854 
ãm∂©e
 <
ty≥«me
 
T
> \

855 
ã°«me
<
T
,1> { c⁄° 
boﬁ
 
vÆue
 = 
åue
; };

	)

898 
	gãm∂©e
 <
ty≥«me
 
	gT
> 
	sis_fun˘i⁄
 { c⁄° 
boﬁ
 
	gvÆue
 = 
Ál£
; };

899 
	gãm∂©e
 <
ty≥«me
 
	gT
>

900 
	gis_fun˘i⁄
<
T
 ()> { c⁄° 
boﬁ
 
	gvÆue
 = 
åue
; };

901 
	gãm∂©e
 <
ty≥«me
 
	gT
,Åy≥«mê
	gA0
>

902 
	gis_fun˘i⁄
<
T
 (
A0
)> { c⁄° 
boﬁ
 
	gvÆue
 = 
åue
; };

903 
	gãm∂©e
 <
ty≥«me
 
	gT
,Åy≥«mê
	gA0
,Åy≥«mê
	gA1
>

904 
	gis_fun˘i⁄
<
T
 (
A0
, 
A1
)> { c⁄° 
boﬁ
 
	gvÆue
 = 
åue
; };

905 
	gãm∂©e
 <
ty≥«me
 
	gT
,Åy≥«mê
	gA0
,Åy≥«mê
	gA1
,Åy≥«mê
	gA2
>

906 
	gis_fun˘i⁄
<
T
 (
A0
, 
A1
, 
A2
)> { c⁄° 
boﬁ
 
	gvÆue
 = 
åue
; };

907 
	gãm∂©e
 <
ty≥«me
 
	gT
,Åy≥«mê
	gA0
,Åy≥«mê
	gA1
,Åy≥«mê
	gA2
,Åy≥«mê
	gA3
>

908 
	gis_fun˘i⁄
<
T
 (
A0
, 
A1
, 
A2
, 
A3
)> { c⁄° 
boﬁ
 
	gvÆue
 = 
åue
; };

909 
	gãm∂©e
 <
ty≥«me
 
	gT
,Åy≥«mê
	gA0
,Åy≥«mê
	gA1
,Åy≥«mê
	gA2
,Åy≥«mê
	gA3
,Åy≥«mê
	gA4
>

910 
	gis_fun˘i⁄
<
T
 (
A0
, 
A1
, 
A2
, 
A3
, 
A4
)> { c⁄° 
boﬁ
 
	gvÆue
 = 
åue
; };

911 
	gãm∂©e
 <
ty≥«me
 
	gT
,Åy≥«mê
	gA0
,Åy≥«mê
	gA1
,Åy≥«mê
	gA2
,Åy≥«mê
	gA3
,Åy≥«mê
	gA4
,

912 
ty≥«me
 
	gA5
>

913 
	gis_fun˘i⁄
<
T
 (
A0
,
A1
,
A2
,
A3
,
A4
,
A5
)> { c⁄° 
boﬁ
 
	gvÆue
 = 
åue
; };

914 
	gãm∂©e
 <
ty≥«me
 
	gT
,Åy≥«mê
	gA0
,Åy≥«mê
	gA1
,Åy≥«mê
	gA2
,Åy≥«mê
	gA3
,Åy≥«mê
	gA4
,

915 
ty≥«me
 
	gA5
,Åy≥«mê
	gA6
>

916 
	gis_fun˘i⁄
<
T
 (
A0
,
A1
,
A2
,
A3
,
A4
,
A5
,
A6
)> { c⁄° 
boﬁ
 
	gvÆue
 = 
åue
; };

917 
	gãm∂©e
 <
ty≥«me
 
	gT
,Åy≥«mê
	gA0
,Åy≥«mê
	gA1
,Åy≥«mê
	gA2
,Åy≥«mê
	gA3
,Åy≥«mê
	gA4
,

918 
ty≥«me
 
	gA5
,Åy≥«mê
	gA6
,Åy≥«mê
	gA7
>

919 
	gis_fun˘i⁄
<
T
 (
A0
,
A1
,
A2
,
A3
,
A4
,
A5
,
A6
,
A7
)> { c⁄° 
boﬁ
 
	gvÆue
 = 
åue
; };

920 
	gãm∂©e
 <
ty≥«me
 
	gT
,Åy≥«mê
	gA0
,Åy≥«mê
	gA1
,Åy≥«mê
	gA2
,Åy≥«mê
	gA3
,Åy≥«mê
	gA4
,

921 
ty≥«me
 
	gA5
,Åy≥«mê
	gA6
,Åy≥«mê
	gA7
,Åy≥«mê
	gA8
>

922 
	gis_fun˘i⁄
<
T
 (
A0
,
A1
,
A2
,
A3
,
A4
,
A5
,
A6
,
A7
,
A8
)> { c⁄° 
boﬁ
 
	gvÆue
 = 
åue
; };

923 
	gãm∂©e
 <
ty≥«me
 
	gT
,Åy≥«mê
	gA0
,Åy≥«mê
	gA1
,Åy≥«mê
	gA2
,Åy≥«mê
	gA3
,Åy≥«mê
	gA4
,

924 
ty≥«me
 
	gA5
,Åy≥«mê
	gA6
,Åy≥«mê
	gA7
,Åy≥«mê
	gA8
,Åy≥«mê
	gA9
>

925 
	gis_fun˘i⁄
<
T
 (
A0
,
A1
,
A2
,
A3
,
A4
,
A5
,
A6
,
A7
,
A8
,
A9
)> { c⁄° 
boﬁ
 
	gvÆue
 = 
åue
; };

928 
	gãm∂©e
 <
ty≥«me
 
	gT
> cœs†
	cfun˘_wøp0


930 
	gpublic
:

931 
fun˘_wøp0
(
T
 (&
f_
)()):
f
(f_){}

932 
T
 
›î©‹
()(Ëc⁄° {  
f
(); }

933 
	g¥iv©e
:

934 
T
 (&
f
)();

936 
	gãm∂©e
 <
ty≥«me
 
	gT
,Åy≥«mê
	gA0
> cœs†
	cfun˘_wøp1


938 
	gpublic
:

939 
fun˘_wøp1
(
T
 (&
f_
)(
A0
)):
f
(f_){}

940 
T
 
›î©‹
()(
A0
 
a0
Ëc⁄° {  
f
(a0); }

941 
	g¥iv©e
:

942 
T
 (&
f
)(
A0
);

944 
	gãm∂©e
 <
ty≥«me
 
	gT
,Åy≥«mê
	gA0
,Åy≥«mê
	gA1
> cœs†
	cfun˘_wøp2


946 
	gpublic
:

947 
fun˘_wøp2
(
T
 (&
f_
)(
A0
,
A1
)):
f
(f_){}

948 
T
 
›î©‹
()(
A0
 
a0
, 
A1
 
	ga1
Ëc⁄° {  
f
◊0,
a1
); }

949 
	g¥iv©e
:

950 
T
 (&
f
)(
A0
,
	gA1
);

952 
	gãm∂©e
 <
ty≥«me
 
	gT
,Åy≥«mê
	gA0
,Åy≥«mê
	gA1
,Åy≥«mê
	gA2
> cœs†
	cfun˘_wøp3


954 
	gpublic
:

955 
fun˘_wøp3
(
T
 (&
f_
)(
A0
,
A1
,
A2
)):
f
(f_){}

956 
T
 
›î©‹
()(
A0
 
a0
, 
A1
 
	ga1
, 
A2
 
	ga2
Ëc⁄° {  
f
◊0,
a1
,
a2
); }

957 
	g¥iv©e
:

958 
T
 (&
f
)(
A0
,
	gA1
,
	gA2
);

960 
	gãm∂©e
 <
ty≥«me
 
	gT
,Åy≥«mê
	gA0
,Åy≥«mê
	gA1
,Åy≥«mê
	gA2
,Åy≥«mê
	gA3
> cœs†
	cfun˘_wøp4


962 
	gpublic
:

963 
fun˘_wøp4
(
T
 (&
f_
)(
A0
,
A1
,
A2
,
A3
)):
f
(f_){}

964 
T
 
›î©‹
()(
A0
 
a0
, 
A1
 
	ga1
, 
A2
 
	ga2
, 
A3
 
	ga3
Ëc⁄° {  
f
◊0,
a1
,
a2
,
a3
); }

965 
	g¥iv©e
:

966 
T
 (&
f
)(
A0
,
	gA1
,
	gA2
,
	gA3
);

968 
	gãm∂©e
 <
ty≥«me
 
	gT
,Åy≥«mê
	gA0
,Åy≥«mê
	gA1
,Åy≥«mê
	gA2
,Åy≥«mê
	gA3
,Åy≥«mê
	gA4
> cœs†
	cfun˘_wøp5


970 
	gpublic
:

971 
fun˘_wøp5
(
T
 (&
f_
)(
A0
,
A1
,
A2
,
A3
,
A4
)):
f
(f_){}

972 
T
 
›î©‹
()(
A0
 
a0
, 
A1
 
	ga1
, 
A2
 
	ga2
, 
A3
 
	ga3
, 
A4
 
	ga4
Ëc⁄° {  
f
◊0,
a1
,
a2
,
a3
,
a4
); }

973 
	g¥iv©e
:

974 
T
 (&
f
)(
A0
,
	gA1
,
	gA2
,
	gA3
,
	gA4
);

998 
	gãm∂©e
 <
ty≥«me
 
	gT
>

999 
	gfun˘_wøp0
<
	gT
> 
wøp_fun˘i⁄
(
	$T
 (&
f
)()Ë{  
fun˘_wøp0
<
T
>(f); 
	}
}

1000 
	gãm∂©e
 <
ty≥«me
 
	gT
,Åy≥«mê
	gA0
>

1001 
	gfun˘_wøp1
<
	gT
,
	gA0
> 
wøp_fun˘i⁄
(
	$T
 (&
f
)(
A0
)Ë{  
fun˘_wøp1
<
T
,A0>(f); 
	}
}

1002 
	gãm∂©e
 <
ty≥«me
 
	gT
,Åy≥«mê
	gA0
,Åy≥«mê
	gA1
>

1003 
	gfun˘_wøp2
<
	gT
,
	gA0
,
	gA1
> 
wøp_fun˘i⁄
(
	$T
 (&
f
)(
A0
, 
A1
)Ë{  
fun˘_wøp2
<
T
,A0,A1>(f); 
	}
}

1004 
	gãm∂©e
 <
ty≥«me
 
	gT
,Åy≥«mê
	gA0
,Åy≥«mê
	gA1
,Åy≥«mê
	gA2
>

1005 
	gfun˘_wøp3
<
	gT
,
	gA0
,
	gA1
,
	gA2
> 
wøp_fun˘i⁄
(
	$T
 (&
f
)(
A0
, 
A1
, 
A2
)Ë{  
fun˘_wøp3
<
T
,A0,A1,A2>(f); 
	}
}

1006 
	gãm∂©e
 <
ty≥«me
 
	gT
,Åy≥«mê
	gA0
,Åy≥«mê
	gA1
,Åy≥«mê
	gA2
,Åy≥«mê
	gA3
>

1007 
	gfun˘_wøp4
<
	gT
,
	gA0
,
	gA1
,
	gA2
,
	gA3
> 
wøp_fun˘i⁄
(
	$T
 (&
f
)(
A0
, 
A1
, 
A2
, 
A3
)Ë{  
fun˘_wøp4
<
T
,A0,A1,A2,A3>(f); 
	}
}

1008 
	gãm∂©e
 <
ty≥«me
 
	gT
,Åy≥«mê
	gA0
,Åy≥«mê
	gA1
,Åy≥«mê
	gA2
,Åy≥«mê
	gA3
,Åy≥«mê
	gA4
>

1009 
	gfun˘_wøp5
<
	gT
,
	gA0
,
	gA1
,
	gA2
,
	gA3
,
	gA4
> 
wøp_fun˘i⁄
(
	$T
 (&
f
)(
A0
, 
A1
, 
A2
, 
A3
, 
A4
)Ë{  
fun˘_wøp5
<
T
,A0,A1,A2,A3,A4>(f); 
	}
}

1013 
	gãm∂©e
 <
	gbSIZE
>

1014 ˛as†
	c°ack_ba£d_mem‹y_block
 : 
n⁄c›yabÀ


1022 
public
:

1023 c⁄° 
size
 = 
bSIZE
;

1025 
°ack_ba£d_mem‹y_block
(): 
d©a
(
mem
.data) {}

1027 * 
gë
 (Ë{  
d©a
; }

1033 c⁄° * 
gë
 (Ëc⁄° {  
	gd©a
; }

1039 
	g¥iv©e
:

1042 
COMPILE_TIME_ASSERT
(
bSIZE
 > 0);

1044 
	umem_block


1051 * 
	gvoid_±r
;

1052 
	göãgî
;

1054 (
	g°ack_ba£d_mem‹y_block
::*
ˇŒback
)();

1055 
°ack_ba£d_mem‹y_block
* 
	go
;

1056 } 
	g°uff
;

1057 
	gm‹e_°uff
;

1059 
uöt64
 
	gv¨1
;

1060 
uöt32
 
	gv¨2
;

1061 
	gv¨3
;

1063 
	gd©a
[
size
];

1064 } 
	gmem
;

1068 * c⁄° 
	gd©a
;

1073 
	gãm∂©e
 <

1074 
ty≥«me
 
	gT
,

1075 
ty≥«me
 
	gF


1077 autÿ
max_sc‹ög_ñemít
(

1078 c⁄° 
T
& 
c⁄èöî
,

1079 
F
 
sc‹e_func


1080 Ë-> 
de˛ty≥
(
°d
::
make_∑ú
(*
c⁄èöî
.
begö
(), 0.0))

1092 
	gbe°_sc‹e
 = -
°d
::
numîic_limôs
<>::
öföôy
();

1093 autÿ
	gbe°_i
 = 
c⁄èöî
.
begö
();

1094 autÿ
	gi
 = 
c⁄èöî
.
begö
(); i !c⁄èöî.
íd
(); ++i)

1096 autÿ
	gsc‹e
 = 
sc‹e_func
(*
i
);

1097 i‡(
	gsc‹e
 > 
	gbe°_sc‹e
)

1099 
	gbe°_sc‹e
 = 
sc‹e
;

1100 
	gbe°_i
 = 
i
;

1104 
usög
 
	gôem_ty≥
 = 
ty≥«me
 
°d
::
ªmove_ª„ªn˚
<
de˛ty≥
(*
be°_i
)>::
ty≥
;

1106 i‡(
	gbe°_i
 =
c⁄èöî
.
íd
())

1107  
°d
::
make_∑ú
(
ôem_ty≥
(), 
be°_sc‹e
);

1109  
	g°d
::
make_∑ú
(*
be°_i
, 
be°_sc‹e
);

1114 
	gãm∂©e
 <

1115 
ty≥«me
 
	gT
,

1116 
ty≥«me
 
	gF


1118 autÿ
mö_sc‹ög_ñemít
(

1119 c⁄° 
T
& 
c⁄èöî
,

1120 
F
 
sc‹e_func


1121 Ë-> 
de˛ty≥
(
°d
::
make_∑ú
(*
c⁄èöî
.
begö
(), 0.0))

1133 
	gbe°_sc‹e
 = 
°d
::
numîic_limôs
<>::
öföôy
();

1134 autÿ
	gbe°_i
 = 
c⁄èöî
.
begö
();

1135 autÿ
	gi
 = 
c⁄èöî
.
begö
(); i !c⁄èöî.
íd
(); ++i)

1137 autÿ
	gsc‹e
 = 
sc‹e_func
(*
i
);

1138 i‡(
	gsc‹e
 < 
	gbe°_sc‹e
)

1140 
	gbe°_sc‹e
 = 
sc‹e
;

1141 
	gbe°_i
 = 
i
;

1145 
usög
 
	gôem_ty≥
 = 
ty≥«me
 
°d
::
ªmove_ª„ªn˚
<
de˛ty≥
(*
be°_i
)>::
ty≥
;

1147 i‡(
	gbe°_i
 =
c⁄èöî
.
íd
())

1148  
°d
::
make_∑ú
(
ôem_ty≥
(), 
be°_sc‹e
);

1150  
	g°d
::
make_∑ú
(*
be°_i
, 
be°_sc‹e
);

	@viper/concurrentqueue-src/benchmarks/dlib/array.h

3 #i‚de‡
DLIB_ARRAy_


4 
	#DLIB_ARRAy_


	)

6 
	~"¨øy/¨øy_kî√l.h
"

7 
	~"¨øy/¨øy_toﬁs.h
"

	@viper/concurrentqueue-src/benchmarks/dlib/array/array_kernel.h

3 #i‚de‡
DLIB_ARRAY_KERNEl_2_


4 
	#DLIB_ARRAY_KERNEl_2_


	)

6 
	~"¨øy_kî√l_ab°ø˘.h
"

7 
	~"../öãrÁ˚s/íumîabÀ.h
"

8 
	~"../Ægs.h
"

9 
	~"../£rülize.h
"

10 
	~"../s‹t.h
"

11 
	~"../is_köd.h
"

13 
«me•a˚
 
	gdlib


16 
	gãm∂©e
 <

17 
ty≥«me
 
	gT
,

18 
ty≥«me
 
	gmem_m™agî
 = 
deÁu…_mem‹y_m™agî


20 
˛ass
 
¨øy
 : 
public
 
íumîabÀ
<
T
>

52 
public
:

55 
¨øy
 
	tkî√l_1a
;

56 
¨øy
 
	tkî√l_1a_c
;

57 
¨øy
 
	tkî√l_2a
;

58 
¨øy
 
	tkî√l_2a_c
;

59 
¨øy
 
	ts‹t_1a
;

60 
¨øy
 
	ts‹t_1a_c
;

61 
¨øy
 
	ts‹t_1b
;

62 
¨øy
 
	ts‹t_1b_c
;

63 
¨øy
 
	ts‹t_2a
;

64 
¨øy
 
	ts‹t_2a_c
;

65 
¨øy
 
	ts‹t_2b
;

66 
¨øy
 
	ts‹t_2b_c
;

67 
¨øy
 
	tex∑nd_1a
;

68 
¨øy
 
	tex∑nd_1a_c
;

69 
¨øy
 
	tex∑nd_1b
;

70 
¨øy
 
	tex∑nd_1b_c
;

71 
¨øy
 
	tex∑nd_1c
;

72 
¨øy
 
	tex∑nd_1c_c
;

73 
¨øy
 
	tex∑nd_1d
;

74 
¨øy
 
	tex∑nd_1d_c
;

79 
T
 
	tty≥
;

80 
T
 
	tvÆue_ty≥
;

81 
mem_m™agî
 
	tmem_m™agî_ty≥
;

83 
¨øy
 (

85 
¨øy_size
(0),

86 
max_¨øy_size
(0),

87 
¨øy_ñemíts
(0),

88 
pos
(0),

89 
œ°_pos
(0),

90 
_©_°¨t
(
åue
)

93 
¨øy
(c⁄°áºay&Ë
dñëe
;

94 
	g¨øy
& 
	g›î©‹
=(
¨øy
&Ë
dñëe
;

96 
¨øy
(

97 
¨øy
&& 
ôem


98 Ë: 
¨øy
()

100 
sw≠
(
ôem
);

103 
	g¨øy
& 
	g›î©‹
=(

104 
¨øy
&& 
ôem


107 
sw≠
(
ôem
);

108  *
	gthis
;

111 
ex∂icô
 
¨øy
 (

112 
size_t
 
√w_size


114 
¨øy_size
(0),

115 
max_¨øy_size
(0),

116 
¨øy_ñemíts
(0),

117 
pos
(0),

118 
œ°_pos
(0),

119 
_©_°¨t
(
åue
)

121 
ªsize
(
√w_size
);

124 ~
¨øy
 (

127 
˛ór
 (

130 
ölöe
 c⁄° 
	gT
& 
	g›î©‹
[] (

131 
size_t
 
	gpos


134 
ölöe
 
	gT
& 
	g›î©‹
[] (

135 
size_t
 
	gpos


138 
£t_size
 (

139 
size_t
 
size


142 
ölöe
 
size_t
 
max_size
(

145 
£t_max_size
(

146 
size_t
 
max


149 
sw≠
 (

150 
¨øy
& 
ôem


154 
ölöe
 
size_t
 
size
 (

157 
ölöe
 
boﬁ
 
©_°¨t
 (

160 
ölöe
 
ª£t
 (

163 
boﬁ
 
cuºít_ñemít_vÆid
 (

166 
ölöe
 c⁄° 
	gT
& 
ñemít
 (

169 
ölöe
 
	gT
& 
ñemít
 (

172 
boﬁ
 
move_√xt
 (

175 
s‹t
 (

178 
ªsize
 (

179 
size_t
 
√w_size


182 c⁄° 
	gT
& 
back
 (

185 
	gT
& 
back
 (

188 
p›_back
 (

191 
p›_back
 (

192 
T
& 
ôem


195 
push_back
 (

196 
T
& 
ôem


199 
push_back
 (

200 
T
&& 
ôem


203 
T
* 
	tôî©‹
;

204 c⁄° 
	tT
* 
	tc⁄°_ôî©‹
;

205 
ôî©‹
 
begö
(Ë{  
	g¨øy_ñemíts
; }

206 
c⁄°_ôî©‹
 
begö
(Ëc⁄° {  
	g¨øy_ñemíts
; }

207 
ôî©‹
 
íd
(Ë{  
	g¨øy_ñemíts
+
	g¨øy_size
; }

208 
c⁄°_ôî©‹
 
íd
(Ëc⁄° {  
	g¨øy_ñemíts
+
	g¨øy_size
; }

210 
	g¥iv©e
:

212 
ty≥«me
 
mem_m™agî
::
ãm∂©e
 
ªböd
<
T
>::
Ÿhî
 
poﬁ
;

215 
size_t
 
	g¨øy_size
;

216 
size_t
 
	gmax_¨øy_size
;

217 
T
* 
	g¨øy_ñemíts
;

219 
muèbÀ
 
T
* 
	gpos
;

220 
T
* 
	gœ°_pos
;

221 
muèbÀ
 
boﬁ
 
	g_©_°¨t
;

225 
	gãm∂©e
 <

226 
ty≥«me
 
	gT
,

227 
ty≥«me
 
	gmem_m™agî


229 
ölöe
 
sw≠
 (

230 
¨øy
<
T
,
mem_m™agî
>& 
a
,

231 
¨øy
<
T
,
mem_m™agî
>& 
b


232 Ë{ 
	ga
.
sw≠
(
b
); }

236 
	gãm∂©e
 <

237 
ty≥«me
 
	gT
,

238 
ty≥«me
 
	gmem_m™agî


240 
£rülize
 (

241 c⁄° 
¨øy
<
T
,
mem_m™agî
>& 
ôem
,

242 
°d
::
o°ªam
& 
out


245 
åy


247 
£rülize
(
ôem
.
max_size
(),
out
);

248 
£rülize
(
ôem
.
size
(),
out
);

250 
size_t
 
	gi
 = 0; i < 
	gôem
.
size
(); ++i)

251 
£rülize
(
ôem
[
i
],
out
);

253 
ˇtch
 (
£rüliz©i⁄_îr‹
& 
e
)

255 
throw
 
£rüliz©i⁄_îr‹
(
e
.
öfo
 + "\n while serializing object ofÅypeárray");

259 
	gãm∂©e
 <

260 
ty≥«me
 
	gT
,

261 
ty≥«me
 
	gmem_m™agî


263 
de£rülize
 (

264 
¨øy
<
T
,
mem_m™agî
>& 
ôem
,

265 
°d
::
i°ªam
& 
ö


268 
åy


270 
size_t
 
max_size
, 
	gsize
;

271 
de£rülize
(
max_size
,
ö
);

272 
de£rülize
(
size
,
ö
);

273 
	gôem
.
£t_max_size
(
max_size
);

274 
	gôem
.
£t_size
(
size
);

275 
size_t
 
	gi
 = 0; i < 
	gsize
; ++i)

276 
de£rülize
(
ôem
[
i
],
ö
);

278 
ˇtch
 (
£rüliz©i⁄_îr‹
& 
e
)

280 
	gôem
.
˛ór
();

281 
throw
 
£rüliz©i⁄_îr‹
(
e
.
öfo
 + "\n while deserializing object ofÅypeárray");

291 
	gãm∂©e
 <

292 
ty≥«me
 
	gT
,

293 
ty≥«me
 
	gmem_m™agî


295 
	g¨øy
<
	gT
,
	gmem_m™agî
>::

296 ~
¨øy
 (

299 i‡(
¨øy_ñemíts
)

301 
poﬁ
.
dóŒoˇã_¨øy
(
¨øy_ñemíts
);

307 
	gãm∂©e
 <

308 
ty≥«me
 
	gT
,

309 
ty≥«me
 
	gmem_m™agî


311 
	g¨øy
<
	gT
,
	gmem_m™agî
>::

312 
˛ór
 (

315 
ª£t
();

316 
	gœ°_pos
 = 0;

317 
	g¨øy_size
 = 0;

318 i‡(
	g¨øy_ñemíts
)

320 
	gpoﬁ
.
dóŒoˇã_¨øy
(
¨øy_ñemíts
);

322 
	g¨øy_ñemíts
 = 0;

323 
	gmax_¨øy_size
 = 0;

329 
	gãm∂©e
 <

330 
ty≥«me
 
	gT
,

331 
ty≥«me
 
	gmem_m™agî


333 c⁄° 
	gT
& 
	g¨øy
<T,
	gmem_m™agî
>::

334 
›î©‹
[] (

335 
size_t
 
pos


339 
DLIB_ASSERT
–
pos
 < 
this
->
size
() ,

342 << "\n\ços: " << 
pos


343 << "\n\tsize(): " << 
this
->
size
()

344 << "\n\âhis: " << 
this


347  
	g¨øy_ñemíts
[
pos
];

352 
	gãm∂©e
 <

353 
ty≥«me
 
	gT
,

354 
ty≥«me
 
	gmem_m™agî


356 
	gT
& 
	g¨øy
<T,
	gmem_m™agî
>::

357 
›î©‹
[] (

358 
size_t
 
pos


362 
DLIB_ASSERT
–
pos
 < 
this
->
size
() ,

365 << "\n\ços: " << 
pos


366 << "\n\tsize(): " << 
this
->
size
()

367 << "\n\âhis: " << 
this


370  
	g¨øy_ñemíts
[
pos
];

375 
	gãm∂©e
 <

376 
ty≥«me
 
	gT
,

377 
ty≥«me
 
	gmem_m™agî


379 
	g¨øy
<
	gT
,
	gmem_m™agî
>::

380 
£t_size
 (

381 
size_t
 
size


385 
DLIB_CASSERT
(–
size
 <
this
->
max_size
() ),

388 << "\n\tsize: " << 
size


389 << "\n\tmax size: " << 
this
->
max_size
()

390 << "\n\âhis: " << 
this


393 
ª£t
();

394 
	g¨øy_size
 = 
size
;

395 i‡(
	gsize
 > 0)

396 
	gœ°_pos
 = 
¨øy_ñemíts
 + 
size
 - 1;

398 
	gœ°_pos
 = 0;

403 
	gãm∂©e
 <

404 
ty≥«me
 
	gT
,

405 
ty≥«me
 
	gmem_m™agî


407 
size_t
 
	g¨øy
<
	gT
,
	gmem_m™agî
>::

408 
size
 (

411  
¨øy_size
;

416 
	gãm∂©e
 <

417 
ty≥«me
 
	gT
,

418 
ty≥«me
 
	gmem_m™agî


420 
	g¨øy
<
	gT
,
	gmem_m™agî
>::

421 
£t_max_size
(

422 
size_t
 
max


425 
ª£t
();

426 
	g¨øy_size
 = 0;

427 
	gœ°_pos
 = 0;

428 i‡(
	gmax
 != 0)

431 i‡(
max
 !
max_¨øy_size
)

433 i‡(
¨øy_ñemíts
)

435 
poﬁ
.
dóŒoˇã_¨øy
(
¨øy_ñemíts
);

438 
	gåy
 { 
	g¨øy_ñemíts
 = 
poﬁ
.
Æloˇã_¨øy
(
max
); }

439 
ˇtch
 (...Ë{ 
	g¨øy_ñemíts
 = 0; 
	gmax_¨øy_size
 = 0; 
	gthrow
; }

440 
	gmax_¨øy_size
 = 
max
;

447 i‡(
	g¨øy_ñemíts
)

448 
	gpoﬁ
.
dóŒoˇã_¨øy
(
¨øy_ñemíts
);

449 
	gmax_¨øy_size
 = 0;

450 
	g¨øy_ñemíts
 = 0;

456 
	gãm∂©e
 <

457 
ty≥«me
 
	gT
,

458 
ty≥«me
 
	gmem_m™agî


460 
size_t
 
	g¨øy
<
	gT
,
	gmem_m™agî
>::

461 
max_size
 (

464  
max_¨øy_size
;

469 
	gãm∂©e
 <

470 
ty≥«me
 
	gT
,

471 
ty≥«me
 
	gmem_m™agî


473 
	g¨øy
<
	gT
,
	gmem_m™agî
>::

474 
sw≠
 (

475 
¨øy
<
T
,
mem_m™agî
>& 
ôem


478 autÿ
	g¨øy_size_ãmp
 = 
ôem
.
¨øy_size
;

479 autÿ
	gmax_¨øy_size_ãmp
 = 
ôem
.
max_¨øy_size
;

480 
T
* 
	g¨øy_ñemíts_ãmp
 = 
ôem
.
¨øy_ñemíts
;

482 
	gôem
.
	g¨øy_size
 = 
¨øy_size
;

483 
	gôem
.
	gmax_¨øy_size
 = 
max_¨øy_size
;

484 
	gôem
.
	g¨øy_ñemíts
 = 
¨øy_ñemíts
;

486 
	g¨øy_size
 = 
¨øy_size_ãmp
;

487 
	gmax_¨øy_size
 = 
max_¨øy_size_ãmp
;

488 
	g¨øy_ñemíts
 = 
¨øy_ñemíts_ãmp
;

490 
exch™ge
(
_©_°¨t
,
ôem
._at_start);

491 
exch™ge
(
pos
,
ôem
.pos);

492 
exch™ge
(
œ°_pos
,
ôem
.last_pos);

493 
	gpoﬁ
.
sw≠
(
ôem
.
poﬁ
);

502 
	gãm∂©e
 <

503 
ty≥«me
 
	gT
,

504 
ty≥«me
 
	gmem_m™agî


506 
boﬁ
 
	g¨øy
<
	gT
,
	gmem_m™agî
>::

507 
©_°¨t
 (

510  
_©_°¨t
;

515 
	gãm∂©e
 <

516 
ty≥«me
 
	gT
,

517 
ty≥«me
 
	gmem_m™agî


519 
	g¨øy
<
	gT
,
	gmem_m™agî
>::

520 
ª£t
 (

523 
_©_°¨t
 = 
åue
;

524 
	gpos
 = 0;

529 
	gãm∂©e
 <

530 
ty≥«me
 
	gT
,

531 
ty≥«me
 
	gmem_m™agî


533 
boﬁ
 
	g¨øy
<
	gT
,
	gmem_m™agî
>::

534 
cuºít_ñemít_vÆid
 (

537  
pos
 != 0;

542 
	gãm∂©e
 <

543 
ty≥«me
 
	gT
,

544 
ty≥«me
 
	gmem_m™agî


546 c⁄° 
	gT
& 
	g¨øy
<T,
	gmem_m™agî
>::

547 
ñemít
 (

551 
DLIB_ASSERT
(
this
->
cuºít_ñemít_vÆid
(),

554 << "\n\âhis: " << 
this


557  *
	gpos
;

562 
	gãm∂©e
 <

563 
ty≥«me
 
	gT
,

564 
ty≥«me
 
	gmem_m™agî


566 
	gT
& 
	g¨øy
<T,
	gmem_m™agî
>::

567 
ñemít
 (

571 
DLIB_ASSERT
(
this
->
cuºít_ñemít_vÆid
(),

574 << "\n\âhis: " << 
this


577  *
	gpos
;

582 
	gãm∂©e
 <

583 
ty≥«me
 
	gT
,

584 
ty≥«me
 
	gmem_m™agî


586 
boﬁ
 
	g¨øy
<
	gT
,
	gmem_m™agî
>::

587 
move_√xt
 (

590 i‡(!
_©_°¨t
)

592 i‡(
pos
 < 
œ°_pos
)

594 ++
pos
;

595  
	gåue
;

599 
	gpos
 = 0;

600  
	gÁl£
;

605 
	g_©_°¨t
 = 
Ál£
;

606 i‡(
	g¨øy_size
 > 0)

608 
	gpos
 = 
¨øy_ñemíts
;

609  
	gåue
;

613  
	gÁl£
;

624 
	gãm∂©e
 <

625 
ty≥«me
 
	gT
,

626 
ty≥«me
 
	gmem_m™agî


628 
	g¨øy
<
	gT
,
	gmem_m™agî
>::

629 
s‹t
 (

632 i‡(
this
->
size
() > 1)

635 
dlib
::
qs‹t_¨øy
(*
this
,0,this->
size
()-1);

637 
	gthis
->
ª£t
();

642 
	gãm∂©e
 <

643 
ty≥«me
 
	gT
,

644 
ty≥«me
 
	gmem_m™agî


646 
	g¨øy
<
	gT
,
	gmem_m™agî
>::

647 
ªsize
 (

648 
size_t
 
√w_size


651 i‡(
this
->
max_size
(Ë< 
√w_size
)

653 
¨øy
 
ãmp
;

654 
	gãmp
.
£t_max_size
(
√w_size
);

655 
	gãmp
.
£t_size
(
√w_size
);

656 
size_t
 
	gi
 = 0; i < 
	gthis
->
size
(); ++i)

658 
exch™ge
((*
this
)[
i
],
ãmp
[i]);

660 
	gãmp
.
sw≠
(*
this
);

664 
	gthis
->
£t_size
(
√w_size
);

670 
	gãm∂©e
 <

671 
ty≥«me
 
	gT
,

672 
ty≥«me
 
	gmem_m™agî


674 
	gT
& 
	g¨øy
<T,
	gmem_m™agî
>::

675 
back
 (

679 
DLIB_ASSERT
–
this
->
size
() > 0 ,

682 << "\n\tsize(): " << 
this
->
size
()

683 << "\n\âhis: " << 
this


686  (*
	gthis
)[
this
->
size
()-1];

691 
	gãm∂©e
 <

692 
ty≥«me
 
	gT
,

693 
ty≥«me
 
	gmem_m™agî


695 c⁄° 
	gT
& 
	g¨øy
<T,
	gmem_m™agî
>::

696 
back
 (

700 
DLIB_ASSERT
–
this
->
size
() > 0 ,

703 << "\n\tsize(): " << 
this
->
size
()

704 << "\n\âhis: " << 
this


707  (*
	gthis
)[
this
->
size
()-1];

712 
	gãm∂©e
 <

713 
ty≥«me
 
	gT
,

714 
ty≥«me
 
	gmem_m™agî


716 
	g¨øy
<
	gT
,
	gmem_m™agî
>::

717 
p›_back
 (

718 
T
& 
ôem


722 
DLIB_ASSERT
–
this
->
size
() > 0 ,

725 << "\n\tsize(): " << 
this
->
size
()

726 << "\n\âhis: " << 
this


729 
exch™ge
(
ôem
,(*
this
)[this->
size
()-1]);

730 
	gthis
->
£t_size
(
this
->
size
()-1);

735 
	gãm∂©e
 <

736 
ty≥«me
 
	gT
,

737 
ty≥«me
 
	gmem_m™agî


739 
	g¨øy
<
	gT
,
	gmem_m™agî
>::

740 
p›_back
 (

744 
DLIB_ASSERT
–
this
->
size
() > 0 ,

747 << "\n\tsize(): " << 
this
->
size
()

748 << "\n\âhis: " << 
this


751 
	gthis
->
£t_size
(
this
->
size
()-1);

756 
	gãm∂©e
 <

757 
ty≥«me
 
	gT
,

758 
ty≥«me
 
	gmem_m™agî


760 
	g¨øy
<
	gT
,
	gmem_m™agî
>::

761 
push_back
 (

762 
T
& 
ôem


765 i‡(
this
->
max_size
(Ë=this->
size
())

768 
¨øy
 
ãmp
;

769 
	gãmp
.
£t_max_size
(
this
->
size
()*2 + 1);

770 
	gãmp
.
£t_size
(
this
->
size
()+1);

771 
size_t
 
	gi
 = 0; i < 
	gthis
->
size
(); ++i)

773 
exch™ge
((*
this
)[
i
],
ãmp
[i]);

775 
exch™ge
(
ôem
,
ãmp
[ãmp.
size
()-1]);

776 
	gãmp
.
sw≠
(*
this
);

780 
	gthis
->
£t_size
(
this
->
size
()+1);

781 
exch™ge
(
ôem
,(*
this
)[this->
size
()-1]);

787 
	gãm∂©e
 <

788 
ty≥«me
 
	gT
,

789 
ty≥«me
 
	gmem_m™agî


791 
	g¨øy
<
	gT
,
	gmem_m™agî
>::

792 
push_back
 (

793 
T
&& 
ôem


794 Ë{ 
push_back
(
ôem
); }

798 
	gãm∂©e
 <
ty≥«me
 
	gT
,Åy≥«mê
	gMM
>

799 
	gis_¨øy
 <
	g¨øy
<
	gT
,
	gMM
> >

801 c⁄° 
boﬁ
 
	gvÆue
 = 
åue
;

	@viper/concurrentqueue-src/benchmarks/dlib/array/array_kernel_abstract.h

3 #unde‡
DLIB_ARRAY_KERNEl_ABSTRACT_


4 #ifde‡
DLIB_ARRAY_KERNEl_ABSTRACT_


6 
	~"../öãrÁ˚s/íumîabÀ.h
"

7 
	~"../£rülize.h
"

8 
	~"../Ægs.h
"

10 
«me•a˚
 
	gdlib


13 
	gãm∂©e
 <

14 
ty≥«me
 
	gT
,

15 
ty≥«me
 
	gmem_m™agî
 = 
deÁu…_mem‹y_m™agî


17 
˛ass
 
¨øy
 : 
public
 
íumîabÀ
<
T
>

53 
public
:

55 
T
 
	tty≥
;

56 
T
 
	tvÆue_ty≥
;

57 
mem_m™agî
 
	tmem_m™agî_ty≥
;

59 
¨øy
 (

68 
ex∂icô
 
¨øy
 (

69 
size_t
 
√w_size


81 ~
¨øy
 (

88 
¨øy
(

89 
¨øy
&& 
ôem


97 
	g¨øy
& 
	g›î©‹
=(

98 
¨øy
&& 
ôem


107 
˛ór
 (

118 c⁄° 
	gT
& 
	g›î©‹
[] (

119 
size_t
 
	gpos


128 
	gT
& 
	g›î©‹
[] (

129 
size_t
 
	gpos


138 
£t_size
 (

139 
size_t
 
size


158 
size_t
 
max_size
(

165 
£t_max_size
(

166 
size_t
 
max


179 
sw≠
 (

180 
¨øy
<
T
>& 
ôem


187 
s‹t
 (

200 
ªsize
 (

201 
size_t
 
√w_size


220 c⁄° 
	gT
& 
back
 (

229 
	gT
& 
back
 (

238 
p›_back
 (

239 
T
& 
ôem


251 
p›_back
 (

262 
push_back
 (

263 
T
& 
ôem


277 
push_back
 (
T
&& 
ôem
) {Öush_back(item); }

282 
T
* 
	tôî©‹
;

283 c⁄° 
	tT
* 
	tc⁄°_ôî©‹
;

285 
ôî©‹
 
begö
(

293 
c⁄°_ôî©‹
 
begö
(

301 
ôî©‹
 
íd
(

308 
c⁄°_ôî©‹
 
íd
(

316 
	g¥iv©e
:

319 
¨øy
◊ºay<
T
>&);

320 
	g¨øy
<
	gT
>& 
	g›î©‹
=(
¨øy
<
T
>&);

324 
	gãm∂©e
 <

325 
ty≥«me
 
	gT


327 
ölöe
 
sw≠
 (

328 
¨øy
<
T
>& 
a
,

329 
¨øy
<
T
>& 
b


330 Ë{ 
	ga
.
sw≠
(
b
); }

335 
	gãm∂©e
 <

336 
ty≥«me
 
	gT


338 
£rülize
 (

339 c⁄° 
¨øy
<
T
>& 
ôem
,

340 
°d
::
o°ªam
& 
out


346 
	gãm∂©e
 <

347 
ty≥«me
 
	gT


349 
de£rülize
 (

350 
¨øy
<
T
>& 
ôem
,

351 
°d
::
i°ªam
& 
ö


	@viper/concurrentqueue-src/benchmarks/dlib/array/array_tools.h

3 #i‚de‡
DLIB_ARRAY_tOOLS_H_


4 
	#DLIB_ARRAY_tOOLS_H_


	)

6 
	~"../as£π.h
"

7 
	~"¨øy_toﬁs_ab°ø˘.h
"

9 
«me•a˚
 
	gdlib


11 
	gãm∂©e
 <
ty≥«me
 
	gT
>

12 
•lô_¨øy
 (

13 
T
& 
a
,

14 
T
& 
b
,

15 
‰ac


19 
DLIB_ASSERT
(0 <
‰ac
 && frac <= 1,

22 << "\n\à‰ac: " << 
‰ac


25 c⁄° 
	gasize
 = 
°©ic_ˇ°
<>(
a
.
size
()*
‰ac
);

26 c⁄° 
	gbsize
 = 
a
.
size
()-
asize
;

28 
	gb
.
ªsize
(
bsize
);

29 
	gi
 = 0; i < 
	gb
.
size
(); ++i)

31 
sw≠
(
b
[
i
], 
a
[i+
asize
]);

33 
	ga
.
ªsize
(
asize
);

	@viper/concurrentqueue-src/benchmarks/dlib/array/array_tools_abstract.h

3 #unde‡
DLIB_ARRAY_tOOLS_ABSTRACT_H_


4 #ifde‡
DLIB_ARRAY_tOOLS_ABSTRACT_H_


6 
	~"¨øy_kî√l_ab°ø˘.h
"

8 
«me•a˚
 
	gdlib


10 
	gãm∂©e
 <
ty≥«me
 
	gT
>

11 
•lô_¨øy
 (

12 
T
& 
a
,

13 
T
& 
b
,

14 
‰ac


	@viper/concurrentqueue-src/benchmarks/dlib/assert.h

3 #i‚de‡
DLIB_ASSERt_


4 
	#DLIB_ASSERt_


	)

6 
	~"c⁄fig.h
"

7 
	~<s°ªam
>

8 
	~<iosfwd
>

9 
	~"îr‹.h
"

24 #i‚de‡
DLIB_BOOST_JOIN


25 
	#DLIB_BOOST_JOIN
–
X
, 
Y
 ) 
	`DLIB_BOOST_DO_JOIN
–X, Y )

	)

26 
	#DLIB_BOOST_DO_JOIN
–
X
, 
Y
 ) 
	`DLIB_BOOST_DO_JOIN2
(X,Y)

	)

27 
	#DLIB_BOOST_DO_JOIN2
–
X
, 
Y
 ) X##
	)
Y

31 #i‡
deföed
(
__˛™g__
)

32 #i‡
__has_„©uª
(
cxx_rvÆue_ª„ªn˚s
)

33 
	#DLIB_HAS_RVALUE_REFERENCES


	)

35 #i‡
__has_„©uª
(
cxx_gíîÆized_öôülizîs
)

36 
	#DLIB_HAS_INITIALIZER_LISTS


	)

38 #ñi‡
deföed
(
__GNUC__
Ë&& (__GNUC__ > 4 || (__GNUC__ =4 && 
__GNUC_MINOR__
 > 2)Ë&& deföed(
__GXX_EXPERIMENTAL_CXX0X__
)

39 
	#DLIB_HAS_RVALUE_REFERENCES


	)

40 
	#DLIB_HAS_INITIALIZER_LISTS


	)

41 #ñi‡
deföed
(
_MSC_VER
) && _MSC_VER >= 1800

42 
	#DLIB_HAS_INITIALIZER_LISTS


	)

43 
	#DLIB_HAS_RVALUE_REFERENCES


	)

44 #ñi‡
deföed
(
_MSC_VER
) && _MSC_VER >= 1600

45 
	#DLIB_HAS_RVALUE_REFERENCES


	)

46 #ñi‡
deföed
(
__INTEL_COMPILER
Ë&& deföed(
BOOST_INTEL_STDCXX0X
)

47 
	#DLIB_HAS_RVALUE_REFERENCES


	)

48 
	#DLIB_HAS_INITIALIZER_LISTS


	)

51 #i‡
deföed
(
__APPLE__
Ë&& deföed(
__GNUC_LIBSTD__
Ë&& ((__GNUC_LIBSTD__-0Ë* 100 + 
__GNUC_LIBSTD_MINOR__
-0 <= 402)

53 #unde‡
DLIB_HAS_INITIALIZER_LISTS


57 #i‡
deföed
(
__˛™g__
)

58 #i‡
__has_„©uª
(
cxx_°©ic_as£π
)

59 
	#DLIB_HAS_STATIC_ASSERT


	)

61 #ñi‡
deföed
(
__GNUC__
Ë&& (__GNUC__ > 4 || (__GNUC__ =4 && 
__GNUC_MINOR__
 > 2)Ë&& deföed(
__GXX_EXPERIMENTAL_CXX0X__
)

62 
	#DLIB_HAS_STATIC_ASSERT


	)

63 #ñi‡
deföed
(
_MSC_VER
) && _MSC_VER >= 1600

64 
	#DLIB_HAS_STATIC_ASSERT


	)

65 #ñi‡
deföed
(
__INTEL_COMPILER
Ë&& deföed(
BOOST_INTEL_STDCXX0X
)

66 
	#DLIB_HAS_STATIC_ASSERT


	)

72 
«me•a˚
 
	gdlib


74 
	gãm∂©e
 <
boﬁ
 
	gvÆue
> 
	gcompûe_time_as£π
;

75 
	gãm∂©e
 <> 
	gcompûe_time_as£π
<
	gåue
> {Énum {
	gvÆue
=1}; };

77 
	gãm∂©e
 <
ty≥«me
 
	gT
,Åy≥«mê
	gU
> 
	gas£π_¨e_ßme_ty≥
;

78 
	gãm∂©e
 <
ty≥«me
 
	gT
> 
	gas£π_¨e_ßme_ty≥
<T,T> {íum{
	gvÆue
=1};};

79 
	gãm∂©e
 <
ty≥«me
 
	gT
,Åy≥«mê
	gU
> 
	sas£π_¨e_nŸ_ßme_ty≥
 {íum{
	gvÆue
=1}; };

80 
	gãm∂©e
 <
ty≥«me
 
	gT
> 
	gas£π_¨e_nŸ_ßme_ty≥
<T,T> {};

82 
	gãm∂©e
 <
ty≥«me
 
	gT
,Åy≥«mê
	gU
> 
	sas£π_ty≥s_m©ch
 {íum{
	gvÆue
=0};};

83 
	gãm∂©e
 <
ty≥«me
 
	gT
> 
	gas£π_ty≥s_m©ch
<T,T> {íum{
	gvÆue
=1};};

89 #ifde‡
__GNUC__


90 
	#DLIB_NO_WARN_UNUSED
 
	`__©åibuã__
 ((
unu£d
))

	)

92 
	#DLIB_NO_WARN_UNUSED


	)

97 #ifde‡
DLIB_HAS_STATIC_ASSERT


98 
	#COMPILE_TIME_ASSERT
(
ex¥essi⁄
Ë
	`°©ic_as£π
”x¥essi⁄, "Faûedás£πi⁄")

	)

99 
	#ASSERT_ARE_SAME_TYPE
(
ty≥1
, 
ty≥2
Ë
	`°©ic_as£π
(::
dlib
::
as£π_ty≥s_m©ch
<ty≥1,ty≥2>::
vÆue
, "The£Åy≥†should bêthêßmêbuà¨í't.")

	)

100 
	#ASSERT_ARE_NOT_SAME_TYPE
(
ty≥1
, 
ty≥2
Ë
	`°©ic_as£π
(!::
dlib
::
as£π_ty≥s_m©ch
<ty≥1,ty≥2>::
vÆue
, "The£Åy≥†should NOT bêthêßme.")

	)

102 
	#COMPILE_TIME_ASSERT
(
ex¥essi⁄
) \

103 
DLIB_NO_WARN_UNUSED
 
	tDLIB_BOOST_JOIN
(
	tDLIB_CTA
, 
	t__LINE__
)[::
dlib
::
compûe_time_as£π
<(
boﬁ
)(
ex¥essi⁄
)>::
vÆue
]

	)

105 
	tASSERT_ARE_SAME_TYPE
(
	tty≥1
, 
	tty≥2
) \

106 
	tDLIB_NO_WARN_UNUSED
 
	tDLIB_BOOST_JOIN
(
	tDLIB_AAST
, 
	t__LINE__
)[::
dlib
::
as£π_¨e_ßme_ty≥
<
ty≥1
,
ty≥2
>::
vÆue
]

	)

108 
	tASSERT_ARE_NOT_SAME_TYPE
(
	tty≥1
, 
	tty≥2
) \

109 
	tDLIB_NO_WARN_UNUSED
 
	tDLIB_BOOST_JOIN
(
	tDLIB_AANST
, 
	t__LINE__
)[::
dlib
::
as£π_¨e_nŸ_ßme_ty≥
<
ty≥1
,
ty≥2
>::
vÆue
]

	)

114 #i‡
	tdeföed
 
	tDLIB_DISABLE_ASSERTS


116 #unde‡
	tENABLE_ASSERTS


119 #i‡!
	tdeföed
(
	tDLIB_DISABLE_ASSERTS
Ë&& ( deföed 
	tDEBUG
 || deföed 
	t_DEBUG
)

121 #i‚de‡
	tENABLE_ASSERTS


122 
	tENABLE_ASSERTS


	)

128 #ifde‡
	t__GNUC__


132 #i‡!(
	t__GNUC__
 =4 && 
	t__GNUC_MINOR__
 =4 && 
	t__GNUC_PATCHLEVEL__
 == 5)

133 
	tDLIB_FUNCTION_NAME
 
	t__PRETTY_FUNCTION__


	)

135 
	tDLIB_FUNCTION_NAME
 "unknow¿fun˘i⁄"

	)

137 #ñi‡
	tdeföed
(
	t_MSC_VER
)

138 
	tDLIB_FUNCTION_NAME
 
	t__FUNCSIG__


	)

140 
	tDLIB_FUNCTION_NAME
 "unknow¿fun˘i⁄"

	)

143 
	tDLIBM_CASSERT
(
	t_exp
,
	t_mesßge
) \

144 {i‡–!(
_exp
) ) \

146 
	`dlib_as£π_bªakpoöt
(); \

147 
°d
::
o°rög°ªam
 
dlib_o_out
; \

148 
dlib_o_out
 << "\n\nEº‹ dëe˘edáàlöê" << 
__LINE__
 << ".\n"; \

149 
dlib_o_out
 << "Eº‹ dëe˘ed i¿fûê" << 
__FILE__
 << ".\n"; \

150 
dlib_o_out
 << "Eº‹ dëe˘ed i¿fun˘i⁄ " << 
DLIB_FUNCTION_NAME
 << ".\n\n"; \

151 
dlib_o_out
 << "FailingÉxpression was " << #_exp << ".\n"; \

152 
dlib_o_out
 << 
°d
::
boﬁÆpha
 << 
_mesßge
 << "\n"; \

153 
throw
 
dlib
::
	`Áèl_îr‹
(dlib::
EBROKEN_ASSERT
,
dlib_o_out
.
	`°r
()); \

154 }}

	)

157 
	tDLIB_WORKAROUND_VISUAL_STUDIO_BUGS
(
	tx
Ë
	)
x

160 
	tDLIBM_CASSERT_1_ARGS
(
	texp
Ë
	tDLIBM_CASSERT
”xp,"")

	)

161 
	tDLIBM_CASSERT_2_ARGS
(
	texp
,
	tmesßge
Ë
	tDLIBM_CASSERT
”xp,mesßge)

	)

162 
	tDLIBM_GET_3TH_ARG
(
	t¨g1
, 
	t¨g2
, 
	t¨g3
, ...Ë
	)
arg3

163 
	tDLIBM_CASSERT_CHOOSER
(...Ë
	tDLIB_WORKAROUND_VISUAL_STUDIO_BUGS
(
	tDLIBM_GET_3TH_ARG
(
	t__VA_ARGS__
, 
	tDLIBM_CASSERT_2_ARGS
, 
	tDLIBM_CASSERT_1_ARGS
, 
	tDLIB_CASSERT_NEVER_USED
))

	)

164 
	tDLIB_CASSERT
(...Ë
	tDLIB_WORKAROUND_VISUAL_STUDIO_BUGS
(
	tDLIBM_CASSERT_CHOOSER
(
	t__VA_ARGS__
)(__VA_ARGS__))

	)

167 #ifde‡
	tENABLE_ASSERTS


168 
	tDLIB_ASSERT
(...Ë
	tDLIB_CASSERT
(
	t__VA_ARGS__
)

	)

169 
	tDLIB_IF_ASSERT
(
	texp
Ë
	)
exp

171 
	tDLIB_ASSERT
(...Ë{}

	)

172 
	tDLIB_IF_ASSERT
(
	texp
)

	)

190 
	tDLIB_ASSERT_HAS_STANDARD_LAYOUT
(
	tty≥
) \

191 
	tDLIB_BOOST_JOIN
(
	tDAHSL_
,
	t__LINE__
Ë{ 
ty≥
 
TYPE_NOT_STANDARD_LAYOUT
; }; \

192 
DLIB_NO_WARN_UNUSED
 
	tDLIB_BOOST_JOIN
(
	tDAHSL2_
,
	t__LINE__
)[(
	`DLIB_BOOST_JOIN
(
DAHSL_
,
__LINE__
))];

	)

201 
ölöe
 
dlib_as£π_bªakpoöt
(

214 
	~"°ack_åa˚.h
"

	@viper/concurrentqueue-src/benchmarks/dlib/binary_search_tree.h

3 #i‚de‡
DLIB_BINARY_SEARCH_TREe_


4 
	#DLIB_BINARY_SEARCH_TREe_


	)

7 
	~"bö¨y_£¨ch_åì/bö¨y_£¨ch_åì_kî√l_1.h
"

8 
	~"bö¨y_£¨ch_åì/bö¨y_£¨ch_åì_kî√l_2.h
"

9 
	~"bö¨y_£¨ch_åì/bö¨y_£¨ch_åì_kî√l_c.h
"

12 
	~"Ægs.h
"

13 
	~<fun˘i⁄Æ
>

16 
«me•a˚
 
	gdlib


19 
	gãm∂©e
 <

20 
ty≥«me
 
	gdomaö
,

21 
ty≥«me
 
	gønge
,

22 
ty≥«me
 
	gmem_m™agî
 = 
deÁu…_mem‹y_m™agî
,

23 
ty≥«me
 
	gcom∑ª
 = 
°d
::
Àss
<
domaö
>

25 ˛as†
	cbö¨y_£¨ch_åì


27 
bö¨y_£¨ch_åì
() {}

29 
public
:

34 
bö¨y_£¨ch_åì_kî√l_1
<
	tdomaö
,
	tønge
,
	tmem_m™agî
,
	tcom∑ª
>

35 
	tkî√l_1a
;

36 
	gbö¨y_£¨ch_åì_kî√l_c
<
	tkî√l_1a
>

37 
	tkî√l_1a_c
;

41 
	gbö¨y_£¨ch_åì_kî√l_2
<
	tdomaö
,
	tønge
,
	tmem_m™agî
,
	tcom∑ª
>

42 
	tkî√l_2a
;

43 
	gbö¨y_£¨ch_åì_kî√l_c
<
	tkî√l_2a
>

44 
	tkî√l_2a_c
;

	@viper/concurrentqueue-src/benchmarks/dlib/binary_search_tree/binary_search_tree_kernel_1.h

3 #i‚de‡
DLIB_BINARY_SEARCH_TREE_KERNEl_1_


4 
	#DLIB_BINARY_SEARCH_TREE_KERNEl_1_


	)

6 
	~"bö¨y_£¨ch_åì_kî√l_ab°ø˘.h
"

7 
	~"../Ægs.h
"

8 
	~"../öãrÁ˚s/m≠_∑ú.h
"

9 
	~"../öãrÁ˚s/íumîabÀ.h
"

10 
	~"../öãrÁ˚s/ªmovî.h
"

11 
	~"../£rülize.h
"

12 
	~<c°dlib
>

13 
	~<fun˘i⁄Æ
>

15 
«me•a˚
 
	gdlib


18 
	gãm∂©e
 <

19 
ty≥«me
 
	gdomaö
,

20 
ty≥«me
 
	gønge
,

21 
ty≥«me
 
	gmem_m™agî
,

22 
ty≥«me
 
	gcom∑ª
 = 
°d
::
Àss
<
domaö
>

24 
˛ass
 
bö¨y_£¨ch_åì_kî√l_1
 : 
public
 
íumîabÀ
<
m≠_∑ú
<
domaö
,
	gønge
> >,

25 
public
 
	gasc_∑ú_ªmovî
<
	gdomaö
,
	gønge
,
	gcom∑ª
>

78 ˛as†
	cnode


80 
	gpublic
:

81 
node
* 
À·
;

82 
node
* 
	gright
;

83 
domaö
 
	gd
;

84 
ønge
 
	gr
;

85 sig√d 
	gbÆ™˚
;

88 
˛ass
 
	gm∑ú
 : 
public
 
m≠_∑ú
<
domaö
,
	gønge
>

90 
	gpublic
:

91 c⁄° 
domaö
* 
d
;

92 
ønge
* 
	gr
;

94 c⁄° 
	gdomaö
& 
key
(

95 Ëc⁄° {  *
	gd
; }

97 c⁄° 
	gønge
& 
vÆue
(

98 Ëc⁄° {  *
	gr
; }

100 
	gønge
& 
vÆue
(

101 Ë{  *
	gr
; }

105 
	gpublic
:

107 
domaö
 
	tdomaö_ty≥
;

108 
ønge
 
	tønge_ty≥
;

109 
com∑ª
 
	tcom∑ª_ty≥
;

110 
mem_m™agî
 
	tmem_m™agî_ty≥
;

112 
bö¨y_£¨ch_åì_kî√l_1
(

114 
åì_size
(0),

115 
åì_roŸ
(0),

116 
cuºít_ñemít
(0),

117 
åì_height
(0),

118 
©_°¨t_
(
åue
),

119 
°ack_pos
(0),

120 
°ack
(
µoﬁ
.
Æloˇã_¨øy
(50))

124 
	gvútuÆ
 ~
bö¨y_£¨ch_åì_kî√l_1
(

127 
ölöe
 
˛ór
(

130 
ölöe
 
height
 (

133 
ölöe
 
cou¡
 (

134 c⁄° 
domaö
& 
ôem


137 
ölöe
 
add
 (

138 
domaö
& 
d
,

139 
ønge
& 
r


142 
ªmove
 (

143 c⁄° 
domaö
& 
d
,

144 
domaö
& 
d_c›y
,

145 
ønge
& 
r


148 
de°roy
 (

149 c⁄° 
domaö
& 
ôem


152 
ölöe
 c⁄° 
ønge
* 
	g›î©‹
[] (

153 c⁄° 
	gdomaö
& 
	gôem


156 
ölöe
 
ønge
* 
	g›î©‹
[] (

157 c⁄° 
	gdomaö
& 
	gôem


160 
ölöe
 
sw≠
 (

161 
bö¨y_£¨ch_åì_kî√l_1
& 
ôem


165 
ªmove_™y
 (

166 
domaö
& 
d
,

167 
ønge
& 
r


171 
ölöe
 
size_t
 
size
 (

174 
boﬁ
 
©_°¨t
 (

177 
ölöe
 
ª£t
 (

180 
boﬁ
 
cuºít_ñemít_vÆid
 (

183 c⁄° 
	gm≠_∑ú
<
	gdomaö
,
	gønge
>& 
ñemít
 (

186 
	gm≠_∑ú
<
	gdomaö
,
	gønge
>& 
ñemít
 (

189 
boﬁ
 
move_√xt
 (

192 
ªmove_œ°_ö_‹dî
 (

193 
domaö
& 
d
,

194 
ønge
& 
r


197 
ªmove_cuºít_ñemít
 (

198 
domaö
& 
d
,

199 
ønge
& 
r


202 
posôi⁄_íumî©‹
 (

203 c⁄° 
domaö
& 
d


206 
	g¥iv©e
:

209 
ölöe
 
rŸ©e_À·
 (

210 
node
*& 
t


223 
ölöe
 
rŸ©e_right
 (

224 
node
*& 
t


238 
ölöe
 
doubÀ_rŸ©e_right
 (

239 
node
*& 
t


252 
ölöe
 
doubÀ_rŸ©e_À·
 (

253 
node
*& 
t


266 
boﬁ
 
ªmove_bigge°_ñemít_ö_åì
 (

267 
node
*& 
t
,

268 
domaö
& 
d
,

269 
ønge
& 
r


284 
boﬁ
 
ªmove_Àa°_ñemít_ö_åì
 (

285 
node
*& 
t
,

286 
domaö
& 
d
,

287 
ønge
& 
r


302 
boﬁ
 
add_to_åì
 (

303 
node
*& 
t
,

304 
domaö
& 
d
,

305 
ønge
& 
r


318 
boﬁ
 
ªmove_‰om_åì
 (

319 
node
*& 
t
,

320 c⁄° 
domaö
& 
d
,

321 
domaö
& 
d_c›y
,

322 
ønge
& 
r


338 
boﬁ
 
ªmove_‰om_åì
 (

339 
node
*& 
t
,

340 c⁄° 
domaö
& 
ôem


353 c⁄° 
ønge
* 
ªtu∫_ª„ªn˚
 (

354 c⁄° 
node
* 
t
,

355 c⁄° 
domaö
& 
d


365 
ønge
* 
ªtu∫_ª„ªn˚
 (

366 
node
* 
t
,

367 c⁄° 
domaö
& 
d


378 
ölöe
 
boﬁ
 
kìp_node_bÆ™˚d
 (

379 
node
*& 
t


394 
gë_cou¡
 (

395 c⁄° 
domaö
& 
ôem
,

396 
node
* 
åì_roŸ


410 
dñëe_åì
 (

411 
node
* 
t


421 
push
 (

422 
node
* 
n


423 Ëc⁄° { 
	g°ack
[
°ack_pos
] = 
n
; ++
	g°ack_pos
; }

430 
node
* 
p›
 (

431 Ëc⁄° { --
	g°ack_pos
;  
	g°ack
[
°ack_pos
]; }

439 
boﬁ
 
fix_°ack
 (

440 
node
* 
t
,

441 
dïth
 = 0

454 
boﬁ
 
ªmove_cuºít_ñemít_‰om_åì
 (

455 
node
*& 
t
,

456 
domaö
& 
d
,

457 
ønge
& 
r
,

458 
cur_°ack_pos
 = 1

479 
muèbÀ
 
m∑ú
 
	gp
;

480 
	gåì_size
;

481 
node
* 
	gåì_roŸ
;

482 
muèbÀ
 
node
* 
	gcuºít_ñemít
;

483 
ty≥«me
 
	gmem_m™agî
::
ãm∂©e
 
ªböd
<
node
>::
Ÿhî
 
poﬁ
;

484 
ty≥«me
 
	gmem_m™agî
::
ãm∂©e
 
ªböd
<
node
*>::
Ÿhî
 
µoﬁ
;

485 
	gåì_height
;

486 
muèbÀ
 
boﬁ
 
	g©_°¨t_
;

487 
muèbÀ
 
	g°ack_pos
;

488 
muèbÀ
 
node
** 
	g°ack
;

489 
com∑ª
 
	gcomp
;

492 
bö¨y_£¨ch_åì_kî√l_1
(binary_search_tree_kernel_1&);

493 
	gbö¨y_£¨ch_åì_kî√l_1
& 
	g›î©‹
=(
bö¨y_£¨ch_åì_kî√l_1
&);

498 
	gãm∂©e
 <

499 
ty≥«me
 
	gdomaö
,

500 
ty≥«me
 
	gønge
,

501 
ty≥«me
 
	gmem_m™agî
,

502 
ty≥«me
 
	gcom∑ª


504 
ölöe
 
sw≠
 (

505 
bö¨y_£¨ch_åì_kî√l_1
<
domaö
,
ønge
,
mem_m™agî
,
com∑ª
>& 
a
,

506 
bö¨y_£¨ch_åì_kî√l_1
<
domaö
,
ønge
,
mem_m™agî
,
com∑ª
>& 
b


507 Ë{ 
	ga
.
sw≠
(
b
); }

512 
	gãm∂©e
 <

513 
ty≥«me
 
	gdomaö
,

514 
ty≥«me
 
	gønge
,

515 
ty≥«me
 
	gmem_m™agî
,

516 
ty≥«me
 
	gcom∑ª


518 
de£rülize
 (

519 
bö¨y_£¨ch_åì_kî√l_1
<
domaö
,
ønge
,
mem_m™agî
,
com∑ª
>& 
ôem
,

520 
°d
::
i°ªam
& 
ö


523 
åy


525 
ôem
.
˛ór
();

526 
	gsize
;

527 
de£rülize
(
size
,
ö
);

528 
domaö
 
	gd
;

529 
ønge
 
	gr
;

530 
	gi
 = 0; i < 
	gsize
; ++i)

532 
de£rülize
(
d
,
ö
);

533 
de£rülize
(
r
,
ö
);

534 
	gôem
.
add
(
d
,
r
);

537 
ˇtch
 (
£rüliz©i⁄_îr‹
& 
e
)

539 
	gôem
.
˛ór
();

540 
throw
 
£rüliz©i⁄_îr‹
(
e
.
öfo
 + "\n while deserializing object ofÅype binary_search_tree_kernel_1");

552 
	gãm∂©e
 <

553 
ty≥«me
 
	gdomaö
,

554 
ty≥«me
 
	gønge
,

555 
ty≥«me
 
	gmem_m™agî
,

556 
ty≥«me
 
	gcom∑ª


558 
	gbö¨y_£¨ch_åì_kî√l_1
<
	gdomaö
,
	gønge
,
	gmem_m™agî
,
	gcom∑ª
>::

559 ~
	$bö¨y_£¨ch_åì_kî√l_1
 (

562 
µoﬁ
.
	`dóŒoˇã_¨øy
(
°ack
);

563 i‡(
åì_size
 != 0)

565 
	`dñëe_åì
(
åì_roŸ
);

567 
	}
}

571 
	gãm∂©e
 <

572 
ty≥«me
 
	gdomaö
,

573 
ty≥«me
 
	gønge
,

574 
ty≥«me
 
	gmem_m™agî
,

575 
ty≥«me
 
	gcom∑ª


577 
	gbö¨y_£¨ch_åì_kî√l_1
<
	gdomaö
,
	gønge
,
	gmem_m™agî
,
	gcom∑ª
>::

578 
	$˛ór
 (

581 i‡(
åì_size
 > 0)

583 
	`dñëe_åì
(
åì_roŸ
);

584 
åì_roŸ
 = 0;

585 
åì_size
 = 0;

586 
åì_height
 = 0;

589 
	`ª£t
();

590 
	}
}

594 
	gãm∂©e
 <

595 
ty≥«me
 
	gdomaö
,

596 
ty≥«me
 
	gønge
,

597 
ty≥«me
 
	gmem_m™agî
,

598 
ty≥«me
 
	gcom∑ª


600 
size_t
 
	gbö¨y_£¨ch_åì_kî√l_1
<
	gdomaö
,
	gønge
,
	gmem_m™agî
,
	gcom∑ª
>::

601 
	$size
 (

604  
åì_size
;

605 
	}
}

609 
	gãm∂©e
 <

610 
ty≥«me
 
	gdomaö
,

611 
ty≥«me
 
	gønge
,

612 
ty≥«me
 
	gmem_m™agî
,

613 
ty≥«me
 
	gcom∑ª


615 
	gbö¨y_£¨ch_åì_kî√l_1
<
	gdomaö
,
	gønge
,
	gmem_m™agî
,
	gcom∑ª
>::

616 
	$height
 (

619  
åì_height
;

620 
	}
}

624 
	gãm∂©e
 <

625 
ty≥«me
 
	gdomaö
,

626 
ty≥«me
 
	gønge
,

627 
ty≥«me
 
	gmem_m™agî
,

628 
ty≥«me
 
	gcom∑ª


630 
	gbö¨y_£¨ch_åì_kî√l_1
<
	gdomaö
,
	gønge
,
	gmem_m™agî
,
	gcom∑ª
>::

631 
	$cou¡
 (

632 c⁄° 
domaö
& 
ôem


635  
	`gë_cou¡
(
ôem
,
åì_roŸ
);

636 
	}
}

640 
	gãm∂©e
 <

641 
ty≥«me
 
	gdomaö
,

642 
ty≥«me
 
	gønge
,

643 
ty≥«me
 
	gmem_m™agî
,

644 
ty≥«me
 
	gcom∑ª


646 
	gbö¨y_£¨ch_åì_kî√l_1
<
	gdomaö
,
	gønge
,
	gmem_m™agî
,
	gcom∑ª
>::

647 
	$add
 (

648 
domaö
& 
d
,

649 
ønge
& 
r


652 
åì_height
 +
	`add_to_åì
(
åì_roŸ
,
d
,
r
);

653 ++
åì_size
;

655 
	`ª£t
();

656 
	}
}

660 
	gãm∂©e
 <

661 
ty≥«me
 
	gdomaö
,

662 
ty≥«me
 
	gønge
,

663 
ty≥«me
 
	gmem_m™agî
,

664 
ty≥«me
 
	gcom∑ª


666 
	gbö¨y_£¨ch_åì_kî√l_1
<
	gdomaö
,
	gønge
,
	gmem_m™agî
,
	gcom∑ª
>::

667 
	$ªmove
 (

668 c⁄° 
domaö
& 
d
,

669 
domaö
& 
d_c›y
,

670 
ønge
& 
r


673 
åì_height
 -
	`ªmove_‰om_åì
(
åì_roŸ
,
d
,
d_c›y
,
r
);

674 --
åì_size
;

676 
	`ª£t
();

677 
	}
}

681 
	gãm∂©e
 <

682 
ty≥«me
 
	gdomaö
,

683 
ty≥«me
 
	gønge
,

684 
ty≥«me
 
	gmem_m™agî
,

685 
ty≥«me
 
	gcom∑ª


687 
	gbö¨y_£¨ch_åì_kî√l_1
<
	gdomaö
,
	gønge
,
	gmem_m™agî
,
	gcom∑ª
>::

688 
	$de°roy
 (

689 c⁄° 
domaö
& 
ôem


692 
åì_height
 -
	`ªmove_‰om_åì
(
åì_roŸ
,
ôem
);

693 --
åì_size
;

695 
	`ª£t
();

696 
	}
}

700 
	gãm∂©e
 <

701 
ty≥«me
 
	gdomaö
,

702 
ty≥«me
 
	gønge
,

703 
ty≥«me
 
	gmem_m™agî
,

704 
ty≥«me
 
	gcom∑ª


706 
	gbö¨y_£¨ch_åì_kî√l_1
<
	gdomaö
,
	gønge
,
	gmem_m™agî
,
	gcom∑ª
>::

707 
	$ªmove_™y
 (

708 
domaö
& 
d
,

709 
ønge
& 
r


712 
åì_height
 -
	`ªmove_Àa°_ñemít_ö_åì
(
åì_roŸ
,
d
,
r
);

713 --
åì_size
;

715 
	`ª£t
();

716 
	}
}

720 
	gãm∂©e
 <

721 
ty≥«me
 
	gdomaö
,

722 
ty≥«me
 
	gønge
,

723 
ty≥«me
 
	gmem_m™agî
,

724 
ty≥«me
 
	gcom∑ª


726 
ønge
* 
	gbö¨y_£¨ch_åì_kî√l_1
<
	gdomaö
,
	gønge
,
	gmem_m™agî
,
	gcom∑ª
>::

727 
›î©‹
[] (

728 c⁄° 
domaö
& 
ôem


731  
ªtu∫_ª„ªn˚
(
åì_roŸ
,
ôem
);

736 
	gãm∂©e
 <

737 
ty≥«me
 
	gdomaö
,

738 
ty≥«me
 
	gønge
,

739 
ty≥«me
 
	gmem_m™agî
,

740 
ty≥«me
 
	gcom∑ª


742 c⁄° 
ønge
* 
	gbö¨y_£¨ch_åì_kî√l_1
<
	gdomaö
,
	gønge
,
	gmem_m™agî
,
	gcom∑ª
>::

743 
›î©‹
[] (

744 c⁄° 
domaö
& 
ôem


747  
ªtu∫_ª„ªn˚
(
åì_roŸ
,
ôem
);

752 
	gãm∂©e
 <

753 
ty≥«me
 
	gdomaö
,

754 
ty≥«me
 
	gønge
,

755 
ty≥«me
 
	gmem_m™agî
,

756 
ty≥«me
 
	gcom∑ª


758 
	gbö¨y_£¨ch_åì_kî√l_1
<
	gdomaö
,
	gønge
,
	gmem_m™agî
,
	gcom∑ª
>::

759 
sw≠
 (

760 
bö¨y_£¨ch_åì_kî√l_1
<
domaö
,
ønge
,
mem_m™agî
,
com∑ª
>& 
ôem


763 
	gpoﬁ
.
sw≠
(
ôem
.
poﬁ
);

764 
	gµoﬁ
.
sw≠
(
ôem
.
µoﬁ
);

765 
exch™ge
(
p
,
ôem
.p);

766 
exch™ge
(
°ack
,
ôem
.stack);

767 
exch™ge
(
°ack_pos
,
ôem
.stack_pos);

768 
exch™ge
(
comp
,
ôem
.comp);

771 
node
* 
	gåì_roŸ_ãmp
 = 
ôem
.
åì_roŸ
;

772 
	gåì_size_ãmp
 = 
ôem
.
åì_size
;

773 
	gåì_height_ãmp
 = 
ôem
.
åì_height
;

774 
node
* 
	gcuºít_ñemít_ãmp
 = 
ôem
.
cuºít_ñemít
;

775 
boﬁ
 
	g©_°¨t_ãmp
 = 
ôem
.
©_°¨t_
;

777 
	gôem
.
	gåì_roŸ
 = 
åì_roŸ
;

778 
	gôem
.
	gåì_size
 = 
åì_size
;

779 
	gôem
.
	gåì_height
 = 
åì_height
;

780 
	gôem
.
	gcuºít_ñemít
 = 
cuºít_ñemít
;

781 
	gôem
.
	g©_°¨t_
 = 
©_°¨t_
;

783 
	gåì_roŸ
 = 
åì_roŸ_ãmp
;

784 
	gåì_size
 = 
åì_size_ãmp
;

785 
	gåì_height
 = 
åì_height_ãmp
;

786 
	gcuºít_ñemít
 = 
cuºít_ñemít_ãmp
;

787 
	g©_°¨t_
 = 
©_°¨t_ãmp
;

792 
	gãm∂©e
 <

793 
ty≥«me
 
	gdomaö
,

794 
ty≥«me
 
	gønge
,

795 
ty≥«me
 
	gmem_m™agî
,

796 
ty≥«me
 
	gcom∑ª


798 
	gbö¨y_£¨ch_åì_kî√l_1
<
	gdomaö
,
	gønge
,
	gmem_m™agî
,
	gcom∑ª
>::

799 
	$ªmove_œ°_ö_‹dî
 (

800 
domaö
& 
d
,

801 
ønge
& 
r


804 
åì_height
 -
	`ªmove_bigge°_ñemít_ö_åì
(
åì_roŸ
,
d
,
r
);

805 --
åì_size
;

807 
	`ª£t
();

808 
	}
}

812 
	gãm∂©e
 <

813 
ty≥«me
 
	gdomaö
,

814 
ty≥«me
 
	gønge
,

815 
ty≥«me
 
	gmem_m™agî
,

816 
ty≥«me
 
	gcom∑ª


818 
	gbö¨y_£¨ch_åì_kî√l_1
<
	gdomaö
,
	gønge
,
	gmem_m™agî
,
	gcom∑ª
>::

819 
	$ªmove_cuºít_ñemít
 (

820 
domaö
& 
d
,

821 
ønge
& 
r


824 
åì_height
 -
	`ªmove_cuºít_ñemít_‰om_åì
(
åì_roŸ
,
d
,
r
);

825 --
åì_size
;

828 i‡(
cuºít_ñemít
)

829 
	`fix_°ack
(
åì_roŸ
);

830 
	}
}

834 
	gãm∂©e
 <

835 
ty≥«me
 
	gdomaö
,

836 
ty≥«me
 
	gønge
,

837 
ty≥«me
 
	gmem_m™agî
,

838 
ty≥«me
 
	gcom∑ª


840 
	gbö¨y_£¨ch_åì_kî√l_1
<
	gdomaö
,
	gønge
,
	gmem_m™agî
,
	gcom∑ª
>::

841 
	$posôi⁄_íumî©‹
 (

842 c⁄° 
domaö
& 
d


846 
	`ª£t
();

847 
©_°¨t_
 = 
Ál£
;

848 
node
* 
t
 = 
åì_roŸ
;

849 
boﬁ
 
wít_À·
 = 
Ál£
;

850 
t
 != 0)

852 i‡–
	`comp
(
d
 , 
t
->d) )

854 
	`push
(
t
);

856 
t
 =Å->
À·
;

857 
wít_À·
 = 
åue
;

859 i‡(
	`comp
(
t
->
d
 , d))

861 
	`push
(
t
);

863 
t
 =Å->
right
;

864 
wít_À·
 = 
Ál£
;

868 
cuºít_ñemít
 = 
t
;

875 i‡(
°ack_pos
 > 0)

877 
cuºít_ñemít
 = 
	`p›
();

880 i‡(
wít_À·
)

886 
	`move_√xt
();

889 
	}
}

897 
	gãm∂©e
 <

898 
ty≥«me
 
	gdomaö
,

899 
ty≥«me
 
	gønge
,

900 
ty≥«me
 
	gmem_m™agî
,

901 
ty≥«me
 
	gcom∑ª


903 
boﬁ
 
	gbö¨y_£¨ch_åì_kî√l_1
<
	gdomaö
,
	gønge
,
	gmem_m™agî
,
	gcom∑ª
>::

904 
	$©_°¨t
 (

907  
©_°¨t_
;

908 
	}
}

912 
	gãm∂©e
 <

913 
ty≥«me
 
	gdomaö
,

914 
ty≥«me
 
	gønge
,

915 
ty≥«me
 
	gmem_m™agî
,

916 
ty≥«me
 
	gcom∑ª


918 
	gbö¨y_£¨ch_åì_kî√l_1
<
	gdomaö
,
	gønge
,
	gmem_m™agî
,
	gcom∑ª
>::

919 
	$ª£t
 (

922 
©_°¨t_
 = 
åue
;

923 
cuºít_ñemít
 = 0;

924 
°ack_pos
 = 0;

925 
	}
}

929 
	gãm∂©e
 <

930 
ty≥«me
 
	gdomaö
,

931 
ty≥«me
 
	gønge
,

932 
ty≥«me
 
	gmem_m™agî
,

933 
ty≥«me
 
	gcom∑ª


935 
boﬁ
 
	gbö¨y_£¨ch_åì_kî√l_1
<
	gdomaö
,
	gønge
,
	gmem_m™agî
,
	gcom∑ª
>::

936 
	$cuºít_ñemít_vÆid
 (

939  (
cuºít_ñemít
 != 0);

940 
	}
}

944 
	gãm∂©e
 <

945 
ty≥«me
 
	gdomaö
,

946 
ty≥«me
 
	gønge
,

947 
ty≥«me
 
	gmem_m™agî
,

948 
ty≥«me
 
	gcom∑ª


950 c⁄° 
	gm≠_∑ú
<
	gdomaö
,
	gønge
>& 
	gbö¨y_£¨ch_åì_kî√l_1
<domaö,ønge,
	gmem_m™agî
,
	gcom∑ª
>::

951 
	$ñemít
 (

954 
p
.
d
 = &(
cuºít_ñemít
->d);

955 
p
.
r
 = &(
cuºít_ñemít
->r);

956  
p
;

957 
	}
}

961 
	gãm∂©e
 <

962 
ty≥«me
 
	gdomaö
,

963 
ty≥«me
 
	gønge
,

964 
ty≥«me
 
	gmem_m™agî
,

965 
ty≥«me
 
	gcom∑ª


967 
	gm≠_∑ú
<
	gdomaö
,
	gønge
>& 
	gbö¨y_£¨ch_åì_kî√l_1
<domaö,ønge,
	gmem_m™agî
,
	gcom∑ª
>::

968 
	$ñemít
 (

971 
p
.
d
 = &(
cuºít_ñemít
->d);

972 
p
.
r
 = &(
cuºít_ñemít
->r);

973  
p
;

974 
	}
}

978 
	gãm∂©e
 <

979 
ty≥«me
 
	gdomaö
,

980 
ty≥«me
 
	gønge
,

981 
ty≥«me
 
	gmem_m™agî
,

982 
ty≥«me
 
	gcom∑ª


984 
boﬁ
 
	gbö¨y_£¨ch_åì_kî√l_1
<
	gdomaö
,
	gønge
,
	gmem_m™agî
,
	gcom∑ª
>::

985 
	$move_√xt
 (

989 i‡(
©_°¨t_
)

991 
©_°¨t_
 = 
Ál£
;

992 i‡(
åì_size
 == 0)

994  
Ál£
;

999 
cuºít_ñemít
 = 
åì_roŸ
;

1000 
node
* 
ãmp
 = 
cuºít_ñemít
->
À·
;

1001 
ãmp
 != 0)

1003 
	`push
(
cuºít_ñemít
);

1004 
cuºít_ñemít
 = 
ãmp
;

1005 
ãmp
 = 
cuºít_ñemít
->
À·
;

1007  
åue
;

1012 i‡(
cuºít_ñemít
 == 0)

1014  
Ál£
;

1018 
node
* 
ãmp
;

1019 
boﬁ
 
wít_up
;

1020 
boﬁ
 
‰om_À·
 = 
Ál£
;

1022 i‡(
cuºít_ñemít
->
right
 != 0)

1025 
ãmp
 = 
cuºít_ñemít
;

1026 
	`push
(
cuºít_ñemít
);

1027 
cuºít_ñemít
 = 
ãmp
->
right
;

1028 
wít_up
 = 
Ál£
;

1033 i‡(
cuºít_ñemít
 =
åì_roŸ
)

1036 
cuºít_ñemít
 = 0;

1037  
Ál£
;

1039 
wít_up
 = 
åue
;

1040 
node
* 
∑ª¡
 = 
	`p›
();

1043 
‰om_À·
 = (
∑ª¡
->
À·
 =
cuºít_ñemít
);

1045 
cuºít_ñemít
 = 
∑ª¡
;

1049 
åue
)

1051 i‡(
wít_up
)

1053 i‡(
‰om_À·
)

1060 i‡(
cuºít_ñemít
 =
åì_roŸ
)

1064 
cuºít_ñemít
 = 0;

1065  
Ál£
;

1068 
node
* 
∑ª¡
 = 
	`p›
();

1069 
‰om_À·
 = (
∑ª¡
->
À·
 =
cuºít_ñemít
);

1070 
cuºít_ñemít
 = 
∑ª¡
;

1076 i‡(
cuºít_ñemít
->
À·
 != 0)

1079 
wít_up
 = 
Ál£
;

1080 
ãmp
 = 
cuºít_ñemít
;

1081 
	`push
(
cuºít_ñemít
);

1082 
cuºít_ñemít
 = 
ãmp
->
À·
;

1092  
åue
;

1096 
	}
}

1104 
	gãm∂©e
 <

1105 
ty≥«me
 
	gdomaö
,

1106 
ty≥«me
 
	gønge
,

1107 
ty≥«me
 
	gmem_m™agî
,

1108 
ty≥«me
 
	gcom∑ª


1110 
	gbö¨y_£¨ch_åì_kî√l_1
<
	gdomaö
,
	gønge
,
	gmem_m™agî
,
	gcom∑ª
>::

1111 
	$dñëe_åì
 (

1112 
node
* 
t


1115 i‡(
t
->
À·
 != 0)

1116 
	`dñëe_åì
(
t
->
À·
);

1117 i‡(
t
->
right
 != 0)

1118 
	`dñëe_åì
(
t
->
right
);

1119 
poﬁ
.
	`dóŒoˇã
(
t
);

1120 
	}
}

1124 
	gãm∂©e
 <

1125 
ty≥«me
 
	gdomaö
,

1126 
ty≥«me
 
	gønge
,

1127 
ty≥«me
 
	gmem_m™agî
,

1128 
ty≥«me
 
	gcom∑ª


1130 
	gbö¨y_£¨ch_åì_kî√l_1
<
	gdomaö
,
	gønge
,
	gmem_m™agî
,
	gcom∑ª
>::

1131 
	$rŸ©e_À·
 (

1132 
node
*& 
t


1137 i‡(
t
->
right
->
bÆ™˚
 == 1)

1139 
t
->
bÆ™˚
 = 0;

1140 
t
->
right
->
bÆ™˚
 = 0;

1144 
t
->
bÆ™˚
 = 1;

1145 
t
->
right
->
bÆ™˚
 = -1;

1149 
node
* 
ãmp
 = 
t
->
right
;

1150 
t
->
right
 = 
ãmp
->
À·
;

1151 
ãmp
->
À·
 = 
t
;

1152 
t
 = 
ãmp
;

1153 
	}
}

1157 
	gãm∂©e
 <

1158 
ty≥«me
 
	gdomaö
,

1159 
ty≥«me
 
	gønge
,

1160 
ty≥«me
 
	gmem_m™agî
,

1161 
ty≥«me
 
	gcom∑ª


1163 
	gbö¨y_£¨ch_åì_kî√l_1
<
	gdomaö
,
	gønge
,
	gmem_m™agî
,
	gcom∑ª
>::

1164 
	$rŸ©e_right
 (

1165 
node
*& 
t


1169 i‡(
t
->
À·
->
bÆ™˚
 == -1)

1171 
t
->
bÆ™˚
 = 0;

1172 
t
->
À·
->
bÆ™˚
 = 0;

1176 
t
->
bÆ™˚
 = -1;

1177 
t
->
À·
->
bÆ™˚
 = 1;

1181 
node
* 
ãmp
 = 
t
->
À·
;

1182 
t
->
À·
 = 
ãmp
->
right
;

1183 
ãmp
->
right
 = 
t
;

1184 
t
 = 
ãmp
;

1186 
	}
}

1190 
	gãm∂©e
 <

1191 
ty≥«me
 
	gdomaö
,

1192 
ty≥«me
 
	gønge
,

1193 
ty≥«me
 
	gmem_m™agî
,

1194 
ty≥«me
 
	gcom∑ª


1196 
	gbö¨y_£¨ch_åì_kî√l_1
<
	gdomaö
,
	gønge
,
	gmem_m™agî
,
	gcom∑ª
>::

1197 
	$doubÀ_rŸ©e_right
 (

1198 
node
*& 
t


1202 
node
* 
ãmp
 = 
t
;

1203 
t
 =Å->
À·
->
right
;

1205 
ãmp
->
À·
->
right
 = 
t
->left;

1206 
t
->
À·
 = 
ãmp
->left;

1208 
ãmp
->
À·
 = 
t
->
right
;

1209 
t
->
right
 = 
ãmp
;

1211 i‡(
t
->
bÆ™˚
 < 0)

1213 
t
->
À·
->
bÆ™˚
 = 0;

1214 
t
->
right
->
bÆ™˚
 = 1;

1216 i‡(
t
->
bÆ™˚
 > 0)

1218 
t
->
À·
->
bÆ™˚
 = -1;

1219 
t
->
right
->
bÆ™˚
 = 0;

1223 
t
->
À·
->
bÆ™˚
 = 0;

1224 
t
->
right
->
bÆ™˚
 = 0;

1226 
t
->
bÆ™˚
 = 0;

1227 
	}
}

1231 
	gãm∂©e
 <

1232 
ty≥«me
 
	gdomaö
,

1233 
ty≥«me
 
	gønge
,

1234 
ty≥«me
 
	gmem_m™agî
,

1235 
ty≥«me
 
	gcom∑ª


1237 
	gbö¨y_£¨ch_åì_kî√l_1
<
	gdomaö
,
	gønge
,
	gmem_m™agî
,
	gcom∑ª
>::

1238 
	$doubÀ_rŸ©e_À·
 (

1239 
node
*& 
t


1242 
node
* 
ãmp
 = 
t
;

1243 
t
 =Å->
right
->
À·
;

1245 
ãmp
->
right
->
À·
 = 
t
->right;

1246 
t
->
right
 = 
ãmp
->right;

1248 
ãmp
->
right
 = 
t
->
À·
;

1249 
t
->
À·
 = 
ãmp
;

1251 i‡(
t
->
bÆ™˚
 < 0)

1253 
t
->
À·
->
bÆ™˚
 = 0;

1254 
t
->
right
->
bÆ™˚
 = 1;

1256 i‡(
t
->
bÆ™˚
 > 0)

1258 
t
->
À·
->
bÆ™˚
 = -1;

1259 
t
->
right
->
bÆ™˚
 = 0;

1263 
t
->
À·
->
bÆ™˚
 = 0;

1264 
t
->
right
->
bÆ™˚
 = 0;

1267 
t
->
bÆ™˚
 = 0;

1268 
	}
}

1272 
	gãm∂©e
 <

1273 
ty≥«me
 
	gdomaö
,

1274 
ty≥«me
 
	gønge
,

1275 
ty≥«me
 
	gmem_m™agî
,

1276 
ty≥«me
 
	gcom∑ª


1278 
boﬁ
 
	gbö¨y_£¨ch_åì_kî√l_1
<
	gdomaö
,
	gønge
,
	gmem_m™agî
,
	gcom∑ª
>::

1279 
	$ªmove_bigge°_ñemít_ö_åì
 (

1280 
node
*& 
t
,

1281 
domaö
& 
d
,

1282 
ønge
& 
r


1287 
node
& 
åì
 = *
t
;

1290 i‡–
åì
.
right
 == 0)

1293 
	`exch™ge
(
d
,
åì
.d);

1294 
	`exch™ge
(
r
,
åì
.r);

1297 
t
 = 
åì
.
À·
;

1300 
poﬁ
.
	`dóŒoˇã
(&
åì
);

1303  
åue
;

1311 i‡–
	`ªmove_bigge°_ñemít_ö_åì
(
åì
.
right
,
d
,
r
) )

1314 i‡–
åì
.
bÆ™˚
 == 1)

1316 --
åì
.
bÆ™˚
;

1317  
åue
;

1321 --
åì
.
bÆ™˚
;

1322  
	`kìp_node_bÆ™˚d
(
t
);

1326  
Ál£
;

1328 
	}
}

1332 
	gãm∂©e
 <

1333 
ty≥«me
 
	gdomaö
,

1334 
ty≥«me
 
	gønge
,

1335 
ty≥«me
 
	gmem_m™agî
,

1336 
ty≥«me
 
	gcom∑ª


1338 
boﬁ
 
	gbö¨y_£¨ch_åì_kî√l_1
<
	gdomaö
,
	gønge
,
	gmem_m™agî
,
	gcom∑ª
>::

1339 
	$ªmove_Àa°_ñemít_ö_åì
 (

1340 
node
*& 
t
,

1341 
domaö
& 
d
,

1342 
ønge
& 
r


1347 
node
& 
åì
 = *
t
;

1350 i‡–
åì
.
À·
 == 0)

1353 
	`exch™ge
(
d
,
åì
.d);

1354 
	`exch™ge
(
r
,
åì
.r);

1357 
t
 = 
åì
.
right
;

1360 
poﬁ
.
	`dóŒoˇã
(&
åì
);

1363  
åue
;

1371 i‡–
	`ªmove_Àa°_ñemít_ö_åì
(
åì
.
À·
,
d
,
r
) )

1374 i‡–
åì
.
bÆ™˚
 == -1)

1376 ++
åì
.
bÆ™˚
;

1377  
åue
;

1381 ++
åì
.
bÆ™˚
;

1382  
	`kìp_node_bÆ™˚d
(
t
);

1386  
Ál£
;

1388 
	}
}

1392 
	gãm∂©e
 <

1393 
ty≥«me
 
	gdomaö
,

1394 
ty≥«me
 
	gønge
,

1395 
ty≥«me
 
	gmem_m™agî
,

1396 
ty≥«me
 
	gcom∑ª


1398 
boﬁ
 
	gbö¨y_£¨ch_åì_kî√l_1
<
	gdomaö
,
	gønge
,
	gmem_m™agî
,
	gcom∑ª
>::

1399 
	$add_to_åì
 (

1400 
node
*& 
t
,

1401 
domaö
& 
d
,

1402 
ønge
& 
r


1407 i‡(
t
 == 0)

1410 
t
 = 
poﬁ
.
	`Æloˇã
();

1414 
node
& 
åì
 = *
t
;

1419 
åì
.
À·
 = 0;

1420 
åì
.
right
 = 0;

1421 
åì
.
bÆ™˚
 = 0;

1424 
	`exch™ge
(
åì
.
d
,d);

1425 
	`exch™ge
(
åì
.
r
,r);

1428  
åue
;

1434 
node
& 
åì
 = *
t
;

1435 sig√d 
ﬁd_bÆ™˚
 = 
åì
.
bÆ™˚
;

1438 i‡(
	`comp
–
d
 , 
åì
.d) )

1439 
åì
.
bÆ™˚
 -
	`add_to_åì
—ªe.
À·
,
d
,
r
);

1441 
åì
.
bÆ™˚
 +
	`add_to_åì
—ªe.
right
,
d
,
r
);

1445 i‡(
ﬁd_bÆ™˚
 == 0)

1448 i‡(
åì
.
bÆ™˚
 != 0)

1449  
åue
;

1451  
Ál£
;

1456 i‡(
åì
.
bÆ™˚
 == 0)

1458  
Ál£
;

1463 i‡(
åì
.
bÆ™˚
 !
ﬁd_bÆ™˚
)

1465  !
	`kìp_node_bÆ™˚d
(
t
);

1470  
Ál£
;

1475 
	}
}

1479 
	gãm∂©e
 <

1480 
ty≥«me
 
	gdomaö
,

1481 
ty≥«me
 
	gønge
,

1482 
ty≥«me
 
	gmem_m™agî
,

1483 
ty≥«me
 
	gcom∑ª


1485 
boﬁ
 
	gbö¨y_£¨ch_åì_kî√l_1
<
	gdomaö
,
	gønge
,
	gmem_m™agî
,
	gcom∑ª
>::

1486 
	$fix_°ack
 (

1487 
node
* 
t
,

1488 
dïth


1492 i‡(
t
 =
cuºít_ñemít
)

1494 
°ack_pos
 = 
dïth
;

1495  
åue
;

1497 i‡(
t
 == 0)

1499  
Ál£
;

1502 i‡(!–
	`comp
(
t
->
d
 , 
cuºít_ñemít
->d)))

1505 i‡(
	`fix_°ack
(
t
->
À·
,
dïth
+1))

1507 
°ack
[
dïth
] = 
t
;

1508  
åue
;

1511 i‡(!(
	`comp
(
cuºít_ñemít
->
d
 , 
t
->d)))

1514 i‡(
	`fix_°ack
(
t
->
right
,
dïth
+1))

1516 
°ack
[
dïth
] = 
t
;

1517  
åue
;

1520  
Ál£
;

1521 
	}
}

1525 
	gãm∂©e
 <

1526 
ty≥«me
 
	gdomaö
,

1527 
ty≥«me
 
	gønge
,

1528 
ty≥«me
 
	gmem_m™agî
,

1529 
ty≥«me
 
	gcom∑ª


1531 
boﬁ
 
	gbö¨y_£¨ch_åì_kî√l_1
<
	gdomaö
,
	gønge
,
	gmem_m™agî
,
	gcom∑ª
>::

1532 
	$ªmove_cuºít_ñemít_‰om_åì
 (

1533 
node
*& 
t
,

1534 
domaö
& 
d
,

1535 
ønge
& 
r
,

1536 
cur_°ack_pos


1541 
node
& 
åì
 = *
t
;

1544 i‡(
t
 =
cuºít_ñemít
)

1548 
	`exch™ge
(
d
,
åì
.d);

1549 
	`exch™ge
(
r
,
åì
.r);

1552 i‡(
åì
.
À·
 == 0)

1556 
	`move_√xt
();

1559 
t
 = 
åì
.
right
;

1562 
poﬁ
.
	`dóŒoˇã
(&
åì
);

1565  
åue
;

1568 i‡(
åì
.
right
 == 0)

1572 
	`move_√xt
();

1575 
t
 = 
åì
.
À·
;

1578 
poﬁ
.
	`dóŒoˇã
(&
åì
);

1581  
åue
;

1589 
cuºít_ñemít
 = 
t
;

1593 i‡(
	`ªmove_Àa°_ñemít_ö_åì
(
åì
.
right
,åì.
d
,åì.
r
))

1596 --
åì
.
bÆ™˚
;

1599 i‡(
åì
.
bÆ™˚
 == 0)

1601  
åue
;

1605  
	`kìp_node_bÆ™˚d
(
t
);

1611  
Ál£
;

1617 i‡–(
cur_°ack_pos
 < 
°ack_pos
 && 
°ack
[cur_°ack_pos] =
åì
.
À·
) ||

1618 
åì
.
À·
 =
cuºít_ñemít
 )

1621 i‡(
åì
.
bÆ™˚
 == -1)

1623 
bÆ™˚
 = 
åì
.balance;

1624 
bÆ™˚
 +
	`ªmove_cuºít_ñemít_‰om_åì
(
åì
.
À·
,
d
,
r
,
cur_°ack_pos
+1);

1625 
åì
.
bÆ™˚
 = balance;

1626  !
åì
.
bÆ™˚
;

1630 
bÆ™˚
 = 
åì
.balance;

1631 
bÆ™˚
 +
	`ªmove_cuºít_ñemít_‰om_åì
(
åì
.
À·
,
d
,
r
,
cur_°ack_pos
+1);

1632 
åì
.
bÆ™˚
 = balance;

1633  
	`kìp_node_bÆ™˚d
(
t
);

1636 i‡–(
cur_°ack_pos
 < 
°ack_pos
 && 
°ack
[cur_°ack_pos] =
åì
.
right
) ||

1637 
åì
.
right
 =
cuºít_ñemít
 )

1640 i‡(
åì
.
bÆ™˚
 == 1)

1642 
bÆ™˚
 = 
åì
.balance;

1643 
bÆ™˚
 -
	`ªmove_cuºít_ñemít_‰om_åì
(
åì
.
right
,
d
,
r
,
cur_°ack_pos
+1);

1644 
åì
.
bÆ™˚
 = balance;

1645  !
åì
.
bÆ™˚
;

1649 
bÆ™˚
 = 
åì
.balance;

1650 
bÆ™˚
 -
	`ªmove_cuºít_ñemít_‰om_åì
(
åì
.
right
,
d
,
r
,
cur_°ack_pos
+1);

1651 
åì
.
bÆ™˚
 = balance;

1652  
	`kìp_node_bÆ™˚d
(
t
);

1657  
Ál£
;

1658 
	}
}

1662 
	gãm∂©e
 <

1663 
ty≥«me
 
	gdomaö
,

1664 
ty≥«me
 
	gønge
,

1665 
ty≥«me
 
	gmem_m™agî
,

1666 
ty≥«me
 
	gcom∑ª


1668 
boﬁ
 
	gbö¨y_£¨ch_åì_kî√l_1
<
	gdomaö
,
	gønge
,
	gmem_m™agî
,
	gcom∑ª
>::

1669 
	$ªmove_‰om_åì
 (

1670 
node
*& 
t
,

1671 c⁄° 
domaö
& 
d
,

1672 
domaö
& 
d_c›y
,

1673 
ønge
& 
r


1678 
node
& 
åì
 = *
t
;

1681 i‡(
	`comp
(
d
 , 
åì
.d))

1684 i‡(
åì
.
bÆ™˚
 == -1)

1686 
bÆ™˚
 = 
åì
.balance;

1687 
bÆ™˚
 +
	`ªmove_‰om_åì
(
åì
.
À·
,
d
,
d_c›y
,
r
);

1688 
åì
.
bÆ™˚
 = balance;

1689  !
åì
.
bÆ™˚
;

1693 
bÆ™˚
 = 
åì
.balance;

1694 
bÆ™˚
 +
	`ªmove_‰om_åì
(
åì
.
À·
,
d
,
d_c›y
,
r
);

1695 
åì
.
bÆ™˚
 = balance;

1696  
	`kìp_node_bÆ™˚d
(
t
);

1701 i‡(
	`comp
(
åì
.
d
 , d))

1705 i‡(
åì
.
bÆ™˚
 == 1)

1707 
bÆ™˚
 = 
åì
.balance;

1708 
bÆ™˚
 -
	`ªmove_‰om_åì
(
åì
.
right
,
d
,
d_c›y
,
r
);

1709 
åì
.
bÆ™˚
 = balance;

1710  !
åì
.
bÆ™˚
;

1714 
bÆ™˚
 = 
åì
.balance;

1715 
bÆ™˚
 -
	`ªmove_‰om_åì
(
åì
.
right
,
d
,
d_c›y
,
r
);

1716 
åì
.
bÆ™˚
 = balance;

1717  
	`kìp_node_bÆ™˚d
(
t
);

1725 
	`exch™ge
(
d_c›y
,
åì
.
d
);

1726 
	`exch™ge
(
r
,
åì
.r);

1729 i‡(
åì
.
À·
 == 0)

1733 
t
 = 
åì
.
right
;

1736 
poﬁ
.
	`dóŒoˇã
(&
åì
);

1739  
åue
;

1742 i‡(
åì
.
right
 == 0)

1746 
t
 = 
åì
.
À·
;

1749 
poﬁ
.
	`dóŒoˇã
(&
åì
);

1752  
åue
;

1760 i‡(
	`ªmove_Àa°_ñemít_ö_åì
(
åì
.
right
,åì.
d
,åì.
r
))

1763 --
åì
.
bÆ™˚
;

1766 i‡(
åì
.
bÆ™˚
 == 0)

1768  
åue
;

1772  
	`kìp_node_bÆ™˚d
(
t
);

1778  
Ál£
;

1783 
	}
}

1787 
	gãm∂©e
 <

1788 
ty≥«me
 
	gdomaö
,

1789 
ty≥«me
 
	gønge
,

1790 
ty≥«me
 
	gmem_m™agî
,

1791 
ty≥«me
 
	gcom∑ª


1793 
boﬁ
 
	gbö¨y_£¨ch_åì_kî√l_1
<
	gdomaö
,
	gønge
,
	gmem_m™agî
,
	gcom∑ª
>::

1794 
	$ªmove_‰om_åì
 (

1795 
node
*& 
t
,

1796 c⁄° 
domaö
& 
d


1801 
node
& 
åì
 = *
t
;

1804 i‡(
	`comp
(
d
 , 
åì
.d))

1807 i‡(
åì
.
bÆ™˚
 == -1)

1809 
bÆ™˚
 = 
åì
.balance;

1810 
bÆ™˚
 +
	`ªmove_‰om_åì
(
åì
.
À·
,
d
);

1811 
åì
.
bÆ™˚
 = balance;

1812  !
åì
.
bÆ™˚
;

1816 
bÆ™˚
 = 
åì
.balance;

1817 
bÆ™˚
 +
	`ªmove_‰om_åì
(
åì
.
À·
,
d
);

1818 
åì
.
bÆ™˚
 = balance;

1819  
	`kìp_node_bÆ™˚d
(
t
);

1824 i‡(
	`comp
(
åì
.
d
 , d))

1828 i‡(
åì
.
bÆ™˚
 == 1)

1830 
bÆ™˚
 = 
åì
.balance;

1831 
bÆ™˚
 -
	`ªmove_‰om_åì
(
åì
.
right
,
d
);

1832 
åì
.
bÆ™˚
 = balance;

1833  !
åì
.
bÆ™˚
;

1837 
bÆ™˚
 = 
åì
.balance;

1838 
bÆ™˚
 -
	`ªmove_‰om_åì
(
åì
.
right
,
d
);

1839 
åì
.
bÆ™˚
 = balance;

1840  
	`kìp_node_bÆ™˚d
(
t
);

1848 i‡(
åì
.
À·
 == 0)

1852 
t
 = 
åì
.
right
;

1855 
poﬁ
.
	`dóŒoˇã
(&
åì
);

1858  
åue
;

1861 i‡(
åì
.
right
 == 0)

1865 
t
 = 
åì
.
À·
;

1868 
poﬁ
.
	`dóŒoˇã
(&
åì
);

1871  
åue
;

1879 i‡(
	`ªmove_Àa°_ñemít_ö_åì
(
åì
.
right
,åì.
d
,åì.
r
))

1882 --
åì
.
bÆ™˚
;

1885 i‡(
åì
.
bÆ™˚
 == 0)

1887  
åue
;

1891  
	`kìp_node_bÆ™˚d
(
t
);

1897  
Ál£
;

1902 
	}
}

1906 
	gãm∂©e
 <

1907 
ty≥«me
 
	gdomaö
,

1908 
ty≥«me
 
	gønge
,

1909 
ty≥«me
 
	gmem_m™agî
,

1910 
ty≥«me
 
	gcom∑ª


1912 
ønge
* 
	gbö¨y_£¨ch_åì_kî√l_1
<
	gdomaö
,
	gønge
,
	gmem_m™agî
,
	gcom∑ª
>::

1913 
	$ªtu∫_ª„ªn˚
 (

1914 
node
* 
t
,

1915 c⁄° 
domaö
& 
d


1918 
t
 != 0)

1921 i‡–
	`comp
(
d
 , 
t
->d ))

1924 
t
 =Å->
À·
;

1926 i‡(
	`comp
(
t
->
d
 , d))

1929 
t
 =Å->
right
;

1934  &(
t
->
r
);

1938 
	}
}

1942 
	gãm∂©e
 <

1943 
ty≥«me
 
	gdomaö
,

1944 
ty≥«me
 
	gønge
,

1945 
ty≥«me
 
	gmem_m™agî
,

1946 
ty≥«me
 
	gcom∑ª


1948 c⁄° 
ønge
* 
	gbö¨y_£¨ch_åì_kî√l_1
<
	gdomaö
,
	gønge
,
	gmem_m™agî
,
	gcom∑ª
>::

1949 
	$ªtu∫_ª„ªn˚
 (

1950 c⁄° 
node
* 
t
,

1951 c⁄° 
domaö
& 
d


1954 
t
 != 0)

1957 i‡–
	`comp
(
d
 , 
t
->d) )

1960 
t
 =Å->
À·
;

1962 i‡(
	`comp
(
t
->
d
 , d))

1965 
t
 =Å->
right
;

1970  &(
t
->
r
);

1974 
	}
}

1978 
	gãm∂©e
 <

1979 
ty≥«me
 
	gdomaö
,

1980 
ty≥«me
 
	gønge
,

1981 
ty≥«me
 
	gmem_m™agî
,

1982 
ty≥«me
 
	gcom∑ª


1984 
boﬁ
 
	gbö¨y_£¨ch_åì_kî√l_1
<
	gdomaö
,
	gønge
,
	gmem_m™agî
,
	gcom∑ª
>::

1985 
	$kìp_node_bÆ™˚d
 (

1986 
node
*& 
t


1991 
node
& 
åì
 = *
t
;

1994 i‡(
åì
.
bÆ™˚
 == 0)

1995  
Ál£
;

1999 i‡(
åì
.
bÆ™˚
 == 2)

2001 i‡(
åì
.
right
->
bÆ™˚
 >= 0)

2002 
	`rŸ©e_À·
(
t
);

2004 
	`doubÀ_rŸ©e_À·
(
t
);

2007 i‡(
åì
.
bÆ™˚
 == -2)

2009 i‡(
åì
.
À·
->
bÆ™˚
 <= 0)

2010 
	`rŸ©e_right
(
t
);

2012 
	`doubÀ_rŸ©e_right
(
t
);

2016 i‡(
t
->
bÆ™˚
 == 0)

2017  
åue
;

2019  
Ál£
;

2020 
	}
}

2024 
	gãm∂©e
 <

2025 
ty≥«me
 
	gdomaö
,

2026 
ty≥«me
 
	gønge
,

2027 
ty≥«me
 
	gmem_m™agî
,

2028 
ty≥«me
 
	gcom∑ª


2030 
	gbö¨y_£¨ch_åì_kî√l_1
<
	gdomaö
,
	gønge
,
	gmem_m™agî
,
	gcom∑ª
>::

2031 
	$gë_cou¡
 (

2032 c⁄° 
domaö
& 
d
,

2033 
node
* 
åì_roŸ


2036 i‡(
åì_roŸ
 != 0)

2038 i‡(
	`comp
(
d
 , 
åì_roŸ
->d))

2041  
	`gë_cou¡
(
d
,
åì_roŸ
->
À·
);

2043 i‡(
	`comp
(
åì_roŸ
->
d
 , d))

2046  
	`gë_cou¡
(
d
,
åì_roŸ
->
right
);

2051  
	`gë_cou¡
(
d
,
åì_roŸ
->
À·
)

2052 + 
	`gë_cou¡
(
d
,
åì_roŸ
->
right
)

2057 
	}
}

	@viper/concurrentqueue-src/benchmarks/dlib/binary_search_tree/binary_search_tree_kernel_2.h

3 #i‚de‡
DLIB_BINARY_SEARCH_TREE_KERNEl_2_


4 
	#DLIB_BINARY_SEARCH_TREE_KERNEl_2_


	)

6 
	~"bö¨y_£¨ch_åì_kî√l_ab°ø˘.h
"

7 
	~"../Ægs.h
"

8 
	~"../öãrÁ˚s/m≠_∑ú.h
"

9 
	~"../öãrÁ˚s/íumîabÀ.h
"

10 
	~"../öãrÁ˚s/ªmovî.h
"

11 
	~"../£rülize.h
"

12 
	~<fun˘i⁄Æ
>

14 
«me•a˚
 
	gdlib


17 
	gãm∂©e
 <

18 
ty≥«me
 
	gdomaö
,

19 
ty≥«me
 
	gønge
,

20 
ty≥«me
 
	gmem_m™agî
,

21 
ty≥«me
 
	gcom∑ª
 = 
°d
::
Àss
<
domaö
>

23 
˛ass
 
bö¨y_£¨ch_åì_kî√l_2
 : 
public
 
íumîabÀ
<
m≠_∑ú
<
domaö
,
	gønge
> >,

24 
public
 
	gasc_∑ú_ªmovî
<
	gdomaö
,
	gønge
,
	gcom∑ª
>

73 ˛as†
	cnode


75 
	gpublic
:

76 
node
* 
À·
;

77 
node
* 
	gright
;

78 
node
* 
	g∑ª¡
;

79 
domaö
 
	gd
;

80 
ønge
 
	gr
;

81 
	gcﬁ‹
;

84 
˛ass
 
	gm∑ú
 : 
public
 
m≠_∑ú
<
domaö
,
	gønge
>

86 
	gpublic
:

87 c⁄° 
domaö
* 
d
;

88 
ønge
* 
	gr
;

90 c⁄° 
	gdomaö
& 
key
(

91 Ëc⁄° {  *
	gd
; }

93 c⁄° 
	gønge
& 
vÆue
(

94 Ëc⁄° {  *
	gr
; }

96 
	gønge
& 
vÆue
(

97 Ë{  *
	gr
; }

101 c⁄° 
	gªd
 = 0;

102 c⁄° 
	gbœck
 = 1;

105 
	gpublic
:

107 
domaö
 
	tdomaö_ty≥
;

108 
ønge
 
	tønge_ty≥
;

109 
com∑ª
 
	tcom∑ª_ty≥
;

110 
mem_m™agî
 
	tmem_m™agî_ty≥
;

112 
bö¨y_£¨ch_åì_kî√l_2
(

114 
NIL
(
poﬁ
.
Æloˇã
()),

115 
åì_size
(0),

116 
åì_roŸ
(
NIL
),

117 
cuºít_ñemít
(0),

118 
©_°¨t_
(
åue
)

120 
	gNIL
->
	gcﬁ‹
 = 
bœck
;

121 
	gNIL
->
	gÀ·
 = 0;

122 
	gNIL
->
	gright
 = 0;

123 
	gNIL
->
	g∑ª¡
 = 0;

126 
	gvútuÆ
 ~
bö¨y_£¨ch_åì_kî√l_2
(

129 
ölöe
 
˛ór
(

132 
ölöe
 
height
 (

135 
ölöe
 
cou¡
 (

136 c⁄° 
domaö
& 
d


139 
ölöe
 
add
 (

140 
domaö
& 
d
,

141 
ønge
& 
r


144 
ªmove
 (

145 c⁄° 
domaö
& 
d
,

146 
domaö
& 
d_c›y
,

147 
ønge
& 
r


150 
de°roy
 (

151 c⁄° 
domaö
& 
d


154 
ªmove_™y
 (

155 
domaö
& 
d
,

156 
ønge
& 
r


159 
ölöe
 c⁄° 
ønge
* 
	g›î©‹
[] (

160 c⁄° 
	gdomaö
& 
	gôem


163 
ölöe
 
ønge
* 
	g›î©‹
[] (

164 c⁄° 
	gdomaö
& 
	gôem


167 
ölöe
 
sw≠
 (

168 
bö¨y_£¨ch_åì_kî√l_2
& 
ôem


172 
ölöe
 
size_t
 
size
 (

175 
boﬁ
 
©_°¨t
 (

178 
ölöe
 
ª£t
 (

181 
boﬁ
 
cuºít_ñemít_vÆid
 (

184 c⁄° 
	gm≠_∑ú
<
	gdomaö
,
	gønge
>& 
ñemít
 (

187 
	gm≠_∑ú
<
	gdomaö
,
	gønge
>& 
ñemít
 (

190 
boﬁ
 
move_√xt
 (

193 
ªmove_œ°_ö_‹dî
 (

194 
domaö
& 
d
,

195 
ønge
& 
r


198 
ªmove_cuºít_ñemít
 (

199 
domaö
& 
d
,

200 
ønge
& 
r


203 
posôi⁄_íumî©‹
 (

204 c⁄° 
domaö
& 
d


207 
	g¥iv©e
:

209 
ölöe
 
rŸ©e_À·
 (

210 
node
* 
t


220 
ölöe
 
rŸ©e_right
 (

221 
node
* 
t


231 
ölöe
 
doubÀ_rŸ©e_right
 (

232 
node
* 
t


245 
ölöe
 
doubÀ_rŸ©e_À·
 (

246 
node
* 
t


259 
ªmove_bigge°_ñemít_ö_åì
 (

260 
node
* 
t
,

261 
domaö
& 
d
,

262 
ønge
& 
r


273 
boﬁ
 
ªmove_Àa°_ñemít_ö_åì
 (

274 
node
* 
t
,

275 
domaö
& 
d
,

276 
ønge
& 
r


291 
add_to_åì
 (

292 
node
* 
t
,

293 
domaö
& 
d
,

294 
ønge
& 
r


306 
ªmove_‰om_åì
 (

307 
node
* 
t
,

308 c⁄° 
domaö
& 
d
,

309 
domaö
& 
d_c›y
,

310 
ønge
& 
r


327 
ªmove_‰om_åì
 (

328 
node
* 
t
,

329 c⁄° 
domaö
& 
d


339 c⁄° 
ønge
* 
ªtu∫_ª„ªn˚
 (

340 c⁄° 
node
* 
t
,

341 c⁄° 
domaö
& 
d


351 
ønge
* 
ªtu∫_ª„ªn˚
 (

352 
node
* 
t
,

353 c⁄° 
domaö
& 
d


363 
fix_a·î_add
 (

364 
node
* 
t


377 
fix_a·î_ªmove
 (

378 
node
* 
t


391 
åì_height
 (

392 
node
* 
t


400 
dñëe_åì
 (

401 
node
* 
t


411 
gë_cou¡
 (

412 c⁄° 
domaö
& 
ôem
,

413 
node
* 
åì_roŸ


429 
ty≥«me
 
	gmem_m™agî
::
ãm∂©e
 
ªböd
<
node
>::
Ÿhî
 
poﬁ
;

430 
node
* 
	gNIL
;

431 
	gåì_size
;

432 
node
* 
	gåì_roŸ
;

433 
muèbÀ
 
node
* 
	gcuºít_ñemít
;

434 
muèbÀ
 
boﬁ
 
	g©_°¨t_
;

435 
muèbÀ
 
m∑ú
 
	gp
;

436 
com∑ª
 
	gcomp
;

441 
bö¨y_£¨ch_åì_kî√l_2
(binary_search_tree_kernel_2&);

442 
	gbö¨y_£¨ch_åì_kî√l_2
& 
	g›î©‹
=(
bö¨y_£¨ch_åì_kî√l_2
&);

447 
	gãm∂©e
 <

448 
ty≥«me
 
	gdomaö
,

449 
ty≥«me
 
	gønge
,

450 
ty≥«me
 
	gmem_m™agî
,

451 
ty≥«me
 
	gcom∑ª


453 
ölöe
 
sw≠
 (

454 
bö¨y_£¨ch_åì_kî√l_2
<
domaö
,
ønge
,
mem_m™agî
,
com∑ª
>& 
a
,

455 
bö¨y_£¨ch_åì_kî√l_2
<
domaö
,
ønge
,
mem_m™agî
,
com∑ª
>& 
b


456 Ë{ 
	ga
.
sw≠
(
b
); }

460 
	gãm∂©e
 <

461 
ty≥«me
 
	gdomaö
,

462 
ty≥«me
 
	gønge
,

463 
ty≥«me
 
	gmem_m™agî
,

464 
ty≥«me
 
	gcom∑ª


466 
de£rülize
 (

467 
bö¨y_£¨ch_åì_kî√l_2
<
domaö
,
ønge
,
mem_m™agî
,
com∑ª
>& 
ôem
,

468 
°d
::
i°ªam
& 
ö


471 
åy


473 
ôem
.
˛ór
();

474 
	gsize
;

475 
de£rülize
(
size
,
ö
);

476 
domaö
 
	gd
;

477 
ønge
 
	gr
;

478 
	gi
 = 0; i < 
	gsize
; ++i)

480 
de£rülize
(
d
,
ö
);

481 
de£rülize
(
r
,
ö
);

482 
	gôem
.
add
(
d
,
r
);

485 
ˇtch
 (
£rüliz©i⁄_îr‹
& 
e
)

487 
	gôem
.
˛ór
();

488 
throw
 
£rüliz©i⁄_îr‹
(
e
.
öfo
 + "\n while deserializing object ofÅype binary_search_tree_kernel_2");

501 
	gãm∂©e
 <

502 
ty≥«me
 
	gdomaö
,

503 
ty≥«me
 
	gønge
,

504 
ty≥«me
 
	gmem_m™agî
,

505 
ty≥«me
 
	gcom∑ª


507 
	gbö¨y_£¨ch_åì_kî√l_2
<
	gdomaö
,
	gønge
,
	gmem_m™agî
,
	gcom∑ª
>::

508 ~
	$bö¨y_£¨ch_åì_kî√l_2
 (

511 i‡(
åì_roŸ
 !
NIL
)

512 
	`dñëe_åì
(
åì_roŸ
);

513 
poﬁ
.
	`dóŒoˇã
(
NIL
);

514 
	}
}

518 
	gãm∂©e
 <

519 
ty≥«me
 
	gdomaö
,

520 
ty≥«me
 
	gønge
,

521 
ty≥«me
 
	gmem_m™agî
,

522 
ty≥«me
 
	gcom∑ª


524 
	gbö¨y_£¨ch_åì_kî√l_2
<
	gdomaö
,
	gønge
,
	gmem_m™agî
,
	gcom∑ª
>::

525 
	$˛ór
 (

528 i‡(
åì_size
 > 0)

530 
	`dñëe_åì
(
åì_roŸ
);

531 
åì_roŸ
 = 
NIL
;

532 
åì_size
 = 0;

535 
	`ª£t
();

536 
	}
}

540 
	gãm∂©e
 <

541 
ty≥«me
 
	gdomaö
,

542 
ty≥«me
 
	gønge
,

543 
ty≥«me
 
	gmem_m™agî
,

544 
ty≥«me
 
	gcom∑ª


546 
size_t
 
	gbö¨y_£¨ch_åì_kî√l_2
<
	gdomaö
,
	gønge
,
	gmem_m™agî
,
	gcom∑ª
>::

547 
	$size
 (

550  
åì_size
;

551 
	}
}

555 
	gãm∂©e
 <

556 
ty≥«me
 
	gdomaö
,

557 
ty≥«me
 
	gønge
,

558 
ty≥«me
 
	gmem_m™agî
,

559 
ty≥«me
 
	gcom∑ª


561 
	gbö¨y_£¨ch_åì_kî√l_2
<
	gdomaö
,
	gønge
,
	gmem_m™agî
,
	gcom∑ª
>::

562 
	$height
 (

565  
	`åì_height
(
åì_roŸ
);

566 
	}
}

570 
	gãm∂©e
 <

571 
ty≥«me
 
	gdomaö
,

572 
ty≥«me
 
	gønge
,

573 
ty≥«me
 
	gmem_m™agî
,

574 
ty≥«me
 
	gcom∑ª


576 
	gbö¨y_£¨ch_åì_kî√l_2
<
	gdomaö
,
	gønge
,
	gmem_m™agî
,
	gcom∑ª
>::

577 
	$cou¡
 (

578 c⁄° 
domaö
& 
ôem


581  
	`gë_cou¡
(
ôem
,
åì_roŸ
);

582 
	}
}

586 
	gãm∂©e
 <

587 
ty≥«me
 
	gdomaö
,

588 
ty≥«me
 
	gønge
,

589 
ty≥«me
 
	gmem_m™agî
,

590 
ty≥«me
 
	gcom∑ª


592 
	gbö¨y_£¨ch_åì_kî√l_2
<
	gdomaö
,
	gønge
,
	gmem_m™agî
,
	gcom∑ª
>::

593 
	$add
 (

594 
domaö
& 
d
,

595 
ønge
& 
r


598 i‡(
åì_size
 == 0)

600 
åì_roŸ
 = 
poﬁ
.
	`Æloˇã
();

601 
åì_roŸ
->
cﬁ‹
 = 
bœck
;

602 
åì_roŸ
->
À·
 = 
NIL
;

603 
åì_roŸ
->
right
 = 
NIL
;

604 
åì_roŸ
->
∑ª¡
 = 
NIL
;

605 
	`exch™ge
(
åì_roŸ
->
d
,d);

606 
	`exch™ge
(
åì_roŸ
->
r
,r);

610 
	`add_to_åì
(
åì_roŸ
,
d
,
r
);

612 ++
åì_size
;

614 
	`ª£t
();

615 
	}
}

619 
	gãm∂©e
 <

620 
ty≥«me
 
	gdomaö
,

621 
ty≥«me
 
	gønge
,

622 
ty≥«me
 
	gmem_m™agî
,

623 
ty≥«me
 
	gcom∑ª


625 
	gbö¨y_£¨ch_åì_kî√l_2
<
	gdomaö
,
	gønge
,
	gmem_m™agî
,
	gcom∑ª
>::

626 
	$ªmove
 (

627 c⁄° 
domaö
& 
d
,

628 
domaö
& 
d_c›y
,

629 
ønge
& 
r


632 
	`ªmove_‰om_åì
(
åì_roŸ
,
d
,
d_c›y
,
r
);

633 --
åì_size
;

635 
	`ª£t
();

636 
	}
}

640 
	gãm∂©e
 <

641 
ty≥«me
 
	gdomaö
,

642 
ty≥«me
 
	gønge
,

643 
ty≥«me
 
	gmem_m™agî
,

644 
ty≥«me
 
	gcom∑ª


646 
	gbö¨y_£¨ch_åì_kî√l_2
<
	gdomaö
,
	gønge
,
	gmem_m™agî
,
	gcom∑ª
>::

647 
	$de°roy
 (

648 c⁄° 
domaö
& 
ôem


651 
	`ªmove_‰om_åì
(
åì_roŸ
,
ôem
);

652 --
åì_size
;

654 
	`ª£t
();

655 
	}
}

659 
	gãm∂©e
 <

660 
ty≥«me
 
	gdomaö
,

661 
ty≥«me
 
	gønge
,

662 
ty≥«me
 
	gmem_m™agî
,

663 
ty≥«me
 
	gcom∑ª


665 
	gbö¨y_£¨ch_åì_kî√l_2
<
	gdomaö
,
	gønge
,
	gmem_m™agî
,
	gcom∑ª
>::

666 
	$ªmove_™y
 (

667 
domaö
& 
d
,

668 
ønge
& 
r


671 
	`ªmove_Àa°_ñemít_ö_åì
(
åì_roŸ
,
d
,
r
);

672 --
åì_size
;

674 
	`ª£t
();

675 
	}
}

679 
	gãm∂©e
 <

680 
ty≥«me
 
	gdomaö
,

681 
ty≥«me
 
	gønge
,

682 
ty≥«me
 
	gmem_m™agî
,

683 
ty≥«me
 
	gcom∑ª


685 
ønge
* 
	gbö¨y_£¨ch_åì_kî√l_2
<
	gdomaö
,
	gønge
,
	gmem_m™agî
,
	gcom∑ª
>::

686 
›î©‹
[] (

687 c⁄° 
domaö
& 
d


690  
ªtu∫_ª„ªn˚
(
åì_roŸ
,
d
);

695 
	gãm∂©e
 <

696 
ty≥«me
 
	gdomaö
,

697 
ty≥«me
 
	gønge
,

698 
ty≥«me
 
	gmem_m™agî
,

699 
ty≥«me
 
	gcom∑ª


701 c⁄° 
ønge
* 
	gbö¨y_£¨ch_åì_kî√l_2
<
	gdomaö
,
	gønge
,
	gmem_m™agî
,
	gcom∑ª
>::

702 
›î©‹
[] (

703 c⁄° 
domaö
& 
d


706  
ªtu∫_ª„ªn˚
(
åì_roŸ
,
d
);

711 
	gãm∂©e
 <

712 
ty≥«me
 
	gdomaö
,

713 
ty≥«me
 
	gønge
,

714 
ty≥«me
 
	gmem_m™agî
,

715 
ty≥«me
 
	gcom∑ª


717 
	gbö¨y_£¨ch_åì_kî√l_2
<
	gdomaö
,
	gønge
,
	gmem_m™agî
,
	gcom∑ª
>::

718 
sw≠
 (

719 
bö¨y_£¨ch_åì_kî√l_2
<
domaö
,
ønge
,
mem_m™agî
,
com∑ª
>& 
ôem


722 
	gpoﬁ
.
sw≠
(
ôem
.
poﬁ
);

724 
exch™ge
(
p
,
ôem
.p);

725 
exch™ge
(
comp
,
ôem
.comp);

727 
node
* 
	gåì_roŸ_ãmp
 = 
ôem
.
åì_roŸ
;

728 
	gåì_size_ãmp
 = 
ôem
.
åì_size
;

729 
node
* c⁄° 
	gNIL_ãmp
 = 
ôem
.
NIL
;

730 
node
* 
	gcuºít_ñemít_ãmp
 = 
ôem
.
cuºít_ñemít
;

731 
boﬁ
 
	g©_°¨t_ãmp
 = 
ôem
.
©_°¨t_
;

733 
	gôem
.
	gåì_roŸ
 = 
åì_roŸ
;

734 
	gôem
.
	gåì_size
 = 
åì_size
;

735 
	gôem
.
	gNIL
 = 
NIL
;

736 
	gôem
.
	gcuºít_ñemít
 = 
cuºít_ñemít
;

737 
	gôem
.
	g©_°¨t_
 = 
©_°¨t_
;

739 
	gåì_roŸ
 = 
åì_roŸ_ãmp
;

740 
	gåì_size
 = 
åì_size_ãmp
;

741 
	gNIL
 = 
NIL_ãmp
;

742 
	gcuºít_ñemít
 = 
cuºít_ñemít_ãmp
;

743 
	g©_°¨t_
 = 
©_°¨t_ãmp
;

748 
	gãm∂©e
 <

749 
ty≥«me
 
	gdomaö
,

750 
ty≥«me
 
	gønge
,

751 
ty≥«me
 
	gmem_m™agî
,

752 
ty≥«me
 
	gcom∑ª


754 
	gbö¨y_£¨ch_åì_kî√l_2
<
	gdomaö
,
	gønge
,
	gmem_m™agî
,
	gcom∑ª
>::

755 
	$ªmove_œ°_ö_‹dî
 (

756 
domaö
& 
d
,

757 
ønge
& 
r


760 
	`ªmove_bigge°_ñemít_ö_åì
(
åì_roŸ
,
d
,
r
);

761 --
åì_size
;

763 
	`ª£t
();

764 
	}
}

768 
	gãm∂©e
 <

769 
ty≥«me
 
	gdomaö
,

770 
ty≥«me
 
	gønge
,

771 
ty≥«me
 
	gmem_m™agî
,

772 
ty≥«me
 
	gcom∑ª


774 
	gbö¨y_£¨ch_åì_kî√l_2
<
	gdomaö
,
	gønge
,
	gmem_m™agî
,
	gcom∑ª
>::

775 
	$ªmove_cuºít_ñemít
 (

776 
domaö
& 
d
,

777 
ønge
& 
r


780 
node
* 
t
 = 
cuºít_ñemít
;

781 
	`move_√xt
();

782 
	`ªmove_‰om_åì
(
t
,t->
d
,d,
r
);

783 --
åì_size
;

784 
	}
}

788 
	gãm∂©e
 <

789 
ty≥«me
 
	gdomaö
,

790 
ty≥«me
 
	gønge
,

791 
ty≥«me
 
	gmem_m™agî
,

792 
ty≥«me
 
	gcom∑ª


794 
	gbö¨y_£¨ch_åì_kî√l_2
<
	gdomaö
,
	gønge
,
	gmem_m™agî
,
	gcom∑ª
>::

795 
	$posôi⁄_íumî©‹
 (

796 c⁄° 
domaö
& 
d


800 
	`ª£t
();

801 
©_°¨t_
 = 
Ál£
;

802 
node
* 
t
 = 
åì_roŸ
;

803 
node
* 
∑ª¡
 = 
NIL
;

804 
boﬁ
 
wít_À·
 = 
Ál£
;

805 
t
 !
NIL
)

807 i‡–
	`comp
(
d
 , 
t
->d ))

810 
∑ª¡
 = 
t
;

811 
t
 =Å->
À·
;

812 
wít_À·
 = 
åue
;

814 i‡(
	`comp
(
t
->
d
 , d))

817 
∑ª¡
 = 
t
;

818 
t
 =Å->
right
;

819 
wít_À·
 = 
Ál£
;

823 
cuºít_ñemít
 = 
t
;

830 i‡(
∑ª¡
 !
NIL
)

832 
cuºít_ñemít
 = 
∑ª¡
;

835 i‡(
wít_À·
)

841 
	`move_√xt
();

844 
	}
}

852 
	gãm∂©e
 <

853 
ty≥«me
 
	gdomaö
,

854 
ty≥«me
 
	gønge
,

855 
ty≥«me
 
	gmem_m™agî
,

856 
ty≥«me
 
	gcom∑ª


858 
boﬁ
 
	gbö¨y_£¨ch_åì_kî√l_2
<
	gdomaö
,
	gønge
,
	gmem_m™agî
,
	gcom∑ª
>::

859 
	$©_°¨t
 (

862  
©_°¨t_
;

863 
	}
}

867 
	gãm∂©e
 <

868 
ty≥«me
 
	gdomaö
,

869 
ty≥«me
 
	gønge
,

870 
ty≥«me
 
	gmem_m™agî
,

871 
ty≥«me
 
	gcom∑ª


873 
	gbö¨y_£¨ch_åì_kî√l_2
<
	gdomaö
,
	gønge
,
	gmem_m™agî
,
	gcom∑ª
>::

874 
	$ª£t
 (

877 
©_°¨t_
 = 
åue
;

878 
cuºít_ñemít
 = 0;

879 
	}
}

883 
	gãm∂©e
 <

884 
ty≥«me
 
	gdomaö
,

885 
ty≥«me
 
	gønge
,

886 
ty≥«me
 
	gmem_m™agî
,

887 
ty≥«me
 
	gcom∑ª


889 
boﬁ
 
	gbö¨y_£¨ch_åì_kî√l_2
<
	gdomaö
,
	gønge
,
	gmem_m™agî
,
	gcom∑ª
>::

890 
	$cuºít_ñemít_vÆid
 (

893  (
cuºít_ñemít
 != 0);

894 
	}
}

898 
	gãm∂©e
 <

899 
ty≥«me
 
	gdomaö
,

900 
ty≥«me
 
	gønge
,

901 
ty≥«me
 
	gmem_m™agî
,

902 
ty≥«me
 
	gcom∑ª


904 c⁄° 
	gm≠_∑ú
<
	gdomaö
,
	gønge
>& 
	gbö¨y_£¨ch_åì_kî√l_2
<domaö,ønge,
	gmem_m™agî
,
	gcom∑ª
>::

905 
	$ñemít
 (

908 
p
.
d
 = &(
cuºít_ñemít
->d);

909 
p
.
r
 = &(
cuºít_ñemít
->r);

910  
p
;

911 
	}
}

915 
	gãm∂©e
 <

916 
ty≥«me
 
	gdomaö
,

917 
ty≥«me
 
	gønge
,

918 
ty≥«me
 
	gmem_m™agî
,

919 
ty≥«me
 
	gcom∑ª


921 
	gm≠_∑ú
<
	gdomaö
,
	gønge
>& 
	gbö¨y_£¨ch_åì_kî√l_2
<domaö,ønge,
	gmem_m™agî
,
	gcom∑ª
>::

922 
	$ñemít
 (

925 
p
.
d
 = &(
cuºít_ñemít
->d);

926 
p
.
r
 = &(
cuºít_ñemít
->r);

927  
p
;

928 
	}
}

932 
	gãm∂©e
 <

933 
ty≥«me
 
	gdomaö
,

934 
ty≥«me
 
	gønge
,

935 
ty≥«me
 
	gmem_m™agî
,

936 
ty≥«me
 
	gcom∑ª


938 
boﬁ
 
	gbö¨y_£¨ch_åì_kî√l_2
<
	gdomaö
,
	gønge
,
	gmem_m™agî
,
	gcom∑ª
>::

939 
	$move_√xt
 (

943 i‡(
©_°¨t_
)

945 
©_°¨t_
 = 
Ál£
;

946 i‡(
åì_size
 == 0)

948  
Ál£
;

953 
cuºít_ñemít
 = 
åì_roŸ
;

954 
node
* 
ãmp
 = 
cuºít_ñemít
->
À·
;

955 
ãmp
 !
NIL
)

957 
cuºít_ñemít
 = 
ãmp
;

958 
ãmp
 = 
cuºít_ñemít
->
À·
;

960  
åue
;

965 i‡(
cuºít_ñemít
 == 0)

967  
Ál£
;

971 
boﬁ
 
wít_up
;

972 
boﬁ
 
‰om_À·
 = 
Ál£
;

974 i‡(
cuºít_ñemít
->
right
 !
NIL
)

977 
cuºít_ñemít
 = cuºít_ñemít->
right
;

978 
wít_up
 = 
Ál£
;

982 
wít_up
 = 
åue
;

983 
node
* 
∑ª¡
 = 
cuºít_ñemít
->parent;

984 i‡(
∑ª¡
 =
NIL
)

987 
cuºít_ñemít
 = 0;

988  
Ál£
;

991 
‰om_À·
 = (
∑ª¡
->
À·
 =
cuºít_ñemít
);

993 
cuºít_ñemít
 = 
∑ª¡
;

997 
åue
)

999 i‡(
wít_up
)

1001 i‡(
‰om_À·
)

1009 
node
* 
∑ª¡
 = 
cuºít_ñemít
->parent;

1010 
‰om_À·
 = (
∑ª¡
->
À·
 =
cuºít_ñemít
);

1011 
cuºít_ñemít
 = 
∑ª¡
;

1012 i‡(
cuºít_ñemít
 =
NIL
)

1016 
cuºít_ñemít
 = 0;

1017  
Ál£
;

1024 i‡(
cuºít_ñemít
->
À·
 !
NIL
)

1027 
wít_up
 = 
Ál£
;

1028 
cuºít_ñemít
 = cuºít_ñemít->
À·
;

1038  
åue
;

1041 
	}
}

1049 
	gãm∂©e
 <

1050 
ty≥«me
 
	gdomaö
,

1051 
ty≥«me
 
	gønge
,

1052 
ty≥«me
 
	gmem_m™agî
,

1053 
ty≥«me
 
	gcom∑ª


1055 
	gbö¨y_£¨ch_åì_kî√l_2
<
	gdomaö
,
	gønge
,
	gmem_m™agî
,
	gcom∑ª
>::

1056 
	$dñëe_åì
 (

1057 
node
* 
t


1060 i‡(
t
->
À·
 !
NIL
)

1061 
	`dñëe_åì
(
t
->
À·
);

1062 i‡(
t
->
right
 !
NIL
)

1063 
	`dñëe_åì
(
t
->
right
);

1064 
poﬁ
.
	`dóŒoˇã
(
t
);

1065 
	}
}

1069 
	gãm∂©e
 <

1070 
ty≥«me
 
	gdomaö
,

1071 
ty≥«me
 
	gønge
,

1072 
ty≥«me
 
	gmem_m™agî
,

1073 
ty≥«me
 
	gcom∑ª


1075 
	gbö¨y_£¨ch_åì_kî√l_2
<
	gdomaö
,
	gønge
,
	gmem_m™agî
,
	gcom∑ª
>::

1076 
	$rŸ©e_À·
 (

1077 
node
* 
t


1082 
node
* 
ãmp
 = 
t
->
right
;

1083 
t
->
right
 = 
ãmp
->
À·
;

1084 i‡(
ãmp
->
À·
 !
NIL
)

1085 
ãmp
->
À·
->
∑ª¡
 = 
t
;

1086 
ãmp
->
À·
 = 
t
;

1087 
ãmp
->
∑ª¡
 = 
t
->parent;

1090 i‡(
t
 =
åì_roŸ
)

1091 
åì_roŸ
 = 
ãmp
;

1095 i‡(
t
->
∑ª¡
->
À·
 ==Å)

1096 
t
->
∑ª¡
->
À·
 = 
ãmp
;

1098 
t
->
∑ª¡
->
right
 = 
ãmp
;

1101 
t
->
∑ª¡
 = 
ãmp
;

1102 
	}
}

1106 
	gãm∂©e
 <

1107 
ty≥«me
 
	gdomaö
,

1108 
ty≥«me
 
	gønge
,

1109 
ty≥«me
 
	gmem_m™agî
,

1110 
ty≥«me
 
	gcom∑ª


1112 
	gbö¨y_£¨ch_åì_kî√l_2
<
	gdomaö
,
	gønge
,
	gmem_m™agî
,
	gcom∑ª
>::

1113 
	$rŸ©e_right
 (

1114 
node
* 
t


1118 
node
* 
ãmp
 = 
t
->
À·
;

1119 
t
->
À·
 = 
ãmp
->
right
;

1120 i‡(
ãmp
->
right
 !
NIL
)

1121 
ãmp
->
right
->
∑ª¡
 = 
t
;

1122 
ãmp
->
right
 = 
t
;

1123 
ãmp
->
∑ª¡
 = 
t
->parent;

1125 i‡(
t
 =
åì_roŸ
)

1126 
åì_roŸ
 = 
ãmp
;

1130 i‡(
t
->
∑ª¡
->
À·
 ==Å)

1131 
t
->
∑ª¡
->
À·
 = 
ãmp
;

1133 
t
->
∑ª¡
->
right
 = 
ãmp
;

1136 
t
->
∑ª¡
 = 
ãmp
;

1137 
	}
}

1142 
	gãm∂©e
 <

1143 
ty≥«me
 
	gdomaö
,

1144 
ty≥«me
 
	gønge
,

1145 
ty≥«me
 
	gmem_m™agî
,

1146 
ty≥«me
 
	gcom∑ª


1148 
	gbö¨y_£¨ch_åì_kî√l_2
<
	gdomaö
,
	gønge
,
	gmem_m™agî
,
	gcom∑ª
>::

1149 
	$doubÀ_rŸ©e_right
 (

1150 
node
* 
t


1155 
node
& 
ãmp
 = *(
t
->
À·
->
right
);

1156 
t
->
À·
 = 
ãmp
.
right
;

1157 
ãmp
.
right
->
∑ª¡
 = 
t
;

1158 
ãmp
.
À·
->
∑ª¡
 =Åemp.parent;

1159 
ãmp
.
∑ª¡
->
right
 =Åemp.
À·
;

1160 
ãmp
.
∑ª¡
->parent = &temp;

1161 
ãmp
.
right
 = 
t
;

1162 
ãmp
.
À·
 =Åemp.
∑ª¡
;

1163 
ãmp
.
∑ª¡
 = 
t
->parent;

1166 i‡(
åì_roŸ
 =
t
)

1167 
åì_roŸ
 = &
ãmp
;

1171 i‡(
t
->
∑ª¡
->
À·
 ==Å)

1172 
t
->
∑ª¡
->
À·
 = &
ãmp
;

1174 
t
->
∑ª¡
->
right
 = &
ãmp
;

1176 
t
->
∑ª¡
 = &
ãmp
;

1177 
	}
}

1181 
	gãm∂©e
 <

1182 
ty≥«me
 
	gdomaö
,

1183 
ty≥«me
 
	gønge
,

1184 
ty≥«me
 
	gmem_m™agî
,

1185 
ty≥«me
 
	gcom∑ª


1187 
	gbö¨y_£¨ch_åì_kî√l_2
<
	gdomaö
,
	gønge
,
	gmem_m™agî
,
	gcom∑ª
>::

1188 
	$doubÀ_rŸ©e_À·
 (

1189 
node
* 
t


1195 
node
& 
ãmp
 = *(
t
->
right
->
À·
);

1196 
t
->
right
 = 
ãmp
.
À·
;

1197 
ãmp
.
À·
->
∑ª¡
 = 
t
;

1198 
ãmp
.
right
->
∑ª¡
 =Åemp.parent;

1199 
ãmp
.
∑ª¡
->
À·
 =Åemp.
right
;

1200 
ãmp
.
∑ª¡
->parent = &temp;

1201 
ãmp
.
À·
 = 
t
;

1202 
ãmp
.
right
 =Åemp.
∑ª¡
;

1203 
ãmp
.
∑ª¡
 = 
t
->parent;

1206 i‡(
åì_roŸ
 =
t
)

1207 
åì_roŸ
 = &
ãmp
;

1211 i‡(
t
->
∑ª¡
->
À·
 ==Å)

1212 
t
->
∑ª¡
->
À·
 = &
ãmp
;

1214 
t
->
∑ª¡
->
right
 = &
ãmp
;

1216 
t
->
∑ª¡
 = &
ãmp
;

1217 
	}
}

1221 
	gãm∂©e
 <

1222 
ty≥«me
 
	gdomaö
,

1223 
ty≥«me
 
	gønge
,

1224 
ty≥«me
 
	gmem_m™agî
,

1225 
ty≥«me
 
	gcom∑ª


1227 
	gbö¨y_£¨ch_åì_kî√l_2
<
	gdomaö
,
	gønge
,
	gmem_m™agî
,
	gcom∑ª
>::

1228 
	$ªmove_bigge°_ñemít_ö_åì
 (

1229 
node
* 
t
,

1230 
domaö
& 
d
,

1231 
ønge
& 
r


1235 
node
* 
√xt
 = 
t
->
right
;

1236 
node
* 
chûd
;

1238 i‡(
√xt
 =
NIL
)

1241 i‡(
t
->
∑ª¡
->
right
 ==Å)

1242 
chûd
 = 
t
->
∑ª¡
->
right
 =Å->
À·
;

1244 
chûd
 = 
t
->
∑ª¡
->
À·
 =Å->left;

1247 i‡(
t
 =
åì_roŸ
)

1248 
åì_roŸ
 = 
chûd
;

1255 
t
 = 
√xt
;

1256 
√xt
 =Çext->
right
;

1257 } 
√xt
 !
NIL
);

1259 
chûd
 = 
t
->
∑ª¡
->
right
 =Å->
À·
;

1264 
	`exch™ge
(
d
,
t
->d);

1265 
	`exch™ge
(
r
,
t
->r);

1268 
chûd
->
∑ª¡
 = 
t
->parent;

1271 i‡(
t
->
cﬁ‹
 =
bœck
)

1272 
	`fix_a·î_ªmove
(
chûd
);

1275 
poﬁ
.
	`dóŒoˇã
(
t
);

1276 
	}
}

1280 
	gãm∂©e
 <

1281 
ty≥«me
 
	gdomaö
,

1282 
ty≥«me
 
	gønge
,

1283 
ty≥«me
 
	gmem_m™agî
,

1284 
ty≥«me
 
	gcom∑ª


1286 
boﬁ
 
	gbö¨y_£¨ch_åì_kî√l_2
<
	gdomaö
,
	gønge
,
	gmem_m™agî
,
	gcom∑ª
>::

1287 
	$ªmove_Àa°_ñemít_ö_åì
 (

1288 
node
* 
t
,

1289 
domaö
& 
d
,

1290 
ønge
& 
r


1294 
node
* 
√xt
 = 
t
->
À·
;

1295 
node
* 
chûd
;

1297 i‡(
√xt
 =
NIL
)

1300 i‡(
t
->
∑ª¡
->
À·
 ==Å)

1301 
chûd
 = 
t
->
∑ª¡
->
À·
 =Å->
right
;

1303 
chûd
 = 
t
->
∑ª¡
->
right
 =Å->right;

1306 i‡(
t
 =
åì_roŸ
)

1307 
åì_roŸ
 = 
chûd
;

1314 
t
 = 
√xt
;

1315 
√xt
 =Çext->
À·
;

1316 } 
√xt
 !
NIL
);

1318 
chûd
 = 
t
->
∑ª¡
->
À·
 =Å->
right
;

1323 
	`exch™ge
(
d
,
t
->d);

1324 
	`exch™ge
(
r
,
t
->r);

1327 
chûd
->
∑ª¡
 = 
t
->parent;

1330 i‡(
t
->
cﬁ‹
 =
bœck
)

1331 
	`fix_a·î_ªmove
(
chûd
);

1333 
boﬁ
 
rvÆue
 = (
t
 =
cuºít_ñemít
);

1335 
poﬁ
.
	`dóŒoˇã
(
t
);

1336  
rvÆue
;

1337 
	}
}

1341 
	gãm∂©e
 <

1342 
ty≥«me
 
	gdomaö
,

1343 
ty≥«me
 
	gønge
,

1344 
ty≥«me
 
	gmem_m™agî
,

1345 
ty≥«me
 
	gcom∑ª


1347 
	gbö¨y_£¨ch_åì_kî√l_2
<
	gdomaö
,
	gønge
,
	gmem_m™agî
,
	gcom∑ª
>::

1348 
	$add_to_åì
 (

1349 
node
* 
t
,

1350 
domaö
& 
d
,

1351 
ønge
& 
r


1355 
node
* 
∑ª¡
;

1358 
åue
)

1360 
∑ª¡
 = 
t
;

1362 i‡(
	`comp
(
d
 , 
t
->d))

1364 
t
 =Å->
À·
;

1365 i‡(
t
 =
NIL
)

1367 
t
 = 
∑ª¡
->
À·
 = 
poﬁ
.
	`Æloˇã
();

1374 
t
 =Å->
right
;

1375 i‡(
t
 =
NIL
)

1377 
t
 = 
∑ª¡
->
right
 = 
poﬁ
.
	`Æloˇã
();

1386 
t
->
∑ª¡
 =Öarent;

1387 
t
->
À·
 = 
NIL
;

1388 
t
->
right
 = 
NIL
;

1389 
t
->
cﬁ‹
 = 
ªd
;

1390 
	`exch™ge
(
t
->
d
,d);

1391 
	`exch™ge
(
t
->
r
,r);

1395 
	`fix_a·î_add
(
t
);

1396 
	}
}

1400 
	gãm∂©e
 <

1401 
ty≥«me
 
	gdomaö
,

1402 
ty≥«me
 
	gønge
,

1403 
ty≥«me
 
	gmem_m™agî
,

1404 
ty≥«me
 
	gcom∑ª


1406 
	gbö¨y_£¨ch_åì_kî√l_2
<
	gdomaö
,
	gønge
,
	gmem_m™agî
,
	gcom∑ª
>::

1407 
	$ªmove_‰om_åì
 (

1408 
node
* 
t
,

1409 c⁄° 
domaö
& 
d
,

1410 
domaö
& 
d_c›y
,

1411 
ønge
& 
r


1414 
åue
)

1416 i‡–
	`comp
(
d
 , 
t
->d) )

1419 
t
 =Å->
À·
;

1421 i‡(
	`comp
(
t
->
d
 , d))

1424 
t
 =Å->
right
;

1431 
	`exch™ge
(
d_c›y
,
t
->
d
);

1432 
	`exch™ge
(
r
,
t
->r);

1434 i‡(
t
->
À·
 =
NIL
)

1438 
node
* 
∑ª¡
 = 
t
->parent;

1444 i‡(
∑ª¡
->
À·
 =
t
)

1445 
∑ª¡
->
À·
 = 
t
->
right
;

1447 
∑ª¡
->
right
 = 
t
->right;

1448 
t
->
right
->
∑ª¡
 =Öarent;

1451 i‡(
t
 =
åì_roŸ
)

1452 
åì_roŸ
 = 
t
->
right
;

1454 i‡(
t
->
cﬁ‹
 =
bœck
)

1455 
	`fix_a·î_ªmove
(
t
->
right
);

1458 
poﬁ
.
	`dóŒoˇã
(
t
);

1460 i‡(
t
->
right
 =
NIL
)

1464 
node
* 
∑ª¡
 = 
t
->parent;

1467 i‡(
∑ª¡
->
À·
 =
t
)

1468 
∑ª¡
->
À·
 = 
t
->left;

1470 
∑ª¡
->
right
 = 
t
->
À·
;

1471 
t
->
À·
->
∑ª¡
 =Öarent;

1474 i‡(
t
 =
åì_roŸ
)

1475 
åì_roŸ
 = 
t
->
À·
;

1477 i‡(
t
->
cﬁ‹
 =
bœck
)

1478 
	`fix_a·î_ªmove
(
t
->
À·
);

1481 
poﬁ
.
	`dóŒoˇã
(
t
);

1488 i‡(
	`ªmove_Àa°_ñemít_ö_åì
(
t
->
right
,t->
d
,t->
r
))

1492 
cuºít_ñemít
 = 
t
;

1500 
	}
}

1504 
	gãm∂©e
 <

1505 
ty≥«me
 
	gdomaö
,

1506 
ty≥«me
 
	gønge
,

1507 
ty≥«me
 
	gmem_m™agî
,

1508 
ty≥«me
 
	gcom∑ª


1510 
	gbö¨y_£¨ch_åì_kî√l_2
<
	gdomaö
,
	gønge
,
	gmem_m™agî
,
	gcom∑ª
>::

1511 
	$ªmove_‰om_åì
 (

1512 
node
* 
t
,

1513 c⁄° 
domaö
& 
d


1516 
åue
)

1518 i‡–
	`comp
(
d
 , 
t
->d) )

1521 
t
 =Å->
À·
;

1523 i‡(
	`comp
(
t
->
d
 , d))

1526 
t
 =Å->
right
;

1533 i‡(
t
->
À·
 =
NIL
)

1537 
node
* 
∑ª¡
 = 
t
->parent;

1542 i‡(
∑ª¡
->
À·
 =
t
)

1543 
∑ª¡
->
À·
 = 
t
->
right
;

1545 
∑ª¡
->
right
 = 
t
->right;

1546 
t
->
right
->
∑ª¡
 =Öarent;

1549 i‡(
t
 =
åì_roŸ
)

1550 
åì_roŸ
 = 
t
->
right
;

1552 i‡(
t
->
cﬁ‹
 =
bœck
)

1553 
	`fix_a·î_ªmove
(
t
->
right
);

1556 
poﬁ
.
	`dóŒoˇã
(
t
);

1558 i‡(
t
->
right
 =
NIL
)

1562 
node
* 
∑ª¡
 = 
t
->parent;

1565 i‡(
∑ª¡
->
À·
 =
t
)

1566 
∑ª¡
->
À·
 = 
t
->left;

1568 
∑ª¡
->
right
 = 
t
->
À·
;

1569 
t
->
À·
->
∑ª¡
 =Öarent;

1572 i‡(
t
 =
åì_roŸ
)

1573 
åì_roŸ
 = 
t
->
À·
;

1575 i‡(
t
->
cﬁ‹
 =
bœck
)

1576 
	`fix_a·î_ªmove
(
t
->
À·
);

1579 
poﬁ
.
	`dóŒoˇã
(
t
);

1586 
	`ªmove_Àa°_ñemít_ö_åì
(
t
->
right
,t->
d
,t->
r
);

1594 
	}
}

1598 
	gãm∂©e
 <

1599 
ty≥«me
 
	gdomaö
,

1600 
ty≥«me
 
	gønge
,

1601 
ty≥«me
 
	gmem_m™agî
,

1602 
ty≥«me
 
	gcom∑ª


1604 
ønge
* 
	gbö¨y_£¨ch_åì_kî√l_2
<
	gdomaö
,
	gønge
,
	gmem_m™agî
,
	gcom∑ª
>::

1605 
	$ªtu∫_ª„ªn˚
 (

1606 
node
* 
t
,

1607 c⁄° 
domaö
& 
d


1610 
t
 !
NIL
)

1612 i‡–
	`comp
(
d
 , 
t
->d ))

1615 
t
 =Å->
À·
;

1617 i‡(
	`comp
(
t
->
d
 , d))

1620 
t
 =Å->
right
;

1625  &(
t
->
r
);

1629 
	}
}

1633 
	gãm∂©e
 <

1634 
ty≥«me
 
	gdomaö
,

1635 
ty≥«me
 
	gønge
,

1636 
ty≥«me
 
	gmem_m™agî
,

1637 
ty≥«me
 
	gcom∑ª


1639 c⁄° 
ønge
* 
	gbö¨y_£¨ch_åì_kî√l_2
<
	gdomaö
,
	gønge
,
	gmem_m™agî
,
	gcom∑ª
>::

1640 
	$ªtu∫_ª„ªn˚
 (

1641 c⁄° 
node
* 
t
,

1642 c⁄° 
domaö
& 
d


1645 
t
 !
NIL
)

1647 i‡–
	`comp
(
d
 , 
t
->d) )

1650 
t
 =Å->
À·
;

1652 i‡(
	`comp
(
t
->
d
 , d))

1655 
t
 =Å->
right
;

1660  &(
t
->
r
);

1664 
	}
}

1668 
	gãm∂©e
 <

1669 
ty≥«me
 
	gdomaö
,

1670 
ty≥«me
 
	gønge
,

1671 
ty≥«me
 
	gmem_m™agî
,

1672 
ty≥«me
 
	gcom∑ª


1674 
	gbö¨y_£¨ch_åì_kî√l_2
<
	gdomaö
,
	gønge
,
	gmem_m™agî
,
	gcom∑ª
>::

1675 
	$fix_a·î_add
 (

1676 
node
* 
t


1680 
t
->
∑ª¡
->
cﬁ‹
 =
ªd
)

1682 
node
& 
gønd∑ª¡
 = *(
t
->
∑ª¡
->parent);

1685 i‡(
gønd∑ª¡
.
À·
->
cﬁ‹
 =gønd∑ª¡.
right
->color)

1687 
gønd∑ª¡
.
cﬁ‹
 = 
ªd
;

1688 
gønd∑ª¡
.
À·
->
cﬁ‹
 = 
bœck
;

1689 
gønd∑ª¡
.
right
->
cﬁ‹
 = 
bœck
;

1690 
t
 = &
gønd∑ª¡
;

1695 i‡(
t
 =t->
∑ª¡
->
À·
)

1698 i‡(
t
->
∑ª¡
 =
gønd∑ª¡
.
À·
)

1700 
gønd∑ª¡
.
cﬁ‹
 = 
ªd
;

1701 
gønd∑ª¡
.
À·
->
cﬁ‹
 = 
bœck
;

1702 
	`rŸ©e_right
(&
gønd∑ª¡
);

1707 
t
->
cﬁ‹
 = 
bœck
;

1708 
gønd∑ª¡
.
cﬁ‹
 = 
ªd
;

1709 
	`doubÀ_rŸ©e_À·
(&
gønd∑ª¡
);

1716 i‡(
t
->
∑ª¡
 =
gønd∑ª¡
.
À·
)

1718 
t
->
cﬁ‹
 = 
bœck
;

1719 
gønd∑ª¡
.
cﬁ‹
 = 
ªd
;

1720 
	`doubÀ_rŸ©e_right
(&
gønd∑ª¡
);

1725 
gønd∑ª¡
.
cﬁ‹
 = 
ªd
;

1726 
gønd∑ª¡
.
right
->
cﬁ‹
 = 
bœck
;

1727 
	`rŸ©e_À·
(&
gønd∑ª¡
);

1733 
åì_roŸ
->
cﬁ‹
 = 
bœck
;

1734 
	}
}

1738 
	gãm∂©e
 <

1739 
ty≥«me
 
	gdomaö
,

1740 
ty≥«me
 
	gønge
,

1741 
ty≥«me
 
	gmem_m™agî
,

1742 
ty≥«me
 
	gcom∑ª


1744 
	gbö¨y_£¨ch_åì_kî√l_2
<
	gdomaö
,
	gønge
,
	gmem_m™agî
,
	gcom∑ª
>::

1745 
	$fix_a·î_ªmove
 (

1746 
node
* 
t


1750 
t
 !
åì_roŸ
 &&Å->
cﬁ‹
 =
bœck
)

1752 i‡(
t
->
∑ª¡
->
À·
 ==Å)

1754 
node
* 
siblög
 = 
t
->
∑ª¡
->
right
;

1755 i‡(
siblög
->
cﬁ‹
 =
ªd
)

1757 
siblög
->
cﬁ‹
 = 
bœck
;

1758 
t
->
∑ª¡
->
cﬁ‹
 = 
ªd
;

1759 
	`rŸ©e_À·
(
t
->
∑ª¡
);

1760 
siblög
 = 
t
->
∑ª¡
->
right
;

1763 i‡(
siblög
->
À·
->
cﬁ‹
 =
bœck
 && siblög->
right
->color == black)

1765 
siblög
->
cﬁ‹
 = 
ªd
;

1766 
t
 =Å->
∑ª¡
;

1770 i‡(
siblög
->
right
->
cﬁ‹
 =
bœck
)

1772 
siblög
->
À·
->
cﬁ‹
 = 
bœck
;

1773 
siblög
->
cﬁ‹
 = 
ªd
;

1774 
	`rŸ©e_right
(
siblög
);

1775 
siblög
 = 
t
->
∑ª¡
->
right
;

1778 
siblög
->
cﬁ‹
 = 
t
->
∑ª¡
->color;

1779 
t
->
∑ª¡
->
cﬁ‹
 = 
bœck
;

1780 
siblög
->
right
->
cﬁ‹
 = 
bœck
;

1781 
	`rŸ©e_À·
(
t
->
∑ª¡
);

1782 
t
 = 
åì_roŸ
;

1791 
node
* 
siblög
 = 
t
->
∑ª¡
->
À·
;

1792 i‡(
siblög
->
cﬁ‹
 =
ªd
)

1794 
siblög
->
cﬁ‹
 = 
bœck
;

1795 
t
->
∑ª¡
->
cﬁ‹
 = 
ªd
;

1796 
	`rŸ©e_right
(
t
->
∑ª¡
);

1797 
siblög
 = 
t
->
∑ª¡
->
À·
;

1800 i‡(
siblög
->
À·
->
cﬁ‹
 =
bœck
 && siblög->
right
->color == black)

1802 
siblög
->
cﬁ‹
 = 
ªd
;

1803 
t
 =Å->
∑ª¡
;

1807 i‡(
siblög
->
À·
->
cﬁ‹
 =
bœck
)

1809 
siblög
->
right
->
cﬁ‹
 = 
bœck
;

1810 
siblög
->
cﬁ‹
 = 
ªd
;

1811 
	`rŸ©e_À·
(
siblög
);

1812 
siblög
 = 
t
->
∑ª¡
->
À·
;

1815 
siblög
->
cﬁ‹
 = 
t
->
∑ª¡
->color;

1816 
t
->
∑ª¡
->
cﬁ‹
 = 
bœck
;

1817 
siblög
->
À·
->
cﬁ‹
 = 
bœck
;

1818 
	`rŸ©e_right
(
t
->
∑ª¡
);

1819 
t
 = 
åì_roŸ
;

1827 
t
->
cﬁ‹
 = 
bœck
;

1829 
	}
}

1833 
	gãm∂©e
 <

1834 
ty≥«me
 
	gdomaö
,

1835 
ty≥«me
 
	gønge
,

1836 
ty≥«me
 
	gmem_m™agî
,

1837 
ty≥«me
 
	gcom∑ª


1839 
	gbö¨y_£¨ch_åì_kî√l_2
<
	gdomaö
,
	gønge
,
	gmem_m™agî
,
	gcom∑ª
>::

1840 
	$åì_height
 (

1841 
node
* 
t


1844 i‡(
t
 =
NIL
)

1847 
height1
 = 
	`åì_height
(
t
->
À·
);

1848 
height2
 = 
	`åì_height
(
t
->
right
);

1849 i‡(
height1
 > 
height2
)

1850  
height1
 + 1;

1852  
height2
 + 1;

1853 
	}
}

1857 
	gãm∂©e
 <

1858 
ty≥«me
 
	gdomaö
,

1859 
ty≥«me
 
	gønge
,

1860 
ty≥«me
 
	gmem_m™agî
,

1861 
ty≥«me
 
	gcom∑ª


1863 
	gbö¨y_£¨ch_åì_kî√l_2
<
	gdomaö
,
	gønge
,
	gmem_m™agî
,
	gcom∑ª
>::

1864 
	$gë_cou¡
 (

1865 c⁄° 
domaö
& 
d
,

1866 
node
* 
åì_roŸ


1869 i‡(
åì_roŸ
 !
NIL
)

1871 i‡(
	`comp
(
d
 , 
åì_roŸ
->d))

1874  
	`gë_cou¡
(
d
,
åì_roŸ
->
À·
);

1876 i‡(
	`comp
(
åì_roŸ
->
d
 , d))

1879  
	`gë_cou¡
(
d
,
åì_roŸ
->
right
);

1884  
	`gë_cou¡
(
d
,
åì_roŸ
->
À·
)

1885 + 
	`gë_cou¡
(
d
,
åì_roŸ
->
right
)

1890 
	}
}

	@viper/concurrentqueue-src/benchmarks/dlib/binary_search_tree/binary_search_tree_kernel_abstract.h

3 #unde‡
DLIB_BINARY_SEARCH_TREE_KERNEl_ABSTRACT_


4 #ifde‡
DLIB_BINARY_SEARCH_TREE_KERNEl_ABSTRACT_


6 
	~"../öãrÁ˚s/m≠_∑ú.h
"

7 
	~"../öãrÁ˚s/íumîabÀ.h
"

8 
	~"../öãrÁ˚s/ªmovî.h
"

9 
	~"../£rülize.h
"

10 
	~"../Ægs.h
"

11 
	~<fun˘i⁄Æ
>

13 
«me•a˚
 
	gdlib


16 
	gãm∂©e
 <

17 
ty≥«me
 
	gdomaö
,

18 
ty≥«me
 
	gønge
,

19 
ty≥«me
 
	gmem_m™agî
 = 
deÁu…_mem‹y_m™agî
,

20 
ty≥«me
 
	gcom∑ª
 = 
°d
::
Àss
<
domaö
>

22 
˛ass
 
bö¨y_£¨ch_åì
 : 
public
 
íumîabÀ
<
m≠_∑ú
<
domaö
,
	gønge
> >,

23 
public
 
	gasc_∑ú_ªmovî
<
	gdomaö
,
	gønge
,
	gcom∑ª
>

78 
	gpublic
:

80 
domaö
 
	tdomaö_ty≥
;

81 
ønge
 
	tønge_ty≥
;

82 
com∑ª
 
	tcom∑ª_ty≥
;

83 
mem_m™agî
 
	tmem_m™agî_ty≥
;

85 
bö¨y_£¨ch_åì
(

95 
	gvútuÆ
 ~
bö¨y_£¨ch_åì
(

102 
˛ór
(

114 
height
 (

122 
cou¡
 (

123 c⁄° 
domaö
& 
d


131 
add
 (

132 
domaö
& 
d
,

133 
ønge
& 
r


154 
ªmove
 (

155 c⁄° 
domaö
& 
d
,

156 
domaö
& 
d_c›y
,

157 
ønge
& 
r


174 
de°roy
 (

175 c⁄° 
domaö
& 
d


189 
ªmove_œ°_ö_‹dî
 (

190 
domaö
& 
d
,

191 
ønge
& 
r


205 
ªmove_cuºít_ñemít
 (

206 
domaö
& 
d
,

207 
ønge
& 
r


223 
posôi⁄_íumî©‹
 (

224 c⁄° 
domaö
& 
d


239 c⁄° 
ønge
* 
	g›î©‹
[] (

240 c⁄° 
	gdomaö
& 
	gd


252 
ønge
* 
	g›î©‹
[] (

253 c⁄° 
	gdomaö
& 
	gd


265 
sw≠
 (

266 
bö¨y_£¨ch_åì
& 
ôem


273 
	g¥iv©e
:

276 
bö¨y_£¨ch_åì
(binary_search_tree&);

277 
	gbö¨y_£¨ch_åì
& 
	g›î©‹
=(
bö¨y_£¨ch_åì
&);

281 
	gãm∂©e
 <

282 
ty≥«me
 
	gdomaö
,

283 
ty≥«me
 
	gønge
,

284 
ty≥«me
 
	gmem_m™agî
,

285 
ty≥«me
 
	gcom∑ª


287 
ölöe
 
sw≠
 (

288 
bö¨y_£¨ch_åì
<
domaö
,
ønge
,
mem_m™agî
,
com∑ª
>& 
a
,

289 
bö¨y_£¨ch_åì
<
domaö
,
ønge
,
mem_m™agî
,
com∑ª
>& 
b


290 Ë{ 
	ga
.
sw≠
(
b
); }

295 
	gãm∂©e
 <

296 
ty≥«me
 
	gdomaö
,

297 
ty≥«me
 
	gønge
,

298 
ty≥«me
 
	gmem_m™agî
,

299 
ty≥«me
 
	gcom∑ª


301 
de£rülize
 (

302 
bö¨y_£¨ch_åì
<
domaö
,
ønge
,
mem_m™agî
,
com∑ª
>& 
ôem
,

303 
°d
::
i°ªam
& 
ö


	@viper/concurrentqueue-src/benchmarks/dlib/binary_search_tree/binary_search_tree_kernel_c.h

3 #i‚de‡
DLIB_BINARY_SEARCH_TREE_KERNEl_C_


4 
	#DLIB_BINARY_SEARCH_TREE_KERNEl_C_


	)

6 
	~"../öãrÁ˚s/m≠_∑ú.h
"

7 
	~"bö¨y_£¨ch_åì_kî√l_ab°ø˘.h
"

8 
	~"../Ægs.h
"

9 
	~"../as£π.h
"

11 
«me•a˚
 
	gdlib


14 
	gãm∂©e
 <

15 
ty≥«me
 
	gb°_ba£


17 ˛as†
	cbö¨y_£¨ch_åì_kî√l_c
 : 
public
 
b°_ba£


19 
ty≥«me
 
	tb°_ba£
::
	tdomaö_ty≥
 
	tdomaö
;

20 
ty≥«me
 
	tb°_ba£
::
	tønge_ty≥
 
	tønge
;

22 
	gpublic
:

24 
bö¨y_£¨ch_åì_kî√l_c
 () {}

26 
ªmove
 (

27 c⁄° 
domaö
& 
d
,

28 
domaö
& 
d_c›y
,

29 
ønge
& 
r


32 
de°roy
 (

33 c⁄° 
domaö
& 
d


36 
add
 (

37 
domaö
& 
d
,

38 
ønge
& 
r


41 
ªmove_™y
 (

42 
domaö
& 
d
,

43 
ønge
& 
r


46 c⁄° 
	gm≠_∑ú
<
	gdomaö
, 
	gønge
>& 
ñemít
(

49 
DLIB_CASSERT
(
this
->
cuºít_ñemít_vÆid
(Ë=
åue
,

52 << "\n\âhis: " << 
this


55  
	gb°_ba£
::
ñemít
();

58 
	gm≠_∑ú
<
	gdomaö
, 
	gønge
>& 
ñemít
(

61 
DLIB_CASSERT
(
this
->
cuºít_ñemít_vÆid
(Ë=
åue
,

64 << "\n\âhis: " << 
this


67  
	gb°_ba£
::
ñemít
();

70 
ªmove_œ°_ö_‹dî
 (

71 
domaö
& 
d
,

72 
ønge
& 
r


75 
ªmove_cuºít_ñemít
 (

76 
domaö
& 
d
,

77 
ønge
& 
r


84 
	gãm∂©e
 <

85 
ty≥«me
 
	gb°_ba£


87 
ölöe
 
sw≠
 (

88 
bö¨y_£¨ch_åì_kî√l_c
<
b°_ba£
>& 
a
,

89 
bö¨y_£¨ch_åì_kî√l_c
<
b°_ba£
>& 
b


90 Ë{ 
	ga
.
sw≠
(
b
); }

98 
	gãm∂©e
 <

99 
ty≥«me
 
	gb°_ba£


101 
	gbö¨y_£¨ch_åì_kî√l_c
<
	gb°_ba£
>::

102 
	$add
 (

103 
domaö
& 
d
,

104 
ønge
& 
r


107 
	`DLIB_CASSERT
–
°©ic_ˇ°
<c⁄° *>(&
d
Ë!°©ic_ˇ°<*>(&
r
),

110 << "\n\âhis: " << 
this


111 << "\n\t&d: " << &
d


112 << "\n\t&r: " << &
r


113 << "\n\tsize(): " << 
this
->
	`size
()

116 
b°_ba£
::
	`add
(
d
,
r
);

117 
	}
}

121 
	gãm∂©e
 <

122 
ty≥«me
 
	gb°_ba£


124 
	gbö¨y_£¨ch_åì_kî√l_c
<
	gb°_ba£
>::

125 
	$de°roy
 (

126 c⁄° 
domaö
& 
d


129 
	`DLIB_CASSERT
(
this
->
›î©‹
[](
d
) != 0,

132 << "\n\âhis: " << 
this


133 << "\n\t&d: " << &
d


136 
b°_ba£
::
	`de°roy
(
d
);

137 
	}
}

141 
	gãm∂©e
 <

142 
ty≥«me
 
	gb°_ba£


144 
	gbö¨y_£¨ch_åì_kî√l_c
<
	gb°_ba£
>::

145 
	$ªmove
 (

146 c⁄° 
domaö
& 
d
,

147 
domaö
& 
d_c›y
,

148 
ønge
& 
r


151 
	`DLIB_CASSERT
(
this
->
›î©‹
[](
d
) != 0 &&

152 (
°©ic_ˇ°
<c⁄° *>(&
d
Ë!°©ic_ˇ°<*>(&
d_c›y
)) &&

153 (
°©ic_ˇ°
<c⁄° *>(&
d
Ë!°©ic_ˇ°<*>(&
r
)) &&

154 (
°©ic_ˇ°
<c⁄° *>(&
r
Ë!°©ic_ˇ°<*>(&
d_c›y
)),

157 << "\n\âhis: " << 
this


158 << "\n\t&d: " << &
d


159 << "\n\t&d_c›y: " << &
d_c›y


160 << "\n\t&r: " << &
r


163 
b°_ba£
::
	`ªmove
(
d
,
d_c›y
,
r
);

164 
	}
}

168 
	gãm∂©e
 <

169 
ty≥«me
 
	gb°_ba£


171 
	gbö¨y_£¨ch_åì_kî√l_c
<
	gb°_ba£
>::

172 
	$ªmove_™y
(

173 
domaö
& 
d
,

174 
ønge
& 
r


177 
	`DLIB_CASSERT
(
this
->
	`size
() != 0 &&

178 (
°©ic_ˇ°
<c⁄° *>(&
d
Ë!°©ic_ˇ°<*>(&
r
)),

181 << "\n\âhis: " << 
this


182 << "\n\t&d: " << &
d


183 << "\n\t&r: " << &
r


186 
b°_ba£
::
	`ªmove_™y
(
d
,
r
);

187 
	}
}

191 
	gãm∂©e
 <

192 
ty≥«me
 
	gb°_ba£


194 
	gbö¨y_£¨ch_åì_kî√l_c
<
	gb°_ba£
>::

195 
	$ªmove_œ°_ö_‹dî
 (

196 
domaö
& 
d
,

197 
ønge
& 
r


200 
	`DLIB_CASSERT
(
this
->
	`size
() > 0,

203 << "\n\âhis: " << 
this


206 
b°_ba£
::
	`ªmove_œ°_ö_‹dî
(
d
,
r
);

207 
	}
}

211 
	gãm∂©e
 <

212 
ty≥«me
 
	gb°_ba£


214 
	gbö¨y_£¨ch_åì_kî√l_c
<
	gb°_ba£
>::

215 
	$ªmove_cuºít_ñemít
 (

216 
domaö
& 
d
,

217 
ønge
& 
r


220 
	`DLIB_CASSERT
(
this
->
	`cuºít_ñemít_vÆid
(Ë=
åue
,

223 << "\n\âhis: " << 
this


226 
b°_ba£
::
	`ªmove_cuºít_ñemít
(
d
,
r
);

227 
	}
}

	@viper/concurrentqueue-src/benchmarks/dlib/bound_function_pointer.h

3 #i‚de‡
DLIB_BOUND_FUNCTION_POINTEr_


4 
	#DLIB_BOUND_FUNCTION_POINTEr_


	)

6 
	~"bound_fun˘i⁄_poöãr/bound_fun˘i⁄_poöãr_kî√l_1.h
"

	@viper/concurrentqueue-src/benchmarks/dlib/bound_function_pointer/bound_function_pointer_kernel_1.h

3 #i‚de‡
DLIB_BOUND_FUNCTION_POINTER_KERNEl_1_


4 
	#DLIB_BOUND_FUNCTION_POINTER_KERNEl_1_


	)

6 
	~"../Ægs.h
"

7 
	~"../membî_fun˘i⁄_poöãr.h
"

8 
	~"bound_fun˘i⁄_poöãr_kî√l_ab°ø˘.h
"

10 
«me•a˚
 
	gdlib


15 
«me•a˚
 
	gbÂ1_hñ≥rs


17 
	gãm∂©e
 <
ty≥«me
 
	gT
> 
	s°rù
 { 
T
 
	tty≥
; };

18 
	gãm∂©e
 <
ty≥«me
 
	gT
> 
	g°rù
<T&> { 
T
 
	tty≥
; };

22 ˛as†
	cbound_fun˘i⁄_hñ≥r_ba£_ba£


24 
	gpublic
:

25 
vútuÆ
 ~
bound_fun˘i⁄_hñ≥r_ba£_ba£
(){}

26 
vútuÆ
 
ˇŒ
() const = 0;

27 
vútuÆ
 
boﬁ
 
is_£t
() const = 0;

28 
vútuÆ
 
˛⁄e
(* 
±r
) const = 0;

33 
	gãm∂©e
 <
ty≥«me
 
	gT1
,Åy≥«mê
	gT2
,Åy≥«mê
	gT3
,Åy≥«mê
	gT4
>

34 ˛as†
	cbound_fun˘i⁄_hñ≥r_ba£
 : 
public
 
bound_fun˘i⁄_hñ≥r_ba£_ba£


36 
public
:

37 
bound_fun˘i⁄_hñ≥r_ba£
():
¨g1
(0), 
¨g2
(0), 
¨g3
(0), 
¨g4
(0) {}

39 
ty≥«me
 
	g°rù
<
	gT1
>::
ty≥
* 
¨g1
;

40 
ty≥«me
 
	g°rù
<
	gT2
>::
ty≥
* 
¨g2
;

41 
ty≥«me
 
	g°rù
<
	gT3
>::
ty≥
* 
¨g3
;

42 
ty≥«me
 
	g°rù
<
	gT4
>::
ty≥
* 
¨g4
;

45 
	gmembî_fun˘i⁄_poöãr
<
	gT1
,
	gT2
,
	gT3
,
	gT4
> 
	gmÂ
;

50 
	gãm∂©e
 <
ty≥«me
 
	gF
,Åy≥«mê
	gT1
 = ,Åy≥«mê
	gT2
 = ,Åy≥«mê
	gT3
 = ,Åy≥«mê
	gT4
 = >

51 
˛ass
 
bound_fun˘i⁄_hñ≥r
 : 
public
 
bound_fun˘i⁄_hñ≥r_ba£
<
T1
,
	gT2
,
	gT3
,
	gT4
>

53 
	gpublic
:

54 
ˇŒ
() const

56 (*
Â
)(*
this
->
¨g1
, *
	gthis
->
	g¨g2
, *this->
	g¨g3
, *this->
	g¨g4
);

59 
ty≥«me
 
	g°rù
<
	gF
>::
ty≥
* 
Â
;

62 
	gãm∂©e
 <
ty≥«me
 
	gT1
,Åy≥«mê
	gT2
,Åy≥«mê
	gT3
,Åy≥«mê
	gT4
>

63 
˛ass
 
	gbound_fun˘i⁄_hñ≥r
<,
	gT1
,
	gT2
,
	gT3
,
	gT4
> : 
public
 
bound_fun˘i⁄_hñ≥r_ba£
<
T1
,T2,T3,T4>

65 
	gpublic
:

66 
ˇŒ
() const

68 i‡(
this
->
mÂ
Ëthis->mÂ(*this->
¨g1
, *this->
¨g2
, *this->
¨g3
, *this->
¨g4
);

69 i‡(
	gÂ
Ë
Â
(*
this
->
¨g1
, *this->
¨g2
, *this->
¨g3
, *this->
¨g4
);

72 (*
	gÂ
)(
	gT1
, 
	gT2
, 
	gT3
, 
	gT4
);

77 
	gãm∂©e
 <
ty≥«me
 
	gF
>

78 
˛ass
 
	gbound_fun˘i⁄_hñ≥r
<
	gF
,,,,> : 
public
 
bound_fun˘i⁄_hñ≥r_ba£
<,,,>

80 
	gpublic
:

81 
ˇŒ
() const

83 (*
Â
)();

86 
ty≥«me
 
	g°rù
<
	gF
>::
ty≥
* 
Â
;

89 
	gãm∂©e
 <>

90 
˛ass
 
	gbound_fun˘i⁄_hñ≥r
<,,,,> : 
public
 
bound_fun˘i⁄_hñ≥r_ba£
<,,,>

92 
	gpublic
:

93 
ˇŒ
() const

95 i‡(
this
->
mÂ
)Åhis->mfp();

96 i‡(
	gÂ
Ë
Â
();

99 (*
	gÂ
)();

104 
	gãm∂©e
 <
ty≥«me
 
	gF
,Åy≥«mê
	gT1
>

105 
˛ass
 
	gbound_fun˘i⁄_hñ≥r
<
	gF
,
	gT1
,,,> : 
public
 
bound_fun˘i⁄_hñ≥r_ba£
<
T1
,,,>

107 
	gpublic
:

108 
ˇŒ
() const

110 (*
Â
)(*
this
->
¨g1
);

113 
ty≥«me
 
	g°rù
<
	gF
>::
ty≥
* 
Â
;

116 
	gãm∂©e
 <
ty≥«me
 
	gT1
>

117 
˛ass
 
	gbound_fun˘i⁄_hñ≥r
<,
	gT1
,,,> : 
public
 
bound_fun˘i⁄_hñ≥r_ba£
<
T1
,,,>

119 
	gpublic
:

120 
ˇŒ
() const

122 i‡(
this
->
mÂ
Ëthis->mÂ(*this->
¨g1
);

123 i‡(
	gÂ
Ë
Â
(*
this
->
¨g1
);

126 (*
	gÂ
)(
	gT1
);

131 
	gãm∂©e
 <
ty≥«me
 
	gF
,Åy≥«mê
	gT1
,Åy≥«mê
	gT2
>

132 
˛ass
 
	gbound_fun˘i⁄_hñ≥r
<
	gF
,
	gT1
,
	gT2
,,> : 
public
 
bound_fun˘i⁄_hñ≥r_ba£
<
T1
,T2,,>

134 
	gpublic
:

135 
ˇŒ
() const

137 (*
Â
)(*
this
->
¨g1
, *
	gthis
->
	g¨g2
);

140 
ty≥«me
 
	g°rù
<
	gF
>::
ty≥
* 
Â
;

143 
	gãm∂©e
 <
ty≥«me
 
	gT1
,Åy≥«mê
	gT2
>

144 
˛ass
 
	gbound_fun˘i⁄_hñ≥r
<,
	gT1
,
	gT2
,,> : 
public
 
bound_fun˘i⁄_hñ≥r_ba£
<
T1
,T2,,>

146 
	gpublic
:

147 
ˇŒ
() const

149 i‡(
this
->
mÂ
Ëthis->mÂ(*this->
¨g1
, *this->
¨g2
);

150 i‡(
	gÂ
Ë
Â
(*
this
->
¨g1
, *this->
¨g2
);

153 (*
	gÂ
)(
	gT1
, 
	gT2
);

158 
	gãm∂©e
 <
ty≥«me
 
	gF
,Åy≥«mê
	gT1
,Åy≥«mê
	gT2
,Åy≥«mê
	gT3
>

159 
˛ass
 
	gbound_fun˘i⁄_hñ≥r
<
	gF
,
	gT1
,
	gT2
,
	gT3
,> : 
public
 
bound_fun˘i⁄_hñ≥r_ba£
<
T1
,T2,T3,>

161 
	gpublic
:

162 
ˇŒ
() const

164 (*
Â
)(*
this
->
¨g1
, *
	gthis
->
	g¨g2
, *this->
	g¨g3
);

167 
ty≥«me
 
	g°rù
<
	gF
>::
ty≥
* 
Â
;

170 
	gãm∂©e
 <
ty≥«me
 
	gT1
,Åy≥«mê
	gT2
,Åy≥«mê
	gT3
>

171 
˛ass
 
	gbound_fun˘i⁄_hñ≥r
<,
	gT1
,
	gT2
,
	gT3
,> : 
public
 
bound_fun˘i⁄_hñ≥r_ba£
<
T1
,T2,T3,>

173 
	gpublic
:

175 
ˇŒ
() const

177 i‡(
this
->
mÂ
Ëthis->mÂ(*this->
¨g1
, *this->
¨g2
, *this->
¨g3
);

178 i‡(
	gÂ
Ë
Â
(*
this
->
¨g1
, *this->
¨g2
, *this->
¨g3
);

181 (*
	gÂ
)(
	gT1
, 
	gT2
, 
	gT3
);

187 
	gãm∂©e
 <
ty≥«me
 
	gT
>

188 ˛as†
	cbound_fun˘i⁄_hñ≥r_T
 : 
public
 
T


190 
public
:

191 
bound_fun˘i⁄_hñ≥r_T
(){ 
this
->
Â
 = 0;}

193 
boﬁ
 
is_£t
() const

195  
	gthis
->
	gÂ
 !0 || 
this
->
mÂ
.
is_£t
();

198 
	gãm∂©e
 <
	gmem_size
>

199 
ß„_˛⁄e
(
°ack_ba£d_mem‹y_block
<
mem_size
>& 
buf
)

204 
COMPILE_TIME_ASSERT
((
bound_fun˘i⁄_hñ≥r_T
Ë<
mem_size
);

205 
˛⁄e
(
buf
.
gë
());

208 
˛⁄e
 (* 
±r
) const

210 
bound_fun˘i⁄_hñ≥r_T
* 
	gp
 = 
√w
(
±r
) bound_function_helper_T();

211 
	gp
->
	g¨g1
 = 
this
->
¨g1
;

212 
	gp
->
	g¨g2
 = 
this
->
¨g2
;

213 
	gp
->
	g¨g3
 = 
this
->
¨g3
;

214 
	gp
->
	g¨g4
 = 
this
->
¨g4
;

215 
	gp
->
	gÂ
 = 
this
->
Â
;

216 
	gp
->
	gmÂ
 = 
this
->
mÂ
;

224 ˛as†
	cbound_fun˘i⁄_poöãr


226 
	gbÂ1_hñ≥rs
::
	tbound_fun˘i⁄_hñ≥r_T
<
	tbÂ1_hñ≥rs
::
	tbound_fun˘i⁄_hñ≥r
<,> > 
	tbf_nuŒ_ty≥
;

228 
	gpublic
:

232 
bound_fun˘i⁄_poöãr
 
	tkî√l_1a
;

233 
bound_fun˘i⁄_poöãr
 
	tkî√l_1a_c
;

236 
bound_fun˘i⁄_poöãr
 (

237 Ë{ 
bf_nuŒ_ty≥
().
ß„_˛⁄e
(
bf_mem‹y
); }

239 
bound_fun˘i⁄_poöãr
 (

240 c⁄° 
bound_fun˘i⁄_poöãr
& 
ôem


241 Ë{ 
	gôem
.
bf
()->
˛⁄e
(
bf_mem‹y
.
gë
()); }

243 ~
bound_fun˘i⁄_poöãr
()

244 { 
de°roy_bf_mem‹y
(); }

246 
	gbound_fun˘i⁄_poöãr
& 
	g›î©‹
= (

247 c⁄° 
bound_fun˘i⁄_poöãr
& 
ôem


248 Ë{ 
bound_fun˘i⁄_poöãr
(
ôem
).
sw≠
(*
this
);  *
	gthis
; }

250 
˛ór
 (

251 Ë{ 
bound_fun˘i⁄_poöãr
().
sw≠
(*
this
); }

253 
boﬁ
 
is_£t
 (

256  
bf
()->
is_£t
();

259 
sw≠
 (

260 
bound_fun˘i⁄_poöãr
& 
ôem


264 
bound_fun˘i⁄_poöãr
 
ãmp
(
ôem
);

267 
	gôem
.
de°roy_bf_mem‹y
();

269 
bf
()->
˛⁄e
(
ôem
.
bf_mem‹y
.
gë
());

272 
de°roy_bf_mem‹y
();

274 
	gãmp
.
bf
()->
˛⁄e
(
bf_mem‹y
.
gë
());

277 
›î©‹
() (

281 
DLIB_ASSERT
(
is_£t
(Ë=
åue
 ,

284 << "\n\âhis: " << 
this


287 
bf
()->
ˇŒ
();

290 
	g¥iv©e
:

291 
	sdummy
{ 
n⁄nuŒ
() {}};

292 (
	gdummy
::*
	tß„_boﬁ
)();

294 
	gpublic
:

295 
›î©‹
 
ß„_boﬁ
 (Ëc⁄° {  
is_£t
(Ë? &
dummy
::
n⁄nuŒ
 : 0; }

296 
boﬁ
 
	g›î©‹
!(Ëc⁄° {  !
is_£t
(); }

302 
	gãm∂©e
 <
ty≥«me
 
	gF
>

303 
£t
 (

304 
F
& 
fun˘i⁄_obje˘


307 
COMPILE_TIME_ASSERT
(
is_fun˘i⁄
<
F
>::
vÆue
 =
Ál£
);

308 
COMPILE_TIME_ASSERT
(
is_poöãr_ty≥
<
F
>::
vÆue
 =
Ál£
);

310 
usög
 
«me•a˚
 
	gbÂ1_hñ≥rs
;

311 
de°roy_bf_mem‹y
();

312 
	gbound_fun˘i⁄_hñ≥r_T
<
	tbound_fun˘i⁄_hñ≥r
<
	tF
> > 
	tbf_hñ≥r_ty≥
;

314 
bf_hñ≥r_ty≥
 
	gãmp
;

315 
	gãmp
.
	gÂ
 = &
fun˘i⁄_obje˘
;

317 
	gãmp
.
ß„_˛⁄e
(
bf_mem‹y
);

320 
	gãm∂©e
 <
ty≥«me
 
	gF
,Åy≥«mê
	gA1
 >

321 
£t
 (

322 
F
& 
fun˘i⁄_obje˘
,

323 
A1
& 
¨g1


326 
COMPILE_TIME_ASSERT
(
is_fun˘i⁄
<
F
>::
vÆue
 =
Ál£
);

327 
COMPILE_TIME_ASSERT
(
is_poöãr_ty≥
<
F
>::
vÆue
 =
Ál£
);

329 
usög
 
«me•a˚
 
	gbÂ1_hñ≥rs
;

330 
de°roy_bf_mem‹y
();

331 
	gbound_fun˘i⁄_hñ≥r_T
<
	tbound_fun˘i⁄_hñ≥r
<
	tF
,
	tA1
> > 
	tbf_hñ≥r_ty≥
;

333 
bf_hñ≥r_ty≥
 
	gãmp
;

334 
	gãmp
.
	g¨g1
 = &
¨g1
;

335 
	gãmp
.
	gÂ
 = &
fun˘i⁄_obje˘
;

337 
	gãmp
.
ß„_˛⁄e
(
bf_mem‹y
);

340 
	gãm∂©e
 <
ty≥«me
 
	gF
,Åy≥«mê
	gA1
,Åy≥«mê
	gA2
 >

341 
£t
 (

342 
F
& 
fun˘i⁄_obje˘
,

343 
A1
& 
¨g1
,

344 
A2
& 
¨g2


347 
COMPILE_TIME_ASSERT
(
is_fun˘i⁄
<
F
>::
vÆue
 =
Ál£
);

348 
COMPILE_TIME_ASSERT
(
is_poöãr_ty≥
<
F
>::
vÆue
 =
Ál£
);

350 
usög
 
«me•a˚
 
	gbÂ1_hñ≥rs
;

351 
de°roy_bf_mem‹y
();

352 
	gbound_fun˘i⁄_hñ≥r_T
<
	tbound_fun˘i⁄_hñ≥r
<
	tF
,
	tA1
,
	tA2
> > 
	tbf_hñ≥r_ty≥
;

354 
bf_hñ≥r_ty≥
 
	gãmp
;

355 
	gãmp
.
	g¨g1
 = &
¨g1
;

356 
	gãmp
.
	g¨g2
 = &
¨g2
;

357 
	gãmp
.
	gÂ
 = &
fun˘i⁄_obje˘
;

359 
	gãmp
.
ß„_˛⁄e
(
bf_mem‹y
);

362 
	gãm∂©e
 <
ty≥«me
 
	gF
,Åy≥«mê
	gA1
,Åy≥«mê
	gA2
,Åy≥«mê
	gA3
 >

363 
£t
 (

364 
F
& 
fun˘i⁄_obje˘
,

365 
A1
& 
¨g1
,

366 
A2
& 
¨g2
,

367 
A3
& 
¨g3


370 
COMPILE_TIME_ASSERT
(
is_fun˘i⁄
<
F
>::
vÆue
 =
Ál£
);

371 
COMPILE_TIME_ASSERT
(
is_poöãr_ty≥
<
F
>::
vÆue
 =
Ál£
);

373 
usög
 
«me•a˚
 
	gbÂ1_hñ≥rs
;

374 
de°roy_bf_mem‹y
();

375 
	gbound_fun˘i⁄_hñ≥r_T
<
	tbound_fun˘i⁄_hñ≥r
<
	tF
,
	tA1
,
	tA2
,
	tA3
> > 
	tbf_hñ≥r_ty≥
;

377 
bf_hñ≥r_ty≥
 
	gãmp
;

378 
	gãmp
.
	g¨g1
 = &
¨g1
;

379 
	gãmp
.
	g¨g2
 = &
¨g2
;

380 
	gãmp
.
	g¨g3
 = &
¨g3
;

381 
	gãmp
.
	gÂ
 = &
fun˘i⁄_obje˘
;

383 
	gãmp
.
ß„_˛⁄e
(
bf_mem‹y
);

386 
	gãm∂©e
 <
ty≥«me
 
	gF
,Åy≥«mê
	gA1
,Åy≥«mê
	gA2
,Åy≥«mê
	gA3
,Åy≥«mê
	gA4
>

387 
£t
 (

388 
F
& 
fun˘i⁄_obje˘
,

389 
A1
& 
¨g1
,

390 
A2
& 
¨g2
,

391 
A3
& 
¨g3
,

392 
A4
& 
¨g4


395 
COMPILE_TIME_ASSERT
(
is_fun˘i⁄
<
F
>::
vÆue
 =
Ál£
);

396 
COMPILE_TIME_ASSERT
(
is_poöãr_ty≥
<
F
>::
vÆue
 =
Ál£
);

398 
usög
 
«me•a˚
 
	gbÂ1_hñ≥rs
;

399 
de°roy_bf_mem‹y
();

400 
	gbound_fun˘i⁄_hñ≥r_T
<
	tbound_fun˘i⁄_hñ≥r
<
	tF
,
	tA1
,
	tA2
,
	tA3
,
	tA4
> > 
	tbf_hñ≥r_ty≥
;

402 
bf_hñ≥r_ty≥
 
	gãmp
;

403 
	gãmp
.
	g¨g1
 = &
¨g1
;

404 
	gãmp
.
	g¨g2
 = &
¨g2
;

405 
	gãmp
.
	g¨g3
 = &
¨g3
;

406 
	gãmp
.
	g¨g4
 = &
¨g4
;

407 
	gãmp
.
	gÂ
 = &
fun˘i⁄_obje˘
;

409 
	gãmp
.
ß„_˛⁄e
(
bf_mem‹y
);

416 
	gãm∂©e
 <
ty≥«me
 
	gT
>

417 
£t
 (

418 
T
& 
obje˘
,

419 (
T
::*
fun˘
)()

422 
usög
 
«me•a˚
 
bÂ1_hñ≥rs
;

423 
de°roy_bf_mem‹y
();

424 
	gbound_fun˘i⁄_hñ≥r_T
<
	tbound_fun˘i⁄_hñ≥r
<> > 
	tbf_hñ≥r_ty≥
;

426 
bf_hñ≥r_ty≥
 
	gãmp
;

427 
	gãmp
.
	gmÂ
.
£t
(
obje˘
,
fun˘
);

429 
	gãmp
.
ß„_˛⁄e
(
bf_mem‹y
);

432 
	gãm∂©e
 <
ty≥«me
 
	gT
 >

433 
£t
 (

434 c⁄° 
T
& 
obje˘
,

435 (
T
::*
fun˘
)()const

438 
usög
 
«me•a˚
 
bÂ1_hñ≥rs
;

439 
de°roy_bf_mem‹y
();

440 
	gbound_fun˘i⁄_hñ≥r_T
<
	tbound_fun˘i⁄_hñ≥r
<> > 
	tbf_hñ≥r_ty≥
;

442 
bf_hñ≥r_ty≥
 
	gãmp
;

443 
	gãmp
.
	gmÂ
.
£t
(
obje˘
,
fun˘
);

445 
	gãmp
.
ß„_˛⁄e
(
bf_mem‹y
);

450 
	gãm∂©e
 <
ty≥«me
 
	gT
,Åy≥«mê
	gT1
,Åy≥«mê
	gA1
 >

451 
£t
 (

452 
T
& 
obje˘
,

453 (
T
::*
fun˘
)(
T1
),

454 
A1
& 
¨g1


457 
usög
 
«me•a˚
 
	gbÂ1_hñ≥rs
;

458 
de°roy_bf_mem‹y
();

459 
	gbound_fun˘i⁄_hñ≥r_T
<
	tbound_fun˘i⁄_hñ≥r
<,
	tT1
> > 
	tbf_hñ≥r_ty≥
;

461 
bf_hñ≥r_ty≥
 
	gãmp
;

462 
	gãmp
.
	g¨g1
 = &
¨g1
;

463 
	gãmp
.
	gmÂ
.
£t
(
obje˘
,
fun˘
);

465 
	gãmp
.
ß„_˛⁄e
(
bf_mem‹y
);

468 
	gãm∂©e
 <
ty≥«me
 
	gT
,Åy≥«mê
	gT1
,Åy≥«mê
	gA1
 >

469 
£t
 (

470 c⁄° 
T
& 
obje˘
,

471 (
T
::*
fun˘
)(
T1
)const,

472 
A1
& 
¨g1


475 
usög
 
«me•a˚
 
	gbÂ1_hñ≥rs
;

476 
de°roy_bf_mem‹y
();

477 
	gbound_fun˘i⁄_hñ≥r_T
<
	tbound_fun˘i⁄_hñ≥r
<,
	tT1
> > 
	tbf_hñ≥r_ty≥
;

479 
bf_hñ≥r_ty≥
 
	gãmp
;

480 
	gãmp
.
	g¨g1
 = &
¨g1
;

481 
	gãmp
.
	gmÂ
.
£t
(
obje˘
,
fun˘
);

483 
	gãmp
.
ß„_˛⁄e
(
bf_mem‹y
);

488 
	gãm∂©e
 <
ty≥«me
 
	gT
,Åy≥«mê
	gT1
,Åy≥«mê
	gA1
,

489 
ty≥«me
 
	gT2
,Åy≥«mê
	gA2
>

490 
£t
 (

491 
T
& 
obje˘
,

492 (
T
::*
fun˘
)(
T1
, 
T2
),

493 
A1
& 
¨g1
,

494 
A2
& 
¨g2


497 
usög
 
«me•a˚
 
	gbÂ1_hñ≥rs
;

498 
de°roy_bf_mem‹y
();

499 
	gbound_fun˘i⁄_hñ≥r_T
<
	tbound_fun˘i⁄_hñ≥r
<,
	tT1
,
	tT2
> > 
	tbf_hñ≥r_ty≥
;

501 
bf_hñ≥r_ty≥
 
	gãmp
;

502 
	gãmp
.
	g¨g1
 = &
¨g1
;

503 
	gãmp
.
	g¨g2
 = &
¨g2
;

504 
	gãmp
.
	gmÂ
.
£t
(
obje˘
,
fun˘
);

506 
	gãmp
.
ß„_˛⁄e
(
bf_mem‹y
);

509 
	gãm∂©e
 <
ty≥«me
 
	gT
,Åy≥«mê
	gT1
,Åy≥«mê
	gA1
,

510 
ty≥«me
 
	gT2
,Åy≥«mê
	gA2
>

511 
£t
 (

512 c⁄° 
T
& 
obje˘
,

513 (
T
::*
fun˘
)(
T1
, 
T2
)const,

514 
A1
& 
¨g1
,

515 
A2
& 
¨g2


518 
usög
 
«me•a˚
 
	gbÂ1_hñ≥rs
;

519 
de°roy_bf_mem‹y
();

520 
	gbound_fun˘i⁄_hñ≥r_T
<
	tbound_fun˘i⁄_hñ≥r
<,
	tT1
,
	tT2
> > 
	tbf_hñ≥r_ty≥
;

522 
bf_hñ≥r_ty≥
 
	gãmp
;

523 
	gãmp
.
	g¨g1
 = &
¨g1
;

524 
	gãmp
.
	g¨g2
 = &
¨g2
;

525 
	gãmp
.
	gmÂ
.
£t
(
obje˘
,
fun˘
);

527 
	gãmp
.
ß„_˛⁄e
(
bf_mem‹y
);

532 
	gãm∂©e
 <
ty≥«me
 
	gT
,Åy≥«mê
	gT1
,Åy≥«mê
	gA1
,

533 
ty≥«me
 
	gT2
,Åy≥«mê
	gA2
,

534 
ty≥«me
 
	gT3
,Åy≥«mê
	gA3
>

535 
£t
 (

536 
T
& 
obje˘
,

537 (
T
::*
fun˘
)(
T1
, 
T2
, 
T3
),

538 
A1
& 
¨g1
,

539 
A2
& 
¨g2
,

540 
A3
& 
¨g3


543 
usög
 
«me•a˚
 
	gbÂ1_hñ≥rs
;

544 
de°roy_bf_mem‹y
();

545 
	gbound_fun˘i⁄_hñ≥r_T
<
	tbound_fun˘i⁄_hñ≥r
<,
	tT1
,
	tT2
,
	tT3
> > 
	tbf_hñ≥r_ty≥
;

547 
bf_hñ≥r_ty≥
 
	gãmp
;

548 
	gãmp
.
	g¨g1
 = &
¨g1
;

549 
	gãmp
.
	g¨g2
 = &
¨g2
;

550 
	gãmp
.
	g¨g3
 = &
¨g3
;

551 
	gãmp
.
	gmÂ
.
£t
(
obje˘
,
fun˘
);

553 
	gãmp
.
ß„_˛⁄e
(
bf_mem‹y
);

556 
	gãm∂©e
 <
ty≥«me
 
	gT
,Åy≥«mê
	gT1
,Åy≥«mê
	gA1
,

557 
ty≥«me
 
	gT2
,Åy≥«mê
	gA2
,

558 
ty≥«me
 
	gT3
,Åy≥«mê
	gA3
>

559 
£t
 (

560 c⁄° 
T
& 
obje˘
,

561 (
T
::*
fun˘
)(
T1
, 
T2
, 
T3
)const,

562 
A1
& 
¨g1
,

563 
A2
& 
¨g2
,

564 
A3
& 
¨g3


567 
usög
 
«me•a˚
 
	gbÂ1_hñ≥rs
;

568 
de°roy_bf_mem‹y
();

569 
	gbound_fun˘i⁄_hñ≥r_T
<
	tbound_fun˘i⁄_hñ≥r
<,
	tT1
,
	tT2
,
	tT3
> > 
	tbf_hñ≥r_ty≥
;

571 
bf_hñ≥r_ty≥
 
	gãmp
;

572 
	gãmp
.
	g¨g1
 = &
¨g1
;

573 
	gãmp
.
	g¨g2
 = &
¨g2
;

574 
	gãmp
.
	g¨g3
 = &
¨g3
;

575 
	gãmp
.
	gmÂ
.
£t
(
obje˘
,
fun˘
);

577 
	gãmp
.
ß„_˛⁄e
(
bf_mem‹y
);

582 
	gãm∂©e
 <
ty≥«me
 
	gT
,Åy≥«mê
	gT1
,Åy≥«mê
	gA1
,

583 
ty≥«me
 
	gT2
,Åy≥«mê
	gA2
,

584 
ty≥«me
 
	gT3
,Åy≥«mê
	gA3
,

585 
ty≥«me
 
	gT4
,Åy≥«mê
	gA4
>

586 
£t
 (

587 
T
& 
obje˘
,

588 (
T
::*
fun˘
)(
T1
, 
T2
, 
T3
, 
T4
),

589 
A1
& 
¨g1
,

590 
A2
& 
¨g2
,

591 
A3
& 
¨g3
,

592 
A4
& 
¨g4


595 
usög
 
«me•a˚
 
	gbÂ1_hñ≥rs
;

596 
de°roy_bf_mem‹y
();

597 
	gbound_fun˘i⁄_hñ≥r_T
<
	tbound_fun˘i⁄_hñ≥r
<,
	tT1
,
	tT2
,
	tT3
,
	tT4
> > 
	tbf_hñ≥r_ty≥
;

599 
bf_hñ≥r_ty≥
 
	gãmp
;

600 
	gãmp
.
	g¨g1
 = &
¨g1
;

601 
	gãmp
.
	g¨g2
 = &
¨g2
;

602 
	gãmp
.
	g¨g3
 = &
¨g3
;

603 
	gãmp
.
	g¨g4
 = &
¨g4
;

604 
	gãmp
.
	gmÂ
.
£t
(
obje˘
,
fun˘
);

606 
	gãmp
.
ß„_˛⁄e
(
bf_mem‹y
);

609 
	gãm∂©e
 <
ty≥«me
 
	gT
,Åy≥«mê
	gT1
,Åy≥«mê
	gA1
,

610 
ty≥«me
 
	gT2
,Åy≥«mê
	gA2
,

611 
ty≥«me
 
	gT3
,Åy≥«mê
	gA3
,

612 
ty≥«me
 
	gT4
,Åy≥«mê
	gA4
>

613 
£t
 (

614 c⁄° 
T
& 
obje˘
,

615 (
T
::*
fun˘
)(
T1
, 
T2
, 
T3
, 
T4
)const,

616 
A1
& 
¨g1
,

617 
A2
& 
¨g2
,

618 
A3
& 
¨g3
,

619 
A4
& 
¨g4


622 
usög
 
«me•a˚
 
	gbÂ1_hñ≥rs
;

623 
de°roy_bf_mem‹y
();

624 
	gbound_fun˘i⁄_hñ≥r_T
<
	tbound_fun˘i⁄_hñ≥r
<,
	tT1
,
	tT2
,
	tT3
,
	tT4
> > 
	tbf_hñ≥r_ty≥
;

626 
bf_hñ≥r_ty≥
 
	gãmp
;

627 
	gãmp
.
	g¨g1
 = &
¨g1
;

628 
	gãmp
.
	g¨g2
 = &
¨g2
;

629 
	gãmp
.
	g¨g3
 = &
¨g3
;

630 
	gãmp
.
	g¨g4
 = &
¨g4
;

631 
	gãmp
.
	gmÂ
.
£t
(
obje˘
,
fun˘
);

633 
	gãmp
.
ß„_˛⁄e
(
bf_mem‹y
);

640 
£t
 (

641 (*
fun˘
)()

644 
usög
 
«me•a˚
 
	gbÂ1_hñ≥rs
;

645 
de°roy_bf_mem‹y
();

646 
	gbound_fun˘i⁄_hñ≥r_T
<
	tbound_fun˘i⁄_hñ≥r
<> > 
	tbf_hñ≥r_ty≥
;

648 
bf_hñ≥r_ty≥
 
	gãmp
;

649 
	gãmp
.
	gÂ
 = 
fun˘
;

651 
	gãmp
.
ß„_˛⁄e
(
bf_mem‹y
);

654 
	gãm∂©e
 <
ty≥«me
 
	gT1
,Åy≥«mê
	gA1
>

655 
£t
 (

656 (*
fun˘
)(
T1
),

657 
A1
& 
¨g1


660 
usög
 
«me•a˚
 
	gbÂ1_hñ≥rs
;

661 
de°roy_bf_mem‹y
();

662 
	gbound_fun˘i⁄_hñ≥r_T
<
	tbound_fun˘i⁄_hñ≥r
<,
	tT1
> > 
	tbf_hñ≥r_ty≥
;

664 
bf_hñ≥r_ty≥
 
	gãmp
;

665 
	gãmp
.
	g¨g1
 = &
¨g1
;

666 
	gãmp
.
	gÂ
 = 
fun˘
;

668 
	gãmp
.
ß„_˛⁄e
(
bf_mem‹y
);

671 
	gãm∂©e
 <
ty≥«me
 
	gT1
,Åy≥«mê
	gA1
,

672 
ty≥«me
 
	gT2
,Åy≥«mê
	gA2
>

673 
£t
 (

674 (*
fun˘
)(
T1
, 
T2
),

675 
A1
& 
¨g1
,

676 
A2
& 
¨g2


679 
usög
 
«me•a˚
 
	gbÂ1_hñ≥rs
;

680 
de°roy_bf_mem‹y
();

681 
	gbound_fun˘i⁄_hñ≥r_T
<
	tbound_fun˘i⁄_hñ≥r
<,
	tT1
,
	tT2
> > 
	tbf_hñ≥r_ty≥
;

683 
bf_hñ≥r_ty≥
 
	gãmp
;

684 
	gãmp
.
	g¨g1
 = &
¨g1
;

685 
	gãmp
.
	g¨g2
 = &
¨g2
;

686 
	gãmp
.
	gÂ
 = 
fun˘
;

688 
	gãmp
.
ß„_˛⁄e
(
bf_mem‹y
);

691 
	gãm∂©e
 <
ty≥«me
 
	gT1
,Åy≥«mê
	gA1
,

692 
ty≥«me
 
	gT2
,Åy≥«mê
	gA2
,

693 
ty≥«me
 
	gT3
,Åy≥«mê
	gA3
>

694 
£t
 (

695 (*
fun˘
)(
T1
, 
T2
, 
T3
),

696 
A1
& 
¨g1
,

697 
A2
& 
¨g2
,

698 
A3
& 
¨g3


701 
usög
 
«me•a˚
 
	gbÂ1_hñ≥rs
;

702 
de°roy_bf_mem‹y
();

703 
	gbound_fun˘i⁄_hñ≥r_T
<
	tbound_fun˘i⁄_hñ≥r
<,
	tT1
,
	tT2
,
	tT3
> > 
	tbf_hñ≥r_ty≥
;

705 
bf_hñ≥r_ty≥
 
	gãmp
;

706 
	gãmp
.
	g¨g1
 = &
¨g1
;

707 
	gãmp
.
	g¨g2
 = &
¨g2
;

708 
	gãmp
.
	g¨g3
 = &
¨g3
;

709 
	gãmp
.
	gÂ
 = 
fun˘
;

711 
	gãmp
.
ß„_˛⁄e
(
bf_mem‹y
);

714 
	gãm∂©e
 <
ty≥«me
 
	gT1
,Åy≥«mê
	gA1
,

715 
ty≥«me
 
	gT2
,Åy≥«mê
	gA2
,

716 
ty≥«me
 
	gT3
,Åy≥«mê
	gA3
,

717 
ty≥«me
 
	gT4
,Åy≥«mê
	gA4
>

718 
£t
 (

719 (*
fun˘
)(
T1
, 
T2
, 
T3
, 
T4
),

720 
A1
& 
¨g1
,

721 
A2
& 
¨g2
,

722 
A3
& 
¨g3
,

723 
A4
& 
¨g4


726 
usög
 
«me•a˚
 
	gbÂ1_hñ≥rs
;

727 
de°roy_bf_mem‹y
();

728 
	gbound_fun˘i⁄_hñ≥r_T
<
	tbound_fun˘i⁄_hñ≥r
<,
	tT1
,
	tT2
,
	tT3
,
	tT4
> > 
	tbf_hñ≥r_ty≥
;

730 
bf_hñ≥r_ty≥
 
	gãmp
;

731 
	gãmp
.
	g¨g1
 = &
¨g1
;

732 
	gãmp
.
	g¨g2
 = &
¨g2
;

733 
	gãmp
.
	g¨g3
 = &
¨g3
;

734 
	gãmp
.
	g¨g4
 = &
¨g4
;

735 
	gãmp
.
	gÂ
 = 
fun˘
;

737 
	gãmp
.
ß„_˛⁄e
(
bf_mem‹y
);

742 
	g¥iv©e
:

744 
°ack_ba£d_mem‹y_block
<(
bf_nuŒ_ty≥
)> 
bf_mem‹y
;

746 
de°roy_bf_mem‹y
 (

751 
bf
()->~
bound_fun˘i⁄_hñ≥r_ba£_ba£
();

754 
	gbÂ1_hñ≥rs
::
bound_fun˘i⁄_hñ≥r_ba£_ba£
* 
bf
 ()

755 {  
°©ic_ˇ°
<
bÂ1_hñ≥rs
::
bound_fun˘i⁄_hñ≥r_ba£_ba£
*>(
bf_mem‹y
.
gë
()); }

757 c⁄° 
	gbÂ1_hñ≥rs
::
bound_fun˘i⁄_hñ≥r_ba£_ba£
* 
bf
 () const

758 {  
°©ic_ˇ°
<c⁄° 
bÂ1_hñ≥rs
::
bound_fun˘i⁄_hñ≥r_ba£_ba£
*>(
bf_mem‹y
.
gë
()); }

764 
ölöe
 
	$sw≠
 (

765 
bound_fun˘i⁄_poöãr
& 
a
,

766 
bound_fun˘i⁄_poöãr
& 
b


767 Ë{ 
a
.
	`sw≠
(
b
); 
	}
}

	@viper/concurrentqueue-src/benchmarks/dlib/bound_function_pointer/bound_function_pointer_kernel_abstract.h

3 #unde‡
DLIB_BOUND_FUNCTION_POINTER_KERNEl_ABSTRACT_


4 #ifde‡
DLIB_BOUND_FUNCTION_POINTER_KERNEl_ABSTRACT_


6 
«me•a˚
 
	gdlib


11 ˛as†
	cbound_fun˘i⁄_poöãr


33 
	gpublic
:

35 
bound_fun˘i⁄_poöãr
 (

42 
bound_fun˘i⁄_poöãr
(

43 c⁄° 
bound_fun˘i⁄_poöãr
& 
ôem


50 ~
bound_fun˘i⁄_poöãr
 (

57 
	gbound_fun˘i⁄_poöãr
& 
	g›î©‹
=(

58 c⁄° 
bound_fun˘i⁄_poöãr
& 
ôem


65 
˛ór
(

72 
boﬁ
 
is_£t
 (

82 
›î©‹
 
some_undeföed_poöãr_ty≥
 (

92 
boﬁ
 
	g›î©‹
! (

99 
›î©‹
 () (

114 
sw≠
 (

115 
bound_fun˘i⁄_poöãr
& 
ôem


124 
	gãm∂©e
 <
ty≥«me
 
	gF
>

125 
£t
 (

126 
F
& 
fun˘i⁄_obje˘


137 
	gãm∂©e
 < 
ty≥«me
 
	gT
>

138 
£t
 (

139 
T
& 
obje˘
,

140 (
T
::*
fun˘
)()

150 
	gãm∂©e
 < 
ty≥«me
 
	gT
>

151 
£t
 (

152 c⁄° 
T
& 
obje˘
,

153 (
T
::*
fun˘
)()const

163 
£t
 (

164 (*
fun˘
)()

176 
	gãm∂©e
 <
ty≥«me
 
	gF
,Åy≥«mê
	gA1
 >

177 
£t
 (

178 
F
& 
fun˘i⁄_obje˘
,

179 
A1
& 
¨g1


189 
	gãm∂©e
 < 
ty≥«me
 
	gT
,Åy≥«mê
	gT1
,Åy≥«mê
	gA1
 >

190 
£t
 (

191 
T
& 
obje˘
,

192 (
T
::*
fun˘
)(
T1
),

193 
A1
& 
¨g1


203 
	gãm∂©e
 < 
ty≥«me
 
	gT
,Åy≥«mê
	gT1
,Åy≥«mê
	gA1
 >

204 
£t
 (

205 c⁄° 
T
& 
obje˘
,

206 (
T
::*
fun˘
)(
T1
)const,

207 
A1
& 
¨g1


217 
	gãm∂©e
 <
ty≥«me
 
	gT1
,Åy≥«mê
	gA1
>

218 
£t
 (

219 (*
fun˘
)(
T1
),

220 
A1
& 
¨g1


231 
	gãm∂©e
 <
ty≥«me
 
	gF
,Åy≥«mê
	gA1
,Åy≥«mê
	gA2
 >

232 
£t
 (

233 
F
& 
fun˘i⁄_obje˘
,

234 
A1
& 
¨g1
,

235 
A2
& 
¨g2


245 
	gãm∂©e
 < 
ty≥«me
 
	gT
,Åy≥«mê
	gT1
,Åy≥«mê
	gA1
,

246 
ty≥«me
 
	gT2
,Åy≥«mê
	gA2
>

247 
£t
 (

248 
T
& 
obje˘
,

249 (
T
::*
fun˘
)(
T1
,
T2
),

250 
A1
& 
¨g1
,

251 
A2
& 
¨g2


261 
	gãm∂©e
 < 
ty≥«me
 
	gT
,Åy≥«mê
	gT1
,Åy≥«mê
	gA1
,

262 
ty≥«me
 
	gT2
,Åy≥«mê
	gA2
>

263 
£t
 (

264 c⁄° 
T
& 
obje˘
,

265 (
T
::*
fun˘
)(
T1
,
T2
)const,

266 
A1
& 
¨g1
,

267 
A2
& 
¨g2


277 
	gãm∂©e
 <
ty≥«me
 
	gT1
,Åy≥«mê
	gA1
,

278 
ty≥«me
 
	gT2
,Åy≥«mê
	gA2
>

279 
£t
 (

280 (*
fun˘
)(
T1
,
T2
),

281 
A1
& 
¨g1
,

282 
A2
& 
¨g2


294 
	gãm∂©e
 <
ty≥«me
 
	gF
,Åy≥«mê
	gA1
,Åy≥«mê
	gA2
,Åy≥«mê
	gA3
 >

295 
£t
 (

296 
F
& 
fun˘i⁄_obje˘
,

297 
A1
& 
¨g1
,

298 
A2
& 
¨g2
,

299 
A3
& 
¨g3


309 
	gãm∂©e
 < 
ty≥«me
 
	gT
,Åy≥«mê
	gT1
,Åy≥«mê
	gA1
,

310 
ty≥«me
 
	gT2
,Åy≥«mê
	gA2
,

311 
ty≥«me
 
	gT3
,Åy≥«mê
	gA3
>

312 
£t
 (

313 
T
& 
obje˘
,

314 (
T
::*
fun˘
)(
T1
,
T2
,
T3
),

315 
A1
& 
¨g1
,

316 
A2
& 
¨g2
,

317 
A3
& 
¨g3


327 
	gãm∂©e
 < 
ty≥«me
 
	gT
,Åy≥«mê
	gT1
,Åy≥«mê
	gA1
,

328 
ty≥«me
 
	gT2
,Åy≥«mê
	gA2
,

329 
ty≥«me
 
	gT3
,Åy≥«mê
	gA3
>

330 
£t
 (

331 c⁄° 
T
& 
obje˘
,

332 (
T
::*
fun˘
)(
T1
,
T2
,
T3
)const,

333 
A1
& 
¨g1
,

334 
A2
& 
¨g2
,

335 
A3
& 
¨g3


345 
	gãm∂©e
 <
ty≥«me
 
	gT1
,Åy≥«mê
	gA1
,

346 
ty≥«me
 
	gT2
,Åy≥«mê
	gA2
,

347 
ty≥«me
 
	gT3
,Åy≥«mê
	gA3
>

348 
£t
 (

349 (*
fun˘
)(
T1
,
T2
,
T3
),

350 
A1
& 
¨g1
,

351 
A2
& 
¨g2
,

352 
A3
& 
¨g3


364 
	gãm∂©e
 <
ty≥«me
 
	gF
,Åy≥«mê
	gA1
,Åy≥«mê
	gA2
,Åy≥«mê
	gA3
,Åy≥«mê
	gA4
>

365 
£t
 (

366 
F
& 
fun˘i⁄_obje˘
,

367 
A1
& 
¨g1
,

368 
A2
& 
¨g2
,

369 
A3
& 
¨g3
,

370 
A4
& 
¨g4


380 
	gãm∂©e
 < 
ty≥«me
 
	gT
,Åy≥«mê
	gT1
,Åy≥«mê
	gA1
,

381 
ty≥«me
 
	gT2
,Åy≥«mê
	gA2
,

382 
ty≥«me
 
	gT3
,Åy≥«mê
	gA3
,

383 
ty≥«me
 
	gT4
,Åy≥«mê
	gA4
>

384 
£t
 (

385 
T
& 
obje˘
,

386 (
T
::*
fun˘
)(
T1
,
T2
,
T3
,
T4
),

387 
A1
& 
¨g1
,

388 
A2
& 
¨g2
,

389 
A3
& 
¨g3
,

390 
A4
& 
¨g4


400 
	gãm∂©e
 < 
ty≥«me
 
	gT
,Åy≥«mê
	gT1
,Åy≥«mê
	gA1
,

401 
ty≥«me
 
	gT2
,Åy≥«mê
	gA2
,

402 
ty≥«me
 
	gT3
,Åy≥«mê
	gA3
,

403 
ty≥«me
 
	gT4
,Åy≥«mê
	gA4
>

404 
£t
 (

405 c⁄° 
T
& 
obje˘
,

406 (
T
::*
fun˘
)(
T1
,
T2
,
T3
,
T4
)const,

407 
A1
& 
¨g1
,

408 
A2
& 
¨g2
,

409 
A3
& 
¨g3
,

410 
A4
& 
¨g4


420 
	gãm∂©e
 <
ty≥«me
 
	gT1
,Åy≥«mê
	gA1
,

421 
ty≥«me
 
	gT2
,Åy≥«mê
	gA2
,

422 
ty≥«me
 
	gT3
,Åy≥«mê
	gA3
,

423 
ty≥«me
 
	gT4
,Åy≥«mê
	gA4
>

424 
£t
 (

425 (*
fun˘
)(
T1
,
T2
,
T3
,
T4
),

426 
A1
& 
¨g1
,

427 
A2
& 
¨g2
,

428 
A3
& 
¨g3
,

429 
A4
& 
¨g4


443 
ölöe
 
	$sw≠
 (

444 
bound_fun˘i⁄_poöãr
& 
a
,

445 
bound_fun˘i⁄_poöãr
& 
b


446 Ë{ 
a
.
	`sw≠
(
b
); 
	}
}

	@viper/concurrentqueue-src/benchmarks/dlib/byte_orderer.h

3 #i‚de‡
DLIB_BYTE_ORDEREr_


4 
	#DLIB_BYTE_ORDEREr_


	)

7 
	~"byã_‹dîî/byã_‹dîî_kî√l_1.h
"

	@viper/concurrentqueue-src/benchmarks/dlib/byte_orderer/byte_orderer_kernel_1.h

3 #i‚de‡
DLIB_BYTE_ORDEREr_KERNEL_1_


4 
	#DLIB_BYTE_ORDEREr_KERNEL_1_


	)

6 
	~"byã_‹dîî_kî√l_ab°ø˘.h
"

7 
	~"../Ægs.h
"

8 
	~"../as£π.h
"

10 
«me•a˚
 
	gdlib


13 ˛as†
	cbyã_‹dîî


35 
	gpublic
:

38 
byã_‹dîî
 
	tkî√l_1a
;

40 
byã_‹dîî
 (

45 
COMPILE_TIME_ASSERT
(() >= 2);

47 
	gãmp
 = 1;

48 * 
	g±r
 = 
ªöãΩªt_ˇ°
<*>(&
ãmp
);

49 i‡(*
	g±r
 == 1)

50 
lôée_ídün
 = 
åue
;

52 
	glôée_ídün
 = 
Ál£
;

55 
	gvútuÆ
 ~
byã_‹dîî
 (

58 
boﬁ
 
ho°_is_big_ídün
 (

59 Ëc⁄° {  !
	glôée_ídün
; }

61 
boﬁ
 
ho°_is_lôée_ídün
 (

62 Ëc⁄° {  
	glôée_ídün
; }

64 
	gãm∂©e
 <

65 
ty≥«me
 
	gT


67 
ölöe
 
ho°_to_√tw‹k
 (

68 
T
& 
ôem


70 { i‡(
	glôée_ídün
Ë
Êù
(
ôem
); }

72 
	gãm∂©e
 <

73 
ty≥«me
 
	gT


75 
ölöe
 
√tw‹k_to_ho°
 (

76 
T
& 
ôem


77 Ëc⁄° { i‡(
	glôée_ídün
Ë
Êù
(
ôem
); }

79 
	gãm∂©e
 <

80 
ty≥«me
 
	gT


82 
ho°_to_big
 (

83 
T
& 
ôem


84 Ëc⁄° { i‡(
	glôée_ídün
Ë
Êù
(
ôem
); }

86 
	gãm∂©e
 <

87 
ty≥«me
 
	gT


89 
big_to_ho°
 (

90 
T
& 
ôem


91 Ëc⁄° { i‡(
	glôée_ídün
Ë
Êù
(
ôem
); }

93 
	gãm∂©e
 <

94 
ty≥«me
 
	gT


96 
ho°_to_lôée
 (

97 
T
& 
ôem


98 Ëc⁄° { i‡(!
	glôée_ídün
Ë
Êù
(
ôem
); }

100 
	gãm∂©e
 <

101 
ty≥«me
 
	gT


103 
lôée_to_ho°
 (

104 
T
& 
ôem


105 Ëc⁄° { i‡(!
	glôée_ídün
Ë
Êù
(
ôem
); }

108 
	g¥iv©e
:

110 
ãm∂©e
 <

111 
ty≥«me
 
T
,

112 
size_t
 
	gsize


114 
ölöe
 
Êù
 (

115 
T
 (&
¨øy
)[
size
]

122 
size_t
 
	gi
 = 0; i < 
	gsize
; ++i)

124 
Êù
(
¨øy
[
i
]);

128 
	gãm∂©e
 <

129 
ty≥«me
 
	gT


131 
ölöe
 
Êù
 (

132 
T
& 
ôem


139 
DLIB_ASSERT_HAS_STANDARD_LAYOUT
(
T
);

141 
T
 
	gvÆue
;

147 
COMPILE_TIME_ASSERT
((
T
) <= ());

154 
COMPILE_TIME_ASSERT
(
is_poöãr_ty≥
<
T
>::
vÆue
 =
Ál£
);

157 c⁄° 
size_t
 
	gsize
 = (
T
);

158 * c⁄° 
	g±r
 = 
ªöãΩªt_ˇ°
<*>(&
ôem
);

159 * c⁄° 
	g±r_ãmp
 = 
ªöãΩªt_ˇ°
<*>(&
vÆue
);

160 
size_t
 
	gi
 = 0; i < 
	gsize
; ++i)

161 
	g±r_ãmp
[
size
-
i
-1] = 
±r
[i];

163 
	gôem
 = 
vÆue
;

166 
boﬁ
 
	glôée_ídün
;

170 
	gãm∂©e
 <> 
ölöe
 
	gbyã_‹dîî
::
Êù
<> ( & ) const {}

171 
ãm∂©e
 <> 
ölöe
 
byã_‹dîî
::
Êù
<> ( & ) const {}

172 
ãm∂©e
 <> 
ölöe
 
byã_‹dîî
::
Êù
<signed > ( signed & ) const {}

	@viper/concurrentqueue-src/benchmarks/dlib/byte_orderer/byte_orderer_kernel_abstract.h

3 #unde‡
DLIB_BYTE_ORDEREr_ABSTRACT_


4 #ifde‡
DLIB_BYTE_ORDEREr_ABSTRACT_


6 
	~"../Ægs.h
"

8 
«me•a˚
 
	gdlib


11 ˛as†
	cbyã_‹dîî


35 
	gpublic
:

37 
byã_‹dîî
 (

46 
	gvútuÆ
 ~
byã_‹dîî
 (

53 
boﬁ
 
ho°_is_big_ídün
 (

63 
boﬁ
 
ho°_is_lôée_ídün
 (

73 
	gãm∂©e
 <

74 
ty≥«me
 
	gT


76 
ho°_to_√tw‹k
 (

77 
T
& 
ôem


85 
	gãm∂©e
 <

86 
ty≥«me
 
	gT


88 
√tw‹k_to_ho°
 (

89 
T
& 
ôem


97 
	gãm∂©e
 <

98 
ty≥«me
 
	gT


100 
ho°_to_big
 (

101 
T
& 
ôem


109 
	gãm∂©e
 <

110 
ty≥«me
 
	gT


112 
big_to_ho°
 (

113 
T
& 
ôem


121 
	gãm∂©e
 <

122 
ty≥«me
 
	gT


124 
ho°_to_lôée
 (

125 
T
& 
ôem


133 
	gãm∂©e
 <

134 
ty≥«me
 
	gT


136 
lôée_to_ho°
 (

137 
T
& 
ôem


	@viper/concurrentqueue-src/benchmarks/dlib/config.h

15 
	#DLIB_ENABLE_STACK_TRACE


	)

17 
	#LAPACK_FORCE_UNDERSCORE


	)

22 
	#DLIB_JPEG_SUPPORT


	)

23 
	#DLIB_PNG_SUPPORT


	)

26 
	#DLIB_USE_BLAS


	)

27 
	#DLIB_USE_LAPACK


	)

	@viper/concurrentqueue-src/benchmarks/dlib/console_progress_indicator.h

3 #i‚de‡
DLIB_CONSOLE_PROGRESS_INDiCATOR_Hh_


4 
	#DLIB_CONSOLE_PROGRESS_INDiCATOR_Hh_


	)

6 
	~<˘ime
>

7 
	~<cm©h
>

8 
	~<limôs
>

9 
	~<io°ªam
>

11 
«me•a˚
 
	gdlib


16 ˛as†
	cc⁄sﬁe_¥ogªss_ödiˇt‹


36 
	gpublic
:

38 
ölöe
 
ex∂icô
 
c⁄sﬁe_¥ogªss_ödiˇt‹
 (

39 
èrgë_vÆue


46 
ölöe
 
ª£t
 (

47 
èrgë_vÆue


58 
ölöe
 
èrgë
 (

67 
ölöe
 
boﬁ
 
¥öt_°©us
 (

68 
cur
,

69 
boﬁ
 
Æways_¥öt
 = 
Ál£


89 
	g¥iv©e
:

91 
èrgë_vÆ
;

93 
time_t
 
	g°¨t_time
;

94 
	gfú°_vÆ
;

95 
	g£í_fú°_vÆ
;

96 
time_t
 
	gœ°_time
;

106 
	gc⁄sﬁe_¥ogªss_ödiˇt‹
::

107 
	$c⁄sﬁe_¥ogªss_ödiˇt‹
 (

108 
èrgë_vÆue


110 
	`èrgë_vÆ
(
èrgë_vÆue
),

111 
	`°¨t_time
(0),

112 
	`fú°_vÆ
(0),

113 
	`£í_fú°_vÆ
(
Ál£
),

114 
	$œ°_time
(0)

116 
	}
}

120 
boﬁ
 
	gc⁄sﬁe_¥ogªss_ödiˇt‹
::

121 
	$¥öt_°©us
 (

122 
cur
,

123 
boﬁ
 
Æways_¥öt


126 c⁄° 
time_t
 
cur_time
 = 
°d
::
	`time
(0);

131 i‡(!
£í_fú°_vÆ
)

133 
°¨t_time
 = 
cur_time
;

134 
œ°_time
 = 
cur_time
;

135 
fú°_vÆ
 = 
cur
;

136 
£í_fú°_vÆ
 = 
åue
;

137  
Ál£
;

140 i‡(
cur_time
 !
œ°_time
 || 
Æways_¥öt
)

142 
œ°_time
 = 
cur_time
;

143 
dñè_t
 = 
°©ic_ˇ°
<>(
cur_time
 - 
°¨t_time
);

144 
dñè_vÆ
 = 
°d
::
	`abs
(
cur
 - 
fú°_vÆ
);

147 i‡(
dñè_vÆ
 < 
°d
::
numîic_limôs
<>::
	`ïsû⁄
())

148  
Ál£
;

150 
£c⁄ds
 = 
dñè_t
/
dñè_vÆ
 * 
°d
::
	`abs
(
èrgë_vÆ
 - 
cur
);

152 
°d
::
ios
::
fmtÊags
 
ﬁdÊags
 = std::
cout
.
	`Êags
();

154 
°d
::
cout
.
	`£tf
(°d::
ios
::
fixed
,°d::ios::
Êﬂtfõld
);

155 
°d
::
°ªamsize
 
ss
;

157 i‡(
£c⁄ds
 < 60)

159 
ss
 = 
°d
::
cout
.
	`¥ecisi⁄
(0);

160 
°d
::
cout
 << "Timêªmaöög: " << 
£c⁄ds
 << " sec⁄ds. \r" << std::
Êush
;

162 i‡(
£c⁄ds
 < 60*60)

164 
ss
 = 
°d
::
cout
.
	`¥ecisi⁄
(2);

165 
°d
::
cout
 << "Timêªmaöög: " << 
£c⁄ds
/60 << " möuãs. \r" << std::
Êush
;

169 
ss
 = 
°d
::
cout
.
	`¥ecisi⁄
(2);

170 
°d
::
cout
 << "Timêªmaöög: " << 
£c⁄ds
/60/60 << " hours. \r" << std::
Êush
;

174 
°d
::
cout
.
	`Êags
(
ﬁdÊags
);

175 
°d
::
cout
.
	`¥ecisi⁄
(
ss
);

177  
åue
;

180  
Ál£
;

181 
	}
}

185 
	gc⁄sﬁe_¥ogªss_ödiˇt‹
::

186 
	$èrgë
 (

189  
èrgë_vÆ
;

190 
	}
}

194 
	gc⁄sﬁe_¥ogªss_ödiˇt‹
::

195 
	$ª£t
 (

196 
èrgë_vÆue


199 *
this
 = 
	`c⁄sﬁe_¥ogªss_ödiˇt‹
(
èrgë_vÆue
);

200 
	}
}

	@viper/concurrentqueue-src/benchmarks/dlib/enable_if.h

8 #i‚de‡
DLIB_BOOST_UTILITY_ENABLE_IF_HPP


9 
	#DLIB_BOOST_UTILITY_ENABLE_IF_HPP


	)

11 
«me•a˚
 
	gdlib


14 
	gãm∂©e
 <
boﬁ
 
	gB
, 
˛ass
 
	gT
 = >

15 
	síabÀ_if_c
 {

16 
T
 
	tty≥
;

19 
	gãm∂©e
 <
˛ass
 
	gT
>

20 
	gíabÀ_if_c
<
	gÁl£
, 
	gT
> {};

22 
	gãm∂©e
 <
˛ass
 
	gC⁄d
, cœs†
	gT
 = >

23 
íabÀ_if
 : 
public
 
íabÀ_if_c
<
C⁄d
::
vÆue
, 
	gT
> {};

25 
	gãm∂©e
 <
boﬁ
 
	gB
, 
˛ass
 
	gT
>

26 
	sœzy_íabÀ_if_c
 {

27 
ty≥«me
 
	tT
::
	tty≥
Åype;

30 
	gãm∂©e
 <
˛ass
 
	gT
>

31 
	gœzy_íabÀ_if_c
<
	gÁl£
, 
	gT
> {};

33 
	gãm∂©e
 <
˛ass
 
	gC⁄d
, cœs†
	gT
>

34 
	gœzy_íabÀ_if
 : 
public
 
œzy_íabÀ_if_c
<
C⁄d
::
vÆue
, 
	gT
> {};

37 
	gãm∂©e
 <
boﬁ
 
	gB
, 
˛ass
 
	gT
 = >

38 
	sdißbÀ_if_c
 {

39 
T
 
	tty≥
;

42 
	gãm∂©e
 <
˛ass
 
	gT
>

43 
	gdißbÀ_if_c
<
	gåue
, 
	gT
> {};

45 
	gãm∂©e
 <
˛ass
 
	gC⁄d
, cœs†
	gT
 = >

46 
dißbÀ_if
 : 
public
 
dißbÀ_if_c
<
C⁄d
::
vÆue
, 
	gT
> {};

48 
	gãm∂©e
 <
boﬁ
 
	gB
, 
˛ass
 
	gT
>

49 
	sœzy_dißbÀ_if_c
 {

50 
ty≥«me
 
	tT
::
	tty≥
Åype;

53 
	gãm∂©e
 <
˛ass
 
	gT
>

54 
	gœzy_dißbÀ_if_c
<
	gåue
, 
	gT
> {};

56 
	gãm∂©e
 <
˛ass
 
	gC⁄d
, cœs†
	gT
>

57 
	gœzy_dißbÀ_if
 : 
public
 
œzy_dißbÀ_if_c
<
C⁄d
::
vÆue
, 
	gT
> {};

	@viper/concurrentqueue-src/benchmarks/dlib/error.h

3 #i‚de‡
DLIB_ERROr_


4 
	#DLIB_ERROr_


	)

6 
	~<°rög
>

7 
	~<√w
>

8 
	~<io°ªam
>

9 
	~<ˇs£π
>

10 
	~<c°dlib
>

11 
	~<ex˚±i⁄
>

17 
«me•a˚
 
	gdlib


22 
	eîr‹_ty≥


24 
	gEPORT_IN_USE
,

25 
	gETIMEOUT
,

26 
	gECONNECTION
,

27 
	gELISTENER
,

28 
	gERESOLVE
,

29 
	gEMONITOR
,

30 
	gECREATE_THREAD
,

31 
	gECREATE_MUTEX
,

32 
	gECREATE_SIGNALER
,

33 
	gEUNSPECIFIED
,

34 
	gEGENERAL_TYPE1
,

35 
	gEGENERAL_TYPE2
,

36 
	gEGENERAL_TYPE3
,

37 
	gEINVALID_OPTION
,

38 
	gETOO_FEW_ARGS
,

39 
	gETOO_MANY_ARGS
,

40 
	gESOCKET
,

41 
	gETHREAD
,

42 
	gEGUI
,

43 
	gEFATAL
,

44 
	gEBROKEN_ASSERT
,

45 
	gEIMAGE_LOAD
,

46 
	gEDIR_CREATE
,

47 
	gEINCOMPATIBLE_OPTIONS
,

48 
	gEMISSING_REQUIRED_OPTION
,

49 
	gEINVALID_OPTION_ARG
,

50 
	gEMULTIPLE_OCCURANCES
,

51 
	gECONFIG_READER
,

52 
	gEIMAGE_SAVE
,

53 
	gECAST_TO_STRING
,

54 
	gESTRING_CAST
,

55 
	gEUTF8_TO_UTF32
,

56 
	gEOPTION_PARSE


62 ˛as†
	cîr‹
 : 
public
 
°d
::
ex˚±i⁄


70 
public
:

71 
îr‹
(

72 
îr‹_ty≥
 
t
,

73 c⁄° 
°d
::
°rög
& 
a


74 ): 
öfo
(
a
), 
ty≥
(
t
) {}

81 
îr‹
(

82 
îr‹_ty≥
 
t


83 ): 
ty≥
(
t
) {}

90 
îr‹
(

91 c⁄° 
°d
::
°rög
& 
a


92 ): 
öfo
(
a
), 
ty≥
(
EUNSPECIFIED
) {}

99 
îr‹
(

100 ): 
ty≥
(
EUNSPECIFIED
) {}

107 
vútuÆ
 ~
îr‹
(

108 Ë
throw
() {}

114 c⁄° * 
wh©
(

115 Ëc⁄° 
throw
()

124 i‡(
öfo
.
size
() > 0)

125  
öfo
.
c_°r
();

127  
ty≥_to_°rög
();

130 c⁄° * 
ty≥_to_°rög
 (

131 Ëc⁄° 
throw
()

137 i‡–
	gty≥
 =
EPORT_IN_USE
)  "EPORT_IN_USE";

138 i‡–
	gty≥
 =
ETIMEOUT
)  "ETIMEOUT";

139 i‡–
	gty≥
 =
ECONNECTION
)  "ECONNECTION";

140 i‡–
	gty≥
 =
ELISTENER
)  "ELISTENER";

141 i‡–
	gty≥
 =
ERESOLVE
)  "ERESOLVE";

142 i‡–
	gty≥
 =
EMONITOR
)  "EMONITOR";

143 i‡–
	gty≥
 =
ECREATE_THREAD
)  "ECREATE_THREAD";

144 i‡–
	gty≥
 =
ECREATE_MUTEX
)  "ECREATE_MUTEX";

145 i‡–
	gty≥
 =
ECREATE_SIGNALER
)  "ECREATE_SIGNALER";

146 i‡–
	gty≥
 =
EUNSPECIFIED
)  "EUNSPECIFIED";

147 i‡–
	gty≥
 =
EGENERAL_TYPE1
)  "EGENERAL_TYPE1";

148 i‡–
	gty≥
 =
EGENERAL_TYPE2
)  "EGENERAL_TYPE2";

149 i‡–
	gty≥
 =
EGENERAL_TYPE3
)  "EGENERAL_TYPE3";

150 i‡–
	gty≥
 =
EINVALID_OPTION
)  "EINVALID_OPTION";

151 i‡–
	gty≥
 =
ETOO_FEW_ARGS
)  "ETOO_FEW_ARGS";

152 i‡–
	gty≥
 =
ETOO_MANY_ARGS
)  "ETOO_MANY_ARGS";

153 i‡–
	gty≥
 =
ESOCKET
)  "ESOCKET";

154 i‡–
	gty≥
 =
ETHREAD
)  "ETHREAD";

155 i‡–
	gty≥
 =
EGUI
)  "EGUI";

156 i‡–
	gty≥
 =
EFATAL
)  "EFATAL";

157 i‡–
	gty≥
 =
EBROKEN_ASSERT
)  "EBROKEN_ASSERT";

158 i‡–
	gty≥
 =
EIMAGE_LOAD
)  "EIMAGE_LOAD";

159 i‡–
	gty≥
 =
EDIR_CREATE
)  "EDIR_CREATE";

160 i‡–
	gty≥
 =
EINCOMPATIBLE_OPTIONS
)  "EINCOMPATIBLE_OPTIONS";

161 i‡–
	gty≥
 =
EMISSING_REQUIRED_OPTION
)  "EMISSING_REQUIRED_OPTION";

162 i‡–
	gty≥
 =
EINVALID_OPTION_ARG
)  "EINVALID_OPTION_ARG";

163 i‡–
	gty≥
 =
EMULTIPLE_OCCURANCES
)  "EMULTIPLE_OCCURANCES";

164 i‡–
	gty≥
 =
ECONFIG_READER
)  "ECONFIG_READER";

165 i‡–
	gty≥
 =
EIMAGE_SAVE
)  "EIMAGE_SAVE";

166 i‡–
	gty≥
 =
ECAST_TO_STRING
)  "ECAST_TO_STRING";

167 i‡–
	gty≥
 =
ESTRING_CAST
)  "ESTRING_CAST";

168 i‡–
	gty≥
 =
EUTF8_TO_UTF32
)  "EUTF8_TO_UTF32";

169 i‡–
	gty≥
 =
EOPTION_PARSE
)  "EOPTION_PARSE";

173 c⁄° 
	g°d
::
°rög
 
öfo
;

174 c⁄° 
îr‹_ty≥
 
	gty≥
;

176 
	g¥iv©e
:

177 c⁄° 
îr‹
& 
›î©‹
=(constÉrror&);

182 ˛as†
	cÁèl_îr‹
 : 
public
 
îr‹


201 
public
:

202 
Áèl_îr‹
(

203 
îr‹_ty≥
 
t
,

204 c⁄° 
°d
::
°rög
& 
a


205 ): 
îr‹
(
t
,
a
Ë{
check_f‹_¥evious_Áèl_îr‹s
();}

212 
Áèl_îr‹
(

213 
îr‹_ty≥
 
t


214 ): 
îr‹
(
t
Ë{
check_f‹_¥evious_Áèl_îr‹s
();}

221 
Áèl_îr‹
(

222 c⁄° 
°d
::
°rög
& 
a


223 ): 
îr‹
(
EFATAL
,
a
Ë{
check_f‹_¥evious_Áèl_îr‹s
();}

230 
Áèl_îr‹
(

231 ): 
îr‹
(
EFATAL
Ë{
check_f‹_¥evious_Áèl_îr‹s
();}

238 
	g¥iv©e
:

240 
ölöe
 * 
mesßge
 ()

242 
buf
[2000];

243 
	gbuf
[1999] = '\0';

244  
	gbuf
;

247 
ölöe
 
dlib_Áèl_îr‹_ãrmö©e
 (

250 
	g°d
::
˚º
 << "\n**************************** FATAL ERROR DETECTED ****************************";

251 
	g°d
::
˚º
 << 
mesßge
(Ë<< 
°d
::
ídl
;

252 
	g°d
::
˚º
 << "******************************************************************************\n" << 
°d
::
ídl
;

255 
check_f‹_¥evious_Áèl_îr‹s
()

261 #i‡
deföed
(
MATLAB_MEX_FILE
Ë|| deföed(
DLIB_NO_ABORT_ON_2ND_FATAL_ERROR
)

264 
boﬁ
 
	gis_fú°_Áèl_îr‹
 = 
åue
;

265 i‡(
	gis_fú°_Áèl_îr‹
 =
Ál£
)

267 
°d
::
˚º
 << "\n\¿************************** FATAL ERROR DETECTED ************************** " << std::
ídl
;

268 
	g°d
::
˚º
 << " ************************** FATAL ERROR DETECTED ************************** " << 
°d
::
ídl
;

269 
	g°d
::
˚º
 << " ************************** FATAL ERROR DETECTED ************************** \n" << 
°d
::
ídl
;

270 
	g°d
::
˚º
 << "Two fatalÉrrors have been detected,Åhe first was inappropriately ignored. \n"

273 << "Thêîr‹ mesßgê‰omÅhi†Áè»îr‹ was:\n" << 
this
->
wh©
(Ë<< "\n\n" << 
°d
::
ídl
;

274 
usög
 
«me•a˚
 
	g°d
;

275 
as£π
(
Ál£
);

276 
ab‹t
();

282 * 
	gmsg
 = 
mesßge
();

283 
	gi
;

284 
	gi
 = 0; i < 2000-1 && i < 
	gthis
->
	göfo
.
size
(); ++i)

285 
	gmsg
[
i
] = 
öfo
[i];

286 
	gmsg
[
i
] = '\0';

290 
	g°d
::
£t_ãrmö©e
(&
dlib_Áèl_îr‹_ãrmö©e
);

292 
	gis_fú°_Áèl_îr‹
 = 
Ál£
;

299 ˛as†
	cgui_îr‹
 : 
public
 
îr‹


301 
public
:

302 
gui_îr‹
(

303 
îr‹_ty≥
 
t
,

304 c⁄° 
°d
::
°rög
& 
a


305 ): 
îr‹
(
t
,
a
) {}

312 
gui_îr‹
(

313 
îr‹_ty≥
 
t


314 ): 
îr‹
(
t
) {}

321 
gui_îr‹
(

322 c⁄° 
°d
::
°rög
& 
a


323 ): 
îr‹
(
EGUI
,
a
) {}

330 
gui_îr‹
(

331 ): 
îr‹
(
EGUI
) {}

341 ˛as†
	csockë_îr‹
 : 
public
 
îr‹


343 
public
:

344 
sockë_îr‹
(

345 
îr‹_ty≥
 
t
,

346 c⁄° 
°d
::
°rög
& 
a


347 ): 
îr‹
(
t
,
a
) {}

354 
sockë_îr‹
(

355 
îr‹_ty≥
 
t


356 ): 
îr‹
(
t
) {}

363 
sockë_îr‹
(

364 c⁄° 
°d
::
°rög
& 
a


365 ): 
îr‹
(
ESOCKET
,
a
) {}

372 
sockë_îr‹
(

373 ): 
îr‹
(
ESOCKET
) {}

383 ˛as†
	cthªad_îr‹
 : 
public
 
îr‹


385 
public
:

386 
thªad_îr‹
(

387 
îr‹_ty≥
 
t
,

388 c⁄° 
°d
::
°rög
& 
a


389 ): 
îr‹
(
t
,
a
) {}

396 
thªad_îr‹
(

397 
îr‹_ty≥
 
t


398 ): 
îr‹
(
t
) {}

405 
thªad_îr‹
(

406 c⁄° 
°d
::
°rög
& 
a


407 ): 
îr‹
(
ETHREAD
,
a
) {}

414 
thªad_îr‹
(

415 ): 
îr‹
(
ETHREAD
) {}

425 ˛as†
	cimpossibÀ_œbñög_îr‹
 : 
public
 
dlib
::
îr‹


440 
public
:

441 
impossibÀ_œbñög_îr‹
(c⁄° 
°d
::
°rög
& 
msg
Ë: 
dlib
::
îr‹
(msg) {};

	@viper/concurrentqueue-src/benchmarks/dlib/float_details.h

3 #i‚de‡
DLIB_FLOAT_DEtAILS_Hh_


4 
	#DLIB_FLOAT_DEtAILS_Hh_


	)

6 
	~<cm©h
>

7 
	~"Ægs.h
"

8 
	~<limôs
>

10 
«me•a˚
 
	gdlib


12 
	sÊﬂt_dëaûs


40 
Êﬂt_dëaûs
(

41 
öt64
 
m™
,

42 
öt16
 
exp


43 Ë: 
m™tisß
(
m™
), 
exp⁄ít
(
exp
) {}

50 
Êﬂt_dëaûs
() :

51 
m™tisß
(0), 
exp⁄ít
(0)

58 
Êﬂt_dëaûs
 ( c⁄° & 
vÆ
Ë{ *
	gthis
 = val; }

59 
Êﬂt_dëaûs
 ( c⁄° & 
vÆ
Ë{ *
	gthis
 = val; }

60 
Êﬂt_dëaûs
 ( c⁄° & 
vÆ
Ë{ *
	gthis
 = val; }

68 
	gÊﬂt_dëaûs
& 
	g›î©‹
–c⁄° & 
vÆ
Ë{ 
c⁄vît_‰om_T
(vÆ);  *
	gthis
; }

69 
	gÊﬂt_dëaûs
& 
	g›î©‹
–c⁄° & 
vÆ
Ë{ 
c⁄vît_‰om_T
(vÆ);  *
	gthis
; }

70 
	gÊﬂt_dëaûs
& 
	g›î©‹
–c⁄° & 
vÆ
Ë{ 
c⁄vît_‰om_T
(vÆ);  *
	gthis
; }

78 
›î©‹
 (Ëc⁄° {  
	gc⁄vît_to_T
<>(); }

79 
›î©‹
 (Ëc⁄° {  
	gc⁄vît_to_T
<>(); }

80 
›î©‹
 (Ëc⁄° {  
	gc⁄vît_to_T
<>(); }

86 c⁄° 
öt16
 
	gis_öf
 = 32000;

87 c⁄° 
öt16
 
	gis_nöf
 = 32001;

88 c⁄° 
öt16
 
	gis_«n
 = 32002;

90 
öt64
 
	gm™tisß
;

91 
öt16
 
	gexp⁄ít
;

94 
	g¥iv©e
:

103 
ãm∂©e
 <
ty≥«me
 
T
>

104 
c⁄vît_‰om_T
 (

105 c⁄° 
T
& 
vÆ


108 
m™tisß
 = 0;

110 c⁄° 
	gdigôs
 = 
dlib
::
tmö
<
°d
::
numîic_limôs
<
T
>::
digôs
, 63>::
vÆue
;

112 i‡(
	gvÆ
 =
°d
::
numîic_limôs
<
T
>::
öföôy
())

114 
exp⁄ít
 = 
is_öf
;

116 i‡(
	gvÆ
 =-
°d
::
numîic_limôs
<
T
>::
öföôy
())

118 
exp⁄ít
 = 
is_nöf
;

120 i‡(
	gvÆ
 < 
	g°d
::
numîic_limôs
<
T
>::
öföôy
())

122 
exp
;

123 
	gm™tisß
 = 
°©ic_ˇ°
<
öt64
>(
°d
::
‰exp
(
vÆ
, &
exp
)*(((
	guöt64
)1)<<
	gdigôs
));

124 
	gexp⁄ít
 = 
exp
 - 
digôs
;

130 
	gi
 = 0; i < 8 && ((
	gm™tisß
&0xFF)==0); ++i)

132 
	gm™tisß
 >>= 8;

133 
	gexp⁄ít
 += 8;

138 
	gexp⁄ít
 = 
is_«n
;

142 
	gãm∂©e
 <
ty≥«me
 
	gT
>

143 
T
 
c⁄vît_to_T
 (

146 i‡(
	gexp⁄ít
 < 
	gis_öf
)

147  
	g°d
::
ldexp
((
T
)
m™tisß
, 
exp⁄ít
);

148 i‡(
	gexp⁄ít
 =
is_öf
)

149  
°d
::
numîic_limôs
<
T
>::
öföôy
();

150 i‡(
	gexp⁄ít
 =
is_nöf
)

151  -
°d
::
numîic_limôs
<
T
>::
öföôy
();

153  
	g°d
::
numîic_limôs
<
T
>::
quõt_NaN
();

	@viper/concurrentqueue-src/benchmarks/dlib/hash.h

3 #i‚de‡
DLIB_HASh_


4 
	#DLIB_HASh_


	)

7 
	~"gíîÆ_hash/hash.h
"

8 
	~"gíîÆ_hash/øndom_hashög.h
"

9 
	~"gíîÆ_hash/cou¡_bôs.h
"

	@viper/concurrentqueue-src/benchmarks/dlib/interfaces/cmd_line_parser_option.h

3 #i‚de‡
DLIB_CMD_LINE_PARSER_OPTIOn_


4 
	#DLIB_CMD_LINE_PARSER_OPTIOn_


	)

6 
	~<°rög
>

8 
«me•a˚
 
	gdlib


13 
	gãm∂©e
 <

14 
ty≥«me
 
	gch¨T


16 ˛as†
	ccmd_löe_∑r£r_›ti⁄


27 
	gpublic
:

29 
ch¨T
 
	tch¨_ty≥
;

30 
	g°d
::
	tbasic_°rög
<
	tch¨T
> 
	t°rög_ty≥
;

32 
	gvútuÆ
 ~
cmd_löe_∑r£r_›ti⁄
 (

35 
vútuÆ
 c⁄° 
	g°rög_ty≥
& 
«me
 (

42 
vútuÆ
 c⁄° 
	g°rög_ty≥
& 
group_«me
 (

50 
vútuÆ
 c⁄° 
	g°rög_ty≥
& 
des¸ùti⁄
 (

57 
vútuÆ
 
numbî_of_¨gumíts
(

64 
vútuÆ
 
cou¡
(

71 
vútuÆ
 c⁄° 
	g°rög_ty≥
& 
¨gumít
 (

72 
¨g
 = 0,

73 
N
 = 0

84 
ölöe
 
›î©‹
 
boﬁ
 (

85 Ëc⁄° {  
cou¡
() > 0; }

91 
	g¥Ÿe˘ed
:

94 
cmd_löe_∑r£r_›ti⁄
& 
›î©‹
=(c⁄° cmd_löe_∑r£r_›ti⁄&){ *
this
;}

99 
	gãm∂©e
 < 
ty≥«me
 
	gch¨T
 >

100 
	gcmd_löe_∑r£r_›ti⁄
<
	gch¨T
>::~
	$cmd_löe_∑r£r_›ti⁄
(Ë{
	}
}

	@viper/concurrentqueue-src/benchmarks/dlib/interfaces/enumerable.h

3 #i‚de‡
DLIB_ENUMERABLe_INTERFACE_


4 
	#DLIB_ENUMERABLe_INTERFACE_


	)

6 
«me•a˚
 
	gdlib


11 
	gãm∂©e
 <

12 
ty≥«me
 
	gT


14 ˛as†
	cíumîabÀ


45 
	gpublic
:

46 
T
 
	tty≥
;

48 
ölöe
 
	gvútuÆ
 ~
íumîabÀ
(

51 
vútuÆ
 
boﬁ
 
©_°¨t
 (

60 
vútuÆ
 
ª£t
 (

68 
vútuÆ
 
boﬁ
 
cuºít_ñemít_vÆid
 (

76 
vútuÆ
 c⁄° 
	gT
& 
ñemít
 (

85 
vútuÆ
 
	gT
& 
ñemít
 (

94 
vútuÆ
 
boﬁ
 
move_√xt
 (

107 
vútuÆ
 
size_t
 
size
 (

114 
	g¥Ÿe˘ed
:

117 
íumîabÀ
& 
›î©‹
=(c⁄°ÉnumîabÀ&Ë{ *
this
;}

122 
	gãm∂©e
 <
ty≥«me
 
	gT
>

123 
	gíumîabÀ
<
	gT
>::~
	$íumîabÀ
(Ë{
	}
}

	@viper/concurrentqueue-src/benchmarks/dlib/interfaces/map_pair.h

3 #i‚de‡
DLIB_MAP_PAIr_INTERFACE_


4 
	#DLIB_MAP_PAIr_INTERFACE_


	)

6 
«me•a˚
 
	gdlib


11 
	gãm∂©e
 <

12 
ty≥«me
 
	gT1
,

13 
ty≥«me
 
	gT2


15 ˛as†
	cm≠_∑ú


30 
	gpublic
:

31 
T1
 
	tkey_ty≥
;

32 
T2
 
	tvÆue_ty≥
;

34 
	gvútuÆ
 ~
m≠_∑ú
(

37 
vútuÆ
 c⁄° 
	gT1
& 
key
(

44 
vútuÆ
 c⁄° 
	gT2
& 
vÆue
(

51 
vútuÆ
 
	gT2
& 
vÆue
(

58 
	g¥Ÿe˘ed
:

61 
m≠_∑ú
<
T1
,
	gT2
>& 
	g›î©‹
=(c⁄° m≠_∑ú<T1,T2>&Ë{ *
	gthis
;}

66 
	gãm∂©e
 <
ty≥«me
 
	gT1
,ty≥«mê
	gT2
>

67 
	gm≠_∑ú
<
	gT1
,
	gT2
>::~
	$m≠_∑ú
 (Ë{
	}
}

	@viper/concurrentqueue-src/benchmarks/dlib/interfaces/remover.h

3 #i‚de‡
DLIB_REMOVER_KERNEl_INTERFACE_


4 
	#DLIB_REMOVER_KERNEl_INTERFACE_


	)

6 
	~<fun˘i⁄Æ
>

9 
«me•a˚
 
	gdlib


12 
	gãm∂©e
 <

13 
ty≥«me
 
	gT


15 ˛as†
	cªmovî


34 
	gpublic
:

35 
T
 
	tty≥
;

37 
	gvútuÆ
 ~
ªmovî
(

44 
vútuÆ
 
ªmove_™y
 (

45 
T
& 
ôem


57 
vútuÆ
 
size_t
 
size
 (

64 
	g¥Ÿe˘ed
:

67 
ªmovî
& 
›î©‹
=(c⁄°Ñemovî&Ë{ *
this
;}

72 
	gãm∂©e
 <

73 
ty≥«me
 
	gT
,

74 
ty≥«me
 
	gcom∑ª


76 
˛ass
 
	gasc_ªmovî
 : 
public
 
ªmovî
<
T
>

89 
public
:

90 
com∑ª
 
	tcom∑ª_ty≥
;

92 
	g¥Ÿe˘ed
:

94 
asc_ªmovî
& 
›î©‹
=(c⁄°ásc_ªmovî&Ë{ *
this
;}

99 
	gãm∂©e
 <

100 
ty≥«me
 
	gdomaö
,

101 
ty≥«me
 
	gønge


103 ˛as†
	c∑ú_ªmovî


126 
	gpublic
:

127 
domaö
 
	tdomaö_ty≥
;

128 
ønge
 
	tønge_ty≥
;

130 
	gvútuÆ
 ~
∑ú_ªmovî
(

137 
vútuÆ
 
ªmove_™y
 (

138 
domaö
& 
d
,

139 
ønge
& 
r


155 
vútuÆ
 
size_t
 
size
 (

163 
	g¥Ÿe˘ed
:

166 
∑ú_ªmovî
& 
›î©‹
=(c⁄°Öaú_ªmovî&Ë{ *
this
;}

173 
	gãm∂©e
 <

174 
ty≥«me
 
	gdomaö
,

175 
ty≥«me
 
	gønge
,

176 
ty≥«me
 
	gcom∑ª


178 
˛ass
 
	gasc_∑ú_ªmovî
 : 
public
 
∑ú_ªmovî
<
domaö
,
	gønge
>

195 
	gpublic
:

196 
com∑ª
 
	tcom∑ª_ty≥
;

198 
	g¥Ÿe˘ed
:

200 
asc_∑ú_ªmovî
& 
›î©‹
=(c⁄°ásc_∑ú_ªmovî&Ë{ *
this
;}

206 
	gãm∂©e
 <
ty≥«me
 
	gT
>

207 
	gªmovî
<
	gT
>::~
	$ªmovî
(Ë{
	}
}

210 
ãm∂©e
 <
ty≥«me
 
domaö
,Åy≥«mê
	gønge
>

211 
	g∑ú_ªmovî
<
	gdomaö
,
	gønge
>::~
	$∑ú_ªmovî
(Ë{
	}
}

	@viper/concurrentqueue-src/benchmarks/dlib/is_kind.h

3 #i‚de‡
DLIB_IS_KINd_H_


4 
	#DLIB_IS_KINd_H_


	)

6 
	~<ve˘‹
>

8 
«me•a˚
 
	gdlib


18 
	sdeÁu…_is_köd_vÆue
 { c⁄° 
boﬁ
 
	gvÆue
 = 
Ál£
; };

22 
	gãm∂©e
 <
ty≥«me
 
	gT
>

23 
	gis_gøph
 : 
public
 
deÁu…_is_köd_vÆue


35 
	gãm∂©e
 <
ty≥«me
 
	gT
>

36 
	gis_dúe˘ed_gøph
 : 
public
 
deÁu…_is_köd_vÆue


48 
	gãm∂©e
 <
ty≥«me
 
	gT
,Åy≥«mê
	ghñ≥r
 = >

49 
is_m©rix
 : 
public
 
deÁu…_is_köd_vÆue


59 
ASSERT_ARE_SAME_TYPE
(
hñ≥r
,);

64 
	gãm∂©e
 <
ty≥«me
 
	gT
>

65 
	gis_¨øy2d
 : 
public
 
deÁu…_is_köd_vÆue


77 
	gãm∂©e
 <
ty≥«me
 
	gT
>

78 
	gis_¨øy
 : 
public
 
deÁu…_is_köd_vÆue


90 
	gãm∂©e
 <
ty≥«me
 
	gT
>

91 
	gis_°d_ve˘‹
 : 
public
 
deÁu…_is_köd_vÆue


103 
	gãm∂©e
 <
ty≥«me
 
	gT
>

104 
	gis_∑ú
 : 
public
 
deÁu…_is_köd_vÆue


116 
	gãm∂©e
 <
ty≥«me
 
	gT
>

117 
	gis_ønd
 : 
public
 
deÁu…_is_köd_vÆue


129 
	gãm∂©e
 <
ty≥«me
 
	gT
>

130 
	gis_c⁄fig_ªadî
 : 
public
 
deÁu…_is_köd_vÆue


146 
	gãm∂©e
 <
ty≥«me
 
	gT
,Åy≥«mê
	gÆloc
>

147 
	gis_°d_ve˘‹
<
	g°d
::
ve˘‹
<
T
,
	gÆloc
> > { c⁄° 
boﬁ
 
	gvÆue
 = 
åue
; };

148 
	gãm∂©e
 <
ty≥«me
 
	gT
> 
	gis_°d_ve˘‹
<T&> { c⁄° 
boﬁ
 
	gvÆue
 = 
is_°d_ve˘‹
<
T
>::
vÆue
; };

149 
	gãm∂©e
 <
ty≥«me
 
	gT
> 
	gis_°d_ve˘‹
<c⁄° T&>{ c⁄° 
boﬁ
 
	gvÆue
 = 
is_°d_ve˘‹
<
T
>::
vÆue
; };

150 
	gãm∂©e
 <
ty≥«me
 
	gT
> 
	gis_°d_ve˘‹
<c⁄° T> { c⁄° 
boﬁ
 
	gvÆue
 = 
is_°d_ve˘‹
<
T
>::
vÆue
; };

154 
	gãm∂©e
 <
ty≥«me
 
	gT
,Åy≥«mê
	gU
>

155 
	gis_∑ú
<
	g°d
::
∑ú
<
T
,
	gU
> > { c⁄° 
boﬁ
 
	gvÆue
 = 
åue
; };

	@viper/concurrentqueue-src/benchmarks/dlib/logger.h

3 #i‚de‡
DLIB_LOGGEr_


4 
	#DLIB_LOGGEr_


	)

6 
	~"loggî/loggî_kî√l_1.h
"

7 
	~"loggî/exåa_loggî_hódîs.h
"

8 
	~"loggî/loggî_c⁄fig_fûe.h
"

	@viper/concurrentqueue-src/benchmarks/dlib/logger/extra_logger_headers.h

3 #i‚de‡
DLIB_EXTRA_LOGGER_HEADERs_


4 
	#DLIB_EXTRA_LOGGER_HEADERs_


	)

6 
	~"loggî_kî√l_ab°ø˘.h
"

7 
	~"loggî_kî√l_1.h
"

8 
	~<io°ªam
>

9 
	~<°rög
>

10 
	~"../uöä.h
"

14 
«me•a˚
 
	gdlib


17 
¥öt_d©ëime_loggî_hódî
 (

18 
°d
::
o°ªam
& 
out
,

19 c⁄° 
°d
::
°rög
& 
loggî_«me
,

20 c⁄° 
log_Àvñ
& 
l
,

21 c⁄° 
uöt64
 
thªad_id


36 #ifde‡
NO_MAKEFILE


37 
	~"exåa_loggî_hódîs.˝p
"

	@viper/concurrentqueue-src/benchmarks/dlib/logger/logger_config_file.h

3 #i‚de‡
DLIB_LOGGER_CONFIg_FILE_


4 
	#DLIB_LOGGER_CONFIg_FILE_


	)

6 
	~"loggî_kî√l_ab°ø˘.h
"

7 
	~"loggî_kî√l_1.h
"

8 
	~<°rög
>

9 
	~"../c⁄fig_ªadî.h
"

13 
«me•a˚
 
	gdlib


15 ˛as†
	cloggî_c⁄fig_fûe_îr‹
 : 
public
 
îr‹


22 
public
:

23 
loggî_c⁄fig_fûe_îr‹
(c⁄° 
°d
::
°rög
& 
s
):
îr‹
(s){}

26 
c⁄figuª_loggîs_‰om_fûe
 (

27 c⁄° 
°d
::
°rög
& 
fûe_«me


37 
c⁄figuª_loggîs_‰om_fûe
 (

38 c⁄° 
c⁄fig_ªadî
& 
¸


128 #ifde‡
NO_MAKEFILE


129 
	~"loggî_c⁄fig_fûe.˝p
"

	@viper/concurrentqueue-src/benchmarks/dlib/logger/logger_kernel_1.h

3 #i‚de‡
DLIB_LOGGER_KERNEl_1_


4 
	#DLIB_LOGGER_KERNEl_1_


	)

6 
	~<limôs
>

7 
	~<mem‹y
>

8 
	~<c°rög
>

9 
	~<°ªambuf
>

10 
	~<ve˘‹
>

12 
	~"../thªads.h
"

13 
	~"../misc_≠i.h
"

14 
	~"../£t.h
"

15 
	~"loggî_kî√l_ab°ø˘.h
"

16 
	~"../Ægs.h
"

17 
	~"../as£π.h
"

18 
	~"../uöä.h
"

19 
	~"../m≠.h
"

20 
	~"../membî_fun˘i⁄_poöãr.h
"

22 
«me•a˚
 
	gdlib


27 ˛as†
	clog_Àvñ


29 
	gpublic
:

30 
log_Àvñ
(

31 
¥i‹ôy_
,

32 c⁄° * 
«me_


34 
¥i‹ôy
(
¥i‹ôy_
)

36 
°∫˝y
(
«me
,
«me_
,19);

37 
	g«me
[19] = '\0';

40 
boﬁ
 
	g›î©‹
< (c⁄° 
	glog_Àvñ
& 
	grhs
Ëc⁄° {  
	g¥i‹ôy
 <Ñhs.priority; }

41 
boﬁ
 
	g›î©‹
<=(c⁄° 
log_Àvñ
& 
rhs
Ëc⁄° {  
¥i‹ôy
 <=Ñhs.priority; }

42 
boﬁ
 
	g›î©‹
> (c⁄° 
	glog_Àvñ
& 
	grhs
Ëc⁄° {  
	g¥i‹ôy
 >Ñhs.priority; }

43 
boﬁ
 
	g›î©‹
>=(c⁄° 
log_Àvñ
& 
rhs
Ëc⁄° {  
¥i‹ôy
 >=Ñhs.priority; }

45 
	g¥i‹ôy
;

46 
	g«me
[20];

49 
ölöe
 
	g°d
::
o°ªam
& 
›î©‹
<< (
°d
::o°ªam& 
out
, c⁄° 
	glog_Àvñ
& 
	gôem
)

51 
	gout
 << 
	gôem
.
	g«me
;

52  
	gout
;

55 c⁄° 
log_Àvñ
 
LALL
 (
°d
::
numîic_limôs
<>::
mö
(),"ALL");

56 c⁄° 
log_Àvñ
 
LNONE
 (
°d
::
numîic_limôs
<>::
max
(),"NONE");

57 c⁄° 
log_Àvñ
 
LTRACE
(-100,"TRACE");

58 c⁄° 
log_Àvñ
 
LDEBUG
(0 ,"DEBUG");

59 c⁄° 
log_Àvñ
 
LINFO
 (100,"INFO ");

60 c⁄° 
log_Àvñ
 
LWARN
 (200,"WARN ");

61 c⁄° 
log_Àvñ
 
LERROR
(300,"ERROR");

62 c⁄° 
log_Àvñ
 
LFATAL
(400,"FATAL");

66 
£t_Æl_loggög_ouçut_°ªams
 (

67 
°d
::
o°ªam
& 
out


70 
£t_Æl_loggög_Àvñs
 (

71 c⁄° 
log_Àvñ
& 
√w_Àvñ


74 (*
	t¥öt_hódî_ty≥
)(

75 
	t°d
::
	to°ªam
& 
	tout
,

76 c⁄° 
	t°d
::
	t°rög
& 
	tloggî_«me
,

77 c⁄° 
	tlog_Àvñ
& 
	tl
,

78 c⁄° 
	tuöt64
 
	tthªad_id


81 
	`£t_Æl_loggög_hódîs
 (

82 c⁄° 
¥öt_hódî_ty≥
& 
√w_hódî


87 
	`¥öt_deÁu…_loggî_hódî
 (

88 
°d
::
o°ªam
& 
out
,

89 c⁄° 
°d
::
°rög
& 
loggî_«me
,

90 c⁄° 
log_Àvñ
& 
l
,

91 c⁄° 
uöt64
 
thªad_id


94 
ãm∂©e
 <

95 
ty≥«me
 
T


97 
	`£t_Æl_loggög_ouçut_hooks
 (

98 
T
& 
obje˘
,

99 (
T
::*
hook_
)(c⁄° 
°d
::
°rög
& 
loggî_«me
,

100 c⁄° 
log_Àvñ
& 
l
,

101 c⁄° 
uöt64
 
thªad_id
,

102 c⁄° * 
mesßge_to_log
)

105 
ãm∂©e
 <

106 
ty≥«me
 
T


108 
	$£t_Æl_loggög_ouçut_hooks
 (

109 
T
& 
obje˘


112 
	`£t_Æl_loggög_ouçut_hooks
(
obje˘
, &
T
::
log
);

113 
	}
}

117 ˛as†
	cloggî


149 ˛as†
	cloggî_°ªam


162 
	gpublic
:

163 
loggî_°ªam
 (

164 c⁄° 
log_Àvñ
& 
l_
,

165 
loggî
& 
log_


167 
l
(
l_
),

168 
log
(
log_
),

169 
bìn_u£d
(
Ál£
),

170 
íabÀd
 (
l
.
¥i‹ôy
 >
log
.
cur_Àvñ
.priority)

173 
ölöe
 ~
loggî_°ªam
(

176 i‡(!
bìn_u£d
)

182 
¥öt_íd_of_löe
();

186 
boﬁ
 
is_íabÀd
 (

187 Ëc⁄° {  
	gíabÀd
; }

189 
	gãm∂©e
 <
ty≥«me
 
	gT
>

190 
ölöe
 
	gloggî_°ªam
& 
	g›î©‹
 << (

191 c⁄° 
	gT
& 
	gôem


194 i‡(!
	gíabÀd
)

196  *
	gthis
;

200 
¥öt_hódî_™d_°uff
();

201 
	glog
.
	gout
 << 
	gôem
;

202  *
	gthis
;

206 
	g¥iv©e
:

208 
¥öt_hódî_™d_°uff
 (

218 
¥öt_íd_of_löe
 (

226 c⁄° 
	glog_Àvñ
& 
	gl
;

227 
	gloggî
& 
	glog
;

228 
boﬁ
 
	gbìn_u£d
;

229 c⁄° 
boﬁ
 
	gíabÀd
;

235 
‰õnd
 
˛ass
 
	gloggî_°ªam
;

236 
	gpublic
:

238 
membî_fun˘i⁄_poöãr
<c⁄° 
	t°d
::
	t°rög
&, c⁄° 
	tlog_Àvñ
&,

239 c⁄° 
	tuöt64
, c⁄° *> 
	thook_mÂ
;

241 
loggî
 (

242 c⁄° 
°d
::
°rög
& 
«me_


245 
	gvútuÆ
 ~
loggî
 (

248 c⁄° 
	g°d
::
°rög
& 
«me
 (

249 Ëc⁄° {  
loggî_«me
; }

251 
loggî_°ªam
 
	g›î©‹
 << (

252 c⁄° 
	glog_Àvñ
& 
	gl


253 Ëc⁄° {  
loggî_°ªam
(
l
,
c⁄°_ˇ°
<
loggî
&>(*
this
)); }

255 
boﬁ
 
is_chûd_of
 (

256 c⁄° 
loggî
& 
log


259  (
«me
().
föd
(
log
.name() + ".") == 0) || (log.name() ==Çame());

262 c⁄° 
log_Àvñ
 
Àvñ
 (

265 
auto_muãx
 
M
(
gd
.
m
);

266  
log_Àvñ
(
cur_Àvñ
);

269 
£t_Àvñ
 (

270 c⁄° 
log_Àvñ
& 
√w_Àvñ


273 
auto_muãx
 
M
(
gd
.
m
);

274 
	ggd
.
	gloggîs
.
ª£t
();

275 
	ggd
.
	gloggîs
.
move_√xt
())

277 i‡(
	ggd
.
	gloggîs
.
ñemít
()->
is_chûd_of
(*
this
))

278 
	ggd
.
	gloggîs
.
ñemít
()->
	gcur_Àvñ
 = 
√w_Àvñ
;

281 
	ggd
.
£t_Àvñ
(
loggî_«me
, 
√w_Àvñ
);

284 
boﬁ
 
auto_Êush
 (

287 
auto_muãx
 
M
(
gd
.
m
);

288  
	gauto_Êush_íabÀd
;

291 
£t_auto_Êush
 (

292 
boﬁ
 
íabÀd


295 
auto_muãx
 
M
(
gd
.
m
);

296 
	ggd
.
	gloggîs
.
ª£t
();

297 
	ggd
.
	gloggîs
.
move_√xt
())

299 i‡(
	ggd
.
	gloggîs
.
ñemít
()->
is_chûd_of
(*
this
))

300 
	ggd
.
	gloggîs
.
ñemít
()->
	gauto_Êush_íabÀd
 = 
íabÀd
;

303 
	ggd
.
£t_auto_Êush
(
loggî_«me
, 
íabÀd
);

306 
	g°d
::
°ªambuf
* 
ouçut_°ªambuf
 (

309 
auto_muãx
 
M
(
gd
.
m
);

312 i‡(
	ghook
)

315  
	gout
.
rdbuf
();

318 
	gãm∂©e
 <

319 
ty≥«me
 
	gT


321 
£t_ouçut_hook
 (

322 
T
& 
obje˘
,

323 (
T
::*
hook_
)(c⁄° 
°d
::
°rög
& 
loggî_«me
,

324 c⁄° 
log_Àvñ
& 
l
,

325 c⁄° 
uöt64
 
thªad_id
,

326 c⁄° * 
mesßge_to_log
)

329 
auto_muãx
 
M
(
gd
.
m
);

330 
	ghook
.
£t
(
obje˘
, 
hook_
);

332 
	ggd
.
	gloggîs
.
ª£t
();

333 
	ggd
.
	gloggîs
.
move_√xt
())

335 i‡(
	ggd
.
	gloggîs
.
ñemít
()->
is_chûd_of
(*
this
))

337 
	ggd
.
	gloggîs
.
ñemít
()->
	gout
.
rdbuf
(&
gd
.
hookbuf
);

338 
	ggd
.
	gloggîs
.
ñemít
()->
	ghook
 = 
hook
;

342 
	ggd
.
£t_ouçut_hook
(
loggî_«me
, 
hook
);

343 
	ggd
.
£t_ouçut_°ªam
(
loggî_«me
, 
gd
.
hookbuf
);

346 
£t_ouçut_°ªam
 (

347 
°d
::
o°ªam
& 
out_


350 
auto_muãx
 
M
(
gd
.
m
);

351 
	ggd
.
	gloggîs
.
ª£t
();

352 
	ggd
.
	gloggîs
.
move_√xt
())

354 i‡(
	ggd
.
	gloggîs
.
ñemít
()->
is_chûd_of
(*
this
))

356 
	ggd
.
	gloggîs
.
ñemít
()->
	gout
.
rdbuf
(
out_
.rdbuf());

357 
	ggd
.
	gloggîs
.
ñemít
()->
	ghook
.
˛ór
();

361 
	ggd
.
£t_ouçut_°ªam
(
loggî_«me
, 
out_
);

363 
	ghook
.
˛ór
();

364 
	ggd
.
£t_ouçut_hook
(
loggî_«me
, 
hook
);

367 
¥öt_hódî_ty≥
 
loggî_hódî
 (

368 Ëc⁄° {  
	g¥öt_hódî
; }

370 
£t_loggî_hódî
 (

371 
¥öt_hódî_ty≥
 
ph


374 
auto_muãx
 
M
(
gd
.
m
);

375 
	ggd
.
	gloggîs
.
ª£t
();

376 
	ggd
.
	gloggîs
.
move_√xt
())

378 i‡(
	ggd
.
	gloggîs
.
ñemít
()->
is_chûd_of
(*
this
))

379 
	ggd
.
	gloggîs
.
ñemít
()->
	g¥öt_hódî
 = 
ph
;

382 
	ggd
.
£t_loggî_hódî
(
loggî_«me
, 
ph
);

385 
	g¥iv©e
:

390 
	sglobÆ_d©a


392 
rmuãx
 
m
;

393 
	g£t
<
	gloggî
*>::
kî√l_1b
 
loggîs
;

394 
	gm≠
<
	gthªad_id_ty≥
,
	guöt64
>::
kî√l_1b
 
thªad_«mes
;

395 
uöt64
 
	g√xt_thªad_«me
;

402 ˛as†
	chook_°ªambuf
 : 
public
 
°d
::
°ªambuf


404 
public
:

405 
°d
::
ve˘‹
<> 
buf„r
;

406 
öt_ty≥
 
ovîÊow
 ( i¡_ty≥ 
c
)

408 i‡(
	gc
 !
EOF
Ë
buf„r
.
push_back
(
°©ic_ˇ°
<>(
c
));

409  
	gc
;

412 
	g°d
::
°ªamsize
 
x•uä
 ( c⁄° * 
s
, 
°d
::°ªamsizê
num
)

414 
buf„r
.
ö£π
(buf„r.
íd
(), 
s
, s+
num
);

415  
	gnum
;

419 
hook_°ªambuf
 
	ghookbuf
;

421 
globÆ_d©a
 (

424 ~
globÆ_d©a
(

427 
uöt64
 
gë_thªad_«me
 (

437 
thªad_íd_h™dÀr
 (

444 
	sÀvñ_c⁄èöî


446 
Àvñ_c⁄èöî
 ();

448 
log_Àvñ
 
	gvÆ
;

449 
	gm≠
<
	g°d
::
°rög
,°d::
unique_±r
<
Àvñ_c⁄èöî
> >::
kî√l_1b_c
 
èbÀ
;

450 } 
	gÀvñ_èbÀ
;

452 c⁄° 
log_Àvñ
 
Àvñ
 (

453 c⁄° 
°d
::
°rög
& 
«me


461 
£t_Àvñ
 (

462 c⁄° 
°d
::
°rög
& 
«me
,

463 c⁄° 
log_Àvñ
& 
√w_Àvñ


474 
	sauto_Êush_c⁄èöî


476 
boﬁ
 
	gvÆ
;

477 
	gm≠
<
	g°d
::
°rög
,°d::
unique_±r
<
auto_Êush_c⁄èöî
> >::
kî√l_1b_c
 
èbÀ
;

478 } 
	gauto_Êush_èbÀ
;

480 
boﬁ
 
auto_Êush
 (

481 c⁄° 
°d
::
°rög
& 
«me


489 
£t_auto_Êush
 (

490 c⁄° 
°d
::
°rög
& 
«me
,

491 
boﬁ
 
íabÀd


502 
	souçut_°ªambuf_c⁄èöî


504 
	g°d
::
°ªambuf
* 
vÆ
;

505 
	gm≠
<
	g°d
::
°rög
,°d::
unique_±r
<
ouçut_°ªambuf_c⁄èöî
> >::
kî√l_1b_c
 
èbÀ
;

506 } 
	g°ªambuf_èbÀ
;

508 
	g°d
::
°ªambuf
* 
ouçut_°ªambuf
 (

509 c⁄° 
°d
::
°rög
& 
«me


517 
£t_ouçut_°ªam
 (

518 c⁄° 
°d
::
°rög
& 
«me
,

519 
°d
::
o°ªam
& 
out_


530 
£t_ouçut_°ªam
 (

531 c⁄° 
°d
::
°rög
& 
«me
,

532 
°d
::
°ªambuf
& 
buf


543 
	souçut_hook_c⁄èöî


545 
hook_mÂ
 
	gvÆ
;

546 
	gm≠
<
	g°d
::
°rög
,°d::
unique_±r
<
ouçut_hook_c⁄èöî
> >::
kî√l_1b_c
 
èbÀ
;

547 } 
	ghook_èbÀ
;

549 
hook_mÂ
 
ouçut_hook
 (

550 c⁄° 
°d
::
°rög
& 
«me


558 
£t_ouçut_hook
 (

559 c⁄° 
°d
::
°rög
& 
«me
,

560 c⁄° 
hook_mÂ
& 
hook


571 
	sloggî_hódî_c⁄èöî


573 
¥öt_hódî_ty≥
 
	gvÆ
;

574 
	gm≠
<
	g°d
::
°rög
,°d::
unique_±r
<
loggî_hódî_c⁄èöî
> >::
kî√l_1b_c
 
èbÀ
;

575 } 
	ghódî_èbÀ
;

577 
¥öt_hódî_ty≥
 
loggî_hódî
 (

578 c⁄° 
°d
::
°rög
& 
«me


586 
£t_loggî_hódî
 (

587 c⁄° 
°d
::
°rög
& 
«me
,

588 
¥öt_hódî_ty≥
 
ph


601 
	gglobÆ_d©a
& 
gë_globÆ_d©a
();

606 
‰õnd
 
£t_Æl_loggög_Àvñs
 (

607 c⁄° 
log_Àvñ
& 
√w_Àvñ


610 
‰õnd
 
£t_Æl_loggög_hódîs
 (

611 c⁄° 
¥öt_hódî_ty≥
& 
√w_hódî


614 
‰õnd
 
£t_Æl_loggög_ouçut_°ªams
 (

615 
°d
::
o°ªam
& 
out


618 
	gãm∂©e
 <

619 
ty≥«me
 
	gT


621 
‰õnd
 
£t_Æl_loggög_ouçut_hooks
 (

622 
T
& 
obje˘
,

623 (
T
::*
hook_
)(c⁄° 
°d
::
°rög
& 
loggî_«me
,

624 c⁄° 
log_Àvñ
& 
l
,

625 c⁄° 
uöt64
 
thªad_id
,

626 c⁄° * 
mesßge_to_log
)

629 
	gloggî
::
hook_mÂ
 
hook
;

636 #i‡
deföed
(
_MSC_VER
) && _MSC_VER == 1400

637 
	ghook
.
	g£t
<
	gT
>(
	gobje˘
, 
	ghook_
);

639 
	ghook
.
£t
(
obje˘
, 
hook_
);

642 
	gloggî
::
globÆ_d©a
& 
gd
 = 
loggî
::
gë_globÆ_d©a
();

643 
auto_muãx
 
M
(
gd
.
m
);

644 
	ggd
.
	gloggîs
.
ª£t
();

645 
	ggd
.
	gloggîs
.
move_√xt
())

647 
	ggd
.
	gloggîs
.
ñemít
()->
	gout
.
rdbuf
(&
gd
.
hookbuf
);

648 
	ggd
.
	gloggîs
.
ñemít
()->
	ghook
 = 
hook
;

651 
	ggd
.
£t_ouçut_°ªam
("",
gd
.
hookbuf
);

652 
	ggd
.
£t_ouçut_hook
("",
hook
);

657 
	gglobÆ_d©a
& 
	ggd
;

659 c⁄° 
	g°d
::
°rög
 
loggî_«me
;

661 
¥öt_hódî_ty≥
 
	g¥öt_hódî
;

662 
boﬁ
 
	gauto_Êush_íabÀd
;

663 
	g°d
::
o°ªam
 
out
;

664 
log_Àvñ
 
	gcur_Àvñ
;

666 
hook_mÂ
 
	ghook
;

670 
loggî
(constÜogger&);

671 
	gloggî
& 
	g›î©‹
=(c⁄° 
loggî
&);

682 #ifde‡
NO_MAKEFILE


683 
	~"loggî_kî√l_1.˝p
"

	@viper/concurrentqueue-src/benchmarks/dlib/logger/logger_kernel_abstract.h

3 #unde‡
DLIB_LOGGER_KERNEl_ABSTRACT_


4 #ifde‡
DLIB_LOGGER_KERNEl_ABSTRACT_


6 
	~"../thªads.h
"

7 
	~<limôs
>

8 
	~<°rög
>

9 
	~<io°ªam
>

10 
	~"../uöä.h
"

12 
«me•a˚
 
	gdlib


19 ˛as†
	clog_Àvñ


26 
	gpublic
:

27 
log_Àvñ
(

28 
¥i‹ôy_
,

29 c⁄° * 
«me_


38 
boﬁ
 
	g›î©‹
< (c⁄° 
	glog_Àvñ
& 
	grhs
Ëc⁄° {  
	g¥i‹ôy
 <Ñhs.priority; }

39 
boﬁ
 
	g›î©‹
<=(c⁄° 
log_Àvñ
& 
rhs
Ëc⁄° {  
¥i‹ôy
 <=Ñhs.priority; }

40 
boﬁ
 
	g›î©‹
> (c⁄° 
	glog_Àvñ
& 
	grhs
Ëc⁄° {  
	g¥i‹ôy
 >Ñhs.priority; }

41 
boﬁ
 
	g›î©‹
>=(c⁄° 
log_Àvñ
& 
rhs
Ëc⁄° {  
¥i‹ôy
 >=Ñhs.priority; }

43 
	g¥i‹ôy
;

44 
	g«me
[20];

47 
ölöe
 
	g°d
::
o°ªam
& 
›î©‹
<< (
°d
::o°ªam& 
out
, c⁄° 
	glog_Àvñ
& 
	gôem
);

56 c⁄° 
log_Àvñ
 
LALL
 (
°d
::
numîic_limôs
<>::
mö
(),"ALL");

57 c⁄° 
log_Àvñ
 
LNONE
 (
°d
::
numîic_limôs
<>::
max
(),"NONE");

58 c⁄° 
log_Àvñ
 
LTRACE
(-100,"TRACE");

59 c⁄° 
log_Àvñ
 
LDEBUG
(0 ,"DEBUG");

60 c⁄° 
log_Àvñ
 
LINFO
 (100 ,"INFO ");

61 c⁄° 
log_Àvñ
 
LWARN
 (200 ,"WARN ");

62 c⁄° 
log_Àvñ
 
LERROR
(300 ,"ERROR");

63 c⁄° 
log_Àvñ
 
LFATAL
(400 ,"FATAL");

69 
£t_Æl_loggög_ouçut_°ªams
 (

70 
°d
::
o°ªam
& 
out


84 (*
	t¥öt_hódî_ty≥
)(

85 
	t°d
::
	to°ªam
& 
	tout
,

86 c⁄° 
	t°d
::
	t°rög
& 
	tloggî_«me
,

87 c⁄° 
	tlog_Àvñ
& 
	tl
,

88 c⁄° 
	tuöt64
 
	tthªad_id


91 
	`£t_Æl_loggög_hódîs
 (

92 c⁄° 
¥öt_hódî_ty≥
& 
√w_hódî


104 
ãm∂©e
 <

105 
ty≥«me
 
T


107 
	`£t_Æl_loggög_ouçut_hooks
 (

108 
T
& 
obje˘
,

109 (
T
::*
hook
)(c⁄° 
°d
::
°rög
& 
loggî_«me
,

110 c⁄° 
log_Àvñ
& 
l
,

111 c⁄° 
uöt64
 
thªad_id
,

112 c⁄° * 
mesßge_to_log
)

124 
ãm∂©e
 <

125 
ty≥«me
 
T


127 
	`£t_Æl_loggög_ouçut_hooks
 (

128 
T
& 
obje˘


137 
	`£t_Æl_loggög_Àvñs
 (

138 c⁄° 
log_Àvñ
& 
√w_Àvñ


152 
	`¥öt_deÁu…_loggî_hódî
 (

153 
°d
::
o°ªam
& 
out
,

154 c⁄° 
°d
::
°rög
& 
loggî_«me
,

155 c⁄° 
log_Àvñ
& 
l
,

156 c⁄° 
uöt64
 
thªad_id


171 ˛as†
	cloggî


207 ˛as†
	cloggî_°ªam


209 
public
:

211 
boﬁ
 
	`is_íabÀd
 (

219 
ãm∂©e
 <
ty≥«me
 
T
>

220 
loggî_°ªam
& 
›î©‹
 << (

221 c⁄° 
T
& 
ôem


231 
public
:

233 
	`loggî
 (

234 c⁄° 
°d
::
°rög
& 
«me_


247 
vútuÆ
 ~
	`loggî
 (

254 c⁄° 
°d
::
°rög
& 
	`«me
 (

261 
loggî_°ªam
 
›î©‹
 << (

262 c⁄° 
log_Àvñ
& 
l


276 
boﬁ
 
	`is_chûd_of
 (

277 c⁄° 
loggî
& 
log


289 c⁄° 
log_Àvñ
 
	`Àvñ
 (

296 
	`£t_Àvñ
 (

297 c⁄° 
log_Àvñ
& 
√w_Àvñ


307 
boﬁ
 
	`auto_Êush
 (

316 
	`£t_auto_Êush
 (

317 
boﬁ
 
íabÀd


328 
ãm∂©e
 <

329 
ty≥«me
 
T


331 
	`£t_ouçut_hook
 (

332 
T
& 
obje˘
,

333 (
T
::*
hook
)(c⁄° 
°d
::
°rög
& 
loggî_«me
,

334 c⁄° 
log_Àvñ
& 
l
,

335 c⁄° 
uöt64
 
thªad_id
,

336 c⁄° * 
mesßge_to_log
)

360 
°d
::
°ªambuf
* 
	`ouçut_°ªambuf
 (

371 
	`£t_ouçut_°ªam
 (

372 
°d
::
o°ªam
& 
out


384 
¥öt_hódî_ty≥
 
	`loggî_hódî
 (

403 
	`£t_loggî_hódî
 (

404 
¥öt_hódî_ty≥
 
¥öt_hódî


414 
¥iv©e
:

417 
	`loggî
(c⁄° 
loggî
&);

418 
loggî
& 
›î©‹
=(constÜogger&);

420 
	}
};

	@viper/concurrentqueue-src/benchmarks/dlib/map.h

3 #i‚de‡
DLIB_MAp_


4 
	#DLIB_MAp_


	)

6 
	~"m≠/m≠_kî√l_1.h
"

7 
	~"m≠/m≠_kî√l_c.h
"

9 
	~"bö¨y_£¨ch_åì.h
"

12 
	~"Ægs.h
"

13 
	~<fun˘i⁄Æ
>

16 
«me•a˚
 
	gdlib


19 
	gãm∂©e
 <

20 
ty≥«me
 
	gdomaö
,

21 
ty≥«me
 
	gønge
,

22 
ty≥«me
 
	gmem_m™agî
 = 
deÁu…_mem‹y_m™agî
,

23 
ty≥«me
 
	gcom∑ª
 = 
°d
::
Àss
<
domaö
>

25 ˛as†
	cm≠


27 
m≠
() {}

31 
ty≥«me
 
	tbö¨y_£¨ch_åì
<
	tdomaö
,
	tønge
,
	tmem_m™agî
,
	tcom∑ª
>::
	tkî√l_1a


32 
	tbö¨y_£¨ch_åì_1
;

35 
ty≥«me
 
	tbö¨y_£¨ch_åì
<
	tdomaö
,
	tønge
,
	tmem_m™agî
,
	tcom∑ª
>::
	tkî√l_2a


36 
	tbö¨y_£¨ch_åì_2
;

38 
	gpublic
:

43 
m≠_kî√l_1
<
	tdomaö
,
	tønge
,
	tbö¨y_£¨ch_åì_1
,
	tmem_m™agî
>

44 
	tkî√l_1a
;

45 
	gm≠_kî√l_c
<
	tkî√l_1a
 >

46 
	tkî√l_1a_c
;

49 
	gm≠_kî√l_1
<
	tdomaö
,
	tønge
,
	tbö¨y_£¨ch_åì_2
,
	tmem_m™agî
>

50 
	tkî√l_1b
;

51 
	gm≠_kî√l_c
<
	tkî√l_1b
 >

52 
	tkî√l_1b_c
;

	@viper/concurrentqueue-src/benchmarks/dlib/map/map_kernel_1.h

3 #i‚de‡
DLIB_MAP_KERNEl_1_


4 
	#DLIB_MAP_KERNEl_1_


	)

6 
	~"m≠_kî√l_ab°ø˘.h
"

7 
	~"../Ægs.h
"

8 
	~"../öãrÁ˚s/íumîabÀ.h
"

9 
	~"../öãrÁ˚s/m≠_∑ú.h
"

10 
	~"../öãrÁ˚s/ªmovî.h
"

11 
	~"../£rülize.h
"

13 
«me•a˚
 
	gdlib


16 
	gãm∂©e
 <

17 
ty≥«me
 
	gdomaö
,

18 
ty≥«me
 
	gønge
,

19 
ty≥«me
 
	gb°_ba£
,

20 
ty≥«me
 
	gmem_m™agî
 = 
deÁu…_mem‹y_m™agî


22 
˛ass
 
m≠_kî√l_1
 : 
public
 
íumîabÀ
<
m≠_∑ú
<
domaö
,
	gønge
> >,

23 
public
 
	gasc_∑ú_ªmovî
<
	gdomaö
,
	gønge
,
ty≥«me
 
	gb°_ba£
::
com∑ª_ty≥
>

39 
public
:

41 
domaö
 
	tdomaö_ty≥
;

42 
ønge
 
	tønge_ty≥
;

43 
ty≥«me
 
	tb°_ba£
::
	tcom∑ª_ty≥
 compare_type;

44 
mem_m™agî
 
	tmem_m™agî_ty≥
;

46 
m≠_kî√l_1
(

50 
	gvútuÆ
 ~
m≠_kî√l_1
(

54 
ölöe
 
˛ór
(

57 
ölöe
 
add
 (

58 
domaö
& 
d
,

59 
ønge
& 
r


62 
ölöe
 
boﬁ
 
is_ö_domaö
 (

63 c⁄° 
domaö
& 
d


66 
ölöe
 
ªmove_™y
 (

67 
domaö
& 
d
,

68 
ønge
& 
r


71 
ölöe
 
ªmove
 (

72 c⁄° 
domaö
& 
d
,

73 
domaö
& 
d_c›y
,

74 
ønge
& 
r


77 
ölöe
 
de°roy
 (

78 c⁄° 
domaö
& 
d


81 
ölöe
 
	gønge
& 
	g›î©‹
[] (

82 c⁄° 
	gdomaö
& 
	gd


85 
ölöe
 c⁄° 
	gønge
& 
	g›î©‹
[] (

86 c⁄° 
	gdomaö
& 
	gd


89 
ölöe
 
sw≠
 (

90 
m≠_kî√l_1
& 
ôem


94 
ölöe
 
size_t
 
size
 (

97 
ölöe
 
boﬁ
 
©_°¨t
 (

100 
ölöe
 
ª£t
 (

103 
ölöe
 
boﬁ
 
cuºít_ñemít_vÆid
 (

106 
ölöe
 c⁄° 
	gm≠_∑ú
<
	gdomaö
,
	gønge
>& 
ñemít
 (

109 
ölöe
 
	gm≠_∑ú
<
	gdomaö
,
	gønge
>& 
ñemít
 (

112 
ölöe
 
boﬁ
 
move_√xt
 (

116 
	g¥iv©e
:

118 
b°_ba£
 
b°
;

121 
m≠_kî√l_1
(map_kernel_1&);

122 
	gm≠_kî√l_1
& 
	g›î©‹
–
m≠_kî√l_1
&);

126 
	gãm∂©e
 <

127 
ty≥«me
 
	gdomaö
,

128 
ty≥«me
 
	gønge
,

129 
ty≥«me
 
	gb°_ba£
,

130 
ty≥«me
 
	gmem_m™agî


132 
ölöe
 
sw≠
 (

133 
m≠_kî√l_1
<
domaö
,
ønge
,
b°_ba£
,
mem_m™agî
>& 
a
,

134 
m≠_kî√l_1
<
domaö
,
ønge
,
b°_ba£
,
mem_m™agî
>& 
b


135 Ë{ 
	ga
.
sw≠
(
b
); }

138 
	gãm∂©e
 <

139 
ty≥«me
 
	gdomaö
,

140 
ty≥«me
 
	gønge
,

141 
ty≥«me
 
	gb°_ba£
,

142 
ty≥«me
 
	gmem_m™agî


144 
de£rülize
 (

145 
m≠_kî√l_1
<
domaö
,
ønge
,
b°_ba£
,
mem_m™agî
>& 
ôem
,

146 
°d
::
i°ªam
& 
ö


149 
åy


151 
ôem
.
˛ór
();

152 
	gsize
;

153 
de£rülize
(
size
,
ö
);

154 
domaö
 
	gd
;

155 
ønge
 
	gr
;

156 
	gi
 = 0; i < 
	gsize
; ++i)

158 
de£rülize
(
d
,
ö
);

159 
de£rülize
(
r
,
ö
);

160 
	gôem
.
add
(
d
,
r
);

163 
ˇtch
 (
£rüliz©i⁄_îr‹
& 
e
)

165 
	gôem
.
˛ór
();

166 
throw
 
£rüliz©i⁄_îr‹
(
e
.
öfo
 + "\n while deserializing object ofÅype map_kernel_1");

176 
	gãm∂©e
 <

177 
ty≥«me
 
	gdomaö
,

178 
ty≥«me
 
	gønge
,

179 
ty≥«me
 
	gb°_ba£
,

180 
ty≥«me
 
	gmem_m™agî


182 
	gm≠_kî√l_1
<
	gdomaö
,
	gønge
,
	gb°_ba£
,
	gmem_m™agî
>::

183 
˛ór
 (

186 
b°
.
˛ór
();

191 
	gãm∂©e
 <

192 
ty≥«me
 
	gdomaö
,

193 
ty≥«me
 
	gønge
,

194 
ty≥«me
 
	gb°_ba£
,

195 
ty≥«me
 
	gmem_m™agî


197 
	gm≠_kî√l_1
<
	gdomaö
,
	gønge
,
	gb°_ba£
,
	gmem_m™agî
>::

198 
add
(

199 
domaö
& 
d
,

200 
ønge
& 
r


204 
	gb°
.
add
(
d
,
r
);

209 
	gãm∂©e
 <

210 
ty≥«me
 
	gdomaö
,

211 
ty≥«me
 
	gønge
,

212 
ty≥«me
 
	gb°_ba£
,

213 
ty≥«me
 
	gmem_m™agî


215 
boﬁ
 
	gm≠_kî√l_1
<
	gdomaö
,
	gønge
,
	gb°_ba£
,
	gmem_m™agî
>::

216 
is_ö_domaö
(

217 c⁄° 
domaö
& 
d


220  (
b°
[
d
] != 0);

225 
	gãm∂©e
 <

226 
ty≥«me
 
	gdomaö
,

227 
ty≥«me
 
	gønge
,

228 
ty≥«me
 
	gb°_ba£
,

229 
ty≥«me
 
	gmem_m™agî


231 
	gm≠_kî√l_1
<
	gdomaö
,
	gønge
,
	gb°_ba£
,
	gmem_m™agî
>::

232 
ªmove_™y
(

233 
domaö
& 
d
,

234 
ønge
& 
r


237 
	gb°
.
ªmove_™y
(
d
,
r
);

242 
	gãm∂©e
 <

243 
ty≥«me
 
	gdomaö
,

244 
ty≥«me
 
	gønge
,

245 
ty≥«me
 
	gb°_ba£
,

246 
ty≥«me
 
	gmem_m™agî


248 
	gm≠_kî√l_1
<
	gdomaö
,
	gønge
,
	gb°_ba£
,
	gmem_m™agî
>::

249 
ªmove
 (

250 c⁄° 
domaö
& 
d
,

251 
domaö
& 
d_c›y
,

252 
ønge
& 
r


255 
	gb°
.
ªmove
(
d
,
d_c›y
,
r
);

260 
	gãm∂©e
 <

261 
ty≥«me
 
	gdomaö
,

262 
ty≥«me
 
	gønge
,

263 
ty≥«me
 
	gb°_ba£
,

264 
ty≥«me
 
	gmem_m™agî


266 
	gm≠_kî√l_1
<
	gdomaö
,
	gønge
,
	gb°_ba£
,
	gmem_m™agî
>::

267 
de°roy
 (

268 c⁄° 
domaö
& 
d


271 
b°
.
de°roy
(
d
);

276 
	gãm∂©e
 <

277 
ty≥«me
 
	gdomaö
,

278 
ty≥«me
 
	gønge
,

279 
ty≥«me
 
	gb°_ba£
,

280 
ty≥«me
 
	gmem_m™agî


282 
	gønge
& 
	gm≠_kî√l_1
<
	gdomaö
,ønge,
	gb°_ba£
,
	gmem_m™agî
>::

283 
›î©‹
[](

284 c⁄° 
domaö
& 
d


287  *
b°
[
d
];

292 
	gãm∂©e
 <

293 
ty≥«me
 
	gdomaö
,

294 
ty≥«me
 
	gønge
,

295 
ty≥«me
 
	gb°_ba£
,

296 
ty≥«me
 
	gmem_m™agî


298 c⁄° 
	gønge
& 
	gm≠_kî√l_1
<
	gdomaö
,ønge,
	gb°_ba£
,
	gmem_m™agî
>::

299 
›î©‹
[](

300 c⁄° 
domaö
& 
d


303  *
b°
[
d
];

308 
	gãm∂©e
 <

309 
ty≥«me
 
	gdomaö
,

310 
ty≥«me
 
	gønge
,

311 
ty≥«me
 
	gb°_ba£
,

312 
ty≥«me
 
	gmem_m™agî


314 
size_t
 
	gm≠_kî√l_1
<
	gdomaö
,
	gønge
,
	gb°_ba£
,
	gmem_m™agî
>::

315 
size
 (

318  
b°
.
size
();

323 
	gãm∂©e
 <

324 
ty≥«me
 
	gdomaö
,

325 
ty≥«me
 
	gønge
,

326 
ty≥«me
 
	gb°_ba£
,

327 
ty≥«me
 
	gmem_m™agî


329 
	gm≠_kî√l_1
<
	gdomaö
,
	gønge
,
	gb°_ba£
,
	gmem_m™agî
>::

330 
sw≠
 (

331 
m≠_kî√l_1
<
domaö
,
ønge
,
b°_ba£
,
mem_m™agî
>& 
ôem


334 
	gb°
.
sw≠
(
ôem
.
b°
);

343 
	gãm∂©e
 <

344 
ty≥«me
 
	gdomaö
,

345 
ty≥«me
 
	gønge
,

346 
ty≥«me
 
	gb°_ba£
,

347 
ty≥«me
 
	gmem_m™agî


349 
boﬁ
 
	gm≠_kî√l_1
<
	gdomaö
,
	gønge
,
	gb°_ba£
,
	gmem_m™agî
>::

350 
©_°¨t
 (

353  
b°
.
©_°¨t
();

358 
	gãm∂©e
 <

359 
ty≥«me
 
	gdomaö
,

360 
ty≥«me
 
	gønge
,

361 
ty≥«me
 
	gb°_ba£
,

362 
ty≥«me
 
	gmem_m™agî


364 
	gm≠_kî√l_1
<
	gdomaö
,
	gønge
,
	gb°_ba£
,
	gmem_m™agî
>::

365 
ª£t
 (

368 
b°
.
ª£t
();

373 
	gãm∂©e
 <

374 
ty≥«me
 
	gdomaö
,

375 
ty≥«me
 
	gønge
,

376 
ty≥«me
 
	gb°_ba£
,

377 
ty≥«me
 
	gmem_m™agî


379 
boﬁ
 
	gm≠_kî√l_1
<
	gdomaö
,
	gønge
,
	gb°_ba£
,
	gmem_m™agî
>::

380 
cuºít_ñemít_vÆid
 (

383  
b°
.
cuºít_ñemít_vÆid
();

388 
	gãm∂©e
 <

389 
ty≥«me
 
	gdomaö
,

390 
ty≥«me
 
	gønge
,

391 
ty≥«me
 
	gb°_ba£
,

392 
ty≥«me
 
	gmem_m™agî


394 c⁄° 
	gm≠_∑ú
<
	gdomaö
,
	gønge
>& 
	gm≠_kî√l_1
<domaö,ønge,
	gb°_ba£
,
	gmem_m™agî
>::

395 
ñemít
 (

398  
b°
.
ñemít
();

403 
	gãm∂©e
 <

404 
ty≥«me
 
	gdomaö
,

405 
ty≥«me
 
	gønge
,

406 
ty≥«me
 
	gb°_ba£
,

407 
ty≥«me
 
	gmem_m™agî


409 
	gm≠_∑ú
<
	gdomaö
,
	gønge
>& 
	gm≠_kî√l_1
<domaö,ønge,
	gb°_ba£
,
	gmem_m™agî
>::

410 
ñemít
 (

413  
b°
.
ñemít
();

418 
	gãm∂©e
 <

419 
ty≥«me
 
	gdomaö
,

420 
ty≥«me
 
	gønge
,

421 
ty≥«me
 
	gb°_ba£
,

422 
ty≥«me
 
	gmem_m™agî


424 
boﬁ
 
	gm≠_kî√l_1
<
	gdomaö
,
	gønge
,
	gb°_ba£
,
	gmem_m™agî
>::

425 
move_√xt
 (

428  
b°
.
move_√xt
();

	@viper/concurrentqueue-src/benchmarks/dlib/map/map_kernel_abstract.h

3 #unde‡
DLIB_MAP_KERNEl_ABSTRACT_


4 #ifde‡
DLIB_MAP_KERNEl_ABSTRACT_


6 
	~"../öãrÁ˚s/m≠_∑ú.h
"

7 
	~"../öãrÁ˚s/íumîabÀ.h
"

8 
	~"../öãrÁ˚s/ªmovî.h
"

9 
	~"../£rülize.h
"

10 
	~"../Ægs.h
"

11 
	~<fun˘i⁄Æ
>

13 
«me•a˚
 
	gdlib


16 
	gãm∂©e
 <

17 
ty≥«me
 
	gdomaö
,

18 
ty≥«me
 
	gønge
,

19 
ty≥«me
 
	gmem_m™agî
 = 
deÁu…_mem‹y_m™agî
,

20 
ty≥«me
 
	gcom∑ª
 = 
°d
::
Àss
<
domaö
>

22 
˛ass
 
m≠
 : 
public
 
íumîabÀ
<
m≠_∑ú
<
domaö
,
	gønge
> >,

23 
public
 
	gasc_∑ú_ªmovî
<
	gdomaö
,
	gønge
,
	gcom∑ª
>

70 
	gpublic
:

72 
domaö
 
	tdomaö_ty≥
;

73 
ønge
 
	tønge_ty≥
;

74 
com∑ª
 
	tcom∑ª_ty≥
;

75 
mem_m™agî
 
	tmem_m™agî_ty≥
;

77 
m≠
(

87 
	gvútuÆ
 ~
m≠
(

94 
˛ór
(

106 
add
 (

107 
domaö
& 
d
,

108 
ønge
& 
r


126 
boﬁ
 
is_ö_domaö
 (

127 c⁄° 
domaö
& 
d


135 
ªmove
 (

136 c⁄° 
domaö
& 
d
,

137 
domaö
& 
d_c›y
,

138 
ønge
& 
r


155 
de°roy
 (

156 c⁄° 
domaö
& 
d


167 
	gønge
& 
	g›î©‹
[] (

168 c⁄° 
	gdomaö
& 
	gd


178 c⁄° 
	gønge
& 
	g›î©‹
[] (

179 c⁄° 
	gdomaö
& 
	gd


189 
sw≠
 (

190 
m≠
& 
ôem


198 
	g¥iv©e
:

201 
m≠
(map&);

202 
	gm≠
& 
	g›î©‹
=(
m≠
&);

205 
	gãm∂©e
 <

206 
ty≥«me
 
	gdomaö
,

207 
ty≥«me
 
	gønge
,

208 
ty≥«me
 
	gmem_m™agî
,

209 
ty≥«me
 
	gcom∑ª


211 
ölöe
 
sw≠
 (

212 
m≠
<
domaö
,
ønge
,
mem_m™agî
,
com∑ª
>& 
a
,

213 
m≠
<
domaö
,
ønge
,
mem_m™agî
,
com∑ª
>& 
b


214 Ë{ 
	ga
.
sw≠
(
b
); }

219 
	gãm∂©e
 <

220 
ty≥«me
 
	gdomaö
,

221 
ty≥«me
 
	gønge
,

222 
ty≥«me
 
	gmem_m™agî
,

223 
ty≥«me
 
	gcom∑ª


225 
de£rülize
 (

226 
m≠
<
domaö
,
ønge
,
mem_m™agî
,
com∑ª
>& 
ôem
,

227 
°d
::
i°ªam
& 
ö


	@viper/concurrentqueue-src/benchmarks/dlib/map/map_kernel_c.h

3 #i‚de‡
DLIB_MAP_KERNEl_C_


4 
	#DLIB_MAP_KERNEl_C_


	)

6 
	~"m≠_kî√l_ab°ø˘.h
"

7 
	~"../Ægs.h
"

8 
	~"../as£π.h
"

9 
	~"../öãrÁ˚s/m≠_∑ú.h
"

11 
«me•a˚
 
	gdlib


14 
	gãm∂©e
 <

15 
ty≥«me
 
	gm≠_ba£


17 ˛as†
	cm≠_kî√l_c
 : 
public
 
m≠_ba£


20 
ty≥«me
 
	tm≠_ba£
::
	tdomaö_ty≥
 
	tdomaö
;

21 
ty≥«me
 
	tm≠_ba£
::
	tønge_ty≥
 
	tønge
;

23 
	gpublic
:

24 
add
 (

25 
domaö
& 
d
,

26 
ønge
& 
r


29 
ªmove_™y
 (

30 
domaö
& 
d
,

31 
ønge
& 
r


34 
ªmove
 (

35 c⁄° 
domaö
& 
d
,

36 
domaö
& 
d_c›y
,

37 
ønge
& 
r


40 
de°roy
 (

41 c⁄° 
domaö
& 
d


44 
	gønge
& 
	g›î©‹
[] (

45 c⁄° 
	gdomaö
& 
	gd


48 c⁄° 
	gønge
& 
	g›î©‹
[] (

49 c⁄° 
	gdomaö
& 
	gd


52 c⁄° 
	gm≠_∑ú
<
	gdomaö
,
	gønge
>& 
ñemít
 (

56 
DLIB_CASSERT
(
this
->
cuºít_ñemít_vÆid
(Ë=
åue
,

59 << "\n\âhis: " << 
this


63  
	gm≠_ba£
::
ñemít
();

66 
	gm≠_∑ú
<
	gdomaö
,
	gønge
>& 
ñemít
 (

70 
DLIB_CASSERT
(
this
->
cuºít_ñemít_vÆid
(Ë=
åue
,

73 << "\n\âhis: " << 
this


77  
	gm≠_ba£
::
ñemít
();

82 
	gãm∂©e
 <

83 
ty≥«me
 
	gm≠_ba£


85 
ölöe
 
sw≠
 (

86 
m≠_kî√l_c
<
m≠_ba£
>& 
a
,

87 
m≠_kî√l_c
<
m≠_ba£
>& 
b


88 Ë{ 
	ga
.
sw≠
(
b
); }

96 
	gãm∂©e
 <

97 
ty≥«me
 
	gm≠_ba£


99 
	gm≠_kî√l_c
<
	gm≠_ba£
>::

100 
	$add
 (

101 
domaö
& 
d
,

102 
ønge
& 
r


106 
	`DLIB_CASSERT
–(!
this
->
	`is_ö_domaö
(
d
)) &&

107 (
°©ic_ˇ°
<*>(&
d
Ë!°©ic_ˇ°<*>(&
r
)),

111 << "\n\tis_ö_domaö(d): " << (
this
->
	`is_ö_domaö
(
d
) ? "true" : "false")

112 << "\n\âhis: " << 
this


113 << "\n\t&d: " << 
°©ic_ˇ°
<*>(&
d
)

114 << "\n\t&r: " << 
°©ic_ˇ°
<*>(&
r
)

118 
m≠_ba£
::
	`add
(
d
,
r
);

119 
	}
}

123 
	gãm∂©e
 <

124 
ty≥«me
 
	gm≠_ba£


126 
	gm≠_kî√l_c
<
	gm≠_ba£
>::

127 
	$ªmove_™y
 (

128 
domaö
& 
d
,

129 
ønge
& 
r


133 
	`DLIB_CASSERT
–(
this
->
	`size
() > 0) &&

134 (
°©ic_ˇ°
<*>(&
d
Ë!°©ic_ˇ°<*>(&
r
)),

138 << "\n\tsize(): " << 
this
->
	`size
()

139 << "\n\âhis: " << 
this


140 << "\n\t&d: " << 
°©ic_ˇ°
<*>(&
d
)

141 << "\n\t&r: " << 
°©ic_ˇ°
<*>(&
r
)

145 
m≠_ba£
::
	`ªmove_™y
(
d
,
r
);

146 
	}
}

150 
	gãm∂©e
 <

151 
ty≥«me
 
	gm≠_ba£


153 
	gm≠_kî√l_c
<
	gm≠_ba£
>::

154 
	$ªmove
 (

155 c⁄° 
domaö
& 
d
,

156 
domaö
& 
d_c›y
,

157 
ønge
& 
r


161 
	`DLIB_CASSERT
–(
this
->
	`is_ö_domaö
(
d
)) &&

162 (
°©ic_ˇ°
<c⁄° *>(&
d
Ë!°©ic_ˇ°<*>(&
r
)) &&

163 (
°©ic_ˇ°
<*>(&
r
Ë!°©ic_ˇ°<*>(&
d_c›y
)) &&

164 (
°©ic_ˇ°
<c⁄° *>(&
d
Ë!°©ic_ˇ°<*>(&
d_c›y
)),

168 << "\n\tis_ö_domaö(d): " << (
this
->
	`is_ö_domaö
(
d
) ? "true" : "false")

169 << "\n\âhis: " << 
this


170 << "\n\t&d: " << 
°©ic_ˇ°
<c⁄° *>(&
d
)

171 << "\n\t&r: " << 
°©ic_ˇ°
<*>(&
r
)

172 << "\n\t&d_c›y: " << 
°©ic_ˇ°
<*>(&
d_c›y
)

176 
m≠_ba£
::
	`ªmove
(
d
,
d_c›y
,
r
);

177 
	}
}

181 
	gãm∂©e
 <

182 
ty≥«me
 
	gm≠_ba£


184 
	gm≠_kî√l_c
<
	gm≠_ba£
>::

185 
	$de°roy
 (

186 c⁄° 
domaö
& 
d


190 
	`DLIB_CASSERT
(
this
->
	`is_ö_domaö
(
d
),

193 << "\n\âhis: " << 
this


194 << "\n\t&d: " << 
°©ic_ˇ°
<c⁄° *>(&
d
)

198 
m≠_ba£
::
	`de°roy
(
d
);

199 
	}
}

203 
	gãm∂©e
 <

204 
ty≥«me
 
	gm≠_ba£


206 
ty≥«me
 
	gm≠_ba£
::
ønge_ty≥
& 
m≠_kî√l_c
<
m≠_ba£
>::

207 
›î©‹
[] (

208 c⁄° 
domaö
& 
d


212 
DLIB_CASSERT
–
this
->
is_ö_domaö
(
d
),

215 << "\n\âhis: " << 
this


219  
	gm≠_ba£
::
›î©‹
[](
d
);

224 
	gãm∂©e
 <

225 
ty≥«me
 
	gm≠_ba£


227 c⁄° 
ty≥«me
 
	gm≠_ba£
::
ønge_ty≥
& 
m≠_kî√l_c
<
m≠_ba£
>::

228 
›î©‹
[] (

229 c⁄° 
domaö
& 
d


233 
DLIB_CASSERT
–
this
->
is_ö_domaö
(
d
),

236 << "\n\âhis: " << 
this


240  
	gm≠_ba£
::
›î©‹
[](
d
);

	@viper/concurrentqueue-src/benchmarks/dlib/member_function_pointer.h

3 #i‚de‡
DLIB_MEMBER_FUNCTION_POINTEr_


4 
	#DLIB_MEMBER_FUNCTION_POINTEr_


	)

6 
	~"membî_fun˘i⁄_poöãr/membî_fun˘i⁄_poöãr_kî√l_1.h
"

7 
	~"membî_fun˘i⁄_poöãr/make_mÂ.h
"

	@viper/concurrentqueue-src/benchmarks/dlib/member_function_pointer/make_mfp.h

3 #i‚de‡
DLIB_MAKE_MFp_H_


4 
	#DLIB_MAKE_MFp_H_


	)

6 
	~"membî_fun˘i⁄_poöãr_kî√l_1.h
"

7 
	~"make_mÂ_ab°ø˘.h
"

9 
«me•a˚
 
	gdlib


14 
	gãm∂©e
 <

15 
ty≥«me
 
	gT


17 
	gmembî_fun˘i⁄_poöãr
<> 
make_mÂ
 (

18 
T
& 
obje˘
,

19 (
T
::*
cb
)()

22 
membî_fun˘i⁄_poöãr
<> 
ãmp
;

23 
	gãmp
.
£t
(
obje˘
, 
cb
);

24  
	gãmp
;

27 
	gãm∂©e
 <

28 
ty≥«me
 
	gT


30 
	gmembî_fun˘i⁄_poöãr
<> 
make_mÂ
 (

31 c⁄° 
T
& 
obje˘
,

32 (
T
::*
cb
)()const

35 
membî_fun˘i⁄_poöãr
<> 
ãmp
;

36 
	gãmp
.
£t
(
obje˘
, 
cb
);

37  
	gãmp
;

42 
	gãm∂©e
 <

43 
ty≥«me
 
	gT
,

44 
ty≥«me
 
	gA1


46 
	gmembî_fun˘i⁄_poöãr
<
	gA1
> 
make_mÂ
 (

47 
T
& 
obje˘
,

48 (
T
::*
cb
)(
A1
)

51 
membî_fun˘i⁄_poöãr
<
A1
> 
ãmp
;

52 
	gãmp
.
£t
(
obje˘
, 
cb
);

53  
	gãmp
;

56 
	gãm∂©e
 <

57 
ty≥«me
 
	gT
,

58 
ty≥«me
 
	gA1


60 
	gmembî_fun˘i⁄_poöãr
<
	gA1
> 
make_mÂ
 (

61 c⁄° 
T
& 
obje˘
,

62 (
T
::*
cb
)(
A1
)const

65 
membî_fun˘i⁄_poöãr
<
A1
> 
ãmp
;

66 
	gãmp
.
£t
(
obje˘
, 
cb
);

67  
	gãmp
;

72 
	gãm∂©e
 <

73 
ty≥«me
 
	gT
,

74 
ty≥«me
 
	gA1
,

75 
ty≥«me
 
	gA2


77 
	gmembî_fun˘i⁄_poöãr
<
	gA1
,
	gA2
> 
make_mÂ
 (

78 
T
& 
obje˘
,

79 (
T
::*
cb
)(
A1
,
A2
)

82 
	gmembî_fun˘i⁄_poöãr
<
	gA1
,
	gA2
> 
	gãmp
;

83 
	gãmp
.
£t
(
obje˘
, 
cb
);

84  
	gãmp
;

87 
	gãm∂©e
 <

88 
ty≥«me
 
	gT
,

89 
ty≥«me
 
	gA1
,

90 
ty≥«me
 
	gA2


92 
	gmembî_fun˘i⁄_poöãr
<
	gA1
,
	gA2
> 
make_mÂ
 (

93 c⁄° 
T
& 
obje˘
,

94 (
T
::*
cb
)(
A1
,
A2
)const

97 
	gmembî_fun˘i⁄_poöãr
<
	gA1
,
	gA2
> 
	gãmp
;

98 
	gãmp
.
£t
(
obje˘
, 
cb
);

99  
	gãmp
;

104 
	gãm∂©e
 <

105 
ty≥«me
 
	gT
,

106 
ty≥«me
 
	gA1
,

107 
ty≥«me
 
	gA2
,

108 
ty≥«me
 
	gA3


110 
	gmembî_fun˘i⁄_poöãr
<
	gA1
,
	gA2
,
	gA3
> 
make_mÂ
 (

111 
T
& 
obje˘
,

112 (
T
::*
cb
)(
A1
,
A2
,
A3
)

115 
	gmembî_fun˘i⁄_poöãr
<
	gA1
,
	gA2
,
	gA3
> 
	gãmp
;

116 
	gãmp
.
£t
(
obje˘
, 
cb
);

117  
	gãmp
;

120 
	gãm∂©e
 <

121 
ty≥«me
 
	gT
,

122 
ty≥«me
 
	gA1
,

123 
ty≥«me
 
	gA2
,

124 
ty≥«me
 
	gA3


126 
	gmembî_fun˘i⁄_poöãr
<
	gA1
,
	gA2
,
	gA3
> 
make_mÂ
 (

127 c⁄° 
T
& 
obje˘
,

128 (
T
::*
cb
)(
A1
,
A2
,
A3
)const

131 
	gmembî_fun˘i⁄_poöãr
<
	gA1
,
	gA2
,
	gA3
> 
	gãmp
;

132 
	gãmp
.
£t
(
obje˘
, 
cb
);

133  
	gãmp
;

138 
	gãm∂©e
 <

139 
ty≥«me
 
	gT
,

140 
ty≥«me
 
	gA1
,

141 
ty≥«me
 
	gA2
,

142 
ty≥«me
 
	gA3
,

143 
ty≥«me
 
	gA4


145 
	gmembî_fun˘i⁄_poöãr
<
	gA1
,
	gA2
,
	gA3
,
	gA4
> 
make_mÂ
 (

146 
T
& 
obje˘
,

147 (
T
::*
cb
)(
A1
,
A2
,
A3
,
A4
)

150 
	gmembî_fun˘i⁄_poöãr
<
	gA1
,
	gA2
,
	gA3
,
	gA4
> 
	gãmp
;

151 
	gãmp
.
£t
(
obje˘
, 
cb
);

152  
	gãmp
;

155 
	gãm∂©e
 <

156 
ty≥«me
 
	gT
,

157 
ty≥«me
 
	gA1
,

158 
ty≥«me
 
	gA2
,

159 
ty≥«me
 
	gA3
,

160 
ty≥«me
 
	gA4


162 
	gmembî_fun˘i⁄_poöãr
<
	gA1
,
	gA2
,
	gA3
,
	gA4
> 
make_mÂ
 (

163 c⁄° 
T
& 
obje˘
,

164 (
T
::*
cb
)(
A1
,
A2
,
A3
,
A4
)const

167 
	gmembî_fun˘i⁄_poöãr
<
	gA1
,
	gA2
,
	gA3
,
	gA4
> 
	gãmp
;

168 
	gãmp
.
£t
(
obje˘
, 
cb
);

169  
	gãmp
;

	@viper/concurrentqueue-src/benchmarks/dlib/member_function_pointer/make_mfp_abstract.h

3 #unde‡
DLIB_MAKE_MFp_ABSTRACT_


4 #ifde‡
DLIB_MAKE_MFp_ABSTRACT_


6 
	~"membî_fun˘i⁄_poöãr_kî√l_ab°ø˘.h
"

8 
«me•a˚
 
	gdlib


13 
	gãm∂©e
 <

14 
ty≥«me
 
	gT


16 
	gmembî_fun˘i⁄_poöãr
<> 
make_mÂ
 (

17 
T
& 
obje˘
,

18 (
T
::*
cb
)()

29 
	gãm∂©e
 <

30 
ty≥«me
 
	gT


32 
	gmembî_fun˘i⁄_poöãr
<> 
make_mÂ
 (

33 c⁄° 
T
& 
obje˘
,

34 (
T
::*
cb
)()const

47 
	gãm∂©e
 <

48 
ty≥«me
 
	gT
,

49 
ty≥«me
 
	gA1


51 
	gmembî_fun˘i⁄_poöãr
<
	gA1
> 
make_mÂ
 (

52 
T
& 
obje˘
,

53 (
T
::*
cb
)(
A1
 
a1
)

64 
	gãm∂©e
 <

65 
ty≥«me
 
	gT
,

66 
ty≥«me
 
	gA1


68 
	gmembî_fun˘i⁄_poöãr
<
	gA1
> 
make_mÂ
 (

69 c⁄° 
T
& 
obje˘
,

70 (
T
::*
cb
)(
A1
 
a1
)const

83 
	gãm∂©e
 <

84 
ty≥«me
 
	gT
,

85 
ty≥«me
 
	gA1
,

86 
ty≥«me
 
	gA2


88 
	gmembî_fun˘i⁄_poöãr
<
	gA1
,
	gA2
> 
make_mÂ
 (

89 
T
& 
obje˘
,

90 (
T
::*
cb
)(
A1
 
a1
, 
A2
 
a2
)

101 
	gãm∂©e
 <

102 
ty≥«me
 
	gT
,

103 
ty≥«me
 
	gA1
,

104 
ty≥«me
 
	gA2


106 
	gmembî_fun˘i⁄_poöãr
<
	gA1
,
	gA2
> 
make_mÂ
 (

107 c⁄° 
T
& 
obje˘
,

108 (
T
::*
cb
)(
A1
 
a1
, 
A2
 
a2
)const

121 
	gãm∂©e
 <

122 
ty≥«me
 
	gT
,

123 
ty≥«me
 
	gA1
,

124 
ty≥«me
 
	gA2
,

125 
ty≥«me
 
	gA3


127 
	gmembî_fun˘i⁄_poöãr
<
	gA1
,
	gA2
,
	gA3
> 
make_mÂ
 (

128 
T
& 
obje˘
,

129 (
T
::*
cb
)(
A1
 
a1
, 
A2
 
a2
, 
A3
 
a3
)

140 
	gãm∂©e
 <

141 
ty≥«me
 
	gT
,

142 
ty≥«me
 
	gA1
,

143 
ty≥«me
 
	gA2
,

144 
ty≥«me
 
	gA3


146 
	gmembî_fun˘i⁄_poöãr
<
	gA1
,
	gA2
,
	gA3
> 
make_mÂ
 (

147 c⁄° 
T
& 
obje˘
,

148 (
T
::*
cb
)(
A1
 
a1
, 
A2
 
a2
, 
A3
 
a3
)const

161 
	gãm∂©e
 <

162 
ty≥«me
 
	gT
,

163 
ty≥«me
 
	gA1
,

164 
ty≥«me
 
	gA2
,

165 
ty≥«me
 
	gA3
,

166 
ty≥«me
 
	gA4


168 
	gmembî_fun˘i⁄_poöãr
<
	gA1
,
	gA2
,
	gA3
,
	gA4
> 
make_mÂ
 (

169 
T
& 
obje˘
,

170 (
T
::*
cb
)(
A1
 
a1
, 
A2
 
a2
, 
A3
 
a3
, 
A4
 
a4
)

181 
	gãm∂©e
 <

182 
ty≥«me
 
	gT
,

183 
ty≥«me
 
	gA1
,

184 
ty≥«me
 
	gA2
,

185 
ty≥«me
 
	gA3
,

186 
ty≥«me
 
	gA4


188 
	gmembî_fun˘i⁄_poöãr
<
	gA1
,
	gA2
,
	gA3
,
	gA4
> 
make_mÂ
 (

189 c⁄° 
T
& 
obje˘
,

190 (
T
::*
cb
)(
A1
 
a1
, 
A2
 
a2
, 
A3
 
a3
, 
A4
 
a4
)const

	@viper/concurrentqueue-src/benchmarks/dlib/member_function_pointer/member_function_pointer_kernel_1.h

3 #i‚de‡
DLIB_MEMBER_FUNCTION_POINTER_KERNEl_1_


4 
	#DLIB_MEMBER_FUNCTION_POINTER_KERNEl_1_


	)

6 
	~"../Ægs.h
"

7 
	~"membî_fun˘i⁄_poöãr_kî√l_ab°ø˘.h
"

8 
	~"../íabÀ_if.h
"

9 
	~<√w
>

11 
«me•a˚
 
	gdlib


16 
	gãm∂©e
 <

17 
ty≥«me
 
	gPARAM1
 = ,

18 
ty≥«me
 
	gPARAM2
 = ,

19 
ty≥«me
 
	gPARAM3
 = ,

20 
ty≥«me
 
	gPARAM4
 = 

22 
˛ass
 
membî_fun˘i⁄_poöãr
;

26 
	#DLIB_MFP_SC
 
	`DLIB_ASSERT
(
cb
 != 0, \

29 << "\n\âhis: " << 
this
 );

	)

32 
	#DLIB_MFP_OC
 
	`DLIB_ASSERT
(
this
->
	`is_£t
(Ë=
åue
 , \

35 << "\n\âhis: " << 
this
);

	)

39 
	gãm∂©e
 <
	gnum_¨gs
>

40 ˛as†
	cmÂ_kî√l_1_ba£_˛ass


50 
	g¥Ÿe˘ed
:

51 
	emÂ_ty≥
 { 
mÂ_n⁄c⁄°
, 
	gmÂ_c⁄°
, 
	gmÂ_nuŒ
};

53 ˛as†
	cmp_ba£_ba£


55 
	gpublic
:

56 
mp_ba£_ba£
(* 
±r
, 
mÂ_ty≥
 
ty≥_
Ë: 
o
’å),
ty≥
(type_) {}

57 
	gvútuÆ
 ~
mp_ba£_ba£
(){}

58 
vútuÆ
 
˛⁄e
(* 
±r
) const = 0;

59 
vútuÆ
 
boﬁ
 
is_ßme
 (c⁄° 
mp_ba£_ba£
* 
ôem
) const = 0;

60 
boﬁ
 
is_£t
 (Ëc⁄° {  
	go
!=0; }

62 * c⁄° 
	go
;

63 c⁄° 
mÂ_ty≥
 
	gty≥
;

66 
	gãm∂©e
 <
ty≥«me
 
	gT
>

67 ˛as†
	cmp_nuŒ
 : 
public
 
mp_ba£_ba£


69 
public
:

70 (
T
::*
	tmÂ_poöãr_ty≥
)() ;

72 
mp_nuŒ
 (* , 
mÂ_poöãr_ty≥
 ) : 
mp_ba£_ba£
(0,
mÂ_nuŒ
), 
ˇŒback
(0) {}

73 
mp_nuŒ
 (Ë: 
mp_ba£_ba£
(0,
mÂ_nuŒ
), 
ˇŒback
(0) {}

75 c⁄° 
mÂ_poöãr_ty≥
 
	gˇŒback
;

78 
	gãm∂©e
 <
ty≥«me
 
	gmp_im∂
>

79 ˛as†
	cmp_im∂_T
 : 
public
 
mp_im∂


87 
public
:

88 
ty≥«me
 
	tmp_im∂
::
	tmÂ_poöãr_ty≥
 mfp_pointer_type;

90 
mp_im∂_T
(Ë: 
mp_im∂
(0,0) {}

91 
mp_im∂_T
(* 
±r
, 
mÂ_poöãr_ty≥
 
cb
Ë: 
mp_im∂
(ptr,cb) {}

93 
	gãm∂©e
 <
	gmem_size
>

94 
ß„_˛⁄e
(
°ack_ba£d_mem‹y_block
<
mem_size
>& 
buf
)

99 
COMPILE_TIME_ASSERT
((
mp_im∂_T
Ë<
mem_size
);

100 
˛⁄e
(
buf
.
gë
());

103 
˛⁄e
 (* 
±r
Ëc⁄° { 
√w
’åË
mp_im∂_T
(
this
->
o
,this->
ˇŒback
); }

104 
boﬁ
 
is_ßme
 (c⁄° 
mp_ba£_ba£
* 
ôem
) const

106 i‡(
	gôem
->
	go
 =0 && 
this
->
o
 == 0)

108  
åue
;

110 i‡(
	gôem
->
	go
 =
this
->
o
 &&Åhis->
ty≥
 =
ôem
->type)

112 c⁄° 
mp_im∂
* 
i
 = 
ªöãΩªt_ˇ°
<c⁄° mp_im∂*>(
ôem
);

113  (
	gi
->
	gˇŒback
 =
this
->
ˇŒback
);

115  
	gÁl£
;

122 #i‡
deföed
(
_MSC_VER
Ë&& !deföed(
__˛™g__
)

123 
	#DLIB_MSVC_INHERITANCE_VIRTUAL
 
__vútuÆ_öhîô™˚


	)

125 
	#DLIB_MSVC_INHERITANCE_VIRTUAL


	)

128 
	sdummy_ba£
 { 
vútuÆ
 
n⁄nuŒ
(Ë{}; 
	gvútuÆ
 ~
dummy_ba£
(){}; 
	ga
; };

129 
DLIB_MSVC_INHERITANCE_VIRTUAL
 
	gdummy
 : 
vútuÆ
 
public
 
dummy_ba£
{ 
n⁄nuŒ
() {}; };

131 #unde‡
DLIB_MSVC_INHERITANCE_VIRTUAL


133 
	gmp_im∂_T
<
	tmp_nuŒ
<
	tdummy
> > 
	tmp_nuŒ_im∂
;

134 
	gpublic
:

136 
mÂ_kî√l_1_ba£_˛ass
 (

137 c⁄° 
mÂ_kî√l_1_ba£_˛ass
& 
ôem


138 Ë{ 
ôem
.
mp
()->
˛⁄e
(
mp_mem‹y
.
gë
()); }

140 
mÂ_kî√l_1_ba£_˛ass
 (

141 Ë{ 
mp_nuŒ_im∂
().
ß„_˛⁄e
(
mp_mem‹y
); }

143 
boﬁ
 
	g›î©‹
 == (

144 c⁄° 
mÂ_kî√l_1_ba£_˛ass
& 
ôem


145 Ëc⁄° {  
mp
()->
is_ßme
(
ôem
.mp()); }

147 
boﬁ
 
	g›î©‹
 != (

148 c⁄° 
mÂ_kî√l_1_ba£_˛ass
& 
ôem


149 Ëc⁄° {  !(*
this
 =
ôem
); }

151 
	gmÂ_kî√l_1_ba£_˛ass
& 
	g›î©‹
= (

152 c⁄° 
mÂ_kî√l_1_ba£_˛ass
& 
ôem


153 Ë{ 
mÂ_kî√l_1_ba£_˛ass
(
ôem
).
sw≠
(*
this
);  *
	gthis
; }

155 ~
mÂ_kî√l_1_ba£_˛ass
 (

156 Ë{ 
de°roy_mp_mem‹y
(); }

158 
˛ór
(

159 Ë{ 
mÂ_kî√l_1_ba£_˛ass
().
sw≠
(*
this
); }

161 
boﬁ
 
is_£t
 (

162 Ëc⁄° {  
mp
()->
is_£t
(); }

164 
	g¥iv©e
:

165 (
dummy
::*
	tß„_boﬁ
)();

167 
	gpublic
:

168 
›î©‹
 
ß„_boﬁ
 (Ëc⁄° {  
is_£t
(Ë? &
dummy
::
n⁄nuŒ
 : 0; }

169 
boﬁ
 
	g›î©‹
!(Ëc⁄° {  !
is_£t
(); }

171 
sw≠
 (

172 
mÂ_kî√l_1_ba£_˛ass
& 
ôem


176 
mÂ_kî√l_1_ba£_˛ass
 
ãmp
(
ôem
);

179 
	gôem
.
de°roy_mp_mem‹y
();

181 
mp
()->
˛⁄e
(
ôem
.
mp_mem‹y
.
gë
());

184 
de°roy_mp_mem‹y
();

186 
	gãmp
.
mp
()->
˛⁄e
(
mp_mem‹y
.
gë
());

189 
	g¥Ÿe˘ed
:

197 
°ack_ba£d_mem‹y_block
<(
mp_nuŒ_im∂
)+1> 
mp_mem‹y
;

199 
de°roy_mp_mem‹y
 (

204 
mp
()->~
mp_ba£_ba£
();

207 
mp_ba£_ba£
* 
mp
 (Ë{  
	g°©ic_ˇ°
<
	gmp_ba£_ba£
*>(
	gmp_mem‹y
.
gë
()); }

208 c⁄° 
mp_ba£_ba£
* 
mp
 (Ëc⁄° {  
	g°©ic_ˇ°
<c⁄° 
	gmp_ba£_ba£
*>(
	gmp_mem‹y
.
gë
()); }

214 
	gãm∂©e
 <>

215 
˛ass
 
	gmembî_fun˘i⁄_poöãr
<,,,> : 
public
 
mÂ_kî√l_1_ba£_˛ass
<0>

217 ˛as†
	cmp_ba£
 : 
public
 
mp_ba£_ba£
 {

218 
public
:

219 
mp_ba£
(* 
±r
, 
mÂ_ty≥
 
ty≥_
Ë: 
mp_ba£_ba£
(ptr,type_) {}

220 
vútuÆ
 
ˇŒ
() const = 0;

223 
	gãm∂©e
 <
ty≥«me
 
	gT
>

224 ˛as†
	cmp_im∂
 : 
public
 
mp_ba£
 {

225 
public
:

226 (
T
::*
	tmÂ_poöãr_ty≥
)() ;

227 
ˇŒ
 (Ëc⁄° { (
	g°©ic_ˇ°
<
	gT
*>(
	gthis
->
	go
)->*
	gˇŒback
)(); }

229 
mp_im∂
 ( * 
obje˘
, 
mÂ_poöãr_ty≥
 
cb
Ë: 
mp_ba£
(obje˘, 
mÂ_n⁄c⁄°
), 
ˇŒback
(cb) {}

230 c⁄° 
mÂ_poöãr_ty≥
 
	gˇŒback
;

233 
	gãm∂©e
 <
ty≥«me
 
	gT
>

234 ˛as†
	cmp_im∂_c⁄°
 : 
public
 
mp_ba£
 {

235 
public
:

236 ((
T
::*
	tmÂ_poöãr_ty≥
)()const);

237 
ˇŒ
 (Ëc⁄° { (
	g°©ic_ˇ°
<c⁄° 
	gT
*>(
	gthis
->
	go
)->*
	gˇŒback
)(); }

239 
mp_im∂_c⁄°
 ( * 
obje˘
, 
mÂ_poöãr_ty≥
 
cb
Ë: 
mp_ba£
(obje˘,
mÂ_c⁄°
), 
ˇŒback
(cb) {}

240 c⁄° 
mÂ_poöãr_ty≥
 
	gˇŒback
;

243 
	gpublic
:

244 
	t∑øm1_ty≥
;

245 
	t∑øm2_ty≥
;

246 
	t∑øm3_ty≥
;

247 
	t∑øm4_ty≥
;

251 
membî_fun˘i⁄_poöãr
 
	tkî√l_1a
;

252 
membî_fun˘i⁄_poöãr
 
	tkî√l_1a_c
;

255 
›î©‹
(Ë(Ëc⁄° { 
	gDLIB_MFP_OC
; 
	g°©ic_ˇ°
<c⁄° 
	gmp_ba£
*>(
	gmp_mem‹y
.
gë
())->
ˇŒ
(); }

259 
	gãm∂©e
 <
ty≥«me
 
	gT
>Åy≥«mê
	gdißbÀ_if
<
	gis_c⁄°_ty≥
<T>,>::
ty≥


260 
£t
(
T
& 
obje˘
, 
ty≥«me
 
mp_im∂
<T>::
mÂ_poöãr_ty≥
 
cb
)

261 { 
DLIB_MFP_SC
; 
de°roy_mp_mem‹y
(); 
	gmp_im∂_T
<
	gmp_im∂
<
	gT
> >(&
	gobje˘
,
	gcb
).
ß„_˛⁄e
(
mp_mem‹y
); }

263 
	gãm∂©e
 <
ty≥«me
 
	gT
> 
£t
(c⁄° 
T
& 
obje˘
,Åy≥«mê
mp_im∂_c⁄°
<T>::
mÂ_poöãr_ty≥
 
cb
)

264 { 
DLIB_MFP_SC
; 
de°roy_mp_mem‹y
(); 
	gmp_im∂_T
<
	gmp_im∂_c⁄°
<
	gT
> >((*)&
	gobje˘
,
	gcb
).
ß„_˛⁄e
(
mp_mem‹y
); }

270 
	gãm∂©e
 <

271 
ty≥«me
 
	gPARAM1


273 
˛ass
 
	gmembî_fun˘i⁄_poöãr
<
	gPARAM1
,,,> : 
public
 
mÂ_kî√l_1_ba£_˛ass
<1>

275 ˛as†
	cmp_ba£
 : 
public
 
mp_ba£_ba£
 {

276 
public
:

277 
mp_ba£
(* 
±r
, 
mÂ_ty≥
 
ty≥_
Ë: 
mp_ba£_ba£
(ptr,type_) {}

278 
vútuÆ
 
ˇŒ
(
PARAM1
) const = 0;

281 
	gãm∂©e
 <
ty≥«me
 
	gT
>

282 ˛as†
	cmp_im∂
 : 
public
 
mp_ba£
 {

283 
public
:

284 (
T
::*
	tmÂ_poöãr_ty≥
)(
	tPARAM1
) ;

285 
ˇŒ
 (
PARAM1
 
p1
Ëc⁄° { (
	g°©ic_ˇ°
<
	gT
*>(
	gthis
->
	go
)->*
	gˇŒback
)(
	gp1
); }

287 
mp_im∂
 ( * 
obje˘
, 
mÂ_poöãr_ty≥
 
cb
Ë: 
mp_ba£
(obje˘, 
mÂ_n⁄c⁄°
), 
ˇŒback
(cb) {}

288 c⁄° 
mÂ_poöãr_ty≥
 
	gˇŒback
;

291 
	gãm∂©e
 <
ty≥«me
 
	gT
>

292 ˛as†
	cmp_im∂_c⁄°
 : 
public
 
mp_ba£
 {

293 
public
:

294 ((
T
::*
	tmÂ_poöãr_ty≥
)(
	tPARAM1
)const);

295 
ˇŒ
 (
PARAM1
 
p1
Ëc⁄° { (
	g°©ic_ˇ°
<c⁄° 
	gT
*>(
	gthis
->
	go
)->*
	gˇŒback
)(
	gp1
); }

297 
mp_im∂_c⁄°
 ( * 
obje˘
, 
mÂ_poöãr_ty≥
 
cb
Ë: 
mp_ba£
(obje˘,
mÂ_c⁄°
), 
ˇŒback
(cb) {}

298 c⁄° 
mÂ_poöãr_ty≥
 
	gˇŒback
;

301 
	gpublic
:

302 
PARAM1
 
	t∑øm1_ty≥
;

303 
	t∑øm2_ty≥
;

304 
	t∑øm3_ty≥
;

305 
	t∑øm4_ty≥
;

309 
membî_fun˘i⁄_poöãr
 
	tkî√l_1a
;

310 
membî_fun˘i⁄_poöãr
 
	tkî√l_1a_c
;

313 
›î©‹
(Ë(
PARAM1
 
	gp1
Ëc⁄° { 
	gDLIB_MFP_OC
; 
	g°©ic_ˇ°
<c⁄° 
	gmp_ba£
*>(
	gmp_mem‹y
.
gë
())->
ˇŒ
(
p1
); }

317 
	gãm∂©e
 <
ty≥«me
 
	gT
>Åy≥«mê
	gdißbÀ_if
<
	gis_c⁄°_ty≥
<T>,>::
ty≥


318 
£t
(
T
& 
obje˘
, 
ty≥«me
 
mp_im∂
<T>::
mÂ_poöãr_ty≥
 
cb
)

319 { 
DLIB_MFP_SC
; 
de°roy_mp_mem‹y
(); 
	gmp_im∂_T
<
	gmp_im∂
<
	gT
> >(&
	gobje˘
,
	gcb
).
ß„_˛⁄e
(
mp_mem‹y
); }

321 
	gãm∂©e
 <
ty≥«me
 
	gT
> 
£t
(c⁄° 
T
& 
obje˘
,Åy≥«mê
mp_im∂_c⁄°
<T>::
mÂ_poöãr_ty≥
 
cb
)

322 { 
DLIB_MFP_SC
; 
de°roy_mp_mem‹y
(); 
	gmp_im∂_T
<
	gmp_im∂_c⁄°
<
	gT
> >((*)&
	gobje˘
,
	gcb
).
ß„_˛⁄e
(
mp_mem‹y
); }

328 
	gãm∂©e
 <

329 
ty≥«me
 
	gPARAM1
,

330 
ty≥«me
 
	gPARAM2


332 
˛ass
 
	gmembî_fun˘i⁄_poöãr
<
	gPARAM1
,
	gPARAM2
,,> : 
public
 
mÂ_kî√l_1_ba£_˛ass
<2>

334 ˛as†
	cmp_ba£
 : 
public
 
mp_ba£_ba£
 {

335 
public
:

336 
mp_ba£
(* 
±r
, 
mÂ_ty≥
 
ty≥_
Ë: 
mp_ba£_ba£
(ptr,type_) {}

337 
vútuÆ
 
ˇŒ
(
PARAM1
,
PARAM2
) const = 0;

340 
	gãm∂©e
 <
ty≥«me
 
	gT
>

341 ˛as†
	cmp_im∂
 : 
public
 
mp_ba£
 {

342 
public
:

343 (
T
::*
	tmÂ_poöãr_ty≥
)(
	tPARAM1
,
	tPARAM2
) ;

344 
ˇŒ
 (
PARAM1
 
p1
, 
PARAM2
 
p2
Ëc⁄° { (
	g°©ic_ˇ°
<
	gT
*>(
	gthis
->
	go
)->*
	gˇŒback
)(
	gp1
,
	gp2
); }

346 
mp_im∂
 ( * 
obje˘
, 
mÂ_poöãr_ty≥
 
cb
Ë: 
mp_ba£
(obje˘, 
mÂ_n⁄c⁄°
), 
ˇŒback
(cb) {}

347 c⁄° 
mÂ_poöãr_ty≥
 
	gˇŒback
;

350 
	gãm∂©e
 <
ty≥«me
 
	gT
>

351 ˛as†
	cmp_im∂_c⁄°
 : 
public
 
mp_ba£
 {

352 
public
:

353 ((
T
::*
	tmÂ_poöãr_ty≥
)(
	tPARAM1
,
	tPARAM2
)const);

354 
ˇŒ
 (
PARAM1
 
p1
, 
PARAM2
 
p2
Ëc⁄° { (
	g°©ic_ˇ°
<c⁄° 
	gT
*>(
	gthis
->
	go
)->*
	gˇŒback
)(
	gp1
,
	gp2
); }

356 
mp_im∂_c⁄°
 ( * 
obje˘
, 
mÂ_poöãr_ty≥
 
cb
Ë: 
mp_ba£
(obje˘,
mÂ_c⁄°
), 
ˇŒback
(cb) {}

357 c⁄° 
mÂ_poöãr_ty≥
 
	gˇŒback
;

360 
	gpublic
:

361 
PARAM1
 
	t∑øm1_ty≥
;

362 
PARAM2
 
	t∑øm2_ty≥
;

363 
	t∑øm3_ty≥
;

364 
	t∑øm4_ty≥
;

368 
membî_fun˘i⁄_poöãr
 
	tkî√l_1a
;

369 
membî_fun˘i⁄_poöãr
 
	tkî√l_1a_c
;

371 
›î©‹
(Ë(
PARAM1
 
	gp1
, 
PARAM2
 
	gp2
Ëc⁄° { 
	gDLIB_MFP_OC
; 
	g°©ic_ˇ°
<c⁄° 
	gmp_ba£
*>(
	gmp_mem‹y
.
gë
())->
ˇŒ
(
p1
,
p2
); }

375 
	gãm∂©e
 <
ty≥«me
 
	gT
>Åy≥«mê
	gdißbÀ_if
<
	gis_c⁄°_ty≥
<T>,>::
ty≥


376 
£t
(
T
& 
obje˘
, 
ty≥«me
 
mp_im∂
<T>::
mÂ_poöãr_ty≥
 
cb
)

377 { 
DLIB_MFP_SC
; 
de°roy_mp_mem‹y
(); 
	gmp_im∂_T
<
	gmp_im∂
<
	gT
> >(&
	gobje˘
,
	gcb
).
ß„_˛⁄e
(
mp_mem‹y
); }

379 
	gãm∂©e
 <
ty≥«me
 
	gT
> 
£t
(c⁄° 
T
& 
obje˘
,Åy≥«mê
mp_im∂_c⁄°
<T>::
mÂ_poöãr_ty≥
 
cb
)

380 { 
DLIB_MFP_SC
; 
de°roy_mp_mem‹y
(); 
	gmp_im∂_T
<
	gmp_im∂_c⁄°
<
	gT
> >((*)&
	gobje˘
,
	gcb
).
ß„_˛⁄e
(
mp_mem‹y
); }

386 
	gãm∂©e
 <

387 
ty≥«me
 
	gPARAM1
,

388 
ty≥«me
 
	gPARAM2
,

389 
ty≥«me
 
	gPARAM3


391 
˛ass
 
	gmembî_fun˘i⁄_poöãr
<
	gPARAM1
,
	gPARAM2
,
	gPARAM3
,> : 
public
 
mÂ_kî√l_1_ba£_˛ass
<3>

393 ˛as†
	cmp_ba£
 : 
public
 
mp_ba£_ba£
 {

394 
public
:

395 
mp_ba£
(* 
±r
, 
mÂ_ty≥
 
ty≥_
Ë: 
mp_ba£_ba£
(ptr,type_) {}

396 
vútuÆ
 
ˇŒ
(
PARAM1
,
PARAM2
,
PARAM3
) const = 0;

399 
	gãm∂©e
 <
ty≥«me
 
	gT
>

400 ˛as†
	cmp_im∂
 : 
public
 
mp_ba£
 {

401 
public
:

402 (
T
::*
	tmÂ_poöãr_ty≥
)(
	tPARAM1
,
	tPARAM2
,
	tPARAM3
) ;

403 
ˇŒ
 (
PARAM1
 
p1
, 
PARAM2
 
p2
, 
PARAM3
 
p3
Ëc⁄° { (
	g°©ic_ˇ°
<
	gT
*>(
	gthis
->
	go
)->*
	gˇŒback
)(
	gp1
,
	gp2
,
	gp3
); }

405 
mp_im∂
 ( * 
obje˘
, 
mÂ_poöãr_ty≥
 
cb
Ë: 
mp_ba£
(obje˘, 
mÂ_n⁄c⁄°
), 
ˇŒback
(cb) {}

406 c⁄° 
mÂ_poöãr_ty≥
 
	gˇŒback
;

409 
	gãm∂©e
 <
ty≥«me
 
	gT
>

410 ˛as†
	cmp_im∂_c⁄°
 : 
public
 
mp_ba£
 {

411 
public
:

412 ((
T
::*
	tmÂ_poöãr_ty≥
)(
	tPARAM1
,
	tPARAM2
,
	tPARAM3
)const);

413 
ˇŒ
 (
PARAM1
 
p1
, 
PARAM2
 
p2
, 
PARAM3
 
p3
Ëc⁄° { (
	g°©ic_ˇ°
<c⁄° 
	gT
*>(
	gthis
->
	go
)->*
	gˇŒback
)(
	gp1
,
	gp2
,
	gp3
); }

415 
mp_im∂_c⁄°
 ( * 
obje˘
, 
mÂ_poöãr_ty≥
 
cb
Ë: 
mp_ba£
(obje˘,
mÂ_c⁄°
), 
ˇŒback
(cb) {}

416 c⁄° 
mÂ_poöãr_ty≥
 
	gˇŒback
;

419 
	gpublic
:

420 
PARAM1
 
	t∑øm1_ty≥
;

421 
PARAM2
 
	t∑øm2_ty≥
;

422 
PARAM3
 
	t∑øm3_ty≥
;

423 
	t∑øm4_ty≥
;

427 
membî_fun˘i⁄_poöãr
 
	tkî√l_1a
;

428 
membî_fun˘i⁄_poöãr
 
	tkî√l_1a_c
;

430 
›î©‹
(Ë(
PARAM1
 
	gp1
, 
PARAM2
 
	gp2
, 
PARAM3
 
	gp3
Ëc⁄° { 
	gDLIB_MFP_OC
; 
	g°©ic_ˇ°
<c⁄° 
	gmp_ba£
*>(
	gmp_mem‹y
.
gë
())->
ˇŒ
(
p1
,
p2
,
p3
); }

434 
	gãm∂©e
 <
ty≥«me
 
	gT
>Åy≥«mê
	gdißbÀ_if
<
	gis_c⁄°_ty≥
<T>,>::
ty≥


435 
£t
(
T
& 
obje˘
, 
ty≥«me
 
mp_im∂
<T>::
mÂ_poöãr_ty≥
 
cb
)

436 { 
DLIB_MFP_SC
; 
de°roy_mp_mem‹y
(); 
	gmp_im∂_T
<
	gmp_im∂
<
	gT
> >(&
	gobje˘
,
	gcb
).
ß„_˛⁄e
(
mp_mem‹y
); }

438 
	gãm∂©e
 <
ty≥«me
 
	gT
> 
£t
(c⁄° 
T
& 
obje˘
,Åy≥«mê
mp_im∂_c⁄°
<T>::
mÂ_poöãr_ty≥
 
cb
)

439 { 
DLIB_MFP_SC
; 
de°roy_mp_mem‹y
(); 
	gmp_im∂_T
<
	gmp_im∂_c⁄°
<
	gT
> >((*)&
	gobje˘
,
	gcb
).
ß„_˛⁄e
(
mp_mem‹y
); }

445 
	gãm∂©e
 <

446 
ty≥«me
 
	gPARAM1
,

447 
ty≥«me
 
	gPARAM2
,

448 
ty≥«me
 
	gPARAM3
,

449 
ty≥«me
 
	gPARAM4


451 
˛ass
 
	gmembî_fun˘i⁄_poöãr
 : 
public
 
mÂ_kî√l_1_ba£_˛ass
<4>

453 ˛as†
	cmp_ba£
 : 
public
 
mp_ba£_ba£
 {

454 
public
:

455 
mp_ba£
(* 
±r
, 
mÂ_ty≥
 
ty≥_
Ë: 
mp_ba£_ba£
(ptr,type_) {}

456 
vútuÆ
 
ˇŒ
(
PARAM1
,
PARAM2
,
PARAM3
,
PARAM4
) const = 0;

459 
	gãm∂©e
 <
ty≥«me
 
	gT
>

460 ˛as†
	cmp_im∂
 : 
public
 
mp_ba£
 {

461 
public
:

462 (
T
::*
	tmÂ_poöãr_ty≥
)(
	tPARAM1
,
	tPARAM2
,
	tPARAM3
, 
	tPARAM4
) ;

463 
ˇŒ
 (
PARAM1
 
p1
, 
PARAM2
 
p2
, 
PARAM3
 
p3
, 
PARAM4
 
p4
Ëc⁄° { (
	g°©ic_ˇ°
<
	gT
*>(
	gthis
->
	go
)->*
	gˇŒback
)(
	gp1
,
	gp2
,
	gp3
,
	gp4
); }

465 
mp_im∂
 ( * 
obje˘
, 
mÂ_poöãr_ty≥
 
cb
Ë: 
mp_ba£
(obje˘, 
mÂ_n⁄c⁄°
), 
ˇŒback
(cb) {}

466 c⁄° 
mÂ_poöãr_ty≥
 
	gˇŒback
;

469 
	gãm∂©e
 <
ty≥«me
 
	gT
>

470 ˛as†
	cmp_im∂_c⁄°
 : 
public
 
mp_ba£
 {

471 
public
:

472 ((
T
::*
	tmÂ_poöãr_ty≥
)(
	tPARAM1
,
	tPARAM2
,
	tPARAM3
,
	tPARAM4
)const);

473 
ˇŒ
 (
PARAM1
 
p1
, 
PARAM2
 
p2
, 
PARAM3
 
p3
, 
PARAM4
 
p4
Ëc⁄° { (
	g°©ic_ˇ°
<c⁄° 
	gT
*>(
	gthis
->
	go
)->*
	gˇŒback
)(
	gp1
,
	gp2
,
	gp3
,
	gp4
); }

475 
mp_im∂_c⁄°
 ( * 
obje˘
, 
mÂ_poöãr_ty≥
 
cb
Ë: 
mp_ba£
(obje˘,
mÂ_c⁄°
), 
ˇŒback
(cb) {}

476 c⁄° 
mÂ_poöãr_ty≥
 
	gˇŒback
;

479 
	gpublic
:

480 
PARAM1
 
	t∑øm1_ty≥
;

481 
PARAM2
 
	t∑øm2_ty≥
;

482 
PARAM3
 
	t∑øm3_ty≥
;

483 
PARAM4
 
	t∑øm4_ty≥
;

487 
membî_fun˘i⁄_poöãr
 
	tkî√l_1a
;

488 
membî_fun˘i⁄_poöãr
 
	tkî√l_1a_c
;

490 
›î©‹
(Ë(
PARAM1
 
	gp1
, 
PARAM2
 
	gp2
, 
PARAM3
 
	gp3
, 
PARAM4
 
	gp4
) const

491 { 
	gDLIB_MFP_OC
; 
	g°©ic_ˇ°
<c⁄° 
	gmp_ba£
*>(
	gmp_mem‹y
.
gë
())->
ˇŒ
(
p1
,
p2
,
p3
,
p4
); }

495 
	gãm∂©e
 <
ty≥«me
 
	gT
>Åy≥«mê
	gdißbÀ_if
<
	gis_c⁄°_ty≥
<T>,>::
ty≥


496 
£t
(
T
& 
obje˘
, 
ty≥«me
 
mp_im∂
<T>::
mÂ_poöãr_ty≥
 
cb
)

497 { 
DLIB_MFP_SC
; 
de°roy_mp_mem‹y
(); 
	gmp_im∂_T
<
	gmp_im∂
<
	gT
> >(&
	gobje˘
,
	gcb
).
ß„_˛⁄e
(
mp_mem‹y
); }

499 
	gãm∂©e
 <
ty≥«me
 
	gT
> 
£t
(c⁄° 
T
& 
obje˘
,Åy≥«mê
mp_im∂_c⁄°
<T>::
mÂ_poöãr_ty≥
 
cb
)

500 { 
DLIB_MFP_SC
; 
de°roy_mp_mem‹y
(); 
	gmp_im∂_T
<
	gmp_im∂_c⁄°
<
	gT
> >((*)&
	gobje˘
,
	gcb
).
ß„_˛⁄e
(
mp_mem‹y
); }

	@viper/concurrentqueue-src/benchmarks/dlib/member_function_pointer/member_function_pointer_kernel_abstract.h

3 #unde‡
DLIB_MEMBER_FUNCTION_POINTER_KERNEl_ABSTRACT_


4 #ifde‡
DLIB_MEMBER_FUNCTION_POINTER_KERNEl_ABSTRACT_


6 
«me•a˚
 
	gdlib


11 
	gãm∂©e
 <

12 
ty≥«me
 
	gPARAM1
 = ,

13 
ty≥«me
 
	gPARAM2
 = ,

14 
ty≥«me
 
	gPARAM3
 = ,

15 
ty≥«me
 
	gPARAM4
 = 

17 
˛ass
 
membî_fun˘i⁄_poöãr
;

21 
	gãm∂©e
 <>

22 
˛ass
 
	gmembî_fun˘i⁄_poöãr
<,,,>

54 
	gpublic
:

55 
	t∑øm1_ty≥
;

56 
	t∑øm2_ty≥
;

57 
	t∑øm3_ty≥
;

58 
	t∑øm4_ty≥
;

60 
membî_fun˘i⁄_poöãr
 (

67 
membî_fun˘i⁄_poöãr
(

68 c⁄° 
membî_fun˘i⁄_poöãr
& 
ôem


75 ~
membî_fun˘i⁄_poöãr
 (

82 
	gmembî_fun˘i⁄_poöãr
& 
	g›î©‹
=(

83 c⁄° 
membî_fun˘i⁄_poöãr
& 
ôem


90 
boﬁ
 
	g›î©‹
 == (

91 c⁄° 
membî_fun˘i⁄_poöãr
& 
ôem


104 
boﬁ
 
	g›î©‹
 != (

105 c⁄° 
membî_fun˘i⁄_poöãr
& 
ôem


112 
˛ór
(

119 
boﬁ
 
is_£t
 (

129 
	gãm∂©e
 <

130 
ty≥«me
 
	gT


132 
£t
 (

133 
T
& 
obje˘
,

134 (
T
::*
cb
)()

144 
	gãm∂©e
 <

145 
ty≥«me
 
	gT


147 
£t
 (

148 c⁄° 
T
& 
obje˘
,

149 (
T
::*
cb
)()const

159 
›î©‹
 
some_undeföed_poöãr_ty≥
 (

169 
boﬁ
 
	g›î©‹
! (

176 
›î©‹
 () (

191 
sw≠
 (

192 
membî_fun˘i⁄_poöãr
& 
ôem


203 
	gãm∂©e
 <

204 
ty≥«me
 
	gPARAM1


206 
˛ass
 
	gmembî_fun˘i⁄_poöãr
<
	gPARAM1
,,,>

208 
	gpublic
:

209 
PARAM1
 
	t∑øm1_ty≥
;

210 
	t∑øm2_ty≥
;

211 
	t∑øm3_ty≥
;

212 
	t∑øm4_ty≥
;

214 
membî_fun˘i⁄_poöãr
 ();

216 
membî_fun˘i⁄_poöãr
(

217 c⁄° 
membî_fun˘i⁄_poöãr
& 
ôem


220 ~
membî_fun˘i⁄_poöãr
 (

223 
	gmembî_fun˘i⁄_poöãr
& 
	g›î©‹
=(

224 c⁄° 
membî_fun˘i⁄_poöãr
& 
ôem


227 
boﬁ
 
	g›î©‹
 == (

228 c⁄° 
membî_fun˘i⁄_poöãr
& 
ôem


231 
boﬁ
 
	g›î©‹
 != (

232 c⁄° 
membî_fun˘i⁄_poöãr
& 
ôem


235 
˛ór
();

237 
boﬁ
 
is_£t
 () const;

239 
	gãm∂©e
 <
ty≥«me
 
	gT
>

240 
£t
 (

241 
T
& 
obje˘
,

242 (
T
::*
cb
)(
PARAM1
)

245 
	gãm∂©e
 <
ty≥«me
 
	gT
>

246 
£t
 (

247 c⁄° 
T
& 
obje˘
,

248 (
T
::*
cb
)(
PARAM1
)const

251 
›î©‹
 
some_undeföed_poöãr_ty≥
 (

254 
boﬁ
 
	g›î©‹
! (

257 
›î©‹
 () (

258 
PARAM1
 
	g∑øm1


261 
sw≠
 (

262 
membî_fun˘i⁄_poöãr
& 
ôem


269 
	gãm∂©e
 <

270 
ty≥«me
 
	gPARAM1
,

271 
ty≥«me
 
	gPARAM2


273 
˛ass
 
	gmembî_fun˘i⁄_poöãr
<
	gPARAM1
,
	gPARAM2
,,>

275 
	gpublic
:

276 
PARAM1
 
	t∑øm1_ty≥
;

277 
PARAM2
 
	t∑øm2_ty≥
;

278 
	t∑øm3_ty≥
;

279 
	t∑øm4_ty≥
;

281 
membî_fun˘i⁄_poöãr
 ();

283 
membî_fun˘i⁄_poöãr
(

284 c⁄° 
membî_fun˘i⁄_poöãr
& 
ôem


287 ~
membî_fun˘i⁄_poöãr
 (

290 
	gmembî_fun˘i⁄_poöãr
& 
	g›î©‹
=(

291 c⁄° 
membî_fun˘i⁄_poöãr
& 
ôem


294 
boﬁ
 
	g›î©‹
 == (

295 c⁄° 
membî_fun˘i⁄_poöãr
& 
ôem


298 
boﬁ
 
	g›î©‹
 != (

299 c⁄° 
membî_fun˘i⁄_poöãr
& 
ôem


302 
˛ór
();

304 
boﬁ
 
is_£t
 () const;

306 
	gãm∂©e
 <
ty≥«me
 
	gT
>

307 
£t
 (

308 
T
& 
obje˘
,

309 (
T
::*
cb
)(
PARAM1
,
PARAM2
)

312 
	gãm∂©e
 <
ty≥«me
 
	gT
>

313 
£t
 (

314 c⁄° 
T
& 
obje˘
,

315 (
T
::*
cb
)(
PARAM1
,
PARAM2
)const

318 
›î©‹
 
some_undeföed_poöãr_ty≥
 (

321 
boﬁ
 
	g›î©‹
! (

324 
›î©‹
 () (

325 
PARAM1
 
	g∑øm1
,

326 
PARAM2
 
	g∑øm2


329 
sw≠
 (

330 
membî_fun˘i⁄_poöãr
& 
ôem


337 
	gãm∂©e
 <

338 
ty≥«me
 
	gPARAM1
,

339 
ty≥«me
 
	gPARAM2
,

340 
ty≥«me
 
	gPARAM3


342 
˛ass
 
	gmembî_fun˘i⁄_poöãr
<
	gPARAM1
,
	gPARAM2
,
	gPARAM3
,>

344 
	gpublic
:

345 
PARAM1
 
	t∑øm1_ty≥
;

346 
PARAM2
 
	t∑øm2_ty≥
;

347 
PARAM3
 
	t∑øm3_ty≥
;

348 
	t∑øm4_ty≥
;

350 
membî_fun˘i⁄_poöãr
 ();

352 
membî_fun˘i⁄_poöãr
(

353 c⁄° 
membî_fun˘i⁄_poöãr
& 
ôem


356 ~
membî_fun˘i⁄_poöãr
 (

359 
	gmembî_fun˘i⁄_poöãr
& 
	g›î©‹
=(

360 c⁄° 
membî_fun˘i⁄_poöãr
& 
ôem


363 
boﬁ
 
	g›î©‹
 == (

364 c⁄° 
membî_fun˘i⁄_poöãr
& 
ôem


367 
boﬁ
 
	g›î©‹
 != (

368 c⁄° 
membî_fun˘i⁄_poöãr
& 
ôem


371 
˛ór
();

373 
boﬁ
 
is_£t
 () const;

375 
	gãm∂©e
 <
ty≥«me
 
	gT
>

376 
£t
 (

377 
T
& 
obje˘
,

378 (
T
::*
cb
)(
PARAM1
,
PARAM2
,
PARAM3
)

381 
	gãm∂©e
 <
ty≥«me
 
	gT
>

382 
£t
 (

383 c⁄° 
T
& 
obje˘
,

384 (
T
::*
cb
)(
PARAM1
,
PARAM2
,
PARAM3
)const

387 
›î©‹
 
some_undeföed_poöãr_ty≥
 (

390 
boﬁ
 
	g›î©‹
! (

393 
›î©‹
 () (

394 
PARAM1
 
	g∑øm1
,

395 
PARAM2
 
	g∑øm2
,

396 
PARAM2
 
	g∑øm3


399 
sw≠
 (

400 
membî_fun˘i⁄_poöãr
& 
ôem


407 
	gãm∂©e
 <

408 
ty≥«me
 
	gPARAM1
,

409 
ty≥«me
 
	gPARAM2
,

410 
ty≥«me
 
	gPARAM3
,

411 
ty≥«me
 
	gPARAM4


413 ˛as†
	cmembî_fun˘i⁄_poöãr


415 
	gpublic
:

416 
PARAM1
 
	t∑øm1_ty≥
;

417 
PARAM2
 
	t∑øm2_ty≥
;

418 
PARAM3
 
	t∑øm3_ty≥
;

419 
PARAM4
 
	t∑øm4_ty≥
;

421 
membî_fun˘i⁄_poöãr
 ();

423 
membî_fun˘i⁄_poöãr
(

424 c⁄° 
membî_fun˘i⁄_poöãr
& 
ôem


427 ~
membî_fun˘i⁄_poöãr
 (

430 
	gmembî_fun˘i⁄_poöãr
& 
	g›î©‹
=(

431 c⁄° 
membî_fun˘i⁄_poöãr
& 
ôem


434 
boﬁ
 
	g›î©‹
 == (

435 c⁄° 
membî_fun˘i⁄_poöãr
& 
ôem


438 
boﬁ
 
	g›î©‹
 != (

439 c⁄° 
membî_fun˘i⁄_poöãr
& 
ôem


442 
˛ór
();

444 
boﬁ
 
is_£t
 () const;

446 
	gãm∂©e
 <
ty≥«me
 
	gT
>

447 
£t
 (

448 
T
& 
obje˘
,

449 (
T
::*
cb
)(
PARAM1
,
PARAM2
,
PARAM3
,
PARAM4
)

452 
	gãm∂©e
 <
ty≥«me
 
	gT
>

453 
£t
 (

454 c⁄° 
T
& 
obje˘
,

455 (
T
::*
cb
)(
PARAM1
,
PARAM2
,
PARAM3
,
PARAM4
)const

458 
›î©‹
 
some_undeföed_poöãr_ty≥
 (

461 
boﬁ
 
	g›î©‹
! (

464 
›î©‹
 () (

465 
PARAM1
 
	g∑øm1
,

466 
PARAM2
 
	g∑øm2
,

467 
PARAM2
 
	g∑øm3
,

468 
PARAM2
 
	g∑øm4


471 
sw≠
 (

472 
membî_fun˘i⁄_poöãr
& 
ôem


	@viper/concurrentqueue-src/benchmarks/dlib/memory_manager.h

3 #i‚de‡
DLIB_MEMORY_MANAGEr_


4 
	#DLIB_MEMORY_MANAGEr_


	)

6 
	~"mem‹y_m™agî/mem‹y_m™agî_kî√l_1.h
"

7 
	~"mem‹y_m™agî/mem‹y_m™agî_kî√l_2.h
"

8 
	~"mem‹y_m™agî/mem‹y_m™agî_kî√l_3.h
"

12 
«me•a˚
 
	gdlib


15 
	gãm∂©e
 <

16 
ty≥«me
 
	gT


18 ˛as†
	cmem‹y_m™agî


20 
mem‹y_m™agî
() {}

23 
	gpublic
:

28 
mem‹y_m™agî_kî√l_1
<
	tT
,0>

29 
	tkî√l_1a
;

30 
	gmem‹y_m™agî_kî√l_1
<
	tT
,10>

31 
	tkî√l_1b
;

32 
	gmem‹y_m™agî_kî√l_1
<
	tT
,100>

33 
	tkî√l_1c
;

34 
	gmem‹y_m™agî_kî√l_1
<
	tT
,1000>

35 
	tkî√l_1d
;

36 
	gmem‹y_m™agî_kî√l_1
<
	tT
,10000>

37 
	tkî√l_1e
;

38 
	gmem‹y_m™agî_kî√l_1
<
	tT
,100000>

39 
	tkî√l_1f
;

42 
	gmem‹y_m™agî_kî√l_2
<
	tT
,10>

43 
	tkî√l_2a
;

44 
	gmem‹y_m™agî_kî√l_2
<
	tT
,100>

45 
	tkî√l_2b
;

46 
	gmem‹y_m™agî_kî√l_2
<
	tT
,1000>

47 
	tkî√l_2c
;

48 
	gmem‹y_m™agî_kî√l_2
<
	tT
,10000>

49 
	tkî√l_2d
;

50 
	gmem‹y_m™agî_kî√l_2
<
	tT
,100000>

51 
	tkî√l_2e
;

55 
	gmem‹y_m™agî_kî√l_3
<
	tT
,10>

56 
	tkî√l_3a
;

57 
	gmem‹y_m™agî_kî√l_3
<
	tT
,100>

58 
	tkî√l_3b
;

59 
	gmem‹y_m™agî_kî√l_3
<
	tT
,1000>

60 
	tkî√l_3c
;

61 
	gmem‹y_m™agî_kî√l_3
<
	tT
,10000>

62 
	tkî√l_3d
;

63 
	gmem‹y_m™agî_kî√l_3
<
	tT
,100000>

64 
	tkî√l_3e
;

	@viper/concurrentqueue-src/benchmarks/dlib/memory_manager/memory_manager_kernel_1.h

3 #i‚de‡
DLIB_MEMORY_MANAGER_KERNEl_1_


4 
	#DLIB_MEMORY_MANAGER_KERNEl_1_


	)

6 
	~"../Ægs.h
"

7 
	~"mem‹y_m™agî_kî√l_ab°ø˘.h
"

8 
	~"../as£π.h
"

9 
	~<√w
>

12 
«me•a˚
 
	gdlib


15 
	gãm∂©e
 <

16 
ty≥«me
 
	gT
,

17 
size_t
 
	gmax_poﬁ_size


19 ˛as†
	cmem‹y_m™agî_kî√l_1


53 
	unode


55 
node
* 
	g√xt
;

56 
	gôem
[(
T
)];

59 
	gpublic
:

61 
T
 
	tty≥
;

63 
	gãm∂©e
 <
ty≥«me
 
	gU
>

64 
	sªböd
 {

65 
	gmem‹y_m™agî_kî√l_1
<
	tU
,
	tmax_poﬁ_size
> 
	tŸhî
;

69 
mem‹y_m™agî_kî√l_1
(

71 
Æloˇti⁄s
(0),

72 
√xt
(0),

73 
poﬁ_size
(0)

77 
	gvútuÆ
 ~
mem‹y_m™agî_kî√l_1
(

81 
	g√xt
 != 0)

83 
node
* 
ãmp
 = 
√xt
;

84 
	g√xt
 = 
√xt
->next;

85 ::
›î©‹
 
dñëe
 ( 
°©ic_ˇ°
<*>(
ãmp
));

89 
size_t
 
gë_numbî_of_Æloˇti⁄s
 (

90 Ëc⁄° {  
	gÆloˇti⁄s
; }

92 
T
* 
Æloˇã_¨øy
 (

93 
size_t
 
size


96 
T
* 
	gãmp
 = 
√w
 T[
size
];

97 ++
	gÆloˇti⁄s
;

98  
	gãmp
;

101 
dóŒoˇã_¨øy
 (

102 
T
* 
ôem


105 --
	gÆloˇti⁄s
;

106 
	gdñëe
 [] 
	gôem
;

109 
T
* 
Æloˇã
 (

112 
T
* 
	gãmp
;

113 i‡(
	g√xt
 != 0)

115 
ãmp
 = 
ªöãΩªt_ˇ°
<
T
*>(
√xt
);

117 
node
* 
	gn
 = 
√xt
->next;

119 
	gåy


122 
√w
 (
°©ic_ˇ°
<*>(
ãmp
))
T
();

124 
ˇtch
 (...)

126 
	g√xt
->√xà
n
;

127 
	gthrow
;

130 
	g√xt
 = 
n
;

132 --
	gpoﬁ_size
;

136 
	gãmp
 = 
°©ic_ˇ°
<
T
*>(::
›î©‹
 
√w
((
node
)));

137 
	gåy


140 
√w
 (
°©ic_ˇ°
<*>(
ãmp
))
T
();

142 
ˇtch
 (...)

145 ::
›î©‹
 
dñëe
 ( 
°©ic_ˇ°
<*>(
ãmp
));

146 
	gthrow
;

150 ++
	gÆloˇti⁄s
;

151  
	gãmp
;

154 
dóŒoˇã
 (

155 
T
* 
ôem


158 --
	gÆloˇti⁄s
;

159 
	gôem
->~
T
();

161 i‡(
	gpoﬁ_size
 >
max_poﬁ_size
)

163 ::
›î©‹
 
dñëe
 ( 
°©ic_ˇ°
<*>(
ôem
));

168 
node
* 
	gãmp
 = 
ªöãΩªt_ˇ°
<node*>(
ôem
);

169 
	gãmp
->
	g√xt
 = 
√xt
;

170 
	g√xt
 = 
ãmp
;

171 ++
	gpoﬁ_size
;

174 
sw≠
 (

175 
mem‹y_m™agî_kî√l_1
& 
ôem


178 
exch™ge
(
Æloˇti⁄s
,
ôem
.allocations);

179 
exch™ge
(
√xt
,
ôem
.next);

180 
exch™ge
(
poﬁ_size
,
ôem
.pool_size);

183 
	g¥iv©e
:

186 
size_t
 
Æloˇti⁄s
;

187 
node
* 
	g√xt
;

188 
size_t
 
	gpoﬁ_size
;

191 
mem‹y_m™agî_kî√l_1
(memory_manager_kernel_1&);

192 
	gmem‹y_m™agî_kî√l_1
& 
	g›î©‹
=(
mem‹y_m™agî_kî√l_1
&);

197 
	gãm∂©e
 <

198 
ty≥«me
 
	gT


200 
˛ass
 
	gmem‹y_m™agî_kî√l_1
<
	gT
,0>

213 
	gpublic
:

215 
T
 
	tty≥
;

217 
	gãm∂©e
 <
ty≥«me
 
	gU
>

218 
	sªböd
 {

219 
	gmem‹y_m™agî_kî√l_1
<
	tU
,0> 
	tŸhî
;

223 
mem‹y_m™agî_kî√l_1
(

225 
Æloˇti⁄s
(0)

229 
vútuÆ
 ~
mem‹y_m™agî_kî√l_1
(

234 
size_t
 
gë_numbî_of_Æloˇti⁄s
 (

235 Ëc⁄° {  
Æloˇti⁄s
; }

237 
T
* 
Æloˇã_¨øy
 (

238 
size_t
 
size


241 
T
* 
	gãmp
 = 
√w
 T[
size
];

242 ++
	gÆloˇti⁄s
;

243  
	gãmp
;

246 
dóŒoˇã_¨øy
 (

247 
T
* 
ôem


250 --
	gÆloˇti⁄s
;

251 
	gdñëe
 [] 
	gôem
;

254 
T
* 
Æloˇã
 (

257 
T
* 
	gãmp
 = 
√w
 T;

258 ++
	gÆloˇti⁄s
;

259  
	gãmp
;

262 
dóŒoˇã
 (

263 
T
* 
ôem


266 
dñëe
 
	gôem
;

267 --
	gÆloˇti⁄s
;

270 
sw≠
 (

271 
mem‹y_m™agî_kî√l_1
& 
ôem


274 
exch™ge
(
Æloˇti⁄s
,
ôem
.allocations);

277 
	g¥iv©e
:

280 
size_t
 
Æloˇti⁄s
;

283 
mem‹y_m™agî_kî√l_1
(memory_manager_kernel_1&);

284 
	gmem‹y_m™agî_kî√l_1
& 
	g›î©‹
=(
mem‹y_m™agî_kî√l_1
&);

289 
	gãm∂©e
 <

290 
ty≥«me
 
	gT
,

291 
size_t
 
	gmax_poﬁ_size


293 
ölöe
 
sw≠
 (

294 
mem‹y_m™agî_kî√l_1
<
T
,
max_poﬁ_size
>& 
a
,

295 
mem‹y_m™agî_kî√l_1
<
T
,
max_poﬁ_size
>& 
b


296 Ë{ 
	ga
.
sw≠
(
b
); }

	@viper/concurrentqueue-src/benchmarks/dlib/memory_manager/memory_manager_kernel_2.h

3 #i‚de‡
DLIB_MEMORY_MANAGER_KERNEl_2_


4 
	#DLIB_MEMORY_MANAGER_KERNEl_2_


	)

6 
	~"../Ægs.h
"

7 
	~"mem‹y_m™agî_kî√l_ab°ø˘.h
"

8 
	~"../as£π.h
"

9 
	~<√w
>

11 
«me•a˚
 
	gdlib


14 
	gãm∂©e
 <

15 
ty≥«me
 
	gT
,

16 
size_t
 
	gchunk_size


18 ˛as†
	cmem‹y_m™agî_kî√l_2


57 
	unode


59 
node
* 
	g√xt
;

60 
	gôem
[(
T
)];

63 
	schunk_node


65 
node
* 
	gchunk
;

66 
chunk_node
* 
	g√xt
;

69 
	gpublic
:

71 
T
 
	tty≥
;

73 
	gãm∂©e
 <
ty≥«me
 
	gU
>

74 
	sªböd
 {

75 
	gmem‹y_m™agî_kî√l_2
<
	tU
,
	tchunk_size
> 
	tŸhî
;

79 
mem‹y_m™agî_kî√l_2
(

81 
Æloˇti⁄s
(0),

82 
√xt
(0),

83 
fú°_chunk
(0)

86 
COMPILE_TIME_ASSERT
(
chunk_size
 > 0);

89 
	gvútuÆ
 ~
mem‹y_m™agî_kî√l_2
(

92 i‡(
	gÆloˇti⁄s
 == 0)

94 
fú°_chunk
 != 0)

96 
chunk_node
* 
ãmp
 = 
fú°_chunk
;

97 
	gfú°_chunk
 = 
fú°_chunk
->
√xt
;

99 ::
›î©‹
 
dñëe
 ( 
°©ic_ˇ°
<*>(
ãmp
->
chunk
));

101 
dñëe
 
	gãmp
;

106 
size_t
 
gë_numbî_of_Æloˇti⁄s
 (

107 Ëc⁄° {  
	gÆloˇti⁄s
; }

109 
T
* 
Æloˇã_¨øy
 (

110 
size_t
 
size


113 
T
* 
	gãmp
 = 
√w
 T[
size
];

114 ++
	gÆloˇti⁄s
;

115  
	gãmp
;

118 
dóŒoˇã_¨øy
 (

119 
T
* 
ôem


122 --
	gÆloˇti⁄s
;

123 
	gdñëe
 [] 
	gôem
;

126 
T
* 
Æloˇã
 (

129 
T
* 
	gãmp
 = 0;

130 i‡(
	g√xt
 != 0)

132 
ãmp
 = 
ªöãΩªt_ˇ°
<
T
*>(
√xt
);

133 
node
* 
	gn
 = 
√xt
->next;

135 
	gåy


138 
√w
 (
°©ic_ˇ°
<*>(
ãmp
))
T
();

140 
ˇtch
 (...)

142 
	g√xt
->√xà
n
;

143 
	gthrow
;

146 
	g√xt
 = 
n
;

151 
node
* 
	gblock
 = 0;

152 
	gblock
 = 
°©ic_ˇ°
<
node
*>(::
›î©‹
 
√w
 (“ode)*
chunk_size
));

155 
	gãmp
 = 
ªöãΩªt_ˇ°
<
T
*>(
block
);

157 
	gåy


160 
√w
 (
°©ic_ˇ°
<*>(
ãmp
))
T
();

162 
ˇtch
 (...)

165 ::
›î©‹
 
dñëe
 ( 
°©ic_ˇ°
<*>(
block
));

166 
	gthrow
;

170 
chunk_node
* 
	gchunk
;

171 
	gåy
 {
	gchunk
 = 
√w
 
chunk_node
; }

172 
ˇtch
 (...)

174 
	gãmp
->~
T
();

175 ::
›î©‹
 
dñëe
 ( 
°©ic_ˇ°
<*>(
block
));

176 
	gthrow
;

180 
	gchunk
->chunk = 
block
;

181 
	gchunk
->
	g√xt
 = 
fú°_chunk
;

182 
	gfú°_chunk
 = 
chunk
;

185 ++
	gblock
;

187 
size_t
 
	gi
 = 0; i < 
	gchunk_size
-1; ++i)

189 
	gblock
->
	g√xt
 = 
√xt
;

190 
	g√xt
 = 
block
;

191 ++
	gblock
;

197 ++
	gÆloˇti⁄s
;

198  
	gãmp
;

201 
dóŒoˇã
 (

202 
T
* 
ôem


205 --
	gÆloˇti⁄s
;

206 
	gôem
->~
T
();

209 
node
* 
	gãmp
 = 
ªöãΩªt_ˇ°
<node*>(
ôem
);

210 
	gãmp
->
	g√xt
 = 
√xt
;

211 
	g√xt
 = 
ãmp
;

214 
sw≠
 (

215 
mem‹y_m™agî_kî√l_2
& 
ôem


218 
exch™ge
(
Æloˇti⁄s
,
ôem
.allocations);

219 
exch™ge
(
√xt
,
ôem
.next);

220 
exch™ge
(
fú°_chunk
,
ôem
.first_chunk);

223 
	g¥iv©e
:

226 
size_t
 
Æloˇti⁄s
;

227 
node
* 
	g√xt
;

229 
chunk_node
* 
	gfú°_chunk
;

235 
mem‹y_m™agî_kî√l_2
(memory_manager_kernel_2&);

236 
	gmem‹y_m™agî_kî√l_2
& 
	g›î©‹
=(
mem‹y_m™agî_kî√l_2
&);

239 
	gãm∂©e
 <

240 
ty≥«me
 
	gT
,

241 
size_t
 
	gchunk_size


243 
ölöe
 
sw≠
 (

244 
mem‹y_m™agî_kî√l_2
<
T
,
chunk_size
>& 
a
,

245 
mem‹y_m™agî_kî√l_2
<
T
,
chunk_size
>& 
b


246 Ë{ 
	ga
.
sw≠
(
b
); }

	@viper/concurrentqueue-src/benchmarks/dlib/memory_manager/memory_manager_kernel_3.h

3 #i‚de‡
DLIB_MEMORY_MANAGER_KERNEl_3_


4 
	#DLIB_MEMORY_MANAGER_KERNEl_3_


	)

6 
	~"../Ægs.h
"

7 
	~"mem‹y_m™agî_kî√l_ab°ø˘.h
"

8 
	~"../as£π.h
"

9 
	~<√w
>

10 
	~"mem‹y_m™agî_kî√l_2.h
"

11 
	~"../bö¨y_£¨ch_åì/bö¨y_£¨ch_åì_kî√l_2.h
"

14 
«me•a˚
 
	gdlib


17 
	gãm∂©e
 <

18 
ty≥«me
 
	gT
,

19 
size_t
 
	gchunk_size


21 ˛as†
	cmem‹y_m™agî_kî√l_3


62 
	unode


64 
node
* 
	g√xt
;

65 
	gôem
[(
T
)];

68 
	schunk_node


70 
node
* 
	gchunk
;

71 
chunk_node
* 
	g√xt
;

75 
	gbö¨y_£¨ch_åì_kî√l_2
<

76 
	tsize_t
,

78 
	tmem‹y_m™agî_kî√l_2
<,5>

79 > 
	tb°_of_¨øys
;

81 
	gpublic
:

83 
T
 
	tty≥
;

85 
	gãm∂©e
 <
ty≥«me
 
	gU
>

86 
	sªböd
 {

87 
	gmem‹y_m™agî_kî√l_3
<
	tU
,
	tchunk_size
> 
	tŸhî
;

91 
mem‹y_m™agî_kî√l_3
(

93 
Æloˇti⁄s
(0),

94 
√xt
(0),

95 
fú°_chunk
(0),

96 
¨øys
(0)

99 
COMPILE_TIME_ASSERT
(
chunk_size
 > 0);

102 
	gvútuÆ
 ~
mem‹y_m™agî_kî√l_3
(

105 i‡(
	gÆloˇti⁄s
 == 0)

107 
fú°_chunk
 != 0)

109 
chunk_node
* 
ãmp
 = 
fú°_chunk
;

110 
	gfú°_chunk
 = 
fú°_chunk
->
√xt
;

112 ::
›î©‹
 
dñëe
 ( 
°©ic_ˇ°
<*>(
ãmp
->
chunk
));

114 
dñëe
 
	gãmp
;

118 i‡(
	g¨øys
)

120 
	g¨øys
->
ª£t
();

121 
	g¨øys
->
move_√xt
())

123 ::
›î©‹
 
dñëe
 (
¨øys
->
ñemít
().
vÆue
());

125 
dñëe
 
	g¨øys
;

129 
size_t
 
gë_numbî_of_Æloˇti⁄s
 (

130 Ëc⁄° {  
	gÆloˇti⁄s
; }

132 
T
* 
Æloˇã_¨øy
 (

133 
size_t
 
size


136 
size_t
 
	gblock_size
 = (
T
)*
size
 + (size_t)*2;

139 i‡(
	g¨øys
 == 0)

141 
¨øys
 = 
√w
 
b°_of_¨øys
;

144 * 
	gãmp
;

147 
	g¨øys
->
posôi⁄_íumî©‹
(
block_size
);

148 i‡(
	g¨øys
->
cuºít_ñemít_vÆid
())

151 
	g¨øys
->
ªmove_cuºít_ñemít
(
block_size
,
ãmp
);

155 
	gãmp
 = 
°©ic_ˇ°
<*>(::
›î©‹
 
√w
(
block_size
));

158 
	gªöãΩªt_ˇ°
<
	gsize_t
*>(
	gãmp
)[0] = 
block_size
;

159 
	gªöãΩªt_ˇ°
<
	gsize_t
*>(
	gãmp
)[1] = 
size
;

160 
	gãmp
 +(
size_t
)*2;

162 
	gåy


164 
öôülize_¨øy
(
ªöãΩªt_ˇ°
<
T
*>(
ãmp
),
size
);

166 
ˇtch
 (...)

170 
	gãmp
 -(
size_t
)*2;

171 
	g¨øys
->
add
(
block_size
,
ãmp
);

172 
	gthrow
;

175 ++
	gÆloˇti⁄s
;

176  
	gªöãΩªt_ˇ°
<
	gT
*>(
	gãmp
);

179 
dóŒoˇã_¨øy
 (

180 
T
* 
ôem


183 * 
	gãmp
 = 
ªöãΩªt_ˇ°
<*>(
ôem
);

184 
	gãmp
 -(
size_t
)*2;

185 
size_t
 
	gblock_size
 = 
ªöãΩªt_ˇ°
<size_t*>(
ãmp
)[0];

186 
size_t
 
	gsize
 = 
ªöãΩªt_ˇ°
<size_t*>(
ãmp
)[1];

188 
deöôülize_¨øy
(
ôem
,
size
);

190 
	g¨øys
->
add
(
block_size
,
ãmp
);

192 --
	gÆloˇti⁄s
;

195 
T
* 
Æloˇã
 (

198 
T
* 
	gãmp
;

199 i‡(
	g√xt
 != 0)

201 
ãmp
 = 
ªöãΩªt_ˇ°
<
T
*>(
√xt
);

202 
node
* 
	gn
 = 
√xt
->next;

204 
	gåy


207 
√w
 (
°©ic_ˇ°
<*>(
ãmp
))
T
();

209 
ˇtch
 (...)

211 
	g√xt
->√xà
n
;

212 
	gthrow
;

215 
	g√xt
 = 
n
;

220 
node
* 
	gblock
 = 
°©ic_ˇ°
<node*>(::
›î©‹
 
√w
 (“ode)*
chunk_size
));

223 
	gãmp
 = 
ªöãΩªt_ˇ°
<
T
*>(
block
);

225 
	gåy


228 
√w
 (
°©ic_ˇ°
<*>(
ãmp
))
T
();

230 
ˇtch
 (...)

233 ::
›î©‹
 
dñëe
 ( 
°©ic_ˇ°
<*>(
block
));

234 
	gthrow
;

238 
chunk_node
* 
	gchunk
;

239 
	gåy
 {
	gchunk
 = 
√w
 
chunk_node
; }

240 
ˇtch
 (...)

242 
	gãmp
->~
T
();

243 ::
›î©‹
 
dñëe
 ( 
°©ic_ˇ°
<*>(
block
));

244 
	gthrow
;

248 
	gchunk
->chunk = 
block
;

249 
	gchunk
->
	g√xt
 = 
fú°_chunk
;

250 
	gfú°_chunk
 = 
chunk
;

253 ++
	gblock
;

255 
size_t
 
	gi
 = 0; i < 
	gchunk_size
-1; ++i)

257 
	gblock
->
	g√xt
 = 
√xt
;

258 
	g√xt
 = 
block
;

259 ++
	gblock
;

265 ++
	gÆloˇti⁄s
;

266  
	gãmp
;

269 
dóŒoˇã
 (

270 
T
* 
ôem


273 --
	gÆloˇti⁄s
;

274 
	gôem
->~
T
();

277 
node
* 
	gãmp
 = 
ªöãΩªt_ˇ°
<node*>(
ôem
);

278 
	gãmp
->
	g√xt
 = 
√xt
;

279 
	g√xt
 = 
ãmp
;

282 
sw≠
 (

283 
mem‹y_m™agî_kî√l_3
& 
ôem


286 
exch™ge
(
Æloˇti⁄s
,
ôem
.allocations);

287 
exch™ge
(
√xt
,
ôem
.next);

288 
exch™ge
(
fú°_chunk
,
ôem
.first_chunk);

289 
exch™ge
(
¨øys
,
ôem
.arrays);

292 
	g¥iv©e
:

295 
size_t
 
Æloˇti⁄s
;

296 
node
* 
	g√xt
;

298 
chunk_node
* 
	gfú°_chunk
;

299 
b°_of_¨øys
* 
	g¨øys
;

302 
öôülize_¨øy
 (

303 
T
* 
¨øy
,

304 
size_t
 
size


307 
size_t
 
	gi
;

308 
	gåy


310 
	gi
 = 0; i < 
	gsize
; ++i)

313 
√w
 (
°©ic_ˇ°
<*>(
¨øy
+
i
))
T
();

316 
ˇtch
 (...)

321 
size_t
 
	gj
 = 0; j < 
	gi
; ++j)

323 
	g¨øy
[
i
].~
T
();

325 
	gthrow
;

329 
deöôülize_¨øy
 (

330 
T
* 
¨øy
,

331 
size_t
 
size


334 
size_t
 
	gi
 = 0; i < 
	gsize
; ++i)

336 
	g¨øy
[
i
].~
T
();

341 
öôülize_¨øy
(*, 
size_t
) {}

342 
deöôülize_¨øy
(*, 
size_t
) {}

343 
öôülize_¨øy
(sig√d *, 
size_t
) {}

344 
deöôülize_¨øy
(sig√d *, 
size_t
) {}

345 
öôülize_¨øy
(*, 
size_t
) {}

346 
deöôülize_¨øy
(*, 
size_t
) {}

347 
öôülize_¨øy
(*, 
size_t
) {}

348 
deöôülize_¨øy
(*, 
size_t
) {}

349 
öôülize_¨øy
(*, 
size_t
) {}

350 
deöôülize_¨øy
(*, 
size_t
) {}

351 
öôülize_¨øy
(*, 
size_t
) {}

352 
deöôülize_¨øy
(*, 
size_t
) {}

353 
öôülize_¨øy
(*, 
size_t
) {}

354 
deöôülize_¨øy
(*, 
size_t
) {}

355 
öôülize_¨øy
(*, 
size_t
) {}

356 
deöôülize_¨øy
(*, 
size_t
) {}

357 
öôülize_¨øy
(*, 
size_t
) {}

358 
deöôülize_¨øy
(*, 
size_t
) {}

359 
öôülize_¨øy
(*, 
size_t
) {}

360 
deöôülize_¨øy
(*, 
size_t
) {}

361 
öôülize_¨øy
(*, 
size_t
) {}

362 
deöôülize_¨øy
(*, 
size_t
) {}

367 
mem‹y_m™agî_kî√l_3
(memory_manager_kernel_3&);

368 
	gmem‹y_m™agî_kî√l_3
& 
	g›î©‹
=(
mem‹y_m™agî_kî√l_3
&);

371 
	gãm∂©e
 <

372 
ty≥«me
 
	gT
,

373 
size_t
 
	gchunk_size


375 
ölöe
 
sw≠
 (

376 
mem‹y_m™agî_kî√l_3
<
T
,
chunk_size
>& 
a
,

377 
mem‹y_m™agî_kî√l_3
<
T
,
chunk_size
>& 
b


378 Ë{ 
	ga
.
sw≠
(
b
); }

	@viper/concurrentqueue-src/benchmarks/dlib/memory_manager/memory_manager_kernel_abstract.h

3 #unde‡
DLIB_MEMORY_MANAGER_KERNEl_ABSTRACT_


4 #ifde‡
DLIB_MEMORY_MANAGER_KERNEl_ABSTRACT_


6 
	~"../Ægs.h
"

8 
«me•a˚
 
	gdlib


10 
	gãm∂©e
 <

11 
ty≥«me
 
	gT


13 ˛as†
	cmem‹y_m™agî


26 
	gpublic
:

28 
T
 
	tty≥
;

30 
	gãm∂©e
 <
ty≥«me
 
	gU
>

31 
	sªböd
 {

32 
	gmem‹y_m™agî
<
	tU
> 
	tŸhî
;

35 
mem‹y_m™agî
(

44 
	gvútuÆ
 ~
mem‹y_m™agî
(

55 
size_t
 
gë_numbî_of_Æloˇti⁄s
 (

62 
T
* 
Æloˇã
 (

74 
dóŒoˇã
 (

75 
T
* 
ôem


88 
T
* 
Æloˇã_¨øy
 (

89 
size_t
 
size


102 
dóŒoˇã_¨øy
 (

103 
T
* 
ôem


117 
sw≠
 (

118 
mem‹y_m™agî
& 
ôem


125 
	g¥iv©e
:

128 
mem‹y_m™agî
(memory_manager&);

129 
	gmem‹y_m™agî
& 
	g›î©‹
=(
mem‹y_m™agî
&);

132 
	gãm∂©e
 <

133 
ty≥«me
 
	gT


135 
ölöe
 
sw≠
 (

136 
mem‹y_m™agî
<
T
>& 
a
,

137 
mem‹y_m™agî
<
T
>& 
b


138 Ë{ 
	ga
.
sw≠
(
b
); }

	@viper/concurrentqueue-src/benchmarks/dlib/memory_manager_global.h

3 #i‚de‡
DLIB_MEMORY_MANAGER_GLOBAl_


4 
	#DLIB_MEMORY_MANAGER_GLOBAl_


	)

6 
	~"mem‹y_m™agî_globÆ/mem‹y_m™agî_globÆ_kî√l_1.h
"

7 
	~"mem‹y_m™agî.h
"

11 
«me•a˚
 
	gdlib


14 
	gãm∂©e
 <

15 
ty≥«me
 
	gT
,

16 
ty≥«me
 
	gÁ˘‹y


18 ˛as†
	cmem‹y_m™agî_globÆ


20 
mem‹y_m™agî_globÆ
() {}

23 
	gpublic
:

28 
mem‹y_m™agî_globÆ_kî√l_1
<
	tT
,
	tÁ˘‹y
>

29 
	tkî√l_1a
;

	@viper/concurrentqueue-src/benchmarks/dlib/memory_manager_global/memory_manager_global_kernel_1.h

3 #i‚de‡
DLIB_MEMORY_MANAGER_GLOBAl_1_


4 
	#DLIB_MEMORY_MANAGER_GLOBAl_1_


	)

6 
	~"../Ægs.h
"

7 
	~"../mem‹y_m™agî/mem‹y_m™agî_kî√l_ab°ø˘.h
"

8 
	~"mem‹y_m™agî_globÆ_kî√l_ab°ø˘.h
"

10 
«me•a˚
 
	gdlib


12 
	gãm∂©e
 <

13 
ty≥«me
 
	gT
,

14 
ty≥«me
 
	gÁ˘‹y


16 ˛as†
	cmem‹y_m™agî_globÆ_kî√l_1


27 
	gpublic
:

29 
ty≥«me
 
	tÁ˘‹y
::
	tãm∂©e
 
	tªtu∫_ty≥
<
	tT
>::
	tty≥
 
	tmm_globÆ_ty≥
;

31 
T
 
	tty≥
;

33 
	gãm∂©e
 <
ty≥«me
 
	gU
>

34 
	sªböd
 {

35 
	gmem‹y_m™agî_globÆ_kî√l_1
<
	tU
,
	tÁ˘‹y
> 
	tŸhî
;

38 
mem‹y_m™agî_globÆ_kî√l_1
(

40 
globÆ_mm
(
Á˘‹y
::
ãm∂©e
 
gë_ö°™˚
<
T
>())

43 
vútuÆ
 ~
mem‹y_m™agî_globÆ_kî√l_1
(

46 
size_t
 
gë_numbî_of_Æloˇti⁄s
 (

47 Ëc⁄° {  
globÆ_mm
->
gë_numbî_of_Æloˇti⁄s
(); }

49 
	gmm_globÆ_ty≥
& 
gë_globÆ_mem‹y_m™agî
 (

50 Ë{  *
	gglobÆ_mm
; }

52 
T
* 
Æloˇã
 (

55  
	gglobÆ_mm
->
Æloˇã
();

58 
dóŒoˇã
 (

59 
T
* 
ôem


62 
	gglobÆ_mm
->
dóŒoˇã
(
ôem
);

65 
T
* 
Æloˇã_¨øy
 (

66 
size_t
 
size


69  
	gglobÆ_mm
->
Æloˇã_¨øy
(
size
);

72 
dóŒoˇã_¨øy
 (

73 
T
* 
ôem


76 
	gglobÆ_mm
->
dóŒoˇã_¨øy
(
ôem
);

79 
sw≠
 (

80 
mem‹y_m™agî_globÆ_kî√l_1
& 
ôem


83 
exch™ge
(
ôem
.
globÆ_mm
, global_mm);

86 
	g¥iv©e
:

88 
mm_globÆ_ty≥
* 
globÆ_mm
;

92 
mem‹y_m™agî_globÆ_kî√l_1
(memory_manager_global_kernel_1&);

93 
	gmem‹y_m™agî_globÆ_kî√l_1
& 
	g›î©‹
=(
mem‹y_m™agî_globÆ_kî√l_1
&);

96 
	gãm∂©e
 <

97 
ty≥«me
 
	gT
,

98 
ty≥«me
 
	gÁ˘‹y


100 
ölöe
 
sw≠
 (

101 
mem‹y_m™agî_globÆ_kî√l_1
<
T
,
Á˘‹y
>& 
a
,

102 
mem‹y_m™agî_globÆ_kî√l_1
<
T
,
Á˘‹y
>& 
b


103 Ë{ 
	ga
.
sw≠
(
b
); }

	@viper/concurrentqueue-src/benchmarks/dlib/memory_manager_global/memory_manager_global_kernel_abstract.h

3 #unde‡
DLIB_MEMORY_MANAGER_GLOBAl_ABSTRACT_


4 #ifde‡
DLIB_MEMORY_MANAGER_GLOBAl_ABSTRACT_


6 
	~"../Ægs.h
"

7 
	~"../mem‹y_m™agî/mem‹y_m™agî_kî√l_ab°ø˘.h
"

9 
«me•a˚
 
	gdlib


11 
	gãm∂©e
 <

12 
ty≥«me
 
	gT
,

13 
ty≥«me
 
	gÁ˘‹y


15 ˛as†
	cmem‹y_m™agî_globÆ


54 
	gpublic
:

56 
ty≥«me
 
	tÁ˘‹y
::
	tãm∂©e
 
	tªtu∫_ty≥
<
	tT
>::
	tty≥
 
	tmm_globÆ_ty≥
;

58 
T
 
	tty≥
;

60 
	gãm∂©e
 <
ty≥«me
 
	gU
>

61 
	sªböd
 {

62 
	gmem‹y_m™agî_globÆ
<
	tU
,
	tÁ˘‹y
> 
	tŸhî
;

65 
mem‹y_m™agî_globÆ
(

76 
	gvútuÆ
 ~
mem‹y_m™agî_globÆ
(

84 
size_t
 
gë_numbî_of_Æloˇti⁄s
 (

91 
	gmm_globÆ_ty≥
& 
gë_globÆ_mem‹y_m™agî
 (

99 
T
* 
Æloˇã
 (

111 
dóŒoˇã
 (

112 
T
* 
ôem


124 
T
* 
Æloˇã_¨øy
 (

125 
size_t
 
size


137 
dóŒoˇã_¨øy
 (

138 
T
* 
ôem


150 
sw≠
 (

151 
mem‹y_m™agî_globÆ
& 
ôem


158 
	g¥iv©e
:

161 
mem‹y_m™agî_globÆ
(memory_manager_global&);

162 
	gmem‹y_m™agî_globÆ
& 
	g›î©‹
=(
mem‹y_m™agî_globÆ
&);

165 
	gãm∂©e
 <

166 
ty≥«me
 
	gT
,

167 
ty≥«me
 
	gÁ˘‹y


169 
ölöe
 
sw≠
 (

170 
mem‹y_m™agî_globÆ
<
T
,
Á˘‹y
>& 
a
,

171 
mem‹y_m™agî_globÆ
<
T
,
Á˘‹y
>& 
b


172 Ë{ 
	ga
.
sw≠
(
b
); }

	@viper/concurrentqueue-src/benchmarks/dlib/memory_manager_stateless.h

3 #i‚de‡
DLIB_MEMORY_MANAGER_STATELESs_


4 
	#DLIB_MEMORY_MANAGER_STATELESs_


	)

6 
	~"mem‹y_m™agî_°©ñess/mem‹y_m™agî_°©ñess_kî√l_1.h
"

7 
	~"mem‹y_m™agî_°©ñess/mem‹y_m™agî_°©ñess_kî√l_2.h
"

8 
	~"mem‹y_m™agî.h
"

12 
«me•a˚
 
	gdlib


15 
	gãm∂©e
 <

16 
ty≥«me
 
	gT


18 ˛as†
	cmem‹y_m™agî_°©ñess


20 
mem‹y_m™agî_°©ñess
() {}

23 
	gpublic
:

28 
mem‹y_m™agî_°©ñess_kî√l_1
<
	tT
>

29 
	tkî√l_1a
;

32 
	gmem‹y_m™agî_°©ñess_kî√l_2
<
	tT
,
	tmem‹y_m™agî
<>::
	tkî√l_1a
>

33 
	tkî√l_2_1a
;

34 
	gmem‹y_m™agî_°©ñess_kî√l_2
<
	tT
,
	tmem‹y_m™agî
<>::
	tkî√l_1b
>

35 
	tkî√l_2_1b
;

36 
	gmem‹y_m™agî_°©ñess_kî√l_2
<
	tT
,
	tmem‹y_m™agî
<>::
	tkî√l_1c
>

37 
	tkî√l_2_1c
;

38 
	gmem‹y_m™agî_°©ñess_kî√l_2
<
	tT
,
	tmem‹y_m™agî
<>::
	tkî√l_1d
>

39 
	tkî√l_2_1d
;

40 
	gmem‹y_m™agî_°©ñess_kî√l_2
<
	tT
,
	tmem‹y_m™agî
<>::
	tkî√l_1e
>

41 
	tkî√l_2_1e
;

42 
	gmem‹y_m™agî_°©ñess_kî√l_2
<
	tT
,
	tmem‹y_m™agî
<>::
	tkî√l_1f
>

43 
	tkî√l_2_1f
;

45 
	gmem‹y_m™agî_°©ñess_kî√l_2
<
	tT
,
	tmem‹y_m™agî
<>::
	tkî√l_2a
>

46 
	tkî√l_2_2a
;

47 
	gmem‹y_m™agî_°©ñess_kî√l_2
<
	tT
,
	tmem‹y_m™agî
<>::
	tkî√l_2b
>

48 
	tkî√l_2_2b
;

49 
	gmem‹y_m™agî_°©ñess_kî√l_2
<
	tT
,
	tmem‹y_m™agî
<>::
	tkî√l_2c
>

50 
	tkî√l_2_2c
;

51 
	gmem‹y_m™agî_°©ñess_kî√l_2
<
	tT
,
	tmem‹y_m™agî
<>::
	tkî√l_2d
>

52 
	tkî√l_2_2d
;

53 
	gmem‹y_m™agî_°©ñess_kî√l_2
<
	tT
,
	tmem‹y_m™agî
<>::
	tkî√l_2e
>

54 
	tkî√l_2_2e
;

56 
	gmem‹y_m™agî_°©ñess_kî√l_2
<
	tT
,
	tmem‹y_m™agî
<>::
	tkî√l_3a
>

57 
	tkî√l_2_3a
;

58 
	gmem‹y_m™agî_°©ñess_kî√l_2
<
	tT
,
	tmem‹y_m™agî
<>::
	tkî√l_3b
>

59 
	tkî√l_2_3b
;

60 
	gmem‹y_m™agî_°©ñess_kî√l_2
<
	tT
,
	tmem‹y_m™agî
<>::
	tkî√l_3c
>

61 
	tkî√l_2_3c
;

62 
	gmem‹y_m™agî_°©ñess_kî√l_2
<
	tT
,
	tmem‹y_m™agî
<>::
	tkî√l_3d
>

63 
	tkî√l_2_3d
;

64 
	gmem‹y_m™agî_°©ñess_kî√l_2
<
	tT
,
	tmem‹y_m™agî
<>::
	tkî√l_3e
>

65 
	tkî√l_2_3e
;

	@viper/concurrentqueue-src/benchmarks/dlib/memory_manager_stateless/memory_manager_stateless_kernel_1.h

3 #i‚de‡
DLIB_MEMORY_MANAGER_STATELESs_1_


4 
	#DLIB_MEMORY_MANAGER_STATELESs_1_


	)

6 
	~"mem‹y_m™agî_°©ñess_kî√l_ab°ø˘.h
"

7 
	~<mem‹y
>

9 
«me•a˚
 
	gdlib


11 
	gãm∂©e
 <

12 
ty≥«me
 
	gT


14 ˛as†
	cmem‹y_m™agî_°©ñess_kî√l_1


20 
	gpublic
:

22 
T
 
	tty≥
;

23 c⁄° 
boﬁ
 
	gis_°©ñess
 = 
åue
;

25 
	gãm∂©e
 <
ty≥«me
 
	gU
>

26 
	sªböd
 {

27 
	gmem‹y_m™agî_°©ñess_kî√l_1
<
	tU
> 
	tŸhî
;

30 
mem‹y_m™agî_°©ñess_kî√l_1
(

34 
	gvútuÆ
 ~
mem‹y_m™agî_°©ñess_kî√l_1
(

37 
T
* 
Æloˇã
 (

40  
√w
 
	gT
;

43 
dóŒoˇã
 (

44 
T
* 
ôem


47 
dñëe
 
	gôem
;

50 
T
* 
Æloˇã_¨øy
 (

51 
size_t
 
size


54  
√w
 
	gT
[
size
];

57 
dóŒoˇã_¨øy
 (

58 
T
* 
ôem


61 
	gdñëe
 [] 
	gôem
;

64 
sw≠
 (
mem‹y_m™agî_°©ñess_kî√l_1
&)

67 
	g°d
::
unique_±r
<
T
> 
exåa˘
(

68 
T
* 
ôem


71  
°d
::
unique_±r
<
T
>(
ôem
);

74 
	g°d
::
unique_±r
<
T
[]> 
exåa˘_¨øy
(

75 
T
* 
ôem


78  
°d
::
unique_±r
<
T
[]>(
ôem
);

81 
	g¥iv©e
:

84 
mem‹y_m™agî_°©ñess_kî√l_1
(memory_manager_stateless_kernel_1&);

85 
	gmem‹y_m™agî_°©ñess_kî√l_1
& 
	g›î©‹
=(
mem‹y_m™agî_°©ñess_kî√l_1
&);

88 
	gãm∂©e
 <

89 
ty≥«me
 
	gT


91 
ölöe
 
sw≠
 (

92 
mem‹y_m™agî_°©ñess_kî√l_1
<
T
>& 
a
,

93 
mem‹y_m™agî_°©ñess_kî√l_1
<
T
>& 
b


94 Ë{ 
	ga
.
sw≠
(
b
); }

	@viper/concurrentqueue-src/benchmarks/dlib/memory_manager_stateless/memory_manager_stateless_kernel_2.h

3 #i‚de‡
DLIB_MEMORY_MANAGER_STATELESs_2_


4 
	#DLIB_MEMORY_MANAGER_STATELESs_2_


	)

6 
	~"../Ægs.h
"

7 
	~"mem‹y_m™agî_°©ñess_kî√l_ab°ø˘.h
"

8 
	~"../thªads.h
"

10 
«me•a˚
 
	gdlib


12 
	gãm∂©e
 <

13 
ty≥«me
 
	gT
,

14 
ty≥«me
 
	gmem_m™agî


16 ˛as†
	cmem‹y_m™agî_°©ñess_kî√l_2


26 
	gpublic
:

28 
T
 
	tty≥
;

29 c⁄° 
boﬁ
 
	gis_°©ñess
 = 
åue
;

31 
	gãm∂©e
 <
ty≥«me
 
	gU
>

32 
	sªböd
 {

33 
	gmem‹y_m™agî_°©ñess_kî√l_2
<
	tU
,
	tmem_m™agî
> 
	tŸhî
;

36 
mem‹y_m™agî_°©ñess_kî√l_2
(

41 
globÆ_muãx
();

44 
	gvútuÆ
 ~
mem‹y_m™agî_°©ñess_kî√l_2
(

47 
T
* 
Æloˇã
 (

50 
auto_muãx
 
M
(
globÆ_muãx
());

51  
globÆ_mm
().
Æloˇã
();

54 
dóŒoˇã
 (

55 
T
* 
ôem


58 
auto_muãx
 
M
(
globÆ_muãx
());

59  
globÆ_mm
().
dóŒoˇã
(
ôem
);

62 
T
* 
Æloˇã_¨øy
 (

63 
size_t
 
size


66 
auto_muãx
 
M
(
globÆ_muãx
());

67  
globÆ_mm
().
Æloˇã_¨øy
(
size
);

70 
dóŒoˇã_¨øy
 (

71 
T
* 
ôem


74 
auto_muãx
 
M
(
globÆ_muãx
());

75  
globÆ_mm
().
dóŒoˇã_¨øy
(
ôem
);

78 
sw≠
 (
mem‹y_m™agî_°©ñess_kî√l_2
&)

81 
	g¥iv©e
:

83 
muãx
& 
globÆ_muãx
 (

86 
muãx
 
lock
;

87  
	glock
;

90 
ty≥«me
 
	tmem_m™agî
::
	tãm∂©e
 
	tªböd
<
	tT
>::
	tŸhî
 
	tªbound_mm_ty≥
;

92 
	gªbound_mm_ty≥
& 
globÆ_mm
 (

95 
ªbound_mm_ty≥
 
	gmm
;

96  
	gmm
;

100 
mem‹y_m™agî_°©ñess_kî√l_2
(memory_manager_stateless_kernel_2&);

101 
	gmem‹y_m™agî_°©ñess_kî√l_2
& 
	g›î©‹
=(
mem‹y_m™agî_°©ñess_kî√l_2
&);

104 
	gãm∂©e
 <

105 
ty≥«me
 
	gT
,

106 
ty≥«me
 
	gmem_m™agî


108 
ölöe
 
sw≠
 (

109 
mem‹y_m™agî_°©ñess_kî√l_2
<
T
,
mem_m™agî
>& 
a
,

110 
mem‹y_m™agî_°©ñess_kî√l_2
<
T
,
mem_m™agî
>& 
b


111 Ë{ 
	ga
.
sw≠
(
b
); }

	@viper/concurrentqueue-src/benchmarks/dlib/memory_manager_stateless/memory_manager_stateless_kernel_abstract.h

3 #unde‡
DLIB_MEMORY_MANAGER_STATELESs_ABSTRACT_


4 #ifde‡
DLIB_MEMORY_MANAGER_STATELESs_ABSTRACT_


6 
	~"../Ægs.h
"

7 
	~<mem‹y
>

9 
«me•a˚
 
	gdlib


11 
	gãm∂©e
 <

12 
ty≥«me
 
	gT


14 ˛as†
	cmem‹y_m™agî_°©ñess


32 
	gpublic
:

34 
T
 
	tty≥
;

35 c⁄° 
boﬁ
 
	gis_°©ñess
 = 
åue
;

37 
	gãm∂©e
 <
ty≥«me
 
	gU
>

38 
	sªböd
 {

39 
	gmem‹y_m™agî_°©ñess
<
	tU
> 
	tŸhî
;

42 
mem‹y_m™agî_°©ñess
(

51 
	gvútuÆ
 ~
mem‹y_m™agî_°©ñess
(

59 
T
* 
Æloˇã
 (

70 
dóŒoˇã
 (

71 
T
* 
ôem


84 
T
* 
Æloˇã_¨øy
 (

85 
size_t
 
size


97 
dóŒoˇã_¨øy
 (

98 
T
* 
ôem


111 
sw≠
 (

112 
mem‹y_m™agî_°©ñess
& 
ôem


121 
	g°d
::
unique_±r
<
T
> 
exåa˘
(

122 
T
* 
ôem


136 
	g°d
::
unique_±r
<
T
[]> 
exåa˘_¨øy
(

137 
T
* 
ôem


151 
	g¥iv©e
:

154 
mem‹y_m™agî_°©ñess
(memory_manager_stateless&);

155 
	gmem‹y_m™agî_°©ñess
& 
	g›î©‹
=(
mem‹y_m™agî_°©ñess
&);

158 
	gãm∂©e
 <

159 
ty≥«me
 
	gT


161 
ölöe
 
sw≠
 (

162 
mem‹y_m™agî_°©ñess
<
T
>& 
a
,

163 
mem‹y_m™agî_°©ñess
<
T
>& 
b


164 Ë{ 
	ga
.
sw≠
(
b
); }

	@viper/concurrentqueue-src/benchmarks/dlib/metaprogramming.h

3 #i‚de‡
DLIB_METApROGRAMMING_Hh_


4 
	#DLIB_METApROGRAMMING_Hh_


	)

6 
	~"Ægs.h
"

8 
«me•a˚
 
	gdlib


13 
	gãm∂©e
 <
	gsize_t
... 
	gn
>

14 
	scompûe_time_öãgî_li°


40 
	gãm∂©e
 <
size_t
 
	gm
>

41 
	spush_back


43 
	gcompûe_time_öãgî_li°
<
	tn
..., 
	tm
> 
	tty≥
;

49 
	gãm∂©e
 <
size_t
 
	gmax
>

50 
	smake_compûe_time_öãgî_ønge


61 
ty≥«me
 
	tmake_compûe_time_öãgî_ønge
<
	tmax
-1>::
	tty≥
::
	tãm∂©e
 
	tpush_back
<max>::typeÅype;

64 
	gãm∂©e
 <> 
	gmake_compûe_time_öãgî_ønge
<0> { 
	gcompûe_time_öãgî_li°
<> 
	tty≥
; };

68 
«me•a˚
 
	gim∂


70 
	gãm∂©e
 <

71 
ty≥«me
 
	gFun˘
,

72 
	gty≥«me
... 
	gArgs
,

73 
ty≥«me
 
	göt_
<
de˛ty≥
(
°d
::
de˛vÆ
<
Fun˘
>()(°d::de˛vÆ<
Args
>()...))>::
ty≥
 = 0

75 
boﬁ
 
ˇŒ_if_vÆid
 (

76 
•ecül_
,

77 
Fun˘
&& 
f
, 
Args
&&... 
¨gs


80 
f
(
°d
::
f‹w¨d
<
Args
>(
¨gs
)...);

81  
	gåue
;

84 
	gãm∂©e
 <

85 
ty≥«me
 
	gFun˘
,

86 
	gty≥«me
... 
	gArgs


88 
boﬁ
 
ˇŒ_if_vÆid
 (

89 
gíîÆ_
,

90 
Fun˘
&& , 
Args
&&...

91 Ë{  
	gÁl£
; }

94 
	gãm∂©e
 <
ty≥«me
 
	gFun˘
, 
	gty≥«me
... 
	gArgs
>

95 
boﬁ
 
ˇŒ_if_vÆid
(
Fun˘
&& 
f
, 
Args
&&... 
¨gs
)

102  
	gim∂
::
ˇŒ_if_vÆid
(
•ecül_
(), 
f
, 
°d
::
f‹w¨d
<
Args
>(
¨gs
)...);

	@viper/concurrentqueue-src/benchmarks/dlib/misc_api.h

4 #i‚de‡
DLIB_MISC_APi_


5 
	#DLIB_MISC_APi_


	)

7 
	~"∂©f‹m.h
"

9 #ifde‡
WIN32


10 
	~"misc_≠i/wödows.h
"

13 #i‚de‡
WIN32


14 
	~"misc_≠i/posix.h
"

17 
	~"misc_≠i/misc_≠i_sh¨ed.h
"

	@viper/concurrentqueue-src/benchmarks/dlib/misc_api/misc_api_kernel_1.h

3 #i‚de‡
DLIB_MISC_API_KERNEl_1_


4 
	#DLIB_MISC_API_KERNEl_1_


	)

6 #ifde‡
DLIB_ISO_CPP_ONLY


11 
	~"misc_≠i_kî√l_ab°ø˘.h
"

12 
	~"../Ægs.h
"

13 
	~<°rög
>

14 
	~"../uöä.h
"

16 
«me•a˚
 
	gdlib


21 
¶ìp
 (

22 
mûli£c⁄ds


27 
	g°d
::
°rög
 
gë_cuºít_dú
 (

32 ˛as†
	c£t_cuºít_dú_îr‹
 : 
public
 
îr‹


34 
public
:

35 
£t_cuºít_dú_îr‹
(

36 c⁄° 
°d
::
°rög
& 
a


37 ): 
îr‹
(
a
) {}

40 
£t_cuºít_dú
 (

41 c⁄° 
°d
::
°rög
& 
√w_dú


46 ˛as†
	ctime°am≥r


63 
muèbÀ
 
	gœ°_time
;

64 
muèbÀ
 
uöt64
 
	goff£t
;

65 
muèbÀ
 
uöt64
 
	gdw‹d_max
;

67 
	gpublic
:

68 
time°am≥r
(

70 
œ°_time
(0),

71 
off£t
(0)

73 
	gdw‹d_max
 = 0xFFFFFFFF;

74 ++
	gdw‹d_max
;

77 
uöt64
 
gë_time°amp
 (

83 ˛as†
	cdú_¸óã_îr‹
 : 
public
 
îr‹


85 
public
:

86 
dú_¸óã_îr‹
(

87 c⁄° 
°d
::
°rög
& 
dú_«me


89 
îr‹
(
EDIR_CREATE
,"Eº‹ cª©ög dúe˘‹y '" + 
dú_«me
 + "'."),

90 
«me
(
dú_«me
)

93 ~
dú_¸óã_îr‹
(Ë
throw
() {}

94 c⁄° 
	g°d
::
°rög
 
«me
;

97 
¸óã_dúe˘‹y
 (

98 c⁄° 
°d
::
°rög
& 
dú


105 #ifde‡
NO_MAKEFILE


106 
	~"misc_≠i_kî√l_1.˝p
"

	@viper/concurrentqueue-src/benchmarks/dlib/misc_api/misc_api_kernel_2.h

3 #i‚de‡
DLIB_MISC_API_KERNEl_2_


4 
	#DLIB_MISC_API_KERNEl_2_


	)

6 #ifde‡
DLIB_ISO_CPP_ONLY


11 
	~"misc_≠i_kî√l_ab°ø˘.h
"

12 
	~"../Ægs.h
"

13 
	~<°rög
>

14 
	~"../uöä.h
"

16 
«me•a˚
 
	gdlib


21 
¶ìp
 (

22 
mûli£c⁄ds


27 
	g°d
::
°rög
 
gë_cuºít_dú
 (

32 ˛as†
	c£t_cuºít_dú_îr‹
 : 
public
 
îr‹


34 
public
:

35 
£t_cuºít_dú_îr‹
(

36 c⁄° 
°d
::
°rög
& 
a


37 ): 
îr‹
(
a
) {}

40 
£t_cuºít_dú
 (

41 c⁄° 
°d
::
°rög
& 
√w_dú


46 ˛as†
	ctime°am≥r


48 
	gpublic
:

49 
uöt64
 
gë_time°amp
 (

55 ˛as†
	cdú_¸óã_îr‹
 : 
public
 
îr‹


57 
public
:

58 
dú_¸óã_îr‹
(

59 c⁄° 
°d
::
°rög
& 
dú_«me


61 
îr‹
(
EDIR_CREATE
,"Eº‹ cª©ög dúe˘‹y '" + 
dú_«me
 + "'."),

62 
«me
(
dú_«me
)

64 c⁄° 
	g°d
::
°rög
& 
«me
;

68 
¸óã_dúe˘‹y
 (

69 c⁄° 
°d
::
°rög
& 
dú


76 #ifde‡
NO_MAKEFILE


77 
	~"misc_≠i_kî√l_2.˝p
"

	@viper/concurrentqueue-src/benchmarks/dlib/misc_api/misc_api_kernel_abstract.h

3 #unde‡
DLIB_MISC_API_KERNEl_ABSTRACT_


4 #ifde‡
DLIB_MISC_API_KERNEl_ABSTRACT_


6 
	~<°rög
>

7 
	~"../uöä.h
"

8 
	~"../Ægs.h
"

10 
«me•a˚
 
	gdlib


22 
¶ìp
 (

23 
mûli£c⁄ds


33 
	g°d
::
°rög
 
gë_cuºít_dú
 (

47 
˛ass
 
	g£t_cuºít_dú_îr‹
 : 
public
 
îr‹
;

49 
£t_cuºít_dú
 (

50 c⁄° 
°d
::
°rög
& 
√w_dú


64 ˛as†
	cloˇŒy_ch™ge_cuºít_dú
 : 
n⁄c›yabÀ


72 
public
:

73 
ex∂icô
 
loˇŒy_ch™ge_cuºít_dú
 (

74 c⁄° 
°d
::
°rög
& 
√w_dú


82 c⁄° 
	g°d
::
°rög
& 
ﬁd_dú
 (

89 ~
loˇŒy_ch™ge_cuºít_dú
(

97 
ªvît
 (

108 ˛as†
	cdú_¸óã_îr‹
 : 
public
 
îr‹
 {

109 
public
:

110 c⁄° 
°d
::
°rög
 
«me


113 
¸óã_dúe˘‹y
 (

114 c⁄° 
°d
::
°rög
& 
dú


131 ˛as†
	ctime°am≥r


143 
	gpublic
:

144 
uöt64
 
gë_time°amp
 (

	@viper/concurrentqueue-src/benchmarks/dlib/misc_api/misc_api_shared.h

3 #i‚de‡
DLIB_MISC_API_ShARED_Hh_


4 
	#DLIB_MISC_API_ShARED_Hh_


	)

6 
	~<°rög
>

7 
	~"../n⁄c›yabÀ.h
"

9 
«me•a˚
 
	gdlib


14 ˛as†
	cloˇŒy_ch™ge_cuºít_dú
 : 
n⁄c›yabÀ


16 
public
:

17 
ex∂icô
 
loˇŒy_ch™ge_cuºít_dú
 (

18 c⁄° 
°d
::
°rög
& 
√w_dú


21 
ªvîãd
 = 
Ál£
;

22 
	g_ﬁd_dú
 = 
gë_cuºít_dú
();

23 
£t_cuºít_dú
(
√w_dú
);

26 ~
loˇŒy_ch™ge_cuºít_dú
()

28 
ªvît
();

31 c⁄° 
	g°d
::
°rög
& 
ﬁd_dú
 (

34  
_ﬁd_dú
;

37 
ªvît
 (

40 i‡(!
	gªvîãd
)

42 
£t_cuºít_dú
(
_ﬁd_dú
);

43 
	gªvîãd
 = 
åue
;

47 
	g¥iv©e
:

48 
boﬁ
 
ªvîãd
;

49 
	g°d
::
°rög
 
_ﬁd_dú
;

	@viper/concurrentqueue-src/benchmarks/dlib/misc_api/posix.h

3 #i‚de‡
DLIB_MISC_API_KERNEl_1_


4 
	~"misc_≠i_kî√l_2.h
"

	@viper/concurrentqueue-src/benchmarks/dlib/misc_api/windows.h

3 #i‚de‡
DLIB_MISC_API_KERNEl_2_


4 
	~"misc_≠i_kî√l_1.h
"

	@viper/concurrentqueue-src/benchmarks/dlib/noncopyable.h

7 #i‚de‡
DLIB_BOOST_NONCOPYABLE_HPP_INCLUDED


8 
	#DLIB_BOOST_NONCOPYABLE_HPP_INCLUDED


	)

11 
«me•a˚
 
	gdlib


13 ˛as†
	cn⁄c›yabÀ


21 
	g¥Ÿe˘ed
:

22 
n⁄c›yabÀ
() = ;

23 ~
n⁄c›yabÀ
() = ;

24 
	g¥iv©e
:

25 
n⁄c›yabÀ
(constÇoncopyable&);

26 c⁄° 
	gn⁄c›yabÀ
& 
	g›î©‹
=(c⁄° 
n⁄c›yabÀ
&);

	@viper/concurrentqueue-src/benchmarks/dlib/numeric_constants.h

3 #i‚de‡
DLIB_NUMERIC_CONSTANTs_H_


4 
	#DLIB_NUMERIC_CONSTANTs_H_


	)

6 
«me•a˚
 
	gdlib


10 c⁄° 
	gpi
 = 3.1415926535897932385;

13 c⁄° 
	ge
 = 2.7182818284590452354;

16 c⁄° 
	gsqπ_2
 = 1.4142135623730950488;

19 c⁄° 
	gsqπ_3
 = 1.7320508075688772935;

22 c⁄° 
	glog10_2
 = 0.30102999566398119521;

25 c⁄° 
	glight_•d
 = 2.99792458e8;

28 c⁄° 
	g√wt⁄_G
 = 6.67384e-11;

31 c⁄° 
	g∂™ck_c°
 = 6.62606957e-34;

34 c⁄° 
	ggﬁdí_øtio
 = 1.6180339887498948482;

37 c⁄° 
	geuÀr_gamma
 = 0.5772156649015328606065;

40 c⁄° 
	gˇèœn
 = 0.91596559417721901505;

43 c⁄° 
	ggœishî
 = 1.2824271291006226369;

46 c⁄° 
	gkhöchö
 = 2.6854520010653064453;

49 c⁄° 
	g≠îy
 = 1.2020569031595942854;

	@viper/concurrentqueue-src/benchmarks/dlib/numerical_integration.h

3 #i‚de‡
DLIB_INTEGRATE_FUNCTION_ADAPT_SIMPSON_HEADER


4 
	#DLIB_INTEGRATE_FUNCTION_ADAPT_SIMPSON_HEADER


	)

6 
	~"numîiˇl_öãgøti⁄/öãgøã_fun˘i⁄_ad≠t_simps⁄.h
"

	@viper/concurrentqueue-src/benchmarks/dlib/numerical_integration/integrate_function_adapt_simpson.h

3 #i‚de‡
DLIB_INTEGRATE_FUNCTION_ADAPT_SIMPSONh_


4 
	#DLIB_INTEGRATE_FUNCTION_ADAPT_SIMPSONh_


	)

6 
	~"öãgøã_fun˘i⁄_ad≠t_simps⁄_ab°ø˘.h
"

7 
	~"../as£π.h
"

11 
«me•a˚
 
	gdlib


13 
	gãm∂©e
 <
ty≥«me
 
	gT
,Åy≥«mê
	gfun˘
>

14 
T
 
im∂_ad≠t_simp_°›
(c⁄° 
fun˘
& 
f
, T 
a
, T 
b
, T 
Á
, T 
fm
, T 
fb
, T 
is
, 
˙t
)

16 c⁄° 
	gmaxöt
 = 500;

18 
T
 
	gm
 = (
a
 + 
b
)/2.0;

19 
T
 
	gh
 = (
b
 - 
a
)/4.0;

20 
T
 
	gfml
 = 
f
(
a
 + 
h
);

21 
T
 
	gfmr
 = 
f
(
b
 - 
h
);

22 
T
 
	gi1
 = 
h
/1.5*(
Á
+4.0*
fm
+
fb
);

23 
T
 
	gi2
 = 
h
/3.0*(
Á
+4.0*(
fml
+
fmr
)+2.0*
fm
+
fb
);

24 
	gi1
 = (16.0*
i2
 - 
i1
)/15.0;

25 
T
 
	gQ
 = 0;

27 i‡((
	g°d
::
abs
(
i1
-
i2
Ë<
°d
::abs(
is
)Ë|| (
m
 <
a
Ë|| (
b
 <= m))

29 
Q
 = 
i1
;

33 if(
	g˙t
 < 
	gmaxöt
)

35 
	g˙t
 = 
˙t
 + 1;

37 
	gQ
 = 
im∂_ad≠t_simp_°›
(
f
,
a
,
m
,
Á
,
fml
,
fm
,
is
,
˙t
)

38 + 
im∂_ad≠t_simp_°›
(
f
,
m
,
b
,
fm
,
fmr
,
fb
,
is
,
˙t
);

42  
	gQ
;

47 
	gãm∂©e
 <
ty≥«me
 
	gT
,Åy≥«mê
	gfun˘
>

48 
T
 
öãgøã_fun˘i⁄_ad≠t_simp
(

49 c⁄° 
fun˘
& 
f
,

50 
T
 
a
,

51 
T
 
b
,

52 
T
 
tﬁ
 = 1e-10

56 
DLIB_ASSERT
(
b
 > 
a
 && 
tﬁ
 > 0,

59 << "\n\àa: " << 
a


60 << "\n\àb: " << 
b


61 << "\n\àtﬁ: " << 
tﬁ


64 
T
 
	gïs
 = 
°d
::
numîic_limôs
<T>::
ïsû⁄
();

65 if(
	gtﬁ
 < 
	gïs
)

67 
	gtﬁ
 = 
ïs
;

70 c⁄° 
T
 
	gba
 = 
b
-
a
;

71 c⁄° 
T
 
	gÁ
 = 
f
(
a
);

72 c⁄° 
T
 
	gfb
 = 
f
(
b
);

73 c⁄° 
T
 
	gfm
 = 
f
((
a
+
b
)/2);

75 
T
 
	gis
 = 
ba
/8*(
Á
+
fb
+
fm
+ 
f
(
a
 + 0.9501*ba) + f(a + 0.2311*ba) + f(a + 0.6068*ba)

76 + 
f
(
a
 + 0.4860*
ba
) + f(a + 0.8913*ba));

78 if(
	gis
 == 0)

80 
is
 = 
b
-
a
;

83 
	gis
 = 
is
*
tﬁ
;

85 
	g˙t
 = 0;

87  
im∂_ad≠t_simp_°›
(
f
, 
a
, 
b
, 
Á
, 
fm
, 
fb
, 
is
, 
˙t
);

	@viper/concurrentqueue-src/benchmarks/dlib/numerical_integration/integrate_function_adapt_simpson_abstract.h

3 #unde‡
DLIB_INTEGRATE_FUNCTION_ADAPT_SIMPSON_ABSTRACTh_


4 #ifde‡
DLIB_INTEGRATE_FUNCTION_ADAPT_SIMPSON_ABSTRACTh_


6 
«me•a˚
 
	gdlib


9 
	gãm∂©e
 <
ty≥«me
 
	gT
,Åy≥«mê
	gfun˘
>

10 
T
 
öãgøã_fun˘i⁄_ad≠t_simp
(

11 c⁄° 
fun˘
& 
f
,

12 
T
 
a
,

13 
T
 
b
,

14 
T
 
tﬁ
 = 1e-10

	@viper/concurrentqueue-src/benchmarks/dlib/pipe.h

3 #i‚de‡
DLIB_PIPe_


4 
	#DLIB_PIPe_


	)

6 
	~"pùe/pùe_kî√l_1.h
"

	@viper/concurrentqueue-src/benchmarks/dlib/pipe/pipe_kernel_1.h

3 #i‚de‡
DLIB_PIPE_KERNEl_1_


4 
	#DLIB_PIPE_KERNEl_1_


	)

6 
	~"../Ægs.h
"

7 
	~"../thªads.h
"

8 
	~"pùe_kî√l_ab°ø˘.h
"

10 
«me•a˚
 
	gdlib


13 
	gãm∂©e
 <

14 
ty≥«me
 
	gT


16 ˛as†
	cpùe


62 
	gpublic
:

64 
pùe
 
	tkî√l_1a
;

66 
T
 
	tty≥
;

68 
ex∂icô
 
pùe
 (

69 
size_t
 
maximum_size


72 
	gvútuÆ
 ~
pùe
 (

75 
em±y
 (

78 
waô_u¡û_em±y
 (

81 
waô_f‹_num_blocked_dequeues
 (

82 
num


85 
íabÀ
 (

88 
dißbÀ
 (

91 
boﬁ
 
is_íqueue_íabÀd
 (

94 
dißbÀ_íqueue
 (

97 
íabÀ_íqueue
 (

100 
boﬁ
 
is_dequeue_íabÀd
 (

103 
dißbÀ_dequeue
 (

106 
íabÀ_dequeue
 (

109 
boﬁ
 
is_íabÀd
 (

112 
size_t
 
max_size
 (

115 
size_t
 
size
 (

118 
boﬁ
 
íqueue
 (

119 
T
& 
ôem


122 
boﬁ
 
íqueue
 (

123 
T
&& 
ôem


124 Ë{  
íqueue
(
ôem
); }

126 
boﬁ
 
dequeue
 (

127 
T
& 
ôem


130 
boﬁ
 
íqueue_‹_timeout
 (

131 
T
& 
ôem
,

132 
timeout


135 
boﬁ
 
íqueue_‹_timeout
 (

136 
T
&& 
ôem
,

137 
timeout


138 Ë{  
íqueue_‹_timeout
(
ôem
,
timeout
); }

140 
boﬁ
 
dequeue_‹_timeout
 (

141 
T
& 
ôem
,

142 
timeout


145 
	g¥iv©e
:

147 
size_t
 
pùe_size
;

148 c⁄° 
size_t
 
	gpùe_max_size
;

149 
boﬁ
 
	gíabÀd
;

151 
T
* c⁄° 
	gd©a
;

153 
size_t
 
	gfú°
;

154 
size_t
 
	gœ°
;

156 
muãx
 
	gm
;

157 
sig«Àr
 
	gdequeue_sig
;

158 
sig«Àr
 
	gíqueue_sig
;

159 
sig«Àr
 
	gunblock_sig
;

161 
	gdequeue_waôîs
;

162 
muèbÀ
 
	gíqueue_waôîs
;

163 
muèbÀ
 
	gunblock_sig_waôîs
;

164 
boﬁ
 
	gíqueue_íabÀd
;

165 
boﬁ
 
	gdequeue_íabÀd
;

168 
pùe
(constÖipe&);

169 
	gpùe
& 
	g›î©‹
=(c⁄° 
pùe
&);

179 
	gãm∂©e
 <

180 
ty≥«me
 
	gT


182 
	gpùe
<
	gT
>::

183 
	$pùe
 (

184 
size_t
 
maximum_size


186 
	`pùe_size
(0),

187 
	`pùe_max_size
(
maximum_size
),

188 
	`íabÀd
(
åue
),

189 
	`d©a
(
√w
 
T
[(
maximum_size
>0) ? maximum_size : 1]),

190 
	`fú°
(1),

191 
	`œ°
(1),

192 
	`dequeue_sig
(
m
),

193 
	`íqueue_sig
(
m
),

194 
	`unblock_sig
(
m
),

195 
	`dequeue_waôîs
(0),

196 
	`íqueue_waôîs
(0),

197 
	`unblock_sig_waôîs
(0),

198 
	`íqueue_íabÀd
(
åue
),

199 
	$dequeue_íabÀd
(
åue
)

201 
	}
}

205 
	gãm∂©e
 <

206 
ty≥«me
 
	gT


208 
	gpùe
<
	gT
>::

209 ~
	$pùe
 (

212 
auto_muãx
 
	`M
(
m
);

213 ++
unblock_sig_waôîs
;

216 
íabÀd
 = 
Ál£
;

217 
dequeue_sig
.
	`brﬂdˇ°
();

218 
íqueue_sig
.
	`brﬂdˇ°
();

219 
unblock_sig
.
	`brﬂdˇ°
();

222 
dequeue_waôîs
 > 0 || 
íqueue_waôîs
 > 0 || 
unblock_sig_waôîs
 > 1)

223 
unblock_sig
.
	`waô
();

225 
dñëe
 [] 
d©a
;

226 --
unblock_sig_waôîs
;

227 
	}
}

231 
	gãm∂©e
 <

232 
ty≥«me
 
	gT


234 
	gpùe
<
	gT
>::

235 
	$em±y
 (

238 
auto_muãx
 
	`M
(
m
);

239 
pùe_size
 = 0;

242 i‡(
íqueue_waôîs
 > 0)

243 
íqueue_sig
.
	`brﬂdˇ°
();

244 
	}
}

248 
	gãm∂©e
 <

249 
ty≥«me
 
	gT


251 
	gpùe
<
	gT
>::

252 
	$waô_u¡û_em±y
 (

255 
auto_muãx
 
	`M
(
m
);

257 ++
íqueue_waôîs
;

259 
pùe_size
 > 0 && 
íabÀd
 && 
dequeue_íabÀd
 )

260 
íqueue_sig
.
	`waô
();

263 i‡(
íabÀd
 =
Ál£
)

264 
unblock_sig
.
	`brﬂdˇ°
();

266 --
íqueue_waôîs
;

267 
	}
}

271 
	gãm∂©e
 <

272 
ty≥«me
 
	gT


274 
	gpùe
<
	gT
>::

275 
	$íabÀ
 (

278 
auto_muãx
 
	`M
(
m
);

279 
íabÀd
 = 
åue
;

280 
	}
}

284 
	gãm∂©e
 <

285 
ty≥«me
 
	gT


287 
	gpùe
<
	gT
>::

288 
	$dißbÀ
 (

291 
auto_muãx
 
	`M
(
m
);

292 
íabÀd
 = 
Ál£
;

293 
dequeue_sig
.
	`brﬂdˇ°
();

294 
íqueue_sig
.
	`brﬂdˇ°
();

295 
unblock_sig
.
	`brﬂdˇ°
();

296 
	}
}

300 
	gãm∂©e
 <

301 
ty≥«me
 
	gT


303 
boﬁ
 
	gpùe
<
	gT
>::

304 
	$is_íabÀd
 (

307 
auto_muãx
 
	`M
(
m
);

308  
íabÀd
;

309 
	}
}

313 
	gãm∂©e
 <

314 
ty≥«me
 
	gT


316 
size_t
 
	gpùe
<
	gT
>::

317 
	$max_size
 (

320 
auto_muãx
 
	`M
(
m
);

321  
pùe_max_size
;

322 
	}
}

326 
	gãm∂©e
 <

327 
ty≥«me
 
	gT


329 
size_t
 
	gpùe
<
	gT
>::

330 
	$size
 (

333 
auto_muãx
 
	`M
(
m
);

334  
pùe_size
;

335 
	}
}

339 
	gãm∂©e
 <

340 
ty≥«me
 
	gT


342 
boﬁ
 
	gpùe
<
	gT
>::

343 
	$íqueue
 (

344 
T
& 
ôem


347 
auto_muãx
 
	`M
(
m
);

348 ++
íqueue_waôîs
;

351 
pùe_size
 =
pùe_max_size
 && 
íabÀd
 && 
íqueue_íabÀd
 &&

352 !(
pùe_max_size
 =0 && 
fú°
 == 1) )

353 
íqueue_sig
.
	`waô
();

355 i‡(
íabÀd
 =
Ál£
 || 
íqueue_íabÀd
 == false)

357 --
íqueue_waôîs
;

359 
unblock_sig
.
	`brﬂdˇ°
();

360  
Ál£
;

364 i‡(
pùe_size
 == 0)

366 
fú°
 = 0;

367 
œ°
 = 0;

371 
œ°
 = (œ°+1)%
pùe_max_size
;

375 
	`exch™ge
(
ôem
,
d©a
[
œ°
]);

378 i‡(
dequeue_waôîs
 > 0)

379 
dequeue_sig
.
	`sig«l
();

381 i‡(
pùe_max_size
 > 0)

383 ++
pùe_size
;

388 
œ°
 =0 && 
íabÀd
 && 
íqueue_íabÀd
)

389 
íqueue_sig
.
	`waô
();

391 i‡(
œ°
 =0 && (
íabÀd
 =
Ál£
 || 
íqueue_íabÀd
 == false))

393 
œ°
 = 1;

394 
fú°
 = 1;

397 
	`exch™ge
(
ôem
,
d©a
[0]);

399 --
íqueue_waôîs
;

401 i‡(
unblock_sig_waôîs
 > 0)

402 
unblock_sig
.
	`brﬂdˇ°
();

403  
Ál£
;

406 
œ°
 = 1;

407 
fú°
 = 1;

410 i‡(
íqueue_waôîs
 > 1)

411 
íqueue_sig
.
	`brﬂdˇ°
();

414 i‡(
íabÀd
 =
Ál£
 && 
unblock_sig_waôîs
 > 0)

415 
unblock_sig
.
	`brﬂdˇ°
();

418 --
íqueue_waôîs
;

419  
åue
;

420 
	}
}

424 
	gãm∂©e
 <

425 
ty≥«me
 
	gT


427 
boﬁ
 
	gpùe
<
	gT
>::

428 
	$dequeue
 (

429 
T
& 
ôem


432 
auto_muãx
 
	`M
(
m
);

433 ++
dequeue_waôîs
;

435 i‡(
pùe_size
 == 0)

438 i‡(
unblock_sig_waôîs
 > 0)

439 
unblock_sig
.
	`brﬂdˇ°
();

442 i‡(
íqueue_waôîs
 > 0)

443 
íqueue_sig
.
	`brﬂdˇ°
();

447 
pùe_size
 =0 && 
íabÀd
 && 
dequeue_íabÀd
 &&

448 !(
pùe_max_size
 =0 && 
fú°
 =0 && 
œ°
 == 0) )

449 
dequeue_sig
.
	`waô
();

451 i‡(
íabÀd
 =
Ál£
 || 
dequeue_íabÀd
 == false)

453 --
dequeue_waôîs
;

455 
unblock_sig
.
	`brﬂdˇ°
();

456  
Ál£
;

459 
	`exch™ge
(
ôem
,
d©a
[
fú°
]);

461 i‡(
pùe_max_size
 > 0)

464 
fú°
 = (fú°+1)%
pùe_max_size
;

466 --
pùe_size
;

472 
œ°
 = 1;

476 i‡(
íqueue_waôîs
 > 0)

477 
íqueue_sig
.
	`brﬂdˇ°
();

479 --
dequeue_waôîs
;

480  
åue
;

481 
	}
}

485 
	gãm∂©e
 <

486 
ty≥«me
 
	gT


488 
boﬁ
 
	gpùe
<
	gT
>::

489 
	$íqueue_‹_timeout
 (

490 
T
& 
ôem
,

491 
timeout


494 
auto_muãx
 
	`M
(
m
);

495 ++
íqueue_waôîs
;

499 
boﬁ
 
timed_out
 = 
Ál£
;

500 
pùe_size
 =
pùe_max_size
 && 
íabÀd
 && 
íqueue_íabÀd
 &&

501 !(
pùe_max_size
 =0 && 
dequeue_waôîs
 > 0 && 
fú°
 == 1) )

503 i‡(
timeout
 =0 || 
íqueue_sig
.
	`waô_‹_timeout
—imeoutË=
Ál£
)

505 
timed_out
 = 
åue
;

510 i‡(
íabÀd
 =
Ál£
 || 
timed_out
 || 
íqueue_íabÀd
 == false)

512 --
íqueue_waôîs
;

514 
unblock_sig
.
	`brﬂdˇ°
();

515  
Ál£
;

519 i‡(
pùe_size
 == 0)

521 
fú°
 = 0;

522 
œ°
 = 0;

526 
œ°
 = (œ°+1)%
pùe_max_size
;

530 
	`exch™ge
(
ôem
,
d©a
[
œ°
]);

533 i‡(
dequeue_waôîs
 > 0)

534 
dequeue_sig
.
	`sig«l
();

536 i‡(
pùe_max_size
 > 0)

538 ++
pùe_size
;

543 
œ°
 =0 && 
íabÀd
 && 
íqueue_íabÀd
)

544 
íqueue_sig
.
	`waô
();

546 i‡(
œ°
 =0 && (
íabÀd
 =
Ál£
 || 
íqueue_íabÀd
 == false))

548 
œ°
 = 1;

549 
fú°
 = 1;

552 
	`exch™ge
(
ôem
,
d©a
[0]);

554 --
íqueue_waôîs
;

556 i‡(
unblock_sig_waôîs
 > 0)

557 
unblock_sig
.
	`brﬂdˇ°
();

558  
Ál£
;

561 
œ°
 = 1;

562 
fú°
 = 1;

565 i‡(
íqueue_waôîs
 > 1)

566 
íqueue_sig
.
	`brﬂdˇ°
();

569 i‡(
íabÀd
 =
Ál£
 && 
unblock_sig_waôîs
 > 0)

570 
unblock_sig
.
	`brﬂdˇ°
();

573 --
íqueue_waôîs
;

574  
åue
;

575 
	}
}

579 
	gãm∂©e
 <

580 
ty≥«me
 
	gT


582 
boﬁ
 
	gpùe
<
	gT
>::

583 
	$dequeue_‹_timeout
 (

584 
T
& 
ôem
,

585 
timeout


588 
auto_muãx
 
	`M
(
m
);

589 ++
dequeue_waôîs
;

591 i‡(
pùe_size
 == 0)

594 i‡(
unblock_sig_waôîs
 > 0)

595 
unblock_sig
.
	`brﬂdˇ°
();

598 i‡(
íqueue_waôîs
 > 0)

599 
íqueue_sig
.
	`brﬂdˇ°
();

602 
boﬁ
 
timed_out
 = 
Ál£
;

604 
pùe_size
 =0 && 
íabÀd
 && 
dequeue_íabÀd
 &&

605 !(
pùe_max_size
 =0 && 
fú°
 =0 && 
œ°
 == 0) )

607 i‡(
timeout
 =0 || 
dequeue_sig
.
	`waô_‹_timeout
—imeoutË=
Ál£
)

609 
timed_out
 = 
åue
;

614 i‡(
íabÀd
 =
Ál£
 || 
timed_out
 || 
dequeue_íabÀd
 == false)

616 --
dequeue_waôîs
;

618 
unblock_sig
.
	`brﬂdˇ°
();

619  
Ál£
;

622 
	`exch™ge
(
ôem
,
d©a
[
fú°
]);

624 i‡(
pùe_max_size
 > 0)

627 
fú°
 = (fú°+1)%
pùe_max_size
;

629 --
pùe_size
;

635 
œ°
 = 1;

639 i‡(
íqueue_waôîs
 > 0)

640 
íqueue_sig
.
	`brﬂdˇ°
();

642 --
dequeue_waôîs
;

643  
åue
;

644 
	}
}

648 
	gãm∂©e
 <

649 
ty≥«me
 
	gT


651 
	gpùe
<
	gT
>::

652 
	$waô_f‹_num_blocked_dequeues
 (

653 
num


656 
auto_muãx
 
	`M
(
m
);

657 ++
unblock_sig_waôîs
;

659  (
dequeue_waôîs
 < 
num
 || 
pùe_size
 !0Ë&& 
íabÀd
 && 
dequeue_íabÀd
)

660 
unblock_sig
.
	`waô
();

663 i‡(
íabÀd
 =
Ál£
)

664 
unblock_sig
.
	`brﬂdˇ°
();

666 --
unblock_sig_waôîs
;

667 
	}
}

671 
	gãm∂©e
 <

672 
ty≥«me
 
	gT


674 
boﬁ
 
	gpùe
<
	gT
>::

675 
	$is_íqueue_íabÀd
 (

678 
auto_muãx
 
	`M
(
m
);

679  
íqueue_íabÀd
;

680 
	}
}

684 
	gãm∂©e
 <

685 
ty≥«me
 
	gT


687 
	gpùe
<
	gT
>::

688 
	$dißbÀ_íqueue
 (

691 
auto_muãx
 
	`M
(
m
);

692 
íqueue_íabÀd
 = 
Ál£
;

693 
íqueue_sig
.
	`brﬂdˇ°
();

694 
	}
}

699 
	gãm∂©e
 <

700 
ty≥«me
 
	gT


702 
	gpùe
<
	gT
>::

703 
	$íabÀ_íqueue
 (

706 
auto_muãx
 
	`M
(
m
);

707 
íqueue_íabÀd
 = 
åue
;

708 
	}
}

712 
	gãm∂©e
 <

713 
ty≥«me
 
	gT


715 
boﬁ
 
	gpùe
<
	gT
>::

716 
	$is_dequeue_íabÀd
 (

719 
auto_muãx
 
	`M
(
m
);

720  
dequeue_íabÀd
;

721 
	}
}

725 
	gãm∂©e
 <

726 
ty≥«me
 
	gT


728 
	gpùe
<
	gT
>::

729 
	$dißbÀ_dequeue
 (

732 
auto_muãx
 
	`M
(
m
);

733 
dequeue_íabÀd
 = 
Ál£
;

734 
dequeue_sig
.
	`brﬂdˇ°
();

735 
	}
}

740 
	gãm∂©e
 <

741 
ty≥«me
 
	gT


743 
	gpùe
<
	gT
>::

744 
	$íabÀ_dequeue
 (

747 
auto_muãx
 
	`M
(
m
);

748 
dequeue_íabÀd
 = 
åue
;

749 
	}
}

	@viper/concurrentqueue-src/benchmarks/dlib/pipe/pipe_kernel_abstract.h

3 #unde‡
DLIB_PIPE_KERNEl_ABSTRACT_


4 #ifde‡
DLIB_PIPE_KERNEl_ABSTRACT_


6 
	~"../thªads.h
"

8 
«me•a˚
 
	gdlib


11 
	gãm∂©e
 <

12 
ty≥«me
 
	gT


14 ˛as†
	cpùe


36 
	gpublic
:

38 
T
 
	tty≥
;

40 
ex∂icô
 
pùe
 (

41 
size_t
 
maximum_size


52 
	gvútuÆ
 ~
pùe
 (

61 
íabÀ
 (

68 
dißbÀ
 (

81 
boﬁ
 
is_íabÀd
 (

88 
em±y
 (

95 
waô_u¡û_em±y
 (

105 
waô_f‹_num_blocked_dequeues
 (

106 
num


118 
boﬁ
 
is_íqueue_íabÀd
 (

131 
dißbÀ_íqueue
 (

141 
íabÀ_íqueue
 (

148 
boﬁ
 
is_dequeue_íabÀd
 (

161 
dißbÀ_dequeue
 (

171 
íabÀ_dequeue
 (

178 
size_t
 
max_size
 (

186 
size_t
 
size
 (

194 
boﬁ
 
íqueue
 (

195 
T
& 
ôem


222 
boﬁ
 
íqueue
 (
T
&& 
ôem
) { Énqueue(item); }

227 
boﬁ
 
íqueue_‹_timeout
 (

228 
T
& 
ôem
,

229 
timeout


257 
boﬁ
 
íqueue_‹_timeout
 (
T
&& 
ôem
, 
timeout
) { Énqueue_or_timeout(item,timeout); }

262 
boﬁ
 
dequeue
 (

263 
T
& 
ôem


286 
boﬁ
 
dequeue_‹_timeout
 (

287 
T
& 
ôem
,

288 
timeout


312 
	g¥iv©e
:

315 
pùe
(constÖipe&);

316 
	gpùe
& 
	g›î©‹
=(c⁄° 
pùe
&);

	@viper/concurrentqueue-src/benchmarks/dlib/platform.h

4 #ifde‡
DLIB_ALL_SOURCE_END


5 
	~"dlib_basic_˝p_buûd_tut‹ül.txt
"

8 #i‚de‡
DLIB_PLATFORm_


9 
	#DLIB_PLATFORm_


	)

31 #i‚de‡
WIN32


32 #i‡
deföed
–
_MSC_VER
Ë|| deföed(
__BORLANDC__
Ë|| deföed(
_WIN32
Ë|| deföed(
__WIN32__
Ë|| deföed(
__TOS_WIN__
)

33 
	#WIN32


	)

37 #i‚de‡
WIN32


40 #i‚de‡
DLIB_POSIX


41 
	#DLIB_POSIX


	)

44 #i‚de‡
HPUX


45 #i‡
deföed
(
__hpux
 ) || deföed(
hpux
Ë|| deföed (
_hpux
)

46 
	#HPUX


	)

50 #i‚de‡
MACOSX


51 #ifde‡
__MACOSX__


52 
	#MACOSX


	)

54 #ifde‡
__APPLE__


55 
	#MACOSX


	)

	@viper/concurrentqueue-src/benchmarks/dlib/queue.h

3 #i‚de‡
DLIB_QUEUe_


4 
	#DLIB_QUEUe_


	)

6 
	~"queue/queue_kî√l_1.h
"

7 
	~"queue/queue_kî√l_2.h
"

8 
	~"queue/queue_kî√l_c.h
"

10 
	~"queue/queue_s‹t_1.h
"

13 
	~"Ægs.h
"

15 
«me•a˚
 
	gdlib


18 
	gãm∂©e
 <

19 
ty≥«me
 
	gT
,

20 
ty≥«me
 
	gmem_m™agî
 = 
deÁu…_mem‹y_m™agî


22 ˛as†
	cqueue


24 
queue
() {}

25 
public
:

31 
queue_kî√l_1
<
	tT
,
	tmem_m™agî
>

32 
	tkî√l_1a
;

33 
	gqueue_kî√l_c
<
	tkî√l_1a
>

34 
	tkî√l_1a_c
;

38 
	gqueue_kî√l_2
<
	tT
,20,
	tmem_m™agî
>

39 
	tkî√l_2a
;

40 
	gqueue_kî√l_c
<
	tkî√l_2a
>

41 
	tkî√l_2a_c
;

45 
	gqueue_kî√l_2
<
	tT
,100,
	tmem_m™agî
>

46 
	tkî√l_2b
;

47 
	gqueue_kî√l_c
<
	tkî√l_2b
>

48 
	tkî√l_2b_c
;

56 
	gqueue_s‹t_1
<
	tkî√l_1a
>

57 
	ts‹t_1a
;

58 
	gqueue_s‹t_1
<
	tkî√l_1a_c
>

59 
	ts‹t_1a_c
;

63 
	gqueue_s‹t_1
<
	tkî√l_2a
>

64 
	ts‹t_1b
;

65 
	gqueue_s‹t_1
<
	tkî√l_2a_c
>

66 
	ts‹t_1b_c
;

71 
	gqueue_s‹t_1
<
	tkî√l_2b
>

72 
	ts‹t_1c
;

73 
	gqueue_s‹t_1
<
	tkî√l_2b_c
>

74 
	ts‹t_1c_c
;

	@viper/concurrentqueue-src/benchmarks/dlib/queue/queue_kernel_1.h

3 #i‚de‡
DLIB_QUEUE_KERNEl_1_


4 
	#DLIB_QUEUE_KERNEl_1_


	)

6 
	~"queue_kî√l_ab°ø˘.h
"

7 
	~"../Ægs.h
"

8 
	~"../öãrÁ˚s/íumîabÀ.h
"

9 
	~"../öãrÁ˚s/ªmovî.h
"

10 
	~"../£rülize.h
"

12 
«me•a˚
 
	gdlib


15 
	gãm∂©e
 <

16 
ty≥«me
 
	gT
,

17 
ty≥«me
 
	gmem_m™agî
 = 
deÁu…_mem‹y_m™agî


19 
˛ass
 
queue_kî√l_1
 : 
public
 
íumîabÀ
<
T
>,

20 
public
 
	gªmovî
<
	gT
>

49 
	snode


51 
node
* 
	gœ°
;

53 
T
 
	gôem
;

57 
	gpublic
:

59 
T
 
	tty≥
;

60 
mem_m™agî
 
	tmem_m™agî_ty≥
;

62 
queue_kî√l_1
 (

64 
ö
(0),

65 
out
(0),

66 
queue_size
(0),

67 
cuºít_ñemít
(0),

68 
©_°¨t_
(
åue
)

72 
	gvútuÆ
 ~
queue_kî√l_1
 (

75 
ölöe
 
˛ór
(

78 
íqueue
 (

79 
T
& 
ôem


82 
dequeue
 (

83 
T
& 
ôem


86 
ˇt
 (

87 
queue_kî√l_1
& 
ôem


90 
	gT
& 
cuºít
 (

93 c⁄° 
	gT
& 
cuºít
 (

96 
sw≠
 (

97 
queue_kî√l_1
& 
ôem


101 
ölöe
 
ªmove_™y
 (

102 
T
& 
ôem


106 
ölöe
 
size_t
 
size
 (

109 
ölöe
 
boﬁ
 
©_°¨t
 (

112 
ölöe
 
ª£t
 (

115 
boﬁ
 
cuºít_ñemít_vÆid
 (

118 
ölöe
 c⁄° 
	gT
& 
ñemít
 (

121 
ölöe
 
	gT
& 
ñemít
 (

124 
boﬁ
 
move_√xt
 (

127 
	g¥iv©e
:

129 
dñëe_nodes
 (

130 
node
* 
°¨t
,

131 
Àngth


145 
node
* 
	gö
;

146 
node
* 
	gout
;

147 
	gqueue_size
;

148 
muèbÀ
 
node
* 
	gcuºít_ñemít
;

149 
muèbÀ
 
boﬁ
 
	g©_°¨t_
;

152 
queue_kî√l_1
(queue_kernel_1&);

153 
	gqueue_kî√l_1
& 
	g›î©‹
=(
queue_kî√l_1
&);

157 
	gãm∂©e
 <

158 
ty≥«me
 
	gT
,

159 
ty≥«me
 
	gmem_m™agî


161 
ölöe
 
sw≠
 (

162 
queue_kî√l_1
<
T
,
mem_m™agî
>& 
a
,

163 
queue_kî√l_1
<
T
,
mem_m™agî
>& 
b


164 Ë{ 
	ga
.
sw≠
(
b
); }

166 
	gãm∂©e
 <

167 
ty≥«me
 
	gT
,

168 
ty≥«me
 
	gmem_m™agî


170 
de£rülize
 (

171 
queue_kî√l_1
<
T
,
mem_m™agî
>& 
ôem
,

172 
°d
::
i°ªam
& 
ö


175 
åy


177 
ôem
.
˛ór
();

178 
	gsize
;

179 
de£rülize
(
size
,
ö
);

180 
T
 
	gãmp
;

181 
	gi
 = 0; i < 
	gsize
; ++i)

183 
de£rülize
(
ãmp
,
ö
);

184 
	gôem
.
íqueue
(
ãmp
);

187 
ˇtch
 (
£rüliz©i⁄_îr‹
& 
e
)

189 
	gôem
.
˛ór
();

190 
throw
 
£rüliz©i⁄_îr‹
(
e
.
öfo
 + "\n while deserializing object ofÅype queue_kernel_1");

200 
	gãm∂©e
 <

201 
ty≥«me
 
	gT
,

202 
ty≥«me
 
	gmem_m™agî


204 
	gqueue_kî√l_1
<
	gT
,
	gmem_m™agî
>::

205 ~
queue_kî√l_1
 (

208 
dñëe_nodes
(
out
,
queue_size
);

213 
	gãm∂©e
 <

214 
ty≥«me
 
	gT
,

215 
ty≥«me
 
	gmem_m™agî


217 
	gqueue_kî√l_1
<
	gT
,
	gmem_m™agî
>::

218 
˛ór
 (

221 
dñëe_nodes
(
out
,
queue_size
);

222 
	gqueue_size
 = 0;

225 
ª£t
();

230 
	gãm∂©e
 <

231 
ty≥«me
 
	gT
,

232 
ty≥«me
 
	gmem_m™agî


234 
	gqueue_kî√l_1
<
	gT
,
	gmem_m™agî
>::

235 
íqueue
 (

236 
T
& 
ôem


240 
node
* 
ãmp
 = 
√w
Çode;

243 
exch™ge
(
ôem
,
ãmp
->item);

245 i‡(
	gqueue_size
 == 0)

246 
out
 = 
ãmp
;

248 
	gö
->
	gœ°
 = 
ãmp
;

251 
	gö
 = 
ãmp
;

253 ++
	gqueue_size
;

256 
ª£t
();

261 
	gãm∂©e
 <

262 
ty≥«me
 
	gT
,

263 
ty≥«me
 
	gmem_m™agî


265 
	gqueue_kî√l_1
<
	gT
,
	gmem_m™agî
>::

266 
dequeue
 (

267 
T
& 
ôem


271 
exch™ge
(
ôem
,
out
->item);

273 --
	gqueue_size
;

275 i‡(
	gqueue_size
 == 0)

277 
dñëe
 
out
;

281 
node
* 
	gãmp
 = 
out
;

284 
	gout
 = 
out
->
œ°
;

287 
dñëe
 
	gãmp
;

291 
ª£t
();

296 
	gãm∂©e
 <

297 
ty≥«me
 
	gT
,

298 
ty≥«me
 
	gmem_m™agî


300 
	gqueue_kî√l_1
<
	gT
,
	gmem_m™agî
>::

301 
ˇt
 (

302 
queue_kî√l_1
<
T
,
mem_m™agî
>& 
ôem


305 i‡(
	gôem
.
	gqueue_size
 > 0)

307 i‡(
	gqueue_size
 > 0)

309 
	gö
->
	gœ°
 = 
ôem
.
out
;

313 
	gout
 = 
ôem
.
out
;

317 
	gö
 = 
ôem
.
ö
;

318 
	gqueue_size
 +
ôem
.
queue_size
;

319 
	gôem
.
	gqueue_size
 = 0;

323 
ª£t
();

328 
	gãm∂©e
 <

329 
ty≥«me
 
	gT
,

330 
ty≥«me
 
	gmem_m™agî


332 
	gT
& 
	gqueue_kî√l_1
<T,
	gmem_m™agî
>::

333 
cuºít
 (

336  
out
->
ôem
;

341 
	gãm∂©e
 <

342 
ty≥«me
 
	gT
,

343 
ty≥«me
 
	gmem_m™agî


345 c⁄° 
	gT
& 
	gqueue_kî√l_1
<T,
	gmem_m™agî
>::

346 
cuºít
 (

349  
out
->
ôem
;

354 
	gãm∂©e
 <

355 
ty≥«me
 
	gT
,

356 
ty≥«me
 
	gmem_m™agî


358 
	gqueue_kî√l_1
<
	gT
,
	gmem_m™agî
>::

359 
sw≠
 (

360 
queue_kî√l_1
<
T
,
mem_m™agî
>& 
ôem


363 
node
* 
	gö_ãmp
 = 
ö
;

364 
node
* 
	gout_ãmp
 = 
out
;

365 
	gqueue_size_ãmp
 = 
queue_size
;

366 
node
* 
	gcuºít_ñemít_ãmp
 = 
cuºít_ñemít
;

367 
boﬁ
 
	g©_°¨t_ãmp
 = 
©_°¨t_
;

369 
	gö
 = 
ôem
.
ö
;

370 
	gout
 = 
ôem
.
out
;

371 
	gqueue_size
 = 
ôem
.
queue_size
;

372 
	gcuºít_ñemít
 = 
ôem
.
cuºít_ñemít
;

373 
	g©_°¨t_
 = 
ôem
.
©_°¨t_
;

375 
	gôem
.
	gö
 = 
ö_ãmp
;

376 
	gôem
.
	gout
 = 
out_ãmp
;

377 
	gôem
.
	gqueue_size
 = 
queue_size_ãmp
;

378 
	gôem
.
	gcuºít_ñemít
 = 
cuºít_ñemít_ãmp
;

379 
	gôem
.
	g©_°¨t_
 = 
©_°¨t_ãmp
;

388 
	gãm∂©e
 <

389 
ty≥«me
 
	gT
,

390 
ty≥«me
 
	gmem_m™agî


392 
boﬁ
 
	gqueue_kî√l_1
<
	gT
,
	gmem_m™agî
>::

393 
©_°¨t
 (

396  
©_°¨t_
;

401 
	gãm∂©e
 <

402 
ty≥«me
 
	gT
,

403 
ty≥«me
 
	gmem_m™agî


405 
size_t
 
	gqueue_kî√l_1
<
	gT
,
	gmem_m™agî
>::

406 
size
 (

409  
queue_size
;

414 
	gãm∂©e
 <

415 
ty≥«me
 
	gT
,

416 
ty≥«me
 
	gmem_m™agî


418 
	gqueue_kî√l_1
<
	gT
,
	gmem_m™agî
>::

419 
ª£t
 (

422 
©_°¨t_
 = 
åue
;

423 
	gcuºít_ñemít
 = 0;

428 
	gãm∂©e
 <

429 
ty≥«me
 
	gT
,

430 
ty≥«me
 
	gmem_m™agî


432 
boﬁ
 
	gqueue_kî√l_1
<
	gT
,
	gmem_m™agî
>::

433 
cuºít_ñemít_vÆid
 (

436  (
cuºít_ñemít
 != 0);

441 
	gãm∂©e
 <

442 
ty≥«me
 
	gT
,

443 
ty≥«me
 
	gmem_m™agî


445 c⁄° 
	gT
& 
	gqueue_kî√l_1
<T,
	gmem_m™agî
>::

446 
ñemít
 (

449  
cuºít_ñemít
->
ôem
;

454 
	gãm∂©e
 <

455 
ty≥«me
 
	gT
,

456 
ty≥«me
 
	gmem_m™agî


458 
	gT
& 
	gqueue_kî√l_1
<T,
	gmem_m™agî
>::

459 
ñemít
 (

462  
cuºít_ñemít
->
ôem
;

467 
	gãm∂©e
 <

468 
ty≥«me
 
	gT
,

469 
ty≥«me
 
	gmem_m™agî


471 
boﬁ
 
	gqueue_kî√l_1
<
	gT
,
	gmem_m™agî
>::

472 
move_√xt
 (

475 i‡(
©_°¨t_
)

477 
©_°¨t_
 = 
Ál£
;

479 i‡(
	gqueue_size
 == 0)

481  
Ál£
;

485 
	gcuºít_ñemít
 = 
out
;

486  
	gåue
;

492 i‡(
	gcuºít_ñemít
 =
ö
 || 
cuºít_ñemít
 == 0)

494 
cuºít_ñemít
 = 0;

495  
	gÁl£
;

499 
	gcuºít_ñemít
 = 
cuºít_ñemít
->
œ°
;

500  
	gåue
;

511 
	gãm∂©e
 <

512 
ty≥«me
 
	gT
,

513 
ty≥«me
 
	gmem_m™agî


515 
	gqueue_kî√l_1
<
	gT
,
	gmem_m™agî
>::

516 
ªmove_™y
 (

517 
T
& 
ôem


520 
dequeue
(
ôem
);

529 
	gãm∂©e
 <

530 
ty≥«me
 
	gT
,

531 
ty≥«me
 
	gmem_m™agî


533 
	gqueue_kî√l_1
<
	gT
,
	gmem_m™agî
>::

534 
dñëe_nodes
 (

535 
node
* 
°¨t
,

536 
Àngth


539 
node
* 
	gãmp
;

540 
	gÀngth
)

542 
	gãmp
 = 
°¨t
->
œ°
;

543 
dñëe
 
	g°¨t
;

544 
	g°¨t
 = 
ãmp
;

545 --
	gÀngth
;

	@viper/concurrentqueue-src/benchmarks/dlib/queue/queue_kernel_2.h

3 #i‚de‡
DLIB_QUEUE_KERNEl_2_


4 
	#DLIB_QUEUE_KERNEl_2_


	)

6 
	~"queue_kî√l_ab°ø˘.h
"

7 
	~"../Ægs.h
"

8 
	~"../as£π.h
"

9 
	~"../öãrÁ˚s/íumîabÀ.h
"

10 
	~"../öãrÁ˚s/ªmovî.h
"

11 
	~"../£rülize.h
"

13 
«me•a˚
 
	gdlib


16 
	gãm∂©e
 <

17 
ty≥«me
 
	gT
,

18 
	gblock_size
,

19 
ty≥«me
 
	gmem_m™agî
 = 
deÁu…_mem‹y_m™agî


21 
˛ass
 
queue_kî√l_2
 : 
public
 
íumîabÀ
<
T
>,

22 
public
 
	gªmovî
<
	gT
>

58 
	snode


60 
node
* 
	g√xt
;

62 
T
 
	gôem
[
block_size
];

66 
	gpublic
:

68 
T
 
	tty≥
;

69 
mem_m™agî
 
	tmem_m™agî_ty≥
;

71 
queue_kî√l_2
 (

73 
ö
(0),

74 
out
(0),

75 
queue_size
(0),

76 
cuºít_ñemít
(0),

77 
©_°¨t_
(
åue
)

81 
	gvútuÆ
 ~
queue_kî√l_2
 (

84 
ölöe
 
˛ór
(

87 
íqueue
 (

88 
T
& 
ôem


91 
dequeue
 (

92 
T
& 
ôem


95 
ˇt
 (

96 
queue_kî√l_2
& 
ôem


99 
	gT
& 
cuºít
 (

102 c⁄° 
	gT
& 
cuºít
 (

105 
sw≠
 (

106 
queue_kî√l_2
& 
ôem


110 
ölöe
 
ªmove_™y
 (

111 
T
& 
ôem


115 
ölöe
 
size_t
 
size
 (

118 
ölöe
 
boﬁ
 
©_°¨t
 (

121 
ölöe
 
ª£t
 (

124 
boﬁ
 
cuºít_ñemít_vÆid
 (

127 
ölöe
 c⁄° 
	gT
& 
ñemít
 (

130 
ölöe
 
	gT
& 
ñemít
 (

133 
boﬁ
 
move_√xt
 (

136 
	g¥iv©e
:

138 
dñëe_nodes
 (

139 
node
* 
°¨t
,

140 
node
* 
íd


154 
ty≥«me
 
	gmem_m™agî
::
ãm∂©e
 
ªböd
<
node
>::
Ÿhî
 
poﬁ
;

156 
node
* 
	gö
;

157 
node
* 
	gout
;

158 
size_t
 
	gqueue_size
;

159 
size_t
 
	gö_pos
;

160 
size_t
 
	gout_pos
;

163 
muèbÀ
 
node
* 
	gcuºít_ñemít
;

164 
muèbÀ
 
size_t
 
	gcuºít_ñemít_pos
;

165 
muèbÀ
 
boﬁ
 
	g©_°¨t_
;

168 
queue_kî√l_2
(queue_kernel_2&);

169 
	gqueue_kî√l_2
& 
	g›î©‹
=(
queue_kî√l_2
&);

173 
	gãm∂©e
 <

174 
ty≥«me
 
	gT
,

175 
	gblock_size
,

176 
ty≥«me
 
	gmem_m™agî


178 
ölöe
 
sw≠
 (

179 
queue_kî√l_2
<
T
,
block_size
,
mem_m™agî
>& 
a
,

180 
queue_kî√l_2
<
T
,
block_size
,
mem_m™agî
>& 
b


181 Ë{ 
	ga
.
sw≠
(
b
); }

183 
	gãm∂©e
 <

184 
ty≥«me
 
	gT
,

185 
	gblock_size
,

186 
ty≥«me
 
	gmem_m™agî


188 
de£rülize
 (

189 
queue_kî√l_2
<
T
,
block_size
,
mem_m™agî
>& 
ôem
,

190 
°d
::
i°ªam
& 
ö


193 
åy


195 
ôem
.
˛ór
();

196 
	gsize
;

197 
de£rülize
(
size
,
ö
);

198 
T
 
	gãmp
;

199 
	gi
 = 0; i < 
	gsize
; ++i)

201 
de£rülize
(
ãmp
,
ö
);

202 
	gôem
.
íqueue
(
ãmp
);

205 
ˇtch
 (
£rüliz©i⁄_îr‹
& 
e
)

207 
	gôem
.
˛ór
();

208 
throw
 
£rüliz©i⁄_îr‹
(
e
.
öfo
 + "\n while deserializing object ofÅype queue_kernel_2");

218 
	gãm∂©e
 <

219 
ty≥«me
 
	gT
,

220 
	gblock_size
,

221 
ty≥«me
 
	gmem_m™agî


223 
	gqueue_kî√l_2
<
	gT
,
	gblock_size
,
	gmem_m™agî
>::

224 ~
queue_kî√l_2
 (

227 
COMPILE_TIME_ASSERT
(0 < 
block_size
 && block_size < ()(2000000000));

229 i‡(
	gqueue_size
 > 0)

230 
dñëe_nodes
(
out
,
ö
);

235 
	gãm∂©e
 <

236 
ty≥«me
 
	gT
,

237 
	gblock_size
,

238 
ty≥«me
 
	gmem_m™agî


240 
	gqueue_kî√l_2
<
	gT
,
	gblock_size
,
	gmem_m™agî
>::

241 
˛ór
 (

244 i‡(
queue_size
 > 0)

246 
dñëe_nodes
(
out
,
ö
);

247 
	gqueue_size
 = 0;

251 
ª£t
();

256 
	gãm∂©e
 <

257 
ty≥«me
 
	gT
,

258 
	gblock_size
,

259 
ty≥«me
 
	gmem_m™agî


261 
	gqueue_kî√l_2
<
	gT
,
	gblock_size
,
	gmem_m™agî
>::

262 
íqueue
 (

263 
T
& 
ôem


266 i‡(
queue_size
 == 0)

268 
out
 = 
ö
 = 
poﬁ
.
Æloˇã
();

269 
	gö_pos
 = 0;

270 
	gout_pos
 = 0;

272 i‡(
	gö_pos
 >
block_size
)

274 
ö
->
√xt
 = 
poﬁ
.
Æloˇã
();

275 
	gö_pos
 = 0;

276 
	gö
 = 
ö
->
√xt
;

279 
exch™ge
(
ôem
,
ö
->ôem[
ö_pos
]);

280 ++
	gö_pos
;

282 ++
	gqueue_size
;

285 
ª£t
();

290 
	gãm∂©e
 <

291 
ty≥«me
 
	gT
,

292 
	gblock_size
,

293 
ty≥«me
 
	gmem_m™agî


295 
	gqueue_kî√l_2
<
	gT
,
	gblock_size
,
	gmem_m™agî
>::

296 
dequeue
 (

297 
T
& 
ôem


301 
exch™ge
(
ôem
,
out
->ôem[
out_pos
]);

303 ++
	gout_pos
;

304 --
	gqueue_size
;

307 i‡(
	gout_pos
 =
block_size
)

309 
out_pos
 = 0;

310 
node
* 
	gãmp
 = 
out
;

311 
	gout
 = 
out
->
√xt
;

312 
	gpoﬁ
.
dóŒoˇã
(
ãmp
);

314 i‡(
	gqueue_size
 == 0)

316 
poﬁ
.
dóŒoˇã
(
out
);

320 
ª£t
();

325 
	gãm∂©e
 <

326 
ty≥«me
 
	gT
,

327 
	gblock_size
,

328 
ty≥«me
 
	gmem_m™agî


330 
	gqueue_kî√l_2
<
	gT
,
	gblock_size
,
	gmem_m™agî
>::

331 
ˇt
 (

332 
queue_kî√l_2
<
T
,
block_size
,
mem_m™agî
>& 
ôem


335 i‡(
	gqueue_size
 > 0)

337 
T
 
	gãmp
;

338 
assign_zîo_if_buût_ö_sˇœr_ty≥
(
ãmp
);

339 
	gôem
.
size
() > 0)

341 
	gôem
.
dequeue
(
ãmp
);

342 
íqueue
(
ãmp
);

347 
	gö
 = 
ôem
.
ö
;

348 
	gout
 = 
ôem
.
out
;

349 
	gout_pos
 = 
ôem
.
out_pos
;

350 
	gö_pos
 = 
ôem
.
ö_pos
;

352 
	gqueue_size
 = 
ôem
.
queue_size
;

353 
	gôem
.
	gqueue_size
 = 0;

356 
ª£t
();

362 
	gãm∂©e
 <

363 
ty≥«me
 
	gT
,

364 
	gblock_size
,

365 
ty≥«me
 
	gmem_m™agî


367 
	gT
& 
	gqueue_kî√l_2
<T,
	gblock_size
,
	gmem_m™agî
>::

368 
cuºít
 (

371  
out
->
ôem
[
out_pos
];

376 
	gãm∂©e
 <

377 
ty≥«me
 
	gT
,

378 
	gblock_size
,

379 
ty≥«me
 
	gmem_m™agî


381 c⁄° 
	gT
& 
	gqueue_kî√l_2
<T,
	gblock_size
,
	gmem_m™agî
>::

382 
cuºít
 (

385  
out
->
ôem
[
out_pos
];

390 
	gãm∂©e
 <

391 
ty≥«me
 
	gT
,

392 
	gblock_size
,

393 
ty≥«me
 
	gmem_m™agî


395 
	gqueue_kî√l_2
<
	gT
,
	gblock_size
,
	gmem_m™agî
>::

396 
sw≠
 (

397 
queue_kî√l_2
<
T
,
block_size
,
mem_m™agî
>& 
ôem


400 
exch™ge
(
ö
,
ôem
.in);

401 
exch™ge
(
out
,
ôem
.out);

402 
exch™ge
(
queue_size
,
ôem
.queue_size);

403 
exch™ge
(
ö_pos
,
ôem
.in_pos);

404 
exch™ge
(
out_pos
,
ôem
.out_pos);

405 
exch™ge
(
cuºít_ñemít
,
ôem
.current_element);

406 
exch™ge
(
cuºít_ñemít_pos
,
ôem
.current_element_pos);

407 
exch™ge
(
©_°¨t_
,
ôem
.at_start_);

408 
	gpoﬁ
.
sw≠
(
ôem
.
poﬁ
);

417 
	gãm∂©e
 <

418 
ty≥«me
 
	gT
,

419 
	gblock_size
,

420 
ty≥«me
 
	gmem_m™agî


422 
size_t
 
	gqueue_kî√l_2
<
	gT
,
	gblock_size
,
	gmem_m™agî
>::

423 
size
 (

426  
queue_size
;

431 
	gãm∂©e
 <

432 
ty≥«me
 
	gT
,

433 
	gblock_size
,

434 
ty≥«me
 
	gmem_m™agî


436 
boﬁ
 
	gqueue_kî√l_2
<
	gT
,
	gblock_size
,
	gmem_m™agî
>::

437 
©_°¨t
 (

440  
©_°¨t_
;

445 
	gãm∂©e
 <

446 
ty≥«me
 
	gT
,

447 
	gblock_size
,

448 
ty≥«me
 
	gmem_m™agî


450 
	gqueue_kî√l_2
<
	gT
,
	gblock_size
,
	gmem_m™agî
>::

451 
ª£t
 (

454 
©_°¨t_
 = 
åue
;

455 
	gcuºít_ñemít
 = 0;

460 
	gãm∂©e
 <

461 
ty≥«me
 
	gT
,

462 
	gblock_size
,

463 
ty≥«me
 
	gmem_m™agî


465 
boﬁ
 
	gqueue_kî√l_2
<
	gT
,
	gblock_size
,
	gmem_m™agî
>::

466 
cuºít_ñemít_vÆid
 (

469  (
cuºít_ñemít
 != 0);

474 
	gãm∂©e
 <

475 
ty≥«me
 
	gT
,

476 
	gblock_size
,

477 
ty≥«me
 
	gmem_m™agî


479 c⁄° 
	gT
& 
	gqueue_kî√l_2
<T,
	gblock_size
,
	gmem_m™agî
>::

480 
ñemít
 (

483  
cuºít_ñemít
->
ôem
[
cuºít_ñemít_pos
];

488 
	gãm∂©e
 <

489 
ty≥«me
 
	gT
,

490 
	gblock_size
,

491 
ty≥«me
 
	gmem_m™agî


493 
	gT
& 
	gqueue_kî√l_2
<T,
	gblock_size
,
	gmem_m™agî
>::

494 
ñemít
 (

497  
cuºít_ñemít
->
ôem
[
cuºít_ñemít_pos
];

502 
	gãm∂©e
 <

503 
ty≥«me
 
	gT
,

504 
	gblock_size
,

505 
ty≥«me
 
	gmem_m™agî


507 
boﬁ
 
	gqueue_kî√l_2
<
	gT
,
	gblock_size
,
	gmem_m™agî
>::

508 
move_√xt
 (

511 i‡(
©_°¨t_
)

513 
©_°¨t_
 = 
Ál£
;

515 i‡(
	gqueue_size
 == 0)

517  
Ál£
;

521 
	gcuºít_ñemít
 = 
out
;

522 
	gcuºít_ñemít_pos
 = 
out_pos
;

523  
	gåue
;

526 i‡(
	gcuºít_ñemít
 == 0)

528  
Ál£
;

532 ++
	gcuºít_ñemít_pos
;

534 i‡(
	gcuºít_ñemít
 =
ö
 && 
cuºít_ñemít_pos
 =
ö_pos
 )

536 
cuºít_ñemít
 = 0;

537  
	gÁl£
;

539 i‡(
	gcuºít_ñemít_pos
 =
block_size
)

541 
cuºít_ñemít_pos
 = 0;

542 
	gcuºít_ñemít
 = 
cuºít_ñemít
->
√xt
;

545  
	gåue
;

555 
	gãm∂©e
 <

556 
ty≥«me
 
	gT
,

557 
	gblock_size
,

558 
ty≥«me
 
	gmem_m™agî


560 
	gqueue_kî√l_2
<
	gT
,
	gblock_size
,
	gmem_m™agî
>::

561 
ªmove_™y
 (

562 
T
& 
ôem


565 
dequeue
(
ôem
);

574 
	gãm∂©e
 <

575 
ty≥«me
 
	gT
,

576 
	gblock_size
,

577 
ty≥«me
 
	gmem_m™agî


579 
	gqueue_kî√l_2
<
	gT
,
	gblock_size
,
	gmem_m™agî
>::

580 
dñëe_nodes
 (

581 
node
* 
°¨t
,

582 
node
* 
íd


585 
node
* 
	gãmp
;

586 
	g°¨t
 !
íd
)

588 
ãmp
 = 
°¨t
;

589 
	g°¨t
 = 
°¨t
->
√xt
;

590 
	gpoﬁ
.
dóŒoˇã
(
ãmp
);

592 
	gpoﬁ
.
dóŒoˇã
(
°¨t
);

	@viper/concurrentqueue-src/benchmarks/dlib/queue/queue_kernel_abstract.h

3 #unde‡
DLIB_QUEUE_KERNEl_ABSTRACT_


4 #ifde‡
DLIB_QUEUE_KERNEl_ABSTRACT_


6 
	~"../öãrÁ˚s/íumîabÀ.h
"

7 
	~"../öãrÁ˚s/ªmovî.h
"

8 
	~"../£rülize.h
"

9 
	~"../Ægs.h
"

11 
«me•a˚
 
	gdlib


14 
	gãm∂©e
 <

15 
ty≥«me
 
	gT
,

16 
ty≥«me
 
	gmem_m™agî
 = 
deÁu…_mem‹y_m™agî


18 
˛ass
 
queue
 : 
public
 
íumîabÀ
<
T
>,

19 
public
 
	gªmovî
<
	gT
>

57 
	gpublic
:

59 
T
 
	tty≥
;

60 
mem_m™agî
 
	tmem_m™agî_ty≥
;

62 
queue
 (

71 
	gvútuÆ
 ~
queue
 (

78 
˛ór
(

89 
íqueue
 (

90 
T
& 
ôem


103 
dequeue
 (

104 
T
& 
ôem


116 
ˇt
 (

117 
queue
& 
ôem


134 
	gT
& 
cuºít
 (

144 c⁄° 
	gT
& 
cuºít
 (

154 
sw≠
 (

155 
queue
& 
ôem


162 
	g¥iv©e
:

165 
queue
(queue&);

166 
	gqueue
& 
	g›î©‹
=(
queue
&);

170 
	gãm∂©e
 <

171 
ty≥«me
 
	gT
,

172 
ty≥«me
 
	gmem_m™agî


174 
ölöe
 
sw≠
 (

175 
queue
<
T
,
mem_m™agî
>& 
a
,

176 
queue
<
T
,
mem_m™agî
>& 
b


177 Ë{ 
	ga
.
sw≠
(
b
); }

182 
	gãm∂©e
 <

183 
ty≥«me
 
	gT
,

184 
ty≥«me
 
	gmem_m™agî


186 
de£rülize
 (

187 
queue
<
T
,
mem_m™agî
>& 
ôem
,

188 
°d
::
i°ªam
& 
ö


	@viper/concurrentqueue-src/benchmarks/dlib/queue/queue_kernel_c.h

3 #i‚de‡
DLIB_QUEUE_KERNEl_C_


4 
	#DLIB_QUEUE_KERNEl_C_


	)

6 
	~"queue_kî√l_ab°ø˘.h
"

7 
	~"../Ægs.h
"

8 
	~"../as£π.h
"

10 
«me•a˚
 
	gdlib


14 
	gãm∂©e
 <

15 
ty≥«me
 
	gqueue_ba£


17 ˛as†
	cqueue_kî√l_c
 : 
public
 
queue_ba£


19 
ty≥«me
 
	tqueue_ba£
::
	tty≥
 
	tT
;

21 
	gpublic
:

23 
dequeue
 (

24 
T
& 
ôem


27 
	gT
& 
cuºít
 (

30 c⁄° 
	gT
& 
cuºít
 (

33 c⁄° 
	gT
& 
ñemít
 (

36 
	gT
& 
ñemít
 (

39 
ªmove_™y
 (

40 
T
& 
ôem


45 
	gãm∂©e
 <

46 
ty≥«me
 
	gqueue_ba£


48 
ölöe
 
sw≠
 (

49 
queue_kî√l_c
<
queue_ba£
>& 
a
,

50 
queue_kî√l_c
<
queue_ba£
>& 
b


51 Ë{ 
	ga
.
sw≠
(
b
); }

59 
	gãm∂©e
 <

60 
ty≥«me
 
	gqueue_ba£


62 
	gqueue_kî√l_c
<
	gqueue_ba£
>::

63 
	$dequeue
 (

64 
T
& 
ôem


69 
	`DLIB_CASSERT
(
this
->
	`size
() != 0,

72 << "\n\âhis: " << 
this


76 
queue_ba£
::
	`dequeue
(
ôem
);

78 
	}
}

82 
	gãm∂©e
 <

83 
ty≥«me
 
	gqueue_ba£


85 c⁄° 
ty≥«me
 
	gqueue_ba£
::
ty≥
& 
queue_kî√l_c
<
queue_ba£
>::

86 
	$cuºít
 (

90 
	`DLIB_CASSERT
(
this
->
	`size
() != 0,

93 << "\n\âhis: " << 
this


97  
queue_ba£
::
	`cuºít
();

98 
	}
}

102 
	gãm∂©e
 <

103 
ty≥«me
 
	gqueue_ba£


105 
ty≥«me
 
	gqueue_ba£
::
ty≥
& 
queue_kî√l_c
<
queue_ba£
>::

106 
	$cuºít
 (

110 
	`DLIB_CASSERT
(
this
->
	`size
() != 0,

113 << "\n\âhis: " << 
this


117  
queue_ba£
::
	`cuºít
();

118 
	}
}

122 
	gãm∂©e
 <

123 
ty≥«me
 
	gqueue_ba£


125 c⁄° 
ty≥«me
 
	gqueue_ba£
::
ty≥
& 
queue_kî√l_c
<
queue_ba£
>::

126 
	$ñemít
 (

130 
	`DLIB_CASSERT
(
this
->
	`cuºít_ñemít_vÆid
(Ë=
åue
,

133 << "\n\âhis: " << 
this


137  
queue_ba£
::
	`ñemít
();

138 
	}
}

142 
	gãm∂©e
 <

143 
ty≥«me
 
	gqueue_ba£


145 
ty≥«me
 
	gqueue_ba£
::
ty≥
& 
queue_kî√l_c
<
queue_ba£
>::

146 
	$ñemít
 (

150 
	`DLIB_CASSERT
(
this
->
	`cuºít_ñemít_vÆid
(Ë=
åue
,

153 << "\n\âhis: " << 
this


157  
queue_ba£
::
	`ñemít
();

158 
	}
}

162 
	gãm∂©e
 <

163 
ty≥«me
 
	gqueue_ba£


165 
	gqueue_kî√l_c
<
	gqueue_ba£
>::

166 
	$ªmove_™y
 (

167 
T
& 
ôem


171 
	`DLIB_CASSERT
–(
this
->
	`size
() > 0),

174 << "\n\tsize(): " << 
this
->
	`size
()

175 << "\n\âhis: " << 
this


179 
queue_ba£
::
	`ªmove_™y
(
ôem
);

180 
	}
}

	@viper/concurrentqueue-src/benchmarks/dlib/queue/queue_sort_1.h

3 #i‚de‡
DLIB_QUEUE_SORt_1_


4 
	#DLIB_QUEUE_SORt_1_


	)

6 
	~"queue_s‹t_ab°ø˘.h
"

7 
	~"../Ægs.h
"

8 
	~<ve˘‹
>

9 
	~"../s‹t.h
"

11 
«me•a˚
 
	gdlib


14 
	gãm∂©e
 <

15 
ty≥«me
 
	gqueue_ba£


17 ˛as†
	cqueue_s‹t_1
 : 
public
 
queue_ba£


19 
ty≥«me
 
	tqueue_ba£
::
	tty≥
 
	tT
;

21 
	gpublic
:

29 
s‹t
 (

32 
	gãm∂©e
 <
ty≥«me
 
	gcom∑ª_ty≥
>

33 
s‹t
 (

34 c⁄° 
com∑ª_ty≥
& 
com∑ª


37 i‡(
	gthis
->
size
() > 1)

39 
s‹t_this_queue
(*
this
,0,
com∑ª
);

43 
	g¥iv©e
:

45 
ãm∂©e
 <
ty≥«me
 
com∑ª_ty≥
>

46 
s‹t_this_queue
 (

47 
queue_ba£
& 
queue
,

48 
dïth
,

49 c⁄° 
com∑ª_ty≥
& 
com∑ª


57 i‡(
	gqueue
.
size
() <= 1)

61 i‡(
queue
.
size
() <= 29)

63 
T
 
ve˘
[29];

64 c⁄° 
	gsize
 = 
queue
.
size
();

65 
	gi
 = 0; i < 
	gsize
; ++i)

67 
	gqueue
.
dequeue
(
ve˘
[
i
]);

69 
is‹t_¨øy
(
ve˘
,0,
size
-1,
com∑ª
);

70 
	gi
 = 0; i < 
	gsize
; ++i)

72 
	gqueue
.
íqueue
(
ve˘
[
i
]);

75 i‡(
	gdïth
 > 50)

77 
	g°d
::
ve˘‹
<
T
> 
ve˘
(
queue
.
size
());

78 
	gi
 = 0; i < 
	gve˘
.
size
(); ++i)

80 
	gqueue
.
dequeue
(
ve˘
[
i
]);

82 
hs‹t_¨øy
(
ve˘
,0,ve˘.
size
()-1,
com∑ª
);

83 
	gi
 = 0; i < 
	gve˘
.
size
(); ++i)

85 
	gqueue
.
íqueue
(
ve˘
[
i
]);

90 
queue_ba£
 
	gÀ·
, 
	gright
;

91 
T
 
	g∑πôi⁄_ñemít
;

92 
T
 
	gãmp
;

94 
assign_zîo_if_buût_ö_sˇœr_ty≥
(
ãmp
);

95 
assign_zîo_if_buût_ö_sˇœr_ty≥
(
∑πôi⁄_ñemít
);

97 
	gqueue
.
dequeue
(
∑πôi⁄_ñemít
);

100 
	gqueue
.
size
() > 0)

102 
	gqueue
.
dequeue
(
ãmp
);

103 i‡(
com∑ª
(
ãmp
 , 
∑πôi⁄_ñemít
))

105 
	gÀ·
.
íqueue
(
ãmp
);

109 
	gright
.
íqueue
(
ãmp
);

114 
	gøtio
;

115 i‡(
	gÀ·
.
size
(Ë> 
	gright
.size())

116 
	gøtio
 = 
À·
.
size
()/(
right
.size()+1);

118 
	gøtio
 = 
right
.
size
()/(
À·
.size()+1);

120 
s‹t_this_queue
(
À·
,
øtio
+
dïth
,
com∑ª
);

121 
s‹t_this_queue
(
right
,
øtio
+
dïth
,
com∑ª
);

124 
	gÀ·
.
sw≠
(
queue
);

125 
	gqueue
.
íqueue
(
∑πôi⁄_ñemít
);

126 
	gqueue
.
ˇt
(
right
);

133 
	gãm∂©e
 <

134 
ty≥«me
 
	gqueue_ba£


136 
ölöe
 
sw≠
 (

137 
queue_s‹t_1
<
queue_ba£
>& 
a
,

138 
queue_s‹t_1
<
queue_ba£
>& 
b


139 Ë{ 
	ga
.
sw≠
(
b
); }

147 
	gãm∂©e
 <

148 
ty≥«me
 
	gqueue_ba£


150 
	gqueue_s‹t_1
<
	gqueue_ba£
>::

151 
	$s‹t
 (

154 i‡(
this
->
	`size
() > 1)

156 
	`s‹t_this_queue
(*
this
,0,
°d
::
Àss
<
ty≥«me
 
queue_ba£
::
ty≥
>());

158 
	}
}

	@viper/concurrentqueue-src/benchmarks/dlib/queue/queue_sort_abstract.h

3 #unde‡
DLIB_QUEUE_SORt_ABSTRACT_


4 #ifde‡
DLIB_QUEUE_SORt_ABSTRACT_


7 
	~"queue_kî√l_ab°ø˘.h
"

9 
«me•a˚
 
	gdlib


12 
	gãm∂©e
 <

13 
ty≥«me
 
	gqueue_ba£


15 ˛as†
	cqueue_s‹t
 : 
public
 
queue_ba£


31 
public
:

33 
s‹t
 (

44 
	gãm∂©e
 <
ty≥«me
 
	gcom∑ª_ty≥
>

45 
s‹t
 (

46 c⁄° 
com∑ª_ty≥
& 
com∑ª


60 
	gãm∂©e
 <

61 
ãm∂©e
 
	gqueue_ba£


63 
ölöe
 
sw≠
 (

64 
queue_s‹t
<
queue_ba£
>& 
a
,

65 
queue_s‹t
<
queue_ba£
>& 
b


66 Ë{ 
	ga
.
sw≠
(
b
); }

	@viper/concurrentqueue-src/benchmarks/dlib/ref.h

3 #i‚de‡
DLIB_REFERENCE_WRAPpER_H_


4 
	#DLIB_REFERENCE_WRAPpER_H_


	)

6 
«me•a˚
 
	gdlib


11 
	gãm∂©e
<

12 
ty≥«me
 
	gT


14 ˛as†
	cª„ªn˚_wøµî


22 
	gpublic
:

23 
T
 
	tty≥
;

25 
ex∂icô
 
ª„ªn˚_wøµî
(
T
& 
o
Ë: 
obj
(&o) {}

27 
›î©‹
 
T
&(Ëc⁄° {  *
obj
; }

28 
	gT
& 
gë
(Ëc⁄° {  *
	gobj
; }

30 
	g¥iv©e
:

31 
T
* 
obj
;

36 
	gãm∂©e
 <
ty≥«me
 
	gT
>

37 
	gª„ªn˚_wøµî
<
	gT
> 
	$ªf
(

38 
T
& 
obj


39 Ë{  
ª„ªn˚_wøµî
<
T
>(
obj
); 
	}
}

47 
	gãm∂©e
 <
ty≥«me
 
	gT
>

48 
	gª„ªn˚_wøµî
<
	gT
> 
ªf
(

49 
ª„ªn˚_wøµî
<
T
> 
obj


50 Ë{  
	gobj
; }

58 
	gãm∂©e
 <
ty≥«me
 
	gT
>

59 
	gª„ªn˚_wøµî
<c⁄° 
	gT
> 
	$¸ef
(

60 c⁄° 
T
& 
obj


61 Ë{  
ª„ªn˚_wøµî
<c⁄° 
T
>(
obj
); 
	}
}

69 
	gãm∂©e
 <
ty≥«me
 
	gT
>

70 
	gª„ªn˚_wøµî
<c⁄° 
	gT
> 
¸ef
(

71 
ª„ªn˚_wøµî
<
T
> 
obj


72 Ë{  
¸ef
(
obj
.
gë
()); }

	@viper/concurrentqueue-src/benchmarks/dlib/revision.h

1 #i‚de‡
DLIB_REVISION_H


2 
	#DLIB_MAJOR_VERSION
 19

	)

3 
	#DLIB_MINOR_VERSION
 21

	)

4 
	#DLIB_PATCH_VERSION
 99

	)

	@viper/concurrentqueue-src/benchmarks/dlib/serialize.h

3 #i‚de‡
DLIB_SERIALIZe_


4 
	#DLIB_SERIALIZe_


	)

214 
	~"Ægs.h
"

215 
	~"as£π.h
"

216 
	~<iom™ù
>

217 
	~<c°ddef
>

218 
	~<io°ªam
>

219 
	~<f°ªam
>

220 
	~<°rög
>

221 
	~<ve˘‹
>

222 
	~<li°
>

223 
	~<f‹w¨d_li°
>

224 
	~<¨øy
>

225 
	~<deque
>

226 
	~<com∂ex
>

227 
	~<m≠
>

228 
	~<un‹dîed_m≠
>

229 
	~<tu∂e
>

230 
	~<mem‹y
>

231 
	~<£t
>

232 
	~<un‹dîed_£t
>

233 
	~<limôs
>

234 
	~<ty≥_åaôs
>

235 
	~<utûôy
>

236 
	~"uöä.h
"

237 
	~"öãrÁ˚s/íumîabÀ.h
"

238 
	~"öãrÁ˚s/m≠_∑ú.h
"

239 
	~"íabÀ_if.h
"

240 
	~"unicode.h
"

241 
	~"byã_‹dîî.h
"

242 
	~"Êﬂt_dëaûs.h
"

243 
	~"ve˘‹°ªam.h
"

245 
«me•a˚
 
	gdlib


250 ˛as†
	c£rüliz©i⁄_îr‹
 : 
public
 
îr‹


258 
public
:

259 
£rüliz©i⁄_îr‹
(c⁄° 
°d
::
°rög
& 
e
):
îr‹
(e) {}

263 
check_£rülized_vîsi⁄
(

264 c⁄° 
°d
::
°rög
& 
ex≥˘ed_vîsi⁄
,

265 
°d
::
i°ªam
& 
ö


276 
	gãm∂©e
 <
ty≥«me
 
	gT
>

277 
	sømdump_t


299 
ømdump_t
(
T
& 
ôem_
Ë: 
ôem
(item_) {}

300 
T
& 
ôem
;

304 
	gãm∂©e
 <
ty≥«me
 
	gT
>

305 
	gømdump_t
<
ty≥«me
 
	g°d
::
ªmove_ª„ªn˚
<
T
>::
ty≥
> 
	$ømdump
(
T
&& 
ôem
)

307  
ømdump_t
<
ty≥«me
 
°d
::
ªmove_ª„ªn˚
<
T
>::
ty≥
>(
ôem
);

308 
	}
}

311 
	gãm∂©e
 <

312 
ty≥«me
 
	gT


314 
£rülize
 (

315 c⁄° 
ømdump_t
<c⁄° 
T
>& 
ôem_
,

316 
°d
::
o°ªam
& 
out


323 c⁄°áutÿ
ãmp
 = 
ømdump
(
c⁄°_ˇ°
<
T
&>(
ôem_
.
ôem
));

324 
£rülize
(
ãmp
, 
out
);

329 
«me•a˚
 
	g£r_hñ≥r


332 
	gãm∂©e
 <

333 
ty≥«me
 
	gT


335 
ty≥«me
 
	gíabÀ_if_c
<
	g°d
::
numîic_limôs
<
T
>::
is_sig√d
,
	gboﬁ
>::
ty≥
 
∑ck_öt
 (

336 
T
 
ôem
,

337 
°d
::
o°ªam
& 
out


350 
COMPILE_TIME_ASSERT
((
T
) <= 8);

351 
	gbuf
[9];

352 
	gsize
 = (
T
);

353 
	g√g
;

354 i‡(
	gôem
 < 0)

356 
	g√g
 = 0x80;

357 
	gôem
 *= -1;

361 
	g√g
 = 0;

364 
	gi
 = 1; i <(
T
); ++i)

366 
	gbuf
[
i
] = 
°©ic_ˇ°
<>(
ôem
&0xFF);

367 
	gôem
 >>= 8;

368 i‡(
	gôem
 =0Ë{ 
size
 = 
i
; ; }

371 
	g°d
::
°ªambuf
* 
sbuf
 = 
out
.
rdbuf
();

372 
	gbuf
[0] = 
size
|
√g
;

373 i‡(
	gsbuf
->
•uä
(
ªöãΩªt_ˇ°
<*>(
buf
),
size
+1) != size+1)

375 
out
.
£t°©e
(
°d
::
ios
::
eofbô
 | std::ios::
badbô
);

376  
	gåue
;

379  
	gÁl£
;

384 
	gãm∂©e
 <

385 
ty≥«me
 
	gT


387 
ty≥«me
 
	gíabÀ_if_c
<
	g°d
::
numîic_limôs
<
T
>::
is_sig√d
,
	gboﬁ
>::
ty≥
 
u≈ack_öt
 (

388 
T
& 
ôem
,

389 
°d
::
i°ªam
& 
ö


403 
COMPILE_TIME_ASSERT
((
T
) <= 8);

406 
	gbuf
[8];

407 
	gsize
;

408 
boﬁ
 
	gis_√g©ive
;

410 
	g°d
::
°ªambuf
* 
sbuf
 = 
ö
.
rdbuf
();

412 
	gôem
 = 0;

413 
	gch
 = 
sbuf
->
sbumpc
();

414 i‡(
	gch
 !
EOF
)

416 
size
 = 
°©ic_ˇ°
<>(
ch
);

420 
	gö
.
£t°©e
(
°d
::
ios
::
badbô
);

421  
	gåue
;

424 i‡(
	gsize
&0x80)

425 
	gis_√g©ive
 = 
åue
;

427 
	gis_√g©ive
 = 
Ál£
;

428 
	gsize
 &= 0x0F;

431 i‡(
	gsize
 > ()
	gtmö
<(
	gT
),8>::
vÆue
 || 
size
 == 0)

433  
åue
;

436 i‡(
	gsbuf
->
sgën
(
ªöãΩªt_ˇ°
<*>(&
buf
),
size
) != size)

438 
ö
.
£t°©e
(
°d
::
ios
::
badbô
);

439  
	gåue
;

443 
	gi
 = 
size
-1; 
	gåue
; --i)

445 
	gôem
 <<= 8;

446 
	gôem
 |
buf
[
i
];

447 i‡(
	gi
 == 0)

451 i‡(
	gis_√g©ive
)

452 
	gôem
 *= -1;

455  
	gÁl£
;

460 
	gãm∂©e
 <

461 
ty≥«me
 
	gT


463 
ty≥«me
 
	gdißbÀ_if_c
<
	g°d
::
numîic_limôs
<
T
>::
is_sig√d
,
	gboﬁ
>::
ty≥
 
∑ck_öt
 (

464 
T
 
ôem
,

465 
°d
::
o°ªam
& 
out


478 
COMPILE_TIME_ASSERT
((
T
) <= 8);

479 
	gbuf
[9];

480 
	gsize
 = (
T
);

482 
	gi
 = 1; i <(
T
); ++i)

484 
	gbuf
[
i
] = 
°©ic_ˇ°
<>(
ôem
&0xFF);

485 
	gôem
 >>= 8;

486 i‡(
	gôem
 =0Ë{ 
size
 = 
i
; ; }

489 
	g°d
::
°ªambuf
* 
sbuf
 = 
out
.
rdbuf
();

490 
	gbuf
[0] = 
size
;

491 i‡(
	gsbuf
->
•uä
(
ªöãΩªt_ˇ°
<*>(
buf
),
size
+1) != size+1)

493 
out
.
£t°©e
(
°d
::
ios
::
eofbô
 | std::ios::
badbô
);

494  
	gåue
;

497  
	gÁl£
;

502 
	gãm∂©e
 <

503 
ty≥«me
 
	gT


505 
ty≥«me
 
	gdißbÀ_if_c
<
	g°d
::
numîic_limôs
<
T
>::
is_sig√d
,
	gboﬁ
>::
ty≥
 
u≈ack_öt
 (

506 
T
& 
ôem
,

507 
°d
::
i°ªam
& 
ö


521 
COMPILE_TIME_ASSERT
((
T
) <= 8);

523 
	gbuf
[8];

524 
	gsize
;

526 
	gôem
 = 0;

528 
	g°d
::
°ªambuf
* 
sbuf
 = 
ö
.
rdbuf
();

529 
	gch
 = 
sbuf
->
sbumpc
();

530 i‡(
	gch
 !
EOF
)

532 
size
 = 
°©ic_ˇ°
<>(
ch
);

536 
	gö
.
£t°©e
(
°d
::
ios
::
badbô
);

537  
	gåue
;

542 
	gsize
 &= 0x8F;

545 i‡(
	gsize
 > ()
	gtmö
<(
	gT
),8>::
vÆue
 || 
size
 == 0)

546  
åue
;

549 i‡(
	gsbuf
->
sgën
(
ªöãΩªt_ˇ°
<*>(&
buf
),
size
) != size)

551 
ö
.
£t°©e
(
°d
::
ios
::
badbô
);

552  
	gåue
;

555 
	gi
 = 
size
-1; 
	gåue
; --i)

557 
	gôem
 <<= 8;

558 
	gôem
 |
buf
[
i
];

559 i‡(
	gi
 == 0)

563  
	gÁl£
;

570 
	#USE_DEFAULT_INT_SERIALIZATION_FOR
(
T
) \

571 
ölöe
 
	`£rülize
 (c⁄° 
T
& 
ôem
, 
°d
::
o°ªam
& 
out
) \

572 { i‡(
£r_hñ≥r
::
	`∑ck_öt
(
ôem
,
out
)Ë
throw
 
	`£rüliz©i⁄_îr‹
("Eº‹ sîülizög obje˘ o‡ty≥ " + 
°d
::
	`°rög
(#T)); } \

573 
ölöe
 
	`de£rülize
 (
T
& 
ôem
, 
°d
::
i°ªam
& 
ö
) \

574 { i‡(
£r_hñ≥r
::
	`u≈ack_öt
(
ôem
,
ö
)Ë
throw
 
	`£rüliz©i⁄_îr‹
("Eº‹ de£rülizög obje˘ o‡ty≥ " + 
°d
::
	`°rög
(#T)); }

	)

576 
	gãm∂©e
 <
ty≥«me
 
	gT
>

577 
ölöe
 
boﬁ
 
	$∑ck_byã
 (

578 c⁄° 
T
& 
ch
,

579 
°d
::
o°ªam
& 
out


582 
°d
::
°ªambuf
* 
sbuf
 = 
out
.
	`rdbuf
();

583  (
sbuf
->
	`•utc
(()
ch
Ë=
EOF
);

584 
	}
}

586 
	gãm∂©e
 <
ty≥«me
 
	gT
>

587 
ölöe
 
boﬁ
 
	$u≈ack_byã
 (

588 
T
& 
ch
,

589 
°d
::
i°ªam
& 
ö


592 
°d
::
°ªambuf
* 
sbuf
 = 
ö
.
	`rdbuf
();

593 
ãmp
 = 
sbuf
->
	`sbumpc
();

594 i‡(
ãmp
 !
EOF
)

596 
ch
 = 
°©ic_ˇ°
<
T
>(
ãmp
);

597  
Ál£
;

601  
åue
;

603 
	}
}

605 
	#USE_DEFAULT_BYTE_SERIALIZATION_FOR
(
T
) \

606 
ölöe
 
	`£rülize
 (c⁄° 
T
& 
ôem
,
°d
::
o°ªam
& 
out
) \

607 { i‡(
	`∑ck_byã
(
ôem
,
out
)Ë
throw
 
	`£rüliz©i⁄_îr‹
("Eº‹ sîülizög obje˘ o‡ty≥ " + 
°d
::
	`°rög
(#T)); } \

608 
ölöe
 
	`de£rülize
 (
T
& 
ôem
, 
°d
::
i°ªam
& 
ö
) \

609 { i‡(
	`u≈ack_byã
(
ôem
,
ö
)Ë
throw
 
	`£rüliz©i⁄_îr‹
("Eº‹ de£rülizög obje˘ o‡ty≥ " + 
°d
::
	`°rög
(#T)); }

	)

613 
	$USE_DEFAULT_INT_SERIALIZATION_FOR
()

614 
	$USE_DEFAULT_INT_SERIALIZATION_FOR
()

615 
	$USE_DEFAULT_INT_SERIALIZATION_FOR
()

616 
	$USE_DEFAULT_INT_SERIALIZATION_FOR
()

617 
	$USE_DEFAULT_INT_SERIALIZATION_FOR
()

618 
	$USE_DEFAULT_INT_SERIALIZATION_FOR
()

619 
	$USE_DEFAULT_INT_SERIALIZATION_FOR
(
uöt64
)

620 
	$USE_DEFAULT_INT_SERIALIZATION_FOR
(
öt64
)

622 
	$USE_DEFAULT_BYTE_SERIALIZATION_FOR
()

623 
	$USE_DEFAULT_BYTE_SERIALIZATION_FOR
(signed )

624 
	$USE_DEFAULT_BYTE_SERIALIZATION_FOR
()

630 #i‡!
	`deföed
(
_MSC_VER
Ë|| 
_NATIVE_WCHAR_T_DEFINED


631 
	$USE_DEFAULT_INT_SERIALIZATION_FOR
(
wch¨_t
)

636 
ölöe
 
	$£rülize
(

637 c⁄° 
Êﬂt_dëaûs
& 
ôem
,

638 
°d
::
o°ªam
& 
out


641 
	`£rülize
(
ôem
.
m™tisß
, 
out
);

642 
	`£rülize
(
ôem
.
exp⁄ít
, 
out
);

643 
	}
}

645 
ölöe
 
	$de£rülize
(

646 
Êﬂt_dëaûs
& 
ôem
,

647 
°d
::
i°ªam
& 
ö


650 
	`de£rülize
(
ôem
.
m™tisß
, 
ö
);

651 
	`de£rülize
(
ôem
.
exp⁄ít
, 
ö
);

652 
	}
}

656 
	gãm∂©e
 <
ty≥«me
 
	gT
>

657 
ölöe
 
	$£rülize_Êﬂtög_poöt
 (

658 c⁄° 
T
& 
ôem
,

659 
°d
::
o°ªam
& 
out


662 
åy


664 
Êﬂt_dëaûs
 
ãmp
 = 
ôem
;

665 
	`£rülize
(
ãmp
, 
out
);

667 
	`ˇtch
 (
£rüliz©i⁄_îr‹
& 
e
)

668 { 
throw
 
	`£rüliz©i⁄_îr‹
(
e
.
öfo
 + "\n while serializingá floatingÖointÇumber."); }

669 
	}
}

671 
	gãm∂©e
 <
ty≥«me
 
	gT
>

672 
ölöe
 
boﬁ
 
	$ﬁd_de£rülize_Êﬂtög_poöt
 (

673 
T
& 
ôem
,

674 
°d
::
i°ªam
& 
ö


677 
°d
::
ios
::
fmtÊags
 
ﬁdÊags
 = 
ö
.
	`Êags
();

678 
ö
.
	`Êags
(
°©ic_ˇ°
<
°d
::
ios_ba£
::
fmtÊags
>(0));

679 
°d
::
°ªamsize
 
ss
 = 
ö
.
	`¥ecisi⁄
(35);

680 i‡(
ö
.
	`≥ek
() == 'i')

682 
ôem
 = 
°d
::
numîic_limôs
<
T
>::
	`öföôy
();

683 
ö
.
	`gë
();

684 
ö
.
	`gë
();

685 
ö
.
	`gë
();

687 i‡(
ö
.
	`≥ek
() == 'n')

689 
ôem
 = -
°d
::
numîic_limôs
<
T
>::
	`öföôy
();

690 
ö
.
	`gë
();

691 
ö
.
	`gë
();

692 
ö
.
	`gë
();

693 
ö
.
	`gë
();

695 i‡(
ö
.
	`≥ek
() == 'N')

697 
ôem
 = 
°d
::
numîic_limôs
<
T
>::
	`quõt_NaN
();

698 
ö
.
	`gë
();

699 
ö
.
	`gë
();

700 
ö
.
	`gë
();

704 
ö
 >> 
ôem
;

706 
ö
.
	`Êags
(
ﬁdÊags
);

707 
ö
.
	`¥ecisi⁄
(
ss
);

708  (
ö
.
	`gë
() != ' ');

709 
	}
}

711 
	gãm∂©e
 <
ty≥«me
 
	gT
>

712 
ölöe
 
	$de£rülize_Êﬂtög_poöt
 (

713 
T
& 
ôem
,

714 
°d
::
i°ªam
& 
ö


724 i‡((
ö
.
	`rdbuf
()->
	`sgëc
()&0x70) == 0)

726 
åy


729 
Êﬂt_dëaûs
 
ãmp
;

730 
	`de£rülize
(
ãmp
, 
ö
);

731 
ôem
 = 
ãmp
;

733 
	`ˇtch
 (
£rüliz©i⁄_îr‹
& 
e
)

734 { 
throw
 
	`£rüliz©i⁄_îr‹
(
e
.
öfo
 + "\n while deserializingá floatingÖointÇumber."); }

738 i‡(
	`ﬁd_de£rülize_Êﬂtög_poöt
(
ôem
, 
ö
))

739 
throw
 
	`£rüliz©i⁄_îr‹
("Error deserializingá floatingÖointÇumber.");

741 
	}
}

743 
ölöe
 
	$£rülize
 ( c⁄° & 
ôem
, 
°d
::
o°ªam
& 
out
)

745 
	`£rülize_Êﬂtög_poöt
(
ôem
,
out
);

746 
	}
}

748 
ölöe
 
	$de£rülize
 (& 
ôem
, 
°d
::
i°ªam
& 
ö
)

750 
	`de£rülize_Êﬂtög_poöt
(
ôem
,
ö
);

751 
	}
}

753 
ölöe
 
	$£rülize
 ( c⁄° & 
ôem
, 
°d
::
o°ªam
& 
out
)

755 
	`£rülize_Êﬂtög_poöt
(
ôem
,
out
);

756 
	}
}

758 
ölöe
 
	$de£rülize
 (& 
ôem
, 
°d
::
i°ªam
& 
ö
)

760 
	`de£rülize_Êﬂtög_poöt
(
ôem
,
ö
);

761 
	}
}

763 
ölöe
 
	$£rülize
 ( c⁄° & 
ôem
, 
°d
::
o°ªam
& 
out
)

765 
	`£rülize_Êﬂtög_poöt
(
ôem
,
out
);

766 
	}
}

768 
ölöe
 
	$de£rülize
 ( & 
ôem
, 
°d
::
i°ªam
& 
ö
)

770 
	`de£rülize_Êﬂtög_poöt
(
ôem
,
ö
);

771 
	}
}

776 
	gãm∂©e
 <
ty≥«me
 
	gdomaö
,Åy≥«mê
	gønge
,Åy≥«mê
	gcom∑ª
,Åy≥«mê
	gÆloc
>

777 
£rülize
 (

778 c⁄° 
°d
::
m≠
<
domaö
,
ønge
, 
com∑ª
, 
Æloc
>& 
ôem
,

779 
°d
::
o°ªam
& 
out


782 
	gãm∂©e
 <
ty≥«me
 
	gdomaö
,Åy≥«mê
	gønge
,Åy≥«mê
	gcom∑ª
,Åy≥«mê
	gÆloc
>

783 
de£rülize
 (

784 
°d
::
m≠
<
domaö
, 
ønge
, 
com∑ª
, 
Æloc
>& 
ôem
,

785 
°d
::
i°ªam
& 
ö


788 
	gãm∂©e
 <
ty≥«me
 
	gdomaö
,Åy≥«mê
	gønge
,Åy≥«mê
	ghash
,Åy≥«mê
	gkeyEquÆ
,Åy≥«mê
	gÆloc
>

789 
£rülize
 (

790 c⁄° 
°d
::
un‹dîed_m≠
<
domaö
, 
ønge
, 
hash
, 
keyEquÆ
, 
Æloc
>& 
ôem
,

791 
°d
::
o°ªam
& 
out


794 
	gãm∂©e
 <
ty≥«me
 
	gdomaö
,Åy≥«mê
	gønge
,Åy≥«mê
	ghash
,Åy≥«mê
	gkeyEquÆ
,Åy≥«mê
	gÆloc
>

795 
de£rülize
 (

796 
°d
::
un‹dîed_m≠
<
domaö
, 
ønge
, 
hash
, 
keyEquÆ
, 
Æloc
>& 
ôem
,

797 
°d
::
i°ªam
& 
ö


800 
	gãm∂©e
 <
ty≥«me
 
	gdomaö
,Åy≥«mê
	gønge
,Åy≥«mê
	gcom∑ª
,Åy≥«mê
	gÆloc
>

801 
£rülize
 (

802 c⁄° 
°d
::
mu…im≠
<
domaö
,
ønge
, 
com∑ª
, 
Æloc
>& 
ôem
,

803 
°d
::
o°ªam
& 
out


806 
	gãm∂©e
 <
ty≥«me
 
	gdomaö
,Åy≥«mê
	gønge
,Åy≥«mê
	gcom∑ª
,Åy≥«mê
	gÆloc
>

807 
de£rülize
 (

808 
°d
::
mu…im≠
<
domaö
, 
ønge
, 
com∑ª
, 
Æloc
>& 
ôem
,

809 
°d
::
i°ªam
& 
ö


812 
	gãm∂©e
 <
ty≥«me
 
	gdomaö
,Åy≥«mê
	gønge
,Åy≥«mê
	ghash
,Åy≥«mê
	gkeyEquÆ
,Åy≥«mê
	gÆloc
>

813 
£rülize
 (

814 c⁄° 
°d
::
un‹dîed_mu…im≠
<
domaö
, 
ønge
, 
hash
, 
keyEquÆ
, 
Æloc
>& 
ôem
,

815 
°d
::
o°ªam
& 
out


818 
	gãm∂©e
 <
ty≥«me
 
	gdomaö
,Åy≥«mê
	gønge
,Åy≥«mê
	ghash
,Åy≥«mê
	gkeyEquÆ
,Åy≥«mê
	gÆloc
>

819 
de£rülize
 (

820 
°d
::
un‹dîed_mu…im≠
<
domaö
, 
ønge
, 
hash
, 
keyEquÆ
, 
Æloc
>& 
ôem
,

821 
°d
::
i°ªam
& 
ö


824 
	gãm∂©e
 <
ty≥«me
 
	gdomaö
,Åy≥«mê
	gcom∑ª
,Åy≥«mê
	gÆloc
>

825 
£rülize
 (

826 c⁄° 
°d
::
£t
<
domaö
, 
com∑ª
, 
Æloc
>& 
ôem
,

827 
°d
::
o°ªam
& 
out


830 
	gãm∂©e
 <
ty≥«me
 
	gdomaö
,Åy≥«mê
	gcom∑ª
,Åy≥«mê
	gÆloc
>

831 
de£rülize
 (

832 
°d
::
£t
<
domaö
, 
com∑ª
, 
Æloc
>& 
ôem
,

833 
°d
::
i°ªam
& 
ö


836 
	gãm∂©e
 <
ty≥«me
 
	gdomaö
,Åy≥«mê
	ghash
,Åy≥«mê
	gkeyEquÆ
,Åy≥«mê
	gÆloc
>

837 
£rülize
 (

838 c⁄° 
°d
::
un‹dîed_£t
<
domaö
, 
hash
, 
keyEquÆ
, 
Æloc
>& 
ôem
,

839 
°d
::
o°ªam
& 
out


842 
	gãm∂©e
 <
ty≥«me
 
	gdomaö
,Åy≥«mê
	ghash
,Åy≥«mê
	gkeyEquÆ
,Åy≥«mê
	gÆloc
>

843 
de£rülize
 (

844 
°d
::
un‹dîed_£t
<
domaö
, 
hash
, 
keyEquÆ
, 
Æloc
>& 
ôem
,

845 
°d
::
i°ªam
& 
ö


848 
	gãm∂©e
 <
ty≥«me
 
	gdomaö
,Åy≥«mê
	gcom∑ª
,Åy≥«mê
	gÆloc
>

849 
£rülize
 (

850 c⁄° 
°d
::
mu…i£t
<
domaö
, 
com∑ª
, 
Æloc
>& 
ôem
,

851 
°d
::
o°ªam
& 
out


854 
	gãm∂©e
 <
ty≥«me
 
	gdomaö
,Åy≥«mê
	gcom∑ª
,Åy≥«mê
	gÆloc
>

855 
de£rülize
 (

856 
°d
::
mu…i£t
<
domaö
, 
com∑ª
, 
Æloc
>& 
ôem
,

857 
°d
::
i°ªam
& 
ö


860 
	gãm∂©e
 <
ty≥«me
 
	gdomaö
,Åy≥«mê
	ghash
,Åy≥«mê
	gkeyEquÆ
,Åy≥«mê
	gÆloc
>

861 
£rülize
 (

862 c⁄° 
°d
::
un‹dîed_mu…i£t
<
domaö
, 
hash
, 
keyEquÆ
, 
Æloc
>& 
ôem
,

863 
°d
::
o°ªam
& 
out


866 
	gãm∂©e
 <
ty≥«me
 
	gdomaö
,Åy≥«mê
	ghash
,Åy≥«mê
	gkeyEquÆ
,Åy≥«mê
	gÆloc
>

867 
de£rülize
 (

868 
°d
::
un‹dîed_mu…i£t
<
domaö
, 
hash
, 
keyEquÆ
, 
Æloc
>& 
ôem
,

869 
°d
::
i°ªam
& 
ö


872 
	gãm∂©e
 <
ty≥«me
 
	gT
,Åy≥«mê
	gÆloc
>

873 
£rülize
 (

874 c⁄° 
°d
::
ve˘‹
<
T
,
Æloc
>& 
ôem
,

875 
°d
::
o°ªam
& 
out


878 
	gãm∂©e
 <
ty≥«me
 
	gT
,Åy≥«mê
	gÆloc
>

879 
de£rülize
 (

880 
°d
::
ve˘‹
<
T
,
Æloc
>& 
ôem
,

881 
°d
::
i°ªam
& 
ö


884 
	gãm∂©e
 <
ty≥«me
 
	gT
,Åy≥«mê
	gÆloc
>

885 
£rülize
 (

886 c⁄° 
°d
::
li°
<
T
,
Æloc
>& 
ôem
,

887 
°d
::
o°ªam
& 
out


890 
	gãm∂©e
 <
ty≥«me
 
	gT
,Åy≥«mê
	gÆloc
>

891 
de£rülize
 (

892 
°d
::
li°
<
T
,
Æloc
>& 
ôem
,

893 
°d
::
i°ªam
& 
ö


896 
	gãm∂©e
 <
ty≥«me
 
	gT
,Åy≥«mê
	gÆloc
>

897 
£rülize
 (

898 c⁄° 
°d
::
f‹w¨d_li°
<
T
,
Æloc
>& 
ôem
,

899 
°d
::
o°ªam
& 
out


902 
	gãm∂©e
 <
ty≥«me
 
	gT
,Åy≥«mê
	gÆloc
>

903 
de£rülize
 (

904 
°d
::
f‹w¨d_li°
<
T
,
Æloc
>& 
ôem
,

905 
°d
::
i°ªam
& 
ö


908 
	gãm∂©e
 <
ty≥«me
 
	gT
,Åy≥«mê
	gÆloc
>

909 
£rülize
 (

910 c⁄° 
°d
::
deque
<
T
,
Æloc
>& 
ôem
,

911 
°d
::
o°ªam
& 
out


914 
	gãm∂©e
 <
ty≥«me
 
	gT
,Åy≥«mê
	gÆloc
>

915 
de£rülize
 (

916 
°d
::
deque
<
T
,
Æloc
>& 
ôem
,

917 
°d
::
i°ªam
& 
ö


920 
	gãm∂©e
 <
	gty≥«me
... 
	gTy≥s
>

921 
£rülize
 (

922 c⁄° 
°d
::
tu∂e
<
Ty≥s
...>& 
ôem
,

923 
°d
::
o°ªam
& 
out


926 
	gãm∂©e
 <
	gty≥«me
... 
	gTy≥s
>

927 
de£rülize
 (

928 
°d
::
tu∂e
<
Ty≥s
...>& 
ôem
,

929 
°d
::
i°ªam
& 
ö


932 
	gãm∂©e
 <
ty≥«me
 
	gT
,Åy≥«mê
	gdñëî
>

933 
£rülize
 (

934 c⁄° 
°d
::
unique_±r
<
T
, 
dñëî
>& 
ôem
,

935 
°d
::
o°ªam
& 
out


938 
	gãm∂©e
 <
ty≥«me
 
	gT
,Åy≥«mê
	gdñëî
>

939 
de£rülize
 (

940 
°d
::
unique_±r
<
T
, 
dñëî
>& 
ôem
,

941 
°d
::
i°ªam
& 
ö


944 
	gãm∂©e
 <
ty≥«me
 
	gT
>

945 
£rülize
 (

946 c⁄° 
°d
::
sh¨ed_±r
<
T
>& 
ôem
,

947 
°d
::
o°ªam
& 
out


950 
	gãm∂©e
 <
ty≥«me
 
	gT
>

951 
de£rülize
 (

952 
°d
::
sh¨ed_±r
<
T
>& 
ôem
,

953 
°d
::
i°ªam
& 
ö


956 
ölöe
 
£rülize
 (

957 c⁄° 
°d
::
°rög
& 
ôem
,

958 
°d
::
o°ªam
& 
out


961 
ölöe
 
de£rülize
 (

962 
°d
::
°rög
& 
ôem
,

963 
°d
::
i°ªam
& 
ö


966 
ölöe
 
£rülize
 (

967 c⁄° 
°d
::
w°rög
& 
ôem
,

968 
°d
::
o°ªam
& 
out


971 
ölöe
 
de£rülize
 (

972 
°d
::
w°rög
& 
ôem
,

973 
°d
::
i°ªam
& 
ö


976 
ölöe
 
£rülize
 (

977 c⁄° 
u°rög
& 
ôem
,

978 
°d
::
o°ªam
& 
out


981 
ölöe
 
de£rülize
 (

982 
u°rög
& 
ôem
,

983 
°d
::
i°ªam
& 
ö


986 
	gãm∂©e
 <

987 
ty≥«me
 
	gT


989 
ölöe
 
£rülize
 (

990 c⁄° 
íumîabÀ
<
T
>& 
ôem
,

991 
°d
::
o°ªam
& 
out


994 
	gãm∂©e
 <

995 
ty≥«me
 
	gdomaö
,

996 
ty≥«me
 
	gønge


998 
ölöe
 
£rülize
 (

999 c⁄° 
m≠_∑ú
<
domaö
,
ønge
>& 
ôem
,

1000 
°d
::
o°ªam
& 
out


1003 
	gãm∂©e
 <

1004 
ty≥«me
 
	gT
,

1005 
size_t
 
	gÀngth


1007 
ölöe
 
£rülize
 (

1008 c⁄° 
T
 (&
¨øy
)[
Àngth
],

1009 
°d
::
o°ªam
& 
out


1012 
	gãm∂©e
 <

1013 
ty≥«me
 
	gT
,

1014 
size_t
 
	gÀngth


1016 
ölöe
 
de£rülize
 (

1017 
T
 (&
¨øy
)[
Àngth
],

1018 
°d
::
i°ªam
& 
ö


1026 
ölöe
 
	$£rülize
 (

1027 
boﬁ
 
ôem
,

1028 
°d
::
o°ªam
& 
out


1031 i‡(
ôem
)

1032 
out
 << '1';

1034 
out
 << '0';

1036 i‡(!
out
)

1037 
throw
 
	`£rüliz©i⁄_îr‹
("Error serializing object ofÅype bool");

1038 
	}
}

1040 
ölöe
 
	$de£rülize
 (

1041 
boﬁ
& 
ôem
,

1042 
°d
::
i°ªam
& 
ö


1045 
ch
 = 
ö
.
	`gë
();

1046 i‡(
ch
 !
EOF
)

1048 i‡(
ch
 == '1')

1049 
ôem
 = 
åue
;

1050 i‡(
ch
 == '0')

1051 
ôem
 = 
Ál£
;

1053 
throw
 
	`£rüliz©i⁄_îr‹
("Error deserializing object ofÅype bool");

1057 
throw
 
	`£rüliz©i⁄_îr‹
("Error deserializing object ofÅype bool");

1059 
	}
}

1063 
	gãm∂©e
 <
ty≥«me
 
	gfú°_ty≥
,Åy≥«mê
	g£c⁄d_ty≥
>

1064 
£rülize
 (

1065 c⁄° 
°d
::
∑ú
<
fú°_ty≥
, 
£c⁄d_ty≥
>& 
ôem
,

1066 
°d
::
o°ªam
& 
out


1069 
åy


1071 
£rülize
(
ôem
.
fú°
,
out
);

1072 
£rülize
(
ôem
.
£c⁄d
,
out
);

1074 
ˇtch
 (
£rüliz©i⁄_îr‹
& 
e
)

1075 { 
throw
 
£rüliz©i⁄_îr‹
(
e
.
öfo
 + "\n while serializing object ofÅype std::pair"); }

1078 
	gãm∂©e
 <
ty≥«me
 
	gfú°_ty≥
,Åy≥«mê
	g£c⁄d_ty≥
>

1079 
de£rülize
 (

1080 
°d
::
∑ú
<
fú°_ty≥
, 
£c⁄d_ty≥
>& 
ôem
,

1081 
°d
::
i°ªam
& 
ö


1084 
åy


1086 
de£rülize
(
ôem
.
fú°
,
ö
);

1087 
de£rülize
(
ôem
.
£c⁄d
,
ö
);

1089 
ˇtch
 (
£rüliz©i⁄_îr‹
& 
e
)

1090 { 
throw
 
£rüliz©i⁄_îr‹
(
e
.
öfo
 + "\n while deserializing object ofÅype std::pair"); }

1095 
	gãm∂©e
<
	g°d
::
size_t
 
I
 = 0, 
ty≥«me
 
	gFuncT
, 
	gty≥«me
... 
	gTp
>

1096 
ölöe
 
ty≥«me
 
	g°d
::
íabÀ_if
<
I
 =...(
Tp
), >::
ty≥


1097 
f‹_óch_ö_tu∂e
(
°d
::
tu∂e
<
Tp
...>&, 
FuncT
)

1100 
	gãm∂©e
<
	g°d
::
size_t
 
I
 = 0, 
ty≥«me
 
	gFuncT
, 
	gty≥«me
... 
	gTp
>

1101 
ölöe
 
ty≥«me
 
	g°d
::
íabÀ_if
<
I
 < ...(
Tp
), >::
ty≥


1102 
f‹_óch_ö_tu∂e
(
°d
::
tu∂e
<
Tp
...>& 
t
, 
FuncT
 
f
)

1104 
f
(
°d
::
gë
<
I
>(
t
));

1105 
	gf‹_óch_ö_tu∂e
<
	gI
 + 1, 
	gFuncT
, 
	gTp
...>(
	gt
, 
	gf
);

1108 
	gãm∂©e
<
	g°d
::
size_t
 
I
 = 0, 
ty≥«me
 
	gFuncT
, 
	gty≥«me
... 
	gTp
>

1109 
ölöe
 
ty≥«me
 
	g°d
::
íabÀ_if
<
I
 =...(
Tp
), >::
ty≥


1110 
f‹_óch_ö_tu∂e
(c⁄° 
°d
::
tu∂e
<
Tp
...>&, 
FuncT
)

1113 
	gãm∂©e
<
	g°d
::
size_t
 
I
 = 0, 
ty≥«me
 
	gFuncT
, 
	gty≥«me
... 
	gTp
>

1114 
ölöe
 
ty≥«me
 
	g°d
::
íabÀ_if
<
I
 < ...(
Tp
), >::
ty≥


1115 
f‹_óch_ö_tu∂e
(c⁄° 
°d
::
tu∂e
<
Tp
...>& 
t
, 
FuncT
 
f
)

1117 
f
(
°d
::
gë
<
I
>(
t
));

1118 
	gf‹_óch_ö_tu∂e
<
	gI
 + 1, 
	gFuncT
, 
	gTp
...>(
	gt
, 
	gf
);

1121 
	s£rülize_tu∂e_hñ≥r


1123 
£rülize_tu∂e_hñ≥r
(
°d
::
o°ªam
& 
out_
Ë: 
out
(out_) {}

1125 
ãm∂©e
<
ty≥«me
 
T
>

1126 
›î©‹
()(c⁄° 
T
& 
ôem
)

1128 
£rülize
(
ôem
, 
out
);

1131 
	g°d
::
o°ªam
& 
out
;

1134 
	sde£rülize_tu∂e_hñ≥r


1136 
de£rülize_tu∂e_hñ≥r
(
°d
::
i°ªam
& 
ö_
Ë: 
ö
(in_) {}

1138 
ãm∂©e
<
ty≥«me
 
T
>

1139 
›î©‹
()(
T
& 
ôem
)

1141 
de£rülize
(
ôem
, 
ö
);

1144 
	g°d
::
i°ªam
& 
ö
;

1147 
	gãm∂©e
 <
	gty≥«me
... 
	gTy≥s
>

1148 
£rülize
 (

1149 c⁄° 
°d
::
tu∂e
<
Ty≥s
...>& 
ôem
,

1150 
°d
::
o°ªam
& 
out


1153 
åy


1155 
f‹_óch_ö_tu∂e
(
ôem
, 
£rülize_tu∂e_hñ≥r
(
out
));

1157 
ˇtch
 (
£rüliz©i⁄_îr‹
& 
e
)

1158 { 
throw
 
£rüliz©i⁄_îr‹
(
e
.
öfo
 + "\n while serializing object ofÅype std::tuple"); }

1161 
	gãm∂©e
 <
	gty≥«me
... 
	gTy≥s
>

1162 
de£rülize
 (

1163 
°d
::
tu∂e
<
Ty≥s
...>& 
ôem
,

1164 
°d
::
i°ªam
& 
ö


1167 
åy


1169 
f‹_óch_ö_tu∂e
(
ôem
, 
de£rülize_tu∂e_hñ≥r
(
ö
));

1171 
ˇtch
 (
£rüliz©i⁄_îr‹
& 
e
)

1172 { 
throw
 
£rüliz©i⁄_îr‹
(
e
.
öfo
 + "\n while deserializing object ofÅype std::tuple"); }

1177 
	gãm∂©e
 <
ty≥«me
 
	gdomaö
,Åy≥«mê
	gønge
,Åy≥«mê
	gcom∑ª
,Åy≥«mê
	gÆloc
>

1178 
£rülize
 (

1179 c⁄° 
°d
::
m≠
<
domaö
,
ønge
, 
com∑ª
, 
Æloc
>& 
ôem
,

1180 
°d
::
o°ªam
& 
out


1183 
åy


1185 c⁄° 
size
 = 
°©ic_ˇ°
<>(
ôem
.size());

1187 
£rülize
(
size
,
out
);

1188 
ty≥«me
 
	g°d
::
m≠
<
domaö
,
	gønge
,
	gcom∑ª
,
	gÆloc
>::
c⁄°_ôî©‹
 
i
;

1189 
	gi
 = 
ôem
.
begö
(); i !ôem.
íd
(); ++i)

1191 
£rülize
(
i
->
fú°
,
out
);

1192 
£rülize
(
i
->
£c⁄d
,
out
);

1196 
ˇtch
 (
£rüliz©i⁄_îr‹
& 
e
)

1197 { 
throw
 
£rüliz©i⁄_îr‹
(
e
.
öfo
 + "\n while serializing object ofÅype std::map"); }

1200 
	gãm∂©e
 <
ty≥«me
 
	gdomaö
,Åy≥«mê
	gønge
,Åy≥«mê
	gcom∑ª
,Åy≥«mê
	gÆloc
>

1201 
de£rülize
 (

1202 
°d
::
m≠
<
domaö
, 
ønge
, 
com∑ª
, 
Æloc
>& 
ôem
,

1203 
°d
::
i°ªam
& 
ö


1206 
åy


1208 
ôem
.
˛ór
();

1210 
	gsize
;

1211 
de£rülize
(
size
,
ö
);

1212 
domaö
 
	gd
;

1213 
ønge
 
	gr
;

1214 
	gi
 = 0; i < 
	gsize
; ++i)

1216 
de£rülize
(
d
,
ö
);

1217 
de£rülize
(
r
,
ö
);

1218 
	gôem
[
d
] = 
r
;

1221 
ˇtch
 (
£rüliz©i⁄_îr‹
& 
e
)

1222 { 
throw
 
£rüliz©i⁄_îr‹
(
e
.
öfo
 + "\n while deserializing object ofÅype std::map"); }

1227 
	gãm∂©e
 <
ty≥«me
 
	gdomaö
,Åy≥«mê
	gønge
,Åy≥«mê
	ghash
,Åy≥«mê
	gkeyEquÆ
,Åy≥«mê
	gÆloc
>

1228 
£rülize
 (

1229 c⁄° 
°d
::
un‹dîed_m≠
<
domaö
, 
ønge
, 
hash
, 
keyEquÆ
, 
Æloc
>& 
ôem
,

1230 
°d
::
o°ªam
& 
out


1233 
åy


1235 
£rülize
(
ôem
.
size
(),
out
);

1236 c⁄°áuto& 
	gx
 : 
ôem
)

1238 
£rülize
(
x
.
fú°
,
out
);

1239 
£rülize
(
x
.
£c⁄d
,
out
);

1242 
ˇtch
 (
£rüliz©i⁄_îr‹
& 
e
)

1243 { 
throw
 
£rüliz©i⁄_îr‹
(
e
.
öfo
 + "\n while serializing object ofÅype std::unordered_map"); }

1246 
	gãm∂©e
 <
ty≥«me
 
	gdomaö
,Åy≥«mê
	gønge
,Åy≥«mê
	ghash
,Åy≥«mê
	gkeyEquÆ
,Åy≥«mê
	gÆloc
>

1247 
de£rülize
 (

1248 
°d
::
un‹dîed_m≠
<
domaö
, 
ønge
, 
hash
, 
keyEquÆ
, 
Æloc
>& 
ôem
,

1249 
°d
::
i°ªam
& 
ö


1252 
åy


1254 
ôem
.
˛ór
();

1255 
	g°d
::
size_t
 
size
;

1256 
de£rülize
(
size
,
ö
);

1257 
domaö
 
	gd
;

1258 
ønge
 
	gr
;

1259 
	gi
 = 0; i < 
	gsize
; ++i)

1261 
de£rülize
(
d
,
ö
);

1262 
de£rülize
(
r
,
ö
);

1263 
	gôem
[
d
] = 
r
;

1266 
ˇtch
 (
£rüliz©i⁄_îr‹
& 
e
)

1267 { 
throw
 
£rüliz©i⁄_îr‹
(
e
.
öfo
 + "\n while deserializing object ofÅype std::unordered_map"); }

1272 
	gãm∂©e
 <
ty≥«me
 
	gdomaö
,Åy≥«mê
	gønge
,Åy≥«mê
	gcom∑ª
,Åy≥«mê
	gÆloc
>

1273 
£rülize
 (

1274 c⁄° 
°d
::
mu…im≠
<
domaö
,
ønge
, 
com∑ª
, 
Æloc
>& 
ôem
,

1275 
°d
::
o°ªam
& 
out


1278 
åy


1280 
£rülize
(
ôem
.
size
(),
out
);

1281 c⁄°áuto& 
	gx
 : 
ôem
)

1283 
£rülize
(
x
.
fú°
,
out
);

1284 
£rülize
(
x
.
£c⁄d
,
out
);

1287 
ˇtch
 (
£rüliz©i⁄_îr‹
& 
e
)

1288 { 
throw
 
£rüliz©i⁄_îr‹
(
e
.
öfo
 + "\n while serializing object ofÅype std::multimap"); }

1291 
	gãm∂©e
 <
ty≥«me
 
	gdomaö
,Åy≥«mê
	gønge
,Åy≥«mê
	gcom∑ª
,Åy≥«mê
	gÆloc
>

1292 
de£rülize
 (

1293 
°d
::
mu…im≠
<
domaö
, 
ønge
, 
com∑ª
, 
Æloc
>& 
ôem
,

1294 
°d
::
i°ªam
& 
ö


1297 
åy


1299 
ôem
.
˛ór
();

1300 
	g°d
::
size_t
 
size
;

1301 
de£rülize
(
size
,
ö
);

1302 
domaö
 
	gd
;

1303 
ønge
 
	gr
;

1304 
	gi
 = 0; i < 
	gsize
; ++i)

1306 
de£rülize
(
d
,
ö
);

1307 
de£rülize
(
r
,
ö
);

1308 
	gôem
.
ö£π
({
d
,
r
});

1311 
ˇtch
 (
£rüliz©i⁄_îr‹
& 
e
)

1312 { 
throw
 
£rüliz©i⁄_îr‹
(
e
.
öfo
 + "\n while deserializing object ofÅype std::multimap"); }

1317 
	gãm∂©e
 <
ty≥«me
 
	gdomaö
,Åy≥«mê
	gønge
,Åy≥«mê
	ghash
,Åy≥«mê
	gkeyEquÆ
,Åy≥«mê
	gÆloc
>

1318 
£rülize
 (

1319 c⁄° 
°d
::
un‹dîed_mu…im≠
<
domaö
, 
ønge
, 
hash
, 
keyEquÆ
, 
Æloc
>& 
ôem
,

1320 
°d
::
o°ªam
& 
out


1323 
åy


1325 
£rülize
(
ôem
.
size
(),
out
);

1326 c⁄°áuto& 
	gx
 : 
ôem
)

1328 
£rülize
(
x
.
fú°
,
out
);

1329 
£rülize
(
x
.
£c⁄d
,
out
);

1332 
ˇtch
 (
£rüliz©i⁄_îr‹
& 
e
)

1333 { 
throw
 
£rüliz©i⁄_îr‹
(
e
.
öfo
 + "\n while serializing object ofÅype std::unordered_multimap"); }

1336 
	gãm∂©e
 <
ty≥«me
 
	gdomaö
,Åy≥«mê
	gønge
,Åy≥«mê
	ghash
,Åy≥«mê
	gkeyEquÆ
,Åy≥«mê
	gÆloc
>

1337 
de£rülize
 (

1338 
°d
::
un‹dîed_mu…im≠
<
domaö
, 
ønge
, 
hash
, 
keyEquÆ
, 
Æloc
>& 
ôem
,

1339 
°d
::
i°ªam
& 
ö


1342 
åy


1344 
ôem
.
˛ór
();

1345 
	g°d
::
size_t
 
size
;

1346 
de£rülize
(
size
,
ö
);

1347 
domaö
 
	gd
;

1348 
ønge
 
	gr
;

1349 
	gi
 = 0; i < 
	gsize
; ++i)

1351 
de£rülize
(
d
,
ö
);

1352 
de£rülize
(
r
,
ö
);

1353 
	gôem
.
ö£π
({
d
,
r
});

1356 
ˇtch
 (
£rüliz©i⁄_îr‹
& 
e
)

1357 { 
throw
 
£rüliz©i⁄_îr‹
(
e
.
öfo
 + "\n while deserializing object ofÅype std::unordered_multimap"); }

1362 
	gãm∂©e
 <
ty≥«me
 
	gdomaö
,Åy≥«mê
	gcom∑ª
,Åy≥«mê
	gÆloc
>

1363 
£rülize
 (

1364 c⁄° 
°d
::
£t
<
domaö
, 
com∑ª
, 
Æloc
>& 
ôem
,

1365 
°d
::
o°ªam
& 
out


1368 
åy


1370 c⁄° 
size
 = 
°©ic_ˇ°
<>(
ôem
.size());

1372 
£rülize
(
size
,
out
);

1373 
ty≥«me
 
	g°d
::
£t
<
domaö
,
	gcom∑ª
,
	gÆloc
>::
c⁄°_ôî©‹
 
i
;

1374 
	gi
 = 
ôem
.
begö
(); i !ôem.
íd
(); ++i)

1376 
£rülize
(*
i
,
out
);

1380 
ˇtch
 (
£rüliz©i⁄_îr‹
& 
e
)

1381 { 
throw
 
£rüliz©i⁄_îr‹
(
e
.
öfo
 + "\n while serializing object ofÅype std::set"); }

1384 
	gãm∂©e
 <
ty≥«me
 
	gdomaö
,Åy≥«mê
	gcom∑ª
,Åy≥«mê
	gÆloc
>

1385 
de£rülize
 (

1386 
°d
::
£t
<
domaö
, 
com∑ª
, 
Æloc
>& 
ôem
,

1387 
°d
::
i°ªam
& 
ö


1390 
åy


1392 
ôem
.
˛ór
();

1394 
	gsize
;

1395 
de£rülize
(
size
,
ö
);

1396 
domaö
 
	gd
;

1397 
	gi
 = 0; i < 
	gsize
; ++i)

1399 
de£rülize
(
d
,
ö
);

1400 
	gôem
.
ö£π
(
d
);

1403 
ˇtch
 (
£rüliz©i⁄_îr‹
& 
e
)

1404 { 
throw
 
£rüliz©i⁄_îr‹
(
e
.
öfo
 + "\n while deserializing object ofÅype std::set"); }

1409 
	gãm∂©e
 <
ty≥«me
 
	gdomaö
,Åy≥«mê
	ghash
,Åy≥«mê
	gkeyEquÆ
,Åy≥«mê
	gÆloc
>

1410 
£rülize
 (

1411 c⁄° 
°d
::
un‹dîed_£t
<
domaö
, 
hash
, 
keyEquÆ
, 
Æloc
>& 
ôem
,

1412 
°d
::
o°ªam
& 
out


1415 
åy


1417 
£rülize
(
ôem
.
size
(),
out
);

1418 c⁄°áuto& 
	gx
 : 
ôem
)

1419 
£rülize
(
x
,
out
);

1421 
ˇtch
 (
£rüliz©i⁄_îr‹
& 
e
)

1422 { 
throw
 
£rüliz©i⁄_îr‹
(
e
.
öfo
 + "\n while serializing object ofÅype std::unordered_set"); }

1425 
	gãm∂©e
 <
ty≥«me
 
	gdomaö
,Åy≥«mê
	ghash
,Åy≥«mê
	gkeyEquÆ
,Åy≥«mê
	gÆloc
>

1426 
de£rülize
 (

1427 
°d
::
un‹dîed_£t
<
domaö
, 
hash
, 
keyEquÆ
, 
Æloc
>& 
ôem
,

1428 
°d
::
i°ªam
& 
ö


1431 
åy


1433 
ôem
.
˛ór
();

1434 
	g°d
::
size_t
 
size
;

1435 
de£rülize
(
size
,
ö
);

1436 
domaö
 
	gd
;

1437 
	gi
 = 0; i < 
	gsize
; ++i)

1439 
de£rülize
(
d
,
ö
);

1440 
	gôem
.
ö£π
(
d
);

1443 
ˇtch
 (
£rüliz©i⁄_îr‹
& 
e
)

1444 { 
throw
 
£rüliz©i⁄_îr‹
(
e
.
öfo
 + "\n while deserializing object ofÅype std::unordered_set"); }

1449 
	gãm∂©e
 <
ty≥«me
 
	gdomaö
,Åy≥«mê
	gcom∑ª
,Åy≥«mê
	gÆloc
>

1450 
£rülize
 (

1451 c⁄° 
°d
::
mu…i£t
<
domaö
, 
com∑ª
, 
Æloc
>& 
ôem
,

1452 
°d
::
o°ªam
& 
out


1455 
åy


1457 
£rülize
(
ôem
.
size
(),
out
);

1458 c⁄°áuto& 
	gx
 : 
ôem
)

1459 
£rülize
(
x
,
out
);

1461 
ˇtch
 (
£rüliz©i⁄_îr‹
& 
e
)

1462 { 
throw
 
£rüliz©i⁄_îr‹
(
e
.
öfo
 + "\n while serializing object ofÅype std::multiset"); }

1465 
	gãm∂©e
 <
ty≥«me
 
	gdomaö
,Åy≥«mê
	gcom∑ª
,Åy≥«mê
	gÆloc
>

1466 
de£rülize
 (

1467 
°d
::
mu…i£t
<
domaö
, 
com∑ª
, 
Æloc
>& 
ôem
,

1468 
°d
::
i°ªam
& 
ö


1471 
åy


1473 
ôem
.
˛ór
();

1474 
	g°d
::
size_t
 
size
;

1475 
de£rülize
(
size
,
ö
);

1476 
domaö
 
	gd
;

1477 
	gi
 = 0; i < 
	gsize
; ++i)

1479 
de£rülize
(
d
,
ö
);

1480 
	gôem
.
ö£π
(
d
);

1483 
ˇtch
 (
£rüliz©i⁄_îr‹
& 
e
)

1484 { 
throw
 
£rüliz©i⁄_îr‹
(
e
.
öfo
 + "\n while deserializing object ofÅype std::multiset"); }

1489 
	gãm∂©e
 <
ty≥«me
 
	gdomaö
,Åy≥«mê
	ghash
,Åy≥«mê
	gkeyEquÆ
,Åy≥«mê
	gÆloc
>

1490 
£rülize
 (

1491 c⁄° 
°d
::
un‹dîed_mu…i£t
<
domaö
, 
hash
, 
keyEquÆ
, 
Æloc
>& 
ôem
,

1492 
°d
::
o°ªam
& 
out


1495 
åy


1497 
£rülize
(
ôem
.
size
(),
out
);

1498 c⁄°áuto& 
	gx
 : 
ôem
)

1499 
£rülize
(
x
,
out
);

1501 
ˇtch
 (
£rüliz©i⁄_îr‹
& 
e
)

1502 { 
throw
 
£rüliz©i⁄_îr‹
(
e
.
öfo
 + "\n while serializing object ofÅype std::unordered_multiset"); }

1505 
	gãm∂©e
 <
ty≥«me
 
	gdomaö
,Åy≥«mê
	ghash
,Åy≥«mê
	gkeyEquÆ
,Åy≥«mê
	gÆloc
>

1506 
de£rülize
 (

1507 
°d
::
un‹dîed_mu…i£t
<
domaö
, 
hash
, 
keyEquÆ
, 
Æloc
>& 
ôem
,

1508 
°d
::
i°ªam
& 
ö


1511 
åy


1513 
ôem
.
˛ór
();

1514 
	g°d
::
size_t
 
size
;

1515 
de£rülize
(
size
,
ö
);

1516 
domaö
 
	gd
;

1517 
	gi
 = 0; i < 
	gsize
; ++i)

1519 
de£rülize
(
d
,
ö
);

1520 
	gôem
.
ö£π
(
d
);

1523 
ˇtch
 (
£rüliz©i⁄_îr‹
& 
e
)

1524 { 
throw
 
£rüliz©i⁄_îr‹
(
e
.
öfo
 + "\n while deserializing object ofÅype std::unordered_multiset"); }

1529 
	gãm∂©e
 <
ty≥«me
 
	gÆloc
>

1530 
£rülize
 (

1531 c⁄° 
°d
::
ve˘‹
<
boﬁ
,
Æloc
>& 
ôem
,

1532 
°d
::
o°ªam
& 
out


1535 
°d
::
ve˘‹
<> 
ãmp
(
ôem
.
size
());

1536 
	gi
 = 0; i < 
	gôem
.
size
(); ++i)

1538 i‡(
	gôem
[
i
])

1539 
	gãmp
[
i
] = '1';

1541 
	gãmp
[
i
] = '0';

1543 
£rülize
(
ãmp
, 
out
);

1546 
	gãm∂©e
 <
ty≥«me
 
	gÆloc
>

1547 
de£rülize
 (

1548 
°d
::
ve˘‹
<
boﬁ
,
Æloc
>& 
ôem
,

1549 
°d
::
i°ªam
& 
ö


1552 
°d
::
ve˘‹
<> 
ãmp
;

1553 
de£rülize
(
ãmp
, 
ö
);

1554 
	gôem
.
ªsize
(
ãmp
.
size
());

1555 
	gi
 = 0; i < 
	gãmp
.
size
(); ++i)

1557 i‡(
	gãmp
[
i
] == '1')

1558 
ôem
[
i
] = 
åue
;

1560 
	gôem
[
i
] = 
Ál£
;

1566 
	gãm∂©e
 <
ty≥«me
 
	gT
,Åy≥«mê
	gÆloc
>

1567 
£rülize
 (

1568 c⁄° 
°d
::
ve˘‹
<
T
,
Æloc
>& 
ôem
,

1569 
°d
::
o°ªam
& 
out


1572 
åy


1574 c⁄° 
size
 = 
°©ic_ˇ°
<>(
ôem
.size());

1576 
£rülize
(
size
,
out
);

1577 
	gi
 = 0; i < 
	gôem
.
size
(); ++i)

1578 
£rülize
(
ôem
[
i
],
out
);

1580 
ˇtch
 (
£rüliz©i⁄_îr‹
& 
e
)

1581 { 
throw
 
£rüliz©i⁄_îr‹
(
e
.
öfo
 + "\n while serializing object ofÅype std::vector"); }

1584 
	gãm∂©e
 <
ty≥«me
 
	gT
,Åy≥«mê
	gÆloc
>

1585 
de£rülize
 (

1586 
°d
::
ve˘‹
<
T
, 
Æloc
>& 
ôem
,

1587 
°d
::
i°ªam
& 
ö


1590 
åy


1592 
size
;

1593 
de£rülize
(
size
,
ö
);

1594 
	gôem
.
ªsize
(
size
);

1595 
	gi
 = 0; i < 
	gsize
; ++i)

1596 
de£rülize
(
ôem
[
i
],
ö
);

1598 
ˇtch
 (
£rüliz©i⁄_îr‹
& 
e
)

1599 { 
throw
 
£rüliz©i⁄_îr‹
(
e
.
öfo
 + "\n while deserializing object ofÅype std::vector"); }

1604 
	gãm∂©e
 <
ty≥«me
 
	gÆloc
>

1605 
£rülize
 (

1606 c⁄° 
°d
::
ve˘‹
<,
Æloc
>& 
ôem
,

1607 
°d
::
o°ªam
& 
out


1610 
åy


1612 c⁄° 
size
 = 
°©ic_ˇ°
<>(
ôem
.size());

1613 
£rülize
(
size
,
out
);

1614 i‡(
	gôem
.
size
() != 0)

1615 
out
.
wrôe
(&
ôem
[0], iãm.
size
());

1617 
ˇtch
 (
£rüliz©i⁄_îr‹
& 
e
)

1618 { 
throw
 
£rüliz©i⁄_îr‹
(
e
.
öfo
 + "\n while serializing object ofÅype std::vector"); }

1621 
	gãm∂©e
 <
ty≥«me
 
	gÆloc
>

1622 
de£rülize
 (

1623 
°d
::
ve˘‹
<, 
Æloc
>& 
ôem
,

1624 
°d
::
i°ªam
& 
ö


1627 
åy


1629 
size
;

1630 
de£rülize
(
size
,
ö
);

1631 
	gôem
.
ªsize
(
size
);

1632 i‡(
	gôem
.
size
() != 0)

1633 
ö
.
ªad
(&
ôem
[0], iãm.
size
());

1635 
ˇtch
 (
£rüliz©i⁄_îr‹
& 
e
)

1636 { 
throw
 
£rüliz©i⁄_îr‹
(
e
.
öfo
 + "\n while deserializing object ofÅype std::vector"); }

1641 
	gãm∂©e
 <
ty≥«me
 
	gÆloc
>

1642 
£rülize
 (

1643 c⁄° 
°d
::
ve˘‹
<,
Æloc
>& 
ôem
,

1644 
°d
::
o°ªam
& 
out


1647 
åy


1649 c⁄° 
size
 = 
°©ic_ˇ°
<>(
ôem
.size());

1650 
£rülize
(
size
,
out
);

1651 i‡(
	gôem
.
size
() != 0)

1652 
out
.
wrôe
((*)&
ôem
[0], iãm.
size
());

1654 
ˇtch
 (
£rüliz©i⁄_îr‹
& 
e
)

1655 { 
throw
 
£rüliz©i⁄_îr‹
(
e
.
öfo
 + "\n while serializing object ofÅype std::vector"); }

1658 
	gãm∂©e
 <
ty≥«me
 
	gÆloc
>

1659 
de£rülize
 (

1660 
°d
::
ve˘‹
<, 
Æloc
>& 
ôem
,

1661 
°d
::
i°ªam
& 
ö


1664 
åy


1666 
size
;

1667 
de£rülize
(
size
,
ö
);

1668 
	gôem
.
ªsize
(
size
);

1669 i‡(
	gôem
.
size
() != 0)

1670 
ö
.
ªad
((*)&
ôem
[0], iãm.
size
());

1672 
ˇtch
 (
£rüliz©i⁄_îr‹
& 
e
)

1673 { 
throw
 
£rüliz©i⁄_îr‹
(
e
.
öfo
 + "\n while deserializing object ofÅype std::vector"); }

1678 
	gãm∂©e
 <
ty≥«me
 
	gT
,Åy≥«mê
	gÆloc
>

1679 
£rülize
 (

1680 c⁄° 
°d
::
li°
<
T
,
Æloc
>& 
ôem
,

1681 
°d
::
o°ªam
& 
out


1684 
åy


1686 c⁄° 
size
 = 
°©ic_ˇ°
<>(
ôem
.size());

1687 
£rülize
(
size
,
out
);

1688 c⁄°áuto& 
	gx
 : 
ôem
)

1689 
£rülize
(
x
, 
out
);

1691 
ˇtch
 (
£rüliz©i⁄_îr‹
& 
e
)

1692 { 
throw
 
£rüliz©i⁄_îr‹
(
e
.
öfo
 + "\n while serializing object ofÅype std::list"); }

1695 
	gãm∂©e
 <
ty≥«me
 
	gT
,Åy≥«mê
	gÆloc
>

1696 
de£rülize
 (

1697 
°d
::
li°
<
T
,
Æloc
>& 
ôem
,

1698 
°d
::
i°ªam
& 
ö


1701 
åy


1703 
size
;

1704 
de£rülize
(
size
, 
ö
);

1705 
	gôem
.
ªsize
(
size
);

1706 auto& 
	gx
 : 
ôem
)

1707 
de£rülize
(
x
, 
ö
);

1709 
ˇtch
 (
£rüliz©i⁄_îr‹
& 
e
)

1710 { 
throw
 
£rüliz©i⁄_îr‹
(
e
.
öfo
 + "\n while deserializing object ofÅype std::list"); }

1715 
	gãm∂©e
 <
ty≥«me
 
	gT
,Åy≥«mê
	gÆloc
>

1716 
£rülize
 (

1717 c⁄° 
°d
::
f‹w¨d_li°
<
T
,
Æloc
>& 
ôem
,

1718 
°d
::
o°ªam
& 
out


1721 
åy


1723 c⁄° 
size
 = 
°d
::
di°™˚
(
ôem
.
begö
(), iãm.
íd
());

1724 
£rülize
(
size
,
out
);

1725 c⁄°áuto& 
	gx
 : 
ôem
)

1726 
£rülize
(
x
, 
out
);

1728 
ˇtch
 (
£rüliz©i⁄_îr‹
& 
e
)

1729 { 
throw
 
£rüliz©i⁄_îr‹
(
e
.
öfo
 + "\n while serializing object ofÅype std::forward_list"); }

1732 
	gãm∂©e
 <
ty≥«me
 
	gT
,Åy≥«mê
	gÆloc
>

1733 
de£rülize
 (

1734 
°d
::
f‹w¨d_li°
<
T
,
Æloc
>& 
ôem
,

1735 
°d
::
i°ªam
& 
ö


1738 
åy


1740 
size
;

1741 
de£rülize
(
size
,
ö
);

1742 
	gôem
.
ªsize
(
size
);

1743 auto& 
	gx
 : 
ôem
)

1744 
de£rülize
(
x
,
ö
);

1746 
ˇtch
 (
£rüliz©i⁄_îr‹
& 
e
)

1747 { 
throw
 
£rüliz©i⁄_îr‹
(
e
.
öfo
 + "\n while deserializing object ofÅype std::forward_list"); }

1752 
	gãm∂©e
 <
ty≥«me
 
	gT
,Åy≥«mê
	gÆloc
>

1753 
£rülize
 (

1754 c⁄° 
°d
::
deque
<
T
,
Æloc
>& 
ôem
,

1755 
°d
::
o°ªam
& 
out


1758 
åy


1760 c⁄° 
size
 = 
°©ic_ˇ°
<>(
ôem
.size());

1762 
£rülize
(
size
,
out
);

1763 
	gi
 = 0; i < 
	gôem
.
size
(); ++i)

1764 
£rülize
(
ôem
[
i
],
out
);

1766 
ˇtch
 (
£rüliz©i⁄_îr‹
& 
e
)

1767 { 
throw
 
£rüliz©i⁄_îr‹
(
e
.
öfo
 + "\n while serializing object ofÅype std::deque"); }

1770 
	gãm∂©e
 <
ty≥«me
 
	gT
,Åy≥«mê
	gÆloc
>

1771 
de£rülize
 (

1772 
°d
::
deque
<
T
, 
Æloc
>& 
ôem
,

1773 
°d
::
i°ªam
& 
ö


1776 
åy


1778 
size
;

1779 
de£rülize
(
size
,
ö
);

1780 
	gôem
.
ªsize
(
size
);

1781 
	gi
 = 0; i < 
	gsize
; ++i)

1782 
de£rülize
(
ôem
[
i
],
ö
);

1784 
ˇtch
 (
£rüliz©i⁄_îr‹
& 
e
)

1785 { 
throw
 
£rüliz©i⁄_îr‹
(
e
.
öfo
 + "\n while deserializing object ofÅype std::deque"); }

1790 
ölöe
 
	$£rülize
 (

1791 c⁄° 
°d
::
°rög
& 
ôem
,

1792 
°d
::
o°ªam
& 
out


1795 c⁄° 
size
 = 
°©ic_ˇ°
<>(
ôem
.
	`size
());

1796 
åy
{ 
	`£rülize
(
size
,
out
); }

1797 
	`ˇtch
 (
£rüliz©i⁄_îr‹
& 
e
)

1798 { 
throw
 
	`£rüliz©i⁄_îr‹
(
e
.
öfo
 + "\n while serializing object ofÅype std::string"); }

1800 
out
.
	`wrôe
(
ôem
.
	`c_°r
(),
size
);

1801 i‡(!
out
Ë
throw
 
	`£rüliz©i⁄_îr‹
("Error serializing object ofÅype std::string");

1802 
	}
}

1804 
ölöe
 
	$de£rülize
 (

1805 
°d
::
°rög
& 
ôem
,

1806 
°d
::
i°ªam
& 
ö


1809 
size
;

1810 
åy
 { 
	`de£rülize
(
size
,
ö
); }

1811 
	`ˇtch
 (
£rüliz©i⁄_îr‹
& 
e
)

1812 { 
throw
 
	`£rüliz©i⁄_îr‹
(
e
.
öfo
 + "\n while deserializing object ofÅype std::string"); }

1814 
ôem
.
	`ªsize
(
size
);

1815 i‡(
size
 != 0)

1817 
ö
.
	`ªad
(&
ôem
[0],
size
);

1818 i‡(!
ö
Ë
throw
 
	`£rüliz©i⁄_îr‹
("Error deserializing object ofÅype std::string");

1820 
	}
}

1824 
ölöe
 
	$£rülize
 (

1825 c⁄° 
°d
::
w°rög
& 
ôem
,

1826 
°d
::
o°ªam
& 
out


1829 c⁄° 
size
 = 
°©ic_ˇ°
<>(
ôem
.
	`size
());

1830 
åy
{ 
	`£rülize
(
size
,
out
); }

1831 
	`ˇtch
 (
£rüliz©i⁄_îr‹
& 
e
)

1832 { 
throw
 
	`£rüliz©i⁄_îr‹
(
e
.
öfo
 + "\n while serializing object ofÅype std::wstring"); }

1834 
i
 = 0; i < 
ôem
.
	`size
(); ++i)

1835 
	`£rülize
(
ôem
[
i
], 
out
);

1836 i‡(!
out
Ë
throw
 
	`£rüliz©i⁄_îr‹
("Error serializing object ofÅype std::wstring");

1837 
	}
}

1839 
ölöe
 
	$de£rülize
 (

1840 
°d
::
w°rög
& 
ôem
,

1841 
°d
::
i°ªam
& 
ö


1844 
size
;

1845 
åy
 { 
	`de£rülize
(
size
,
ö
); }

1846 
	`ˇtch
 (
£rüliz©i⁄_îr‹
& 
e
)

1847 { 
throw
 
	`£rüliz©i⁄_îr‹
(
e
.
öfo
 + "\n while deserializing object ofÅype std::wstring"); }

1849 
ôem
.
	`ªsize
(
size
);

1850 
i
 = 0; i < 
ôem
.
	`size
(); ++i)

1851 
	`de£rülize
(
ôem
[
i
],
ö
);

1853 i‡(!
ö
Ë
throw
 
	`£rüliz©i⁄_îr‹
("Error deserializing object ofÅype std::wstring");

1854 
	}
}

1858 
ölöe
 
	$£rülize
 (

1859 c⁄° 
u°rög
& 
ôem
,

1860 
°d
::
o°ªam
& 
out


1863 c⁄° 
size
 = 
°©ic_ˇ°
<>(
ôem
.
	`size
());

1864 
åy
{ 
	`£rülize
(
size
,
out
); }

1865 
	`ˇtch
 (
£rüliz©i⁄_îr‹
& 
e
)

1866 { 
throw
 
	`£rüliz©i⁄_îr‹
(
e
.
öfo
 + "\n while serializing object ofÅype ustring"); }

1868 
i
 = 0; i < 
ôem
.
	`size
(); ++i)

1869 
	`£rülize
(
ôem
[
i
], 
out
);

1870 i‡(!
out
Ë
throw
 
	`£rüliz©i⁄_îr‹
("Error serializing object ofÅype ustring");

1871 
	}
}

1873 
ölöe
 
	$de£rülize
 (

1874 
u°rög
& 
ôem
,

1875 
°d
::
i°ªam
& 
ö


1878 
size
;

1879 
åy
 { 
	`de£rülize
(
size
,
ö
); }

1880 
	`ˇtch
 (
£rüliz©i⁄_îr‹
& 
e
)

1881 { 
throw
 
	`£rüliz©i⁄_îr‹
(
e
.
öfo
 + "\n while deserializing object ofÅype ustring"); }

1883 
ôem
.
	`ªsize
(
size
);

1884 
i
 = 0; i < 
ôem
.
	`size
(); ++i)

1885 
	`de£rülize
(
ôem
[
i
],
ö
);

1887 i‡(!
ö
Ë
throw
 
	`£rüliz©i⁄_îr‹
("Error deserializing object ofÅype ustring");

1888 
	}
}

1892 
	gãm∂©e
 <

1893 
ty≥«me
 
	gT


1895 
ölöe
 
£rülize
 (

1896 c⁄° 
íumîabÀ
<
T
>& 
ôem
,

1897 
°d
::
o°ªam
& 
out


1900 
åy


1902 
ôem
.
ª£t
();

1903 
£rülize
(
ôem
.
size
(),
out
);

1904 
	gôem
.
move_√xt
())

1905 
£rülize
(
ôem
.
ñemít
(),
out
);

1906 
	gôem
.
ª£t
();

1908 
ˇtch
 (
£rüliz©i⁄_îr‹
& 
e
)

1910 
throw
 
£rüliz©i⁄_îr‹
(
e
.
öfo
 + "\n while serializing object ofÅypeÉnumerable");

1916 
	gãm∂©e
 <

1917 
ty≥«me
 
	gdomaö
,

1918 
ty≥«me
 
	gønge


1920 
ölöe
 
£rülize
 (

1921 c⁄° 
m≠_∑ú
<
domaö
,
ønge
>& 
ôem
,

1922 
°d
::
o°ªam
& 
out


1925 
åy


1927 
£rülize
(
ôem
.
key
(),
out
);

1928 
£rülize
(
ôem
.
vÆue
(),
out
);

1930 
ˇtch
 (
£rüliz©i⁄_îr‹
& 
e
)

1932 
throw
 
£rüliz©i⁄_îr‹
(
e
.
öfo
 + "\n while serializing object ofÅype map_pair");

1938 
	gãm∂©e
 <

1939 
ty≥«me
 
	gT
,

1940 
size_t
 
	gÀngth


1942 
ölöe
 
£rülize
 (

1943 c⁄° 
T
 (&
¨øy
)[
Àngth
],

1944 
°d
::
o°ªam
& 
out


1947 
åy


1949 
£rülize
(
Àngth
,
out
);

1950 
size_t
 
	gi
 = 0; i < 
	gÀngth
; ++i)

1951 
£rülize
(
¨øy
[
i
],
out
);

1953 
ˇtch
 (
£rüliz©i⁄_îr‹
& 
e
)

1955 
throw
 
£rüliz©i⁄_îr‹
(
e
.
öfo
 + "\n while serializingá C styleárray");

1959 
	gãm∂©e
 <

1960 
size_t
 
	gÀngth


1962 
ölöe
 
£rülize
 (

1963 c⁄° (&
¨øy
)[
Àngth
],

1964 
°d
::
o°ªam
& 
out


1967 i‡(
Àngth
 !0 && 
¨øy
[length-1] == '\0')

1972 
£rülize
(
Àngth
-1, 
out
);

1973 
	gout
.
wrôe
(
¨øy
, 
Àngth
-1);

1974 i‡(!
	gout
)

1975 
throw
 
£rüliz©i⁄_îr‹
("Error serializingá C-style string");

1979 
	gåy


1981 
£rülize
(
Àngth
,
out
);

1983 
ˇtch
 (
£rüliz©i⁄_îr‹
& 
e
)

1985 
throw
 
£rüliz©i⁄_îr‹
(
e
.
öfo
 + "\n while serializingá C styleárray");

1987 i‡(
	gÀngth
 != 0)

1988 
out
.
wrôe
(
¨øy
, 
Àngth
);

1989 i‡(!
	gout
)

1990 
throw
 
£rüliz©i⁄_îr‹
("Error serializingá C-style string");

1996 
	gãm∂©e
 <

1997 
ty≥«me
 
	gT
,

1998 
size_t
 
	gÀngth


2000 
ölöe
 
de£rülize
 (

2001 
T
 (&
¨øy
)[
Àngth
],

2002 
°d
::
i°ªam
& 
ö


2005 
size_t
 
size
;

2006 
	gåy


2008 
de£rülize
(
size
,
ö
);

2009 i‡(
	gsize
 =
Àngth
)

2011 
size_t
 
i
 = 0; 
	gi
 < 
	gÀngth
; ++i)

2012 
de£rülize
(
¨øy
[
i
],
ö
);

2015 
ˇtch
 (
£rüliz©i⁄_îr‹
& 
e
)

2017 
throw
 
£rüliz©i⁄_îr‹
(
e
.
öfo
 + "\n while deserializingá C styleárray");

2020 i‡(
	gsize
 !
Àngth
)

2021 
throw
 
£rüliz©i⁄_îr‹
("Error deserializingá C styleárray,Üengths doÇot match");

2024 
	gãm∂©e
 <

2025 
size_t
 
	gÀngth


2027 
ölöe
 
de£rülize
 (

2028 (&
¨øy
)[
Àngth
],

2029 
°d
::
i°ªam
& 
ö


2032 
size_t
 
size
;

2033 
	gåy


2035 
de£rülize
(
size
,
ö
);

2037 
ˇtch
 (
£rüliz©i⁄_îr‹
& 
e
)

2039 
throw
 
£rüliz©i⁄_îr‹
(
e
.
öfo
 + "\n while deserializingá C styleárray");

2042 i‡(
	gsize
 =
Àngth
)

2044 
ö
.
ªad
(
¨øy
, 
size
);

2045 i‡(!
	gö
)

2046 
throw
 
£rüliz©i⁄_îr‹
("Error deserializingá C-styleárray");

2048 i‡(
	gsize
+1 =
Àngth
)

2052 
ö
.
ªad
(
¨øy
, 
size
);

2053 
	g¨øy
[
size
] = '\0';

2054 i‡(!
	gö
)

2055 
throw
 
£rüliz©i⁄_îr‹
("Error deserializingá C-style string");

2059 
throw
 
£rüliz©i⁄_îr‹
("Error deserializingá C styleárray,Üengths doÇot match");

2065 
	gãm∂©e
 <

2066 
ty≥«me
 
	gT
,

2067 
size_t
 
	gN


2069 
ölöe
 
£rülize
 (

2070 c⁄° 
°d
::
¨øy
<
T
,
N
>&árray,

2071 
°d
::
o°ªam
& 
out


2074 
T
 
	tc_¨øy_ty≥
[
N
];

2075 
£rülize
(*(c⁄° 
c_¨øy_ty≥
*)
¨øy
.
d©a
(), 
out
);

2078 
	gãm∂©e
 <

2079 
ty≥«me
 
	gT
,

2080 
size_t
 
	gN


2082 
ölöe
 
de£rülize
 (

2083 
°d
::
¨øy
<
T
,
N
>&árray,

2084 
°d
::
i°ªam
& 
ö


2087 
T
 
	tc_¨øy_ty≥
[
N
];

2088 
de£rülize
(*(
c_¨øy_ty≥
*)
¨øy
.
d©a
(), 
ö
);

2091 
	gãm∂©e
 <

2092 
ty≥«me
 
	gT


2094 
ölöe
 
£rülize
 (

2095 c⁄° 
°d
::
¨øy
<
T
,0>& ,

2096 
°d
::
o°ªam
& 
out


2099 
size_t
 
N
 = 0;

2100 
£rülize
(
N
, 
out
);

2103 
	gãm∂©e
 <

2104 
ty≥«me
 
	gT


2106 
ölöe
 
de£rülize
 (

2107 
°d
::
¨øy
<
T
,0>& ,

2108 
°d
::
i°ªam
& 
ö


2111 
size_t
 
N
;

2112 
de£rülize
(
N
, 
ö
);

2113 i‡(
	gN
 != 0)

2115 
°d
::
o°rög°ªam
 
sout
;

2116 
	gsout
 << "Ex≥˘ed std::¨øy o‡sizê0 buàfoundá sizêo‡" << 
	gN
;

2117 
throw
 
£rüliz©i⁄_îr‹
(
sout
.
°r
());

2123 
	gãm∂©e
 <

2124 
ty≥«me
 
	gT


2126 
ölöe
 
£rülize
 (

2127 c⁄° 
°d
::
com∂ex
<
T
>& 
ôem
,

2128 
°d
::
o°ªam
& 
out


2131 
åy


2133 
£rülize
(
ôem
.
ªÆ
(),
out
);

2134 
£rülize
(
ôem
.
imag
(),
out
);

2136 
ˇtch
 (
£rüliz©i⁄_îr‹
& 
e
)

2138 
throw
 
£rüliz©i⁄_îr‹
(
e
.
öfo
 + "\n while serializingán object ofÅype std::complex");

2144 
	gãm∂©e
 <

2145 
ty≥«me
 
	gT


2147 
ölöe
 
de£rülize
 (

2148 
°d
::
com∂ex
<
T
>& 
ôem
,

2149 
°d
::
i°ªam
& 
ö


2152 
åy


2154 
T
 
ªÆ
, 
	gimag
;

2155 
de£rülize
(
ªÆ
,
ö
);

2156 
de£rülize
(
imag
,
ö
);

2157 
	gôem
 = 
°d
::
com∂ex
<
T
>(
ªÆ
,
	gimag
);

2159 
ˇtch
 (
£rüliz©i⁄_îr‹
& 
e
)

2161 
throw
 
£rüliz©i⁄_îr‹
(
e
.
öfo
 + "\n while deserializingán object ofÅype std::complex");

2167 
	gãm∂©e
 <
ty≥«me
 
	gT
,Åy≥«mê
	gdñëî
>

2168 
£rülize
 (

2169 c⁄° 
°d
::
unique_±r
<
T
, 
dñëî
>& 
ôem
,

2170 
°d
::
o°ªam
& 
out


2173 
åy


2175 
boﬁ
 
is_n⁄_em±y
 = 
ôem
 !
nuŒ±r
;

2176 
£rülize
(
is_n⁄_em±y
, 
out
);

2177 i‡(
	gis_n⁄_em±y
)

2178 
£rülize
(*
ôem
, 
out
);

2180 
ˇtch
 (
£rüliz©i⁄_îr‹
& 
e
)

2182 
throw
 
£rüliz©i⁄_îr‹
(
e
.
öfo
 + "\n while serializingán object ofÅype std::unique_ptr");

2186 
	gãm∂©e
 <
ty≥«me
 
	gT
,Åy≥«mê
	gdñëî
>

2187 
de£rülize
 (

2188 
°d
::
unique_±r
<
T
, 
dñëî
>& 
ôem
,

2189 
°d
::
i°ªam
& 
ö


2192 
åy


2195 
boﬁ
 
is_n⁄_em±y
;

2196 
de£rülize
(
is_n⁄_em±y
, 
ö
);

2197 
	gôem
.
ª£t
(
is_n⁄_em±y
 ? 
√w
 
T
(Ë: 
nuŒ±r
);

2199 i‡(
	gis_n⁄_em±y
)

2200 
de£rülize
(*
ôem
, 
ö
);

2202 
ˇtch
 (
£rüliz©i⁄_îr‹
& 
e
)

2204 
throw
 
£rüliz©i⁄_îr‹
(
e
.
öfo
 + "\n while deserializingán object ofÅype std::unique_ptr");

2210 
	gãm∂©e
 <
ty≥«me
 
	gT
>

2211 
£rülize
 (

2212 c⁄° 
°d
::
sh¨ed_±r
<
T
>& 
ôem
,

2213 
°d
::
o°ªam
& 
out


2216 
åy


2218 
boﬁ
 
is_n⁄_em±y
 = 
ôem
 !
nuŒ±r
;

2219 
£rülize
(
is_n⁄_em±y
, 
out
);

2220 i‡(
	gis_n⁄_em±y
)

2221 
£rülize
(*
ôem
, 
out
);

2223 
ˇtch
 (
£rüliz©i⁄_îr‹
& 
e
)

2225 
throw
 
£rüliz©i⁄_îr‹
(
e
.
öfo
 + "\n while serializingán object ofÅype std::shared_ptr");

2229 
	gãm∂©e
 <
ty≥«me
 
	gT
>

2230 
de£rülize
 (

2231 
°d
::
sh¨ed_±r
<
T
>& 
ôem
,

2232 
°d
::
i°ªam
& 
ö


2235 
åy


2238 
boﬁ
 
is_n⁄_em±y
;

2239 
de£rülize
(
is_n⁄_em±y
, 
ö
);

2240 
	gôem
 = 
is_n⁄_em±y
 ? 
°d
::
make_sh¨ed
<
T
>(Ë: 
nuŒ±r
;

2242 i‡(
	gis_n⁄_em±y
)

2243 
de£rülize
(*
ôem
, 
ö
);

2245 
ˇtch
 (
£rüliz©i⁄_îr‹
& 
e
)

2247 
throw
 
£rüliz©i⁄_îr‹
(
e
.
öfo
 + "\n while deserializingán object ofÅype std::shared_ptr");

2253 ˛as†
	c¥oxy_£rülize


2255 
	gpublic
:

2256 
ex∂icô
 
¥oxy_£rülize
 (

2257 c⁄° 
°d
::
°rög
& 
fûíame


2258 Ë: 
fout_›ti⁄Æ_ownög_±r
(
√w
 
°d
::
of°ªam
(
fûíame
.
c_°r
(), std::
ios
::
bö¨y
)),

2259 
fout
(*
fout_›ti⁄Æ_ownög_±r
)

2261 i‡(!
	gfout
)

2262 
throw
 
£rüliz©i⁄_îr‹
("U«bÀÅÿ›í " + 
fûíame
 + " for writing.");

2265 
ex∂icô
 
¥oxy_£rülize
 (

2266 
°d
::
ve˘‹
<>& 
buf


2267 Ë: 
fout_›ti⁄Æ_ownög_±r
(
√w
 
ve˘‹°ªam
(
buf
)),

2268 
fout
(*
fout_›ti⁄Æ_ownög_±r
)

2272 
ex∂icô
 
¥oxy_£rülize
 (

2273 
°d
::
o°ªam
& 
ss


2274 Ë: 
fout_›ti⁄Æ_ownög_±r
(
nuŒ±r
),

2275 
fout
(
ss
)

2278 
	gãm∂©e
 <
ty≥«me
 
	gT
>

2279 
ölöe
 
	g¥oxy_£rülize
& 
	g›î©‹
<<(c⁄° 
	gT
& 
	gôem
)

2281 
£rülize
(
ôem
, 
fout
);

2282  *
	gthis
;

2285 
	g¥iv©e
:

2286 
°d
::
unique_±r
<°d::
o°ªam
> 
fout_›ti⁄Æ_ownög_±r
;

2287 
	g°d
::
o°ªam
& 
fout
;

2290 ˛as†
	c¥oxy_de£rülize


2292 
	gpublic
:

2293 
ex∂icô
 
¥oxy_de£rülize
 (

2294 c⁄° 
°d
::
°rög
& 
fûíame_


2295 Ë: 
fûíame
(
fûíame_
),

2296 
fö_›ti⁄Æ_ownög_±r
(
√w
 
°d
::
if°ªam
(
fûíame
.
c_°r
(), std::
ios
::
bö¨y
)),

2297 
fö
(*
fö_›ti⁄Æ_ownög_±r
)

2299 i‡(!
	gfö
)

2300 
throw
 
£rüliz©i⁄_îr‹
("U«bÀÅÿ›í " + 
fûíame
 + " forÑeading.");

2301 
öô
();

2304 
ex∂icô
 
¥oxy_de£rülize
 (

2305 
°d
::
ve˘‹
<>& 
buf


2306 Ë: 
fö_›ti⁄Æ_ownög_±r
(
√w
 
ve˘‹°ªam
(
buf
)),

2307 
fö
(*
fö_›ti⁄Æ_ownög_±r
)

2309 
öô
();

2312 
ex∂icô
 
¥oxy_de£rülize
 (

2313 
°d
::
i°ªam
& 
ss


2314 Ë: 
fö_›ti⁄Æ_ownög_±r
(
nuŒ±r
),

2315 
fö
(
ss
)

2317 
öô
();

2320 
	gãm∂©e
 <
ty≥«me
 
	gT
>

2321 
ölöe
 
	g¥oxy_de£rülize
& 
	g›î©‹
>>(
	gT
& 
	gôem
)

2323  
doô
(
ôem
);

2326 
	gãm∂©e
 <
ty≥«me
 
	gT
>

2327 
ölöe
 
	g¥oxy_de£rülize
& 
	g›î©‹
>>(
	gømdump_t
<
	gT
>&& 
	gôem
)

2329  
doô
(
°d
::
move
(
ôem
));

2332 
	g¥iv©e
:

2334 
öô
()

2338 
fö
.
ªad
(
fûe_hódî
,4);

2339 
	gfö
.
˛ór
();

2340 
	gfö
.
£ekg
(0);

2343 
	g¥iv©e
:

2345 
ãm∂©e
 <
ty≥«me
 
T
>

2346 
ölöe
 
¥oxy_de£rülize
& 
doô
(
T
&& 
ôem
)

2348 
åy


2350 i‡(
fö
.
≥ek
(Ë=
EOF
)

2351 
throw
 
£rüliz©i⁄_îr‹
("No more objects were inÅhe stream!");

2352 
de£rülize
(
°d
::
f‹w¨d
<
T
>(
ôem
), 
fö
);

2354 
ˇtch
 (
£rüliz©i⁄_îr‹
& 
e
)

2356 
	g°d
::
°rög
 
suffix
;

2357 i‡(
looks_like_a_com¥es£d_fûe
())

2358 
	gsuffix
 = "\n *** THIS LOOKS LIKE A COMPRESSED FILE. DID YOU FORGET TO DECOMPRESS IT? *** \n";

2360 c⁄° 
	g°d
::
°rög
 
°ªam_des¸ùti⁄
 = 
fûíame
.
em±y
() ? "stream" : "file '" + filename + "'";

2362 i‡(
	gobje˘s_ªad
 == 0)

2364 
throw
 
£rüliz©i⁄_îr‹
("AnÉrror occurred whileÅryingÅoÑeadÅhe first"

2365 " obje˘ fromÅhê" + 
°ªam_des¸ùti⁄
 + ".\nERROR: " + 
e
.
öfo
 + "\n" + 
suffix
);

2367 i‡(
	gobje˘s_ªad
 == 1)

2369 
throw
 
£rüliz©i⁄_îr‹
("AnÉrror occurred whileÅryingÅoÑeadÅhe second"

2370 " obje˘ fromÅhê" + 
°ªam_des¸ùti⁄
 + ".\nERROR: " + 
e
.
öfo
 + "\n" + 
suffix
);

2372 i‡(
	gobje˘s_ªad
 == 2)

2374 
throw
 
£rüliz©i⁄_îr‹
("AnÉrror occurred whileÅryingÅoÑeadÅheÅhird"

2375 " obje˘ fromÅhê" + 
°ªam_des¸ùti⁄
 + ".\nERROR: " + 
e
.
öfo
 + "\n" + 
suffix
);

2379 
throw
 
£rüliz©i⁄_îr‹
("AnÉrror occurred whileÅryingÅoÑeadÅhe " +

2380 
°d
::
to_°rög
(
obje˘s_ªad
+1Ë+ "th obje˘ fromÅhê" + 
°ªam_des¸ùti⁄
 + ".\nERROR: " + 
e
.
öfo
 + "\n" + 
suffix
);

2383 ++
	gobje˘s_ªad
;

2384  *
	gthis
;

2387 
	gobje˘s_ªad
 = 0;

2388 c⁄° 
	g°d
::
°rög
 
fûíame
 = "";

2389 
	g°d
::
unique_±r
<
°d
::
i°ªam
> 
fö_›ti⁄Æ_ownög_±r
;

2390 
	g°d
::
i°ªam
& 
fö
;

2399 
	gfûe_hódî
[4] = {0,0,0,0};

2401 
boﬁ
 
looks_like_a_com¥es£d_fûe
(

2404 i‡(
	gfûe_hódî
[0] ='B' && 
fûe_hódî
[1] == 'Z' && file_header[2] == 'h' &&

2405 ('0' <
fûe_hódî
[3] && file_header[3] <= '9') )

2407  
åue
;

2410  
	gÁl£
;

2414 
ölöe
 
¥oxy_£rülize
 
	$£rülize
(c⁄° 
°d
::
°rög
& 
fûíame
)

2415 {  
	`¥oxy_£rülize
(
fûíame
); 
	}
}

2416 
ölöe
 
¥oxy_£rülize
 
	$£rülize
(
°d
::
o°ªam
& 
ss
)

2417 {  
	`¥oxy_£rülize
(
ss
); 
	}
}

2418 
ölöe
 
¥oxy_£rülize
 
£rülize
(
°d
::
ve˘‹
<>& 
buf
)

2419 {  
¥oxy_£rülize
(
buf
); }

2420 
ölöe
 
¥oxy_de£rülize
 
	$de£rülize
(c⁄° 
°d
::
°rög
& 
fûíame
)

2421 {  
	`¥oxy_de£rülize
(
fûíame
); 
	}
}

2422 
ölöe
 
¥oxy_de£rülize
 
	$de£rülize
(
°d
::
i°ªam
& 
ss
)

2423 {  
	`¥oxy_de£rülize
(
ss
); 
	}
}

2424 
ölöe
 
¥oxy_de£rülize
 
de£rülize
(
°d
::
ve˘‹
<>& 
buf
)

2425 {  
¥oxy_de£rülize
(
buf
); }

2432 
«me•a˚
 
	ggoogÀ


2434 
«me•a˚
 
	g¥Ÿobuf


2436 
˛ass
 
	gMesßgeLôe
;

2440 
«me•a˚
 
	gdlib


2447 
	gãm∂©e
 <
ty≥«me
 
	gT
,Åy≥«mê
	gU
 = >

2448 
	sis_¥Ÿocﬁ_buf„r


2450 c⁄° 
boﬁ
 
vÆue
 = 
Ál£
;

2453 
	gãm∂©e
 <
ty≥«me
 
	gT
>

2454 
	gis_¥Ÿocﬁ_buf„r
 <
	gT
,
ty≥«me
 
	gíabÀ_if
<
	gis_c⁄vîtibÀ
<T*,::
googÀ
::
¥Ÿobuf
::
MesßgeLôe
*> >::
ty≥
 >

2456 c⁄° 
boﬁ
 
vÆue
 = 
åue
;

2459 
	gãm∂©e
 <
ty≥«me
 
	gT
>

2460 
ty≥«me
 
	gíabÀ_if
<
	gis_¥Ÿocﬁ_buf„r
<
	gT
> >::
ty≥
 
£rülize
(c⁄° 
T
& 
ôem
, 
°d
::
o°ªam
& 
out
)

2468 
byã_‹dîî
 
bo
;

2471 
	g°d
::
°rög
 
ãmp
;

2472 i‡(!
	gôem
.
SîülizeToSåög
(&
ãmp
))

2473 
throw
 
	gdlib
::
£rüliz©i⁄_îr‹
("Error while serializingá Google Protocol Buffer object.");

2474 i‡(
	gãmp
.
size
(Ë> 
	g°d
::
numîic_limôs
<
uöt32
>::
max
())

2475 
throw
 
dlib
::
£rüliz©i⁄_îr‹
("Error while serializingá Google Protocol Buffer object, messageÅooÜarge.");

2478 
uöt32
 
	gsize
 = 
°©ic_ˇ°
<uöt32>(
ãmp
.
size
());

2479 
	gbo
.
ho°_to_lôée
(
size
);

2480 
	gout
.
wrôe
((*)&
size
, (size));

2481 
	gout
.
wrôe
(
ãmp
.
c_°r
(),Åemp.
size
());

2484 
	gãm∂©e
 <
ty≥«me
 
	gT
>

2485 
ty≥«me
 
	gíabÀ_if
<
	gis_¥Ÿocﬁ_buf„r
<
	gT
> >::
ty≥
 
de£rülize
(
T
& 
ôem
, 
°d
::
i°ªam
& 
ö
)

2493 
byã_‹dîî
 
bo
;

2495 
uöt32
 
	gsize
 = 0;

2497 
	gö
.
ªad
((*)&
size
, (size));

2498 
	gbo
.
lôée_to_ho°
(
size
);

2499 i‡(!
	gö
 || 
	gsize
 == 0)

2500 
throw
 
dlib
::
£rüliz©i⁄_îr‹
("Error while deserializingá Google Protocol Buffer object.");

2503 
	g°d
::
°rög
 
ãmp
;

2504 
	gãmp
.
ªsize
(
size
);

2505 
	gö
.
ªad
(&
ãmp
[0], 
size
);

2508 i‡(!
	gö
 || !
	gôem
.
P¨£FromSåög
(
ãmp
))

2510 
throw
 
	gdlib
::
£rüliz©i⁄_îr‹
("Error while deserializingá Google Protocol Buffer object.");

2516 
ölöe
 
check_£rülized_vîsi⁄
(c⁄° 
°d
::
°rög
& 
ex≥˘ed_vîsi⁄
, std::
i°ªam
& 
ö
)

2518 
°d
::
°rög
 
vîsi⁄
;

2519 
de£rülize
(
vîsi⁄
, 
ö
);

2520 i‡(
	gvîsi⁄
 !
ex≥˘ed_vîsi⁄
)

2522 
throw
 
£rüliz©i⁄_îr‹
("U√x≥˘ed vîsi⁄ '"+
vîsi⁄
+

2523 "' found whûêde£rülizög obje˘. Ex≥˘ed vîsi⁄Åÿbê'"+
ex≥˘ed_vîsi⁄
+"'.");

2529 
	gãm∂©e
<
ty≥«me
 
	gT
>

2530 
ölöe
 
£rülize_the£
(
°d
::
o°ªam
& 
out
, c⁄° 
T
& 
x
)

2532 
usög
 
	gdlib
::
£rülize
;

2533 
£rülize
(
x
, 
out
);

2536 
	gãm∂©e
<
ty≥«me
 
	gT
, 
	gty≥«me
... 
	gRe°
>

2537 
ölöe
 
£rülize_the£
(
°d
::
o°ªam
& 
out
, c⁄° 
T
& 
x
, c⁄° 
Re°
& ... 
ª°
)

2539 
£rülize_the£
(
out
, 
x
);

2540 
£rülize_the£
(
out
, 
ª°
...);

2543 
	gãm∂©e
<
ty≥«me
 
	gT
>

2544 
ölöe
 
de£rülize_the£
(
°d
::
i°ªam
& 
ö
, 
T
& 
x
)

2546 
usög
 
	gdlib
::
de£rülize
;

2547 
de£rülize
(
x
, 
ö
);

2550 
	gãm∂©e
<
ty≥«me
 
	gT
, 
	gty≥«me
... 
	gRe°
>

2551 
ölöe
 
de£rülize_the£
(
°d
::
i°ªam
& 
ö
, 
T
& 
x
, 
Re°
& ... 
ª°
)

2553 
de£rülize_the£
(
ö
, 
x
);

2554 
de£rülize_the£
(
ö
, 
ª°
...);

2557 
	#DLIB_DEFINE_DEFAULT_SERIALIZATION
(
Ty≥
, ...) \

2558 
	`£rülize_to
(
°d
::
o°ªam
& 
out
) const \

2560 
usög
 
dlib
::
£rülize
; \

2561 
usög
 
dlib
::
£rülize_the£
; \

2562 
åy
 \

2568 
vîsi⁄
 = 1; \

2569 
	`£rülize
(
vîsi⁄
, 
out
); \

2570 
	`£rülize_the£
(
out
, 
__VA_ARGS__
); \

2572 
	`ˇtch
 (
dlib
::
£rüliz©i⁄_îr‹
& 
e
) \

2574 
throw
 
dlib
::
	`£rüliz©i⁄_îr‹
(
e
.
öfo
 + "\n while serializing object ofÅype " #Type); \

2578 
	`de£rülize_‰om
(
°d
::
i°ªam
& 
ö
) \

2580 
usög
 
dlib
::
de£rülize
; \

2581 
usög
 
dlib
::
de£rülize_the£
; \

2582 
åy
 \

2584 
vîsi⁄
 = 0; \

2585 
	`de£rülize
(
vîsi⁄
, 
ö
); \

2586 i‡(
vîsi⁄
 != 1) \

2587 
throw
 
dlib
::
	`£rüliz©i⁄_îr‹
("Unexpected version found while deserializing " #Type); \

2588 
	`de£rülize_the£
(
ö
, 
__VA_ARGS__
); \

2590 
	`ˇtch
 (
dlib
::
£rüliz©i⁄_îr‹
& 
e
) \

2592 
throw
 
dlib
::
	`£rüliz©i⁄_îr‹
(
e
.
öfo
 + "\n while deserializing object ofÅype " #Type); \

2595 
ölöe
 
‰õnd
 
	`£rülize
(c⁄° 
Ty≥
& 
ôem
, 
°d
::
o°ªam
& 
out
) \

2597 
ôem
.
	`£rülize_to
(
out
); \

2599 
ölöe
 
‰õnd
 
	`de£rülize
(
Ty≥
& 
ôem
, 
°d
::
i°ªam
& 
ö
) \

2601 
ôem
.
	`de£rülize_‰om
(
ö
); \

2602 }

	)

	@viper/concurrentqueue-src/benchmarks/dlib/set.h

3 #i‚de‡
DLIB_SEt_


4 
	#DLIB_SEt_


	)

6 
	~"£t/£t_kî√l_1.h
"

7 
	~"£t/£t_kî√l_c.h
"

11 
	~"bö¨y_£¨ch_åì.h
"

13 
	~"£t/£t_com∑ª_1.h
"

15 
	~"Ægs.h
"

16 
	~<fun˘i⁄Æ
>

18 
«me•a˚
 
	gdlib


21 
	gãm∂©e
 <

22 
ty≥«me
 
	gT
,

23 
ty≥«me
 
	gmem_m™agî
 = 
deÁu…_mem‹y_m™agî
,

24 
ty≥«me
 
	gcom∑ª
 = 
°d
::
Àss
<
T
>

26 ˛as†
	c£t


28 
£t
() {}

34 
ty≥«me
 
	tbö¨y_£¨ch_åì
<
	tT
,,
	tmem_m™agî
,
	tcom∑ª
>::
	tkî√l_1a


35 
	tbö¨y_£¨ch_åì_1
;

37 
ty≥«me
 
	tbö¨y_£¨ch_åì
<
	tT
,,
	tmem_m™agî
,
	tcom∑ª
>::
	tkî√l_2a


38 
	tbö¨y_£¨ch_åì_2
;

40 
	gpublic
:

45 
£t_kî√l_1
<
	tT
,
	tbö¨y_£¨ch_åì_1
,
	tmem_m™agî
>

46 
	tkî√l_1a
;

47 
	g£t_kî√l_c
<
	tkî√l_1a
>

48 
	tkî√l_1a_c
;

51 
	g£t_kî√l_1
<
	tT
,
	tbö¨y_£¨ch_åì_2
,
	tmem_m™agî
>

52 
	tkî√l_1b
;

53 
	g£t_kî√l_c
<
	tkî√l_1b
>

54 
	tkî√l_1b_c
;

60 
	g£t_com∑ª_1
<
	tkî√l_1a
>

61 
	tcom∑ª_1a
;

62 
	g£t_com∑ª_1
<
	tkî√l_1a_c
>

63 
	tcom∑ª_1a_c
;

65 
	g£t_com∑ª_1
<
	tkî√l_1b
>

66 
	tcom∑ª_1b
;

67 
	g£t_com∑ª_1
<
	tkî√l_1b_c
>

68 
	tcom∑ª_1b_c
;

	@viper/concurrentqueue-src/benchmarks/dlib/set/set_compare_1.h

3 #i‚de‡
DLIB_SET_COMPARe_1_


4 
	#DLIB_SET_COMPARe_1_


	)

6 
	~"£t_com∑ª_ab°ø˘.h
"

8 
	~"../Ægs.h
"

12 
«me•a˚
 
	gdlib


15 
	gãm∂©e
 <

16 
ty≥«me
 
	g£t_ba£


18 ˛as†
	c£t_com∑ª_1
 : 
public
 
£t_ba£


21 
public
:

23 
boﬁ
 
›î©‹
< (

24 c⁄° 
£t_com∑ª_1
& 
rhs


27 
boﬁ
 
	g›î©‹
== (

28 c⁄° 
£t_com∑ª_1
& 
rhs


34 
	gãm∂©e
 <

35 
ty≥«me
 
	g£t_ba£


37 
ölöe
 
sw≠
 (

38 
£t_com∑ª_1
<
£t_ba£
>& 
a
,

39 
£t_com∑ª_1
<
£t_ba£
>& 
b


40 Ë{ 
	ga
.
sw≠
(
b
); }

48 
	gãm∂©e
 <

49 
ty≥«me
 
	g£t_ba£


51 
boﬁ
 
	g£t_com∑ª_1
<
	g£t_ba£
>::

52 
›î©‹
< (

53 c⁄° 
£t_com∑ª_1
<
£t_ba£
>& 
rhs


56 
boﬁ
 
ªsu…
 = 
Ál£
;

57 i‡(
	g£t_ba£
::
size
(Ë< 
rhs
.size())

58 
ªsu…
 = 
åue
;

60 i‡(
	g£t_ba£
::
size
(Ë=
rhs
.size())

62 
rhs
.
ª£t
();

63 
	g£t_ba£
::
ª£t
();

64 
	grhs
.
move_√xt
())

66 
	g£t_ba£
::
move_√xt
();

67 i‡(
	g£t_ba£
::
ñemít
(Ë< 
rhs
.element())

69 
ªsu…
 = 
åue
;

72 i‡(
	grhs
.
ñemít
(Ë< 
	g£t_ba£
::element())

79 
	g£t_ba£
::
ª£t
();

80 
	grhs
.
ª£t
();

82  
	gªsu…
;

87 
	gãm∂©e
 <

88 
ty≥«me
 
	g£t_ba£


90 
boﬁ
 
	g£t_com∑ª_1
<
	g£t_ba£
>::

91 
›î©‹
== (

92 c⁄° 
£t_com∑ª_1
<
£t_ba£
>& 
rhs


95 
boﬁ
 
ªsu…
 = 
åue
;

96 i‡(
	g£t_ba£
::
size
(Ë!
rhs
.size())

97 
ªsu…
 = 
Ál£
;

100 
	grhs
.
ª£t
();

101 
	g£t_ba£
::
ª£t
();

102 
	grhs
.
move_√xt
(Ë&& 
	g£t_ba£
::move_next())

104 i‡(!(
rhs
.
ñemít
(Ë=
£t_ba£
::element()))

106 
ªsu…
 = 
Ál£
;

111 
	g£t_ba£
::
ª£t
();

112 
	grhs
.
ª£t
();

114  
	gªsu…
;

	@viper/concurrentqueue-src/benchmarks/dlib/set/set_compare_abstract.h

3 #unde‡
DLIB_SET_COMPARe_ABSTRACT_


4 #ifde‡
DLIB_SET_COMPARe_ABSTRACT_


6 
	~"£t_kî√l_ab°ø˘.h
"

8 
	~"../Ægs.h
"

11 
«me•a˚
 
	gdlib


14 
	gãm∂©e
 <

15 
ty≥«me
 
	g£t_ba£


17 ˛as†
	c£t_com∑ª
 : 
public
 
£t_ba£


51 
public
:

53 
boﬁ
 
›î©‹
< (

54 c⁄° 
£t_com∑ª
& 
rhs


70 
boﬁ
 
	g›î©‹
== (

71 c⁄° 
£t_com∑ª
& 
rhs


82 
	gãm∂©e
 <

83 
ty≥«me
 
	g£t_ba£


85 
ölöe
 
sw≠
 (

86 
£t_com∑ª
<
£t_ba£
>& 
a
,

87 
£t_com∑ª
<
£t_ba£
>& 
b


88 Ë{ 
	ga
.
sw≠
(
b
); }

	@viper/concurrentqueue-src/benchmarks/dlib/set/set_kernel_1.h

3 #i‚de‡
DLIB_SET_KERNEl_1_


4 
	#DLIB_SET_KERNEl_1_


	)

6 
	~"£t_kî√l_ab°ø˘.h
"

7 
	~"../Ægs.h
"

8 
	~"../öãrÁ˚s/íumîabÀ.h
"

9 
	~"../öãrÁ˚s/ªmovî.h
"

10 
	~"../£rülize.h
"

12 
«me•a˚
 
	gdlib


15 
	gãm∂©e
 <

16 
ty≥«me
 
	gT
,

17 
ty≥«me
 
	gb°_ba£
,

18 
ty≥«me
 
	gmem_m™agî
 = 
deÁu…_mem‹y_m™agî


20 
˛ass
 
£t_kî√l_1
 : 
public
 
íumîabÀ
<c⁄° 
T
>,

21 
public
 
	gasc_ªmovî
<
	gT
,
ty≥«me
 
	gb°_ba£
::
com∑ª_ty≥
>

38 
public
:

40 
T
 
	tty≥
;

41 
ty≥«me
 
	tb°_ba£
::
	tcom∑ª_ty≥
 compare_type;

42 
mem_m™agî
 
	tmem_m™agî_ty≥
;

44 
£t_kî√l_1
(

49 
	gvútuÆ
 ~
£t_kî√l_1
(

53 
ölöe
 
˛ór
(

56 
ölöe
 
add
 (

57 
T
& 
ôem


60 
ölöe
 
boﬁ
 
is_membî
 (

61 c⁄° 
T
& 
ôem


64 
ölöe
 
ªmove
 (

65 c⁄° 
T
& 
ôem
,

66 
T
& 
ôem_c›y


69 
ölöe
 
de°roy
 (

70 c⁄° 
T
& 
ôem


73 
ölöe
 
sw≠
 (

74 
£t_kî√l_1
& 
ôem


78 
ölöe
 
ªmove_™y
 (

79 
T
& 
ôem


83 
ölöe
 
size_t
 
size
 (

86 
ölöe
 
boﬁ
 
©_°¨t
 (

89 
ölöe
 
ª£t
 (

92 
ölöe
 
boﬁ
 
cuºít_ñemít_vÆid
 (

95 
ölöe
 c⁄° 
	gT
& 
ñemít
 (

99 
ölöe
 c⁄° 
	gT
& 
ñemít
 (

102 
ölöe
 
boﬁ
 
move_√xt
 (

106 
	g¥iv©e
:

108 
b°_ba£
 
b°
;

109 
	gjunk
;

112 
£t_kî√l_1
(set_kernel_1&);

113 
	g£t_kî√l_1
& 
	g›î©‹
=(
£t_kî√l_1
&);

117 
	gãm∂©e
 <

118 
ty≥«me
 
	gT
,

119 
ty≥«me
 
	gb°_ba£
,

120 
ty≥«me
 
	gmem_m™agî


122 
ölöe
 
sw≠
 (

123 
£t_kî√l_1
<
T
,
b°_ba£
,
mem_m™agî
>& 
a
,

124 
£t_kî√l_1
<
T
,
b°_ba£
,
mem_m™agî
>& 
b


125 Ë{ 
	ga
.
sw≠
(
b
); }

127 
	gãm∂©e
 <

128 
ty≥«me
 
	gT
,

129 
ty≥«me
 
	gb°_ba£
,

130 
ty≥«me
 
	gmem_m™agî


132 
de£rülize
 (

133 
£t_kî√l_1
<
T
,
b°_ba£
,
mem_m™agî
>& 
ôem
,

134 
°d
::
i°ªam
& 
ö


137 
åy


139 
ôem
.
˛ór
();

140 
	gsize
;

141 
de£rülize
(
size
,
ö
);

142 
T
 
	gãmp
;

143 
	gi
 = 0; i < 
	gsize
; ++i)

145 
de£rülize
(
ãmp
,
ö
);

146 
	gôem
.
add
(
ãmp
);

149 
ˇtch
 (
£rüliz©i⁄_îr‹
& 
e
)

151 
	gôem
.
˛ór
();

152 
throw
 
£rüliz©i⁄_îr‹
(
e
.
öfo
 + "\n while deserializing object ofÅype set_kernel_1");

162 
	gãm∂©e
 <

163 
ty≥«me
 
	gT
,

164 
ty≥«me
 
	gb°_ba£
,

165 
ty≥«me
 
	gmem_m™agî


167 
	g£t_kî√l_1
<
	gT
,
	gb°_ba£
,
	gmem_m™agî
>::

168 
˛ór
 (

171 
b°
.
˛ór
();

176 
	gãm∂©e
 <

177 
ty≥«me
 
	gT
,

178 
ty≥«me
 
	gb°_ba£
,

179 
ty≥«me
 
	gmem_m™agî


181 
	g£t_kî√l_1
<
	gT
,
	gb°_ba£
,
	gmem_m™agî
>::

182 
add
 (

183 
T
& 
ôem


186 
b°
.
add
(
ôem
,
junk
);

191 
	gãm∂©e
 <

192 
ty≥«me
 
	gT
,

193 
ty≥«me
 
	gb°_ba£
,

194 
ty≥«me
 
	gmem_m™agî


196 
boﬁ
 
	g£t_kî√l_1
<
	gT
,
	gb°_ba£
,
	gmem_m™agî
>::

197 
is_membî
(

198 c⁄° 
T
& 
ôem


201  (
b°
[
ôem
] != 0);

206 
	gãm∂©e
 <

207 
ty≥«me
 
	gT
,

208 
ty≥«me
 
	gb°_ba£
,

209 
ty≥«me
 
	gmem_m™agî


211 
	g£t_kî√l_1
<
	gT
,
	gb°_ba£
,
	gmem_m™agî
>::

212 
ªmove_™y
 (

213 
T
& 
ôem


216 
b°
.
ªmove_™y
(
ôem
,
junk
);

221 
	gãm∂©e
 <

222 
ty≥«me
 
	gT
,

223 
ty≥«me
 
	gb°_ba£
,

224 
ty≥«me
 
	gmem_m™agî


226 
	g£t_kî√l_1
<
	gT
,
	gb°_ba£
,
	gmem_m™agî
>::

227 
ªmove
(

228 c⁄° 
T
& 
ôem
,

229 
T
& 
ôem_c›y


232 
	gb°
.
ªmove
(
ôem
,
ôem_c›y
,
junk
);

237 
	gãm∂©e
 <

238 
ty≥«me
 
	gT
,

239 
ty≥«me
 
	gb°_ba£
,

240 
ty≥«me
 
	gmem_m™agî


242 
	g£t_kî√l_1
<
	gT
,
	gb°_ba£
,
	gmem_m™agî
>::

243 
de°roy
(

244 c⁄° 
T
& 
ôem


247 
b°
.
de°roy
(
ôem
);

252 
	gãm∂©e
 <

253 
ty≥«me
 
	gT
,

254 
ty≥«me
 
	gb°_ba£
,

255 
ty≥«me
 
	gmem_m™agî


257 
size_t
 
	g£t_kî√l_1
<
	gT
,
	gb°_ba£
,
	gmem_m™agî
>::

258 
size
 (

261  
b°
.
size
();

266 
	gãm∂©e
 <

267 
ty≥«me
 
	gT
,

268 
ty≥«me
 
	gb°_ba£
,

269 
ty≥«me
 
	gmem_m™agî


271 
	g£t_kî√l_1
<
	gT
,
	gb°_ba£
,
	gmem_m™agî
>::

272 
sw≠
 (

273 
£t_kî√l_1
<
T
,
b°_ba£
,
mem_m™agî
>& 
ôem


276 
	gb°
.
sw≠
(
ôem
.
b°
);

285 
	gãm∂©e
 <

286 
ty≥«me
 
	gT
,

287 
ty≥«me
 
	gb°_ba£
,

288 
ty≥«me
 
	gmem_m™agî


290 
boﬁ
 
	g£t_kî√l_1
<
	gT
,
	gb°_ba£
,
	gmem_m™agî
>::

291 
©_°¨t
 (

294  
b°
.
©_°¨t
();

299 
	gãm∂©e
 <

300 
ty≥«me
 
	gT
,

301 
ty≥«me
 
	gb°_ba£
,

302 
ty≥«me
 
	gmem_m™agî


304 
	g£t_kî√l_1
<
	gT
,
	gb°_ba£
,
	gmem_m™agî
>::

305 
ª£t
 (

308 
b°
.
ª£t
();

313 
	gãm∂©e
 <

314 
ty≥«me
 
	gT
,

315 
ty≥«me
 
	gb°_ba£
,

316 
ty≥«me
 
	gmem_m™agî


318 
boﬁ
 
	g£t_kî√l_1
<
	gT
,
	gb°_ba£
,
	gmem_m™agî
>::

319 
cuºít_ñemít_vÆid
 (

322  
b°
.
cuºít_ñemít_vÆid
();

327 
	gãm∂©e
 <

328 
ty≥«me
 
	gT
,

329 
ty≥«me
 
	gb°_ba£
,

330 
ty≥«me
 
	gmem_m™agî


332 c⁄° 
	gT
& 
	g£t_kî√l_1
<T,
	gb°_ba£
,
	gmem_m™agî
>::

333 
ñemít
 (

336  
b°
.
ñemít
().
key
();

341 
	gãm∂©e
 <

342 
ty≥«me
 
	gT
,

343 
ty≥«me
 
	gb°_ba£
,

344 
ty≥«me
 
	gmem_m™agî


346 c⁄° 
	gT
& 
	g£t_kî√l_1
<T,
	gb°_ba£
,
	gmem_m™agî
>::

347 
ñemít
 (

350  
b°
.
ñemít
().
key
();

355 
	gãm∂©e
 <

356 
ty≥«me
 
	gT
,

357 
ty≥«me
 
	gb°_ba£
,

358 
ty≥«me
 
	gmem_m™agî


360 
boﬁ
 
	g£t_kî√l_1
<
	gT
,
	gb°_ba£
,
	gmem_m™agî
>::

361 
move_√xt
 (

364  
b°
.
move_√xt
();

	@viper/concurrentqueue-src/benchmarks/dlib/set/set_kernel_abstract.h

3 #unde‡
DLIB_SET_KERNEl_ABSTRACT_


4 #ifde‡
DLIB_SET_KERNEl_ABSTRACT_


6 
	~"../öãrÁ˚s/íumîabÀ.h
"

7 
	~"../öãrÁ˚s/ªmovî.h
"

8 
	~"../£rülize.h
"

9 
	~"../Ægs.h
"

10 
	~<fun˘i⁄Æ
>

12 
«me•a˚
 
	gdlib


15 
	gãm∂©e
 <

16 
ty≥«me
 
	gT
,

17 
ty≥«me
 
	gmem_m™agî
 = 
deÁu…_mem‹y_m™agî
,

18 
ty≥«me
 
	gcom∑ª
 = 
°d
::
Àss
<
T
>

20 
˛ass
 
£t
 : 
public
 
íumîabÀ
<c⁄° 
T
>,

21 
public
 
	gasc_ªmovî
<
	gT
,
	gcom∑ª
>

61 
	gpublic
:

63 
T
 
	tty≥
;

64 
com∑ª
 
	tcom∑ª_ty≥
;

65 
mem_m™agî
 
	tmem_m™agî_ty≥
;

67 
£t
(

76 
	gvútuÆ
 ~
£t
(

83 
˛ór
(

94 
add
 (

95 
T
& 
ôem


110 
boﬁ
 
is_membî
 (

111 c⁄° 
T
& 
ôem


119 
ªmove
 (

120 c⁄° 
T
& 
ôem
,

121 
T
& 
ôem_c›y


136 
de°roy
 (

137 c⁄° 
T
& 
ôem


148 
sw≠
 (

149 
£t
& 
ôem


156 
	g¥iv©e
:

159 
£t
(set&);

160 
	g£t
& 
	g›î©‹
=(
£t
&);

164 
	gãm∂©e
 <

165 
ty≥«me
 
	gT
,

166 
ty≥«me
 
	gmem_m™agî
,

167 
ty≥«me
 
	gcom∑ª


169 
ölöe
 
sw≠
 (

170 
£t
<
T
,
mem_m™agî
,
com∑ª
>& 
a
,

171 
£t
<
T
,
mem_m™agî
,
com∑ª
>& 
b


172 Ë{ 
	ga
.
sw≠
(
b
); }

177 
	gãm∂©e
 <

178 
ty≥«me
 
	gT
,

179 
ty≥«me
 
	gmem_m™agî
,

180 
ty≥«me
 
	gcom∑ª


182 
de£rülize
 (

183 
£t
<
T
,
mem_m™agî
,
com∑ª
>& 
ôem
,

184 
°d
::
i°ªam
& 
ö


	@viper/concurrentqueue-src/benchmarks/dlib/set/set_kernel_c.h

3 #i‚de‡
DLIB_SET_KERNEl_C_


4 
	#DLIB_SET_KERNEl_C_


	)

6 
	~"£t_kî√l_ab°ø˘.h
"

7 
	~"../Ægs.h
"

8 
	~"../as£π.h
"

10 
«me•a˚
 
	gdlib


13 
	gãm∂©e
 <

14 
ty≥«me
 
	g£t_ba£


16 ˛as†
	c£t_kî√l_c
 : 
public
 
£t_ba£


18 
ty≥«me
 
	t£t_ba£
::
	tty≥
 
	tT
;

19 
	gpublic
:

21 
add
 (

22 
T
& 
ôem


25 
ªmove_™y
 (

26 
T
& 
ôem


29 
ªmove
 (

30 c⁄° 
T
& 
ôem
,

31 
T
& 
ôem_c›y


34 
de°roy
 (

35 c⁄° 
T
& 
ôem


38 c⁄° 
	gT
& 
ñemít
 (

41 c⁄° 
	gT
& 
ñemít
 (

46 
	gãm∂©e
 <

47 
ty≥«me
 
	g£t_ba£


49 
ölöe
 
sw≠
 (

50 
£t_kî√l_c
<
£t_ba£
>& 
a
,

51 
£t_kî√l_c
<
£t_ba£
>& 
b


52 Ë{ 
	ga
.
sw≠
(
b
); }

60 
	gãm∂©e
 <

61 
ty≥«me
 
	g£t_ba£


63 
	g£t_kî√l_c
<
	g£t_ba£
>::

64 
	$add
(

65 
T
& 
ôem


69 
	`DLIB_CASSERT
–!
this
->
	`is_membî
(
ôem
),

72 << "\n\âhis: " << 
this


76 
£t_ba£
::
	`add
(
ôem
);

77 
	}
}

81 
	gãm∂©e
 <

82 
ty≥«me
 
	g£t_ba£


84 
	g£t_kî√l_c
<
	g£t_ba£
>::

85 
	$ªmove
 (

86 c⁄° 
T
& 
ôem
,

87 
T
& 
ôem_c›y


91 
	`DLIB_CASSERT
–
this
->
	`is_membî
(
ôem
) &&

92 (
°©ic_ˇ°
<c⁄° *>(&
ôem
Ë!°©ic_ˇ°<*>(&
ôem_c›y
)),

95 << "\n\âhis: " << 
this


96 << "\n\t&ôem: " << &
ôem


97 << "\n\t&ôem_c›y: " << &
ôem_c›y


98 << "\n\tis_membî(ôem): " << (
this
->
	`is_membî
(
ôem
)?"true":"false")

102 
£t_ba£
::
	`ªmove
(
ôem
,
ôem_c›y
);

103 
	}
}

107 
	gãm∂©e
 <

108 
ty≥«me
 
	g£t_ba£


110 
	g£t_kî√l_c
<
	g£t_ba£
>::

111 
	$de°roy
 (

112 c⁄° 
T
& 
ôem


116 
	`DLIB_CASSERT
–
this
->
	`is_membî
(
ôem
),

119 << "\n\âhis: " << 
this


120 << "\n\t&ôem: " << &
ôem


124 
£t_ba£
::
	`de°roy
(
ôem
);

125 
	}
}

129 
	gãm∂©e
 <

130 
ty≥«me
 
	g£t_ba£


132 
	g£t_kî√l_c
<
	g£t_ba£
>::

133 
	$ªmove_™y
 (

134 
T
& 
ôem


138 
	`DLIB_CASSERT
–
this
->
	`size
() != 0,

141 << "\n\âhis: " << 
this


145 
£t_ba£
::
	`ªmove_™y
(
ôem
);

146 
	}
}

150 
	gãm∂©e
 <

151 
ty≥«me
 
	g£t_ba£


153 c⁄° 
ty≥«me
 
	g£t_ba£
::
ty≥
& 
£t_kî√l_c
<
£t_ba£
>::

154 
	$ñemít
 (

158 
	`DLIB_CASSERT
(
this
->
	`cuºít_ñemít_vÆid
(Ë=
åue
,

161 << "\n\âhis: " << 
this


165  
£t_ba£
::
	`ñemít
();

166 
	}
}

170 
	gãm∂©e
 <

171 
ty≥«me
 
	g£t_ba£


173 c⁄° 
ty≥«me
 
	g£t_ba£
::
ty≥
& 
£t_kî√l_c
<
£t_ba£
>::

174 
	$ñemít
 (

178 
	`DLIB_CASSERT
(
this
->
	`cuºít_ñemít_vÆid
(Ë=
åue
,

181 << "\n\âhis: " << 
this


185  
£t_ba£
::
	`ñemít
();

186 
	}
}

	@viper/concurrentqueue-src/benchmarks/dlib/sliding_buffer.h

3 #i‚de‡
DLIB_SLIDING_BUFFEr_


4 
	#DLIB_SLIDING_BUFFEr_


	)

7 
	~"¶idög_buf„r/¶idög_buf„r_kî√l_1.h
"

8 
	~"¶idög_buf„r/¶idög_buf„r_kî√l_c.h
"

9 
	~"¶idög_buf„r/cúcuœr_buf„r.h
"

13 
«me•a˚
 
	gdlib


16 
	gãm∂©e
 <

17 
ty≥«me
 
	gT


19 ˛as†
	c¶idög_buf„r


22 
¶idög_buf„r
() {}

23 
	gpublic
:

28 
¶idög_buf„r_kî√l_1
<
	tT
>

29 
	tkî√l_1a
;

30 
	g¶idög_buf„r_kî√l_c
<
	tkî√l_1a
>

31 
	tkî√l_1a_c
;

	@viper/concurrentqueue-src/benchmarks/dlib/sliding_buffer/circular_buffer.h

3 #i‚de‡
DLIB_CIRCULAR_BuFFER_Hh_


4 
	#DLIB_CIRCULAR_BuFFER_Hh_


	)

6 
	~"cúcuœr_buf„r_ab°ø˘.h
"

7 
	~<ve˘‹
>

8 
	~"../Ægs.h
"

9 
	~"../£rülize.h
"

10 
	~"../m©rix/m©rix_m©.h
"

12 
«me•a˚
 
	gdlib


17 
	gãm∂©e
 <

18 
ty≥«me
 
	gT


20 ˛as†
	ccúcuœr_buf„r


22 
	gpublic
:

23 
deÁu…_mem‹y_m™agî
 
	tmem_m™agî_ty≥
;

24 
T
 
	tvÆue_ty≥
;

25 
T
 
	tty≥
;

27 
cúcuœr_buf„r
()

31 
ex∂icô
 
cúcuœr_buf„r
(
s
)

33 
ªsize
(
s
);

36 
˛ór
 (

39 
	goff£t
 = 0;

40 
	gd©a
.
˛ór
();

43 
	gT
& 
	g›î©‹
[] ( 
	gi
)

45 
DLIB_ASSERT
(
i
 < 
size
(),

48 << "\n\àthis: " << 
this


49 << "\n\ài: " << 
i


50 << "\n\àsize(): " << 
size
()

52  
	gd©a
[(
i
+
off£t
)%
d©a
.
size
()];

55 c⁄° 
	gT
& 
	g›î©‹
[] ( 
	gi
) const

57 
DLIB_ASSERT
(
i
 < 
size
(),

60 << "\n\àthis: " << 
this


61 << "\n\ài: " << 
i


62 << "\n\àsize(): " << 
size
()

64  
	gd©a
[(
i
+
off£t
)%
d©a
.
size
()];

67 
ªsize
(
size
)

69 
	goff£t
 = 0;

70 
	gd©a
.
ªsize
(
size
);

73 
assign
(

74 
size
,

75 c⁄° 
T
& 
vÆue


78 
	goff£t
 = 0;

79 
	gd©a
.
assign
(
size
,
vÆue
);

82 
size
(Ëc⁄° {  
	gd©a
.size(); }

84 
push_‰⁄t
(c⁄° 
T
& 
vÆue
)

86 i‡(
	gd©a
.
size
() != 0)

88 
off£t
 = (off£à- 1 + 
d©a
.
size
())%data.size();

89 
	gd©a
[
off£t
] = 
vÆue
;

93 
push_back
(c⁄° 
T
& 
vÆue
)

95 i‡(
	gd©a
.
size
() != 0)

97 
d©a
[
off£t
] = 
vÆue
;

98 
	goff£t
 = (
off£t
 + 1 + 
d©a
.
size
())%data.size();

102 
	gT
& 
‰⁄t
(

105 
DLIB_CASSERT
(
size
() > 0,

108 << "\n\àthis: " << 
this


110  (*
	gthis
)[0];

113 c⁄° 
	gT
& 
‰⁄t
(

116 
DLIB_CASSERT
(
size
() > 0,

119 << "\n\àthis: " << 
this


121  (*
	gthis
)[0];

124 
	gT
& 
back
(

127 
DLIB_CASSERT
(
size
() > 0,

130 << "\n\àthis: " << 
this


132  (*
	gthis
)[
size
()-1];

135 c⁄° 
	gT
& 
back
(

138 
DLIB_CASSERT
(
size
() > 0,

141 << "\n\àthis: " << 
this


143  (*
	gthis
)[
size
()-1];

146 
sw≠
–
cúcuœr_buf„r
& 
ôem
)

148 
	g°d
::
sw≠
(
ôem
.
off£t
, offset);

149 
	gd©a
.
sw≠
(
ôem
.
d©a
);

153 
	g¥iv©e
:

154 
°d
::
ve˘‹
<
T
> 
d©a
;

156 
	goff£t
 = 0;

161 
	gãm∂©e
 <

162 
ty≥«me
 
	gT


164 
sw≠
 (

165 
cúcuœr_buf„r
<
T
>& 
a
,

166 
cúcuœr_buf„r
<
T
>& 
b


167 Ë{ 
	ga
.
sw≠
(
b
); }

171 
	gãm∂©e
 <

172 
ty≥«me
 
	gT


174 
£rülize
 (

175 c⁄° 
cúcuœr_buf„r
<
T
>& 
ôem
,

176 
°d
::
o°ªam
& 
out


179 
åy


181 
£rülize
(
ôem
.
size
(),
out
);

182 
	gi
 = 0; i < 
	gôem
.
size
(); ++i)

183 
£rülize
(
ôem
[
i
],
out
);

185 
ˇtch
 (
£rüliz©i⁄_îr‹
& 
e
)

187 
throw
 
£rüliz©i⁄_îr‹
(
e
.
öfo
 + "\n while serializing object ofÅype circular_buffer");

194 
	gãm∂©e
 <

195 
ty≥«me
 
	gT


197 
de£rülize
 (

198 
cúcuœr_buf„r
<
T
>& 
ôem
,

199 
°d
::
i°ªam
& 
ö


202 
åy


204 
size
;

205 
de£rülize
(
size
,
ö
);

206 
	gôem
.
ªsize
(
size
);

207 
	gi
 = 0; i < 
	gsize
; ++i)

208 
de£rülize
(
ôem
[
i
],
ö
);

210 
ˇtch
 (
£rüliz©i⁄_îr‹
& 
e
)

212 
	gôem
.
˛ór
();

213 
throw
 
£rüliz©i⁄_îr‹
(
e
.
öfo
 + "\n while deserializing object ofÅype circular_buffer");

219 
	gãm∂©e
 <

220 
ty≥«me
 
	gT


222 c⁄° 
	gm©rix_›
<
	g›_¨øy_to_m©
<
	gcúcuœr_buf„r
<
	gT
> > > 
m©
 (

223 c⁄° 
cúcuœr_buf„r
<
T
>& 
m


226 
	g›_¨øy_to_m©
<
	tcúcuœr_buf„r
<
	tT
> > 
	t›
;

227  
	gm©rix_›
<
	g›
>(
›
(
m
));

	@viper/concurrentqueue-src/benchmarks/dlib/sliding_buffer/circular_buffer_abstract.h

3 #unde‡
DLIB_CIRCULAR_BuFFER_ABSTRACT_Hh_


4 #ifde‡
DLIB_CIRCULAR_BuFFER_ABSTRACT_Hh_


6 
	~"../Ægs.h
"

7 
	~"../£rülize.h
"

9 
«me•a˚
 
	gdlib


14 
	gãm∂©e
 <

15 
ty≥«me
 
	gT


17 ˛as†
	ccúcuœr_buf„r


39 
	gpublic
:

40 
deÁu…_mem‹y_m™agî
 
	tmem_m™agî_ty≥
;

41 
T
 
	tvÆue_ty≥
;

42 
T
 
	tty≥
;

44 
cúcuœr_buf„r
(

52 
ex∂icô
 
cúcuœr_buf„r
(

53 
s


61 
˛ór
 (

69 
	gT
& 
	g›î©‹
[] (

70 
	gi


79 c⁄° 
	gT
& 
	g›î©‹
[] (

80 
	gi


89 
ªsize
(

90 
√w_size


97 
assign
(

98 
√w_size
,

99 c⁄° 
T
& 
vÆue


108 
size
(

115 
	gT
& 
‰⁄t
(

124 c⁄° 
	gT
& 
‰⁄t
(

133 
	gT
& 
back
(

142 c⁄° 
	gT
& 
back
(

151 
push_‰⁄t
(

152 c⁄° 
T
& 
vÆue


170 
push_back
(

171 c⁄° 
T
& 
vÆue


189 
sw≠
 (

190 
cúcuœr_buf„r
& 
ôem


201 
	gãm∂©e
 <

202 
ty≥«me
 
	gT


204 
sw≠
 (

205 
cúcuœr_buf„r
<
T
>& 
a
,

206 
cúcuœr_buf„r
<
T
>& 
b


207 Ë{ 
	ga
.
sw≠
(
b
); }

212 
	gãm∂©e
 <

213 
ty≥«me
 
	gT


215 
£rülize
 (

216 c⁄° 
cúcuœr_buf„r
<
T
>& 
ôem
,

217 
°d
::
o°ªam
& 
out


223 
	gãm∂©e
 <

224 
ty≥«me
 
	gT


226 
de£rülize
 (

227 
cúcuœr_buf„r
<
T
>& 
ôem
,

228 
°d
::
i°ªam
& 
ö


236 
	gãm∂©e
 <

237 
ty≥«me
 
	gT


239 c⁄° 
m©rix_exp
 
m©
 (

240 c⁄° 
cúcuœr_buf„r
<
T
>& 
m


	@viper/concurrentqueue-src/benchmarks/dlib/sliding_buffer/sliding_buffer_kernel_1.h

3 #i‚de‡
DLIB_SLIDING_BUFFER_KERNEl_1_


4 
	#DLIB_SLIDING_BUFFER_KERNEl_1_


	)

6 
	~"¶idög_buf„r_kî√l_ab°ø˘.h
"

7 
	~"../Ægs.h
"

8 
	~"../öãrÁ˚s/íumîabÀ.h
"

9 
	~"../£rülize.h
"

11 
«me•a˚
 
	gdlib


14 
	gãm∂©e
 <

15 
ty≥«me
 
	gT


17 
˛ass
 
	g¶idög_buf„r_kî√l_1
 : 
public
 
íumîabÀ
<
T
>

42 
public
:

44 
T
 
	tty≥
;

46 
¶idög_buf„r_kî√l_1
 (

48 
buf„r_°¨t
(0),

49 
buf„r_size
(0),

50 
buf„r
(0),

51 
cuºít
(0),

52 
©_°¨t_
(
åue
)

55 
	gvútuÆ
 ~
¶idög_buf„r_kî√l_1
 (

56 Ë{ i‡(
	gbuf„r
Ë
	gdñëe
 [] buffer; }

58 
˛ór
(

61 
	gbuf„r_size
 = 0;

62 i‡(
	gbuf„r
Ë
	gdñëe
 [] buffer;

63 
	gbuf„r
 = 0;

64 
	g©_°¨t_
 = 
åue
;

65 
	gcuºít
 = 0;

68 
£t_size
 (

69 
exp_size


72 
	g©_°¨t_
 = 
åue
;

73 i‡(
	gbuf„r
Ë
	gdñëe
 [] buffer;

74 
	gbuf„r_size
 = 1;

75 
	gexp_size
 != 0)

77 --
exp_size
;

78 
	gbuf„r_size
 <<= 1;

80 
	gmask
 = 
buf„r_size
-1;

81 
	gåy
 { 
	gbuf„r
 = 
√w
 
T
[
buf„r_size
]; }

82 
ˇtch
 (...Ë{ 
	gbuf„r
 = 0; 
	gbuf„r_size
 = 0; 
	gthrow
; }

85 
size_t
 
size
 (

86 Ëc⁄° {  
	gbuf„r_size
; }

88 
rŸ©e_À·
 (

89 
amou¡


90 Ë{ 
	gbuf„r_°¨t
 = ((
buf„r_°¨t
-
amou¡
)&
mask
); 
	g©_°¨t_
 = 
åue
; }

92 
rŸ©e_right
 (

93 
amou¡


94 Ë{ 
	gbuf„r_°¨t
 = ((
buf„r_°¨t
+
amou¡
)&
mask
); 
	g©_°¨t_
 = 
åue
;}

96 c⁄° 
	gT
& 
	g›î©‹
[] (

97 
	gödex


98 Ëc⁄° {  
	gbuf„r
[(
buf„r_°¨t
+
ödex
)&
mask
]; }

100 
	gT
& 
	g›î©‹
[] (

101 
	gödex


102 Ë{  
	gbuf„r
[(
buf„r_°¨t
+
ödex
)&
mask
]; }

104 
gë_ñemít_id
(

105 
ödex


106 Ëc⁄° {  ((
	gbuf„r_°¨t
+
	gödex
)&
	gmask
); }

108 
gë_ñemít_ödex
 (

109 
ñemít_id


110 Ëc⁄° {  ((
	gñemít_id
-
	gbuf„r_°¨t
)&
	gmask
);}

112 
sw≠
 (

113 
¶idög_buf„r_kî√l_1
<
T
>& 
ôem


116 
exch™ge
(
buf„r_°¨t
,
ôem
.buffer_start);

117 
exch™ge
(
buf„r_size
,
ôem
.buffer_size);

118 
exch™ge
(
buf„r
,
ôem
.buffer);

119 
exch™ge
(
mask
,
ôem
.mask);

120 
exch™ge
(
cuºít
,
ôem
.current);

121 
exch™ge
(
©_°¨t_
,
ôem
.at_start_);

125 
boﬁ
 
©_°¨t
 (

126 Ëc⁄° {  
	g©_°¨t_
; }

128 
ª£t
 (

129 Ëc⁄° { 
	g©_°¨t_
 = 
åue
; }

131 
boﬁ
 
cuºít_ñemít_vÆid
 (

132 Ëc⁄° {  (
	gcuºít
 < 
	gbuf„r_size
Ë&& (
	g©_°¨t_
 =
Ál£
); }

134 c⁄° 
	gT
& 
ñemít
 (

135 Ëc⁄° {  (*
	gthis
)[
cuºít
]; }

137 
	gT
& 
ñemít
 (

138 Ë{  (*
	gthis
)[
cuºít
]; }

140 
boﬁ
 
move_√xt
 (

143 i‡(
	g©_°¨t_
 =
Ál£
)

145 i‡(
cuºít
+1 < 
buf„r_size
)

147 ++
cuºít
;

148  
	gåue
;

152 
	gcuºít
 = 
buf„r_size
;

153  
	gÁl£
;

158 
	g©_°¨t_
 = 
Ál£
;

159 
	gcuºít
 = 0;

160  (
	gbuf„r_size
 != 0);

165 
	g¥iv©e
:

168 
buf„r_°¨t
;

169 
	gbuf„r_size
;

170 
T
* 
	gbuf„r
;

171 
	gmask
;

174 
muèbÀ
 
	gcuºít
;

175 
muèbÀ
 
boﬁ
 
	g©_°¨t_
;

178 
¶idög_buf„r_kî√l_1
(¶idög_buf„r_kî√l_1<
T
>&);

179 
	g¶idög_buf„r_kî√l_1
<
	gT
>& 
	g›î©‹
=(
¶idög_buf„r_kî√l_1
<
T
>&);

183 
	gãm∂©e
 <

184 
ty≥«me
 
	gT


186 
ölöe
 
sw≠
 (

187 
¶idög_buf„r_kî√l_1
<
T
>& 
a
,

188 
¶idög_buf„r_kî√l_1
<
T
>& 
b


189 Ë{ 
	ga
.
sw≠
(
b
); }

191 
	gãm∂©e
 <

192 
ty≥«me
 
	gT


194 
de£rülize
 (

195 
¶idög_buf„r_kî√l_1
<
T
>& 
ôem
,

196 
°d
::
i°ªam
& 
ö


199 
åy


201 
ôem
.
˛ór
();

202 
	gsize
;

203 
de£rülize
(
size
,
ö
);

204 i‡(
	gsize
 > 0)

206 
	gcou¡
 = 0;

207 
	gsize
 != 1)

209 
size
 /= 2;

210 ++
	gcou¡
;

212 
	gôem
.
£t_size
(
cou¡
);

214 
	gi
 = 0; i < 
	gôem
.
size
(); ++i)

215 
de£rülize
(
ôem
[
i
],
ö
);

218 
ˇtch
 (
£rüliz©i⁄_îr‹
& 
e
)

220 
	gôem
.
˛ór
();

221 
throw
 
£rüliz©i⁄_îr‹
(
e
.
öfo
 + "\n while deserializing object ofÅype sliding_buffer_kernel_1");

	@viper/concurrentqueue-src/benchmarks/dlib/sliding_buffer/sliding_buffer_kernel_abstract.h

3 #unde‡
DLIB_SLIDING_BUFFER_KERNEl_ABSTRACT_


4 #ifde‡
DLIB_SLIDING_BUFFER_KERNEl_ABSTRACT_


6 
	~"../Ægs.h
"

7 
	~"../öãrÁ˚s/íumîabÀ.h
"

8 
	~"../£rülize.h
"

10 
«me•a˚
 
	gdlib


13 
	gãm∂©e
 <

14 
ty≥«me
 
	gT


16 
˛ass
 
	g¶idög_buf„r
 : 
public
 
íumîabÀ
<
T
>

50 
public
:

52 
T
 
	tty≥
;

54 
¶idög_buf„r
 (

63 
	gvútuÆ
 ~
¶idög_buf„r
 (

70 
˛ór
(

81 
£t_size
 (

82 
exp_size


96 
rŸ©e_À·
 (

97 
amou¡


107 
rŸ©e_right
 (

108 
amou¡


118 
gë_ñemít_id
 (

119 
ödex


131 
gë_ñemít_ödex
 (

132 
ñemít_id


144 c⁄° 
	gT
& 
	g›î©‹
[] (

145 
	gödex


154 
	gT
& 
	g›î©‹
[] (

155 
	gödex


164 
sw≠
 (

165 
¶idög_buf„r
<
T
>& 
ôem


172 
	g¥iv©e
:

175 
¶idög_buf„r
(¶idög_buf„r<
T
>&);

176 
	g¶idög_buf„r
<
	gT
>& 
	g›î©‹
=(
¶idög_buf„r
<
T
>&);

180 
	gãm∂©e
 <

181 
ty≥«me
 
	gT


183 
sw≠
 (

184 
¶idög_buf„r
<
T
>& 
a
,

185 
¶idög_buf„r
<
T
>& 
b


186 Ë{ 
	ga
.
sw≠
(
b
); }

191 
	gãm∂©e
 <

192 
ty≥«me
 
	gT


194 
de£rülize
 (

195 
¶idög_buf„r
<
T
>& 
ôem
,

196 
°d
::
i°ªam
& 
ö


	@viper/concurrentqueue-src/benchmarks/dlib/sliding_buffer/sliding_buffer_kernel_c.h

3 #i‚de‡
DLIB_SLIDING_BUFFER_KERNEl_C_


4 
	#DLIB_SLIDING_BUFFER_KERNEl_C_


	)

6 
	~"¶idög_buf„r_kî√l_ab°ø˘.h
"

7 
	~"../Ægs.h
"

8 
	~"../as£π.h
"

9 
	~<io°ªam
>

11 
«me•a˚
 
	gdlib


14 
	gãm∂©e
 <

15 
ty≥«me
 
	gsb_ba£


17 ˛as†
	c¶idög_buf„r_kî√l_c
 : 
public
 
sb_ba£


19 
ty≥«me
 
	tsb_ba£
::
	tty≥
 
	tT
;

21 
	gpublic
:

22 
£t_size
 (

23 
exp_size


26 c⁄° 
	gT
& 
	g›î©‹
[] (

27 
	gödex


30 
	gT
& 
	g›î©‹
[] (

31 
	gödex


34 
gë_ñemít_id
 (

35 
ödex


38 
gë_ñemít_ödex
 (

39 
ñemít_id


42 c⁄° 
	gT
& 
ñemít
 (

45 
	gT
& 
ñemít
 (

51 
	gãm∂©e
 <

52 
ty≥«me
 
	gsb_ba£


54 
ölöe
 
sw≠
 (

55 
¶idög_buf„r_kî√l_c
<
sb_ba£
>& 
a
,

56 
¶idög_buf„r_kî√l_c
<
sb_ba£
>& 
b


57 Ë{ 
	ga
.
sw≠
(
b
); }

65 
	gãm∂©e
 <

66 
ty≥«me
 
	gsb_ba£


68 
	g¶idög_buf„r_kî√l_c
<
	gsb_ba£
>::

69 
	$£t_size
 (

70 
exp_size


74 
	`DLIB_CASSERT
–0 < 
exp_size
 &&Éxp_size < 32,

77 << "\n\âhis: " << 
this


78 << "\n\ãxp_size: " << 
exp_size


82 
sb_ba£
::
	`£t_size
(
exp_size
);

83 
	}
}

87 
	gãm∂©e
 <

88 
ty≥«me
 
	gsb_ba£


90 
	g¶idög_buf„r_kî√l_c
<
	gsb_ba£
>::

91 
	$gë_ñemít_id
 (

92 
ödex


96 
	`DLIB_CASSERT
–
ödex
 < 
this
->
	`size
(),

99 << "\n\âhis: " << 
this


100 << "\n\tsize(): " << 
this
->
	`size
()

101 << "\n\tödex: " << 
ödex


105  
sb_ba£
::
	`gë_ñemít_id
(
ödex
);

106 
	}
}

110 
	gãm∂©e
 <

111 
ty≥«me
 
	gsb_ba£


113 
	g¶idög_buf„r_kî√l_c
<
	gsb_ba£
>::

114 
	$gë_ñemít_ödex
 (

115 
ñemít_id


119 
	`DLIB_CASSERT
–
ñemít_id
 < 
this
->
	`size
(),

122 << "\n\âhis: " << 
this


123 << "\n\tsize(): " << 
this
->
	`size
()

124 << "\n\tid: " << 
ñemít_id


128  
sb_ba£
::
	`gë_ñemít_ödex
(
ñemít_id
);

129 
	}
}

133 
	gãm∂©e
 <

134 
ty≥«me
 
	gsb_ba£


136 c⁄° 
ty≥«me
 
	gsb_ba£
::
ty≥
& 
¶idög_buf„r_kî√l_c
<
sb_ba£
>::

137 
›î©‹
[] (

138 
ödex


142 
DLIB_CASSERT
–
ödex
 < 
this
->
size
(),

145 << "\n\âhis: " << 
this


146 << "\n\tsize(): " << 
this
->
size
()

147 << "\n\tödex: " << 
ödex


151  
	gsb_ba£
::
›î©‹
[](
ödex
);

156 
	gãm∂©e
 <

157 
ty≥«me
 
	gsb_ba£


159 
ty≥«me
 
	gsb_ba£
::
ty≥
& 
¶idög_buf„r_kî√l_c
<
sb_ba£
>::

160 
›î©‹
[] (

161 
ödex


165 
DLIB_CASSERT
–
ödex
 < 
this
->
size
(),

168 << "\n\âhis: " << 
this


169 << "\n\tsize(): " << 
this
->
size
()

170 << "\n\tödex: " << 
ödex


174  
	gsb_ba£
::
›î©‹
[](
ödex
);

179 
	gãm∂©e
 <

180 
ty≥«me
 
	gsb_ba£


182 c⁄° 
ty≥«me
 
	gsb_ba£
::
ty≥
& 
¶idög_buf„r_kî√l_c
<
sb_ba£
>::

183 
	$ñemít
 (

187 
	`DLIB_CASSERT
(
this
->
	`cuºít_ñemít_vÆid
(Ë=
åue
,

190 << "\n\âhis: " << 
this


194  
sb_ba£
::
	`ñemít
();

195 
	}
}

199 
	gãm∂©e
 <

200 
ty≥«me
 
	gsb_ba£


202 
ty≥«me
 
	gsb_ba£
::
ty≥
& 
¶idög_buf„r_kî√l_c
<
sb_ba£
>::

203 
	$ñemít
 (

207 
	`DLIB_CASSERT
(
this
->
	`cuºít_ñemít_vÆid
(Ë=
åue
,

210 << "\n\âhis: " << 
this


214  
sb_ba£
::
	`ñemít
();

215 
	}
}

	@viper/concurrentqueue-src/benchmarks/dlib/sockets.h

3 #i‚de‡
DLIB_SOCKETs_


4 
	#DLIB_SOCKETs_


	)

6 
	~"∂©f‹m.h
"

9 #ifde‡
WIN32


10 
	~"sockës/wödows.h
"

13 #i‚de‡
WIN32


14 
	~"sockës/posix.h
"

17 
	~"sockës/sockës_exãnsi⁄s.h
"

	@viper/concurrentqueue-src/benchmarks/dlib/sockets/posix.h

3 #i‚de‡
DLIB_SOCKETS_KERNEl_1_


4 
	~"sockës_kî√l_2.h
"

	@viper/concurrentqueue-src/benchmarks/dlib/sockets/sockets_extensions.h

3 #i‚de‡
DLIB_SOCKETS_EXTENSIONs_


4 
	#DLIB_SOCKETS_EXTENSIONs_


	)

6 
	~<iosfwd
>

7 
	~<mem‹y
>

8 
	~<°rög
>

10 
	~"../sockës.h
"

11 
	~"../sm¨t_poöãrs/sc›ed_±r.h
"

12 
	~"sockës_exãnsi⁄s_ab°ø˘.h
"

15 
«me•a˚
 
	gdlib


20 ˛as†
	cövÆid_√tw‹k_addªss
 : 
public
 
dlib
::
îr‹


22 
public
:

23 
övÆid_√tw‹k_addªss
(c⁄° 
°d
::
°rög
& 
msg
Ë: 
dlib
::
îr‹
(msg) {};

28 
	s√tw‹k_addªss


30 
√tw‹k_addªss
(Ë: 
p‹t
(0){}

32 
√tw‹k_addªss
(

33 c⁄° 
°d
::
°rög
& 
fuŒ_addªss


36 
√tw‹k_addªss
 (

37 c⁄° * 
fuŒ_addªss


40 *
	gthis
 = 
√tw‹k_addªss
(
°d
::
°rög
(
fuŒ_addªss
));

43 
√tw‹k_addªss
(

44 c⁄° 
°d
::
°rög
& 
ho°_addªss_
,

45 c⁄° 
p‹t_


46 Ë: 
ho°_addªss
(
ho°_addªss_
), 
p‹t
(
p‹t_
) {}

48 
	g°d
::
°rög
 
ho°_addªss
;

49 
	gp‹t
;

54 
ölöe
 
boﬁ
 
	g›î©‹
 < (

55 c⁄° 
	g√tw‹k_addªss
& 
	ga
,

56 c⁄° 
	g√tw‹k_addªss
& 
	gb


59 i‡(
	ga
.
	gho°_addªss
 < 
	gb
.host_address)

60  
	gåue
;

61 i‡(
	ga
.
	gho°_addªss
 > 
	gb
.host_address)

62  
	gÁl£
;

63 i‡(
	ga
.
	gp‹t
 < 
	gb
.port)

64  
	gåue
;

66  
	gÁl£
;

69 
ölöe
 
boﬁ
 
	g›î©‹
== (

70 c⁄° 
√tw‹k_addªss
& 
a
,

71 c⁄° 
	g√tw‹k_addªss
& 
	gb


72 Ë{  
	ga
.
	gho°_addªss
 =
b
.
ho°_addªss
 && 
a
.
p‹t
 == b.port; }

74 
ölöe
 
boﬁ
 
	g›î©‹
 != (

75 c⁄° 
√tw‹k_addªss
& 
a
,

76 c⁄° 
	g√tw‹k_addªss
& 
	gb


77 Ë{  !(
	ga
 =
b
); }

81 
£rülize
(

82 c⁄° 
√tw‹k_addªss
& 
ôem
,

83 
°d
::
o°ªam
& 
out


86 
de£rülize
(

87 
√tw‹k_addªss
& 
ôem
,

88 
°d
::
i°ªam
& 
ö


91 
	g°d
::
o°ªam
& 
›î©‹
<< (

92 
°d
::
o°ªam
& 
out
,

93 c⁄° 
	g√tw‹k_addªss
& 
	gôem


96 
	g°d
::
i°ªam
& 
›î©‹
>> (

97 
°d
::
i°ªam
& 
ö
,

98 
	g√tw‹k_addªss
& 
	gôem


103 
c⁄√˘i⁄
* 
c⁄√˘
 (

104 c⁄° 
°d
::
°rög
& 
ho°_‹_ù
,

105 
p‹t


110 
c⁄√˘i⁄
* 
c⁄√˘
 (

111 c⁄° 
√tw‹k_addªss
& 
addr


116 
c⁄√˘i⁄
* 
c⁄√˘
 (

117 c⁄° 
°d
::
°rög
& 
ho°_‹_ù
,

118 
p‹t
,

119 
timeout


124 
boﬁ
 
is_ù_addªss
 (

125 
°d
::
°rög
 
ù


130 
˛o£_gø˚fuŒy
 (

131 
c⁄√˘i⁄
* 
c⁄
,

132 
timeout
 = 500

137 
˛o£_gø˚fuŒy
 (

138 
°d
::
unique_±r
<
c⁄√˘i⁄
>& 
c⁄
,

139 
timeout
 = 500

146 #ifde‡
NO_MAKEFILE


147 
	~"sockës_exãnsi⁄s.˝p
"

	@viper/concurrentqueue-src/benchmarks/dlib/sockets/sockets_extensions_abstract.h

3 #unde‡
DLIB_SOCKETS_EXTENSIONs_ABSTRACT_


4 #ifde‡
DLIB_SOCKETS_EXTENSIONs_ABSTRACT_


6 
	~<mem‹y
>

7 
	~<°rög
>

9 
	~"sockës_kî√l_ab°ø˘.h
"

10 
	~"../îr‹.h
"

12 
«me•a˚
 
	gdlib


17 ˛as†
	cövÆid_√tw‹k_addªss
 : 
public
 
dlib
::
îr‹


28 
	s√tw‹k_addªss


40 
√tw‹k_addªss
(

48 
√tw‹k_addªss
(

49 c⁄° 
°d
::
°rög
& 
fuŒ_addªss


64 
√tw‹k_addªss
 (

65 c⁄° * 
fuŒ_addªss


75 
√tw‹k_addªss
(

76 c⁄° 
°d
::
°rög
& 
ho°_addªss_
,

77 c⁄° 
p‹t_


86 
	g°d
::
°rög
 
ho°_addªss
;

87 
	gp‹t
;

92 
ölöe
 
boﬁ
 
	g›î©‹
 < (

93 c⁄° 
	g√tw‹k_addªss
& 
	ga
,

94 c⁄° 
	g√tw‹k_addªss
& 
	gb


105 
ölöe
 
boﬁ
 
	g›î©‹
== (

106 c⁄° 
√tw‹k_addªss
& 
a
,

107 c⁄° 
	g√tw‹k_addªss
& 
	gb


122 
ölöe
 
boﬁ
 
	g›î©‹
 != (

123 c⁄° 
√tw‹k_addªss
& 
a
,

124 c⁄° 
	g√tw‹k_addªss
& 
	gb


133 
£rülize
(

134 c⁄° 
√tw‹k_addªss
& 
ôem
,

135 
°d
::
o°ªam
& 
out


142 
de£rülize
(

143 
√tw‹k_addªss
& 
ôem
,

144 
°d
::
i°ªam
& 
ö


151 
	g°d
::
o°ªam
& 
›î©‹
<< (

152 
°d
::
o°ªam
& 
out
,

153 c⁄° 
	g√tw‹k_addªss
& 
	gôem


165 
	g°d
::
i°ªam
& 
›î©‹
>> (

166 
°d
::
i°ªam
& 
ö
,

167 
	g√tw‹k_addªss
& 
	gôem


180 
c⁄√˘i⁄
* 
c⁄√˘
 (

181 c⁄° 
°d
::
°rög
& 
ho°_‹_ù
,

182 
p‹t


197 
c⁄√˘i⁄
* 
c⁄√˘
 (

198 c⁄° 
√tw‹k_addªss
& 
addr


207 
c⁄√˘i⁄
* 
c⁄√˘
 (

208 c⁄° 
°d
::
°rög
& 
ho°_‹_ù
,

209 
p‹t
,

210 
timeout


228 
boﬁ
 
is_ù_addªss
 (

229 
°d
::
°rög
 
ù


241 
˛o£_gø˚fuŒy
 (

242 
c⁄√˘i⁄
* 
c⁄
,

243 
timeout
 = 500

268 
˛o£_gø˚fuŒy
 (

269 
°d
::
unique_±r
<
c⁄√˘i⁄
>& 
c⁄
,

270 
timeout
 = 500

	@viper/concurrentqueue-src/benchmarks/dlib/sockets/sockets_kernel_1.h

3 #i‚de‡
DLIB_SOCKETS_KERNEl_1_


4 
	#DLIB_SOCKETS_KERNEl_1_


	)

6 #ifde‡
DLIB_ISO_CPP_ONLY


10 
	~"sockës_kî√l_ab°ø˘.h
"

12 
	~<mem‹y
>

13 
	~<°rög
>

15 
	~"../Ægs.h
"

16 
	~"../thªads.h
"

17 
	~"../uöä.h
"

20 
«me•a˚
 
	gdlib


26 
˛ass
 
	gsockë_Á˘‹y
;

27 
˛ass
 
	gli°íî
;

28 
˛ass
 
	gSOCKET_c⁄èöî
;

35 
gë_loˇl_ho°«me
 (

36 
°d
::
°rög
& 
ho°«me


42 
ho°«me_to_ù
 (

43 c⁄° 
°d
::
°rög
& 
ho°«me
,

44 
°d
::
°rög
& 
ù
,

45 
n
 = 0

51 
ù_to_ho°«me
 (

52 c⁄° 
°d
::
°rög
& 
ù
,

53 
°d
::
°rög
& 
ho°«me


62 ˛as†
	cc⁄√˘i⁄


88 
‰õnd
 
˛ass
 
	gli°íî
;

90 
‰õnd
 
¸óã_c⁄√˘i⁄
 (

91 
c⁄√˘i⁄
*& 
√w_c⁄√˘i⁄
,

92 
f‹eign_p‹t
,

93 c⁄° 
°d
::
°rög
& 
f‹eign_ù
,

94 
loˇl_p‹t
,

95 c⁄° 
°d
::
°rög
& 
loˇl_ù


98 
	gpublic
:

100 ~
c⁄√˘i⁄
 (

103 * 
	gu£r_d©a
;

105 
wrôe
 (

106 c⁄° * 
buf
,

107 
num


110 
ªad
 (

111 * 
buf
,

112 
num


115 
ªad
 (

116 * 
buf
,

117 
num
,

118 
timeout


121 
gë_loˇl_p‹t
 (

122 Ëc⁄° {  
	gc⁄√˘i⁄_loˇl_p‹t
; }

124 
gë_f‹eign_p‹t
 (

125 Ëc⁄° {  
	gc⁄√˘i⁄_f‹eign_p‹t
; }

127 c⁄° 
	g°d
::
°rög
& 
gë_loˇl_ù
 (

128 Ëc⁄° {  
c⁄√˘i⁄_loˇl_ù
; }

130 c⁄° 
	g°d
::
°rög
& 
gë_f‹eign_ù
 (

131 Ëc⁄° {  
c⁄√˘i⁄_f‹eign_ù
; }

133 
shutdown_outgoög
 (

136 
shutdown
 (

143 
	gunsig√d_ty≥
<*>::
	tty≥
 
	tsockë_des¸ùt‹_ty≥
;

145 
dißbÀ_«gÀ
(

148 
sockë_des¸ùt‹_ty≥
 
gë_sockë_des¸ùt‹
 (

151 
	g¥iv©e
:

153 
boﬁ
 
ªadabÀ
 (

154 
timeout


165 
boﬁ
 
sd_ˇŒed
 (

173 
	gsd_muãx
.
lock
();

174 
boﬁ
 
	gãmp
 = 
sd
;

175 
	gsd_muãx
.
u∆ock
();

176  
	gãmp
;

179 
boﬁ
 
sdo_ˇŒed
 (

187 
	gsd_muãx
.
lock
();

188 
boﬁ
 
	gãmp
 = 
Ál£
;

189 i‡(
	gsdo
 || 
	gsd
)

190 
	gãmp
 = 
åue
;

191 
	gsd_muãx
.
u∆ock
();

192  
	gãmp
;

197 
	gSOCKET_c⁄èöî
& 
	gc⁄√˘i⁄_sockë
;

198 c⁄° 
	gc⁄√˘i⁄_f‹eign_p‹t
;

199 c⁄° 
	g°d
::
°rög
 
c⁄√˘i⁄_f‹eign_ù
;

200 c⁄° 
	gc⁄√˘i⁄_loˇl_p‹t
;

201 c⁄° 
	g°d
::
°rög
 
c⁄√˘i⁄_loˇl_ù
;

203 
boﬁ
 
	gsd
;

204 
boﬁ
 
	gsdo
;

205 
	gsdr
;

206 
muãx
 
	gsd_muãx
;

209 
c⁄√˘i⁄
(

210 
SOCKET_c⁄èöî
 
sock
,

211 
f‹eign_p‹t
,

212 c⁄° 
°d
::
°rög
& 
f‹eign_ù
,

213 
loˇl_p‹t
,

214 c⁄° 
°d
::
°rög
& 
loˇl_ù


227 
c⁄√˘i⁄
(connection&);

228 
	gc⁄√˘i⁄
& 
	g›î©‹
=(
c⁄√˘i⁄
&);

237 ˛as†
	cli°íî


256 
‰õnd
 
¸óã_li°íî
 (

257 
li°íî
*& 
√w_li°íî
,

258 
p‹t
,

259 c⁄° 
°d
::
°rög
& 
ù


262 
	gpublic
:

264 ~
li°íî
 (

267 
ac˚±
 (

268 
c⁄√˘i⁄
*& 
√w_c⁄√˘i⁄
,

269 
timeout
 = 0

272 
ac˚±
 (

273 
°d
::
unique_±r
<
c⁄√˘i⁄
>& 
√w_c⁄√˘i⁄
,

274 
timeout
 = 0

277 
gë_li°íög_p‹t
 (

278 Ë{  
	gli°íög_p‹t
; }

280 c⁄° 
	g°d
::
°rög
& 
gë_li°íög_ù
 (

281 Ë{  
li°íög_ù
; }

283 
	g¥iv©e
:

286 
SOCKET_c⁄èöî
& 
li°íög_sockë
;

287 c⁄° 
	gli°íög_p‹t
;

288 c⁄° 
	g°d
::
°rög
 
li°íög_ù
;

289 c⁄° 
boﬁ
 
	göaddr_™y
;

291 
li°íî
(

292 
SOCKET_c⁄èöî
 
sock
,

293 
p‹t
,

294 c⁄° 
°d
::
°rög
& 
ù


307 
li°íî
(listener&);

308 
	gli°íî
& 
	g›î©‹
=(
li°íî
&);

313 
¸óã_li°íî
 (

314 
li°íî
*& 
√w_li°íî
,

315 
p‹t
,

316 c⁄° 
°d
::
°rög
& 
ù
 = ""

319 
¸óã_c⁄√˘i⁄
 (

320 
c⁄√˘i⁄
*& 
√w_c⁄√˘i⁄
,

321 
f‹eign_p‹t
,

322 c⁄° 
°d
::
°rög
& 
f‹eign_ù
,

323 
loˇl_p‹t
 = 0,

324 c⁄° 
°d
::
°rög
& 
loˇl_ù
 = ""

327 
¸óã_li°íî
 (

328 
°d
::
unique_±r
<
li°íî
>& 
√w_li°íî
,

329 
p‹t
,

330 c⁄° 
°d
::
°rög
& 
ù
 = ""

333 
¸óã_c⁄√˘i⁄
 (

334 
°d
::
unique_±r
<
c⁄√˘i⁄
>& 
√w_c⁄√˘i⁄
,

335 
f‹eign_p‹t
,

336 c⁄° 
°d
::
°rög
& 
f‹eign_ù
,

337 
loˇl_p‹t
 = 0,

338 c⁄° 
°d
::
°rög
& 
loˇl_ù
 = ""

346 #ifde‡
NO_MAKEFILE


347 
	~"sockës_kî√l_1.˝p
"

	@viper/concurrentqueue-src/benchmarks/dlib/sockets/sockets_kernel_2.h

3 #i‚de‡
DLIB_SOCKETS_KERNEl_2_


4 
	#DLIB_SOCKETS_KERNEl_2_


	)

6 #ifde‡
DLIB_ISO_CPP_ONLY


10 
	~"../∂©f‹m.h
"

12 
	~"sockës_kî√l_ab°ø˘.h
"

14 
	#_BSD_SOCKLEN_T_


	)

16 
	~<˘ime
>

17 
	~<mem‹y
>

18 
	~<°rög
>

20 
	~<sys/ty≥s.h
>

21 
	~<sys/sockë.h
>

22 
	~<î∫o.h
>

24 #i‚de‡
HPUX


25 
	~<sys/£À˘.h
>

27 
	~<¨∑/öë.h
>

28 
	~<sig«l.h
>

29 
	~<öây≥s.h
>

30 
	~<√tdb.h
>

31 
	~<uni°d.h
>

32 
	~<sys/∑øm.h
>

34 
	~<√töë/ö.h
>

36 
	~"../thªads.h
"

37 
	~"../Ægs.h
"

42 
«me•a˚
 
	gdlib


48 
˛ass
 
	gsockë_Á˘‹y
;

49 
˛ass
 
	gli°íî
;

56 
gë_loˇl_ho°«me
 (

57 
°d
::
°rög
& 
ho°«me


63 
ho°«me_to_ù
 (

64 c⁄° 
°d
::
°rög
& 
ho°«me
,

65 
°d
::
°rög
& 
ù
,

66 
n
 = 0

72 
ù_to_ho°«me
 (

73 c⁄° 
°d
::
°rög
& 
ù
,

74 
°d
::
°rög
& 
ho°«me


83 ˛as†
	cc⁄√˘i⁄


113 
‰õnd
 
˛ass
 
	gli°íî
;

115 
‰õnd
 
¸óã_c⁄√˘i⁄
 (

116 
c⁄√˘i⁄
*& 
√w_c⁄√˘i⁄
,

117 
f‹eign_p‹t
,

118 c⁄° 
°d
::
°rög
& 
f‹eign_ù
,

119 
loˇl_p‹t
,

120 c⁄° 
°d
::
°rög
& 
loˇl_ù


123 
	gpublic
:

125 ~
c⁄√˘i⁄
();

127 * 
	gu£r_d©a
;

129 
wrôe
 (

130 c⁄° * 
buf
,

131 
num


134 
ªad
 (

135 * 
buf
,

136 
num


139 
ªad
 (

140 * 
buf
,

141 
num
,

142 
timeout


145 
gë_loˇl_p‹t
 (

146 Ëc⁄° {  
	gc⁄√˘i⁄_loˇl_p‹t
; }

148 
gë_f‹eign_p‹t
 (

149 Ëc⁄° {  
	gc⁄√˘i⁄_f‹eign_p‹t
; }

151 c⁄° 
	g°d
::
°rög
& 
gë_loˇl_ù
 (

152 Ëc⁄° {  
c⁄√˘i⁄_loˇl_ù
; }

154 c⁄° 
	g°d
::
°rög
& 
gë_f‹eign_ù
 (

155 Ëc⁄° {  
c⁄√˘i⁄_f‹eign_ù
; }

157 
shutdown_outgoög
 (

160 
	gsd_muãx
.
lock
();

161 i‡(
	gsdo
 || 
	gsd
)

163 
	gsd_muãx
.
u∆ock
();

164  
	gsdr
;

166 
	gsdo
 = 
åue
;

167 
	gsdr
 = ::
shutdown
(
c⁄√˘i⁄_sockë
,
SHUT_WR
);

168 
	gãmp
 = 
sdr
;

169 
	gsd_muãx
.
u∆ock
();

170  
	gãmp
;

173 
shutdown
 (

176 
	gsd_muãx
.
lock
();

177 i‡(
	gsd
)

179 
	gsd_muãx
.
u∆ock
();

180  
	gsdr
;

182 
	gsd
 = 
åue
;

183 
	gsdr
 = ::
shutdown
(
c⁄√˘i⁄_sockë
,
SHUT_RDWR
);

184 
	gãmp
 = 
sdr
;

185 
	gsd_muãx
.
u∆ock
();

186  
	gãmp
;

189 
dißbÀ_«gÀ
(

192 
	tsockë_des¸ùt‹_ty≥
;

194 
sockë_des¸ùt‹_ty≥
 
gë_sockë_des¸ùt‹
 (

195 Ëc⁄° {  
	gc⁄√˘i⁄_sockë
; }

197 
	g¥iv©e
:

199 
boﬁ
 
ªadabÀ
 (

200 
timeout


211 
boﬁ
 
sd_ˇŒed
 (

219 
	gsd_muãx
.
lock
();

220 
boﬁ
 
	gãmp
 = 
sd
;

221 
	gsd_muãx
.
u∆ock
();

222  
	gãmp
;

225 
boﬁ
 
sdo_ˇŒed
 (

233 
	gsd_muãx
.
lock
();

234 
boﬁ
 
	gãmp
 = 
Ál£
;

235 i‡(
	gsdo
 || 
	gsd
)

236 
	gãmp
 = 
åue
;

237 
	gsd_muãx
.
u∆ock
();

238  
	gãmp
;

243 
	gc⁄√˘i⁄_sockë
;

244 c⁄° 
	gc⁄√˘i⁄_f‹eign_p‹t
;

245 c⁄° 
	g°d
::
°rög
 
c⁄√˘i⁄_f‹eign_ù
;

246 c⁄° 
	gc⁄√˘i⁄_loˇl_p‹t
;

247 c⁄° 
	g°d
::
°rög
 
c⁄√˘i⁄_loˇl_ù
;

249 
boﬁ
 
	gsd
;

250 
boﬁ
 
	gsdo
;

251 
	gsdr
;

252 
muãx
 
	gsd_muãx
;

254 
c⁄√˘i⁄
(

255 
sock
,

256 
f‹eign_p‹t
,

257 c⁄° 
°d
::
°rög
& 
f‹eign_ù
,

258 
loˇl_p‹t
,

259 c⁄° 
°d
::
°rög
& 
loˇl_ù


272 
c⁄√˘i⁄
();

273 
c⁄√˘i⁄
(connection&);

274 
	gc⁄√˘i⁄
& 
	g›î©‹
=(
c⁄√˘i⁄
&);

283 ˛as†
	cli°íî


302 
‰õnd
 
¸óã_li°íî
 (

303 
li°íî
*& 
√w_li°íî
,

304 
p‹t
,

305 c⁄° 
°d
::
°rög
& 
ù


308 
	gpublic
:

310 ~
li°íî
();

312 
ac˚±
 (

313 
c⁄√˘i⁄
*& 
√w_c⁄√˘i⁄
,

314 
timeout
 = 0

317 
ac˚±
 (

318 
°d
::
unique_±r
<
c⁄√˘i⁄
>& 
√w_c⁄√˘i⁄
,

319 
timeout
 = 0

322 
gë_li°íög_p‹t
 (

323 Ëc⁄° {  
	gli°íög_p‹t
; }

325 c⁄° 
	g°d
::
°rög
& 
gë_li°íög_ù
 (

326 Ëc⁄° {  
li°íög_ù
; }

328 
	g¥iv©e
:

331 
li°íög_sockë
;

332 c⁄° 
	gli°íög_p‹t
;

333 c⁄° 
	g°d
::
°rög
 
li°íög_ù
;

334 c⁄° 
boﬁ
 
	göaddr_™y
;

336 
li°íî
(

337 
sock
,

338 
p‹t
,

339 c⁄° 
°d
::
°rög
& 
ù


352 
li°íî
();

353 
li°íî
(listener&);

354 
	gli°íî
& 
	g›î©‹
=(
li°íî
&);

359 
¸óã_li°íî
 (

360 
li°íî
*& 
√w_li°íî
,

361 
p‹t
,

362 c⁄° 
°d
::
°rög
& 
ù
 = ""

365 
¸óã_c⁄√˘i⁄
 (

366 
c⁄√˘i⁄
*& 
√w_c⁄√˘i⁄
,

367 
f‹eign_p‹t
,

368 c⁄° 
°d
::
°rög
& 
f‹eign_ù
,

369 
loˇl_p‹t
 = 0,

370 c⁄° 
°d
::
°rög
& 
loˇl_ù
 = ""

373 
¸óã_li°íî
 (

374 
°d
::
unique_±r
<
li°íî
>& 
√w_li°íî
,

375 
p‹t
,

376 c⁄° 
°d
::
°rög
& 
ù
 = ""

379 
¸óã_c⁄√˘i⁄
 (

380 
°d
::
unique_±r
<
c⁄√˘i⁄
>& 
√w_c⁄√˘i⁄
,

381 
f‹eign_p‹t
,

382 c⁄° 
°d
::
°rög
& 
f‹eign_ù
,

383 
loˇl_p‹t
 = 0,

384 c⁄° 
°d
::
°rög
& 
loˇl_ù
 = ""

391 #ifde‡
NO_MAKEFILE


392 
	~"sockës_kî√l_2.˝p
"

	@viper/concurrentqueue-src/benchmarks/dlib/sockets/sockets_kernel_abstract.h

3 #unde‡
DLIB_SOCKETS_KERNEl_ABSTRACT_


4 #ifde‡
DLIB_SOCKETS_KERNEl_ABSTRACT_


6 
	~<°rög
>

7 
	~"../thªads.h
"

9 
«me•a˚
 
	gdlib


40 
gë_loˇl_ho°«me
 (

41 
°d
::
°rög
& 
ho°«me


55 
ho°«me_to_ù
 (

56 c⁄° 
°d
::
°rög
& 
ho°«me
,

57 
°d
::
°rög
& 
ù
,

58 
n
 = 0

73 
ù_to_ho°«me
 (

74 c⁄° 
°d
::
°rög
& 
ù
,

75 
°d
::
°rög
& 
ho°«me


96 
¸óã_li°íî
 (

97 
li°íî
*& 
√w_li°íî
,

98 
p‹t
,

99 c⁄° 
°d
::
°rög
& 
ù
 = ""

119 
¸óã_li°íî
 (

120 
°d
::
unique_±r
<
li°íî
>& 
√w_li°íî
,

121 
p‹t
,

122 c⁄° 
°d
::
°rög
& 
ù
 = ""

129 
¸óã_c⁄√˘i⁄
 (

130 
c⁄√˘i⁄
*& 
√w_c⁄√˘i⁄
,

131 
f‹eign_p‹t
,

132 c⁄° 
°d
::
°rög
& 
f‹eign_ù
,

133 
loˇl_p‹t
 = 0,

134 c⁄° 
°d
::
°rög
& 
loˇl_ù
 = ""

156 
¸óã_c⁄√˘i⁄
 (

157 
°d
::
unique_±r
<
c⁄√˘i⁄
>& 
√w_c⁄√˘i⁄
,

158 
f‹eign_p‹t
,

159 c⁄° 
°d
::
°rög
& 
f‹eign_ù
,

160 
loˇl_p‹t
 = 0,

161 c⁄° 
°d
::
°rög
& 
loˇl_ù
 = ""

174 ˛as†
	cc⁄√˘i⁄


217 
	gpublic
:

219 ~
c⁄√˘i⁄
 (

229 * 
	gu£r_d©a
;

236 
wrôe
 (

237 c⁄° * 
buf
,

238 
num


257 
ªad
 (

258 * 
buf
,

259 
num


279 
ªad
 (

280 * 
buf
,

281 
num
,

282 
timeout


307 
gë_loˇl_p‹t
 (

314 
gë_f‹eign_p‹t
 (

321 c⁄° 
	g°d
::
°rög
& 
gë_loˇl_ù
 (

328 c⁄° 
	g°d
::
°rög
& 
gë_f‹eign_ù
 (

335 
shutdown
 (

350 
shutdown_outgoög
 (

365 
dißbÀ_«gÀ
(

378 
∂©f‹m_•ecific_ty≥
 
	tsockë_des¸ùt‹_ty≥
;

379 
sockë_des¸ùt‹_ty≥
 
gë_sockë_des¸ùt‹
 (

392 
	g¥iv©e
:

394 
c⁄√˘i⁄
();

395 
c⁄√˘i⁄
(connection&);

396 
	gc⁄√˘i⁄
& 
	g›î©‹
=(
c⁄√˘i⁄
&);

406 ˛as†
	cli°íî


429 
	gpublic
:

431 ~
li°íî
 (

441 
ac˚±
 (

442 
c⁄√˘i⁄
*& 
√w_c⁄√˘i⁄
,

443 
timeout
 = 0

461 
ac˚±
 (

462 
°d
::
unique_±r
<
c⁄√˘i⁄
>& 
√w_c⁄√˘i⁄
,

463 
timeout
 = 0

470 
gë_li°íög_p‹t
 (

477 c⁄° 
	g°d
::
°rög
& 
gë_li°íög_ù
 (

486 
	g¥iv©e
:

488 
li°íî
();

489 
li°íî
(listener&);

490 
	gli°íî
& 
	g›î©‹
=(
li°íî
&);

	@viper/concurrentqueue-src/benchmarks/dlib/sockets/windows.h

3 #i‚de‡
DLIB_SOCKETS_KERNEl_2_


4 
	~"sockës_kî√l_1.h
"

	@viper/concurrentqueue-src/benchmarks/dlib/sort.h

3 #i‚de‡
DLIB_SORt_


4 
	#DLIB_SORt_


	)

6 
	~"Ægs.h
"

7 
	~<fun˘i⁄Æ
>

9 
«me•a˚
 
	gdlib


14 
	gãm∂©e
 <

15 
ty≥«me
 
	gT
,

16 
ty≥«me
 
	gcom∑ª


18 
ölöe
 
qs‹t_¨øy
 (

19 
T
& 
¨øy
,

20 
À·
,

21 
right
,

22 c⁄° 
com∑ª
& 
comp


41 
	gãm∂©e
 <

42 
ty≥«me
 
	gT
,

43 
ty≥«me
 
	gcom∑ª


45 
hs‹t_¨øy
 (

46 
T
& 
¨øy
,

47 
À·
,

48 
right
,

49 c⁄° 
com∑ª
& 
comp


68 
	gãm∂©e
 <

69 
ty≥«me
 
	gT
,

70 
ty≥«me
 
	gcom∑ª


72 
is‹t_¨øy
 (

73 
T
& 
¨øy
,

74 
À·
,

75 
right
,

76 c⁄° 
com∑ª
& 
comp


95 
	gãm∂©e
 <

96 
ty≥«me
 
	gT


98 
ölöe
 
qs‹t_¨øy
 (

99 
T
& 
¨øy
,

100 
À·
,

101 
right


119 
	gãm∂©e
 <

120 
ty≥«me
 
	gT


122 
hs‹t_¨øy
 (

123 
T
& 
¨øy
,

124 
À·
,

125 
right


143 
	gãm∂©e
 <

144 
ty≥«me
 
	gT


146 
is‹t_¨øy
 (

147 
T
& 
¨øy
,

148 
À·
,

149 
right


171 
«me•a˚
 
	gs‹t_hñ≥rs


173 
	gãm∂©e
 <
ty≥«me
 
	gT
>

174 
ölöe
 c⁄° 
	g°d
::
Àss
<
T
> 
comp
 (const T&)

176  
°d
::
Àss
<
T
>();

179 
	gãm∂©e
 <

180 
ty≥«me
 
	gT
,

181 
ty≥«me
 
	gY
,

182 
ty≥«me
 
	gcom∑ª


184 
ölöe
 
qs‹t_∑πôi⁄
 (

185 
T
& 
¨øy
,

186 
Y
& 
pivŸ
,

187 c⁄° 
À·
,

188 c⁄° 
right
,

189 c⁄° 
com∑ª
& 
comp


207 
DLIB_ASSERT
 (&
pivŸ
 =&
¨øy
[
right
] && 
À·
 <Ñight,

209 << "\n\t&pivŸ: " << &
pivŸ


210 << "\n\t&¨øy[right]: " << &
¨øy
[
right
]

211 << "\n\ée·: " << 
À·


212 << "\n\åight: " << 
right
 );

214 
exch™ge
(
¨øy
[(
right
-
À·
)/2 +À·],
pivŸ
);

216 
	gi
 = 
À·
;

217 
	gj
 = 
À·
; j < 
	gright
; ++j)

219 i‡(
comp
(
¨øy
[
j
] , 
pivŸ
))

221 
sw≠
(
¨øy
[
i
],¨øy[
j
]);

222 ++
	gi
;

225 
exch™ge
(
¨øy
[
i
],
pivŸ
);

227  
	gi
;

232 
	gãm∂©e
 <

233 
ty≥«me
 
	gT
,

234 
ty≥«me
 
	gcom∑ª


236 
qs‹t_¨øy_maö
 (

237 
T
& 
¨øy
,

238 c⁄° 
À·
,

239 c⁄° 
right
,

240 
dïth_check
,

241 c⁄° 
com∑ª
& 
comp


257 i‡–
	gÀ·
 < 
	gright
)

259 i‡(
	gright
-
	gÀ·
 < 30 || 
	gdïth_check
 == 0)

261 
hs‹t_¨øy
(
¨øy
,
À·
,
right
,
comp
);

267 
	gdïth_check
 >>= 1;

268 
	gdïth_check
 +(
dïth_check
>>4);

270 
	g∑πôi⁄_ñemít
 =

271 
qs‹t_∑πôi⁄
(
¨øy
,¨øy[
right
],
À·
,right,
comp
);

273 i‡(
	g∑πôi⁄_ñemít
 > 0)

274 
qs‹t_¨øy_maö
(
¨øy
,
À·
,
∑πôi⁄_ñemít
-1,
dïth_check
,
comp
);

275 
qs‹t_¨øy_maö
(
¨øy
,
∑πôi⁄_ñemít
+1,
right
,
dïth_check
,
comp
);

282 
	gãm∂©e
 <

283 
ty≥«me
 
	gT
,

284 
ty≥«me
 
	gcom∑ª


286 
hópify
 (

287 
T
& 
¨øy
,

288 c⁄° 
°¨t
,

289 c⁄° 
íd
,

290 
i
,

291 c⁄° 
com∑ª
& 
comp


308 
DLIB_ASSERT
 (
°¨t
 <
i
 && i <
íd
,

310 << "\n\t°¨t: " << 
°¨t


311 << "\n\ãnd: " << 
íd


312 << "\n\ti: " << 
i
 );

314 
boﬁ
 
	gkìp_goög
 = 
åue
;

315 
	gÀ·
;

316 
	gright
;

317 
	gœrge°
;

318 
	gkìp_goög
)

320 
	gkìp_goög
 = 
Ál£
;

321 
	gÀ·
 = (
i
<<1)+1-
°¨t
;

322 
	gright
 = 
À·
+1;

324 i‡(
	gÀ·
 <
íd
 && 
comp
(
¨øy
[
i
] ,áºay[
À·
]))

325 
	gœrge°
 = 
À·
;

327 
	gœrge°
 = 
i
;

329 i‡(
	gright
 <
íd
 && 
comp
(
¨øy
[
œrge°
] ,áºay[
right
]))

330 
	gœrge°
 = 
right
;

332 i‡(
	gœrge°
 !
i
)

334 
exch™ge
(
¨øy
[
i
],¨øy[
œrge°
]);

335 
	gi
 = 
œrge°
;

336 
	gkìp_goög
 = 
åue
;

346 
	gãm∂©e
 <

347 
ty≥«me
 
	gT


349 
ölöe
 
qs‹t_¨øy
 (

350 
T
& 
¨øy
,

351 
À·
,

352 
right


355 
usög
 
«me•a˚
 
	gs‹t_hñ≥rs
;

356 
qs‹t_¨øy
(
¨øy
,
À·
,
right
,
comp
(array[left]));

361 
	gãm∂©e
 <

362 
ty≥«me
 
	gT


364 
hs‹t_¨øy
 (

365 
T
& 
¨øy
,

366 
À·
,

367 
right


370 
usög
 
«me•a˚
 
	gs‹t_hñ≥rs
;

371 
hs‹t_¨øy
(
¨øy
,
À·
,
right
,
comp
(array[left]));

376 
	gãm∂©e
 <

377 
ty≥«me
 
	gT


379 
is‹t_¨øy
 (

380 
T
& 
¨øy
,

381 
À·
,

382 
right


385 
usög
 
«me•a˚
 
	gs‹t_hñ≥rs
;

386 
is‹t_¨øy
(
¨øy
,
À·
,
right
,
comp
(array[left]));

391 
	gãm∂©e
 <

392 
ty≥«me
 
	gT
,

393 
ty≥«me
 
	gcom∑ª


395 
is‹t_¨øy
 (

396 
T
& 
¨øy
,

397 c⁄° 
À·
,

398 c⁄° 
right
,

399 c⁄° 
com∑ª
& 
comp


402 
DLIB_ASSERT
 (
À·
 <
right
,

404 << "\n\ée·: " << 
À·


405 << "\n\åight: " << 
right
 );

406 
usög
 
«me•a˚
 
	gs‹t_hñ≥rs
;

408 
	gpos
;

409 
	gi
 = 
À·
+1; i <
right
; ++i)

412 
	gpos
 = 
i
;

413 
	gj
 = 
i
-1; 
comp
(
¨øy
[
pos
] ,áºay[
j
]); --j)

415 
exch™ge
(
¨øy
[
pos
],¨øy[
j
]);

416 
	gpos
 = 
j
;

418 i‡(
	gj
 =
À·
)

426 
	gãm∂©e
 <

427 
ty≥«me
 
	gT
,

428 
ty≥«me
 
	gcom∑ª


430 
qs‹t_¨øy
 (

431 
T
& 
¨øy
,

432 c⁄° 
À·
,

433 c⁄° 
right
,

434 c⁄° 
com∑ª
& 
comp


437 
DLIB_ASSERT
 (
À·
 <
right
,

439 << "\n\ée·: " << 
À·


440 << "\n\åight: " << 
right
 );

442 
	gs‹t_hñ≥rs
::
qs‹t_¨øy_maö
(
¨øy
,
À·
,
right
,right-À·,
comp
);

447 
	gãm∂©e
 <

448 
ty≥«me
 
	gT
,

449 
ty≥«me
 
	gcom∑ª


451 
hs‹t_¨øy
 (

452 
T
& 
¨øy
,

453 c⁄° 
À·
,

454 c⁄° 
right
,

455 c⁄° 
com∑ª
& 
comp


458 
DLIB_ASSERT
 (
À·
 <
right
,

460 << "\n\ée·: " << 
À·


461 << "\n\åight: " << 
right
 );

463 i‡(
	gright
-
	gÀ·
 < 30)

465 
is‹t_¨øy
(
¨øy
,
À·
,
right
,
comp
);

470 
	gi
 = 
À·
+((
right
-left)>>1);; --i)

472 
	gs‹t_hñ≥rs
::
hópify
(
¨øy
,
À·
,
right
,
i
,
comp
);

473 i‡(
	gi
 =
À·
)

478 
	gi
 = 
right
; i > 
	gÀ·
;)

480 
exch™ge
(
¨øy
[
i
],¨øy[
À·
]);

481 
	gs‹t_hñ≥rs
::
hópify
(
¨øy
,
À·
,--
i
,À·,
comp
);

	@viper/concurrentqueue-src/benchmarks/dlib/sparse_vector.h

3 #i‚de‡
DLIB_SPaRSE_VECTOR_Hh_


4 
	#DLIB_SPaRSE_VECTOR_Hh_


	)

6 
	~"svm/•¨£_ve˘‹.h
"

	@viper/concurrentqueue-src/benchmarks/dlib/stack.h

3 #i‚de‡
DLIB_STACk_


4 
	#DLIB_STACk_


	)

6 
	~"°ack/°ack_kî√l_1.h
"

7 
	~"°ack/°ack_kî√l_c.h
"

8 
	~"Ægs.h
"

10 
«me•a˚
 
	gdlib


13 
	gãm∂©e
 <

14 
ty≥«me
 
	gT
,

15 
ty≥«me
 
	gmem_m™agî
 = 
deÁu…_mem‹y_m™agî


17 ˛as†
	c°ack


19 
°ack
() {}

20 
public
:

25 
°ack_kî√l_1
<
	tT
,
	tmem_m™agî
>

26 
	tkî√l_1a
;

27 
	g°ack_kî√l_c
<
	tkî√l_1a
>

28 
	tkî√l_1a_c
;

	@viper/concurrentqueue-src/benchmarks/dlib/stack/stack_kernel_1.h

3 #i‚de‡
DLIB_STACK_KERNEl_1_


4 
	#DLIB_STACK_KERNEl_1_


	)

6 
	~"°ack_kî√l_ab°ø˘.h
"

7 
	~"../Ægs.h
"

8 
	~"../öãrÁ˚s/íumîabÀ.h
"

9 
	~"../öãrÁ˚s/ªmovî.h
"

10 
	~"../£rülize.h
"

12 
«me•a˚
 
	gdlib


15 
	gãm∂©e
 <

16 
ty≥«me
 
	gT
,

17 
ty≥«me
 
	gmem_m™agî
 = 
deÁu…_mem‹y_m™agî


19 
˛ass
 
°ack_kî√l_1
 : 
public
 
íumîabÀ
<
T
>,

20 
public
 
	gªmovî
<
	gT
>

51 
	snode


53 
node
* 
	g√xt
;

54 
T
 
	gôem
;

57 
	gpublic
:

59 
T
 
	tty≥
;

60 
mem_m™agî
 
	tmem_m™agî_ty≥
;

62 
°ack_kî√l_1
(

64 
t›
(0),

65 
°ack_size
(0),

66 
cuºít_ñemít
(0),

67 
_©_°¨t
(
åue
)

70 
	gvútuÆ
 ~
°ack_kî√l_1
(

73 
ölöe
 
˛ór
(

76 
ölöe
 
push
(

77 
T
& 
ôem


80 
p›
(

81 
T
& 
ôem


84 
	gT
& 
cuºít
(

87 c⁄° 
	gT
& 
cuºít
(

90 
ölöe
 
sw≠
 (

91 
°ack_kî√l_1
& 
ôem


95 
ölöe
 
ªmove_™y
 (

96 
T
& 
ôem


100 
ölöe
 
size_t
 
size
 (

103 
ölöe
 
boﬁ
 
©_°¨t
 (

106 
ölöe
 
ª£t
 (

109 
boﬁ
 
cuºít_ñemít_vÆid
 (

112 
ölöe
 c⁄° 
	gT
& 
ñemít
 (

115 
ölöe
 
	gT
& 
ñemít
 (

118 
boﬁ
 
move_√xt
 (

121 
	g¥iv©e
:

123 
dñëe_ñemíts_ö_°ack
(

124 
node
*& 
t›


136 
ty≥«me
 
	gmem_m™agî
::
ãm∂©e
 
ªböd
<
node
>::
Ÿhî
 
poﬁ
;

137 
node
* 
	gt›
;

138 
	g°ack_size
;

139 
muèbÀ
 
node
* 
	gcuºít_ñemít
;

140 
muèbÀ
 
boﬁ
 
	g_©_°¨t
;

144 
°ack_kî√l_1
(stack_kernel_1&);

145 
	g°ack_kî√l_1
& 
	g›î©‹
=(
°ack_kî√l_1
&);

150 
	gãm∂©e
 <

151 
ty≥«me
 
	gT
,

152 
ty≥«me
 
	gmem_m™agî


154 
ölöe
 
sw≠
 (

155 
°ack_kî√l_1
<
T
,
mem_m™agî
>& 
a
,

156 
°ack_kî√l_1
<
T
,
mem_m™agî
>& 
b


157 Ë{ 
	ga
.
sw≠
(
b
); }

159 
	gãm∂©e
 <

160 
ty≥«me
 
	gT
,

161 
ty≥«me
 
	gmem_m™agî


163 
de£rülize
 (

164 
°ack_kî√l_1
<
T
,
mem_m™agî
>& 
ôem
,

165 
°d
::
i°ªam
& 
ö


168 
åy


170 
ôem
.
˛ór
();

171 
	gsize
;

172 
de£rülize
(
size
,
ö
);

173 
T
 
	gãmp
 = T();

174 
	g°ack_kî√l_1
<
	gT
> 
	gãmp_°ack
;

175 
	gi
 = 0; i < 
	gsize
; ++i)

177 
de£rülize
(
ãmp
,
ö
);

178 
	gãmp_°ack
.
push
(
ãmp
);

180 
	gãmp_°ack
.
size
() > 0)

182 
	gãmp_°ack
.
p›
(
ãmp
);

183 
	gôem
.
push
(
ãmp
);

186 
ˇtch
 (
£rüliz©i⁄_îr‹
& 
e
)

188 
	gôem
.
˛ór
();

189 
throw
 
£rüliz©i⁄_îr‹
(
e
.
öfo
 + "\n while deserializing object ofÅype stack_kernel_1");

199 
	gãm∂©e
 <

200 
ty≥«me
 
	gT
,

201 
ty≥«me
 
	gmem_m™agî


203 
	g°ack_kî√l_1
<
	gT
,
	gmem_m™agî
>::

204 ~
°ack_kî√l_1
(

207 
dñëe_ñemíts_ö_°ack
(
t›
);

212 
	gãm∂©e
 <

213 
ty≥«me
 
	gT
,

214 
ty≥«me
 
	gmem_m™agî


216 
	g°ack_kî√l_1
<
	gT
,
	gmem_m™agî
>::

217 
˛ór
(

220 i‡(
°ack_size
 != 0)

222 
dñëe_ñemíts_ö_°ack
(
t›
);

223 
	g°ack_size
 = 0;

225 
ª£t
();

230 
	gãm∂©e
 <

231 
ty≥«me
 
	gT
,

232 
ty≥«me
 
	gmem_m™agî


234 
	gT
& 
	g°ack_kî√l_1
<T,
	gmem_m™agî
>::

235 
cuºít
(

238  
t›
->
ôem
;

243 
	gãm∂©e
 <

244 
ty≥«me
 
	gT
,

245 
ty≥«me
 
	gmem_m™agî


247 c⁄° 
	gT
& 
	g°ack_kî√l_1
<T,
	gmem_m™agî
>::

248 
cuºít
(

251  
t›
->
ôem
;

256 
	gãm∂©e
 <

257 
ty≥«me
 
	gT
,

258 
ty≥«me
 
	gmem_m™agî


260 
	g°ack_kî√l_1
<
	gT
,
	gmem_m™agî
>::

261 
sw≠
(

262 
°ack_kî√l_1
<
T
,
mem_m™agî
>& 
ôem


265 
	gpoﬁ
.
sw≠
(
ôem
.
poﬁ
);

268 
node
* 
	gt›_ãmp
;

269 
	g°ack_size_ãmp
;

272 
	g°ack_size_ãmp
 = 
ôem
.
°ack_size
;

273 
	gôem
.
	g°ack_size
 = 
°ack_size
;

274 
	g°ack_size
 = 
°ack_size_ãmp
;

277 
	gt›_ãmp
 = 
ôem
.
t›
;

278 
	gôem
.
	gt›
 = 
t›
;

279 
	gt›
 = 
t›_ãmp
;

281 
exch™ge
(
cuºít_ñemít
,
ôem
.current_element);

282 
exch™ge
(
_©_°¨t
,
ôem
._at_start);

287 
	gãm∂©e
 <

288 
ty≥«me
 
	gT
,

289 
ty≥«me
 
	gmem_m™agî


291 
	g°ack_kî√l_1
<
	gT
,
	gmem_m™agî
>::

292 
push
(

293 
T
& 
ôem


297 
node
* 
√w_node
 = 
poﬁ
.
Æloˇã
();

300 
exch™ge
(
√w_node
->
ôem
,item);

303 
	g√w_node
->
	g√xt
 = 
t›
;

304 
	gt›
 = 
√w_node
;

305 ++
	g°ack_size
;

307 
ª£t
();

312 
	gãm∂©e
 <

313 
ty≥«me
 
	gT
,

314 
ty≥«me
 
	gmem_m™agî


316 
	g°ack_kî√l_1
<
	gT
,
	gmem_m™agî
>::

317 
p›
(

318 
T
& 
ôem


321 
node
* 
ﬁd_node
 = 
t›
;

322 
	gt›
 = 
t›
->
√xt
;

325 
exch™ge
(
ﬁd_node
->
ôem
,item);

328 
	gpoﬁ
.
dóŒoˇã
(
ﬁd_node
);

329 --
	g°ack_size
;

331 
ª£t
();

340 
	gãm∂©e
 <

341 
ty≥«me
 
	gT
,

342 
ty≥«me
 
	gmem_m™agî


344 
	g°ack_kî√l_1
<
	gT
,
	gmem_m™agî
>::

345 
dñëe_ñemíts_ö_°ack
(

346 
node
*& 
t›


349 
node
* 
ãmp
;

350 
	gt›
 != 0)

352 
ãmp
 = 
t›
->
√xt
;

353 
	gpoﬁ
.
dóŒoˇã
(
t›
);

354 
	gt›
 = 
ãmp
;

364 
	gãm∂©e
 <

365 
ty≥«me
 
	gT
,

366 
ty≥«me
 
	gmem_m™agî


368 
size_t
 
	g°ack_kî√l_1
<
	gT
,
	gmem_m™agî
>::

369 
size
 (

372  
°ack_size
;

377 
	gãm∂©e
 <

378 
ty≥«me
 
	gT
,

379 
ty≥«me
 
	gmem_m™agî


381 
boﬁ
 
	g°ack_kî√l_1
<
	gT
,
	gmem_m™agî
>::

382 
©_°¨t
 (

385  
_©_°¨t
;

390 
	gãm∂©e
 <

391 
ty≥«me
 
	gT
,

392 
ty≥«me
 
	gmem_m™agî


394 
	g°ack_kî√l_1
<
	gT
,
	gmem_m™agî
>::

395 
ª£t
 (

398 
_©_°¨t
 = 
åue
;

399 
	gcuºít_ñemít
 = 0;

404 
	gãm∂©e
 <

405 
ty≥«me
 
	gT
,

406 
ty≥«me
 
	gmem_m™agî


408 
boﬁ
 
	g°ack_kî√l_1
<
	gT
,
	gmem_m™agî
>::

409 
cuºít_ñemít_vÆid
 (

412  
cuºít_ñemít
 != 0;

417 
	gãm∂©e
 <

418 
ty≥«me
 
	gT
,

419 
ty≥«me
 
	gmem_m™agî


421 c⁄° 
	gT
& 
	g°ack_kî√l_1
<T,
	gmem_m™agî
>::

422 
ñemít
 (

425  
cuºít_ñemít
->
ôem
;

430 
	gãm∂©e
 <

431 
ty≥«me
 
	gT
,

432 
ty≥«me
 
	gmem_m™agî


434 
	gT
& 
	g°ack_kî√l_1
<T,
	gmem_m™agî
>::

435 
ñemít
 (

438  
cuºít_ñemít
->
ôem
;

443 
	gãm∂©e
 <

444 
ty≥«me
 
	gT
,

445 
ty≥«me
 
	gmem_m™agî


447 
boﬁ
 
	g°ack_kî√l_1
<
	gT
,
	gmem_m™agî
>::

448 
move_√xt
 (

451 i‡(!
_©_°¨t
)

453 i‡(
cuºít_ñemít
)

455 
cuºít_ñemít
 = cuºít_ñemít->
√xt
;

456 i‡(
	gcuºít_ñemít
)

457  
	gåue
;

459  
	gÁl£
;

463  
	gÁl£
;

468 
	g_©_°¨t
 = 
Ál£
;

469 i‡(
	g°ack_size
)

471 
	gcuºít_ñemít
 = 
t›
;

472  
	gåue
;

476  
	gÁl£
;

487 
	gãm∂©e
 <

488 
ty≥«me
 
	gT
,

489 
ty≥«me
 
	gmem_m™agî


491 
	g°ack_kî√l_1
<
	gT
,
	gmem_m™agî
>::

492 
ªmove_™y
 (

493 
T
& 
ôem


496 
p›
(
ôem
);

	@viper/concurrentqueue-src/benchmarks/dlib/stack/stack_kernel_abstract.h

3 #unde‡
DLIB_STACK_KERNEl_ABSTRACT_


4 #ifde‡
DLIB_STACK_KERNEl_ABSTRACT_


6 
	~"../öãrÁ˚s/íumîabÀ.h
"

7 
	~"../öãrÁ˚s/ªmovî.h
"

8 
	~"../£rülize.h
"

9 
	~"../Ægs.h
"

11 
«me•a˚
 
	gdlib


14 
	gãm∂©e
 <

15 
ty≥«me
 
	gT
,

16 
ty≥«me
 
	gmem_m™agî
 = 
deÁu…_mem‹y_m™agî


18 
˛ass
 
°ack
 : 
public
 
íumîabÀ
<
T
>,

19 
public
 
	gªmovî
<
	gT
>

57 
	gpublic
:

59 
T
 
	tty≥
;

60 
mem_m™agî
 
	tmem_m™agî_ty≥
;

62 
°ack
 (

71 
	gvútuÆ
 ~
°ack
 (

78 
˛ór
(

89 
push
 (

90 
T
& 
ôem


104 
p›
 (

105 
T
& 
ôem


118 
	gT
& 
cuºít
 (

127 c⁄° 
	gT
& 
cuºít
 (

136 
sw≠
 (

137 
°ack
& 
ôem


145 
	g¥iv©e
:

148 
°ack
(stack&);

149 
	g°ack
& 
	g›î©‹
=(
°ack
&);

154 
	gãm∂©e
 <

155 
ty≥«me
 
	gT
,

156 
ty≥«me
 
	gmem_m™agî


158 
ölöe
 
sw≠
 (

159 
°ack
<
T
,
mem_m™agî
>& 
a
,

160 
°ack
<
T
,
mem_m™agî
>& 
b


161 Ë{ 
	ga
.
sw≠
(
b
); }

166 
	gãm∂©e
 <

167 
ty≥«me
 
	gT
,

168 
ty≥«me
 
	gmem_m™agî


170 
de£rülize
 (

171 
°ack
<
T
,
mem_m™agî
>& 
ôem
,

172 
°d
::
i°ªam
& 
ö


	@viper/concurrentqueue-src/benchmarks/dlib/stack/stack_kernel_c.h

3 #i‚de‡
DLIB_STACK_KERNEl_C_


4 
	#DLIB_STACK_KERNEl_C_


	)

6 
	~"°ack_kî√l_ab°ø˘.h
"

7 
	~"../Ægs.h
"

8 
	~"../as£π.h
"

10 
«me•a˚
 
	gdlib


13 
	gãm∂©e
 <

14 
ty≥«me
 
	g°ack_ba£


16 ˛as†
	c°ack_kî√l_c
 : 
public
 
°ack_ba£


18 
ty≥«me
 
	t°ack_ba£
::
	tty≥
 
	tT
;

19 
	gpublic
:

20 
p›
(

21 
T
& 
ôem


24 
	gT
& 
cuºít
(

27 c⁄° 
	gT
& 
cuºít
(

30 c⁄° 
	gT
& 
ñemít
(

33 
	gT
& 
ñemít
(

36 
ªmove_™y
 (

37 
T
& 
ôem


43 
	gãm∂©e
 <

44 
ty≥«me
 
	g°ack_ba£


46 
ölöe
 
sw≠
 (

47 
°ack_kî√l_c
<
°ack_ba£
>& 
a
,

48 
°ack_kî√l_c
<
°ack_ba£
>& 
b


49 Ë{ 
	ga
.
sw≠
(
b
); }

57 
	gãm∂©e
 <

58 
ty≥«me
 
	g°ack_ba£


60 
	g°ack_kî√l_c
<
	g°ack_ba£
>::

61 
	$p›
(

62 
T
& 
ôem


67 
	`DLIB_CASSERT
(
this
->
	`size
() != 0,

70 << "\n\âhis: " << 
this


74 
°ack_ba£
::
	`p›
(
ôem
);

76 
	}
}

80 
	gãm∂©e
 <

81 
ty≥«me
 
	g°ack_ba£


83 c⁄° 
ty≥«me
 
	g°ack_ba£
::
ty≥
& 
°ack_kî√l_c
<
°ack_ba£
>::

84 
	$cuºít
(

88 
	`DLIB_CASSERT
(
this
->
	`size
() != 0,

91 << "\n\âhis: " << 
this


95  
°ack_ba£
::
	`cuºít
();

97 
	}
}

101 
	gãm∂©e
 <

102 
ty≥«me
 
	g°ack_ba£


104 
ty≥«me
 
	g°ack_ba£
::
ty≥
& 
°ack_kî√l_c
<
°ack_ba£
>::

105 
	$cuºít
(

109 
	`DLIB_CASSERT
(
this
->
	`size
() != 0,

112 << "\n\âhis: " << 
this


116  
°ack_ba£
::
	`cuºít
();

118 
	}
}

122 
	gãm∂©e
 <

123 
ty≥«me
 
	g°ack_ba£


125 
ty≥«me
 
	g°ack_ba£
::
ty≥
& 
°ack_kî√l_c
<
°ack_ba£
>::

126 
	$ñemít
(

130 
	`DLIB_CASSERT
(
this
->
	`cuºít_ñemít_vÆid
(),

133 << "\n\âhis: " << 
this


137  
°ack_ba£
::
	`ñemít
();

139 
	}
}

143 
	gãm∂©e
 <

144 
ty≥«me
 
	g°ack_ba£


146 c⁄° 
ty≥«me
 
	g°ack_ba£
::
ty≥
& 
°ack_kî√l_c
<
°ack_ba£
>::

147 
	$ñemít
(

151 
	`DLIB_CASSERT
(
this
->
	`cuºít_ñemít_vÆid
(),

154 << "\n\âhis: " << 
this


158  
°ack_ba£
::
	`ñemít
();

160 
	}
}

164 
	gãm∂©e
 <

165 
ty≥«me
 
	g°ack_ba£


167 
	g°ack_kî√l_c
<
	g°ack_ba£
>::

168 
	$ªmove_™y
 (

169 
T
& 
ôem


173 
	`DLIB_CASSERT
–(
this
->
	`size
() > 0),

176 << "\n\tsize(): " << 
this
->
	`size
()

177 << "\n\âhis: " << 
this


181 
°ack_ba£
::
	`ªmove_™y
(
ôem
);

182 
	}
}

	@viper/concurrentqueue-src/benchmarks/dlib/stack_trace.h

3 #i‚de‡
DLIB_STACK_TRACe_


4 
	#DLIB_STACK_TRACe_


	)

52 
	~<°rög
>

53 
	~"as£π.h
"

57 #i‡
deföed
(
DLIB_ENABLE_STACK_TRACE
)

58 #ifde‡
NO_MAKEFILE


62 
«me•a˚
 
	gdlib


64 c⁄° 
	g°d
::
°rög
 
gë_°ack_åa˚
();

68 #unde‡
DLIBM_CASSERT


69 
	#DLIBM_CASSERT
(
_exp
,
_mesßge
) \

70 {i‡–!(
_exp
) ) \

72 
°d
::
o°rög°ªam
 
dlib_o_out
; \

73 
dlib_o_out
 << "\n\nEº‹ occuºedáàlöê" << 
__LINE__
 << ".\n"; \

74 
dlib_o_out
 << "Eº‹ occuºed i¿fûê" << 
__FILE__
 << ".\n"; \

75 
dlib_o_out
 << "Eº‹ occuºed i¿fun˘i⁄ " << 
DLIB_FUNCTION_NAME
 << ".\n\n"; \

76 
dlib_o_out
 << "FailingÉxpression was " << #_exp << ".\n"; \

77 
dlib_o_out
 << 
_mesßge
 << "\n\n"; \

78 
dlib_o_out
 << "Sèck Tø˚: \n" << 
dlib
::
	`gë_°ack_åa˚
() << "\n"; \

79 
	`dlib_as£π_bªakpoöt
(); \

80 
throw
 
dlib
::
	`Áèl_îr‹
(dlib::
EBROKEN_ASSERT
,
dlib_o_out
.
	`°r
()); \

81 }}

	)

85 
«me•a˚
 
	gdlib


88 ˛as†
	c°ack_åa˚r


90 
	gpublic
:

91 
°ack_åa˚r
 (

92 c⁄° * 
fun˘_«me
,

93 c⁄° * 
fûe_«me
,

94 c⁄° 
löe_numbî


97 ~
°ack_åa˚r
();

102 
	#DLIB_STACK_TRACE_NAMED
(
x
Ë
dlib
::
°ack_åa˚r
 
	`dlib_°ack_åa˚r_obje˘
(x,
__FILE__
,
__LINE__
)

	)

103 
	#DLIB_STACK_TRACE
 
dlib
::
°ack_åa˚r
 
	`dlib_°ack_åa˚r_obje˘
(
DLIB_FUNCTION_NAME
,
__FILE__
,
__LINE__
)

	)

106 
	#DLIB_STACK_TRACE_NAMED
(
x
)

	)

107 
	#DLIB_STACK_TRACE


	)

109 
«me•a˚
 
	gdlib


111 
ölöe
 c⁄° 
	g°d
::
°rög
 
gë_°ack_åa˚
(Ë{  
°d
::string("stackÅraceÇotÉnabled");}

	@viper/concurrentqueue-src/benchmarks/dlib/std_allocator.h

3 #i‚de‡
DLIB_STD_ALLOc_H_


4 
	#DLIB_STD_ALLOc_H_


	)

6 
	~<limôs
>

7 
	~<mem‹y
>

8 
	~"íabÀ_if.h
"

9 
	~"Ægs.h
"

11 
«me•a˚
 
	gdlib


16 
	gãm∂©e
 <

17 
ty≥«me
 
	gT
,

18 
ty≥«me
 
	gM


20 ˛as†
	c°d_Æloˇt‹


45 
	gpublic
:

47 
°d
::
	tsize_t
 
	tsize_ty≥
;

48 
	g°d
::
	t±rdiff_t
 
	tdif„ªn˚_ty≥
;

49 
T
* 
	tpoöãr
;

50 c⁄° 
	tT
* 
	tc⁄°_poöãr
;

51 
	gT
& 
	tª„ªn˚
;

52 c⁄° 
	tT
& 
	tc⁄°_ª„ªn˚
;

53 
T
 
	tvÆue_ty≥
;

56 
	gãm∂©e
 <
ty≥«me
 
	gU
>

57 
	sªböd
 {

58 
	g°d_Æloˇt‹
<
	tU
,
	tM
> 
	tŸhî
;

62 
poöãr
 
addªss
 (
ª„ªn˚
 
vÆue
Ëc⁄° {  &
	gvÆue
; }

64 
c⁄°_poöãr
 
addªss
 (
c⁄°_ª„ªn˚
 
vÆue
Ëc⁄° {  &
	gvÆue
; }

69 
°d_Æloˇt‹
(Ë
throw
() { }

71 
°d_Æloˇt‹
(c⁄° std_Æloˇt‹&Ë
throw
() { }

73 
	gãm∂©e
 <
ty≥«me
 
	gU
>

74 
°d_Æloˇt‹
 (c⁄° std_Æloˇt‹<
U
,
M
>&Ë
throw
() { }

76 ~
°d_Æloˇt‹
(Ë
throw
() { }

79 
size_ty≥
 
max_size
 (Ëc⁄° 
throw
()

82  
	g°d
::
numîic_limôs
<
size_t
>::
max
(Ë/ (
T
);

86 
poöãr
 
Æloˇã
 (

87 
size_ty≥
 
num
,

88 
ty≥«me
 
°d_Æloˇt‹
<,
M
>::
c⁄°_poöãr
 = 0

91  (
poöãr
Ë
poﬁ
.
Æloˇã_¨øy
(
num
*(
T
));

97 
c⁄°ru˘
(
poöãr
 
p
Ë{  c⁄°ru˘’, 
vÆue_ty≥
()); }

100 
c⁄°ru˘
 (
poöãr
 
p
, c⁄° 
T
& 
vÆue
)

103 
√w
((*)
p
)
T
(
vÆue
);

108 
de°roy
 (
poöãr
 
p
)

111 
	gp
->~
T
();

115 
dóŒoˇã
 (
poöãr
 
p
, 
size_ty≥
 )

117 
	gpoﬁ
.
dóŒoˇã_¨øy
((*)
p
);

120 
sw≠
 (

121 
°d_Æloˇt‹
& 
ôem


124 
	gpoﬁ
.
sw≠
(
ôem
.
poﬁ
);

127 
	g°d_Æloˇt‹
& 
	g›î©‹
(c⁄° 
°d_Æloˇt‹
&Ë{  *
this
;}

129 
	g¥iv©e
:

130 
ty≥«me
 
M
::
ãm∂©e
 
ªböd
<>::
Ÿhî
 
poﬁ
;

135 
	gãm∂©e
 <

136 
ty≥«me
 
	gM


138 
˛ass
 
	g°d_Æloˇt‹
<,
	gM
>

140 
	gpublic
:

142 
°d
::
	tsize_t
 
	tsize_ty≥
;

143 
	g°d
::
	t±rdiff_t
 
	tdif„ªn˚_ty≥
;

144 * 
	tpoöãr
;

145 c⁄° * 
	tc⁄°_poöãr
;

146 
	tvÆue_ty≥
;

149 
	gãm∂©e
 <
ty≥«me
 
	gU
>

150 
	sªböd
 {

151 
	g°d_Æloˇt‹
<
	tU
,
	tM
> 
	tŸhî
;

158 
	gãm∂©e
 <
ty≥«me
 
	gM1
,Åy≥«mê
	gM2
,Åy≥«mê
	gíabÀd
 = >

159 
	s°d_Æloc_com∑ª


160 { c⁄° 
boﬁ
 
¨e_öãrch™góbÀ
 = 
Ál£
; };

162 
	gãm∂©e
 <
ty≥«me
 
	gM1
,Åy≥«mê
	gM2
>

163 
	g°d_Æloc_com∑ª
<
	gM1
,
	gM2
,
ty≥«me
 
	gíabÀ_if
<
	gis_ßme_ty≥
<ty≥«mêM1::
mm_globÆ_ty≥
,Åy≥«mêM2::mm_globÆ_ty≥> >::
ty≥
>

164 { c⁄° 
boﬁ
 
¨e_öãrch™góbÀ
 = 
åue
; };

166 
	gãm∂©e
 <
ty≥«me
 
	gM
>

167 
	g°d_Æloc_com∑ª
<
	gM
,M,
ty≥«me
 
	gíabÀ_if_c
<M::
is_°©ñess
>::
ty≥
>

168 { c⁄° 
boﬁ
 
¨e_öãrch™góbÀ
 = 
åue
; };

172 
	gãm∂©e
 <
ty≥«me
 
	gT1
,Åy≥«mê
	gM1
,Åy≥«mê
	gT2
,Åy≥«mê
	gM2
>

173 
boﬁ
 
	g›î©‹
== (

174 c⁄° 
°d_Æloˇt‹
<
T1
,
	gM1
>&,

175 c⁄° 
	g°d_Æloˇt‹
<
	gT2
,
	gM2
>&

176 Ë
	$throw
()

177 {  
°d_Æloc_com∑ª
<
M1
,
M2
>::
¨e_öãrch™góbÀ
; 
	}
}

179 
	gãm∂©e
 <
ty≥«me
 
	gT1
,Åy≥«mê
	gM1
,Åy≥«mê
	gT2
,Åy≥«mê
	gM2
>

180 
boﬁ
 
	g›î©‹
!= (

181 c⁄° 
°d_Æloˇt‹
<
T1
,
	gM1
>&,

182 c⁄° 
	g°d_Æloˇt‹
<
	gT2
,
	gM2
>&

183 Ë
	$throw
()

184 {  !
°d_Æloc_com∑ª
<
M1
,
M2
>::
¨e_öãrch™góbÀ
; 
	}
}

188 
	gãm∂©e
 <
ty≥«me
 
	gT
,Åy≥«mê
	gM
>

189 
sw≠
 (

190 
°d_Æloˇt‹
<
T
,
M
>& 
a
,

191 
°d_Æloˇt‹
<
T
,
M
>& 
b


192 Ë{ 
	ga
.
sw≠
(
b
); }

	@viper/concurrentqueue-src/benchmarks/dlib/stl_checked.h

3 #i‚de‡
DLIB_STL_CHECKEd_HEADER


4 
	#DLIB_STL_CHECKEd_HEADER


	)

6 
	~"°l_checked/°d_ve˘‹_c.h
"

	@viper/concurrentqueue-src/benchmarks/dlib/stl_checked/std_vector_c.h

3 #i‚de‡
DLIB_STD_VECTOr_C_H_


4 
	#DLIB_STD_VECTOr_C_H_


	)

6 
	~<ve˘‹
>

7 
	~<Æg‹ôhm
>

8 
	~"../as£π.h
"

9 
	~"°d_ve˘‹_c_ab°ø˘.h
"

10 
	~"../£rülize.h
"

11 
	~"../is_köd.h
"

13 
«me•a˚
 
	gdlib


16 
	gãm∂©e
 <

17 
ty≥«me
 
	gT
,

18 
ty≥«me
 
	gAŒoˇt‹
 = 
°d
::
Æloˇt‹
<
T
>

20 
˛ass
 
°d_ve˘‹_c
 : 
public
 
°d
::
ve˘‹
<
T
,
	gAŒoˇt‹
>

22 
ty≥«me
 
	t°d
::
	tve˘‹
<
	tT
,
	tAŒoˇt‹
> 
	tba£_ty≥
;

23 
	gpublic
:

25 
ty≥«me
 
	tAŒoˇt‹
::
	tª„ªn˚
Ñeference;

26 
ty≥«me
 
	tAŒoˇt‹
::
	tc⁄°_ª„ªn˚
 const_reference;

27 
ty≥«me
 
	tba£_ty≥
::
	tôî©‹
 iterator;

28 
ty≥«me
 
	tba£_ty≥
::
	tc⁄°_ôî©‹
 const_iterator;

29 
ty≥«me
 
	tba£_ty≥
::
	tsize_ty≥
 size_type;

30 
ty≥«me
 
	tba£_ty≥
::
	tdif„ªn˚_ty≥
 difference_type;

31 
T
 
	tvÆue_ty≥
;

32 
AŒoˇt‹
 
	tÆloˇt‹_ty≥
;

33 
ty≥«me
 
	tAŒoˇt‹
::
	tpoöãr
Öointer;

34 
ty≥«me
 
	tAŒoˇt‹
::
	tc⁄°_poöãr
 const_pointer;

35 
	g°d
::
	tªvî£_ôî©‹
<
	tôî©‹
>Ñeverse_iterator;

36 
	g°d
::
	tªvî£_ôî©‹
<
	tc⁄°_ôî©‹
> 
	tc⁄°_ªvî£_ôî©‹
;

40 
ex∂icô
 
°d_ve˘‹_c
(c⁄° 
AŒoˇt‹
& 
Æloc
AŒoˇt‹()Ë: 
ba£_ty≥
(alloc) {}

42 
ex∂icô
 
°d_ve˘‹_c
(
size_ty≥
 
n
, c⁄° 
T
& 
vÆue
 = T(),

43 c⁄° 
AŒoˇt‹
& 
Æloc
AŒoˇt‹()Ë: 
ba£_ty≥
(
n
, 
vÆue
,álloc) {}

45 
	gãm∂©e
 <
ty≥«me
 
	gI≈utIãøt‹
>

46 
°d_ve˘‹_c
(
I≈utIãøt‹
 
fú°
, I≈utIãøt‹ 
œ°
,

47 c⁄° 
AŒoˇt‹
& 
Æloc
AŒoˇt‹()Ë: 
ba£_ty≥
(
fú°
,
œ°
,alloc) {}

49 
°d_ve˘‹_c
(c⁄° 
°d
::
ve˘‹
<
T
,
AŒoˇt‹
>& 
x
Ë: 
ba£_ty≥
(x) {}

51 
°d_ve˘‹_c
<
T
,
	gAŒoˇt‹
>& 
	g›î©‹
=(c⁄° 
°d
::
ve˘‹
<T,AŒoˇt‹>& 
	gx
)

53 
	g°©ic_ˇ°
<
	gba£_ty≥
&>(*
	gthis
Ë
x
;

54  *
	gthis
;

57 
	gãm∂©e
 <
ty≥«me
 
	gI≈utIãøt‹
>

58 
assign
(
I≈utIãøt‹
 
fú°
, I≈utIãøt‹ 
œ°
Ë{ 
	gba£_ty≥
::assign(first,last); }

59 
assign
(
size_ty≥
 
n
, c⁄° 
T
& 
u
Ë{ 
	gba£_ty≥
::assign(n,u); }

60 
Æloˇt‹_ty≥
 
gë_Æloˇt‹
(Ëc⁄° {  
	gba£_ty≥
::get_allocator(); }

62 
ôî©‹
 
begö
(Ë{  
	gba£_ty≥
::begin(); }

63 
c⁄°_ôî©‹
 
begö
(Ëc⁄° {  
	gba£_ty≥
::begin(); }

64 
ôî©‹
 
íd
(Ë{  
	gba£_ty≥
::end(); }

65 
c⁄°_ôî©‹
 
íd
(Ëc⁄° {  
	gba£_ty≥
::end(); }

66 
ªvî£_ôî©‹
 
rbegö
(Ë{  
	gba£_ty≥
::rbegin(); }

67 
c⁄°_ªvî£_ôî©‹
 
rbegö
(Ëc⁄° {  
	gba£_ty≥
::rbegin(); }

68 
ªvî£_ôî©‹
 
ªnd
(Ë{  
	gba£_ty≥
::rend(); }

69 
c⁄°_ªvî£_ôî©‹
 
ªnd
(Ëc⁄° {  
	gba£_ty≥
::rend(); }

71 
size_ty≥
 
size
(Ëc⁄° {  
	gba£_ty≥
::size(); }

72 
size_ty≥
 
max_size
(Ëc⁄° {  
	gba£_ty≥
::max_size(); }

73 
ªsize
(
size_ty≥
 
sz
, 
T
 
c
 = T()Ë{ 
ba£_ty≥
::resize(sz,c); }

74 
size_ty≥
 
ˇ∑côy
(Ëc⁄° {  
	gba£_ty≥
::capacity(); }

75 
boﬁ
 
em±y
(Ëc⁄° {  
	gba£_ty≥
::empty(); }

76 
ª£rve
(
size_ty≥
 
n
Ë{ 
	gba£_ty≥
::reserve(n); }

79 
c⁄°_ª„ªn˚
 
©
(
size_ty≥
 
n
Ëc⁄° {  
	gba£_ty≥
::at(n); }

80 
ª„ªn˚
 
©
(
size_ty≥
 
n
Ë{  
	gba£_ty≥
::at(n); }

84 
push_back
(c⁄° 
T
& 
x
Ë{ 
	gba£_ty≥
::push_back(x); }

85 
sw≠
(
°d_ve˘‹_c
<
T
,
AŒoˇt‹
>& 
x
Ë{ 
	gba£_ty≥
::swap(x); }

86 
˛ór
(Ë{ 
	gba£_ty≥
::clear(); }

93 
ª„ªn˚
 
	g›î©‹
[](

94 
size_ty≥
 
	gn


97 
DLIB_CASSERT
(
n
 < 
size
(),

100 << "\n\âhis: " << 
this


101 << "\n\ä: " << 
n


102 << "\n\tsize(): " << 
size
()

104  
	g°©ic_ˇ°
<
	gba£_ty≥
&>(*
	gthis
)[
n
];

109 
c⁄°_ª„ªn˚
 
	g›î©‹
[](

110 
size_ty≥
 
	gn


113 
DLIB_CASSERT
(
n
 < 
size
(),

116 << "\n\âhis: " << 
this


117 << "\n\ä: " << 
n


118 << "\n\tsize(): " << 
size
()

120  
	g°©ic_ˇ°
<c⁄° 
	gba£_ty≥
&>(*
	gthis
)[
n
];

125 
ª„ªn˚
 
‰⁄t
(

128 
DLIB_CASSERT
(
size
() > 0,

131 << "\n\âhis: " << 
this


133  
	gba£_ty≥
::
‰⁄t
();

138 
c⁄°_ª„ªn˚
 
‰⁄t
(

141 
DLIB_CASSERT
(
size
() > 0,

144 << "\n\âhis: " << 
this


146  
	gba£_ty≥
::
‰⁄t
();

151 
ª„ªn˚
 
back
(

154 
DLIB_CASSERT
(
size
() > 0,

157 << "\n\âhis: " << 
this


159  
	gba£_ty≥
::
back
();

164 
c⁄°_ª„ªn˚
 
back
(

167 
DLIB_CASSERT
(
size
() > 0,

170 << "\n\âhis: " << 
this


172  
	gba£_ty≥
::
back
();

177 
p›_back
(

180 
DLIB_CASSERT
(
size
() > 0,

183 << "\n\âhis: " << 
this


185 
	gba£_ty≥
::
p›_back
();

190 
ôî©‹
 
ö£π
(

191 
ôî©‹
 
posôi⁄
,

192 c⁄° 
T
& 
x


195 
DLIB_CASSERT
–
begö
(Ë<
posôi⁄
 &&Öosôi⁄ <
íd
(),

198 << "\n\âhis: " << 
this


200  
	gba£_ty≥
::
ö£π
(
posôi⁄
, 
x
);

205 
ö£π
(

206 
ôî©‹
 
posôi⁄
,

207 
size_ty≥
 
n
,

208 c⁄° 
T
& 
x


211 
DLIB_CASSERT
–
begö
(Ë<
posôi⁄
 &&Öosôi⁄ <
íd
(),

214 << "\n\âhis: " << 
this


216 
	gba£_ty≥
::
ö£π
(
posôi⁄
, 
n
, 
x
);

221 
	gãm∂©e
 <
ty≥«me
 
	gI≈utIãøt‹
>

222 
ö£π
(

223 
ôî©‹
 
posôi⁄
,

224 
I≈utIãøt‹
 
fú°
,

225 
I≈utIãøt‹
 
œ°


228 
DLIB_CASSERT
–
begö
(Ë<
posôi⁄
 &&Öosôi⁄ <
íd
(),

231 << "\n\âhis: " << 
this


233 
	gba£_ty≥
::
ö£π
(
posôi⁄
, 
fú°
, 
œ°
);

238 
ôî©‹
 
îa£
(

239 
ôî©‹
 
posôi⁄


242 
DLIB_CASSERT
–
begö
(Ë<
posôi⁄
 &&Öosôi⁄ < 
íd
(),

245 << "\n\âhis: " << 
this


247  
	gba£_ty≥
::
îa£
(
posôi⁄
);

252 
ôî©‹
 
îa£
(

253 
ôî©‹
 
fú°
,

254 
ôî©‹
 
œ°


257 
DLIB_CASSERT
–
begö
(Ë<
fú°
 && fú° <
œ°
 &&Üa° <
íd
(),

260 << "\n\âhis: " << 
this


262  
	gba£_ty≥
::
îa£
(
fú°
,
œ°
);

274 
	gãm∂©e
 <
ty≥«me
 
	gT
,Åy≥«mê
	gAŒoˇt‹
>

275 
sw≠
(
°d_ve˘‹_c
<
T
,
AŒoˇt‹
>& 
x
, std_ve˘‹_c<T,AŒoˇt‹>& 
y
Ë{ 
	gx
.swap(y); }

277 
	gãm∂©e
 <
ty≥«me
 
	gT
,Åy≥«mê
	gAŒoˇt‹
>

278 
sw≠
(
°d
::
ve˘‹
<
T
,
AŒoˇt‹
>& 
x
, 
°d_ve˘‹_c
<T,AŒoˇt‹>& 
y
Ë{ 
	gx
.swap(y); }

280 
	gãm∂©e
 <
ty≥«me
 
	gT
,Åy≥«mê
	gAŒoˇt‹
>

281 
sw≠
(
°d_ve˘‹_c
<
T
,
AŒoˇt‹
>& 
x
, 
°d
::
ve˘‹
<T,AŒoˇt‹>& 
y
Ë{ 
	gy
.swap(x); }

285 
	gãm∂©e
 <
ty≥«me
 
	gT
,Åy≥«mê
	gÆloc
>

286 
£rülize
 (

287 c⁄° 
°d_ve˘‹_c
<
T
,
Æloc
>& 
ôem
,

288 
°d
::
o°ªam
& 
out


291 
åy


293 c⁄° 
size
 = 
°©ic_ˇ°
<>(
ôem
.size());

295 
£rülize
(
size
,
out
);

296 
	gi
 = 0; i < 
	gôem
.
size
(); ++i)

297 
£rülize
(
ôem
[
i
],
out
);

299 
ˇtch
 (
£rüliz©i⁄_îr‹
& 
e
)

300 { 
throw
 
£rüliz©i⁄_îr‹
(
e
.
öfo
 + "\n while serializing object ofÅype std_vector_c"); }

305 
	gãm∂©e
 <
ty≥«me
 
	gT
,Åy≥«mê
	gÆloc
>

306 
de£rülize
 (

307 
°d_ve˘‹_c
<
T
, 
Æloc
>& 
ôem
,

308 
°d
::
i°ªam
& 
ö


311 
åy


313 
size
;

314 
de£rülize
(
size
,
ö
);

315 
	gôem
.
ªsize
(
size
);

316 
	gi
 = 0; i < 
	gsize
; ++i)

317 
de£rülize
(
ôem
[
i
],
ö
);

319 
ˇtch
 (
£rüliz©i⁄_îr‹
& 
e
)

320 { 
throw
 
£rüliz©i⁄_îr‹
(
e
.
öfo
 + "\n while deserializing object ofÅype std_vector_c"); }

325 
	gãm∂©e
 <
ty≥«me
 
	gT
,Åy≥«mê
	gÆloc
>

326 
	gis_°d_ve˘‹
<
	g°d_ve˘‹_c
<
	gT
,
	gÆloc
> > { c⁄° 
boﬁ
 
	gvÆue
 = 
åue
; };

	@viper/concurrentqueue-src/benchmarks/dlib/stl_checked/std_vector_c_abstract.h

3 #unde‡
DLIB_STD_VECTOr_C_ABSTRACT_H_


4 #ifde‡
DLIB_STD_VECTOr_C_ABSTRACT_H_


6 
	~<ve˘‹
>

7 
	~<Æg‹ôhm
>

8 
	~"../as£π.h
"

10 
«me•a˚
 
	gdlib


13 
	gãm∂©e
 <

14 
ty≥«me
 
	gT
,

15 
ty≥«me
 
	gAŒoˇt‹
 = 
°d
::
Æloˇt‹
<
T
>

17 
˛ass
 
°d_ve˘‹_c
 : 
public
 
°d
::
ve˘‹
<
T
,
	gAŒoˇt‹
>

27 
ty≥«me
 
	t°d
::
	tve˘‹
<
	tT
,
	tAŒoˇt‹
> 
	tba£_ty≥
;

28 
	gpublic
:

29 
ty≥«me
 
	tAŒoˇt‹
::
	tª„ªn˚
Ñeference;

30 
ty≥«me
 
	tAŒoˇt‹
::
	tc⁄°_ª„ªn˚
 const_reference;

31 
ty≥«me
 
	tba£_ty≥
::
	tôî©‹
 iterator;

32 
ty≥«me
 
	tba£_ty≥
::
	tc⁄°_ôî©‹
 const_iterator;

33 
ty≥«me
 
	tba£_ty≥
::
	tsize_ty≥
 size_type;

34 
ty≥«me
 
	tba£_ty≥
::
	tdif„ªn˚_ty≥
 difference_type;

35 
T
 
	tvÆue_ty≥
;

36 
AŒoˇt‹
 
	tÆloˇt‹_ty≥
;

37 
ty≥«me
 
	tAŒoˇt‹
::
	tpoöãr
Öointer;

38 
ty≥«me
 
	tAŒoˇt‹
::
	tc⁄°_poöãr
 const_pointer;

39 
	g°d
::
	tªvî£_ôî©‹
<
	tôî©‹
>Ñeverse_iterator;

40 
	g°d
::
	tªvî£_ôî©‹
<
	tc⁄°_ôî©‹
> 
	tc⁄°_ªvî£_ôî©‹
;

43 
ex∂icô
 
°d_ve˘‹_c
(

44 c⁄° 
AŒoˇt‹
& 
Æloc
 = Allocator()

52 
ex∂icô
 
°d_ve˘‹_c
 (

53 
size_ty≥
 
n
,

54 c⁄° 
T
& 
vÆue
 = T(),

55 c⁄° 
AŒoˇt‹
& 
Æloc
 = Allocator()

65 
	gãm∂©e
 <
ty≥«me
 
	gI≈utIãøt‹
>

66 
°d_ve˘‹_c
 (

67 
I≈utIãøt‹
 
fú°
,

68 
I≈utIãøt‹
 
œ°
,

69 c⁄° 
AŒoˇt‹
& 
Æloc
 = Allocator()

78 
°d_ve˘‹_c
(

79 c⁄° 
°d
::
ve˘‹
<
T
,
AŒoˇt‹
>& 
x


86 
	g°d_ve˘‹_c
<
	gT
,
	gAŒoˇt‹
>& 
	g›î©‹
= (

87 c⁄° 
°d
::
ve˘‹
<
T
,
	gAŒoˇt‹
>& 
	gx


95 
	gãm∂©e
 <
ty≥«me
 
	gI≈utIãøt‹
>

96 
assign
(

97 
I≈utIãøt‹
 
fú°
,

98 
I≈utIãøt‹
 
œ°


106 
assign
(

107 
size_ty≥
 
n
,

108 c⁄° 
T
& 
vÆue


117 
Æloˇt‹_ty≥
 
gë_Æloˇt‹
(

124 
ôî©‹
 
begö
(

135 
c⁄°_ôî©‹
 
begö
(

146 
ôî©‹
 
íd
(

154 
c⁄°_ôî©‹
 
íd
(

162 
ªvî£_ôî©‹
 
rbegö
(

169 
c⁄°_ªvî£_ôî©‹
 
rbegö
(

176 
ªvî£_ôî©‹
 
ªnd
(

183 
c⁄°_ªvî£_ôî©‹
 
ªnd
(

190 
size_ty≥
 
size
(

198 
size_ty≥
 
max_size
(

205 
ªsize
(

206 
size_ty≥
 
sz
,

207 
T
 
c
 = T()

217 
size_ty≥
 
ˇ∑côy
(

225 
boﬁ
 
em±y
(

235 
ª£rve
(

236 
size_ty≥
 
n


243 
c⁄°_ª„ªn˚
 
©
(

244 
size_ty≥
 
n


254 
ª„ªn˚
 
©
(

255 
size_ty≥
 
n


265 
push_back
(

266 c⁄° 
T
& 
x


274 
sw≠
(

275 
°d_ve˘‹_c
<
T
,
AŒoˇt‹
>& 
x


282 
˛ór
(

289 
ª„ªn˚
 
	g›î©‹
[](

290 
size_ty≥
 
	gn


299 
c⁄°_ª„ªn˚
 
	g›î©‹
[](

300 
size_ty≥
 
	gn


309 
ª„ªn˚
 
‰⁄t
(

318 
c⁄°_ª„ªn˚
 
‰⁄t
(

327 
ª„ªn˚
 
back
(

336 
c⁄°_ª„ªn˚
 
back
(

345 
p›_back
(

356 
ôî©‹
 
ö£π
(

357 
ôî©‹
 
posôi⁄
,

358 c⁄° 
T
& 
x


371 
ö£π
(

372 
ôî©‹
 
posôi⁄
,

373 
size_ty≥
 
n
,

374 c⁄° 
T
& 
x


385 
	gãm∂©e
 <
ty≥«me
 
	gI≈utIãøt‹
>

386 
ö£π
(

387 
ôî©‹
 
posôi⁄
,

388 
I≈utIãøt‹
 
fú°
,

389 
I≈utIãøt‹
 
œ°


402 
ôî©‹
 
îa£
(

403 
ôî©‹
 
posôi⁄


420 
ôî©‹
 
îa£
(

421 
ôî©‹
 
fú°
,

422 
ôî©‹
 
œ°


444 
	gãm∂©e
 <
ty≥«me
 
	gT
,Åy≥«mê
	gÆloc
>

445 
£rülize
 (

446 c⁄° 
°d_ve˘‹_c
<
T
,
Æloc
>& 
ôem
,

447 
°d
::
o°ªam
& 
out


455 
	gãm∂©e
 <
ty≥«me
 
	gT
,Åy≥«mê
	gÆloc
>

456 
de£rülize
 (

457 
°d_ve˘‹_c
<
T
, 
Æloc
>& 
ôem
,

458 
°d
::
i°ªam
& 
ö


	@viper/concurrentqueue-src/benchmarks/dlib/string.h

3 #i‚de‡
DLIB_STRINg_TOP_


4 
	#DLIB_STRINg_TOP_


	)

6 
	~"°rög/°rög.h
"

	@viper/concurrentqueue-src/benchmarks/dlib/string/string.h

3 #i‚de‡
DLIB_STRINg_


4 
	#DLIB_STRINg_


	)

6 
	~"°rög_ab°ø˘.h
"

7 
	~<s°ªam
>

8 
	~"../Ægs.h
"

9 
	~<°rög
>

10 
	~<io°ªam
>

11 
	~<iom™ù
>

12 
	~"../îr‹.h
"

13 
	~"../as£π.h
"

14 
	~"../uöä.h
"

15 
	~<c˘y≥
>

16 
	~<Æg‹ôhm
>

17 
	~<ve˘‹
>

18 
	~"../íabÀ_if.h
"

20 
«me•a˚
 
	gdlib


25 
	gãm∂©e
 <

26 
ty≥«me
 
	gch¨T
,

27 
ty≥«me
 
	gåaôs
,

28 
ty≥«me
 
	gÆloc


30 
ölöe
 c⁄° 
ty≥«me
 
	gdißbÀ_if
<
	gis_ßme_ty≥
<
	gch¨T
,>,
	g°d
::
°rög
>::
ty≥
 
«ºow
 (

31 c⁄° 
°d
::
basic_°rög
<
ch¨T
,
åaôs
,
Æloc
>& 
°r


34 
	g°d
::
°rög
 
ãmp
;

35 
	gãmp
.
ª£rve
(
°r
.
size
());

36 
	g°d
::
°rög
::
size_ty≥
 
i
;

37 
	gi
 = 0; i < 
	g°r
.
size
(); ++i)

39 i‡(
	gzîo_exãnd_ˇ°
<>(
	g°r
[
i
]) > 255)

40 
	gãmp
 += ' ';

42 
	gãmp
 +
zîo_exãnd_ˇ°
<>(
°r
[
i
]);

44  
	gãmp
;

47 
	gãm∂©e
 <

48 
ty≥«me
 
	gch¨T
,

49 
ty≥«me
 
	gåaôs
,

50 
ty≥«me
 
	gÆloc


52 
ölöe
 c⁄° 
ty≥«me
 
	gíabÀ_if
<
	gis_ßme_ty≥
<
	gch¨T
,>,
	g°d
::
°rög
>::
ty≥
 
«ºow
 (

53 c⁄° 
°d
::
basic_°rög
<
ch¨T
,
åaôs
,
Æloc
>& 
°r


56  
	g°r
;

61 
	gãm∂©e
 <

62 
ty≥«me
 
	gåaôs
,

63 
ty≥«me
 
	gÆloc


65 c⁄° 
	g°d
::
basic_°rög
<,
	gåaôs
,
	gÆloc
> 
tﬁowî
 (

66 c⁄° 
°d
::
basic_°rög
<,
åaôs
,
Æloc
>& 
°r


69 
	g°d
::
basic_°rög
<,
	gåaôs
,
	gÆloc
> 
	gãmp
;

71 
	gãmp
.
ªsize
(
°r
.
size
());

73 
ty≥«me
 
	g°d
::
basic_°rög
<,
	gåaôs
,
	gÆloc
>::
size_ty≥
 
i
 = 0; 
	gi
 < 
	g°r
.
size
(); ++i)

74 
	gãmp
[
i
] = ()
°d
::
tﬁowî
(
°r
[i]);

76  
	gãmp
;

81 
	gãm∂©e
 <

82 
ty≥«me
 
	gåaôs
,

83 
ty≥«me
 
	gÆloc


85 c⁄° 
	g°d
::
basic_°rög
<,
	gåaôs
,
	gÆloc
> 
touµî
 (

86 c⁄° 
°d
::
basic_°rög
<,
åaôs
,
Æloc
>& 
°r


89 
	g°d
::
basic_°rög
<,
	gåaôs
,
	gÆloc
> 
	gãmp
;

91 
	gãmp
.
ªsize
(
°r
.
size
());

93 
ty≥«me
 
	g°d
::
basic_°rög
<,
	gåaôs
,
	gÆloc
>::
size_ty≥
 
i
 = 0; 
	gi
 < 
	g°r
.
size
(); ++i)

94 
	gãmp
[
i
] = ()
°d
::
touµî
(
°r
[i]);

96  
	gãmp
;

101 
	gãm∂©e
 <

102 
ty≥«me
 
	gåaôs
,

103 
ty≥«me
 
	gÆloc


105 
boﬁ
 
°rögs_equÆ_ign‹e_ˇ£
 (

106 c⁄° 
°d
::
basic_°rög
<,
åaôs
,
Æloc
>& 
°r1
,

107 c⁄° 
°d
::
basic_°rög
<,
åaôs
,
Æloc
>& 
°r2


110 i‡(
	g°r1
.
size
(Ë!
°r2
.size())

111  
Ál£
;

113 
ty≥«me
 
	g°d
::
basic_°rög
<,
	gåaôs
,
	gÆloc
>::
size_ty≥
 
i
 = 0; 
	gi
 < 
	g°r1
.
size
(); ++i)

115 i‡(
	g°d
::
tﬁowî
(
°r1
[
i
]Ë!
°d
::tﬁowî(
°r2
[i]))

116  
Ál£
;

119  
	gåue
;

122 
	gãm∂©e
 <

123 
ty≥«me
 
	gåaôs
,

124 
ty≥«me
 
	gÆloc


126 
boﬁ
 
°rögs_equÆ_ign‹e_ˇ£
 (

127 c⁄° 
°d
::
basic_°rög
<,
åaôs
,
Æloc
>& 
°r1
,

128 c⁄° * 
°r2


131 
ty≥«me
 
	g°d
::
basic_°rög
<,
	gåaôs
,
	gÆloc
>::
size_ty≥
 
i
;

132 
	gi
 = 0; i < 
	g°r1
.
size
(); ++i)

135 i‡(
	g°r2
[
i
] == '\0')

136  
Ál£
;

138 i‡(
	g°d
::
tﬁowî
(
°r1
[
i
]Ë!
°d
::tﬁowî(
°r2
[i]))

139  
Ál£
;

143 i‡(
	g°r2
[
i
] != '\0')

144  
Ál£
;

146  
	gåue
;

149 
	gãm∂©e
 <

150 
ty≥«me
 
	gåaôs
,

151 
ty≥«me
 
	gÆloc


153 
boﬁ
 
°rögs_equÆ_ign‹e_ˇ£
 (

154 c⁄° * 
°r1
,

155 c⁄° 
°d
::
basic_°rög
<,
åaôs
,
Æloc
>& 
°r2


158  
°rögs_equÆ_ign‹e_ˇ£
(
°r2
, 
°r1
);

163 
	gãm∂©e
 <

164 
ty≥«me
 
	gåaôs
,

165 
ty≥«me
 
	gÆloc


167 
boﬁ
 
°rögs_equÆ_ign‹e_ˇ£
 (

168 c⁄° 
°d
::
basic_°rög
<,
åaôs
,
Æloc
>& 
°r1
,

169 c⁄° 
°d
::
basic_°rög
<,
åaôs
,
Æloc
>& 
°r2
,

170 
num


173 i‡(
	g°r1
.
size
(Ë!
°r2
.size(Ë&& (
°r1
.size(Ë< 
num
 || str2.size() <Çum))

174  
Ál£
;

176 
ty≥«me
 
	g°d
::
basic_°rög
<,
	gåaôs
,
	gÆloc
>::
size_ty≥
 
i
 = 0; 
	gi
 < 
	g°r1
.
size
(Ë&& i < 
	gnum
; ++i)

178 i‡(
	g°d
::
tﬁowî
(
°r1
[
i
]Ë!
°d
::tﬁowî(
°r2
[i]))

179  
Ál£
;

182  
	gåue
;

185 
	gãm∂©e
 <

186 
ty≥«me
 
	gåaôs
,

187 
ty≥«me
 
	gÆloc


189 
boﬁ
 
°rögs_equÆ_ign‹e_ˇ£
 (

190 c⁄° 
°d
::
basic_°rög
<,
åaôs
,
Æloc
>& 
°r1
,

191 c⁄° * 
°r2
,

192 
num


195 
ty≥«me
 
	g°d
::
basic_°rög
<,
	gåaôs
,
	gÆloc
>::
size_ty≥
 
i
;

196 
	gi
 = 0; i < 
	g°r1
.
size
(Ë&& i < 
	gnum
; ++i)

199 i‡(
	g°r2
[
i
] == '\0')

200  
Ál£
;

202 i‡(
	g°d
::
tﬁowî
(
°r1
[
i
]Ë!
°d
::tﬁowî(
°r2
[i]))

203  
Ál£
;

206  
	gåue
;

209 
	gãm∂©e
 <

210 
ty≥«me
 
	gåaôs
,

211 
ty≥«me
 
	gÆloc


213 
boﬁ
 
°rögs_equÆ_ign‹e_ˇ£
 (

214 c⁄° * 
°r1
,

215 c⁄° 
°d
::
basic_°rög
<,
åaôs
,
Æloc
>& 
°r2
,

216 
num


219  
°rögs_equÆ_ign‹e_ˇ£
(
°r2
, 
°r1
, 
num
);

224 ˛as†
	cˇ°_to_°rög_îr‹
 : 
public
 
îr‹


226 
public
:

227 
ˇ°_to_°rög_îr‹
():
îr‹
(
ECAST_TO_STRING
) {}

230 
	gãm∂©e
 <

231 
ty≥«me
 
	gT


233 c⁄° 
	g°d
::
°rög
 
	$ˇ°_to_°rög
 (

234 c⁄° 
T
& 
ôem


237 
°d
::
o°rög°ªam
 
sout
;

238 
sout
 << 
ôem
;

239 i‡(!
sout
)

240 
throw
 
	`ˇ°_to_°rög_îr‹
();

241  
sout
.
	`°r
();

242 
	}
}

246 #i‡!(
deföed
(
__MINGW32__
Ë&& (
__GNUC__
 < 4))

247 
	gãm∂©e
 <

248 
ty≥«me
 
	gT


250 c⁄° 
	g°d
::
w°rög
 
	$ˇ°_to_w°rög
 (

251 c⁄° 
T
& 
ôem


254 
°d
::
basic_o°rög°ªam
<
wch¨_t
> 
sout
;

255 
sout
 << 
ôem
;

256 i‡(!
sout
)

257 
throw
 
	`ˇ°_to_°rög_îr‹
();

258  
sout
.
	`°r
();

259 
	}
}

264 
ölöe
 
	g°d
::
°rög
 
	$∑d_öt_wôh_zîos
 (

265 
i
,

266 
width
 = 6

269 
°d
::
o°rög°ªam
 
sout
;

270 
sout
 << 
°d
::
	`£tw
(
width
Ë<< std::
	`£tfûl
('0'Ë<< 
i
;

271  
sout
.
	`°r
();

272 
	}
}

276 ˛as†
	c°rög_ˇ°_îr‹
 : 
public
 
îr‹


278 
public
:

279 
°rög_ˇ°_îr‹
(c⁄° 
°d
::
°rög
& 
°r
):

280 
îr‹
(
ESTRING_CAST
,"°rög ca°Éº‹: invÆid såög = '" + 
°r
 + "'") {}

283 
	gãm∂©e
 <

284 
ty≥«me
 
	gT


286 
	s°rög_ˇ°_hñ≥r


288 
	gãm∂©e
 < 
ty≥«me
 
	gch¨T
,Åy≥«mê
	gåaôs
,Åy≥«mê
	gÆloc
 >

289 c⁄° 
T
 
ˇ°
 (

290 c⁄° 
°d
::
basic_°rög
<
ch¨T
,
åaôs
,
Æloc
>& 
°r


293 
usög
 
«me•a˚
 
	g°d
;

294 
	gbasic_i°rög°ªam
<
	gch¨T
,
	gåaôs
,
	gÆloc
> 
sö
(
°r
);

295 
T
 
	gãmp
;

296 
	gsö
 >> 
	gãmp
;

297 i‡(!
	gsö
Ë
throw
 
°rög_ˇ°_îr‹
(
«ºow
(
°r
));

298 i‡(
	gsö
.
gë
(Ë!
°d
::
ch¨_åaôs
<
ch¨T
>::
eof
()Ë
throw
 
°rög_ˇ°_îr‹
(
«ºow
(
°r
));

299  
	gãmp
;

303 
	gãm∂©e
 <
ty≥«me
 
	gC
,Åy≥«mê
	gT
,Åy≥«mê
	gA
>

304 
	g°rög_ˇ°_hñ≥r
<
	g°d
::
basic_°rög
<
C
,
	gT
,
	gA
> >

306 
	gãm∂©e
 < 
ty≥«me
 
	gch¨T
,Åy≥«mê
	gåaôs
,Åy≥«mê
	gÆloc
 >

307 c⁄° 
	g°d
::
basic_°rög
<
C
,
	gT
,
	gA
> 
ˇ°
 (

308 c⁄° 
°d
::
basic_°rög
<
ch¨T
,
åaôs
,
Æloc
>& 
°r


311 
	g°d
::
basic_°rög
<
C
,
	gT
,
	gA
> 
	gãmp
;

312 
	gãmp
.
ªsize
(
°r
.
size
());

313 
	gi
 = 0; i < 
	g°r
.
size
(); ++i)

314 
	gãmp
[
i
] = 
zîo_exãnd_ˇ°
<
C
>(
°r
[i]);

315  
	gãmp
;

319 
	gãm∂©e
 <>

320 
	g°rög_ˇ°_hñ≥r
<
	gboﬁ
>

322 
	gãm∂©e
 < 
ty≥«me
 
	gch¨T
,Åy≥«mê
	gåaôs
,Åy≥«mê
	gÆloc
 >

323 
boﬁ
 
ˇ°
 (

324 c⁄° 
°d
::
basic_°rög
<
ch¨T
,
åaôs
,
Æloc
>& 
°r


327 
usög
 
«me•a˚
 
	g°d
;

328 i‡(
	g°r
.
size
(Ë=1 && 
°r
[0] == '1')

329  
åue
;

330 i‡(
	g°r
.
size
(Ë=1 && 
°r
[0] == '0')

331  
Ál£
;

332 i‡(
tﬁowî
(
«ºow
(
°r
)) == "true")

333  
åue
;

334 i‡(
tﬁowî
(
«ºow
(
°r
)) == "false")

335  
Ál£
;

337 
throw
 
°rög_ˇ°_îr‹
(
«ºow
(
°r
));

341 
	#DLIB_STRING_CAST_INTEGRAL
(
ty≥
) \

342 
ãm∂©e
 <> \

343 
°rög_ˇ°_hñ≥r
<
ty≥
> \

345 
ãm∂©e
 < 
ty≥«me
 
ch¨T
,Åy≥«mê
åaôs
,Åy≥«mê
Æloc
> \

346 
ty≥
 
	`ˇ°
 ( \

347 c⁄° 
°d
::
basic_°rög
<
ch¨T
,
åaôs
,
Æloc
>& 
°r
 \

350 
usög
 
«me•a˚
 
°d
; \

351 
basic_i°rög°ªam
<
ch¨T
,
åaôs
,
Æloc
> 
	`sö
(
°r
); \

352 
ty≥
 
ãmp
; \

353 i‡(
°r
.
	`size
(Ë> 2 && så[0] =
	`_dT
(
ch¨T
,'0') && str[1] == _dT(charT,'x')) \

354 
sö
 >> 
hex
 >> 
ãmp
; \

356 
sö
 >> 
ãmp
; \

357 i‡(!
sö
Ë
throw
 
	`°rög_ˇ°_îr‹
(
	`«ºow
(
°r
)); \

358 i‡(
sö
.
	`gë
(Ë!
°d
::
ch¨_åaôs
<
ch¨T
>::
	`eof
()Ë
throw
 
	`°rög_ˇ°_îr‹
(
	`«ºow
(
°r
)); \

359  
ãmp
; \

361 };

	)

363 
	$DLIB_STRING_CAST_INTEGRAL
()

364 
	$DLIB_STRING_CAST_INTEGRAL
()

365 
	$DLIB_STRING_CAST_INTEGRAL
()

366 
	$DLIB_STRING_CAST_INTEGRAL
()

367 
	$DLIB_STRING_CAST_INTEGRAL
()

368 
	$DLIB_STRING_CAST_INTEGRAL
()

369 
	$DLIB_STRING_CAST_INTEGRAL
(
uöt64
)

371 
ãm∂©e
 <

372 
ty≥«me
 
T
,

373 
ty≥«me
 
ch¨T
,

374 
ty≥«me
 
åaôs
,

375 
ty≥«me
 
Æloc


377 
ölöe
 c⁄° 
T
 
	`°rög_ˇ°
 (

378 c⁄° 
°d
::
basic_°rög
<
ch¨T
,
åaôs
,
Æloc
>& 
°r


381 
	`COMPILE_TIME_ASSERT
(
is_poöãr_ty≥
<
T
>::
vÆue
 =
Ál£
);

382  
°rög_ˇ°_hñ≥r
<
T
>::
	`ˇ°
(
°r
);

383 
	}
}

385 
	gãm∂©e
 <
ty≥«me
 
	gT
>

386 
ölöe
 c⁄° 
T
 
	$°rög_ˇ°
 (c⁄° * 
°r
){  
°rög_ˇ°
<
T
>(
°d
::
	`°rög
(°r)); 
	}
}

387 
	gãm∂©e
 <
ty≥«me
 
	gT
>

388 
ölöe
 c⁄° 
T
 
	$°rög_ˇ°
 (c⁄° 
wch¨_t
* 
°r
){  
°rög_ˇ°
<
T
>(
°d
::
	`w°rög
(°r)); 
	}
}

392 ˛as†
	c°rög_assign


394 
	gãm∂©e
 <

395 
ty≥«me
 
	gch¨T
,

396 
ty≥«me
 
	gåaôs
,

397 
ty≥«me
 
	gÆloc


399 ˛as†
	c°rög_assign_hñ≥r


401 
	gpublic
:

402 
°rög_assign_hñ≥r
 (

403 c⁄° 
°d
::
basic_°rög
<
ch¨T
,
åaôs
,
Æloc
>& 
°r_


404 Ë: 
°r
(
°r_
) {}

406 
ãm∂©e
 <
ty≥«me
 
T
>

407 
›î©‹
 
T
 () const

409  
°rög_ˇ°
<
T
>(
°r
);

412 
	g¥iv©e
:

414 c⁄° 
°d
::
basic_°rög
<
ch¨T
,
	gåaôs
,
	gÆloc
>& 
	g°r
;

419 ˛as†
	cch¨_assign_hñ≥r


421 
	gpublic
:

422 
ch¨_assign_hñ≥r
 (

423 c⁄° * 
°r_


424 Ë: 
°r
(
°r_
) {}

426 
ãm∂©e
 <
ty≥«me
 
T
>

427 
›î©‹
 
T
 () const

429  
°rög_ˇ°
<
T
>(
°r
);

432 
	g¥iv©e
:

434 c⁄° * 
°r
;

439 ˛as†
	cwch¨_t_assign_hñ≥r


441 
	gpublic
:

442 
wch¨_t_assign_hñ≥r
 (

443 c⁄° 
wch¨_t
* 
°r_


444 Ë: 
°r
(
°r_
) {}

446 
ãm∂©e
 <
ty≥«me
 
T
>

447 
›î©‹
 
T
 () const

449  
°rög_ˇ°
<
T
>(
°r
);

452 
	g¥iv©e
:

454 c⁄° 
wch¨_t
* 
°r
;

459 
	gpublic
:

461 
ãm∂©e
 <

462 
ty≥«me
 
ch¨T
,

463 
ty≥«me
 
	gåaôs
,

464 
ty≥«me
 
	gÆloc


466 
	g°rög_assign_hñ≥r
<
	gch¨T
,
	gåaôs
,
	gÆloc
> 
	g›î©‹
=(

467 c⁄° 
°d
::
basic_°rög
<
ch¨T
,
	gåaôs
,
	gÆloc
>& 
	g°r


470  
	g°rög_assign_hñ≥r
<
	gch¨T
,
	gåaôs
,
	gÆloc
>(
	g°r
);

473 
ch¨_assign_hñ≥r
 
	g›î©‹
= (

474 c⁄° * 
°r


477  
ch¨_assign_hñ≥r
(
°r
);

480 
wch¨_t_assign_hñ≥r
 
	g›î©‹
= (

481 c⁄° 
wch¨_t
* 
°r


484  
wch¨_t_assign_hñ≥r
(
°r
);

488 c⁄° 
°rög_assign
 
	gß
 = string_assign();

492 
	gãm∂©e
 <

493 
ty≥«me
 
	gch¨T
,

494 
ty≥«me
 
	gåaôs
,

495 
ty≥«me
 
	gÆloc


497 c⁄° 
	g°d
::
basic_°rög
<
ch¨T
,
	gåaôs
,
	gÆloc
> 
wøp_°rög
 (

498 c⁄° 
°d
::
basic_°rög
<
ch¨T
,
åaôs
,
Æloc
>& 
°r
,

499 c⁄° 
fú°_∑d
 = 0,

500 c⁄° 
ª°_∑d
 = 0,

501 c⁄° 
max_≥r_löe
 = 79

504 
DLIB_ASSERT
 ( 
fú°_∑d
 < 
max_≥r_löe
 && 
ª°_∑d
 < max_per_line &&

505 
ª°_∑d
 >
fú°_∑d
,

507 << "\n\tfú°_∑d: " << 
fú°_∑d


508 << "\n\åe°_∑d: " << 
ª°_∑d


509 << "\n\tmax_≥r_löe: " << 
max_≥r_löe
 );

511 
usög
 
«me•a˚
 
	g°d
;

513 
	gbasic_o°rög°ªam
<
	gch¨T
,
	gåaôs
,
	gÆloc
> 
	gsout
;

514 
	gbasic_i°rög°ªam
<
	gch¨T
,
	gåaôs
,
	gÆloc
> 
sö
(
°r
);

516 
	gi
 = 0; i < 
	gª°_∑d
; ++i)

517 
	gsout
 << 
_dT
(
ch¨T
," ");

518 c⁄° 
	gbasic_°rög
<
	gch¨T
,
	gåaôs
,
	gÆloc
> 
∑d
(
sout
.
°r
());

519 
	gsout
.
°r
(
_dT
(
ch¨T
,""));

521 
	gi
 = 0; i < 
	gfú°_∑d
; ++i)

522 
	gsout
 << 
_dT
(
ch¨T
," ");

525 
ty≥«me
 
	gbasic_°rög
<
	gch¨T
,
	gåaôs
,
	gÆloc
>::
size_ty≥
 
ªmaöög
 = 
max_≥r_löe
 - 
ª°_∑d
;

527 
	gbasic_°rög
<
	gch¨T
,
	gåaôs
,
	gÆloc
> 
	gãmp
;

529 
	gsö
 >> 
	gãmp
;

530 
	gsö
)

532 i‡(
	gãmp
.
size
(Ë> 
	gªmaöög
)

534 i‡(
	gãmp
.
size
(Ë+ 
	gª°_∑d
 >
max_≥r_löe
)

536 
°rög
::
size_ty≥
 
i
 = 0;

537 ; 
	gi
 < 
	gãmp
.
size
(); ++i)

539 
	gsout
 << 
	gãmp
[
i
];

540 --
	gªmaöög
;

541 i‡(
	gªmaöög
 == 0)

543 
sout
 << 
_dT
(
ch¨T
,"\n"Ë<< 
∑d
;

544 
	gªmaöög
 = 
max_≥r_löe
 - 
ª°_∑d
;

550 
	gsout
 << 
_dT
(
ch¨T
,"\n"Ë<< 
	g∑d
 << 
	gãmp
;

551 
	gªmaöög
 = 
max_≥r_löe
 - 
ª°_∑d
 - 
ãmp
.
size
();

554 i‡(
	gãmp
.
size
(Ë=
ªmaöög
)

556 
sout
 << 
ãmp
;

557 
	gªmaöög
 = 0;

561 
	gsout
 << 
	gãmp
;

562 
	gªmaöög
 -
ãmp
.
size
();

565 
	gsö
 >> 
	gãmp
;

566 i‡(
	gªmaöög
 =0 && 
sö
)

568 
sout
 << 
_dT
(
ch¨T
,"\n"Ë<< 
∑d
;

569 
	gªmaöög
 = 
max_≥r_löe
 - 
ª°_∑d
;

573 
	gsout
 << 
_dT
(
ch¨T
," ");

574 --
	gªmaöög
;

578  
	gsout
.
°r
();

581 
	gãm∂©e
 <

582 
ty≥«me
 
	gch¨T


584 c⁄° 
	g°d
::
basic_°rög
<
ch¨T
> 
	$wøp_°rög
 (

585 c⁄° 
ch¨T
* 
°r
,

586 c⁄° 
fú°_∑d
 = 0,

587 c⁄° 
ª°_∑d
 = 0,

588 c⁄° 
max_≥r_löe
 = 79

589 Ë{  
	`wøp_°rög
(
°d
::
basic_°rög
<
ch¨T
>(
°r
),
fú°_∑d
,
ª°_∑d
,
max_≥r_löe
); 
	}
}

593 
	gãm∂©e
 <

594 
ty≥«me
 
	gch¨T
,

595 
ty≥«me
 
	gåaôs
,

596 
ty≥«me
 
	gÆloc


598 c⁄° 
	g°d
::
basic_°rög
<
ch¨T
,
	gåaôs
,
	gÆloc
> 
…rim
 (

599 c⁄° 
°d
::
basic_°rög
<
ch¨T
,
åaôs
,
Æloc
>& 
°r
,

600 c⁄° 
°d
::
basic_°rög
<
ch¨T
,
åaôs
,
Æloc
>& 
åim_ch¨s


603 
	g°d
::
	tbasic_°rög
<
	tch¨T
,
	tåaôs
,
	tÆloc
> 
	t°rög
;

604 
ty≥«me
 
	g°rög
::
size_ty≥
 
pos
 = 
°r
.
föd_fú°_nŸ_of
(
åim_ch¨s
);

605 i‡(
	gpos
 !
°rög
::
≈os
)

606  
°r
.
sub°r
(
pos
);

608  
	g°d
::
basic_°rög
<
ch¨T
,
	gåaôs
,
	gÆloc
>();

611 
	gãm∂©e
 <

612 
ty≥«me
 
	gch¨T
,

613 
ty≥«me
 
	gåaôs
,

614 
ty≥«me
 
	gÆloc


616 c⁄° 
	g°d
::
basic_°rög
<
ch¨T
,
	gåaôs
,
	gÆloc
> 
…rim
 (

617 c⁄° 
°d
::
basic_°rög
<
ch¨T
,
åaôs
,
Æloc
>& 
°r
,

618 c⁄° 
ch¨T
* 
åim_ch¨s
 = 
_dT
(charT," \t\r\n")

619 Ë{  
…rim
(
°r
,
°d
::
basic_°rög
<
ch¨T
,
åaôs
,
Æloc
>(
åim_ch¨s
)); }

623 
	gãm∂©e
 <

624 
ty≥«me
 
	gch¨T
,

625 
ty≥«me
 
	gåaôs
,

626 
ty≥«me
 
	gÆloc


628 c⁄° 
	g°d
::
basic_°rög
<
ch¨T
,
	gåaôs
,
	gÆloc
> 
πrim
 (

629 c⁄° 
°d
::
basic_°rög
<
ch¨T
,
åaôs
,
Æloc
>& 
°r
,

630 c⁄° 
°d
::
basic_°rög
<
ch¨T
,
åaôs
,
Æloc
>& 
åim_ch¨s


633 
	g°d
::
	tbasic_°rög
<
	tch¨T
,
	tåaôs
,
	tÆloc
> 
	t°rög
;

635 
ty≥«me
 
	g°rög
::
size_ty≥
 
pos
 = 
°r
.
föd_œ°_nŸ_of
(
åim_ch¨s
);

636 i‡(
	gpos
 !
°rög
::
≈os
)

637  
°r
.
sub°r
(0,
pos
+1);

639  
	g°d
::
basic_°rög
<
ch¨T
,
	gåaôs
,
	gÆloc
>();

642 
	gãm∂©e
 <

643 
ty≥«me
 
	gch¨T
,

644 
ty≥«me
 
	gåaôs
,

645 
ty≥«me
 
	gÆloc


647 c⁄° 
	g°d
::
basic_°rög
<
ch¨T
,
	gåaôs
,
	gÆloc
> 
πrim
 (

648 c⁄° 
°d
::
basic_°rög
<
ch¨T
,
åaôs
,
Æloc
>& 
°r
,

649 c⁄° 
ch¨T
* 
åim_ch¨s
 = 
_dT
(charT," \t\r\n")

650 Ë{  
πrim
(
°r
,
°d
::
basic_°rög
<
ch¨T
,
åaôs
,
Æloc
>(
åim_ch¨s
)); }

654 
	gãm∂©e
 <

655 
ty≥«me
 
	gch¨T
,

656 
ty≥«me
 
	gåaôs
,

657 
ty≥«me
 
	gÆloc


659 c⁄° 
	g°d
::
basic_°rög
<
ch¨T
,
	gåaôs
,
	gÆloc
> 
åim
 (

660 c⁄° 
°d
::
basic_°rög
<
ch¨T
,
åaôs
,
Æloc
>& 
°r
,

661 c⁄° 
°d
::
basic_°rög
<
ch¨T
,
åaôs
,
Æloc
>& 
åim_ch¨s


664 
	g°d
::
	tbasic_°rög
<
	tch¨T
,
	tåaôs
,
	tÆloc
> 
	t°rög
;

665 
ty≥«me
 
	g°rög
::
size_ty≥
 
Õos
 = 
°r
.
föd_fú°_nŸ_of
(
åim_ch¨s
);

666 i‡(
	gÕos
 !
°rög
::
≈os
)

668 
ty≥«me
 
°rög
::
size_ty≥
 
Ωos
 = 
°r
.
föd_œ°_nŸ_of
(
åim_ch¨s
);

669  
	g°r
.
sub°r
(
Õos
,
Ωos
-lpos+1);

673  
	g°d
::
basic_°rög
<
ch¨T
,
	gåaôs
,
	gÆloc
>();

677 
	gãm∂©e
 <

678 
ty≥«me
 
	gch¨T
,

679 
ty≥«me
 
	gåaôs
,

680 
ty≥«me
 
	gÆloc


682 c⁄° 
	g°d
::
basic_°rög
<
ch¨T
,
	gåaôs
,
	gÆloc
> 
åim
 (

683 c⁄° 
°d
::
basic_°rög
<
ch¨T
,
åaôs
,
Æloc
>& 
°r
,

684 c⁄° 
ch¨T
* 
åim_ch¨s
 = 
_dT
(charT," \t\r\n")

685 Ë{  
åim
(
°r
,
°d
::
basic_°rög
<
ch¨T
,
åaôs
,
Æloc
>(
åim_ch¨s
)); }

689 
	gãm∂©e
 <

690 
ty≥«me
 
	gch¨T
,

691 
ty≥«me
 
	gåaôs
,

692 
ty≥«me
 
	gÆloc


694 c⁄° 
	g°d
::
basic_°rög
<
ch¨T
,
	gåaôs
,
	gÆloc
> 
Ωad
 (

695 c⁄° 
°d
::
basic_°rög
<
ch¨T
,
åaôs
,
Æloc
>& 
°r
,

696 
∑d_Àngth
,

697 c⁄° 
°d
::
basic_°rög
<
ch¨T
,
åaôs
,
Æloc
>& 
∑d_°rög


700 
	g°d
::
	tbasic_°rög
<
	tch¨T
,
	tåaôs
,
	tÆloc
> 
	t°rög
;

702 i‡(
	g∑d_Àngth
 <
°©ic_ˇ°
<>(
°r
.
size
()))

703  
°r
;

706 
°rög
 
	gP
;

707 
	gP
.
size
(Ë< 
	g∑d_Àngth
 - 
	g°r
.size())

708 
	gP
 +
∑d_°rög
;

709 
	gP
 = 
P
.
sub°r
(0,
∑d_Àngth
 - 
°r
.
size
());

712  
	g°r
 + 
	gP
;

715 
	gãm∂©e
 <

716 
ty≥«me
 
	gch¨T
,

717 
ty≥«me
 
	gåaôs
,

718 
ty≥«me
 
	gÆloc


720 c⁄° 
	g°d
::
basic_°rög
<
ch¨T
,
	gåaôs
,
	gÆloc
> 
Ωad
 (

721 c⁄° 
°d
::
basic_°rög
<
ch¨T
,
åaôs
,
Æloc
>& 
°r
,

722 
∑d_Àngth
,

723 c⁄° 
ch¨T
* 
∑d_°rög
 = 
_dT
(charT," ")

724 Ë{  
Ωad
(
°r
,
∑d_Àngth
,
°d
::
basic_°rög
<
ch¨T
,
åaôs
,
Æloc
>(
∑d_°rög
)); }

728 
	gãm∂©e
 <

729 
ty≥«me
 
	gch¨T
,

730 
ty≥«me
 
	gåaôs
,

731 
ty≥«me
 
	gÆloc


733 c⁄° 
	g°d
::
basic_°rög
<
ch¨T
,
	gåaôs
,
	gÆloc
> 
Õad
 (

734 c⁄° 
°d
::
basic_°rög
<
ch¨T
,
åaôs
,
Æloc
>& 
°r
,

735 
∑d_Àngth
,

736 c⁄° 
°d
::
basic_°rög
<
ch¨T
,
åaôs
,
Æloc
>& 
∑d_°rög


739 
	g°d
::
	tbasic_°rög
<
	tch¨T
,
	tåaôs
,
	tÆloc
> 
	t°rög
;

741 i‡(
	g∑d_Àngth
 <
°©ic_ˇ°
<>(
°r
.
size
()))

742  
°r
;

745 
°rög
 
	gP
;

746 
	gP
.
size
(Ë< 
	g∑d_Àngth
 - 
	g°r
.size())

747 
	gP
 +
∑d_°rög
;

748 
	gP
 = 
P
.
sub°r
(0,
∑d_Àngth
 - 
°r
.
size
());

751  
	gP
 + 
	g°r
;

754 
	gãm∂©e
 <

755 
ty≥«me
 
	gch¨T
,

756 
ty≥«me
 
	gåaôs
,

757 
ty≥«me
 
	gÆloc


759 c⁄° 
	g°d
::
basic_°rög
<
ch¨T
,
	gåaôs
,
	gÆloc
> 
Õad
 (

760 c⁄° 
°d
::
basic_°rög
<
ch¨T
,
åaôs
,
Æloc
>& 
°r
,

761 
∑d_Àngth
,

762 c⁄° 
ch¨T
* 
∑d_°rög
 = 
_dT
(charT," ")

763 Ë{  
Õad
(
°r
,
∑d_Àngth
,
°d
::
basic_°rög
<
ch¨T
,
åaôs
,
Æloc
>(
∑d_°rög
)); }

767 
	gãm∂©e
 <

768 
ty≥«me
 
	gch¨T
,

769 
ty≥«me
 
	gåaôs
,

770 
ty≥«me
 
	gÆloc


772 c⁄° 
	g°d
::
basic_°rög
<
ch¨T
,
	gåaôs
,
	gÆloc
> 
∑d
 (

773 c⁄° 
°d
::
basic_°rög
<
ch¨T
,
åaôs
,
Æloc
>& 
°r
,

774 
∑d_Àngth
,

775 c⁄° 
°d
::
basic_°rög
<
ch¨T
,
åaôs
,
Æloc
>& 
∑d_°rög


778 c⁄° 
	g°r_size
 = 
°©ic_ˇ°
<>(
°r
.
size
());

779  
Ωad
(
Õad
(
°r
,(
∑d_Àngth
-
°r_size
)/2 + så_size,
∑d_°rög
),

780 
∑d_Àngth
,

781 
∑d_°rög
);

784 
	gãm∂©e
 <

785 
ty≥«me
 
	gch¨T
,

786 
ty≥«me
 
	gåaôs
,

787 
ty≥«me
 
	gÆloc


789 c⁄° 
	g°d
::
basic_°rög
<
ch¨T
,
	gåaôs
,
	gÆloc
> 
∑d
 (

790 c⁄° 
°d
::
basic_°rög
<
ch¨T
,
åaôs
,
Æloc
>& 
°r
,

791 
∑d_Àngth
,

792 c⁄° 
ch¨T
* 
∑d_°rög
 = 
_dT
(charT," ")

793 Ë{  
∑d
(
°r
,
∑d_Àngth
,
°d
::
basic_°rög
<
ch¨T
,
åaôs
,
Æloc
>(
∑d_°rög
)); }

797 
	gãm∂©e
 <

798 
ty≥«me
 
	gch¨T
,

799 
ty≥«me
 
	gåaôs
,

800 
ty≥«me
 
	gÆloc


802 c⁄° 
	g°d
::
basic_°rög
<
ch¨T
,
	gåaôs
,
	gÆloc
> 
À·_sub°r
 (

803 c⁄° 
°d
::
basic_°rög
<
ch¨T
,
åaôs
,
Æloc
>& 
°r
,

804 c⁄° 
°d
::
basic_°rög
<
ch¨T
,
åaôs
,
Æloc
>& 
dñim


807  
	g°r
.
sub°r
(0,
°r
.
föd_fú°_of
(
dñim
));

810 
	gãm∂©e
 <

811 
ty≥«me
 
	gch¨T
,

812 
ty≥«me
 
	gåaôs
,

813 
ty≥«me
 
	gÆloc


815 c⁄° 
	g°d
::
basic_°rög
<
ch¨T
,
	gåaôs
,
	gÆloc
> 
À·_sub°r
 (

816 c⁄° 
°d
::
basic_°rög
<
ch¨T
,
åaôs
,
Æloc
>& 
°r
,

817 c⁄° 
ch¨T
* 
dñim
 = 
_dT
(charT," \n\r\t")

820  
	g°r
.
sub°r
(0,
°r
.
föd_fú°_of
(
dñim
));

825 
	gãm∂©e
 <

826 
ty≥«me
 
	gch¨T
,

827 
ty≥«me
 
	gåaôs
,

828 
ty≥«me
 
	gÆloc


830 c⁄° 
	g°d
::
basic_°rög
<
ch¨T
,
	gåaôs
,
	gÆloc
> 
right_sub°r
 (

831 c⁄° 
°d
::
basic_°rög
<
ch¨T
,
åaôs
,
Æloc
>& 
°r
,

832 c⁄° 
°d
::
basic_°rög
<
ch¨T
,
åaôs
,
Æloc
>& 
dñim


835 
ty≥«me
 
	g°d
::
basic_°rög
<
ch¨T
,
	gåaôs
,
	gÆloc
>::
size_ty≥
 
dñim_pos
 = 
°r
.
föd_œ°_of
(
dñim
);

836 i‡(
	gdñim_pos
 !
°d
::
basic_°rög
<
ch¨T
,
	gåaôs
,
	gÆloc
>::
≈os
)

837  
°r
.
sub°r
(
dñim_pos
+1);

839  
_dT
(
ch¨T
,"");

842 
	gãm∂©e
 <

843 
ty≥«me
 
	gch¨T
,

844 
ty≥«me
 
	gåaôs
,

845 
ty≥«me
 
	gÆloc


847 c⁄° 
	g°d
::
basic_°rög
<
ch¨T
,
	gåaôs
,
	gÆloc
> 
right_sub°r
 (

848 c⁄° 
°d
::
basic_°rög
<
ch¨T
,
åaôs
,
Æloc
>& 
°r
,

849 c⁄° 
ch¨T
* 
dñim
 = 
_dT
(charT," \n\r\t")

852 
ty≥«me
 
	g°d
::
basic_°rög
<
ch¨T
,
	gåaôs
,
	gÆloc
>::
size_ty≥
 
dñim_pos
 = 
°r
.
föd_œ°_of
(
dñim
);

853 i‡(
	gdñim_pos
 !
°d
::
basic_°rög
<
ch¨T
,
	gåaôs
,
	gÆloc
>::
≈os
)

854  
°r
.
sub°r
(
dñim_pos
+1);

856  
_dT
(
ch¨T
,"");

861 
	gãm∂©e
 <

862 
ty≥«me
 
	gch¨T
,

863 
ty≥«me
 
	gåaôs
,

864 
ty≥«me
 
	gÆloc


866 
	g°d
::
∑ú
<
°d
::
basic_°rög
<
ch¨T
,
	gåaôs
,
	gÆloc
>, std::basic_string<charT,traits,alloc> >

867 
•lô_⁄_fú°
 (

868 c⁄° 
°d
::
basic_°rög
<
ch¨T
,
åaôs
,
Æloc
>& 
°r
,

869 c⁄° 
ch¨T
* 
dñim
 = 
_dT
(charT," \n\r\t")

872 
ty≥«me
 
	g°d
::
basic_°rög
<
ch¨T
,
	gåaôs
,
	gÆloc
>::
size_ty≥
 
dñim_pos
 = 
°r
.
föd_fú°_of
(
dñim
);

873 i‡(
	gdñim_pos
 !
°d
::
basic_°rög
<
ch¨T
,
	gåaôs
,
	gÆloc
>::
≈os
)

874  
°d
::
make_∑ú
(
°r
.
sub°r
(0, 
dñim_pos
), str.substr(delim_pos+1));

876  
	g°d
::
make_∑ú
(
°r
, 
_dT
(
ch¨T
,""));

879 
	gãm∂©e
 <

880 
ty≥«me
 
	gch¨T
,

881 
ty≥«me
 
	gåaôs
,

882 
ty≥«me
 
	gÆloc


884 
ölöe
 
	g°d
::
∑ú
<
°d
::
basic_°rög
<
ch¨T
,
	gåaôs
,
	gÆloc
>, std::basic_string<charT,traits,alloc> >

885 
•lô_⁄_fú°
 (

886 c⁄° 
°d
::
basic_°rög
<
ch¨T
,
åaôs
,
Æloc
>& 
°r
,

887 c⁄° 
°d
::
basic_°rög
<
ch¨T
,
åaôs
,
Æloc
>& 
dñim


890  
•lô_⁄_fú°
(
°r
, 
dñim
.
c_°r
());

895 
	gãm∂©e
 <

896 
ty≥«me
 
	gch¨T
,

897 
ty≥«me
 
	gåaôs
,

898 
ty≥«me
 
	gÆloc


900 
	g°d
::
∑ú
<
°d
::
basic_°rög
<
ch¨T
,
	gåaôs
,
	gÆloc
>, std::basic_string<charT,traits,alloc> >

901 
•lô_⁄_œ°
 (

902 c⁄° 
°d
::
basic_°rög
<
ch¨T
,
åaôs
,
Æloc
>& 
°r
,

903 c⁄° 
ch¨T
* 
dñim
 = 
_dT
(charT," \n\r\t")

906 
ty≥«me
 
	g°d
::
basic_°rög
<
ch¨T
,
	gåaôs
,
	gÆloc
>::
size_ty≥
 
dñim_pos
 = 
°r
.
föd_œ°_of
(
dñim
);

907 i‡(
	gdñim_pos
 !
°d
::
basic_°rög
<
ch¨T
,
	gåaôs
,
	gÆloc
>::
≈os
)

908  
°d
::
make_∑ú
(
°r
.
sub°r
(0, 
dñim_pos
), str.substr(delim_pos+1));

910  
	g°d
::
make_∑ú
(
°r
, 
_dT
(
ch¨T
,""));

913 
	gãm∂©e
 <

914 
ty≥«me
 
	gch¨T
,

915 
ty≥«me
 
	gåaôs
,

916 
ty≥«me
 
	gÆloc


918 
ölöe
 
	g°d
::
∑ú
<
°d
::
basic_°rög
<
ch¨T
,
	gåaôs
,
	gÆloc
>, std::basic_string<charT,traits,alloc> >

919 
•lô_⁄_œ°
 (

920 c⁄° 
°d
::
basic_°rög
<
ch¨T
,
åaôs
,
Æloc
>& 
°r
,

921 c⁄° 
°d
::
basic_°rög
<
ch¨T
,
åaôs
,
Æloc
>& 
dñim


924  
•lô_⁄_œ°
(
°r
, 
dñim
.
c_°r
());

929 
	gãm∂©e
 <

930 
ty≥«me
 
	gch¨T
,

931 
ty≥«me
 
	gåaôs
,

932 
ty≥«me
 
	gÆloc


934 c⁄° 
	g°d
::
ve˘‹
<
°d
::
basic_°rög
<
ch¨T
,
	gåaôs
,
	gÆloc
> > 
•lô
 (

935 c⁄° 
°d
::
basic_°rög
<
ch¨T
,
åaôs
,
Æloc
>& 
°r
,

936 c⁄° 
ch¨T
* 
dñim
 = 
_dT
(charT," \n\r\t")

939 
	g°d
::
basic_°rög
<
ch¨T
,
	gåaôs
,
	gÆloc
> 
	gãmp
;

941 
	g°d
::
ve˘‹
<
°d
::
basic_°rög
<
ch¨T
,
	gåaôs
,
	gÆloc
> > 
	gªs
;

943 
	gi
 = 0; i < 
	g°r
.
size
(); ++i)

946 
boﬁ
 
	ghô
 = 
Ál£
;

947 c⁄° 
ch¨T
* 
	gd
 = 
dñim
;

948 *
	gd
 != '\0')

950 i‡(
°r
[
i
] =*
d
)

952 
hô
 = 
åue
;

955 ++
	gd
;

958 i‡(
	ghô
)

960 i‡(
	gãmp
.
size
() != 0)

962 
ªs
.
push_back
(
ãmp
);

963 
	gãmp
.
˛ór
();

968 
	gãmp
.
push_back
(
°r
[
i
]);

972 i‡(
	gãmp
.
size
() != 0)

973 
ªs
.
push_back
(
ãmp
);

975  
	gªs
;

978 
	gãm∂©e
 <

979 
ty≥«me
 
	gch¨T
,

980 
ty≥«me
 
	gåaôs
,

981 
ty≥«me
 
	gÆloc


983 c⁄° 
	g°d
::
ve˘‹
<
°d
::
basic_°rög
<
ch¨T
,
	gåaôs
,
	gÆloc
> > 
•lô
 (

984 c⁄° 
°d
::
basic_°rög
<
ch¨T
,
åaôs
,
Æloc
>& 
°r
,

985 c⁄° 
°d
::
basic_°rög
<
ch¨T
,
åaôs
,
Æloc
>& 
dñim


988  
•lô
(
°r
,
dñim
.
c_°r
());

991 
ölöe
 c⁄° 
	g°d
::
ve˘‹
<
°d
::
°rög
> 
•lô
 (

992 c⁄° * 
°r
,

993 c⁄° * 
dñim
 = " \n\r\t"

996  
•lô
(
°d
::
°rög
(
°r
),
dñim
);

	@viper/concurrentqueue-src/benchmarks/dlib/string/string_abstract.h

3 #unde‡
DLIB_STRINg_ABSTRACT_


4 #ifde‡
DLIB_STRINg_ABSTRACT_


6 
	~<°rög
>

7 
	~<io°ªam
>

8 
	~<ve˘‹
>

9 
	~"../îr‹.h
"

11 
«me•a˚
 
	gdlib


16 ˛as†
	c°rög_ˇ°_îr‹
 : 
public
 
îr‹


18 
public
:

19 
°rög_ˇ°_îr‹
():
îr‹
(
ECAST_TO_STRING
) {}

22 
	gãm∂©e
 <

23 
ty≥«me
 
	gT
,

24 
ty≥«me
 
	gch¨T
,

25 
ty≥«me
 
	gåaôs
,

26 
ty≥«me
 
	gÆloc


28 c⁄° 
T
 
°rög_ˇ°
 (

29 c⁄° 
°d
::
basic_°rög
<
ch¨T
,
åaôs
,
Æloc
>& 
°r


44 ˛as†
	c°rög_assign


72 c⁄° 
°rög_assign
 
	gß
 = string_assign();

76 ˛as†
	cˇ°_to_°rög_îr‹
 : 
public
 
îr‹


78 
public
:

79 
ˇ°_to_°rög_îr‹
():
îr‹
(
ECAST_TO_STRING
) {}

82 
	gãm∂©e
 <

83 
ty≥«me
 
	gT


85 c⁄° 
	g°d
::
°rög
 
ˇ°_to_°rög
 (

86 c⁄° 
T
& 
ôem


99 
	gãm∂©e
 <

100 
ty≥«me
 
	gT


102 c⁄° 
	g°d
::
w°rög
 
ˇ°_to_w°rög
 (

103 c⁄° 
T
& 
ôem


118 
	g°d
::
°rög
 
∑d_öt_wôh_zîos
 (

119 
i
,

120 
width
 = 6

131 
	gãm∂©e
 <

132 
ty≥«me
 
	gch¨T
,

133 
ty≥«me
 
	gåaôs
,

134 
ty≥«me
 
	gÆloc


136 c⁄° 
	g°d
::
°rög
 
«ºow
 (

137 c⁄° 
°d
::
basic_°rög
<
ch¨T
,
åaôs
,
Æloc
>& 
°r


148 
	gãm∂©e
 <

149 
ty≥«me
 
	gch¨T
,

150 
ty≥«me
 
	gåaôs
,

151 
ty≥«me
 
	gÆloc


153 c⁄° 
	g°d
::
basic_°rög
<
ch¨T
,
	gåaôs
,
	gÆloc
> 
wøp_°rög
 (

154 c⁄° 
°d
::
basic_°rög
<
ch¨T
,
åaôs
,
Æloc
>& 
°r
,

155 c⁄° 
fú°_∑d
 = 0,

156 c⁄° 
ª°_∑d
 = 0,

157 c⁄° 
max_≥r_löe
 = 79

175 
	gãm∂©e
 <

176 
ty≥«me
 
åaôs


177 
ty≥«me
 
	gÆloc


179 c⁄° 
	g°d
::
basic_°rög
<,
	gåaôs
,
	gÆloc
> 
tﬁowî
 (

180 c⁄° 
°d
::
basic_°rög
<,
åaôs
,
Æloc
>& 
°r


191 
	gãm∂©e
 <

192 
ty≥«me
 
	gåaôs
,

193 
ty≥«me
 
	gÆloc


195 c⁄° 
	g°d
::
basic_°rög
<,
	gåaôs
,
	gÆloc
> 
touµî
 (

196 c⁄° 
°d
::
basic_°rög
<,
åaôs
,
Æloc
>& 
°r


207 
	gãm∂©e
 <

208 
ty≥«me
 
	gåaôs
,

209 
ty≥«me
 
	gÆloc


211 
boﬁ
 
°rögs_equÆ_ign‹e_ˇ£
 (

212 c⁄° 
°d
::
basic_°rög
<,
åaôs
,
Æloc
>& 
°r1
,

213 c⁄° 
°d
::
basic_°rög
<,
åaôs
,
Æloc
>& 
°r2


222 
	gãm∂©e
 <

223 
ty≥«me
 
	gåaôs
,

224 
ty≥«me
 
	gÆloc


226 
boﬁ
 
°rögs_equÆ_ign‹e_ˇ£
 (

227 c⁄° 
°d
::
basic_°rög
<,
åaôs
,
Æloc
>& 
°r1
,

228 c⁄° 
°d
::
basic_°rög
<,
åaôs
,
Æloc
>& 
°r2
,

229 
num


239 
	gãm∂©e
 <

240 
ty≥«me
 
	gch¨T
,

241 
ty≥«me
 
	gåaôs
,

242 
ty≥«me
 
	gÆloc


244 c⁄° 
	g°d
::
basic_°rög
<
ch¨T
,
	gåaôs
,
	gÆloc
> 
…rim
 (

245 c⁄° 
°d
::
basic_°rög
<
ch¨T
,
åaôs
,
Æloc
>& 
°r
,

246 c⁄° 
°d
::
basic_°rög
<
ch¨T
,
åaôs
,
Æloc
>& 
åim_ch¨s


254 
	gãm∂©e
 <

255 
ty≥«me
 
	gch¨T
,

256 
ty≥«me
 
	gåaôs
,

257 
ty≥«me
 
	gÆloc


259 c⁄° 
	g°d
::
basic_°rög
<
ch¨T
,
	gåaôs
,
	gÆloc
> 
…rim
 (

260 c⁄° 
°d
::
basic_°rög
<
ch¨T
,
åaôs
,
Æloc
>& 
°r
,

261 c⁄° 
ch¨T
* 
åim_ch¨s
 = 
_dT
(charT," \t\r\n")

272 
	gãm∂©e
 <

273 
ty≥«me
 
	gch¨T
,

274 
ty≥«me
 
	gåaôs
,

275 
ty≥«me
 
	gÆloc


277 c⁄° 
	g°d
::
basic_°rög
<
ch¨T
,
	gåaôs
,
	gÆloc
> 
πrim
 (

278 c⁄° 
°d
::
basic_°rög
<
ch¨T
,
åaôs
,
Æloc
>& 
°r
,

279 c⁄° 
°d
::
basic_°rög
<
ch¨T
,
åaôs
,
Æloc
>& 
åim_ch¨s


287 
	gãm∂©e
 <

288 
ty≥«me
 
	gch¨T
,

289 
ty≥«me
 
	gåaôs
,

290 
ty≥«me
 
	gÆloc


292 c⁄° 
	g°d
::
basic_°rög
<
ch¨T
,
	gåaôs
,
	gÆloc
> 
πrim
 (

293 c⁄° 
°d
::
basic_°rög
<
ch¨T
,
åaôs
,
Æloc
>& 
°r
,

294 c⁄° 
ch¨T
* 
åim_ch¨s
 = 
_dT
(charT," \t\r\n")

305 
	gãm∂©e
 <

306 
ty≥«me
 
	gch¨T
,

307 
ty≥«me
 
	gåaôs
,

308 
ty≥«me
 
	gÆloc


310 c⁄° 
	g°d
::
basic_°rög
<
ch¨T
,
	gåaôs
,
	gÆloc
> 
åim
 (

311 c⁄° 
°d
::
basic_°rög
<
ch¨T
,
åaôs
,
Æloc
>& 
°r
,

312 c⁄° 
°d
::
basic_°rög
<
ch¨T
,
åaôs
,
Æloc
>& 
åim_ch¨s


320 
	gãm∂©e
 <

321 
ty≥«me
 
	gch¨T
,

322 
ty≥«me
 
	gåaôs
,

323 
ty≥«me
 
	gÆloc


325 c⁄° 
	g°d
::
basic_°rög
<
ch¨T
,
	gåaôs
,
	gÆloc
> 
åim
 (

326 c⁄° 
°d
::
basic_°rög
<
ch¨T
,
åaôs
,
Æloc
>& 
°r
,

327 c⁄° 
ch¨T
* 
åim_ch¨s
 = 
_dT
(charT," \t\r\n")

338 
	gãm∂©e
 <

339 
ty≥«me
 
	gch¨T
,

340 
ty≥«me
 
	gåaôs
,

341 
ty≥«me
 
	gÆloc


343 c⁄° 
	g°d
::
basic_°rög
<
ch¨T
,
	gåaôs
,
	gÆloc
> 
Ωad
 (

344 c⁄° 
°d
::
basic_°rög
<
ch¨T
,
åaôs
,
Æloc
>& 
°r
,

345 
∑d_Àngth
,

346 c⁄° 
°d
::
basic_°rög
<
ch¨T
,
åaôs
,
Æloc
>& 
∑d_°rög


361 
	gãm∂©e
 <

362 
ty≥«me
 
	gch¨T
,

363 
ty≥«me
 
	gåaôs
,

364 
ty≥«me
 
	gÆloc


366 c⁄° 
	g°d
::
basic_°rög
<
ch¨T
,
	gåaôs
,
	gÆloc
> 
Ωad
 (

367 c⁄° 
°d
::
basic_°rög
<
ch¨T
,
åaôs
,
Æloc
>& 
°r
,

368 
∑d_Àngth
,

369 c⁄° 
ch¨T
* 
∑d_°rög
 = 
_dT
(charT," ")

380 
	gãm∂©e
 <

381 
ty≥«me
 
	gch¨T
,

382 
ty≥«me
 
	gåaôs
,

383 
ty≥«me
 
	gÆloc


385 c⁄° 
	g°d
::
basic_°rög
<
ch¨T
,
	gåaôs
,
	gÆloc
> 
Õad
 (

386 c⁄° 
°d
::
basic_°rög
<
ch¨T
,
åaôs
,
Æloc
>& 
°r
,

387 
∑d_Àngth
,

388 c⁄° 
°d
::
basic_°rög
<
ch¨T
,
åaôs
,
Æloc
>& 
∑d_°rög


403 
	gãm∂©e
 <

404 
ty≥«me
 
	gch¨T
,

405 
ty≥«me
 
	gåaôs
,

406 
ty≥«me
 
	gÆloc


408 c⁄° 
	g°d
::
basic_°rög
<
ch¨T
,
	gåaôs
,
	gÆloc
> 
Õad
 (

409 c⁄° 
°d
::
basic_°rög
<
ch¨T
,
åaôs
,
Æloc
>& 
°r
,

410 
∑d_Àngth
,

411 c⁄° 
ch¨T
* 
∑d_°rög
 = 
_dT
(charT," ")

422 
	gãm∂©e
 <

423 
ty≥«me
 
	gch¨T
,

424 
ty≥«me
 
	gåaôs
,

425 
ty≥«me
 
	gÆloc


427 c⁄° 
	g°d
::
basic_°rög
<
ch¨T
,
	gåaôs
,
	gÆloc
> 
∑d
 (

428 c⁄° 
°d
::
basic_°rög
<
ch¨T
,
åaôs
,
Æloc
>& 
°r
,

429 
∑d_Àngth
,

430 c⁄° 
°d
::
basic_°rög
<
ch¨T
,
åaôs
,
Æloc
>& 
∑d_°rög


440 
	gãm∂©e
 <

441 
ty≥«me
 
	gch¨T
,

442 
ty≥«me
 
	gåaôs
,

443 
ty≥«me
 
	gÆloc


445 c⁄° 
	g°d
::
basic_°rög
<
ch¨T
,
	gåaôs
,
	gÆloc
> 
∑d
 (

446 c⁄° 
°d
::
basic_°rög
<
ch¨T
,
åaôs
,
Æloc
>& 
°r
,

447 
∑d_Àngth
,

448 c⁄° 
ch¨T
* 
∑d_°rög
 = 
_dT
(charT," ")

459 
	gãm∂©e
 <

460 
ty≥«me
 
	gch¨T
,

461 
ty≥«me
 
	gåaôs
,

462 
ty≥«me
 
	gÆloc


464 c⁄° 
	g°d
::
basic_°rög
<
ch¨T
,
	gåaôs
,
	gÆloc
> 
À·_sub°r
 (

465 c⁄° 
°d
::
basic_°rög
<
ch¨T
,
åaôs
,
Æloc
>& 
°r
,

466 c⁄° 
°d
::
basic_°rög
<
ch¨T
,
åaôs
,
Æloc
>& 
dñim


474 
	gãm∂©e
 <

475 
ty≥«me
 
	gch¨T
,

476 
ty≥«me
 
	gåaôs
,

477 
ty≥«me
 
	gÆloc


479 c⁄° 
	g°d
::
basic_°rög
<
ch¨T
,
	gåaôs
,
	gÆloc
> 
À·_sub°r
 (

480 c⁄° 
°d
::
basic_°rög
<
ch¨T
,
åaôs
,
Æloc
>& 
°r
,

481 c⁄° 
ch¨T
* 
dñim
 = 
_dT
(charT," \n\r\t")

492 
	gãm∂©e
 <

493 
ty≥«me
 
	gch¨T
,

494 
ty≥«me
 
	gåaôs
,

495 
ty≥«me
 
	gÆloc


497 c⁄° 
	g°d
::
basic_°rög
<
ch¨T
,
	gåaôs
,
	gÆloc
> 
right_sub°r
 (

498 c⁄° 
°d
::
basic_°rög
<
ch¨T
,
åaôs
,
Æloc
>& 
°r
,

499 c⁄° 
°d
::
basic_°rög
<
ch¨T
,
åaôs
,
Æloc
>& 
dñim


510 
	gãm∂©e
 <

511 
ty≥«me
 
	gch¨T
,

512 
ty≥«me
 
åaôs


513 
ty≥«me
 
	gÆloc


515 c⁄° 
	g°d
::
basic_°rög
<
ch¨T
,
	gåaôs
,
	gÆloc
> 
right_sub°r
 (

516 c⁄° 
°d
::
basic_°rög
<
ch¨T
,
åaôs
,
Æloc
>& 
°r
,

517 c⁄° 
ch¨T
* 
dñim
 = 
_dT
(charT," \n\r\t")

528 
	gãm∂©e
 <

529 
ty≥«me
 
	gch¨T
,

530 
ty≥«me
 
	gåaôs
,

531 
ty≥«me
 
	gÆloc


533 
	g°d
::
∑ú
<
°d
::
basic_°rög
<
ch¨T
,
	gåaôs
,
	gÆloc
>, std::basic_string<charT,traits,alloc> >

534 
•lô_⁄_fú°
 (

535 c⁄° 
°d
::
basic_°rög
<
ch¨T
,
åaôs
,
Æloc
>& 
°r
,

536 c⁄° 
ch¨T
* 
dñim
 = 
_dT
(charT, " \n\r\t")

549 
	gãm∂©e
 <

550 
ty≥«me
 
	gch¨T
,

551 
ty≥«me
 
	gåaôs
,

552 
ty≥«me
 
	gÆloc


554 
	g°d
::
∑ú
<
°d
::
basic_°rög
<
ch¨T
,
	gåaôs
,
	gÆloc
>, std::basic_string<charT,traits,alloc> >

555 
•lô_⁄_fú°
 (

556 c⁄° 
°d
::
basic_°rög
<
ch¨T
,
åaôs
,
Æloc
>& 
°r
,

557 c⁄° 
°d
::
basic_°rög
<
ch¨T
,
åaôs
,
Æloc
>& 
dñim


568 
	gãm∂©e
 <

569 
ty≥«me
 
	gch¨T
,

570 
ty≥«me
 
	gåaôs
,

571 
ty≥«me
 
	gÆloc


573 
	g°d
::
∑ú
<
°d
::
basic_°rög
<
ch¨T
,
	gåaôs
,
	gÆloc
>, std::basic_string<charT,traits,alloc> >

574 
•lô_⁄_œ°
 (

575 c⁄° 
°d
::
basic_°rög
<
ch¨T
,
åaôs
,
Æloc
>& 
°r
,

576 c⁄° 
ch¨T
* 
dñim
 = 
_dT
(charT, " \n\r\t")

589 
	gãm∂©e
 <

590 
ty≥«me
 
	gch¨T
,

591 
ty≥«me
 
	gåaôs
,

592 
ty≥«me
 
	gÆloc


594 
	g°d
::
∑ú
<
°d
::
basic_°rög
<
ch¨T
,
	gåaôs
,
	gÆloc
>, std::basic_string<charT,traits,alloc> >

595 
•lô_⁄_œ°
 (

596 c⁄° 
°d
::
basic_°rög
<
ch¨T
,
åaôs
,
Æloc
>& 
°r
,

597 c⁄° 
°d
::
basic_°rög
<
ch¨T
,
åaôs
,
Æloc
>& 
dñim


608 
	gãm∂©e
 <

609 
ty≥«me
 
	gch¨T
,

610 
ty≥«me
 
	gåaôs
,

611 
ty≥«me
 
	gÆloc


613 c⁄° 
	g°d
::
ve˘‹
<
°d
::
basic_°rög
<
ch¨T
,
	gåaôs
,
	gÆloc
> > 
•lô
 (

614 c⁄° 
°d
::
basic_°rög
<
ch¨T
,
åaôs
,
Æloc
>& 
°r
,

615 c⁄° 
°d
::
basic_°rög
<
ch¨T
,
åaôs
,
Æloc
>& 
dñim


631 
	gãm∂©e
 <

632 
ty≥«me
 
	gch¨T
,

633 
ty≥«me
 
	gåaôs
,

634 
ty≥«me
 
	gÆloc


636 c⁄° 
	g°d
::
ve˘‹
<
°d
::
basic_°rög
<
ch¨T
,
	gåaôs
,
	gÆloc
> > 
•lô
 (

637 c⁄° 
°d
::
basic_°rög
<
ch¨T
,
åaôs
,
Æloc
>& 
°r
,

638 c⁄° 
ch¨T
* 
dñim
 = 
_dT
(charT," \n\r\t")

	@viper/concurrentqueue-src/benchmarks/dlib/test_for_odr_violations.h

3 #i‚de‡
DLIB_TEST_FOR_ODR_VIOLATIONS_H_


4 
	#DLIB_TEST_FOR_ODR_VIOLATIONS_H_


	)

6 
	~"as£π.h
"

7 
	~"c⁄fig.h
"

19 #ifde‡
ENABLE_ASSERTS


20 c⁄° 
USER_ERROR__öc⁄si°ít_buûd_c⁄figuøti⁄__£e_dlib_Áq_1
;

21 c⁄° 
DLIB_NO_WARN_UNUSED
 
	gdlib_check_as£π_hñ≥r_v¨übÀ
 = 
USER_ERROR__öc⁄si°ít_buûd_c⁄figuøti⁄__£e_dlib_Áq_1
;

37 #i‡
deföed
(
DLIB_NOT_CONFIGURED
Ë&& !deföed(
DLIB__CMAKE_GENERATED_A_CONFIG_H_FILE
)

38 c⁄° 
USER_ERROR__öc⁄si°ít_buûd_c⁄figuøti⁄__£e_dlib_Áq_2
;

39 c⁄° 
DLIB_NO_WARN_UNUSED
 
	gdlib_check_nŸ_c⁄figuªd_hñ≥r_v¨übÀ
 = 
USER_ERROR__öc⁄si°ít_buûd_c⁄figuøti⁄__£e_dlib_Áq_2
;

46 #ifde‡
DLIB_CHECK_FOR_VERSION_MISMATCH


47 c⁄° 
DLIB_CHECK_FOR_VERSION_MISMATCH
;

48 c⁄° 
DLIB_NO_WARN_UNUSED
 
	gdlib_check_f‹_vîsi⁄_mism©ch
 = 
DLIB_CHECK_FOR_VERSION_MISMATCH
;

	@viper/concurrentqueue-src/benchmarks/dlib/threads.h

4 #ifde‡
DLIB_ALL_SOURCE_END


5 
	~"dlib_basic_˝p_buûd_tut‹ül.txt
"

8 #i‚de‡
DLIB_THREADs_


9 
	#DLIB_THREADs_


	)

11 
	~"thªads/thªads_kî√l.h
"

13 
	~"thªads/auto_muãx_exãnsi⁄.h
"

14 
	~"thªads/auto_u∆ock_exãnsi⁄.h
"

15 
	~"thªads/¸óã_√w_thªad_exãnsi⁄.h
"

16 
	~"thªads/mu…ôhªaded_obje˘_exãnsi⁄.h
"

17 
	~"thªads/rmuãx_exãnsi⁄.h
"

18 
	~"thªads/rsig«Àr_exãnsi⁄.h
"

19 
	~"thªads/thªaded_obje˘_exãnsi⁄.h
"

20 
	~"thªads/thªad_•ecific_d©a_exãnsi⁄.h
"

21 
	~"thªads/thªad_fun˘i⁄_exãnsi⁄.h
"

22 
	~"thªads/thªad_poﬁ_exãnsi⁄.h
"

23 
	~"thªads/ªad_wrôe_muãx_exãnsi⁄.h
"

24 
	~"thªads/∑øŒñ_f‹_exãnsi⁄.h
"

25 
	~"thªads/async.h
"

	@viper/concurrentqueue-src/benchmarks/dlib/threads/async.h

3 #i‚de‡
DLIB_AsYNC_Hh_


4 
	#DLIB_AsYNC_Hh_


	)

7 #i‡!
deföed
–
_MSC_VER
) || _MSC_VER >= 1900

9 
	~"async_ab°ø˘.h
"

10 
	~"thªad_poﬁ_exãnsi⁄.h
"

11 
	~<futuª
>

12 
	~<fun˘i⁄Æ
>

14 
«me•a˚
 
	gdlib


19 
«me•a˚
 
	gim∂


21 
	gãm∂©e
 <
ty≥«me
 
	gT
> 
	s£À˘‹
 {};

23 
	gãm∂©e
 <
ty≥«me
 
	gT
,Åy≥«mê
	gU
,Åy≥«mê
	gV
>

24 
ˇŒ_¥om_£t_vÆue
(

25 
T
& 
¥om
,

26 
U
& 
fun
,

27 
£À˘‹
<
V
>

30 
	g¥om
.
£t_vÆue
(
fun
());

33 
	gãm∂©e
 <
ty≥«me
 
	gT
,Åy≥«mê
	gU
>

34 
ˇŒ_¥om_£t_vÆue
(

35 
T
& 
¥om
,

36 
U
& 
fun
,

37 
£À˘‹
<>

40 
fun
();

41 
	g¥om
.
£t_vÆue
();

44 
	gãm∂©e
 <
	gty≥«me
> 
	gªsu…_of
;

46 #i‡(
__˝lu•lus
 >= 201703L || \

47 (
deföed
(
_MSVC_LANG
Ë&& 
	g_MSVC_LANG
 >= 201703L)) && \

48 
__˝p_lib_is_övoˇbÀ
 >= 201703L

49 
ãm∂©e
 <
ty≥«me
 
F
, 
	gty≥«me
... 
	gArgs
>

50 
	gªsu…_of
<
F
(
Args
...)> : 
°d
::
övoke_ªsu…
<F, 
	gArgs
...> {};

52 
	gãm∂©e
 <
ty≥«me
 
	gF
, 
	gty≥«me
... 
	gArgs
>

53 
	gªsu…_of
<
F
(
Args
...)>

54 : 
°d
::
ªsu…_of
<
F
&&(
Args
&&...)> {};

60 
	gthªad_poﬁ
& 
deÁu…_thªad_poﬁ
();

64 
	gãm∂©e
 <

65 
ty≥«me
 
	gFun˘i⁄
,

66 
	gty≥«me
 ...
	gArgs


68 
	g°d
::
futuª
<
ty≥«me
 
im∂
::
ªsu…_of
<
Fun˘i⁄
(
Args
...)>::
ty≥
> 
async
(

69 
thªad_poﬁ
& 
ç
,

70 
Fun˘i⁄
&& 
f
,

71 
Args
&&... 
¨gs


74 autÿ
	g¥om
 = 
°d
::
make_sh¨ed
<°d::
¥omi£
<
ty≥«me
 
im∂
::
ªsu…_of
<
Fun˘i⁄
(
Args
...)>::
ty≥
>>();

75 
	g°d
::
futuª
<
ty≥«me
 
im∂
::
ªsu…_of
<
Fun˘i⁄
(
Args
...)>::
ty≥
> 
ªt
 = 
¥om
->
gë_futuª
();

76 
usög
 
	gböd_t
 = 
de˛ty≥
(
°d
::
böd
(°d::
f‹w¨d
<
Fun˘i⁄
>(
f
), std::f‹w¨d<
Args
>(
¨gs
)...));

77 autÿ
	gfun
 = 
°d
::
make_sh¨ed
<
böd_t
>(°d::
böd
(°d::
f‹w¨d
<
Fun˘i⁄
>(
f
), std::f‹w¨d<
Args
>(
¨gs
)...));

78 
	gç
.
add_èsk_by_vÆue
([
fun
, 
¥om
]()

80 
åy


82 
im∂
::
ˇŒ_¥om_£t_vÆue
(*
¥om
, *
fun
, im∂::
£À˘‹
<
ty≥«me
 im∂::
ªsu…_of
<
Fun˘i⁄
(
Args
...)>::
ty≥
>());

84 
ˇtch
(...)

86 
¥om
->
£t_ex˚±i⁄
(
°d
::
cuºít_ex˚±i⁄
());

89  
	gªt
;

94 
	gãm∂©e
 <

95 
ty≥«me
 
	gFun˘i⁄
,

96 
	gty≥«me
 ...
	gArgs


98 
	g°d
::
futuª
<
ty≥«me
 
im∂
::
ªsu…_of
<
Fun˘i⁄
(
Args
...)>::
ty≥
> 
async
(

99 
Fun˘i⁄
&& 
f
,

100 
Args
&&... 
¨gs


103  
async
(
deÁu…_thªad_poﬁ
(), 
°d
::
f‹w¨d
<
Fun˘i⁄
>(
f
), std::f‹w¨d<
Args
>(
¨gs
)...);

110 #ifde‡
NO_MAKEFILE


111 
	~"async.˝p
"

	@viper/concurrentqueue-src/benchmarks/dlib/threads/async_abstract.h

3 #unde‡
DLIB_AsYNC_ABSTRACT_Hh_


4 #ifde‡
DLIB_AsYNC_ABSTRACT_Hh_


6 
	~"thªad_poﬁ_exãnsi⁄_ab°ø˘.h
"

7 
	~<futuª
>

8 
	~<fun˘i⁄Æ
>

10 
«me•a˚
 
	gdlib


15 
	gthªad_poﬁ
& 
deÁu…_thªad_poﬁ
(

27 
	gãm∂©e
 <

28 
ty≥«me
 
	gFun˘i⁄
,

29 
	gty≥«me
 ...
	gArgs


31 
	g°d
::
futuª
<
ty≥«me
 
°d
::
ªsu…_of
<
Fun˘i⁄
(
Args
...)>::
ty≥
> 
async
(

32 
thªad_poﬁ
& 
ç
,

33 
Fun˘i⁄
&& 
f
,

34 
Args
&&... 
¨gs


50 
	gãm∂©e
 <

51 
ty≥«me
 
	gFun˘i⁄
,

52 
	gty≥«me
 ...
	gArgs


54 
	g°d
::
futuª
<
ty≥«me
 
°d
::
ªsu…_of
<
Fun˘i⁄
(
Args
...)>::
ty≥
> 
async
(

55 
Fun˘i⁄
&& 
f
,

56 
Args
&&... 
¨gs


	@viper/concurrentqueue-src/benchmarks/dlib/threads/auto_mutex_extension.h

3 #i‚de‡
DLIB_AUTO_MUTEX_EXTENSIOn_


4 
	#DLIB_AUTO_MUTEX_EXTENSIOn_


	)

6 
	~"thªads_kî√l.h
"

7 
	~"rmuãx_exãnsi⁄.h
"

8 
	~"ªad_wrôe_muãx_exãnsi⁄.h
"

9 
	~"auto_muãx_exãnsi⁄_ab°ø˘.h
"

11 
«me•a˚
 
	gdlib


16 ˛as†
	cauto_muãx


37 
	gpublic
:

39 
ex∂icô
 
auto_muãx
 (

40 c⁄° 
muãx
& 
m_


41 Ë: 
m
(&
m_
),

42 
r
(0),

43 
rw
(0)

45 
	gm
->
lock
();

48 
ex∂icô
 
auto_muãx
 (

49 c⁄° 
rmuãx
& 
r_


50 Ë: 
m
(0),

51 
r
(&
r_
),

52 
rw
(0)

54 
	gr
->
lock
();

57 
ex∂icô
 
auto_muãx
 (

58 c⁄° 
ªad_wrôe_muãx
& 
rw_


59 Ë: 
m
(0),

60 
r
(0),

61 
rw
(&
rw_
)

63 
	grw
->
lock
();

66 
u∆ock
()

68 i‡(
	gm
 != 0)

70 
m
->
u∆ock
();

71 
	gm
 = 0;

73 i‡(
	gr
 != 0)

75 
r
->
u∆ock
();

76 
	gr
 = 0;

78 i‡(
	grw
 != 0)

80 
rw
->
u∆ock
();

81 
	grw
 = 0;

85 ~
auto_muãx
 (

88 
u∆ock
();

91 
	g¥iv©e
:

93 c⁄° 
muãx
* 
m
;

94 c⁄° 
rmuãx
* 
	gr
;

95 c⁄° 
ªad_wrôe_muãx
* 
	grw
;

98 
auto_muãx
(auto_mutex&);

99 
	gauto_muãx
& 
	g›î©‹
=(
auto_muãx
&);

104 ˛as†
	cauto_muãx_ªad⁄ly


106 
	gpublic
:

108 
ex∂icô
 
auto_muãx_ªad⁄ly
 (

109 c⁄° 
ªad_wrôe_muãx
& 
rw_


110 Ë: 
rw
(
rw_
), 
_has_wrôe_lock
(
Ál£
), 
_has_ªad_lock
(
åue
)

112 
	grw
.
lock_ªad⁄ly
();

115 ~
auto_muãx_ªad⁄ly
 (

118 
u∆ock
();

121 
lock_ªad⁄ly
 (

124 i‡(!
	g_has_ªad_lock
)

126 
u∆ock
();

127 
	grw
.
lock_ªad⁄ly
();

128 
	g_has_ªad_lock
 = 
åue
;

132 
lock_wrôe
 (

135 i‡(!
	g_has_wrôe_lock
)

137 
u∆ock
();

138 
	grw
.
lock
();

139 
	g_has_wrôe_lock
 = 
åue
;

143 
u∆ock
 (

146 i‡(
	g_has_wrôe_lock
)

148 
	grw
.
u∆ock
();

149 
	g_has_wrôe_lock
 = 
Ál£
;

151 i‡(
	g_has_ªad_lock
)

153 
	grw
.
u∆ock_ªad⁄ly
();

154 
	g_has_ªad_lock
 = 
Ál£
;

158 
boﬁ
 
has_ªad_lock
 (

159 Ë{  
	g_has_ªad_lock
; }

161 
boﬁ
 
has_wrôe_lock
 (

162 Ë{  
	g_has_wrôe_lock
; }

164 
	g¥iv©e
:

166 c⁄° 
ªad_wrôe_muãx
& 
rw
;

167 
boﬁ
 
	g_has_wrôe_lock
;

168 
boﬁ
 
	g_has_ªad_lock
;

171 
auto_muãx_ªad⁄ly
(auto_mutex_readonly&);

172 
	gauto_muãx_ªad⁄ly
& 
	g›î©‹
=(
auto_muãx_ªad⁄ly
&);

	@viper/concurrentqueue-src/benchmarks/dlib/threads/auto_mutex_extension_abstract.h

3 #unde‡
DLIB_AUTO_MUTEX_EXTENSIOn_ABSTRACT_


4 #ifde‡
DLIB_AUTO_MUTEX_EXTENSIOn_ABSTRACT_


6 
	~"thªads_kî√l_ab°ø˘.h
"

7 
	~"rmuãx_exãnsi⁄_ab°ø˘.h
"

8 
	~"ªad_wrôe_muãx_exãnsi⁄_ab°ø˘.h
"

10 
«me•a˚
 
	gdlib


15 ˛as†
	cauto_muãx


26 
	gpublic
:

28 
ex∂icô
 
auto_muãx
 (

29 c⁄° 
muãx
& 
m


37 
ex∂icô
 
auto_muãx
 (

38 c⁄° 
rmuãx
& 
m


46 
ex∂icô
 
auto_muãx
 (

47 c⁄° 
ªad_wrôe_muãx
& 
m


55 
u∆ock
(

64 ~
auto_muãx
 (

72 
	g¥iv©e
:

74 
auto_muãx
(auto_mutex&);

75 
	gauto_muãx
& 
	g›î©‹
=(
auto_muãx
&);

80 ˛as†
	cauto_muãx_ªad⁄ly


91 
	gpublic
:

93 
ex∂icô
 
auto_muãx_ªad⁄ly
 (

94 c⁄° 
ªad_wrôe_muãx
& 
m


103 ~
auto_muãx_ªad⁄ly
 (

111 
boﬁ
 
has_ªad_lock
 (

119 
boﬁ
 
has_wrôe_lock
 (

127 
lock_ªad⁄ly
 (

145 
lock_wrôe
 (

163 
u∆ock
 (

174 
	g¥iv©e
:

176 
auto_muãx_ªad⁄ly
(auto_mutex_readonly&);

177 
	gauto_muãx_ªad⁄ly
& 
	g›î©‹
=(
auto_muãx_ªad⁄ly
&);

	@viper/concurrentqueue-src/benchmarks/dlib/threads/auto_unlock_extension.h

3 #i‚de‡
DLIB_AUTO_UNLOCK_EXTENSIOn_


4 
	#DLIB_AUTO_UNLOCK_EXTENSIOn_


	)

6 
	~"thªads_kî√l.h
"

7 
	~"rmuãx_exãnsi⁄.h
"

8 
	~"ªad_wrôe_muãx_exãnsi⁄.h
"

9 
	~"auto_u∆ock_exãnsi⁄_ab°ø˘.h
"

11 
«me•a˚
 
	gdlib


16 ˛as†
	cauto_u∆ock


37 
	gpublic
:

39 
ex∂icô
 
auto_u∆ock
 (

40 c⁄° 
muãx
& 
m_


41 Ë: 
m
(&
m_
),

42 
r
(0),

43 
rw
(0)

46 
ex∂icô
 
auto_u∆ock
 (

47 c⁄° 
rmuãx
& 
r_


48 Ë: 
m
(0),

49 
r
(&
r_
),

50 
rw
(0)

53 
ex∂icô
 
auto_u∆ock
 (

54 c⁄° 
ªad_wrôe_muãx
& 
rw_


55 Ë: 
m
(0),

56 
r
(0),

57 
rw
(&
rw_
)

60 ~
auto_u∆ock
 (

63 i‡(
	gm
 != 0)

64 
m
->
u∆ock
();

65 i‡(
	gr
 != 0)

66 
r
->
u∆ock
();

68 
	grw
->
u∆ock
();

71 
	g¥iv©e
:

73 c⁄° 
muãx
* 
m
;

74 c⁄° 
rmuãx
* 
	gr
;

75 c⁄° 
ªad_wrôe_muãx
* 
	grw
;

78 
auto_u∆ock
(auto_unlock&);

79 
	gauto_u∆ock
& 
	g›î©‹
=(
auto_u∆ock
&);

84 ˛as†
	cauto_u∆ock_ªad⁄ly


87 
	gpublic
:

89 
ex∂icô
 
auto_u∆ock_ªad⁄ly
 (

90 c⁄° 
ªad_wrôe_muãx
& 
rw_


92 
rw
(
rw_
)

95 ~
auto_u∆ock_ªad⁄ly
 (

98 
rw
.
u∆ock_ªad⁄ly
();

101 
	g¥iv©e
:

103 c⁄° 
ªad_wrôe_muãx
& 
rw
;

106 
auto_u∆ock_ªad⁄ly
(auto_unlock_readonly&);

107 
	gauto_u∆ock_ªad⁄ly
& 
	g›î©‹
=(
auto_u∆ock_ªad⁄ly
&);

	@viper/concurrentqueue-src/benchmarks/dlib/threads/auto_unlock_extension_abstract.h

3 #unde‡
DLIB_AUTO_UNLOCK_EXTENSIOn_ABSTRACT_


4 #ifde‡
DLIB_AUTO_UNLOCK_EXTENSIOn_ABSTRACT_


6 
	~"thªads_kî√l_ab°ø˘.h
"

7 
	~"rmuãx_exãnsi⁄_ab°ø˘.h
"

8 
	~"ªad_wrôe_muãx_exãnsi⁄_ab°ø˘.h
"

10 
«me•a˚
 
	gdlib


15 ˛as†
	cauto_u∆ock


27 
	gpublic
:

29 
ex∂icô
 
auto_u∆ock
 (

30 c⁄° 
muãx
& 
m


38 
ex∂icô
 
auto_u∆ock
 (

39 c⁄° 
rmuãx
& 
m


47 
ex∂icô
 
auto_u∆ock
 (

48 c⁄° 
ªad_wrôe_muãx
& 
m


56 ~
auto_u∆ock
 (

64 
	g¥iv©e
:

66 
auto_u∆ock
(auto_unlock&);

67 
	gauto_u∆ock
& 
	g›î©‹
=(
auto_u∆ock
&);

72 ˛as†
	cauto_u∆ock_ªad⁄ly


85 
	gpublic
:

87 
ex∂icô
 
auto_u∆ock_ªad⁄ly
 (

88 c⁄° 
ªad_wrôe_muãx
& 
m


96 ~
auto_u∆ock_ªad⁄ly
 (

104 
	g¥iv©e
:

106 
auto_u∆ock_ªad⁄ly
(auto_unlock_readonly&);

107 
	gauto_u∆ock_ªad⁄ly
& 
	g›î©‹
=(
auto_u∆ock_ªad⁄ly
&);

	@viper/concurrentqueue-src/benchmarks/dlib/threads/create_new_thread_extension.h

3 #i‚de‡
DLIB_CREATE_NEW_THREAD_EXTENSIOn_


4 
	#DLIB_CREATE_NEW_THREAD_EXTENSIOn_


	)

6 
	~"thªads_kî√l_ab°ø˘.h
"

7 
	~"¸óã_√w_thªad_exãnsi⁄_ab°ø˘.h
"

8 
	~"../thªads.h
"

10 
«me•a˚
 
	gdlib


15 
	gãm∂©e
 <

16 
ty≥«me
 
	gT
,

17 (
	gT
::*
fun˘
)()

19 
ölöe
 
dlib_¸óã_√w_thªad_hñ≥r
 (

20 * 
obj


23 
T
* 
o
 = 
°©ic_ˇ°
<T*>(
obj
);

24 (
	go
->*
	gfun˘
)();

29 
	gãm∂©e
 <

30 
ty≥«me
 
	gT
,

31 (
	gT
::*
fun˘
)()

33 
ölöe
 
boﬁ
 
¸óã_√w_thªad
 (

34 
T
& 
obj


37  
¸óã_√w_thªad
(
dlib_¸óã_√w_thªad_hñ≥r
<
T
,
fun˘
>,&
obj
);

	@viper/concurrentqueue-src/benchmarks/dlib/threads/create_new_thread_extension_abstract.h

3 #unde‡
DLIB_CREATE_NEW_THREAD_EXTENSIOn_ABSTRACT_


4 #ifde‡
DLIB_CREATE_NEW_THREAD_EXTENSIOn_ABSTRACT_


6 
	~"thªads_kî√l_ab°ø˘.h
"

8 
«me•a˚
 
	gdlib


13 
	gãm∂©e
 <

14 
ty≥«me
 
	gT
,

15 (
	gT
::*
fun˘
)()

17 
boﬁ
 
¸óã_√w_thªad
 (

18 
T
& 
obj


	@viper/concurrentqueue-src/benchmarks/dlib/threads/multithreaded_object_extension.h

3 #i‚de‡
DLIB_MULTITHREADED_OBJECT_EXTENSIOn_


4 
	#DLIB_MULTITHREADED_OBJECT_EXTENSIOn_


	)

6 
	~"mu…ôhªaded_obje˘_exãnsi⁄_ab°ø˘.h
"

7 
	~"thªads_kî√l.h
"

8 
	~"auto_muãx_exãnsi⁄.h
"

9 
	~"rmuãx_exãnsi⁄.h
"

10 
	~"rsig«Àr_exãnsi⁄.h
"

11 
	~"../Ægs.h
"

12 
	~"../as£π.h
"

13 
	~"../m≠.h
"

14 
	~"../membî_fun˘i⁄_poöãr.h
"

16 
«me•a˚
 
	gdlib


21 ˛as†
	cmu…ôhªaded_obje˘


50 
	gpublic
:

52 
mu…ôhªaded_obje˘
 (

55 
	gvútuÆ
 ~
mu…ôhªaded_obje˘
 (

58 
˛ór
 (

61 
boﬁ
 
is_ru¬ög
 (

64 
numbî_of_thªads_Æive
 (

67 
numbî_of_thªads_ªgi°îed
 (

70 
waô
 (

73 
°¨t
 (

76 
∑u£
 (

79 
°›
 (

82 
	g¥Ÿe˘ed
:

84 
boﬁ
 
should_°›
 (

87 
	gãm∂©e
 <

88 
ty≥«me
 
	gT


90 
ªgi°î_thªad
 (

91 
T
& 
obje˘
,

92 (
T
::*
thªad
)()

95 
auto_muãx
 
M
(
m_
);

96 
	gåy


98 
mÂ
 
	gmf
;

99 
	gmf
.
£t
(
obje˘
,
thªad
);

100 
	gdód_thªads
.
íqueue
(
mf
);

101 i‡(
	gis_ru¬ög_
)

102 
°¨t
();

104 
ˇtch
 (...)

106 
	gis_ru¬ög_
 = 
Ál£
;

107 
	gshould_°›_
 = 
åue
;

108 
	gs
.
brﬂdˇ°
();

109 
	gthrow
;

113 
	g¥iv©e
:

115 ˛as†
	cøii_thªad_hñ≥r


117 
public
:

118 
øii_thªad_hñ≥r
(
mu…ôhªaded_obje˘
& 
£lf_
, 
thªad_id_ty≥
 
id_
);

119 ~
øii_thªad_hñ≥r
();

121 
	gmu…ôhªaded_obje˘
& 
	g£lf
;

122 
thªad_id_ty≥
 
	gid
;

125 
thªad_hñ≥r
(

128 
	gmembî_fun˘i⁄_poöãr
<> 
	tmÂ
;

130 
rmuãx
 
	gm_
;

131 
rsig«Àr
 
	gs
;

132 
	gm≠
<
	gthªad_id_ty≥
,
	gmÂ
,
	gmem‹y_m™agî
<>::
kî√l_2a
>::
kî√l_1a
 
thªad_ids
;

133 
	gqueue
<
	gmÂ
,
	gmem‹y_m™agî
<>::
kî√l_2a
>::
kî√l_1a
 
dód_thªads
;

135 
boﬁ
 
	gis_ru¬ög_
;

136 
boﬁ
 
	gshould_°›_
;

137 
	gthªads_°¨ãd
;

140 
mu…ôhªaded_obje˘
(multithreaded_object&);

141 
	gmu…ôhªaded_obje˘
& 
	g›î©‹
=(
mu…ôhªaded_obje˘
&);

148 #ifde‡
NO_MAKEFILE


149 
	~"mu…ôhªaded_obje˘_exãnsi⁄.˝p
"

	@viper/concurrentqueue-src/benchmarks/dlib/threads/multithreaded_object_extension_abstract.h

3 #unde‡
DLIB_MULTITHREADED_OBJECT_EXTENSIOn_ABSTRACT_


4 #ifde‡
DLIB_MULTITHREADED_OBJECT_EXTENSIOn_ABSTRACT_


6 
	~"thªads_kî√l_ab°ø˘.h
"

8 
«me•a˚
 
	gdlib


13 ˛as†
	cmu…ôhªaded_obje˘


31 
	gpublic
:

33 
mu…ôhªaded_obje˘
 (

45 
	gvútuÆ
 ~
mu…ôhªaded_obje˘
 (

56 
˛ór
(

68 
boﬁ
 
is_ru¬ög
 (

78 
numbî_of_thªads_Æive
 (

86 
numbî_of_thªads_ªgi°îed
 (

94 
waô
 (

105 
°¨t
 (

119 
∑u£
 (

126 
°›
 (

134 
	g¥Ÿe˘ed
:

136 
ãm∂©e
 <

137 
ty≥«me
 
T


139 
ªgi°î_thªad
 (

140 
T
& 
obje˘
,

141 (
T
::*
thªad
)()

160 
boﬁ
 
should_°›
 (

174 
	g¥iv©e
:

177 
mu…ôhªaded_obje˘
(multithreaded_object&);

178 
	gmu…ôhªaded_obje˘
& 
	g›î©‹
=(
mu…ôhªaded_obje˘
&);

	@viper/concurrentqueue-src/benchmarks/dlib/threads/parallel_for_extension.h

3 #i‚de‡
DLIB_PARALLEL_FoR_Hh_


4 
	#DLIB_PARALLEL_FoR_Hh_


	)

6 
	~"∑øŒñ_f‹_exãnsi⁄_ab°ø˘.h
"

7 
	~"thªad_poﬁ_exãnsi⁄.h
"

8 
	~"../c⁄sﬁe_¥ogªss_ödiˇt‹.h
"

9 
	~"async.h
"

11 
«me•a˚
 
	gdlib


16 
«me•a˚
 
	gim∂


19 
	gãm∂©e
 <
ty≥«me
 
	gT
>

20 ˛as†
	chñ≥r_∑øŒñ_f‹


22 
	gpublic
:

23 
hñ≥r_∑øŒñ_f‹
 (

24 
T
& 
obj_
,

25 (
T
::*
fun˘_
)()

27 
obj
(
obj_
),

28 
fun˘
(
fun˘_
)

31 
	gT
& 
	gobj
;

32 (
	gT
::*
fun˘
)();

34 
¥o˚ss_block
 (
begö
, 
íd
)

36 
	gi
 = 
begö
; i < 
	gíd
; ++i)

37 (
	gobj
.*
	gfun˘
)(
	gi
);

41 
	gãm∂©e
 <
ty≥«me
 
	gT
>

42 ˛as†
	chñ≥r_∑øŒñ_f‹_fun˘


44 
	gpublic
:

45 
hñ≥r_∑øŒñ_f‹_fun˘
 (

46 c⁄° 
T
& 
fun˘_


47 Ë: 
fun˘
(
fun˘_
) {}

49 c⁄° 
T
& 
fun˘
;

51 
run
(
i
)

53 
fun˘
(
i
);

57 
	gãm∂©e
 <
ty≥«me
 
	gT
>

58 ˛as†
	chñ≥r_∑øŒñ_f‹_fun˘2


60 
	gpublic
:

61 
hñ≥r_∑øŒñ_f‹_fun˘2
 (

62 c⁄° 
T
& 
fun˘_


63 Ë: 
fun˘
(
fun˘_
) {}

65 c⁄° 
T
& 
fun˘
;

67 
run
(
begö
, 
íd
)

69 
fun˘
(
begö
, 
íd
);

77 
	gãm∂©e
 <
ty≥«me
 
	gT
>

78 
∑øŒñ_f‹_blocked
 (

79 
thªad_poﬁ
& 
ç
,

80 
begö
,

81 
íd
,

82 
T
& 
obj
,

83 (
T
::*
fun˘
)(, ),

84 
chunks_≥r_thªad
 = 8

88 
	`DLIB_ASSERT
(
begö
 <
íd
 && 
chunks_≥r_thªad
 > 0,

91 << "\n\àbegö: " << 
begö


92 << "\n\àíd: " << 
íd


93 << "\n\àchunks_≥r_thªad: " << 
chunks_≥r_thªad


96 i‡(
ç
.
	`num_thªads_ö_poﬁ
() != 0)

98 c⁄° 
num
 = 
íd
-
begö
;

99 c⁄° 
num_w‹kîs
 = 
°©ic_ˇ°
<>(
ç
.
	`num_thªads_ö_poﬁ
());

101 c⁄° 
block_size
 = 
°d
::
	`max
(1L, 
num
/(
num_w‹kîs
*
chunks_≥r_thªad
));

102 
i
 = 0; i < 
num
; i+=
block_size
)

104 
ç
.
	`add_èsk
(
obj
, 
fun˘
, 
begö
+
i
, begö+
°d
::
	`mö
(i+
block_size
, 
num
));

106 
ç
.
	`waô_f‹_Æl_èsks
();

113 (
obj
.*
fun˘
)(
begö
, 
íd
);

115 
	}
}

119 
	gãm∂©e
 <
ty≥«me
 
	gT
>

120 
∑øŒñ_f‹_blocked
 (

121 
num_thªads
,

122 
begö
,

123 
íd
,

124 
T
& 
obj
,

125 (
T
::*
fun˘
)(, ),

126 
chunks_≥r_thªad
 = 8

130 
	`DLIB_ASSERT
(
begö
 <
íd
 && 
chunks_≥r_thªad
 > 0,

133 << "\n\àbegö: " << 
begö


134 << "\n\àíd: " << 
íd


135 << "\n\àchunks_≥r_thªad: " << 
chunks_≥r_thªad


138 
thªad_poﬁ
 
	`ç
(
num_thªads
);

139 
	`∑øŒñ_f‹_blocked
(
ç
, 
begö
, 
íd
, 
obj
, 
fun˘
, 
chunks_≥r_thªad
);

140 
	}
}

144 
	gãm∂©e
 <
ty≥«me
 
	gT
>

145 
	$∑øŒñ_f‹_blocked
 (

146 
thªad_poﬁ
& 
ç
,

147 
begö
,

148 
íd
,

149 c⁄° 
T
& 
fun˘
,

150 
chunks_≥r_thªad
 = 8

154 
	`DLIB_ASSERT
(
begö
 <
íd
 && 
chunks_≥r_thªad
 > 0,

157 << "\n\àbegö: " << 
begö


158 << "\n\àíd: " << 
íd


159 << "\n\àchunks_≥r_thªad: " << 
chunks_≥r_thªad


162 
im∂
::
hñ≥r_∑øŒñ_f‹_fun˘2
<
T
> 
	`hñ≥r
(
fun˘
);

163 
	`∑øŒñ_f‹_blocked
(
ç
, 
begö
, 
íd
, 
hñ≥r
, &
im∂
::
hñ≥r_∑øŒñ_f‹_fun˘2
<
T
>::
run
, 
chunks_≥r_thªad
);

164 
	}
}

168 
	gãm∂©e
 <
ty≥«me
 
	gT
>

169 
	$∑øŒñ_f‹_blocked
 (

170 
num_thªads
,

171 
begö
,

172 
íd
,

173 c⁄° 
T
& 
fun˘
,

174 
chunks_≥r_thªad
 = 8

178 
	`DLIB_ASSERT
(
begö
 <
íd
 && 
chunks_≥r_thªad
 > 0,

181 << "\n\àbegö: " << 
begö


182 << "\n\àíd: " << 
íd


183 << "\n\àchunks_≥r_thªad: " << 
chunks_≥r_thªad


186 
thªad_poﬁ
 
	`ç
(
num_thªads
);

187 
	`∑øŒñ_f‹_blocked
(
ç
, 
begö
, 
íd
, 
fun˘
, 
chunks_≥r_thªad
);

188 
	}
}

190 
	gãm∂©e
 <
ty≥«me
 
	gT
>

191 
	$∑øŒñ_f‹_blocked
 (

192 
begö
,

193 
íd
,

194 c⁄° 
T
& 
fun˘
,

195 
chunks_≥r_thªad
 = 8

198 
	`∑øŒñ_f‹_blocked
(
	`deÁu…_thªad_poﬁ
(), 
begö
, 
íd
, 
fun˘
, 
chunks_≥r_thªad
);

199 
	}
}

204 
	gãm∂©e
 <
ty≥«me
 
	gT
>

205 
∑øŒñ_f‹
 (

206 
thªad_poﬁ
& 
ç
,

207 
begö
,

208 
íd
,

209 
T
& 
obj
,

210 (
T
::*
fun˘
)(),

211 
chunks_≥r_thªad
 = 8

215 
	`DLIB_ASSERT
(
begö
 <
íd
 && 
chunks_≥r_thªad
 > 0,

218 << "\n\àbegö: " << 
begö


219 << "\n\àíd: " << 
íd


220 << "\n\àchunks_≥r_thªad: " << 
chunks_≥r_thªad


223 
im∂
::
hñ≥r_∑øŒñ_f‹
<
T
> 
	`hñ≥r
(
obj
, 
fun˘
);

224 
	`∑øŒñ_f‹_blocked
(
ç
, 
begö
, 
íd
, 
hñ≥r
, &
im∂
::
hñ≥r_∑øŒñ_f‹
<
T
>::
¥o˚ss_block
, 
chunks_≥r_thªad
);

225 
	}
}

229 
	gãm∂©e
 <
ty≥«me
 
	gT
>

230 
∑øŒñ_f‹
 (

231 
num_thªads
,

232 
begö
,

233 
íd
,

234 
T
& 
obj
,

235 (
T
::*
fun˘
)(),

236 
chunks_≥r_thªad
 = 8

240 
	`DLIB_ASSERT
(
begö
 <
íd
 && 
chunks_≥r_thªad
 > 0,

243 << "\n\àbegö: " << 
begö


244 << "\n\àíd: " << 
íd


245 << "\n\àchunks_≥r_thªad: " << 
chunks_≥r_thªad


248 
thªad_poﬁ
 
	`ç
(
num_thªads
);

249 
	`∑øŒñ_f‹
(
ç
, 
begö
, 
íd
, 
obj
, 
fun˘
, 
chunks_≥r_thªad
);

250 
	}
}

254 
	gãm∂©e
 <
ty≥«me
 
	gT
>

255 
	$∑øŒñ_f‹
 (

256 
thªad_poﬁ
& 
ç
,

257 
begö
,

258 
íd
,

259 c⁄° 
T
& 
fun˘
,

260 
chunks_≥r_thªad
 = 8

264 
	`DLIB_ASSERT
(
begö
 <
íd
 && 
chunks_≥r_thªad
 > 0,

267 << "\n\àbegö: " << 
begö


268 << "\n\àíd: " << 
íd


269 << "\n\àchunks_≥r_thªad: " << 
chunks_≥r_thªad


272 
im∂
::
hñ≥r_∑øŒñ_f‹_fun˘
<
T
> 
	`hñ≥r
(
fun˘
);

273 
	`∑øŒñ_f‹
(
ç
, 
begö
, 
íd
, 
hñ≥r
, &
im∂
::
hñ≥r_∑øŒñ_f‹_fun˘
<
T
>::
run
, 
chunks_≥r_thªad
);

274 
	}
}

278 
	gãm∂©e
 <
ty≥«me
 
	gT
>

279 
	$∑øŒñ_f‹
 (

280 
num_thªads
,

281 
begö
,

282 
íd
,

283 c⁄° 
T
& 
fun˘
,

284 
chunks_≥r_thªad
 = 8

288 
	`DLIB_ASSERT
(
begö
 <
íd
 && 
chunks_≥r_thªad
 > 0,

291 << "\n\àbegö: " << 
begö


292 << "\n\àíd: " << 
íd


293 << "\n\àchunks_≥r_thªad: " << 
chunks_≥r_thªad


296 
thªad_poﬁ
 
	`ç
(
num_thªads
);

297 
	`∑øŒñ_f‹
(
ç
, 
begö
, 
íd
, 
fun˘
, 
chunks_≥r_thªad
);

298 
	}
}

302 
	gãm∂©e
 <
ty≥«me
 
	gT
>

303 
	$∑øŒñ_f‹
 (

304 
begö
,

305 
íd
,

306 c⁄° 
T
& 
fun˘
,

307 
chunks_≥r_thªad
 = 8

310 
	`∑øŒñ_f‹
(
	`deÁu…_thªad_poﬁ
(), 
begö
, 
íd
, 
fun˘
, 
chunks_≥r_thªad
);

311 
	}
}

316 
«me•a˚
 
	gim∂


318 
	gãm∂©e
 <
ty≥«me
 
	gT
>

319 ˛as†
	c∑rf‹_vîbo£_hñ≥r


321 
	gpublic
:

322 
∑rf‹_vîbo£_hñ≥r
(
T
& 
obj_
, (T::*
fun˘_
)(), 
begö
, 
íd
) :

323 
obj
(
obj_
), 
fun˘
(
fun˘_
), 
pb¨
(
íd
-
begö
)

325 
	gcou¡
 = 0;

326 
	gwrŸe_to_s¸ìn
 = 
pb¨
.
¥öt_°©us
(0);

329 ~
∑rf‹_vîbo£_hñ≥r
()

331 i‡(
	gwrŸe_to_s¸ìn
)

332 
	g°d
::
cout
 << 
°d
::
ídl
;

335 
muèbÀ
 
	gcou¡
;

336 
	gT
& 
	gobj
;

337 (
	gT
::*
fun˘
)();

338 
muèbÀ
 
c⁄sﬁe_¥ogªss_ödiˇt‹
 
	gpb¨
;

339 
muèbÀ
 
boﬁ
 
	gwrŸe_to_s¸ìn
;

340 
muãx
 
	gm
;

342 
›î©‹
()(
	gi
) const

344 (
	gobj
.*
	gfun˘
)(
	gi
);

346 
auto_muãx
 
lock
(
m
);

347 
	gwrŸe_to_s¸ìn
 = 
pb¨
.
¥öt_°©us
(++
cou¡
Ë|| 
wrŸe_to_s¸ìn
;

353 
	gãm∂©e
 <
ty≥«me
 
	gT
>

354 ˛as†
	c∑rf‹_vîbo£_hñ≥r3


356 
	gpublic
:

357 
∑rf‹_vîbo£_hñ≥r3
(
T
& 
obj_
, (T::*
fun˘_
)(,), 
begö
, 
íd
) :

358 
obj
(
obj_
), 
fun˘
(
fun˘_
), 
pb¨
(
íd
-
begö
)

360 
	gcou¡
 = 0;

361 
	gwrŸe_to_s¸ìn
 = 
pb¨
.
¥öt_°©us
(0);

364 ~
∑rf‹_vîbo£_hñ≥r3
()

366 i‡(
	gwrŸe_to_s¸ìn
)

367 
	g°d
::
cout
 << 
°d
::
ídl
;

370 
muèbÀ
 
	gcou¡
;

371 
	gT
& 
	gobj
;

372 (
	gT
::*
fun˘
)(,);

373 
muèbÀ
 
c⁄sﬁe_¥ogªss_ödiˇt‹
 
	gpb¨
;

374 
muèbÀ
 
boﬁ
 
	gwrŸe_to_s¸ìn
;

375 
muãx
 
	gm
;

377 
›î©‹
()(
	gbegö
, 
	gíd
) const

379 (
	gobj
.*
	gfun˘
)(
	gbegö
, 
	gíd
);

381 
auto_muãx
 
lock
(
m
);

382 
	gcou¡
 +
íd
-
begö
;

383 
	gwrŸe_to_s¸ìn
 = 
pb¨
.
¥öt_°©us
(
cou¡
Ë|| 
wrŸe_to_s¸ìn
;

388 
	gãm∂©e
 <
ty≥«me
 
	gT
>

389 ˛as†
	c∑rf‹_vîbo£_hñ≥r2


391 
	gpublic
:

392 
∑rf‹_vîbo£_hñ≥r2
(c⁄° 
T
& 
obj_
, 
begö
, 
íd
Ë: 
obj
(obj_), 
pb¨
(end-begin)

394 
	gcou¡
 = 0;

395 
	gwrŸe_to_s¸ìn
 = 
pb¨
.
¥öt_°©us
(0);

398 ~
∑rf‹_vîbo£_hñ≥r2
()

400 i‡(
	gwrŸe_to_s¸ìn
)

401 
	g°d
::
cout
 << 
°d
::
ídl
;

404 
muèbÀ
 
	gcou¡
;

405 c⁄° 
	gT
& 
	gobj
;

406 
muèbÀ
 
c⁄sﬁe_¥ogªss_ödiˇt‹
 
	gpb¨
;

407 
muèbÀ
 
boﬁ
 
	gwrŸe_to_s¸ìn
;

408 
muãx
 
	gm
;

410 
›î©‹
()(
	gi
) const

412 
obj
(
i
);

414 
auto_muãx
 
lock
(
m
);

415 
	gwrŸe_to_s¸ìn
 = 
pb¨
.
¥öt_°©us
(++
cou¡
Ë|| 
wrŸe_to_s¸ìn
;

419 
›î©‹
()(
	gbegö
, 
	gíd
) const

421 
obj
(
begö
, 
íd
);

423 
auto_muãx
 
lock
(
m
);

424 
	gcou¡
 +
íd
-
begö
;

425 
	gwrŸe_to_s¸ìn
 = 
pb¨
.
¥öt_°©us
(
cou¡
Ë|| 
wrŸe_to_s¸ìn
;

431 
	gãm∂©e
 <
ty≥«me
 
	gT
>

432 
∑øŒñ_f‹_vîbo£
 (

433 
thªad_poﬁ
& 
ç
,

434 
begö
,

435 
íd
,

436 
T
& 
obj
,

437 (
T
::*
fun˘
)(),

438 
chunks_≥r_thªad
 = 8

442 
	`DLIB_ASSERT
(
begö
 <
íd
 && 
chunks_≥r_thªad
 > 0,

445 << "\n\àbegö: " << 
begö


446 << "\n\àíd: " << 
íd


447 << "\n\àchunks_≥r_thªad: " << 
chunks_≥r_thªad


450 
im∂
::
∑rf‹_vîbo£_hñ≥r
<
T
> 
	`hñ≥r
(
obj
, 
fun˘
, 
begö
, 
íd
);

451 
	`∑øŒñ_f‹
(
ç
, 
begö
, 
íd
, 
hñ≥r
, 
chunks_≥r_thªad
);

452 
	}
}

456 
	gãm∂©e
 <
ty≥«me
 
	gT
>

457 
∑øŒñ_f‹_vîbo£
 (

458 
num_thªads
,

459 
begö
,

460 
íd
,

461 
T
& 
obj
,

462 (
T
::*
fun˘
)(),

463 
chunks_≥r_thªad
 = 8

467 
	`DLIB_ASSERT
(
begö
 <
íd
 && 
chunks_≥r_thªad
 > 0,

470 << "\n\àbegö: " << 
begö


471 << "\n\àíd: " << 
íd


472 << "\n\àchunks_≥r_thªad: " << 
chunks_≥r_thªad


475 
im∂
::
∑rf‹_vîbo£_hñ≥r
<
T
> 
	`hñ≥r
(
obj
, 
fun˘
, 
begö
, 
íd
);

476 
	`∑øŒñ_f‹
(
num_thªads
, 
begö
, 
íd
, 
hñ≥r
, 
chunks_≥r_thªad
);

477 
	}
}

481 
	gãm∂©e
 <
ty≥«me
 
	gT
>

482 
	$∑øŒñ_f‹_vîbo£
 (

483 
thªad_poﬁ
& 
ç
,

484 
begö
,

485 
íd
,

486 c⁄° 
T
& 
fun˘
,

487 
chunks_≥r_thªad
 = 8

491 
	`DLIB_ASSERT
(
begö
 <
íd
 && 
chunks_≥r_thªad
 > 0,

494 << "\n\àbegö: " << 
begö


495 << "\n\àíd: " << 
íd


496 << "\n\àchunks_≥r_thªad: " << 
chunks_≥r_thªad


499 
im∂
::
∑rf‹_vîbo£_hñ≥r2
<
T
> 
	`hñ≥r
(
fun˘
, 
begö
, 
íd
);

500 
	`∑øŒñ_f‹
(
ç
, 
begö
, 
íd
, 
hñ≥r
, 
chunks_≥r_thªad
);

501 
	}
}

505 
	gãm∂©e
 <
ty≥«me
 
	gT
>

506 
	$∑øŒñ_f‹_vîbo£
 (

507 
num_thªads
,

508 
begö
,

509 
íd
,

510 c⁄° 
T
& 
fun˘
,

511 
chunks_≥r_thªad
 = 8

515 
	`DLIB_ASSERT
(
begö
 <
íd
 && 
chunks_≥r_thªad
 > 0,

518 << "\n\àbegö: " << 
begö


519 << "\n\àíd: " << 
íd


520 << "\n\àchunks_≥r_thªad: " << 
chunks_≥r_thªad


523 
im∂
::
∑rf‹_vîbo£_hñ≥r2
<
T
> 
	`hñ≥r
(
fun˘
, 
begö
, 
íd
);

524 
	`∑øŒñ_f‹
(
num_thªads
, 
begö
, 
íd
, 
hñ≥r
, 
chunks_≥r_thªad
);

525 
	}
}

529 
	gãm∂©e
 <
ty≥«me
 
	gT
>

530 
	$∑øŒñ_f‹_vîbo£
 (

531 
begö
,

532 
íd
,

533 c⁄° 
T
& 
fun˘
,

534 
chunks_≥r_thªad
 = 8

538 
	`DLIB_ASSERT
(
begö
 <
íd
 && 
chunks_≥r_thªad
 > 0,

541 << "\n\àbegö: " << 
begö


542 << "\n\àíd: " << 
íd


543 << "\n\àchunks_≥r_thªad: " << 
chunks_≥r_thªad


546 
im∂
::
∑rf‹_vîbo£_hñ≥r2
<
T
> 
	`hñ≥r
(
fun˘
, 
begö
, 
íd
);

547 
	`∑øŒñ_f‹
(
begö
, 
íd
, 
hñ≥r
, 
chunks_≥r_thªad
);

548 
	}
}

552 
	gãm∂©e
 <
ty≥«me
 
	gT
>

553 
∑øŒñ_f‹_blocked_vîbo£
 (

554 
thªad_poﬁ
& 
ç
,

555 
begö
,

556 
íd
,

557 
T
& 
obj
,

558 (
T
::*
fun˘
)(,),

559 
chunks_≥r_thªad
 = 8

563 
	`DLIB_ASSERT
(
begö
 <
íd
 && 
chunks_≥r_thªad
 > 0,

566 << "\n\àbegö: " << 
begö


567 << "\n\àíd: " << 
íd


568 << "\n\àchunks_≥r_thªad: " << 
chunks_≥r_thªad


571 
im∂
::
∑rf‹_vîbo£_hñ≥r3
<
T
> 
	`hñ≥r
(
obj
, 
fun˘
, 
begö
, 
íd
);

572 
	`∑øŒñ_f‹_blocked
(
ç
, 
begö
, 
íd
, 
hñ≥r
, 
chunks_≥r_thªad
);

573 
	}
}

577 
	gãm∂©e
 <
ty≥«me
 
	gT
>

578 
∑øŒñ_f‹_blocked_vîbo£
 (

579 
num_thªads
,

580 
begö
,

581 
íd
,

582 
T
& 
obj
,

583 (
T
::*
fun˘
)(,),

584 
chunks_≥r_thªad
 = 8

588 
	`DLIB_ASSERT
(
begö
 <
íd
 && 
chunks_≥r_thªad
 > 0,

591 << "\n\àbegö: " << 
begö


592 << "\n\àíd: " << 
íd


593 << "\n\àchunks_≥r_thªad: " << 
chunks_≥r_thªad


596 
im∂
::
∑rf‹_vîbo£_hñ≥r3
<
T
> 
	`hñ≥r
(
obj
, 
fun˘
, 
begö
, 
íd
);

597 
	`∑øŒñ_f‹_blocked
(
num_thªads
, 
begö
, 
íd
, 
hñ≥r
, 
chunks_≥r_thªad
);

598 
	}
}

602 
	gãm∂©e
 <
ty≥«me
 
	gT
>

603 
	$∑øŒñ_f‹_blocked_vîbo£
 (

604 
thªad_poﬁ
& 
ç
,

605 
begö
,

606 
íd
,

607 c⁄° 
T
& 
fun˘
,

608 
chunks_≥r_thªad
 = 8

612 
	`DLIB_ASSERT
(
begö
 <
íd
 && 
chunks_≥r_thªad
 > 0,

615 << "\n\àbegö: " << 
begö


616 << "\n\àíd: " << 
íd


617 << "\n\àchunks_≥r_thªad: " << 
chunks_≥r_thªad


620 
im∂
::
∑rf‹_vîbo£_hñ≥r2
<
T
> 
	`hñ≥r
(
fun˘
, 
begö
, 
íd
);

621 
	`∑øŒñ_f‹_blocked
(
ç
, 
begö
, 
íd
, 
hñ≥r
, 
chunks_≥r_thªad
);

622 
	}
}

626 
	gãm∂©e
 <
ty≥«me
 
	gT
>

627 
	$∑øŒñ_f‹_blocked_vîbo£
 (

628 
num_thªads
,

629 
begö
,

630 
íd
,

631 c⁄° 
T
& 
fun˘
,

632 
chunks_≥r_thªad
 = 8

636 
	`DLIB_ASSERT
(
begö
 <
íd
 && 
chunks_≥r_thªad
 > 0,

639 << "\n\àbegö: " << 
begö


640 << "\n\àíd: " << 
íd


641 << "\n\àchunks_≥r_thªad: " << 
chunks_≥r_thªad


644 
im∂
::
∑rf‹_vîbo£_hñ≥r2
<
T
> 
	`hñ≥r
(
fun˘
, 
begö
, 
íd
);

645 
	`∑øŒñ_f‹_blocked
(
num_thªads
, 
begö
, 
íd
, 
hñ≥r
, 
chunks_≥r_thªad
);

646 
	}
}

650 
	gãm∂©e
 <
ty≥«me
 
	gT
>

651 
	$∑øŒñ_f‹_blocked_vîbo£
 (

652 
begö
,

653 
íd
,

654 c⁄° 
T
& 
fun˘
,

655 
chunks_≥r_thªad
 = 8

659 
	`DLIB_ASSERT
(
begö
 <
íd
 && 
chunks_≥r_thªad
 > 0,

662 << "\n\àbegö: " << 
begö


663 << "\n\àíd: " << 
íd


664 << "\n\àchunks_≥r_thªad: " << 
chunks_≥r_thªad


667 
im∂
::
∑rf‹_vîbo£_hñ≥r2
<
T
> 
	`hñ≥r
(
fun˘
, 
begö
, 
íd
);

668 
	`∑øŒñ_f‹_blocked
(
begö
, 
íd
, 
hñ≥r
, 
chunks_≥r_thªad
);

669 
	}
}

	@viper/concurrentqueue-src/benchmarks/dlib/threads/parallel_for_extension_abstract.h

3 #unde‡
DLIB_PARALLEL_FoR_ABSTRACT_Hh_


4 #ifde‡
DLIB_PARALLEL_FoR_ABSTRACT_Hh_


6 
	~"thªad_poﬁ_exãnsi⁄_ab°ø˘.h
"

7 
	~"async_ab°ø˘.h
"

9 
«me•a˚
 
	gdlib


14 
	gãm∂©e
 <
ty≥«me
 
	gT
>

15 
∑øŒñ_f‹_blocked
 (

16 
thªad_poﬁ
& 
ç
,

17 
begö
,

18 
íd
,

19 
T
& 
obj
,

20 (
T
::*
fun˘
)(, ),

21 
chunks_≥r_thªad
 = 8

50 
	gãm∂©e
 <
ty≥«me
 
	gT
>

51 
∑øŒñ_f‹_blocked
 (

52 
num_thªads
,

53 
begö
,

54 
íd
,

55 
T
& 
obj
,

56 (
T
::*
fun˘
)(, ),

57 
chunks_≥r_thªad
 = 8

71 
	gãm∂©e
 <
ty≥«me
 
	gT
>

72 
∑øŒñ_f‹_blocked
 (

73 
thªad_poﬁ
& 
ç
,

74 
begö
,

75 
íd
,

76 c⁄° 
T
& 
fun˘
,

77 
chunks_≥r_thªad
 = 8

105 
	gãm∂©e
 <
ty≥«me
 
	gT
>

106 
∑øŒñ_f‹_blocked
 (

107 
num_thªads
,

108 
begö
,

109 
íd
,

110 c⁄° 
T
& 
fun˘
,

111 
chunks_≥r_thªad
 = 8

125 
	gãm∂©e
 <
ty≥«me
 
	gT
>

126 
∑øŒñ_f‹_blocked
 (

127 
begö
,

128 
íd
,

129 c⁄° 
T
& 
fun˘
,

130 
chunks_≥r_thªad
 = 8

144 
	gãm∂©e
 <
ty≥«me
 
	gT
>

145 
∑øŒñ_f‹
 (

146 
thªad_poﬁ
& 
ç
,

147 
begö
,

148 
íd
,

149 
T
& 
obj
,

150 (
T
::*
fun˘
)(),

151 
chunks_≥r_thªad
 = 8

173 
	gãm∂©e
 <
ty≥«me
 
	gT
>

174 
∑øŒñ_f‹
 (

175 
num_thªads
,

176 
begö
,

177 
íd
,

178 
T
& 
obj
,

179 (
T
::*
fun˘
)(),

180 
chunks_≥r_thªad
 = 8

194 
	gãm∂©e
 <
ty≥«me
 
	gT
>

195 
∑øŒñ_f‹
 (

196 
thªad_poﬁ
& 
ç
,

197 
begö
,

198 
íd
,

199 c⁄° 
T
& 
fun˘
,

200 
chunks_≥r_thªad
 = 8

221 
	gãm∂©e
 <
ty≥«me
 
	gT
>

222 
∑øŒñ_f‹
 (

223 
num_thªads
,

224 
begö
,

225 
íd
,

226 c⁄° 
T
& 
fun˘
,

227 
chunks_≥r_thªad
 = 8

241 
	gãm∂©e
 <
ty≥«me
 
	gT
>

242 
∑øŒñ_f‹
 (

243 
begö
,

244 
íd
,

245 c⁄° 
T
& 
fun˘
,

246 
chunks_≥r_thªad
 = 8

260 
	gãm∂©e
 <
ty≥«me
 
	gT
>

261 
∑øŒñ_f‹_vîbo£
 (

262 
thªad_poﬁ
& 
ç
,

263 
begö
,

264 
íd
,

265 
T
& 
obj
,

266 (
T
::*
fun˘
)(),

267 
chunks_≥r_thªad
 = 8

281 
	gãm∂©e
 <
ty≥«me
 
	gT
>

282 
∑øŒñ_f‹_vîbo£
 (

283 
num_thªads
,

284 
begö
,

285 
íd
,

286 
T
& 
obj
,

287 (
T
::*
fun˘
)(),

288 
chunks_≥r_thªad
 = 8

302 
	gãm∂©e
 <
ty≥«me
 
	gT
>

303 
∑øŒñ_f‹_vîbo£
 (

304 
thªad_poﬁ
& 
ç
,

305 
begö
,

306 
íd
,

307 c⁄° 
T
& 
fun˘
,

308 
chunks_≥r_thªad
 = 8

322 
	gãm∂©e
 <
ty≥«me
 
	gT
>

323 
∑øŒñ_f‹_vîbo£
 (

324 
num_thªads
,

325 
begö
,

326 
íd
,

327 c⁄° 
T
& 
fun˘
,

328 
chunks_≥r_thªad
 = 8

342 
	gãm∂©e
 <
ty≥«me
 
	gT
>

343 
∑øŒñ_f‹_vîbo£
 (

344 
begö
,

345 
íd
,

346 c⁄° 
T
& 
fun˘
,

347 
chunks_≥r_thªad
 = 8

363 
	gãm∂©e
 <
ty≥«me
 
	gT
>

364 
∑øŒñ_f‹_blocked_vîbo£
 (

365 
thªad_poﬁ
& 
ç
,

366 
begö
,

367 
íd
,

368 
T
& 
obj
,

369 (
T
::*
fun˘
)(,),

370 
chunks_≥r_thªad
 = 8

384 
	gãm∂©e
 <
ty≥«me
 
	gT
>

385 
∑øŒñ_f‹_blocked_vîbo£
 (

386 
num_thªads
,

387 
begö
,

388 
íd
,

389 
T
& 
obj
,

390 (
T
::*
fun˘
)(,),

391 
chunks_≥r_thªad
 = 8

405 
	gãm∂©e
 <
ty≥«me
 
	gT
>

406 
∑øŒñ_f‹_blocked_vîbo£
 (

407 
thªad_poﬁ
& 
ç
,

408 
begö
,

409 
íd
,

410 c⁄° 
T
& 
fun˘
,

411 
chunks_≥r_thªad
 = 8

425 
	gãm∂©e
 <
ty≥«me
 
	gT
>

426 
∑øŒñ_f‹_blocked_vîbo£
 (

427 
num_thªads
,

428 
begö
,

429 
íd
,

430 c⁄° 
T
& 
fun˘
,

431 
chunks_≥r_thªad
 = 8

445 
	gãm∂©e
 <
ty≥«me
 
	gT
>

446 
∑øŒñ_f‹_blocked_vîbo£
 (

447 
begö
,

448 
íd
,

449 c⁄° 
T
& 
fun˘
,

450 
chunks_≥r_thªad
 = 8

	@viper/concurrentqueue-src/benchmarks/dlib/threads/posix.h

3 #i‚de‡
DLIB_THREADS_KERNEl_1_


4 
	~"thªads_kî√l_2.h
"

	@viper/concurrentqueue-src/benchmarks/dlib/threads/read_write_mutex_extension.h

3 #i‚de‡
DLIB_READ_WRITE_MUTEX_EXTENSIOn_


4 
	#DLIB_READ_WRITE_MUTEX_EXTENSIOn_


	)

6 
	~"thªads_kî√l.h
"

7 
	~"ªad_wrôe_muãx_exãnsi⁄_ab°ø˘.h
"

9 
«me•a˚
 
	gdlib


14 ˛as†
	cªad_wrôe_muãx


42 
	gpublic
:

44 
ªad_wrôe_muãx
 (

45 Ë: 
s
(
m
),

46 
max_locks
(0xFFFFFFFF),

47 
avaûabÀ_locks
(
max_locks
),

48 
wrôe_lock_ö_¥ogªss
(
Ál£
),

49 
wrôe_lock_a˘ive
(
Ál£
)

52 
ex∂icô
 
ªad_wrôe_muãx
 (

53 
max_locks_


54 Ë: 
s
(
m
),

55 
max_locks
(
max_locks_
),

56 
avaûabÀ_locks
(
max_locks_
),

57 
wrôe_lock_ö_¥ogªss
(
Ál£
),

58 
wrôe_lock_a˘ive
(
Ál£
)

61 
DLIB_ASSERT
(
max_locks
 > 0,

64 << "\n\àthis: " << 
this


68 ~
ªad_wrôe_muãx
 (

72 
lock
 (

75 
	gm
.
lock
();

80 
	gwrôe_lock_ö_¥ogªss
)

81 
	gs
.
waô
();

84 
	gwrôe_lock_ö_¥ogªss
 = 
åue
;

87 
	glocks_obèöed
 = 
avaûabÀ_locks
;

88 
	gavaûabÀ_locks
 = 0;

89 
	glocks_obèöed
 !
max_locks
)

91 
s
.
waô
();

92 
	glocks_obèöed
 +
avaûabÀ_locks
;

93 
	gavaûabÀ_locks
 = 0;

96 
	gwrôe_lock_ö_¥ogªss
 = 
Ál£
;

97 
	gwrôe_lock_a˘ive
 = 
åue
;

99 
	gm
.
u∆ock
();

102 
u∆ock
 (

105 
	gm
.
lock
();

108 i‡(
	gwrôe_lock_a˘ive
)

110 
	gavaûabÀ_locks
 = 
max_locks
;

111 
	gwrôe_lock_a˘ive
 = 
Ál£
;

112 
	gs
.
brﬂdˇ°
();

115 
	gm
.
u∆ock
();

118 
lock_ªad⁄ly
 (

121 
	gm
.
lock
();

123 
	gavaûabÀ_locks
 == 0)

124 
s
.
waô
();

126 --
	gavaûabÀ_locks
;

128 
	gm
.
u∆ock
();

131 
u∆ock_ªad⁄ly
 (

134 
	gm
.
lock
();

138 i‡(
	gavaûabÀ_locks
 !
max_locks
 && !
wrôe_lock_a˘ive
)

140 ++
avaûabÀ_locks
;

143 i‡(
	gavaûabÀ_locks
 =1 || 
wrôe_lock_ö_¥ogªss
)

145 
s
.
brﬂdˇ°
();

149 
	gm
.
u∆ock
();

152 
max_ªad⁄ly_locks
 (

155  
	gmax_locks
;

158 
	g¥iv©e
:

159 
muãx
 
m
;

160 
sig«Àr
 
	gs
;

161 c⁄° 
	gmax_locks
;

162 
muèbÀ
 
	gavaûabÀ_locks
;

163 
muèbÀ
 
boﬁ
 
	gwrôe_lock_ö_¥ogªss
;

164 
muèbÀ
 
boﬁ
 
	gwrôe_lock_a˘ive
;

167 
ªad_wrôe_muãx
(read_write_mutex&);

168 
	gªad_wrôe_muãx
& 
	g›î©‹
=(
ªad_wrôe_muãx
&);

	@viper/concurrentqueue-src/benchmarks/dlib/threads/read_write_mutex_extension_abstract.h

3 #unde‡
DLIB_READWRITE_MUTEX_EXTENSIOn_ABSTRACT_


4 #ifde‡
DLIB_READWRITE_MUTEX_EXTENSIOn_ABSTRACT_


6 
	~"thªads_kî√l_ab°ø˘.h
"

8 
«me•a˚
 
	gdlib


13 ˛as†
	cªad_wrôe_muãx


37 
	gpublic
:

39 
ªad_wrôe_muãx
 (

52 
ex∂icô
 
ªad_wrôe_muãx
 (

53 
max_locks


67 ~
ªad_wrôe_muãx
 (

76 
lock
 (

91 
u∆ock
 (

101 
max_ªad⁄ly_locks
 (

108 
lock_ªad⁄ly
 (

124 
u∆ock_ªad⁄ly
 (

134 
	g¥iv©e
:

136 
ªad_wrôe_muãx
(read_write_mutex&);

137 
	gªad_wrôe_muãx
& 
	g›î©‹
=(
ªad_wrôe_muãx
&);

	@viper/concurrentqueue-src/benchmarks/dlib/threads/rmutex_extension.h

3 #i‚de‡
DLIB_RMUTEX_EXTENSIOn_


4 
	#DLIB_RMUTEX_EXTENSIOn_


	)

6 
	~"thªads_kî√l.h
"

7 
	~"rmuãx_exãnsi⁄_ab°ø˘.h
"

9 
«me•a˚
 
	gdlib


14 ˛as†
	crmuãx


31 
	gpublic
:

33 
rmuãx
 (

34 Ë: 
s
(
m
),

35 
thªad_id
(0),

36 
cou¡
(0)

39 ~
rmuãx
 (

43 
lock_cou¡
 (

46  
	gcou¡
;

49 
lock
 (

50 
times
 = 1

53 c⁄° 
thªad_id_ty≥
 
cuºít_thªad_id
 = 
gë_thªad_id
();

54 
	gm
.
lock
();

55 i‡(
	gthªad_id
 =
cuºít_thªad_id
)

58 
cou¡
 +
times
;

63 
	gcou¡
 != 0)

64 
s
.
waô
();

66 
	gcou¡
 = 
times
;

67 
	gthªad_id
 = 
cuºít_thªad_id
;

69 
	gm
.
u∆ock
();

72 
u∆ock
 (

73 
times
 = 1

76 c⁄° 
thªad_id_ty≥
 
cuºít_thªad_id
 = 
gë_thªad_id
();

77 
	gm
.
lock
();

78 i‡(
	gthªad_id
 =
cuºít_thªad_id
)

80 i‡(
cou¡
 <
times
)

82 
cou¡
 = 0;

83 
	gs
.
sig«l
();

87 
	gcou¡
 -
times
;

90 
	gm
.
u∆ock
();

93 
	g¥iv©e
:

94 
muãx
 
m
;

95 
sig«Àr
 
	gs
;

96 
muèbÀ
 
thªad_id_ty≥
 
	gthªad_id
;

97 
muèbÀ
 
	gcou¡
;

100 
rmuãx
(rmutex&);

101 
	grmuãx
& 
	g›î©‹
=(
rmuãx
&);

	@viper/concurrentqueue-src/benchmarks/dlib/threads/rmutex_extension_abstract.h

3 #unde‡
DLIB_RMUTEX_EXTENSIOn_ABSTRACT_


4 #ifde‡
DLIB_RMUTEX_EXTENSIOn_ABSTRACT_


6 
	~"thªads_kî√l_ab°ø˘.h
"

8 
«me•a˚
 
	gdlib


13 ˛as†
	crmuãx


31 
	gpublic
:

33 
rmuãx
 (

44 ~
rmuãx
 (

53 
lock_cou¡
 (

62 
lock
 (

63 
times
 = 1

80 
u∆ock
 (

81 
times
 = 1

96 
	g¥iv©e
:

98 
rmuãx
(rmutex&);

99 
	grmuãx
& 
	g›î©‹
=(
rmuãx
&);

	@viper/concurrentqueue-src/benchmarks/dlib/threads/rsignaler_extension.h

3 #i‚de‡
DLIB_RSIGNALER_EXTENSIOn_


4 
	#DLIB_RSIGNALER_EXTENSIOn_


	)

6 
	~"rsig«Àr_exãnsi⁄_ab°ø˘.h
"

7 
	~"rmuãx_exãnsi⁄.h
"

9 
«me•a˚
 
	gdlib


14 ˛as†
	crsig«Àr


16 
	gpublic
:

17 
rsig«Àr
 (

18 c⁄° 
rmuãx
& 
assocüãd_muãx


20 
assoc_muãx
(
assocüãd_muãx
),

21 
s
(
m
)

24 ~
rsig«Àr
 (

28 
waô
 (

31 
	gm
.
lock
();

32 c⁄° 
	glock_cou¡
 = 
assoc_muãx
.
lock_cou¡
();

33 
	gassoc_muãx
.
u∆ock
(
lock_cou¡
);

34 
	gs
.
waô
();

35 
	gm
.
u∆ock
();

36 
	gassoc_muãx
.
lock
(
lock_cou¡
);

39 
boﬁ
 
waô_‹_timeout
 (

40 
mûli£c⁄ds


43 
	gm
.
lock
();

44 c⁄° 
	glock_cou¡
 = 
assoc_muãx
.
lock_cou¡
();

45 
	gassoc_muãx
.
u∆ock
(
lock_cou¡
);

46 
boﬁ
 
	gªs
 = 
s
.
waô_‹_timeout
(
mûli£c⁄ds
);

47 
	gm
.
u∆ock
();

48 
	gassoc_muãx
.
lock
(
lock_cou¡
);

49  
	gªs
;

52 
sig«l
 (

55 
	gm
.
lock
();

56 
	gs
.
sig«l
();

57 
	gm
.
u∆ock
();

60 
brﬂdˇ°
 (

63 
	gm
.
lock
();

64 
	gs
.
brﬂdˇ°
();

65 
	gm
.
u∆ock
();

68 c⁄° 
	grmuãx
& 
gë_muãx
 (

69 Ëc⁄° {  
	gassoc_muãx
; }

71 
	g¥iv©e
:

73 c⁄° 
rmuãx
& 
assoc_muãx
;

74 
muãx
 
	gm
;

75 
sig«Àr
 
	gs
;

79 
rsig«Àr
(rsignaler&);

80 
	grsig«Àr
& 
	g›î©‹
=(
rsig«Àr
&);

	@viper/concurrentqueue-src/benchmarks/dlib/threads/rsignaler_extension_abstract.h

3 #unde‡
DLIB_RSIGNALER_EXTENSIOn_ABSTRACT_


4 #ifde‡
DLIB_RSIGNALER_EXTENSIOn_ABSTRACT_


6 
	~"thªads_kî√l_ab°ø˘.h
"

7 
	~"rmuãx_exãnsi⁄_ab°ø˘.h
"

9 
«me•a˚
 
	gdlib


14 ˛as†
	crsig«Àr


35 
	gpublic
:

37 
rsig«Àr
 (

38 c⁄° 
rmuãx
& 
assocüãd_muãx


51 ~
rsig«Àr
 (

58 
waô
 (

70 
boﬁ
 
waô_‹_timeout
 (

71 
mûli£c⁄ds


88 
sig«l
 (

96 
brﬂdˇ°
 (

103 c⁄° 
	grmuãx
& 
gë_muãx
 (

111 
	g¥iv©e
:

113 
rsig«Àr
(rsignaler&);

114 
	grsig«Àr
& 
	g›î©‹
=(
rsig«Àr
&);

	@viper/concurrentqueue-src/benchmarks/dlib/threads/thread_function_extension.h

3 #i‚de‡
DLIB_THREAD_FUNCTIOn_


4 
	#DLIB_THREAD_FUNCTIOn_


	)

6 
	~<mem‹y
>

8 
	~"thªad_fun˘i⁄_exãnsi⁄_ab°ø˘.h
"

9 
	~"thªads_kî√l.h
"

10 
	~"auto_muãx_exãnsi⁄.h
"

11 
	~"thªaded_obje˘_exãnsi⁄.h
"

13 
«me•a˚
 
	gdlib


18 ˛as†
	cthªad_fun˘i⁄
 : 
¥iv©e
 
thªaded_obje˘


21 ˛as†
	cba£_fun˘


23 
public
:

24 
vútuÆ
 
go
() = 0;

25 
	gvútuÆ
 ~
ba£_fun˘
() {}

28 
	gãm∂©e
 <
ty≥«me
 
	gF
,Åy≥«mê
	gT1
,Åy≥«mê
	gT2
,Åy≥«mê
	gT3
,Åy≥«mê
	gT4
>

29 ˛as†
	csu≥r_fun˘_4
 : 
public
 
ba£_fun˘


31 
public
:

32 
su≥r_fun˘_4
 ( 
F
 
fun˘
, 
T1
 
¨g1
, 
T2
 
¨g2
, 
T3
 
¨g3
, 
T4
 
¨g4
) :

33 
f
(
fun˘
),

34 
a1
(
¨g1
),

35 
a2
(
¨g2
),

36 
a3
(
¨g3
),

37 
a4
(
¨g4
)

41 
go
(Ë{ 
f
(
a1
, 
a2
, 
a3
, 
a4
); }

44 
F
 
	gf
;

45 
T1
 
	ga1
;

46 
T2
 
	ga2
;

47 
T3
 
	ga3
;

48 
T4
 
	ga4
;

51 
	gãm∂©e
 <
ty≥«me
 
	gF
,Åy≥«mê
	gT1
,Åy≥«mê
	gT2
,Åy≥«mê
	gT3
>

52 ˛as†
	csu≥r_fun˘_3
 : 
public
 
ba£_fun˘


54 
public
:

55 
su≥r_fun˘_3
 ( 
F
 
fun˘
, 
T1
 
¨g1
, 
T2
 
¨g2
, 
T3
 
¨g3
):

56 
f
(
fun˘
),

57 
a1
(
¨g1
),

58 
a2
(
¨g2
),

59 
a3
(
¨g3
)

63 
go
(Ë{ 
f
(
a1
, 
a2
, 
a3
); }

66 
F
 
	gf
;

67 
T1
 
	ga1
;

68 
T2
 
	ga2
;

69 
T3
 
	ga3
;

72 
	gãm∂©e
 <
ty≥«me
 
	gF
,Åy≥«mê
	gT1
,Åy≥«mê
	gT2
>

73 ˛as†
	csu≥r_fun˘_2
 : 
public
 
ba£_fun˘


75 
public
:

76 
su≥r_fun˘_2
 ( 
F
 
fun˘
, 
T1
 
¨g1
, 
T2
 
¨g2
) :

77 
f
(
fun˘
),

78 
a1
(
¨g1
),

79 
a2
(
¨g2
)

83 
go
(Ë{ 
f
(
a1
, 
a2
); }

86 
F
 
	gf
;

87 
T1
 
	ga1
;

88 
T2
 
	ga2
;

91 
	gãm∂©e
 <
ty≥«me
 
	gF
,Åy≥«mê
	gT
>

92 ˛as†
	csu≥r_fun˘_1
 : 
public
 
ba£_fun˘


94 
public
:

95 
su≥r_fun˘_1
 ( 
F
 
fun˘
, 
T
 
¨g
Ë: 
f
(fun˘), 
a
(arg)

99 
go
(Ë{ 
f
(
a
); }

102 
F
 
	gf
;

103 
T
 
	ga
;

106 
	gãm∂©e
 <
ty≥«me
 
	gF
>

107 ˛as†
	csu≥r_fun˘_0
 : 
public
 
ba£_fun˘


109 
public
:

110 
su≥r_fun˘_0
 ( 
F
 
fun˘
Ë: 
f
(funct)

114 
go
(Ë{ 
f
(); }

116 
F
 
	gf
;

119 
	gpublic
:

121 
ãm∂©e
 <
ty≥«me
 
F
>

122 
thªad_fun˘i⁄
 (

123 
F
 
fun˘


126 
f
.
ª£t
(
√w
 
su≥r_fun˘_0
<
F
>(
fun˘
));

127 
°¨t
();

130 
	gãm∂©e
 <
ty≥«me
 
	gF
,Åy≥«mê
	gT
>

131 
thªad_fun˘i⁄
 (

132 
F
 
fun˘
,

133 
T
 
¨g


136 
	gf
.
ª£t
(
√w
 
su≥r_fun˘_1
<
F
,
T
>(
fun˘
,
¨g
));

137 
°¨t
();

140 
	gãm∂©e
 <
ty≥«me
 
	gF
,Åy≥«mê
	gT1
,Åy≥«mê
	gT2
>

141 
thªad_fun˘i⁄
 (

142 
F
 
fun˘
,

143 
T1
 
¨g1
,

144 
T2
 
¨g2


147 
	gf
.
ª£t
(
√w
 
su≥r_fun˘_2
<
F
,
T1
,
T2
>(
fun˘
, 
¨g1
, 
¨g2
));

148 
°¨t
();

151 
	gãm∂©e
 <
ty≥«me
 
	gF
,Åy≥«mê
	gT1
,Åy≥«mê
	gT2
,Åy≥«mê
	gT3
>

152 
thªad_fun˘i⁄
 (

153 
F
 
fun˘
,

154 
T1
 
¨g1
,

155 
T2
 
¨g2
,

156 
T3
 
¨g3


159 
	gf
.
ª£t
(
√w
 
su≥r_fun˘_3
<
F
,
T1
,
T2
,
T3
>(
fun˘
, 
¨g1
, 
¨g2
, 
¨g3
));

160 
°¨t
();

163 
	gãm∂©e
 <
ty≥«me
 
	gF
,Åy≥«mê
	gT1
,Åy≥«mê
	gT2
,Åy≥«mê
	gT3
,Åy≥«mê
	gT4
>

164 
thªad_fun˘i⁄
 (

165 
F
 
fun˘
,

166 
T1
 
¨g1
,

167 
T2
 
¨g2
,

168 
T3
 
¨g3
,

169 
T4
 
¨g4


172 
	gf
.
ª£t
(
√w
 
su≥r_fun˘_4
<
F
,
T1
,
T2
,
T3
,
T4
>(
fun˘
, 
¨g1
, 
¨g2
, 
¨g3
, 
¨g4
));

173 
°¨t
();

176 ~
thªad_fun˘i⁄
 (

179 
	gthªaded_obje˘
::
waô
();

182 
boﬁ
 
is_Æive
 (

185  
	gthªaded_obje˘
::
is_Æive
();

188 
waô
 (

191 
	gthªaded_obje˘
::
waô
();

194 
	g¥iv©e
:

196 
thªad
 ()

198 
f
->
go
();

201 
	g°d
::
unique_±r
<
ba£_fun˘
> 
f
;

204 
thªad_fun˘i⁄
(thread_function&);

205 
	gthªad_fun˘i⁄
& 
	g›î©‹
=(
thªad_fun˘i⁄
&);

	@viper/concurrentqueue-src/benchmarks/dlib/threads/thread_function_extension_abstract.h

3 #unde‡
DLIB_THREAD_FUNCTIOn_ABSTRACT_


4 #ifde‡
DLIB_THREAD_FUNCTIOn_ABSTRACT_


6 
	~"thªads_kî√l_ab°ø˘.h
"

8 
«me•a˚
 
	gdlib


13 ˛as†
	cthªad_fun˘i⁄


20 
	gpublic
:

22 
ãm∂©e
 <
ty≥«me
 
F
>

23 
thªad_fun˘i⁄
 (

24 
F
 
fun˘


37 
	gãm∂©e
 <
ty≥«me
 
	gF
,Åy≥«mê
	gT1
>

38 
thªad_fun˘i⁄
 (

39 
F
 
fun˘
,

40 
T1
 
¨g1


53 
	gãm∂©e
 <
ty≥«me
 
	gF
,Åy≥«mê
	gT1
,Åy≥«mê
	gT2
>

54 
thªad_fun˘i⁄
 (

55 
F
 
fun˘
,

56 
T1
 
¨g1
,

57 
T2
 
¨g2


70 
	gãm∂©e
 <
ty≥«me
 
	gF
,Åy≥«mê
	gT1
,Åy≥«mê
	gT2
,Åy≥«mê
	gT3
>

71 
thªad_fun˘i⁄
 (

72 
F
 
fun˘
,

73 
T1
 
¨g1
,

74 
T2
 
¨g2
,

75 
T3
 
¨g3


88 
	gãm∂©e
 <
ty≥«me
 
	gF
,Åy≥«mê
	gT1
,Åy≥«mê
	gT2
,Åy≥«mê
	gT3
,Åy≥«mê
	gT4
>

89 
thªad_fun˘i⁄
 (

90 
F
 
fun˘
,

91 
T1
 
¨g1
,

92 
T2
 
¨g2
,

93 
T3
 
¨g3
,

94 
T4
 
¨g4


107 ~
thªad_fun˘i⁄
 (

115 
boﬁ
 
is_Æive
 (

125 
waô
 (

133 
	g¥iv©e
:

136 
thªad_fun˘i⁄
(thread_function&);

137 
	gthªad_fun˘i⁄
& 
	g›î©‹
=(
thªad_fun˘i⁄
&);

	@viper/concurrentqueue-src/benchmarks/dlib/threads/thread_pool_extension.h

3 #i‚de‡
DLIB_THREAD_POOl_Hh_


4 
	#DLIB_THREAD_POOl_Hh_


	)

6 
	~<ex˚±i⁄
>

7 
	~<mem‹y
>

8 
	~<thªad
>

10 
	~"thªad_poﬁ_exãnsi⁄_ab°ø˘.h
"

11 
	~"mu…ôhªaded_obje˘_exãnsi⁄.h
"

12 
	~"../membî_fun˘i⁄_poöãr.h
"

13 
	~"../bound_fun˘i⁄_poöãr.h
"

14 
	~"thªads_kî√l.h
"

15 
	~"auto_muãx_exãnsi⁄.h
"

16 
	~"../uöä.h
"

17 
	~"../¨øy.h
"

19 
«me•a˚
 
	gdlib


24 
˛ass
 
	gthªad_poﬁ_im∂emíèti⁄
;

26 
	gãm∂©e
 <

27 
ty≥«me
 
	gT


29 ˛as†
	cfutuª


45 
	gpublic
:

47 
futuª
 (

48 Ë: 
èsk_id
(0) {}

50 
futuª
 (

51 c⁄° 
T
& 
ôem


52 Ë: 
èsk_id
(0), 
v¨
(
ôem
) {}

54 
futuª
 (

55 c⁄° 
futuª
& 
ôem


56 Ë:
èsk_id
(0), 
v¨
(
ôem
.
gë
()) {}

58 ~
futuª
 (

59 Ë{ 
waô
(); }

61 
	gfutuª
& 
	g›î©‹
=(

62 c⁄° 
T
& 
ôem


63 Ë{ 
gë
(Ë
ôem
;  *
	gthis
; }

65 
	gfutuª
& 
	g›î©‹
=(

66 c⁄° 
futuª
& 
ôem


67 Ë{ 
gë
(Ë
ôem
.gë();  *
	gthis
; }

69 
›î©‹
 
	gT
& (

70 Ë{  
gë
(); }

72 
›î©‹
 c⁄° 
	gT
& (

73 Ëc⁄° {  
gë
(); }

75 
	gT
& 
gë
 (

76 Ë{ 
waô
();  
	gv¨
; }

78 c⁄° 
	gT
& 
gë
 (

79 Ëc⁄° { 
waô
();  
	gv¨
; }

81 
boﬁ
 
is_ªady
 (

82 Ëc⁄° {  
	gç
.
gë
() == 0; }

84 
	g¥iv©e
:

86 
‰õnd
 
˛ass
 
thªad_poﬁ
;

88 
ölöe
 
waô
 () const;

90 
muèbÀ
 
uöt64
 
	gèsk_id
;

91 
muèbÀ
 
	g°d
::
sh¨ed_±r
<
thªad_poﬁ_im∂emíèti⁄
> 
ç
;

93 
T
 
	gv¨
;

98 
	gãm∂©e
 <
ty≥«me
 
	gT
>

99 
ölöe
 
sw≠
 (

100 
futuª
<
T
>& 
a
,

101 
futuª
<
T
>& 
b


102 Ë{ 
	gdlib
::
exch™ge
(
a
.
gë
(), 
b
.get()); }

108 
	gãm∂©e
 <
ty≥«me
 
	gT
> 
boﬁ
 
	g›î©‹
=(c⁄° 
futuª
<
T
>& 
a
, c⁄° 
	gfutuª
<T>& 
	gb
Ë{  
	ga
.
gë
(Ë=
b
.get(); }

109 
	gãm∂©e
 <
ty≥«me
 
	gT
> 
boﬁ
 
	g›î©‹
!(c⁄° 
futuª
<
T
>& 
a
, c⁄° 
	gfutuª
<T>& 
	gb
Ë{  
	ga
.
gë
(Ë!
b
.get(); }

110 
	gãm∂©e
 <
ty≥«me
 
	gT
> 
boﬁ
 
	g›î©‹
<(c⁄° 
futuª
<
T
>& 
a
, c⁄° 
	gfutuª
<T>& 
	gb
Ë{  
	ga
.
gë
(Ë<
b
.get(); }

111 
	gãm∂©e
 <
ty≥«me
 
	gT
> 
boﬁ
 
	g›î©‹
>(c⁄° 
futuª
<
T
>& 
a
, c⁄° 
	gfutuª
<T>& 
	gb
Ë{  
	ga
.
gë
(Ë>
b
.get(); }

112 
	gãm∂©e
 <
ty≥«me
 
	gT
> 
boﬁ
 
	g›î©‹
< (c⁄° 
	gfutuª
<T>& 
	ga
, c⁄° futuª<T>& 
	gb
Ë{ á.
gë
() < b.get(); }

113 
	gãm∂©e
 <
ty≥«me
 
	gT
> 
boﬁ
 
	g›î©‹
> (c⁄° 
	gfutuª
<T>& 
	ga
, c⁄° futuª<T>& 
	gb
Ë{ á.
gë
() > b.get(); }

115 
	gãm∂©e
 <
ty≥«me
 
	gT
> 
boﬁ
 
	g›î©‹
=(c⁄° 
futuª
<
T
>& 
a
, c⁄° T& 
	gb
Ë{  
	ga
.
gë
(Ë=
b
; }

116 
	gãm∂©e
 <
ty≥«me
 
	gT
> 
boﬁ
 
	g›î©‹
=(c⁄° 
T
& 
a
, c⁄° 
	gfutuª
<T>& 
	gb
Ë{  
	ga
 =
b
.
gë
(); }

117 
	gãm∂©e
 <
ty≥«me
 
	gT
> 
boﬁ
 
	g›î©‹
!(c⁄° 
futuª
<
T
>& 
a
, c⁄° T& 
	gb
Ë{  
	ga
.
gë
(Ë!
b
; }

118 
	gãm∂©e
 <
ty≥«me
 
	gT
> 
boﬁ
 
	g›î©‹
!(c⁄° 
T
& 
a
, c⁄° 
	gfutuª
<T>& 
	gb
Ë{  
	ga
 !
b
.
gë
(); }

119 
	gãm∂©e
 <
ty≥«me
 
	gT
> 
boﬁ
 
	g›î©‹
<(c⁄° 
futuª
<
T
>& 
a
, c⁄° T& 
	gb
Ë{  
	ga
.
gë
(Ë<
b
; }

120 
	gãm∂©e
 <
ty≥«me
 
	gT
> 
boﬁ
 
	g›î©‹
<(c⁄° 
T
& 
a
, c⁄° 
	gfutuª
<T>& 
	gb
Ë{  
	ga
 <
b
.
gë
(); }

121 
	gãm∂©e
 <
ty≥«me
 
	gT
> 
boﬁ
 
	g›î©‹
>(c⁄° 
futuª
<
T
>& 
a
, c⁄° T& 
	gb
Ë{  
	ga
.
gë
(Ë>
b
; }

122 
	gãm∂©e
 <
ty≥«me
 
	gT
> 
boﬁ
 
	g›î©‹
>(c⁄° 
T
& 
a
, c⁄° 
	gfutuª
<T>& 
	gb
Ë{  
	ga
 >
b
.
gë
(); }

123 
	gãm∂©e
 <
ty≥«me
 
	gT
> 
boﬁ
 
	g›î©‹
< (c⁄° 
	gfutuª
<T>& 
	ga
, c⁄° T& 
	gb
Ë{ á.
gë
() < b; }

124 
	gãm∂©e
 <
ty≥«me
 
	gT
> 
boﬁ
 
	g›î©‹
< (c⁄° T& 
	ga
, c⁄° 
	gfutuª
<T>& 
	gb
Ë{ á < b.
gë
(); }

125 
	gãm∂©e
 <
ty≥«me
 
	gT
> 
boﬁ
 
	g›î©‹
> (c⁄° 
	gfutuª
<T>& 
	ga
, c⁄° T& 
	gb
Ë{ á.
gë
() > b; }

126 
	gãm∂©e
 <
ty≥«me
 
	gT
> 
boﬁ
 
	g›î©‹
> (c⁄° T& 
	ga
, c⁄° 
	gfutuª
<T>& 
	gb
Ë{ á > b.
gë
(); }

130 ˛as†
	cthªad_poﬁ_im∂emíèti⁄


146 
	gbound_fun˘i⁄_poöãr
::
	tkî√l_1a_c
 
	tbÂ_ty≥
;

148 
‰õnd
 
˛ass
 
	gthªad_poﬁ
;

149 
ex∂icô
 
thªad_poﬁ_im∂emíèti⁄
 (

150 
num_thªads


153 
	gpublic
:

154 ~
thªad_poﬁ_im∂emíèti⁄
(

157 
waô_f‹_èsk
 (

158 
uöt64
 
èsk_id


161 
num_thªads_ö_poﬁ
 (

164 
waô_f‹_Æl_èsks
 (

167 
boﬁ
 
is_èsk_thªad
 (

170 
	gãm∂©e
 <
ty≥«me
 
	gT
>

171 
uöt64
 
add_èsk
 (

172 
T
& 
obj
,

173 (
T
::*
fun˘
)()

176 
auto_muãx
 
M
(
m
);

177 c⁄° 
thªad_id_ty≥
 
	gmy_thªad_id
 = 
gë_thªad_id
();

180 
	gidx
 = 
föd_em±y_èsk_¶Ÿ
();

181 i‡(
	gidx
 =-1 && 
is_w‹kî_thªad
(
my_thªad_id
))

187 
M
.
u∆ock
();

188 (
	gobj
.*
	gfun˘
)();

197 
	gidx
 == -1)

199 
èsk_d⁄e_sig«Àr
.
waô
();

200 
	gidx
 = 
föd_em±y_èsk_¶Ÿ
();

203 
	gèsks
[
idx
].
	gthªad_id
 = 
my_thªad_id
;

204 
	gèsks
[
idx
].
	gèsk_id
 = 
make_√xt_èsk_id
(idx);

205 
	gèsks
[
idx
].
	gmÂ0
.
£t
(
obj
,
fun˘
);

207 
	gèsk_ªady_sig«Àr
.
sig«l
();

209  
	gèsks
[
idx
].
	gèsk_id
;

212 
	gãm∂©e
 <
ty≥«me
 
	gT
>

213 
uöt64
 
add_èsk
 (

214 
T
& 
obj
,

215 (
T
::*
fun˘
)(),

216 
¨g1


219 
auto_muãx
 
M
(
m
);

220 c⁄° 
thªad_id_ty≥
 
	gmy_thªad_id
 = 
gë_thªad_id
();

223 
	gidx
 = 
föd_em±y_èsk_¶Ÿ
();

224 i‡(
	gidx
 =-1 && 
is_w‹kî_thªad
(
my_thªad_id
))

230 
M
.
u∆ock
();

231 (
	gobj
.*
	gfun˘
)(
	g¨g1
);

240 
	gidx
 == -1)

242 
èsk_d⁄e_sig«Àr
.
waô
();

243 
	gidx
 = 
föd_em±y_èsk_¶Ÿ
();

246 
	gèsks
[
idx
].
	gthªad_id
 = 
my_thªad_id
;

247 
	gèsks
[
idx
].
	gèsk_id
 = 
make_√xt_èsk_id
(idx);

248 
	gèsks
[
idx
].
	gmÂ1
.
£t
(
obj
,
fun˘
);

249 
	gèsks
[
idx
].
	g¨g1
 = 
¨g1
;

251 
	gèsk_ªady_sig«Àr
.
sig«l
();

253  
	gèsks
[
idx
].
	gèsk_id
;

256 
	gãm∂©e
 <
ty≥«me
 
	gT
>

257 
uöt64
 
add_èsk
 (

258 
T
& 
obj
,

259 (
T
::*
fun˘
)(,),

260 
¨g1
,

261 
¨g2


264 
auto_muãx
 
M
(
m
);

265 c⁄° 
thªad_id_ty≥
 
	gmy_thªad_id
 = 
gë_thªad_id
();

268 
	gidx
 = 
föd_em±y_èsk_¶Ÿ
();

269 i‡(
	gidx
 =-1 && 
is_w‹kî_thªad
(
my_thªad_id
))

275 
M
.
u∆ock
();

276 (
	gobj
.*
	gfun˘
)(
	g¨g1
, 
	g¨g2
);

285 
	gidx
 == -1)

287 
èsk_d⁄e_sig«Àr
.
waô
();

288 
	gidx
 = 
föd_em±y_èsk_¶Ÿ
();

291 
	gèsks
[
idx
].
	gthªad_id
 = 
my_thªad_id
;

292 
	gèsks
[
idx
].
	gèsk_id
 = 
make_√xt_èsk_id
(idx);

293 
	gèsks
[
idx
].
	gmÂ2
.
£t
(
obj
,
fun˘
);

294 
	gèsks
[
idx
].
	g¨g1
 = 
¨g1
;

295 
	gèsks
[
idx
].
	g¨g2
 = 
¨g2
;

297 
	gèsk_ªady_sig«Àr
.
sig«l
();

299  
	gèsks
[
idx
].
	gèsk_id
;

302 
	sfun˘i⁄_obje˘_c›y


304 
	gvútuÆ
 ~
fun˘i⁄_obje˘_c›y
(){}

307 
	gãm∂©e
 <
ty≥«me
 
	gT
>

308 
	gfun˘i⁄_obje˘_c›y_ö°™˚
 : 
fun˘i⁄_obje˘_c›y


310 
fun˘i⁄_obje˘_c›y_ö°™˚
(c⁄° 
T
& 
ôem_
Ë: 
ôem
(item_) {}

311 
T
 
ôem
;

312 
	gvútuÆ
 ~
fun˘i⁄_obje˘_c›y_ö°™˚
(){}

315 
uöt64
 
add_èsk_öã∫Æ
 (

316 c⁄° 
bÂ_ty≥
& 
bÂ
,

317 
°d
::
sh¨ed_±r
<
fun˘i⁄_obje˘_c›y
>& 
ôem


327 
uöt64
 
add_èsk_öã∫Æ
 (

328 c⁄° 
bÂ_ty≥
& 
bÂ


329 Ë{ 
	g°d
::
sh¨ed_±r
<
fun˘i⁄_obje˘_c›y
> 
ãmp
;  
add_èsk_öã∫Æ
(
bÂ
,Åemp); }

336 
shutdown_poﬁ
 (

344 
	g¥iv©e
:

346 
boﬁ
 
is_w‹kî_thªad
 (

347 c⁄° 
thªad_id_ty≥
 
id


359 
thªad
 (

365 
föd_em±y_èsk_¶Ÿ
 (

378 
föd_ªady_èsk
 (

390 
uöt64
 
make_√xt_èsk_id
 (

391 
idx


402 
èsk_id_to_ödex
 (

403 
uöt64
 
id


413 
	sèsk_°©e_ty≥


415 
èsk_°©e_ty≥
(Ë: 
is_beög_¥o˚s£d
(
Ál£
), 
èsk_id
(0), 
√xt_èsk_id
(2), 
¨g1
(0), 
¨g2
(0), 
ïå
(
nuŒ±r
) {}

417 
boﬁ
 
is_ªady
 () const

426  !
	gis_beög_¥o˚s£d
 && !
is_em±y
();

429 
boﬁ
 
is_em±y
 () const

438  
	gèsk_id
 == 0;

441 
boﬁ
 
	gis_beög_¥o˚s£d
;

442 
uöt64
 
	gèsk_id
;

443 
thªad_id_ty≥
 
	gthªad_id
;

445 
uöt64
 
	g√xt_èsk_id
;

447 
	g¨g1
;

448 
	g¨g2
;

450 
	gmembî_fun˘i⁄_poöãr
<> 
	gmÂ0
;

451 
	gmembî_fun˘i⁄_poöãr
<> 
	gmÂ1
;

452 
	gmembî_fun˘i⁄_poöãr
<,> 
	gmÂ2
;

453 
bÂ_ty≥
 
	gbÂ
;

455 
	g°d
::
sh¨ed_±r
<
fun˘i⁄_obje˘_c›y
> 
fun˘i⁄_c›y
;

456 
muèbÀ
 
	g°d
::
ex˚±i⁄_±r
 
ïå
;

458 
¥›ag©e_ex˚±i⁄
() const

460 i‡(
	gïå
)

462 autÿ
	gtmp
 = 
ïå
;

463 
	gïå
 = 
nuŒ±r
;

464 
	g°d
::
ªthrow_ex˚±i⁄
(
tmp
);

470 
	g¨øy
<
	gèsk_°©e_ty≥
> 
	gèsks
;

471 
	g¨øy
<
	gthªad_id_ty≥
> 
	gw‹kî_thªad_ids
;

473 
muãx
 
	gm
;

474 
sig«Àr
 
	gèsk_d⁄e_sig«Àr
;

475 
sig«Àr
 
	gèsk_ªady_sig«Àr
;

476 
boﬁ
 
	gwe_¨e_de°ru˘ög
;

478 
	g°d
::
ve˘‹
<
°d
::
thªad
> 
thªads
;

481 
thªad_poﬁ_im∂emíèti⁄
(thread_pool_implementation&);

482 
	gthªad_poﬁ_im∂emíèti⁄
& 
	g›î©‹
=(
thªad_poﬁ_im∂emíèti⁄
&);

489 ˛as†
	cthªad_poﬁ


498 
	gbound_fun˘i⁄_poöãr
::
	tkî√l_1a_c
 
	tbÂ_ty≥
;

500 
	gpublic
:

501 
ex∂icô
 
thªad_poﬁ
 (

502 
num_thªads


505 
im∂
.
ª£t
(
√w
 
thªad_poﬁ_im∂emíèti⁄
(
num_thªads
));

508 ~
thªad_poﬁ
 (

511 
	gåy


513 
	gim∂
->
shutdown_poﬁ
();

515 
ˇtch
 (
°d
::
ex˚±i⁄
& 
e
)

517 
°d
::
˚º
 << "A¿unh™dÀdÉx˚±i⁄ wa†ösidê®dlib::thªad_poﬁ whí iàwa†de°ru˘ed." << std::
ídl
;

518 
	g°d
::
˚º
 << "It'†wh© såög is: \n" << 
e
.
wh©
(Ë<< 
°d
::
ídl
;

519 
usög
 
«me•a˚
 
	g°d
;

520 
as£π
(
Ál£
);

521 
ab‹t
();

523 
ˇtch
 (...)

525 
	g°d
::
˚º
 << "A¿unh™dÀdÉx˚±i⁄ wa†ösidê®dlib::thªad_poﬁ whí iàwa†de°ru˘ed." << 
°d
::
ídl
;

526 
usög
 
«me•a˚
 
	g°d
;

527 
as£π
(
Ál£
);

528 
ab‹t
();

532 
waô_f‹_èsk
 (

533 
uöt64
 
èsk_id


534 Ëc⁄° { 
	gim∂
->
waô_f‹_èsk
(
èsk_id
); }

536 
num_thªads_ö_poﬁ
 (

537 Ëc⁄° {  
	gim∂
->
num_thªads_ö_poﬁ
(); }

539 
waô_f‹_Æl_èsks
 (

540 Ëc⁄° { 
	gim∂
->
waô_f‹_Æl_èsks
(); }

542 
boﬁ
 
is_èsk_thªad
 (

543 Ëc⁄° {  
	gim∂
->
is_èsk_thªad
(); }

545 
	gãm∂©e
 <
ty≥«me
 
	gT
>

546 
uöt64
 
add_èsk
 (

547 
T
& 
obj
,

548 (
T
::*
fun˘
)()

551  
im∂
->
add_èsk
(
obj
, 
fun˘
);

554 
	gãm∂©e
 <
ty≥«me
 
	gT
>

555 
uöt64
 
add_èsk
 (

556 
T
& 
obj
,

557 (
T
::*
fun˘
)(),

558 
¨g1


561  
	gim∂
->
add_èsk
(
obj
, 
fun˘
, 
¨g1
);

564 
	gãm∂©e
 <
ty≥«me
 
	gT
>

565 
uöt64
 
add_èsk
 (

566 
T
& 
obj
,

567 (
T
::*
fun˘
)(,),

568 
¨g1
,

569 
¨g2


572  
	gim∂
->
add_èsk
(
obj
, 
fun˘
, 
¨g1
, 
¨g2
);

577 
	gãm∂©e
 <
ty≥«me
 
	gF
>

578 
uöt64
 
add_èsk
 (

579 
F
& 
fun˘i⁄_obje˘


582 
COMPILE_TIME_ASSERT
(
is_fun˘i⁄
<
F
>::
vÆue
 =
Ál£
);

583 
COMPILE_TIME_ASSERT
(
is_poöãr_ty≥
<
F
>::
vÆue
 =
Ál£
);

585 
bÂ_ty≥
 
	gãmp
;

586 
	gãmp
.
£t
(
fun˘i⁄_obje˘
);

587 
uöt64
 
	gid
 = 
im∂
->
add_èsk_öã∫Æ
(
ãmp
);

589  
	gid
;

592 
	gãm∂©e
 <
ty≥«me
 
	gF
>

593 
uöt64
 
add_èsk_by_vÆue
 (

594 c⁄° 
F
& 
fun˘i⁄_obje˘


597 
	gthªad_poﬁ_im∂emíèti⁄
::
fun˘i⁄_obje˘_c›y_ö°™˚
<
F
>* 
±r
 = 0;

598 
	g±r
 = 
√w
 
thªad_poﬁ_im∂emíèti⁄
::
fun˘i⁄_obje˘_c›y_ö°™˚
<
F
>(
fun˘i⁄_obje˘
);

599 
	g°d
::
sh¨ed_±r
<
thªad_poﬁ_im∂emíèti⁄
::
fun˘i⁄_obje˘_c›y
> 
fun˘i⁄_c›y
(
±r
);

602 
bÂ_ty≥
 
	gãmp
;

603 
	gãmp
.
£t
(
±r
->
ôem
);

604 
uöt64
 
	gid
 = 
im∂
->
add_èsk_öã∫Æ
(
ãmp
, 
fun˘i⁄_c›y
);

606  
	gid
;

609 
	gãm∂©e
 <
ty≥«me
 
	gT
>

610 
uöt64
 
add_èsk
 (

611 c⁄° 
T
& 
obj
,

612 (
T
::*
fun˘
)() const

615 
bÂ_ty≥
 
ãmp
;

616 
	gãmp
.
£t
(
obj
,
fun˘
);

617 
uöt64
 
	gid
 = 
im∂
->
add_èsk_öã∫Æ
(
ãmp
);

619  
	gid
;

622 
	gãm∂©e
 <
ty≥«me
 
	gT
>

623 
uöt64
 
add_èsk_by_vÆue
 (

624 c⁄° 
T
& 
obj
,

625 (
T
::*
fun˘
)() const

628 
thªad_poﬁ_im∂emíèti⁄
::
fun˘i⁄_obje˘_c›y_ö°™˚
<c⁄° 
T
>* 
±r
 = 0;

629 
	g±r
 = 
√w
 
thªad_poﬁ_im∂emíèti⁄
::
fun˘i⁄_obje˘_c›y_ö°™˚
<c⁄° 
T
>(
obj
);

630 
	g°d
::
sh¨ed_±r
<
thªad_poﬁ_im∂emíèti⁄
::
fun˘i⁄_obje˘_c›y
> 
fun˘i⁄_c›y
(
±r
);

632 
bÂ_ty≥
 
	gãmp
;

633 
	gãmp
.
£t
(
±r
->
ôem
,
fun˘
);

634 
uöt64
 
	gid
 = 
im∂
->
add_èsk_öã∫Æ
(
ãmp
, 
fun˘i⁄_c›y
);

636  
	gid
;

639 
	gãm∂©e
 <
ty≥«me
 
	gT
>

640 
uöt64
 
add_èsk_by_vÆue
 (

641 c⁄° 
T
& 
obj
,

642 (
T
::*
fun˘
)()

645 
thªad_poﬁ_im∂emíèti⁄
::
fun˘i⁄_obje˘_c›y_ö°™˚
<
T
>* 
±r
 = 0;

646 
	g±r
 = 
√w
 
thªad_poﬁ_im∂emíèti⁄
::
fun˘i⁄_obje˘_c›y_ö°™˚
<
T
>(
obj
);

647 
	g°d
::
sh¨ed_±r
<
thªad_poﬁ_im∂emíèti⁄
::
fun˘i⁄_obje˘_c›y
> 
fun˘i⁄_c›y
(
±r
);

649 
bÂ_ty≥
 
	gãmp
;

650 
	gãmp
.
£t
(
±r
->
ôem
,
fun˘
);

651 
uöt64
 
	gid
 = 
im∂
->
add_èsk_öã∫Æ
(
ãmp
, 
fun˘i⁄_c›y
);

653  
	gid
;

656 
uöt64
 
add_èsk
 (

657 (*
fun˘
)()

660 
bÂ_ty≥
 
	gãmp
;

661 
	gãmp
.
£t
(
fun˘
);

662 
uöt64
 
	gid
 = 
im∂
->
add_èsk_öã∫Æ
(
ãmp
);

664  
	gid
;

669 
	gãm∂©e
 <
ty≥«me
 
	gF
,Åy≥«mê
	gA1
>

670 
uöt64
 
add_èsk
 (

671 
F
& 
fun˘i⁄_obje˘
,

672 
futuª
<
A1
>& 
¨g1


675 
COMPILE_TIME_ASSERT
(
is_fun˘i⁄
<
F
>::
vÆue
 =
Ál£
);

676 
COMPILE_TIME_ASSERT
(
is_poöãr_ty≥
<
F
>::
vÆue
 =
Ál£
);

678 
bÂ_ty≥
 
	gãmp
;

679 
	gãmp
.
£t
(
fun˘i⁄_obje˘
,
¨g1
.
gë
());

680 
uöt64
 
	gid
 = 
im∂
->
add_èsk_öã∫Æ
(
ãmp
);

683 
	g¨g1
.
	gèsk_id
 = 
id
;

684 
	g¨g1
.
	gç
 = 
im∂
;

685  
	gid
;

688 
	gãm∂©e
 <
ty≥«me
 
	gF
,Åy≥«mê
	gA1
>

689 
uöt64
 
add_èsk_by_vÆue
 (

690 c⁄° 
F
& 
fun˘i⁄_obje˘
,

691 
futuª
<
A1
>& 
¨g1


694 
	gthªad_poﬁ_im∂emíèti⁄
::
fun˘i⁄_obje˘_c›y_ö°™˚
<
F
>* 
±r
 = 0;

695 
	g±r
 = 
√w
 
thªad_poﬁ_im∂emíèti⁄
::
fun˘i⁄_obje˘_c›y_ö°™˚
<
F
>(
fun˘i⁄_obje˘
);

696 
	g°d
::
sh¨ed_±r
<
thªad_poﬁ_im∂emíèti⁄
::
fun˘i⁄_obje˘_c›y
> 
fun˘i⁄_c›y
(
±r
);

698 
bÂ_ty≥
 
	gãmp
;

699 
	gãmp
.
£t
(
±r
->
ôem
, 
¨g1
.
gë
());

700 
uöt64
 
	gid
 = 
im∂
->
add_èsk_öã∫Æ
(
ãmp
, 
fun˘i⁄_c›y
);

703 
	g¨g1
.
	gèsk_id
 = 
id
;

704 
	g¨g1
.
	gç
 = 
im∂
;

705  
	gid
;

708 
	gãm∂©e
 <
ty≥«me
 
	gT
,Åy≥«mê
	gT1
,Åy≥«mê
	gA1
>

709 
uöt64
 
add_èsk
 (

710 
T
& 
obj
,

711 (
T
::*
fun˘
)(
T1
),

712 
futuª
<
A1
>& 
¨g1


715 
bÂ_ty≥
 
	gãmp
;

716 
	gãmp
.
£t
(
obj
,
fun˘
,
¨g1
.
gë
());

717 
uöt64
 
	gid
 = 
im∂
->
add_èsk_öã∫Æ
(
ãmp
);

720 
	g¨g1
.
	gèsk_id
 = 
id
;

721 
	g¨g1
.
	gç
 = 
im∂
;

722  
	gid
;

725 
	gãm∂©e
 <
ty≥«me
 
	gT
,Åy≥«mê
	gT1
,Åy≥«mê
	gA1
>

726 
uöt64
 
add_èsk_by_vÆue
 (

727 c⁄° 
T
& 
obj
,

728 (
T
::*
fun˘
)(
T1
),

729 
futuª
<
A1
>& 
¨g1


732 
	gthªad_poﬁ_im∂emíèti⁄
::
fun˘i⁄_obje˘_c›y_ö°™˚
<
T
>* 
±r
 = 0;

733 
	g±r
 = 
√w
 
thªad_poﬁ_im∂emíèti⁄
::
fun˘i⁄_obje˘_c›y_ö°™˚
<
T
>(
obj
);

734 
	g°d
::
sh¨ed_±r
<
thªad_poﬁ_im∂emíèti⁄
::
fun˘i⁄_obje˘_c›y
> 
fun˘i⁄_c›y
(
±r
);

736 
bÂ_ty≥
 
	gãmp
;

737 
	gãmp
.
£t
(
±r
->
ôem
,
fun˘
,
¨g1
.
gë
());

738 
uöt64
 
	gid
 = 
im∂
->
add_èsk_öã∫Æ
(
ãmp
, 
fun˘i⁄_c›y
);

741 
	g¨g1
.
	gèsk_id
 = 
id
;

742 
	g¨g1
.
	gç
 = 
im∂
;

743  
	gid
;

747 
	gãm∂©e
 <
ty≥«me
 
	gT
,Åy≥«mê
	gT1
,Åy≥«mê
	gA1
>

748 
uöt64
 
add_èsk
 (

749 c⁄° 
T
& 
obj
,

750 (
T
::*
fun˘
)(
T1
) const,

751 
futuª
<
A1
>& 
¨g1


754 
bÂ_ty≥
 
	gãmp
;

755 
	gãmp
.
£t
(
obj
,
fun˘
,
¨g1
.
gë
());

756 
uöt64
 
	gid
 = 
im∂
->
add_èsk_öã∫Æ
(
ãmp
);

759 
	g¨g1
.
	gèsk_id
 = 
id
;

760 
	g¨g1
.
	gç
 = 
im∂
;

761  
	gid
;

764 
	gãm∂©e
 <
ty≥«me
 
	gT
,Åy≥«mê
	gT1
,Åy≥«mê
	gA1
>

765 
uöt64
 
add_èsk_by_vÆue
 (

766 c⁄° 
T
& 
obj
,

767 (
T
::*
fun˘
)(
T1
) const,

768 
futuª
<
A1
>& 
¨g1


771 
	gthªad_poﬁ_im∂emíèti⁄
::
fun˘i⁄_obje˘_c›y_ö°™˚
<c⁄° 
T
>* 
±r
 = 0;

772 
	g±r
 = 
√w
 
thªad_poﬁ_im∂emíèti⁄
::
fun˘i⁄_obje˘_c›y_ö°™˚
<c⁄° 
T
>(
obj
);

773 
	g°d
::
sh¨ed_±r
<
thªad_poﬁ_im∂emíèti⁄
::
fun˘i⁄_obje˘_c›y
> 
fun˘i⁄_c›y
(
±r
);

775 
bÂ_ty≥
 
	gãmp
;

776 
	gãmp
.
£t
(
±r
->
ôem
,
fun˘
,
¨g1
.
gë
());

777 
uöt64
 
	gid
 = 
im∂
->
add_èsk_öã∫Æ
(
ãmp
, 
fun˘i⁄_c›y
);

780 
	g¨g1
.
	gèsk_id
 = 
id
;

781 
	g¨g1
.
	gç
 = 
im∂
;

782  
	gid
;

785 
	gãm∂©e
 <
ty≥«me
 
	gT1
,Åy≥«mê
	gA1
>

786 
uöt64
 
add_èsk
 (

787 (*
fun˘
)(
T1
),

788 
futuª
<
A1
>& 
¨g1


791 
bÂ_ty≥
 
	gãmp
;

792 
	gãmp
.
£t
(
fun˘
,
¨g1
.
gë
());

793 
uöt64
 
	gid
 = 
im∂
->
add_èsk_öã∫Æ
(
ãmp
);

796 
	g¨g1
.
	gèsk_id
 = 
id
;

797 
	g¨g1
.
	gç
 = 
im∂
;

798  
	gid
;

803 
	gãm∂©e
 <
ty≥«me
 
	gF
,Åy≥«mê
	gA1
,Åy≥«mê
	gA2
>

804 
uöt64
 
add_èsk
 (

805 
F
& 
fun˘i⁄_obje˘
,

806 
futuª
<
A1
>& 
¨g1
,

807 
futuª
<
A2
>& 
¨g2


810 
COMPILE_TIME_ASSERT
(
is_fun˘i⁄
<
F
>::
vÆue
 =
Ál£
);

811 
COMPILE_TIME_ASSERT
(
is_poöãr_ty≥
<
F
>::
vÆue
 =
Ál£
);

813 
bÂ_ty≥
 
	gãmp
;

814 
	gãmp
.
£t
(
fun˘i⁄_obje˘
, 
¨g1
.
gë
(), 
¨g2
.get());

815 
uöt64
 
	gid
 = 
im∂
->
add_èsk_öã∫Æ
(
ãmp
);

818 
	g¨g1
.
	gèsk_id
 = 
id
;

819 
	g¨g1
.
	gç
 = 
im∂
;

820 
	g¨g2
.
	gèsk_id
 = 
id
;

821 
	g¨g2
.
	gç
 = 
im∂
;

822  
	gid
;

825 
	gãm∂©e
 <
ty≥«me
 
	gF
,Åy≥«mê
	gA1
,Åy≥«mê
	gA2
>

826 
uöt64
 
add_èsk_by_vÆue
 (

827 c⁄° 
F
& 
fun˘i⁄_obje˘
,

828 
futuª
<
A1
>& 
¨g1
,

829 
futuª
<
A2
>& 
¨g2


832 
	gthªad_poﬁ_im∂emíèti⁄
::
fun˘i⁄_obje˘_c›y_ö°™˚
<
F
>* 
±r
 = 0;

833 
	g±r
 = 
√w
 
thªad_poﬁ_im∂emíèti⁄
::
fun˘i⁄_obje˘_c›y_ö°™˚
<
F
>(
fun˘i⁄_obje˘
);

834 
	g°d
::
sh¨ed_±r
<
thªad_poﬁ_im∂emíèti⁄
::
fun˘i⁄_obje˘_c›y
> 
fun˘i⁄_c›y
(
±r
);

836 
bÂ_ty≥
 
	gãmp
;

837 
	gãmp
.
£t
(
±r
->
ôem
, 
¨g1
.
gë
(), 
¨g2
.get());

838 
uöt64
 
	gid
 = 
im∂
->
add_èsk_öã∫Æ
(
ãmp
, 
fun˘i⁄_c›y
);

841 
	g¨g1
.
	gèsk_id
 = 
id
;

842 
	g¨g1
.
	gç
 = 
im∂
;

843 
	g¨g2
.
	gèsk_id
 = 
id
;

844 
	g¨g2
.
	gç
 = 
im∂
;

845  
	gid
;

848 
	gãm∂©e
 <
ty≥«me
 
	gT
,Åy≥«mê
	gT1
,Åy≥«mê
	gA1
,

849 
ty≥«me
 
	gT2
,Åy≥«mê
	gA2
>

850 
uöt64
 
add_èsk
 (

851 
T
& 
obj
,

852 (
T
::*
fun˘
)(
T1
,
T2
),

853 
futuª
<
A1
>& 
¨g1
,

854 
futuª
<
A2
>& 
¨g2


857 
bÂ_ty≥
 
	gãmp
;

858 
	gãmp
.
£t
(
obj
, 
fun˘
, 
¨g1
.
gë
(), 
¨g2
.get());

859 
uöt64
 
	gid
 = 
im∂
->
add_èsk_öã∫Æ
(
ãmp
);

862 
	g¨g1
.
	gèsk_id
 = 
id
;

863 
	g¨g1
.
	gç
 = 
im∂
;

864 
	g¨g2
.
	gèsk_id
 = 
id
;

865 
	g¨g2
.
	gç
 = 
im∂
;

866  
	gid
;

869 
	gãm∂©e
 <
ty≥«me
 
	gT
,Åy≥«mê
	gT1
,Åy≥«mê
	gA1
,

870 
ty≥«me
 
	gT2
,Åy≥«mê
	gA2
>

871 
uöt64
 
add_èsk_by_vÆue
 (

872 c⁄° 
T
& 
obj
,

873 (
T
::*
fun˘
)(
T1
,
T2
),

874 
futuª
<
A1
>& 
¨g1
,

875 
futuª
<
A2
>& 
¨g2


878 
	gthªad_poﬁ_im∂emíèti⁄
::
fun˘i⁄_obje˘_c›y_ö°™˚
<
T
>* 
±r
 = 0;

879 
	g±r
 = 
√w
 
thªad_poﬁ_im∂emíèti⁄
::
fun˘i⁄_obje˘_c›y_ö°™˚
<
T
>(
obj
);

880 
	g°d
::
sh¨ed_±r
<
thªad_poﬁ_im∂emíèti⁄
::
fun˘i⁄_obje˘_c›y
> 
fun˘i⁄_c›y
(
±r
);

882 
bÂ_ty≥
 
	gãmp
;

883 
	gãmp
.
£t
(
±r
->
ôem
, 
fun˘
, 
¨g1
.
gë
(), 
¨g2
.get());

884 
uöt64
 
	gid
 = 
im∂
->
add_èsk_öã∫Æ
(
ãmp
, 
fun˘i⁄_c›y
);

887 
	g¨g1
.
	gèsk_id
 = 
id
;

888 
	g¨g1
.
	gç
 = 
im∂
;

889 
	g¨g2
.
	gèsk_id
 = 
id
;

890 
	g¨g2
.
	gç
 = 
im∂
;

891  
	gid
;

894 
	gãm∂©e
 <
ty≥«me
 
	gT
,Åy≥«mê
	gT1
,Åy≥«mê
	gA1
,

895 
ty≥«me
 
	gT2
,Åy≥«mê
	gA2
>

896 
uöt64
 
add_èsk
 (

897 c⁄° 
T
& 
obj
,

898 (
T
::*
fun˘
)(
T1
,
T2
) const,

899 
futuª
<
A1
>& 
¨g1
,

900 
futuª
<
A2
>& 
¨g2


903 
bÂ_ty≥
 
	gãmp
;

904 
	gãmp
.
£t
(
obj
, 
fun˘
, 
¨g1
.
gë
(), 
¨g2
.get());

905 
uöt64
 
	gid
 = 
im∂
->
add_èsk_öã∫Æ
(
ãmp
);

908 
	g¨g1
.
	gèsk_id
 = 
id
;

909 
	g¨g1
.
	gç
 = 
im∂
;

910 
	g¨g2
.
	gèsk_id
 = 
id
;

911 
	g¨g2
.
	gç
 = 
im∂
;

912  
	gid
;

915 
	gãm∂©e
 <
ty≥«me
 
	gT
,Åy≥«mê
	gT1
,Åy≥«mê
	gA1
,

916 
ty≥«me
 
	gT2
,Åy≥«mê
	gA2
>

917 
uöt64
 
add_èsk_by_vÆue
 (

918 c⁄° 
T
& 
obj
,

919 (
T
::*
fun˘
)(
T1
,
T2
) const,

920 
futuª
<
A1
>& 
¨g1
,

921 
futuª
<
A2
>& 
¨g2


924 
	gthªad_poﬁ_im∂emíèti⁄
::
fun˘i⁄_obje˘_c›y_ö°™˚
<c⁄° 
T
>* 
±r
 = 0;

925 
	g±r
 = 
√w
 
thªad_poﬁ_im∂emíèti⁄
::
fun˘i⁄_obje˘_c›y_ö°™˚
<c⁄° 
T
>(
obj
);

926 
	g°d
::
sh¨ed_±r
<
thªad_poﬁ_im∂emíèti⁄
::
fun˘i⁄_obje˘_c›y
> 
fun˘i⁄_c›y
(
±r
);

928 
bÂ_ty≥
 
	gãmp
;

929 
	gãmp
.
£t
(
±r
->
ôem
, 
fun˘
, 
¨g1
.
gë
(), 
¨g2
.get());

930 
uöt64
 
	gid
 = 
im∂
->
add_èsk_öã∫Æ
(
ãmp
, 
fun˘i⁄_c›y
);

933 
	g¨g1
.
	gèsk_id
 = 
id
;

934 
	g¨g1
.
	gç
 = 
im∂
;

935 
	g¨g2
.
	gèsk_id
 = 
id
;

936 
	g¨g2
.
	gç
 = 
im∂
;

937  
	gid
;

940 
	gãm∂©e
 <
ty≥«me
 
	gT1
,Åy≥«mê
	gA1
,

941 
ty≥«me
 
	gT2
,Åy≥«mê
	gA2
>

942 
uöt64
 
add_èsk
 (

943 (*
fun˘
)(
T1
,
T2
),

944 
futuª
<
A1
>& 
¨g1
,

945 
futuª
<
A2
>& 
¨g2


948 
bÂ_ty≥
 
	gãmp
;

949 
	gãmp
.
£t
(
fun˘
, 
¨g1
.
gë
(), 
¨g2
.get());

950 
uöt64
 
	gid
 = 
im∂
->
add_èsk_öã∫Æ
(
ãmp
);

953 
	g¨g1
.
	gèsk_id
 = 
id
;

954 
	g¨g1
.
	gç
 = 
im∂
;

955 
	g¨g2
.
	gèsk_id
 = 
id
;

956 
	g¨g2
.
	gç
 = 
im∂
;

957  
	gid
;

962 
	gãm∂©e
 <
ty≥«me
 
	gF
,Åy≥«mê
	gA1
,Åy≥«mê
	gA2
,Åy≥«mê
	gA3
>

963 
uöt64
 
add_èsk
 (

964 
F
& 
fun˘i⁄_obje˘
,

965 
futuª
<
A1
>& 
¨g1
,

966 
futuª
<
A2
>& 
¨g2
,

967 
futuª
<
A3
>& 
¨g3


970 
COMPILE_TIME_ASSERT
(
is_fun˘i⁄
<
F
>::
vÆue
 =
Ál£
);

971 
COMPILE_TIME_ASSERT
(
is_poöãr_ty≥
<
F
>::
vÆue
 =
Ál£
);

973 
bÂ_ty≥
 
	gãmp
;

974 
	gãmp
.
£t
(
fun˘i⁄_obje˘
, 
¨g1
.
gë
(), 
¨g2
.gë(), 
¨g3
.get());

975 
uöt64
 
	gid
 = 
im∂
->
add_èsk_öã∫Æ
(
ãmp
);

978 
	g¨g1
.
	gèsk_id
 = 
id
;

979 
	g¨g1
.
	gç
 = 
im∂
;

980 
	g¨g2
.
	gèsk_id
 = 
id
;

981 
	g¨g2
.
	gç
 = 
im∂
;

982 
	g¨g3
.
	gèsk_id
 = 
id
;

983 
	g¨g3
.
	gç
 = 
im∂
;

984  
	gid
;

987 
	gãm∂©e
 <
ty≥«me
 
	gF
,Åy≥«mê
	gA1
,Åy≥«mê
	gA2
,Åy≥«mê
	gA3
>

988 
uöt64
 
add_èsk_by_vÆue
 (

989 c⁄° 
F
& 
fun˘i⁄_obje˘
,

990 
futuª
<
A1
>& 
¨g1
,

991 
futuª
<
A2
>& 
¨g2
,

992 
futuª
<
A3
>& 
¨g3


995 
	gthªad_poﬁ_im∂emíèti⁄
::
fun˘i⁄_obje˘_c›y_ö°™˚
<
F
>* 
±r
 = 0;

996 
	g±r
 = 
√w
 
thªad_poﬁ_im∂emíèti⁄
::
fun˘i⁄_obje˘_c›y_ö°™˚
<
F
>(
fun˘i⁄_obje˘
);

997 
	g°d
::
sh¨ed_±r
<
thªad_poﬁ_im∂emíèti⁄
::
fun˘i⁄_obje˘_c›y
> 
fun˘i⁄_c›y
(
±r
);

999 
bÂ_ty≥
 
	gãmp
;

1000 
	gãmp
.
£t
(
±r
->
ôem
, 
¨g1
.
gë
(), 
¨g2
.gë(), 
¨g3
.get());

1001 
uöt64
 
	gid
 = 
im∂
->
add_èsk_öã∫Æ
(
ãmp
, 
fun˘i⁄_c›y
);

1004 
	g¨g1
.
	gèsk_id
 = 
id
;

1005 
	g¨g1
.
	gç
 = 
im∂
;

1006 
	g¨g2
.
	gèsk_id
 = 
id
;

1007 
	g¨g2
.
	gç
 = 
im∂
;

1008 
	g¨g3
.
	gèsk_id
 = 
id
;

1009 
	g¨g3
.
	gç
 = 
im∂
;

1010  
	gid
;

1013 
	gãm∂©e
 <
ty≥«me
 
	gT
,Åy≥«mê
	gT1
,Åy≥«mê
	gA1
,

1014 
ty≥«me
 
	gT2
,Åy≥«mê
	gA2
,

1015 
ty≥«me
 
	gT3
,Åy≥«mê
	gA3
>

1016 
uöt64
 
add_èsk
 (

1017 
T
& 
obj
,

1018 (
T
::*
fun˘
)(
T1
,
T2
,
T3
),

1019 
futuª
<
A1
>& 
¨g1
,

1020 
futuª
<
A2
>& 
¨g2
,

1021 
futuª
<
A3
>& 
¨g3


1024 
bÂ_ty≥
 
	gãmp
;

1025 
	gãmp
.
£t
(
obj
, 
fun˘
, 
¨g1
.
gë
(), 
¨g2
.gë(), 
¨g3
.get());

1026 
uöt64
 
	gid
 = 
im∂
->
add_èsk_öã∫Æ
(
ãmp
);

1029 
	g¨g1
.
	gèsk_id
 = 
id
;

1030 
	g¨g1
.
	gç
 = 
im∂
;

1031 
	g¨g2
.
	gèsk_id
 = 
id
;

1032 
	g¨g2
.
	gç
 = 
im∂
;

1033 
	g¨g3
.
	gèsk_id
 = 
id
;

1034 
	g¨g3
.
	gç
 = 
im∂
;

1035  
	gid
;

1038 
	gãm∂©e
 <
ty≥«me
 
	gT
,Åy≥«mê
	gT1
,Åy≥«mê
	gA1
,

1039 
ty≥«me
 
	gT2
,Åy≥«mê
	gA2
,

1040 
ty≥«me
 
	gT3
,Åy≥«mê
	gA3
>

1041 
uöt64
 
add_èsk_by_vÆue
 (

1042 c⁄° 
T
& 
obj
,

1043 (
T
::*
fun˘
)(
T1
,
T2
,
T3
),

1044 
futuª
<
A1
>& 
¨g1
,

1045 
futuª
<
A2
>& 
¨g2
,

1046 
futuª
<
A3
>& 
¨g3


1049 
	gthªad_poﬁ_im∂emíèti⁄
::
fun˘i⁄_obje˘_c›y_ö°™˚
<
T
>* 
±r
 = 0;

1050 
	g±r
 = 
√w
 
thªad_poﬁ_im∂emíèti⁄
::
fun˘i⁄_obje˘_c›y_ö°™˚
<
T
>(
obj
);

1051 
	g°d
::
sh¨ed_±r
<
thªad_poﬁ_im∂emíèti⁄
::
fun˘i⁄_obje˘_c›y
> 
fun˘i⁄_c›y
(
±r
);

1053 
bÂ_ty≥
 
	gãmp
;

1054 
	gãmp
.
£t
(
±r
->
ôem
, 
fun˘
, 
¨g1
.
gë
(), 
¨g2
.gë(), 
¨g3
.get());

1055 
uöt64
 
	gid
 = 
im∂
->
add_èsk_öã∫Æ
(
ãmp
, 
fun˘i⁄_c›y
);

1058 
	g¨g1
.
	gèsk_id
 = 
id
;

1059 
	g¨g1
.
	gç
 = 
im∂
;

1060 
	g¨g2
.
	gèsk_id
 = 
id
;

1061 
	g¨g2
.
	gç
 = 
im∂
;

1062 
	g¨g3
.
	gèsk_id
 = 
id
;

1063 
	g¨g3
.
	gç
 = 
im∂
;

1064  
	gid
;

1067 
	gãm∂©e
 <
ty≥«me
 
	gT
,Åy≥«mê
	gT1
,Åy≥«mê
	gA1
,

1068 
ty≥«me
 
	gT2
,Åy≥«mê
	gA2
,

1069 
ty≥«me
 
	gT3
,Åy≥«mê
	gA3
>

1070 
uöt64
 
add_èsk
 (

1071 c⁄° 
T
& 
obj
,

1072 (
T
::*
fun˘
)(
T1
,
T2
,
T3
) const,

1073 
futuª
<
A1
>& 
¨g1
,

1074 
futuª
<
A2
>& 
¨g2
,

1075 
futuª
<
A3
>& 
¨g3


1078 
bÂ_ty≥
 
	gãmp
;

1079 
	gãmp
.
£t
(
obj
, 
fun˘
, 
¨g1
.
gë
(), 
¨g2
.gë(), 
¨g3
.get());

1080 
uöt64
 
	gid
 = 
im∂
->
add_èsk_öã∫Æ
(
ãmp
);

1083 
	g¨g1
.
	gèsk_id
 = 
id
;

1084 
	g¨g1
.
	gç
 = 
im∂
;

1085 
	g¨g2
.
	gèsk_id
 = 
id
;

1086 
	g¨g2
.
	gç
 = 
im∂
;

1087 
	g¨g3
.
	gèsk_id
 = 
id
;

1088 
	g¨g3
.
	gç
 = 
im∂
;

1089  
	gid
;

1092 
	gãm∂©e
 <
ty≥«me
 
	gT
,Åy≥«mê
	gT1
,Åy≥«mê
	gA1
,

1093 
ty≥«me
 
	gT2
,Åy≥«mê
	gA2
,

1094 
ty≥«me
 
	gT3
,Åy≥«mê
	gA3
>

1095 
uöt64
 
add_èsk_by_vÆue
 (

1096 c⁄° 
T
& 
obj
,

1097 (
T
::*
fun˘
)(
T1
,
T2
,
T3
) const,

1098 
futuª
<
A1
>& 
¨g1
,

1099 
futuª
<
A2
>& 
¨g2
,

1100 
futuª
<
A3
>& 
¨g3


1103 
	gthªad_poﬁ_im∂emíèti⁄
::
fun˘i⁄_obje˘_c›y_ö°™˚
<c⁄° 
T
>* 
±r
 = 0;

1104 
	g±r
 = 
√w
 
thªad_poﬁ_im∂emíèti⁄
::
fun˘i⁄_obje˘_c›y_ö°™˚
<c⁄° 
T
>(
obj
);

1105 
	g°d
::
sh¨ed_±r
<
thªad_poﬁ_im∂emíèti⁄
::
fun˘i⁄_obje˘_c›y
> 
fun˘i⁄_c›y
(
±r
);

1107 
bÂ_ty≥
 
	gãmp
;

1108 
	gãmp
.
£t
(
±r
->
ôem
, 
fun˘
, 
¨g1
.
gë
(), 
¨g2
.gë(), 
¨g3
.get());

1109 
uöt64
 
	gid
 = 
im∂
->
add_èsk_öã∫Æ
(
ãmp
, 
fun˘i⁄_c›y
);

1112 
	g¨g1
.
	gèsk_id
 = 
id
;

1113 
	g¨g1
.
	gç
 = 
im∂
;

1114 
	g¨g2
.
	gèsk_id
 = 
id
;

1115 
	g¨g2
.
	gç
 = 
im∂
;

1116 
	g¨g3
.
	gèsk_id
 = 
id
;

1117 
	g¨g3
.
	gç
 = 
im∂
;

1118  
	gid
;

1121 
	gãm∂©e
 <
ty≥«me
 
	gT1
,Åy≥«mê
	gA1
,

1122 
ty≥«me
 
	gT2
,Åy≥«mê
	gA2
,

1123 
ty≥«me
 
	gT3
,Åy≥«mê
	gA3
>

1124 
uöt64
 
add_èsk
 (

1125 (*
fun˘
)(
T1
,
T2
,
T3
),

1126 
futuª
<
A1
>& 
¨g1
,

1127 
futuª
<
A2
>& 
¨g2
,

1128 
futuª
<
A3
>& 
¨g3


1131 
bÂ_ty≥
 
	gãmp
;

1132 
	gãmp
.
£t
(
fun˘
, 
¨g1
.
gë
(), 
¨g2
.gë(), 
¨g3
.get());

1133 
uöt64
 
	gid
 = 
im∂
->
add_èsk_öã∫Æ
(
ãmp
);

1136 
	g¨g1
.
	gèsk_id
 = 
id
;

1137 
	g¨g1
.
	gç
 = 
im∂
;

1138 
	g¨g2
.
	gèsk_id
 = 
id
;

1139 
	g¨g2
.
	gç
 = 
im∂
;

1140 
	g¨g3
.
	gèsk_id
 = 
id
;

1141 
	g¨g3
.
	gç
 = 
im∂
;

1142  
	gid
;

1147 
	gãm∂©e
 <
ty≥«me
 
	gF
,Åy≥«mê
	gA1
,Åy≥«mê
	gA2
,Åy≥«mê
	gA3
,Åy≥«mê
	gA4
>

1148 
uöt64
 
add_èsk
 (

1149 
F
& 
fun˘i⁄_obje˘
,

1150 
futuª
<
A1
>& 
¨g1
,

1151 
futuª
<
A2
>& 
¨g2
,

1152 
futuª
<
A3
>& 
¨g3
,

1153 
futuª
<
A4
>& 
¨g4


1156 
COMPILE_TIME_ASSERT
(
is_fun˘i⁄
<
F
>::
vÆue
 =
Ál£
);

1157 
COMPILE_TIME_ASSERT
(
is_poöãr_ty≥
<
F
>::
vÆue
 =
Ál£
);

1159 
bÂ_ty≥
 
	gãmp
;

1160 
	gãmp
.
£t
(
fun˘i⁄_obje˘
, 
¨g1
.
gë
(), 
¨g2
.gë(), 
¨g3
.gë(), 
¨g4
.get());

1161 
uöt64
 
	gid
 = 
im∂
->
add_èsk_öã∫Æ
(
ãmp
);

1164 
	g¨g1
.
	gèsk_id
 = 
id
;

1165 
	g¨g1
.
	gç
 = 
im∂
;

1166 
	g¨g2
.
	gèsk_id
 = 
id
;

1167 
	g¨g2
.
	gç
 = 
im∂
;

1168 
	g¨g3
.
	gèsk_id
 = 
id
;

1169 
	g¨g3
.
	gç
 = 
im∂
;

1170 
	g¨g4
.
	gèsk_id
 = 
id
;

1171 
	g¨g4
.
	gç
 = 
im∂
;

1172  
	gid
;

1175 
	gãm∂©e
 <
ty≥«me
 
	gF
,Åy≥«mê
	gA1
,Åy≥«mê
	gA2
,Åy≥«mê
	gA3
,Åy≥«mê
	gA4
>

1176 
uöt64
 
add_èsk_by_vÆue
 (

1177 c⁄° 
F
& 
fun˘i⁄_obje˘
,

1178 
futuª
<
A1
>& 
¨g1
,

1179 
futuª
<
A2
>& 
¨g2
,

1180 
futuª
<
A3
>& 
¨g3
,

1181 
futuª
<
A4
>& 
¨g4


1184 
	gthªad_poﬁ_im∂emíèti⁄
::
fun˘i⁄_obje˘_c›y_ö°™˚
<
F
>* 
±r
 = 0;

1185 
	g±r
 = 
√w
 
thªad_poﬁ_im∂emíèti⁄
::
fun˘i⁄_obje˘_c›y_ö°™˚
<
F
>(
fun˘i⁄_obje˘
);

1186 
	g°d
::
sh¨ed_±r
<
thªad_poﬁ_im∂emíèti⁄
::
fun˘i⁄_obje˘_c›y
> 
fun˘i⁄_c›y
(
±r
);

1188 
bÂ_ty≥
 
	gãmp
;

1189 
	gãmp
.
£t
(
±r
->
ôem
, 
¨g1
.
gë
(), 
¨g2
.gë(), 
¨g3
.gë(), 
¨g4
.get());

1190 
uöt64
 
	gid
 = 
im∂
->
add_èsk_öã∫Æ
(
ãmp
, 
fun˘i⁄_c›y
);

1193 
	g¨g1
.
	gèsk_id
 = 
id
;

1194 
	g¨g1
.
	gç
 = 
im∂
;

1195 
	g¨g2
.
	gèsk_id
 = 
id
;

1196 
	g¨g2
.
	gç
 = 
im∂
;

1197 
	g¨g3
.
	gèsk_id
 = 
id
;

1198 
	g¨g3
.
	gç
 = 
im∂
;

1199 
	g¨g4
.
	gèsk_id
 = 
id
;

1200 
	g¨g4
.
	gç
 = 
im∂
;

1201  
	gid
;

1204 
	gãm∂©e
 <
ty≥«me
 
	gT
,Åy≥«mê
	gT1
,Åy≥«mê
	gA1
,

1205 
ty≥«me
 
	gT2
,Åy≥«mê
	gA2
,

1206 
ty≥«me
 
	gT3
,Åy≥«mê
	gA3
,

1207 
ty≥«me
 
	gT4
,Åy≥«mê
	gA4
>

1208 
uöt64
 
add_èsk
 (

1209 
T
& 
obj
,

1210 (
T
::*
fun˘
)(
T1
,
T2
,
T3
,
T4
),

1211 
futuª
<
A1
>& 
¨g1
,

1212 
futuª
<
A2
>& 
¨g2
,

1213 
futuª
<
A3
>& 
¨g3
,

1214 
futuª
<
A4
>& 
¨g4


1217 
bÂ_ty≥
 
	gãmp
;

1218 
	gãmp
.
£t
(
obj
, 
fun˘
, 
¨g1
.
gë
(), 
¨g2
.gë(), 
¨g3
.gë(), 
¨g4
.get());

1219 
uöt64
 
	gid
 = 
im∂
->
add_èsk_öã∫Æ
(
ãmp
);

1222 
	g¨g1
.
	gèsk_id
 = 
id
;

1223 
	g¨g1
.
	gç
 = 
im∂
;

1224 
	g¨g2
.
	gèsk_id
 = 
id
;

1225 
	g¨g2
.
	gç
 = 
im∂
;

1226 
	g¨g3
.
	gèsk_id
 = 
id
;

1227 
	g¨g3
.
	gç
 = 
im∂
;

1228 
	g¨g4
.
	gèsk_id
 = 
id
;

1229 
	g¨g4
.
	gç
 = 
im∂
;

1230  
	gid
;

1233 
	gãm∂©e
 <
ty≥«me
 
	gT
,Åy≥«mê
	gT1
,Åy≥«mê
	gA1
,

1234 
ty≥«me
 
	gT2
,Åy≥«mê
	gA2
,

1235 
ty≥«me
 
	gT3
,Åy≥«mê
	gA3
,

1236 
ty≥«me
 
	gT4
,Åy≥«mê
	gA4
>

1237 
uöt64
 
add_èsk_by_vÆue
 (

1238 c⁄° 
T
& 
obj
,

1239 (
T
::*
fun˘
)(
T1
,
T2
,
T3
,
T4
),

1240 
futuª
<
A1
>& 
¨g1
,

1241 
futuª
<
A2
>& 
¨g2
,

1242 
futuª
<
A3
>& 
¨g3
,

1243 
futuª
<
A4
>& 
¨g4


1246 
	gthªad_poﬁ_im∂emíèti⁄
::
fun˘i⁄_obje˘_c›y_ö°™˚
<
T
>* 
±r
 = 0;

1247 
	g±r
 = 
√w
 
thªad_poﬁ_im∂emíèti⁄
::
fun˘i⁄_obje˘_c›y_ö°™˚
<
T
>(
obj
);

1248 
	g°d
::
sh¨ed_±r
<
thªad_poﬁ_im∂emíèti⁄
::
fun˘i⁄_obje˘_c›y
> 
fun˘i⁄_c›y
(
±r
);

1250 
bÂ_ty≥
 
	gãmp
;

1251 
	gãmp
.
£t
(
±r
->
ôem
, 
fun˘
, 
¨g1
.
gë
(), 
¨g2
.gë(), 
¨g3
.gë(), 
¨g4
.get());

1252 
uöt64
 
	gid
 = 
im∂
->
add_èsk_öã∫Æ
(
ãmp
, 
fun˘i⁄_c›y
);

1255 
	g¨g1
.
	gèsk_id
 = 
id
;

1256 
	g¨g1
.
	gç
 = 
im∂
;

1257 
	g¨g2
.
	gèsk_id
 = 
id
;

1258 
	g¨g2
.
	gç
 = 
im∂
;

1259 
	g¨g3
.
	gèsk_id
 = 
id
;

1260 
	g¨g3
.
	gç
 = 
im∂
;

1261 
	g¨g4
.
	gèsk_id
 = 
id
;

1262 
	g¨g4
.
	gç
 = 
im∂
;

1263  
	gid
;

1266 
	gãm∂©e
 <
ty≥«me
 
	gT
,Åy≥«mê
	gT1
,Åy≥«mê
	gA1
,

1267 
ty≥«me
 
	gT2
,Åy≥«mê
	gA2
,

1268 
ty≥«me
 
	gT3
,Åy≥«mê
	gA3
,

1269 
ty≥«me
 
	gT4
,Åy≥«mê
	gA4
>

1270 
uöt64
 
add_èsk
 (

1271 c⁄° 
T
& 
obj
,

1272 (
T
::*
fun˘
)(
T1
,
T2
,
T3
,
T4
) const,

1273 
futuª
<
A1
>& 
¨g1
,

1274 
futuª
<
A2
>& 
¨g2
,

1275 
futuª
<
A3
>& 
¨g3
,

1276 
futuª
<
A4
>& 
¨g4


1279 
bÂ_ty≥
 
	gãmp
;

1280 
	gãmp
.
£t
(
obj
, 
fun˘
, 
¨g1
.
gë
(), 
¨g2
.gë(), 
¨g3
.gë(), 
¨g4
.get());

1281 
uöt64
 
	gid
 = 
im∂
->
add_èsk_öã∫Æ
(
ãmp
);

1284 
	g¨g1
.
	gèsk_id
 = 
id
;

1285 
	g¨g1
.
	gç
 = 
im∂
;

1286 
	g¨g2
.
	gèsk_id
 = 
id
;

1287 
	g¨g2
.
	gç
 = 
im∂
;

1288 
	g¨g3
.
	gèsk_id
 = 
id
;

1289 
	g¨g3
.
	gç
 = 
im∂
;

1290 
	g¨g4
.
	gèsk_id
 = 
id
;

1291 
	g¨g4
.
	gç
 = 
im∂
;

1292  
	gid
;

1295 
	gãm∂©e
 <
ty≥«me
 
	gT
,Åy≥«mê
	gT1
,Åy≥«mê
	gA1
,

1296 
ty≥«me
 
	gT2
,Åy≥«mê
	gA2
,

1297 
ty≥«me
 
	gT3
,Åy≥«mê
	gA3
,

1298 
ty≥«me
 
	gT4
,Åy≥«mê
	gA4
>

1299 
uöt64
 
add_èsk_by_vÆue
 (

1300 c⁄° 
T
& 
obj
,

1301 (
T
::*
fun˘
)(
T1
,
T2
,
T3
,
T4
) const,

1302 
futuª
<
A1
>& 
¨g1
,

1303 
futuª
<
A2
>& 
¨g2
,

1304 
futuª
<
A3
>& 
¨g3
,

1305 
futuª
<
A4
>& 
¨g4


1308 
	gthªad_poﬁ_im∂emíèti⁄
::
fun˘i⁄_obje˘_c›y_ö°™˚
<c⁄° 
T
>* 
±r
 = 0;

1309 
	g±r
 = 
√w
 
thªad_poﬁ_im∂emíèti⁄
::
fun˘i⁄_obje˘_c›y_ö°™˚
<c⁄° 
T
>(
obj
);

1310 
	g°d
::
sh¨ed_±r
<
thªad_poﬁ_im∂emíèti⁄
::
fun˘i⁄_obje˘_c›y
> 
fun˘i⁄_c›y
(
±r
);

1312 
bÂ_ty≥
 
	gãmp
;

1313 
	gãmp
.
£t
(
±r
->
ôem
, 
fun˘
, 
¨g1
.
gë
(), 
¨g2
.gë(), 
¨g3
.gë(), 
¨g4
.get());

1314 
uöt64
 
	gid
 = 
im∂
->
add_èsk_öã∫Æ
(
ãmp
, 
fun˘i⁄_c›y
);

1317 
	g¨g1
.
	gèsk_id
 = 
id
;

1318 
	g¨g1
.
	gç
 = 
im∂
;

1319 
	g¨g2
.
	gèsk_id
 = 
id
;

1320 
	g¨g2
.
	gç
 = 
im∂
;

1321 
	g¨g3
.
	gèsk_id
 = 
id
;

1322 
	g¨g3
.
	gç
 = 
im∂
;

1323 
	g¨g4
.
	gèsk_id
 = 
id
;

1324 
	g¨g4
.
	gç
 = 
im∂
;

1325  
	gid
;

1328 
	gãm∂©e
 <
ty≥«me
 
	gT1
,Åy≥«mê
	gA1
,

1329 
ty≥«me
 
	gT2
,Åy≥«mê
	gA2
,

1330 
ty≥«me
 
	gT3
,Åy≥«mê
	gA3
,

1331 
ty≥«me
 
	gT4
,Åy≥«mê
	gA4
>

1332 
uöt64
 
add_èsk
 (

1333 (*
fun˘
)(
T1
,
T2
,
T3
,
T4
),

1334 
futuª
<
A1
>& 
¨g1
,

1335 
futuª
<
A2
>& 
¨g2
,

1336 
futuª
<
A3
>& 
¨g3
,

1337 
futuª
<
A4
>& 
¨g4


1340 
bÂ_ty≥
 
	gãmp
;

1341 
	gãmp
.
£t
(
fun˘
, 
¨g1
.
gë
(), 
¨g2
.gë(), 
¨g3
.gë(), 
¨g4
.get());

1342 
uöt64
 
	gid
 = 
im∂
->
add_èsk_öã∫Æ
(
ãmp
);

1345 
	g¨g1
.
	gèsk_id
 = 
id
;

1346 
	g¨g1
.
	gç
 = 
im∂
;

1347 
	g¨g2
.
	gèsk_id
 = 
id
;

1348 
	g¨g2
.
	gç
 = 
im∂
;

1349 
	g¨g3
.
	gèsk_id
 = 
id
;

1350 
	g¨g3
.
	gç
 = 
im∂
;

1351 
	g¨g4
.
	gèsk_id
 = 
id
;

1352 
	g¨g4
.
	gç
 = 
im∂
;

1353  
	gid
;

1356 
	g¥iv©e
:

1358 
°d
::
sh¨ed_±r
<
thªad_poﬁ_im∂emíèti⁄
> 
im∂
;

1361 
thªad_poﬁ
(thread_pool&);

1362 
	gthªad_poﬁ
& 
	g›î©‹
=(
thªad_poﬁ
&);

1369 
	gãm∂©e
 <
ty≥«me
 
	gT
>

1370 
	gfutuª
<
	gT
>::

1371 
	$waô
 (

1374 i‡(
ç
)

1376 
ç
->
	`waô_f‹_èsk
(
èsk_id
);

1377 
ç
.
	`ª£t
();

1378 
èsk_id
 = 0;

1380 
	}
}

1386 #ifde‡
NO_MAKEFILE


1387 
	~"thªad_poﬁ_exãnsi⁄.˝p
"

	@viper/concurrentqueue-src/benchmarks/dlib/threads/thread_pool_extension_abstract.h

3 #unde‡
DLIB_THREAD_POOl_ABSTRACT_Hh_


4 #ifde‡
DLIB_THREAD_POOl_ABSTRACT_Hh_


6 
	~"thªads_kî√l_ab°ø˘.h
"

7 
	~"../uöä.h
"

9 
«me•a˚
 
	gdlib


14 
	gãm∂©e
 <

15 
ty≥«me
 
	gT


17 ˛as†
	cfutuª


44 
	gpublic
:

45 
futuª
 (

54 
futuª
 (

55 c⁄° 
T
& 
ôem


63 
futuª
 (

64 c⁄° 
futuª
& 
ôem


76 ~
futuª
 (

85 
boﬁ
 
is_ªady
 (

96 
	gfutuª
& 
	g›î©‹
=(

97 c⁄° 
T
& 
ôem


109 
	gfutuª
& 
	g›î©‹
=(

110 c⁄° 
futuª
& 
ôem


123 
›î©‹
 
	gT
& (

134 
›î©‹
 c⁄° 
	gT
& (

145 
	gT
& 
gë
 (

156 c⁄° 
	gT
& 
gë
 (

171 
	gãm∂©e
 <
ty≥«me
 
	gT
>

172 
ölöe
 
sw≠
 (

173 
futuª
<
T
>& 
a
,

174 
futuª
<
T
>& 
b


175 Ë{ 
	g°d
::
sw≠
(
a
.
gë
(), 
b
.get()); }

185 
	gãm∂©e
 <
ty≥«me
 
	gT
> 
boﬁ
 
	g›î©‹
=(c⁄° 
futuª
<
T
>& 
a
, c⁄° 
	gfutuª
<T>& 
	gb
Ë{  
	ga
.
gë
(Ë=
b
.get(); }

186 
	gãm∂©e
 <
ty≥«me
 
	gT
> 
boﬁ
 
	g›î©‹
!(c⁄° 
futuª
<
T
>& 
a
, c⁄° 
	gfutuª
<T>& 
	gb
Ë{  
	ga
.
gë
(Ë!
b
.get(); }

187 
	gãm∂©e
 <
ty≥«me
 
	gT
> 
boﬁ
 
	g›î©‹
<(c⁄° 
futuª
<
T
>& 
a
, c⁄° 
	gfutuª
<T>& 
	gb
Ë{  
	ga
.
gë
(Ë<
b
.get(); }

188 
	gãm∂©e
 <
ty≥«me
 
	gT
> 
boﬁ
 
	g›î©‹
>(c⁄° 
futuª
<
T
>& 
a
, c⁄° 
	gfutuª
<T>& 
	gb
Ë{  
	ga
.
gë
(Ë>
b
.get(); }

189 
	gãm∂©e
 <
ty≥«me
 
	gT
> 
boﬁ
 
	g›î©‹
< (c⁄° 
	gfutuª
<T>& 
	ga
, c⁄° futuª<T>& 
	gb
Ë{ á.
gë
() < b.get(); }

190 
	gãm∂©e
 <
ty≥«me
 
	gT
> 
boﬁ
 
	g›î©‹
> (c⁄° 
	gfutuª
<T>& 
	ga
, c⁄° futuª<T>& 
	gb
Ë{ á.
gë
() > b.get(); }

192 
	gãm∂©e
 <
ty≥«me
 
	gT
> 
boﬁ
 
	g›î©‹
=(c⁄° 
futuª
<
T
>& 
a
, c⁄° T& 
	gb
Ë{  
	ga
.
gë
(Ë=
b
; }

193 
	gãm∂©e
 <
ty≥«me
 
	gT
> 
boﬁ
 
	g›î©‹
=(c⁄° 
T
& 
a
, c⁄° 
	gfutuª
<T>& 
	gb
Ë{  
	ga
 =
b
.
gë
(); }

194 
	gãm∂©e
 <
ty≥«me
 
	gT
> 
boﬁ
 
	g›î©‹
!(c⁄° 
futuª
<
T
>& 
a
, c⁄° T& 
	gb
Ë{  
	ga
.
gë
(Ë!
b
; }

195 
	gãm∂©e
 <
ty≥«me
 
	gT
> 
boﬁ
 
	g›î©‹
!(c⁄° 
T
& 
a
, c⁄° 
	gfutuª
<T>& 
	gb
Ë{  
	ga
 !
b
.
gë
(); }

196 
	gãm∂©e
 <
ty≥«me
 
	gT
> 
boﬁ
 
	g›î©‹
<(c⁄° 
futuª
<
T
>& 
a
, c⁄° T& 
	gb
Ë{  
	ga
.
gë
(Ë<
b
; }

197 
	gãm∂©e
 <
ty≥«me
 
	gT
> 
boﬁ
 
	g›î©‹
<(c⁄° 
T
& 
a
, c⁄° 
	gfutuª
<T>& 
	gb
Ë{  
	ga
 <
b
.
gë
(); }

198 
	gãm∂©e
 <
ty≥«me
 
	gT
> 
boﬁ
 
	g›î©‹
>(c⁄° 
futuª
<
T
>& 
a
, c⁄° T& 
	gb
Ë{  
	ga
.
gë
(Ë>
b
; }

199 
	gãm∂©e
 <
ty≥«me
 
	gT
> 
boﬁ
 
	g›î©‹
>(c⁄° 
T
& 
a
, c⁄° 
	gfutuª
<T>& 
	gb
Ë{  
	ga
 >
b
.
gë
(); }

200 
	gãm∂©e
 <
ty≥«me
 
	gT
> 
boﬁ
 
	g›î©‹
< (c⁄° 
	gfutuª
<T>& 
	ga
, c⁄° T& 
	gb
Ë{ á.
gë
() < b; }

201 
	gãm∂©e
 <
ty≥«me
 
	gT
> 
boﬁ
 
	g›î©‹
< (c⁄° T& 
	ga
, c⁄° 
	gfutuª
<T>& 
	gb
Ë{ á < b.
gë
(); }

202 
	gãm∂©e
 <
ty≥«me
 
	gT
> 
boﬁ
 
	g›î©‹
> (c⁄° 
	gfutuª
<T>& 
	ga
, c⁄° T& 
	gb
Ë{ á.
gë
() > b; }

203 
	gãm∂©e
 <
ty≥«me
 
	gT
> 
boﬁ
 
	g›î©‹
> (c⁄° T& 
	ga
, c⁄° 
	gfutuª
<T>& 
	gb
Ë{ á > b.
gë
(); }

207 ˛as†
	cthªad_poﬁ


235 
	gpublic
:

236 
ex∂icô
 
thªad_poﬁ
 (

237 
num_thªads


249 ~
thªad_poﬁ
(

260 
boﬁ
 
is_èsk_thªad
 (

271 
num_thªads_ö_poﬁ
 (

279 
	gãm∂©e
 <
ty≥«me
 
	gF
>

280 
uöt64
 
add_èsk_by_vÆue
 (

281 c⁄° 
F
& 
fun˘i⁄_obje˘


298 
	gãm∂©e
 <
ty≥«me
 
	gT
>

299 
uöt64
 
add_èsk
 (

300 
T
& 
obj
,

301 (
T
::*
fun˘
)()

321 
	gãm∂©e
 <
ty≥«me
 
	gT
>

322 
uöt64
 
add_èsk_by_vÆue
 (

323 c⁄° 
T
& 
obj
,

324 (
T
::*
fun˘
)()

342 
	gãm∂©e
 <
ty≥«me
 
	gT
>

343 
uöt64
 
add_èsk
 (

344 
T
& 
obj
,

345 (
T
::*
fun˘
)(),

346 
¨g1


366 
	gãm∂©e
 <
ty≥«me
 
	gT
>

367 
uöt64
 
add_èsk
 (

368 
T
& 
obj
,

369 (
T
::*
fun˘
)(,),

370 
¨g1
,

371 
¨g2


391 
waô_f‹_èsk
 (

392 
uöt64
 
èsk_id


402 
waô_f‹_Æl_èsks
 (

413 
	gãm∂©e
 <
ty≥«me
 
	gF
,Åy≥«mê
	gA1
>

414 
uöt64
 
add_èsk
 (

415 
F
& 
fun˘i⁄_obje˘
,

416 
futuª
<
A1
>& 
¨g1


438 
	gãm∂©e
 <
ty≥«me
 
	gF
,Åy≥«mê
	gA1
>

439 
uöt64
 
add_èsk_by_vÆue
 (

440 c⁄° 
F
& 
fun˘i⁄_obje˘
,

441 
futuª
<
A1
>& 
¨g1


460 
	gãm∂©e
 <
ty≥«me
 
	gT
,Åy≥«mê
	gT1
,Åy≥«mê
	gA1
>

461 
uöt64
 
add_èsk
 (

462 
T
& 
obj
,

463 (
T
::*
fun˘
)(
T1
),

464 
futuª
<
A1
>& 
¨g1


487 
	gãm∂©e
 <
ty≥«me
 
	gT
,Åy≥«mê
	gT1
,Åy≥«mê
	gA1
>

488 
uöt64
 
add_èsk_by_vÆue
 (

489 c⁄° 
T
& 
obj
,

490 (
T
::*
fun˘
)(
T1
),

491 
futuª
<
A1
>& 
¨g1


511 
	gãm∂©e
 <
ty≥«me
 
	gT
,Åy≥«mê
	gT1
,Åy≥«mê
	gA1
>

512 
uöt64
 
add_èsk
 (

513 c⁄° 
T
& 
obj
,

514 (
T
::*
fun˘
)(
T1
) const,

515 
futuª
<
A1
>& 
¨g1


538 
	gãm∂©e
 <
ty≥«me
 
	gT
,Åy≥«mê
	gT1
,Åy≥«mê
	gA1
>

539 
uöt64
 
add_èsk_by_vÆue
 (

540 c⁄° 
T
& 
obj
,

541 (
T
::*
fun˘
)(
T1
) const,

542 
futuª
<
A1
>& 
¨g1


562 
	gãm∂©e
 <
ty≥«me
 
	gT1
,Åy≥«mê
	gA1
>

563 
uöt64
 
add_èsk
 (

564 (*
fun˘
)(
T1
),

565 
futuª
<
A1
>& 
¨g1


591 
	gãm∂©e
 <
ty≥«me
 
	gF
,Åy≥«mê
	gA1
,Åy≥«mê
	gA2
>

592 
uöt64
 
add_èsk
 (

593 
F
& 
fun˘i⁄_obje˘
,

594 
futuª
<
A1
>& 
¨g1
,

595 
futuª
<
A2
>& 
¨g2


598 
	gãm∂©e
 <
ty≥«me
 
	gF
,Åy≥«mê
	gA1
,Åy≥«mê
	gA2
>

599 
uöt64
 
add_èsk_by_vÆue
 (

600 c⁄° 
F
& 
fun˘i⁄_obje˘
,

601 
futuª
<
A1
>& 
¨g1
,

602 
futuª
<
A2
>& 
¨g2


605 
	gãm∂©e
 <
ty≥«me
 
	gT
,Åy≥«mê
	gT1
,Åy≥«mê
	gA1
,

606 
ty≥«me
 
	gT2
,Åy≥«mê
	gA2
>

607 
uöt64
 
add_èsk
 (

608 
T
& 
obj
,

609 (
T
::*
fun˘
)(
T1
,
T2
),

610 
futuª
<
A1
>& 
¨g1
,

611 
futuª
<
A2
>& 
¨g2


614 
uöt64
 
add_èsk_by_vÆue
 (

615 c⁄° 
T
& 
obj
,

616 (
T
::*
fun˘
)(
T1
,
T2
),

617 
futuª
<
A1
>& 
¨g1
,

618 
futuª
<
A2
>& 
¨g2


621 
	gãm∂©e
 <
ty≥«me
 
	gT
,Åy≥«mê
	gT1
,Åy≥«mê
	gA1
,

622 
ty≥«me
 
	gT2
,Åy≥«mê
	gA2
>

623 
uöt64
 
add_èsk
 (

624 c⁄° 
T
& 
obj
,

625 (
T
::*
fun˘
)(
T1
,
T2
) const,

626 
futuª
<
A1
>& 
¨g1
,

627 
futuª
<
A2
>& 
¨g2


630 
	gãm∂©e
 <
ty≥«me
 
	gT
,Åy≥«mê
	gT1
,Åy≥«mê
	gA1
,

631 
ty≥«me
 
	gT2
,Åy≥«mê
	gA2
>

632 
uöt64
 
add_èsk_by_vÆue
 (

633 c⁄° 
T
& 
obj
,

634 (
T
::*
fun˘
)(
T1
,
T2
) const,

635 
futuª
<
A1
>& 
¨g1
,

636 
futuª
<
A2
>& 
¨g2


639 
	gãm∂©e
 <
ty≥«me
 
	gT1
,Åy≥«mê
	gA1
,

640 
ty≥«me
 
	gT2
,Åy≥«mê
	gA2
>

641 
uöt64
 
add_èsk
 (

642 (*
fun˘
)(
T1
,
T2
),

643 
futuª
<
A1
>& 
¨g1
,

644 
futuª
<
A2
>& 
¨g2


649 
	gãm∂©e
 <
ty≥«me
 
	gF
,Åy≥«mê
	gA1
,Åy≥«mê
	gA2
,Åy≥«mê
	gA3
>

650 
uöt64
 
add_èsk
 (

651 
F
& 
fun˘i⁄_obje˘
,

652 
futuª
<
A1
>& 
¨g1
,

653 
futuª
<
A2
>& 
¨g2
,

654 
futuª
<
A3
>& 
¨g3


657 
	gãm∂©e
 <
ty≥«me
 
	gF
,Åy≥«mê
	gA1
,Åy≥«mê
	gA2
,Åy≥«mê
	gA3
>

658 
uöt64
 
add_èsk_by_vÆue
 (

659 c⁄° 
F
& 
fun˘i⁄_obje˘
,

660 
futuª
<
A1
>& 
¨g1
,

661 
futuª
<
A2
>& 
¨g2
,

662 
futuª
<
A3
>& 
¨g3


665 
	gãm∂©e
 <
ty≥«me
 
	gT
,Åy≥«mê
	gT1
,Åy≥«mê
	gA1
,

666 
ty≥«me
 
	gT2
,Åy≥«mê
	gA2
,

667 
ty≥«me
 
	gT3
,Åy≥«mê
	gA3
>

668 
uöt64
 
add_èsk
 (

669 
T
& 
obj
,

670 (
T
::*
fun˘
)(
T1
,
T2
,
T3
),

671 
futuª
<
A1
>& 
¨g1
,

672 
futuª
<
A2
>& 
¨g2
,

673 
futuª
<
A3
>& 
¨g3


676 
	gãm∂©e
 <
ty≥«me
 
	gT
,Åy≥«mê
	gT1
,Åy≥«mê
	gA1
,

677 
ty≥«me
 
	gT2
,Åy≥«mê
	gA2
,

678 
ty≥«me
 
	gT3
,Åy≥«mê
	gA3
>

679 
uöt64
 
add_èsk_by_vÆue
 (

680 c⁄° 
T
& 
obj
,

681 (
T
::*
fun˘
)(
T1
,
T2
,
T3
),

682 
futuª
<
A1
>& 
¨g1
,

683 
futuª
<
A2
>& 
¨g2
,

684 
futuª
<
A3
>& 
¨g3


687 
	gãm∂©e
 <
ty≥«me
 
	gT
,Åy≥«mê
	gT1
,Åy≥«mê
	gA1
,

688 
ty≥«me
 
	gT2
,Åy≥«mê
	gA2
,

689 
ty≥«me
 
	gT3
,Åy≥«mê
	gA3
>

690 
uöt64
 
add_èsk
 (

691 c⁄° 
T
& 
obj
,

692 (
T
::*
fun˘
)(
T1
,
T2
,
T3
) const,

693 
futuª
<
A1
>& 
¨g1
,

694 
futuª
<
A2
>& 
¨g2
,

695 
futuª
<
A3
>& 
¨g3


698 
	gãm∂©e
 <
ty≥«me
 
	gT
,Åy≥«mê
	gT1
,Åy≥«mê
	gA1
,

699 
ty≥«me
 
	gT2
,Åy≥«mê
	gA2
,

700 
ty≥«me
 
	gT3
,Åy≥«mê
	gA3
>

701 
uöt64
 
add_èsk_by_vÆue
 (

702 c⁄° 
T
& 
obj
,

703 (
T
::*
fun˘
)(
T1
,
T2
,
T3
) const,

704 
futuª
<
A1
>& 
¨g1
,

705 
futuª
<
A2
>& 
¨g2
,

706 
futuª
<
A3
>& 
¨g3


709 
	gãm∂©e
 <
ty≥«me
 
	gT1
,Åy≥«mê
	gA1
,

710 
ty≥«me
 
	gT2
,Åy≥«mê
	gA2
,

711 
ty≥«me
 
	gT3
,Åy≥«mê
	gA3
>

712 
uöt64
 
add_èsk
 (

713 (*
fun˘
)(
T1
,
T2
,
T3
),

714 
futuª
<
A1
>& 
¨g1
,

715 
futuª
<
A2
>& 
¨g2
,

716 
futuª
<
A3
>& 
¨g3


721 
	gãm∂©e
 <
ty≥«me
 
	gF
,Åy≥«mê
	gA1
,Åy≥«mê
	gA2
,Åy≥«mê
	gA3
,Åy≥«mê
	gA4
>

722 
uöt64
 
add_èsk
 (

723 
F
& 
fun˘i⁄_obje˘
,

724 
futuª
<
A1
>& 
¨g1
,

725 
futuª
<
A2
>& 
¨g2
,

726 
futuª
<
A3
>& 
¨g3
,

727 
futuª
<
A4
>& 
¨g4


730 
	gãm∂©e
 <
ty≥«me
 
	gF
,Åy≥«mê
	gA1
,Åy≥«mê
	gA2
,Åy≥«mê
	gA3
,Åy≥«mê
	gA4
>

731 
uöt64
 
add_èsk_by_vÆue
 (

732 c⁄° 
F
& 
fun˘i⁄_obje˘
,

733 
futuª
<
A1
>& 
¨g1
,

734 
futuª
<
A2
>& 
¨g2
,

735 
futuª
<
A3
>& 
¨g3
,

736 
futuª
<
A4
>& 
¨g4


739 
	gãm∂©e
 <
ty≥«me
 
	gT
,Åy≥«mê
	gT1
,Åy≥«mê
	gA1
,

740 
ty≥«me
 
	gT2
,Åy≥«mê
	gA2
,

741 
ty≥«me
 
	gT3
,Åy≥«mê
	gA3
,

742 
ty≥«me
 
	gT4
,Åy≥«mê
	gA4
>

743 
uöt64
 
add_èsk
 (

744 
T
& 
obj
,

745 (
T
::*
fun˘
)(
T1
,
T2
,
T3
,
T4
),

746 
futuª
<
A1
>& 
¨g1
,

747 
futuª
<
A2
>& 
¨g2
,

748 
futuª
<
A3
>& 
¨g3
,

749 
futuª
<
A4
>& 
¨g4


752 
	gãm∂©e
 <
ty≥«me
 
	gT
,Åy≥«mê
	gT1
,Åy≥«mê
	gA1
,

753 
ty≥«me
 
	gT2
,Åy≥«mê
	gA2
,

754 
ty≥«me
 
	gT3
,Åy≥«mê
	gA3
,

755 
ty≥«me
 
	gT4
,Åy≥«mê
	gA4
>

756 
uöt64
 
add_èsk_by_vÆue
 (

757 c⁄° 
T
& 
obj
,

758 (
T
::*
fun˘
)(
T1
,
T2
,
T3
,
T4
),

759 
futuª
<
A1
>& 
¨g1
,

760 
futuª
<
A2
>& 
¨g2
,

761 
futuª
<
A3
>& 
¨g3
,

762 
futuª
<
A4
>& 
¨g4


765 
	gãm∂©e
 <
ty≥«me
 
	gT
,Åy≥«mê
	gT1
,Åy≥«mê
	gA1
,

766 
ty≥«me
 
	gT2
,Åy≥«mê
	gA2
,

767 
ty≥«me
 
	gT3
,Åy≥«mê
	gA3
,

768 
ty≥«me
 
	gT4
,Åy≥«mê
	gA4
>

769 
uöt64
 
add_èsk
 (

770 c⁄° 
T
& 
obj
,

771 (
T
::*
fun˘
)(
T1
,
T2
,
T3
,
T4
) const,

772 
futuª
<
A1
>& 
¨g1
,

773 
futuª
<
A2
>& 
¨g2
,

774 
futuª
<
A3
>& 
¨g3
,

775 
futuª
<
A4
>& 
¨g4


778 
	gãm∂©e
 <
ty≥«me
 
	gT
,Åy≥«mê
	gT1
,Åy≥«mê
	gA1
,

779 
ty≥«me
 
	gT2
,Åy≥«mê
	gA2
,

780 
ty≥«me
 
	gT3
,Åy≥«mê
	gA3
,

781 
ty≥«me
 
	gT4
,Åy≥«mê
	gA4
>

782 
uöt64
 
add_èsk_by_vÆue
 (

783 c⁄° 
T
& 
obj
,

784 (
T
::*
fun˘
)(
T1
,
T2
,
T3
,
T4
) const,

785 
futuª
<
A1
>& 
¨g1
,

786 
futuª
<
A2
>& 
¨g2
,

787 
futuª
<
A3
>& 
¨g3
,

788 
futuª
<
A4
>& 
¨g4


791 
	gãm∂©e
 <
ty≥«me
 
	gT1
,Åy≥«mê
	gA1
,

792 
ty≥«me
 
	gT2
,Åy≥«mê
	gA2
,

793 
ty≥«me
 
	gT3
,Åy≥«mê
	gA3
,

794 
ty≥«me
 
	gT4
,Åy≥«mê
	gA4
>

795 
uöt64
 
add_èsk
 (

796 (*
fun˘
)(
T1
,
T2
,
T3
,
T4
),

797 
futuª
<
A1
>& 
¨g1
,

798 
futuª
<
A2
>& 
¨g2
,

799 
futuª
<
A3
>& 
¨g3
,

800 
futuª
<
A4
>& 
¨g4


805 
	gãm∂©e
 <
ty≥«me
 
	gF
>

806 
uöt64
 
add_èsk
 (

807 
F
& 
fun˘i⁄_obje˘


810 
	gãm∂©e
 <
ty≥«me
 
	gT
>

811 
uöt64
 
add_èsk
 (

812 c⁄° 
T
& 
obj
,

813 (
T
::*
fun˘
)() const,

816 
	gãm∂©e
 <
ty≥«me
 
	gT
>

817 
uöt64
 
add_èsk_by_vÆue
 (

818 c⁄° 
T
& 
obj
,

819 (
T
::*
fun˘
)() const

822 
uöt64
 
add_èsk
 (

823 (*
fun˘
)()

828 
	g¥iv©e
:

831 
thªad_poﬁ
(thread_pool&);

832 
	gthªad_poﬁ
& 
	g›î©‹
=(
thªad_poﬁ
&);

	@viper/concurrentqueue-src/benchmarks/dlib/threads/thread_specific_data_extension.h

3 #i‚de‡
DLIB_THREAD_SPECIFIC_DATA_EXTENSIOn_


4 
	#DLIB_THREAD_SPECIFIC_DATA_EXTENSIOn_


	)

6 
	~"thªad_•ecific_d©a_exãnsi⁄_ab°ø˘.h
"

7 
	~"thªads_kî√l_ab°ø˘.h
"

8 
	~"../bö¨y_£¨ch_åì.h
"

9 
	~"auto_muãx_exãnsi⁄.h
"

11 
«me•a˚
 
	gdlib


16 
	gãm∂©e
 <

17 
ty≥«me
 
	gT


19 ˛as†
	cthªad_•ecific_d©a


26 
	gpublic
:

28 
thªad_•ecific_d©a
 (

31 
thªad_íd_h™dÀr_ˇŒs_À·
 = 0;

34 ~
thªad_•ecific_d©a
 (

41 
boﬁ
 
	gˇŒ_uƒegi°î
 = 
Ál£
;

42 
	gm
.
lock
();

43 i‡(
	gthªad_íd_h™dÀr_ˇŒs_À·
 > 0)

44 
	gˇŒ_uƒegi°î
 = 
åue
;

45 
	gm
.
u∆ock
();

47 i‡(
	gˇŒ_uƒegi°î
)

48 
uƒegi°î_thªad_íd_h™dÀr
(
c⁄°_ˇ°
<
thªad_•ecific_d©a
&>(*
this
),&thªad_•ecific_d©a::
thªad_íd_h™dÀr
);

50 
auto_muãx
 
M
(
m
);

51 
	gôems
.
ª£t
();

52 
	gôems
.
move_√xt
())

54 
dñëe
 
	gôems
.
ñemít
().
vÆue
();

58 
ölöe
 
	gT
& 
d©a
 (

59 Ë{  
gë_d©a
(); }

61 
ölöe
 c⁄° 
	gT
& 
d©a
 (

62 Ëc⁄° {  
gë_d©a
(); }

64 
	g¥iv©e
:

66 
T
& 
gë_d©a
 (

69 
thªad_id_ty≥
 
id
 = 
gë_thªad_id
();

70 
auto_muãx
 
M
(
m
);

72 
T
** 
	gôem
 = 
ôems
[
id
];

73 i‡(
	gôem
)

75  **
	gôem
;

80 
T
* 
	g√w_ôem
 = 
√w
 T;

82 
boﬁ
 
	gö_åì
 = 
Ál£
;

83 
	gåy


85 
T
* 
	gãmp_ôem
 = 
√w_ôem
;

86 
thªad_id_ty≥
 
	gãmp_id
 = 
id
;

87 
	gôems
.
add
(
ãmp_id
,
ãmp_ôem
);

88 
	gö_åì
 = 
åue
;

90 i‡(
is_dlib_thªad
(
id
))

92 
ªgi°î_thªad_íd_h™dÀr
(
c⁄°_ˇ°
<
thªad_•ecific_d©a
&>(*
this
),&thªad_•ecific_d©a::
thªad_íd_h™dÀr
);

93 ++
	gthªad_íd_h™dÀr_ˇŒs_À·
;

96 
ˇtch
 (...)

98 i‡(
	gö_åì
)

100 
	gôems
.
de°roy
(
id
);

102 
dñëe
 
	g√w_ôem
;

103 
	gthrow
;

106  *
	g√w_ôem
;

110 
thªad_íd_h™dÀr
 (

113 c⁄° 
thªad_id_ty≥
 
	gid
 = 
gë_thªad_id
();

114 
thªad_id_ty≥
 
	gjunk
 = 0;

115 
T
* 
	gôem
 = 0;

116 
auto_muãx
 
M
(
m
);

117 --
	gthªad_íd_h™dÀr_ˇŒs_À·
;

118 i‡(
	gôems
[
id
])

120 
	gôems
.
ªmove
(
id
,
junk
,
ôem
);

121 
dñëe
 
	gôem
;

125 
muèbÀ
 
ty≥«me
 
	gbö¨y_£¨ch_åì
<
	gthªad_id_ty≥
,
	gT
*>::
kî√l_2a
 
ôems
;

126 
muãx
 
	gm
;

127 
muèbÀ
 
	gthªad_íd_h™dÀr_ˇŒs_À·
;

130 
thªad_•ecific_d©a
(thread_specific_data&);

131 
	gthªad_•ecific_d©a
& 
	g›î©‹
=(
thªad_•ecific_d©a
&);

	@viper/concurrentqueue-src/benchmarks/dlib/threads/thread_specific_data_extension_abstract.h

3 #unde‡
DLIB_THREAD_SPECIFIC_DATA_EXTENSIOn_ABSTRACT_


4 #ifde‡
DLIB_THREAD_SPECIFIC_DATA_EXTENSIOn_ABSTRACT_


6 
	~"thªads_kî√l_ab°ø˘.h
"

8 
«me•a˚
 
	gdlib


13 
	gãm∂©e
 <

14 
ty≥«me
 
	gT


16 ˛as†
	cthªad_•ecific_d©a


28 
	gpublic
:

30 
thªad_•ecific_d©a
 (

37 ~
thªad_•ecific_d©a
 (

45 
	gT
& 
d©a
 (

60 c⁄° 
	gT
& 
d©a
 (

75 
	g¥iv©e
:

77 
thªad_•ecific_d©a
(thread_specific_data&);

78 
	gthªad_•ecific_d©a
& 
	g›î©‹
=(
thªad_•ecific_d©a
&);

	@viper/concurrentqueue-src/benchmarks/dlib/threads/threaded_object_extension.h

3 #i‚de‡
DLIB_THREADED_OBJECT_EXTENSIOn_


4 
	#DLIB_THREADED_OBJECT_EXTENSIOn_


	)

6 
	~"thªaded_obje˘_exãnsi⁄_ab°ø˘.h
"

7 
	~"thªads_kî√l.h
"

8 
	~"auto_muãx_exãnsi⁄.h
"

9 
	~"../Ægs.h
"

10 
	~"../as£π.h
"

12 
«me•a˚
 
	gdlib


17 ˛as†
	cthªaded_obje˘


51 
	gpublic
:

53 
thªaded_obje˘
 (

56 
	gvútuÆ
 ~
thªaded_obje˘
 (

59 
boﬁ
 
is_ru¬ög
 (

62 
boﬁ
 
is_Æive
 (

65 
waô
 (

68 
°¨t
 (

71 
ª°¨t
 (

74 
£t_ª•awn
 (

77 
boﬁ
 
should_ª•awn
 (

80 
∑u£
 (

83 
°›
 (

86 
	g¥Ÿe˘ed
:

88 
boﬁ
 
should_°›
 (

91 
	g¥iv©e
:

93 
thªad_hñ≥r
(

96 
vútuÆ
 
thªad
 (

99 
muãx
 
	gm_
;

100 
sig«Àr
 
	gs
;

101 
thªad_id_ty≥
 
	gid1
;

102 
boﬁ
 
	gis_ru¬ög_
;

103 
boﬁ
 
	gis_Æive_
;

104 
boﬁ
 
	gshould_°›_
;

105 
boﬁ
 
	gshould_ª•awn_
;

106 
boﬁ
 
	gid_vÆid
;

109 
thªaded_obje˘
(threaded_object&);

110 
	gthªaded_obje˘
& 
	g›î©‹
=(
thªaded_obje˘
&);

117 #ifde‡
NO_MAKEFILE


118 
	~"thªaded_obje˘_exãnsi⁄.˝p
"

	@viper/concurrentqueue-src/benchmarks/dlib/threads/threaded_object_extension_abstract.h

3 #unde‡
DLIB_THREADED_OBJECT_EXTENSIOn_ABSTRACT_


4 #ifde‡
DLIB_THREADED_OBJECT_EXTENSIOn_ABSTRACT_


6 
	~"thªads_kî√l_ab°ø˘.h
"

8 
«me•a˚
 
	gdlib


13 ˛as†
	cthªaded_obje˘


26 
	gpublic
:

28 
thªaded_obje˘
 (

40 
	gvútuÆ
 ~
thªaded_obje˘
 (

51 
boﬁ
 
is_ru¬ög
 (

63 
boﬁ
 
is_Æive
 (

75 
waô
 (

85 
°¨t
 (

100 
£t_ª•awn
 (

109 
boﬁ
 
should_ª•awn
 (

121 
ª°¨t
 (

142 
∑u£
 (

151 
°›
 (

162 
	g¥Ÿe˘ed
:

164 
boﬁ
 
should_°›
 (

177 
	g¥iv©e
:

179 
vútuÆ
 
thªad
 (

190 
thªaded_obje˘
(threaded_object&);

191 
	gthªaded_obje˘
& 
	g›î©‹
=(
thªaded_obje˘
&);

	@viper/concurrentqueue-src/benchmarks/dlib/threads/threads_kernel.h

3 #i‚de‡
DLIB_THREADs_KERNEL_


4 
	#DLIB_THREADs_KERNEL_


	)

6 
	~"../∂©f‹m.h
"

8 #ifde‡
WIN32


9 
	~"wödows.h
"

12 #i‚de‡
WIN32


13 
	~"posix.h
"

	@viper/concurrentqueue-src/benchmarks/dlib/threads/threads_kernel_1.h

3 #i‚de‡
DLIB_THREADS_KERNEl_1_


4 
	#DLIB_THREADS_KERNEl_1_


	)

6 #ifde‡
DLIB_ISO_CPP_ONLY


10 
	~"thªads_kî√l_ab°ø˘.h
"

12 
	~"../wödows_magic.h
"

13 
	~<wödows.h
>

14 
	~"../Ægs.h
"

15 
	~<c⁄dôi⁄_v¨übÀ
>

16 
	~<muãx
>

17 
	~<chr⁄o
>

20 
«me•a˚
 
	gdlib


25 
DWORD
 
	tthªad_id_ty≥
;

27 
ölöe
 
thªad_id_ty≥
 
gë_thªad_id
 (

30  
GëCuºítThªadId
();

40 
˛ass
 
	gsig«Àr
;

42 ˛as†
	cmuãx


44 
	gpublic
:

46 
muãx
 (

51 ~
muãx
 (

54 
lock
 (

55 Ëc⁄° { 
cs
.
lock
(); }

57 
u∆ock
 (

58 Ëc⁄° { 
	gcs
.
u∆ock
(); }

60 
	g¥iv©e
:

62 
‰õnd
 
˛ass
 
sig«Àr
;

64 
muèbÀ
 
	g°d
::
muãx
 
cs
;

67 
muãx
(mutex&);

68 
	gmuãx
& 
	g›î©‹
=(
muãx
&);

77 ˛as†
	csig«Àr


80 
	gpublic
:

81 
sig«Àr
 (

82 c⁄° 
muãx
& 
assocüãd_muãx


84 
m
(
assocüãd_muãx
)

89 ~
sig«Àr
 (

92 
waô
 (

95 
°d
::
unique_lock
<°d::
muãx
> 
cs
(
m
.cs, std::
de„r_lock
);

96 
	gcv
.
waô
(
cs
);

99 
boﬁ
 
waô_‹_timeout
 (

100 
mûli£c⁄ds


103 
	g°d
::
unique_lock
<
°d
::
muãx
> 
cs
(
m
.cs, std::
de„r_lock
);

104 autÿ
	g°©us
 = 
cv
.
waô_u¡û
(
cs
, 
°d
::
chr⁄o
::
sy°em_˛ock
::
now
(Ë+ std::chr⁄o::
mûli£c⁄ds
(milliseconds));

105  
	g°©us
 =
°d
::
cv_°©us
::
no_timeout
;

108 
sig«l
 (

111 
	gcv
.
nŸify_⁄e
();

114 
brﬂdˇ°
 (

117 
	gcv
.
nŸify_Æl
();

120 c⁄° 
	gmuãx
& 
gë_muãx
 (

121 Ëc⁄° {  
	gm
; }

123 
	g¥iv©e
:

125 
muèbÀ
 
°d
::
c⁄dôi⁄_v¨übÀ
 
cv
;

127 c⁄° 
	gmuãx
& 
	gm
;

130 
sig«Àr
(signaler&);

131 
	gsig«Àr
& 
	g›î©‹
=(
sig«Àr
&);

136 
«me•a˚
 
	gthªads_kî√l_sh¨ed_hñ≥rs


138 
boﬁ
 
•awn_thªad
 (

139 (*
fun˘
)(*),

140 * 
∑øm


151 
	~"thªads_kî√l_sh¨ed.h
"

153 #ifde‡
NO_MAKEFILE


154 
	~"thªads_kî√l_1.˝p
"

	@viper/concurrentqueue-src/benchmarks/dlib/threads/threads_kernel_2.h

3 #i‚de‡
DLIB_THREADS_KERNEl_2_


4 
	#DLIB_THREADS_KERNEl_2_


	)

6 #ifde‡
DLIB_ISO_CPP_ONLY


10 
	~"thªads_kî√l_ab°ø˘.h
"

11 
	~<±hªad.h
>

12 
	~<î∫o.h
>

13 
	~<sys/time.h
>

14 
	~"../Ægs.h
"

16 
«me•a˚
 
	gdlib


21 
±hªad_t
 
	tthªad_id_ty≥
;

23 
ölöe
 
thªad_id_ty≥
 
gë_thªad_id
 (

26  
±hªad_£lf
();

36 
˛ass
 
	gsig«Àr
;

38 ˛as†
	cmuãx


41 
‰õnd
 
˛ass
 
	gsig«Àr
;

42 
	gpublic
:

44 
muãx
 (

47 i‡(
±hªad_muãx_öô
(&
myMuãx
,0))

49 
throw
 
	gdlib
::
thªad_îr‹
(
ECREATE_MUTEX
,

55 ~
muãx
 (

56 Ë{ 
±hªad_muãx_de°roy
(&
myMuãx
); }

58 
lock
 (

59 Ëc⁄° { 
±hªad_muãx_lock
(&
myMuãx
); }

61 
u∆ock
 (

62 Ëc⁄° { 
±hªad_muãx_u∆ock
(&
myMuãx
); }

64 
	g¥iv©e
:

66 
muèbÀ
 
±hªad_muãx_t
 
myMuãx
;

69 
muãx
(mutex&);

70 
	gmuãx
& 
	g›î©‹
=(
muãx
&);

79 ˛as†
	csig«Àr


82 
	gpublic
:

85 
sig«Àr
 (

86 c⁄° 
muãx
& 
assoc_muãx


88 
assocüãd_muãx
(&
assoc_muãx
.
myMuãx
),

89 
m
(
assoc_muãx
)

91 i‡(
±hªad_c⁄d_öô
(&
c⁄d
,0))

93 
throw
 
	gdlib
::
thªad_îr‹
(
ECREATE_SIGNALER
,

99 ~
sig«Àr
 (

100 Ë{ 
±hªad_c⁄d_de°roy
(&
c⁄d
); }

102 
waô
 (

105 
±hªad_c⁄d_waô
(&
c⁄d
,
assocüãd_muãx
);

108 
boﬁ
 
waô_‹_timeout
 (

109 
mûli£c⁄ds


112 
time•ec
 
	gtime_to_waô
;

114 
timevÆ
 
	gcuπime
;

115 
gëtimeofday
(&
cuπime
,0);

118 
	gtime_to_waô
.
	gtv_£c
 = 
mûli£c⁄ds
/1000 + 
cuπime
.
tv_£c
;

119 
	gtime_to_waô
.
	gtv_n£c
 = 
cuπime
.
tv_u£c
;

120 
	gtime_to_waô
.
	gtv_n£c
 *= 1000;

121 
	gtime_to_waô
.
	gtv_n£c
 +(
mûli£c⁄ds
%1000)*1000000;

123 
	gtime_to_waô
.
	gtv_£c
 +
time_to_waô
.
tv_n£c
/1000000000;

124 
	gtime_to_waô
.
	gtv_n£c
 = 
time_to_waô
.
tv_n£c
%1000000000;

126 i‡–
±hªad_c⁄d_timedwaô
(&
c⁄d
,
assocüãd_muãx
,&
time_to_waô
Ë=
ETIMEDOUT
)

128  
Ál£
;

132  
	gåue
;

136 
sig«l
 (

137 Ëc⁄° { 
±hªad_c⁄d_sig«l
(&
c⁄d
); }

139 
brﬂdˇ°
 (

140 Ëc⁄° { 
±hªad_c⁄d_brﬂdˇ°
(&
c⁄d
); }

142 c⁄° 
	gmuãx
& 
gë_muãx
 (

143 Ëc⁄° {  
	gm
; }

145 
	g¥iv©e
:

147 
±hªad_muãx_t
* c⁄° 
assocüãd_muãx
;

148 
muèbÀ
 
±hªad_c⁄d_t
 
	gc⁄d
;

149 c⁄° 
	gmuãx
& 
	gm
;

152 
sig«Àr
(signaler&);

153 
	gsig«Àr
& 
	g›î©‹
=(
sig«Àr
&);

158 
«me•a˚
 
	gthªads_kî√l_sh¨ed_hñ≥rs


160 
boﬁ
 
•awn_thªad
 (

161 (*
fun˘
)(*),

162 * 
∑øm


173 
	~"thªads_kî√l_sh¨ed.h
"

175 #ifde‡
NO_MAKEFILE


176 
	~"thªads_kî√l_2.˝p
"

	@viper/concurrentqueue-src/benchmarks/dlib/threads/threads_kernel_abstract.h

3 #unde‡
DLIB_THREADS_KERNEl_ABSTRACT_


4 #ifde‡
DLIB_THREADS_KERNEl_ABSTRACT_


6 
«me•a˚
 
	gdlib


34 
thªad_id_ty≥
 
gë_thªad_id
 (

45 
boﬁ
 
is_dlib_thªad
 (

46 
thªad_id_ty≥
 
id
 = 
gë_thªad_id
()

59 
	gãm∂©e
 <

60 
ty≥«me
 
	gT


62 
ªgi°î_thªad_íd_h™dÀr
 (

63 
T
& 
obj
,

64 (
T
::*
h™dÀr
)()

90 
	gãm∂©e
 <

91 
ty≥«me
 
	gT


93 
uƒegi°î_thªad_íd_h™dÀr
 (

94 
T
& 
obj
,

95 (
T
::*
h™dÀr
)()

110 
boﬁ
 
¸óã_√w_thªad
 (

111 (*
fun˘
)(*),

112 * 
∑øm


127 ˛as†
	cmuãx


139 
	gpublic
:

141 
muãx
 (

152 ~
muãx
 (

161 
lock
 (

175 
u∆ock
 (

185 
	g¥iv©e
:

187 
muãx
(mutex&);

188 
	gmuãx
& 
	g›î©‹
=(
muãx
&);

197 ˛as†
	csig«Àr


215 
	gpublic
:

217 
sig«Àr
 (

218 c⁄° 
muãx
& 
assocüãd_muãx


231 ~
sig«Àr
 (

238 
waô
 (

250 
boﬁ
 
waô_‹_timeout
 (

251 
mûli£c⁄ds


269 
sig«l
 (

277 
brﬂdˇ°
 (

284 c⁄° 
	gmuãx
& 
gë_muãx
 (

291 
	g¥iv©e
:

293 
sig«Àr
(signaler&);

294 
	gsig«Àr
& 
	g›î©‹
=(
sig«Àr
&);

	@viper/concurrentqueue-src/benchmarks/dlib/threads/threads_kernel_shared.h

3 #i‚de‡
DLIB_THREADS_KERNEl_SHARED_


4 
	#DLIB_THREADS_KERNEl_SHARED_


	)

9 
	~"auto_muãx_exãnsi⁄.h
"

10 
	~"../bö¨y_£¨ch_åì.h
"

11 
	~"../membî_fun˘i⁄_poöãr.h
"

12 
	~"../mem‹y_m™agî.h
"

13 
	~"../queue.h
"

14 
	~"../£t.h
"

15 
	~"../ã°_f‹_odr_viﬁ©i⁄s.h
"

21 
«me•a˚
 
	gdlib


27 
«me•a˚
 
	gthªads_kî√l_sh¨ed


29 
thªad_°¨ãr
 (

33 ˛as†
	cthªadî


72 
	gpublic
:

73 
thªadî
 (

76 ~
thªadî
 (

79 
de°ru˘_if_ªady
 (

89 
boﬁ
 
¸óã_√w_thªad
 (

90 (*
fun˘
)(*),

91 * 
∑øm


94 
	gãm∂©e
 <

95 
ty≥«me
 
	gT


97 
uƒegi°î_thªad_íd_h™dÀr
 (

98 
T
& 
obj
,

99 (
T
::*
h™dÀr
)()

102 
membî_fun˘i⁄_poöãr
<> 
mÂ
, 
	gjunk_mÂ
;

103 
	gmÂ
.
£t
(
obj
,
h™dÀr
);

105 
thªad_id_ty≥
 
	gjunk_id
;

109 
auto_muãx
 
M
(
ªg
.
m
);

110 
	gªg
.ªg.
ª£t
();

111 
	gªg
.ªg.
move_√xt
())

113 
	gªg
.ªg.
cuºít_ñemít_vÆid
(Ë&&Ñeg.ªg.
ñemít
().
vÆue
(Ë=
mÂ
)

115 
ªg
.ªg.
ªmove_cuºít_ñemít
(
junk_id
, 
junk_mÂ
);

120 
	gãm∂©e
 <

121 
ty≥«me
 
	gT


123 
ªgi°î_thªad_íd_h™dÀr
 (

124 
T
& 
obj
,

125 (
T
::*
h™dÀr
)()

128 
thªad_id_ty≥
 
id
 = 
gë_thªad_id
();

129 
	gmembî_fun˘i⁄_poöãr
<> 
	gmÂ
;

130 
	gmÂ
.
£t
(
obj
,
h™dÀr
);

132 
auto_muãx
 
M
(
ªg
.
m
);

133 
	gªg
.ªg.
add
(
id
,
mÂ
);

136 
boﬁ
 
is_dlib_thªad
 (

137 
thªad_id_ty≥
 
id


140 
	g¥iv©e
:

142 
‰õnd
 
thªad_°¨ãr
 (

146 
ˇŒ_íd_h™dÀrs
 (

156 
	g£t
<
	gthªad_id_ty≥
,
	gmem‹y_m™agî
<>::
kî√l_2b
>::
kî√l_1b_c
 
thªad_ids
;

157 
	gtŸÆ_cou¡
;

158 * 
	g∑ømëî
;

159 (*
	gfun˘i⁄_poöãr
)(*);

160 
	gpoﬁ_cou¡
;

161 
muãx
 
	gd©a_muãx
;

162 
sig«Àr
 
	gd©a_ªady
;

163 
sig«Àr
 
	gd©a_em±y
;

164 
boﬁ
 
	gde°ru˘
;

165 
sig«Àr
 
	gde°ru˘ed
;

166 
boﬁ
 
	gdo_nŸ_evî_de°ru˘
;

168 
	sªgi°ry_ty≥


170 
muãx
 
	gm
;

171 
	gbö¨y_£¨ch_åì
<

172 
	gthªad_id_ty≥
,

173 
	gmembî_fun˘i⁄_poöãr
<>,

174 
	gmem‹y_m™agî
<>::
kî√l_2a


175 >::
kî√l_2a_c
 
ªg
;

179 
ªgi°ry_ty≥
 
	gªg
;

183 
thªadî
(threader&);

184 
	gthªadî
& 
	g›î©‹
=(
thªadî
&);

190 
	gthªadî
& 
thªad_poﬁ
 (

199 
boﬁ
 
thªad_poﬁ_has_bìn_de°royed
;

202 
boﬁ
 
is_dlib_thªad
 (

203 
thªad_id_ty≥
 
id


206 
boﬁ
 
is_dlib_thªad
 (

211 
ölöe
 
boﬁ
 
	$¸óã_√w_thªad
 (

212 (*
fun˘
)(*),

213 * 
∑øm


216 
åy


219  
thªads_kî√l_sh¨ed
::
	`thªad_poﬁ
().
	`¸óã_√w_thªad
(
fun˘
,
∑øm
);

221 
	`ˇtch
 (
°d
::
bad_Æloc
&)

223  
Ál£
;

225 
	}
}

229 
	gãm∂©e
 <

230 
ty≥«me
 
	gT


232 
ölöe
 
ªgi°î_thªad_íd_h™dÀr
 (

233 
T
& 
obj
,

234 (
T
::*
h™dÀr
)()

237 
	`DLIB_ASSERT
(
	`is_dlib_thªad
(),

242 
thªads_kî√l_sh¨ed
::
	`thªad_poﬁ
().
	`ªgi°î_thªad_íd_h™dÀr
(
obj
,
h™dÀr
);

243 
	}
}

247 
	gãm∂©e
 <

248 
ty≥«me
 
	gT


250 
ölöe
 
uƒegi°î_thªad_íd_h™dÀr
 (

251 
T
& 
obj
,

252 (
T
::*
h™dÀr
)()

261 i‡(
thªads_kî√l_sh¨ed
::
thªad_poﬁ_has_bìn_de°royed
 =
Ál£
)

262 
thªads_kî√l_sh¨ed
::
	`thªad_poﬁ
().
	`uƒegi°î_thªad_íd_h™dÀr
(
obj
,
h™dÀr
);

263 
	}
}

269 #ifde‡
NO_MAKEFILE


270 
	~"thªads_kî√l_sh¨ed.˝p
"

	@viper/concurrentqueue-src/benchmarks/dlib/threads/windows.h

3 #i‚de‡
DLIB_THREADS_KERNEl_2_


4 
	~"thªads_kî√l_1.h
"

	@viper/concurrentqueue-src/benchmarks/dlib/time_this.h

3 #i‚de‡
DLIB_TIME_THIs_


4 
	#DLIB_TIME_THIs_


	)

7 
	~<chr⁄o
>

11 
	#TIME_THIS_TO
(
_â_›
,
_â_out
) \

13 autÿ
_â_°¨t
 = 
°d
::
chr⁄o
::
high_ªsﬁuti⁄_˛ock
::
	`now
(); \

14 {
_â_›
;} \

15 autÿ
_â_°›
 = 
°d
::
chr⁄o
::
high_ªsﬁuti⁄_˛ock
::
	`now
(); \

16 autÿ
_â_thëime
 = 
_â_°›
-
_â_°¨t
; \

17 
usög
 
°d
::
chr⁄o
::
duøti⁄_ˇ°
; \

18 
usög
 
°d
::
chr⁄o
::
duøti⁄
; \

19 i‡(
_â_thëime
 >
°d
::
chr⁄o
::
	`möuãs
(1)) \

20 
_â_out
 << "\¡ime: " << 
duøti⁄_ˇ°
<
duøti⁄
<,
°d
::
øtio
<60>>>(
_â_thëime
).
	`cou¡
() << "min\n"; \

21 i‡(
_â_thëime
 >
°d
::
chr⁄o
::
	`£c⁄ds
(1)) \

22 
_â_out
 << "\¡ime: " << 
duøti⁄_ˇ°
<
duøti⁄
<>>(
_â_thëime
).
	`cou¡
() << "sec\n"; \

23 i‡(
_â_thëime
 >
°d
::
chr⁄o
::
	`mûli£c⁄ds
(1)) \

24 
_â_out
 << "\¡ime: " << 
duøti⁄_ˇ°
<
duøti⁄
<,
°d
::
mûli
>>(
_â_thëime
).
	`cou¡
() << "ms\n"; \

25 i‡(
_â_thëime
 >
°d
::
chr⁄o
::
	`mi¸o£c⁄ds
(1)) \

26 
_â_out
 << "\¡ime: " << 
duøti⁄_ˇ°
<
duøti⁄
<,
°d
::
mi¸o
>>(
_â_thëime
).
	`cou¡
() << "us\n"; \

28 
_â_out
 << "\¡ime: " << 
duøti⁄_ˇ°
<
duøti⁄
<,
°d
::
«no
>>(
_â_thëime
).
	`cou¡
() << "ns\n"; \

29 }

	)

31 
	#TIME_THIS
(
_â_›
Ë
	`TIME_THIS_TO
(_â_›,
°d
::
cout
)

	)

	@viper/concurrentqueue-src/benchmarks/dlib/timeout.h

3 #i‚de‡
DLIB_TIMEOUt_


4 
	#DLIB_TIMEOUt_


	)

6 
	~"timeout/timeout.h
"

	@viper/concurrentqueue-src/benchmarks/dlib/timeout/timeout.h

3 #i‚de‡
DLIB_TIMEOUT_KERNEl_1_


4 
	#DLIB_TIMEOUT_KERNEl_1_


	)

6 
	~"../thªads.h
"

7 
	~"../Ægs.h
"

8 
	~"../misc_≠i.h
"

9 
	~"timeout_ab°ø˘.h
"

10 
	~"../uöä.h
"

11 
	~"../timî.h
"

13 #ifde‡
_MSC_VER


18 #¥agm®
w¨nög
(
dißbÀ
 : 4355)

21 
«me•a˚
 
	gdlib


26 ˛as†
	ctimeout


36 ˛as†
	cböd


38 
	gpublic
:

39 
vútuÆ
 
go
() = 0;

40 
	gvútuÆ
 ~
böd
() {}

43 
	gãm∂©e
 <
ty≥«me
 
	gT
>

44 ˛as†
	cfun˘‹
 : 
public
 
böd


46 
public
:

47 
fun˘‹
(c⁄° 
T
& 
f
Ë: 
fun˘i⁄
(f) {}

48 
T
 
fun˘i⁄
;

49 
go
(Ë{ 
fun˘i⁄
(); }

52 
	gãm∂©e
 <
ty≥«me
 
	gT
,Åy≥«mê
	gR
>

53 ˛as†
	czîo
 : 
public
 
böd


55 
public
:

56 
T
* 
obje˘
;

57 
R
 (
T
::*
ˇŒback_fun˘i⁄
)();

58 
go
(Ë{ (
	gobje˘
->*
	gˇŒback_fun˘i⁄
)(); }

62 
	gãm∂©e
 <
ty≥«me
 
	gT
,Åy≥«mê
	gR
,Åy≥«mê
	gU
>

63 ˛as†
	c⁄e
 : 
public
 
böd


65 
public
:

66 
T
* 
obje˘
;

67 
R
 (
T
::*
ˇŒback_fun˘i⁄
)(
U
);

68 
U
 
	gvÆ
;

69 
go
(Ë{ (
	gobje˘
->*
	gˇŒback_fun˘i⁄
)(
	gvÆ
); }

72 
	gpublic
:

75 
timeout
 
	tkî√l_1a
;

77 
	gãm∂©e
 <

78 
ty≥«me
 
	gT


80 
timeout
 (

81 
T
 
ˇŒback_fun˘i⁄
,

82 
ms_to_timeout


84 
t
(*
this
,&
timeout
::
åiggî_timeout
)

86 
b
 = 
√w
 
fun˘‹
<
T
>(
ˇŒback_fun˘i⁄
);

87 
	gt
.
£t_dñay_time
(
ms_to_timeout
);

88 
	gt
.
°¨t
();

91 
	gãm∂©e
 <

92 
ty≥«me
 
	gT


94 
timeout
 (

95 
T
& 
obje˘
,

96 (
T
::*
ˇŒback_fun˘i⁄
)(),

97 
ms_to_timeout


99 
t
(*
this
,&
timeout
::
åiggî_timeout
)

101 
zîo
<
T
,>* 
	gB
 = 
√w
 zero<T,>;

102 
	gb
 = 
B
;

103 
	gB
->
	gobje˘
 = &
obje˘
;

104 
	gB
->
	gˇŒback_fun˘i⁄
 = 
ˇŒback_fun˘i⁄
;

105 
	gt
.
£t_dñay_time
(
ms_to_timeout
);

106 
	gt
.
°¨t
();

109 
	gãm∂©e
 <

110 
ty≥«me
 
	gT
,

111 
ty≥«me
 
	gU


113 
timeout
 (

114 
T
& 
obje˘
,

115 (
T
::*
ˇŒback_fun˘i⁄
)(
U
 
ˇŒback_fun˘i⁄_¨gumít
),

116 
ms_to_timeout
,

117 
U
 
ˇŒback_fun˘i⁄_¨gumít


119 
t
(*
this
,&
timeout
::
åiggî_timeout
)

121 
⁄e
<
T
,,
	gU
>* 
	gB
 = 
√w
 one<T,,U>;

122 
	gb
 = 
B
;

123 
	gB
->
	gobje˘
 = &
obje˘
;

124 
	gB
->
	gˇŒback_fun˘i⁄
 = 
ˇŒback_fun˘i⁄
;

125 
	gB
->
	gvÆ
 = 
ˇŒback_fun˘i⁄_¨gumít
;

126 
	gt
.
£t_dñay_time
(
ms_to_timeout
);

127 
	gt
.
°¨t
();

130 
	gãm∂©e
 <

131 
ty≥«me
 
	gT


133 
timeout
 (

134 
T
& 
obje˘
,

135 (
T
::*
ˇŒback_fun˘i⁄
)(),

136 
ms_to_timeout


138 
t
(*
this
,&
timeout
::
åiggî_timeout
)

140 
zîo
<
T
,>* 
	gB
 = 
√w
 zero<T,>;

141 
	gb
 = 
B
;

142 
	gB
->
	gobje˘
 = &
obje˘
;

143 
	gB
->
	gˇŒback_fun˘i⁄
 = 
ˇŒback_fun˘i⁄
;

144 
	gt
.
£t_dñay_time
(
ms_to_timeout
);

145 
	gt
.
°¨t
();

148 
	gãm∂©e
 <

149 
ty≥«me
 
	gT
,

150 
ty≥«me
 
	gU


152 
timeout
 (

153 
T
& 
obje˘
,

154 (
T
::*
ˇŒback_fun˘i⁄
)(
U
 
ˇŒback_fun˘i⁄_¨gumít
),

155 
ms_to_timeout
,

156 
U
 
ˇŒback_fun˘i⁄_¨gumít


158 
t
(*
this
,&
timeout
::
åiggî_timeout
)

160 
⁄e
<
T
,,
	gU
>* 
	gB
 = 
√w
 one<T,,U>;

161 
	gb
 = 
B
;

162 
	gB
->
	gobje˘
 = &
obje˘
;

163 
	gB
->
	gˇŒback_fun˘i⁄
 = 
ˇŒback_fun˘i⁄
;

164 
	gB
->
	gvÆ
 = 
ˇŒback_fun˘i⁄_¨gumít
;

165 
	gt
.
£t_dñay_time
(
ms_to_timeout
);

166 
	gt
.
°¨t
();

169 
	gvútuÆ
 ~
timeout
 (

172 
	gt
.
°›_™d_waô
();

173 
dñëe
 
	gb
;

176 
	g¥iv©e
:

178 
åiggî_timeout
 ()

180 
b
->
go
();

181 
	gt
.
°›
();

184 
	gdlib
::
timî
<
timeout
> 
t
;

185 
böd
* 
	gb
;

188 
timeout
(constÅimeout&);

189 
	gtimeout
& 
	g›î©‹
=(c⁄° 
timeout
&);

	@viper/concurrentqueue-src/benchmarks/dlib/timeout/timeout_abstract.h

3 #unde‡
DLIB_TIMEOUT_KERNEl_ABSTRACT_


4 #ifde‡
DLIB_TIMEOUT_KERNEl_ABSTRACT_


6 
	~"../thªads.h
"

8 
«me•a˚
 
	gdlib


11 ˛as†
	ctimeout


50 
	gpublic
:

52 
ãm∂©e
 <

53 
ty≥«me
 
T


55 
timeout
 (

56 
T
 
ˇŒback_fun˘i⁄
,

57 
ms_to_timeout


72 
	gãm∂©e
 <

73 
ty≥«me
 
	gT


75 
timeout
 (

76 
T
& 
obje˘
,

77 (
T
::*
ˇŒback_fun˘i⁄
)(),

78 
ms_to_timeout


94 
	gãm∂©e
 <

95 
ty≥«me
 
	gT
,

96 
ty≥«me
 
	gU


98 
timeout
 (

99 
T
& 
obje˘
,

100 (
T
::*
ˇŒback_fun˘i⁄
)(
U
 
ˇŒback_fun˘i⁄_¨gumít
),

101 
ms_to_timeout
,

102 
U
 
ˇŒback_fun˘i⁄_¨gumít


118 
	gãm∂©e
 <

119 
ty≥«me
 
	gT


121 
timeout
 (

122 
T
& 
obje˘
,

123 (
T
::*
ˇŒback_fun˘i⁄
)(),

124 
ms_to_timeout


140 
	gãm∂©e
 <

141 
ty≥«me
 
	gT
,

142 
ty≥«me
 
	gU


144 
timeout
 (

145 
T
& 
obje˘
,

146 (
T
::*
ˇŒback_fun˘i⁄
)(
U
 
ˇŒback_fun˘i⁄_¨gumít
),

147 
ms_to_timeout
,

148 
U
 
ˇŒback_fun˘i⁄_¨gumít


164 
	gvútuÆ
 ~
timeout
 (

176 
	g¥iv©e
:

179 
timeout
(constÅimeout&);

180 
	gtimeout
& 
	g›î©‹
=(c⁄° 
timeout
&);

	@viper/concurrentqueue-src/benchmarks/dlib/timer.h

3 #i‚de‡
DLIB_TIMEr_


4 
	#DLIB_TIMEr_


	)

6 
	~"timî/timî.h
"

7 
	~"timî/timî_hóvy.h
"

	@viper/concurrentqueue-src/benchmarks/dlib/timer/timer.h

3 #i‚de‡
DLIB_TIMEr_Hh_


4 
	#DLIB_TIMEr_Hh_


	)

6 
	~<mem‹y
>

8 
	~"../thªads.h
"

9 
	~"../Ægs.h
"

10 
	~"../misc_≠i.h
"

11 
	~"timî_ab°ø˘.h
"

12 
	~"../uöä.h
"

13 
	~"../bö¨y_£¨ch_åì.h
"

14 
	~"timî_hóvy.h
"

16 
«me•a˚
 
	gdlib


19 
	gtimî_ba£
 : 
public
 
thªaded_obje˘


27 
dñay
;

29 
uöt64
 
	g√xt_time_to_run
;

30 
time°am≥r
 
	gts
;

31 
boﬁ
 
	gru¬ög
;

32 
boﬁ
 
	gö_globÆ_˛ock
;

37 ˛as†
	ctimî_globÆ_˛ock
 : 
¥iv©e
 
thªaded_obje˘


54 
bö¨y_£¨ch_åì
<
	tuöt64
,
	ttimî_ba£
*,
	tmem‹y_m™agî
<>::
	tkî√l_2b
>::
	tkî√l_2a_c
 
	ttime_m≠
;

55 
	gpublic
:

57 ~
timî_globÆ_˛ock
();

59 
add
 (

60 
timî_ba£
* 
r


73 
ªmove
 (

74 
timî_ba£
* 
r


85 
adju°_dñay
 (

86 
timî_ba£
* 
r
,

87 
√w_dñay


98 
muãx
 
	gm
;

100 
‰õnd
 
	g°d
::
sh¨ed_±r
<
timî_globÆ_˛ock
> 
gë_globÆ_˛ock
();

102 
	g¥iv©e
:

103 
timî_globÆ_˛ock
();

105 
time_m≠
 
	gtm
;

106 
sig«Àr
 
	gs
;

107 
boﬁ
 
	gshutdown
;

108 
boﬁ
 
	gru¬ög
;

109 
time°am≥r
 
	gts
;

111 
thªad
();

117 
	g°d
::
sh¨ed_±r
<
timî_globÆ_˛ock
> 
gë_globÆ_˛ock
();

125 
	gãm∂©e
 <

126 
ty≥«me
 
	gT


128 ˛as†
	ctimî
 : 
¥iv©e
 
timî_ba£


153 
public
:

157 
timî_hóvy
<
	tT
> 
	tkî√l_1a
;

158 
timî
 
	tkî√l_2a
;

160 (
	gT
::*
	taf_ty≥
)();

162 
timî
(

163 
T
& 
ao_
,

164 
af_ty≥
 
af_


167 
	gvútuÆ
 ~
timî
(

170 
˛ór
(

173 
af_ty≥
 
a˘i⁄_fun˘i⁄
 (

176 c⁄° 
	gT
& 
a˘i⁄_obje˘
 (

179 
	gT
& 
a˘i⁄_obje˘
 (

182 
boﬁ
 
is_ru¬ög
 (

185 
dñay_time
 (

188 
£t_dñay_time
 (

189 
mûli£c⁄ds


192 
°¨t
 (

195 
°›
 (

198 
°›_™d_waô
 (

201 
	g¥iv©e
:

203 
thªad
 (

211 
	gT
& 
	gao
;

212 c⁄° 
af_ty≥
 
	gaf
;

213 
	g°d
::
sh¨ed_±r
<
timî_globÆ_˛ock
> 
gc
;

216 
timî
(constÅimer&);

217 
	gtimî
& 
	g›î©‹
=(c⁄° 
timî
&);

227 
	gãm∂©e
 <

228 
ty≥«me
 
	gT


230 
	gtimî
<
	gT
>::

231 
	$timî
(

232 
T
& 
ao_
,

233 
af_ty≥
 
af_


235 
	`ao
(
ao_
),

236 
	`af
(
af_
),

237 
	`gc
(
	$gë_globÆ_˛ock
())

239 
dñay
 = 1000;

240 
√xt_time_to_run
 = 0;

241 
ru¬ög
 = 
Ál£
;

242 
ö_globÆ_˛ock
 = 
Ál£
;

243 
	}
}

247 
	gãm∂©e
 <

248 
ty≥«me
 
	gT


250 
	gtimî
<
	gT
>::

251 ~
	$timî
(

254 
	`˛ór
();

255 
	`waô
();

256 
	}
}

260 
	gãm∂©e
 <

261 
ty≥«me
 
	gT


263 
	gtimî
<
	gT
>::

264 
	$˛ór
(

267 
auto_muãx
 
	`M
(
gc
->
m
);

268 
ru¬ög
 = 
Ál£
;

269 
gc
->
	`ªmove
(
this
);

270 
dñay
 = 1000;

271 
√xt_time_to_run
 = 0;

272 
	}
}

276 
	gãm∂©e
 <

277 
ty≥«me
 
	gT


279 
ty≥«me
 
	gtimî
<
	gT
>::
af_ty≥
 
timî
<
T
>::

280 
	$a˘i⁄_fun˘i⁄
 (

283  
af
;

284 
	}
}

288 
	gãm∂©e
 <

289 
ty≥«me
 
	gT


291 c⁄° 
	gT
& 
	gtimî
<T>::

292 
	$a˘i⁄_obje˘
 (

295  
ao
;

296 
	}
}

300 
	gãm∂©e
 <

301 
ty≥«me
 
	gT


303 
	gT
& 
	gtimî
<T>::

304 
	$a˘i⁄_obje˘
 (

307  
ao
;

308 
	}
}

312 
	gãm∂©e
 <

313 
ty≥«me
 
	gT


315 
boﬁ
 
	gtimî
<
	gT
>::

316 
	$is_ru¬ög
 (

319 
auto_muãx
 
	`M
(
gc
->
m
);

320  
ru¬ög
;

321 
	}
}

325 
	gãm∂©e
 <

326 
ty≥«me
 
	gT


328 
	gtimî
<
	gT
>::

329 
	$dñay_time
 (

332 
auto_muãx
 
	`M
(
gc
->
m
);

333  
dñay
;

334 
	}
}

338 
	gãm∂©e
 <

339 
ty≥«me
 
	gT


341 
	gtimî
<
	gT
>::

342 
	$£t_dñay_time
 (

343 
mûli£c⁄ds


346 
auto_muãx
 
	`M
(
gc
->
m
);

347 
gc
->
	`adju°_dñay
(
this
,
mûli£c⁄ds
);

348 
	}
}

352 
	gãm∂©e
 <

353 
ty≥«me
 
	gT


355 
	gtimî
<
	gT
>::

356 
	$°¨t
 (

359 
auto_muãx
 
	`M
(
gc
->
m
);

360 i‡(!
ru¬ög
)

362 
gc
->
	`add
(
this
);

363 
ru¬ög
 = 
åue
;

365 
	}
}

369 
	gãm∂©e
 <

370 
ty≥«me
 
	gT


372 
	gtimî
<
	gT
>::

373 
	$°›
 (

376 
gc
->
m
.
	`lock
();

377 
ru¬ög
 = 
Ál£
;

378 
gc
->
	`ªmove
(
this
);

379 
gc
->
m
.
	`u∆ock
();

380 
	}
}

384 
	gãm∂©e
 <

385 
ty≥«me
 
	gT


387 
	gtimî
<
	gT
>::

388 
	$thªad
 (

392 (
ao
.*
af
)();

393 
auto_muãx
 
	`M
(
gc
->
m
);

394 i‡(
ru¬ög
)

396 
gc
->
	`ªmove
(
this
);

397 
gc
->
	`add
(
this
);

399 
	}
}

403 
	gãm∂©e
 <

404 
ty≥«me
 
	gT


406 
	gtimî
<
	gT
>::

407 
	$°›_™d_waô
 (

410 
gc
->
m
.
	`lock
();

411 
ru¬ög
 = 
Ál£
;

412 
gc
->
	`ªmove
(
this
);

413 
gc
->
m
.
	`u∆ock
();

414 
	`waô
();

415 
	}
}

421 #ifde‡
NO_MAKEFILE


422 
	~"timî.˝p
"

	@viper/concurrentqueue-src/benchmarks/dlib/timer/timer_abstract.h

3 #unde‡
DLIB_TIMER_KERNEl_ABSTRACT_


4 #ifde‡
DLIB_TIMER_KERNEl_ABSTRACT_


6 
	~"../thªads.h
"

8 
«me•a˚
 
	gdlib


11 
	gãm∂©e
 <

12 
ty≥«me
 
	gT


14 ˛as†
	ctimî


37 
	gpublic
:

39 (
T
::*
	taf_ty≥
)();

41 
timî
 (

42 
T
& 
ao
,

43 
af_ty≥
 
af


59 
	gvútuÆ
 ~
timî
 (

71 
˛ór
(

83 
af_ty≥
 
a˘i⁄_fun˘i⁄
 (

92 c⁄° 
	gT
& 
a˘i⁄_obje˘
 (

101 
	gT
& 
a˘i⁄_obje˘
 (

110 
boﬁ
 
is_ru¬ög
 (

121 
dñay_time
 (

131 
£t_dñay_time
 (

132 
mûli£c⁄ds


144 
°¨t
 (

162 
°›
 (

170 
°›_™d_waô
 (

179 
	g¥iv©e
:

182 
timî
(c⁄°Åimî<
T
>&);

183 
	gtimî
<
	gT
>& 
	g›î©‹
=(c⁄° 
timî
<
T
>&);

	@viper/concurrentqueue-src/benchmarks/dlib/timer/timer_heavy.h

3 #i‚de‡
DLIB_TIMER_KERNEl_1_


4 
	#DLIB_TIMER_KERNEl_1_


	)

6 
	~"../thªads.h
"

7 
	~"../Ægs.h
"

8 
	~"../misc_≠i.h
"

9 
	~"timî_ab°ø˘.h
"

11 
«me•a˚
 
	gdlib


14 
	gãm∂©e
 <

15 
ty≥«me
 
	gT


17 ˛as†
	ctimî_hóvy


57 
	gpublic
:

59 (
T
::*
	taf_ty≥
)();

61 
timî_hóvy
(

62 
T
& 
ao_
,

63 
af_ty≥
 
af_


66 
	gvútuÆ
 ~
timî_hóvy
(

69 
˛ór
(

72 
af_ty≥
 
a˘i⁄_fun˘i⁄
 (

75 c⁄° 
	gT
& 
a˘i⁄_obje˘
 (

78 
	gT
& 
a˘i⁄_obje˘
 (

81 
boﬁ
 
is_ru¬ög
 (

84 
dñay_time
 (

87 
£t_dñay_time
 (

88 
mûli£c⁄ds


91 
°¨t
 (

94 
°›
 (

97 
°›_™d_waô
 (

100 
	g¥iv©e
:

102 
thªad
 (

113 
	gT
& 
	gao
;

114 c⁄° 
af_ty≥
 
	gaf
;

115 
	gdñay
;

116 
muãx
 
	gm
;

117 
sig«Àr
 
	gs
;

119 
boﬁ
 
	gru¬ög
;

120 
boﬁ
 
	g°›_ru¬ög
;

121 
time°am≥r
 
	gts
;

122 
uöt64
 
	g√xt_time_to_run
;

125 
timî_hóvy
(c⁄°Åimî_hóvy<
T
>&);

126 
	gtimî_hóvy
<
	gT
>& 
	g›î©‹
=(c⁄° 
timî_hóvy
<
T
>&);

136 
	gãm∂©e
 <

137 
ty≥«me
 
	gT


139 
	gtimî_hóvy
<
	gT
>::

140 
	$timî_hóvy
(

141 
T
& 
ao_
,

142 
af_ty≥
 
af_


144 
	`ao
(
ao_
),

145 
	`af
(
af_
),

146 
	`dñay
(1000),

147 
	`s
(
m
),

148 
	`ru¬ög
(
Ál£
),

149 
	$°›_ru¬ög
(
Ál£
)

151 
	}
}

155 
	gãm∂©e
 <

156 
ty≥«me
 
	gT


158 
	gtimî_hóvy
<
	gT
>::

159 ~
	$timî_hóvy
(

162 
	`°›_™d_waô
();

163 
	}
}

167 
	gãm∂©e
 <

168 
ty≥«me
 
	gT


170 
	gtimî_hóvy
<
	gT
>::

171 
	$˛ór
(

174 
m
.
	`lock
();

175 
°›_ru¬ög
 = 
åue
;

176 
dñay
 = 1000;

177 
s
.
	`brﬂdˇ°
();

178 
m
.
	`u∆ock
();

179 
	}
}

183 
	gãm∂©e
 <

184 
ty≥«me
 
	gT


186 
ty≥«me
 
	gtimî_hóvy
<
	gT
>::
af_ty≥
 
timî_hóvy
<
T
>::

187 
	$a˘i⁄_fun˘i⁄
 (

190  
af
;

191 
	}
}

195 
	gãm∂©e
 <

196 
ty≥«me
 
	gT


198 c⁄° 
	gT
& 
	gtimî_hóvy
<T>::

199 
	$a˘i⁄_obje˘
 (

202  
ao
;

203 
	}
}

207 
	gãm∂©e
 <

208 
ty≥«me
 
	gT


210 
	gT
& 
	gtimî_hóvy
<T>::

211 
	$a˘i⁄_obje˘
 (

214  
ao
;

215 
	}
}

219 
	gãm∂©e
 <

220 
ty≥«me
 
	gT


222 
boﬁ
 
	gtimî_hóvy
<
	gT
>::

223 
	$is_ru¬ög
 (

226 
auto_muãx
 
	`M
(
m
);

227  
ru¬ög
 && !
°›_ru¬ög
;

228 
	}
}

232 
	gãm∂©e
 <

233 
ty≥«me
 
	gT


235 
	gtimî_hóvy
<
	gT
>::

236 
	$dñay_time
 (

239 
auto_muãx
 
	`M
(
m
);

240  
dñay
;

241 
	}
}

245 
	gãm∂©e
 <

246 
ty≥«me
 
	gT


248 
	gtimî_hóvy
<
	gT
>::

249 
	$£t_dñay_time
 (

250 
mûli£c⁄ds


253 
m
.
	`lock
();

256 i‡(
ru¬ög
 && !
°›_ru¬ög
)

258 
√xt_time_to_run
 -
dñay
*1000;

259 
√xt_time_to_run
 +
mûli£c⁄ds
*1000;

262 
dñay
 = 
mûli£c⁄ds
;

263 
s
.
	`brﬂdˇ°
();

264 
m
.
	`u∆ock
();

265 
	}
}

269 
	gãm∂©e
 <

270 
ty≥«me
 
	gT


272 
	gtimî_hóvy
<
	gT
>::

273 
	$°¨t
 (

276 
auto_muãx
 
	`M
(
m
);

280 i‡–(
ru¬ög
 && !
°›_ru¬ög
Ë=
Ál£
)

281 
√xt_time_to_run
 = 
ts
.
	`gë_time°amp
(Ë+ 
dñay
*1000;

283 
°›_ru¬ög
 = 
Ál£
;

284 i‡(
ru¬ög
 =
Ál£
)

286 
ru¬ög
 = 
åue
;

289 i‡(
¸óã_√w_thªad
<
timî_hóvy
,&timî_hóvy::
thªad
>(*
this
Ë=
Ál£
)

291 
ru¬ög
 = 
Ál£
;

292 
throw
 
dlib
::
	`thªad_îr‹
("error creatingÇewÅhread inÅimer_heavy::start");

295 
	}
}

299 
	gãm∂©e
 <

300 
ty≥«me
 
	gT


302 
	gtimî_hóvy
<
	gT
>::

303 
	$°›
 (

306 
m
.
	`lock
();

307 
°›_ru¬ög
 = 
åue
;

308 
s
.
	`brﬂdˇ°
();

309 
m
.
	`u∆ock
();

310 
	}
}

314 
	gãm∂©e
 <

315 
ty≥«me
 
	gT


317 
	gtimî_hóvy
<
	gT
>::

318 
	$thªad
 (

321 
auto_muãx
 
	`M
(
m
);

322 
dñay_ªmaöög
;

323 
uöt64
 
cuºít_time
 = 
ts
.
	`gë_time°amp
();

325 i‡(
cuºít_time
 < 
√xt_time_to_run
)

326 
dñay_ªmaöög
 = 
°©ic_ˇ°
<>((
√xt_time_to_run
-
cuºít_time
)/1000);

328 
dñay_ªmaöög
 = 0;

330 
°›_ru¬ög
 =
Ál£
)

332 i‡(
dñay_ªmaöög
 > 0)

333 
s
.
	`waô_‹_timeout
(
dñay_ªmaöög
);

335 i‡(
°›_ru¬ög
)

338 
cuºít_time
 = 
ts
.
	`gë_time°amp
();

339 i‡(
cuºít_time
 < 
√xt_time_to_run
)

342 
dñay_ªmaöög
 = 
°©ic_ˇ°
<>((
√xt_time_to_run
-
cuºít_time
)/1000);

346 i‡(
dñay_ªmaöög
 > 0)

351 
m
.
	`u∆ock
();

352 (
ao
.*
af
)();

353 
m
.
	`lock
();

355 
cuºít_time
 = 
ts
.
	`gë_time°amp
();

356 
√xt_time_to_run
 = 
cuºít_time
 + 
dñay
*1000;

357 
dñay_ªmaöög
 = 
dñay
;

359 
ru¬ög
 = 
Ál£
;

360 
°›_ru¬ög
 = 
Ál£
;

361 
s
.
	`brﬂdˇ°
();

362 
	}
}

366 
	gãm∂©e
 <

367 
ty≥«me
 
	gT


369 
	gtimî_hóvy
<
	gT
>::

370 
	$°›_™d_waô
 (

373 
m
.
	`lock
();

374 i‡(
ru¬ög
)

377 
°›_ru¬ög
 = 
åue
;

379 
s
.
	`brﬂdˇ°
();

381 
ru¬ög
)

382 
s
.
	`waô
();

384 
m
.
	`u∆ock
();

385 
	}
}

	@viper/concurrentqueue-src/benchmarks/dlib/timing.h

3 #i‚de‡
DLIB_TImING_Hh_


4 
	#DLIB_TImING_Hh_


	)

6 
	~<chr⁄o
>

7 
	~<©omic
>

8 
	~<c°rög
>

9 
	~"°rög.h
"

11 
	~<io°ªam
>

73 
«me•a˚
 
	gdlib


75 
«me•a˚
 
	gtimög


77 c⁄° 
	gTIME_SLOTS
 = 500;

78 c⁄° 
	gNAME_LENGTH
 = 40;

80 
ölöe
 
	g°d
::
©omic
<
uöt64_t
>* 
time_buf
()

82 
°d
::
©omic
<
uöt64_t
> 
buf
[
TIME_SLOTS
];

83  
	gbuf
;

86 
ölöe
 * 
«me_buf
(
i
, c⁄° * 
«me
)

88 
	gbuf
[
TIME_SLOTS
][
NAME_LENGTH
] = {{0}};

90 i‡(
	gbuf
[
i
][0] == '\0')

92 
usög
 
«me•a˚
 
°d
;

93 
°∫˝y
(
buf
[
i
], 
«me
, 
NAME_LENGTH
-1);

94 
	gbuf
[
i
][
NAME_LENGTH
-1] = '\0';

97  
	gbuf
[
i
];

100 
ölöe
 
uöt64_t
 
ts
()

102 
usög
 
«me•a˚
 
	g°d
::
chr⁄o
;

103  
	gduøti⁄_ˇ°
<
	gduøti⁄
<,
	g°d
::
«no
>>(
high_ªsﬁuti⁄_˛ock
::
now
().
time_sö˚_ïoch
()).
cou¡
();

106 
ölöe
 
°¨t
(
i
)

108 
time_buf
()[
i
] -
ts
();

111 
ölöe
 
°¨t
(
i
, c⁄° * 
«me
)

113 
time_buf
()[
i
] -
ts
();

114 
«me_buf
(
i
,
«me
);

117 
ölöe
 
°›
(
i
)

119 
time_buf
()[
i
] +
ts
();

122 
ölöe
 
¥öt
()

124 
usög
 
«me•a˚
 
	g°d
;

125 
	gcout
 << "TimögÑï‹t: " << 
	gídl
;

128 
	gmax_«me_Àngth
 = 0;

129 
	gi
 = 0; i < 
	gTIME_SLOTS
; ++i)

131 
°rög
 
	g«me
;

133 i‡(
«me_buf
(
i
,"")[0] != '\0')

134 
«me
 = 
ˇ°_to_°rög
(
i
Ë+ ": " + 
«me_buf
(i,"");

136 
	g«me
 = 
ˇ°_to_°rög
(
i
);

137 
	gmax_«me_Àngth
 = 
°d
::
max
<>(
max_«me_Àngth
, 
	g«me
.
size
());

140 
	gi
 = 0; i < 
	gTIME_SLOTS
; ++i)

142 i‡(
time_buf
()[
i
] != 0)

144 
time
 = 
time_buf
()[
i
]/1000.0/1000.0;

145 
°rög
 
	g«me
;

147 i‡(
«me_buf
(
i
,"")[0] != '\0')

148 
«me
 = 
ˇ°_to_°rög
(
i
Ë+ ": " + 
«me_buf
(i,"");

150 
	g«me
 = 
ˇ°_to_°rög
(
i
);

153 i‡(
	g«me
.
size
(Ë< 
	gmax_«me_Àngth
)

154 
	g«me
 +
°rög
(
max_«me_Àngth
-
«me
.
size
(),' ');

156 i‡(
	gtime
 < 1000)

157 
	gcout
 << " " << 
	g«me
 << ": " << 
	gtime
 << " mûli£c⁄ds" << 
	gídl
;

158 i‡(
	gtime
 < 1000*60)

159 
	gcout
 << " " << 
	g«me
 << ": " << 
	gtime
/1000.0 << " sec⁄ds" << 
	gídl
;

160 i‡(
	gtime
 < 1000*60*60)

161 
	gcout
 << " " << 
	g«me
 << ": " << 
	gtime
/1000.0/60.0 << " möuãs" << 
	gídl
;

163 
	gcout
 << " " << 
	g«me
 << ": " << 
	gtime
/1000.0/60.0/60.0 << " hours" << 
	gídl
;

168 
ölöe
 
˛ór
()

170 
	gi
 = 0; i < 
	gTIME_SLOTS
; ++i)

173 
time_buf
()[
i
] = 0;

175 
«me_buf
(
i
,"")[0] = '\0';

179 
	sblock


186 
block
(
i
):
idx
(iË{
°¨t
(idx);}

187 
block
(
i
, c⁄° * 
°r
):
idx
(iË{
°¨t
(idx,str);}

188 ~
block
(Ë{ 
°›
(
idx
); }

189 c⁄° 
	gidx
;

	@viper/concurrentqueue-src/benchmarks/dlib/tokenizer.h

3 #i‚de‡
DLIB_TOKENIZEr_


4 
	#DLIB_TOKENIZEr_


	)

6 
	~"tokíizî/tokíizî_kî√l_1.h
"

7 
	~"tokíizî/tokíizî_kî√l_c.h
"

10 
«me•a˚
 
	gdlib


13 ˛as†
	ctokíizî


15 
tokíizî
() {}

18 
	gpublic
:

23 
tokíizî_kî√l_1


24 
	tkî√l_1a
;

25 
	gtokíizî_kî√l_c
<
	tkî√l_1a
>

26 
	tkî√l_1a_c
;

	@viper/concurrentqueue-src/benchmarks/dlib/tokenizer/tokenizer_kernel_1.h

3 #i‚de‡
DLIB_TOKENIZER_KERNEl_1_


4 
	#DLIB_TOKENIZER_KERNEl_1_


	)

6 
	~<°rög
>

7 
	~<iosfwd
>

8 
	~<˛imôs
>

9 
	~"../Ægs.h
"

10 
	~"tokíizî_kî√l_ab°ø˘.h
"

12 
«me•a˚
 
	gdlib


15 ˛as†
	ctokíizî_kî√l_1


55 
	gpublic
:

59 
	esome_øndom_«me


61 
END_OF_LINE
,

62 
	gEND_OF_FILE
,

63 
	gIDENTIFIER
,

64 
	gCHAR
,

65 
	gNUMBER
,

66 
	gWHITE_SPACE


69 
tokíizî_kî√l_1
 (

72 
	gvútuÆ
 ~
tokíizî_kî√l_1
 (

75 
˛ór
(

78 
£t_°ªam
 (

79 
°d
::
i°ªam
& 
ö


82 
boﬁ
 
°ªam_is_£t
 (

85 
	g°d
::
i°ªam
& 
gë_°ªam
 (

88 
gë_tokí
 (

89 & 
ty≥
,

90 
°d
::
°rög
& 
tokí


93 
sw≠
 (

94 
tokíizî_kî√l_1
& 
ôem


97 
£t_idítifõr_tokí
 (

98 c⁄° 
°d
::
°rög
& 
hód
,

99 c⁄° 
°d
::
°rög
& 
body


102 
≥ek_ty≥
 (

105 c⁄° 
	g°d
::
°rög
& 
≥ek_tokí
 (

108 c⁄° 
	g°d
::
°rög
 
gë_idítifõr_hód
 (

111 c⁄° 
	g°d
::
°rög
 
gë_idítifõr_body
 (

114 c⁄° 
	g°d
::
°rög
 
lowîˇ£_Àâîs
 (

117 c⁄° 
	g°d
::
°rög
 
uµîˇ£_Àâîs
 (

120 c⁄° 
	g°d
::
°rög
 
numbîs
 (

123 
	g¥iv©e
:

126 
tokíizî_kî√l_1
(constÅokenizer_kernel_1&);

127 
	gtokíizî_kî√l_1
& 
	g›î©‹
=(c⁄° 
tokíizî_kî√l_1
&);

131 
	g°d
::
i°ªam
* 
ö
;

132 
	g°d
::
°ªambuf
* streambuf;

133 
	g°d
::
°rög
 
hód
;

134 
	g°d
::
°rög
 
body
;

135 
boﬁ
* 
	ghód£t
;

136 
boﬁ
* 
	gbody£t
;

138 
muèbÀ
 
	g°d
::
°rög
 
√xt_tokí
;

139 
muèbÀ
 
	g√xt_ty≥
;

140 
muèbÀ
 
boﬁ
 
	ghave_≥eked
;

143 
ölöe
 
	$sw≠
 (

144 
tokíizî_kî√l_1
& 
a
,

145 
tokíizî_kî√l_1
& 
b


146 Ë{ 
a
.
	`sw≠
(
b
); 
	}
}

150 #ifde‡
NO_MAKEFILE


151 
	~"tokíizî_kî√l_1.˝p
"

	@viper/concurrentqueue-src/benchmarks/dlib/tokenizer/tokenizer_kernel_abstract.h

3 #unde‡
DLIB_TOKENIZER_KERNEl_ABSTRACT_


4 #ifde‡
DLIB_TOKENIZER_KERNEl_ABSTRACT_


6 
	~<°rög
>

7 
	~<ioswfd
>

9 
«me•a˚
 
	gdlib


12 ˛as†
	ctokíizî


70 
	gpublic
:

74 
END_OF_LINE
,

75 
	gEND_OF_FILE
,

76 
	gIDENTIFIER
,

77 
	gCHAR
,

78 
	gNUMBER
,

79 
	gWHITE_SPACE


82 
tokíizî
 (

91 
	gvútuÆ
 ~
tokíizî
 (

98 
˛ór
(

109 
£t_°ªam
 (

110 
°d
::
i°ªam
& 
ö


119 
boﬁ
 
°ªam_is_£t
 (

127 
	g°d
::
i°ªam
& 
gë_°ªam
 (

137 
gë_tokí
 (

138 & 
ty≥
,

139 
°d
::
°rög
& 
tokí


155 
≥ek_ty≥
 (

170 c⁄° 
	g°d
::
°rög
& 
≥ek_tokí
 (

185 
£t_idítifõr_tokí
 (

186 c⁄° 
°d
::
°rög
& 
hód
,

187 c⁄° 
°d
::
°rög
& 
body


205 c⁄° 
	g°d
::
°rög
 
gë_idítifõr_hód
 (

217 c⁄° 
	g°d
::
°rög
 
gë_idítifõr_body
 (

229 c⁄° 
	g°d
::
°rög
 
lowîˇ£_Àâîs
 (

240 c⁄° 
	g°d
::
°rög
 
uµîˇ£_Àâîs
 (

251 c⁄° 
	g°d
::
°rög
 
numbîs
 (

262 
sw≠
 (

263 
tokíizî
& 
ôem


270 
	g¥iv©e
:

273 
tokíizî
(constÅokenizer&);

274 
	gtokíizî
& 
	g›î©‹
=(c⁄° 
tokíizî
&);

278 
ölöe
 
	$sw≠
 (

279 
tokíizî
& 
a
,

280 
tokíizî
& 
b


281 Ë{ 
a
.
	`sw≠
(
b
); 
	}
}

	@viper/concurrentqueue-src/benchmarks/dlib/tokenizer/tokenizer_kernel_c.h

3 #i‚de‡
DLIB_TOKENIZER_KERNEl_C_


4 
	#DLIB_TOKENIZER_KERNEl_C_


	)

6 
	~"tokíizî_kî√l_ab°ø˘.h
"

7 
	~"../as£π.h
"

8 
	~<°rög
>

9 
	~<io°ªam
>

11 
«me•a˚
 
	gdlib


14 
	gãm∂©e
 <

15 
ty≥«me
 
	gtokíizî


17 ˛as†
	ctokíizî_kî√l_c
 : 
public
 
tokíizî


20 
public
:

21 
°d
::
i°ªam
& 
gë_°ªam
 (

24 
gë_tokí
 (

25 & 
ty≥
,

26 
°d
::
°rög
& 
tokí


29 
£t_idítifõr_tokí
 (

30 c⁄° 
°d
::
°rög
& 
hód
,

31 c⁄° 
°d
::
°rög
& 
body


34 
≥ek_ty≥
 (

37 c⁄° 
	g°d
::
°rög
& 
≥ek_tokí
 (

41 
	gãm∂©e
 <

42 
ty≥«me
 
	gtokíizî


44 
ölöe
 
sw≠
 (

45 
tokíizî_kî√l_c
<
tokíizî
>& 
a
,

46 
tokíizî_kî√l_c
<
tokíizî
>& 
b


47 Ë{ 
	ga
.
sw≠
(
b
); }

55 
	gãm∂©e
 <

56 
ty≥«me
 
	gtokíizî


58 
	gtokíizî_kî√l_c
<
	gtokíizî
>::

59 
	$£t_idítifõr_tokí
 (

60 c⁄° 
°d
::
°rög
& 
hód
,

61 c⁄° 
°d
::
°rög
& 
body


64 
usög
 
«me•a˚
 
°d
;

66 
	`DLIB_CASSERT
–
hód
.
	`föd_fú°_of
(" \r\t\n0123456789"Ë=
°rög
::
≈os
 &&

67 
body
.
	`föd_fú°_of
(" \r\t\n"Ë=
°rög
::
≈os
 ,

70 << "\n\thód: " << 
hód


71 << "\n\tbody: " << 
body


72 << "\n\âhis: " << 
this


76 
tokíizî
::
	`£t_idítifõr_tokí
(
hód
,
body
);

77 
	}
}

81 
	gãm∂©e
 <

82 
ty≥«me
 
	gtokíizî


84 
	g°d
::
i°ªam
& 
tokíizî_kî√l_c
<
tokíizî
>::

85 
	$gë_°ªam
 (

89 
	`DLIB_CASSERT
–
this
->
	`°ªam_is_£t
(Ë=
åue
,

92 << "\n\âhis: " << 
this


96  
tokíizî
::
	`gë_°ªam
();

97 
	}
}

101 
	gãm∂©e
 <

102 
ty≥«me
 
	gtokíizî


104 
	gtokíizî_kî√l_c
<
	gtokíizî
>::

105 
	$≥ek_ty≥
 (

109 
	`DLIB_CASSERT
–
this
->
	`°ªam_is_£t
(Ë=
åue
,

112 << "\n\âhis: " << 
this


116  
tokíizî
::
	`≥ek_ty≥
();

117 
	}
}

121 
	gãm∂©e
 <

122 
ty≥«me
 
	gtokíizî


124 c⁄° 
	g°d
::
°rög
& 
tokíizî_kî√l_c
<
tokíizî
>::

125 
	$≥ek_tokí
 (

129 
	`DLIB_CASSERT
–
this
->
	`°ªam_is_£t
(Ë=
åue
,

132 << "\n\âhis: " << 
this


136  
tokíizî
::
	`≥ek_tokí
();

137 
	}
}

141 
	gãm∂©e
 <

142 
ty≥«me
 
	gtokíizî


144 
	gtokíizî_kî√l_c
<
	gtokíizî
>::

145 
	$gë_tokí
 (

146 & 
ty≥
,

147 
°d
::
°rög
& 
tokí


151 
	`DLIB_CASSERT
–
this
->
	`°ªam_is_£t
(Ë=
åue
,

154 << "\n\âhis: " << 
this


158 
tokíizî
::
	`gë_tokí
(
ty≥
,
tokí
);

159 
	}
}

	@viper/concurrentqueue-src/benchmarks/dlib/uintn.h

4 #i‚de‡
DLIB_UINä_


5 
	#DLIB_UINä_


	)

7 
	~"as£π.h
"

9 
«me•a˚
 
	gdlib


25 #ifde‡
__GNUC__


26 
	tuöt64
;

27 
	töt64
;

28 #ñi‡
deföed
(
__BORLANDC__
)

29 
	t__öt64
 
	tuöt64
;

30 
__öt64
 
	töt64
;

31 #ñi‡
deföed
(
_MSC_VER
)

32 
	t__öt64
 
	tuöt64
;

33 
__öt64
 
	töt64
;

35 
	tuöt64
;

36 
	töt64
;

39 
	tuöt16
;

40 
	tuöt32
;

41 
	tuöt8
;

43 
	töt16
;

44 
	töt32
;

45 
	töt8
;

49 
COMPILE_TIME_ASSERT
((
uöt8
) == 1);

50 
COMPILE_TIME_ASSERT
((
uöt16
) == 2);

51 
COMPILE_TIME_ASSERT
((
uöt32
) == 4);

52 
COMPILE_TIME_ASSERT
((
uöt64
) == 8);

54 
COMPILE_TIME_ASSERT
((
öt8
) == 1);

55 
COMPILE_TIME_ASSERT
((
öt16
) == 2);

56 
COMPILE_TIME_ASSERT
((
öt32
) == 4);

57 
COMPILE_TIME_ASSERT
((
öt64
) == 8);

61 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
size_t
 
	gs
 = (
T
)>

62 
unsig√d_ty≥
;

63 
	gãm∂©e
 <
ty≥«me
 
	gT
>

64 
	gunsig√d_ty≥
<
	gT
,1> { 
uöt8
 
	tty≥
; };

65 
	gãm∂©e
 <
ty≥«me
 
	gT
>

66 
	gunsig√d_ty≥
<
	gT
,2> { 
uöt16
 
	tty≥
; };

67 
	gãm∂©e
 <
ty≥«me
 
	gT
>

68 
	gunsig√d_ty≥
<
	gT
,4> { 
uöt32
 
	tty≥
; };

69 
	gãm∂©e
 <
ty≥«me
 
	gT
>

70 
	gunsig√d_ty≥
<
	gT
,8> { 
uöt64
 
	tty≥
; };

77 
	gãm∂©e
 <
ty≥«me
 
	gT
,Åy≥«mê
	gU
>

78 
T
 
zîo_exãnd_ˇ°
(

79 c⁄° 
U
 
vÆ


89 
ty≥«me
 
	tunsig√d_ty≥
<
	tU
>::
	tty≥
 
	tut
;

90  
	g°©ic_ˇ°
<
	gT
>(°©ic_ˇ°<
	gut
>(
	gvÆ
));

	@viper/concurrentqueue-src/benchmarks/dlib/unicode.h

3 #i‚de‡
DLIB_UNICODe_TOP_


4 
	#DLIB_UNICODe_TOP_


	)

6 
	~"unicode/unicode.h
"

	@viper/concurrentqueue-src/benchmarks/dlib/unicode/unicode.h

3 #i‚de‡
DLIB_UNICODe_H_


4 
	#DLIB_UNICODe_H_


	)

6 
	~"../uöä.h
"

7 
	~"../Ægs.h
"

8 
	~"unicode_ab°ø˘.h
"

9 
	~<°rög
>

10 
	~<c°rög
>

12 
	~<f°ªam
>

14 
«me•a˚
 
	gdlib


19 
uöt32
 
	tunich¨
;

21 #i‡
deföed
(
__GNUC__
Ë&& __GNUC__ < 4 && 
__GNUC_MINOR__
 < 4

22 
	sunich¨_åaôs


24 
	gdlib
::
	tunich¨
 
	tch¨_ty≥
;

25 
	gdlib
::
	tunich¨
 
	töt_ty≥
;

26 
	g°d
::
	t°ªamoff
 
	toff_ty≥
;

27 
	g°d
::
	t°ªampos
 
	tpos_ty≥
;

28 
	g°d
::
	tmb°©e_t
 
	t°©e_ty≥
;

30 
assign
(
ch¨_ty≥
& 
c1
, c⁄° ch¨_ty≥& 
c2
Ë{ 
	gc1
 = c2; }

31 
boﬁ
 
eq
(c⁄° 
ch¨_ty≥
& 
c1
, c⁄° ch¨_ty≥& 
c2
Ë{  
	gc1
 == c2; }

32 
boﬁ
 
…
(c⁄° 
ch¨_ty≥
& 
c1
, c⁄° ch¨_ty≥& 
c2
Ë{  
	gc1
 < 
	gc2
; }

33 
com∑ª
(c⁄° 
ch¨_ty≥
* 
s1
, c⁄° ch¨_ty≥* 
s2
, 
size_t
 
n
)

35 
size_t
 
	gi
 = 0; i < 
	gn
; ++i)

37 i‡(
	gs1
[
i
] < 
	gs2
[i])

39 i‡(
	gs1
[
i
] > 
	gs2
[i])

45 
size_t
 
Àngth
(c⁄° 
ch¨_ty≥
* 
s
)

47 
size_t
 
	gi
 = 0;

48 
	gs
[
i
] != 0)

49 ++
i
;

50  
	gi
;

53 c⁄° 
ch¨_ty≥
* 
föd
(c⁄° ch¨_ty≥* 
s
, 
size_t
 
n
,

54 c⁄° 
ch¨_ty≥
& 
a
)

56 
size_t
 
	gi
 = 0; i < 
	gn
; ++i)

58 i‡(
	gs
[
i
] =
a
)

60  
s
+
i
;

66 
ch¨_ty≥
* 
move
(ch¨_ty≥* 
s1
, c⁄° ch¨_ty≥* 
s2
, 
size_t
 
n
)

68  
	g°©ic_ˇ°
<
	gch¨_ty≥
*>(
	g°d
::
memmove
(
s1
, 
s2
, (
ch¨_ty≥
)*
n
));

71 
ch¨_ty≥
* 
c›y
(ch¨_ty≥* 
s1
, c⁄° ch¨_ty≥* 
s2
, 
size_t
 
n
)

73 
size_t
 
	gi
 = 0; i < 
	gn
; ++i)

74 
	gs1
[
i
] = 
s2
[i];

76  
	gs1
;

79 
ch¨_ty≥
* 
assign
(ch¨_ty≥* 
s
, 
size_t
 
n
, ch¨_ty≥ 
a
)

81 
size_t
 
	gi
 = 0; i < 
	gn
; ++i)

82 
	gs
[
i
] = 
a
;

84  
	gs
;

88 
öt_ty≥
 
nŸ_eof
(c⁄° i¡_ty≥& 
c
)

90 i‡(!
eq_öt_ty≥
(
c
,
eof
()))

91  
to_öt_ty≥
(
c
);

96 
ch¨_ty≥
 
to_ch¨_ty≥
(c⁄° 
öt_ty≥
& 
c
Ë{  
	g°©ic_ˇ°
<
	gch¨_ty≥
>(
	gc
); }

97 
öt_ty≥
 
to_öt_ty≥
(c⁄° 
ch¨_ty≥
& 
c
Ë{  
	gzîo_exãnd_ˇ°
<
	göt_ty≥
>(
	gc
); }

99 
boﬁ
 
eq_öt_ty≥
(c⁄° 
öt_ty≥
& 
c1
, c⁄° i¡_ty≥& 
c2
Ë{  
	gc1
 == c2; }

101 
öt_ty≥
 
eof
(Ë{  
	g°©ic_ˇ°
<
	göt_ty≥
>(
	gEOF
); }

104 
	g°d
::
	tbasic_°rög
<
	tunich¨
, 
	tunich¨_åaôs
> 
	tu°rög
;

106 
	g°d
::
	tbasic_°rög
<
	tunich¨
> 
	tu°rög
;

111 
«me•a˚
 
	gunicode_hñ≥rs


114 
	gãm∂©e
 <

115 
ty≥«me
 
	gch¨T


117 
u8_to_u32
(

118 
ch¨T
& 
ªsu…
,

119 
°d
::
i°ªam
& 
ö


133 
vÆ
 = 
ö
.
gë
();

134 i‡(
	gvÆ
 =
EOF
)

137 
unich¨
 
	gch
[4];

138 
	gch
[0] = 
zîo_exãnd_ˇ°
<
unich¨
>(
vÆ
);

139 i‡–
	gch
[0] < 0x80 )

141 
	gªsu…
 = 
°©ic_ˇ°
<
ch¨T
>(
ch
[0]);

144 i‡––
	gch
[0] & ~0x3F ) == 0x80 )

149 i‡––
	gch
[0] & ~0x1F ) == 0xC0 )

151 
vÆ
 = 
ö
.
gë
();

152 i‡–
	gvÆ
 =
EOF
 )

155 
	gch
[1] = 
zîo_exãnd_ˇ°
<
unich¨
>(
vÆ
);

156 i‡––
	gch
[1] & ~0x3F ) != 0x80 )

158 i‡––
	gch
[0] & ~0x01 ) == 0xC0 )

160 
	gch
[0] &= 0x1F;

161 
	gch
[1] &= 0x3F;

162 
	gªsu…
 = 
°©ic_ˇ°
<
ch¨T
>(–
ch
[0] << 6 ) | ch[1]);

165 i‡––
	gch
[0] & ~0x0F ) == 0xE0 )

167  
n
 = 1;
	gn
 < 3;n++ )

169 
	gvÆ
 = 
ö
.
gë
();

170 i‡–
	gvÆ
 =
EOF
 )

172 
	gch
[
n
] = 
zîo_exãnd_ˇ°
<
unich¨
>(
vÆ
);

173 i‡––
	gch
[
n
] & ~0x3F ) != 0x80 )

175 
	gch
[
n
] &= 0x3F;

177 
	gch
[0] &= 0x0F;

178 
	gªsu…
 = 
°©ic_ˇ°
<
ch¨T
>(–
ch
[0] << 12 ) | ( ch[1] << 6 ) | ch[2]);

179 i‡–
	gªsu…
 < 0x0800 )

181 i‡–
	gªsu…
 >0xD800 && 
ªsu…
 < 0xE000 )

183 i‡–
	gªsu…
 >0xFDD0 && 
ªsu…
 <= 0xFDEF )

185 i‡–
	gªsu…
 >= 0xFFFE )

189 i‡––
	gch
[0] & ~0x07 ) == 0xF0 )

191  
n
 = 1;
	gn
 < 4;n++ )

193 
	gvÆ
 = 
ö
.
gë
();

194 i‡–
	gvÆ
 =
EOF
 )

196 
	gch
[
n
] = 
zîo_exãnd_ˇ°
<
unich¨
>(
vÆ
);

197 i‡––
	gch
[
n
] & ~0x3F ) != 0x80 )

199 
	gch
[
n
] &= 0x3F;

201 i‡––
	gch
[0] ^ 0xF6 ) < 4 )

203 
	gch
[0] &= 0x07;

204 
	gªsu…
 = 
°©ic_ˇ°
<
ch¨T
>(–
ch
[0] << 18 ) | ( ch[1] << 12 ) | ( ch[2] << 6 ) | ch[3]);

205 i‡–
	gªsu…
 < 0x10000 )

207 i‡–(
	gªsu…
 & 0xFFFF) >= 0xFFFE )

216 
	gãm∂©e
 <
ty≥«me
 
	gch¨T
>

217 
˛ass
 
	gbasic_utf8_°ªambuf
 : 
public
 
°d
::
basic_°ªambuf
<
ch¨T
>

219 
public
:

220 
basic_utf8_°ªambuf
 (

221 
°d
::
if°ªam
& 
fö_


223 
fö
(
fö_
)

225 
this
->
£tg
(
ö_buf„r
+
max_putback
,

226 
ö_buf„r
+
max_putback
,

227 
ö_buf„r
+
max_putback
);

230 
	g¥Ÿe˘ed
:

232 
ty≥«me
 
	t°d
::
	tbasic_°ªambuf
<
	tch¨T
>::
	töt_ty≥
 int_type;

235 
öt_ty≥
 
undîÊow
(

238 i‡(
	gthis
->
g±r
(Ë<Åhis->
eg±r
())

240  
	gzîo_exãnd_ˇ°
<
	göt_ty≥
>(*
	gthis
->
g±r
());

243 
	gnum_put_back
 = 
°©ic_ˇ°
<>(
this
->
g±r
(Ë-Åhis->
eback
());

244 i‡(
	gnum_put_back
 > 
	gmax_putback
)

246 
	gnum_put_back
 = 
max_putback
;

250 
	g°d
::
memmove
(
ö_buf„r
+(
max_putback
-
num_put_back
), 
this
->
g±r
()-num_put_back,Çum_put_back);

254 
	gn
 = 
ö_buf„r_size
-
max_putback
;

255 
	gi
;

256 
	gi
 = 0; i < 
	gn
; ++i)

258 
ch¨T
 
	gch
;

259 i‡(
	gunicode_hñ≥rs
::
u8_to_u32
(
ch
,
fö
) > 0)

261 (
	gö_buf„r
+
	gmax_putback
)[
i
] = 
ch
;

269 i‡(
	gi
 == 0)

272  
EOF
;

276 
	gthis
->
£tg
 (
ö_buf„r
+(
max_putback
-
num_put_back
),

277 
ö_buf„r
+
max_putback
,

278 
ö_buf„r
+
max_putback
+
i
);

280  
	gzîo_exãnd_ˇ°
<
	göt_ty≥
>(*
	gthis
->
g±r
());

283 
	g¥iv©e
:

284 
°d
::
if°ªam
& 
fö
;

285 c⁄° 
	gmax_putback
 = 4;

286 c⁄° 
	gö_buf„r_size
 = 10;

287 
ch¨T
 
	gö_buf„r
[
ö_buf„r_size
];

292 #i‡
deföed
(
__GNUC__
) && __GNUC__ >= 6

293 #¥agm®
GCC
 
dügno°ic
 
push


294 #¥agm®
GCC
 
dügno°ic
 
ign‹ed
 "-Wmisleading-indentation"

296 
	gãm∂©e
 <
ty≥«me
 
	gT
>

297 
boﬁ
 
is_comböög_ch¨
(

298 c⁄° 
T
 
ch_


301 c⁄° 
unich¨
 
	gch
 = 
zîo_exãnd_ˇ°
<unich¨>(
ch_
);

302 i‡–
	gch
 < 0x300 )  
	gÁl£
;

303 i‡–
	gch
 < 0x370 )  
	gåue
;

305 i‡–
	gch
 < 0x800 )

307 i‡–
	gch
 < 0x483 ) 
	gÁl£
;i‡–ch < 0x48A ) 
	gåue
;

309 i‡–
	gch
 < 0x591 ) 
	gÁl£
;if ( ch < 0x5D0 )

311 i‡–
	gch
 =0x5C0 ) 
Ál£
;

312 i‡–
	gch
 =0x5C3 ) 
Ál£
;

313 i‡–
	gch
 =0x5C6 ) 
Ál£
;

314  
	gåue
;

316 i‡–
	gch
 < 0x610 ) 
	gÁl£
;i‡–ch < 0x616 ) 
	gåue
;

317 i‡–
	gch
 < 0x64B ) 
	gÁl£
;i‡–ch < 0x660 ) 
	gåue
;

319 i‡–
	gch
 =0x670 ) 
åue
;

321 i‡–
	gch
 < 0x6D6 ) 
	gÁl£
;if ( ch < 0x6EE )

323 i‡–
	gch
 =0x6DD ) 
Ál£
;

324 i‡–
	gch
 =0x6E5 ) 
Ál£
;

325 i‡–
	gch
 =0x6E6 ) 
Ál£
;

326 i‡–
	gch
 =0x6E9 ) 
Ál£
;

327  
	gåue
;

329 i‡–
	gch
 =0x711 ) 
åue
;

331 i‡–
	gch
 < 0x730 ) 
	gÁl£
;i‡–ch < 0x74B ) 
	gåue
;

332 i‡–
	gch
 < 0x7A6 ) 
	gÁl£
;i‡–ch < 0x7B1 ) 
	gåue
;

333 i‡–
	gch
 < 0x7EB ) 
	gÁl£
;i‡–ch < 0x7F4 ) 
	gåue
;

334  
	gÁl£
;

336 i‡–
	gch
 < 0xA00 )

338 i‡–
	gch
 < 0x901 ) 
	gÁl£
;i‡–ch < 0x904 ) 
	gåue
;

339 i‡–
	gch
 < 0x93C ) 
	gÁl£
;if ( ch < 0x955 )

341 i‡–
	gch
 =0x93D ) 
Ál£
;

342 i‡–
	gch
 =0x950 ) 
Ál£
;

343  
	gåue
;

345 i‡–
	gch
 < 0x962 ) 
	gÁl£
;i‡–ch < 0x964 ) 
	gåue
;

346 i‡–
	gch
 < 0x981 ) 
	gÁl£
;i‡–ch < 0x984 ) 
	gåue
;

347 i‡–
	gch
 < 0x9BC ) 
	gÁl£
;if ( ch < 0x9D8 )

349 i‡–
	gch
 =0x9BD ) 
Ál£
;

350 i‡–
	gch
 =0x9CE ) 
Ál£
;

351  
	gåue
;

353 i‡–
	gch
 < 0x9E2 ) 
	gÁl£
;i‡–ch < 0x9E4 ) 
	gåue
;

354  
	gÁl£
;

356 i‡–
	gch
 < 0xC00 )

358 i‡–
	gch
 < 0xA01 ) 
	gÁl£
;i‡–ch < 0xA04 ) 
	gåue
;

359 i‡–
	gch
 < 0xA3C ) 
	gÁl£
;i‡–ch < 0xA4E ) 
	gåue
;

360 i‡–
	gch
 < 0xA70 ) 
	gÁl£
;i‡–ch < 0xA72 ) 
	gåue
;

361 i‡–
	gch
 < 0xA81 ) 
	gÁl£
;i‡–ch < 0xA84 ) 
	gåue
;

362 i‡–
	gch
 < 0xABC ) 
	gÁl£
;if ( ch < 0xACE )

364 i‡–
	gch
 =0xABD ) 
Ál£
;

365  
	gåue
;

367 i‡–
	gch
 < 0xAE2 ) 
	gÁl£
;i‡–ch < 0xAE4 ) 
	gåue
;

368 i‡–
	gch
 < 0xB01 ) 
	gÁl£
;i‡–ch < 0xB04 ) 
	gåue
;

369 i‡–
	gch
 < 0xB3C ) 
	gÁl£
;if ( ch < 0xB58 )

371 i‡–
	gch
 =0xB3D ) 
Ál£
;

372  
	gåue
;

374 i‡–
	gch
 =0xB82 ) 
åue
;

376 i‡–
	gch
 < 0xBBE ) 
	gÁl£
;i‡–ch < 0xBD8 ) 
	gåue
;

378 i‡–
	gch
 =0xBF4 ) 
åue
;

379 i‡–
	gch
 =0xBF8 ) 
åue
;

380  
	gÁl£
;

382 if(
	gch
 < 0xE00)

384 i‡–
	gch
 < 0xC01 ) 
	gÁl£
;i‡–ch < 0xC04 ) 
	gåue
;

385 i‡–
	gch
 < 0xC3E ) 
	gÁl£
;i‡–ch < 0xC57 ) 
	gåue
;

386 i‡–
	gch
 < 0xC82 ) 
	gÁl£
;i‡–ch < 0xC84 ) 
	gåue
;

387 i‡–
	gch
 < 0xCBC ) 
	gÁl£
;if ( ch < 0xCD7 )

389 i‡–
	gch
 =0xCBD ) 
Ál£
;

390  
	gåue
;

392 i‡–
	gch
 < 0xCE2 ) 
	gÁl£
;i‡–ch < 0xCE4 ) 
	gåue
;

393 i‡–
	gch
 < 0xD02 ) 
	gÁl£
;i‡–ch < 0xD04 ) 
	gåue
;

394 i‡–
	gch
 < 0xD3E ) 
	gÁl£
;i‡–ch < 0xD58 ) 
	gåue
;

395 i‡–
	gch
 < 0xD82 ) 
	gÁl£
;i‡–ch < 0xD84 ) 
	gåue
;

396 i‡–
	gch
 < 0xDCA ) 
	gÁl£
;i‡–ch < 0xDF4 ) 
	gåue
;

397  
	gÁl£
;

399 if(
	gch
 < 0x1000)

401 i‡–
	gch
 =0xE31 ) 
åue
;

403 i‡–
	gch
 < 0xE34 ) 
	gÁl£
;i‡–ch < 0xE3B ) 
	gåue
;

404 i‡–
	gch
 < 0xE47 ) 
	gÁl£
;i‡–ch < 0xE4F ) 
	gåue
;

406 i‡–
	gch
 =0xEB1 ) 
åue
;

408 i‡–
	gch
 < 0xEB4 ) 
	gÁl£
;i‡–ch < 0xEBD ) 
	gåue
;

409 i‡–
	gch
 < 0xEC8 ) 
	gÁl£
;i‡–ch < 0xECE ) 
	gåue
;

410 i‡–
	gch
 < 0xF18 ) 
	gÁl£
;i‡–ch < 0xF1A ) 
	gåue
;

412 i‡–
	gch
 =0xF35 ) 
åue
;

413 i‡–
	gch
 =0xF37 ) 
åue
;

414 i‡–
	gch
 =0xF39 ) 
åue
;

416 i‡–
	gch
 < 0xF3E ) 
	gÁl£
;i‡–ch < 0xF40 ) 
	gåue
;

417 i‡–
	gch
 < 0xF71 ) 
	gÁl£
;if ( ch < 0xF88 )

419 i‡–
	gch
 =0xF85 ) 
Ál£
;

420  
	gåue
;

422 i‡–
	gch
 < 0xF90 ) 
	gÁl£
;i‡–ch < 0xFBD ) 
	gåue
;

424 i‡–
	gch
 =0xFC6 ) 
åue
;

425  
	gÁl£
;

427 i‡–
	gch
 < 0x1800 )

429 i‡–
	gch
 < 0x102C ) 
	gÁl£
;i‡–ch < 0x1040 ) 
	gåue
;

430 i‡–
	gch
 < 0x1056 ) 
	gÁl£
;i‡–ch < 0x105A ) 
	gåue
;

432 i‡–
	gch
 =0x135F ) 
åue
;

434 i‡–
	gch
 < 0x1712 ) 
	gÁl£
;i‡–ch < 0x1715 ) 
	gåue
;

435 i‡–
	gch
 < 0x1732 ) 
	gÁl£
;i‡–ch < 0x1735 ) 
	gåue
;

436 i‡–
	gch
 < 0x1752 ) 
	gÁl£
;i‡–ch < 0x1754 ) 
	gåue
;

437 i‡–
	gch
 < 0x1772 ) 
	gÁl£
;i‡–ch < 0x1774 ) 
	gåue
;

438 i‡–
	gch
 < 0x17B6 ) 
	gÁl£
;i‡–ch < 0x17D4 ) 
	gåue
;

440 i‡–
	gch
 =0x17DD ) 
åue
;

441  
	gÁl£
;

443 if(
	gch
 < 0x2000)

445 i‡–
	gch
 < 0x180B ) 
	gÁl£
;i‡–ch < 0x180E ) 
	gåue
;

447 i‡–
	gch
 =0x18A9 ) 
åue
;

449 i‡–
	gch
 < 0x1920 ) 
	gÁl£
;i‡–ch < 0x193C ) 
	gåue
;

450 i‡–
	gch
 < 0x19B0 ) 
	gÁl£
;i‡–ch < 0x19C1 ) 
	gåue
;

451 i‡–
	gch
 < 0x19C8 ) 
	gÁl£
;i‡–ch < 0x19CA ) 
	gåue
;

452 i‡–
	gch
 < 0x1A17 ) 
	gÁl£
;i‡–ch < 0x1A1C ) 
	gåue
;

453 i‡–
	gch
 < 0x1B00 ) 
	gÁl£
;i‡–ch < 0x1B05 ) 
	gåue
;

454 i‡–
	gch
 < 0x1B34 ) 
	gÁl£
;i‡–ch < 0x1B45 ) 
	gåue
;

455 i‡–
	gch
 < 0x1B6B ) 
	gÁl£
;i‡–ch < 0x1B74 ) 
	gåue
;

456 i‡–
	gch
 < 0x1DC0 ) 
	gÁl£
;i‡–ch < 0x1E00 ) 
	gåue
;

457  
	gÁl£
;

459 i‡–
	gch
 < 0x20D0 ) 
	gÁl£
;i‡–ch < 0x2100 ) 
	gåue
;

460 i‡–
	gch
 < 0x302A ) 
	gÁl£
;i‡–ch < 0x3030 ) 
	gåue
;

461 i‡–
	gch
 < 0x3099 ) 
	gÁl£
;i‡–ch < 0x309B ) 
	gåue
;

463 i‡–
	gch
 =0xA802 ) 
åue
;

464 i‡–
	gch
 =0xA806 ) 
åue
;

465 i‡–
	gch
 =0xA80B ) 
åue
;

467 i‡–
	gch
 < 0xA823 ) 
	gÁl£
;i‡–ch < 0xA828 ) 
	gåue
;

469 i‡–
	gch
 =0xFB1E ) 
åue
;

471 i‡–
	gch
 < 0xFE00 ) 
	gÁl£
;i‡–ch < 0xFE10 ) 
	gåue
;

472 i‡–
	gch
 < 0xFE20 ) 
	gÁl£
;i‡–ch < 0xFE30 ) 
	gåue
;

473 i‡–
	gch
 < 0x10A01 ) 
	gÁl£
;i‡–ch < 0x10A10 ) 
	gåue
;

474 i‡–
	gch
 < 0x10A38 ) 
	gÁl£
;i‡–ch < 0x10A40 ) 
	gåue
;

475 i‡–
	gch
 < 0x1D165 ) 
	gÁl£
;i‡–ch < 0x1D16A ) 
	gåue
;

476 i‡–
	gch
 < 0x1D16D ) 
	gÁl£
;i‡–ch < 0x1D173 ) 
	gåue
;

477 i‡–
	gch
 < 0x1D17B ) 
	gÁl£
;i‡–ch < 0x1D183 ) 
	gåue
;

478 i‡–
	gch
 < 0x1D185 ) 
	gÁl£
;i‡–ch < 0x1D18C ) 
	gåue
;

479 i‡–
	gch
 < 0x1D1AA ) 
	gÁl£
;i‡–ch < 0x1D1AE ) 
	gåue
;

480 i‡–
	gch
 < 0x1D242 ) 
	gÁl£
;i‡–ch < 0x1D245 ) 
	gåue
;

481 i‡–
	gch
 < 0xE0100 ) 
	gÁl£
;i‡–ch < 0xE01F0 ) 
	gåue
;

482  
	gÁl£
;

484 #i‡
deföed
(
__GNUC__
) && __GNUC__ >= 6

485 #¥agm®
GCC
 
dügno°ic
 
p›


490 ˛as†
	cövÆid_utf8_îr‹
 : 
public
 
îr‹


492 
public
:

493 
övÆid_utf8_îr‹
():
îr‹
(
EUTF8_TO_UTF32
) {}

496 
ölöe
 c⁄° 
u°rög
 
	$c⁄vît_utf8_to_utf32
 (

497 c⁄° 
°d
::
°rög
& 
°r


500 
usög
 
«me•a˚
 
unicode_hñ≥rs
;

501 
u°rög
 
ãmp
;

502 
°d
::
i°rög°ªam
 
	`sö
(
°r
);

504 
ãmp
.
	`ª£rve
(
°r
.
	`size
());

506 
°©us
;

507 
unich¨
 
ch
;

508  (
°©us
 = 
	`u8_to_u32
(
ch
,
sö
)) > 0)

509 
ãmp
.
	`push_back
(
ch
);

511 i‡(
°©us
 < 0)

512 
throw
 
	`övÆid_utf8_îr‹
();

514  
ãmp
;

515 
	}
}

519 
boﬁ
 
is_suºog©e
(
unich¨
 
ch
);

521 
unich¨
 
suºog©e_∑ú_to_unich¨
(unich¨ 
fú°
, unich¨ 
£c⁄d
);

523 
unich¨_to_suºog©e_∑ú
(
unich¨
 
unicode
, unich¨ &
fú°
, unich¨ &
£c⁄d
);

526 c⁄° 
u°rög
 
c⁄vît_w°rög_to_utf32
 (

527 c⁄° 
°d
::
w°rög
 &
w°r


530 c⁄° 
	g°d
::
w°rög
 
c⁄vît_utf32_to_w°rög
 (

531 c⁄° 
u°rög
 &
§c


534 c⁄° 
	g°d
::
w°rög
 
c⁄vît_mb°rög_to_w°rög
 (

535 c⁄° 
°d
::
°rög
 &
§c


538 c⁄° 
	g°d
::
°rög
 
c⁄vît_w°rög_to_mb°rög
(

539 c⁄° 
°d
::
w°rög
 &
§c


544 
	gãm∂©e
 <
ty≥«me
 
	gch¨T
>

545 
˛ass
 
	gbasic_utf8_if°ªam
 : 
public
 
°d
::
basic_i°ªam
<
ch¨T
>

547 
public
:

549 
basic_utf8_if°ªam
 (

550 Ë: 
°d
::
basic_i°ªam
<
ch¨T
>(&
buf
), buf(
fö
) {}

552 
basic_utf8_if°ªam
 (

553 c⁄° * 
fûe_«me
,

554 
°d
::
ios_ba£
::
›ímode
 
mode
 = std::
ios
::
ö


556 
°d
::
basic_i°ªam
<
ch¨T
>(&
buf
),

557 
buf
(
fö
)

559 
	gfö
.
›í
(
fûe_«me
,
mode
);

561 
	gthis
->
˛ór
(
fö
.
rd°©e
());

564 
basic_utf8_if°ªam
 (

565 c⁄° 
°d
::
°rög
& 
fûe_«me
,

566 
°d
::
ios_ba£
::
›ímode
 
mode
 = std::
ios
::
ö


568 
°d
::
basic_i°ªam
<
ch¨T
>(&
buf
),

569 
buf
(
fö
)

571 
	gfö
.
›í
(
fûe_«me
.
c_°r
(),
mode
);

573 
	gthis
->
˛ór
(
fö
.
rd°©e
());

576 
›í
(

577 c⁄° 
°d
::
°rög
& 
fûe_«me
,

578 
°d
::
ios_ba£
::
›ímode
 
mode
 = std::
ios
::
ö


581 
›í
(
fûe_«me
.
c_°r
(),
mode
);

584 
›í
 (

585 c⁄° * 
fûe_«me
,

586 
°d
::
ios_ba£
::
›ímode
 
mode
 = std::
ios
::
ö


589 
fö
.
˛o£
();

590 
	gfö
.
˛ór
();

591 
	gfö
.
›í
(
fûe_«me
,
mode
);

593 
	gthis
->
˛ór
(
fö
.
rd°©e
());

596 
˛o£
 (

599 
	gfö
.
˛o£
();

601 
	gthis
->
˛ór
(
fö
.
rd°©e
());

604 
	g¥iv©e
:

606 
°d
::
if°ªam
 
fö
;

607 
	gunicode_hñ≥rs
::
basic_utf8_°ªambuf
<
ch¨T
> 
buf
;

610 
	gbasic_utf8_if°ªam
<
	tunich¨
> 
	tutf8_uif°ªam
;

611 
	gbasic_utf8_if°ªam
<
	twch¨_t
> 
	tutf8_wif°ªam
;

617 #ifde‡
NO_MAKEFILE


618 
	~"unicode.˝p
"

	@viper/concurrentqueue-src/benchmarks/dlib/unicode/unicode_abstract.h

3 #unde‡
DLIB_UNICODe_ABSTRACT_H_


4 #ifde‡
DLIB_UNICODe_ABSTRACT_H_


6 
	~"../uöä.h
"

7 
	~"../îr‹.h
"

8 
	~<°rög
>

9 
	~<f°ªam
>

11 
«me•a˚
 
	gdlib


17 
uöt32
 
	tunich¨
;

20 
	g°d
::
	tbasic_°rög
<
	tunich¨
> 
	tu°rög
;

24 
	gãm∂©e
 <
ty≥«me
 
	gT
>

25 
boﬁ
 
is_comböög_ch¨
(

26 c⁄° 
T
 
ch_


36 
boﬁ
 
is_suºog©e
(

37 
unich¨
 
ch


47 
unich¨
 
suºog©e_∑ú_to_unich¨
(

48 
unich¨
 
fú°
,

49 
unich¨
 
£c⁄d


61 
unich¨_to_suºog©e_∑ú
(

62 
unich¨
 
ch
,

63 
unich¨
& 
fú°
,

64 
unich¨
& 
£c⁄d


76 ˛as†
	cövÆid_utf8_îr‹
 : 
public
 
îr‹


78 
public
:

79 
övÆid_utf8_îr‹
():
îr‹
(
EUTF8_TO_UTF32
) {}

82 c⁄° 
u°rög
 
c⁄vît_utf8_to_utf32
 (

83 c⁄° 
°d
::
°rög
& 
°r


96 c⁄° 
u°rög
 
c⁄vît_w°rög_to_utf32
 (

97 c⁄° 
°d
::
w°rög
 &
w°r


109 c⁄° 
	g°d
::
w°rög
 
c⁄vît_utf32_to_w°rög
 (

110 c⁄° 
u°rög
 &
°r


122 c⁄° 
	g°d
::
w°rög
 
c⁄vît_mb°rög_to_w°rög
 (

123 c⁄° 
°d
::
°rög
 &
°r


135 c⁄° 
	g°d
::
°rög
 
c⁄vît_w°rög_to_mb°rög
 (

136 c⁄° 
°d
::
w°rög
 &
§c


148 
	gãm∂©e
 <

149 
ty≥«me
 
	gch¨T


151 
˛ass
 
	gbasic_utf8_if°ªam
 : 
public
 
°d
::
basic_i°ªam
<
ch¨T
>

162 
public
:

164 
basic_utf8_if°ªam
 (

172 
basic_utf8_if°ªam
 (

173 c⁄° * 
fûe_«me
,

174 
°d
::
ios_ba£
::
›ímode
 
mode
 = std::
ios
::
ö


183 
basic_utf8_if°ªam
 (

184 c⁄° 
°d
::
°rög
& 
fûe_«me
,

185 
°d
::
ios_ba£
::
›ímode
 
mode
 = std::
ios
::
ö


194 
›í
(

195 c⁄° 
°d
::
°rög
& 
fûe_«me
,

196 
°d
::
ios_ba£
::
›ímode
 
mode
 = std::
ios
::
ö


205 
›í
 (

206 c⁄° * 
fûe_«me
,

207 
°d
::
ios_ba£
::
›ímode
 
mode
 = std::
ios
::
ö


216 
˛o£
 (

224 
	gbasic_utf8_if°ªam
<
	tunich¨
> 
	tutf8_uif°ªam
;

225 
	gbasic_utf8_if°ªam
<
	twch¨_t
> 
	tutf8_wif°ªam
;

	@viper/concurrentqueue-src/benchmarks/dlib/unordered_pair.h

3 #i‚de‡
DLIB_UNORDERED_PAiR_Hh_


4 
	#DLIB_UNORDERED_PAiR_Hh_


	)

6 
	~"£rülize.h
"

8 
«me•a˚
 
	gdlib


13 
	gãm∂©e
 <

14 
ty≥«me
 
	gT


16 
	sun‹dîed_∑ú


43 
T
 
	tty≥
;

44 
T
 
	tfú°_ty≥
;

45 
T
 
	t£c⁄d_ty≥
;

47 c⁄° 
T
 
	gfú°
;

48 c⁄° 
T
 
	g£c⁄d
;

50 
un‹dîed_∑ú
(Ë: 
fú°
(), 
£c⁄d
()

56 
un‹dîed_∑ú
(

57 c⁄° 
T
& 
a
,

58 c⁄° 
T
& 
b


60 
fú°
–
a
 < 
b
 ?á : b),

61 
£c⁄d
(
a
 < 
b
 ? b :á)

68 
ãm∂©e
 <
ty≥«me
 
U
>

69 
un‹dîed_∑ú
 (

70 c⁄° 
un‹dîed_∑ú
 <
U
>& 
p


72 
fú°
(
p
.first),

73 
£c⁄d
(
p
.second)

79 
	gun‹dîed_∑ú
& 
	g›î©‹
= (

80 c⁄° 
un‹dîed_∑ú
& 
ôem


87 
c⁄°_ˇ°
<
T
&>(
fú°
Ë
ôem
.first;

88 
	gc⁄°_ˇ°
<
	gT
&>(
	g£c⁄d
Ë
ôem
.
£c⁄d
;

89  *
	gthis
;

95 
	gãm∂©e
 <
ty≥«me
 
	gT
>

96 
boﬁ
 
	g›î©‹
==(c⁄° 
un‹dîed_∑ú
<
T
>& 
a
, c⁄° 
	gun‹dîed_∑ú
 <
	gT
>& 
	gb
)

98  
	ga
.
	gfú°
 =
b
.
fú°
 && 
a
.
£c⁄d
 == b.second;

101 
	gãm∂©e
 <
ty≥«me
 
	gT
>

102 
boﬁ
 
	g›î©‹
!=(c⁄° 
un‹dîed_∑ú
<
T
>& 
a
, c⁄° 
	gun‹dîed_∑ú
 <
	gT
>& 
	gb
)

104  !(
	ga
 =
b
);

107 
	gãm∂©e
 <
ty≥«me
 
	gT
>

108 
boﬁ
 
	g›î©‹
<(c⁄° 
	gun‹dîed_∑ú
<
	gT
>& 
	ga
, c⁄° un‹dîed_∑ú<T>& 
	gb
)

110  (
	ga
.
	gfú°
 < 
	gb
.fú° || (!(b.fú° <á.fú°Ë&&á.
	g£c⁄d
 < b.second));

113 
	gãm∂©e
 <
ty≥«me
 
	gT
>

114 
boﬁ
 
	g›î©‹
>(c⁄° 
	gun‹dîed_∑ú
<
	gT
>& 
	ga
, c⁄° un‹dîed_∑ú <T>& 
	gb
)

116  
	gb
 < 
	ga
;

119 
	gãm∂©e
 <
ty≥«me
 
	gT
>

120 
boﬁ
 
	g›î©‹
<=(c⁄° 
un‹dîed_∑ú
<
T
>& 
a
, c⁄° 
	gun‹dîed_∑ú
 <
	gT
>& 
	gb
)

122  !(
	gb
 < 
	ga
);

125 
	gãm∂©e
 <
ty≥«me
 
	gT
>

126 
boﬁ
 
	g›î©‹
>=(c⁄° 
un‹dîed_∑ú
<
T
>& 
a
, c⁄° 
	gun‹dîed_∑ú
 <
	gT
>& 
	gb
)

128  !(
	ga
 < 
	gb
);

131 
	gãm∂©e
 <
ty≥«me
 
	gT
>

132 
	gun‹dîed_∑ú
<
	gT
> 
make_un‹dîed_∑ú
 (c⁄° 
T
& 
a
, c⁄° T& 
b
)

134  
	gun‹dîed_∑ú
<
	gT
>(
	ga
,
	gb
);

139 
	gãm∂©e
 <
ty≥«me
 
	gT
>

140 
£rülize
 (

141 c⁄° 
un‹dîed_∑ú
<
T
>& 
ôem
,

142 
°d
::
o°ªam
& 
out


145 
åy


147 
£rülize
(
ôem
.
fú°
,
out
);

148 
£rülize
(
ôem
.
£c⁄d
,
out
);

150 
ˇtch
 (
£rüliz©i⁄_îr‹
& 
e
)

151 { 
throw
 
£rüliz©i⁄_îr‹
(
e
.
öfo
 + "\n while serializing object ofÅype unordered_pair"); }

154 
	gãm∂©e
 <
ty≥«me
 
	gT
>

155 
de£rülize
 (

156 
un‹dîed_∑ú
<
T
>& 
ôem
,

157 
°d
::
i°ªam
& 
ö


160 
åy


162 
T
 
a
, 
	gb
;

163 
de£rülize
(
a
,
ö
);

164 
de£rülize
(
b
,
ö
);

165 
	gôem
 = 
make_un‹dîed_∑ú
(
a
,
b
);

167 
ˇtch
 (
£rüliz©i⁄_îr‹
& 
e
)

168 { 
throw
 
£rüliz©i⁄_îr‹
(
e
.
öfo
 + "\n while deserializing object ofÅype unordered_pair"); }

	@viper/concurrentqueue-src/benchmarks/dlib/vectorstream.h

3 #i‚de‡
DLIB_VECTORSTReAMh_


4 
	#DLIB_VECTORSTReAMh_


	)

6 
	~"ve˘‹°ªam/ve˘‹°ªam.h
"

7 
	~"ve˘‹°ªam/un£rülize.h
"

	@viper/concurrentqueue-src/benchmarks/dlib/vectorstream/unserialize.h

3 #i‚de‡
DLIB_uNSERIALIZE_Hh_


4 
	#DLIB_uNSERIALIZE_Hh_


	)

6 
	~"un£rülize_ab°ø˘.h
"

8 
	~"../£rülize.h
"

9 
	~"../Ægs.h
"

10 
	~"ve˘‹°ªam.h
"

14 
«me•a˚
 
	gdlib


16 ˛as†
	cun£rülize
 : 
public
 
°d
::
i°ªam


18 ˛as†
	cmy°ªambuf
 : 
public
 
°d
::
°ªambuf


20 
°d
::
	tve˘‹
<>::
	tsize_ty≥
 size_type;

21 
size_ty≥
 
	gªad_pos
;

22 
	gpublic
:

23 
°d
::
ve˘‹
<> 
buf„r
;

24 
	g°d
::
i°ªam
& 
°r
;

26 
	gãm∂©e
 <
ty≥«me
 
	gT
>

27 
my°ªambuf
(

28 c⁄° 
T
& 
ôem
,

29 
°d
::
i°ªam
& 
°r_


31 
ªad_pos
(0),

32 
°r
(
°r_
)

35 
ve˘‹°ªam
 
v°r
(
buf„r
);

36 
£rülize
(
ôem
, 
v°r
);

42 
öt_ty≥
 
undîÊow
(

45 i‡(
	gªad_pos
 < 
	gbuf„r
.
size
())

46  
	g°©ic_ˇ°
<>(
	gbuf„r
[
ªad_pos
]);

48  
	g°r
.
≥ek
();

51 
öt_ty≥
 
uÊow
(

54 i‡(
	gªad_pos
 < 
	gbuf„r
.
size
())

55  
	g°©ic_ˇ°
<>(
	gbuf„r
[
ªad_pos
++]);

57  
	g°r
.
gë
();

60 
	g°d
::
°ªamsize
 
xsgën
 (

61 * 
s
,

62 
°d
::
°ªamsize
 
n


65 i‡(
ªad_pos
 < 
buf„r
.
size
())

67 c⁄° 
size_ty≥
 
num
 = 
°d
::
mö
<size_ty≥>(
n
, 
	gbuf„r
.
size
()-
	gªad_pos
);

68 
	g°d
::
mem˝y
(
s
, &
buf„r
[
ªad_pos
], 
num
);

69 
	gªad_pos
 +
num
;

70  
	gnum
;

74  
	g°r
.
rdbuf
()->
sgën
(
s
,
n
);

81 
	gpublic
:

83 
ãm∂©e
 <
ty≥«me
 
T
>

84 
un£rülize
 (

85 c⁄° 
T
& 
ôem
,

86 
°d
::
i°ªam
& 
°r


88 
°d
::
i°ªam
(&
buf
),

89 
buf
(
ôem
, 
°r
)

92 
	g¥iv©e
:

93 
my°ªambuf
 
buf
;

	@viper/concurrentqueue-src/benchmarks/dlib/vectorstream/unserialize_abstract.h

3 #unde‡
DLIB_uNSERIALIZE_ABSTRACT_Hh_


4 #ifde‡
DLIB_uNSERIALIZE_ABSTRACT_Hh_


6 
	~"../£rülize.h
"

7 
	~<io°ªam
>

9 
«me•a˚
 
	gdlib


11 ˛as†
	cun£rülize
 : 
public
 
°d
::
i°ªam


39 
public
:

41 
ãm∂©e
 <
ty≥«me
 
T
>

42 
un£rülize
 (

43 c⁄° 
T
& 
ôem
,

44 
°d
::
i°ªam
& 
ö


	@viper/concurrentqueue-src/benchmarks/dlib/vectorstream/vectorstream.h

3 #i‚de‡
DLIB_VECTORStREAM_Hh_


4 
	#DLIB_VECTORStREAM_Hh_


	)

6 
	~"ve˘‹°ªam_ab°ø˘.h
"

8 
	~<c°rög
>

9 
	~<io°ªam
>

10 
	~<°ªambuf
>

11 
	~<ve˘‹
>

12 
	~<c°dio
>

13 
	~"../Ægs.h
"

14 
	~"../as£π.h
"

16 #ifde‡
_MSC_VER


20 #¥agm®
w¨nög
(
dißbÀ
 : 4250)

23 
«me•a˚
 
	gdlib


25 ˛as†
	cve˘‹°ªam
 : 
public
 
°d
::
io°ªam


27 ˛as†
	cve˘‹_°ªambuf
 : 
public
 
°d
::
°ªambuf


29 
°d
::
	tve˘‹
<>::
	tsize_ty≥
 size_type;

30 
size_ty≥
 
	gªad_pos
;

31 
	gpublic
:

32 
°d
::
ve˘‹
<>& 
buf„r
;

34 
ve˘‹_°ªambuf
(

35 
°d
::
ve˘‹
<>& 
buf„r_


37 
ªad_pos
(0),

38 
buf„r
(
buf„r_
)

42 
£ekg
(
size_ty≥
 
pos
)

44 
	gªad_pos
 = 
pos
;

47 
pos_ty≥
 
£ekpos
’os_ty≥ 
pos
, 
°d
::
ios_ba£
::
›ímode
 
mode
 = std::ios_ba£::
ö
 | std::ios_ba£::
out
)

49  
£ekoff
(
pos
 - 
pos_ty≥
(
off_ty≥
(0)), 
°d
::
ios_ba£
::
beg
, 
mode
);

52 
pos_ty≥
 
£ekoff
(
off_ty≥
 
off
, 
°d
::
ios_ba£
::
£ekdú
 
dú
,

53 
°d
::
ios_ba£
::
›ímode
 
mode
 = std::ios_ba£::
ö
 | std::ios_ba£::
out
 )

55 
DLIB_CASSERT
(
mode
 =
°d
::
ios_ba£
::
ö
, "vectorstream doesÇot support std::ios_base::out");

56 
	gdú
)

58 
	g°d
::
ios_ba£
::
beg
:

59 
ªad_pos
 = 
off
;

61 
	g°d
::
ios_ba£
::
cur
:

62 
ªad_pos
 +
off
;

64 
	g°d
::
ios_ba£
::
íd
:

65 
ªad_pos
 = 
buf„r
.
size
(Ë+ 
off
;

70  
pos_ty≥
(
ªad_pos
);

75 
öt_ty≥
 
ovîÊow
 ( i¡_ty≥ 
c
)

77 i‡(
	gc
 !
EOF
Ë
buf„r
.
push_back
(
°©ic_ˇ°
<>(
c
));

78  
	gc
;

81 
	g°d
::
°ªamsize
 
x•uä
 ( c⁄° * 
s
, 
°d
::°ªamsizê
num
)

83 
buf„r
.
ö£π
(buf„r.
íd
(), 
s
, s+
num
);

84  
	gnum
;

89 
öt_ty≥
 
undîÊow
(

92 i‡(
	gªad_pos
 < 
	gbuf„r
.
size
())

93  
	g°©ic_ˇ°
<>(
	gbuf„r
[
ªad_pos
]);

95  
	gEOF
;

98 
öt_ty≥
 
uÊow
(

101 i‡(
	gªad_pos
 < 
	gbuf„r
.
size
())

102  
	g°©ic_ˇ°
<>(
	gbuf„r
[
ªad_pos
++]);

104  
	gEOF
;

107 
öt_ty≥
 
pbackÁû
(

108 
öt_ty≥
 
c


113 c⁄° 
	g¥ev
 = 
ªad_pos
-1;

114 i‡(
	gc
 !
EOF
 && 
¥ev
 < 
buf„r
.
size
() &&

115 
c
 !
°©ic_ˇ°
<>(
buf„r
[
¥ev
]))

117  
EOF
;

120 
	gªad_pos
 = 
¥ev
;

124 
	g°d
::
°ªamsize
 
xsgën
 (

125 * 
s
,

126 
°d
::
°ªamsize
 
n


129 i‡(
ªad_pos
 < 
buf„r
.
size
())

131 c⁄° 
size_ty≥
 
num
 = 
°d
::
mö
<size_ty≥>(
n
, 
	gbuf„r
.
size
()-
	gªad_pos
);

132 
	g°d
::
mem˝y
(
s
, &
buf„r
[
ªad_pos
], 
num
);

133 
	gªad_pos
 +
num
;

134  
	gnum
;

141 
	gpublic
:

143 
ve˘‹°ªam
 (

144 
°d
::
ve˘‹
<>& 
buf„r


146 
°d
::
io°ªam
(&
buf
),

147 
buf
(
buf„r
)

150 
ve˘‹°ªam
(c⁄° ve˘‹°ªam& 
‹i
Ë
dñëe
;

151 
ve˘‹°ªam
(ve˘‹°ªam&& 
ôem
Ë
dñëe
;

153 
	g¥iv©e
:

154 
ve˘‹_°ªambuf
 
buf
;

	@viper/concurrentqueue-src/benchmarks/dlib/vectorstream/vectorstream_abstract.h

3 #unde‡
DLIB_VECTORStREAM_ABSTRACT_Hh_


4 #ifde‡
DLIB_VECTORStREAM_ABSTRACT_Hh_


6 
	~<io°ªam
>

7 
	~<ve˘‹
>

9 
«me•a˚
 
	gdlib


11 ˛as†
	cve˘‹°ªam
 : 
public
 
°d
::
io°ªam


28 
public
:

30 
ve˘‹°ªam
 (

31 
°d
::
ve˘‹
<>& 
buf„r


46 
	g°d
::
i°ªam
& 
£ekg
 (

47 
°d
::
°ªampos
 
pos


	@viper/concurrentqueue-src/benchmarks/dlib/windows_magic.h

3 #i‚de‡
DLIB_WINDOWS_MAGIc_


4 
	#DLIB_WINDOWS_MAGIc_


	)

6 
	~"∂©f‹m.h
"

8 #ifde‡
WIN32


13 #i‚de‡
NOMINMAX


14 
	#NOMINMAX


16 

	)

18 #i‚de‡
_NO_W32_PSEUDO_MODIFIERS


19 
	#_NO_W32_PSEUDO_MODIFIERS


	)

23 #ifde‡
mö


24 #unde‡
mö


27 #ifde‡
max


28 #unde‡
max


31 #ifde‡
NO_MAKEFILE


35 #i‚de‡
_WINSOCKAPI_


36 
	#_WINSOCKAPI_


	)

42 #i‡
_WIN32_WINNT
 < 0x0500

43 #unde‡
_WIN32_WINNT


44 
	#_WIN32_WINNT
 0x0500

	)

	@viper/concurrentqueue-src/benchmarks/dlibqueue.h

1 #¥agm®
⁄˚


3 
	~<utûôy
>

4 
	~"dlib/pùe.h
"

5 
	~"wøµîs.h
"

7 
	gãm∂©e
<
ty≥«me
 
	gT
>

8 
	sDlibQueueWøµî


10 
	mpublic
:

11 
DummyTokí
 
	t¥odu˚r_tokí_t
;

12 
DummyTokí
 
	tc⁄sumî_tokí_t
;

14 
	mpublic
:

15 
DlibQueueWøµî
(Ë: 
q
(1024*1024*1024) { }

17 
ãm∂©e
<
ty≥«me
 
U
>

18 
ölöe
 
boﬁ
 
íqueue
(
U
&& 
ôem
)

20  
q
.
íqueue
(
°d
::
f‹w¨d
<
U
>(
ôem
));

23 
ölöe
 
boﬁ
 
åy_dequeue
(
T
& 
ôem
)

25  
	mq
.
dequeue_‹_timeout
(
ôem
, 0);

29 
boﬁ
 
íqueue
(
¥odu˚r_tokí_t
 c⁄°&, 
T
 c⁄°&Ë{  
	mÁl£
; }

30 
boﬁ
 
åy_íqueue
(
¥odu˚r_tokí_t
, 
T
 c⁄°&Ë{  
	mÁl£
; }

31 
boﬁ
 
åy_dequeue
(
c⁄sumî_tokí_t
, 
T
& 
ôem
Ë{  
	mÁl£
; }

32 
	mãm∂©e
<
ty≥«me
 
	mIt
> 
boﬁ
 
íqueue_bulk
(
It
, 
size_t
Ë{  
	mÁl£
; }

33 
	mãm∂©e
<
ty≥«me
 
	mIt
> 
boﬁ
 
íqueue_bulk
(
¥odu˚r_tokí_t
 c⁄°&, 
It
, 
size_t
Ë{  
	mÁl£
; }

34 
	mãm∂©e
<
ty≥«me
 
	mIt
> 
size_t
 
åy_dequeue_bulk
(
It
, size_t) {  0; }

35 
	mãm∂©e
<
ty≥«me
 
	mIt
> 
size_t
 
åy_dequeue_bulk
(
c⁄sumî_tokí_t
, 
It
, size_t) {  0; }

37 
	m¥iv©e
:

38 
dlib
::
pùe
<
T
> 
q
;

	@viper/concurrentqueue-src/benchmarks/lockbasedqueue.h

5 #¥agm®
⁄˚


7 
	~"wøµîs.h
"

8 
	~<muãx
>

13 
	gãm∂©e
<
ty≥«me
 
	gT
>

14 ˛as†
	cLockBa£dQueue


16 
	mpublic
:

17 
DummyTokí
 
	t¥odu˚r_tokí_t
;

18 
DummyTokí
 
	tc⁄sumî_tokí_t
;

20 
	mpublic
:

21 
	$LockBa£dQueue
()

23 
èû
 = 
nuŒ±r
;

24 
hód
 = 
nuŒ±r
;

27 ~
	$LockBa£dQueue
()

29 
hód
 !
nuŒ±r
) {

30 
Node
* 
√xt
 = 
hód
->next;

31 
dñëe
 
hód
;

32 
hód
 = 
√xt
;

34 
	}
}

36 
	gãm∂©e
<
ty≥«me
 
	gU
>

37 
ölöe
 
boﬁ
 
	$íqueue
(
U
&& 
ôem
)

39 
Node
* 
node
 = 
√w
 
	`Node
(
ôem
);

41 
°d
::
lock_gu¨d
<°d::
muãx
> 
	`gu¨d
(mutex);

42 i‡(
èû
 =
nuŒ±r
) {

43 
hód
 = 
èû
 = 
node
;

46 
èû
->
√xt
 = 
node
;

47 
èû
 = 
node
;

50  
åue
;

51 
	}
}

53 
ölöe
 
boﬁ
 
	$åy_dequeue
(
T
& 
ôem
)

55 
°d
::
lock_gu¨d
<°d::
muãx
> 
	`gu¨d
(mutex);

56 i‡(
hód
 =
nuŒ±r
) {

57  
Ál£
;

60 
ôem
 = 
°d
::
	`move
(
hód
->item);

61 
Node
* 
√xt
 = 
hód
->next;

62 
dñëe
 
hód
;

63 
hód
 = 
√xt
;

64 i‡(
hód
 =
nuŒ±r
) {

65 
èû
 = 
nuŒ±r
;

67  
åue
;

69 
	}
}

72 
boﬁ
 
	$íqueue
(
¥odu˚r_tokí_t
 c⁄°&, 
T
 c⁄°&Ë{  
Ál£
; 
	}
}

73 
boﬁ
 
	$åy_íqueue
(
¥odu˚r_tokí_t
, 
T
 c⁄°&Ë{  
Ál£
; 
	}
}

74 
boﬁ
 
	$åy_dequeue
(
c⁄sumî_tokí_t
, 
T
& 
ôem
Ë{  
Ál£
; 
	}
}

75 
	gãm∂©e
<
ty≥«me
 
	gIt
> 
boﬁ
 
	$íqueue_bulk
(
It
, 
size_t
Ë{  
Ál£
; 
	}
}

76 
	gãm∂©e
<
ty≥«me
 
	gIt
> 
boﬁ
 
	$íqueue_bulk
(
¥odu˚r_tokí_t
 c⁄°&, 
It
, 
size_t
Ë{  
Ál£
; 
	}
}

77 
	gãm∂©e
<
ty≥«me
 
	gIt
> 
size_t
 
	$åy_dequeue_bulk
(
It
, 
size_t
Ë{  0; 
	}
}

78 
	gãm∂©e
<
ty≥«me
 
	gIt
> 
size_t
 
	$åy_dequeue_bulk
(
c⁄sumî_tokí_t
, 
It
, 
size_t
Ë{  0; 
	}
}

80 
	g¥iv©e
:

81 
	sNode


83 
T
 
ôem
;

84 
Node
* 
	g√xt
;

86 
	gãm∂©e
<
ty≥«me
 
	gU
>

87 
Node
(
U
&& 
ôem
)

88 : 
ôem
(
°d
::
f‹w¨d
<
U
>(ôem)), 
√xt
(
nuŒ±r
)

93 
	g°d
::
muãx
 mutex;

94 
Node
* 
	ghód
;

95 
Node
* 
	gèû
;

	@viper/concurrentqueue-src/benchmarks/simplelockfree.h

5 #¥agm®
⁄˚


7 
	~"wøµîs.h
"

8 
	~<©omic
>

9 
	~<c°döt
>

11 #i‡
deföed
(
_MSC_VER
) && _MSC_VER < 1900

12 
	#Æig«s
(
T
)

	)

16 
	gãm∂©e
<
ty≥«me
 
	gT
>

17 ˛as†
	cSim∂eLockFªeQueue


19 
	mpublic
:

20 
DummyTokí
 
	t¥odu˚r_tokí_t
;

21 
DummyTokí
 
	tc⁄sumî_tokí_t
;

24 c⁄° 
	mUBER_BLOCKS
 = 256;

25 c⁄° 
	mUBER_BLOCK_SIZE
 = 256;

26 c⁄° 
	mULTRA_BLOCK_SIZE
 = 256;

27 c⁄° 
	mSUPER_BLOCK_SIZE
 = 256;

28 c⁄° 
	mBLOCK_SIZE
 = 128;

30 
	m¥iv©e
:

31 c⁄° 
uöt64_t
 
VERSION_MASK
 = 0xFFFFFF0000000000ULL;

32 c⁄° 
uöt64_t
 
	mVERSION_INCR
 = 0x0000010000000000ULL;

33 c⁄° 
uöt64_t
 
	mUBER_BLOCK_IDX_MASK
 = 0xFF00000000ULL;

34 c⁄° 
uöt64_t
 
	mUBER_BLOCK_MASK
 = 0x00FF000000ULL;

35 c⁄° 
uöt64_t
 
	mULTRA_BLOCK_MASK
 = 0x0000FF0000ULL;

36 c⁄° 
uöt64_t
 
	mSUPER_BLOCK_MASK
 = 0x000000FF00ULL;

37 c⁄° 
uöt64_t
 
	mBLOCK_MASK
 = 0x00000000FEULL;

39 c⁄° 
uöt64_t
 
	mUBER_BLOCK_IDX_SHIFT
 = 32;

40 c⁄° 
uöt64_t
 
	mUBER_BLOCK_SHIFT
 = 24;

41 c⁄° 
uöt64_t
 
	mULTRA_BLOCK_SHIFT
 = 16;

42 c⁄° 
uöt64_t
 
	mSUPER_BLOCK_SHIFT
 = 8;

43 c⁄° 
uöt64_t
 
	mBLOCK_SHIFT
 = 1;

45 
	m°d
::
	tuöt64_t
 
	tidx_t
;

47 
	mpublic
:

48 
	$Sim∂eLockFªeQueue
()

49 : 
	`√xtNodeIdx
(2), 
	$‰ìLi°Hód
(0)

52 autÿ
öôülNode
 = 
	`Æloˇã_bœnk_node
();

53 
hód
.
	`°‹e
(
	`£t_c⁄sumed_Êag
(
öôülNode
), 
°d
::
mem‹y_‹dî_ªœxed
);

54 
èû
.
	`°‹e
(
öôülNode
, 
°d
::
mem‹y_‹dî_ªœxed
);

55 
°d
::
	`©omic_thªad_„n˚
(°d::
mem‹y_‹dî_£q_c°
);

58 ~
	$Sim∂eLockFªeQueue
()

60 
°d
::
	`©omic_thªad_„n˚
(°d::
mem‹y_‹dî_£q_c°
);

61 
idx_t
 
idx
 = 
hód
.
	`lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
);

62 i‡(
	`is_c⁄sumed
(
idx
)) {

63 
idx
 = 
	`˛ór_c⁄sumed_Êag
(idx);

64 autÿ
node
 = 
	`gë_node_©
(
idx
);

65 autÿ
√xt
 = 
node
->√xt.
	`lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
);

66 
node
->~
	`Node
();

67 
idx
 = 
√xt
;

69 
idx
 != 0) {

70 autÿ
node
 = 
	`gë_node_©
(
idx
);

71 autÿ
√xt
 = 
node
->√xt.
	`lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
);

72 
node
->
	`ôem
()->~
	`T
();

73 
node
->~
	`Node
();

74 
idx
 = 
√xt
;

77 
idx
 = 
‰ìLi°Hód
.
	`lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
);

78 
idx
 != 0) {

79 autÿ
node
 = 
	`gë_node_©
(
idx
);

80 autÿ
√xt
 = 
node
->√xt.
	`lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
);

81 
node
->~
	`Node
();

82 
idx
 = 
√xt
;

84 
	}
}

87 
	gãm∂©e
<
ty≥«me
 
	gU
>

88 
ölöe
 
boﬁ
 
	$íqueue
(
U
&& 
ôem
)

90 
idx_t
 
nodeIdx
 = 
	`Æloˇã_node_f‹
(
°d
::
f‹w¨d
<
U
>(
ôem
));

92 autÿ
èû_
 = 
èû
.
	`lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
);

93 !
èû
.
	`com∑ª_exch™ge_wók
(
èû_
, 
nodeIdx
, 
°d
::
mem‹y_‹dî_ªÀa£
, std::
mem‹y_‹dî_ªœxed
))

95 
	`gë_node_©
(
èû_
)->
√xt
.
	`°‹e
(
nodeIdx
, 
°d
::
mem‹y_‹dî_ªÀa£
);

97  
åue
;

98 
	}
}

100 
ölöe
 
boﬁ
 
	$åy_dequeue
(
T
& 
ôem
)

102 
åue
) {

103 autÿ
øwHód_
 = 
hód
.
	`lﬂd
(
°d
::
mem‹y_‹dî_acquúe
);

104 autÿ
hód_
 = 
	`˛ór_c⁄sumed_Êag
(
øwHód_
);

105 autÿ
hódNode
 = 
	`gë_node_©
(
hód_
);

106 autÿ
√xt
 = 
hódNode
->√xt.
	`lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
);

107 i‡(
√xt
 == 0) {

109 i‡(
	`is_c⁄sumed
(
øwHód_
)) {

110  
Ál£
;

113 i‡(
hód
.
	`com∑ª_exch™ge_°r⁄g
(
hód_
, 
	`£t_c⁄sumed_Êag
(hód_), 
°d
::
mem‹y_‹dî_ªÀa£
, std::
mem‹y_‹dî_ªœxed
)) {

115 
ôem
 = 
°d
::
	`move
(*
hódNode
->
	`ôem
());

116 
hódNode
->
	`ôem
()->~
	`T
();

117  
åue
;

124 i‡(
hód
.
	`com∑ª_exch™ge_wók
(
øwHód_
, 
√xt
, 
°d
::
mem‹y_‹dî_acq_ªl
, std::
mem‹y_‹dî_ªœxed
)) {

126 i‡(!
	`is_c⁄sumed
(
øwHód_
)) {

127 
ôem
 = 
°d
::
	`move
(*
hódNode
->
	`ôem
());

128 
hódNode
->
	`ôem
()->~
	`T
();

131 
	`add_node_to_‰ì_li°
(
hód_
, 
hódNode
);

133 i‡(!
	`is_c⁄sumed
(
øwHód_
)) {

134  
åue
;

139 
	}
}

142 
boﬁ
 
	$íqueue
(
¥odu˚r_tokí_t
 c⁄°&, 
T
 c⁄°&Ë{  
Ál£
; 
	}
}

143 
boﬁ
 
	$åy_íqueue
(
¥odu˚r_tokí_t
, 
T
 c⁄°&Ë{  
Ál£
; 
	}
}

144 
boﬁ
 
	$åy_dequeue
(
c⁄sumî_tokí_t
, 
T
& 
ôem
Ë{  
Ál£
; 
	}
}

145 
	gãm∂©e
<
ty≥«me
 
	gIt
> 
boﬁ
 
	$íqueue_bulk
(
It
, 
size_t
Ë{  
Ál£
; 
	}
}

146 
	gãm∂©e
<
ty≥«me
 
	gIt
> 
boﬁ
 
	$íqueue_bulk
(
¥odu˚r_tokí_t
 c⁄°&, 
It
, 
size_t
Ë{  
Ál£
; 
	}
}

147 
	gãm∂©e
<
ty≥«me
 
	gIt
> 
size_t
 
	$åy_dequeue_bulk
(
It
, 
size_t
Ë{  0; 
	}
}

148 
	gãm∂©e
<
ty≥«me
 
	gIt
> 
size_t
 
	$åy_dequeue_bulk
(
c⁄sumî_tokí_t
, 
It
, 
size_t
Ë{  0; 
	}
}

150 
	g¥iv©e
:

151 
	sNode


153 
°d
::
©omic
<
idx_t
> 
√xt
;

155 
Æig«s
(
T
)

156 
	gøwIãm
[(
T
)];

158 
	gãm∂©e
<
ty≥«me
 
	gU
>

159 
Node
(
U
&& 
ôem
)

160 : 
√xt
(0)

162 
√w
 (
this
->
ôem
()Ë
T
(
°d
::
f‹w¨d
<
U
>(item));

165 
Node
()

166 : 
√xt
(0)

170 
ölöe
 
T
* 
ôem
(Ë{  
ªöãΩªt_ˇ°
<T*>(
øwIãm
); }

173 
	sBlock


175 
Æig«s
(
Node
)

176 
	gnodes
[(
Node
Ë* 
BLOCK_SIZE
];

178 
ölöe
 * 
node_pos
(
idx_t
 
idx
Ë{  
	gnodes
 + ((
	gidx
 & 
	gBLOCK_MASK
Ë>> 
	gBLOCK_SHIFT
Ë* (
	gNode
); }

181 
	gãm∂©e
<
ty≥«me
 
	gTSubBlock
, 
	gBlockSize
>

182 
	sHighîOrdîBlock


184 
	g°d
::
©omic
<
TSubBlock
*> 
subblocks
[
BlockSize
];

186 
HighîOrdîBlock
()

188 
	gi
 = 0; i !
BlockSize
; ++i) {

189 
	gsubblocks
[
i
].
°‹e
(
nuŒ±r
, 
°d
::
mem‹y_‹dî_ªÀa£
);

193 ~
HighîOrdîBlock
()

195 
	gi
 = 0; i !
BlockSize
; ++i) {

196 i‡(
	gsubblocks
[
i
].
lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
Ë!
nuŒ±r
) {

197 
dñëe
 
subblocks
[
i
].
lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
);

203 
	gHighîOrdîBlock
<
	tBlock
, 
	tSUPER_BLOCK_SIZE
> 
	tSu≥rBlock
;

204 
	gHighîOrdîBlock
<
	tSu≥rBlock
, 
	tULTRA_BLOCK_SIZE
> 
	tU…øBlock
;

205 
	gHighîOrdîBlock
<
	tU…øBlock
, 
	tUBER_BLOCK_SIZE
> 
	tUbîBlock
;

206 
	gHighîOrdîBlock
<
	tUbîBlock
, 
	tUBER_BLOCKS
> 
	tUbîBlockC⁄èöî
;

209 
	g¥iv©e
:

210 
ölöe
 
idx_t
 
	$£t_c⁄sumed_Êag
(
idx_t
 
idx
)

212  
idx
 | (
idx_t
)1;

213 
	}
}

215 
ölöe
 
idx_t
 
	$˛ór_c⁄sumed_Êag
(
idx_t
 
idx
)

217  
idx
 & ~(
idx_t
)1;

218 
	}
}

220 
ölöe
 
boﬁ
 
	$is_c⁄sumed
(
idx_t
 
idx
)

222  (
idx
 & 1) != 0;

223 
	}
}

226 
ölöe
 
	$add_node_to_‰ì_li°
(
idx_t
 
idx
, 
Node
* 
node
)

228 autÿ
hód
 = 
‰ìLi°Hód
.
	`lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
);

230 
node
->
√xt
.
	`°‹e
(
hód
, 
°d
::
mem‹y_‹dî_ªœxed
);

231 } !
‰ìLi°Hód
.
	`com∑ª_exch™ge_wók
(
hód
, 
idx
, 
°d
::
mem‹y_‹dî_ªÀa£
, std::
mem‹y_‹dî_ªœxed
));

232 
	}
}

234 
ölöe
 
idx_t
 
	$åy_gë_node_‰om_‰ì_li°
()

236 autÿ
hód
 = 
‰ìLi°Hód
.
	`lﬂd
(
°d
::
mem‹y_‹dî_acquúe
);

237 
hód
 !0 && !
‰ìLi°Hód
.
	`com∑ª_exch™ge_wók
(hód, 
	`gë_node_©
(hód)->
√xt
.
	`lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
), std::
mem‹y_‹dî_acquúe
)) {

241 i‡(
hód
 != 0) {

243 
hód
 = (hód & ~
VERSION_MASK
Ë| ((hód + 
VERSION_INCR
) & VERSION_MASK);

245  
hód
;

246 
	}
}

249 
ölöe
 
Node
* 
	$gë_node_©
(
idx_t
 
idx
)

251 autÿ
ubîBlock
 = 
ubîBlockC⁄èöî
.
subblocks
[(
idx
 & 
UBER_BLOCK_IDX_MASK
Ë>> 
UBER_BLOCK_IDX_SHIFT
].
	`lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
);

252 autÿ
u…øBlock
 = 
ubîBlock
->
subblocks
[(
idx
 & 
UBER_BLOCK_MASK
Ë>> 
UBER_BLOCK_SHIFT
].
	`lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
);

253 autÿ
su≥rBlock
 = 
u…øBlock
->
subblocks
[(
idx
 & 
ULTRA_BLOCK_MASK
Ë>> 
ULTRA_BLOCK_SHIFT
].
	`lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
);

254 autÿ
block
 = 
su≥rBlock
->
subblocks
[(
idx
 & 
SUPER_BLOCK_MASK
Ë>> 
SUPER_BLOCK_SHIFT
].
	`lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
);

255  
ªöãΩªt_ˇ°
<
Node
*>(
block
->
	`node_pos
(
idx
));

256 
	}
}

258 
	gãm∂©e
<
ty≥«me
 
	gU
>

259 
ölöe
 
idx_t
 
	$Æloˇã_node_f‹
(
U
&& 
ôem
)

261 autÿ
idx
 = 
	`åy_gë_node_‰om_‰ì_li°
();

262 i‡(
idx
 != 0) {

263 autÿ
node
 = 
	`gë_node_©
(
idx
);

264 
node
->
√xt
.
	`°‹e
(0, 
°d
::
mem‹y_‹dî_ªœxed
);

265 
	`√w
 (
node
->
	`ôem
()Ë
	`T
(
°d
::
f‹w¨d
<
U
>(
ôem
));

266  
idx
;

268 
	`√w
 (
	`√w_node_addªss
(
idx
)Ë
	`Node
(
°d
::
f‹w¨d
<
U
>(
ôem
));

269  
idx
;

270 
	}
}

272 
ölöe
 
idx_t
 
	$Æloˇã_bœnk_node
()

274 
idx_t
 
idx
;

275 
	`√w
 (
	`√w_node_addªss
(
idx
)Ë
	`Node
();

276  
idx
;

277 
	}
}

279 
ölöe
 * 
	$√w_node_addªss
(
idx_t
& 
idx
)

281 
idx
 = 
√xtNodeIdx
.
	`„tch_add
(
°©ic_ˇ°
<
idx_t
>(1Ë<< 
BLOCK_SHIFT
, 
°d
::
mem‹y_‹dî_ªœxed
);

283 
°d
::
size_t
 
ubîBlockC⁄èöîIdx
 = (
idx
 & 
UBER_BLOCK_IDX_MASK
Ë>> 
UBER_BLOCK_IDX_SHIFT
;

284 
°d
::
size_t
 
ubîBlockIdx
 = (
idx
 & 
UBER_BLOCK_MASK
Ë>> 
UBER_BLOCK_SHIFT
;

285 
°d
::
size_t
 
u…øBlockIdx
 = (
idx
 & 
ULTRA_BLOCK_MASK
Ë>> 
ULTRA_BLOCK_SHIFT
;

286 
°d
::
size_t
 
su≥rBlockIdx
 = (
idx
 & 
SUPER_BLOCK_MASK
Ë>> 
SUPER_BLOCK_SHIFT
;

288 autÿ
ubîBlock
 = 
lookup_subblock
<
UbîBlockC⁄èöî
, 
UbîBlock
>(&
ubîBlockC⁄èöî
, 
ubîBlockC⁄èöîIdx
);

289 autÿ
u…øBlock
 = 
lookup_subblock
<
UbîBlock
, 
U…øBlock
>(
ubîBlock
, 
ubîBlockIdx
);

290 autÿ
su≥rBlock
 = 
lookup_subblock
<
U…øBlock
, 
Su≥rBlock
>(
u…øBlock
, 
u…øBlockIdx
);

291 autÿ
block
 = 
lookup_subblock
<
Su≥rBlock
, 
Block
>(
su≥rBlock
, 
su≥rBlockIdx
);

292  
block
->
	`node_pos
(
idx
);

293 
	}
}

295 
	gãm∂©e
<
ty≥«me
 
	gTBlock
,Åy≥«mê
	gTSubBlock
>

296 
ölöe
 
TSubBlock
* 
	$lookup_subblock
(
TBlock
* 
block
, 
°d
::
size_t
 
idx
)

298 autÿ
±r
 = 
block
->
subblocks
[
idx
].
	`lﬂd
(
°d
::
mem‹y_‹dî_acquúe
);

299 i‡(
±r
 =
nuŒ±r
) {

300 autÿ
√wBlock
 = 
√w
 
	`TSubBlock
();

301 i‡(!
block
->
subblocks
[
idx
].
	`com∑ª_exch™ge_°r⁄g
(
±r
, 
√wBlock
, 
°d
::
mem‹y_‹dî_ªÀa£
, std::
mem‹y_‹dî_acquúe
)) {

302 
dñëe
 
√wBlock
;

305 
±r
 = 
√wBlock
;

308  
±r
;

309 
	}
}

311 
	g¥iv©e
:

312 
°d
::
©omic
<
idx_t
> 
√xtNodeIdx
;

313 
	g°d
::
©omic
<
idx_t
> 
hód
;

314 
	g°d
::
©omic
<
idx_t
> 
èû
;

315 
	g°d
::
©omic
<
idx_t
> 
‰ìLi°Hód
;

317 
UbîBlockC⁄èöî
 
	gubîBlockC⁄èöî
;

	@viper/concurrentqueue-src/benchmarks/stdqueue.h

3 #¥agm®
⁄˚


5 
	~<queue
>

7 
	~"wøµîs.h
"

10 
	gãm∂©e
<
ty≥«me
 
	gT
>

11 ˛as†
	cStdQueueWøµî


13 
	mpublic
:

14 
DummyTokí
 
	t¥odu˚r_tokí_t
;

15 
DummyTokí
 
	tc⁄sumî_tokí_t
;

17 
	mpublic
:

18 
ãm∂©e
<
ty≥«me
 
U
>

19 
ölöe
 
boﬁ
 
	$íqueue
(
U
&& 
ôem
)

21 
q
.
	`push
(
°d
::
f‹w¨d
<
U
>(
ôem
));

22  
åue
;

25 
ölöe
 
boﬁ
 
	$åy_dequeue
(
T
& 
ôem
)

27 i‡(
q
.
	`em±y
()) {

28  
Ál£
;

31 
ôem
 = 
°d
::
	`move
(
q
.
	`‰⁄t
());

32 
q
.
	`p›
();

33  
åue
;

34 
	}
}

37 
boﬁ
 
	$íqueue
(
¥odu˚r_tokí_t
 c⁄°&, 
T
 c⁄°&Ë{  
Ál£
; 
	}
}

38 
boﬁ
 
	$åy_íqueue
(
¥odu˚r_tokí_t
, 
T
 c⁄°&Ë{  
Ál£
; 
	}
}

39 
boﬁ
 
	$åy_dequeue
(
c⁄sumî_tokí_t
, 
T
& 
ôem
Ë{  
Ál£
; 
	}
}

40 
	gãm∂©e
<
ty≥«me
 
	gIt
> 
boﬁ
 
	$íqueue_bulk
(
It
, 
size_t
Ë{  
Ál£
; 
	}
}

41 
	gãm∂©e
<
ty≥«me
 
	gIt
> 
boﬁ
 
	$íqueue_bulk
(
¥odu˚r_tokí_t
 c⁄°&, 
It
, 
size_t
Ë{  
Ál£
; 
	}
}

42 
	gãm∂©e
<
ty≥«me
 
	gIt
> 
size_t
 
	$åy_dequeue_bulk
(
It
, 
size_t
Ë{  0; 
	}
}

43 
	gãm∂©e
<
ty≥«me
 
	gIt
> 
size_t
 
	$åy_dequeue_bulk
(
c⁄sumî_tokí_t
, 
It
, 
size_t
Ë{  0; 
	}
}

45 
	g¥iv©e
:

46 
°d
::
queue
<
T
> 
q
;

	@viper/concurrentqueue-src/benchmarks/tbb/aggregator.h

21 #i‚de‡
__TBB__aggªg©‹_H


22 
	#__TBB__aggªg©‹_H


	)

24 #i‡!
TBB_PREVIEW_AGGREGATOR


25 #îr‹ 
Së
 
TBB_PREVIEW_AGGREGATOR
 
bef‹e
 
ö˛udög
 
aggªg©‹
.
h


28 
	~"©omic.h
"

29 
	~"tbb_¥ofûög.h
"

31 
«me•a˚
 
	gtbb
 {

32 
«me•a˚
 
	göãrÁ˚6
 {

34 
usög
 
«me•a˚
 
	gtbb
::
öã∫Æ
;

36 ˛as†
	caggªg©‹_›î©i⁄
 {

37 
	gãm∂©e
<
ty≥«me
 
	gh™dÀr_ty≥
> 
‰õnd
 
˛ass
 
	gaggªg©‹_ext
;

38 
uöçå_t
 
	g°©us
;

39 
aggªg©‹_›î©i⁄
* 
	gmy_√xt
;

40 
	gpublic
:

41 
	eaggªg©‹_›î©i⁄_°©us
 { 
agg_waôög
=0, 
	gagg_föished
 };

42 
aggªg©‹_›î©i⁄
(Ë: 
°©us
(
agg_waôög
), 
my_√xt
(
NULL
) {}

44 
°¨t
(Ë{ 
ˇŒ_ôt_nŸify
(
acquúed
, &
°©us
); }

47 
föish
(Ë{ 
ôt_°‹e_w‹d_wôh_ªÀa£
(
°©us
, 
uöçå_t
(
agg_föished
)); }

48 
aggªg©‹_›î©i⁄
* 
√xt
(Ë{  
ôt_hide_lﬂd_w‹d
(
my_√xt
);}

49 
£t_√xt
(
aggªg©‹_›î©i⁄
* 
n
Ë{ 
ôt_hide_°‹e_w‹d
(
my_√xt
,Ç); }

52 
«me•a˚
 
	göã∫Æ
 {

54 ˛as†
	cbasic_›î©i⁄_ba£
 : 
public
 
aggªg©‹_›î©i⁄
 {

55 
‰õnd
 
˛ass
 
basic_h™dÀr
;

56 
vútuÆ
 
≠∂y_body
() = 0;

57 
	gpublic
:

58 
basic_›î©i⁄_ba£
(Ë: 
aggªg©‹_›î©i⁄
() {}

59 
vútuÆ
 ~
basic_›î©i⁄_ba£
() {}

62 
	gãm∂©e
<
ty≥«me
 
	gBody
>

63 
˛ass
 
	gbasic_›î©i⁄
 : 
public
 
basic_›î©i⁄_ba£
, 
	gno_assign
 {

64 c⁄° 
	gBody
& 
	gmy_body
;

65  
≠∂y_body
(Ë{ 
my_body
(); }

66 
	gpublic
:

67 
basic_›î©i⁄
(c⁄° 
Body
& 
b
Ë: 
basic_›î©i⁄_ba£
(), 
my_body
(b) {}

70 ˛as†
	cbasic_h™dÀr
 {

71 
	gpublic
:

72 
basic_h™dÀr
() {}

73 
›î©‹
()(
aggªg©‹_›î©i⁄
* 
›_li°
) const {

74 
›_li°
) {

81 
basic_›î©i⁄_ba£
& 
ªque°
 = 
°©ic_ˇ°
<basic_›î©i⁄_ba£&>(*
›_li°
);

83 
	g›_li°
 = 
›_li°
->
√xt
();

84 
	gªque°
.
°¨t
();

85 
	gªque°
.
≠∂y_body
();

86 
	gªque°
.
föish
();

96 
	gãm∂©e
 <
ty≥«me
 
	gh™dÀr_ty≥
>

97 ˛as†
	caggªg©‹_ext
 : 
tbb
::
öã∫Æ
::
no_c›y
 {

98 
public
:

99 
aggªg©‹_ext
(c⁄° 
h™dÀr_ty≥
& 
h
Ë: 
h™dÀr_busy
(0), 
h™dÀ_›î©i⁄s
(hË{ 
	gmaûbox
 = 
NULL
; }

103 
¥o˚ss
(
aggªg©‹_›î©i⁄
 *
›
Ë{ 
execuã_im∂
(*op); }

105 
	g¥Ÿe˘ed
:

108 
execuã_im∂
(
aggªg©‹_›î©i⁄
& 
›
) {

109 
aggªg©‹_›î©i⁄
* 
ªs
;

116 
ˇŒ_ôt_nŸify
(
ªÀasög
, &(
›
.
°©us
));

121 
	g›
.
	gmy_√xt
 = 
ªs
 = 
maûbox
;

122 } 
	gmaûbox
.
com∑ª_™d_sw≠
(&
›
, 
ªs
) !=Ñes);

123 i‡(!
	gªs
) {

126 
ˇŒ_ôt_nŸify
(
acquúed
, &
maûbox
);

127 
°¨t_h™dÀ_›î©i⁄s
();

128 
__TBB_ASSERT
(
›
.
°©us
, 
NULL
);

131 
ˇŒ_ôt_nŸify
(
¥ï¨e
, &(
›
.
°©us
));

132 
•ö_waô_whûe_eq
(
›
.
°©us
, 
uöçå_t
(
aggªg©‹_›î©i⁄
::
agg_waôög
));

133 
ôt_lﬂd_w‹d_wôh_acquúe
(
›
.
°©us
);

138 
	g¥iv©e
:

140 
©omic
<
aggªg©‹_›î©i⁄
 *> 
maûbox
;

144 
uöçå_t
 
	gh™dÀr_busy
;

146 
h™dÀr_ty≥
 
	gh™dÀ_›î©i⁄s
;

149 
°¨t_h™dÀ_›î©i⁄s
() {

150 
aggªg©‹_›î©i⁄
 *
	g≥ndög_›î©i⁄s
;

158 
ˇŒ_ôt_nŸify
(
¥ï¨e
, &
h™dÀr_busy
);

160 
•ö_waô_u¡û_eq
(
h™dÀr_busy
, 
uöçå_t
(0));

161 
ˇŒ_ôt_nŸify
(
acquúed
, &
h™dÀr_busy
);

163 
__TBB_°‹e_wôh_ªÀa£
(
h™dÀr_busy
, 
uöçå_t
(1));

168 
ˇŒ_ôt_nŸify
(
ªÀasög
, &
maûbox
);

170 
	g≥ndög_›î©i⁄s
 = 
maûbox
.
„tch_™d_°‹e
(
NULL
);

173 
h™dÀ_›î©i⁄s
(
≥ndög_›î©i⁄s
);

176 
ôt_°‹e_w‹d_wôh_ªÀa£
(
h™dÀr_busy
, 
uöçå_t
(0));

181 
˛ass
 
	gaggªg©‹
 : 
¥iv©e
 
aggªg©‹_ext
<
öã∫Æ
::
basic_h™dÀr
> {

182 
public
:

183 
aggªg©‹
(Ë: 
aggªg©‹_ext
<
öã∫Æ
::
basic_h™dÀr
>(internal::basic_handler()) {}

187 
ãm∂©e
<
ty≥«me
 
Body
>

188 
execuã
(c⁄° 
Body
& 
b
) {

189 
öã∫Æ
::
basic_›î©i⁄
<
Body
> 
›
(
b
);

190 
	gthis
->
execuã_im∂
(
›
);

196 
usög
 
	göãrÁ˚6
::
aggªg©‹
;

197 
usög
 
	göãrÁ˚6
::
aggªg©‹_ext
;

198 
usög
 
	göãrÁ˚6
::
aggªg©‹_›î©i⁄
;

	@viper/concurrentqueue-src/benchmarks/tbb/aligned_space.h

21 #i‚de‡
__TBB_Æig√d_•a˚_H


22 
	#__TBB_Æig√d_•a˚_H


	)

24 
	~"tbb_°ddef.h
"

25 
	~"tbb_machöe.h
"

27 
«me•a˚
 
	gtbb
 {

32 
	gãm∂©e
<
ty≥«me
 
	gT
,
size_t
 
	gN
=1>

33 ˛as†
	cÆig√d_•a˚
 {

34 
¥iv©e
:

35 
__TBB_Ty≥WôhAlignmítAtLó°AsSåi˘
(
	tT
Ë
	tñemít_ty≥
;

36 
ñemít_ty≥
 
	g¨øy
[((
T
)*
N
+(element_type)-1)/(element_type)];

37 
	gpublic
:

39 
T
* 
begö
(Ë{ 
öã∫Æ
::
pu¬ed_ˇ°
<T*>(
this
);}

42 
T
* 
íd
(Ë{ 
begö
()+
	gN
;}

	@viper/concurrentqueue-src/benchmarks/tbb/arena.cpp

21 
	~"scheduÀr.h
"

22 
	~"govîn‹.h
"

23 
	~"¨ía.h
"

24 
	~"ôt_nŸify.h
"

25 
	~"£m≠h‹e.h
"

27 
	~<fun˘i⁄Æ
>

29 #i‡
__TBB_STATISTICS_STDOUT


30 
	~<c°dio
>

33 
«me•a˚
 
	gtbb
 {

34 
«me•a˚
 
	göã∫Æ
 {

36 
	g¨ía
::
¥o˚ss
–
gíîic_scheduÀr
& 
s
 ) {

37 
__TBB_ASSERT
–
is_Æive
(
my_gu¨d
), 
NULL
 );

38 
__TBB_ASSERT
–
govîn‹
::
is_£t
(&
s
), 
NULL
 );

39 
__TBB_ASSERT
–!
s
.
my_ö√rmo°_ru¬ög_èsk
, 
NULL
 );

40 
__TBB_ASSERT
–!
s
.
my_di•©chög_èsk
, 
NULL
 );

42 
__TBB_ASSERT
–
my_num_¶Ÿs
 !1, 
NULL
 );

44 
	gödex
 = 
s
.
my_¨ía_ödex
 < 
my_num_¶Ÿs
 ? s.my_¨ía_ödex : s.
my_øndom
.
gë
() % (my_num_slots - 1) + 1,

45 
	gíd
 = 
ödex
;

46 
__TBB_ASSERT
–
ödex
 != 0, "A worker cannot occupy slot 0" );

47 
__TBB_ASSERT
–
ödex
 < 
my_num_¶Ÿs
, 
NULL
 );

51 i‡–!
	gmy_¶Ÿs
[
ödex
].
	gmy_scheduÀr
 && 
as_©omic
(
my_¶Ÿs
[ödex].
my_scheduÀr
).
com∑ª_™d_sw≠
(&
s
, 
NULL
 ) == NULL )

53 i‡–++
	gödex
 =
my_num_¶Ÿs
 )

54 
ödex
 = 1;

55 i‡–
	gödex
 =
íd
 ) {

57 
quô
;

60 
ITT_NOTIFY
(
sync_acquúed
, 
my_¶Ÿs
 + 
ödex
);

61 
	gs
.
	gmy_¨ía
 = 
this
;

62 
	gs
.
	gmy_¨ía_ödex
 = 
ödex
;

63 
	gs
.
	gmy_¨ía_¶Ÿ
 = 
my_¶Ÿs
 + 
ödex
;

64 #i‡
__TBB_TASK_PRIORITY


65 
	gs
.
	gmy_loˇl_ªlﬂd_ïoch
 = *
s
.
my_ªf_ªlﬂd_ïoch
;

66 
__TBB_ASSERT
–!
s
.
my_ofÊﬂded_èsks
, 
NULL
 );

68 
	gs
.
©èch_maûbox
–
afföôy_id
(
ödex
+1) );

70 
	gs
.
	gmy_¨ía_¶Ÿ
->
	ghöt_f‹_p›
 = 
ödex
;

72 #i‡!
__TBB_FP_CONTEXT


73 
	gmy_˝u_˘l_ív
.
£t_ív
();

76 #i‡
__TBB_SCHEDULER_OBSERVER


77 
__TBB_ASSERT
–!
s
.
my_œ°_loˇl_ob£rvî
, "There cannot beÇotifiedÜocal observers whenÉnteringárena" );

78 
	gmy_ob£rvîs
.
nŸify_íåy_ob£rvîs
–
s
.
my_œ°_loˇl_ob£rvî
, 
åue
 );

81 
©omic_upd©e
–
my_limô
, 
ödex
 + 1, 
°d
::
Àss
<>() );

87 
__TBB_ASSERT
–
is_Æive
(
my_gu¨d
), 
NULL
 );

88 
èsk
* 
	gt
 = 
s
.
ª˚ive_‹_°ól_èsk
–s.
my_dummy_èsk
->
¥efix
().
ªf_cou¡
, 
åue
 );

89 i‡(
	gt
) {

92 
	gs
.
	gmy_ö√rmo°_ru¬ög_èsk
 = 
NULL
;

93 
__TBB_ASSERT
–!
s
.
my_di•©chög_èsk
, 
NULL
 );

94 
	gs
.
loˇl_waô_f‹_Æl
(*
s
.
my_dummy_èsk
,
t
);

96 
__TBB_ASSERT
 ( 
__TBB_lﬂd_ªœxed
(
s
.
my_¨ía_¶Ÿ
->
hód
Ë=__TBB_lﬂd_ªœxed(s.my_¨ía_¶Ÿ->
èû
),

98 
__TBB_ASSERT
–
s
.
my_¨ía_¶Ÿ
->
èsk_poﬁ
 =
Em±yTaskPoﬁ
, "EmptyÅaskÖool isÇot markedáppropriately" );

101 i‡(
num_w‹kîs_a˘ive
(Ë> 
	gmy_num_w‹kîs_ÆlŸãd
)

104 #i‡
__TBB_SCHEDULER_OBSERVER


105 
	gmy_ob£rvîs
.
nŸify_exô_ob£rvîs
–
s
.
my_œ°_loˇl_ob£rvî
, 
åue
 );

106 
	gs
.
	gmy_œ°_loˇl_ob£rvî
 = 
NULL
;

108 #i‡
__TBB_TASK_PRIORITY


109 i‡–
	gs
.
	gmy_ofÊﬂded_èsks
 )

110 
‹ph™_ofÊﬂded_èsks
–
s
 );

112 #i‡
__TBB_STATISTICS


113 ++
	gs
.
	gmy_cou¡îs
.
	g¨ía_roundåùs
;

114 *
	gmy_¶Ÿs
[
ödex
].
	gmy_cou¡îs
 +
s
.
my_cou¡îs
;

115 
	gs
.
	gmy_cou¡îs
.
ª£t
();

117 
__TBB_°‹e_wôh_ªÀa£
–
my_¶Ÿs
[
ödex
].
my_scheduÀr
, (
gíîic_scheduÀr
*)
NULL
 );

118 
	gs
.
	gmy_¨ía_¶Ÿ
 = 0;

119 
	gs
.
	gmy_öbox
.
dëach
();

120 
__TBB_ASSERT
–
s
.
my_öbox
.
is_idÀ_°©e
(
åue
), 
NULL
 );

121 
__TBB_ASSERT
–!
s
.
my_ö√rmo°_ru¬ög_èsk
, 
NULL
 );

122 
__TBB_ASSERT
–!
s
.
my_di•©chög_èsk
, 
NULL
 );

123 
__TBB_ASSERT
–
is_Æive
(
my_gu¨d
), 
NULL
 );

124 
	gquô
:

128 #i‡!
__TBB_TRACK_PRIORITY_LEVEL_SATURATION


129 
⁄_thªad_Àavög
< 
Ál£
>();

133 
	g¨ía
::
¨ía
 ( 
m¨kë
& 
m
, 
max_num_w‹kîs
 ) {

134 
__TBB_ASSERT
–!
my_gu¨d
, "improperlyállocatedárena?" );

135 
__TBB_ASSERT
–(
my_¶Ÿs
[0]Ë% 
NFS_GëLöeSize
()==0, "arena::slot sizeÇot multiple of cacheÜine size" );

136 
__TBB_ASSERT
–(
uöçå_t
)
this
 % 
NFS_GëLöeSize
()==0, "arena misaligned" );

137 #i‡
__TBB_TASK_PRIORITY


138 
__TBB_ASSERT
–!
my_ªlﬂd_ïoch
 && !
my_‹ph™ed_èsks
 && !
my_skù≥d_fifo_¥i‹ôy
, "Newárena object isÇot zeroed" );

140 
	gmy_m¨kë
 = &
m
;

141 
	gmy_limô
 = 1;

143 
	gmy_num_¶Ÿs
 = 
num_¶Ÿs_to_ª£rve
(
max_num_w‹kîs
);

144 
	gmy_max_num_w‹kîs
 = 
max_num_w‹kîs
;

145 
	gmy_ª„ªn˚s
 = 1;

146 #i‡
__TBB_TASK_PRIORITY


147 
	gmy_bŸtom_¥i‹ôy
 = 
my_t›_¥i‹ôy
 = 
n‹mÆized_n‹mÆ_¥i‹ôy
;

149 
	gmy_aba_ïoch
 = 
m
.
my_¨ías_aba_ïoch
;

150 #i‡
__TBB_SCHEDULER_OBSERVER


151 
	gmy_ob£rvîs
.
	gmy_¨ía
 = 
this
;

153 
__TBB_ASSERT
 ( 
my_max_num_w‹kîs
 < 
my_num_¶Ÿs
, 
NULL
 );

155  
	gi
 = 0; i < 
	gmy_num_¶Ÿs
; ++i ) {

156 
__TBB_ASSERT
–!
my_¶Ÿs
[
i
].
my_scheduÀr
 && !my_¶Ÿs[i].
èsk_poﬁ
, 
NULL
 );

157 
__TBB_ASSERT
–!
my_¶Ÿs
[
i
].
èsk_poﬁ_±r
, 
NULL
 );

158 
__TBB_ASSERT
–!
my_¶Ÿs
[
i
].
my_èsk_poﬁ_size
, 
NULL
 );

159 
ITT_SYNC_CREATE
(
my_¶Ÿs
 + 
i
, 
SyncTy≥_ScheduÀr
, 
SyncObj_W‹kîTaskPoﬁ
);

160 
maûbox
(
i
+1).
c⁄°ru˘
();

161 
ITT_SYNC_CREATE
(&
maûbox
(
i
+1), 
SyncTy≥_ScheduÀr
, 
SyncObj_Maûbox
);

162 
	gmy_¶Ÿs
[
i
].
	ghöt_f‹_p›
 = i;

163 #i‡
__TBB_STATISTICS


164 
	gmy_¶Ÿs
[
i
].
	gmy_cou¡îs
 = 
√w
 ( 
NFS_AŒoˇã
(1, (
°©i°ics_cou¡îs
), 
NULL
ËË
	g°©i°ics_cou¡îs
;

167 #i‡
__TBB_TASK_PRIORITY


168  
öçå_t
 
	gi
 = 0; i < 
	gnum_¥i‹ôy_Àvñs
; ++i ) {

169 
	gmy_èsk_°ªam
[
i
].
öôülize
(
my_num_¶Ÿs
);

170 
ITT_SYNC_CREATE
(
my_èsk_°ªam
 + 
i
, 
SyncTy≥_ScheduÀr
, 
SyncObj_TaskSåóm
);

173 
	gmy_èsk_°ªam
.
öôülize
(
my_num_¶Ÿs
);

174 
ITT_SYNC_CREATE
(&
my_èsk_°ªam
, 
SyncTy≥_ScheduÀr
, 
SyncObj_TaskSåóm
);

176 
	gmy_m™d©‹y_c⁄cuºícy
 = 
Ál£
;

177 #i‡
__TBB_TASK_GROUP_CONTEXT


180 
	gmy_deÁu…_˘x
 =

181 
√w
 ( 
NFS_AŒoˇã
(1, (
èsk_group_c⁄ãxt
), 
NULL
ËËèsk_group_c⁄ãxt—ask_group_c⁄ãxt::
isﬁ©ed
,Åask_group_c⁄ãxt::
deÁu…_åaôs
);

183 #i‡
__TBB_FP_CONTEXT


184 
	gmy_deÁu…_˘x
->
ˇ±uª_Â_£âögs
();

186 
	gmy_˝u_˘l_ív
.
gë_ív
();

190 
	g¨ía
&áª«::
Æloˇã_¨ía
–
m¨kë
& 
m
, 
max_num_w‹kîs
 ) {

191 
__TBB_ASSERT
–(
ba£_ty≥
Ë+ (
¨ía_¶Ÿ
Ë=(
¨ía
), "Allárena data fields must goÅoárena_base" );

192 
__TBB_ASSERT
–(
ba£_ty≥
Ë% 
NFS_GëLöeSize
() == 0, "arena slotsárea misaligned: wrongÖadding" );

193 
__TBB_ASSERT
–(
maû_outbox
Ë=
NFS_MaxLöeSize
, "MailboxÖadding is wrong" );

194 
size_t
 
	gn
 = 
Æloˇti⁄_size
(
max_num_w‹kîs
);

195 * 
	g°‹age
 = (*)
NFS_AŒoˇã
–1, 
n
, 
NULL
 );

197 
mem£t
–
°‹age
, 0, 
n
 );

198  *
√w
–
°‹age
 + 
num_¶Ÿs_to_ª£rve
(
max_num_w‹kîs
Ë* (
maû_outbox
ËË
¨ía
(
m
, max_num_workers);

201 
	g¨ía
::
‰ì_¨ía
 () {

202 
__TBB_ASSERT
–
is_Æive
(
my_gu¨d
), 
NULL
 );

203 
__TBB_ASSERT
–!
my_ª„ªn˚s
, "ThereáreÅhreads inÅhe dyingárena" );

204 
__TBB_ASSERT
–!
my_num_w‹kîs_ªque°ed
 && !
my_num_w‹kîs_ÆlŸãd
, "DyingárenaÑequests workers" );

205 
__TBB_ASSERT
–
my_poﬁ_°©e
 =
SNAPSHOT_EMPTY
 || !
my_max_num_w‹kîs
, "Inconsistent state ofá dyingárena" );

206 #i‡!
__TBB_STATISTICS_EARLY_DUMP


207 
GATHER_STATISTIC
–
dump_¨ía_°©i°ics
() );

209 
pois⁄_vÆue
–
my_gu¨d
 );

210 
öçå_t
 
	gdøöed
 = 0;

211  
	gi
 = 0; i < 
	gmy_num_¶Ÿs
; ++i ) {

212 
__TBB_ASSERT
–!
my_¶Ÿs
[
i
].
my_scheduÀr
, "arena slot isÇotÉmpty" );

213 #i‡!
__TBB_TASK_ARENA


214 
__TBB_ASSERT
–
my_¶Ÿs
[
i
].
èsk_poﬁ
 =
Em±yTaskPoﬁ
, 
NULL
 );

218 
__TBB_ASSERT
–
my_¶Ÿs
[
i
].
hód
 =my_¶Ÿs[i].
èû
, 
NULL
 );

219 
	gmy_¶Ÿs
[
i
].
‰ì_èsk_poﬁ
();

220 #i‡
__TBB_STATISTICS


221 
NFS_Fªe
–
my_¶Ÿs
[
i
].
my_cou¡îs
 );

223 
	gdøöed
 +
maûbox
(
i
+1).
døö
();

225 #i‡
__TBB_TASK_PRIORITY
 && 
TBB_USE_ASSERT


226  
öçå_t
 
	gi
 = 0; i < 
	gnum_¥i‹ôy_Àvñs
; ++i )

227 
__TBB_ASSERT
(
my_èsk_°ªam
[
i
].
em±y
(Ë&& my_èsk_°ªam[i].
døö
()==0, "NotállÉnqueuedÅasks wereÉxecuted");

228 #ñi‡!
__TBB_TASK_PRIORITY


229 
__TBB_ASSERT
(
my_èsk_°ªam
.
em±y
(Ë&& my_èsk_°ªam.
døö
()==0, "NotállÉnqueuedÅasks wereÉxecuted");

231 #i‡
__TBB_COUNT_TASK_NODES


232 
	gmy_m¨kë
->
upd©e_èsk_node_cou¡
–-
døöed
 );

234 
	gmy_m¨kë
->
ªÀa£
();

235 #i‡
__TBB_TASK_GROUP_CONTEXT


236 
__TBB_ASSERT
–
my_deÁu…_˘x
, "MasterÅhreadÇeverÉnteredÅheárena?" );

237 
	gmy_deÁu…_˘x
->~
èsk_group_c⁄ãxt
();

238 
NFS_Fªe
(
my_deÁu…_˘x
);

240 #i‡
__TBB_SCHEDULER_OBSERVER


241 i‡–!
	gmy_ob£rvîs
.
em±y
() )

242 
	gmy_ob£rvîs
.
˛ór
();

244 * 
	g°‹age
 = &
maûbox
(
my_num_¶Ÿs
);

245 
__TBB_ASSERT
–
my_ª„ªn˚s
 =0, 
NULL
 );

246 
__TBB_ASSERT
–
my_poﬁ_°©e
 =
SNAPSHOT_EMPTY
 || !
my_max_num_w‹kîs
, 
NULL
 );

247 
	gthis
->~
¨ía
();

248 #i‡
TBB_USE_ASSERT
 > 1

249 
mem£t
–
°‹age
, 0, 
Æloˇti⁄_size
(
my_max_num_w‹kîs
) );

251 
NFS_Fªe
–
°‹age
 );

254 #i‡
__TBB_STATISTICS


255 
	g¨ía
::
dump_¨ía_°©i°ics
 () {

256 
°©i°ics_cou¡îs
 
tŸÆ
;

257  
	gi
 = 0; i < 
	gmy_num_¶Ÿs
; ++i ) {

258 #i‡
__TBB_STATISTICS_EARLY_DUMP


259 
gíîic_scheduÀr
* 
	gs
 = 
my_¶Ÿs
[
i
].
my_scheduÀr
;

260 i‡–
	gs
 )

261 *
	gmy_¶Ÿs
[
i
].
	gmy_cou¡îs
 +
s
->
my_cou¡îs
;

263 
__TBB_ASSERT
–!
my_¶Ÿs
[
i
].
my_scheduÀr
, 
NULL
 );

265 i‡–
	gi
 != 0 ) {

266 
tŸÆ
 +*
my_¶Ÿs
[
i
].
my_cou¡îs
;

267 
dump_°©i°ics
–*
my_¶Ÿs
[
i
].
my_cou¡îs
, i );

270 
dump_°©i°ics
–*
my_¶Ÿs
[0].
my_cou¡îs
, 0 );

271 #i‡
__TBB_STATISTICS_STDOUT


272 #i‡!
__TBB_STATISTICS_TOTALS_ONLY


273 
¥ötf
( "----------------------------------------------\n" );

275 
dump_°©i°ics
–
tŸÆ
, 
w‹kîs_cou¡îs_tŸÆ
 );

276 
	gtŸÆ
 +*
my_¶Ÿs
[0].
my_cou¡îs
;

277 
dump_°©i°ics
–
tŸÆ
, 
¨ía_cou¡îs_tŸÆ
 );

278 #i‡!
__TBB_STATISTICS_TOTALS_ONLY


279 
¥ötf
( "==============================================\n" );

285 #i‡
__TBB_TASK_PRIORITY


290 
ölöe
 
boﬁ
 
	g¨ía
::
may_have_èsks
 ( 
gíîic_scheduÀr
* 
s
, boﬁ& 
èsks_¥e£¡
, boﬁ& 
dequeuög_possibÀ
 ) {

291 i‡–!
	gs


292 #i‡
__TBB_TASK_ARENA


293 || 
	gs
->
	gmy_¨ía
 !
this


295 Ë 
Ál£
;

296 
	gdequeuög_possibÀ
 |
s
->
w‹kî_ouãrmo°_Àvñ
();

297 i‡–
	gs
->
	gmy_poﬁ_ªshufÊög_≥ndög
 ) {

300 
	gèsks_¥e£¡
 = 
åue
;

301  
	gåue
;

303 i‡–
	gs
->
	gmy_ofÊﬂded_èsks
 ) {

304 
	gèsks_¥e£¡
 = 
åue
;

305 i‡–
	gs
->
	gmy_loˇl_ªlﬂd_ïoch
 < *s->
	gmy_ªf_ªlﬂd_ïoch
 ) {

308  
	gåue
;

311  
	gÁl£
;

314 
	g¨ía
::
‹ph™_ofÊﬂded_èsks
(
gíîic_scheduÀr
& 
s
) {

315 
__TBB_ASSERT
–
s
.
my_ofÊﬂded_èsks
, 
NULL
 );

316 
GATHER_STATISTIC
–++
s
.
my_cou¡îs
.
¥io_‹ph™ögs
 );

317 ++
	gmy_ab™d⁄mít_ïoch
;

318 
__TBB_ASSERT
–
s
.
my_ofÊﬂded_èsk_li°_èû_lök
 && !*s.my_ofÊﬂded_èsk_li°_èû_lök, 
NULL
 );

319 
èsk
* 
	g‹ph™s
;

321 
	g‹ph™s
 = 
c⁄°_ˇ°
<
èsk
*>(
my_‹ph™ed_èsks
);

322 *
	gs
.
	gmy_ofÊﬂded_èsk_li°_èû_lök
 = 
‹ph™s
;

323 }  
as_©omic
(
my_‹ph™ed_èsks
).
com∑ª_™d_sw≠
(
s
.
my_ofÊﬂded_èsks
, 
‹ph™s
) != orphans );

324 
	gs
.
	gmy_ofÊﬂded_èsks
 = 
NULL
;

325 #i‡
TBB_USE_ASSERT


326 
	gs
.
	gmy_ofÊﬂded_èsk_li°_èû_lök
 = 
NULL
;

331 
boﬁ
 
	g¨ía
::
is_out_of_w‹k
() {

334 
poﬁ_°©e_t
 
	g¢≠shŸ
 = 
my_poﬁ_°©e
;

335  
	g¢≠shŸ
 ) {

336 
	gSNAPSHOT_EMPTY
:

337  
åue
;

338 
	gSNAPSHOT_FULL
: {

340 c⁄° 
poﬁ_°©e_t
 
busy
 =Öool_state_t(&busy);

342 if–
	gmy_poﬁ_°©e
.
com∑ª_™d_sw≠
–
busy
, 
SNAPSHOT_FULL
 )==SNAPSHOT_FULL ) {

346 
size_t
 
n
 = 
my_limô
;

350 #i‡
__TBB_TASK_PRIORITY


351 
öçå_t
 
	gt›_¥i‹ôy
 = 
my_t›_¥i‹ôy
;

352 
uöçå_t
 
	gªlﬂd_ïoch
 = 
my_ªlﬂd_ïoch
;

355 
size_t
 
	gk
;

356  
	gk
=0; k<
	gn
; ++k ) {

357 if–
	gmy_¶Ÿs
[
k
].
	gèsk_poﬁ
 !
Em±yTaskPoﬁ
 &&

358 
__TBB_lﬂd_ªœxed
(
my_¶Ÿs
[
k
].
hód
Ë< __TBB_lﬂd_ªœxed(my_¶Ÿs[k].
èû
) )

363 if–
	gmy_poﬁ_°©e
!=
busy
 )

364  
Ál£
;

366 
__TBB_ASSERT
–
k
 <
n
, 
NULL
 );

367 
boﬁ
 
	gw‹k_ab£¡
 = 
k
 =
n
;

368 #i‡
__TBB_TASK_PRIORITY


371 
boﬁ
 
	gèsks_¥e£¡
 = !
w‹k_ab£¡
 || 
my_‹ph™ed_èsks
;

372 
boﬁ
 
	gdequeuög_possibÀ
 = 
Ál£
;

373 i‡–
	gw‹k_ab£¡
 ) {

377 
uöçå_t
 
	gab™d⁄mít_ïoch
 = 
my_ab™d⁄mít_ïoch
;

383 
	gmy_m¨kë
->
	gmy_¨ías_li°_muãx
.
lock
();

384 
gíîic_scheduÀr
 *
	gs
 = 
my_¶Ÿs
[0].
my_scheduÀr
;

385 i‡–
	gs
 && 
as_©omic
(
my_¶Ÿs
[0].
my_scheduÀr
).
com∑ª_™d_sw≠
(
LockedMa°î
, 
s
) == s ) {

386 
__TBB_ASSERT
–
my_¶Ÿs
[0].
my_scheduÀr
 =
LockedMa°î
 && 
s
 !LockedMa°î, 
NULL
 );

387 
	gw‹k_ab£¡
 = !
may_have_èsks
–
s
, 
èsks_¥e£¡
, 
dequeuög_possibÀ
 );

388 
__TBB_°‹e_wôh_ªÀa£
–
my_¶Ÿs
[0].
my_scheduÀr
, 
s
 );

390 
	gmy_m¨kë
->
	gmy_¨ías_li°_muãx
.
u∆ock
();

403  
	gk
 = 1; 
	gw‹k_ab£¡
 && k < 
	gn
; ++k ) {

404 if–
	gmy_poﬁ_°©e
!=
busy
 )

405  
Ál£
;

406 
	gw‹k_ab£¡
 = !
may_have_èsks
–
my_¶Ÿs
[
k
].
my_scheduÀr
, 
èsks_¥e£¡
, 
dequeuög_possibÀ
 );

409 
	gw‹k_ab£¡
 = 
w‹k_ab£¡


410 && !
__TBB_lﬂd_wôh_acquúe
(
my_‹ph™ed_èsks
)

411 && 
ab™d⁄mít_ïoch
 =
my_ab™d⁄mít_ïoch
;

415 if–
	gmy_poﬁ_°©e
==
busy
 ) {

416 #i‡
__TBB_TASK_PRIORITY


417 
boﬁ
 
no_fifo_èsks
 = 
my_èsk_°ªam
[
t›_¥i‹ôy
].
em±y
();

418 
	gw‹k_ab£¡
 = 
w‹k_ab£¡
 && (!
dequeuög_possibÀ
 || 
no_fifo_èsks
)

419 && 
t›_¥i‹ôy
 =
my_t›_¥i‹ôy
 && 
ªlﬂd_ïoch
 =
my_ªlﬂd_ïoch
;

421 
boﬁ
 
	gno_fifo_èsks
 = 
my_èsk_°ªam
.
em±y
();

422 
	gw‹k_ab£¡
 = 
w‹k_ab£¡
 && 
no_fifo_èsks
;

424 if–
	gw‹k_ab£¡
 ) {

425 #i‡
__TBB_TASK_PRIORITY


426 i‡–
	gt›_¥i‹ôy
 > 
	gmy_bŸtom_¥i‹ôy
 ) {

427 i‡–
	gmy_m¨kë
->
lowî_¨ía_¥i‹ôy
(*
this
, 
t›_¥i‹ôy
 - 1, 
ªlﬂd_ïoch
)

428 && !
	gmy_èsk_°ªam
[
t›_¥i‹ôy
].
em±y
() )

430 
©omic_upd©e
–
my_skù≥d_fifo_¥i‹ôy
, 
t›_¥i‹ôy
, 
°d
::
Àss
<
öçå_t
>());

433 i‡–!
	gèsks_¥e£¡
 && !
	gmy_‹ph™ed_èsks
 && 
	gno_fifo_èsks
 ) {

437 
	gcuºít_dem™d
 = ()
my_max_num_w‹kîs
;

438 if–
	gmy_poﬁ_°©e
.
com∑ª_™d_sw≠
–
SNAPSHOT_EMPTY
, 
busy
 )==busy ) {

441 
my_m¨kë
->
adju°_dem™d
–*
this
, -
cuºít_dem™d
 );

442 #i‡
__TBB_TASK_PRIORITY


448 
boﬁ
 
	gswôch_back
 = 
Ál£
;

449  
	gp
 = 0;Ö < 
	gnum_¥i‹ôy_Àvñs
; ++p ) {

450 i‡–!
	gmy_èsk_°ªam
[
p
].
em±y
() ) {

451 
	gswôch_back
 = 
åue
;

452 i‡–
	gp
 < 
	gmy_bŸtom_¥i‹ôy
 ||Ö > 
	gmy_t›_¥i‹ôy
 )

453 
	gmy_m¨kë
->
upd©e_¨ía_¥i‹ôy
(*
this
, 
p
);

456 i‡–
	gswôch_back
 )

457 
	gadvîti£_√w_w‹k
< 
	gÁl£
>();

459  
	gåue
;

461  
	gÁl£
;

462 #i‡
__TBB_TASK_PRIORITY


467 
	gmy_poﬁ_°©e
.
com∑ª_™d_sw≠
–
SNAPSHOT_FULL
, 
busy
 );

470  
	gÁl£
;

474  
Ál£
;

479 #i‡
__TBB_COUNT_TASK_NODES


480 
öçå_t
 
	g¨ía
::
w‹kîs_èsk_node_cou¡
() {

481 
öçå_t
 
ªsu…
 = 0;

482  
	gi
 = 1; i < 
	gmy_num_¶Ÿs
; ++i ) {

483 
gíîic_scheduÀr
* 
	gs
 = 
my_¶Ÿs
[
i
].
my_scheduÀr
;

484 if–
	gs
 )

485 
	gªsu…
 +
s
->
my_èsk_node_cou¡
;

487  
	gªsu…
;

491 
	g¨ía
::
íqueue_èsk
–
èsk
& 
t
, 
öçå_t
 
¥io
, 
Fa°R™dom
 &
øndom
 )

493 #i‡
__TBB_RECYCLE_TO_ENQUEUE


494 
__TBB_ASSERT
–
t
.
°©e
()==
èsk
::
Æloˇãd
 ||Å.°©e()=Òask::
to_íqueue
, "attemptÅoÉnqueueÅask with inappropriate state" );

496 
__TBB_ASSERT
–
t
.
°©e
()==
èsk
::
Æloˇãd
, "attemptÅoÉnqueueÅaskÅhat isÇot in 'allocated' state" );

498 
	gt
.
¥efix
().
	g°©e
 = 
èsk
::
ªady
;

499 
	gt
.
¥efix
().
	gexåa_°©e
 |
es_èsk_íqueued
;

501 #i‡
TBB_USE_ASSERT


502 if–
èsk
* 
	g∑ª¡
 = 
t
.
∑ª¡
() ) {

503 
öã∫Æ
::
ª„ªn˚_cou¡
 
ªf_cou¡
 = 
∑ª¡
->
¥efix
().ref_count;

504 
__TBB_ASSERT
–
ªf_cou¡
!=0, "attemptÅoÉnqueueÅask whoseÖarent hasáÑef_count==0 (forgotÅo set_ref_count?)" );

505 
__TBB_ASSERT
–
ªf_cou¡
>0, "attemptÅoÉnqueueÅask whoseÖarent hasáÑef_count<0" );

506 
	g∑ª¡
->
¥efix
().
	gexåa_°©e
 |
es_ªf_cou¡_a˘ive
;

508 
__TBB_ASSERT
(
t
.
¥efix
().
afföôy
==
afföôy_id
(0), "affinity is ignored forÉnqueuedÅasks");

511 #i‡
__TBB_TASK_PRIORITY


512 
öçå_t
 
	gp
 = 
¥io
 ? 
n‹mÆize_¥i‹ôy
(
¥i‹ôy_t
’rio)Ë: 
n‹mÆized_n‹mÆ_¥i‹ôy
;

513 
as£π_¥i‹ôy_vÆid
(
p
);

514 
	gèsk_°ªam
 &
	gts
 = 
my_èsk_°ªam
[
p
];

516 
__TBB_ASSERT_EX
(
¥io
 == 0, "theÜibrary isÇot configuredÅoÑespectÅheÅaskÖriority");

517 
	gèsk_°ªam
 &
	gts
 = 
my_èsk_°ªam
;

519 
ITT_NOTIFY
(
sync_ªÀasög
, &
ts
);

520 
	gts
.
push
–&
t
, 
øndom
 );

521 #i‡
__TBB_TASK_PRIORITY


522 i‡–
	gp
 !
my_t›_¥i‹ôy
 )

523 
my_m¨kë
->
upd©e_¨ía_¥i‹ôy
–*
this
, 
p
 );

525 
	gadvîti£_√w_w‹k
< 
	gÁl£
 >();

526 #i‡
__TBB_TASK_PRIORITY


527 i‡–
	gp
 !
my_t›_¥i‹ôy
 )

528 
my_m¨kë
->
upd©e_¨ía_¥i‹ôy
–*
this
, 
p
 );

532 #i‡
__TBB_TASK_ARENA


533 
	g√°ed_¨ía_c⁄ãxt
 : 
no_c›y
 {

534 
gíîic_scheduÀr
 &
my_scheduÀr
;

535 
scheduÀr_°©e
 c⁄° 
	gmy_‹ig_°©e
;

536 *
	gmy_‹ig_±r
;

537 
boﬁ
 
	gmy_adju°ög
;

538 
√°ed_¨ía_c⁄ãxt
(
gíîic_scheduÀr
 *
s
, 
¨ía
* 
a
, 
boﬁ
 
√eds_adju°ög
, boﬁ 
as_w‹kî
 = 
Ál£
)

539 : 
my_scheduÀr
(*
s
), 
my_‹ig_°©e
(*s), 
my_‹ig_±r
(
NULL
), 
my_adju°ög
(
√eds_adju°ög
) {

540 
	gs
->
√°ed_¨ía_íåy
(
a
, *
this
, 
as_w‹kî
);

542 ~
√°ed_¨ía_c⁄ãxt
() {

543 
	gmy_scheduÀr
.
√°ed_¨ía_exô
(*
this
);

544 (
	gscheduÀr_°©e
&)
	gmy_scheduÀr
 = 
my_‹ig_°©e
;

548 
	ggíîic_scheduÀr
::
√°ed_¨ía_íåy
(
¨ía
* 
a
, 
√°ed_¨ía_c⁄ãxt
& 
c
, 
boﬁ
 
as_w‹kî
) {

549 if–
	ga
 =
my_¨ía
 ) {

550 #i‡
__TBB_TASK_GROUP_CONTEXT


551 
c
.
my_‹ig_±r
 = 
my_ö√rmo°_ru¬ög_èsk
 =

552 
√w
(&
Æloˇã_èsk
((
em±y_èsk
), 
NULL
, 
a
->
my_deÁu…_˘x
)Ë
	gem±y_èsk
;

556 
__TBB_ASSERT
–
is_Æive
(
a
->
my_gu¨d
), 
NULL
 );

558 #i‡
__TBB_TASK_PRIORITY


559 i‡–
	gmy_ofÊﬂded_èsks
 )

560 
	gmy_¨ía
->
‹ph™_ofÊﬂded_èsks
–*
this
 );

561 
	gmy_ªf_t›_¥i‹ôy
 = &
a
->
my_t›_¥i‹ôy
;

562 
	gmy_ªf_ªlﬂd_ïoch
 = &
a
->
my_ªlﬂd_ïoch
;

563 
	gmy_loˇl_ªlﬂd_ïoch
 = 
a
->
my_ªlﬂd_ïoch
;

565 
	gmy_¨ía
 = 
a
;

566 
	gmy_¨ía_ödex
 = 0;

567 
	gmy_¨ía_¶Ÿ
 = 
my_¨ía
->
my_¶Ÿs
 + 
my_¨ía_ödex
;

568 
	gmy_öbox
.
dëach
();

569 
©èch_maûbox
–
afföôy_id
(
my_¨ía_ödex
+1) );

570 
	gmy_ö√rmo°_ru¬ög_èsk
 = 
my_di•©chög_èsk
 = 
as_w‹kî
? 
NULL
 : 
my_dummy_èsk
;

571 #i‡
__TBB_TASK_GROUP_CONTEXT


573 
	gc
.
	gmy_‹ig_±r
 = 
my_dummy_èsk
->
¥efix
().
c⁄ãxt
;

574 
	gmy_dummy_èsk
->
¥efix
().
	gc⁄ãxt
 = 
a
->
my_deÁu…_˘x
;

576 #i‡
__TBB_ARENA_OBSERVER


577 
	gmy_œ°_loˇl_ob£rvî
 = 0;

578 
	gmy_¨ía
->
	gmy_ob£rvîs
.
nŸify_íåy_ob£rvîs
–
my_œ°_loˇl_ob£rvî
, 
Ál£
 );

584 if–
	gc
.
	gmy_adju°ög
 ) 
	gmy_¨ía
->
	gmy_m¨kë
->
adju°_dem™d
(*
my_¨ía
, -1);

587 
	ggíîic_scheduÀr
::
√°ed_¨ía_exô
(
√°ed_¨ía_c⁄ãxt
& 
c
) {

588 if–
my_¨ía
 =
c
.
my_‹ig_°©e
.my_arena ) {

589 #i‡
__TBB_TASK_GROUP_CONTEXT


590 
‰ì_èsk
<
smÆl_loˇl_èsk
>(*(
èsk
*)
c
.
my_‹ig_±r
);

594 if–
	gc
.
	gmy_adju°ög
 ) 
	gmy_¨ía
->
	gmy_m¨kë
->
adju°_dem™d
(*
my_¨ía
, 1);

595 #i‡
__TBB_ARENA_OBSERVER


596 
	gmy_¨ía
->
	gmy_ob£rvîs
.
nŸify_exô_ob£rvîs
–
my_œ°_loˇl_ob£rvî
, 
Ál£
 );

599 #i‡
__TBB_TASK_PRIORITY


600 i‡–
	gmy_ofÊﬂded_èsks
 )

601 
	gmy_¨ía
->
‹ph™_ofÊﬂded_èsks
–*
this
 );

602 
	gmy_loˇl_ªlﬂd_ïoch
 = *
c
.
my_‹ig_°©e
.
my_ªf_ªlﬂd_ïoch
;

603  
as_©omic
(
my_¨ía
->
my_¶Ÿs
[0].
my_scheduÀr
).
com∑ª_™d_sw≠
–
NULL
, 
this
) !=Åhis )

604 
__TBB_Yõld
();

607 
__TBB_°‹e_wôh_ªÀa£
(
my_¨ía
->
my_¶Ÿs
[0].
my_scheduÀr
, (
gíîic_scheduÀr
*)
NULL
);

609 
	gmy_¨ía
->
	gmy_exô_m⁄ô‹s
.
nŸify_Æl_ªœxed
();

610 #i‡
__TBB_TASK_GROUP_CONTEXT


612 
	gmy_dummy_èsk
->
¥efix
().
	gc⁄ãxt
 = (
èsk_group_c⁄ãxt
*)
c
.
my_‹ig_±r
;

616 
	ggíîic_scheduÀr
::
waô_u¡û_em±y
() {

617 
my_dummy_èsk
->
¥efix
().
ªf_cou¡
++;

618  
	gmy_¨ía
->
	gmy_poﬁ_°©e
 !
¨ía
::
SNAPSHOT_EMPTY
 )

619 
loˇl_waô_f‹_Æl
(*
my_dummy_èsk
, 
NULL
);

620 
	gmy_dummy_èsk
->
¥efix
().
	gªf_cou¡
--;

628 #i‡
__TBB_TASK_ARENA


629 
	~"scheduÀr_utûôy.h
"

631 
«me•a˚
 
	gtbb
 {

632 
«me•a˚
 
	göãrÁ˚7
 {

633 
«me•a˚
 
	göã∫Æ
 {

635 
	gèsk_¨ía_ba£
::
öã∫Æ_öôülize
( ) {

636 
__TBB_ASSERT
–
my_ma°î_¶Ÿs
 <= 1, "Number of slotsÑeserved for master can be only [0,1]");

637 if–
	gmy_ma°î_¶Ÿs
 > 1 ) my_master_slots = 1;

638 if–
	gmy_max_c⁄cuºícy
 < 1 )

639 
	gmy_max_c⁄cuºícy
 = ()
govîn‹
::
deÁu…_num_thªads
();

646 if–!
	ggovîn‹
::
loˇl_scheduÀr_if_öôülized
() )

647 
govîn‹
::
öô_scheduÀr
–()
my_max_c⁄cuºícy
 - 
my_ma°î_¶Ÿs
 + 1 , 0, 
åue
 );

649 
¨ía
* 
	g√w_¨ía
 = &
m¨kë
::
¸óã_¨ía
–
my_max_c⁄cuºícy
 - 
my_ma°î_¶Ÿs
 , 
ThªadSèckSize
 );

650 if(
as_©omic
(
my_¨ía
).
com∑ª_™d_sw≠
(
√w_¨ía
, 
NULL
) != NULL) {

651 
__TBB_ASSERT
(
my_¨ía
, 
NULL
);

652 
	g√w_¨ía
->
	g⁄_thªad_Àavög
< 
	gåue
>();

654 #i‡
__TBB_TASK_GROUP_CONTEXT


656 
	gmy_c⁄ãxt
 = 
√w_¨ía
->
my_deÁu…_˘x
;

657 
	gmy_c⁄ãxt
->
	gmy_vîsi⁄_™d_åaôs
 |
my_vîsi⁄_™d_åaôs
 & 
exa˘_ex˚±i⁄_Êag
;

662 
	gèsk_¨ía_ba£
::
öã∫Æ_ãrmö©e
( ) {

663 if–
my_¨ía
 ) {

664 #i‡
__TBB_STATISTICS_EARLY_DUMP


665 
GATHER_STATISTIC
–
my_¨ía
->
dump_¨ía_°©i°ics
() );

667 
	gmy_¨ía
->
	g⁄_thªad_Àavög
< 
	gåue
>();

668 
	gmy_¨ía
 = 0;

669 #i‡
__TBB_TASK_GROUP_CONTEXT


670 
	gmy_c⁄ãxt
 = 0;

675 
	gèsk_¨ía_ba£
::
öã∫Æ_íqueue
–
èsk
& 
t
, 
öçå_t
 
¥io
 ) const {

676 
__TBB_ASSERT
(
my_¨ía
, 
NULL
);

677 
gíîic_scheduÀr
* 
	gs
 = 
govîn‹
::
loˇl_scheduÀr_if_öôülized
();

678 
__TBB_ASSERT
(
s
, "Scheduler isÇot initialized");

679 #i‡
__TBB_TASK_GROUP_CONTEXT


680 
__TBB_ASSERT
(
my_¨ía
->
my_deÁu…_˘x
 =
t
.
¥efix
().
c⁄ãxt
, 
NULL
);

681 
__TBB_ASSERT
(!
my_¨ía
->
my_deÁu…_˘x
->
is_group_executi⁄_ˇn˚Œed
(),

684 
	gmy_¨ía
->
íqueue_èsk
–
t
, 
¥io
, 
s
->
my_øndom
 );

687 ˛as†
	cdñeg©ed_èsk
 : 
public
 
èsk
 {

688 
öã∫Æ
::
dñeg©e_ba£
 & 
my_dñeg©e
;

689 
	gc⁄cuºít_m⁄ô‹
 & 
	gmy_m⁄ô‹
;

690 
èsk
 * 
	gmy_roŸ
;

691  
èsk
* 
execuã
() {

692 
	ggíîic_scheduÀr
& 
	gs
 = *(
gíîic_scheduÀr
*)
¥efix
().
ow√r
;

693 
__TBB_ASSERT
(
s
.
w‹kî_ouãrmo°_Àvñ
(Ë|| s.
ma°î_ouãrmo°_Àvñ
(), "expectedÅo beÉnqueuedándÑeceived onÅhe outermostÜevel");

695 if–
	gs
.
ma°î_ouãrmo°_Àvñ
(Ë&& s.
	gmy_dummy_èsk
->
°©e
(Ë=
èsk
::
executög
 ) {

696 #i‡
TBB_USE_EXCEPTIONS


698 
__TBB_ASSERT
(
dy«mic_ˇ°
<
dñeg©ed_èsk
*>(
s
.
my_dummy_èsk
), 0);

700 
£t_ªf_cou¡
(1);

701 
ªcy˛e_to_íqueue
();

702  
	gNULL
;

704 
	gouãrmo°_c⁄ãxt
 : 
öã∫Æ
::
no_c›y
 {

705 
dñeg©ed_èsk
 * 
t
;

706 
	ggíîic_scheduÀr
 & 
	gs
;

707 
èsk
 * 
	g‹ig_dummy
;

708 
èsk_group_c⁄ãxt
 * 
	g‹ig_˘x
;

709 
ouãrmo°_c⁄ãxt
(
dñeg©ed_èsk
 *
_t
, 
gíîic_scheduÀr
 &
_s
Ë: 
t
(_t), 
s
(_s) {

710 
	g‹ig_dummy
 = 
s
.
my_dummy_èsk
;

711 #i‡
__TBB_TASK_GROUP_CONTEXT


712 
	g‹ig_˘x
 = 
t
->
¥efix
().
c⁄ãxt
;

713 
	gt
->
¥efix
().
	gc⁄ãxt
 = 
s
.
my_¨ía
->
my_deÁu…_˘x
;

715 
	gs
.
	gmy_dummy_èsk
 = 
t
;

716 
__TBB_ASSERT
(
s
.
my_ö√rmo°_ru¬ög_èsk
 =
t
, 
NULL
);

718 ~
ouãrmo°_c⁄ãxt
() {

719 
	gs
.
	gmy_dummy_èsk
 = 
‹ig_dummy
;

720 #i‡
TBB_USE_EXCEPTIONS


722 
	gt
->
¥efix
().
	gc⁄ãxt
 = 
‹ig_˘x
;

725 } 
sc›e
(
this
, 
s
);

726 
my_dñeg©e
();

727  
	gNULL
;

729 ~
dñeg©ed_èsk
() {

731 
__TBB_ASSERT
(
my_roŸ
->
ªf_cou¡
()==2, 
NULL
);

732 
__TBB_°‹e_wôh_ªÀa£
(
my_roŸ
->
¥efix
().
ªf_cou¡
, 1);

733 
	gmy_m⁄ô‹
.
nŸify_ªœxed
(*
this
);

735 
	gpublic
:

736 
dñeg©ed_èsk
–
öã∫Æ
::
dñeg©e_ba£
 & 
d
, 
c⁄cuºít_m⁄ô‹
 & 
s
, 
èsk
 * 
t
 )

737 : 
my_dñeg©e
(
d
), 
my_m⁄ô‹
(
s
), 
my_roŸ
(
t
) {}

739 
boﬁ
 
›î©‹
()(
uöçå_t
 
	g˘x
Ëc⁄° {  (*)˘x =(*)&
my_dñeg©e
; }

742 
	gèsk_¨ía_ba£
::
öã∫Æ_execuã
–
öã∫Æ
::
dñeg©e_ba£
& 
d
) const {

743 
__TBB_ASSERT
(
my_¨ía
, 
NULL
);

744 
gíîic_scheduÀr
* 
	gs
 = 
govîn‹
::
loˇl_scheduÀr
();

745 
__TBB_ASSERT
(
s
, "Scheduler isÇot initialized");

748 if–
	gs
->
	gmy_¨ía
 =
my_¨ía
 || (!
__TBB_lﬂd_wôh_acquúe
(my_¨ía->
my_¶Ÿs
[0].
my_scheduÀr
)

749 && 
as_©omic
(
my_¨ía
->
my_¶Ÿs
[0].
my_scheduÀr
).
com∑ª_™d_sw≠
(
s
, 
NULL
 ) == NULL) ) {

750 
˝u_˘l_ív_hñ≥r
 
˝u_˘l_hñ≥r
;

751 
	g˝u_˘l_hñ≥r
.
£t_ív
–
__TBB_CONTEXT_ARG1
(
my_c⁄ãxt
) );

752 #i‡
TBB_USE_EXCEPTIONS


753 
	gåy
 {

756 
√°ed_¨ía_c⁄ãxt
 
sc›e
(
s
, 
my_¨ía
, !
my_ma°î_¶Ÿs
);

757 
d
();

758 #i‡
TBB_USE_EXCEPTIONS


759 } 
ˇtch
(...) {

760 
	g˝u_˘l_hñ≥r
.
ª°‹e_deÁu…
();

761 if–
	gmy_vîsi⁄_™d_åaôs
 & 
	gexa˘_ex˚±i⁄_Êag
 ) 
	gthrow
;

763 
èsk_group_c⁄ãxt
 
ex˚±i⁄_c⁄èöî
–èsk_group_c⁄ãxt::
isﬁ©ed
,

764 
èsk_group_c⁄ãxt
::
deÁu…_åaôs
 & ~èsk_group_c⁄ãxt::
exa˘_ex˚±i⁄
 );

765 
	gex˚±i⁄_c⁄èöî
.
ªgi°î_≥ndög_ex˚±i⁄
();

766 
__TBB_ASSERT
(
ex˚±i⁄_c⁄èöî
.
my_ex˚±i⁄
, 
NULL
);

767 
	gex˚±i⁄_c⁄èöî
.
	gmy_ex˚±i⁄
->
throw_£lf
();

772 
	gc⁄cuºít_m⁄ô‹
::
thªad_c⁄ãxt
 
waôî
;

773 #i‡
__TBB_TASK_GROUP_CONTEXT


774 
èsk_group_c⁄ãxt
 
exec_c⁄ãxt
–èsk_group_c⁄ãxt::
isﬁ©ed
, 
my_vîsi⁄_™d_åaôs
 & 
exa˘_ex˚±i⁄_Êag
 );

775 #i‡
__TBB_FP_CONTEXT


776 
	gexec_c⁄ãxt
.
c›y_Â_£âögs
–*
my_c⁄ãxt
 );

779 
auto_em±y_èsk
 
roŸ
(
__TBB_CONTEXT_ARG
(
s
, &
exec_c⁄ãxt
));

780 
	groŸ
.
¥efix
().
	gªf_cou¡
 = 2;

781 
	gmy_¨ía
->
íqueue_èsk
–*
√w
–
èsk
::
Æloˇã_roŸ
(
__TBB_CONTEXT_ARG1
(
exec_c⁄ãxt
)) )

782 
dñeg©ed_èsk
(
d
, 
my_¨ía
->
my_exô_m⁄ô‹s
, &
roŸ
),

783 0, 
s
->
my_øndom
 );

785 
	gmy_¨ía
->
	gmy_exô_m⁄ô‹s
.
¥ï¨e_waô
(
waôî
, (
uöçå_t
)&
d
);

786 if–
__TBB_lﬂd_wôh_acquúe
(
roŸ
.
¥efix
().
ªf_cou¡
) < 2 ) {

787 
	gmy_¨ía
->
	gmy_exô_m⁄ô‹s
.
ˇn˚l_waô
(
waôî
);

790 if–!
__TBB_lﬂd_wôh_acquúe
(
my_¨ía
->
my_¶Ÿs
[0].
my_scheduÀr
)

791 && 
as_©omic
(
my_¨ía
->
my_¶Ÿs
[0].
my_scheduÀr
).
com∑ª_™d_sw≠
(
s
, 
NULL
 ) == NULL ) {

792 
my_¨ía
->
my_exô_m⁄ô‹s
.
ˇn˚l_waô
(
waôî
);

793 
√°ed_¨ía_c⁄ãxt
 
sc›e
(
s
, 
my_¨ía
, !
my_ma°î_¶Ÿs
);

794 
	gs
->
loˇl_waô_f‹_Æl
(
roŸ
, 
NULL
);

795 #i‡
TBB_USE_EXCEPTIONS


796 
__TBB_ASSERT
–!
exec_c⁄ãxt
.
my_ex˚±i⁄
, 
NULL
 );

798 
__TBB_ASSERT
–
roŸ
.
¥efix
().
ªf_cou¡
 =0, 
NULL
 );

801 
	gmy_¨ía
->
	gmy_exô_m⁄ô‹s
.
commô_waô
(
waôî
);

803 }  
__TBB_lﬂd_wôh_acquúe
(
roŸ
.
¥efix
().
ªf_cou¡
) == 2 );

804 #i‡
TBB_USE_EXCEPTIONS


806 if–
	gèsk_group_c⁄ãxt
::
ex˚±i⁄_c⁄èöî_ty≥
 *
≥
 = 
exec_c⁄ãxt
.
my_ex˚±i⁄
 )

807 
≥
->
throw_£lf
();

814 ˛as†
	cwaô_èsk
 : 
public
 
èsk
 {

815 
bö¨y_£m≠h‹e
 & 
my_sig«l
;

816  
èsk
* 
execuã
() {

817 
gíîic_scheduÀr
* 
	gs
 = 
govîn‹
::
loˇl_scheduÀr_if_öôülized
();

818 
__TBB_ASSERT
–
s
, 
NULL
 );

819 if–
	gs
->
	gmy_¨ía_ödex
 && s->
w‹kî_ouãrmo°_Àvñ
() ) {

820 
	gs
->
loˇl_waô_f‹_Æl
–*
s
->
my_dummy_èsk
, 
NULL
 );

821 } 
	gs
->
	gmy_¨ía
->
is_out_of_w‹k
();

822 
	gmy_sig«l
.
V
();

823  
	gNULL
;

825 
	gpublic
:

826 
waô_èsk
 ( 
bö¨y_£m≠h‹e
 & 
£ma
 ) : 
my_sig«l
(sema) {}

829 
	gèsk_¨ía_ba£
::
öã∫Æ_waô
() const {

830 
__TBB_ASSERT
(
my_¨ía
, 
NULL
);

831 
gíîic_scheduÀr
* 
	gs
 = 
govîn‹
::
loˇl_scheduÀr
();

832 
__TBB_ASSERT
(
s
, "Scheduler isÇot initialized");

833 
__TBB_ASSERT
(
s
->
my_¨ía
 !my_¨í®|| s->
my_¨ía_ödex
 == 0, "task_arena::wait_until_empty() isÇot supported withiná worker context" );

834 if–
	gs
->
	gmy_¨ía
 =
my_¨ía
 ) {

836 
__TBB_ASSERT
(
s
->
ma°î_ouãrmo°_Àvñ
(), "unsupported");

837 if–!
	gs
->
	gmy_¨ía_ödex
 )

838  
	gmy_¨ía
->
num_w‹kîs_a˘ive
() )

839 
	gs
->
waô_u¡û_em±y
();

841  
	gmy_¨ía
->
	gmy_poﬁ_°©e
 !
¨ía
::
SNAPSHOT_EMPTY
 ) {

842 if–!
__TBB_lﬂd_wôh_acquúe
(
my_¨ía
->
my_¶Ÿs
[0].
my_scheduÀr
)

843 && 
as_©omic
(
my_¨ía
->
my_¶Ÿs
[0].
my_scheduÀr
).
com∑ª_™d_sw≠
(
s
, 
NULL
) == NULL ) {

844 
√°ed_¨ía_c⁄ãxt
 
a
(
s
, 
my_¨ía
, !
my_ma°î_¶Ÿs
, 
åue
);

845 
	gs
->
waô_u¡û_em±y
();

847 
bö¨y_£m≠h‹e
 
	gwaôî
;

848 
öã∫Æ_íqueue
–*
√w
–
èsk
::
Æloˇã_roŸ
(
__TBB_CONTEXT_ARG1
(*
my_c⁄ãxt
)ËË
waô_èsk
(
waôî
), 0 );

849 
	gwaôî
.
P
();

852 if–!
	gmy_¨ía
->
num_w‹kîs_a˘ive
(Ë&& !my_¨ía->
	gmy_¶Ÿs
[0].
	gmy_scheduÀr
)

854 
__TBB_Yõld
();

858  
	gèsk_¨ía_ba£
::
öã∫Æ_cuºít_¶Ÿ
() {

859 
gíîic_scheduÀr
* 
s
 = 
govîn‹
::
loˇl_scheduÀr_if_öôülized
();

860  
	gs
? (s->
	gmy_¨ía_ödex
) : -1;

	@viper/concurrentqueue-src/benchmarks/tbb/arena.h

21 #i‚de‡
_TBB_¨ía_H


22 
	#_TBB_¨ía_H


	)

24 
	~"tbb/tbb_°ddef.h
"

25 
	~"tbb/©omic.h
"

27 
	~"tbb/tbb_machöe.h
"

29 
	~"scheduÀr_comm⁄.h
"

30 
	~"öåusive_li°.h
"

31 
	~"èsk_°ªam.h
"

32 
	~"../rml/ö˛ude/rml_tbb.h
"

33 
	~"maûbox.h
"

34 
	~"ob£rvî_¥oxy.h
"

35 
	~"m¨kë.h
"

36 
	~"govîn‹.h
"

37 #i‡
__TBB_TASK_ARENA


38 
	~"c⁄cuºít_m⁄ô‹.h
"

41 
«me•a˚
 
	gtbb
 {

43 
˛ass
 
	gèsk_group_c⁄ãxt
;

44 
˛ass
 
	gÆloˇã_roŸ_wôh_c⁄ãxt_¥oxy
;

46 
«me•a˚
 
	göã∫Æ
 {

51 
	g¨ía_ba£
 : 
∑dded
<
öåusive_li°_node
> {

53 
my_num_w‹kîs_ÆlŸãd
;

58 
	g©omic
<> 
	gmy_ª„ªn˚s
;

60 #i‡
__TBB_TASK_PRIORITY


62 vﬁ©ûê
öçå_t
 
	gmy_t›_¥i‹ôy
;

65 
	g©omic
<> 
	gmy_limô
;

72 
èsk_°ªam
 
	gmy_èsk_°ªam
[
num_¥i‹ôy_Àvñs
];

79 
èsk_°ªam
 
	gmy_èsk_°ªam
;

82 
	g©omic
<> 
	gmy_limô
;

86 
	gmy_num_w‹kîs_ªque°ed
;

89 
	gmy_num_¶Ÿs
;

92 
	gmy_max_num_w‹kîs
;

95 
m¨kë
* 
	gmy_m¨kë
;

98 
uöçå_t
 
	gmy_aba_ïoch
;

100 #i‡!
__TBB_FP_CONTEXT


102 
__TBB_˝u_˘l_ív_t
 
	gmy_˝u_˘l_ív
;

105 #i‡
__TBB_TRACK_PRIORITY_LEVEL_SATURATION


106 
	gmy_num_w‹kîs_¥e£¡
;

114 
	gtbb
::
©omic
<
uöçå_t
> 
my_poﬁ_°©e
;

116 #i‡
__TBB_TASK_GROUP_CONTEXT


120 
èsk_group_c⁄ãxt
* 
	gmy_deÁu…_˘x
;

123 #i‡
__TBB_SCHEDULER_OBSERVER


125 
ob£rvî_li°
 
	gmy_ob£rvîs
;

128 #i‡
__TBB_TASK_PRIORITY


130 
öçå_t
 
	gmy_bŸtom_¥i‹ôy
;

135 
uöçå_t
 
	gmy_ªlﬂd_ïoch
;

138 
èsk
* 
	gmy_‹ph™ed_èsks
;

141 
	gtbb
::
©omic
<
uöçå_t
> 
my_ab™d⁄mít_ïoch
;

147 
	gtbb
::
©omic
<
öçå_t
> 
my_skù≥d_fifo_¥i‹ôy
;

151 
boﬁ
 
	gmy_m™d©‹y_c⁄cuºícy
;

153 #i‡
__TBB_TASK_ARENA


155 
c⁄cuºít_m⁄ô‹
 
	gmy_exô_m⁄ô‹s
;

158 #i‡
TBB_USE_ASSERT


160 
uöçå_t
 
	gmy_gu¨d
;

164 
˛ass
 
	g¨ía


165 #i‡(
__GNUC__
<4 || __GNUC__==4 && 
__GNUC_MINOR__
==0Ë&& !
__INTEL_COMPILER


166 : 
public
 
∑dded
<
¨ía_ba£
>

168 : 
¥iv©e
 
∑dded
<
¨ía_ba£
>

171 
¥iv©e
:

172 
‰õnd
 
˛ass
 
gíîic_scheduÀr
;

173 
	gãm∂©e
<
ty≥«me
 
	gScheduÀrTøôs
> 
‰õnd
 
˛ass
 
	gcu°om_scheduÀr
;

174 
‰õnd
 
˛ass
 
	ggovîn‹
;

175 
‰õnd
 
˛ass
 
	gèsk_scheduÀr_ob£rvî_v3
;

176 
‰õnd
 
˛ass
 
	gm¨kë
;

177 
‰õnd
 
˛ass
 
	gtbb
::
èsk
;

178 
‰õnd
 
˛ass
 
	gtbb
::
èsk_group_c⁄ãxt
;

179 
‰õnd
 
˛ass
 
	gÆloˇã_roŸ_wôh_c⁄ãxt_¥oxy
;

180 
‰õnd
 
˛ass
 
	göåusive_li°
<
	g¨ía
>;

181 
‰õnd
 
˛ass
 
	göãrÁ˚7
::
öã∫Æ
::
èsk_¨ía_ba£
;

182 
‰õnd
 
˛ass
 
	göãrÁ˚7
::
öã∫Æ
::
dñeg©ed_èsk
;

183 
‰õnd
 
˛ass
 
	göãrÁ˚7
::
öã∫Æ
::
waô_èsk
;

185 
	g∑dded
<
	t¨ía_ba£
> 
	tba£_ty≥
;

188 
¨ía
 ( 
m¨kë
&, 
max_num_w‹kîs
 );

191 
	g¨ía
& 
Æloˇã_¨ía
–
m¨kë
&, 
max_num_w‹kîs
 );

193 
num_¶Ÿs_to_ª£rve
 ( 
max_num_w‹kîs
 ) {

194  
max
(2u, 
max_num_w‹kîs
 + 1);

197 
Æloˇti⁄_size
 ( 
max_num_w‹kîs
 ) {

198  (
	gba£_ty≥
Ë+ 
num_¶Ÿs_to_ª£rve
(
max_num_w‹kîs
Ë* ((
	gmaû_outbox
Ë+ (
	g¨ía_¶Ÿ
));

201 #i‡
__TBB_TASK_GROUP_CONTEXT


207 
	gãm∂©e
 <
ty≥«me
 
	gT
>

208 
boﬁ
 
¥›ag©e_èsk_group_°©e
 ( 
T
 
èsk_group_c⁄ãxt
::*
m±r_°©e
,Åask_group_c⁄ãxt& 
§c
, T 
√w_°©e
 );

212 
	gmaû_outbox
& 
maûbox
–
afföôy_id
 
id
 ) {

213 
__TBB_ASSERT
–0<
id
, "affinity id must beÖositive integer" );

214 
__TBB_ASSERT
–
id
 <
my_num_¶Ÿs
, "affinity id out of bounds" );

216  ((
	gmaû_outbox
*)
	gthis
)[-()
id
];

220 
‰ì_¨ía
 ();

222 
uöçå_t
 
	tpoﬁ_°©e_t
;

225 c⁄° 
poﬁ_°©e_t
 
	gSNAPSHOT_EMPTY
 = 0;

228 c⁄° 
poﬁ_°©e_t
 
	gSNAPSHOT_FULL
 =Öool_state_t(-1);

231 
boﬁ
 
is_busy_‹_em±y
–
poﬁ_°©e_t
 
s
 ) {  
	gs
 < 
	gSNAPSHOT_FULL
; }

234 
num_w‹kîs_a˘ive
( ) {

235  
	gmy_ª„ªn˚s
 >> 1;

239 
	gãm∂©e
<
boﬁ
 
	gS∑w√d
> 
advîti£_√w_w‹k
();

243 
boﬁ
 
is_out_of_w‹k
();

246 
íqueue_èsk
–
èsk
&, 
öçå_t
, 
Fa°R™dom
 & );

249 
¥o˚ss
–
gíîic_scheduÀr
& );

252 
	gãm∂©e
<
boﬁ
 
	gis_ma°î
>

253 
ölöe
 
⁄_thªad_Àavög
 ( );

255 #i‡
__TBB_STATISTICS


257 
dump_¨ía_°©i°ics
 ();

260 #i‡
__TBB_TASK_PRIORITY


263 
ölöe
 
boﬁ
 
may_have_èsks
 ( 
gíîic_scheduÀr
*, boﬁ& 
èsks_¥e£¡
, boﬁ& 
dequeuög_possibÀ
 );

266 
‹ph™_ofÊﬂded_èsks
 ( 
gíîic_scheduÀr
& 
s
 );

269 #i‡
__TBB_COUNT_TASK_NODES


271 
öçå_t
 
w‹kîs_èsk_node_cou¡
();

275 
¨ía_¶Ÿ
 
	gmy_¶Ÿs
[1];

279 
	gãm∂©e
<
boﬁ
 
	gis_ma°î
>

280 
ölöe
 
	g¨ía
::
⁄_thªad_Àavög
 ( ) {

330 
uöçå_t
 
aba_ïoch
 = 
my_aba_ïoch
;

331 
m¨kë
* 
	gm
 = 
my_m¨kë
;

332 
__TBB_ASSERT
(
my_ª„ªn˚s
 > (!
is_ma°î
), "brokenárenaÑeference counter");

333 i‡–(
	gmy_ª„ªn˚s
 -
is_ma°î
? 1:2 ) == 0 )

334 
m¨kë
::
åy_de°roy_¨ía
–
m
, 
this
, 
aba_ïoch
, 
is_ma°î
 );

337 
	gãm∂©e
<
boﬁ
 
	gS∑w√d
> 
	g¨ía
::
advîti£_√w_w‹k
() {

338 if–!
S∑w√d
 ) {

339 if–
my_max_num_w‹kîs
==0 ) {

340 
my_max_num_w‹kîs
 = 1;

341 
__TBB_ASSERT
(!
my_m™d©‹y_c⁄cuºícy
, "");

342 
	gmy_m™d©‹y_c⁄cuºícy
 = 
åue
;

343 
__TBB_ASSERT
(!
num_w‹kîs_a˘ive
(), "");

344 
	gmy_poﬁ_°©e
 = 
SNAPSHOT_FULL
;

345 
	gmy_m¨kë
->
adju°_dem™d
–*
this
, 1 );

350 
©omic_„n˚
();

358 
poﬁ_°©e_t
 
	g¢≠shŸ
 = 
my_poﬁ_°©e
;

359 if–
is_busy_‹_em±y
(
¢≠shŸ
) ) {

362 if–
	gmy_poﬁ_°©e
.
com∑ª_™d_sw≠
–
SNAPSHOT_FULL
, 
¢≠shŸ
 )==
SNAPSHOT_EMPTY
 ) {

363 if–
¢≠shŸ
!=
SNAPSHOT_EMPTY
 ) {

367 if–
my_poﬁ_°©e
.
com∑ª_™d_sw≠
–
SNAPSHOT_FULL
, 
SNAPSHOT_EMPTY
 )!=SNAPSHOT_EMPTY ) {

375 if–
	gS∑w√d
 ) {

376 if–
	gmy_m™d©‹y_c⁄cuºícy
 ) {

377 
__TBB_ASSERT
(
my_max_num_w‹kîs
==1, "");

378 
__TBB_ASSERT
(!
govîn‹
::
loˇl_scheduÀr
()->
is_w‹kî
(), "");

383 
	gmy_max_num_w‹kîs
 = 0;

384 
	gmy_m™d©‹y_c⁄cuºícy
 = 
Ál£
;

388 
	gmy_m¨kë
->
adju°_dem™d
–*
this
, 
my_max_num_w‹kîs
 );

	@viper/concurrentqueue-src/benchmarks/tbb/atomic.h

21 #i‚de‡
__TBB_©omic_H


22 
	#__TBB_©omic_H


	)

24 
	~<c°ddef
>

26 #i‡
_MSC_VER


27 
	#__TBB_LONG_LONG
 
__öt64


	)

29 
	#__TBB_LONG_LONG
 

	)

32 
	~"tbb_machöe.h
"

34 #i‡
deföed
(
_MSC_VER
Ë&& !deföed(
__INTEL_COMPILER
)

36 #¥agm®
w¨nög
 (
push
)

37 #¥agm®
w¨nög
 (
dißbÀ
: 4244 4267 4512)

40 
«me•a˚
 
	gtbb
 {

43 
	emem‹y_£m™tics
 {

45 
	gfuŒ_„n˚
,

47 
	gacquúe
,

49 
	gªÀa£
,

51 
	gªœxed


55 
«me•a˚
 
	göã∫Æ
 {

57 #i‡
__TBB_ATTRIBUTE_ALIGNED_PRESENT


58 
	#__TBB_DECL_ATOMIC_FIELD
(
t
,
f
,
a
Ëà‡
	`__©åibuã__
 ((
	`Æig√d
◊)));

	)

59 #ñi‡
__TBB_DECLSPEC_ALIGN_PRESENT


60 
	#__TBB_DECL_ATOMIC_FIELD
(
t
,
f
,
a
Ë
	`__de˛•ec
(
	`Æign
◊)Ëàf;

	)

62 #îr‹ 
Do
 
nŸ
 
know
 
sy¡ax
 
f‹cög
 
Æignmít
.

65 
	gãm∂©e
<
size_t
 
	gS
>

66 
	g©omic_ªp
;

68 
	gãm∂©e
<>

69 
	g©omic_ªp
<1> {

70 
öt8_t
 
	tw‹d
;

72 
	gãm∂©e
<>

73 
	g©omic_ªp
<2> {

74 
öt16_t
 
	tw‹d
;

76 
	gãm∂©e
<>

77 
	g©omic_ªp
<4> {

78 #i‡
_MSC_VER
 && !
_WIN64


80 
öçå_t
 
	tw‹d
;

82 
öt32_t
 
	tw‹d
;

85 #i‡
__TBB_64BIT_ATOMICS


86 
	gãm∂©e
<>

87 
	g©omic_ªp
<8> {

88 
öt64_t
 
	tw‹d
;

92 
	gãm∂©e
<
ty≥«me
 
	gvÆue_ty≥
, 
size_t
 
	gsize
>

93 
	gÆig√d_°‹age
;

96 #i‡
__TBB_ATOMIC_CTORS


97 
	#ATOMIC_STORAGE_PARTIAL_SPECIALIZATION
(
S
) \

98 
ãm∂©e
<
ty≥«me
 
vÆue_ty≥
> \

99 
Æig√d_°‹age
<
vÆue_ty≥
,
S
> { \

100 
	`__TBB_DECL_ATOMIC_FIELD
(
vÆue_ty≥
,
my_vÆue
,
S
) \

101 
	`Æig√d_°‹age
() =  ; \

102 
c⁄°ex¥
 
	`Æig√d_°‹age
(
vÆue_ty≥
 
vÆue
):
	`my_vÆue
(value){} \

104 

	)

106 
	#ATOMIC_STORAGE_PARTIAL_SPECIALIZATION
(
S
) \

107 
ãm∂©e
<
ty≥«me
 
vÆue_ty≥
> \

108 
Æig√d_°‹age
<
vÆue_ty≥
,
S
> { \

109 
	`__TBB_DECL_ATOMIC_FIELD
(
vÆue_ty≥
,
my_vÆue
,
S
) \

111 

	)

114 
	gãm∂©e
<
ty≥«me
 
	gvÆue_ty≥
>

115 
	gÆig√d_°‹age
<
	gvÆue_ty≥
,1> {

116 
vÆue_ty≥
 
	gmy_vÆue
;

117 #i‡
__TBB_ATOMIC_CTORS


118 
Æig√d_°‹age
() =  ;

119 
c⁄°ex¥
 
Æig√d_°‹age
(
vÆue_ty≥
 
vÆue
):
my_vÆue
(value){}

123 
ATOMIC_STORAGE_PARTIAL_SPECIALIZATION
(2)

124 
ATOMIC_STORAGE_PARTIAL_SPECIALIZATION
(4)

125 #i‡
__TBB_64BIT_ATOMICS


126 
ATOMIC_STORAGE_PARTIAL_SPECIALIZATION
(8)

129 
	gãm∂©e
<
size_t
 
	gSize
, 
mem‹y_£m™tics
 
	gM
>

130 
	g©omic_åaôs
;

132 
	#__TBB_DECL_FENCED_ATOMIC_PRIMITIVES
(
S
,
M
) \

133 
ãm∂©e
<> 
©omic_åaôs
<
S
,
M
> { \

134 
©omic_ªp
<
	tS
>::
	tw‹d
 word; \

135 
ölöe
 
w‹d
 
	`com∑ª_™d_sw≠
–vﬁ©ûê* 
loˇti⁄
, w‹d 
√w_vÆue
, w‹d 
com∑ønd
 ) { \

136  
__TBB_machöe_cmpswp
##
S
##
	`M
(
loˇti⁄
,
√w_vÆue
,
com∑ønd
); \

138 
ölöe
 
w‹d
 
	`„tch_™d_add
–vﬁ©ûê* 
loˇti⁄
, w‹d 
addíd
 ) { \

139  
__TBB_machöe_„tchadd
##
S
##
	`M
(
loˇti⁄
,
addíd
); \

141 
ölöe
 
w‹d
 
	`„tch_™d_°‹e
–vﬁ©ûê* 
loˇti⁄
, w‹d 
vÆue
 ) { \

142  
__TBB_machöe_„tch°‹e
##
S
##
	`M
(
loˇti⁄
,
vÆue
); \

144 };

	)

146 
	#__TBB_DECL_ATOMIC_PRIMITIVES
(
S
) \

147 
ãm∂©e
<
mem‹y_£m™tics
 
M
> \

148 
©omic_åaôs
<
S
,
M
> { \

149 
©omic_ªp
<
	tS
>::
	tw‹d
 word; \

150 
ölöe
 
w‹d
 
	`com∑ª_™d_sw≠
–vﬁ©ûê* 
loˇti⁄
, w‹d 
√w_vÆue
, w‹d 
com∑ønd
 ) { \

151  
__TBB_machöe_cmpswp
##
	`S
(
loˇti⁄
,
√w_vÆue
,
com∑ønd
); \

153 
ölöe
 
w‹d
 
	`„tch_™d_add
–vﬁ©ûê* 
loˇti⁄
, w‹d 
addíd
 ) { \

154  
__TBB_machöe_„tchadd
##
	`S
(
loˇti⁄
,
addíd
); \

156 
ölöe
 
w‹d
 
	`„tch_™d_°‹e
–vﬁ©ûê* 
loˇti⁄
, w‹d 
vÆue
 ) { \

157  
__TBB_machöe_„tch°‹e
##
	`S
(
loˇti⁄
,
vÆue
); \

159 };

	)

161 
	gãm∂©e
<
mem‹y_£m™tics
 
	gM
>

162 
	g©omic_lﬂd_°‹e_åaôs
;

164 
	#__TBB_DECL_ATOMIC_LOAD_STORE_PRIMITIVES
(
M
) \

165 
ãm∂©e
<> 
©omic_lﬂd_°‹e_åaôs
<
M
> { \

166 
ãm∂©e
 <
ty≥«me
 
T
> \

167 
ölöe
 
T
 
	`lﬂd
–c⁄° vﬁ©ûêT& 
loˇti⁄
 ) { \

168  
__TBB_lﬂd_
##
	`M
–
loˇti⁄
 ); \

170 
ãm∂©e
 <
ty≥«me
 
T
> \

171 
ölöe
 
	`°‹e
–vﬁ©ûê
T
& 
loˇti⁄
, T 
vÆue
 ) { \

172 
__TBB_°‹e_
##
	`M
–
loˇti⁄
, 
vÆue
 ); \

174 }

	)

176 #i‡
__TBB_USE_FENCED_ATOMICS


177 
__TBB_DECL_FENCED_ATOMIC_PRIMITIVES
(1,
fuŒ_„n˚
)

178 
__TBB_DECL_FENCED_ATOMIC_PRIMITIVES
(2,
fuŒ_„n˚
)

179 
__TBB_DECL_FENCED_ATOMIC_PRIMITIVES
(4,
fuŒ_„n˚
)

180 
__TBB_DECL_FENCED_ATOMIC_PRIMITIVES
(1,
acquúe
)

181 
__TBB_DECL_FENCED_ATOMIC_PRIMITIVES
(2,
acquúe
)

182 
__TBB_DECL_FENCED_ATOMIC_PRIMITIVES
(4,
acquúe
)

183 
__TBB_DECL_FENCED_ATOMIC_PRIMITIVES
(1,
ªÀa£
)

184 
__TBB_DECL_FENCED_ATOMIC_PRIMITIVES
(2,
ªÀa£
)

185 
__TBB_DECL_FENCED_ATOMIC_PRIMITIVES
(4,
ªÀa£
)

186 
__TBB_DECL_FENCED_ATOMIC_PRIMITIVES
(1,
ªœxed
)

187 
__TBB_DECL_FENCED_ATOMIC_PRIMITIVES
(2,
ªœxed
)

188 
__TBB_DECL_FENCED_ATOMIC_PRIMITIVES
(4,
ªœxed
)

189 #i‡
__TBB_64BIT_ATOMICS


190 
__TBB_DECL_FENCED_ATOMIC_PRIMITIVES
(8,
fuŒ_„n˚
)

191 
__TBB_DECL_FENCED_ATOMIC_PRIMITIVES
(8,
acquúe
)

192 
__TBB_DECL_FENCED_ATOMIC_PRIMITIVES
(8,
ªÀa£
)

193 
__TBB_DECL_FENCED_ATOMIC_PRIMITIVES
(8,
ªœxed
)

196 
__TBB_DECL_ATOMIC_PRIMITIVES
(1)

197 
__TBB_DECL_ATOMIC_PRIMITIVES
(2)

198 
__TBB_DECL_ATOMIC_PRIMITIVES
(4)

199 #i‡
__TBB_64BIT_ATOMICS


200 
__TBB_DECL_ATOMIC_PRIMITIVES
(8)

204 
__TBB_DECL_ATOMIC_LOAD_STORE_PRIMITIVES
(
fuŒ_„n˚
);

205 
__TBB_DECL_ATOMIC_LOAD_STORE_PRIMITIVES
(
acquúe
);

206 
__TBB_DECL_ATOMIC_LOAD_STORE_PRIMITIVES
(
ªÀa£
);

207 
__TBB_DECL_ATOMIC_LOAD_STORE_PRIMITIVES
(
ªœxed
);

212 
	#__TBB_MINUS_ONE
(
T
Ë(
	`T
(T(0)-T(1)))

	)

217 
	gãm∂©e
<
ty≥«me
 
	gT
>

218 
	s©omic_im∂
 {

219 
	g¥Ÿe˘ed
:

220 
Æig√d_°‹age
<
T
,(
	gT
)> 
	gmy_°‹age
;

221 
	g¥iv©e
:

224 
ãm∂©e
<
ty≥«me
 
vÆue_ty≥
>

225 
	uc⁄vîãr
 {

226 
ty≥«me
 
	t©omic_ªp
<(
	tvÆue_ty≥
)>::
	tw‹d
 
	tbôs_ty≥
;

227 
c⁄vîãr
(){}

228 
c⁄vîãr
(
vÆue_ty≥
 
a_vÆue
Ë: 
vÆue
(a_value) {}

229 
vÆue_ty≥
 
vÆue
;

230 
bôs_ty≥
 
	gbôs
;

233 
	gãm∂©e
<
ty≥«me
 
	gvÆue_t
>

234 
ty≥«me
 
	gc⁄vîãr
<
	gvÆue_t
>::
bôs_ty≥
 
to_bôs
(
vÆue_t
 
vÆue
){

235  
c⁄vîãr
<
vÆue_t
>(
vÆue
).
bôs
;

237 
	gãm∂©e
<
ty≥«me
 
	gvÆue_t
>

238 
vÆue_t
 
to_vÆue
(
ty≥«me
 
c⁄vîãr
<vÆue_t>::
bôs_ty≥
 
bôs
){

239 
c⁄vîãr
<
vÆue_t
> 
u
;

240 
	gu
.
	gbôs
 = 
bôs
;

241  
	gu
.
	gvÆue
;

244 
	gãm∂©e
<
ty≥«me
 
	gvÆue_t
>

245 
	g±r_c⁄vîãr
;

247 
	gãm∂©e
<
ty≥«me
 
	gvÆue_t
>

248 
	g±r_c⁄vîãr
<
	gvÆue_t
 *> {

249 
±r_c⁄vîãr
(){}

250 
±r_c⁄vîãr
(
vÆue_t
* 
a_vÆue
Ë: 
vÆue
(a_value) {}

251 
vÆue_t
* 
vÆue
;

252 
uöçå_t
 
	gbôs
;

256 
	gãm∂©e
<
ty≥«me
 
	gvÆue_t
>

257 
ty≥«me
 
	gc⁄vîãr
<
	gvÆue_t
>::
bôs_ty≥
 & 
to_bôs_ªf
(
vÆue_t
& 
vÆue
){

260 #i‡!
__SUNPRO_CC


261  *(
ty≥«me
 
c⁄vîãr
<
vÆue_t
>::
bôs_ty≥
*)
±r_c⁄vîãr
<vÆue_t*>(&
vÆue
).
bôs
;

263  *(
ty≥«me
 
	gc⁄vîãr
<
	gvÆue_t
>::
bôs_ty≥
*)(&
vÆue
);

268 
	gpublic
:

269 
T
 
	tvÆue_ty≥
;

271 #i‡
__TBB_ATOMIC_CTORS


272 
©omic_im∂
() =  ;

273 
c⁄°ex¥
 
©omic_im∂
(
vÆue_ty≥
 
vÆue
):
my_°‹age
(value){}

275 
ãm∂©e
<
mem‹y_£m™tics
 
M
>

276 
vÆue_ty≥
 
„tch_™d_°‹e
–vÆue_ty≥ 
vÆue
 ) {

277  
to_vÆue
<
vÆue_ty≥
>(

278 
öã∫Æ
::
©omic_åaôs
<(
vÆue_ty≥
),
	gM
>::
„tch_™d_°‹e
–&
my_°‹age
.
my_vÆue
, 
to_bôs
(
vÆue
) )

282 
vÆue_ty≥
 
„tch_™d_°‹e
–vÆue_ty≥ 
vÆue
 ) {

283  
	g„tch_™d_°‹e
<
	gfuŒ_„n˚
>(
	gvÆue
);

286 
	gãm∂©e
<
mem‹y_£m™tics
 
	gM
>

287 
vÆue_ty≥
 
com∑ª_™d_sw≠
–vÆue_ty≥ 
vÆue
, vÆue_ty≥ 
com∑ønd
 ) {

288  
	gto_vÆue
<
	gvÆue_ty≥
>(

289 
	göã∫Æ
::
©omic_åaôs
<(
vÆue_ty≥
),
	gM
>::
com∑ª_™d_sw≠
–&
my_°‹age
.
my_vÆue
, 
to_bôs
(
vÆue
),Åo_bôs(
com∑ønd
) )

293 
vÆue_ty≥
 
com∑ª_™d_sw≠
–vÆue_ty≥ 
vÆue
, vÆue_ty≥ 
com∑ønd
 ) {

294  
	gcom∑ª_™d_sw≠
<
	gfuŒ_„n˚
>(
	gvÆue
,
	gcom∑ønd
);

297 
›î©‹
 
vÆue_ty≥
() const volatile {

298  
	gto_vÆue
<
	gvÆue_ty≥
>(

299 
__TBB_lﬂd_wôh_acquúe
–
to_bôs_ªf
(
my_°‹age
.
my_vÆue
) )

303 
	gãm∂©e
<
mem‹y_£m™tics
 
	gM
>

304 
vÆue_ty≥
 
lﬂd
 () const {

305  
	gto_vÆue
<
	gvÆue_ty≥
>(

306 
	göã∫Æ
::
©omic_lﬂd_°‹e_åaôs
<
M
>::
lﬂd
–
to_bôs_ªf
(
my_°‹age
.
my_vÆue
) )

310 
vÆue_ty≥
 
lﬂd
 () const {

311  
	glﬂd
<
	gacquúe
>();

314 
	gãm∂©e
<
mem‹y_£m™tics
 
	gM
>

315 
°‹e
 ( 
vÆue_ty≥
 
vÆue
 ) {

316 
	göã∫Æ
::
©omic_lﬂd_°‹e_åaôs
<
M
>::
°‹e
–
to_bôs_ªf
(
my_°‹age
.
my_vÆue
), 
to_bôs
(
vÆue
));

319 
°‹e
 ( 
vÆue_ty≥
 
vÆue
 ) {

320 
	g°‹e
<
	gªÀa£
>–
	gvÆue
 );

323 
	g¥Ÿe˘ed
:

324 
vÆue_ty≥
 
°‹e_wôh_ªÀa£
–vÆue_ty≥ 
rhs
 ) {

326 
__TBB_°‹e_wôh_ªÀa£
–
to_bôs_ªf
(
my_°‹age
.
my_vÆue
), 
to_bôs
(
rhs
) );

327  
	grhs
;

335 
	gãm∂©e
<
ty≥«me
 
	gI
,Åy≥«mê
	gD
,Åy≥«mê
	gSãpTy≥
>

336 
	g©omic_im∂_wôh_¨ôhmëic
: 
©omic_im∂
<
I
> {

337 
public
:

338 
I
 
	tvÆue_ty≥
;

339 #i‡ 
__TBB_ATOMIC_CTORS


340 
©omic_im∂_wôh_¨ôhmëic
() =  ;

341 
c⁄°ex¥
 
©omic_im∂_wôh_¨ôhmëic
(
vÆue_ty≥
 
vÆue
): 
©omic_im∂
<
I
>(value){}

343 
ãm∂©e
<
mem‹y_£m™tics
 
M
>

344 
vÆue_ty≥
 
„tch_™d_add
–
D
 
addíd
 ) {

345  
vÆue_ty≥
(
öã∫Æ
::
©omic_åaôs
<(vÆue_ty≥),
M
>::
„tch_™d_add
–&
this
->
my_°‹age
.
my_vÆue
, 
addíd
*(
SãpTy≥
) ));

348 
vÆue_ty≥
 
„tch_™d_add
–
D
 
addíd
 ) {

349  
	g„tch_™d_add
<
	gfuŒ_„n˚
>(
	gaddíd
);

352 
	gãm∂©e
<
mem‹y_£m™tics
 
	gM
>

353 
vÆue_ty≥
 
„tch_™d_ö¸emít
() {

354  
	g„tch_™d_add
<
	gM
>(1);

357 
vÆue_ty≥
 
„tch_™d_ö¸emít
() {

358  
„tch_™d_add
(1);

361 
	gãm∂©e
<
mem‹y_£m™tics
 
	gM
>

362 
vÆue_ty≥
 
„tch_™d_de¸emít
() {

363  
	g„tch_™d_add
<
	gM
>(
__TBB_MINUS_ONE
(
D
));

366 
vÆue_ty≥
 
„tch_™d_de¸emít
() {

367  
„tch_™d_add
(
__TBB_MINUS_ONE
(
D
));

370 
	gpublic
:

371 
vÆue_ty≥
 
›î©‹
+=–
D
 
vÆue
 ) {

372  
„tch_™d_add
(
vÆue
)+value;

375 
vÆue_ty≥
 
	g›î©‹
-=–
D
 
vÆue
 ) {

378  
›î©‹
+=(
D
(0)-
vÆue
);

381 
vÆue_ty≥
 
	g›î©‹
++() {

382  
„tch_™d_add
(1)+1;

385 
vÆue_ty≥
 
	g›î©‹
--() {

386  
„tch_™d_add
(
__TBB_MINUS_ONE
(
D
))-1;

389 
vÆue_ty≥
 
	g›î©‹
++() {

390  
„tch_™d_add
(1);

393 
vÆue_ty≥
 
	g›î©‹
--() {

394  
„tch_™d_add
(
__TBB_MINUS_ONE
(
D
));

404 
	gãm∂©e
<
ty≥«me
 
	gT
>

405 
	g©omic
: 
öã∫Æ
::
©omic_im∂
<
T
> {

406 #i‡
__TBB_ATOMIC_CTORS


407 
©omic
() = ;

408 
c⁄°ex¥
 
©omic
(
T
 
¨g
): 
öã∫Æ
::
©omic_im∂
<T>(arg) {}

410 
T
 
›î©‹
=–T 
rhs
 ) {

412  
this
->
°‹e_wôh_ªÀa£
(
rhs
);

414 
	g©omic
<
	gT
>& 
	g›î©‹
=–c⁄° 
©omic
<
T
>& 
rhs
 ) {
this
->
°‹e_wôh_ªÀa£
‘hs);  *
	gthis
;}

417 #i‡
__TBB_ATOMIC_CTORS


418 
	#__TBB_DECL_ATOMIC
(
T
) \

419 
ãm∂©e
<> 
©omic
<
T
>: 
öã∫Æ
::
©omic_im∂_wôh_¨ôhmëic
<T,T,> { \

420 
	`©omic
() = ; \

421 
c⁄°ex¥
 
	`©omic
(
T
 
¨g
): 
öã∫Æ
::
©omic_im∂_wôh_¨ôhmëic
<T,T,>(arg) {} \

423 
T
 
›î©‹
=–T 
rhs
 ) { 
	`°‹e_wôh_ªÀa£
(rhs);} \

424 
©omic
<
T
>& 
›î©‹
=–c⁄°átomic<T>& 
rhs
 ) {
	`°‹e_wôh_ªÀa£
‘hs);  *
this
;} \

425 };

	)

427 
	#__TBB_DECL_ATOMIC
(
T
) \

428 
ãm∂©e
<> 
©omic
<
T
>: 
öã∫Æ
::
©omic_im∂_wôh_¨ôhmëic
<T,T,> { \

429 
T
 
›î©‹
=–T 
rhs
 ) { 
	`°‹e_wôh_ªÀa£
(rhs);} \

430 
©omic
<
T
>& 
›î©‹
=–c⁄°átomic<T>& 
rhs
 ) {
	`°‹e_wôh_ªÀa£
‘hs);  *
this
;} \

431 };

	)

434 #i‡
__TBB_64BIT_ATOMICS


436 
__TBB_DECL_ATOMIC
(
__TBB_LONG_LONG
)

437 
__TBB_DECL_ATOMIC
(
__TBB_LONG_LONG
)

441 
__TBB_DECL_ATOMIC
()

442 
__TBB_DECL_ATOMIC
()

444 #i‡
_MSC_VER
 && !
_WIN64


445 #i‡
__TBB_ATOMIC_CTORS


451 
	#__TBB_DECL_ATOMIC_ALT
(
T
,
U
) \

452 
ãm∂©e
<> 
©omic
<
T
>: 
öã∫Æ
::
©omic_im∂_wôh_¨ôhmëic
<T,T,> { \

453 
	`©omic
() =  ; \

454 
c⁄°ex¥
 
	`©omic
(
T
 
¨g
): 
öã∫Æ
::
©omic_im∂_wôh_¨ôhmëic
<T,T,>(arg) {} \

455 
T
 
›î©‹
=–
U
 
rhs
 ) { 
	`°‹e_wôh_ªÀa£
(
	`T
(rhs));} \

456 
©omic
<
T
>& 
›î©‹
=–c⁄°átomic<T>& 
rhs
 ) {
	`°‹e_wôh_ªÀa£
‘hs);  *
this
;} \

457 };

	)

459 
	#__TBB_DECL_ATOMIC_ALT
(
T
,
U
) \

460 
ãm∂©e
<> 
©omic
<
T
>: 
öã∫Æ
::
©omic_im∂_wôh_¨ôhmëic
<T,T,> { \

461 
T
 
›î©‹
=–
U
 
rhs
 ) { 
	`°‹e_wôh_ªÀa£
(
	`T
(rhs));} \

462 
©omic
<
T
>& 
›î©‹
=–c⁄°átomic<T>& 
rhs
 ) {
	`°‹e_wôh_ªÀa£
‘hs);  *
this
;} \

463 };

	)

465 
__TBB_DECL_ATOMIC_ALT
(,
size_t
)

466 
__TBB_DECL_ATOMIC_ALT
(,
±rdiff_t
)

468 
__TBB_DECL_ATOMIC
()

469 
__TBB_DECL_ATOMIC
()

472 
__TBB_DECL_ATOMIC
()

473 
__TBB_DECL_ATOMIC
()

474 
__TBB_DECL_ATOMIC
()

475 
__TBB_DECL_ATOMIC
(signed )

476 
__TBB_DECL_ATOMIC
()

478 #i‡!
_MSC_VER
 || 
deföed
(
_NATIVE_WCHAR_T_DEFINED
)

479 
__TBB_DECL_ATOMIC
(
wch¨_t
)

483 
	gãm∂©e
<
ty≥«me
 
	gT
> 
	g©omic
<T*>: 
öã∫Æ
::
©omic_im∂_wôh_¨ôhmëic
<
T
*,
	g±rdiff_t
,T> {

484 #i‡
__TBB_ATOMIC_CTORS


485 
©omic
() =  ;

486 
c⁄°ex¥
 
©omic
(
T
* 
¨g
): 
öã∫Æ
::
©omic_im∂_wôh_¨ôhmëic
<T*,
	g±rdiff_t
,
	gT
>(
	g¨g
) {}

488 
T
* 
	g›î©‹
=–T* 
rhs
 ) {

490  
this
->
°‹e_wôh_ªÀa£
(
rhs
);

492 
	g©omic
<
	gT
*>& 
	g›î©‹
=–c⁄° 
©omic
<
T
*>& 
rhs
 ) {

493 
this
->
°‹e_wôh_ªÀa£
(
rhs
);  *
	gthis
;

495 
T
* 
	g›î©‹
->() const {

496  (*
	gthis
);

501 
	gãm∂©e
<> 
	g©omic
<*>: 
öã∫Æ
::
©omic_im∂
<*> {

502 #i‡
__TBB_ATOMIC_CTORS


503 
©omic
() =  ;

504 
c⁄°ex¥
 
©omic
(* 
¨g
): 
öã∫Æ
::
©omic_im∂
<*>(arg) {}

506 * 
›î©‹
=–* 
rhs
 ) {

508  
this
->
°‹e_wôh_ªÀa£
(
rhs
);

510 
	g©omic
<*>& 
	g›î©‹
=–c⁄° 
©omic
<*>& 
rhs
 ) {

511 
this
->
°‹e_wôh_ªÀa£
(
rhs
);  *
	gthis
;

518 
	gãm∂©e
 <
mem‹y_£m™tics
 
	gM
, 
ty≥«me
 
	gT
>

519 
T
 
lﬂd
 ( c⁄° 
©omic
<T>& 
a
 ) {  
	ga
.
ãm∂©e
 
	glﬂd
<
	gM
>(); }

521 
	gãm∂©e
 <
mem‹y_£m™tics
 
	gM
, 
ty≥«me
 
	gT
>

522 
°‹e
 ( 
©omic
<
T
>& 
a
, T 
vÆue
 ) { 
	ga
.
ãm∂©e
 
	g°‹e
<
	gM
>(
	gvÆue
); }

524 
«me•a˚
 
	göãrÁ˚6
{

526 
	gãm∂©e
<
ty≥«me
 
	gT
>

527 
	g©omic
<
	gT
> 
make_©omic
(
T
 
t
) {

528 
	g©omic
<
	gT
> 
	ga
;

529 
	g°‹e
<
	gªœxed
>(
	ga
,
	gt
);

530  
	ga
;

533 
usög
 
	göãrÁ˚6
::
make_©omic
;

535 
«me•a˚
 
	göã∫Æ
 {

536 
	gãm∂©e
<
mem‹y_£m™tics
 
	gM
, 
ty≥«me
 
	gT
 >

537 
sw≠
(
©omic
<
T
> & 
lhs
,átomic<T> & 
rhs
){

538 
T
 
	gtmp
 = 
lﬂd
<
M
>(
lhs
);

539 
	g°‹e
<
	gM
>(
	glhs
,
	glﬂd
<M>(
	grhs
));

540 
	g°‹e
<
	gM
>(
	grhs
,
	gtmp
);

544 
	gãm∂©e
<
ty≥«me
 
	gT
>

545 
ölöe
 
	g©omic
<
	gT
>& 
as_©omic
–
T
& 
t
 ) {

546  (
	g©omic
<
	gT
>&)
	gt
;

552 #i‡
_MSC_VER
 && !
__INTEL_COMPILER


553 #¥agm®
w¨nög
 (
p›
)

	@viper/concurrentqueue-src/benchmarks/tbb/blocked_range.h

21 #i‚de‡
__TBB_blocked_ønge_H


22 
	#__TBB_blocked_ønge_H


	)

24 
	~"tbb_°ddef.h
"

26 
«me•a˚
 
	gtbb
 {

39 
	gãm∂©e
<
ty≥«me
 
	gVÆue
>

40 ˛as†
	cblocked_ønge
 {

41 
	gpublic
:

45 
VÆue
 
	tc⁄°_ôî©‹
;

48 
	g°d
::
	tsize_t
 
	tsize_ty≥
;

52 
blocked_ønge
(Ë: 
my_íd
(), 
my_begö
() {}

55 
blocked_ønge
–
VÆue
 
begö_
, VÆuê
íd_
, 
size_ty≥
 
gøösize_
=1 ) :

56 
my_íd
(
íd_
), 
my_begö
(
begö_
), 
my_gøösize
(
gøösize_
)

58 
__TBB_ASSERT
–
my_gøösize
>0, "grainsize must beÖositive" );

62 
c⁄°_ôî©‹
 
begö
(Ëc⁄° { 
	gmy_begö
;}

65 
c⁄°_ôî©‹
 
íd
(Ëc⁄° { 
	gmy_íd
;}

69 
size_ty≥
 
size
() const {

70 
__TBB_ASSERT
–!(
íd
()<
begö
()), "size() unspecified ifÉnd()<begin()" );

71  
size_ty≥
(
my_íd
-
my_begö
);

75 
size_ty≥
 
gøösize
(Ëc⁄° { 
	gmy_gøösize
;}

82 
boﬁ
 
em±y
(Ëc⁄° { !(
	gmy_begö
<
	gmy_íd
);}

86 
boﬁ
 
is_divisibÀ
(Ëc⁄° { 
	gmy_gøösize
<
size
();}

91 
blocked_ønge
–blocked_ønge& 
r
, 
•lô
 ) :

92 
my_íd
(
r
.my_end),

93 
my_begö
(
do_•lô
(
r
, 
•lô
())),

94 
my_gøösize
(
r
.my_grainsize)

97 
__TBB_ASSERT
–!(
my_begö
 < 
r
.
my_íd
) && !(r.my_end < my_begin), "blocked_range has been split incorrectly" );

100 #i‡
__TBB_USE_PROPORTIONAL_SPLIT_IN_BLOCKED_RANGES


102 c⁄° 
boﬁ
 
	gis_divisibÀ_ö_¥›‹ti⁄
 = 
åue
;

107 
blocked_ønge
–blocked_ønge& 
r
, 
¥›‹ti⁄Æ_•lô
& 
¥›‹ti⁄
 ) :

108 
my_íd
(
r
.my_end),

109 
my_begö
(
do_•lô
(
r
, 
¥›‹ti⁄
)),

110 
my_gøösize
(
r
.my_grainsize)

113 
__TBB_ASSERT
–!(
my_begö
 < 
r
.
my_íd
) && !(r.my_end < my_begin), "blocked_range has been split incorrectly" );

117 
	g¥iv©e
:

119 
VÆue
 
my_íd
;

120 
VÆue
 
	gmy_begö
;

121 
size_ty≥
 
	gmy_gøösize
;

125 
VÆue
 
do_•lô
–
blocked_ønge
& 
r
, 
•lô
 )

127 
__TBB_ASSERT
–
r
.
is_divisibÀ
(), "cannot split blocked_rangeÅhat isÇot divisible" );

128 
VÆue
 
	gmiddÀ
 = 
r
.
my_begö
 + (r.
my_íd
 -Ñ.my_begin) / 2u;

129 
	gr
.
	gmy_íd
 = 
middÀ
;

130  
	gmiddÀ
;

133 #i‡
__TBB_USE_PROPORTIONAL_SPLIT_IN_BLOCKED_RANGES


134 
VÆue
 
do_•lô
–
blocked_ønge
& 
r
, 
¥›‹ti⁄Æ_•lô
& 
¥›‹ti⁄
 )

136 
__TBB_ASSERT
–
r
.
is_divisibÀ
(), "cannot split blocked_rangeÅhat isÇot divisible" );

144 
size_ty≥
 
	gright_∑π
 = size_ty≥((
r
.
size
()Ë* (
¥›‹ti⁄
.
right
())

145 / (
¥›‹ti⁄
.
À·
(Ë+Ör›‹ti⁄.
right
()) + 0.5f);

146  
	gr
.
	gmy_íd
 = 
VÆue
(
r
.
my_íd
 - 
right_∑π
);

150 
	gãm∂©e
<
ty≥«me
 
	gRowVÆue
,Åy≥«mê
	gCﬁVÆue
>

151 
‰õnd
 
˛ass
 
	gblocked_ønge2d
;

153 
	gãm∂©e
<
ty≥«me
 
	gRowVÆue
,Åy≥«mê
	gCﬁVÆue
,Åy≥«mê
	gPageVÆue
>

154 
‰õnd
 
˛ass
 
	gblocked_ønge3d
;

	@viper/concurrentqueue-src/benchmarks/tbb/blocked_range2d.h

21 #i‚de‡
__TBB_blocked_ønge2d_H


22 
	#__TBB_blocked_ønge2d_H


	)

24 
	~"tbb_°ddef.h
"

25 
	~"blocked_ønge.h
"

27 
«me•a˚
 
	gtbb
 {

31 
	gãm∂©e
<
ty≥«me
 
	gRowVÆue
,Åy≥«mê
	gCﬁVÆue
=
RowVÆue
>

32 ˛as†
	cblocked_ønge2d
 {

33 
public
:

35 
blocked_ønge
<
	tRowVÆue
> 
	trow_ønge_ty≥
;

36 
	gblocked_ønge
<
	tCﬁVÆue
> 
	tcﬁ_ønge_ty≥
;

38 
	g¥iv©e
:

39 
row_ønge_ty≥
 
my_rows
;

40 
cﬁ_ønge_ty≥
 
	gmy_cﬁs
;

42 
	gpublic
:

44 
blocked_ønge2d
–
RowVÆue
 
row_begö
, RowVÆuê
row_íd
, 
ty≥«me
 
row_ønge_ty≥
::
size_ty≥
 
row_gøösize
,

45 
CﬁVÆue
 
cﬁ_begö
, CﬁVÆuê
cﬁ_íd
, 
ty≥«me
 
cﬁ_ønge_ty≥
::
size_ty≥
 
cﬁ_gøösize
 ) :

46 
my_rows
(
row_begö
,
row_íd
,
row_gøösize
),

47 
my_cﬁs
(
cﬁ_begö
,
cﬁ_íd
,
cﬁ_gøösize
)

51 
blocked_ønge2d
–
RowVÆue
 
row_begö
, RowVÆuê
row_íd
,

52 
CﬁVÆue
 
cﬁ_begö
, CﬁVÆuê
cﬁ_íd
 ) :

53 
my_rows
(
row_begö
,
row_íd
),

54 
my_cﬁs
(
cﬁ_begö
,
cﬁ_íd
)

59 
boﬁ
 
em±y
() const {

61  
	gmy_rows
.
em±y
(Ë|| 
	gmy_cﬁs
.empty();

65 
boﬁ
 
is_divisibÀ
() const {

66  
	gmy_rows
.
is_divisibÀ
(Ë|| 
	gmy_cﬁs
.is_divisible();

69 
blocked_ønge2d
–blocked_ønge2d& 
r
, 
•lô
 ) :

70 
my_rows
(
r
.my_rows),

71 
my_cﬁs
(
r
.my_cols)

73 
•lô
 
	g•lô_obj
;

74 
do_•lô
(
r
, 
•lô_obj
);

77 #i‡
__TBB_USE_PROPORTIONAL_SPLIT_IN_BLOCKED_RANGES


79 c⁄° 
boﬁ
 
	gis_divisibÀ_ö_¥›‹ti⁄
 = 
åue
;

81 
blocked_ønge2d
–blocked_ønge2d& 
r
, 
¥›‹ti⁄Æ_•lô
& 
¥›‹ti⁄
 ) :

82 
my_rows
(
r
.my_rows),

83 
my_cﬁs
(
r
.my_cols)

85 
do_•lô
(
r
, 
¥›‹ti⁄
);

89 
	gãm∂©e
 <
ty≥«me
 
	gS∂ô
>

90 
do_•lô
–
blocked_ønge2d
& 
r
, 
S∂ô
& 
•lô_obj
 )

92 if–
	gmy_rows
.
size
()*(
	gmy_cﬁs
.
gøösize
()) < my_cols.size()*(my_rows.grainsize()) ) {

93 
	gmy_cﬁs
.
	gmy_begö
 = 
cﬁ_ønge_ty≥
::
do_•lô
(
r
.
my_cﬁs
, 
•lô_obj
);

95 
	gmy_rows
.
	gmy_begö
 = 
row_ønge_ty≥
::
do_•lô
(
r
.
my_rows
, 
•lô_obj
);

100 c⁄° 
	grow_ønge_ty≥
& 
rows
(Ëc⁄° { 
	gmy_rows
;}

103 c⁄° 
	gcﬁ_ønge_ty≥
& 
cﬁs
(Ëc⁄° { 
	gmy_cﬁs
;}

	@viper/concurrentqueue-src/benchmarks/tbb/blocked_range3d.h

21 #i‚de‡
__TBB_blocked_ønge3d_H


22 
	#__TBB_blocked_ønge3d_H


	)

24 
	~"tbb_°ddef.h
"

25 
	~"blocked_ønge.h
"

27 
«me•a˚
 
	gtbb
 {

31 
	gãm∂©e
<
ty≥«me
 
	gPageVÆue
,Åy≥«mê
	gRowVÆue
=
PageVÆue
,Åy≥«mê
	gCﬁVÆue
=
RowVÆue
>

32 ˛as†
	cblocked_ønge3d
 {

33 
public
:

35 
blocked_ønge
<
	tPageVÆue
> 
	t∑ge_ønge_ty≥
;

36 
	gblocked_ønge
<
	tRowVÆue
> 
	trow_ønge_ty≥
;

37 
	gblocked_ønge
<
	tCﬁVÆue
> 
	tcﬁ_ønge_ty≥
;

39 
	g¥iv©e
:

40 
∑ge_ønge_ty≥
 
my_∑ges
;

41 
row_ønge_ty≥
 
	gmy_rows
;

42 
cﬁ_ønge_ty≥
 
	gmy_cﬁs
;

44 
	gpublic
:

46 
blocked_ønge3d
–
PageVÆue
 
∑ge_begö
, PageVÆuê
∑ge_íd
,

47 
RowVÆue
 
row_begö
, RowVÆuê
row_íd
,

48 
CﬁVÆue
 
cﬁ_begö
, CﬁVÆuê
cﬁ_íd
 ) :

49 
my_∑ges
(
∑ge_begö
,
∑ge_íd
),

50 
my_rows
(
row_begö
,
row_íd
),

51 
my_cﬁs
(
cﬁ_begö
,
cﬁ_íd
)

55 
blocked_ønge3d
–
PageVÆue
 
∑ge_begö
, PageVÆuê
∑ge_íd
, 
ty≥«me
 
∑ge_ønge_ty≥
::
size_ty≥
 
∑ge_gøösize
,

56 
RowVÆue
 
row_begö
, RowVÆuê
row_íd
, 
ty≥«me
 
row_ønge_ty≥
::
size_ty≥
 
row_gøösize
,

57 
CﬁVÆue
 
cﬁ_begö
, CﬁVÆuê
cﬁ_íd
, 
ty≥«me
 
cﬁ_ønge_ty≥
::
size_ty≥
 
cﬁ_gøösize
 ) :

58 
my_∑ges
(
∑ge_begö
,
∑ge_íd
,
∑ge_gøösize
),

59 
my_rows
(
row_begö
,
row_íd
,
row_gøösize
),

60 
my_cﬁs
(
cﬁ_begö
,
cﬁ_íd
,
cﬁ_gøösize
)

65 
boﬁ
 
em±y
() const {

67  
	gmy_∑ges
.
em±y
(Ë|| 
	gmy_rows
.em±y(Ë|| 
	gmy_cﬁs
.empty();

71 
boﬁ
 
is_divisibÀ
() const {

72  
	gmy_∑ges
.
is_divisibÀ
(Ë|| 
	gmy_rows
.is_divisibÀ(Ë|| 
	gmy_cﬁs
.is_divisible();

75 
blocked_ønge3d
–blocked_ønge3d& 
r
, 
•lô
 ) :

76 
my_∑ges
(
r
.my_pages),

77 
my_rows
(
r
.my_rows),

78 
my_cﬁs
(
r
.my_cols)

80 
•lô
 
	g•lô_obj
;

81 
do_•lô
(
r
, 
•lô_obj
);

84 #i‡
__TBB_USE_PROPORTIONAL_SPLIT_IN_BLOCKED_RANGES


86 c⁄° 
boﬁ
 
	gis_divisibÀ_ö_¥›‹ti⁄
 = 
åue
;

88 
blocked_ønge3d
–blocked_ønge3d& 
r
, 
¥›‹ti⁄Æ_•lô
& 
¥›‹ti⁄
 ) :

89 
my_∑ges
(
r
.my_pages),

90 
my_rows
(
r
.my_rows),

91 
my_cﬁs
(
r
.my_cols)

93 
do_•lô
(
r
, 
¥›‹ti⁄
);

97 
	gãm∂©e
 <
ty≥«me
 
	gS∂ô
>

98 
do_•lô
–
blocked_ønge3d
& 
r
, 
S∂ô
& 
•lô_obj
)

100 i‡–
	gmy_∑ges
.
size
()*(
	gmy_rows
.
gøösize
()) < my_rows.size()*(my_pages.grainsize()) ) {

101 i‡–
	gmy_rows
.
size
()*(
	gmy_cﬁs
.
gøösize
()) < my_cols.size()*(my_rows.grainsize()) ) {

102 
	gmy_cﬁs
.
	gmy_begö
 = 
cﬁ_ønge_ty≥
::
do_•lô
(
r
.
my_cﬁs
, 
•lô_obj
);

104 
	gmy_rows
.
	gmy_begö
 = 
row_ønge_ty≥
::
do_•lô
(
r
.
my_rows
, 
•lô_obj
);

107 i‡–
	gmy_∑ges
.
size
()*(
	gmy_cﬁs
.
gøösize
()) < my_cols.size()*(my_pages.grainsize()) ) {

108 
	gmy_cﬁs
.
	gmy_begö
 = 
cﬁ_ønge_ty≥
::
do_•lô
(
r
.
my_cﬁs
, 
•lô_obj
);

110 
	gmy_∑ges
.
	gmy_begö
 = 
∑ge_ønge_ty≥
::
do_•lô
(
r
.
my_∑ges
, 
•lô_obj
);

116 c⁄° 
	g∑ge_ønge_ty≥
& 
∑ges
(Ëc⁄° { 
	gmy_∑ges
;}

119 c⁄° 
	grow_ønge_ty≥
& 
rows
(Ëc⁄° { 
	gmy_rows
;}

122 c⁄° 
	gcﬁ_ønge_ty≥
& 
cﬁs
(Ëc⁄° { 
	gmy_cﬁs
;}

	@viper/concurrentqueue-src/benchmarks/tbb/cache_aligned_allocator.cpp

21 
	~"tbb/tbb_c⁄fig.h
"

22 
	~"tbb/ˇche_Æig√d_Æloˇt‹.h
"

23 
	~"tbb/tbb_Æloˇt‹.h
"

24 
	~"tbb/tbb_ex˚±i⁄.h
"

25 
	~"tbb_misc.h
"

26 
	~"dy«mic_lök.h
"

27 
	~<c°dlib
>

29 #i‡
_WIN32
||
_WIN64


30 
	~"tbb/machöe/wödows_≠i.h
"

32 
	~<dlf˙.h
>

35 
usög
 
«me•a˚
 
	g°d
;

37 #i‡
__TBB_WEAK_SYMBOLS_PRESENT


39 #¥agm®
wók
 
sˇœbÀ_mÆloc


40 #¥agm®
wók
 
sˇœbÀ_‰ì


41 #¥agm®
wók
 
sˇœbÀ_Æig√d_mÆloc


42 #¥agm®
wók
 
sˇœbÀ_Æig√d_‰ì


45 * 
sˇœbÀ_mÆloc
–
size_t
 );

46 
sˇœbÀ_‰ì
( * );

47 * 
sˇœbÀ_Æig√d_mÆloc
–
size_t
, size_t );

48 
sˇœbÀ_Æig√d_‰ì
( * );

53 
«me•a˚
 
tbb
 {

55 
«me•a˚
 
öã∫Æ
 {

58 * 
DummyMÆloc
–
size_t
 
size
 );

61 
DummyFªe
–* 
±r
 );

64 * (*
MÆlocH™dÀr
)–
size_t
 
size
 ) = &
DummyMÆloc
;

67 (*
FªeH™dÀr
)–* 
poöãr
 ) = &
DummyFªe
;

70 * 
dummy_∑dded_Æloˇã
–
size_t
 
byãs
, size_à
Æignmít
 );

73 
dummy_∑dded_‰ì
–* 
±r
 );

76 * 
∑dded_Æloˇã
–
size_t
 
byãs
, size_à
Æignmít
 );

79 
∑dded_‰ì
–* 
p
 );

82 * (*
∑dded_Æloˇã_h™dÀr
)–
size_t
 
byãs
, size_à
Æignmít
 ) = &
dummy_∑dded_Æloˇã
;

85 (*
∑dded_‰ì_h™dÀr
)–* 
p
 ) = &
dummy_∑dded_‰ì
;

88 c⁄° 
dy«mic_lök_des¸ùt‹
 
MÆlocLökTabÀ
[] = {

89 
DLD
(
sˇœbÀ_mÆloc
, 
MÆlocH™dÀr
),

90 
DLD
(
sˇœbÀ_‰ì
, 
FªeH™dÀr
),

91 
DLD
(
sˇœbÀ_Æig√d_mÆloc
, 
∑dded_Æloˇã_h™dÀr
),

92 
DLD
(
sˇœbÀ_Æig√d_‰ì
, 
∑dded_‰ì_h™dÀr
),

96 #i‡
TBB_USE_DEBUG


97 
	#DEBUG_SUFFIX
 "_debug"

	)

99 
	#DEBUG_SUFFIX


	)

103 #i‡
_WIN32
||
_WIN64


104 
	#MALLOCLIB_NAME
 "tbbmÆloc" 
DEBUG_SUFFIX
 ".dŒ"

	)

105 #ñi‡
__APPLE__


106 
	#MALLOCLIB_NAME
 "libtbbmÆloc" 
DEBUG_SUFFIX
 ".dylib"

	)

107 #ñi‡
__FªeBSD__
 || 
__NëBSD__
 || 
__sun
 || 
_AIX
 || 
__ANDROID__


108 
	#MALLOCLIB_NAME
 "libtbbmÆloc" 
DEBUG_SUFFIX
 ".so"

	)

109 #ñi‡
__löux__


110 
	#MALLOCLIB_NAME
 "libtbbmÆloc" 
DEBUG_SUFFIX
 
	`__TBB_STRING
(.
so
.
TBB_COMPATIBLE_INTERFACE_VERSION
)

	)

112 #îr‹ 
Unknown
 
OS


119 
öôülize_h™dÀr_poöãrs
() {

120 
__TBB_ASSERT
–
MÆlocH™dÀr
==&
DummyMÆloc
, 
NULL
 );

121 
boﬁ
 
suc˚ss
 = 
dy«mic_lök
–
MALLOCLIB_NAME
, 
MÆlocLökTabÀ
, 4 );

122 if–!
suc˚ss
 ) {

127 
FªeH™dÀr
 = &
‰ì
;

128 
MÆlocH™dÀr
 = &
mÆloc
;

129 
∑dded_Æloˇã_h™dÀr
 = &
∑dded_Æloˇã
;

130 
∑dded_‰ì_h™dÀr
 = &
∑dded_‰ì
;

132 #i‡!
__TBB_RML_STATIC


133 
PrötExåaVîsi⁄Info
–"ALLOCATOR", 
suc˚ss
?"scalable_malloc":"malloc" );

137 
tbb
::
©omic
<
do_⁄˚_°©e
> 
öôüliz©i⁄_°©e
;

138 
öôülize_ˇche_Æig√d_Æloˇt‹
() {

139 
©omic_do_⁄˚
–&
öôülize_h™dÀr_poöãrs
, 
öôüliz©i⁄_°©e
 );

143 * 
DummyMÆloc
–
size_t
 
size
 ) {

144 
öôülize_ˇche_Æig√d_Æloˇt‹
();

145 
__TBB_ASSERT
–
MÆlocH™dÀr
!=&
DummyMÆloc
, 
NULL
 );

146  (*
MÆlocH™dÀr
)–
size
 );

150 
DummyFªe
–* 
±r
 ) {

151 
öôülize_ˇche_Æig√d_Æloˇt‹
();

152 
__TBB_ASSERT
–
FªeH™dÀr
!=&
DummyFªe
, 
NULL
 );

153 (*
FªeH™dÀr
)–
±r
 );

157 * 
dummy_∑dded_Æloˇã
–
size_t
 
byãs
, size_à
Æignmít
 ) {

158 
öôülize_ˇche_Æig√d_Æloˇt‹
();

159 
__TBB_ASSERT
–
∑dded_Æloˇã_h™dÀr
!=&
dummy_∑dded_Æloˇã
, 
NULL
 );

160  (*
∑dded_Æloˇã_h™dÀr
)(
byãs
, 
Æignmít
);

164 
dummy_∑dded_‰ì
–* 
±r
 ) {

165 
öôülize_ˇche_Æig√d_Æloˇt‹
();

166 
__TBB_ASSERT
–
∑dded_‰ì_h™dÀr
!=&
dummy_∑dded_‰ì
, 
NULL
 );

167 (*
∑dded_‰ì_h™dÀr
)–
±r
 );

170 
size_t
 
NFS_LöeSize
 = 128;

172 
size_t
 
NFS_GëLöeSize
() {

173  
NFS_LöeSize
;

176 #i‡
_MSC_VER
 && !
deföed
(
__INTEL_COMPILER
)

178 #¥agm®
w¨nög
–
dißbÀ
: 4146 4706 )

181 * 
NFS_AŒoˇã
–
size_t
 
n
, size_à
ñemít_size
, * ) {

182 
size_t
 
m
 = 
NFS_LöeSize
;

183 
__TBB_ASSERT
–
m
<=
NFS_MaxLöeSize
, "illegal value for NFS_LineSize" );

184 
__TBB_ASSERT
–(
m
 & (m-1))==0, "must beÖower ofÅwo" );

185 
size_t
 
byãs
 = 
n
*
ñemít_size
;

187 i‡(
byãs
<
n
 || byãs+
m
<bytes) {

189 
throw_ex˚±i⁄
(
eid_bad_Æloc
);

192 i‡(
byãs
==0) bytes = 1;

194 * 
ªsu…
 = (*
∑dded_Æloˇã_h™dÀr
)–
byãs
, 
m
 );

195 i‡(!
ªsu…
)

196 
throw_ex˚±i⁄
(
eid_bad_Æloc
);

198 
__TBB_ASSERT
–((
size_t
)
ªsu…
&(
m
-1)) == 0, "TheáddressÑeturned isn'tálignedÅo cacheÜine size" );

199  
ªsu…
;

202 
NFS_Fªe
–* 
p
 ) {

203 (*
∑dded_‰ì_h™dÀr
)–
p
 );

206 * 
∑dded_Æloˇã
–
size_t
 
byãs
, size_à
Æignmít
 ) {

207 * 
ªsu…
 = 
NULL
;

208 * 
ba£
 = (*)
mÆloc
(
Æignmít
+
byãs
);

209 if–
ba£
 ) {

211 
ªsu…
 = (*)((
uöçå_t
)(
ba£
+
Æignmít
)&-alignment);

213 ((
uöçå_t
*)
ªsu…
)[-1] = uöçå_t(
ba£
);

215  
ªsu…
;

218 
∑dded_‰ì
–* 
p
 ) {

219 if–
p
 ) {

220 
__TBB_ASSERT
–(
uöçå_t
)
p
>=0x4096, "attemptÅo free blockÇot obtained from cache_aligned_allocator" );

222 * 
ba£
 = ((**)
p
)[-1];

223 
__TBB_ASSERT
–(*)((
uöçå_t
)(
ba£
+
NFS_LöeSize
)&-NFS_LöeSize)==
p
, "notállocated by NFS_Allocate?" );

224 
‰ì
(
ba£
);

228 * 
__TBB_EXPORTED_FUNC
 
Æloˇã_vü_h™dÀr_v3
–
size_t
 
n
 ) {

229 * 
ªsu…
 = (*
MÆlocH™dÀr
Ë(
n
);

230 i‡(!
ªsu…
) {

231 
throw_ex˚±i⁄
(
eid_bad_Æloc
);

233  
ªsu…
;

236 
__TBB_EXPORTED_FUNC
 
dóŒoˇã_vü_h™dÀr_v3
–*
p
 ) {

237 if–
p
 ) {

238 (*
FªeH™dÀr
)–
p
 );

242 
boﬁ
 
__TBB_EXPORTED_FUNC
 
is_mÆloc_u£d_v3
() {

243 i‡(
MÆlocH™dÀr
 =&
DummyMÆloc
) {

244 * 
void_±r
 = (*
MÆlocH™dÀr
)(1);

245 (*
FªeH™dÀr
)(
void_±r
);

247 
__TBB_ASSERT
–
MÆlocH™dÀr
!=&
DummyMÆloc
 && 
FªeH™dÀr
!=&
DummyFªe
, 
NULL
 );

249 
__TBB_ASSERT
–!(((*)
MÆlocH™dÀr
==(*)&
mÆloc
Ë^ ((*)
FªeH™dÀr
==(*)&
‰ì
)),

251  (*)
MÆlocH™dÀr
 =(*)&
mÆloc
;

	@viper/concurrentqueue-src/benchmarks/tbb/cache_aligned_allocator.h

21 #i‚de‡
__TBB_ˇche_Æig√d_Æloˇt‹_H


22 
	#__TBB_ˇche_Æig√d_Æloˇt‹_H


	)

24 
	~<√w
>

25 
	~"tbb_°ddef.h
"

26 #i‡
__TBB_ALLOCATOR_CONSTRUCT_VARIADIC


27 
	~<utûôy
>

30 
«me•a˚
 
	gtbb
 {

33 
«me•a˚
 
	göã∫Æ
 {

36 
size_t
 
__TBB_EXPORTED_FUNC
 
NFS_GëLöeSize
();

40 * 
__TBB_EXPORTED_FUNC
 
NFS_AŒoˇã
–
size_t
 
n_ñemít
, size_à
ñemít_size
, * 
höt
 );

45 
__TBB_EXPORTED_FUNC
 
NFS_Fªe
( * );

49 #i‡
_MSC_VER
 && !
deföed
(
__INTEL_COMPILER
)

51 #¥agm®
w¨nög
 (
push
)

52 #¥agm®
w¨nög
 (
dißbÀ
: 4100)

59 
	gãm∂©e
<
ty≥«me
 
	gT
>

60 ˛as†
	cˇche_Æig√d_Æloˇt‹
 {

61 
	gpublic
:

62 
ty≥«me
 
	töã∫Æ
::
	tÆloˇt‹_ty≥
<
	tT
>::
	tvÆue_ty≥
 value_type;

63 
vÆue_ty≥
* 
	tpoöãr
;

64 c⁄° 
	tvÆue_ty≥
* 
	tc⁄°_poöãr
;

65 
	gvÆue_ty≥
& 
	tª„ªn˚
;

66 c⁄° 
	tvÆue_ty≥
& 
	tc⁄°_ª„ªn˚
;

67 
size_t
 
	tsize_ty≥
;

68 
±rdiff_t
 
	tdif„ªn˚_ty≥
;

69 
	gãm∂©e
<
ty≥«me
 
	gU
> 
	sªböd
 {

70 
	gˇche_Æig√d_Æloˇt‹
<
	tU
> 
	tŸhî
;

73 
ˇche_Æig√d_Æloˇt‹
(Ë
throw
() {}

74 
ˇche_Æig√d_Æloˇt‹
–c⁄° cache_Æig√d_Æloˇt‹& ) 
throw
() {}

75 
	gãm∂©e
<
ty≥«me
 
	gU
> 
ˇche_Æig√d_Æloˇt‹
(c⁄° cache_Æig√d_Æloˇt‹<
U
>&Ë
throw
() {}

77 
poöãr
 
addªss
(
ª„ªn˚
 
x
Ëc⁄° { &
	gx
;}

78 
c⁄°_poöãr
 
addªss
(
c⁄°_ª„ªn˚
 
x
Ëc⁄° { &
	gx
;}

81 
poöãr
 
Æloˇã
–
size_ty≥
 
n
, c⁄° * 
höt
=0 ) {

83  
poöãr
(
öã∫Æ
::
NFS_AŒoˇã
–
n
, (
vÆue_ty≥
), 
c⁄°_ˇ°
<*>(
höt
) ));

87 
dóŒoˇã
–
poöãr
 
p
, 
size_ty≥
 ) {

88 
	göã∫Æ
::
NFS_Fªe
(
p
);

92 
size_ty≥
 
max_size
(Ëc⁄° 
throw
() {

93  (~
size_t
(0)-
	göã∫Æ
::
NFS_MaxLöeSize
)/(
vÆue_ty≥
);

97 #i‡
__TBB_ALLOCATOR_CONSTRUCT_VARIADIC


98 
	gãm∂©e
<
ty≥«me
 
	gU
, 
	gty≥«me
... 
	gArgs
>

99 
c⁄°ru˘
(
U
 *
p
, 
Args
&&... 
¨gs
)

100 { ::
√w
((*)
p
Ë
U
(
°d
::
f‹w¨d
<
Args
>(
¨gs
)...); }

102 #i‡
__TBB_CPP11_RVALUE_REF_PRESENT


103 
c⁄°ru˘
–
poöãr
 
p
, 
vÆue_ty≥
&& 
vÆue
 ) {::
√w
((*)’)ËvÆue_ty≥(
°d
::
move
(value));}

105 
c⁄°ru˘
–
poöãr
 
p
, c⁄° 
vÆue_ty≥
& 
vÆue
 ) {::
√w
((*)(p)) value_type(value);}

109 
de°roy
–
poöãr
 
p
 ) {
	gp
->~
vÆue_ty≥
();}

112 #i‡
_MSC_VER
 && !
	$deföed
(
__INTEL_COMPILER
)

113 #¥agm®
	$w¨nög
 (
p›
)

118 
ãm∂©e
<>

119 
˛ass
 
ˇche_Æig√d_Æloˇt‹
<> {

120 
public
:

121 * 
	tpoöãr
;

122 c⁄° * 
	tc⁄°_poöãr
;

123 
	tvÆue_ty≥
;

124 
ãm∂©e
<
ty≥«me
 
U
> 
	sªböd
 {

125 
ˇche_Æig√d_Æloˇt‹
<
	tU
> 
	tŸhî
;

127 
	}
};

129 
	gãm∂©e
<
ty≥«me
 
	gT
,Åy≥«mê
	gU
>

130 
ölöe
 
boﬁ
 
	g›î©‹
==–c⁄° 
ˇche_Æig√d_Æloˇt‹
<
T
>&, c⁄° 
	gˇche_Æig√d_Æloˇt‹
<
	gU
>& ) { 
	gåue
;}

132 
	gãm∂©e
<
ty≥«me
 
	gT
,Åy≥«mê
	gU
>

133 
ölöe
 
boﬁ
 
	g›î©‹
!=–c⁄° 
ˇche_Æig√d_Æloˇt‹
<
T
>&, c⁄° 
	gˇche_Æig√d_Æloˇt‹
<
	gU
>& ) { 
	gÁl£
;}

	@viper/concurrentqueue-src/benchmarks/tbb/cilk-tbb-interop.h

24 #i‚de‡
CILK_TBB_INTEROP_H


25 
	#CILK_TBB_INTEROP_H


	)

27 #i‚de‡
_WIN32


28 #ifde‡
IN_CILK_RUNTIME


29 
	#CILK_EXPORT
 
	`__©åibuã__
((
	`visibûôy
("¥Ÿe˘ed")))

	)

31 
	#CILK_EXPORT


	)

34 #ifde‡
IN_CILK_RUNTIME


35 
	#CILK_EXPORT
 
	`__de˛•ec
(
dŒexp‹t
)

	)

37 
	#CILK_EXPORT
 
	`__de˛•ec
(
dŒimp‹t
)

	)

41 #ifde‡
__˝lu•lus


46 
	t__cûk_tbb_ªtcode
;

48 
	e__cûk_tbb_°ack_›
 {

49 
CILK_TBB_STACK_ORPHAN
,

50 
CILK_TBB_STACK_ADOPT
,

51 
CILK_TBB_STACK_RELEASE


54 
__cûk_tbb_ªtcode
 (*
	t__cûk_tbb_p‚_°ack_›
)(
	t__cûk_tbb_°ack_›
, * 
	td©a
);

56 
__cûk_tbb_ªtcode
 (*
	t__cûk_tbb_p‚_unw©ch_°acks
)(*
	td©a
);

93 
	s__cûk_tbb_°ack_›_thunk
 {

94 
__cûk_tbb_p‚_°ack_›
 
routöe
;

95 * 
d©a
;

99 
	s__cûk_tbb_unw©ch_thunk
 {

100 
__cûk_tbb_p‚_unw©ch_°acks
 
routöe
;

101 * 
d©a
;

107 
CILK_EXPORT


108 
__cûk_tbb_ªtcode
 
__cûkπs_w©ch_°ack
(
__cûk_tbb_unw©ch_thunk
* 
u
,

109 
__cûk_tbb_°ack_›_thunk
 
o
);

111 #ifde‡
__˝lu•lus


	@viper/concurrentqueue-src/benchmarks/tbb/combinable.h

21 #i‚de‡
__TBB_comböabÀ_H


22 
	#__TBB_comböabÀ_H


	)

24 
	~"íumîabÀ_thªad_•ecific.h
"

25 
	~"ˇche_Æig√d_Æloˇt‹.h
"

27 
«me•a˚
 
	gtbb
 {

33 
	gãm∂©e
 <
ty≥«me
 
	gT
>

34 ˛as†
	ccomböabÀ
 {

35 
	g¥iv©e
:

36 
ty≥«me
 
	ttbb
::
	tˇche_Æig√d_Æloˇt‹
<
	tT
> 
	tmy_Æloc
;

38 
ty≥«me
 
	ttbb
::
	tíumîabÀ_thªad_•ecific
<
	tT
, 
	tmy_Æloc
, 
	tës_no_key
> 
	tmy_ës_ty≥
;

39 
my_ës_ty≥
 
	gmy_ës
;

41 
	gpublic
:

43 
comböabÀ
() { }

45 
ãm∂©e
 <
ty≥«me
 
föô
>

46 
comböabÀ
–
föô
 
_föô
Ë: 
my_ës
(_finit) { }

49 ~
comböabÀ
() {

52 
comböabÀ
(c⁄° comböabÀ& 
Ÿhî
Ë: 
my_ës
(other.my_ets) { }

54 
comböabÀ
 & 
›î©‹
=–c⁄° comböabÀ & 
Ÿhî
Ë{ 
my_ës
 = othî.my_ës;  *
	gthis
; }

56 
˛ór
(Ë{ 
	gmy_ës
.clear(); }

58 
	gT
& 
loˇl
(Ë{  
	gmy_ës
.local(); }

60 
	gT
& 
loˇl
(
boﬁ
 & 
exi°s
Ë{  
	gmy_ës
.local(exists); }

63 
	gãm∂©e
 <
ty≥«me
 
	gcomböe_func_t
>

64 
T
 
comböe
(
comböe_func_t
 
f_comböe
Ë{  
	gmy_ës
.combine(f_combine); }

67 
	gãm∂©e
 <
ty≥«me
 
	gcomböe_func_t
>

68 
comböe_óch
(
comböe_func_t
 
f_comböe
Ë{ 
	gmy_ës
.combine_each(f_combine); }

	@viper/concurrentqueue-src/benchmarks/tbb/compat/ppl.h

21 #i‚de‡
__TBB_com∑t_µl_H


22 
	#__TBB_com∑t_µl_H


	)

24 
	~"../èsk_group.h
"

25 
	~"../∑øŒñ_övoke.h
"

26 
	~"../∑øŒñ_f‹_óch.h
"

27 
	~"../∑øŒñ_f‹.h
"

28 
	~"../tbb_ex˚±i⁄.h
"

29 
	~"../¸ôiˇl_£˘i⁄.h
"

30 
	~"../ªadî_wrôî_lock.h
"

31 
	~"../comböabÀ.h
"

33 
«me•a˚
 
	gC⁄cuºícy
 {

35 #i‡
__TBB_TASK_GROUP_CONTEXT


36 
usög
 
	gtbb
::
èsk_h™dÀ
;

37 
usög
 
	gtbb
::
èsk_group_°©us
;

38 
usög
 
	gtbb
::
èsk_group
;

39 
usög
 
	gtbb
::
°ru˘uªd_èsk_group
;

40 
usög
 
	gtbb
::
övÆid_mu…ùÀ_schedulög
;

41 
usög
 
	gtbb
::
missög_waô
;

42 
usög
 
	gtbb
::
make_èsk
;

44 
usög
 
	gtbb
::
nŸ_com∂ëe
;

45 
usög
 
	gtbb
::
com∂ëe
;

46 
usög
 
	gtbb
::
ˇn˚Àd
;

48 
usög
 
	gtbb
::
is_cuºít_èsk_group_ˇn˚lög
;

51 
usög
 
	gtbb
::
∑øŒñ_övoke
;

52 
usög
 
	gtbb
::
°ri˘_µl
::
∑øŒñ_f‹
;

53 
usög
 
	gtbb
::
∑øŒñ_f‹_óch
;

54 
usög
 
	gtbb
::
¸ôiˇl_£˘i⁄
;

55 
usög
 
	gtbb
::
ªadî_wrôî_lock
;

56 
usög
 
	gtbb
::
comböabÀ
;

58 
usög
 
	gtbb
::
im¥›î_lock
;

	@viper/concurrentqueue-src/benchmarks/tbb/concurrent_hash_map.cpp

21 
	~"tbb/c⁄cuºít_hash_m≠.h
"

23 
«me•a˚
 
	gtbb
 {

25 
«me•a˚
 
	göã∫Æ
 {

26 #i‡!
TBB_NO_LEGACY


27 
	shash_m≠_£gmít_ba£
 {

28 
•ö_rw_muãx
 
	t£gmít_muãx_t
;

30 
size_t
 
	thashcode_t
;

32 c⁄° 
size_t
 
	gn_£gmít_bôs
 = 6;

34 c⁄° 
size_t
 
	gmax_physiˇl_size
 = size_t(1)<<(8*(
hashcode_t
)-
n_£gmít_bôs
);

36 
£gmít_muãx_t
 
	gmy_muãx
;

38 
	g©omic
<
	gsize_t
> 
	gmy_logiˇl_size
;

41 
size_t
 
	gmy_physiˇl_size
;

44 
boﬁ
 
__TBB_EXPORTED_METHOD
 
öã∫Æ_grow_¥ediˇã
() const;

47 
boﬁ
 
	ghash_m≠_£gmít_ba£
::
öã∫Æ_grow_¥ediˇã
() const {

51  
my_logiˇl_size
 >
my_physiˇl_size
 && my_physiˇl_sizê< 
max_physiˇl_size
;

	@viper/concurrentqueue-src/benchmarks/tbb/concurrent_hash_map.h

21 #i‚de‡
__TBB_c⁄cuºít_hash_m≠_H


22 
	#__TBB_c⁄cuºít_hash_m≠_H


	)

24 
	~"tbb_°ddef.h
"

26 #i‡!
TBB_USE_EXCEPTIONS
 && 
_MSC_VER


28 #¥agm®
w¨nög
 (
push
)

29 #¥agm®
w¨nög
 (
dißbÀ
: 4530)

32 
	~<ôî©‹
>

33 
	~<utûôy
>

34 
	~<c°rög
>

36 #i‡!
TBB_USE_EXCEPTIONS
 && 
_MSC_VER


37 #¥agm®
w¨nög
 (
p›
)

40 
	~"ˇche_Æig√d_Æloˇt‹.h
"

41 
	~"tbb_Æloˇt‹.h
"

42 
	~"•ö_rw_muãx.h
"

43 
	~"©omic.h
"

44 
	~"tbb_ex˚±i⁄.h
"

45 
	~"tbb_¥ofûög.h
"

46 
	~"öã∫Æ/_c⁄cuºít_un‹dîed_im∂.h
"

47 #i‡
__TBB_INITIALIZER_LISTS_PRESENT


48 
	~<öôülizî_li°
>

50 #i‡
TBB_USE_PERFORMANCE_WARNINGS
 || 
__TBB_STATISTICS


51 
	~<ty≥öfo
>

53 #i‡
__TBB_STATISTICS


54 
	~<°dio.h
>

57 
«me•a˚
 
	gtbb
 {

60 
	gãm∂©e
<
ty≥«me
 
	gKey
>

61 
	stbb_hash_com∑ª
 {

62 
size_t
 
hash
–c⁄° 
Key
& 
a
 ) {  
tbb_hashî
(a); }

63 
boﬁ
 
equÆ
–c⁄° 
Key
& 
a
, c⁄° Key& 
b
 ) {  
	ga
 == b; }

66 
«me•a˚
 
	göãrÁ˚5
 {

68 
	gãm∂©e
<
ty≥«me
 
	gKey
,Åy≥«mê
	gT
,Åy≥«mê
	gHashCom∑ª
 = 
tbb_hash_com∑ª
<
Key
>,Åy≥«mê
	gA
 = 
tbb_Æloˇt‹
<
°d
::
∑ú
<Key, T> > >

69 
˛ass
 
	gc⁄cuºít_hash_m≠
;

72 
«me•a˚
 
	göã∫Æ
 {

73 
usög
 
«me•a˚
 
	gtbb
::
öã∫Æ
;

77 
size_t
 
	thashcode_t
;

79 
	ghash_m≠_node_ba£
 : 
tbb
::
öã∫Æ
::
no_c›y
 {

81 
•ö_rw_muãx
 
	tmuãx_t
;

83 
	gmuãx_t
::
	tsc›ed_lock
 
	tsc›ed_t
;

85 
hash_m≠_node_ba£
 *
	g√xt
;

86 
muãx_t
 
	gmuãx
;

89 
hash_m≠_node_ba£
 *c⁄° 
	gªhash_ªq
 = 
ªöãΩªt_ˇ°
<hash_m≠_node_ba£*>(
size_t
(3));

91 
hash_m≠_node_ba£
 *c⁄° 
	gem±y_ªhashed
 = 
ªöãΩªt_ˇ°
<hash_m≠_node_ba£*>(
size_t
(0));

93 ˛as†
	chash_m≠_ba£
 {

94 
	gpublic
:

96 
size_t
 
	tsize_ty≥
;

98 
size_t
 
	thashcode_t
;

100 
size_t
 
	t£gmít_ödex_t
;

102 
hash_m≠_node_ba£
 
	tnode_ba£
;

104 
	gbuckë
 : 
tbb
::
öã∫Æ
::
no_c›y
 {

106 
•ö_rw_muãx
 
	tmuãx_t
;

108 
	gmuãx_t
::
	tsc›ed_lock
 
	tsc›ed_t
;

109 
muãx_t
 
	gmuãx
;

110 
node_ba£
 *
	gnode_li°
;

113 
size_ty≥
 c⁄° 
	gembedded_block
 = 1;

115 
size_ty≥
 c⁄° 
	gembedded_buckës
 = 1<<
embedded_block
;

117 
size_ty≥
 c⁄° 
	gfú°_block
 = 8;

119 
size_ty≥
 c⁄° 
	gpoöãrs_≥r_èbÀ
 = (
£gmít_ödex_t
) * 8;

121 
buckë
 *
	t£gmít_±r_t
;

123 
£gmít_±r_t
 
	t£gmíts_èbÀ_t
[
poöãrs_≥r_èbÀ
];

125 
	g©omic
<
	ghashcode_t
> 
	gmy_mask
;

127 
£gmíts_èbÀ_t
 
	gmy_èbÀ
;

129 
	g©omic
<
	gsize_ty≥
> 
	gmy_size
;

131 
buckë
 
	gmy_embedded_£gmít
[
embedded_buckës
];

132 #i‡
__TBB_STATISTICS


133 
	g©omic
<> 
	gmy_öfo_ªsizes
;

134 
muèbÀ
 
	g©omic
<> 
	gmy_öfo_ª°¨ts
;

135 
	g©omic
<> 
	gmy_öfo_ªhashes
;

138 
hash_m≠_ba£
() {

139 
	g°d
::
mem£t
–
this
, 0, 
poöãrs_≥r_èbÀ
*(
£gmít_±r_t
)

140 + (
my_size
Ë+ (
my_mask
)

141 + 
embedded_buckës
*(
buckë
) );

142  
size_ty≥
 
	gi
 = 0; i < 
	gembedded_block
; i++ )

143 
	gmy_èbÀ
[
i
] = 
my_embedded_£gmít
 + 
£gmít_ba£
(i);

144 
	gmy_mask
 = 
embedded_buckës
 - 1;

145 
__TBB_ASSERT
–
embedded_block
 <
fú°_block
, "The first blockÇumber must includeÉmbedded blocks");

146 #i‡
__TBB_STATISTICS


147 
	gmy_öfo_ªsizes
 = 0;

148 
	gmy_öfo_ª°¨ts
 = 0;

149 
	gmy_öfo_ªhashes
 = 0;

154 
£gmít_ödex_t
 
£gmít_ödex_of
–
size_ty≥
 
ödex
 ) {

155  
£gmít_ödex_t
–
__TBB_Log2
–
ödex
|1 ) );

159 
£gmít_ödex_t
 
£gmít_ba£
–£gmít_ödex_à
k
 ) {

160  (
£gmít_ödex_t
(1)<<
	gk
 & ~segment_index_t(1));

164 
size_ty≥
 
£gmít_size
–
£gmít_ödex_t
 
k
 ) {

165  
size_ty≥
(1)<<
	gk
;

169 
boﬁ
 
is_vÆid
–*
±r
 ) {

170  
	gªöãΩªt_ˇ°
<
	guöçå_t
>(
	g±r
Ë> 
uöçå_t
(63);

174 
öô_buckës
–
£gmít_±r_t
 
±r
, 
size_ty≥
 
sz
, 
boﬁ
 
is_öôül
 ) {

175 if–
	gis_öôül
 ) 
	g°d
::
mem£t
(
±r
, 0, 
sz
*(
buckë
) );

176 
size_ty≥
 
	gi
 = 0; i < 
	gsz
; i++, 
	g±r
++) {

177 *
	gªöãΩªt_ˇ°
<
	göçå_t
*>(&
	g±r
->
	gmuãx
) = 0;

178 
	g±r
->
	gnode_li°
 = 
ªhash_ªq
;

183 
add_to_buckë
–
buckë
 *
b
, 
node_ba£
 *
n
 ) {

184 
__TBB_ASSERT
(
b
->
node_li°
 !
ªhash_ªq
, 
NULL
);

185 
	gn
->
	g√xt
 = 
b
->
node_li°
;

186 
	gb
->
	gnode_li°
 = 
n
;

190 
	gíabÀ_£gmít_Áûß„
 : 
tbb
::
öã∫Æ
::
no_c›y
 {

191 
£gmít_±r_t
 *
my_£gmít_±r
;

192 
íabÀ_£gmít_Áûß„
(
£gmíts_èbÀ_t
 &
èbÀ
, 
£gmít_ödex_t
 
k
Ë: 
my_£gmít_±r
(&table[k]) {}

193 ~
íabÀ_£gmít_Áûß„
() {

194 if–
my_£gmít_±r
 ) *my_segment_ptr = 0;

199 
íabÀ_£gmít
–
£gmít_ödex_t
 
k
, 
boﬁ
 
is_öôül
 = 
Ál£
 ) {

200 
__TBB_ASSERT
–
k
, "Zero segment must beÉmbedded" );

201 
íabÀ_£gmít_Áûß„
 
w©chdog
–
my_èbÀ
, 
k
 );

202 
	gˇche_Æig√d_Æloˇt‹
<
	gbuckë
> 
	gÆloc
;

203 
size_ty≥
 
	gsz
;

204 
__TBB_ASSERT
–!
is_vÆid
(
my_èbÀ
[
k
]), "Wrong concurrentássignment");

205 if–
	gk
 >
fú°_block
 ) {

206 
sz
 = 
£gmít_size
–
k
 );

207 
£gmít_±r_t
 
	g±r
 = 
Æloc
.
Æloˇã
–
sz
 );

208 
öô_buckës
–
±r
, 
sz
, 
is_öôül
 );

209 
ôt_hide_°‹e_w‹d
–
my_èbÀ
[
k
], 
±r
 );

210 
	gsz
 <<= 1;

212 
__TBB_ASSERT
–
k
 =
embedded_block
, "Wrong segment index" );

213 
	gsz
 = 
£gmít_size
–
fú°_block
 );

214 
£gmít_±r_t
 
	g±r
 = 
Æloc
.
Æloˇã
–
sz
 - 
embedded_buckës
 );

215 
öô_buckës
–
±r
, 
sz
 - 
embedded_buckës
, 
is_öôül
 );

216 
	g±r
 -
£gmít_ba£
(
embedded_block
);

217 
£gmít_ödex_t
 
	gi
 = 
embedded_block
; i < 
	gfú°_block
; i++)

218 
ôt_hide_°‹e_w‹d
–
my_èbÀ
[
i
], 
±r
 + 
£gmít_ba£
(i) );

220 
ôt_°‹e_w‹d_wôh_ªÀa£
–
my_mask
, 
sz
-1 );

221 
	gw©chdog
.
	gmy_£gmít_±r
 = 0;

225 
buckë
 *
gë_buckë
–
hashcode_t
 
h
 ) c⁄° 
throw
() {

226 
£gmít_ödex_t
 
	gs
 = 
£gmít_ödex_of
–
h
 );

227 
	gh
 -
£gmít_ba£
(
s
);

228 
£gmít_±r_t
 
	g£g
 = 
my_èbÀ
[
s
];

229 
__TBB_ASSERT
–
is_vÆid
(
£g
), "hashcode must be cut by valid mask forállocated segments" );

230  &
	g£g
[
h
];

234 
m¨k_ªhashed_Àvñs
–
hashcode_t
 
h
 ) 
throw
 () {

235 
£gmít_ödex_t
 
	gs
 = 
£gmít_ödex_of
–
h
 );

236  
£gmít_±r_t
 
	g£g
 = 
my_èbÀ
[++
s
] )

237 if–
£g
[
h
].
node_li°
 =
ªhash_ªq
 ) {

238 
£g
[
h
].
node_li°
 = 
em±y_ªhashed
;

239 
m¨k_ªhashed_Àvñs
–
h
 + ((
hashcode_t
)1<<
s
) );

245 
ölöe
 
boﬁ
 
check_mask_ø˚
–c⁄° 
hashcode_t
 
h
, hashcode_à&
m
 ) const {

246 
hashcode_t
 
	gm_now
, 
	gm_ﬁd
 = 
m
;

247 
	gm_now
 = (
hashcode_t
Ë
ôt_lﬂd_w‹d_wôh_acquúe
–
my_mask
 );

248 if–
	gm_ﬁd
 !
m_now
 )

249  
check_ªhashög_cﬁlisi⁄
–
h
, 
m_ﬁd
, 
m
 = 
m_now
 );

250  
	gÁl£
;

254 
boﬁ
 
check_ªhashög_cﬁlisi⁄
–c⁄° 
hashcode_t
 
h
, hashcode_à
m_ﬁd
, hashcode_à
m
 ) const {

255 
__TBB_ASSERT
(
m_ﬁd
 !
m
, 
NULL
);

256 if–(
	gh
 & 
	gm_ﬁd
Ë!(
h
 & 
m
) ) {

259  ++
m_ﬁd
; !(
	gh
 & 
	gm_ﬁd
); m_old <<= 1 )

261 
	gm_ﬁd
 = (
m_ﬁd
<<1) - 1;

262 
__TBB_ASSERT
((
m_ﬁd
&(m_ﬁd+1))==0 && m_ﬁd <
m
, 
NULL
);

264 if–
ôt_lﬂd_w‹d_wôh_acquúe
(
gë_buckë
(
h
 & 
m_ﬁd
)->
node_li°
Ë!
ªhash_ªq
 )

266 #i‡
__TBB_STATISTICS


267 
my_öfo_ª°¨ts
++;

269  
	gåue
;

272  
	gÁl£
;

276 
£gmít_ödex_t
 
ö£π_√w_node
–
buckë
 *
b
, 
node_ba£
 *
n
, 
hashcode_t
 
mask
 ) {

277 
size_ty≥
 
	gsz
 = ++
my_size
;

278 
add_to_buckë
–
b
, 
n
 );

280 if–
	gsz
 >
mask
 ) {

281 
£gmít_ödex_t
 
√w_£g
 = 
__TBB_Log2
–
mask
+1 );

282 
__TBB_ASSERT
–
is_vÆid
(
my_èbÀ
[
√w_£g
-1]), "newállocations mustÇotÖublishÇew mask until segment hasállocated");

283 c⁄° 
£gmít_±r_t
 
	gis_Æloˇtög
 = (segment_ptr_t)2;

284 if–!
ôt_hide_lﬂd_w‹d
(
my_èbÀ
[
√w_£g
])

285 && 
as_©omic
(
my_èbÀ
[
√w_£g
]).
com∑ª_™d_sw≠
(
is_Æloˇtög
, 
NULL
) == NULL )

286  
√w_£g
;

292 
ª£rve
(
size_ty≥
 
buckës
) {

293 if–!
	gbuckës
-- ) ;

294 
boﬁ
 
	gis_öôül
 = !
my_size
;

295  
size_ty≥
 
	gm
 = 
my_mask
; 
	gbuckës
 > m; m = my_mask )

296 
íabÀ_£gmít
–
£gmít_ödex_of
–
m
+1 ), 
is_öôül
 );

299 
öã∫Æ_sw≠
(
hash_m≠_ba£
 &
èbÀ
) {

300 
usög
 
	g°d
::
sw≠
;

301 
sw≠
(
this
->
my_mask
, 
èbÀ
.my_mask);

302 
sw≠
(
this
->
my_size
, 
èbÀ
.my_size);

303 
size_ty≥
 
	gi
 = 0; i < 
	gembedded_buckës
; i++)

304 
sw≠
(
this
->
my_embedded_£gmít
[
i
].
node_li°
, 
èbÀ
.my_embedded_segment[i].node_list);

305 
size_ty≥
 
	gi
 = 
embedded_block
; i < 
	gpoöãrs_≥r_èbÀ
; i++)

306 
sw≠
(
this
->
my_èbÀ
[
i
], 
èbÀ
.my_table[i]);

310 
	gãm∂©e
<
ty≥«me
 
	gIãøt‹
>

311 
˛ass
 
	ghash_m≠_ønge
;

316 
	gãm∂©e
<
ty≥«me
 
	gC⁄èöî
,Åy≥«mê
	gVÆue
>

317 
˛ass
 
	ghash_m≠_ôî©‹


318 : 
public
 
°d
::
ôî©‹
<°d::
f‹w¨d_ôî©‹_èg
,
	gVÆue
>

320 
C⁄èöî
 
	tm≠_ty≥
;

321 
ty≥«me
 
	tC⁄èöî
::
	tnode
Çode;

322 
	ghash_m≠_ba£
::
	tnode_ba£
Çode_base;

323 
	ghash_m≠_ba£
::
	tbuckë
 bucket;

325 
	gãm∂©e
<
ty≥«me
 
	gC
,Åy≥«mê
	gT
,Åy≥«mê
	gU
>

326 
‰õnd
 
boﬁ
 
	g›î©‹
==–c⁄° 
hash_m≠_ôî©‹
<
C
,
	gT
>& 
	gi
, c⁄° 
	ghash_m≠_ôî©‹
<
	gC
,
	gU
>& 
	gj
 );

328 
	gãm∂©e
<
ty≥«me
 
	gC
,Åy≥«mê
	gT
,Åy≥«mê
	gU
>

329 
‰õnd
 
boﬁ
 
	g›î©‹
!=–c⁄° 
hash_m≠_ôî©‹
<
C
,
	gT
>& 
	gi
, c⁄° 
	ghash_m≠_ôî©‹
<
	gC
,
	gU
>& 
	gj
 );

331 
	gãm∂©e
<
ty≥«me
 
	gC
,Åy≥«mê
	gT
,Åy≥«mê
	gU
>

332 
‰õnd
 
±rdiff_t
 
	g›î©‹
-–c⁄° 
	ghash_m≠_ôî©‹
<
	gC
,
	gT
>& 
	gi
, c⁄° hash_m≠_ôî©‹<C,
	gU
>& 
	gj
 );

334 
	gãm∂©e
<
ty≥«me
 
	gC
,Åy≥«mê
	gU
>

335 
‰õnd
 
˛ass
 
	ghash_m≠_ôî©‹
;

337 
	gãm∂©e
<
ty≥«me
 
	gI
>

338 
‰õnd
 
˛ass
 
	ghash_m≠_ønge
;

340 
adv™˚_to_√xt_buckë
() {

341 
size_t
 
	gk
 = 
my_ödex
+1;

342  
	gmy_buckë
 && 
	gk
 <
my_m≠
->
my_mask
 ) {

344 if–
k
& (k-2) )

345 ++
my_buckë
;

346 
	gmy_buckë
 = 
my_m≠
->
gë_buckë
–
k
 );

347 
	gmy_node
 = 
°©ic_ˇ°
<
node
*>–
my_buckë
->
node_li°
 );

348 if–
	ghash_m≠_ba£
::
is_vÆid
(
my_node
) ) {

349 
my_ödex
 = 
k
; ;

351 ++
	gk
;

353 
	gmy_buckë
 = 0; 
	gmy_node
 = 0; 
	gmy_ödex
 = 
k
;

355 #i‡!
deföed
(
_MSC_VER
Ë|| deföed(
__INTEL_COMPILER
)

356 
	gãm∂©e
<
ty≥«me
 
	gKey
,Åy≥«mê
	gT
,Åy≥«mê
	gHashCom∑ª
,Åy≥«mê
	gA
>

357 
‰õnd
 
˛ass
 
	göãrÁ˚5
::
c⁄cuºít_hash_m≠
;

359 
	gpublic
:

362 c⁄° 
C⁄èöî
 *
my_m≠
;

365 
size_t
 
	gmy_ödex
;

368 c⁄° 
buckë
 *
	gmy_buckë
;

371 
node
 *
	gmy_node
;

373 
hash_m≠_ôî©‹
–c⁄° 
C⁄èöî
 &
m≠
, 
size_t
 
ödex
, c⁄° 
buckë
 *
b
, 
node_ba£
 *
n
 );

375 
	gpublic
:

377 
hash_m≠_ôî©‹
() {}

378 
hash_m≠_ôî©‹
–c⁄° hash_m≠_ôî©‹<
C⁄èöî
,
ty≥«me
 C⁄èöî::
vÆue_ty≥
> &
Ÿhî
 ) :

379 
my_m≠
(
Ÿhî
.my_map),

380 
my_ödex
(
Ÿhî
.my_index),

381 
my_buckë
(
Ÿhî
.my_bucket),

382 
my_node
(
Ÿhî
.my_node)

384 
	gVÆue
& 
	g›î©‹
*() const {

385 
__TBB_ASSERT
–
hash_m≠_ba£
::
is_vÆid
(
my_node
), "iterator uninitialized orátÉnd of container?" );

386  
	gmy_node
->
	gôem
;

388 
VÆue
* 
	g›î©‹
->() const { &operator*();}

389 
	ghash_m≠_ôî©‹
& 
	g›î©‹
++();

392 
hash_m≠_ôî©‹
 
	g›î©‹
++() {

393 
hash_m≠_ôî©‹
 
ﬁd
(*
this
);

394 
	g›î©‹
++();

395  
	gﬁd
;

399 
	gãm∂©e
<
ty≥«me
 
	gC⁄èöî
,Åy≥«mê
	gVÆue
>

400 
	ghash_m≠_ôî©‹
<
	gC⁄èöî
,
	gVÆue
>::
hash_m≠_ôî©‹
–c⁄° 
C⁄èöî
 &
m≠
, 
size_t
 
ödex
, c⁄° 
buckë
 *
b
, 
node_ba£
 *
n
 ) :

401 
my_m≠
(&
m≠
),

402 
my_ödex
(
ödex
),

403 
my_buckë
(
b
),

404 
my_node
–
°©ic_ˇ°
<
node
*>(
n
) )

406 if–
	gb
 && !
	ghash_m≠_ba£
::
is_vÆid
(
n
) )

407 
adv™˚_to_√xt_buckë
();

410 
	gãm∂©e
<
ty≥«me
 
	gC⁄èöî
,Åy≥«mê
	gVÆue
>

411 
	ghash_m≠_ôî©‹
<
	gC⁄èöî
,
	gVÆue
>& hash_m≠_ôî©‹<C⁄èöî,VÆue>::
›î©‹
++() {

412 
my_node
 = 
°©ic_ˇ°
<
node
*>–my_node->
√xt
 );

413 if–!
	gmy_node
 ) 
adv™˚_to_√xt_buckë
();

414  *
	gthis
;

417 
	gãm∂©e
<
ty≥«me
 
	gC⁄èöî
,Åy≥«mê
	gT
,Åy≥«mê
	gU
>

418 
boﬁ
 
	g›î©‹
==–c⁄° 
hash_m≠_ôî©‹
<
C⁄èöî
,
	gT
>& 
	gi
, c⁄° 
	ghash_m≠_ôî©‹
<
	gC⁄èöî
,
	gU
>& 
	gj
 ) {

419  
	gi
.
	gmy_node
 =
j
.
my_node
 && 
i
.
my_m≠
 == j.my_map;

422 
	gãm∂©e
<
ty≥«me
 
	gC⁄èöî
,Åy≥«mê
	gT
,Åy≥«mê
	gU
>

423 
boﬁ
 
	g›î©‹
!=–c⁄° 
hash_m≠_ôî©‹
<
C⁄èöî
,
	gT
>& 
	gi
, c⁄° 
	ghash_m≠_ôî©‹
<
	gC⁄èöî
,
	gU
>& 
	gj
 ) {

424  
	gi
.
	gmy_node
 !
j
.
my_node
 || 
i
.
my_m≠
 != j.my_map;

429 
	gãm∂©e
<
ty≥«me
 
	gIãøt‹
>

430 ˛as†
	chash_m≠_ønge
 {

431 
ty≥«me
 
	tIãøt‹
::
	tm≠_ty≥
 map_type;

432 
Iãøt‹
 
	gmy_begö
;

433 
Iãøt‹
 
	gmy_íd
;

434 
muèbÀ
 
Iãøt‹
 
	gmy_midpoöt
;

435 
size_t
 
	gmy_gøösize
;

437 
£t_midpoöt
() const;

438 
	gãm∂©e
<
ty≥«me
 
	gU
> 
‰õnd
 
˛ass
 
	ghash_m≠_ønge
;

439 
	gpublic
:

441 
°d
::
	tsize_t
 
	tsize_ty≥
;

442 
ty≥«me
 
	tIãøt‹
::
	tvÆue_ty≥
 value_type;

443 
ty≥«me
 
	tIãøt‹
::
	tª„ªn˚
Ñeference;

444 
ty≥«me
 
	tIãøt‹
::
	tdif„ªn˚_ty≥
 difference_type;

445 
Iãøt‹
 
	tôî©‹
;

448 
boﬁ
 
em±y
(Ëc⁄° { 
	gmy_begö
==
my_íd
;}

451 
boﬁ
 
is_divisibÀ
() const {

452  
	gmy_midpoöt
!=
my_íd
;

455 
hash_m≠_ønge
–hash_m≠_ønge& 
r
, 
•lô
 ) :

456 
my_íd
(
r
.my_end),

457 
my_gøösize
(
r
.my_grainsize)

459 
	gr
.
	gmy_íd
 = 
my_begö
 = 
r
.
my_midpoöt
;

460 
__TBB_ASSERT
–!
em±y
(), "Splitting despiteÅheÑange isÇot divisible" );

461 
__TBB_ASSERT
–!
r
.
em±y
(), "Splitting despiteÅheÑange isÇot divisible" );

462 
£t_midpoöt
();

463 
	gr
.
£t_midpoöt
();

466 
	gãm∂©e
<
ty≥«me
 
	gU
>

467 
hash_m≠_ønge
–hash_m≠_ønge<
U
>& 
r
) :

468 
my_begö
(
r
.my_begin),

469 
my_íd
(
r
.my_end),

470 
my_midpoöt
(
r
.my_midpoint),

471 
my_gøösize
(
r
.my_grainsize)

474 
hash_m≠_ønge
–c⁄° 
m≠_ty≥
 &
m≠
, 
size_ty≥
 
gøösize_
 = 1 ) :

475 
my_begö
–
Iãøt‹
–
m≠
, 0, m≠.
my_embedded_£gmít
, m≠.my_embedded_£gmít->
node_li°
 ) ),

476 
my_íd
–
Iãøt‹
–
m≠
, m≠.
my_mask
 + 1, 0, 0 ) ),

477 
my_gøösize
–
gøösize_
 )

479 
__TBB_ASSERT
–
gøösize_
>0, "grainsize must beÖositive" );

480 
£t_midpoöt
();

482 c⁄° 
	gIãøt‹
& 
begö
(Ëc⁄° { 
	gmy_begö
;}

483 c⁄° 
	gIãøt‹
& 
íd
(Ëc⁄° { 
	gmy_íd
;}

485 
size_ty≥
 
gøösize
(Ëc⁄° { 
	gmy_gøösize
;}

488 
	gãm∂©e
<
ty≥«me
 
	gIãøt‹
>

489 
	ghash_m≠_ønge
<
	gIãøt‹
>::
£t_midpoöt
() const {

491 
size_t
 
m
 = 
my_íd
.
my_ödex
-
my_begö
.my_index;

492 if–
	gm
 > 
	gmy_gøösize
 ) {

493 
	gm
 = 
my_begö
.
my_ödex
 + 
m
/2u;

494 
	ghash_m≠_ba£
::
buckë
 *
b
 = 
my_begö
.
my_m≠
->
gë_buckë
(
m
);

495 
	gmy_midpoöt
 = 
Iãøt‹
(*
my_begö
.
my_m≠
,
m
,
b
,b->
node_li°
);

497 
	gmy_midpoöt
 = 
my_íd
;

499 
__TBB_ASSERT
–
my_begö
.
my_ödex
 <
my_midpoöt
.my_index,

501 
__TBB_ASSERT
–
my_midpoöt
.
my_ödex
 <
my_íd
.my_index,

503 
__TBB_ASSERT
–
my_begö
 !
my_midpoöt
 || my_begö =
my_íd
,

510 #i‡
_MSC_VER
 && !
deföed
(
__INTEL_COMPILER
)

512 #¥agm®
w¨nög
–
push
 )

513 #¥agm®
w¨nög
–
dißbÀ
: 4127 )

546 
	gãm∂©e
<
ty≥«me
 
	gKey
,Åy≥«mê
	gT
,Åy≥«mê
	gHashCom∑ª
,Åy≥«mê
	gAŒoˇt‹
>

547 ˛as†
	cc⁄cuºít_hash_m≠
 : 
¥Ÿe˘ed
 
öã∫Æ
::
hash_m≠_ba£
 {

548 
ãm∂©e
<
ty≥«me
 
C⁄èöî
,Åy≥«mê
	gVÆue
>

549 
‰õnd
 
˛ass
 
	göã∫Æ
::
hash_m≠_ôî©‹
;

551 
	gãm∂©e
<
ty≥«me
 
	gI
>

552 
‰õnd
 
˛ass
 
	göã∫Æ
::
hash_m≠_ønge
;

554 
	gpublic
:

555 
Key
 
	tkey_ty≥
;

556 
T
 
	tm≠≥d_ty≥
;

557 
	g°d
::
	t∑ú
<c⁄° 
	tKey
,
	tT
> 
	tvÆue_ty≥
;

558 
	ghash_m≠_ba£
::
	tsize_ty≥
 size_type;

559 
±rdiff_t
 
	tdif„ªn˚_ty≥
;

560 
vÆue_ty≥
 *
	tpoöãr
;

561 c⁄° 
	tvÆue_ty≥
 *
	tc⁄°_poöãr
;

562 
	gvÆue_ty≥
 &
	tª„ªn˚
;

563 c⁄° 
	tvÆue_ty≥
 &
	tc⁄°_ª„ªn˚
;

564 
	göã∫Æ
::
	thash_m≠_ôî©‹
<
	tc⁄cuºít_hash_m≠
,
	tvÆue_ty≥
> 
	tôî©‹
;

565 
	göã∫Æ
::
	thash_m≠_ôî©‹
<
	tc⁄cuºít_hash_m≠
,c⁄° 
	tvÆue_ty≥
> 
	tc⁄°_ôî©‹
;

566 
	göã∫Æ
::
	thash_m≠_ønge
<
	tôî©‹
> 
	tønge_ty≥
;

567 
	göã∫Æ
::
	thash_m≠_ønge
<
	tc⁄°_ôî©‹
> 
	tc⁄°_ønge_ty≥
;

568 
AŒoˇt‹
 
	tÆloˇt‹_ty≥
;

570 
	g¥Ÿe˘ed
:

571 
‰õnd
 
˛ass
 
c⁄°_ac˚ss‹
;

572 
	gnode
;

573 
ty≥«me
 
	tAŒoˇt‹
::
	tãm∂©e
 
	tªböd
<
	tnode
>::
	tŸhî
 
	tnode_Æloˇt‹_ty≥
;

574 
node_Æloˇt‹_ty≥
 
	gmy_Æloˇt‹
;

575 
HashCom∑ª
 
	gmy_hash_com∑ª
;

577 
	gnode
 : 
public
 
node_ba£
 {

578 
vÆue_ty≥
 
ôem
;

579 
node
–c⁄° 
Key
 &
key
 ) : 
ôem
(key, 
T
()) {}

580 
node
–c⁄° 
Key
 &
key
, c⁄° 
T
 &
t
 ) : 
ôem
(key,Å) {}

581 #i‡
__TBB_CPP11_RVALUE_REF_PRESENT


582 
node
–
vÆue_ty≥
&& 
i
 ) : 
ôem
(
°d
::
move
(i)){}

584 
node
–c⁄° 
vÆue_ty≥
& 
i
 ) : 
ôem
(i) {}

587 *
›î©‹
 
√w
–
size_t
 , 
node_Æloˇt‹_ty≥
 &
a
 ) {

588 *
	g±r
 = 
a
.
Æloˇã
(1);

589 if(!
	g±r
)

590 
	gtbb
::
öã∫Æ
::
throw_ex˚±i⁄
(
tbb
::öã∫Æ::
eid_bad_Æloc
);

591  
	g±r
;

594 
›î©‹
 
dñëe
–*
±r
, 
node_Æloˇt‹_ty≥
 &
a
 ) { 
	ga
.
dóŒoˇã
(
°©ic_ˇ°
<
node
*>(ptr),1); }

597 
dñëe_node
–
node_ba£
 *
n
 ) {

598 
	gmy_Æloˇt‹
.
de°roy
–
°©ic_ˇ°
<
node
*>(
n
) );

599 
	gmy_Æloˇt‹
.
dóŒoˇã
–
°©ic_ˇ°
<
node
*>(
n
), 1);

602 
node
* 
Æloˇã_node_c›y_c⁄°ru˘
(
node_Æloˇt‹_ty≥
& 
Æloˇt‹
, c⁄° 
Key
 &
key
, c⁄° 
T
 * 
t
){

603  
√w
–
Æloˇt‹
 ) 
node
(
key
, *
t
);

606 
node
* 
Æloˇã_node_deÁu…_c⁄°ru˘
(
node_Æloˇt‹_ty≥
& 
Æloˇt‹
, c⁄° 
Key
 &
key
, c⁄° 
T
 * ){

607  
√w
–
Æloˇt‹
 ) 
node
(
key
);

610 
node
* 
do_nŸ_Æloˇã_node
(
node_Æloˇt‹_ty≥
& , c⁄° 
Key
 &, c⁄° 
T
 * ){

611 
__TBB_ASSERT
(
Ál£
,"this dummy function shouldÇot be called");

612  
	gNULL
;

615 
node
 *
£¨ch_buckë
–c⁄° 
key_ty≥
 &
key
, 
buckë
 *
b
 ) const {

616 
node
 *
	gn
 = 
°©ic_ˇ°
<node*>–
b
->
node_li°
 );

617  
is_vÆid
(
n
Ë&& !
	gmy_hash_com∑ª
.
equÆ
(
key
,Ç->
ôem
.
fú°
) )

618 
	gn
 = 
°©ic_ˇ°
<
node
*>–
n
->
√xt
 );

619 
__TBB_ASSERT
(
n
 !
öã∫Æ
::
ªhash_ªq
, "Search can beÉxecuted only forÑehashed bucket");

620  
	gn
;

624 ˛as†
	cbuckë_ac˚ss‹
 : 
public
 
buckë
::
sc›ed_t
 {

625 
buckë
 *
my_b
;

626 
	gpublic
:

627 
buckë_ac˚ss‹
–
c⁄cuºít_hash_m≠
 *
ba£
, c⁄° 
hashcode_t
 
h
, 
boﬁ
 
wrôî
 = 
Ál£
 ) { 
acquúe
( base, h, writer ); }

629 
ölöe
 
acquúe
–
c⁄cuºít_hash_m≠
 *
ba£
, c⁄° 
hashcode_t
 
h
, 
boﬁ
 
wrôî
 = 
Ál£
 ) {

630 
my_b
 = 
ba£
->
gë_buckë
–
h
 );

632 if–
ôt_lﬂd_w‹d_wôh_acquúe
(
my_b
->
node_li°
Ë=
öã∫Æ
::
ªhash_ªq


633 && 
åy_acquúe
–
my_b
->
muãx
, 
åue
 ) )

635 if–
	gmy_b
->
	gnode_li°
 =
öã∫Æ
::
ªhash_ªq
 ) 
ba£
->
ªhash_buckë
–
my_b
, 
h
 );

637 
	gbuckë
::
sc›ed_t
::
acquúe
–
my_b
->
muãx
, 
wrôî
 );

638 
__TBB_ASSERT
–
my_b
->
node_li°
 !
öã∫Æ
::
ªhash_ªq
, 
NULL
);

641 
boﬁ
 
is_wrôî
(Ë{  
	gbuckë
::
sc›ed_t
::is_writer; }

643 
buckë
 *
›î©‹
(Ë(Ë{  
	gmy_b
; }

647 
ªhash_buckë
–
buckë
 *
b_√w
, c⁄° 
hashcode_t
 
h
 ) {

648 
__TBB_ASSERT
–*(
öçå_t
*)(&
b_√w
->
muãx
), "b_new must beÜocked (for write)");

649 
__TBB_ASSERT
–
h
 > 1, "TheÜowermost buckets can't beÑehashed" );

650 
__TBB_°‹e_wôh_ªÀa£
(
b_√w
->
node_li°
, 
öã∫Æ
::
em±y_ªhashed
);

651 
hashcode_t
 
	gmask
 = ( 1u<<
__TBB_Log2
–
h
 ) ) - 1;

652 #i‡
__TBB_STATISTICS


653 
	gmy_öfo_ªhashes
++;

656 
buckë_ac˚ss‹
 
b_ﬁd
–
this
, 
h
 & 
mask
 );

658 
	gmask
 = (
mask
<<1) | 1;

659 
__TBB_ASSERT
–(
mask
&(mask+1))==0 && (
h
 & maskË=h, 
NULL
 );

660 
	gª°¨t
:

661  
node_ba£
 **
p
 = &
b_ﬁd
()->
node_li°
, *
	gn
 = 
__TBB_lﬂd_wôh_acquúe
(*p); 
is_vÆid
(
n
);Ç = *p ) {

662 
hashcode_t
 
c
 = 
my_hash_com∑ª
.
hash
–
°©ic_ˇ°
<
node
*>(
n
)->
ôem
.
fú°
 );

663 #i‡
TBB_USE_ASSERT


664 
hashcode_t
 
	gbmask
 = 
h
 & (
mask
>>1);

665 
	gbmask
 = 
bmask
==0? 1 : ( 1u<<(
__TBB_Log2
( bmask )+1 ) ) - 1;

666 
__TBB_ASSERT
–(
c
 & 
bmask
Ë=(
h
 & bmask), "hash() function changed for key inÅable" );

668 if–(
	gc
 & 
	gmask
Ë=
h
 ) {

669 if–!
b_ﬁd
.
is_wrôî
() )

670 if–!
b_ﬁd
.
upgøde_to_wrôî
() ) {

671 
ª°¨t
;

673 *
	gp
 = 
n
->
√xt
;

674 
add_to_buckë
–
b_√w
, 
n
 );

675 } 
	gp
 = &
n
->
√xt
;

679 
	sˇŒ_˛ór_⁄_Àave
 {

680 
c⁄cuºít_hash_m≠
* 
	gmy_ch_m≠
;

681 
ˇŒ_˛ór_⁄_Àave
–
c⁄cuºít_hash_m≠
* 
a_ch_m≠
 ) : 
my_ch_m≠
(a_ch_map) {}

682 
dismiss
(Ë{
my_ch_m≠
 = 0;}

683 ~
ˇŒ_˛ór_⁄_Àave
(){

684 i‡(
	gmy_ch_m≠
){

685 
	gmy_ch_m≠
->
˛ór
();

689 
	gpublic
:

691 
˛ass
 
ac˚ss‹
;

693 ˛as†
	cc⁄°_ac˚ss‹
 : 
¥iv©e
 
node
::
sc›ed_t
 {

694 
‰õnd
 
˛ass
 
c⁄cuºít_hash_m≠
<
Key
,
	gT
,
	gHashCom∑ª
,
	gAŒoˇt‹
>;

695 
‰õnd
 
˛ass
 
	gac˚ss‹
;

696 
	gpublic
:

698 c⁄° 
	tty≥«me
 
	tc⁄cuºít_hash_m≠
::
	tvÆue_ty≥
 value_type;

701 
boﬁ
 
em±y
(Ëc⁄° {  !
	gmy_node
; }

704 
ªÀa£
() {

705 if–
	gmy_node
 ) {

706 
	gnode
::
sc›ed_t
::
ªÀa£
();

707 
	gmy_node
 = 0;

712 
c⁄°_ª„ªn˚
 
	g›î©‹
*() const {

713 
__TBB_ASSERT
–
my_node
, "attemptÅo dereferenceÉmptyáccessor" );

714  
	gmy_node
->
	gôem
;

718 
c⁄°_poöãr
 
	g›î©‹
->() const {

719  &
	g›î©‹
*();

723 
c⁄°_ac˚ss‹
(Ë: 
my_node
(
NULL
) {}

726 ~
c⁄°_ac˚ss‹
() {

727 
my_node
 = 
NULL
;

729 
	g¥Ÿe˘ed
:

730 
boﬁ
 
is_wrôî
(Ë{  
node
::
sc›ed_t
::is_writer; }

731 
node
 *
	gmy_node
;

732 
hashcode_t
 
	gmy_hash
;

736 ˛as†
	cac˚ss‹
: 
public
 
c⁄°_ac˚ss‹
 {

737 
public
:

739 
ty≥«me
 
	tc⁄cuºít_hash_m≠
::
	tvÆue_ty≥
 value_type;

742 
ª„ªn˚
 
	g›î©‹
*() const {

743 
__TBB_ASSERT
–
this
->
my_node
, "attemptÅo dereferenceÉmptyáccessor" );

744  
	gthis
->
	gmy_node
->
	gôem
;

748 
poöãr
 
	g›î©‹
->() const {

749  &
	g›î©‹
*();

754 
c⁄cuºít_hash_m≠
–c⁄° 
Æloˇt‹_ty≥
 &
a
 =állocator_type() )

755 : 
öã∫Æ
::
hash_m≠_ba£
(), 
my_Æloˇt‹
(
a
)

759 
c⁄cuºít_hash_m≠
–
size_ty≥
 
n
, c⁄° 
Æloˇt‹_ty≥
 &
a
 =állocator_type() )

760 : 
my_Æloˇt‹
(
a
)

762 
ª£rve
–
n
 );

766 
c⁄cuºít_hash_m≠
–c⁄° c⁄cuºít_hash_m≠ &
èbÀ
, c⁄° 
Æloˇt‹_ty≥
 &
a
 =állocator_type() )

767 : 
öã∫Æ
::
hash_m≠_ba£
(), 
my_Æloˇt‹
(
a
)

769 
öã∫Æ_c›y
(
èbÀ
);

772 #i‡
__TBB_CPP11_RVALUE_REF_PRESENT


774 
c⁄cuºít_hash_m≠
–c⁄cuºít_hash_m≠ &&
èbÀ
 )

775 : 
öã∫Æ
::
hash_m≠_ba£
(), 
my_Æloˇt‹
(
°d
::
move
(
èbÀ
.
gë_Æloˇt‹
()))

777 
sw≠
(
èbÀ
);

781 
c⁄cuºít_hash_m≠
–c⁄cuºít_hash_m≠ &&
èbÀ
, c⁄° 
Æloˇt‹_ty≥
 &
a
 )

782 : 
öã∫Æ
::
hash_m≠_ba£
(), 
my_Æloˇt‹
(
a
)

784 i‡(
	ga
 =
èbÀ
.
gë_Æloˇt‹
()){

785 
this
->
sw≠
(
èbÀ
);

787 
ˇŒ_˛ór_⁄_Àave
 
sc›e_gu¨d
(
this
);

788 
öã∫Æ_c›y
(
°d
::
make_move_ôî©‹
(
èbÀ
.
begö
()), std::make_move_ôî©‹—abÀ.
íd
()));

789 
	gsc›e_gu¨d
.
dismiss
();

795 
	gãm∂©e
<
ty≥«me
 
	gI
>

796 
c⁄cuºít_hash_m≠
–
I
 
fú°
, I 
œ°
, c⁄° 
Æloˇt‹_ty≥
 &
a
 =állocator_type() )

797 : 
my_Æloˇt‹
(
a
)

799 
ª£rve
–
°d
::
di°™˚
(
fú°
, 
œ°
) );

800 
öã∫Æ_c›y
(
fú°
, 
œ°
);

803 #i‡
__TBB_INITIALIZER_LISTS_PRESENT


805 
c⁄cuºít_hash_m≠
–
°d
::
öôülizî_li°
<
vÆue_ty≥
> 
û
, c⁄° 
Æloˇt‹_ty≥
 &
a
 =állocator_type() )

806 : 
my_Æloˇt‹
(
a
)

808 
ª£rve
(
û
.
size
());

809 
öã∫Æ_c›y
(
û
.
begö
(), il.
íd
());

815 
	gc⁄cuºít_hash_m≠
& 
	g›î©‹
=–c⁄° 
c⁄cuºít_hash_m≠
 &
èbÀ
 ) {

816 if–
this
!=&
èbÀ
 ) {

817 
˛ór
();

818 
öã∫Æ_c›y
(
èbÀ
);

820  *
	gthis
;

823 #i‡
__TBB_CPP11_RVALUE_REF_PRESENT


825 
	gc⁄cuºít_hash_m≠
& 
	g›î©‹
=–
c⁄cuºít_hash_m≠
 &&
èbÀ
 ) {

826 if(
this
 !&
èbÀ
){

827 
ty≥«me
 
	ttbb
::
	töã∫Æ
::
	tÆloˇt‹_åaôs
<
	tÆloˇt‹_ty≥
>::
	t¥›ag©e_⁄_c⁄èöî_move_assignmít
 
	tpocma_t
;

828 if(
	gpocma_t
::
vÆue
 || 
this
->
my_Æloˇt‹
 =
èbÀ
.my_allocator) {

829 
c⁄cuºít_hash_m≠
 
åash
 (
°d
::
move
(*
this
));

831 
	gthis
->
sw≠
(
èbÀ
);

834 
c⁄cuºít_hash_m≠
 
moved_c›y
(
°d
::
move
(
èbÀ
), 
this
->
my_Æloˇt‹
);

835 
	gthis
->
sw≠
(
moved_c›y
);

838  *
	gthis
;

842 #i‡
__TBB_INITIALIZER_LISTS_PRESENT


844 
	gc⁄cuºít_hash_m≠
& 
	g›î©‹
=–
°d
::
öôülizî_li°
<
vÆue_ty≥
> 
û
 ) {

845 
˛ór
();

846 
ª£rve
(
û
.
size
());

847 
öã∫Æ_c›y
(
û
.
begö
(), il.
íd
());

848  *
	gthis
;

856 
ªhash
(
size_ty≥
 
n
 = 0);

859 
˛ór
();

862 ~
c⁄cuºít_hash_m≠
(Ë{ 
˛ór
(); }

867 
ønge_ty≥
 
ønge
–
size_ty≥
 
gøösize
=1 ) {

868  
ønge_ty≥
–*
this
, 
gøösize
 );

870 
c⁄°_ønge_ty≥
 
ønge
–
size_ty≥
 
gøösize
=1 ) const {

871  
c⁄°_ønge_ty≥
–*
this
, 
gøösize
 );

877 
ôî©‹
 
begö
(Ë{  iãøt‹–*
this
, 0, 
my_embedded_£gmít
, my_embedded_£gmít->
node_li°
 ); }

878 
ôî©‹
 
íd
(Ë{  iãøt‹–*
this
, 0, 0, 0 ); }

879 
c⁄°_ôî©‹
 
begö
(Ëc⁄° {  c⁄°_ôî©‹–*
this
, 0, 
my_embedded_£gmít
, my_embedded_£gmít->
node_li°
 ); }

880 
c⁄°_ôî©‹
 
íd
(Ëc⁄° {  c⁄°_ôî©‹–*
this
, 0, 0, 0 ); }

881 
	g°d
::
∑ú
<
ôî©‹
, 
	gôî©‹
> 
equÆ_ønge
–c⁄° 
Key
& 
key
 ) {  
öã∫Æ_equÆ_ønge
–key, 
íd
() ); }

882 
	g°d
::
∑ú
<
c⁄°_ôî©‹
, 
	gc⁄°_ôî©‹
> 
equÆ_ønge
–c⁄° 
Key
& 
key
 ) c⁄° {  
öã∫Æ_equÆ_ønge
–key, 
íd
() ); }

885 
size_ty≥
 
size
(Ëc⁄° {  
	gmy_size
; }

888 
boﬁ
 
em±y
(Ëc⁄° {  
	gmy_size
 == 0; }

891 
size_ty≥
 
max_size
(Ëc⁄° { (~size_ty≥(0))/(
	gnode
);}

894 
size_ty≥
 
buckë_cou¡
(Ëc⁄° {  
	gmy_mask
+1; }

897 
Æloˇt‹_ty≥
 
gë_Æloˇt‹
(Ëc⁄° {  
	gthis
->
	gmy_Æloˇt‹
; }

900 
sw≠
–
c⁄cuºít_hash_m≠
 &
èbÀ
 );

907 
size_ty≥
 
cou¡
–c⁄° 
Key
 &
key
 ) const {

908  
	gc⁄°_ˇ°
<
	gc⁄cuºít_hash_m≠
*>(
	gthis
)->
lookup
–
Ál£
, 
key
, 
NULL
, NULL, fÆ£, &
do_nŸ_Æloˇã_node
 );

913 
boﬁ
 
föd
–
c⁄°_ac˚ss‹
 &
ªsu…
, c⁄° 
Key
 &
key
 ) const {

914 
	gªsu…
.
ªÀa£
();

915  
	gc⁄°_ˇ°
<
	gc⁄cuºít_hash_m≠
*>(
	gthis
)->
lookup
–
Ál£
, 
key
, 
NULL
, &
ªsu…
, fÆ£, &
do_nŸ_Æloˇã_node
 );

920 
boﬁ
 
föd
–
ac˚ss‹
 &
ªsu…
, c⁄° 
Key
 &
key
 ) {

921 
	gªsu…
.
ªÀa£
();

922  
lookup
–
Ál£
, 
key
, 
NULL
, &
ªsu…
, 
åue
, &
do_nŸ_Æloˇã_node
 );

927 
boﬁ
 
ö£π
–
c⁄°_ac˚ss‹
 &
ªsu…
, c⁄° 
Key
 &
key
 ) {

928 
	gªsu…
.
ªÀa£
();

929  
lookup
–
åue
, 
key
, 
NULL
, &
ªsu…
, 
Ál£
, &
Æloˇã_node_deÁu…_c⁄°ru˘
 );

934 
boﬁ
 
ö£π
–
ac˚ss‹
 &
ªsu…
, c⁄° 
Key
 &
key
 ) {

935 
	gªsu…
.
ªÀa£
();

936  
lookup
–
åue
, 
key
, 
NULL
, &
ªsu…
,Årue, &
Æloˇã_node_deÁu…_c⁄°ru˘
 );

941 
boﬁ
 
ö£π
–
c⁄°_ac˚ss‹
 &
ªsu…
, c⁄° 
vÆue_ty≥
 &
vÆue
 ) {

942 
	gªsu…
.
ªÀa£
();

943  
lookup
–
åue
, 
vÆue
.
fú°
, &vÆue.
£c⁄d
, &
ªsu…
, 
Ál£
, &
Æloˇã_node_c›y_c⁄°ru˘
 );

948 
boﬁ
 
ö£π
–
ac˚ss‹
 &
ªsu…
, c⁄° 
vÆue_ty≥
 &
vÆue
 ) {

949 
	gªsu…
.
ªÀa£
();

950  
lookup
–
åue
, 
vÆue
.
fú°
, &vÆue.
£c⁄d
, &
ªsu…
,Årue, &
Æloˇã_node_c›y_c⁄°ru˘
 );

955 
boﬁ
 
ö£π
–c⁄° 
vÆue_ty≥
 &
vÆue
 ) {

956  
lookup
–
åue
, 
vÆue
.
fú°
, &vÆue.
£c⁄d
, 
NULL
, 
Ál£
, &
Æloˇã_node_c›y_c⁄°ru˘
 );

960 
	gãm∂©e
<
ty≥«me
 
	gI
>

961 
ö£π
–
I
 
fú°
, I 
œ°
 ) {

962  ; 
	gfú°
 !
œ°
; ++first )

963 
ö£π
–*
fú°
 );

966 #i‡
__TBB_INITIALIZER_LISTS_PRESENT


968 
ö£π
–
°d
::
öôülizî_li°
<
vÆue_ty≥
> 
û
 ) {

969 
ö£π
–
û
.
begö
(), il.
íd
() );

975 
boﬁ
 
îa£
–c⁄° 
Key
& 
key
 );

979 
boﬁ
 
îa£
–
c⁄°_ac˚ss‹
& 
ôem_ac˚ss‹
 ) {

980  
ex˛ude
–
ôem_ac˚ss‹
 );

985 
boﬁ
 
îa£
–
ac˚ss‹
& 
ôem_ac˚ss‹
 ) {

986  
ex˛ude
–
ôem_ac˚ss‹
 );

989 
	g¥Ÿe˘ed
:

991 
boﬁ
 
lookup
(boﬁ 
›_ö£π
, c⁄° 
Key
 &
key
, c⁄° 
T
 *
t
, 
c⁄°_ac˚ss‹
 *
ªsu…
, boﬁ 
wrôe
, 
node
* (*
Æloˇã_node
)(
node_Æloˇt‹_ty≥
& , const Key &, const T * ) ) ;

994 
boﬁ
 
ex˛ude
–
c⁄°_ac˚ss‹
 &
ôem_ac˚ss‹
 );

997 
	gãm∂©e
<
ty≥«me
 
	gI
>

998 
	g°d
::
∑ú
<
I
, 
	gI
> 
öã∫Æ_equÆ_ønge
–c⁄° 
Key
& 
key
, I 
íd
 ) const;

1001 
öã∫Æ_c›y
–c⁄° 
c⁄cuºít_hash_m≠
& 
sour˚
 );

1003 
	gãm∂©e
<
ty≥«me
 
	gI
>

1004 
öã∫Æ_c›y
–
I
 
fú°
, I 
œ°
 );

1009 
c⁄°_poöãr
 
öã∫Æ_Á°_föd
–c⁄° 
Key
& 
key
 ) const {

1010 
hashcode_t
 
	gh
 = 
my_hash_com∑ª
.
hash
–
key
 );

1011 
hashcode_t
 
	gm
 = (hashcode_tË
ôt_lﬂd_w‹d_wôh_acquúe
–
my_mask
 );

1012 
node
 *
	gn
;

1013 
	gª°¨t
:

1014 
__TBB_ASSERT
((
m
&(m+1))==0, "data structure is invalid");

1015 
buckë
 *
	gb
 = 
gë_buckë
–
h
 & 
m
 );

1017 if–
ôt_lﬂd_w‹d_wôh_acquúe
(
b
->
node_li°
Ë=
öã∫Æ
::
ªhash_ªq
 )

1019 
buckë
::
sc›ed_t
 
lock
;

1020 if–
	glock
.
åy_acquúe
–
b
->
muãx
, 
åue
 ) ) {

1021 if–
	gb
->
	gnode_li°
 =
öã∫Æ
::
ªhash_ªq
)

1022 
c⁄°_ˇ°
<
c⁄cuºít_hash_m≠
*>(
this
)->
ªhash_buckë
–
b
, 
h
 & 
m
 );

1024 
	glock
.
acquúe
–
b
->
muãx
, 
Ál£
 );

1025 
__TBB_ASSERT
(
b
->
node_li°
!=
öã∫Æ
::
ªhash_ªq
,
NULL
);

1027 
	gn
 = 
£¨ch_buckë
–
key
, 
b
 );

1028 if–
	gn
 )

1029  &
	gn
->
	gôem
;

1030 if–
check_mask_ø˚
–
h
, 
m
 ) )

1031 
	gª°¨t
;

1036 
	gãm∂©e
<
ty≥«me
 
	gKey
,Åy≥«mê
	gT
,Åy≥«mê
	gHashCom∑ª
,Åy≥«mê
	gA
>

1037 
boﬁ
 
	gc⁄cuºít_hash_m≠
<
	gKey
,
	gT
,
	gHashCom∑ª
,
	gA
>::
lookup
–boﬁ 
›_ö£π
, c⁄° 
Key
 &
key
, c⁄° 
T
 *
t
, 
c⁄°_ac˚ss‹
 *
ªsu…
, boﬁ 
wrôe
, 
node
* (*
Æloˇã_node
)(
node_Æloˇt‹_ty≥
& , const Key&, const T*) ) {

1038 
__TBB_ASSERT
–!
ªsu…
 || !ªsu…->
my_node
, 
NULL
 );

1039 
boﬁ
 
	gªtu∫_vÆue
;

1040 
hashcode_t
 c⁄° 
	gh
 = 
my_hash_com∑ª
.
hash
–
key
 );

1041 
hashcode_t
 
	gm
 = (hashcode_tË
ôt_lﬂd_w‹d_wôh_acquúe
–
my_mask
 );

1042 
£gmít_ödex_t
 
	ggrow_£gmít
 = 0;

1043 
node
 *
	gn
, *
	gtmp_n
 = 0;

1044 
	gª°¨t
:

1046 
__TBB_ASSERT
((
m
&(m+1))==0, "data structure is invalid");

1047 
	gªtu∫_vÆue
 = 
Ál£
;

1049 
buckë_ac˚ss‹
 
b
–
this
, 
h
 & 
m
 );

1052 
	gn
 = 
£¨ch_buckë
–
key
, 
b
() );

1053 if–
	g›_ö£π
 ) {

1055 if–!
	gn
 ) {

1056 if–!
	gtmp_n
 ) {

1057 
	gtmp_n
 = 
Æloˇã_node
(
my_Æloˇt‹
, 
key
, 
t
);

1059 if–!
	gb
.
is_wrôî
(Ë&& !b.
upgøde_to_wrôî
() ) {

1061 
	gn
 = 
£¨ch_buckë
–
key
, 
b
() );

1062 if–
is_vÆid
(
n
) ) {

1063 
	gb
.
downgøde_to_ªadî
();

1064 
	gexi°s
;

1067 if–
check_mask_ø˚
(
h
, 
m
) )

1068 
	gª°¨t
;

1070 
	ggrow_£gmít
 = 
ö£π_√w_node
–
b
(), 
n
 = 
tmp_n
, 
m
 );

1071 
	gtmp_n
 = 0;

1072 
	gªtu∫_vÆue
 = 
åue
;

1075 if–!
	gn
 ) {

1076 if–
check_mask_ø˚
–
h
, 
m
 ) )

1077 
	gª°¨t
;

1078  
	gÁl£
;

1080 
	gªtu∫_vÆue
 = 
åue
;

1082 
	gexi°s
:

1083 if–!
ªsu…
 ) 
check_growth
;

1086 if–!
	gªsu…
->
åy_acquúe
–
n
->
muãx
, 
wrôe
 ) ) {

1087  
	gtbb
::
öã∫Æ
::
©omic_backoff
 
backoff
(
åue
);; ) {

1088 if–
	gªsu…
->
åy_acquúe
–
n
->
muãx
, 
wrôe
 ) ) ;

1089 if–!
	gbackoff
.
bounded_∑u£
() ) {

1091 
	gb
.
ªÀa£
();

1092 
__TBB_ASSERT
–!
›_ö£π
 || !
ªtu∫_vÆue
, "Can'tácquireÇew item inÜocked bucket?" );

1093 
__TBB_Yõld
();

1094 
	gm
 = (
hashcode_t
Ë
ôt_lﬂd_w‹d_wôh_acquúe
–
my_mask
 );

1095 
	gª°¨t
;

1100 
	gªsu…
->
	gmy_node
 = 
n
;

1101 
	gªsu…
->
	gmy_hash
 = 
h
;

1102 
	gcheck_growth
:

1104 if–
grow_£gmít
 ) {

1105 #i‡
__TBB_STATISTICS


1106 
my_öfo_ªsizes
++;

1108 
íabÀ_£gmít
–
grow_£gmít
 );

1110 if–
	gtmp_n
 )

1111 
dñëe_node
–
tmp_n
 );

1112  
	gªtu∫_vÆue
;

1115 
	gãm∂©e
<
ty≥«me
 
	gKey
,Åy≥«mê
	gT
,Åy≥«mê
	gHashCom∑ª
,Åy≥«mê
	gA
>

1116 
	gãm∂©e
<
ty≥«me
 
	gI
>

1117 
	g°d
::
∑ú
<
I
, 
	gI
> 
	gc⁄cuºít_hash_m≠
<
	gKey
,
	gT
,
	gHashCom∑ª
,
	gA
>::
öã∫Æ_equÆ_ønge
–c⁄° 
Key
& 
key
, I 
íd_
 ) const {

1118 
hashcode_t
 
	gh
 = 
my_hash_com∑ª
.
hash
–
key
 );

1119 
hashcode_t
 
	gm
 = 
my_mask
;

1120 
__TBB_ASSERT
((
m
&(m+1))==0, "data structure is invalid");

1121 
	gh
 &
m
;

1122 
buckë
 *
	gb
 = 
gë_buckë
–
h
 );

1123  
	gb
->
	gnode_li°
 =
öã∫Æ
::
ªhash_ªq
 ) {

1124 
m
 = ( 1u<<
__TBB_Log2
–
h
 ) ) - 1;

1125 
	gb
 = 
gë_buckë
–
h
 &
m
 );

1127 
node
 *
	gn
 = 
£¨ch_buckë
–
key
, 
b
 );

1128 if–!
	gn
 )

1129  
	g°d
::
make_∑ú
(
íd_
,Énd_);

1130 
ôî©‹
 
lowî
(*
this
, 
h
, 
b
, 
n
), 
uµî
(lower);

1131  
	g°d
::
make_∑ú
(
lowî
, ++
uµî
);

1134 
	gãm∂©e
<
ty≥«me
 
	gKey
,Åy≥«mê
	gT
,Åy≥«mê
	gHashCom∑ª
,Åy≥«mê
	gA
>

1135 
boﬁ
 
	gc⁄cuºít_hash_m≠
<
	gKey
,
	gT
,
	gHashCom∑ª
,
	gA
>::
ex˛ude
–
c⁄°_ac˚ss‹
 &
ôem_ac˚ss‹
 ) {

1136 
__TBB_ASSERT
–
ôem_ac˚ss‹
.
my_node
, 
NULL
 );

1137 
node_ba£
 *c⁄° 
	gn
 = 
ôem_ac˚ss‹
.
my_node
;

1138 
hashcode_t
 c⁄° 
	gh
 = 
ôem_ac˚ss‹
.
my_hash
;

1139 
hashcode_t
 
	gm
 = (hashcode_tË
ôt_lﬂd_w‹d_wôh_acquúe
–
my_mask
 );

1142 
buckë_ac˚ss‹
 
b
–
this
, 
h
 & 
m
, 
åue
 );

1143 
node_ba£
 **
	gp
 = &
b
()->
node_li°
;

1144  *
	gp
 && *∞!
n
 )

1145 
p
 = &(*p)->
√xt
;

1146 if–!*
	gp
 ) {

1147 if–
check_mask_ø˚
–
h
, 
m
 ) )

1149 
	gôem_ac˚ss‹
.
ªÀa£
();

1150  
	gÁl£
;

1152 
__TBB_ASSERT
–*
p
 =
n
, 
NULL
 );

1153 *
	gp
 = 
n
->
√xt
;

1154 
	gmy_size
--;

1156 } 
	gåue
);

1157 if–!
	gôem_ac˚ss‹
.
is_wrôî
() )

1158 
	gôem_ac˚ss‹
.
upgøde_to_wrôî
();

1159 
	gôem_ac˚ss‹
.
ªÀa£
();

1160 
dñëe_node
–
n
 );

1161  
	gåue
;

1164 
	gãm∂©e
<
ty≥«me
 
	gKey
,Åy≥«mê
	gT
,Åy≥«mê
	gHashCom∑ª
,Åy≥«mê
	gA
>

1165 
boﬁ
 
	gc⁄cuºít_hash_m≠
<
	gKey
,
	gT
,
	gHashCom∑ª
,
	gA
>::
îa£
–c⁄° 
Key
 &
key
 ) {

1166 
node_ba£
 *
n
;

1167 
hashcode_t
 c⁄° 
	gh
 = 
my_hash_com∑ª
.
hash
–
key
 );

1168 
hashcode_t
 
	gm
 = (hashcode_tË
ôt_lﬂd_w‹d_wôh_acquúe
–
my_mask
 );

1169 
	gª°¨t
:

1172 
buckë_ac˚ss‹
 
b
–
this
, 
h
 & 
m
 );

1173 
	g£¨ch
:

1174 
node_ba£
 **
p
 = &
b
()->
node_li°
;

1175 
	gn
 = *
p
;

1176  
is_vÆid
(
n
Ë&& !
	gmy_hash_com∑ª
.
equÆ
(
key
, 
°©ic_ˇ°
<
node
*>“)->
ôem
.
fú°
 ) ) {

1177 
	gp
 = &
n
->
√xt
;

1178 
	gn
 = *
p
;

1180 if–!
	gn
 ) {

1181 if–
check_mask_ø˚
–
h
, 
m
 ) )

1182 
	gª°¨t
;

1183  
	gÁl£
;

1185 if–!
	gb
.
is_wrôî
(Ë&& !b.
upgøde_to_wrôî
() ) {

1186 if–
check_mask_ø˚
–
h
, 
m
 ) )

1187 
	gª°¨t
;

1188 
	g£¨ch
;

1190 *
	gp
 = 
n
->
√xt
;

1191 
	gmy_size
--;

1194 
ty≥«me
 
	gnode
::
sc›ed_t
 
ôem_lockî
–
n
->
muãx
, 
åue
 );

1197 
dñëe_node
–
n
 );

1198  
	gåue
;

1201 
	gãm∂©e
<
ty≥«me
 
	gKey
,Åy≥«mê
	gT
,Åy≥«mê
	gHashCom∑ª
,Åy≥«mê
	gA
>

1202 
	gc⁄cuºít_hash_m≠
<
	gKey
,
	gT
,
	gHashCom∑ª
,
	gA
>::
sw≠
(
c⁄cuºít_hash_m≠
<
Key
,
T
,
HashCom∑ª
,
A
> &
èbÀ
) {

1204 
usög
 
	g°d
::
sw≠
;

1205 
sw≠
(
this
->
my_Æloˇt‹
, 
èbÀ
.my_allocator);

1206 
sw≠
(
this
->
my_hash_com∑ª
, 
èbÀ
.my_hash_compare);

1207 
öã∫Æ_sw≠
(
èbÀ
);

1210 
	gãm∂©e
<
ty≥«me
 
	gKey
,Åy≥«mê
	gT
,Åy≥«mê
	gHashCom∑ª
,Åy≥«mê
	gA
>

1211 
	gc⁄cuºít_hash_m≠
<
	gKey
,
	gT
,
	gHashCom∑ª
,
	gA
>::
ªhash
(
size_ty≥
 
sz
) {

1212 
ª£rve
–
sz
 );

1213 
hashcode_t
 
	gmask
 = 
my_mask
;

1214 
hashcode_t
 
	gb
 = (
mask
+1)>>1;

1215 
__TBB_ASSERT
((
b
&(b-1))==0, 
NULL
);

1216 
buckë
 *
	gbp
 = 
gë_buckë
–
b
 );

1217 ; 
	gb
 <
mask
; b++, 
	gbp
++ ) {

1218 
node_ba£
 *
	gn
 = 
bp
->
node_li°
;

1219 
__TBB_ASSERT
–
is_vÆid
(
n
Ë||Ç =
öã∫Æ
::
em±y_ªhashed
 ||Ç =öã∫Æ::
ªhash_ªq
, "Broken internal structure" );

1220 
__TBB_ASSERT
–*
ªöãΩªt_ˇ°
<
öçå_t
*>(&
bp
->
muãx
) == 0, "concurrent or unexpectedlyÅerminated operation duringÑehash()Éxecution" );

1221 if–
	gn
 =
öã∫Æ
::
ªhash_ªq
 ) {

1222 
hashcode_t
 
h
 = 
b
; 
buckë
 *
	gb_ﬁd
 = 
bp
;

1224 
__TBB_ASSERT
–
h
 > 1, "TheÜowermost buckets can't beÑehashed" );

1225 
hashcode_t
 
	gm
 = ( 1u<<
__TBB_Log2
–
h
 ) ) - 1;

1226 
	gb_ﬁd
 = 
gë_buckë
–
h
 &
m
 );

1227 }  
	gb_ﬁd
->
	gnode_li°
 =
öã∫Æ
::
ªhash_ªq
 );

1229 
m¨k_ªhashed_Àvñs
–
h
 );

1230  
node_ba£
 **
	gp
 = &
b_ﬁd
->
node_li°
, *
	gq
 = *
p
; 
is_vÆid
(
q
); q = *p ) {

1231 
hashcode_t
 
c
 = 
my_hash_com∑ª
.
hash
–
°©ic_ˇ°
<
node
*>(
q
)->
ôem
.
fú°
 );

1232 if–(
	gc
 & 
	gmask
Ë!
h
 ) {

1233 *
p
 = 
q
->
√xt
;

1234 
buckë
 *
	gb_√w
 = 
gë_buckë
–
c
 & 
mask
 );

1235 
__TBB_ASSERT
–
b_√w
->
node_li°
 !
öã∫Æ
::
ªhash_ªq
, "hash() function changed for key inÅable or internalÉrror" );

1236 
add_to_buckë
–
b_√w
, 
q
 );

1237 } 
	gp
 = &
q
->
√xt
;

1241 #i‡
TBB_USE_PERFORMANCE_WARNINGS


1242 
	gcuºít_size
 = (
my_size
), 
	gbuckës
 = (
mask
)+1, 
	gem±y_buckës
 = 0, 
	govîp›uœãd_buckës
 = 0;

1243 
boﬁ
 
	gªp‹ãd
 = 
Ál£
;

1245 #i‡
TBB_USE_ASSERT
 || 
TBB_USE_PERFORMANCE_WARNINGS


1246  
	gb
 = 0; b <
mask
; b++ ) {

1247 if–
	gb
 & (b-2ËË++
	gbp
;

1248 
	gbp
 = 
gë_buckë
–
b
 );

1249 
node_ba£
 *
	gn
 = 
bp
->
node_li°
;

1250 
__TBB_ASSERT
–*
ªöãΩªt_ˇ°
<
öçå_t
*>(&
bp
->
muãx
) == 0, "concurrent or unexpectedlyÅerminated operation duringÑehash()Éxecution" );

1251 
__TBB_ASSERT
–
is_vÆid
(
n
Ë||Ç =
öã∫Æ
::
em±y_ªhashed
, "Broken internal structure" );

1252 #i‡
TBB_USE_PERFORMANCE_WARNINGS


1253 if–
	gn
 =
öã∫Æ
::
em±y_ªhashed
 ) 
em±y_buckës
++;

1254 if–
	gn
->
	g√xt
 ) 
	govîp›uœãd_buckës
++;

1256 #i‡
TBB_USE_ASSERT


1257  ; 
is_vÆid
(
n
); 
	gn
 =Ç->
√xt
 ) {

1258 
hashcode_t
 
h
 = 
my_hash_com∑ª
.
hash
–
°©ic_ˇ°
<
node
*>(
n
)->
ôem
.
fú°
 ) & 
mask
;

1259 
__TBB_ASSERT
–
h
 =
b
, "hash() function changed for key inÅable or internalÉrror" );

1264 #i‡
TBB_USE_PERFORMANCE_WARNINGS


1265 if–
	gbuckës
 > 
	gcuºít_size
Ë
	gem±y_buckës
 -
buckës
 - 
cuºít_size
;

1266 
	govîp›uœãd_buckës
 -
cuºít_size
 - 
buckës
;

1267 if–!
	gªp‹ãd
 && 
	gbuckës
 >512 && ( 2*
em±y_buckës
 > 
cuºít_size
 || 2*
ovîp›uœãd_buckës
 > current_size ) ) {

1268 
tbb
::
öã∫Æ
::
ru¡ime_w¨nög
(

1270 
ty≥id
(*
this
).
«me
(), 
cuºít_size
, 
em±y_buckës
, 
ovîp›uœãd_buckës
 );

1271 
	gªp‹ãd
 = 
åue
;

1276 
	gãm∂©e
<
ty≥«me
 
	gKey
,Åy≥«mê
	gT
,Åy≥«mê
	gHashCom∑ª
,Åy≥«mê
	gA
>

1277 
	gc⁄cuºít_hash_m≠
<
	gKey
,
	gT
,
	gHashCom∑ª
,
	gA
>::
˛ór
() {

1278 
hashcode_t
 
m
 = 
my_mask
;

1279 
__TBB_ASSERT
((
m
&(m+1))==0, "data structure is invalid");

1280 #i‡
TBB_USE_ASSERT
 || 
TBB_USE_PERFORMANCE_WARNINGS
 || 
__TBB_STATISTICS


1281 #i‡
TBB_USE_PERFORMANCE_WARNINGS
 || 
__TBB_STATISTICS


1282 
	gcuºít_size
 = (
my_size
), 
	gbuckës
 = (
m
)+1, 
	gem±y_buckës
 = 0, 
	govîp›uœãd_buckës
 = 0;

1283 
boﬁ
 
	gªp‹ãd
 = 
Ál£
;

1285 
buckë
 *
	gbp
 = 0;

1287  
£gmít_ödex_t
 
	gb
 = 0; b <
m
; b++ ) {

1288 if–
	gb
 & (b-2ËË++
	gbp
;

1289 
	gbp
 = 
gë_buckë
–
b
 );

1290 
node_ba£
 *
	gn
 = 
bp
->
node_li°
;

1291 
__TBB_ASSERT
–
is_vÆid
(
n
Ë||Ç =
öã∫Æ
::
em±y_ªhashed
 ||Ç =öã∫Æ::
ªhash_ªq
, "Broken internal structure" );

1292 
__TBB_ASSERT
–*
ªöãΩªt_ˇ°
<
öçå_t
*>(&
bp
->
muãx
) == 0, "concurrent or unexpectedlyÅerminated operation during clear()Éxecution" );

1293 #i‡
TBB_USE_PERFORMANCE_WARNINGS
 || 
__TBB_STATISTICS


1294 if–
	gn
 =
öã∫Æ
::
em±y_ªhashed
 ) 
em±y_buckës
++;

1295 if–
	gn
 =
öã∫Æ
::
ªhash_ªq
 ) 
buckës
--;

1296 if–
	gn
->
	g√xt
 ) 
	govîp›uœãd_buckës
++;

1298 #i‡
__TBB_EXTRA_DEBUG


1299 ; 
is_vÆid
(
n
); 
	gn
 =Ç->
√xt
 ) {

1300 
hashcode_t
 
h
 = 
my_hash_com∑ª
.
hash
–
°©ic_ˇ°
<
node
*>(
n
)->
ôem
.
fú°
 );

1301 
	gh
 &
m
;

1302 
__TBB_ASSERT
–
h
 =
b
 || 
gë_buckë
(h)->
node_li°
 =
öã∫Æ
::
ªhash_ªq
, "hash() function changed for key inÅable or internalÉrror" );

1306 #i‡
TBB_USE_PERFORMANCE_WARNINGS
 || 
__TBB_STATISTICS


1307 #i‡
__TBB_STATISTICS


1308 
¥ötf
( "items=%d buckets: capacity=%dÑehashed=%dÉmpty=%d overpopulated=%d"

1310 
cuºít_size
, (
m
+1), 
buckës
, 
em±y_buckës
, 
ovîp›uœãd_buckës
,

1311 (
my_öfo_ªsizes
), (
my_öfo_ªhashes
), (
my_öfo_ª°¨ts
) );

1312 
	gmy_öfo_ªsizes
 = 0;

1313 
	gmy_öfo_ª°¨ts
 = 0;

1314 
	gmy_öfo_ªhashes
 = 0;

1316 if–
	gbuckës
 > 
	gcuºít_size
Ë
	gem±y_buckës
 -
buckës
 - 
cuºít_size
;

1317 
	govîp›uœãd_buckës
 -
cuºít_size
 - 
buckës
;

1318 if–!
	gªp‹ãd
 && 
	gbuckës
 >512 && ( 2*
em±y_buckës
 > 
cuºít_size
 || 2*
ovîp›uœãd_buckës
 > current_size ) ) {

1319 
tbb
::
öã∫Æ
::
ru¡ime_w¨nög
(

1321 
ty≥id
(*
this
).
«me
(), 
cuºít_size
, 
em±y_buckës
, 
ovîp›uœãd_buckës
 );

1322 
	gªp‹ãd
 = 
åue
;

1326 
	gmy_size
 = 0;

1327 
£gmít_ödex_t
 
	gs
 = 
£gmít_ödex_of
–
m
 );

1328 
__TBB_ASSERT
–
s
+1 =
poöãrs_≥r_èbÀ
 || !
my_èbÀ
[s+1], "wrong mask or concurrent grow" );

1329 
	gˇche_Æig√d_Æloˇt‹
<
	gbuckë
> 
	gÆloc
;

1331 
__TBB_ASSERT
–
is_vÆid
–
my_èbÀ
[
s
] ), "wrong mask or concurrent grow" );

1332 
£gmít_±r_t
 
	gbuckës_±r
 = 
my_èbÀ
[
s
];

1333 
size_ty≥
 
	gsz
 = 
£gmít_size
–
s
 ? s : 1 );

1334  
£gmít_ödex_t
 
	gi
 = 0; i < 
	gsz
; i++ )

1335  
node_ba£
 *
	gn
 = 
buckës_±r
[
i
].
node_li°
; 
is_vÆid
(
n
);Ç = buckets_ptr[i].node_list ) {

1336 
buckës_±r
[
i
].
node_li°
 = 
n
->
√xt
;

1337 
dñëe_node
–
n
 );

1339 if–
	gs
 >
fú°_block
)

1340 
Æloc
.
dóŒoˇã
–
buckës_±r
, 
sz
 );

1341 if–
	gs
 =
embedded_block
 &&Émbedded_block !
fú°_block
 )

1342 
Æloc
.
dóŒoˇã
–
buckës_±r
, 
£gmít_size
(
fú°_block
)-
embedded_buckës
 );

1343 if–
	gs
 >
embedded_block
 ) 
my_èbÀ
[
s
] = 0;

1344 } 
	gs
-- > 0);

1345 
	gmy_mask
 = 
embedded_buckës
 - 1;

1348 
	gãm∂©e
<
ty≥«me
 
	gKey
,Åy≥«mê
	gT
,Åy≥«mê
	gHashCom∑ª
,Åy≥«mê
	gA
>

1349 
	gc⁄cuºít_hash_m≠
<
	gKey
,
	gT
,
	gHashCom∑ª
,
	gA
>::
öã∫Æ_c›y
–c⁄° 
c⁄cuºít_hash_m≠
& 
sour˚
 ) {

1350 
ª£rve
–
sour˚
.
my_size
 );

1351 
hashcode_t
 
	gmask
 = 
sour˚
.
my_mask
;

1352 if–
	gmy_mask
 =
mask
 ) {

1353 
buckë
 *
d°
 = 0, *
	g§c
 = 0;

1354 
boﬁ
 
	gªhash_ªquúed
 = 
Ál£
;

1355  
hashcode_t
 
	gk
 = 0; k <
mask
; k++ ) {

1356 if–
	gk
 & (k-2ËË++
	gd°
,
	g§c
++;

1357 { 
	gd°
 = 
gë_buckë
–
k
 ); 
	g§c
 = 
sour˚
.get_bucket( k ); }

1358 
__TBB_ASSERT
–
d°
->
node_li°
 !
öã∫Æ
::
ªhash_ªq
, "Invalid bucket in destinationÅable");

1359 
node
 *
	gn
 = 
°©ic_ˇ°
<node*>–
§c
->
node_li°
 );

1360 if–
	gn
 =
öã∫Æ
::
ªhash_ªq
 ) {

1361 
ªhash_ªquúed
 = 
åue
;

1362 
	gd°
->
	gnode_li°
 = 
öã∫Æ
::
ªhash_ªq
;

1363 } ; 
	gn
;Ç = 
°©ic_ˇ°
<
node
*>–
n
->
√xt
 ) ) {

1364 
add_to_buckë
–
d°
, 
√w
–
my_Æloˇt‹
 ) 
node
(
n
->
ôem
.
fú°
,Ç->ôem.
£c⁄d
) );

1365 ++
	gmy_size
;

1368 if–
	gªhash_ªquúed
 ) 
ªhash
();

1369 } 
öã∫Æ_c›y
–
sour˚
.
begö
(), sour˚.
íd
() );

1372 
	gãm∂©e
<
ty≥«me
 
	gKey
,Åy≥«mê
	gT
,Åy≥«mê
	gHashCom∑ª
,Åy≥«mê
	gA
>

1373 
	gãm∂©e
<
ty≥«me
 
	gI
>

1374 
	gc⁄cuºít_hash_m≠
<
	gKey
,
	gT
,
	gHashCom∑ª
,
	gA
>::
öã∫Æ_c›y
(
I
 
fú°
, I 
œ°
) {

1375 
hashcode_t
 
	gm
 = 
my_mask
;

1376 ; 
	gfú°
 !
œ°
; ++first) {

1377 
hashcode_t
 
	gh
 = 
my_hash_com∑ª
.
hash
–(*
fú°
).first );

1378 
buckë
 *
	gb
 = 
gë_buckë
–
h
 & 
m
 );

1379 
__TBB_ASSERT
–
b
->
node_li°
 !
öã∫Æ
::
ªhash_ªq
, "Invalid bucket in destinationÅable");

1380 
node
 *
	gn
 = 
√w
–
my_Æloˇt‹
 )Çode(*
fú°
);

1381 
add_to_buckë
–
b
, 
n
 );

1382 ++
	gmy_size
;

1388 
usög
 
	göãrÁ˚5
::
c⁄cuºít_hash_m≠
;

1391 
	gãm∂©e
<
ty≥«me
 
	gKey
,Åy≥«mê
	gT
,Åy≥«mê
	gHashCom∑ª
,Åy≥«mê
	gA1
,Åy≥«mê
	gA2
>

1392 
ölöe
 
boﬁ
 
	g›î©‹
==(c⁄° 
c⁄cuºít_hash_m≠
<
Key
, 
	gT
, 
	gHashCom∑ª
, 
	gA1
> &
	ga
, c⁄° 
	gc⁄cuºít_hash_m≠
<
	gKey
, T, HashCom∑ª, 
	gA2
> &
	gb
) {

1393 if(
	ga
.
size
(Ë!
b
.size()Ë 
Ál£
;

1394 
ty≥«me
 
	gc⁄cuºít_hash_m≠
<
	gKey
, 
	gT
, 
	gHashCom∑ª
, 
	gA1
>::
c⁄°_ôî©‹
 
i
(
a
.
begö
()), 
i_íd
◊.
íd
());

1395 
ty≥«me
 
	gc⁄cuºít_hash_m≠
<
	gKey
, 
	gT
, 
	gHashCom∑ª
, 
	gA2
>::
c⁄°_ôî©‹
 
j
, 
j_íd
(
b
.
íd
());

1396 ; 
	gi
 !
i_íd
; ++i) {

1397 
	gj
 = 
b
.
equÆ_ønge
(
i
->
fú°
).first;

1398 if–
	gj
 =
j_íd
 || !(
i
->
£c⁄d
 =
j
->£c⁄dËË 
Ál£
;

1400  
	gåue
;

1403 
	gãm∂©e
<
ty≥«me
 
	gKey
,Åy≥«mê
	gT
,Åy≥«mê
	gHashCom∑ª
,Åy≥«mê
	gA1
,Åy≥«mê
	gA2
>

1404 
ölöe
 
boﬁ
 
	g›î©‹
!=(c⁄° 
c⁄cuºít_hash_m≠
<
Key
, 
	gT
, 
	gHashCom∑ª
, 
	gA1
> &
	ga
, c⁄° 
	gc⁄cuºít_hash_m≠
<
	gKey
, T, HashCom∑ª, 
	gA2
> &
	gb
)

1405 {  !(
	ga
 =
b
); }

1407 
	gãm∂©e
<
ty≥«me
 
	gKey
,Åy≥«mê
	gT
,Åy≥«mê
	gHashCom∑ª
,Åy≥«mê
	gA
>

1408 
ölöe
 
sw≠
(
c⁄cuºít_hash_m≠
<
Key
, 
T
, 
HashCom∑ª
, 
A
> &
a
, c⁄cuºít_hash_m≠<Key, T, HashCom∑ª, A> &
b
)

1409 { 
	ga
.
sw≠
–
b
 ); }

1411 #i‡
_MSC_VER
 && !
	$deföed
(
__INTEL_COMPILER
)

1412 #¥agm®
	$w¨nög
–
p›
 )

1415 
	}
}

	@viper/concurrentqueue-src/benchmarks/tbb/concurrent_lru_cache.h

21 #i‚de‡
__TBB_c⁄cuºít_Ãu_ˇche_H


22 
	#__TBB_c⁄cuºít_Ãu_ˇche_H


	)

24 #i‡! 
TBB_PREVIEW_CONCURRENT_LRU_CACHE


25 #îr‹ 
Së
 
TBB_PREVIEW_CONCURRENT_LRU_CACHE
 
to
 
ö˛ude
 
c⁄cuºít_Ãu_ˇche
.
h


28 
	~<m≠
>

29 
	~<li°
>

31 
	~"tbb_°ddef.h
"

32 
	~"©omic.h
"

33 
	~"öã∫Æ/_aggªg©‹_im∂.h
"

35 
«me•a˚
 
	gtbb
{

36 
«me•a˚
 
	göãrÁ˚6
 {

39 
	gãm∂©e
 <
ty≥«me
 
	gkey_ty≥
,Åy≥«mê
	gvÆue_ty≥
,Åy≥«mê
	gvÆue_fun˘‹_ty≥
 = 
vÆue_ty≥
 (*)(
key_ty≥
) >

40 ˛as†
	cc⁄cuºít_Ãu_ˇche
 : 
öã∫Æ
::
no_assign
{

41 
¥iv©e
:

42 
c⁄cuºít_Ãu_ˇche
 
	t£lf_ty≥
;

43 
vÆue_fun˘‹_ty≥
 
	tvÆue_fun˘i⁄_ty≥
;

44 
	g°d
::
	tsize_t
 
	tªf_cou¡î_ty≥
;

45 
	gm≠_vÆue_ty≥
;

46 
	g°d
::
	tm≠
<
	tkey_ty≥
, 
	tm≠_vÆue_ty≥
> 
	tm≠_°‹age_ty≥
;

47 
	g°d
::
	tli°
<
	tty≥«me
 
	tm≠_°‹age_ty≥
::
	tôî©‹
> 
	tÃu_li°_ty≥
;

48 
	sm≠_vÆue_ty≥
 {

49 
vÆue_ty≥
 
	gmy_vÆue
;

50 
ªf_cou¡î_ty≥
 
	gmy_ªf_cou¡î
;

51 
ty≥«me
 
	gÃu_li°_ty≥
::
ôî©‹
 
my_Ãu_li°_ôî©‹
;

52 
boﬁ
 
	gmy_is_ªady
;

54 
m≠_vÆue_ty≥
 (
vÆue_ty≥
 c⁄°& 
a_vÆue
, 
ªf_cou¡î_ty≥
 
a_ªf_cou¡î
, 
ty≥«me
 
Ãu_li°_ty≥
::
ôî©‹
 
a_Ãu_li°_ôî©‹
, 
boﬁ
 
a_is_ªady
)

55 : 
my_vÆue
(
a_vÆue
), 
my_ªf_cou¡î
(
a_ªf_cou¡î
), 
my_Ãu_li°_ôî©‹
 (
a_Ãu_li°_ôî©‹
), 
my_is_ªady
(
a_is_ªady
)

59 
˛ass
 
	gh™dÀ_obje˘
;

61 
	gaggªg©‹_›î©i⁄
;

62 
aggªg©‹_›î©i⁄
 
	taggªg©ed_›î©i⁄_ty≥
;

63 
	gtbb
::
	töã∫Æ
::
	taggªg©ög_fun˘‹
<
	t£lf_ty≥
,
	taggªg©ed_›î©i⁄_ty≥
> 
	taggªg©‹_fun˘i⁄_ty≥
;

64 
‰õnd
 
˛ass
 
	gtbb
::
öã∫Æ
::
aggªg©ög_fun˘‹
<
£lf_ty≥
,
	gaggªg©ed_›î©i⁄_ty≥
>;

65 
	gtbb
::
	töã∫Æ
::
	taggªg©‹
<
	taggªg©‹_fun˘i⁄_ty≥
, 
	taggªg©ed_›î©i⁄_ty≥
> 
	taggªg©‹_ty≥
;

67 
	g¥iv©e
:

68 
vÆue_fun˘i⁄_ty≥
 
my_vÆue_fun˘i⁄
;

69 
	g°d
::
size_t
 c⁄° 
my_numbî_of_Ãu_hi°‹y_ôems
;

70 
m≠_°‹age_ty≥
 
	gmy_m≠_°‹age
;

71 
Ãu_li°_ty≥
 
	gmy_Ãu_li°
;

72 
aggªg©‹_ty≥
 
	gmy_aggªg©‹
;

74 
	gpublic
:

75 
h™dÀ_obje˘
 
	th™dÀ
;

77 
	gpublic
:

78 
c⁄cuºít_Ãu_ˇche
(
vÆue_fun˘i⁄_ty≥
 
f
, 
°d
::
size_t
 
numbî_of_Ãu_hi°‹y_ôems
)

79 : 
my_vÆue_fun˘i⁄
(
f
),
my_numbî_of_Ãu_hi°‹y_ôems
(
numbî_of_Ãu_hi°‹y_ôems
)

81 
	gmy_aggªg©‹
.
öôülize_h™dÀr
(
aggªg©‹_fun˘i⁄_ty≥
(
this
));

84 
h™dÀ_obje˘
 
	g›î©‹
[](
key_ty≥
 
	gk
){

85 
ªåõve_aggªg©‹_›î©i⁄
 
›
(
k
);

86 
	gmy_aggªg©‹
.
execuã
(&
›
);

87 i‡(
	g›
.
is_√w_vÆue_√eded
()){

88 
	g›
.
ªsu…
().
	g£c⁄d
.
	gmy_vÆue
 = 
my_vÆue_fun˘i⁄
(
k
);

89 
__TBB_°‹e_wôh_ªÀa£
(
›
.
ªsu…
().
£c⁄d
.
my_is_ªady
, 
åue
);

91 
	gtbb
::
öã∫Æ
::
•ö_waô_whûe_eq
(
›
.
ªsu…
().
£c⁄d
.
my_is_ªady
,
Ál£
);

93  
h™dÀ_obje˘
(*
this
,
›
.
ªsu…
());

95 
	g¥iv©e
:

96 
sig«l_íd_of_ußge
(
ty≥«me
 
m≠_°‹age_ty≥
::
ª„ªn˚
 
vÆue_ªf
){

97 
sig«l_íd_of_ußge_aggªg©‹_›î©i⁄
 
›
(
vÆue_ªf
);

98 
	gmy_aggªg©‹
.
execuã
(&
›
);

101 
	g¥iv©e
:

102 
h™dÀ_move_t
:
no_assign
{

103 
c⁄cuºít_Ãu_ˇche
 & 
my_ˇche_ªf
;

104 
ty≥«me
 
	gm≠_°‹age_ty≥
::
ª„ªn˚
 
my_m≠_ªc‹d_ªf
;

105 
h™dÀ_move_t
(
c⁄cuºít_Ãu_ˇche
 & 
ˇche_ªf
, 
ty≥«me
 
m≠_°‹age_ty≥
::
ª„ªn˚
 
vÆue_ªf
):
my_ˇche_ªf
(ˇche_ªf),
my_m≠_ªc‹d_ªf
(value_ref) {};

107 ˛as†
	ch™dÀ_obje˘
 {

108 
c⁄cuºít_Ãu_ˇche
 * 
	gmy_ˇche_poöãr
;

109 
ty≥«me
 
	gm≠_°‹age_ty≥
::
ª„ªn˚
 
my_m≠_ªc‹d_ªf
;

110 
	gpublic
:

111 
h™dÀ_obje˘
(
c⁄cuºít_Ãu_ˇche
 & 
ˇche_ªf
, 
ty≥«me
 
m≠_°‹age_ty≥
::
ª„ªn˚
 
vÆue_ªf
):
my_ˇche_poöãr
(&ˇche_ªf), 
my_m≠_ªc‹d_ªf
(value_ref) {}

112 
h™dÀ_obje˘
(
h™dÀ_move_t
 
m
):
my_ˇche_poöãr
(&m.
my_ˇche_ªf
), 
my_m≠_ªc‹d_ªf
(m.my_map_record_ref){}

113 
›î©‹
 
h™dÀ_move_t
(){  
move
(*
this
);}

114 
	gvÆue_ty≥
& 
vÆue
(){

115 
__TBB_ASSERT
(
my_ˇche_poöãr
,"get value from moved from object?");

116  
	gmy_m≠_ªc‹d_ªf
.
	g£c⁄d
.
	gmy_vÆue
;

118 ~
h™dÀ_obje˘
(){

119 i‡(
	gmy_ˇche_poöãr
){

120 
	gmy_ˇche_poöãr
->
sig«l_íd_of_ußge
(
my_m≠_ªc‹d_ªf
);

123 
	g¥iv©e
:

124 
‰õnd
 
h™dÀ_move_t
 
move
(
h™dÀ_obje˘
& 
h
){

125  
h™dÀ_obje˘
::
move
(
h
);

127 
h™dÀ_move_t
 
move
(
h™dÀ_obje˘
& 
h
){

128 
__TBB_ASSERT
(
h
.
my_ˇche_poöãr
,"move fromÅhe same objectÅwice ?");

129 
c⁄cuºít_Ãu_ˇche
 * 
	gˇche_poöãr
 = 
NULL
;

130 
	g°d
::
sw≠
(
ˇche_poöãr
,
h
.
my_ˇche_poöãr
);

131  
h™dÀ_move_t
(*
ˇche_poöãr
,
h
.
my_m≠_ªc‹d_ªf
);

133 
	g¥iv©e
:

134 
›î©‹
=(
h™dÀ_obje˘
&);

135 #i‡
__SUNPRO_CC


138 
	gpublic
:

140 
h™dÀ_obje˘
(handle_object &);

142 
	g¥iv©e
:

144 
aggªg©‹_›î©i⁄
 : 
tbb
::
öã∫Æ
::
aggªg©ed_›î©i⁄
<aggregator_operation>{

145 
	ee_›_ty≥
 {
›_ªtive
, 
	g›_sig«l_íd_of_ußge
};

148 
e_›_ty≥
 
	gmy_›î©i⁄_ty≥
;

149 
aggªg©‹_›î©i⁄
(
e_›_ty≥
 
›î©i⁄_ty≥
): 
my_›î©i⁄_ty≥
(operation_type) {}

150 
ˇ°_™d_h™dÀ
(
£lf_ty≥
& 
c⁄èöî
 ){

151 i‡(
my_›î©i⁄_ty≥
==
›_ªtive
){

152 
°©ic_ˇ°
<
ªåõve_aggªg©‹_›î©i⁄
*>(
this
)->
h™dÀ
(
c⁄èöî
);

154 
	g°©ic_ˇ°
<
	gsig«l_íd_of_ußge_aggªg©‹_›î©i⁄
*>(
	gthis
)->
h™dÀ
(
c⁄èöî
);

158 
	gªåõve_aggªg©‹_›î©i⁄
 : 
aggªg©‹_›î©i⁄
, 
¥iv©e
 
	göã∫Æ
::
no_assign
 {

159 
key_ty≥
 
my_key
;

160 
ty≥«me
 
	gm≠_°‹age_ty≥
::
poöãr
 
my_ªsu…_m≠_ªc‹d_poöãr
;

161 
boﬁ
 
	gmy_is_√w_vÆue_√eded
;

162 
ªåõve_aggªg©‹_›î©i⁄
(
key_ty≥
 
key
):
aggªg©‹_›î©i⁄
◊ggªg©‹_›î©i⁄::
›_ªtive
),
my_key
(key),
my_is_√w_vÆue_√eded
(
Ál£
){}

163 
h™dÀ
(
£lf_ty≥
& 
c⁄èöî
 ){

164 
	gmy_ªsu…_m≠_ªc‹d_poöãr
 = & 
c⁄èöî
.
ªåõve_£rül
(
my_key
,
my_is_√w_vÆue_√eded
);

166 
ty≥«me
 
	gm≠_°‹age_ty≥
::
ª„ªn˚
 
ªsu…
(){  * 
my_ªsu…_m≠_ªc‹d_poöãr
; }

167 
boﬁ
 
is_√w_vÆue_√eded
(){ 
	gmy_is_√w_vÆue_√eded
;}

169 
	gsig«l_íd_of_ußge_aggªg©‹_›î©i⁄
 : 
aggªg©‹_›î©i⁄
, 
¥iv©e
 
	göã∫Æ
::
no_assign
 {

170 
ty≥«me
 
m≠_°‹age_ty≥
::
ª„ªn˚
 
my_m≠_ªc‹d_ªf
;

171 
sig«l_íd_of_ußge_aggªg©‹_›î©i⁄
(
ty≥«me
 
m≠_°‹age_ty≥
::
ª„ªn˚
 
m≠_ªc‹d_ªf
):
aggªg©‹_›î©i⁄
◊ggªg©‹_›î©i⁄::
›_sig«l_íd_of_ußge
),
my_m≠_ªc‹d_ªf
(map_record_ref){}

172 
h™dÀ
(
£lf_ty≥
& 
c⁄èöî
 ){

173 
	gc⁄èöî
.
sig«l_íd_of_ußge_£rül
(
my_m≠_ªc‹d_ªf
);

177 
	g¥iv©e
:

178 
h™dÀ_›î©i⁄s
(
aggªg©‹_›î©i⁄
* 
›_li°
){

179 
›_li°
){

180 
›_li°
->
ˇ°_™d_h™dÀ
(*
this
);

181 
aggªg©‹_›î©i⁄
* 
	gtmp
 = 
›_li°
;

182 
	g›_li°
=
›_li°
->
√xt
;

183 
	gtbb
::
öã∫Æ
::
ôt_°‹e_w‹d_wôh_ªÀa£
(
tmp
->
°©us
, 
uöçå_t
(1));

187 
	g¥iv©e
:

188 
ty≥«me
 
m≠_°‹age_ty≥
::
ª„ªn˚
 
ªåõve_£rül
(
key_ty≥
 
k
, 
boﬁ
& 
is_√w_vÆue_√eded
){

189 
ty≥«me
 
	gm≠_°‹age_ty≥
::
ôî©‹
 
ô
 = 
my_m≠_°‹age
.
föd
(
k
);

190 i‡(
	gô
 =
my_m≠_°‹age
.
íd
()){

191 
ô
 = 
my_m≠_°‹age
.
ö£π
(ô,
°d
::
make_∑ú
(
k
,
m≠_vÆue_ty≥
(
vÆue_ty≥
(),0,
my_Ãu_li°
.
íd
(),
Ál£
)));

192 
	gis_√w_vÆue_√eded
 = 
åue
;

194 
ty≥«me
 
	gÃu_li°_ty≥
::
ôî©‹
 
li°_ô
 = 
ô
->
£c⁄d
.
my_Ãu_li°_ôî©‹
;

195 i‡(
	gli°_ô
!=
my_Ãu_li°
.
íd
()) {

196 
__TBB_ASSERT
(!
ô
->
£c⁄d
.
my_ªf_cou¡î
,"itemÅo beÉvicted shouldÇot haveáÜiveÑeferences");

199 
	gmy_Ãu_li°
.
îa£
(
li°_ô
);

200 
	gô
->
	g£c⁄d
.
	gmy_Ãu_li°_ôî©‹

my_Ãu_li°
.
íd
();

203 ++(
	gô
->
	g£c⁄d
.
	gmy_ªf_cou¡î
);

204  *
	gô
;

207 
sig«l_íd_of_ußge_£rül
(
ty≥«me
 
m≠_°‹age_ty≥
::
ª„ªn˚
 
m≠_ªc‹d_ªf
){

208 
ty≥«me
 
m≠_°‹age_ty≥
::
ôî©‹
 
ô
 = 
my_m≠_°‹age
.
föd
(
m≠_ªc‹d_ªf
.
fú°
);

209 
__TBB_ASSERT
(
ô
!=
my_m≠_°‹age
.
íd
(),"cache shouldÇotÑeturnÖast-end iteratorsÅo outer world");

210 
__TBB_ASSERT
(&(*
ô
Ë=&
m≠_ªc‹d_ªf
,"danglingÑeference has beenÑeturnedÅo outside world? dataÑace ?");

211 
__TBB_ASSERT
–
my_Ãu_li°
.
íd
()=
°d
::
föd
(my_Ãu_li°.
begö
(),my_Ãu_li°.íd(),
ô
),

213 i‡(! --(
	gô
->
	g£c⁄d
.
	gmy_ªf_cou¡î
)){

215 i‡(
	gmy_Ãu_li°
.
size
()>=
my_numbî_of_Ãu_hi°‹y_ôems
){

217 
size_t
 
numbî_of_ñemíts_to_evi˘
 = 1 + 
my_Ãu_li°
.
size
(Ë- 
my_numbî_of_Ãu_hi°‹y_ôems
;

218 
size_t
 
	gi
=0; i<
	gnumbî_of_ñemíts_to_evi˘
; ++i){

219 
ty≥«me
 
	gm≠_°‹age_ty≥
::
ôî©‹
 
ô_to_evi˘
 = 
my_Ãu_li°
.
back
();

220 
__TBB_ASSERT
(!
ô_to_evi˘
->
£c⁄d
.
my_ªf_cou¡î
,"itemÅo beÉvicted shouldÇot haveáÜiveÑeferences");

221 
	gmy_Ãu_li°
.
p›_back
();

222 
	gmy_m≠_°‹age
.
îa£
(
ô_to_evi˘
);

225 
	gmy_Ãu_li°
.
push_‰⁄t
(
ô
);

226 
	gô
->
	g£c⁄d
.
	gmy_Ãu_li°_ôî©‹
 = 
my_Ãu_li°
.
begö
();

232 
usög
 
	göãrÁ˚6
::
c⁄cuºít_Ãu_ˇche
;

	@viper/concurrentqueue-src/benchmarks/tbb/concurrent_monitor.cpp

21 
	~"c⁄cuºít_m⁄ô‹.h
"

23 
«me•a˚
 
	gtbb
 {

24 
«me•a˚
 
	göã∫Æ
 {

26 
	gc⁄cuºít_m⁄ô‹
::
thªad_c⁄ãxt
::
öô
() {

27 
√w
 (
£ma
.
begö
()Ë
bö¨y_£m≠h‹e
;

28 
	gªady
 = 
åue
;

31 
	gc⁄cuºít_m⁄ô‹
::~
c⁄cuºít_m⁄ô‹
() {

32 
ab‹t_Æl
();

33 
__TBB_ASSERT
–
waô£t_ec
.
em±y
(), "waitsetÇotÉmpty?" );

36 
	gc⁄cuºít_m⁄ô‹
::
¥ï¨e_waô
–
thªad_c⁄ãxt
& 
thr
, 
uöçå_t
 
˘x
 ) {

37 if–!
	gthr
.
	gªady
 )

38 
	gthr
.
öô
();

40 if–
	gthr
.
	g•urious
 ) {

41 
	gthr
.
	g•urious
 = 
Ál£
;

42 
	gthr
.
£m≠h‹e
().
P
();

44 
	gthr
.
	gc⁄ãxt
 = 
˘x
;

45 
	gthr
.
	gö_waô£t
 = 
åue
;

47 
	gtbb
::
•ö_muãx
::
sc›ed_lock
 
l
–
muãx_ec
 );

48 
__TBB_°‹e_ªœxed
–
thr
.
ïoch
, 
__TBB_lﬂd_ªœxed
(epoch) );

49 
	gwaô£t_ec
.
add
–(
waô£t_t
::
node_t
*)&
thr
 );

51 
©omic_„n˚
();

54 
	gc⁄cuºít_m⁄ô‹
::
ˇn˚l_waô
–
thªad_c⁄ãxt
& 
thr
 ) {

56 
thr
.
•urious
 = 
åue
;

58 
boﬁ
 
	gth_ö_waô£t
 = 
thr
.
ö_waô£t
;

59 if–
	gth_ö_waô£t
 ) {

60 
	gtbb
::
•ö_muãx
::
sc›ed_lock
 
l
–
muãx_ec
 );

61 i‡(
	gthr
.
	gö_waô£t
) {

64 
	gthr
.
	gö_waô£t
 = 
Ál£
;

65 
	gthr
.
	g•urious
 = 
Ál£
;

66 
	gwaô£t_ec
.
ªmove
–(
waô£t_t
::
node_t
&)
thr
 );

71 
	gc⁄cuºít_m⁄ô‹
::
nŸify_⁄e_ªœxed
() {

72 if–
waô£t_ec
.
em±y
() )

74 
waô£t_node_t
* 
	gn
;

75 c⁄° 
waô£t_node_t
* 
	gíd
 = 
waô£t_ec
.
íd
();

77 
	gtbb
::
•ö_muãx
::
sc›ed_lock
 
l
–
muãx_ec
 );

78 
__TBB_°‹e_ªœxed
–
ïoch
, 
__TBB_lﬂd_ªœxed
(epoch) + 1 );

79 
	gn
 = 
waô£t_ec
.
‰⁄t
();

80 if–
	gn
!=
íd
 ) {

81 
waô£t_ec
.
ªmove
–*
n
 );

82 
to_thªad_c⁄ãxt
(
n
)->
	gö_waô£t
 = 
Ál£
;

85 if–
	gn
!=
íd
 )

86 
to_thªad_c⁄ãxt
(
n
)->
£m≠h‹e
().
V
();

89 
	gc⁄cuºít_m⁄ô‹
::
nŸify_Æl_ªœxed
() {

90 if–
waô£t_ec
.
em±y
() )

92 
dŒi°_t
 
	gãmp
;

93 c⁄° 
waô£t_node_t
* 
	gíd
;

95 
	gtbb
::
•ö_muãx
::
sc›ed_lock
 
l
–
muãx_ec
 );

96 
__TBB_°‹e_ªœxed
–
ïoch
, 
__TBB_lﬂd_ªœxed
(epoch) + 1 );

97 
	gwaô£t_ec
.
Êush_to
–
ãmp
 );

98 
	gíd
 = 
ãmp
.
íd
();

99  
waô£t_node_t
* 
	gn
=
ãmp
.
‰⁄t
();Ç!=
íd
;Ç=
n
->
√xt
 )

100 
to_thªad_c⁄ãxt
(
n
)->
ö_waô£t
 = 
Ál£
;

102 
waô£t_node_t
* 
	gnxt
;

103  
waô£t_node_t
* 
	gn
=
ãmp
.
‰⁄t
();Ç!=
íd
;Ç=
nxt
 ) {

104 
nxt
 = 
n
->
√xt
;

105 
to_thªad_c⁄ãxt
(
n
)->
£m≠h‹e
().
V
();

107 #i‡
TBB_USE_ASSERT


108 
	gãmp
.
˛ór
();

112 
	gc⁄cuºít_m⁄ô‹
::
ab‹t_Æl_ªœxed
() {

113 if–
waô£t_ec
.
em±y
() )

115 
dŒi°_t
 
	gãmp
;

116 c⁄° 
waô£t_node_t
* 
	gíd
;

118 
	gtbb
::
•ö_muãx
::
sc›ed_lock
 
l
–
muãx_ec
 );

119 
__TBB_°‹e_ªœxed
–
ïoch
, 
__TBB_lﬂd_ªœxed
(epoch) + 1 );

120 
	gwaô£t_ec
.
Êush_to
–
ãmp
 );

121 
	gíd
 = 
ãmp
.
íd
();

122  
waô£t_node_t
* 
	gn
=
ãmp
.
‰⁄t
();Ç!=
íd
;Ç=
n
->
√xt
 )

123 
to_thªad_c⁄ãxt
(
n
)->
ö_waô£t
 = 
Ál£
;

125 
waô£t_node_t
* 
	gnxt
;

126  
waô£t_node_t
* 
	gn
=
ãmp
.
‰⁄t
();Ç!=
íd
;Ç=
nxt
 ) {

127 
nxt
 = 
n
->
√xt
;

128 
to_thªad_c⁄ãxt
(
n
)->
	gab‹ãd
 = 
åue
;

129 
to_thªad_c⁄ãxt
(
n
)->
£m≠h‹e
().
V
();

131 #i‡
TBB_USE_ASSERT


132 
	gãmp
.
˛ór
();

	@viper/concurrentqueue-src/benchmarks/tbb/concurrent_monitor.h

21 #i‚de‡
__TBB_c⁄cuºít_m⁄ô‹_H


22 
	#__TBB_c⁄cuºít_m⁄ô‹_H


	)

24 
	~"tbb/tbb_°ddef.h
"

25 
	~"tbb/©omic.h
"

26 
	~"tbb/•ö_muãx.h
"

27 
	~"tbb/tbb_ex˚±i⁄.h
"

28 
	~"tbb/Æig√d_•a˚.h
"

30 
	~"£m≠h‹e.h
"

32 
«me•a˚
 
	gtbb
 {

33 
«me•a˚
 
	göã∫Æ
 {

37 ˛as†
	ccúcuœr_doubly_löked_li°_wôh_£¡öñ
 : 
no_c›y
 {

38 
public
:

39 
	snode_t
 {

40 
node_t
* 
√xt
;

41 
node_t
* 
	g¥ev
;

42 
ex∂icô
 
node_t
(Ë: 
√xt
(“ode_t*)(
uöçå_t
)0xcdcdcdcd), 
¥ev
((node_t*)(uintptr_t)0xcdcdcdcd) {}

46 
cúcuœr_doubly_löked_li°_wôh_£¡öñ
(Ë{
˛ór
();}

48 ~
cúcuœr_doubly_löked_li°_wôh_£¡öñ
(Ë{
__TBB_ASSERT
–
hód
.
√xt
==&hód && hód.
¥ev
==&head, "theÜist isÇotÉmpty" );}

50 
ölöe
 
size_t
 
size
(Ëc⁄° { 
	gcou¡
;}

51 
ölöe
 
boﬁ
 
em±y
(Ëc⁄° { 
size
()==0;}

52 
ölöe
 
node_t
* 
‰⁄t
(Ëc⁄° { 
	ghód
.
	g√xt
;}

53 
ölöe
 
node_t
* 
œ°
(Ëc⁄° { 
	ghód
.
	g¥ev
;}

54 
ölöe
 
node_t
* 
begö
(Ëc⁄° { 
‰⁄t
();}

55 
ölöe
 c⁄° 
node_t
* 
íd
(Ëc⁄° { &
	ghód
;}

58 
ölöe
 
add
–
node_t
* 
n
 ) {

59 
__TBB_°‹e_ªœxed
(
cou¡
, 
__TBB_lﬂd_ªœxed
(count) + 1);

60 
	gn
->
	g¥ev
 = 
hód
.
¥ev
;

61 
	gn
->
	g√xt
 = &
hód
;

62 
	ghód
.
	g¥ev
->
	g√xt
 = 
n
;

63 
	ghód
.
	g¥ev
 = 
n
;

67 
ölöe
 
ªmove
–
node_t
& 
n
 ) {

68 
__TBB_°‹e_ªœxed
(
cou¡
, 
__TBB_lﬂd_ªœxed
(count) - 1);

69 
	gn
.
	g¥ev
->
	g√xt
 = 
n
.
√xt
;

70 
	gn
.
	g√xt
->
	g¥ev
 = 
n
.
¥ev
;

74 
ölöe
 
Êush_to
–
cúcuœr_doubly_löked_li°_wôh_£¡öñ
& 
l°
 ) {

75 if–c⁄° 
size_t
 
	gl_cou¡
 = 
__TBB_lﬂd_ªœxed
(
cou¡
) ) {

76 
__TBB_°‹e_ªœxed
(
l°
.
cou¡
, 
l_cou¡
);

77 
	gl°
.
	ghód
.
	g√xt
 = 
hód
.
√xt
;

78 
	gl°
.
	ghód
.
	g¥ev
 = 
hód
.
¥ev
;

79 
	ghód
.
	g√xt
->
	g¥ev
 = &
l°
.
hód
;

80 
	ghód
.
	g¥ev
->
	g√xt
 = &
l°
.
hód
;

81 
˛ór
();

85 
˛ór
(Ë{
	ghód
.
	g√xt
 = 
hód
.
¥ev
 = &hód; 
__TBB_°‹e_ªœxed
(
cou¡
, 0);}

86 
	g¥iv©e
:

87 
__TBB_©omic
 
size_t
 
cou¡
;

88 
node_t
 
	ghód
;

91 
cúcuœr_doubly_löked_li°_wôh_£¡öñ
 
	twaô£t_t
;

92 
cúcuœr_doubly_löked_li°_wôh_£¡öñ
 
	tdŒi°_t
;

93 
	gcúcuœr_doubly_löked_li°_wôh_£¡öñ
::
	tnode_t
 
	twaô£t_node_t
;

97 ˛as†
	cc⁄cuºít_m⁄ô‹
 : 
no_c›y
 {

98 
public
:

100 
˛ass
 
thªad_c⁄ãxt
 : 
waô£t_node_t
, 
	gno_c›y
 {

101 
‰õnd
 
˛ass
 
	gc⁄cuºít_m⁄ô‹
;

102 
	gpublic
:

103 
thªad_c⁄ãxt
(Ë: 
•urious
(
Ál£
), 
ab‹ãd
(Ál£), 
ªady
(Ál£), 
c⁄ãxt
(0) {

104 
	gïoch
 = 0;

105 
	gö_waô£t
 = 
Ál£
;

107 ~
thªad_c⁄ãxt
() {

108 i‡(
	gªady
) {

109 if–
	g•urious
 ) 
£m≠h‹e
().
P
();

110 
£m≠h‹e
().~
bö¨y_£m≠h‹e
();

113 
	gbö¨y_£m≠h‹e
& 
£m≠h‹e
(Ë{  *
	g£ma
.
begö
(); }

114 
	g¥iv©e
:

118 
__TBB_NOINLINE
–
öô
() );

119 
	gtbb
::
Æig√d_•a˚
<
bö¨y_£m≠h‹e
> 
£ma
;

120 
__TBB_©omic
 
	gïoch
;

121 
	gtbb
::
©omic
<
boﬁ
> 
ö_waô£t
;

122 
boﬁ
 
	g•urious
;

123 
boﬁ
 
	gab‹ãd
;

124 
boﬁ
 
	gªady
;

125 
uöçå_t
 
	gc⁄ãxt
;

129 
c⁄cuºít_m⁄ô‹
(Ë{
__TBB_°‹e_ªœxed
(
ïoch
, 0);}

132 ~
c⁄cuºít_m⁄ô‹
() ;

135 
¥ï¨e_waô
–
thªad_c⁄ãxt
& 
thr
, 
uöçå_t
 
˘x
 = 0 );

139 
ölöe
 
boﬁ
 
commô_waô
–
thªad_c⁄ãxt
& 
thr
 ) {

140 c⁄° 
boﬁ
 
	gdo_ô
 = 
thr
.
ïoch
 =
__TBB_lﬂd_ªœxed
(epoch);

142 if–
	gdo_ô
 ) {

143 
__TBB_ASSERT
–
thr
.
ªady
, "use of commit_wait() withoutÖriorÖrepare_wait()");

144 
	gthr
.
£m≠h‹e
().
P
();

145 
__TBB_ASSERT
–!
thr
.
ö_waô£t
, "still inÅhe queue?" );

146 if–
	gthr
.
	gab‹ãd
 )

147 
throw_ex˚±i⁄
–
eid_u£r_ab‹t
 );

149 
ˇn˚l_waô
–
thr
 );

151  
	gdo_ô
;

154 
ˇn˚l_waô
–
thªad_c⁄ãxt
& 
thr
 );

157 
	gãm∂©e
<
ty≥«me
 
	gWaôU¡û
,Åy≥«mê
	gC⁄ãxt
>

158 
waô
–
WaôU¡û
 
u¡û
, 
C⁄ãxt
 
⁄
 );

161 
nŸify_⁄e
(Ë{
©omic_„n˚
(); 
nŸify_⁄e_ªœxed
();}

164 
nŸify_⁄e_ªœxed
();

167 
nŸify_Æl
(Ë{
©omic_„n˚
(); 
nŸify_Æl_ªœxed
();}

170 
nŸify_Æl_ªœxed
();

173 
	gãm∂©e
<
ty≥«me
 
	gP
> 
nŸify
–c⁄° 
P
& 
¥ediˇã
 ) {
©omic_„n˚
(); 
nŸify_ªœxed
(Öredicate );}

176 
	gãm∂©e
<
ty≥«me
 
	gP
> 
nŸify_ªœxed
–c⁄° 
P
& 
¥ediˇã
 );

179 
ab‹t_Æl
(Ë{
©omic_„n˚
(); 
ab‹t_Æl_ªœxed
(); }

182 
ab‹t_Æl_ªœxed
();

184 
	g¥iv©e
:

185 
tbb
::
•ö_muãx
 
muãx_ec
;

186 
waô£t_t
 
	gwaô£t_ec
;

187 
__TBB_©omic
 
	gïoch
;

188 
thªad_c⁄ãxt
* 
to_thªad_c⁄ãxt
–
waô£t_node_t
* 
n
 ) {  
	g°©ic_ˇ°
<
	gthªad_c⁄ãxt
*>(
	gn
); }

191 
	gãm∂©e
<
ty≥«me
 
	gWaôU¡û
,Åy≥«mê
	gC⁄ãxt
>

192 
	gc⁄cuºít_m⁄ô‹
::
waô
–
WaôU¡û
 
u¡û
, 
C⁄ãxt
 
⁄
 )

194 
boﬁ
 
	g¶ït
 = 
Ál£
;

195 
thªad_c⁄ãxt
 
	gthr_˘x
;

196 
¥ï¨e_waô
–
thr_˘x
, 
⁄
() );

197  !
u¡û
() ) {

198 if–(
	g¶ït
 = 
commô_waô
–
thr_˘x
 ) )==
åue
 )

199 if–
u¡û
() ) ;

200 
	g¶ït
 = 
Ál£
;

201 
¥ï¨e_waô
–
thr_˘x
, 
⁄
() );

203 if–!
	g¶ït
 )

204 
ˇn˚l_waô
–
thr_˘x
 );

207 
	gãm∂©e
<
ty≥«me
 
	gP
>

208 
	gc⁄cuºít_m⁄ô‹
::
nŸify_ªœxed
–c⁄° 
P
& 
¥ediˇã
 ) {

209 if–
waô£t_ec
.
em±y
() )

211 
dŒi°_t
 
	gãmp
;

212 
waô£t_node_t
* 
	gnxt
;

213 c⁄° 
waô£t_node_t
* 
	gíd
 = 
waô£t_ec
.
íd
();

215 
	gtbb
::
•ö_muãx
::
sc›ed_lock
 
l
–
muãx_ec
 );

216 
__TBB_°‹e_ªœxed
(
ïoch
, 
__TBB_lﬂd_ªœxed
(epoch) + 1);

217  
waô£t_node_t
* 
	gn
=
waô£t_ec
.
œ°
();Ç!=
íd
;Ç=
nxt
 ) {

218 
nxt
 = 
n
->
¥ev
;

219 
thªad_c⁄ãxt
* 
	gthr
 = 
to_thªad_c⁄ãxt
–
n
 );

220 if–
¥ediˇã
–
thr
->
c⁄ãxt
 ) ) {

221 
	gwaô£t_ec
.
ªmove
–*
n
 );

222 
	gthr
->
	gö_waô£t
 = 
Ál£
;

223 
	gãmp
.
add
–
n
 );

228 
	gíd
 = 
ãmp
.
íd
();

229  
waô£t_node_t
* 
	gn
=
ãmp
.
‰⁄t
();Ç!=
íd
;Ç=
nxt
 ) {

230 
nxt
 = 
n
->
√xt
;

231 
to_thªad_c⁄ãxt
(
n
)->
£m≠h‹e
().
V
();

233 #i‡
TBB_USE_ASSERT


234 
	gãmp
.
˛ór
();

	@viper/concurrentqueue-src/benchmarks/tbb/concurrent_priority_queue.h

21 #i‚de‡
__TBB_c⁄cuºít_¥i‹ôy_queue_H


22 
	#__TBB_c⁄cuºít_¥i‹ôy_queue_H


	)

24 
	~"©omic.h
"

25 
	~"ˇche_Æig√d_Æloˇt‹.h
"

26 
	~"tbb_ex˚±i⁄.h
"

27 
	~"tbb_°ddef.h
"

28 
	~"tbb_¥ofûög.h
"

29 
	~"öã∫Æ/_aggªg©‹_im∂.h
"

30 
	~<ve˘‹
>

31 
	~<ôî©‹
>

32 
	~<fun˘i⁄Æ
>

34 #i‡
__TBB_INITIALIZER_LISTS_PRESENT


35 
	~<öôülizî_li°
>

38 
«me•a˚
 
	gtbb
 {

39 
«me•a˚
 
	göãrÁ˚5
 {

41 
usög
 
«me•a˚
 
	gtbb
::
öã∫Æ
;

44 
	gãm∂©e
 <
ty≥«me
 
	gT
,Åy≥«mê
	gCom∑ª
=
°d
::
Àss
<
T
>,Åy≥«mê
	gA
=
ˇche_Æig√d_Æloˇt‹
<T> >

45 ˛as†
	cc⁄cuºít_¥i‹ôy_queue
 {

46 
public
:

48 
T
 
	tvÆue_ty≥
;

51 
	gT
& 
	tª„ªn˚
;

54 c⁄° 
	tT
& 
	tc⁄°_ª„ªn˚
;

57 
size_t
 
	tsize_ty≥
;

60 
±rdiff_t
 
	tdif„ªn˚_ty≥
;

63 
A
 
	tÆloˇt‹_ty≥
;

66 
ex∂icô
 
c⁄cuºít_¥i‹ôy_queue
(c⁄° 
Æloˇt‹_ty≥
& 
a
 =áŒoˇt‹_ty≥()Ë: 
m¨k
(0), 
my_size
(0), 
d©a
(a)

68 
	gmy_aggªg©‹
.
öôülize_h™dÀr
(
my_fun˘‹_t
(
this
));

72 
ex∂icô
 
c⁄cuºít_¥i‹ôy_queue
(
size_ty≥
 
öô_ˇ∑côy
, c⁄° 
Æloˇt‹_ty≥
& 
a
 =állocator_type()) :

73 
m¨k
(0), 
my_size
(0), 
d©a
(
a
)

75 
	gd©a
.
ª£rve
(
öô_ˇ∑côy
);

76 
	gmy_aggªg©‹
.
öôülize_h™dÀr
(
my_fun˘‹_t
(
this
));

80 
	gãm∂©e
<
ty≥«me
 
	gI≈utIãøt‹
>

81 
c⁄cuºít_¥i‹ôy_queue
(
I≈utIãøt‹
 
begö
, I≈utIãøt‹ 
íd
, c⁄° 
Æloˇt‹_ty≥
& 
a
 =állocator_type()) :

82 
m¨k
(0), 
d©a
(
begö
, 
íd
, 
a
)

84 
	gmy_aggªg©‹
.
öôülize_h™dÀr
(
my_fun˘‹_t
(
this
));

85 
hópify
();

86 
	gmy_size
 = 
d©a
.
size
();

89 #i‡
__TBB_INITIALIZER_LISTS_PRESENT


91 
c⁄cuºít_¥i‹ôy_queue
(
°d
::
öôülizî_li°
<
T
> 
öô_li°
, c⁄° 
Æloˇt‹_ty≥
 &
a
 =állocator_type()) :

92 
m¨k
(0),
d©a
(
öô_li°
.
begö
(), inô_li°.
íd
(), 
a
)

94 
	gmy_aggªg©‹
.
öôülize_h™dÀr
(
my_fun˘‹_t
(
this
));

95 
hópify
();

96 
	gmy_size
 = 
d©a
.
size
();

102 
ex∂icô
 
c⁄cuºít_¥i‹ôy_queue
(c⁄° c⁄cuºít_¥i‹ôy_queue& 
§c
Ë: 
m¨k
(src.mark),

103 
my_size
(
§c
.my_size), 
d©a
(§c.d©a.
begö
(), src.d©a.
íd
(), src.d©a.
gë_Æloˇt‹
())

105 
	gmy_aggªg©‹
.
öôülize_h™dÀr
(
my_fun˘‹_t
(
this
));

106 
hópify
();

111 
c⁄cuºít_¥i‹ôy_queue
(c⁄° c⁄cuºít_¥i‹ôy_queue& 
§c
, c⁄° 
Æloˇt‹_ty≥
& 
a
Ë: 
m¨k
(src.mark),

112 
my_size
(
§c
.my_size), 
d©a
(§c.d©a.
begö
(), src.d©a.
íd
(), 
a
)

114 
	gmy_aggªg©‹
.
öôülize_h™dÀr
(
my_fun˘‹_t
(
this
));

115 
hópify
();

120 
	gc⁄cuºít_¥i‹ôy_queue
& 
	g›î©‹
=(c⁄° 
c⁄cuºít_¥i‹ôy_queue
& 
§c
) {

121 i‡(
this
 !&
§c
) {

122 
ve˘‹_t
(
§c
.
d©a
.
begö
(), src.d©a.
íd
(), src.d©a.
gë_Æloˇt‹
()).
sw≠
(data);

123 
	gm¨k
 = 
§c
.
m¨k
;

124 
	gmy_size
 = 
§c
.
my_size
;

126  *
	gthis
;

129 #i‡
__TBB_CPP11_RVALUE_REF_PRESENT


132 
c⁄cuºít_¥i‹ôy_queue
(c⁄cuºít_¥i‹ôy_queue&& 
§c
Ë: 
m¨k
(src.mark),

133 
my_size
(
§c
.my_size), 
d©a
(
°d
::
move
(src.data))

135 
my_aggªg©‹
.
öôülize_h™dÀr
(
my_fun˘‹_t
(
this
));

140 
c⁄cuºít_¥i‹ôy_queue
(c⁄cuºít_¥i‹ôy_queue&& 
§c
, c⁄° 
Æloˇt‹_ty≥
& 
a
Ë: 
m¨k
(src.mark),

141 
my_size
(
§c
.my_size),

142 #i‡
__TBB_ALLOCATOR_TRAITS_PRESENT


143 
d©a
(
°d
::
move
(
§c
.d©a), 
a
)

147 
d©a
(
a
)

150 
	gmy_aggªg©‹
.
öôülize_h™dÀr
(
my_fun˘‹_t
(
this
));

151 #i‡!
__TBB_ALLOCATOR_TRAITS_PRESENT


152 i‡(
	ga
 !
§c
.
d©a
.
gë_Æloˇt‹
()){

153 
d©a
.
ª£rve
(
§c
.d©a.
size
());

154 
	gd©a
.
assign
(
°d
::
make_move_ôî©‹
(
§c
.
d©a
.
begö
()), std::make_move_ôî©‹(§c.d©a.
íd
()));

156 
	gd©a
 = 
°d
::
move
(
§c
.
d©a
);

163 
	gc⁄cuºít_¥i‹ôy_queue
& 
	g›î©‹
=–
c⁄cuºít_¥i‹ôy_queue
&& 
§c
) {

164 i‡(
this
 !&
§c
) {

165 
m¨k
 = 
§c
.mark;

166 
	gmy_size
 = 
§c
.
my_size
;

167 #i‡!
__TBB_ALLOCATOR_TRAITS_PRESENT


168 i‡(
	gd©a
.
gë_Æloˇt‹
(Ë!
§c
.
d©a
.get_allocator()){

169 
ve˘‹_t
(
°d
::
make_move_ôî©‹
(
§c
.
d©a
.
begö
()), std::make_move_ôî©‹(§c.d©a.
íd
()), d©a.
gë_Æloˇt‹
()).
sw≠
(data);

173 
	gd©a
 = 
°d
::
move
(
§c
.
d©a
);

176  *
	gthis
;

181 
	gãm∂©e
<
ty≥«me
 
	gI≈utIãøt‹
>

182 
assign
(
I≈utIãøt‹
 
begö
, I≈utIãøt‹ 
íd
) {

183 
ve˘‹_t
(
begö
, 
íd
, 
d©a
.
gë_Æloˇt‹
()).
sw≠
(data);

184 
	gm¨k
 = 0;

185 
	gmy_size
 = 
d©a
.
size
();

186 
hópify
();

189 #i‡
__TBB_INITIALIZER_LISTS_PRESENT


191 
assign
(
°d
::
öôülizî_li°
<
T
> 
û
Ë{ 
this
->assign(û.
begö
(), il.
íd
()); }

194 
	gc⁄cuºít_¥i‹ôy_queue
& 
	g›î©‹
=(
°d
::
öôülizî_li°
<
T
> 
û
) {

195 
this
->
assign
(
û
.
begö
(), il.
íd
());

196  *
	gthis
;

203 
boﬁ
 
em±y
(Ëc⁄° {  
size
()==0; }

208 
size_ty≥
 
size
(Ëc⁄° {  
__TBB_lﬂd_wôh_acquúe
(
my_size
); }

212 
push
(
c⁄°_ª„ªn˚
 
ñem
) {

213 
˝q_›î©i⁄
 
›_d©a
(
ñem
, 
PUSH_OP
);

214 
	gmy_aggªg©‹
.
execuã
(&
›_d©a
);

215 i‡(
	g›_d©a
.
	g°©us
 =
FAILED
)

216 
throw_ex˚±i⁄
(
eid_bad_Æloc
);

219 #i‡
__TBB_CPP11_RVALUE_REF_PRESENT


222 
push
(
vÆue_ty≥
 &&
ñem
) {

223 
˝q_›î©i⁄
 
›_d©a
(
ñem
, 
PUSH_RVALUE_OP
);

224 
	gmy_aggªg©‹
.
execuã
(&
›_d©a
);

225 i‡(
	g›_d©a
.
	g°©us
 =
FAILED
)

226 
throw_ex˚±i⁄
(
eid_bad_Æloc
);

229 #i‡
__TBB_CPP11_VARIADIC_TEMPLATES_PRESENT


232 
	gãm∂©e
<
	gty≥«me
... 
	gArgs
>

233 
em∂a˚
(
Args
&&... 
¨gs
) {

234 
push
(
vÆue_ty≥
(
°d
::
f‹w¨d
<
Args
>(
¨gs
)...));

243 
boﬁ
 
åy_p›
(
ª„ªn˚
 
ñem
) {

244 
˝q_›î©i⁄
 
›_d©a
(
POP_OP
);

245 
	g›_d©a
.
	gñem
 = &
ñem
;

246 
	gmy_aggªg©‹
.
execuã
(&
›_d©a
);

247  
	g›_d©a
.
	g°©us
==
SUCCEEDED
;

254 
˛ór
() {

255 
	gd©a
.
˛ór
();

256 
	gm¨k
 = 0;

257 
	gmy_size
 = 0;

262 
sw≠
(
c⁄cuºít_¥i‹ôy_queue
& 
q
) {

263 
usög
 
	g°d
::
sw≠
;

264 
	gd©a
.
sw≠
(
q
.
d©a
);

265 
sw≠
(
m¨k
, 
q
.mark);

266 
sw≠
(
my_size
, 
q
.my_size);

270 
Æloˇt‹_ty≥
 
gë_Æloˇt‹
(Ëc⁄° {  
	gd©a
.get_allocator(); }

272 
	g¥iv©e
:

273 
	e›î©i⁄_ty≥
 {
INVALID_OP
, 
	gPUSH_OP
, 
	gPOP_OP
, 
	gPUSH_RVALUE_OP
};

274 
	e›î©i⁄_°©us
 { 
	gWAIT
=0, 
	gSUCCEEDED
, 
	gFAILED
 };

276 
˛ass
 
	g˝q_›î©i⁄
 : 
public
 
aggªg©ed_›î©i⁄
<
˝q_›î©i⁄
> {

277 
public
:

278 
›î©i⁄_ty≥
 
ty≥
;

280 
vÆue_ty≥
 *
	gñem
;

281 
size_ty≥
 
	gsz
;

283 
˝q_›î©i⁄
(
c⁄°_ª„ªn˚
 
e
, 
›î©i⁄_ty≥
 
t
) :

284 
ty≥
(
t
), 
ñem
(
c⁄°_ˇ°
<
vÆue_ty≥
*>(&
e
)) {}

285 
˝q_›î©i⁄
(
›î©i⁄_ty≥
 
t
Ë: 
ty≥
(t) {}

288 ˛as†
	cmy_fun˘‹_t
 {

289 
	gc⁄cuºít_¥i‹ôy_queue
<
	gT
, 
	gCom∑ª
, 
	gA
> *
	g˝q
;

290 
	gpublic
:

291 
my_fun˘‹_t
() {}

292 
my_fun˘‹_t
(
c⁄cuºít_¥i‹ôy_queue
<
T
, 
Com∑ª
, 
A
> *
˝q_
Ë: 
˝q
(cpq_) {}

293 
›î©‹
()(
˝q_›î©i⁄
* 
›_li°
) {

294 
˝q
->
h™dÀ_›î©i⁄s
(
›_li°
);

298 
	gtbb
::
	töã∫Æ
::
	taggªg©‹
< 
	tmy_fun˘‹_t
, 
	t˝q_›î©i⁄
 > 
	taggªg©‹_t
;

299 
aggªg©‹_t
 
	gmy_aggªg©‹
;

301 
	g∑ddög1
[
NFS_MaxLöeSize
 - (
aggªg©‹_t
)];

303 
size_ty≥
 
	gm¨k
;

304 
__TBB_©omic
 
size_ty≥
 
	gmy_size
;

305 
Com∑ª
 
	gcom∑ª
;

307 
	g∑ddög2
[
NFS_MaxLöeSize
 - (2*(
size_ty≥
)Ë- (
Com∑ª
)];

326 
	g°d
::
	tve˘‹
<
	tvÆue_ty≥
, 
	tÆloˇt‹_ty≥
> 
	tve˘‹_t
;

327 
ve˘‹_t
 
	gd©a
;

329 
h™dÀ_›î©i⁄s
(
˝q_›î©i⁄
 *
›_li°
) {

330 
˝q_›î©i⁄
 *
	gtmp
, *
	gp›_li°
=
NULL
;

332 
__TBB_ASSERT
(
m¨k
 =
d©a
.
size
(), 
NULL
);

335 
	g›_li°
) {

343 
ˇŒ_ôt_nŸify
(
acquúed
, &(
›_li°
->
°©us
));

344 
__TBB_ASSERT
(
›_li°
->
ty≥
 !
INVALID_OP
, 
NULL
);

345 
	gtmp
 = 
›_li°
;

346 
	g›_li°
 = 
ôt_hide_lﬂd_w‹d
(
›_li°
->
√xt
);

347 i‡(
	gtmp
->
	gty≥
 =
POP_OP
) {

348 i‡(
m¨k
 < 
d©a
.
size
() &&

349 
com∑ª
(
d©a
[0], d©a[d©a.
size
()-1])) {

352 *(
tmp
->
ñem
Ë
move
(
d©a
[d©a.
size
()-1]);

353 
__TBB_°‹e_wôh_ªÀa£
(
my_size
, my_size-1);

354 
ôt_°‹e_w‹d_wôh_ªÀa£
(
tmp
->
°©us
, 
uöçå_t
(
SUCCEEDED
));

355 
	gd©a
.
p›_back
();

356 
__TBB_ASSERT
(
m¨k
<=
d©a
.
size
(), 
NULL
);

359 
ôt_hide_°‹e_w‹d
(
tmp
->
√xt
, 
p›_li°
);

360 
	gp›_li°
 = 
tmp
;

363 
__TBB_ASSERT
(
tmp
->
ty≥
 =
PUSH_OP
 ||Åmp->ty≥ =
PUSH_RVALUE_OP
, "Unknown operation" );

364 
	g__TBB_TRY
{

365 i‡(
	gtmp
->
	gty≥
 =
PUSH_OP
) {

366 
d©a
.
push_back
(*(
tmp
->
ñem
));

368 
	gd©a
.
push_back
(
move
(*(
tmp
->
ñem
)));

370 
__TBB_°‹e_wôh_ªÀa£
(
my_size
, my_size + 1);

371 
ôt_°‹e_w‹d_wôh_ªÀa£
(
tmp
->
°©us
, 
uöçå_t
(
SUCCEEDED
));

372 } 
__TBB_CATCH
(...) {

373 
ôt_°‹e_w‹d_wôh_ªÀa£
(
tmp
->
°©us
, 
uöçå_t
(
FAILED
));

379 
	gp›_li°
) {

380 
	gtmp
 = 
p›_li°
;

381 
	gp›_li°
 = 
ôt_hide_lﬂd_w‹d
(
p›_li°
->
√xt
);

382 
__TBB_ASSERT
(
tmp
->
ty≥
 =
POP_OP
, 
NULL
);

383 i‡(
	gd©a
.
em±y
()) {

384 
ôt_°‹e_w‹d_wôh_ªÀa£
(
tmp
->
°©us
, 
uöçå_t
(
FAILED
));

387 
__TBB_ASSERT
(
m¨k
<=
d©a
.
size
(), 
NULL
);

388 i‡(
	gm¨k
 < 
	gd©a
.
size
() &&

389 
com∑ª
(
d©a
[0], d©a[d©a.
size
()-1])) {

392 *(
	gtmp
->
	gñem
Ë
move
(
d©a
[d©a.
size
()-1]);

393 
__TBB_°‹e_wôh_ªÀa£
(
my_size
, my_size-1);

394 
ôt_°‹e_w‹d_wôh_ªÀa£
(
tmp
->
°©us
, 
uöçå_t
(
SUCCEEDED
));

395 
	gd©a
.
p›_back
();

398 *(
	gtmp
->
	gñem
Ë
move
(
d©a
[0]);

399 
__TBB_°‹e_wôh_ªÀa£
(
my_size
, my_size-1);

400 
ôt_°‹e_w‹d_wôh_ªÀa£
(
tmp
->
°©us
, 
uöçå_t
(
SUCCEEDED
));

401 
ªhóp
();

408 i‡(
	gm¨k
<
	gd©a
.
size
()Ë
hópify
();

409 
__TBB_ASSERT
(
m¨k
 =
d©a
.
size
(), 
NULL
);

413 
hópify
() {

414 i‡(!
	gm¨k
 && 
	gd©a
.
size
()>0) mark = 1;

415 ; 
	gm¨k
<
	gd©a
.
size
(); ++mark) {

417 
size_ty≥
 
	gcur_pos
 = 
m¨k
;

418 
vÆue_ty≥
 
	gto_∂a˚
 = 
move
(
d©a
[
m¨k
]);

420 
size_ty≥
 
	g∑ª¡
 = (
cur_pos
-1)>>1;

421 i‡(!
com∑ª
(
d©a
[
∑ª¡
], 
to_∂a˚
)) ;

422 
	gd©a
[
cur_pos
] = 
move
(
d©a
[
∑ª¡
]);

423 
	gcur_pos
 = 
∑ª¡
;

424 }  
	gcur_pos
 );

425 
	gd©a
[
cur_pos
] = 
move
(
to_∂a˚
);

431 
ªhóp
() {

432 
size_ty≥
 
	gcur_pos
=0, 
	gchûd
=1;

434 
	gchûd
 < 
	gm¨k
) {

435 
size_ty≥
 
	gèrgë
 = 
chûd
;

436 i‡(
	gchûd
+1 < 
	gm¨k
 && 
com∑ª
(
d©a
[
chûd
], data[child+1]))

437 ++
	gèrgë
;

439 i‡(
com∑ª
(
d©a
[
èrgë
], d©a[d©a.
size
()-1])) ;

440 
	gd©a
[
cur_pos
] = 
move
(
d©a
[
èrgë
]);

441 
	gcur_pos
 = 
èrgë
;

442 
	gchûd
 = (
cur_pos
<<1)+1;

444 i‡(
	gcur_pos
 !
d©a
.
size
()-1)

445 
d©a
[
cur_pos
] = 
move
(d©a[d©a.
size
()-1]);

446 
	gd©a
.
p›_back
();

447 i‡(
	gm¨k
 > 
	gd©a
.
size
()Ëm¨k = 
d©a
.size();

453 
usög
 
	göãrÁ˚5
::
c⁄cuºít_¥i‹ôy_queue
;

	@viper/concurrentqueue-src/benchmarks/tbb/concurrent_queue.cpp

21 
	~"tbb/tbb_°ddef.h
"

22 
	~"tbb/tbb_machöe.h
"

23 
	~"tbb/tbb_ex˚±i⁄.h
"

25 
	#__TBB_c⁄cuºít_queue_H


	)

26 
	~"tbb/öã∫Æ/_c⁄cuºít_queue_im∂.h
"

27 
	~"c⁄cuºít_m⁄ô‹.h
"

28 
	~"ôt_nŸify.h
"

29 
	~<√w
>

31 #i‡!
TBB_USE_EXCEPTIONS
 && 
_MSC_VER


33 #¥agm®
w¨nög
 (
push
)

34 #¥agm®
w¨nög
 (
dißbÀ
: 4530)

37 
	~<c°rög
>

39 #i‡!
TBB_USE_EXCEPTIONS
 && 
_MSC_VER


40 #¥agm®
w¨nög
 (
p›
)

43 
usög
 
«me•a˚
 
	g°d
;

45 #i‡
deföed
(
_MSC_VER
Ë&& deföed(
_Wp64
)

47 #¥agm®
w¨nög
 (
dißbÀ
: 4267)

50 
	#RECORD_EVENTS
 0

	)

53 
«me•a˚
 
	gtbb
 {

55 
«me•a˚
 
	göã∫Æ
 {

57 
c⁄cuºít_queue_ba£_v3
 
	tc⁄cuºít_queue_ba£
;

59 
size_t
 
	ttickë
;

64 
	smi¸o_queue
 {

65 
	gc⁄cuºít_queue_ba£
::
	t∑ge
Öage;

67 
‰õnd
 
˛ass
 
	gmi¸o_queue_p›_föÆizî
;

69 
	g©omic
<
	g∑ge
*> 
	ghód_∑ge
;

70 
	g©omic
<
	gtickë
> 
	ghód_cou¡î
;

72 
	g©omic
<
	g∑ge
*> 
	gèû_∑ge
;

73 
	g©omic
<
	gtickë
> 
	gèû_cou¡î
;

75 
•ö_muãx
 
	g∑ge_muãx
;

77 
push
–c⁄° * 
ôem
, 
tickë
 
k
, 
c⁄cuºít_queue_ba£
& 
ba£
,

78 
c⁄cuºít_queue_ba£
::
c›y_•ecifics
 
›_ty≥
 );

80 
ab‹t_push
–
tickë
 
k
, 
c⁄cuºít_queue_ba£
& 
ba£
 );

82 
boﬁ
 
p›
–* 
d°
, 
tickë
 
k
, 
c⁄cuºít_queue_ba£
& 
ba£
 );

84 
	gmi¸o_queue
& 
assign
–c⁄° 
mi¸o_queue
& 
§c
, 
c⁄cuºít_queue_ba£
& 
ba£
,

85 
c⁄cuºít_queue_ba£
::
c›y_•ecifics
 
›_ty≥
 );

87 
∑ge
* 
make_c›y
 ( 
c⁄cuºít_queue_ba£
& 
ba£
, c⁄°Öage* 
§c_∑ge
, 
size_t
 
begö_ö_∑ge
,

88 
size_t
 
íd_ö_∑ge
, 
tickë
& 
g_ödex
, 
c⁄cuºít_queue_ba£
::
c›y_•ecifics
 
›_ty≥
 ) ;

90 
make_övÆid
–
tickë
 
k
 );

94 ˛as†
	cmi¸o_queue_p›_föÆizî
: 
no_c›y
 {

95 
c⁄cuºít_queue_ba£
::
	t∑ge
Öage;

96 
tickë
 
	gmy_tickë
;

97 
	gmi¸o_queue
& 
	gmy_queue
;

98 
∑ge
* 
	gmy_∑ge
;

99 
	gc⁄cuºít_queue_ba£
 &
	gba£
;

100 
	gpublic
:

101 
mi¸o_queue_p›_föÆizî
–
mi¸o_queue
& 
queue
, 
c⁄cuºít_queue_ba£
& 
b
, 
tickë
 
k
, 
∑ge
* 
p
 ) :

102 
my_tickë
(
k
), 
my_queue
(
queue
), 
my_∑ge
(
p
), 
ba£
(
b
)

104 ~
mi¸o_queue_p›_föÆizî
() {

105 
∑ge
* 
	gp
 = 
my_∑ge
;

106 if–
	gp
 ) {

107 
	g•ö_muãx
::
sc›ed_lock
 
lock
–
my_queue
.
∑ge_muãx
 );

108 
∑ge
* 
	gq
 = 
p
->
√xt
;

109 
	gmy_queue
.
	ghód_∑ge
 = 
q
;

110 if–!
	gq
 ) {

111 
	gmy_queue
.
	gèû_∑ge
 = 
NULL
;

114 
	gmy_queue
.
	ghód_cou¡î
 = 
my_tickë
;

115 if–
	gp
 )

116 
	gba£
.
dóŒoˇã_∑ge
–
p
 );

120 
	s¥ediˇã_Àq
 {

121 
tickë
 
	gt
;

122 
¥ediˇã_Àq
–
tickë
 
t_
 ) : 
t
(t_) {}

123 
boﬁ
 
›î©‹
(Ë–
uöçå_t
 
p
 ) c⁄° { (
tickë
Ì<=
t
;}

129 ˛as†
	cc⁄cuºít_queue_ªp
 {

130 
	gpublic
:

131 
¥iv©e
:

132 
‰õnd
 
mi¸o_queue
;

135 c⁄° 
size_t
 
	gphi
 = 3;

137 
	gpublic
:

139 c⁄° 
size_t
 
n_queue
 = 8;

142 
size_t
 
ödex
–
tickë
 
k
 ) {

143  
k
*
	gphi
%
	gn_queue
;

146 
	g©omic
<
	gtickë
> 
	ghód_cou¡î
;

147 
c⁄cuºít_m⁄ô‹
 
	gôems_avaû
;

148 
	g©omic
<
	gsize_t
> 
	gn_övÆid_íåõs
;

149 
	g∑d1
[
NFS_MaxLöeSize
-(((
©omic
<
tickë
>)+(
c⁄cuºít_m⁄ô‹
)+◊tomic<
size_t
>))&(NFS_MaxLineSize-1))];

151 
	g©omic
<
	gtickë
> 
	gèû_cou¡î
;

152 
c⁄cuºít_m⁄ô‹
 
	g¶Ÿs_avaû
;

153 
	g∑d2
[
NFS_MaxLöeSize
-(((
©omic
<
tickë
>)+(
c⁄cuºít_m⁄ô‹
))&(NFS_MaxLineSize-1))];

154 
mi¸o_queue
 
	g¨øy
[
n_queue
];

156 
	gmi¸o_queue
& 
choo£
–
tickë
 
k
 ) {

158  
	g¨øy
[
ödex
(
k
)];

162 c⁄° 
±rdiff_t
 
	göföôe_ˇ∑côy
 =Öådiff_t(~
size_t
(0)/2);

165 #i‡
_MSC_VER
 && !
deföed
(
__INTEL_COMPILER
)

167 #¥agm®
w¨nög
–
push
 )

168 #¥agm®
w¨nög
–
dißbÀ
: 4146 )

171 * 
	gövÆid_∑ge
;

176 
	gmi¸o_queue
::
push
–c⁄° * 
ôem
, 
tickë
 
k
, 
c⁄cuºít_queue_ba£
& 
ba£
,

177 
c⁄cuºít_queue_ba£
::
c›y_•ecifics
 
›_ty≥
 ) {

178 
k
 &-
c⁄cuºít_queue_ªp
::
n_queue
;

179 
∑ge
* 
	gp
 = 
NULL
;

181 
size_t
 
	gödex
 = 
modulo_powî_of_two
–
k
/
c⁄cuºít_queue_ªp
::
n_queue
, 
ba£
.
ôems_≥r_∑ge
 );

182 if–!
	gödex
 ) {

183 
	g__TBB_TRY
 {

184 
	gp
 = 
ba£
.
Æloˇã_∑ge
();

185 } 
__TBB_CATCH
(...) {

186 ++
	gba£
.
	gmy_ªp
->
	gn_övÆid_íåõs
;

187 
make_övÆid
–
k
 );

189 
	gp
->
	gmask
 = 0;

190 
	gp
->
	g√xt
 = 
NULL
;

194 if–
	gèû_cou¡î
!=
k
 )

195  
©omic_backoff
 
b
(
åue
);;
	gb
.
∑u£
() ) {

196 
tickë
 
	gèû
 = 
èû_cou¡î
;

197 if–
	gèû
==
k
 ) ;

198 if–
	gèû
&0x1 ) {

200 ++
	gba£
.
	gmy_ªp
->
	gn_övÆid_íåõs
;

201 
throw_ex˚±i⁄
–
eid_bad_œ°_Æloc
 );

205 if–
	gp
 ) {

206 
	g•ö_muãx
::
sc›ed_lock
 
lock
–
∑ge_muãx
 );

207 if–
∑ge
* 
	gq
 = 
èû_∑ge
 )

208 
q
->
√xt
 = 
p
;

210 
	ghód_∑ge
 = 
p
;

211 
	gèû_∑ge
 = 
p
;

214 i‡(
	gôem
) {

215 
	gp
 = 
èû_∑ge
;

216 
ITT_NOTIFY
–
sync_acquúed
, 
p
 );

217 
	g__TBB_TRY
 {

218 if–
	gc⁄cuºít_queue_ba£
::
c›y
 =
›_ty≥
 ) {

219 
ba£
.
c›y_ôem
–*
p
, 
ödex
, 
ôem
 );

221 
__TBB_ASSERT
–
c⁄cuºít_queue_ba£
::
move
 =
›_ty≥
, 
NULL
 );

222 
	g°©ic_ˇ°
<
	gc⁄cuºít_queue_ba£_v8
&>(
	gba£
).
move_ôem
–*
p
, 
ödex
, 
ôem
 );

224 } 
__TBB_CATCH
(...) {

225 ++
	gba£
.
	gmy_ªp
->
	gn_övÆid_íåõs
;

226 
	gèû_cou¡î
 +
c⁄cuºít_queue_ªp
::
n_queue
;

227 
__TBB_RETHROW
();

229 
ITT_NOTIFY
–
sync_ªÀasög
, 
p
 );

231 
	gp
->
	gmask
 |
uöçå_t
(1)<<
ödex
;

234 ++
	gba£
.
	gmy_ªp
->
	gn_övÆid_íåõs
;

236 
	gèû_cou¡î
 +
c⁄cuºít_queue_ªp
::
n_queue
;

240 
	gmi¸o_queue
::
ab‹t_push
–
tickë
 
k
, 
c⁄cuºít_queue_ba£
& 
ba£
 ) {

241 
push
(
NULL
, 
k
, 
ba£
, 
c⁄cuºít_queue_ba£
::
c›y
);

244 
boﬁ
 
	gmi¸o_queue
::
p›
–* 
d°
, 
tickë
 
k
, 
c⁄cuºít_queue_ba£
& 
ba£
 ) {

245 
	gk
 &-
c⁄cuºít_queue_ªp
::
n_queue
;

246 
•ö_waô_u¡û_eq
–
hód_cou¡î
, 
k
 );

247 
•ö_waô_whûe_eq
–
èû_cou¡î
, 
k
 );

248 
	g∑ge
& 
	gp
 = *
hód_∑ge
;

249 
__TBB_ASSERT
–&
p
, 
NULL
 );

250 
size_t
 
	gödex
 = 
modulo_powî_of_two
–
k
/
c⁄cuºít_queue_ªp
::
n_queue
, 
ba£
.
ôems_≥r_∑ge
 );

251 
boﬁ
 
	gsuc˚ss
 = 
Ál£
;

253 
mi¸o_queue_p›_föÆizî
 
föÆizî
–*
this
, 
ba£
, 
k
+
c⁄cuºít_queue_ªp
::
n_queue
, 
ödex
==ba£.
ôems_≥r_∑ge
-1 ? &
p
 : 
NULL
 );

254 if–
	gp
.
	gmask
 & 
uöçå_t
(1)<<
	gödex
 ) {

255 
	gsuc˚ss
 = 
åue
;

256 
ITT_NOTIFY
–
sync_acquúed
, 
d°
 );

257 
ITT_NOTIFY
–
sync_acquúed
, 
hód_∑ge
 );

258 
	gba£
.
assign_™d_de°roy_ôem
–
d°
, 
p
, 
ödex
 );

259 
ITT_NOTIFY
–
sync_ªÀasög
, 
hód_∑ge
 );

261 --
	gba£
.
	gmy_ªp
->
	gn_övÆid_íåõs
;

264  
	gsuc˚ss
;

267 
	gmi¸o_queue
& mi¸o_queue::
assign
–c⁄° 
mi¸o_queue
& 
§c
, 
c⁄cuºít_queue_ba£
& 
ba£
,

268 
c⁄cuºít_queue_ba£
::
c›y_•ecifics
 
›_ty≥
 )

270 
hód_cou¡î
 = 
§c
.head_counter;

271 
	gèû_cou¡î
 = 
§c
.
èû_cou¡î
;

273 c⁄° 
∑ge
* 
	g§˝
 = 
§c
.
hód_∑ge
;

274 if–
	g§˝
 ) {

275 
tickë
 
	gg_ödex
 = 
hód_cou¡î
;

276 
	g__TBB_TRY
 {

277 
size_t
 
	gn_ôems
 = (
èû_cou¡î
-
hód_cou¡î
)/
c⁄cuºít_queue_ªp
::
n_queue
;

278 
size_t
 
	gödex
 = 
modulo_powî_of_two
–
hód_cou¡î
/
c⁄cuºít_queue_ªp
::
n_queue
, 
ba£
.
ôems_≥r_∑ge
 );

279 
size_t
 
	gíd_ö_fú°_∑ge
 = (
ödex
+
n_ôems
<
ba£
.
ôems_≥r_∑ge
)?(index+n_items):base.items_per_page;

281 
	ghód_∑ge
 = 
make_c›y
–
ba£
, 
§˝
, 
ödex
, 
íd_ö_fú°_∑ge
, 
g_ödex
, 
›_ty≥
 );

282 
∑ge
* 
	gcur_∑ge
 = 
hód_∑ge
;

284 if–
	g§˝
 !
§c
.
èû_∑ge
 ) {

285  
§˝
 = sr˝->
√xt
; 
	g§˝
!=
§c
.
èû_∑ge
; srcp=srcp->next ) {

286 
cur_∑ge
->
√xt
 = 
make_c›y
–
ba£
, 
§˝
, 0, ba£.
ôems_≥r_∑ge
, 
g_ödex
, 
›_ty≥
 );

287 
	gcur_∑ge
 = 
cur_∑ge
->
√xt
;

290 
__TBB_ASSERT
–
§˝
==
§c
.
èû_∑ge
, 
NULL
 );

292 
size_t
 
	gœ°_ödex
 = 
modulo_powî_of_two
–
èû_cou¡î
/
c⁄cuºít_queue_ªp
::
n_queue
, 
ba£
.
ôems_≥r_∑ge
 );

293 if–
	gœ°_ödex
==0 ) 
œ°_ödex
 = 
ba£
.
ôems_≥r_∑ge
;

295 
	gcur_∑ge
->
	g√xt
 = 
make_c›y
–
ba£
, 
§˝
, 0, 
œ°_ödex
, 
g_ödex
, 
›_ty≥
 );

296 
	gcur_∑ge
 = 
cur_∑ge
->
√xt
;

298 
	gèû_∑ge
 = 
cur_∑ge
;

299 } 
__TBB_CATCH
(...) {

300 
make_övÆid
–
g_ödex
 );

303 
	ghód_∑ge
 = 
èû_∑ge
 = 
NULL
;

305  *
	gthis
;

308 
	gc⁄cuºít_queue_ba£
::
∑ge
* 
mi¸o_queue
::
make_c›y
–
c⁄cuºít_queue_ba£
& 
ba£
,

309 c⁄° 
c⁄cuºít_queue_ba£
::
∑ge
* 
§c_∑ge
, 
size_t
 
begö_ö_∑ge
, size_à
íd_ö_∑ge
,

310 
tickë
& 
g_ödex
, 
c⁄cuºít_queue_ba£
::
c›y_•ecifics
 
›_ty≥
 )

312 
∑ge
* 
√w_∑ge
 = 
ba£
.
Æloˇã_∑ge
();

313 
	g√w_∑ge
->
	g√xt
 = 
NULL
;

314 
	g√w_∑ge
->
	gmask
 = 
§c_∑ge
->
mask
;

315  ; 
	gbegö_ö_∑ge
!=
íd_ö_∑ge
; ++begö_ö_∑ge, ++
	gg_ödex
 )

316 if–
	g√w_∑ge
->
	gmask
 & 
uöçå_t
(1)<<
	gbegö_ö_∑ge
 )

317 if–
	gc⁄cuºít_queue_ba£
::
c›y
 =
›_ty≥
 ) {

318 
ba£
.
c›y_∑ge_ôem
–*
√w_∑ge
, 
begö_ö_∑ge
, *
§c_∑ge
, begin_in_page );

320 
__TBB_ASSERT
–
c⁄cuºít_queue_ba£
::
move
 =
›_ty≥
, 
NULL
 );

321 
	g°©ic_ˇ°
<
	gc⁄cuºít_queue_ba£_v8
&>(
	gba£
).
move_∑ge_ôem
–*
√w_∑ge
, 
begö_ö_∑ge
, *
§c_∑ge
, begin_in_page );

323  
	g√w_∑ge
;

326 
	gmi¸o_queue
::
make_övÆid
–
tickë
 
k
 )

328 
c⁄cuºít_queue_ba£
::
∑ge
 
dummy
 = {
°©ic_ˇ°
<page*>((*)1), 0};

330 
	gövÆid_∑ge
 = &
dummy
;

332 
	g•ö_muãx
::
sc›ed_lock
 
lock
–
∑ge_muãx
 );

333 
	gèû_cou¡î
 = 
k
+
c⁄cuºít_queue_ªp
::
n_queue
+1;

334 if–
∑ge
* 
	gq
 = 
èû_∑ge
 )

335 
q
->
√xt
 = 
°©ic_ˇ°
<
∑ge
*>(
övÆid_∑ge
);

337 
	ghód_∑ge
 = 
°©ic_ˇ°
<
∑ge
*>(
övÆid_∑ge
);

338 
	gèû_∑ge
 = 
°©ic_ˇ°
<
∑ge
*>(
övÆid_∑ge
);

340 
__TBB_RETHROW
();

343 #i‡
_MSC_VER
 && !
deföed
(
__INTEL_COMPILER
)

344 #¥agm®
w¨nög
–
p›
 )

350 
	gc⁄cuºít_queue_ba£_v3
::
c⁄cuºít_queue_ba£_v3
–
size_t
 
ôem_sz
 ) {

351 
ôems_≥r_∑ge
 = 
ôem_sz
<= 8 ? 32 :

352 
ôem_sz
<= 16 ? 16 :

353 
ôem_sz
<= 32 ? 8 :

354 
ôem_sz
<= 64 ? 4 :

355 
ôem_sz
<=128 ? 2 :

357 
	gmy_ˇ∑côy
 = 
size_t
(-1)/(
ôem_sz
>1 ? item_sz : 2);

358 
	gmy_ªp
 = 
ˇche_Æig√d_Æloˇt‹
<
c⁄cuºít_queue_ªp
>().
Æloˇã
(1);

359 
__TBB_ASSERT
–(
size_t
)
my_ªp
 % 
NFS_GëLöeSize
()==0, "alignmentÉrror" );

360 
__TBB_ASSERT
–(
size_t
)&
my_ªp
->
hód_cou¡î
 % 
NFS_GëLöeSize
()==0, "alignmentÉrror" );

361 
__TBB_ASSERT
–(
size_t
)&
my_ªp
->
èû_cou¡î
 % 
NFS_GëLöeSize
()==0, "alignmentÉrror" );

362 
__TBB_ASSERT
–(
size_t
)&
my_ªp
->
¨øy
 % 
NFS_GëLöeSize
()==0, "alignmentÉrror" );

363 
mem£t
(
my_ªp
,0,(
c⁄cuºít_queue_ªp
));

364 
√w
 ( &
my_ªp
->
ôems_avaû
 ) 
c⁄cuºít_m⁄ô‹
();

365 
√w
 ( &
my_ªp
->
¶Ÿs_avaû
 ) 
c⁄cuºít_m⁄ô‹
();

366 
	gthis
->
	gôem_size
 = 
ôem_sz
;

369 
	gc⁄cuºít_queue_ba£_v3
::~
c⁄cuºít_queue_ba£_v3
() {

370 
size_t
 
nq
 = 
my_ªp
->
n_queue
;

371  
size_t
 
	gi
=0; i<
	gnq
; i++ )

372 
__TBB_ASSERT
–
my_ªp
->
¨øy
[
i
].
èû_∑ge
==
NULL
, "pages wereÇot freedÖroperly" );

373 
	gˇche_Æig√d_Æloˇt‹
<
	gc⁄cuºít_queue_ªp
>().
dóŒoˇã
(
my_ªp
,1);

376 
	gc⁄cuºít_queue_ba£_v3
::
öã∫Æ_push
–c⁄° * 
§c
 ) {

377 
öã∫Æ_ö£π_ôem
–
§c
, 
c›y
 );

380 
	gc⁄cuºít_queue_ba£_v8
::
öã∫Æ_push_move
–c⁄° * 
§c
 ) {

381 
öã∫Æ_ö£π_ôem
–
§c
, 
move
 );

384 
	gc⁄cuºít_queue_ba£_v3
::
öã∫Æ_ö£π_ôem
–c⁄° * 
§c
, 
c›y_•ecifics
 
›_ty≥
 ) {

385 
	gc⁄cuºít_queue_ªp
& 
	gr
 = *
my_ªp
;

386 
tickë
 
	gk
 = 
r
.
èû_cou¡î
++;

387 
±rdiff_t
 
	ge
 = 
my_ˇ∑côy
;

388 #i‡
DO_ITT_NOTIFY


389 
boﬁ
 
	gsync_¥ï¨e_d⁄e
 = 
Ál£
;

391 if–(
	g±rdiff_t
)(
	gk
-
	gr
.
	ghód_cou¡î
)>=
e
 ) {

392 #i‡
DO_ITT_NOTIFY


393 if–!
sync_¥ï¨e_d⁄e
 ) {

394 
ITT_NOTIFY
–
sync_¥ï¨e
, &
sync_¥ï¨e_d⁄e
 );

395 
	gsync_¥ï¨e_d⁄e
 = 
åue
;

398 
boﬁ
 
	g¶ït
 = 
Ál£
;

399 
	gc⁄cuºít_m⁄ô‹
::
thªad_c⁄ãxt
 
thr_˘x
;

400 
	gr
.
	g¶Ÿs_avaû
.
¥ï¨e_waô
–
thr_˘x
, ((
±rdiff_t
)(
k
-
e
)) );

401  (
	g±rdiff_t
)(
	gk
-
	gr
.
	ghód_cou¡î
)>=
c⁄°_ˇ°
<vﬁ©ûê
±rdiff_t
&>(
e
 = 
my_ˇ∑côy
) ) {

402 
__TBB_TRY
 {

403 
¶ït
 = 
r
.
¶Ÿs_avaû
.
commô_waô
–
thr_˘x
 );

404 } 
__TBB_CATCH
–
tbb
::
u£r_ab‹t
& ) {

405 
r
.
choo£
(
k
).
ab‹t_push
(k, *
this
);

406 
__TBB_RETHROW
();

407 } 
__TBB_CATCH
(...) {

408 
__TBB_RETHROW
();

410 i‡(
	g¶ït
 =
åue
) ;

411 
	gr
.
	g¶Ÿs_avaû
.
¥ï¨e_waô
–
thr_˘x
, ((
±rdiff_t
)(
k
-
e
)) );

413 if–!
	g¶ït
 )

414 
	gr
.
	g¶Ÿs_avaû
.
ˇn˚l_waô
–
thr_˘x
 );

416 
ITT_NOTIFY
–
sync_acquúed
, &
sync_¥ï¨e_d⁄e
 );

417 
__TBB_ASSERT
–(
±rdiff_t
)(
k
-
r
.
hód_cou¡î
)<
my_ˇ∑côy
, 
NULL
);

418 
	gr
.
choo£
–
k
 ).
push
–
§c
, k, *
this
, 
›_ty≥
 );

419 
	gr
.
	gôems_avaû
.
nŸify
–
¥ediˇã_Àq
(
k
) );

422 
	gc⁄cuºít_queue_ba£_v3
::
öã∫Æ_p›
–* 
d°
 ) {

423 
c⁄cuºít_queue_ªp
& 
r
 = *
my_ªp
;

424 
tickë
 
	gk
;

425 #i‡
DO_ITT_NOTIFY


426 
boﬁ
 
	gsync_¥ï¨e_d⁄e
 = 
Ál£
;

429 
	gk
=
r
.
hód_cou¡î
++;

430 i‡–(
	g±rdiff_t
)(
	gr
.
	gèû_cou¡î
-
	gk
)<=0 ) {

431 #i‡
DO_ITT_NOTIFY


432 if–!
sync_¥ï¨e_d⁄e
 ) {

433 
ITT_NOTIFY
–
sync_¥ï¨e
, 
d°
 );

434 
	gsync_¥ï¨e_d⁄e
 = 
åue
;

437 
boﬁ
 
	g¶ït
 = 
Ál£
;

438 
	gc⁄cuºít_m⁄ô‹
::
thªad_c⁄ãxt
 
thr_˘x
;

439 
	gr
.
	gôems_avaû
.
¥ï¨e_waô
–
thr_˘x
, 
k
 );

440  (
	g±rdiff_t
)(
	gr
.
	gèû_cou¡î
-
	gk
)<=0 ) {

441 
__TBB_TRY
 {

442 
¶ït
 = 
r
.
ôems_avaû
.
commô_waô
–
thr_˘x
 );

443 } 
__TBB_CATCH
–
tbb
::
u£r_ab‹t
& ) {

444 
r
.
hód_cou¡î
--;

445 
__TBB_RETHROW
();

446 } 
__TBB_CATCH
(...) {

447 
__TBB_RETHROW
();

449 i‡(
	g¶ït
 =
åue
) ;

450 
	gr
.
	gôems_avaû
.
¥ï¨e_waô
–
thr_˘x
, 
k
 );

452 if–!
	g¶ït
 )

453 
	gr
.
	gôems_avaû
.
ˇn˚l_waô
–
thr_˘x
 );

455 
__TBB_ASSERT
((
±rdiff_t
)(
r
.
èû_cou¡î
-
k
)>0, 
NULL
);

456 }  !
	gr
.
choo£
(
k
).
p›
(
d°
,k,*
this
) );

459 
	gr
.
	g¶Ÿs_avaû
.
nŸify
–
¥ediˇã_Àq
(
k
) );

462 
	gc⁄cuºít_queue_ba£_v3
::
öã∫Æ_ab‹t
() {

463 
c⁄cuºít_queue_ªp
& 
r
 = *
my_ªp
;

464 
	gr
.
	gôems_avaû
.
ab‹t_Æl
();

465 
	gr
.
	g¶Ÿs_avaû
.
ab‹t_Æl
();

468 
boﬁ
 
	gc⁄cuºít_queue_ba£_v3
::
öã∫Æ_p›_if_¥e£¡
–* 
d°
 ) {

469 
c⁄cuºít_queue_ªp
& 
r
 = *
my_ªp
;

470 
tickë
 
	gk
;

472 
	gk
 = 
r
.
hód_cou¡î
;

474 if–(
	g±rdiff_t
)(
	gr
.
	gèû_cou¡î
-
	gk
)<=0 ) {

476  
Ál£
;

479 
tickë
 
	gtk
=
k
;

480 
	gk
 = 
r
.
hód_cou¡î
.
com∑ª_™d_sw≠
–
tk
+1,Åk );

481 if–
	gk
==
tk
 )

485 }  !
	gr
.
choo£
–
k
 ).
p›
–
d°
, k, *
this
 ) );

487 
	gr
.
	g¶Ÿs_avaû
.
nŸify
–
¥ediˇã_Àq
(
k
) );

489  
	gåue
;

492 
boﬁ
 
	gc⁄cuºít_queue_ba£_v3
::
öã∫Æ_push_if_nŸ_fuŒ
–c⁄° * 
§c
 ) {

493  
öã∫Æ_ö£π_if_nŸ_fuŒ
–
§c
, 
c›y
 );

496 
boﬁ
 
	gc⁄cuºít_queue_ba£_v8
::
öã∫Æ_push_move_if_nŸ_fuŒ
–c⁄° * 
§c
 ) {

497  
öã∫Æ_ö£π_if_nŸ_fuŒ
–
§c
, 
move
 );

500 
boﬁ
 
	gc⁄cuºít_queue_ba£_v3
::
öã∫Æ_ö£π_if_nŸ_fuŒ
–c⁄° * 
§c
, 
c›y_•ecifics
 
›_ty≥
 ) {

501 
	gc⁄cuºít_queue_ªp
& 
	gr
 = *
my_ªp
;

502 
tickë
 
	gk
 = 
r
.
èû_cou¡î
;

504 if–(
	g±rdiff_t
)(
	gk
-
	gr
.
	ghód_cou¡î
)>=
my_ˇ∑côy
 ) {

506  
Ál£
;

509 
tickë
 
	gtk
=
k
;

510 
	gk
 = 
r
.
èû_cou¡î
.
com∑ª_™d_sw≠
–
tk
+1,Åk );

511 if–
	gk
==
tk
 )

515 
	gr
.
choo£
(
k
).
push
(
§c
, k, *
this
, 
›_ty≥
);

516 
	gr
.
	gôems_avaû
.
nŸify
–
¥ediˇã_Àq
(
k
) );

517  
	gåue
;

520 
±rdiff_t
 
	gc⁄cuºít_queue_ba£_v3
::
öã∫Æ_size
() const {

521 
__TBB_ASSERT
–(
±rdiff_t
)<=(
size_t
), 
NULL
 );

522  
±rdiff_t
(
my_ªp
->
èû_cou¡î
-my_ªp->
hód_cou¡î
-my_ªp->
n_övÆid_íåõs
);

525 
boﬁ
 
	gc⁄cuºít_queue_ba£_v3
::
öã∫Æ_em±y
() const {

526 
tickë
 
tc
 = 
my_ªp
->
èû_cou¡î
;

527 
tickë
 
	ghc
 = 
my_ªp
->
hód_cou¡î
;

529  ( 
	gtc
==
my_ªp
->
èû_cou¡î
 && 
±rdiff_t
(
tc
-
hc
-my_ªp->
n_övÆid_íåõs
)<=0 );

532 
	gc⁄cuºít_queue_ba£_v3
::
öã∫Æ_£t_ˇ∑côy
–
±rdiff_t
 
ˇ∑côy
, 
size_t
 ) {

533 
	gmy_ˇ∑côy
 = 
ˇ∑côy
<0 ? 
c⁄cuºít_queue_ªp
::
öföôe_ˇ∑côy
 : capacity;

536 
	gc⁄cuºít_queue_ba£_v3
::
öã∫Æ_föish_˛ór
() {

537 
size_t
 
nq
 = 
my_ªp
->
n_queue
;

538  
size_t
 
	gi
=0; i<
	gnq
; ++i ) {

539 
∑ge
* 
	gç
 = 
my_ªp
->
¨øy
[
i
].
èû_∑ge
;

540 
__TBB_ASSERT
–
my_ªp
->
¨øy
[
i
].
hód_∑ge
==
ç
, "at most oneÖage shouldÑemain" );

541 if–
	gç
!=
NULL
) {

542 if–
ç
!=
övÆid_∑ge
 ) 
dóŒoˇã_∑ge
(Åp );

543 
	gmy_ªp
->
	g¨øy
[
i
].
	gèû_∑ge
 = 
NULL
;

548 
	gc⁄cuºít_queue_ba£_v3
::
öã∫Æ_throw_ex˚±i⁄
() const {

549 
throw_ex˚±i⁄
–
eid_bad_Æloc
 );

552 
	gc⁄cuºít_queue_ba£_v3
::
öã∫Æ_assign
–c⁄° 
c⁄cuºít_queue_ba£
& 
§c
, 
c›y_•ecifics
 
›_ty≥
 ) {

553 
	gôems_≥r_∑ge
 = 
§c
.
ôems_≥r_∑ge
;

554 
	gmy_ˇ∑côy
 = 
§c
.
my_ˇ∑côy
;

557 
	gmy_ªp
->
	ghód_cou¡î
 = 
§c
.
my_ªp
->
hód_cou¡î
;

558 
	gmy_ªp
->
	gèû_cou¡î
 = 
§c
.
my_ªp
->
èû_cou¡î
;

559 
	gmy_ªp
->
	gn_övÆid_íåõs
 = 
§c
.
my_ªp
->
n_övÆid_íåõs
;

562  
size_t
 
	gi
 = 0; i<
	gmy_ªp
->
	gn_queue
; ++i )

563 
	gmy_ªp
->
	g¨øy
[
i
].
assign
–
§c
.
my_ªp
->
¨øy
[i], *
this
, 
›_ty≥
 );

565 
__TBB_ASSERT
–
my_ªp
->
hód_cou¡î
==
§c
.my_ªp->hód_cou¡î && my_ªp->
èû_cou¡î
==src.my_rep->tail_counter,

569 
	gc⁄cuºít_queue_ba£_v3
::
assign
–c⁄° 
c⁄cuºít_queue_ba£
& 
§c
 ) {

570 
öã∫Æ_assign
–
§c
, 
c›y
 );

573 
	gc⁄cuºít_queue_ba£_v8
::
move_c⁄ã¡
–
c⁄cuºít_queue_ba£_v8
& 
§c
 ) {

574 
öã∫Æ_assign
–
§c
, 
move
 );

580 ˛as†
	cc⁄cuºít_queue_ôî©‹_ªp
: 
no_assign
 {

581 
public
:

582 
tickë
 
hód_cou¡î
;

583 c⁄° 
	gc⁄cuºít_queue_ba£
& 
	gmy_queue
;

584 c⁄° 
size_t
 
	goff£t_of_œ°
;

585 
	gc⁄cuºít_queue_ba£
::
∑ge
* 
¨øy
[
c⁄cuºít_queue_ªp
::
n_queue
];

586 
c⁄cuºít_queue_ôî©‹_ªp
–c⁄° 
c⁄cuºít_queue_ba£
& 
queue
, 
size_t
 
off£t_of_œ°_
 ) :

587 
hód_cou¡î
(
queue
.
my_ªp
->head_counter),

588 
my_queue
(
queue
),

589 
off£t_of_œ°
(
off£t_of_œ°_
)

591 c⁄° 
	gc⁄cuºít_queue_ªp
& 
	gªp
 = *
queue
.
my_ªp
;

592  
size_t
 
	gk
=0; k<
	gc⁄cuºít_queue_ªp
::
n_queue
; ++k )

593 
	g¨øy
[
k
] = 
ªp
.
¨øy
[k].
hód_∑ge
;

596 
boﬁ
 
gë_ôem
–*& 
ôem
, 
size_t
 
k
 ) {

597 if–
	gk
==
my_queue
.
my_ªp
->
èû_cou¡î
 ) {

598 
ôem
 = 
NULL
;

599  
	gåue
;

601 
	gc⁄cuºít_queue_ba£
::
∑ge
* 
p
 = 
¨øy
[
c⁄cuºít_queue_ªp
::
ödex
(
k
)];

602 
__TBB_ASSERT
(
p
,
NULL
);

603 
size_t
 
	gi
 = 
modulo_powî_of_two
–
k
/
c⁄cuºít_queue_ªp
::
n_queue
, 
my_queue
.
ôems_≥r_∑ge
 );

604 
	gôem
 = 
°©ic_ˇ°
<*>(°©ic_ˇ°<*>(
p
)Ë+ 
off£t_of_œ°
 + 
my_queue
.
ôem_size
*
i
;

605  (
	gp
->
	gmask
 & 
uöçå_t
(1)<<
	gi
)!=0;

614 
	gc⁄cuºít_queue_ôî©‹_ba£_v3
::
öôülize
–c⁄° 
c⁄cuºít_queue_ba£
& 
queue
, 
size_t
 
off£t_of_œ°
 ) {

615 
	gmy_ªp
 = 
ˇche_Æig√d_Æloˇt‹
<
c⁄cuºít_queue_ôî©‹_ªp
>().
Æloˇã
(1);

616 
√w
–
my_ªp
 ) 
c⁄cuºít_queue_ôî©‹_ªp
(
queue
,
off£t_of_œ°
);

617 
size_t
 
	gk
 = 
my_ªp
->
hód_cou¡î
;

618 if–!
	gmy_ªp
->
gë_ôem
(
my_ôem
, 
k
ËË
adv™˚
();

621 
	gc⁄cuºít_queue_ôî©‹_ba£_v3
::
c⁄cuºít_queue_ôî©‹_ba£_v3
–c⁄° 
c⁄cuºít_queue_ba£
& 
queue
 ) {

622 
öôülize
(
queue
,0);

625 
	gc⁄cuºít_queue_ôî©‹_ba£_v3
::
c⁄cuºít_queue_ôî©‹_ba£_v3
–c⁄° 
c⁄cuºít_queue_ba£
& 
queue
, 
size_t
 
off£t_of_œ°
 ) {

626 
öôülize
(
queue
,
off£t_of_œ°
);

629 
	gc⁄cuºít_queue_ôî©‹_ba£_v3
::
assign
–c⁄° 
c⁄cuºít_queue_ôî©‹_ba£
& 
Ÿhî
 ) {

630 if–
my_ªp
!=
Ÿhî
.my_rep ) {

631 if–
my_ªp
 ) {

632 
ˇche_Æig√d_Æloˇt‹
<
c⁄cuºít_queue_ôî©‹_ªp
>().
dóŒoˇã
(
my_ªp
, 1);

633 
	gmy_ªp
 = 
NULL
;

635 if–
	gŸhî
.
	gmy_ªp
 ) {

636 
	gmy_ªp
 = 
ˇche_Æig√d_Æloˇt‹
<
c⁄cuºít_queue_ôî©‹_ªp
>().
Æloˇã
(1);

637 
√w
–
my_ªp
 ) 
c⁄cuºít_queue_ôî©‹_ªp
–*
Ÿhî
.my_rep );

640 
	gmy_ôem
 = 
Ÿhî
.
my_ôem
;

643 
	gc⁄cuºít_queue_ôî©‹_ba£_v3
::
adv™˚
() {

644 
__TBB_ASSERT
–
my_ôem
, "attemptÅo increment iteratorÖastÉnd of queue" );

645 
size_t
 
	gk
 = 
my_ªp
->
hód_cou¡î
;

646 c⁄° 
	gc⁄cuºít_queue_ba£
& 
	gqueue
 = 
my_ªp
->
my_queue
;

647 #i‡
TBB_USE_ASSERT


648 * 
	gtmp
;

649 
	gmy_ªp
->
gë_ôem
(
tmp
,
k
);

650 
__TBB_ASSERT
–
my_ôem
==
tmp
, 
NULL
 );

652 
size_t
 
	gi
 = 
modulo_powî_of_two
–
k
/
c⁄cuºít_queue_ªp
::
n_queue
, 
queue
.
ôems_≥r_∑ge
 );

653 if–
	gi
==
queue
.
ôems_≥r_∑ge
-1 ) {

654 
c⁄cuºít_queue_ba£
::
∑ge
*& 
roŸ
 = 
my_ªp
->
¨øy
[
c⁄cuºít_queue_ªp
::
ödex
(
k
)];

655 
	groŸ
 = 
roŸ
->
√xt
;

658 
	gmy_ªp
->
	ghód_cou¡î
 = ++
k
;

659 if–!
	gmy_ªp
->
gë_ôem
(
my_ôem
, 
k
ËË
adv™˚
();

662 
	gc⁄cuºít_queue_ôî©‹_ba£_v3
::~
c⁄cuºít_queue_ôî©‹_ba£_v3
() {

664 
ˇche_Æig√d_Æloˇt‹
<
c⁄cuºít_queue_ôî©‹_ªp
>().
dóŒoˇã
(
my_ªp
, 1);

665 
	gmy_ªp
 = 
NULL
;

	@viper/concurrentqueue-src/benchmarks/tbb/concurrent_queue.h

21 #i‚de‡
__TBB_c⁄cuºít_queue_H


22 
	#__TBB_c⁄cuºít_queue_H


	)

24 
	~"öã∫Æ/_c⁄cuºít_queue_im∂.h
"

26 
«me•a˚
 
	gtbb
 {

28 
«me•a˚
 
	g°ri˘_µl
 {

34 
	gãm∂©e
<
ty≥«me
 
	gT
,Åy≥«mê
	gA
 = 
ˇche_Æig√d_Æloˇt‹
<
T
> >

35 
˛ass
 
c⁄cuºít_queue
: 
public
 
öã∫Æ
::
c⁄cuºít_queue_ba£_v3
<
T
> {

36 
ãm∂©e
<
ty≥«me
 
C⁄èöî
,Åy≥«mê
VÆue
> 
‰õnd
 
˛ass
 
öã∫Æ
::
c⁄cuºít_queue_ôî©‹
;

39 
ty≥«me
 
	tA
::
	tãm∂©e
 
	tªböd
<>::
	tŸhî
 
	t∑ge_Æloˇt‹_ty≥
;

40 
∑ge_Æloˇt‹_ty≥
 
	gmy_Æloˇt‹
;

43  
vútuÆ
 *
Æloˇã_block
–
size_t
 
n
 ) {

44 *
	gb
 = 
ªöãΩªt_ˇ°
<*>(
my_Æloˇt‹
.
Æloˇã
–
n
 ));

45 if–!
	gb
 )

46 
	göã∫Æ
::
throw_ex˚±i⁄
(
öã∫Æ
::
eid_bad_Æloc
);

47  
	gb
;

51  
vútuÆ
 
dóŒoˇã_block
–*
b
, 
size_t
 
n
 ) {

52 
	gmy_Æloˇt‹
.
dóŒoˇã
–
ªöãΩªt_ˇ°
<*>(
b
), 
n
 );

55 
c›y_c⁄°ru˘_ôem
(
T
* 
loˇti⁄
, c⁄° * 
§c
){

56 
√w
 (
loˇti⁄
Ë
T
(*
°©ic_ˇ°
<c⁄° T*>(
§c
));

59 #i‡
__TBB_CPP11_RVALUE_REF_PRESENT


60 
move_c⁄°ru˘_ôem
(
T
* 
loˇti⁄
, c⁄° * 
§c
) {

61 
√w
 (
loˇti⁄
Ë
T
–
°d
::
move
(*
°©ic_ˇ°
<T*>(
c⁄°_ˇ°
<*>(
§c
))) );

64 
	gpublic
:

66 
T
 
	tvÆue_ty≥
;

69 
	gT
& 
	tª„ªn˚
;

72 c⁄° 
	tT
& 
	tc⁄°_ª„ªn˚
;

75 
size_t
 
	tsize_ty≥
;

78 
±rdiff_t
 
	tdif„ªn˚_ty≥
;

81 
A
 
	tÆloˇt‹_ty≥
;

84 
ex∂icô
 
c⁄cuºít_queue
(c⁄° 
Æloˇt‹_ty≥
& 
a
 =állocator_type()) :

85 
my_Æloˇt‹
–
a
 )

90 
ãm∂©e
<
ty≥«me
 
I≈utIãøt‹
>

91 
c⁄cuºít_queue
–
I≈utIãøt‹
 
begö
, I≈utIãøt‹ 
íd
, c⁄° 
Æloˇt‹_ty≥
& 
a
 =állocator_type()) :

92 
my_Æloˇt‹
–
a
 )

94  ; 
	gbegö
 !
íd
; ++begin )

95 
	gthis
->
push
(*
begö
);

99 
c⁄cuºít_queue
–c⁄° c⁄cuºít_queue& 
§c
, c⁄° 
Æloˇt‹_ty≥
& 
a
 =állocator_type()) :

100 
öã∫Æ
::
c⁄cuºít_queue_ba£_v3
<
T
>(), 
my_Æloˇt‹
–
a
 )

102 
	gthis
->
assign
–
§c
, 
c›y_c⁄°ru˘_ôem
 );

105 #i‡
__TBB_CPP11_RVALUE_REF_PRESENT


107 
c⁄cuºít_queue
–c⁄cuºít_queue&& 
§c
 ) :

108 
öã∫Æ
::
c⁄cuºít_queue_ba£_v3
<
T
>(), 
my_Æloˇt‹
–
°d
::
move
(
§c
.my_allocator) )

110 
this
->
öã∫Æ_sw≠
–
§c
 );

113 
c⁄cuºít_queue
–c⁄cuºít_queue&& 
§c
, c⁄° 
Æloˇt‹_ty≥
& 
a
 ) :

114 
öã∫Æ
::
c⁄cuºít_queue_ba£_v3
<
T
>(), 
my_Æloˇt‹
–
a
 )

118 if–
	gmy_Æloˇt‹
 =
§c
.
my_Æloˇt‹
) {

119 
this
->
öã∫Æ_sw≠
–
§c
 );

122 
	gthis
->
assign
–
§c
, 
move_c⁄°ru˘_ôem
 );

123 
	g§c
.
˛ór
();

129 ~
c⁄cuºít_queue
();

132 
push
–c⁄° 
T
& 
sour˚
 ) {

133 
	gthis
->
öã∫Æ_push
–&
sour˚
, 
c›y_c⁄°ru˘_ôem
 );

136 #i‡
__TBB_CPP11_RVALUE_REF_PRESENT


137 
push
–
T
&& 
sour˚
 ) {

138 
	gthis
->
öã∫Æ_push
–&
sour˚
, 
move_c⁄°ru˘_ôem
 );

141 #i‡
__TBB_CPP11_VARIADIC_TEMPLATES_PRESENT


142 
	gãm∂©e
<
	gty≥«me
... 
	gArgumíts
>

143 
em∂a˚
–
Argumíts
&&... 
¨gs
 ) {

144 
push
–
T
(
°d
::
f‹w¨d
<
Argumíts
>–
¨gs
 )...) );

152 
boﬁ
 
åy_p›
–
T
& 
ªsu…
 ) {

153  
	gthis
->
öã∫Æ_åy_p›
–&
ªsu…
 );

157 
size_ty≥
 
unß„_size
(Ëc⁄° { 
	gthis
->
öã∫Æ_size
();}

160 
boﬁ
 
em±y
(Ëc⁄° { 
	gthis
->
öã∫Æ_em±y
();}

163 
˛ór
() ;

166 
Æloˇt‹_ty≥
 
gë_Æloˇt‹
(Ëc⁄° {  
	gthis
->
	gmy_Æloˇt‹
; }

168 
	göã∫Æ
::
	tc⁄cuºít_queue_ôî©‹
<
	tc⁄cuºít_queue
,
	tT
> 
	tôî©‹
;

169 
	göã∫Æ
::
	tc⁄cuºít_queue_ôî©‹
<
	tc⁄cuºít_queue
,c⁄° 
	tT
> 
	tc⁄°_ôî©‹
;

174 
ôî©‹
 
unß„_begö
(Ë{ iãøt‹(*
this
);}

175 
ôî©‹
 
unß„_íd
() { iterator();}

176 
c⁄°_ôî©‹
 
unß„_begö
(Ëc⁄° { c⁄°_ôî©‹(*
this
);}

177 
c⁄°_ôî©‹
 
unß„_íd
() const { const_iterator();}

180 
	gãm∂©e
<
ty≥«me
 
	gT
, 
˛ass
 
	gA
>

181 
	gc⁄cuºít_queue
<
	gT
,
	gA
>::~
c⁄cuºít_queue
() {

182 
˛ór
();

183 
	gthis
->
öã∫Æ_föish_˛ór
();

186 
	gãm∂©e
<
ty≥«me
 
	gT
, 
˛ass
 
	gA
>

187 
	gc⁄cuºít_queue
<
	gT
,
	gA
>::
˛ór
() {

188  !
em±y
() ) {

189 
T
 
vÆue
;

190 
	gthis
->
öã∫Æ_åy_p›
(&
vÆue
);

202 
	gãm∂©e
<
ty≥«me
 
	gT
, 
˛ass
 
	gA
 = 
ˇche_Æig√d_Æloˇt‹
<
T
> >

203 ˛as†
	cc⁄cuºít_bounded_queue
: 
public
 
öã∫Æ
::
c⁄cuºít_queue_ba£_v8
 {

204 
ãm∂©e
<
ty≥«me
 
C⁄èöî
,Åy≥«mê
VÆue
> 
‰õnd
 
˛ass
 
öã∫Æ
::
c⁄cuºít_queue_ôî©‹
;

207 
ty≥«me
 
	tA
::
	tãm∂©e
 
	tªböd
<>::
	tŸhî
 
	t∑ge_Æloˇt‹_ty≥
;

208 
∑ge_Æloˇt‹_ty≥
 
	gmy_Æloˇt‹
;

210 
ty≥«me
 
	tc⁄cuºít_queue_ba£_v3
::
	t∑dded_∑ge
<
	tT
>Öadded_page;

211 
ty≥«me
 
	tc⁄cuºít_queue_ba£_v3
::
	tc›y_•ecifics
 copy_specifics;

214 ˛as†
	cde°royî
: 
öã∫Æ
::
no_c›y
 {

215 
T
& 
my_vÆue
;

216 
	gpublic
:

217 
de°royî
–
T
& 
vÆue
 ) : 
my_vÆue
(value) {}

218 ~
de°royî
(Ë{
my_vÆue
.~
T
();}

221 
	gT
& 
gë_ªf
–
∑ge
& 
p
, 
size_t
 
ödex
 ) {

222 
__TBB_ASSERT
–
ödex
<
ôems_≥r_∑ge
, 
NULL
 );

223  (&
	g°©ic_ˇ°
<
	g∑dded_∑ge
*>(°©ic_ˇ°<*>(&
	gp
))->
	gœ°
)[
ödex
];

226  
vútuÆ
 
c›y_ôem
–
∑ge
& 
d°
, 
size_t
 
ödex
, c⁄° * 
§c
 ) {

227 
√w
–&
gë_ªf
(
d°
,
ödex
ËË
T
(*
°©ic_ˇ°
<c⁄° T*>(
§c
));

230 #i‡
__TBB_CPP11_RVALUE_REF_PRESENT


231  
vútuÆ
 
move_ôem
–
∑ge
& 
d°
, 
size_t
 
ödex
, c⁄° * 
§c
 ) {

232 
√w
–&
gë_ªf
(
d°
,
ödex
ËË
T
–
°d
::
move
(*
°©ic_ˇ°
<T*>(
c⁄°_ˇ°
<*>(
§c
))) );

235  
vútuÆ
 
move_ôem
–
∑ge
&, 
size_t
, const * ) {

236 
__TBB_ASSERT
–
Ál£
, "Unreachable code" );

240  
vútuÆ
 
c›y_∑ge_ôem
–
∑ge
& 
d°
, 
size_t
 
dödex
, c⁄°Öage& 
§c
, size_à
södex
 ) {

241 
√w
–&
gë_ªf
(
d°
,
dödex
ËË
T
–gë_ªf–
c⁄°_ˇ°
<
∑ge
&>(
§c
), 
södex
 ) );

244 #i‡
__TBB_CPP11_RVALUE_REF_PRESENT


245  
vútuÆ
 
move_∑ge_ôem
–
∑ge
& 
d°
, 
size_t
 
dödex
, c⁄°Öage& 
§c
, size_à
södex
 ) {

246 
√w
–&
gë_ªf
(
d°
,
dödex
ËË
T
–
°d
::
move
(gë_ªf–
c⁄°_ˇ°
<
∑ge
&>(
§c
), 
södex
 )) );

249  
vútuÆ
 
move_∑ge_ôem
–
∑ge
&, 
size_t
, constÖage&, size_t ) {

250 
__TBB_ASSERT
–
Ál£
, "Unreachable code" );

254  
vútuÆ
 
assign_™d_de°roy_ôem
–* 
d°
, 
∑ge
& 
§c
, 
size_t
 
ödex
 ) {

255 
	gT
& 
	g‰om
 = 
gë_ªf
(
§c
,
ödex
);

256 
de°royî
 
d
(
‰om
);

257 *
	g°©ic_ˇ°
<
	gT
*>(
	gd°
Ë
tbb
::
öã∫Æ
::
move
–
‰om
 );

260  
vútuÆ
 
∑ge
 *
Æloˇã_∑ge
() {

261 
size_t
 
	gn
 = (
∑dded_∑ge
Ë+ (
ôems_≥r_∑ge
-1)*(
T
);

262 
∑ge
 *
	gp
 = 
ªöãΩªt_ˇ°
<∑ge*>(
my_Æloˇt‹
.
Æloˇã
–
n
 ));

263 if–!
	gp
 )

264 
	göã∫Æ
::
throw_ex˚±i⁄
(
öã∫Æ
::
eid_bad_Æloc
);

265  
	gp
;

268  
vútuÆ
 
dóŒoˇã_∑ge
–
∑ge
 *
p
 ) {

269 
size_t
 
	gn
 = (
∑dded_∑ge
Ë+ (
ôems_≥r_∑ge
-1)*(
T
);

270 
	gmy_Æloˇt‹
.
dóŒoˇã
–
ªöãΩªt_ˇ°
<*>(
p
), 
n
 );

273 
	gpublic
:

275 
T
 
	tvÆue_ty≥
;

278 
A
 
	tÆloˇt‹_ty≥
;

281 
	gT
& 
	tª„ªn˚
;

284 c⁄° 
	tT
& 
	tc⁄°_ª„ªn˚
;

289 
	g°d
::
	t±rdiff_t
 
	tsize_ty≥
;

292 
	g°d
::
	t±rdiff_t
 
	tdif„ªn˚_ty≥
;

295 
ex∂icô
 
c⁄cuºít_bounded_queue
(c⁄° 
Æloˇt‹_ty≥
& 
a
 =állocator_type()) :

296 
c⁄cuºít_queue_ba£_v8
–(
T
Ë), 
my_Æloˇt‹
–
a
 )

301 
c⁄cuºít_bounded_queue
–c⁄° c⁄cuºít_bounded_queue& 
§c
, c⁄° 
Æloˇt‹_ty≥
& 
a
 =állocator_type())

302 : 
c⁄cuºít_queue_ba£_v8
–(
T
Ë), 
my_Æloˇt‹
–
a
 )

304 
assign
–
§c
 );

307 #i‡
__TBB_CPP11_RVALUE_REF_PRESENT


309 
c⁄cuºít_bounded_queue
–c⁄cuºít_bounded_queue&& 
§c
 )

310 : 
c⁄cuºít_queue_ba£_v8
–(
T
Ë), 
my_Æloˇt‹
–
°d
::
move
(
§c
.my_allocator) )

312 
öã∫Æ_sw≠
–
§c
 );

315 
c⁄cuºít_bounded_queue
–c⁄cuºít_bounded_queue&& 
§c
, c⁄° 
Æloˇt‹_ty≥
& 
a
 )

316 : 
c⁄cuºít_queue_ba£_v8
–(
T
Ë), 
my_Æloˇt‹
–
a
 )

320 if–
	gmy_Æloˇt‹
 =
§c
.
my_Æloˇt‹
) {

321 
this
->
öã∫Æ_sw≠
–
§c
 );

324 
	gthis
->
move_c⁄ã¡
–
§c
 );

325 
	g§c
.
˛ór
();

331 
	gãm∂©e
<
ty≥«me
 
	gI≈utIãøt‹
>

332 
c⁄cuºít_bounded_queue
–
I≈utIãøt‹
 
begö
, I≈utIãøt‹ 
íd
,

333 c⁄° 
Æloˇt‹_ty≥
& 
a
 =állocator_type())

334 : 
c⁄cuºít_queue_ba£_v8
–(
T
Ë), 
my_Æloˇt‹
–
a
 )

336  ; 
	gbegö
 !
íd
; ++begin )

337 
öã∫Æ_push_if_nŸ_fuŒ
(&*
begö
);

341 ~
c⁄cuºít_bounded_queue
();

344 
push
–c⁄° 
T
& 
sour˚
 ) {

345 
öã∫Æ_push
–&
sour˚
 );

348 #i‡
__TBB_CPP11_RVALUE_REF_PRESENT


350 
push
–
T
&& 
sour˚
 ) {

351 
öã∫Æ_push_move
–&
sour˚
 );

354 #i‡
__TBB_CPP11_VARIADIC_TEMPLATES_PRESENT


355 
	gãm∂©e
<
	gty≥«me
... 
	gArgumíts
>

356 
em∂a˚
–
Argumíts
&&... 
¨gs
 ) {

357 
push
–
T
(
°d
::
f‹w¨d
<
Argumíts
>–
¨gs
 )...) );

364 
p›
–
T
& 
de°ö©i⁄
 ) {

365 
öã∫Æ_p›
–&
de°ö©i⁄
 );

368 #i‡
TBB_USE_EXCEPTIONS


370 
ab‹t
() {

371 
öã∫Æ_ab‹t
();

378 
boﬁ
 
åy_push
–c⁄° 
T
& 
sour˚
 ) {

379  
öã∫Æ_push_if_nŸ_fuŒ
–&
sour˚
 );

382 #i‡
__TBB_CPP11_RVALUE_REF_PRESENT


386 
boﬁ
 
åy_push
–
T
&& 
sour˚
 ) {

387  
öã∫Æ_push_move_if_nŸ_fuŒ
–&
sour˚
 );

389 #i‡
__TBB_CPP11_VARIADIC_TEMPLATES_PRESENT


390 
	gãm∂©e
<
	gty≥«me
... 
	gArgumíts
>

391 
boﬁ
 
åy_em∂a˚
–
Argumíts
&&... 
¨gs
 ) {

392  
åy_push
–
T
(
°d
::
f‹w¨d
<
Argumíts
>–
¨gs
 )...) );

400 
boﬁ
 
åy_p›
–
T
& 
de°ö©i⁄
 ) {

401  
öã∫Æ_p›_if_¥e£¡
–&
de°ö©i⁄
 );

408 
size_ty≥
 
size
(Ëc⁄° { 
öã∫Æ_size
();}

411 
boﬁ
 
em±y
(Ëc⁄° { 
öã∫Æ_em±y
();}

414 
size_ty≥
 
ˇ∑côy
() const {

415  
	gmy_ˇ∑côy
;

421 
£t_ˇ∑côy
–
size_ty≥
 
√w_ˇ∑côy
 ) {

422 
öã∫Æ_£t_ˇ∑côy
–
√w_ˇ∑côy
, (
T
) );

426 
Æloˇt‹_ty≥
 
gë_Æloˇt‹
(Ëc⁄° {  
	gthis
->
	gmy_Æloˇt‹
; }

429 
˛ór
() ;

431 
	göã∫Æ
::
	tc⁄cuºít_queue_ôî©‹
<
	tc⁄cuºít_bounded_queue
,
	tT
> 
	tôî©‹
;

432 
	göã∫Æ
::
	tc⁄cuºít_queue_ôî©‹
<
	tc⁄cuºít_bounded_queue
,c⁄° 
	tT
> 
	tc⁄°_ôî©‹
;

437 
ôî©‹
 
unß„_begö
(Ë{ iãøt‹(*
this
);}

438 
ôî©‹
 
unß„_íd
() { iterator();}

439 
c⁄°_ôî©‹
 
unß„_begö
(Ëc⁄° { c⁄°_ôî©‹(*
this
);}

440 
c⁄°_ôî©‹
 
unß„_íd
() const { const_iterator();}

444 
	gãm∂©e
<
ty≥«me
 
	gT
, 
˛ass
 
	gA
>

445 
	gc⁄cuºít_bounded_queue
<
	gT
,
	gA
>::~
	$c⁄cuºít_bounded_queue
() {

446 
	`˛ór
();

447 
	`öã∫Æ_föish_˛ór
();

448 
	}
}

450 
	gãm∂©e
<
ty≥«me
 
	gT
, 
˛ass
 
	gA
>

451 
	gc⁄cuºít_bounded_queue
<
	gT
,
	gA
>::
	$˛ór
() {

452  !
	`em±y
() ) {

453 
T
 
vÆue
;

454 
	`öã∫Æ_p›_if_¥e£¡
(&
vÆue
);

456 
	}
}

458 
usög
 
	g°ri˘_µl
::
c⁄cuºít_queue
;

	@viper/concurrentqueue-src/benchmarks/tbb/concurrent_unordered_map.h

24 #i‚de‡
__TBB_c⁄cuºít_un‹dîed_m≠_H


25 
	#__TBB_c⁄cuºít_un‹dîed_m≠_H


	)

27 
	~"öã∫Æ/_c⁄cuºít_un‹dîed_im∂.h
"

29 
«me•a˚
 
	gtbb


32 
«me•a˚
 
	göãrÁ˚5
 {

35 
	gãm∂©e
<
ty≥«me
 
	gKey
,Åy≥«mê
	gT
,Åy≥«mê
	gHash_com∑ª
,Åy≥«mê
	gAŒoˇt‹
, 
boﬁ
 
	gAŒow_mu…im≠pög
>

36 ˛as†
	cc⁄cuºít_un‹dîed_m≠_åaôs


38 
	g¥Ÿe˘ed
:

39 
°d
::
	t∑ú
<c⁄° 
	tKey
, 
	tT
> 
	tvÆue_ty≥
;

40 
Key
 
	tkey_ty≥
;

41 
Hash_com∑ª
 
	thash_com∑ª
;

42 
ty≥«me
 
	tAŒoˇt‹
::
	tãm∂©e
 
	tªböd
<
	tvÆue_ty≥
>::
	tŸhî
 
	tÆloˇt‹_ty≥
;

43 íum { 
	gÆlow_mu…im≠pög
 = 
AŒow_mu…im≠pög
 };

45 
c⁄cuºít_un‹dîed_m≠_åaôs
(Ë: 
my_hash_com∑ª
() {}

46 
c⁄cuºít_un‹dîed_m≠_åaôs
(c⁄° 
hash_com∑ª
& 
hc
Ë: 
my_hash_com∑ª
(hc) {}

48 
˛ass
 
vÆue_com∑ª
 : 
public
 
°d
::
bö¨y_fun˘i⁄
<
vÆue_ty≥
, 
	gvÆue_ty≥
, 
	gboﬁ
>

50 
‰õnd
 
˛ass
 
	gc⁄cuºít_un‹dîed_m≠_åaôs
<
	gKey
, 
	gT
, 
	gHash_com∑ª
, 
	gAŒoˇt‹
, 
	gAŒow_mu…im≠pög
>;

52 
	gpublic
:

53 
boﬁ
 
›î©‹
()(c⁄° 
vÆue_ty≥
& 
À·
, c⁄° 
	gvÆue_ty≥
& 
	gright
) const

55  (
my_hash_com∑ª
(
À·
.
fú°
, 
right
.first));

58 
vÆue_com∑ª
(c⁄° 
hash_com∑ª
& 
com∑øt‹
Ë: 
my_hash_com∑ª
(comparator) {}

60 
¥Ÿe˘ed
:

61 
hash_com∑ª
 
my_hash_com∑ª
;

64 
	gãm∂©e
<
˛ass
 
	gTy≥1
, cœs†
	gTy≥2
>

65 c⁄° 
	gKey
& 
gë_key
(c⁄° 
°d
::
∑ú
<
Ty≥1
, 
Ty≥2
>& 
vÆue
) {

66  (
	gvÆue
.
	gfú°
);

69 
hash_com∑ª
 
	gmy_hash_com∑ª
;

72 
	gãm∂©e
 <
ty≥«me
 
	gKey
,Åy≥«mê
	gT
,Åy≥«mê
	gHashî
 = 
tbb
::
tbb_hash
<
Key
>,Åy≥«mê
	gKey_equÆôy
 = 
°d
::
equÆ_to
<Key>,

73 
ty≥«me
 
	gAŒoˇt‹
 = 
tbb
::
tbb_Æloˇt‹
<
°d
::
∑ú
<c⁄° 
Key
, 
	gT
> > >

74 
˛ass
 
	gc⁄cuºít_un‹dîed_m≠
 :

75 
public
 
öã∫Æ
::
c⁄cuºít_un‹dîed_ba£
< 
c⁄cuºít_un‹dîed_m≠_åaôs
<
Key
, 
	gT
,

76 
	göã∫Æ
::
hash_com∑ª
<
Key
, 
	gHashî
, 
	gKey_equÆôy
>, 
	gAŒoˇt‹
, 
	gÁl£
> >

79 
	göã∫Æ
::
	thash_com∑ª
<
	tKey
, 
	tHashî
, 
	tKey_equÆôy
> hash_compare;

80 
	gc⁄cuºít_un‹dîed_m≠_åaôs
<
	tKey
, 
	tT
, 
	thash_com∑ª
, 
	tAŒoˇt‹
, 
	tÁl£
> 
	tåaôs_ty≥
;

81 
	göã∫Æ
::
	tc⁄cuºít_un‹dîed_ba£
< 
	tåaôs_ty≥
 > 
	tba£_ty≥
;

82 #i‡
__TBB_EXTRA_DEBUG


83 
	gpublic
:

85 
usög
 
åaôs_ty≥
::
Ælow_mu…im≠pög
;

86 
	gpublic
:

87 
usög
 
ba£_ty≥
::
íd
;

88 
usög
 
	gba£_ty≥
::
föd
;

89 
usög
 
	gba£_ty≥
::
ö£π
;

92 
Key
 
	tkey_ty≥
;

93 
ty≥«me
 
	tba£_ty≥
::
	tvÆue_ty≥
 value_type;

94 
T
 
	tm≠≥d_ty≥
;

95 
Hashî
 
	thashî
;

96 
Key_equÆôy
 
	tkey_equÆ
;

97 
hash_com∑ª
 
	tkey_com∑ª
;

99 
ty≥«me
 
	tba£_ty≥
::
	tÆloˇt‹_ty≥
állocator_type;

100 
ty≥«me
 
	tba£_ty≥
::
	tpoöãr
Öointer;

101 
ty≥«me
 
	tba£_ty≥
::
	tc⁄°_poöãr
 const_pointer;

102 
ty≥«me
 
	tba£_ty≥
::
	tª„ªn˚
Ñeference;

103 
ty≥«me
 
	tba£_ty≥
::
	tc⁄°_ª„ªn˚
 const_reference;

105 
ty≥«me
 
	tba£_ty≥
::
	tsize_ty≥
 size_type;

106 
ty≥«me
 
	tba£_ty≥
::
	tdif„ªn˚_ty≥
 difference_type;

108 
ty≥«me
 
	tba£_ty≥
::
	tôî©‹
 iterator;

109 
ty≥«me
 
	tba£_ty≥
::
	tc⁄°_ôî©‹
 const_iterator;

110 
ty≥«me
 
	tba£_ty≥
::
	tôî©‹
 
	tloˇl_ôî©‹
;

111 
ty≥«me
 
	tba£_ty≥
::
	tc⁄°_ôî©‹
 
	tc⁄°_loˇl_ôî©‹
;

114 
ex∂icô
 
c⁄cuºít_un‹dîed_m≠
(
size_ty≥
 
n_of_buckës
 = 
ba£_ty≥
::
öôül_buckë_numbî
,

115 c⁄° 
hashî
& 
_Hashî
 = hashî(), c⁄° 
key_equÆ
& 
_Key_equÆôy
 = key_equal(),

116 c⁄° 
Æloˇt‹_ty≥
& 
a
 =állocator_type())

117 : 
ba£_ty≥
(
n_of_buckës
, 
key_com∑ª
(
_Hashî
, 
_Key_equÆôy
), 
a
)

121 
c⁄cuºít_un‹dîed_m≠
(c⁄° 
AŒoˇt‹
& 
a
Ë: 
ba£_ty≥
(ba£_ty≥::
öôül_buckë_numbî
, 
key_com∑ª
(),á)

125 
	gãm∂©e
 <
ty≥«me
 
	gIãøt‹
>

126 
c⁄cuºít_un‹dîed_m≠
(
Iãøt‹
 
fú°
, Iãøt‹ 
œ°
, 
size_ty≥
 
n_of_buckës
 = 
ba£_ty≥
::
öôül_buckë_numbî
,

127 c⁄° 
hashî
& 
_Hashî
 = hashî(), c⁄° 
key_equÆ
& 
_Key_equÆôy
 = key_equal(),

128 c⁄° 
Æloˇt‹_ty≥
& 
a
 =állocator_type())

129 : 
ba£_ty≥
(
n_of_buckës
, 
key_com∑ª
(
_Hashî
, 
_Key_equÆôy
), 
a
)

131 
ö£π
(
fú°
, 
œ°
);

134 #i‡
__TBB_INITIALIZER_LISTS_PRESENT


136 
c⁄cuºít_un‹dîed_m≠
(
°d
::
öôülizî_li°
<
vÆue_ty≥
> 
û
, 
size_ty≥
 
n_of_buckës
 = 
ba£_ty≥
::
öôül_buckë_numbî
,

137 c⁄° 
hashî
& 
_Hashî
 = hashî(), c⁄° 
key_equÆ
& 
_Key_equÆôy
 = key_equal(),

138 c⁄° 
Æloˇt‹_ty≥
& 
a
 =állocator_type())

139 : 
ba£_ty≥
(
n_of_buckës
, 
key_com∑ª
(
_Hashî
, 
_Key_equÆôy
), 
a
)

141 
	gthis
->
ö£π
(
û
.
begö
(),û.
íd
());

145 #i‡
__TBB_CPP11_RVALUE_REF_PRESENT
 && 
__TBB_CPP11_IMPLICIT_MOVE_MEMBERS_GENERATION_FOR_DERIVED_BROKEN


146 
c⁄cuºít_un‹dîed_m≠
(c⁄° c⁄cuºít_un‹dîed_m≠& 
èbÀ
)

147 : 
ba£_ty≥
(
èbÀ
)

151 
c⁄cuºít_un‹dîed_m≠
& 
›î©‹
=(c⁄° c⁄cuºít_un‹dîed_m≠& 
èbÀ
)

153  
°©ic_ˇ°
<
c⁄cuºít_un‹dîed_m≠
&>(
ba£_ty≥
::
›î©‹
=(
èbÀ
));

156 
c⁄cuºít_un‹dîed_m≠
(c⁄cuºít_un‹dîed_m≠&& 
èbÀ
)

157 : 
ba£_ty≥
(
°d
::
move
(
èbÀ
))

161 
c⁄cuºít_un‹dîed_m≠
& 
›î©‹
=(c⁄cuºít_un‹dîed_m≠&& 
èbÀ
)

163  
°©ic_ˇ°
<
c⁄cuºít_un‹dîed_m≠
&>(
ba£_ty≥
::
›î©‹
=(
°d
::
move
(
èbÀ
)));

167 
c⁄cuºít_un‹dîed_m≠
(c⁄° c⁄cuºít_un‹dîed_m≠& 
èbÀ
, c⁄° 
AŒoˇt‹
& 
a
)

168 : 
ba£_ty≥
(
èbÀ
, 
a
)

172 #i‡
__TBB_CPP11_RVALUE_REF_PRESENT


173 
c⁄cuºít_un‹dîed_m≠
(c⁄cuºít_un‹dîed_m≠&& 
èbÀ
, c⁄° 
AŒoˇt‹
& 
a
Ë: 
ba£_ty≥
(
°d
::
move
(table),á)

178 
	gm≠≥d_ty≥
& 
	g›î©‹
[](c⁄° 
	gkey_ty≥
& 
	gkey
)

180 
ôî©‹
 
	gwhîe
 = 
föd
(
key
);

182 i‡(
	gwhîe
 =
íd
())

184 
whîe
 = 
ö£π
(
°d
::
∑ú
<
key_ty≥
, 
m≠≥d_ty≥
>(
key
, m≠≥d_ty≥())).
	gfú°
;

187  ((*
	gwhîe
).
	g£c⁄d
);

190 
	gm≠≥d_ty≥
& 
©
(c⁄° 
key_ty≥
& 
key
)

192 
ôî©‹
 
	gwhîe
 = 
föd
(
key
);

194 i‡(
	gwhîe
 =
íd
())

196 
tbb
::
öã∫Æ
::
throw_ex˚±i⁄
—bb::öã∫Æ::
eid_övÆid_key
);

199  ((*
	gwhîe
).
	g£c⁄d
);

202 c⁄° 
	gm≠≥d_ty≥
& 
©
(c⁄° 
key_ty≥
& 
key
) const

204 
c⁄°_ôî©‹
 
	gwhîe
 = 
föd
(
key
);

206 i‡(
	gwhîe
 =
íd
())

208 
tbb
::
öã∫Æ
::
throw_ex˚±i⁄
—bb::öã∫Æ::
eid_övÆid_key
);

211  ((*
	gwhîe
).
	g£c⁄d
);

215 
	gãm∂©e
 < 
ty≥«me
 
	gKey
,Åy≥«mê
	gT
,Åy≥«mê
	gHashî
 = 
tbb
::
tbb_hash
<
Key
>,Åy≥«mê
	gKey_equÆôy
 = 
°d
::
equÆ_to
<Key>,

216 
ty≥«me
 
	gAŒoˇt‹
 = 
tbb
::
tbb_Æloˇt‹
<
°d
::
∑ú
<c⁄° 
Key
, 
	gT
> > >

217 
˛ass
 
	gc⁄cuºít_un‹dîed_mu…im≠
 :

218 
public
 
öã∫Æ
::
c⁄cuºít_un‹dîed_ba£
< 
c⁄cuºít_un‹dîed_m≠_åaôs
< 
Key
, 
	gT
,

219 
	göã∫Æ
::
hash_com∑ª
<
Key
, 
	gHashî
, 
	gKey_equÆôy
>, 
	gAŒoˇt‹
, 
	gåue
> >

222 
	göã∫Æ
::
	thash_com∑ª
<
	tKey
, 
	tHashî
, 
	tKey_equÆôy
> hash_compare;

223 
	gc⁄cuºít_un‹dîed_m≠_åaôs
<
	tKey
, 
	tT
, 
	thash_com∑ª
, 
	tAŒoˇt‹
, 
	tåue
> 
	tåaôs_ty≥
;

224 
	göã∫Æ
::
	tc⁄cuºít_un‹dîed_ba£
<
	tåaôs_ty≥
> 
	tba£_ty≥
;

225 #i‡
__TBB_EXTRA_DEBUG


226 
	gpublic
:

228 
usög
 
åaôs_ty≥
::
Ælow_mu…im≠pög
;

229 
	gpublic
:

230 
usög
 
ba£_ty≥
::
ö£π
;

233 
Key
 
	tkey_ty≥
;

234 
ty≥«me
 
	tba£_ty≥
::
	tvÆue_ty≥
 value_type;

235 
T
 
	tm≠≥d_ty≥
;

236 
Hashî
 
	thashî
;

237 
Key_equÆôy
 
	tkey_equÆ
;

238 
hash_com∑ª
 
	tkey_com∑ª
;

240 
ty≥«me
 
	tba£_ty≥
::
	tÆloˇt‹_ty≥
állocator_type;

241 
ty≥«me
 
	tba£_ty≥
::
	tpoöãr
Öointer;

242 
ty≥«me
 
	tba£_ty≥
::
	tc⁄°_poöãr
 const_pointer;

243 
ty≥«me
 
	tba£_ty≥
::
	tª„ªn˚
Ñeference;

244 
ty≥«me
 
	tba£_ty≥
::
	tc⁄°_ª„ªn˚
 const_reference;

246 
ty≥«me
 
	tba£_ty≥
::
	tsize_ty≥
 size_type;

247 
ty≥«me
 
	tba£_ty≥
::
	tdif„ªn˚_ty≥
 difference_type;

249 
ty≥«me
 
	tba£_ty≥
::
	tôî©‹
 iterator;

250 
ty≥«me
 
	tba£_ty≥
::
	tc⁄°_ôî©‹
 const_iterator;

251 
ty≥«me
 
	tba£_ty≥
::
	tôî©‹
 
	tloˇl_ôî©‹
;

252 
ty≥«me
 
	tba£_ty≥
::
	tc⁄°_ôî©‹
 
	tc⁄°_loˇl_ôî©‹
;

255 
ex∂icô
 
c⁄cuºít_un‹dîed_mu…im≠
(
size_ty≥
 
n_of_buckës
 = 
ba£_ty≥
::
öôül_buckë_numbî
,

256 c⁄° 
hashî
& 
_Hashî
 = hashî(), c⁄° 
key_equÆ
& 
_Key_equÆôy
 = key_equal(),

257 c⁄° 
Æloˇt‹_ty≥
& 
a
 =állocator_type())

258 : 
ba£_ty≥
(
n_of_buckës
, 
key_com∑ª
(
_Hashî
, 
_Key_equÆôy
), 
a
)

262 
c⁄cuºít_un‹dîed_mu…im≠
(c⁄° 
AŒoˇt‹
& 
a
Ë: 
ba£_ty≥
(ba£_ty≥::
öôül_buckë_numbî
, 
key_com∑ª
(),á)

266 
	gãm∂©e
 <
ty≥«me
 
	gIãøt‹
>

267 
c⁄cuºít_un‹dîed_mu…im≠
(
Iãøt‹
 
fú°
, Iãøt‹ 
œ°
, 
size_ty≥
 
n_of_buckës
 = 
ba£_ty≥
::
öôül_buckë_numbî
,

268 c⁄° 
hashî
& 
_Hashî
 = hashî(), c⁄° 
key_equÆ
& 
_Key_equÆôy
 = key_equal(),

269 c⁄° 
Æloˇt‹_ty≥
& 
a
 =állocator_type())

270 : 
ba£_ty≥
(
n_of_buckës
,
key_com∑ª
(
_Hashî
,
_Key_equÆôy
), 
a
)

272 
ö£π
(
fú°
, 
œ°
);

275 #i‡
__TBB_INITIALIZER_LISTS_PRESENT


277 
c⁄cuºít_un‹dîed_mu…im≠
(
°d
::
öôülizî_li°
<
vÆue_ty≥
> 
û
, 
size_ty≥
 
n_of_buckës
 = 
ba£_ty≥
::
öôül_buckë_numbî
,

278 c⁄° 
hashî
& 
_Hashî
 = hashî(), c⁄° 
key_equÆ
& 
_Key_equÆôy
 = key_equal(),

279 c⁄° 
Æloˇt‹_ty≥
& 
a
 =állocator_type())

280 : 
ba£_ty≥
(
n_of_buckës
, 
key_com∑ª
(
_Hashî
, 
_Key_equÆôy
), 
a
)

282 
	gthis
->
ö£π
(
û
.
begö
(),û.
íd
());

286 #i‡
__TBB_CPP11_RVALUE_REF_PRESENT
 && 
__TBB_CPP11_IMPLICIT_MOVE_MEMBERS_GENERATION_FOR_DERIVED_BROKEN


287 
c⁄cuºít_un‹dîed_mu…im≠
(c⁄° c⁄cuºít_un‹dîed_mu…im≠& 
èbÀ
)

288 : 
ba£_ty≥
(
èbÀ
)

292 
c⁄cuºít_un‹dîed_mu…im≠
& 
›î©‹
=(c⁄° c⁄cuºít_un‹dîed_mu…im≠& 
èbÀ
)

294  
°©ic_ˇ°
<
c⁄cuºít_un‹dîed_mu…im≠
&>(
ba£_ty≥
::
›î©‹
=(
èbÀ
));

297 
c⁄cuºít_un‹dîed_mu…im≠
(c⁄cuºít_un‹dîed_mu…im≠&& 
èbÀ
)

298 : 
ba£_ty≥
(
°d
::
move
(
èbÀ
))

302 
c⁄cuºít_un‹dîed_mu…im≠
& 
›î©‹
=(c⁄cuºít_un‹dîed_mu…im≠&& 
èbÀ
)

304  
°©ic_ˇ°
<
c⁄cuºít_un‹dîed_mu…im≠
&>(
ba£_ty≥
::
›î©‹
=(
°d
::
move
(
èbÀ
)));

308 
c⁄cuºít_un‹dîed_mu…im≠
(c⁄° c⁄cuºít_un‹dîed_mu…im≠& 
èbÀ
, c⁄° 
AŒoˇt‹
& 
a
)

309 : 
ba£_ty≥
(
èbÀ
, 
a
)

313 #i‡
__TBB_CPP11_RVALUE_REF_PRESENT


314 
c⁄cuºít_un‹dîed_mu…im≠
(c⁄cuºít_un‹dîed_mu…im≠&& 
èbÀ
, c⁄° 
AŒoˇt‹
& 
a
Ë: 
ba£_ty≥
(
°d
::
move
(table),á)

321 
usög
 
	göãrÁ˚5
::
c⁄cuºít_un‹dîed_m≠
;

322 
usög
 
	göãrÁ˚5
::
c⁄cuºít_un‹dîed_mu…im≠
;

	@viper/concurrentqueue-src/benchmarks/tbb/concurrent_unordered_set.h

24 #i‚de‡
__TBB_c⁄cuºít_un‹dîed_£t_H


25 
	#__TBB_c⁄cuºít_un‹dîed_£t_H


	)

27 
	~"öã∫Æ/_c⁄cuºít_un‹dîed_im∂.h
"

29 
«me•a˚
 
	gtbb


32 
«me•a˚
 
	göãrÁ˚5
 {

35 
	gãm∂©e
<
ty≥«me
 
	gKey
,Åy≥«mê
	gHash_com∑ª
,Åy≥«mê
	gAŒoˇt‹
, 
boﬁ
 
	gAŒow_mu…im≠pög
>

36 ˛as†
	cc⁄cuºít_un‹dîed_£t_åaôs


38 
	g¥Ÿe˘ed
:

39 
Key
 
	tvÆue_ty≥
;

40 
Key
 
	tkey_ty≥
;

41 
Hash_com∑ª
 
	thash_com∑ª
;

42 
ty≥«me
 
	tAŒoˇt‹
::
	tãm∂©e
 
	tªböd
<
	tvÆue_ty≥
>::
	tŸhî
 
	tÆloˇt‹_ty≥
;

43 íum { 
	gÆlow_mu…im≠pög
 = 
AŒow_mu…im≠pög
 };

45 
c⁄cuºít_un‹dîed_£t_åaôs
(Ë: 
my_hash_com∑ª
() {}

46 
c⁄cuºít_un‹dîed_£t_åaôs
(c⁄° 
hash_com∑ª
& 
hc
Ë: 
my_hash_com∑ª
(hc) {}

48 
hash_com∑ª
 
	tvÆue_com∑ª
;

50 c⁄° 
	gKey
& 
gë_key
(c⁄° 
vÆue_ty≥
& 
vÆue
) {

51  
	gvÆue
;

54 
hash_com∑ª
 
	gmy_hash_com∑ª
;

57 
	gãm∂©e
 <
ty≥«me
 
	gKey
,Åy≥«mê
	gHashî
 = 
tbb
::
tbb_hash
<
Key
>,Åy≥«mê
	gKey_equÆôy
 = 
°d
::
equÆ_to
<Key>,Åy≥«mê
	gAŒoˇt‹
 =Åbb::
tbb_Æloˇt‹
<Key> >

58 
˛ass
 
c⁄cuºít_un‹dîed_£t
 : 
public
 
öã∫Æ
::
c⁄cuºít_un‹dîed_ba£
< 
c⁄cuºít_un‹dîed_£t_åaôs
<
Key
, 
	göã∫Æ
::
hash_com∑ª
<Key, 
	gHashî
, 
	gKey_equÆôy
>, 
	gAŒoˇt‹
, 
	gÁl£
> >

61 
	göã∫Æ
::
	thash_com∑ª
<
	tKey
, 
	tHashî
, 
	tKey_equÆôy
> hash_compare;

62 
	göã∫Æ
::
	tc⁄cuºít_un‹dîed_ba£
< 
	tc⁄cuºít_un‹dîed_£t_åaôs
<
	tKey
, 
	thash_com∑ª
, 
	tAŒoˇt‹
, 
	tÁl£
> > 
	tba£_ty≥
;

63 
	gc⁄cuºít_un‹dîed_£t_åaôs
<
	tKey
, 
	töã∫Æ
::
	thash_com∑ª
<Key, 
	tHashî
, 
	tKey_equÆôy
>, 
	tAŒoˇt‹
, 
	tÁl£
> 
	tåaôs_ty≥
;

64 #i‡
__TBB_EXTRA_DEBUG


65 
	gpublic
:

67 
usög
 
åaôs_ty≥
::
Ælow_mu…im≠pög
;

68 
	gpublic
:

69 
usög
 
ba£_ty≥
::
ö£π
;

72 
Key
 
	tkey_ty≥
;

73 
ty≥«me
 
	tba£_ty≥
::
	tvÆue_ty≥
 value_type;

74 
Key
 
	tm≠≥d_ty≥
;

75 
Hashî
 
	thashî
;

76 
Key_equÆôy
 
	tkey_equÆ
;

77 
hash_com∑ª
 
	tkey_com∑ª
;

79 
ty≥«me
 
	tba£_ty≥
::
	tÆloˇt‹_ty≥
állocator_type;

80 
ty≥«me
 
	tba£_ty≥
::
	tpoöãr
Öointer;

81 
ty≥«me
 
	tba£_ty≥
::
	tc⁄°_poöãr
 const_pointer;

82 
ty≥«me
 
	tba£_ty≥
::
	tª„ªn˚
Ñeference;

83 
ty≥«me
 
	tba£_ty≥
::
	tc⁄°_ª„ªn˚
 const_reference;

85 
ty≥«me
 
	tba£_ty≥
::
	tsize_ty≥
 size_type;

86 
ty≥«me
 
	tba£_ty≥
::
	tdif„ªn˚_ty≥
 difference_type;

88 
ty≥«me
 
	tba£_ty≥
::
	tôî©‹
 iterator;

89 
ty≥«me
 
	tba£_ty≥
::
	tc⁄°_ôî©‹
 const_iterator;

90 
ty≥«me
 
	tba£_ty≥
::
	tôî©‹
 
	tloˇl_ôî©‹
;

91 
ty≥«me
 
	tba£_ty≥
::
	tc⁄°_ôî©‹
 
	tc⁄°_loˇl_ôî©‹
;

94 
ex∂icô
 
c⁄cuºít_un‹dîed_£t
(
size_ty≥
 
n_of_buckës
 = 
ba£_ty≥
::
öôül_buckë_numbî
, c⁄° 
hashî
& 
a_hashî
 = hasher(),

95 c⁄° 
key_equÆ
& 
a_keyeq
 = key_equÆ(), c⁄° 
Æloˇt‹_ty≥
& 
a
 =állocator_type())

96 : 
ba£_ty≥
(
n_of_buckës
, 
key_com∑ª
(
a_hashî
, 
a_keyeq
), 
a
)

100 
c⁄cuºít_un‹dîed_£t
(c⁄° 
AŒoˇt‹
& 
a
Ë: 
ba£_ty≥
(ba£_ty≥::
öôül_buckë_numbî
, 
key_com∑ª
(),á)

104 
	gãm∂©e
 <
ty≥«me
 
	gIãøt‹
>

105 
c⁄cuºít_un‹dîed_£t
(
Iãøt‹
 
fú°
, Iãøt‹ 
œ°
, 
size_ty≥
 
n_of_buckës
 = 
ba£_ty≥
::
öôül_buckë_numbî
, c⁄° 
hashî
& 
a_hashî
 = hasher(),

106 c⁄° 
key_equÆ
& 
a_keyeq
 = key_equÆ(), c⁄° 
Æloˇt‹_ty≥
& 
a
 =állocator_type())

107 : 
ba£_ty≥
(
n_of_buckës
, 
key_com∑ª
(
a_hashî
, 
a_keyeq
), 
a
)

109 
ö£π
(
fú°
, 
œ°
);

112 #i‡
__TBB_INITIALIZER_LISTS_PRESENT


114 
c⁄cuºít_un‹dîed_£t
(
°d
::
öôülizî_li°
<
vÆue_ty≥
> 
û
, 
size_ty≥
 
n_of_buckës
 = 
ba£_ty≥
::
öôül_buckë_numbî
, c⁄° 
hashî
& 
a_hashî
 = hasher(),

115 c⁄° 
key_equÆ
& 
a_keyeq
 = key_equÆ(), c⁄° 
Æloˇt‹_ty≥
& 
a
 =állocator_type())

116 : 
ba£_ty≥
(
n_of_buckës
, 
key_com∑ª
(
a_hashî
, 
a_keyeq
), 
a
)

118 
	gthis
->
ö£π
(
û
.
begö
(),û.
íd
());

122 #i‡
__TBB_CPP11_RVALUE_REF_PRESENT
 && 
__TBB_CPP11_IMPLICIT_MOVE_MEMBERS_GENERATION_FOR_DERIVED_BROKEN


123 
c⁄cuºít_un‹dîed_£t
(c⁄° c⁄cuºít_un‹dîed_£t& 
èbÀ
)

124 : 
ba£_ty≥
(
èbÀ
)

128 
c⁄cuºít_un‹dîed_£t
& 
›î©‹
=(c⁄° c⁄cuºít_un‹dîed_£t& 
èbÀ
)

130  
°©ic_ˇ°
<
c⁄cuºít_un‹dîed_£t
&>(
ba£_ty≥
::
›î©‹
=(
èbÀ
));

133 
c⁄cuºít_un‹dîed_£t
(c⁄cuºít_un‹dîed_£t&& 
èbÀ
)

134 : 
ba£_ty≥
(
°d
::
move
(
èbÀ
))

138 
c⁄cuºít_un‹dîed_£t
& 
›î©‹
=(c⁄cuºít_un‹dîed_£t&& 
èbÀ
)

140  
°©ic_ˇ°
<
c⁄cuºít_un‹dîed_£t
&>(
ba£_ty≥
::
›î©‹
=(
°d
::
move
(
èbÀ
)));

144 
c⁄cuºít_un‹dîed_£t
(c⁄° c⁄cuºít_un‹dîed_£t& 
èbÀ
, c⁄° 
AŒoˇt‹
& 
a
)

145 : 
ba£_ty≥
(
èbÀ
, 
a
)

149 #i‡
__TBB_CPP11_RVALUE_REF_PRESENT


150 
c⁄cuºít_un‹dîed_£t
(c⁄cuºít_un‹dîed_£t&& 
èbÀ
, c⁄° 
AŒoˇt‹
& 
a
)

151 : 
ba£_ty≥
(
°d
::
move
(
èbÀ
), 
a
)

158 
	gãm∂©e
 <
ty≥«me
 
	gKey
,Åy≥«mê
	gHashî
 = 
tbb
::
tbb_hash
<
Key
>,Åy≥«mê
	gKey_equÆôy
 = 
°d
::
equÆ_to
<Key>,

159 
ty≥«me
 
	gAŒoˇt‹
 = 
tbb
::
tbb_Æloˇt‹
<
Key
> >

160 
˛ass
 
c⁄cuºít_un‹dîed_mu…i£t
 :

161 
public
 
öã∫Æ
::
c⁄cuºít_un‹dîed_ba£
< 
c⁄cuºít_un‹dîed_£t_åaôs
<
Key
,

162 
	göã∫Æ
::
hash_com∑ª
<
Key
, 
	gHashî
, 
	gKey_equÆôy
>, 
	gAŒoˇt‹
, 
	gåue
> >

165 
	göã∫Æ
::
	thash_com∑ª
<
	tKey
, 
	tHashî
, 
	tKey_equÆôy
> hash_compare;

166 
	gc⁄cuºít_un‹dîed_£t_åaôs
<
	tKey
, 
	thash_com∑ª
, 
	tAŒoˇt‹
, 
	tåue
> 
	tåaôs_ty≥
;

167 
	göã∫Æ
::
	tc⁄cuºít_un‹dîed_ba£
< 
	tåaôs_ty≥
 > 
	tba£_ty≥
;

168 #i‡
__TBB_EXTRA_DEBUG


169 
	gpublic
:

171 
usög
 
åaôs_ty≥
::
Ælow_mu…im≠pög
;

172 
	gpublic
:

173 
usög
 
ba£_ty≥
::
ö£π
;

176 
Key
 
	tkey_ty≥
;

177 
ty≥«me
 
	tba£_ty≥
::
	tvÆue_ty≥
 value_type;

178 
Key
 
	tm≠≥d_ty≥
;

179 
Hashî
 
	thashî
;

180 
Key_equÆôy
 
	tkey_equÆ
;

181 
hash_com∑ª
 
	tkey_com∑ª
;

183 
ty≥«me
 
	tba£_ty≥
::
	tÆloˇt‹_ty≥
állocator_type;

184 
ty≥«me
 
	tba£_ty≥
::
	tpoöãr
Öointer;

185 
ty≥«me
 
	tba£_ty≥
::
	tc⁄°_poöãr
 const_pointer;

186 
ty≥«me
 
	tba£_ty≥
::
	tª„ªn˚
Ñeference;

187 
ty≥«me
 
	tba£_ty≥
::
	tc⁄°_ª„ªn˚
 const_reference;

189 
ty≥«me
 
	tba£_ty≥
::
	tsize_ty≥
 size_type;

190 
ty≥«me
 
	tba£_ty≥
::
	tdif„ªn˚_ty≥
 difference_type;

192 
ty≥«me
 
	tba£_ty≥
::
	tôî©‹
 iterator;

193 
ty≥«me
 
	tba£_ty≥
::
	tc⁄°_ôî©‹
 const_iterator;

194 
ty≥«me
 
	tba£_ty≥
::
	tôî©‹
 
	tloˇl_ôî©‹
;

195 
ty≥«me
 
	tba£_ty≥
::
	tc⁄°_ôî©‹
 
	tc⁄°_loˇl_ôî©‹
;

198 
ex∂icô
 
c⁄cuºít_un‹dîed_mu…i£t
(
size_ty≥
 
n_of_buckës
 = 
ba£_ty≥
::
öôül_buckë_numbî
,

199 c⁄° 
hashî
& 
_Hashî
 = hashî(), c⁄° 
key_equÆ
& 
_Key_equÆôy
 = key_equal(),

200 c⁄° 
Æloˇt‹_ty≥
& 
a
 =állocator_type())

201 : 
ba£_ty≥
(
n_of_buckës
, 
key_com∑ª
(
_Hashî
, 
_Key_equÆôy
), 
a
)

205 
c⁄cuºít_un‹dîed_mu…i£t
(c⁄° 
AŒoˇt‹
& 
a
Ë: 
ba£_ty≥
(ba£_ty≥::
öôül_buckë_numbî
, 
key_com∑ª
(),á)

209 
	gãm∂©e
 <
ty≥«me
 
	gIãøt‹
>

210 
c⁄cuºít_un‹dîed_mu…i£t
(
Iãøt‹
 
fú°
, Iãøt‹ 
œ°
, 
size_ty≥
 
n_of_buckës
 = 
ba£_ty≥
::
öôül_buckë_numbî
,

211 c⁄° 
hashî
& 
_Hashî
 = hashî(), c⁄° 
key_equÆ
& 
_Key_equÆôy
 = key_equal(),

212 c⁄° 
Æloˇt‹_ty≥
& 
a
 =állocator_type())

213 : 
ba£_ty≥
(
n_of_buckës
, 
key_com∑ª
(
_Hashî
, 
_Key_equÆôy
), 
a
)

215 
ö£π
(
fú°
, 
œ°
);

218 #i‡
__TBB_INITIALIZER_LISTS_PRESENT


220 
c⁄cuºít_un‹dîed_mu…i£t
(
°d
::
öôülizî_li°
<
vÆue_ty≥
> 
û
, 
size_ty≥
 
n_of_buckës
 = 
ba£_ty≥
::
öôül_buckë_numbî
, c⁄° 
hashî
& 
a_hashî
 = hasher(),

221 c⁄° 
key_equÆ
& 
a_keyeq
 = key_equÆ(), c⁄° 
Æloˇt‹_ty≥
& 
a
 =állocator_type())

222 : 
ba£_ty≥
(
n_of_buckës
, 
key_com∑ª
(
a_hashî
, 
a_keyeq
), 
a
)

224 
	gthis
->
ö£π
(
û
.
begö
(),û.
íd
());

228 #i‡
__TBB_CPP11_RVALUE_REF_PRESENT
 && 
__TBB_CPP11_IMPLICIT_MOVE_MEMBERS_GENERATION_FOR_DERIVED_BROKEN


229 
c⁄cuºít_un‹dîed_mu…i£t
(c⁄° c⁄cuºít_un‹dîed_mu…i£t& 
èbÀ
)

230 : 
ba£_ty≥
(
èbÀ
)

234 
c⁄cuºít_un‹dîed_mu…i£t
& 
›î©‹
=(c⁄° c⁄cuºít_un‹dîed_mu…i£t& 
èbÀ
)

236  
°©ic_ˇ°
<
c⁄cuºít_un‹dîed_mu…i£t
&>(
ba£_ty≥
::
›î©‹
=(
èbÀ
));

239 
c⁄cuºít_un‹dîed_mu…i£t
(c⁄cuºít_un‹dîed_mu…i£t&& 
èbÀ
)

240 : 
ba£_ty≥
(
°d
::
move
(
èbÀ
))

244 
c⁄cuºít_un‹dîed_mu…i£t
& 
›î©‹
=(c⁄cuºít_un‹dîed_mu…i£t&& 
èbÀ
)

246  
°©ic_ˇ°
<
c⁄cuºít_un‹dîed_mu…i£t
&>(
ba£_ty≥
::
›î©‹
=(
°d
::
move
(
èbÀ
)));

250 
c⁄cuºít_un‹dîed_mu…i£t
(c⁄° c⁄cuºít_un‹dîed_mu…i£t& 
èbÀ
, c⁄° 
AŒoˇt‹
& 
a
)

251 : 
ba£_ty≥
(
èbÀ
, 
a
)

255 #i‡
__TBB_CPP11_RVALUE_REF_PRESENT


256 
c⁄cuºít_un‹dîed_mu…i£t
(c⁄cuºít_un‹dîed_mu…i£t&& 
èbÀ
, c⁄° 
AŒoˇt‹
& 
a
)

257 : 
ba£_ty≥
(
°d
::
move
(
èbÀ
), 
a
)

264 
usög
 
	göãrÁ˚5
::
c⁄cuºít_un‹dîed_£t
;

265 
usög
 
	göãrÁ˚5
::
c⁄cuºít_un‹dîed_mu…i£t
;

	@viper/concurrentqueue-src/benchmarks/tbb/concurrent_vector.cpp

21 #i‡(
_MSC_VER
)

24 
	#_SCL_SECURE_NO_WARNINGS


	)

27 
	~"tbb/c⁄cuºít_ve˘‹.h
"

28 
	~"tbb/ˇche_Æig√d_Æloˇt‹.h
"

29 
	~"tbb/tbb_ex˚±i⁄.h
"

30 
	~"tbb_misc.h
"

31 
	~"ôt_nŸify.h
"

33 #i‡!
TBB_USE_EXCEPTIONS
 && 
_MSC_VER


35 #¥agm®
w¨nög
 (
push
)

36 #¥agm®
w¨nög
 (
dißbÀ
: 4530)

39 
	~<c°rög
>

40 
	~<mem‹y
>

42 #i‡!
TBB_USE_EXCEPTIONS
 && 
_MSC_VER


43 #¥agm®
w¨nög
 (
p›
)

46 #i‡
deföed
(
_MSC_VER
Ë&& deföed(
_Wp64
)

48 #¥agm®
w¨nög
 (
dißbÀ
: 4267)

51 
usög
 
«me•a˚
 
	g°d
;

53 
«me•a˚
 
	gtbb
 {

55 
«me•a˚
 
	göã∫Æ
 {

56 ˛as†
	cc⁄cuºít_ve˘‹_ba£_v3
::
hñ≥r
 :
no_assign
 {

57 
public
:

59 c⁄° 
size_ty≥
 
∑ge_size
 = 4096;

61 
ölöe
 
boﬁ
 
öcom∑˘_¥ediˇã
(
size_ty≥
 
size
) {

62  
	gsize
 < 
	g∑ge_size
 || ((size-1)%page_size <Öage_size/2 && size <Öage_size * 128);

65 
ölöe
 
size_ty≥
 
föd_£gmít_íd
(c⁄° 
c⁄cuºít_ve˘‹_ba£_v3
 &
v
) {

66 
£gmít_t
 *
	gs
 = 
v
.
my_£gmít
;

67 
£gmít_ödex_t
 
	gu
 = 
s
==
v
.
my_°‹age
? 
poöãrs_≥r_sh‹t_èbÀ
 : 
poöãrs_≥r_l⁄g_èbÀ
;

68 
£gmít_ödex_t
 
	gk
 = 0;

69  
	gk
 < 
	gu
 && (
	gs
[
k
].
	glﬂd
<
	gªœxed
>()==
£gmít_Æloˇãd
() ))

70 ++
k
;

71  
	gk
;

76 
ölöe
 
assign_fú°_£gmít_if_√˚sßry
(
c⁄cuºít_ve˘‹_ba£_v3
 &
v
, 
£gmít_ödex_t
 
k
) {

77 if–!
	gv
.
	gmy_fú°_block
 ) {

87 
	gv
.
	gmy_fú°_block
.
com∑ª_™d_sw≠
(
k
+1, 0);

91 
ölöe
 *
Æloˇã_£gmít
(
c⁄cuºít_ve˘‹_ba£_v3
 &
v
, 
size_ty≥
 
n
) {

92 *
	g±r
 = 
v
.
ve˘‹_Æloˇt‹_±r
(v, 
n
);

93 if(!
	g±r
Ë
throw_ex˚±i⁄
(
eid_bad_Æloc
);

94  
	g±r
;

98 
	gãm∂©e
<
ty≥«me
 
	g¨gumít_ty≥
>

99 
ölöe
 
publish_£gmít
–
£gmít_t
& 
s
, 
¨gumít_ty≥
 
rhs
 ) {

101 
ITT_NOTIFY
–
sync_ªÀasög
, &
s
 );

102 
	gs
.
	g°‹e
<
	gªÀa£
>(
	grhs
);

105 
size_ty≥
 
íabÀ_£gmít
(
c⁄cuºít_ve˘‹_ba£_v3
 &
v
, size_ty≥ 
k
, size_ty≥ 
ñemít_size
, 
boﬁ
 
m¨k_as_nŸ_u£d_⁄_Áûuª
 = 
Ál£
);

108 
ölöe
 
exãnd_èbÀ_if_√˚sßry
(
c⁄cuºít_ve˘‹_ba£_v3
 &
v
, 
size_ty≥
 
k
, size_ty≥ 
°¨t
 ) {

109 if(
	gk
 >
poöãrs_≥r_sh‹t_èbÀ
 && 
v
.
my_£gmít
 =v.
my_°‹age
)

110 
exãnd_£gmít_èbÀ
(
v
, 
°¨t
 );

113 
exãnd_£gmít_èbÀ
(
c⁄cuºít_ve˘‹_ba£_v3
 &
v
, 
size_ty≥
 
°¨t
);

115 
	g£gmít_nŸ_u£d_¥ediˇã
: 
no_assign
 {

116 
£gmít_t
 &
s
;

117 
£gmít_nŸ_u£d_¥ediˇã
(
£gmít_t
 &
£gmít
Ë: 
s
(segment) {}

118 
boﬁ
 
›î©‹
()(Ëc⁄° {  
s
.
lﬂd
<
ªœxed
>(Ë=
£gmít_nŸ_u£d
 ();}

120 
ölöe
 
	g£gmít_t
& 
acquúe_£gmít
(
c⁄cuºít_ve˘‹_ba£_v3
 &
v
, 
size_ty≥
 
ödex
, size_ty≥ 
ñemít_size
, 
boﬁ
 
ow√r
) {

121 
	g£gmít_t
 &
	gs
 = 
v
.
my_£gmít
[
ödex
];

122 if–
	gs
.
	glﬂd
<
	gacquúe
>(Ë=
£gmít_nŸ_u£d
() ) {

123 if–
ow√r
 ) {

124 
íabÀ_£gmít
–
v
, 
ödex
, 
ñemít_size
 );

126 
ITT_NOTIFY
(
sync_¥ï¨e
, &
s
);

127 
•ö_waô_whûe
(
£gmít_nŸ_u£d_¥ediˇã
(
s
));

128 
ITT_NOTIFY
(
sync_acquúed
, &
s
);

131 
ITT_NOTIFY
(
sync_acquúed
, &
s
);

133 if(
	gs
.
	glﬂd
<
	gªœxed
>(Ë!
£gmít_Æloˇãd
())

134 
throw_ex˚±i⁄
(
eid_bad_œ°_Æloc
);

135  
	gs
;

139 
£gmít_t
 *
	gèbÀ
;

140 
size_ty≥
 
	gfú°_block
, 
	gk
, 
	gsz
, 
	g°¨t
, 
	gföish
, 
	gñemít_size
;

141 
hñ≥r
(
£gmít_t
 *
£gmíts
, 
size_ty≥
 
fb
, size_ty≥ 
esize
, size_ty≥ 
ödex
, size_ty≥ 
s
, size_ty≥ 
f
Ë
throw
()

142 : 
èbÀ
(
£gmíts
), 
fú°_block
(
fb
), 
k
(
ödex
), 
sz
(0), 
°¨t
(
s
), 
föish
(
f
), 
ñemít_size
(
esize
) {}

143 
ölöe
 
fú°_£gmít
(Ë
throw
() {

144 
__TBB_ASSERT
–
°¨t
 <
föish
, 
NULL
 );

145 
__TBB_ASSERT
–
fú°_block
 || !
föish
, 
NULL
 );

146 if–
	gk
 < 
	gfú°_block
 ) k = 0;

147 
size_ty≥
 
	gba£
 = 
£gmít_ba£
–
k
 );

148 
__TBB_ASSERT
–
ba£
 <
°¨t
, 
NULL
 );

149 
	gföish
 -
ba£
; 
	g°¨t
 -= base;

150 
	gsz
 = 
k
 ? 
ba£
 : 
£gmít_size
–
fú°_block
 );

152 
ölöe
 
√xt_£gmít
(Ë
throw
() {

153 
	gföish
 -
sz
; 
	g°¨t
 = 0;

154 if–!
	gk
 ) k = 
fú°_block
;

155 { ++
	gk
; 
	gsz
 = 
£gmít_size
–
k
 ); }

157 
	gãm∂©e
<
ty≥«me
 
	gF
>

158 
ölöe
 
size_ty≥
 
≠∂y
(c⁄° 
F
 &
func
) {

159 
fú°_£gmít
();

160  
	gsz
 < 
	gföish
 ) {

162 
func
–
èbÀ
[
k
],ÅabÀ[k].
lﬂd
<
ªœxed
>().
poöãr
<>(Ë+ 
ñemít_size
*
°¨t
, 
sz
 - start );

163 
√xt_£gmít
();

165 
func
–
èbÀ
[
k
],ÅabÀ[k].
lﬂd
<
ªœxed
>().
poöãr
<>(Ë+ 
ñemít_size
*
°¨t
, 
föish
 - start );

166  
	gk
;

168 
ölöe
 
£gmít_vÆue_t
 
gë_£gmít_vÆue
(
size_ty≥
 
ödex
, 
boﬁ
 
waô
) {

169 
	g£gmít_t
 &
	gs
 = 
èbÀ
[
ödex
];

170 if–
	gwaô
 && (
	gs
.
	glﬂd
<
	gacquúe
>(Ë=
£gmít_nŸ_u£d
()) ) {

171 
ITT_NOTIFY
(
sync_¥ï¨e
, &
s
);

172 
•ö_waô_whûe
(
£gmít_nŸ_u£d_¥ediˇã
(
s
));

173 
ITT_NOTIFY
(
sync_acquúed
, &
s
);

175  
	gs
.
	glﬂd
<
	gªœxed
>();

177 ~
hñ≥r
() {

178 if–
	gsz
 >
föish
 ) ;

179 
˛ónup
();

183 
˛ónup
();

186 
	söô_body
 {

187 
öã∫Æ_¨øy_›2
 
	gfunc
;

188 c⁄° *
	g¨g
;

189 
öô_body
(
öã∫Æ_¨øy_›2
 
öô
, c⁄° *
§c
Ë: 
func
(öô), 
¨g
(src) {}

190 
›î©‹
()(
	g£gmít_t
 &, *
	gbegö
, 
size_ty≥
 
	gn
) const {

191 
func
–
begö
, 
¨g
, 
n
 );

194 
	sß„_öô_body
 {

195 
öã∫Æ_¨øy_›2
 
	gfunc
;

196 c⁄° *
	g¨g
;

197 
ß„_öô_body
(
öã∫Æ_¨øy_›2
 
öô
, c⁄° *
§c
Ë: 
func
(öô), 
¨g
(src) {}

198 
›î©‹
()(
	g£gmít_t
 &
	gs
, *
	gbegö
, 
size_ty≥
 
	gn
) const {

199 if(
	gs
.
	glﬂd
<
	gªœxed
>(Ë!
£gmít_Æloˇãd
())

200 
throw_ex˚±i⁄
(
eid_bad_œ°_Æloc
);

201 
func
–
begö
, 
¨g
, 
n
 );

204 
	sde°roy_body
 {

205 
öã∫Æ_¨øy_›1
 
	gfunc
;

206 
de°roy_body
(
öã∫Æ_¨øy_›1
 
de°roy
Ë: 
func
(destroy) {}

207 
›î©‹
()(
£gmít_t
 &
s
, *
	gbegö
, 
size_ty≥
 
	gn
) const {

208 if(
	gs
.
	glﬂd
<
	gªœxed
>(Ë=
£gmít_Æloˇãd
())

209 
func
–
begö
, 
n
 );

214 
	gc⁄cuºít_ve˘‹_ba£_v3
::
hñ≥r
::
exãnd_£gmít_èbÀ
(
c⁄cuºít_ve˘‹_ba£_v3
 &
v
, c⁄cuºít_ve˘‹_ba£_v3::
size_ty≥
 
°¨t
) {

215 if–
°¨t
 > 
£gmít_size
(
poöãrs_≥r_sh‹t_èbÀ
) ) start = segment_size(pointers_per_short_table);

218  
£gmít_ödex_t
 
	gi
 = 0; 
£gmít_ba£
(
i
Ë< 
	g°¨t
 && 
	gv
.
	gmy_£gmít
 =
v
.
my_°‹age
; i++ ){

219 if(
	gv
.
	gmy_°‹age
[
i
].
	glﬂd
<
	gªœxed
>(Ë=
£gmít_nŸ_u£d
()) {

220 
ITT_NOTIFY
(
sync_¥ï¨e
, &
v
.
my_°‹age
[
i
]);

221 
©omic_backoff
 
backoff
(
åue
);

222  
	gv
.
	gmy_£gmít
 =
v
.
my_°‹age
 && (v.my_°‹age[
i
].
lﬂd
<
ªœxed
>(Ë=
£gmít_nŸ_u£d
()) )

223 
backoff
.
∑u£
();

224 
ITT_NOTIFY
(
sync_acquúed
, &
v
.
my_°‹age
[
i
]);

227 if–
	gv
.
	gmy_£gmít
 !
v
.
my_°‹age
 ) ;

229 
£gmít_t
* 
	g√w_£gmít_èbÀ
 = (£gmít_t*)
NFS_AŒoˇã
–
poöãrs_≥r_l⁄g_èbÀ
, (£gmít_t), 
NULL
 );

230 
__TBB_ASSERT
(
√w_£gmít_èbÀ
, "NFS_Allocate shouldÅhrowsÉxception if it cannotállocateÅheÑequested storage,ándÇotÑeturns zeroÖointer" );

231 
	g°d
::
unöôülized_fûl_n
(
√w_£gmít_èbÀ
,
size_t
(
poöãrs_≥r_l⁄g_èbÀ
),
£gmít_t
());

233 
__TBB_STATIC_ASSERT
(
poöãrs_≥r_l⁄g_èbÀ
 >
poöãrs_≥r_sh‹t_èbÀ
, "size ofÅhe bigÅable should beÇotÜesserÅhan ofÅhe small one,ás we copy valuesÅo it" );

234 
	g°d
::
c›y
(
v
.
my_°‹age
, v.my_°‹age+
poöãrs_≥r_sh‹t_èbÀ
, 
√w_£gmít_èbÀ
);

235 if–
	gv
.
	gmy_£gmít
.
com∑ª_™d_sw≠
–
√w_£gmít_èbÀ
, 
v
.
my_°‹age
 ) != v.my_storage )

236 
NFS_Fªe
–
√w_£gmít_èbÀ
 );

240 
	gc⁄cuºít_ve˘‹_ba£_v3
::
size_ty≥
 
c⁄cuºít_ve˘‹_ba£_v3
::
hñ≥r
::
íabÀ_£gmít
(c⁄cuºít_ve˘‹_ba£_v3 &
v
, c⁄cuºít_ve˘‹_ba£_v3::size_ty≥ 
k
, c⁄cuºít_ve˘‹_ba£_v3::size_ty≥ 
ñemít_size
,

241 
boﬁ
 
m¨k_as_nŸ_u£d_⁄_Áûuª
 ) {

243 
	g£gmít_sc›e_gu¨d
 : 
no_c›y
{

244 
£gmít_t
* 
my_£gmít_±r
;

245 
boﬁ
 
	gmy_m¨k_as_nŸ_u£d
;

246 
£gmít_sc›e_gu¨d
(
£gmít_t
& 
£gmít
, 
boﬁ
 
m¨k_as_nŸ_u£d
Ë: 
my_£gmít_±r
(&£gmít), 
my_m¨k_as_nŸ_u£d
(mark_as_not_used){}

247 
dismiss
(){ 
	gmy_£gmít_±r
 = 0;}

248 ~
£gmít_sc›e_gu¨d
(){

249 i‡(
	gmy_£gmít_±r
){

250 i‡(!
	gmy_m¨k_as_nŸ_u£d
){

251 
publish_£gmít
(*
my_£gmít_±r
, 
£gmít_Æloˇti⁄_Áûed
());

253 
publish_£gmít
(*
my_£gmít_±r
, 
£gmít_nŸ_u£d
());

259 
£gmít_t
* 
	gs
 = 
v
.
my_£gmít
;

260 
__TBB_ASSERT
(
s
[
k
].
lﬂd
<
ªœxed
>(Ë!
£gmít_Æloˇãd
(), "concurrent operation during growth?");

262 
size_ty≥
 
	gsize_of_íabÀd_£gmít
 = 
£gmít_size
(
k
);

263 
size_ty≥
 
	gsize_to_Æloˇã
 = 
size_of_íabÀd_£gmít
;

264 if–!
	gk
 ) {

265 
assign_fú°_£gmít_if_√˚sßry
(
v
, 
deÁu…_öôül_£gmíts
-1);

266 
	gsize_of_íabÀd_£gmít
 = 2 ;

267 
	gsize_to_Æloˇã
 = 
£gmít_size
(
v
.
my_fú°_block
);

270 
•ö_waô_whûe_eq
–
v
.
my_fú°_block
, 
£gmít_ödex_t
(0) );

273 if–
	gk
 && (k < 
	gv
.
	gmy_fú°_block
)){

275 
£gmít_vÆue_t
 
	g¨øy0
 = 
s
[0].
lﬂd
<
acquúe
>();

276 if(
	g¨øy0
 =
£gmít_nŸ_u£d
()){

278 
ITT_NOTIFY
(
sync_¥ï¨e
, &
s
[0]);

279 
•ö_waô_whûe
–
£gmít_nŸ_u£d_¥ediˇã
(
s
[0]));

280 
	g¨øy0
 = 
s
[0].
lﬂd
<
acquúe
>();

282 
ITT_NOTIFY
(
sync_acquúed
, &
s
[0]);

283 if(
	g¨øy0
 !
£gmít_Æloˇãd
()) {

284 
publish_£gmít
(
s
[
k
], 
£gmít_Æloˇti⁄_Áûed
());

285 
throw_ex˚±i⁄
(
eid_bad_œ°_Æloc
);

287 
publish_£gmít
–
s
[
k
],

288 
°©ic_ˇ°
<*>(
¨øy0
.
poöãr
<>(Ë+ 
£gmít_ba£
(
k
)*
ñemít_size
 )

291 
£gmít_sc›e_gu¨d
 
k_£gmít_gu¨d
(
s
[
k
], 
m¨k_as_nŸ_u£d_⁄_Áûuª
);

292 
publish_£gmít
(
s
[
k
], 
Æloˇã_£gmít
(
v
, 
size_to_Æloˇã
));

293 
	gk_£gmít_gu¨d
.
dismiss
();

295  
	gsize_of_íabÀd_£gmít
;

298 
	gc⁄cuºít_ve˘‹_ba£_v3
::
hñ≥r
::
˛ónup
() {

299 if–!
sz
 ) {

300 
£gmít_ödex_t
 
k_°¨t
 = 
k
, 
	gk_íd
 = 
£gmít_ödex_of
(
föish
-1);

301 if–
£gmít_ba£
–
k_°¨t
 ) < 
	g°¨t
 )

302 
gë_£gmít_vÆue
(
k_°¨t
++, 
åue
);

303 if–
	gk_°¨t
 < 
	gfú°_block
 ) {

304 
£gmít_vÆue_t
 
	g£gmít0
 = 
gë_£gmít_vÆue
(0, 
°¨t
>0);

305 if((
	g£gmít0
 !
£gmít_nŸ_u£d
()Ë&& !
k_°¨t
 ) ++k_start;

306 if(
	g£gmít0
 !
£gmít_Æloˇãd
())

307 ; 
	gk_°¨t
 < 
	gfú°_block
 && k_°¨à<
k_íd
; ++k_start )

308 
publish_£gmít
(
èbÀ
[
k_°¨t
], 
£gmít_Æloˇti⁄_Áûed
());

309 ; 
	gk_°¨t
 < 
	gfú°_block
 && k_°¨à<
k_íd
; ++k_start )

310 
publish_£gmít
(
èbÀ
[
k_°¨t
], 
°©ic_ˇ°
<*>(

311 (
£gmít0
.
poöãr
<>()Ë+ 
£gmít_ba£
(
k_°¨t
)*
ñemít_size
) );

313 ; 
	gk_°¨t
 <
k_íd
; ++k_start )

314 if(
	gèbÀ
[
k_°¨t
].
	glﬂd
<
	gacquúe
>(Ë=
£gmít_nŸ_u£d
())

315 
publish_£gmít
(
èbÀ
[
k_°¨t
], 
£gmít_Æloˇti⁄_Áûed
());

317 
fú°_£gmít
();

318 
	gªcovî
;

320  
	gsz
 <
föish
 ) {

321 
√xt_£gmít
();

322 
	gªcovî
:

323 
£gmít_vÆue_t
 
¨øy
 = 
èbÀ
[
k
].
lﬂd
<
ªœxed
>();

324 if(
	g¨øy
 =
£gmít_Æloˇãd
())

325 
°d
::
mem£t
–(
¨øy
.
poöãr
<>()Ë+ 
ñemít_size
*
°¨t
, 0, ((
sz
<
föish
?sz:finish) - start)*element_size );

326 
__TBB_ASSERT
–
¨øy
 =
£gmít_Æloˇti⁄_Áûed
(), 
NULL
 );

330 
	gc⁄cuºít_ve˘‹_ba£_v3
::~
c⁄cuºít_ve˘‹_ba£_v3
() {

331 
£gmít_t
* 
s
 = 
my_£gmít
;

332 if–
	gs
 !
my_°‹age
 ) {

333 #i‡
TBB_USE_ASSERT


335 
°d
::
fûl_n
(
my_°‹age
,
size_t
(
poöãrs_≥r_sh‹t_èbÀ
),
£gmít_t
());

337 #i‡
TBB_USE_DEBUG


338  
£gmít_ödex_t
 
	gi
 = 0; i < 
	gpoöãrs_≥r_l⁄g_èbÀ
; i++)

339 
__TBB_ASSERT
–
my_£gmít
[
i
].
lﬂd
<
ªœxed
>(Ë!
£gmít_Æloˇãd
(), "Segment should have been freed. PleaseÑecompile withÇew TBB before usingÉxceptions.");

341 
	gmy_£gmít
 = 
my_°‹age
;

342 
NFS_Fªe
–
s
 );

346 
	gc⁄cuºít_ve˘‹_ba£_v3
::
size_ty≥
 
c⁄cuºít_ve˘‹_ba£_v3
::
öã∫Æ_ˇ∑côy
() const {

347  
£gmít_ba£
–
hñ≥r
::
föd_£gmít_íd
(*
this
) );

350 
	gc⁄cuºít_ve˘‹_ba£_v3
::
öã∫Æ_throw_ex˚±i⁄
(
size_ty≥
 
t
) const {

351 
t
) {

352 0: 
throw_ex˚±i⁄
(
eid_out_of_ønge
);

353 1: 
throw_ex˚±i⁄
(
eid_£gmít_ønge_îr‹
);

354 2: 
throw_ex˚±i⁄
(
eid_ödex_ønge_îr‹
);

358 
	gc⁄cuºít_ve˘‹_ba£_v3
::
öã∫Æ_ª£rve
–
size_ty≥
 
n
, size_ty≥ 
ñemít_size
, size_ty≥ 
max_size
 ) {

359 if–
	gn
>
	gmax_size
 )

360 
throw_ex˚±i⁄
(
eid_ª£rv©i⁄_Àngth_îr‹
);

361 
__TBB_ASSERT
–
n
, 
NULL
 );

362 
	ghñ≥r
::
assign_fú°_£gmít_if_√˚sßry
(*
this
, 
£gmít_ödex_of
(
n
-1));

363 
£gmít_ödex_t
 
	gk
 = 
hñ≥r
::
föd_£gmít_íd
(*
this
);

365  ; 
£gmít_ba£
(
k
)<
	gn
; ++
	gk
 ) {

366 
	ghñ≥r
::
exãnd_èbÀ_if_√˚sßry
(*
this
, 
k
, 0);

367 if(
	gmy_£gmít
[
k
].
	glﬂd
<
	gªœxed
>(Ë!
£gmít_Æloˇãd
())

368 
hñ≥r
::
íabÀ_£gmít
(*
this
, 
k
, 
ñemít_size
, 
åue
 );

375 
	gc⁄cuºít_ve˘‹_ba£_v3
::
öã∫Æ_c›y
–c⁄° 
c⁄cuºít_ve˘‹_ba£_v3
& 
§c
, 
size_ty≥
 
ñemít_size
, 
öã∫Æ_¨øy_›2
 
c›y
 ) {

376 
size_ty≥
 
	gn
 = 
§c
.
my_óæy_size
;

377 
__TBB_ASSERT
–
my_£gmít
 =
my_°‹age
, 
NULL
);

378 if–
	gn
 ) {

379 
	ghñ≥r
::
assign_fú°_£gmít_if_√˚sßry
(*
this
, 
£gmít_ödex_of
(
n
-1));

380 
size_ty≥
 
	gb
;

381  
£gmít_ödex_t
 
	gk
=0; (
	gb
=
£gmít_ba£
(
k
))<
n
; ++k ) {

382 if–(
	g§c
.
	gmy_£gmít
.
	glﬂd
<
	gacquúe
>(Ë=
§c
.
my_°‹age
 && 
k
 >
poöãrs_≥r_sh‹t_èbÀ
)

383 || (
§c
.
my_£gmít
[
k
].
lﬂd
<
ªœxed
>(Ë!
£gmít_Æloˇãd
())) {

384 
my_óæy_size
 = 
b
; ;

386 
	ghñ≥r
::
exãnd_èbÀ_if_√˚sßry
(*
this
, 
k
, 0);

387 
size_ty≥
 
	gm
 = 
hñ≥r
::
íabÀ_£gmít
(*
this
, 
k
, 
ñemít_size
);

388 if–
	gm
 > 
	gn
-
	gb
 ) m = 
n
-
b
;

389 
	gmy_óæy_size
 = 
b
+
m
;

390 
c›y
–
my_£gmít
[
k
].
lﬂd
<
ªœxed
>().
poöãr
<>(), 
§c
.my_£gmít[k].lﬂd<ªœxed>().poöãr<>(), 
m
 );

395 
	gc⁄cuºít_ve˘‹_ba£_v3
::
öã∫Æ_assign
–c⁄° 
c⁄cuºít_ve˘‹_ba£_v3
& 
§c
, 
size_ty≥
 
ñemít_size
, 
öã∫Æ_¨øy_›1
 
de°roy
, 
öã∫Æ_¨øy_›2
 
assign
, i¡î«l_¨øy_›2 
c›y
 ) {

396 
size_ty≥
 
	gn
 = 
§c
.
my_óæy_size
;

397  
	gmy_óæy_size
>
	gn
 ) {

398 
£gmít_ödex_t
 
	gk
 = 
£gmít_ödex_of
–
my_óæy_size
-1 );

399 
size_ty≥
 
	gb
=
£gmít_ba£
(
k
);

400 
size_ty≥
 
	g√w_íd
 = 
b
>=
n
 ? b :Ç;

401 
__TBB_ASSERT
–
my_óæy_size
>
√w_íd
, 
NULL
 );

402 if–
	gmy_£gmít
[
k
].
	glﬂd
<
	gªœxed
>(Ë!
£gmít_Æloˇãd
())

403 
throw_ex˚±i⁄
(
eid_bad_œ°_Æloc
);

405 
de°roy
–
my_£gmít
[
k
].
lﬂd
<
ªœxed
>().
poöãr
<>(Ë+ 
ñemít_size
*(
√w_íd
-
b
), 
my_óæy_size
-new_end );

406 
	gmy_óæy_size
 = 
√w_íd
;

408 
size_ty≥
 
	gd°_öôülized_size
 = 
my_óæy_size
;

409 
	gmy_óæy_size
 = 
n
;

410 
	ghñ≥r
::
assign_fú°_£gmít_if_√˚sßry
(*
this
, 
£gmít_ödex_of
(
n
));

411 
size_ty≥
 
	gb
;

412  
£gmít_ödex_t
 
	gk
=0; (
	gb
=
£gmít_ba£
(
k
))<
n
; ++k ) {

413 if–(
	g§c
.
	gmy_£gmít
.
	glﬂd
<
	gacquúe
>(Ë=
§c
.
my_°‹age
 && 
k
 >
poöãrs_≥r_sh‹t_èbÀ
)

414 || 
§c
.
my_£gmít
[
k
].
lﬂd
<
ªœxed
>(Ë!
£gmít_Æloˇãd
() ) {

415 
my_óæy_size
 = 
b
; ;

417 
	ghñ≥r
::
exãnd_èbÀ_if_√˚sßry
(*
this
, 
k
, 0);

418 if–
	gmy_£gmít
[
k
].
	glﬂd
<
	gªœxed
>(Ë=
£gmít_nŸ_u£d
())

419 
hñ≥r
::
íabÀ_£gmít
(*
this
, 
k
, 
ñemít_size
);

420 if–
	gmy_£gmít
[
k
].
	glﬂd
<
	gªœxed
>(Ë!
£gmít_Æloˇãd
() )

421 
throw_ex˚±i⁄
(
eid_bad_œ°_Æloc
);

422 
size_ty≥
 
	gm
 = 
k
? 
£gmít_size
(k) : 2;

423 if–
	gm
 > 
	gn
-
	gb
 ) m = 
n
-
b
;

424 
size_ty≥
 
	ga
 = 0;

425 if–
	gd°_öôülized_size
>
	gb
 ) {

426 
	ga
 = 
d°_öôülized_size
-
b
;

427 if–
	ga
>
	gm
 )á = 
m
;

428 
assign
–
my_£gmít
[
k
].
lﬂd
<
ªœxed
>().
poöãr
<>(), 
§c
.my_£gmít[k].lﬂd<ªœxed>().poöãr<>(), 
a
 );

429 
	gm
 -
a
;

430 
	ga
 *
ñemít_size
;

432 if–
	gm
>0 )

433 
c›y
–
my_£gmít
[
k
].
lﬂd
<
ªœxed
>().
poöãr
<>(Ë+ 
a
, 
§c
.my_£gmít[k].lﬂd<ªœxed>().poöãr<>(Ë+á, 
m
 );

435 
__TBB_ASSERT
–
§c
.
my_óæy_size
==
n
, "detected use of concurrent_vector::operator= withÑight sideÅhat was concurrently modified" );

438 * 
	gc⁄cuºít_ve˘‹_ba£_v3
::
öã∫Æ_push_back
–
size_ty≥
 
ñemít_size
, size_ty≥& 
ödex
 ) {

439 
__TBB_ASSERT
–(
my_óæy_size
)==(
uöçå_t
), 
NULL
 );

440 
size_ty≥
 
	gtmp
 = 
my_óæy_size
.
„tch_™d_ö¸emít
<
acquúe
>();

441 
	gödex
 = 
tmp
;

442 
£gmít_ödex_t
 
	gk_ﬁd
 = 
£gmít_ödex_of
–
tmp
 );

443 
size_ty≥
 
	gba£
 = 
£gmít_ba£
(
k_ﬁd
);

444 
	ghñ≥r
::
exãnd_èbÀ_if_√˚sßry
(*
this
, 
k_ﬁd
, 
tmp
);

445 
	g£gmít_t
& 
	gs
 = 
hñ≥r
::
acquúe_£gmít
(*
this
, 
k_ﬁd
, 
ñemít_size
, 
ba£
==
tmp
);

446 
size_ty≥
 
	gj_begö
 = 
tmp
-
ba£
;

447  (*)(
	gs
.
	glﬂd
<
	gªœxed
>().
	gpoöãr
<>(Ë+ 
ñemít_size
*
	gj_begö
);

450 
	gc⁄cuºít_ve˘‹_ba£_v3
::
öã∫Æ_grow_to_©_Àa°
–
size_ty≥
 
√w_size
, size_ty≥ 
ñemít_size
, 
öã∫Æ_¨øy_›2
 
öô
, c⁄° *
§c
 ) {

451 
öã∫Æ_grow_to_©_Àa°_wôh_ªsu…
–
√w_size
, 
ñemít_size
, 
öô
, 
§c
 );

454 
	gc⁄cuºít_ve˘‹_ba£_v3
::
size_ty≥
 
c⁄cuºít_ve˘‹_ba£_v3
::
öã∫Æ_grow_to_©_Àa°_wôh_ªsu…
–size_ty≥ 
√w_size
, size_ty≥ 
ñemít_size
, 
öã∫Æ_¨øy_›2
 
öô
, c⁄° *
§c
 ) {

455 
size_ty≥
 
	ge
 = 
my_óæy_size
;

456  
	ge
<
	g√w_size
 ) {

457 
size_ty≥
 
	gf
 = 
my_óæy_size
.
com∑ª_™d_sw≠
(
√w_size
,
e
);

458 if–
	gf
==
e
 ) {

459 
öã∫Æ_grow
–
e
, 
√w_size
, 
ñemít_size
, 
öô
, 
§c
 );

462 
	ge
 = 
f
;

465 
£gmít_ödex_t
 
	gi
, 
	gk_ﬁd
 = 
£gmít_ödex_of
–
√w_size
-1 );

466 if–
	gk_ﬁd
 >
poöãrs_≥r_sh‹t_èbÀ
 && 
my_£gmít
 =
my_°‹age
 ) {

467 
•ö_waô_whûe_eq
–
my_£gmít
, 
my_°‹age
 );

469  
	gi
 = 0; i <
k_ﬁd
; ++i ) {

470 
	g£gmít_t
 &
	gs
 = 
my_£gmít
[
i
];

471 if(
	gs
.
	glﬂd
<
	gªœxed
>(Ë=
£gmít_nŸ_u£d
()) {

472 
ITT_NOTIFY
(
sync_¥ï¨e
, &
s
);

473 
©omic_backoff
 
backoff
(
åue
);

474  
	gmy_£gmít
[
i
].
	glﬂd
<
	gacquúe
>(Ë=
£gmít_nŸ_u£d
() )

475 
backoff
.
∑u£
();

476 
ITT_NOTIFY
(
sync_acquúed
, &
s
);

478 if–
	gmy_£gmít
[
i
].
	glﬂd
<
	gªœxed
>(Ë!
£gmít_Æloˇãd
() )

479 
throw_ex˚±i⁄
(
eid_bad_œ°_Æloc
);

481 #i‡
TBB_USE_DEBUG


482 
size_ty≥
 
	gˇ∑côy
 = 
öã∫Æ_ˇ∑côy
();

483 
__TBB_ASSERT
–
ˇ∑côy
 >
√w_size
, 
NULL
);

485  
	ge
;

488 
	gc⁄cuºít_ve˘‹_ba£_v3
::
size_ty≥
 
c⁄cuºít_ve˘‹_ba£_v3
::
öã∫Æ_grow_by
–size_ty≥ 
dñè
, size_ty≥ 
ñemít_size
, 
öã∫Æ_¨øy_›2
 
öô
, c⁄° *
§c
 ) {

489 
size_ty≥
 
	gªsu…
 = 
my_óæy_size
.
„tch_™d_add
(
dñè
);

490 
öã∫Æ_grow
–
ªsu…
,Ñesu…+
dñè
, 
ñemít_size
, 
öô
, 
§c
 );

491  
	gªsu…
;

494 
	gc⁄cuºít_ve˘‹_ba£_v3
::
öã∫Æ_grow
–c⁄° 
size_ty≥
 
°¨t
, size_ty≥ 
föish
, size_ty≥ 
ñemít_size
, 
öã∫Æ_¨øy_›2
 
öô
, c⁄° *
§c
 ) {

495 
__TBB_ASSERT
–
°¨t
<
föish
, "start must beÜessÅhan finish" );

496 
£gmít_ödex_t
 
	gk_°¨t
 = 
£gmít_ödex_of
(
°¨t
), 
	gk_íd
 = segmít_ödex_of(
föish
-1);

497 
	ghñ≥r
::
assign_fú°_£gmít_if_√˚sßry
(*
this
, 
k_íd
);

498 
	ghñ≥r
::
exãnd_èbÀ_if_√˚sßry
(*
this
, 
k_íd
, 
°¨t
);

499 
hñ≥r
 
ønge
(
my_£gmít
, 
my_fú°_block
, 
ñemít_size
, 
k_°¨t
, 
°¨t
, 
föish
);

500 ; 
	gk_íd
 > 
	gk_°¨t
 && k_íd >
ønge
.
fú°_block
; --k_end )

501 
	ghñ≥r
::
acquúe_£gmít
(*
this
, 
k_íd
, 
ñemít_size
, 
åue
 );

502 ; 
	gk_°¨t
 <
k_íd
; ++k_start )

503 
	ghñ≥r
::
acquúe_£gmít
(*
this
, 
k_°¨t
, 
ñemít_size
, 
£gmít_ba£
–k_°¨àË>
°¨t
 );

504 
	gønge
.
≠∂y
–
hñ≥r
::
öô_body
(
öô
, 
§c
) );

507 
	gc⁄cuºít_ve˘‹_ba£_v3
::
öã∫Æ_ªsize
–
size_ty≥
 
n
, size_ty≥ 
ñemít_size
, size_ty≥ 
max_size
, c⁄° *
§c
,

508 
öã∫Æ_¨øy_›1
 
de°roy
, 
öã∫Æ_¨øy_›2
 
öô
 ) {

509 
size_ty≥
 
	gj
 = 
my_óæy_size
;

510 if–
	gn
 > 
	gj
 ) {

511 
öã∫Æ_ª£rve
(
n
, 
ñemít_size
, 
max_size
);

512 
	gmy_óæy_size
 = 
n
;

513 
hñ≥r
 
f‹_óch
(
my_£gmít
, 
my_fú°_block
, 
ñemít_size
, 
£gmít_ödex_of
(
j
), j, 
n
);

514 
	gf‹_óch
.
≠∂y
–
hñ≥r
::
ß„_öô_body
(
öô
, 
§c
) );

516 
	gmy_óæy_size
 = 
n
;

517 
hñ≥r
 
f‹_óch
(
my_£gmít
, 
my_fú°_block
, 
ñemít_size
, 
£gmít_ödex_of
(
n
),Ç, 
j
);

518 
	gf‹_óch
.
≠∂y
–
hñ≥r
::
de°roy_body
(
de°roy
) );

522 
	gc⁄cuºít_ve˘‹_ba£_v3
::
£gmít_ödex_t
 
c⁄cuºít_ve˘‹_ba£_v3
::
öã∫Æ_˛ór
–
öã∫Æ_¨øy_›1
 
de°roy
 ) {

523 
__TBB_ASSERT
–
my_£gmít
, 
NULL
 );

524 
size_ty≥
 
	gj
 = 
my_óæy_size
;

525 
	gmy_óæy_size
 = 0;

526 
hñ≥r
 
f‹_óch
(
my_£gmít
, 
my_fú°_block
, 0, 0, 0, 
j
);

527 
	gj
 = 
f‹_óch
.
≠∂y
–
hñ≥r
::
de°roy_body
(
de°roy
) );

528 
size_ty≥
 
	gi
 = 
hñ≥r
::
föd_£gmít_íd
(*
this
);

529  
	gj
 < 
	gi
? i : 
j
+1;

532 *
	gc⁄cuºít_ve˘‹_ba£_v3
::
öã∫Æ_com∑˘
–
size_ty≥
 
ñemít_size
, *
èbÀ
, 
öã∫Æ_¨øy_›1
 
de°roy
, 
öã∫Æ_¨øy_›2
 
c›y
 )

534 c⁄° 
size_ty≥
 
	gmy_size
 = 
my_óæy_size
;

535 c⁄° 
£gmít_ödex_t
 
	gk_íd
 = 
hñ≥r
::
föd_£gmít_íd
(*
this
);

536 c⁄° 
£gmít_ödex_t
 
	gk_°›
 = 
my_size
? 
£gmít_ödex_of
(my_size-1) + 1 : 0;

537 c⁄° 
£gmít_ödex_t
 
	gfú°_block
 = 
my_fú°_block
;

539 
£gmít_ödex_t
 
	gk
 = 
fú°_block
;

540 if(
	gk_°›
 < 
	gfú°_block
)

541 
	gk
 = 
k_°›
;

543 
	gk
 < 
	gk_°›
 && 
	ghñ≥r
::
öcom∑˘_¥ediˇã
(
£gmít_size
–
k
 ) * 
ñemít_size
) ) k++;

544 if(
	gk_°›
 =
k_íd
 && 
k
 =
fú°_block
)

545  
NULL
;

547 
£gmít_t
 *c⁄° 
	g£gmít_èbÀ
 = 
my_£gmít
;

548 
	göã∫Æ_£gmíts_èbÀ
 &
	gﬁd
 = *
°©ic_ˇ°
<
öã∫Æ_£gmíts_èbÀ
*>–
èbÀ
 );

550 
	g°d
::
fûl_n
(
ﬁd
.
èbÀ
,(ﬁd.èbÀ)/(ﬁd.èbÀ[0]),
£gmít_t
());

551 
	gﬁd
.
	gfú°_block
=0;

553 i‡–
	gk
 !
fú°_block
 && 
k
 )

556 *
£g
 = 
hñ≥r
::
Æloˇã_£gmít
(*
this
, 
£gmít_size
(
k
));

557 
	gﬁd
.
	gèbÀ
[0].
	g°‹e
<
	gªœxed
>(
	g£g
);

558 
	gﬁd
.
	gfú°_block
 = 
k
;

560 
size_ty≥
 
	gmy_£gmít_size
 = 
£gmít_size
–
fú°_block
 );

561 
£gmít_ödex_t
 
	gi
 = 0, 
	gj
 = 0; i < 
	gk
 && j < 
	gmy_size
; j = 
my_£gmít_size
) {

562 
__TBB_ASSERT
–
£gmít_èbÀ
[
i
].
lﬂd
<
ªœxed
>(Ë=
£gmít_Æloˇãd
(), 
NULL
);

563 *
	gs
 = 
°©ic_ˇ°
<*>(

564 
°©ic_ˇ°
<*>(
£g
Ë+ 
£gmít_ba£
(
i
)*
ñemít_size
 );

566 if(
	gj
 + 
	gmy_£gmít_size
 >
my_size
Ë
my_£gmít_size
 = my_sizê- 
j
;

567 
	g__TBB_TRY
 {

568 
c›y
–
s
, 
£gmít_èbÀ
[
i
].
lﬂd
<
ªœxed
>().
poöãr
<>(), 
my_£gmít_size
 );

569 } 
__TBB_CATCH
(...) {

570 
hñ≥r
 
f‹_óch
(&
ﬁd
.
èbÀ
[0], old.
fú°_block
, 
ñemít_size
,

571 0, 0, 
£gmít_ba£
(
i
)+ 
my_£gmít_size
);

572 
	gf‹_óch
.
≠∂y
–
hñ≥r
::
de°roy_body
(
de°roy
) );

573 
__TBB_RETHROW
();

575 
	gmy_£gmít_size
 = 
i
? 
£gmít_size
–++òË: segmít_size–ò
fú°_block
 );

578 
	g°d
::
c›y
(
£gmít_èbÀ
,£gmít_èbÀ + 
k
,
ﬁd
.
èbÀ
);

579 
£gmít_ödex_t
 
	gi
 = 0; i < 
	gk
; i++) {

580 
	g£gmít_èbÀ
[
i
].
	g°‹e
<
	gªœxed
>(
	g°©ic_ˇ°
<*>(

581 
	g°©ic_ˇ°
<*>(
	g£g
Ë+ 
£gmít_ba£
(
i
)*
	gñemít_size
 ));

583 
	gﬁd
.
	gfú°_block
 = 
fú°_block
; 
	gmy_fú°_block
 = 
k
;

585 
	gmy_£gmít_size
 = 
£gmít_size
–
fú°_block
 );

586 
£gmít_ödex_t
 
	gi
 = 0, 
	gj
 = 0; i < 
	gk
 && j < 
	gmy_size
; j = 
my_£gmít_size
) {

587 if(
j
 + 
my_£gmít_size
 >
my_size
) my_segment_size = my_size - j;

589 
de°roy
–
ﬁd
.
èbÀ
[
i
].
lﬂd
<
ªœxed
>().
poöãr
<>(), 
my_£gmít_size
 );

590 
	gmy_£gmít_size
 = 
i
? 
£gmít_size
–++òË: segmít_size–ò
fú°_block
 );

594 i‡–
	gk_°›
 < 
	gk_íd
 ) {

595 
	gﬁd
.
	gfú°_block
 = 
fú°_block
;

596 
	g°d
::
c›y
(
£gmít_èbÀ
+
k_°›
, segmít_èbÀ+
k_íd
, 
ﬁd
.
èbÀ
+k_stop );

597 
	g°d
::
fûl_n
(
£gmít_èbÀ
+
k_°›
, (
k_íd
-k_°›), 
£gmít_t
());

598 if–!
	gk
 ) 
	gmy_fú°_block
 = 0;

600  
	gèbÀ
;

603 
	gc⁄cuºít_ve˘‹_ba£_v3
::
öã∫Æ_sw≠
(
c⁄cuºít_ve˘‹_ba£_v3
& 
v
)

605 
size_ty≥
 
my_sz
 = 
my_óæy_size
.
lﬂd
<
acquúe
>();

606 
size_ty≥
 
	gv_sz
 = 
v
.
my_óæy_size
.
lﬂd
<
ªœxed
>();

607 if(!
	gmy_sz
 && !
	gv_sz
) ;

609 
boﬁ
 
	gmy_was_sh‹t
 = (
my_£gmít
.
lﬂd
<
ªœxed
>(Ë=
my_°‹age
);

610 
boﬁ
 
	gv_was_sh‹t
 = (
v
.
my_£gmít
.
lﬂd
<
ªœxed
>(Ë=v.
my_°‹age
);

613 
	gi
=0; i < 
	gpoöãrs_≥r_sh‹t_èbÀ
; ++i){

614 
sw≠
(
my_°‹age
[
i
], 
v
.my_storage[i]);

616 
	gtbb
::
öã∫Æ
::
sw≠
<
ªœxed
>(
my_fú°_block
, 
	gv
.
	gmy_fú°_block
);

617 
	gtbb
::
öã∫Æ
::
sw≠
<
ªœxed
>(
my_£gmít
, 
	gv
.
	gmy_£gmít
);

618 i‡(
	gmy_was_sh‹t
){

619 
	gv
.
	gmy_£gmít
.
	g°‹e
<
	gªœxed
>(v.
	gmy_°‹age
);

621 if(
	gv_was_sh‹t
){

622 
	gmy_£gmít
.
	g°‹e
<
	gªœxed
>(
	gmy_°‹age
);

625 
	gmy_óæy_size
.
	g°‹e
<
	gªœxed
>(
	gv_sz
);

626 
	gv
.
	gmy_óæy_size
.
	g°‹e
<
	gªÀa£
>(
	gmy_sz
);

	@viper/concurrentqueue-src/benchmarks/tbb/concurrent_vector.h

21 #i‚de‡
__TBB_c⁄cuºít_ve˘‹_H


22 
	#__TBB_c⁄cuºít_ve˘‹_H


	)

24 
	~"tbb_°ddef.h
"

25 
	~"tbb_ex˚±i⁄.h
"

26 
	~"©omic.h
"

27 
	~"ˇche_Æig√d_Æloˇt‹.h
"

28 
	~"blocked_ønge.h
"

29 
	~"tbb_machöe.h
"

30 
	~"tbb_¥ofûög.h
"

31 
	~<√w
>

32 
	~<c°rög
>

34 #i‡!
TBB_USE_EXCEPTIONS
 && 
_MSC_VER


36 #¥agm®
w¨nög
 (
push
)

37 #¥agm®
w¨nög
 (
dißbÀ
: 4530)

40 
	~<Æg‹ôhm
>

41 
	~<ôî©‹
>

43 #i‡!
TBB_USE_EXCEPTIONS
 && 
_MSC_VER


44 #¥agm®
w¨nög
 (
p›
)

47 #i‡
_MSC_VER
==1500 && !
__INTEL_COMPILER


49 #¥agm®
w¨nög
–
push
 )

50 #¥agm®
w¨nög
–
dißbÀ
: 4985 )

52 
	~<limôs
>

53 #i‡
_MSC_VER
==1500 && !
__INTEL_COMPILER


54 #¥agm®
w¨nög
–
p›
 )

57 #i‡
__TBB_INITIALIZER_LISTS_PRESENT


58 
	~<öôülizî_li°
>

61 #i‡
deföed
(
_MSC_VER
Ë&& !deföed(
__INTEL_COMPILER
)

63 #¥agm®
w¨nög
 (
push
)

64 #i‡
deföed
(
_Wp64
)

65 #¥agm®
w¨nög
 (
dißbÀ
: 4267)

67 #¥agm®
w¨nög
 (
dißbÀ
: 4127)

70 
«me•a˚
 
	gtbb
 {

72 
	gãm∂©e
<
ty≥«me
 
	gT
, 
˛ass
 
	gA
 = 
ˇche_Æig√d_Æloˇt‹
<
T
> >

73 
˛ass
 
c⁄cuºít_ve˘‹
;

75 
	gãm∂©e
<
ty≥«me
 
	gC⁄èöî
,Åy≥«mê
	gVÆue
>

76 
˛ass
 
	gve˘‹_ôî©‹
;

79 
«me•a˚
 
	göã∫Æ
 {

82 *c⁄° 
	gve˘‹_Æloˇti⁄_îr‹_Êag
 = 
ªöãΩªt_ˇ°
<*>(
size_t
(63));

85 
	gãm∂©e
<
ty≥«me
 
	gT
>

86 
h™dÀ_unc⁄°ru˘ed_ñemíts
(
T
* 
¨øy
, 
size_t
 
n_of_ñemíts
){

87 
	g°d
::
mem£t
(
¨øy
, 0, 
n_of_ñemíts
 * (
T
));

92 ˛as†
	cc⁄cuºít_ve˘‹_ba£_v3
 {

93 
	g¥Ÿe˘ed
:

96 
size_t
 
	t£gmít_ödex_t
;

97 
size_t
 
	tsize_ty≥
;

102 
	gdeÁu…_öôül_£gmíts
 = 1,

104 
	gpoöãrs_≥r_sh‹t_èbÀ
 = 3,

105 
	gpoöãrs_≥r_l⁄g_èbÀ
 = (
£gmít_ödex_t
) * 8

108 
	s£gmít_nŸ_u£d
 {};

109 
	s£gmít_Æloˇãd
 {};

110 
	s£gmít_Æloˇti⁄_Áûed
 {};

112 
˛ass
 
	g£gmít_t
;

113 ˛as†
	c£gmít_vÆue_t
 {

114 * 
	g¨øy
;

115 
	g¥iv©e
:

117 
‰õnd
 
˛ass
 
£gmít_t
;

118 
ex∂icô
 
£gmít_vÆue_t
(* 
™_¨øy
):
¨øy
(an_array) {}

119 
public
:

120 
‰õnd
 
boﬁ
 
›î©‹
==(
£gmít_vÆue_t
 c⁄°& 
lhs
, 
	g£gmít_nŸ_u£d
 ) {  
	glhs
.
	g¨øy
 == 0;}

121 
‰õnd
 
boﬁ
 
	g›î©‹
==(
£gmít_vÆue_t
 c⁄°& 
lhs
, 
	g£gmít_Æloˇãd
Ë{  
	glhs
.
	g¨øy
 > 
	göã∫Æ
::
ve˘‹_Æloˇti⁄_îr‹_Êag
;}

122 
‰õnd
 
boﬁ
 
	g›î©‹
==(
£gmít_vÆue_t
 c⁄°& 
lhs
, 
	g£gmít_Æloˇti⁄_Áûed
Ë{  
	glhs
.
	g¨øy
 =
öã∫Æ
::
ve˘‹_Æloˇti⁄_îr‹_Êag
;}

123 
	gãm∂©e
<
ty≥«me
 
	g¨gumít_ty≥
>

124 
‰õnd
 
boﬁ
 
	g›î©‹
!=(
£gmít_vÆue_t
 c⁄°& 
lhs
, 
¨gumít_ty≥
 
	g¨g
Ë{  ! (
	glhs
 =
¨g
);}

126 
	gãm∂©e
<
ty≥«me
 
	gT
>

127 
T
* 
poöãr
(Ëc⁄° {  
	g°©ic_ˇ°
<
	gT
*>(
	gc⁄°_ˇ°
<*>(
	g¨øy
)); }

131 ˛as†
	c£gmít_t
 {

132 
	g©omic
<*> 
	g¨øy
;

133 
	gpublic
:

134 
£gmít_t
(){ 
°‹e
<
ªœxed
>(
£gmít_nŸ_u£d
());}

138 
£gmít_t
(£gmít_àc⁄°& 
rhs
 ){ 
	g¨øy
.
	g°‹e
<
	gªœxed
>(
	grhs
.¨øy.
	glﬂd
<relaxed>());}

140 
sw≠
(
£gmít_t
 & 
rhs
 ){

141 
	gtbb
::
öã∫Æ
::
sw≠
<
ªœxed
>(
¨øy
, 
	grhs
.
	g¨øy
);

144 
	g£gmít_t
& 
	g›î©‹
=(
£gmít_t
 c⁄°& 
rhs
 ){

145 
¨øy
.
°‹e
<
ªœxed
>(
rhs
.¨øy.
lﬂd
<relaxed>());

146  *
	gthis
;

149 
	gãm∂©e
<
mem‹y_£m™tics
 
	gM
>

150 
£gmít_vÆue_t
 
lﬂd
(Ëc⁄° {  segmít_vÆue_t(
¨øy
.lﬂd<
M
>());}

152 
	gãm∂©e
<
mem‹y_£m™tics
 
	gM
>

153 
°‹e
(
£gmít_nŸ_u£d
) {

154 
	g¨øy
.
	g°‹e
<
	gM
>(0);

157 
	gãm∂©e
<
mem‹y_£m™tics
 
	gM
>

158 
°‹e
(
£gmít_Æloˇti⁄_Áûed
) {

159 
__TBB_ASSERT
(
lﬂd
<
ªœxed
>(Ë!
£gmít_Æloˇãd
(),"transition from \"allocated\"Åo \"allocation failed\" stateÜooksÇon-logical");

160 
	g¨øy
.
	g°‹e
<
	gM
>(
	göã∫Æ
::
ve˘‹_Æloˇti⁄_îr‹_Êag
);

163 
	gãm∂©e
<
mem‹y_£m™tics
 
	gM
>

164 
°‹e
(* 
Æloˇãd_£gmít_poöãr
Ë
__TBB_NOEXCEPT
(
åue
) {

165 
__TBB_ASSERT
(
£gmít_vÆue_t
(
Æloˇãd_£gmít_poöãr
Ë=
£gmít_Æloˇãd
(),

167 
	g¨øy
.
	g°‹e
<
	gM
>(
	gÆloˇãd_£gmít_poöãr
);

170 #i‡
TBB_USE_ASSERT


171 ~
£gmít_t
() {

172 
__TBB_ASSERT
(
lﬂd
<
ªœxed
>(Ë!
£gmít_Æloˇãd
(), "should have been freed by clear" );

176 
‰õnd
 
sw≠
(
£gmít_t
 & , segmít_à& ) 
__TBB_NOEXCEPT
(
åue
);

181 * (*
	gve˘‹_Æloˇt‹_±r
)(
	gc⁄cuºít_ve˘‹_ba£_v3
 &, 
	gsize_t
);

184 
	g©omic
<
	gsize_ty≥
> 
	gmy_fú°_block
;

187 
	g©omic
<
	gsize_ty≥
> 
	gmy_óæy_size
;

190 
	g©omic
<
	g£gmít_t
*> 
	gmy_£gmít
;

193 
£gmít_t
 
	gmy_°‹age
[
poöãrs_≥r_sh‹t_èbÀ
];

197 
c⁄cuºít_ve˘‹_ba£_v3
() {

206 
	gmy_óæy_size
.
	g°‹e
<
	gªœxed
>(0);

207 
	gmy_fú°_block
.
	g°‹e
<
	gªœxed
>(0);

208 
	gmy_£gmít
.
	g°‹e
<
	gªœxed
>(
	gmy_°‹age
);

211 
	g__TBB_EXPORTED_METHOD
 ~
c⁄cuºít_ve˘‹_ba£_v3
();

217 
£gmít_ödex_t
 
£gmít_ödex_of
–
size_ty≥
 
ödex
 ) {

218  
£gmít_ödex_t
–
__TBB_Log2
–
ödex
|1 ) );

221 
£gmít_ödex_t
 
£gmít_ba£
–£gmít_ödex_à
k
 ) {

222  (
£gmít_ödex_t
(1)<<
	gk
 & ~segment_index_t(1));

225 
ölöe
 
£gmít_ödex_t
 
£gmít_ba£_ödex_of
–£gmít_ödex_à&
ödex
 ) {

226 
£gmít_ödex_t
 
	gk
 = 
£gmít_ödex_of
–
ödex
 );

227 
	gödex
 -
£gmít_ba£
(
k
);

228  
	gk
;

231 
size_ty≥
 
£gmít_size
–
£gmít_ödex_t
 
k
 ) {

232  
£gmít_ödex_t
(1)<<
	gk
;

236 
boﬁ
 
is_fú°_ñemít_ö_£gmít
(
size_ty≥
 
ñemít_ödex
){

240 
__TBB_ASSERT
(
ñemít_ödex
, "there should beÇoÇeedÅo call "

242  
is_powî_of_two_Á˘‹
–
ñemít_ödex
, 2 );

246 (
__TBB_EXPORTED_FUNC
 *
	töã∫Æ_¨øy_›1
)(* 
	tbegö
, 
	tsize_ty≥
 
	tn
 );

249 (
__TBB_EXPORTED_FUNC
 *
	töã∫Æ_¨øy_›2
)(* 
	td°
, c⁄° * 
	t§c
, 
	tsize_ty≥
 
	tn
 );

252 
	söã∫Æ_£gmíts_èbÀ
 {

253 
£gmít_ödex_t
 
	gfú°_block
;

254 
£gmít_t
 
	gèbÀ
[
poöãrs_≥r_l⁄g_èbÀ
];

257 
__TBB_EXPORTED_METHOD
 
öã∫Æ_ª£rve
–
size_ty≥
 
n
, size_ty≥ 
ñemít_size
, size_ty≥ 
max_size
 );

258 
size_ty≥
 
__TBB_EXPORTED_METHOD
 
öã∫Æ_ˇ∑côy
() const;

259 
öã∫Æ_grow
–
size_ty≥
 
°¨t
, size_ty≥ 
föish
, size_ty≥ 
ñemít_size
, 
öã∫Æ_¨øy_›2
 
öô
, c⁄° *
§c
 );

260 
size_ty≥
 
__TBB_EXPORTED_METHOD
 
öã∫Æ_grow_by
–size_ty≥ 
dñè
, size_ty≥ 
ñemít_size
, 
öã∫Æ_¨øy_›2
 
öô
, c⁄° *
§c
 );

261 * 
__TBB_EXPORTED_METHOD
 
öã∫Æ_push_back
–
size_ty≥
 
ñemít_size
, size_ty≥& 
ödex
 );

262 
£gmít_ödex_t
 
__TBB_EXPORTED_METHOD
 
öã∫Æ_˛ór
–
öã∫Æ_¨øy_›1
 
de°roy
 );

263 * 
__TBB_EXPORTED_METHOD
 
öã∫Æ_com∑˘
–
size_ty≥
 
ñemít_size
, *
èbÀ
, 
öã∫Æ_¨øy_›1
 
de°roy
, 
öã∫Æ_¨øy_›2
 
c›y
 );

264 
__TBB_EXPORTED_METHOD
 
öã∫Æ_c›y
–c⁄° 
c⁄cuºít_ve˘‹_ba£_v3
& 
§c
, 
size_ty≥
 
ñemít_size
, 
öã∫Æ_¨øy_›2
 
c›y
 );

265 
__TBB_EXPORTED_METHOD
 
öã∫Æ_assign
–c⁄° 
c⁄cuºít_ve˘‹_ba£_v3
& 
§c
, 
size_ty≥
 
ñemít_size
,

266 
öã∫Æ_¨øy_›1
 
de°roy
, 
öã∫Æ_¨øy_›2
 
assign
, i¡î«l_¨øy_›2 
c›y
 );

268 
__TBB_EXPORTED_METHOD
 
öã∫Æ_throw_ex˚±i⁄
(
size_ty≥
) const;

269 
__TBB_EXPORTED_METHOD
 
öã∫Æ_sw≠
(
c⁄cuºít_ve˘‹_ba£_v3
& 
v
);

271 
__TBB_EXPORTED_METHOD
 
öã∫Æ_ªsize
–
size_ty≥
 
n
, size_ty≥ 
ñemít_size
, size_ty≥ 
max_size
, c⁄° *
§c
,

272 
öã∫Æ_¨øy_›1
 
de°roy
, 
öã∫Æ_¨øy_›2
 
öô
 );

273 
size_ty≥
 
__TBB_EXPORTED_METHOD
 
öã∫Æ_grow_to_©_Àa°_wôh_ªsu…
–size_ty≥ 
√w_size
, size_ty≥ 
ñemít_size
, 
öã∫Æ_¨øy_›2
 
öô
, c⁄° *
§c
 );

276 
__TBB_EXPORTED_METHOD
 
öã∫Æ_grow_to_©_Àa°
–
size_ty≥
 
√w_size
, size_ty≥ 
ñemít_size
, 
öã∫Æ_¨øy_›2
 
öô
, c⁄° *
§c
 );

277 
	g¥iv©e
:

279 
˛ass
 
hñ≥r
;

280 
‰õnd
 
˛ass
 
	ghñ≥r
;

282 
	gãm∂©e
<
ty≥«me
 
	gC⁄èöî
,Åy≥«mê
	gVÆue
>

283 
‰õnd
 
˛ass
 
	gve˘‹_ôî©‹
;

287 
ölöe
 
sw≠
(
c⁄cuºít_ve˘‹_ba£_v3
::
£gmít_t
 & 
lhs
, c⁄cuºít_ve˘‹_ba£_v3::£gmít_à& 
rhs
Ë
__TBB_NOEXCEPT
(
åue
) {

288 
lhs
.
sw≠
(
rhs
);

291 
c⁄cuºít_ve˘‹_ba£_v3
 
	tc⁄cuºít_ve˘‹_ba£
;

296 
	gãm∂©e
<
ty≥«me
 
	gC⁄èöî
,Åy≥«mê
	gVÆue
>

297 ˛as†
	cve˘‹_ôî©‹


300 
C⁄èöî
* 
	gmy_ve˘‹
;

303 
size_t
 
	gmy_ödex
;

307 
muèbÀ
 
VÆue
* 
	gmy_ôem
;

309 
	gãm∂©e
<
ty≥«me
 
	gC
,Åy≥«mê
	gT
>

310 
‰õnd
 
	gve˘‹_ôî©‹
<
	gC
,
	gT
> 
	g›î©‹
+–
±rdiff_t
 
	goff£t
, c⁄° ve˘‹_ôî©‹<C,T>& 
	gv
 );

312 
	gãm∂©e
<
ty≥«me
 
	gC
,Åy≥«mê
	gT
,Åy≥«mê
	gU
>

313 
‰õnd
 
boﬁ
 
	g›î©‹
==–c⁄° 
ve˘‹_ôî©‹
<
C
,
	gT
>& 
	gi
, c⁄° 
	gve˘‹_ôî©‹
<
	gC
,
	gU
>& 
	gj
 );

315 
	gãm∂©e
<
ty≥«me
 
	gC
,Åy≥«mê
	gT
,Åy≥«mê
	gU
>

316 
‰õnd
 
boﬁ
 
	g›î©‹
<–c⁄° 
	gve˘‹_ôî©‹
<
	gC
,
	gT
>& 
	gi
, c⁄° ve˘‹_ôî©‹<C,
	gU
>& 
	gj
 );

318 
	gãm∂©e
<
ty≥«me
 
	gC
,Åy≥«mê
	gT
,Åy≥«mê
	gU
>

319 
‰õnd
 
±rdiff_t
 
	g›î©‹
-–c⁄° 
	gve˘‹_ôî©‹
<
	gC
,
	gT
>& 
	gi
, c⁄° ve˘‹_ôî©‹<C,
	gU
>& 
	gj
 );

321 
	gãm∂©e
<
ty≥«me
 
	gC
,Åy≥«mê
	gU
>

322 
‰õnd
 
˛ass
 
	göã∫Æ
::
ve˘‹_ôî©‹
;

324 #i‡!
deföed
(
_MSC_VER
Ë|| deföed(
__INTEL_COMPILER
)

325 
	gãm∂©e
<
ty≥«me
 
	gT
, 
˛ass
 
	gA
>

326 
‰õnd
 
˛ass
 
	gtbb
::
c⁄cuºít_ve˘‹
;

328 
	gpublic
:

331 
ve˘‹_ôî©‹
–c⁄° 
C⁄èöî
& 
ve˘‹
, 
size_t
 
ödex
, *
±r
 = 0 ) :

332 
my_ve˘‹
(
c⁄°_ˇ°
<
C⁄èöî
*>(&
ve˘‹
)),

333 
my_ödex
(
ödex
),

334 
my_ôem
(
°©ic_ˇ°
<
VÆue
*>(
±r
))

337 
	gpublic
:

339 
ve˘‹_ôî©‹
(Ë: 
my_ve˘‹
(
NULL
), 
my_ödex
(~
size_t
(0)), 
my_ôem
(NULL) {}

341 
ve˘‹_ôî©‹
–c⁄° ve˘‹_ôî©‹<
C⁄èöî
,
ty≥«me
 C⁄èöî::
vÆue_ty≥
>& 
Ÿhî
 ) :

342 
my_ve˘‹
(
Ÿhî
.my_vector),

343 
my_ödex
(
Ÿhî
.my_index),

344 
my_ôem
(
Ÿhî
.my_item)

347 
ve˘‹_ôî©‹
 
	g›î©‹
+–
±rdiff_t
 
	goff£t
 ) const {

348  
ve˘‹_ôî©‹
–*
my_ve˘‹
, 
my_ödex
+
off£t
 );

350 
	gve˘‹_ôî©‹
 &
	g›î©‹
+=–
±rdiff_t
 
off£t
 ) {

351 
my_ödex
+=
off£t
;

352 
	gmy_ôem
 = 
NULL
;

353  *
	gthis
;

355 
ve˘‹_ôî©‹
 
	g›î©‹
-–
±rdiff_t
 
	goff£t
 ) const {

356  
ve˘‹_ôî©‹
–*
my_ve˘‹
, 
my_ödex
-
off£t
 );

358 
	gve˘‹_ôî©‹
 &
	g›î©‹
-=–
±rdiff_t
 
off£t
 ) {

359 
my_ödex
-=
off£t
;

360 
	gmy_ôem
 = 
NULL
;

361  *
	gthis
;

363 
	gVÆue
& 
	g›î©‹
*() const {

364 
VÆue
* 
	gôem
 = 
my_ôem
;

365 if–!
	gôem
 ) {

366 
	gôem
 = 
my_ôem
 = &
my_ve˘‹
->
öã∫Æ_subs¸ùt
(
my_ödex
);

368 
__TBB_ASSERT
–
ôem
==&
my_ve˘‹
->
öã∫Æ_subs¸ùt
(
my_ödex
), "corrupt cache" );

369  *
	gôem
;

371 
	gVÆue
& 
	g›î©‹
[]–
±rdiff_t
 
	gk
 ) const {

372  
	gmy_ve˘‹
->
öã∫Æ_subs¸ùt
(
my_ödex
+
k
);

374 
VÆue
* 
	g›î©‹
->() const { &operator*();}

377 
	gve˘‹_ôî©‹
& 
	g›î©‹
++() {

378 
size_t
 
	gñemít_ödex
 = ++
my_ödex
;

379 if–
	gmy_ôem
 ) {

381 if–
	gc⁄cuºít_ve˘‹_ba£
::
is_fú°_ñemít_ö_£gmít
(
ñemít_ödex
)) {

384 
my_ôem

NULL
;

386 ++
	gmy_ôem
;

389  *
	gthis
;

393 
	gve˘‹_ôî©‹
& 
	g›î©‹
--() {

394 
__TBB_ASSERT
–
my_ödex
>0, "operator--()áppliedÅo iteratorálreadyát beginning of concurrent_vector" );

395 
size_t
 
	gñemít_ödex
 = 
my_ödex
--;

396 if–
	gmy_ôem
 ) {

397 if(
	gc⁄cuºít_ve˘‹_ba£
::
is_fú°_ñemít_ö_£gmít
(
ñemít_ödex
)) {

400 
my_ôem

NULL
;

402 --
	gmy_ôem
;

405  *
	gthis
;

409 
ve˘‹_ôî©‹
 
	g›î©‹
++() {

410 
ve˘‹_ôî©‹
 
	gªsu…
 = *
this
;

411 
	g›î©‹
++();

412  
	gªsu…
;

416 
ve˘‹_ôî©‹
 
	g›î©‹
--() {

417 
ve˘‹_ôî©‹
 
	gªsu…
 = *
this
;

418 
	g›î©‹
--();

419  
	gªsu…
;

424 
±rdiff_t
 
	tdif„ªn˚_ty≥
;

425 
VÆue
 
	tvÆue_ty≥
;

426 
VÆue
* 
	tpoöãr
;

427 
	gVÆue
& 
	tª„ªn˚
;

428 
	g°d
::
	tøndom_ac˚ss_ôî©‹_èg
 
	tôî©‹_ˇãg‹y
;

431 
	gãm∂©e
<
ty≥«me
 
	gC⁄èöî
,Åy≥«mê
	gT
>

432 
	gve˘‹_ôî©‹
<
	gC⁄èöî
,
	gT
> 
	g›î©‹
+–
±rdiff_t
 
	goff£t
, c⁄° ve˘‹_ôî©‹<C⁄èöî,T>& 
	gv
 ) {

433  
	gve˘‹_ôî©‹
<
	gC⁄èöî
,
	gT
>–*
	gv
.
	gmy_ve˘‹
, v.
	gmy_ödex
+
	goff£t
 );

436 
	gãm∂©e
<
ty≥«me
 
	gC⁄èöî
,Åy≥«mê
	gT
,Åy≥«mê
	gU
>

437 
boﬁ
 
	g›î©‹
==–c⁄° 
ve˘‹_ôî©‹
<
C⁄èöî
,
	gT
>& 
	gi
, c⁄° 
	gve˘‹_ôî©‹
<
	gC⁄èöî
,
	gU
>& 
	gj
 ) {

438  
	gi
.
	gmy_ödex
==
j
.
my_ödex
 && 
i
.
my_ve˘‹
 == j.my_vector;

441 
	gãm∂©e
<
ty≥«me
 
	gC⁄èöî
,Åy≥«mê
	gT
,Åy≥«mê
	gU
>

442 
boﬁ
 
	g›î©‹
!=–c⁄° 
ve˘‹_ôî©‹
<
C⁄èöî
,
	gT
>& 
	gi
, c⁄° 
	gve˘‹_ôî©‹
<
	gC⁄èöî
,
	gU
>& 
	gj
 ) {

443  !(
	gi
==
j
);

446 
	gãm∂©e
<
ty≥«me
 
	gC⁄èöî
,Åy≥«mê
	gT
,Åy≥«mê
	gU
>

447 
boﬁ
 
	g›î©‹
<–c⁄° 
	gve˘‹_ôî©‹
<
	gC⁄èöî
,
	gT
>& 
	gi
, c⁄° ve˘‹_ôî©‹<C⁄èöî,
	gU
>& 
	gj
 ) {

448  
	gi
.
	gmy_ödex
<
	gj
.my_index;

451 
	gãm∂©e
<
ty≥«me
 
	gC⁄èöî
,Åy≥«mê
	gT
,Åy≥«mê
	gU
>

452 
boﬁ
 
	g›î©‹
>–c⁄° 
	gve˘‹_ôî©‹
<
	gC⁄èöî
,
	gT
>& 
	gi
, c⁄° ve˘‹_ôî©‹<C⁄èöî,
	gU
>& 
	gj
 ) {

453  
	gj
<
	gi
;

456 
	gãm∂©e
<
ty≥«me
 
	gC⁄èöî
,Åy≥«mê
	gT
,Åy≥«mê
	gU
>

457 
boﬁ
 
	g›î©‹
>=–c⁄° 
ve˘‹_ôî©‹
<
C⁄èöî
,
	gT
>& 
	gi
, c⁄° 
	gve˘‹_ôî©‹
<
	gC⁄èöî
,
	gU
>& 
	gj
 ) {

458  !(
	gi
<
	gj
);

461 
	gãm∂©e
<
ty≥«me
 
	gC⁄èöî
,Åy≥«mê
	gT
,Åy≥«mê
	gU
>

462 
boﬁ
 
	g›î©‹
<=–c⁄° 
ve˘‹_ôî©‹
<
C⁄èöî
,
	gT
>& 
	gi
, c⁄° 
	gve˘‹_ôî©‹
<
	gC⁄èöî
,
	gU
>& 
	gj
 ) {

463  !(
	gj
<
	gi
);

466 
	gãm∂©e
<
ty≥«me
 
	gC⁄èöî
,Åy≥«mê
	gT
,Åy≥«mê
	gU
>

467 
±rdiff_t
 
	g›î©‹
-–c⁄° 
	gve˘‹_ôî©‹
<
	gC⁄èöî
,
	gT
>& 
	gi
, c⁄° ve˘‹_ôî©‹<C⁄èöî,
	gU
>& 
	gj
 ) {

468  
±rdiff_t
(
i
.
my_ödex
)-±rdiff_t(
j
.my_index);

471 
	gãm∂©e
<
ty≥«me
 
	gT
, 
˛ass
 
	gA
>

472 ˛as†
	cÆloˇt‹_ba£
 {

473 
	gpublic
:

474 
ty≥«me
 
	tA
::
	tãm∂©e


475 
	tªböd
<
	tT
>::
	tŸhî
 
	tÆloˇt‹_ty≥
;

476 
Æloˇt‹_ty≥
 
	gmy_Æloˇt‹
;

478 
Æloˇt‹_ba£
(c⁄° 
Æloˇt‹_ty≥
 &
a
 =áŒoˇt‹_ty≥(ËË: 
my_Æloˇt‹
(a) {}

547 
	gãm∂©e
<
ty≥«me
 
	gT
, 
˛ass
 
	gA
>

548 
˛ass
 
	gc⁄cuºít_ve˘‹
: 
¥Ÿe˘ed
 
öã∫Æ
::
Æloˇt‹_ba£
<
T
, 
	gA
>,

549 
¥iv©e
 
	göã∫Æ
::
c⁄cuºít_ve˘‹_ba£
 {

550 
¥iv©e
:

551 
ãm∂©e
<
ty≥«me
 
I
>

552 
˛ass
 
gíîic_ønge_ty≥
: 
public
 
blocked_ønge
<
I
> {

553 
public
:

554 
T
 
	tvÆue_ty≥
;

555 
	gT
& 
	tª„ªn˚
;

556 c⁄° 
	tT
& 
	tc⁄°_ª„ªn˚
;

557 
I
 
	tôî©‹
;

558 
±rdiff_t
 
	tdif„ªn˚_ty≥
;

559 
gíîic_ønge_ty≥
–
I
 
begö_
, I 
íd_
, 
size_t
 
gøösize_
 = 1Ë: 
blocked_ønge
<I>(begö_,
	gíd_
,
	ggøösize_
) {}

560 
	gãm∂©e
<
ty≥«me
 
	gU
>

561 
gíîic_ønge_ty≥
–c⁄° gíîic_ønge_ty≥<
U
>& 
r
Ë: 
blocked_ønge
<
I
>‘.
begö
(),
	gr
.
íd
(),r.
gøösize
()) {}

562 
gíîic_ønge_ty≥
–gíîic_ønge_ty≥& 
r
, 
•lô
 ) : 
blocked_ønge
<
I
>(r,split()) {}

565 
	gãm∂©e
<
ty≥«me
 
	gC
,Åy≥«mê
	gU
>

566 
‰õnd
 
˛ass
 
	göã∫Æ
::
ve˘‹_ôî©‹
;

568 
	gpublic
:

572 
öã∫Æ
::
	tc⁄cuºít_ve˘‹_ba£_v3
::
	tsize_ty≥
 size_type;

573 
ty≥«me
 
	töã∫Æ
::
	tÆloˇt‹_ba£
<
	tT
, 
	tA
>::
	tÆloˇt‹_ty≥
állocator_type;

575 
T
 
	tvÆue_ty≥
;

576 
±rdiff_t
 
	tdif„ªn˚_ty≥
;

577 
	gT
& 
	tª„ªn˚
;

578 c⁄° 
	tT
& 
	tc⁄°_ª„ªn˚
;

579 
T
 *
	tpoöãr
;

580 c⁄° 
	tT
 *
	tc⁄°_poöãr
;

582 
	göã∫Æ
::
	tve˘‹_ôî©‹
<
	tc⁄cuºít_ve˘‹
,
	tT
> 
	tôî©‹
;

583 
	göã∫Æ
::
	tve˘‹_ôî©‹
<
	tc⁄cuºít_ve˘‹
,c⁄° 
	tT
> 
	tc⁄°_ôî©‹
;

585 #i‡!
deföed
(
_MSC_VER
Ë|| 
_CPPLIB_VER
>=300

587 
	g°d
::
	tªvî£_ôî©‹
<
	tôî©‹
>Ñeverse_iterator;

588 
	g°d
::
	tªvî£_ôî©‹
<
	tc⁄°_ôî©‹
> 
	tc⁄°_ªvî£_ôî©‹
;

591 
	g°d
::
	tªvî£_ôî©‹
<
	tôî©‹
,
	tT
,T&,T*>Ñeverse_iterator;

592 
	g°d
::
	tªvî£_ôî©‹
<
	tc⁄°_ôî©‹
,
	tT
,c⁄° T&,c⁄° T*> 
	tc⁄°_ªvî£_ôî©‹
;

598 
	ggíîic_ønge_ty≥
<
	tôî©‹
> 
	tønge_ty≥
;

599 
	ggíîic_ønge_ty≥
<
	tc⁄°_ôî©‹
> 
	tc⁄°_ønge_ty≥
;

606 
ex∂icô
 
c⁄cuºít_ve˘‹
(c⁄° 
Æloˇt‹_ty≥
 &
a
 =állocator_type())

607 : 
öã∫Æ
::
Æloˇt‹_ba£
<
T
, 
	gA
>(
	ga
), 
	göã∫Æ
::
c⁄cuºít_ve˘‹_ba£
()

609 
ve˘‹_Æloˇt‹_±r
 = &
öã∫Æ_Æloˇt‹
;

614 #i‡
__TBB_INITIALIZER_LISTS_PRESENT


616 
c⁄cuºít_ve˘‹
(
°d
::
öôülizî_li°
<
T
> 
öô_li°
, c⁄° 
Æloˇt‹_ty≥
 &
a
 =állocator_type())

617 : 
öã∫Æ
::
Æloˇt‹_ba£
<
T
, 
	gA
>(
	ga
), 
	göã∫Æ
::
c⁄cuºít_ve˘‹_ba£
()

619 
ve˘‹_Æloˇt‹_±r
 = &
öã∫Æ_Æloˇt‹
;

620 
	g__TBB_TRY
 {

621 
öã∫Æ_assign_ôî©‹s
(
öô_li°
.
begö
(), inô_li°.
íd
());

622 } 
__TBB_CATCH
(...) {

623 
£gmít_t
 *
	gèbÀ
 = 
my_£gmít
.
lﬂd
<
ªœxed
>();;

624 
öã∫Æ_‰ì_£gmíts
–
èbÀ
, 
öã∫Æ_˛ór
(&
de°roy_¨øy
), 
my_fú°_block
.
lﬂd
<
ªœxed
>());

625 
__TBB_RETHROW
();

632 
c⁄cuºít_ve˘‹
–c⁄° c⁄cuºít_ve˘‹& 
ve˘‹
, c⁄° 
Æloˇt‹_ty≥
& 
a
 =állocator_type() )

633 : 
öã∫Æ
::
Æloˇt‹_ba£
<
T
, 
	gA
>(
	ga
), 
	göã∫Æ
::
c⁄cuºít_ve˘‹_ba£
()

635 
ve˘‹_Æloˇt‹_±r
 = &
öã∫Æ_Æloˇt‹
;

636 
	g__TBB_TRY
 {

637 
öã∫Æ_c›y
(
ve˘‹
, (
T
), &
c›y_¨øy
);

638 } 
__TBB_CATCH
(...) {

639 
£gmít_t
 *
	gèbÀ
 = 
my_£gmít
.
lﬂd
<
ªœxed
>();

640 
öã∫Æ_‰ì_£gmíts
–
èbÀ
, 
öã∫Æ_˛ór
(&
de°roy_¨øy
), 
my_fú°_block
.
lﬂd
<
ªœxed
>());

641 
__TBB_RETHROW
();

645 #i‡
__TBB_CPP11_RVALUE_REF_PRESENT


648 
c⁄cuºít_ve˘‹
–c⁄cuºít_ve˘‹&& 
sour˚
)

649 : 
öã∫Æ
::
Æloˇt‹_ba£
<
T
, 
	gA
>(
	g°d
::
move
(
sour˚
)), 
	göã∫Æ
::
c⁄cuºít_ve˘‹_ba£
()

651 
ve˘‹_Æloˇt‹_±r
 = &
öã∫Æ_Æloˇt‹
;

652 
	gc⁄cuºít_ve˘‹_ba£_v3
::
öã∫Æ_sw≠
(
sour˚
);

655 
c⁄cuºít_ve˘‹
–c⁄cuºít_ve˘‹&& 
sour˚
, c⁄° 
Æloˇt‹_ty≥
& 
a
)

656 : 
öã∫Æ
::
Æloˇt‹_ba£
<
T
, 
	gA
>(
	ga
), 
	göã∫Æ
::
c⁄cuºít_ve˘‹_ba£
()

658 
ve˘‹_Æloˇt‹_±r
 = &
öã∫Æ_Æloˇt‹
;

661 i‡(
	ga
 =
sour˚
.
my_Æloˇt‹
) {

662 
c⁄cuºít_ve˘‹_ba£_v3
::
öã∫Æ_sw≠
(
sour˚
);

664 
	g__TBB_TRY
 {

665 
öã∫Æ_c›y
(
sour˚
, (
T
), &
move_¨øy
);

666 } 
__TBB_CATCH
(...) {

667 
£gmít_t
 *
	gèbÀ
 = 
my_£gmít
.
lﬂd
<
ªœxed
>();

668 
öã∫Æ_‰ì_£gmíts
–
èbÀ
, 
öã∫Æ_˛ór
(&
de°roy_¨øy
), 
my_fú°_block
.
lﬂd
<
ªœxed
>());

669 
__TBB_RETHROW
();

677 
	gãm∂©e
<
˛ass
 
	gM
>

678 
c⁄cuºít_ve˘‹
–c⁄° c⁄cuºít_ve˘‹<
T
, 
M
>& 
ve˘‹
, c⁄° 
Æloˇt‹_ty≥
& 
a
 =állocator_type() )

679 : 
öã∫Æ
::
Æloˇt‹_ba£
<
T
, 
	gA
>(
	ga
), 
	göã∫Æ
::
c⁄cuºít_ve˘‹_ba£
()

681 
ve˘‹_Æloˇt‹_±r
 = &
öã∫Æ_Æloˇt‹
;

682 
	g__TBB_TRY
 {

683 
öã∫Æ_c›y
(
ve˘‹
.
öã∫Æ_ve˘‹_ba£
(), (
T
), &
c›y_¨øy
);

684 } 
__TBB_CATCH
(...) {

685 
£gmít_t
 *
	gèbÀ
 = 
my_£gmít
.
lﬂd
<
ªœxed
>();

686 
öã∫Æ_‰ì_£gmíts
–
èbÀ
, 
öã∫Æ_˛ór
(&
de°roy_¨øy
), 
my_fú°_block
.
lﬂd
<
ªœxed
>() );

687 
__TBB_RETHROW
();

692 
ex∂icô
 
c⁄cuºít_ve˘‹
(
size_ty≥
 
n
)

694 
	gve˘‹_Æloˇt‹_±r
 = &
öã∫Æ_Æloˇt‹
;

695 
	g__TBB_TRY
 {

696 
öã∫Æ_ªsize
–
n
, (
T
), 
max_size
(), 
NULL
, &
de°roy_¨øy
, &
öôülize_¨øy
 );

697 } 
__TBB_CATCH
(...) {

698 
£gmít_t
 *
	gèbÀ
 = 
my_£gmít
.
lﬂd
<
ªœxed
>();

699 
öã∫Æ_‰ì_£gmíts
–
èbÀ
, 
öã∫Æ_˛ór
(&
de°roy_¨øy
), 
my_fú°_block
.
lﬂd
<
ªœxed
>() );

700 
__TBB_RETHROW
();

705 
c⁄cuºít_ve˘‹
(
size_ty≥
 
n
, 
c⁄°_ª„ªn˚
 
t
, c⁄° 
Æloˇt‹_ty≥
& 
a
 =állocator_type())

706 : 
öã∫Æ
::
Æloˇt‹_ba£
<
T
, 
	gA
>(
	ga
)

708 
	gve˘‹_Æloˇt‹_±r
 = &
öã∫Æ_Æloˇt‹
;

709 
	g__TBB_TRY
 {

710 
öã∫Æ_ªsize
–
n
, (
T
), 
max_size
(), 
°©ic_ˇ°
<c⁄° *>(&
t
), &
de°roy_¨øy
, &
öôülize_¨øy_by
 );

711 } 
__TBB_CATCH
(...) {

712 
£gmít_t
 *
	gèbÀ
 = 
my_£gmít
.
lﬂd
<
ªœxed
>();

713 
öã∫Æ_‰ì_£gmíts
–
èbÀ
, 
öã∫Æ_˛ór
(&
de°roy_¨øy
), 
my_fú°_block
.
lﬂd
<
ªœxed
>() );

714 
__TBB_RETHROW
();

719 
	gãm∂©e
<
˛ass
 
	gI
>

720 
c⁄cuºít_ve˘‹
(
I
 
fú°
, I 
œ°
, c⁄° 
Æloˇt‹_ty≥
 &
a
 =állocator_type())

721 : 
öã∫Æ
::
Æloˇt‹_ba£
<
T
, 
	gA
>(
	ga
)

723 
	gve˘‹_Æloˇt‹_±r
 = &
öã∫Æ_Æloˇt‹
;

724 
	g__TBB_TRY
 {

725 
öã∫Æ_assign_ønge
(
fú°
, 
œ°
, 
°©ic_ˇ°
<
is_öãgî_èg
<
°d
::
numîic_limôs
<
I
>::
is_öãgî
> *>(0) );

726 } 
__TBB_CATCH
(...) {

727 
£gmít_t
 *
	gèbÀ
 = 
my_£gmít
.
lﬂd
<
ªœxed
>();

728 
öã∫Æ_‰ì_£gmíts
–
èbÀ
, 
öã∫Æ_˛ór
(&
de°roy_¨øy
), 
my_fú°_block
.
lﬂd
<
ªœxed
>() );

729 
__TBB_RETHROW
();

734 
	gc⁄cuºít_ve˘‹
& 
	g›î©‹
=–c⁄° 
c⁄cuºít_ve˘‹
& 
ve˘‹
 ) {

735 if–
this
 !&
ve˘‹
 )

736 
öã∫Æ_assign
(
ve˘‹
, (
T
), &
de°roy_¨øy
, &
assign_¨øy
, &
c›y_¨øy
);

737  *
	gthis
;

740 #i‡
__TBB_CPP11_RVALUE_REF_PRESENT


743 
	gc⁄cuºít_ve˘‹
& 
	g›î©‹
=–
c⁄cuºít_ve˘‹
&& 
Ÿhî
 ) {

744 
__TBB_ASSERT
(
this
 !&
Ÿhî
, "MoveássignmentÅo itself isÖrohibited ");

745 
ty≥«me
 
	ttbb
::
	töã∫Æ
::
	tÆloˇt‹_åaôs
<
	tA
>::
	t¥›ag©e_⁄_c⁄èöî_move_assignmít
 
	tpocma_t
;

746 if(
	gpocma_t
::
vÆue
 || 
this
->
my_Æloˇt‹
 =
Ÿhî
.my_allocator) {

747 
c⁄cuºít_ve˘‹
 
åash
 (
°d
::
move
(*
this
));

748 
öã∫Æ_sw≠
(
Ÿhî
);

749 i‡(
	gpocma_t
::
vÆue
) {

750 
this
->
my_Æloˇt‹
 = 
°d
::
move
(
Ÿhî
.my_allocator);

753 
öã∫Æ_assign
(
Ÿhî
, (
T
), &
de°roy_¨øy
, &
move_assign_¨øy
, &
move_¨øy
);

755  *
	gthis
;

761 
	gãm∂©e
<
˛ass
 
	gM
>

762 
	gc⁄cuºít_ve˘‹
& 
	g›î©‹
=–c⁄° 
c⁄cuºít_ve˘‹
<
T
, 
	gM
>& 
	gve˘‹
 ) {

763 if–
	g°©ic_ˇ°
<*>–
	gthis
 ) !
°©ic_ˇ°
<c⁄° *>–&
ve˘‹
 ) )

764 
öã∫Æ_assign
(
ve˘‹
.
öã∫Æ_ve˘‹_ba£
(),

765 (
T
), &
de°roy_¨øy
, &
assign_¨øy
, &
c›y_¨øy
);

766  *
	gthis
;

769 #i‡
__TBB_INITIALIZER_LISTS_PRESENT


771 
	gc⁄cuºít_ve˘‹
& 
	g›î©‹
=–
°d
::
öôülizî_li°
<
T
> 
öô_li°
 ) {

772 
öã∫Æ_˛ór
(&
de°roy_¨øy
);

773 
öã∫Æ_assign_ôî©‹s
(
öô_li°
.
begö
(), inô_li°.
íd
());

774  *
	gthis
;

783 
ôî©‹
 
grow_by
–
size_ty≥
 
dñè
 ) {

784  
ôî©‹
(*
this
, 
dñè
 ? 
öã∫Æ_grow_by
–dñè, (
T
), &
öôülize_¨øy
, 
NULL
 ) : 
my_óæy_size
.
lﬂd
());

789 
ôî©‹
 
grow_by
–
size_ty≥
 
dñè
, 
c⁄°_ª„ªn˚
 
t
 ) {

790  
ôî©‹
(*
this
, 
dñè
 ? 
öã∫Æ_grow_by
–dñè, (
T
), &
öôülize_¨øy_by
, 
°©ic_ˇ°
<c⁄° *>(&
t
ËË: 
my_óæy_size
.
lﬂd
());

794 
	gãm∂©e
<
ty≥«me
 
	gI
>

795 
ôî©‹
 
grow_by
–
I
 
fú°
, I 
œ°
 ) {

796 
ty≥«me
 
	g°d
::
ôî©‹_åaôs
<
I
>::
dif„ªn˚_ty≥
 
dñè
 = 
°d
::
di°™˚
(
fú°
, 
œ°
);

797 
__TBB_ASSERT
–
dñè
 >0, 
NULL
);

799  
ôî©‹
(*
this
, 
dñè
 ? 
öã∫Æ_grow_by
(dñè, (
T
), &
c›y_ønge
<
I
>, 
°©ic_ˇ°
<c⁄° *>(&
fú°
)Ë: 
my_óæy_size
.
lﬂd
());

802 #i‡
__TBB_INITIALIZER_LISTS_PRESENT


804 
ôî©‹
 
grow_by
–
°d
::
öôülizî_li°
<
T
> 
öô_li°
 ) {

805  
grow_by
–
öô_li°
.
begö
(), inô_li°.
íd
() );

814 
ôî©‹
 
grow_to_©_Àa°
–
size_ty≥
 
n
 ) {

815 
size_ty≥
 
	gm
=0;

816 if–
	gn
 ) {

817 
	gm
 = 
öã∫Æ_grow_to_©_Àa°_wôh_ªsu…
–
n
, (
T
), &
öôülize_¨øy
, 
NULL
 );

818 if–
	gm
>
	gn
 ) m=
n
;

820  
ôî©‹
(*
this
, 
m
);

825 
ôî©‹
 
grow_to_©_Àa°
–
size_ty≥
 
n
, 
c⁄°_ª„ªn˚
 
t
 ) {

826 
size_ty≥
 
	gm
=0;

827 if–
	gn
 ) {

828 
	gm
 = 
öã∫Æ_grow_to_©_Àa°_wôh_ªsu…
–
n
, (
T
), &
öôülize_¨øy_by
, &
t
);

829 if–
	gm
>
	gn
 ) m=
n
;

831  
ôî©‹
(*
this
, 
m
);

836 
ôî©‹
 
push_back
–
c⁄°_ª„ªn˚
 
ôem
 )

838 
size_ty≥
 
	gk
;

839 
T
* 
	g±r
 = 
°©ic_ˇ°
<T*>(
öã∫Æ_push_back
((T),
k
));

840 
ñemít_c⁄°ru˘i⁄_gu¨d
 
g
(
±r
);

841 
√w
(
±r
Ë
T
(
ôem
);

842 
	gg
.
dismiss
();

843  
ôî©‹
(*
this
, 
k
, 
±r
);

846 #i‡ 
__TBB_CPP11_RVALUE_REF_PRESENT


849 
ôî©‹
 
push_back
–
T
&& 
ôem
 )

851 
size_ty≥
 
	gk
;

852 
T
* 
	g±r
 = 
°©ic_ˇ°
<T*>(
öã∫Æ_push_back
((T),
k
));

853 
ñemít_c⁄°ru˘i⁄_gu¨d
 
g
(
±r
);

854 
√w
(
±r
Ë
T
(
°d
::
move
(
ôem
));

855 
	gg
.
dismiss
();

856  
ôî©‹
(*
this
, 
k
, 
±r
);

858 #i‡
__TBB_CPP11_VARIADIC_TEMPLATES_PRESENT


861 
	gãm∂©e
<
	gty≥«me
... 
	gArgs
>

862 
ôî©‹
 
em∂a˚_back
–
Args
&&... 
¨gs
)

864 
size_ty≥
 
	gk
;

865 
T
* 
	g±r
 = 
°©ic_ˇ°
<T*>(
öã∫Æ_push_back
((T),
k
));

866 
ñemít_c⁄°ru˘i⁄_gu¨d
 
g
(
±r
);

867 
√w
(
±r
Ë
T
–
°d
::
f‹w¨d
<
Args
>(
¨gs
)...);

868 
	gg
.
dismiss
();

869  
ôî©‹
(*
this
, 
k
, 
±r
);

876 
ª„ªn˚
 
	g›î©‹
[]–
size_ty≥
 
	gödex
 ) {

877  
öã∫Æ_subs¸ùt
(
ödex
);

881 
c⁄°_ª„ªn˚
 
	g›î©‹
[]–
size_ty≥
 
	gödex
 ) const {

882  
öã∫Æ_subs¸ùt
(
ödex
);

886 
ª„ªn˚
 
©
–
size_ty≥
 
ödex
 ) {

887  
öã∫Æ_subs¸ùt_wôh_ex˚±i⁄s
(
ödex
);

891 
c⁄°_ª„ªn˚
 
©
–
size_ty≥
 
ödex
 ) const {

892  
öã∫Æ_subs¸ùt_wôh_ex˚±i⁄s
(
ödex
);

896 
ønge_ty≥
 
ønge
–
size_t
 
gøösize
 = 1 ) {

897  
ønge_ty≥
–
begö
(), 
íd
(), 
gøösize
 );

901 
c⁄°_ønge_ty≥
 
ønge
–
size_t
 
gøösize
 = 1 ) const {

902  
c⁄°_ønge_ty≥
–
begö
(), 
íd
(), 
gøösize
 );

909 
size_ty≥
 
size
() const {

910 
size_ty≥
 
	gsz
 = 
my_óæy_size
, 
	g˝
 = 
öã∫Æ_ˇ∑côy
();

911  
	g˝
 < 
	gsz
 ? c∞: 
sz
;

915 
boﬁ
 
em±y
(Ëc⁄° { !
	gmy_óæy_size
;}

918 
size_ty≥
 
ˇ∑côy
(Ëc⁄° { 
öã∫Æ_ˇ∑côy
();}

923 
ª£rve
–
size_ty≥
 
n
 ) {

924 if–
	gn
 )

925 
öã∫Æ_ª£rve
(
n
, (
T
), 
max_size
());

929 
ªsize
–
size_ty≥
 
n
 ) {

930 
öã∫Æ_ªsize
–
n
, (
T
), 
max_size
(), 
NULL
, &
de°roy_¨øy
, &
öôülize_¨øy
 );

934 
ªsize
–
size_ty≥
 
n
, 
c⁄°_ª„ªn˚
 
t
 ) {

935 
öã∫Æ_ªsize
–
n
, (
T
), 
max_size
(), 
°©ic_ˇ°
<c⁄° *>(&
t
), &
de°roy_¨øy
, &
öôülize_¨øy_by
 );

939 
shrök_to_fô
();

942 
size_ty≥
 
max_size
(Ëc⁄° { (~size_ty≥(0))/(
	gT
);}

949 
ôî©‹
 
begö
(Ë{ iãøt‹(*
this
,0);}

951 
ôî©‹
 
íd
(Ë{ iãøt‹(*
this
,
size
());}

953 
c⁄°_ôî©‹
 
begö
(Ëc⁄° { c⁄°_ôî©‹(*
this
,0);}

955 
c⁄°_ôî©‹
 
íd
(Ëc⁄° { c⁄°_ôî©‹(*
this
,
size
());}

957 
c⁄°_ôî©‹
 
cbegö
(Ëc⁄° { c⁄°_ôî©‹(*
this
,0);}

959 
c⁄°_ôî©‹
 
˚nd
(Ëc⁄° { c⁄°_ôî©‹(*
this
,
size
());}

961 
ªvî£_ôî©‹
 
rbegö
(Ë{Ñevî£_ôî©‹(
íd
());}

963 
ªvî£_ôî©‹
 
ªnd
(Ë{Ñevî£_ôî©‹(
begö
());}

965 
c⁄°_ªvî£_ôî©‹
 
rbegö
(Ëc⁄° { c⁄°_ªvî£_ôî©‹(
íd
());}

967 
c⁄°_ªvî£_ôî©‹
 
ªnd
(Ëc⁄° { c⁄°_ªvî£_ôî©‹(
begö
());}

969 
c⁄°_ªvî£_ôî©‹
 
¸begö
(Ëc⁄° { c⁄°_ªvî£_ôî©‹(
íd
());}

971 
c⁄°_ªvî£_ôî©‹
 
¸íd
(Ëc⁄° { c⁄°_ªvî£_ôî©‹(
begö
());}

973 
ª„ªn˚
 
‰⁄t
() {

974 
__TBB_ASSERT
–
size
()>0, 
NULL
);

975  (
	gmy_£gmít
[0].
ãm∂©e
 
	glﬂd
<
	gªœxed
>().ãm∂©ê
	gpoöãr
<
	gT
>())[0];

978 
c⁄°_ª„ªn˚
 
‰⁄t
() const {

979 
__TBB_ASSERT
–
size
()>0, 
NULL
);

980  
	g°©ic_ˇ°
<c⁄° 
	gT
*>(
	gmy_£gmít
[0].
	g¨øy
)[0];

983 
ª„ªn˚
 
back
() {

984 
__TBB_ASSERT
–
size
()>0, 
NULL
);

985  
öã∫Æ_subs¸ùt
–
size
()-1 );

988 
c⁄°_ª„ªn˚
 
back
() const {

989 
__TBB_ASSERT
–
size
()>0, 
NULL
);

990  
öã∫Æ_subs¸ùt
–
size
()-1 );

993 
Æloˇt‹_ty≥
 
gë_Æloˇt‹
(Ëc⁄° {  
	gthis
->
	gmy_Æloˇt‹
; }

996 
assign
(
size_ty≥
 
n
, 
c⁄°_ª„ªn˚
 
t
) {

997 
˛ór
();

998 
öã∫Æ_ªsize
–
n
, (
T
), 
max_size
(), 
°©ic_ˇ°
<c⁄° *>(&
t
), &
de°roy_¨øy
, &
öôülize_¨øy_by
 );

1002 
	gãm∂©e
<
˛ass
 
	gI
>

1003 
assign
(
I
 
fú°
, I 
œ°
) {

1004 
˛ór
(); 
öã∫Æ_assign_ønge
–
fú°
, 
œ°
, 
°©ic_ˇ°
<
is_öãgî_èg
<
°d
::
numîic_limôs
<
I
>::
is_öãgî
> *>(0) );

1007 #i‡
__TBB_INITIALIZER_LISTS_PRESENT


1009 
assign
(
°d
::
öôülizî_li°
<
T
> 
öô_li°
) {

1010 
˛ór
(); 
öã∫Æ_assign_ôî©‹s
–
öô_li°
.
begö
(), inô_li°.
íd
());

1015 
sw≠
(
c⁄cuºít_ve˘‹
 &
ve˘‹
) {

1016 
usög
 
	g°d
::
sw≠
;

1017 if–
	gthis
 !&
ve˘‹
 ) {

1018 
c⁄cuºít_ve˘‹_ba£_v3
::
öã∫Æ_sw≠
(
°©ic_ˇ°
<c⁄cuºít_ve˘‹_ba£_v3&>(
ve˘‹
));

1019 
sw≠
(
this
->
my_Æloˇt‹
, 
ve˘‹
.my_allocator);

1025 
˛ór
() {

1026 
öã∫Æ_˛ór
(&
de°roy_¨øy
);

1030 ~
c⁄cuºít_ve˘‹
() {

1031 
£gmít_t
 *
	gèbÀ
 = 
my_£gmít
.
lﬂd
<
ªœxed
>();

1032 
öã∫Æ_‰ì_£gmíts
–
èbÀ
, 
öã∫Æ_˛ór
(&
de°roy_¨øy
), 
my_fú°_block
.
lﬂd
<
ªœxed
>() );

1036 c⁄° 
	göã∫Æ
::
c⁄cuºít_ve˘‹_ba£_v3
 &
öã∫Æ_ve˘‹_ba£
(Ëc⁄° {  *
this
; }

1037 
	g¥iv©e
:

1039 *
öã∫Æ_Æloˇt‹
(
öã∫Æ
::
c⁄cuºít_ve˘‹_ba£_v3
 &
vb
, 
size_t
 
k
) {

1040  
	g°©ic_ˇ°
<
	gc⁄cuºít_ve˘‹
<
	gT
, 
	gA
>&>(
	gvb
).
	gmy_Æloˇt‹
.
Æloˇã
(
k
);

1043 
öã∫Æ_‰ì_£gmíts
(
£gmít_t
 
èbÀ
[], 
£gmít_ödex_t
 
k
, segmít_ödex_à
fú°_block
);

1046 
	gT
& 
öã∫Æ_subs¸ùt
–
size_ty≥
 
ödex
 ) const;

1049 
	gT
& 
öã∫Æ_subs¸ùt_wôh_ex˚±i⁄s
–
size_ty≥
 
ödex
 ) const;

1052 
öã∫Æ_assign_n
(
size_ty≥
 
n
, 
c⁄°_poöãr
 
p
) {

1053 
öã∫Æ_ªsize
–
n
, (
T
), 
max_size
(), 
°©ic_ˇ°
<c⁄° *>(
p
), &
de°roy_¨øy
,Ö? &
öôülize_¨øy_by
 : &
öôülize_¨øy
 );

1057 
	gãm∂©e
<
boﬁ
 
	gB
> 
˛ass
 
	gis_öãgî_èg
;

1060 
	gãm∂©e
<
˛ass
 
	gI
>

1061 
öã∫Æ_assign_ønge
(
I
 
fú°
, I 
œ°
, 
is_öãgî_èg
<
åue
> *) {

1062 
öã∫Æ_assign_n
(
°©ic_ˇ°
<
size_ty≥
>(
fú°
), &°©ic_ˇ°<
T
&>(
œ°
));

1065 
	gãm∂©e
<
˛ass
 
	gI
>

1066 
öã∫Æ_assign_ønge
(
I
 
fú°
, I 
œ°
, 
is_öãgî_èg
<
Ál£
> *) {

1067 
öã∫Æ_assign_ôî©‹s
(
fú°
, 
œ°
);

1070 
	gãm∂©e
<
˛ass
 
	gI
>

1071 
öã∫Æ_assign_ôî©‹s
(
I
 
fú°
, I 
œ°
);

1076 
__TBB_EXPORTED_FUNC
 
öôülize_¨øy
–* 
begö
, c⁄° *, 
size_ty≥
 
n
 );

1079 
__TBB_EXPORTED_FUNC
 
öôülize_¨øy_by
–* 
begö
, c⁄° * 
§c
, 
size_ty≥
 
n
 );

1082 
__TBB_EXPORTED_FUNC
 
c›y_¨øy
–* 
d°
, c⁄° * 
§c
, 
size_ty≥
 
n
 );

1084 #i‡
__TBB_CPP11_RVALUE_REF_PRESENT


1086 
__TBB_EXPORTED_FUNC
 
move_¨øy
–* 
d°
, c⁄° * 
§c
, 
size_ty≥
 
n
 );

1088 
__TBB_EXPORTED_FUNC
 
move_assign_¨øy
–* 
d°
, c⁄° * 
§c
, 
size_ty≥
 
n
 );

1091 
	gãm∂©e
<
ty≥«me
 
	gIãøt‹
>

1092 
__TBB_EXPORTED_FUNC
 
c›y_ønge
–* 
d°
, c⁄° * 
p_ty≥_îa£d_ôî©‹
, 
size_ty≥
 
n
 );

1095 
__TBB_EXPORTED_FUNC
 
assign_¨øy
–* 
d°
, c⁄° * 
§c
, 
size_ty≥
 
n
 );

1098 
__TBB_EXPORTED_FUNC
 
de°roy_¨øy
–* 
begö
, 
size_ty≥
 
n
 );

1101 ˛as†
	cöã∫Æ_lo›_guide
 : 
öã∫Æ
::
no_c›y
 {

1102 
public
:

1103 c⁄° 
poöãr
 
¨øy
;

1104 c⁄° 
size_ty≥
 
	gn
;

1105 
size_ty≥
 
	gi
;

1107 c⁄° 
T
* 
as_c⁄°_poöãr
(c⁄° *
±r
Ë{  
	g°©ic_ˇ°
<c⁄° 
	gT
 *>(
	g±r
); }

1108 
T
* 
as_poöãr
(c⁄° *
§c
Ë{  
	g°©ic_ˇ°
<
	gT
*>(
	gc⁄°_ˇ°
<*>(
	g§c
)); }

1110 
öã∫Æ_lo›_guide
(
size_ty≥
 
¡rüls
, *
±r
)

1111 : 
¨øy
(
as_poöãr
(
±r
)), 
n
(
¡rüls
), 
i
(0) {}

1112 
öô
(Ë{ ; 
	gi
 < 
	gn
; ++iË
√w
–&
¨øy
[
i
] ) 
T
(); }

1113 
öô
(c⁄° *
§c
Ë{ ; 
	gi
 < 
	gn
; ++iË
√w
–&
¨øy
[
i
] ) 
T
(*
as_c⁄°_poöãr
(src)); }

1114 
c›y
(c⁄° *
§c
Ë{ ; 
	gi
 < 
	gn
; ++iË
√w
–&
¨øy
[
i
] ) 
T
(
as_c⁄°_poöãr
(src)[i]); }

1115 
assign
(c⁄° *
§c
Ë{ ; 
	gi
 < 
	gn
; ++iË
	g¨øy
[
i
] = 
as_c⁄°_poöãr
(src)[i]; }

1116 #i‡
__TBB_CPP11_RVALUE_REF_PRESENT


1117 
move_assign
(c⁄° *
§c
Ë{ ; 
	gi
 < 
	gn
; ++iË
	g¨øy
[
i
] = 
°d
::
move
(
as_poöãr
(src)[i]); }

1118 
move_c⁄°ru˘
(c⁄° *
§c
Ë{ ; 
	gi
 < 
	gn
; ++iË
√w
–&
¨øy
[
i
] ) 
T
–
°d
::
move
(
as_poöãr
(src)[i]) ); }

1121 
	gãm∂©e
<
˛ass
 
	gI
> 
ôî©e
(
I
 &
§c
Ë{ ; 
	gi
 < 
	gn
; ++i, ++
	g§c
Ë
√w
–&
¨øy
[
i
] ) 
T
( *src ); }

1122 ~
öã∫Æ_lo›_guide
() {

1123 if(
	gi
 < 
	gn
) {

1124 
	göã∫Æ
::
h™dÀ_unc⁄°ru˘ed_ñemíts
(
¨øy
+
i
, 
n
-i);

1129 ˛as†
	cñemít_c⁄°ru˘i⁄_gu¨d
 : 
öã∫Æ
::
no_c›y
{

1130 
poöãr
 
ñemít
;

1131 
	gpublic
:

1132 
ñemít_c⁄°ru˘i⁄_gu¨d
(
poöãr
 
™_ñemít
Ë: 
ñemít
 (an_element){}

1133 
dismiss
(){ 
ñemít
 = 
NULL
; }

1134 ~
ñemít_c⁄°ru˘i⁄_gu¨d
(){

1135 i‡(
	gñemít
){

1136 
	göã∫Æ
::
h™dÀ_unc⁄°ru˘ed_ñemíts
(
ñemít
, 1);

1142 #i‡
deföed
(
_MSC_VER
Ë&& !
	$deföed
(
__INTEL_COMPILER
)

1143 #¥agm®
	$w¨nög
 (
push
)

1144 #¥agm®
	$w¨nög
 (
dißbÀ
: 4701)

1146 
ãm∂©e
<
ty≥«me
 
T
, 
˛ass
 
A
>

1147 
c⁄cuºít_ve˘‹
<
T
, 
A
>::
	$shrök_to_fô
() {

1148 
öã∫Æ_£gmíts_èbÀ
 
ﬁd
;

1149 
__TBB_TRY
 {

1150 if–
	`öã∫Æ_com∑˘
–(
T
), &
ﬁd
, &
de°roy_¨øy
, &
c›y_¨øy
 ) )

1151 
	`öã∫Æ_‰ì_£gmíts
–
ﬁd
.
èbÀ
, 
poöãrs_≥r_l⁄g_èbÀ
, old.
fú°_block
 );

1152 } 
	`__TBB_CATCH
(...) {

1153 if–
ﬁd
.
fú°_block
 )

1154 
	`öã∫Æ_‰ì_£gmíts
–
ﬁd
.
èbÀ
, 1, old.
fú°_block
 );

1155 
	`__TBB_RETHROW
();

1157 
	}
}

1158 #i‡
deföed
(
_MSC_VER
Ë&& !
	$deföed
(
__INTEL_COMPILER
)

1159 #¥agm®
	$w¨nög
 (
p›
)

1162 
ãm∂©e
<
ty≥«me
 
T
, 
˛ass
 
A
>

1163 
c⁄cuºít_ve˘‹
<
T
, 
A
>::
	$öã∫Æ_‰ì_£gmíts
(
£gmít_t
 
èbÀ
[], 
£gmít_ödex_t
 
k
, segmít_ödex_à
fú°_block
) {

1165  
k
 > 
fú°_block
 ) {

1166 --
k
;

1167 
£gmít_vÆue_t
 
£gmít_vÆue
 = 
èbÀ
[
k
].
lﬂd
<
ªœxed
>();

1168 
èbÀ
[
k
].
°‹e
<
ªœxed
>(
	`£gmít_nŸ_u£d
());

1169 if–
£gmít_vÆue
 =
	`£gmít_Æloˇãd
() )

1170 
this
->
my_Æloˇt‹
.
	`dóŒoˇã
–(
£gmít_vÆue
.
poöãr
<
T
>()), 
	`£gmít_size
(
k
) );

1172 
£gmít_vÆue_t
 
£gmít_vÆue
 = 
èbÀ
[0].
lﬂd
<
ªœxed
>();

1173 if–
£gmít_vÆue
 =
	`£gmít_Æloˇãd
() ) {

1174 
	`__TBB_ASSERT
–
fú°_block
 > 0, 
NULL
 );

1175 
k
 > 0Ë
èbÀ
[--k].
°‹e
<
ªœxed
>(
	`£gmít_nŸ_u£d
());

1176 
this
->
my_Æloˇt‹
.
	`dóŒoˇã
–(
£gmít_vÆue
.
poöãr
<
T
>()), 
	`£gmít_size
(
fú°_block
) );

1178 
	}
}

1180 
	gãm∂©e
<
ty≥«me
 
	gT
, 
˛ass
 
	gA
>

1181 
	gT
& 
	gc⁄cuºít_ve˘‹
<T, 
	gA
>::
	$öã∫Æ_subs¸ùt
–
size_ty≥
 
ödex
 ) const {

1183 
	`__TBB_ASSERT
–
ödex
 < 
my_óæy_size
, "index out of bounds" );

1184 
size_ty≥
 
j
 = 
ödex
;

1185 
£gmít_ödex_t
 
k
 = 
	`£gmít_ba£_ödex_of
–
j
 );

1186 
	`__TBB_ASSERT
–
my_£gmít
.
lﬂd
<
acquúe
>(Ë!
my_°‹age
 || 
k
 < 
poöãrs_≥r_sh‹t_èbÀ
, "index is beingállocated" );

1191 
£gmít_vÆue_t
 
£gmít_vÆue
 = 
my_£gmít
[
k
].
ãm∂©e
 
lﬂd
<
ªœxed
>();

1192 
	`__TBB_ASSERT
–
£gmít_vÆue
 !
	`£gmít_Æloˇti⁄_Áûed
(), "the instance is broken by badállocation. Useát() instead" );

1193 
	`__TBB_ASSERT
–
£gmít_vÆue
 !
	`£gmít_nŸ_u£d
(), "index is beingállocated" );

1194  (–
£gmít_vÆue
.
poöãr
<
T
>()))[
j
];

1195 
	}
}

1197 
	gãm∂©e
<
ty≥«me
 
	gT
, 
˛ass
 
	gA
>

1198 
	gT
& 
	gc⁄cuºít_ve˘‹
<T, 
	gA
>::
	$öã∫Æ_subs¸ùt_wôh_ex˚±i⁄s
–
size_ty≥
 
ödex
 ) const {

1199 if–
ödex
 >
my_óæy_size
 )

1200 
öã∫Æ
::
	`throw_ex˚±i⁄
(öã∫Æ::
eid_out_of_ønge
);

1201 
size_ty≥
 
j
 = 
ödex
;

1202 
£gmít_ödex_t
 
k
 = 
	`£gmít_ba£_ödex_of
–
j
 );

1204 if–
my_£gmít
.
lﬂd
<
acquúe
>(Ë=
my_°‹age
 && 
k
 >
poöãrs_≥r_sh‹t_èbÀ
 )

1205 
öã∫Æ
::
	`throw_ex˚±i⁄
(öã∫Æ::
eid_£gmít_ønge_îr‹
);

1210 
£gmít_vÆue_t
 
£gmít_vÆue
 = 
my_£gmít
[
k
].
ãm∂©e
 
lﬂd
<
ªœxed
>();

1211 if–
£gmít_vÆue
 !
	`£gmít_Æloˇãd
() )

1212 
öã∫Æ
::
	`throw_ex˚±i⁄
(öã∫Æ::
eid_ödex_ønge_îr‹
);

1213  (
£gmít_vÆue
.
poöãr
<
T
>())[
j
];

1214 
	}
}

1216 
	gãm∂©e
<
ty≥«me
 
	gT
, 
˛ass
 
	gA
>Åem∂©e<˛as†
	gI
>

1217 
	gc⁄cuºít_ve˘‹
<
	gT
, 
	gA
>::
	$öã∫Æ_assign_ôî©‹s
(
I
 
fú°
, I 
œ°
) {

1218 
	`__TBB_ASSERT
(
my_óæy_size
 =0, 
NULL
);

1219 
size_ty≥
 
n
 = 
°d
::
	`di°™˚
(
fú°
, 
œ°
);

1220 if–!
n
 ) ;

1221 
	`öã∫Æ_ª£rve
(
n
, (
T
), 
	`max_size
());

1222 
my_óæy_size
 = 
n
;

1223 
£gmít_ödex_t
 
k
 = 0;

1225 
size_ty≥
 
sz
 = 
	`£gmít_size
–
my_fú°_block
 );

1226  
sz
 < 
n
 ) {

1227 
öã∫Æ_lo›_guide
 
	`lo›
(
sz
, 
my_£gmít
[
k
].
ãm∂©e
 
lﬂd
<
ªœxed
>().ãm∂©ê
poöãr
<>());

1228 
lo›
.
	`ôî©e
(
fú°
);

1229 
n
 -
sz
;

1230 if–!
k
 ) k = 
my_fú°_block
;

1231 { ++
k
; 
sz
 <<= 1; }

1233 
öã∫Æ_lo›_guide
 
	`lo›
(
n
, 
my_£gmít
[
k
].
ãm∂©e
 
lﬂd
<
ªœxed
>().ãm∂©ê
poöãr
<>());

1234 
lo›
.
	`ôî©e
(
fú°
);

1235 
	}
}

1237 
	gãm∂©e
<
ty≥«me
 
	gT
, 
˛ass
 
	gA
>

1238 
	gc⁄cuºít_ve˘‹
<
	gT
, 
	gA
>::
	$öôülize_¨øy
–* 
begö
, c⁄° *, 
size_ty≥
 
n
 ) {

1239 
öã∫Æ_lo›_guide
 
	`lo›
(
n
, 
begö
); 
lo›
.
	`öô
();

1240 
	}
}

1242 
	gãm∂©e
<
ty≥«me
 
	gT
, 
˛ass
 
	gA
>

1243 
	gc⁄cuºít_ve˘‹
<
	gT
, 
	gA
>::
	$öôülize_¨øy_by
–* 
begö
, c⁄° *
§c
, 
size_ty≥
 
n
 ) {

1244 
öã∫Æ_lo›_guide
 
	`lo›
(
n
, 
begö
); 
lo›
.
	`öô
(
§c
);

1245 
	}
}

1247 
	gãm∂©e
<
ty≥«me
 
	gT
, 
˛ass
 
	gA
>

1248 
	gc⁄cuºít_ve˘‹
<
	gT
, 
	gA
>::
	$c›y_¨øy
–* 
d°
, c⁄° * 
§c
, 
size_ty≥
 
n
 ) {

1249 
öã∫Æ_lo›_guide
 
	`lo›
(
n
, 
d°
); 
lo›
.
	`c›y
(
§c
);

1250 
	}
}

1252 #i‡
__TBB_CPP11_RVALUE_REF_PRESENT


1253 
	gãm∂©e
<
ty≥«me
 
	gT
, 
˛ass
 
	gA
>

1254 
	gc⁄cuºít_ve˘‹
<
	gT
, 
	gA
>::
	$move_¨øy
–* 
d°
, c⁄° * 
§c
, 
size_ty≥
 
n
 ) {

1255 
öã∫Æ_lo›_guide
 
	`lo›
(
n
, 
d°
); 
lo›
.
	`move_c⁄°ru˘
(
§c
);

1256 
	}
}

1258 
	gãm∂©e
<
ty≥«me
 
	gT
, 
˛ass
 
	gA
>

1259 
	gc⁄cuºít_ve˘‹
<
	gT
, 
	gA
>::
	$move_assign_¨øy
–* 
d°
, c⁄° * 
§c
, 
size_ty≥
 
n
 ) {

1260 
öã∫Æ_lo›_guide
 
	`lo›
(
n
, 
d°
); 
lo›
.
	`move_assign
(
§c
);

1261 
	}
}

1264 
	gãm∂©e
<
ty≥«me
 
	gT
, 
˛ass
 
	gA
>

1265 
	gãm∂©e
<
ty≥«me
 
	gI
>

1266 
	gc⁄cuºít_ve˘‹
<
	gT
, 
	gA
>::
	$c›y_ønge
–* 
d°
, c⁄° * 
p_ty≥_îa£d_ôî©‹
, 
size_ty≥
 
n
 ){

1267 
I
 & 
	`ôî©‹
 ((*
c⁄°_ˇ°
<I*>(
°©ic_ˇ°
<c⁄° I*>(
p_ty≥_îa£d_ôî©‹
))));

1268 
öã∫Æ_lo›_guide
 
	`lo›
(
n
, 
d°
); 
lo›
.
	`ôî©e
(
ôî©‹
);

1269 
	}
}

1271 
	gãm∂©e
<
ty≥«me
 
	gT
, 
˛ass
 
	gA
>

1272 
	gc⁄cuºít_ve˘‹
<
	gT
, 
	gA
>::
	$assign_¨øy
–* 
d°
, c⁄° * 
§c
, 
size_ty≥
 
n
 ) {

1273 
öã∫Æ_lo›_guide
 
	`lo›
(
n
, 
d°
); 
lo›
.
	`assign
(
§c
);

1274 
	}
}

1276 #i‡
deföed
(
_MSC_VER
Ë&& !
	$deföed
(
__INTEL_COMPILER
)

1278 #¥agm®
	$w¨nög
 (
push
)

1279 #¥agm®
	$w¨nög
 (
dißbÀ
: 4189)

1281 
ãm∂©e
<
ty≥«me
 
T
, 
˛ass
 
A
>

1282 
c⁄cuºít_ve˘‹
<
T
, 
A
>::
	$de°roy_¨øy
–* 
begö
, 
size_ty≥
 
n
 ) {

1283 
T
* 
¨øy
 = 
°©ic_ˇ°
<T*>(
begö
);

1284  
size_ty≥
 
j
=
n
; j>0; --j )

1285 
¨øy
[
j
-1].~
	`T
();

1286 
	}
}

1287 #i‡
deföed
(
_MSC_VER
Ë&& !
	$deföed
(
__INTEL_COMPILER
)

1288 #¥agm®
	$w¨nög
 (
p›
)

1292 
ãm∂©e
<
ty≥«me
 
T
, 
˛ass
 
A1
, cœs†
A2
>

1293 
ölöe
 
boﬁ
 
›î©‹
==(c⁄° 
c⁄cuºít_ve˘‹
<
T
, 
A1
> &
a
, c⁄° c⁄cuºít_ve˘‹<T, 
A2
> &
b
) {

1296 if(
a
.
	`size
(Ë!
b
.size()Ë 
Ál£
;

1297 
ty≥«me
 
c⁄cuºít_ve˘‹
<
T
, 
A1
>::
c⁄°_ôî©‹
 
	`i
(
a
.
	`begö
());

1298 
ty≥«me
 
c⁄cuºít_ve˘‹
<
T
, 
A2
>::
c⁄°_ôî©‹
 
	`j
(
b
.
	`begö
());

1299 ; 
i
 !
a
.
	`íd
(); ++i, ++
j
)

1300 if–!(*
i
 =*
j
ËË 
Ál£
;

1301  
åue
;

1302 
	}
}

1304 
	gãm∂©e
<
ty≥«me
 
	gT
, 
˛ass
 
	gA1
, cœs†
	gA2
>

1305 
ölöe
 
boﬁ
 
	g›î©‹
!=(c⁄° 
c⁄cuºít_ve˘‹
<
T
, 
	gA1
> &
	ga
, c⁄° 
	gc⁄cuºít_ve˘‹
<
	gT
, 
	gA2
> &
	gb
)

1306 {  !(
	ga
 =
b
); }

1308 
	gãm∂©e
<
ty≥«me
 
	gT
, 
˛ass
 
	gA1
, cœs†
	gA2
>

1309 
ölöe
 
boﬁ
 
	g›î©‹
<(c⁄° 
	gc⁄cuºít_ve˘‹
<
	gT
, 
	gA1
> &
	ga
, c⁄° c⁄cuºít_ve˘‹<T, 
	gA2
> &
	gb
)

1310 {  (
	g°d
::
Àxicogøphiˇl_com∑ª
(
a
.
begö
(),á.
íd
(), 
b
.begin(), b.end())); }

1312 
	gãm∂©e
<
ty≥«me
 
	gT
, 
˛ass
 
	gA1
, cœs†
	gA2
>

1313 
ölöe
 
boﬁ
 
	g›î©‹
>(c⁄° 
	gc⁄cuºít_ve˘‹
<
	gT
, 
	gA1
> &
	ga
, c⁄° c⁄cuºít_ve˘‹<T, 
	gA2
> &
	gb
)

1314 {  
	gb
 < 
	ga
; }

1316 
	gãm∂©e
<
ty≥«me
 
	gT
, 
˛ass
 
	gA1
, cœs†
	gA2
>

1317 
ölöe
 
boﬁ
 
	g›î©‹
<=(c⁄° 
c⁄cuºít_ve˘‹
<
T
, 
	gA1
> &
	ga
, c⁄° 
	gc⁄cuºít_ve˘‹
<
	gT
, 
	gA2
> &
	gb
)

1318 {  !(
	gb
 < 
	ga
); }

1320 
	gãm∂©e
<
ty≥«me
 
	gT
, 
˛ass
 
	gA1
, cœs†
	gA2
>

1321 
ölöe
 
boﬁ
 
	g›î©‹
>=(c⁄° 
c⁄cuºít_ve˘‹
<
T
, 
	gA1
> &
	ga
, c⁄° 
	gc⁄cuºít_ve˘‹
<
	gT
, 
	gA2
> &
	gb
)

1322 {  !(
	ga
 < 
	gb
); }

1324 
	gãm∂©e
<
ty≥«me
 
	gT
, 
˛ass
 
	gA
>

1325 
ölöe
 
sw≠
(
c⁄cuºít_ve˘‹
<
T
, 
A
> &
a
, c⁄cuºít_ve˘‹<T, A> &
b
)

1326 { 
	ga
.
sw≠
–
b
 ); }

1330 #i‡
deföed
(
_MSC_VER
Ë&& !deföed(
__INTEL_COMPILER
)

1331 #¥agm®
w¨nög
 (
p›
)

	@viper/concurrentqueue-src/benchmarks/tbb/condition_variable.cpp

21 
	~"tbb/tbb_c⁄fig.h
"

22 
	~"tbb/com∑t/c⁄dôi⁄_v¨übÀ
"

23 
	~"tbb/©omic.h
"

24 
	~"tbb_misc.h
"

25 
	~"dy«mic_lök.h
"

26 
	~"ôt_nŸify.h
"

28 
«me•a˚
 
	gtbb
 {

30 
«me•a˚
 
	göã∫Æ
 {

33 #i‡
_WIN32
||
_WIN64


34 
usög
 
	gtbb
::
öãrÁ˚5
::
öã∫Æ
::
c⁄dôi⁄_v¨übÀ_usög_evít
;

36 
	g©omic
<
	gdo_⁄˚_°©e
> 
	gc⁄dv¨_≠i_°©e
;

38 
WINAPI
 
öô_c⁄dv¨_usög_evít
–
c⁄dôi⁄_v¨übÀ_usög_evít
* 
cv_evít
 )

41 
	gcv_evít
->
	gevít
 = 
Cª©eEvítEx
(
NULL
, NULL, 0x1 , 
EVENT_ALL_ACCESS
 );

42 
InôülizeCrôiˇlSe˘i⁄Ex
–&
cv_evít
->
muãx
, 4000, 0 );

43 
	gcv_evít
->
	gn_waôîs
 = 0;

44 
	gcv_evít
->
	gªÀa£_cou¡
 = 0;

45 
	gcv_evít
->
	gïoch
 = 0;

48 
BOOL
 
WINAPI
 
¶ìp_c⁄dôi⁄_v¨übÀ_cs_usög_evít
–
c⁄dôi⁄_v¨übÀ_usög_evít
* 
cv_evít
, 
LPCRITICAL_SECTION
 
cs
, 
DWORD
 
dwMûli£c⁄ds
 )

50 
E¡îCrôiˇlSe˘i⁄
–&
cv_evít
->
muãx
 );

51 ++
	gcv_evít
->
	gn_waôîs
;

52 
	gmy_gíî©i⁄
 = 
cv_evít
->
ïoch
;

53 
LóveCrôiˇlSe˘i⁄
–&
cv_evít
->
muãx
 );

54 
LóveCrôiˇlSe˘i⁄
–
cs
 );

57 
DWORD
 
	grc
 = 
WaôF‹SögÀObje˘Ex
–
cv_evít
->
evít
, 
dwMûli£c⁄ds
, 
FALSE
 );

58 
E¡îCrôiˇlSe˘i⁄
–&
cv_evít
->
muãx
 );

59 if–
	grc
!=
WAIT_OBJECT_0
 ) {

60 --
cv_evít
->
n_waôîs
;

61 
LóveCrôiˇlSe˘i⁄
–&
cv_evít
->
muãx
 );

62 if–
	grc
==
WAIT_TIMEOUT
 ) {

63 
SëLa°Eº‹
–
WAIT_TIMEOUT
 );

64 
E¡îCrôiˇlSe˘i⁄
–
cs
 );

66  
	gÁl£
;

68 
__TBB_ASSERT
–
rc
==
WAIT_OBJECT_0
, 
NULL
 );

69 if–
	gcv_evít
->
	gªÀa£_cou¡
>0 && cv_evít->
	gïoch
!=
my_gíî©i⁄
 )

71 
LóveCrôiˇlSe˘i⁄
–&
cv_evít
->
muãx
 );

75 --
	gcv_evít
->
	gn_waôîs
;

76 
	gcou¡
 = --
cv_evít
->
ªÀa£_cou¡
;

77 
LóveCrôiˇlSe˘i⁄
–&
cv_evít
->
muãx
 );

79 if–
	gcou¡
==0 ) {

80 
__TBB_ASSERT
–
cv_evít
->
evít
, "Premature destruction of condition variable?" );

81 
Re£tEvít
–
cv_evít
->
evít
 );

83 
E¡îCrôiˇlSe˘i⁄
–
cs
 );

84  
	gåue
;

87 
WINAPI
 
wake_c⁄dôi⁄_v¨übÀ_usög_evít
–
c⁄dôi⁄_v¨übÀ_usög_evít
* 
cv_evít
 )

89 
E¡îCrôiˇlSe˘i⁄
–&
cv_evít
->
muãx
 );

90 if–
	gcv_evít
->
	gn_waôîs
>cv_evít->
	gªÀa£_cou¡
 ) {

91 
SëEvít
–
cv_evít
->
evít
 );

92 ++
	gcv_evít
->
	gªÀa£_cou¡
;

93 ++
	gcv_evít
->
	gïoch
;

95 
LóveCrôiˇlSe˘i⁄
–&
cv_evít
->
muãx
 );

98 
WINAPI
 
wake_Æl_c⁄dôi⁄_v¨übÀ_usög_evít
–
c⁄dôi⁄_v¨übÀ_usög_evít
* 
cv_evít
 )

100 
E¡îCrôiˇlSe˘i⁄
–&
cv_evít
->
muãx
 );

101 if–
	gcv_evít
->
	gn_waôîs
>0 ) {

102 
SëEvít
–
cv_evít
->
evít
 );

103 
	gcv_evít
->
	gªÀa£_cou¡
 = 
cv_evít
->
n_waôîs
;

104 ++
	gcv_evít
->
	gïoch
;

106 
LóveCrôiˇlSe˘i⁄
–&
cv_evít
->
muãx
 );

109 
WINAPI
 
de°roy_c⁄dv¨_usög_evít
–
c⁄dôi⁄_v¨übÀ_usög_evít
* 
cv_evít
 )

111 
HANDLE
 
	gmy_evít
 = 
cv_evít
->
evít
;

112 
E¡îCrôiˇlSe˘i⁄
–&
cv_evít
->
muãx
 );

114 
	gcv_evít
->
	gevít
 = 
NULL
;

115 if–
	gcv_evít
->
	gn_waôîs
>0 ) {

116 
LóveCrôiˇlSe˘i⁄
–&
cv_evít
->
muãx
 );

117 
•ö_waô_u¡û_eq
–
cv_evít
->
n_waôîs
, 0 );

119 
E¡îCrôiˇlSe˘i⁄
–&
cv_evít
->
muãx
 );

121 
LóveCrôiˇlSe˘i⁄
–&
cv_evít
->
muãx
 );

122 
Clo£H™dÀ
–
my_evít
 );

125 
WINAPI
 
de°roy_c⁄dv¨_no›
–
CONDITION_VARIABLE
* ) { }

127 (
WINAPI
 *
	g__TBB_öô_c⁄dv¨
)–
	gPCONDITION_VARIABLE
 ) = ((WINAPI *)(
PCONDITION_VARIABLE
))&
öô_c⁄dv¨_usög_evít
;

128 
BOOL
 (
WINAPI
 *
__TBB_c⁄dv¨_waô
)–
	gPCONDITION_VARIABLE
, 
	gLPCRITICAL_SECTION
, 
	gDWORD
 ) = (BOOL (WINAPI *)(
PCONDITION_VARIABLE
,LPCRITICAL_SECTION, DWORD))&
	g¶ìp_c⁄dôi⁄_v¨übÀ_cs_usög_evít
;

129 (
WINAPI
 *
	g__TBB_c⁄dv¨_nŸify_⁄e
)–
	gPCONDITION_VARIABLE
 ) = ((WINAPI *)(
PCONDITION_VARIABLE
))&
wake_c⁄dôi⁄_v¨übÀ_usög_evít
;

130 (
WINAPI
 *
	g__TBB_c⁄dv¨_nŸify_Æl
)–
	gPCONDITION_VARIABLE
 ) = ((WINAPI *)(
PCONDITION_VARIABLE
))&
wake_Æl_c⁄dôi⁄_v¨übÀ_usög_evít
;

131 (
WINAPI
 *
	g__TBB_de°roy_c⁄dv¨
)–
	gPCONDITION_VARIABLE
 ) = ((WINAPI *)(
PCONDITION_VARIABLE
))&
de°roy_c⁄dv¨_usög_evít
;

134 c⁄° 
dy«mic_lök_des¸ùt‹
 
	gC⁄dV¨LökTabÀ
[] = {

135 
DLD
(
InôülizeC⁄dôi⁄V¨übÀ
, 
__TBB_öô_c⁄dv¨
),

136 
DLD
(
SÀïC⁄dôi⁄V¨übÀCS
, 
__TBB_c⁄dv¨_waô
),

137 
DLD
(
WakeC⁄dôi⁄V¨übÀ
, 
__TBB_c⁄dv¨_nŸify_⁄e
),

138 
DLD
(
WakeAŒC⁄dôi⁄V¨übÀ
, 
__TBB_c⁄dv¨_nŸify_Æl
)

141 
öô_c⁄dv¨_moduÀ
()

143 
__TBB_ASSERT
–(
uöçå_t
)
__TBB_öô_c⁄dv¨
==(uöçå_t)&
öô_c⁄dv¨_usög_evít
, 
NULL
 );

144 if–
dy«mic_lök
–"Kî√l32.dŒ", 
C⁄dV¨LökTabÀ
, 4 ) )

145 
	g__TBB_de°roy_c⁄dv¨
 = ((
WINAPI
 *)(
PCONDITION_VARIABLE
))&
de°roy_c⁄dv¨_no›
;

151 #i‡
_WIN32
||
_WIN64


153 
«me•a˚
 
	göãrÁ˚5
 {

154 
«me•a˚
 
	göã∫Æ
 {

156 
usög
 
	gtbb
::
öã∫Æ
::
c⁄dv¨_≠i_°©e
;

157 
usög
 
	gtbb
::
öã∫Æ
::
__TBB_öô_c⁄dv¨
;

158 
usög
 
	gtbb
::
öã∫Æ
::
__TBB_c⁄dv¨_waô
;

159 
usög
 
	gtbb
::
öã∫Æ
::
__TBB_c⁄dv¨_nŸify_⁄e
;

160 
usög
 
	gtbb
::
öã∫Æ
::
__TBB_c⁄dv¨_nŸify_Æl
;

161 
usög
 
	gtbb
::
öã∫Æ
::
__TBB_de°roy_c⁄dv¨
;

162 
usög
 
	gtbb
::
öã∫Æ
::
öô_c⁄dv¨_moduÀ
;

164 
öã∫Æ_öôülize_c⁄dôi⁄_v¨übÀ
–
c⁄dv¨_im∂_t
& 
cv
 )

166 
©omic_do_⁄˚
–&
öô_c⁄dv¨_moduÀ
, 
c⁄dv¨_≠i_°©e
 );

167 
__TBB_öô_c⁄dv¨
–&
cv
.
cv_«tive
 );

170 
öã∫Æ_de°roy_c⁄dôi⁄_v¨übÀ
–
c⁄dv¨_im∂_t
& 
cv
 )

172 
__TBB_de°roy_c⁄dv¨
–&
cv
.
cv_«tive
 );

175 
öã∫Æ_c⁄dôi⁄_v¨übÀ_nŸify_⁄e
–
c⁄dv¨_im∂_t
& 
cv
 )

177 
__TBB_c⁄dv¨_nŸify_⁄e
 ( &
cv
.
cv_«tive
 );

180 
öã∫Æ_c⁄dôi⁄_v¨übÀ_nŸify_Æl
–
c⁄dv¨_im∂_t
& 
cv
 )

182 
__TBB_c⁄dv¨_nŸify_Æl
–&
cv
.
cv_«tive
 );

185 
boﬁ
 
öã∫Æ_c⁄dôi⁄_v¨übÀ_waô
–
c⁄dv¨_im∂_t
& 
cv
, 
muãx
* 
mtx
, c⁄° 
tick_cou¡
::
öãrvÆ_t
* 
i
 )

187 
DWORD
 
duøti⁄
 = 
i
 ? DWORD((i->
£c⁄ds
()*1000)Ë: 
INFINITE
;

188 
	gmtx
->
£t_°©e
–
muãx
::
INITIALIZED
 );

189 
BOOL
 
	gªs
 = 
__TBB_c⁄dv¨_waô
–&
cv
.
cv_«tive
, 
mtx
->
«tive_h™dÀ
(), 
duøti⁄
 );

190 
	gmtx
->
£t_°©e
–
muãx
::
HELD
 );

191  
	gªs
?
	gåue
:
Ál£
;

	@viper/concurrentqueue-src/benchmarks/tbb/critical_section.cpp

21 
	~"tbb/¸ôiˇl_£˘i⁄.h
"

22 
	~"ôt_nŸify.h
"

24 
«me•a˚
 
	gtbb
 {

25 
«me•a˚
 
	göã∫Æ
 {

27 
	g¸ôiˇl_£˘i⁄_v4
::
öã∫Æ_c⁄°ru˘
() {

28 
ITT_SYNC_CREATE
(&
my_im∂
, 
_T
("ppl::critical_section"), _T(""));

	@viper/concurrentqueue-src/benchmarks/tbb/critical_section.h

21 #i‚de‡
_TBB_CRITICAL_SECTION_H_


22 
	#_TBB_CRITICAL_SECTION_H_


	)

24 #i‡
_WIN32
||
_WIN64


25 
	~"machöe/wödows_≠i.h
"

27 
	~<±hªad.h
>

28 
	~<î∫o.h
>

31 
	~"tbb_°ddef.h
"

32 
	~"tbb_thªad.h
"

33 
	~"tbb_ex˚±i⁄.h
"

35 
	~"tbb_¥ofûög.h
"

37 
«me•a˚
 
	gtbb
 {

39 
«me•a˚
 
	göã∫Æ
 {

40 ˛as†
	c¸ôiˇl_£˘i⁄_v4
 : 
öã∫Æ
::
no_c›y
 {

41 #i‡
_WIN32
||
_WIN64


42 
CRITICAL_SECTION
 
my_im∂
;

44 
±hªad_muãx_t
 
	gmy_im∂
;

46 
	gtbb_thªad
::
id
 
my_tid
;

47 
	gpublic
:

49 
__TBB_EXPORTED_METHOD
 
öã∫Æ_c⁄°ru˘
();

51 
¸ôiˇl_£˘i⁄_v4
() {

52 #i‡
_WIN32
||
_WIN64


53 
InôülizeCrôiˇlSe˘i⁄Ex
–&
my_im∂
, 4000, 0 );

55 
±hªad_muãx_öô
(&
my_im∂
, 
NULL
);

57 
öã∫Æ_c⁄°ru˘
();

60 ~
¸ôiˇl_£˘i⁄_v4
() {

61 
__TBB_ASSERT
(
my_tid
 =
tbb_thªad
::
id
(), "Destroyingá still-held critical section");

62 #i‡
_WIN32
||
_WIN64


63 
DñëeCrôiˇlSe˘i⁄
(&
my_im∂
);

65 
±hªad_muãx_de°roy
(&
my_im∂
);

69 ˛as†
	csc›ed_lock
 : 
öã∫Æ
::
no_c›y
 {

70 
¥iv©e
:

71 
¸ôiˇl_£˘i⁄_v4
 &
my_¸ô
;

72 
	gpublic
:

73 
sc›ed_lock
–
¸ôiˇl_£˘i⁄_v4
& 
lock_me
Ë:
my_¸ô
(lock_me) {

74 
my_¸ô
.
lock
();

77 ~
sc›ed_lock
() {

78 
	gmy_¸ô
.
u∆ock
();

82 
lock
() {

83 
	gtbb_thªad
::
id
 
loˇl_tid
 = 
this_tbb_thªad
::
gë_id
();

84 if(
	gloˇl_tid
 =
my_tid
Ë
throw_ex˚±i⁄
–
eid_im¥›î_lock
 );

85 #i‡
_WIN32
||
_WIN64


86 
E¡îCrôiˇlSe˘i⁄
–&
my_im∂
 );

88 
	grvÆ
 = 
±hªad_muãx_lock
(&
my_im∂
);

89 
__TBB_ASSERT_EX
(!
rvÆ
, "critical_section::lock:Öthread_mutex_lock failed");

91 
__TBB_ASSERT
(
my_tid
 =
tbb_thªad
::
id
(), 
NULL
);

92 
	gmy_tid
 = 
loˇl_tid
;

95 
boﬁ
 
åy_lock
() {

96 
boﬁ
 
	ggŸlock
;

97 
	gtbb_thªad
::
id
 
loˇl_tid
 = 
this_tbb_thªad
::
gë_id
();

98 if(
	gloˇl_tid
 =
my_tid
Ë 
Ál£
;

99 #i‡
_WIN32
||
_WIN64


100 
	ggŸlock
 = 
TryE¡îCrôiˇlSe˘i⁄
–&
my_im∂
 ) != 0;

102 
	grvÆ
 = 
±hªad_muãx_åylock
(&
my_im∂
);

104 
__TBB_ASSERT
(
rvÆ
 =0 ||ÑvÆ =
EBUSY
, "critical_section::trylock:Öthread_mutex_trylock failed");

105 
	ggŸlock
 = 
rvÆ
 == 0;

107 if(
	ggŸlock
) {

108 
	gmy_tid
 = 
loˇl_tid
;

110  
	ggŸlock
;

113 
u∆ock
() {

114 
__TBB_ASSERT
(
this_tbb_thªad
::
gë_id
(Ë=
my_tid
, "thread unlocking critical_section isÇotÅhreadÅhatÜocked it");

115 
	gmy_tid
 = 
tbb_thªad
::
id
();

116 #i‡
_WIN32
||
_WIN64


117 
LóveCrôiˇlSe˘i⁄
–&
my_im∂
 );

119 
	grvÆ
 = 
±hªad_muãx_u∆ock
(&
my_im∂
);

120 
__TBB_ASSERT_EX
(!
rvÆ
, "critical_section::unlock:Öthread_mutex_unlock failed");

124 c⁄° 
boﬁ
 
	gis_rw_muãx
 = 
Ál£
;

125 c⁄° 
boﬁ
 
	gis_ªcursive_muãx
 = 
Ál£
;

126 c⁄° 
boﬁ
 
	gis_Áú_muãx
 = 
åue
;

129 
	göã∫Æ
::
	t¸ôiˇl_£˘i⁄_v4
 
	t¸ôiˇl_£˘i⁄
;

131 
__TBB_DEFINE_PROFILING_SET_NAME
(
¸ôiˇl_£˘i⁄
)

	@viper/concurrentqueue-src/benchmarks/tbb/custom_scheduler.h

21 #i‚de‡
_TBB_cu°om_scheduÀr_H


22 
	#_TBB_cu°om_scheduÀr_H


	)

24 
	~"scheduÀr.h
"

25 
	~"ob£rvî_¥oxy.h
"

26 
	~"ôt_nŸify.h
"

28 
«me•a˚
 
	gtbb
 {

29 
«me•a˚
 
	göã∫Æ
 {

34 #ifde‡
__TBB_STEALING_PAUSE


35 c⁄° 
	gPau£Time
 = 
__TBB_STEALING_PAUSE
;

36 #ñi‡
__TBB_ùf


37 c⁄° 
	gPau£Time
 = 1500;

39 c⁄° 
	gPau£Time
 = 80;

46 
	sDeÁu…ScheduÀrTøôs
 {

47 c⁄° 
boﬁ
 
	gôt_possibÀ
 = 
åue
;

48 c⁄° 
boﬁ
 
	ghas_¶ow_©omic
 = 
Ál£
;

51 
	sI¡ñScheduÀrTøôs
 {

52 c⁄° 
boﬁ
 
	gôt_possibÀ
 = 
Ál£
;

53 #i‡
__TBB_x86_32
||
__TBB_x86_64


54 c⁄° 
boﬁ
 
	ghas_¶ow_©omic
 = 
åue
;

56 c⁄° 
boﬁ
 
	ghas_¶ow_©omic
 = 
Ál£
;

66 
	gãm∂©e
<
ty≥«me
 
	gScheduÀrTøôs
>

67 ˛as†
	ccu°om_scheduÀr
: 
¥iv©e
 
gíîic_scheduÀr
 {

68 
cu°om_scheduÀr
<
	tScheduÀrTøôs
> 
	tscheduÀr_ty≥
;

74 
loˇl_waô_f‹_Æl
–
èsk
& 
∑ª¡
,Åask* 
chûd
 );

80 
waô_f‹_Æl
–
èsk
& 
∑ª¡
,Åask* 
chûd
 ) {

81 
	g°©ic_ˇ°
<
	gcu°om_scheduÀr
*>(
	ggovîn‹
::
loˇl_scheduÀr
())->
scheduÀr_ty≥
::
loˇl_waô_f‹_Æl
–
∑ª¡
, 
chûd
 );

85 
cu°om_scheduÀr
–
¨ía
* 
a
, 
size_t
 
ödex
 ) : 
gíîic_scheduÀr
(a, index) {}

90 
èŒy_com∂ëi⁄_of_¥ede˚ss‹
–
èsk
& 
s
,Åask*& 
by∑ss_¶Ÿ
 ) {

91 
	gèsk_¥efix
& 
	gp
 = 
s
.
¥efix
();

92 if–
	gScheduÀrTøôs
::
ôt_possibÀ
 )

93 
ITT_NOTIFY
(
sync_ªÀasög
, &
p
.
ªf_cou¡
);

94 if–
	gScheduÀrTøôs
::
has_¶ow_©omic
 && 
p
.
ªf_cou¡
==1 )

95 
p
.
ªf_cou¡
=0;

96 if–
__TBB_FëchAndDe¸emítWªÀa£
(&
p
.
ªf_cou¡
) > 1 ) {

102 
__TBB_c⁄åﬁ_c⁄si°ícy_hñ≥r
();

103 
__TBB_ASSERT
(
p
.
ªf_cou¡
==0, "completion ofÅask causedÖredecessor'sÑeference countÅo underflow");

104 if–
	gScheduÀrTøôs
::
ôt_possibÀ
 )

105 
ITT_NOTIFY
(
sync_acquúed
, &
p
.
ªf_cou¡
);

106 #i‡
TBB_USE_ASSERT


107 
	gp
.
	gexåa_°©e
 &~
es_ªf_cou¡_a˘ive
;

110 #i‡
__TBB_RECYCLE_TO_ENQUEUE


111 i‡(
	gp
.
	g°©e
==
èsk
::
to_íqueue
) {

114 
my_¨ía
->
íqueue_èsk
(
s
, 0, 
my_øndom
 );

117 if–
	gby∑ss_¶Ÿ
==
NULL
 )

118 
by∑ss_¶Ÿ
 = &
s
;

120 
loˇl_•awn
–
s
, s.
¥efix
().
√xt
 );

123 
	gpublic
:

124 
gíîic_scheduÀr
* 
Æloˇã_scheduÀr
–
¨ía
* 
a
, 
size_t
 
ödex
 ) {

125 
scheduÀr_ty≥
* 
	gs
 = (scheduÀr_ty≥*)
NFS_AŒoˇã
(1,(scheduÀr_ty≥),
NULL
);

126 
√w
–
s
 ) 
scheduÀr_ty≥
–
a
, 
ödex
 );

127 
	gs
->
as£π_èsk_poﬁ_vÆid
();

128 
ITT_SYNC_CREATE
(
s
, 
SyncTy≥_ScheduÀr
, 
SyncObj_TaskPoﬁSpönög
);

129  
	gs
;

134  
èsk
* 
ª˚ive_‹_°ól_èsk
–
__TBB_©omic
 
ª„ªn˚_cou¡
& 
com∂ëi⁄_ªf_cou¡
, 
boﬁ
 
ªtu∫_if_no_w‹k
 );

141 
	gãm∂©e
<
ty≥«me
 
	gScheduÀrTøôs
>

142 
èsk
* 
	gcu°om_scheduÀr
<
	gScheduÀrTøôs
>::
ª˚ive_‹_°ól_èsk
–
__TBB_©omic
 
ª„ªn˚_cou¡
& 
com∂ëi⁄_ªf_cou¡
,

143 
boﬁ
 
ªtu∫_if_no_w‹k
 ) {

144 
èsk
* 
	gt
 = 
NULL
;

145 
boﬁ
 
	gouãrmo°_di•©ch_Àvñ
 = 
ªtu∫_if_no_w‹k
 || 
ma°î_ouãrmo°_Àvñ
();

146 
boﬁ
 
	gˇn_°ól_hîe
 = 
ˇn_°ól
();

147 
	gmy_öbox
.
£t_is_idÀ
–
åue
 );

148 #i‡
__TBB_HOARD_NONLOCAL_TASKS


149 
__TBB_ASSERT
(!
my_n⁄loˇl_‰ì_li°
, 
NULL
);

151 #i‡
__TBB_TASK_PRIORITY


152 i‡–
	gªtu∫_if_no_w‹k
 && 
	gmy_¨ía
->
	gmy_skù≥d_fifo_¥i‹ôy
 ) {

156 
öçå_t
 
	gskù≥d_¥i‹ôy
 = 
my_¨ía
->
my_skù≥d_fifo_¥i‹ôy
;

157 i‡–
	gmy_¨ía
->
	gmy_skù≥d_fifo_¥i‹ôy
.
com∑ª_™d_sw≠
(0, 
skù≥d_¥i‹ôy
) == skipped_priority &&

158 
skù≥d_¥i‹ôy
 > 
my_¨ía
->
my_t›_¥i‹ôy
 )

160 
my_m¨kë
->
upd©e_¨ía_¥i‹ôy
–*
my_¨ía
, 
skù≥d_¥i‹ôy
 );

163 
èsk_°ªam
 *
	gts
;

165 
èsk_°ªam
 *
	gts
 = &
my_¨ía
->
my_èsk_°ªam
;

169 
size_t
 
	gn
 = 
my_¨ía
->
my_limô
-1;

170 
	gyõld_cou¡
 = 0;

173  
	gÁûuª_cou¡
 = -
°©ic_ˇ°
<>(
ScheduÀrTøôs
::
ôt_possibÀ
);; ++failure_count) {

174 
__TBB_ASSERT
–
my_¨ía
->
my_limô
 > 0, 
NULL
 );

175 
__TBB_ASSERT
–
my_¨ía_ödex
 <
n
, 
NULL
 );

176 if–
	gcom∂ëi⁄_ªf_cou¡
==1 ) {

177 if–
ScheduÀrTøôs
::
ôt_possibÀ
 ) {

178 if–
Áûuª_cou¡
!=-1 ) {

179 
ITT_NOTIFY
(
sync_¥ï¨e
, &
com∂ëi⁄_ªf_cou¡
);

181 
ITT_NOTIFY
(
sync_acquúed
, 
this
);

183 
ITT_NOTIFY
(
sync_acquúed
, &
com∂ëi⁄_ªf_cou¡
);

185 
__TBB_ASSERT
–!
t
, 
NULL
 );

186 
__TBB_c⁄åﬁ_c⁄si°ícy_hñ≥r
();

190 i‡–
	gªtu∫_if_no_w‹k
 && 
	gmy_¨ía
->
	gmy_num_w‹kîs_ÆlŸãd
 < my_¨ía->
num_w‹kîs_a˘ive
() ) {

191 #i‡!
__TBB_TASK_ARENA


192 
__TBB_ASSERT
–
is_w‹kî
(), 
NULL
 );

194 if–
	gScheduÀrTøôs
::
ôt_possibÀ
 && 
Áûuª_cou¡
 != -1 )

195 
ITT_NOTIFY
(
sync_ˇn˚l
, 
this
);

196  
	gNULL
;

198 #i‡
__TBB_TASK_PRIORITY


199 
	gts
 = &
my_¨ía
->
my_èsk_°ªam
[my_¨ía->
my_t›_¥i‹ôy
];

202 
__TBB_ASSERT
(
my_afföôy_id
, 
NULL
);

203 i‡–
	gn
 && !
	gmy_öbox
.
em±y
(Ë&& (
	gt
 = 
gë_maûbox_èsk
()) ) {

204 
GATHER_STATISTIC
–++
my_cou¡îs
.
maûs_ª˚ived
 );

208 i‡–
	gouãrmo°_di•©ch_Àvñ
 && !
	gts
->
em±y
(Ë&& (
	gt
 = 
ts
->
p›
–
my_¨ía_¶Ÿ
->
höt_f‹_p›
)) ) {

209 
ITT_NOTIFY
(
sync_acquúed
, 
ts
);

212 #i‡
__TBB_TASK_PRIORITY


214 i‡–
	gmy_ofÊﬂded_èsks
 && (
	gt
=
ªlﬂd_èsks
()) ) {

218 i‡–
ˇn_°ól_hîe
 && 
n
 ) {

220 
size_t
 
k
 = 
my_øndom
.
gë
(Ë% 
n
;

221 
¨ía_¶Ÿ
* 
	gvi˘im
 = &
my_¨ía
->
my_¶Ÿs
[
k
];

227 if–
	gk
 >
my_¨ía_ödex
 )

228 ++
vi˘im
;

229 
èsk
 **
	gpoﬁ
 = 
vi˘im
->
èsk_poﬁ
;

230 if–
	gpoﬁ
 =
Em±yTaskPoﬁ
 || !(
t
 = 
°ól_èsk
–*
vi˘im
 )) )

231 
Áû
;

232 if–
is_¥oxy
(*
t
) ) {

233 
	gèsk_¥oxy
 &
	gç
 = *(
èsk_¥oxy
*)
t
;

234 
	gt
 = 
ç
.
exåa˘_èsk
<
èsk_¥oxy
::
poﬁ_bô
>();

235 i‡–!
	gt
 ) {

237 
	g‰ì_èsk
<
	gno_ˇche_smÆl_èsk
>(
	gç
);

238 
	gÁû
;

240 
GATHER_STATISTIC
–++
my_cou¡îs
.
¥oxõs_°ﬁí
 );

242 
	gt
->
¥efix
().
	gexåa_°©e
 |
es_èsk_is_°ﬁí
;

243 if–
is_vîsi⁄_3_èsk
(*
t
) ) {

244 
	gmy_ö√rmo°_ru¬ög_èsk
 = 
t
;

245 
	gt
->
¥efix
().
	gow√r
 = 
this
;

246 
	gt
->
nŸe_afföôy
–
my_afföôy_id
 );

248 
GATHER_STATISTIC
–++
my_cou¡îs
.
°óls_commôãd
 );

251 
	gÁû
;

253 
__TBB_ASSERT
(
t
,
NULL
);

254 #i‡
__TBB_SCHEDULER_OBSERVER


255 
	gmy_¨ía
->
	gmy_ob£rvîs
.
nŸify_íåy_ob£rvîs
–
my_œ°_loˇl_ob£rvî
, 
is_w‹kî
() );

256 
	gthe_globÆ_ob£rvî_li°
.
nŸify_íåy_ob£rvîs
–
my_œ°_globÆ_ob£rvî
, 
is_w‹kî
() );

258 i‡–
	gScheduÀrTøôs
::
ôt_possibÀ
 && 
Áûuª_cou¡
 != -1 ) {

261 
ITT_NOTIFY
(
sync_acquúed
, 
this
);

264 
	gÁû
:

265 
GATHER_STATISTIC
–++
my_cou¡îs
.
°óls_Áûed
 );

266 if–
	gScheduÀrTøôs
::
ôt_possibÀ
 && 
Áûuª_cou¡
==-1 ) {

271 
ITT_NOTIFY
(
sync_¥ï¨e
, 
this
);

272 
	gÁûuª_cou¡
 = 0;

275 
__TBB_Pau£
(
Pau£Time
);

276 c⁄° 
	gÁûuª_thªshﬁd
 = 2*(
n
+1);

277 if–
	gÁûuª_cou¡
>=
Áûuª_thªshﬁd
 ) {

278 #i‡
__TBB_YIELD2P


279 
Áûuª_cou¡
 = 0;

281 
	gÁûuª_cou¡
 = 
Áûuª_thªshﬁd
;

283 
__TBB_Yõld
();

284 #i‡
__TBB_TASK_PRIORITY


286 i‡–
	gmy_¨ía
->
	gmy_‹ph™ed_èsks
 ) {

288 ++
	gmy_¨ía
->
	gmy_ab™d⁄mít_ïoch
;

289 
èsk
* 
	g‹ph™s
 = (èsk*)
__TBB_FëchAndSt‹eW
–&
my_¨ía
->
my_‹ph™ed_èsks
, 0 );

290 i‡–
	g‹ph™s
 ) {

291 
èsk
** 
	glök
 = 
NULL
;

293 
	gmy_loˇl_ªlﬂd_ïoch
--;

294 
	gt
 = 
ªlﬂd_èsks
–
‹ph™s
, 
lök
, 
ef„˘ive_ª„ªn˚_¥i‹ôy
() );

295 i‡–
	g‹ph™s
 ) {

296 *
	glök
 = 
my_ofÊﬂded_èsks
;

297 i‡–!
	gmy_ofÊﬂded_èsks
 )

298 
	gmy_ofÊﬂded_èsk_li°_èû_lök
 = 
lök
;

299 
	gmy_ofÊﬂded_èsks
 = 
‹ph™s
;

301 
__TBB_ASSERT
–!
my_ofÊﬂded_èsks
 =!
my_ofÊﬂded_èsk_li°_èû_lök
, 
NULL
 );

302 i‡–
	gt
 ) {

303 if–
	gScheduÀrTøôs
::
ôt_possibÀ
 )

304 
ITT_NOTIFY
(
sync_ˇn˚l
, 
this
);

310 c⁄° 
	gyõld_thªshﬁd
 = 100;

311 if–
	gyõld_cou¡
++ >
yõld_thªshﬁd
 ) {

314 #i‡
__TBB_TASK_PRIORITY


315 if–
ªtu∫_if_no_w‹k
 || 
my_¨ía
->
my_t›_¥i‹ôy
 > my_¨ía->
my_bŸtom_¥i‹ôy
 ) {

316 i‡–
my_¨ía
->
is_out_of_w‹k
(Ë&& 
ªtu∫_if_no_w‹k
 ) {

318 i‡–
ªtu∫_if_no_w‹k
 && 
my_¨ía
->
is_out_of_w‹k
() ) {

320 if–
ScheduÀrTøôs
::
ôt_possibÀ
 )

321 
ITT_NOTIFY
(
sync_ˇn˚l
, 
this
);

322  
	gNULL
;

324 #i‡
__TBB_TASK_PRIORITY


326 i‡–
	gmy_ofÊﬂded_èsks
 ) {

329 
	gmy_loˇl_ªlﬂd_ïoch
--;

334 i‡–!
	gªtu∫_if_no_w‹k
 && *
	gmy_ªf_t›_¥i‹ôy
 > 
	gmy_¨ía
->
	gmy_t›_¥i‹ôy
 ) {

335 
GATHER_STATISTIC
–++
my_cou¡îs
.
¥io_ªf_fixups
 );

336 
	gmy_ªf_t›_¥i‹ôy
 = &
my_¨ía
->
my_t›_¥i‹ôy
;

338 
__TBB_ASSERT
(!
w‹kî_ouãrmo°_Àvñ
(), 
NULL
);

339 
__TBB_ASSERT
(
my_ªf_ªlﬂd_ïoch
 =&
my_¨ía
->
my_ªlﬂd_ïoch
, 
NULL
);

345 
	gn
 = 
my_¨ía
->
my_limô
-1;

348 
	gmy_öbox
.
£t_is_idÀ
–
Ál£
 );

349  
	gt
;

352 
	gãm∂©e
<
ty≥«me
 
	gScheduÀrTøôs
>

353 
	gcu°om_scheduÀr
<
	gScheduÀrTøôs
>::
loˇl_waô_f‹_Æl
–
èsk
& 
∑ª¡
,Åask* 
chûd
 ) {

354 
__TBB_ASSERT
–
govîn‹
::
is_£t
(
this
), 
NULL
 );

355 
__TBB_ASSERT
–
∑ª¡
.
ªf_cou¡
(Ë>(
chûd
 && child->parent() == &parent ? 2 : 1), "ref_count isÅoo small" );

356 
as£π_èsk_poﬁ_vÆid
();

359 if–
	gScheduÀrTøôs
::
ôt_possibÀ
 )

360 
ITT_SYNC_CREATE
(&
∑ª¡
.
¥efix
().
ªf_cou¡
, 
SyncTy≥_ScheduÀr
, 
SyncObj_TaskSãÆögLo›
);

361 #i‡
__TBB_TASK_GROUP_CONTEXT


362 
__TBB_ASSERT
–
∑ª¡
.
¥efix
().
c⁄ãxt
 || (
is_w‹kî
(Ë&& &∑ª¡ =
my_dummy_èsk
), "parentÅask doesÇot have context" );

364 
èsk
* 
	gt
 = 
chûd
;

368 c⁄° 
ª„ªn˚_cou¡


370 
	g∑ª¡s_w‹k_d⁄e
 = 1,

372 
	gÆl_loˇl_w‹k_d⁄e
 = (
ª„ªn˚_cou¡
)3 << ((reference_count) * 8 - 2);

373 
ª„ªn˚_cou¡
 
	gquô_poöt
;

374 #i‡
__TBB_TASK_PRIORITY


375 
__TBB_ASSERT
–(
uöçå_t
)*
my_ªf_t›_¥i‹ôy
 < (uöçå_t)
num_¥i‹ôy_Àvñs
, 
NULL
 );

376 vﬁ©ûê
öçå_t
 *
	gﬁd_ªf_t›_¥i‹ôy
 = 
my_ªf_t›_¥i‹ôy
;

379 vﬁ©ûê
uöçå_t
 *
	gﬁd_ªf_ªlﬂd_ïoch
 = 
my_ªf_ªlﬂd_ïoch
;

381 
èsk
* 
	gﬁd_di•©chög_èsk
 = 
my_di•©chög_èsk
;

382 
	gmy_di•©chög_èsk
 = 
my_ö√rmo°_ru¬ög_èsk
;

383 if–
ma°î_ouãrmo°_Àvñ
() ) {

385 
__TBB_ASSERT
–!
is_w‹kî
(Ë|| 
my_di•©chög_èsk
 !
ﬁd_di•©chög_èsk
, 
NULL
 );

386 
	gquô_poöt
 = &
∑ª¡
 =
my_dummy_èsk
 ? 
Æl_loˇl_w‹k_d⁄e
 : 
∑ª¡s_w‹k_d⁄e
;

388 
	gquô_poöt
 = 
∑ª¡s_w‹k_d⁄e
;

389 #i‡
__TBB_TASK_PRIORITY


390 i‡–&
	g∑ª¡
 !
my_dummy_èsk
 ) {

394 
my_ªf_t›_¥i‹ôy
 = &
∑ª¡
.
¥efix
().
c⁄ãxt
->
my_¥i‹ôy
;

395 
	gmy_ªf_ªlﬂd_ïoch
 = &
my_¨ía
->
my_ªlﬂd_ïoch
;

396 if(
	gmy_ªf_ªlﬂd_ïoch
 !
ﬁd_ªf_ªlﬂd_ïoch
)

397 
my_loˇl_ªlﬂd_ïoch
 = *
my_ªf_ªlﬂd_ïoch
-1;

402 
˝u_˘l_ív_hñ≥r
 
	g˝u_˘l_hñ≥r
;

403 i‡–
	gt
 )

404 
	g˝u_˘l_hñ≥r
.
£t_ív
–
__TBB_CONTEXT_ARG1
(
t
->
¥efix
().
c⁄ãxt
) );

406 #i‡
TBB_USE_EXCEPTIONS


409 
	gåy
 {

419 
	gt
) {

420 
__TBB_ASSERT
–
my_öbox
.
is_idÀ_°©e
(
Ál£
), 
NULL
 );

421 
__TBB_ASSERT
(!
is_¥oxy
(*
t
),"unexpectedÖroxy");

422 
__TBB_ASSERT
–
t
->
¥efix
().
ow√r
, 
NULL
 );

423 
as£π_èsk_vÆid
(*
t
);

424 #i‡
__TBB_TASK_GROUP_CONTEXT
 && 
TBB_USE_ASSERT


425 
as£π_c⁄ãxt_vÆid
(
t
->
¥efix
().
c⁄ãxt
);

426 i‡–!
	gt
->
¥efix
().
	gc⁄ãxt
->
	gmy_ˇn˚Œ©i⁄_ªque°ed
 )

428 
__TBB_ASSERT
–1L<<
t
->
°©e
(Ë& (1L<<
èsk
::
Æloˇãd
|1L<<èsk::
ªady
|1L<<èsk::
ªexecuã
), 
NULL
 );

429 
as£π_èsk_poﬁ_vÆid
();

430 #i‡
__TBB_TASK_PRIORITY


431 
öçå_t
 
	gp
 = 
¥i‹ôy
(*
t
);

432 i‡–
	gp
 !*
my_ªf_t›_¥i‹ôy
 && (
t
->
¥efix
().
exåa_°©e
 & 
es_èsk_íqueued
) == 0) {

433 
as£π_¥i‹ôy_vÆid
(
p
);

434 i‡–
	gp
 !
my_¨ía
->
my_t›_¥i‹ôy
 ) {

435 
my_m¨kë
->
upd©e_¨ía_¥i‹ôy
–*
my_¨ía
, 
p
 );

437 i‡–
	gp
 < 
ef„˘ive_ª„ªn˚_¥i‹ôy
() ) {

438 i‡–!
	gmy_ofÊﬂded_èsks
 ) {

439 
	gmy_ofÊﬂded_èsk_li°_èû_lök
 = &
t
->
¥efix
().
√xt_ofÊﬂded
;

441 *
	gmy_ofÊﬂded_èsk_li°_èû_lök
 = 
NULL
;

443 
ofÊﬂd_èsk
–*
t
, 
p
 );

444 i‡–
ö_¨ía
() ) {

445 
	gt
 = 
wönow_èsk_poﬁ
();

446 i‡–
	gt
 )

452 
	gmy_¨ía
->
	gadvîti£_√w_w‹k
<
	gÁl£
>();

454 
	g°ólög_ground
;

458 
èsk
* 
	gt_√xt
 = 
NULL
;

459 
	gmy_ö√rmo°_ru¬ög_èsk
 = 
t
;

460 
	gt
->
¥efix
().
	gow√r
 = 
this
;

461 
	gt
->
¥efix
().
	g°©e
 = 
èsk
::
executög
;

462 #i‡
__TBB_TASK_GROUP_CONTEXT


463 i‡–!
	gt
->
¥efix
().
	gc⁄ãxt
->
	gmy_ˇn˚Œ©i⁄_ªque°ed
 )

466 
GATHER_STATISTIC
–++
my_cou¡îs
.
èsks_execuãd
 );

467 
GATHER_STATISTIC
–
my_cou¡îs
.
avg_¨ía_c⁄cuºícy
 +
my_¨ía
->
num_w‹kîs_a˘ive
() );

468 
GATHER_STATISTIC
–
my_cou¡îs
.
avg_assig√d_w‹kîs
 +
my_¨ía
->
my_num_w‹kîs_ÆlŸãd
 );

469 #i‡
__TBB_TASK_PRIORITY


470 
GATHER_STATISTIC
–
my_cou¡îs
.
avg_¨ía_¥io
 +
p
 );

471 
GATHER_STATISTIC
–
my_cou¡îs
.
avg_m¨kë_¥io
 +
my_m¨kë
->
my_globÆ_t›_¥i‹ôy
 );

473 
ITT_STACK
(
ScheduÀrTøôs
::
ôt_possibÀ
, 
ˇŒì_íãr
, 
t
->
¥efix
().
c⁄ãxt
->
ôt_ˇŒî
);

474 
	gt_√xt
 = 
t
->
execuã
();

475 
ITT_STACK
(
ScheduÀrTøôs
::
ôt_possibÀ
, 
ˇŒì_Àave
, 
t
->
¥efix
().
c⁄ãxt
->
ôt_ˇŒî
);

476 i‡(
	gt_√xt
) {

477 
__TBB_ASSERT
–
t_√xt
->
°©e
()==
èsk
::
Æloˇãd
,

479 
ª£t_exåa_°©e
(
t_√xt
);

480 #i‡
TBB_USE_ASSERT


481 
afföôy_id
 
	g√xt_afföôy
=
t_√xt
->
¥efix
().
afföôy
;

482 i‡(
	g√xt_afföôy
 !0 && 
√xt_afföôy
 !
my_afföôy_id
)

483 
GATHER_STATISTIC
–++
my_cou¡îs
.
afföôy_ign‹ed
 );

487 
as£π_èsk_poﬁ_vÆid
();

488  
	gt
->
°©e
() ) {

489 
	gèsk
::
executög
: {

490 
èsk
* 
s
 = 
t
->
∑ª¡
();

491 
__TBB_ASSERT
–
my_ö√rmo°_ru¬ög_èsk
==
t
, 
NULL
 );

492 
__TBB_ASSERT
–
t
->
¥efix
().
ªf_cou¡
==0, "Task still has childrenáfter it has beenÉxecuted" );

493 
	gt
->~
èsk
();

494 if–
	gs
 )

495 
èŒy_com∂ëi⁄_of_¥ede˚ss‹
(*
s
, 
t_√xt
);

496 
	g‰ì_èsk
<
	gno_höt
>–*
	gt
 );

497 
as£π_èsk_poﬁ_vÆid
();

501 
	gèsk
::
ªcy˛e
:

502 
t
->
¥efix
().
°©e
 = 
èsk
::
Æloˇãd
;

503 #i‡
__TBB_RECYCLE_TO_ENQUEUE


504 
	gèsk
::
to_íqueue
:

506 
__TBB_ASSERT
–
t_√xt
 !
t
, "aÅaskÑeturned from methodÉxecute() canÇot beÑecycled inánother way" );

507 
ª£t_exåa_°©e
(
t
);

509 
èŒy_com∂ëi⁄_of_¥ede˚ss‹
(*
t
, 
t_√xt
);

510 
as£π_èsk_poﬁ_vÆid
();

513 
	gèsk
::
ªexecuã
:

514 
__TBB_ASSERT
–
t_√xt
, "reexecutionÑequiresÅhat methodÉxecute()ÑeturnánotherÅask" );

515 
__TBB_ASSERT
–
t_√xt
 !
t
, "aÅaskÑeturned from methodÉxecute() canÇot beÑecycled inánother way" );

516 
	gt
->
¥efix
().
	g°©e
 = 
èsk
::
Æloˇãd
;

517 
ª£t_exåa_°©e
(
t
);

518 
loˇl_•awn
–*
t
,Å->
¥efix
().
√xt
 );

519 
as£π_èsk_poﬁ_vÆid
();

521 
	gèsk
::
Æloˇãd
:

522 
ª£t_exåa_°©e
(
t
);

524 #i‡
TBB_USE_ASSERT


525 
	gèsk
::
ªady
:

526 
__TBB_ASSERT
–
Ál£
, "task is in READY state uponÑeturn from methodÉxecute()" );

529 
__TBB_ASSERT
–
Ál£
, "illegal state" );

535 
GATHER_STATISTIC
–
t_√xt
 ? ++
my_cou¡îs
.
•awns_by∑s£d
 : 0 );

536 
	gt
 = 
t_√xt
;

539 
as£π_èsk_poﬁ_vÆid
();

540 i‡–
	g∑ª¡
.
¥efix
().
	gªf_cou¡
 =
quô_poöt
 ) {

541 
__TBB_ASSERT
–
quô_poöt
 !
Æl_loˇl_w‹k_d⁄e
, 
NULL
 );

542 
__TBB_c⁄åﬁ_c⁄si°ícy_hñ≥r
();

543 
ITT_NOTIFY
(
sync_acquúed
, &
∑ª¡
.
¥efix
().
ªf_cou¡
);

544 
	gd⁄e
;

546 i‡–
ö_¨ía
() ) {

547 
	gt
 = 
gë_èsk
();

550 
__TBB_ASSERT
–
is_quõs˚¡_loˇl_èsk_poﬁ_ª£t
(), 
NULL
 );

553 
__TBB_ASSERT
(!
t
 || !
is_¥oxy
(*t),"unexpectedÖroxy");

554 
as£π_èsk_poﬁ_vÆid
();

556 i‡–!
	gt
 ) ;

558 
	g˝u_˘l_hñ≥r
.
£t_ív
–
__TBB_CONTEXT_ARG1
(
t
->
¥efix
().
c⁄ãxt
) );

561 #i‡
__TBB_TASK_PRIORITY


562 
	g°ólög_ground
:

564 #i‡
__TBB_HOARD_NONLOCAL_TASKS


566 ; 
	gmy_n⁄loˇl_‰ì_li°
; my_n⁄loˇl_‰ì_li° = 
t
 ) {

567 
t
 = 
my_n⁄loˇl_‰ì_li°
->
¥efix
().
√xt
;

568 
‰ì_n⁄loˇl_smÆl_èsk
–*
my_n⁄loˇl_‰ì_li°
 );

571 i‡–
	gquô_poöt
 =
Æl_loˇl_w‹k_d⁄e
 ) {

572 
__TBB_ASSERT
–!
ö_¨ía
(Ë&& 
is_quõs˚¡_loˇl_èsk_poﬁ_ª£t
(), 
NULL
 );

573 
__TBB_ASSERT
–!
w‹kî_ouãrmo°_Àvñ
(), 
NULL
 );

574 
	gmy_ö√rmo°_ru¬ög_èsk
 = 
my_di•©chög_èsk
;

575 
	gmy_di•©chög_èsk
 = 
ﬁd_di•©chög_èsk
;

576 #i‡
__TBB_TASK_PRIORITY


577 
	gmy_ªf_t›_¥i‹ôy
 = 
ﬁd_ªf_t›_¥i‹ôy
;

578 if(
	gmy_ªf_ªlﬂd_ïoch
 !
ﬁd_ªf_ªlﬂd_ïoch
)

579 
my_loˇl_ªlﬂd_ïoch
 = *
ﬁd_ªf_ªlﬂd_ïoch
-1;

580 
	gmy_ªf_ªlﬂd_ïoch
 = 
ﬁd_ªf_ªlﬂd_ïoch
;

592 
	gt
 = 
ª˚ive_‹_°ól_èsk
–
∑ª¡
.
¥efix
().
ªf_cou¡
, 
w‹kî_ouãrmo°_Àvñ
() );

593 i‡–!
	gt
 )

594 
	gd⁄e
;

595 
__TBB_ASSERT
(!
is_¥oxy
(*
t
),"unexpectedÖroxy");

600 
	g˝u_˘l_hñ≥r
.
£t_ív
–
__TBB_CONTEXT_ARG1
(
t
->
¥efix
().
c⁄ãxt
) );

602 #i‡
TBB_USE_EXCEPTIONS


603 
__TBB_ASSERT
–
Ál£
, "MustÇever get here" );

605 
TbbC©chAŒ
–
t
->
¥efix
().
c⁄ãxt
 );

607 if–
	gt
->
°©e
(Ë=
èsk
::
ªcy˛e


608 #i‡
__TBB_RECYCLE_TO_ENQUEUE


610 || 
t
->
°©e
(Ë=
èsk
::
to_íqueue


614 
t
->
¥efix
().
°©e
 = 
èsk
::
Æloˇãd
;

615 if–
	gScheduÀrTøôs
::
ôt_possibÀ
 )

616 
ITT_NOTIFY
(
sync_ªÀasög
, &
t
->
¥efix
().
ªf_cou¡
);

617 if–
__TBB_FëchAndDe¸emítWªÀa£
(&
t
->
¥efix
().
ªf_cou¡
)==1 ) {

618 if–
ScheduÀrTøôs
::
ôt_possibÀ
 )

619 
ITT_NOTIFY
(
sync_acquúed
, &
t
->
¥efix
().
ªf_cou¡
);

621 
	gt
 = 
NULL
;

625 
__TBB_ASSERT
–
Ál£
, "MustÇever get hereÅoo" );

627 
	gd⁄e
:

628 
my_ö√rmo°_ru¬ög_èsk
 = 
my_di•©chög_èsk
;

629 
	gmy_di•©chög_èsk
 = 
ﬁd_di•©chög_èsk
;

630 #i‡
__TBB_TASK_PRIORITY


631 
	gmy_ªf_t›_¥i‹ôy
 = 
ﬁd_ªf_t›_¥i‹ôy
;

632 if(
	gmy_ªf_ªlﬂd_ïoch
 !
ﬁd_ªf_ªlﬂd_ïoch
)

633 
my_loˇl_ªlﬂd_ïoch
 = *
ﬁd_ªf_ªlﬂd_ïoch
-1;

634 
	gmy_ªf_ªlﬂd_ïoch
 = 
ﬁd_ªf_ªlﬂd_ïoch
;

636 i‡–!
C⁄cuºítWaôsE«bÀd
(
∑ª¡
) ) {

637 i‡–
	g∑ª¡
.
¥efix
().
	gªf_cou¡
 !
∑ª¡s_w‹k_d⁄e
 ) {

639 #i‡
__TBB_TASK_ARENA


640 
__TBB_ASSERT
–
w‹kî_ouãrmo°_Àvñ
(),

643 
__TBB_ASSERT
–
is_w‹kî
(Ë&& 
w‹kî_ouãrmo°_Àvñ
(),

648 
	g∑ª¡
.
¥efix
().
	gªf_cou¡
 = 0;

650 #i‡
TBB_USE_ASSERT


651 
	g∑ª¡
.
¥efix
().
	gexåa_°©e
 &~
es_ªf_cou¡_a˘ive
;

653 #i‡
__TBB_TASK_GROUP_CONTEXT


654 
__TBB_ASSERT
(
∑ª¡
.
¥efix
().
c⁄ãxt
 && 
deÁu…_c⁄ãxt
(), 
NULL
);

655 
èsk_group_c⁄ãxt
* 
	g∑ª¡_˘x
 = 
∑ª¡
.
¥efix
().
c⁄ãxt
;

656 i‡–
	g∑ª¡_˘x
->
	gmy_ˇn˚Œ©i⁄_ªque°ed
 ) {

657 
	gèsk_group_c⁄ãxt
::
ex˚±i⁄_c⁄èöî_ty≥
 *
≥
 = 
∑ª¡_˘x
->
my_ex˚±i⁄
;

658 i‡–
ma°î_ouãrmo°_Àvñ
(Ë&& 
	g∑ª¡_˘x
 =
deÁu…_c⁄ãxt
() ) {

661 
∑ª¡_˘x
->
my_ˇn˚Œ©i⁄_ªque°ed
 = 0;

663 
	g∑ª¡_˘x
->
	gmy_°©e
 &~(
uöçå_t
)
èsk_group_c⁄ãxt
::
may_have_chûdªn
;

665 i‡–
	g≥
 ) {

669 
	g˝u_˘l_hñ≥r
.
ª°‹e_deÁu…
();

670 
	g≥
->
throw_£lf
();

673 
__TBB_ASSERT
(!
is_w‹kî
(Ë|| !
C™˚Œ©i⁄InfoPª£¡
(*
my_dummy_èsk
),

675 
__TBB_ASSERT
(!
ma°î_ouãrmo°_Àvñ
(Ë|| !
C™˚Œ©i⁄InfoPª£¡
(*
my_dummy_èsk
),

678 
as£π_èsk_poﬁ_vÆid
();

	@viper/concurrentqueue-src/benchmarks/tbb/dynamic_link.cpp

21 
	~"dy«mic_lök.h
"

22 
	~"tbb/tbb_c⁄fig.h
"

30 
	~<c°d¨g
>

31 #i‡
_WIN32


32 
	~<mÆloc.h
>

35 
	#dl›í
–
«me
, 
Êags
 ) 
	`LﬂdLibøryA
–«mê)

	)

36 
	#dlsym
–
h™dÀ
, 
«me
 ) 
	`GëProcAddªss
–h™dÀ,Çamê)

	)

37 
	#dl˛o£
–
h™dÀ
 ) ( ! 
	`FªeLibøry
–h™dÀ ) )

	)

38 
	#dÀº‹
(Ë
	`GëLa°Eº‹
()

	)

39 #i‚de‡
PATH_MAX


40 
	#PATH_MAX
 
MAX_PATH


	)

43 
	~<dlf˙.h
>

44 
	~<°rög.h
>

45 
	~<uni°d.h
>

46 
	~<limôs.h
>

47 
	~<°dlib.h
>

50 #i‡
__TBB_WEAK_SYMBOLS_PRESENT


52 #¥agm®
wók
 
dl›í


53 #¥agm®
wók
 
dlsym


54 #¥agm®
wók
 
dl˛o£


55 #¥agm®
wók
 
dÀº‹


56 #¥agm®
wók
 
dœddr


59 
	~"tbb/tbb_misc.h
"

61 
	#__USE_TBB_ATOMICS
 ( !(
__löux__
&&
__ü64__
Ë|| 
__TBB_BUILD
 )

	)

62 
	#__USE_STATIC_DL_INIT
 (!
__ANDROID__
)

	)

64 #i‡!
__USE_TBB_ATOMICS


65 
	~<±hªad.h
>

110 
	gOPEN_INTERNAL_NAMESPACE


112 #i‡
__TBB_WEAK_SYMBOLS_PRESENT
 || 
__TBB_DYNAMIC_LOAD_ENABLED


114 #i‡!
deföed
(
DYNAMIC_LINK_WARNING
Ë&& !
__TBB_WIN8UI_SUPPORT


116 
	#DYNAMIC_LINK_WARNING
 
dy«mic_lök_w¨nög


	)

117 
	$dy«mic_lök_w¨nög
–
dy«mic_lök_îr‹_t
 
code
, ... ) {

118 (Ë
code
;

119 
	}
}

121 
boﬁ
 
	$ªsﬁve_symbﬁs
–
dy«mic_lök_h™dÀ
 
moduÀ
, c⁄° 
dy«mic_lök_des¸ùt‹
 
des¸ùt‹s
[], 
size_t
 
ªquúed
 )

123 
	`LIBRARY_ASSERT
–
moduÀ
 !
NULL
, "Module handle is NULL" );

124 i‡–
moduÀ
 =
NULL
 )

125  
Ál£
;

127 #i‡
__TBB_WEAK_SYMBOLS_PRESENT


128 i‡–!
dlsym
 )  
Ál£
;

131 c⁄° 
size_t
 
n_desc
=20;

132 
	`LIBRARY_ASSERT
–
ªquúed
 <
n_desc
, "Too many descriptors isÑequired" );

133 i‡–
ªquúed
 > 
n_desc
 )  
Ál£
;

134 
poöãr_to_h™dÀr
 
h
[
n_desc
];

136  
size_t
 
k
 = 0; k < 
ªquúed
; ++k ) {

137 
dy«mic_lök_des¸ùt‹
 c⁄° & 
desc
 = 
des¸ùt‹s
[
k
];

138 
poöãr_to_h™dÀr
 
addr
 = (poöãr_to_h™dÀr)
	`dlsym
–
moduÀ
, 
desc
.
«me
 );

139 i‡–!
addr
 ) {

140  
Ál£
;

142 
h
[
k
] = 
addr
;

147  
size_t
 
k
 = 0; k < 
ªquúed
; ++k )

148 *
des¸ùt‹s
[
k
].
h™dÀr
 = 
h
[k];

149  
åue
;

150 
	}
}

152 #i‡
__TBB_WIN8UI_SUPPORT


153 
boﬁ
 
	$dy«mic_lök
–c⁄° * 
libøry
, c⁄° 
dy«mic_lök_des¸ùt‹
 
des¸ùt‹s
[], 
size_t
 
ªquúed
, 
dy«mic_lök_h™dÀ
*, 
Êags
 ) {

154 
dy«mic_lök_h™dÀ
 
tmp_h™dÀ
 = 
NULL
;

155 
TCHAR
 
wlibøry
[256];

156 i‡–
	`Mu…iByãToWideCh¨
(
CP_UTF8
, 0, 
libøry
, -1, 
wlibøry
, 255Ë=0 )  
Ál£
;

157 i‡–
Êags
 & 
DYNAMIC_LINK_LOAD
 )

158 
tmp_h™dÀ
 = 
	`LﬂdPackagedLibøry
–
wlibøry
, 0 );

159 i‡(
tmp_h™dÀ
 !
NULL
){

160  
	`ªsﬁve_symbﬁs
(
tmp_h™dÀ
, 
des¸ùt‹s
, 
ªquúed
);

162  
Ál£
;

164 
	}
}

165 
	$dy«mic_u∆ök
–
dy«mic_lök_h™dÀ
 ) {

166 
	}
}

167 
	$dy«mic_u∆ök_Æl
() {

168 
	}
}

192 
	#MAX_LOADED_MODULES
 8

193 

	)

194 
	sh™dÀ_°‹age
 {

195 #i‡
__USE_TBB_ATOMICS


196 ::
tbb
::
©omic
<
size_t
> 
my_size
;

198 
size_t
 
	mmy_size
;

199 
±hªad_•ölock_t
 
	mmy_lock
;

201 
dy«mic_lök_h™dÀ
 
	mmy_h™dÀs
[
MAX_LOADED_MODULES
];

203 
add_h™dÀ
(c⁄° 
dy«mic_lök_h™dÀ
 &
h™dÀ
) {

204 #i‡!
__USE_TBB_ATOMICS


205 
	mªs
 = 
±hªad_•ö_lock
–&
my_lock
 );

206 
LIBRARY_ASSERT
–
ªs
==0, "pthread_spin_lock failed" );

208 c⁄° 
size_t
 
	möd
 = 
my_size
++;

209 #i‡!
__USE_TBB_ATOMICS


210 
	mªs
 = 
±hªad_•ö_u∆ock
–&
my_lock
 );

211 
LIBRARY_ASSERT
–
ªs
==0, "pthread_spin_unlock failed" );

213 
LIBRARY_ASSERT
–
öd
 < 
MAX_LOADED_MODULES
, "Too many modulesáreÜoaded" );

214 
	mmy_h™dÀs
[
öd
] = 
h™dÀ
;

217 
‰ì_h™dÀs
() {

218 c⁄° 
size_t
 
	msize
 = 
my_size
;

219 
size_t
 
	mi
=0; i<
	msize
; ++i)

220 
dy«mic_u∆ök
–
my_h™dÀs
[
i
] );

224 
h™dÀ_°‹age
 
	gh™dÀs
;

226 #i‡
__USE_TBB_ATOMICS


227 
©omic_⁄˚
 ( (*
func
Ë(), 
tbb
::
©omic
<Åbb::
öã∫Æ
::
do_⁄˚_°©e
 > &
⁄˚_°©e
 ) {

228 
tbb
::
öã∫Æ
::
	`©omic_do_⁄˚
–
func
, 
⁄˚_°©e
 );

229 
	}
}

230 
	#ATOMIC_ONCE_DECL
–
v¨
 ) 
tbb
::
©omic
<Åbb::
öã∫Æ
::
do_⁄˚_°©e
 > 
	)
var

232 
	$©omic_⁄˚
 ( (*
func
Ë(), 
±hªad_⁄˚_t
 &
⁄˚_°©e
 ) {

233 
	`±hªad_⁄˚
–&
⁄˚_°©e
, 
func
 );

234 
	}
}

235 
	#ATOMIC_ONCE_DECL
–
v¨
 ) 
±hªad_⁄˚_t
 v¨ = 
PTHREAD_ONCE_INIT


	)

238 
ATOMIC_ONCE_DECL
–
öô_dl_d©a_°©e
 );

240 
	s_≠_d©a
 {

241 
	m_∑th
[
PATH_MAX
+1];

242 
size_t
 
	m_Àn
;

243 } 
	g≠_d©a
;

245 
	$öô_≠_d©a
() {

246 #i‡
_WIN32


248 
HMODULE
 
h™dÀ
;

249 
BOOL
 
brc
 = 
	`GëModuÀH™dÀExA
(

250 
GET_MODULE_HANDLE_EX_FLAG_FROM_ADDRESS
 | 
GET_MODULE_HANDLE_EX_FLAG_UNCHANGED_REFCOUNT
,

251 (
LPSTR
)–& 
dy«mic_lök
 ),

252 & 
h™dÀ


254 i‡–!
brc
 ) {

255 
îr
 = 
	`GëLa°Eº‹
();

256 
	`DYNAMIC_LINK_WARNING
–
dl_sys_Áû
, "GëModuÀH™dÀEx", 
îr
 );

260 
DWORD
 
drc
 = 
	`GëModuÀFûeNameA
–
h™dÀ
, 
≠_d©a
.
_∑th
, 
°©ic_ˇ°
< DWORD >–
PATH_MAX
 ) );

261 i‡–
drc
 == 0 ) {

262 
îr
 = 
	`GëLa°Eº‹
();

263 
	`DYNAMIC_LINK_WARNING
–
dl_sys_Áû
, "GëModuÀFûeName", 
îr
 );

266 i‡–
drc
 >
PATH_MAX
 ) {

267 
	`DYNAMIC_LINK_WARNING
–
dl_buff_too_smÆl
 );

271 *
back¶ash
 = 
	`°ºchr
–
≠_d©a
.
_∑th
, '\\' );

273 i‡–!
back¶ash
 ) {

274 
	`LIBRARY_ASSERT
–
back¶ash
!=
NULL
, "Unbelievable.");

277 
	`LIBRARY_ASSERT
–
back¶ash
 >
≠_d©a
.
_∑th
, "Unbelievable.");

278 
≠_d©a
.
_Àn
 = (
size_t
)(
back¶ash
 -áp_d©a.
_∑th
) + 1;

279 *(
back¶ash
+1) = 0;

282 #i‡
__TBB_WEAK_SYMBOLS_PRESENT


283 i‡–!
dœddr
 || !
dÀº‹
 ) ;

285 
Dl_öfo
 
dlöfo
;

286 
ªs
 = 
	`dœddr
–(*)&
dy«mic_lök
, &
dlöfo
 );

287 i‡–!
ªs
 ) {

288 c⁄° * 
îr
 = 
	`dÀº‹
();

289 
	`DYNAMIC_LINK_WARNING
–
dl_sys_Áû
, "dœddr", 
îr
 );

292 
	`LIBRARY_ASSERT
–
dlöfo
.
dli_‚ame
!=
NULL
, "Unbelievable." );

295 c⁄° *
¶ash
 = 
	`°ºchr
–
dlöfo
.
dli_‚ame
, '/' );

296 
size_t
 
‚ame_Àn
=0;

297 i‡–
¶ash
 ) {

298 
	`LIBRARY_ASSERT
–
¶ash
 >
dlöfo
.
dli_‚ame
, "Unbelievable.");

299 
‚ame_Àn
 = (
size_t
)(
¶ash
 - 
dlöfo
.
dli_‚ame
) + 1;

302 
size_t
 
rc
;

303 i‡–
dlöfo
.
dli_‚ame
[0]=='/' ) {

305 
rc
 = 0;

306 
≠_d©a
.
_Àn
 = 0;

309 i‡–!
	`gëcwd
–
≠_d©a
.
_∑th
, (ap_data._path)/(ap_data._path[0]) ) ) {

310 
	`DYNAMIC_LINK_WARNING
–
dl_buff_too_smÆl
 );

313 
≠_d©a
.
_Àn
 = 
	`°æí
–≠_d©a.
_∑th
 );

314 
≠_d©a
.
_∑th
[≠_d©a.
_Àn
++]='/';

315 
rc
 = 
≠_d©a
.
_Àn
;

318 i‡–
‚ame_Àn
>0 ) {

319 i‡–
≠_d©a
.
_Àn
>
PATH_MAX
 ) {

320 
	`DYNAMIC_LINK_WARNING
–
dl_buff_too_smÆl
 );

321 
≠_d©a
.
_Àn
=0;

324 
	`°∫˝y
–
≠_d©a
.
_∑th
+
rc
, 
dlöfo
.
dli_‚ame
, 
‚ame_Àn
 );

325 
≠_d©a
.
_Àn
 +
‚ame_Àn
;

326 
≠_d©a
.
_∑th
[≠_d©a.
_Àn
]=0;

329 
	}
}

331 
	$öô_dl_d©a
() {

332 
	`öô_≠_d©a
();

333 #i‡!
__USE_TBB_ATOMICS


334 
ªs
;

335 
ªs
 = 
	`±hªad_•ö_öô
–&
h™dÀs
.
my_lock
, 
PTHREAD_PROCESS_SHARED
 );

336 
	`LIBRARY_ASSERT
–
ªs
==0, "pthread_spin_init failed" );

338 
	}
}

343 ˛as†
	c_°©ic_öô_dl_d©a
 {

344 
	mpublic
:

345 
	$_°©ic_öô_dl_d©a
() {

346 #i‡
__USE_STATIC_DL_INIT


347 
	`©omic_⁄˚
–&
öô_dl_d©a
, 
öô_dl_d©a_°©e
 );

350 #i‡!
__USE_TBB_ATOMICS


351 ~
	$_°©ic_öô_dl_d©a
() {

352 
ªs
;

353 
ªs
 = 
	`±hªad_•ö_de°roy
–&
h™dÀs
.
my_lock
 );

354 
	`LIBRARY_ASSERT
–
ªs
==0, "pthread_spin_destroy failed" );

355 
	}
}

357 } 
	g°©ic_öô_dl_d©a
;

372 #i‡
__TBB_DYNAMIC_LOAD_ENABLED


373 
size_t
 
	$abs_∑th
–c⁄° * 
«me
, * 
∑th
, 
size_t
 
Àn
 ) {

374 
	`©omic_⁄˚
–&
öô_dl_d©a
, 
öô_dl_d©a_°©e
 );

376 i‡–!
≠_d©a
.
_Àn
 )

379 
size_t
 
«me_Àn
 = 
	`°æí
–
«me
 );

380 
size_t
 
fuŒ_Àn
 = 
«me_Àn
+
≠_d©a
.
_Àn
;

381 i‡–
fuŒ_Àn
 < 
Àn
 ) {

382 
	`°∫˝y
–
∑th
, 
≠_d©a
.
_∑th
,áp_d©a.
_Àn
 );

383 
	`°∫˝y
–
∑th
+
≠_d©a
.
_Àn
, 
«me
, 
«me_Àn
 );

384 
∑th
[
fuŒ_Àn
] = 0;

386  
fuŒ_Àn
;

387 
	}
}

390 #i‡
__TBB_WEAK_SYMBOLS_PRESENT


391 
boﬁ
 
	$wók_symbﬁ_lök
–c⁄° 
dy«mic_lök_des¸ùt‹
 
des¸ùt‹s
[], 
size_t
 
ªquúed
 )

394  
size_t
 
k
 = 0; k < 
ªquúed
; ++k )

395 i‡–!
des¸ùt‹s
[
k
].
±r
 )

396  
Ál£
;

398  
size_t
 
k
 = 0; k < 
ªquúed
; ++k )

399 *
des¸ùt‹s
[
k
].
h™dÀr
 = (
poöãr_to_h™dÀr
Ëdes¸ùt‹s[k].
±r
;

400  
åue
;

401 
	}
}

403 
boﬁ
 
	$wók_symbﬁ_lök
–c⁄° 
dy«mic_lök_des¸ùt‹
[], 
size_t
 ) {

404  
Ál£
;

405 
	}
}

408 
	$dy«mic_u∆ök
–
dy«mic_lök_h™dÀ
 
h™dÀ
 ) {

409 i‡–
h™dÀ
 ) {

410 #i‡
__TBB_WEAK_SYMBOLS_PRESENT


411 
	`LIBRARY_ASSERT
–
dl˛o£
 !
NULL
, "dlopen isÖresent but dlclose is NOTÖresent!?" );

413 #i‡
__TBB_DYNAMIC_LOAD_ENABLED


414 
	`dl˛o£
–
h™dÀ
 );

417 
	}
}

419 
	$dy«mic_u∆ök_Æl
() {

420 
h™dÀs
.
	`‰ì_h™dÀs
();

421 
	}
}

423 #i‡
_WIN32


424 
dy«mic_lök_h™dÀ
 
	$globÆ_symbﬁs_lök
–c⁄° * 
libøry
, c⁄° 
dy«mic_lök_des¸ùt‹
 
des¸ùt‹s
[], 
size_t
 
ªquúed
 ) {

425 
dy«mic_lök_h™dÀ
 
libøry_h™dÀ
;

426 i‡–
	`GëModuÀH™dÀExA
–0, 
libøry
, &
libøry_h™dÀ
 ) ) {

427 i‡–
	`ªsﬁve_symbﬁs
–
libøry_h™dÀ
, 
des¸ùt‹s
, 
ªquúed
 ) )

428  
libøry_h™dÀ
;

430 
	`FªeLibøry
–
libøry_h™dÀ
 );

433 
	}
}

436 
dy«mic_lök_h™dÀ
 
	$pö_symbﬁs
–
dy«mic_lök_des¸ùt‹
 
desc
, c⁄° dy«mic_lök_des¸ùt‹ 
des¸ùt‹s
[], 
size_t
 
ªquúed
 ) {

440 
dy«mic_lök_h™dÀ
 
libøry_h™dÀ
;

441 
Dl_öfo
 
öfo
;

443 i‡–
	`dœddr
–(*)*
desc
.
h™dÀr
, &
öfo
 ) ) {

445 
libøry_h™dÀ
 = 
	`dl›í
–
öfo
.
dli_‚ame
, 
RTLD_LAZY
 );

446 i‡–
libøry_h™dÀ
 ) {

450 i‡–!
	`ªsﬁve_symbﬁs
–
libøry_h™dÀ
, 
des¸ùt‹s
, 
ªquúed
 ) ) {

452 
	`dy«mic_u∆ök
(
libøry_h™dÀ
);

453 
libøry_h™dÀ
 = 0;

456 c⁄° * 
îr
 = 
	`dÀº‹
();

457 
	`DYNAMIC_LINK_WARNING
–
dl_lib_nŸ_found
, 
öfo
.
dli_‚ame
, 
îr
 );

462 
libøry_h™dÀ
 = 0;

464  
libøry_h™dÀ
;

465 
	}
}

467 
dy«mic_lök_h™dÀ
 
	$globÆ_symbﬁs_lök
–c⁄° *, c⁄° 
dy«mic_lök_des¸ùt‹
 
des¸ùt‹s
[], 
size_t
 
ªquúed
 ) {

468 #i‡
__TBB_WEAK_SYMBOLS_PRESENT


469 i‡–!
dl›í
 )  0;

471 
dy«mic_lök_h™dÀ
 
libøry_h™dÀ
 = 
	`dl›í
–
NULL
, 
RTLD_LAZY
 );

472 #i‡
__ANDROID__


474 i‡–!
libøry_h™dÀ
 )

478 
poöãr_to_h™dÀr
 
h™dÀr
;

479 
dy«mic_lök_des¸ùt‹
 
desc
 = { 
des¸ùt‹s
[0].
«me
, &
h™dÀr
 };

480 i‡–
	`ªsﬁve_symbﬁs
–
libøry_h™dÀ
, &
desc
, 1 ) )

481  
	`pö_symbﬁs
–
desc
, 
des¸ùt‹s
, 
ªquúed
 );

483 
	}
}

486 
	$ßve_libøry_h™dÀ
–
dy«mic_lök_h™dÀ
 
§c
, dy«mic_lök_h™dÀ *
d°
 ) {

487 i‡–
d°
 )

488 *
d°
 = 
§c
;

490 
h™dÀs
.
	`add_h™dÀ
–
§c
 );

491 
	}
}

493 
dy«mic_lök_h™dÀ
 
	$dy«mic_lﬂd
–c⁄° * 
libøry
, c⁄° 
dy«mic_lök_des¸ùt‹
 
des¸ùt‹s
[], 
size_t
 
ªquúed
 ) {

494 #i‡
__TBB_DYNAMIC_LOAD_ENABLED


495 #i‡
_XBOX


496  
	`LﬂdLibøry
 (
libøry
);

498 
size_t
 c⁄° 
Àn
 = 
PATH_MAX
 + 1;

499 
∑th
[ 
Àn
 ];

500 
size_t
 
rc
 = 
	`abs_∑th
–
libøry
, 
∑th
, 
Àn
 );

501 i‡–0 < 
rc
 &&Ñ¯< 
Àn
 ) {

502 #i‡
_WIN32


505 
UINT
 
¥ev_mode
 = 
	`SëEº‹Mode
 (
SEM_FAILCRITICALERRORS
);

507 #i‡
__TBB_WEAK_SYMBOLS_PRESENT


508 i‡–!
dl›í
 )  0;

510 
dy«mic_lök_h™dÀ
 
libøry_h™dÀ
 = 
	`dl›í
–
∑th
, 
RTLD_LAZY
 );

511 #i‡
_WIN32


512 
	`SëEº‹Mode
 (
¥ev_mode
);

514 if–
libøry_h™dÀ
 ) {

515 if–!
	`ªsﬁve_symbﬁs
–
libøry_h™dÀ
, 
des¸ùt‹s
, 
ªquúed
 ) ) {

517 
	`dy«mic_u∆ök
–
libøry_h™dÀ
 );

518 
libøry_h™dÀ
 = 
NULL
;

521 
	`DYNAMIC_LINK_WARNING
–
dl_lib_nŸ_found
, 
∑th
, 
	`dÀº‹
() );

522  
libøry_h™dÀ
;

523 } i‡–
rc
>=
Àn
 )

524 
	`DYNAMIC_LINK_WARNING
–
dl_buff_too_smÆl
 );

529 
	}
}

531 
boﬁ
 
	$dy«mic_lök
–c⁄° * 
libøry
, c⁄° 
dy«mic_lök_des¸ùt‹
 
des¸ùt‹s
[], 
size_t
 
ªquúed
, 
dy«mic_lök_h™dÀ
 *
h™dÀ
, 
Êags
 ) {

533 
dy«mic_lök_h™dÀ
 
libøry_h™dÀ
 = ( 
Êags
 & 
DYNAMIC_LINK_GLOBAL
 ) ? 
	`globÆ_symbﬁs_lök
–
libøry
, 
des¸ùt‹s
, 
ªquúed
 ) : 0;

535 i‡–!
libøry_h™dÀ
 && ( 
Êags
 & 
DYNAMIC_LINK_LOAD
 ) )

536 
libøry_h™dÀ
 = 
	`dy«mic_lﬂd
–
libøry
, 
des¸ùt‹s
, 
ªquúed
 );

538 i‡–!
libøry_h™dÀ
 && ( 
Êags
 & 
DYNAMIC_LINK_WEAK
 ) )

539  
	`wók_symbﬁ_lök
–
des¸ùt‹s
, 
ªquúed
 );

541 
	`ßve_libøry_h™dÀ
–
libøry_h™dÀ
, 
h™dÀ
 );

542  
åue
;

543 
	}
}

547 
boﬁ
 
	$dy«mic_lök
–c⁄° *, c⁄° 
dy«mic_lök_des¸ùt‹
*, 
size_t
, 
dy«mic_lök_h™dÀ
 *
h™dÀ
, ) {

548 i‡–
h™dÀ
 )

549 *
h™dÀ
=0;

550  
Ál£
;

551 
	}
}

553 
	$dy«mic_u∆ök
–
dy«mic_lök_h™dÀ
 ) {

554 
	}
}

556 
	$dy«mic_u∆ök_Æl
() {

557 
	}
}

560 
	gCLOSE_INTERNAL_NAMESPACE


	@viper/concurrentqueue-src/benchmarks/tbb/dynamic_link.h

21 #i‚de‡
__TBB_dy«mic_lök


22 
	#__TBB_dy«mic_lök


	)

26 
	~"tbb/tbb_°ddef.h
"

28 #ifde‡
LIBRARY_ASSERT


29 #unde‡
__TBB_ASSERT


30 
	#__TBB_ASSERT
(
x
,
y
Ë
	`LIBRARY_ASSERT
(x,y)

	)

32 
	#LIBRARY_ASSERT
(
x
,
y
Ë
	`__TBB_ASSERT_EX
(x,y)

	)

38 #i‚de‡
OPEN_INTERNAL_NAMESPACE


39 
	#OPEN_INTERNAL_NAMESPACE
 
«me•a˚
 
tbb
 {Çame•a˚ 
öã∫Æ
 {

	)

40 
	#CLOSE_INTERNAL_NAMESPACE
 }}

	)

43 
	~<°ddef.h
>

44 #i‡
_WIN32


45 
	~"tbb/machöe/wödows_≠i.h
"

48 
OPEN_INTERNAL_NAMESPACE


51 (*
	gpoöãr_to_h™dÀr
)();

56 #i‡
__TBB_WEAK_SYMBOLS_PRESENT


57 
	#DLD
(
s
,
h
Ë{#s, (
poöãr_to_h™dÀr
*)(*)(&h), (poöãr_to_h™dÀr)&s}

	)

59 
	#DLD
(
s
,
h
Ë{#s, (
poöãr_to_h™dÀr
*)(*)(&h)}

	)

62 
	sdy«mic_lök_des¸ùt‹
 {

64 c⁄° * 
	m«me
;

66 
poöãr_to_h™dÀr
* 
	mh™dÀr
;

67 #i‡
__TBB_WEAK_SYMBOLS_PRESENT


69 
poöãr_to_h™dÀr
 
	m±r
;

73 #i‡
_WIN32


74 
HMODULE
 
	tdy«mic_lök_h™dÀ
;

76 * 
	tdy«mic_lök_h™dÀ
;

79 c⁄° 
	gDYNAMIC_LINK_GLOBAL
 = 0x01;

80 c⁄° 
	gDYNAMIC_LINK_LOAD
 = 0x02;

81 c⁄° 
	gDYNAMIC_LINK_WEAK
 = 0x04;

82 c⁄° 
	gDYNAMIC_LINK_ALL
 = 
DYNAMIC_LINK_GLOBAL
 | 
DYNAMIC_LINK_LOAD
 | 
DYNAMIC_LINK_WEAK
;

100 
boﬁ
 
dy«mic_lök
–c⁄° * 
libøry
,

101 c⁄° 
dy«mic_lök_des¸ùt‹
 
des¸ùt‹s
[],

102 
size_t
 
ªquúed
,

103 
dy«mic_lök_h™dÀ
* 
h™dÀ
 = 0,

104 
Êags
 = 
DYNAMIC_LINK_ALL
 );

106 
dy«mic_u∆ök
–
dy«mic_lök_h™dÀ
 
h™dÀ
 );

108 
dy«mic_u∆ök_Æl
();

110 
	edy«mic_lök_îr‹_t
 {

111 
	mdl_suc˚ss
 = 0,

112 
	mdl_lib_nŸ_found
,

113 
	mdl_sym_nŸ_found
,

115 
	mdl_sys_Áû
,

116 
	mdl_buff_too_smÆl


119 
	gCLOSE_INTERNAL_NAMESPACE


	@viper/concurrentqueue-src/benchmarks/tbb/enumerable_thread_specific.h

21 #i‚de‡
__TBB_íumîabÀ_thªad_•ecific_H


22 
	#__TBB_íumîabÀ_thªad_•ecific_H


	)

24 
	~"c⁄cuºít_ve˘‹.h
"

25 
	~"tbb_thªad.h
"

26 
	~"tbb_Æloˇt‹.h
"

27 
	~"tbb_¥ofûög.h
"

28 
	~"ˇche_Æig√d_Æloˇt‹.h
"

29 
	~"Æig√d_•a˚.h
"

30 
	~<°rög.h
>

32 #i‡
_WIN32
||
_WIN64


33 
	~"machöe/wödows_≠i.h
"

35 
	~<±hªad.h
>

38 
«me•a˚
 
	gtbb
 {

41 
	eës_key_ußge_ty≥
 { 
	gës_key_≥r_ö°™˚
, 
	gës_no_key
 };

43 
«me•a˚
 
	göãrÁ˚6
 {

46 
«me•a˚
 
	göã∫Æ
 {

48 
usög
 
«me•a˚
 
	gtbb
::
öã∫Æ
;

50 
	gãm∂©e
<
ës_key_ußge_ty≥
 
	gETS_key_ty≥
>

51 ˛as†
	cës_ba£
: 
tbb
::
öã∫Æ
::
no_c›y
 {

52 
¥Ÿe˘ed
:

53 #i‡
_WIN32
||
_WIN64


54 
DWORD
 
	tkey_ty≥
;

56 
±hªad_t
 
	tkey_ty≥
;

58 #i‡
__TBB_PROTECTED_NESTED_CLASS_BROKEN


59 
	gpublic
:

61 
¶Ÿ
;

63 
	s¨øy
 {

64 
¨øy
* 
	g√xt
;

65 
size_t
 
	glg_size
;

66 
	g¶Ÿ
& 
©
–
size_t
 
k
 ) {

67  ((
	g¶Ÿ
*)(*)(
	gthis
+1))[
k
];

69 
size_t
 
size
(Ëc⁄° { (
	gsize_t
)1<<
	glg_size
;}

70 
size_t
 
mask
(Ëc⁄° { 
size
()-1;}

71 
size_t
 
°¨t
–size_à
h
 ) const {

72  
	gh
>>(8*(
	gsize_t
)-
	glg_size
);

75 
	s¶Ÿ
 {

76 
key_ty≥
 
	gkey
;

77 * 
	g±r
;

78 
boﬁ
 
em±y
(Ëc⁄° { !
	gkey
;}

79 
boﬁ
 
m©ch
–
key_ty≥
 
k
 ) c⁄° { 
	gkey
==k;}

80 
boﬁ
 
˛aim
–
key_ty≥
 
k
 ) {

81 
__TBB_ASSERT
((
tbb
::
©omic
<
key_ty≥
>)==(key_ty≥), 
NULL
);

82  
	gtbb
::
öã∫Æ
::
pu¬ed_ˇ°
<
tbb
::
©omic
<
key_ty≥
>*>(&
key
)->
com∑ª_™d_sw≠
(
k
,0)==0;

85 #i‡
__TBB_PROTECTED_NESTED_CLASS_BROKEN


86 
	g¥Ÿe˘ed
:

89 
key_ty≥
 
key_of_cuºít_thªad
() {

90 
tbb
::
tbb_thªad
::
id
 id =Åbb::
this_tbb_thªad
::
gë_id
();

91 
key_ty≥
 
	gk
;

92 
mem˝y
–&
k
, &
id
, (k) );

93  
	gk
;

99 
	g©omic
<
	g¨øy
*> 
	gmy_roŸ
;

100 
	g©omic
<
	gsize_t
> 
	gmy_cou¡
;

101 
vútuÆ
 * 
¸óã_loˇl
() = 0;

102 
vútuÆ
 * 
¸óã_¨øy
(
size_t
 
_size
) = 0;

103 
vútuÆ
 
‰ì_¨øy
(* 
±r
, 
size_t
 
_size
) = 0;

104 
¨øy
* 
Æloˇã
–
size_t
 
lg_size
 ) {

105 
size_t
 
	gn
 = 1<<
lg_size
;

106 
¨øy
* 
	ga
 = 
°©ic_ˇ°
<¨øy*>(
¸óã_¨øy
–◊ºay)+
n
*(
¶Ÿ
) ));

107 
	ga
->
	glg_size
 = 
lg_size
;

108 
	g°d
::
mem£t
–
a
+1, 0, 
n
*(
¶Ÿ
) );

109  
	ga
;

111 
‰ì
(
¨øy
* 
a
) {

112 
size_t
 
	gn
 = 1<<(
a
->
lg_size
);

113 
‰ì_¨øy
–(*)
a
, 
size_t
((
¨øy
)+
n
*(
¶Ÿ
)) );

115 
size_t
 
hash
–
key_ty≥
 
k
 ) {

118  
uöçå_t
(
k
)*
	gtbb
::
öã∫Æ
::
£À˘_size_t_c⁄°™t
<0x9E3779B9,0x9E3779B97F4A7C15ULL>::
vÆue
;

121 
ës_ba£
(Ë{
	gmy_roŸ
=
NULL
; 
	gmy_cou¡
=0;}

122 
	gvútuÆ
 ~
ës_ba£
();

123 * 
èbÀ_lookup
–
boﬁ
& 
exi°s
 );

124 
èbÀ_˛ór
();

127 
	g¶Ÿ
& 
èbÀ_föd
–
key_ty≥
 
k
 ) {

128 
size_t
 
	gh
 = 
hash
(
k
);

129 
¨øy
* 
	gr
 = 
my_roŸ
;

130 
size_t
 
	gmask
 = 
r
->
mask
();

131 
size_t
 
	gi
 = 
r
->
°¨t
(
h
);;i=(
i
+1)&
mask
) {

132 
¶Ÿ
& 
s
 = 
r
->
©
(
i
);

133 if–
	gs
.
em±y
(Ë|| s.
m©ch
(
k
) )

134  
	gs
;

137 
èbÀ_ª£rve_f‹_c›y
–c⁄° 
ës_ba£
& 
Ÿhî
 ) {

138 
__TBB_ASSERT
(!
my_roŸ
,
NULL
);

139 
__TBB_ASSERT
(!
my_cou¡
,
NULL
);

140 if–
	gŸhî
.
	gmy_roŸ
 ) {

141 
¨øy
* 
	ga
 = 
Æloˇã
(
Ÿhî
.
my_roŸ
->
lg_size
);

142 
	ga
->
	g√xt
 = 
NULL
;

143 
	gmy_roŸ
 = 
a
;

144 
	gmy_cou¡
 = 
Ÿhî
.
my_cou¡
;

149 
	gãm∂©e
<
ës_key_ußge_ty≥
 
	gETS_key_ty≥
>

150 
	gës_ba£
<
	gETS_key_ty≥
>::~
ës_ba£
() {

151 
__TBB_ASSERT
(!
my_roŸ
, 
NULL
);

154 
	gãm∂©e
<
ës_key_ußge_ty≥
 
	gETS_key_ty≥
>

155 
	gës_ba£
<
	gETS_key_ty≥
>::
èbÀ_˛ór
() {

156  
¨øy
* 
r
 = 
my_roŸ
 ) {

157 
my_roŸ
 = 
r
->
√xt
;

158 
‰ì
(
r
);

160 
	gmy_cou¡
 = 0;

163 
	gãm∂©e
<
ës_key_ußge_ty≥
 
	gETS_key_ty≥
>

164 * 
	gës_ba£
<
	gETS_key_ty≥
>::
èbÀ_lookup
–
boﬁ
& 
exi°s
 ) {

165 c⁄° 
key_ty≥
 
k
 = 
key_of_cuºít_thªad
();

167 
__TBB_ASSERT
(
k
!=0,
NULL
);

168 * 
	gfound
;

169 
size_t
 
	gh
 = 
hash
(
k
);

170  
¨øy
* 
	gr
=
my_roŸ
;Ñ;Ñ=
r
->
√xt
 ) {

171 
ˇŒ_ôt_nŸify
(
acquúed
,
r
);

172 
size_t
 
	gmask
=
r
->
mask
();

173 
size_t
 
	gi
 = 
r
->
°¨t
(
h
); ;i=(
i
+1)&
mask
) {

174 
¶Ÿ
& 
s
 = 
r
->
©
(
i
);

175 if–
	gs
.
em±y
() ) ;

176 if–
	gs
.
m©ch
(
k
) ) {

177 if–
	gr
==
my_roŸ
 ) {

179 
exi°s
 = 
åue
;

180  
	gs
.
	g±r
;

183 
	gexi°s
 = 
åue
;

184 
	gfound
 = 
s
.
±r
;

185 
	gö£π
;

193 
	gexi°s
 = 
Ál£
;

194 
	gfound
 = 
¸óã_loˇl
();

196 
size_t
 
	gc
 = ++
my_cou¡
;

197 
¨øy
* 
	gr
 = 
my_roŸ
;

198 
ˇŒ_ôt_nŸify
(
acquúed
,
r
);

199 if–!
	gr
 || 
	gc
>r->
size
()/2 ) {

200 
size_t
 
	gs
 = 
r
 ?Ñ->
lg_size
 : 2;

201  
	gc
>
size_t
(1)<<(
	gs
-1) ) ++s;

202 
¨øy
* 
	ga
 = 
Æloˇã
(
s
);

204 
	ga
->
	g√xt
 = 
r
;

205 
ˇŒ_ôt_nŸify
(
ªÀasög
,
a
);

206 
¨øy
* 
	g√w_r
 = 
my_roŸ
.
com∑ª_™d_sw≠
(
a
,
r
);

207 if–
	g√w_r
==
r
 ) ;

208 
ˇŒ_ôt_nŸify
(
acquúed
, 
√w_r
);

209 if–
	g√w_r
->
	glg_size
>=
s
 ) {

211 
‰ì
(
a
);

214 
	gr
 = 
√w_r
;

218 
	gö£π
:

222 
¨øy
* 
ú
 = 
my_roŸ
;

223 
ˇŒ_ôt_nŸify
(
acquúed
, 
ú
);

224 
size_t
 
	gmask
 = 
ú
->
mask
();

225 
size_t
 
	gi
 = 
ú
->
°¨t
(
h
);;i=(
i
+1)&
mask
) {

226 
¶Ÿ
& 
s
 = 
ú
->
©
(
i
);

227 if–
	gs
.
em±y
() ) {

228 if–
	gs
.
˛aim
(
k
) ) {

229 
	gs
.
	g±r
 = 
found
;

230  
	gfound
;

237 
	gãm∂©e
 <>

238 
˛ass
 
	gës_ba£
<
	gës_key_≥r_ö°™˚
>: 
¥Ÿe˘ed
 
ës_ba£
<
ës_no_key
> {

239 
ës_ba£
<
	tës_no_key
> 
	tsu≥r
;

240 #i‡
_WIN32
||
_WIN64


241 #i‡
__TBB_WIN8UI_SUPPORT


242 
DWORD
 
	tés_key_t
;

243 
¸óã_key
(Ë{ 
	gmy_key
 = 
FlsAŒoc
(
NULL
); }

244 
de°roy_key
(Ë{ 
FlsFªe
(
my_key
); }

245 
£t_és
(* 
vÆue
Ë{ 
FlsSëVÆue
(
my_key
, (
LPVOID
)value); }

246 * 
gë_és
(Ë{  (*)
FlsGëVÆue
(
my_key
); }

248 
DWORD
 
	tés_key_t
;

249 
¸óã_key
(Ë{ 
	gmy_key
 = 
TlsAŒoc
(); }

250 
de°roy_key
(Ë{ 
TlsFªe
(
my_key
); }

251 
£t_és
(* 
vÆue
Ë{ 
TlsSëVÆue
(
my_key
, (
LPVOID
)value); }

252 * 
gë_és
(Ë{  (*)
TlsGëVÆue
(
my_key
); }

255 
±hªad_key_t
 
	tés_key_t
;

256 
¸óã_key
(Ë{ 
±hªad_key_¸óã
(&
my_key
, 
NULL
); }

257 
de°roy_key
(Ë{ 
±hªad_key_dñëe
(
my_key
); }

258 
£t_és
–* 
vÆue
 ) c⁄° { 
±hªad_£t•ecific
(
my_key
, value); }

259 * 
gë_és
(Ëc⁄° {  
±hªad_gë•ecific
(
my_key
); }

261 
és_key_t
 
	gmy_key
;

262 
vútuÆ
 * 
¸óã_loˇl
() = 0;

263 
vútuÆ
 * 
¸óã_¨øy
(
size_t
 
_size
) = 0;

264 
vútuÆ
 
‰ì_¨øy
(* 
±r
, 
size_t
 
_size
) = 0;

265 
	gpublic
:

266 
ës_ba£
(Ë{
¸óã_key
();}

267 ~
ës_ba£
(Ë{
de°roy_key
();}

268 * 
èbÀ_lookup
–
boﬁ
& 
exi°s
 ) {

269 * 
	gfound
 = 
gë_és
();

270 if–
	gfound
 ) {

271 
	gexi°s
=
åue
;

273 
	gfound
 = 
su≥r
::
èbÀ_lookup
(
exi°s
);

274 
£t_és
(
found
);

276  
	gfound
;

278 
èbÀ_˛ór
() {

279 
de°roy_key
();

280 
¸óã_key
();

281 
	gsu≥r
::
èbÀ_˛ór
();

286 
	gãm∂©e
< 
ty≥«me
 
	gC⁄èöî
,Åy≥«mê
	gVÆue
 >

287 
˛ass
 
	gíumîabÀ_thªad_•ecific_ôî©‹


288 #i‡
deföed
(
_WIN64
Ë&& deföed(
_MSC_VER
)

290 : 
public
 
°d
::
ôî©‹
<°d::
øndom_ac˚ss_ôî©‹_èg
,
	gVÆue
>

295 
C⁄èöî
 *
	gmy_c⁄èöî
;

296 
ty≥«me
 
	gC⁄èöî
::
size_ty≥
 
my_ödex
;

297 
muèbÀ
 
VÆue
 *
	gmy_vÆue
;

299 
	gãm∂©e
<
ty≥«me
 
	gC
,Åy≥«mê
	gT
>

300 
‰õnd
 
	gíumîabÀ_thªad_•ecific_ôî©‹
<
	gC
,
	gT
> 
	g›î©‹
+–
±rdiff_t
 
	goff£t
,

301 c⁄° 
	gíumîabÀ_thªad_•ecific_ôî©‹
<
	gC
,
	gT
>& 
	gv
 );

303 
	gãm∂©e
<
ty≥«me
 
	gC
,Åy≥«mê
	gT
,Åy≥«mê
	gU
>

304 
‰õnd
 
boﬁ
 
	g›î©‹
==–c⁄° 
íumîabÀ_thªad_•ecific_ôî©‹
<
C
,
	gT
>& 
	gi
,

305 c⁄° 
	gíumîabÀ_thªad_•ecific_ôî©‹
<
	gC
,
	gU
>& 
	gj
 );

307 
	gãm∂©e
<
ty≥«me
 
	gC
,Åy≥«mê
	gT
,Åy≥«mê
	gU
>

308 
‰õnd
 
boﬁ
 
	g›î©‹
<–c⁄° 
	gíumîabÀ_thªad_•ecific_ôî©‹
<
	gC
,
	gT
>& 
	gi
,

309 c⁄° 
	gíumîabÀ_thªad_•ecific_ôî©‹
<
	gC
,
	gU
>& 
	gj
 );

311 
	gãm∂©e
<
ty≥«me
 
	gC
,Åy≥«mê
	gT
,Åy≥«mê
	gU
>

312 
‰õnd
 
±rdiff_t
 
	g›î©‹
-–c⁄° 
	gíumîabÀ_thªad_•ecific_ôî©‹
<
	gC
,
	gT
>& 
	gi
, c⁄°ÉnumîabÀ_thªad_•ecific_ôî©‹<C,
	gU
>& 
	gj
 );

314 
	gãm∂©e
<
ty≥«me
 
	gC
,Åy≥«mê
	gU
>

315 
‰õnd
 
˛ass
 
	gíumîabÀ_thªad_•ecific_ôî©‹
;

317 
	gpublic
:

319 
íumîabÀ_thªad_•ecific_ôî©‹
–c⁄° 
C⁄èöî
 &
c⁄èöî
, 
ty≥«me
 C⁄èöî::
size_ty≥
 
ödex
 ) :

320 
my_c⁄èöî
(&
c⁄°_ˇ°
<
C⁄èöî
 &>(
c⁄èöî
)), 
my_ödex
(
ödex
), 
my_vÆue
(
NULL
) {}

323 
íumîabÀ_thªad_•ecific_ôî©‹
(Ë: 
my_c⁄èöî
(
NULL
), 
my_ödex
(0), 
my_vÆue
(NULL) {}

325 
	gãm∂©e
<
ty≥«me
 
	gU
>

326 
íumîabÀ_thªad_•ecific_ôî©‹
–c⁄°ÉnumîabÀ_thªad_•ecific_ôî©‹<
C⁄èöî
, 
U
>& 
Ÿhî
 ) :

327 
my_c⁄èöî
–
Ÿhî
.my_c⁄èöî ), 
my_ödex
–Ÿhî.my_ödex), 
my_vÆue
–
c⁄°_ˇ°
<
VÆue
 *>(other.my_value) ) {}

329 
íumîabÀ_thªad_•ecific_ôî©‹
 
	g›î©‹
+–
±rdiff_t
 
	goff£t
 ) const {

330  
íumîabÀ_thªad_•ecific_ôî©‹
(*
my_c⁄èöî
, 
my_ödex
 + 
off£t
);

333 
	gíumîabÀ_thªad_•ecific_ôî©‹
 &
	g›î©‹
+=–
±rdiff_t
 
off£t
 ) {

334 
my_ödex
 +
off£t
;

335 
	gmy_vÆue
 = 
NULL
;

336  *
	gthis
;

339 
íumîabÀ_thªad_•ecific_ôî©‹
 
	g›î©‹
-–
±rdiff_t
 
	goff£t
 ) const {

340  
íumîabÀ_thªad_•ecific_ôî©‹
–*
my_c⁄èöî
, 
my_ödex
-
off£t
 );

343 
	gíumîabÀ_thªad_•ecific_ôî©‹
 &
	g›î©‹
-=–
±rdiff_t
 
off£t
 ) {

344 
my_ödex
 -
off£t
;

345 
	gmy_vÆue
 = 
NULL
;

346  *
	gthis
;

349 
	gVÆue
& 
	g›î©‹
*() const {

350 
VÆue
* 
	gvÆue
 = 
my_vÆue
;

351 if–!
	gvÆue
 ) {

352 
	gvÆue
 = 
my_vÆue
 = 
ªöãΩªt_ˇ°
<
VÆue
 *>(&(*
my_c⁄èöî
)[
my_ödex
].
vÆue
);

354 
__TBB_ASSERT
–
vÆue
==
ªöãΩªt_ˇ°
<
VÆue
 *>(&(*
my_c⁄èöî
)[
my_ödex
].value), "corrupt cache" );

355  *
	gvÆue
;

358 
	gVÆue
& 
	g›î©‹
[]–
±rdiff_t
 
	gk
 ) const {

359  (*
	gmy_c⁄èöî
)[
my_ödex
 + 
k
].
	gvÆue
;

362 
VÆue
* 
	g›î©‹
->() const { &operator*();}

364 
	gíumîabÀ_thªad_•ecific_ôî©‹
& 
	g›î©‹
++() {

365 ++
	gmy_ödex
;

366 
	gmy_vÆue
 = 
NULL
;

367  *
	gthis
;

370 
	gíumîabÀ_thªad_•ecific_ôî©‹
& 
	g›î©‹
--() {

371 --
	gmy_ödex
;

372 
	gmy_vÆue
 = 
NULL
;

373  *
	gthis
;

377 
íumîabÀ_thªad_•ecific_ôî©‹
 
	g›î©‹
++() {

378 
íumîabÀ_thªad_•ecific_ôî©‹
 
	gªsu…
 = *
this
;

379 ++
	gmy_ödex
;

380 
	gmy_vÆue
 = 
NULL
;

381  
	gªsu…
;

385 
íumîabÀ_thªad_•ecific_ôî©‹
 
	g›î©‹
--() {

386 
íumîabÀ_thªad_•ecific_ôî©‹
 
	gªsu…
 = *
this
;

387 --
	gmy_ödex
;

388 
	gmy_vÆue
 = 
NULL
;

389  
	gªsu…
;

393 
±rdiff_t
 
	tdif„ªn˚_ty≥
;

394 
VÆue
 
	tvÆue_ty≥
;

395 
VÆue
* 
	tpoöãr
;

396 
	gVÆue
& 
	tª„ªn˚
;

397 
	g°d
::
	tøndom_ac˚ss_ôî©‹_èg
 
	tôî©‹_ˇãg‹y
;

400 
	gãm∂©e
<
ty≥«me
 
	gC⁄èöî
,Åy≥«mê
	gT
>

401 
	gíumîabÀ_thªad_•ecific_ôî©‹
<
	gC⁄èöî
,
	gT
> 
	g›î©‹
+–
±rdiff_t
 
	goff£t
,

402 c⁄° 
	gíumîabÀ_thªad_•ecific_ôî©‹
<
	gC⁄èöî
,
	gT
>& 
	gv
 ) {

403  
	gíumîabÀ_thªad_•ecific_ôî©‹
<
	gC⁄èöî
,
	gT
>–
	gv
.
	gmy_c⁄èöî
, v.
	gmy_ödex
 + 
	goff£t
 );

406 
	gãm∂©e
<
ty≥«me
 
	gC⁄èöî
,Åy≥«mê
	gT
,Åy≥«mê
	gU
>

407 
boﬁ
 
	g›î©‹
==–c⁄° 
íumîabÀ_thªad_•ecific_ôî©‹
<
C⁄èöî
,
	gT
>& 
	gi
,

408 c⁄° 
	gíumîabÀ_thªad_•ecific_ôî©‹
<
	gC⁄èöî
,
	gU
>& 
	gj
 ) {

409  
	gi
.
	gmy_ödex
==
j
.
my_ödex
 && 
i
.
my_c⁄èöî
 == j.my_container;

412 
	gãm∂©e
<
ty≥«me
 
	gC⁄èöî
,Åy≥«mê
	gT
,Åy≥«mê
	gU
>

413 
boﬁ
 
	g›î©‹
!=–c⁄° 
íumîabÀ_thªad_•ecific_ôî©‹
<
C⁄èöî
,
	gT
>& 
	gi
,

414 c⁄° 
	gíumîabÀ_thªad_•ecific_ôî©‹
<
	gC⁄èöî
,
	gU
>& 
	gj
 ) {

415  !(
	gi
==
j
);

418 
	gãm∂©e
<
ty≥«me
 
	gC⁄èöî
,Åy≥«mê
	gT
,Åy≥«mê
	gU
>

419 
boﬁ
 
	g›î©‹
<–c⁄° 
	gíumîabÀ_thªad_•ecific_ôî©‹
<
	gC⁄èöî
,
	gT
>& 
	gi
,

420 c⁄° 
	gíumîabÀ_thªad_•ecific_ôî©‹
<
	gC⁄èöî
,
	gU
>& 
	gj
 ) {

421  
	gi
.
	gmy_ödex
<
	gj
.my_index;

424 
	gãm∂©e
<
ty≥«me
 
	gC⁄èöî
,Åy≥«mê
	gT
,Åy≥«mê
	gU
>

425 
boﬁ
 
	g›î©‹
>–c⁄° 
	gíumîabÀ_thªad_•ecific_ôî©‹
<
	gC⁄èöî
,
	gT
>& 
	gi
,

426 c⁄° 
	gíumîabÀ_thªad_•ecific_ôî©‹
<
	gC⁄èöî
,
	gU
>& 
	gj
 ) {

427  
	gj
<
	gi
;

430 
	gãm∂©e
<
ty≥«me
 
	gC⁄èöî
,Åy≥«mê
	gT
,Åy≥«mê
	gU
>

431 
boﬁ
 
	g›î©‹
>=–c⁄° 
íumîabÀ_thªad_•ecific_ôî©‹
<
C⁄èöî
,
	gT
>& 
	gi
,

432 c⁄° 
	gíumîabÀ_thªad_•ecific_ôî©‹
<
	gC⁄èöî
,
	gU
>& 
	gj
 ) {

433  !(
	gi
<
	gj
);

436 
	gãm∂©e
<
ty≥«me
 
	gC⁄èöî
,Åy≥«mê
	gT
,Åy≥«mê
	gU
>

437 
boﬁ
 
	g›î©‹
<=–c⁄° 
íumîabÀ_thªad_•ecific_ôî©‹
<
C⁄èöî
,
	gT
>& 
	gi
,

438 c⁄° 
	gíumîabÀ_thªad_•ecific_ôî©‹
<
	gC⁄èöî
,
	gU
>& 
	gj
 ) {

439  !(
	gj
<
	gi
);

442 
	gãm∂©e
<
ty≥«me
 
	gC⁄èöî
,Åy≥«mê
	gT
,Åy≥«mê
	gU
>

443 
±rdiff_t
 
	g›î©‹
-–c⁄° 
	gíumîabÀ_thªad_•ecific_ôî©‹
<
	gC⁄èöî
,
	gT
>& 
	gi
,

444 c⁄° 
	gíumîabÀ_thªad_•ecific_ôî©‹
<
	gC⁄èöî
,
	gU
>& 
	gj
 ) {

445  
	gi
.
	gmy_ödex
-
	gj
.my_index;

448 
	gãm∂©e
<
ty≥«me
 
	gSegmíãdC⁄èöî
,Åy≥«mê
	gVÆue
 >

449 
˛ass
 
	g£gmíãd_ôî©‹


450 #i‡
deföed
(
_WIN64
Ë&& deföed(
_MSC_VER
)

451 : 
public
 
°d
::
ôî©‹
<°d::
öput_ôî©‹_èg
, 
	gVÆue
>

454 
	gãm∂©e
<
ty≥«me
 
	gC
,Åy≥«mê
	gT
,Åy≥«mê
	gU
>

455 
‰õnd
 
boﬁ
 
	g›î©‹
==(c⁄° 
£gmíãd_ôî©‹
<
C
,
	gT
>& 
	gi
, c⁄° 
	g£gmíãd_ôî©‹
<
	gC
,
	gU
>& 
	gj
);

457 
	gãm∂©e
<
ty≥«me
 
	gC
,Åy≥«mê
	gT
,Åy≥«mê
	gU
>

458 
‰õnd
 
boﬁ
 
	g›î©‹
!=(c⁄° 
£gmíãd_ôî©‹
<
C
,
	gT
>& 
	gi
, c⁄° 
	g£gmíãd_ôî©‹
<
	gC
,
	gU
>& 
	gj
);

460 
	gãm∂©e
<
ty≥«me
 
	gC
,Åy≥«mê
	gU
>

461 
‰õnd
 
˛ass
 
	g£gmíãd_ôî©‹
;

463 
	gpublic
:

465 
£gmíãd_ôî©‹
(Ë{
my_£gc⁄t
 = 
NULL
;}

467 
£gmíãd_ôî©‹
–c⁄° 
SegmíãdC⁄èöî
& 
_£gmíãd_c⁄èöî
 ) :

468 
my_£gc⁄t
(
c⁄°_ˇ°
<
SegmíãdC⁄èöî
*>(&
_£gmíãd_c⁄èöî
)),

469 
ouãr_ôî
(
my_£gc⁄t
->
íd
()) { }

471 ~
£gmíãd_ôî©‹
() {}

473 
ty≥«me
 
	tSegmíãdC⁄èöî
::
	tôî©‹
 
	touãr_ôî©‹
;

474 
ty≥«me
 
	tSegmíãdC⁄èöî
::
	tvÆue_ty≥
 
	tI¬îC⁄èöî
;

475 
ty≥«me
 
	tI¬îC⁄èöî
::
	tôî©‹
 
	tö√r_ôî©‹
;

478 
±rdiff_t
 
	tdif„ªn˚_ty≥
;

479 
VÆue
 
	tvÆue_ty≥
;

480 
ty≥«me
 
	tSegmíãdC⁄èöî
::
	tsize_ty≥
 size_type;

481 
VÆue
* 
	tpoöãr
;

482 
	gVÆue
& 
	tª„ªn˚
;

483 
	g°d
::
	töput_ôî©‹_èg
 
	tôî©‹_ˇãg‹y
;

486 
	gãm∂©e
<
ty≥«me
 
	gU
>

487 
£gmíãd_ôî©‹
(c⁄° segmíãd_ôî©‹<
SegmíãdC⁄èöî
, 
U
>& 
Ÿhî
) :

488 
my_£gc⁄t
(
Ÿhî
.my_segcont),

489 
ouãr_ôî
(
Ÿhî
.outer_iter),

491 
ö√r_ôî
(
Ÿhî
.inner_iter)

495 
	gãm∂©e
<
ty≥«me
 
	gU
>

496 
	g£gmíãd_ôî©‹
& 
	g›î©‹
=–c⁄° 
£gmíãd_ôî©‹
<
SegmíãdC⁄èöî
, 
	gU
>& 
	gŸhî
) {

497 if(
	gthis
 !&
Ÿhî
) {

498 
my_£gc⁄t
 = 
Ÿhî
.my_segcont;

499 
	gouãr_ôî
 = 
Ÿhî
.
ouãr_ôî
;

500 if(
	gouãr_ôî
 !
my_£gc⁄t
->
íd
()Ë
ö√r_ôî
 = 
Ÿhî
.inner_iter;

502  *
	gthis
;

508 
	g£gmíãd_ôî©‹
& 
	g›î©‹
=(c⁄° 
ouãr_ôî©‹
& 
√w_ouãr_ôî
) {

509 
__TBB_ASSERT
(
my_£gc⁄t
 !
NULL
, NULL);

511 
	gouãr_ôî
 = 
√w_ouãr_ôî
 ;ouãr_ôî!=
my_£gc⁄t
->
íd
(); ++outer_iter) {

512 if–!
	gouãr_ôî
->
em±y
() ) {

513 
	gö√r_ôî
 = 
ouãr_ôî
->
begö
();

517  *
	gthis
;

521 
	g£gmíãd_ôî©‹
& 
	g›î©‹
++() {

522 
adv™˚_me
();

523  *
	gthis
;

527 
£gmíãd_ôî©‹
 
	g›î©‹
++() {

528 
£gmíãd_ôî©‹
 
	gtmp
 = *
this
;

529 
	g›î©‹
++();

530  
	gtmp
;

533 
boﬁ
 
	g›î©‹
==(c⁄° 
ouãr_ôî©‹
& 
Ÿhî_ouãr
) const {

534 
__TBB_ASSERT
(
my_£gc⁄t
 !
NULL
, NULL);

535  (
	gouãr_ôî
 =
Ÿhî_ouãr
 &&

536 (
ouãr_ôî
 =
my_£gc⁄t
->
íd
(Ë|| 
ö√r_ôî
 =ouãr_ôî->
begö
()));

539 
boﬁ
 
	g›î©‹
!=(c⁄° 
ouãr_ôî©‹
& 
Ÿhî_ouãr
) const {

540  !
›î©‹
==(
Ÿhî_ouãr
);

545 
ª„ªn˚
 
	g›î©‹
*() const {

546 
__TBB_ASSERT
(
my_£gc⁄t
 !
NULL
, NULL);

547 
__TBB_ASSERT
(
ouãr_ôî
 !
my_£gc⁄t
->
íd
(), "DereferencingáÖointerátÉnd of container");

548 
__TBB_ASSERT
(
ö√r_ôî
 !
ouãr_ôî
->
íd
(), 
NULL
);

549  *
	gö√r_ôî
;

553 
poöãr
 
	g›î©‹
->() const {  &operator*();}

555 
	g¥iv©e
:

556 
SegmíãdC⁄èöî
* 
my_£gc⁄t
;

557 
ouãr_ôî©‹
 
	gouãr_ôî
;

558 
ö√r_ôî©‹
 
	gö√r_ôî
;

560 
adv™˚_me
() {

561 
__TBB_ASSERT
(
my_£gc⁄t
 !
NULL
, NULL);

562 
__TBB_ASSERT
(
ouãr_ôî
 !
my_£gc⁄t
->
íd
(), 
NULL
);

563 
__TBB_ASSERT
(
ö√r_ôî
 !
ouãr_ôî
->
íd
(), 
NULL
);

564 ++
	gö√r_ôî
;

565 
	gö√r_ôî
 =
ouãr_ôî
->
íd
(Ë&& ++ouãr_ôî !
my_£gc⁄t
->end()) {

566 
ö√r_ôî
 = 
ouãr_ôî
->
begö
();

571 
	gãm∂©e
<
ty≥«me
 
	gSegmíãdC⁄èöî
,Åy≥«mê
	gT
,Åy≥«mê
	gU
>

572 
boﬁ
 
	g›î©‹
==–c⁄° 
£gmíãd_ôî©‹
<
SegmíãdC⁄èöî
,
	gT
>& 
	gi
,

573 c⁄° 
	g£gmíãd_ôî©‹
<
	gSegmíãdC⁄èöî
,
	gU
>& 
	gj
 ) {

574 if(
	gi
.
	gmy_£gc⁄t
 !
j
.
my_£gc⁄t
Ë 
Ál£
;

575 if(
	gi
.
	gmy_£gc⁄t
 =
NULL
Ë 
åue
;

576 if(
	gi
.
	gouãr_ôî
 !
j
.
ouãr_ôî
Ë 
Ál£
;

577 if(
	gi
.
	gouãr_ôî
 =
i
.
my_£gc⁄t
->
íd
()Ë 
åue
;

578  
	gi
.
	gö√r_ôî
 =
j
.
ö√r_ôî
;

582 
	gãm∂©e
<
ty≥«me
 
	gSegmíãdC⁄èöî
,Åy≥«mê
	gT
,Åy≥«mê
	gU
>

583 
boﬁ
 
	g›î©‹
!=–c⁄° 
£gmíãd_ôî©‹
<
SegmíãdC⁄èöî
,
	gT
>& 
	gi
,

584 c⁄° 
	g£gmíãd_ôî©‹
<
	gSegmíãdC⁄èöî
,
	gU
>& 
	gj
 ) {

585  !(
	gi
==
j
);

588 
	gãm∂©e
<
ty≥«me
 
	gT
>

589 
	gde°ru˘_⁄ly
: 
tbb
::
öã∫Æ
::
no_c›y
 {

590 
tbb
::
Æig√d_•a˚
<
T
> 
vÆue
;

591 ~
de°ru˘_⁄ly
(Ë{
	gvÆue
.
begö
()[0].~
T
();}

594 
	gãm∂©e
<
ty≥«me
 
	gT
>

595 
	gc⁄°ru˘_by_deÁu…
: 
tbb
::
öã∫Æ
::
no_assign
 {

596 
c⁄°ru˘
(*
whîe
Ë{
√w
(whîeË
T
();}

597 
c⁄°ru˘_by_deÁu…
( ) {}

600 
	gãm∂©e
<
ty≥«me
 
	gT
>

601 
	gc⁄°ru˘_by_exem∂¨
: 
tbb
::
öã∫Æ
::
no_assign
 {

602 c⁄° 
T
 
exem∂¨
;

603 
c⁄°ru˘
(*
whîe
Ë{
√w
(whîeË
T
(
exem∂¨
);}

604 
c⁄°ru˘_by_exem∂¨
–c⁄° 
T
& 
t
 ) : 
exem∂¨
(t) {}

607 
	gãm∂©e
<
ty≥«me
 
	gT
,Åy≥«mê
	gFöô
>

608 
	gc⁄°ru˘_by_föô
: 
tbb
::
öã∫Æ
::
no_assign
 {

609 
Föô
 
f
;

610 
c⁄°ru˘
(* 
whîe
Ë{
√w
(whîeË
T
(
f
());}

611 
c⁄°ru˘_by_föô
–c⁄° 
Föô
& 
f_
 ) : 
f
(f_) {}

615 
	gãm∂©e
<
ty≥«me
 
	gT
>

616 ˛as†
	cˇŒback_ba£
 {

617 
	gpublic
:

619 
vútuÆ
 
ˇŒback_ba£
* 
˛⁄e
() = 0;

621 
vútuÆ
 
de°roy
() = 0;

623 
	gvútuÆ
 ~
ˇŒback_ba£
() { }

625 
vútuÆ
 
c⁄°ru˘
(* 
whîe
) = 0;

628 
	gãm∂©e
 <
ty≥«me
 
	gT
,Åy≥«mê
	gC⁄°ru˘‹
>

629 
˛ass
 
	gˇŒback_Àaf
: 
public
 
ˇŒback_ba£
<
T
>, 
	gC⁄°ru˘‹
 {

630 
	gãm∂©e
<
ty≥«me
 
	gX
> 
ˇŒback_Àaf
–c⁄° 
X
& 
x
 ) : 
C⁄°ru˘‹
(x) {}

632 
ty≥«me
 
	ttbb
::
	ttbb_Æloˇt‹
<
	tˇŒback_Àaf
> 
	tmy_Æloˇt‹_ty≥
;

634  
	gˇŒback_ba£
<
	gT
>* 
˛⁄e
() {

635 * 
	gwhîe
 = 
my_Æloˇt‹_ty≥
().
Æloˇã
(1);

636  
√w
(
whîe
Ë
ˇŒback_Àaf
(*
this
);

639  
de°roy
() {

640 
my_Æloˇt‹_ty≥
().
de°roy
(
this
);

641 
my_Æloˇt‹_ty≥
().
dóŒoˇã
(
this
,1);

644  
c⁄°ru˘
(* 
whîe
) {

645 
	gC⁄°ru˘‹
::
c⁄°ru˘
(
whîe
);

647 
	gpublic
:

648 
ãm∂©e
<
ty≥«me
 
X
>

649 
ˇŒback_ba£
<
T
>* 
make
–c⁄° 
X
& 
x
 ) {

650 * 
whîe
 = 
my_Æloˇt‹_ty≥
().
Æloˇã
(1);

651  
√w
(
whîe
Ë
ˇŒback_Àaf
(
x
);

661 
	gãm∂©e
<
ty≥«me
 
	gU
, 
size_t
 
	gModuœrSize
>

662 
	sës_ñemít
 {

663 
ës_ñemít
() { }

664 
	gvÆue
[
ModuœrSize
==0 ? (
U
Ë: (U)+(
tbb
::
öã∫Æ
::
NFS_MaxLöeSize
-ModularSize)];

665 
unc⁄°ru˘
() {

666 
	gtbb
::
öã∫Æ
::
pu¬ed_ˇ°
<
U
*>(&
vÆue
)->~U();

693 
	gãm∂©e
 <
ty≥«me
 
	gT
,

694 
ty≥«me
 
	gAŒoˇt‹
=
ˇche_Æig√d_Æloˇt‹
<
T
>,

695 
ës_key_ußge_ty≥
 
	gETS_key_ty≥
=
ës_no_key
 >

696 
˛ass
 
íumîabÀ_thªad_•ecific
: 
öã∫Æ
::
ës_ba£
<
ETS_key_ty≥
> {

698 
ãm∂©e
<
ty≥«me
 
U
,Åy≥«mê
A
, 
ës_key_ußge_ty≥
 
C
> 
‰õnd
 
˛ass
 
íumîabÀ_thªad_•ecific
;

700 
	göã∫Æ
::
	tës_ñemít
<
	tT
,(T)%
	ttbb
::
	töã∫Æ
::
	tNFS_MaxLöeSize
> 
	t∑dded_ñemít
;

703 
	gãm∂©e
<
ty≥«me
 
	gI
>

704 
˛ass
 
	ggíîic_ønge_ty≥
: 
public
 
blocked_ønge
<
I
> {

705 
public
:

706 
T
 
	tvÆue_ty≥
;

707 
	gT
& 
	tª„ªn˚
;

708 c⁄° 
	tT
& 
	tc⁄°_ª„ªn˚
;

709 
I
 
	tôî©‹
;

710 
±rdiff_t
 
	tdif„ªn˚_ty≥
;

711 
gíîic_ønge_ty≥
–
I
 
begö_
, I 
íd_
, 
size_t
 
gøösize_
 = 1Ë: 
blocked_ønge
<I>(begö_,
	gíd_
,
	ggøösize_
) {}

712 
	gãm∂©e
<
ty≥«me
 
	gU
>

713 
gíîic_ønge_ty≥
–c⁄° gíîic_ønge_ty≥<
U
>& 
r
Ë: 
blocked_ønge
<
I
>‘.
begö
(),
	gr
.
íd
(),r.
gøösize
()) {}

714 
gíîic_ønge_ty≥
–gíîic_ønge_ty≥& 
r
, 
•lô
 ) : 
blocked_ønge
<
I
>(r,split()) {}

717 
ty≥«me
 
	tAŒoˇt‹
::
	tãm∂©e
 
	tªböd
< 
	t∑dded_ñemít
 >::
	tŸhî
 
	t∑dded_Æloˇt‹_ty≥
;

718 
	gtbb
::
	tc⁄cuºít_ve˘‹
< 
	t∑dded_ñemít
, 
	t∑dded_Æloˇt‹_ty≥
 > 
	töã∫Æ_cﬁÀ˘i⁄_ty≥
;

720 
	göã∫Æ
::
ˇŒback_ba£
<
T
> *
my_c⁄°ru˘_ˇŒback
;

722 
öã∫Æ_cﬁÀ˘i⁄_ty≥
 
	gmy_loˇls
;

724  * 
¸óã_loˇl
() {

725 * 
	gÃef
 = &*
my_loˇls
.
grow_by
(1);

726 
	gmy_c⁄°ru˘_ˇŒback
->
c⁄°ru˘
(
Ãef
);

727  
	gÃef
;

730 
unc⁄°ru˘_loˇls
() {

731 
ty≥«me
 
	göã∫Æ_cﬁÀ˘i⁄_ty≥
::
ôî©‹
 
cvi
 = 
my_loˇls
.
begö
(); 
	gcvi
 !my_loˇls.
íd
(); ++cvi) {

732 
	gcvi
->
unc⁄°ru˘
();

736 
ty≥«me
 
	tAŒoˇt‹
::
	tãm∂©e
 
	tªböd
< 
	tuöçå_t
 >::
	tŸhî
 
	t¨øy_Æloˇt‹_ty≥
;

739  * 
¸óã_¨øy
(
size_t
 
_size
) {

740 
size_t
 
	g√Àmíts
 = (
_size
 + (
uöçå_t
) -1) / (uintptr_t);

741  
¨øy_Æloˇt‹_ty≥
().
Æloˇã
(
√Àmíts
);

744  
‰ì_¨øy
–* 
_±r
, 
size_t
 
_size
) {

745 
size_t
 
	g√Àmíts
 = (
_size
 + (
uöçå_t
) -1) / (uintptr_t);

746 
¨øy_Æloˇt‹_ty≥
().
dóŒoˇã
–
ªöãΩªt_ˇ°
<
uöçå_t
 *>(
_±r
),
√Àmíts
);

749 
	gpublic
:

752 
AŒoˇt‹
 
	tÆloˇt‹_ty≥
;

753 
T
 
	tvÆue_ty≥
;

754 
	gT
& 
	tª„ªn˚
;

755 c⁄° 
	tT
& 
	tc⁄°_ª„ªn˚
;

756 
T
* 
	tpoöãr
;

757 c⁄° 
	tT
* 
	tc⁄°_poöãr
;

758 
ty≥«me
 
	töã∫Æ_cﬁÀ˘i⁄_ty≥
::
	tsize_ty≥
 size_type;

759 
ty≥«me
 
	töã∫Æ_cﬁÀ˘i⁄_ty≥
::
	tdif„ªn˚_ty≥
 difference_type;

762 
ty≥«me
 
	töã∫Æ
::
	tíumîabÀ_thªad_•ecific_ôî©‹
< 
	töã∫Æ_cﬁÀ˘i⁄_ty≥
, 
	tvÆue_ty≥
 > 
	tôî©‹
;

763 
ty≥«me
 
	töã∫Æ
::
	tíumîabÀ_thªad_•ecific_ôî©‹
< 
	töã∫Æ_cﬁÀ˘i⁄_ty≥
, c⁄° 
	tvÆue_ty≥
 > 
	tc⁄°_ôî©‹
;

766 
	ggíîic_ønge_ty≥
< 
	tôî©‹
 > 
	tønge_ty≥
;

767 
	ggíîic_ønge_ty≥
< 
	tc⁄°_ôî©‹
 > 
	tc⁄°_ønge_ty≥
;

770 
íumîabÀ_thªad_•ecific
() :

771 
my_c⁄°ru˘_ˇŒback
–
öã∫Æ
::
ˇŒback_Àaf
<
T
,öã∫Æ::
c⁄°ru˘_by_deÁu…
<T> >::
make
( 0) )

775 
ãm∂©e
 <
ty≥«me
 
Föô
>

776 
íumîabÀ_thªad_•ecific
–
Föô
 
föô
 ) :

777 
my_c⁄°ru˘_ˇŒback
–
öã∫Æ
::
ˇŒback_Àaf
<
T
,öã∫Æ::
c⁄°ru˘_by_föô
<T,
Föô
> >::
make
–
föô
 ) )

781 
íumîabÀ_thªad_•ecific
(c⁄° 
T
& 
exem∂¨
) :

782 
my_c⁄°ru˘_ˇŒback
–
öã∫Æ
::
ˇŒback_Àaf
<
T
,öã∫Æ::
c⁄°ru˘_by_exem∂¨
<T> >::
make
–
exem∂¨
 ) )

786 ~
íumîabÀ_thªad_•ecific
() {

787 
my_c⁄°ru˘_ˇŒback
->
de°roy
();

788 
	gthis
->
˛ór
();

793 
ª„ªn˚
 
loˇl
() {

794 
boﬁ
 
	gexi°s
;

795  
loˇl
(
exi°s
);

799 
ª„ªn˚
 
loˇl
(
boﬁ
& 
exi°s
) {

800 * 
	g±r
 = 
this
->
èbÀ_lookup
(
exi°s
);

801  *(
	gT
*)
	g±r
;

805 
size_ty≥
 
size
(Ëc⁄° {  
	gmy_loˇls
.size(); }

808 
boﬁ
 
em±y
(Ëc⁄° {  
	gmy_loˇls
.empty(); }

811 
ôî©‹
 
begö
(Ë{  iãøt‹–
my_loˇls
, 0 ); }

813 
ôî©‹
 
íd
(Ë{  iãøt‹(
my_loˇls
, my_loˇls.
size
() ); }

816 
c⁄°_ôî©‹
 
begö
(Ëc⁄° {  c⁄°_ôî©‹(
my_loˇls
, 0); }

819 
c⁄°_ôî©‹
 
íd
(Ëc⁄° {  c⁄°_ôî©‹(
my_loˇls
, my_loˇls.
size
()); }

822 
ønge_ty≥
 
ønge
–
size_t
 
gøösize
=1 ) { Ñ™ge_ty≥–
begö
(), 
íd
(), grainsize ); }

825 
c⁄°_ønge_ty≥
 
ønge
–
size_t
 
gøösize
=1 ) c⁄° {  c⁄°_ønge_ty≥–
begö
(), 
íd
(), grainsize ); }

828 
˛ór
() {

829 
unc⁄°ru˘_loˇls
();

830 
	gmy_loˇls
.
˛ór
();

831 
	gthis
->
èbÀ_˛ór
();

836 
	g¥iv©e
:

838 
ãm∂©e
<
ty≥«me
 
U
,Åy≥«mê
	gA2
, 
ës_key_ußge_ty≥
 
	gC2
>

839 
öã∫Æ_c›y
–c⁄° 
íumîabÀ_thªad_•ecific
<
U
, 
A2
, 
C2
>& 
Ÿhî
);

841 
	gpublic
:

843 
ãm∂©e
<
ty≥«me
 
U
,Åy≥«mê
	gAŒoc
, 
ës_key_ußge_ty≥
 
	gCachëy≥
>

844 
íumîabÀ_thªad_•ecific
–c⁄°ÉnumîabÀ_thªad_•ecific<
U
, 
AŒoc
, 
Cachëy≥
>& 
Ÿhî
 ) : 
öã∫Æ
::
ës_ba£
<
ETS_key_ty≥
> ()

846 
öã∫Æ_c›y
(
Ÿhî
);

849 
íumîabÀ_thªad_•ecific
–c⁄°ÉnumîabÀ_thªad_•ecific& 
Ÿhî
 ) : 
öã∫Æ
::
ës_ba£
<
ETS_key_ty≥
> ()

851 
öã∫Æ_c›y
(
Ÿhî
);

854 
	g¥iv©e
:

856 
ãm∂©e
<
ty≥«me
 
U
,Åy≥«mê
	gA2
, 
ës_key_ußge_ty≥
 
	gC2
>

857 
	gíumîabÀ_thªad_•ecific
 &

858 
öã∫Æ_assign
(c⁄° 
íumîabÀ_thªad_•ecific
<
U
, 
A2
, 
C2
>& 
Ÿhî
) {

859 if(
	g°©ic_ˇ°
<*>–
	gthis
 ) !
°©ic_ˇ°
<c⁄° *>–&
Ÿhî
 )) {

860 
this
->
˛ór
();

861 
	gmy_c⁄°ru˘_ˇŒback
->
de°roy
();

862 
	gmy_c⁄°ru˘_ˇŒback
 = 0;

863 
öã∫Æ_c›y
–
Ÿhî
 );

865  *
	gthis
;

868 
	gpublic
:

871 
íumîabÀ_thªad_•ecific
& 
›î©‹
=(c⁄°ÉnumîabÀ_thªad_•ecific& 
Ÿhî
) {

872  
öã∫Æ_assign
(
Ÿhî
);

875 
	gãm∂©e
<
ty≥«me
 
	gU
,Åy≥«mê
	gAŒoc
, 
ës_key_ußge_ty≥
 
	gCachëy≥
>

876 
	gíumîabÀ_thªad_•ecific
& 
	g›î©‹
=(c⁄° 
íumîabÀ_thªad_•ecific
<
U
, 
	gAŒoc
, 
	gCachëy≥
>& 
	gŸhî
)

878  
öã∫Æ_assign
(
Ÿhî
);

882 
	gãm∂©e
 <
ty≥«me
 
	gcomböe_func_t
>

883 
T
 
comböe
(
comböe_func_t
 
f_comböe
) {

884 if(
begö
(Ë=
íd
()) {

885 
öã∫Æ
::
de°ru˘_⁄ly
<
T
> 
loˇti⁄
;

886 
	gmy_c⁄°ru˘_ˇŒback
->
c⁄°ru˘
(
loˇti⁄
.
vÆue
.
begö
());

887  *
	gloˇti⁄
.
	gvÆue
.
begö
();

889 
c⁄°_ôî©‹
 
	gci
 = 
begö
();

890 
T
 
	gmy_ªsu…
 = *
ci
;

891 ++
	gci
 !
íd
())

892 
my_ªsu…
 = 
f_comböe
–my_ªsu…, *
ci
 );

893  
	gmy_ªsu…
;

897 
	gãm∂©e
 <
ty≥«me
 
	gcomböe_func_t
>

898 
comböe_óch
(
comböe_func_t
 
f_comböe
) {

899 
c⁄°_ôî©‹
 
	gci
 = 
begö
(); cò!
íd
(); ++ci) {

900 
f_comböe
–*
ci
 );

906 
	gãm∂©e
 <
ty≥«me
 
	gT
,Åy≥«mê
	gAŒoˇt‹
, 
ës_key_ußge_ty≥
 
	gETS_key_ty≥
>

907 
	gãm∂©e
<
ty≥«me
 
	gU
,Åy≥«mê
	gA2
, 
ës_key_ußge_ty≥
 
	gC2
>

908 
	gíumîabÀ_thªad_•ecific
<
	gT
,
	gAŒoˇt‹
,
	gETS_key_ty≥
>::
öã∫Æ_c›y
–c⁄° 
íumîabÀ_thªad_•ecific
<
U
, 
A2
, 
C2
>& 
Ÿhî
) {

910 
	gmy_c⁄°ru˘_ˇŒback
 = 
Ÿhî
.
my_c⁄°ru˘_ˇŒback
->
˛⁄e
();

912 
	göã∫Æ
::
	tës_ba£
<
	tës_no_key
> 
	tba£
;

913 
__TBB_ASSERT
(
my_loˇls
.
size
()==0,
NULL
);

914 
	gthis
->
èbÀ_ª£rve_f‹_c›y
–
Ÿhî
 );

915  
	gba£
::
¨øy
* 
r
=
Ÿhî
.
my_roŸ
; 
	gr
;ÑÙ->
√xt
 ) {

916  
size_t
 
i
=0; 
	gi
<
	gr
->
size
(); ++i ) {

917 
	gba£
::
¶Ÿ
& 
s1
 = 
r
->
©
(
i
);

918 if–!
	gs1
.
em±y
() ) {

919 
	gba£
::
¶Ÿ
& 
s2
 = 
this
->
èbÀ_föd
(
s1
.
key
);

920 if–
	gs2
.
em±y
() ) {

921 * 
	gÃef
 = &*
my_loˇls
.
grow_by
(1);

922 
	gs2
.
	g±r
 = 
√w
(
Ãef
Ë
T
(*(
U
*)
s1
.
±r
);

923 
	gs2
.
	gkey
 = 
s1
.
key
;

932 
	gãm∂©e
< 
ty≥«me
 
	gC⁄èöî
 >

933 ˛as†
	cÊ©ã√d2d
 {

936 
ty≥«me
 
	tC⁄èöî
::
	tvÆue_ty≥
 
	tc⁄vÆ_ty≥
;

938 
	gpublic
:

941 
ty≥«me
 
	tc⁄vÆ_ty≥
::
	tsize_ty≥
 size_type;

942 
ty≥«me
 
	tc⁄vÆ_ty≥
::
	tdif„ªn˚_ty≥
 difference_type;

943 
ty≥«me
 
	tc⁄vÆ_ty≥
::
	tÆloˇt‹_ty≥
állocator_type;

944 
ty≥«me
 
	tc⁄vÆ_ty≥
::
	tvÆue_ty≥
 value_type;

945 
ty≥«me
 
	tc⁄vÆ_ty≥
::
	tª„ªn˚
Ñeference;

946 
ty≥«me
 
	tc⁄vÆ_ty≥
::
	tc⁄°_ª„ªn˚
 const_reference;

947 
ty≥«me
 
	tc⁄vÆ_ty≥
::
	tpoöãr
Öointer;

948 
ty≥«me
 
	tc⁄vÆ_ty≥
::
	tc⁄°_poöãr
 const_pointer;

950 
ty≥«me
 
	töã∫Æ
::
	t£gmíãd_ôî©‹
<
	tC⁄èöî
, 
	tvÆue_ty≥
> 
	tôî©‹
;

951 
ty≥«me
 
	töã∫Æ
::
	t£gmíãd_ôî©‹
<
	tC⁄èöî
, c⁄° 
	tvÆue_ty≥
> 
	tc⁄°_ôî©‹
;

953 
Ê©ã√d2d
–c⁄° 
C⁄èöî
 &
c
, 
ty≥«me
 C⁄èöî::
c⁄°_ôî©‹
 
b
,Åy≥«mêC⁄èöî::c⁄°_ôî©‹ 
e
 ) :

954 
my_c⁄èöî
(
c⁄°_ˇ°
<
C⁄èöî
*>(&
c
)), 
my_begö
(
b
), 
my_íd
(
e
) { }

956 
Ê©ã√d2d
–c⁄° 
C⁄èöî
 &
c
 ) :

957 
my_c⁄èöî
(
c⁄°_ˇ°
<
C⁄èöî
*>(&
c
)), 
my_begö
(c.
begö
()), 
my_íd
(c.
íd
()) { }

959 
ôî©‹
 
begö
(Ë{  iãøt‹(*
my_c⁄èöî
Ë
my_begö
; }

960 
ôî©‹
 
íd
(Ë{  iãøt‹(*
my_c⁄èöî
Ë
my_íd
; }

961 
c⁄°_ôî©‹
 
begö
(Ëc⁄° {  c⁄°_ôî©‹(*
my_c⁄èöî
Ë
my_begö
; }

962 
c⁄°_ôî©‹
 
íd
(Ëc⁄° {  c⁄°_ôî©‹(*
my_c⁄èöî
Ë
my_íd
; }

964 
size_ty≥
 
size
() const {

965 
size_ty≥
 
	gtŸ_size
 = 0;

966 
ty≥«me
 
	gC⁄èöî
::
c⁄°_ôî©‹
 
i
 = 
my_begö
; 
	gi
 !
my_íd
; ++i) {

967 
	gtŸ_size
 +
i
->
size
();

969  
	gtŸ_size
;

972 
	g¥iv©e
:

974 
C⁄èöî
 *
my_c⁄èöî
;

975 
ty≥«me
 
	gC⁄èöî
::
c⁄°_ôî©‹
 
my_begö
;

976 
ty≥«me
 
	gC⁄èöî
::
c⁄°_ôî©‹
 
my_íd
;

980 
	gãm∂©e
 <
ty≥«me
 
	gC⁄èöî
>

981 
	gÊ©ã√d2d
<
	gC⁄èöî
> 
Ê©ãn2d
(c⁄° 
C⁄èöî
 &
c
, c⁄° 
ty≥«me
 C⁄èöî::
c⁄°_ôî©‹
 
b
, c⁄°Åy≥«mêC⁄èöî::c⁄°_ôî©‹ 
e
) {

982  
Ê©ã√d2d
<
C⁄èöî
>(
c
, 
	gb
, 
	ge
);

985 
	gãm∂©e
 <
ty≥«me
 
	gC⁄èöî
>

986 
	gÊ©ã√d2d
<
	gC⁄èöî
> 
Ê©ãn2d
(c⁄° 
C⁄èöî
 &
c
) {

987  
	gÊ©ã√d2d
<
	gC⁄èöî
>(
	gc
);

992 
«me•a˚
 
	göã∫Æ
 {

993 
usög
 
	göãrÁ˚6
::
öã∫Æ
::
£gmíãd_ôî©‹
;

996 
usög
 
	göãrÁ˚6
::
íumîabÀ_thªad_•ecific
;

997 
usög
 
	göãrÁ˚6
::
Ê©ã√d2d
;

998 
usög
 
	göãrÁ˚6
::
Ê©ãn2d
;

	@viper/concurrentqueue-src/benchmarks/tbb/flow_graph.h

21 #i‚de‡
__TBB_Êow_gøph_H


22 
	#__TBB_Êow_gøph_H


	)

24 
	~"tbb_°ddef.h
"

25 
	~"©omic.h
"

26 
	~"•ö_muãx.h
"

27 
	~"nuŒ_muãx.h
"

28 
	~"•ö_rw_muãx.h
"

29 
	~"nuŒ_rw_muãx.h
"

30 
	~"èsk.h
"

31 
	~"ˇche_Æig√d_Æloˇt‹.h
"

32 
	~"tbb_ex˚±i⁄.h
"

33 
	~"öã∫Æ/_aggªg©‹_im∂.h
"

34 
	~"tbb_¥ofûög.h
"

36 #i‡
TBB_DEPRECATED_FLOW_ENQUEUE


37 
	#FLOW_SPAWN
(
a
Ë
tbb
::
èsk
::
	`íqueue
(◊))

	)

39 
	#FLOW_SPAWN
(
a
Ë
tbb
::
èsk
::
	`•awn
(◊))

	)

43 #i‡
__TBB_CPP11_TUPLE_PRESENT


44 
	~<tu∂e
>

45 
«me•a˚
 
	gtbb
 {

46 
«me•a˚
 
	gÊow
 {

47 
usög
 
	g°d
::
tu∂e
;

48 
usög
 
	g°d
::
tu∂e_size
;

49 
usög
 
	g°d
::
tu∂e_ñemít
;

50 
usög
 
	g°d
::
gë
;

54 
	~"com∑t/tu∂e
"

57 
	~<li°
>

58 
	~<queue
>

70 
«me•a˚
 
	gtbb
 {

71 
«me•a˚
 
	gÊow
 {

74 
	ec⁄cuºícy
 { 
	gu∆imôed
 = 0, 
	g£rül
 = 1 };

76 
«me•a˚
 
	göãrÁ˚7
 {

78 
«me•a˚
 
	göã∫Æ
 {

79 
	gãm∂©e
<
ty≥«me
 
	gT
,Åy≥«mê
	gM
> 
˛ass
 
	gsuc˚ss‹_ˇche
;

80 
	gãm∂©e
<
ty≥«me
 
	gT
,Åy≥«mê
	gM
> 
˛ass
 
	gbrﬂdˇ°_ˇche
;

81 
	gãm∂©e
<
ty≥«me
 
	gT
,Åy≥«mê
	gM
> 
˛ass
 
	ground_robö_ˇche
;

85 ˛as†
	cc⁄töue_msg
 {};

87 
	gãm∂©e
< 
ty≥«me
 
	gT
 > 
˛ass
 
	g£ndî
;

88 
	gãm∂©e
< 
ty≥«me
 
	gT
 > 
˛ass
 
	gª˚ivî
;

89 
˛ass
 
	gc⁄töue_ª˚ivî
;

92 
	gãm∂©e
< 
ty≥«me
 
	gT
 >

93 ˛as†
	c£ndî
 {

94 
	gpublic
:

96 
T
 
	touçut_ty≥
;

99 
	gª˚ivî
<
	tT
> 
	tsuc˚ss‹_ty≥
;

101 
	gvútuÆ
 ~
£ndî
() {}

104 
vútuÆ
 
boﬁ
 
ªgi°î_suc˚ss‹
–
suc˚ss‹_ty≥
 &
r
 ) = 0;

107 
vútuÆ
 
boﬁ
 
ªmove_suc˚ss‹
–
suc˚ss‹_ty≥
 &
r
 ) = 0;

110 
vútuÆ
 
boﬁ
 
åy_gë
–
T
 & ) {  
	gÁl£
; }

113 
vútuÆ
 
boﬁ
 
åy_ª£rve
–
T
 & ) {  
	gÁl£
; }

116 
vútuÆ
 
boﬁ
 
åy_ªÀa£
–Ë{  
	gÁl£
; }

119 
vútuÆ
 
boﬁ
 
åy_c⁄sume
–Ë{  
	gÁl£
; }

121 #i‡
TBB_PREVIEW_FLOW_GRAPH_FEATURES


123 
vútuÆ
 
öã∫Æ_add_buût_suc˚ss‹
–
suc˚ss‹_ty≥
 & ) = 0;

124 
vútuÆ
 
öã∫Æ_dñëe_buût_suc˚ss‹
–
suc˚ss‹_ty≥
 & ) = 0;

125 
vútuÆ
 
c›y_suc˚ss‹s
–
°d
::
ve˘‹
<
suc˚ss‹_ty≥
 *> &) = 0;

126 
vútuÆ
 
size_t
 
suc˚ss‹_cou¡
() = 0;

130 
	gãm∂©e
< 
ty≥«me
 
	gT
 > 
˛ass
 
	glimôî_node
;

131 
	gãm∂©e
< 
ty≥«me
 
	gR
,Åy≥«mê
	gB
 > 
˛ass
 
	grun_™d_put_èsk
;

133 
	gtbb
::
èsk
 * c⁄° 
SUCCESSFULLY_ENQUEUED
 = (task *)-1;

135 #i‡
TBB_PREVIEW_FLOW_GRAPH_FEATURES


137 
	eª£t_Êags
 {

138 
	grf_ª£t_¥Ÿocﬁ
 = 0,

139 
	grf_ª£t_bodõs
 = 1<<0,

140 
	grf_exåa˘
 = 1<<1

143 
	#__TBB_PFG_RESET_ARG
(
exp
Ë
	)
exp

144 
	#__TBB_COMMA
 ,

	)

146 
	#__TBB_PFG_RESET_ARG
(
exp
Ë

	)

147 
	#__TBB_COMMA


	)

151 
ölöe
 
	gtbb
::
èsk
 *
comböe_èsks
–
tbb
::èsk * 
À·
,Åbb::èsk * 
right
) {

153 if(
right
 =
NULL
Ë 
À·
;

155 if(
	gÀ·
 =
NULL
Ë 
right
;

156 if(
	gÀ·
 =
SUCCESSFULLY_ENQUEUED
Ë 
right
;

158 if(
	gright
 !
SUCCESSFULLY_ENQUEUED
) {

160 
FLOW_SPAWN
(*
À·
);

161  
	gright
;

163  
	gÀ·
;

167 
	gãm∂©e
< 
ty≥«me
 
	gT
 >

168 ˛as†
	cª˚ivî
 {

169 
	gpublic
:

171 
T
 
	töput_ty≥
;

174 
	g£ndî
<
	tT
> 
	t¥ede˚ss‹_ty≥
;

177 
	gvútuÆ
 ~
ª˚ivî
() {}

180 
boﬁ
 
åy_put
–c⁄° 
T
& 
t
 ) {

181 
èsk
 *
	gªs
 = 
åy_put_èsk
(
t
);

182 if(!
	gªs
Ë 
	gÁl£
;

183 i‡(
	gªs
 !
SUCCESSFULLY_ENQUEUED
Ë
FLOW_SPAWN
(*
ªs
);

184  
	gåue
;

188 
	g¥Ÿe˘ed
:

189 
ãm∂©e
< 
ty≥«me
 
R
,Åy≥«mê
	gB
 > 
‰õnd
 
˛ass
 
	grun_™d_put_èsk
;

190 
	gãm∂©e
<
ty≥«me
 
	gX
,Åy≥«mê
	gY
> 
‰õnd
 
˛ass
 
	göã∫Æ
::
brﬂdˇ°_ˇche
;

191 
	gãm∂©e
<
ty≥«me
 
	gX
,Åy≥«mê
	gY
> 
‰õnd
 
˛ass
 
	göã∫Æ
::
round_robö_ˇche
;

192 
vútuÆ
 
èsk
 *
åy_put_èsk
(c⁄° 
T
& 
t
) = 0;

193 
	gpublic
:

196 
vútuÆ
 
boﬁ
 
ªgi°î_¥ede˚ss‹
–
¥ede˚ss‹_ty≥
 & ) {  
Ál£
; }

199 
vútuÆ
 
boﬁ
 
ªmove_¥ede˚ss‹
–
¥ede˚ss‹_ty≥
 & ) {  
	gÁl£
; }

201 #i‡
TBB_PREVIEW_FLOW_GRAPH_FEATURES


202 
vútuÆ
 
öã∫Æ_add_buût_¥ede˚ss‹
–
¥ede˚ss‹_ty≥
 & ) = 0;

203 
vútuÆ
 
öã∫Æ_dñëe_buût_¥ede˚ss‹
–
¥ede˚ss‹_ty≥
 & ) = 0;

204 
vútuÆ
 
c›y_¥ede˚ss‹s
–
°d
::
ve˘‹
<
¥ede˚ss‹_ty≥
 *> & ) = 0;

205 
vútuÆ
 
size_t
 
¥ede˚ss‹_cou¡
() = 0;

208 
	g¥Ÿe˘ed
:

210 
ãm∂©e
<
ty≥«me
 
U
> 
‰õnd
 
˛ass
 
limôî_node
;

211 
vútuÆ
 
ª£t_ª˚ivî
(
__TBB_PFG_RESET_ARG
(
ª£t_Êags
 
f
 = 
rf_ª£t_¥Ÿocﬁ
 ) ) = 0;

213 
	gãm∂©e
<
ty≥«me
 
	gTT
,Åy≥«mê
	gM
>

214 
‰õnd
 
˛ass
 
	göã∫Æ
::
suc˚ss‹_ˇche
;

215 
vútuÆ
 
boﬁ
 
is_c⁄töue_ª˚ivî
(Ë{  
	gÁl£
; }

218 #i‡
TBB_PREVIEW_FLOW_GRAPH_FEATURES


221 
	gãm∂©e
<
ty≥«me
 
	gC
>

222 ˛as†
	cedge_c⁄èöî
 {

224 
	gpublic
:

225 
°d
::
	tve˘‹
<
	tC
 *> 
	tedge_ve˘‹
;

227 
add_edge
–
C
 &
s
) {

228 
	gbuût_edges
.
push_back
–&
s
 );

231 
dñëe_edge
–
C
 &
s
) {

232  
ty≥«me
 
	gedge_ve˘‹
::
ôî©‹
 
i
 = 
buût_edges
.
begö
(); 
	gi
 !buût_edges.
íd
(); ++i ) {

233 i‡–*
	gi
 =&
s
 ) {

234 ()
buût_edges
.
îa£
(
i
);

240 
c›y_edges
–
edge_ve˘‹
 &
v
) {

241 
	gv
 = 
buût_edges
;

244 
size_t
 
edge_cou¡
() {

245  (
	gsize_t
)(
	gbuût_edges
.
size
());

248 
˛ór
() {

249 
	gbuût_edges
.
˛ór
();

252 
	gãm∂©e
< 
ty≥«me
 
	gS
 > 
£ndî_exåa˘
–
S
 &
s
 );

253 
	gãm∂©e
< 
ty≥«me
 
	gR
 > 
ª˚ivî_exåa˘
–
R
 &
r
 );

255 
	g¥iv©e
:

256 
edge_ve˘‹
 
buût_edges
;

262 
˛ass
 
	gc⁄töue_ª˚ivî
 : 
public
 
ª˚ivî
< 
c⁄töue_msg
 > {

263 
public
:

266 
c⁄töue_msg
 
	töput_ty≥
;

269 
	g£ndî
< 
	tc⁄töue_msg
 > 
	t¥ede˚ss‹_ty≥
;

272 
c⁄töue_ª˚ivî
–
numbî_of_¥ede˚ss‹s
 = 0 ) {

273 
my_¥ede˚ss‹_cou¡
 = 
my_öôül_¥ede˚ss‹_cou¡
 = 
numbî_of_¥ede˚ss‹s
;

274 
	gmy_cuºít_cou¡
 = 0;

278 
c⁄töue_ª˚ivî
–c⁄° c⁄töue_ª˚ivî& 
§c
 ) : 
ª˚ivî
<
c⁄töue_msg
>() {

279 
my_¥ede˚ss‹_cou¡
 = 
my_öôül_¥ede˚ss‹_cou¡
 = 
§c
.my_initial_predecessor_count;

280 
	gmy_cuºít_cou¡
 = 0;

284 
	gvútuÆ
 ~
c⁄töue_ª˚ivî
() { }

287  
boﬁ
 
ªgi°î_¥ede˚ss‹
–
¥ede˚ss‹_ty≥
 & ) {

288 
	g•ö_muãx
::
sc›ed_lock
 
l
(
my_muãx
);

289 ++
	gmy_¥ede˚ss‹_cou¡
;

290  
	gåue
;

297  
boﬁ
 
ªmove_¥ede˚ss‹
–
¥ede˚ss‹_ty≥
 & ) {

298 
	g•ö_muãx
::
sc›ed_lock
 
l
(
my_muãx
);

299 --
	gmy_¥ede˚ss‹_cou¡
;

300  
	gåue
;

303 #i‡
TBB_PREVIEW_FLOW_GRAPH_FEATURES


304 
	g°d
::
	tve˘‹
<
	t¥ede˚ss‹_ty≥
 *> 
	t¥ede˚ss‹_ve˘‹_ty≥
;

306  
öã∫Æ_add_buût_¥ede˚ss‹
–
¥ede˚ss‹_ty≥
 &
s
) {

307 
	g•ö_muãx
::
sc›ed_lock
 
l
(
my_muãx
);

308 
	gmy_buût_¥ede˚ss‹s
.
add_edge
–
s
 );

311  
öã∫Æ_dñëe_buût_¥ede˚ss‹
–
¥ede˚ss‹_ty≥
 &
s
) {

312 
	g•ö_muãx
::
sc›ed_lock
 
l
(
my_muãx
);

313 
	gmy_buût_¥ede˚ss‹s
.
dñëe_edge
(
s
);

316  
c›y_¥ede˚ss‹s
–
¥ede˚ss‹_ve˘‹_ty≥
 &
v
) {

317 
	g•ö_muãx
::
sc›ed_lock
 
l
(
my_muãx
);

318 
	gmy_buût_¥ede˚ss‹s
.
c›y_edges
(
v
);

321  
size_t
 
¥ede˚ss‹_cou¡
() {

322 
	g•ö_muãx
::
sc›ed_lock
 
l
(
my_muãx
);

323  
	gmy_buût_¥ede˚ss‹s
.
edge_cou¡
();

327 
	g¥Ÿe˘ed
:

328 
ãm∂©e
< 
ty≥«me
 
R
,Åy≥«mê
	gB
 > 
‰õnd
 
˛ass
 
	grun_™d_put_èsk
;

329 
	gãm∂©e
<
ty≥«me
 
	gX
,Åy≥«mê
	gY
> 
‰õnd
 
˛ass
 
	göã∫Æ
::
brﬂdˇ°_ˇche
;

330 
	gãm∂©e
<
ty≥«me
 
	gX
,Åy≥«mê
	gY
> 
‰õnd
 
˛ass
 
	göã∫Æ
::
round_robö_ˇche
;

332  
èsk
 *
åy_put_èsk
–c⁄° 
öput_ty≥
 & ) {

334 
	g•ö_muãx
::
sc›ed_lock
 
l
(
my_muãx
);

335 i‡–++
	gmy_cuºít_cou¡
 < 
	gmy_¥ede˚ss‹_cou¡
 )

336  
	gSUCCESSFULLY_ENQUEUED
;

338 
	gmy_cuºít_cou¡
 = 0;

340 
èsk
 * 
	gªs
 = 
execuã
();

341 if(!
	gªs
Ë 
	gSUCCESSFULLY_ENQUEUED
;

342  
	gªs
;

345 #i‡
TBB_PREVIEW_FLOW_GRAPH_FEATURES


346 
	gedge_c⁄èöî
<
	g¥ede˚ss‹_ty≥
> 
	gmy_buût_¥ede˚ss‹s
;

348 
•ö_muãx
 
	gmy_muãx
;

349 
	gmy_¥ede˚ss‹_cou¡
;

350 
	gmy_cuºít_cou¡
;

351 
	gmy_öôül_¥ede˚ss‹_cou¡
;

354 
	gãm∂©e
<
ty≥«me
 
	gU
> 
‰õnd
 
˛ass
 
	glimôî_node
;

355  
ª£t_ª˚ivî
–
__TBB_PFG_RESET_ARG
(
ª£t_Êags
 
f
) )

357 
	gmy_cuºít_cou¡
 = 0;

358 #i‡
TBB_PREVIEW_FLOW_GRAPH_FEATURES


359 if(
	gf
 & 
	grf_exåa˘
) {

360 
	gmy_buût_¥ede˚ss‹s
.
ª˚ivî_exåa˘
(*
this
);

361 
	gmy_¥ede˚ss‹_cou¡
 = 
my_öôül_¥ede˚ss‹_cou¡
;

369 
vútuÆ
 
èsk
 * 
execuã
() = 0;

370 
	gãm∂©e
<
ty≥«me
 
	gTT
,Åy≥«mê
	gM
>

371 
‰õnd
 
˛ass
 
	göã∫Æ
::
suc˚ss‹_ˇche
;

372  
boﬁ
 
is_c⁄töue_ª˚ivî
(Ë{  
	gåue
; }

378 
	~"öã∫Æ/_Êow_gøph_åa˚_im∂.h
"

380 
«me•a˚
 
	gtbb
 {

381 
«me•a˚
 
	gÊow
 {

382 
«me•a˚
 
	göãrÁ˚7
 {

384 
	~"öã∫Æ/_Êow_gøph_ty≥s_im∂.h
"

385 
	~"öã∫Æ/_Êow_gøph_im∂.h
"

386 
usög
 
«me•a˚
 
	göã∫Æ
::
gøph_pﬁicy_«me•a˚
;

388 
˛ass
 
	ggøph
;

389 
˛ass
 
	ggøph_node
;

391 
	gãm∂©e
 <
ty≥«me
 
	gGøphC⁄èöîTy≥
,Åy≥«mê
	gGøphNodeTy≥
>

392 ˛as†
	cgøph_ôî©‹
 {

393 
‰õnd
 
˛ass
 
	ggøph
;

394 
‰õnd
 
˛ass
 
	ggøph_node
;

395 
	gpublic
:

396 
size_t
 
	tsize_ty≥
;

397 
GøphNodeTy≥
 
	tvÆue_ty≥
;

398 
GøphNodeTy≥
* 
	tpoöãr
;

399 
	gGøphNodeTy≥
& 
	tª„ªn˚
;

400 c⁄° 
	tGøphNodeTy≥
& 
	tc⁄°_ª„ªn˚
;

401 
	g°d
::
	tf‹w¨d_ôî©‹_èg
 
	tôî©‹_ˇãg‹y
;

404 
gøph_ôî©‹
(Ë: 
my_gøph
(
NULL
), 
cuºít_node
(NULL) {}

407 
gøph_ôî©‹
(c⁄° gøph_ôî©‹& 
Ÿhî
) :

408 
my_gøph
(
Ÿhî
.my_gøph), 
cuºít_node
(other.current_node)

412 
	ggøph_ôî©‹
& 
	g›î©‹
=(c⁄° 
gøph_ôî©‹
& 
Ÿhî
) {

413 i‡(
this
 !&
Ÿhî
) {

414 
my_gøph
 = 
Ÿhî
.my_graph;

415 
	gcuºít_node
 = 
Ÿhî
.
cuºít_node
;

417  *
	gthis
;

421 
ª„ªn˚
 
	g›î©‹
*() const;

424 
poöãr
 
	g›î©‹
->() const;

427 
boﬁ
 
	g›î©‹
==(c⁄° 
gøph_ôî©‹
& 
Ÿhî
) const {

428  ((
my_gøph
 =
Ÿhî
.my_gøphË&& (
cuºít_node
 == other.current_node));

432 
boﬁ
 
	g›î©‹
!=(c⁄° 
gøph_ôî©‹
& 
Ÿhî
Ëc⁄° {  !(
›î©‹
==(other)); }

435 
	ggøph_ôî©‹
& 
	g›î©‹
++() {

436 
öã∫Æ_f‹w¨d
();

437  *
	gthis
;

441 
gøph_ôî©‹
 
	g›î©‹
++() {

442 
gøph_ôî©‹
 
	gªsu…
 = *
this
;

443 
	g›î©‹
++();

444  
	gªsu…
;

447 
	g¥iv©e
:

449 
GøphC⁄èöîTy≥
 *
my_gøph
;

451 
poöãr
 
	gcuºít_node
;

454 
gøph_ôî©‹
(
GøphC⁄èöîTy≥
 *
g
, 
boﬁ
 
begö
);

455 
öã∫Æ_f‹w¨d
();

460 ˛as†
	cgøph
 : 
tbb
::
öã∫Æ
::
no_c›y
 {

461 
‰õnd
 
˛ass
 
gøph_node
;

463 
	gãm∂©e
< 
ty≥«me
 
	gBody
 >

464 ˛as†
	crun_èsk
 : 
public
 
èsk
 {

465 
public
:

466 
run_èsk
–
Body
& 
body
 ) : 
my_body
(body) {}

467 
èsk
 *
execuã
() {

468 
my_body
();

469  
	gNULL
;

471 
	g¥iv©e
:

472 
Body
 
my_body
;

475 
	gãm∂©e
< 
ty≥«me
 
	gRe˚ivî
,Åy≥«mê
	gBody
 >

476 ˛as†
	crun_™d_put_èsk
 : 
public
 
èsk
 {

477 
public
:

478 
run_™d_put_èsk
–
Re˚ivî
 &
r
, 
Body
& 
body
 ) : 
my_ª˚ivî
‘), 
my_body
(body) {}

479 
èsk
 *
execuã
() {

480 
èsk
 *
	gªs
 = 
my_ª˚ivî
.
åy_put_èsk
–
my_body
() );

481 if(
	gªs
 =
SUCCESSFULLY_ENQUEUED
Ë
ªs
 = 
NULL
;

482  
	gªs
;

484 
	g¥iv©e
:

485 
Re˚ivî
 &
my_ª˚ivî
;

486 
Body
 
	gmy_body
;

489 
	gpublic
:

491 
ex∂icô
 
gøph
(Ë: 
my_nodes
(
NULL
), 
my_nodes_œ°
(NULL)

493 
	gown_c⁄ãxt
 = 
åue
;

494 
	gˇn˚Œed
 = 
Ál£
;

495 
	gˇught_ex˚±i⁄
 = 
Ál£
;

496 
	gmy_c⁄ãxt
 = 
√w
 
èsk_group_c⁄ãxt
();

497 
	gmy_roŸ_èsk
 = ( 
√w
 ( 
èsk
::
Æloˇã_roŸ
(*
my_c⁄ãxt
ËË
em±y_èsk
 );

498 
	gmy_roŸ_èsk
->
£t_ªf_cou¡
(1);

499 
	gtbb
::
öã∫Æ
::
fgt_gøph
–
this
 );

500 #i‡
TBB_PREVIEW_FLOW_GRAPH_FEATURES


501 
	gmy_is_a˘ive
 = 
åue
;

506 
ex∂icô
 
gøph
(
èsk_group_c⁄ãxt
& 
u£_this_c⁄ãxt
) :

507 
my_c⁄ãxt
(&
u£_this_c⁄ãxt
), 
my_nodes
(
NULL
), 
my_nodes_œ°
(NULL)

509 
	gown_c⁄ãxt
 = 
Ál£
;

510 
	gmy_roŸ_èsk
 = ( 
√w
 ( 
èsk
::
Æloˇã_roŸ
(*
my_c⁄ãxt
ËË
em±y_èsk
 );

511 
	gmy_roŸ_èsk
->
£t_ªf_cou¡
(1);

512 
	gtbb
::
öã∫Æ
::
fgt_gøph
–
this
 );

513 #i‡
TBB_PREVIEW_FLOW_GRAPH_FEATURES


514 
	gmy_is_a˘ive
 = 
åue
;

520 ~
gøph
() {

521 
waô_f‹_Æl
();

522 
	gmy_roŸ_èsk
->
£t_ªf_cou¡
(0);

523 
	gèsk
::
de°roy
–*
my_roŸ_èsk
 );

524 i‡(
	gown_c⁄ãxt
Ë
dñëe
 
	gmy_c⁄ãxt
;

527 #i‡
TBB_PREVIEW_FLOW_GRAPH_TRACE


528 
£t_«me
–c⁄° *
«me
 ) {

529 
	gtbb
::
öã∫Æ
::
fgt_gøph_desc
–
this
, 
«me
 );

536 
ö¸emít_waô_cou¡
() {

537 i‡(
	gmy_roŸ_èsk
)

538 
	gmy_roŸ_èsk
->
ö¸emít_ªf_cou¡
();

544 
de¸emít_waô_cou¡
() {

545 i‡(
	gmy_roŸ_èsk
)

546 
	gmy_roŸ_èsk
->
de¸emít_ªf_cou¡
();

552 
	gãm∂©e
< 
ty≥«me
 
	gRe˚ivî
,Åy≥«mê
	gBody
 >

553 
run
–
Re˚ivî
 &
r
, 
Body
 
body
 ) {

554 
FLOW_SPAWN
–(* 
√w
 ( 
èsk
::
Æloˇã_addôi⁄Æ_chûd_of
–*
my_roŸ_èsk
 ) )

555 
run_™d_put_èsk
< 
Re˚ivî
, 
Body
 >–
r
, 
body
 )) );

561 
	gãm∂©e
< 
ty≥«me
 
	gBody
 >

562 
run
–
Body
 
body
 ) {

563 
FLOW_SPAWN
–* 
√w
 ( 
èsk
::
Æloˇã_addôi⁄Æ_chûd_of
–*
my_roŸ_èsk
 ) ) 
run_èsk
< 
Body
 >–
body
 ) );

568 
waô_f‹_Æl
() {

569 
	gˇn˚Œed
 = 
Ál£
;

570 
	gˇught_ex˚±i⁄
 = 
Ál£
;

571 i‡(
	gmy_roŸ_èsk
) {

572 #i‡
TBB_USE_EXCEPTIONS


573 
	gåy
 {

575 
	gmy_roŸ_èsk
->
waô_f‹_Æl
();

576 
	gˇn˚Œed
 = 
my_c⁄ãxt
->
is_group_executi⁄_ˇn˚Œed
();

577 #i‡
TBB_USE_EXCEPTIONS


579 
ˇtch
(...) {

580 
	gmy_roŸ_èsk
->
£t_ªf_cou¡
(1);

581 
	gmy_c⁄ãxt
->
ª£t
();

582 
	gˇught_ex˚±i⁄
 = 
åue
;

583 
	gˇn˚Œed
 = 
åue
;

584 
	gthrow
;

587 
	gmy_c⁄ãxt
->
ª£t
();

588 
	gmy_roŸ_èsk
->
£t_ªf_cou¡
(1);

593 
èsk
 * 
roŸ_èsk
() {

594 #i‡
TBB_PREVIEW_FLOW_GRAPH_FEATURES


595 i‡(!
	gmy_is_a˘ive
)

596  
	gNULL
;

599  
	gmy_roŸ_èsk
;

602 #i‡
TBB_PREVIEW_FLOW_GRAPH_FEATURES


603 
£t_a˘ive
(
boﬁ
 
a
 = 
åue
) {

604 
my_is_a˘ive
 = 
a
;

607 
boﬁ
 
is_a˘ive
() {

608  
	gmy_is_a˘ive
;

613 
	gãm∂©e
<
ty≥«me
 
	gC
,Åy≥«mê
	gN
>

614 
‰õnd
 
˛ass
 
	ggøph_ôî©‹
;

617 
	ggøph_ôî©‹
<
	tgøph
,
	tgøph_node
> 
	tôî©‹
;

618 
	ggøph_ôî©‹
<c⁄° 
	tgøph
,c⁄° 
	tgøph_node
> 
	tc⁄°_ôî©‹
;

622 
ôî©‹
 
begö
(Ë{  iãøt‹(
this
, 
åue
); }

624 
ôî©‹
 
íd
(Ë{  iãøt‹(
this
, 
Ál£
); }

626 
c⁄°_ôî©‹
 
begö
(Ëc⁄° {  c⁄°_ôî©‹(
this
, 
åue
); }

628 
c⁄°_ôî©‹
 
íd
(Ëc⁄° {  c⁄°_ôî©‹(
this
, 
Ál£
); }

630 
c⁄°_ôî©‹
 
cbegö
(Ëc⁄° {  c⁄°_ôî©‹(
this
, 
åue
); }

632 
c⁄°_ôî©‹
 
˚nd
(Ëc⁄° {  c⁄°_ôî©‹(
this
, 
Ál£
); }

635 
boﬁ
 
is_ˇn˚Œed
(Ë{  
	gˇn˚Œed
; }

636 
boﬁ
 
ex˚±i⁄_thrown
(Ë{  
	gˇught_ex˚±i⁄
; }

639 
ª£t
(
__TBB_PFG_RESET_ARG
(
ª£t_Êags
 
f
 = 
rf_ª£t_¥Ÿocﬁ
));

641 
	g¥iv©e
:

642 
èsk
 *
my_roŸ_èsk
;

643 
èsk_group_c⁄ãxt
 *
	gmy_c⁄ãxt
;

644 
boﬁ
 
	gown_c⁄ãxt
;

645 
boﬁ
 
	gˇn˚Œed
;

646 
boﬁ
 
	gˇught_ex˚±i⁄
;

647 #i‡
TBB_PREVIEW_FLOW_GRAPH_FEATURES


648 
boﬁ
 
	gmy_is_a˘ive
;

652 
gøph_node
 *
	gmy_nodes
, *
	gmy_nodes_œ°
;

654 
•ö_muãx
 
	gnodñi°_muãx
;

655 
ªgi°î_node
(
gøph_node
 *
n
);

656 
ªmove_node
(
gøph_node
 *
n
);

660 
	gãm∂©e
 <
ty≥«me
 
	gC
,Åy≥«mê
	gN
>

661 
	ggøph_ôî©‹
<
	gC
,
	gN
>::
gøph_ôî©‹
(
C
 *
g
, 
boﬁ
 
begö
Ë: 
my_gøph
(g), 
cuºít_node
(
NULL
)

663 i‡(
	gbegö
Ë
	gcuºít_node
 = 
my_gøph
->
my_nodes
;

667 
	gãm∂©e
 <
ty≥«me
 
	gC
,Åy≥«mê
	gN
>

668 
ty≥«me
 
	ggøph_ôî©‹
<
	gC
,
	gN
>::
ª„ªn˚
 
gøph_ôî©‹
<
C
,N>::
›î©‹
*() const {

669 
__TBB_ASSERT
(
cuºít_node
, "graph_iteratorátÉnd");

670  *
	g›î©‹
->();

673 
	gãm∂©e
 <
ty≥«me
 
	gC
,Åy≥«mê
	gN
>

674 
ty≥«me
 
	ggøph_ôî©‹
<
	gC
,
	gN
>::
poöãr
 
gøph_ôî©‹
<
C
,N>::
›î©‹
->() const {

675  
cuºít_node
;

679 
	gãm∂©e
 <
ty≥«me
 
	gC
,Åy≥«mê
	gN
>

680 
	ggøph_ôî©‹
<
	gC
,
	gN
>::
öã∫Æ_f‹w¨d
() {

681 i‡(
cuºít_node
Ëcuºít_nodêcuºít_node->
√xt
;

685 ˛as†
	cgøph_node
 : 
tbb
::
öã∫Æ
::
no_assign
 {

686 
‰õnd
 
˛ass
 
gøph
;

687 
	gãm∂©e
<
ty≥«me
 
	gC
,Åy≥«mê
	gN
>

688 
‰õnd
 
˛ass
 
	ggøph_ôî©‹
;

689 
	g¥Ÿe˘ed
:

690 
gøph
& 
my_gøph
;

691 
gøph_node
 *
	g√xt
, *
	g¥ev
;

692 
	gpublic
:

693 
gøph_node
(
gøph
& 
g
Ë: 
my_gøph
(g) {

694 
my_gøph
.
ªgi°î_node
(
this
);

696 
	gvútuÆ
 ~
gøph_node
() {

697 
	gmy_gøph
.
ªmove_node
(
this
);

700 #i‡
TBB_PREVIEW_FLOW_GRAPH_TRACE


701 
vútuÆ
 
£t_«me
–c⁄° *
«me
 ) = 0;

704 #i‡
TBB_PREVIEW_FLOW_GRAPH_FEATURES


705 
vútuÆ
 
exåa˘
–
ª£t_Êags
 
f
=
rf_exåa˘
 ) {

706 
boﬁ
 
a
 = 
my_gøph
.
is_a˘ive
();

707 
	gmy_gøph
.
£t_a˘ive
(
Ál£
);

708 
ª£t
((
ª£t_Êags
)(
f
|
rf_exåa˘
));

709 
	gmy_gøph
.
£t_a˘ive
(
a
);

713 
	g¥Ÿe˘ed
:

714 
vútuÆ
 
ª£t
(
__TBB_PFG_RESET_ARG
(
ª£t_Êags
 
f
=
rf_ª£t_¥Ÿocﬁ
)) = 0;

717 
ölöe
 
	ggøph
::
ªgi°î_node
(
gøph_node
 *
n
) {

718 
n
->
√xt
 = 
NULL
;

720 
	g•ö_muãx
::
sc›ed_lock
 
lock
(
nodñi°_muãx
);

721 
	gn
->
	g¥ev
 = 
my_nodes_œ°
;

722 i‡(
	gmy_nodes_œ°
Ëmy_nodes_œ°->
	g√xt
 = 
n
;

723 
	gmy_nodes_œ°
 = 
n
;

724 i‡(!
	gmy_nodes
Ëmy_node†
n
;

728 
ölöe
 
	ggøph
::
ªmove_node
(
gøph_node
 *
n
) {

730 
•ö_muãx
::
sc›ed_lock
 
lock
(
nodñi°_muãx
);

731 
__TBB_ASSERT
(
my_nodes
 && 
my_nodes_œ°
, "graph::remove_node: Error:ÇoÑegisteredÇodes");

732 i‡(
	gn
->
	g¥ev
Ën->¥ev->
	g√xt
 = 
n
->
√xt
;

733 i‡(
	gn
->
	g√xt
Ën->√xt->
	g¥ev
 = 
n
->
¥ev
;

734 i‡(
	gmy_nodes_œ°
 =
n
Ë
my_nodes_œ°
 =Ç->
¥ev
;

735 i‡(
	gmy_nodes
 =
n
Ë
my_nodes
 =Ç->
√xt
;

737 
	gn
->
	g¥ev
 = 
n
->
√xt
 = 
NULL
;

740 
ölöe
 
	ggøph
::
ª£t
–
__TBB_PFG_RESET_ARG
–
ª£t_Êags
 
f
 )) {

742 
èsk
 *
ßved_my_roŸ_èsk
 = 
my_roŸ_èsk
;

743 
	gmy_roŸ_èsk
 = 
NULL
;

744 if(
	gmy_c⁄ãxt
Ëmy_c⁄ãxt->
ª£t
();

745 
	gˇn˚Œed
 = 
Ál£
;

746 
	gˇught_ex˚±i⁄
 = 
Ál£
;

748 
ôî©‹
 
	gii
 = 
begö
(); iò!
íd
(); ++ii) {

749 
gøph_node
 *
	gmy_p
 = &(*
ii
);

750 
	gmy_p
->
ª£t
(
__TBB_PFG_RESET_ARG
(
f
));

752 
	gmy_roŸ_èsk
 = 
ßved_my_roŸ_èsk
;

756 
	~"öã∫Æ/_Êow_gøph_node_im∂.h
"

759 
	gãm∂©e
 < 
ty≥«me
 
	gOuçut
 >

760 
˛ass
 
	gsour˚_node
 : 
public
 
gøph_node
,Öubli¯
	g£ndî
< 
	gOuçut
 > {

761 
	g¥Ÿe˘ed
:

762 
usög
 
gøph_node
::
my_gøph
;

763 
	gpublic
:

765 
Ouçut
 
	touçut_ty≥
;

768 
	gª˚ivî
< 
	tOuçut
 > 
	tsuc˚ss‹_ty≥
;

770 #i‡
TBB_PREVIEW_FLOW_GRAPH_FEATURES


771 
	g°d
::
	tve˘‹
<
	tsuc˚ss‹_ty≥
 *> 
	tsuc˚ss‹_ve˘‹_ty≥
;

775 
	gãm∂©e
< 
ty≥«me
 
	gBody
 >

776 
sour˚_node
–
gøph
 &
g
, 
Body
 
body
, 
boﬁ
 
is_a˘ive
 = 
åue
 )

777 : 
gøph_node
(
g
), 
my_a˘ive
(
is_a˘ive
), 
öô_my_a˘ive
(is_active),

778 
my_body
–
√w
 
öã∫Æ
::
sour˚_body_Àaf
< 
ouçut_ty≥
, 
Body
>(
body
) ),

779 
my_ª£rved
(
Ál£
), 
my_has_ˇched_ôem
(false)

781 
	gmy_suc˚ss‹s
.
£t_ow√r
(
this
);

782 
	gtbb
::
öã∫Æ
::
fgt_node_wôh_body
–
tbb
::öã∫Æ::
FLOW_SOURCE_NODE
, &
this
->
my_gøph
,

783 
°©ic_ˇ°
<
£ndî
<
ouçut_ty≥
> *>(
this
),Åhis->
my_body
 );

787 
sour˚_node
–c⁄° sour˚_node& 
§c
 ) :

788 
gøph_node
(
§c
.
my_gøph
), 
	g£ndî
<
	gOuçut
>(),

789 
my_a˘ive
(
§c
.
öô_my_a˘ive
),

790 
öô_my_a˘ive
(
§c
.öô_my_a˘ive), 
my_body
–§c.my_body->
˛⁄e
() ),

791 
my_ª£rved
(
Ál£
), 
my_has_ˇched_ôem
(false)

793 
	gmy_suc˚ss‹s
.
£t_ow√r
(
this
);

794 
	gtbb
::
öã∫Æ
::
fgt_node_wôh_body
–
tbb
::öã∫Æ::
FLOW_SOURCE_NODE
, &
this
->
my_gøph
,

795 
°©ic_ˇ°
<
£ndî
<
ouçut_ty≥
> *>(
this
),Åhis->
my_body
 );

799 ~
sour˚_node
(Ë{ 
dñëe
 
	gmy_body
; }

801 #i‡
TBB_PREVIEW_FLOW_GRAPH_TRACE


802  
£t_«me
–c⁄° *
«me
 ) {

803 
	gtbb
::
öã∫Æ
::
fgt_node_desc
–
this
, 
«me
 );

808  
boﬁ
 
ªgi°î_suc˚ss‹
–
suc˚ss‹_ty≥
 &
r
 ) {

809 
	g•ö_muãx
::
sc›ed_lock
 
lock
(
my_muãx
);

810 
	gmy_suc˚ss‹s
.
ªgi°î_suc˚ss‹
(
r
);

811 i‡–
	gmy_a˘ive
 )

812 
•awn_put
();

813  
	gåue
;

817  
boﬁ
 
ªmove_suc˚ss‹
–
suc˚ss‹_ty≥
 &
r
 ) {

818 
	g•ö_muãx
::
sc›ed_lock
 
lock
(
my_muãx
);

819 
	gmy_suc˚ss‹s
.
ªmove_suc˚ss‹
(
r
);

820  
	gåue
;

823 #i‡
TBB_PREVIEW_FLOW_GRAPH_FEATURES


824  
öã∫Æ_add_buût_suc˚ss‹
–
suc˚ss‹_ty≥
 &
r
) {

825 
	g•ö_muãx
::
sc›ed_lock
 
lock
(
my_muãx
);

826 
	gmy_suc˚ss‹s
.
öã∫Æ_add_buût_suc˚ss‹
(
r
);

829  
öã∫Æ_dñëe_buût_suc˚ss‹
–
suc˚ss‹_ty≥
 &
r
) {

830 
	g•ö_muãx
::
sc›ed_lock
 
lock
(
my_muãx
);

831 
	gmy_suc˚ss‹s
.
öã∫Æ_dñëe_buût_suc˚ss‹
(
r
);

834  
size_t
 
suc˚ss‹_cou¡
() {

835 
	g•ö_muãx
::
sc›ed_lock
 
lock
(
my_muãx
);

836  
	gmy_suc˚ss‹s
.
suc˚ss‹_cou¡
();

839  
c›y_suc˚ss‹s
(
suc˚ss‹_ve˘‹_ty≥
 &
v
) {

840 
	g•ö_muãx
::
sc›ed_lock
 
l
(
my_muãx
);

841 
	gmy_suc˚ss‹s
.
c›y_suc˚ss‹s
(
v
);

846  
boﬁ
 
åy_gë
–
ouçut_ty≥
 &
v
 ) {

847 
	g•ö_muãx
::
sc›ed_lock
 
lock
(
my_muãx
);

848 i‡–
	gmy_ª£rved
 )

849  
	gÁl£
;

851 i‡–
	gmy_has_ˇched_ôem
 ) {

852 
	gv
 = 
my_ˇched_ôem
;

853 
	gmy_has_ˇched_ôem
 = 
Ál£
;

854  
	gåue
;

858 
•awn_put
();

859  
	gÁl£
;

863  
boﬁ
 
åy_ª£rve
–
ouçut_ty≥
 &
v
 ) {

864 
	g•ö_muãx
::
sc›ed_lock
 
lock
(
my_muãx
);

865 i‡–
	gmy_ª£rved
 ) {

866  
	gÁl£
;

869 i‡–
	gmy_has_ˇched_ôem
 ) {

870 
	gv
 = 
my_ˇched_ôem
;

871 
	gmy_ª£rved
 = 
åue
;

872  
	gåue
;

874  
	gÁl£
;

880  
boﬁ
 
åy_ªÀa£
( ) {

881 
	g•ö_muãx
::
sc›ed_lock
 
lock
(
my_muãx
);

882 
__TBB_ASSERT
–
my_ª£rved
 && 
my_has_ˇched_ôem
, "releasingÇon-existentÑeservation" );

883 
	gmy_ª£rved
 = 
Ál£
;

884 if(!
	gmy_suc˚ss‹s
.
em±y
())

885 
•awn_put
();

886  
	gåue
;

890  
boﬁ
 
åy_c⁄sume
( ) {

891 
	g•ö_muãx
::
sc›ed_lock
 
lock
(
my_muãx
);

892 
__TBB_ASSERT
–
my_ª£rved
 && 
my_has_ˇched_ôem
, "consumingÇon-existentÑeservation" );

893 
	gmy_ª£rved
 = 
Ál£
;

894 
	gmy_has_ˇched_ôem
 = 
Ál£
;

895 i‡–!
	gmy_suc˚ss‹s
.
em±y
() ) {

896 
•awn_put
();

898  
	gåue
;

902 
a˘iv©e
() {

903 
	g•ö_muãx
::
sc›ed_lock
 
lock
(
my_muãx
);

904 
	gmy_a˘ive
 = 
åue
;

905 i‡–!
	gmy_suc˚ss‹s
.
em±y
() )

906 
•awn_put
();

909 
	gãm∂©e
<
ty≥«me
 
	gBody
>

910 
Body
 
c›y_fun˘i⁄_obje˘
() {

911 
	göã∫Æ
::
sour˚_body
<
ouçut_ty≥
> &
body_ªf
 = *
this
->
my_body
;

912  
	gdy«mic_ˇ°
< 
	göã∫Æ
::
sour˚_body_Àaf
<
ouçut_ty≥
, 
	gBody
> & >(
	gbody_ªf
).
gë_body
();

915 
	g¥Ÿe˘ed
:

918 
ª£t
–
__TBB_PFG_RESET_ARG
(
ª£t_Êags
 
f
)) {

919 
my_a˘ive
 = 
öô_my_a˘ive
;

920 
	gmy_ª£rved
 =
Ál£
;

921 if(
	gmy_has_ˇched_ôem
) {

922 
	gmy_has_ˇched_ôem
 = 
Ál£
;

924 #i‡
TBB_PREVIEW_FLOW_GRAPH_FEATURES


925 
	gmy_suc˚ss‹s
.
ª£t
(
f
);

926 if(
	gf
 & 
	grf_ª£t_bodõs
Ë
	gmy_body
->
ª£t_body
();

930 
	g¥iv©e
:

931 
•ö_muãx
 
my_muãx
;

932 
boﬁ
 
	gmy_a˘ive
;

933 
boﬁ
 
	göô_my_a˘ive
;

934 
	göã∫Æ
::
sour˚_body
<
ouçut_ty≥
> *
my_body
;

935 
	göã∫Æ
::
brﬂdˇ°_ˇche
< 
ouçut_ty≥
 > 
my_suc˚ss‹s
;

936 
boﬁ
 
	gmy_ª£rved
;

937 
boﬁ
 
	gmy_has_ˇched_ôem
;

938 
ouçut_ty≥
 
	gmy_ˇched_ôem
;

941 
boﬁ
 
åy_ª£rve_≠∂y_body
(
ouçut_ty≥
 &
v
) {

942 
	g•ö_muãx
::
sc›ed_lock
 
lock
(
my_muãx
);

943 i‡–
	gmy_ª£rved
 ) {

944  
	gÁl£
;

946 i‡–!
	gmy_has_ˇched_ôem
 ) {

947 
	gtbb
::
öã∫Æ
::
fgt_begö_body
–
my_body
 );

948 
boﬁ
 
	gr
 = (*
my_body
)(
my_ˇched_ôem
);

949 
	gtbb
::
öã∫Æ
::
fgt_íd_body
–
my_body
 );

950 i‡(
	gr
) {

951 
	gmy_has_ˇched_ôem
 = 
åue
;

954 i‡–
	gmy_has_ˇched_ôem
 ) {

955 
	gv
 = 
my_ˇched_ôem
;

956 
	gmy_ª£rved
 = 
åue
;

957  
	gåue
;

959  
	gÁl£
;

964  
•awn_put
( ) {

965 
èsk
* 
	gç
 = 
this
->
my_gøph
.
roŸ_èsk
();

966 if(
	gç
) {

967 
FLOW_SPAWN
–(* 
√w
 ( 
èsk
::
Æloˇã_addôi⁄Æ_chûd_of
–*
ç
 ) )

968 
öã∫Æ
:: 
sour˚_èsk_by∑ss
 < 
sour˚_node
< 
ouçut_ty≥
 > >–*
this
 ) ) );

972 
‰õnd
 
˛ass
 
	göã∫Æ
::
sour˚_èsk_by∑ss
< 
sour˚_node
< 
ouçut_ty≥
 > >;

974  
èsk
 * 
≠∂y_body_by∑ss
( ) {

975 
ouçut_ty≥
 
	gv
;

976 i‡–!
åy_ª£rve_≠∂y_body
(
v
) )

977  
	gNULL
;

979 
èsk
 *
	gœ°_èsk
 = 
my_suc˚ss‹s
.
åy_put_èsk
(
v
);

980 i‡–
	gœ°_èsk
 )

981 
åy_c⁄sume
();

983 
åy_ªÀa£
();

984  
	gœ°_èsk
;

989 
	gãm∂©e
 < 
ty≥«me
 
	gI≈ut
,Åy≥«mê
	gOuçut
 = 
c⁄töue_msg
, 
	ggøph_buf„r_pﬁicy
 = 
queueög
,Åy≥«mê
	gAŒoˇt‹
=
ˇche_Æig√d_Æloˇt‹
<
I≈ut
> >

990 
˛ass
 
fun˘i⁄_node
 : 
public
 
gøph_node
,Öubli¯
	göã∫Æ
::
fun˘i⁄_öput
<
I≈ut
,
	gOuçut
,
	gAŒoˇt‹
>,Öubli¯öã∫Æ::
fun˘i⁄_ouçut
<
Ouçut
> {

991 
¥Ÿe˘ed
:

992 
usög
 
gøph_node
::
my_gøph
;

993 
	gpublic
:

994 
I≈ut
 
	töput_ty≥
;

995 
Ouçut
 
	touçut_ty≥
;

996 
	g£ndî
< 
	töput_ty≥
 > 
	t¥ede˚ss‹_ty≥
;

997 
	gª˚ivî
< 
	touçut_ty≥
 > 
	tsuc˚ss‹_ty≥
;

998 
	göã∫Æ
::
	tfun˘i⁄_öput
<
	töput_ty≥
,
	touçut_ty≥
,
	tAŒoˇt‹
> 
	tfI≈ut_ty≥
;

999 
	göã∫Æ
::
	tfun˘i⁄_ouçut
<
	touçut_ty≥
> 
	tfOuçut_ty≥
;

1000 #i‡
TBB_PREVIEW_FLOW_GRAPH_FEAURES


1001 
	g°d
::
	tve˘‹
<
	t¥ede˚ss‹_ty≥
 *> 
	t¥ede˚ss‹_ve˘‹_ty≥
;

1002 
	g°d
::
	tve˘‹
<
	tsuc˚ss‹_ty≥
 *> 
	tsuc˚ss‹_ve˘‹_ty≥
;

1006 
	gãm∂©e
< 
ty≥«me
 
	gBody
 >

1007 
fun˘i⁄_node
–
gøph
 &
g
, 
size_t
 
c⁄cuºícy
, 
Body
 
body
 ) :

1008 
gøph_node
(
g
), 
	göã∫Æ
::
fun˘i⁄_öput
<
öput_ty≥
,
	gouçut_ty≥
,
	gAŒoˇt‹
>(
	gg
, 
	gc⁄cuºícy
, 
	gbody
) {

1009 
	gtbb
::
öã∫Æ
::
fgt_node_wôh_body
–
tbb
::öã∫Æ::
FLOW_FUNCTION_NODE
, &
this
->
gøph_node
::
my_gøph
, 
°©ic_ˇ°
<
ª˚ivî
<
öput_ty≥
> *>(this),

1010 
°©ic_ˇ°
<
£ndî
<
ouçut_ty≥
> *>(
this
),Åhis->
my_body
 );

1014 
fun˘i⁄_node
–c⁄° fun˘i⁄_node& 
§c
 ) :

1015 
gøph_node
(
§c
.
my_gøph
), 
	göã∫Æ
::
fun˘i⁄_öput
<
öput_ty≥
,
	gouçut_ty≥
,
	gAŒoˇt‹
>–
	g§c
 ),

1016 
fOuçut_ty≥
() {

1017 
	gtbb
::
öã∫Æ
::
fgt_node_wôh_body
–
tbb
::öã∫Æ::
FLOW_FUNCTION_NODE
, &
this
->
my_gøph
, 
°©ic_ˇ°
<
ª˚ivî
<
öput_ty≥
> *>(this),

1018 
°©ic_ˇ°
<
£ndî
<
ouçut_ty≥
> *>(
this
),Åhis->
my_body
 );

1021 #i‡
TBB_PREVIEW_FLOW_GRAPH_TRACE


1022  
£t_«me
–c⁄° *
«me
 ) {

1023 
	gtbb
::
öã∫Æ
::
fgt_node_desc
–
this
, 
«me
 );

1027 
	g¥Ÿe˘ed
:

1028 
ãm∂©e
< 
ty≥«me
 
R
,Åy≥«mê
	gB
 > 
‰õnd
 
˛ass
 
	grun_™d_put_èsk
;

1029 
	gãm∂©e
<
ty≥«me
 
	gX
,Åy≥«mê
	gY
> 
‰õnd
 
˛ass
 
	göã∫Æ
::
brﬂdˇ°_ˇche
;

1030 
	gãm∂©e
<
ty≥«me
 
	gX
,Åy≥«mê
	gY
> 
‰õnd
 
˛ass
 
	göã∫Æ
::
round_robö_ˇche
;

1031 
usög
 
	gfI≈ut_ty≥
::
åy_put_èsk
;

1034  
ª£t
(
__TBB_PFG_RESET_ARG
(
ª£t_Êags
 
f
)) {

1035 
	gfI≈ut_ty≥
::
ª£t_fun˘i⁄_öput
(
__TBB_PFG_RESET_ARG
(
f
));

1036 #i‡
TBB_PREVIEW_FLOW_GRAPH_FEATURES


1037 
suc˚ss‹s
().
ª£t
(
f
);

1038 
__TBB_ASSERT
(!(
f
 & 
rf_exåa˘
Ë|| 
suc˚ss‹s
().
em±y
(), "function_node successorsÇotÉmpty");

1039 
__TBB_ASSERT
(
this
->
my_¥ede˚ss‹s
.
em±y
(), "function_nodeÖredecessorsÇotÉmpty");

1043  
	göã∫Æ
::
brﬂdˇ°_ˇche
<
ouçut_ty≥
> &
suc˚ss‹s
 (Ë{  
fOuçut_ty≥
::
my_suc˚ss‹s
; }

1047 
	gãm∂©e
 < 
ty≥«me
 
	gI≈ut
,Åy≥«mê
	gOuçut
,Åy≥«mê
	gAŒoˇt‹
 >

1048 
˛ass
 
	gfun˘i⁄_node
<
	gI≈ut
,
	gOuçut
,
	gqueueög
,
	gAŒoˇt‹
> : 
public
 
gøph_node
,Öubli¯
	göã∫Æ
::
fun˘i⁄_öput
<
I≈ut
,Ouçut,AŒoˇt‹>,Öubli¯öã∫Æ::
fun˘i⁄_ouçut
<
Ouçut
> {

1049 
¥Ÿe˘ed
:

1050 
usög
 
gøph_node
::
my_gøph
;

1051 
	gpublic
:

1052 
I≈ut
 
	töput_ty≥
;

1053 
Ouçut
 
	touçut_ty≥
;

1054 
	g£ndî
< 
	töput_ty≥
 > 
	t¥ede˚ss‹_ty≥
;

1055 
	gª˚ivî
< 
	touçut_ty≥
 > 
	tsuc˚ss‹_ty≥
;

1056 
	göã∫Æ
::
	tfun˘i⁄_öput
<
	töput_ty≥
,
	touçut_ty≥
,
	tAŒoˇt‹
> 
	tfI≈ut_ty≥
;

1057 
	göã∫Æ
::
	tfun˘i⁄_öput_queue
<
	töput_ty≥
, 
	tAŒoˇt‹
> 
	tqueue_ty≥
;

1058 
	göã∫Æ
::
	tfun˘i⁄_ouçut
<
	touçut_ty≥
> 
	tfOuçut_ty≥
;

1059 #i‡
TBB_PREVIEW_FLOW_GRAPH_FEATURES


1060 
	g°d
::
	tve˘‹
<
	t¥ede˚ss‹_ty≥
 *> 
	t¥ede˚ss‹_ve˘‹_ty≥
;

1061 
	g°d
::
	tve˘‹
<
	tsuc˚ss‹_ty≥
 *> 
	tsuc˚ss‹_ve˘‹_ty≥
;

1065 
	gãm∂©e
< 
ty≥«me
 
	gBody
 >

1066 
fun˘i⁄_node
–
gøph
 &
g
, 
size_t
 
c⁄cuºícy
, 
Body
 
body
 ) :

1067 
gøph_node
(
g
), 
fI≈ut_ty≥
–g, 
c⁄cuºícy
, 
body
, 
√w
 
queue_ty≥
() ) {

1068 
	gtbb
::
öã∫Æ
::
fgt_node_wôh_body
–
tbb
::öã∫Æ::
FLOW_FUNCTION_NODE
, &
this
->
gøph_node
::
my_gøph
, 
°©ic_ˇ°
<
ª˚ivî
<
öput_ty≥
> *>(this),

1069 
°©ic_ˇ°
<
£ndî
<
ouçut_ty≥
> *>(
this
),Åhis->
my_body
 );

1073 
fun˘i⁄_node
–c⁄° fun˘i⁄_node& 
§c
 ) :

1074 
gøph_node
(
§c
.gøph_node::
my_gøph
), 
fI≈ut_ty≥
–§c, 
√w
 
queue_ty≥
(Ë), 
fOuçut_ty≥
() {

1075 
	gtbb
::
öã∫Æ
::
fgt_node_wôh_body
–
tbb
::öã∫Æ::
FLOW_FUNCTION_NODE
, &
this
->
gøph_node
::
my_gøph
, 
°©ic_ˇ°
<
ª˚ivî
<
öput_ty≥
> *>(this),

1076 
°©ic_ˇ°
<
£ndî
<
ouçut_ty≥
> *>(
this
),Åhis->
my_body
 );

1079 #i‡
TBB_PREVIEW_FLOW_GRAPH_TRACE


1080  
£t_«me
–c⁄° *
«me
 ) {

1081 
	gtbb
::
öã∫Æ
::
fgt_node_desc
–
this
, 
«me
 );

1085 
	g¥Ÿe˘ed
:

1086 
ãm∂©e
< 
ty≥«me
 
R
,Åy≥«mê
	gB
 > 
‰õnd
 
˛ass
 
	grun_™d_put_èsk
;

1087 
	gãm∂©e
<
ty≥«me
 
	gX
,Åy≥«mê
	gY
> 
‰õnd
 
˛ass
 
	göã∫Æ
::
brﬂdˇ°_ˇche
;

1088 
	gãm∂©e
<
ty≥«me
 
	gX
,Åy≥«mê
	gY
> 
‰õnd
 
˛ass
 
	göã∫Æ
::
round_robö_ˇche
;

1089 
usög
 
	gfI≈ut_ty≥
::
åy_put_èsk
;

1091  
ª£t
–
__TBB_PFG_RESET_ARG
(
ª£t_Êags
 
f
)) {

1092 
	gfI≈ut_ty≥
::
ª£t_fun˘i⁄_öput
(
__TBB_PFG_RESET_ARG
(
f
));

1093 #i‡
TBB_PREVIEW_FLOW_GRAPH_FEATURES


1094 
suc˚ss‹s
().
ª£t
(
f
);

1095 
__TBB_ASSERT
(!(
f
 & 
rf_exåa˘
Ë|| 
suc˚ss‹s
().
em±y
(), "function_node successorsÇotÉmpty");

1096 
__TBB_ASSERT
(!(
f
 & 
rf_exåa˘
Ë|| 
this
->
my_¥ede˚ss‹s
.
em±y
(), "function_nodeÖredecessorsÇotÉmpty");

1101  
	göã∫Æ
::
brﬂdˇ°_ˇche
<
ouçut_ty≥
> &
suc˚ss‹s
 (Ë{  
fOuçut_ty≥
::
my_suc˚ss‹s
; }

1106 
	gãm∂©e
 < 
ty≥«me
 
	gI≈ut
,Åy≥«mê
	gOuçut
, 
	ggøph_buf„r_pﬁicy
 = 
queueög
,Åy≥«mê
	gAŒoˇt‹
=
ˇche_Æig√d_Æloˇt‹
<
I≈ut
> >

1107 
˛ass
 
mu…ifun˘i⁄_node
 :

1108 
public
 
gøph_node
,

1109 
public
 
	göã∫Æ
::
mu…ifun˘i⁄_öput


1111 
I≈ut
,

1112 
ty≥«me
 
	göã∫Æ
::
wøp_tu∂e_ñemíts
<

1113 
tbb
::
Êow
::
tu∂e_size
<
Ouçut
>::
vÆue
,

1114 
	göã∫Æ
::
mu…ifun˘i⁄_ouçut
,

1115 
	gOuçut


1116 >::
ty≥
,

1117 
	gAŒoˇt‹


1119 
	g¥Ÿe˘ed
:

1120 
usög
 
gøph_node
::
my_gøph
;

1121 
	g¥iv©e
:

1122 c⁄° 
N
 = 
tbb
::
Êow
::
tu∂e_size
<
Ouçut
>::
vÆue
;

1123 
	gpublic
:

1124 
I≈ut
 
	töput_ty≥
;

1125 
ty≥«me
 
	töã∫Æ
::
	twøp_tu∂e_ñemíts
<
	tN
,öã∫Æ::
	tmu…ifun˘i⁄_ouçut
, 
	tOuçut
>::
	tty≥
 
	touçut_p‹ts_ty≥
;

1126 
	g¥iv©e
:

1127 
ty≥«me
 
	töã∫Æ
::
	tmu…ifun˘i⁄_öput
<
	töput_ty≥
, 
	touçut_p‹ts_ty≥
, 
	tAŒoˇt‹
> 
	tba£_ty≥
;

1128 
ty≥«me
 
	töã∫Æ
::
	tfun˘i⁄_öput_queue
<
	töput_ty≥
,
	tAŒoˇt‹
> 
	tqueue_ty≥
;

1129 
	gpublic
:

1130 
ãm∂©e
<
ty≥«me
 
Body
>

1131 
mu…ifun˘i⁄_node
–
gøph
 &
g
, 
size_t
 
c⁄cuºícy
, 
Body
 
body
 ) :

1132 
gøph_node
(
g
), 
ba£_ty≥
(g,
c⁄cuºícy
, 
body
) {

1133 
	gtbb
::
öã∫Æ
::
fgt_mu…iouçut_node_wôh_body
<
Ouçut
,
	gN
>–tbb::öã∫Æ::
FLOW_MULTIFUNCTION_NODE
,

1134 &
	gthis
->
	ggøph_node
::
my_gøph
, 
	g°©ic_ˇ°
<
	gª˚ivî
<
	göput_ty≥
> *>(this),

1135 
	gthis
->
ouçut_p‹ts
(),Åhis->
	gmy_body
 );

1138 
mu…ifun˘i⁄_node
–c⁄° mu…ifun˘i⁄_nodê&
Ÿhî
) :

1139 
gøph_node
(
Ÿhî
.gøph_node::
my_gøph
), 
ba£_ty≥
(other) {

1140 
	gtbb
::
öã∫Æ
::
fgt_mu…iouçut_node_wôh_body
<
Ouçut
,
	gN
>–tbb::öã∫Æ::
FLOW_MULTIFUNCTION_NODE
,

1141 &
	gthis
->
	ggøph_node
::
my_gøph
, 
	g°©ic_ˇ°
<
	gª˚ivî
<
	göput_ty≥
> *>(this),

1142 
	gthis
->
ouçut_p‹ts
(),Åhis->
	gmy_body
 );

1145 #i‡
TBB_PREVIEW_FLOW_GRAPH_TRACE


1146  
£t_«me
–c⁄° *
«me
 ) {

1147 
	gtbb
::
öã∫Æ
::
fgt_mu…iouçut_node_desc
–
this
, 
«me
 );

1152 
	g¥Ÿe˘ed
:

1153  
ª£t
(
__TBB_PFG_RESET_ARG
(
ª£t_Êags
 
f
)Ë{ 
ba£_ty≥
::reset(__TBB_PFG_RESET_ARG(f)); }

1156 
	gãm∂©e
 < 
ty≥«me
 
	gI≈ut
,Åy≥«mê
	gOuçut
,Åy≥«mê
	gAŒoˇt‹
 >

1157 
˛ass
 
	gmu…ifun˘i⁄_node
<
	gI≈ut
,
	gOuçut
,
	gqueueög
,
	gAŒoˇt‹
> : 
public
 
gøph_node
,Öubli¯
	göã∫Æ
::
mu…ifun˘i⁄_öput
<
I≈ut
,

1158 
ty≥«me
 
	göã∫Æ
::
wøp_tu∂e_ñemíts
<
tbb
::
Êow
::
tu∂e_size
<
Ouçut
>::
vÆue
, i¡î«l::
mu…ifun˘i⁄_ouçut
, 
	gOuçut
>::
ty≥
, 
	gAŒoˇt‹
> {

1159 
	g¥Ÿe˘ed
:

1160 
usög
 
gøph_node
::
my_gøph
;

1161 c⁄° 
	gN
 = 
tbb
::
Êow
::
tu∂e_size
<
Ouçut
>::
vÆue
;

1162 
	gpublic
:

1163 
I≈ut
 
	töput_ty≥
;

1164 
ty≥«me
 
	töã∫Æ
::
	twøp_tu∂e_ñemíts
<
	tN
, i¡î«l::
	tmu…ifun˘i⁄_ouçut
, 
	tOuçut
>::
	tty≥
 
	touçut_p‹ts_ty≥
;

1165 
	g¥iv©e
:

1166 
ty≥«me
 
	töã∫Æ
::
	tmu…ifun˘i⁄_öput
<
	töput_ty≥
, 
	touçut_p‹ts_ty≥
, 
	tAŒoˇt‹
> 
	tba£_ty≥
;

1167 
ty≥«me
 
	töã∫Æ
::
	tfun˘i⁄_öput_queue
<
	töput_ty≥
,
	tAŒoˇt‹
> 
	tqueue_ty≥
;

1168 
	gpublic
:

1169 
ãm∂©e
<
ty≥«me
 
Body
>

1170 
mu…ifun˘i⁄_node
–
gøph
 &
g
, 
size_t
 
c⁄cuºícy
, 
Body
 
body
) :

1171 
gøph_node
(
g
), 
ba£_ty≥
(g,
c⁄cuºícy
, 
body
, 
√w
 
queue_ty≥
()) {

1172 
	gtbb
::
öã∫Æ
::
fgt_mu…iouçut_node_wôh_body
<
Ouçut
,
	gN
>–tbb::öã∫Æ::
FLOW_MULTIFUNCTION_NODE
,

1173 &
	gthis
->
	ggøph_node
::
my_gøph
, 
	g°©ic_ˇ°
<
	gª˚ivî
<
	göput_ty≥
> *>(this),

1174 
	gthis
->
ouçut_p‹ts
(),Åhis->
	gmy_body
 );

1177 
mu…ifun˘i⁄_node
–c⁄° mu…ifun˘i⁄_nodê&
Ÿhî
) :

1178 
gøph_node
(
Ÿhî
.gøph_node::
my_gøph
), 
ba£_ty≥
(Ÿhî, 
√w
 
queue_ty≥
()) {

1179 
	gtbb
::
öã∫Æ
::
fgt_mu…iouçut_node_wôh_body
<
Ouçut
,
	gN
>–tbb::öã∫Æ::
FLOW_MULTIFUNCTION_NODE
,

1180 &
	gthis
->
	ggøph_node
::
my_gøph
, 
	g°©ic_ˇ°
<
	gª˚ivî
<
	göput_ty≥
> *>(this),

1181 
	gthis
->
ouçut_p‹ts
(),Åhis->
	gmy_body
 );

1184 #i‡
TBB_PREVIEW_FLOW_GRAPH_TRACE


1185  
£t_«me
–c⁄° *
«me
 ) {

1186 
	gtbb
::
öã∫Æ
::
fgt_mu…iouçut_node_desc
–
this
, 
«me
 );

1191 
	g¥Ÿe˘ed
:

1192  
ª£t
(
__TBB_PFG_RESET_ARG
(
ª£t_Êags
 
f
)Ë{ 
ba£_ty≥
::reset(__TBB_PFG_RESET_ARG(f)); }

1198 
	gãm∂©e
<
ty≥«me
 
	gTu∂eTy≥
,Åy≥«mê
	gAŒoˇt‹
=
ˇche_Æig√d_Æloˇt‹
<
Tu∂eTy≥
> >

1199 
˛ass
 
•lô_node
 : 
public
 
mu…ifun˘i⁄_node
<
Tu∂eTy≥
, 
	gTu∂eTy≥
, 
	gªje˘ög
, 
	gAŒoˇt‹
> {

1200 c⁄° 
	gN
 = 
tbb
::
Êow
::
tu∂e_size
<
Tu∂eTy≥
>::
vÆue
;

1201 
	gmu…ifun˘i⁄_node
<
	tTu∂eTy≥
,Tu∂eTy≥,
	tªje˘ög
,
	tAŒoˇt‹
> 
	tba£_ty≥
;

1202 
	gpublic
:

1203 
ty≥«me
 
	tba£_ty≥
::
	touçut_p‹ts_ty≥
 output_ports_type;

1204 
	g¥iv©e
:

1205 
	s•lôtög_body
 {

1206 
›î©‹
()(c⁄° 
Tu∂eTy≥
& 
t
, 
	gouçut_p‹ts_ty≥
 &
	gp
) {

1207 
	göã∫Æ
::
emô_ñemít
<
N
>::
emô_this
(
t
, 
p
);

1210 
	gpublic
:

1211 
Tu∂eTy≥
 
	töput_ty≥
;

1212 
AŒoˇt‹
 
	tÆloˇt‹_ty≥
;

1213 
•lô_node
(
gøph
 &
g
Ë: 
ba£_ty≥
(g, 
u∆imôed
, 
•lôtög_body
()) {

1214 
	gtbb
::
öã∫Æ
::
fgt_mu…iouçut_node
<
Tu∂eTy≥
,
	gN
>–tbb::öã∫Æ::
FLOW_SPLIT_NODE
, &
	gthis
->
	ggøph_node
::
my_gøph
,

1215 
	g°©ic_ˇ°
<
	gª˚ivî
<
	göput_ty≥
> *>(
	gthis
),Åhis->
ouçut_p‹ts
() );

1218 
•lô_node
–c⁄° s∂ô_nodê& 
Ÿhî
Ë: 
ba£_ty≥
(other) {

1219 
tbb
::
öã∫Æ
::
fgt_mu…iouçut_node
<
Tu∂eTy≥
,
	gN
>–
	gtbb
::öã∫Æ::
FLOW_SPLIT_NODE
, &
	gthis
->
	ggøph_node
::
my_gøph
,

1220 
	g°©ic_ˇ°
<
	gª˚ivî
<
	göput_ty≥
> *>(
	gthis
),Åhis->
ouçut_p‹ts
() );

1223 #i‡
TBB_PREVIEW_FLOW_GRAPH_TRACE


1224  
£t_«me
–c⁄° *
«me
 ) {

1225 
	gtbb
::
öã∫Æ
::
fgt_mu…iouçut_node_desc
–
this
, 
«me
 );

1232 
	gãm∂©e
 <
ty≥«me
 
	gOuçut
>

1233 
˛ass
 
	gc⁄töue_node
 : 
public
 
gøph_node
,Öubli¯
	göã∫Æ
::
c⁄töue_öput
<
Ouçut
>,Öubli¯öã∫Æ::
fun˘i⁄_ouçut
<Output> {

1234 
¥Ÿe˘ed
:

1235 
usög
 
gøph_node
::
my_gøph
;

1236 
	gpublic
:

1237 
c⁄töue_msg
 
	töput_ty≥
;

1238 
Ouçut
 
	touçut_ty≥
;

1239 
	g£ndî
< 
	töput_ty≥
 > 
	t¥ede˚ss‹_ty≥
;

1240 
	gª˚ivî
< 
	touçut_ty≥
 > 
	tsuc˚ss‹_ty≥
;

1241 
	göã∫Æ
::
	tc⁄töue_öput
<
	tOuçut
> 
	tfI≈ut_ty≥
;

1242 
	göã∫Æ
::
	tfun˘i⁄_ouçut
<
	touçut_ty≥
> 
	tfOuçut_ty≥
;

1245 
	gãm∂©e
 <
ty≥«me
 
	gBody
 >

1246 
c⁄töue_node
–
gøph
 &
g
, 
Body
 
body
 ) :

1247 
gøph_node
(
g
), 
	göã∫Æ
::
c⁄töue_öput
<
ouçut_ty≥
>–g, 
	gbody
 ) {

1248 
	gtbb
::
öã∫Æ
::
fgt_node_wôh_body
–
tbb
::öã∫Æ::
FLOW_CONTINUE_NODE
, &
this
->
my_gøph
,

1249 
°©ic_ˇ°
<
ª˚ivî
<
öput_ty≥
> *>(
this
),

1250 
°©ic_ˇ°
<
£ndî
<
ouçut_ty≥
> *>(
this
),Åhis->
my_body
 );

1255 
	gãm∂©e
 <
ty≥«me
 
	gBody
 >

1256 
c⁄töue_node
–
gøph
 &
g
, 
numbî_of_¥ede˚ss‹s
, 
Body
 
body
 ) :

1257 
gøph_node
(
g
), 
	göã∫Æ
::
c⁄töue_öput
<
ouçut_ty≥
>–g, 
	gnumbî_of_¥ede˚ss‹s
, 
	gbody
 ) {

1258 
	gtbb
::
öã∫Æ
::
fgt_node_wôh_body
–
tbb
::öã∫Æ::
FLOW_CONTINUE_NODE
, &
this
->
my_gøph
,

1259 
°©ic_ˇ°
<
ª˚ivî
<
öput_ty≥
> *>(
this
),

1260 
°©ic_ˇ°
<
£ndî
<
ouçut_ty≥
> *>(
this
),Åhis->
my_body
 );

1264 
c⁄töue_node
–c⁄° c⁄töue_node& 
§c
 ) :

1265 
gøph_node
(
§c
.gøph_node::
my_gøph
), 
	göã∫Æ
::
c⁄töue_öput
<
ouçut_ty≥
>(src),

1266 
	göã∫Æ
::
fun˘i⁄_ouçut
<
Ouçut
>() {

1267 
tbb
::
öã∫Æ
::
fgt_node_wôh_body
–tbb::öã∫Æ::
FLOW_CONTINUE_NODE
, &
this
->
my_gøph
,

1268 
°©ic_ˇ°
<
ª˚ivî
<
öput_ty≥
> *>(
this
),

1269 
°©ic_ˇ°
<
£ndî
<
ouçut_ty≥
> *>(
this
),Åhis->
my_body
 );

1272 #i‡
TBB_PREVIEW_FLOW_GRAPH_TRACE


1273  
£t_«me
–c⁄° *
«me
 ) {

1274 
	gtbb
::
öã∫Æ
::
fgt_node_desc
–
this
, 
«me
 );

1278 
	g¥Ÿe˘ed
:

1279 
ãm∂©e
< 
ty≥«me
 
R
,Åy≥«mê
	gB
 > 
‰õnd
 
˛ass
 
	grun_™d_put_èsk
;

1280 
	gãm∂©e
<
ty≥«me
 
	gX
,Åy≥«mê
	gY
> 
‰õnd
 
˛ass
 
	göã∫Æ
::
brﬂdˇ°_ˇche
;

1281 
	gãm∂©e
<
ty≥«me
 
	gX
,Åy≥«mê
	gY
> 
‰õnd
 
˛ass
 
	göã∫Æ
::
round_robö_ˇche
;

1282 
usög
 
	gfI≈ut_ty≥
::
åy_put_èsk
;

1284  
ª£t
(
__TBB_PFG_RESET_ARG
(
ª£t_Êags
 
f
)) {

1285 
	gfI≈ut_ty≥
::
ª£t_ª˚ivî
(
__TBB_PFG_RESET_ARG
(
f
));

1286 #i‡
TBB_PREVIEW_FLOW_GRAPH_FEATURES


1287 
suc˚ss‹s
().
ª£t
(
f
);

1288 
__TBB_ASSERT
(!(
f
 & 
rf_exåa˘
Ë|| 
suc˚ss‹s
().
em±y
(), "continue_nodeÇotÑeset");

1292  
	göã∫Æ
::
brﬂdˇ°_ˇche
<
ouçut_ty≥
> &
suc˚ss‹s
 (Ë{  
fOuçut_ty≥
::
my_suc˚ss‹s
; }

1295 
	gãm∂©e
< 
ty≥«me
 
	gT
 >

1296 
˛ass
 
	govîwrôe_node
 : 
public
 
gøph_node
,Öubli¯
	gª˚ivî
<
	gT
>,Öubli¯
	g£ndî
<T> {

1297 
	g¥Ÿe˘ed
:

1298 
usög
 
gøph_node
::
my_gøph
;

1299 
	gpublic
:

1300 
T
 
	töput_ty≥
;

1301 
T
 
	touçut_ty≥
;

1302 
	g£ndî
< 
	töput_ty≥
 > 
	t¥ede˚ss‹_ty≥
;

1303 
	gª˚ivî
< 
	touçut_ty≥
 > 
	tsuc˚ss‹_ty≥
;

1304 #i‡
TBB_PREVIEW_FLOW_GRAPH_FEATURES


1305 
	g°d
::
	tve˘‹
<
	t¥ede˚ss‹_ty≥
 *> 
	t¥ede˚ss‹_ve˘‹_ty≥
;

1306 
	g°d
::
	tve˘‹
<
	tsuc˚ss‹_ty≥
 *> 
	tsuc˚ss‹_ve˘‹_ty≥
;

1309 
ovîwrôe_node
(
gøph
 &
g
Ë: 
gøph_node
(g), 
my_buf„r_is_vÆid
(
Ál£
) {

1310 
	gmy_suc˚ss‹s
.
£t_ow√r
–
this
 );

1311 
	gtbb
::
öã∫Æ
::
fgt_node
–
tbb
::öã∫Æ::
FLOW_OVERWRITE_NODE
, &
this
->
my_gøph
,

1312 
°©ic_ˇ°
<
ª˚ivî
<
öput_ty≥
> *>(
this
), sètic_ˇ°<
£ndî
<
ouçut_ty≥
> *>(this) );

1316 
ovîwrôe_node
–c⁄° ovîwrôe_node& 
§c
 ) :

1317 
gøph_node
(
§c
.
my_gøph
), 
	gª˚ivî
<
	gT
>(), 
	g£ndî
<T>(), 
my_buf„r_is_vÆid
(
Ál£
)

1319 
	gmy_suc˚ss‹s
.
£t_ow√r
–
this
 );

1320 
	gtbb
::
öã∫Æ
::
fgt_node
–
tbb
::öã∫Æ::
FLOW_OVERWRITE_NODE
, &
this
->
my_gøph
,

1321 
°©ic_ˇ°
<
ª˚ivî
<
öput_ty≥
> *>(
this
), sètic_ˇ°<
£ndî
<
ouçut_ty≥
> *>(this) );

1324 ~
ovîwrôe_node
() {}

1326 #i‡
TBB_PREVIEW_FLOW_GRAPH_TRACE


1327  
£t_«me
–c⁄° *
«me
 ) {

1328 
	gtbb
::
öã∫Æ
::
fgt_node_desc
–
this
, 
«me
 );

1332  
boﬁ
 
ªgi°î_suc˚ss‹
–
suc˚ss‹_ty≥
 &
s
 ) {

1333 
	g•ö_muãx
::
sc›ed_lock
 
l
–
my_muãx
 );

1334 
èsk
* 
	gç
 = 
this
->
my_gøph
.
roŸ_èsk
();

1335 i‡(
	gmy_buf„r_is_vÆid
 && 
	gç
) {

1337 i‡–
	gs
.
åy_put
–
my_buf„r
 ) || !s.
ªgi°î_¥ede˚ss‹
–*
this
 ) ) {

1339 
	gmy_suc˚ss‹s
.
ªgi°î_suc˚ss‹
–
s
 );

1342  
	gÁl£
;

1346 
	gmy_suc˚ss‹s
.
ªgi°î_suc˚ss‹
–
s
 );

1348  
	gåue
;

1351  
boﬁ
 
ªmove_suc˚ss‹
–
suc˚ss‹_ty≥
 &
s
 ) {

1352 
	g•ö_muãx
::
sc›ed_lock
 
l
–
my_muãx
 );

1353 
	gmy_suc˚ss‹s
.
ªmove_suc˚ss‹
(
s
);

1354  
	gåue
;

1357 #i‡
TBB_PREVIEW_FLOW_GRAPH_FEATURES


1358  
öã∫Æ_add_buût_suc˚ss‹
–
suc˚ss‹_ty≥
 &
s
) {

1359 
	g•ö_muãx
::
sc›ed_lock
 
l
–
my_muãx
 );

1360 
	gmy_suc˚ss‹s
.
öã∫Æ_add_buût_suc˚ss‹
(
s
);

1363  
öã∫Æ_dñëe_buût_suc˚ss‹
–
suc˚ss‹_ty≥
 &
s
) {

1364 
	g•ö_muãx
::
sc›ed_lock
 
l
–
my_muãx
 );

1365 
	gmy_suc˚ss‹s
.
öã∫Æ_dñëe_buût_suc˚ss‹
(
s
);

1368  
size_t
 
suc˚ss‹_cou¡
() {

1369 
	g•ö_muãx
::
sc›ed_lock
 
l
–
my_muãx
 );

1370  
	gmy_suc˚ss‹s
.
suc˚ss‹_cou¡
();

1373  
c›y_suc˚ss‹s
(
suc˚ss‹_ve˘‹_ty≥
 &
v
) {

1374 
	g•ö_muãx
::
sc›ed_lock
 
l
–
my_muãx
 );

1375 
	gmy_suc˚ss‹s
.
c›y_suc˚ss‹s
(
v
);

1378  
öã∫Æ_add_buût_¥ede˚ss‹
–
¥ede˚ss‹_ty≥
 &
p
) {

1379 
	g•ö_muãx
::
sc›ed_lock
 
l
–
my_muãx
 );

1380 
	gmy_buût_¥ede˚ss‹s
.
add_edge
(
p
);

1383  
öã∫Æ_dñëe_buût_¥ede˚ss‹
–
¥ede˚ss‹_ty≥
 &
p
) {

1384 
	g•ö_muãx
::
sc›ed_lock
 
l
–
my_muãx
 );

1385 
	gmy_buût_¥ede˚ss‹s
.
dñëe_edge
(
p
);

1388  
size_t
 
¥ede˚ss‹_cou¡
() {

1389 
	g•ö_muãx
::
sc›ed_lock
 
l
–
my_muãx
 );

1390  
	gmy_buût_¥ede˚ss‹s
.
edge_cou¡
();

1393  
c›y_¥ede˚ss‹s
(
¥ede˚ss‹_ve˘‹_ty≥
 &
v
) {

1394 
	g•ö_muãx
::
sc›ed_lock
 
l
–
my_muãx
 );

1395 
	gmy_buût_¥ede˚ss‹s
.
c›y_edges
(
v
);

1399  
boﬁ
 
åy_gë
–
öput_ty≥
 &
v
 ) {

1400 
	g•ö_muãx
::
sc›ed_lock
 
l
–
my_muãx
 );

1401 i‡–
	gmy_buf„r_is_vÆid
 ) {

1402 
	gv
 = 
my_buf„r
;

1403  
	gåue
;

1405  
	gÁl£
;

1408 
boﬁ
 
is_vÆid
() {

1409 
	g•ö_muãx
::
sc›ed_lock
 
l
–
my_muãx
 );

1410  
	gmy_buf„r_is_vÆid
;

1413 
˛ór
() {

1414 
	g•ö_muãx
::
sc›ed_lock
 
l
–
my_muãx
 );

1415 
	gmy_buf„r_is_vÆid
 = 
Ál£
;

1418 
	g¥Ÿe˘ed
:

1419 
ãm∂©e
< 
ty≥«me
 
R
,Åy≥«mê
	gB
 > 
‰õnd
 
˛ass
 
	grun_™d_put_èsk
;

1420 
	gãm∂©e
<
ty≥«me
 
	gX
,Åy≥«mê
	gY
> 
‰õnd
 
˛ass
 
	göã∫Æ
::
brﬂdˇ°_ˇche
;

1421 
	gãm∂©e
<
ty≥«me
 
	gX
,Åy≥«mê
	gY
> 
‰õnd
 
˛ass
 
	göã∫Æ
::
round_robö_ˇche
;

1422  
èsk
 * 
åy_put_èsk
–c⁄° 
öput_ty≥
 &
v
 ) {

1423 
	g•ö_muãx
::
sc›ed_lock
 
l
–
my_muãx
 );

1424 
	gmy_buf„r
 = 
v
;

1425 
	gmy_buf„r_is_vÆid
 = 
åue
;

1426 
èsk
 * 
	gπask
 = 
my_suc˚ss‹s
.
åy_put_èsk
(
v
);

1427 if(!
	gπask
Ëπask = 
SUCCESSFULLY_ENQUEUED
;

1428  
	gπask
;

1431  
ª£t
–
__TBB_PFG_RESET_ARG
(
ª£t_Êags
 
f
)) {

1432 
	gmy_buf„r_is_vÆid
 = 
Ál£
;

1433 #i‡
TBB_PREVIEW_FLOW_GRAPH_FEATURES


1434 
	gmy_suc˚ss‹s
.
ª£t
(
f
);

1435 i‡(
	gf
&
	grf_exåa˘
) {

1436 
	gmy_buût_¥ede˚ss‹s
.
ª˚ivî_exåa˘
(*
this
);

1441 
•ö_muãx
 
	gmy_muãx
;

1442 
	göã∫Æ
::
brﬂdˇ°_ˇche
< 
öput_ty≥
, 
	gnuŒ_rw_muãx
 > 
	gmy_suc˚ss‹s
;

1443 #i‡
TBB_PREVIEW_FLOW_GRAPH_FEATURES


1444 
	gedge_c⁄èöî
<
	g£ndî
<
	göput_ty≥
> > 
	gmy_buût_¥ede˚ss‹s
;

1446 
öput_ty≥
 
	gmy_buf„r
;

1447 
boﬁ
 
	gmy_buf„r_is_vÆid
;

1448  
ª£t_ª˚ivî
(
__TBB_PFG_RESET_ARG
(
ª£t_Êags
 )) {}

1451 
	gãm∂©e
< 
ty≥«me
 
	gT
 >

1452 
˛ass
 
	gwrôe_⁄˚_node
 : 
public
 
ovîwrôe_node
<
T
> {

1453 
public
:

1454 
T
 
	töput_ty≥
;

1455 
T
 
	touçut_ty≥
;

1456 
	g£ndî
< 
	töput_ty≥
 > 
	t¥ede˚ss‹_ty≥
;

1457 
	gª˚ivî
< 
	touçut_ty≥
 > 
	tsuc˚ss‹_ty≥
;

1460 
wrôe_⁄˚_node
(
gøph
& 
g
Ë: 
ovîwrôe_node
<
T
>(g) {

1461 
tbb
::
öã∫Æ
::
fgt_node
–tbb::öã∫Æ::
FLOW_WRITE_ONCE_NODE
, &(
this
->
my_gøph
),

1462 
°©ic_ˇ°
<
ª˚ivî
<
öput_ty≥
> *>(
this
),

1463 
°©ic_ˇ°
<
£ndî
<
ouçut_ty≥
> *>(
this
) );

1467 
wrôe_⁄˚_node
–c⁄° wrôe_⁄˚_node& 
§c
 ) : 
ovîwrôe_node
<
T
>(src) {

1468 
tbb
::
öã∫Æ
::
fgt_node
–tbb::öã∫Æ::
FLOW_WRITE_ONCE_NODE
, &(
this
->
my_gøph
),

1469 
°©ic_ˇ°
<
ª˚ivî
<
öput_ty≥
> *>(
this
),

1470 
°©ic_ˇ°
<
£ndî
<
ouçut_ty≥
> *>(
this
) );

1473 #i‡
TBB_PREVIEW_FLOW_GRAPH_TRACE


1474  
£t_«me
–c⁄° *
«me
 ) {

1475 
	gtbb
::
öã∫Æ
::
fgt_node_desc
–
this
, 
«me
 );

1479 
	g¥Ÿe˘ed
:

1480 
ãm∂©e
< 
ty≥«me
 
R
,Åy≥«mê
	gB
 > 
‰õnd
 
˛ass
 
	grun_™d_put_èsk
;

1481 
	gãm∂©e
<
ty≥«me
 
	gX
,Åy≥«mê
	gY
> 
‰õnd
 
˛ass
 
	göã∫Æ
::
brﬂdˇ°_ˇche
;

1482 
	gãm∂©e
<
ty≥«me
 
	gX
,Åy≥«mê
	gY
> 
‰õnd
 
˛ass
 
	göã∫Æ
::
round_robö_ˇche
;

1483  
èsk
 *
åy_put_èsk
–c⁄° 
T
 &
v
 ) {

1484 
	g•ö_muãx
::
sc›ed_lock
 
l
–
this
->
my_muãx
 );

1485 i‡–
	gthis
->
	gmy_buf„r_is_vÆid
 ) {

1486  
	gNULL
;

1488 
	gthis
->
	gmy_buf„r
 = 
v
;

1489 
	gthis
->
	gmy_buf„r_is_vÆid
 = 
åue
;

1490 
èsk
 *
	gªs
 = 
this
->
my_suc˚ss‹s
.
åy_put_èsk
(
v
);

1491 if(!
	gªs
Ëª†
SUCCESSFULLY_ENQUEUED
;

1492  
	gªs
;

1498 
	gãm∂©e
 <
ty≥«me
 
	gT
>

1499 
˛ass
 
	gbrﬂdˇ°_node
 : 
public
 
gøph_node
,Öubli¯
	gª˚ivî
<
	gT
>,Öubli¯
	g£ndî
<T> {

1500 
	g¥Ÿe˘ed
:

1501 
usög
 
gøph_node
::
my_gøph
;

1502 
	gpublic
:

1503 
T
 
	töput_ty≥
;

1504 
T
 
	touçut_ty≥
;

1505 
	g£ndî
< 
	töput_ty≥
 > 
	t¥ede˚ss‹_ty≥
;

1506 
	gª˚ivî
< 
	touçut_ty≥
 > 
	tsuc˚ss‹_ty≥
;

1507 #i‡
TBB_PREVIEW_FLOW_GRAPH_FEATURES


1508 
	g°d
::
	tve˘‹
<
	t¥ede˚ss‹_ty≥
 *> 
	t¥ede˚ss‹_ve˘‹_ty≥
;

1509 
	g°d
::
	tve˘‹
<
	tsuc˚ss‹_ty≥
 *> 
	tsuc˚ss‹_ve˘‹_ty≥
;

1511 
	g¥iv©e
:

1512 
öã∫Æ
::
brﬂdˇ°_ˇche
<
öput_ty≥
> 
my_suc˚ss‹s
;

1513 #i‡
TBB_PREVIEW_FLOW_GRAPH_FEATURES


1514 
	gedge_c⁄èöî
<
	g¥ede˚ss‹_ty≥
> 
	gmy_buût_¥ede˚ss‹s
;

1515 
•ö_muãx
 
	g¥ed_muãx
;

1517 
	gpublic
:

1519 
brﬂdˇ°_node
(
gøph
& 
g
Ë: 
gøph_node
(g) {

1520 
my_suc˚ss‹s
.
£t_ow√r
–
this
 );

1521 
	gtbb
::
öã∫Æ
::
fgt_node
–
tbb
::öã∫Æ::
FLOW_BROADCAST_NODE
, &
this
->
my_gøph
,

1522 
°©ic_ˇ°
<
ª˚ivî
<
öput_ty≥
> *>(
this
), sètic_ˇ°<
£ndî
<
ouçut_ty≥
> *>(this) );

1526 
brﬂdˇ°_node
–c⁄° brﬂdˇ°_node& 
§c
 ) :

1527 
gøph_node
(
§c
.
my_gøph
), 
	gª˚ivî
<
	gT
>(), 
	g£ndî
<T>()

1529 
	gmy_suc˚ss‹s
.
£t_ow√r
–
this
 );

1530 
	gtbb
::
öã∫Æ
::
fgt_node
–
tbb
::öã∫Æ::
FLOW_BROADCAST_NODE
, &
this
->
my_gøph
,

1531 
°©ic_ˇ°
<
ª˚ivî
<
öput_ty≥
> *>(
this
), sètic_ˇ°<
£ndî
<
ouçut_ty≥
> *>(this) );

1534 #i‡
TBB_PREVIEW_FLOW_GRAPH_TRACE


1535  
£t_«me
–c⁄° *
«me
 ) {

1536 
	gtbb
::
öã∫Æ
::
fgt_node_desc
–
this
, 
«me
 );

1541 
vútuÆ
 
boﬁ
 
ªgi°î_suc˚ss‹
–
ª˚ivî
<
T
> &
r
 ) {

1542 
	gmy_suc˚ss‹s
.
ªgi°î_suc˚ss‹
–
r
 );

1543  
	gåue
;

1547 
vútuÆ
 
boﬁ
 
ªmove_suc˚ss‹
–
ª˚ivî
<
T
> &
r
 ) {

1548 
	gmy_suc˚ss‹s
.
ªmove_suc˚ss‹
–
r
 );

1549  
	gåue
;

1552 #i‡
TBB_PREVIEW_FLOW_GRAPH_FEATURES


1553  
öã∫Æ_add_buût_suc˚ss‹
(
suc˚ss‹_ty≥
 &
r
) {

1554 
	gmy_suc˚ss‹s
.
öã∫Æ_add_buût_suc˚ss‹
(
r
);

1557  
öã∫Æ_dñëe_buût_suc˚ss‹
(
suc˚ss‹_ty≥
 &
r
) {

1558 
	gmy_suc˚ss‹s
.
öã∫Æ_dñëe_buût_suc˚ss‹
(
r
);

1561  
size_t
 
suc˚ss‹_cou¡
() {

1562  
	gmy_suc˚ss‹s
.
suc˚ss‹_cou¡
();

1565  
c›y_suc˚ss‹s
(
suc˚ss‹_ve˘‹_ty≥
 &
v
) {

1566 
	gmy_suc˚ss‹s
.
c›y_suc˚ss‹s
(
v
);

1569  
öã∫Æ_add_buût_¥ede˚ss‹
–
¥ede˚ss‹_ty≥
 &
p
) {

1570 
	gmy_buût_¥ede˚ss‹s
.
add_edge
(
p
);

1573  
öã∫Æ_dñëe_buût_¥ede˚ss‹
–
¥ede˚ss‹_ty≥
 &
p
) {

1574 
	gmy_buût_¥ede˚ss‹s
.
dñëe_edge
(
p
);

1577  
size_t
 
¥ede˚ss‹_cou¡
() {

1578  
	gmy_buût_¥ede˚ss‹s
.
edge_cou¡
();

1581  
c›y_¥ede˚ss‹s
(
¥ede˚ss‹_ve˘‹_ty≥
 &
v
) {

1582 
	gmy_buût_¥ede˚ss‹s
.
c›y_edges
(
v
);

1586 
	g¥Ÿe˘ed
:

1587 
ãm∂©e
< 
ty≥«me
 
R
,Åy≥«mê
	gB
 > 
‰õnd
 
˛ass
 
	grun_™d_put_èsk
;

1588 
	gãm∂©e
<
ty≥«me
 
	gX
,Åy≥«mê
	gY
> 
‰õnd
 
˛ass
 
	göã∫Æ
::
brﬂdˇ°_ˇche
;

1589 
	gãm∂©e
<
ty≥«me
 
	gX
,Åy≥«mê
	gY
> 
‰õnd
 
˛ass
 
	göã∫Æ
::
round_robö_ˇche
;

1591  
èsk
 *
åy_put_èsk
(c⁄° 
T
& 
t
) {

1592 
èsk
 *
	g√w_èsk
 = 
my_suc˚ss‹s
.
åy_put_èsk
(
t
);

1593 if(!
	g√w_èsk
Ë√w_èsk = 
SUCCESSFULLY_ENQUEUED
;

1594  
	g√w_èsk
;

1597  
ª£t
(
__TBB_PFG_RESET_ARG
(
ª£t_Êags
 
f
)) {

1598 #i‡
TBB_PREVIEW_FLOW_GRAPH_FEATURES


1599 
	gmy_suc˚ss‹s
.
ª£t
(
f
);

1600 i‡(
	gf
&
	grf_exåa˘
) {

1601 
	gmy_buût_¥ede˚ss‹s
.
ª˚ivî_exåa˘
(*
this
);

1603 
__TBB_ASSERT
(!(
f
 & 
rf_exåa˘
Ë|| 
my_suc˚ss‹s
.
em±y
(), "ErrorÑesetting broadcast_node");

1606  
ª£t_ª˚ivî
(
__TBB_PFG_RESET_ARG
(
ª£t_Êags
 )) {}

1610 
	gãm∂©e
 <
ty≥«me
 
	gT
,Åy≥«mê
	gA
=
ˇche_Æig√d_Æloˇt‹
<
T
> >

1611 
˛ass
 
buf„r_node
 : 
public
 
gøph_node
,Öubli¯
	göã∫Æ
::
ª£rvabÀ_ôem_buf„r
<
T
, 
	gA
>,Öubli¯
	gª˚ivî
<
	gT
>,Öubli¯
	g£ndî
<T> {

1612 
	g¥Ÿe˘ed
:

1613 
usög
 
gøph_node
::
my_gøph
;

1614 
	gpublic
:

1615 
T
 
	töput_ty≥
;

1616 
T
 
	touçut_ty≥
;

1617 
	g£ndî
< 
	töput_ty≥
 > 
	t¥ede˚ss‹_ty≥
;

1618 
	gª˚ivî
< 
	touçut_ty≥
 > 
	tsuc˚ss‹_ty≥
;

1619 
	gbuf„r_node
<
	tT
, 
	tA
> 
	tmy_˛ass
;

1620 #i‡
TBB_PREVIEW_FLOW_GRAPH_FEATURES


1621 
	g°d
::
	tve˘‹
<
	t¥ede˚ss‹_ty≥
 *> 
	t¥ede˚ss‹_ve˘‹_ty≥
;

1622 
	g°d
::
	tve˘‹
<
	tsuc˚ss‹_ty≥
 *> 
	tsuc˚ss‹_ve˘‹_ty≥
;

1624 
	g¥Ÿe˘ed
:

1625 
size_t
 
	tsize_ty≥
;

1626 
	göã∫Æ
::
round_robö_ˇche
< 
T
, 
	gnuŒ_rw_muãx
 > 
	gmy_suc˚ss‹s
;

1628 #i‡
TBB_PREVIEW_FLOW_GRAPH_FEATURES


1629 
	gedge_c⁄èöî
<
	g¥ede˚ss‹_ty≥
> 
	gmy_buût_¥ede˚ss‹s
;

1632 
‰õnd
 
˛ass
 
	göã∫Æ
::
f‹w¨d_èsk_by∑ss
< 
buf„r_node
< 
T
, 
	gA
 > >;

1634 
	e›_ty≥
 {
	gªg_succ
, 
	gªm_succ
, 
	gªq_ôem
, 
	gªs_ôem
, 
	gªl_ªs
, 
	gc⁄_ªs
, 
	gput_ôem
, 
	gåy_fwd_èsk


1635 #i‡
TBB_PREVIEW_FLOW_GRAPH_FEATURES


1636 , 
	gadd_b…_succ
, 
	gdñ_b…_succ
,

1637 
	gadd_b…_¥ed
, 
	gdñ_b…_¥ed
,

1638 
	gb…_succ_˙t
, 
	gb…_¥ed_˙t
,

1639 
	gb…_succ_˝y
, 
	gb…_¥ed_˝y


1642 
	e›_°©
 {
	gWAIT
=0, 
	gSUCCEEDED
, 
	gFAILED
};

1645 
˛ass
 
	gbuf„r_›î©i⁄
 : 
public
 
öã∫Æ
::
aggªg©ed_›î©i⁄
< 
buf„r_›î©i⁄
 > {

1646 
public
:

1647 
ty≥
;

1648 #i‡
TBB_PREVIEW_FLOW_GRAPH_FEATURES


1649 
èsk
 * 
	g…ask
;

1651 
öput_ty≥
 *
	gñem
;

1652 
suc˚ss‹_ty≥
 *
	gr
;

1653 
¥ede˚ss‹_ty≥
 *
	gp
;

1654 
size_t
 
	g˙t_vÆ
;

1655 
suc˚ss‹_ve˘‹_ty≥
 *
	gsvec
;

1656 
¥ede˚ss‹_ve˘‹_ty≥
 *
	gpvec
;

1659 
T
 *
	gñem
;

1660 
èsk
 * 
	g…ask
;

1661 
suc˚ss‹_ty≥
 *
	gr
;

1663 
buf„r_›î©i⁄
(c⁄° 
T
& 
e
, 
›_ty≥
 
t
Ë: 
ty≥
((t))

1665 #i‡
TBB_PREVIEW_FLOW_GRAPH_FEATURES


1666 , 
…ask
(
NULL
), 
ñem
(
c⁄°_ˇ°
<
T
*>(&
e
))

1668 , 
ñem
(
c⁄°_ˇ°
<
T
*>(&
e
)Ë, 
…ask
(
NULL
)

1671 
buf„r_›î©i⁄
(
›_ty≥
 
t
Ë: 
ty≥
(—)), 
…ask
(
NULL
) {}

1674 
boﬁ
 
	gf‹w¨dî_busy
;

1675 
	göã∫Æ
::
	taggªg©ög_fun˘‹
<
	tmy_˛ass
, 
	tbuf„r_›î©i⁄
> 
	tmy_h™dÀr
;

1676 
‰õnd
 
˛ass
 
	göã∫Æ
::
aggªg©ög_fun˘‹
<
my_˛ass
, 
	gbuf„r_›î©i⁄
>;

1677 
	göã∫Æ
::
aggªg©‹
< 
my_h™dÀr
, 
	gbuf„r_›î©i⁄
> 
	gmy_aggªg©‹
;

1679 
vútuÆ
 
h™dÀ_›î©i⁄s
(
buf„r_›î©i⁄
 *
›_li°
) {

1680 
buf„r_›î©i⁄
 *
	gtmp
 = 
NULL
;

1681 
boﬁ
 
	gåy_f‹w¨dög
=
Ál£
;

1682 
	g›_li°
) {

1683 
	gtmp
 = 
›_li°
;

1684 
	g›_li°
 = 
›_li°
->
√xt
;

1685 
	gtmp
->
	gty≥
) {

1686 
	gªg_succ
: 
öã∫Æ_ªg_succ
(
tmp
); 
	gåy_f‹w¨dög
 = 
åue
; ;

1687 
	gªm_succ
: 
öã∫Æ_ªm_succ
(
tmp
); ;

1688 
	gªq_ôem
: 
öã∫Æ_p›
(
tmp
); ;

1689 
	gªs_ôem
: 
öã∫Æ_ª£rve
(
tmp
); ;

1690 
	gªl_ªs
: 
öã∫Æ_ªÀa£
(
tmp
); 
	gåy_f‹w¨dög
 = 
åue
; ;

1691 
	gc⁄_ªs
: 
öã∫Æ_c⁄sume
(
tmp
); 
	gåy_f‹w¨dög
 = 
åue
; ;

1692 
	gput_ôem
: 
öã∫Æ_push
(
tmp
); 
	gåy_f‹w¨dög
 = (tmp->
°©us
 =
SUCCEEDED
); ;

1693 
	gåy_fwd_èsk
: 
öã∫Æ_f‹w¨d_èsk
(
tmp
); ;

1694 #i‡
TBB_PREVIEW_FLOW_GRAPH_FEATURES


1696 
	gadd_b…_succ
: 
öã∫Æ_add_buût_succ
(
tmp
); ;

1697 
	gdñ_b…_succ
: 
öã∫Æ_dñ_buût_succ
(
tmp
); ;

1698 
	gadd_b…_¥ed
: 
öã∫Æ_add_buût_¥ed
(
tmp
); ;

1699 
	gdñ_b…_¥ed
: 
öã∫Æ_dñ_buût_¥ed
(
tmp
); ;

1700 
	gb…_succ_˙t
: 
öã∫Æ_succ_˙t
(
tmp
); ;

1701 
	gb…_¥ed_˙t
: 
öã∫Æ_¥ed_˙t
(
tmp
); ;

1702 
	gb…_succ_˝y
: 
öã∫Æ_c›y_succs
(
tmp
); ;

1703 
	gb…_¥ed_˝y
: 
öã∫Æ_c›y_¥eds
(
tmp
); ;

1707 i‡(
	gåy_f‹w¨dög
 && !
	gf‹w¨dî_busy
) {

1708 
èsk
* 
	gç
 = 
this
->
my_gøph
.
roŸ_èsk
();

1709 if(
	gç
) {

1710 
	gf‹w¨dî_busy
 = 
åue
;

1711 
èsk
 *
	g√w_èsk
 = 
√w
—ask::
Æloˇã_addôi⁄Æ_chûd_of
(*
ç
)Ë
öã∫Æ
::

1712 
f‹w¨d_èsk_by∑ss


1713 < 
buf„r_node
<
öput_ty≥
, 
	gA
> >(*
	gthis
);

1716 
	gtbb
::
èsk
 *
z
 = 
tmp
->
…ask
;

1717 
	gtmp
->
	g…ask
 = 
comböe_èsks
(
z
, 
√w_èsk
);

1722 
ölöe
 
èsk
 *
gøb_f‹w¨dög_èsk
–
buf„r_›î©i⁄
 &
›_d©a
) {

1723  
	g›_d©a
.
	g…ask
;

1726 
ölöe
 
boﬁ
 
íqueue_f‹w¨dög_èsk
(
buf„r_›î©i⁄
 &
›_d©a
) {

1727 
èsk
 *
	g·
 = 
gøb_f‹w¨dög_èsk
(
›_d©a
);

1728 if(
	g·
) {

1729 
FLOW_SPAWN
(*
·
);

1730  
	gåue
;

1732  
	gÁl£
;

1736 
vútuÆ
 
èsk
 *
f‹w¨d_èsk
() {

1737 
buf„r_›î©i⁄
 
›_d©a
(
åy_fwd_èsk
);

1738 
èsk
 *
	gœ°_èsk
 = 
NULL
;

1740 
	g›_d©a
.
	g°©us
 = 
WAIT
;

1741 
	g›_d©a
.
	g…ask
 = 
NULL
;

1742 
	gmy_aggªg©‹
.
execuã
(&
›_d©a
);

1743 
	gtbb
::
èsk
 *
xèsk
 = 
›_d©a
.
…ask
;

1744 
	gœ°_èsk
 = 
comböe_èsks
(
œ°_èsk
, 
xèsk
);

1745 } 
	g›_d©a
.
	g°©us
 =
SUCCEEDED
);

1746  
	gœ°_èsk
;

1750 
vútuÆ
 
öã∫Æ_ªg_succ
(
buf„r_›î©i⁄
 *
›
) {

1751 
	gmy_suc˚ss‹s
.
ªgi°î_suc˚ss‹
(*(
›
->
r
));

1752 
__TBB_°‹e_wôh_ªÀa£
(
›
->
°©us
, 
SUCCEEDED
);

1756 
vútuÆ
 
öã∫Æ_ªm_succ
(
buf„r_›î©i⁄
 *
›
) {

1757 
	gmy_suc˚ss‹s
.
ªmove_suc˚ss‹
(*(
›
->
r
));

1758 
__TBB_°‹e_wôh_ªÀa£
(
›
->
°©us
, 
SUCCEEDED
);

1761 #i‡
TBB_PREVIEW_FLOW_GRAPH_FEATURES


1762 
vútuÆ
 
öã∫Æ_add_buût_succ
(
buf„r_›î©i⁄
 *
›
) {

1763 
	gmy_suc˚ss‹s
.
öã∫Æ_add_buût_suc˚ss‹
(*(
›
->
r
));

1764 
__TBB_°‹e_wôh_ªÀa£
(
›
->
°©us
, 
SUCCEEDED
);

1767 
vútuÆ
 
öã∫Æ_dñ_buût_succ
(
buf„r_›î©i⁄
 *
›
) {

1768 
	gmy_suc˚ss‹s
.
öã∫Æ_dñëe_buût_suc˚ss‹
(*(
›
->
r
));

1769 
__TBB_°‹e_wôh_ªÀa£
(
›
->
°©us
, 
SUCCEEDED
);

1772 
vútuÆ
 
öã∫Æ_add_buût_¥ed
(
buf„r_›î©i⁄
 *
›
) {

1773 
	gmy_buût_¥ede˚ss‹s
.
add_edge
(*(
›
->
p
));

1774 
__TBB_°‹e_wôh_ªÀa£
(
›
->
°©us
, 
SUCCEEDED
);

1777 
vútuÆ
 
öã∫Æ_dñ_buût_¥ed
(
buf„r_›î©i⁄
 *
›
) {

1778 
	gmy_buût_¥ede˚ss‹s
.
dñëe_edge
(*(
›
->
p
));

1779 
__TBB_°‹e_wôh_ªÀa£
(
›
->
°©us
, 
SUCCEEDED
);

1782 
vútuÆ
 
öã∫Æ_succ_˙t
(
buf„r_›î©i⁄
 *
›
) {

1783 
	g›
->
	g˙t_vÆ
 = 
my_suc˚ss‹s
.
suc˚ss‹_cou¡
();

1784 
__TBB_°‹e_wôh_ªÀa£
(
›
->
°©us
, 
SUCCEEDED
);

1787 
vútuÆ
 
öã∫Æ_¥ed_˙t
(
buf„r_›î©i⁄
 *
›
) {

1788 
	g›
->
	g˙t_vÆ
 = 
my_buût_¥ede˚ss‹s
.
edge_cou¡
();

1789 
__TBB_°‹e_wôh_ªÀa£
(
›
->
°©us
, 
SUCCEEDED
);

1792 
vútuÆ
 
öã∫Æ_c›y_succs
(
buf„r_›î©i⁄
 *
›
) {

1793 
	gmy_suc˚ss‹s
.
c›y_suc˚ss‹s
(*(
›
->
svec
));

1794 
__TBB_°‹e_wôh_ªÀa£
(
›
->
°©us
, 
SUCCEEDED
);

1797 
vútuÆ
 
öã∫Æ_c›y_¥eds
(
buf„r_›î©i⁄
 *
›
) {

1798 
	gmy_buût_¥ede˚ss‹s
.
c›y_edges
(*(
›
->
pvec
));

1799 
__TBB_°‹e_wôh_ªÀa£
(
›
->
°©us
, 
SUCCEEDED
);

1804 
vútuÆ
 
öã∫Æ_f‹w¨d_èsk
(
buf„r_›î©i⁄
 *
›
) {

1805 i‡(
	gthis
->
	gmy_ª£rved
 || !this->
my_ôem_vÆid
(
this
->
my_èû
-1)) {

1806 
__TBB_°‹e_wôh_ªÀa£
(
›
->
°©us
, 
FAILED
);

1807 
	gthis
->
	gf‹w¨dî_busy
 = 
Ál£
;

1810 
T
 
	gi_c›y
;

1811 
èsk
 * 
	gœ°_èsk
 = 
NULL
;

1812 
size_ty≥
 
	gcou¡î
 = 
my_suc˚ss‹s
.
size
();

1814 
	gcou¡î
>0 && !
	gthis
->
buf„r_em±y
(Ë&&Åhis->
my_ôem_vÆid
(
this
->
my_èû
-1)) {

1815 
	gthis
->
c›y_back
(
i_c›y
);

1816 
èsk
 *
	g√w_èsk
 = 
my_suc˚ss‹s
.
åy_put_èsk
(
i_c›y
);

1817 if(
	g√w_èsk
) {

1818 
	gœ°_èsk
 = 
comböe_èsks
(
œ°_èsk
, 
√w_èsk
);

1819 
	gthis
->
de°roy_back
();

1821 --
	gcou¡î
;

1823 
	g›
->
	g…ask
 = 
œ°_èsk
;

1824 i‡(
	gœ°_èsk
 && !
	gcou¡î
) {

1825 
__TBB_°‹e_wôh_ªÀa£
(
›
->
°©us
, 
SUCCEEDED
);

1828 
__TBB_°‹e_wôh_ªÀa£
(
›
->
°©us
, 
FAILED
);

1829 
	gf‹w¨dî_busy
 = 
Ál£
;

1833 
vútuÆ
 
öã∫Æ_push
(
buf„r_›î©i⁄
 *
›
) {

1834 
	gthis
->
push_back
(*(
›
->
ñem
));

1835 
__TBB_°‹e_wôh_ªÀa£
(
›
->
°©us
, 
SUCCEEDED
);

1838 
vútuÆ
 
öã∫Æ_p›
(
buf„r_›î©i⁄
 *
›
) {

1839 if(
	gthis
->
p›_back
(*(
›
->
ñem
))) {

1840 
__TBB_°‹e_wôh_ªÀa£
(
›
->
°©us
, 
SUCCEEDED
);

1843 
__TBB_°‹e_wôh_ªÀa£
(
›
->
°©us
, 
FAILED
);

1847 
vútuÆ
 
öã∫Æ_ª£rve
(
buf„r_›î©i⁄
 *
›
) {

1848 if(
	gthis
->
ª£rve_‰⁄t
(*(
›
->
ñem
))) {

1849 
__TBB_°‹e_wôh_ªÀa£
(
›
->
°©us
, 
SUCCEEDED
);

1852 
__TBB_°‹e_wôh_ªÀa£
(
›
->
°©us
, 
FAILED
);

1856 
vútuÆ
 
öã∫Æ_c⁄sume
(
buf„r_›î©i⁄
 *
›
) {

1857 
	gthis
->
c⁄sume_‰⁄t
();

1858 
__TBB_°‹e_wôh_ªÀa£
(
›
->
°©us
, 
SUCCEEDED
);

1861 
vútuÆ
 
öã∫Æ_ªÀa£
(
buf„r_›î©i⁄
 *
›
) {

1862 
	gthis
->
ªÀa£_‰⁄t
();

1863 
__TBB_°‹e_wôh_ªÀa£
(
›
->
°©us
, 
SUCCEEDED
);

1866 
	gpublic
:

1868 
buf„r_node
–
gøph
 &
g
 ) : 
gøph_node
(g), 
	göã∫Æ
::
ª£rvabÀ_ôem_buf„r
<
T
>(),

1869 
f‹w¨dî_busy
(
Ál£
) {

1870 
	gmy_suc˚ss‹s
.
£t_ow√r
(
this
);

1871 
	gmy_aggªg©‹
.
öôülize_h™dÀr
(
my_h™dÀr
(
this
));

1872 
	gtbb
::
öã∫Æ
::
fgt_node
–
tbb
::öã∫Æ::
FLOW_BUFFER_NODE
, &
this
->
my_gøph
,

1873 
°©ic_ˇ°
<
ª˚ivî
<
öput_ty≥
> *>(
this
), sètic_ˇ°<
£ndî
<
ouçut_ty≥
> *>(this) );

1877 
buf„r_node
–c⁄° buf„r_node& 
§c
 ) : 
gøph_node
(§c.
my_gøph
),

1878 
	göã∫Æ
::
ª£rvabÀ_ôem_buf„r
<
T
>(), 
	gª˚ivî
<
	gT
>(), 
	g£ndî
<T>() {

1879 
	gf‹w¨dî_busy
 = 
Ál£
;

1880 
	gmy_suc˚ss‹s
.
£t_ow√r
(
this
);

1881 
	gmy_aggªg©‹
.
öôülize_h™dÀr
(
my_h™dÀr
(
this
));

1882 
	gtbb
::
öã∫Æ
::
fgt_node
–
tbb
::öã∫Æ::
FLOW_BUFFER_NODE
, &
this
->
my_gøph
,

1883 
°©ic_ˇ°
<
ª˚ivî
<
öput_ty≥
> *>(
this
), sètic_ˇ°<
£ndî
<
ouçut_ty≥
> *>(this) );

1886 
	gvútuÆ
 ~
buf„r_node
() {}

1888 #i‡
TBB_PREVIEW_FLOW_GRAPH_TRACE


1889  
£t_«me
–c⁄° *
«me
 ) {

1890 
	gtbb
::
öã∫Æ
::
fgt_node_desc
–
this
, 
«me
 );

1900  
boﬁ
 
ªgi°î_suc˚ss‹
–
suc˚ss‹_ty≥
 &
r
 ) {

1901 
buf„r_›î©i⁄
 
›_d©a
(
ªg_succ
);

1902 
	g›_d©a
.
	gr
 = &
r
;

1903 
	gmy_aggªg©‹
.
execuã
(&
›_d©a
);

1904 ()
íqueue_f‹w¨dög_èsk
(
›_d©a
);

1905  
	gåue
;

1908 #i‡
TBB_PREVIEW_FLOW_GRAPH_FEATURES


1909  
öã∫Æ_add_buût_suc˚ss‹
–
suc˚ss‹_ty≥
 &
r
) {

1910 
buf„r_›î©i⁄
 
›_d©a
(
add_b…_succ
);

1911 
	g›_d©a
.
	gr
 = &
r
;

1912 
	gmy_aggªg©‹
.
execuã
(&
›_d©a
);

1915  
öã∫Æ_dñëe_buût_suc˚ss‹
–
suc˚ss‹_ty≥
 &
r
) {

1916 
buf„r_›î©i⁄
 
›_d©a
(
dñ_b…_succ
);

1917 
	g›_d©a
.
	gr
 = &
r
;

1918 
	gmy_aggªg©‹
.
execuã
(&
›_d©a
);

1921  
öã∫Æ_add_buût_¥ede˚ss‹
–
¥ede˚ss‹_ty≥
 &
p
) {

1922 
buf„r_›î©i⁄
 
›_d©a
(
add_b…_¥ed
);

1923 
	g›_d©a
.
	gp
 = &
p
;

1924 
	gmy_aggªg©‹
.
execuã
(&
›_d©a
);

1927  
öã∫Æ_dñëe_buût_¥ede˚ss‹
–
¥ede˚ss‹_ty≥
 &
p
) {

1928 
buf„r_›î©i⁄
 
›_d©a
(
dñ_b…_¥ed
);

1929 
	g›_d©a
.
	gp
 = &
p
;

1930 
	gmy_aggªg©‹
.
execuã
(&
›_d©a
);

1933  
size_t
 
¥ede˚ss‹_cou¡
() {

1934 
buf„r_›î©i⁄
 
›_d©a
(
b…_¥ed_˙t
);

1935 
	gmy_aggªg©‹
.
execuã
(&
›_d©a
);

1936  
	g›_d©a
.
	g˙t_vÆ
;

1939  
size_t
 
suc˚ss‹_cou¡
() {

1940 
buf„r_›î©i⁄
 
›_d©a
(
b…_succ_˙t
);

1941 
	gmy_aggªg©‹
.
execuã
(&
›_d©a
);

1942  
	g›_d©a
.
	g˙t_vÆ
;

1945  
c›y_¥ede˚ss‹s
–
¥ede˚ss‹_ve˘‹_ty≥
 &
v
 ) {

1946 
buf„r_›î©i⁄
 
›_d©a
(
b…_¥ed_˝y
);

1947 
	g›_d©a
.
	gpvec
 = &
v
;

1948 
	gmy_aggªg©‹
.
execuã
(&
›_d©a
);

1951  
c›y_suc˚ss‹s
–
suc˚ss‹_ve˘‹_ty≥
 &
v
 ) {

1952 
buf„r_›î©i⁄
 
›_d©a
(
b…_succ_˝y
);

1953 
	g›_d©a
.
	gsvec
 = &
v
;

1954 
	gmy_aggªg©‹
.
execuã
(&
›_d©a
);

1961  
boﬁ
 
ªmove_suc˚ss‹
–
suc˚ss‹_ty≥
 &
r
 ) {

1962 
	gr
.
ªmove_¥ede˚ss‹
(*
this
);

1963 
buf„r_›î©i⁄
 
›_d©a
(
ªm_succ
);

1964 
	g›_d©a
.
	gr
 = &
r
;

1965 
	gmy_aggªg©‹
.
execuã
(&
›_d©a
);

1969 ()
íqueue_f‹w¨dög_èsk
(
›_d©a
);

1970  
	gåue
;

1976  
boﬁ
 
åy_gë
–
T
 &
v
 ) {

1977 
buf„r_›î©i⁄
 
›_d©a
(
ªq_ôem
);

1978 
	g›_d©a
.
	gñem
 = &
v
;

1979 
	gmy_aggªg©‹
.
execuã
(&
›_d©a
);

1980 ()
íqueue_f‹w¨dög_èsk
(
›_d©a
);

1981  (
	g›_d©a
.
	g°©us
==
SUCCEEDED
);

1987  
boﬁ
 
åy_ª£rve
–
T
 &
v
 ) {

1988 
buf„r_›î©i⁄
 
›_d©a
(
ªs_ôem
);

1989 
	g›_d©a
.
	gñem
 = &
v
;

1990 
	gmy_aggªg©‹
.
execuã
(&
›_d©a
);

1991 ()
íqueue_f‹w¨dög_èsk
(
›_d©a
);

1992  (
	g›_d©a
.
	g°©us
==
SUCCEEDED
);

1997  
boﬁ
 
åy_ªÀa£
() {

1998 
buf„r_›î©i⁄
 
›_d©a
(
ªl_ªs
);

1999 
	gmy_aggªg©‹
.
execuã
(&
›_d©a
);

2000 ()
íqueue_f‹w¨dög_èsk
(
›_d©a
);

2001  
	gåue
;

2006  
boﬁ
 
åy_c⁄sume
() {

2007 
buf„r_›î©i⁄
 
›_d©a
(
c⁄_ªs
);

2008 
	gmy_aggªg©‹
.
execuã
(&
›_d©a
);

2009 ()
íqueue_f‹w¨dög_èsk
(
›_d©a
);

2010  
	gåue
;

2013 
	g¥Ÿe˘ed
:

2015 
ãm∂©e
< 
ty≥«me
 
R
,Åy≥«mê
	gB
 > 
‰õnd
 
˛ass
 
	grun_™d_put_èsk
;

2016 
	gãm∂©e
<
ty≥«me
 
	gX
,Åy≥«mê
	gY
> 
‰õnd
 
˛ass
 
	göã∫Æ
::
brﬂdˇ°_ˇche
;

2017 
	gãm∂©e
<
ty≥«me
 
	gX
,Åy≥«mê
	gY
> 
‰õnd
 
˛ass
 
	göã∫Æ
::
round_robö_ˇche
;

2019  
èsk
 *
åy_put_èsk
(c⁄° 
T
 &
t
) {

2020 
buf„r_›î©i⁄
 
›_d©a
(
t
, 
put_ôem
);

2021 
	gmy_aggªg©‹
.
execuã
(&
›_d©a
);

2022 
èsk
 *
	g·
 = 
gøb_f‹w¨dög_èsk
(
›_d©a
);

2026 if(
	g·
 && 
	g›_d©a
.
	g°©us
 =
FAILED
) {

2030 
FLOW_SPAWN
(*
·
); 
	g·
 = 
NULL
;

2032 if(!
	g·
 && 
	g›_d©a
.
	g°©us
 =
SUCCEEDED
) {

2033 
·
 = 
SUCCESSFULLY_ENQUEUED
;

2035  
	g·
;

2038  
ª£t
–
__TBB_PFG_RESET_ARG
(
ª£t_Êags
 
f
)) {

2039 
	göã∫Æ
::
ª£rvabÀ_ôem_buf„r
<
T
, 
	gA
>::
ª£t
();

2040 #i‡
TBB_PREVIEW_FLOW_GRAPH_FEATURES


2041 
	gmy_suc˚ss‹s
.
ª£t
(
f
);

2042 i‡(
	gf
&
	grf_exåa˘
) {

2043 
	gmy_buût_¥ede˚ss‹s
.
ª˚ivî_exåa˘
(*
this
);

2046 
	gf‹w¨dî_busy
 = 
Ál£
;

2049  
ª£t_ª˚ivî
(
__TBB_PFG_RESET_ARG
(
ª£t_Êags
 )) { }

2054 
	gãm∂©e
 <
ty≥«me
 
	gT
,Åy≥«mê
	gA
=
ˇche_Æig√d_Æloˇt‹
<
T
> >

2055 
˛ass
 
queue_node
 : 
public
 
buf„r_node
<
T
, 
	gA
> {

2056 
	g¥Ÿe˘ed
:

2057 
buf„r_node
<
	tT
, 
	tA
> 
	tba£_ty≥
;

2058 
ty≥«me
 
	tba£_ty≥
::
	tsize_ty≥
 size_type;

2059 
ty≥«me
 
	tba£_ty≥
::
	tbuf„r_›î©i⁄
 
	tqueue_›î©i⁄
;

2061 
	e›_°©
 {
	gWAIT
=0, 
	gSUCCEEDED
, 
	gFAILED
};

2063  
öã∫Æ_f‹w¨d_èsk
(
queue_›î©i⁄
 *
›
) {

2064 i‡(
	gthis
->
	gmy_ª£rved
 || !this->
my_ôem_vÆid
(
this
->
my_hód
)) {

2065 
__TBB_°‹e_wôh_ªÀa£
(
›
->
°©us
, 
FAILED
);

2066 
	gthis
->
	gf‹w¨dî_busy
 = 
Ál£
;

2069 
T
 
	gi_c›y
;

2070 
èsk
 *
	gœ°_èsk
 = 
NULL
;

2071 
size_ty≥
 
	gcou¡î
 = 
this
->
my_suc˚ss‹s
.
size
();

2073 
	gcou¡î
>0 && 
	gthis
->
my_ôem_vÆid
(
this
->
my_hód
)) {

2074 
	gthis
->
c›y_‰⁄t
(
i_c›y
);

2075 
èsk
 *
	g√w_èsk
 = 
this
->
my_suc˚ss‹s
.
åy_put_èsk
(
i_c›y
);

2076 if(
	g√w_èsk
) {

2077 
	gthis
->
de°roy_‰⁄t
();

2078 
	gœ°_èsk
 = 
comböe_èsks
(
œ°_èsk
, 
√w_èsk
);

2080 --
	gcou¡î
;

2082 
	g›
->
	g…ask
 = 
œ°_èsk
;

2083 i‡(
	gœ°_èsk
 && !
	gcou¡î
)

2084 
__TBB_°‹e_wôh_ªÀa£
(
›
->
°©us
, 
SUCCEEDED
);

2086 
__TBB_°‹e_wôh_ªÀa£
(
›
->
°©us
, 
FAILED
);

2087 
	gthis
->
	gf‹w¨dî_busy
 = 
Ál£
;

2091  
öã∫Æ_p›
(
queue_›î©i⁄
 *
›
) {

2092 i‡–
	gthis
->
	gmy_ª£rved
 || !this->
my_ôem_vÆid
(
this
->
my_hód
)){

2093 
__TBB_°‹e_wôh_ªÀa£
(
›
->
°©us
, 
FAILED
);

2096 
	gthis
->
p›_‰⁄t
(*(
›
->
ñem
));

2097 
__TBB_°‹e_wôh_ªÀa£
(
›
->
°©us
, 
SUCCEEDED
);

2100  
öã∫Æ_ª£rve
(
queue_›î©i⁄
 *
›
) {

2101 i‡(
	gthis
->
	gmy_ª£rved
 || !this->
my_ôem_vÆid
(
this
->
my_hód
)) {

2102 
__TBB_°‹e_wôh_ªÀa£
(
›
->
°©us
, 
FAILED
);

2105 
	gthis
->
ª£rve_‰⁄t
(*(
›
->
ñem
));

2106 
__TBB_°‹e_wôh_ªÀa£
(
›
->
°©us
, 
SUCCEEDED
);

2109  
öã∫Æ_c⁄sume
(
queue_›î©i⁄
 *
›
) {

2110 
	gthis
->
c⁄sume_‰⁄t
();

2111 
__TBB_°‹e_wôh_ªÀa£
(
›
->
°©us
, 
SUCCEEDED
);

2114 
	gpublic
:

2115 
T
 
	töput_ty≥
;

2116 
T
 
	touçut_ty≥
;

2117 
	g£ndî
< 
	töput_ty≥
 > 
	t¥ede˚ss‹_ty≥
;

2118 
	gª˚ivî
< 
	touçut_ty≥
 > 
	tsuc˚ss‹_ty≥
;

2121 
queue_node
–
gøph
 &
g
 ) : 
ba£_ty≥
(g) {

2122 
tbb
::
öã∫Æ
::
fgt_node
–tbb::öã∫Æ::
FLOW_QUEUE_NODE
, &(
this
->
my_gøph
),

2123 
°©ic_ˇ°
<
ª˚ivî
<
öput_ty≥
> *>(
this
),

2124 
°©ic_ˇ°
<
£ndî
<
ouçut_ty≥
> *>(
this
) );

2128 
queue_node
–c⁄° queue_node& 
§c
Ë: 
ba£_ty≥
(src) {

2129 
tbb
::
öã∫Æ
::
fgt_node
–tbb::öã∫Æ::
FLOW_QUEUE_NODE
, &(
this
->
my_gøph
),

2130 
°©ic_ˇ°
<
ª˚ivî
<
öput_ty≥
> *>(
this
),

2131 
°©ic_ˇ°
<
£ndî
<
ouçut_ty≥
> *>(
this
) );

2134 #i‡
TBB_PREVIEW_FLOW_GRAPH_TRACE


2135  
£t_«me
–c⁄° *
«me
 ) {

2136 
	gtbb
::
öã∫Æ
::
fgt_node_desc
–
this
, 
«me
 );

2140  
ª£t
–
__TBB_PFG_RESET_ARG
(
ª£t_Êags
 
f
)) {

2141 
	gba£_ty≥
::
ª£t
(
__TBB_PFG_RESET_ARG
(
f
));

2146 
	gãm∂©e
< 
ty≥«me
 
	gT
,Åy≥«mê
	gA
=
ˇche_Æig√d_Æloˇt‹
<
T
> >

2147 
˛ass
 
£quí˚r_node
 : 
public
 
queue_node
<
T
, 
	gA
> {

2148 
	göã∫Æ
::
fun˘i⁄_body
< 
T
, 
	gsize_t
 > *
	gmy_£quí˚r
;

2151 
	gpublic
:

2152 
T
 
	töput_ty≥
;

2153 
T
 
	touçut_ty≥
;

2154 
	g£ndî
< 
	töput_ty≥
 > 
	t¥ede˚ss‹_ty≥
;

2155 
	gª˚ivî
< 
	touçut_ty≥
 > 
	tsuc˚ss‹_ty≥
;

2158 
	gãm∂©e
< 
ty≥«me
 
	gSequí˚r
 >

2159 
£quí˚r_node
–
gøph
 &
g
, c⁄° 
Sequí˚r
& 
s
 ) : 
queue_node
<
T
, 
	gA
>(
	gg
),

2160 
my_£quí˚r
(
√w
 
öã∫Æ
::
fun˘i⁄_body_Àaf
< 
T
, 
size_t
, 
Sequí˚r
>(
s
) ) {

2161 
	gtbb
::
öã∫Æ
::
fgt_node
–
tbb
::öã∫Æ::
FLOW_SEQUENCER_NODE
, &(
this
->
my_gøph
),

2162 
°©ic_ˇ°
<
ª˚ivî
<
öput_ty≥
> *>(
this
),

2163 
°©ic_ˇ°
<
£ndî
<
ouçut_ty≥
> *>(
this
) );

2167 
£quí˚r_node
–c⁄° sequí˚r_node& 
§c
 ) : 
queue_node
<
T
, 
	gA
>(
	g§c
),

2168 
my_£quí˚r
–
§c
.my_£quí˚r->
˛⁄e
() ) {

2169 
	gtbb
::
öã∫Æ
::
fgt_node
–
tbb
::öã∫Æ::
FLOW_SEQUENCER_NODE
, &(
this
->
my_gøph
),

2170 
°©ic_ˇ°
<
ª˚ivî
<
öput_ty≥
> *>(
this
),

2171 
°©ic_ˇ°
<
£ndî
<
ouçut_ty≥
> *>(
this
) );

2175 ~
£quí˚r_node
(Ë{ 
dñëe
 
	gmy_£quí˚r
; }

2177 #i‡
TBB_PREVIEW_FLOW_GRAPH_TRACE


2178  
£t_«me
–c⁄° *
«me
 ) {

2179 
	gtbb
::
öã∫Æ
::
fgt_node_desc
–
this
, 
«me
 );

2183 
	g¥Ÿe˘ed
:

2184 
ty≥«me
 
	tbuf„r_node
<
	tT
, 
	tA
>::
	tsize_ty≥
 size_type;

2185 
ty≥«me
 
	tbuf„r_node
<
	tT
, 
	tA
>::
	tbuf„r_›î©i⁄
 
	t£quí˚r_›î©i⁄
;

2187 
	e›_°©
 {
	gWAIT
=0, 
	gSUCCEEDED
, 
	gFAILED
};

2189 
	g¥iv©e
:

2190  
öã∫Æ_push
(
£quí˚r_›î©i⁄
 *
›
) {

2191 
size_ty≥
 
èg
 = (*
my_£quí˚r
)(*(
›
->
ñem
));

2192 #i‡!
TBB_DEPRECATED_SEQUENCER_DUPLICATES


2193 if(
	gèg
 < 
	gthis
->
	gmy_hód
) {

2195 
__TBB_°‹e_wôh_ªÀa£
(
›
->
°©us
, 
FAILED
);

2200 
size_t
 
	g√w_èû
 = (
èg
+1 > 
this
->
my_èû
) ?Åag+1 :Åhis->my_tail;

2202 if(
	gthis
->
size
(
√w_èû
Ë>Åhis->
ˇ∑côy
()) {

2203 
	gthis
->
grow_my_¨øy
(
this
->
size
(
√w_èû
));

2205 
	gthis
->
	gmy_èû
 = 
√w_èû
;

2206 if(
	gthis
->
∂a˚_ôem
(
èg
,*(
›
->
ñem
))) {

2207 
__TBB_°‹e_wôh_ªÀa£
(
›
->
°©us
, 
SUCCEEDED
);

2211 
__TBB_°‹e_wôh_ªÀa£
(
›
->
°©us
, 
FAILED
);

2217 
	gãm∂©e
< 
ty≥«me
 
	gT
,Åy≥«mê
	gCom∑ª
 = 
°d
::
Àss
<
T
>,Åy≥«mê
	gA
=
ˇche_Æig√d_Æloˇt‹
<T> >

2218 
˛ass
 
¥i‹ôy_queue_node
 : 
public
 
buf„r_node
<
T
, 
	gA
> {

2219 
	gpublic
:

2220 
T
 
	töput_ty≥
;

2221 
T
 
	touçut_ty≥
;

2222 
	gbuf„r_node
<
	tT
,
	tA
> 
	tba£_ty≥
;

2223 
	g£ndî
< 
	töput_ty≥
 > 
	t¥ede˚ss‹_ty≥
;

2224 
	gª˚ivî
< 
	touçut_ty≥
 > 
	tsuc˚ss‹_ty≥
;

2227 
¥i‹ôy_queue_node
–
gøph
 &
g
 ) : 
buf„r_node
<
T
, 
	gA
>(
	gg
), 
m¨k
(0) {

2228 
	gtbb
::
öã∫Æ
::
fgt_node
–
tbb
::öã∫Æ::
FLOW_PRIORITY_QUEUE_NODE
, &(
this
->
my_gøph
),

2229 
°©ic_ˇ°
<
ª˚ivî
<
öput_ty≥
> *>(
this
),

2230 
°©ic_ˇ°
<
£ndî
<
ouçut_ty≥
> *>(
this
) );

2234 
¥i‹ôy_queue_node
–c⁄°Öri‹ôy_queue_nodê&
§c
 ) : 
buf„r_node
<
T
, 
	gA
>(
	g§c
), 
m¨k
(0) {

2235 
	gtbb
::
öã∫Æ
::
fgt_node
–
tbb
::öã∫Æ::
FLOW_PRIORITY_QUEUE_NODE
, &(
this
->
my_gøph
),

2236 
°©ic_ˇ°
<
ª˚ivî
<
öput_ty≥
> *>(
this
),

2237 
°©ic_ˇ°
<
£ndî
<
ouçut_ty≥
> *>(
this
) );

2240 #i‡
TBB_PREVIEW_FLOW_GRAPH_TRACE


2241  
£t_«me
–c⁄° *
«me
 ) {

2242 
	gtbb
::
öã∫Æ
::
fgt_node_desc
–
this
, 
«me
 );

2247 
	g¥Ÿe˘ed
:

2249  
ª£t
–
__TBB_PFG_RESET_ARG
(
ª£t_Êags
 
f
)) {

2250 
m¨k
 = 0;

2251 
	gba£_ty≥
::
ª£t
(
__TBB_PFG_RESET_ARG
(
f
));

2254 
ty≥«me
 
	tbuf„r_node
<
	tT
, 
	tA
>::
	tsize_ty≥
 size_type;

2255 
ty≥«me
 
	tbuf„r_node
<
	tT
, 
	tA
>::
	tôem_ty≥
 item_type;

2256 
ty≥«me
 
	tbuf„r_node
<
	tT
, 
	tA
>::
	tbuf„r_›î©i⁄
 
	t¥io_›î©i⁄
;

2258 
	e›_°©
 {
	gWAIT
=0, 
	gSUCCEEDED
, 
	gFAILED
};

2260  
h™dÀ_›î©i⁄s
(
¥io_›î©i⁄
 *
›_li°
) {

2261 
¥io_›î©i⁄
 *
	gtmp
 = 
›_li°
 ;

2262 
boﬁ
 
	gåy_f‹w¨dög
=
Ál£
;

2263 
	g›_li°
) {

2264 
	gtmp
 = 
›_li°
;

2265 
	g›_li°
 = 
›_li°
->
√xt
;

2266 
	gtmp
->
	gty≥
) {

2267 
	gbuf„r_node
<
	gT
, 
	gA
>::
ªg_succ
: 
this
->
öã∫Æ_ªg_succ
(
tmp
); 
	gåy_f‹w¨dög
 = 
åue
; ;

2268 
	gbuf„r_node
<
	gT
, 
	gA
>::
ªm_succ
: 
this
->
öã∫Æ_ªm_succ
(
tmp
); ;

2269 
	gbuf„r_node
<
	gT
, 
	gA
>::
put_ôem
: 
öã∫Æ_push
(
tmp
); 
	gåy_f‹w¨dög
 = 
åue
; ;

2270 
	gbuf„r_node
<
	gT
, 
	gA
>::
åy_fwd_èsk
: 
öã∫Æ_f‹w¨d_èsk
(
tmp
); ;

2271 
	gbuf„r_node
<
	gT
, 
	gA
>::
ªl_ªs
: 
öã∫Æ_ªÀa£
(
tmp
); 
	gåy_f‹w¨dög
 = 
åue
; ;

2272 
	gbuf„r_node
<
	gT
, 
	gA
>::
c⁄_ªs
: 
öã∫Æ_c⁄sume
(
tmp
); 
	gåy_f‹w¨dög
 = 
åue
; ;

2273 
	gbuf„r_node
<
	gT
, 
	gA
>::
ªq_ôem
: 
öã∫Æ_p›
(
tmp
); ;

2274 
	gbuf„r_node
<
	gT
, 
	gA
>::
ªs_ôem
: 
öã∫Æ_ª£rve
(
tmp
); ;

2275 #i‡
TBB_PREVIEW_FLOW_GRAPH_FEATURES


2276 
	gbuf„r_node
<
	gT
, 
	gA
>::
add_b…_succ
: 
this
->
öã∫Æ_add_buût_succ
(
tmp
); ;

2277 
	gbuf„r_node
<
	gT
, 
	gA
>::
dñ_b…_succ
: 
this
->
öã∫Æ_dñ_buût_succ
(
tmp
); ;

2278 
	gbuf„r_node
<
	gT
, 
	gA
>::
add_b…_¥ed
: 
this
->
öã∫Æ_add_buût_¥ed
(
tmp
); ;

2279 
	gbuf„r_node
<
	gT
, 
	gA
>::
dñ_b…_¥ed
: 
this
->
öã∫Æ_dñ_buût_¥ed
(
tmp
); ;

2280 
	gbuf„r_node
<
	gT
, 
	gA
>::
b…_succ_˙t
: 
this
->
öã∫Æ_succ_˙t
(
tmp
); ;

2281 
	gbuf„r_node
<
	gT
, 
	gA
>::
b…_¥ed_˙t
: 
this
->
öã∫Æ_¥ed_˙t
(
tmp
); ;

2282 
	gbuf„r_node
<
	gT
, 
	gA
>::
b…_succ_˝y
: 
this
->
öã∫Æ_c›y_succs
(
tmp
); ;

2283 
	gbuf„r_node
<
	gT
, 
	gA
>::
b…_¥ed_˝y
: 
this
->
öã∫Æ_c›y_¥eds
(
tmp
); ;

2288 i‡(
	gm¨k
<
	gthis
->
	gmy_èû
Ë
hópify
();

2289 i‡(
	gåy_f‹w¨dög
 && !
	gthis
->
	gf‹w¨dî_busy
) {

2290 
èsk
* 
	gç
 = 
this
->
my_gøph
.
roŸ_èsk
();

2291 if(
	gç
) {

2292 
	gthis
->
	gf‹w¨dî_busy
 = 
åue
;

2293 
èsk
 *
	g√w_èsk
 = 
√w
—ask::
Æloˇã_addôi⁄Æ_chûd_of
(*
ç
)Ë
öã∫Æ
::

2294 
f‹w¨d_èsk_by∑ss


2295 < 
buf„r_node
<
öput_ty≥
, 
	gA
> >(*
	gthis
);

2298 
	gtbb
::
èsk
 *
tmp1
 = 
tmp
->
…ask
;

2299 
	gtmp
->
	g…ask
 = 
comböe_èsks
(
tmp1
, 
√w_èsk
);

2305  
öã∫Æ_f‹w¨d_èsk
(
¥io_›î©i⁄
 *
›
) {

2306 
T
 
	gi_c›y
;

2307 
èsk
 * 
	gœ°_èsk
 = 
NULL
;

2308 
size_ty≥
 
	gcou¡î
 = 
this
->
my_suc˚ss‹s
.
size
();

2310 i‡(
	gthis
->
	gmy_ª£rved
 ||Åhis->
	gmy_èû
 == 0) {

2311 
__TBB_°‹e_wôh_ªÀa£
(
›
->
°©us
, 
FAILED
);

2312 
	gthis
->
	gf‹w¨dî_busy
 = 
Ál£
;

2316 
	gcou¡î
>0 && 
	gthis
->
	gmy_èû
 > 0) {

2317 
	gi_c›y
 = 
this
->
gë_my_ôem
(0);

2318 
èsk
 * 
	g√w_èsk
 = 
this
->
my_suc˚ss‹s
.
åy_put_èsk
(
i_c›y
);

2319 i‡–
	g√w_èsk
 ) {

2320 
	gœ°_èsk
 = 
comböe_èsks
(
œ°_èsk
, 
√w_èsk
);

2321 
	gthis
->
de°roy_ôem
(0);

2322 i‡(
	gm¨k
 =
this
->
my_èû
Ë--
m¨k
;

2323 if(--(
	gthis
->
	gmy_èû
)) {

2324 
	gthis
->
move_ôem
(0,
this
->
my_èû
);

2326 i‡(
	gthis
->
	gmy_èû
 > 1)

2327 
ªhóp
();

2329 --
	gcou¡î
;

2331 
	g›
->
	g…ask
 = 
œ°_èsk
;

2332 i‡(
	gœ°_èsk
 && !
	gcou¡î
)

2333 
__TBB_°‹e_wôh_ªÀa£
(
›
->
°©us
, 
SUCCEEDED
);

2335 
__TBB_°‹e_wôh_ªÀa£
(
›
->
°©us
, 
FAILED
);

2336 
	gthis
->
	gf‹w¨dî_busy
 = 
Ál£
;

2340  
öã∫Æ_push
(
¥io_›î©i⁄
 *
›
) {

2341 i‡–
	gthis
->
	gmy_èû
 >
this
->
my_¨øy_size
 )

2342 
this
->
grow_my_¨øy
–this->
my_èû
 + 1 );

2343 (Ë
	gthis
->
∂a˚_ôem
(
this
->
my_èû
, *(
›
->
ñem
));

2344 ++(
	gthis
->
	gmy_èû
);

2345 
__TBB_°‹e_wôh_ªÀa£
(
›
->
°©us
, 
SUCCEEDED
);

2348  
öã∫Æ_p›
(
¥io_›î©i⁄
 *
›
) {

2350 i‡–
	gthis
->
	gmy_ª£rved
 =
åue
 || 
this
->
my_èû
 == 0 ) {

2351 
__TBB_°‹e_wôh_ªÀa£
(
›
->
°©us
, 
FAILED
);

2354 i‡(
	gm¨k
<
	gthis
->
	gmy_èû
 &&

2355 
com∑ª
(
this
->
gë_my_ôem
(0),

2356 
this
->
gë_my_ôem
—his->
my_èû
-1))) {

2359 
	gthis
->
„tch_ôem
(
this
->
my_èû
-1, *(
›
->
ñem
));

2360 
__TBB_°‹e_wôh_ªÀa£
(
›
->
°©us
, 
SUCCEEDED
);

2361 --(
	gthis
->
	gmy_èû
);

2365 *(
	g›
->
	gñem
Ë
this
->
gë_my_ôem
(0);

2366 
__TBB_°‹e_wôh_ªÀa£
(
›
->
°©us
, 
SUCCEEDED
);

2367 i‡(
	gm¨k
 =
this
->
my_èû
Ë--
m¨k
;

2368 
__TBB_ASSERT
(
this
->
my_ôem_vÆid
—his->
my_èû
 - 1), 
NULL
);

2369 if(--(
	gthis
->
	gmy_èû
)) {

2372 
	gthis
->
£t_my_ôem
(0,
this
->
gë_my_ôem
—his->
my_èû
));

2374 
	gthis
->
de°roy_ôem
(
this
->
my_èû
);

2375 i‡(
	gthis
->
	gmy_èû
 > 1)

2376 
ªhóp
();

2379  
öã∫Æ_ª£rve
(
¥io_›î©i⁄
 *
›
) {

2380 i‡(
	gthis
->
	gmy_ª£rved
 =
åue
 || 
this
->
my_èû
 == 0) {

2381 
__TBB_°‹e_wôh_ªÀa£
(
›
->
°©us
, 
FAILED
);

2384 
	gthis
->
	gmy_ª£rved
 = 
åue
;

2385 *(
	g›
->
	gñem
Ë
ª£rved_ôem
 = 
this
->
gë_my_ôem
(0);

2386 i‡(
	gm¨k
 =
this
->
my_èû
Ë--
m¨k
;

2387 --(
	gthis
->
	gmy_èû
);

2388 
__TBB_°‹e_wôh_ªÀa£
(
›
->
°©us
, 
SUCCEEDED
);

2389 
	gthis
->
£t_my_ôem
(0, 
this
->
gë_my_ôem
—his->
my_èû
));

2390 
	gthis
->
de°roy_ôem
(
this
->
my_èû
);

2391 i‡(
	gthis
->
	gmy_èû
 > 1)

2392 
ªhóp
();

2395  
öã∫Æ_c⁄sume
(
¥io_›î©i⁄
 *
›
) {

2396 
	gthis
->
	gmy_ª£rved
 = 
Ál£
;

2397 
__TBB_°‹e_wôh_ªÀa£
(
›
->
°©us
, 
SUCCEEDED
);

2399  
öã∫Æ_ªÀa£
(
¥io_›î©i⁄
 *
›
) {

2400 i‡(
	gthis
->
	gmy_èû
 >
this
->
my_¨øy_size
)

2401 
this
->
grow_my_¨øy
–this->
my_èû
 + 1 );

2402 
	gthis
->
£t_my_ôem
(
this
->
my_èû
, 
ª£rved_ôem
);

2403 ++(
	gthis
->
	gmy_èû
);

2404 
	gthis
->
	gmy_ª£rved
 = 
Ál£
;

2405 
__TBB_°‹e_wôh_ªÀa£
(
›
->
°©us
, 
SUCCEEDED
);

2406 
hópify
();

2408 
	g¥iv©e
:

2409 
Com∑ª
 
com∑ª
;

2410 
size_ty≥
 
	gm¨k
;

2411 
öput_ty≥
 
	gª£rved_ôem
;

2414 
hópify
() {

2415 i‡(!
	gm¨k
) mark = 1;

2416 ; 
	gm¨k
<
	gthis
->
	gmy_èû
; ++mark) {

2417 
size_ty≥
 
	gcur_pos
 = 
m¨k
;

2418 
öput_ty≥
 
	gto_∂a˚
;

2419 
	gthis
->
„tch_ôem
(
m¨k
,
to_∂a˚
);

2421 
size_ty≥
 
	g∑ª¡
 = (
cur_pos
-1)>>1;

2422 i‡(!
com∑ª
(
this
->
gë_my_ôem
(
∑ª¡
), 
to_∂a˚
))

2424 
	gthis
->
move_ôem
(
cur_pos
, 
∑ª¡
);

2425 
	gcur_pos
 = 
∑ª¡
;

2426 }  
	gcur_pos
 );

2427 (Ë
	gthis
->
∂a˚_ôem
(
cur_pos
, 
to_∂a˚
);

2432 
ªhóp
() {

2433 
size_ty≥
 
	gcur_pos
=0, 
	gchûd
=1;

2434 
	gchûd
 < 
	gm¨k
) {

2435 
size_ty≥
 
	gèrgë
 = 
chûd
;

2436 i‡(
	gchûd
+1<
	gm¨k
 &&

2437 
com∑ª
(
this
->
gë_my_ôem
(
chûd
),

2438 
this
->
gë_my_ôem
(
chûd
+1)))

2439 ++
	gèrgë
;

2441 i‡(
com∑ª
(
this
->
gë_my_ôem
(
èrgë
),

2442 
this
->
gë_my_ôem
(
cur_pos
)))

2445 
	gthis
->
sw≠_ôems
(
cur_pos
, 
èrgë
);

2446 
	gcur_pos
 = 
èrgë
;

2447 
	gchûd
 = (
cur_pos
<<1)+1;

2456 
	gãm∂©e
< 
ty≥«me
 
	gT
 >

2457 
˛ass
 
	glimôî_node
 : 
public
 
gøph_node
,Öubli¯
	gª˚ivî
< 
	gT
 >,Öubli¯
	g£ndî
< T > {

2458 
	g¥Ÿe˘ed
:

2459 
usög
 
gøph_node
::
my_gøph
;

2460 
	gpublic
:

2461 
T
 
	töput_ty≥
;

2462 
T
 
	touçut_ty≥
;

2463 
	g£ndî
< 
	töput_ty≥
 > 
	t¥ede˚ss‹_ty≥
;

2464 
	gª˚ivî
< 
	touçut_ty≥
 > 
	tsuc˚ss‹_ty≥
;

2465 #i‡
TBB_PREVIEW_FLOW_GRAPH_FEATURES


2466 
	g°d
::
	tve˘‹
<
	tsuc˚ss‹_ty≥
 *> 
	tsuc˚ss‹_ve˘‹_ty≥
;

2467 
	g°d
::
	tve˘‹
<
	t¥ede˚ss‹_ty≥
 *> 
	t¥ede˚ss‹_ve˘‹_ty≥
;

2470 
	g¥iv©e
:

2471 
size_t
 
my_thªshﬁd
;

2472 
size_t
 
	gmy_cou¡
;

2473 
size_t
 
	gmy_åõs
;

2474 
	göã∫Æ
::
ª£rvabÀ_¥ede˚ss‹_ˇche
< 
T
, 
	g•ö_muãx
 > 
	gmy_¥ede˚ss‹s
;

2475 
•ö_muãx
 
	gmy_muãx
;

2476 
	göã∫Æ
::
brﬂdˇ°_ˇche
< 
T
 > 
my_suc˚ss‹s
;

2477 
	göô_de¸emít_¥ede˚ss‹s
;

2479 
‰õnd
 
˛ass
 
	göã∫Æ
::
f‹w¨d_èsk_by∑ss
< 
limôî_node
<
T
> >;

2482 
‰õnd
 
˛ass
 
	göã∫Æ
::
de¸emíãr
< 
limôî_node
<
T
> >;

2484 
boﬁ
 
check_c⁄dôi⁄s
() {

2485  ( 
	gmy_cou¡
 + 
	gmy_åõs
 < 
	gmy_thªshﬁd
 && !
	gmy_¥ede˚ss‹s
.
em±y
(Ë&& !
	gmy_suc˚ss‹s
.empty() );

2489 
èsk
 *
f‹w¨d_èsk
() {

2490 
öput_ty≥
 
	gv
;

2491 
èsk
 *
	grvÆ
 = 
NULL
;

2492 
boﬁ
 
	gª£rved
 = 
Ál£
;

2494 
	g•ö_muãx
::
sc›ed_lock
 
lock
(
my_muãx
);

2495 i‡–
check_c⁄dôi⁄s
() )

2496 ++
	gmy_åõs
;

2498  
	gNULL
;

2504 i‡–(
	gmy_¥ede˚ss‹s
.
åy_ª£rve
(
v
)Ë=
åue
 ){

2505 
ª£rved
=
åue
;

2506 i‡–(
	grvÆ
 = 
my_suc˚ss‹s
.
åy_put_èsk
(
v
)Ë!
NULL
 ){

2508 
•ö_muãx
::
sc›ed_lock
 
lock
(
my_muãx
);

2509 ++
	gmy_cou¡
;

2510 --
	gmy_åõs
;

2511 
	gmy_¥ede˚ss‹s
.
åy_c⁄sume
();

2512 i‡–
check_c⁄dôi⁄s
() ) {

2513 
èsk
* 
	gç
 = 
this
->
my_gøph
.
roŸ_èsk
();

2514 i‡–
	gç
 ) {

2515 
èsk
 *
	gπask
 = 
√w
 (Åask::
Æloˇã_addôi⁄Æ_chûd_of
–*
ç
 ) )

2516 
öã∫Æ
::
f‹w¨d_èsk_by∑ss
< 
limôî_node
<
T
> >–*
this
 );

2517 
FLOW_SPAWN
 (*
πask
);

2521  
	grvÆ
;

2528 
	g•ö_muãx
::
sc›ed_lock
 
lock
(
my_muãx
);

2529 --
	gmy_åõs
;

2530 i‡(
	gª£rved
Ë
	gmy_¥ede˚ss‹s
.
åy_ªÀa£
();

2531 i‡–
check_c⁄dôi⁄s
() ) {

2532 
èsk
* 
	gç
 = 
this
->
my_gøph
.
roŸ_èsk
();

2533 i‡–
	gç
 ) {

2534 
èsk
 *
	gπask
 = 
√w
 (Åask::
Æloˇã_addôi⁄Æ_chûd_of
–*
ç
 ) )

2535 
öã∫Æ
::
f‹w¨d_èsk_by∑ss
< 
limôî_node
<
T
> >–*
this
 );

2536 
__TBB_ASSERT
(!
rvÆ
, "HaveÅwoÅasksÅo handle");

2537  
	gπask
;

2540  
	grvÆ
;

2544 
f‹w¨d
() {

2545 
__TBB_ASSERT
(
Ál£
, "ShouldÇever be called");

2549 
èsk
 * 
de¸emít_cou¡î
() {

2551 
	g•ö_muãx
::
sc›ed_lock
 
lock
(
my_muãx
);

2552 if(
	gmy_cou¡
) --my_count;

2554  
f‹w¨d_èsk
();

2557 
	gpublic
:

2559 
öã∫Æ
::
de¸emíãr
< 
limôî_node
<
T
> > 
de¸emít
;

2562 
limôî_node
(
gøph
 &
g
, 
size_t
 
thªshﬁd
, 
num_de¸emít_¥ede˚ss‹s
=0) :

2563 
gøph_node
(
g
), 
my_thªshﬁd
(
thªshﬁd
), 
my_cou¡
(0), 
my_åõs
(0),

2564 
öô_de¸emít_¥ede˚ss‹s
(
num_de¸emít_¥ede˚ss‹s
),

2565 
de¸emít
(
num_de¸emít_¥ede˚ss‹s
)

2567 
	gmy_¥ede˚ss‹s
.
£t_ow√r
(
this
);

2568 
	gmy_suc˚ss‹s
.
£t_ow√r
(
this
);

2569 
	gde¸emít
.
£t_ow√r
(
this
);

2570 
	gtbb
::
öã∫Æ
::
fgt_node
–
tbb
::öã∫Æ::
FLOW_LIMITER_NODE
, &
this
->
my_gøph
,

2571 
°©ic_ˇ°
<
ª˚ivî
<
öput_ty≥
> *>(
this
), sètic_ˇ°<ª˚ivî<
c⁄töue_msg
> *>(&
de¸emít
),

2572 
°©ic_ˇ°
<
£ndî
<
ouçut_ty≥
> *>(
this
) );

2576 
limôî_node
–c⁄°Üimôî_node& 
§c
 ) :

2577 
gøph_node
(
§c
.
my_gøph
), 
	gª˚ivî
<
	gT
>(), 
	g£ndî
<T>(),

2578 
my_thªshﬁd
(
§c
.my_thªshﬁd), 
my_cou¡
(0), 
my_åõs
(0),

2579 
öô_de¸emít_¥ede˚ss‹s
(
§c
.init_decrement_predecessors),

2580 
de¸emít
(
§c
.
öô_de¸emít_¥ede˚ss‹s
)

2582 
	gmy_¥ede˚ss‹s
.
£t_ow√r
(
this
);

2583 
	gmy_suc˚ss‹s
.
£t_ow√r
(
this
);

2584 
	gde¸emít
.
£t_ow√r
(
this
);

2585 
	gtbb
::
öã∫Æ
::
fgt_node
–
tbb
::öã∫Æ::
FLOW_LIMITER_NODE
, &
this
->
my_gøph
,

2586 
°©ic_ˇ°
<
ª˚ivî
<
öput_ty≥
> *>(
this
), sètic_ˇ°<ª˚ivî<
c⁄töue_msg
> *>(&
de¸emít
),

2587 
°©ic_ˇ°
<
£ndî
<
ouçut_ty≥
> *>(
this
) );

2590 #i‡
TBB_PREVIEW_FLOW_GRAPH_TRACE


2591  
£t_«me
–c⁄° *
«me
 ) {

2592 
	gtbb
::
öã∫Æ
::
fgt_node_desc
–
this
, 
«me
 );

2597  
boﬁ
 
ªgi°î_suc˚ss‹
–
ª˚ivî
<
ouçut_ty≥
> &
r
 ) {

2598 
	g•ö_muãx
::
sc›ed_lock
 
lock
(
my_muãx
);

2599 
boﬁ
 
	gwas_em±y
 = 
my_suc˚ss‹s
.
em±y
();

2600 
	gmy_suc˚ss‹s
.
ªgi°î_suc˚ss‹
(
r
);

2602 i‡–
	gwas_em±y
 && !
	gmy_¥ede˚ss‹s
.
em±y
(Ë&& 
	gmy_cou¡
 + 
	gmy_åõs
 < 
	gmy_thªshﬁd
 ) {

2603 
èsk
* 
	gç
 = 
this
->
my_gøph
.
roŸ_èsk
();

2604 i‡–
	gç
 ) {

2605 
FLOW_SPAWN
–(* 
√w
 ( 
èsk
::
Æloˇã_addôi⁄Æ_chûd_of
–*
ç
 ) )

2606 
öã∫Æ
::
f‹w¨d_èsk_by∑ss
 < 
limôî_node
<
T
> >–*
this
 ) ) );

2609  
	gåue
;

2614  
boﬁ
 
ªmove_suc˚ss‹
–
ª˚ivî
<
ouçut_ty≥
> &
r
 ) {

2615 
	gr
.
ªmove_¥ede˚ss‹
(*
this
);

2616 
	gmy_suc˚ss‹s
.
ªmove_suc˚ss‹
(
r
);

2617  
	gåue
;

2620 #i‡
TBB_PREVIEW_FLOW_GRAPH_FEATURES


2621  
öã∫Æ_add_buût_suc˚ss‹
(
ª˚ivî
<
ouçut_ty≥
> &
§c
) {

2622 
	gmy_suc˚ss‹s
.
öã∫Æ_add_buût_suc˚ss‹
(
§c
);

2625  
öã∫Æ_dñëe_buût_suc˚ss‹
(
ª˚ivî
<
ouçut_ty≥
> &
§c
) {

2626 
	gmy_suc˚ss‹s
.
öã∫Æ_dñëe_buût_suc˚ss‹
(
§c
);

2629  
size_t
 
suc˚ss‹_cou¡
(Ë{  
	gmy_suc˚ss‹s
.successor_count(); }

2631  
c›y_suc˚ss‹s
(
suc˚ss‹_ve˘‹_ty≥
 &
v
) {

2632 
	gmy_suc˚ss‹s
.
c›y_suc˚ss‹s
(
v
);

2635  
öã∫Æ_add_buût_¥ede˚ss‹
(
£ndî
<
ouçut_ty≥
> &
§c
) {

2636 
	gmy_¥ede˚ss‹s
.
öã∫Æ_add_buût_¥ede˚ss‹
(
§c
);

2639  
öã∫Æ_dñëe_buût_¥ede˚ss‹
(
£ndî
<
ouçut_ty≥
> &
§c
) {

2640 
	gmy_¥ede˚ss‹s
.
öã∫Æ_dñëe_buût_¥ede˚ss‹
(
§c
);

2643  
size_t
 
¥ede˚ss‹_cou¡
(Ë{  
	gmy_¥ede˚ss‹s
.predecessor_count(); }

2645  
c›y_¥ede˚ss‹s
(
¥ede˚ss‹_ve˘‹_ty≥
 &
v
) {

2646 
	gmy_¥ede˚ss‹s
.
c›y_¥ede˚ss‹s
(
v
);

2651  
boﬁ
 
ªgi°î_¥ede˚ss‹
–
¥ede˚ss‹_ty≥
 &
§c
 ) {

2652 
	g•ö_muãx
::
sc›ed_lock
 
lock
(
my_muãx
);

2653 
	gmy_¥ede˚ss‹s
.
add
–
§c
 );

2654 
èsk
* 
	gç
 = 
this
->
my_gøph
.
roŸ_èsk
();

2655 i‡–
	gmy_cou¡
 + 
	gmy_åõs
 < 
	gmy_thªshﬁd
 && !
	gmy_suc˚ss‹s
.
em±y
(Ë&& 
	gç
 ) {

2656 
FLOW_SPAWN
–(* 
√w
 ( 
èsk
::
Æloˇã_addôi⁄Æ_chûd_of
–*
ç
 ) )

2657 
öã∫Æ
::
f‹w¨d_èsk_by∑ss
 < 
limôî_node
<
T
> >–*
this
 ) ) );

2659  
	gåue
;

2663  
boﬁ
 
ªmove_¥ede˚ss‹
–
¥ede˚ss‹_ty≥
 &
§c
 ) {

2664 
	gmy_¥ede˚ss‹s
.
ªmove
–
§c
 );

2665  
	gåue
;

2668 
	g¥Ÿe˘ed
:

2670 
ãm∂©e
< 
ty≥«me
 
R
,Åy≥«mê
	gB
 > 
‰õnd
 
˛ass
 
	grun_™d_put_èsk
;

2671 
	gãm∂©e
<
ty≥«me
 
	gX
,Åy≥«mê
	gY
> 
‰õnd
 
˛ass
 
	göã∫Æ
::
brﬂdˇ°_ˇche
;

2672 
	gãm∂©e
<
ty≥«me
 
	gX
,Åy≥«mê
	gY
> 
‰õnd
 
˛ass
 
	göã∫Æ
::
round_robö_ˇche
;

2674  
èsk
 *
åy_put_èsk
–c⁄° 
T
 &
t
 ) {

2676 
	g•ö_muãx
::
sc›ed_lock
 
lock
(
my_muãx
);

2677 i‡–
	gmy_cou¡
 + 
	gmy_åõs
 >
my_thªshﬁd
 )

2678  
NULL
;

2680 ++
	gmy_åõs
;

2683 
èsk
 * 
	gπask
 = 
my_suc˚ss‹s
.
åy_put_èsk
(
t
);

2685 i‡–!
	gπask
 ) {

2686 
	g•ö_muãx
::
sc›ed_lock
 
lock
(
my_muãx
);

2687 --
	gmy_åõs
;

2688 
èsk
* 
	gç
 = 
this
->
my_gøph
.
roŸ_èsk
();

2689 i‡–
check_c⁄dôi⁄s
(Ë&& 
	gç
 ) {

2690 
	gπask
 = 
√w
 ( 
èsk
::
Æloˇã_addôi⁄Æ_chûd_of
–*
ç
 ) )

2691 
öã∫Æ
::
f‹w¨d_èsk_by∑ss
< 
limôî_node
<
T
> >–*
this
 );

2695 
	g•ö_muãx
::
sc›ed_lock
 
lock
(
my_muãx
);

2696 ++
	gmy_cou¡
;

2697 --
	gmy_åõs
;

2699  
	gπask
;

2702  
ª£t
–
__TBB_PFG_RESET_ARG
(
ª£t_Êags
 
f
)) {

2703 
	gmy_cou¡
 = 0;

2704 
	gmy_¥ede˚ss‹s
.
ª£t
(
__TBB_PFG_RESET_ARG
(
f
));

2705 
	gde¸emít
.
ª£t_ª˚ivî
(
__TBB_PFG_RESET_ARG
(
f
));

2706 #i‡
TBB_PREVIEW_FLOW_GRAPH_FEATURES


2707 
	gmy_suc˚ss‹s
.
ª£t
(
f
);

2711  
ª£t_ª˚ivî
(
__TBB_PFG_RESET_ARG
(
ª£t_Êags
 
f
)Ë{ 
	gmy_¥ede˚ss‹s
.
ª£t
(__TBB_PFG_RESET_ARG(f)); }

2714 
	~"öã∫Æ/_Êow_gøph_joö_im∂.h
"

2716 
usög
 
	göã∫Æ
::
ª£rvög_p‹t
;

2717 
usög
 
	göã∫Æ
::
queueög_p‹t
;

2718 
usög
 
	göã∫Æ
::
èg_m©chög_p‹t
;

2719 
usög
 
	göã∫Æ
::
öput_p‹t
;

2720 
usög
 
	göã∫Æ
::
èg_vÆue
;

2721 
usög
 
	göã∫Æ
::
NO_TAG
;

2723 
	gãm∂©e
<
ty≥«me
 
	gOuçutTu∂e
, 
gøph_buf„r_pﬁicy
 
	gJP
=
queueög
> 
˛ass
 
joö_node
;

2725 
	gãm∂©e
<
ty≥«me
 
	gOuçutTu∂e
>

2726 
˛ass
 
	gjoö_node
<
	gOuçutTu∂e
,
	gª£rvög
>: 
public
 
öã∫Æ
::
unfﬁded_joö_node
<
tbb
::
Êow
::
tu∂e_size
<
OuçutTu∂e
>::
vÆue
, 
	gª£rvög_p‹t
, OutputTuple,Ñeserving> {

2727 
	g¥iv©e
:

2728 c⁄° 
N
 = 
tbb
::
Êow
::
tu∂e_size
<
OuçutTu∂e
>::
vÆue
;

2729 
ty≥«me
 
	töã∫Æ
::
	tunfﬁded_joö_node
<
	tN
, 
	tª£rvög_p‹t
, 
	tOuçutTu∂e
, 
	tª£rvög
> 
	tunfﬁded_ty≥
;

2730 
	gpublic
:

2731 
OuçutTu∂e
 
	touçut_ty≥
;

2732 
ty≥«me
 
	tunfﬁded_ty≥
::
	töput_p‹ts_ty≥
 input_ports_type;

2733 
joö_node
(
gøph
 &
g
Ë: 
unfﬁded_ty≥
(g) {

2734 
tbb
::
öã∫Æ
::
fgt_mu…iöput_node
<
OuçutTu∂e
,
	gN
>–
	gtbb
::öã∫Æ::
FLOW_JOIN_NODE_RESERVING
, &
	gthis
->
	gmy_gøph
,

2735 
	gthis
->
öput_p‹ts
(), 
	g°©ic_ˇ°
< 
	g£ndî
< 
	gouçut_ty≥
 > *>(this) );

2737 
joö_node
(c⁄° joö_nodê&
Ÿhî
Ë: 
unfﬁded_ty≥
(other) {

2738 
tbb
::
öã∫Æ
::
fgt_mu…iöput_node
<
OuçutTu∂e
,
	gN
>–
	gtbb
::öã∫Æ::
FLOW_JOIN_NODE_RESERVING
, &
	gthis
->
	gmy_gøph
,

2739 
	gthis
->
öput_p‹ts
(), 
	g°©ic_ˇ°
< 
	g£ndî
< 
	gouçut_ty≥
 > *>(this) );

2742 #i‡
TBB_PREVIEW_FLOW_GRAPH_TRACE


2743  
£t_«me
–c⁄° *
«me
 ) {

2744 
	gtbb
::
öã∫Æ
::
fgt_node_desc
–
this
, 
«me
 );

2750 
	gãm∂©e
<
ty≥«me
 
	gOuçutTu∂e
>

2751 
˛ass
 
	gjoö_node
<
	gOuçutTu∂e
,
	gqueueög
>: 
public
 
öã∫Æ
::
unfﬁded_joö_node
<
tbb
::
Êow
::
tu∂e_size
<
OuçutTu∂e
>::
vÆue
, 
	gqueueög_p‹t
, OutputTuple, queueing> {

2752 
	g¥iv©e
:

2753 c⁄° 
N
 = 
tbb
::
Êow
::
tu∂e_size
<
OuçutTu∂e
>::
vÆue
;

2754 
ty≥«me
 
	töã∫Æ
::
	tunfﬁded_joö_node
<
	tN
, 
	tqueueög_p‹t
, 
	tOuçutTu∂e
, 
	tqueueög
> 
	tunfﬁded_ty≥
;

2755 
	gpublic
:

2756 
OuçutTu∂e
 
	touçut_ty≥
;

2757 
ty≥«me
 
	tunfﬁded_ty≥
::
	töput_p‹ts_ty≥
 input_ports_type;

2758 
joö_node
(
gøph
 &
g
Ë: 
unfﬁded_ty≥
(g) {

2759 
tbb
::
öã∫Æ
::
fgt_mu…iöput_node
<
OuçutTu∂e
,
	gN
>–
	gtbb
::öã∫Æ::
FLOW_JOIN_NODE_QUEUEING
, &
	gthis
->
	gmy_gøph
,

2760 
	gthis
->
öput_p‹ts
(), 
	g°©ic_ˇ°
< 
	g£ndî
< 
	gouçut_ty≥
 > *>(this) );

2762 
joö_node
(c⁄° joö_nodê&
Ÿhî
Ë: 
unfﬁded_ty≥
(other) {

2763 
tbb
::
öã∫Æ
::
fgt_mu…iöput_node
<
OuçutTu∂e
,
	gN
>–
	gtbb
::öã∫Æ::
FLOW_JOIN_NODE_QUEUEING
, &
	gthis
->
	gmy_gøph
,

2764 
	gthis
->
öput_p‹ts
(), 
	g°©ic_ˇ°
< 
	g£ndî
< 
	gouçut_ty≥
 > *>(this) );

2767 #i‡
TBB_PREVIEW_FLOW_GRAPH_TRACE


2768  
£t_«me
–c⁄° *
«me
 ) {

2769 
	gtbb
::
öã∫Æ
::
fgt_node_desc
–
this
, 
«me
 );

2776 
	gãm∂©e
<
ty≥«me
 
	gOuçutTu∂e
>

2777 
˛ass
 
	gjoö_node
<
	gOuçutTu∂e
, 
	gèg_m©chög
> : 
public
 
öã∫Æ
::
unfﬁded_joö_node
<
tbb
::
Êow
::
tu∂e_size
<
OuçutTu∂e
>::
vÆue
,

2778 
	gèg_m©chög_p‹t
, 
	gOuçutTu∂e
, 
	gèg_m©chög
> {

2779 
	g¥iv©e
:

2780 c⁄° 
N
 = 
tbb
::
Êow
::
tu∂e_size
<
OuçutTu∂e
>::
vÆue
;

2781 
ty≥«me
 
	töã∫Æ
::
	tunfﬁded_joö_node
<
	tN
, 
	tèg_m©chög_p‹t
, 
	tOuçutTu∂e
, 
	tèg_m©chög
> 
	tunfﬁded_ty≥
;

2782 
	gpublic
:

2783 
OuçutTu∂e
 
	touçut_ty≥
;

2784 
ty≥«me
 
	tunfﬁded_ty≥
::
	töput_p‹ts_ty≥
 input_ports_type;

2786 
	gãm∂©e
<
ty≥«me
 
	g__TBB_B0
,Åy≥«mê
	g__TBB_B1
>

2787 
joö_node
(
gøph
 &
g
, 
__TBB_B0
 
b0
, 
__TBB_B1
 
b1
Ë: 
unfﬁded_ty≥
(g, b0, b1) {

2788 
	gtbb
::
öã∫Æ
::
fgt_mu…iöput_node
<
OuçutTu∂e
,
	gN
>–tbb::öã∫Æ::
FLOW_JOIN_NODE_TAG_MATCHING
, &
	gthis
->
	gmy_gøph
,

2789 
	gthis
->
öput_p‹ts
(), 
	g°©ic_ˇ°
< 
	g£ndî
< 
	gouçut_ty≥
 > *>(this) );

2791 
	gãm∂©e
<
ty≥«me
 
	g__TBB_B0
,Åy≥«mê
	g__TBB_B1
,Åy≥«mê
	g__TBB_B2
>

2792 
joö_node
(
gøph
 &
g
, 
__TBB_B0
 
b0
, 
__TBB_B1
 
b1
, 
__TBB_B2
 
b2
Ë: 
unfﬁded_ty≥
(g, b0, b1, b2) {

2793 
	gtbb
::
öã∫Æ
::
fgt_mu…iöput_node
<
OuçutTu∂e
,
	gN
>–tbb::öã∫Æ::
FLOW_JOIN_NODE_TAG_MATCHING
, &
	gthis
->
	gmy_gøph
,

2794 
	gthis
->
öput_p‹ts
(), 
	g°©ic_ˇ°
< 
	g£ndî
< 
	gouçut_ty≥
 > *>(this) );

2796 
	gãm∂©e
<
ty≥«me
 
	g__TBB_B0
,Åy≥«mê
	g__TBB_B1
,Åy≥«mê
	g__TBB_B2
,Åy≥«mê
	g__TBB_B3
>

2797 
joö_node
(
gøph
 &
g
, 
__TBB_B0
 
b0
, 
__TBB_B1
 
b1
, 
__TBB_B2
 
b2
, 
__TBB_B3
 
b3
Ë: 
unfﬁded_ty≥
(g, b0, b1, b2, b3) {

2798 
	gtbb
::
öã∫Æ
::
fgt_mu…iöput_node
<
OuçutTu∂e
,
	gN
>–tbb::öã∫Æ::
FLOW_JOIN_NODE_TAG_MATCHING
, &
	gthis
->
	gmy_gøph
,

2799 
	gthis
->
öput_p‹ts
(), 
	g°©ic_ˇ°
< 
	g£ndî
< 
	gouçut_ty≥
 > *>(this) );

2801 
	gãm∂©e
<
ty≥«me
 
	g__TBB_B0
,Åy≥«mê
	g__TBB_B1
,Åy≥«mê
	g__TBB_B2
,Åy≥«mê
	g__TBB_B3
,Åy≥«mê
	g__TBB_B4
>

2802 
joö_node
(
gøph
 &
g
, 
__TBB_B0
 
b0
, 
__TBB_B1
 
b1
, 
__TBB_B2
 
b2
, 
__TBB_B3
 
b3
, 
__TBB_B4
 
b4
) :

2803 
unfﬁded_ty≥
(
g
, 
b0
, 
b1
, 
b2
, 
b3
, 
b4
) {

2804 
	gtbb
::
öã∫Æ
::
fgt_mu…iöput_node
<
OuçutTu∂e
,
	gN
>–tbb::öã∫Æ::
FLOW_JOIN_NODE_TAG_MATCHING
, &
	gthis
->
	gmy_gøph
,

2805 
	gthis
->
öput_p‹ts
(), 
	g°©ic_ˇ°
< 
	g£ndî
< 
	gouçut_ty≥
 > *>(this) );

2807 #i‡
__TBB_VARIADIC_MAX
 >= 6

2808 
	gãm∂©e
<
ty≥«me
 
	g__TBB_B0
,Åy≥«mê
	g__TBB_B1
,Åy≥«mê
	g__TBB_B2
,Åy≥«mê
	g__TBB_B3
,Åy≥«mê
	g__TBB_B4
,

2809 
ty≥«me
 
	g__TBB_B5
>

2810 
joö_node
(
gøph
 &
g
, 
__TBB_B0
 
b0
, 
__TBB_B1
 
b1
, 
__TBB_B2
 
b2
, 
__TBB_B3
 
b3
, 
__TBB_B4
 
b4
, 
__TBB_B5
 
b5
) :

2811 
unfﬁded_ty≥
(
g
, 
b0
, 
b1
, 
b2
, 
b3
, 
b4
, 
b5
) {

2812 
	gtbb
::
öã∫Æ
::
fgt_mu…iöput_node
<
OuçutTu∂e
,
	gN
>–tbb::öã∫Æ::
FLOW_JOIN_NODE_TAG_MATCHING
, &
	gthis
->
	gmy_gøph
,

2813 
	gthis
->
öput_p‹ts
(), 
	g°©ic_ˇ°
< 
	g£ndî
< 
	gouçut_ty≥
 > *>(this) );

2816 #i‡
__TBB_VARIADIC_MAX
 >= 7

2817 
	gãm∂©e
<
ty≥«me
 
	g__TBB_B0
,Åy≥«mê
	g__TBB_B1
,Åy≥«mê
	g__TBB_B2
,Åy≥«mê
	g__TBB_B3
,Åy≥«mê
	g__TBB_B4
,

2818 
ty≥«me
 
	g__TBB_B5
,Åy≥«mê
	g__TBB_B6
>

2819 
joö_node
(
gøph
 &
g
, 
__TBB_B0
 
b0
, 
__TBB_B1
 
b1
, 
__TBB_B2
 
b2
, 
__TBB_B3
 
b3
, 
__TBB_B4
 
b4
, 
__TBB_B5
 
b5
, 
__TBB_B6
 
b6
) :

2820 
unfﬁded_ty≥
(
g
, 
b0
, 
b1
, 
b2
, 
b3
, 
b4
, 
b5
, 
b6
) {

2821 
	gtbb
::
öã∫Æ
::
fgt_mu…iöput_node
<
OuçutTu∂e
,
	gN
>–tbb::öã∫Æ::
FLOW_JOIN_NODE_TAG_MATCHING
, &
	gthis
->
	gmy_gøph
,

2822 
	gthis
->
öput_p‹ts
(), 
	g°©ic_ˇ°
< 
	g£ndî
< 
	gouçut_ty≥
 > *>(this) );

2825 #i‡
__TBB_VARIADIC_MAX
 >= 8

2826 
	gãm∂©e
<
ty≥«me
 
	g__TBB_B0
,Åy≥«mê
	g__TBB_B1
,Åy≥«mê
	g__TBB_B2
,Åy≥«mê
	g__TBB_B3
,Åy≥«mê
	g__TBB_B4
,

2827 
ty≥«me
 
	g__TBB_B5
,Åy≥«mê
	g__TBB_B6
,Åy≥«mê
	g__TBB_B7
>

2828 
joö_node
(
gøph
 &
g
, 
__TBB_B0
 
b0
, 
__TBB_B1
 
b1
, 
__TBB_B2
 
b2
, 
__TBB_B3
 
b3
, 
__TBB_B4
 
b4
, 
__TBB_B5
 
b5
, 
__TBB_B6
 
b6
,

2829 
__TBB_B7
 
b7
Ë: 
unfﬁded_ty≥
(
g
, 
b0
, 
b1
, 
b2
, 
b3
, 
b4
, 
b5
, 
b6
, b7) {

2830 
	gtbb
::
öã∫Æ
::
fgt_mu…iöput_node
<
OuçutTu∂e
,
	gN
>–tbb::öã∫Æ::
FLOW_JOIN_NODE_TAG_MATCHING
, &
	gthis
->
	gmy_gøph
,

2831 
	gthis
->
öput_p‹ts
(), 
	g°©ic_ˇ°
< 
	g£ndî
< 
	gouçut_ty≥
 > *>(this) );

2834 #i‡
__TBB_VARIADIC_MAX
 >= 9

2835 
	gãm∂©e
<
ty≥«me
 
	g__TBB_B0
,Åy≥«mê
	g__TBB_B1
,Åy≥«mê
	g__TBB_B2
,Åy≥«mê
	g__TBB_B3
,Åy≥«mê
	g__TBB_B4
,

2836 
ty≥«me
 
	g__TBB_B5
,Åy≥«mê
	g__TBB_B6
,Åy≥«mê
	g__TBB_B7
,Åy≥«mê
	g__TBB_B8
>

2837 
joö_node
(
gøph
 &
g
, 
__TBB_B0
 
b0
, 
__TBB_B1
 
b1
, 
__TBB_B2
 
b2
, 
__TBB_B3
 
b3
, 
__TBB_B4
 
b4
, 
__TBB_B5
 
b5
, 
__TBB_B6
 
b6
,

2838 
__TBB_B7
 
b7
, 
__TBB_B8
 
b8
Ë: 
unfﬁded_ty≥
(
g
, 
b0
, 
b1
, 
b2
, 
b3
, 
b4
, 
b5
, 
b6
, b7, b8) {

2839 
	gtbb
::
öã∫Æ
::
fgt_mu…iöput_node
<
OuçutTu∂e
,
	gN
>–tbb::öã∫Æ::
FLOW_JOIN_NODE_TAG_MATCHING
, &
	gthis
->
	gmy_gøph
,

2840 
	gthis
->
öput_p‹ts
(), 
	g°©ic_ˇ°
< 
	g£ndî
< 
	gouçut_ty≥
 > *>(this) );

2843 #i‡
__TBB_VARIADIC_MAX
 >= 10

2844 
	gãm∂©e
<
ty≥«me
 
	g__TBB_B0
,Åy≥«mê
	g__TBB_B1
,Åy≥«mê
	g__TBB_B2
,Åy≥«mê
	g__TBB_B3
,Åy≥«mê
	g__TBB_B4
,

2845 
ty≥«me
 
	g__TBB_B5
,Åy≥«mê
	g__TBB_B6
,Åy≥«mê
	g__TBB_B7
,Åy≥«mê
	g__TBB_B8
,Åy≥«mê
	g__TBB_B9
>

2846 
joö_node
(
gøph
 &
g
, 
__TBB_B0
 
b0
, 
__TBB_B1
 
b1
, 
__TBB_B2
 
b2
, 
__TBB_B3
 
b3
, 
__TBB_B4
 
b4
, 
__TBB_B5
 
b5
, 
__TBB_B6
 
b6
,

2847 
__TBB_B7
 
b7
, 
__TBB_B8
 
b8
, 
__TBB_B9
 
b9
Ë: 
unfﬁded_ty≥
(
g
, 
b0
, 
b1
, 
b2
, 
b3
, 
b4
, 
b5
, 
b6
, b7, b8, b9) {

2848 
	gtbb
::
öã∫Æ
::
fgt_mu…iöput_node
<
OuçutTu∂e
,
	gN
>–tbb::öã∫Æ::
FLOW_JOIN_NODE_TAG_MATCHING
, &
	gthis
->
	gmy_gøph
,

2849 
	gthis
->
öput_p‹ts
(), 
	g°©ic_ˇ°
< 
	g£ndî
< 
	gouçut_ty≥
 > *>(this) );

2852 
joö_node
(c⁄° joö_nodê&
Ÿhî
Ë: 
unfﬁded_ty≥
(other) {

2853 
tbb
::
öã∫Æ
::
fgt_mu…iöput_node
<
OuçutTu∂e
,
	gN
>–
	gtbb
::öã∫Æ::
FLOW_JOIN_NODE_TAG_MATCHING
, &
	gthis
->
	gmy_gøph
,

2854 
	gthis
->
öput_p‹ts
(), 
	g°©ic_ˇ°
< 
	g£ndî
< 
	gouçut_ty≥
 > *>(this) );

2857 #i‡
TBB_PREVIEW_FLOW_GRAPH_TRACE


2858  
£t_«me
–c⁄° *
«me
 ) {

2859 
	gtbb
::
öã∫Æ
::
fgt_node_desc
–
this
, 
«me
 );

2866 
	~"öã∫Æ/_Êow_gøph_ödexî_im∂.h
"

2868 
	södexî_nuŒ_ty≥
 {};

2870 
	gãm∂©e
<
ty≥«me
 
	gT0
,Åy≥«mê
	gT1
=
ödexî_nuŒ_ty≥
,Åy≥«mê
	gT2
=ödexî_nuŒ_ty≥,Åy≥«mê
	gT3
=indexer_null_type,

2871 
ty≥«me
 
	gT4
=
ödexî_nuŒ_ty≥
,Åy≥«mê
	gT5
=ödexî_nuŒ_ty≥,Åy≥«mê
	gT6
=indexer_null_type,

2872 
ty≥«me
 
	gT7
=
ödexî_nuŒ_ty≥
,Åy≥«mê
	gT8
=ödexî_nuŒ_ty≥,Åy≥«mê
	gT9
=ödexî_nuŒ_ty≥> 
˛ass
 
ödexî_node
;

2875 
	gãm∂©e
<
ty≥«me
 
	gT0
>

2876 
˛ass
 
	gödexî_node
<
	gT0
> : 
public
 
öã∫Æ
::
unfﬁded_ödexî_node
<
tu∂e
<
T0
> > {

2877 
¥iv©e
:

2878 c⁄° 
N
 = 1;

2879 
	gpublic
:

2880 
tu∂e
<
	tT0
> 
	tI≈utTu∂e
;

2881 
ty≥«me
 
	töã∫Æ
::
	tègged_msg
<
	tsize_t
, 
	tT0
> 
	touçut_ty≥
;

2882 
ty≥«me
 
	töã∫Æ
::
	tunfﬁded_ödexî_node
<
	tI≈utTu∂e
> 
	tunfﬁded_ty≥
;

2883 
ödexî_node
(
gøph
& 
g
Ë: 
unfﬁded_ty≥
(g) {

2884 
tbb
::
öã∫Æ
::
fgt_mu…iöput_node
<
I≈utTu∂e
,
	gN
>–
	gtbb
::öã∫Æ::
FLOW_INDEXER_NODE
, &
	gthis
->
	gmy_gøph
,

2885 
	gthis
->
öput_p‹ts
(), 
	g°©ic_ˇ°
< 
	g£ndî
< 
	gouçut_ty≥
 > *>(this) );

2888 
ödexî_node
–c⁄° indexî_node& 
Ÿhî
 ) : 
unfﬁded_ty≥
(other) {

2889 
tbb
::
öã∫Æ
::
fgt_mu…iöput_node
<
I≈utTu∂e
,
	gN
>–
	gtbb
::öã∫Æ::
FLOW_INDEXER_NODE
, &
	gthis
->
	gmy_gøph
,

2890 
	gthis
->
öput_p‹ts
(), 
	g°©ic_ˇ°
< 
	g£ndî
< 
	gouçut_ty≥
 > *>(this) );

2893 #i‡
TBB_PREVIEW_FLOW_GRAPH_TRACE


2894 
£t_«me
–c⁄° *
«me
 ) {

2895 
	gtbb
::
öã∫Æ
::
fgt_node_desc
–
this
, 
«me
 );

2900 
	gãm∂©e
<
ty≥«me
 
	gT0
,Åy≥«mê
	gT1
>

2901 
˛ass
 
	gödexî_node
<
	gT0
, 
	gT1
> : 
public
 
öã∫Æ
::
unfﬁded_ödexî_node
<
tu∂e
<
T0
, T1> > {

2902 
	g¥iv©e
:

2903 c⁄° 
N
 = 2;

2904 
	gpublic
:

2905 
tu∂e
<
	tT0
, 
	tT1
> 
	tI≈utTu∂e
;

2906 
ty≥«me
 
	töã∫Æ
::
	tègged_msg
<
	tsize_t
, 
	tT0
, 
	tT1
> 
	touçut_ty≥
;

2907 
ty≥«me
 
	töã∫Æ
::
	tunfﬁded_ödexî_node
<
	tI≈utTu∂e
> 
	tunfﬁded_ty≥
;

2908 
ödexî_node
(
gøph
& 
g
Ë: 
unfﬁded_ty≥
(g) {

2909 
tbb
::
öã∫Æ
::
fgt_mu…iöput_node
<
I≈utTu∂e
,
	gN
>–
	gtbb
::öã∫Æ::
FLOW_INDEXER_NODE
, &
	gthis
->
	gmy_gøph
,

2910 
	gthis
->
öput_p‹ts
(), 
	g°©ic_ˇ°
< 
	g£ndî
< 
	gouçut_ty≥
 > *>(this) );

2913 
ödexî_node
–c⁄° indexî_node& 
Ÿhî
 ) : 
unfﬁded_ty≥
(other) {

2914 
tbb
::
öã∫Æ
::
fgt_mu…iöput_node
<
I≈utTu∂e
,
	gN
>–
	gtbb
::öã∫Æ::
FLOW_INDEXER_NODE
, &
	gthis
->
	gmy_gøph
,

2915 
	gthis
->
öput_p‹ts
(), 
	g°©ic_ˇ°
< 
	g£ndî
< 
	gouçut_ty≥
 > *>(this) );

2918 #i‡
TBB_PREVIEW_FLOW_GRAPH_TRACE


2919 
£t_«me
–c⁄° *
«me
 ) {

2920 
	gtbb
::
öã∫Æ
::
fgt_node_desc
–
this
, 
«me
 );

2925 
	gãm∂©e
<
ty≥«me
 
	gT0
,Åy≥«mê
	gT1
,Åy≥«mê
	gT2
>

2926 
˛ass
 
	gödexî_node
<
	gT0
, 
	gT1
, 
	gT2
> : 
public
 
öã∫Æ
::
unfﬁded_ödexî_node
<
tu∂e
<
T0
, T1, T2> > {

2927 
	g¥iv©e
:

2928 c⁄° 
N
 = 3;

2929 
	gpublic
:

2930 
tu∂e
<
	tT0
, 
	tT1
, 
	tT2
> 
	tI≈utTu∂e
;

2931 
ty≥«me
 
	töã∫Æ
::
	tègged_msg
<
	tsize_t
, 
	tT0
, 
	tT1
, 
	tT2
> 
	touçut_ty≥
;

2932 
ty≥«me
 
	töã∫Æ
::
	tunfﬁded_ödexî_node
<
	tI≈utTu∂e
> 
	tunfﬁded_ty≥
;

2933 
ödexî_node
(
gøph
& 
g
Ë: 
unfﬁded_ty≥
(g) {

2934 
tbb
::
öã∫Æ
::
fgt_mu…iöput_node
<
I≈utTu∂e
,
	gN
>–
	gtbb
::öã∫Æ::
FLOW_INDEXER_NODE
, &
	gthis
->
	gmy_gøph
,

2935 
	gthis
->
öput_p‹ts
(), 
	g°©ic_ˇ°
< 
	g£ndî
< 
	gouçut_ty≥
 > *>(this) );

2938 
ödexî_node
–c⁄° indexî_node& 
Ÿhî
 ) : 
unfﬁded_ty≥
(other) {

2939 
tbb
::
öã∫Æ
::
fgt_mu…iöput_node
<
I≈utTu∂e
,
	gN
>–
	gtbb
::öã∫Æ::
FLOW_INDEXER_NODE
, &
	gthis
->
	gmy_gøph
,

2940 
	gthis
->
öput_p‹ts
(), 
	g°©ic_ˇ°
< 
	g£ndî
< 
	gouçut_ty≥
 > *>(this) );

2943 #i‡
TBB_PREVIEW_FLOW_GRAPH_TRACE


2944 
£t_«me
–c⁄° *
«me
 ) {

2945 
	gtbb
::
öã∫Æ
::
fgt_node_desc
–
this
, 
«me
 );

2950 
	gãm∂©e
<
ty≥«me
 
	gT0
,Åy≥«mê
	gT1
,Åy≥«mê
	gT2
,Åy≥«mê
	gT3
>

2951 
˛ass
 
	gödexî_node
<
	gT0
, 
	gT1
, 
	gT2
, 
	gT3
> : 
public
 
öã∫Æ
::
unfﬁded_ödexî_node
<
tu∂e
<
T0
, T1, T2, T3> > {

2952 
	g¥iv©e
:

2953 c⁄° 
N
 = 4;

2954 
	gpublic
:

2955 
tu∂e
<
	tT0
, 
	tT1
, 
	tT2
, 
	tT3
> 
	tI≈utTu∂e
;

2956 
ty≥«me
 
	töã∫Æ
::
	tègged_msg
<
	tsize_t
, 
	tT0
, 
	tT1
, 
	tT2
, 
	tT3
> 
	touçut_ty≥
;

2957 
ty≥«me
 
	töã∫Æ
::
	tunfﬁded_ödexî_node
<
	tI≈utTu∂e
> 
	tunfﬁded_ty≥
;

2958 
ödexî_node
(
gøph
& 
g
Ë: 
unfﬁded_ty≥
(g) {

2959 
tbb
::
öã∫Æ
::
fgt_mu…iöput_node
<
I≈utTu∂e
,
	gN
>–
	gtbb
::öã∫Æ::
FLOW_INDEXER_NODE
, &
	gthis
->
	gmy_gøph
,

2960 
	gthis
->
öput_p‹ts
(), 
	g°©ic_ˇ°
< 
	g£ndî
< 
	gouçut_ty≥
 > *>(this) );

2963 
ödexî_node
–c⁄° indexî_node& 
Ÿhî
 ) : 
unfﬁded_ty≥
(other) {

2964 
tbb
::
öã∫Æ
::
fgt_mu…iöput_node
<
I≈utTu∂e
,
	gN
>–
	gtbb
::öã∫Æ::
FLOW_INDEXER_NODE
, &
	gthis
->
	gmy_gøph
,

2965 
	gthis
->
öput_p‹ts
(), 
	g°©ic_ˇ°
< 
	g£ndî
< 
	gouçut_ty≥
 > *>(this) );

2968 #i‡
TBB_PREVIEW_FLOW_GRAPH_TRACE


2969  
£t_«me
–c⁄° *
«me
 ) {

2970 
	gtbb
::
öã∫Æ
::
fgt_node_desc
–
this
, 
«me
 );

2975 
	gãm∂©e
<
ty≥«me
 
	gT0
,Åy≥«mê
	gT1
,Åy≥«mê
	gT2
,Åy≥«mê
	gT3
,Åy≥«mê
	gT4
>

2976 
˛ass
 
	gödexî_node
<
	gT0
, 
	gT1
, 
	gT2
, 
	gT3
, 
	gT4
> : 
public
 
öã∫Æ
::
unfﬁded_ödexî_node
<
tu∂e
<
T0
, T1, T2, T3, T4> > {

2977 
	g¥iv©e
:

2978 c⁄° 
N
 = 5;

2979 
	gpublic
:

2980 
tu∂e
<
	tT0
, 
	tT1
, 
	tT2
, 
	tT3
, 
	tT4
> 
	tI≈utTu∂e
;

2981 
ty≥«me
 
	töã∫Æ
::
	tègged_msg
<
	tsize_t
, 
	tT0
, 
	tT1
, 
	tT2
, 
	tT3
, 
	tT4
> 
	touçut_ty≥
;

2982 
ty≥«me
 
	töã∫Æ
::
	tunfﬁded_ödexî_node
<
	tI≈utTu∂e
> 
	tunfﬁded_ty≥
;

2983 
ödexî_node
(
gøph
& 
g
Ë: 
unfﬁded_ty≥
(g) {

2984 
tbb
::
öã∫Æ
::
fgt_mu…iöput_node
<
I≈utTu∂e
,
	gN
>–
	gtbb
::öã∫Æ::
FLOW_INDEXER_NODE
, &
	gthis
->
	gmy_gøph
,

2985 
	gthis
->
öput_p‹ts
(), 
	g°©ic_ˇ°
< 
	g£ndî
< 
	gouçut_ty≥
 > *>(this) );

2988 
ödexî_node
–c⁄° indexî_node& 
Ÿhî
 ) : 
unfﬁded_ty≥
(other) {

2989 
tbb
::
öã∫Æ
::
fgt_mu…iöput_node
<
I≈utTu∂e
,
	gN
>–
	gtbb
::öã∫Æ::
FLOW_INDEXER_NODE
, &
	gthis
->
	gmy_gøph
,

2990 
	gthis
->
öput_p‹ts
(), 
	g°©ic_ˇ°
< 
	g£ndî
< 
	gouçut_ty≥
 > *>(this) );

2993 #i‡
TBB_PREVIEW_FLOW_GRAPH_TRACE


2994  
£t_«me
–c⁄° *
«me
 ) {

2995 
	gtbb
::
öã∫Æ
::
fgt_node_desc
–
this
, 
«me
 );

3000 #i‡
__TBB_VARIADIC_MAX
 >= 6

3001 
	gãm∂©e
<
ty≥«me
 
	gT0
,Åy≥«mê
	gT1
,Åy≥«mê
	gT2
,Åy≥«mê
	gT3
,Åy≥«mê
	gT4
,Åy≥«mê
	gT5
>

3002 
˛ass
 
	gödexî_node
<
	gT0
, 
	gT1
, 
	gT2
, 
	gT3
, 
	gT4
, 
	gT5
> : 
public
 
öã∫Æ
::
unfﬁded_ödexî_node
<
tu∂e
<
T0
, T1, T2, T3, T4, T5> > {

3003 
	g¥iv©e
:

3004 c⁄° 
N
 = 6;

3005 
	gpublic
:

3006 
tu∂e
<
	tT0
, 
	tT1
, 
	tT2
, 
	tT3
, 
	tT4
, 
	tT5
> 
	tI≈utTu∂e
;

3007 
ty≥«me
 
	töã∫Æ
::
	tègged_msg
<
	tsize_t
, 
	tT0
, 
	tT1
, 
	tT2
, 
	tT3
, 
	tT4
, 
	tT5
> 
	touçut_ty≥
;

3008 
ty≥«me
 
	töã∫Æ
::
	tunfﬁded_ödexî_node
<
	tI≈utTu∂e
> 
	tunfﬁded_ty≥
;

3009 
ödexî_node
(
gøph
& 
g
Ë: 
unfﬁded_ty≥
(g) {

3010 
tbb
::
öã∫Æ
::
fgt_mu…iöput_node
<
I≈utTu∂e
,
	gN
>–
	gtbb
::öã∫Æ::
FLOW_INDEXER_NODE
, &
	gthis
->
	gmy_gøph
,

3011 
	gthis
->
öput_p‹ts
(), 
	g°©ic_ˇ°
< 
	g£ndî
< 
	gouçut_ty≥
 > *>(this) );

3014 
ödexî_node
–c⁄° indexî_node& 
Ÿhî
 ) : 
unfﬁded_ty≥
(other) {

3015 
tbb
::
öã∫Æ
::
fgt_mu…iöput_node
<
I≈utTu∂e
,
	gN
>–
	gtbb
::öã∫Æ::
FLOW_INDEXER_NODE
, &
	gthis
->
	gmy_gøph
,

3016 
	gthis
->
öput_p‹ts
(), 
	g°©ic_ˇ°
< 
	g£ndî
< 
	gouçut_ty≥
 > *>(this) );

3019 #i‡
TBB_PREVIEW_FLOW_GRAPH_TRACE


3020  
£t_«me
–c⁄° *
«me
 ) {

3021 
	gtbb
::
öã∫Æ
::
fgt_node_desc
–
this
, 
«me
 );

3027 #i‡
__TBB_VARIADIC_MAX
 >= 7

3028 
	gãm∂©e
<
ty≥«me
 
	gT0
,Åy≥«mê
	gT1
,Åy≥«mê
	gT2
,Åy≥«mê
	gT3
,Åy≥«mê
	gT4
,Åy≥«mê
	gT5
,

3029 
ty≥«me
 
	gT6
>

3030 
˛ass
 
	gödexî_node
<
	gT0
, 
	gT1
, 
	gT2
, 
	gT3
, 
	gT4
, 
	gT5
, 
	gT6
> : 
public
 
öã∫Æ
::
unfﬁded_ödexî_node
<
tu∂e
<
T0
, T1, T2, T3, T4, T5, T6> > {

3031 
	g¥iv©e
:

3032 c⁄° 
N
 = 7;

3033 
	gpublic
:

3034 
tu∂e
<
	tT0
, 
	tT1
, 
	tT2
, 
	tT3
, 
	tT4
, 
	tT5
, 
	tT6
> 
	tI≈utTu∂e
;

3035 
ty≥«me
 
	töã∫Æ
::
	tègged_msg
<
	tsize_t
, 
	tT0
, 
	tT1
, 
	tT2
, 
	tT3
, 
	tT4
, 
	tT5
, 
	tT6
> 
	touçut_ty≥
;

3036 
ty≥«me
 
	töã∫Æ
::
	tunfﬁded_ödexî_node
<
	tI≈utTu∂e
> 
	tunfﬁded_ty≥
;

3037 
ödexî_node
(
gøph
& 
g
Ë: 
unfﬁded_ty≥
(g) {

3038 
tbb
::
öã∫Æ
::
fgt_mu…iöput_node
<
I≈utTu∂e
,
	gN
>–
	gtbb
::öã∫Æ::
FLOW_INDEXER_NODE
, &
	gthis
->
	gmy_gøph
,

3039 
	gthis
->
öput_p‹ts
(), 
	g°©ic_ˇ°
< 
	g£ndî
< 
	gouçut_ty≥
 > *>(this) );

3042 
ödexî_node
–c⁄° indexî_node& 
Ÿhî
 ) : 
unfﬁded_ty≥
(other) {

3043 
tbb
::
öã∫Æ
::
fgt_mu…iöput_node
<
I≈utTu∂e
,
	gN
>–
	gtbb
::öã∫Æ::
FLOW_INDEXER_NODE
, &
	gthis
->
	gmy_gøph
,

3044 
	gthis
->
öput_p‹ts
(), 
	g°©ic_ˇ°
< 
	g£ndî
< 
	gouçut_ty≥
 > *>(this) );

3047 #i‡
TBB_PREVIEW_FLOW_GRAPH_TRACE


3048  
£t_«me
–c⁄° *
«me
 ) {

3049 
	gtbb
::
öã∫Æ
::
fgt_node_desc
–
this
, 
«me
 );

3055 #i‡
__TBB_VARIADIC_MAX
 >= 8

3056 
	gãm∂©e
<
ty≥«me
 
	gT0
,Åy≥«mê
	gT1
,Åy≥«mê
	gT2
,Åy≥«mê
	gT3
,Åy≥«mê
	gT4
,Åy≥«mê
	gT5
,

3057 
ty≥«me
 
	gT6
,Åy≥«mê
	gT7
>

3058 
˛ass
 
	gödexî_node
<
	gT0
, 
	gT1
, 
	gT2
, 
	gT3
, 
	gT4
, 
	gT5
, 
	gT6
, 
	gT7
> : 
public
 
öã∫Æ
::
unfﬁded_ödexî_node
<
tu∂e
<
T0
, T1, T2, T3, T4, T5, T6, T7> > {

3059 
	g¥iv©e
:

3060 c⁄° 
N
 = 8;

3061 
	gpublic
:

3062 
tu∂e
<
	tT0
, 
	tT1
, 
	tT2
, 
	tT3
, 
	tT4
, 
	tT5
, 
	tT6
, 
	tT7
> 
	tI≈utTu∂e
;

3063 
ty≥«me
 
	töã∫Æ
::
	tègged_msg
<
	tsize_t
, 
	tT0
, 
	tT1
, 
	tT2
, 
	tT3
, 
	tT4
, 
	tT5
, 
	tT6
, 
	tT7
> 
	touçut_ty≥
;

3064 
ty≥«me
 
	töã∫Æ
::
	tunfﬁded_ödexî_node
<
	tI≈utTu∂e
> 
	tunfﬁded_ty≥
;

3065 
ödexî_node
(
gøph
& 
g
Ë: 
unfﬁded_ty≥
(g) {

3066 
tbb
::
öã∫Æ
::
fgt_mu…iöput_node
<
I≈utTu∂e
,
	gN
>–
	gtbb
::öã∫Æ::
FLOW_INDEXER_NODE
, &
	gthis
->
	gmy_gøph
,

3067 
	gthis
->
öput_p‹ts
(), 
	g°©ic_ˇ°
< 
	g£ndî
< 
	gouçut_ty≥
 > *>(this) );

3070 
ödexî_node
–c⁄° indexî_node& 
Ÿhî
 ) : 
unfﬁded_ty≥
(other) {

3071 
tbb
::
öã∫Æ
::
fgt_mu…iöput_node
<
I≈utTu∂e
,
	gN
>–
	gtbb
::öã∫Æ::
FLOW_INDEXER_NODE
, &
	gthis
->
	gmy_gøph
,

3072 
	gthis
->
öput_p‹ts
(), 
	g°©ic_ˇ°
< 
	g£ndî
< 
	gouçut_ty≥
 > *>(this) );

3075 #i‡
TBB_PREVIEW_FLOW_GRAPH_TRACE


3076  
£t_«me
–c⁄° *
«me
 ) {

3077 
	gtbb
::
öã∫Æ
::
fgt_node_desc
–
this
, 
«me
 );

3083 #i‡
__TBB_VARIADIC_MAX
 >= 9

3084 
	gãm∂©e
<
ty≥«me
 
	gT0
,Åy≥«mê
	gT1
,Åy≥«mê
	gT2
,Åy≥«mê
	gT3
,Åy≥«mê
	gT4
,Åy≥«mê
	gT5
,

3085 
ty≥«me
 
	gT6
,Åy≥«mê
	gT7
,Åy≥«mê
	gT8
>

3086 
˛ass
 
	gödexî_node
<
	gT0
, 
	gT1
, 
	gT2
, 
	gT3
, 
	gT4
, 
	gT5
, 
	gT6
, 
	gT7
, 
	gT8
> : 
public
 
öã∫Æ
::
unfﬁded_ödexî_node
<
tu∂e
<
T0
, T1, T2, T3, T4, T5, T6, T7, T8> > {

3087 
	g¥iv©e
:

3088 c⁄° 
N
 = 9;

3089 
	gpublic
:

3090 
tu∂e
<
	tT0
, 
	tT1
, 
	tT2
, 
	tT3
, 
	tT4
, 
	tT5
, 
	tT6
, 
	tT7
, 
	tT8
> 
	tI≈utTu∂e
;

3091 
ty≥«me
 
	töã∫Æ
::
	tègged_msg
<
	tsize_t
, 
	tT0
, 
	tT1
, 
	tT2
, 
	tT3
, 
	tT4
, 
	tT5
, 
	tT6
, 
	tT7
, 
	tT8
> 
	touçut_ty≥
;

3092 
ty≥«me
 
	töã∫Æ
::
	tunfﬁded_ödexî_node
<
	tI≈utTu∂e
> 
	tunfﬁded_ty≥
;

3093 
ödexî_node
(
gøph
& 
g
Ë: 
unfﬁded_ty≥
(g) {

3094 
tbb
::
öã∫Æ
::
fgt_mu…iöput_node
<
I≈utTu∂e
,
	gN
>–
	gtbb
::öã∫Æ::
FLOW_INDEXER_NODE
, &
	gthis
->
	gmy_gøph
,

3095 
	gthis
->
öput_p‹ts
(), 
	g°©ic_ˇ°
< 
	g£ndî
< 
	gouçut_ty≥
 > *>(this) );

3098 
ödexî_node
–c⁄° indexî_node& 
Ÿhî
 ) : 
unfﬁded_ty≥
(other) {

3099 
tbb
::
öã∫Æ
::
fgt_mu…iöput_node
<
I≈utTu∂e
,
	gN
>–
	gtbb
::öã∫Æ::
FLOW_INDEXER_NODE
, &
	gthis
->
	gmy_gøph
,

3100 
	gthis
->
öput_p‹ts
(), 
	g°©ic_ˇ°
< 
	g£ndî
< 
	gouçut_ty≥
 > *>(this) );

3103 #i‡
TBB_PREVIEW_FLOW_GRAPH_TRACE


3104  
£t_«me
–c⁄° *
«me
 ) {

3105 
	gtbb
::
öã∫Æ
::
fgt_node_desc
–
this
, 
«me
 );

3111 #i‡
__TBB_VARIADIC_MAX
 >= 10

3112 
	gãm∂©e
<
ty≥«me
 
	gT0
,Åy≥«mê
	gT1
,Åy≥«mê
	gT2
,Åy≥«mê
	gT3
,Åy≥«mê
	gT4
,Åy≥«mê
	gT5
,

3113 
ty≥«me
 
	gT6
,Åy≥«mê
	gT7
,Åy≥«mê
	gT8
,Åy≥«mê
	gT9
>

3114 
˛ass
 
	gödexî_node
 : 
public
 
öã∫Æ
::
unfﬁded_ödexî_node
<
tu∂e
<
T0
, 
	gT1
, 
	gT2
, 
	gT3
, 
	gT4
, 
	gT5
, 
	gT6
, 
	gT7
, 
	gT8
, 
	gT9
> > {

3115 
	g¥iv©e
:

3116 c⁄° 
N
 = 10;

3117 
	gpublic
:

3118 
tu∂e
<
	tT0
, 
	tT1
, 
	tT2
, 
	tT3
, 
	tT4
, 
	tT5
, 
	tT6
, 
	tT7
, 
	tT8
, 
	tT9
> 
	tI≈utTu∂e
;

3119 
ty≥«me
 
	töã∫Æ
::
	tègged_msg
<
	tsize_t
, 
	tT0
, 
	tT1
, 
	tT2
, 
	tT3
, 
	tT4
, 
	tT5
, 
	tT6
, 
	tT7
, 
	tT8
, 
	tT9
> 
	touçut_ty≥
;

3120 
ty≥«me
 
	töã∫Æ
::
	tunfﬁded_ödexî_node
<
	tI≈utTu∂e
> 
	tunfﬁded_ty≥
;

3121 
ödexî_node
(
gøph
& 
g
Ë: 
unfﬁded_ty≥
(g) {

3122 
tbb
::
öã∫Æ
::
fgt_mu…iöput_node
<
I≈utTu∂e
,
	gN
>–
	gtbb
::öã∫Æ::
FLOW_INDEXER_NODE
, &
	gthis
->
	gmy_gøph
,

3123 
	gthis
->
öput_p‹ts
(), 
	g°©ic_ˇ°
< 
	g£ndî
< 
	gouçut_ty≥
 > *>(this) );

3126 
ödexî_node
–c⁄° indexî_node& 
Ÿhî
 ) : 
unfﬁded_ty≥
(other) {

3127 
tbb
::
öã∫Æ
::
fgt_mu…iöput_node
<
I≈utTu∂e
,
	gN
>–
	gtbb
::öã∫Æ::
FLOW_INDEXER_NODE
, &
	gthis
->
	gmy_gøph
,

3128 
	gthis
->
öput_p‹ts
(), 
	g°©ic_ˇ°
< 
	g£ndî
< 
	gouçut_ty≥
 > *>(this) );

3131 #i‡
TBB_PREVIEW_FLOW_GRAPH_TRACE


3132  
£t_«me
–c⁄° *
«me
 ) {

3133 
	gtbb
::
öã∫Æ
::
fgt_node_desc
–
this
, 
«me
 );

3140 
	gãm∂©e
< 
ty≥«me
 
	gT
 >

3141 
ölöe
 
make_edge
–
£ndî
<
T
> &
p
, 
ª˚ivî
<T> &
s
 ) {

3142 #i‡
TBB_PREVIEW_FLOW_GRAPH_FEATURES


3143 
	gs
.
öã∫Æ_add_buût_¥ede˚ss‹
(
p
);

3144 
	gp
.
öã∫Æ_add_buût_suc˚ss‹
(
s
);

3146 
	gp
.
ªgi°î_suc˚ss‹
–
s
 );

3147 
	gtbb
::
öã∫Æ
::
fgt_make_edge
–&
p
, &
s
 );

3151 
	gãm∂©e
< 
ty≥«me
 
	gT
 >

3152 
ölöe
 
ªmove_edge
–
£ndî
<
T
> &
p
, 
ª˚ivî
<T> &
s
 ) {

3153 
	gp
.
ªmove_suc˚ss‹
–
s
 );

3154 #i‡
TBB_PREVIEW_FLOW_GRAPH_FEATURES


3156 
	gp
.
öã∫Æ_dñëe_buût_suc˚ss‹
(
s
);

3157 
	gs
.
öã∫Æ_dñëe_buût_¥ede˚ss‹
(
p
);

3159 
	gtbb
::
öã∫Æ
::
fgt_ªmove_edge
–&
p
, &
s
 );

3162 #i‡
TBB_PREVIEW_FLOW_GRAPH_FEATURES


3163 
	gãm∂©e
<
ty≥«me
 
	gC
 >

3164 
	gãm∂©e
< 
ty≥«me
 
	gS
 >

3165 
	gedge_c⁄èöî
<
	gC
>::
£ndî_exåa˘
–
S
 &
s
 ) {

3166 
edge_ve˘‹
 
e
 = 
buût_edges
;

3167  
ty≥«me
 
	gedge_ve˘‹
::
ôî©‹
 
i
 = 
e
.
begö
(); 
	gi
 !e.
íd
(); ++i ) {

3168 
ªmove_edge
(
s
, **
i
);

3172 
	gãm∂©e
<
ty≥«me
 
	gC
 >

3173 
	gãm∂©e
< 
ty≥«me
 
	gR
 >

3174 
	gedge_c⁄èöî
<
	gC
>::
ª˚ivî_exåa˘
–
R
 &
r
 ) {

3175 
edge_ve˘‹
 
e
 = 
buût_edges
;

3176  
ty≥«me
 
	gedge_ve˘‹
::
ôî©‹
 
i
 = 
e
.
begö
(); 
	gi
 !e.
íd
(); ++i ) {

3177 
ªmove_edge
(**
i
, 
r
);

3183 
	gãm∂©e
< 
ty≥«me
 
	gBody
,Åy≥«mê
	gNode
 >

3184 
Body
 
c›y_body
–
Node
 &
n
 ) {

3185  
	gn
.
ãm∂©e
 
	gc›y_fun˘i⁄_obje˘
<
	gBody
>();

3190 #i‡
TBB_PREVIEW_FLOW_GRAPH_FEATURES


3191 
usög
 
	göãrÁ˚7
::
ª£t_Êags
;

3192 
usög
 
	göãrÁ˚7
::
rf_ª£t_¥Ÿocﬁ
;

3193 
usög
 
	göãrÁ˚7
::
rf_ª£t_bodõs
;

3194 
usög
 
	göãrÁ˚7
::
rf_exåa˘
;

3197 
usög
 
	göãrÁ˚7
::
gøph
;

3198 
usög
 
	göãrÁ˚7
::
gøph_node
;

3199 
usög
 
	göãrÁ˚7
::
c⁄töue_msg
;

3200 
usög
 
	göãrÁ˚7
::
£ndî
;

3201 
usög
 
	göãrÁ˚7
::
ª˚ivî
;

3202 
usög
 
	göãrÁ˚7
::
c⁄töue_ª˚ivî
;

3204 
usög
 
	göãrÁ˚7
::
sour˚_node
;

3205 
usög
 
	göãrÁ˚7
::
fun˘i⁄_node
;

3206 
usög
 
	göãrÁ˚7
::
mu…ifun˘i⁄_node
;

3207 
usög
 
	göãrÁ˚7
::
•lô_node
;

3208 
usög
 
	göãrÁ˚7
::
öã∫Æ
::
ouçut_p‹t
;

3209 
usög
 
	göãrÁ˚7
::
ödexî_node
;

3210 
usög
 
	göãrÁ˚7
::
öã∫Æ
::
ègged_msg
;

3211 
usög
 
	göãrÁ˚7
::
öã∫Æ
::
ˇ°_to
;

3212 
usög
 
	göãrÁ˚7
::
öã∫Æ
::
is_a
;

3213 
usög
 
	göãrÁ˚7
::
c⁄töue_node
;

3214 
usög
 
	göãrÁ˚7
::
ovîwrôe_node
;

3215 
usög
 
	göãrÁ˚7
::
wrôe_⁄˚_node
;

3216 
usög
 
	göãrÁ˚7
::
brﬂdˇ°_node
;

3217 
usög
 
	göãrÁ˚7
::
buf„r_node
;

3218 
usög
 
	göãrÁ˚7
::
queue_node
;

3219 
usög
 
	göãrÁ˚7
::
£quí˚r_node
;

3220 
usög
 
	göãrÁ˚7
::
¥i‹ôy_queue_node
;

3221 
usög
 
	göãrÁ˚7
::
limôî_node
;

3222 
usög
 
«me•a˚
 
	göãrÁ˚7
::
öã∫Æ
::
gøph_pﬁicy_«me•a˚
;

3223 
usög
 
	göãrÁ˚7
::
joö_node
;

3224 
usög
 
	göãrÁ˚7
::
öput_p‹t
;

3225 
usög
 
	göãrÁ˚7
::
c›y_body
;

3226 
usög
 
	göãrÁ˚7
::
make_edge
;

3227 
usög
 
	göãrÁ˚7
::
ªmove_edge
;

3228 
usög
 
	göãrÁ˚7
::
öã∫Æ
::
NO_TAG
;

3229 
usög
 
	göãrÁ˚7
::
öã∫Æ
::
èg_vÆue
;

3234 #unde‡
__TBB_PFG_RESET_ARG


3235 #unde‡
__TBB_COMMA


	@viper/concurrentqueue-src/benchmarks/tbb/governor.cpp

21 
	~<°dio.h
>

22 
	~<°dlib.h
>

23 
	~"govîn‹.h
"

24 
	~"tbb_maö.h
"

25 
	~"scheduÀr.h
"

26 
	~"m¨kë.h
"

27 
	~"¨ía.h
"

29 
	~"tbb/èsk_scheduÀr_öô.h
"

31 
	~"dy«mic_lök.h
"

33 
«me•a˚
 
	gtbb
 {

34 
«me•a˚
 
	göã∫Æ
 {

40 #i‡
__TBB_SURVIVE_THREAD_SWITCH


43 #i‡
_WIN32


44 
	#CILKLIB_NAME
 "cûkπs20.dŒ"

	)

46 
	#CILKLIB_NAME
 "libcûkπs.so"

	)

50 
__cûk_tbb_ªtcode
 (*
w©ch_°ack_h™dÀr
)(
__cûk_tbb_unw©ch_thunk
* 
	gu
,

51 
__cûk_tbb_°ack_›_thunk
 
	go
);

54 c⁄° 
dy«mic_lök_des¸ùt‹
 
	gCûkLökTabÀ
[] = {

55 { "__cûkπs_w©ch_°ack", (
poöãr_to_h™dÀr
*)(*)(&
w©ch_°ack_h™dÀr
) }

58 
	g©omic
<
	gdo_⁄˚_°©e
> 
	gcûkπs_lﬂd_°©e
;

60 
boﬁ
 
öôülize_cûk_öãr›
() {

63  
dy«mic_lök
–
CILKLIB_NAME
, 
CûkLökTabÀ
, 1, 0, 
DYNAMIC_LINK_GLOBAL
 );

67 
«me•a˚
 
	grml
 {

68 
tbb_£rvî
* 
make_¥iv©e_£rvî
–
tbb_˛õ¡
& 
˛õ¡
 );

71 
	ggovîn‹
::
acquúe_ªsour˚s
 () {

72 #i‡
USE_PTHREAD


73 
°©us
 = 
theTLS
.
¸óã
(
auto_ãrmö©e
);

75 
	g°©us
 = 
theTLS
.
¸óã
();

77 if–
	g°©us
 )

78 
h™dÀ_≥º‹
(
°©us
, "TBB failedÅo initializeÅask scheduler TLS\n");

79 
	gis_•ecuœti⁄_íabÀd
 = 
˝u_has_•ecuœti⁄
();

82 
	ggovîn‹
::
ªÀa£_ªsour˚s
 () {

83 
theRMLSîvîFa˘‹y
.
˛o£
();

84 #i‡
TBB_USE_ASSERT


85 if–
	g__TBB_InôOn˚
::
öôüliz©i⁄_d⁄e
(Ë&& 
theTLS
.
gë
() )

86 
ru¡ime_w¨nög
( "TBB is unloaded whileÅbb::task_scheduler_init object isálive?" );

88 
	g°©us
 = 
theTLS
.
de°roy
();

89 if–
	g°©us
 )

90 
ru¡ime_w¨nög
("ÁûedÅÿde°royÅask scheduÀ∏TLS: %s", 
°ªº‹
(
°©us
));

91 
dy«mic_u∆ök_Æl
();

94 
	grml
::
tbb_£rvî
* 
govîn‹
::
¸óã_rml_£rvî
 ( 
rml
::
tbb_˛õ¡
& 
˛õ¡
 ) {

95 
rml
::
tbb_£rvî
* 
£rvî
 = 
NULL
;

96 if–!
	gU£Priv©eRML
 ) {

97 ::
rml
::
Á˘‹y
::
°©us_ty≥
 
°©us
 = 
theRMLSîvîFa˘‹y
.
make_£rvî
–
£rvî
, 
˛õ¡
 );

98 if–
	g°©us
 !::
rml
::
Á˘‹y
::
°_suc˚ss
 ) {

99 
U£Priv©eRML
 = 
åue
;

100 
ru¡ime_w¨nög
–"rml::tbb_Á˘‹y::make_£rvî faûed wôh sètu†%x, fÆlög back o¿¥iv©êrml", 
°©us
 );

103 i‡–!
	g£rvî
 ) {

104 
__TBB_ASSERT
–
U£Priv©eRML
, 
NULL
 );

105 
	g£rvî
 = 
rml
::
make_¥iv©e_£rvî
–
˛õ¡
 );

107 
__TBB_ASSERT
–
£rvî
, "FailedÅo create RML server" );

108  
	g£rvî
;

111 
	ggovîn‹
::
sign_⁄
(
gíîic_scheduÀr
* 
s
) {

112 
__TBB_ASSERT
–!
theTLS
.
gë
(), 
NULL
 );

113 
	gtheTLS
.
£t
(
s
);

114 #i‡
__TBB_SURVIVE_THREAD_SWITCH


115 if–
	gw©ch_°ack_h™dÀr
 ) {

116 
__cûk_tbb_°ack_›_thunk
 
	go
;

117 
	go
.
	groutöe
 = &
°ack_›_h™dÀr
;

118 
	go
.
	gd©a
 = 
s
;

119 if–(*
	gw©ch_°ack_h™dÀr
)(&
	gs
->
	gmy_cûk_unw©ch_thunk
, 
	go
) ) {

121 
	gs
->
	gmy_cûk_unw©ch_thunk
.
	groutöe
 = 
NULL
;

123 #i‡
TBB_USE_ASSERT


125 
	gs
->
	gmy_cûk_°©e
 = 
gíîic_scheduÀr
::
cs_ru¬ög
;

131 
	ggovîn‹
::
sign_off
(
gíîic_scheduÀr
* 
s
) {

132 
suµªss_unu£d_w¨nög
(
s
);

133 
__TBB_ASSERT
–
theTLS
.
gë
()==
s
, "attemptÅo unregisterá wrong scheduler instance" );

134 
	gtheTLS
.
£t
(
NULL
);

135 #i‡
__TBB_SURVIVE_THREAD_SWITCH


136 
	g__cûk_tbb_unw©ch_thunk
 &
	gut
 = 
s
->
my_cûk_unw©ch_thunk
;

137 i‡–
	gut
.
	groutöe
 )

138 (*
	gut
.
	groutöe
)(ut.
	gd©a
);

142 
	ggovîn‹
::
£tBlockögTîmö©e
(c⁄° 
èsk_scheduÀr_öô
 *
tsi
) {

143 
__TBB_ASSERT
(!
IsBlockögTîmö©i⁄InProgªss
, "It's impossibleÅo createÅask_scheduler_init while blockingÅermination is inÖrogress.");

144 i‡(
	gBlockögTSI
)

145 
throw_ex˚±i⁄
(
eid_blockög_sch_öô
);

146 
	gBlockögTSI
 = 
tsi
;

149 
gíîic_scheduÀr
* 
	ggovîn‹
::
öô_scheduÀr
–
num_thªads
, 
°ack_size_ty≥
 
°ack_size
, 
boﬁ
 
auto_öô
 ) {

150 if–!
	g__TBB_InôOn˚
::
öôüliz©i⁄_d⁄e
() )

151 
DoO√TimeInôüliz©i⁄s
();

152 
gíîic_scheduÀr
* 
	gs
 = 
theTLS
.
gë
();

153 if–
	gs
 ) {

154 
	gs
->
	gmy_ªf_cou¡
 += 1;

155  
	gs
;

157 #i‡
__TBB_SURVIVE_THREAD_SWITCH


158 
©omic_do_⁄˚
–&
öôülize_cûk_öãr›
, 
cûkπs_lﬂd_°©e
 );

160 if–()
	gnum_thªads
 =
èsk_scheduÀr_öô
::
autom©ic
 )

161 
num_thªads
 = 
deÁu…_num_thªads
();

162 
	gs
 = 
gíîic_scheduÀr
::
¸óã_ma°î
(

163 
m¨kë
::
¸óã_¨ía
–
num_thªads
 - 1, 
°ack_size
 ? sèck_sizê: 
ThªadSèckSize
 ) );

164 
__TBB_ASSERT
(
s
, "SomehowáÜocal scheduler creation forá masterÅhread failed");

165 
	gs
->
	gmy_auto_öôülized
 = 
auto_öô
;

166  
	gs
;

169 
	ggovîn‹
::
ãrmö©e_scheduÀr
–
gíîic_scheduÀr
* 
s
, c⁄° 
èsk_scheduÀr_öô
* 
tsi_±r
 ) {

170 
__TBB_ASSERT
–
s
 =
theTLS
.
gë
(), "AttemptÅoÅerminateÇon-local scheduler instance" );

171 i‡(--(
	gs
->
	gmy_ªf_cou¡
)) {

172 i‡(
	gBlockögTSI
 && BlockögTSI==
tsi_±r
) {

174 
Ârötf
(
°dîr
, "AttemptÅoÅerminateÇested scheduler in blocking mode\n");

175 
exô
(1);

178 #i‡
TBB_USE_ASSERT


179 i‡(
	gBlockögTSI
) {

180 
__TBB_ASSERT
–
BlockögTSI
 =
tsi_±r
, "For blockingÅerminationÜastÅerminate_scheduler must be blocking." );

181 
	gIsBlockögTîmö©i⁄InProgªss
 = 
åue
;

184 
	gs
->
˛ónup_ma°î
();

185 
	gBlockögTSI
 = 
NULL
;

186 #i‡
TBB_USE_ASSERT


187 
	gIsBlockögTîmö©i⁄InProgªss
 = 
Ál£
;

192 
	ggovîn‹
::
auto_ãrmö©e
(* 
¨g
){

193 
gíîic_scheduÀr
* 
s
 = 
°©ic_ˇ°
<gíîic_scheduÀr*>(
¨g
);

194 if–
	gs
 && s->
	gmy_auto_öôülized
 ) {

195 if–!--(
	gs
->
	gmy_ªf_cou¡
) ) {

196 
__TBB_ASSERT
–!
BlockögTSI
, "Blockingáuto-terminate isÇot supported." );

199 i‡–!
	gtheTLS
.
gë
() )

200 
	gtheTLS
.
£t
(
s
);

201 
__TBB_ASSERT
–
s
 =
theTLS
.
gë
(), 
NULL
 );

202 
	gs
->
˛ónup_ma°î
();

203 
__TBB_ASSERT
–!
theTLS
.
gë
(), "cleanup_master hasÇot cleared its TLS slot" );

208 
	ggovîn‹
::
¥öt_vîsi⁄_öfo
 () {

209 i‡–
U£Priv©eRML
 )

210 
PrötExåaVîsi⁄Info
( "RML", "private" );

212 
PrötExåaVîsi⁄Info
( "RML", "shared" );

213 
	gtheRMLSîvîFa˘‹y
.
ˇŒ_wôh_£rvî_öfo
–
PrötRMLVîsi⁄Info
, (*)"" );

215 #i‡
__TBB_SURVIVE_THREAD_SWITCH


216 if–
	gw©ch_°ack_h™dÀr
 )

217 
PrötExåaVîsi⁄Info
–"CILK", 
CILKLIB_NAME
 );

221 
	ggovîn‹
::
öôülize_rml_Á˘‹y
 () {

222 ::
rml
::
Á˘‹y
::
°©us_ty≥
 
ªs
 = 
theRMLSîvîFa˘‹y
.
›í
();

223 
	gU£Priv©eRML
 = 
ªs
 !::
rml
::
Á˘‹y
::
°_suc˚ss
;

226 #i‡
__TBB_SURVIVE_THREAD_SWITCH


227 
__cûk_tbb_ªtcode
 
	ggovîn‹
::
°ack_›_h™dÀr
–
__cûk_tbb_°ack_›
 
›
, * 
d©a
 ) {

228 
__TBB_ASSERT
(
d©a
,
NULL
);

229 
gíîic_scheduÀr
* 
	gs
 = 
°©ic_ˇ°
<gíîic_scheduÀr*>(
d©a
);

230 #i‡
TBB_USE_ASSERT


231 * 
	gcuºít
 = 
theTLS
.
gë
();

232 #i‡
_WIN32
||
_WIN64


233 
uöçå_t
 
	gthªad_id
 = 
GëCuºítThªadId
();

235 
uöçå_t
 
	gthªad_id
 = uöçå_t(
±hªad_£lf
());

239  
	g›
 ) {

241 
__TBB_ASSERT
( 0, "invalid op" );

242 
	gCILK_TBB_STACK_ADOPT
: {

243 
__TBB_ASSERT
–!
cuºít
 && 
s
->
my_cûk_°©e
==
gíîic_scheduÀr
::
cs_limbo
 ||

244 
cuºít
==
s
 && s->
my_cûk_°©e
==
gíîic_scheduÀr
::
cs_ru¬ög
, "invalidádoption" );

245 #i‡
TBB_USE_ASSERT


246 if–
	gcuºít
==
s
 )

247 
ru¡ime_w¨nög
–"ªdund™àad›ti⁄ o‡%∞byÅhªad %p\n", 
s
, (*)
thªad_id
 );

248 
	gs
->
	gmy_cûk_°©e
 = 
gíîic_scheduÀr
::
cs_ru¬ög
;

250 
	gtheTLS
.
£t
(
s
);

253 
	gCILK_TBB_STACK_ORPHAN
: {

254 
__TBB_ASSERT
–
cuºít
==
s
 && s->
my_cûk_°©e
==
gíîic_scheduÀr
::
cs_ru¬ög
, "invalid orphaning" );

255 #i‡
TBB_USE_ASSERT


256 
	gs
->
	gmy_cûk_°©e
 = 
gíîic_scheduÀr
::
cs_limbo
;

258 
	gtheTLS
.
£t
(
NULL
);

261 
	gCILK_TBB_STACK_RELEASE
: {

262 
__TBB_ASSERT
–!
cuºít
 && 
s
->
my_cûk_°©e
==
gíîic_scheduÀr
::
cs_limbo
 ||

263 
cuºít
==
s
 && s->
my_cûk_°©e
==
gíîic_scheduÀr
::
cs_ru¬ög
, "invalidÑelease" );

264 #i‡
TBB_USE_ASSERT


265 
	gs
->
	gmy_cûk_°©e
 = 
gíîic_scheduÀr
::
cs_‰ìd
;

267 
	gs
->
	gmy_cûk_unw©ch_thunk
.
	groutöe
 = 
NULL
;

268 
auto_ãrmö©e
–
s
 );

281 
usög
 
«me•a˚
 
	göã∫Æ
;

284 
	gèsk_scheduÀr_öô
::
öôülize
–
numbî_of_thªads
 ) {

285 
öôülize
–
numbî_of_thªads
, 0 );

288 
	gèsk_scheduÀr_öô
::
öôülize
–
numbî_of_thªads
, 
°ack_size_ty≥
 
thªad_°ack_size
 ) {

289 #i‡
__TBB_TASK_GROUP_CONTEXT
 && 
TBB_USE_EXCEPTIONS


290 
uöçå_t
 
	g√w_mode
 = 
thªad_°ack_size
 & 
¥›ag©i⁄_mode_mask
;

292 
	gthªad_°ack_size
 &~(
°ack_size_ty≥
)
¥›ag©i⁄_mode_mask
;

293 if–
	gnumbî_of_thªads
!=
de„ºed
 ) {

294 
boﬁ
 
blockög_ãrmö©e
 = 
Ál£
;

295 i‡(
	gmy_scheduÀr
 =(
scheduÀr
*)
waô_w‹kîs_ö_ãrmö©e_Êag
) {

296 
blockög_ãrmö©e
 = 
åue
;

297 
	gmy_scheduÀr
 = 
NULL
;

299 
__TBB_ASSERT
–!
my_scheduÀr
, "task_scheduler_initálready initialized" );

300 
__TBB_ASSERT
–
numbî_of_thªads
==-1 ||Çumber_of_threads>=1,

302 i‡(
	gblockög_ãrmö©e
)

303 
	ggovîn‹
::
£tBlockögTîmö©e
(
this
);

304 
	göã∫Æ
::
gíîic_scheduÀr
 *
s
 = 
govîn‹
::
öô_scheduÀr
–
numbî_of_thªads
, 
thªad_°ack_size
, 
Ál£
 );

305 #i‡
__TBB_TASK_GROUP_CONTEXT
 && 
TBB_USE_EXCEPTIONS


306 i‡–
	gs
->
ma°î_ouãrmo°_Àvñ
() ) {

307 
	guöçå_t
 &
	gvt
 = 
s
->
deÁu…_c⁄ãxt
()->
my_vîsi⁄_™d_åaôs
;

308 
uöçå_t
 
	g¥ev_mode
 = 
vt
 & 
èsk_group_c⁄ãxt
::
exa˘_ex˚±i⁄
 ? 
¥›ag©i⁄_mode_exa˘
 : 0;

309 
	gvt
 = 
√w_mode
 & 
¥›ag©i⁄_mode_exa˘
 ? 
vt
 | 
èsk_group_c⁄ãxt
::
exa˘_ex˚±i⁄


310 : 
√w_mode
 & 
¥›ag©i⁄_mode_ˇ±uªd
 ? 
vt
 & ~
èsk_group_c⁄ãxt
::
exa˘_ex˚±i⁄
 : vt;

314 
	gmy_scheduÀr
 = 
°©ic_ˇ°
<
scheduÀr
*>((
gíîic_scheduÀr
*)((
uöçå_t
)
s
 | 
¥ev_mode
));

318 
	gmy_scheduÀr
 = 
s
;

320 
__TBB_ASSERT
–!
thªad_°ack_size
, "deferred initialization ignores stack size setting" );

324 
	gèsk_scheduÀr_öô
::
ãrmö©e
() {

325 #i‡
__TBB_TASK_GROUP_CONTEXT
 && 
TBB_USE_EXCEPTIONS


326 
uöçå_t
 
¥ev_mode
 = (uöçå_t)
my_scheduÀr
 & 
¥›ag©i⁄_mode_exa˘
;

327 
	gmy_scheduÀr
 = (
scheduÀr
*)((
uöçå_t
)
my_scheduÀr
 & ~(uöçå_t)
¥›ag©i⁄_mode_exa˘
);

329 
gíîic_scheduÀr
* 
	gs
 = 
°©ic_ˇ°
<gíîic_scheduÀr*>(
my_scheduÀr
);

330 
	gmy_scheduÀr
 = 
NULL
;

331 
__TBB_ASSERT
–
s
, "task_scheduler_init::terminate without correspondingÅask_scheduler_init::initialize()");

332 #i‡
__TBB_TASK_GROUP_CONTEXT
 && 
TBB_USE_EXCEPTIONS


333 i‡–
	gs
->
ma°î_ouãrmo°_Àvñ
() ) {

334 
	guöçå_t
 &
	gvt
 = 
s
->
deÁu…_c⁄ãxt
()->
my_vîsi⁄_™d_åaôs
;

335 
	gvt
 = 
¥ev_mode
 & 
¥›ag©i⁄_mode_exa˘
 ? 
vt
 | 
èsk_group_c⁄ãxt
::
exa˘_ex˚±i⁄


336 : 
vt
 & ~
èsk_group_c⁄ãxt
::
exa˘_ex˚±i⁄
;

339 
	ggovîn‹
::
ãrmö©e_scheduÀr
(
s
, 
this
);

342 
	gèsk_scheduÀr_öô
::
deÁu…_num_thªads
() {

343  
govîn‹
::
deÁu…_num_thªads
();

	@viper/concurrentqueue-src/benchmarks/tbb/governor.h

21 #i‚de‡
_TBB_govîn‹_H


22 
	#_TBB_govîn‹_H


	)

24 
	~"tbb/èsk_scheduÀr_öô.h
"

25 
	~"../rml/ö˛ude/rml_tbb.h
"

27 
	~"tbb_misc.h
"

28 
	~"és.h
"

30 #i‡
__TBB_SURVIVE_THREAD_SWITCH


31 
	~"cûk-tbb-öãr›.h
"

34 
«me•a˚
 
	gtbb
 {

35 
«me•a˚
 
	göã∫Æ
 {

37 
˛ass
 
	gm¨kë
;

38 
˛ass
 
	ggíîic_scheduÀr
;

39 
˛ass
 
	g__TBB_InôOn˚
;

48 ˛as†
	cgovîn‹
 {

49 
‰õnd
 
˛ass
 
	g__TBB_InôOn˚
;

50 
‰õnd
 
˛ass
 
	gm¨kë
;

53 
	gbasic_és
<
	ggíîic_scheduÀr
*> 
	gtheTLS
;

56 
	gDeÁu…NumbîOfThªads
;

58 
	grml
::
tbb_Á˘‹y
 
theRMLSîvîFa˘‹y
;

60 
boﬁ
 
	gU£Priv©eRML
;

63 c⁄° 
èsk_scheduÀr_öô
 *
	gBlockögTSI
;

65 #i‡
TBB_USE_ASSERT


66 
boﬁ
 
	gIsBlockögTîmö©i⁄InProgªss
;

69 
boﬁ
 
	gis_•ecuœti⁄_íabÀd
;

72 
acquúe_ªsour˚s
 ();

75 
ªÀa£_ªsour˚s
 ();

77 
	grml
::
tbb_£rvî
* 
¸óã_rml_£rvî
 ( 
rml
::
tbb_˛õ¡
& );

82 
auto_ãrmö©e
(* 
scheduÀr
);

84 
	gpublic
:

85 
deÁu…_num_thªads
 () {

87  
DeÁu…NumbîOfThªads
 ? DefaultNumberOfThreads :

88 
DeÁu…NumbîOfThªads
 = 
AvaûabÀHwC⁄cuºícy
();

93 
gíîic_scheduÀr
* 
öô_scheduÀr
–
num_thªads
, 
°ack_size_ty≥
 
°ack_size
, 
boﬁ
 
auto_öô
 = 
Ál£
 );

96 
ãrmö©e_scheduÀr
–
gíîic_scheduÀr
* 
s
, c⁄° 
èsk_scheduÀr_öô
 *
tsi_±r
 );

99 
sign_⁄
(
gíîic_scheduÀr
* 
s
);

102 
sign_off
(
gíîic_scheduÀr
* 
s
);

105 
boﬁ
 
is_£t
 ( 
gíîic_scheduÀr
* 
s
 ) {  
	gtheTLS
.
gë
() == s; }

108 
assume_scheduÀr
–
gíîic_scheduÀr
* 
s
 ) { 
	gtheTLS
.
£t
( s ); }

113 
gíîic_scheduÀr
* 
loˇl_scheduÀr
 () {

114 
gíîic_scheduÀr
* 
	gs
 = 
theTLS
.
gë
();

115  
	gs
 ? s : 
öô_scheduÀr
–()
èsk_scheduÀr_öô
::
autom©ic
, 0, 
åue
 );

118 
gíîic_scheduÀr
* 
loˇl_scheduÀr_if_öôülized
 () {

119  
	gtheTLS
.
gë
();

123 
ãrmö©e_auto_öôülized_scheduÀr
() {

124 
auto_ãrmö©e
–
theTLS
.
gë
() );

127 
¥öt_vîsi⁄_öfo
 ();

129 
öôülize_rml_Á˘‹y
 ();

131 
boﬁ
 
√edsWaôW‹kîs
 (Ë{  
	gBlockögTSI
!=
NULL
; }

134 
£tBlockögTîmö©e
(c⁄° 
èsk_scheduÀr_öô
 *
tsi
);

136 #i‡
__TBB_SURVIVE_THREAD_SWITCH


137 
__cûk_tbb_ªtcode
 
°ack_›_h™dÀr
–
__cûk_tbb_°ack_›
 
›
, * );

139 
boﬁ
 
•ecuœti⁄_íabÀd
(Ë{  
	gis_•ecuœti⁄_íabÀd
; }

	@viper/concurrentqueue-src/benchmarks/tbb/ibm_aix51/atomic_support.c

21 
	~<°döt.h
>

22 
	~<sys/©omic_›.h
>

27 #ifde‡
__GNUC__


29 
öt32_t
 
	$__TBB_machöe_ˇs_32
 (vﬁ©ûê* 
±r
, 
öt32_t
 
vÆue
, i¡32_à
com∑ønd
) {

30 
__asm__
 
	`__vﬁ©ûe__
 ("sync\n");

31 
	`com∑ª_™d_sw≠
 ((
©omic_p
Ë
±r
, &
com∑ønd
, 
vÆue
);

32 
__asm__
 
	`__vﬁ©ûe__
 ("isync\n");

33  
com∑ønd
;

34 
	}
}

36 
öt64_t
 
	$__TBB_machöe_ˇs_64
 (vﬁ©ûê* 
±r
, 
öt64_t
 
vÆue
, i¡64_à
com∑ønd
) {

37 
__asm__
 
	`__vﬁ©ûe__
 ("sync\n");

38 
	`com∑ª_™d_sw≠Õ
 ((
©omic_l
Ë
±r
, &
com∑ønd
, 
vÆue
);

39 
__asm__
 
	`__vﬁ©ûe__
 ("isync\n");

40  
com∑ønd
;

41 
	}
}

43 
	$__TBB_machöe_Êush
 () {

44 
__asm__
 
	`__vﬁ©ûe__
 ("sync\n");

45 
	}
}

47 
	$__TBB_machöe_lwsync
 () {

48 
__asm__
 
	`__vﬁ©ûe__
 ("lwsync\n");

49 
	}
}

51 
	$__TBB_machöe_isync
 () {

52 
__asm__
 
	`__vﬁ©ûe__
 ("isync\n");

53 
	}
}

	@viper/concurrentqueue-src/benchmarks/tbb/internal/_aggregator_impl.h

21 #i‚de‡
__TBB__aggªg©‹_im∂_H


22 
	#__TBB__aggªg©‹_im∂_H


	)

24 
	~"../©omic.h
"

25 #i‡!
__TBBMALLOC_BUILD


26 
	~"../tbb_¥ofûög.h
"

29 
«me•a˚
 
	gtbb
 {

30 
«me•a˚
 
	göãrÁ˚6
 {

31 
«me•a˚
 
	göã∫Æ
 {

33 
usög
 
«me•a˚
 
	gtbb
::
öã∫Æ
;

36 
	gãm∂©e
 <
ty≥«me
 
	gDîived
>

37 ˛as†
	caggªg©ed_›î©i⁄
 {

38 
	gpublic
:

39 
uöçå_t
 
°©us
;

40 
Dîived
 *
	g√xt
;

41 
aggªg©ed_›î©i⁄
(Ë: 
°©us
(0), 
√xt
(
NULL
) {}

50 
	gãm∂©e
 < 
ty≥«me
 
	g›î©i⁄_ty≥
 >

51 ˛as†
	caggªg©‹_gíîic
 {

52 
	gpublic
:

53 
aggªg©‹_gíîic
(Ë: 
h™dÀr_busy
(
Ál£
Ë{ 
≥ndög_›î©i⁄s
 = 
NULL
; }

63 
	gãm∂©e
 < 
ty≥«me
 
	gh™dÀr_ty≥
 >

64 
execuã
(
›î©i⁄_ty≥
 *
›
, 
h™dÀr_ty≥
 &
h™dÀ_›î©i⁄s
, 
boﬁ
 
l⁄g_li„_time
 = 
åue
) {

65 
›î©i⁄_ty≥
 *
ªs
;

69 c⁄° 
uöçå_t
 
	g°©us
 = 
›
->
°©us
;

76 
ˇŒ_ôt_nŸify
(
ªÀasög
, &(
›
->
°©us
));

81 
	g›
->
	g√xt
 = 
ªs
 = 
≥ndög_›î©i⁄s
;

82 } 
	g≥ndög_›î©i⁄s
.
com∑ª_™d_sw≠
(
›
, 
ªs
) !=Ñes);

83 i‡(!
	gªs
) {

87 
ˇŒ_ôt_nŸify
(
acquúed
, &
≥ndög_›î©i⁄s
);

88 
°¨t_h™dÀ_›î©i⁄s
(
h™dÀ_›î©i⁄s
);

90 i‡(
	gl⁄g_li„_time
)

91 
__TBB_ASSERT
(
›
->
°©us
, 
NULL
);

94 i‡(!
	g°©us
) {

95 
__TBB_ASSERT
(
l⁄g_li„_time
, "The blocking operation cannot have 'short'ÜifeÅime. Since it canálready be destroyed.");

96 
ˇŒ_ôt_nŸify
(
¥ï¨e
, &(
›
->
°©us
));

97 
•ö_waô_whûe_eq
(
›
->
°©us
, 
uöçå_t
(0));

98 
ôt_lﬂd_w‹d_wôh_acquúe
(
›
->
°©us
);

102 
	g¥iv©e
:

104 
©omic
<
›î©i⁄_ty≥
 *> 
≥ndög_›î©i⁄s
;

106 
uöçå_t
 
	gh™dÀr_busy
;

109 
	gãm∂©e
 < 
ty≥«me
 
	gh™dÀr_ty≥
 >

110 
°¨t_h™dÀ_›î©i⁄s
–
h™dÀr_ty≥
 &
h™dÀ_›î©i⁄s
 ) {

111 
›î©i⁄_ty≥
 *
	g›_li°
;

119 
ˇŒ_ôt_nŸify
(
¥ï¨e
, &
h™dÀr_busy
);

122 
•ö_waô_u¡û_eq
(
h™dÀr_busy
, 
uöçå_t
(0));

123 
ˇŒ_ôt_nŸify
(
acquúed
, &
h™dÀr_busy
);

125 
__TBB_°‹e_wôh_ªÀa£
(
h™dÀr_busy
, 
uöçå_t
(1));

131 
ˇŒ_ôt_nŸify
(
ªÀasög
, &
≥ndög_›î©i⁄s
);

133 
	g›_li°
 = 
≥ndög_›î©i⁄s
.
„tch_™d_°‹e
(
NULL
);

136 
h™dÀ_›î©i⁄s
(
›_li°
);

139 
ôt_°‹e_w‹d_wôh_ªÀa£
(
h™dÀr_busy
, 
uöçå_t
(0));

143 
	gãm∂©e
 < 
ty≥«me
 
	gh™dÀr_ty≥
,Åy≥«mê
	g›î©i⁄_ty≥
 >

144 
˛ass
 
	gaggªg©‹
 : 
public
 
aggªg©‹_gíîic
<
›î©i⁄_ty≥
> {

145 
h™dÀr_ty≥
 
h™dÀ_›î©i⁄s
;

146 
	gpublic
:

147 
aggªg©‹
() {}

148 
ex∂icô
 
aggªg©‹
(
h™dÀr_ty≥
 
h
Ë: 
h™dÀ_›î©i⁄s
(h) {}

150 
öôülize_h™dÀr
(
h™dÀr_ty≥
 
h
Ë{ 
h™dÀ_›î©i⁄s
 = h; }

152 
execuã
(
›î©i⁄_ty≥
 *
›
) {

153 
	gaggªg©‹_gíîic
<
	g›î©i⁄_ty≥
>::
execuã
(
›
, 
h™dÀ_›î©i⁄s
);

159 
	gãm∂©e
<
ty≥«me
 
	gaggªg©ög_˛ass
,Åy≥«mê
	g›î©i⁄_li°
>

160 ˛as†
	caggªg©ög_fun˘‹
 {

161 
aggªg©ög_˛ass
 *
	gfi
;

162 
	gpublic
:

163 
aggªg©ög_fun˘‹
() {}

164 
aggªg©ög_fun˘‹
(
aggªg©ög_˛ass
 *
fi_
Ë: 
fi
(fi_) {}

165 
›î©‹
()(
›î©i⁄_li°
* 
›_li°
Ë{ 
fi
->
h™dÀ_›î©i⁄s
(op_list); }

171 
«me•a˚
 
	göã∫Æ
 {

172 
usög
 
	göãrÁ˚6
::
öã∫Æ
::
aggªg©ed_›î©i⁄
;

173 
usög
 
	göãrÁ˚6
::
öã∫Æ
::
aggªg©‹_gíîic
;

174 
usög
 
	göãrÁ˚6
::
öã∫Æ
::
aggªg©‹
;

175 
usög
 
	göãrÁ˚6
::
öã∫Æ
::
aggªg©ög_fun˘‹
;

	@viper/concurrentqueue-src/benchmarks/tbb/internal/_concurrent_queue_impl.h

21 #i‚de‡
__TBB__c⁄cuºít_queue_im∂_H


22 
	#__TBB__c⁄cuºít_queue_im∂_H


	)

24 #i‚de‡
__TBB_c⁄cuºít_queue_H


25 #îr‹ 
Do
 
nŸ
 #ö˛udê
this
 
öã∫Æ
 
fûe
 
dúe˘ly
; 
u£
 
public
 
TBB
 
hódîs
 
ö°ód
.

28 
	~"../tbb_°ddef.h
"

29 
	~"../tbb_machöe.h
"

30 
	~"../©omic.h
"

31 
	~"../•ö_muãx.h
"

32 
	~"../ˇche_Æig√d_Æloˇt‹.h
"

33 
	~"../tbb_ex˚±i⁄.h
"

34 
	~"../tbb_¥ofûög.h
"

35 
	~<√w
>

36 
	~<utûôy
>

38 #i‡!
TBB_USE_EXCEPTIONS
 && 
_MSC_VER


40 #¥agm®
w¨nög
 (
push
)

41 #¥agm®
w¨nög
 (
dißbÀ
: 4530)

44 
	~<ôî©‹
>

46 #i‡!
TBB_USE_EXCEPTIONS
 && 
_MSC_VER


47 #¥agm®
w¨nög
 (
p›
)

50 
«me•a˚
 
	gtbb
 {

52 #i‡!
__TBB_TEMPLATE_FRIENDS_BROKEN


55 
«me•a˚
 
	g°ri˘_µl
 {

56 
	gãm∂©e
<
ty≥«me
 
	gT
,Åy≥«mê
	gA
> 
˛ass
 
	gc⁄cuºít_queue
;

59 
	gãm∂©e
<
ty≥«me
 
	gT
,Åy≥«mê
	gA
> 
˛ass
 
	gc⁄cuºít_bounded_queue
;

64 
«me•a˚
 
	g°ri˘_µl
 {

67 
«me•a˚
 
	göã∫Æ
 {

69 
usög
 
«me•a˚
 
	gtbb
::
öã∫Æ
;

71 
size_t
 
	ttickë
;

73 
	gãm∂©e
<
ty≥«me
 
	gT
> 
˛ass
 
	gmi¸o_queue
 ;

74 
	gãm∂©e
<
ty≥«me
 
	gT
> 
˛ass
 
	gmi¸o_queue_p›_föÆizî
 ;

75 
	gãm∂©e
<
ty≥«me
 
	gT
> 
˛ass
 
	gc⁄cuºít_queue_ba£_v3
;

76 
	gãm∂©e
<
ty≥«me
 
	gT
> 
	gc⁄cuºít_queue_ªp
;

82 
	gc⁄cuºít_queue_ªp_ba£
 : 
no_c›y
 {

83 
ãm∂©e
<
ty≥«me
 
T
> 
‰õnd
 
˛ass
 
mi¸o_queue
;

84 
	gãm∂©e
<
ty≥«me
 
	gT
> 
‰õnd
 
˛ass
 
	gc⁄cuºít_queue_ba£_v3
;

86 
	g¥Ÿe˘ed
:

88 c⁄° 
size_t
 
phi
 = 3;

90 
	gpublic
:

92 c⁄° 
size_t
 
n_queue
 = 8;

95 
	s∑ge
 {

96 
∑ge
* 
	g√xt
;

97 
uöçå_t
 
	gmask
;

100 
	g©omic
<
	gtickë
> 
	ghód_cou¡î
;

101 
	g∑d1
[
NFS_MaxLöeSize
-(
©omic
<
tickë
>)];

102 
	g©omic
<
	gtickë
> 
	gèû_cou¡î
;

103 
	g∑d2
[
NFS_MaxLöeSize
-(
©omic
<
tickë
>)];

106 
size_t
 
	gôems_≥r_∑ge
;

109 
size_t
 
	gôem_size
;

112 
	g©omic
<
	gsize_t
> 
	gn_övÆid_íåõs
;

114 
	g∑d3
[
NFS_MaxLöeSize
-(
size_t
)-(size_t)-(
©omic
<size_t>)];

117 
ölöe
 
boﬁ
 
is_vÆid_∑ge
(c⁄° 
c⁄cuºít_queue_ªp_ba£
::
∑ge
* 
p
) {

118  
uöçå_t
(
p
)>1;

125 ˛as†
	cc⁄cuºít_queue_∑ge_Æloˇt‹


127 
	gãm∂©e
<
ty≥«me
 
	gT
> 
‰õnd
 
˛ass
 
	gmi¸o_queue
 ;

128 
	gãm∂©e
<
ty≥«me
 
	gT
> 
‰õnd
 
˛ass
 
	gmi¸o_queue_p›_föÆizî
 ;

129 
	g¥Ÿe˘ed
:

130 
vútuÆ
 ~
c⁄cuºít_queue_∑ge_Æloˇt‹
() {}

131 
¥iv©e
:

132 
vútuÆ
 
c⁄cuºít_queue_ªp_ba£
::
∑ge
* 
Æloˇã_∑ge
() = 0;

133 
vútuÆ
 
dóŒoˇã_∑ge
–
c⁄cuºít_queue_ªp_ba£
::
∑ge
* 
p
 ) = 0;

136 #i‡
_MSC_VER
 && !
deföed
(
__INTEL_COMPILER
)

138 #¥agm®
w¨nög
–
push
 )

139 #¥agm®
w¨nög
–
dißbÀ
: 4146 )

145 
	gãm∂©e
<
ty≥«me
 
	gT
>

146 ˛as†
	cmi¸o_queue
 : 
no_c›y
 {

147 
public
:

148 (*
ôem_c⁄°ru˘‹_t
)(
	tT
* 
	tloˇti⁄
, c⁄° * 
	t§c
);

149 
	g¥iv©e
:

150 
c⁄cuºít_queue_ªp_ba£
::
	t∑ge
Öage;

153 ˛as†
	cde°royî
: 
no_c›y
 {

154 
T
& 
my_vÆue
;

155 
	gpublic
:

156 
de°royî
–
T
& 
vÆue
 ) : 
my_vÆue
(value) {}

157 ~
de°royî
(Ë{
my_vÆue
.~
T
();}

160 
c›y_ôem
–
∑ge
& 
d°
, 
size_t
 
dödex
, c⁄° * 
§c
, 
ôem_c⁄°ru˘‹_t
 
c⁄°ru˘_ôem
 ) {

161 
c⁄°ru˘_ôem
–&
gë_ªf
(
d°
, 
dödex
), 
§c
 );

164 
c›y_ôem
–
∑ge
& 
d°
, 
size_t
 
dödex
, c⁄°Öage& 
§c
, size_à
södex
,

165 
ôem_c⁄°ru˘‹_t
 
c⁄°ru˘_ôem
 )

167 
	gT
& 
	g§c_ôem
 = 
gë_ªf
–
c⁄°_ˇ°
<
∑ge
&>(
§c
), 
södex
 );

168 
c⁄°ru˘_ôem
–&
gë_ªf
(
d°
, 
dödex
), 
°©ic_ˇ°
<c⁄° *>(&
§c_ôem
) );

171 
assign_™d_de°roy_ôem
–* 
d°
, 
∑ge
& 
§c
, 
size_t
 
ödex
 ) {

172 
	gT
& 
	g‰om
 = 
gë_ªf
(
§c
,
ödex
);

173 
de°royî
 
d
(
‰om
);

174 *
	g°©ic_ˇ°
<
	gT
*>(
	gd°
Ë
tbb
::
öã∫Æ
::
move
–
‰om
 );

177 
•ö_waô_u¡û_my_tu∫
–
©omic
<
tickë
>& 
cou¡î
,Åickë 
k
, 
c⁄cuºít_queue_ªp_ba£
& 
rb
 ) const ;

179 
	gpublic
:

180 
‰õnd
 
˛ass
 
mi¸o_queue_p›_föÆizî
<
T
>;

182 
	g∑dded_∑ge
: 
∑ge
 {

184 
∑dded_∑ge
();

186 
	g›î©‹
=–c⁄° 
∑dded_∑ge
& );

188 
T
 
	gœ°
;

191 
	gT
& 
gë_ªf
–
∑ge
& 
p
, 
size_t
 
ödex
 ) {

192  (&
	g°©ic_ˇ°
<
	g∑dded_∑ge
*>(°©ic_ˇ°<*>(&
	gp
))->
	gœ°
)[
ödex
];

195 
	g©omic
<
	g∑ge
*> 
	ghód_∑ge
;

196 
	g©omic
<
	gtickë
> 
	ghód_cou¡î
;

198 
	g©omic
<
	g∑ge
*> 
	gèû_∑ge
;

199 
	g©omic
<
	gtickë
> 
	gèû_cou¡î
;

201 
•ö_muãx
 
	g∑ge_muãx
;

203 
push
–c⁄° * 
ôem
, 
tickë
 
k
, 
c⁄cuºít_queue_ba£_v3
<
T
>& 
ba£
,

204 
ôem_c⁄°ru˘‹_t
 
c⁄°ru˘_ôem
 ) ;

206 
boﬁ
 
p›
–* 
d°
, 
tickë
 
k
, 
c⁄cuºít_queue_ba£_v3
<
T
>& 
ba£
 ) ;

208 
	gmi¸o_queue
& 
assign
–c⁄° 
mi¸o_queue
& 
§c
, 
c⁄cuºít_queue_ba£_v3
<
T
>& 
ba£
,

209 
ôem_c⁄°ru˘‹_t
 
c⁄°ru˘_ôem
 ) ;

211 
∑ge
* 
make_c›y
–
c⁄cuºít_queue_ba£_v3
<
T
>& 
ba£
, c⁄°Öage* 
§c_∑ge
, 
size_t
 
begö_ö_∑ge
,

212 
size_t
 
íd_ö_∑ge
, 
tickë
& 
g_ödex
, 
ôem_c⁄°ru˘‹_t
 
c⁄°ru˘_ôem
 ) ;

214 
övÆid©e_∑ge_™d_ªthrow
–
tickë
 
k
 ) ;

217 
	gãm∂©e
<
ty≥«me
 
	gT
>

218 
	gmi¸o_queue
<
	gT
>::
•ö_waô_u¡û_my_tu∫
–
©omic
<
tickë
>& 
cou¡î
,Åickë 
k
, 
c⁄cuºít_queue_ªp_ba£
& 
rb
 ) const {

219  
©omic_backoff
 
b
(
åue
);;
	gb
.
∑u£
() ) {

220 
tickë
 
	gc
 = 
cou¡î
;

221 if–
	gc
==
k
 ) ;

222 if–
	gc
&1 ) {

223 ++
	grb
.
	gn_övÆid_íåõs
;

224 
throw_ex˚±i⁄
–
eid_bad_œ°_Æloc
 );

229 
	gãm∂©e
<
ty≥«me
 
	gT
>

230 
	gmi¸o_queue
<
	gT
>::
push
–c⁄° * 
ôem
, 
tickë
 
k
, 
c⁄cuºít_queue_ba£_v3
<
T
>& 
ba£
,

231 
ôem_c⁄°ru˘‹_t
 
c⁄°ru˘_ôem
 )

233 
	gk
 &-
c⁄cuºít_queue_ªp_ba£
::
n_queue
;

234 
∑ge
* 
	gp
 = 
NULL
;

235 
size_t
 
	gödex
 = 
modulo_powî_of_two
–
k
/
c⁄cuºít_queue_ªp_ba£
::
n_queue
, 
ba£
.
my_ªp
->
ôems_≥r_∑ge
);

236 if–!
	gödex
 ) {

237 
	g__TBB_TRY
 {

238 
	gc⁄cuºít_queue_∑ge_Æloˇt‹
& 
	g∑
 = 
ba£
;

239 
	gp
 = 
∑
.
Æloˇã_∑ge
();

240 } 
__TBB_CATCH
 (...) {

241 ++
	gba£
.
	gmy_ªp
->
	gn_övÆid_íåõs
;

242 
övÆid©e_∑ge_™d_ªthrow
–
k
 );

244 
	gp
->
	gmask
 = 0;

245 
	gp
->
	g√xt
 = 
NULL
;

248 if–
	gèû_cou¡î
 !
k
 ) 
•ö_waô_u¡û_my_tu∫
–
èû_cou¡î
, k, *
ba£
.
my_ªp
 );

249 
ˇŒ_ôt_nŸify
(
acquúed
, &
èû_cou¡î
);

251 if–
	gp
 ) {

252 
	g•ö_muãx
::
sc›ed_lock
 
lock
–
∑ge_muãx
 );

253 
∑ge
* 
	gq
 = 
èû_∑ge
;

254 if–
is_vÆid_∑ge
(
q
) )

255 
	gq
->
	g√xt
 = 
p
;

257 
	ghód_∑ge
 = 
p
;

258 
	gèû_∑ge
 = 
p
;

260 
	gp
 = 
èû_∑ge
;

263 
	g__TBB_TRY
 {

264 
c›y_ôem
–*
p
, 
ödex
, 
ôem
, 
c⁄°ru˘_ôem
 );

266 
ôt_hide_°‹e_w‹d
(
p
->
mask
,Ö->mask | 
uöçå_t
(1)<<
ödex
);

267 
ˇŒ_ôt_nŸify
(
ªÀasög
, &
èû_cou¡î
);

268 
	gèû_cou¡î
 +
c⁄cuºít_queue_ªp_ba£
::
n_queue
;

269 } 
__TBB_CATCH
 (...) {

270 ++
	gba£
.
	gmy_ªp
->
	gn_övÆid_íåõs
;

271 
ˇŒ_ôt_nŸify
(
ªÀasög
, &
èû_cou¡î
);

272 
	gèû_cou¡î
 +
c⁄cuºít_queue_ªp_ba£
::
n_queue
;

273 
__TBB_RETHROW
();

277 
	gãm∂©e
<
ty≥«me
 
	gT
>

278 
boﬁ
 
	gmi¸o_queue
<
	gT
>::
p›
–* 
d°
, 
tickë
 
k
, 
c⁄cuºít_queue_ba£_v3
<
T
>& 
ba£
 ) {

279 
	gk
 &-
c⁄cuºít_queue_ªp_ba£
::
n_queue
;

280 if–
	ghód_cou¡î
!=
k
 ) 
•ö_waô_u¡û_eq
–
hód_cou¡î
, k );

281 
ˇŒ_ôt_nŸify
(
acquúed
, &
hód_cou¡î
);

282 if–
	gèû_cou¡î
==
k
 ) 
•ö_waô_whûe_eq
–
èû_cou¡î
, k );

283 
ˇŒ_ôt_nŸify
(
acquúed
, &
èû_cou¡î
);

284 
	g∑ge
& 
	gp
 = *
hód_∑ge
;

285 
__TBB_ASSERT
–&
p
, 
NULL
 );

286 
size_t
 
	gödex
 = 
modulo_powî_of_two
–
k
/
c⁄cuºít_queue_ªp_ba£
::
n_queue
, 
ba£
.
my_ªp
->
ôems_≥r_∑ge
 );

287 
boﬁ
 
	gsuc˚ss
 = 
Ál£
;

289 
	gmi¸o_queue_p›_föÆizî
<
	gT
> 
föÆizî
–*
this
, 
ba£
, 
k
+
c⁄cuºít_queue_ªp_ba£
::
n_queue
, 
ödex
==ba£.
my_ªp
->
ôems_≥r_∑ge
-1 ? &
p
 : 
NULL
 );

290 if–
	gp
.
	gmask
 & 
uöçå_t
(1)<<
	gödex
 ) {

291 
	gsuc˚ss
 = 
åue
;

292 
assign_™d_de°roy_ôem
–
d°
, 
p
, 
ödex
 );

294 --
	gba£
.
	gmy_ªp
->
	gn_övÆid_íåõs
;

297  
	gsuc˚ss
;

300 
	gãm∂©e
<
ty≥«me
 
	gT
>

301 
	gmi¸o_queue
<
	gT
>& mi¸o_queue<T>::
assign
–c⁄° 
mi¸o_queue
<
T
>& 
§c
, 
c⁄cuºít_queue_ba£_v3
<T>& 
ba£
,

302 
ôem_c⁄°ru˘‹_t
 
c⁄°ru˘_ôem
 )

304 
	ghód_cou¡î
 = 
§c
.
hód_cou¡î
;

305 
	gèû_cou¡î
 = 
§c
.
èû_cou¡î
;

307 c⁄° 
∑ge
* 
	g§˝
 = 
§c
.
hód_∑ge
;

308 if–
is_vÆid_∑ge
(
§˝
) ) {

309 
tickë
 
	gg_ödex
 = 
hód_cou¡î
;

310 
	g__TBB_TRY
 {

311 
size_t
 
	gn_ôems
 = (
èû_cou¡î
-
hód_cou¡î
)/
c⁄cuºít_queue_ªp_ba£
::
n_queue
;

312 
size_t
 
	gödex
 = 
modulo_powî_of_two
–
hód_cou¡î
/
c⁄cuºít_queue_ªp_ba£
::
n_queue
, 
ba£
.
my_ªp
->
ôems_≥r_∑ge
 );

313 
size_t
 
	gíd_ö_fú°_∑ge
 = (
ödex
+
n_ôems
<
ba£
.
my_ªp
->
ôems_≥r_∑ge
)?(index+n_items):base.my_rep->items_per_page;

315 
	ghód_∑ge
 = 
make_c›y
–
ba£
, 
§˝
, 
ödex
, 
íd_ö_fú°_∑ge
, 
g_ödex
, 
c⁄°ru˘_ôem
 );

316 
∑ge
* 
	gcur_∑ge
 = 
hód_∑ge
;

318 if–
	g§˝
 !
§c
.
èû_∑ge
 ) {

319  
§˝
 = sr˝->
√xt
; 
	g§˝
!=
§c
.
èû_∑ge
; srcp=srcp->next ) {

320 
cur_∑ge
->
√xt
 = 
make_c›y
–
ba£
, 
§˝
, 0, ba£.
my_ªp
->
ôems_≥r_∑ge
, 
g_ödex
, 
c⁄°ru˘_ôem
 );

321 
	gcur_∑ge
 = 
cur_∑ge
->
√xt
;

324 
__TBB_ASSERT
–
§˝
==
§c
.
èû_∑ge
, 
NULL
 );

325 
size_t
 
	gœ°_ödex
 = 
modulo_powî_of_two
–
èû_cou¡î
/
c⁄cuºít_queue_ªp_ba£
::
n_queue
, 
ba£
.
my_ªp
->
ôems_≥r_∑ge
 );

326 if–
	gœ°_ödex
==0 ) 
œ°_ödex
 = 
ba£
.
my_ªp
->
ôems_≥r_∑ge
;

328 
	gcur_∑ge
->
	g√xt
 = 
make_c›y
–
ba£
, 
§˝
, 0, 
œ°_ödex
, 
g_ödex
, 
c⁄°ru˘_ôem
 );

329 
	gcur_∑ge
 = 
cur_∑ge
->
√xt
;

331 
	gèû_∑ge
 = 
cur_∑ge
;

332 } 
__TBB_CATCH
 (...) {

333 
övÆid©e_∑ge_™d_ªthrow
–
g_ödex
 );

336 
	ghód_∑ge
 = 
èû_∑ge
 = 
NULL
;

338  *
	gthis
;

341 
	gãm∂©e
<
ty≥«me
 
	gT
>

342 
	gmi¸o_queue
<
	gT
>::
övÆid©e_∑ge_™d_ªthrow
–
tickë
 
k
 ) {

344 
∑ge
* 
övÆid_∑ge
 = (∑ge*)
uöçå_t
(1);

346 
	g•ö_muãx
::
sc›ed_lock
 
lock
–
∑ge_muãx
 );

347 
ôt_°‹e_w‹d_wôh_ªÀa£
(
èû_cou¡î
, 
k
+
c⁄cuºít_queue_ªp_ba£
::
n_queue
+1);

348 
∑ge
* 
	gq
 = 
èû_∑ge
;

349 if–
is_vÆid_∑ge
(
q
) )

350 
	gq
->
	g√xt
 = 
övÆid_∑ge
;

352 
	ghód_∑ge
 = 
övÆid_∑ge
;

353 
	gèû_∑ge
 = 
övÆid_∑ge
;

355 
__TBB_RETHROW
();

358 
	gãm∂©e
<
ty≥«me
 
	gT
>

359 
	gc⁄cuºít_queue_ªp_ba£
::
∑ge
* 
mi¸o_queue
<
T
>::
make_c›y
–
c⁄cuºít_queue_ba£_v3
<T>& 
ba£
,

360 c⁄° 
c⁄cuºít_queue_ªp_ba£
::
∑ge
* 
§c_∑ge
, 
size_t
 
begö_ö_∑ge
, size_à
íd_ö_∑ge
,

361 
tickë
& 
g_ödex
, 
ôem_c⁄°ru˘‹_t
 
c⁄°ru˘_ôem
 )

363 
	gc⁄cuºít_queue_∑ge_Æloˇt‹
& 
	g∑
 = 
ba£
;

364 
∑ge
* 
	g√w_∑ge
 = 
∑
.
Æloˇã_∑ge
();

365 
	g√w_∑ge
->
	g√xt
 = 
NULL
;

366 
	g√w_∑ge
->
	gmask
 = 
§c_∑ge
->
mask
;

367  ; 
	gbegö_ö_∑ge
!=
íd_ö_∑ge
; ++begö_ö_∑ge, ++
	gg_ödex
 )

368 if–
	g√w_∑ge
->
	gmask
 & 
uöçå_t
(1)<<
	gbegö_ö_∑ge
 )

369 
c›y_ôem
–*
√w_∑ge
, 
begö_ö_∑ge
, *
§c_∑ge
, begö_ö_∑ge, 
c⁄°ru˘_ôem
 );

370  
	g√w_∑ge
;

373 
	gãm∂©e
<
ty≥«me
 
	gT
>

374 ˛as†
	cmi¸o_queue_p›_föÆizî
: 
no_c›y
 {

375 
c⁄cuºít_queue_ªp_ba£
::
	t∑ge
Öage;

376 
tickë
 
	gmy_tickë
;

377 
	gmi¸o_queue
<
	gT
>& 
	gmy_queue
;

378 
∑ge
* 
	gmy_∑ge
;

379 
	gc⁄cuºít_queue_∑ge_Æloˇt‹
& 
	gÆloˇt‹
;

380 
	gpublic
:

381 
mi¸o_queue_p›_föÆizî
–
mi¸o_queue
<
T
>& 
queue
, 
c⁄cuºít_queue_ba£_v3
<T>& 
b
, 
tickë
 
k
, 
∑ge
* 
p
 ) :

382 
my_tickë
(
k
), 
my_queue
(
queue
), 
my_∑ge
(
p
), 
Æloˇt‹
(
b
)

384 ~
mi¸o_queue_p›_föÆizî
() ;

387 
	gãm∂©e
<
ty≥«me
 
	gT
>

388 
	gmi¸o_queue_p›_föÆizî
<
	gT
>::~
mi¸o_queue_p›_föÆizî
() {

389 
∑ge
* 
p
 = 
my_∑ge
;

390 if–
is_vÆid_∑ge
(
p
) ) {

391 
	g•ö_muãx
::
sc›ed_lock
 
lock
–
my_queue
.
∑ge_muãx
 );

392 
∑ge
* 
	gq
 = 
p
->
√xt
;

393 
	gmy_queue
.
	ghód_∑ge
 = 
q
;

394 if–!
is_vÆid_∑ge
(
q
) ) {

395 
	gmy_queue
.
	gèû_∑ge
 = 
NULL
;

398 
ôt_°‹e_w‹d_wôh_ªÀa£
(
my_queue
.
hód_cou¡î
, 
my_tickë
);

399 if–
is_vÆid_∑ge
(
p
) ) {

400 
	gÆloˇt‹
.
dóŒoˇã_∑ge
–
p
 );

404 #i‡
_MSC_VER
 && !
deföed
(
__INTEL_COMPILER
)

405 #¥agm®
w¨nög
–
p›
 )

408 
	gãm∂©e
<
ty≥«me
 
	gT
> 
˛ass
 
	gc⁄cuºít_queue_ôî©‹_ªp
 ;

409 
	gãm∂©e
<
ty≥«me
 
	gT
> 
˛ass
 
	gc⁄cuºít_queue_ôî©‹_ba£_v3
;

415 
	gãm∂©e
<
ty≥«me
 
	gT
>

416 
	gc⁄cuºít_queue_ªp
 : 
public
 
c⁄cuºít_queue_ªp_ba£
 {

417 
mi¸o_queue
<
T
> 
¨øy
[
n_queue
];

420 
size_t
 
ödex
–
tickë
 
k
 ) {

421  
k
*
	gphi
%
	gn_queue
;

424 
	gmi¸o_queue
<
	gT
>& 
choo£
–
tickë
 
k
 ) {

426  
	g¨øy
[
ödex
(
k
)];

435 
	gãm∂©e
<
ty≥«me
 
	gT
>

436 ˛as†
	cc⁄cuºít_queue_ba£_v3
: 
public
 
c⁄cuºít_queue_∑ge_Æloˇt‹
 {

438 
c⁄cuºít_queue_ªp
<
T
>* 
my_ªp
;

440 
‰õnd
 
	gc⁄cuºít_queue_ªp
<
	gT
>;

441 
‰õnd
 
˛ass
 
	gmi¸o_queue
<
	gT
>;

442 
‰õnd
 
˛ass
 
	gc⁄cuºít_queue_ôî©‹_ªp
<
	gT
>;

443 
‰õnd
 
˛ass
 
	gc⁄cuºít_queue_ôî©‹_ba£_v3
<
	gT
>;

445 
	g¥Ÿe˘ed
:

446 
ty≥«me
 
	tc⁄cuºít_queue_ªp
<
	tT
>::
	t∑ge
Öage;

448 
	g¥iv©e
:

449 
ty≥«me
 
	tmi¸o_queue
<
	tT
>::
	t∑dded_∑ge
Öadded_page;

450 
ty≥«me
 
	tmi¸o_queue
<
	tT
>::
	tôem_c⁄°ru˘‹_t
 item_constructor_t;

452  
vútuÆ
 
∑ge
 *
Æloˇã_∑ge
() {

453 
	gc⁄cuºít_queue_ªp
<
	gT
>& 
	gr
 = *
my_ªp
;

454 
size_t
 
	gn
 = (
∑dded_∑ge
Ë+ (
r
.
ôems_≥r_∑ge
-1)*(
T
);

455  
	gªöãΩªt_ˇ°
<
	g∑ge
*>(
Æloˇã_block
 ( 
n
 ));

458  
vútuÆ
 
dóŒoˇã_∑ge
–
c⁄cuºít_queue_ªp_ba£
::
∑ge
 *
p
 ) {

459 
c⁄cuºít_queue_ªp
<
T
>& 
r
 = *
my_ªp
;

460 
size_t
 
	gn
 = (
∑dded_∑ge
Ë+ (
r
.
ôems_≥r_∑ge
-1)*(
T
);

461 
dóŒoˇã_block
–
ªöãΩªt_ˇ°
<*>(
p
), 
n
 );

465 
vútuÆ
 *
Æloˇã_block
–
size_t
 
n
 ) = 0;

468 
vútuÆ
 
dóŒoˇã_block
–*
p
, 
size_t
 
n
 ) = 0;

470 
	g¥Ÿe˘ed
:

471 
c⁄cuºít_queue_ba£_v3
();

473  
	gvútuÆ
 ~
c⁄cuºít_queue_ba£_v3
() {

474 #i‡
TBB_USE_ASSERT


475 
size_t
 
	gnq
 = 
my_ªp
->
n_queue
;

476  
size_t
 
	gi
=0; i<
	gnq
; i++ )

477 
__TBB_ASSERT
–
my_ªp
->
¨øy
[
i
].
èû_∑ge
==
NULL
, "pages wereÇot freedÖroperly" );

479 
	gˇche_Æig√d_Æloˇt‹
<
	gc⁄cuºít_queue_ªp
<
	gT
> >().
dóŒoˇã
(
my_ªp
,1);

483 
öã∫Æ_push
–c⁄° * 
§c
, 
ôem_c⁄°ru˘‹_t
 
c⁄°ru˘_ôem
 ) {

484 
	gc⁄cuºít_queue_ªp
<
	gT
>& 
	gr
 = *
my_ªp
;

485 
tickë
 
	gk
 = 
r
.
èû_cou¡î
++;

486 
	gr
.
choo£
(
k
).
push
–
§c
, k, *
this
, 
c⁄°ru˘_ôem
 );

491 
boﬁ
 
öã∫Æ_åy_p›
–* 
d°
 ) ;

494 
size_t
 
öã∫Æ_size
() const ;

497 
boﬁ
 
öã∫Æ_em±y
() const ;

501 
öã∫Æ_föish_˛ór
() ;

504 
öã∫Æ_throw_ex˚±i⁄
() const {

505 
throw_ex˚±i⁄
–
eid_bad_Æloc
 );

509 
assign
–c⁄° 
c⁄cuºít_queue_ba£_v3
& 
§c
, 
ôem_c⁄°ru˘‹_t
 
c⁄°ru˘_ôem
 ) ;

511 #i‡
__TBB_CPP11_RVALUE_REF_PRESENT


513 
öã∫Æ_sw≠
–
c⁄cuºít_queue_ba£_v3
& 
§c
 ) {

514 
	g°d
::
sw≠
–
my_ªp
, 
§c
.my_rep );

519 
	gãm∂©e
<
ty≥«me
 
	gT
>

520 
	gc⁄cuºít_queue_ba£_v3
<
	gT
>::
c⁄cuºít_queue_ba£_v3
() {

521 c⁄° 
size_t
 
ôem_size
 = (
T
);

522 
	gmy_ªp
 = 
ˇche_Æig√d_Æloˇt‹
<
c⁄cuºít_queue_ªp
<
T
> >().
Æloˇã
(1);

523 
__TBB_ASSERT
–(
size_t
)
my_ªp
 % 
NFS_GëLöeSize
()==0, "alignmentÉrror" );

524 
__TBB_ASSERT
–(
size_t
)&
my_ªp
->
hód_cou¡î
 % 
NFS_GëLöeSize
()==0, "alignmentÉrror" );

525 
__TBB_ASSERT
–(
size_t
)&
my_ªp
->
èû_cou¡î
 % 
NFS_GëLöeSize
()==0, "alignmentÉrror" );

526 
__TBB_ASSERT
–(
size_t
)&
my_ªp
->
¨øy
 % 
NFS_GëLöeSize
()==0, "alignmentÉrror" );

527 
mem£t
(
my_ªp
,0,(
c⁄cuºít_queue_ªp
<
T
>));

528 
	gmy_ªp
->
	gôem_size
 = 
ôem_size
;

529 
	gmy_ªp
->
	gôems_≥r_∑ge
 = 
ôem_size
<= 8 ? 32 :

530 
ôem_size
<= 16 ? 16 :

531 
ôem_size
<= 32 ? 8 :

532 
ôem_size
<= 64 ? 4 :

533 
ôem_size
<=128 ? 2 :

537 
	gãm∂©e
<
ty≥«me
 
	gT
>

538 
boﬁ
 
	gc⁄cuºít_queue_ba£_v3
<
	gT
>::
öã∫Æ_åy_p›
–* 
d°
 ) {

539 
c⁄cuºít_queue_ªp
<
T
>& 
r
 = *
my_ªp
;

540 
tickë
 
	gk
;

542 
	gk
 = 
r
.
hód_cou¡î
;

544 if–(
	g±rdiff_t
)(
	gr
.
	gèû_cou¡î
-
	gk
)<=0 ) {

546  
Ál£
;

549 
tickë
 
	gtk
=
k
;

550 #i‡
deföed
(
_MSC_VER
Ë&& deföed(
_Wp64
)

551 #¥agm®
w¨nög
 (
push
)

552 #¥agm®
w¨nög
 (
dißbÀ
: 4267)

554 
	gk
 = 
r
.
hód_cou¡î
.
com∑ª_™d_sw≠
–
tk
+1,Åk );

555 #i‡
deföed
(
_MSC_VER
Ë&& deföed(
_Wp64
)

556 #¥agm®
w¨nög
 (
p›
)

558 if–
	gk
==
tk
 )

562 }  !
	gr
.
choo£
–
k
 ).
p›
–
d°
, k, *
this
 ) );

563  
	gåue
;

566 
	gãm∂©e
<
ty≥«me
 
	gT
>

567 
size_t
 
	gc⁄cuºít_queue_ba£_v3
<
	gT
>::
öã∫Æ_size
() const {

568 
c⁄cuºít_queue_ªp
<
T
>& 
r
 = *
my_ªp
;

569 
__TBB_ASSERT
–(
±rdiff_t
)<=(
size_t
), 
NULL
 );

570 
tickë
 
	ghc
 = 
r
.
hód_cou¡î
;

571 
size_t
 
	gnõ
 = 
r
.
n_övÆid_íåõs
;

572 
tickë
 
	gtc
 = 
r
.
èû_cou¡î
;

573 
__TBB_ASSERT
–
hc
!=
tc
 || !
nõ
, 
NULL
 );

574 
±rdiff_t
 
	gsz
 = 
tc
-
hc
-
nõ
;

575  
	gsz
<0 ? 0 : 
size_t
(
sz
);

578 
	gãm∂©e
<
ty≥«me
 
	gT
>

579 
boﬁ
 
	gc⁄cuºít_queue_ba£_v3
<
	gT
>::
öã∫Æ_em±y
() const {

580 
c⁄cuºít_queue_ªp
<
T
>& 
r
 = *
my_ªp
;

581 
tickë
 
	gtc
 = 
r
.
èû_cou¡î
;

582 
tickë
 
	ghc
 = 
r
.
hód_cou¡î
;

584  
	gtc
==
r
.
èû_cou¡î
 && 
tc
==
hc
+r.
n_övÆid_íåõs
 ;

587 
	gãm∂©e
<
ty≥«me
 
	gT
>

588 
	gc⁄cuºít_queue_ba£_v3
<
	gT
>::
öã∫Æ_föish_˛ór
() {

589 
c⁄cuºít_queue_ªp
<
T
>& 
r
 = *
my_ªp
;

590 
size_t
 
	gnq
 = 
r
.
n_queue
;

591  
size_t
 
	gi
=0; i<
	gnq
; ++i ) {

592 
∑ge
* 
	gç
 = 
r
.
¨øy
[
i
].
èû_∑ge
;

593 if–
is_vÆid_∑ge
(
ç
) ) {

594 
__TBB_ASSERT
–
r
.
¨øy
[
i
].
hód_∑ge
==
ç
, "at most oneÖage shouldÑemain" );

595 
dóŒoˇã_∑ge
–
ç
 );

596 
	gr
.
	g¨øy
[
i
].
	gèû_∑ge
 = 
NULL
;

598 
__TBB_ASSERT
–!
is_vÆid_∑ge
(
r
.
¨øy
[
i
].
hód_∑ge
), "headÖageÖointer corrupt?" );

602 
	gãm∂©e
<
ty≥«me
 
	gT
>

603 
	gc⁄cuºít_queue_ba£_v3
<
	gT
>::
assign
–c⁄° 
c⁄cuºít_queue_ba£_v3
& 
§c
,

604 
ôem_c⁄°ru˘‹_t
 
c⁄°ru˘_ôem
 )

606 
	gc⁄cuºít_queue_ªp
<
	gT
>& 
	gr
 = *
my_ªp
;

607 
	gr
.
	gôems_≥r_∑ge
 = 
§c
.
my_ªp
->
ôems_≥r_∑ge
;

610 
	gr
.
	ghód_cou¡î
 = 
§c
.
my_ªp
->
hód_cou¡î
;

611 
	gr
.
	gèû_cou¡î
 = 
§c
.
my_ªp
->
èû_cou¡î
;

612 
	gr
.
	gn_övÆid_íåõs
 = 
§c
.
my_ªp
->
n_övÆid_íåõs
;

615  
size_t
 
	gi
 = 0; i < 
	gr
.
	gn_queue
; ++i )

616 
	gr
.
	g¨øy
[
i
].
assign
–
§c
.
my_ªp
->
¨øy
[i], *
this
, 
c⁄°ru˘_ôem
);

618 
__TBB_ASSERT
–
r
.
hód_cou¡î
==
§c
.
my_ªp
->hód_cou¡î &&Ñ.
èû_cou¡î
==src.my_rep->tail_counter,

622 
	gãm∂©e
<
ty≥«me
 
	gC⁄èöî
,Åy≥«mê
	gVÆue
> 
˛ass
 
	gc⁄cuºít_queue_ôî©‹
;

624 
	gãm∂©e
<
ty≥«me
 
	gT
>

625 ˛as†
	cc⁄cuºít_queue_ôî©‹_ªp
: 
no_assign
 {

626 
ty≥«me
 
	tmi¸o_queue
<
	tT
>::
	t∑dded_∑ge
Öadded_page;

627 
	gpublic
:

628 
tickë
 
hód_cou¡î
;

629 c⁄° 
	gc⁄cuºít_queue_ba£_v3
<
	gT
>& 
	gmy_queue
;

630 
ty≥«me
 
	gc⁄cuºít_queue_ba£_v3
<
	gT
>::
∑ge
* 
¨øy
[
c⁄cuºít_queue_ªp
<
T
>::
n_queue
];

631 
c⁄cuºít_queue_ôî©‹_ªp
–c⁄° 
c⁄cuºít_queue_ba£_v3
<
T
>& 
queue
 ) :

632 
hód_cou¡î
(
queue
.
my_ªp
->head_counter),

633 
my_queue
(
queue
)

635  
size_t
 
	gk
=0; k<
	gc⁄cuºít_queue_ªp
<
	gT
>::
n_queue
; ++k )

636 
	g¨øy
[
k
] = 
queue
.
my_ªp
->
¨øy
[k].
hód_∑ge
;

640 
boﬁ
 
gë_ôem
–
T
*& 
ôem
, 
size_t
 
k
 ) ;

643 
	gãm∂©e
<
ty≥«me
 
	gT
>

644 
boﬁ
 
	gc⁄cuºít_queue_ôî©‹_ªp
<
	gT
>::
gë_ôem
–
T
*& 
ôem
, 
size_t
 
k
 ) {

645 if–
	gk
==
my_queue
.
my_ªp
->
èû_cou¡î
 ) {

646 
ôem
 = 
NULL
;

647  
	gåue
;

649 
ty≥«me
 
	gc⁄cuºít_queue_ba£_v3
<
	gT
>::
∑ge
* 
p
 = 
¨øy
[
c⁄cuºít_queue_ªp
<
T
>::
ödex
(
k
)];

650 
__TBB_ASSERT
(
p
,
NULL
);

651 
size_t
 
	gi
 = 
modulo_powî_of_two
–
k
/
c⁄cuºít_queue_ªp
<
T
>::
n_queue
, 
my_queue
.
my_ªp
->
ôems_≥r_∑ge
 );

652 
	gôem
 = &
mi¸o_queue
<
T
>::
gë_ªf
(*
p
,
i
);

653  (
	gp
->
	gmask
 & 
uöçå_t
(1)<<
	gi
)!=0;

659 
	gãm∂©e
<
ty≥«me
 
	gVÆue
>

660 ˛as†
	cc⁄cuºít_queue_ôî©‹_ba£_v3
 : 
no_assign
 {

663 
c⁄cuºít_queue_ôî©‹_ªp
<
VÆue
>* 
my_ªp
;

665 
	gãm∂©e
<
ty≥«me
 
	gC
,Åy≥«mê
	gT
,Åy≥«mê
	gU
>

666 
‰õnd
 
boﬁ
 
	g›î©‹
==–c⁄° 
c⁄cuºít_queue_ôî©‹
<
C
,
	gT
>& 
	gi
, c⁄° 
	gc⁄cuºít_queue_ôî©‹
<
	gC
,
	gU
>& 
	gj
 );

668 
	gãm∂©e
<
ty≥«me
 
	gC
,Åy≥«mê
	gT
,Åy≥«mê
	gU
>

669 
‰õnd
 
boﬁ
 
	g›î©‹
!=–c⁄° 
c⁄cuºít_queue_ôî©‹
<
C
,
	gT
>& 
	gi
, c⁄° 
	gc⁄cuºít_queue_ôî©‹
<
	gC
,
	gU
>& 
	gj
 );

670 
	g¥Ÿe˘ed
:

672 
VÆue
* 
my_ôem
;

675 
c⁄cuºít_queue_ôî©‹_ba£_v3
(Ë: 
my_ªp
(
NULL
), 
my_ôem
(NULL) {

676 #i‡
__TBB_GCC_OPTIMIZER_ORDERING_BROKEN


677 
__TBB_compûî_„n˚
();

682 
c⁄cuºít_queue_ôî©‹_ba£_v3
–c⁄° c⁄cuºít_queue_ôî©‹_ba£_v3& 
i
 )

683 : 
no_assign
(), 
my_ªp
(
NULL
), 
my_ôem
(NULL) {

684 
assign
(
i
);

688 
c⁄cuºít_queue_ôî©‹_ba£_v3
–c⁄° 
c⁄cuºít_queue_ba£_v3
<
VÆue
>& 
queue
 ) ;

691 
assign
–c⁄° 
c⁄cuºít_queue_ôî©‹_ba£_v3
<
VÆue
>& 
Ÿhî
 ) ;

694 
adv™˚
() ;

697 ~
c⁄cuºít_queue_ôî©‹_ba£_v3
() {

698 
	gˇche_Æig√d_Æloˇt‹
<
	gc⁄cuºít_queue_ôî©‹_ªp
<
	gVÆue
> >().
dóŒoˇã
(
my_ªp
, 1);

699 
	gmy_ªp
 = 
NULL
;

703 
	gãm∂©e
<
ty≥«me
 
	gVÆue
>

704 
	gc⁄cuºít_queue_ôî©‹_ba£_v3
<
	gVÆue
>::
c⁄cuºít_queue_ôî©‹_ba£_v3
–c⁄° 
c⁄cuºít_queue_ba£_v3
<
VÆue
>& 
queue
 ) {

705 
my_ªp
 = 
ˇche_Æig√d_Æloˇt‹
<
c⁄cuºít_queue_ôî©‹_ªp
<
VÆue
> >().
Æloˇã
(1);

706 
√w
–
my_ªp
 ) 
	gc⁄cuºít_queue_ôî©‹_ªp
<
	gVÆue
>(
	gqueue
);

707 
size_t
 
	gk
 = 
my_ªp
->
hód_cou¡î
;

708 if–!
	gmy_ªp
->
gë_ôem
(
my_ôem
, 
k
ËË
adv™˚
();

711 
	gãm∂©e
<
ty≥«me
 
	gVÆue
>

712 
	gc⁄cuºít_queue_ôî©‹_ba£_v3
<
	gVÆue
>::
assign
–c⁄° 
c⁄cuºít_queue_ôî©‹_ba£_v3
<
VÆue
>& 
Ÿhî
 ) {

713 if–
my_ªp
!=
Ÿhî
.my_rep ) {

714 if–
my_ªp
 ) {

715 
ˇche_Æig√d_Æloˇt‹
<
c⁄cuºít_queue_ôî©‹_ªp
<
VÆue
> >().
dóŒoˇã
(
my_ªp
, 1);

716 
	gmy_ªp
 = 
NULL
;

718 if–
	gŸhî
.
	gmy_ªp
 ) {

719 
	gmy_ªp
 = 
ˇche_Æig√d_Æloˇt‹
<
c⁄cuºít_queue_ôî©‹_ªp
<
VÆue
> >().
Æloˇã
(1);

720 
√w
–
my_ªp
 ) 
	gc⁄cuºít_queue_ôî©‹_ªp
<
	gVÆue
>–*
	gŸhî
.
	gmy_ªp
 );

723 
	gmy_ôem
 = 
Ÿhî
.
my_ôem
;

726 
	gãm∂©e
<
ty≥«me
 
	gVÆue
>

727 
	gc⁄cuºít_queue_ôî©‹_ba£_v3
<
	gVÆue
>::
adv™˚
() {

728 
__TBB_ASSERT
–
my_ôem
, "attemptÅo increment iteratorÖastÉnd of queue" );

729 
size_t
 
	gk
 = 
my_ªp
->
hód_cou¡î
;

730 c⁄° 
	gc⁄cuºít_queue_ba£_v3
<
	gVÆue
>& 
	gqueue
 = 
my_ªp
->
my_queue
;

731 #i‡
TBB_USE_ASSERT


732 
VÆue
* 
	gtmp
;

733 
	gmy_ªp
->
gë_ôem
(
tmp
,
k
);

734 
__TBB_ASSERT
–
my_ôem
==
tmp
, 
NULL
 );

736 
size_t
 
	gi
 = 
modulo_powî_of_two
–
k
/
c⁄cuºít_queue_ªp
<
VÆue
>::
n_queue
, 
queue
.
my_ªp
->
ôems_≥r_∑ge
 );

737 if–
	gi
==
queue
.
my_ªp
->
ôems_≥r_∑ge
-1 ) {

738 
ty≥«me
 
c⁄cuºít_queue_ba£_v3
<
VÆue
>::
∑ge
*& 
roŸ
 = 
my_ªp
->
¨øy
[
c⁄cuºít_queue_ªp
<VÆue>::
ödex
(
k
)];

739 
	groŸ
 = 
roŸ
->
√xt
;

742 
	gmy_ªp
->
	ghód_cou¡î
 = ++
k
;

743 if–!
	gmy_ªp
->
gë_ôem
(
my_ôem
, 
k
ËË
adv™˚
();

748 
	gãm∂©e
<
ty≥«me
 
	gT
> 
	stbb_ªmove_cv
 {
T
 
	tty≥
;};

749 
	gãm∂©e
<
ty≥«me
 
	gT
> 
	gtbb_ªmove_cv
<c⁄° T> {
T
 
	tty≥
;};

750 
	gãm∂©e
<
ty≥«me
 
	gT
> 
	gtbb_ªmove_cv
<vﬁ©ûêT> {
T
 
	tty≥
;};

751 
	gãm∂©e
<
ty≥«me
 
	gT
> 
	gtbb_ªmove_cv
<c⁄° vﬁ©ûêT> {
T
 
	tty≥
;};

756 
	gãm∂©e
<
ty≥«me
 
	gC⁄èöî
,Åy≥«mê
	gVÆue
>

757 
˛ass
 
	gc⁄cuºít_queue_ôî©‹
: 
public
 
c⁄cuºít_queue_ôî©‹_ba£_v3
<
ty≥«me
 
tbb_ªmove_cv
<
VÆue
>::
ty≥
>,

758 
public
 
	g°d
::
ôî©‹
<
°d
::
f‹w¨d_ôî©‹_èg
,
	gVÆue
> {

759 #i‡!
__TBB_TEMPLATE_FRIENDS_BROKEN


760 
	gãm∂©e
<
ty≥«me
 
	gT
, 
˛ass
 
	gA
>

761 
‰õnd
 
	g˛ass
 ::
tbb
::
°ri˘_µl
::
c⁄cuºít_queue
;

763 
	gpublic
:

766 
c⁄cuºít_queue_ôî©‹
–c⁄° 
c⁄cuºít_queue_ba£_v3
<
VÆue
>& 
queue
 ) :

767 
c⁄cuºít_queue_ôî©‹_ba£_v3
<
ty≥«me
 
tbb_ªmove_cv
<
VÆue
>::
ty≥
>(
queue
)

771 
public
:

772 
c⁄cuºít_queue_ôî©‹
() {}

774 
c⁄cuºít_queue_ôî©‹
–c⁄° c⁄cuºít_queue_ôî©‹<
C⁄èöî
,
ty≥«me
 C⁄èöî::
vÆue_ty≥
>& 
Ÿhî
 ) :

775 
c⁄cuºít_queue_ôî©‹_ba£_v3
<
ty≥«me
 
tbb_ªmove_cv
<
VÆue
>::
ty≥
>(
Ÿhî
)

779 
c⁄cuºít_queue_ôî©‹
& 
›î©‹
=–c⁄° c⁄cuºít_queue_ôî©‹& 
Ÿhî
 ) {

780 
this
->
assign
(
Ÿhî
);

781  *
	gthis
;

785 
	gVÆue
& 
	g›î©‹
*() const {

786  *
	g°©ic_ˇ°
<
	gVÆue
*>(
	gthis
->
	gmy_ôem
);

789 
VÆue
* 
	g›î©‹
->() const { &operator*();}

792 
	gc⁄cuºít_queue_ôî©‹
& 
	g›î©‹
++() {

793 
	gthis
->
adv™˚
();

794  *
	gthis
;

798 
VÆue
* 
	g›î©‹
++() {

799 
VÆue
* 
	gªsu…
 = &
›î©‹
*();

800 
	g›î©‹
++();

801  
	gªsu…
;

806 
	gãm∂©e
<
ty≥«me
 
	gC
,Åy≥«mê
	gT
,Åy≥«mê
	gU
>

807 
boﬁ
 
	g›î©‹
==–c⁄° 
c⁄cuºít_queue_ôî©‹
<
C
,
	gT
>& 
	gi
, c⁄° 
	gc⁄cuºít_queue_ôî©‹
<
	gC
,
	gU
>& 
	gj
 ) {

808  
	gi
.
	gmy_ôem
==
j
.
my_ôem
;

811 
	gãm∂©e
<
ty≥«me
 
	gC
,Åy≥«mê
	gT
,Åy≥«mê
	gU
>

812 
boﬁ
 
	g›î©‹
!=–c⁄° 
c⁄cuºít_queue_ôî©‹
<
C
,
	gT
>& 
	gi
, c⁄° 
	gc⁄cuºít_queue_ôî©‹
<
	gC
,
	gU
>& 
	gj
 ) {

813  
	gi
.
	gmy_ôem
!=
j
.
my_ôem
;

823 
«me•a˚
 
	göã∫Æ
 {

825 
˛ass
 
	gc⁄cuºít_queue_ªp
;

826 
˛ass
 
	gc⁄cuºít_queue_ôî©‹_ªp
;

827 
˛ass
 
	gc⁄cuºít_queue_ôî©‹_ba£_v3
;

828 
	gãm∂©e
<
ty≥«me
 
	gC⁄èöî
,Åy≥«mê
	gVÆue
> 
˛ass
 
	gc⁄cuºít_queue_ôî©‹
;

833 ˛as†
	cc⁄cuºít_queue_ba£_v3
: 
no_c›y
 {

835 
c⁄cuºít_queue_ªp
* 
my_ªp
;

837 
‰õnd
 
˛ass
 
	gc⁄cuºít_queue_ªp
;

838 
‰õnd
 
	gmi¸o_queue
;

839 
‰õnd
 
˛ass
 
	gmi¸o_queue_p›_föÆizî
;

840 
‰õnd
 
˛ass
 
	gc⁄cuºít_queue_ôî©‹_ªp
;

841 
‰õnd
 
˛ass
 
	gc⁄cuºít_queue_ôî©‹_ba£_v3
;

842 
	g¥Ÿe˘ed
:

844 
	s∑ge
 {

845 
∑ge
* 
√xt
;

846 
uöçå_t
 
	gmask
;

850 
±rdiff_t
 
	gmy_ˇ∑côy
;

853 
size_t
 
	gôems_≥r_∑ge
;

856 
size_t
 
	gôem_size
;

858 
	ec›y_•ecifics
 { 
	gc›y
, 
	gmove
 };

860 #i‡
__TBB_PROTECTED_NESTED_CLASS_BROKEN


861 
	gpublic
:

863 
ãm∂©e
<
ty≥«me
 
T
>

864 
∑dded_∑ge
: 
∑ge
 {

866 
∑dded_∑ge
();

868 
	g›î©‹
=–c⁄° 
∑dded_∑ge
& );

870 
T
 
	gœ°
;

873 
	g¥iv©e
:

874 
vútuÆ
 
c›y_ôem
–
∑ge
& 
d°
, 
size_t
 
ödex
, c⁄° * 
§c
 ) = 0;

875 
vútuÆ
 
assign_™d_de°roy_ôem
–* 
d°
, 
∑ge
& 
§c
, 
size_t
 
ödex
 ) = 0;

876 
	g¥Ÿe˘ed
:

877 
__TBB_EXPORTED_METHOD
 
c⁄cuºít_queue_ba£_v3
–
size_t
 
ôem_size
 );

878 
vútuÆ
 
	g__TBB_EXPORTED_METHOD
 ~
c⁄cuºít_queue_ba£_v3
();

881 
__TBB_EXPORTED_METHOD
 
öã∫Æ_push
–c⁄° * 
§c
 );

884 
__TBB_EXPORTED_METHOD
 
öã∫Æ_p›
–* 
d°
 );

887 
__TBB_EXPORTED_METHOD
 
öã∫Æ_ab‹t
();

890 
boﬁ
 
__TBB_EXPORTED_METHOD
 
öã∫Æ_push_if_nŸ_fuŒ
–c⁄° * 
§c
 );

894 
boﬁ
 
__TBB_EXPORTED_METHOD
 
öã∫Æ_p›_if_¥e£¡
–* 
d°
 );

897 
±rdiff_t
 
__TBB_EXPORTED_METHOD
 
öã∫Æ_size
() const;

900 
boﬁ
 
__TBB_EXPORTED_METHOD
 
öã∫Æ_em±y
() const;

903 
__TBB_EXPORTED_METHOD
 
öã∫Æ_£t_ˇ∑côy
–
±rdiff_t
 
ˇ∑côy
, 
size_t
 
ñemít_size
 );

906 
vútuÆ
 
∑ge
 *
Æloˇã_∑ge
() = 0;

909 
vútuÆ
 
dóŒoˇã_∑ge
–
∑ge
 *
p
 ) = 0;

913 
__TBB_EXPORTED_METHOD
 
öã∫Æ_föish_˛ór
() ;

916 
__TBB_EXPORTED_METHOD
 
öã∫Æ_throw_ex˚±i⁄
() const;

919 
__TBB_EXPORTED_METHOD
 
assign
–c⁄° 
c⁄cuºít_queue_ba£_v3
& 
§c
 ) ;

921 #i‡
__TBB_CPP11_RVALUE_REF_PRESENT


923 
öã∫Æ_sw≠
–
c⁄cuºít_queue_ba£_v3
& 
§c
 ) {

924 
	g°d
::
sw≠
–
my_ˇ∑côy
, 
§c
.my_capacity );

925 
	g°d
::
sw≠
–
ôems_≥r_∑ge
, 
§c
.items_per_page );

926 
	g°d
::
sw≠
–
ôem_size
, 
§c
.item_size );

927 
	g°d
::
sw≠
–
my_ªp
, 
§c
.my_rep );

932 
öã∫Æ_ö£π_ôem
–c⁄° * 
§c
, 
c›y_•ecifics
 
›_ty≥
 );

935 
boﬁ
 
öã∫Æ_ö£π_if_nŸ_fuŒ
–c⁄° * 
§c
, 
c›y_•ecifics
 
›_ty≥
 );

938 
öã∫Æ_assign
–c⁄° 
c⁄cuºít_queue_ba£_v3
& 
§c
, 
c›y_•ecifics
 
›_ty≥
 );

939 
	g¥iv©e
:

940 
vútuÆ
 
c›y_∑ge_ôem
–
∑ge
& 
d°
, 
size_t
 
dödex
, c⁄°Öage& 
§c
, size_à
södex
 ) = 0;

946 ˛as†
	cc⁄cuºít_queue_ba£_v8
: 
public
 
c⁄cuºít_queue_ba£_v3
 {

947 
¥Ÿe˘ed
:

948 
c⁄cuºít_queue_ba£_v8
–
size_t
 
ôem_sz
 ) : 
c⁄cuºít_queue_ba£_v3
( item_sz ) {}

951 
__TBB_EXPORTED_METHOD
 
move_c⁄ã¡
–
c⁄cuºít_queue_ba£_v8
& 
§c
 ) ;

954 
boﬁ
 
__TBB_EXPORTED_METHOD
 
öã∫Æ_push_move_if_nŸ_fuŒ
–c⁄° * 
§c
 );

957 
__TBB_EXPORTED_METHOD
 
öã∫Æ_push_move
–c⁄° * 
§c
 );

958 
	g¥iv©e
:

959 
‰õnd
 
mi¸o_queue
;

960 
vútuÆ
 
move_∑ge_ôem
–
∑ge
& 
d°
, 
size_t
 
dödex
, c⁄°Öage& 
§c
, size_à
södex
 ) = 0;

961 
vútuÆ
 
move_ôem
–
∑ge
& 
d°
, 
size_t
 
ödex
, c⁄° * 
§c
 ) = 0;

966 ˛as†
	cc⁄cuºít_queue_ôî©‹_ba£_v3
 {

969 
c⁄cuºít_queue_ôî©‹_ªp
* 
	gmy_ªp
;

971 
	gãm∂©e
<
ty≥«me
 
	gC
,Åy≥«mê
	gT
,Åy≥«mê
	gU
>

972 
‰õnd
 
boﬁ
 
	g›î©‹
==–c⁄° 
c⁄cuºít_queue_ôî©‹
<
C
,
	gT
>& 
	gi
, c⁄° 
	gc⁄cuºít_queue_ôî©‹
<
	gC
,
	gU
>& 
	gj
 );

974 
	gãm∂©e
<
ty≥«me
 
	gC
,Åy≥«mê
	gT
,Åy≥«mê
	gU
>

975 
‰õnd
 
boﬁ
 
	g›î©‹
!=–c⁄° 
c⁄cuºít_queue_ôî©‹
<
C
,
	gT
>& 
	gi
, c⁄° 
	gc⁄cuºít_queue_ôî©‹
<
	gC
,
	gU
>& 
	gj
 );

977 
öôülize
–c⁄° 
c⁄cuºít_queue_ba£_v3
& 
queue
, 
size_t
 
off£t_of_d©a
 );

978 
	g¥Ÿe˘ed
:

980 * 
my_ôem
;

983 
c⁄cuºít_queue_ôî©‹_ba£_v3
(Ë: 
my_ªp
(
NULL
), 
my_ôem
(NULL) {}

986 
c⁄cuºít_queue_ôî©‹_ba£_v3
–c⁄° c⁄cuºít_queue_ôî©‹_ba£_v3& 
i
 ) : 
my_ªp
(
NULL
), 
my_ôem
(NULL) {

987 
assign
(
i
);

992 
__TBB_EXPORTED_METHOD
 
c⁄cuºít_queue_ôî©‹_ba£_v3
–c⁄° 
c⁄cuºít_queue_ba£_v3
& 
queue
 );

995 
__TBB_EXPORTED_METHOD
 
c⁄cuºít_queue_ôî©‹_ba£_v3
–c⁄° 
c⁄cuºít_queue_ba£_v3
& 
queue
, 
size_t
 
off£t_of_d©a
 );

998 
__TBB_EXPORTED_METHOD
 
assign
–c⁄° 
c⁄cuºít_queue_ôî©‹_ba£_v3
& 
i
 );

1001 
__TBB_EXPORTED_METHOD
 
adv™˚
();

1004 
	g__TBB_EXPORTED_METHOD
 ~
c⁄cuºít_queue_ôî©‹_ba£_v3
();

1007 
c⁄cuºít_queue_ôî©‹_ba£_v3
 
	tc⁄cuºít_queue_ôî©‹_ba£
;

1012 
	gãm∂©e
<
ty≥«me
 
	gC⁄èöî
,Åy≥«mê
	gVÆue
>

1013 
˛ass
 
	gc⁄cuºít_queue_ôî©‹
: 
public
 
c⁄cuºít_queue_ôî©‹_ba£
,

1014 
public
 
	g°d
::
ôî©‹
<
°d
::
f‹w¨d_ôî©‹_èg
,
	gVÆue
> {

1016 #i‡!
deföed
(
_MSC_VER
Ë|| deföed(
__INTEL_COMPILER
)

1017 
	gãm∂©e
<
ty≥«me
 
	gT
, 
˛ass
 
	gA
>

1018 
‰õnd
 
	g˛ass
 ::
tbb
::
c⁄cuºít_bounded_queue
;

1020 
	gpublic
:

1024 
c⁄cuºít_queue_ôî©‹
–c⁄° 
c⁄cuºít_queue_ba£_v3
& 
queue
 ) :

1025 
c⁄cuºít_queue_ôî©‹_ba£_v3
(
queue
,
__TBB_off£tof
(
c⁄cuºít_queue_ba£_v3
::
∑dded_∑ge
<
VÆue
>,
œ°
))

1029 
	gpublic
:

1030 
c⁄cuºít_queue_ôî©‹
() {}

1034 
c⁄cuºít_queue_ôî©‹
–c⁄° c⁄cuºít_queue_ôî©‹<
C⁄èöî
,
ty≥«me
 C⁄èöî::
vÆue_ty≥
>& 
Ÿhî
 ) :

1035 
c⁄cuºít_queue_ôî©‹_ba£_v3
(
Ÿhî
)

1039 
c⁄cuºít_queue_ôî©‹
& 
›î©‹
=–c⁄° c⁄cuºít_queue_ôî©‹& 
Ÿhî
 ) {

1040 
assign
(
Ÿhî
);

1041  *
	gthis
;

1045 
	gVÆue
& 
	g›î©‹
*() const {

1046  *
	g°©ic_ˇ°
<
	gVÆue
*>(
	gmy_ôem
);

1049 
VÆue
* 
	g›î©‹
->() const { &operator*();}

1052 
	gc⁄cuºít_queue_ôî©‹
& 
	g›î©‹
++() {

1053 
adv™˚
();

1054  *
	gthis
;

1058 
VÆue
* 
	g›î©‹
++() {

1059 
VÆue
* 
	gªsu…
 = &
›î©‹
*();

1060 
	g›î©‹
++();

1061  
	gªsu…
;

1066 
	gãm∂©e
<
ty≥«me
 
	gC
,Åy≥«mê
	gT
,Åy≥«mê
	gU
>

1067 
boﬁ
 
	g›î©‹
==–c⁄° 
c⁄cuºít_queue_ôî©‹
<
C
,
	gT
>& 
	gi
, c⁄° 
	gc⁄cuºít_queue_ôî©‹
<
	gC
,
	gU
>& 
	gj
 ) {

1068  
	gi
.
	gmy_ôem
==
j
.
my_ôem
;

1071 
	gãm∂©e
<
ty≥«me
 
	gC
,Åy≥«mê
	gT
,Åy≥«mê
	gU
>

1072 
boﬁ
 
	g›î©‹
!=–c⁄° 
c⁄cuºít_queue_ôî©‹
<
C
,
	gT
>& 
	gi
, c⁄° 
	gc⁄cuºít_queue_ôî©‹
<
	gC
,
	gU
>& 
	gj
 ) {

1073  
	gi
.
	gmy_ôem
!=
j
.
my_ôem
;

	@viper/concurrentqueue-src/benchmarks/tbb/internal/_concurrent_unordered_impl.h

24 #i‚de‡
__TBB__c⁄cuºít_un‹dîed_im∂_H


25 
	#__TBB__c⁄cuºít_un‹dîed_im∂_H


	)

26 #i‡!
deföed
(
__TBB_c⁄cuºít_un‹dîed_m≠_H
Ë&& !deföed(
__TBB_c⁄cuºít_un‹dîed_£t_H
Ë&& !deföed(
__TBB_c⁄cuºít_hash_m≠_H
)

27 #îr‹ 
Do
 
nŸ
 #ö˛udê
this
 
öã∫Æ
 
fûe
 
dúe˘ly
; 
u£
 
public
 
TBB
 
hódîs
 
ö°ód
.

30 
	~"../tbb_°ddef.h
"

32 #i‡!
TBB_USE_EXCEPTIONS
 && 
_MSC_VER


34 #¥agm®
w¨nög
 (
push
)

35 #¥agm®
w¨nög
 (
dißbÀ
: 4530)

38 
	~<ôî©‹
>

39 
	~<utûôy
>

40 
	~<fun˘i⁄Æ
>

41 
	~<°rög
>

42 
	~<c°rög
>

44 #i‡!
TBB_USE_EXCEPTIONS
 && 
_MSC_VER


45 #¥agm®
w¨nög
 (
p›
)

48 
	~"../©omic.h
"

49 
	~"../tbb_ex˚±i⁄.h
"

50 
	~"../tbb_Æloˇt‹.h
"

52 #i‡
__TBB_INITIALIZER_LISTS_PRESENT


53 
	~<öôülizî_li°
>

56 
«me•a˚
 
	gtbb
 {

57 
«me•a˚
 
	göãrÁ˚5
 {

59 
«me•a˚
 
	göã∫Æ
 {

61 
	gãm∂©e
 <
ty≥«me
 
	gT
,Åy≥«mê
	gAŒoˇt‹
>

62 
˛ass
 
	g•lô_‹dîed_li°
;

63 
	gãm∂©e
 <
ty≥«me
 
	gTøôs
>

64 
˛ass
 
	gc⁄cuºít_un‹dîed_ba£
;

67 
	gãm∂©e
<
˛ass
 
	gSﬁi°
, 
ty≥«me
 
	gVÆue
>

68 
˛ass
 
	gÊi°_ôî©‹
 : 
public
 
°d
::
ôî©‹
<°d::
f‹w¨d_ôî©‹_èg
, 
	gVÆue
>

70 
	gãm∂©e
 <
ty≥«me
 
	gT
,Åy≥«mê
	gAŒoˇt‹
>

71 
‰õnd
 
˛ass
 
	g•lô_‹dîed_li°
;

72 
	gãm∂©e
 <
ty≥«me
 
	gTøôs
>

73 
‰õnd
 
˛ass
 
	gc⁄cuºít_un‹dîed_ba£
;

74 
	gãm∂©e
<
˛ass
 
	gM
, 
ty≥«me
 
	gV
>

75 
‰õnd
 
˛ass
 
	gÊi°_ôî©‹
;

77 
ty≥«me
 
	tSﬁi°
::
	tnodïå_t
Çodeptr_t;

78 
	gpublic
:

79 
ty≥«me
 
	tSﬁi°
::
	tvÆue_ty≥
 value_type;

80 
ty≥«me
 
	tSﬁi°
::
	tdif„ªn˚_ty≥
 difference_type;

81 
ty≥«me
 
	tSﬁi°
::
	tpoöãr
Öointer;

82 
ty≥«me
 
	tSﬁi°
::
	tª„ªn˚
Ñeference;

84 
Êi°_ôî©‹
(Ë: 
my_node_±r
(0) {}

85 
Êi°_ôî©‹
–c⁄° fli°_ôî©‹<
Sﬁi°
, 
ty≥«me
 Sﬁi°::
vÆue_ty≥
> &
Ÿhî
 )

86 : 
my_node_±r
(
Ÿhî
.my_node_ptr) {}

88 
ª„ªn˚
 
›î©‹
*(Ëc⁄° {  
my_node_±r
->
my_ñemít
; }

89 
poöãr
 
	g›î©‹
->(Ëc⁄° {  &**
	gthis
; }

91 
	gÊi°_ôî©‹
& 
	g›î©‹
++() {

92 
	gmy_node_±r
 = 
my_node_±r
->
my_√xt
;

93  *
	gthis
;

96 
Êi°_ôî©‹
 
	g›î©‹
++() {

97 
Êi°_ôî©‹
 
	gtmp
 = *
this
;

98 ++*
	gthis
;

99  
	gtmp
;

102 
	g¥Ÿe˘ed
:

103 
Êi°_ôî©‹
(
nodïå_t
 
≤ode
Ë: 
my_node_±r
(pnode) {}

104 
nodïå_t
 
gë_node_±r
(Ëc⁄° {  
my_node_±r
; }

106 
nodïå_t
 
	gmy_node_±r
;

108 
	gãm∂©e
<
ty≥«me
 
	gM
,Åy≥«mê
	gT
,Åy≥«mê
	gU
>

109 
‰õnd
 
boﬁ
 
	g›î©‹
==–c⁄° 
Êi°_ôî©‹
<
M
,
	gT
> &
	gi
, c⁄° 
	gÊi°_ôî©‹
<
	gM
,
	gU
> &
	gj
 );

110 
	gãm∂©e
<
ty≥«me
 
	gM
,Åy≥«mê
	gT
,Åy≥«mê
	gU
>

111 
‰õnd
 
boﬁ
 
	g›î©‹
!=–c⁄° 
Êi°_ôî©‹
<
M
,
	gT
>& 
	gi
, c⁄° 
	gÊi°_ôî©‹
<
	gM
,
	gU
>& 
	gj
 );

114 
	gãm∂©e
<
ty≥«me
 
	gSﬁi°
,Åy≥«mê
	gT
,Åy≥«mê
	gU
>

115 
boﬁ
 
	g›î©‹
==–c⁄° 
Êi°_ôî©‹
<
Sﬁi°
,
	gT
> &
	gi
, c⁄° 
	gÊi°_ôî©‹
<
	gSﬁi°
,
	gU
> &
	gj
 ) {

116  
	gi
.
	gmy_node_±r
 =
j
.
my_node_±r
;

118 
	gãm∂©e
<
ty≥«me
 
	gSﬁi°
,Åy≥«mê
	gT
,Åy≥«mê
	gU
>

119 
boﬁ
 
	g›î©‹
!=–c⁄° 
Êi°_ôî©‹
<
Sﬁi°
,
	gT
>& 
	gi
, c⁄° 
	gÊi°_ôî©‹
<
	gSﬁi°
,
	gU
>& 
	gj
 ) {

120  
	gi
.
	gmy_node_±r
 !
j
.
my_node_±r
;

124 
	gãm∂©e
<
˛ass
 
	gSﬁi°
, 
ty≥«me
 
	gVÆue
>

125 
˛ass
 
	gsﬁi°_ôî©‹
 : 
public
 
Êi°_ôî©‹
<
Sﬁi°
, 
	gVÆue
>

127 
	gÊi°_ôî©‹
<
	tSﬁi°
, 
	tVÆue
> 
	tba£_ty≥
;

128 
ty≥«me
 
	tSﬁi°
::
	tnodïå_t
Çodeptr_t;

129 
usög
 
	gba£_ty≥
::
gë_node_±r
;

130 
	gãm∂©e
 <
ty≥«me
 
	gT
,Åy≥«mê
	gAŒoˇt‹
>

131 
‰õnd
 
˛ass
 
	g•lô_‹dîed_li°
;

132 
	gãm∂©e
<
˛ass
 
	gM
, 
ty≥«me
 
	gV
>

133 
‰õnd
 
˛ass
 
	gsﬁi°_ôî©‹
;

134 
	gãm∂©e
<
ty≥«me
 
	gM
,Åy≥«mê
	gT
,Åy≥«mê
	gU
>

135 
‰õnd
 
boﬁ
 
	g›î©‹
==–c⁄° 
sﬁi°_ôî©‹
<
M
,
	gT
> &
	gi
, c⁄° 
	gsﬁi°_ôî©‹
<
	gM
,
	gU
> &
	gj
 );

136 
	gãm∂©e
<
ty≥«me
 
	gM
,Åy≥«mê
	gT
,Åy≥«mê
	gU
>

137 
‰õnd
 
boﬁ
 
	g›î©‹
!=–c⁄° 
sﬁi°_ôî©‹
<
M
,
	gT
>& 
	gi
, c⁄° 
	gsﬁi°_ôî©‹
<
	gM
,
	gU
>& 
	gj
 );

139 c⁄° 
Sﬁi°
 *
	gmy_li°_±r
;

140 
sﬁi°_ôî©‹
(
nodïå_t
 
≤ode
, c⁄° 
Sﬁi°
 *
∂i°
Ë: 
ba£_ty≥
’node), 
my_li°_±r
(plist) {}

142 
	gpublic
:

143 
ty≥«me
 
	tSﬁi°
::
	tvÆue_ty≥
 value_type;

144 
ty≥«me
 
	tSﬁi°
::
	tdif„ªn˚_ty≥
 difference_type;

145 
ty≥«me
 
	tSﬁi°
::
	tpoöãr
Öointer;

146 
ty≥«me
 
	tSﬁi°
::
	tª„ªn˚
Ñeference;

148 
sﬁi°_ôî©‹
() {}

149 
sﬁi°_ôî©‹
(c⁄° sﬁi°_ôî©‹<
Sﬁi°
, 
ty≥«me
 Sﬁi°::
vÆue_ty≥
> &
Ÿhî
 )

150 : 
ba£_ty≥
(
Ÿhî
), 
my_li°_±r
(other.my_list_ptr) {}

152 
ª„ªn˚
 
	g›î©‹
*() const {

153  
	gthis
->
	gba£_ty≥
::
›î©‹
*();

156 
poöãr
 
	g›î©‹
->() const {

157  (&**
	gthis
);

160 
	gsﬁi°_ôî©‹
& 
	g›î©‹
++() {

161 dÿ++(*(
	gba£_ty≥
 *)
	gthis
);

162 
gë_node_±r
(Ë!
NULL
 && gë_node_±r()->
is_dummy
());

164  (*
	gthis
);

167 
sﬁi°_ôî©‹
 
	g›î©‹
++() {

168 
sﬁi°_ôî©‹
 
	gtmp
 = *
this
;

169 dÿ++*
	gthis
;

170 
gë_node_±r
(Ë!
NULL
 && gë_node_±r()->
is_dummy
());

172  (
	gtmp
);

176 
	gãm∂©e
<
ty≥«me
 
	gSﬁi°
,Åy≥«mê
	gT
,Åy≥«mê
	gU
>

177 
boﬁ
 
	g›î©‹
==–c⁄° 
sﬁi°_ôî©‹
<
Sﬁi°
,
	gT
> &
	gi
, c⁄° 
	gsﬁi°_ôî©‹
<
	gSﬁi°
,
	gU
> &
	gj
 ) {

178  
	gi
.
	gmy_node_±r
 =
j
.
my_node_±r
 && 
i
.
my_li°_±r
 == j.my_list_ptr;

180 
	gãm∂©e
<
ty≥«me
 
	gSﬁi°
,Åy≥«mê
	gT
,Åy≥«mê
	gU
>

181 
boﬁ
 
	g›î©‹
!=–c⁄° 
sﬁi°_ôî©‹
<
Sﬁi°
,
	gT
>& 
	gi
, c⁄° 
	gsﬁi°_ôî©‹
<
	gSﬁi°
,
	gU
>& 
	gj
 ) {

182  
	gi
.
	gmy_node_±r
 !
j
.
my_node_±r
 || 
i
.
my_li°_±r
 != j.my_list_ptr;

186 
size_t
 
	tsokey_t
;

190 
	gãm∂©e
 <
ty≥«me
 
	gT
,Åy≥«mê
	gAŒoˇt‹
>

191 ˛as†
	c•lô_‹dîed_li°


193 
	gpublic
:

194 
•lô_‹dîed_li°
<
	tT
, 
	tAŒoˇt‹
> 
	t£lf_ty≥
;

195 
ty≥«me
 
	tAŒoˇt‹
::
	tãm∂©e
 
	tªböd
<
	tT
>::
	tŸhî
 
	tÆloˇt‹_ty≥
;

196 
	gnode
;

197 
node
 *
	tnodïå_t
;

199 
ty≥«me
 
	tÆloˇt‹_ty≥
::
	tsize_ty≥
 size_type;

200 
ty≥«me
 
	tÆloˇt‹_ty≥
::
	tdif„ªn˚_ty≥
 difference_type;

201 
ty≥«me
 
	tÆloˇt‹_ty≥
::
	tpoöãr
Öointer;

202 
ty≥«me
 
	tÆloˇt‹_ty≥
::
	tc⁄°_poöãr
 const_pointer;

203 
ty≥«me
 
	tÆloˇt‹_ty≥
::
	tª„ªn˚
Ñeference;

204 
ty≥«me
 
	tÆloˇt‹_ty≥
::
	tc⁄°_ª„ªn˚
 const_reference;

205 
ty≥«me
 
	tÆloˇt‹_ty≥
::
	tvÆue_ty≥
 value_type;

207 
	gsﬁi°_ôî©‹
<
	t£lf_ty≥
, c⁄° 
	tvÆue_ty≥
> 
	tc⁄°_ôî©‹
;

208 
	gsﬁi°_ôî©‹
<
	t£lf_ty≥
, 
	tvÆue_ty≥
> 
	tôî©‹
;

209 
	gÊi°_ôî©‹
<
	t£lf_ty≥
, c⁄° 
	tvÆue_ty≥
> 
	tøw_c⁄°_ôî©‹
;

210 
	gÊi°_ôî©‹
<
	t£lf_ty≥
, 
	tvÆue_ty≥
> 
	tøw_ôî©‹
;

213 
	gnode
 : 
tbb
::
öã∫Æ
::
no_assign


215 
¥iv©e
:

217 
node
();

218 
	gpublic
:

220 
öô
(
sokey_t
 
‹dî_key
) {

221 
my_‹dî_key
 = 
‹dî_key
;

222 
	gmy_√xt
 = 
NULL
;

226 
sokey_t
 
gë_‹dî_key
() const {

227  
	gmy_‹dî_key
;

231 
nodïå_t
 
©omic_£t_√xt
“odïå_à
√w_node
,Çodïå_à
cuºít_node
)

234 
nodïå_t
 
	gexch™ge_node
 = 
tbb
::
öã∫Æ
::
as_©omic
(
my_√xt
).
com∑ª_™d_sw≠
(
√w_node
, 
cuºít_node
);

236 i‡(
	gexch™ge_node
 =
cuºít_node
)

239  
√w_node
;

244  
	gexch™ge_node
;

250 
boﬁ
 
is_dummy
() const {

251  (
	gmy_‹dî_key
 & 0x1) == 0;

255 
nodïå_t
 
	gmy_√xt
;

256 
vÆue_ty≥
 
	gmy_ñemít
;

257 
sokey_t
 
	gmy_‹dî_key
;

261 
nodïå_t
 
¸óã_node
(
sokey_t
 
‹dî_key
, c⁄° 
T
 &
vÆue
) {

262 
nodïå_t
 
	g≤ode
 = 
my_node_Æloˇt‹
.
Æloˇã
(1);

264 
	g__TBB_TRY
 {

265 
√w
(
°©ic_ˇ°
<*>(&
≤ode
->
my_ñemít
)Ë
T
(
vÆue
);

266 
	g≤ode
->
öô
(
‹dî_key
);

267 } 
__TBB_CATCH
(...) {

268 
	gmy_node_Æloˇt‹
.
dóŒoˇã
(
≤ode
, 1);

269 
__TBB_RETHROW
();

272  (
	g≤ode
);

275 #i‡
__TBB_CPP11_RVALUE_REF_PRESENT


279 
nodïå_t
 
¸óã_node
(
sokey_t
 
‹dî_key
, 
T
 &&
vÆue
) {

280 
nodïå_t
 
	g≤ode
 = 
my_node_Æloˇt‹
.
Æloˇã
(1);

282 
	g__TBB_TRY
 {

283 
√w
(
°©ic_ˇ°
<*>(&
≤ode
->
my_ñemít
)Ë
T
(
°d
::
move
(
vÆue
));

284 
	g≤ode
->
öô
(
‹dî_key
);

285 } 
__TBB_CATCH
(...) {

286 
	gmy_node_Æloˇt‹
.
dóŒoˇã
(
≤ode
, 1);

287 
__TBB_RETHROW
();

290  (
	g≤ode
);

295 
nodïå_t
 
¸óã_node
(
sokey_t
 
‹dî_key
) {

296 
nodïå_t
 
	g≤ode
 = 
my_node_Æloˇt‹
.
Æloˇã
(1);

297 
	g≤ode
->
öô
(
‹dî_key
);

298  (
	g≤ode
);

301 
•lô_‹dîed_li°
(
Æloˇt‹_ty≥
 
a
 =állocator_type())

302 : 
my_node_Æloˇt‹
(
a
), 
my_ñemít_cou¡
(0)

306 
	gmy_hód
 = 
¸óã_node
(0);

309 ~
•lô_‹dîed_li°
()

312 
˛ór
();

315 
nodïå_t
 
	g≤ode
 = 
my_hód
;

316 
	gmy_hód
 = 
NULL
;

318 
__TBB_ASSERT
(
≤ode
 !
NULL
 &&Önode->
my_√xt
 == NULL, "Invalid headÜistÇode");

320 
de°roy_node
(
≤ode
);

325 
Æloˇt‹_ty≥
 
gë_Æloˇt‹
() const {

326  (
	gmy_node_Æloˇt‹
);

329 
˛ór
() {

330 
nodïå_t
 
	g≤ext
;

331 
nodïå_t
 
	g≤ode
 = 
my_hód
;

333 
__TBB_ASSERT
(
my_hód
 !
NULL
, "Invalid headÜistÇode");

334 
	g≤ext
 = 
≤ode
->
my_√xt
;

335 
	g≤ode
->
	gmy_√xt
 = 
NULL
;

336 
	g≤ode
 = 
≤ext
;

338 
	g≤ode
 !
NULL
)

340 
≤ext
 = 
≤ode
->
my_√xt
;

341 
de°roy_node
(
≤ode
);

342 
	g≤ode
 = 
≤ext
;

345 
	gmy_ñemít_cou¡
 = 0;

349 
ôî©‹
 
begö
() {

350  
fú°_ªÆ_ôî©‹
(
øw_begö
());

354 
c⁄°_ôî©‹
 
begö
() const {

355  
fú°_ªÆ_ôî©‹
(
øw_begö
());

358 
ôî©‹
 
íd
() {

359  (
ôî©‹
(0, 
this
));

362 
c⁄°_ôî©‹
 
íd
() const {

363  (
c⁄°_ôî©‹
(0, 
this
));

366 
c⁄°_ôî©‹
 
cbegö
() const {

367  (((c⁄° 
	g£lf_ty≥
 *)
	gthis
)->
begö
());

370 
c⁄°_ôî©‹
 
˚nd
() const {

371  (((c⁄° 
	g£lf_ty≥
 *)
	gthis
)->
íd
());

375 
boﬁ
 
em±y
() const {

376  (
	gmy_ñemít_cou¡
 == 0);

380 
size_ty≥
 
size
() const {

381  
	gmy_ñemít_cou¡
;

385 
size_ty≥
 
max_size
() const {

386  
	gmy_node_Æloˇt‹
.
max_size
();

390 
sw≠
(
£lf_ty≥
& 
Ÿhî
)

392 i‡(
	gthis
 =&
Ÿhî
)

398 
	g°d
::
sw≠
(
my_ñemít_cou¡
, 
Ÿhî
.my_element_count);

399 
	g°d
::
sw≠
(
my_hód
, 
Ÿhî
.my_head);

405 
øw_ôî©‹
 
øw_begö
() {

406  
øw_ôî©‹
(
my_hód
);

410 
øw_c⁄°_ôî©‹
 
øw_begö
() const {

411  
øw_c⁄°_ôî©‹
(
my_hód
);

414 
øw_ôî©‹
 
øw_íd
() {

415  
øw_ôî©‹
(0);

418 
øw_c⁄°_ôî©‹
 
øw_íd
() const {

419  
øw_c⁄°_ôî©‹
(0);

422 
sokey_t
 
gë_‹dî_key
(c⁄° 
øw_c⁄°_ôî©‹
& 
ô
) {

423  
	gô
.
gë_node_±r
()->
gë_‹dî_key
();

426 
sokey_t
 
gë_ß„_‹dî_key
(c⁄° 
øw_c⁄°_ôî©‹
& 
ô
) {

427 if–!
	gô
.
gë_node_±r
(ËË ~
sokey_t
(0);

428  
	gô
.
gë_node_±r
()->
gë_‹dî_key
();

433 
ôî©‹
 
gë_ôî©‹
(
øw_ôî©‹
 
ô
) {

434 
__TBB_ASSERT
(
ô
.
gë_node_±r
(Ë=
NULL
 || !ô.gë_node_±r()->
is_dummy
(), "Invalid userÇode (dummy)");

435  
ôî©‹
(
ô
.
gë_node_±r
(), 
this
);

440 
c⁄°_ôî©‹
 
gë_ôî©‹
(
øw_c⁄°_ôî©‹
 
ô
) const {

441 
__TBB_ASSERT
(
ô
.
gë_node_±r
(Ë=
NULL
 || !ô.gë_node_±r()->
is_dummy
(), "Invalid userÇode (dummy)");

442  
c⁄°_ôî©‹
(
ô
.
gë_node_±r
(), 
this
);

446 
øw_ôî©‹
 
gë_ôî©‹
(
øw_c⁄°_ôî©‹
 
ô
) {

447  
øw_ôî©‹
(
ô
.
gë_node_±r
());

451 
ôî©‹
 
gë_ôî©‹
(
c⁄°_ôî©‹
 
ô
) {

452  
ôî©‹
(
ô
.
my_node_±r
, it.
my_li°_±r
);

457 
ôî©‹
 
fú°_ªÆ_ôî©‹
(
øw_ôî©‹
 
ô
)

460 
	gô
 !
øw_íd
(Ë&& 
ô
.
gë_node_±r
()->
is_dummy
())

461 ++
ô
;

463  
ôî©‹
(
ô
.
gë_node_±r
(), 
this
);

468 
c⁄°_ôî©‹
 
fú°_ªÆ_ôî©‹
(
øw_c⁄°_ôî©‹
 
ô
) const

471 
	gô
 !
øw_íd
(Ë&& 
ô
.
gë_node_±r
()->
is_dummy
())

472 ++
ô
;

474  
c⁄°_ôî©‹
(
ô
.
gë_node_±r
(), 
this
);

478 
de°roy_node
(
nodïå_t
 
≤ode
) {

479 i‡(!
	g≤ode
->
is_dummy
()Ë
	gmy_node_Æloˇt‹
.
de°roy
(
≤ode
);

480 
	gmy_node_Æloˇt‹
.
dóŒoˇã
(
≤ode
, 1);

485 
nodïå_t
 
åy_ö£π
“odïå_à
¥evious
,Çodïå_à
√w_node
,Çodïå_à
cuºít_node
) {

486 
	g√w_node
->
	gmy_√xt
 = 
cuºít_node
;

487  
	g¥evious
->
©omic_£t_√xt
(
√w_node
, 
cuºít_node
);

491 
	g°d
::
∑ú
<
ôî©‹
, 
	gboﬁ
> 
åy_ö£π
(
øw_ôî©‹
 
ô
,Ñaw_ôî©‹ 
√xt
, c⁄° 
vÆue_ty≥
 &
vÆue
, 
sokey_t
 
‹dî_key
, 
size_ty≥
 *
√w_cou¡
)

493 
nodïå_t
 
	g≤ode
 = 
¸óã_node
(
‹dî_key
, 
vÆue
);

494 
nodïå_t
 
	gö£πed_node
 = 
åy_ö£π
(
ô
.
gë_node_±r
(), 
≤ode
, 
√xt
.get_node_ptr());

496 i‡(
	gö£πed_node
 =
≤ode
)

499 
check_ønge
();

500 *
	g√w_cou¡
 = 
__TBB_FëchAndAddW
((
uöçå_t
*)&
my_ñemít_cou¡
, uintptr_t(1));

501  
	g°d
::
∑ú
<
ôî©‹
, 
	gboﬁ
>(ôî©‹(
≤ode
, 
this
), 
	gåue
);

506 
de°roy_node
(
≤ode
);

507  
	g°d
::
∑ú
<
ôî©‹
, 
	gboﬁ
>(
íd
(), 
	gÁl£
);

512 
øw_ôî©‹
 
ö£π_dummy
‘aw_ôî©‹ 
ô
, 
sokey_t
 
‹dî_key
)

514 
øw_ôî©‹
 
	gœ°
 = 
øw_íd
();

515 
øw_ôî©‹
 
	gwhîe
 = 
ô
;

517 
__TBB_ASSERT
(
whîe
 !
œ°
, "Invalid headÇode");

519 ++
	gwhîe
;

522 
nodïå_t
 
	gdummy_node
 = 
¸óã_node
(
‹dî_key
);

526 
__TBB_ASSERT
(
ô
 !
œ°
, "Invalid headÜistÇode");

530 i‡(
	gwhîe
 =
œ°
 || 
gë_‹dî_key
(
whîe
Ë> 
‹dî_key
)

532 
__TBB_ASSERT
(
gë_‹dî_key
(
ô
Ë< 
‹dî_key
, "InvalidÇode order inÅheÜist");

535 
nodïå_t
 
	gö£πed_node
 = 
åy_ö£π
(
ô
.
gë_node_±r
(), 
dummy_node
, 
whîe
.get_node_ptr());

537 i‡(
	gö£πed_node
 =
dummy_node
)

540 
check_ønge
();

541  
øw_ôî©‹
(
dummy_node
);

550 
	gwhîe
 = 
ô
;

551 ++
	gwhîe
;

555 i‡(
gë_‹dî_key
(
whîe
Ë=
‹dî_key
)

558 
de°roy_node
(
dummy_node
);

559  
	gwhîe
;

563 
	gô
 = 
whîe
;

564 ++
	gwhîe
;

570 
îa£_node
(
øw_ôî©‹
 
¥evious
, 
øw_c⁄°_ôî©‹
& 
whîe
)

572 
nodïå_t
 
	g≤ode
 = (
whîe
++).
gë_node_±r
();

573 
nodïå_t
 
	g¥evnode
 = 
¥evious
.
gë_node_±r
();

574 
__TBB_ASSERT
(
¥evnode
->
my_√xt
 =
≤ode
, "Erase mustÅake consecutive iterators");

575 
	g¥evnode
->
	gmy_√xt
 = 
≤ode
->
my_√xt
;

577 
de°roy_node
(
≤ode
);

581 
ôî©‹
 
îa£_node
(
øw_ôî©‹
 
¥evious
, 
c⁄°_ôî©‹
 
whîe
)

583 
øw_c⁄°_ôî©‹
 
	gô
 = 
whîe
;

584 
îa£_node
(
¥evious
, 
ô
);

585 
	gmy_ñemít_cou¡
--;

587  
gë_ôî©‹
(
fú°_ªÆ_ôî©‹
(
ô
));

591 
move_Æl
(
£lf_ty≥
& 
sour˚
)

593 
øw_c⁄°_ôî©‹
 
	gfú°
 = 
sour˚
.
øw_begö
();

594 
øw_c⁄°_ôî©‹
 
	gœ°
 = 
sour˚
.
øw_íd
();

596 i‡(
	gfú°
 =
œ°
)

599 
nodïå_t
 
	g¥evious_node
 = 
my_hód
;

600 
øw_c⁄°_ôî©‹
 
	gbegö_ôî©‹
 = 
fú°
++;

603 
øw_c⁄°_ôî©‹
 
	gô
 = 
fú°
; ià!
œ°
;)

605 
nodïå_t
 
	g≤ode
 = 
ô
.
gë_node_±r
();

607 
nodïå_t
 
	gdummy_node
 = 
≤ode
->
is_dummy
(Ë? 
¸óã_node
’node->
gë_‹dî_key
()Ë: cª©e_node’node->gë_‹dî_key(),Önode->
my_ñemít
);

608 
	g¥evious_node
 = 
åy_ö£π
(
¥evious_node
, 
dummy_node
, 
NULL
);

609 
__TBB_ASSERT
(
¥evious_node
 !
NULL
, "Insertion must succeed");

610 
øw_c⁄°_ôî©‹
 
	gwhîe
 = 
ô
++;

611 
	gsour˚
.
îa£_node
(
gë_ôî©‹
(
begö_ôî©‹
), 
whîe
);

613 
check_ønge
();

617 
	g¥iv©e
:

619 
ãm∂©e
 <
ty≥«me
 
Tøôs
>

620 
‰õnd
 
˛ass
 
c⁄cuºít_un‹dîed_ba£
;

623 
check_ønge
()

625 #i‡
TBB_USE_ASSERT


626 
øw_ôî©‹
 
	gô
 = 
øw_begö
(); ià!
øw_íd
(); ++it)

628 
øw_ôî©‹
 
	g√xt_ôî©‹
 = 
ô
;

629 ++
	g√xt_ôî©‹
;

631 
__TBB_ASSERT
(
√xt_ôî©‹
 =
íd
(Ë||Çext_ôî©‹.
gë_node_±r
()->
gë_‹dî_key
(Ë>
ô
.get_node_ptr()->get_order_key(), "!!! List order inconsistency !!!");

636 
ty≥«me
 
	gÆloˇt‹_ty≥
::
ãm∂©e
 
ªböd
<
node
>::
Ÿhî
 
my_node_Æloˇt‹
;

637 
size_ty≥
 
	gmy_ñemít_cou¡
;

638 
nodïå_t
 
	gmy_hód
;

642 
	gãm∂©e
<
ty≥«me
 
	gKey
,Åy≥«mê
	gHashî
,Åy≥«mê
	gKey_equÆôy
>

643 ˛as†
	chash_com∑ª


645 
	gpublic
:

646 
Hashî
 
	thashî
;

647 
Key_equÆôy
 
	tkey_equÆ
;

649 
hash_com∑ª
() {}

651 
hash_com∑ª
(
Hashî
 
a_hashî
Ë: 
my_hash_obje˘
(a_hasher) {}

653 
hash_com∑ª
(
Hashî
 
a_hashî
, 
Key_equÆôy
 
a_keyeq
Ë: 
my_hash_obje˘
◊_hashî), 
my_key_com∑ª_obje˘
(a_keyeq) {}

655 
size_t
 
›î©‹
()(c⁄° 
	gKey
& 
	gkey
) const {

656  ((
	gsize_t
)
my_hash_obje˘
(
key
));

659 
boﬁ
 
›î©‹
()(c⁄° 
	gKey
& 
	gkey1
, c⁄° Key& 
	gkey2
) const {

660  (!
my_key_com∑ª_obje˘
(
key1
, 
key2
));

663 
Hashî
 
	gmy_hash_obje˘
;

664 
Key_equÆôy
 
	gmy_key_com∑ª_obje˘
;

667 #i‡
deföed
(
_MSC_VER
Ë&& !deföed(
__INTEL_COMPILER
)

668 #¥agm®
w¨nög
(
push
)

669 #¥agm®
w¨nög
(
dißbÀ
: 4127)

672 
	gãm∂©e
 <
ty≥«me
 
	gTøôs
>

673 ˛as†
	cc⁄cuºít_un‹dîed_ba£
 : 
public
 
Tøôs


675 
¥Ÿe˘ed
:

677 
c⁄cuºít_un‹dîed_ba£
<
	tTøôs
> 
	t£lf_ty≥
;

678 
ty≥«me
 
	tTøôs
::
	tvÆue_ty≥
 value_type;

679 
ty≥«me
 
	tTøôs
::
	tkey_ty≥
 key_type;

680 
ty≥«me
 
	tTøôs
::
	thash_com∑ª
 hash_compare;

681 
ty≥«me
 
	tTøôs
::
	tvÆue_com∑ª
 value_compare;

682 
ty≥«me
 
	tTøôs
::
	tÆloˇt‹_ty≥
állocator_type;

683 
ty≥«me
 
	thash_com∑ª
::
	thashî
 hasher;

684 
ty≥«me
 
	thash_com∑ª
::
	tkey_equÆ
 key_equal;

685 
ty≥«me
 
	tÆloˇt‹_ty≥
::
	tpoöãr
Öointer;

686 
ty≥«me
 
	tÆloˇt‹_ty≥
::
	tc⁄°_poöãr
 const_pointer;

687 
ty≥«me
 
	tÆloˇt‹_ty≥
::
	tª„ªn˚
Ñeference;

688 
ty≥«me
 
	tÆloˇt‹_ty≥
::
	tc⁄°_ª„ªn˚
 const_reference;

689 
ty≥«me
 
	tÆloˇt‹_ty≥
::
	tsize_ty≥
 size_type;

690 
ty≥«me
 
	tÆloˇt‹_ty≥
::
	tdif„ªn˚_ty≥
 difference_type;

691 
	g•lô_‹dîed_li°
<
	tvÆue_ty≥
, 
	tty≥«me
 
	tTøôs
::
	tÆloˇt‹_ty≥
> 
	tsﬁi°_t
;

692 
ty≥«me
 
	tsﬁi°_t
::
	tnodïå_t
Çodeptr_t;

694 
ty≥«me
 
	tsﬁi°_t
::
	tøw_ôî©‹
Ñaw_iterator;

695 
ty≥«me
 
	tsﬁi°_t
::
	tøw_c⁄°_ôî©‹
Ñaw_const_iterator;

696 
ty≥«me
 
	tsﬁi°_t
::
	tôî©‹
 iterator;

697 
ty≥«me
 
	tsﬁi°_t
::
	tc⁄°_ôî©‹
 const_iterator;

698 
ôî©‹
 
	tloˇl_ôî©‹
;

699 
c⁄°_ôî©‹
 
	tc⁄°_loˇl_ôî©‹
;

700 
usög
 
	gTøôs
::
my_hash_com∑ª
;

701 
usög
 
	gTøôs
::
gë_key
;

702 
usög
 
	gTøôs
::
Ælow_mu…im≠pög
;

704 c⁄° 
size_ty≥
 
	göôül_buckë_numbî
 = 8;

705 
	g¥iv©e
:

706 
°d
::
	t∑ú
<
	tôî©‹
, iãøt‹> 
	t∑úii_t
;

707 
	g°d
::
	t∑ú
<
	tc⁄°_ôî©‹
, c⁄°_ôî©‹> 
	t∑úcc_t
;

709 
size_ty≥
 c⁄° 
	gpoöãrs_≥r_èbÀ
 = (size_type) * 8;

710 c⁄° 
size_ty≥
 
	göôül_buckë_lﬂd
 = 4;

712 
	sˇŒ_öã∫Æ_˛ór_⁄_exô
{

713 
c⁄cuºít_un‹dîed_ba£
* 
	gmy_ö°™˚
;

714 
ˇŒ_öã∫Æ_˛ór_⁄_exô
(
c⁄cuºít_un‹dîed_ba£
* 
ö°™˚
Ë: 
my_ö°™˚
(instance) {}

715 
dismiss
(){ 
my_ö°™˚
 = 
NULL
;}

716 ~
ˇŒ_öã∫Æ_˛ór_⁄_exô
(){

717 i‡(
	gmy_ö°™˚
){

718 
	gmy_ö°™˚
->
öã∫Æ_˛ór
();

722 
	g¥Ÿe˘ed
:

724 
c⁄cuºít_un‹dîed_ba£
(
size_ty≥
 
n_of_buckës
 = 
öôül_buckë_numbî
,

725 c⁄° 
hash_com∑ª
& 
hc
 = hash_com∑ª(), c⁄° 
Æloˇt‹_ty≥
& 
a
 =állocator_type())

726 : 
Tøôs
(
hc
), 
my_sﬁi°
(
a
),

727 
my_Æloˇt‹
(
a
), 
my_maximum_buckë_size
((Ë
öôül_buckë_lﬂd
)

729 if–
	gn_of_buckës
 =0Ë++
n_of_buckës
;

730 
	gmy_numbî_of_buckës
 = 1<<
__TBB_Log2
((
uöçå_t
)
n_of_buckës
*2-1);

731 
öã∫Æ_öô
();

734 
c⁄cuºít_un‹dîed_ba£
(c⁄° c⁄cuºít_un‹dîed_ba£& 
right
, c⁄° 
Æloˇt‹_ty≥
& 
a
)

735 : 
Tøôs
(
right
.
my_hash_com∑ª
), 
my_sﬁi°
(
a
), 
my_Æloˇt‹
(a)

737 
öã∫Æ_öô
();

738 
öã∫Æ_c›y
(
right
);

741 
c⁄cuºít_un‹dîed_ba£
(c⁄° c⁄cuºít_un‹dîed_ba£& 
right
)

742 : 
Tøôs
(
right
.
my_hash_com∑ª
), 
my_sﬁi°
‘ight.
gë_Æloˇt‹
()), 
my_Æloˇt‹
(right.get_allocator())

745 
öã∫Æ_öô
();

746 
öã∫Æ_c›y
(
right
);

749 #i‡
__TBB_CPP11_RVALUE_REF_PRESENT


750 
c⁄cuºít_un‹dîed_ba£
(c⁄cuºít_un‹dîed_ba£&& 
right
)

751 : 
Tøôs
(
right
.
my_hash_com∑ª
), 
my_sﬁi°
‘ight.
gë_Æloˇt‹
()), 
my_Æloˇt‹
(right.get_allocator())

753 
öã∫Æ_öô
();

754 
sw≠
(
right
);

757 
c⁄cuºít_un‹dîed_ba£
(c⁄cuºít_un‹dîed_ba£&& 
right
, c⁄° 
Æloˇt‹_ty≥
& 
a
)

758 : 
Tøôs
(
right
.
my_hash_com∑ª
), 
my_sﬁi°
(
a
), 
my_Æloˇt‹
(a)

760 
ˇŒ_öã∫Æ_˛ór_⁄_exô
 
˛ór_buckës_⁄_ex˚±i⁄
(
this
);

762 
öã∫Æ_öô
();

763 i‡(
	ga
 =
right
.
gë_Æloˇt‹
()){

764 
this
->
sw≠
(
right
);

766 
	gmy_maximum_buckë_size
 = 
right
.
my_maximum_buckë_size
;

767 
	gmy_numbî_of_buckës
 = 
right
.
my_numbî_of_buckës
;

768 
	gmy_sﬁi°
.
	gmy_ñemít_cou¡
 = 
right
.
my_sﬁi°
.
my_ñemít_cou¡
;

770 i‡(! 
	gright
.
	gmy_sﬁi°
.
em±y
()){

771 
nodïå_t
 
	g¥evious_node
 = 
my_sﬁi°
.
my_hód
;

774 
øw_c⁄°_ôî©‹
 
	gô
 = ++(
right
.
my_sﬁi°
.
øw_begö
()), 
	gœ°
 =Ñight.my_sﬁi°.
øw_íd
(); ià!
œ°
; ++it)

776 c⁄° 
nodïå_t
 
	g≤ode
 = 
ô
.
gë_node_±r
();

777 
nodïå_t
 
	gnode
;

778 i‡(
	g≤ode
->
is_dummy
()) {

779 
	gnode
 = 
my_sﬁi°
.
¸óã_node
(
≤ode
->
gë_‹dî_key
());

780 
size_ty≥
 
	gbuckë
 = 
__TBB_Revî£Bôs
(
≤ode
->
gë_‹dî_key
()Ë% 
my_numbî_of_buckës
;

781 
£t_buckë
(
buckë
, 
node
);

783 
	gnode
 = 
my_sﬁi°
.
¸óã_node
(
≤ode
->
gë_‹dî_key
(), 
°d
::
move
’node->
my_ñemít
));

786 
	g¥evious_node
 = 
my_sﬁi°
.
åy_ö£π
(
¥evious_node
, 
node
, 
NULL
);

787 
__TBB_ASSERT
(
¥evious_node
 !
NULL
, "Insertion ofÇode failed. Concurrent inserts in constructor ?");

789 
	gmy_sﬁi°
.
check_ønge
();

793 
	g˛ór_buckës_⁄_ex˚±i⁄
.
dismiss
();

798 
	gc⁄cuºít_un‹dîed_ba£
& 
	g›î©‹
=(c⁄° 
c⁄cuºít_un‹dîed_ba£
& 
right
) {

799 i‡(
this
 !&
right
)

800 
öã∫Æ_c›y
(
right
);

801  (*
	gthis
);

804 #i‡
__TBB_CPP11_RVALUE_REF_PRESENT


805 
	gc⁄cuºít_un‹dîed_ba£
& 
	g›î©‹
=(
c⁄cuºít_un‹dîed_ba£
&& 
Ÿhî
)

807 if(
this
 !&
Ÿhî
){

808 
ty≥«me
 
	ttbb
::
	töã∫Æ
::
	tÆloˇt‹_åaôs
<
	tÆloˇt‹_ty≥
>::
	t¥›ag©e_⁄_c⁄èöî_move_assignmít
 
	tpocma_t
;

809 if(
	gpocma_t
::
vÆue
 || 
this
->
my_Æloˇt‹
 =
Ÿhî
.my_allocator) {

810 
c⁄cuºít_un‹dîed_ba£
 
åash
 (
°d
::
move
(*
this
));

811 
sw≠
(
Ÿhî
);

812 i‡(
	gpocma_t
::
vÆue
) {

813 
usög
 
°d
::
sw≠
;

815 
sw≠
(
this
->
my_sﬁi°
.
my_node_Æloˇt‹
, 
Ÿhî
.my_solist.my_node_allocator);

816 
sw≠
(
this
->
my_Æloˇt‹
, 
Ÿhî
.my_allocator);

819 
c⁄cuºít_un‹dîed_ba£
 
moved_c›y
(
°d
::
move
(
Ÿhî
),
this
->
my_Æloˇt‹
);

820 
	gthis
->
sw≠
(
moved_c›y
);

823  *
	gthis
;

828 #i‡
__TBB_INITIALIZER_LISTS_PRESENT


830 
	gc⁄cuºít_un‹dîed_ba£
& 
	g›î©‹
=(
°d
::
öôülizî_li°
<
vÆue_ty≥
> 
û
)

832 
this
->
˛ór
();

833 
	gthis
->
ö£π
(
û
.
begö
(),û.
íd
());

834  (*
	gthis
);

839 ~
c⁄cuºít_un‹dîed_ba£
() {

841 
öã∫Æ_˛ór
();

844 
	gpublic
:

845 
Æloˇt‹_ty≥
 
gë_Æloˇt‹
() const {

846  
my_sﬁi°
.
gë_Æloˇt‹
();

850 
boﬁ
 
em±y
() const {

851  
	gmy_sﬁi°
.
em±y
();

854 
size_ty≥
 
size
() const {

855  
	gmy_sﬁi°
.
size
();

858 
size_ty≥
 
max_size
() const {

859  
	gmy_sﬁi°
.
max_size
();

863 
ôî©‹
 
begö
() {

864  
	gmy_sﬁi°
.
begö
();

867 
c⁄°_ôî©‹
 
begö
() const {

868  
	gmy_sﬁi°
.
begö
();

871 
ôî©‹
 
íd
() {

872  
	gmy_sﬁi°
.
íd
();

875 
c⁄°_ôî©‹
 
íd
() const {

876  
	gmy_sﬁi°
.
íd
();

879 
c⁄°_ôî©‹
 
cbegö
() const {

880  
	gmy_sﬁi°
.
cbegö
();

883 
c⁄°_ôî©‹
 
˚nd
() const {

884  
	gmy_sﬁi°
.
˚nd
();

888 ˛as†
	cc⁄°_ønge_ty≥
 : 
tbb
::
öã∫Æ
::
no_assign
 {

889 c⁄° 
c⁄cuºít_un‹dîed_ba£
 &
my_èbÀ
;

890 
øw_c⁄°_ôî©‹
 
	gmy_begö_node
;

891 
øw_c⁄°_ôî©‹
 
	gmy_íd_node
;

892 
muèbÀ
 
øw_c⁄°_ôî©‹
 
	gmy_midpoöt_node
;

893 
	gpublic
:

895 
ty≥«me
 
	tc⁄cuºít_un‹dîed_ba£
::
	tsize_ty≥
 size_type;

896 
ty≥«me
 
	tc⁄cuºít_un‹dîed_ba£
::
	tvÆue_ty≥
 value_type;

897 
ty≥«me
 
	tc⁄cuºít_un‹dîed_ba£
::
	tª„ªn˚
Ñeference;

898 
ty≥«me
 
	tc⁄cuºít_un‹dîed_ba£
::
	tdif„ªn˚_ty≥
 difference_type;

899 
ty≥«me
 
	tc⁄cuºít_un‹dîed_ba£
::
	tc⁄°_ôî©‹
 
	tôî©‹
;

902 
boﬁ
 
em±y
(Ëc⁄° { 
	gmy_begö_node
 =
my_íd_node
;}

905 
boﬁ
 
is_divisibÀ
() const {

906  
	gmy_midpoöt_node
 !
my_íd_node
;

909 
c⁄°_ønge_ty≥
–c⁄°_ønge_ty≥ &
r
, 
•lô
 ) :

910 
my_èbÀ
(
r
.my_èbÀ), 
my_íd_node
(r.my_end_node)

912 
	gr
.
	gmy_íd_node
 = 
my_begö_node
 = 
r
.
my_midpoöt_node
;

913 
__TBB_ASSERT
–!
em±y
(), "Splitting despiteÅheÑange isÇot divisible" );

914 
__TBB_ASSERT
–!
r
.
em±y
(), "Splitting despiteÅheÑange isÇot divisible" );

915 
£t_midpoöt
();

916 
	gr
.
£t_midpoöt
();

919 
c⁄°_ønge_ty≥
–c⁄° 
c⁄cuºít_un‹dîed_ba£
 &
a_èbÀ
 ) :

920 
my_èbÀ
(
a_èbÀ
), 
my_begö_node
◊_èbÀ.
my_sﬁi°
.
begö
()),

921 
my_íd_node
(
a_èbÀ
.
my_sﬁi°
.
íd
())

923 
£t_midpoöt
();

925 
ôî©‹
 
begö
(Ëc⁄° {  
	gmy_èbÀ
.
	gmy_sﬁi°
.
gë_ôî©‹
(
my_begö_node
); }

926 
ôî©‹
 
íd
(Ëc⁄° {  
	gmy_èbÀ
.
	gmy_sﬁi°
.
gë_ôî©‹
(
my_íd_node
); }

928 
size_ty≥
 
gøösize
() const {  1; }

931 
£t_midpoöt
() const {

932 if–
	gmy_begö_node
 =
my_íd_node
 )

933 
my_midpoöt_node
 = 
my_íd_node
;

935 
sokey_t
 
	gbegö_key
 = 
sﬁi°_t
::
gë_ß„_‹dî_key
(
my_begö_node
);

936 
sokey_t
 
	gíd_key
 = 
sﬁi°_t
::
gë_ß„_‹dî_key
(
my_íd_node
);

937 
size_t
 
	gmid_buckë
 = 
__TBB_Revî£Bôs
–
begö_key
 + (
íd_key
-begö_key)/2 ) % 
my_èbÀ
.
my_numbî_of_buckës
;

938  !
	gmy_èbÀ
.
is_öôülized
(
mid_buckë
ËË
	gmid_buckë
 = 
my_èbÀ
.
gë_∑ª¡
(mid_bucket);

939 if(
__TBB_Revî£Bôs
(
mid_buckë
Ë> 
	gbegö_key
) {

941 
	gmy_midpoöt_node
 = 
my_èbÀ
.
my_sﬁi°
.
fú°_ªÆ_ôî©‹
(my_èbÀ.
gë_buckë
–
mid_buckë
 ));

945 
	gmy_midpoöt_node
 = 
my_íd_node
;

947 #i‡
TBB_USE_ASSERT


949 
sokey_t
 
	gmid_key
 = 
sﬁi°_t
::
gë_ß„_‹dî_key
(
my_midpoöt_node
);

950 
__TBB_ASSERT
–
begö_key
 < 
mid_key
, "my_begin_node isáfter my_midpoint_node" );

951 
__TBB_ASSERT
–
mid_key
 <
íd_key
, "my_midpoint_node isáfter my_end_node" );

958 ˛as†
	cønge_ty≥
 : 
public
 
c⁄°_ønge_ty≥
 {

959 
public
:

960 
ty≥«me
 
	tc⁄cuºít_un‹dîed_ba£
::
	tôî©‹
 iterator;

962 
ønge_ty≥
–ønge_ty≥ &
r
, 
•lô
 ) : 
c⁄°_ønge_ty≥
(Ñ, split() ) {}

964 
ønge_ty≥
–c⁄° 
c⁄cuºít_un‹dîed_ba£
 &
a_èbÀ
 ) : 
c⁄°_ønge_ty≥
(a_table) {}

966 
ôî©‹
 
begö
(Ëc⁄° {  
sﬁi°_t
::
gë_ôî©‹
–
c⁄°_ønge_ty≥
::begin() ); }

967 
ôî©‹
 
íd
(Ëc⁄° {  
	gsﬁi°_t
::
gë_ôî©‹
–
c⁄°_ønge_ty≥
::end() ); }

970 
ønge_ty≥
 
ønge
() {

971  
ønge_ty≥
–*
this
 );

974 
c⁄°_ønge_ty≥
 
ønge
() const {

975  
c⁄°_ønge_ty≥
–*
this
 );

979 
	g°d
::
∑ú
<
ôî©‹
, 
	gboﬁ
> 
ö£π
(c⁄° 
vÆue_ty≥
& 
vÆue
) {

980  
öã∫Æ_ö£π
(
vÆue
);

983 
ôî©‹
 
ö£π
(
c⁄°_ôî©‹
, c⁄° 
vÆue_ty≥
& 
vÆue
) {

985  
ö£π
(
vÆue
).
	gfú°
;

988 
	gãm∂©e
<
˛ass
 
	gIãøt‹
>

989 
ö£π
(
Iãøt‹
 
fú°
, Iãøt‹ 
œ°
) {

990 
Iãøt‹
 
	gô
 = 
fú°
; ià!
œ°
; ++it)

991 
ö£π
(*
ô
);

994 #i‡
__TBB_INITIALIZER_LISTS_PRESENT


996 
ö£π
(
°d
::
öôülizî_li°
<
vÆue_ty≥
> 
û
) {

997 
ö£π
(
û
.
begö
(), il.
íd
());

1001 
ôî©‹
 
unß„_îa£
(
c⁄°_ôî©‹
 
whîe
) {

1002  
öã∫Æ_îa£
(
whîe
);

1005 
ôî©‹
 
unß„_îa£
(
c⁄°_ôî©‹
 
fú°
, c⁄°_ôî©‹ 
œ°
) {

1006 
	gfú°
 !
œ°
)

1007 
unß„_îa£
(
fú°
++);

1008  
	gmy_sﬁi°
.
gë_ôî©‹
(
fú°
);

1011 
size_ty≥
 
unß„_îa£
(c⁄° 
key_ty≥
& 
key
) {

1012 
∑úii_t
 
	gwhîe
 = 
equÆ_ønge
(
key
);

1013 
size_ty≥
 
	gôem_cou¡
 = 
öã∫Æ_di°™˚
(
whîe
.
fú°
, whîe.
£c⁄d
);

1014 
unß„_îa£
(
whîe
.
fú°
, whîe.
£c⁄d
);

1015  
	gôem_cou¡
;

1018 
sw≠
(
c⁄cuºít_un‹dîed_ba£
& 
right
) {

1019 i‡(
	gthis
 !&
right
) {

1020 
°d
::
sw≠
(
my_hash_com∑ª
, 
right
.my_hash_compare);

1021 
	gmy_sﬁi°
.
sw≠
(
right
.
my_sﬁi°
);

1022 
öã∫Æ_sw≠_buckës
(
right
);

1023 
	g°d
::
sw≠
(
my_numbî_of_buckës
, 
right
.my_number_of_buckets);

1024 
	g°d
::
sw≠
(
my_maximum_buckë_size
, 
right
.my_maximum_bucket_size);

1029 
hashî
 
hash_fun˘i⁄
() const {

1030  
	gmy_hash_com∑ª
.
	gmy_hash_obje˘
;

1033 
key_equÆ
 
key_eq
() const {

1034  
	gmy_hash_com∑ª
.
	gmy_key_com∑ª_obje˘
;

1037 
˛ór
() {

1039 
	gmy_sﬁi°
.
˛ór
();

1042 
öã∫Æ_˛ór
();

1045 
__TBB_ASSERT
(
my_buckës
[0] =
NULL
, NULL);

1046 
øw_ôî©‹
 
	gdummy_node
 = 
my_sﬁi°
.
øw_begö
();

1047 
£t_buckë
(0, 
dummy_node
);

1051 
ôî©‹
 
föd
(c⁄° 
key_ty≥
& 
key
) {

1052  
öã∫Æ_föd
(
key
);

1055 
c⁄°_ôî©‹
 
föd
(c⁄° 
key_ty≥
& 
key
) const {

1056  
	gc⁄°_ˇ°
<
	g£lf_ty≥
*>(
	gthis
)->
öã∫Æ_föd
(
key
);

1059 
size_ty≥
 
cou¡
(c⁄° 
key_ty≥
& 
key
) const {

1060 if(
	gÆlow_mu…im≠pög
) {

1061 
∑úcc_t
 
	g™swî
 = 
equÆ_ønge
(
key
);

1062 
size_ty≥
 
	gôem_cou¡
 = 
öã∫Æ_di°™˚
(
™swî
.
fú°
,ánswî.
£c⁄d
);

1063  
	gôem_cou¡
;

1065  
	gc⁄°_ˇ°
<
	g£lf_ty≥
*>(
	gthis
)->
öã∫Æ_föd
(
key
Ë=
íd
()?0:1;

1069 
	g°d
::
∑ú
<
ôî©‹
, 
	gôî©‹
> 
equÆ_ønge
(c⁄° 
key_ty≥
& 
key
) {

1070  
öã∫Æ_equÆ_ønge
(
key
);

1073 
	g°d
::
∑ú
<
c⁄°_ôî©‹
, 
	gc⁄°_ôî©‹
> 
equÆ_ønge
(c⁄° 
key_ty≥
& 
key
) const {

1074  
	gc⁄°_ˇ°
<
	g£lf_ty≥
*>(
	gthis
)->
öã∫Æ_equÆ_ønge
(
key
);

1078 
size_ty≥
 
unß„_buckë_cou¡
() const {

1079  
	gmy_numbî_of_buckës
;

1082 
size_ty≥
 
unß„_max_buckë_cou¡
() const {

1083  
£gmít_size
(
poöãrs_≥r_èbÀ
-1);

1086 
size_ty≥
 
unß„_buckë_size
(size_ty≥ 
buckë
) {

1087 
size_ty≥
 
	gôem_cou¡
 = 0;

1088 i‡(
is_öôülized
(
buckë
)) {

1089 
øw_ôî©‹
 
	gô
 = 
gë_buckë
(
buckë
);

1090 ++
	gô
;

1091 ; 
	gô
 !
my_sﬁi°
.
øw_íd
(Ë&& !
ô
.
gë_node_±r
()->
is_dummy
(); ++it)

1092 ++
	gôem_cou¡
;

1094  
	gôem_cou¡
;

1097 
size_ty≥
 
unß„_buckë
(c⁄° 
key_ty≥
& 
key
) const {

1098 
sokey_t
 
	g‹dî_key
 = (sokey_tË
my_hash_com∑ª
(
key
);

1099 
size_ty≥
 
	gbuckë
 = 
‹dî_key
 % 
my_numbî_of_buckës
;

1100  
	gbuckë
;

1104 
loˇl_ôî©‹
 
unß„_begö
(
size_ty≥
 
buckë
) {

1105 i‡(!
is_öôülized
(
buckë
))

1106  
íd
();

1108 
øw_ôî©‹
 
	gô
 = 
gë_buckë
(
buckë
);

1109  
	gmy_sﬁi°
.
fú°_ªÆ_ôî©‹
(
ô
);

1113 
c⁄°_loˇl_ôî©‹
 
unß„_begö
(
size_ty≥
 
buckë
) const

1115 i‡(!
is_öôülized
(
buckë
))

1116  
íd
();

1118 
øw_c⁄°_ôî©‹
 
	gô
 = 
gë_buckë
(
buckë
);

1119  
	gmy_sﬁi°
.
fú°_ªÆ_ôî©‹
(
ô
);

1124 
loˇl_ôî©‹
 
unß„_íd
(
size_ty≥
 
buckë
)

1126 i‡(!
is_öôülized
(
buckë
))

1127  
íd
();

1129 
øw_ôî©‹
 
	gô
 = 
gë_buckë
(
buckë
);

1132 dÿ++
	gô
;

1133 
	gô
 !
my_sﬁi°
.
øw_íd
(Ë&& !
ô
.
gë_node_±r
()->
is_dummy
());

1136  
	gmy_sﬁi°
.
fú°_ªÆ_ôî©‹
(
ô
);

1141 
c⁄°_loˇl_ôî©‹
 
unß„_íd
(
size_ty≥
 
buckë
) const

1143 i‡(!
is_öôülized
(
buckë
))

1144  
íd
();

1146 
øw_c⁄°_ôî©‹
 
	gô
 = 
gë_buckë
(
buckë
);

1149 dÿ++
	gô
;

1150 
	gô
 !
my_sﬁi°
.
øw_íd
(Ë&& !
ô
.
gë_node_±r
()->
is_dummy
());

1153  
	gmy_sﬁi°
.
fú°_ªÆ_ôî©‹
(
ô
);

1156 
c⁄°_loˇl_ôî©‹
 
unß„_cbegö
(
size_ty≥
 
buckë
) const {

1157  ((c⁄° 
	g£lf_ty≥
 *Ë
	gthis
)->
unß„_begö
(
buckë
);

1160 
c⁄°_loˇl_ôî©‹
 
unß„_˚nd
(
size_ty≥
 
buckë
) const {

1161  ((c⁄° 
	g£lf_ty≥
 *Ë
	gthis
)->
unß„_íd
(
buckë
);

1165 
lﬂd_Á˘‹
() const {

1166  (Ë
size
(Ë/ (Ë
unß„_buckë_cou¡
();

1169 
max_lﬂd_Á˘‹
() const {

1170  
	gmy_maximum_buckë_size
;

1173 
max_lﬂd_Á˘‹
(
√wmax
) {

1174 i‡(
	g√wmax
 !
√wmax
 ||Çewmax < 0)

1175 
tbb
::
öã∫Æ
::
throw_ex˚±i⁄
—bb::öã∫Æ::
eid_övÆid_lﬂd_Á˘‹
);

1176 
	gmy_maximum_buckë_size
 = 
√wmax
;

1182 
ªhash
(
size_ty≥
 
buckës
) {

1183 
size_ty≥
 
	gcuºít_buckës
 = 
my_numbî_of_buckës
;

1184 i‡(
	gcuºít_buckës
 >
buckës
)

1186 
	gmy_numbî_of_buckës
 = 1<<
__TBB_Log2
((
uöçå_t
)
buckës
*2-1);

1189 
	g¥iv©e
:

1192 
öã∫Æ_öô
() {

1194 
mem£t
(
my_buckës
, 0, 
poöãrs_≥r_èbÀ
 * (*));

1197 
øw_ôî©‹
 
	gdummy_node
 = 
my_sﬁi°
.
øw_begö
();

1198 
£t_buckë
(0, 
dummy_node
);

1201 
öã∫Æ_˛ór
() {

1202 
size_ty≥
 
	gödex
 = 0; index < 
	gpoöãrs_≥r_èbÀ
; ++index) {

1203 i‡(
	gmy_buckës
[
ödex
] !
NULL
) {

1204 
size_ty≥
 
sz
 = 
£gmít_size
(
ödex
);

1205 
size_ty≥
 
	gödex2
 = 0; index2 < 
	gsz
; ++index2)

1206 
	gmy_Æloˇt‹
.
de°roy
(&
my_buckës
[
ödex
][
ödex2
]);

1207 
	gmy_Æloˇt‹
.
dóŒoˇã
(
my_buckës
[
ödex
], 
sz
);

1208 
	gmy_buckës
[
ödex
] = 0;

1213 
öã∫Æ_c›y
(c⁄° 
£lf_ty≥
& 
right
) {

1214 
˛ór
();

1216 
	gmy_maximum_buckë_size
 = 
right
.
my_maximum_buckë_size
;

1217 
	gmy_numbî_of_buckës
 = 
right
.
my_numbî_of_buckës
;

1219 
	g__TBB_TRY
 {

1220 
ö£π
(
right
.
begö
(),Ñight.
íd
());

1221 
	gmy_hash_com∑ª
 = 
right
.
my_hash_com∑ª
;

1222 } 
__TBB_CATCH
(...) {

1223 
	gmy_sﬁi°
.
˛ór
();

1224 
__TBB_RETHROW
();

1228 
öã∫Æ_sw≠_buckës
(
c⁄cuºít_un‹dîed_ba£
& 
right
)

1231 
size_ty≥
 
	gödex
 = 0; index < 
	gpoöãrs_≥r_èbÀ
; ++index)

1233 
øw_ôî©‹
 * 
	gôî©‹_poöãr
 = 
my_buckës
[
ödex
];

1234 
	gmy_buckës
[
ödex
] = 
right
.
my_buckës
[index];

1235 
	gright
.
	gmy_buckës
[
ödex
] = 
ôî©‹_poöãr
;

1241 
size_ty≥
 
öã∫Æ_di°™˚
(
c⁄°_ôî©‹
 
fú°
, c⁄°_ôî©‹ 
œ°
) const

1243 
size_ty≥
 
	gnum
 = 0;

1245 
c⁄°_ôî©‹
 
	gô
 = 
fú°
; ià!
œ°
; ++it)

1246 ++
	gnum
;

1248  
	gnum
;

1252 
	g°d
::
∑ú
<
ôî©‹
, 
	gboﬁ
> 
öã∫Æ_ö£π
(c⁄° 
vÆue_ty≥
& 
vÆue
)

1254 
sokey_t
 
	g‹dî_key
 = (sokey_tË
my_hash_com∑ª
(
gë_key
(
vÆue
));

1255 
size_ty≥
 
	gbuckë
 = 
‹dî_key
 % 
my_numbî_of_buckës
;

1258 i‡(!
is_öôülized
(
buckë
))

1259 
öô_buckë
(
buckë
);

1261 
size_ty≥
 
	g√w_cou¡
 = 0;

1262 
	g‹dî_key
 = 
•lô_‹dî_key_ªguœr
(
‹dî_key
);

1263 
øw_ôî©‹
 
	gô
 = 
gë_buckë
(
buckë
);

1264 
øw_ôî©‹
 
	gœ°
 = 
my_sﬁi°
.
øw_íd
();

1265 
øw_ôî©‹
 
	gwhîe
 = 
ô
;

1267 
__TBB_ASSERT
(
whîe
 !
œ°
, "Invalid headÇode");

1270 ++
	gwhîe
;

1274 i‡(
	gwhîe
 =
œ°
 || 
sﬁi°_t
::
gë_‹dî_key
(
whîe
Ë> 
‹dî_key
)

1277 
°d
::
∑ú
<
ôî©‹
, 
boﬁ
> 
ªsu…
 = 
my_sﬁi°
.
åy_ö£π
(
ô
, 
whîe
, 
vÆue
, 
‹dî_key
, &
√w_cou¡
);

1279 i‡(
	gªsu…
.
	g£c⁄d
)

1282 
adju°_èbÀ_size
(
√w_cou¡
, 
my_numbî_of_buckës
);

1283  
	gªsu…
;

1292 
	gwhîe
 = 
ô
;

1293 ++
	gwhîe
;

1297 i‡(!
	gÆlow_mu…im≠pög
 && 
	gsﬁi°_t
::
gë_‹dî_key
(
whîe
Ë=
‹dî_key
 && 
my_hash_com∑ª
(
gë_key
(*whîe), gë_key(
vÆue
)) == 0)

1300  
°d
::
∑ú
<
ôî©‹
, 
boﬁ
>(
my_sﬁi°
.
gë_ôî©‹
(
whîe
), 
Ál£
);

1304 
	gô
 = 
whîe
;

1305 ++
	gwhîe
;

1310 
ôî©‹
 
öã∫Æ_föd
(c⁄° 
key_ty≥
& 
key
)

1312 
sokey_t
 
	g‹dî_key
 = (sokey_tË
my_hash_com∑ª
(
key
);

1313 
size_ty≥
 
	gbuckë
 = 
‹dî_key
 % 
my_numbî_of_buckës
;

1316 i‡(!
is_öôülized
(
buckë
))

1317 
öô_buckë
(
buckë
);

1319 
	g‹dî_key
 = 
•lô_‹dî_key_ªguœr
(
‹dî_key
);

1320 
øw_ôî©‹
 
	gœ°
 = 
my_sﬁi°
.
øw_íd
();

1322 
øw_ôî©‹
 
	gô
 = 
gë_buckë
(
buckë
); ià!
œ°
; ++it)

1324 i‡(
	gsﬁi°_t
::
gë_‹dî_key
(
ô
Ë> 
‹dî_key
)

1328  
íd
();

1330 i‡(
	gsﬁi°_t
::
gë_‹dî_key
(
ô
Ë=
‹dî_key
)

1335 i‡(!
my_hash_com∑ª
(
gë_key
(*
ô
), 
key
))

1336  
my_sﬁi°
.
gë_ôî©‹
(
ô
);

1340  
íd
();

1344 
ôî©‹
 
öã∫Æ_îa£
(
c⁄°_ôî©‹
 
ô
)

1346 
key_ty≥
 
	gkey
 = 
gë_key
(*
ô
);

1347 
sokey_t
 
	g‹dî_key
 = (sokey_tË
my_hash_com∑ª
(
key
);

1348 
size_ty≥
 
	gbuckë
 = 
‹dî_key
 % 
my_numbî_of_buckës
;

1351 i‡(!
is_öôülized
(
buckë
))

1352 
öô_buckë
(
buckë
);

1354 
	g‹dî_key
 = 
•lô_‹dî_key_ªguœr
(
‹dî_key
);

1356 
øw_ôî©‹
 
	g¥evious
 = 
gë_buckë
(
buckë
);

1357 
øw_ôî©‹
 
	gœ°
 = 
my_sﬁi°
.
øw_íd
();

1358 
øw_ôî©‹
 
	gwhîe
 = 
¥evious
;

1360 
__TBB_ASSERT
(
whîe
 !
œ°
, "Invalid headÇode");

1363 ++
	gwhîe
;

1366 i‡(
	gwhîe
 =
œ°
)

1367  
íd
();

1368 i‡(
	gmy_sﬁi°
.
gë_ôî©‹
(
whîe
Ë=
ô
)

1369  
my_sﬁi°
.
îa£_node
(
¥evious
, 
ô
);

1372 
	g¥evious
 = 
whîe
;

1373 ++
	gwhîe
;

1379 
∑úii_t
 
öã∫Æ_equÆ_ønge
(c⁄° 
key_ty≥
& 
key
)

1381 
sokey_t
 
	g‹dî_key
 = (sokey_tË
my_hash_com∑ª
(
key
);

1382 
size_ty≥
 
	gbuckë
 = 
‹dî_key
 % 
my_numbî_of_buckës
;

1385 i‡(!
is_öôülized
(
buckë
))

1386 
öô_buckë
(
buckë
);

1388 
	g‹dî_key
 = 
•lô_‹dî_key_ªguœr
(
‹dî_key
);

1389 
øw_ôî©‹
 
	gíd_ô
 = 
my_sﬁi°
.
øw_íd
();

1391 
øw_ôî©‹
 
	gô
 = 
gë_buckë
(
buckë
); ià!
íd_ô
; ++it)

1393 i‡(
	gsﬁi°_t
::
gë_‹dî_key
(
ô
Ë> 
‹dî_key
)

1396  
∑úii_t
(
íd
(),Énd());

1398 i‡(
	gsﬁi°_t
::
gë_‹dî_key
(
ô
Ë=
‹dî_key
 && !
my_hash_com∑ª
(
gë_key
(*ô), 
key
))

1400 
ôî©‹
 
	gfú°
 = 
my_sﬁi°
.
gë_ôî©‹
(
ô
);

1401 
ôî©‹
 
	gœ°
 = 
fú°
;

1402 dÿ++
	gœ°
;  
	gÆlow_mu…im≠pög
 &&Üa° !
íd
(Ë&& !
my_hash_com∑ª
(
gë_key
(*
œ°
), 
key
) );

1403  
∑úii_t
(
fú°
, 
œ°
);

1407  
∑úii_t
(
íd
(),Énd());

1411 
öô_buckë
(
size_ty≥
 
buckë
)

1414 
__TBB_ASSERT
–
buckë
 != 0, "The first bucket mustálways be initialized");

1416 
size_ty≥
 
	g∑ª¡_buckë
 = 
gë_∑ª¡
(
buckë
);

1419 i‡(!
is_öôülized
(
∑ª¡_buckë
))

1420 
öô_buckë
(
∑ª¡_buckë
);

1422 
øw_ôî©‹
 
	g∑ª¡
 = 
gë_buckë
(
∑ª¡_buckë
);

1425 
øw_ôî©‹
 
	gdummy_node
 = 
my_sﬁi°
.
ö£π_dummy
(
∑ª¡
, 
•lô_‹dî_key_dummy
(
buckë
));

1426 
£t_buckë
(
buckë
, 
dummy_node
);

1429 
adju°_èbÀ_size
(
size_ty≥
 
tŸÆ_ñemíts
, size_ty≥ 
cuºít_size
)

1432 i‡–((Ë
	gtŸÆ_ñemíts
 / (Ë
	gcuºít_size
Ë> 
	gmy_maximum_buckë_size
 )

1435 
	gmy_numbî_of_buckës
.
com∑ª_™d_sw≠
(2u*
cuºít_size
, current_size);

1441 
size_ty≥
 
gë_∑ª¡
(size_ty≥ 
buckë
) const

1444 
size_ty≥
 
	gmsb
 = 
__TBB_Log2
((
uöçå_t
)
buckë
);

1445  
	gbuckë
 & ~(
size_ty≥
(1Ë<< 
	gmsb
);

1451 
size_ty≥
 
£gmít_ödex_of
–size_ty≥ 
ödex
 ) {

1452  
size_ty≥
–
__TBB_Log2
–
uöçå_t
(
ödex
|1) ) );

1456 
size_ty≥
 
£gmít_ba£
–size_ty≥ 
k
 ) {

1457  (
size_ty≥
(1)<<
	gk
 & ~size_type(1));

1461 
size_ty≥
 
£gmít_size
–size_ty≥ 
k
 ) {

1462  
	gk
? 
size_ty≥
(1)<<k : 2;

1465 
øw_ôî©‹
 
gë_buckë
(
size_ty≥
 
buckë
) const {

1466 
size_ty≥
 
	g£gmít
 = 
£gmít_ödex_of
(
buckë
);

1467 
	gbuckë
 -
£gmít_ba£
(
£gmít
);

1468 
__TBB_ASSERT
–
my_buckës
[
£gmít
], "bucket must be inánállocated segment" );

1469  
	gmy_buckës
[
£gmít
][
buckë
];

1472 
£t_buckë
(
size_ty≥
 
buckë
, 
øw_ôî©‹
 
dummy_hód
) {

1473 
size_ty≥
 
	g£gmít
 = 
£gmít_ödex_of
(
buckë
);

1474 
	gbuckë
 -
£gmít_ba£
(
£gmít
);

1476 i‡(
	gmy_buckës
[
£gmít
] =
NULL
) {

1477 
size_ty≥
 
sz
 = 
£gmít_size
(
£gmít
);

1478 
øw_ôî©‹
 * 
	g√w_£gmít
 = 
my_Æloˇt‹
.
Æloˇã
(
sz
);

1479 
	g°d
::
mem£t
(
√w_£gmít
, 0, 
sz
*(
øw_ôî©‹
));

1481 i‡(
	gmy_buckës
[
£gmít
].
com∑ª_™d_sw≠
–
√w_£gmít
, 
NULL
) != NULL)

1482 
my_Æloˇt‹
.
dóŒoˇã
(
√w_£gmít
, 
sz
);

1485 
	gmy_buckës
[
£gmít
][
buckë
] = 
dummy_hód
;

1488 
boﬁ
 
is_öôülized
(
size_ty≥
 
buckë
) const {

1489 
size_ty≥
 
	g£gmít
 = 
£gmít_ödex_of
(
buckë
);

1490 
	gbuckë
 -
£gmít_ba£
(
£gmít
);

1492 i‡(
	gmy_buckës
[
£gmít
] =
NULL
)

1493  
Ál£
;

1495 
øw_ôî©‹
 
	gô
 = 
my_buckës
[
£gmít
][
buckë
];

1496  (
	gô
.
gë_node_±r
(Ë!
NULL
);

1502 
sokey_t
 
•lô_‹dî_key_ªguœr
(sokey_à
‹dî_key
) const {

1503  
__TBB_Revî£Bôs
(
‹dî_key
) | 0x1;

1507 
sokey_t
 
•lô_‹dî_key_dummy
(sokey_à
‹dî_key
) const {

1508  
__TBB_Revî£Bôs
(
‹dî_key
Ë& ~
sokey_t
(0x1);

1512 
	g©omic
<
	gsize_ty≥
> 
	gmy_numbî_of_buckës
;

1513 
sﬁi°_t
 
	gmy_sﬁi°
;

1514 
ty≥«me
 
	gÆloˇt‹_ty≥
::
ãm∂©e
 
ªböd
<
øw_ôî©‹
>::
Ÿhî
 
my_Æloˇt‹
;

1515 
	gmy_maximum_buckë_size
;

1516 
	g©omic
<
	gøw_ôî©‹
*> 
	gmy_buckës
[
poöãrs_≥r_èbÀ
];

1518 #i‡
deföed
(
_MSC_VER
Ë&& !deföed(
__INTEL_COMPILER
)

1519 #¥agm®
w¨nög
(
p›
)

1523 c⁄° 
size_t
 
	ghash_mu…ùlõr
 = 
tbb
::
öã∫Æ
::
£À˘_size_t_c⁄°™t
<2654435769U, 11400714819323198485ULL>::
vÆue
;

1527 
	gãm∂©e
<
ty≥«me
 
	gT
>

1528 
ölöe
 
size_t
 
tbb_hashî
–c⁄° 
T
& 
t
 ) {

1529  
	g°©ic_ˇ°
<
	gsize_t
>–
	gt
 ) * 
	göã∫Æ
::
hash_mu…ùlõr
;

1531 
	gãm∂©e
<
ty≥«me
 
	gP
>

1532 
ölöe
 
size_t
 
tbb_hashî
–
P
* 
±r
 ) {

1533 
size_t
 c⁄° 
	gh
 = 
ªöãΩªt_ˇ°
<size_t>–
±r
 );

1534  (
	gh
 >> 3) ^ h;

1536 
	gãm∂©e
<
ty≥«me
 
	gE
,Åy≥«mê
	gS
,Åy≥«mê
	gA
>

1537 
ölöe
 
size_t
 
tbb_hashî
–c⁄° 
°d
::
basic_°rög
<
E
,
S
,
A
>& 
s
 ) {

1538 
size_t
 
	gh
 = 0;

1539  c⁄° 
E
* 
	gc
 = 
s
.
c_°r
(); *c; ++c )

1540 
	gh
 = 
°©ic_ˇ°
<
size_t
>(*
c
Ë^ (
h
 * 
öã∫Æ
::
hash_mu…ùlõr
);

1541  
	gh
;

1543 
	gãm∂©e
<
ty≥«me
 
	gF
,Åy≥«mê
	gS
>

1544 
ölöe
 
size_t
 
tbb_hashî
–c⁄° 
°d
::
∑ú
<
F
,
S
>& 
p
 ) {

1545  
tbb_hashî
(
p
.
fú°
Ë^Åbb_hashî’.
£c⁄d
);

1548 
usög
 
	göãrÁ˚5
::
tbb_hashî
;

1552 
	gãm∂©e
<
ty≥«me
 
	gKey
>

1553 ˛as†
	ctbb_hash


1555 
	gpublic
:

1556 
tbb_hash
() {}

1558 
size_t
 
›î©‹
()(c⁄° 
Key
& 
key
) const

1560  
tbb_hashî
(
key
);

	@viper/concurrentqueue-src/benchmarks/tbb/internal/_flow_graph_impl.h

21 #i‚de‡
__TBB__Êow_gøph_im∂_H


22 
	#__TBB__Êow_gøph_im∂_H


	)

24 #i‚de‡
__TBB_Êow_gøph_H


25 #îr‹ 
Do
 
nŸ
 #ö˛udê
this
 
öã∫Æ
 
fûe
 
dúe˘ly
; 
u£
 
public
 
TBB
 
hódîs
 
ö°ód
.

28 
«me•a˚
 
	göã∫Æ
 {

30 
«me•a˚
 
	ggøph_pﬁicy_«me•a˚
 {

31 
	egøph_buf„r_pﬁicy
 { 
	gªje˘ög
, 
	gª£rvög
, 
	gqueueög
, 
	gèg_m©chög
 };

37 
	gãm∂©e
< 
ty≥«me
 
	gOuçut
 >

38 ˛as†
	csour˚_body
 : 
tbb
::
öã∫Æ
::
no_assign
 {

39 
public
:

40 
vútuÆ
 ~
sour˚_body
() {}

41 
vútuÆ
 
boﬁ
 
›î©‹
()(
Ouçut
 &
ouçut
) = 0;

42 
vútuÆ
 
sour˚_body
* 
˛⁄e
() = 0;

43 #i‡
TBB_PREVIEW_FLOW_GRAPH_FEATURES


44 
vútuÆ
 
ª£t_body
() = 0;

49 
	gãm∂©e
< 
ty≥«me
 
	gOuçut
,Åy≥«mê
	gBody
>

50 
˛ass
 
	gsour˚_body_Àaf
 : 
public
 
sour˚_body
<
Ouçut
> {

51 
public
:

52 
sour˚_body_Àaf
–c⁄° 
Body
 &
_body
 ) : 
body
(_body), 
öô_body
(_body) { }

53  
boﬁ
 
›î©‹
()(
	gOuçut
 &
	gouçut
Ë{  
body
–
ouçut
 ); }

54  
sour˚_body_Àaf
* 
˛⁄e
() {

55  
√w
 
	gsour˚_body_Àaf
< 
	gOuçut
, 
	gBody
 >(
	göô_body
);

57 #i‡
TBB_PREVIEW_FLOW_GRAPH_FEATURES


58  
ª£t_body
() {

59 
	gbody
 = 
öô_body
;

62 
Body
 
gë_body
(Ë{  
	gbody
; }

63 
	g¥iv©e
:

64 
Body
 
body
;

65 
Body
 
	göô_body
;

69 
	gãm∂©e
< 
ty≥«me
 
	gI≈ut
,Åy≥«mê
	gOuçut
 >

70 ˛as†
	cfun˘i⁄_body
 : 
tbb
::
öã∫Æ
::
no_assign
 {

71 
public
:

72 
vútuÆ
 ~
fun˘i⁄_body
() {}

73 
vútuÆ
 
Ouçut
 
›î©‹
()(c⁄° 
I≈ut
 &
öput
) = 0;

74 
vútuÆ
 
fun˘i⁄_body
* 
˛⁄e
() = 0;

75 #i‡
TBB_PREVIEW_FLOW_GRAPH_FEATURES


76 
vútuÆ
 
ª£t_body
() = 0;

81 
	gãm∂©e
 <
ty≥«me
 
	gI≈ut
,Åy≥«mê
	gOuçut
,Åy≥«mê
	gB
>

82 
˛ass
 
	gfun˘i⁄_body_Àaf
 : 
public
 
fun˘i⁄_body
< 
I≈ut
, 
	gOuçut
 > {

83 
	gpublic
:

84 
fun˘i⁄_body_Àaf
–c⁄° 
B
 &
_body
 ) : 
body
(_body), 
öô_body
(_body) { }

85 
Ouçut
 
›î©‹
()(c⁄° 
	gI≈ut
 &
	gi
Ë{  
body
(
i
); }

86 #i‡
TBB_PREVIEW_FLOW_GRAPH_FEATURES


87  
ª£t_body
() {

88 
	gbody
 = 
öô_body
;

91 
B
 
gë_body
(Ë{  
	gbody
; }

92  
fun˘i⁄_body_Àaf
* 
˛⁄e
() {

93  
√w
 
	gfun˘i⁄_body_Àaf
< 
	gI≈ut
, 
	gOuçut
, 
	gB
 >(
	göô_body
);

95 
	g¥iv©e
:

96 
B
 
body
;

97 
B
 
	göô_body
;

101 
	gãm∂©e
 <
ty≥«me
 
	gB
>

102 
˛ass
 
	gfun˘i⁄_body_Àaf
< 
	gc⁄töue_msg
, c⁄töue_msg, 
	gB
> : 
public
 
fun˘i⁄_body
< 
c⁄töue_msg
, continue_msg > {

103 
	gpublic
:

104 
fun˘i⁄_body_Àaf
–c⁄° 
B
 &
_body
 ) : 
body
(_body), 
öô_body
(_body) { }

105 
c⁄töue_msg
 
›î©‹
()–c⁄° 
	gc⁄töue_msg
 &
	gi
 ) {

106 
body
(
i
);

107  
	gi
;

109 #i‡
TBB_PREVIEW_FLOW_GRAPH_FEATURES


110  
ª£t_body
() {

111 
	gbody
 = 
öô_body
;

114 
B
 
gë_body
(Ë{  
	gbody
; }

115  
fun˘i⁄_body_Àaf
* 
˛⁄e
() {

116  
√w
 
	gfun˘i⁄_body_Àaf
< 
	gc⁄töue_msg
, c⁄töue_msg, 
	gB
 >(
	göô_body
);

118 
	g¥iv©e
:

119 
B
 
body
;

120 
B
 
	göô_body
;

124 
	gãm∂©e
 <
ty≥«me
 
	gI≈ut
,Åy≥«mê
	gB
>

125 
˛ass
 
	gfun˘i⁄_body_Àaf
< 
	gI≈ut
, 
	gc⁄töue_msg
, 
	gB
> : 
public
 
fun˘i⁄_body
< 
I≈ut
, continue_msg > {

126 
	gpublic
:

127 
fun˘i⁄_body_Àaf
–c⁄° 
B
 &
_body
 ) : 
body
(_body), 
öô_body
(_body) { }

128 
c⁄töue_msg
 
›î©‹
()(c⁄° 
	gI≈ut
 &
	gi
) {

129 
body
(
i
);

130  
c⁄töue_msg
();

132 #i‡
TBB_PREVIEW_FLOW_GRAPH_FEATURES


133  
ª£t_body
() {

134 
	gbody
 = 
öô_body
;

137 
B
 
gë_body
(Ë{  
	gbody
; }

138  
fun˘i⁄_body_Àaf
* 
˛⁄e
() {

139  
√w
 
	gfun˘i⁄_body_Àaf
< 
	gI≈ut
, 
	gc⁄töue_msg
, 
	gB
 >(
	göô_body
);

141 
	g¥iv©e
:

142 
B
 
body
;

143 
B
 
	göô_body
;

147 
	gãm∂©e
 <
ty≥«me
 
	gOuçut
,Åy≥«mê
	gB
>

148 
˛ass
 
	gfun˘i⁄_body_Àaf
< 
	gc⁄töue_msg
, 
	gOuçut
, 
	gB
 > : 
public
 
fun˘i⁄_body
< 
c⁄töue_msg
, Output > {

149 
	gpublic
:

150 
fun˘i⁄_body_Àaf
–c⁄° 
B
 &
_body
 ) : 
body
(_body), 
öô_body
(_body) { }

151 
Ouçut
 
›î©‹
()(c⁄° 
	gc⁄töue_msg
 &
	gi
) {

152  
body
(
i
);

154 #i‡
TBB_PREVIEW_FLOW_GRAPH_FEATURES


155  
ª£t_body
() {

156 
	gbody
 = 
öô_body
;

159 
B
 
gë_body
(Ë{  
	gbody
; }

160  
fun˘i⁄_body_Àaf
* 
˛⁄e
() {

161  
√w
 
	gfun˘i⁄_body_Àaf
< 
	gc⁄töue_msg
, 
	gOuçut
, 
	gB
 >(
	göô_body
);

163 
	g¥iv©e
:

164 
B
 
body
;

165 
B
 
	göô_body
;

169 
	gãm∂©e
<
ty≥«me
 
	gI≈ut
,Åy≥«mê
	gOuçutSë
>

170 ˛as†
	cmu…ifun˘i⁄_body
 : 
tbb
::
öã∫Æ
::
no_assign
 {

171 
public
:

172 
vútuÆ
 ~
mu…ifun˘i⁄_body
 () {}

173 
vútuÆ
 
›î©‹
()(c⁄° 
I≈ut
 & , 
	gOuçutSë
 & ) = 0;

174 
vútuÆ
 
mu…ifun˘i⁄_body
* 
˛⁄e
() = 0;

175 #i‡
TBB_PREVIEW_FLOW_GRAPH_FEATURES


176 
vútuÆ
 
ª£t_body
() = 0;

181 
	gãm∂©e
<
ty≥«me
 
	gI≈ut
,Åy≥«mê
	gOuçutSë
,Åy≥«mê
	gB
>

182 
˛ass
 
	gmu…ifun˘i⁄_body_Àaf
 : 
public
 
mu…ifun˘i⁄_body
<
I≈ut
, 
	gOuçutSë
> {

183 
	gpublic
:

184 
mu…ifun˘i⁄_body_Àaf
(c⁄° 
B
 &
_body
Ë: 
body
(_body), 
öô_body
(_body) { }

185 
›î©‹
()(c⁄° 
	gI≈ut
 &
	göput
, 
	gOuçutSë
 &
	go£t
) {

186 
body
(
öput
, 
o£t
);

188 #i‡
TBB_PREVIEW_FLOW_GRAPH_FEATURES


189  
ª£t_body
() {

190 
	gbody
 = 
öô_body
;

193 
B
 
gë_body
(Ë{  
	gbody
; }

194  
mu…ifun˘i⁄_body_Àaf
* 
˛⁄e
() {

195  
√w
 
	gmu…ifun˘i⁄_body_Àaf
<
	gI≈ut
, 
	gOuçutSë
,
	gB
>(
	göô_body
);

197 
	g¥iv©e
:

198 
B
 
body
;

199 
B
 
	göô_body
;

207 
	gãm∂©e
< 
ty≥«me
 
	gNodeTy≥
 >

208 ˛as†
	cf‹w¨d_èsk_by∑ss
 : 
public
 
èsk
 {

210 
NodeTy≥
 &
my_node
;

212 
	gpublic
:

214 
f‹w¨d_èsk_by∑ss
–
NodeTy≥
 &
n
 ) : 
my_node
(n) {}

216 
èsk
 *
execuã
() {

217 
èsk
 * 
√w_èsk
 = 
my_node
.
f‹w¨d_èsk
();

218 i‡(
	g√w_èsk
 =
SUCCESSFULLY_ENQUEUED
Ë
√w_èsk
 = 
NULL
;

219  
	g√w_èsk
;

225 
	gãm∂©e
< 
ty≥«me
 
	gNodeTy≥
,Åy≥«mê
	gI≈ut
 >

226 ˛as†
	c≠∂y_body_èsk_by∑ss
 : 
public
 
èsk
 {

228 
NodeTy≥
 &
my_node
;

229 
I≈ut
 
	gmy_öput
;

231 
	gpublic
:

233 
≠∂y_body_èsk_by∑ss
–
NodeTy≥
 &
n
, c⁄° 
I≈ut
 &
i
 ) : 
my_node
“), 
my_öput
(i) {}

235 
èsk
 *
execuã
() {

236 
èsk
 * 
	g√xt_èsk
 = 
my_node
.
≠∂y_body_by∑ss
–
my_öput
 );

237 if(
	g√xt_èsk
 =
SUCCESSFULLY_ENQUEUED
Ë
√xt_èsk
 = 
NULL
;

238  
	g√xt_èsk
;

243 
	gãm∂©e
< 
ty≥«me
 
	gNodeTy≥
 >

244 ˛as†
	csour˚_èsk_by∑ss
 : 
public
 
èsk
 {

246 
NodeTy≥
 &
my_node
;

248 
	gpublic
:

250 
sour˚_èsk_by∑ss
–
NodeTy≥
 &
n
 ) : 
my_node
(n) {}

252 
èsk
 *
execuã
() {

253 
èsk
 *
√w_èsk
 = 
my_node
.
≠∂y_body_by∑ss
( );

254 if(
	g√w_èsk
 =
SUCCESSFULLY_ENQUEUED
Ë 
NULL
;

255  
	g√w_èsk
;

262 
	gãm∂©e
< 
ty≥«me
 
	gI≈ut
,Åy≥«mê
	gOuçut
 >

263 
	sem±y_body
 {

264 
Ouçut
 
›î©‹
()–c⁄° 
	gI≈ut
 & ) const {  Output(); }

268 
	gãm∂©e
< 
ty≥«me
 
	gT
,Åy≥«mê
	gM
=
•ö_muãx
 >

269 ˛as†
	cnode_ˇche
 {

270 
public
:

272 
size_t
 
	tsize_ty≥
;

274 
boﬁ
 
em±y
() {

275 
ty≥«me
 
	gmy_muãx_ty≥
::
sc›ed_lock
 
lock
–
my_muãx
 );

276  
öã∫Æ_em±y
();

279 
add
–
T
 &
n
 ) {

280 
ty≥«me
 
	gmy_muãx_ty≥
::
sc›ed_lock
 
lock
–
my_muãx
 );

281 
öã∫Æ_push
(
n
);

284 
ªmove
–
T
 &
n
 ) {

285 
ty≥«me
 
	gmy_muãx_ty≥
::
sc›ed_lock
 
lock
–
my_muãx
 );

286  
size_t
 
	gi
 = 
öã∫Æ_size
(); i != 0; --i ) {

287 
	gT
 &
	gs
 = 
öã∫Æ_p›
();

288 i‡–&
	gs
 =&
n
 ) ;

289 
öã∫Æ_push
(
s
);

293 #i‡
TBB_PREVIEW_FLOW_GRAPH_FEATURES


294 
	g°d
::
	tve˘‹
<
	tT
 *> 
	t¥ede˚ss‹_ve˘‹_ty≥
;

295 
öã∫Æ_add_buût_¥ede˚ss‹
–
T
 &
n
 ) {

296 
ty≥«me
 
	gmy_muãx_ty≥
::
sc›ed_lock
 
lock
–
my_muãx
 );

297 
	gmy_buût_¥ede˚ss‹s
.
add_edge
(
n
);

300 
öã∫Æ_dñëe_buût_¥ede˚ss‹
–
T
 &
n
 ) {

301 
ty≥«me
 
	gmy_muãx_ty≥
::
sc›ed_lock
 
lock
–
my_muãx
 );

302 
	gmy_buût_¥ede˚ss‹s
.
dñëe_edge
(
n
);

305 
c›y_¥ede˚ss‹s
–
¥ede˚ss‹_ve˘‹_ty≥
 &
v
) {

306 
ty≥«me
 
	gmy_muãx_ty≥
::
sc›ed_lock
 
lock
–
my_muãx
 );

307 
	gmy_buût_¥ede˚ss‹s
.
c›y_edges
(
v
);

310 
size_t
 
¥ede˚ss‹_cou¡
() {

311 
ty≥«me
 
	gmy_muãx_ty≥
::
sc›ed_lock
 
lock
(
my_muãx
);

312  (
	gsize_t
)(
	gmy_buût_¥ede˚ss‹s
.
edge_cou¡
());

316 
	g¥Ÿe˘ed
:

318 
M
 
	tmy_muãx_ty≥
;

319 
my_muãx_ty≥
 
	gmy_muãx
;

320 
	g°d
::
queue
< 
T
 * > 
my_q
;

321 #i‡
TBB_PREVIEW_FLOW_GRAPH_FEATURES


322 
	gedge_c⁄èöî
<
	gT
> 
	gmy_buût_¥ede˚ss‹s
;

326 
ölöe
 
boﬁ
 
öã∫Æ_em±y
( ) {

327  
	gmy_q
.
em±y
();

331 
ölöe
 
size_ty≥
 
öã∫Æ_size
( ) {

332  
	gmy_q
.
size
();

336 
ölöe
 
öã∫Æ_push
–
T
 &
n
 ) {

337 
	gmy_q
.
push
(&
n
);

341 
ölöe
 
	gT
 &
öã∫Æ_p›
() {

342 
T
 *
	gv
 = 
my_q
.
‰⁄t
();

343 
	gmy_q
.
p›
();

344  *
	gv
;

350 
	gãm∂©e
< 
ty≥«me
 
	gT
,Åy≥«mê
	gM
=
•ö_muãx
 >

351 
˛ass
 
¥ede˚ss‹_ˇche
 : 
public
 
node_ˇche
< 
£ndî
<
T
>, 
	gM
 > {

352 
	gpublic
:

353 
M
 
	tmy_muãx_ty≥
;

354 
T
 
	touçut_ty≥
;

355 
	g£ndî
<
	touçut_ty≥
> 
	t¥ede˚ss‹_ty≥
;

356 
	gª˚ivî
<
	touçut_ty≥
> 
	tsuc˚ss‹_ty≥
;

358 
¥ede˚ss‹_ˇche
–Ë: 
my_ow√r
–
NULL
 ) { }

360 
£t_ow√r
–
suc˚ss‹_ty≥
 *
ow√r
 ) { 
my_ow√r
 = owner; }

362 
boﬁ
 
gë_ôem
–
ouçut_ty≥
 &
v
 ) {

364 
boﬁ
 
	gmsg
 = 
Ál£
;

367 
¥ede˚ss‹_ty≥
 *
	g§c
;

369 
ty≥«me
 
	gmy_muãx_ty≥
::
sc›ed_lock
 
lock
(
this
->
my_muãx
);

370 i‡–
	gthis
->
öã∫Æ_em±y
() ) {

373 
	g§c
 = &
this
->
öã∫Æ_p›
();

377 
	gmsg
 = 
§c
->
åy_gë
–
v
 );

379 i‡(
	gmsg
 =
Ál£
) {

381 i‡–
my_ow√r
)

382 
§c
->
ªgi°î_suc˚ss‹
–*
my_ow√r
 );

385 
	gthis
->
add
(*
§c
);

387 }  
	gmsg
 =
Ál£
 );

388  
	gmsg
;

391 
ª£t
–
__TBB_PFG_RESET_ARG
(
ª£t_Êags
 
f
)) {

392 if(
	gmy_ow√r
) {

394 
¥ede˚ss‹_ty≥
 *
	g§c
;

396 if(
	gthis
->
öã∫Æ_em±y
()) ;

397 
	g§c
 = &
this
->
öã∫Æ_p›
();

399 
	g§c
->
ªgi°î_suc˚ss‹
–*
my_ow√r
);

402 #i‡
TBB_PREVIEW_FLOW_GRAPH_FEATURES


403 i‡(
	gf
&
	grf_exåa˘
 && 
	gmy_ow√r
)

404 
	gmy_buût_¥ede˚ss‹s
.
ª˚ivî_exåa˘
(*
my_ow√r
);

405 
__TBB_ASSERT
(!(
f
&
rf_exåa˘
Ë|| 
this
->
öã∫Æ_em±y
(), "predecessor cacheÇotÉmpty");

409 
	g¥Ÿe˘ed
:

411 #i‡
TBB_PREVIEW_FLOW_GRAPH_FEATURES


412 
usög
 
node_ˇche
< 
£ndî
<
T
>, 
	gM
 >::
my_buût_¥ede˚ss‹s
;

414 
suc˚ss‹_ty≥
 *
	gmy_ow√r
;

418 
	gãm∂©e
< 
ty≥«me
 
	gT
,Åy≥«mê
	gM
=
•ö_muãx
 >

419 
˛ass
 
ª£rvabÀ_¥ede˚ss‹_ˇche
 : 
public
 
¥ede˚ss‹_ˇche
< 
T
, 
	gM
 > {

420 
	gpublic
:

421 
M
 
	tmy_muãx_ty≥
;

422 
T
 
	touçut_ty≥
;

423 
	g£ndî
<
	tT
> 
	t¥ede˚ss‹_ty≥
;

424 
	gª˚ivî
<
	tT
> 
	tsuc˚ss‹_ty≥
;

426 
ª£rvabÀ_¥ede˚ss‹_ˇche
–Ë: 
ª£rved_§c
(
NULL
) { }

428 
boﬁ


429 
åy_ª£rve
–
ouçut_ty≥
 &
v
 ) {

430 
boﬁ
 
msg
 = 
Ál£
;

434 
ty≥«me
 
	gmy_muãx_ty≥
::
sc›ed_lock
 
lock
(
this
->
my_muãx
);

435 i‡–
	gª£rved_§c
 || 
	gthis
->
öã∫Æ_em±y
() )

436  
	gÁl£
;

438 
	gª£rved_§c
 = &
this
->
öã∫Æ_p›
();

442 
	gmsg
 = 
ª£rved_§c
->
åy_ª£rve
–
v
 );

444 i‡(
	gmsg
 =
Ál£
) {

445 
ty≥«me
 
my_muãx_ty≥
::
sc›ed_lock
 
lock
(
this
->
my_muãx
);

447 
	gª£rved_§c
->
ªgi°î_suc˚ss‹
–*
this
->
my_ow√r
 );

448 
	gª£rved_§c
 = 
NULL
;

451 
	gthis
->
add
–*
ª£rved_§c
 );

453 }  
	gmsg
 =
Ál£
 );

455  
	gmsg
;

458 
boﬁ


459 
åy_ªÀa£
( ) {

460 
	gª£rved_§c
->
åy_ªÀa£
( );

461 
	gª£rved_§c
 = 
NULL
;

462  
	gåue
;

465 
boﬁ


466 
åy_c⁄sume
( ) {

467 
	gª£rved_§c
->
åy_c⁄sume
( );

468 
	gª£rved_§c
 = 
NULL
;

469  
	gåue
;

472 
ª£t
–
__TBB_PFG_RESET_ARG
(
ª£t_Êags
 
f
)) {

473 
	gª£rved_§c
 = 
NULL
;

474 
	g¥ede˚ss‹_ˇche
<
	gT
,
	gM
>::
ª£t
(
__TBB_PFG_RESET_ARG
(
f
));

477 
	g¥iv©e
:

478 
¥ede˚ss‹_ty≥
 *
ª£rved_§c
;

483 
	gãm∂©e
<
ty≥«me
 
	gT
,Åy≥«mê
	gM
=
•ö_rw_muãx
 >

484 ˛as†
	csuc˚ss‹_ˇche
 : 
tbb
::
öã∫Æ
::
no_c›y
 {

485 
¥Ÿe˘ed
:

487 
M
 
	tmy_muãx_ty≥
;

488 
my_muãx_ty≥
 
	gmy_muãx
;

490 
	gª˚ivî
<
	tT
> *
	tpoöãr_ty≥
;

491 
	g°d
::
	tli°
< 
	tpoöãr_ty≥
 > 
	tmy_suc˚ss‹s_ty≥
;

492 #i‡
TBB_PREVIEW_FLOW_GRAPH_FEATURES


493 
	gedge_c⁄èöî
<
	gª˚ivî
<
	gT
> > 
	gmy_buût_suc˚ss‹s
;

495 
my_suc˚ss‹s_ty≥
 
	gmy_suc˚ss‹s
;

497 
	g£ndî
<
	gT
> *
	gmy_ow√r
;

499 
	gpublic
:

500 #i‡
TBB_PREVIEW_FLOW_GRAPH_FEATURES


501 
°d
::
	tve˘‹
<
	tpoöãr_ty≥
> 
	tsuc˚ss‹_ve˘‹_ty≥
;

502 
öã∫Æ_add_buût_suc˚ss‹
–
ª˚ivî
<
T
> &
r
) {

503 
ty≥«me
 
	gmy_muãx_ty≥
::
sc›ed_lock
 
l
(
my_muãx
, 
åue
);

504 
	gmy_buût_suc˚ss‹s
.
add_edge
–
r
 );

507 
öã∫Æ_dñëe_buût_suc˚ss‹
–
ª˚ivî
<
T
> &
r
) {

508 
ty≥«me
 
	gmy_muãx_ty≥
::
sc›ed_lock
 
l
(
my_muãx
, 
åue
);

509 
	gmy_buût_suc˚ss‹s
.
dñëe_edge
(
r
);

512 
c›y_suc˚ss‹s
–
suc˚ss‹_ve˘‹_ty≥
 &
v
) {

513 
ty≥«me
 
	gmy_muãx_ty≥
::
sc›ed_lock
 
l
(
my_muãx
, 
Ál£
);

514 
	gmy_buût_suc˚ss‹s
.
c›y_edges
(
v
);

517 
size_t
 
suc˚ss‹_cou¡
() {

518 
ty≥«me
 
	gmy_muãx_ty≥
::
sc›ed_lock
 
l
(
my_muãx
,
Ál£
);

519  
	gmy_buût_suc˚ss‹s
.
edge_cou¡
();

522 
ª£t
–
__TBB_PFG_RESET_ARG
(
ª£t_Êags
 
f
)) {

523 i‡(
	gf
&
	grf_exåa˘
 && 
	gmy_ow√r
)

524 
	gmy_buût_suc˚ss‹s
.
£ndî_exåa˘
(*
my_ow√r
);

528 
suc˚ss‹_ˇche
–Ë: 
my_ow√r
(
NULL
) {}

530 
£t_ow√r
–
£ndî
<
T
> *
ow√r
 ) { 
my_ow√r
 = owner; }

532 
	gvútuÆ
 ~
suc˚ss‹_ˇche
() {}

534 
ªgi°î_suc˚ss‹
–
ª˚ivî
<
T
> &
r
 ) {

535 
ty≥«me
 
	gmy_muãx_ty≥
::
sc›ed_lock
 
l
(
my_muãx
, 
åue
);

536 
	gmy_suc˚ss‹s
.
push_back
–&
r
 );

539 
ªmove_suc˚ss‹
–
ª˚ivî
<
T
> &
r
 ) {

540 
ty≥«me
 
	gmy_muãx_ty≥
::
sc›ed_lock
 
l
(
my_muãx
, 
åue
);

541  
ty≥«me
 
	gmy_suc˚ss‹s_ty≥
::
ôî©‹
 
i
 = 
my_suc˚ss‹s
.
begö
();

542 
	gi
 !
my_suc˚ss‹s
.
íd
(); ++i ) {

543 i‡–*
	gi
 =& 
r
 ) {

544 
my_suc˚ss‹s
.
îa£
(
i
);

550 
boﬁ
 
em±y
() {

551 
ty≥«me
 
	gmy_muãx_ty≥
::
sc›ed_lock
 
l
(
my_muãx
, 
Ál£
);

552  
	gmy_suc˚ss‹s
.
em±y
();

555 
˛ór
() {

556 
	gmy_suc˚ss‹s
.
˛ór
();

557 #i‡
TBB_PREVIEW_FLOW_GRAPH_FEATURES


558 
	gmy_buût_suc˚ss‹s
.
˛ór
();

562 
vútuÆ
 
èsk
 * 
åy_put_èsk
–c⁄° 
T
 &
t
 ) = 0;

566 
	gãm∂©e
<>

567 
˛ass
 
	gsuc˚ss‹_ˇche
< 
	gc⁄töue_msg
 > : 
tbb
::
öã∫Æ
::
no_c›y
 {

568 
¥Ÿe˘ed
:

570 
•ö_rw_muãx
 
	tmy_muãx_ty≥
;

571 
my_muãx_ty≥
 
	gmy_muãx
;

573 
	gª˚ivî
<
	tc⁄töue_msg
> *
	tpoöãr_ty≥
;

574 
	g°d
::
	tli°
< 
	tpoöãr_ty≥
 > 
	tmy_suc˚ss‹s_ty≥
;

575 
my_suc˚ss‹s_ty≥
 
	gmy_suc˚ss‹s
;

576 #i‡
TBB_PREVIEW_FLOW_GRAPH_FEATURES


577 
	gedge_c⁄èöî
<
	gª˚ivî
<
	gc⁄töue_msg
> > 
	gmy_buût_suc˚ss‹s
;

580 
	g£ndî
<
	gc⁄töue_msg
> *
	gmy_ow√r
;

582 
	gpublic
:

584 #i‡
TBB_PREVIEW_FLOW_GRAPH_FEATURES


585 
°d
::
	tve˘‹
<
	tpoöãr_ty≥
> 
	tsuc˚ss‹_ve˘‹_ty≥
;

586 
öã∫Æ_add_buût_suc˚ss‹
–
ª˚ivî
<
c⁄töue_msg
> &
r
) {

587 
	gmy_muãx_ty≥
::
sc›ed_lock
 
l
(
my_muãx
, 
åue
);

588 
	gmy_buût_suc˚ss‹s
.
add_edge
–
r
 );

591 
öã∫Æ_dñëe_buût_suc˚ss‹
–
ª˚ivî
<
c⁄töue_msg
> &
r
) {

592 
	gmy_muãx_ty≥
::
sc›ed_lock
 
l
(
my_muãx
, 
åue
);

593 
	gmy_buût_suc˚ss‹s
.
dñëe_edge
(
r
);

596 
c›y_suc˚ss‹s
–
suc˚ss‹_ve˘‹_ty≥
 &
v
) {

597 
	gmy_muãx_ty≥
::
sc›ed_lock
 
l
(
my_muãx
, 
Ál£
);

598 
	gmy_buût_suc˚ss‹s
.
c›y_edges
(
v
);

601 
size_t
 
suc˚ss‹_cou¡
() {

602 
	gmy_muãx_ty≥
::
sc›ed_lock
 
l
(
my_muãx
,
Ál£
);

603  
	gmy_buût_suc˚ss‹s
.
edge_cou¡
();

606 
ª£t
–
__TBB_PFG_RESET_ARG
(
ª£t_Êags
 
f
)) {

607 i‡(
	gf
&
	grf_exåa˘
 && 
	gmy_ow√r
)

608 
	gmy_buût_suc˚ss‹s
.
£ndî_exåa˘
(*
my_ow√r
);

612 
suc˚ss‹_ˇche
–Ë: 
my_ow√r
(
NULL
) {}

614 
£t_ow√r
–
£ndî
<
c⁄töue_msg
> *
ow√r
 ) { 
my_ow√r
 = owner; }

616 
	gvútuÆ
 ~
suc˚ss‹_ˇche
() {}

618 
ªgi°î_suc˚ss‹
–
ª˚ivî
<
c⁄töue_msg
> &
r
 ) {

619 
	gmy_muãx_ty≥
::
sc›ed_lock
 
l
(
my_muãx
, 
åue
);

620 
	gmy_suc˚ss‹s
.
push_back
–&
r
 );

621 i‡–
	gmy_ow√r
 && 
	gr
.
is_c⁄töue_ª˚ivî
() ) {

622 
	gr
.
ªgi°î_¥ede˚ss‹
–*
my_ow√r
 );

626 
ªmove_suc˚ss‹
–
ª˚ivî
<
c⁄töue_msg
> &
r
 ) {

627 
	gmy_muãx_ty≥
::
sc›ed_lock
 
l
(
my_muãx
, 
åue
);

628  
	gmy_suc˚ss‹s_ty≥
::
ôî©‹
 
i
 = 
my_suc˚ss‹s
.
begö
();

629 
	gi
 !
my_suc˚ss‹s
.
íd
(); ++i ) {

630 i‡–*
	gi
 =& 
r
 ) {

633 i‡–
my_ow√r
 )

634 
r
.
ªmove_¥ede˚ss‹
–*
my_ow√r
 );

635 
	gmy_suc˚ss‹s
.
îa£
(
i
);

641 
boﬁ
 
em±y
() {

642 
	gmy_muãx_ty≥
::
sc›ed_lock
 
l
(
my_muãx
, 
Ál£
);

643  
	gmy_suc˚ss‹s
.
em±y
();

646 
˛ór
() {

647 
	gmy_suc˚ss‹s
.
˛ór
();

648 #i‡
TBB_PREVIEW_FLOW_GRAPH_FEATURES


649 
	gmy_buût_suc˚ss‹s
.
˛ór
();

653 
vútuÆ
 
èsk
 * 
åy_put_èsk
–c⁄° 
c⁄töue_msg
 &
t
 ) = 0;

658 
	gãm∂©e
<
ty≥«me
 
	gT
,Åy≥«mê
	gM
=
•ö_rw_muãx
>

659 
˛ass
 
brﬂdˇ°_ˇche
 : 
public
 
suc˚ss‹_ˇche
<
T
, 
	gM
> {

660 
M
 
	tmy_muãx_ty≥
;

661 
	g°d
::
	tli°
< 
	tª˚ivî
<
	tT
> * > 
	tmy_suc˚ss‹s_ty≥
;

663 
	gpublic
:

665 
brﬂdˇ°_ˇche
( ) {}

668  
èsk
 * 
åy_put_èsk
–c⁄° 
T
 &
t
 ) {

669 
èsk
 * 
œ°_èsk
 = 
NULL
;

670 
boﬁ
 
	gupgøded
 = 
åue
;

671 
ty≥«me
 
	gmy_muãx_ty≥
::
sc›ed_lock
 
l
(
this
->
my_muãx
, 
upgøded
);

672 
ty≥«me
 
	gmy_suc˚ss‹s_ty≥
::
ôî©‹
 
i
 = 
this
->
my_suc˚ss‹s
.
begö
();

673  
	gi
 !
this
->
my_suc˚ss‹s
.
íd
() ) {

674 
èsk
 *
√w_èsk
 = (*
i
)->
åy_put_èsk
(
t
);

675 
	gœ°_èsk
 = 
comböe_èsks
(
œ°_èsk
, 
√w_èsk
);

676 if(
	g√w_èsk
) {

677 ++
	gi
;

680 i‡–(*
	gi
)->
ªgi°î_¥ede˚ss‹
(*
this
->
my_ow√r
) ) {

681 i‡(!
	gupgøded
) {

682 
	gl
.
upgøde_to_wrôî
();

683 
	gupgøded
 = 
åue
;

685 
	gi
 = 
this
->
my_suc˚ss‹s
.
îa£
(
i
);

687 ++
	gi
;

691  
	gœ°_èsk
;

697 
	gãm∂©e
<
ty≥«me
 
	gT
,Åy≥«mê
	gM
=
•ö_rw_muãx
 >

698 
˛ass
 
round_robö_ˇche
 : 
public
 
suc˚ss‹_ˇche
<
T
, 
	gM
> {

699 
size_t
 
	tsize_ty≥
;

700 
M
 
	tmy_muãx_ty≥
;

701 
	g°d
::
	tli°
< 
	tª˚ivî
<
	tT
> * > 
	tmy_suc˚ss‹s_ty≥
;

703 
	gpublic
:

705 
round_robö_ˇche
( ) {}

707 
size_ty≥
 
size
() {

708 
ty≥«me
 
my_muãx_ty≥
::
sc›ed_lock
 
l
(
this
->
my_muãx
, 
Ál£
);

709  
	gthis
->
	gmy_suc˚ss‹s
.
size
();

712  
èsk
 *
åy_put_èsk
–c⁄° 
T
 &
t
 ) {

713 
boﬁ
 
	gupgøded
 = 
åue
;

714 
ty≥«me
 
	gmy_muãx_ty≥
::
sc›ed_lock
 
l
(
this
->
my_muãx
, 
upgøded
);

715 
ty≥«me
 
	gmy_suc˚ss‹s_ty≥
::
ôî©‹
 
i
 = 
this
->
my_suc˚ss‹s
.
begö
();

716  
	gi
 !
this
->
my_suc˚ss‹s
.
íd
() ) {

717 
èsk
 *
√w_èsk
 = (*
i
)->
åy_put_èsk
(
t
);

718 i‡–
	g√w_èsk
 ) {

719  
	g√w_èsk
;

721 i‡–(*
	gi
)->
ªgi°î_¥ede˚ss‹
(*
this
->
my_ow√r
) ) {

722 i‡(!
	gupgøded
) {

723 
	gl
.
upgøde_to_wrôî
();

724 
	gupgøded
 = 
åue
;

726 
	gi
 = 
this
->
my_suc˚ss‹s
.
îa£
(
i
);

729 ++
	gi
;

733  
	gNULL
;

737 
	gãm∂©e
<
ty≥«me
 
	gT
>

738 
˛ass
 
	gde¸emíãr
 : 
public
 
c⁄töue_ª˚ivî
, 
	gtbb
::
öã∫Æ
::
no_c›y
 {

740 
T
 *
my_node
;

742 
èsk
 *
execuã
() {

743  
	gmy_node
->
de¸emít_cou¡î
();

746 
	gpublic
:

748 
c⁄töue_msg
 
	töput_ty≥
;

749 
c⁄töue_msg
 
	touçut_ty≥
;

750 
de¸emíãr
–
numbî_of_¥ede˚ss‹s
 = 0 ) : 
c⁄töue_ª˚ivî
(Çumber_of_predecessors ) { }

751 
£t_ow√r
–
T
 *
node
 ) { 
my_node
 =Çode; }

	@viper/concurrentqueue-src/benchmarks/tbb/internal/_flow_graph_indexer_impl.h

21 #i‚de‡
__TBB__Êow_gøph_ödexî_im∂_H


22 
	#__TBB__Êow_gøph_ödexî_im∂_H


	)

24 #i‚de‡
__TBB_Êow_gøph_H


25 #îr‹ 
Do
 
nŸ
 #ö˛udê
this
 
öã∫Æ
 
fûe
 
dúe˘ly
; 
u£
 
public
 
TBB
 
hódîs
 
ö°ód
.

28 
	~"tbb/öã∫Æ/_Êow_gøph_ty≥s_im∂.h
"

30 
«me•a˚
 
	göã∫Æ
 {

37 
	gãm∂©e
<
ty≥«me
 
	gIndexîNodeBa£Ty≥
,Åy≥«mê
	gT
, 
size_t
 
	gK
>

38 
èsk
* 
do_åy_put
(c⁄° 
T
 &
v
, *
p
) {

39 
ty≥«me
 
	gIndexîNodeBa£Ty≥
::
ouçut_ty≥
 
o
(
K
, 
v
);

40  
	gªöãΩªt_ˇ°
<
	gIndexîNodeBa£Ty≥
 *>(
	gp
)->
åy_put_èsk
(&
o
);

43 
	gãm∂©e
<
ty≥«me
 
	gTu∂eTy≥s
,
	gN
>

44 
	södexî_hñ≥r
 {

45 
	gãm∂©e
<
ty≥«me
 
	gIndexîNodeBa£Ty≥
,Åy≥«mê
	gP‹tTu∂e
>

46 
ölöe
 
£t_ödexî_node_poöãr
(
P‹tTu∂e
 &
my_öput
, 
IndexîNodeBa£Ty≥
 *
p
) {

47 
ty≥«me
 
	ttu∂e_ñemít
<
	tN
-1, 
	tTu∂eTy≥s
>::
	tty≥
 
	tT
;

48 
	gèsk
 *(*
	gödexî_node_put_èsk
)(c⁄° 
	gT
&, *Ë
do_åy_put
<
IndexîNodeBa£Ty≥
, T, 
	gN
-1>;

49 
	gtbb
::
Êow
::
gë
<
N
-1>(
my_öput
).
£t_up
(
p
, 
ödexî_node_put_èsk
);

50 
	gödexî_hñ≥r
<
	gTu∂eTy≥s
,
	gN
-1>::
ãm∂©e
 
£t_ödexî_node_poöãr
<
IndexîNodeBa£Ty≥
,
	gP‹tTu∂e
>(
	gmy_öput
, 
	gp
);

52 #i‡
TBB_PREVIEW_FLOW_GRAPH_FEATURES


53 
	gãm∂©e
<
ty≥«me
 
	gI≈utTu∂e
>

54 
ölöe
 
ª£t_öputs
(
I≈utTu∂e
 &
my_öput
, 
ª£t_Êags
 
f
) {

55 
	gjoö_hñ≥r
<
	gN
-1>::
ª£t_öputs
(
my_öput
, 
f
);

56 
	gtbb
::
Êow
::
gë
<
N
-1>(
my_öput
).
ª£t_ª˚ivî
(
f
);

61 
	gãm∂©e
<
ty≥«me
 
	gTu∂eTy≥s
>

62 
	gödexî_hñ≥r
<
	gTu∂eTy≥s
,1> {

63 
	gãm∂©e
<
ty≥«me
 
	gIndexîNodeBa£Ty≥
,Åy≥«mê
	gP‹tTu∂e
>

64 
ölöe
 
£t_ödexî_node_poöãr
(
P‹tTu∂e
 &
my_öput
, 
IndexîNodeBa£Ty≥
 *
p
) {

65 
ty≥«me
 
	ttu∂e_ñemít
<0, 
	tTu∂eTy≥s
>::
	tty≥
 
	tT
;

66 
	gèsk
 *(*
	gödexî_node_put_èsk
)(c⁄° 
	gT
&, *Ë
do_åy_put
<
IndexîNodeBa£Ty≥
, T, 0>;

67 
	gtbb
::
Êow
::
gë
<0>(
my_öput
).
£t_up
(
p
, 
ödexî_node_put_èsk
);

69 #i‡
TBB_PREVIEW_FLOW_GRAPH_FEATURES


70 
	gãm∂©e
<
ty≥«me
 
	gI≈utTu∂e
>

71 
ölöe
 
ª£t_öputs
(
I≈utTu∂e
 &
my_öput
, 
ª£t_Êags
 
f
) {

72 
	gtbb
::
Êow
::
gë
<0>(
my_öput
).
ª£t_ª˚ivî
(
f
);

77 
	gãm∂©e
<
ty≥«me
 
	gT
>

78 
˛ass
 
	gödexî_öput_p‹t
 : 
public
 
ª˚ivî
<
T
> {

79 
¥iv©e
:

80 * 
my_ödexî_±r
;

81 
	gèsk
* (* 
	tf‹w¨d_fun˘i⁄_±r
)(
	tT
 const &, * );

82 
f‹w¨d_fun˘i⁄_±r
 
	gmy_åy_put_èsk
;

83 #i‡
TBB_PREVIEW_FLOW_GRAPH_FEATURES


84 
•ö_muãx
 
	gmy_¥ed_muãx
;

85 
	gedge_c⁄èöî
<
	g£ndî
<
	gT
> > 
	gmy_buût_¥ede˚ss‹s
;

87 
	gpublic
:

88 #i‡
TBB_PREVIEW_FLOW_GRAPH_FEATURES


89 
ödexî_öput_p‹t
(Ë: 
my_¥ed_muãx
() {}

90 
ödexî_öput_p‹t
–c⁄° indexî_öput_p‹à& ) : 
ª˚ivî
<
T
>(), 
my_¥ed_muãx
() {

93 
£t_up
(*
p
, 
f‹w¨d_fun˘i⁄_±r
 
f
) {

94 
	gmy_ödexî_±r
 = 
p
;

95 
	gmy_åy_put_èsk
 = 
f
;

97 #i‡
TBB_PREVIEW_FLOW_GRAPH_FEATURES


98 
	g°d
::
	tve˘‹
<
	t£ndî
<
	tT
> *> 
	t¥ede˚ss‹_ve˘‹_ty≥
;

99  
size_t
 
¥ede˚ss‹_cou¡
() {

100 
	g•ö_muãx
::
sc›ed_lock
 
l
(
my_¥ed_muãx
);

101  
	gmy_buût_¥ede˚ss‹s
.
edge_cou¡
();

103  
öã∫Æ_add_buût_¥ede˚ss‹
(
£ndî
<
T
> &
p
) {

104 
	g•ö_muãx
::
sc›ed_lock
 
l
(
my_¥ed_muãx
);

105 
	gmy_buût_¥ede˚ss‹s
.
add_edge
(
p
);

107  
öã∫Æ_dñëe_buût_¥ede˚ss‹
(
£ndî
<
T
> &
p
) {

108 
	g•ö_muãx
::
sc›ed_lock
 
l
(
my_¥ed_muãx
);

109 
	gmy_buût_¥ede˚ss‹s
.
dñëe_edge
(
p
);

111  
c›y_¥ede˚ss‹s
–
¥ede˚ss‹_ve˘‹_ty≥
 &
v
) {

112 
	g•ö_muãx
::
sc›ed_lock
 
l
(
my_¥ed_muãx
);

113  
	gmy_buût_¥ede˚ss‹s
.
c›y_edges
(
v
);

116 
	g¥Ÿe˘ed
:

117 
ãm∂©e
< 
ty≥«me
 
R
,Åy≥«mê
	gB
 > 
‰õnd
 
˛ass
 
	grun_™d_put_èsk
;

118 
	gãm∂©e
<
ty≥«me
 
	gX
,Åy≥«mê
	gY
> 
‰õnd
 
˛ass
 
	göã∫Æ
::
brﬂdˇ°_ˇche
;

119 
	gãm∂©e
<
ty≥«me
 
	gX
,Åy≥«mê
	gY
> 
‰õnd
 
˛ass
 
	göã∫Æ
::
round_robö_ˇche
;

120 
èsk
 *
åy_put_èsk
(c⁄° 
T
 &
v
) {

121  
my_åy_put_èsk
(
v
, 
my_ödexî_±r
);

124 #i‡
TBB_PREVIEW_FLOW_GRAPH_FEATURES


125 
	gpublic
:

126  
ª£t_ª˚ivî
(
__TBB_PFG_RESET_ARG
(
ª£t_Êags
 
f
)) {

127 if(
f
&
rf_exåa˘
Ë
my_buût_¥ede˚ss‹s
.
ª˚ivî_exåa˘
(*
this
);

130  
ª£t_ª˚ivî
(
__TBB_PFG_RESET_ARG
(
ª£t_Êags
 )) { }

135 
	gãm∂©e
<
ty≥«me
 
	gI≈utTu∂e
,Åy≥«mê
	gOuçutTy≥
,Åy≥«mê
	gSåu˘Ty≥s
>

136 ˛as†
	cödexî_node_FE
 {

137 
	gpublic
:

138 c⁄° 
N
 = 
tbb
::
Êow
::
tu∂e_size
<
I≈utTu∂e
>::
vÆue
;

139 
OuçutTy≥
 
	touçut_ty≥
;

140 
I≈utTu∂e
 
	töput_ty≥
;

142 
	göput_ty≥
 &
öput_p‹ts
(Ë{  
	gmy_öputs
; }

143 
	g¥Ÿe˘ed
:

144 
öput_ty≥
 
my_öputs
;

148 
	gãm∂©e
<
ty≥«me
 
	gI≈utTu∂e
,Åy≥«mê
	gOuçutTy≥
,Åy≥«mê
	gSåu˘Ty≥s
>

149 
˛ass
 
	gödexî_node_ba£
 : 
public
 
gøph_node
,Öubli¯
	gödexî_node_FE
<
	gI≈utTu∂e
, 
	gOuçutTy≥
,
	gSåu˘Ty≥s
>,

150 
public
 
	g£ndî
<
	gOuçutTy≥
> {

151 
	g¥Ÿe˘ed
:

152 
usög
 
gøph_node
::
my_gøph
;

153 
	gpublic
:

154 c⁄° 
size_t
 
N
 = 
tbb
::
Êow
::
tu∂e_size
<
I≈utTu∂e
>::
vÆue
;

155 
OuçutTy≥
 
	touçut_ty≥
;

156 
Såu˘Ty≥s
 
	ttu∂e_ty≥s
;

157 
	gª˚ivî
<
	touçut_ty≥
> 
	tsuc˚ss‹_ty≥
;

158 
	gödexî_node_FE
<
	tI≈utTu∂e
, 
	touçut_ty≥
,
	tSåu˘Ty≥s
> 
	töput_p‹ts_ty≥
;

159 #i‡
TBB_PREVIEW_FLOW_GRAPH_FEATURES


160 
	g°d
::
	tve˘‹
<
	tsuc˚ss‹_ty≥
 *> 
	tsuc˚ss‹_ve˘‹_ty≥
;

163 
	g¥iv©e
:

165 
	e›_ty≥
 { 
ªg_succ
, 
	gªm_succ
, 
	gåy__put_èsk


166 #i‡
TBB_PREVIEW_FLOW_GRAPH_FEATURES


167 , 
	gadd_b…_succ
, 
	gdñ_b…_succ
,

168 
	gb…_succ_˙t
, 
	gb…_succ_˝y


171 
	e›_°©
 {
	gWAIT
=0, 
	gSUCCEEDED
, 
	gFAILED
};

172 
	gödexî_node_ba£
<
	tI≈utTu∂e
,
	touçut_ty≥
,
	tSåu˘Ty≥s
> 
	tmy_˛ass
;

174 
˛ass
 
	gödexî_node_ba£_›î©i⁄
 : 
public
 
aggªg©ed_›î©i⁄
<
ödexî_node_ba£_›î©i⁄
> {

175 
public
:

176 
ty≥
;

178 
ouçut_ty≥
 c⁄° *
	gmy_¨g
;

179 
suc˚ss‹_ty≥
 *
	gmy_succ
;

180 
èsk
 *
	gby∑ss_t
;

181 #i‡
TBB_PREVIEW_FLOW_GRAPH_FEATURES


182 
size_t
 
	g˙t_vÆ
;

183 
suc˚ss‹_ve˘‹_ty≥
 *
	gsuccv
;

186 
ödexî_node_ba£_›î©i⁄
(c⁄° 
ouçut_ty≥
* 
e
, 
›_ty≥
 
t
) :

187 
ty≥
((
t
)), 
my_¨g
(
e
) {}

188 
ödexî_node_ba£_›î©i⁄
(c⁄° 
suc˚ss‹_ty≥
 &
s
, 
›_ty≥
 
t
Ë: 
ty≥
((t)),

189 
my_succ
(
c⁄°_ˇ°
<
suc˚ss‹_ty≥
 *>(&
s
)) {}

190 
ödexî_node_ba£_›î©i⁄
(
›_ty≥
 
t
Ë: 
ty≥
((t)) {}

193 
	göã∫Æ
::
	taggªg©ög_fun˘‹
<
	tmy_˛ass
, 
	tödexî_node_ba£_›î©i⁄
> 
	tmy_h™dÀr
;

194 
‰õnd
 
˛ass
 
	göã∫Æ
::
aggªg©ög_fun˘‹
<
my_˛ass
, 
	gödexî_node_ba£_›î©i⁄
>;

195 
	gaggªg©‹
<
	gmy_h™dÀr
, 
	gödexî_node_ba£_›î©i⁄
> 
	gmy_aggªg©‹
;

197 
h™dÀ_›î©i⁄s
(
ödexî_node_ba£_›î©i⁄
* 
›_li°
) {

198 
ödexî_node_ba£_›î©i⁄
 *
	gcuºít
;

199 
	g›_li°
) {

200 
	gcuºít
 = 
›_li°
;

201 
	g›_li°
 = 
›_li°
->
√xt
;

202 
	gcuºít
->
	gty≥
) {

204 
	gªg_succ
:

205 
my_suc˚ss‹s
.
ªgi°î_suc˚ss‹
(*(
cuºít
->
my_succ
));

206 
__TBB_°‹e_wôh_ªÀa£
(
cuºít
->
°©us
, 
SUCCEEDED
);

209 
	gªm_succ
:

210 
my_suc˚ss‹s
.
ªmove_suc˚ss‹
(*(
cuºít
->
my_succ
));

211 
__TBB_°‹e_wôh_ªÀa£
(
cuºít
->
°©us
, 
SUCCEEDED
);

213 
	gåy__put_èsk
: {

214 
cuºít
->
by∑ss_t
 = 
my_suc˚ss‹s
.
åy_put_èsk
(*(cuºít->
my_¨g
));

215 
__TBB_°‹e_wôh_ªÀa£
(
cuºít
->
°©us
, 
SUCCEEDED
);

218 #i‡
TBB_PREVIEW_FLOW_GRAPH_FEATURES


219 
	gadd_b…_succ
:

220 
my_suc˚ss‹s
.
öã∫Æ_add_buût_suc˚ss‹
(*(
cuºít
->
my_succ
));

221 
__TBB_°‹e_wôh_ªÀa£
(
cuºít
->
°©us
, 
SUCCEEDED
);

223 
	gdñ_b…_succ
:

224 
my_suc˚ss‹s
.
öã∫Æ_dñëe_buût_suc˚ss‹
(*(
cuºít
->
my_succ
));

225 
__TBB_°‹e_wôh_ªÀa£
(
cuºít
->
°©us
, 
SUCCEEDED
);

227 
	gb…_succ_˙t
:

228 
cuºít
->
˙t_vÆ
 = 
my_suc˚ss‹s
.
suc˚ss‹_cou¡
();

229 
__TBB_°‹e_wôh_ªÀa£
(
cuºít
->
°©us
, 
SUCCEEDED
);

231 
	gb…_succ_˝y
:

232 
my_suc˚ss‹s
.
c›y_suc˚ss‹s
(*(
cuºít
->
succv
));

233 
__TBB_°‹e_wôh_ªÀa£
(
cuºít
->
°©us
, 
SUCCEEDED
);

240 
	gpublic
:

241 
ödexî_node_ba£
(
gøph
& 
g
Ë: 
gøph_node
(g), 
öput_p‹ts_ty≥
() {

242 
	gödexî_hñ≥r
<
	gSåu˘Ty≥s
,
	gN
>::
£t_ödexî_node_poöãr
(
this
->
my_öputs
,Åhis);

243 
	gmy_suc˚ss‹s
.
£t_ow√r
(
this
);

244 
	gmy_aggªg©‹
.
öôülize_h™dÀr
(
my_h™dÀr
(
this
));

247 
ödexî_node_ba£
(c⁄° indexî_node_ba£& 
Ÿhî
Ë: 
gøph_node
(Ÿhî.
my_gøph
), 
öput_p‹ts_ty≥
(), 
	g£ndî
<
	gouçut_ty≥
>() {

248 
	gödexî_hñ≥r
<
	gSåu˘Ty≥s
,
	gN
>::
£t_ödexî_node_poöãr
(
this
->
my_öputs
,Åhis);

249 
	gmy_suc˚ss‹s
.
£t_ow√r
(
this
);

250 
	gmy_aggªg©‹
.
öôülize_h™dÀr
(
my_h™dÀr
(
this
));

253 
boﬁ
 
ªgi°î_suc˚ss‹
(
suc˚ss‹_ty≥
 &
r
) {

254 
ödexî_node_ba£_›î©i⁄
 
›_d©a
(
r
, 
ªg_succ
);

255 
	gmy_aggªg©‹
.
execuã
(&
›_d©a
);

256  
	g›_d©a
.
	g°©us
 =
SUCCEEDED
;

259 
boﬁ
 
ªmove_suc˚ss‹
–
suc˚ss‹_ty≥
 &
r
) {

260 
ödexî_node_ba£_›î©i⁄
 
›_d©a
(
r
, 
ªm_succ
);

261 
	gmy_aggªg©‹
.
execuã
(&
›_d©a
);

262  
	g›_d©a
.
	g°©us
 =
SUCCEEDED
;

265 
èsk
 * 
åy_put_èsk
(
ouçut_ty≥
 c⁄° *
v
) {

266 
ödexî_node_ba£_›î©i⁄
 
›_d©a
(
v
, 
åy__put_èsk
);

267 
	gmy_aggªg©‹
.
execuã
(&
›_d©a
);

268  
	g›_d©a
.
	gby∑ss_t
;

271 #i‡
TBB_PREVIEW_FLOW_GRAPH_FEATURES


272 
öã∫Æ_add_buût_suc˚ss‹
–
suc˚ss‹_ty≥
 &
r
) {

273 
ödexî_node_ba£_›î©i⁄
 
›_d©a
(
r
, 
add_b…_succ
);

274 
	gmy_aggªg©‹
.
execuã
(&
›_d©a
);

277 
öã∫Æ_dñëe_buût_suc˚ss‹
–
suc˚ss‹_ty≥
 &
r
) {

278 
ödexî_node_ba£_›î©i⁄
 
›_d©a
(
r
, 
dñ_b…_succ
);

279 
	gmy_aggªg©‹
.
execuã
(&
›_d©a
);

282 
size_t
 
suc˚ss‹_cou¡
() {

283 
ödexî_node_ba£_›î©i⁄
 
›_d©a
(
b…_succ_˙t
);

284 
	gmy_aggªg©‹
.
execuã
(&
›_d©a
);

285  
	g›_d©a
.
	g˙t_vÆ
;

288 
c›y_suc˚ss‹s
–
suc˚ss‹_ve˘‹_ty≥
 &
v
) {

289 
ödexî_node_ba£_›î©i⁄
 
›_d©a
(
b…_succ_˝y
);

290 
	g›_d©a
.
	gsuccv
 = &
v
;

291 
	gmy_aggªg©‹
.
execuã
(&
›_d©a
);

294 
	g¥Ÿe˘ed
:

295  
ª£t
(
__TBB_PFG_RESET_ARG
(
ª£t_Êags
 
f
)) {

296 #i‡
TBB_PREVIEW_FLOW_GRAPH_FEATURES


297 
my_suc˚ss‹s
.
ª£t
(
f
);

298 
	gödexî_hñ≥r
<
	gSåu˘Ty≥s
,
	gN
>::
ª£t_öputs
(
this
->
my_öputs
, 
f
);

302 
	g¥iv©e
:

303 
brﬂdˇ°_ˇche
<
ouçut_ty≥
, 
	gnuŒ_rw_muãx
> 
	gmy_suc˚ss‹s
;

307 
	gãm∂©e
<
	gN
, 
ty≥«me
 
	gI≈utTu∂e
> 
	göput_ty≥s
;

309 
	gãm∂©e
<
ty≥«me
 
	gI≈utTu∂e
>

310 
	göput_ty≥s
<1, 
	gI≈utTu∂e
> {

311 
ty≥«me
 
	ttu∂e_ñemít
<0, 
	tI≈utTu∂e
>::
	tty≥
 
	tfú°_ty≥
;

312 
ty≥«me
 
	töã∫Æ
::
	tègged_msg
<
	tsize_t
, 
	tfú°_ty≥
 > 
	tty≥
;

315 
	gãm∂©e
<
ty≥«me
 
	gI≈utTu∂e
>

316 
	göput_ty≥s
<2, 
	gI≈utTu∂e
> {

317 
ty≥«me
 
	ttu∂e_ñemít
<0, 
	tI≈utTu∂e
>::
	tty≥
 
	tfú°_ty≥
;

318 
ty≥«me
 
	ttu∂e_ñemít
<1, 
	tI≈utTu∂e
>::
	tty≥
 
	t£c⁄d_ty≥
;

319 
ty≥«me
 
	töã∫Æ
::
	tègged_msg
<
	tsize_t
, 
	tfú°_ty≥
, 
	t£c⁄d_ty≥
> 
	tty≥
;

322 
	gãm∂©e
<
ty≥«me
 
	gI≈utTu∂e
>

323 
	göput_ty≥s
<3, 
	gI≈utTu∂e
> {

324 
ty≥«me
 
	ttu∂e_ñemít
<0, 
	tI≈utTu∂e
>::
	tty≥
 
	tfú°_ty≥
;

325 
ty≥«me
 
	ttu∂e_ñemít
<1, 
	tI≈utTu∂e
>::
	tty≥
 
	t£c⁄d_ty≥
;

326 
ty≥«me
 
	ttu∂e_ñemít
<2, 
	tI≈utTu∂e
>::
	tty≥
 
	tthúd_ty≥
;

327 
ty≥«me
 
	töã∫Æ
::
	tègged_msg
<
	tsize_t
, 
	tfú°_ty≥
, 
	t£c⁄d_ty≥
, 
	tthúd_ty≥
> 
	tty≥
;

330 
	gãm∂©e
<
ty≥«me
 
	gI≈utTu∂e
>

331 
	göput_ty≥s
<4, 
	gI≈utTu∂e
> {

332 
ty≥«me
 
	ttu∂e_ñemít
<0, 
	tI≈utTu∂e
>::
	tty≥
 
	tfú°_ty≥
;

333 
ty≥«me
 
	ttu∂e_ñemít
<1, 
	tI≈utTu∂e
>::
	tty≥
 
	t£c⁄d_ty≥
;

334 
ty≥«me
 
	ttu∂e_ñemít
<2, 
	tI≈utTu∂e
>::
	tty≥
 
	tthúd_ty≥
;

335 
ty≥«me
 
	ttu∂e_ñemít
<3, 
	tI≈utTu∂e
>::
	tty≥
 
	tfouπh_ty≥
;

336 
ty≥«me
 
	töã∫Æ
::
	tègged_msg
<
	tsize_t
, 
	tfú°_ty≥
, 
	t£c⁄d_ty≥
, 
	tthúd_ty≥
,

337 
	tfouπh_ty≥
> 
	tty≥
;

340 
	gãm∂©e
<
ty≥«me
 
	gI≈utTu∂e
>

341 
	göput_ty≥s
<5, 
	gI≈utTu∂e
> {

342 
ty≥«me
 
	ttu∂e_ñemít
<0, 
	tI≈utTu∂e
>::
	tty≥
 
	tfú°_ty≥
;

343 
ty≥«me
 
	ttu∂e_ñemít
<1, 
	tI≈utTu∂e
>::
	tty≥
 
	t£c⁄d_ty≥
;

344 
ty≥«me
 
	ttu∂e_ñemít
<2, 
	tI≈utTu∂e
>::
	tty≥
 
	tthúd_ty≥
;

345 
ty≥«me
 
	ttu∂e_ñemít
<3, 
	tI≈utTu∂e
>::
	tty≥
 
	tfouπh_ty≥
;

346 
ty≥«me
 
	ttu∂e_ñemít
<4, 
	tI≈utTu∂e
>::
	tty≥
 
	tfi·h_ty≥
;

347 
ty≥«me
 
	töã∫Æ
::
	tègged_msg
<
	tsize_t
, 
	tfú°_ty≥
, 
	t£c⁄d_ty≥
, 
	tthúd_ty≥
,

348 
	tfouπh_ty≥
, 
	tfi·h_ty≥
> 
	tty≥
;

351 
	gãm∂©e
<
ty≥«me
 
	gI≈utTu∂e
>

352 
	göput_ty≥s
<6, 
	gI≈utTu∂e
> {

353 
ty≥«me
 
	ttu∂e_ñemít
<0, 
	tI≈utTu∂e
>::
	tty≥
 
	tfú°_ty≥
;

354 
ty≥«me
 
	ttu∂e_ñemít
<1, 
	tI≈utTu∂e
>::
	tty≥
 
	t£c⁄d_ty≥
;

355 
ty≥«me
 
	ttu∂e_ñemít
<2, 
	tI≈utTu∂e
>::
	tty≥
 
	tthúd_ty≥
;

356 
ty≥«me
 
	ttu∂e_ñemít
<3, 
	tI≈utTu∂e
>::
	tty≥
 
	tfouπh_ty≥
;

357 
ty≥«me
 
	ttu∂e_ñemít
<4, 
	tI≈utTu∂e
>::
	tty≥
 
	tfi·h_ty≥
;

358 
ty≥«me
 
	ttu∂e_ñemít
<5, 
	tI≈utTu∂e
>::
	tty≥
 
	tsixth_ty≥
;

359 
ty≥«me
 
	töã∫Æ
::
	tègged_msg
<
	tsize_t
, 
	tfú°_ty≥
, 
	t£c⁄d_ty≥
, 
	tthúd_ty≥
,

360 
	tfouπh_ty≥
, 
	tfi·h_ty≥
, 
	tsixth_ty≥
> 
	tty≥
;

363 
	gãm∂©e
<
ty≥«me
 
	gI≈utTu∂e
>

364 
	göput_ty≥s
<7, 
	gI≈utTu∂e
> {

365 
ty≥«me
 
	ttu∂e_ñemít
<0, 
	tI≈utTu∂e
>::
	tty≥
 
	tfú°_ty≥
;

366 
ty≥«me
 
	ttu∂e_ñemít
<1, 
	tI≈utTu∂e
>::
	tty≥
 
	t£c⁄d_ty≥
;

367 
ty≥«me
 
	ttu∂e_ñemít
<2, 
	tI≈utTu∂e
>::
	tty≥
 
	tthúd_ty≥
;

368 
ty≥«me
 
	ttu∂e_ñemít
<3, 
	tI≈utTu∂e
>::
	tty≥
 
	tfouπh_ty≥
;

369 
ty≥«me
 
	ttu∂e_ñemít
<4, 
	tI≈utTu∂e
>::
	tty≥
 
	tfi·h_ty≥
;

370 
ty≥«me
 
	ttu∂e_ñemít
<5, 
	tI≈utTu∂e
>::
	tty≥
 
	tsixth_ty≥
;

371 
ty≥«me
 
	ttu∂e_ñemít
<6, 
	tI≈utTu∂e
>::
	tty≥
 
	t£víth_ty≥
;

372 
ty≥«me
 
	töã∫Æ
::
	tègged_msg
<
	tsize_t
, 
	tfú°_ty≥
, 
	t£c⁄d_ty≥
, 
	tthúd_ty≥
,

373 
	tfouπh_ty≥
, 
	tfi·h_ty≥
, 
	tsixth_ty≥
,

374 
	t£víth_ty≥
> 
	tty≥
;

378 
	gãm∂©e
<
ty≥«me
 
	gI≈utTu∂e
>

379 
	göput_ty≥s
<8, 
	gI≈utTu∂e
> {

380 
ty≥«me
 
	ttu∂e_ñemít
<0, 
	tI≈utTu∂e
>::
	tty≥
 
	tfú°_ty≥
;

381 
ty≥«me
 
	ttu∂e_ñemít
<1, 
	tI≈utTu∂e
>::
	tty≥
 
	t£c⁄d_ty≥
;

382 
ty≥«me
 
	ttu∂e_ñemít
<2, 
	tI≈utTu∂e
>::
	tty≥
 
	tthúd_ty≥
;

383 
ty≥«me
 
	ttu∂e_ñemít
<3, 
	tI≈utTu∂e
>::
	tty≥
 
	tfouπh_ty≥
;

384 
ty≥«me
 
	ttu∂e_ñemít
<4, 
	tI≈utTu∂e
>::
	tty≥
 
	tfi·h_ty≥
;

385 
ty≥«me
 
	ttu∂e_ñemít
<5, 
	tI≈utTu∂e
>::
	tty≥
 
	tsixth_ty≥
;

386 
ty≥«me
 
	ttu∂e_ñemít
<6, 
	tI≈utTu∂e
>::
	tty≥
 
	t£víth_ty≥
;

387 
ty≥«me
 
	ttu∂e_ñemít
<7, 
	tI≈utTu∂e
>::
	tty≥
 
	teighth_ty≥
;

388 
ty≥«me
 
	töã∫Æ
::
	tègged_msg
<
	tsize_t
, 
	tfú°_ty≥
, 
	t£c⁄d_ty≥
, 
	tthúd_ty≥
,

389 
	tfouπh_ty≥
, 
	tfi·h_ty≥
, 
	tsixth_ty≥
,

390 
	t£víth_ty≥
, 
	teighth_ty≥
> 
	tty≥
;

394 
	gãm∂©e
<
ty≥«me
 
	gI≈utTu∂e
>

395 
	göput_ty≥s
<9, 
	gI≈utTu∂e
> {

396 
ty≥«me
 
	ttu∂e_ñemít
<0, 
	tI≈utTu∂e
>::
	tty≥
 
	tfú°_ty≥
;

397 
ty≥«me
 
	ttu∂e_ñemít
<1, 
	tI≈utTu∂e
>::
	tty≥
 
	t£c⁄d_ty≥
;

398 
ty≥«me
 
	ttu∂e_ñemít
<2, 
	tI≈utTu∂e
>::
	tty≥
 
	tthúd_ty≥
;

399 
ty≥«me
 
	ttu∂e_ñemít
<3, 
	tI≈utTu∂e
>::
	tty≥
 
	tfouπh_ty≥
;

400 
ty≥«me
 
	ttu∂e_ñemít
<4, 
	tI≈utTu∂e
>::
	tty≥
 
	tfi·h_ty≥
;

401 
ty≥«me
 
	ttu∂e_ñemít
<5, 
	tI≈utTu∂e
>::
	tty≥
 
	tsixth_ty≥
;

402 
ty≥«me
 
	ttu∂e_ñemít
<6, 
	tI≈utTu∂e
>::
	tty≥
 
	t£víth_ty≥
;

403 
ty≥«me
 
	ttu∂e_ñemít
<7, 
	tI≈utTu∂e
>::
	tty≥
 
	teighth_ty≥
;

404 
ty≥«me
 
	ttu∂e_ñemít
<8, 
	tI≈utTu∂e
>::
	tty≥
 
	tnöëh_ty≥
;

405 
ty≥«me
 
	töã∫Æ
::
	tègged_msg
<
	tsize_t
, 
	tfú°_ty≥
, 
	t£c⁄d_ty≥
, 
	tthúd_ty≥
,

406 
	tfouπh_ty≥
, 
	tfi·h_ty≥
, 
	tsixth_ty≥
,

407 
	t£víth_ty≥
, 
	teighth_ty≥
, 
	tnöëh_ty≥
> 
	tty≥
;

410 
	gãm∂©e
<
ty≥«me
 
	gI≈utTu∂e
>

411 
	göput_ty≥s
<10, 
	gI≈utTu∂e
> {

412 
ty≥«me
 
	ttu∂e_ñemít
<0, 
	tI≈utTu∂e
>::
	tty≥
 
	tfú°_ty≥
;

413 
ty≥«me
 
	ttu∂e_ñemít
<1, 
	tI≈utTu∂e
>::
	tty≥
 
	t£c⁄d_ty≥
;

414 
ty≥«me
 
	ttu∂e_ñemít
<2, 
	tI≈utTu∂e
>::
	tty≥
 
	tthúd_ty≥
;

415 
ty≥«me
 
	ttu∂e_ñemít
<3, 
	tI≈utTu∂e
>::
	tty≥
 
	tfouπh_ty≥
;

416 
ty≥«me
 
	ttu∂e_ñemít
<4, 
	tI≈utTu∂e
>::
	tty≥
 
	tfi·h_ty≥
;

417 
ty≥«me
 
	ttu∂e_ñemít
<5, 
	tI≈utTu∂e
>::
	tty≥
 
	tsixth_ty≥
;

418 
ty≥«me
 
	ttu∂e_ñemít
<6, 
	tI≈utTu∂e
>::
	tty≥
 
	t£víth_ty≥
;

419 
ty≥«me
 
	ttu∂e_ñemít
<7, 
	tI≈utTu∂e
>::
	tty≥
 
	teighth_ty≥
;

420 
ty≥«me
 
	ttu∂e_ñemít
<8, 
	tI≈utTu∂e
>::
	tty≥
 
	tnöëh_ty≥
;

421 
ty≥«me
 
	ttu∂e_ñemít
<9, 
	tI≈utTu∂e
>::
	tty≥
 
	tã¡h_ty≥
;

422 
ty≥«me
 
	töã∫Æ
::
	tègged_msg
<
	tsize_t
, 
	tfú°_ty≥
, 
	t£c⁄d_ty≥
, 
	tthúd_ty≥
,

423 
	tfouπh_ty≥
, 
	tfi·h_ty≥
, 
	tsixth_ty≥
,

424 
	t£víth_ty≥
, 
	teighth_ty≥
, 
	tnöëh_ty≥
,

425 
	tã¡h_ty≥
> 
	tty≥
;

429 
	gãm∂©e
<
ty≥«me
 
	gOuçutTu∂e
>

430 
	gödexî_ty≥s
 : 
public
 
öput_ty≥s
<
tu∂e_size
<
OuçutTu∂e
>::
vÆue
, 
	gOuçutTu∂e
> {

431 c⁄° 
	gN
 = 
tbb
::
Êow
::
tu∂e_size
<
OuçutTu∂e
>::
vÆue
;

432 
ty≥«me
 
	töput_ty≥s
<
	tN
, 
	tOuçutTu∂e
>::
	tty≥
 
	touçut_ty≥
;

433 
ty≥«me
 
	twøp_tu∂e_ñemíts
<
	tN
,
	tödexî_öput_p‹t
,
	tOuçutTu∂e
>::
	tty≥
 
	töput_p‹ts_ty≥
;

434 
	göã∫Æ
::
	tödexî_node_FE
<
	töput_p‹ts_ty≥
,
	touçut_ty≥
,
	tOuçutTu∂e
> 
	tödexî_FE_ty≥
;

435 
	göã∫Æ
::
	tödexî_node_ba£
<
	töput_p‹ts_ty≥
, 
	touçut_ty≥
, 
	tOuçutTu∂e
> 
	tödexî_ba£_ty≥
;

438 
	gãm∂©e
<
˛ass
 
	gOuçutTu∂e
>

439 
˛ass
 
	gunfﬁded_ödexî_node
 : 
public
 
ödexî_ty≥s
<
OuçutTu∂e
>::
ödexî_ba£_ty≥
 {

440 
public
:

441 
ty≥«me
 
	tödexî_ty≥s
<
	tOuçutTu∂e
>::
	töput_p‹ts_ty≥
 input_ports_type;

442 
OuçutTu∂e
 
	ttu∂e_ty≥s
;

443 
ty≥«me
 
	tödexî_ty≥s
<
	tOuçutTu∂e
>::
	touçut_ty≥
 output_type;

444 
	g¥iv©e
:

445 
ty≥«me
 
	tödexî_ty≥s
<
	tOuçutTu∂e
>::
	tödexî_ba£_ty≥
 
	tba£_ty≥
;

446 
	gpublic
:

447 
unfﬁded_ödexî_node
(
gøph
& 
g
Ë: 
ba£_ty≥
(g) {}

448 
unfﬁded_ödexî_node
(c⁄° unfﬁded_ödexî_nodê&
Ÿhî
Ë: 
ba£_ty≥
(other) {}

	@viper/concurrentqueue-src/benchmarks/tbb/internal/_flow_graph_item_buffer_impl.h

21 #i‚de‡
__TBB__Êow_gøph_ôem_buf„r_im∂_H


22 
	#__TBB__Êow_gøph_ôem_buf„r_im∂_H


	)

24 #i‚de‡
__TBB_Êow_gøph_H


25 #îr‹ 
Do
 
nŸ
 #ö˛udê
this
 
öã∫Æ
 
fûe
 
dúe˘ly
; 
u£
 
public
 
TBB
 
hódîs
 
ö°ód
.

28 
	~"tbb/öã∫Æ/_Êow_gøph_ty≥s_im∂.h
"

38 
usög
 
	göã∫Æ
::
Æig√d_∑ú
;

39 
usög
 
	göã∫Æ
::
Æignmít_of
;

41 
«me•a˚
 
	göã∫Æ
 {

43 
	gãm∂©e
 <
ty≥«me
 
	gT
,Åy≥«mê
	gA
=
ˇche_Æig√d_Æloˇt‹
<
T
> >

44 ˛as†
	côem_buf„r
 {

45 
public
:

46 
T
 
	tôem_ty≥
;

47 
	ebuf„r_ôem_°©e
 { 
	gno_ôem
=0, 
	ghas_ôem
=1, 
	gª£rved_ôem
=2 };

48 
	g¥Ÿe˘ed
:

49 
size_t
 
	tsize_ty≥
;

50 
ty≥«me
 
	tÆig√d_∑ú
<
	tôem_ty≥
, 
	tbuf„r_ôem_°©e
>::
	tty≥
 
	tbuf„r_ôem_ty≥
;

51 
ty≥«me
 
	tA
::
	tãm∂©e
 
	tªböd
<
	tbuf„r_ôem_ty≥
>::
	tŸhî
 
	tÆloˇt‹_ty≥
;

53 
buf„r_ôem_ty≥
 *
	gmy_¨øy
;

54 
size_ty≥
 
	gmy_¨øy_size
;

55 c⁄° 
size_ty≥
 
	göôül_buf„r_size
 = 4;

56 
size_ty≥
 
	gmy_hód
;

57 
size_ty≥
 
	gmy_èû
;

59 
boﬁ
 
buf„r_em±y
(Ë{  
	gmy_hód
 =
my_èû
; }

61 
	gbuf„r_ôem_ty≥
 &
ôem
(
size_ty≥
 
i
) {

62 
__TBB_ASSERT
(!(
size_ty≥
(&(
my_¨øy
[
i
&(
my_¨øy_size
-1)].
£c⁄d
))%
Æignmít_of
<
buf„r_ôem_°©e
>::
vÆue
),
NULL
);

63 
__TBB_ASSERT
(!(
size_ty≥
(&(
my_¨øy
[
i
&(
my_¨øy_size
-1)].
fú°
))%
Æignmít_of
<
ôem_ty≥
>::
vÆue
), 
NULL
);

64  
	gmy_¨øy
[
i
 & (
my_¨øy_size
 - 1) ];

67 
boﬁ
 
my_ôem_vÆid
(
size_ty≥
 
i
Ë{  
ôem
(i).
	g£c⁄d
 !
no_ôem
; }

68 
boﬁ
 
my_ôem_ª£rved
(
size_ty≥
 
i
Ë{  
ôem
(i).
	g£c⁄d
 =
ª£rved_ôem
; }

71 c⁄° 
	gôem_ty≥
 &
gë_my_ôem
(
size_t
 
i
) {

72 
__TBB_ASSERT
(
my_ôem_vÆid
(
i
),"attemptÅo get invalid item");

73 
ôem_ty≥
 *
	gôm
 = (
tbb
::
öã∫Æ
::
pu¬ed_ˇ°
<ôem_ty≥ *>(&(
ôem
(
i
).
fú°
)));

74  *(c⁄° 
	gôem_ty≥
 *)
	gôm
;

78 
£t_my_ôem
(
size_t
 
i
, c⁄° 
ôem_ty≥
 &
o
) {

79 if(
ôem
(
i
).
	g£c⁄d
 !
no_ôem
) {

80 
de°roy_ôem
(
i
);

82 
√w
(&(
ôem
(
i
).
fú°
)Ë
ôem_ty≥
(
o
);

83 
ôem
(
i
).
	g£c⁄d
 = 
has_ôem
;

87 
„tch_ôem
(
size_t
 
i
, 
ôem_ty≥
 &
o
) {

88 
__TBB_ASSERT
(
my_ôem_vÆid
(
i
), "TryingÅo fetchánÉmpty slot");

89 
	go
 = 
gë_my_ôem
(
i
);

90 
de°roy_ôem
(
i
);

96 
move_ôem
(
size_t
 
to
, size_à
‰om
) {

97 
__TBB_ASSERT
(!
my_ôem_vÆid
(
to
), "TryingÅo moveÅoáÇon-empty slot");

98 
__TBB_ASSERT
(
my_ôem_vÆid
(
‰om
), "TryingÅo move frománÉmpty slot");

99 
£t_my_ôem
(
to
, 
gë_my_ôem
(
‰om
));

100 
de°roy_ôem
(
‰om
);

105 
boﬁ
 
∂a˚_ôem
(
size_t
 
hîe
, c⁄° 
ôem_ty≥
 &
me
) {

106 #i‡!
TBB_DEPRECATED_SEQUENCER_DUPLICATES


107 if(
my_ôem_vÆid
(
hîe
)Ë 
	gÁl£
;

109 
£t_my_ôem
(
hîe
, 
me
);

110  
	gåue
;

114 
sw≠_ôems
(
size_t
 
i
, size_à
j
) {

115 
__TBB_ASSERT
(
my_ôem_vÆid
(
i
Ë&& my_ôem_vÆid(
j
), "attemptÅo swap invalid item(s)");

116 
ôem_ty≥
 
	gãmp
 = 
gë_my_ôem
(
i
);

117 
£t_my_ôem
(
i
, 
gë_my_ôem
(
j
));

118 
£t_my_ôem
(
j
, 
ãmp
);

121 
de°roy_ôem
(
size_ty≥
 
i
) {

122 
__TBB_ASSERT
(
my_ôem_vÆid
(
i
), "destruction of invalid item");

123 (
	gtbb
::
öã∫Æ
::
pu¬ed_ˇ°
<
ôem_ty≥
 *>(&(
ôem
(
i
).
fú°
)))->~item_type();

124 
ôem
(
i
).
	g£c⁄d
 = 
no_ôem
;

128 
c›y_‰⁄t
(
ôem_ty≥
 &
v
) {

129 
__TBB_ASSERT
(
my_ôem_vÆid
(
my_hód
), "attemptÅo fetch headÇon-item");

130 
	gv
 = 
gë_my_ôem
(
my_hód
);

133 
c›y_back
(
ôem_ty≥
 &
v
) {

134 
__TBB_ASSERT
(
my_ôem_vÆid
(
my_èû
-1), "attemptÅo fetch headÇon-item");

135 
	gv
 = 
gë_my_ôem
(
my_èû
-1);

139 
ª£rve_ôem
(
size_ty≥
 
i
Ë{ 
__TBB_ASSERT
(
my_ôem_vÆid
(iË&& !
my_ôem_ª£rved
(i), "ôem c™nŸ bêª£rved"); 
ôem
(i).
	g£c⁄d
 = 
ª£rved_ôem
; }

140 
ªÀa£_ôem
(
size_ty≥
 
i
Ë{ 
__TBB_ASSERT
(
my_ôem_ª£rved
(i), "ôem i†nŸÑe£rved"); 
ôem
(i).
	g£c⁄d
 = 
has_ôem
; }

142 
de°roy_‰⁄t
(Ë{ 
de°roy_ôem
(
my_hód
); ++
	gmy_hód
; }

143 
de°roy_back
(Ë{ 
de°roy_ôem
(
my_èû
-1); --
	gmy_èû
; }

147 
size_ty≥
 
size
(
size_t
 
√w_èû
 = 0Ë{  (√w_èû ?Çew_èû : 
my_èû
Ë- 
my_hód
; }

148 
size_ty≥
 
ˇ∑côy
(Ë{  
	gmy_¨øy_size
; }

151 
boﬁ
 
buf„r_fuŒ
(Ë{  
size
(Ë>
ˇ∑côy
(); }

154 
grow_my_¨øy
–
size_t
 
möimum_size
 ) {

156 
__TBB_ASSERT
(
ˇ∑côy
(Ë>
my_èû
 - 
my_hód
, "total itemsÉxceed capacity");

157 
size_ty≥
 
	g√w_size
 = 
my_¨øy_size
 ? 2*my_¨øy_sizê: 
öôül_buf„r_size
;

158  
	g√w_size
<
	gmöimum_size
 )

159 
	g√w_size
*=2;

161 
buf„r_ôem_ty≥
* 
	g√w_¨øy
 = 
Æloˇt‹_ty≥
().
Æloˇã
(
√w_size
);

164  
size_ty≥
 
	gi
=0; i<
	g√w_size
; ++òË{ 
	g√w_¨øy
[
i
].
	g£c⁄d
 = 
no_ôem
; }

166  
size_ty≥
 
	gi
=
my_hód
; i<
	gmy_èû
; ++i) {

167 if(
my_ôem_vÆid
(
i
)) {

169 *
	g√w_•a˚
 = (*)&(
√w_¨øy
[
i
&(
√w_size
-1)].
fú°
);

170 ()
√w
(
√w_•a˚
Ë
ôem_ty≥
(
gë_my_ôem
(
i
));

171 
	g√w_¨øy
[
i
&(
√w_size
-1)].
	g£c⁄d
 = 
ôem
(i).
£c⁄d
;

175 
˛ón_up_buf„r
–
Ál£
);

177 
	gmy_¨øy
 = 
√w_¨øy
;

178 
	gmy_¨øy_size
 = 
√w_size
;

181 
boﬁ
 
push_back
(
ôem_ty≥
 &
v
) {

182 if(
buf„r_fuŒ
()) {

183 
grow_my_¨øy
(
size
() + 1);

185 
£t_my_ôem
(
my_èû
, 
v
);

186 ++
	gmy_èû
;

187  
	gåue
;

190 
boﬁ
 
p›_back
(
ôem_ty≥
 &
v
) {

191 i‡(!
my_ôem_vÆid
(
my_èû
-1)) {

192  
	gÁl£
;

194 
c›y_back
(
v
);

195 
de°roy_back
();

196  
	gåue
;

199 
boﬁ
 
p›_‰⁄t
(
ôem_ty≥
 &
v
) {

200 if(!
my_ôem_vÆid
(
my_hód
)) {

201  
	gÁl£
;

203 
c›y_‰⁄t
(
v
);

204 
de°roy_‰⁄t
();

205  
	gåue
;

210 
˛ón_up_buf„r
(
boﬁ
 
ª£t_poöãrs
) {

211 i‡(
	gmy_¨øy
) {

212  
size_ty≥
 
	gi
=0; i<
	gmy_¨øy_size
; ++i ) {

213 if(
my_ôem_vÆid
(
i
))

214 
de°roy_ôem
(
i
);

216 
Æloˇt‹_ty≥
().
dóŒoˇã
(
my_¨øy
,
my_¨øy_size
);

218 
	gmy_¨øy
 = 
NULL
;

219 if(
	gª£t_poöãrs
) {

220 
	gmy_hód
 = 
my_èû
 = 
my_¨øy_size
 = 0;

224 
	gpublic
:

226 
ôem_buf„r
–Ë: 
my_¨øy
(
NULL
), 
my_¨øy_size
(0),

227 
my_hód
(0), 
my_èû
(0) {

228 
grow_my_¨øy
(
öôül_buf„r_size
);

231 ~
ôem_buf„r
() {

232 
˛ón_up_buf„r
–
åue
);

235 
ª£t
(Ë{ 
˛ón_up_buf„r
–
åue
); 
grow_my_¨øy
(
öôül_buf„r_size
); }

242 
	gãm∂©e
<
ty≥«me
 
	gT
,Åy≥«mê
	gA
=
ˇche_Æig√d_Æloˇt‹
<
T
> >

243 
˛ass
 
ª£rvabÀ_ôem_buf„r
 : 
public
 
ôem_buf„r
<
T
, 
	gA
> {

244 
	g¥Ÿe˘ed
:

245 
usög
 
ôem_buf„r
<
T
, 
	gA
>::
my_ôem_vÆid
;

246 
usög
 
	gôem_buf„r
<
	gT
, 
	gA
>::
my_hód
;

248 
	gpublic
:

249 
ª£rvabÀ_ôem_buf„r
(Ë: 
ôem_buf„r
<
T
, 
	gA
>(), 
my_ª£rved
(
Ál£
) {}

250 
ª£t
(Ë{
	gmy_ª£rved
 = 
Ál£
; 
	gôem_buf„r
<
	gT
,
	gA
>::reset(); }

251 
	g¥Ÿe˘ed
:

253 
boﬁ
 
ª£rve_‰⁄t
(
T
 &
v
) {

254 if(
my_ª£rved
 || !
my_ôem_vÆid
(
my_hód
)Ë 
Ál£
;

255 
	gmy_ª£rved
 = 
åue
;

257 
	gthis
->
c›y_‰⁄t
(
v
);

258 
	gthis
->
ª£rve_ôem
(
this
->
my_hód
);

259  
	gåue
;

262 
c⁄sume_‰⁄t
() {

263 
__TBB_ASSERT
(
my_ª£rved
, "AttemptÅo consumeáÇon-reserved item");

264 
	gthis
->
de°roy_‰⁄t
();

265 
	gmy_ª£rved
 = 
Ál£
;

268 
ªÀa£_‰⁄t
() {

269 
__TBB_ASSERT
(
my_ª£rved
, "AttemptÅoÑeleaseáÇon-reserved item");

270 
	gthis
->
ªÀa£_ôem
(
this
->
my_hód
);

271 
	gmy_ª£rved
 = 
Ál£
;

274 
boﬁ
 
	gmy_ª£rved
;

	@viper/concurrentqueue-src/benchmarks/tbb/internal/_flow_graph_join_impl.h

21 #i‚de‡
__TBB__Êow_gøph_joö_im∂_H


22 
	#__TBB__Êow_gøph_joö_im∂_H


	)

24 #i‚de‡
__TBB_Êow_gøph_H


25 #îr‹ 
Do
 
nŸ
 #ö˛udê
this
 
öã∫Æ
 
fûe
 
dúe˘ly
; 
u£
 
public
 
TBB
 
hódîs
 
ö°ód
.

28 
	~"_Êow_gøph_ty≥s_im∂.h
"

30 
«me•a˚
 
	göã∫Æ
 {

32 
size_t
 
	tèg_vÆue
;

33 c⁄° 
èg_vÆue
 
	gNO_TAG
 =Åag_value(-1);

35 
	sf‹w¨dög_ba£
 {

36 
f‹w¨dög_ba£
(
gøph
 &
g
Ë: 
my_gøph_±r
(&g), 
cuºít_èg
(
NO_TAG
) {}

37 
	gvútuÆ
 ~
f‹w¨dög_ba£
() {}

40 
vútuÆ
 
èsk
 * 
de¸emít_p‹t_cou¡
(
boﬁ
 
h™dÀ_èsk
) = 0;

41 
vútuÆ
 
ö¸emít_p‹t_cou¡
() = 0;

42 
vútuÆ
 
èsk
 * 
ö¸emít_èg_cou¡
(
èg_vÆue
 , 
boﬁ
 ) { 
	gNULL
;}

44 
gøph
* 
	gmy_gøph_±r
;

45 
èg_vÆue
 
	gcuºít_èg
;

48 
	gãm∂©e
< 
	gN
 >

49 
	sjoö_hñ≥r
 {

51 
	gãm∂©e
< 
ty≥«me
 
	gTu∂eTy≥
,Åy≥«mê
	gP‹tTy≥
 >

52 
ölöe
 
£t_joö_node_poöãr
(
Tu∂eTy≥
 &
my_öput
, 
P‹tTy≥
 *
p‹t
) {

53 
	gtbb
::
Êow
::
gë
<
N
-1>–
my_öput
 ).
£t_joö_node_poöãr
(
p‹t
);

54 
	gjoö_hñ≥r
<
	gN
-1>::
£t_joö_node_poöãr
–
my_öput
, 
p‹t
 );

56 
	gãm∂©e
< 
ty≥«me
 
	gTu∂eTy≥
 >

57 
ölöe
 
c⁄sume_ª£rv©i⁄s
–
Tu∂eTy≥
 &
my_öput
 ) {

58 
	gtbb
::
Êow
::
gë
<
N
-1>–
my_öput
 ).
c⁄sume
();

59 
	gjoö_hñ≥r
<
	gN
-1>::
c⁄sume_ª£rv©i⁄s
–
my_öput
 );

62 
	gãm∂©e
< 
ty≥«me
 
	gTu∂eTy≥
 >

63 
ölöe
 
ªÀa£_my_ª£rv©i⁄
–
Tu∂eTy≥
 &
my_öput
 ) {

64 
	gtbb
::
Êow
::
gë
<
N
-1>–
my_öput
 ).
ªÀa£
();

67 
	gãm∂©e
 <
ty≥«me
 
	gTu∂eTy≥
>

68 
ölöe
 
ªÀa£_ª£rv©i⁄s
–
Tu∂eTy≥
 &
my_öput
) {

69 
	gjoö_hñ≥r
<
	gN
-1>::
ªÀa£_ª£rv©i⁄s
(
my_öput
);

70 
ªÀa£_my_ª£rv©i⁄
(
my_öput
);

73 
	gãm∂©e
< 
ty≥«me
 
	gI≈utTu∂e
,Åy≥«mê
	gOuçutTu∂e
 >

74 
ölöe
 
boﬁ
 
ª£rve
–
I≈utTu∂e
 &
my_öput
, 
OuçutTu∂e
 &
out
) {

75 i‡–!
	gtbb
::
Êow
::
gë
<
N
-1>–
my_öput
 ).
ª£rve
–
tbb
::Êow::gë<N-1>–
out
 ) ) )  
Ál£
;

76 i‡–!
	gjoö_hñ≥r
<
	gN
-1>::
ª£rve
–
my_öput
, 
out
 ) ) {

77 
ªÀa£_my_ª£rv©i⁄
–
my_öput
 );

78  
	gÁl£
;

80  
	gåue
;

83 
	gãm∂©e
<
ty≥«me
 
	gI≈utTu∂e
,Åy≥«mê
	gOuçutTu∂e
>

84 
ölöe
 
boﬁ
 
gë_my_ôem
–
I≈utTu∂e
 &
my_öput
, 
OuçutTu∂e
 &
out
) {

85 
boﬁ
 
	gªs
 = 
tbb
::
Êow
::
gë
<
N
-1>(
my_öput
).
gë_ôem
—bb::Êow::gë<N-1>(
out
) );

86  
	gjoö_hñ≥r
<
	gN
-1>::
gë_my_ôem
(
my_öput
, 
out
Ë&& 
	gªs
;

89 
	gãm∂©e
<
ty≥«me
 
	gI≈utTu∂e
,Åy≥«mê
	gOuçutTu∂e
>

90 
ölöe
 
boﬁ
 
gë_ôems
(
I≈utTu∂e
 &
my_öput
, 
OuçutTu∂e
 &
out
) {

91  
gë_my_ôem
(
my_öput
, 
out
);

94 
	gãm∂©e
<
ty≥«me
 
	gI≈utTu∂e
>

95 
ölöe
 
ª£t_my_p‹t
(
I≈utTu∂e
 &
my_öput
) {

96 
	gjoö_hñ≥r
<
	gN
-1>::
ª£t_my_p‹t
(
my_öput
);

97 
	gtbb
::
Êow
::
gë
<
N
-1>(
my_öput
).
ª£t_p‹t
();

100 
	gãm∂©e
<
ty≥«me
 
	gI≈utTu∂e
>

101 
ölöe
 
ª£t_p‹ts
(
I≈utTu∂e
& 
my_öput
) {

102 
ª£t_my_p‹t
(
my_öput
);

105 
	gãm∂©e
<
ty≥«me
 
	gI≈utTu∂e
,Åy≥«mê
	gTagFuncTu∂e
>

106 
ölöe
 
£t_èg_func
(
I≈utTu∂e
 &
my_öput
, 
TagFuncTu∂e
 &
my_èg_funcs
) {

107 
	gtbb
::
Êow
::
gë
<
N
-1>(
my_öput
).
£t_my_‹igöÆ_èg_func
(
tbb
::Êow::gë<N-1>(
my_èg_funcs
));

108 
	gtbb
::
Êow
::
gë
<
N
-1>(
my_öput
).
£t_my_èg_func
(
tbb
::Êow::gë<N-1>(my_öput).
my_‹igöÆ_func
()->
˛⁄e
());

109 
	gtbb
::
Êow
::
gë
<
N
-1>(
my_èg_funcs
Ë
NULL
;

110 
	gjoö_hñ≥r
<
	gN
-1>::
£t_èg_func
(
my_öput
, 
my_èg_funcs
);

113 
	gãm∂©e
< 
ty≥«me
 
	gTagFuncTu∂e1
,Åy≥«mê
	gTagFuncTu∂e2
>

114 
ölöe
 
c›y_èg_fun˘‹s
(
TagFuncTu∂e1
 &
my_öputs
, 
TagFuncTu∂e2
 &
Ÿhî_öputs
) {

115 if(
	gtbb
::
Êow
::
gë
<
N
-1>(
Ÿhî_öputs
).
my_‹igöÆ_func
()) {

116 
tbb
::
Êow
::
gë
<
N
-1>(
my_öputs
).
£t_my_èg_func
—bb::Êow::gë<N-1>(
Ÿhî_öputs
).
my_‹igöÆ_func
()->
˛⁄e
());

117 
	gtbb
::
Êow
::
gë
<
N
-1>(
my_öputs
).
£t_my_‹igöÆ_èg_func
(
tbb
::Êow::gë<N-1>(
Ÿhî_öputs
).
my_‹igöÆ_func
()->
˛⁄e
());

119 
	gjoö_hñ≥r
<
	gN
-1>::
c›y_èg_fun˘‹s
(
my_öputs
, 
Ÿhî_öputs
);

122 
	gãm∂©e
<
ty≥«me
 
	gI≈utTu∂e
>

123 
ölöe
 
ª£t_öputs
(
I≈utTu∂e
 &
my_öput
 
__TBB_PFG_RESET_ARG
(
__TBB_COMMA
 
ª£t_Êags
 
f
)) {

124 
	gjoö_hñ≥r
<
	gN
-1>::
ª£t_öputs
(
my_öput
 
__TBB_PFG_RESET_ARG
(
__TBB_COMMA
 
f
));

125 
	gtbb
::
Êow
::
gë
<
N
-1>(
my_öput
).
ª£t_ª˚ivî
(
__TBB_PFG_RESET_ARG
(
f
));

129 
	gãm∂©e
< >

130 
	gjoö_hñ≥r
<1> {

132 
	gãm∂©e
< 
ty≥«me
 
	gTu∂eTy≥
,Åy≥«mê
	gP‹tTy≥
 >

133 
ölöe
 
£t_joö_node_poöãr
(
Tu∂eTy≥
 &
my_öput
, 
P‹tTy≥
 *
p‹t
) {

134 
	gtbb
::
Êow
::
gë
<0>–
my_öput
 ).
£t_joö_node_poöãr
(
p‹t
);

137 
	gãm∂©e
< 
ty≥«me
 
	gTu∂eTy≥
 >

138 
ölöe
 
c⁄sume_ª£rv©i⁄s
–
Tu∂eTy≥
 &
my_öput
 ) {

139 
	gtbb
::
Êow
::
gë
<0>–
my_öput
 ).
c⁄sume
();

142 
	gãm∂©e
< 
ty≥«me
 
	gTu∂eTy≥
 >

143 
ölöe
 
ªÀa£_my_ª£rv©i⁄
–
Tu∂eTy≥
 &
my_öput
 ) {

144 
	gtbb
::
Êow
::
gë
<0>–
my_öput
 ).
ªÀa£
();

147 
	gãm∂©e
<
ty≥«me
 
	gTu∂eTy≥
>

148 
ölöe
 
ªÀa£_ª£rv©i⁄s
–
Tu∂eTy≥
 &
my_öput
) {

149 
ªÀa£_my_ª£rv©i⁄
(
my_öput
);

152 
	gãm∂©e
< 
ty≥«me
 
	gI≈utTu∂e
,Åy≥«mê
	gOuçutTu∂e
 >

153 
ölöe
 
boﬁ
 
ª£rve
–
I≈utTu∂e
 &
my_öput
, 
OuçutTu∂e
 &
out
) {

154  
	gtbb
::
Êow
::
gë
<0>–
my_öput
 ).
ª£rve
–
tbb
::Êow::gë<0>–
out
 ) );

157 
	gãm∂©e
<
ty≥«me
 
	gI≈utTu∂e
,Åy≥«mê
	gOuçutTu∂e
>

158 
ölöe
 
boﬁ
 
gë_my_ôem
–
I≈utTu∂e
 &
my_öput
, 
OuçutTu∂e
 &
out
) {

159  
	gtbb
::
Êow
::
gë
<0>(
my_öput
).
gë_ôem
(
tbb
::Êow::gë<0>(
out
));

162 
	gãm∂©e
<
ty≥«me
 
	gI≈utTu∂e
,Åy≥«mê
	gOuçutTu∂e
>

163 
ölöe
 
boﬁ
 
gë_ôems
(
I≈utTu∂e
 &
my_öput
, 
OuçutTu∂e
 &
out
) {

164  
gë_my_ôem
(
my_öput
, 
out
);

167 
	gãm∂©e
<
ty≥«me
 
	gI≈utTu∂e
>

168 
ölöe
 
ª£t_my_p‹t
(
I≈utTu∂e
 &
my_öput
) {

169 
	gtbb
::
Êow
::
gë
<0>(
my_öput
).
ª£t_p‹t
();

172 
	gãm∂©e
<
ty≥«me
 
	gI≈utTu∂e
>

173 
ölöe
 
ª£t_p‹ts
(
I≈utTu∂e
& 
my_öput
) {

174 
ª£t_my_p‹t
(
my_öput
);

177 
	gãm∂©e
<
ty≥«me
 
	gI≈utTu∂e
,Åy≥«mê
	gTagFuncTu∂e
>

178 
ölöe
 
£t_èg_func
(
I≈utTu∂e
 &
my_öput
, 
TagFuncTu∂e
 &
my_èg_funcs
) {

179 
	gtbb
::
Êow
::
gë
<0>(
my_öput
).
£t_my_‹igöÆ_èg_func
(
tbb
::Êow::gë<0>(
my_èg_funcs
));

180 
	gtbb
::
Êow
::
gë
<0>(
my_öput
).
£t_my_èg_func
(
tbb
::Êow::gë<0>(my_öput).
my_‹igöÆ_func
()->
˛⁄e
());

181 
	gtbb
::
Êow
::
gë
<0>(
my_èg_funcs
Ë
NULL
;

184 
	gãm∂©e
< 
ty≥«me
 
	gTagFuncTu∂e1
,Åy≥«mê
	gTagFuncTu∂e2
>

185 
ölöe
 
c›y_èg_fun˘‹s
(
TagFuncTu∂e1
 &
my_öputs
, 
TagFuncTu∂e2
 &
Ÿhî_öputs
) {

186 if(
	gtbb
::
Êow
::
gë
<0>(
Ÿhî_öputs
).
my_‹igöÆ_func
()) {

187 
tbb
::
Êow
::
gë
<0>(
my_öputs
).
£t_my_èg_func
—bb::Êow::gë<0>(
Ÿhî_öputs
).
my_‹igöÆ_func
()->
˛⁄e
());

188 
	gtbb
::
Êow
::
gë
<0>(
my_öputs
).
£t_my_‹igöÆ_èg_func
(
tbb
::Êow::gë<0>(
Ÿhî_öputs
).
my_‹igöÆ_func
()->
˛⁄e
());

191 
	gãm∂©e
<
ty≥«me
 
	gI≈utTu∂e
>

192 
ölöe
 
ª£t_öputs
(
I≈utTu∂e
 &
my_öput
 
__TBB_PFG_RESET_ARG
(
__TBB_COMMA
 
ª£t_Êags
 
f
)) {

193 
	gtbb
::
Êow
::
gë
<0>(
my_öput
).
ª£t_ª˚ivî
(
__TBB_PFG_RESET_ARG
(
f
));

198 
	gãm∂©e
< 
ty≥«me
 
	gT
 >

199 
˛ass
 
	gª£rvög_p‹t
 : 
public
 
ª˚ivî
<
T
> {

200 
public
:

201 
T
 
	töput_ty≥
;

202 
	g£ndî
<
	tT
> 
	t¥ede˚ss‹_ty≥
;

203 #i‡
TBB_PREVIEW_FLOW_GRAPH_FEATURES


204 
	g°d
::
	tve˘‹
<
	t¥ede˚ss‹_ty≥
 *> 
	t¥ede˚ss‹_ve˘‹_ty≥
;

206 
	g¥iv©e
:

208 
	e›_ty≥
 { 
ªg_¥ed
, 
	gªm_¥ed
, 
	gªs_ôem
, 
	gªl_ªs
, 
	gc⁄_ªs


209 #i‡
TBB_PREVIEW_FLOW_GRAPH_FEATURES


210 , 
	gadd_b…_¥ed
, 
	gdñ_b…_¥ed
, 
	gb…_¥ed_˙t
, 
	gb…_¥ed_˝y


213 
	e›_°©
 {
	gWAIT
=0, 
	gSUCCEEDED
, 
	gFAILED
};

214 
	gª£rvög_p‹t
<
	tT
> 
	tmy_˛ass
;

216 
˛ass
 
	gª£rvög_p‹t_›î©i⁄
 : 
public
 
aggªg©ed_›î©i⁄
<
ª£rvög_p‹t_›î©i⁄
> {

217 
public
:

218 
ty≥
;

220 
T
 *
	gmy_¨g
;

221 
¥ede˚ss‹_ty≥
 *
	gmy_¥ed
;

222 #i‡
TBB_PREVIEW_FLOW_GRAPH_FEATURES


223 
size_t
 
	g˙t_vÆ
;

224 
¥ede˚ss‹_ve˘‹_ty≥
 *
	gpvec
;

227 
ª£rvög_p‹t_›î©i⁄
(c⁄° 
T
& 
e
, 
›_ty≥
 
t
) :

228 
ty≥
((
t
)), 
my_¨g
(
c⁄°_ˇ°
<
T
*>(&
e
)) {}

229 
ª£rvög_p‹t_›î©i⁄
(c⁄° 
¥ede˚ss‹_ty≥
 &
s
, 
›_ty≥
 
t
Ë: 
ty≥
((t)),

230 
my_¥ed
(
c⁄°_ˇ°
<
¥ede˚ss‹_ty≥
 *>(&
s
)) {}

231 
ª£rvög_p‹t_›î©i⁄
(
›_ty≥
 
t
Ë: 
ty≥
((t)) {}

234 
	göã∫Æ
::
	taggªg©ög_fun˘‹
<
	tmy_˛ass
, 
	tª£rvög_p‹t_›î©i⁄
> 
	tmy_h™dÀr
;

235 
‰õnd
 
˛ass
 
	göã∫Æ
::
aggªg©ög_fun˘‹
<
my_˛ass
, 
	gª£rvög_p‹t_›î©i⁄
>;

236 
	gaggªg©‹
<
	gmy_h™dÀr
, 
	gª£rvög_p‹t_›î©i⁄
> 
	gmy_aggªg©‹
;

238 
h™dÀ_›î©i⁄s
(
ª£rvög_p‹t_›î©i⁄
* 
›_li°
) {

239 
ª£rvög_p‹t_›î©i⁄
 *
	gcuºít
;

240 
boﬁ
 
	gno_¥ede˚ss‹s
;

241 
	g›_li°
) {

242 
	gcuºít
 = 
›_li°
;

243 
	g›_li°
 = 
›_li°
->
√xt
;

244 
	gcuºít
->
	gty≥
) {

245 
	gªg_¥ed
:

246 
no_¥ede˚ss‹s
 = 
my_¥ede˚ss‹s
.
em±y
();

247 
	gmy_¥ede˚ss‹s
.
add
(*(
cuºít
->
my_¥ed
));

248 i‡–
	gno_¥ede˚ss‹s
 ) {

249 (Ë
	gmy_joö
->
de¸emít_p‹t_cou¡
(
åue
);

251 
__TBB_°‹e_wôh_ªÀa£
(
cuºít
->
°©us
, 
SUCCEEDED
);

253 
	gªm_¥ed
:

254 
my_¥ede˚ss‹s
.
ªmove
(*(
cuºít
->
my_¥ed
));

255 if(
	gmy_¥ede˚ss‹s
.
em±y
()Ë
	gmy_joö
->
ö¸emít_p‹t_cou¡
();

256 
__TBB_°‹e_wôh_ªÀa£
(
cuºít
->
°©us
, 
SUCCEEDED
);

258 
	gªs_ôem
:

259 i‡–
ª£rved
 ) {

260 
__TBB_°‹e_wôh_ªÀa£
(
cuºít
->
°©us
, 
FAILED
);

262 i‡–
	gmy_¥ede˚ss‹s
.
åy_ª£rve
–*(
cuºít
->
my_¨g
) ) ) {

263 
	gª£rved
 = 
åue
;

264 
__TBB_°‹e_wôh_ªÀa£
(
cuºít
->
°©us
, 
SUCCEEDED
);

266 i‡–
	gmy_¥ede˚ss‹s
.
em±y
() ) {

267 
	gmy_joö
->
ö¸emít_p‹t_cou¡
();

269 
__TBB_°‹e_wôh_ªÀa£
(
cuºít
->
°©us
, 
FAILED
);

272 
	gªl_ªs
:

273 
ª£rved
 = 
Ál£
;

274 
	gmy_¥ede˚ss‹s
.
åy_ªÀa£
( );

275 
__TBB_°‹e_wôh_ªÀa£
(
cuºít
->
°©us
, 
SUCCEEDED
);

277 
	gc⁄_ªs
:

278 
ª£rved
 = 
Ál£
;

279 
	gmy_¥ede˚ss‹s
.
åy_c⁄sume
( );

280 
__TBB_°‹e_wôh_ªÀa£
(
cuºít
->
°©us
, 
SUCCEEDED
);

282 #i‡
TBB_PREVIEW_FLOW_GRAPH_FEATURES


283 
	gadd_b…_¥ed
:

284 
my_¥ede˚ss‹s
.
öã∫Æ_add_buût_¥ede˚ss‹
(*(
cuºít
->
my_¥ed
));

285 
__TBB_°‹e_wôh_ªÀa£
(
cuºít
->
°©us
, 
SUCCEEDED
);

287 
	gdñ_b…_¥ed
:

288 
my_¥ede˚ss‹s
.
öã∫Æ_dñëe_buût_¥ede˚ss‹
(*(
cuºít
->
my_¥ed
));

289 
__TBB_°‹e_wôh_ªÀa£
(
cuºít
->
°©us
, 
SUCCEEDED
);

291 
	gb…_¥ed_˙t
:

292 
cuºít
->
˙t_vÆ
 = 
my_¥ede˚ss‹s
.
¥ede˚ss‹_cou¡
();

293 
__TBB_°‹e_wôh_ªÀa£
(
cuºít
->
°©us
, 
SUCCEEDED
);

295 
	gb…_¥ed_˝y
:

296 
my_¥ede˚ss‹s
.
c›y_¥ede˚ss‹s
(*(
cuºít
->
pvec
));

297 
__TBB_°‹e_wôh_ªÀa£
(
cuºít
->
°©us
, 
SUCCEEDED
);

304 
	g¥Ÿe˘ed
:

305 
ãm∂©e
< 
ty≥«me
 
R
,Åy≥«mê
	gB
 > 
‰õnd
 
˛ass
 
	grun_™d_put_èsk
;

306 
	gãm∂©e
<
ty≥«me
 
	gX
,Åy≥«mê
	gY
> 
‰õnd
 
˛ass
 
	göã∫Æ
::
brﬂdˇ°_ˇche
;

307 
	gãm∂©e
<
ty≥«me
 
	gX
,Åy≥«mê
	gY
> 
‰õnd
 
˛ass
 
	göã∫Æ
::
round_robö_ˇche
;

308 
èsk
 *
åy_put_èsk
–c⁄° 
T
 & ) {

309  
	gNULL
;

312 
	gpublic
:

315 
ª£rvög_p‹t
(Ë: 
ª£rved
(
Ál£
) {

316 
my_joö
 = 
NULL
;

317 
	gmy_¥ede˚ss‹s
.
£t_ow√r
–
this
 );

318 
	gmy_aggªg©‹
.
öôülize_h™dÀr
(
my_h™dÀr
(
this
));

322 
ª£rvög_p‹t
(c⁄°Ñe£rvög_p‹t& ) : 
ª˚ivî
<
T
>() {

323 
ª£rved
 = 
Ál£
;

324 
	gmy_joö
 = 
NULL
;

325 
	gmy_¥ede˚ss‹s
.
£t_ow√r
–
this
 );

326 
	gmy_aggªg©‹
.
öôülize_h™dÀr
(
my_h™dÀr
(
this
));

329 
£t_joö_node_poöãr
(
f‹w¨dög_ba£
 *
joö
) {

330 
	gmy_joö
 = 
joö
;

334 
boﬁ
 
ªgi°î_¥ede˚ss‹
–
£ndî
<
T
> &
§c
 ) {

335 
ª£rvög_p‹t_›î©i⁄
 
›_d©a
(
§c
, 
ªg_¥ed
);

336 
	gmy_aggªg©‹
.
execuã
(&
›_d©a
);

337  
	g›_d©a
.
	g°©us
 =
SUCCEEDED
;

341 
boﬁ
 
ªmove_¥ede˚ss‹
–
£ndî
<
T
> &
§c
 ) {

342 
ª£rvög_p‹t_›î©i⁄
 
›_d©a
(
§c
, 
ªm_¥ed
);

343 
	gmy_aggªg©‹
.
execuã
(&
›_d©a
);

344  
	g›_d©a
.
	g°©us
 =
SUCCEEDED
;

348 
boﬁ
 
ª£rve
–
T
 &
v
 ) {

349 
ª£rvög_p‹t_›î©i⁄
 
›_d©a
(
v
, 
ªs_ôem
);

350 
	gmy_aggªg©‹
.
execuã
(&
›_d©a
);

351  
	g›_d©a
.
	g°©us
 =
SUCCEEDED
;

355 
ªÀa£
( ) {

356 
ª£rvög_p‹t_›î©i⁄
 
›_d©a
(
ªl_ªs
);

357 
	gmy_aggªg©‹
.
execuã
(&
›_d©a
);

361 
c⁄sume
( ) {

362 
ª£rvög_p‹t_›î©i⁄
 
›_d©a
(
c⁄_ªs
);

363 
	gmy_aggªg©‹
.
execuã
(&
›_d©a
);

366 #i‡
TBB_PREVIEW_FLOW_GRAPH_FEATURES


367  
öã∫Æ_add_buût_¥ede˚ss‹
(
¥ede˚ss‹_ty≥
 &
§c
) {

368 
ª£rvög_p‹t_›î©i⁄
 
›_d©a
(
§c
, 
add_b…_¥ed
);

369 
	gmy_aggªg©‹
.
execuã
(&
›_d©a
);

372  
öã∫Æ_dñëe_buût_¥ede˚ss‹
(
¥ede˚ss‹_ty≥
 &
§c
) {

373 
ª£rvög_p‹t_›î©i⁄
 
›_d©a
(
§c
, 
dñ_b…_¥ed
);

374 
	gmy_aggªg©‹
.
execuã
(&
›_d©a
);

377  
size_t
 
¥ede˚ss‹_cou¡
() {

378 
ª£rvög_p‹t_›î©i⁄
 
›_d©a
(
b…_¥ed_˙t
);

379 
	gmy_aggªg©‹
.
execuã
(&
›_d©a
);

380  
	g›_d©a
.
	g˙t_vÆ
;

383  
c›y_¥ede˚ss‹s
(
¥ede˚ss‹_ve˘‹_ty≥
 &
v
) {

384 
ª£rvög_p‹t_›î©i⁄
 
›_d©a
(
b…_¥ed_˝y
);

385 
	g›_d©a
.
	gpvec
 = &
v
;

386 
	gmy_aggªg©‹
.
execuã
(&
›_d©a
);

390  
ª£t_ª˚ivî
–
__TBB_PFG_RESET_ARG
(
ª£t_Êags
 
f
)) {

391 
	gmy_¥ede˚ss‹s
.
ª£t
(
__TBB_PFG_RESET_ARG
(
f
));

392 
	gª£rved
 = 
Ál£
;

393 #i‡
TBB_PREVIEW_FLOW_GRAPH_FEATURES


394 
__TBB_ASSERT
(!(
f
&
rf_exåa˘
Ë|| 
my_¥ede˚ss‹s
.
em±y
(), "portÉdgesÇotÑemoved");

398 
	g¥iv©e
:

399 
f‹w¨dög_ba£
 *
my_joö
;

400 
	gª£rvabÀ_¥ede˚ss‹_ˇche
< 
	gT
, 
	gnuŒ_muãx
 > 
	gmy_¥ede˚ss‹s
;

401 
boﬁ
 
	gª£rved
;

405 
	gãm∂©e
<
ty≥«me
 
	gT
>

406 
˛ass
 
	gqueueög_p‹t
 : 
public
 
ª˚ivî
<
T
>,Öubli¯
	gôem_buf„r
<
	gT
> {

407 
	gpublic
:

408 
T
 
	töput_ty≥
;

409 
	g£ndî
<
	tT
> 
	t¥ede˚ss‹_ty≥
;

410 
	gqueueög_p‹t
<
	tT
> 
	tmy_node_ty≥
;

411 #i‡
TBB_PREVIEW_FLOW_GRAPH_FEATURES


412 
	g°d
::
	tve˘‹
<
	t¥ede˚ss‹_ty≥
 *> 
	t¥ede˚ss‹_ve˘‹_ty≥
;

416 
	g¥iv©e
:

417 
	e›_ty≥
 { 
gë__ôem
, 
	gªs_p‹t
, 
	gåy__put_èsk


418 #i‡
TBB_PREVIEW_FLOW_GRAPH_FEATURES


419 , 
	gadd_b…_¥ed
, 
	gdñ_b…_¥ed
, 
	gb…_¥ed_˙t
, 
	gb…_¥ed_˝y


422 
	e›_°©
 {
	gWAIT
=0, 
	gSUCCEEDED
, 
	gFAILED
};

423 
	gqueueög_p‹t
<
	tT
> 
	tmy_˛ass
;

425 
˛ass
 
	gqueueög_p‹t_›î©i⁄
 : 
public
 
aggªg©ed_›î©i⁄
<
queueög_p‹t_›î©i⁄
> {

426 
public
:

427 
ty≥
;

428 
T
 
	gmy_vÆ
;

429 
T
 *
	gmy_¨g
;

430 #i‡
TBB_PREVIEW_FLOW_GRAPH_FEATURES


431 
	g£ndî
<
	gT
> *
	g¥ed
;

432 
size_t
 
	g˙t_vÆ
;

433 
¥ede˚ss‹_ve˘‹_ty≥
 *
	gpvec
;

435 
èsk
 * 
	gby∑ss_t
;

437 
queueög_p‹t_›î©i⁄
(c⁄° 
T
& 
e
, 
›_ty≥
 
t
) :

438 
ty≥
((
t
)), 
my_vÆ
(
e
)

439 , 
by∑ss_t
(
NULL
)

442 
queueög_p‹t_›î©i⁄
(c⁄° 
T
* 
p
, 
›_ty≥
 
t
) :

443 
ty≥
((
t
)), 
my_¨g
(
c⁄°_ˇ°
<
T
*>(
p
))

444 , 
by∑ss_t
(
NULL
)

447 
queueög_p‹t_›î©i⁄
(
›_ty≥
 
t
Ë: 
ty≥
((t))

448 , 
by∑ss_t
(
NULL
)

452 
	göã∫Æ
::
	taggªg©ög_fun˘‹
<
	tmy_˛ass
, 
	tqueueög_p‹t_›î©i⁄
> 
	tmy_h™dÀr
;

453 
‰õnd
 
˛ass
 
	göã∫Æ
::
aggªg©ög_fun˘‹
<
my_˛ass
, 
	gqueueög_p‹t_›î©i⁄
>;

454 
	gaggªg©‹
<
	gmy_h™dÀr
, 
	gqueueög_p‹t_›î©i⁄
> 
	gmy_aggªg©‹
;

456 
h™dÀ_›î©i⁄s
(
queueög_p‹t_›î©i⁄
* 
›_li°
) {

457 
queueög_p‹t_›î©i⁄
 *
	gcuºít
;

458 
boﬁ
 
	gwas_em±y
;

459 
	g›_li°
) {

460 
	gcuºít
 = 
›_li°
;

461 
	g›_li°
 = 
›_li°
->
√xt
;

462 
	gcuºít
->
	gty≥
) {

463 
	gåy__put_èsk
: {

464 
èsk
 *
πask
 = 
NULL
;

465 
	gwas_em±y
 = 
this
->
buf„r_em±y
();

466 
	gthis
->
push_back
(
cuºít
->
my_vÆ
);

467 i‡(
	gwas_em±y
Ë
	gπask
 = 
my_joö
->
de¸emít_p‹t_cou¡
(
Ál£
);

469 
	gπask
 = 
SUCCESSFULLY_ENQUEUED
;

470 
	gcuºít
->
	gby∑ss_t
 = 
πask
;

471 
__TBB_°‹e_wôh_ªÀa£
(
cuºít
->
°©us
, 
SUCCEEDED
);

474 
	ggë__ôem
:

475 if(!
this
->
buf„r_em±y
()) {

476 
this
->
c›y_‰⁄t
(*(
cuºít
->
my_¨g
));

477 
__TBB_°‹e_wôh_ªÀa£
(
cuºít
->
°©us
, 
SUCCEEDED
);

480 
__TBB_°‹e_wôh_ªÀa£
(
cuºít
->
°©us
, 
FAILED
);

483 
	gªs_p‹t
:

484 
__TBB_ASSERT
(
this
->
my_ôem_vÆid
—his->
my_hód
), "No itemÅoÑeset");

485 
	gthis
->
de°roy_‰⁄t
();

486 if(
	gthis
->
my_ôem_vÆid
(
this
->
my_hód
)) {

487 ()
	gmy_joö
->
de¸emít_p‹t_cou¡
(
åue
);

489 
__TBB_°‹e_wôh_ªÀa£
(
cuºít
->
°©us
, 
SUCCEEDED
);

491 #i‡
TBB_PREVIEW_FLOW_GRAPH_FEATURES


492 
	gadd_b…_¥ed
:

493 
my_buût_¥ede˚ss‹s
.
add_edge
(*(
cuºít
->
¥ed
));

494 
__TBB_°‹e_wôh_ªÀa£
(
cuºít
->
°©us
, 
SUCCEEDED
);

496 
	gdñ_b…_¥ed
:

497 
my_buût_¥ede˚ss‹s
.
dñëe_edge
(*(
cuºít
->
¥ed
));

498 
__TBB_°‹e_wôh_ªÀa£
(
cuºít
->
°©us
, 
SUCCEEDED
);

500 
	gb…_¥ed_˙t
:

501 
cuºít
->
˙t_vÆ
 = 
my_buût_¥ede˚ss‹s
.
edge_cou¡
();

502 
__TBB_°‹e_wôh_ªÀa£
(
cuºít
->
°©us
, 
SUCCEEDED
);

504 
	gb…_¥ed_˝y
:

505 
my_buût_¥ede˚ss‹s
.
c›y_edges
(*(
cuºít
->
pvec
));

506 
__TBB_°‹e_wôh_ªÀa£
(
cuºít
->
°©us
, 
SUCCEEDED
);

514 
	g¥Ÿe˘ed
:

515 
ãm∂©e
< 
ty≥«me
 
R
,Åy≥«mê
	gB
 > 
‰õnd
 
˛ass
 
	grun_™d_put_èsk
;

516 
	gãm∂©e
<
ty≥«me
 
	gX
,Åy≥«mê
	gY
> 
‰õnd
 
˛ass
 
	göã∫Æ
::
brﬂdˇ°_ˇche
;

517 
	gãm∂©e
<
ty≥«me
 
	gX
,Åy≥«mê
	gY
> 
‰õnd
 
˛ass
 
	göã∫Æ
::
round_robö_ˇche
;

518  
èsk
 *
åy_put_èsk
(c⁄° 
T
 &
v
) {

519 
queueög_p‹t_›î©i⁄
 
›_d©a
(
v
, 
åy__put_èsk
);

520 
	gmy_aggªg©‹
.
execuã
(&
›_d©a
);

521 
__TBB_ASSERT
(
›_d©a
.
°©us
 =
SUCCEEDED
 || !›_d©a.
by∑ss_t
, "inconsistentÑeturn fromággregator");

522 if(!
	g›_d©a
.
	gby∑ss_t
Ë 
	gSUCCESSFULLY_ENQUEUED
;

523  
	g›_d©a
.
	gby∑ss_t
;

526 
	gpublic
:

529 
queueög_p‹t
(Ë: 
ôem_buf„r
<
T
>() {

530 
my_joö
 = 
NULL
;

531 
	gmy_aggªg©‹
.
öôülize_h™dÀr
(
my_h™dÀr
(
this
));

535 
queueög_p‹t
(c⁄° queueög_p‹t& ) : 
ª˚ivî
<
T
>(), 
	gôem_buf„r
<
	gT
>() {

536 
	gmy_joö
 = 
NULL
;

537 
	gmy_aggªg©‹
.
öôülize_h™dÀr
(
my_h™dÀr
(
this
));

541 
£t_joö_node_poöãr
(
f‹w¨dög_ba£
 *
joö
) {

542 
	gmy_joö
 = 
joö
;

545 
boﬁ
 
gë_ôem
–
T
 &
v
 ) {

546 
queueög_p‹t_›î©i⁄
 
›_d©a
(&
v
, 
gë__ôem
);

547 
	gmy_aggªg©‹
.
execuã
(&
›_d©a
);

548  
	g›_d©a
.
	g°©us
 =
SUCCEEDED
;

553 
ª£t_p‹t
() {

554 
queueög_p‹t_›î©i⁄
 
›_d©a
(
ªs_p‹t
);

555 
	gmy_aggªg©‹
.
execuã
(&
›_d©a
);

559 #i‡
TBB_PREVIEW_FLOW_GRAPH_FEATURES


560  
öã∫Æ_add_buût_¥ede˚ss‹
(
£ndî
<
T
> &
p
) {

561 
queueög_p‹t_›î©i⁄
 
›_d©a
(
add_b…_¥ed
);

562 
	g›_d©a
.
	g¥ed
 = &
p
;

563 
	gmy_aggªg©‹
.
execuã
(&
›_d©a
);

566  
öã∫Æ_dñëe_buût_¥ede˚ss‹
(
£ndî
<
T
> &
p
) {

567 
queueög_p‹t_›î©i⁄
 
›_d©a
(
dñ_b…_¥ed
);

568 
	g›_d©a
.
	g¥ed
 = &
p
;

569 
	gmy_aggªg©‹
.
execuã
(&
›_d©a
);

572  
size_t
 
¥ede˚ss‹_cou¡
() {

573 
queueög_p‹t_›î©i⁄
 
›_d©a
(
b…_¥ed_˙t
);

574 
	gmy_aggªg©‹
.
execuã
(&
›_d©a
);

575  
	g›_d©a
.
	g˙t_vÆ
;

578  
c›y_¥ede˚ss‹s
(
¥ede˚ss‹_ve˘‹_ty≥
 &
v
) {

579 
queueög_p‹t_›î©i⁄
 
›_d©a
(
b…_¥ed_˝y
);

580 
	g›_d©a
.
	gpvec
 = &
v
;

581 
	gmy_aggªg©‹
.
execuã
(&
›_d©a
);

584  
ª£t_ª˚ivî
(
__TBB_PFG_RESET_ARG
(
ª£t_Êags
 
f
)) {

585 
	gôem_buf„r
<
	gT
>::
ª£t
();

586 i‡(
	gf
 & 
	grf_exåa˘
)

587 
	gmy_buût_¥ede˚ss‹s
.
ª˚ivî_exåa˘
(*
this
);

590  
ª£t_ª˚ivî
(
__TBB_PFG_RESET_ARG
(
ª£t_Êags
 )Ë{ 
	gôem_buf„r
<
	gT
>::
ª£t
(); }

593 
	g¥iv©e
:

594 
f‹w¨dög_ba£
 *
my_joö
;

595 #i‡
TBB_PREVIEW_FLOW_GRAPH_FEATURES


596 
	gedge_c⁄èöî
<
	g£ndî
<
	gT
> > 
	gmy_buût_¥ede˚ss‹s
;

600 
	~"_Êow_gøph_ègged_buf„r_im∂.h
"

602 
	gãm∂©e
< 
ty≥«me
 
	gT
 >

603 
˛ass
 
	gèg_m©chög_p‹t
 : 
public
 
ª˚ivî
<
T
>,Öubli¯
	gègged_buf„r
< 
	gèg_vÆue
, 
	gT
, 
	gNO_TAG
 > {

604 
	gpublic
:

605 
T
 
	töput_ty≥
;

606 
	g£ndî
<
	tT
> 
	t¥ede˚ss‹_ty≥
;

607 
	gèg_m©chög_p‹t
<
	tT
> 
	tmy_node_ty≥
;

608 
	gfun˘i⁄_body
<
	töput_ty≥
, 
	tèg_vÆue
> 
	tmy_èg_func_ty≥
;

609 
	gègged_buf„r
<
	tèg_vÆue
,
	tT
,
	tNO_TAG
> 
	tmy_buf„r_ty≥
;

610 #i‡
TBB_PREVIEW_FLOW_GRAPH_FEATURES


611 
	g°d
::
	tve˘‹
<
	t¥ede˚ss‹_ty≥
 *> 
	t¥ede˚ss‹_ve˘‹_ty≥
;

613 
	g¥iv©e
:

615 
¥iv©e
:

616 
	e›_ty≥
 { 
åy__put
, 
	ggë__ôem
, 
	gªs_p‹t
,

617 
	gadd_b…_¥ed
, 
	gdñ_b…_¥ed
, 
	gb…_¥ed_˙t
, 
	gb…_¥ed_˝y


619 
	e›_°©
 {
	gWAIT
=0, 
	gSUCCEEDED
, 
	gFAILED
};

620 
	gèg_m©chög_p‹t
<
	tT
> 
	tmy_˛ass
;

622 
˛ass
 
	gèg_m©chög_p‹t_›î©i⁄
 : 
public
 
aggªg©ed_›î©i⁄
<
èg_m©chög_p‹t_›î©i⁄
> {

623 
public
:

624 
ty≥
;

625 
T
 
	gmy_vÆ
;

626 
T
 *
	gmy_¨g
;

627 #i‡
TBB_PREVIEW_FLOW_GRAPH_FEATURES


628 
¥ede˚ss‹_ty≥
 *
	g¥ed
;

629 
size_t
 
	g˙t_vÆ
;

630 
¥ede˚ss‹_ve˘‹_ty≥
 *
	gpvec
;

632 
èg_vÆue
 
	gmy_èg_vÆue
;

634 
èg_m©chög_p‹t_›î©i⁄
(c⁄° 
T
& 
e
, 
›_ty≥
 
t
) :

635 
ty≥
((
t
)), 
my_vÆ
(
e
) {}

637 
èg_m©chög_p‹t_›î©i⁄
(c⁄° 
T
* 
p
, 
›_ty≥
 
t
) :

638 
ty≥
((
t
)), 
my_¨g
(
c⁄°_ˇ°
<
T
*>(
p
)) {}

640 
èg_m©chög_p‹t_›î©i⁄
(
›_ty≥
 
t
Ë: 
ty≥
((t)) {}

643 
	göã∫Æ
::
	taggªg©ög_fun˘‹
<
	tmy_˛ass
, 
	tèg_m©chög_p‹t_›î©i⁄
> 
	tmy_h™dÀr
;

644 
‰õnd
 
˛ass
 
	göã∫Æ
::
aggªg©ög_fun˘‹
<
my_˛ass
, 
	gèg_m©chög_p‹t_›î©i⁄
>;

645 
	gaggªg©‹
<
	gmy_h™dÀr
, 
	gèg_m©chög_p‹t_›î©i⁄
> 
	gmy_aggªg©‹
;

647 
h™dÀ_›î©i⁄s
(
èg_m©chög_p‹t_›î©i⁄
* 
›_li°
) {

648 
èg_m©chög_p‹t_›î©i⁄
 *
	gcuºít
;

649 
	g›_li°
) {

650 
	gcuºít
 = 
›_li°
;

651 
	g›_li°
 = 
›_li°
->
√xt
;

652 
	gcuºít
->
	gty≥
) {

653 
	gåy__put
: {

654 
boﬁ
 
was_ö£πed
 = 
this
->
ègged_ö£π
(
cuºít
->
my_èg_vÆue
, cuºít->
my_vÆ
);

656 
__TBB_°‹e_wôh_ªÀa£
(
cuºít
->
°©us
, 
was_ö£πed
 ? 
SUCCEEDED
 : 
FAILED
);

659 
	ggë__ôem
:

661 if(!
this
->
ègged_föd
(
my_joö
->
cuºít_èg
, *(
cuºít
->
my_¨g
))) {

662 
__TBB_ASSERT
(
Ál£
, "FailedÅo find item correspondingÅo current_tag.");

664 
__TBB_°‹e_wôh_ªÀa£
(
cuºít
->
°©us
, 
SUCCEEDED
);

666 
	gªs_p‹t
:

668 
this
->
ègged_dñëe
(
my_joö
->
cuºít_èg
);

669 
__TBB_°‹e_wôh_ªÀa£
(
cuºít
->
°©us
, 
SUCCEEDED
);

671 #i‡
TBB_PREVIEW_FLOW_GRAPH_FEATURES


672 
	gadd_b…_¥ed
:

673 
my_buût_¥ede˚ss‹s
.
add_edge
(*(
cuºít
->
¥ed
));

674 
__TBB_°‹e_wôh_ªÀa£
(
cuºít
->
°©us
, 
SUCCEEDED
);

676 
	gdñ_b…_¥ed
:

677 
my_buût_¥ede˚ss‹s
.
dñëe_edge
(*(
cuºít
->
¥ed
));

678 
__TBB_°‹e_wôh_ªÀa£
(
cuºít
->
°©us
, 
SUCCEEDED
);

680 
	gb…_¥ed_˙t
:

681 
cuºít
->
˙t_vÆ
 = 
my_buût_¥ede˚ss‹s
.
edge_cou¡
();

682 
__TBB_°‹e_wôh_ªÀa£
(
cuºít
->
°©us
, 
SUCCEEDED
);

684 
	gb…_¥ed_˝y
:

685 
my_buût_¥ede˚ss‹s
.
c›y_edges
(*(
cuºít
->
pvec
));

686 
__TBB_°‹e_wôh_ªÀa£
(
cuºít
->
°©us
, 
SUCCEEDED
);

693 
	g¥Ÿe˘ed
:

694 
ãm∂©e
< 
ty≥«me
 
R
,Åy≥«mê
	gB
 > 
‰õnd
 
˛ass
 
	grun_™d_put_èsk
;

695 
	gãm∂©e
<
ty≥«me
 
	gX
,Åy≥«mê
	gY
> 
‰õnd
 
˛ass
 
	göã∫Æ
::
brﬂdˇ°_ˇche
;

696 
	gãm∂©e
<
ty≥«me
 
	gX
,Åy≥«mê
	gY
> 
‰õnd
 
˛ass
 
	göã∫Æ
::
round_robö_ˇche
;

697  
èsk
 *
åy_put_èsk
(c⁄° 
T
& 
v
) {

698 
èg_m©chög_p‹t_›î©i⁄
 
›_d©a
(
v
, 
åy__put
);

699 
	g›_d©a
.
	gmy_èg_vÆue
 = (*
my_èg_func
)(
v
);

700 
èsk
 *
	gπask
 = 
NULL
;

701 
	gmy_aggªg©‹
.
execuã
(&
›_d©a
);

702 if(
	g›_d©a
.
	g°©us
 =
SUCCEEDED
) {

703 
πask
 = 
my_joö
->
ö¸emít_èg_cou¡
(
›_d©a
.
my_èg_vÆue
, 
Ál£
);

705 if(!
	gπask
Ëπask = 
SUCCESSFULLY_ENQUEUED
;

707  
	gπask
;

710 
	gpublic
:

712 
èg_m©chög_p‹t
(Ë: 
ª˚ivî
<
T
>(), 
	gègged_buf„r
<
	gèg_vÆue
, 
	gT
, 
	gNO_TAG
>() {

713 
	gmy_joö
 = 
NULL
;

714 
	gmy_èg_func
 = 
NULL
;

715 
	gmy_‹igöÆ_èg_func
 = 
NULL
;

716 
	gmy_aggªg©‹
.
öôülize_h™dÀr
(
my_h™dÀr
(
this
));

720 
èg_m©chög_p‹t
(c⁄°Åag_m©chög_p‹t& ) : 
ª˚ivî
<
T
>(), 
	gègged_buf„r
<
	gèg_vÆue
,
	gT
, 
	gNO_TAG
>() {

721 
	gmy_joö
 = 
NULL
;

723 
	gmy_èg_func
 = 
NULL
;

724 
	gmy_‹igöÆ_èg_func
 = 
NULL
;

725 
	gmy_aggªg©‹
.
öôülize_h™dÀr
(
my_h™dÀr
(
this
));

728 ~
èg_m©chög_p‹t
() {

729 i‡(
	gmy_èg_func
Ë
dñëe
 my_tag_func;

730 i‡(
	gmy_‹igöÆ_èg_func
Ë
dñëe
 my_original_tag_func;

733 
£t_joö_node_poöãr
(
f‹w¨dög_ba£
 *
joö
) {

734 
	gmy_joö
 = 
joö
;

737 
£t_my_‹igöÆ_èg_func
(
my_èg_func_ty≥
 *
f
) {

738 
	gmy_‹igöÆ_èg_func
 = 
f
;

741 
£t_my_èg_func
(
my_èg_func_ty≥
 *
f
) {

742 
	gmy_èg_func
 = 
f
;

745 
boﬁ
 
gë_ôem
–
T
 &
v
 ) {

746 
èg_m©chög_p‹t_›î©i⁄
 
›_d©a
(&
v
, 
gë__ôem
);

747 
	gmy_aggªg©‹
.
execuã
(&
›_d©a
);

748  
	g›_d©a
.
	g°©us
 =
SUCCEEDED
;

751 #i‡
TBB_PREVIEW_FLOW_GRAPH_FEATURES


752  
öã∫Æ_add_buût_¥ede˚ss‹
(
£ndî
<
T
> &
p
) {

753 
èg_m©chög_p‹t_›î©i⁄
 
›_d©a
(
add_b…_¥ed
);

754 
	g›_d©a
.
	g¥ed
 = &
p
;

755 
	gmy_aggªg©‹
.
execuã
(&
›_d©a
);

758  
öã∫Æ_dñëe_buût_¥ede˚ss‹
(
£ndî
<
T
> &
p
) {

759 
èg_m©chög_p‹t_›î©i⁄
 
›_d©a
(
dñ_b…_¥ed
);

760 
	g›_d©a
.
	g¥ed
 = &
p
;

761 
	gmy_aggªg©‹
.
execuã
(&
›_d©a
);

764  
size_t
 
¥ede˚ss‹_cou¡
() {

765 
èg_m©chög_p‹t_›î©i⁄
 
›_d©a
(
b…_¥ed_˙t
);

766 
	gmy_aggªg©‹
.
execuã
(&
›_d©a
);

767  
	g›_d©a
.
	g˙t_vÆ
;

770  
c›y_¥ede˚ss‹s
(
¥ede˚ss‹_ve˘‹_ty≥
 &
v
) {

771 
èg_m©chög_p‹t_›î©i⁄
 
›_d©a
(
b…_¥ed_˝y
);

772 
	g›_d©a
.
	gpvec
 = &
v
;

773 
	gmy_aggªg©‹
.
execuã
(&
›_d©a
);

779 
ª£t_p‹t
() {

780 
èg_m©chög_p‹t_›î©i⁄
 
›_d©a
(
ªs_p‹t
);

781 
	gmy_aggªg©‹
.
execuã
(&
›_d©a
);

785 
my_èg_func_ty≥
 *
my_func
(Ë{  
	gmy_èg_func
; }

786 
my_èg_func_ty≥
 *
my_‹igöÆ_func
(Ë{  
	gmy_‹igöÆ_èg_func
; }

788 #i‡
TBB_PREVIEW_FLOW_GRAPH_FEATURES


789  
ª£t_ª˚ivî
(
__TBB_PFG_RESET_ARG
(
ª£t_Êags
 
f
)) {

790 
	gmy_buf„r_ty≥
::
ª£t
();

791 i‡(
	gf
 & 
	grf_exåa˘
)

792 
	gmy_buût_¥ede˚ss‹s
.
ª˚ivî_exåa˘
(*
this
);

795  
ª£t_ª˚ivî
(
__TBB_PFG_RESET_ARG
(
ª£t_Êags
 )Ë{ 
	gmy_buf„r_ty≥
::
ª£t
(); }

798 
	g¥iv©e
:

800 
f‹w¨dög_ba£
 *
my_joö
;

801 #i‡
TBB_PREVIEW_FLOW_GRAPH_FEATURES


802 
	gedge_c⁄èöî
<
	g¥ede˚ss‹_ty≥
> 
	gmy_buût_¥ede˚ss‹s
;

804 
my_èg_func_ty≥
 *
	gmy_èg_func
;

805 
my_èg_func_ty≥
 *
	gmy_‹igöÆ_èg_func
;

808 
usög
 
«me•a˚
 
	ggøph_pﬁicy_«me•a˚
;

810 
	gãm∂©e
<
gøph_buf„r_pﬁicy
 
	gJP
, 
ty≥«me
 
	gI≈utTu∂e
,Åy≥«mê
	gOuçutTu∂e
>

811 
˛ass
 
	gjoö_node_ba£
;

814 
	gãm∂©e
<
gøph_buf„r_pﬁicy
 
	gJP
, 
ty≥«me
 
	gI≈utTu∂e
,Åy≥«mê
	gOuçutTu∂e
>

815 
˛ass
 
	gjoö_node_FE
;

817 
	gãm∂©e
<
ty≥«me
 
	gI≈utTu∂e
,Åy≥«mê
	gOuçutTu∂e
>

818 
˛ass
 
	gjoö_node_FE
<
	gª£rvög
, 
	gI≈utTu∂e
, 
	gOuçutTu∂e
> : 
public
 
f‹w¨dög_ba£
 {

819 
public
:

820 c⁄° 
N
 = 
tbb
::
Êow
::
tu∂e_size
<
OuçutTu∂e
>::
vÆue
;

821 
OuçutTu∂e
 
	touçut_ty≥
;

822 
I≈utTu∂e
 
	töput_ty≥
;

823 
	gjoö_node_ba£
<
	tª£rvög
, 
	tI≈utTu∂e
, 
	tOuçutTu∂e
> 
	tmy_node_ty≥
;

825 
joö_node_FE
(
gøph
 &
g
Ë: 
f‹w¨dög_ba£
(g), 
my_node
(
NULL
) {

826 
	gp‹ts_wôh_no_öputs
 = 
N
;

827 
	gjoö_hñ≥r
<
	gN
>::
£t_joö_node_poöãr
(
my_öputs
, 
this
);

830 
joö_node_FE
(c⁄° joö_node_FE& 
Ÿhî
Ë: 
f‹w¨dög_ba£
(*(Ÿhî.f‹w¨dög_ba£::
my_gøph_±r
)), 
my_node
(
NULL
) {

831 
	gp‹ts_wôh_no_öputs
 = 
N
;

832 
	gjoö_hñ≥r
<
	gN
>::
£t_joö_node_poöãr
(
my_öputs
, 
this
);

835 
£t_my_node
(
my_node_ty≥
 *
√w_my_node
Ë{ 
	gmy_node
 =Çew_my_node; }

837 
ö¸emít_p‹t_cou¡
() {

838 ++
	gp‹ts_wôh_no_öputs
;

842 
èsk
 * 
de¸emít_p‹t_cou¡
(
boﬁ
 
h™dÀ_èsk
) {

843 if(
	gp‹ts_wôh_no_öputs
.
„tch_™d_de¸emít
() == 1) {

844 
èsk
* 
ç
 = 
this
->
my_gøph_±r
->
roŸ_èsk
();

845 if(
	gç
) {

846 
èsk
 *
	gπask
 = 
√w
 (Åask::
Æloˇã_addôi⁄Æ_chûd_of
–*
ç
 ) )

847 
f‹w¨d_èsk_by∑ss
<
my_node_ty≥
>(*
my_node
);

848 if(!
	gh™dÀ_èsk
Ë 
	gπask
;

849 
FLOW_SPAWN
(*
πask
);

852  
	gNULL
;

855 
	göput_ty≥
 &
öput_p‹ts
(Ë{  
	gmy_öputs
; }

857 
	g¥Ÿe˘ed
:

859 
ª£t
–
__TBB_PFG_RESET_ARG
–
ª£t_Êags
 
f
)) {

861 
p‹ts_wôh_no_öputs
 = 
N
;

862 
	gjoö_hñ≥r
<
	gN
>::
ª£t_öputs
(
my_öputs
 
__TBB_PFG_RESET_ARG
–
__TBB_COMMA
 
f
));

867 
boﬁ
 
tu∂e_buûd_may_suc˚ed
() {

868  !
	gp‹ts_wôh_no_öputs
;

871 
boﬁ
 
åy_to_make_tu∂e
(
ouçut_ty≥
 &
out
) {

872 if(
	gp‹ts_wôh_no_öputs
Ë 
	gÁl£
;

873  
	gjoö_hñ≥r
<
	gN
>::
ª£rve
(
my_öputs
, 
out
);

876 
tu∂e_ac˚±ed
() {

877 
	gjoö_hñ≥r
<
	gN
>::
c⁄sume_ª£rv©i⁄s
(
my_öputs
);

879 
tu∂e_ªje˘ed
() {

880 
	gjoö_hñ≥r
<
	gN
>::
ªÀa£_ª£rv©i⁄s
(
my_öputs
);

883 
öput_ty≥
 
	gmy_öputs
;

884 
my_node_ty≥
 *
	gmy_node
;

885 
	g©omic
<
	gsize_t
> 
	gp‹ts_wôh_no_öputs
;

888 
	gãm∂©e
<
ty≥«me
 
	gI≈utTu∂e
,Åy≥«mê
	gOuçutTu∂e
>

889 
˛ass
 
	gjoö_node_FE
<
	gqueueög
, 
	gI≈utTu∂e
, 
	gOuçutTu∂e
> : 
public
 
f‹w¨dög_ba£
 {

890 
public
:

891 c⁄° 
N
 = 
tbb
::
Êow
::
tu∂e_size
<
OuçutTu∂e
>::
vÆue
;

892 
OuçutTu∂e
 
	touçut_ty≥
;

893 
I≈utTu∂e
 
	töput_ty≥
;

894 
	gjoö_node_ba£
<
	tqueueög
, 
	tI≈utTu∂e
, 
	tOuçutTu∂e
> 
	tmy_node_ty≥
;

896 
joö_node_FE
(
gøph
 &
g
Ë: 
f‹w¨dög_ba£
(g), 
my_node
(
NULL
) {

897 
	gp‹ts_wôh_no_ôems
 = 
N
;

898 
	gjoö_hñ≥r
<
	gN
>::
£t_joö_node_poöãr
(
my_öputs
, 
this
);

901 
joö_node_FE
(c⁄° joö_node_FE& 
Ÿhî
Ë: 
f‹w¨dög_ba£
(*(Ÿhî.f‹w¨dög_ba£::
my_gøph_±r
)), 
my_node
(
NULL
) {

902 
	gp‹ts_wôh_no_ôems
 = 
N
;

903 
	gjoö_hñ≥r
<
	gN
>::
£t_joö_node_poöãr
(
my_öputs
, 
this
);

907 
£t_my_node
(
my_node_ty≥
 *
√w_my_node
Ë{ 
	gmy_node
 =Çew_my_node; }

909 
ª£t_p‹t_cou¡
() {

910 
	gp‹ts_wôh_no_ôems
 = 
N
;

914 
èsk
 * 
de¸emít_p‹t_cou¡
(
boﬁ
 
h™dÀ_èsk
)

916 if(
	gp‹ts_wôh_no_ôems
.
„tch_™d_de¸emít
() == 1) {

917 
èsk
* 
ç
 = 
this
->
my_gøph_±r
->
roŸ_èsk
();

918 if(
	gç
) {

919 
èsk
 *
	gπask
 = 
√w
 (Åask::
Æloˇã_addôi⁄Æ_chûd_of
–*
ç
 ) )

920 
f‹w¨d_èsk_by∑ss
 <
my_node_ty≥
>(*
my_node
);

921 if(!
	gh™dÀ_èsk
Ë 
	gπask
;

922 
FLOW_SPAWN
–*
πask
);

925  
	gNULL
;

928 
ö¸emít_p‹t_cou¡
(Ë{ 
__TBB_ASSERT
(
Ál£
, 
NULL
); }

930 
	göput_ty≥
 &
öput_p‹ts
(Ë{  
	gmy_öputs
; }

932 
	g¥Ÿe˘ed
:

934 
ª£t
–
__TBB_PFG_RESET_ARG
–
ª£t_Êags
 
f
)) {

935 
ª£t_p‹t_cou¡
();

936 
	gjoö_hñ≥r
<
	gN
>::
ª£t_öputs
(
my_öputs
 
__TBB_PFG_RESET_ARG
–
__TBB_COMMA
 
f
) );

941 
boﬁ
 
tu∂e_buûd_may_suc˚ed
() {

942  !
	gp‹ts_wôh_no_ôems
;

945 
boﬁ
 
åy_to_make_tu∂e
(
ouçut_ty≥
 &
out
) {

946 if(
	gp‹ts_wôh_no_ôems
Ë 
	gÁl£
;

947  
	gjoö_hñ≥r
<
	gN
>::
gë_ôems
(
my_öputs
, 
out
);

950 
tu∂e_ac˚±ed
() {

951 
ª£t_p‹t_cou¡
();

952 
	gjoö_hñ≥r
<
	gN
>::
ª£t_p‹ts
(
my_öputs
);

954 
tu∂e_ªje˘ed
() {

958 
öput_ty≥
 
	gmy_öputs
;

959 
my_node_ty≥
 *
	gmy_node
;

960 
	g©omic
<
	gsize_t
> 
	gp‹ts_wôh_no_ôems
;

964 
	gãm∂©e
<
ty≥«me
 
	gI≈utTu∂e
,Åy≥«mê
	gOuçutTu∂e
>

965 
˛ass
 
	gjoö_node_FE
<
	gèg_m©chög
, 
	gI≈utTu∂e
, 
	gOuçutTu∂e
> : 
public
 
f‹w¨dög_ba£
,

967 
public
 
	gègged_buf„r
<
	gèg_vÆue
, 
	gsize_t
, 
	gNO_TAG
>,Öubli¯
	gôem_buf„r
<
	gOuçutTu∂e
> {

968 
	gpublic
:

969 c⁄° 
N
 = 
tbb
::
Êow
::
tu∂e_size
<
OuçutTu∂e
>::
vÆue
;

970 
OuçutTu∂e
 
	touçut_ty≥
;

971 
I≈utTu∂e
 
	töput_ty≥
;

972 
	gègged_buf„r
<
	tèg_vÆue
, 
	tsize_t
, 
	tNO_TAG
> 
	tmy_èg_buf„r
;

973 
	gôem_buf„r
<
	touçut_ty≥
> 
	touçut_buf„r_ty≥
;

974 
	gjoö_node_ba£
<
	tèg_m©chög
, 
	tI≈utTu∂e
, 
	tOuçutTu∂e
> 
	tmy_node_ty≥
;

979 
	g¥iv©e
:

980 
	e›_ty≥
 { 
ªs_cou¡
, 
	göc_cou¡
, 
	gmay_suc˚ed
, 
	gåy_make
 };

981 
	e›_°©
 {
	gWAIT
=0, 
	gSUCCEEDED
, 
	gFAILED
};

982 
	gjoö_node_FE
<
	tèg_m©chög
, 
	tI≈utTu∂e
, 
	tOuçutTu∂e
> 
	tmy_˛ass
;

984 
˛ass
 
	gèg_m©chög_FE_›î©i⁄
 : 
public
 
aggªg©ed_›î©i⁄
<
èg_m©chög_FE_›î©i⁄
> {

985 
public
:

986 
ty≥
;

988 
èg_vÆue
 
	gmy_vÆ
;

989 
ouçut_ty≥
* 
	gmy_ouçut
;

991 
èsk
 *
	gby∑ss_t
;

992 
boﬁ
 
	gíqueue_èsk
;

994 
èg_m©chög_FE_›î©i⁄
(c⁄° 
èg_vÆue
& 
e
 , 
boﬁ
 
q_èsk
 , 
›_ty≥
 
t
Ë: 
ty≥
(—)), 
my_vÆ
(e),

995 
by∑ss_t
(
NULL
), 
íqueue_èsk
(
q_èsk
) {}

996 
èg_m©chög_FE_›î©i⁄
(
ouçut_ty≥
 *
p
, 
›_ty≥
 
t
Ë: 
ty≥
(—)), 
my_ouçut
’), 
by∑ss_t
(
NULL
),

997 
íqueue_èsk
(
åue
) {}

999 
èg_m©chög_FE_›î©i⁄
(
›_ty≥
 
t
Ë: 
ty≥
(—)), 
by∑ss_t
(
NULL
), 
íqueue_èsk
(
åue
) {}

1002 
	göã∫Æ
::
	taggªg©ög_fun˘‹
<
	tmy_˛ass
, 
	tèg_m©chög_FE_›î©i⁄
> 
	tmy_h™dÀr
;

1003 
‰õnd
 
˛ass
 
	göã∫Æ
::
aggªg©ög_fun˘‹
<
my_˛ass
, 
	gèg_m©chög_FE_›î©i⁄
>;

1004 
	gaggªg©‹
<
	gmy_h™dÀr
, 
	gèg_m©chög_FE_›î©i⁄
> 
	gmy_aggªg©‹
;

1010 
èsk
 * 
fûl_ouçut_buf„r
(
èg_vÆue
 
t
, 
boﬁ
 
should_íqueue
, boﬁ 
h™dÀ_èsk
) {

1011 
ouçut_ty≥
 
	gl_out
;

1012 
èsk
 *
	gπask
 = 
NULL
;

1013 
èsk
* 
	gç
 = 
this
->
my_gøph_±r
->
roŸ_èsk
();

1014 
boﬁ
 
	gdo_fwd
 = 
should_íqueue
 && 
this
->
buf„r_em±y
(Ë&& 
ç
;

1015 
	gthis
->
	gcuºít_èg
 = 
t
;

1016 
	gthis
->
ègged_dñëe
(
this
->
cuºít_èg
);

1017 if(
	gjoö_hñ≥r
<
	gN
>::
gë_ôems
(
my_öputs
, 
l_out
)) {

1018 
	gthis
->
push_back
(
l_out
);

1019 if(
	gdo_fwd
) {

1020 
	gπask
 = 
√w
 ( 
èsk
::
Æloˇã_addôi⁄Æ_chûd_of
–*
ç
 ) )

1021 
f‹w¨d_èsk_by∑ss
<
my_node_ty≥
>(*
my_node
);

1022 if(
	gh™dÀ_èsk
) {

1023 
FLOW_SPAWN
(*
πask
);

1024 
	gπask
 = 
NULL
;

1026 
	gdo_fwd
 = 
Ál£
;

1029 
	gjoö_hñ≥r
<
	gN
>::
ª£t_p‹ts
(
my_öputs
);

1030 
	gthis
->
	gcuºít_èg
 = 
NO_TAG
;

1033 
__TBB_ASSERT
(
Ál£
, "should have had somethingÅoÖush");

1035  
	gπask
;

1038 
h™dÀ_›î©i⁄s
(
èg_m©chög_FE_›î©i⁄
* 
›_li°
) {

1039 
èg_m©chög_FE_›î©i⁄
 *
	gcuºít
;

1040 
	g›_li°
) {

1041 
	gcuºít
 = 
›_li°
;

1042 
	g›_li°
 = 
›_li°
->
√xt
;

1043 
	gcuºít
->
	gty≥
) {

1044 
	gªs_cou¡
:

1046 
this
->
de°roy_‰⁄t
();

1047 
__TBB_°‹e_wôh_ªÀa£
(
cuºít
->
°©us
, 
SUCCEEDED
);

1050 
	göc_cou¡
: {

1051 
size_t
 *
p
 = 0;

1052 
èg_vÆue
 
	gt
 = 
cuºít
->
my_vÆ
;

1053 
boﬁ
 
	gdo_íqueue
 = 
cuºít
->
íqueue_èsk
;

1054 if(!(
	gthis
->
ègged_föd_ªf
(
t
,
p
))) {

1055 
	gthis
->
ègged_ö£π
(
t
, 0);

1056 if(!(
	gthis
->
ègged_föd_ªf
(
t
,
p
))) {

1057 
__TBB_ASSERT
(
Ál£
, "should findÅagáfter inserting it");

1060 if(++(*
	gp
Ë=
size_t
(
N
)) {

1061 
èsk
 *
πask
 = 
fûl_ouçut_buf„r
(
t
, 
åue
, 
do_íqueue
);

1062 
__TBB_ASSERT
(!
πask
 || !
do_íqueue
, "task shouldÇot beÑeturned");

1063 
	gcuºít
->
	gby∑ss_t
 = 
πask
;

1066 
__TBB_°‹e_wôh_ªÀa£
(
cuºít
->
°©us
, 
SUCCEEDED
);

1068 
	gmay_suc˚ed
:

1069 
__TBB_°‹e_wôh_ªÀa£
(
cuºít
->
°©us
, 
this
->
buf„r_em±y
(Ë? 
FAILED
 : 
SUCCEEDED
);

1071 
	gåy_make
:

1072 if(
this
->
buf„r_em±y
()) {

1073 
__TBB_°‹e_wôh_ªÀa£
(
cuºít
->
°©us
, 
FAILED
);

1076 
	gthis
->
c›y_‰⁄t
(*(
cuºít
->
my_ouçut
));

1077 
__TBB_°‹e_wôh_ªÀa£
(
cuºít
->
°©us
, 
SUCCEEDED
);

1085 
	gpublic
:

1086 
ãm∂©e
<
ty≥«me
 
Fun˘i⁄Tu∂e
>

1087 
joö_node_FE
(
gøph
 &
g
, 
Fun˘i⁄Tu∂e
 
èg_funcs
Ë: 
f‹w¨dög_ba£
(g), 
my_node
(
NULL
) {

1088 
	gjoö_hñ≥r
<
	gN
>::
£t_joö_node_poöãr
(
my_öputs
, 
this
);

1089 
	gjoö_hñ≥r
<
	gN
>::
£t_èg_func
(
my_öputs
, 
èg_funcs
);

1090 
	gmy_aggªg©‹
.
öôülize_h™dÀr
(
my_h™dÀr
(
this
));

1093 
joö_node_FE
(c⁄° joö_node_FE& 
Ÿhî
Ë: 
f‹w¨dög_ba£
(*(Ÿhî.f‹w¨dög_ba£::
my_gøph_±r
)), 
my_èg_buf„r
(),

1094 
ouçut_buf„r_ty≥
() {

1095 
	gmy_node
 = 
NULL
;

1096 
	gjoö_hñ≥r
<
	gN
>::
£t_joö_node_poöãr
(
my_öputs
, 
this
);

1097 
	gjoö_hñ≥r
<
	gN
>::
c›y_èg_fun˘‹s
(
my_öputs
, 
c⁄°_ˇ°
<
öput_ty≥
 &>(
Ÿhî
.my_inputs));

1098 
	gmy_aggªg©‹
.
öôülize_h™dÀr
(
my_h™dÀr
(
this
));

1102 
£t_my_node
(
my_node_ty≥
 *
√w_my_node
Ë{ 
	gmy_node
 =Çew_my_node; }

1104 
ª£t_p‹t_cou¡
() {

1105 
èg_m©chög_FE_›î©i⁄
 
›_d©a
(
ªs_cou¡
);

1106 
	gmy_aggªg©‹
.
execuã
(&
›_d©a
);

1112 
èsk
 *
ö¸emít_èg_cou¡
(
èg_vÆue
 
t
, 
boﬁ
 
h™dÀ_èsk
) {

1113 
èg_m©chög_FE_›î©i⁄
 
›_d©a
(
t
, 
h™dÀ_èsk
, 
öc_cou¡
);

1114 
	gmy_aggªg©‹
.
execuã
(&
›_d©a
);

1115  
	g›_d©a
.
	gby∑ss_t
;

1118  
èsk
 *
de¸emít_p‹t_cou¡
(
boﬁ
 ) { 
__TBB_ASSERT
(
Ál£
, 
NULL
);  
	gNULL
; }

1120 
ö¸emít_p‹t_cou¡
(Ë{ 
__TBB_ASSERT
(
Ál£
, 
NULL
); }

1122 
	göput_ty≥
 &
öput_p‹ts
(Ë{  
	gmy_öputs
; }

1124 
	g¥Ÿe˘ed
:

1126 
ª£t
–
__TBB_PFG_RESET_ARG
–
ª£t_Êags
 
f
 )) {

1128 
joö_hñ≥r
<
N
>::
ª£t_öputs
(
my_öputs
 
__TBB_PFG_RESET_ARG
–
__TBB_COMMA
 
f
));

1130 
	gmy_èg_buf„r
::
ª£t
();

1131 
	gouçut_buf„r_ty≥
::
ª£t
();

1132 
	gmy_node
->
	gcuºít_èg
 = 
NO_TAG
;

1137 
boﬁ
 
tu∂e_buûd_may_suc˚ed
() {

1138 
èg_m©chög_FE_›î©i⁄
 
›_d©a
(
may_suc˚ed
);

1139 
	gmy_aggªg©‹
.
execuã
(&
›_d©a
);

1140  
	g›_d©a
.
	g°©us
 =
SUCCEEDED
;

1145 
boﬁ
 
åy_to_make_tu∂e
(
ouçut_ty≥
 &
out
) {

1146 
èg_m©chög_FE_›î©i⁄
 
›_d©a
(&
out
,
åy_make
);

1147 
	gmy_aggªg©‹
.
execuã
(&
›_d©a
);

1148  
	g›_d©a
.
	g°©us
 =
SUCCEEDED
;

1151 
tu∂e_ac˚±ed
() {

1152 
ª£t_p‹t_cou¡
();

1155 
tu∂e_ªje˘ed
() {

1159 
öput_ty≥
 
	gmy_öputs
;

1160 
my_node_ty≥
 *
	gmy_node
;

1164 
	gãm∂©e
<
gøph_buf„r_pﬁicy
 
	gJP
, 
ty≥«me
 
	gI≈utTu∂e
,Åy≥«mê
	gOuçutTu∂e
>

1165 
˛ass
 
	gjoö_node_ba£
 : 
public
 
gøph_node
,Öubli¯
	gjoö_node_FE
<
	gJP
, 
	gI≈utTu∂e
, 
	gOuçutTu∂e
>,

1166 
public
 
	g£ndî
<
	gOuçutTu∂e
> {

1167 
	g¥Ÿe˘ed
:

1168 
usög
 
gøph_node
::
my_gøph
;

1169 
	gpublic
:

1170 
OuçutTu∂e
 
	touçut_ty≥
;

1172 
	gª˚ivî
<
	touçut_ty≥
> 
	tsuc˚ss‹_ty≥
;

1173 
	gjoö_node_FE
<
	tJP
, 
	tI≈utTu∂e
, 
	tOuçutTu∂e
> 
	töput_p‹ts_ty≥
;

1174 
usög
 
	göput_p‹ts_ty≥
::
tu∂e_buûd_may_suc˚ed
;

1175 
usög
 
	göput_p‹ts_ty≥
::
åy_to_make_tu∂e
;

1176 
usög
 
	göput_p‹ts_ty≥
::
tu∂e_ac˚±ed
;

1177 
usög
 
	göput_p‹ts_ty≥
::
tu∂e_ªje˘ed
;

1178 #i‡
TBB_PREVIEW_FLOW_GRAPH_FEATURES


1179 
	g°d
::
	tve˘‹
<
	tsuc˚ss‹_ty≥
 *> 
	tsuc˚ss‹_ve˘‹_ty≥
;

1182 
	g¥iv©e
:

1184 
	e›_ty≥
 { 
ªg_succ
, 
	gªm_succ
, 
	gåy__gë
, 
	gdo_fwrd
, 
	gdo_fwrd_by∑ss


1185 #i‡
TBB_PREVIEW_FLOW_GRAPH_FEATURES


1186 , 
	gadd_b…_succ
, 
	gdñ_b…_succ
, 
	gb…_succ_˙t
, 
	gb…_succ_˝y


1189 
	e›_°©
 {
	gWAIT
=0, 
	gSUCCEEDED
, 
	gFAILED
};

1190 
	gjoö_node_ba£
<
	tJP
,
	tI≈utTu∂e
,
	tOuçutTu∂e
> 
	tmy_˛ass
;

1192 
˛ass
 
	gjoö_node_ba£_›î©i⁄
 : 
public
 
aggªg©ed_›î©i⁄
<
joö_node_ba£_›î©i⁄
> {

1193 
public
:

1194 
ty≥
;

1196 
ouçut_ty≥
 *
	gmy_¨g
;

1197 
suc˚ss‹_ty≥
 *
	gmy_succ
;

1198 #i‡
TBB_PREVIEW_FLOW_GRAPH_FEATURES


1199 
size_t
 
	g˙t_vÆ
;

1200 
suc˚ss‹_ve˘‹_ty≥
 *
	gsvec
;

1203 
èsk
 *
	gby∑ss_t
;

1204 
joö_node_ba£_›î©i⁄
(c⁄° 
ouçut_ty≥
& 
e
, 
›_ty≥
 
t
Ë: 
ty≥
((t)),

1205 
my_¨g
(
c⁄°_ˇ°
<
ouçut_ty≥
*>(&
e
)), 
by∑ss_t
(
NULL
) {}

1206 
joö_node_ba£_›î©i⁄
(c⁄° 
suc˚ss‹_ty≥
 &
s
, 
›_ty≥
 
t
Ë: 
ty≥
((t)),

1207 
my_succ
(
c⁄°_ˇ°
<
suc˚ss‹_ty≥
 *>(&
s
)), 
by∑ss_t
(
NULL
) {}

1208 
joö_node_ba£_›î©i⁄
(
›_ty≥
 
t
Ë: 
ty≥
(—)), 
by∑ss_t
(
NULL
) {}

1211 
	göã∫Æ
::
	taggªg©ög_fun˘‹
<
	tmy_˛ass
, 
	tjoö_node_ba£_›î©i⁄
> 
	tmy_h™dÀr
;

1212 
‰õnd
 
˛ass
 
	göã∫Æ
::
aggªg©ög_fun˘‹
<
my_˛ass
, 
	gjoö_node_ba£_›î©i⁄
>;

1213 
boﬁ
 
	gf‹w¨dî_busy
;

1214 
	gaggªg©‹
<
	gmy_h™dÀr
, 
	gjoö_node_ba£_›î©i⁄
> 
	gmy_aggªg©‹
;

1216 
h™dÀ_›î©i⁄s
(
joö_node_ba£_›î©i⁄
* 
›_li°
) {

1217 
joö_node_ba£_›î©i⁄
 *
	gcuºít
;

1218 
	g›_li°
) {

1219 
	gcuºít
 = 
›_li°
;

1220 
	g›_li°
 = 
›_li°
->
√xt
;

1221 
	gcuºít
->
	gty≥
) {

1222 
	gªg_succ
: {

1223 
my_suc˚ss‹s
.
ªgi°î_suc˚ss‹
(*(
cuºít
->
my_succ
));

1224 
èsk
* 
	gç
 = 
this
->
gøph_node
::
my_gøph
.
roŸ_èsk
();

1225 if(
tu∂e_buûd_may_suc˚ed
(Ë&& !
	gf‹w¨dî_busy
 && 
	gç
) {

1226 
èsk
 *
	gπask
 = 
√w
 (Åask::
Æloˇã_addôi⁄Æ_chûd_of
(*
ç
) )

1227 
f‹w¨d_èsk_by∑ss


1228 <
joö_node_ba£
<
JP
,
	gI≈utTu∂e
,
	gOuçutTu∂e
> >(*
	gthis
);

1229 
FLOW_SPAWN
(*
πask
);

1230 
	gf‹w¨dî_busy
 = 
åue
;

1232 
__TBB_°‹e_wôh_ªÀa£
(
cuºít
->
°©us
, 
SUCCEEDED
);

1235 
	gªm_succ
:

1236 
my_suc˚ss‹s
.
ªmove_suc˚ss‹
(*(
cuºít
->
my_succ
));

1237 
__TBB_°‹e_wôh_ªÀa£
(
cuºít
->
°©us
, 
SUCCEEDED
);

1239 
	gåy__gë
:

1240 if(
tu∂e_buûd_may_suc˚ed
()) {

1241 if(
åy_to_make_tu∂e
(*(
cuºít
->
my_¨g
))) {

1242 
tu∂e_ac˚±ed
();

1243 
__TBB_°‹e_wôh_ªÀa£
(
cuºít
->
°©us
, 
SUCCEEDED
);

1245 
__TBB_°‹e_wôh_ªÀa£
(
cuºít
->
°©us
, 
FAILED
);

1247 
__TBB_°‹e_wôh_ªÀa£
(
cuºít
->
°©us
, 
FAILED
);

1249 
	gdo_fwrd_by∑ss
: {

1250 
boﬁ
 
buûd_suc˚eded
;

1251 
èsk
 *
	gœ°_èsk
 = 
NULL
;

1252 
ouçut_ty≥
 
	gout
;

1253 if(
tu∂e_buûd_may_suc˚ed
()) {

1255 
	gbuûd_suc˚eded
 = 
åy_to_make_tu∂e
(
out
);

1256 if(
	gbuûd_suc˚eded
) {

1257 
èsk
 *
	g√w_èsk
 = 
my_suc˚ss‹s
.
åy_put_èsk
(
out
);

1258 
	gœ°_èsk
 = 
comböe_èsks
(
œ°_èsk
, 
√w_èsk
);

1259 if(
	g√w_èsk
) {

1260 
tu∂e_ac˚±ed
();

1263 
tu∂e_ªje˘ed
();

1264 
	gbuûd_suc˚eded
 = 
Ál£
;

1267 } 
	gbuûd_suc˚eded
);

1269 
	gcuºít
->
	gby∑ss_t
 = 
œ°_èsk
;

1270 
__TBB_°‹e_wôh_ªÀa£
(
cuºít
->
°©us
, 
SUCCEEDED
);

1271 
	gf‹w¨dî_busy
 = 
Ál£
;

1274 #i‡
TBB_PREVIEW_FLOW_GRAPH_FEATURES


1275 
	gadd_b…_succ
:

1276 
my_suc˚ss‹s
.
öã∫Æ_add_buût_suc˚ss‹
(*(
cuºít
->
my_succ
));

1277 
__TBB_°‹e_wôh_ªÀa£
(
cuºít
->
°©us
, 
SUCCEEDED
);

1279 
	gdñ_b…_succ
:

1280 
my_suc˚ss‹s
.
öã∫Æ_dñëe_buût_suc˚ss‹
(*(
cuºít
->
my_succ
));

1281 
__TBB_°‹e_wôh_ªÀa£
(
cuºít
->
°©us
, 
SUCCEEDED
);

1283 
	gb…_succ_˙t
:

1284 
cuºít
->
˙t_vÆ
 = 
my_suc˚ss‹s
.
suc˚ss‹_cou¡
();

1285 
__TBB_°‹e_wôh_ªÀa£
(
cuºít
->
°©us
, 
SUCCEEDED
);

1287 
	gb…_succ_˝y
:

1288 
my_suc˚ss‹s
.
c›y_suc˚ss‹s
(*(
cuºít
->
svec
));

1289 
__TBB_°‹e_wôh_ªÀa£
(
cuºít
->
°©us
, 
SUCCEEDED
);

1296 
	gpublic
:

1297 
joö_node_ba£
(
gøph
 &
g
Ë: 
gøph_node
(g), 
öput_p‹ts_ty≥
(g), 
f‹w¨dî_busy
(
Ál£
) {

1298 
	gmy_suc˚ss‹s
.
£t_ow√r
(
this
);

1299 
	göput_p‹ts_ty≥
::
£t_my_node
(
this
);

1300 
	gmy_aggªg©‹
.
öôülize_h™dÀr
(
my_h™dÀr
(
this
));

1303 
joö_node_ba£
(c⁄° joö_node_ba£& 
Ÿhî
) :

1304 
gøph_node
(
Ÿhî
.gøph_node::
my_gøph
), 
öput_p‹ts_ty≥
(other),

1305 
	g£ndî
<
	gOuçutTu∂e
>(), 
f‹w¨dî_busy
(
Ál£
), 
my_suc˚ss‹s
() {

1306 
	gmy_suc˚ss‹s
.
£t_ow√r
(
this
);

1307 
	göput_p‹ts_ty≥
::
£t_my_node
(
this
);

1308 
	gmy_aggªg©‹
.
öôülize_h™dÀr
(
my_h™dÀr
(
this
));

1311 
	gãm∂©e
<
ty≥«me
 
	gFun˘i⁄Tu∂e
>

1312 
joö_node_ba£
(
gøph
 &
g
, 
Fun˘i⁄Tu∂e
 
f
Ë: 
gøph_node
(g), 
öput_p‹ts_ty≥
(g, f), 
f‹w¨dî_busy
(
Ál£
) {

1313 
	gmy_suc˚ss‹s
.
£t_ow√r
(
this
);

1314 
	göput_p‹ts_ty≥
::
£t_my_node
(
this
);

1315 
	gmy_aggªg©‹
.
öôülize_h™dÀr
(
my_h™dÀr
(
this
));

1318 
boﬁ
 
ªgi°î_suc˚ss‹
(
suc˚ss‹_ty≥
 &
r
) {

1319 
joö_node_ba£_›î©i⁄
 
›_d©a
(
r
, 
ªg_succ
);

1320 
	gmy_aggªg©‹
.
execuã
(&
›_d©a
);

1321  
	g›_d©a
.
	g°©us
 =
SUCCEEDED
;

1324 
boﬁ
 
ªmove_suc˚ss‹
–
suc˚ss‹_ty≥
 &
r
) {

1325 
joö_node_ba£_›î©i⁄
 
›_d©a
(
r
, 
ªm_succ
);

1326 
	gmy_aggªg©‹
.
execuã
(&
›_d©a
);

1327  
	g›_d©a
.
	g°©us
 =
SUCCEEDED
;

1330 
boﬁ
 
åy_gë
–
ouçut_ty≥
 &
v
) {

1331 
joö_node_ba£_›î©i⁄
 
›_d©a
(
v
, 
åy__gë
);

1332 
	gmy_aggªg©‹
.
execuã
(&
›_d©a
);

1333  
	g›_d©a
.
	g°©us
 =
SUCCEEDED
;

1336 #i‡
TBB_PREVIEW_FLOW_GRAPH_FEATURES


1337  
öã∫Æ_add_buût_suc˚ss‹
–
suc˚ss‹_ty≥
 &
r
) {

1338 
joö_node_ba£_›î©i⁄
 
›_d©a
(
r
, 
add_b…_succ
);

1339 
	gmy_aggªg©‹
.
execuã
(&
›_d©a
);

1342  
öã∫Æ_dñëe_buût_suc˚ss‹
–
suc˚ss‹_ty≥
 &
r
) {

1343 
joö_node_ba£_›î©i⁄
 
›_d©a
(
r
, 
dñ_b…_succ
);

1344 
	gmy_aggªg©‹
.
execuã
(&
›_d©a
);

1347  
size_t
 
suc˚ss‹_cou¡
() {

1348 
joö_node_ba£_›î©i⁄
 
›_d©a
(
b…_succ_˙t
);

1349 
	gmy_aggªg©‹
.
execuã
(&
›_d©a
);

1350  
	g›_d©a
.
	g˙t_vÆ
;

1353  
c›y_suc˚ss‹s
(
suc˚ss‹_ve˘‹_ty≥
 &
v
) {

1354 
joö_node_ba£_›î©i⁄
 
›_d©a
(
b…_succ_˝y
);

1355 
	g›_d©a
.
	gsvec
 = &
v
;

1356 
	gmy_aggªg©‹
.
execuã
(&
›_d©a
);

1360 
	g¥Ÿe˘ed
:

1362  
ª£t
(
__TBB_PFG_RESET_ARG
(
ª£t_Êags
 
f
)) {

1363 
öput_p‹ts_ty≥
::
ª£t
(
__TBB_PFG_RESET_ARG
(
f
));

1364 #i‡
TBB_PREVIEW_FLOW_GRAPH_FEATURES


1365 
	gmy_suc˚ss‹s
.
ª£t
(
f
);

1369 
	g¥iv©e
:

1370 
brﬂdˇ°_ˇche
<
ouçut_ty≥
, 
	gnuŒ_rw_muãx
> 
	gmy_suc˚ss‹s
;

1372 
‰õnd
 
˛ass
 
	gf‹w¨d_èsk_by∑ss
< 
	gjoö_node_ba£
<
	gJP
, 
	gI≈utTu∂e
, 
	gOuçutTu∂e
> >;

1373 
èsk
 *
f‹w¨d_èsk
() {

1374 
joö_node_ba£_›î©i⁄
 
›_d©a
(
do_fwrd_by∑ss
);

1375 
	gmy_aggªg©‹
.
execuã
(&
›_d©a
);

1376  
	g›_d©a
.
	gby∑ss_t
;

1382 
	gãm∂©e
<
	gN
,Åem∂©e<
	g˛ass
> 
˛ass
 
	gPT
, 
ty≥«me
 
	gOuçutTu∂e
, 
gøph_buf„r_pﬁicy
 
	gJP
>

1383 
	sjoö_ba£
 {

1384 
ty≥«me
 
	töã∫Æ
::
	tjoö_node_ba£
<
	tJP
, 
	tty≥«me
 
	twøp_tu∂e_ñemíts
<
	tN
,
	tPT
,
	tOuçutTu∂e
>::
	tty≥
, OutputTuple>Åype;

1391 
	gãm∂©e
<
	gN
,Åem∂©e<
	g˛ass
> 
˛ass
 
	gPT
, 
ty≥«me
 
	gOuçutTu∂e
, 
gøph_buf„r_pﬁicy
 
	gJP
>

1392 
˛ass
 
	gunfﬁded_joö_node
 : 
public
 
joö_ba£
<
N
,
	gPT
,
	gOuçutTu∂e
,
	gJP
>::
ty≥
 {

1393 
public
:

1394 
ty≥«me
 
	twøp_tu∂e_ñemíts
<
	tN
, 
	tPT
, 
	tOuçutTu∂e
>::
	tty≥
 
	töput_p‹ts_ty≥
;

1395 
OuçutTu∂e
 
	touçut_ty≥
;

1396 
	g¥iv©e
:

1397 
joö_node_ba£
<
	tJP
, 
	töput_p‹ts_ty≥
, 
	touçut_ty≥
 > 
	tba£_ty≥
;

1398 
	gpublic
:

1399 
unfﬁded_joö_node
(
gøph
 &
g
Ë: 
ba£_ty≥
(g) {}

1400 
unfﬁded_joö_node
(c⁄° unfﬁded_joö_nodê&
Ÿhî
Ë: 
ba£_ty≥
(other) {}

1406 
	gãm∂©e
<
ty≥«me
 
	gOuçutTu∂e
>

1407 
˛ass
 
	gunfﬁded_joö_node
<2,
	gèg_m©chög_p‹t
,
	gOuçutTu∂e
,
	gèg_m©chög
> : 
public


1408 
joö_ba£
<2,
	gèg_m©chög_p‹t
,
	gOuçutTu∂e
,
	gèg_m©chög
>::
ty≥
 {

1409 
ty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<0, 
	tOuçutTu∂e
>::
	tty≥
 
	tT0
;

1410 
ty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<1, 
	tOuçutTu∂e
>::
	tty≥
 
	tT1
;

1411 
	gpublic
:

1412 
ty≥«me
 
	twøp_tu∂e_ñemíts
<2,
	tèg_m©chög_p‹t
,
	tOuçutTu∂e
>::
	tty≥
 
	töput_p‹ts_ty≥
;

1413 
OuçutTu∂e
 
	touçut_ty≥
;

1414 
	g¥iv©e
:

1415 
joö_node_ba£
<
	tèg_m©chög
, 
	töput_p‹ts_ty≥
, 
	touçut_ty≥
 > 
	tba£_ty≥
;

1416 
ty≥«me
 
	töã∫Æ
::
	tfun˘i⁄_body
<
	tT0
, 
	tèg_vÆue
> *
	tf0_p
;

1417 
ty≥«me
 
	töã∫Æ
::
	tfun˘i⁄_body
<
	tT1
, 
	tèg_vÆue
> *
	tf1_p
;

1418 
ty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e
< 
	tf0_p
, 
	tf1_p
 > 
	tfunc_öôülizî_ty≥
;

1419 
	gpublic
:

1420 
ãm∂©e
<
ty≥«me
 
B0
,Åy≥«mê
	gB1
>

1421 
unfﬁded_joö_node
(
gøph
 &
g
, 
B0
 
b0
, 
B1
 
b1
Ë: 
ba£_ty≥
(g,

1422 
func_öôülizî_ty≥
(

1423 
√w
 
öã∫Æ
::
fun˘i⁄_body_Àaf
<
T0
, 
èg_vÆue
, 
B0
>(
b0
),

1424 
√w
 
öã∫Æ
::
fun˘i⁄_body_Àaf
<
T1
, 
èg_vÆue
, 
B1
>(
b1
)

1426 
unfﬁded_joö_node
(c⁄° unfﬁded_joö_nodê&
Ÿhî
Ë: 
ba£_ty≥
(other) {}

1429 
	gãm∂©e
<
ty≥«me
 
	gOuçutTu∂e
>

1430 
˛ass
 
	gunfﬁded_joö_node
<3,
	gèg_m©chög_p‹t
,
	gOuçutTu∂e
,
	gèg_m©chög
> : 
public


1431 
joö_ba£
<3,
	gèg_m©chög_p‹t
,
	gOuçutTu∂e
,
	gèg_m©chög
>::
ty≥
 {

1432 
ty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<0, 
	tOuçutTu∂e
>::
	tty≥
 
	tT0
;

1433 
ty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<1, 
	tOuçutTu∂e
>::
	tty≥
 
	tT1
;

1434 
ty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<2, 
	tOuçutTu∂e
>::
	tty≥
 
	tT2
;

1435 
	gpublic
:

1436 
ty≥«me
 
	twøp_tu∂e_ñemíts
<3, 
	tèg_m©chög_p‹t
, 
	tOuçutTu∂e
>::
	tty≥
 
	töput_p‹ts_ty≥
;

1437 
OuçutTu∂e
 
	touçut_ty≥
;

1438 
	g¥iv©e
:

1439 
joö_node_ba£
<
	tèg_m©chög
, 
	töput_p‹ts_ty≥
, 
	touçut_ty≥
 > 
	tba£_ty≥
;

1440 
ty≥«me
 
	töã∫Æ
::
	tfun˘i⁄_body
<
	tT0
, 
	tèg_vÆue
> *
	tf0_p
;

1441 
ty≥«me
 
	töã∫Æ
::
	tfun˘i⁄_body
<
	tT1
, 
	tèg_vÆue
> *
	tf1_p
;

1442 
ty≥«me
 
	töã∫Æ
::
	tfun˘i⁄_body
<
	tT2
, 
	tèg_vÆue
> *
	tf2_p
;

1443 
ty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e
< 
	tf0_p
, 
	tf1_p
, 
	tf2_p
 > 
	tfunc_öôülizî_ty≥
;

1444 
	gpublic
:

1445 
ãm∂©e
<
ty≥«me
 
B0
,Åy≥«mê
	gB1
,Åy≥«mê
	gB2
>

1446 
unfﬁded_joö_node
(
gøph
 &
g
, 
B0
 
b0
, 
B1
 
b1
, 
B2
 
b2
Ë: 
ba£_ty≥
(g,

1447 
func_öôülizî_ty≥
(

1448 
√w
 
öã∫Æ
::
fun˘i⁄_body_Àaf
<
T0
, 
èg_vÆue
, 
B0
>(
b0
),

1449 
√w
 
öã∫Æ
::
fun˘i⁄_body_Àaf
<
T1
, 
èg_vÆue
, 
B1
>(
b1
),

1450 
√w
 
öã∫Æ
::
fun˘i⁄_body_Àaf
<
T2
, 
èg_vÆue
, 
B2
>(
b2
)

1452 
unfﬁded_joö_node
(c⁄° unfﬁded_joö_nodê&
Ÿhî
Ë: 
ba£_ty≥
(other) {}

1455 
	gãm∂©e
<
ty≥«me
 
	gOuçutTu∂e
>

1456 
˛ass
 
	gunfﬁded_joö_node
<4,
	gèg_m©chög_p‹t
,
	gOuçutTu∂e
,
	gèg_m©chög
> : 
public


1457 
joö_ba£
<4,
	gèg_m©chög_p‹t
,
	gOuçutTu∂e
,
	gèg_m©chög
>::
ty≥
 {

1458 
ty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<0, 
	tOuçutTu∂e
>::
	tty≥
 
	tT0
;

1459 
ty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<1, 
	tOuçutTu∂e
>::
	tty≥
 
	tT1
;

1460 
ty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<2, 
	tOuçutTu∂e
>::
	tty≥
 
	tT2
;

1461 
ty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<3, 
	tOuçutTu∂e
>::
	tty≥
 
	tT3
;

1462 
	gpublic
:

1463 
ty≥«me
 
	twøp_tu∂e_ñemíts
<4, 
	tèg_m©chög_p‹t
, 
	tOuçutTu∂e
>::
	tty≥
 
	töput_p‹ts_ty≥
;

1464 
OuçutTu∂e
 
	touçut_ty≥
;

1465 
	g¥iv©e
:

1466 
joö_node_ba£
<
	tèg_m©chög
, 
	töput_p‹ts_ty≥
, 
	touçut_ty≥
 > 
	tba£_ty≥
;

1467 
ty≥«me
 
	töã∫Æ
::
	tfun˘i⁄_body
<
	tT0
, 
	tèg_vÆue
> *
	tf0_p
;

1468 
ty≥«me
 
	töã∫Æ
::
	tfun˘i⁄_body
<
	tT1
, 
	tèg_vÆue
> *
	tf1_p
;

1469 
ty≥«me
 
	töã∫Æ
::
	tfun˘i⁄_body
<
	tT2
, 
	tèg_vÆue
> *
	tf2_p
;

1470 
ty≥«me
 
	töã∫Æ
::
	tfun˘i⁄_body
<
	tT3
, 
	tèg_vÆue
> *
	tf3_p
;

1471 
ty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e
< 
	tf0_p
, 
	tf1_p
, 
	tf2_p
, 
	tf3_p
 > 
	tfunc_öôülizî_ty≥
;

1472 
	gpublic
:

1473 
ãm∂©e
<
ty≥«me
 
B0
,Åy≥«mê
	gB1
,Åy≥«mê
	gB2
,Åy≥«mê
	gB3
>

1474 
unfﬁded_joö_node
(
gøph
 &
g
, 
B0
 
b0
, 
B1
 
b1
, 
B2
 
b2
, 
B3
 
b3
Ë: 
ba£_ty≥
(g,

1475 
func_öôülizî_ty≥
(

1476 
√w
 
öã∫Æ
::
fun˘i⁄_body_Àaf
<
T0
, 
èg_vÆue
, 
B0
>(
b0
),

1477 
√w
 
öã∫Æ
::
fun˘i⁄_body_Àaf
<
T1
, 
èg_vÆue
, 
B1
>(
b1
),

1478 
√w
 
öã∫Æ
::
fun˘i⁄_body_Àaf
<
T2
, 
èg_vÆue
, 
B2
>(
b2
),

1479 
√w
 
öã∫Æ
::
fun˘i⁄_body_Àaf
<
T3
, 
èg_vÆue
, 
B3
>(
b3
)

1481 
unfﬁded_joö_node
(c⁄° unfﬁded_joö_nodê&
Ÿhî
Ë: 
ba£_ty≥
(other) {}

1484 
	gãm∂©e
<
ty≥«me
 
	gOuçutTu∂e
>

1485 
˛ass
 
	gunfﬁded_joö_node
<5,
	gèg_m©chög_p‹t
,
	gOuçutTu∂e
,
	gèg_m©chög
> : 
public


1486 
joö_ba£
<5,
	gèg_m©chög_p‹t
,
	gOuçutTu∂e
,
	gèg_m©chög
>::
ty≥
 {

1487 
ty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<0, 
	tOuçutTu∂e
>::
	tty≥
 
	tT0
;

1488 
ty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<1, 
	tOuçutTu∂e
>::
	tty≥
 
	tT1
;

1489 
ty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<2, 
	tOuçutTu∂e
>::
	tty≥
 
	tT2
;

1490 
ty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<3, 
	tOuçutTu∂e
>::
	tty≥
 
	tT3
;

1491 
ty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<4, 
	tOuçutTu∂e
>::
	tty≥
 
	tT4
;

1492 
	gpublic
:

1493 
ty≥«me
 
	twøp_tu∂e_ñemíts
<5, 
	tèg_m©chög_p‹t
, 
	tOuçutTu∂e
>::
	tty≥
 
	töput_p‹ts_ty≥
;

1494 
OuçutTu∂e
 
	touçut_ty≥
;

1495 
	g¥iv©e
:

1496 
joö_node_ba£
<
	tèg_m©chög
, 
	töput_p‹ts_ty≥
, 
	touçut_ty≥
 > 
	tba£_ty≥
;

1497 
ty≥«me
 
	töã∫Æ
::
	tfun˘i⁄_body
<
	tT0
, 
	tèg_vÆue
> *
	tf0_p
;

1498 
ty≥«me
 
	töã∫Æ
::
	tfun˘i⁄_body
<
	tT1
, 
	tèg_vÆue
> *
	tf1_p
;

1499 
ty≥«me
 
	töã∫Æ
::
	tfun˘i⁄_body
<
	tT2
, 
	tèg_vÆue
> *
	tf2_p
;

1500 
ty≥«me
 
	töã∫Æ
::
	tfun˘i⁄_body
<
	tT3
, 
	tèg_vÆue
> *
	tf3_p
;

1501 
ty≥«me
 
	töã∫Æ
::
	tfun˘i⁄_body
<
	tT4
, 
	tèg_vÆue
> *
	tf4_p
;

1502 
ty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e
< 
	tf0_p
, 
	tf1_p
, 
	tf2_p
, 
	tf3_p
, 
	tf4_p
 > 
	tfunc_öôülizî_ty≥
;

1503 
	gpublic
:

1504 
ãm∂©e
<
ty≥«me
 
B0
,Åy≥«mê
	gB1
,Åy≥«mê
	gB2
,Åy≥«mê
	gB3
,Åy≥«mê
	gB4
>

1505 
unfﬁded_joö_node
(
gøph
 &
g
, 
B0
 
b0
, 
B1
 
b1
, 
B2
 
b2
, 
B3
 
b3
, 
B4
 
b4
Ë: 
ba£_ty≥
(g,

1506 
func_öôülizî_ty≥
(

1507 
√w
 
öã∫Æ
::
fun˘i⁄_body_Àaf
<
T0
, 
èg_vÆue
, 
B0
>(
b0
),

1508 
√w
 
öã∫Æ
::
fun˘i⁄_body_Àaf
<
T1
, 
èg_vÆue
, 
B1
>(
b1
),

1509 
√w
 
öã∫Æ
::
fun˘i⁄_body_Àaf
<
T2
, 
èg_vÆue
, 
B2
>(
b2
),

1510 
√w
 
öã∫Æ
::
fun˘i⁄_body_Àaf
<
T3
, 
èg_vÆue
, 
B3
>(
b3
),

1511 
√w
 
öã∫Æ
::
fun˘i⁄_body_Àaf
<
T4
, 
èg_vÆue
, 
B4
>(
b4
)

1513 
unfﬁded_joö_node
(c⁄° unfﬁded_joö_nodê&
Ÿhî
Ë: 
ba£_ty≥
(other) {}

1516 #i‡
__TBB_VARIADIC_MAX
 >= 6

1517 
	gãm∂©e
<
ty≥«me
 
	gOuçutTu∂e
>

1518 
˛ass
 
	gunfﬁded_joö_node
<6,
	gèg_m©chög_p‹t
,
	gOuçutTu∂e
,
	gèg_m©chög
> : 
public


1519 
joö_ba£
<6,
	gèg_m©chög_p‹t
,
	gOuçutTu∂e
,
	gèg_m©chög
>::
ty≥
 {

1520 
ty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<0, 
	tOuçutTu∂e
>::
	tty≥
 
	tT0
;

1521 
ty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<1, 
	tOuçutTu∂e
>::
	tty≥
 
	tT1
;

1522 
ty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<2, 
	tOuçutTu∂e
>::
	tty≥
 
	tT2
;

1523 
ty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<3, 
	tOuçutTu∂e
>::
	tty≥
 
	tT3
;

1524 
ty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<4, 
	tOuçutTu∂e
>::
	tty≥
 
	tT4
;

1525 
ty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<5, 
	tOuçutTu∂e
>::
	tty≥
 
	tT5
;

1526 
	gpublic
:

1527 
ty≥«me
 
	twøp_tu∂e_ñemíts
<6, 
	tèg_m©chög_p‹t
, 
	tOuçutTu∂e
>::
	tty≥
 
	töput_p‹ts_ty≥
;

1528 
OuçutTu∂e
 
	touçut_ty≥
;

1529 
	g¥iv©e
:

1530 
joö_node_ba£
<
	tèg_m©chög
, 
	töput_p‹ts_ty≥
, 
	touçut_ty≥
 > 
	tba£_ty≥
;

1531 
ty≥«me
 
	töã∫Æ
::
	tfun˘i⁄_body
<
	tT0
, 
	tèg_vÆue
> *
	tf0_p
;

1532 
ty≥«me
 
	töã∫Æ
::
	tfun˘i⁄_body
<
	tT1
, 
	tèg_vÆue
> *
	tf1_p
;

1533 
ty≥«me
 
	töã∫Æ
::
	tfun˘i⁄_body
<
	tT2
, 
	tèg_vÆue
> *
	tf2_p
;

1534 
ty≥«me
 
	töã∫Æ
::
	tfun˘i⁄_body
<
	tT3
, 
	tèg_vÆue
> *
	tf3_p
;

1535 
ty≥«me
 
	töã∫Æ
::
	tfun˘i⁄_body
<
	tT4
, 
	tèg_vÆue
> *
	tf4_p
;

1536 
ty≥«me
 
	töã∫Æ
::
	tfun˘i⁄_body
<
	tT5
, 
	tèg_vÆue
> *
	tf5_p
;

1537 
ty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e
< 
	tf0_p
, 
	tf1_p
, 
	tf2_p
, 
	tf3_p
, 
	tf4_p
, 
	tf5_p
 > 
	tfunc_öôülizî_ty≥
;

1538 
	gpublic
:

1539 
ãm∂©e
<
ty≥«me
 
B0
,Åy≥«mê
	gB1
,Åy≥«mê
	gB2
,Åy≥«mê
	gB3
,Åy≥«mê
	gB4
,Åy≥«mê
	gB5
>

1540 
unfﬁded_joö_node
(
gøph
 &
g
, 
B0
 
b0
, 
B1
 
b1
, 
B2
 
b2
, 
B3
 
b3
, 
B4
 
b4
, 
B5
 
b5
Ë: 
ba£_ty≥
(g,

1541 
func_öôülizî_ty≥
(

1542 
√w
 
öã∫Æ
::
fun˘i⁄_body_Àaf
<
T0
, 
èg_vÆue
, 
B0
>(
b0
),

1543 
√w
 
öã∫Æ
::
fun˘i⁄_body_Àaf
<
T1
, 
èg_vÆue
, 
B1
>(
b1
),

1544 
√w
 
öã∫Æ
::
fun˘i⁄_body_Àaf
<
T2
, 
èg_vÆue
, 
B2
>(
b2
),

1545 
√w
 
öã∫Æ
::
fun˘i⁄_body_Àaf
<
T3
, 
èg_vÆue
, 
B3
>(
b3
),

1546 
√w
 
öã∫Æ
::
fun˘i⁄_body_Àaf
<
T4
, 
èg_vÆue
, 
B4
>(
b4
),

1547 
√w
 
öã∫Æ
::
fun˘i⁄_body_Àaf
<
T5
, 
èg_vÆue
, 
B5
>(
b5
)

1549 
unfﬁded_joö_node
(c⁄° unfﬁded_joö_nodê&
Ÿhî
Ë: 
ba£_ty≥
(other) {}

1553 #i‡
__TBB_VARIADIC_MAX
 >= 7

1554 
	gãm∂©e
<
ty≥«me
 
	gOuçutTu∂e
>

1555 
˛ass
 
	gunfﬁded_joö_node
<7,
	gèg_m©chög_p‹t
,
	gOuçutTu∂e
,
	gèg_m©chög
> : 
public


1556 
joö_ba£
<7,
	gèg_m©chög_p‹t
,
	gOuçutTu∂e
,
	gèg_m©chög
>::
ty≥
 {

1557 
ty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<0, 
	tOuçutTu∂e
>::
	tty≥
 
	tT0
;

1558 
ty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<1, 
	tOuçutTu∂e
>::
	tty≥
 
	tT1
;

1559 
ty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<2, 
	tOuçutTu∂e
>::
	tty≥
 
	tT2
;

1560 
ty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<3, 
	tOuçutTu∂e
>::
	tty≥
 
	tT3
;

1561 
ty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<4, 
	tOuçutTu∂e
>::
	tty≥
 
	tT4
;

1562 
ty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<5, 
	tOuçutTu∂e
>::
	tty≥
 
	tT5
;

1563 
ty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<6, 
	tOuçutTu∂e
>::
	tty≥
 
	tT6
;

1564 
	gpublic
:

1565 
ty≥«me
 
	twøp_tu∂e_ñemíts
<7, 
	tèg_m©chög_p‹t
, 
	tOuçutTu∂e
>::
	tty≥
 
	töput_p‹ts_ty≥
;

1566 
OuçutTu∂e
 
	touçut_ty≥
;

1567 
	g¥iv©e
:

1568 
joö_node_ba£
<
	tèg_m©chög
, 
	töput_p‹ts_ty≥
, 
	touçut_ty≥
 > 
	tba£_ty≥
;

1569 
ty≥«me
 
	töã∫Æ
::
	tfun˘i⁄_body
<
	tT0
, 
	tèg_vÆue
> *
	tf0_p
;

1570 
ty≥«me
 
	töã∫Æ
::
	tfun˘i⁄_body
<
	tT1
, 
	tèg_vÆue
> *
	tf1_p
;

1571 
ty≥«me
 
	töã∫Æ
::
	tfun˘i⁄_body
<
	tT2
, 
	tèg_vÆue
> *
	tf2_p
;

1572 
ty≥«me
 
	töã∫Æ
::
	tfun˘i⁄_body
<
	tT3
, 
	tèg_vÆue
> *
	tf3_p
;

1573 
ty≥«me
 
	töã∫Æ
::
	tfun˘i⁄_body
<
	tT4
, 
	tèg_vÆue
> *
	tf4_p
;

1574 
ty≥«me
 
	töã∫Æ
::
	tfun˘i⁄_body
<
	tT5
, 
	tèg_vÆue
> *
	tf5_p
;

1575 
ty≥«me
 
	töã∫Æ
::
	tfun˘i⁄_body
<
	tT6
, 
	tèg_vÆue
> *
	tf6_p
;

1576 
ty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e
< 
	tf0_p
, 
	tf1_p
, 
	tf2_p
, 
	tf3_p
, 
	tf4_p
, 
	tf5_p
, 
	tf6_p
 > 
	tfunc_öôülizî_ty≥
;

1577 
	gpublic
:

1578 
ãm∂©e
<
ty≥«me
 
B0
,Åy≥«mê
	gB1
,Åy≥«mê
	gB2
,Åy≥«mê
	gB3
,Åy≥«mê
	gB4
,Åy≥«mê
	gB5
,Åy≥«mê
	gB6
>

1579 
unfﬁded_joö_node
(
gøph
 &
g
, 
B0
 
b0
, 
B1
 
b1
, 
B2
 
b2
, 
B3
 
b3
, 
B4
 
b4
, 
B5
 
b5
, 
B6
 
b6
Ë: 
ba£_ty≥
(g,

1580 
func_öôülizî_ty≥
(

1581 
√w
 
öã∫Æ
::
fun˘i⁄_body_Àaf
<
T0
, 
èg_vÆue
, 
B0
>(
b0
),

1582 
√w
 
öã∫Æ
::
fun˘i⁄_body_Àaf
<
T1
, 
èg_vÆue
, 
B1
>(
b1
),

1583 
√w
 
öã∫Æ
::
fun˘i⁄_body_Àaf
<
T2
, 
èg_vÆue
, 
B2
>(
b2
),

1584 
√w
 
öã∫Æ
::
fun˘i⁄_body_Àaf
<
T3
, 
èg_vÆue
, 
B3
>(
b3
),

1585 
√w
 
öã∫Æ
::
fun˘i⁄_body_Àaf
<
T4
, 
èg_vÆue
, 
B4
>(
b4
),

1586 
√w
 
öã∫Æ
::
fun˘i⁄_body_Àaf
<
T5
, 
èg_vÆue
, 
B5
>(
b5
),

1587 
√w
 
öã∫Æ
::
fun˘i⁄_body_Àaf
<
T6
, 
èg_vÆue
, 
B6
>(
b6
)

1589 
unfﬁded_joö_node
(c⁄° unfﬁded_joö_nodê&
Ÿhî
Ë: 
ba£_ty≥
(other) {}

1593 #i‡
__TBB_VARIADIC_MAX
 >= 8

1594 
	gãm∂©e
<
ty≥«me
 
	gOuçutTu∂e
>

1595 
˛ass
 
	gunfﬁded_joö_node
<8,
	gèg_m©chög_p‹t
,
	gOuçutTu∂e
,
	gèg_m©chög
> : 
public


1596 
joö_ba£
<8,
	gèg_m©chög_p‹t
,
	gOuçutTu∂e
,
	gèg_m©chög
>::
ty≥
 {

1597 
ty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<0, 
	tOuçutTu∂e
>::
	tty≥
 
	tT0
;

1598 
ty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<1, 
	tOuçutTu∂e
>::
	tty≥
 
	tT1
;

1599 
ty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<2, 
	tOuçutTu∂e
>::
	tty≥
 
	tT2
;

1600 
ty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<3, 
	tOuçutTu∂e
>::
	tty≥
 
	tT3
;

1601 
ty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<4, 
	tOuçutTu∂e
>::
	tty≥
 
	tT4
;

1602 
ty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<5, 
	tOuçutTu∂e
>::
	tty≥
 
	tT5
;

1603 
ty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<6, 
	tOuçutTu∂e
>::
	tty≥
 
	tT6
;

1604 
ty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<7, 
	tOuçutTu∂e
>::
	tty≥
 
	tT7
;

1605 
	gpublic
:

1606 
ty≥«me
 
	twøp_tu∂e_ñemíts
<8, 
	tèg_m©chög_p‹t
, 
	tOuçutTu∂e
>::
	tty≥
 
	töput_p‹ts_ty≥
;

1607 
OuçutTu∂e
 
	touçut_ty≥
;

1608 
	g¥iv©e
:

1609 
joö_node_ba£
<
	tèg_m©chög
, 
	töput_p‹ts_ty≥
, 
	touçut_ty≥
 > 
	tba£_ty≥
;

1610 
ty≥«me
 
	töã∫Æ
::
	tfun˘i⁄_body
<
	tT0
, 
	tèg_vÆue
> *
	tf0_p
;

1611 
ty≥«me
 
	töã∫Æ
::
	tfun˘i⁄_body
<
	tT1
, 
	tèg_vÆue
> *
	tf1_p
;

1612 
ty≥«me
 
	töã∫Æ
::
	tfun˘i⁄_body
<
	tT2
, 
	tèg_vÆue
> *
	tf2_p
;

1613 
ty≥«me
 
	töã∫Æ
::
	tfun˘i⁄_body
<
	tT3
, 
	tèg_vÆue
> *
	tf3_p
;

1614 
ty≥«me
 
	töã∫Æ
::
	tfun˘i⁄_body
<
	tT4
, 
	tèg_vÆue
> *
	tf4_p
;

1615 
ty≥«me
 
	töã∫Æ
::
	tfun˘i⁄_body
<
	tT5
, 
	tèg_vÆue
> *
	tf5_p
;

1616 
ty≥«me
 
	töã∫Æ
::
	tfun˘i⁄_body
<
	tT6
, 
	tèg_vÆue
> *
	tf6_p
;

1617 
ty≥«me
 
	töã∫Æ
::
	tfun˘i⁄_body
<
	tT7
, 
	tèg_vÆue
> *
	tf7_p
;

1618 
ty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e
< 
	tf0_p
, 
	tf1_p
, 
	tf2_p
, 
	tf3_p
, 
	tf4_p
, 
	tf5_p
, 
	tf6_p
, 
	tf7_p
 > 
	tfunc_öôülizî_ty≥
;

1619 
	gpublic
:

1620 
ãm∂©e
<
ty≥«me
 
B0
,Åy≥«mê
	gB1
,Åy≥«mê
	gB2
,Åy≥«mê
	gB3
,Åy≥«mê
	gB4
,Åy≥«mê
	gB5
,Åy≥«mê
	gB6
,Åy≥«mê
	gB7
>

1621 
unfﬁded_joö_node
(
gøph
 &
g
, 
B0
 
b0
, 
B1
 
b1
, 
B2
 
b2
, 
B3
 
b3
, 
B4
 
b4
, 
B5
 
b5
, 
B6
 
b6
, 
B7
 
b7
Ë: 
ba£_ty≥
(g,

1622 
func_öôülizî_ty≥
(

1623 
√w
 
öã∫Æ
::
fun˘i⁄_body_Àaf
<
T0
, 
èg_vÆue
, 
B0
>(
b0
),

1624 
√w
 
öã∫Æ
::
fun˘i⁄_body_Àaf
<
T1
, 
èg_vÆue
, 
B1
>(
b1
),

1625 
√w
 
öã∫Æ
::
fun˘i⁄_body_Àaf
<
T2
, 
èg_vÆue
, 
B2
>(
b2
),

1626 
√w
 
öã∫Æ
::
fun˘i⁄_body_Àaf
<
T3
, 
èg_vÆue
, 
B3
>(
b3
),

1627 
√w
 
öã∫Æ
::
fun˘i⁄_body_Àaf
<
T4
, 
èg_vÆue
, 
B4
>(
b4
),

1628 
√w
 
öã∫Æ
::
fun˘i⁄_body_Àaf
<
T5
, 
èg_vÆue
, 
B5
>(
b5
),

1629 
√w
 
öã∫Æ
::
fun˘i⁄_body_Àaf
<
T6
, 
èg_vÆue
, 
B6
>(
b6
),

1630 
√w
 
öã∫Æ
::
fun˘i⁄_body_Àaf
<
T7
, 
èg_vÆue
, 
B7
>(
b7
)

1632 
unfﬁded_joö_node
(c⁄° unfﬁded_joö_nodê&
Ÿhî
Ë: 
ba£_ty≥
(other) {}

1636 #i‡
__TBB_VARIADIC_MAX
 >= 9

1637 
	gãm∂©e
<
ty≥«me
 
	gOuçutTu∂e
>

1638 
˛ass
 
	gunfﬁded_joö_node
<9,
	gèg_m©chög_p‹t
,
	gOuçutTu∂e
,
	gèg_m©chög
> : 
public


1639 
joö_ba£
<9,
	gèg_m©chög_p‹t
,
	gOuçutTu∂e
,
	gèg_m©chög
>::
ty≥
 {

1640 
ty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<0, 
	tOuçutTu∂e
>::
	tty≥
 
	tT0
;

1641 
ty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<1, 
	tOuçutTu∂e
>::
	tty≥
 
	tT1
;

1642 
ty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<2, 
	tOuçutTu∂e
>::
	tty≥
 
	tT2
;

1643 
ty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<3, 
	tOuçutTu∂e
>::
	tty≥
 
	tT3
;

1644 
ty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<4, 
	tOuçutTu∂e
>::
	tty≥
 
	tT4
;

1645 
ty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<5, 
	tOuçutTu∂e
>::
	tty≥
 
	tT5
;

1646 
ty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<6, 
	tOuçutTu∂e
>::
	tty≥
 
	tT6
;

1647 
ty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<7, 
	tOuçutTu∂e
>::
	tty≥
 
	tT7
;

1648 
ty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<8, 
	tOuçutTu∂e
>::
	tty≥
 
	tT8
;

1649 
	gpublic
:

1650 
ty≥«me
 
	twøp_tu∂e_ñemíts
<9, 
	tèg_m©chög_p‹t
, 
	tOuçutTu∂e
>::
	tty≥
 
	töput_p‹ts_ty≥
;

1651 
OuçutTu∂e
 
	touçut_ty≥
;

1652 
	g¥iv©e
:

1653 
joö_node_ba£
<
	tèg_m©chög
, 
	töput_p‹ts_ty≥
, 
	touçut_ty≥
 > 
	tba£_ty≥
;

1654 
ty≥«me
 
	töã∫Æ
::
	tfun˘i⁄_body
<
	tT0
, 
	tèg_vÆue
> *
	tf0_p
;

1655 
ty≥«me
 
	töã∫Æ
::
	tfun˘i⁄_body
<
	tT1
, 
	tèg_vÆue
> *
	tf1_p
;

1656 
ty≥«me
 
	töã∫Æ
::
	tfun˘i⁄_body
<
	tT2
, 
	tèg_vÆue
> *
	tf2_p
;

1657 
ty≥«me
 
	töã∫Æ
::
	tfun˘i⁄_body
<
	tT3
, 
	tèg_vÆue
> *
	tf3_p
;

1658 
ty≥«me
 
	töã∫Æ
::
	tfun˘i⁄_body
<
	tT4
, 
	tèg_vÆue
> *
	tf4_p
;

1659 
ty≥«me
 
	töã∫Æ
::
	tfun˘i⁄_body
<
	tT5
, 
	tèg_vÆue
> *
	tf5_p
;

1660 
ty≥«me
 
	töã∫Æ
::
	tfun˘i⁄_body
<
	tT6
, 
	tèg_vÆue
> *
	tf6_p
;

1661 
ty≥«me
 
	töã∫Æ
::
	tfun˘i⁄_body
<
	tT7
, 
	tèg_vÆue
> *
	tf7_p
;

1662 
ty≥«me
 
	töã∫Æ
::
	tfun˘i⁄_body
<
	tT8
, 
	tèg_vÆue
> *
	tf8_p
;

1663 
ty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e
< 
	tf0_p
, 
	tf1_p
, 
	tf2_p
, 
	tf3_p
, 
	tf4_p
, 
	tf5_p
, 
	tf6_p
, 
	tf7_p
, 
	tf8_p
 > 
	tfunc_öôülizî_ty≥
;

1664 
	gpublic
:

1665 
ãm∂©e
<
ty≥«me
 
B0
,Åy≥«mê
	gB1
,Åy≥«mê
	gB2
,Åy≥«mê
	gB3
,Åy≥«mê
	gB4
,Åy≥«mê
	gB5
,Åy≥«mê
	gB6
,Åy≥«mê
	gB7
,Åy≥«mê
	gB8
>

1666 
unfﬁded_joö_node
(
gøph
 &
g
, 
B0
 
b0
, 
B1
 
b1
, 
B2
 
b2
, 
B3
 
b3
, 
B4
 
b4
, 
B5
 
b5
, 
B6
 
b6
, 
B7
 
b7
, 
B8
 
b8
Ë: 
ba£_ty≥
(g,

1667 
func_öôülizî_ty≥
(

1668 
√w
 
öã∫Æ
::
fun˘i⁄_body_Àaf
<
T0
, 
èg_vÆue
, 
B0
>(
b0
),

1669 
√w
 
öã∫Æ
::
fun˘i⁄_body_Àaf
<
T1
, 
èg_vÆue
, 
B1
>(
b1
),

1670 
√w
 
öã∫Æ
::
fun˘i⁄_body_Àaf
<
T2
, 
èg_vÆue
, 
B2
>(
b2
),

1671 
√w
 
öã∫Æ
::
fun˘i⁄_body_Àaf
<
T3
, 
èg_vÆue
, 
B3
>(
b3
),

1672 
√w
 
öã∫Æ
::
fun˘i⁄_body_Àaf
<
T4
, 
èg_vÆue
, 
B4
>(
b4
),

1673 
√w
 
öã∫Æ
::
fun˘i⁄_body_Àaf
<
T5
, 
èg_vÆue
, 
B5
>(
b5
),

1674 
√w
 
öã∫Æ
::
fun˘i⁄_body_Àaf
<
T6
, 
èg_vÆue
, 
B6
>(
b6
),

1675 
√w
 
öã∫Æ
::
fun˘i⁄_body_Àaf
<
T7
, 
èg_vÆue
, 
B7
>(
b7
),

1676 
√w
 
öã∫Æ
::
fun˘i⁄_body_Àaf
<
T8
, 
èg_vÆue
, 
B8
>(
b8
)

1678 
unfﬁded_joö_node
(c⁄° unfﬁded_joö_nodê&
Ÿhî
Ë: 
ba£_ty≥
(other) {}

1682 #i‡
__TBB_VARIADIC_MAX
 >= 10

1683 
	gãm∂©e
<
ty≥«me
 
	gOuçutTu∂e
>

1684 
˛ass
 
	gunfﬁded_joö_node
<10,
	gèg_m©chög_p‹t
,
	gOuçutTu∂e
,
	gèg_m©chög
> : 
public


1685 
joö_ba£
<10,
	gèg_m©chög_p‹t
,
	gOuçutTu∂e
,
	gèg_m©chög
>::
ty≥
 {

1686 
ty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<0, 
	tOuçutTu∂e
>::
	tty≥
 
	tT0
;

1687 
ty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<1, 
	tOuçutTu∂e
>::
	tty≥
 
	tT1
;

1688 
ty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<2, 
	tOuçutTu∂e
>::
	tty≥
 
	tT2
;

1689 
ty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<3, 
	tOuçutTu∂e
>::
	tty≥
 
	tT3
;

1690 
ty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<4, 
	tOuçutTu∂e
>::
	tty≥
 
	tT4
;

1691 
ty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<5, 
	tOuçutTu∂e
>::
	tty≥
 
	tT5
;

1692 
ty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<6, 
	tOuçutTu∂e
>::
	tty≥
 
	tT6
;

1693 
ty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<7, 
	tOuçutTu∂e
>::
	tty≥
 
	tT7
;

1694 
ty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<8, 
	tOuçutTu∂e
>::
	tty≥
 
	tT8
;

1695 
ty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<9, 
	tOuçutTu∂e
>::
	tty≥
 
	tT9
;

1696 
	gpublic
:

1697 
ty≥«me
 
	twøp_tu∂e_ñemíts
<10, 
	tèg_m©chög_p‹t
, 
	tOuçutTu∂e
>::
	tty≥
 
	töput_p‹ts_ty≥
;

1698 
OuçutTu∂e
 
	touçut_ty≥
;

1699 
	g¥iv©e
:

1700 
joö_node_ba£
<
	tèg_m©chög
, 
	töput_p‹ts_ty≥
, 
	touçut_ty≥
 > 
	tba£_ty≥
;

1701 
ty≥«me
 
	töã∫Æ
::
	tfun˘i⁄_body
<
	tT0
, 
	tèg_vÆue
> *
	tf0_p
;

1702 
ty≥«me
 
	töã∫Æ
::
	tfun˘i⁄_body
<
	tT1
, 
	tèg_vÆue
> *
	tf1_p
;

1703 
ty≥«me
 
	töã∫Æ
::
	tfun˘i⁄_body
<
	tT2
, 
	tèg_vÆue
> *
	tf2_p
;

1704 
ty≥«me
 
	töã∫Æ
::
	tfun˘i⁄_body
<
	tT3
, 
	tèg_vÆue
> *
	tf3_p
;

1705 
ty≥«me
 
	töã∫Æ
::
	tfun˘i⁄_body
<
	tT4
, 
	tèg_vÆue
> *
	tf4_p
;

1706 
ty≥«me
 
	töã∫Æ
::
	tfun˘i⁄_body
<
	tT5
, 
	tèg_vÆue
> *
	tf5_p
;

1707 
ty≥«me
 
	töã∫Æ
::
	tfun˘i⁄_body
<
	tT6
, 
	tèg_vÆue
> *
	tf6_p
;

1708 
ty≥«me
 
	töã∫Æ
::
	tfun˘i⁄_body
<
	tT7
, 
	tèg_vÆue
> *
	tf7_p
;

1709 
ty≥«me
 
	töã∫Æ
::
	tfun˘i⁄_body
<
	tT8
, 
	tèg_vÆue
> *
	tf8_p
;

1710 
ty≥«me
 
	töã∫Æ
::
	tfun˘i⁄_body
<
	tT9
, 
	tèg_vÆue
> *
	tf9_p
;

1711 
ty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e
< 
	tf0_p
, 
	tf1_p
, 
	tf2_p
, 
	tf3_p
, 
	tf4_p
, 
	tf5_p
, 
	tf6_p
, 
	tf7_p
, 
	tf8_p
, 
	tf9_p
 > 
	tfunc_öôülizî_ty≥
;

1712 
	gpublic
:

1713 
ãm∂©e
<
ty≥«me
 
B0
,Åy≥«mê
	gB1
,Åy≥«mê
	gB2
,Åy≥«mê
	gB3
,Åy≥«mê
	gB4
,Åy≥«mê
	gB5
,Åy≥«mê
	gB6
,Åy≥«mê
	gB7
,Åy≥«mê
	gB8
,Åy≥«mê
	gB9
>

1714 
unfﬁded_joö_node
(
gøph
 &
g
, 
B0
 
b0
, 
B1
 
b1
, 
B2
 
b2
, 
B3
 
b3
, 
B4
 
b4
, 
B5
 
b5
, 
B6
 
b6
, 
B7
 
b7
, 
B8
 
b8
, 
B9
 
b9
Ë: 
ba£_ty≥
(g,

1715 
func_öôülizî_ty≥
(

1716 
√w
 
öã∫Æ
::
fun˘i⁄_body_Àaf
<
T0
, 
èg_vÆue
, 
B0
>(
b0
),

1717 
√w
 
öã∫Æ
::
fun˘i⁄_body_Àaf
<
T1
, 
èg_vÆue
, 
B1
>(
b1
),

1718 
√w
 
öã∫Æ
::
fun˘i⁄_body_Àaf
<
T2
, 
èg_vÆue
, 
B2
>(
b2
),

1719 
√w
 
öã∫Æ
::
fun˘i⁄_body_Àaf
<
T3
, 
èg_vÆue
, 
B3
>(
b3
),

1720 
√w
 
öã∫Æ
::
fun˘i⁄_body_Àaf
<
T4
, 
èg_vÆue
, 
B4
>(
b4
),

1721 
√w
 
öã∫Æ
::
fun˘i⁄_body_Àaf
<
T5
, 
èg_vÆue
, 
B5
>(
b5
),

1722 
√w
 
öã∫Æ
::
fun˘i⁄_body_Àaf
<
T6
, 
èg_vÆue
, 
B6
>(
b6
),

1723 
√w
 
öã∫Æ
::
fun˘i⁄_body_Àaf
<
T7
, 
èg_vÆue
, 
B7
>(
b7
),

1724 
√w
 
öã∫Æ
::
fun˘i⁄_body_Àaf
<
T8
, 
èg_vÆue
, 
B8
>(
b8
),

1725 
√w
 
öã∫Æ
::
fun˘i⁄_body_Àaf
<
T9
, 
èg_vÆue
, 
B9
>(
b9
)

1727 
unfﬁded_joö_node
(c⁄° unfﬁded_joö_nodê&
Ÿhî
Ë: 
ba£_ty≥
(other) {}

1732 
	gãm∂©e
<
size_t
 
	gN
, 
ty≥«me
 
	gJNT
>

1733 
ty≥«me
 
	gtbb
::
Êow
::
tu∂e_ñemít
<
N
,Åy≥«mê
	gJNT
::
öput_p‹ts_ty≥
>::
ty≥
 &
öput_p‹t
(
JNT
 &
jn
) {

1734  
tbb
::
Êow
::
gë
<
N
>(
jn
.
öput_p‹ts
());

	@viper/concurrentqueue-src/benchmarks/tbb/internal/_flow_graph_node_impl.h

21 #i‚de‡
__TBB__Êow_gøph_node_im∂_H


22 
	#__TBB__Êow_gøph_node_im∂_H


	)

24 #i‚de‡
__TBB_Êow_gøph_H


25 #îr‹ 
Do
 
nŸ
 #ö˛udê
this
 
öã∫Æ
 
fûe
 
dúe˘ly
; 
u£
 
public
 
TBB
 
hódîs
 
ö°ód
.

28 
	~"_Êow_gøph_ôem_buf„r_im∂.h
"

31 
«me•a˚
 
	göã∫Æ
 {

33 
usög
 
	gtbb
::
öã∫Æ
::
aggªg©ed_›î©i⁄
;

34 
usög
 
	gtbb
::
öã∫Æ
::
aggªg©ög_fun˘‹
;

35 
usög
 
	gtbb
::
öã∫Æ
::
aggªg©‹
;

37 
	gãm∂©e
< 
ty≥«me
 
	gT
,Åy≥«mê
	gA
 >

38 
˛ass
 
	gfun˘i⁄_öput_queue
 : 
public
 
ôem_buf„r
<
T
,
	gA
> {

39 
	gpublic
:

40 
boﬁ
 
p›
–
T
& 
t
 ) {

41  
this
->
p›_‰⁄t
–
t
 );

44 
boﬁ
 
push
–
T
& 
t
 ) {

45  
	gthis
->
push_back
–
t
 );

52 
	gãm∂©e
< 
ty≥«me
 
	gI≈ut
,Åy≥«mê
	gA
,Åy≥«mê
	gIm∂Ty≥
 >

53 
˛ass
 
	gfun˘i⁄_öput_ba£
 : 
public
 
ª˚ivî
<
I≈ut
>, 
	gtbb
::
öã∫Æ
::
no_assign
 {

54 
	e›_°©
 {
WAIT
=0, 
	gSUCCEEDED
, 
	gFAILED
};

55 
	e›_ty≥
 {
	gªg_¥ed
, 
	gªm_¥ed
, 
	g≠p_body
, 
	gåy_fwd
, 
	gåyput_by∑ss
, 
	g≠p_body_by∑ss


56 #i‡
TBB_PREVIEW_FLOW_GRAPH_FEATURES


57 , 
	gadd_b…_¥ed
, 
	gdñ_b…_¥ed
,

58 
	gb…_¥ed_˙t
, 
	gb…_¥ed_˝y


61 
	gfun˘i⁄_öput_ba£
<
	tI≈ut
, 
	tA
, 
	tIm∂Ty≥
> 
	tmy_˛ass
;

63 
	gpublic
:

66 
I≈ut
 
	töput_ty≥
;

67 
	g£ndî
<
	tI≈ut
> 
	t¥ede˚ss‹_ty≥
;

69 #i‡
TBB_PREVIEW_FLOW_GRAPH_FEATURES


70 
	g°d
::
	tve˘‹
<
	t¥ede˚ss‹_ty≥
 *> 
	t¥ede˚ss‹_ve˘‹_ty≥
;

74 
fun˘i⁄_öput_ba£
–
gøph
 &
g
, 
size_t
 
max_c⁄cuºícy
, 
fun˘i⁄_öput_queue
<
öput_ty≥
,
A
> *
q
 = 
NULL
 )

75 : 
my_gøph
(
g
), 
my_max_c⁄cuºícy
(
max_c⁄cuºícy
), 
my_c⁄cuºícy
(0),

76 
my_queue
(
q
), 
f‹w¨dî_busy
(
Ál£
) {

77 
	gmy_¥ede˚ss‹s
.
£t_ow√r
(
this
);

78 
	gmy_aggªg©‹
.
öôülize_h™dÀr
(
my_h™dÀr
(
this
));

82 
fun˘i⁄_öput_ba£
–c⁄° fun˘i⁄_öput_ba£& 
§c
, 
fun˘i⁄_öput_queue
<
öput_ty≥
,
A
> *
q
 = 
NULL
 ) :

83 
ª˚ivî
<
I≈ut
>(), 
	gtbb
::
öã∫Æ
::
no_assign
(),

84 
my_gøph
(
§c
.my_gøph), 
my_max_c⁄cuºícy
(src.my_max_concurrency),

85 
my_c⁄cuºícy
(0), 
my_queue
(
q
), 
f‹w¨dî_busy
(
Ál£
)

87 
	gmy_¥ede˚ss‹s
.
£t_ow√r
(
this
);

88 
	gmy_aggªg©‹
.
öôülize_h™dÀr
(
my_h™dÀr
(
this
));

92 
	gvútuÆ
 ~
fun˘i⁄_öput_ba£
() {

93 i‡–
	gmy_queue
 ) 
dñëe
 my_queue;

97 
vútuÆ
 
èsk
 * 
åy_put_èsk
–c⁄° 
öput_ty≥
 &
t
 ) {

98 i‡–
	gmy_max_c⁄cuºícy
 == 0 ) {

99  
¸óã_body_èsk
–
t
 );

101 
my_›î©i⁄
 
›_d©a
(
t
, 
åyput_by∑ss
);

102 
	gmy_aggªg©‹
.
execuã
(&
›_d©a
);

103 if(
	g›_d©a
.
	g°©us
 =
SUCCEEDED
 ) {

104  
›_d©a
.
by∑ss_t
;

106  
	gNULL
;

111  
boﬁ
 
ªgi°î_¥ede˚ss‹
–
¥ede˚ss‹_ty≥
 &
§c
 ) {

112 
my_›î©i⁄
 
›_d©a
(
ªg_¥ed
);

113 
	g›_d©a
.
	gr
 = &
§c
;

114 
	gmy_aggªg©‹
.
execuã
(&
›_d©a
);

115  
	gåue
;

119  
boﬁ
 
ªmove_¥ede˚ss‹
–
¥ede˚ss‹_ty≥
 &
§c
 ) {

120 
my_›î©i⁄
 
›_d©a
(
ªm_¥ed
);

121 
	g›_d©a
.
	gr
 = &
§c
;

122 
	gmy_aggªg©‹
.
execuã
(&
›_d©a
);

123  
	gåue
;

126 #i‡
TBB_PREVIEW_FLOW_GRAPH_FEATURES


128  
öã∫Æ_add_buût_¥ede˚ss‹
–
¥ede˚ss‹_ty≥
 &
§c
) {

129 
my_›î©i⁄
 
›_d©a
(
add_b…_¥ed
);

130 
	g›_d©a
.
	gr
 = &
§c
;

131 
	gmy_aggªg©‹
.
execuã
(&
›_d©a
);

135  
öã∫Æ_dñëe_buût_¥ede˚ss‹
–
¥ede˚ss‹_ty≥
 &
§c
) {

136 
my_›î©i⁄
 
›_d©a
(
dñ_b…_¥ed
);

137 
	g›_d©a
.
	gr
 = &
§c
;

138 
	gmy_aggªg©‹
.
execuã
(&
›_d©a
);

141  
size_t
 
¥ede˚ss‹_cou¡
() {

142 
my_›î©i⁄
 
›_d©a
(
b…_¥ed_˙t
);

143 
	gmy_aggªg©‹
.
execuã
(&
›_d©a
);

144  
	g›_d©a
.
	g˙t_vÆ
;

147  
c›y_¥ede˚ss‹s
(
¥ede˚ss‹_ve˘‹_ty≥
 &
v
) {

148 
my_›î©i⁄
 
›_d©a
(
b…_¥ed_˝y
);

149 
	g›_d©a
.
	g¥edv
 = &
v
;

150 
	gmy_aggªg©‹
.
execuã
(&
›_d©a
);

154 
	g¥Ÿe˘ed
:

156 
ª£t_fun˘i⁄_öput_ba£
–
__TBB_PFG_RESET_ARG
(
ª£t_Êags
 
f
)) {

157 
my_c⁄cuºícy
 = 0;

158 if(
	gmy_queue
) {

159 
	gmy_queue
->
ª£t
();

161 
ª£t_ª˚ivî
(
__TBB_PFG_RESET_ARG
(
f
));

162 
	gf‹w¨dî_busy
 = 
Ál£
;

165 
	ggøph
& 
	gmy_gøph
;

166 c⁄° 
size_t
 
	gmy_max_c⁄cuºícy
;

167 
size_t
 
	gmy_c⁄cuºícy
;

168 
	gfun˘i⁄_öput_queue
<
	göput_ty≥
, 
	gA
> *
	gmy_queue
;

169 
	g¥ede˚ss‹_ˇche
<
	göput_ty≥
, 
	gnuŒ_muãx
 > 
	gmy_¥ede˚ss‹s
;

171  
ª£t_ª˚ivî
–
__TBB_PFG_RESET_ARG
(
ª£t_Êags
 
f
)) {

172 
	gmy_¥ede˚ss‹s
.
ª£t
(
__TBB_PFG_RESET_ARG
(
f
));

173 #i‡
TBB_PREVIEW_FLOW_GRAPH_FEATURES


174 
__TBB_ASSERT
(!(
f
 & 
rf_exåa˘
Ë|| 
my_¥ede˚ss‹s
.
em±y
(), "function_input_baseÑeset failed");

178 
	g¥iv©e
:

180 
‰õnd
 
˛ass
 
≠∂y_body_èsk_by∑ss
< 
my_˛ass
, 
	göput_ty≥
 >;

181 
‰õnd
 
˛ass
 
	gf‹w¨d_èsk_by∑ss
< 
	gmy_˛ass
 >;

183 
˛ass
 
	gmy_›î©i⁄
 : 
public
 
aggªg©ed_›î©i⁄
< 
my_›î©i⁄
 > {

184 
public
:

185 
ty≥
;

187 
öput_ty≥
 *
	gñem
;

188 
¥ede˚ss‹_ty≥
 *
	gr
;

189 #i‡
TBB_PREVIEW_FLOW_GRAPH_FEATURES


190 
size_t
 
	g˙t_vÆ
;

191 
¥ede˚ss‹_ve˘‹_ty≥
 *
	g¥edv
;

194 
	gtbb
::
èsk
 *
by∑ss_t
;

195 
my_›î©i⁄
(c⁄° 
öput_ty≥
& 
e
, 
›_ty≥
 
t
) :

196 
ty≥
((
t
)), 
ñem
(
c⁄°_ˇ°
<
öput_ty≥
*>(&
e
)) {}

197 
my_›î©i⁄
(
›_ty≥
 
t
Ë: 
ty≥
(—)), 
r
(
NULL
) {}

200 
boﬁ
 
	gf‹w¨dî_busy
;

201 
	göã∫Æ
::
	taggªg©ög_fun˘‹
<
	tmy_˛ass
, 
	tmy_›î©i⁄
> 
	tmy_h™dÀr
;

202 
‰õnd
 
˛ass
 
	göã∫Æ
::
aggªg©ög_fun˘‹
<
my_˛ass
, 
	gmy_›î©i⁄
>;

203 
	gaggªg©‹
< 
	gmy_h™dÀr
, 
	gmy_›î©i⁄
 > 
	gmy_aggªg©‹
;

205 
h™dÀ_›î©i⁄s
(
my_›î©i⁄
 *
›_li°
) {

206 
my_›î©i⁄
 *
	gtmp
;

207 
	g›_li°
) {

208 
	gtmp
 = 
›_li°
;

209 
	g›_li°
 = 
›_li°
->
√xt
;

210 
	gtmp
->
	gty≥
) {

211 
	gªg_¥ed
:

212 
my_¥ede˚ss‹s
.
add
(*(
tmp
->
r
));

213 
__TBB_°‹e_wôh_ªÀa£
(
tmp
->
°©us
, 
SUCCEEDED
);

214 i‡(!
	gf‹w¨dî_busy
) {

215 
	gf‹w¨dî_busy
 = 
åue
;

216 
•awn_f‹w¨d_èsk
();

219 
	gªm_¥ed
:

220 
my_¥ede˚ss‹s
.
ªmove
(*(
tmp
->
r
));

221 
__TBB_°‹e_wôh_ªÀa£
(
tmp
->
°©us
, 
SUCCEEDED
);

223 
	g≠p_body
:

224 
__TBB_ASSERT
(
my_max_c⁄cuºícy
 !0, 
NULL
);

225 --
	gmy_c⁄cuºícy
;

226 
__TBB_°‹e_wôh_ªÀa£
(
tmp
->
°©us
, 
SUCCEEDED
);

227 i‡(
	gmy_c⁄cuºícy
<
	gmy_max_c⁄cuºícy
) {

228 
öput_ty≥
 
	gi
;

229 
boﬁ
 
	gôem_was_ªåõved
 = 
Ál£
;

230 i‡–
	gmy_queue
 )

231 
	gôem_was_ªåõved
 = 
my_queue
->
p›
(
i
);

233 
	gôem_was_ªåõved
 = 
my_¥ede˚ss‹s
.
gë_ôem
(
i
);

234 i‡(
	gôem_was_ªåõved
) {

235 ++
	gmy_c⁄cuºícy
;

236 
•awn_body_èsk
(
i
);

240 
	g≠p_body_by∑ss
: {

241 
èsk
 * 
√w_èsk
 = 
NULL
;

242 
__TBB_ASSERT
(
my_max_c⁄cuºícy
 !0, 
NULL
);

243 --
	gmy_c⁄cuºícy
;

244 i‡(
	gmy_c⁄cuºícy
<
	gmy_max_c⁄cuºícy
) {

245 
öput_ty≥
 
	gi
;

246 
boﬁ
 
	gôem_was_ªåõved
 = 
Ál£
;

247 i‡–
	gmy_queue
 )

248 
	gôem_was_ªåõved
 = 
my_queue
->
p›
(
i
);

250 
	gôem_was_ªåõved
 = 
my_¥ede˚ss‹s
.
gë_ôem
(
i
);

251 i‡(
	gôem_was_ªåõved
) {

252 ++
	gmy_c⁄cuºícy
;

253 
	g√w_èsk
 = 
¸óã_body_èsk
(
i
);

256 
	gtmp
->
	gby∑ss_t
 = 
√w_èsk
;

257 
__TBB_°‹e_wôh_ªÀa£
(
tmp
->
°©us
, 
SUCCEEDED
);

260 
	gåyput_by∑ss
: 
öã∫Æ_åy_put_èsk
(
tmp
); ;

261 
	gåy_fwd
: 
öã∫Æ_f‹w¨d
(
tmp
); ;

262 #i‡
TBB_PREVIEW_FLOW_GRAPH_FEATURES


263 
	gadd_b…_¥ed
: {

264 
my_¥ede˚ss‹s
.
öã∫Æ_add_buût_¥ede˚ss‹
(*(
tmp
->
r
));

265 
__TBB_°‹e_wôh_ªÀa£
(
tmp
->
°©us
, 
SUCCEEDED
);

268 
	gdñ_b…_¥ed
:

269 
my_¥ede˚ss‹s
.
öã∫Æ_dñëe_buût_¥ede˚ss‹
(*(
tmp
->
r
));

270 
__TBB_°‹e_wôh_ªÀa£
(
tmp
->
°©us
, 
SUCCEEDED
);

272 
	gb…_¥ed_˙t
:

273 
tmp
->
˙t_vÆ
 = 
my_¥ede˚ss‹s
.
¥ede˚ss‹_cou¡
();

274 
__TBB_°‹e_wôh_ªÀa£
(
tmp
->
°©us
, 
SUCCEEDED
);

276 
	gb…_¥ed_˝y
:

277 
my_¥ede˚ss‹s
.
c›y_¥ede˚ss‹s
–*(
tmp
->
¥edv
) );

278 
__TBB_°‹e_wôh_ªÀa£
(
tmp
->
°©us
, 
SUCCEEDED
);

286 
öã∫Æ_åy_put_èsk
(
my_›î©i⁄
 *
›
) {

287 
__TBB_ASSERT
(
my_max_c⁄cuºícy
 !0, 
NULL
);

288 i‡(
	gmy_c⁄cuºícy
 < 
	gmy_max_c⁄cuºícy
) {

289 ++
	gmy_c⁄cuºícy
;

290 
èsk
 * 
	g√w_èsk
 = 
¸óã_body_èsk
(*(
›
->
ñem
));

291 
	g›
->
	gby∑ss_t
 = 
√w_èsk
;

292 
__TBB_°‹e_wôh_ªÀa£
(
›
->
°©us
, 
SUCCEEDED
);

293 } i‡–
	gmy_queue
 && my_queue->
push
(*(
›
->
ñem
)) ) {

294 
	g›
->
	gby∑ss_t
 = 
SUCCESSFULLY_ENQUEUED
;

295 
__TBB_°‹e_wôh_ªÀa£
(
›
->
°©us
, 
SUCCEEDED
);

297 
	g›
->
	gby∑ss_t
 = 
NULL
;

298 
__TBB_°‹e_wôh_ªÀa£
(
›
->
°©us
, 
FAILED
);

303 
öã∫Æ_f‹w¨d
(
my_›î©i⁄
 *
›
) {

304 
	g›
->
	gby∑ss_t
 = 
NULL
;

305 i‡(
	gmy_c⁄cuºícy
<
	gmy_max_c⁄cuºícy
 || !my_max_concurrency) {

306 
öput_ty≥
 
	gi
;

307 
boﬁ
 
	gôem_was_ªåõved
 = 
Ál£
;

308 i‡–
	gmy_queue
 )

309 
	gôem_was_ªåõved
 = 
my_queue
->
p›
(
i
);

311 
	gôem_was_ªåõved
 = 
my_¥ede˚ss‹s
.
gë_ôem
(
i
);

312 i‡(
	gôem_was_ªåõved
) {

313 ++
	gmy_c⁄cuºícy
;

314 
	g›
->
	gby∑ss_t
 = 
¸óã_body_èsk
(
i
);

315 
__TBB_°‹e_wôh_ªÀa£
(
›
->
°©us
, 
SUCCEEDED
);

319 
__TBB_°‹e_wôh_ªÀa£
(
›
->
°©us
, 
FAILED
);

320 
	gf‹w¨dî_busy
 = 
Ál£
;

325 
≠∂y_body
–
öput_ty≥
 &
i
 ) {

326 
èsk
 *
	g√w_èsk
 = 
≠∂y_body_by∑ss
(
i
);

327 if(!
	g√w_èsk
) ;

328 if(
	g√w_èsk
 =
SUCCESSFULLY_ENQUEUED
) ;

329 
FLOW_SPAWN
(*
√w_èsk
);

335 
èsk
 * 
≠∂y_body_by∑ss
–
öput_ty≥
 &
i
 ) {

336 
èsk
 * 
	g√w_èsk
 = 
°©ic_ˇ°
<
Im∂Ty≥
 *>(
this
)->
≠∂y_body_im∂_by∑ss
(
i
);

337 i‡–
	gmy_max_c⁄cuºícy
 != 0 ) {

338 
my_›î©i⁄
 
›_d©a
(
≠p_body_by∑ss
);

339 
	gmy_aggªg©‹
.
execuã
(&
›_d©a
);

340 
	gtbb
::
èsk
 *
âask
 = 
›_d©a
.
by∑ss_t
;

341 
	g√w_èsk
 = 
comböe_èsks
(
√w_èsk
, 
âask
);

343  
	g√w_èsk
;

347 
ölöe
 
èsk
 * 
¸óã_body_èsk
–c⁄° 
öput_ty≥
 &
öput
 ) {

349 
èsk
* 
	gç
 = 
my_gøph
.
roŸ_èsk
();

350  (
	gç
) ?

351 
√w
(
èsk
::
Æloˇã_addôi⁄Æ_chûd_of
(*
ç
))

352 
≠∂y_body_èsk_by∑ss
 < 
my_˛ass
, 
	göput_ty≥
 >(*
	gthis
, 
	göput
) :

353 
NULL
;

357 
ölöe
 
•awn_body_èsk
–c⁄° 
öput_ty≥
 &
öput
 ) {

358 
èsk
* 
	gç
 = 
¸óã_body_èsk
(
öput
);

360 if(
	gç
) {

361 
FLOW_SPAWN
(*
ç
);

366 
èsk
 *
f‹w¨d_èsk
() {

367 
my_›î©i⁄
 
›_d©a
(
åy_fwd
);

368 
èsk
 *
	grvÆ
 = 
NULL
;

370 
	g›_d©a
.
	g°©us
 = 
WAIT
;

371 
	gmy_aggªg©‹
.
execuã
(&
›_d©a
);

372 if(
	g›_d©a
.
	g°©us
 =
SUCCEEDED
) {

373 
tbb
::
èsk
 *
âask
 = 
›_d©a
.
by∑ss_t
;

374 
	grvÆ
 = 
comböe_èsks
(
rvÆ
, 
âask
);

376 } 
	g›_d©a
.
	g°©us
 =
SUCCEEDED
);

377  
	grvÆ
;

380 
ölöe
 
èsk
 *
¸óã_f‹w¨d_èsk
() {

381 
èsk
* 
	gç
 = 
my_gøph
.
roŸ_èsk
();

382  (
	gç
) ?

383 
√w
(
èsk
::
Æloˇã_addôi⁄Æ_chûd_of
(*
ç
)Ë
f‹w¨d_èsk_by∑ss
< 
my_˛ass
 >(*
this
) :

384 
NULL
;

388 
ölöe
 
•awn_f‹w¨d_èsk
() {

389 
èsk
* 
	gç
 = 
¸óã_f‹w¨d_èsk
();

390 if(
	gç
) {

391 
FLOW_SPAWN
(*
ç
);

398 
	gãm∂©e
< 
ty≥«me
 
	gI≈ut
,Åy≥«mê
	gOuçut
,Åy≥«mê
	gA
>

399 
˛ass
 
	gfun˘i⁄_öput
 : 
public
 
fun˘i⁄_öput_ba£
<
I≈ut
, 
	gA
, fun˘i⁄_öput<
	gI≈ut
,
	gOuçut
,A> > {

400 
	gpublic
:

401 
I≈ut
 
	töput_ty≥
;

402 
Ouçut
 
	touçut_ty≥
;

403 
	gfun˘i⁄_öput
<
	tI≈ut
,
	tOuçut
,
	tA
> 
	tmy_˛ass
;

404 
	gfun˘i⁄_öput_ba£
<
	tI≈ut
, 
	tA
, 
	tmy_˛ass
> 
	tba£_ty≥
;

405 
	gfun˘i⁄_öput_queue
<
	töput_ty≥
, 
	tA
> 
	töput_queue_ty≥
;

409 
	gãm∂©e
<
ty≥«me
 
	gBody
>

410 
fun˘i⁄_öput
–
gøph
 &
g
, 
size_t
 
max_c⁄cuºícy
, 
Body
& 
body
, 
fun˘i⁄_öput_queue
<
öput_ty≥
,
A
> *
q
 = 
NULL
 ) :

411 
ba£_ty≥
(
g
, 
max_c⁄cuºícy
, 
q
),

412 
my_body
–
√w
 
öã∫Æ
::
fun˘i⁄_body_Àaf
< 
öput_ty≥
, 
ouçut_ty≥
, 
Body
>(
body
) ) {

416 
fun˘i⁄_öput
–c⁄° fun˘i⁄_öput& 
§c
, 
öput_queue_ty≥
 *
q
 = 
NULL
 ) :

417 
ba£_ty≥
(
§c
, 
q
),

418 
my_body
–
§c
.my_body->
˛⁄e
() ) {

421 ~
fun˘i⁄_öput
() {

422 
dñëe
 
	gmy_body
;

425 
	gãm∂©e
< 
ty≥«me
 
	gBody
 >

426 
Body
 
c›y_fun˘i⁄_obje˘
() {

427 
	göã∫Æ
::
fun˘i⁄_body
<
öput_ty≥
, 
	gouçut_ty≥
> &
	gbody_ªf
 = *
this
->
my_body
;

428  
	gdy«mic_ˇ°
< 
	göã∫Æ
::
fun˘i⁄_body_Àaf
<
öput_ty≥
, 
	gouçut_ty≥
, 
	gBody
> & >(
	gbody_ªf
).
gë_body
();

431 
èsk
 * 
≠∂y_body_im∂_by∑ss
–c⁄° 
öput_ty≥
 &
i
) {

432 #i‡
TBB_PREVIEW_FLOW_GRAPH_TRACE


435 
	gtbb
::
öã∫Æ
::
fgt_begö_body
–
my_body
 );

436 
ouçut_ty≥
 
	gv
 = (*
my_body
)(
i
);

437 
	gtbb
::
öã∫Æ
::
fgt_íd_body
–
my_body
 );

438 
èsk
 * 
	g√w_èsk
 = 
suc˚ss‹s
().
åy_put_èsk
–
v
 );

440 
èsk
 * 
	g√w_èsk
 = 
suc˚ss‹s
().
åy_put_èsk
–(*
my_body
)(
i
) );

442  
	g√w_èsk
;

445 
	g¥Ÿe˘ed
:

447 
ª£t_fun˘i⁄_öput
(
__TBB_PFG_RESET_ARG
(
ª£t_Êags
 
f
)) {

448 
ba£_ty≥
::
ª£t_fun˘i⁄_öput_ba£
(
__TBB_PFG_RESET_ARG
(
f
));

449 #i‡
TBB_PREVIEW_FLOW_GRAPH_FEATURES


450 if(
	gf
 & 
	grf_ª£t_bodõs
Ë
	gmy_body
->
ª£t_body
();

454 
	gfun˘i⁄_body
<
	göput_ty≥
, 
	gouçut_ty≥
> *
	gmy_body
;

455 
vútuÆ
 
	gbrﬂdˇ°_ˇche
<
	gouçut_ty≥
 > &
suc˚ss‹s
() = 0;

460 #i‡
TBB_PREVIEW_FLOW_GRAPH_FEATURES


462 
	gãm∂©e
<
	gN
>

463 
	sª£t_ñemít
 {

464 
	gãm∂©e
<
ty≥«me
 
	gP
>

465 
ª£t_this
(
P
 &
p
, 
ª£t_Êags
 
f
) {

466 ()
	gtbb
::
Êow
::
gë
<
N
-1>(
p
).
suc˚ss‹s
().
ª£t
(
f
);

467 
	gª£t_ñemít
<
	gN
-1>::
ª£t_this
(
p
, 
f
);

469 
	gãm∂©e
<
ty≥«me
 
	gP
>

470 
boﬁ
 
this_em±y
(
P
 &
p
) {

471 if(
	gtbb
::
Êow
::
gë
<
N
-1>(
p
).
suc˚ss‹s
().
em±y
())

472  
ª£t_ñemít
<
N
-1>::
this_em±y
(
p
);

473  
	gÁl£
;

477 
	gãm∂©e
<>

478 
	gª£t_ñemít
<1> {

479 
	gãm∂©e
<
ty≥«me
 
	gP
>

480 
ª£t_this
(
P
 &
p
, 
ª£t_Êags
 
f
) {

481 ()
	gtbb
::
Êow
::
gë
<0>(
p
).
suc˚ss‹s
().
ª£t
(
f
);

483 
	gãm∂©e
<
ty≥«me
 
	gP
>

484 
boﬁ
 
this_em±y
(
P
 &
p
) {

485  
	gtbb
::
Êow
::
gë
<0>(
p
).
suc˚ss‹s
().
em±y
();

492 
	gãm∂©e
< 
ty≥«me
 
	gI≈ut
,Åy≥«mê
	gOuçutP‹tSë
,Åy≥«mê
	gA
>

493 
˛ass
 
	gmu…ifun˘i⁄_öput
 : 
public
 
fun˘i⁄_öput_ba£
<
I≈ut
, 
	gA
, mu…ifun˘i⁄_öput<
	gI≈ut
,
	gOuçutP‹tSë
,A> > {

494 
	gpublic
:

495 c⁄° 
N
 = 
tbb
::
Êow
::
tu∂e_size
<
OuçutP‹tSë
>::
vÆue
;

496 
I≈ut
 
	töput_ty≥
;

497 
OuçutP‹tSë
 
	touçut_p‹ts_ty≥
;

498 
	gmu…ifun˘i⁄_öput
<
	tI≈ut
,
	tOuçutP‹tSë
,
	tA
> 
	tmy_˛ass
;

499 
	gfun˘i⁄_öput_ba£
<
	tI≈ut
, 
	tA
, 
	tmy_˛ass
> 
	tba£_ty≥
;

500 
	gfun˘i⁄_öput_queue
<
	töput_ty≥
, 
	tA
> 
	töput_queue_ty≥
;

504 
	gãm∂©e
<
ty≥«me
 
	gBody
>

505 
mu…ifun˘i⁄_öput
(

506 
gøph
 &
g
,

507 
size_t
 
max_c⁄cuºícy
,

508 
Body
& 
body
,

509 
fun˘i⁄_öput_queue
<
öput_ty≥
,
A
> *
q
 = 
NULL
 ) :

510 
ba£_ty≥
(
g
, 
max_c⁄cuºícy
, 
q
),

511 
my_body
–
√w
 
öã∫Æ
::
mu…ifun˘i⁄_body_Àaf
<
öput_ty≥
, 
ouçut_p‹ts_ty≥
, 
Body
>(
body
) ) {

515 
mu…ifun˘i⁄_öput
–c⁄° mu…ifun˘i⁄_öput& 
§c
, 
öput_queue_ty≥
 *
q
 = 
NULL
 ) :

516 
ba£_ty≥
(
§c
, 
q
),

517 
my_body
–
§c
.my_body->
˛⁄e
() ) {

520 ~
mu…ifun˘i⁄_öput
() {

521 
dñëe
 
	gmy_body
;

524 
	gãm∂©e
< 
ty≥«me
 
	gBody
 >

525 
Body
 
c›y_fun˘i⁄_obje˘
() {

526 
	göã∫Æ
::
mu…ifun˘i⁄_body
<
öput_ty≥
, 
	gouçut_p‹ts_ty≥
> &
	gbody_ªf
 = *
this
->
my_body
;

527  
	gdy«mic_ˇ°
< 
	göã∫Æ
::
mu…ifun˘i⁄_body_Àaf
<
öput_ty≥
, 
	gouçut_p‹ts_ty≥
, 
	gBody
> & >(
	gbody_ªf
).
gë_body
();

532 
èsk
 * 
≠∂y_body_im∂_by∑ss
–c⁄° 
öput_ty≥
 &
i
) {

533 
	gtbb
::
öã∫Æ
::
fgt_begö_body
–
my_body
 );

534 (*
	gmy_body
)(
	gi
, 
	gmy_ouçut_p‹ts
);

535 
	gtbb
::
öã∫Æ
::
fgt_íd_body
–
my_body
 );

536 
èsk
 * 
	g√w_èsk
 = 
SUCCESSFULLY_ENQUEUED
;

537  
	g√w_èsk
;

540 
	gouçut_p‹ts_ty≥
 &
ouçut_p‹ts
(){  
	gmy_ouçut_p‹ts
; }

542 
	g¥Ÿe˘ed
:

544  
ª£t
(
__TBB_PFG_RESET_ARG
(
ª£t_Êags
 
f
)) {

545 
ba£_ty≥
::
ª£t_fun˘i⁄_öput_ba£
(
__TBB_PFG_RESET_ARG
(
f
));

546 #i‡
TBB_PREVIEW_FLOW_GRAPH_FEATURES


547 
	gª£t_ñemít
<
	gN
>::
ª£t_this
(
my_ouçut_p‹ts
, 
f
);

548 if(
	gf
 & 
	grf_ª£t_bodõs
Ë
	gmy_body
->
ª£t_body
();

549 
__TBB_ASSERT
(!(
f
 & 
rf_exåa˘
Ë|| 
ª£t_ñemít
<
N
>::
this_em±y
(
my_ouçut_p‹ts
), "multifunction_nodeÑeset failed");

553 
	gmu…ifun˘i⁄_body
<
	göput_ty≥
, 
	gouçut_p‹ts_ty≥
> *
	gmy_body
;

554 
ouçut_p‹ts_ty≥
 
	gmy_ouçut_p‹ts
;

559 
	gãm∂©e
<
size_t
 
	gN
, 
ty≥«me
 
	gMOP
>

560 
ty≥«me
 
	gtbb
::
Êow
::
tu∂e_ñemít
<
N
,Åy≥«mê
	gMOP
::
ouçut_p‹ts_ty≥
>::
ty≥
 &
ouçut_p‹t
(
MOP
 &
›
) {

561  
tbb
::
Êow
::
gë
<
N
>(
›
.
ouçut_p‹ts
());

565 
	gãm∂©e
<
	gN
>

566 
	semô_ñemít
 {

567 
	gãm∂©e
<
ty≥«me
 
	gT
,Åy≥«mê
	gP
>

568 
emô_this
(c⁄° 
T
 &
t
, 
P
 &
p
) {

569 ()
	gtbb
::
Êow
::
gë
<
N
-1>(
p
).
åy_put
(
tbb
::Êow::gë<N-1>(
t
));

570 
	gemô_ñemít
<
	gN
-1>::
emô_this
(
t
,
p
);

574 
	gãm∂©e
<>

575 
	gemô_ñemít
<1> {

576 
	gãm∂©e
<
ty≥«me
 
	gT
,Åy≥«mê
	gP
>

577 
emô_this
(c⁄° 
T
 &
t
, 
P
 &
p
) {

578 ()
	gtbb
::
Êow
::
gë
<0>(
p
).
åy_put
(
tbb
::Êow::gë<0>(
t
));

583 
	gãm∂©e
< 
ty≥«me
 
	gOuçut
 >

584 ˛as†
	cc⁄töue_öput
 : 
public
 
c⁄töue_ª˚ivî
 {

585 
public
:

588 
c⁄töue_msg
 
	töput_ty≥
;

591 
Ouçut
 
	touçut_ty≥
;

593 
	gãm∂©e
< 
ty≥«me
 
	gBody
 >

594 
c⁄töue_öput
–
gøph
 &
g
, 
Body
& 
body
 )

595 : 
my_gøph_±r
(&
g
),

596 
my_body
–
√w
 
öã∫Æ
::
fun˘i⁄_body_Àaf
< 
öput_ty≥
, 
ouçut_ty≥
, 
Body
>(
body
) ) { }

598 
	gãm∂©e
< 
ty≥«me
 
	gBody
 >

599 
c⁄töue_öput
–
gøph
 &
g
, 
numbî_of_¥ede˚ss‹s
, 
Body
& 
body
 )

600 : 
c⁄töue_ª˚ivî
–
numbî_of_¥ede˚ss‹s
 ), 
my_gøph_±r
(&
g
),

601 
my_body
–
√w
 
öã∫Æ
::
fun˘i⁄_body_Àaf
< 
öput_ty≥
, 
ouçut_ty≥
, 
Body
>(
body
) ) { }

603 
c⁄töue_öput
–c⁄° c⁄töue_öput& 
§c
 ) : 
c⁄töue_ª˚ivî
(src),

604 
my_gøph_±r
(
§c
.my_gøph_±r), 
my_body
–§c.my_body->
˛⁄e
() ) {}

606 ~
c⁄töue_öput
() {

607 
dñëe
 
	gmy_body
;

610 
	gãm∂©e
< 
ty≥«me
 
	gBody
 >

611 
Body
 
c›y_fun˘i⁄_obje˘
() {

612 
	göã∫Æ
::
fun˘i⁄_body
<
öput_ty≥
, 
	gouçut_ty≥
> &
	gbody_ªf
 = *
my_body
;

613  
	gdy«mic_ˇ°
< 
	göã∫Æ
::
fun˘i⁄_body_Àaf
<
öput_ty≥
, 
	gouçut_ty≥
, 
	gBody
> & >(
	gbody_ªf
).
gë_body
();

616  
ª£t_ª˚ivî
–
__TBB_PFG_RESET_ARG
(
ª£t_Êags
 
f
)) {

617 
	gc⁄töue_ª˚ivî
::
ª£t_ª˚ivî
(
__TBB_PFG_RESET_ARG
(
f
));

618 #i‡
TBB_PREVIEW_FLOW_GRAPH_FEATURES


619 if(
	gf
 & 
	grf_ª£t_bodõs
Ë
	gmy_body
->
ª£t_body
();

623 
	g¥Ÿe˘ed
:

625 
gøph
* 
my_gøph_±r
;

626 
	gfun˘i⁄_body
<
	göput_ty≥
, 
	gouçut_ty≥
> *
	gmy_body
;

628 
vútuÆ
 
	gbrﬂdˇ°_ˇche
<
	gouçut_ty≥
 > &
suc˚ss‹s
() = 0;

630 
‰õnd
 
˛ass
 
	g≠∂y_body_èsk_by∑ss
< 
	gc⁄töue_öput
< 
	gOuçut
 >, 
	gc⁄töue_msg
 >;

633  
èsk
 *
≠∂y_body_by∑ss
–
öput_ty≥
 ) {

634 #i‡
TBB_PREVIEW_FLOW_GRAPH_TRACE


637 
	gtbb
::
öã∫Æ
::
fgt_begö_body
–
my_body
 );

638 
ouçut_ty≥
 
	gv
 = (*
my_body
)–
c⁄töue_msg
() );

639 
	gtbb
::
öã∫Æ
::
fgt_íd_body
–
my_body
 );

640  
suc˚ss‹s
().
åy_put_èsk
–
v
 );

642  
suc˚ss‹s
().
åy_put_èsk
–(*
my_body
)–
c⁄töue_msg
() ) );

647  
èsk
 *
execuã
( ) {

648 
èsk
* 
	gç
 = 
my_gøph_±r
->
roŸ_èsk
();

649  (
	gç
) ?

650 
√w
 ( 
èsk
::
Æloˇã_addôi⁄Æ_chûd_of
–*
ç
 ) )

651 
≠∂y_body_èsk_by∑ss
< 
c⁄töue_öput
< 
Ouçut
 >, 
	gc⁄töue_msg
 >–*
	gthis
, 
c⁄töue_msg
() ) :

652 
NULL
;

658 
	gãm∂©e
< 
ty≥«me
 
	gOuçut
 >

659 
˛ass
 
	gfun˘i⁄_ouçut
 : 
public
 
£ndî
<
Ouçut
> {

660 
public
:

662 #i‡
TBB_PREVIEW_FLOW_GRAPH_FEATURES


663 
ãm∂©e
<
N
> 
‰õnd
 
ª£t_ñemít
;

665 
Ouçut
 
	touçut_ty≥
;

666 
	gª˚ivî
<
	touçut_ty≥
> 
	tsuc˚ss‹_ty≥
;

667 
	gbrﬂdˇ°_ˇche
<
	touçut_ty≥
> 
	tbrﬂdˇ°_ˇche_ty≥
;

668 #i‡
TBB_PREVIEW_FLOW_GRAPH_FEATURES


669 
	g°d
::
	tve˘‹
<
	tsuc˚ss‹_ty≥
 *> 
	tsuc˚ss‹_ve˘‹_ty≥
;

672 
fun˘i⁄_ouçut
(Ë{ 
	gmy_suc˚ss‹s
.
£t_ow√r
(
this
); }

673 
fun˘i⁄_ouçut
(c⁄° fun˘i⁄_ouçuà& ) : 
£ndî
<
ouçut_ty≥
>() {

674 
my_suc˚ss‹s
.
£t_ow√r
(
this
);

678  
boﬁ
 
ªgi°î_suc˚ss‹
–
ª˚ivî
<
ouçut_ty≥
> &
r
 ) {

679 
suc˚ss‹s
().
ªgi°î_suc˚ss‹
–
r
 );

680  
	gåue
;

684  
boﬁ
 
ªmove_suc˚ss‹
–
ª˚ivî
<
ouçut_ty≥
> &
r
 ) {

685 
suc˚ss‹s
().
ªmove_suc˚ss‹
–
r
 );

686  
	gåue
;

689 #i‡
TBB_PREVIEW_FLOW_GRAPH_FEATURES


690  
öã∫Æ_add_buût_suc˚ss‹
–
ª˚ivî
<
ouçut_ty≥
> &
r
) {

691 
suc˚ss‹s
().
öã∫Æ_add_buût_suc˚ss‹
–
r
 );

694  
öã∫Æ_dñëe_buût_suc˚ss‹
–
ª˚ivî
<
ouçut_ty≥
> &
r
) {

695 
suc˚ss‹s
().
öã∫Æ_dñëe_buût_suc˚ss‹
–
r
 );

698  
size_t
 
suc˚ss‹_cou¡
() {

699  
suc˚ss‹s
().
suc˚ss‹_cou¡
();

702  
c›y_suc˚ss‹s
–
suc˚ss‹_ve˘‹_ty≥
 &
v
) {

703 
suc˚ss‹s
().
c›y_suc˚ss‹s
(
v
);

714 
èsk
 *
åy_put_èsk
(c⁄° 
ouçut_ty≥
 &
i
Ë{  
	gmy_suc˚ss‹s
.try_put_task(i); }

716 
	g¥Ÿe˘ed
:

717 
brﬂdˇ°_ˇche_ty≥
 
my_suc˚ss‹s
;

718 
	gbrﬂdˇ°_ˇche_ty≥
 &
suc˚ss‹s
(Ë{  
	gmy_suc˚ss‹s
; }

722 
	gãm∂©e
< 
ty≥«me
 
	gOuçut
 >

723 
˛ass
 
	gmu…ifun˘i⁄_ouçut
 : 
public
 
fun˘i⁄_ouçut
<
Ouçut
> {

724 
public
:

725 
Ouçut
 
	touçut_ty≥
;

726 
	gfun˘i⁄_ouçut
<
	touçut_ty≥
> 
	tba£_ty≥
;

727 
usög
 
	gba£_ty≥
::
my_suc˚ss‹s
;

729 
mu…ifun˘i⁄_ouçut
(Ë: 
ba£_ty≥
(Ë{
my_suc˚ss‹s
.
£t_ow√r
(
this
);}

730 
mu…ifun˘i⁄_ouçut
–c⁄° mu…ifun˘i⁄_ouçuà& ) : 
ba£_ty≥
(Ë{ 
my_suc˚ss‹s
.
£t_ow√r
(
this
); }

732 
boﬁ
 
åy_put
(c⁄° 
ouçut_ty≥
 &
i
) {

733 
èsk
 *
	gªs
 = 
my_suc˚ss‹s
.
åy_put_èsk
(
i
);

734 if(!
	gªs
Ë 
	gÁl£
;

735 if(
	gªs
 !
SUCCESSFULLY_ENQUEUED
Ë
FLOW_SPAWN
(*
ªs
);

736  
	gåue
;

	@viper/concurrentqueue-src/benchmarks/tbb/internal/_flow_graph_tagged_buffer_impl.h

26 #i‚de‡
__TBB__Êow_gøph_ègged_buf„r_im∂_H


27 
	#__TBB__Êow_gøph_ègged_buf„r_im∂_H


	)

29 #i‚de‡
__TBB_Êow_gøph_H


30 #îr‹ 
Do
 
nŸ
 #ö˛udê
this
 
öã∫Æ
 
fûe
 
dúe˘ly
; 
u£
 
public
 
TBB
 
hódîs
 
ö°ód
.

35 
	gãm∂©e
<
ty≥«me
 
	gT
,Åy≥«mê
	gU
, 
size_t
 
	gNoTagM¨k
>

36 
	sŸhîD©a
 {

37 
T
 
	mt
;

38 
U
 
	m√xt
;

39 
ŸhîD©a
(Ë: 
t
(
NoTagM¨k
), 
√xt
(
NULL
) {}

42 
	gãm∂©e
<
ty≥«me
 
	gTagTy≥
,Åy≥«mê
	gVÆueTy≥
, 
size_t
 
	gNoTagM¨k
>

43 
	sbuf„r_ñemít_ty≥
 {

46 
ty≥«me
 
	tÆig√d_∑ú
<
	tVÆueTy≥
, 
	tŸhîD©a
<
	tTagTy≥
, *, 
	tNoTagM¨k
> >::
	tty≥
Åype;

49 
	gãm∂©e


51 
ty≥«me
 
	gTagTy≥
,

52 
ty≥«me
 
	gVÆueTy≥
,

53 
size_t
 
	gNoTagM¨k
 = 0,

54 
ty≥«me
 
	gAŒoˇt‹
=
tbb
::
ˇche_Æig√d_Æloˇt‹
<Åy≥«mê
buf„r_ñemít_ty≥
<
TagTy≥
, 
	gVÆueTy≥
, 
	gNoTagM¨k
>::
ty≥
 >

56 ˛as†
	cègged_buf„r
 {

57 
public
:

58 c⁄° 
size_t
 
INITIAL_SIZE
 = 8;

59 c⁄° 
TagTy≥
 
	mNO_TAG
 = TagTy≥(
NoTagM¨k
);

60 
VÆueTy≥
 
	tvÆue_ty≥
;

61 
ty≥«me
 
	tbuf„r_ñemít_ty≥
<
	tTagTy≥
, 
	tVÆueTy≥
, 
	tNO_TAG
>::
	tty≥
 
	tñemít_ty≥
;

62 
vÆue_ty≥
 *
	tpoöãr_ty≥
;

63 
ñemít_ty≥
 *
	tli°_¨øy_ty≥
;

64 
li°_¨øy_ty≥
 *
	tpoöãr_¨øy_ty≥
;

65 
ty≥«me
 
	tAŒoˇt‹
::
	tãm∂©e
 
	tªböd
<
	tli°_¨øy_ty≥
>::
	tŸhî
 
	tpoöãr_¨øy_Æloˇt‹_ty≥
;

66 
ty≥«me
 
	tAŒoˇt‹
::
	tãm∂©e
 
	tªböd
<
	tñemít_ty≥
>::
	tŸhî
 
	tñemíts_¨øy_Æloˇt‹
;

67 
	m¥iv©e
:

68 
size_t
 
my_size
;

69 
size_t
 
	m√Àmíts
;

70 
poöãr_¨øy_ty≥
 
	mpoöãr_¨øy
;

71 
li°_¨øy_ty≥
 
	mñemíts_¨øy
;

72 
ñemít_ty≥
* 
	m‰ì_li°
;

74 
size_t
 
	$mask
(Ë{  
my_size
 - 1; }

76 
size_t
 
	$hash
(
TagTy≥
 
t
) {

77  
	`uöçå_t
(
t
)*
tbb
::
öã∫Æ
::
£À˘_size_t_c⁄°™t
<0x9E3779B9,0x9E3779B97F4A7C15ULL>::
vÆue
;

78 
	}
}

80 
	$£t_up_‰ì_li°
–
ñemít_ty≥
 **
p_‰ì_li°
, 
li°_¨øy_ty≥
 
œ
, 
size_t
 
sz
) {

81 
size_t
 
i
=0; i < 
sz
 - 1; ++i ) {

82 
œ
[
i
].
£c⁄d
.
√xt
 = &(la[i+1]);

83 
œ
[
i
].
£c⁄d
.
t
 = 
NO_TAG
;

85 
œ
[
sz
-1].
£c⁄d
.
√xt
 = 
NULL
;

86 *
p_‰ì_li°
 = &(
œ
[0]);

87 
	}
}

90 
	sDoCÀ™up
 {

91 
poöãr_¨øy_ty≥
 *
	gmy_∑
;

92 
li°_¨øy_ty≥
 *
	gmy_ñemíts
;

93 
size_t
 
	gmy_size
;

95 
DoCÀ™up
(
poöãr_¨øy_ty≥
 &
∑
, 
li°_¨øy_ty≥
 &
my_ñs
, 
size_t
 
sz
) :

96 
my_∑
(&
∑
), 
my_ñemíts
(&
my_ñs
), 
my_size
(
sz
) { }

97 ~
DoCÀ™up
() {

98 if(
	gmy_∑
) {

99 
size_t
 
	gd⁄t_ˇª
 = 0;

100 
öã∫Æ_‰ì_buf„r
(*
my_∑
, *
my_ñemíts
, 
my_size
, 
d⁄t_ˇª
);

106 
	$grow_¨øy
() {

107 
size_t
 
√w_size
 = 
my_size
*2;

108 
size_t
 
√w_√Àmíts
 = 
√Àmíts
;

109 
li°_¨øy_ty≥
 
√w_ñemíts_¨øy
 = 
NULL
;

110 
poöãr_¨øy_ty≥
 
√w_poöãr_¨øy
 = 
NULL
;

111 
li°_¨øy_ty≥
 
√w_‰ì_li°
 = 
NULL
;

113 
DoCÀ™up
 
	`my_˛ónup
(
√w_poöãr_¨øy
, 
√w_ñemíts_¨øy
, 
√w_size
);

114 
√w_ñemíts_¨øy
 = 
	`ñemíts_¨øy_Æloˇt‹
().
	`Æloˇã
(
my_size
);

115 
√w_poöãr_¨øy
 = 
	`poöãr_¨øy_Æloˇt‹_ty≥
().
	`Æloˇã
(
√w_size
);

116 
size_t
 
i
=0; i < 
√w_size
; ++iË
√w_poöãr_¨øy
[i] = 
NULL
;

117 
	`£t_up_‰ì_li°
(&
√w_‰ì_li°
, 
√w_ñemíts_¨øy
, 
my_size
 );

119 
size_t
 
i
=0; i < 
my_size
; ++i) {

120  
ñemít_ty≥
* 
›
 = 
poöãr_¨øy
[
i
]; op; o∞”Àmít_ty≥ *)(›->
£c⁄d
.
√xt
)) {

121 
vÆue_ty≥
 *
ov
 = 
ªöãΩªt_ˇ°
<vÆue_ty≥ *>(&(
›
->
fú°
));

123 
	`öã∫Æ_ègged_ö£π
(
√w_poöãr_¨øy
, 
√w_size
, 
√w_‰ì_li°
, 
›
->
£c⁄d
.
t
, *
ov
);

126 
my_˛ónup
.
my_∑
 = 
NULL
;

127 
my_˛ónup
.
my_ñemíts
 = 
NULL
;

130 
	`öã∫Æ_‰ì_buf„r
(
poöãr_¨øy
, 
ñemíts_¨øy
, 
my_size
, 
√Àmíts
);

131 
‰ì_li°
 = 
√w_‰ì_li°
;

132 
poöãr_¨øy
 = 
√w_poöãr_¨øy
;

133 
ñemíts_¨øy
 = 
√w_ñemíts_¨øy
;

134 
my_size
 = 
√w_size
;

135 
√Àmíts
 = 
√w_√Àmíts
;

136 
	}
}

140 
	$öã∫Æ_ègged_ö£π
–
ñemít_ty≥
 **
p_poöãr_¨øy
, 
size_t
 
p_sz
, 
li°_¨øy_ty≥
 &
p_‰ì_li°
,

141 c⁄° 
TagTy≥
 
t
, c⁄° 
vÆue_ty≥
 &
v
) {

142 
size_t
 
l_mask
 = 
p_sz
-1;

143 
size_t
 
h
 = 
	`hash
(
t
Ë& 
l_mask
;

144 
	`__TBB_ASSERT
(
p_‰ì_li°
, "Error: freeÜistÇot set up.");

145 
ñemít_ty≥
* 
my_ñem
 = 
p_‰ì_li°
;Ö_‰ì_li° = (ñemít_ty≥ *)’_‰ì_li°->
£c⁄d
.
√xt
);

146 
my_ñem
->
£c⁄d
.
t
 =Å;

147 (Ë
	`√w
(&(
my_ñem
->
fú°
)Ë
	`vÆue_ty≥
(
v
);

148 
my_ñem
->
£c⁄d
.
√xt
 = 
p_poöãr_¨øy
[
h
];

149 
p_poöãr_¨øy
[
h
] = 
my_ñem
;

150 
	}
}

152 
	$öã∫Æ_öôülize_buf„r
() {

153 
poöãr_¨øy
 = 
	`poöãr_¨øy_Æloˇt‹_ty≥
().
	`Æloˇã
(
my_size
);

154 
size_t
 
i
 = 0; i < 
my_size
; ++iË
poöãr_¨øy
[i] = 
NULL
;

155 
ñemíts_¨øy
 = 
	`ñemíts_¨øy_Æloˇt‹
().
	`Æloˇã
(
my_size
 / 2);

156 
	`£t_up_‰ì_li°
(&
‰ì_li°
, 
ñemíts_¨øy
, 
my_size
 / 2);

157 
	}
}

160 
	$öã∫Æ_‰ì_buf„r
–
poöãr_¨øy_ty≥
 &
∑
, 
li°_¨øy_ty≥
 &
ñ
, 
size_t
 &
sz
, size_à&
√
 ) {

161 if(
∑
) {

162 
size_t
 
i
 = 0; i < 
sz
; ++i ) {

163 
ñemít_ty≥
 *
p_√xt
;

164  
ñemít_ty≥
 *
p
 = 
∑
[
i
];Ö;Ö = 
p_√xt
) {

165 
p_√xt
 = (
ñemít_ty≥
 *)
p
->
£c⁄d
.
√xt
;

166 
vÆue_ty≥
 *
vp
 = 
ªöãΩªt_ˇ°
<vÆue_ty≥ *>(&(
p
->
fú°
));

167 
vp
->~
	`vÆue_ty≥
();

170 
	`poöãr_¨øy_Æloˇt‹_ty≥
().
	`dóŒoˇã
(
∑
, 
sz
);

171 
∑
 = 
NULL
;

175 if(
ñ
) {

176 
	`ñemíts_¨øy_Æloˇt‹
().
	`dóŒoˇã
(
ñ
, 
sz
 / 2);

177 
ñ
 = 
NULL
;

179 
sz
 = 
INITIAL_SIZE
;

180 
√
 = 0;

181 
	}
}

183 
	gpublic
:

184 
	$ègged_buf„r
(Ë: 
	`my_size
(
INITIAL_SIZE
), 
	$√Àmíts
(0) {

185 
	`öã∫Æ_öôülize_buf„r
();

186 
	}
}

188 ~
	$ègged_buf„r
() {

189 
	`öã∫Æ_‰ì_buf„r
(
poöãr_¨øy
, 
ñemíts_¨øy
, 
my_size
, 
√Àmíts
);

190 
	}
}

192 
	$ª£t
() {

193 
	`öã∫Æ_‰ì_buf„r
(
poöãr_¨øy
, 
ñemíts_¨øy
, 
my_size
, 
√Àmíts
);

194 
	`öã∫Æ_öôülize_buf„r
();

195 
	}
}

197 
boﬁ
 
	$ègged_ö£π
(c⁄° 
TagTy≥
 
t
, c⁄° 
vÆue_ty≥
 &
v
) {

198 
poöãr_ty≥
 
p
;

199 if(
	`ègged_föd_ªf
(
t
, 
p
)) {

200 
p
->~
	`vÆue_ty≥
();

201 (Ë
	`√w
(
p
Ë
	`vÆue_ty≥
(
v
);

202  
Ál£
;

204 ++
√Àmíts
;

205 if(
√Àmíts
*2 > 
my_size
Ë
	`grow_¨øy
();

206 
	`öã∫Æ_ègged_ö£π
(
poöãr_¨øy
, 
my_size
, 
‰ì_li°
, 
t
, 
v
);

207  
åue
;

208 
	}
}

211 
boﬁ
 
	$ègged_föd_ªf
(c⁄° 
TagTy≥
 
t
, 
poöãr_ty≥
 &
v
) {

212 
size_t
 
i
 = 
	`hash
(
t
Ë& 
	`mask
();

213 
ñemít_ty≥
* 
p
 = 
poöãr_¨øy
[
i
];Ö;Ö = (ñemít_ty≥ *)’->
£c⁄d
.
√xt
)) {

214 if(
p
->
£c⁄d
.
t
 ==Å) {

215 
v
 = 
ªöãΩªt_ˇ°
<
poöãr_ty≥
>(&(
p
->
fú°
));

216  
åue
;

219  
Ál£
;

220 
	}
}

222 
boﬁ
 
	$ègged_föd
–c⁄° 
TagTy≥
 
t
, 
vÆue_ty≥
 &
v
) {

223 
vÆue_ty≥
 *
p
;

224 if(
	`ègged_föd_ªf
(
t
, 
p
)) {

225 
v
 = *
p
;

226  
åue
;

229  
Ál£
;

230 
	}
}

232 
	$ègged_dñëe
(c⁄° 
TagTy≥
 
t
) {

233 
size_t
 
h
 = 
	`hash
(
t
Ë& 
	`mask
();

234 
ñemít_ty≥
* 
¥ev
 = 
NULL
;

235 
ñemít_ty≥
* 
p
 = 
poöãr_¨øy
[
h
];Ö; 
¥ev
 =Ö,Ö = (ñemít_ty≥ *)’->
£c⁄d
.
√xt
)) {

236 if(
p
->
£c⁄d
.
t
 ==Å) {

237 
vÆue_ty≥
 *
vp
 = 
ªöãΩªt_ˇ°
<vÆue_ty≥ *>(&(
p
->
fú°
));

238 
vp
->~
	`vÆue_ty≥
();

239 
p
->
£c⁄d
.
t
 = 
NO_TAG
;

240 if(
¥ev
Ë¥ev->
£c⁄d
.
√xt
 = 
p
->second.next;

241 
poöãr_¨øy
[
h
] = (
ñemít_ty≥
 *)(
p
->
£c⁄d
.
√xt
);

242 
p
->
£c⁄d
.
√xt
 = 
‰ì_li°
;

243 
‰ì_li°
 = 
p
;

244 --
√Àmíts
;

248 
	`__TBB_ASSERT
(
Ál£
, "tagÇot found for delete");

249 
	}
}

	@viper/concurrentqueue-src/benchmarks/tbb/internal/_flow_graph_trace_impl.h

21 #i‚de‡
_FGT_GRAPH_TRACE_IMPL_H


22 
	#_FGT_GRAPH_TRACE_IMPL_H


	)

24 
	~"../tbb_¥ofûög.h
"

26 
«me•a˚
 
	gtbb
 {

27 
«me•a˚
 
	göã∫Æ
 {

29 #i‡
TBB_PREVIEW_FLOW_GRAPH_TRACE


31 
ölöe
 
fgt_öã∫Æ_¸óã_öput_p‹t
–*
node
, *
p
, 
°rög_ödex
 
«me_ödex
 ) {

32 
ôt_make_èsk_group
–
ITT_DOMAIN_FLOW
, 
p
, 
FLOW_INPUT_PORT
, 
node
, 
FLOW_NODE
, 
«me_ödex
 );

35 
ölöe
 
fgt_öã∫Æ_¸óã_ouçut_p‹t
–*
node
, *
p
, 
°rög_ödex
 
«me_ödex
 ) {

36 
ôt_make_èsk_group
–
ITT_DOMAIN_FLOW
, 
p
, 
FLOW_OUTPUT_PORT
, 
node
, 
FLOW_NODE
, 
«me_ödex
 );

39 
	gãm∂©e
 < 
ty≥«me
 
	gTy≥sTu∂e
,Åy≥«mê
	gP‹tsTu∂e
, 
	gN
 >

40 
	sfgt_öã∫Æ_öput_hñ≥r
 {

41 
ªgi°î_p‹t
–*
node
, 
P‹tsTu∂e
 &
p‹ts
 ) {

42 
fgt_öã∫Æ_¸óã_öput_p‹t
–
node
, (*)
°©ic_ˇ°
< 
tbb
::
Êow
::
öãrÁ˚7
::
ª˚ivî
< 
ty≥«me
Åbb::Êow::
tu∂e_ñemít
<
N
-1,
Ty≥sTu∂e
>::
ty≥
 > * >(&—bb::Êow::
gë
<N-1>(
p‹ts
))),

43 
°©ic_ˇ°
<
tbb
::
öã∫Æ
::
°rög_ödex
>(
FLOW_INPUT_PORT_0
 + 
N
 - 1) );

44 
	gfgt_öã∫Æ_öput_hñ≥r
<
	gTy≥sTu∂e
, 
	gP‹tsTu∂e
, 
	gN
-1>::
ªgi°î_p‹t
–
node
, 
p‹ts
 );

48 
	gãm∂©e
 < 
ty≥«me
 
	gTy≥sTu∂e
,Åy≥«mê
	gP‹tsTu∂e
 >

49 
	gfgt_öã∫Æ_öput_hñ≥r
<
	gTy≥sTu∂e
,
	gP‹tsTu∂e
,1> {

50 
ªgi°î_p‹t
–*
node
, 
P‹tsTu∂e
 &
p‹ts
 ) {

51 
fgt_öã∫Æ_¸óã_öput_p‹t
–
node
, (*)
°©ic_ˇ°
< 
tbb
::
Êow
::
öãrÁ˚7
::
ª˚ivî
< 
ty≥«me
Åbb::Êow::
tu∂e_ñemít
<0,
Ty≥sTu∂e
>::
ty≥
 > * >(&—bb::Êow::
gë
<0>(
p‹ts
))),

52 
FLOW_INPUT_PORT_0
 );

56 
	gãm∂©e
 < 
ty≥«me
 
	gTy≥sTu∂e
,Åy≥«mê
	gP‹tsTu∂e
, 
	gN
 >

57 
	sfgt_öã∫Æ_ouçut_hñ≥r
 {

58 
ªgi°î_p‹t
–*
node
, 
P‹tsTu∂e
 &
p‹ts
 ) {

59 
fgt_öã∫Æ_¸óã_ouçut_p‹t
–
node
, (*)
°©ic_ˇ°
< 
tbb
::
Êow
::
öãrÁ˚7
::
£ndî
< 
ty≥«me
Åbb::Êow::
tu∂e_ñemít
<
N
-1,
Ty≥sTu∂e
>::
ty≥
 > * >(&—bb::Êow::
gë
<N-1>(
p‹ts
))),

60 
°©ic_ˇ°
<
tbb
::
öã∫Æ
::
°rög_ödex
>(
FLOW_OUTPUT_PORT_0
 + 
N
 - 1) );

61 
	gfgt_öã∫Æ_ouçut_hñ≥r
<
	gTy≥sTu∂e
, 
	gP‹tsTu∂e
, 
	gN
-1>::
ªgi°î_p‹t
–
node
, 
p‹ts
 );

65 
	gãm∂©e
 < 
ty≥«me
 
	gTy≥sTu∂e
,Åy≥«mê
	gP‹tsTu∂e
 >

66 
	gfgt_öã∫Æ_ouçut_hñ≥r
<
	gTy≥sTu∂e
,
	gP‹tsTu∂e
,1> {

67 
ªgi°î_p‹t
–*
node
, 
P‹tsTu∂e
 &
p‹ts
 ) {

68 
fgt_öã∫Æ_¸óã_ouçut_p‹t
–
node
, (*)
°©ic_ˇ°
< 
tbb
::
Êow
::
öãrÁ˚7
::
£ndî
< 
ty≥«me
Åbb::Êow::
tu∂e_ñemít
<0,
Ty≥sTu∂e
>::
ty≥
 > * >(&—bb::Êow::
gë
<0>(
p‹ts
))),

69 
FLOW_OUTPUT_PORT_0
 );

73 
	gãm∂©e
< 
ty≥«me
 
	gNodeTy≥
 >

74 
fgt_mu…iouçut_node_desc
–c⁄° 
NodeTy≥
 *
node
, c⁄° *
desc
 ) {

75 *
	gaddr
 = (*)–
°©ic_ˇ°
< 
tbb
::
Êow
::
öãrÁ˚7
::
ª˚ivî
< 
ty≥«me
 
NodeTy≥
::
öput_ty≥
 > * >(
c⁄°_ˇ°
< NodeTy≥ *>(
node
)) );

76 
ôt_mëad©a_°r_add
–
ITT_DOMAIN_FLOW
, 
addr
, 
FLOW_NODE
, 
FLOW_OBJECT_NAME
, 
desc
 );

79 
	gãm∂©e
< 
ty≥«me
 
	gNodeTy≥
 >

80 
ölöe
 
fgt_node_desc
–c⁄° 
NodeTy≥
 *
node
, c⁄° *
desc
 ) {

81 *
	gaddr
 = (*)–
°©ic_ˇ°
< 
tbb
::
Êow
::
öãrÁ˚7
::
£ndî
< 
ty≥«me
 
NodeTy≥
::
ouçut_ty≥
 > * >(
c⁄°_ˇ°
< NodeTy≥ *>(
node
)) );

82 
ôt_mëad©a_°r_add
–
ITT_DOMAIN_FLOW
, 
addr
, 
FLOW_NODE
, 
FLOW_OBJECT_NAME
, 
desc
 );

85 
ölöe
 
fgt_gøph_desc
–*
g
, c⁄° *
desc
 ) {

86 
ôt_mëad©a_°r_add
–
ITT_DOMAIN_FLOW
, 
g
, 
FLOW_GRAPH
, 
FLOW_OBJECT_NAME
, 
desc
 );

89 
ölöe
 
fgt_body
–*
node
, *
body
 ) {

90 
ôt_ªœti⁄_add
–
ITT_DOMAIN_FLOW
, 
body
, 
FLOW_BODY
, 
__ôt_ªœti⁄_is_chûd_of
, 
node
, 
FLOW_NODE
 );

93 
	gãm∂©e
< 
ty≥«me
 
	gOuçutTu∂e
, 
	gN
,Åy≥«mê
	gP‹tsTu∂e
 >

94 
ölöe
 
fgt_mu…iouçut_node
–
°rög_ödex
 
t
, *
g
, *
öput_p‹t
, 
P‹tsTu∂e
 &
p‹ts
 ) {

95 
ôt_make_èsk_group
–
ITT_DOMAIN_FLOW
, 
öput_p‹t
, 
FLOW_NODE
, 
g
, 
FLOW_GRAPH
, 
t
 );

96 
fgt_öã∫Æ_¸óã_öput_p‹t
–
öput_p‹t
, i≈ut_p‹t, 
FLOW_INPUT_PORT_0
 );

97 
	gfgt_öã∫Æ_ouçut_hñ≥r
<
	gOuçutTu∂e
, 
	gP‹tsTu∂e
, 
	gN
>::
ªgi°î_p‹t
–
öput_p‹t
, 
p‹ts
 );

100 
	gãm∂©e
< 
ty≥«me
 
	gOuçutTu∂e
, 
	gN
,Åy≥«mê
	gP‹tsTu∂e
 >

101 
ölöe
 
fgt_mu…iouçut_node_wôh_body
–
°rög_ödex
 
t
, *
g
, *
öput_p‹t
, 
P‹tsTu∂e
 &
p‹ts
, *
body
 ) {

102 
ôt_make_èsk_group
–
ITT_DOMAIN_FLOW
, 
öput_p‹t
, 
FLOW_NODE
, 
g
, 
FLOW_GRAPH
, 
t
 );

103 
fgt_öã∫Æ_¸óã_öput_p‹t
–
öput_p‹t
, i≈ut_p‹t, 
FLOW_INPUT_PORT_0
 );

104 
	gfgt_öã∫Æ_ouçut_hñ≥r
<
	gOuçutTu∂e
, 
	gP‹tsTu∂e
, 
	gN
>::
ªgi°î_p‹t
–
öput_p‹t
, 
p‹ts
 );

105 
fgt_body
–
öput_p‹t
, 
body
 );

109 
	gãm∂©e
< 
ty≥«me
 
	gI≈utTu∂e
, 
	gN
,Åy≥«mê
	gP‹tsTu∂e
 >

110 
ölöe
 
fgt_mu…iöput_node
–
°rög_ödex
 
t
, *
g
, 
P‹tsTu∂e
 &
p‹ts
, *
ouçut_p‹t
) {

111 
ôt_make_èsk_group
–
ITT_DOMAIN_FLOW
, 
ouçut_p‹t
, 
FLOW_NODE
, 
g
, 
FLOW_GRAPH
, 
t
 );

112 
fgt_öã∫Æ_¸óã_ouçut_p‹t
–
ouçut_p‹t
, ouçut_p‹t, 
FLOW_OUTPUT_PORT_0
 );

113 
	gfgt_öã∫Æ_öput_hñ≥r
<
	gI≈utTu∂e
, 
	gP‹tsTu∂e
, 
	gN
>::
ªgi°î_p‹t
–
ouçut_p‹t
, 
p‹ts
 );

116 
ölöe
 
fgt_node
–
°rög_ödex
 
t
, *
g
, *
ouçut_p‹t
 ) {

117 
ôt_make_èsk_group
–
ITT_DOMAIN_FLOW
, 
ouçut_p‹t
, 
FLOW_NODE
, 
g
, 
FLOW_GRAPH
, 
t
 );

118 
fgt_öã∫Æ_¸óã_ouçut_p‹t
–
ouçut_p‹t
, ouçut_p‹t, 
FLOW_OUTPUT_PORT_0
 );

121 
ölöe
 
fgt_node_wôh_body
–
°rög_ödex
 
t
, *
g
, *
ouçut_p‹t
, *
body
 ) {

122 
ôt_make_èsk_group
–
ITT_DOMAIN_FLOW
, 
ouçut_p‹t
, 
FLOW_NODE
, 
g
, 
FLOW_GRAPH
, 
t
 );

123 
fgt_öã∫Æ_¸óã_ouçut_p‹t
–
ouçut_p‹t
, ouçut_p‹t, 
FLOW_OUTPUT_PORT_0
 );

124 
fgt_body
–
ouçut_p‹t
, 
body
 );

128 
ölöe
 
fgt_node
–
°rög_ödex
 
t
, *
g
, *
öput_p‹t
, *
ouçut_p‹t
 ) {

129 
fgt_node
–
t
, 
g
, 
ouçut_p‹t
 );

130 
fgt_öã∫Æ_¸óã_öput_p‹t
–
ouçut_p‹t
, 
öput_p‹t
, 
FLOW_INPUT_PORT_0
 );

133 
ölöe
 
fgt_node_wôh_body
–
°rög_ödex
 
t
, *
g
, *
öput_p‹t
, *
ouçut_p‹t
, *
body
 ) {

134 
fgt_node_wôh_body
–
t
, 
g
, 
ouçut_p‹t
, 
body
 );

135 
fgt_öã∫Æ_¸óã_öput_p‹t
–
ouçut_p‹t
, 
öput_p‹t
, 
FLOW_INPUT_PORT_0
 );

139 
ölöe
 
fgt_node
–
°rög_ödex
 
t
, *
g
, *
öput_p‹t
, *
de¸emít_p‹t
, *
ouçut_p‹t
 ) {

140 
fgt_node
–
t
, 
g
, 
öput_p‹t
, 
ouçut_p‹t
 );

141 
fgt_öã∫Æ_¸óã_öput_p‹t
–
ouçut_p‹t
, 
de¸emít_p‹t
, 
FLOW_INPUT_PORT_1
 );

144 
ölöe
 
fgt_make_edge
–*
ouçut_p‹t
, *
öput_p‹t
 ) {

145 
ôt_ªœti⁄_add
–
ITT_DOMAIN_FLOW
, 
ouçut_p‹t
, 
FLOW_OUTPUT_PORT
, 
__ôt_ªœti⁄_is_¥ede˚ss‹_to
, 
öput_p‹t
, 
FLOW_INPUT_PORT
);

148 
ölöe
 
fgt_ªmove_edge
–*
ouçut_p‹t
, *
öput_p‹t
 ) {

149 
ôt_ªœti⁄_add
–
ITT_DOMAIN_FLOW
, 
ouçut_p‹t
, 
FLOW_OUTPUT_PORT
, 
__ôt_ªœti⁄_is_siblög_of
, 
öput_p‹t
, 
FLOW_INPUT_PORT
);

152 
ölöe
 
fgt_gøph
–*
g
 ) {

153 
ôt_make_èsk_group
–
ITT_DOMAIN_FLOW
, 
g
, 
FLOW_GRAPH
, 
NULL
, 
FLOW_NULL
, FLOW_GRAPH );

156 
ölöe
 
fgt_begö_body
–*
body
 ) {

157 
ôt_èsk_begö
–
ITT_DOMAIN_FLOW
, 
body
, 
FLOW_BODY
, 
NULL
, 
FLOW_NULL
, FLOW_NULL );

160 
ölöe
 
fgt_íd_body
( * ) {

161 
ôt_èsk_íd
–
ITT_DOMAIN_FLOW
 );

166 
ölöe
 
fgt_gøph
( * ) { }

168 
	gãm∂©e
< 
ty≥«me
 
	gNodeTy≥
 >

169 
ölöe
 
fgt_mu…iouçut_node_desc
–c⁄° 
NodeTy≥
 * , const * ) { }

171 
	gãm∂©e
< 
ty≥«me
 
	gNodeTy≥
 >

172 
ölöe
 
fgt_node_desc
–c⁄° 
NodeTy≥
 * , const * ) { }

174 
ölöe
 
fgt_gøph_desc
( * , const * ) { }

176 
ölöe
 
fgt_body
( * , * ) { }

178 
	gãm∂©e
< 
ty≥«me
 
	gOuçutTu∂e
, 
	gN
,Åy≥«mê
	gP‹tsTu∂e
 >

179 
ölöe
 
fgt_mu…iouçut_node
–
°rög_ödex
 , * , * , 
P‹tsTu∂e
 & ) { }

181 
	gãm∂©e
< 
ty≥«me
 
	gOuçutTu∂e
, 
	gN
,Åy≥«mê
	gP‹tsTu∂e
 >

182 
ölöe
 
fgt_mu…iouçut_node_wôh_body
–
°rög_ödex
 , * , * , 
P‹tsTu∂e
 & , * ) { }

184 
	gãm∂©e
< 
ty≥«me
 
	gI≈utTu∂e
, 
	gN
,Åy≥«mê
	gP‹tsTu∂e
 >

185 
ölöe
 
fgt_mu…iöput_node
–
°rög_ödex
 , * , 
P‹tsTu∂e
 & , * ) { }

187 
ölöe
 
fgt_node
–
°rög_ödex
 , * , * ) { }

188 
ölöe
 
fgt_node
–
°rög_ödex
 , * , * , * ) { }

189 
ölöe
 
fgt_node
–
°rög_ödex
 , * , * , * , * ) { }

191 
ölöe
 
fgt_node_wôh_body
–
°rög_ödex
 , * , * , * ) { }

192 
ölöe
 
fgt_node_wôh_body
–
°rög_ödex
 , * , * , * , * ) { }

194 
ölöe
 
fgt_make_edge
( * , * ) { }

195 
ölöe
 
fgt_ªmove_edge
( * , * ) { }

197 
ölöe
 
fgt_begö_body
( * ) { }

198 
ölöe
 
fgt_íd_body
( * ) { }

	@viper/concurrentqueue-src/benchmarks/tbb/internal/_flow_graph_types_impl.h

21 #i‚de‡
__TBB__Êow_gøph_ty≥s_im∂_H


22 
	#__TBB__Êow_gøph_ty≥s_im∂_H


	)

24 #i‚de‡
__TBB_Êow_gøph_H


25 #îr‹ 
Do
 
nŸ
 #ö˛udê
this
 
öã∫Æ
 
fûe
 
dúe˘ly
; 
u£
 
public
 
TBB
 
hódîs
 
ö°ód
.

30 
«me•a˚
 
	göã∫Æ
 {

33 
	gãm∂©e
<
	gN
,Åem∂©e<
	g˛ass
> 
˛ass
 
	gPT
, 
ty≥«me
 
	gTy≥Tu∂e
>

34 
	gwøp_tu∂e_ñemíts
;

36 
	gãm∂©e
<ãm∂©e<
	g˛ass
> 
˛ass
 
	gPT
, 
ty≥«me
 
	gTy≥Tu∂e
>

37 
	gwøp_tu∂e_ñemíts
<1, 
	gPT
, 
	gTy≥Tu∂e
> {

38 
ty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e
<

39 
	tPT
<
	tty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<0,
	tTy≥Tu∂e
>::
	tty≥
> >

40 
	tty≥
;

43 
	gãm∂©e
<ãm∂©e<
	g˛ass
> 
˛ass
 
	gPT
, 
ty≥«me
 
	gTy≥Tu∂e
>

44 
	gwøp_tu∂e_ñemíts
<2, 
	gPT
, 
	gTy≥Tu∂e
> {

45 
ty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e
<

46 
	tPT
<
	tty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<0,
	tTy≥Tu∂e
>::
	tty≥
>,

47 
	tPT
<
	tty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<1,
	tTy≥Tu∂e
>::
	tty≥
> >

48 
	tty≥
;

51 
	gãm∂©e
<ãm∂©e<
	g˛ass
> 
˛ass
 
	gPT
, 
ty≥«me
 
	gTy≥Tu∂e
>

52 
	gwøp_tu∂e_ñemíts
<3, 
	gPT
, 
	gTy≥Tu∂e
> {

53 
ty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e
<

54 
	tPT
<
	tty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<0,
	tTy≥Tu∂e
>::
	tty≥
>,

55 
	tPT
<
	tty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<1,
	tTy≥Tu∂e
>::
	tty≥
>,

56 
	tPT
<
	tty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<2,
	tTy≥Tu∂e
>::
	tty≥
> >

57 
	tty≥
;

60 
	gãm∂©e
<ãm∂©e<
	g˛ass
> 
˛ass
 
	gPT
, 
ty≥«me
 
	gTy≥Tu∂e
>

61 
	gwøp_tu∂e_ñemíts
<4, 
	gPT
, 
	gTy≥Tu∂e
> {

62 
ty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e
<

63 
	tPT
<
	tty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<0,
	tTy≥Tu∂e
>::
	tty≥
>,

64 
	tPT
<
	tty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<1,
	tTy≥Tu∂e
>::
	tty≥
>,

65 
	tPT
<
	tty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<2,
	tTy≥Tu∂e
>::
	tty≥
>,

66 
	tPT
<
	tty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<3,
	tTy≥Tu∂e
>::
	tty≥
> >

67 
	tty≥
;

70 
	gãm∂©e
<ãm∂©e<
	g˛ass
> 
˛ass
 
	gPT
, 
ty≥«me
 
	gTy≥Tu∂e
>

71 
	gwøp_tu∂e_ñemíts
<5, 
	gPT
, 
	gTy≥Tu∂e
> {

72 
ty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e
<

73 
	tPT
<
	tty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<0,
	tTy≥Tu∂e
>::
	tty≥
>,

74 
	tPT
<
	tty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<1,
	tTy≥Tu∂e
>::
	tty≥
>,

75 
	tPT
<
	tty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<2,
	tTy≥Tu∂e
>::
	tty≥
>,

76 
	tPT
<
	tty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<3,
	tTy≥Tu∂e
>::
	tty≥
>,

77 
	tPT
<
	tty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<4,
	tTy≥Tu∂e
>::
	tty≥
> >

78 
	tty≥
;

81 #i‡
__TBB_VARIADIC_MAX
 >= 6

82 
	gãm∂©e
<ãm∂©e<
	g˛ass
> 
˛ass
 
	gPT
, 
ty≥«me
 
	gTy≥Tu∂e
>

83 
	gwøp_tu∂e_ñemíts
<6, 
	gPT
, 
	gTy≥Tu∂e
> {

84 
ty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e
<

85 
	tPT
<
	tty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<0,
	tTy≥Tu∂e
>::
	tty≥
>,

86 
	tPT
<
	tty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<1,
	tTy≥Tu∂e
>::
	tty≥
>,

87 
	tPT
<
	tty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<2,
	tTy≥Tu∂e
>::
	tty≥
>,

88 
	tPT
<
	tty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<3,
	tTy≥Tu∂e
>::
	tty≥
>,

89 
	tPT
<
	tty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<4,
	tTy≥Tu∂e
>::
	tty≥
>,

90 
	tPT
<
	tty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<5,
	tTy≥Tu∂e
>::
	tty≥
> >

91 
	tty≥
;

95 #i‡
__TBB_VARIADIC_MAX
 >= 7

96 
	gãm∂©e
<ãm∂©e<
	g˛ass
> 
˛ass
 
	gPT
, 
ty≥«me
 
	gTy≥Tu∂e
>

97 
	gwøp_tu∂e_ñemíts
<7, 
	gPT
, 
	gTy≥Tu∂e
> {

98 
ty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e
<

99 
	tPT
<
	tty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<0,
	tTy≥Tu∂e
>::
	tty≥
>,

100 
	tPT
<
	tty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<1,
	tTy≥Tu∂e
>::
	tty≥
>,

101 
	tPT
<
	tty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<2,
	tTy≥Tu∂e
>::
	tty≥
>,

102 
	tPT
<
	tty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<3,
	tTy≥Tu∂e
>::
	tty≥
>,

103 
	tPT
<
	tty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<4,
	tTy≥Tu∂e
>::
	tty≥
>,

104 
	tPT
<
	tty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<5,
	tTy≥Tu∂e
>::
	tty≥
>,

105 
	tPT
<
	tty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<6,
	tTy≥Tu∂e
>::
	tty≥
> >

106 
	tty≥
;

110 #i‡
__TBB_VARIADIC_MAX
 >= 8

111 
	gãm∂©e
<ãm∂©e<
	g˛ass
> 
˛ass
 
	gPT
, 
ty≥«me
 
	gTy≥Tu∂e
>

112 
	gwøp_tu∂e_ñemíts
<8, 
	gPT
, 
	gTy≥Tu∂e
> {

113 
ty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e
<

114 
	tPT
<
	tty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<0,
	tTy≥Tu∂e
>::
	tty≥
>,

115 
	tPT
<
	tty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<1,
	tTy≥Tu∂e
>::
	tty≥
>,

116 
	tPT
<
	tty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<2,
	tTy≥Tu∂e
>::
	tty≥
>,

117 
	tPT
<
	tty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<3,
	tTy≥Tu∂e
>::
	tty≥
>,

118 
	tPT
<
	tty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<4,
	tTy≥Tu∂e
>::
	tty≥
>,

119 
	tPT
<
	tty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<5,
	tTy≥Tu∂e
>::
	tty≥
>,

120 
	tPT
<
	tty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<6,
	tTy≥Tu∂e
>::
	tty≥
>,

121 
	tPT
<
	tty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<7,
	tTy≥Tu∂e
>::
	tty≥
> >

122 
	tty≥
;

126 #i‡
__TBB_VARIADIC_MAX
 >= 9

127 
	gãm∂©e
<ãm∂©e<
	g˛ass
> 
˛ass
 
	gPT
, 
ty≥«me
 
	gTy≥Tu∂e
>

128 
	gwøp_tu∂e_ñemíts
<9, 
	gPT
, 
	gTy≥Tu∂e
> {

129 
ty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e
<

130 
	tPT
<
	tty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<0,
	tTy≥Tu∂e
>::
	tty≥
>,

131 
	tPT
<
	tty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<1,
	tTy≥Tu∂e
>::
	tty≥
>,

132 
	tPT
<
	tty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<2,
	tTy≥Tu∂e
>::
	tty≥
>,

133 
	tPT
<
	tty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<3,
	tTy≥Tu∂e
>::
	tty≥
>,

134 
	tPT
<
	tty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<4,
	tTy≥Tu∂e
>::
	tty≥
>,

135 
	tPT
<
	tty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<5,
	tTy≥Tu∂e
>::
	tty≥
>,

136 
	tPT
<
	tty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<6,
	tTy≥Tu∂e
>::
	tty≥
>,

137 
	tPT
<
	tty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<7,
	tTy≥Tu∂e
>::
	tty≥
>,

138 
	tPT
<
	tty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<8,
	tTy≥Tu∂e
>::
	tty≥
> >

139 
	tty≥
;

143 #i‡
__TBB_VARIADIC_MAX
 >= 10

144 
	gãm∂©e
<ãm∂©e<
	g˛ass
> 
˛ass
 
	gPT
, 
ty≥«me
 
	gTy≥Tu∂e
>

145 
	gwøp_tu∂e_ñemíts
<10, 
	gPT
, 
	gTy≥Tu∂e
> {

146 
ty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e
<

147 
	tPT
<
	tty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<0,
	tTy≥Tu∂e
>::
	tty≥
>,

148 
	tPT
<
	tty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<1,
	tTy≥Tu∂e
>::
	tty≥
>,

149 
	tPT
<
	tty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<2,
	tTy≥Tu∂e
>::
	tty≥
>,

150 
	tPT
<
	tty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<3,
	tTy≥Tu∂e
>::
	tty≥
>,

151 
	tPT
<
	tty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<4,
	tTy≥Tu∂e
>::
	tty≥
>,

152 
	tPT
<
	tty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<5,
	tTy≥Tu∂e
>::
	tty≥
>,

153 
	tPT
<
	tty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<6,
	tTy≥Tu∂e
>::
	tty≥
>,

154 
	tPT
<
	tty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<7,
	tTy≥Tu∂e
>::
	tty≥
>,

155 
	tPT
<
	tty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<8,
	tTy≥Tu∂e
>::
	tty≥
>,

156 
	tPT
<
	tty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<9,
	tTy≥Tu∂e
>::
	tty≥
> >

157 
	tty≥
;

163 
	gãm∂©e
<
ty≥«me
 
	gT1
,Åy≥«mê
	gT2
, 
size_t
 
	gREM
>

164 
	sty≥_∂us_Æign
 {

165 
	gfú°
[(
T1
)];

166 
T2
 
	g£c⁄d
;

167 
	gfûl1
[
REM
];

170 
	gãm∂©e
<
ty≥«me
 
	gT1
,Åy≥«mê
	gT2
>

171 
	gty≥_∂us_Æign
<
	gT1
,
	gT2
,0> {

172 
	gfú°
[(
T1
)];

173 
T2
 
	g£c⁄d
;

176 
	gãm∂©e
<
˛ass
 
	gU
> 
	sÆignmít_of
 {

177 °ru˘ { 
	gt
; 
U
 
	g∑dded
; } 
	tã°_Æignmít
;

178 c⁄° 
size_t
 
	gvÆue
 = (
ã°_Æignmít
Ë- (
U
);

184 
	gãm∂©e
<
ty≥«me
 
	gT1
,Åy≥«mê
	gT2
>

185 
	sÆig√d_∑ú
 {

186 c⁄° 
size_t
 
	gt1_Æign
 = 
Æignmít_of
<
T1
>::
vÆue
;

187 c⁄° 
size_t
 
	gt2_Æign
 = 
Æignmít_of
<
T2
>::
vÆue
;

188 
	gty≥_∂us_Æign
<
	tT1
, 
	tT2
, 0 > 
	tju°_∑ú
;

189 c⁄° 
size_t
 
	gmax_Æign
 = 
t1_Æign
 < 
t2_Æign
 ?Å2_align :Å1_align;

190 c⁄° 
size_t
 
	gexåa_byãs
 = (
ju°_∑ú
Ë% 
max_Æign
;

191 c⁄° 
size_t
 
	gªmaödî
 = 
exåa_byãs
 ? 
max_Æign
 -Éxtra_bytes : 0;

192 
	gpublic
:

193 
ty≥_∂us_Æign
<
	tT1
,
	tT2
,
	tªmaödî
> 
	tty≥
;

198 
	sdeÁu…_c⁄°ru˘ed
 { };

205 
	sWøµîBa£
 {

206 
	gvútuÆ
 ~
WøµîBa£
() {}

207 
vútuÆ
 
C›yTo
(* ) const { }

213 
	gãm∂©e
<
ty≥«me
 
	gT
>

214 
	gWøµî
: 
public
 
WøµîBa£
 {

215 
T
 
	tvÆue_ty≥
;

216 
T
* 
	tpoöãr_ty≥
;

217 
	g¥iv©e
:

218 
T
 
vÆue_•a˚
;

219 
	gpublic
:

220 c⁄° 
vÆue_ty≥
 &
vÆue
(Ëc⁄° {  
vÆue_•a˚
; }

222 
	g¥iv©e
:

223 
Wøµî
();

226 
	s_unwöd_•a˚
 {

227 
poöãr_ty≥
 
	g•a˚
;

228 
_unwöd_•a˚
(
poöãr_ty≥
 
p
Ë: 
•a˚
(p) {}

229 ~
_unwöd_•a˚
() {

230 if(
•a˚
Ë(Ë
√w
 (•a˚Ë
Wøµî
<
deÁu…_c⁄°ru˘ed
>(default_constructed());

233 
	gpublic
:

234 
ex∂icô
 
Wøµî
–c⁄° 
T
& 
Ÿhî
 ) : 
vÆue_•a˚
(other) { }

235 
ex∂icô
 
Wøµî
(c⁄° Wøµî& 
Ÿhî
Ë: 
vÆue_•a˚
(other.value_space) { }

237  
C›yTo
(* 
√wS∑˚
) const {

238 
_unwöd_•a˚
 
gu¨d
((
poöãr_ty≥
)
√wS∑˚
);

239 (Ë
√w
(
√wS∑˚
Ë
Wøµî
(
vÆue_•a˚
);

240 
	ggu¨d
.
	g•a˚
 = 
NULL
;

242  ~
Wøµî
() { }

246 
	gãm∂©e
<
ty≥«me
 
	gT
, 
size_t
 
	gN
>

247 
	gWøµî
<
	gT
[
N
]> : 
public
 
WøµîBa£
 {

248 
T
 
	tvÆue_ty≥
;

249 
T
* 
	tpoöãr_ty≥
;

251 
T
 
	tAºayTy≥
[
N
];

252 
	g¥iv©e
:

257 c⁄° 
size_t
 
•a˚_size
 = (
AºayTy≥
) / ();

258 
	gvÆue_•a˚
[
•a˚_size
];

263 
	s_unwöd_˛ass
 {

264 
poöãr_ty≥
 
	g•a˚
;

265 
	gÆªady_buût
;

266 
_unwöd_˛ass
(
poöãr_ty≥
 
p
Ë: 
•a˚
’), 
Æªady_buût
(0) {}

267 ~
_unwöd_˛ass
() {

268 if(
	g•a˚
) {

269 
size_t
 
	gi
 = 
Æªady_buût
; i > 0 ; --òË
	g•a˚
[
i
-1].~
vÆue_ty≥
();

270 (Ë
√w
(
•a˚
Ë
	gWøµî
<
	gdeÁu…_c⁄°ru˘ed
>(
deÁu…_c⁄°ru˘ed
());

274 
	gpublic
:

275 c⁄° 
AºayTy≥
 &
vÆue
() const {

276 *
vp
 = 
c⁄°_ˇ°
<*>(
vÆue_•a˚
);

277  
	gªöãΩªt_ˇ°
<
	gAºayTy≥
 &>(*
	gvp
);

280 
	g¥iv©e
:

281 
Wøµî
();

282 
	gpublic
:

284 
ex∂icô
 
Wøµî
(c⁄° 
AºayTy≥
& 
Ÿhî
) {

285 
_unwöd_˛ass
 
gu¨d
((
poöãr_ty≥
)
vÆue_•a˚
);

286 
poöãr_ty≥
 
	gvp
 = 
ªöãΩªt_ˇ°
<poöãr_ty≥>(&
vÆue_•a˚
);

287 
size_t
 
	gi
 = 0; i < 
	gN
; ++i ) {

288 (Ë
√w
(
vp
++Ë
vÆue_ty≥
(
Ÿhî
[
i
]);

289 ++(
	ggu¨d
.
	gÆªady_buût
);

291 
	ggu¨d
.
	g•a˚
 = 
NULL
;

293 
ex∂icô
 
Wøµî
(c⁄° Wøµî& 
Ÿhî
Ë: 
WøµîBa£
() {

295 
_unwöd_˛ass
 
gu¨d
((
poöãr_ty≥
)
vÆue_•a˚
);

296 
poöãr_ty≥
 
	gdp
 = 
ªöãΩªt_ˇ°
<poöãr_ty≥>(
vÆue_•a˚
);

297 
poöãr_ty≥
 
	g•
 = 
ªöãΩªt_ˇ°
<poöãr_ty≥>(
c⁄°_ˇ°
<*>(
Ÿhî
.
vÆue_•a˚
));

298 
size_t
 
	gi
 = 0; i < 
	gN
; ++i, ++
	gdp
, ++
	g•
) {

299 (Ë
√w
(
dp
Ë
vÆue_ty≥
(*
•
);

300 ++(
	ggu¨d
.
	gÆªady_buût
);

302 
	ggu¨d
.
	g•a˚
 = 
NULL
;

305  
C›yTo
(* 
√wS∑˚
) const {

306 (Ë
√w
(
√wS∑˚
Ë
Wøµî
(*
this
);

309  ~
Wøµî
() {

311 
poöãr_ty≥
 
	gvp
 = 
ªöãΩªt_ˇ°
<poöãr_ty≥>(&
vÆue_•a˚
);

312 
size_t
 
	gi
 = 
N
; i > 0 ; --òË
	gvp
[
i
-1].~
vÆue_ty≥
();

320 
	gãm∂©e
<
	gboﬁ
, 
˛ass
 
	gT1
, cœs†
	gT2
> 
	gpick_⁄e
;

321 
	gãm∂©e
<
˛ass
 
	gT1
, cœs†
	gT2
> 
	gpick_⁄e
<
	gåue
 , T1, T2> { 
T1
 
	tty≥
; };

322 
	gãm∂©e
<
˛ass
 
	gT1
, cœs†
	gT2
> 
	gpick_⁄e
<
	gÁl£
, T1, T2> { 
T2
 
	tty≥
; };

324 
	gãm∂©e
<Åem∂©e<
	g˛ass
> 
˛ass
 
	gSñe˘‹
, 
ty≥«me
 
	gT1
,Åy≥«mê
	gT2
 >

325 
	spick_max
 {

326 
ty≥«me
 
	tpick_⁄e
< (
	tSñe˘‹
<
	tT1
>::
	tvÆue
 > Sñe˘‹<
	tT2
>::vÆue), T1, T2 >::
	tty≥
Åype;

329 
	gãm∂©e
<
ty≥«me
 
	gT
> 
	ssize_of
 { c⁄° 
	gvÆue
 = (
T
); };

331 
	gãm∂©e
< 
size_t
 
	gN
, 
˛ass
 
	gTu∂e
,Åem∂©e<
	g˛ass
> cœs†
	gSñe˘‹
 > 
	spick_tu∂e_max
 {

332 
ty≥«me
 
	tpick_tu∂e_max
<
	tN
-1, 
	tTu∂e
, 
	tSñe˘‹
>::
	tty≥
 
	tLe·MaxTy≥
;

333 
ty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<
	tN
-1, 
	tTu∂e
>::
	tty≥
 
	tThisTy≥
;

334 
ty≥«me
 
	tpick_max
<
	tSñe˘‹
, 
	tLe·MaxTy≥
, 
	tThisTy≥
>::
	tty≥
Åype;

337 
	gãm∂©e
< 
˛ass
 
	gTu∂e
,Åem∂©e<
	g˛ass
> cœs†
	gSñe˘‹
 > 
	gpick_tu∂e_max
<0, Tuple, Selector> {

338 
ty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<0, 
	tTu∂e
>::
	tty≥
Åype;

343 
	gãm∂©e
<
˛ass
 
	gU
, cœs†
	gV
> 
	sis_ßme_ty≥
 { c⁄° 
boﬁ
 
	gvÆue
 = 
Ál£
; };

344 
	gãm∂©e
<
˛ass
 
	gW
> 
	gis_ßme_ty≥
<W,W> { c⁄° 
boﬁ
 
	gvÆue
 = 
åue
; };

346 
	gãm∂©e
<
˛ass
 
	gQ
, 
size_t
 
	gN
, cœs†
	gTu∂e
>

347 
	sis_ñemít_of
 {

348 
ty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<
	tN
-1, 
	tTu∂e
>::
	tty≥
 
	tT_i
;

349 c⁄° 
boﬁ
 
	gvÆue
 = 
is_ßme_ty≥
<
Q
,
	gT_i
>::
vÆue
 || 
is_ñemít_of
<Q,
	gN
-1,
	gTu∂e
>::value;

352 
	gãm∂©e
<
˛ass
 
	gQ
, cœs†
	gTu∂e
>

353 
	gis_ñemít_of
<
	gQ
,0,
	gTu∂e
> {

354 
ty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<0, 
	tTu∂e
>::
	tty≥
 
	tT_i
;

355 c⁄° 
boﬁ
 
	gvÆue
 = 
is_ßme_ty≥
<
Q
,
	gT_i
>::
vÆue
;

361 
	gãm∂©e
<
ty≥«me
 
	gT
> 
	gERROR_Ty≥_NŸ_Ælowed_In_Tagged_Msg_NŸ_Membî_Of_Tu∂e
;

363 
	gãm∂©e
<
ty≥«me
 
	gT
, 
boﬁ
 
	gBUILD_IT
> 
	gdo_if
;

364 
	gãm∂©e
<
ty≥«me
 
	gT
>

365 
	gdo_if
<
	gT
, 
	gåue
> {

366 
c⁄°ru˘
(*
myS∑˚
, c⁄° 
T
& 
x
) {

367 (Ë
√w
(
myS∑˚
Ë
	gWøµî
<
	gT
>(
	gx
);

370 
	gãm∂©e
<
ty≥«me
 
	gT
>

371 
	gdo_if
<
	gT
, 
	gÁl£
> {

372 
c⁄°ru˘
(* , c⁄° 
T
& 
x
) {

375 
	gERROR_Ty≥_NŸ_Ælowed_In_Tagged_Msg_NŸ_Membî_Of_Tu∂e
<
	gT
>::
bad_ty≥
(
x
);

384 
usög
 
	gtbb
::
öã∫Æ
::
pu¬ed_ˇ°
;

385 
	sègged_nuŒ_ty≥
 {};

386 
	gãm∂©e
<
ty≥«me
 
	gTagTy≥
,Åy≥«mê
	gT0
,Åy≥«mê
	gT1
=
ègged_nuŒ_ty≥
,Åy≥«mê
	gT2
Òagged_nuŒ_ty≥,Åy≥«mê
	gT3
=tagged_null_type,

387 
ty≥«me
 
	gT4
=
ègged_nuŒ_ty≥
,Åy≥«mê
	gT5
Òagged_nuŒ_ty≥,Åy≥«mê
	gT6
=tagged_null_type,

388 
ty≥«me
 
	gT7
=
ègged_nuŒ_ty≥
,Åy≥«mê
	gT8
Òagged_nuŒ_ty≥,Åy≥«mê
	gT9
=tagged_null_type>

389 ˛as†
	cègged_msg
 {

390 
tbb
::
	tÊow
::
	ttu∂e
<
	tT0
, 
	tT1
, 
	tT2
, 
	tT3
, 
	tT4


391 #i‡
	t__TBB_VARIADIC_MAX
 >= 6

392 , 
	tT5


394 #i‡
	t__TBB_VARIADIC_MAX
 >= 7

395 , 
	tT6


397 #i‡
	t__TBB_VARIADIC_MAX
 >= 8

398 , 
	tT7


400 #i‡
	t__TBB_VARIADIC_MAX
 >= 9

401 , 
	tT8


403 #i‡
	t__TBB_VARIADIC_MAX
 >= 10

404 , 
	tT9


406 > 
	tTu∂e
;

408 
	g¥iv©e
:

409 ˛as†
	cv¨ü¡
 {

410 c⁄° 
size_t
 
N
 = 
tbb
::
Êow
::
tu∂e_size
<
Tu∂e
>::
vÆue
;

411 
ty≥«me
 
	tpick_tu∂e_max
<
	tN
, 
	tTu∂e
, 
	tÆignmít_of
>::
	tty≥
 
	tAlignTy≥
;

412 
ty≥«me
 
	tpick_tu∂e_max
<
	tN
, 
	tTu∂e
, 
	tsize_of
>::
	tty≥
 
	tMaxSizeTy≥
;

413 c⁄° 
size_t
 
	gMaxNByãs
 = ((
Wøµî
<
MaxSizeTy≥
>)+(
AlignTy≥
)-1);

414 c⁄° 
size_t
 
	gMaxNEÀmíts
 = 
MaxNByãs
/(
AlignTy≥
);

415 
ty≥«me
 
	ttbb
::
	tÆig√d_•a˚
<
	tAlignTy≥
, 
	tMaxNEÀmíts
> 
	tS∑˚Ty≥
;

416 
S∑˚Ty≥
 
	gmy_•a˚
;

417 c⁄° 
size_t
 
	gMaxSize
 = (
S∑˚Ty≥
);

419 
	gpublic
:

420 
v¨ü¡
(Ë{ (Ë
√w
(&
my_•a˚
Ë
Wøµî
<
deÁu…_c⁄°ru˘ed
>(default_constructed()); }

422 
	gãm∂©e
<
ty≥«me
 
	gT
>

423 
v¨ü¡
–c⁄° 
T
& 
x
 ) {

424 
	gdo_if
<
	gT
, 
	gis_ñemít_of
<T, 
	gN
, 
	gTu∂e
>::
vÆue
>::
c⁄°ru˘
(&
my_•a˚
,
x
);

427 
v¨ü¡
(c⁄° v¨ü¡& 
Ÿhî
) {

428 c⁄° 
WøµîBa£
 * 
	gh
 = 
pu¬ed_ˇ°
<c⁄° WøµîBa£ *>(&(
Ÿhî
.
my_•a˚
));

429 
	gh
->
C›yTo
(&
my_•a˚
);

434 
	g›î©‹
=–c⁄° 
v¨ü¡
& 
rhs
 ) {

435 if(&
rhs
 !
this
) {

436 
WøµîBa£
 *
h
 = 
pu¬ed_ˇ°
<WøµîBa£ *>(&
my_•a˚
);

437 
	gh
->~
WøµîBa£
();

438 c⁄° 
WøµîBa£
 *
	gch
 = 
pu¬ed_ˇ°
<c⁄° WøµîBa£ *>(&(
rhs
.
my_•a˚
));

439 
	gch
->
C›yTo
(&
my_•a˚
);

443 
	gãm∂©e
<
ty≥«me
 
	gU
>

444 c⁄° 
	gU
& 
v¨ü¡_ˇ°_to
() const {

445 c⁄° 
	gWøµî
<
	gU
> *
	gh
 = 
dy«mic_ˇ°
<c⁄° 
Wøµî
<
U
>*>(
pu¬ed_ˇ°
<c⁄° 
WøµîBa£
 *>(&
my_•a˚
));

446 if(!
	gh
) {

447 
	gtbb
::
öã∫Æ
::
throw_ex˚±i⁄
(
tbb
::öã∫Æ::
eid_bad_ègged_msg_ˇ°
);

449  
	gh
->
vÆue
();

451 
	gãm∂©e
<
ty≥«me
 
	gU
>

452 
boﬁ
 
v¨ü¡_is_a
(Ëc⁄° {  
	gdy«mic_ˇ°
<c⁄° 
	gWøµî
<
	gU
>*>(
	gpu¬ed_ˇ°
<c⁄° 
	gWøµîBa£
 *>(&
	gmy_•a˚
)Ë!
NULL
; }

454 
boﬁ
 
v¨ü¡_is_deÁu…_c⁄°ru˘ed
(Ëc⁄° { 
	gv¨ü¡_is_a
<
	gdeÁu…_c⁄°ru˘ed
>();}

456 ~
v¨ü¡
() {

457 
WøµîBa£
 *
	gh
 = 
pu¬ed_ˇ°
<WøµîBa£ *>(&
my_•a˚
);

458 
	gh
->~
WøµîBa£
();

462 
TagTy≥
 
	gmy_èg
;

463 
v¨ü¡
 
	gmy_msg
;

465 
	gpublic
:

466 
ègged_msg
(): 
my_èg
(
TagTy≥
(~0)), 
my_msg
(){}

468 
	gãm∂©e
<
ty≥«me
 
	gT
,Åy≥«mê
	gR
>

469 
ègged_msg
(
T
 c⁄° &
ödex
, 
R
 c⁄° &
vÆue
Ë: 
my_èg
(ödex), 
my_msg
(value) {}

471 #i‡
__TBB_CONST_REF_TO_ARRAY_TEMPLATE_PARAM_BROKEN


472 
	gãm∂©e
<
ty≥«me
 
	gT
,Åy≥«mê
	gR
, 
size_t
 
	gN
>

473 
ègged_msg
(
T
 c⁄° &
ödex
, 
R
 (&
vÆue
)[
N
]Ë: 
my_èg
(ödex), 
my_msg
(value) {}

476 
£t_èg
(
TagTy≥
 c⁄° &
ödex
Ë{
	gmy_èg
 = index;}

477 
TagTy≥
 
èg
(Ëc⁄° { 
	gmy_èg
;}

479 
	gãm∂©e
<
ty≥«me
 
	gV
>

480 c⁄° 
	gV
& 
ˇ°_to
(Ëc⁄° { 
	gmy_msg
.
ãm∂©e
 
	gv¨ü¡_ˇ°_to
<V>();}

482 
	gãm∂©e
<
ty≥«me
 
	gV
>

483 
boﬁ
 
is_a
(Ëc⁄° { 
	gmy_msg
.
ãm∂©e
 
	gv¨ü¡_is_a
<
	gV
>();}

485 
boﬁ
 
is_deÁu…_c⁄°ru˘ed
(Ëc⁄° { 
	gmy_msg
.
v¨ü¡_is_deÁu…_c⁄°ru˘ed
();}

489 
	gãm∂©e
<
ty≥«me
 
	gT
,Åy≥«mê
	gV
>

490 c⁄° 
	gT
& 
	$ˇ°_to
(
V
 c⁄° &
v
Ë{  v.
ãm∂©e
 
ˇ°_to
<
T
>(); 
	}
}

492 
	gãm∂©e
<
ty≥«me
 
	gT
,Åy≥«mê
	gV
>

493 
boﬁ
 
	$is_a
(
V
 c⁄° &
v
Ë{  v.
ãm∂©e
 
is_a
<
T
>(); 
	}
}

	@viper/concurrentqueue-src/benchmarks/tbb/internal/_mutex_padding.h

21 #i‚de‡
__TBB_muãx_∑ddög_H


22 
	#__TBB_muãx_∑ddög_H


	)

28 
«me•a˚
 
	gtbb
 {

29 
«me•a˚
 
	göãrÁ˚7
 {

30 
«me•a˚
 
	göã∫Æ
 {

32 c⁄° 
size_t
 
	gˇche_löe_size
 = 64;

36 
	gãm∂©e
<
ty≥«me
 
	gMuãx
, 
boﬁ
 
	gis_rw
> 
˛ass
 
	g∑dded_muãx
;

38 
	gãm∂©e
<
ty≥«me
 
	gMuãx
>

39 
˛ass
 
	g∑dded_muãx
<
	gMuãx
,
	gÁl£
> : 
tbb
::
öã∫Æ
::
muãx_c›y_dïªˇãd_™d_dißbÀd
 {

40 
	t∑d_ty≥
;

41 
∑d_ty≥
 
	gmy_∑d
[(((
Muãx
)+
ˇche_löe_size
-1)/cache_line_size+1)*cache_line_size/(pad_type)];

43 
Muãx
 *
im∂
(Ë{  (
	gMuãx
 *)((
uöçå_t
(
this
)|(
	gˇche_löe_size
-1))+1);}

45 
	gpublic
:

46 c⁄° 
boﬁ
 
is_rw_muãx
 = 
Muãx
::is_rw_mutex;

47 c⁄° 
boﬁ
 
	gis_ªcursive_muãx
 = 
Muãx
::
is_ªcursive_muãx
;

48 c⁄° 
boﬁ
 
	gis_Áú_muãx
 = 
Muãx
::
is_Áú_muãx
;

50 
∑dded_muãx
(Ë{ 
√w
(
im∂
()Ë
Muãx
(); }

51 ~
∑dded_muãx
(Ë{ 
im∂
()->~
Muãx
(); }

54 ˛as†
	csc›ed_lock
 : 
tbb
::
öã∫Æ
::
no_c›y
 {

55 
ty≥«me
 
Muãx
::
sc›ed_lock
 
my_sc›ed_lock
;

56 
	gpublic
:

57 
sc›ed_lock
(Ë: 
my_sc›ed_lock
() {}

58 
sc›ed_lock
–
∑dded_muãx
& 
m
 ) : 
my_sc›ed_lock
(*m.
im∂
()) { }

59 ~
sc›ed_lock
() { }

61 
acquúe
–
∑dded_muãx
& 
m
 ) { 
my_sc›ed_lock
.acquúe(*m.
im∂
()); }

62 
boﬁ
 
åy_acquúe
–
∑dded_muãx
& 
m
 ) {  
	gmy_sc›ed_lock
.åy_acquúe(*m.
im∂
()); }

63 
ªÀa£
(Ë{ 
	gmy_sc›ed_lock
.release(); }

67 
	gãm∂©e
<
ty≥«me
 
	gMuãx
>

68 
˛ass
 
	g∑dded_muãx
<
	gMuãx
,
	gåue
> : 
tbb
::
öã∫Æ
::
muãx_c›y_dïªˇãd_™d_dißbÀd
 {

69 
	t∑d_ty≥
;

70 
∑d_ty≥
 
	gmy_∑d
[(((
Muãx
)+
ˇche_löe_size
-1)/cache_line_size+1)*cache_line_size/(pad_type)];

72 
Muãx
 *
im∂
(Ë{  (
	gMuãx
 *)((
uöçå_t
(
this
)|(
	gˇche_löe_size
-1))+1);}

74 
	gpublic
:

75 c⁄° 
boﬁ
 
is_rw_muãx
 = 
Muãx
::is_rw_mutex;

76 c⁄° 
boﬁ
 
	gis_ªcursive_muãx
 = 
Muãx
::
is_ªcursive_muãx
;

77 c⁄° 
boﬁ
 
	gis_Áú_muãx
 = 
Muãx
::
is_Áú_muãx
;

79 
∑dded_muãx
(Ë{ 
√w
(
im∂
()Ë
Muãx
(); }

80 ~
∑dded_muãx
(Ë{ 
im∂
()->~
Muãx
(); }

83 ˛as†
	csc›ed_lock
 : 
tbb
::
öã∫Æ
::
no_c›y
 {

84 
ty≥«me
 
Muãx
::
sc›ed_lock
 
my_sc›ed_lock
;

85 
	gpublic
:

86 
sc›ed_lock
(Ë: 
my_sc›ed_lock
() {}

87 
sc›ed_lock
–
∑dded_muãx
& 
m
, 
boﬁ
 
wrôe
 = 
åue
 ) : 
my_sc›ed_lock
(*m.
im∂
(),write) { }

88 ~
sc›ed_lock
() { }

90 
acquúe
–
∑dded_muãx
& 
m
, 
boﬁ
 
wrôe
 = 
åue
 ) { 
my_sc›ed_lock
.acquúe(*m.
im∂
(),write); }

91 
boﬁ
 
åy_acquúe
–
∑dded_muãx
& 
m
, boﬁ 
wrôe
 = 
åue
 ) {  
my_sc›ed_lock
.åy_acquúe(*m.
im∂
(),write); }

92 
boﬁ
 
upgøde_to_wrôî
(Ë{  
	gmy_sc›ed_lock
.upgrade_to_writer(); }

93 
boﬁ
 
downgøde_to_ªadî
(Ë{  
	gmy_sc›ed_lock
.downgrade_to_reader(); }

94 
ªÀa£
(Ë{ 
	gmy_sc›ed_lock
.release(); }

	@viper/concurrentqueue-src/benchmarks/tbb/internal/_range_iterator.h

21 #i‚de‡
__TBB_ønge_ôî©‹_H


22 
	#__TBB_ønge_ôî©‹_H


	)

24 
	~"../tbb_°ddef.h
"

26 #i‡
__TBB_CPP11_STD_BEGIN_END_PRESENT
 && 
__TBB_CPP11_AUTO_PRESENT
 && 
__TBB_CPP11_DECLTYPE_PRESENT


27 
	~<ôî©‹
>

30 
«me•a˚
 
	gtbb
 {

32 
«me•a˚
 
	göã∫Æ
 {

34 #i‡
__TBB_CPP11_STD_BEGIN_END_PRESENT
 && 
__TBB_CPP11_AUTO_PRESENT
 && 
__TBB_CPP11_DECLTYPE_PRESENT


35 
usög
 
	g°d
::
begö
;

36 
usög
 
	g°d
::
íd
;

37 
	gãm∂©e
<
ty≥«me
 
	gC⁄èöî
>

38 autÿ
fú°
(
C⁄èöî
& 
c
)-> 
de˛ty≥
(
begö
(c)) { begin(c);}

40 
	gãm∂©e
<
ty≥«me
 
	gC⁄èöî
>

41 autÿ
fú°
(c⁄° 
C⁄èöî
& 
c
)-> 
de˛ty≥
(
begö
(c)) { begin(c);}

43 
	gãm∂©e
<
ty≥«me
 
	gC⁄èöî
>

44 autÿ
œ°
(
C⁄èöî
& 
c
)-> 
de˛ty≥
(
begö
(c)Ë{ 
íd
(c);}

46 
	gãm∂©e
<
ty≥«me
 
	gC⁄èöî
>

47 autÿ
œ°
(c⁄° 
C⁄èöî
& 
c
)-> 
de˛ty≥
(
begö
(c)Ë{ 
íd
(c);}

49 
	gãm∂©e
<
ty≥«me
 
	gC⁄èöî
>

50 
ty≥«me
 
	gC⁄èöî
::
ôî©‹
 
fú°
(
C⁄èöî
& 
c
Ë{ c.
begö
();}

52 
	gãm∂©e
<
ty≥«me
 
	gC⁄èöî
>

53 
ty≥«me
 
	gC⁄èöî
::
c⁄°_ôî©‹
 
fú°
(c⁄° 
C⁄èöî
& 
c
Ë{ c.
begö
();}

55 
	gãm∂©e
<
ty≥«me
 
	gC⁄èöî
>

56 
ty≥«me
 
	gC⁄èöî
::
ôî©‹
 
œ°
(
C⁄èöî
& 
c
Ë{ c.
íd
();}

58 
	gãm∂©e
<
ty≥«me
 
	gC⁄èöî
>

59 
ty≥«me
 
	gC⁄èöî
::
c⁄°_ôî©‹
 
œ°
(c⁄° 
C⁄èöî
& 
c
Ë{ c.
íd
();}

62 
	gãm∂©e
<
ty≥«me
 
	gT
, 
size_t
 
	gsize
>

63 
T
* 
fú°
(T (&
¨r
Ë[
size
]Ë{ 
	g¨r
;}

65 
	gãm∂©e
<
ty≥«me
 
	gT
, 
size_t
 
	gsize
>

66 
T
* 
œ°
(T (&
¨r
Ë[
size
]Ë{ 
	g¨r
 + 
	gsize
;}

	@viper/concurrentqueue-src/benchmarks/tbb/internal/_tbb_strings.h

21 
TBB_STRING_RESOURCE
(
FLOW_BROADCAST_NODE
, "broadcast_node")

22 
TBB_STRING_RESOURCE
(
FLOW_BUFFER_NODE
, "buffer_node")

23 
TBB_STRING_RESOURCE
(
FLOW_CONTINUE_NODE
, "continue_node")

24 
TBB_STRING_RESOURCE
(
FLOW_FUNCTION_NODE
, "function_node")

25 
TBB_STRING_RESOURCE
(
FLOW_JOIN_NODE_QUEUEING
, "join_node (queueing)")

26 
TBB_STRING_RESOURCE
(
FLOW_JOIN_NODE_RESERVING
, "join_node (reserving)")

27 
TBB_STRING_RESOURCE
(
FLOW_JOIN_NODE_TAG_MATCHING
, "join_node (tag_matching)")

28 
TBB_STRING_RESOURCE
(
FLOW_LIMITER_NODE
, "limiter_node")

29 
TBB_STRING_RESOURCE
(
FLOW_MULTIFUNCTION_NODE
, "multifunction_node")

30 
TBB_STRING_RESOURCE
(
FLOW_OR_NODE
, "or_node")

31 
TBB_STRING_RESOURCE
(
FLOW_OVERWRITE_NODE
, "overwrite_node")

32 
TBB_STRING_RESOURCE
(
FLOW_PRIORITY_QUEUE_NODE
, "priority_queue_node")

33 
TBB_STRING_RESOURCE
(
FLOW_QUEUE_NODE
, "queue_node")

34 
TBB_STRING_RESOURCE
(
FLOW_SEQUENCER_NODE
, "sequencer_node")

35 
TBB_STRING_RESOURCE
(
FLOW_SOURCE_NODE
, "source_node")

36 
TBB_STRING_RESOURCE
(
FLOW_SPLIT_NODE
, "split_node")

37 
TBB_STRING_RESOURCE
(
FLOW_WRITE_ONCE_NODE
, "write_once_node")

38 
TBB_STRING_RESOURCE
(
FLOW_BODY
, "body")

39 
TBB_STRING_RESOURCE
(
FLOW_GRAPH
, "graph")

40 
TBB_STRING_RESOURCE
(
FLOW_NODE
, "node")

41 
TBB_STRING_RESOURCE
(
FLOW_INPUT_PORT
, "input_port")

42 
TBB_STRING_RESOURCE
(
FLOW_INPUT_PORT_0
, "input_port_0")

43 
TBB_STRING_RESOURCE
(
FLOW_INPUT_PORT_1
, "input_port_1")

44 
TBB_STRING_RESOURCE
(
FLOW_INPUT_PORT_2
, "input_port_2")

45 
TBB_STRING_RESOURCE
(
FLOW_INPUT_PORT_3
, "input_port_3")

46 
TBB_STRING_RESOURCE
(
FLOW_INPUT_PORT_4
, "input_port_4")

47 
TBB_STRING_RESOURCE
(
FLOW_INPUT_PORT_5
, "input_port_5")

48 
TBB_STRING_RESOURCE
(
FLOW_INPUT_PORT_6
, "input_port_6")

49 
TBB_STRING_RESOURCE
(
FLOW_INPUT_PORT_7
, "input_port_7")

50 
TBB_STRING_RESOURCE
(
FLOW_INPUT_PORT_8
, "input_port_8")

51 
TBB_STRING_RESOURCE
(
FLOW_INPUT_PORT_9
, "input_port_9")

52 
TBB_STRING_RESOURCE
(
FLOW_OUTPUT_PORT
, "output_port")

53 
TBB_STRING_RESOURCE
(
FLOW_OUTPUT_PORT_0
, "output_port_0")

54 
TBB_STRING_RESOURCE
(
FLOW_OUTPUT_PORT_1
, "output_port_1")

55 
TBB_STRING_RESOURCE
(
FLOW_OUTPUT_PORT_2
, "output_port_2")

56 
TBB_STRING_RESOURCE
(
FLOW_OUTPUT_PORT_3
, "output_port_3")

57 
TBB_STRING_RESOURCE
(
FLOW_OUTPUT_PORT_4
, "output_port_4")

58 
TBB_STRING_RESOURCE
(
FLOW_OUTPUT_PORT_5
, "output_port_5")

59 
TBB_STRING_RESOURCE
(
FLOW_OUTPUT_PORT_6
, "output_port_6")

60 
TBB_STRING_RESOURCE
(
FLOW_OUTPUT_PORT_7
, "output_port_7")

61 
TBB_STRING_RESOURCE
(
FLOW_OUTPUT_PORT_8
, "output_port_8")

62 
TBB_STRING_RESOURCE
(
FLOW_OUTPUT_PORT_9
, "output_port_9")

63 
TBB_STRING_RESOURCE
(
FLOW_OBJECT_NAME
, "object_name")

64 
TBB_STRING_RESOURCE
(
FLOW_NULL
, "null")

65 
TBB_STRING_RESOURCE
(
FLOW_INDEXER_NODE
, "indexer_node")

	@viper/concurrentqueue-src/benchmarks/tbb/internal/_tbb_windef.h

21 #i‚de‡
__TBB_tbb_wödef_H


22 #îr‹ 
Do
 
nŸ
 #ö˛udê
this
 
öã∫Æ
 
fûe
 
dúe˘ly
; 
u£
 
public
 
TBB
 
hódîs
 
ö°ód
.

27 #i‡
deföed
(
_WIN32_WINNT
) && _WIN32_WINNT<0x0501

28 #îr‹ 
TBB
 
is
 
u«bÀ
 
to
 
run
 
⁄
 
ﬁd
 
Wödows
 
vîsi⁄s
; 
_WIN32_WINNT
 
mu°
 
be
 0x0501 
‹
 
gª©î
.

31 #i‡!
deföed
(
_MT
)

32 #îr‹ 
TBB
 
ªquúes
 
lökage
 
wôh
 
mu…ôhªaded
 
C
/C++ 
ru¡ime
 
libøry
. \

33 
Choo£
 
mu…ôhªaded
 
DLL
 
ru¡ime
 
ö
 
¥oje˘
 
	g£âögs
, 
‹
 
	gu£
 /
	gMD
[
d
] 
compûî
 .

37 
«me•a˚
 
	g°d
 {

38 
	gusög
 ::
size_t
; usög ::
±rdiff_t
;

41 
	#__TBB_STRING_AUX
(
x
Ë#x

	)

42 
	#__TBB_STRING
(
x
Ë
	`__TBB_STRING_AUX
(x)

	)

45 #ifde‡
TBB_USE_DEBUG


46 #i‡
TBB_USE_DEBUG


47 #i‡!
deföed
(
_DEBUG
)

48 #¥agm®
mesßge
(
__FILE__
 "(" 
__TBB_STRING
(
__LINE__
) ") : Warning: Recommend using /MDd if compiling with TBB_USE_DEBUG!=0")

51 #i‡
deföed
(
_DEBUG
)

52 #¥agm®
mesßge
(
__FILE__
 "(" 
__TBB_STRING
(
__LINE__
) ") : Warning: Recommend using /MD if compiling with TBB_USE_DEBUG==0")

57 #i‡(
__TBB_BUILD
 || 
__TBBMALLOC_BUILD
Ë&& !
deföed
(
__TBB_NO_IMPLICIT_LINKAGE
)

58 
	#__TBB_NO_IMPLICIT_LINKAGE
 1

	)

61 #i‡
_MSC_VER


62 #i‡!
__TBB_NO_IMPLICIT_LINKAGE


63 #ifde‡
__TBB_LIB_NAME


64 #¥agm®
commít
(
lib
, 
__TBB_STRING
(
__TBB_LIB_NAME
))

66 #ifde‡
_DEBUG


67 #¥agm®
commít
(
lib
, "tbb_debug.lib")

69 #¥agm®
commít
(
lib
, "tbb.lib")

	@viper/concurrentqueue-src/benchmarks/tbb/internal/_x86_eliding_mutex_impl.h

21 #i‚de‡
__TBB__x86_ñidög_muãx_im∂_H


22 
	#__TBB__x86_ñidög_muãx_im∂_H


	)

24 #i‚de‡
__TBB_•ö_muãx_H


25 #îr‹ 
Do
 
nŸ
 #ö˛udê
this
 
öã∫Æ
 
fûe
 
dúe˘ly
; 
u£
 
public
 
TBB
 
hódîs
 
ö°ód
.

28 #i‡–
__TBB_x86_32
 || 
__TBB_x86_64
 )

30 
«me•a˚
 
	gtbb
 {

31 
«me•a˚
 
	göãrÁ˚7
 {

32 
«me•a˚
 
	göã∫Æ
 {

34 
	gãm∂©e
<
ty≥«me
 
	gMuãx
, 
boﬁ
 
	gis_rw
>

35 
˛ass
 
	g∑dded_muãx
;

44 ˛as†
	cx86_ñidög_muãx
 : 
tbb
::
öã∫Æ
::
muãx_c›y_dïªˇãd_™d_dißbÀd
 {

46 
__TBB_©omic_Êag
 
Êag
;

48 
‰õnd
 
˛ass
 
	g∑dded_muãx
<
	gx86_ñidög_muãx
, 
	gÁl£
>;

50 
	gpublic
:

53 
x86_ñidög_muãx
(Ë: 
Êag
(0) {}

57 #i‡
__TBB_USE_X86_ELIDING_MUTEX
 || 
__TBB_GCC_VERSION
 < 40000

62 
¥iv©e
:

66 ˛as†
	csc›ed_lock
 : 
tbb
::
öã∫Æ
::
no_c›y
 {

67 
¥iv©e
:

69 
x86_ñidög_muãx
* 
my_muãx
;

71 
	gpublic
:

73 
sc›ed_lock
(Ë: 
my_muãx
(
NULL
) {}

76 
sc›ed_lock
–
x86_ñidög_muãx
& 
m
 ) : 
my_muãx
(
NULL
Ë{ 
acquúe
(m); }

79 
acquúe
–
x86_ñidög_muãx
& 
m
 ) {

80 
__TBB_ASSERT
–!
my_muãx
, "already holdingáÜock" );

82 
	gmy_muãx
=&
m
;

83 
	gmy_muãx
->
lock
();

88 
boﬁ
 
åy_acquúe
–
x86_ñidög_muãx
& 
m
 ) {

89 
__TBB_ASSERT
–!
my_muãx
, "already holdingáÜock" );

91 
boﬁ
 
	gªsu…
 = 
m
.
åy_lock
();

92 if–
	gªsu…
 ) {

93 
	gmy_muãx
 = &
m
;

95  
	gªsu…
;

99 
ªÀa£
() {

100 
__TBB_ASSERT
–
my_muãx
, "release on scoped_lockÅhat isÇot holdingáÜock" );

102 
	gmy_muãx
->
u∆ock
();

103 
	gmy_muãx
 = 
NULL
;

107 ~
sc›ed_lock
() {

108 if–
	gmy_muãx
 ) {

109 
ªÀa£
();

113 #i‡
__TBB_USE_X86_ELIDING_MUTEX
 || 
__TBB_GCC_VERSION
 < 40000

115 
	gpublic
:

119 c⁄° 
boﬁ
 
is_rw_muãx
 = 
Ál£
;

120 c⁄° 
boﬁ
 
	gis_ªcursive_muãx
 = 
Ál£
;

121 c⁄° 
boﬁ
 
	gis_Áú_muãx
 = 
Ál£
;

126 
lock
() {

127 
__TBB_LockByãElided
(
Êag
);

132 
boﬁ
 
åy_lock
() {

133  
__TBB_TryLockByãElided
(
Êag
);

137 
u∆ock
() {

138 
__TBB_U∆ockByãElided
–
Êag
 );

	@viper/concurrentqueue-src/benchmarks/tbb/internal/_x86_rtm_rw_mutex_impl.h

21 #i‚de‡
__TBB__x86_πm_rw_muãx_im∂_H


22 
	#__TBB__x86_πm_rw_muãx_im∂_H


	)

24 #i‚de‡
__TBB_•ö_rw_muãx_H


25 #îr‹ 
Do
 
nŸ
 #ö˛udê
this
 
öã∫Æ
 
fûe
 
dúe˘ly
; 
u£
 
public
 
TBB
 
hódîs
 
ö°ód
.

28 #i‡
__TBB_TSX_AVAILABLE


30 
	~"../tbb_°ddef.h
"

31 
	~"../tbb_machöe.h
"

32 
	~"../tbb_¥ofûög.h
"

33 
	~"../•ö_rw_muãx.h
"

35 
«me•a˚
 
	gtbb
 {

36 
«me•a˚
 
	göãrÁ˚8
 {

37 
«me•a˚
 
	göã∫Æ
 {

39 
	eRTM_ty≥
 {

40 
	gRTM_nŸ_ö_muãx
,

41 
	gRTM_å™ß˘ög_ªadî
,

42 
	gRTM_å™ß˘ög_wrôî
,

43 
	gRTM_ªÆ_ªadî
,

44 
	gRTM_ªÆ_wrôî


47 c⁄° 
	g•ecuœti⁄_gønuœrôy
 = 64;

52 ˛as†
	cx86_πm_rw_muãx
: 
¥iv©e
 
•ö_rw_muãx
 {

53 #i‡
__TBB_USE_X86_RTM_RW_MUTEX
 || 
__TBB_GCC_VERSION
 < 40000

56 
public
:

58 
¥iv©e
:

60 
‰õnd
 
˛ass
 
öãrÁ˚7
::
öã∫Æ
::
∑dded_muãx
<
x86_πm_rw_muãx
,
	gåue
>;

61 
˛ass
 
	gsc›ed_lock
;

62 
‰õnd
 
˛ass
 
	gsc›ed_lock
;

63 
	g¥iv©e
:

67 
__TBB_EXPORTED_METHOD
 
öã∫Æ_c⁄°ru˘
();

71 
__TBB_EXPORTED_METHOD
 
öã∫Æ_acquúe_wrôî
(
x86_πm_rw_muãx
::
sc›ed_lock
&, 
boﬁ
 
⁄ly_•ecuœã
=
Ál£
);

75 
__TBB_EXPORTED_METHOD
 
öã∫Æ_acquúe_ªadî
(
x86_πm_rw_muãx
::
sc›ed_lock
&, 
boﬁ
 
⁄ly_•ecuœã
=
Ál£
);

78 
boﬁ
 
__TBB_EXPORTED_METHOD
 
öã∫Æ_upgøde
–
x86_πm_rw_muãx
::
sc›ed_lock
& );

81 
boﬁ
 
__TBB_EXPORTED_METHOD
 
öã∫Æ_downgøde
–
x86_πm_rw_muãx
::
sc›ed_lock
& );

84 
boﬁ
 
__TBB_EXPORTED_METHOD
 
öã∫Æ_åy_acquúe_wrôî
–
x86_πm_rw_muãx
::
sc›ed_lock
& );

87 
__TBB_EXPORTED_METHOD
 
öã∫Æ_ªÀa£
–
x86_πm_rw_muãx
::
sc›ed_lock
& );

89 
x86_πm_rw_muãx
* 
öã∫Æ_gë_muãx
–c⁄° 
•ö_rw_muãx
::
sc›ed_lock
& 
lock
 )

91  
°©ic_ˇ°
<
x86_πm_rw_muãx
*>–
lock
.
öã∫Æ_gë_muãx
() );

93 
öã∫Æ_£t_muãx
–
•ö_rw_muãx
::
sc›ed_lock
& 
lock
, spö_rw_muãx* 
mtx
 )

95 
	glock
.
öã∫Æ_£t_muãx
–
mtx
 );

98 
	gpublic
:

100 
x86_πm_rw_muãx
() {

101 
w_Êag
 = 
Ál£
;

102 #i‡
TBB_USE_THREADING_TOOLS


103 
öã∫Æ_c⁄°ru˘
();

107 #i‡
TBB_USE_ASSERT


109 ~
x86_πm_rw_muãx
() {}

113 c⁄° 
boﬁ
 
	gis_rw_muãx
 = 
åue
;

114 c⁄° 
boﬁ
 
	gis_ªcursive_muãx
 = 
Ál£
;

115 c⁄° 
boﬁ
 
	gis_Áú_muãx
 = 
Ál£
;

117 #i‡
__TBB_USE_X86_RTM_RW_MUTEX
 || 
__TBB_GCC_VERSION
 < 40000

122 
	g¥iv©e
:

132 ˛as†
	csc›ed_lock
 : 
tbb
::
öã∫Æ
::
no_c›y
 {

133 
‰õnd
 
˛ass
 
x86_πm_rw_muãx
;

134 
	g•ö_rw_muãx
::
sc›ed_lock
 
my_sc›ed_lock
;

136 
RTM_ty≥
 
	gå™ß˘i⁄_°©e
;

138 
	gpublic
:

141 
sc›ed_lock
(Ë: 
my_sc›ed_lock
(), 
å™ß˘i⁄_°©e
(
RTM_nŸ_ö_muãx
) {

145 
sc›ed_lock
–
x86_πm_rw_muãx
& 
m
, 
boﬁ
 
wrôe
 = 
åue
 ) : 
my_sc›ed_lock
(),

146 
å™ß˘i⁄_°©e
(
RTM_nŸ_ö_muãx
) {

147 
acquúe
(
m
, 
wrôe
);

151 ~
sc›ed_lock
() {

152 if(
	gå™ß˘i⁄_°©e
 !
RTM_nŸ_ö_muãx
Ë
ªÀa£
();

156 
acquúe
–
x86_πm_rw_muãx
& 
m
, 
boﬁ
 
wrôe
 = 
åue
 ) {

157 if–
wrôe
 ) 
m
.
öã∫Æ_acquúe_wrôî
(*
this
);

158 
	gm
.
öã∫Æ_acquúe_ªadî
(*
this
);

162 
ªÀa£
() {

163 
x86_πm_rw_muãx
* 
	gmuãx
 = x86_πm_rw_muãx::
öã∫Æ_gë_muãx
(
my_sc›ed_lock
);

164 
__TBB_ASSERT
–
muãx
, "lock isÇotácquired" );

165 
__TBB_ASSERT
–
å™ß˘i⁄_°©e
!=
RTM_nŸ_ö_muãx
, "lock isÇotácquired" );

166  
	gmuãx
->
öã∫Æ_ªÀa£
(*
this
);

171 
boﬁ
 
upgøde_to_wrôî
() {

172 
x86_πm_rw_muãx
* 
	gmuãx
 = x86_πm_rw_muãx::
öã∫Æ_gë_muãx
(
my_sc›ed_lock
);

173 
__TBB_ASSERT
–
muãx
, "lock isÇotácquired" );

174 
__TBB_ASSERT
–
å™ß˘i⁄_°©e
==
RTM_å™ß˘ög_ªadî
 ||Åønß˘i⁄_°©e==
RTM_ªÆ_ªadî
, "Invalid state for upgrade" );

175  
	gmuãx
->
öã∫Æ_upgøde
(*
this
);

180 
boﬁ
 
downgøde_to_ªadî
() {

181 
x86_πm_rw_muãx
* 
	gmuãx
 = x86_πm_rw_muãx::
öã∫Æ_gë_muãx
(
my_sc›ed_lock
);

182 
__TBB_ASSERT
–
muãx
, "lock isÇotácquired" );

183 
__TBB_ASSERT
–
å™ß˘i⁄_°©e
==
RTM_å™ß˘ög_wrôî
 ||Åønß˘i⁄_°©e==
RTM_ªÆ_wrôî
, "Invalid state for downgrade" );

184  
	gmuãx
->
öã∫Æ_downgøde
(*
this
);

189 
boﬁ
 
åy_acquúe
–
x86_πm_rw_muãx
& 
m
, boﬁ 
wrôe
 = 
åue
 ) {

190 #i‡
TBB_USE_ASSERT


191 
x86_πm_rw_muãx
* 
muãx
 = x86_πm_rw_muãx::
öã∫Æ_gë_muãx
(
my_sc›ed_lock
);

192 
__TBB_ASSERT
–!
muãx
, "lock isálreadyácquired" );

196 if(
	gwrôe
Ë 
	gm
.
öã∫Æ_åy_acquúe_wrôî
(*
this
);

198 
	gm
.
öã∫Æ_acquúe_ªadî
(*
this
, 
åue
);

199 if(
	gå™ß˘i⁄_°©e
 =
RTM_å™ß˘ög_ªadî
Ë 
åue
;

200 if–
	gmy_sc›ed_lock
.
åy_acquúe
(
m
, 
Ál£
)) {

201 
	gå™ß˘i⁄_°©e
 = 
RTM_ªÆ_ªadî
;

202  
	gåue
;

204  
	gÁl£
;

212 
	g¥iv©e
:

213 
∑d
[
•ecuœti⁄_gønuœrôy
-(
•ö_rw_muãx
)];

216 
	gtbb
::
©omic
<
boﬁ
> 
w_Êag
;

	@viper/concurrentqueue-src/benchmarks/tbb/intrusive_list.h

21 #i‚de‡
_TBB_öåusive_li°_H


22 
	#_TBB_öåusive_li°_H


	)

24 
	~"tbb/tbb_°ddef.h
"

26 
«me•a˚
 
	gtbb
 {

27 
«me•a˚
 
	göã∫Æ
 {

34 
	söåusive_li°_node
 {

35 
öåusive_li°_node
 *
	gmy_¥ev_node
,

36 *
	gmy_√xt_node
;

37 #i‡
TBB_USE_ASSERT


38 
öåusive_li°_node
 (Ë{ 
	gmy_¥ev_node
 = 
my_√xt_node
 = 
this
; }

44 
	gãm∂©e
 <
˛ass
 
	gLi°
, cœs†
	gT
>

45 ˛as†
	cöåusive_li°_ba£
 {

47 
öåusive_li°_node
 
	gmy_hód
;

50 
size_t
 
	gmy_size
;

52 
	göåusive_li°_node
& 
node
 ( 
T
& 
ôem
 ) {  
	gLi°
::node(item); }

54 
	gT
& 
ôem
 ( 
öåusive_li°_node
* 
node
 ) {  
	gLi°
::item(node); }

56 
	gãm∂©e
<
˛ass
 
	gIãøt‹
>

57 ˛as†
	côî©‹_im∂
 {

58 
	gIãøt‹
& 
£lf
 (Ë{  *
	g°©ic_ˇ°
<Iãøt‹*>(
	gthis
); }

61 
öåusive_li°_node
 *
	gmy_pos
;

63 
	g¥Ÿe˘ed
:

64 
ôî©‹_im∂
 (
öåusive_li°_node
* 
pos
 )

65 : 
my_pos
(
pos
)

68 
T
& 
ôem
 () const {

69  
öåusive_li°_ba£
::
ôem
(
my_pos
);

72 
	gpublic
:

73 
ôî©‹_im∂
 (Ë: 
my_pos
(
NULL
) {}

75 
Iãøt‹
& 
›î©‹
 = ( c⁄° Iãøt‹& 
ô
 ) {

76  
my_pos
 = 
ô
.my_pos;

79 
	gIãøt‹
& 
	g›î©‹
 = ( c⁄° 
T
& 
vÆ
 ) {

80  
my_pos
 = &
node
(
vÆ
);

83 
boﬁ
 
	g›î©‹
 =–c⁄° 
Iãøt‹
& 
ô
 ) const {

84  
my_pos
 =
ô
.my_pos;

87 
boﬁ
 
	g›î©‹
 !–c⁄° 
Iãøt‹
& 
ô
 ) const {

88  
my_pos
 !
ô
.my_pos;

91 
	gIãøt‹
& 
	g›î©‹
++ () {

92 
	gmy_pos
 = 
my_pos
->
my_√xt_node
;

93  
£lf
();

96 
	gIãøt‹
& 
	g›î©‹
-- () {

97 
	gmy_pos
 = 
my_pos
->
my_¥ev_node
;

98  
£lf
();

101 
Iãøt‹
 
	g›î©‹
++ ( ) {

102 
Iãøt‹
 
	gªsu…
 = 
£lf
();

103 ++(*
	gthis
);

104  
	gªsu…
;

107 
Iãøt‹
 
	g›î©‹
-- ( ) {

108 
Iãøt‹
 
	gªsu…
 = 
£lf
();

109 --(*
	gthis
);

110  
	gªsu…
;

114 
as£π_ok
 () const {

115 
__TBB_ASSERT
–(
my_hód
.
my_¥ev_node
 =&my_hód && !
my_size
) ||

116 (
my_hód
.
my_√xt_node
 !&my_hód && 
my_size
 >0), "intrusive_list_base corrupted" );

117 #i‡
TBB_USE_ASSERT
 >= 2

118 
size_t
 
	gi
 = 0;

119  
öåusive_li°_node
 *
	gn
 = 
my_hód
.
my_√xt_node
;Ç !&my_hód;Ç = 
n
->my_next_node )

120 ++
i
;

121 
__TBB_ASSERT
–
my_size
 =
i
, "Wrong size" );

125 
	gpublic
:

126 
˛ass
 
ôî©‹
 : 
public
 
ôî©‹_im∂
<iterator> {

127 
ãm∂©e
 <
˛ass
 
U
, cœs†
	gV
> 
‰õnd
 cœs†
	göåusive_li°_ba£
;

128 
	gpublic
:

129 
ôî©‹
 (
öåusive_li°_node
* 
pos
 )

130 : 
ôî©‹_im∂
<
ôî©‹
>(
pos
 )

132 
ôî©‹
 () {}

134 
T
* 
›î©‹
-> (Ëc⁄° {  &
this
->
ôem
(); }

136 
	gT
& 
	g›î©‹
* (Ëc⁄° {  
	gthis
->
ôem
(); }

139 
˛ass
 
	gc⁄°_ôî©‹
 : 
public
 
ôî©‹_im∂
<
c⁄°_ôî©‹
> {

140 
ãm∂©e
 <
˛ass
 
U
, cœs†
	gV
> 
‰õnd
 cœs†
	göåusive_li°_ba£
;

141 
	gpublic
:

142 
c⁄°_ôî©‹
 (c⁄° 
öåusive_li°_node
* 
pos
 )

143 : 
ôî©‹_im∂
<
c⁄°_ôî©‹
>(
c⁄°_ˇ°
<
öåusive_li°_node
*>(
pos
) )

145 
c⁄°_ôî©‹
 () {}

147 c⁄° 
T
* 
›î©‹
-> (Ëc⁄° {  &
this
->
ôem
(); }

149 c⁄° 
	gT
& 
	g›î©‹
* (Ëc⁄° {  
	gthis
->
ôem
(); }

152 
öåusive_li°_ba£
 (Ë: 
my_size
(0) {

153 
my_hód
.
my_¥ev_node
 = &my_head;

154 
	gmy_hód
.
	gmy_√xt_node
 = &
my_hód
;

157 
boﬁ
 
em±y
 (Ëc⁄° {  
	gmy_hód
.
	gmy_√xt_node
 =&
my_hód
; }

159 
size_t
 
size
 (Ëc⁄° {  
	gmy_size
; }

161 
ôî©‹
 
begö
 (Ë{  iãøt‹(
my_hód
.
my_√xt_node
); }

163 
ôî©‹
 
íd
 (Ë{  iãøt‹(&
my_hód
); }

165 
c⁄°_ôî©‹
 
begö
 (Ëc⁄° {  c⁄°_ôî©‹(
my_hód
.
my_√xt_node
); }

167 
c⁄°_ôî©‹
 
íd
 (Ëc⁄° {  c⁄°_ôî©‹(&
my_hód
); }

169 
push_‰⁄t
 ( 
T
& 
vÆ
 ) {

170 
__TBB_ASSERT
–
node
(
vÆ
).
my_¥ev_node
 =&node(vÆË&&Çode(vÆ).
my_√xt_node
 == &node(val),

173 
node
(
vÆ
).
	gmy_¥ev_node
 = &
my_hód
;

174 
node
(
vÆ
).
	gmy_√xt_node
 = 
my_hód
.
my_√xt_node
;

175 
	gmy_hód
.
	gmy_√xt_node
->
	gmy_¥ev_node
 = &
node
(
vÆ
);

176 
	gmy_hód
.
	gmy_√xt_node
 = &
node
(
vÆ
);

177 ++
	gmy_size
;

178 
as£π_ok
();

181 
ªmove
–
T
& 
vÆ
 ) {

182 
__TBB_ASSERT
–
node
(
vÆ
).
my_¥ev_node
 !&node(vÆË&&Çode(vÆ).
my_√xt_node
 != &node(val), "ElementÅoÑemove isÇot inÅheÜist" );

183 
__TBB_ASSERT
–
node
(
vÆ
).
my_¥ev_node
->
my_√xt_node
 == &node(val) &&Çode(val).my_next_node->my_prev_node == &node(val), "ElementÅoÑemove isÇot inÅheÜist" );

184 --
	gmy_size
;

185 
node
(
vÆ
).
	gmy_√xt_node
->
	gmy_¥ev_node
 =Çode(vÆ).
my_¥ev_node
;

186 
node
(
vÆ
).
	gmy_¥ev_node
->
	gmy_√xt_node
 =Çode(vÆ).
my_√xt_node
;

187 #i‡
TBB_USE_ASSERT


188 
node
(
vÆ
).
	gmy_¥ev_node
 =Çode(vÆ).
my_√xt_node
 = &node(val);

190 
as£π_ok
();

193 
ôî©‹
 
îa£
 ( iãøt‹ 
ô
 ) {

194 
	gT
& 
	gvÆ
 = *
ô
;

195 ++
	gô
;

196 
ªmove
–
vÆ
 );

197  
	gô
;

212 
	gãm∂©e
 <
˛ass
 
	gT
, cœs†
	gU
, 
öåusive_li°_node
 U::*
NodePå
>

213 
˛ass
 
mem±r_öåusive_li°
 : 
public
 
öåusive_li°_ba£
<mem±r_öåusive_li°<
T
, 
	gU
, 
	gNodePå
>, 
	gT
>

215 
‰õnd
 
˛ass
 
	göåusive_li°_ba£
<
	gmem±r_öåusive_li°
<
	gT
, 
	gU
, 
	gNodePå
>, T>;

217 
	göåusive_li°_node
& 
node
 ( 
T
& 
vÆ
 ) {  
	gvÆ
.*
	gNodePå
; }

219 
	gT
& 
ôem
 ( 
öåusive_li°_node
* 
node
 ) {

224  *
	gªöãΩªt_ˇ°
<
	gT
*>((*)
	gnode
 - ((
	g±rdiff_t
)&‘eöãΩªt_ˇ°<T*>(0x1000)->*
	gNodePå
) - 0x1000));

233 
	gãm∂©e
 <
˛ass
 
	gT
>

234 
˛ass
 
	göåusive_li°
 : 
public
 
öåusive_li°_ba£
<
öåusive_li°
<
T
>, 
	gT
>

236 
‰õnd
 
˛ass
 
	göåusive_li°_ba£
<
	göåusive_li°
<
	gT
>, T>;

238 
	göåusive_li°_node
& 
node
 ( 
T
& 
vÆ
 ) {  
	gvÆ
; }

240 
	gT
& 
ôem
 ( 
öåusive_li°_node
* 
node
 ) {  *
	g°©ic_ˇ°
<T*>(
	gnode
); }

	@viper/concurrentqueue-src/benchmarks/tbb/itt_notify.cpp

21 #i‡
DO_ITT_NOTIFY


23 #i‡
_WIN32
||
_WIN64


24 #i‚de‡
UNICODE


25 
	#UNICODE


	)

28 #¥agm®
wók
 
dl›í


29 #¥agm®
wók
 
dlsym


30 #¥agm®
wók
 
dÀº‹


33 #i‡
__TBB_BUILD


35 "C" 
ITT_DoO√TimeInôüliz©i⁄
();

36 
	#__ôt_öô_ôéib_«me
(
x
,
y
Ë(
	`ITT_DoO√TimeInôüliz©i⁄
(), 
åue
)

	)

38 #ñi‡
__TBBMALLOC_BUILD


40 "C" 
MÆlocInôülizeITT
();

41 
	#__ôt_öô_ôéib_«me
(
x
,
y
Ë(
	`MÆlocInôülizeITT
(), 
åue
)

	)

44 #îr‹ 
This
 
fûe
 
is
 
ex≥˘ed
 
to
 
be
 
u£d
 
eôhî
 
TBB
 
‹
 TBB 
Æloˇt‹
 
buûd
.

47 
	~"toﬁs_≠i/ôäŸify_°©ic.c
"

49 
«me•a˚
 
	gtbb
 {

50 
«me•a˚
 
	göã∫Æ
 {

51 
__TBB_lﬂd_ôäŸify
() {

52  
__ôt_öô_ôéib
(
NULL
,

53 (
__ôt_group_id
)(
__ôt_group_sync


54 | 
__ôt_group_thªad


55 | 
__ôt_group_°ôch


56 #i‡
__TBB_CPF_BUILD


57 | 
__ôt_group_°ru˘uª


66 
	#__TBB_NO_IMPLICIT_LINKAGE
 1

	)

67 
	~"ôt_nŸify.h
"

69 
«me•a˚
 
	gtbb
 {

71 #i‡
DO_ITT_NOTIFY


72 c⁄° 
tch¨


73 *
	gSyncTy≥_GlobÆLock
 = 
_T
("TbbGlobalLock"),

74 *
	gSyncTy≥_ScheduÀr
 = 
_T
("%Constant")

76 c⁄° 
tch¨


77 *
	gSyncObj_ScheduÀrInôüliz©i⁄
 = 
_T
("TbbSchedulerInitialization"),

78 *
	gSyncObj_ScheduÀrsLi°
 = 
_T
("TbbSchedulersList"),

79 *
	gSyncObj_W‹kîLi„Cy˛eMgmt
 = 
_T
("TBB Scheduler"),

80 *
	gSyncObj_TaskSãÆögLo›
 = 
_T
("TBB Scheduler"),

81 *
	gSyncObj_W‹kîTaskPoﬁ
 = 
_T
("TBB Scheduler"),

82 *
	gSyncObj_Ma°îTaskPoﬁ
 = 
_T
("TBB Scheduler"),

83 *
	gSyncObj_TaskPoﬁSpönög
 = 
_T
("TBB Scheduler"),

84 *
	gSyncObj_Maûbox
 = 
_T
("TBB Scheduler"),

85 *
	gSyncObj_TaskRëu∫Li°
 = 
_T
("TBB Scheduler"),

86 *
	gSyncObj_TaskSåóm
 = 
_T
("TBB Scheduler"),

87 *
	gSyncObj_C⁄ãxtsLi°
 = 
_T
("TBB Scheduler")

	@viper/concurrentqueue-src/benchmarks/tbb/itt_notify.h

21 #i‚de‡
_TBB_ITT_NOTIFY


22 
	#_TBB_ITT_NOTIFY


	)

24 
	~"tbb/tbb_°ddef.h
"

26 #i‡
DO_ITT_NOTIFY


28 #i‡
_WIN32
||
_WIN64


29 #i‚de‡
UNICODE


30 
	#UNICODE


	)

34 #i‚de‡
INTEL_ITTNOTIFY_API_PRIVATE


35 
	#INTEL_ITTNOTIFY_API_PRIVATE


	)

38 
	~"toﬁs_≠i/ôäŸify.h
"

39 
	~"toﬁs_≠i/Àgacy/ôäŸify.h
"

40 "C" 
__ôt_föi_ôéib
();

42 #i‡
_WIN32
||
_WIN64


43 #unde‡
_T


44 #unde‡
__ôt_evít_¸óã


45 
	#__ôt_evít_¸óã
 
__ôt_evít_¸óãA


	)

51 #i‡!
ITT_CALLER_NULL


52 
	#ITT_CALLER_NULL
 ((
__ôt_ˇŒî
)0)

	)

55 
«me•a˚
 
	gtbb
 {

57 #i‡(
_WIN32
||
_WIN64
Ë&& !
__MINGW32__


60 
wch¨_t
 
	ttch¨
;

62 
	#_T
(
°rög_lôîÆ
Ë
L
 ## 
	)
string_literal

64 
	ttch¨
;

66 
	#_T
(
°rög_lôîÆ
Ë
	)
string_literal

70 #i‡
DO_ITT_NOTIFY


71 
«me•a˚
 
	gtbb
 {

73 c⁄° 
tch¨


74 *
SyncTy≥_GlobÆLock
,

75 *
SyncTy≥_ScheduÀr
;

77 c⁄° 
tch¨


78 *
SyncObj_ScheduÀrInôüliz©i⁄
,

79 *
SyncObj_ScheduÀrsLi°
,

80 *
SyncObj_W‹kîLi„Cy˛eMgmt
,

81 *
SyncObj_TaskSãÆögLo›
,

82 *
SyncObj_W‹kîTaskPoﬁ
,

83 *
SyncObj_Ma°îTaskPoﬁ
,

84 *
SyncObj_TaskPoﬁSpönög
,

85 *
SyncObj_Maûbox
,

86 *
SyncObj_TaskRëu∫Li°
,

87 *
SyncObj_TaskSåóm
,

88 *
SyncObj_C⁄ãxtsLi°


91 
«me•a˚
 
	göã∫Æ
 {

92 
__TBB_EXPORTED_FUNC
 
ôt_£t_sync_«me_v3
–* 
obj
, c⁄° 
tch¨
* 
«me
);

99 
	#ITT_NOTIFY
(
«me
,
obj
Ë
__ôt_nŸify_
##
	`«me
(
c⁄°_ˇ°
<*>(
°©ic_ˇ°
<vﬁ©ûê*>(obj)))

	)

100 
	#ITT_THREAD_SET_NAME
(
«me
Ë
	`__ôt_thªad_£t_«me
“ame)

	)

101 
	#ITT_FINI_ITTLIB
(Ë
	`__ôt_föi_ôéib
()

	)

102 
	#ITT_SYNC_CREATE
(
obj
, 
ty≥
, 
«me
Ë
	`__ôt_sync_¸óã
((*)(obj),Åy≥,Çame, 2)

	)

103 
	#ITT_SYNC_RENAME
(
obj
, 
«me
Ë
	`__ôt_sync_ª«me
(obj,Çame)

	)

104 
	#ITT_STACK_CREATE
(
obj
Ëobj = 
	`__ôt_°ack_ˇŒî_¸óã
()

	)

105 #i‡
__TBB_TASK_GROUP_CONTEXT


106 
	#ITT_STACK
(
¥ec⁄d
, 
«me
, 
obj
Ë’ªc⁄dË? 
__ôt_°ack_
##
	`«me
(objË: (()0);

	)

108 
	#ITT_STACK
(
¥ec⁄d
, 
«me
, 
obj
Ë(()0)

	)

113 
	#ITT_NOTIFY
(
«me
,
obj
Ë(()0)

	)

114 
	#ITT_THREAD_SET_NAME
(
«me
Ë(()0)

	)

115 
	#ITT_FINI_ITTLIB
(Ë(()0)

	)

116 
	#ITT_SYNC_CREATE
(
obj
, 
ty≥
, 
«me
Ë(()0)

	)

117 
	#ITT_SYNC_RENAME
(
obj
, 
«me
Ë(()0)

	)

118 
	#ITT_STACK_CREATE
(
obj
Ë(()0)

	)

119 
	#ITT_STACK
(
¥ec⁄d
, 
«me
, 
obj
Ë(()0)

	)

123 
«me•a˚
 
	gtbb
 {

124 
«me•a˚
 
	göã∫Æ
 {

125 
__TBB_lﬂd_ôäŸify
();

	@viper/concurrentqueue-src/benchmarks/tbb/machine/gcc_armv7.h

25 #i‚de‡
__TBB_machöe_H


26 #îr‹ 
Do
 
nŸ
 
ö˛ude
 
this
 
fûe
 
dúe˘ly
; in˛udê
tbb_machöe
.
h
 
ö°ód


30 #i‡!(
__ARM_ARCH_7A__
)

31 #îr‹ 
compû©i⁄
 
ªquúes
 
™
 
ARMv7
-
a
 
¨chôe˘uª
.

34 
	~<sys/∑øm.h
>

35 
	~<uni°d.h
>

37 
	#__TBB_WORDSIZE
 4

	)

44 #i‡
__BIG_ENDIAN__
 || (
deföed
(
__BYTE_ORDER__
Ë&& __BYTE_ORDER__==
__ORDER_BIG_ENDIAN__
)

45 
	#__TBB_ENDIANNESS
 
__TBB_ENDIAN_BIG


	)

46 #ñi‡
__LITTLE_ENDIAN__
 || (
deföed
(
__BYTE_ORDER__
Ë&& __BYTE_ORDER__==
__ORDER_LITTLE_ENDIAN__
)

47 
	#__TBB_ENDIANNESS
 
__TBB_ENDIAN_LITTLE


	)

48 #ñi‡
deföed
(
__BYTE_ORDER__
)

49 
	#__TBB_ENDIANNESS
 
__TBB_ENDIAN_UNSUPPORTED


	)

51 
	#__TBB_ENDIANNESS
 
__TBB_ENDIAN_DETECT


	)

55 
	#__TBB_compûî_„n˚
(Ë
__asm__
 
	`__vﬁ©ûe__
("": : :"mem‹y")

	)

56 
	#__TBB_fuŒ_mem‹y_„n˚
(Ë
__asm__
 
	`__vﬁ©ûe__
("dmb ish": : :"mem‹y")

	)

57 
	#__TBB_c⁄åﬁ_c⁄si°ícy_hñ≥r
(Ë
	`__TBB_fuŒ_mem‹y_„n˚
()

	)

58 
	#__TBB_acquúe_c⁄si°ícy_hñ≥r
(Ë
	`__TBB_fuŒ_mem‹y_„n˚
()

	)

59 
	#__TBB_ªÀa£_c⁄si°ícy_hñ≥r
(Ë
	`__TBB_fuŒ_mem‹y_„n˚
()

	)

72 
ölöe
 
öt32_t
 
	$__TBB_machöe_cmpswp4
(vﬁ©ûê*
±r
, 
öt32_t
 
vÆue
, i¡32_à
com∑ønd
 )

74 
öt32_t
 
ﬁdvÆ
, 
ªs
;

76 
	`__TBB_fuŒ_mem‹y_„n˚
();

79 
__asm__
 
	`__vﬁ©ûe__
(

85 : "=&r" (
ªs
), "=&r" (
ﬁdvÆ
), "+Qo" (*(vﬁ©ûê
öt32_t
*)
±r
)

86 : "r" ((
öt32_t
 *)
±r
), "Ir" (
com∑ønd
), "r" (
vÆue
)

88 } 
ªs
);

90 
	`__TBB_fuŒ_mem‹y_„n˚
();

92  
ﬁdvÆ
;

93 
	}
}

102 
ölöe
 
öt64_t
 
	$__TBB_machöe_cmpswp8
(vﬁ©ûê*
±r
, 
öt64_t
 
vÆue
, i¡64_à
com∑ønd
 )

104 
öt64_t
 
ﬁdvÆ
;

105 
öt32_t
 
ªs
;

107 
	`__TBB_fuŒ_mem‹y_„n˚
();

110 
__asm__
 
	`__vﬁ©ûe__
(

118 : "=&r" (
ªs
), "=&r" (
ﬁdvÆ
), "+Qo" (*(vﬁ©ûê
öt64_t
*)
±r
)

119 : "r" ((
öt64_t
 *)
±r
), "r" (
com∑ønd
), "r" (
vÆue
)

121 } 
ªs
);

123 
	`__TBB_fuŒ_mem‹y_„n˚
();

125  
ﬁdvÆ
;

126 
	}
}

128 
ölöe
 
öt32_t
 
	$__TBB_machöe_„tchadd4
(vﬁ©ûê* 
±r
, 
öt32_t
 
addíd
)

130 
tmp
;

131 
öt32_t
 
ªsu…
, 
tmp2
;

133 
	`__TBB_fuŒ_mem‹y_„n˚
();

135 
__asm__
 
	`__vﬁ©ûe__
(

141 : "=&r" (
ªsu…
), "=&r" (
tmp
), "+Qo" (*(vﬁ©ûê
öt32_t
*)
±r
), "=&r"(
tmp2
)

142 : "r" ((
öt32_t
 *)
±r
), "Ir" (
addíd
)

145 
	`__TBB_fuŒ_mem‹y_„n˚
();

147  
ªsu…
;

148 
	}
}

150 
ölöe
 
öt64_t
 
	$__TBB_machöe_„tchadd8
(vﬁ©ûê*
±r
, 
öt64_t
 
addíd
)

152 
tmp
;

153 
öt64_t
 
ªsu…
, 
tmp2
;

155 
	`__TBB_fuŒ_mem‹y_„n˚
();

157 
__asm__
 
	`__vﬁ©ûe__
(

164 : "=&r" (
ªsu…
), "=&r" (
tmp
), "+Qo" (*(vﬁ©ûê
öt64_t
*)
±r
), "=&r"(
tmp2
)

165 : "r" ((
öt64_t
 *)
±r
), "r" (
addíd
)

169 
	`__TBB_fuŒ_mem‹y_„n˚
();

171  
ªsu…
;

172 
	}
}

174 
ölöe
 
	$__TBB_machöe_∑u£
 (
öt32_t
 
dñay
 )

176 
dñay
>0)

178 
	`__TBB_compûî_„n˚
();

179 
dñay
--;

181 
	}
}

183 
«me•a˚
 
	gtbb
 {

184 
«me•a˚
 
	göã∫Æ
 {

185 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
size_t
 
	gS
>

186 
	smachöe_lﬂd_°‹e_ªœxed
 {

187 
ölöe
 
T
 
lﬂd
 ( c⁄° vﬁ©ûêT& 
loˇti⁄
 ) {

188 c⁄° 
T
 
	gvÆue
 = 
loˇti⁄
;

194 
__TBB_acquúe_c⁄si°ícy_hñ≥r
();

195  
	gvÆue
;

198 
ölöe
 
°‹e
 ( vﬁ©ûê
T
& 
loˇti⁄
, T 
vÆue
 ) {

199 
	gloˇti⁄
 = 
vÆue
;

206 
	#__TBB_Com∑ªAndSw≠4
(
P
,
V
,
C
Ë
	`__TBB_machöe_cmpswp4
(P,V,C)

	)

207 
	#__TBB_Com∑ªAndSw≠8
(
P
,
V
,
C
Ë
	`__TBB_machöe_cmpswp8
(P,V,C)

	)

208 
	#__TBB_Pau£
(
V
Ë
	`__TBB_machöe_∑u£
(V)

	)

211 
	#__TBB_USE_GENERIC_PART_WORD_CAS
 1

	)

212 
	#__TBB_USE_GENERIC_PART_WORD_FETCH_ADD
 1

	)

213 
	#__TBB_USE_GENERIC_PART_WORD_FETCH_STORE
 1

	)

214 
	#__TBB_USE_GENERIC_FETCH_STORE
 1

	)

215 
	#__TBB_USE_GENERIC_HALF_FENCED_LOAD_STORE
 1

	)

216 
	#__TBB_USE_GENERIC_DWORD_LOAD_STORE
 1

	)

217 
	#__TBB_USE_GENERIC_SEQUENTIAL_CONSISTENCY_LOAD_STORE
 1

	)

	@viper/concurrentqueue-src/benchmarks/tbb/machine/gcc_generic.h

21 #i‡!
deföed
(
__TBB_machöe_H
Ë|| deföed(
__TBB_machöe_gcc_gíîic_H
)

22 #îr‹ 
Do
 
nŸ
 #ö˛udê
this
 
öã∫Æ
 
fûe
 
dúe˘ly
; 
u£
 
public
 
TBB
 
hódîs
 
ö°ód
.

25 
	#__TBB_machöe_gcc_gíîic_H


	)

27 
	~<°döt.h
>

28 
	~<uni°d.h
>

30 
	#__TBB_WORDSIZE
 
__SIZEOF_POINTER__


	)

32 #i‡
__TBB_GCC_64BIT_ATOMIC_BUILTINS_BROKEN


33 
	#__TBB_64BIT_ATOMICS
 0

	)

37 #i‡
__ANDROID__
 && 
__TBB_gíîic_¨ch


38 
	#__TBB_CPU_CTL_ENV_PRESENT
 0

	)

43 #i‡
__BIG_ENDIAN__
 || (
deföed
(
__BYTE_ORDER__
Ë&& __BYTE_ORDER__==
__ORDER_BIG_ENDIAN__
)

44 
	#__TBB_ENDIANNESS
 
__TBB_ENDIAN_BIG


	)

45 #ñi‡
__LITTLE_ENDIAN__
 || (
deföed
(
__BYTE_ORDER__
Ë&& __BYTE_ORDER__==
__ORDER_LITTLE_ENDIAN__
)

46 
	#__TBB_ENDIANNESS
 
__TBB_ENDIAN_LITTLE


	)

47 #ñi‡
deföed
(
__BYTE_ORDER__
)

48 
	#__TBB_ENDIANNESS
 
__TBB_ENDIAN_UNSUPPORTED


	)

50 
	#__TBB_ENDIANNESS
 
__TBB_ENDIAN_DETECT


	)

58 
	#__TBB_acquúe_c⁄si°ícy_hñ≥r
(Ë
	`__sync_synchr⁄ize
()

	)

59 
	#__TBB_ªÀa£_c⁄si°ícy_hñ≥r
(Ë
	`__sync_synchr⁄ize
()

	)

60 
	#__TBB_fuŒ_mem‹y_„n˚
(Ë
	`__sync_synchr⁄ize
()

	)

61 
	#__TBB_c⁄åﬁ_c⁄si°ícy_hñ≥r
(Ë
	`__sync_synchr⁄ize
()

	)

63 
	#__TBB_MACHINE_DEFINE_ATOMICS
(
S
,
T
) \

64 
ölöe
 
T
 
__TBB_machöe_cmpswp
##
	`S
–vﬁ©ûê*
±r
, T 
vÆue
, T 
com∑ønd
 ) { \

65  
	`__sync_vÆ_com∑ª_™d_sw≠
(
ªöãΩªt_ˇ°
<vﬁ©ûê
T
 *>(
±r
),
com∑ønd
,
vÆue
); \

68 
ölöe
 
T
 
__TBB_machöe_„tchadd
##
	`S
–vﬁ©ûê*
±r
, T 
vÆue
 ) { \

69  
	`__sync_„tch_™d_add
(
ªöãΩªt_ˇ°
<vﬁ©ûê
T
 *>(
±r
),
vÆue
); \

71 

	)

72 
	$__TBB_MACHINE_DEFINE_ATOMICS
(1,
öt8_t
)

73 
	$__TBB_MACHINE_DEFINE_ATOMICS
(2,
öt16_t
)

74 
	$__TBB_MACHINE_DEFINE_ATOMICS
(4,
öt32_t
)

75 
	$__TBB_MACHINE_DEFINE_ATOMICS
(8,
öt64_t
)

77 #unde‡
__TBB_MACHINE_DEFINE_ATOMICS


79 
«me•a˚
 
tbb
{Çame•a˚ 
öã∫Æ
 {Çame•a˚ 
gcc_buûtös
 {

80 
ölöe
 
	`˛z
(
x
){  
	`__buûtö_˛z
(x);}

81 
ölöe
 
	`˛z
(
x
){  
	`__buûtö_˛zl
(x);}

82 
ölöe
 
	`˛z
(
x
){  
	`__buûtö_˛zŒ
(x);}

83 }}
	}
}

85 
ölöe
 
öçå_t
 
	$__TBB_machöe_lg
–
uöçå_t
 
x
 ) {

86  (
x
)*8 - 
tbb
::
öã∫Æ
::
gcc_buûtös
::
	`˛z
(x) -1 ;

87 
	}
}

89 
ölöe
 
	$__TBB_machöe_‹
–vﬁ©ûê*
±r
, 
uöçå_t
 
addíd
 ) {

90 
	`__sync_„tch_™d_‹
(
ªöãΩªt_ˇ°
<vﬁ©ûê
uöçå_t
 *>(
±r
),
addíd
);

91 
	}
}

93 
ölöe
 
	$__TBB_machöe_™d
–vﬁ©ûê*
±r
, 
uöçå_t
 
addíd
 ) {

94 
	`__sync_„tch_™d_™d
(
ªöãΩªt_ˇ°
<vﬁ©ûê
uöçå_t
 *>(
±r
),
addíd
);

95 
	}
}

98 
	t__TBB_Fœg
;

100 
__TBB_©omic
 
	t__TBB_Fœg
 
	t__TBB_©omic_Êag
;

102 
ölöe
 
boﬁ
 
	$__TBB_machöe_åy_lock_byã
–
__TBB_©omic_Êag
 &
Êag
 ) {

103  
	`__sync_lock_ã°_™d_£t
(&
Êag
,1)==0;

104 
	}
}

106 
ölöe
 
	$__TBB_machöe_u∆ock_byã
–
__TBB_©omic_Êag
 &
Êag
 ) {

107 
	`__sync_lock_ªÀa£
(&
Êag
);

108 
	}
}

111 
	#__TBB_AtomicOR
(
P
,
V
Ë
	`__TBB_machöe_‹
(P,V)

	)

112 
	#__TBB_AtomicAND
(
P
,
V
Ë
	`__TBB_machöe_™d
(P,V)

	)

114 
	#__TBB_TryLockByã
 
__TBB_machöe_åy_lock_byã


	)

115 
	#__TBB_U∆ockByã
 
__TBB_machöe_u∆ock_byã


	)

118 
	#__TBB_Log2
(
V
Ë
	`__TBB_machöe_lg
(V)

	)

120 
	#__TBB_USE_GENERIC_FETCH_STORE
 1

	)

121 
	#__TBB_USE_GENERIC_HALF_FENCED_LOAD_STORE
 1

	)

122 
	#__TBB_USE_GENERIC_RELAXED_LOAD_STORE
 1

	)

123 
	#__TBB_USE_GENERIC_SEQUENTIAL_CONSISTENCY_LOAD_STORE
 1

	)

125 #i‡
__TBB_WORDSIZE
==4

126 
	#__TBB_USE_GENERIC_DWORD_LOAD_STORE
 1

	)

129 #i‡
__TBB_x86_32
 || 
__TBB_x86_64


130 
	~"gcc_ôsx.h
"

	@viper/concurrentqueue-src/benchmarks/tbb/machine/gcc_ia32_common.h

21 #i‚de‡
__TBB_machöe_gcc_ü32_comm⁄_H


22 
	#__TBB_machöe_gcc_ü32_comm⁄_H


	)

28 
	gãm∂©e
 <
ty≥«me
 
	gT
>

29 
ölöe
 
öçå_t
 
	$__TBB_machöe_lg
–
T
 
x
 ) {

30 
	`__TBB_ASSERT
(
x
>0, "TheÜogarithm ofáÇon-positive value is undefined.");

31 
uöçå_t
 
j
;

32 
	`__asm__
("b§ %1,%0" : "Ù"(
j
Ë: "r"((
uöçå_t
)
x
));

33  
j
;

34 
	}
}

35 
	#__TBB_Log2
(
V
Ë
	`__TBB_machöe_lg
(V)

	)

37 #i‚de‡
__TBB_Pau£


47 
ölöe
 
	$__TBB_machöe_∑u£
–
öt32_t
 
dñay
 ) {

48 
öt32_t
 
i
 = 0; i < 
dñay
; i++) {

49 
__asm__
 
	`__vﬁ©ûe__
("pause;");

52 
	}
}

53 
	#__TBB_Pau£
(
V
Ë
	`__TBB_machöe_∑u£
(V)

	)

57 #i‚de‡
__TBB_CPU_CTL_ENV_PRESENT


58 
	#__TBB_CPU_CTL_ENV_PRESENT
 1

	)

59 
«me•a˚
 
	gtbb
 {

60 
«me•a˚
 
	göã∫Æ
 {

61 ˛as†
	c˝u_˘l_ív
 {

62 
	g¥iv©e
:

63 
mxc§
;

64 
	gx87cw
;

65 c⁄° 
	gMXCSR_CONTROL_MASK
 = ~0x3f;

66 
	gpublic
:

67 
boﬁ
 
›î©‹
!=–c⁄° 
˝u_˘l_ív
& 
˘l
 ) c⁄° {  
mxc§
 !˘l.mxc§ || 
x87cw
 != ctl.x87cw; }

68 
gë_ív
() {

69 #i‡
__TBB_ICC_12_0_INL_ASM_FSTCW_BROKEN


70 
˝u_˘l_ív
 
	gloc_˘l
;

71 
__asm__
 
__vﬁ©ûe__
 (

74 : "=m"(
loc_˘l
.
mxc§
), "=m"÷oc_˘l.
x87cw
)

76 *
	gthis
 = 
loc_˘l
;

78 
__asm__
 
__vﬁ©ûe__
 (

81 : "=m"(
mxc§
), "=m"(
x87cw
)

84 
	gmxc§
 &
MXCSR_CONTROL_MASK
;

86 
£t_ív
() const {

87 
__asm__
 
__vﬁ©ûe__
 (

90 : : "m"(
mxc§
), "m"(
x87cw
)

98 
	~"gcc_ôsx.h
"

	@viper/concurrentqueue-src/benchmarks/tbb/machine/gcc_itsx.h

21 #i‡!
deföed
(
__TBB_machöe_H
Ë|| deföed(
__TBB_machöe_gcc_ôsx_H
)

22 #îr‹ 
Do
 
nŸ
 #ö˛udê
this
 
öã∫Æ
 
fûe
 
dúe˘ly
; 
u£
 
public
 
TBB
 
hódîs
 
ö°ód
.

25 
	#__TBB_machöe_gcc_ôsx_H


	)

27 
	#__TBB_OP_XACQUIRE
 0xF2

	)

28 
	#__TBB_OP_XRELEASE
 0xF3

	)

29 
	#__TBB_OP_LOCK
 0xF0

	)

31 
	#__TBB_STRINGIZE_INTERNAL
(
¨g
Ë#¨g

	)

32 
	#__TBB_STRINGIZE
(
¨g
Ë
	`__TBB_STRINGIZE_INTERNAL
◊rg)

	)

34 #ifde‡
__TBB_x86_64


35 
	#__TBB_r_out
 "Ù"

	)

37 
	#__TBB_r_out
 "=q"

	)

40 
ölöe
 
uöt8_t
 
	$__TBB_machöe_åy_lock_ñided
–vﬁ©ûê
uöt8_t
* 
lk
 )

42 
uöt8_t
 
vÆue
 = 1;

43 
__asm__
 vﬁ©ûê(".byã " 
	`__TBB_STRINGIZE
(
__TBB_OP_XACQUIRE
)";Üock; xchgb %0, %1;"

44 : 
	`__TBB_r_out
(
vÆue
), "=m"(*
lk
) : "0"(value), "m"(*lk) : "memory" );

45  
	`uöt8_t
(
vÆue
^1);

46 
	}
}

48 
ölöe
 
	$__TBB_machöe_åy_lock_ñided_ˇn˚l
()

51 
__asm__
 volatile ("pause\n" : : : "memory" );

52 
	}
}

54 
ölöe
 
	$__TBB_machöe_u∆ock_ñided
–vﬁ©ûê
uöt8_t
* 
lk
 )

56 
__asm__
 vﬁ©ûê(".byã " 
	`__TBB_STRINGIZE
(
__TBB_OP_XRELEASE
)"; movb $0, %0"

57 : "=m"(*
lk
) : "m"(*lk) : "memory" );

58 
	}
}

60 #i‡
__TBB_TSX_INTRINSICS_PRESENT


61 
	~<immöåö.h
>

63 
	#__TBB_machöe_is_ö_å™ß˘i⁄
 
_xã°


	)

64 
	#__TBB_machöe_begö_å™ß˘i⁄
 
_xbegö


	)

65 
	#__TBB_machöe_íd_å™ß˘i⁄
 
_xíd


	)

66 
	#__TBB_machöe_å™ß˘i⁄_c⁄Êi˘_ab‹t
(Ë
	`_xab‹t
(0xff)

	)

73 
ölöe
 
boﬁ
 
	$__TBB_machöe_is_ö_å™ß˘i⁄
()

75 
öt8_t
 
ªs
 = 0;

76 #i‡
__TBB_x86_32


77 
__asm__
 volatile (".byte 0x0F; .byte 0x01; .byte 0xD6;\n"

78 "£tz %0" : "=q"(
ªs
) : : "memory" );

80 
__asm__
 volatile (".byte 0x0F; .byte 0x01; .byte 0xD6;\n"

81 "£tz %0" : "Ù"(
ªs
) : : "memory" );

83  
ªs
==0;

84 
	}
}

91 
ölöe
 
uöt32_t
 
	$__TBB_machöe_begö_å™ß˘i⁄
()

93 
uöt32_t
 
ªs
 = ~
	`uöt32_t
(0);

94 
__asm__
 volatile ("1: .byte 0xC7; .byte 0xF8;\n"

103 :"Ù"(
ªs
):"0"(res):"memory","%eax");

104  
ªs
;

105 
	}
}

110 
ölöe
 
	$__TBB_machöe_íd_å™ß˘i⁄
()

112 
__asm__
 volatile (".byte 0x0F; .byte 0x01; .byte 0xD5" :::"memory");

113 
	}
}

118 
ölöe
 
	$__TBB_machöe_å™ß˘i⁄_c⁄Êi˘_ab‹t
()

120 
__asm__
 volatile (".byte 0xC6; .byte 0xF8; .byte 0xFF" :::"memory");

121 
	}
}

	@viper/concurrentqueue-src/benchmarks/tbb/machine/ibm_aix51.h

23 #i‡!
deföed
(
__TBB_machöe_H
Ë|| deföed(
__TBB_machöe_ibm_aix51_H
)

24 #îr‹ 
Do
 
nŸ
 #ö˛udê
this
 
öã∫Æ
 
fûe
 
dúe˘ly
; 
u£
 
public
 
TBB
 
hódîs
 
ö°ód
.

27 
	#__TBB_machöe_ibm_aix51_H


	)

29 
	#__TBB_WORDSIZE
 8

	)

30 
	#__TBB_ENDIANNESS
 
__TBB_ENDIAN_BIG


31 

	)

32 
	~<°döt.h
>

33 
	~<uni°d.h
>

34 
	~<sched.h
>

37 
öt32_t
 
__TBB_machöe_ˇs_32
 (vﬁ©ûê* 
±r
, i¡32_à
vÆue
, i¡32_à
com∑ønd
);

38 
öt64_t
 
__TBB_machöe_ˇs_64
 (vﬁ©ûê* 
±r
, i¡64_à
vÆue
, i¡64_à
com∑ønd
);

39 
__TBB_machöe_Êush
 ();

40 
__TBB_machöe_lwsync
 ();

41 
__TBB_machöe_isync
 ();

45 
	#__TBB_machöe_cmpswp4
 
__TBB_machöe_ˇs_32


	)

46 
	#__TBB_machöe_cmpswp8
 
__TBB_machöe_ˇs_64


	)

48 
	#__TBB_Yõld
(Ë
	`sched_yõld
()

	)

50 
	#__TBB_USE_GENERIC_PART_WORD_CAS
 1

	)

51 
	#__TBB_USE_GENERIC_FETCH_ADD
 1

	)

52 
	#__TBB_USE_GENERIC_FETCH_STORE
 1

	)

53 
	#__TBB_USE_GENERIC_HALF_FENCED_LOAD_STORE
 1

	)

54 
	#__TBB_USE_GENERIC_RELAXED_LOAD_STORE
 1

	)

55 
	#__TBB_USE_GENERIC_SEQUENTIAL_CONSISTENCY_LOAD_STORE
 1

	)

57 #i‡
__GNUC__


58 
	#__TBB_c⁄åﬁ_c⁄si°ícy_hñ≥r
(Ë
__asm__
 
	`__vﬁ©ûe__
–"isync": : :"mem‹y")

	)

59 
	#__TBB_acquúe_c⁄si°ícy_hñ≥r
(Ë
__asm__
 
	`__vﬁ©ûe__
("lwsync": : :"mem‹y")

	)

60 
	#__TBB_ªÀa£_c⁄si°ícy_hñ≥r
(Ë
__asm__
 
	`__vﬁ©ûe__
("lwsync": : :"mem‹y")

	)

61 
	#__TBB_fuŒ_mem‹y_„n˚
(Ë
__asm__
 
	`__vﬁ©ûe__
–"sync": : :"mem‹y")

	)

66 
	#__TBB_c⁄åﬁ_c⁄si°ícy_hñ≥r
(Ë
	`__TBB_machöe_isync
 ()

	)

67 
	#__TBB_acquúe_c⁄si°ícy_hñ≥r
(Ë
	`__TBB_machöe_lwsync
 ()

	)

68 
	#__TBB_ªÀa£_c⁄si°ícy_hñ≥r
(Ë
	`__TBB_machöe_lwsync
 ()

	)

69 
	#__TBB_fuŒ_mem‹y_„n˚
(Ë
	`__TBB_machöe_Êush
 ()

	)

	@viper/concurrentqueue-src/benchmarks/tbb/machine/icc_generic.h

21 #i‡!
deföed
(
__TBB_machöe_H
Ë|| deföed(
__TBB_machöe_icc_gíîic_H
)

22 #îr‹ 
Do
 
nŸ
 #ö˛udê
this
 
öã∫Æ
 
fûe
 
dúe˘ly
; 
u£
 
public
 
TBB
 
hódîs
 
ö°ód
.

25 #i‡! 
__TBB_ICC_BUILTIN_ATOMICS_PRESENT


29 
	#__TBB_machöe_icc_gíîic_H


	)

32 #i‡
_MSC_VER


33 
	~"msvc_ü32_comm⁄.h
"

35 
	~"gcc_ü32_comm⁄.h
"

41 #i‡
__TBB_x86_32


42 
	#__TBB_WORDSIZE
 4

	)

44 
	#__TBB_WORDSIZE
 8

	)

46 
	#__TBB_ENDIANNESS
 
__TBB_ENDIAN_LITTLE


	)

49 #i‡
_MSC_VER


51 #¥agm®
öåösic
(
_RódWrôeB¨rõr
)

52 
	#__TBB_compûî_„n˚
(Ë
	`_RódWrôeB¨rõr
()

	)

54 
	#__TBB_compûî_„n˚
(Ë
__asm__
 
	`__vﬁ©ûe__
("": : :"mem‹y")

	)

57 #i‚de‡
__TBB_fuŒ_mem‹y_„n˚


58 #i‡
_MSC_VER


60 #¥agm®
öåösic
(
_mm_m„n˚
)

61 
	#__TBB_fuŒ_mem‹y_„n˚
(Ë
	`_mm_m„n˚
()

	)

63 
	#__TBB_fuŒ_mem‹y_„n˚
(Ë
__asm__
 
	`__vﬁ©ûe__
("m„n˚": : :"mem‹y")

	)

67 
	#__TBB_c⁄åﬁ_c⁄si°ícy_hñ≥r
(Ë
	`__TBB_compûî_„n˚
()

	)

69 
«me•a˚
 
	gtbb
 {Çame•a˚ 
	göã∫Æ
 {

74 
	emem‹y_‹dî
 {

75 
	gmem‹y_‹dî_ªœxed
, 
	gmem‹y_‹dî_c⁄sume
, 
	gmem‹y_‹dî_acquúe
,

76 
	gmem‹y_‹dî_ªÀa£
, 
	gmem‹y_‹dî_acq_ªl
, 
	gmem‹y_‹dî_£q_c°


77 } 
	tmem‹y_‹dî
;

79 
«me•a˚
 
	gicc_öåösics_p‹t
 {

80 
	gãm∂©e
 <
ty≥«me
 
	gT
>

81 
T
 
c⁄vît_¨gumít
(T 
vÆue
){

82  
	gvÆue
;

87 
	gãm∂©e
 <
ty≥«me
 
	gT
>

88 * 
c⁄vît_¨gumít
(
T
* 
vÆue
){

89  (*)
	gvÆue
;

93 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
size_t
 
	gS
>

94 
	smachöe_lﬂd_°‹e
 {

95 
T
 
lﬂd_wôh_acquúe
 ( c⁄° vﬁ©ûêT& 
loˇti⁄
 ) {

96  
__©omic_lﬂd_ex∂icô
(&
loˇti⁄
, 
mem‹y_‹dî_acquúe
);

98 
°‹e_wôh_ªÀa£
 ( vﬁ©ûê
T
 &
loˇti⁄
, T 
vÆue
 ) {

99 
__©omic_°‹e_ex∂icô
(&
loˇti⁄
, 
icc_öåösics_p‹t
::
c⁄vît_¨gumít
(
vÆue
), 
mem‹y_‹dî_ªÀa£
);

103 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
size_t
 
	gS
>

104 
	smachöe_lﬂd_°‹e_ªœxed
 {

105 
ölöe
 
T
 
lﬂd
 ( c⁄° T& 
loˇti⁄
 ) {

106  
__©omic_lﬂd_ex∂icô
(&
loˇti⁄
, 
mem‹y_‹dî_ªœxed
);

108 
ölöe
 
°‹e
 ( 
T
& 
loˇti⁄
, T 
vÆue
 ) {

109 
__©omic_°‹e_ex∂icô
(&
loˇti⁄
, 
icc_öåösics_p‹t
::
c⁄vît_¨gumít
(
vÆue
), 
mem‹y_‹dî_ªœxed
);

113 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
size_t
 
	gS
>

114 
	smachöe_lﬂd_°‹e_£q_c°
 {

115 
T
 
lﬂd
 ( c⁄° vﬁ©ûêT& 
loˇti⁄
 ) {

116  
__©omic_lﬂd_ex∂icô
(&
loˇti⁄
, 
mem‹y_‹dî_£q_c°
);

119 
°‹e
 ( vﬁ©ûê
T
 &
loˇti⁄
, T 
vÆue
 ) {

120 
__©omic_°‹e_ex∂icô
(&
loˇti⁄
, 
vÆue
, 
mem‹y_‹dî_£q_c°
);

126 
«me•a˚
 
	gtbb
{Çame•a˚ 
	göã∫Æ
 {Çame•a˚ 
	gicc_öåösics_p‹t
{

127 
	emem‹y_‹dî_m≠
 {

128 
	gªœxed
 = 
mem‹y_‹dî_ªœxed
,

129 
	gacquúe
 = 
mem‹y_‹dî_acquúe
,

130 
	gªÀa£
 = 
mem‹y_‹dî_ªÀa£
,

131 
	gfuŒ_„n˚

mem‹y_‹dî_£q_c°


132 } 
	tmem‹y_‹dî_m≠
;

135 
	#__TBB_MACHINE_DEFINE_ATOMICS
(
S
,
T
,
M
) \

136 
ölöe
 
T
 
__TBB_machöe_cmpswp
##
S
##
	`M
–vﬁ©ûê*
±r
, T 
vÆue
, T 
com∑ønd
 ) { \

137 
	`__©omic_com∑ª_exch™ge_°r⁄g_ex∂icô
( \

138 (
T
*)
±r
 \

139 ,&
com∑ønd
 \

140 ,
vÆue
 \

141 , 
tbb
::
öã∫Æ
::
icc_öåösics_p‹t
::
M
 \

142 , 
tbb
::
öã∫Æ
::
icc_öåösics_p‹t
::
M
); \

143  
com∑ønd
; \

146 
ölöe
 
T
 
__TBB_machöe_„tch°‹e
##
S
##
	`M
(vﬁ©ûê*
±r
, T 
vÆue
) { \

147  
	`__©omic_exch™ge_ex∂icô
((
T
*)
±r
, 
vÆue
, 
tbb
::
öã∫Æ
::
icc_öåösics_p‹t
::
M
); \

150 
ölöe
 
T
 
__TBB_machöe_„tchadd
##
S
##
	`M
(vﬁ©ûê*
±r
, T 
vÆue
) { \

151  
	`__©omic_„tch_add_ex∂icô
((
T
*)
±r
, 
vÆue
, 
tbb
::
öã∫Æ
::
icc_öåösics_p‹t
::
M
); \

153 

	)

154 
	$__TBB_MACHINE_DEFINE_ATOMICS
(1,
tbb
::
öã∫Æ
::
öt8_t
, 
fuŒ_„n˚
)

155 
	$__TBB_MACHINE_DEFINE_ATOMICS
(1,
tbb
::
öã∫Æ
::
öt8_t
, 
acquúe
)

156 
	$__TBB_MACHINE_DEFINE_ATOMICS
(1,
tbb
::
öã∫Æ
::
öt8_t
, 
ªÀa£
)

157 
	$__TBB_MACHINE_DEFINE_ATOMICS
(1,
tbb
::
öã∫Æ
::
öt8_t
, 
ªœxed
)

159 
	$__TBB_MACHINE_DEFINE_ATOMICS
(2,
tbb
::
öã∫Æ
::
öt16_t
, 
fuŒ_„n˚
)

160 
	$__TBB_MACHINE_DEFINE_ATOMICS
(2,
tbb
::
öã∫Æ
::
öt16_t
, 
acquúe
)

161 
	$__TBB_MACHINE_DEFINE_ATOMICS
(2,
tbb
::
öã∫Æ
::
öt16_t
, 
ªÀa£
)

162 
	$__TBB_MACHINE_DEFINE_ATOMICS
(2,
tbb
::
öã∫Æ
::
öt16_t
, 
ªœxed
)

164 
	$__TBB_MACHINE_DEFINE_ATOMICS
(4,
tbb
::
öã∫Æ
::
öt32_t
, 
fuŒ_„n˚
)

165 
	$__TBB_MACHINE_DEFINE_ATOMICS
(4,
tbb
::
öã∫Æ
::
öt32_t
, 
acquúe
)

166 
	$__TBB_MACHINE_DEFINE_ATOMICS
(4,
tbb
::
öã∫Æ
::
öt32_t
, 
ªÀa£
)

167 
	$__TBB_MACHINE_DEFINE_ATOMICS
(4,
tbb
::
öã∫Æ
::
öt32_t
, 
ªœxed
)

169 
	$__TBB_MACHINE_DEFINE_ATOMICS
(8,
tbb
::
öã∫Æ
::
öt64_t
, 
fuŒ_„n˚
)

170 
	$__TBB_MACHINE_DEFINE_ATOMICS
(8,
tbb
::
öã∫Æ
::
öt64_t
, 
acquúe
)

171 
	$__TBB_MACHINE_DEFINE_ATOMICS
(8,
tbb
::
öã∫Æ
::
öt64_t
, 
ªÀa£
)

172 
	$__TBB_MACHINE_DEFINE_ATOMICS
(8,
tbb
::
öã∫Æ
::
öt64_t
, 
ªœxed
)

175 #unde‡
__TBB_MACHINE_DEFINE_ATOMICS


177 
	#__TBB_USE_FENCED_ATOMICS
 1

	)

179 
«me•a˚
 
tbb
 {Çame•a˚ 
öã∫Æ
 {

180 #i‡
__TBB_FORCE_64BIT_ALIGNMENT_BROKEN


181 
	`__TBB_MACHINE_DEFINE_LOAD8_GENERIC_FENCED
(
fuŒ_„n˚
)

182 
	`__TBB_MACHINE_DEFINE_STORE8_GENERIC_FENCED
(
fuŒ_„n˚
)

184 
	`__TBB_MACHINE_DEFINE_LOAD8_GENERIC_FENCED
(
acquúe
)

185 
	`__TBB_MACHINE_DEFINE_STORE8_GENERIC_FENCED
(
ªÀa£
)

187 
	`__TBB_MACHINE_DEFINE_LOAD8_GENERIC_FENCED
(
ªœxed
)

188 
	`__TBB_MACHINE_DEFINE_STORE8_GENERIC_FENCED
(
ªœxed
)

190 
ãm∂©e
 <
ty≥«me
 
T
>

191 
machöe_lﬂd_°‹e
<
T
,8> {

192 
T
 
	`lﬂd_wôh_acquúe
 ( c⁄° vﬁ©ûêT& 
loˇti⁄
 ) {

193 if–
tbb
::
öã∫Æ
::
	`is_Æig√d
(&
loˇti⁄
,8)) {

194  
	`__©omic_lﬂd_ex∂icô
(&
loˇti⁄
, 
mem‹y_‹dî_acquúe
);

196  
	`__TBB_machöe_gíîic_lﬂd8acquúe
(&
loˇti⁄
);

199 
	`°‹e_wôh_ªÀa£
 ( vﬁ©ûê
T
 &
loˇti⁄
, T 
vÆue
 ) {

200 if–
tbb
::
öã∫Æ
::
	`is_Æig√d
(&
loˇti⁄
,8)) {

201 
	`__©omic_°‹e_ex∂icô
(&
loˇti⁄
, 
icc_öåösics_p‹t
::
	`c⁄vît_¨gumít
(
vÆue
), 
mem‹y_‹dî_ªÀa£
);

203  
	`__TBB_machöe_gíîic_°‹e8ªÀa£
(&
loˇti⁄
,
vÆue
);

208 
ãm∂©e
 <
ty≥«me
 
T
>

209 
machöe_lﬂd_°‹e_ªœxed
<
T
,8> {

210 
T
 
	`lﬂd
–c⁄° vﬁ©ûêT& 
loˇti⁄
 ) {

211 if–
tbb
::
öã∫Æ
::
	`is_Æig√d
(&
loˇti⁄
,8)) {

212  
	`__©omic_lﬂd_ex∂icô
(&
loˇti⁄
, 
mem‹y_‹dî_ªœxed
);

214  
	`__TBB_machöe_gíîic_lﬂd8ªœxed
(&
loˇti⁄
);

217 
	`°‹e
–vﬁ©ûê
T
 &
loˇti⁄
, T 
vÆue
 ) {

218 if–
tbb
::
öã∫Æ
::
	`is_Æig√d
(&
loˇti⁄
,8)) {

219 
	`__©omic_°‹e_ex∂icô
(&
loˇti⁄
, 
icc_öåösics_p‹t
::
	`c⁄vît_¨gumít
(
vÆue
), 
mem‹y_‹dî_ªœxed
);

221  
	`__TBB_machöe_gíîic_°‹e8ªœxed
(&
loˇti⁄
,
vÆue
);

226 
ãm∂©e
 <
ty≥«me
 
T
 >

227 
machöe_lﬂd_°‹e_£q_c°
<
T
,8> {

228 
T
 
	`lﬂd
 ( c⁄° vﬁ©ûêT& 
loˇti⁄
 ) {

229 if–
tbb
::
öã∫Æ
::
	`is_Æig√d
(&
loˇti⁄
,8)) {

230  
	`__©omic_lﬂd_ex∂icô
(&
loˇti⁄
, 
mem‹y_‹dî_£q_c°
);

232  
	`__TBB_machöe_gíîic_lﬂd8fuŒ_„n˚
(&
loˇti⁄
);

237 
	`°‹e
 ( vﬁ©ûê
T
 &
loˇti⁄
, T 
vÆue
 ) {

238 if–
tbb
::
öã∫Æ
::
	`is_Æig√d
(&
loˇti⁄
,8)) {

239 
	`__©omic_°‹e_ex∂icô
(&
loˇti⁄
, 
vÆue
, 
mem‹y_‹dî_£q_c°
);

241  
	`__TBB_machöe_gíîic_°‹e8fuŒ_„n˚
(&
loˇti⁄
,
vÆue
);

248 }
	}
}

249 
	gãm∂©e
 <
ty≥«me
 
	gT
>

250 
ölöe
 
	$__TBB_machöe_OR
–
T
 *
›î™d
, T 
addíd
 ) {

251 
	`__©omic_„tch_‹_ex∂icô
(
›î™d
, 
addíd
, 
tbb
::
öã∫Æ
::
mem‹y_‹dî_£q_c°
);

252 
	}
}

254 
	gãm∂©e
 <
ty≥«me
 
	gT
>

255 
ölöe
 
	$__TBB_machöe_AND
–
T
 *
›î™d
, T 
addíd
 ) {

256 
	`__©omic_„tch_™d_ex∂icô
(
›î™d
, 
addíd
, 
tbb
::
öã∫Æ
::
mem‹y_‹dî_£q_c°
);

257 
	}
}

	@viper/concurrentqueue-src/benchmarks/tbb/machine/linux_common.h

21 #i‚de‡
__TBB_machöe_H


22 #îr‹ 
Do
 
nŸ
 #ö˛udê
this
 
öã∫Æ
 
fûe
 
dúe˘ly
; 
u£
 
public
 
TBB
 
hódîs
 
ö°ód
.

25 
	~<sched.h
>

26 
	#__TBB_Yõld
(Ë
	`sched_yõld
()

	)

28 
	~<uni°d.h
>

30 
	~<sys/sysˇŒ.h
>

32 #i‡
deföed
(
SYS_fuãx
)

34 
	#__TBB_USE_FUTEX
 1

	)

35 
	~<limôs.h
>

36 
	~<î∫o.h
>

39 #ifde‡
FUTEX_WAIT


40 
	#__TBB_FUTEX_WAIT
 
FUTEX_WAIT


	)

42 
	#__TBB_FUTEX_WAIT
 0

	)

45 #ifde‡
FUTEX_WAKE


46 
	#__TBB_FUTEX_WAKE
 
FUTEX_WAKE


	)

48 
	#__TBB_FUTEX_WAKE
 1

	)

51 #i‚de‡
__TBB_ASSERT


52 #îr‹ 
machöe
 
•ecific
 
hódîs
 
mu°
 
be
 
ö˛uded
 
a·î
 
tbb_°ddef
.
h


55 
«me•a˚
 
	gtbb
 {

57 
«me•a˚
 
	göã∫Æ
 {

59 
ölöe
 
fuãx_waô
–*
fuãx
, 
com∑ønd
 ) {

60 
	gr
 = 
sysˇŒ
–
SYS_fuãx
,
fuãx
,
__TBB_FUTEX_WAIT
,
com∑ønd
,
NULL
,NULL,0 );

61 #i‡
TBB_USE_ASSERT


62 
	ge
 = 
î∫o
;

63 
__TBB_ASSERT
–
r
==0||r==
EWOULDBLOCK
||‘==-1&&(
e
==
EAGAIN
||e==
EINTR
)), "futex_wait failed." );

65  
	gr
;

68 
ölöe
 
fuãx_wakeup_⁄e
–*
fuãx
 ) {

69 
	gr
 = ::
sysˇŒ
–
SYS_fuãx
,
fuãx
,
__TBB_FUTEX_WAKE
,1,
NULL
,NULL,0 );

70 
__TBB_ASSERT
–
r
==0||r==1, "futex_wakeup_one: moreÅhan oneÅhread woken up?" );

71  
	gr
;

74 
ölöe
 
fuãx_wakeup_Æl
–*
fuãx
 ) {

75 
	gr
 = ::
sysˇŒ
–
SYS_fuãx
,
fuãx
,
__TBB_FUTEX_WAKE
,
INT_MAX
,
NULL
,NULL,0 );

76 
__TBB_ASSERT
–
r
>=0, "futex_wakeup_all:Érror in waking upÅhreads" );

77  
	gr
;

	@viper/concurrentqueue-src/benchmarks/tbb/machine/linux_ia32.h

21 #i‡!
deföed
(
__TBB_machöe_H
Ë|| deföed(
__TBB_machöe_löux_ü32_H
)

22 #îr‹ 
Do
 
nŸ
 #ö˛udê
this
 
öã∫Æ
 
fûe
 
dúe˘ly
; 
u£
 
public
 
TBB
 
hódîs
 
ö°ód
.

25 
	#__TBB_machöe_löux_ü32_H


	)

27 
	~<°döt.h
>

28 
	~"gcc_ü32_comm⁄.h
"

30 
	#__TBB_WORDSIZE
 4

	)

31 
	#__TBB_ENDIANNESS
 
__TBB_ENDIAN_LITTLE


	)

33 
	#__TBB_compûî_„n˚
(Ë
__asm__
 
	`__vﬁ©ûe__
("": : :"mem‹y")

	)

34 
	#__TBB_c⁄åﬁ_c⁄si°ícy_hñ≥r
(Ë
	`__TBB_compûî_„n˚
()

	)

35 
	#__TBB_acquúe_c⁄si°ícy_hñ≥r
(Ë
	`__TBB_compûî_„n˚
()

	)

36 
	#__TBB_ªÀa£_c⁄si°ícy_hñ≥r
(Ë
	`__TBB_compûî_„n˚
()

	)

37 
	#__TBB_fuŒ_mem‹y_„n˚
(Ë
__asm__
 
	`__vﬁ©ûe__
("m„n˚": : :"mem‹y")

	)

39 #i‡
__TBB_ICC_ASM_VOLATILE_BROKEN


40 
	#__TBB_VOLATILE


	)

42 
	#__TBB_VOLATILE
 vﬁ©ûe

	)

45 
	#__TBB_MACHINE_DEFINE_ATOMICS
(
S
,
T
,
X
,
R
) \

46 
ölöe
 
T
 
__TBB_machöe_cmpswp
##
	`S
 (vﬁ©ûê*
±r
, T 
vÆue
, T 
com∑ønd
 ) \

48 
T
 
ªsu…
; \

50 
__asm__
 
	`__vﬁ©ûe__
("lock\ncmpxchg" 
X
 " %2,%1" \

51 : "˜"(
ªsu…
), "=m"(*(
__TBB_VOLATILE
 
T
*)
±r
) \

52 : "q"(
vÆue
), "0"(
com∑ønd
), "m"(*(
__TBB_VOLATILE
 
T
*)
±r
) \

54  
ªsu…
; \

57 
ölöe
 
T
 
__TBB_machöe_„tchadd
##
	`S
(vﬁ©ûê*
±r
, T 
addíd
) \

59 
T
 
ªsu…
; \

60 
__asm__
 
	`__vﬁ©ûe__
("lock\nxadd" 
X
 " %0,%1" \

61 : 
	`R
 (
ªsu…
), "=m"(*(
__TBB_VOLATILE
 
T
*)
±r
) \

62 : "0"(
addíd
), "m"(*(
__TBB_VOLATILE
 
T
*)
±r
) \

64  
ªsu…
; \

67 
ölöe
 
T
 
__TBB_machöe_„tch°‹e
##
	`S
(vﬁ©ûê*
±r
, T 
vÆue
) \

69 
T
 
ªsu…
; \

70 
__asm__
 
	`__vﬁ©ûe__
("lock\nxchg" 
X
 " %0,%1" \

71 : 
	`R
 (
ªsu…
), "=m"(*(
__TBB_VOLATILE
 
T
*)
±r
) \

72 : "0"(
vÆue
), "m"(*(
__TBB_VOLATILE
 
T
*)
±r
) \

74  
ªsu…
; \

76 

	)

77 
__TBB_MACHINE_DEFINE_ATOMICS
(1,
öt8_t
,"","=q")

78 
__TBB_MACHINE_DEFINE_ATOMICS
(2,
öt16_t
,"","=r")

79 
__TBB_MACHINE_DEFINE_ATOMICS
(4,
öt32_t
,"l","=r")

81 #i‡
__INTEL_COMPILER


82 #¥agm®
w¨nög
–
push
 )

84 #¥agm®
w¨nög
–
dißbÀ
: 998 )

87 #i‡
__TBB_GCC_CAS8_BUILTIN_INLINING_BROKEN


88 
	#__TBB_IA32_CAS8_NOINLINE
 
	`__©åibuã__
 ((
noölöe
))

	)

90 
	#__TBB_IA32_CAS8_NOINLINE


	)

93 
ölöe
 
__TBB_IA32_CAS8_NOINLINE
 
öt64_t
 
	$__TBB_machöe_cmpswp8
 (vﬁ©ûê*
±r
, 
öt64_t
 
vÆue
, i¡64_à
com∑ønd
 ) {

95 #i‡(
__TBB_GCC_BUILTIN_ATOMICS_PRESENT
 || (
__TBB_GCC_VERSION
 >40102)Ë&& !
__TBB_GCC_64BIT_ATOMIC_BUILTINS_BROKEN


96  
	`__sync_vÆ_com∑ª_™d_sw≠
–
ªöãΩªt_ˇ°
<vﬁ©ûê
öt64_t
*>(
±r
), 
com∑ønd
, 
vÆue
 );

99 
öt64_t
 
ªsu…
;

101 
öt64_t
 
i64
;

102 
öt32_t
 
i32
[2];

104 
i64
 = 
vÆue
;

105 #i‡
__PIC__


108 
öt32_t
 
tmp
;

109 
__asm__
 
	`__vﬁ©ûe__
 (

112 #i‡
__GNUC__
==3

118 : "=A"(
ªsu…
)

119 , "=m"(*(
__TBB_VOLATILE
 
öt64_t
 *)
±r
)

120 , "=m"(
tmp
)

121 #i‡
__GNUC__
==3

122 : "m"(*(
__TBB_VOLATILE
 
öt64_t
 *)
±r
)

124 : "SD"(
±r
)

126 , "0"(
com∑ønd
)

127 , "m"(
i32
[0]), "c"(i32[1])

129 #i‡
__INTEL_COMPILER


134 
__asm__
 
	`__vﬁ©ûe__
 (

136 : "=A"(
ªsu…
), "=m"(*(
__TBB_VOLATILE
 
öt64_t
 *)
±r
)

137 : "m"(*(
__TBB_VOLATILE
 
öt64_t
 *)
±r
)

138 , "0"(
com∑ønd
)

139 , "b"(
i32
[0]), "c"(i32[1])

143  
ªsu…
;

145 
	}
}

147 #unde‡
__TBB_IA32_CAS8_NOINLINE


149 #i‡
__INTEL_COMPILER


150 #¥agm®
w¨nög
–
p›
 )

153 
ölöe
 
	$__TBB_machöe_‹
–vﬁ©ûê*
±r
, 
uöt32_t
 
addíd
 ) {

154 
__asm__
 
	`__vﬁ©ûe__
("lock\n‹»%1,%0" : "=m"(*(
__TBB_VOLATILE
 
uöt32_t
 *)
±r
Ë: "r"(
addíd
), "m"(*(__TBB_VOLATILE uint32_t *)ptr) : "memory");

155 
	}
}

157 
ölöe
 
	$__TBB_machöe_™d
–vﬁ©ûê*
±r
, 
uöt32_t
 
addíd
 ) {

158 
__asm__
 
	`__vﬁ©ûe__
("lock\«nd»%1,%0" : "=m"(*(
__TBB_VOLATILE
 
uöt32_t
 *)
±r
Ë: "r"(
addíd
), "m"(*(__TBB_VOLATILE uint32_t *)ptr) : "memory");

159 
	}
}

165 #i‡
__˛™g__


166 
	#__TBB_fûdq
 "fûdŒ"

	)

167 
	#__TBB_fi°pq
 "fi°∂l"

	)

169 
	#__TBB_fûdq
 "fûdq"

	)

170 
	#__TBB_fi°pq
 "fi°pq"

	)

173 
ölöe
 
öt64_t
 
	$__TBB_machöe_Æig√d_lﬂd8
 (c⁄° vﬁ©ûê*
±r
) {

174 
	`__TBB_ASSERT
(
tbb
::
öã∫Æ
::
	`is_Æig√d
(
±r
,8),"__TBB_machine_aligned_load8 should be used with 8 byteálignedÜocations only \n");

175 
öt64_t
 
ªsu…
;

176 
__asm__
 
	`__vﬁ©ûe__
 ( 
__TBB_fûdq
 " %1\n\t"

177 
__TBB_fi°pq
 " %0" : "=m"(
ªsu…
Ë: "m"(*(c⁄° 
__TBB_VOLATILE
 
uöt64_t
*)
±r
) : "memory" );

178  
ªsu…
;

179 
	}
}

181 
ölöe
 
	$__TBB_machöe_Æig√d_°‹e8
 (vﬁ©ûê*
±r
, 
öt64_t
 
vÆue
 ) {

182 
	`__TBB_ASSERT
(
tbb
::
öã∫Æ
::
	`is_Æig√d
(
±r
,8),"__TBB_machine_aligned_store8 should be used with 8 byteálignedÜocations only \n");

184 
__asm__
 
	`__vﬁ©ûe__
 ( 
__TBB_fûdq
 " %1\n\t"

185 
__TBB_fi°pq
 " %0" : "=m"(*(
__TBB_VOLATILE
 
öt64_t
*)
±r
Ë: "m"(
vÆue
) : "memory" );

186 
	}
}

188 
ölöe
 
öt64_t
 
	$__TBB_machöe_lﬂd8
 (c⁄° vﬁ©ûê*
±r
) {

189 #i‡
__TBB_FORCE_64BIT_ALIGNMENT_BROKEN


190 if–
tbb
::
öã∫Æ
::
	`is_Æig√d
(
±r
,8)) {

192  
	`__TBB_machöe_Æig√d_lﬂd8
(
±r
);

193 #i‡
__TBB_FORCE_64BIT_ALIGNMENT_BROKEN


196  
	`__TBB_machöe_cmpswp8
(
c⁄°_ˇ°
<*>(
±r
),0,0);

199 
	}
}

203 "C" 
__TBB_machöe_°‹e8_¶ow
–vﬁ©ûê*
±r
, 
öt64_t
 
vÆue
 );

204 "C" 
__TBB_machöe_°‹e8_¶ow_≥rf_w¨nög
–vﬁ©ûê*
±r
 );

206 
ölöe
 
	$__TBB_machöe_°‹e8
(vﬁ©ûê*
±r
, 
öt64_t
 
vÆue
) {

207 #i‡
__TBB_FORCE_64BIT_ALIGNMENT_BROKEN


208 if–
tbb
::
öã∫Æ
::
	`is_Æig√d
(
±r
,8)) {

210 
	`__TBB_machöe_Æig√d_°‹e8
(
±r
,
vÆue
);

211 #i‡
__TBB_FORCE_64BIT_ALIGNMENT_BROKEN


214 #i‡
TBB_USE_PERFORMANCE_WARNINGS


215 
	`__TBB_machöe_°‹e8_¶ow_≥rf_w¨nög
(
±r
);

217 
	`__TBB_machöe_°‹e8_¶ow
(
±r
,
vÆue
);

220 
	}
}

223 
	#__TBB_AtomicOR
(
P
,
V
Ë
	`__TBB_machöe_‹
(P,V)

	)

224 
	#__TBB_AtomicAND
(
P
,
V
Ë
	`__TBB_machöe_™d
(P,V)

	)

226 
	#__TBB_USE_GENERIC_DWORD_FETCH_ADD
 1

	)

227 
	#__TBB_USE_GENERIC_DWORD_FETCH_STORE
 1

	)

228 
	#__TBB_USE_FETCHSTORE_AS_FULL_FENCED_STORE
 1

	)

229 
	#__TBB_USE_GENERIC_HALF_FENCED_LOAD_STORE
 1

	)

230 
	#__TBB_USE_GENERIC_RELAXED_LOAD_STORE
 1

	)

231 
	#__TBB_USE_GENERIC_SEQUENTIAL_CONSISTENCY_LOAD_STORE
 1

	)

	@viper/concurrentqueue-src/benchmarks/tbb/machine/linux_ia64.h

21 #i‡!
deföed
(
__TBB_machöe_H
Ë|| deföed(
__TBB_machöe_löux_ü64_H
)

22 #îr‹ 
Do
 
nŸ
 #ö˛udê
this
 
öã∫Æ
 
fûe
 
dúe˘ly
; 
u£
 
public
 
TBB
 
hódîs
 
ö°ód
.

25 
	#__TBB_machöe_löux_ü64_H


	)

27 
	~<°döt.h
>

28 
	~<ü64öåö.h
>

30 
	#__TBB_WORDSIZE
 8

	)

31 
	#__TBB_ENDIANNESS
 
__TBB_ENDIAN_LITTLE


	)

33 #i‡
__INTEL_COMPILER


34 
	#__TBB_compûî_„n˚
()

	)

35 
	#__TBB_c⁄åﬁ_c⁄si°ícy_hñ≥r
(Ë
	`__TBB_compûî_„n˚
()

	)

36 
	#__TBB_acquúe_c⁄si°ícy_hñ≥r
()

	)

37 
	#__TBB_ªÀa£_c⁄si°ícy_hñ≥r
()

	)

38 
	#__TBB_fuŒ_mem‹y_„n˚
(Ë
	`__mf
()

	)

40 
	#__TBB_compûî_„n˚
(Ë
__asm__
 
	`__vﬁ©ûe__
("": : :"mem‹y")

	)

41 
	#__TBB_c⁄åﬁ_c⁄si°ícy_hñ≥r
(Ë
	`__TBB_compûî_„n˚
()

	)

44 
	#__TBB_acquúe_c⁄si°ícy_hñ≥r
(Ë
	`__TBB_compûî_„n˚
()

	)

45 
	#__TBB_ªÀa£_c⁄si°ícy_hñ≥r
(Ë
	`__TBB_compûî_„n˚
()

	)

46 
	#__TBB_fuŒ_mem‹y_„n˚
(Ë
__asm__
 
	`__vﬁ©ûe__
("mf": : :"mem‹y")

	)

53 
öt8_t
 
__TBB_machöe_„tchadd1__TBB_fuŒ_„n˚
 (vﬁ©ûê*
±r
, i¡8_à
addíd
);

54 
öt8_t
 
__TBB_machöe_„tchadd1acquúe
(vﬁ©ûê*
±r
, i¡8_à
addíd
);

55 
öt8_t
 
__TBB_machöe_„tchadd1ªÀa£
(vﬁ©ûê*
±r
, i¡8_à
addíd
);

57 
öt16_t
 
__TBB_machöe_„tchadd2__TBB_fuŒ_„n˚
 (vﬁ©ûê*
±r
, i¡16_à
addíd
);

58 
öt16_t
 
__TBB_machöe_„tchadd2acquúe
(vﬁ©ûê*
±r
, i¡16_à
addíd
);

59 
öt16_t
 
__TBB_machöe_„tchadd2ªÀa£
(vﬁ©ûê*
±r
, i¡16_à
addíd
);

61 
öt32_t
 
__TBB_machöe_„tchadd4__TBB_fuŒ_„n˚
 (vﬁ©ûê*
±r
, i¡32_à
vÆue
);

62 
öt32_t
 
__TBB_machöe_„tchadd4acquúe
(vﬁ©ûê*
±r
, i¡32_à
addíd
);

63 
öt32_t
 
__TBB_machöe_„tchadd4ªÀa£
(vﬁ©ûê*
±r
, i¡32_à
addíd
);

65 
öt64_t
 
__TBB_machöe_„tchadd8__TBB_fuŒ_„n˚
 (vﬁ©ûê*
±r
, i¡64_à
vÆue
);

66 
öt64_t
 
__TBB_machöe_„tchadd8acquúe
(vﬁ©ûê*
±r
, i¡64_à
addíd
);

67 
öt64_t
 
__TBB_machöe_„tchadd8ªÀa£
(vﬁ©ûê*
±r
, i¡64_à
addíd
);

69 
öt8_t
 
__TBB_machöe_„tch°‹e1__TBB_fuŒ_„n˚
 (vﬁ©ûê*
±r
, i¡8_à
vÆue
);

70 
öt8_t
 
__TBB_machöe_„tch°‹e1acquúe
(vﬁ©ûê*
±r
, i¡8_à
vÆue
);

71 
öt8_t
 
__TBB_machöe_„tch°‹e1ªÀa£
(vﬁ©ûê*
±r
, i¡8_à
vÆue
);

73 
öt16_t
 
__TBB_machöe_„tch°‹e2__TBB_fuŒ_„n˚
 (vﬁ©ûê*
±r
, i¡16_à
vÆue
);

74 
öt16_t
 
__TBB_machöe_„tch°‹e2acquúe
(vﬁ©ûê*
±r
, i¡16_à
vÆue
);

75 
öt16_t
 
__TBB_machöe_„tch°‹e2ªÀa£
(vﬁ©ûê*
±r
, i¡16_à
vÆue
);

77 
öt32_t
 
__TBB_machöe_„tch°‹e4__TBB_fuŒ_„n˚
 (vﬁ©ûê*
±r
, i¡32_à
vÆue
);

78 
öt32_t
 
__TBB_machöe_„tch°‹e4acquúe
(vﬁ©ûê*
±r
, i¡32_à
vÆue
);

79 
öt32_t
 
__TBB_machöe_„tch°‹e4ªÀa£
(vﬁ©ûê*
±r
, i¡32_à
vÆue
);

81 
öt64_t
 
__TBB_machöe_„tch°‹e8__TBB_fuŒ_„n˚
 (vﬁ©ûê*
±r
, i¡64_à
vÆue
);

82 
öt64_t
 
__TBB_machöe_„tch°‹e8acquúe
(vﬁ©ûê*
±r
, i¡64_à
vÆue
);

83 
öt64_t
 
__TBB_machöe_„tch°‹e8ªÀa£
(vﬁ©ûê*
±r
, i¡64_à
vÆue
);

85 
öt8_t
 
__TBB_machöe_cmpswp1__TBB_fuŒ_„n˚
 (vﬁ©ûê*
±r
, i¡8_à
vÆue
, i¡8_à
com∑ønd
);

86 
öt8_t
 
__TBB_machöe_cmpswp1acquúe
(vﬁ©ûê*
±r
, i¡8_à
vÆue
, i¡8_à
com∑ønd
);

87 
öt8_t
 
__TBB_machöe_cmpswp1ªÀa£
(vﬁ©ûê*
±r
, i¡8_à
vÆue
, i¡8_à
com∑ønd
);

89 
öt16_t
 
__TBB_machöe_cmpswp2__TBB_fuŒ_„n˚
 (vﬁ©ûê*
±r
, i¡16_à
vÆue
, i¡16_à
com∑ønd
);

90 
öt16_t
 
__TBB_machöe_cmpswp2acquúe
(vﬁ©ûê*
±r
, i¡16_à
vÆue
, i¡16_à
com∑ønd
);

91 
öt16_t
 
__TBB_machöe_cmpswp2ªÀa£
(vﬁ©ûê*
±r
, i¡16_à
vÆue
, i¡16_à
com∑ønd
);

93 
öt32_t
 
__TBB_machöe_cmpswp4__TBB_fuŒ_„n˚
 (vﬁ©ûê*
±r
, i¡32_à
vÆue
, i¡32_à
com∑ønd
);

94 
öt32_t
 
__TBB_machöe_cmpswp4acquúe
(vﬁ©ûê*
±r
, i¡32_à
vÆue
, i¡32_à
com∑ønd
);

95 
öt32_t
 
__TBB_machöe_cmpswp4ªÀa£
(vﬁ©ûê*
±r
, i¡32_à
vÆue
, i¡32_à
com∑ønd
);

97 
öt64_t
 
__TBB_machöe_cmpswp8__TBB_fuŒ_„n˚
 (vﬁ©ûê*
±r
, i¡64_à
vÆue
, i¡64_à
com∑ønd
);

98 
öt64_t
 
__TBB_machöe_cmpswp8acquúe
(vﬁ©ûê*
±r
, i¡64_à
vÆue
, i¡64_à
com∑ønd
);

99 
öt64_t
 
__TBB_machöe_cmpswp8ªÀa£
(vﬁ©ûê*
±r
, i¡64_à
vÆue
, i¡64_à
com∑ønd
);

101 
öt64_t
 
__TBB_machöe_lg
(
uöt64_t
 
vÆue
);

102 
__TBB_machöe_∑u£
(
öt32_t
 
dñay
);

103 
boﬁ
 
__TBB_machöe_åylockbyã
–vﬁ©ûê&
±r
 );

104 
öt64_t
 
__TBB_machöe_lockbyã
–vﬁ©ûê&
±r
 );

107 * 
__TBB_gë_b•
();

109 
öt32_t
 
__TBB_machöe_lﬂd1_ªœxed
(c⁄° *
±r
);

110 
öt32_t
 
__TBB_machöe_lﬂd2_ªœxed
(c⁄° *
±r
);

111 
öt32_t
 
__TBB_machöe_lﬂd4_ªœxed
(c⁄° *
±r
);

112 
öt64_t
 
__TBB_machöe_lﬂd8_ªœxed
(c⁄° *
±r
);

114 
__TBB_machöe_°‹e1_ªœxed
(*
±r
, 
öt32_t
 
vÆue
);

115 
__TBB_machöe_°‹e2_ªœxed
(*
±r
, 
öt32_t
 
vÆue
);

116 
__TBB_machöe_°‹e4_ªœxed
(*
±r
, 
öt32_t
 
vÆue
);

117 
__TBB_machöe_°‹e8_ªœxed
(*
±r
, 
öt64_t
 
vÆue
);

121 
	#__TBB_machöe_„tchadd1fuŒ_„n˚
 
__TBB_machöe_„tchadd1__TBB_fuŒ_„n˚


	)

122 
	#__TBB_machöe_„tchadd2fuŒ_„n˚
 
__TBB_machöe_„tchadd2__TBB_fuŒ_„n˚


	)

123 
	#__TBB_machöe_„tchadd4fuŒ_„n˚
 
__TBB_machöe_„tchadd4__TBB_fuŒ_„n˚


	)

124 
	#__TBB_machöe_„tchadd8fuŒ_„n˚
 
__TBB_machöe_„tchadd8__TBB_fuŒ_„n˚


	)

125 
	#__TBB_machöe_„tch°‹e1fuŒ_„n˚
 
__TBB_machöe_„tch°‹e1__TBB_fuŒ_„n˚


	)

126 
	#__TBB_machöe_„tch°‹e2fuŒ_„n˚
 
__TBB_machöe_„tch°‹e2__TBB_fuŒ_„n˚


	)

127 
	#__TBB_machöe_„tch°‹e4fuŒ_„n˚
 
__TBB_machöe_„tch°‹e4__TBB_fuŒ_„n˚


	)

128 
	#__TBB_machöe_„tch°‹e8fuŒ_„n˚
 
__TBB_machöe_„tch°‹e8__TBB_fuŒ_„n˚


	)

129 
	#__TBB_machöe_cmpswp1fuŒ_„n˚
 
__TBB_machöe_cmpswp1__TBB_fuŒ_„n˚


	)

130 
	#__TBB_machöe_cmpswp2fuŒ_„n˚
 
__TBB_machöe_cmpswp2__TBB_fuŒ_„n˚


	)

131 
	#__TBB_machöe_cmpswp4fuŒ_„n˚
 
__TBB_machöe_cmpswp4__TBB_fuŒ_„n˚


	)

132 
	#__TBB_machöe_cmpswp8fuŒ_„n˚
 
__TBB_machöe_cmpswp8__TBB_fuŒ_„n˚


	)

137 
	#__TBB_machöe_„tchadd1ªœxed
 
__TBB_machöe_„tchadd1acquúe


	)

138 
	#__TBB_machöe_„tchadd2ªœxed
 
__TBB_machöe_„tchadd2acquúe


	)

139 
	#__TBB_machöe_„tchadd4ªœxed
 
__TBB_machöe_„tchadd4acquúe


	)

140 
	#__TBB_machöe_„tchadd8ªœxed
 
__TBB_machöe_„tchadd8acquúe


	)

141 
	#__TBB_machöe_„tch°‹e1ªœxed
 
__TBB_machöe_„tch°‹e1acquúe


	)

142 
	#__TBB_machöe_„tch°‹e2ªœxed
 
__TBB_machöe_„tch°‹e2acquúe


	)

143 
	#__TBB_machöe_„tch°‹e4ªœxed
 
__TBB_machöe_„tch°‹e4acquúe


	)

144 
	#__TBB_machöe_„tch°‹e8ªœxed
 
__TBB_machöe_„tch°‹e8acquúe


	)

145 
	#__TBB_machöe_cmpswp1ªœxed
 
__TBB_machöe_cmpswp1acquúe


	)

146 
	#__TBB_machöe_cmpswp2ªœxed
 
__TBB_machöe_cmpswp2acquúe


	)

147 
	#__TBB_machöe_cmpswp4ªœxed
 
__TBB_machöe_cmpswp4acquúe


	)

148 
	#__TBB_machöe_cmpswp8ªœxed
 
__TBB_machöe_cmpswp8acquúe


	)

150 
	#__TBB_MACHINE_DEFINE_ATOMICS
(
S
,
V
) \

151 
ãm∂©e
 <
ty≥«me
 
T
> \

152 
machöe_lﬂd_°‹e_ªœxed
<
T
,
S
> { \

153 
ölöe
 
T
 
	`lﬂd
 ( c⁄° T& 
loˇti⁄
 ) { \

154  (
T
)
__TBB_machöe_lﬂd
##
S
##
	`_ªœxed
(&
loˇti⁄
); \

156 
ölöe
 
	`°‹e
 ( 
T
& 
loˇti⁄
, T 
vÆue
 ) { \

157 
__TBB_machöe_°‹e
##
S
##
	`_ªœxed
(&
loˇti⁄
, (
V
)
vÆue
); \

159 }

	)

161 
«me•a˚
 
tbb
 {

162 
«me•a˚
 
öã∫Æ
 {

163 
__TBB_MACHINE_DEFINE_ATOMICS
(1,
öt8_t
);

164 
__TBB_MACHINE_DEFINE_ATOMICS
(2,
öt16_t
);

165 
__TBB_MACHINE_DEFINE_ATOMICS
(4,
öt32_t
);

166 
__TBB_MACHINE_DEFINE_ATOMICS
(8,
öt64_t
);

169 #unde‡
__TBB_MACHINE_DEFINE_ATOMICS


171 
	#__TBB_USE_FENCED_ATOMICS
 1

	)

172 
	#__TBB_USE_GENERIC_HALF_FENCED_LOAD_STORE
 1

	)

173 
	#__TBB_USE_GENERIC_SEQUENTIAL_CONSISTENCY_LOAD_STORE
 1

	)

176 
	#__TBB_TryLockByã
(
P
Ë
	`__TBB_machöe_åylockbyã
(P)

	)

177 
	#__TBB_LockByã
(
P
Ë
	`__TBB_machöe_lockbyã
(P)

	)

180 
	#__TBB_Pau£
(
V
Ë
	`__TBB_machöe_∑u£
(V)

	)

181 
	#__TBB_Log2
(
V
Ë
	`__TBB_machöe_lg
(V)

	)

	@viper/concurrentqueue-src/benchmarks/tbb/machine/linux_intel64.h

21 #i‡!
deföed
(
__TBB_machöe_H
Ë|| deföed(
__TBB_machöe_löux_öãl64_H
)

22 #îr‹ 
Do
 
nŸ
 #ö˛udê
this
 
öã∫Æ
 
fûe
 
dúe˘ly
; 
u£
 
public
 
TBB
 
hódîs
 
ö°ód
.

25 
	#__TBB_machöe_löux_öãl64_H


	)

27 
	~<°döt.h
>

28 
	~"gcc_ü32_comm⁄.h
"

30 
	#__TBB_WORDSIZE
 8

	)

31 
	#__TBB_ENDIANNESS
 
__TBB_ENDIAN_LITTLE


	)

33 
	#__TBB_compûî_„n˚
(Ë
__asm__
 
	`__vﬁ©ûe__
("": : :"mem‹y")

	)

34 
	#__TBB_c⁄åﬁ_c⁄si°ícy_hñ≥r
(Ë
	`__TBB_compûî_„n˚
()

	)

35 
	#__TBB_acquúe_c⁄si°ícy_hñ≥r
(Ë
	`__TBB_compûî_„n˚
()

	)

36 
	#__TBB_ªÀa£_c⁄si°ícy_hñ≥r
(Ë
	`__TBB_compûî_„n˚
()

	)

38 #i‚de‡
__TBB_fuŒ_mem‹y_„n˚


39 
	#__TBB_fuŒ_mem‹y_„n˚
(Ë
__asm__
 
	`__vﬁ©ûe__
("m„n˚": : :"mem‹y")

	)

42 
	#__TBB_MACHINE_DEFINE_ATOMICS
(
S
,
T
,
X
) \

43 
ölöe
 
T
 
__TBB_machöe_cmpswp
##
	`S
 (vﬁ©ûê*
±r
, T 
vÆue
, T 
com∑ønd
 ) \

45 
T
 
ªsu…
; \

47 
__asm__
 
	`__vﬁ©ûe__
("lock\ncmpxchg" 
X
 " %2,%1" \

48 : "˜"(
ªsu…
), "=m"(*(vﬁ©ûê
T
*)
±r
) \

49 : "q"(
vÆue
), "0"(
com∑ønd
), "m"(*(vﬁ©ûê
T
*)
±r
) \

51  
ªsu…
; \

54 
ölöe
 
T
 
__TBB_machöe_„tchadd
##
	`S
(vﬁ©ûê*
±r
, T 
addíd
) \

56 
T
 
ªsu…
; \

57 
__asm__
 
	`__vﬁ©ûe__
("lock\nxadd" 
X
 " %0,%1" \

58 : "Ù"(
ªsu…
),"=m"(*(vﬁ©ûê
T
*)
±r
) \

59 : "0"(
addíd
), "m"(*(vﬁ©ûê
T
*)
±r
) \

61  
ªsu…
; \

64 
ölöe
 
T
 
__TBB_machöe_„tch°‹e
##
	`S
(vﬁ©ûê*
±r
, T 
vÆue
) \

66 
T
 
ªsu…
; \

67 
__asm__
 
	`__vﬁ©ûe__
("lock\nxchg" 
X
 " %0,%1" \

68 : "Ù"(
ªsu…
),"=m"(*(vﬁ©ûê
T
*)
±r
) \

69 : "0"(
vÆue
), "m"(*(vﬁ©ûê
T
*)
±r
) \

71  
ªsu…
; \

73 

	)

74 
__TBB_MACHINE_DEFINE_ATOMICS
(1,
öt8_t
,"")

75 
__TBB_MACHINE_DEFINE_ATOMICS
(2,
öt16_t
,"")

76 
__TBB_MACHINE_DEFINE_ATOMICS
(4,
öt32_t
,"")

77 
__TBB_MACHINE_DEFINE_ATOMICS
(8,
öt64_t
,"q")

79 #unde‡
__TBB_MACHINE_DEFINE_ATOMICS


81 
ölöe
 
	$__TBB_machöe_‹
–vﬁ©ûê*
±r
, 
uöt64_t
 
vÆue
 ) {

82 
__asm__
 
	`__vﬁ©ûe__
("lock\n‹q %1,%0" : "=m"(*(vﬁ©ûê
uöt64_t
*)
±r
Ë: "r"(
vÆue
), "m"(*(volatile uint64_t*)ptr) : "memory");

83 
	}
}

85 
ölöe
 
	$__TBB_machöe_™d
–vﬁ©ûê*
±r
, 
uöt64_t
 
vÆue
 ) {

86 
__asm__
 
	`__vﬁ©ûe__
("lock\«ndq %1,%0" : "=m"(*(vﬁ©ûê
uöt64_t
*)
±r
Ë: "r"(
vÆue
), "m"(*(volatile uint64_t*)ptr) : "memory");

87 
	}
}

89 
	#__TBB_AtomicOR
(
P
,
V
Ë
	`__TBB_machöe_‹
(P,V)

	)

90 
	#__TBB_AtomicAND
(
P
,
V
Ë
	`__TBB_machöe_™d
(P,V)

	)

92 
	#__TBB_USE_FETCHSTORE_AS_FULL_FENCED_STORE
 1

	)

93 
	#__TBB_USE_GENERIC_HALF_FENCED_LOAD_STORE
 1

	)

94 
	#__TBB_USE_GENERIC_RELAXED_LOAD_STORE
 1

	)

95 
	#__TBB_USE_GENERIC_SEQUENTIAL_CONSISTENCY_LOAD_STORE
 1

	)

	@viper/concurrentqueue-src/benchmarks/tbb/machine/mac_ppc.h

21 #i‡!
deföed
(
__TBB_machöe_H
Ë|| deföed(
__TBB_machöe_gcc_powî_H
)

22 #îr‹ 
Do
 
nŸ
 #ö˛udê
this
 
öã∫Æ
 
fûe
 
dúe˘ly
; 
u£
 
public
 
TBB
 
hódîs
 
ö°ód
.

25 
	#__TBB_machöe_gcc_powî_H


	)

27 
	~<°döt.h
>

28 
	~<uni°d.h
>

34 #i‡
__powîpc64__
 || 
__µc64__


37 
	#__TBB_WORDSIZE
 8

	)

39 
	#__TBB_WORDSIZE
 4

	)

46 #i‡
__BIG_ENDIAN__
 || (
deföed
(
__BYTE_ORDER__
Ë&& __BYTE_ORDER__==
__ORDER_BIG_ENDIAN__
)

47 
	#__TBB_ENDIANNESS
 
__TBB_ENDIAN_BIG


	)

48 #ñi‡
__LITTLE_ENDIAN__
 || (
deföed
(
__BYTE_ORDER__
Ë&& __BYTE_ORDER__==
__ORDER_LITTLE_ENDIAN__
)

49 
	#__TBB_ENDIANNESS
 
__TBB_ENDIAN_LITTLE


	)

50 #ñi‡
deföed
(
__BYTE_ORDER__
)

51 
	#__TBB_ENDIANNESS
 
__TBB_ENDIAN_UNSUPPORTED


	)

53 
	#__TBB_ENDIANNESS
 
__TBB_ENDIAN_DETECT


	)

57 #i‡
__TBB_WORDSIZE
==8

59 
	#__TBB_64BIT_ATOMICS
 1

	)

60 #ñi‡
__bgp__


62 
	#__TBB_64BIT_ATOMICS
 0

	)

72 #i‚de‡
__TBB_64BIT_ATOMICS


73 
	#__TBB_64BIT_ATOMICS
 0

	)

77 
ölöe
 
öt32_t
 
	$__TBB_machöe_cmpswp4
 (vﬁ©ûê*
±r
, 
öt32_t
 
vÆue
, i¡32_à
com∑ønd
 )

79 
öt32_t
 
ªsu…
;

81 
__asm__
 
	`__vﬁ©ûe__
("sync\n"

90 : [
ªs
]"=&r"(
ªsu…
)

91 , "+m"(* (
öt32_t
*Ë
±r
)

92 : [
±r
]"r"(ptr)

93 , [
vÆ
]"r"(
vÆue
)

94 , [
cmp
]"r"(
com∑ønd
)

98  
ªsu…
;

99 
	}
}

101 #i‡
__TBB_WORDSIZE
==8

103 
ölöe
 
öt64_t
 
	$__TBB_machöe_cmpswp8
 (vﬁ©ûê*
±r
, 
öt64_t
 
vÆue
, i¡64_à
com∑ønd
 )

105 
öt64_t
 
ªsu…
;

106 
__asm__
 
	`__vﬁ©ûe__
("sync\n"

115 : [
ªs
]"=&r"(
ªsu…
)

116 , "+m"(* (
öt64_t
*Ë
±r
)

117 : [
±r
]"r"(ptr)

118 , [
vÆ
]"r"(
vÆue
)

119 , [
cmp
]"r"(
com∑ønd
)

123  
ªsu…
;

124 
	}
}

126 #ñi‡
__TBB_64BIT_ATOMICS


128 
ölöe
 
öt64_t
 
	$__TBB_machöe_cmpswp8
 (vﬁ©ûê*
±r
, 
öt64_t
 
vÆue
, i¡64_à
com∑ønd
 )

130 
öt64_t
 
ªsu…
;

131 
öt64_t
 
vÆue_ªgi°î
, 
com∑ønd_ªgi°î
, 
ªsu…_ªgi°î
;

132 
__asm__
 
	`__vﬁ©ûe__
("sync\n\t"

144 : [
ªsm
]"=m"(
ªsu…
)

145 , [
ªs
] "=&r"–
ªsu…_ªgi°î
)

146 , [
vÆ
] "=&r"–
vÆue_ªgi°î
)

147 , [
cmp
] "=&r"(
com∑ønd_ªgi°î
)

148 , "+m"(* (
öt64_t
*Ë
±r
)

149 : [
±r
] "r"(ptr)

150 , [
vÆm
]"m"(
vÆue
)

151 , [
cmpm
]"m"(
com∑ønd
)

155  
ªsu…
;

156 
	}
}

160 
	#__TBB_MACHINE_DEFINE_LOAD_STORE
(
S
,
ldx
,
°x
,
cmpx
) \

161 
ãm∂©e
 <
ty≥«me
 
T
> \

162 
machöe_lﬂd_°‹e
<
T
,
S
> { \

163 
ölöe
 
T
 
	`lﬂd_wôh_acquúe
(c⁄° vﬁ©ûêT& 
loˇti⁄
) { \

164 
T
 
ªsu…
; \

165 
__asm__
 
	`__vﬁ©ûe__
(
ldx
 " %[res],0(%[ptr])\n" \

167 
cmpx
 " %[res],%[res]\n\t" \

170 : [
ªs
]"Ù"(
ªsu…
) \

171 : [
±r
]"b"(&
loˇti⁄
) \

172 , "m"(
loˇti⁄
) \

175  
ªsu…
; \

177 
ölöe
 
	`°‹e_wôh_ªÀa£
(vﬁ©ûê
T
 &
loˇti⁄
, T 
vÆue
) { \

178 
__asm__
 
	`__vﬁ©ûe__
("lwsync\n\t" \

179 
°x
 " %[val],0(%[ptr])" \

180 : "=m"(
loˇti⁄
) \

181 : [
±r
]"b"(&
loˇti⁄
) \

182 , [
vÆ
]"r"(
vÆue
) \

187 
ãm∂©e
 <
ty≥«me
 
T
> \

188 
machöe_lﬂd_°‹e_ªœxed
<
T
,
S
> { \

189 
ölöe
 
T
 
	`lﬂd
 (c⁄° 
__TBB_©omic
 T& 
loˇti⁄
) { \

190 
T
 
ªsu…
; \

191 
__asm__
 
	`__vﬁ©ûe__
(
ldx
 " %[res],0(%[ptr])" \

192 : [
ªs
]"Ù"(
ªsu…
) \

193 : [
±r
]"b"(&
loˇti⁄
) \

194 , "m"(
loˇti⁄
) \

196  
ªsu…
; \

198 
ölöe
 
	`°‹e
 (
__TBB_©omic
 
T
 &
loˇti⁄
, T 
vÆue
) { \

199 
__asm__
 
	`__vﬁ©ûe__
(
°x
 " %[val],0(%[ptr])" \

200 : "=m"(
loˇti⁄
) \

201 : [
±r
]"b"(&
loˇti⁄
) \

202 , [
vÆ
]"r"(
vÆue
) \

205 };

	)

207 
«me•a˚
 
	gtbb
 {

208 
«me•a˚
 
	göã∫Æ
 {

209 
__TBB_MACHINE_DEFINE_LOAD_STORE
(1,"lbz","stb","cmpw")

210 
__TBB_MACHINE_DEFINE_LOAD_STORE
(2,"lhz","sth","cmpw")

211 
__TBB_MACHINE_DEFINE_LOAD_STORE
(4,"lwz","stw","cmpw")

213 #i‡
__TBB_WORDSIZE
==8

215 
__TBB_MACHINE_DEFINE_LOAD_STORE
(8,"ld" ,"std","cmpd")

217 #ñi‡
__TBB_64BIT_ATOMICS


219 
	gãm∂©e
 <
ty≥«me
 
	gT
>

220 
	gmachöe_lﬂd_°‹e
<
	gT
,8> {

221 
ölöe
 
T
 
lﬂd_wôh_acquúe
(c⁄° vﬁ©ûêT& 
loˇti⁄
) {

222 
T
 
	gªsu…
;

223 
T
 
	gªsu…_ªgi°î
;

224 
__asm__
 
__vﬁ©ûe__
("ld %[res],0(%[ptr])\n\t"

230 : [
ªsm
]"=m"(
ªsu…
)

231 , [
ªs
]"=&r"(
ªsu…_ªgi°î
)

232 : [
±r
]"b"(&
loˇti⁄
)

233 , "m"(
loˇti⁄
)

236  
	gªsu…
;

239 
ölöe
 
°‹e_wôh_ªÀa£
(vﬁ©ûê
T
 &
loˇti⁄
, T 
vÆue
) {

240 
T
 
	gvÆue_ªgi°î
;

241 
__asm__
 
__vﬁ©ûe__
("lwsync\n\t"

244 : "=m"(
loˇti⁄
)

245 , [
vÆ
]"=&r"(
vÆue_ªgi°î
)

246 : [
±r
]"b"(&
loˇti⁄
)

247 , [
vÆm
]"m"(
vÆue
)

252 
	gmachöe_lﬂd_°‹e_ªœxed
<
	gT
,8> {

253 
ölöe
 
T
 
lﬂd
 (c⁄° vﬁ©ûêT& 
loˇti⁄
) {

254 
T
 
	gªsu…
;

255 
T
 
	gªsu…_ªgi°î
;

256 
__asm__
 
__vﬁ©ûe__
("ld %[res],0(%[ptr])\n\t"

258 : [
ªsm
]"=m"(
ªsu…
)

259 , [
ªs
]"=&r"(
ªsu…_ªgi°î
)

260 : [
±r
]"b"(&
loˇti⁄
)

261 , "m"(
loˇti⁄
)

263  
	gªsu…
;

266 
ölöe
 
°‹e
 (vﬁ©ûê
T
 &
loˇti⁄
, T 
vÆue
) {

267 
T
 
	gvÆue_ªgi°î
;

268 
__asm__
 
__vﬁ©ûe__
("ld %[val],%[valm]\n\t"

270 : "=m"(
loˇti⁄
)

271 , [
vÆ
]"=&r"(
vÆue_ªgi°î
)

272 : [
±r
]"b"(&
loˇti⁄
)

273 , [
vÆm
]"m"(
vÆue
)

277 
	#__TBB_machöe_lﬂd_°‹e_ªœxed_8


	)

283 #unde‡
__TBB_MACHINE_DEFINE_LOAD_STORE


285 
	#__TBB_USE_GENERIC_PART_WORD_CAS
 1

	)

286 
	#__TBB_USE_GENERIC_FETCH_ADD
 1

	)

287 
	#__TBB_USE_GENERIC_FETCH_STORE
 1

	)

288 
	#__TBB_USE_GENERIC_SEQUENTIAL_CONSISTENCY_LOAD_STORE
 1

	)

290 
	#__TBB_c⁄åﬁ_c⁄si°ícy_hñ≥r
(Ë
__asm__
 
	`__vﬁ©ûe__
("isync": : :"mem‹y")

	)

291 
	#__TBB_fuŒ_mem‹y_„n˚
(Ë
__asm__
 
	`__vﬁ©ûe__
–"sync": : :"mem‹y")

	)

293 
ölöe
 
öçå_t
 
	$__TBB_machöe_lg
–
uöçå_t
 
x
 ) {

294 
	`__TBB_ASSERT
(
x
, "__TBB_Log2(0) undefined");

296 #i‡
__TBB_WORDSIZE
==8

297 
__asm__
 
	`__vﬁ©ûe__
 ("˙ézd %0,%0" : "+r"(
x
));

298  63-
°©ic_ˇ°
<
öçå_t
>(
x
);

300 
__asm__
 
	`__vﬁ©ûe__
 ("˙ézw %0,%0" : "+r"(
x
));

301  31-
°©ic_ˇ°
<
öçå_t
>(
x
);

303 
	}
}

304 
	#__TBB_Log2
(
V
Ë
	`__TBB_machöe_lg
(V)

	)

307 
uöt32_t
 
	t__TBB_Fœg
;

308 
	#__TBB_Fœg
 
__TBB_Fœg


	)

310 
ölöe
 
boﬁ
 
	$__TBB_machöe_åylockbyã
–
__TBB_©omic
 
__TBB_Fœg
 &
Êag
 ) {

311  
	`__TBB_machöe_cmpswp4
(&
Êag
,1,0)==0;

312 
	}
}

313 
	#__TBB_TryLockByã
(
P
Ë
	`__TBB_machöe_åylockbyã
(P)

	)

	@viper/concurrentqueue-src/benchmarks/tbb/machine/macos_common.h

21 #i‡!
deföed
(
__TBB_machöe_H
Ë|| deföed(
__TBB_machöe_macos_comm⁄_H
)

22 #îr‹ 
Do
 
nŸ
 #ö˛udê
this
 
öã∫Æ
 
fûe
 
dúe˘ly
; 
u£
 
public
 
TBB
 
hódîs
 
ö°ód
.

25 
	#__TBB_machöe_macos_comm⁄_H


	)

27 
	~<sched.h
>

28 
	#__TBB_Yõld
(Ë
	`sched_yõld
()

	)

32 
	~<sys/ty≥s.h
>

33 
	~<sys/sys˘l.h
>

35 
ölöe
 
	$__TBB_macos_avaûabÀ_˝u
() {

36 
«me
[2] = {
CTL_HW
, 
HW_AVAILCPU
};

37 
n˝u
;

38 
size_t
 
size
 = (
n˝u
);

39 
	`sys˘l
–
«me
, 2, &
n˝u
, &
size
, 
NULL
, 0 );

40  
n˝u
;

41 
	}
}

43 
	#__TBB_H¨dw¨eC⁄cuºícy
(Ë
	`__TBB_macos_avaûabÀ_˝u
()

	)

45 #i‚de‡
__TBB_fuŒ_mem‹y_„n˚


48 
	#__TBB_UnknownArchôe˘uª
 1

	)

51 #i‡
__TBB_UnknownArchôe˘uª


53 
	~<libkîn/OSAtomic.h
>

55 
ölöe
 
öt64_t
 
	$__TBB_machöe_cmpswp8_OsX
(vﬁ©ûê*
±r
, 
öt64_t
 
vÆue
, i¡64_à
com∑ønd
)

57 
	`__TBB_ASSERT
–
tbb
::
öã∫Æ
::
	`is_Æig√d
(
±r
,8), "addressÇotÖroperlyáligned for OS X*átomics");

58 
öt64_t
* 
addªss
 = (öt64_t*)
±r
;

59  !
	`OSAtomicCom∑ªAndSw≠64B¨rõr
(
com∑ønd
, 
vÆue
, 
addªss
) ){

60 #i‡
__TBB_WORDSIZE
==8

61 
öt64_t
 
¢≠shŸ
 = *
addªss
;

63 
öt64_t
 
¢≠shŸ
 = 
	`OSAtomicAdd64
–0, 
addªss
 );

65 if–
¢≠shŸ
!=
com∑ønd
 )  snapshot;

67  
com∑ønd
;

68 
	}
}

70 
	#__TBB_machöe_cmpswp8
 
__TBB_machöe_cmpswp8_OsX


	)

74 #i‡
__TBB_UnknownArchôe˘uª


76 #i‚de‡
__TBB_WORDSIZE


77 
	#__TBB_WORDSIZE
 4

	)

80 #ifde‡
__TBB_ENDIANNESS


82 #ñi‡
__BIG_ENDIAN__


83 
	#__TBB_ENDIANNESS
 
__TBB_ENDIAN_BIG


	)

84 #ñi‡
__LITTLE_ENDIAN__


85 
	#__TBB_ENDIANNESS
 
__TBB_ENDIAN_LITTLE


	)

87 
	#__TBB_ENDIANNESS
 
__TBB_ENDIAN_UNSUPPORTED


	)

95 
	#__TBB_c⁄åﬁ_c⁄si°ícy_hñ≥r
(Ë
	`OSMem‹yB¨rõr
()

	)

96 
	#__TBB_acquúe_c⁄si°ícy_hñ≥r
(Ë
	`OSMem‹yB¨rõr
()

	)

97 
	#__TBB_ªÀa£_c⁄si°ícy_hñ≥r
(Ë
	`OSMem‹yB¨rõr
()

	)

98 
	#__TBB_fuŒ_mem‹y_„n˚
(Ë
	`OSMem‹yB¨rõr
()

	)

100 
ölöe
 
öt32_t
 
	$__TBB_machöe_cmpswp4
(vﬁ©ûê*
±r
, 
öt32_t
 
vÆue
, i¡32_à
com∑ønd
)

102 
	`__TBB_ASSERT
–
tbb
::
öã∫Æ
::
	`is_Æig√d
(
±r
,4), "addressÇotÖroperlyáligned for OS X*átomics");

103 
öt32_t
* 
addªss
 = (öt32_t*)
±r
;

104  !
	`OSAtomicCom∑ªAndSw≠32B¨rõr
(
com∑ønd
, 
vÆue
, 
addªss
) ){

105 
öt32_t
 
¢≠shŸ
 = *
addªss
;

106 if–
¢≠shŸ
!=
com∑ønd
 )  snapshot;

108  
com∑ønd
;

109 
	}
}

111 
ölöe
 
öt32_t
 
	$__TBB_machöe_„tchadd4
(vﬁ©ûê*
±r
, 
öt32_t
 
addíd
)

113 
	`__TBB_ASSERT
–
tbb
::
öã∫Æ
::
	`is_Æig√d
(
±r
,4), "addressÇotÖroperlyáligned for OS X*átomics");

114  
	`OSAtomicAdd32B¨rõr
(
addíd
, (
öt32_t
*)
±r
) -áddend;

115 
	}
}

117 
ölöe
 
öt64_t
 
	$__TBB_machöe_„tchadd8
(vﬁ©ûê*
±r
, 
öt64_t
 
addíd
)

119 
	`__TBB_ASSERT
–
tbb
::
öã∫Æ
::
	`is_Æig√d
(
±r
,8), "addressÇotÖroperlyáligned for OS X*átomics");

120  
	`OSAtomicAdd64B¨rõr
(
addíd
, (
öt64_t
*)
±r
) -áddend;

121 
	}
}

123 
	#__TBB_USE_GENERIC_PART_WORD_CAS
 1

	)

124 
	#__TBB_USE_GENERIC_PART_WORD_FETCH_ADD
 1

	)

125 
	#__TBB_USE_GENERIC_FETCH_STORE
 1

	)

126 
	#__TBB_USE_GENERIC_HALF_FENCED_LOAD_STORE
 1

	)

127 
	#__TBB_USE_GENERIC_RELAXED_LOAD_STORE
 1

	)

128 #i‡
__TBB_WORDSIZE
 == 4

129 
	#__TBB_USE_GENERIC_DWORD_LOAD_STORE
 1

	)

131 
	#__TBB_USE_GENERIC_SEQUENTIAL_CONSISTENCY_LOAD_STORE
 1

	)

	@viper/concurrentqueue-src/benchmarks/tbb/machine/mic_common.h

21 #i‚de‡
__TBB_mic_comm⁄_H


22 
	#__TBB_mic_comm⁄_H


	)

24 #i‚de‡
__TBB_machöe_H


25 #îr‹ 
Do
 
nŸ
 #ö˛udê
this
 
öã∫Æ
 
fûe
 
dúe˘ly
; 
u£
 
public
 
TBB
 
hódîs
 
ö°ód
.

28 #i‡! 
__TBB_DEFINE_MIC


29 #îr‹ 
mic_comm⁄
.
h
 
should
 
be
 
ö˛uded
 
⁄ly
 
whí
 
buûdög
 
I¡ñ
(
R
Ë
M™y
 
I¡egøãd
 
C‹e
 
Archôe˘uª


32 #i‚de‡
__TBB_PREFETCHING


33 
	#__TBB_PREFETCHING
 1

	)

35 #i‡
__TBB_PREFETCHING


36 
	~<immöåö.h
>

37 
	#__TBB_˛_¥e„tch
(
p
Ë
	`_mm_¥e„tch
((c⁄° *Ì, 
_MM_HINT_T1
)

	)

38 
	#__TBB_˛_evi˘
(
p
Ë
	`_mm_˛evi˘
’, 
_MM_HINT_T1
)

	)

42 
	#__TBB_fuŒ_mem‹y_„n˚
(Ë
__asm__
 
	`__vﬁ©ûe__
("lock;ádd»$0,(%%r•)":::"mem‹y")

	)

43 
	#__TBB_Pau£
(
x
Ë
	`_mm_dñay_32
(16*(x))

	)

44 
	#__TBB_STEALING_PAUSE
 1500/16

	)

45 
	~<sched.h
>

46 
	#__TBB_Yõld
(Ë
	`sched_yõld
()

	)

49 
	#__TBB_machöe_time_°amp
(Ë
	`_rdtsc
()

	)

50 
uöt64_t
 
	tmachöe_tsc_t
;

53 
	#__TBB_STEALING_ABORT_ON_CONTENTION
 1

	)

54 
	#__TBB_YIELD2P
 1

	)

55 
	#__TBB_HOARD_NONLOCAL_TASKS
 1

	)

57 #i‡! ( 
__FªeBSD__
 || 
__löux__
 )

58 #îr‹ 
I¡ñ
(
R
Ë
M™y
 
I¡egøãd
 
C‹e
 
Compûî
 
d€s
 
nŸ
 
deföe
 
__FªeBSD__
 
‹
 
__löux__
 
™ym‹e
. 
Check
 
the
 
__TBB_XXX_BROKEN
 
deföed
 
undî
 __FreeBSD__ or __linux__.

	@viper/concurrentqueue-src/benchmarks/tbb/machine/msvc_armv7.h

21 #i‡!
deföed
(
__TBB_machöe_H
Ë|| deföed(
__TBB_msvc_¨mv7_H
)

22 #îr‹ 
Do
 
nŸ
 #ö˛udê
this
 
öã∫Æ
 
fûe
 
dúe˘ly
; 
u£
 
public
 
TBB
 
hódîs
 
ö°ód
.

25 
	#__TBB_msvc_¨mv7_H


	)

27 
	~<öåö.h
>

28 
	~<Êﬂt.h
>

30 
	#__TBB_WORDSIZE
 4

	)

32 
	#__TBB_ENDIANNESS
 
__TBB_ENDIAN_UNSUPPORTED


	)

34 #i‡
deföed
(
TBB_WIN32_USE_CL_BUILTINS
)

36 #¥agm®
öåösic
(
_RódWrôeB¨rõr
)

37 #¥agm®
öåösic
(
_mm_m„n˚
)

38 
	#__TBB_compûî_„n˚
(Ë
	`_RódWrôeB¨rõr
()

	)

39 
	#__TBB_fuŒ_mem‹y_„n˚
(Ë
	`_mm_m„n˚
()

	)

40 
	#__TBB_c⁄åﬁ_c⁄si°ícy_hñ≥r
(Ë
	`__TBB_compûî_„n˚
()

	)

41 
	#__TBB_acquúe_c⁄si°ícy_hñ≥r
(Ë
	`__TBB_compûî_„n˚
()

	)

42 
	#__TBB_ªÀa£_c⁄si°ícy_hñ≥r
(Ë
	`__TBB_compûî_„n˚
()

	)

46 
	#__TBB_compûî_„n˚
(Ë
	`__dmb
(
_ARM_BARRIER_SY
)

	)

47 
	#__TBB_fuŒ_mem‹y_„n˚
(Ë
	`__dmb
(
_ARM_BARRIER_SY
)

	)

48 
	#__TBB_c⁄åﬁ_c⁄si°ícy_hñ≥r
(Ë
	`__TBB_compûî_„n˚
()

	)

49 
	#__TBB_acquúe_c⁄si°ícy_hñ≥r
(Ë
	`__TBB_fuŒ_mem‹y_„n˚
()

	)

50 
	#__TBB_ªÀa£_c⁄si°ícy_hñ≥r
(Ë
	`__TBB_fuŒ_mem‹y_„n˚
()

	)

65 
	#__TBB_MACHINE_DEFINE_ATOMICS_CMPSWP
(
S
,
T
,
F
) \

66 
ölöe
 
T
 
__TBB_machöe_cmpswp
##
	`S
–vﬁ©ûê*
±r
, T 
vÆue
, T 
com∑ønd
 ) { \

67  
_I¡îlockedCom∑ªExch™ge
##
	`F
(
ªöãΩªt_ˇ°
<vﬁ©ûê
T
 *>(
±r
),
vÆue
,
com∑ønd
); \

69 

	)

70 
	#__TBB_MACHINE_DEFINE_ATOMICS_FETCHADD
(
S
,
T
,
F
) \

71 
ölöe
 
T
 
__TBB_machöe_„tchadd
##
	`S
–vﬁ©ûê*
±r
, T 
vÆue
 ) { \

72  
_I¡îlockedExch™geAdd
##
	`F
(
ªöãΩªt_ˇ°
<vﬁ©ûê
T
 *>(
±r
),
vÆue
); \

74 

	)

75 
	$__TBB_MACHINE_DEFINE_ATOMICS_CMPSWP
(1,,8)

76 
	$__TBB_MACHINE_DEFINE_ATOMICS_CMPSWP
(2,,16)

77 
	$__TBB_MACHINE_DEFINE_ATOMICS_CMPSWP
(4,,)

78 
	$__TBB_MACHINE_DEFINE_ATOMICS_CMPSWP
(8,
__öt64
,64)

79 
	$__TBB_MACHINE_DEFINE_ATOMICS_FETCHADD
(4,,)

80 #i‡
	`deföed
(
TBB_WIN32_USE_CL_BUILTINS
)

82 
	#__TBB_64BIT_ATOMICS
 0

	)

84 
	$__TBB_MACHINE_DEFINE_ATOMICS_FETCHADD
(8,
__öt64
,64)

87 
ölöe
 
	$__TBB_machöe_∑u£
 (
öt32_t
 
dñay
 )

89 
dñay
>0)

91 
	`__TBB_compûî_„n˚
();

92 
dñay
--;

94 
	}
}

97 
	#__TBB_CPU_CTL_ENV_PRESENT
 1

	)

99 
«me•a˚
 
	gtbb
 {

100 
«me•a˚
 
	göã∫Æ
 {

102 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
size_t
 
	gS
>

103 
	smachöe_lﬂd_°‹e_ªœxed
 {

104 
ölöe
 
T
 
lﬂd
 ( c⁄° vﬁ©ûêT& 
loˇti⁄
 ) {

105 c⁄° 
T
 
	gvÆue
 = 
loˇti⁄
;

111 
__TBB_acquúe_c⁄si°ícy_hñ≥r
();

112  
	gvÆue
;

115 
ölöe
 
°‹e
 ( vﬁ©ûê
T
& 
loˇti⁄
, T 
vÆue
 ) {

116 
	gloˇti⁄
 = 
vÆue
;

120 ˛as†
	c˝u_˘l_ív
 {

121 
	g¥iv©e
:

122 
my_˘l
;

123 
	gpublic
:

124 
boﬁ
 
›î©‹
!=–c⁄° 
˝u_˘l_ív
& 
˘l
 ) c⁄° {  
my_˘l
 != ctl.my_ctl; }

125 
gë_ív
(Ë{ 
	gmy_˘l
 = 
_c⁄åﬁ87
(0, 0); }

126 
£t_ív
(Ëc⁄° { 
_c⁄åﬁ87
–
my_˘l
, ~0U ); }

133 
	#__TBB_Com∑ªAndSw≠4
(
P
,
V
,
C
Ë
	`__TBB_machöe_cmpswp4
(P,V,C)

	)

134 
	#__TBB_Com∑ªAndSw≠8
(
P
,
V
,
C
Ë
	`__TBB_machöe_cmpswp8
(P,V,C)

	)

135 
	#__TBB_Pau£
(
V
Ë
	`__TBB_machöe_∑u£
(V)

	)

138 
	#__TBB_USE_FETCHSTORE_AS_FULL_FENCED_STORE
 1

	)

139 
	#__TBB_USE_GENERIC_HALF_FENCED_LOAD_STORE
 1

	)

140 
	#__TBB_USE_GENERIC_PART_WORD_FETCH_ADD
 1

	)

141 
	#__TBB_USE_GENERIC_PART_WORD_FETCH_STORE
 1

	)

142 
	#__TBB_USE_GENERIC_FETCH_STORE
 1

	)

143 
	#__TBB_USE_GENERIC_DWORD_LOAD_STORE
 1

	)

144 
	#__TBB_USE_GENERIC_SEQUENTIAL_CONSISTENCY_LOAD_STORE
 1

	)

146 #i‡
deföed
(
TBB_WIN32_USE_CL_BUILTINS
)

147 #i‡!
__TBB_WIN8UI_SUPPORT


148 "C" 
	$__de˛•ec
(
dŒimp‹t
Ë
__°dˇŒ
 
	`SwôchToThªad
( );

149 
	#__TBB_Yõld
(Ë
	`SwôchToThªad
()

	)

151 
	~<thªad
>

152 
	#__TBB_Yõld
(Ë
°d
::
this_thªad
::
	`yõld
()

	)

155 
	#__TBB_Yõld
(Ë
	`__yõld
()

	)

159 
	#__TBB_AtomicOR
(
P
,
V
Ë
	`__TBB_machöe_OR
(P,V)

	)

160 
	#__TBB_AtomicAND
(
P
,
V
Ë
	`__TBB_machöe_AND
(P,V)

	)

162 
ãm∂©e
 <
ty≥«me
 
T1
,ty≥«mê
T2
>

163 
ölöe
 
	$__TBB_machöe_OR
–
T1
 *
›î™d
, 
T2
 
addíd
 ) {

164 
	`_I¡îlockedOr
((vﬁ©ûê*)
›î™d
, ()
addíd
);

165 
	}
}

167 
	gãm∂©e
 <
ty≥«me
 
	gT1
,ty≥«mê
	gT2
>

168 
ölöe
 
	$__TBB_machöe_AND
–
T1
 *
›î™d
, 
T2
 
addíd
 ) {

169 
	`_I¡îlockedAnd
((vﬁ©ûê*)
›î™d
, ()
addíd
);

170 
	}
}

	@viper/concurrentqueue-src/benchmarks/tbb/machine/msvc_ia32_common.h

21 #i‚de‡
__TBB_machöe_msvc_ü32_comm⁄_H


22 
	#__TBB_machöe_msvc_ü32_comm⁄_H


	)

24 
	~<öåö.h
>

27 #i‡ !
_M_X64
 || 
__INTEL_COMPILER


28 
	#__TBB_X86_MSVC_INLINE_ASM_AVAILABLE
 1

	)

30 #i‡
_M_X64


31 
	#__TBB_r
(
ªg_«me
Ë
r
##
	)
reg_name

33 
	#__TBB_r
(
ªg_«me
Ë
e
##
	)
reg_name

37 
	#__TBB_X86_MSVC_INLINE_ASM_AVAILABLE
 0

	)

40 
	#__TBB_NO_X86_MSVC_INLINE_ASM_MSG
 "Thêcompûî beög u£d i†nŸ suµ‹ãd (outd©ed?)"

	)

42 #i‡(
_MSC_VER
 >1300Ë|| (
__INTEL_COMPILER
)

43 
	#__TBB_PAUSE_USE_INTRINSIC
 1

	)

44 #¥agm®
öåösic
(
_mm_∑u£
)

45 
«me•a˚
 
	gtbb
 {Çame•a˚ 
	göã∫Æ
 {Çame•a˚ 
	göåösics
 {Çame•a˚ 
	gmsvc
 {

46 
ölöe
 
__TBB_machöe_∑u£
 (
uöçå_t
 
dñay
 ) {

47 ;
	gdñay
>0; --delay )

48 
_mm_∑u£
();

52 #i‡!
__TBB_X86_MSVC_INLINE_ASM_AVAILABLE


53 #îr‹ 
__TBB_NO_X86_MSVC_INLINE_ASM_MSG


56 
«me•a˚
 
	gtbb
 {Çame•a˚ 
	göã∫Æ
 {Çame•a˚ 
	gölöe_asm
 {Çame•a˚ 
	gmsvc
 {

57 
ölöe
 
__TBB_machöe_∑u£
 (
uöçå_t
 
dñay
 ) {

58 
	g_asm


60 
mov
 
__TBB_r
(
ax
), 
dñay


61 
	g__TBB_L1
:

62 
∑u£


63 
add
 
__TBB_r
(
ax
), -1

64 
j√
 
	g__TBB_L1


71 
ölöe
 
	$__TBB_machöe_∑u£
 (
uöçå_t
 
dñay
 ){

72 #i‡
__TBB_PAUSE_USE_INTRINSIC


73 
tbb
::
öã∫Æ
::
öåösics
::
msvc
::
	`__TBB_machöe_∑u£
(
dñay
);

75 
tbb
::
öã∫Æ
::
ölöe_asm
::
msvc
::
	`__TBB_machöe_∑u£
(
dñay
);

77 
	}
}

80 #i‡(
_MSC_VER
<1400Ë&& (!
_WIN64
Ë&& (
__TBB_X86_MSVC_INLINE_ASM_AVAILABLE
)

81 
ölöe
 * 
	$__TBB_machöe_gë_cuºít_ãb
 () {

82 * 
±eb
;

83 
__asm
 
mov
 
óx
, 
fs
:[0x18]

84 
__asm
 
mov
 
±eb
, 
óx


85  
±eb
;

86 
	}
}

89 #i‡–
_MSC_VER
>=1400 && !
deföed
(
__INTEL_COMPILER
) ) || (__INTEL_COMPILER>=1200)

92 
	#__TBB_LOG2_USE_BSR_INTRINSIC
 1

	)

93 #i‡
_M_X64


94 
	#__TBB_BSR_INTRINSIC
 
_BôSˇnRevî£64


	)

96 
	#__TBB_BSR_INTRINSIC
 
_BôSˇnRevî£


	)

98 #¥agm®
öåösic
(
__TBB_BSR_INTRINSIC
)

100 
«me•a˚
 
	gtbb
 {Çame•a˚ 
	göã∫Æ
 {Çame•a˚ 
	göåösics
 {Çame•a˚ 
	gmsvc
 {

101 
ölöe
 
uöçå_t
 
__TBB_machöe_lg
–uöçå_à
i
 ){

102 
	gj
;

103 
__TBB_BSR_INTRINSIC
–&
j
, 
i
 );

104  
	gj
;

108 #i‡!
__TBB_X86_MSVC_INLINE_ASM_AVAILABLE


109 #îr‹ 
__TBB_NO_X86_MSVC_INLINE_ASM_MSG


112 
«me•a˚
 
	gtbb
 {Çame•a˚ 
	göã∫Æ
 {Çame•a˚ 
	gölöe_asm
 {Çame•a˚ 
	gmsvc
 {

113 
ölöe
 
uöçå_t
 
__TBB_machöe_lg
–uöçå_à
i
 ){

114 
uöçå_t
 
	gj
;

115 
	g__asm


117 
b§
 
__TBB_r
(
ax
), 
i


118 
mov
 
	gj
, 
__TBB_r
(
ax
)

120  
	gj
;

125 
ölöe
 
öçå_t
 
	$__TBB_machöe_lg
–
uöçå_t
 
i
 ) {

126 #i‡
__TBB_LOG2_USE_BSR_INTRINSIC


127  
tbb
::
öã∫Æ
::
öåösics
::
msvc
::
	`__TBB_machöe_lg
(
i
);

129  
tbb
::
öã∫Æ
::
ölöe_asm
::
msvc
::
	`__TBB_machöe_lg
(
i
);

131 
	}
}

134 
	#__TBB_CPU_CTL_ENV_PRESENT
 1

	)

136 
«me•a˚
 
	gtbb
 {Çame•a˚ 
	göã∫Æ
 { 
˛ass
 
	g˝u_˘l_ív
; } }

137 #i‡
__TBB_X86_MSVC_INLINE_ASM_AVAILABLE


138 
ölöe
 
	$__TBB_gë_˝u_˘l_ív
 ( 
tbb
::
öã∫Æ
::
˝u_˘l_ív
* 
˘l
 ) {

139 
__asm
 {

140 
__asm
 
mov
 
	`__TBB_r
(
ax
), 
˘l


141 
__asm
 
°mxc§
 [
	`__TBB_r
(
ax
)]

142 
__asm
 
f°cw
 [
	`__TBB_r
(
ax
)+4]

144 
	}
}

145 
ölöe
 
	$__TBB_£t_˝u_˘l_ív
 ( c⁄° 
tbb
::
öã∫Æ
::
˝u_˘l_ív
* 
˘l
 ) {

146 
__asm
 {

147 
__asm
 
mov
 
	`__TBB_r
(
ax
), 
˘l


148 
__asm
 
ldmxc§
 [
	`__TBB_r
(
ax
)]

149 
__asm
 
Êdcw
 [
	`__TBB_r
(
ax
)+4]

151 
	}
}

154 
__TBB_EXPORTED_FUNC
 
__TBB_gë_˝u_˘l_ív
 ( 
tbb
::
öã∫Æ
::
˝u_˘l_ív
* );

155 
__TBB_EXPORTED_FUNC
 
__TBB_£t_˝u_˘l_ív
 ( c⁄° 
tbb
::
öã∫Æ
::
˝u_˘l_ív
* );

159 
«me•a˚
 
tbb
 {

160 
«me•a˚
 
öã∫Æ
 {

161 ˛as†
	c˝u_˘l_ív
 {

162 
¥iv©e
:

163 
mxc§
;

164 
x87cw
;

165 c⁄° 
MXCSR_CONTROL_MASK
 = ~0x3f;

166 
public
:

167 
boﬁ
 
›î©‹
!=–c⁄° 
˝u_˘l_ív
& 
˘l
 ) c⁄° {  
mxc§
 !˘l.mxc§ || 
x87cw
 != ctl.x87cw; }

168 
gë_ív
() {

169 
__TBB_gë_˝u_˘l_ív
–
this
 );

170 
mxc§
 &
MXCSR_CONTROL_MASK
;

172 
£t_ív
(Ëc⁄° { 
__TBB_£t_˝u_˘l_ív
–
this
 ); }

177 #i‡!
__TBB_WIN8UI_SUPPORT


178 "C" 
	$__de˛•ec
(
dŒimp‹t
Ë
__°dˇŒ
 
	`SwôchToThªad
( );

179 
	#__TBB_Yõld
(Ë
	`SwôchToThªad
()

	)

181 
	~<thªad
>

182 
	#__TBB_Yõld
(Ë
°d
::
this_thªad
::
	`yõld
()

	)

185 
	#__TBB_Pau£
(
V
Ë
	`__TBB_machöe_∑u£
(V)

	)

186 
	#__TBB_Log2
(
V
Ë
	`__TBB_machöe_lg
(V)

	)

188 #unde‡
__TBB_r


191 
__öt8
 
__TBB_EXPORTED_FUNC
 
	`__TBB_machöe_åy_lock_ñided
 (vﬁ©ûê* 
±r
);

192 
__TBB_EXPORTED_FUNC
 
	`__TBB_machöe_u∆ock_ñided
 (vﬁ©ûê* 
±r
);

195 #i‡
__TBB_PAUSE_USE_INTRINSIC


196 
ölöe
 
	`__TBB_machöe_åy_lock_ñided_ˇn˚l
(Ë{ 
	`_mm_∑u£
(); }

198 
ölöe
 
	`__TBB_machöe_åy_lock_ñided_ˇn˚l
(Ë{ 
_asm
 
∑u£
; }

201 #i‡
__TBB_TSX_INTRINSICS_PRESENT


202 
	#__TBB_machöe_is_ö_å™ß˘i⁄
 
_xã°


	)

203 
	#__TBB_machöe_begö_å™ß˘i⁄
 
_xbegö


	)

204 
	#__TBB_machöe_íd_å™ß˘i⁄
 
_xíd


	)

207 
	#__TBB_machöe_å™ß˘i⁄_c⁄Êi˘_ab‹t
(Ë
	`_xab‹t
(0xFF)

	)

209 
__öt8
 
__TBB_EXPORTED_FUNC
 
	`__TBB_machöe_is_ö_å™ß˘i⁄
();

210 
__öt32
 
__TBB_EXPORTED_FUNC
 
	`__TBB_machöe_begö_å™ß˘i⁄
();

211 
__TBB_EXPORTED_FUNC
 
	`__TBB_machöe_íd_å™ß˘i⁄
();

212 
__TBB_EXPORTED_FUNC
 
	`__TBB_machöe_å™ß˘i⁄_c⁄Êi˘_ab‹t
();

214 
	}
}

	@viper/concurrentqueue-src/benchmarks/tbb/machine/sunos_sparc.h

22 #i‡!
deföed
(
__TBB_machöe_H
Ë|| deföed(
__TBB_machöe_sunos_•¨c_H
)

23 #îr‹ 
Do
 
nŸ
 #ö˛udê
this
 
öã∫Æ
 
fûe
 
dúe˘ly
; 
u£
 
public
 
TBB
 
hódîs
 
ö°ód
.

26 
	#__TBB_machöe_sunos_•¨c_H


	)

28 
	~<°döt.h
>

29 
	~<uni°d.h
>

31 
	#__TBB_WORDSIZE
 8

	)

34 
	#__TBB_ENDIANNESS
 
__TBB_ENDIAN_BIG


	)

38 
	#__TBB_compûî_„n˚
(Ë
__asm__
 
	`__vﬁ©ûe__
 ("": : :"mem‹y")

	)

39 
	#__TBB_c⁄åﬁ_c⁄si°ícy_hñ≥r
(Ë
	`__TBB_compûî_„n˚
()

	)

40 
	#__TBB_acquúe_c⁄si°ícy_hñ≥r
(Ë
	`__TBB_compûî_„n˚
()

	)

41 
	#__TBB_ªÀa£_c⁄si°ícy_hñ≥r
(Ë
	`__TBB_compûî_„n˚
()

	)

42 
	#__TBB_fuŒ_mem‹y_„n˚
(Ë
__asm__
 
	`__vﬁ©ûe__
("memb¨ #LﬂdLﬂd|#LﬂdSt‹e|#St‹eSt‹e|#St‹eLﬂd": : : "mem‹y")

	)

55 
ölöe
 
öt32_t
 
	$__TBB_machöe_cmpswp4
(vﬁ©ûê*
±r
, 
öt32_t
 
vÆue
, i¡32_à
com∑ønd
 ){

56 
öt32_t
 
ªsu…
;

57 
__asm__
 
	`__vﬁ©ûe__
(

59 : "=m"(*(
öt32_t
 *)
±r
), "Ù"(
ªsu…
)

60 : "m"(*(
öt32_t
 *)
±r
), "1"(
vÆue
), "r"(
com∑ønd
), "r"(ptr)

62  
ªsu…
;

63 
	}
}

72 
ölöe
 
öt64_t
 
	$__TBB_machöe_cmpswp8
(vﬁ©ûê*
±r
, 
öt64_t
 
vÆue
, i¡64_à
com∑ønd
 ){

73 
öt64_t
 
ªsu…
;

74 
__asm__
 
	`__vﬁ©ûe__
(

76 : "=m"(*(
öt64_t
 *)
±r
), "Ù"(
ªsu…
)

77 : "m"(*(
öt64_t
 *)
±r
), "1"(
vÆue
), "r"(
com∑ønd
), "r"(ptr)

79  
ªsu…
;

80 
	}
}

92 
ölöe
 
öt32_t
 
	$__TBB_machöe_„tchadd4
(vﬁ©ûê*
±r
, 
öt32_t
 
addíd
){

93 
öt32_t
 
ªsu…
;

94 
__asm__
 
	`__vﬁ©ûe__
 (

100 : "=&r"(
ªsu…
), "=m"(*(
öt32_t
 *)
±r
)

101 : "r"(
±r
), "r"(*(
öt32_t
 *Ìå), "r"(
addíd
), "m"(*(int32_t *)ptr)

103  
ªsu…
;

104 
	}
}

112 
ölöe
 
öt64_t
 
	$__TBB_machöe_„tchadd8
(vﬁ©ûê*
±r
, 
öt64_t
 
addíd
){

113 
öt64_t
 
ªsu…
;

114 
__asm__
 
	`__vﬁ©ûe__
 (

120 : "=&r"(
ªsu…
), "=m"(*(
öt64_t
 *)
±r
)

121 : "r"(
±r
), "r"(*(
öt64_t
 *Ìå), "r"(
addíd
), "m"(*(int64_t *)ptr)

123  
ªsu…
;

124 
	}
}

130 
ölöe
 
öt64_t
 
	$__TBB_machöe_lg
–
uöt64_t
 
x
 ) {

131 
	`__TBB_ASSERT
(
x
, "__TBB_Log2(0) undefined");

132 
uöt64_t
 
cou¡
;

134 
x
 |= (x >> 1);

135 
x
 |= (x >> 2);

136 
x
 |= (x >> 4);

137 
x
 |= (x >> 8);

138 
x
 |= (x >> 16);

139 
x
 |= (x >> 32);

141 
	`__asm__
 ("p›¯%1, %0" : "Ù"(
cou¡
Ë: "r"(
x
) );

142  
cou¡
-1;

143 
	}
}

147 
ölöe
 
	$__TBB_machöe_‹
–vﬁ©ûê*
±r
, 
uöt64_t
 
vÆue
 ) {

148 
__asm__
 
	`__vﬁ©ûe__
 (

154 : "=m"(*(
öt64_t
 *)
±r
)

155 : "r"(
±r
), "r"(*(
öt64_t
 *Ìå), "r"(
vÆue
), "m"(*(int64_t *)ptr)

157 
	}
}

159 
ölöe
 
	$__TBB_machöe_™d
–vﬁ©ûê*
±r
, 
uöt64_t
 
vÆue
 ) {

160 
__asm__
 
	`__vﬁ©ûe__
 (

166 : "=m"(*(
öt64_t
 *)
±r
)

167 : "r"(
±r
), "r"(*(
öt64_t
 *Ìå), "r"(
vÆue
), "m"(*(int64_t *)ptr)

169 
	}
}

172 
ölöe
 
	$__TBB_machöe_∑u£
–
öt32_t
 
dñay
 ) {

174 
	}
}

179 
ölöe
 
boﬁ
 
	$__TBB_machöe_åylockbyã
(&
Êag
){

180 
ªsu…
;

181 
__asm__
 
	`__vﬁ©ûe__
 (

183 : "Ù"(
ªsu…
), "=m"(
Êag
)

184 : "r"(&
Êag
), "m"(flag)

186  
ªsu…
 == 0;

187 
	}
}

189 
	#__TBB_USE_GENERIC_PART_WORD_CAS
 1

	)

190 
	#__TBB_USE_GENERIC_PART_WORD_FETCH_ADD
 1

	)

191 
	#__TBB_USE_GENERIC_FETCH_STORE
 1

	)

192 
	#__TBB_USE_GENERIC_HALF_FENCED_LOAD_STORE
 1

	)

193 
	#__TBB_USE_GENERIC_RELAXED_LOAD_STORE
 1

	)

194 
	#__TBB_USE_GENERIC_SEQUENTIAL_CONSISTENCY_LOAD_STORE
 1

	)

196 
	#__TBB_AtomicOR
(
P
,
V
Ë
	`__TBB_machöe_‹
(P,V)

	)

197 
	#__TBB_AtomicAND
(
P
,
V
Ë
	`__TBB_machöe_™d
(P,V)

	)

200 
	#__TBB_Pau£
(
V
Ë
	`__TBB_machöe_∑u£
(V)

	)

201 
	#__TBB_Log2
(
V
Ë
	`__TBB_machöe_lg
(V)

	)

203 
	#__TBB_TryLockByã
(
P
Ë
	`__TBB_machöe_åylockbyã
(P)

	)

	@viper/concurrentqueue-src/benchmarks/tbb/machine/windows_api.h

21 #i‚de‡
__TBB_machöe_wödows_≠i_H


22 
	#__TBB_machöe_wödows_≠i_H


	)

24 #i‡
_WIN32
 || 
_WIN64


26 #i‡
_XBOX


28 
	#NONET


	)

29 
	#NOD3D


	)

30 
	~<xé.h
>

34 
	~<wödows.h
>

38 #i‡
_WIN32_WINNT
 < 0x0600

41 #i‡!
deföed
(
WINBASEAPI
Ë|| (
_WIN32_WINNT
 < 0x0501 && 
_MSC_VER
 == 1400)

42 
	#__TBB_WINBASEAPI
 "C"

	)

44 
	#__TBB_WINBASEAPI
 
WINBASEAPI


	)

46 
__TBB_WINBASEAPI
 
BOOL
 
WINAPI
 
TryE¡îCrôiˇlSe˘i⁄
–
LPCRITICAL_SECTION
 );

47 
__TBB_WINBASEAPI
 
BOOL
 
WINAPI
 
InôülizeCrôiˇlSe˘i⁄AndSpöCou¡
–
LPCRITICAL_SECTION
, 
DWORD
 );

49 
	#InôülizeCrôiˇlSe˘i⁄Ex
 
ölöeInôülizeCrôiˇlSe˘i⁄Ex


	)

50 
	#Cª©eSem≠h‹eEx
 
ölöeCª©eSem≠h‹eEx


	)

51 
	#Cª©eEvítEx
 
ölöeCª©eEvítEx


	)

52 
ölöe
 
BOOL
 
WINAPI
 
	$ölöeInôülizeCrôiˇlSe˘i⁄Ex
–
LPCRITICAL_SECTION
 
ÕCrôiˇlSe˘i⁄
, 
DWORD
 
dwSpöCou¡
, DWORD )

54  
	`InôülizeCrôiˇlSe˘i⁄AndSpöCou¡
–
ÕCrôiˇlSe˘i⁄
, 
dwSpöCou¡
 );

55 
	}
}

56 
ölöe
 
HANDLE
 
WINAPI
 
	$ölöeCª©eSem≠h‹eEx
–
LPSECURITY_ATTRIBUTES
 
ÕSem≠h‹eAâribuãs
, 
LONG
 
lInôülCou¡
, LONG 
lMaximumCou¡
, 
LPCTSTR
 
ÕName
, 
DWORD
, DWORD )

58  
	`Cª©eSem≠h‹e
–
ÕSem≠h‹eAâribuãs
, 
lInôülCou¡
, 
lMaximumCou¡
, 
ÕName
 );

59 
	}
}

60 
ölöe
 
HANDLE
 
WINAPI
 
	$ölöeCª©eEvítEx
–
LPSECURITY_ATTRIBUTES
 
ÕEvítAâribuãs
, 
LPCTSTR
 
ÕName
, 
DWORD
 
dwFœgs
, DWORD )

62 
BOOL
 
m™uÆ_ª£t
 = 
dwFœgs
&0x00000001 ? 
TRUE
 : 
FALSE
;

63 
BOOL
 
öôül_£t
 = 
dwFœgs
&0x00000002 ? 
TRUE
 : 
FALSE
;

64  
	`Cª©eEvít
–
ÕEvítAâribuãs
, 
m™uÆ_ª£t
, 
öôül_£t
, 
ÕName
 );

65 
	}
}

68 #i‡
deföed
(
RTL_SRWLOCK_INIT
)

69 #i‚de‡
__TBB_USE_SRWLOCK


71 
	#__TBB_USE_SRWLOCK
 0

	)

76 #îr‹ 
tbb
/
machöe
/
wödows_≠i
.
h
 
should
 
⁄ly
 
be
 
u£d
 
Wödows
 
ba£d
 
∂©f‹ms


	@viper/concurrentqueue-src/benchmarks/tbb/machine/windows_ia32.h

21 #i‡!
deföed
(
__TBB_machöe_H
Ë|| deföed(
__TBB_machöe_wödows_ü32_H
)

22 #îr‹ 
Do
 
nŸ
 #ö˛udê
this
 
öã∫Æ
 
fûe
 
dúe˘ly
; 
u£
 
public
 
TBB
 
hódîs
 
ö°ód
.

25 
	#__TBB_machöe_wödows_ü32_H


	)

27 
	~"msvc_ü32_comm⁄.h
"

29 
	#__TBB_WORDSIZE
 4

	)

30 
	#__TBB_ENDIANNESS
 
__TBB_ENDIAN_LITTLE


	)

32 #i‡
__INTEL_COMPILER
 && (__INTEL_COMPILER < 1100)

33 
	#__TBB_compûî_„n˚
(Ë
__asm
 { __asm 
n›
 }

	)

34 
	#__TBB_fuŒ_mem‹y_„n˚
(Ë
__asm
 { __asm 
m„n˚
 }

	)

35 #ñi‡
_MSC_VER
 >1300 || 
__INTEL_COMPILER


36 #¥agm®
öåösic
(
_RódWrôeB¨rõr
)

37 #¥agm®
öåösic
(
_mm_m„n˚
)

38 
	#__TBB_compûî_„n˚
(Ë
	`_RódWrôeB¨rõr
()

	)

39 
	#__TBB_fuŒ_mem‹y_„n˚
(Ë
	`_mm_m„n˚
()

	)

41 #îr‹ 
Unsuµ‹ãd
 
compûî
 - 
√ed
 
to
 
deföe
 
__TBB_
{
c⁄åﬁ
,
acquúe
,
ªÀa£
}
_c⁄si°ícy_hñ≥r
Åÿ
suµ‹t
 
ô


44 
	#__TBB_c⁄åﬁ_c⁄si°ícy_hñ≥r
(Ë
	`__TBB_compûî_„n˚
()

	)

45 
	#__TBB_acquúe_c⁄si°ícy_hñ≥r
(Ë
	`__TBB_compûî_„n˚
()

	)

46 
	#__TBB_ªÀa£_c⁄si°ícy_hñ≥r
(Ë
	`__TBB_compûî_„n˚
()

	)

48 #i‡
deföed
(
_MSC_VER
Ë&& !deföed(
__INTEL_COMPILER
)

50 #¥agm®
w¨nög
 (
push
)

51 #¥agm®
w¨nög
 (
dißbÀ
: 4244 4267)

55 
__öt64
 
__TBB_EXPORTED_FUNC
 
__TBB_machöe_cmpswp8
 (vﬁ©ûê*
±r
, __öt64 
vÆue
, __öt64 
com∑ønd
 );

56 
__öt64
 
__TBB_EXPORTED_FUNC
 
__TBB_machöe_„tchadd8
 (vﬁ©ûê*
±r
, __öt64 
addíd
 );

57 
__öt64
 
__TBB_EXPORTED_FUNC
 
__TBB_machöe_„tch°‹e8
 (vﬁ©ûê*
±r
, __öt64 
vÆue
 );

58 
__TBB_EXPORTED_FUNC
 
__TBB_machöe_°‹e8
 (vﬁ©ûê*
±r
, 
__öt64
 
vÆue
 );

59 
__öt64
 
__TBB_EXPORTED_FUNC
 
__TBB_machöe_lﬂd8
 (c⁄° vﬁ©ûê*
±r
);

63 
	#__TBB_MACHINE_DEFINE_ATOMICS
(
S
,
T
,
U
,
A
,
C
) \

64 
ölöe
 
T
 
__TBB_machöe_cmpswp
##
	`S
 ( vﬁ©ûê* 
±r
, 
U
 
vÆue
, U 
com∑ønd
 ) { \

65 
T
 
ªsu…
; \

66 vﬁ©ûê
T
 *
p
 = (T *)
±r
; \

67 
__asm
 \

69 
__asm
 
mov
 
edx
, 
p
 \

70 
__asm
 
mov
 
C
 , 
vÆue
 \

71 
__asm
 
mov
 
A
 , 
com∑ønd
 \

72 
__asm
 
lock
 
cmpxchg
 [
edx
], 
C
 \

73 
__asm
 
mov
 
ªsu…
, 
A
 \

75  
ªsu…
; \

78 
ölöe
 
T
 
__TBB_machöe_„tchadd
##
	`S
 ( vﬁ©ûê* 
±r
, 
U
 
addíd
 ) { \

79 
T
 
ªsu…
; \

80 vﬁ©ûê
T
 *
p
 = (T *)
±r
; \

81 
__asm
 \

83 
__asm
 
mov
 
edx
, 
p
 \

84 
__asm
 
mov
 
A
, 
addíd
 \

85 
__asm
 
lock
 
xadd
 [
edx
], 
A
 \

86 
__asm
 
mov
 
ªsu…
, 
A
 \

88  
ªsu…
; \

91 
ölöe
 
T
 
__TBB_machöe_„tch°‹e
##
	`S
 ( vﬁ©ûê* 
±r
, 
U
 
vÆue
 ) { \

92 
T
 
ªsu…
; \

93 vﬁ©ûê
T
 *
p
 = (T *)
±r
; \

94 
__asm
 \

96 
__asm
 
mov
 
edx
, 
p
 \

97 
__asm
 
mov
 
A
, 
vÆue
 \

98 
__asm
 
lock
 
xchg
 [
edx
], 
A
 \

99 
__asm
 
mov
 
ªsu…
, 
A
 \

101  
ªsu…
; \

102 }

	)

105 
	$__TBB_MACHINE_DEFINE_ATOMICS
(1, 
__öt8
, __öt8, 
Æ
, 
˛
)

106 
	$__TBB_MACHINE_DEFINE_ATOMICS
(2, 
__öt16
, __öt16, 
ax
, 
cx
)

107 
	$__TBB_MACHINE_DEFINE_ATOMICS
(4, 
±rdiff_t
,Öådiff_t, 
óx
, 
ecx
)

109 #unde‡
__TBB_MACHINE_DEFINE_ATOMICS


111 
ölöe
 
	$__TBB_machöe_OR
–vﬁ©ûê*
›î™d
, 
__öt32
 
addíd
 ) {

112 
__asm


114 
mov
 
óx
, 
addíd


115 
mov
 
edx
, [
›î™d
]

116 
lock
 
‹
 [
edx
], 
óx


118 
	}
}

120 
ölöe
 
	$__TBB_machöe_AND
–vﬁ©ûê*
›î™d
, 
__öt32
 
addíd
 ) {

121 
__asm


123 
mov
 
óx
, 
addíd


124 
mov
 
edx
, [
›î™d
]

125 
lock
 
™d
 [
edx
], 
óx


127 
	}
}

129 
	#__TBB_AtomicOR
(
P
,
V
Ë
	`__TBB_machöe_OR
(P,V)

	)

130 
	#__TBB_AtomicAND
(
P
,
V
Ë
	`__TBB_machöe_AND
(P,V)

	)

135 
	#__TBB_USE_FETCHSTORE_AS_FULL_FENCED_STORE
 1

	)

136 
	#__TBB_USE_GENERIC_HALF_FENCED_LOAD_STORE
 1

	)

137 
	#__TBB_USE_GENERIC_RELAXED_LOAD_STORE
 1

	)

138 
	#__TBB_USE_GENERIC_SEQUENTIAL_CONSISTENCY_LOAD_STORE
 1

	)

141 #i‡
deföed
(
_MSC_VER
Ë&& !deföed(
__INTEL_COMPILER
)

142 #¥agm®
w¨nög
 (
p›
)

	@viper/concurrentqueue-src/benchmarks/tbb/machine/windows_intel64.h

21 #i‡!
deföed
(
__TBB_machöe_H
Ë|| deföed(
__TBB_machöe_wödows_öãl64_H
)

22 #îr‹ 
Do
 
nŸ
 #ö˛udê
this
 
öã∫Æ
 
fûe
 
dúe˘ly
; 
u£
 
public
 
TBB
 
hódîs
 
ö°ód
.

25 
	#__TBB_machöe_wödows_öãl64_H


	)

27 
	#__TBB_WORDSIZE
 8

	)

28 
	#__TBB_ENDIANNESS
 
__TBB_ENDIAN_LITTLE


	)

30 
	~<öåö.h
>

31 
	~"msvc_ü32_comm⁄.h
"

34 #i‡!
__INTEL_COMPILER


35 #¥agm®
öåösic
(
_I¡îlockedOr64
)

36 #¥agm®
öåösic
(
_I¡îlockedAnd64
)

37 #¥agm®
öåösic
(
_I¡îlockedCom∑ªExch™ge
)

38 #¥agm®
öåösic
(
_I¡îlockedCom∑ªExch™ge64
)

39 #¥agm®
öåösic
(
_I¡îlockedExch™geAdd
)

40 #¥agm®
öåösic
(
_I¡îlockedExch™geAdd64
)

41 #¥agm®
öåösic
(
_I¡îlockedExch™ge
)

42 #¥agm®
öåösic
(
_I¡îlockedExch™ge64
)

45 #i‡
__INTEL_COMPILER
 && (__INTEL_COMPILER < 1100)

46 
	#__TBB_compûî_„n˚
(Ë
__asm
 { __asm 
n›
 }

	)

47 
	#__TBB_fuŒ_mem‹y_„n˚
(Ë
__asm
 { __asm 
m„n˚
 }

	)

48 #ñi‡
_MSC_VER
 >1300 || 
__INTEL_COMPILER


49 #¥agm®
öåösic
(
_RódWrôeB¨rõr
)

50 #¥agm®
öåösic
(
_mm_m„n˚
)

51 
	#__TBB_compûî_„n˚
(Ë
	`_RódWrôeB¨rõr
()

	)

52 
	#__TBB_fuŒ_mem‹y_„n˚
(Ë
	`_mm_m„n˚
()

	)

55 
	#__TBB_c⁄åﬁ_c⁄si°ícy_hñ≥r
(Ë
	`__TBB_compûî_„n˚
()

	)

56 
	#__TBB_acquúe_c⁄si°ícy_hñ≥r
(Ë
	`__TBB_compûî_„n˚
()

	)

57 
	#__TBB_ªÀa£_c⁄si°ícy_hñ≥r
(Ë
	`__TBB_compûî_„n˚
()

	)

62 
__öt8
 
__TBB_EXPORTED_FUNC
 
__TBB_machöe_cmpswp1
 (vﬁ©ûê*
±r
, __öt8 
vÆue
, __öt8 
com∑ønd
 );

63 
__öt8
 
__TBB_EXPORTED_FUNC
 
__TBB_machöe_„tchadd1
 (vﬁ©ûê*
±r
, __öt8 
addíd
 );

64 
__öt8
 
__TBB_EXPORTED_FUNC
 
__TBB_machöe_„tch°‹e1
 (vﬁ©ûê*
±r
, __öt8 
vÆue
 );

65 
__öt16
 
__TBB_EXPORTED_FUNC
 
__TBB_machöe_cmpswp2
 (vﬁ©ûê*
±r
, __öt16 
vÆue
, __öt16 
com∑ønd
 );

66 
__öt16
 
__TBB_EXPORTED_FUNC
 
__TBB_machöe_„tchadd2
 (vﬁ©ûê*
±r
, __öt16 
addíd
 );

67 
__öt16
 
__TBB_EXPORTED_FUNC
 
__TBB_machöe_„tch°‹e2
 (vﬁ©ûê*
±r
, __öt16 
vÆue
 );

70 
ölöe
 
	$__TBB_machöe_cmpswp4
 (vﬁ©ûê*
±r
, 
__öt32
 
vÆue
, __öt32 
com∑ønd
 ) {

71  
	`_I¡îlockedCom∑ªExch™ge
–(*)
±r
, 
vÆue
, 
com∑ønd
 );

72 
	}
}

73 
ölöe
 
	$__TBB_machöe_„tchadd4
 (vﬁ©ûê*
±r
, 
__öt32
 
addíd
 ) {

74  
	`_I¡îlockedExch™geAdd
–(*)
±r
, 
addíd
 );

75 
	}
}

76 
ölöe
 
	$__TBB_machöe_„tch°‹e4
 (vﬁ©ûê*
±r
, 
__öt32
 
vÆue
 ) {

77  
	`_I¡îlockedExch™ge
–(*)
±r
, 
vÆue
 );

78 
	}
}

80 
ölöe
 
__öt64
 
	$__TBB_machöe_cmpswp8
 (vﬁ©ûê*
±r
, 
__öt64
 
vÆue
, __öt64 
com∑ønd
 ) {

81  
	`_I¡îlockedCom∑ªExch™ge64
–(
__öt64
*)
±r
, 
vÆue
, 
com∑ønd
 );

82 
	}
}

83 
ölöe
 
__öt64
 
	$__TBB_machöe_„tchadd8
 (vﬁ©ûê*
±r
, 
__öt64
 
addíd
 ) {

84  
	`_I¡îlockedExch™geAdd64
–(
__öt64
*)
±r
, 
addíd
 );

85 
	}
}

86 
ölöe
 
__öt64
 
	$__TBB_machöe_„tch°‹e8
 (vﬁ©ûê*
±r
, 
__öt64
 
vÆue
 ) {

87  
	`_I¡îlockedExch™ge64
–(
__öt64
*)
±r
, 
vÆue
 );

88 
	}
}

90 
	#__TBB_USE_FETCHSTORE_AS_FULL_FENCED_STORE
 1

	)

91 
	#__TBB_USE_GENERIC_HALF_FENCED_LOAD_STORE
 1

	)

92 
	#__TBB_USE_GENERIC_RELAXED_LOAD_STORE
 1

	)

93 
	#__TBB_USE_GENERIC_SEQUENTIAL_CONSISTENCY_LOAD_STORE
 1

	)

95 
ölöe
 
	$__TBB_machöe_OR
–vﬁ©ûê*
›î™d
, 
öçå_t
 
addíd
 ) {

96 
	`_I¡îlockedOr64
((
__öt64
*)
›î™d
, 
addíd
);

97 
	}
}

99 
ölöe
 
	$__TBB_machöe_AND
–vﬁ©ûê*
›î™d
, 
öçå_t
 
addíd
 ) {

100 
	`_I¡îlockedAnd64
((
__öt64
*)
›î™d
, 
addíd
);

101 
	}
}

103 
	#__TBB_AtomicOR
(
P
,
V
Ë
	`__TBB_machöe_OR
(P,V)

	)

104 
	#__TBB_AtomicAND
(
P
,
V
Ë
	`__TBB_machöe_AND
(P,V)

	)

	@viper/concurrentqueue-src/benchmarks/tbb/machine/xbox360_ppc.h

23 #i‡!
deföed
(
__TBB_machöe_H
Ë|| deföed(
__TBB_machöe_xbox360_µc_H
)

24 #îr‹ 
Do
 
nŸ
 #ö˛udê
this
 
öã∫Æ
 
fûe
 
dúe˘ly
; 
u£
 
public
 
TBB
 
hódîs
 
ö°ód
.

27 
	#__TBB_machöe_xbox360_µc_H


	)

29 
	#NONET


	)

30 
	#NOD3D


	)

31 
	~"xé.h
"

32 
	~"µcöåösics.h
"

34 #i‡
_MSC_VER
 >= 1300

35 "C" 
_Mem‹yB¨rõr
();

36 #¥agm®
öåösic
(
_Mem‹yB¨rõr
)

37 
	#__TBB_c⁄åﬁ_c⁄si°ícy_hñ≥r
(Ë
	`__isync
()

	)

38 
	#__TBB_acquúe_c⁄si°ícy_hñ≥r
(Ë
	`_Mem‹yB¨rõr
()

	)

39 
	#__TBB_ªÀa£_c⁄si°ícy_hñ≥r
(Ë
	`_Mem‹yB¨rõr
()

	)

42 
	#__TBB_fuŒ_mem‹y_„n˚
(Ë
	`__sync
()

	)

44 
	#__TBB_WORDSIZE
 4

	)

45 
	#__TBB_ENDIANNESS
 
__TBB_ENDIAN_BIG


	)

49 
ölöe
 
__öt32
 
	$__TBB_machöe_cmpswp4
(vﬁ©ûê*
±r
, 
__öt32
 
vÆue
, __öt32 
com∑ønd
 ) {

50 
	`__sync
();

51 
__öt32
 
ªsu…
 = 
	`I¡îlockedCom∑ªExch™ge
((vﬁ©ûê
LONG
*)
±r
, 
vÆue
, 
com∑ønd
);

52 
	`__isync
();

53  
ªsu…
;

54 
	}
}

56 
ölöe
 
__öt64
 
	$__TBB_machöe_cmpswp8
(vﬁ©ûê*
±r
, 
__öt64
 
vÆue
, __öt64 
com∑ønd
 )

58 
	`__sync
();

59 
__öt64
 
ªsu…
 = 
	`I¡îlockedCom∑ªExch™ge64
((vﬁ©ûê
LONG64
*)
±r
, 
vÆue
, 
com∑ønd
);

60 
	`__isync
();

61  
ªsu…
;

62 
	}
}

64 
	#__TBB_USE_GENERIC_PART_WORD_CAS
 1

	)

65 
	#__TBB_USE_GENERIC_FETCH_ADD
 1

	)

66 
	#__TBB_USE_GENERIC_FETCH_STORE
 1

	)

67 
	#__TBB_USE_GENERIC_HALF_FENCED_LOAD_STORE
 1

	)

68 
	#__TBB_USE_GENERIC_RELAXED_LOAD_STORE
 1

	)

69 
	#__TBB_USE_GENERIC_DWORD_LOAD_STORE
 1

	)

70 
	#__TBB_USE_GENERIC_SEQUENTIAL_CONSISTENCY_LOAD_STORE
 1

	)

72 #¥agm®
›timize
–"", 
off
 )

73 
ölöe
 
	$__TBB_machöe_∑u£
 (
__öt32
 
dñay
 )

75 
__öt32
 
i
=0; i<
dñay
; i++) {;};

76 
	}
}

77 #¥agm®
›timize
–"", 
⁄
 )

79 
	#__TBB_Yõld
(Ë
	`SÀï
(0)

	)

80 
	#__TBB_Pau£
(
V
Ë
	`__TBB_machöe_∑u£
(V)

	)

85 c⁄° 
	g__TBB_XBOX360_HARDWARE_THREAD_MASK
 = 0x0C;

87 
ölöe
 
	$__TBB_XBOX360_Dëe˘NumbîOfW‹kîs
()

89 
a
[
__TBB_XBOX360_HARDWARE_THREAD_MASK
];

90 
a
[0]=0;

92  ((
__TBB_XBOX360_HARDWARE_THREAD_MASK
 >> 0) & 1) +

93 ((
__TBB_XBOX360_HARDWARE_THREAD_MASK
 >> 1) & 1) +

94 ((
__TBB_XBOX360_HARDWARE_THREAD_MASK
 >> 2) & 1) +

95 ((
__TBB_XBOX360_HARDWARE_THREAD_MASK
 >> 3) & 1) +

96 ((
__TBB_XBOX360_HARDWARE_THREAD_MASK
 >> 4) & 1) +

97 ((
__TBB_XBOX360_HARDWARE_THREAD_MASK
 >> 5) & 1) + 1;

98 
	}
}

100 
ölöe
 
	$__TBB_XBOX360_GëH¨dw¨eThªadIndex
(
w‹kîThªadIndex
)

102 
w‹kîThªadIndex
 %
	`__TBB_XBOX360_Dëe˘NumbîOfW‹kîs
()-1;

103 
m
 = 
__TBB_XBOX360_HARDWARE_THREAD_MASK
;

104 
ödex
 = 0;

105 
skùcou¡
 = 
w‹kîThªadIndex
;

106 
åue
)

108 i‡((
m
 & 1)!=0)

110 i‡(
skùcou¡
==0) ;

111 
skùcou¡
--;

113 
m
 >>= 1;

114 
ödex
++;

116  
ödex
;

117 
	}
}

119 
	#__TBB_H¨dw¨eC⁄cuºícy
(Ë
	`__TBB_XBOX360_Dëe˘NumbîOfW‹kîs
()

	)

	@viper/concurrentqueue-src/benchmarks/tbb/mailbox.h

21 #i‚de‡
_TBB_maûbox_H


22 
	#_TBB_maûbox_H


	)

24 
	~"tbb/tbb_°ddef.h
"

25 
	~"tbb/ˇche_Æig√d_Æloˇt‹.h
"

27 
	~"scheduÀr_comm⁄.h
"

28 
	~"tbb/©omic.h
"

30 
«me•a˚
 
	gtbb
 {

31 
«me•a˚
 
	göã∫Æ
 {

33 
	gèsk_¥oxy
 : 
public
 
èsk
 {

34 c⁄° 
öçå_t
 
poﬁ_bô
 = 1<<0;

35 c⁄° 
öçå_t
 
	gmaûbox_bô
 = 1<<1;

36 c⁄° 
öçå_t
 
	gloˇti⁄_mask
 = 
poﬁ_bô
 | 
maûbox_bô
;

41 
öçå_t
 
	gèsk_™d_èg
;

44 
èsk_¥oxy
 *
__TBB_©omic
 
	g√xt_ö_maûbox
;

47 
maû_outbox
* 
	goutbox
;

50 
boﬁ
 
is_sh¨ed
 ( 
öçå_t
 
èt
 ) {

51  (
	gèt
 & 
	gloˇti⁄_mask
Ë=
loˇti⁄_mask
;

55 
èsk
* 
èsk_±r
 ( 
öçå_t
 
èt
 ) {

56  (
	gèsk
*)(
	gèt
 & ~
	gloˇti⁄_mask
);

60 
	gãm∂©e
<
öçå_t
 
	g‰om_bô
>

61 
ölöe
 
èsk
* 
exåa˘_èsk
 () {

62 
__TBB_ASSERT
–
¥efix
().
exåa_°©e
 =
es_èsk_¥oxy
, "NormalÅask misinterpretedásáÖroxy?" );

63 
öçå_t
 
	gèt
 = 
__TBB_lﬂd_wôh_acquúe
(
èsk_™d_èg
);

64 
__TBB_ASSERT
–
èt
 =
‰om_bô
 || (
is_sh¨ed
—©Ë&& 
èsk_±r
(tat)),

67 i‡–
	gèt
 !
‰om_bô
 ) {

68 c⁄° 
öçå_t
 
˛ó√r_bô
 = 
loˇti⁄_mask
 & ~
‰om_bô
;

72 i‡–
as_©omic
(
èsk_™d_èg
).
com∑ª_™d_sw≠
(
˛ó√r_bô
, 
èt
) ==Åat ) {

74  
èsk_±r
(
èt
);

78 
__TBB_ASSERT
–
èsk_™d_èg
 =
‰om_bô
, "EmptyÖroxy cannot containÇon-zeroÅaskÖointer" );

79 
pois⁄_poöãr
(
outbox
);

80 
pois⁄_poöãr
(
√xt_ö_maûbox
);

81 
pois⁄_vÆue
(
èsk_™d_èg
);

82  
	gNULL
;

87 ˛as†
	cu≈added_maû_outbox
 {

88 
	g¥Ÿe˘ed
:

89 
èsk_¥oxy
*
	t__TBB_©omic
 
	t¥oxy_±r
;

92 
¥oxy_±r
 
	gmy_fú°
;

95 
¥oxy_±r
* 
__TBB_©omic
 
	gmy_œ°
;

98 
boﬁ
 
	gmy_is_idÀ
;

103 
˛ass
 
	gmaû_outbox
 : 
∑dded
<
u≈added_maû_outbox
> {

105 
èsk_¥oxy
* 
öã∫Æ_p›
() {

106 
èsk_¥oxy
* c⁄° 
fú°
 = 
__TBB_lﬂd_ªœxed
(
my_fú°
);

107 if–!
	gfú°
 )

108  
	gNULL
;

109 
__TBB_c⁄åﬁ_c⁄si°ícy_hñ≥r
();

111 if–
èsk_¥oxy
* 
	g£c⁄d
 = 
fú°
->
√xt_ö_maûbox
 ) {

113 
my_fú°
 = 
£c⁄d
;

116 
	gmy_fú°
 = 
NULL
;

117 if–
as_©omic
(
my_œ°
).
com∑ª_™d_sw≠
(&
my_fú°
,&
fú°
->
√xt_ö_maûbox
) == &first->next_in_mailbox )

120 
__TBB_ASSERT
(!
fú°
->
√xt_ö_maûbox
,
NULL
);

124 
©omic_backoff
 
	gbackoff
;

125  !(
	g£c⁄d
 = 
fú°
->
√xt_ö_maûbox
ËË
backoff
.
∑u£
();

126 
	gmy_fú°
 = 
£c⁄d
;

129  
	gfú°
;

131 
	gpublic
:

132 
‰õnd
 
˛ass
 
maû_öbox
;

136 
push
–
èsk_¥oxy
& 
t
 ) {

137 
__TBB_ASSERT
(&
t
, 
NULL
);

138 
	gt
.
	g√xt_ö_maûbox
 = 
NULL
;

139 
¥oxy_±r
 * c⁄° 
	glök
 = (¥oxy_±∏*)
__TBB_FëchAndSt‹eW
(&
my_œ°
,(
öçå_t
)&
t
.
√xt_ö_maûbox
);

142 
__TBB_°‹e_ªœxed
(*
lök
, &
t
);

146 
boﬁ
 
em±y
() {

147  
__TBB_lﬂd_ªœxed
(
my_fú°
Ë=
NULL
;

154 
c⁄°ru˘
() {

155 
__TBB_ASSERT
–(*
this
)==
NFS_MaxLöeSize
, 
NULL
 );

156 
__TBB_ASSERT
–!
my_fú°
, 
NULL
 );

157 
__TBB_ASSERT
–!
my_œ°
, 
NULL
 );

158 
__TBB_ASSERT
–!
my_is_idÀ
, 
NULL
 );

159 
	gmy_œ°
=&
my_fú°
;

160 
suµªss_unu£d_w¨nög
(
∑d
);

164 
öçå_t
 
døö
() {

165 
öçå_t
 
	gk
 = 0;

167  ; 
èsk_¥oxy
* 
	gt
 = 
my_fú°
; ++
	gk
 ) {

168 
	gmy_fú°
 = 
t
->
√xt_ö_maûbox
;

169 
NFS_Fªe
((*)
t
 - 
èsk_¥efix_ª£rv©i⁄_size
);

171  
	gk
;

175 
boﬁ
 
ªcùõ¡_is_idÀ
() {

176  
	gmy_is_idÀ
;

181 ˛as†
	cmaû_öbox
 {

183 
maû_outbox
* 
	gmy_puâî
;

184 
	gpublic
:

186 
maû_öbox
(Ë: 
my_puâî
(
NULL
) {}

189 
©èch
–
maû_outbox
& 
puâî
 ) {

190 
__TBB_ASSERT
(!
my_puâî
,"alreadyáttached");

191 
	gmy_puâî
 = &
puâî
;

194 
dëach
() {

195 
__TBB_ASSERT
(
my_puâî
,"notáttached");

196 
	gmy_puâî
 = 
NULL
;

199 
èsk_¥oxy
* 
p›
() {

200  
	gmy_puâî
->
öã∫Æ_p›
();

203 
boﬁ
 
em±y
() {

204  
	gmy_puâî
->
em±y
();

208 
£t_is_idÀ
–
boﬁ
 
vÆue
 ) {

209 if–
	gmy_puâî
 ) {

210 
__TBB_ASSERT
–
my_puâî
->
my_is_idÀ
 || 
vÆue
, "attemptÅoÑedundantly mark mailboxásÇot idle" );

211 
	gmy_puâî
->
	gmy_is_idÀ
 = 
vÆue
;

215 
boﬁ
 
is_idÀ_°©e
 ( boﬁ 
vÆue
 ) const {

216  !
	gmy_puâî
 || my_puâî->
	gmy_is_idÀ
 =
vÆue
;

219 #i‡
DO_ITT_NOTIFY


221 * 
outbox
(Ëc⁄° { 
	gmy_puâî
;}

	@viper/concurrentqueue-src/benchmarks/tbb/market.cpp

21 
	~"tbb/tbb_°ddef.h
"

23 
	~"m¨kë.h
"

24 
	~"tbb_maö.h
"

25 
	~"govîn‹.h
"

26 
	~"scheduÀr.h
"

27 
	~"ôt_nŸify.h
"

29 
«me•a˚
 
	gtbb
 {

30 
«me•a˚
 
	göã∫Æ
 {

32 
	gm¨kë
::
ö£π_¨ía_öto_li°
 ( 
¨ía
& 
a
 ) {

33 #i‡
__TBB_TASK_PRIORITY


34 
¨ía_li°_ty≥
 &
¨ías
 = 
my_¥i‹ôy_Àvñs
[
a
.
my_t›_¥i‹ôy
].arenas;

35 
	g¨ía
 *&
	g√xt
 = 
my_¥i‹ôy_Àvñs
[
a
.
my_t›_¥i‹ôy
].
√xt_¨ía
;

37 
	g¨ía_li°_ty≥
 &
	g¨ías
 = 
my_¨ías
;

38 
	g¨ía
 *&
	g√xt
 = 
my_√xt_¨ía
;

40 
	g¨ías
.
push_‰⁄t
–
a
 );

41 i‡–
	g¨ías
.
size
() == 1 )

42 
√xt
 = &*
¨ías
.
begö
();

45 
	gm¨kë
::
ªmove_¨ía_‰om_li°
 ( 
¨ía
& 
a
 ) {

46 #i‡
__TBB_TASK_PRIORITY


47 
¨ía_li°_ty≥
 &
¨ías
 = 
my_¥i‹ôy_Àvñs
[
a
.
my_t›_¥i‹ôy
].arenas;

48 
	g¨ía
 *&
	g√xt
 = 
my_¥i‹ôy_Àvñs
[
a
.
my_t›_¥i‹ôy
].
√xt_¨ía
;

50 
	g¨ía_li°_ty≥
 &
	g¨ías
 = 
my_¨ías
;

51 
	g¨ía
 *&
	g√xt
 = 
my_√xt_¨ía
;

53 
	g¨ía_li°_ty≥
::
ôî©‹
 
ô
 = 
√xt
;

54 
__TBB_ASSERT
–
ô
 !
¨ías
.
íd
(), 
NULL
 );

55 i‡–
	g√xt
 =&
a
 ) {

56 i‡–++
ô
 =
¨ías
.
íd
(Ë&&áª«s.
size
() > 1 )

57 
ô
 = 
¨ías
.
begö
();

58 
	g√xt
 = &*
ô
;

60 
	g¨ías
.
ªmove
–
a
 );

67 
	gm¨kë
::
m¨kë
 ( 
max_num_w‹kîs
, 
size_t
 
°ack_size
 )

68 : 
my_ªf_cou¡
(1)

69 , 
my_°ack_size
(
°ack_size
)

70 , 
my_max_num_w‹kîs
(
max_num_w‹kîs
)

71 #i‡
__TBB_TASK_PRIORITY


72 , 
my_globÆ_t›_¥i‹ôy
(
n‹mÆized_n‹mÆ_¥i‹ôy
)

73 , 
my_globÆ_bŸtom_¥i‹ôy
(
n‹mÆized_n‹mÆ_¥i‹ôy
)

74 #i‡
__TBB_TRACK_PRIORITY_LEVEL_SATURATION


75 , 
my_lowe°_p›uœãd_Àvñ
(
n‹mÆized_n‹mÆ_¥i‹ôy
)

79 #i‡
__TBB_TASK_PRIORITY


80 
__TBB_ASSERT
–
my_globÆ_ªlﬂd_ïoch
 =0, 
NULL
 );

81 
	gmy_¥i‹ôy_Àvñs
[
n‹mÆized_n‹mÆ_¥i‹ôy
].
	gw‹kîs_avaûabÀ
 = 
max_num_w‹kîs
;

86 
	gmy_£rvî
 = 
govîn‹
::
¸óã_rml_£rvî
–*
this
 );

87 
__TBB_ASSERT
–
my_£rvî
, "FailedÅo create RML server" );

91 
	gm¨kë
& m¨kë::
globÆ_m¨kë
 ( 
max_num_w‹kîs
, 
size_t
 
°ack_size
 ) {

92 
	gglobÆ_m¨kë_muãx_ty≥
::
sc›ed_lock
 
lock
–
theM¨këMuãx
 );

93 
m¨kë
 *
	gm
 = 
theM¨kë
;

94 i‡–
	gm
 ) {

95 ++
	gm
->
	gmy_ªf_cou¡
;

96 i‡–
	gm
->
	gmy_°ack_size
 < 
	g°ack_size
 )

97 
ru¡ime_w¨nög
( "Newer masterÑequest forÜarger stack cannot be satisfied\n" );

100 
	gmax_num_w‹kîs
 = 
max
–
govîn‹
::
deÁu…_num_thªads
(Ë- 1, 
max_num_w‹kîs
 );

102 if–
	gmax_num_w‹kîs
==0 ) 
max_num_w‹kîs
 = 1;

104 
size_t
 
	gsize
 = (
m¨kë
);

105 #i‡
__TBB_TASK_GROUP_CONTEXT


106 
__TBB_ASSERT
–
__TBB_off£tof
(
m¨kë
, 
my_w‹kîs
Ë+ (
gíîic_scheduÀr
*) == (market),

108 
	gsize
 +(
gíîic_scheduÀr
*Ë* (
max_num_w‹kîs
 - 1);

110 
	g__TBB_InôOn˚
::
add_ªf
();

111 * 
	g°‹age
 = 
NFS_AŒoˇã
(1, 
size
, 
NULL
);

112 
mem£t
–
°‹age
, 0, 
size
 );

114 
	gm
 = 
√w
 (
°‹age
Ë
m¨kë
–
max_num_w‹kîs
, 
°ack_size
 );

115 
	gtheM¨kë
 = 
m
;

117  *
	gm
;

120 
	gm¨kë
::
de°roy
 () {

121 #i‡
__TBB_COUNT_TASK_NODES


122 i‡–
my_èsk_node_cou¡
 )

123 
ru¡ime_w¨nög
–"Lóked %ldÅask obje˘s\n", ()
my_èsk_node_cou¡
 );

125 
	gthis
->~
m¨kë
();

126 
NFS_Fªe
–
this
 );

127 
	g__TBB_InôOn˚
::
ªmove_ªf
();

130 
	gm¨kë
::
ªÀa£
 () {

131 
__TBB_ASSERT
–
theM¨kë
 =
this
, "Global market instance was destroyedÖrematurely?" );

132 
boﬁ
 
	gdo_ªÀa£
 = 
Ál£
;

134 
	gglobÆ_m¨kë_muãx_ty≥
::
sc›ed_lock
 
lock
(
theM¨këMuãx
);

135 i‡–--
	gmy_ªf_cou¡
 == 0 ) {

136 
do_ªÀa£
 = 
åue
;

137 
	gtheM¨kë
 = 
NULL
;

140 if–
	gdo_ªÀa£
 )

141 
	gmy_£rvî
->
ªque°_˛o£_c⁄√˘i⁄
();

144 
	gm¨kë
::
waô_w‹kîs
 () {

146 
__TBB_ASSERT
(
govîn‹
::
√edsWaôW‹kîs
(), 
NULL
);

148 
__TBB_lﬂd_wôh_acquúe
(
my_ªf_cou¡
) > 1)

149 
__TBB_Yõld
();

150 
__TBB_ASSERT
(1 =
my_ªf_cou¡
, 
NULL
);

151 
ªÀa£
();

154 
	g¨ía
& 
	gm¨kë
::
¸óã_¨ía
 ( 
max_num_w‹kîs
, 
size_t
 
°ack_size
 ) {

155 
	gm¨kë
 &
	gm
 = 
globÆ_m¨kë
–
max_num_w‹kîs
, 
°ack_size
 );

156 #i‡
__TBB_TASK_ARENA


159 
	g¨ía
& 
	ga
 = 
¨ía
::
Æloˇã_¨ía
–
m
, 
mö
(
max_num_w‹kîs
, m.
my_max_num_w‹kîs
+1) );

161 
	g¨ía
& 
	ga
 = 
¨ía
::
Æloˇã_¨ía
–
m
, 
mö
(
max_num_w‹kîs
, m.
my_max_num_w‹kîs
) );

164 
	g¨ías_li°_muãx_ty≥
::
sc›ed_lock
 
lock
(
m
.
my_¨ías_li°_muãx
);

165 
	gm
.
ö£π_¨ía_öto_li°
(
a
);

166  
	ga
;

170 
	gm¨kë
::
dëach_¨ía
 ( 
¨ía
& 
a
 ) {

171 
__TBB_ASSERT
–
theM¨kë
 =
this
, "Global market instance was destroyedÖrematurely?" );

172 #i‡
__TBB_TRACK_PRIORITY_LEVEL_SATURATION


173 
__TBB_ASSERT
–!
a
.
my_num_w‹kîs_¥e£¡
, 
NULL
 );

175 
__TBB_ASSERT
–!
a
.
my_¶Ÿs
[0].
my_scheduÀr
, 
NULL
 );

176 
ªmove_¨ía_‰om_li°
(
a
);

177 i‡–
	ga
.
	gmy_aba_ïoch
 =
my_¨ías_aba_ïoch
 )

178 ++
my_¨ías_aba_ïoch
;

181 
	gm¨kë
::
åy_de°roy_¨ía
 ( 
¨ía
* 
a
, 
uöçå_t
 
aba_ïoch
 ) {

182 
__TBB_ASSERT
 ( 
a
, 
NULL
 );

183 
	g¨ías_li°_muãx_ty≥
::
sc›ed_lock
 
lock
(
my_¨ías_li°_muãx
);

184 
as£π_m¨kë_vÆid
();

185 #i‡
__TBB_TASK_PRIORITY


186  
	gp
 = 
my_globÆ_t›_¥i‹ôy
;Ö >
my_globÆ_bŸtom_¥i‹ôy
; --p ) {

187 
	g¥i‹ôy_Àvñ_öfo
 &
	g∂
 = 
my_¥i‹ôy_Àvñs
[
p
];

188 
	g¨ía_li°_ty≥
 &
	gmy_¨ías
 = 
∂
.
¨ías
;

190 
	g¨ía_li°_ty≥
::
ôî©‹
 
ô
 = 
my_¨ías
.
begö
();

191  ; 
	gô
 !
my_¨ías
.
íd
(); ++it ) {

192 i‡–
	ga
 =&*
ô
 ) {

193 i‡–
ô
->
my_aba_ïoch
 =
aba_ïoch
 ) {

195 i‡–!
a
->
my_num_w‹kîs_ªque°ed
 && !a->
my_ª„ªn˚s
 ) {

196 
__TBB_ASSERT
–!
a
->
my_num_w‹kîs_ÆlŸãd
 && (a->
my_poﬁ_°©e
 =
¨ía
::
SNAPSHOT_EMPTY
 || !a->
my_max_num_w‹kîs
), "Inconsistentárena state" );

198 
dëach_¨ía
–*
a
 );

199 
	glock
.
ªÀa£
();

200 
	ga
->
‰ì_¨ía
();

206 #i‡
__TBB_TASK_PRIORITY


211 
	gm¨kë
::
åy_de°roy_¨ía
 ( 
m¨kë
* 
m
, 
¨ía
* 
a
, 
uöçå_t
 
aba_ïoch
, 
boﬁ
 
ma°î
 ) {

216 i‡–
	gm
 !
theM¨kë
 ) {

220 i‡–
	gma°î
 ) {

223 
	gglobÆ_m¨kë_muãx_ty≥
::
sc›ed_lock
 
lock
(
theM¨këMuãx
);

224 i‡–
	gm
 !
theM¨kë
 )

226 ++
	gm
->
	gmy_ªf_cou¡
;

228 
	gm
->
åy_de°roy_¨ía
–
a
, 
aba_ïoch
 );

229 i‡–
	gma°î
 )

230 
	gm
->
ªÀa£
();

234 
¨ía
* 
	gm¨kë
::
¨ía_ö_√ed
 ( 
¨ía_li°_ty≥
 &
¨ías
,áª« *&
√xt
 ) {

235 i‡–
	g¨ías
.
em±y
() )

236  
	gNULL
;

237 
	g¨ía_li°_ty≥
::
ôî©‹
 
ô
 = 
√xt
;

238 
__TBB_ASSERT
–
ô
 !
¨ías
.
íd
(), 
NULL
 );

240 
	g¨ía
& 
	ga
 = *
ô
;

241 i‡–++
	gô
 =
¨ías
.
íd
() )

242 
ô
 = 
¨ías
.
begö
();

243 i‡–
	ga
.
num_w‹kîs_a˘ive
(Ë<á.
	gmy_num_w‹kîs_ÆlŸãd
 ) {

244 
	ga
.
	gmy_ª„ªn˚s
 += 2;

245 #i‡
__TBB_TRACK_PRIORITY_LEVEL_SATURATION


246 ++
	ga
.
	gmy_num_w‹kîs_¥e£¡
;

247 ++
	gmy_¥i‹ôy_Àvñs
[
a
.
my_t›_¥i‹ôy
].
	gw‹kîs_¥e£¡
;

249 
as_©omic
(
√xt
Ë&*
ô
;

251  &
	ga
;

253 }  
	gô
 !
√xt
 );

254  
	gNULL
;

257 
	gm¨kë
::
upd©e_ÆlŸmít
 ( 
¨ía_li°_ty≥
& 
¨ías
, 
w‹kîs_dem™d
, 
max_w‹kîs
 ) {

258 
__TBB_ASSERT
–
w‹kîs_dem™d
, 
NULL
 );

259 
	gmax_w‹kîs
 = 
mö
(
w‹kîs_dem™d
, 
max_w‹kîs
);

260 
	gˇºy
 = 0;

261 #i‡
TBB_USE_ASSERT


262 
	gassig√d
 = 0;

264 
	g¨ía_li°_ty≥
::
ôî©‹
 
ô
 = 
¨ías
.
begö
();

265  ; 
	gô
 !
¨ías
.
íd
(); ++it ) {

266 
	g¨ía
& 
	ga
 = *
ô
;

267 i‡–
	ga
.
	gmy_num_w‹kîs_ªque°ed
 <= 0 ) {

268 
__TBB_ASSERT
–!
a
.
my_num_w‹kîs_ÆlŸãd
, 
NULL
 );

271 
	gtmp
 = 
a
.
my_num_w‹kîs_ªque°ed
 * 
max_w‹kîs
 + 
ˇºy
;

272 
	gÆlŸãd
 = 
tmp
 / 
w‹kîs_dem™d
;

273 
	gˇºy
 = 
tmp
 % 
w‹kîs_dem™d
;

275 
	ga
.
	gmy_num_w‹kîs_ÆlŸãd
 = 
mö
–
ÆlŸãd
, ()
a
.
my_max_num_w‹kîs
 );

276 #i‡
TBB_USE_ASSERT


277 
	gassig√d
 +
a
.
my_num_w‹kîs_ÆlŸãd
;

280 
__TBB_ASSERT
–
assig√d
 <
w‹kîs_dem™d
, 
NULL
 );

283 #i‡
__TBB_TASK_PRIORITY


284 
ölöe
 
	gm¨kë
::
upd©e_globÆ_t›_¥i‹ôy
 ( 
öçå_t
 
√wPri‹ôy
 ) {

285 
GATHER_STATISTIC
–++
govîn‹
::
loˇl_scheduÀr_if_öôülized
()->
my_cou¡îs
.
m¨kë_¥io_swôches
 );

286 
	gmy_globÆ_t›_¥i‹ôy
 = 
√wPri‹ôy
;

287 
	gmy_¥i‹ôy_Àvñs
[
√wPri‹ôy
].
	gw‹kîs_avaûabÀ
 = 
my_max_num_w‹kîs
;

288 
adv™˚_globÆ_ªlﬂd_ïoch
();

291 
ölöe
 
	gm¨kë
::
ª£t_globÆ_¥i‹ôy
 () {

292 
my_globÆ_bŸtom_¥i‹ôy
 = 
n‹mÆized_n‹mÆ_¥i‹ôy
;

293 
upd©e_globÆ_t›_¥i‹ôy
(
n‹mÆized_n‹mÆ_¥i‹ôy
);

294 #i‡
__TBB_TRACK_PRIORITY_LEVEL_SATURATION


295 
	gmy_lowe°_p›uœãd_Àvñ
 = 
n‹mÆized_n‹mÆ_¥i‹ôy
;

299 
¨ía
* 
	gm¨kë
::
¨ía_ö_√ed
 (áª«* 
¥ev_¨ía
 )

301 if–!
has_™y_dem™d
() )

302  
NULL
;

303 
	g¨ías_li°_muãx_ty≥
::
sc›ed_lock
 
lock
(
my_¨ías_li°_muãx
, 
Ál£
);

304 
as£π_m¨kë_vÆid
();

305 #i‡
__TBB_TRACK_PRIORITY_LEVEL_SATURATION


306 i‡–
	g¥ev_¨ía
 ) {

307 
	g¥i‹ôy_Àvñ_öfo
 &
	g∂
 = 
my_¥i‹ôy_Àvñs
[
¥ev_¨ía
->
my_t›_¥i‹ôy
];

308 --
	g¥ev_¨ía
->
	gmy_num_w‹kîs_¥e£¡
;

309 --
	g∂
.
	gw‹kîs_¥e£¡
;

310 i‡–!--
	g¥ev_¨ía
->
	gmy_ª„ªn˚s
 && !¥ev_¨ía->
	gmy_num_w‹kîs_ªque°ed
 ) {

311 
dëach_¨ía
–*
a
 );

312 
	glock
.
ªÀa£
();

313 
	ga
->
‰ì_¨ía
();

314 
	glock
.
acquúe
();

318 
suµªss_unu£d_w¨nög
(
¥ev_¨ía
);

320 
	gp
 = 
my_globÆ_t›_¥i‹ôy
;

321 
¨ía
 *
	ga
 = 
NULL
;

323 
	g¥i‹ôy_Àvñ_öfo
 &
	g∂
 = 
my_¥i‹ôy_Àvñs
[
p
];

324 #i‡
__TBB_TRACK_PRIORITY_LEVEL_SATURATION


325 
__TBB_ASSERT
–
p
 >
my_lowe°_p›uœãd_Àvñ
, 
NULL
 );

326 i‡–
	g∂
.
	gw‹kîs_¥e£¡
 >
∂
.
w‹kîs_ªque°ed
 )

329 
	ga
 = 
¨ía_ö_√ed
–
∂
.
¨ías
,Öl.
√xt_¨ía
 );

330 }  !
	ga
 && --
	gp
 >
my_globÆ_bŸtom_¥i‹ôy
 );

331  
	ga
;

334 
	gm¨kë
::
upd©e_ÆlŸmít
 ( 
öçå_t
 
highe°_af„˘ed_¥i‹ôy
 ) {

335 
öçå_t
 
i
 = 
highe°_af„˘ed_¥i‹ôy
;

336 
	gavaûabÀ
 = 
my_¥i‹ôy_Àvñs
[
i
].
w‹kîs_avaûabÀ
;

337 #i‡
__TBB_TRACK_PRIORITY_LEVEL_SATURATION


338 
	gmy_lowe°_p›uœãd_Àvñ
 = 
my_globÆ_bŸtom_¥i‹ôy
;

340  ; 
	gi
 >
my_globÆ_bŸtom_¥i‹ôy
; --i ) {

341 
	g¥i‹ôy_Àvñ_öfo
 &
	g∂
 = 
my_¥i‹ôy_Àvñs
[
i
];

342 
	g∂
.
	gw‹kîs_avaûabÀ
 = 
avaûabÀ
;

343 i‡–
	g∂
.
	gw‹kîs_ªque°ed
 ) {

344 
upd©e_ÆlŸmít
–
∂
.
¨ías
,Öl.
w‹kîs_ªque°ed
, 
avaûabÀ
 );

345 
	gavaûabÀ
 -
∂
.
w‹kîs_ªque°ed
;

346 i‡–
	gavaûabÀ
 < 0 ) {

347 
	gavaûabÀ
 = 0;

348 #i‡
__TBB_TRACK_PRIORITY_LEVEL_SATURATION


349 
	gmy_lowe°_p›uœãd_Àvñ
 = 
i
;

355 
__TBB_ASSERT
–
i
 <
my_globÆ_bŸtom_¥i‹ôy
 || !
avaûabÀ
, 
NULL
 );

356  --
	gi
; i >
my_globÆ_bŸtom_¥i‹ôy
; --i ) {

357 
	g¥i‹ôy_Àvñ_öfo
 &
	g∂
 = 
my_¥i‹ôy_Àvñs
[
i
];

358 
	g∂
.
	gw‹kîs_avaûabÀ
 = 0;

359 
	g¨ía_li°_ty≥
::
ôî©‹
 
ô
 = 
∂
.
¨ías
.
begö
();

360  ; 
	gô
 !
∂
.
¨ías
.
íd
(); ++it ) {

361 
__TBB_ASSERT
–
ô
->
my_num_w‹kîs_ªque°ed
 || !ô->
my_num_w‹kîs_ÆlŸãd
, 
NULL
 );

362 
	gô
->
	gmy_num_w‹kîs_ÆlŸãd
 = 0;

368 
	gm¨kë
::
adju°_dem™d
 ( 
¨ía
& 
a
, 
dñè
 ) {

369 
__TBB_ASSERT
–
theM¨kë
, "market instance was destroyedÖrematurely?" );

370 i‡–!
	gdñè
 )

372 
	gmy_¨ías_li°_muãx
.
lock
();

373 
	g¥ev_ªq
 = 
a
.
my_num_w‹kîs_ªque°ed
;

374 
	ga
.
	gmy_num_w‹kîs_ªque°ed
 +
dñè
;

375 i‡–
	ga
.
	gmy_num_w‹kîs_ªque°ed
 <= 0 ) {

376 
a
.
my_num_w‹kîs_ÆlŸãd
 = 0;

377 i‡–
	g¥ev_ªq
 <= 0 ) {

378 
my_¨ías_li°_muãx
.
u∆ock
();

381 
	gdñè
 = -
¥ev_ªq
;

383 #i‡
__TBB_TASK_ARENA


384 i‡–
	g¥ev_ªq
 < 0 ) {

385 
	gdñè
 = 
a
.
my_num_w‹kîs_ªque°ed
;

388 
__TBB_ASSERT
–
¥ev_ªq
 >= 0, "Part-sizeÑequestÅo RML?" );

390 #i‡
__TBB_TASK_PRIORITY


391 
öçå_t
 
	gp
 = 
a
.
my_t›_¥i‹ôy
;

392 
	g¥i‹ôy_Àvñ_öfo
 &
	g∂
 = 
my_¥i‹ôy_Àvñs
[
p
];

393 
	g∂
.
	gw‹kîs_ªque°ed
 +
dñè
;

394 
__TBB_ASSERT
–
∂
.
w‹kîs_ªque°ed
 >0, 
NULL
 );

395 #i‡!
__TBB_TASK_ARENA


396 
__TBB_ASSERT
–
a
.
my_num_w‹kîs_ªque°ed
 >0, 
NULL
 );

400 i‡–
	ga
.
	gmy_num_w‹kîs_ªque°ed
 <= 0 ) {

401 i‡–
a
.
my_t›_¥i‹ôy
 !
n‹mÆized_n‹mÆ_¥i‹ôy
 ) {

402 
GATHER_STATISTIC
–++
govîn‹
::
loˇl_scheduÀr_if_öôülized
()->
my_cou¡îs
.
¨ía_¥io_ª£ts
 );

403 
upd©e_¨ía_t›_¥i‹ôy
–
a
, 
n‹mÆized_n‹mÆ_¥i‹ôy
 );

405 
	ga
.
	gmy_bŸtom_¥i‹ôy
 = 
n‹mÆized_n‹mÆ_¥i‹ôy
;

407 i‡–
	gp
 =
my_globÆ_t›_¥i‹ôy
 ) {

408 i‡–!
∂
.
w‹kîs_ªque°ed
 ) {

409  --
p
 >
my_globÆ_bŸtom_¥i‹ôy
 && !
my_¥i‹ôy_Àvñs
[p].
w‹kîs_ªque°ed
 )

411 i‡–
	gp
 < 
	gmy_globÆ_bŸtom_¥i‹ôy
 )

412 
ª£t_globÆ_¥i‹ôy
();

414 
upd©e_globÆ_t›_¥i‹ôy
(
p
);

416 
upd©e_ÆlŸmít
–
my_globÆ_t›_¥i‹ôy
 );

418 i‡–
	gp
 > 
	gmy_globÆ_t›_¥i‹ôy
 ) {

419 #i‡!
__TBB_TASK_ARENA


420 
__TBB_ASSERT
–
∂
.
w‹kîs_ªque°ed
 > 0, 
NULL
 );

424 
upd©e_globÆ_t›_¥i‹ôy
(
p
);

425 
	ga
.
	gmy_num_w‹kîs_ÆlŸãd
 = 
mö
–()
my_max_num_w‹kîs
, 
a
.
my_num_w‹kîs_ªque°ed
 );

426 
	gmy_¥i‹ôy_Àvñs
[
p
 - 1].
	gw‹kîs_avaûabÀ
 = 
my_max_num_w‹kîs
 - 
a
.
my_num_w‹kîs_ÆlŸãd
;

427 
upd©e_ÆlŸmít
–
p
 - 1 );

429 i‡–
	gp
 =
my_globÆ_bŸtom_¥i‹ôy
 ) {

430 i‡–!
∂
.
w‹kîs_ªque°ed
 ) {

431  ++
p
 <
my_globÆ_t›_¥i‹ôy
 && !
my_¥i‹ôy_Àvñs
[p].
w‹kîs_ªque°ed
 )

433 i‡–
	gp
 > 
	gmy_globÆ_t›_¥i‹ôy
 )

434 
ª£t_globÆ_¥i‹ôy
();

436 
	gmy_globÆ_bŸtom_¥i‹ôy
 = 
p
;

437 #i‡
__TBB_TRACK_PRIORITY_LEVEL_SATURATION


438 
	gmy_lowe°_p›uœãd_Àvñ
 = 
max
–
my_lowe°_p›uœãd_Àvñ
, 
p
 );

443 
upd©e_ÆlŸmít
–
p
 );

445 i‡–
	gp
 < 
	gmy_globÆ_bŸtom_¥i‹ôy
 ) {

446 
__TBB_ASSERT
–
a
.
my_num_w‹kîs_ªque°ed
 > 0, 
NULL
 );

447 
	g¥ev_bŸtom
 = 
my_globÆ_bŸtom_¥i‹ôy
;

448 
	gmy_globÆ_bŸtom_¥i‹ôy
 = 
p
;

449 
upd©e_ÆlŸmít
–
¥ev_bŸtom
 );

452 
__TBB_ASSERT
–
my_globÆ_bŸtom_¥i‹ôy
 < 
p
 &&Ö < 
my_globÆ_t›_¥i‹ôy
, 
NULL
 );

453 
upd©e_ÆlŸmít
–
p
 );

455 
__TBB_ASSERT
–
my_globÆ_t›_¥i‹ôy
 >
a
.
my_t›_¥i‹ôy
 ||á.
my_num_w‹kîs_ªque°ed
<=0, 
NULL
 );

456 
as£π_m¨kë_vÆid
();

458 
	gmy_tŸÆ_dem™d
 +
dñè
;

459 
upd©e_ÆlŸmít
();

461 
	gmy_¨ías_li°_muãx
.
u∆ock
();

463 
	gmy_£rvî
->
adju°_job_cou¡_e°im©e
–
dñè
 );

464 
GATHER_STATISTIC
–
govîn‹
::
loˇl_scheduÀr_if_öôülized
(Ë? ++govîn‹::loˇl_scheduÀr_if_öôülized()->
my_cou¡îs
.
g©e_swôches
 : 0 );

467 
	gm¨kë
::
¥o˚ss
–
job
& 
j
 ) {

468 
gíîic_scheduÀr
& 
s
 = 
°©ic_ˇ°
<gíîic_scheduÀr&>(
j
);

469 
¨ía
 *
	ga
 = 
NULL
;

470 
__TBB_ASSERT
–
govîn‹
::
is_£t
(&
s
), 
NULL
 );

471 #i‡!
__TBB_SLEEP_PERMISSION


472  (
	ga
 = 
¨ía_ö_√ed
(
a
)) )

473 
a
->
¥o˚ss
(
s
);

476 
	gquîy_öãrvÆ
 = 1000,

477 
	gfú°_öãrvÆ
 = 1,

478 
	g∑u£_time
 = 100

480 
	gi
 = 
fú°_öãrvÆ
; ; i--) {

481  (
	ga
 = 
¨ía_ö_√ed
(
a
)) )

483 
a
->
¥o˚ss
(
s
);

484 
	gi
 = 
fú°_öãrvÆ
;

486 if–
	gi
 == 0 ) {

487 #i‡
__TBB_TASK_PRIORITY


488 
¨ía_li°_ty≥
 &
Æ
 = 
my_¥i‹ôy_Àvñs
[
my_globÆ_t›_¥i‹ôy
].
¨ías
;

490 
	g¨ía_li°_ty≥
 &
	gÆ
 = 
my_¨ías
;

492 if–
	gÆ
.
em±y
() )

494 if–
	gthe_globÆ_ob£rvî_li°
.
ask_≥rmissi⁄_to_Àave
() )

496 
__TBB_Yõld
();

497 
	gi
 = 
quîy_öãrvÆ
;

498 } 
__TBB_Pau£
(
∑u£_time
);

501 
GATHER_STATISTIC
–++
s
.
my_cou¡îs
.
m¨kë_roundåùs
 );

504 
	gm¨kë
::
˛ónup
–
job
& 
j
 ) {

505 
__TBB_ASSERT
–
theM¨kë
 !
this
, 
NULL
 );

506 
	ggíîic_scheduÀr
& 
	gs
 = 
°©ic_ˇ°
<
gíîic_scheduÀr
&>(
j
);

507 
gíîic_scheduÀr
* 
	gmöe
 = 
govîn‹
::
loˇl_scheduÀr_if_öôülized
();

508 
__TBB_ASSERT
–!
möe
 || möe->
my_¨ía_ödex
!=0, 
NULL
 );

509 if–
	gmöe
!=&
s
 ) {

510 
govîn‹
::
assume_scheduÀr
–&
s
 );

511 
	ggíîic_scheduÀr
::
˛ónup_w‹kî
–&
s
, 
möe
!=
NULL
 );

512 
	ggovîn‹
::
assume_scheduÀr
–
möe
 );

514 
	ggíîic_scheduÀr
::
˛ónup_w‹kî
–&
s
, 
åue
 );

518 
	gm¨kë
::
acknowÀdge_˛o£_c⁄√˘i⁄
() {

519 
de°roy
();

522 ::
rml
::
job
* 
m¨kë
::
¸óã_⁄e_job
() {

523 
ödex
 = ++
my_num_w‹kîs
;

524 
__TBB_ASSERT
–
ödex
 > 0, 
NULL
 );

525 
ITT_THREAD_SET_NAME
(
_T
("TBB Worker Thread"));

527 
gíîic_scheduÀr
* 
	gs
 = gíîic_scheduÀr::
¸óã_w‹kî
–*
this
, 
ödex
 );

528 #i‡
__TBB_TASK_GROUP_CONTEXT


529 
__TBB_ASSERT
–
ödex
 <
my_max_num_w‹kîs
, 
NULL
 );

530 
__TBB_ASSERT
–!
my_w‹kîs
[
ödex
 - 1], 
NULL
 );

531 
	gmy_w‹kîs
[
ödex
 - 1] = 
s
;

533 
	ggovîn‹
::
sign_⁄
(
s
);

534  
	gs
;

537 #i‡
__TBB_TASK_PRIORITY


538 
	gm¨kë
::
upd©e_¨ía_t›_¥i‹ôy
 ( 
¨ía
& 
a
, 
öçå_t
 
√w_¥i‹ôy
 ) {

539 
GATHER_STATISTIC
–++
govîn‹
::
loˇl_scheduÀr_if_öôülized
()->
my_cou¡îs
.
¨ía_¥io_swôches
 );

540 
__TBB_ASSERT
–
a
.
my_t›_¥i‹ôy
 !
√w_¥i‹ôy
, 
NULL
 );

541 
	g¥i‹ôy_Àvñ_öfo
 &
	g¥ev_Àvñ
 = 
my_¥i‹ôy_Àvñs
[
a
.
my_t›_¥i‹ôy
],

542 &
	g√w_Àvñ
 = 
my_¥i‹ôy_Àvñs
[
√w_¥i‹ôy
];

543 
ªmove_¨ía_‰om_li°
(
a
);

544 
	ga
.
	gmy_t›_¥i‹ôy
 = 
√w_¥i‹ôy
;

545 
ö£π_¨ía_öto_li°
(
a
);

546 ++
	ga
.
	gmy_ªlﬂd_ïoch
;

547 #i‡
__TBB_TRACK_PRIORITY_LEVEL_SATURATION


551 
	g¥ev_Àvñ
.
	gw‹kîs_¥e£¡
 -
a
.
my_num_w‹kîs_¥e£¡
;

552 
	g√w_Àvñ
.
	gw‹kîs_¥e£¡
 +
a
.
my_num_w‹kîs_¥e£¡
;

554 
	g¥ev_Àvñ
.
	gw‹kîs_ªque°ed
 -
a
.
my_num_w‹kîs_ªque°ed
;

555 
	g√w_Àvñ
.
	gw‹kîs_ªque°ed
 +
a
.
my_num_w‹kîs_ªque°ed
;

556 
__TBB_ASSERT
–
¥ev_Àvñ
.
w‹kîs_ªque°ed
 >0 && 
√w_Àvñ
.w‹kîs_ªque°ed >0, 
NULL
 );

559 
boﬁ
 
	gm¨kë
::
lowî_¨ía_¥i‹ôy
 ( 
¨ía
& 
a
, 
öçå_t
 
√w_¥i‹ôy
, 
uöçå_t
 
ﬁd_ªlﬂd_ïoch
 ) {

561 
	g¨ías_li°_muãx_ty≥
::
sc›ed_lock
 
lock
(
my_¨ías_li°_muãx
);

562 i‡–
	ga
.
	gmy_ªlﬂd_ïoch
 !
ﬁd_ªlﬂd_ïoch
 ) {

563 
as£π_m¨kë_vÆid
();

564  
	gÁl£
;

566 
__TBB_ASSERT
–
a
.
my_t›_¥i‹ôy
 > 
√w_¥i‹ôy
, 
NULL
 );

567 
__TBB_ASSERT
–
my_globÆ_t›_¥i‹ôy
 >
a
.
my_t›_¥i‹ôy
, 
NULL
 );

569 
öçå_t
 
	gp
 = 
a
.
my_t›_¥i‹ôy
;

570 
upd©e_¨ía_t›_¥i‹ôy
–
a
, 
√w_¥i‹ôy
 );

571 i‡–
	ga
.
	gmy_num_w‹kîs_ªque°ed
 > 0 ) {

572 i‡–
	gmy_globÆ_bŸtom_¥i‹ôy
 > 
	g√w_¥i‹ôy
 ) {

573 
	gmy_globÆ_bŸtom_¥i‹ôy
 = 
√w_¥i‹ôy
;

575 i‡–
	gp
 =
my_globÆ_t›_¥i‹ôy
 && !
my_¥i‹ôy_Àvñs
[
p
].
w‹kîs_ªque°ed
 ) {

577  --
p
; !
	gmy_¥i‹ôy_Àvñs
[p].
	gw‹kîs_ªque°ed
; --
	gp
 ) ;

578 
__TBB_ASSERT
–
p
 >
my_globÆ_bŸtom_¥i‹ôy
, 
NULL
 );

579 
upd©e_globÆ_t›_¥i‹ôy
(
p
);

581 
upd©e_ÆlŸmít
–
p
 );

584 
__TBB_ASSERT
–
my_globÆ_t›_¥i‹ôy
 >
a
.
my_t›_¥i‹ôy
, 
NULL
 );

585 
as£π_m¨kë_vÆid
();

586  
	gåue
;

589 
boﬁ
 
	gm¨kë
::
upd©e_¨ía_¥i‹ôy
 ( 
¨ía
& 
a
, 
öçå_t
 
√w_¥i‹ôy
 ) {

590 
	g¨ías_li°_muãx_ty≥
::
sc›ed_lock
 
lock
(
my_¨ías_li°_muãx
);

592 
__TBB_ASSERT
–
my_globÆ_t›_¥i‹ôy
 >
a
.
my_t›_¥i‹ôy
 ||á.
my_num_w‹kîs_ªque°ed
 <0, 
NULL
 );

593 
as£π_m¨kë_vÆid
();

594 i‡–
	ga
.
	gmy_t›_¥i‹ôy
 =
√w_¥i‹ôy
 ) {

595  
Ál£
;

597 i‡–
	ga
.
	gmy_t›_¥i‹ôy
 > 
	g√w_¥i‹ôy
 ) {

598 i‡–
	ga
.
	gmy_bŸtom_¥i‹ôy
 > 
	g√w_¥i‹ôy
 )

599 
	ga
.
	gmy_bŸtom_¥i‹ôy
 = 
√w_¥i‹ôy
;

600  
	gÁl£
;

602 i‡–
	ga
.
	gmy_num_w‹kîs_ªque°ed
 <= 0 ) {

603  
Ál£
;

606 
__TBB_ASSERT
–
my_globÆ_t›_¥i‹ôy
 >
a
.
my_t›_¥i‹ôy
, 
NULL
 );

608 
öçå_t
 
	gp
 = 
a
.
my_t›_¥i‹ôy
;

609 
öçå_t
 
	ghighe°_af„˘ed_Àvñ
 = 
max
(
p
, 
√w_¥i‹ôy
);

610 
upd©e_¨ía_t›_¥i‹ôy
–
a
, 
√w_¥i‹ôy
 );

612 i‡–
	gmy_globÆ_t›_¥i‹ôy
 < 
	g√w_¥i‹ôy
 ) {

613 
upd©e_globÆ_t›_¥i‹ôy
(
√w_¥i‹ôy
);

615 i‡–
	gmy_globÆ_t›_¥i‹ôy
 =
√w_¥i‹ôy
 ) {

616 
adv™˚_globÆ_ªlﬂd_ïoch
();

619 
__TBB_ASSERT
–
√w_¥i‹ôy
 < 
my_globÆ_t›_¥i‹ôy
, 
NULL
 );

620 
__TBB_ASSERT
–
√w_¥i‹ôy
 > 
my_globÆ_bŸtom_¥i‹ôy
, 
NULL
 );

621 i‡–
	gp
 =
my_globÆ_t›_¥i‹ôy
 && !
my_¥i‹ôy_Àvñs
[
p
].
w‹kîs_ªque°ed
 ) {

623 
__TBB_ASSERT
–
my_globÆ_bŸtom_¥i‹ôy
 < 
p
, 
NULL
 );

624  --
	gp
; !
	gmy_¥i‹ôy_Àvñs
[
p
].
	gw‹kîs_ªque°ed
; --p ) ;

625 
__TBB_ASSERT
–
p
 >
√w_¥i‹ôy
, 
NULL
 );

626 
upd©e_globÆ_t›_¥i‹ôy
(
p
);

627 
	ghighe°_af„˘ed_Àvñ
 = 
p
;

630 i‡–
	gp
 =
my_globÆ_bŸtom_¥i‹ôy
 ) {

632 
__TBB_ASSERT
–
p
 < 
√w_¥i‹ôy
, 
NULL
 );

633 
__TBB_ASSERT
–
√w_¥i‹ôy
 <
my_globÆ_t›_¥i‹ôy
, 
NULL
 );

634  !
	gmy_¥i‹ôy_Àvñs
[
my_globÆ_bŸtom_¥i‹ôy
].
	gw‹kîs_ªque°ed
 )

635 ++
	gmy_globÆ_bŸtom_¥i‹ôy
;

636 
__TBB_ASSERT
–
my_globÆ_bŸtom_¥i‹ôy
 <
√w_¥i‹ôy
, 
NULL
 );

637 
__TBB_ASSERT
–
my_¥i‹ôy_Àvñs
[
my_globÆ_bŸtom_¥i‹ôy
].
w‹kîs_ªque°ed
 > 0, 
NULL
 );

639 
upd©e_ÆlŸmít
–
highe°_af„˘ed_Àvñ
 );

641 
__TBB_ASSERT
–
my_globÆ_t›_¥i‹ôy
 >
a
.
my_t›_¥i‹ôy
, 
NULL
 );

642 
as£π_m¨kë_vÆid
();

643  
	gåue
;

647 #i‡
__TBB_COUNT_TASK_NODES


648 
öçå_t
 
	gm¨kë
::
w‹kîs_èsk_node_cou¡
() {

649 
öçå_t
 
ªsu…
 = 0;

650 
F‹EachAª«
(
a
) {

651 
	gªsu…
 +
a
.
w‹kîs_èsk_node_cou¡
();

652 } 
EndF‹Each
();

653  
	gªsu…
;

	@viper/concurrentqueue-src/benchmarks/tbb/market.h

21 #i‚de‡
_TBB_m¨kë_H


22 
	#_TBB_m¨kë_H


	)

24 
	~"tbb/tbb_°ddef.h
"

26 
	~"scheduÀr_comm⁄.h
"

27 
	~"tbb/©omic.h
"

28 
	~"tbb/•ö_rw_muãx.h
"

29 
	~"../rml/ö˛ude/rml_tbb.h
"

31 
	~"öåusive_li°.h
"

33 #i‡
deföed
(
_MSC_VER
Ë&& deföed(
_Wp64
)

35 #¥agm®
w¨nög
 (
push
)

36 #¥agm®
w¨nög
 (
dißbÀ
: 4244)

39 
«me•a˚
 
	gtbb
 {

41 
˛ass
 
	gèsk_group_c⁄ãxt
;

43 
«me•a˚
 
	göã∫Æ
 {

49 
˛ass
 
	gm¨kë
 : 
no_c›y
, 
	grml
::
tbb_˛õ¡
 {

50 
‰õnd
 
˛ass
 
gíîic_scheduÀr
;

51 
‰õnd
 
˛ass
 
	g¨ía
;

52 
	gãm∂©e
<
ty≥«me
 
	gScheduÀrTøôs
> 
‰õnd
 
˛ass
 
	gcu°om_scheduÀr
;

53 
‰õnd
 
˛ass
 
	gtbb
::
èsk_group_c⁄ãxt
;

54 
	g¥iv©e
:

55 
‰õnd
 
ITT_DoUnß„O√TimeInôüliz©i⁄
 ();

57 
	göåusive_li°
<
	t¨ía
> 
	t¨ía_li°_ty≥
;

60 
m¨kë
* 
	gtheM¨kë
;

62 
scheduÀr_muãx_ty≥
 
	tglobÆ_m¨kë_muãx_ty≥
;

65 
globÆ_m¨kë_muãx_ty≥
 
	gtheM¨këMuãx
;

68 
öçå_t
 
	gmy_ªf_cou¡
;

71 
•ö_rw_muãx
 
	t¨ías_li°_muãx_ty≥
;

72 
¨ías_li°_muãx_ty≥
 
	gmy_¨ías_li°_muãx
;

75 
	grml
::
tbb_£rvî
* 
my_£rvî
;

78 
size_t
 
	gmy_°ack_size
;

81 
	gmy_max_num_w‹kîs
;

86 
	g©omic
<> 
	gmy_num_w‹kîs
;

88 #i‡
__TBB_TASK_PRIORITY


94 
öçå_t
 
	gmy_globÆ_t›_¥i‹ôy
;

98 
öçå_t
 
	gmy_globÆ_bŸtom_¥i‹ôy
;

103 
uöçå_t
 
	gmy_globÆ_ªlﬂd_ïoch
;

106 
	s¥i‹ôy_Àvñ_öfo
 {

108 
¨ía_li°_ty≥
 
	g¨ías
;

112 
¨ía
 *
	g√xt_¨ía
;

115 
	gw‹kîs_ªque°ed
;

118 
	gw‹kîs_avaûabÀ
;

120 #i‡
__TBB_TRACK_PRIORITY_LEVEL_SATURATION


122 
	gw‹kîs_¥e£¡
;

127 
¥i‹ôy_Àvñ_öfo
 
	gmy_¥i‹ôy_Àvñs
[
num_¥i‹ôy_Àvñs
];

129 #i‡
__TBB_TRACK_PRIORITY_LEVEL_SATURATION


131 
öçå_t
 
	gmy_lowe°_p›uœãd_Àvñ
;

137 
¨ía_li°_ty≥
 
	gmy_¨ías
;

141 
¨ía
 *
	gmy_√xt_¨ía
;

144 
	gmy_tŸÆ_dem™d
;

148 
uöçå_t
 
	gmy_¨ías_aba_ïoch
;

150 #i‡
__TBB_COUNT_TASK_NODES


153 
	g©omic
<
	göçå_t
> 
	gmy_èsk_node_cou¡
;

157 
m¨kë
 ( 
max_num_w‹kîs
, 
size_t
 
°ack_size
 );

160 
	gm¨kë
& 
globÆ_m¨kë
 ( 
max_num_w‹kîs
, 
size_t
 
°ack_size
 );

163 
de°roy
 ();

165 
åy_de°roy_¨ía
 ( 
¨ía
*, 
uöçå_t
 
aba_ïoch
 );

167 #i‡
__TBB_TASK_PRIORITY


169 
¨ía
* 
¨ía_ö_√ed
 (áª«* 
¥ev_¨ía
 );

174 
upd©e_ÆlŸmít
 ( 
öçå_t
 
highe°_af„˘ed_¥i‹ôy
 );

177 
upd©e_¨ía_t›_¥i‹ôy
 ( 
¨ía
& 
a
, 
öçå_t
 
√wPri‹ôy
 );

180 
ölöe
 
upd©e_globÆ_t›_¥i‹ôy
 ( 
öçå_t
 
√wPri‹ôy
 );

183 
ölöe
 
ª£t_globÆ_¥i‹ôy
 ();

185 
ölöe
 
adv™˚_globÆ_ªlﬂd_ïoch
 () {

186 
__TBB_°‹e_wôh_ªÀa£
–
my_globÆ_ªlﬂd_ïoch
, my_global_reload_epoch + 1 );

189 
as£π_m¨kë_vÆid
 () const {

190 
__TBB_ASSERT
–(
my_¥i‹ôy_Àvñs
[
my_globÆ_t›_¥i‹ôy
].
w‹kîs_ªque°ed
 > 0

191 && !
my_¥i‹ôy_Àvñs
[
my_globÆ_t›_¥i‹ôy
].
¨ías
.
em±y
())

192 || (
my_globÆ_t›_¥i‹ôy
 =
my_globÆ_bŸtom_¥i‹ôy
 &&

193 
my_globÆ_t›_¥i‹ôy
 =
n‹mÆized_n‹mÆ_¥i‹ôy
), 
NULL
 );

196 
boﬁ
 
has_™y_dem™d
() const {

197 
	gp
 = 0;Ö < 
	gnum_¥i‹ôy_Àvñs
;Ö++)

198 if–
__TBB_lﬂd_wôh_acquúe
(
my_¥i‹ôy_Àvñs
[
p
].
w‹kîs_ªque°ed
) > 0 )

199  
	gåue
;

200  
	gÁl£
;

208 
upd©e_ÆlŸmít
 () {

209 i‡–
	gmy_tŸÆ_dem™d
 )

210 
upd©e_ÆlŸmít
–
my_¨ías
, 
my_tŸÆ_dem™d
, ()
my_max_num_w‹kîs
 );

214 
¨ía
* 
¨ía_ö_√ed
 (arena*) {

215 if(
__TBB_lﬂd_wôh_acquúe
(
my_tŸÆ_dem™d
) <= 0)

216  
NULL
;

217 
	g¨ías_li°_muãx_ty≥
::
sc›ed_lock
 
lock
(
my_¨ías_li°_muãx
, 
Ál£
);

218  
¨ía_ö_√ed
(
my_¨ías
, 
my_√xt_¨ía
);

220 
as£π_m¨kë_vÆid
 () const {}

224 
num_a˘ive_ma°îs
 () {  1; }

230 
ö£π_¨ía_öto_li°
 ( 
¨ía
& 
a
 );

232 
ªmove_¨ía_‰om_li°
 ( 
¨ía
& 
a
 );

234 
¨ía
* 
¨ía_ö_√ed
 ( 
¨ía_li°_ty≥
 &
¨ías
,áª« *&
√xt
 );

236 
upd©e_ÆlŸmít
 ( 
¨ía_li°_ty≥
& 
¨ías
, 
tŸÆ_dem™d
, 
max_w‹kîs
 );

242  
vîsi⁄_ty≥
 
vîsi⁄
 () const {  0; }

244  
max_job_cou¡
 (Ëc⁄° {  
	gmy_max_num_w‹kîs
; }

246  
size_t
 
mö_°ack_size
 (Ëc⁄° {  
w‹kî_°ack_size
(); }

248  
pﬁicy_ty≥
 
pﬁicy
 (Ëc⁄° {  
	gthroughput
; }

250  
job
* 
¸óã_⁄e_job
 ();

252  
˛ónup
–
job
& 
j
 );

254  
acknowÀdge_˛o£_c⁄√˘i⁄
 ();

256  
¥o˚ss
–
job
& 
j
 );

258 
	gpublic
:

262 
¨ía
& 
¸óã_¨ía
 ( 
max_num_w‹kîs
, 
size_t
 
°ack_size
 );

265 
åy_de°roy_¨ía
 ( 
m¨kë
*, 
¨ía
*, 
uöçå_t
 
aba_ïoch
, 
boﬁ
 
ma°î
 );

268 
dëach_¨ía
 ( 
¨ía
& );

271 
ªÀa£
 ();

275 
adju°_dem™d
 ( 
¨ía
&, 
dñè
 );

279 
¥ï¨e_waô_w‹kîs
(Ë{ ++
	gmy_ªf_cou¡
; }

282 
waô_w‹kîs
 ();

285 
size_t
 
w‹kî_°ack_size
 (Ëc⁄° {  
	gmy_°ack_size
; }

287 #i‡
_WIN32
||
_WIN64


289 
ªgi°î_ma°î
–::
rml
::
£rvî
::
executi⁄_ªsour˚_t
& 
rsc_h™dÀ
 ) {

290 
__TBB_ASSERT
–
my_£rvî
, "RML serverÇot defined?" );

292 
	gmy_£rvî
->
ªgi°î_ma°î
–
rsc_h™dÀ
 );

296 
uƒegi°î_ma°î
–::
rml
::
£rvî
::
executi⁄_ªsour˚_t
& 
rsc_h™dÀ
 ) const {

297 
my_£rvî
->
uƒegi°î_ma°î
–
rsc_h™dÀ
 );

301 #i‡
__TBB_TASK_GROUP_CONTEXT


303 
	gãm∂©e
 <
ty≥«me
 
	gT
>

304 
boﬁ
 
¥›ag©e_èsk_group_°©e
 ( 
T
 
èsk_group_c⁄ãxt
::*
m±r_°©e
,Åask_group_c⁄ãxt& 
§c
, T 
√w_°©e
 );

307 #i‡
__TBB_TASK_PRIORITY


310 
boﬁ
 
lowî_¨ía_¥i‹ôy
 ( 
¨ía
& 
a
, 
öçå_t
 
√w_¥i‹ôy
, 
uöçå_t
 
ﬁd_ªlﬂd_ïoch
 );

319 
boﬁ
 
upd©e_¨ía_¥i‹ôy
 ( 
¨ía
& 
a
, 
öçå_t
 
√w_¥i‹ôy
 );

322 #i‡
__TBB_COUNT_TASK_NODES


324 
öçå_t
 
w‹kîs_èsk_node_cou¡
();

328 
upd©e_èsk_node_cou¡
–
öçå_t
 
dñè
 ) { 
	gmy_èsk_node_cou¡
 += delta; }

331 #i‡
__TBB_TASK_GROUP_CONTEXT


335 
gíîic_scheduÀr
* 
	gmy_w‹kîs
[1];

340 #i‡
__TBB_TASK_PRIORITY


341 
	#BegöF‹EachAª«
(
a
) \

342 
¨ías_li°_muãx_ty≥
::
sc›ed_lock
 
	`¨ía_li°_lock
(
my_¨ías_li°_muãx
); \

343  
öçå_t
 
i
 = 
my_globÆ_t›_¥i‹ôy
; i >
my_globÆ_bŸtom_¥i‹ôy
; --i ) { \

345 
¨ía_li°_ty≥
 &
¨ías
 = 
my_¥i‹ôy_Àvñs
[
i
].¨ías;

	)

347 
	#BegöF‹EachAª«
(
a
) \

348 
¨ía_li°_ty≥
 &
¨ías
 = 
my_¨ías
; {

	)

351 
	#F‹EachAª«
(
a
) \

352 
	`BegöF‹EachAª«
(
a
) \

353 
¨ía_li°_ty≥
::
ôî©‹
 
ô
 = 
¨ías
.
	`begö
(); \

354  ; 
ô
 !
¨ías
.
	`íd
(); ++it ) { \

355 
¨ía
 &
a
 = *
ô
;

	)

357 
	#EndF‹Each
(Ë}}

	)

363 #i‡
deföed
(
_MSC_VER
Ë&& deföed(
_Wp64
)

365 #¥agm®
w¨nög
 (
p›
)

	@viper/concurrentqueue-src/benchmarks/tbb/memory_pool.h

21 #i‚de‡
__TBB_mem‹y_poﬁ_H


22 
	#__TBB_mem‹y_poﬁ_H


	)

24 #i‡!
TBB_PREVIEW_MEMORY_POOL


25 #îr‹ 
Së
 
TBB_PREVIEW_MEMORY_POOL
 
to
 
ö˛ude
 
mem‹y_poﬁ
.
h


29 
	~"sˇœbÀ_Æloˇt‹.h
"

30 
	~<√w
>

31 #i‡
__TBB_ALLOCATOR_CONSTRUCT_VARIADIC


32 
	~<utûôy
>

35 #i‡
__TBB_EXTRA_DEBUG


36 
	#__TBBMALLOC_ASSERT
 
ASSERT


	)

38 
	#__TBBMALLOC_ASSERT
(
a
,
b
Ë(()0)

	)

41 
«me•a˚
 
	gtbb
 {

42 
«me•a˚
 
	göãrÁ˚6
 {

44 
«me•a˚
 
	göã∫Æ
 {

47 ˛as†
	cpoﬁ_ba£
 : 
tbb
::
öã∫Æ
::
no_c›y
 {

50 
public
:

52 
ªcy˛e
(Ë{ 
rml
::
poﬁ_ª£t
(
my_poﬁ
); }

55 *
mÆloc
(
size_t
 
size
Ë{  
	grml
::
poﬁ_mÆloc
(
my_poﬁ
, size); }

58 
‰ì
(* 
±r
Ë{ 
	grml
::
poﬁ_‰ì
(
my_poﬁ
,Ötr); }

62 *
ªÆloc
(* 
±r
, 
size_t
 
size
) {

63  
	grml
::
poﬁ_ªÆloc
(
my_poﬁ
, 
±r
, 
size
);

66 
	g¥Ÿe˘ed
:

68 
de°roy
(Ë{ 
rml
::
poﬁ_de°roy
(
my_poﬁ
); }

70 
	grml
::
Mem‹yPoﬁ
 *
my_poﬁ
;

76 #i‡
_MSC_VER
 && !
deföed
(
__INTEL_COMPILER
)

78 #¥agm®
w¨nög
 (
push
)

79 #¥agm®
w¨nög
 (
dißbÀ
: 4100)

84 
	gãm∂©e
<
ty≥«me
 
	gT
,Åy≥«mê
	gP
 = 
öã∫Æ
::
poﬁ_ba£
>

85 ˛as†
	cmem‹y_poﬁ_Æloˇt‹
 {

86 
¥Ÿe˘ed
:

87 
P
 
	tpoﬁ_ty≥
;

88 
poﬁ_ty≥
 *
	gmy_poﬁ
;

89 
	gãm∂©e
<
ty≥«me
 
	gU
,Åy≥«mê
	gR
>

90 
‰õnd
 
˛ass
 
	gmem‹y_poﬁ_Æloˇt‹
;

91 
	gãm∂©e
<
ty≥«me
 
	gV
,Åy≥«mê
	gU
,Åy≥«mê
	gR
>

92 
‰õnd
 
boﬁ
 
	g›î©‹
==–c⁄° 
mem‹y_poﬁ_Æloˇt‹
<
V
,
	gR
>& 
	ga
, c⁄° 
	gmem‹y_poﬁ_Æloˇt‹
<
	gU
,R>& 
	gb
);

93 
	gãm∂©e
<
ty≥«me
 
	gV
,Åy≥«mê
	gU
,Åy≥«mê
	gR
>

94 
‰õnd
 
boﬁ
 
	g›î©‹
!=–c⁄° 
mem‹y_poﬁ_Æloˇt‹
<
V
,
	gR
>& 
	ga
, c⁄° 
	gmem‹y_poﬁ_Æloˇt‹
<
	gU
,R>& 
	gb
);

95 
	gpublic
:

96 
ty≥«me
 
	ttbb
::
	töã∫Æ
::
	tÆloˇt‹_ty≥
<
	tT
>::
	tvÆue_ty≥
 value_type;

97 
vÆue_ty≥
* 
	tpoöãr
;

98 c⁄° 
	tvÆue_ty≥
* 
	tc⁄°_poöãr
;

99 
	gvÆue_ty≥
& 
	tª„ªn˚
;

100 c⁄° 
	tvÆue_ty≥
& 
	tc⁄°_ª„ªn˚
;

101 
size_t
 
	tsize_ty≥
;

102 
±rdiff_t
 
	tdif„ªn˚_ty≥
;

103 
	gãm∂©e
<
ty≥«me
 
	gU
> 
	sªböd
 {

104 
	gmem‹y_poﬁ_Æloˇt‹
<
	tU
, 
	tP
> 
	tŸhî
;

107 
mem‹y_poﬁ_Æloˇt‹
(
poﬁ_ty≥
 &
poﬁ
Ë
throw
(Ë: 
my_poﬁ
(&pool) {}

108 
mem‹y_poﬁ_Æloˇt‹
(c⁄° mem‹y_poﬁ_Æloˇt‹& 
§c
Ë
throw
(Ë: 
my_poﬁ
(src.my_pool) {}

109 
ãm∂©e
<
ty≥«me
 
U
>

110 
mem‹y_poﬁ_Æloˇt‹
(c⁄° mem‹y_poﬁ_Æloˇt‹<
U
,
P
>& 
§c
Ë
throw
(Ë: 
my_poﬁ
(src.my_pool) {}

112 
poöãr
 
addªss
(
ª„ªn˚
 
x
) const {  &x; }

113 
c⁄°_poöãr
 
addªss
(
c⁄°_ª„ªn˚
 
x
Ëc⁄° {  &
	gx
; }

116 
poöãr
 
Æloˇã
–
size_ty≥
 
n
, const * = 0) {

117  
°©ic_ˇ°
<
poöãr
>–
my_poﬁ
->
mÆloc
–
n
*(
vÆue_ty≥
) ) );

120 
dóŒoˇã
–
poöãr
 
p
, 
size_ty≥
 ) {

121 
	gmy_poﬁ
->
‰ì
(
p
);

124 
size_ty≥
 
max_size
(Ëc⁄° 
throw
() {

125 
size_ty≥
 
	gmax
 = 
°©ic_ˇ°
<size_ty≥>(-1Ë/  (
vÆue_ty≥
);

126  (
	gmax
 > 0 ? max : 1);

129 #i‡
__TBB_ALLOCATOR_CONSTRUCT_VARIADIC


130 
	gãm∂©e
<
ty≥«me
 
	gU
, 
	gty≥«me
... 
	gArgs
>

131 
c⁄°ru˘
(
U
 *
p
, 
Args
&&... 
¨gs
)

132 { ::
√w
((*)
p
Ë
U
(
°d
::
f‹w¨d
<
Args
>(
¨gs
)...); }

134 #i‡
__TBB_CPP11_RVALUE_REF_PRESENT


135 
c⁄°ru˘
–
poöãr
 
p
, 
vÆue_ty≥
&& 
vÆue
 ) {::
√w
((*)’)ËvÆue_ty≥(
°d
::
move
(value));}

137 
c⁄°ru˘
–
poöãr
 
p
, c⁄° 
vÆue_ty≥
& 
vÆue
 ) { ::
√w
((*)(p)) value_type(value); }

141 
de°roy
–
poöãr
 
p
 ) { 
	gp
->~
vÆue_ty≥
(); }

145 #i‡
_MSC_VER
 && !
deföed
(
__INTEL_COMPILER
)

146 #¥agm®
w¨nög
 (
p›
)

151 
	gãm∂©e
<
ty≥«me
 
	gP
>

152 
˛ass
 
	gmem‹y_poﬁ_Æloˇt‹
<, 
	gP
> {

153 
	gpublic
:

154 
P
 
	tpoﬁ_ty≥
;

155 * 
	tpoöãr
;

156 c⁄° * 
	tc⁄°_poöãr
;

157 
	tvÆue_ty≥
;

158 
	gãm∂©e
<
ty≥«me
 
	gU
> 
	sªböd
 {

159 
	gmem‹y_poﬁ_Æloˇt‹
<
	tU
, 
	tP
> 
	tŸhî
;

162 
mem‹y_poﬁ_Æloˇt‹
–
poﬁ_ty≥
 &
poﬁ
Ë
throw
(Ë: 
my_poﬁ
(&pool) {}

163 
mem‹y_poﬁ_Æloˇt‹
–c⁄° mem‹y_poﬁ_Æloˇt‹& 
§c
Ë
throw
(Ë: 
my_poﬁ
(src.my_pool) {}

164 
ãm∂©e
<
ty≥«me
 
U
>

165 
mem‹y_poﬁ_Æloˇt‹
(c⁄° mem‹y_poﬁ_Æloˇt‹<
U
,
P
>& 
§c
Ë
throw
(Ë: 
my_poﬁ
(src.my_pool) {}

167 
¥Ÿe˘ed
:

168 
poﬁ_ty≥
 *
my_poﬁ
;

169 
	gãm∂©e
<
ty≥«me
 
	gU
,Åy≥«mê
	gR
>

170 
‰õnd
 
˛ass
 
	gmem‹y_poﬁ_Æloˇt‹
;

171 
	gãm∂©e
<
ty≥«me
 
	gV
,Åy≥«mê
	gU
,Åy≥«mê
	gR
>

172 
‰õnd
 
boﬁ
 
	g›î©‹
==–c⁄° 
mem‹y_poﬁ_Æloˇt‹
<
V
,
	gR
>& 
	ga
, c⁄° 
	gmem‹y_poﬁ_Æloˇt‹
<
	gU
,R>& 
	gb
);

173 
	gãm∂©e
<
ty≥«me
 
	gV
,Åy≥«mê
	gU
,Åy≥«mê
	gR
>

174 
‰õnd
 
boﬁ
 
	g›î©‹
!=–c⁄° 
mem‹y_poﬁ_Æloˇt‹
<
V
,
	gR
>& 
	ga
, c⁄° 
	gmem‹y_poﬁ_Æloˇt‹
<
	gU
,R>& 
	gb
);

177 
	gãm∂©e
<
ty≥«me
 
	gT
,Åy≥«mê
	gU
,Åy≥«mê
	gP
>

178 
ölöe
 
boﬁ
 
	g›î©‹
==–c⁄° 
mem‹y_poﬁ_Æloˇt‹
<
T
,
	gP
>& 
	ga
, c⁄° 
	gmem‹y_poﬁ_Æloˇt‹
<
	gU
,P>& 
	gb
Ë{á.
	gmy_poﬁ
==
b
.
my_poﬁ
;}

180 
	gãm∂©e
<
ty≥«me
 
	gT
,Åy≥«mê
	gU
,Åy≥«mê
	gP
>

181 
ölöe
 
boﬁ
 
	g›î©‹
!=–c⁄° 
mem‹y_poﬁ_Æloˇt‹
<
T
,
	gP
>& 
	ga
, c⁄° 
	gmem‹y_poﬁ_Æloˇt‹
<
	gU
,P>& 
	gb
Ë{á.
	gmy_poﬁ
!=
b
.
my_poﬁ
;}

185 
	gãm∂©e
 <
ty≥«me
 
	gAŒoc
>

186 ˛as†
	cmem‹y_poﬁ
 : 
public
 
öã∫Æ
::
poﬁ_ba£
 {

187 
AŒoc
 
my_Æloc
;

188 *
Æloˇã_ªque°
(
öçå_t
 
poﬁ_id
, 
size_t
 & 
byãs
);

189 
dóŒoˇã_ªque°
(
öçå_t
 
poﬁ_id
, *, 
size_t
 
øw_byãs
);

191 
	gpublic
:

193 
mem‹y_poﬁ
(c⁄° 
AŒoc
 &
§c
 = Alloc());

196 ~
mem‹y_poﬁ
(Ë{ 
de°roy
(); }

200 ˛as†
	cfixed_poﬁ
 : 
public
 
öã∫Æ
::
poﬁ_ba£
 {

201 *
my_buf„r
;

202 
size_t
 
	gmy_size
;

203 
ölöe
 *
Æloˇã_ªque°
(
öçå_t
 
poﬁ_id
, 
size_t
 & 
byãs
);

205 
	gpublic
:

207 
ölöe
 
fixed_poﬁ
(*
buf
, 
size_t
 
size
);

209 ~
fixed_poﬁ
(Ë{ 
de°roy
(); }

214 
	gãm∂©e
 <
ty≥«me
 
	gAŒoc
>

215 
	gmem‹y_poﬁ
<
	gAŒoc
>::
mem‹y_poﬁ
(c⁄° 
AŒoc
 &
§c
Ë: 
my_Æloc
(src) {

216 
rml
::
MemPoﬁPﬁicy
 
¨gs
(
Æloˇã_ªque°
, 
dóŒoˇã_ªque°
,

217 (
ty≥«me
 
AŒoc
::
vÆue_ty≥
));

218 
	grml
::
MemPoﬁEº‹
 
ªs
 = 
rml
::
poﬁ_¸óã_v1
(
öçå_t
(
this
), &
¨gs
, &
my_poﬁ
);

219 if–
	gªs
!=
rml
::
POOL_OK
 ) 
__TBB_THROW
(
°d
::
bad_Æloc
());

221 
	gãm∂©e
 <
ty≥«me
 
	gAŒoc
>

222 *
	gmem‹y_poﬁ
<
	gAŒoc
>::
Æloˇã_ªque°
(
öçå_t
 
poﬁ_id
, 
size_t
 & 
byãs
) {

223 
	gmem‹y_poﬁ
<
	gAŒoc
> &
	g£lf
 = *
ªöãΩªt_ˇ°
<
mem‹y_poﬁ
<
AŒoc
>*>(
poﬁ_id
);

224 c⁄° 
size_t
 
	gunô_size
 = (
ty≥«me
 
AŒoc
::
vÆue_ty≥
);

225 
__TBBMALLOC_ASSERT
–0 =
byãs
%
unô_size
, 
NULL
);

226 *
	g±r
;

227 
	g__TBB_TRY
 { 
	g±r
 = 
£lf
.
my_Æloc
.
Æloˇã
–
byãs
/
unô_size
 ); }

228 
__TBB_CATCH
(...) {  0; }

229  
	g±r
;

231 #i‡
__TBB_MSVC_UNREACHABLE_CODE_IGNORED


234 #¥agm®
w¨nög
 (
push
)

235 #¥agm®
w¨nög
 (
dißbÀ
: 4702)

237 
	gãm∂©e
 <
ty≥«me
 
	gAŒoc
>

238 
	gmem‹y_poﬁ
<
	gAŒoc
>::
dóŒoˇã_ªque°
(
öçå_t
 
poﬁ_id
, * 
øw_±r
, 
size_t
 
øw_byãs
) {

239 
	gmem‹y_poﬁ
<
	gAŒoc
> &
	g£lf
 = *
ªöãΩªt_ˇ°
<
mem‹y_poﬁ
<
AŒoc
>*>(
poﬁ_id
);

240 c⁄° 
size_t
 
	gunô_size
 = (
ty≥«me
 
AŒoc
::
vÆue_ty≥
);

241 
__TBBMALLOC_ASSERT
–0 =
øw_byãs
%
unô_size
, 
NULL
);

242 
	g£lf
.
	gmy_Æloc
.
dóŒoˇã
–
°©ic_ˇ°
<
ty≥«me
 
AŒoc
::
vÆue_ty≥
*>(
øw_±r
), 
øw_byãs
/
unô_size
 );

245 #i‡
__TBB_MSVC_UNREACHABLE_CODE_IGNORED


246 #¥agm®
w¨nög
 (
p›
)

248 
ölöe
 
	gfixed_poﬁ
::
fixed_poﬁ
(*
buf
, 
size_t
 
size
Ë: 
my_buf„r
(buf), 
my_size
(size) {

249 if–!
	gbuf
 || !
	gsize
 ) 
__TBB_THROW
(
°d
::
bad_Æloc
());

250 
	grml
::
MemPoﬁPﬁicy
 
¨gs
(
Æloˇã_ªque°
, 0, 
size
, 
åue
);

251 
	grml
::
MemPoﬁEº‹
 
ªs
 = 
rml
::
poﬁ_¸óã_v1
(
öçå_t
(
this
), &
¨gs
, &
my_poﬁ
);

252 if–
	gªs
!=
rml
::
POOL_OK
 ) 
__TBB_THROW
(
°d
::
bad_Æloc
());

254 
ölöe
 *
	gfixed_poﬁ
::
Æloˇã_ªque°
(
öçå_t
 
poﬁ_id
, 
size_t
 & 
byãs
) {

255 
	gfixed_poﬁ
 &
	g£lf
 = *
ªöãΩªt_ˇ°
<
fixed_poﬁ
*>(
poﬁ_id
);

256 
__TBBMALLOC_ASSERT
(0 !
£lf
.
my_size
, "The buffer mustÇot be usedÅwice.");

257 
	gbyãs
 = 
£lf
.
my_size
;

258 
	g£lf
.
	gmy_size
 = 0;

259  
	g£lf
.
	gmy_buf„r
;

263 
usög
 
	göãrÁ˚6
::
mem‹y_poﬁ_Æloˇt‹
;

264 
usög
 
	göãrÁ˚6
::
mem‹y_poﬁ
;

265 
usög
 
	göãrÁ˚6
::
fixed_poﬁ
;

268 #unde‡
__TBBMALLOC_ASSERT


	@viper/concurrentqueue-src/benchmarks/tbb/mutex.cpp

21 #i‡
_WIN32
||
_WIN64


22 
	~<î∫o.h
>

24 
	~"tbb/muãx.h
"

25 
	~"ôt_nŸify.h
"

27 
«me•a˚
 
	gtbb
 {

28 
	gmuãx
::
sc›ed_lock
::
öã∫Æ_acquúe
–
muãx
& 
m
 ) {

30 #i‡
_WIN32
||
_WIN64


31  
m
.
°©e
 ) {

32 
INITIALIZED
:

33 
HELD
:

34 
E¡îCrôiˇlSe˘i⁄
–&
m
.
im∂
 );

39 i‡(
	gm
.
	g°©e
==
HELD
)

40 
tbb
::
öã∫Æ
::
h™dÀ_≥º‹
(
EDEADLK
,"mutex::scoped_lock: deadlock caused byáttemptÅoÑeacquire held mutex");

41 
	gm
.
	g°©e
 = 
HELD
;

43 
	gDESTROYED
:

44 
__TBB_ASSERT
(
Ál£
,"mutex::scoped_lock: mutexálready destroyed");

47 
__TBB_ASSERT
(
Ál£
,"mutex::scoped_lock: illegal mutex state");

51 
	gîr‹_code
 = 
±hªad_muãx_lock
(&
m
.
im∂
);

52 if–
	gîr‹_code
 )

53 
	gtbb
::
öã∫Æ
::
h™dÀ_≥º‹
(
îr‹_code
,"mutex::scoped_lock:Öthread_mutex_lock failed");

55 
	gmy_muãx
 = &
m
;

58 
	gmuãx
::
sc›ed_lock
::
öã∫Æ_ªÀa£
() {

59 
__TBB_ASSERT
–
my_muãx
, "mutex::scoped_lock:Çot holdingá mutex" );

60 #i‡
_WIN32
||
_WIN64


61  
	gmy_muãx
->
	g°©e
 ) {

62 
	gINITIALIZED
:

63 
__TBB_ASSERT
(
Ál£
,"mutex::scoped_lock:ÅryÅoÑeleaseÅheÜock withoutácquisition");

65 
	gHELD
:

66 
my_muãx
->
°©e
 = 
INITIALIZED
;

67 
LóveCrôiˇlSe˘i⁄
(&
my_muãx
->
im∂
);

69 
	gDESTROYED
:

70 
__TBB_ASSERT
(
Ál£
,"mutex::scoped_lock: mutexálready destroyed");

73 
__TBB_ASSERT
(
Ál£
,"mutex::scoped_lock: illegal mutex state");

77 
	gîr‹_code
 = 
±hªad_muãx_u∆ock
(&
my_muãx
->
im∂
);

78 
__TBB_ASSERT_EX
(!
îr‹_code
, "mutex::scoped_lock:Öthread_mutex_unlock failed");

80 
	gmy_muãx
 = 
NULL
;

83 
boﬁ
 
	gmuãx
::
sc›ed_lock
::
öã∫Æ_åy_acquúe
–
muãx
& 
m
 ) {

84 #i‡
_WIN32
||
_WIN64


85  
m
.
°©e
 ) {

86 
INITIALIZED
:

87 
HELD
:

89 
	gDESTROYED
:

90 
__TBB_ASSERT
(
Ál£
,"mutex::scoped_lock: mutexálready destroyed");

93 
__TBB_ASSERT
(
Ál£
,"mutex::scoped_lock: illegal mutex state");

98 
boﬁ
 
	gªsu…
;

99 #i‡
_WIN32
||
_WIN64


100 
	gªsu…
 = 
TryE¡îCrôiˇlSe˘i⁄
(&
m
.
im∂
)!=0;

101 if–
	gªsu…
 ) {

102 
__TBB_ASSERT
(
m
.
°©e
!=
HELD
, "mutex::scoped_lock: deadlock caused byáttemptÅoÑeacquire held mutex");

103 
	gm
.
	g°©e
 = 
HELD
;

106 
	gªsu…
 = 
±hªad_muãx_åylock
(&
m
.
im∂
)==0;

108 if–
	gªsu…
 )

109 
	gmy_muãx
 = &
m
;

110  
	gªsu…
;

113 
	gmuãx
::
öã∫Æ_c⁄°ru˘
() {

114 #i‡
_WIN32
||
_WIN64


115 
InôülizeCrôiˇlSe˘i⁄Ex
(&
im∂
, 4000, 0);

116 
	g°©e
 = 
INITIALIZED
;

118 
	gîr‹_code
 = 
±hªad_muãx_öô
(&
im∂
,
NULL
);

119 if–
	gîr‹_code
 )

120 
	gtbb
::
öã∫Æ
::
h™dÀ_≥º‹
(
îr‹_code
,"mutex:Öthread_mutex_init failed");

122 
ITT_SYNC_CREATE
(&
im∂
, 
_T
("tbb::mutex"), _T(""));

125 
	gmuãx
::
öã∫Æ_de°roy
() {

126 #i‡
_WIN32
||
_WIN64


127  
°©e
 ) {

128 
INITIALIZED
:

129 
DñëeCrôiˇlSe˘i⁄
(&
im∂
);

131 
	gDESTROYED
:

132 
__TBB_ASSERT
(
Ál£
,"mutex:álready destroyed");

135 
__TBB_ASSERT
(
Ál£
,"mutex: illegal state for destruction");

138 
	g°©e
 = 
DESTROYED
;

140 
	gîr‹_code
 = 
±hªad_muãx_de°roy
(&
im∂
);

141 
__TBB_ASSERT_EX
(!
îr‹_code
,"mutex:Öthread_mutex_destroy failed");

	@viper/concurrentqueue-src/benchmarks/tbb/mutex.h

21 #i‚de‡
__TBB_muãx_H


22 
	#__TBB_muãx_H


	)

24 #i‡
_WIN32
||
_WIN64


25 
	~"machöe/wödows_≠i.h
"

27 
	~<±hªad.h
>

30 
	~<√w
>

31 
	~"Æig√d_•a˚.h
"

32 
	~"tbb_°ddef.h
"

33 
	~"tbb_¥ofûög.h
"

35 
«me•a˚
 
	gtbb
 {

40 ˛as†
	cmuãx
 : 
öã∫Æ
::
muãx_c›y_dïªˇãd_™d_dißbÀd
 {

41 
public
:

43 
muãx
() {

44 #i‡
TBB_USE_ASSERT
 || 
TBB_USE_THREADING_TOOLS


45 
öã∫Æ_c⁄°ru˘
();

47 #i‡
_WIN32
||
_WIN64


48 
InôülizeCrôiˇlSe˘i⁄Ex
(&
im∂
, 4000, 0);

50 
	gîr‹_code
 = 
±hªad_muãx_öô
(&
im∂
,
NULL
);

51 if–
	gîr‹_code
 )

52 
	gtbb
::
öã∫Æ
::
h™dÀ_≥º‹
(
îr‹_code
,"mutex:Öthread_mutex_init failed");

57 ~
muãx
() {

58 #i‡
TBB_USE_ASSERT


59 
öã∫Æ_de°roy
();

61 #i‡
_WIN32
||
_WIN64


62 
DñëeCrôiˇlSe˘i⁄
(&
im∂
);

64 
±hªad_muãx_de°roy
(&
im∂
);

70 
˛ass
 
	gsc›ed_lock
;

71 
‰õnd
 
˛ass
 
	gsc›ed_lock
;

76 ˛as†
	csc›ed_lock
 : 
öã∫Æ
::
no_c›y
 {

77 
public
:

79 
sc›ed_lock
(Ë: 
my_muãx
(
NULL
) {};

82 
sc›ed_lock
–
muãx
& mutex ) {

83 
acquúe
–
muãx
 );

87 ~
sc›ed_lock
() {

88 if–
	gmy_muãx
 )

89 
ªÀa£
();

93 
acquúe
–
muãx
& mutex ) {

94 #i‡
TBB_USE_ASSERT


95 
öã∫Æ_acquúe
(
muãx
);

97 
	gmuãx
.
lock
();

98 
	gmy_muãx
 = &
muãx
;

103 
boﬁ
 
åy_acquúe
–
muãx
& mutex ) {

104 #i‡
TBB_USE_ASSERT


105  
öã∫Æ_åy_acquúe
 (
muãx
);

107 
boﬁ
 
	gªsu…
 = 
muãx
.
åy_lock
();

108 if–
	gªsu…
 )

109 
	gmy_muãx
 = &
muãx
;

110  
	gªsu…
;

115 
ªÀa£
() {

116 #i‡
TBB_USE_ASSERT


117 
öã∫Æ_ªÀa£
 ();

119 
	gmy_muãx
->
u∆ock
();

120 
	gmy_muãx
 = 
NULL
;

124 
	g¥iv©e
:

126 
muãx
* 
my_muãx
;

129 
__TBB_EXPORTED_METHOD
 
öã∫Æ_acquúe
–
muãx
& 
m
 );

132 
boﬁ
 
__TBB_EXPORTED_METHOD
 
öã∫Æ_åy_acquúe
–
muãx
& 
m
 );

135 
__TBB_EXPORTED_METHOD
 
öã∫Æ_ªÀa£
();

137 
‰õnd
 
˛ass
 
	gmuãx
;

141 c⁄° 
boﬁ
 
	gis_rw_muãx
 = 
Ál£
;

142 c⁄° 
boﬁ
 
	gis_ªcursive_muãx
 = 
Ál£
;

143 c⁄° 
boﬁ
 
	gis_Áú_muãx
 = 
Ál£
;

148 
lock
() {

149 #i‡
TBB_USE_ASSERT


150 
	gÆig√d_•a˚
<
	gsc›ed_lock
> 
	gtmp
;

151 
√w
(
tmp
.
begö
()Ë
sc›ed_lock
(*
this
);

153 #i‡
_WIN32
||
_WIN64


154 
E¡îCrôiˇlSe˘i⁄
(&
im∂
);

156 
	gîr‹_code
 = 
±hªad_muãx_lock
(&
im∂
);

157 if–
	gîr‹_code
 )

158 
	gtbb
::
öã∫Æ
::
h™dÀ_≥º‹
(
îr‹_code
,"mutex:Öthread_mutex_lock failed");

165 
boﬁ
 
åy_lock
() {

166 #i‡
TBB_USE_ASSERT


167 
	gÆig√d_•a˚
<
	gsc›ed_lock
> 
	gtmp
;

168 
	gsc›ed_lock
& 
	gs
 = *
tmp
.
begö
();

169 
	gs
.
	gmy_muãx
 = 
NULL
;

170  
	gs
.
öã∫Æ_åy_acquúe
(*
this
);

172 #i‡
_WIN32
||
_WIN64


173  
TryE¡îCrôiˇlSe˘i⁄
(&
im∂
)!=0;

175  
±hªad_muãx_åylock
(&
im∂
)==0;

181 
u∆ock
() {

182 #i‡
TBB_USE_ASSERT


183 
	gÆig√d_•a˚
<
	gsc›ed_lock
> 
	gtmp
;

184 
	gsc›ed_lock
& 
	gs
 = *
tmp
.
begö
();

185 
	gs
.
	gmy_muãx
 = 
this
;

186 
	gs
.
öã∫Æ_ªÀa£
();

188 #i‡
_WIN32
||
_WIN64


189 
LóveCrôiˇlSe˘i⁄
(&
im∂
);

191 
±hªad_muãx_u∆ock
(&
im∂
);

197 #i‡
_WIN32
||
_WIN64


198 
LPCRITICAL_SECTION
 
	t«tive_h™dÀ_ty≥
;

200 
±hªad_muãx_t
* 
	t«tive_h™dÀ_ty≥
;

202 
«tive_h™dÀ_ty≥
 
«tive_h™dÀ
(Ë{  (
	g«tive_h™dÀ_ty≥
Ë&
	gim∂
; }

204 
	e°©e_t
 {

205 
	gINITIALIZED
=0x1234,

206 
	gDESTROYED
=0x789A,

207 
	gHELD
=0x56CD

209 
	g¥iv©e
:

210 #i‡
_WIN32
||
_WIN64


211 
CRITICAL_SECTION
 
im∂
;

212 
°©e_t
 
	g°©e
;

214 
±hªad_muãx_t
 
	gim∂
;

218 
__TBB_EXPORTED_METHOD
 
öã∫Æ_c⁄°ru˘
();

221 
__TBB_EXPORTED_METHOD
 
öã∫Æ_de°roy
();

223 #i‡
_WIN32
||
_WIN64


224 
	gpublic
:

226 
£t_°©e
–
°©e_t
 
to
 ) { 
°©e
 =Åo; }

230 
__TBB_DEFINE_PROFILING_SET_NAME
(
muãx
)

	@viper/concurrentqueue-src/benchmarks/tbb/null_mutex.h

21 #i‚de‡
__TBB_nuŒ_muãx_H


22 
	#__TBB_nuŒ_muãx_H


	)

24 
	~"tbb_°ddef.h
"

26 
«me•a˚
 
	gtbb
 {

31 ˛as†
	cnuŒ_muãx
 : 
öã∫Æ
::
muãx_c›y_dïªˇãd_™d_dißbÀd
 {

32 
public
:

34 ˛as†
	csc›ed_lock
 : 
öã∫Æ
::
no_c›y
 {

35 
public
:

36 
sc›ed_lock
() {}

37 
sc›ed_lock
–
nuŒ_muãx
& ) {}

38 ~
sc›ed_lock
() {}

39 
acquúe
–
nuŒ_muãx
& ) {}

40 
boﬁ
 
åy_acquúe
–
nuŒ_muãx
& ) {  
åue
; }

41 
ªÀa£
() {}

44 
nuŒ_muãx
() {}

47 c⁄° 
boﬁ
 
	gis_rw_muãx
 = 
Ál£
;

48 c⁄° 
boﬁ
 
	gis_ªcursive_muãx
 = 
åue
;

49 c⁄° 
boﬁ
 
	gis_Áú_muãx
 = 
åue
;

	@viper/concurrentqueue-src/benchmarks/tbb/null_rw_mutex.h

21 #i‚de‡
__TBB_nuŒ_rw_muãx_H


22 
	#__TBB_nuŒ_rw_muãx_H


	)

24 
	~"tbb_°ddef.h
"

26 
«me•a˚
 
	gtbb
 {

31 ˛as†
	cnuŒ_rw_muãx
 : 
öã∫Æ
::
muãx_c›y_dïªˇãd_™d_dißbÀd
 {

32 
public
:

34 ˛as†
	csc›ed_lock
 : 
öã∫Æ
::
no_c›y
 {

35 
public
:

36 
sc›ed_lock
() {}

37 
sc›ed_lock
–
nuŒ_rw_muãx
& , 
boﬁ
 = 
åue
 ) {}

38 ~
sc›ed_lock
() {}

39 
acquúe
–
nuŒ_rw_muãx
& , 
boﬁ
 = 
åue
 ) {}

40 
boﬁ
 
upgøde_to_wrôî
(Ë{  
åue
; }

41 
boﬁ
 
downgøde_to_ªadî
(Ë{  
	gåue
; }

42 
boﬁ
 
åy_acquúe
–
nuŒ_rw_muãx
& , boﬁ = 
åue
 ) { Årue; }

43 
ªÀa£
() {}

46 
nuŒ_rw_muãx
() {}

49 c⁄° 
boﬁ
 
	gis_rw_muãx
 = 
åue
;

50 c⁄° 
boﬁ
 
	gis_ªcursive_muãx
 = 
åue
;

51 c⁄° 
boﬁ
 
	gis_Áú_muãx
 = 
åue
;

	@viper/concurrentqueue-src/benchmarks/tbb/observer_proxy.cpp

21 
	~"tbb/tbb_c⁄fig.h
"

22 #i‡!
__TBB_ARENA_OBSERVER


23 #îr‹ 
__TBB_ARENA_OBSERVER
 
mu°
 
be
 
deföed


26 #i‡
__TBB_SCHEDULER_OBSERVER


28 
	~"ob£rvî_¥oxy.h
"

29 
	~"tbb_maö.h
"

30 
	~"govîn‹.h
"

31 
	~"scheduÀr.h
"

32 
	~"¨ía.h
"

34 
«me•a˚
 
	gtbb
 {

35 
«me•a˚
 
	göã∫Æ
 {

37 
	g∑dded
<
	gob£rvî_li°
> 
	gthe_globÆ_ob£rvî_li°
;

39 #i‡
TBB_USE_ASSERT


40 
	g©omic
<> 
	gob£rvî_¥oxy_cou¡
;

42 
	scheck_ob£rvî_¥oxy_cou¡
 {

43 ~
check_ob£rvî_¥oxy_cou¡
() {

44 if–
	gob£rvî_¥oxy_cou¡
!=0 ) {

45 
ru¡ime_w¨nög
–"Lóked %ld ob£rvî_¥oxy obje˘s\n", (
ob£rvî_¥oxy_cou¡
) );

50 
check_ob£rvî_¥oxy_cou¡
 
	gthe_check_ob£rvî_¥oxy_cou¡
;

53 
	göãrÁ˚6
::
èsk_scheduÀr_ob£rvî
* 
ob£rvî_¥oxy
::
gë_v6_ob£rvî
() {

54 if(
my_vîsi⁄
 !6Ë 
NULL
;

55  
	g°©ic_ˇ°
<
	göãrÁ˚6
::
èsk_scheduÀr_ob£rvî
*>(
my_ob£rvî
);

58 
boﬁ
 
	gob£rvî_¥oxy
::
is_globÆ
() {

59  !
gë_v6_ob£rvî
(Ë|| gë_v6_ob£rvî()->
my_c⁄ãxt_èg
 =
öãrÁ˚6
::
èsk_scheduÀr_ob£rvî
::
globÆ_èg
;

62 
	gob£rvî_¥oxy
::
ob£rvî_¥oxy
–
èsk_scheduÀr_ob£rvî_v3
& 
tso
 )

63 : 
my_li°
(
NULL
), 
my_√xt
(NULL), 
my_¥ev
(NULL), 
my_ob£rvî
(&
tso
)

65 #i‡
TBB_USE_ASSERT


66 ++
	gob£rvî_¥oxy_cou¡
;

69 
	gmy_ªf_cou¡
 = 1;

70 
	gmy_vîsi⁄
 = 
lﬂd
<
ªœxed
>(
my_ob£rvî
->
my_busy_cou¡
)

71 =
öãrÁ˚6
::
èsk_scheduÀr_ob£rvî
::
v6_åaô
 ? 6 : 0;

72 
__TBB_ASSERT
–
my_vîsi⁄
 >6 || !
lﬂd
<
ªœxed
>(
my_ob£rvî
->
my_busy_cou¡
), 
NULL
 );

75 #i‡
TBB_USE_ASSERT


76 
	gob£rvî_¥oxy
::~
ob£rvî_¥oxy
 () {

77 
__TBB_ASSERT
–!
my_ªf_cou¡
, "AttemptÅo destroyÖroxy still in use" );

78 
pois⁄_vÆue
(
my_ªf_cou¡
);

79 
pois⁄_poöãr
(
my_¥ev
);

80 
pois⁄_poöãr
(
my_√xt
);

81 --
	gob£rvî_¥oxy_cou¡
;

85 
	gãm∂©e
<
mem‹y_£m™tics
 
	gM
, 
˛ass
 
	gT
, cœs†
	gV
>

86 
T
 
©omic_„tch_™d_°‹e
 ( T* 
addr
, c⁄° 
V
& 
vÆ
 ) {

87  (
	gT
)
	g©omic_åaôs
<(T), 
	gM
>::
„tch_™d_°‹e
–
addr
, (
T
)
vÆ
 );

90 
	gob£rvî_li°
::
˛ór
 () {

91 
__TBB_ASSERT
–
this
 !&
the_globÆ_ob£rvî_li°
, "Method clear() cannot be used onÅheÜist of global observers" );

94 
__TBB_ASSERT
–!
em±y
(), 
NULL
 );

96 
sc›ed_lock
 
lock
(
muãx
(), 
åue
);

97 
ob£rvî_¥oxy
 *
	g√xt
 = 
my_hód
;

98  
ob£rvî_¥oxy
 *
	gp
 = 
√xt
 ) {

99 
__TBB_ASSERT
–
p
->
my_vîsi⁄
 >6, 
NULL
 );

100 
	g√xt
 = 
p
->
my_√xt
;

103 
èsk_scheduÀr_ob£rvî_v3
 *
	gobs
 = 
p
->
my_ob£rvî
;

106 i‡–!
	gobs
 || !(
	gp
 = (
ob£rvî_¥oxy
*)
__TBB_FëchAndSt‹eW
(&
obs
->
my_¥oxy
, 0)) )

109 
__TBB_ASSERT
–!
√xt
 || 
p
 =√xt->
my_¥ev
, 
NULL
 );

110 
__TBB_ASSERT
–
is_Æive
(
p
->
my_ªf_cou¡
), "Observer'sÖroxy diedÖrematurely" );

111 
__TBB_ASSERT
–
p
->
my_ªf_cou¡
 == 1, "Reference for observer is missing" );

112 #i‡
TBB_USE_ASSERT


113 
	gp
->
	gmy_ob£rvî
 = 
NULL
;

114 
	gp
->
	gmy_ªf_cou¡
 = 0;

116 
ªmove
(
p
);

117 
dñëe
 
	gp
;

120  
	gmy_hód
 )

121 
__TBB_Yõld
();

124 
	gob£rvî_li°
::
ö£π
 ( 
ob£rvî_¥oxy
* 
p
 ) {

125 
sc›ed_lock
 
lock
(
muãx
(), 
åue
);

126 i‡–
	gmy_hód
 ) {

127 
	gp
->
	gmy_¥ev
 = 
my_èû
;

128 
	gmy_èû
->
	gmy_√xt
 = 
p
;

131 
	gmy_hód
 = 
p
;

132 
	gmy_èû
 = 
p
;

135 
	gob£rvî_li°
::
ªmove
 ( 
ob£rvî_¥oxy
* 
p
 ) {

136 
__TBB_ASSERT
–
my_hód
, "AttemptÅoÑemoveán item frománÉmptyÜist" );

137 
__TBB_ASSERT
–!
my_èû
->
my_√xt
, "Last item's my_next must be NULL" );

138 if–
	gp
 =
my_èû
 ) {

139 
__TBB_ASSERT
–!
p
->
my_√xt
, 
NULL
 );

140 
	gmy_èû
 = 
p
->
my_¥ev
;

143 
__TBB_ASSERT
–
p
->
my_√xt
, 
NULL
 );

144 
	gp
->
	gmy_√xt
->
	gmy_¥ev
 = 
p
->
my_¥ev
;

146 i‡–
	gp
 =
my_hód
 ) {

147 
__TBB_ASSERT
–!
p
->
my_¥ev
, 
NULL
 );

148 
	gmy_hód
 = 
p
->
my_√xt
;

151 
__TBB_ASSERT
–
p
->
my_¥ev
, 
NULL
 );

152 
	gp
->
	gmy_¥ev
->
	gmy_√xt
 = 
p
->
my_√xt
;

154 
__TBB_ASSERT
–(
my_hód
 && 
my_èû
Ë|| (!my_hód && !my_èû), 
NULL
 );

157 
	gob£rvî_li°
::
ªmove_ªf
–
ob£rvî_¥oxy
* 
p
 ) {

158 
r
 = 
p
->
my_ªf_cou¡
;

159 
__TBB_ASSERT
–
is_Æive
(
r
), 
NULL
 );

160 
	gr
>1) {

161 
__TBB_ASSERT
–
r
!=0, 
NULL
 );

162 
	gr_ﬁd
 = 
p
->
my_ªf_cou¡
.
com∑ª_™d_sw≠
(
r
-1,r);

163 if–
	gr_ﬁd
==
r
 ) {

167 
	gr
 = 
r_ﬁd
;

169 
__TBB_ASSERT
–
r
==1, 
NULL
 );

173 
	gob£rvî_li°
::
sc›ed_lock
 
lock
(
muãx
(), 
åue
);

174 
	gr
 = --
p
->
my_ªf_cou¡
;

175 if–!
	gr
 )

176 
ªmove
(
p
);

178 
__TBB_ASSERT
–
r
 || !
p
->
my_ªf_cou¡
, 
NULL
 );

179 if–!
	gr
 )

180 
dñëe
 
	gp
;

183 
	gob£rvî_li°
::
do_nŸify_íåy_ob£rvîs
–
ob£rvî_¥oxy
*& 
œ°
, 
boﬁ
 
w‹kî
 ) {

185 
ob£rvî_¥oxy
 *
	gp
 = 
œ°
, *
	g¥ev
 = 
p
;

187 
èsk_scheduÀr_ob£rvî_v3
* 
	gtso
=
NULL
;

190 
sc›ed_lock
 
lock
(
muãx
(), 
Ál£
);

192 if–
	gp
 ) {

194 if–
ob£rvî_¥oxy
* 
	gq
 = 
p
->
my_√xt
 ) {

195 if–
p
 =
¥ev
 )

196 
ªmove_ªf_Á°
(
¥ev
);

197 
	gp
 = 
q
;

201 if–
	gp
 =
¥ev
 ) {

203 
__TBB_ASSERT
(
p
->
my_ªf_cou¡
 >1 + (p->
my_ob£rvî
?1:0), 
NULL
);

206 
__TBB_ASSERT
(
p
->
my_ªf_cou¡
, 
NULL
);

207 ++
	gp
->
	gmy_ªf_cou¡
;

208 if–
	g¥ev
 ) {

209 
	glock
.
ªÀa£
();

210 
ªmove_ªf
(
¥ev
);

213 
	gœ°
 = 
p
;

218 
	gp
 = 
my_hód
;

219 if–!
	gp
 )

222 
	gtso
 = 
p
->
my_ob£rvî
;

223 }  !
	gtso
 );

224 ++
	gp
->
	gmy_ªf_cou¡
;

225 ++
	gtso
->
	gmy_busy_cou¡
;

227 
__TBB_ASSERT
–!
¥ev
 || 
p
!ıªv, 
NULL
 );

229 if–
	g¥ev
 )

230 
ªmove_ªf
(
¥ev
);

234 
	gtso
->
⁄_scheduÀr_íåy
(
w‹kî
);

235 
__TBB_ASSERT
(
p
->
my_ªf_cou¡
, 
NULL
);

236 
öçå_t
 
	gbc
 = --
tso
->
my_busy_cou¡
;

237 
__TBB_ASSERT_EX
–
bc
>=0, "my_busy_count underflowed" );

238 
	g¥ev
 = 
p
;

242 
	gob£rvî_li°
::
do_nŸify_exô_ob£rvîs
–
ob£rvî_¥oxy
* 
œ°
, 
boﬁ
 
w‹kî
 ) {

244 
ob£rvî_¥oxy
 *
	gp
 = 
NULL
, *
	g¥ev
 = NULL;

246 
èsk_scheduÀr_ob£rvî_v3
* 
	gtso
=
NULL
;

249 
sc›ed_lock
 
lock
(
muãx
(), 
Ál£
);

251 if–
	gp
 ) {

253 if–
	gp
 !
œ°
 ) {

254 
__TBB_ASSERT
–
p
->
my_√xt
, "List items before 'last' must have valid my_nextÖointer" );

255 if–
	gp
 =
¥ev
 )

256 
ªmove_ªf_Á°
(
¥ev
);

257 
	gp
 = 
p
->
my_√xt
;

260 
ªmove_ªf_Á°
(
p
);

261 if–
	gp
 ) {

262 
	glock
.
ªÀa£
();

263 
ªmove_ªf
(
p
);

269 
	gp
 = 
my_hód
;

270 
__TBB_ASSERT
–
p
, "Nonzero 'last' must guaranteeÅhatÅhe globalÜist isÇon-empty" );

272 
	gtso
 = 
p
->
my_ob£rvî
;

273 }  !
	gtso
 );

275 i‡–
	gp
 !
œ°
 )

276 ++
p
->
my_ªf_cou¡
;

277 ++
	gtso
->
	gmy_busy_cou¡
;

279 
__TBB_ASSERT
–!
¥ev
 || 
p
!ıªv, 
NULL
 );

280 if–
	g¥ev
 )

281 
ªmove_ªf
(
¥ev
);

285 
	gtso
->
⁄_scheduÀr_exô
(
w‹kî
);

286 
__TBB_ASSERT
(
p
->
my_ªf_cou¡
 ||Ö =
œ°
, 
NULL
);

287 
öçå_t
 
	gbc
 = --
tso
->
my_busy_cou¡
;

288 
__TBB_ASSERT_EX
–
bc
>=0, "my_busy_count underflowed" );

289 
	g¥ev
 = 
p
;

293 #i‡
__TBB_SLEEP_PERMISSION


294 
boﬁ
 
	gob£rvî_li°
::
ask_≥rmissi⁄_to_Àave
() {

295 
__TBB_ASSERT
–
this
 =&
the_globÆ_ob£rvî_li°
, "This method cannot be used onÜists ofárena observers" );

296 if–!
	gmy_hód
 )  
	gåue
;

298 
ob£rvî_¥oxy
 *
	gp
 = 
NULL
, *
	g¥ev
 = NULL;

299 
boﬁ
 
	gªsu…
 = 
åue
;

300  
	gªsu…
 ) {

301 
èsk_scheduÀr_ob£rvî
* 
	gtso
 = 
NULL
;

304 
sc›ed_lock
 
lock
(
muãx
(), 
Ál£
);

306 if–
	gp
 ) {

308 
ob£rvî_¥oxy
* 
	gq
 = 
p
->
my_√xt
;

310 if–
	gp
 =
¥ev
 )

311 
ªmove_ªf_Á°
(
¥ev
);

312 if–
	gq
 ) 
	gp
 = 
q
;

315 if–
	g¥ev
 ) {

316 
	glock
.
ªÀa£
();

317 
ªmove_ªf
(
¥ev
);

319  
	gªsu…
;

323 
	gp
 = 
my_hód
;

324 if–!
	gp
 )

325  
	gªsu…
;

327 
	gtso
 = 
p
->
gë_v6_ob£rvî
();

328 }  !
	gtso
 );

329 ++
	gp
->
	gmy_ªf_cou¡
;

330 ++
	gtso
->
	gmy_busy_cou¡
;

332 
__TBB_ASSERT
–!
¥ev
 || 
p
!ıªv, 
NULL
 );

334 if–
	g¥ev
 )

335 
ªmove_ªf
(
¥ev
);

339 
	gªsu…
 = 
tso
->
may_¶ìp
();

340 
__TBB_ASSERT
(
p
->
my_ªf_cou¡
, 
NULL
);

341 
öçå_t
 
	gbc
 = --
tso
->
my_busy_cou¡
;

342 
__TBB_ASSERT_EX
–
bc
>=0, "my_busy_count underflowed" );

343 
	g¥ev
 = 
p
;

345 if–
	g¥ev
 )

346 
ªmove_ªf
(
¥ev
);

347  
	gªsu…
;

351 
	gèsk_scheduÀr_ob£rvî_v3
::
ob£rve
–
boﬁ
 
íabÀ
 ) {

352 if–
íabÀ
 ) {

353 if–!
my_¥oxy
 ) {

354 
my_¥oxy
 = 
√w
 
ob£rvî_¥oxy
–*
this
 );

355 
	gmy_busy_cou¡
 = 0;

356 i‡–!
	gmy_¥oxy
->
is_globÆ
() ) {

358 
gíîic_scheduÀr
* 
	gs
 = 
govîn‹
::
loˇl_scheduÀr_if_öôülized
();

359 #i‡
__TBB_TASK_ARENA


360 
__TBB_ASSERT
–
my_¥oxy
->
gë_v6_ob£rvî
(), 
NULL
 );

361 
öçå_t
 
	gèg
 = 
my_¥oxy
->
gë_v6_ob£rvî
()->
my_c⁄ãxt_èg
;

362 if–
	gèg
 !
öãrÁ˚6
::
èsk_scheduÀr_ob£rvî
::
im∂icô_èg
 ) {

363 
èsk_¨ía
 *
a
 = 
ªöãΩªt_ˇ°
<èsk_¨ía*>(
èg
);

364 
	ga
->
öôülize
();

365 
	gmy_¥oxy
->
	gmy_li°
 = &
a
->
my_¨ía
->
my_ob£rvîs
;

369 if–!
	gs
 ) s = 
govîn‹
::
öô_scheduÀr
–()
èsk_scheduÀr_öô
::
autom©ic
, 0, 
åue
 );

370 
__TBB_ASSERT
–
__TBB_InôOn˚
::
öôüliz©i⁄_d⁄e
(), 
NULL
 );

371 
__TBB_ASSERT
–
s
 && s->
my_¨ía
, 
NULL
 );

372 
	gmy_¥oxy
->
	gmy_li°
 = &
s
->
my_¨ía
->
my_ob£rvîs
;

374 
	gmy_¥oxy
->
	gmy_li°
->
ö£π
(
my_¥oxy
);

376 if(
	gs
 && &s->
	gmy_¨ía
->
	gmy_ob£rvîs
 =
my_¥oxy
->
my_li°
 )

377 
my_¥oxy
->
my_li°
->
nŸify_íåy_ob£rvîs
–
s
->
my_œ°_loˇl_ob£rvî
, s->
is_w‹kî
() );

380 if–!
	g__TBB_InôOn˚
::
öôüliz©i⁄_d⁄e
() )

381 
DoO√TimeInôüliz©i⁄s
();

382 
	gmy_¥oxy
->
	gmy_li°
 = &
the_globÆ_ob£rvî_li°
;

383 
	gmy_¥oxy
->
	gmy_li°
->
ö£π
(
my_¥oxy
);

384 if–
gíîic_scheduÀr
* 
	gs
 = 
govîn‹
::
loˇl_scheduÀr_if_öôülized
() ) {

387 
the_globÆ_ob£rvî_li°
.
nŸify_íåy_ob£rvîs
–
s
->
my_œ°_globÆ_ob£rvî
, s->
is_w‹kî
() );

394 i‡–
ob£rvî_¥oxy
* 
	g¥oxy
 = (ob£rvî_¥oxy*)
__TBB_FëchAndSt‹eW
(&
my_¥oxy
, 0) ) {

396 
__TBB_ASSERT
–
¥oxy
->
my_ob£rvî
 =
this
, 
NULL
 );

397 
__TBB_ASSERT
–
is_Æive
(
¥oxy
->
my_ªf_cou¡
), "Observer'sÖroxy diedÖrematurely" );

398 
__TBB_ASSERT
–
¥oxy
->
my_ªf_cou¡
 >= 1, "reference for observer missing" );

399 
	gob£rvî_li°
 &
	gli°
 = *
¥oxy
->
my_li°
;

402 
	gob£rvî_li°
::
sc›ed_lock
 
lock
(
li°
.
muãx
(), 
åue
);

403 
	g¥oxy
->
	gmy_ob£rvî
 = 
NULL
;

405 if–!--
	g¥oxy
->
	gmy_ªf_cou¡
 ) {

406 
	gli°
.
ªmove
(
¥oxy
);

407 
__TBB_ASSERT
–!
¥oxy
->
my_ªf_cou¡
, 
NULL
 );

408 
dñëe
 
	g¥oxy
;

411  
	gmy_busy_cou¡
 )

412 
__TBB_Yõld
();

	@viper/concurrentqueue-src/benchmarks/tbb/observer_proxy.h

21 #i‚de‡
_TBB_ob£rvî_¥oxy_H


22 
	#_TBB_ob£rvî_¥oxy_H


	)

24 #i‡
__TBB_SCHEDULER_OBSERVER


26 
	~"scheduÀr_comm⁄.h
"

27 
	~"tbb/èsk_scheduÀr_ob£rvî.h
"

28 
	~"tbb/•ö_rw_muãx.h
"

29 
	~"tbb/Æig√d_•a˚.h
"

31 
«me•a˚
 
	gtbb
 {

32 
«me•a˚
 
	göã∫Æ
 {

34 ˛as†
	cob£rvî_li°
 {

35 
‰õnd
 
˛ass
 
	g¨ía
;

39 
	gÆig√d_•a˚
<
	t•ö_rw_muãx
> 
	tmy_muãx_ty≥
;

42 
ob£rvî_¥oxy
* 
	gmy_hód
;

45 
ob£rvî_¥oxy
* 
	gmy_èû
;

48 
my_muãx_ty≥
 
	gmy_muãx
;

51 
¨ía
* 
	gmy_¨ía
;

55 
ölöe
 
ªmove_ªf_Á°
–
ob£rvî_¥oxy
*& 
p
 );

58 
do_nŸify_íåy_ob£rvîs
–
ob£rvî_¥oxy
*& 
œ°
, 
boﬁ
 
w‹kî
 );

61 
do_nŸify_exô_ob£rvîs
–
ob£rvî_¥oxy
* 
œ°
, 
boﬁ
 
w‹kî
 );

63 
	gpublic
:

64 
ob£rvî_li°
 (Ë: 
my_hód
(
NULL
), 
my_èû
(NULL) {}

68 
˛ór
 ();

71 
ö£π
 ( 
ob£rvî_¥oxy
* 
p
 );

74 
ªmove
 ( 
ob£rvî_¥oxy
* 
p
 );

78 
ªmove_ªf
–
ob£rvî_¥oxy
* 
p
 );

81 
	g•ö_rw_muãx
::
	tsc›ed_lock
 scoped_lock;

84 
	g•ö_rw_muãx
& 
muãx
 (Ë{  
	gmy_muãx
.
begö
()[0]; }

86 
boﬁ
 
em±y
 (Ëc⁄° {  
	gmy_hód
 =
NULL
; }

91 
ölöe
 
nŸify_íåy_ob£rvîs
–
ob£rvî_¥oxy
*& 
œ°
, 
boﬁ
 
w‹kî
 );

94 
ölöe
 
nŸify_exô_ob£rvîs
–
ob£rvî_¥oxy
*& 
œ°
, 
boﬁ
 
w‹kî
 );

97 
boﬁ
 
ask_≥rmissi⁄_to_Àave
();

104 ˛as†
	cob£rvî_¥oxy
 {

105 
‰õnd
 
˛ass
 
	gèsk_scheduÀr_ob£rvî_v3
;

106 
‰õnd
 
˛ass
 
	gob£rvî_li°
;

111 
	g©omic
<> 
	gmy_ªf_cou¡
;

113 
ob£rvî_li°
* 
	gmy_li°
;

116 
ob£rvî_¥oxy
* 
	gmy_√xt
;

119 
ob£rvî_¥oxy
* 
	gmy_¥ev
;

121 
èsk_scheduÀr_ob£rvî_v3
* 
	gmy_ob£rvî
;

123 
	gmy_vîsi⁄
;

125 
	göãrÁ˚6
::
èsk_scheduÀr_ob£rvî
* 
gë_v6_ob£rvî
();

126 
boﬁ
 
is_globÆ
();

129 
ob£rvî_¥oxy
–
èsk_scheduÀr_ob£rvî_v3
& );

131 #i‡
TBB_USE_ASSERT


132 ~
ob£rvî_¥oxy
();

136 
	gob£rvî_¥oxy
& 
	g›î©‹
 = ( c⁄° 
ob£rvî_¥oxy
& );

139 
ölöe
 
	gob£rvî_li°
::
ªmove_ªf_Á°
–
ob£rvî_¥oxy
*& 
p
 ) {

140 if–
p
->
my_ob£rvî
 ) {

142 
r
 = --
p
->
my_ªf_cou¡
;

143 
__TBB_ASSERT_EX
–
r
, 
NULL
 );

144 
	gp
 = 
NULL
;

150 
ölöe
 
	gob£rvî_li°
::
nŸify_íåy_ob£rvîs
–
ob£rvî_¥oxy
*& 
œ°
, 
boﬁ
 
w‹kî
 ) {

151 i‡–
	gœ°
 =
my_èû
 )

153 
do_nŸify_íåy_ob£rvîs
–
œ°
, 
w‹kî
 );

156 
ölöe
 
	gob£rvî_li°
::
nŸify_exô_ob£rvîs
–
ob£rvî_¥oxy
*& 
œ°
, 
boﬁ
 
w‹kî
 ) {

157 i‡–!
	gœ°
 )

159 
__TBB_ASSERT
(
is_Æive
((
uöçå_t
)
œ°
), 
NULL
);

160 
do_nŸify_exô_ob£rvîs
–
œ°
, 
w‹kî
 );

161 
__TBB_ASSERT
(
œ°
, 
NULL
);

162 
pois⁄_vÆue
(
œ°
);

165 
∑dded
<
ob£rvî_li°
> 
the_globÆ_ob£rvî_li°
;

	@viper/concurrentqueue-src/benchmarks/tbb/parallel_do.h

21 #i‚de‡
__TBB_∑øŒñ_do_H


22 
	#__TBB_∑øŒñ_do_H


	)

24 
	~"öã∫Æ/_ønge_ôî©‹.h
"

25 
	~"èsk.h
"

26 
	~"Æig√d_•a˚.h
"

27 
	~<ôî©‹
>

29 
«me•a˚
 
	gtbb
 {

32 
«me•a˚
 
	göã∫Æ
 {

33 
	gãm∂©e
<
ty≥«me
 
	gBody
,Åy≥«mê
	gIãm
> 
˛ass
 
	g∑øŒñ_do_„edî_im∂
;

34 
	gãm∂©e
<
ty≥«me
 
	gBody
> 
˛ass
 
	gdo_group_èsk
;

37 
	gãm∂©e
<
ty≥«me
 
	gT
>

38 
	s°rù
 { 
T
 
	tty≥
; };

39 
	gãm∂©e
<
ty≥«me
 
	gT
>

40 
	g°rù
<
	gT
&> { 
T
 
	tty≥
; };

41 
	gãm∂©e
<
ty≥«me
 
	gT
>

42 
	g°rù
<c⁄° 
	gT
&> { 
T
 
	tty≥
; };

43 
	gãm∂©e
<
ty≥«me
 
	gT
>

44 
	g°rù
<vﬁ©ûê
	gT
&> { 
T
 
	tty≥
; };

45 
	gãm∂©e
<
ty≥«me
 
	gT
>

46 
	g°rù
<c⁄° vﬁ©ûê
	gT
&> { 
T
 
	tty≥
; };

49 
	gãm∂©e
<
ty≥«me
 
	gT
>

50 
	g°rù
<c⁄° 
	gT
> { 
T
 
	tty≥
; };

51 
	gãm∂©e
<
ty≥«me
 
	gT
>

52 
	g°rù
<vﬁ©ûê
	gT
> { 
T
 
	tty≥
; };

53 
	gãm∂©e
<
ty≥«me
 
	gT
>

54 
	g°rù
<c⁄° vﬁ©ûê
	gT
> { 
T
 
	tty≥
; };

60 
	gãm∂©e
<
ty≥«me
 
	gIãm
>

61 ˛as†
	c∑øŒñ_do_„edî
: 
öã∫Æ
::
no_c›y


63 
∑øŒñ_do_„edî
() {}

64 
vútuÆ
 ~
∑øŒñ_do_„edî
 () {}

65 
vútuÆ
 
öã∫Æ_add
–c⁄° 
Iãm
& 
ôem
 ) = 0;

66 
	gãm∂©e
<
ty≥«me
 
	gBody_
,Åy≥«mê
	gIãm_
> 
‰õnd
 
˛ass
 
	göã∫Æ
::
∑øŒñ_do_„edî_im∂
;

67 
	gpublic
:

69 
add
–c⁄° 
Iãm
& 
ôem
 ) {
öã∫Æ_add
(item);}

73 
«me•a˚
 
	göã∫Æ
 {

77 
	gãm∂©e
<
˛ass
 
	gBody
, 
ty≥«me
 
	gIãm
>

78 ˛as†
	c∑øŒñ_do_›î©‹_£À˘‹


80 
	g∑øŒñ_do_„edî
<
	tIãm
> 
	tFìdî
;

81 
	gãm∂©e
<
ty≥«me
 
	gA1
,Åy≥«mê
	gA2
,Åy≥«mê
	gCvIãm
 >

82 
öã∫Æ_ˇŒ
–c⁄° 
Body
& 
obj
, 
A1
& 
¨g1
, 
A2
&, (Body::*)(
CvIãm
) const ) {

83 
obj
(
¨g1
);

85 
	gãm∂©e
<
ty≥«me
 
	gA1
,Åy≥«mê
	gA2
,Åy≥«mê
	gCvIãm
 >

86 
öã∫Æ_ˇŒ
–c⁄° 
Body
& 
obj
, 
A1
& 
¨g1
, 
A2
& 
¨g2
, (Body::*)(
CvIãm
, 
∑øŒñ_do_„edî
<
Iãm
>&) const ) {

87 
obj
(
¨g1
, 
¨g2
);

90 
	gpublic
:

91 
ãm∂©e
<
ty≥«me
 
A1
,Åy≥«mê
	gA2
 >

92 
ˇŒ
–c⁄° 
Body
& 
obj
, 
A1
& 
¨g1
, 
A2
& 
¨g2
 )

94 
öã∫Æ_ˇŒ
–
obj
, 
¨g1
, 
¨g2
, &
Body
::
›î©‹
() );

101 
	gãm∂©e
<
ty≥«me
 
	gBody
,Åy≥«mê
	gIãm
>

102 ˛as†
	cdo_ôî©i⁄_èsk
: 
public
 
èsk


104 
∑øŒñ_do_„edî_im∂
<
	tBody
, 
	tIãm
> 
	t„edî_ty≥
;

106 
Iãm
 
	gmy_vÆue
;

107 
	g„edî_ty≥
& 
	gmy_„edî
;

109 
do_ôî©i⁄_èsk
–c⁄° 
Iãm
& 
vÆue
, 
„edî_ty≥
& 
„edî
 ) :

110 
my_vÆue
(
vÆue
), 
my_„edî
(
„edî
)

114 
èsk
* 
execuã
()

116 
	g∑øŒñ_do_›î©‹_£À˘‹
<
	gBody
, 
	gIãm
>::
ˇŒ
(*
my_„edî
.
my_body
, 
my_vÆue
, my_feeder);

117  
	gNULL
;

120 
	gãm∂©e
<
ty≥«me
 
	gBody_
,Åy≥«mê
	gIãm_
> 
‰õnd
 
˛ass
 
	g∑øŒñ_do_„edî_im∂
;

123 
	gãm∂©e
<
ty≥«me
 
	gIãøt‹
,Åy≥«mê
	gBody
,Åy≥«mê
	gIãm
>

124 ˛as†
	cdo_ôî©i⁄_èsk_ôî
: 
public
 
èsk


126 
∑øŒñ_do_„edî_im∂
<
	tBody
, 
	tIãm
> 
	t„edî_ty≥
;

128 
Iãøt‹
 
	gmy_ôî
;

129 
	g„edî_ty≥
& 
	gmy_„edî
;

131 
do_ôî©i⁄_èsk_ôî
–c⁄° 
Iãøt‹
& 
ôî
, 
„edî_ty≥
& 
„edî
 ) :

132 
my_ôî
(
ôî
), 
my_„edî
(
„edî
)

136 
èsk
* 
execuã
()

138 
	g∑øŒñ_do_›î©‹_£À˘‹
<
	gBody
, 
	gIãm
>::
ˇŒ
(*
my_„edî
.
my_body
, *
my_ôî
, my_feeder);

139  
	gNULL
;

142 
	gãm∂©e
<
ty≥«me
 
	gIãøt‹_
,Åy≥«mê
	gBody_
,Åy≥«mê
	gIãm_
> 
‰õnd
 
˛ass
 
	gdo_group_èsk_f‹w¨d
;

143 
	gãm∂©e
<
ty≥«me
 
	gBody_
,Åy≥«mê
	gIãm_
> 
‰õnd
 
˛ass
 
	gdo_group_èsk_öput
;

144 
	gãm∂©e
<
ty≥«me
 
	gIãøt‹_
,Åy≥«mê
	gBody_
,Åy≥«mê
	gIãm_
> 
‰õnd
 
˛ass
 
	gdo_èsk_ôî
;

150 
	gãm∂©e
<
˛ass
 
	gBody
, 
ty≥«me
 
	gIãm
>

151 
˛ass
 
	g∑øŒñ_do_„edî_im∂
 : 
public
 
∑øŒñ_do_„edî
<
Iãm
>

154 
öã∫Æ_add
–c⁄° 
Iãm
& 
ôem
 )

156 
do_ôî©i⁄_èsk
<
	tBody
, 
	tIãm
> 
	tôî©i⁄_ty≥
;

158 
	gôî©i⁄_ty≥
& 
	gt
 = *
√w
 (
èsk
::
Æloˇã_addôi⁄Æ_chûd_of
(*
my_b¨rõr
)Ë
ôî©i⁄_ty≥
(
ôem
, *
this
);

160 
	gt
.
•awn
–
t
 );

162 
	gpublic
:

163 c⁄° 
Body
* 
my_body
;

164 
em±y_èsk
* 
	gmy_b¨rõr
;

166 
∑øŒñ_do_„edî_im∂
()

168 
	gmy_b¨rõr
 = 
√w
–
èsk
::
Æloˇã_roŸ
(ËË
em±y_èsk
();

169 
__TBB_ASSERT
(
my_b¨rõr
, "rootÅaskállocation failed");

172 #i‡
__TBB_TASK_GROUP_CONTEXT


173 
∑øŒñ_do_„edî_im∂
(
tbb
::
èsk_group_c⁄ãxt
 &
c⁄ãxt
)

175 
my_b¨rõr
 = 
√w
–
èsk
::
Æloˇã_roŸ
(
c⁄ãxt
ËË
em±y_èsk
();

176 
__TBB_ASSERT
(
my_b¨rõr
, "rootÅaskállocation failed");

180 ~
∑øŒñ_do_„edî_im∂
()

182 
	gmy_b¨rõr
->
de°roy
(*
my_b¨rõr
);

191 
	gãm∂©e
<
ty≥«me
 
	gIãøt‹
,Åy≥«mê
	gBody
,Åy≥«mê
	gIãm
>

192 ˛as†
	cdo_group_èsk_f‹w¨d
: 
public
 
èsk


194 c⁄° 
size_t
 
max_¨g_size
 = 4;

196 
	g∑øŒñ_do_„edî_im∂
<
	tBody
, 
	tIãm
> 
	t„edî_ty≥
;

198 
	g„edî_ty≥
& 
	gmy_„edî
;

199 
Iãøt‹
 
	gmy_fú°
;

200 
size_t
 
	gmy_size
;

202 
do_group_èsk_f‹w¨d
–
Iãøt‹
 
fú°
, 
size_t
 
size
, 
„edî_ty≥
& 
„edî
 )

203 : 
my_„edî
(
„edî
), 
my_fú°
(
fú°
), 
my_size
(
size
)

206  
èsk
* 
execuã
()

208 
	gdo_ôî©i⁄_èsk_ôî
<
	tIãøt‹
, 
	tBody
, 
	tIãm
> 
	tôî©i⁄_ty≥
;

209 
__TBB_ASSERT
–
my_size
>0, 
NULL
 );

210 
èsk_li°
 
	gli°
;

211 
èsk
* 
	gt
;

212 
size_t
 
	gk
=0;

214 
	gt
 = 
√w
–
Æloˇã_chûd
(ËË
ôî©i⁄_ty≥
–
my_fú°
, 
my_„edî
 );

215 ++
	gmy_fú°
;

216 if–++
	gk
==
my_size
 ) ;

217 
	gli°
.
push_back
(*
t
);

219 
£t_ªf_cou¡
((
k
+1));

220 
•awn
(
li°
);

221 
•awn_™d_waô_f‹_Æl
(*
t
);

222  
	gNULL
;

225 
	gãm∂©e
<
ty≥«me
 
	gIãøt‹_
,Åy≥«mê
	gBody_
,Åy≥«mê
	g_Iãm
> 
‰õnd
 
˛ass
 
	gdo_èsk_ôî
;

228 
	gãm∂©e
<
ty≥«me
 
	gBody
,Åy≥«mê
	gIãm
>

229 ˛as†
	cdo_group_èsk_öput
: 
public
 
èsk


231 c⁄° 
size_t
 
max_¨g_size
 = 4;

233 
	g∑øŒñ_do_„edî_im∂
<
	tBody
, 
	tIãm
> 
	t„edî_ty≥
;

235 
	g„edî_ty≥
& 
	gmy_„edî
;

236 
size_t
 
	gmy_size
;

237 
	gÆig√d_•a˚
<
	gIãm
, 
	gmax_¨g_size
> 
	gmy_¨g
;

239 
do_group_èsk_öput
–
„edî_ty≥
& 
„edî
 )

240 : 
my_„edî
(
„edî
), 
my_size
(0)

243  
èsk
* 
execuã
()

245 
	gdo_ôî©i⁄_èsk_ôî
<
	tIãm
*, 
	tBody
, Iãm> 
	tôî©i⁄_ty≥
;

246 
__TBB_ASSERT
–
my_size
>0, 
NULL
 );

247 
èsk_li°
 
	gli°
;

248 
èsk
* 
	gt
;

249 
size_t
 
	gk
=0;

251 
	gt
 = 
√w
–
Æloˇã_chûd
(ËË
ôî©i⁄_ty≥
–
my_¨g
.
begö
(Ë+ 
k
, 
my_„edî
 );

252 if–++
	gk
==
my_size
 ) ;

253 
	gli°
.
push_back
(*
t
);

255 
£t_ªf_cou¡
((
k
+1));

256 
•awn
(
li°
);

257 
•awn_™d_waô_f‹_Æl
(*
t
);

258  
	gNULL
;

261 ~
do_group_èsk_öput
(){

262  
size_t
 
	gk
=0; k<
	gmy_size
; ++k)

263 (
	gmy_¨g
.
begö
(Ë+ 
	gk
)->~
Iãm
();

266 
	gãm∂©e
<
ty≥«me
 
	gIãøt‹_
,Åy≥«mê
	gBody_
,Åy≥«mê
	gIãm_
> 
‰õnd
 
˛ass
 
	gdo_èsk_ôî
;

272 
	gãm∂©e
<
ty≥«me
 
	gIãøt‹
,Åy≥«mê
	gBody
,Åy≥«mê
	gIãm
>

273 ˛as†
	cdo_èsk_ôî
: 
public
 
èsk


275 
∑øŒñ_do_„edî_im∂
<
	tBody
, 
	tIãm
> 
	t„edî_ty≥
;

277 
	gpublic
:

278 
do_èsk_ôî
–
Iãøt‹
 
fú°
, Iãøt‹ 
œ°
 , 
„edî_ty≥
& 
„edî
 ) :

279 
my_fú°
(
fú°
), 
my_œ°
(
œ°
), 
my_„edî
(
„edî
)

282 
	g¥iv©e
:

283 
Iãøt‹
 
my_fú°
;

284 
Iãøt‹
 
	gmy_œ°
;

285 
	g„edî_ty≥
& 
	gmy_„edî
;

297  
èsk
* 
execuã
()

299 
ty≥«me
 
	t°d
::
	tôî©‹_åaôs
<
	tIãøt‹
>::
	tôî©‹_ˇãg‹y
 
	tôî©‹_èg
;

300  
run
–(
ôî©‹_èg
*)
NULL
 );

305 
ölöe
 
èsk
* 
run
–* ) {  
run_f‹_öput_ôî©‹
(); }

307 
èsk
* 
run_f‹_öput_ôî©‹
() {

308 
	gdo_group_èsk_öput
<
	tBody
, 
	tIãm
> 
	tblock_ty≥
;

310 
	gblock_ty≥
& 
	gt
 = *
√w
–
Æloˇã_addôi⁄Æ_chûd_of
(*
my_„edî
.
my_b¨rõr
ËË
block_ty≥
(my_feeder);

311 
size_t
 
	gk
=0;

312  !(
	gmy_fú°
 =
my_œ°
) ) {

313 
√w
 (
t
.
my_¨g
.
begö
(Ë+ 
k
Ë
Iãm
(*
my_fú°
);

314 ++
	gmy_fú°
;

315 if–++
	gk
==
block_ty≥
::
max_¨g_size
 ) {

316 i‡–!(
my_fú°
 =
my_œ°
) )

317 
ªcy˛e_to_ªexecuã
();

321 if–
	gk
==0 ) {

322 
de°roy
(
t
);

323  
	gNULL
;

325 
	gt
.
	gmy_size
 = 
k
;

326  &
	gt
;

330 
ölöe
 
èsk
* 
run
–
°d
::
f‹w¨d_ôî©‹_èg
* ) {  
run_f‹_f‹w¨d_ôî©‹
(); }

332 
èsk
* 
run_f‹_f‹w¨d_ôî©‹
() {

333 
	gdo_group_èsk_f‹w¨d
<
	tIãøt‹
, 
	tBody
, 
	tIãm
> 
	tblock_ty≥
;

335 
Iãøt‹
 
	gfú°
 = 
my_fú°
;

336 
size_t
 
	gk
=0;

337  !(
	gmy_fú°
==
my_œ°
) ) {

338 ++
my_fú°
;

339 if–++
	gk
==
block_ty≥
::
max_¨g_size
 ) {

340 i‡–!(
my_fú°
==
my_œ°
) )

341 
ªcy˛e_to_ªexecuã
();

345  
	gk
==0 ? 
NULL
 : 
√w
–
Æloˇã_addôi⁄Æ_chûd_of
(*
my_„edî
.
my_b¨rõr
ËË
block_ty≥
(
fú°
, 
k
, my_feeder);

348 
ölöe
 
èsk
* 
run
–
°d
::
øndom_ac˚ss_ôî©‹_èg
* ) {  
run_f‹_øndom_ac˚ss_ôî©‹
(); }

350 
èsk
* 
run_f‹_øndom_ac˚ss_ôî©‹
() {

351 
	gdo_group_èsk_f‹w¨d
<
	tIãøt‹
, 
	tBody
, 
	tIãm
> 
	tblock_ty≥
;

352 
	gdo_ôî©i⁄_èsk_ôî
<
	tIãøt‹
, 
	tBody
, 
	tIãm
> 
	tôî©i⁄_ty≥
;

354 
size_t
 
	gk
 = 
°©ic_ˇ°
<size_t>(
my_œ°
-
my_fú°
);

355 if–
	gk
 > 
	gblock_ty≥
::
max_¨g_size
 ) {

356 
Iãøt‹
 
middÀ
 = 
my_fú°
 + 
k
/2;

358 
	gem±y_èsk
& 
	gc
 = *
√w
–
Æloˇã_c⁄töu©i⁄
(ËË
em±y_èsk
;

359 
	gdo_èsk_ôî
& 
	gb
 = *
√w
–
c
.
Æloˇã_chûd
(ËË
do_èsk_ôî
(
middÀ
, 
my_œ°
, 
my_„edî
);

360 
ªcy˛e_as_chûd_of
(
c
);

362 
	gmy_œ°
 = 
middÀ
;

363 
	gc
.
£t_ªf_cou¡
(2);

364 
	gc
.
•awn
(
b
);

365  
	gthis
;

366 }if–
	gk
 != 0 ) {

367 
èsk_li°
 
li°
;

368 
èsk
* 
	gt
;

369 
size_t
 
	gk1
=0;

371 
	gt
 = 
√w
–
Æloˇã_chûd
(ËË
ôî©i⁄_ty≥
(
my_fú°
, 
my_„edî
);

372 ++
	gmy_fú°
;

373 if–++
	gk1
==
k
 ) ;

374 
	gli°
.
push_back
(*
t
);

376 
£t_ªf_cou¡
((
k
+1));

377 
•awn
(
li°
);

378 
•awn_™d_waô_f‹_Æl
(*
t
);

380  
	gNULL
;

387 
	gãm∂©e
<
ty≥«me
 
	gIãøt‹
,Åy≥«mê
	gBody
,Åy≥«mê
	gIãm
>

388 
run_∑øŒñ_do
–
Iãøt‹
 
fú°
, Iãøt‹ 
œ°
, c⁄° 
Body
& 
body


389 #i‡
__TBB_TASK_GROUP_CONTEXT


390 , 
èsk_group_c⁄ãxt
& 
c⁄ãxt


394 
	gdo_èsk_ôî
<
	tIãøt‹
, 
	tBody
, 
	tIãm
> 
	troŸ_ôî©i⁄_èsk
;

395 #i‡
__TBB_TASK_GROUP_CONTEXT


396 
	g∑øŒñ_do_„edî_im∂
<
	gBody
, 
	gIãm
> 
„edî
(
c⁄ãxt
);

398 
	g∑øŒñ_do_„edî_im∂
<
	gBody
, 
	gIãm
> 
	g„edî
;

400 
	g„edî
.
	gmy_body
 = &
body
;

402 
	groŸ_ôî©i⁄_èsk
 &
	gt
 = *
√w
–
„edî
.
my_b¨rõr
->
Æloˇã_chûd
(ËË
roŸ_ôî©i⁄_èsk
(
fú°
, 
œ°
, feeder);

404 
	g„edî
.
	gmy_b¨rõr
->
£t_ªf_cou¡
(2);

405 
	g„edî
.
	gmy_b¨rõr
->
•awn_™d_waô_f‹_Æl
(
t
);

411 
	gãm∂©e
<
ty≥«me
 
	gIãøt‹
,Åy≥«mê
	gBody
,Åy≥«mê
	gIãm
>

412 
£À˘_∑øŒñ_do
–
Iãøt‹
 
fú°
, Iãøt‹ 
œ°
, c⁄° 
Body
& 
body
, (Body::*)(
Iãm
) const

413 #i‡
__TBB_TASK_GROUP_CONTEXT


414 , 
èsk_group_c⁄ãxt
& 
c⁄ãxt


418 
	grun_∑øŒñ_do
<
	gIãøt‹
, 
	gBody
, 
ty≥«me
 
	g°rù
<
	gIãm
>::
ty≥
>–
fú°
, 
	gœ°
, 
	gbody


419 #i‡
__TBB_TASK_GROUP_CONTEXT


420 , 
	gc⁄ãxt


428 
	gãm∂©e
<
ty≥«me
 
	gIãøt‹
,Åy≥«mê
	gBody
,Åy≥«mê
	gIãm
,Åy≥«mê
	g_Iãm
>

429 
£À˘_∑øŒñ_do
–
Iãøt‹
 
fú°
, Iãøt‹ 
œ°
, c⁄° 
Body
& 
body
, (Body::*)(
Iãm
, 
∑øŒñ_do_„edî
<
_Iãm
>&) const

430 #i‡
__TBB_TASK_GROUP_CONTEXT


431 , 
èsk_group_c⁄ãxt
& 
c⁄ãxt


435 
	grun_∑øŒñ_do
<
	gIãøt‹
, 
	gBody
, 
ty≥«me
 
	g°rù
<
	gIãm
>::
ty≥
>–
fú°
, 
	gœ°
, 
	gbody


436 #i‡
__TBB_TASK_GROUP_CONTEXT


437 , 
	gc⁄ãxt


470 
	gãm∂©e
<
ty≥«me
 
	gIãøt‹
,Åy≥«mê
	gBody
>

471 
	$∑øŒñ_do
–
Iãøt‹
 
fú°
, Iãøt‹ 
œ°
, c⁄° 
Body
& 
body
 )

473 i‡–
fú°
 =
œ°
 )

475 #i‡
__TBB_TASK_GROUP_CONTEXT


476 
èsk_group_c⁄ãxt
 
c⁄ãxt
;

478 
öã∫Æ
::
	`£À˘_∑øŒñ_do
–
fú°
, 
œ°
, 
body
, &
Body
::
	`›î©‹
()

479 #i‡
__TBB_TASK_GROUP_CONTEXT


480 , 
c⁄ãxt


483 
	}
}

485 
	gãm∂©e
<
ty≥«me
 
	gR™ge
,Åy≥«mê
	gBody
>

486 
	$∑øŒñ_do
(
R™ge
& 
∫g
, c⁄° 
Body
& 
body
) {

487 
	`∑øŒñ_do
(
tbb
::
öã∫Æ
::
	`fú°
(
∫g
),Åbb::öã∫Æ::
	`œ°
‘ng), 
body
);

488 
	}
}

490 
	gãm∂©e
<
ty≥«me
 
	gR™ge
,Åy≥«mê
	gBody
>

491 
	$∑øŒñ_do
(c⁄° 
R™ge
& 
∫g
, c⁄° 
Body
& 
body
) {

492 
	`∑øŒñ_do
(
tbb
::
öã∫Æ
::
	`fú°
(
∫g
),Åbb::öã∫Æ::
	`œ°
‘ng), 
body
);

493 
	}
}

495 #i‡
__TBB_TASK_GROUP_CONTEXT


498 
	gãm∂©e
<
ty≥«me
 
	gIãøt‹
,Åy≥«mê
	gBody
>

499 
	$∑øŒñ_do
–
Iãøt‹
 
fú°
, Iãøt‹ 
œ°
, c⁄° 
Body
& 
body
, 
èsk_group_c⁄ãxt
& 
c⁄ãxt
 )

501 i‡–
fú°
 =
œ°
 )

503 
öã∫Æ
::
	`£À˘_∑øŒñ_do
–
fú°
, 
œ°
, 
body
, &
Body
::
	`›î©‹
(), 
c⁄ãxt
 );

504 
	}
}

506 
	gãm∂©e
<
ty≥«me
 
	gR™ge
,Åy≥«mê
	gBody
>

507 
	$∑øŒñ_do
(
R™ge
& 
∫g
, c⁄° 
Body
& 
body
, 
èsk_group_c⁄ãxt
& 
c⁄ãxt
) {

508 
	`∑øŒñ_do
(
tbb
::
öã∫Æ
::
	`fú°
(
∫g
),Åbb::öã∫Æ::
	`œ°
‘ng), 
body
, 
c⁄ãxt
);

509 
	}
}

511 
	gãm∂©e
<
ty≥«me
 
	gR™ge
,Åy≥«mê
	gBody
>

512 
	$∑øŒñ_do
(c⁄° 
R™ge
& 
∫g
, c⁄° 
Body
& 
body
, 
èsk_group_c⁄ãxt
& 
c⁄ãxt
) {

513 
	`∑øŒñ_do
(
tbb
::
öã∫Æ
::
	`fú°
(
∫g
),Åbb::öã∫Æ::
	`œ°
‘ng), 
body
, 
c⁄ãxt
);

514 
	}
}

	@viper/concurrentqueue-src/benchmarks/tbb/parallel_for.h

21 #i‚de‡
__TBB_∑øŒñ_f‹_H


22 
	#__TBB_∑øŒñ_f‹_H


	)

24 
	~<√w
>

25 
	~"èsk.h
"

26 
	~"∑πôi⁄î.h
"

27 
	~"blocked_ønge.h
"

28 
	~"tbb_ex˚±i⁄.h
"

30 
«me•a˚
 
	gtbb
 {

32 
«me•a˚
 
	göãrÁ˚7
 {

34 
«me•a˚
 
	göã∫Æ
 {

37 * 
Æloˇã_siblög
(
èsk
* 
°¨t_f‹_èsk
, 
size_t
 
byãs
);

41 
	gãm∂©e
<
ty≥«me
 
	gR™ge
,Åy≥«mê
	gBody
,Åy≥«mê
	gP¨tôi⁄î
>

42 ˛as†
	c°¨t_f‹
: 
public
 
èsk
 {

43 
R™ge
 
my_ønge
;

44 c⁄° 
Body
 
	gmy_body
;

45 
ty≥«me
 
	gP¨tôi⁄î
::
èsk_∑πôi⁄_ty≥
 
my_∑πôi⁄
;

46  
èsk
* 
execuã
();

49  
nŸe_afföôy
–
afföôy_id
 
id
 ) {

50 
	gmy_∑πôi⁄
.
nŸe_afföôy
–
id
 );

53 
	gpublic
:

55 
°¨t_f‹
–c⁄° 
R™ge
& 
ønge
, c⁄° 
Body
& 
body
, 
P¨tôi⁄î
& 
∑πôi⁄î
 ) :

56 
my_ønge
(
ønge
),

57 
my_body
(
body
),

58 
my_∑πôi⁄
(
∑πôi⁄î
)

63 
°¨t_f‹
–°¨t_f‹& 
∑ª¡_
, 
ty≥«me
 
P¨tôi⁄î
::
•lô_ty≥
& 
•lô_obj
) :

64 
my_ønge
(
∑ª¡_
.my_ønge, 
•lô_obj
),

65 
my_body
(
∑ª¡_
.my_body),

66 
my_∑πôi⁄
(
∑ª¡_
.my_∑πôi⁄, 
•lô_obj
)

68 
	gmy_∑πôi⁄
.
£t_afföôy
(*
this
);

72 
°¨t_f‹
–°¨t_f‹& 
∑ª¡_
, c⁄° 
R™ge
& 
r
, 
dïth_t
 
d
 ) :

73 
my_ønge
(
r
),

74 
my_body
(
∑ª¡_
.my_body),

75 
my_∑πôi⁄
(
∑ª¡_
.my_∑πôi⁄, 
•lô
())

77 
	gmy_∑πôi⁄
.
£t_afföôy
(*
this
);

78 
	gmy_∑πôi⁄
.
Æign_dïth
–
d
 );

80 
run
–c⁄° 
R™ge
& 
ønge
, c⁄° 
Body
& 
body
, 
P¨tôi⁄î
& 
∑πôi⁄î
 ) {

81 if–!
	gønge
.
em±y
() ) {

82 #i‡!
__TBB_TASK_GROUP_CONTEXT
 || 
TBB_JOIN_OUTER_TASK_GROUP


83 
	g°¨t_f‹
& 
	ga
 = *
√w
(
èsk
::
Æloˇã_roŸ
()Ë
°¨t_f‹
(
ønge
,
body
,
∑πôi⁄î
);

87 
èsk_group_c⁄ãxt
 
	gc⁄ãxt
;

88 
	g°¨t_f‹
& 
	ga
 = *
√w
(
èsk
::
Æloˇã_roŸ
(
c⁄ãxt
)Ë
°¨t_f‹
(
ønge
,
body
,
∑πôi⁄î
);

90 
	gèsk
::
•awn_roŸ_™d_waô
(
a
);

93 #i‡
__TBB_TASK_GROUP_CONTEXT


94 
run
–c⁄° 
R™ge
& 
ønge
, c⁄° 
Body
& 
body
, 
P¨tôi⁄î
& 
∑πôi⁄î
, 
èsk_group_c⁄ãxt
& 
c⁄ãxt
 ) {

95 if–!
	gønge
.
em±y
() ) {

96 
	g°¨t_f‹
& 
	ga
 = *
√w
(
èsk
::
Æloˇã_roŸ
(
c⁄ãxt
)Ë
°¨t_f‹
(
ønge
,
body
,
∑πôi⁄î
);

97 
	gèsk
::
•awn_roŸ_™d_waô
(
a
);

102 
run_body
–
R™ge
 &
r
 ) { 
my_body
(Ñ ); }

105 
of„r_w‹k
(
ty≥«me
 
P¨tôi⁄î
::
•lô_ty≥
& 
•lô_obj
) {

106 
•awn
–*
√w
–
Æloˇã_siblög
(
°©ic_ˇ°
<
èsk
*>(
this
), (
°¨t_f‹
)ËË°¨t_f‹(*this, 
•lô_obj
) );

109 
of„r_w‹k
(c⁄° 
R™ge
& 
r
, 
dïth_t
 
d
 = 0) {

110 
•awn
–*
√w
–
Æloˇã_siblög
(
°©ic_ˇ°
<
èsk
*>(
this
), (
°¨t_f‹
)ËË°¨t_f‹(*this, 
r
, 
d
) );

116 
ölöe
 * 
Æloˇã_siblög
(
èsk
* 
°¨t_f‹_èsk
, 
size_t
 
byãs
) {

117 
èsk
* 
	g∑ª¡_±r
 = 
√w
–
°¨t_f‹_èsk
->
Æloˇã_c⁄töu©i⁄
(ËË
Êag_èsk
();

118 
	g°¨t_f‹_èsk
->
£t_∑ª¡
(
∑ª¡_±r
);

119 
	g∑ª¡_±r
->
£t_ªf_cou¡
(2);

120  &
	g∑ª¡_±r
->
Æloˇã_chûd
().
Æloˇã
(
byãs
);

124 
	gãm∂©e
<
ty≥«me
 
	gR™ge
,Åy≥«mê
	gBody
,Åy≥«mê
	gP¨tôi⁄î
>

125 
èsk
* 
	g°¨t_f‹
<
	gR™ge
,
	gBody
,
	gP¨tôi⁄î
>::
execuã
() {

126 
my_∑πôi⁄
.
check_beög_°ﬁí
–*
this
 );

127 
	gmy_∑πôi⁄
.
execuã
(*
this
, 
my_ønge
);

128  
	gNULL
;

135 
«me•a˚
 
	göã∫Æ
 {

136 
usög
 
	göãrÁ˚7
::
öã∫Æ
::
°¨t_f‹
;

139 
	gãm∂©e
<
ty≥«me
 
	gFun˘i⁄
,Åy≥«mê
	gIndex
>

140 ˛as†
	c∑øŒñ_f‹_body
 : 
öã∫Æ
::
no_assign
 {

141 c⁄° 
Fun˘i⁄
 &
my_func
;

142 c⁄° 
Index
 
	gmy_begö
;

143 c⁄° 
Index
 
	gmy_°ï
;

144 
	gpublic
:

145 
∑øŒñ_f‹_body
–c⁄° 
Fun˘i⁄
& 
_func
, 
Index
& 
_begö
, Index& 
_°ï
 )

146 : 
my_func
(
_func
), 
my_begö
(
_begö
), 
my_°ï
(
_°ï
) {}

148 
›î©‹
()–c⁄° 
	gtbb
::
blocked_ønge
<
Index
>& 
r
 ) const {

150 
Index
 
b
 = 
r
.
begö
();

151 
Index
 
	ge
 = 
r
.
íd
();

152 
Index
 
	gms
 = 
my_°ï
;

153 
Index
 
	gk
 = 
my_begö
 + 
b
*
ms
;

155 #i‡
__INTEL_COMPILER


156 #¥agm®
ivdï


157 #i‡
__TBB_ASSERT_ON_VECTORIZATION_FAILURE


158 #¥agm®
ve˘‹
 
Æways
 
as£π


161  
Index
 
	gi
 = 
b
; i < 
	ge
; ++i, 
	gk
 +
ms
 ) {

162 
my_func
–
k
 );

184 
	gãm∂©e
<
ty≥«me
 
	gR™ge
,Åy≥«mê
	gBody
>

185 
	$∑øŒñ_f‹
–c⁄° 
R™ge
& 
ønge
, c⁄° 
Body
& 
body
 ) {

186 
öã∫Æ
::
°¨t_f‹
<
R™ge
,
Body
,c⁄° 
__TBB_DEFAULT_PARTITIONER
>::
	`run
(
ønge
,
body
,
	`__TBB_DEFAULT_PARTITIONER
());

187 
	}
}

191 
	gãm∂©e
<
ty≥«me
 
	gR™ge
,Åy≥«mê
	gBody
>

192 
	$∑øŒñ_f‹
–c⁄° 
R™ge
& 
ønge
, c⁄° 
Body
& 
body
, c⁄° 
sim∂e_∑πôi⁄î
& 
∑πôi⁄î
 ) {

193 
öã∫Æ
::
°¨t_f‹
<
R™ge
,
Body
,c⁄° 
sim∂e_∑πôi⁄î
>::
	`run
(
ønge
,
body
,
∑πôi⁄î
);

194 
	}
}

198 
	gãm∂©e
<
ty≥«me
 
	gR™ge
,Åy≥«mê
	gBody
>

199 
	$∑øŒñ_f‹
–c⁄° 
R™ge
& 
ønge
, c⁄° 
Body
& 
body
, c⁄° 
auto_∑πôi⁄î
& 
∑πôi⁄î
 ) {

200 
öã∫Æ
::
°¨t_f‹
<
R™ge
,
Body
,c⁄° 
auto_∑πôi⁄î
>::
	`run
(
ønge
,
body
,
∑πôi⁄î
);

201 
	}
}

205 
	gãm∂©e
<
ty≥«me
 
	gR™ge
,Åy≥«mê
	gBody
>

206 
	$∑øŒñ_f‹
–c⁄° 
R™ge
& 
ønge
, c⁄° 
Body
& 
body
, 
afföôy_∑πôi⁄î
& 
∑πôi⁄î
 ) {

207 
öã∫Æ
::
°¨t_f‹
<
R™ge
,
Body
,
afföôy_∑πôi⁄î
>::
	`run
(
ønge
,
body
,
∑πôi⁄î
);

208 
	}
}

210 #i‡
__TBB_TASK_GROUP_CONTEXT


213 
	gãm∂©e
<
ty≥«me
 
	gR™ge
,Åy≥«mê
	gBody
>

214 
	$∑øŒñ_f‹
–c⁄° 
R™ge
& 
ønge
, c⁄° 
Body
& 
body
, 
èsk_group_c⁄ãxt
& 
c⁄ãxt
 ) {

215 
öã∫Æ
::
°¨t_f‹
<
R™ge
,
Body
,c⁄° 
__TBB_DEFAULT_PARTITIONER
>::
	`run
(
ønge
, 
body
, 
	`__TBB_DEFAULT_PARTITIONER
(), 
c⁄ãxt
);

216 
	}
}

220 
	gãm∂©e
<
ty≥«me
 
	gR™ge
,Åy≥«mê
	gBody
>

221 
	$∑øŒñ_f‹
–c⁄° 
R™ge
& 
ønge
, c⁄° 
Body
& 
body
, c⁄° 
sim∂e_∑πôi⁄î
& 
∑πôi⁄î
, 
èsk_group_c⁄ãxt
& 
c⁄ãxt
 ) {

222 
öã∫Æ
::
°¨t_f‹
<
R™ge
,
Body
,c⁄° 
sim∂e_∑πôi⁄î
>::
	`run
(
ønge
, 
body
, 
∑πôi⁄î
, 
c⁄ãxt
);

223 
	}
}

227 
	gãm∂©e
<
ty≥«me
 
	gR™ge
,Åy≥«mê
	gBody
>

228 
	$∑øŒñ_f‹
–c⁄° 
R™ge
& 
ønge
, c⁄° 
Body
& 
body
, c⁄° 
auto_∑πôi⁄î
& 
∑πôi⁄î
, 
èsk_group_c⁄ãxt
& 
c⁄ãxt
 ) {

229 
öã∫Æ
::
°¨t_f‹
<
R™ge
,
Body
,c⁄° 
auto_∑πôi⁄î
>::
	`run
(
ønge
, 
body
, 
∑πôi⁄î
, 
c⁄ãxt
);

230 
	}
}

234 
	gãm∂©e
<
ty≥«me
 
	gR™ge
,Åy≥«mê
	gBody
>

235 
	$∑øŒñ_f‹
–c⁄° 
R™ge
& 
ønge
, c⁄° 
Body
& 
body
, 
afföôy_∑πôi⁄î
& 
∑πôi⁄î
, 
èsk_group_c⁄ãxt
& 
c⁄ãxt
 ) {

236 
öã∫Æ
::
°¨t_f‹
<
R™ge
,
Body
,
afföôy_∑πôi⁄î
>::
	`run
(
ønge
,
body
,
∑πôi⁄î
, 
c⁄ãxt
);

237 
	}
}

241 
«me•a˚
 
	g°ri˘_µl
 {

245 
	gãm∂©e
 <
ty≥«me
 
	gIndex
,Åy≥«mê
	gFun˘i⁄
,Åy≥«mê
	gP¨tôi⁄î
>

246 
∑øŒñ_f‹_im∂
(
Index
 
fú°
, Index 
œ°
, Index 
°ï
, c⁄° 
Fun˘i⁄
& 
f
, 
P¨tôi⁄î
& 
∑πôi⁄î
) {

247 i‡(
	g°ï
 <= 0 )

248 
öã∫Æ
::
throw_ex˚±i⁄
(öã∫Æ::
eid_n⁄posôive_°ï
);

249 i‡(
	gœ°
 > 
	gfú°
) {

251 
Index
 
	gíd
 = (
œ°
 - 
fú°
 - Index(1)Ë/ 
°ï
 + Index(1);

252 
	gtbb
::
blocked_ønge
<
Index
> 
ønge
(
°©ic_ˇ°
<Index>(0), 
íd
);

253 
	göã∫Æ
::
∑øŒñ_f‹_body
<
Fun˘i⁄
, 
	gIndex
> 
body
(
f
, 
fú°
, 
°ï
);

254 
	gtbb
::
∑øŒñ_f‹
(
ønge
, 
body
, 
∑πôi⁄î
);

259 
	gãm∂©e
 <
ty≥«me
 
	gIndex
,Åy≥«mê
	gFun˘i⁄
>

260 
∑øŒñ_f‹
(
Index
 
fú°
, Index 
œ°
, Index 
°ï
, c⁄° 
Fun˘i⁄
& 
f
) {

261 
	g∑øŒñ_f‹_im∂
<
	gIndex
,
	gFun˘i⁄
,c⁄° 
	gauto_∑πôi⁄î
>(
	gfú°
, 
	gœ°
, 
	g°ï
, 
	gf
, 
auto_∑πôi⁄î
());

264 
	gãm∂©e
 <
ty≥«me
 
	gIndex
,Åy≥«mê
	gFun˘i⁄
>

265 
∑øŒñ_f‹
(
Index
 
fú°
, Index 
œ°
, Index 
°ï
, c⁄° 
Fun˘i⁄
& 
f
, c⁄° 
sim∂e_∑πôi⁄î
& 
∑πôi⁄î
) {

266 
	g∑øŒñ_f‹_im∂
<
	gIndex
,
	gFun˘i⁄
,c⁄° 
	gsim∂e_∑πôi⁄î
>(
	gfú°
, 
	gœ°
, 
	g°ï
, 
	gf
, 
	g∑πôi⁄î
);

269 
	gãm∂©e
 <
ty≥«me
 
	gIndex
,Åy≥«mê
	gFun˘i⁄
>

270 
∑øŒñ_f‹
(
Index
 
fú°
, Index 
œ°
, Index 
°ï
, c⁄° 
Fun˘i⁄
& 
f
, c⁄° 
auto_∑πôi⁄î
& 
∑πôi⁄î
) {

271 
	g∑øŒñ_f‹_im∂
<
	gIndex
,
	gFun˘i⁄
,c⁄° 
	gauto_∑πôi⁄î
>(
	gfú°
, 
	gœ°
, 
	g°ï
, 
	gf
, 
	g∑πôi⁄î
);

274 
	gãm∂©e
 <
ty≥«me
 
	gIndex
,Åy≥«mê
	gFun˘i⁄
>

275 
∑øŒñ_f‹
(
Index
 
fú°
, Index 
œ°
, Index 
°ï
, c⁄° 
Fun˘i⁄
& 
f
, 
afföôy_∑πôi⁄î
& 
∑πôi⁄î
) {

276 
∑øŒñ_f‹_im∂
(
fú°
, 
œ°
, 
°ï
, 
f
, 
∑πôi⁄î
);

280 
	gãm∂©e
 <
ty≥«me
 
	gIndex
,Åy≥«mê
	gFun˘i⁄
>

281 
∑øŒñ_f‹
(
Index
 
fú°
, Index 
œ°
, c⁄° 
Fun˘i⁄
& 
f
) {

282 
	g∑øŒñ_f‹_im∂
<
	gIndex
,
	gFun˘i⁄
,c⁄° 
	gauto_∑πôi⁄î
>(
	gfú°
, 
	gœ°
, 
	g°©ic_ˇ°
<Index>(1), 
	gf
, 
auto_∑πôi⁄î
());

285 
	gãm∂©e
 <
ty≥«me
 
	gIndex
,Åy≥«mê
	gFun˘i⁄
>

286 
∑øŒñ_f‹
(
Index
 
fú°
, Index 
œ°
, c⁄° 
Fun˘i⁄
& 
f
, c⁄° 
sim∂e_∑πôi⁄î
& 
∑πôi⁄î
) {

287 
	g∑øŒñ_f‹_im∂
<
	gIndex
,
	gFun˘i⁄
,c⁄° 
	gsim∂e_∑πôi⁄î
>(
	gfú°
, 
	gœ°
, 
	g°©ic_ˇ°
<Index>(1), 
	gf
, 
	g∑πôi⁄î
);

290 
	gãm∂©e
 <
ty≥«me
 
	gIndex
,Åy≥«mê
	gFun˘i⁄
>

291 
∑øŒñ_f‹
(
Index
 
fú°
, Index 
œ°
, c⁄° 
Fun˘i⁄
& 
f
, c⁄° 
auto_∑πôi⁄î
& 
∑πôi⁄î
) {

292 
	g∑øŒñ_f‹_im∂
<
	gIndex
,
	gFun˘i⁄
,c⁄° 
	gauto_∑πôi⁄î
>(
	gfú°
, 
	gœ°
, 
	g°©ic_ˇ°
<Index>(1), 
	gf
, 
	g∑πôi⁄î
);

295 
	gãm∂©e
 <
ty≥«me
 
	gIndex
,Åy≥«mê
	gFun˘i⁄
>

296 
∑øŒñ_f‹
(
Index
 
fú°
, Index 
œ°
, c⁄° 
Fun˘i⁄
& 
f
, 
afföôy_∑πôi⁄î
& 
∑πôi⁄î
) {

297 
∑øŒñ_f‹_im∂
(
fú°
, 
œ°
, 
°©ic_ˇ°
<
Index
>(1), 
f
, 
∑πôi⁄î
);

300 #i‡
__TBB_TASK_GROUP_CONTEXT


302 
	gãm∂©e
 <
ty≥«me
 
	gIndex
,Åy≥«mê
	gFun˘i⁄
,Åy≥«mê
	gP¨tôi⁄î
>

303 
∑øŒñ_f‹_im∂
(
Index
 
fú°
, Index 
œ°
, Index 
°ï
, c⁄° 
Fun˘i⁄
& 
f
, 
P¨tôi⁄î
& 
∑πôi⁄î
, 
tbb
::
èsk_group_c⁄ãxt
 &
c⁄ãxt
) {

304 i‡(
°ï
 <= 0 )

305 
öã∫Æ
::
throw_ex˚±i⁄
(öã∫Æ::
eid_n⁄posôive_°ï
);

306 i‡(
	gœ°
 > 
	gfú°
) {

308 
Index
 
	gíd
 = (
œ°
 - 
fú°
 - Index(1)Ë/ 
°ï
 + Index(1);

309 
	gtbb
::
blocked_ønge
<
Index
> 
ønge
(
°©ic_ˇ°
<Index>(0), 
íd
);

310 
	göã∫Æ
::
∑øŒñ_f‹_body
<
Fun˘i⁄
, 
	gIndex
> 
body
(
f
, 
fú°
, 
°ï
);

311 
	gtbb
::
∑øŒñ_f‹
(
ønge
, 
body
, 
∑πôi⁄î
, 
c⁄ãxt
);

316 
	gãm∂©e
 <
ty≥«me
 
	gIndex
,Åy≥«mê
	gFun˘i⁄
>

317 
∑øŒñ_f‹
(
Index
 
fú°
, Index 
œ°
, Index 
°ï
, c⁄° 
Fun˘i⁄
& 
f
, 
tbb
::
èsk_group_c⁄ãxt
 &
c⁄ãxt
) {

318 
∑øŒñ_f‹_im∂
<
Index
,
	gFun˘i⁄
,c⁄° 
	gauto_∑πôi⁄î
>(
	gfú°
, 
	gœ°
, 
	g°ï
, 
	gf
, 
auto_∑πôi⁄î
(), 
	gc⁄ãxt
);

321 
	gãm∂©e
 <
ty≥«me
 
	gIndex
,Åy≥«mê
	gFun˘i⁄
>

322 
∑øŒñ_f‹
(
Index
 
fú°
, Index 
œ°
, Index 
°ï
, c⁄° 
Fun˘i⁄
& 
f
, c⁄° 
sim∂e_∑πôi⁄î
& 
∑πôi⁄î
, 
tbb
::
èsk_group_c⁄ãxt
 &
c⁄ãxt
) {

323 
∑øŒñ_f‹_im∂
<
Index
,
	gFun˘i⁄
,c⁄° 
	gsim∂e_∑πôi⁄î
>(
	gfú°
, 
	gœ°
, 
	g°ï
, 
	gf
, 
	g∑πôi⁄î
, 
	gc⁄ãxt
);

326 
	gãm∂©e
 <
ty≥«me
 
	gIndex
,Åy≥«mê
	gFun˘i⁄
>

327 
∑øŒñ_f‹
(
Index
 
fú°
, Index 
œ°
, Index 
°ï
, c⁄° 
Fun˘i⁄
& 
f
, c⁄° 
auto_∑πôi⁄î
& 
∑πôi⁄î
, 
tbb
::
èsk_group_c⁄ãxt
 &
c⁄ãxt
) {

328 
∑øŒñ_f‹_im∂
<
Index
,
	gFun˘i⁄
,c⁄° 
	gauto_∑πôi⁄î
>(
	gfú°
, 
	gœ°
, 
	g°ï
, 
	gf
, 
	g∑πôi⁄î
, 
	gc⁄ãxt
);

331 
	gãm∂©e
 <
ty≥«me
 
	gIndex
,Åy≥«mê
	gFun˘i⁄
>

332 
∑øŒñ_f‹
(
Index
 
fú°
, Index 
œ°
, Index 
°ï
, c⁄° 
Fun˘i⁄
& 
f
, 
afföôy_∑πôi⁄î
& 
∑πôi⁄î
, 
tbb
::
èsk_group_c⁄ãxt
 &
c⁄ãxt
) {

333 
∑øŒñ_f‹_im∂
(
fú°
, 
œ°
, 
°ï
, 
f
, 
∑πôi⁄î
, 
c⁄ãxt
);

338 
	gãm∂©e
 <
ty≥«me
 
	gIndex
,Åy≥«mê
	gFun˘i⁄
>

339 
∑øŒñ_f‹
(
Index
 
fú°
, Index 
œ°
, c⁄° 
Fun˘i⁄
& 
f
, 
tbb
::
èsk_group_c⁄ãxt
 &
c⁄ãxt
) {

340 
∑øŒñ_f‹_im∂
<
Index
,
	gFun˘i⁄
,c⁄° 
	gauto_∑πôi⁄î
>(
	gfú°
, 
	gœ°
, 
	g°©ic_ˇ°
<
	gIndex
>(1), 
	gf
, 
auto_∑πôi⁄î
(), 
	gc⁄ãxt
);

343 
	gãm∂©e
 <
ty≥«me
 
	gIndex
,Åy≥«mê
	gFun˘i⁄
,Åy≥«mê
	gP¨tôi⁄î
>

344 
∑øŒñ_f‹
(
Index
 
fú°
, Index 
œ°
, c⁄° 
Fun˘i⁄
& 
f
, c⁄° 
sim∂e_∑πôi⁄î
& 
∑πôi⁄î
, 
tbb
::
èsk_group_c⁄ãxt
 &
c⁄ãxt
) {

345 
∑øŒñ_f‹_im∂
<
Index
,
	gFun˘i⁄
,c⁄° 
	gsim∂e_∑πôi⁄î
>(
	gfú°
, 
	gœ°
, 
	g°©ic_ˇ°
<
	gIndex
>(1), 
	gf
, 
	g∑πôi⁄î
, 
	gc⁄ãxt
);

348 
	gãm∂©e
 <
ty≥«me
 
	gIndex
,Åy≥«mê
	gFun˘i⁄
,Åy≥«mê
	gP¨tôi⁄î
>

349 
∑øŒñ_f‹
(
Index
 
fú°
, Index 
œ°
, c⁄° 
Fun˘i⁄
& 
f
, c⁄° 
auto_∑πôi⁄î
& 
∑πôi⁄î
, 
tbb
::
èsk_group_c⁄ãxt
 &
c⁄ãxt
) {

350 
∑øŒñ_f‹_im∂
<
Index
,
	gFun˘i⁄
,c⁄° 
	gauto_∑πôi⁄î
>(
	gfú°
, 
	gœ°
, 
	g°©ic_ˇ°
<
	gIndex
>(1), 
	gf
, 
	g∑πôi⁄î
, 
	gc⁄ãxt
);

353 
	gãm∂©e
 <
ty≥«me
 
	gIndex
,Åy≥«mê
	gFun˘i⁄
,Åy≥«mê
	gP¨tôi⁄î
>

354 
∑øŒñ_f‹
(
Index
 
fú°
, Index 
œ°
, c⁄° 
Fun˘i⁄
& 
f
, 
afföôy_∑πôi⁄î
& 
∑πôi⁄î
, 
tbb
::
èsk_group_c⁄ãxt
 &
c⁄ãxt
) {

355 
∑øŒñ_f‹_im∂
(
fú°
, 
œ°
, 
°©ic_ˇ°
<
Index
>(1), 
f
, 
∑πôi⁄î
, 
c⁄ãxt
);

363 
usög
 
	g°ri˘_µl
::
∑øŒñ_f‹
;

367 #i‡
TBB_PREVIEW_SERIAL_SUBSET


368 
	#__TBB_NORMAL_EXECUTION


	)

369 
	~"../£rül/tbb/∑øŒñ_f‹.h
"

370 #unde‡
__TBB_NORMAL_EXECUTION


	@viper/concurrentqueue-src/benchmarks/tbb/parallel_for_each.h

21 #i‚de‡
__TBB_∑øŒñ_f‹_óch_H


22 
	#__TBB_∑øŒñ_f‹_óch_H


	)

24 
	~"∑øŒñ_do.h
"

26 
«me•a˚
 
	gtbb
 {

29 
«me•a˚
 
	göã∫Æ
 {

31 
	gãm∂©e
 <
ty≥«me
 
	gFun˘i⁄
,Åy≥«mê
	gIãøt‹
>

32 ˛as†
	c∑øŒñ_f‹_óch_body
 : 
öã∫Æ
::
no_assign
 {

33 c⁄° 
Fun˘i⁄
 &
my_func
;

34 
	gpublic
:

35 
∑øŒñ_f‹_óch_body
(c⁄° 
Fun˘i⁄
 &
_func
Ë: 
my_func
(_func) {}

36 
∑øŒñ_f‹_óch_body
(c⁄°Ö¨ÆÀl_f‹_óch_body<
Fun˘i⁄
, 
Iãøt‹
> &
_ˇŒî
Ë: 
my_func
(_caller.my_func) {}

38 
›î©‹
(Ë–
ty≥«me
 
°d
::
ôî©‹_åaôs
<
Iãøt‹
>::
ª„ªn˚
 
vÆue
 ) const {

39 
my_func
(
vÆue
);

50 #i‡
__TBB_TASK_GROUP_CONTEXT


51 
	gãm∂©e
<
ty≥«me
 
	gI≈utIãøt‹
,Åy≥«mê
	gFun˘i⁄
>

52 
	$∑øŒñ_f‹_óch
(
I≈utIãøt‹
 
fú°
, I≈utIãøt‹ 
œ°
, c⁄° 
Fun˘i⁄
& 
f
, 
èsk_group_c⁄ãxt
 &
c⁄ãxt
) {

53 
öã∫Æ
::
∑øŒñ_f‹_óch_body
<
Fun˘i⁄
, 
I≈utIãøt‹
> 
	`body
(
f
);

54 
tbb
::
	`∑øŒñ_do
 (
fú°
, 
œ°
, 
body
, 
c⁄ãxt
);

55 
	}
}

59 
	gãm∂©e
<
ty≥«me
 
	gR™ge
,Åy≥«mê
	gFun˘i⁄
>

60 
	$∑øŒñ_f‹_óch
(
R™ge
& 
∫g
, c⁄° 
Fun˘i⁄
& 
f
, 
èsk_group_c⁄ãxt
& 
c⁄ãxt
) {

61 
	`∑øŒñ_f‹_óch
(
tbb
::
öã∫Æ
::
	`fú°
(
∫g
),Åbb::öã∫Æ::
	`œ°
‘ng), 
f
, 
c⁄ãxt
);

62 
	}
}

66 
	gãm∂©e
<
ty≥«me
 
	gR™ge
,Åy≥«mê
	gFun˘i⁄
>

67 
	$∑øŒñ_f‹_óch
(c⁄° 
R™ge
& 
∫g
, c⁄° 
Fun˘i⁄
& 
f
, 
èsk_group_c⁄ãxt
& 
c⁄ãxt
) {

68 
	`∑øŒñ_f‹_óch
(
tbb
::
öã∫Æ
::
	`fú°
(
∫g
),Åbb::öã∫Æ::
	`œ°
‘ng), 
f
, 
c⁄ãxt
);

69 
	}
}

73 
	gãm∂©e
<
ty≥«me
 
	gI≈utIãøt‹
,Åy≥«mê
	gFun˘i⁄
>

74 
	$∑øŒñ_f‹_óch
(
I≈utIãøt‹
 
fú°
, I≈utIãøt‹ 
œ°
, c⁄° 
Fun˘i⁄
& 
f
) {

75 
öã∫Æ
::
∑øŒñ_f‹_óch_body
<
Fun˘i⁄
, 
I≈utIãøt‹
> 
	`body
(
f
);

76 
tbb
::
	`∑øŒñ_do
 (
fú°
, 
œ°
, 
body
);

77 
	}
}

80 
	gãm∂©e
<
ty≥«me
 
	gR™ge
,Åy≥«mê
	gFun˘i⁄
>

81 
	$∑øŒñ_f‹_óch
(
R™ge
& 
∫g
, c⁄° 
Fun˘i⁄
& 
f
) {

82 
	`∑øŒñ_f‹_óch
(
tbb
::
öã∫Æ
::
	`fú°
(
∫g
),Åbb::öã∫Æ::
	`œ°
‘ng), 
f
);

83 
	}
}

86 
	gãm∂©e
<
ty≥«me
 
	gR™ge
,Åy≥«mê
	gFun˘i⁄
>

87 
	$∑øŒñ_f‹_óch
(c⁄° 
R™ge
& 
∫g
, c⁄° 
Fun˘i⁄
& 
f
) {

88 
	`∑øŒñ_f‹_óch
(
tbb
::
öã∫Æ
::
	`fú°
(
∫g
),Åbb::öã∫Æ::
	`œ°
‘ng), 
f
);

89 
	}
}

	@viper/concurrentqueue-src/benchmarks/tbb/parallel_invoke.h

21 #i‚de‡
__TBB_∑øŒñ_övoke_H


22 
	#__TBB_∑øŒñ_övoke_H


	)

24 
	~"èsk.h
"

26 #i‡
__TBB_VARIADIC_PARALLEL_INVOKE


27 
	~<utûôy
>

30 
«me•a˚
 
	gtbb
 {

32 #i‡!
__TBB_TASK_GROUP_CONTEXT


34 
	sèsk_group_c⁄ãxt
 {};

38 
«me•a˚
 
	göã∫Æ
 {

40 
	gãm∂©e
<
ty≥«me
 
	gfun˘i⁄
>

41 ˛as†
	cfun˘i⁄_övokî
 : 
public
 
èsk
{

42 
public
:

43 
fun˘i⁄_övokî
(c⁄° 
fun˘i⁄
& 
_fun˘i⁄
Ë: 
my_fun˘i⁄
(_function) {}

44 
¥iv©e
:

45 c⁄° 
fun˘i⁄
 &
my_fun˘i⁄
;

47 
èsk
* 
execuã
()

49 
my_fun˘i⁄
();

50  
	gNULL
;

55 
	gãm∂©e
 <
size_t
 
	gN
, 
ty≥«me
 
	gfun˘i⁄1
,Åy≥«mê
	gfun˘i⁄2
,Åy≥«mê
	gfun˘i⁄3
>

56 ˛as†
	c•aw√r
 : 
public
 
èsk
 {

57 
¥iv©e
:

58 c⁄° 
fun˘i⁄1
& 
my_func1
;

59 c⁄° 
	gfun˘i⁄2
& 
	gmy_func2
;

60 c⁄° 
	gfun˘i⁄3
& 
	gmy_func3
;

61 
boﬁ
 
	gis_ªcy˛ed
;

63 
èsk
* 
execuã
 (){

64 if(
	gis_ªcy˛ed
){

65  
	gNULL
;

67 
__TBB_ASSERT
(
N
==2 || N==3, "Number ofárgumentsÖassedÅo spawner is wrong");

68 
£t_ªf_cou¡
(
N
);

69 
ªcy˛e_as_ß„_c⁄töu©i⁄
();

70 
	göã∫Æ
::
fun˘i⁄_övokî
<
fun˘i⁄2
>* 
övokî2
 = 
√w
 (
Æloˇã_chûd
()Ë
öã∫Æ
::fun˘i⁄_övokî<fun˘i⁄2>(
my_func2
);

71 
__TBB_ASSERT
(
övokî2
, "ChildÅaskállocation failed");

72 
•awn
(*
övokî2
);

73 
size_t
 
	gn
 = 
N
;

74 i‡(
	gn
>2) {

75 
	göã∫Æ
::
fun˘i⁄_övokî
<
fun˘i⁄3
>* 
övokî3
 = 
√w
 (
Æloˇã_chûd
()Ë
öã∫Æ
::fun˘i⁄_övokî<fun˘i⁄3>(
my_func3
);

76 
__TBB_ASSERT
(
övokî3
, "ChildÅaskállocation failed");

77 
•awn
(*
övokî3
);

79 
my_func1
();

80 
	gis_ªcy˛ed
 = 
åue
;

81  
	gNULL
;

85 
	gpublic
:

86 
•aw√r
(c⁄° 
fun˘i⁄1
& 
_func1
, c⁄° 
fun˘i⁄2
& 
_func2
, c⁄° 
fun˘i⁄3
& 
_func3
Ë: 
my_func1
(_func1), 
my_func2
(_func2), 
my_func3
(_func3), 
is_ªcy˛ed
(
Ál£
) {}

90 ˛as†
	c∑øŒñ_övoke_hñ≥r
 : 
public
 
em±y_èsk
 {

91 
public
:

93 ˛as†
	c∑øŒñ_övoke_no›
 {

94 
public
:

95 
›î©‹
() () const {}

98 
∑øŒñ_övoke_hñ≥r
(
numbî_of_chûdªn
)

100 
£t_ªf_cou¡
(
numbî_of_chûdªn
 + 1);

103 #i‡
__TBB_VARIADIC_PARALLEL_INVOKE


104 
add_chûdªn
() {}

105 
add_chûdªn
(
tbb
::
èsk_group_c⁄ãxt
&) {}

107 
ãm∂©e
 <
ty≥«me
 
fun˘i⁄
>

108 
add_chûdªn
(
fun˘i⁄
&& 
_func
)

110 
öã∫Æ
::
fun˘i⁄_övokî
<
fun˘i⁄
>* 
övokî
 = 
√w
 (
Æloˇã_chûd
()Ëöã∫Æ::fun˘i⁄_övokî<fun˘i⁄>(
°d
::
f‹w¨d
<fun˘i⁄>(
_func
));

111 
__TBB_ASSERT
(
övokî
, "ChildÅaskállocation failed");

112 
•awn
(*
övokî
);

115 
	gãm∂©e
<
ty≥«me
 
	gfun˘i⁄
>

116 
add_chûdªn
(
fun˘i⁄
&& 
_func
, 
tbb
::
èsk_group_c⁄ãxt
&)

118 
add_chûdªn
(
°d
::
f‹w¨d
<
fun˘i⁄
>(
_func
));

122 
	gãm∂©e
 <
ty≥«me
 
	gfun˘i⁄1
,Åy≥«mê
	gfun˘i⁄2
, 
	gty≥«me
... 
	gfun˘i⁄
>

123 
add_chûdªn
(
fun˘i⁄1
&& 
_func1
, 
fun˘i⁄2
&& 
_func2
, 
fun˘i⁄
&&... 
_func
)

126 
∑øŒñ_övoke_no›
 
	gno›
;

127 
	göã∫Æ
::
	t•aw√r
<2, 
	tfun˘i⁄1
, 
	tfun˘i⁄2
, 
	t∑øŒñ_övoke_no›
> 
	t•aw√r_ty≥
;

128 
	g•aw√r_ty≥
 & 
	gsub_roŸ
 = *
√w
(
Æloˇã_chûd
()Ë
•aw√r_ty≥
(
°d
::
f‹w¨d
<
fun˘i⁄1
>(
_func1
), std::f‹w¨d<
fun˘i⁄2
>(
_func2
), 
no›
);

129 
•awn
(
sub_roŸ
);

130 
add_chûdªn
(
°d
::
f‹w¨d
<
fun˘i⁄
>(
_func
)...);

134 
	gãm∂©e
 <
ty≥«me
 
	gfun˘i⁄
>

135 
add_chûdªn
 (c⁄° 
fun˘i⁄
 &
_func
)

137 
	göã∫Æ
::
fun˘i⁄_övokî
<
fun˘i⁄
>* 
övokî
 = 
√w
 (
Æloˇã_chûd
()Ë
öã∫Æ
::fun˘i⁄_övokî<fun˘i⁄>(
_func
);

138 
__TBB_ASSERT
(
övokî
, "ChildÅaskállocation failed");

139 
•awn
(*
övokî
);

144 
	gãm∂©e
 <
ty≥«me
 
	gfun˘i⁄1
,Åy≥«mê
	gfun˘i⁄2
>

145 
add_chûdªn
 (c⁄° 
fun˘i⁄1
& 
_func1
, c⁄° 
fun˘i⁄2
& 
_func2
)

148 
∑øŒñ_övoke_no›
 
	gno›
;

149 
	göã∫Æ
::
•aw√r
<2, 
	gfun˘i⁄1
, 
	gfun˘i⁄2
, 
	g∑øŒñ_övoke_no›
>& 
	gsub_roŸ
 = *
√w
(
Æloˇã_chûd
())
öã∫Æ
::•aw√r<2, fun˘i⁄1, fun˘i⁄2,Ö¨ÆÀl_övoke_no›>(
	g_func1
, 
	g_func2
, 
	gno›
);

150 
•awn
(
sub_roŸ
);

153 
	gãm∂©e
 <
ty≥«me
 
	gfun˘i⁄1
,Åy≥«mê
	gfun˘i⁄2
,Åy≥«mê
	gfun˘i⁄3
>

154 
add_chûdªn
 (c⁄° 
fun˘i⁄1
& 
_func1
, c⁄° 
fun˘i⁄2
& 
_func2
, c⁄° 
fun˘i⁄3
& 
_func3
)

156 
	göã∫Æ
::
•aw√r
<3, 
	gfun˘i⁄1
, 
	gfun˘i⁄2
, 
	gfun˘i⁄3
>& 
	gsub_roŸ
 = *
√w
(
Æloˇã_chûd
())
öã∫Æ
::•aw√r<3, fun˘i⁄1, fun˘i⁄2, fun˘i⁄3>(
	g_func1
, 
	g_func2
, 
	g_func3
);

157 
•awn
(
sub_roŸ
);

162 
	gãm∂©e
 <
ty≥«me
 
	gF0
>

163 
run_™d_föish
(c⁄° 
F0
& 
f0
)

165 
	göã∫Æ
::
fun˘i⁄_övokî
<
F0
>* 
övokî
 = 
√w
 (
Æloˇã_chûd
()Ë
öã∫Æ
::fun˘i⁄_övokî<F0>(
f0
);

166 
__TBB_ASSERT
(
övokî
, "ChildÅaskállocation failed");

167 
•awn_™d_waô_f‹_Æl
(*
övokî
);

171 ˛as†
	c∑øŒñ_övoke_˛ó√r
: 
öã∫Æ
::
no_c›y
 {

172 
public
:

173 #i‡
__TBB_TASK_GROUP_CONTEXT


174 
∑øŒñ_övoke_˛ó√r
(
numbî_of_chûdªn
, 
tbb
::
èsk_group_c⁄ãxt
& 
c⁄ãxt
)

175 : 
roŸ
(*
√w
(
èsk
::
Æloˇã_roŸ
(
c⁄ãxt
)Ë
öã∫Æ
::
∑øŒñ_övoke_hñ≥r
(
numbî_of_chûdªn
))

177 
∑øŒñ_övoke_˛ó√r
(
numbî_of_chûdªn
, 
tbb
::
èsk_group_c⁄ãxt
&)

178 : 
roŸ
(*
√w
(
èsk
::
Æloˇã_roŸ
()Ë
öã∫Æ
::
∑øŒñ_övoke_hñ≥r
(
numbî_of_chûdªn
))

182 ~
∑øŒñ_övoke_˛ó√r
(){

183 
roŸ
.
de°roy
(root);

185 
	göã∫Æ
::
∑øŒñ_övoke_hñ≥r
& 
roŸ
;

188 #i‡
__TBB_VARIADIC_PARALLEL_INVOKE


190 
	gãm∂©e
<
	gty≥«me
... 
	gT
> 
	gim∂_£À˘‹
;

192 
	gãm∂©e
<
ty≥«me
 
	gT1
, 
	gty≥«me
... 
	gT
> 
	gim∂_£À˘‹
<T1, T...> {

193 
ty≥«me
 
	tim∂_£À˘‹
<
	tT
...>::
	tty≥
Åype;

196 
	gãm∂©e
<
ty≥«me
 
	gT
> 
	gim∂_£À˘‹
<T> {

197 
Ál£_ty≥
 
	tty≥
;

199 
	gãm∂©e
<> 
	gim∂_£À˘‹
<
	gèsk_group_c⁄ãxt
&> {

200 
åue_ty≥
 
	tty≥
;

204 
	gèsk_group_c⁄ãxt
& 
gë_c⁄ãxt
–
èsk_group_c⁄ãxt
& 
tgc
 ) {  
	gtgc
; }

206 
	gãm∂©e
<
ty≥«me
 
	gT1
, 
	gty≥«me
... 
	gT
>

207 
	gèsk_group_c⁄ãxt
& 
gë_c⁄ãxt
–
T1
&& , 
T
&&... 
t
 )

208 {  
gë_c⁄ãxt
–
°d
::
f‹w¨d
<
T
>(
t
)... ); }

211 
	gãm∂©e
<
ty≥«me
 
	gF0
,Åy≥«mê
	gF1
, 
	gty≥«me
... 
	gF
>

212 
∑øŒñ_övoke_im∂
(
åue_ty≥
, 
F0
&& 
f0
, 
F1
&& 
f1
, 
F
&&... 
f
) {

213 
__TBB_STATIC_ASSERT
(...(
F
)>0, "VariadicÖarallel_invoke implementation broken?");

215 c⁄° 
size_t
 
	gnumbî_of_chûdªn
 = 2 + ...(
F
)/2;

216 
∑øŒñ_övoke_˛ó√r
 
˛ó√r
(
numbî_of_chûdªn
, 
gë_c⁄ãxt
(
°d
::
f‹w¨d
<
F
>(
f
)...));

217 
	g∑øŒñ_övoke_hñ≥r
& 
	groŸ
 = 
˛ó√r
.
roŸ
;

219 
	groŸ
.
add_chûdªn
(
°d
::
f‹w¨d
<
F
>(
f
)...);

220 
	groŸ
.
add_chûdªn
(
°d
::
f‹w¨d
<
F1
>(
f1
));

221 
	groŸ
.
run_™d_föish
(
°d
::
f‹w¨d
<
F0
>(
f0
));

225 
	gãm∂©e
<
ty≥«me
 
	gF0
,Åy≥«mê
	gF1
, 
	gty≥«me
... 
	gF
>

226 
∑øŒñ_övoke_im∂
(
Ál£_ty≥
, 
F0
&& 
f0
, 
F1
&& 
f1
, 
F
&&... 
f
) {

227 
	gtbb
::
èsk_group_c⁄ãxt
 
c⁄ãxt
;

229 
∑øŒñ_övoke_im∂
(
åue_ty≥
(), 
°d
::
f‹w¨d
<
F0
>(
f0
), std::f‹w¨d<
F1
>(
f1
), std::f‹w¨d<
F
>(
f
)..., 
c⁄ãxt
);

241 #i‡
__TBB_VARIADIC_PARALLEL_INVOKE


245 
	gãm∂©e
<
ty≥«me
 
	gF0
,Åy≥«mê
	gF1
, 
	gty≥«me
... 
	gF
>

246 
	$∑øŒñ_övoke
(
F0
&& 
f0
, 
F1
&& 
f1
, 
F
&&... 
f
) {

247 
ty≥«me
 
	töã∫Æ
::
	tim∂_£À˘‹
<öã∫Æ::
	tÁl£_ty≥
, 
	tF
...>::
	tty≥
 
	t£À˘‹_ty≥
;

248 
öã∫Æ
::
	`∑øŒñ_övoke_im∂
(
	`£À˘‹_ty≥
(), 
°d
::
f‹w¨d
<
F0
>(
f0
), std::f‹w¨d<
F1
>(
f1
), std::f‹w¨d<
F
>(
f
)...);

249 
	}
}

255 
	gãm∂©e
<
ty≥«me
 
	gF0
,Åy≥«mê
	gF1
 >

256 
	$∑øŒñ_övoke
(c⁄° 
F0
& 
f0
, c⁄° 
F1
& 
f1
, 
tbb
::
èsk_group_c⁄ãxt
& 
c⁄ãxt
) {

257 
öã∫Æ
::
∑øŒñ_övoke_˛ó√r
 
	`˛ó√r
(2, 
c⁄ãxt
);

258 
öã∫Æ
::
∑øŒñ_övoke_hñ≥r
& 
roŸ
 = 
˛ó√r
.root;

260 
roŸ
.
	`add_chûdªn
(
f1
);

262 
roŸ
.
	`run_™d_föish
(
f0
);

263 
	}
}

266 
	gãm∂©e
<
ty≥«me
 
	gF0
,Åy≥«mê
	gF1
,Åy≥«mê
	gF2
 >

267 
	$∑øŒñ_övoke
(c⁄° 
F0
& 
f0
, c⁄° 
F1
& 
f1
, c⁄° 
F2
& 
f2
, 
tbb
::
èsk_group_c⁄ãxt
& 
c⁄ãxt
) {

268 
öã∫Æ
::
∑øŒñ_övoke_˛ó√r
 
	`˛ó√r
(3, 
c⁄ãxt
);

269 
öã∫Æ
::
∑øŒñ_övoke_hñ≥r
& 
roŸ
 = 
˛ó√r
.root;

271 
roŸ
.
	`add_chûdªn
(
f2
);

272 
roŸ
.
	`add_chûdªn
(
f1
);

274 
roŸ
.
	`run_™d_föish
(
f0
);

275 
	}
}

278 
	gãm∂©e
<
ty≥«me
 
	gF0
,Åy≥«mê
	gF1
,Åy≥«mê
	gF2
,Åy≥«mê
	gF3
>

279 
	$∑øŒñ_övoke
(c⁄° 
F0
& 
f0
, c⁄° 
F1
& 
f1
, c⁄° 
F2
& 
f2
, c⁄° 
F3
& 
f3
,

280 
tbb
::
èsk_group_c⁄ãxt
& 
c⁄ãxt
)

282 
öã∫Æ
::
∑øŒñ_övoke_˛ó√r
 
	`˛ó√r
(4, 
c⁄ãxt
);

283 
öã∫Æ
::
∑øŒñ_övoke_hñ≥r
& 
roŸ
 = 
˛ó√r
.root;

285 
roŸ
.
	`add_chûdªn
(
f3
);

286 
roŸ
.
	`add_chûdªn
(
f2
);

287 
roŸ
.
	`add_chûdªn
(
f1
);

289 
roŸ
.
	`run_™d_föish
(
f0
);

290 
	}
}

293 
	gãm∂©e
<
ty≥«me
 
	gF0
,Åy≥«mê
	gF1
,Åy≥«mê
	gF2
,Åy≥«mê
	gF3
,Åy≥«mê
	gF4
 >

294 
	$∑øŒñ_övoke
(c⁄° 
F0
& 
f0
, c⁄° 
F1
& 
f1
, c⁄° 
F2
& 
f2
, c⁄° 
F3
& 
f3
, c⁄° 
F4
& 
f4
,

295 
tbb
::
èsk_group_c⁄ãxt
& 
c⁄ãxt
)

297 
öã∫Æ
::
∑øŒñ_övoke_˛ó√r
 
	`˛ó√r
(3, 
c⁄ãxt
);

298 
öã∫Æ
::
∑øŒñ_övoke_hñ≥r
& 
roŸ
 = 
˛ó√r
.root;

300 
roŸ
.
	`add_chûdªn
(
f4
, 
f3
);

301 
roŸ
.
	`add_chûdªn
(
f2
, 
f1
);

303 
roŸ
.
	`run_™d_föish
(
f0
);

304 
	}
}

307 
	gãm∂©e
<
ty≥«me
 
	gF0
,Åy≥«mê
	gF1
,Åy≥«mê
	gF2
,Åy≥«mê
	gF3
,Åy≥«mê
	gF4
,Åy≥«mê
	gF5
>

308 
	$∑øŒñ_övoke
(c⁄° 
F0
& 
f0
, c⁄° 
F1
& 
f1
, c⁄° 
F2
& 
f2
, c⁄° 
F3
& 
f3
, c⁄° 
F4
& 
f4
, c⁄° 
F5
& 
f5
,

309 
tbb
::
èsk_group_c⁄ãxt
& 
c⁄ãxt
)

311 
öã∫Æ
::
∑øŒñ_övoke_˛ó√r
 
	`˛ó√r
(3, 
c⁄ãxt
);

312 
öã∫Æ
::
∑øŒñ_övoke_hñ≥r
& 
roŸ
 = 
˛ó√r
.root;

314 
roŸ
.
	`add_chûdªn
(
f5
, 
f4
, 
f3
);

315 
roŸ
.
	`add_chûdªn
(
f2
, 
f1
);

317 
roŸ
.
	`run_™d_föish
(
f0
);

318 
	}
}

321 
	gãm∂©e
<
ty≥«me
 
	gF0
,Åy≥«mê
	gF1
,Åy≥«mê
	gF2
,Åy≥«mê
	gF3
,Åy≥«mê
	gF4
,Åy≥«mê
	gF5
,Åy≥«mê
	gF6
>

322 
	$∑øŒñ_övoke
(c⁄° 
F0
& 
f0
, c⁄° 
F1
& 
f1
, c⁄° 
F2
& 
f2
, c⁄° 
F3
& 
f3
, c⁄° 
F4
& 
f4
,

323 c⁄° 
F5
& 
f5
, c⁄° 
F6
& 
f6
,

324 
tbb
::
èsk_group_c⁄ãxt
& 
c⁄ãxt
)

326 
öã∫Æ
::
∑øŒñ_övoke_˛ó√r
 
	`˛ó√r
(3, 
c⁄ãxt
);

327 
öã∫Æ
::
∑øŒñ_övoke_hñ≥r
& 
roŸ
 = 
˛ó√r
.root;

329 
roŸ
.
	`add_chûdªn
(
f6
, 
f5
, 
f4
);

330 
roŸ
.
	`add_chûdªn
(
f3
, 
f2
, 
f1
);

332 
roŸ
.
	`run_™d_föish
(
f0
);

333 
	}
}

336 
	gãm∂©e
<
ty≥«me
 
	gF0
,Åy≥«mê
	gF1
,Åy≥«mê
	gF2
,Åy≥«mê
	gF3
,Åy≥«mê
	gF4
,

337 
ty≥«me
 
	gF5
,Åy≥«mê
	gF6
,Åy≥«mê
	gF7
>

338 
	$∑øŒñ_övoke
(c⁄° 
F0
& 
f0
, c⁄° 
F1
& 
f1
, c⁄° 
F2
& 
f2
, c⁄° 
F3
& 
f3
, c⁄° 
F4
& 
f4
,

339 c⁄° 
F5
& 
f5
, c⁄° 
F6
& 
f6
, c⁄° 
F7
& 
f7
,

340 
tbb
::
èsk_group_c⁄ãxt
& 
c⁄ãxt
)

342 
öã∫Æ
::
∑øŒñ_övoke_˛ó√r
 
	`˛ó√r
(4, 
c⁄ãxt
);

343 
öã∫Æ
::
∑øŒñ_övoke_hñ≥r
& 
roŸ
 = 
˛ó√r
.root;

345 
roŸ
.
	`add_chûdªn
(
f7
, 
f6
, 
f5
);

346 
roŸ
.
	`add_chûdªn
(
f4
, 
f3
);

347 
roŸ
.
	`add_chûdªn
(
f2
, 
f1
);

349 
roŸ
.
	`run_™d_föish
(
f0
);

350 
	}
}

353 
	gãm∂©e
<
ty≥«me
 
	gF0
,Åy≥«mê
	gF1
,Åy≥«mê
	gF2
,Åy≥«mê
	gF3
,Åy≥«mê
	gF4
,

354 
ty≥«me
 
	gF5
,Åy≥«mê
	gF6
,Åy≥«mê
	gF7
,Åy≥«mê
	gF8
>

355 
	$∑øŒñ_övoke
(c⁄° 
F0
& 
f0
, c⁄° 
F1
& 
f1
, c⁄° 
F2
& 
f2
, c⁄° 
F3
& 
f3
, c⁄° 
F4
& 
f4
,

356 c⁄° 
F5
& 
f5
, c⁄° 
F6
& 
f6
, c⁄° 
F7
& 
f7
, c⁄° 
F8
& 
f8
,

357 
tbb
::
èsk_group_c⁄ãxt
& 
c⁄ãxt
)

359 
öã∫Æ
::
∑øŒñ_övoke_˛ó√r
 
	`˛ó√r
(4, 
c⁄ãxt
);

360 
öã∫Æ
::
∑øŒñ_övoke_hñ≥r
& 
roŸ
 = 
˛ó√r
.root;

362 
roŸ
.
	`add_chûdªn
(
f8
, 
f7
, 
f6
);

363 
roŸ
.
	`add_chûdªn
(
f5
, 
f4
, 
f3
);

364 
roŸ
.
	`add_chûdªn
(
f2
, 
f1
);

366 
roŸ
.
	`run_™d_föish
(
f0
);

367 
	}
}

370 
	gãm∂©e
<
ty≥«me
 
	gF0
,Åy≥«mê
	gF1
,Åy≥«mê
	gF2
,Åy≥«mê
	gF3
,Åy≥«mê
	gF4
,

371 
ty≥«me
 
	gF5
,Åy≥«mê
	gF6
,Åy≥«mê
	gF7
,Åy≥«mê
	gF8
,Åy≥«mê
	gF9
>

372 
	$∑øŒñ_övoke
(c⁄° 
F0
& 
f0
, c⁄° 
F1
& 
f1
, c⁄° 
F2
& 
f2
, c⁄° 
F3
& 
f3
, c⁄° 
F4
& 
f4
,

373 c⁄° 
F5
& 
f5
, c⁄° 
F6
& 
f6
, c⁄° 
F7
& 
f7
, c⁄° 
F8
& 
f8
, c⁄° 
F9
& 
f9
,

374 
tbb
::
èsk_group_c⁄ãxt
& 
c⁄ãxt
)

376 
öã∫Æ
::
∑øŒñ_övoke_˛ó√r
 
	`˛ó√r
(4, 
c⁄ãxt
);

377 
öã∫Æ
::
∑øŒñ_övoke_hñ≥r
& 
roŸ
 = 
˛ó√r
.root;

379 
roŸ
.
	`add_chûdªn
(
f9
, 
f8
, 
f7
);

380 
roŸ
.
	`add_chûdªn
(
f6
, 
f5
, 
f4
);

381 
roŸ
.
	`add_chûdªn
(
f3
, 
f2
, 
f1
);

383 
roŸ
.
	`run_™d_föish
(
f0
);

384 
	}
}

387 
	gãm∂©e
<
ty≥«me
 
	gF0
,Åy≥«mê
	gF1
>

388 
	$∑øŒñ_övoke
(c⁄° 
F0
& 
f0
, c⁄° 
F1
& 
f1
) {

389 
èsk_group_c⁄ãxt
 
c⁄ãxt
;

390 
∑øŒñ_övoke
<
F0
, 
F1
>(
f0
, 
f1
, 
c⁄ãxt
);

391 
	}
}

393 
	gãm∂©e
<
ty≥«me
 
	gF0
,Åy≥«mê
	gF1
,Åy≥«mê
	gF2
>

394 
	$∑øŒñ_övoke
(c⁄° 
F0
& 
f0
, c⁄° 
F1
& 
f1
, c⁄° 
F2
& 
f2
) {

395 
èsk_group_c⁄ãxt
 
c⁄ãxt
;

396 
∑øŒñ_övoke
<
F0
, 
F1
, 
F2
>(
f0
, 
f1
, 
f2
, 
c⁄ãxt
);

397 
	}
}

399 
	gãm∂©e
<
ty≥«me
 
	gF0
,Åy≥«mê
	gF1
,Åy≥«mê
	gF2
,Åy≥«mê
	gF3
 >

400 
	$∑øŒñ_övoke
(c⁄° 
F0
& 
f0
, c⁄° 
F1
& 
f1
, c⁄° 
F2
& 
f2
, c⁄° 
F3
& 
f3
) {

401 
èsk_group_c⁄ãxt
 
c⁄ãxt
;

402 
∑øŒñ_övoke
<
F0
, 
F1
, 
F2
, 
F3
>(
f0
, 
f1
, 
f2
, 
f3
, 
c⁄ãxt
);

403 
	}
}

405 
	gãm∂©e
<
ty≥«me
 
	gF0
,Åy≥«mê
	gF1
,Åy≥«mê
	gF2
,Åy≥«mê
	gF3
,Åy≥«mê
	gF4
>

406 
	$∑øŒñ_övoke
(c⁄° 
F0
& 
f0
, c⁄° 
F1
& 
f1
, c⁄° 
F2
& 
f2
, c⁄° 
F3
& 
f3
, c⁄° 
F4
& 
f4
) {

407 
èsk_group_c⁄ãxt
 
c⁄ãxt
;

408 
∑øŒñ_övoke
<
F0
, 
F1
, 
F2
, 
F3
, 
F4
>(
f0
, 
f1
, 
f2
, 
f3
, 
f4
, 
c⁄ãxt
);

409 
	}
}

411 
	gãm∂©e
<
ty≥«me
 
	gF0
,Åy≥«mê
	gF1
,Åy≥«mê
	gF2
,Åy≥«mê
	gF3
,Åy≥«mê
	gF4
,Åy≥«mê
	gF5
>

412 
	$∑øŒñ_övoke
(c⁄° 
F0
& 
f0
, c⁄° 
F1
& 
f1
, c⁄° 
F2
& 
f2
, c⁄° 
F3
& 
f3
, c⁄° 
F4
& 
f4
, c⁄° 
F5
& 
f5
) {

413 
èsk_group_c⁄ãxt
 
c⁄ãxt
;

414 
∑øŒñ_övoke
<
F0
, 
F1
, 
F2
, 
F3
, 
F4
, 
F5
>(
f0
, 
f1
, 
f2
, 
f3
, 
f4
, 
f5
, 
c⁄ãxt
);

415 
	}
}

417 
	gãm∂©e
<
ty≥«me
 
	gF0
,Åy≥«mê
	gF1
,Åy≥«mê
	gF2
,Åy≥«mê
	gF3
,Åy≥«mê
	gF4
,Åy≥«mê
	gF5
,Åy≥«mê
	gF6
>

418 
	$∑øŒñ_övoke
(c⁄° 
F0
& 
f0
, c⁄° 
F1
& 
f1
, c⁄° 
F2
& 
f2
, c⁄° 
F3
& 
f3
, c⁄° 
F4
& 
f4
,

419 c⁄° 
F5
& 
f5
, c⁄° 
F6
& 
f6
)

421 
èsk_group_c⁄ãxt
 
c⁄ãxt
;

422 
∑øŒñ_övoke
<
F0
, 
F1
, 
F2
, 
F3
, 
F4
, 
F5
, 
F6
>(
f0
, 
f1
, 
f2
, 
f3
, 
f4
, 
f5
, 
f6
, 
c⁄ãxt
);

423 
	}
}

425 
	gãm∂©e
<
ty≥«me
 
	gF0
,Åy≥«mê
	gF1
,Åy≥«mê
	gF2
,Åy≥«mê
	gF3
,Åy≥«mê
	gF4
,

426 
ty≥«me
 
	gF5
,Åy≥«mê
	gF6
,Åy≥«mê
	gF7
>

427 
	$∑øŒñ_övoke
(c⁄° 
F0
& 
f0
, c⁄° 
F1
& 
f1
, c⁄° 
F2
& 
f2
, c⁄° 
F3
& 
f3
, c⁄° 
F4
& 
f4
,

428 c⁄° 
F5
& 
f5
, c⁄° 
F6
& 
f6
, c⁄° 
F7
& 
f7
)

430 
èsk_group_c⁄ãxt
 
c⁄ãxt
;

431 
∑øŒñ_övoke
<
F0
, 
F1
, 
F2
, 
F3
, 
F4
, 
F5
, 
F6
, 
F7
>(
f0
, 
f1
, 
f2
, 
f3
, 
f4
, 
f5
, 
f6
, 
f7
, 
c⁄ãxt
);

432 
	}
}

434 
	gãm∂©e
<
ty≥«me
 
	gF0
,Åy≥«mê
	gF1
,Åy≥«mê
	gF2
,Åy≥«mê
	gF3
,Åy≥«mê
	gF4
,

435 
ty≥«me
 
	gF5
,Åy≥«mê
	gF6
,Åy≥«mê
	gF7
,Åy≥«mê
	gF8
>

436 
	$∑øŒñ_övoke
(c⁄° 
F0
& 
f0
, c⁄° 
F1
& 
f1
, c⁄° 
F2
& 
f2
, c⁄° 
F3
& 
f3
, c⁄° 
F4
& 
f4
,

437 c⁄° 
F5
& 
f5
, c⁄° 
F6
& 
f6
, c⁄° 
F7
& 
f7
, c⁄° 
F8
& 
f8
)

439 
èsk_group_c⁄ãxt
 
c⁄ãxt
;

440 
∑øŒñ_övoke
<
F0
, 
F1
, 
F2
, 
F3
, 
F4
, 
F5
, 
F6
, 
F7
, 
F8
>(
f0
, 
f1
, 
f2
, 
f3
, 
f4
, 
f5
, 
f6
, 
f7
, 
f8
, 
c⁄ãxt
);

441 
	}
}

443 
	gãm∂©e
<
ty≥«me
 
	gF0
,Åy≥«mê
	gF1
,Åy≥«mê
	gF2
,Åy≥«mê
	gF3
,Åy≥«mê
	gF4
,

444 
ty≥«me
 
	gF5
,Åy≥«mê
	gF6
,Åy≥«mê
	gF7
,Åy≥«mê
	gF8
,Åy≥«mê
	gF9
>

445 
	$∑øŒñ_övoke
(c⁄° 
F0
& 
f0
, c⁄° 
F1
& 
f1
, c⁄° 
F2
& 
f2
, c⁄° 
F3
& 
f3
, c⁄° 
F4
& 
f4
,

446 c⁄° 
F5
& 
f5
, c⁄° 
F6
& 
f6
, c⁄° 
F7
& 
f7
, c⁄° 
F8
& 
f8
, c⁄° 
F9
& 
f9
)

448 
èsk_group_c⁄ãxt
 
c⁄ãxt
;

449 
∑øŒñ_övoke
<
F0
, 
F1
, 
F2
, 
F3
, 
F4
, 
F5
, 
F6
, 
F7
, 
F8
, 
F9
>(
f0
, 
f1
, 
f2
, 
f3
, 
f4
, 
f5
, 
f6
, 
f7
, 
f8
, 
f9
, 
c⁄ãxt
);

450 
	}
}

	@viper/concurrentqueue-src/benchmarks/tbb/parallel_reduce.h

21 #i‚de‡
__TBB_∑øŒñ_ªdu˚_H


22 
	#__TBB_∑øŒñ_ªdu˚_H


	)

24 
	~<√w
>

25 
	~"èsk.h
"

26 
	~"Æig√d_•a˚.h
"

27 
	~"∑πôi⁄î.h
"

28 
	~"tbb_¥ofûög.h
"

30 
«me•a˚
 
	gtbb
 {

32 
«me•a˚
 
	göãrÁ˚7
 {

34 
«me•a˚
 
	göã∫Æ
 {

36 
usög
 
«me•a˚
 
	gtbb
::
öã∫Æ
;

40 
	groŸ_èsk
, 
	gÀ·_chûd
, 
	gright_chûd


44 
	tªdu˘i⁄_c⁄ãxt
;

48 
	gãm∂©e
<
ty≥«me
 
	gBody
>

49 ˛as†
	cföish_ªdu˚
: 
public
 
Êag_èsk
 {

51 
boﬁ
 
has_right_zombõ
;

52 c⁄° 
ªdu˘i⁄_c⁄ãxt
 
	gmy_c⁄ãxt
;

53 
Body
* 
	gmy_body
;

54 
	gÆig√d_•a˚
<
	gBody
> 
	gzombõ_•a˚
;

55 
föish_ªdu˚
–
ªdu˘i⁄_c⁄ãxt
 
c⁄ãxt_
 ) :

56 
has_right_zombõ
(
Ál£
),

57 
my_c⁄ãxt
(
c⁄ãxt_
),

58 
my_body
(
NULL
)

61 ~
föish_ªdu˚
() {

62 if–
	ghas_right_zombõ
 )

63 
	gzombõ_•a˚
.
begö
()->~
Body
();

65 
èsk
* 
execuã
() {

66 if–
	ghas_right_zombõ
 ) {

68 
Body
* 
	gs
 = 
zombõ_•a˚
.
begö
();

69 
	gmy_body
->
joö
–*
s
 );

72 if–
	gmy_c⁄ãxt
==
À·_chûd
 )

73 
ôt_°‹e_w‹d_wôh_ªÀa£
–
°©ic_ˇ°
<
föish_ªdu˚
*>(
∑ª¡
())->
my_body
, my_body );

74  
	gNULL
;

76 
	gãm∂©e
<
ty≥«me
 
	gR™ge
,ty≥«mê
	gBody_
,Åy≥«mê
	gP¨tôi⁄î
>

77 
‰õnd
 
˛ass
 
	g°¨t_ªdu˚
;

81 
Æloˇã_siblög
(
èsk
* 
°¨t_ªdu˚_èsk
,Åask *
èsks
[], 
size_t
 
°¨t_byãs
, size_à
föish_byãs
);

85 
	gãm∂©e
<
ty≥«me
 
	gR™ge
,Åy≥«mê
	gBody
,Åy≥«mê
	gP¨tôi⁄î
>

86 ˛as†
	c°¨t_ªdu˚
: 
public
 
èsk
 {

87 
föish_ªdu˚
<
	tBody
> 
	tföish_ty≥
;

88 
Body
* 
	gmy_body
;

89 
R™ge
 
	gmy_ønge
;

90 
ty≥«me
 
	gP¨tôi⁄î
::
èsk_∑πôi⁄_ty≥
 
my_∑πôi⁄
;

91 
ªdu˘i⁄_c⁄ãxt
 
	gmy_c⁄ãxt
;

92  
èsk
* 
execuã
();

94  
nŸe_afföôy
–
afföôy_id
 
id
 ) {

95 
	gmy_∑πôi⁄
.
nŸe_afföôy
–
id
 );

97 
	gãm∂©e
<
ty≥«me
 
	gBody_
>

98 
‰õnd
 
˛ass
 
	gföish_ªdu˚
;

100 
	gpublic
:

102 
°¨t_ªdu˚
–c⁄° 
R™ge
& 
ønge
, 
Body
* 
body
, 
P¨tôi⁄î
& 
∑πôi⁄î
 ) :

103 
my_body
(
body
),

104 
my_ønge
(
ønge
),

105 
my_∑πôi⁄
(
∑πôi⁄î
),

106 
my_c⁄ãxt
(
roŸ_èsk
)

111 
°¨t_ªdu˚
–°¨t_ªdu˚& 
∑ª¡_
, 
ty≥«me
 
P¨tôi⁄î
::
•lô_ty≥
& 
•lô_obj
 ) :

112 
my_body
(
∑ª¡_
.my_body),

113 
my_ønge
(
∑ª¡_
.my_ønge, 
•lô_obj
),

114 
my_∑πôi⁄
(
∑ª¡_
.my_∑πôi⁄, 
•lô_obj
),

115 
my_c⁄ãxt
(
right_chûd
)

117 
	gmy_∑πôi⁄
.
£t_afföôy
(*
this
);

118 
	g∑ª¡_
.
	gmy_c⁄ãxt
 = 
À·_chûd
;

122 
°¨t_ªdu˚
–°¨t_ªdu˚& 
∑ª¡_
, c⁄° 
R™ge
& 
r
, 
dïth_t
 
d
 ) :

123 
my_body
(
∑ª¡_
.my_body),

124 
my_ønge
(
r
),

125 
my_∑πôi⁄
(
∑ª¡_
.my_∑πôi⁄, 
•lô
()),

126 
my_c⁄ãxt
(
right_chûd
)

128 
	gmy_∑πôi⁄
.
£t_afföôy
(*
this
);

129 
	gmy_∑πôi⁄
.
Æign_dïth
–
d
 );

130 
	g∑ª¡_
.
	gmy_c⁄ãxt
 = 
À·_chûd
;

132 
run
–c⁄° 
R™ge
& 
ønge
, 
Body
& 
body
, 
P¨tôi⁄î
& 
∑πôi⁄î
 ) {

133 if–!
	gønge
.
em±y
() ) {

134 #i‡!
__TBB_TASK_GROUP_CONTEXT
 || 
TBB_JOIN_OUTER_TASK_GROUP


135 
	gèsk
::
•awn_roŸ_™d_waô
–*
√w
(
èsk
::
Æloˇã_roŸ
()Ë
°¨t_ªdu˚
(
ønge
,&
body
,
∑πôi⁄î
) );

139 
èsk_group_c⁄ãxt
 
	gc⁄ãxt
;

140 
	gèsk
::
•awn_roŸ_™d_waô
–*
√w
(
èsk
::
Æloˇã_roŸ
(
c⁄ãxt
)Ë
°¨t_ªdu˚
(
ønge
,&
body
,
∑πôi⁄î
) );

144 #i‡
__TBB_TASK_GROUP_CONTEXT


145 
run
–c⁄° 
R™ge
& 
ønge
, 
Body
& 
body
, 
P¨tôi⁄î
& 
∑πôi⁄î
, 
èsk_group_c⁄ãxt
& 
c⁄ãxt
 ) {

146 if–!
	gønge
.
em±y
() )

147 
	gèsk
::
•awn_roŸ_™d_waô
–*
√w
(
èsk
::
Æloˇã_roŸ
(
c⁄ãxt
)Ë
°¨t_ªdu˚
(
ønge
,&
body
,
∑πôi⁄î
) );

151 
run_body
–
R™ge
 &
r
 ) { (*
	gmy_body
)–
	gr
 ); }

155 
of„r_w‹k
(
ty≥«me
 
P¨tôi⁄î
::
•lô_ty≥
& 
•lô_obj
) {

156 
èsk
 *
èsks
[2];

157 
Æloˇã_siblög
(
°©ic_ˇ°
<
èsk
*>(
this
), 
èsks
, (
°¨t_ªdu˚
), (
föish_ty≥
));

158 
√w
((*)
èsks
[0]Ë
föish_ty≥
(
my_c⁄ãxt
);

159 
√w
((*)
èsks
[1]Ë
°¨t_ªdu˚
(*
this
, 
•lô_obj
);

160 
•awn
(*
èsks
[1]);

163 
of„r_w‹k
(c⁄° 
R™ge
& 
r
, 
dïth_t
 
d
 = 0) {

164 
èsk
 *
èsks
[2];

165 
Æloˇã_siblög
(
°©ic_ˇ°
<
èsk
*>(
this
), 
èsks
, (
°¨t_ªdu˚
), (
föish_ty≥
));

166 
√w
((*)
èsks
[0]Ë
föish_ty≥
(
my_c⁄ãxt
);

167 
√w
((*)
èsks
[1]Ë
°¨t_ªdu˚
(*
this
, 
r
, 
d
);

168 
•awn
(*
èsks
[1]);

174 
ölöe
 
Æloˇã_siblög
(
èsk
* 
°¨t_ªdu˚_èsk
,Åask *
èsks
[], 
size_t
 
°¨t_byãs
, size_à
föish_byãs
) {

175 
	gèsks
[0] = &
°¨t_ªdu˚_èsk
->
Æloˇã_c⁄töu©i⁄
().
Æloˇã
(
föish_byãs
);

176 
	g°¨t_ªdu˚_èsk
->
£t_∑ª¡
(
èsks
[0]);

177 
	gèsks
[0]->
£t_ªf_cou¡
(2);

178 
	gèsks
[1] = &
èsks
[0]->
Æloˇã_chûd
().
Æloˇã
(
°¨t_byãs
);

181 
	gãm∂©e
<
ty≥«me
 
	gR™ge
,Åy≥«mê
	gBody
,Åy≥«mê
	gP¨tôi⁄î
>

182 
èsk
* 
	g°¨t_ªdu˚
<
	gR™ge
,
	gBody
,
	gP¨tôi⁄î
>::
execuã
() {

183 
my_∑πôi⁄
.
check_beög_°ﬁí
–*
this
 );

184 if–
	gmy_c⁄ãxt
==
right_chûd
 ) {

185 
föish_ty≥
* 
∑ª¡_±r
 = 
°©ic_ˇ°
<föish_ty≥*>(
∑ª¡
());

186 if–!
ôt_lﬂd_w‹d_wôh_acquúe
(
∑ª¡_±r
->
my_body
) ) {

187 
	gmy_body
 = 
√w
–
∑ª¡_±r
->
zombõ_•a˚
.
begö
(ËË
Body
(*
my_body
,
•lô
());

188 
	g∑ª¡_±r
->
	ghas_right_zombõ
 = 
åue
;

190 } 
__TBB_ASSERT
(
my_c⁄ãxt
==
roŸ_èsk
,
NULL
);

191 
	gmy_∑πôi⁄
.
execuã
(*
this
, 
my_ønge
);

192 if–
	gmy_c⁄ãxt
==
À·_chûd
 ) {

193 
föish_ty≥
* 
∑ª¡_±r
 = 
°©ic_ˇ°
<föish_ty≥*>(
∑ª¡
());

194 
__TBB_ASSERT
(
my_body
!=
∑ª¡_±r
->
zombõ_•a˚
.
begö
(),
NULL
);

195 
ôt_°‹e_w‹d_wôh_ªÀa£
(
∑ª¡_±r
->
my_body
, my_body );

197  
	gNULL
;

202 
	gãm∂©e
<
ty≥«me
 
	gBody
>

203 ˛as†
	cföish_dëîmöi°ic_ªdu˚
: 
public
 
èsk
 {

204 
Body
 &
my_À·_body
;

205 
Body
 
	gmy_right_body
;

207 
föish_dëîmöi°ic_ªdu˚
–
Body
 &
body
 ) :

208 
my_À·_body
–
body
 ),

209 
my_right_body
–
body
, 
•lô
() )

212 
èsk
* 
execuã
() {

213 
	gmy_À·_body
.
joö
–
my_right_body
 );

214  
	gNULL
;

216 
	gãm∂©e
<
ty≥«me
 
	gR™ge
,ty≥«mê
	gBody_
>

217 
‰õnd
 
˛ass
 
	g°¨t_dëîmöi°ic_ªdu˚
;

222 
	gãm∂©e
<
ty≥«me
 
	gR™ge
,Åy≥«mê
	gBody
>

223 ˛as†
	c°¨t_dëîmöi°ic_ªdu˚
: 
public
 
èsk
 {

224 
föish_dëîmöi°ic_ªdu˚
<
	tBody
> 
	tföish_ty≥
;

225 
	gBody
 &
	gmy_body
;

226 
R™ge
 
	gmy_ønge
;

227  
èsk
* 
execuã
();

230 
°¨t_dëîmöi°ic_ªdu˚
–c⁄° 
R™ge
& 
ønge
, 
Body
& 
body
 ) :

231 
my_body
–
body
 ),

232 
my_ønge
–
ønge
 )

237 
°¨t_dëîmöi°ic_ªdu˚
–°¨t_dëîmöi°ic_ªdu˚& 
∑ª¡_
, 
föish_ty≥
& 
c
 ) :

238 
my_body
–
c
.
my_right_body
 ),

239 
my_ønge
–
∑ª¡_
.my_ønge, 
•lô
() )

243 
	gpublic
:

244 
run
–c⁄° 
R™ge
& 
ønge
, 
Body
& 
body
 ) {

245 if–!
	gønge
.
em±y
() ) {

246 #i‡!
__TBB_TASK_GROUP_CONTEXT
 || 
TBB_JOIN_OUTER_TASK_GROUP


247 
	gèsk
::
•awn_roŸ_™d_waô
–*
√w
(
èsk
::
Æloˇã_roŸ
()Ë
°¨t_dëîmöi°ic_ªdu˚
(
ønge
,&
body
) );

251 
èsk_group_c⁄ãxt
 
	gc⁄ãxt
;

252 
	gèsk
::
•awn_roŸ_™d_waô
–*
√w
(
èsk
::
Æloˇã_roŸ
(
c⁄ãxt
)Ë
°¨t_dëîmöi°ic_ªdu˚
(
ønge
,
body
) );

256 #i‡
__TBB_TASK_GROUP_CONTEXT


257 
run
–c⁄° 
R™ge
& 
ønge
, 
Body
& 
body
, 
èsk_group_c⁄ãxt
& 
c⁄ãxt
 ) {

258 if–!
	gønge
.
em±y
() )

259 
	gèsk
::
•awn_roŸ_™d_waô
–*
√w
(
èsk
::
Æloˇã_roŸ
(
c⁄ãxt
)Ë
°¨t_dëîmöi°ic_ªdu˚
(
ønge
,
body
) );

264 
	gãm∂©e
<
ty≥«me
 
	gR™ge
,Åy≥«mê
	gBody
>

265 
èsk
* 
	g°¨t_dëîmöi°ic_ªdu˚
<
	gR™ge
,
	gBody
>::
execuã
() {

266 if–!
my_ønge
.
is_divisibÀ
() ) {

267 
my_body
–
my_ønge
 );

268  
	gNULL
;

270 
	gföish_ty≥
& 
	gc
 = *
√w
–
Æloˇã_c⁄töu©i⁄
(ËË
föish_ty≥
–
my_body
 );

271 
ªcy˛e_as_chûd_of
(
c
);

272 
	gc
.
£t_ªf_cou¡
(2);

273 
	g°¨t_dëîmöi°ic_ªdu˚
& 
	gb
 = *
√w
–
c
.
Æloˇã_chûd
(ËË
°¨t_dëîmöi°ic_ªdu˚
–*
this
, c );

274 
	gèsk
::
•awn
(
b
);

275  
	gthis
;

283 
«me•a˚
 
	göã∫Æ
 {

284 
usög
 
	göãrÁ˚7
::
öã∫Æ
::
°¨t_ªdu˚
;

285 
usög
 
	göãrÁ˚7
::
öã∫Æ
::
°¨t_dëîmöi°ic_ªdu˚
;

291 
	gãm∂©e
<
ty≥«me
 
	gR™ge
,Åy≥«mê
	gVÆue
,Åy≥«mê
	gRólBody
,Åy≥«mê
	gRedu˘i⁄
>

292 ˛as†
	cœmbda_ªdu˚_body
 {

297 c⁄° 
	gVÆue
& 
	gidítôy_ñemít
;

298 c⁄° 
	gRólBody
& 
	gmy_ªÆ_body
;

299 c⁄° 
	gRedu˘i⁄
& 
	gmy_ªdu˘i⁄
;

300 
VÆue
 
	gmy_vÆue
;

301 
	gœmbda_ªdu˚_body
& 
	g›î©‹
–c⁄° 
œmbda_ªdu˚_body
& 
Ÿhî
 );

302 
	gpublic
:

303 
œmbda_ªdu˚_body
–c⁄° 
VÆue
& 
idítôy
, c⁄° 
RólBody
& 
body
, c⁄° 
Redu˘i⁄
& 
ªdu˘i⁄
 )

304 : 
idítôy_ñemít
(
idítôy
)

305 , 
my_ªÆ_body
(
body
)

306 , 
my_ªdu˘i⁄
(
ªdu˘i⁄
)

307 , 
my_vÆue
(
idítôy
)

309 
œmbda_ªdu˚_body
–c⁄°Üambda_ªdu˚_body& 
Ÿhî
 )

310 : 
idítôy_ñemít
(
Ÿhî
.identity_element)

311 , 
my_ªÆ_body
(
Ÿhî
.my_real_body)

312 , 
my_ªdu˘i⁄
(
Ÿhî
.my_reduction)

313 , 
my_vÆue
(
Ÿhî
.my_value)

315 
œmbda_ªdu˚_body
–œmbda_ªdu˚_body& 
Ÿhî
, 
tbb
::
•lô
 )

316 : 
idítôy_ñemít
(
Ÿhî
.identity_element)

317 , 
my_ªÆ_body
(
Ÿhî
.my_real_body)

318 , 
my_ªdu˘i⁄
(
Ÿhî
.my_reduction)

319 , 
my_vÆue
(
Ÿhî
.
idítôy_ñemít
)

321 
›î©‹
()(
	gR™ge
& 
	gønge
) {

322 
	gmy_vÆue
 = 
my_ªÆ_body
(
ønge
, 
c⁄°_ˇ°
<c⁄° 
VÆue
&>(
my_vÆue
));

324 
joö
–
œmbda_ªdu˚_body
& 
rhs
 ) {

325 
	gmy_vÆue
 = 
my_ªdu˘i⁄
(
c⁄°_ˇ°
<c⁄° 
VÆue
&>(
my_vÆue
), c⁄°_ˇ°<c⁄° VÆue&>(
rhs
.my_value));

327 
VÆue
 
ªsu…
() const {

328  
	gmy_vÆue
;

358 
	gãm∂©e
<
ty≥«me
 
	gR™ge
,Åy≥«mê
	gBody
>

359 
	$∑øŒñ_ªdu˚
–c⁄° 
R™ge
& 
ønge
, 
Body
& 
body
 ) {

360 
öã∫Æ
::
°¨t_ªdu˚
<
R™ge
,
Body
, c⁄° 
__TBB_DEFAULT_PARTITIONER
>::
	`run
–
ønge
, 
body
, 
	`__TBB_DEFAULT_PARTITIONER
() );

361 
	}
}

365 
	gãm∂©e
<
ty≥«me
 
	gR™ge
,Åy≥«mê
	gBody
>

366 
	$∑øŒñ_ªdu˚
–c⁄° 
R™ge
& 
ønge
, 
Body
& 
body
, c⁄° 
sim∂e_∑πôi⁄î
& 
∑πôi⁄î
 ) {

367 
öã∫Æ
::
°¨t_ªdu˚
<
R™ge
,
Body
,c⁄° 
sim∂e_∑πôi⁄î
>::
	`run
–
ønge
, 
body
, 
∑πôi⁄î
 );

368 
	}
}

372 
	gãm∂©e
<
ty≥«me
 
	gR™ge
,Åy≥«mê
	gBody
>

373 
	$∑øŒñ_ªdu˚
–c⁄° 
R™ge
& 
ønge
, 
Body
& 
body
, c⁄° 
auto_∑πôi⁄î
& 
∑πôi⁄î
 ) {

374 
öã∫Æ
::
°¨t_ªdu˚
<
R™ge
,
Body
,c⁄° 
auto_∑πôi⁄î
>::
	`run
–
ønge
, 
body
, 
∑πôi⁄î
 );

375 
	}
}

379 
	gãm∂©e
<
ty≥«me
 
	gR™ge
,Åy≥«mê
	gBody
>

380 
	$∑øŒñ_ªdu˚
–c⁄° 
R™ge
& 
ønge
, 
Body
& 
body
, 
afföôy_∑πôi⁄î
& 
∑πôi⁄î
 ) {

381 
öã∫Æ
::
°¨t_ªdu˚
<
R™ge
,
Body
,
afföôy_∑πôi⁄î
>::
	`run
–
ønge
, 
body
, 
∑πôi⁄î
 );

382 
	}
}

384 #i‡
__TBB_TASK_GROUP_CONTEXT


387 
	gãm∂©e
<
ty≥«me
 
	gR™ge
,Åy≥«mê
	gBody
>

388 
	$∑øŒñ_ªdu˚
–c⁄° 
R™ge
& 
ønge
, 
Body
& 
body
, c⁄° 
sim∂e_∑πôi⁄î
& 
∑πôi⁄î
, 
èsk_group_c⁄ãxt
& 
c⁄ãxt
 ) {

389 
öã∫Æ
::
°¨t_ªdu˚
<
R™ge
,
Body
,c⁄° 
sim∂e_∑πôi⁄î
>::
	`run
–
ønge
, 
body
, 
∑πôi⁄î
, 
c⁄ãxt
 );

390 
	}
}

394 
	gãm∂©e
<
ty≥«me
 
	gR™ge
,Åy≥«mê
	gBody
>

395 
	$∑øŒñ_ªdu˚
–c⁄° 
R™ge
& 
ønge
, 
Body
& 
body
, c⁄° 
auto_∑πôi⁄î
& 
∑πôi⁄î
, 
èsk_group_c⁄ãxt
& 
c⁄ãxt
 ) {

396 
öã∫Æ
::
°¨t_ªdu˚
<
R™ge
,
Body
,c⁄° 
auto_∑πôi⁄î
>::
	`run
–
ønge
, 
body
, 
∑πôi⁄î
, 
c⁄ãxt
 );

397 
	}
}

401 
	gãm∂©e
<
ty≥«me
 
	gR™ge
,Åy≥«mê
	gBody
>

402 
	$∑øŒñ_ªdu˚
–c⁄° 
R™ge
& 
ønge
, 
Body
& 
body
, 
afföôy_∑πôi⁄î
& 
∑πôi⁄î
, 
èsk_group_c⁄ãxt
& 
c⁄ãxt
 ) {

403 
öã∫Æ
::
°¨t_ªdu˚
<
R™ge
,
Body
,
afföôy_∑πôi⁄î
>::
	`run
–
ønge
, 
body
, 
∑πôi⁄î
, 
c⁄ãxt
 );

404 
	}
}

412 
	gãm∂©e
<
ty≥«me
 
	gR™ge
,Åy≥«mê
	gVÆue
,Åy≥«mê
	gRólBody
,Åy≥«mê
	gRedu˘i⁄
>

413 
VÆue
 
	$∑øŒñ_ªdu˚
–c⁄° 
R™ge
& 
ønge
, c⁄° 
VÆue
& 
idítôy
, c⁄° 
RólBody
& 
ªÆ_body
, c⁄° 
Redu˘i⁄
& 
ªdu˘i⁄
 ) {

414 
öã∫Æ
::
œmbda_ªdu˚_body
<
R™ge
,
VÆue
,
RólBody
,
Redu˘i⁄
> 
	`body
(
idítôy
, 
ªÆ_body
, 
ªdu˘i⁄
);

415 
öã∫Æ
::
°¨t_ªdu˚
<
R™ge
,öã∫Æ::
œmbda_ªdu˚_body
<R™ge,
VÆue
,
RólBody
,
Redu˘i⁄
>,c⁄° 
__TBB_DEFAULT_PARTITIONER
>

416 ::
	`run
(
ønge
, 
body
, 
	`__TBB_DEFAULT_PARTITIONER
() );

417  
body
.
	`ªsu…
();

418 
	}
}

422 
	gãm∂©e
<
ty≥«me
 
	gR™ge
,Åy≥«mê
	gVÆue
,Åy≥«mê
	gRólBody
,Åy≥«mê
	gRedu˘i⁄
>

423 
VÆue
 
	$∑øŒñ_ªdu˚
–c⁄° 
R™ge
& 
ønge
, c⁄° 
VÆue
& 
idítôy
, c⁄° 
RólBody
& 
ªÆ_body
, c⁄° 
Redu˘i⁄
& 
ªdu˘i⁄
,

424 c⁄° 
sim∂e_∑πôi⁄î
& 
∑πôi⁄î
 ) {

425 
öã∫Æ
::
œmbda_ªdu˚_body
<
R™ge
,
VÆue
,
RólBody
,
Redu˘i⁄
> 
	`body
(
idítôy
, 
ªÆ_body
, 
ªdu˘i⁄
);

426 
öã∫Æ
::
°¨t_ªdu˚
<
R™ge
,öã∫Æ::
œmbda_ªdu˚_body
<R™ge,
VÆue
,
RólBody
,
Redu˘i⁄
>,c⁄° 
sim∂e_∑πôi⁄î
>

427 ::
	`run
(
ønge
, 
body
, 
∑πôi⁄î
 );

428  
body
.
	`ªsu…
();

429 
	}
}

433 
	gãm∂©e
<
ty≥«me
 
	gR™ge
,Åy≥«mê
	gVÆue
,Åy≥«mê
	gRólBody
,Åy≥«mê
	gRedu˘i⁄
>

434 
VÆue
 
	$∑øŒñ_ªdu˚
–c⁄° 
R™ge
& 
ønge
, c⁄° 
VÆue
& 
idítôy
, c⁄° 
RólBody
& 
ªÆ_body
, c⁄° 
Redu˘i⁄
& 
ªdu˘i⁄
,

435 c⁄° 
auto_∑πôi⁄î
& 
∑πôi⁄î
 ) {

436 
öã∫Æ
::
œmbda_ªdu˚_body
<
R™ge
,
VÆue
,
RólBody
,
Redu˘i⁄
> 
	`body
(
idítôy
, 
ªÆ_body
, 
ªdu˘i⁄
);

437 
öã∫Æ
::
°¨t_ªdu˚
<
R™ge
,öã∫Æ::
œmbda_ªdu˚_body
<R™ge,
VÆue
,
RólBody
,
Redu˘i⁄
>,c⁄° 
auto_∑πôi⁄î
>

438 ::
	`run
–
ønge
, 
body
, 
∑πôi⁄î
 );

439  
body
.
	`ªsu…
();

440 
	}
}

444 
	gãm∂©e
<
ty≥«me
 
	gR™ge
,Åy≥«mê
	gVÆue
,Åy≥«mê
	gRólBody
,Åy≥«mê
	gRedu˘i⁄
>

445 
VÆue
 
	$∑øŒñ_ªdu˚
–c⁄° 
R™ge
& 
ønge
, c⁄° 
VÆue
& 
idítôy
, c⁄° 
RólBody
& 
ªÆ_body
, c⁄° 
Redu˘i⁄
& 
ªdu˘i⁄
,

446 
afföôy_∑πôi⁄î
& 
∑πôi⁄î
 ) {

447 
öã∫Æ
::
œmbda_ªdu˚_body
<
R™ge
,
VÆue
,
RólBody
,
Redu˘i⁄
> 
	`body
(
idítôy
, 
ªÆ_body
, 
ªdu˘i⁄
);

448 
öã∫Æ
::
°¨t_ªdu˚
<
R™ge
,öã∫Æ::
œmbda_ªdu˚_body
<R™ge,
VÆue
,
RólBody
,
Redu˘i⁄
>,
afföôy_∑πôi⁄î
>

449 ::
	`run
–
ønge
, 
body
, 
∑πôi⁄î
 );

450  
body
.
	`ªsu…
();

451 
	}
}

453 #i‡
__TBB_TASK_GROUP_CONTEXT


456 
	gãm∂©e
<
ty≥«me
 
	gR™ge
,Åy≥«mê
	gVÆue
,Åy≥«mê
	gRólBody
,Åy≥«mê
	gRedu˘i⁄
>

457 
VÆue
 
	$∑øŒñ_ªdu˚
–c⁄° 
R™ge
& 
ønge
, c⁄° 
VÆue
& 
idítôy
, c⁄° 
RólBody
& 
ªÆ_body
, c⁄° 
Redu˘i⁄
& 
ªdu˘i⁄
,

458 c⁄° 
sim∂e_∑πôi⁄î
& 
∑πôi⁄î
, 
èsk_group_c⁄ãxt
& 
c⁄ãxt
 ) {

459 
öã∫Æ
::
œmbda_ªdu˚_body
<
R™ge
,
VÆue
,
RólBody
,
Redu˘i⁄
> 
	`body
(
idítôy
, 
ªÆ_body
, 
ªdu˘i⁄
);

460 
öã∫Æ
::
°¨t_ªdu˚
<
R™ge
,öã∫Æ::
œmbda_ªdu˚_body
<R™ge,
VÆue
,
RólBody
,
Redu˘i⁄
>,c⁄° 
sim∂e_∑πôi⁄î
>

461 ::
	`run
–
ønge
, 
body
, 
∑πôi⁄î
, 
c⁄ãxt
 );

462  
body
.
	`ªsu…
();

463 
	}
}

467 
	gãm∂©e
<
ty≥«me
 
	gR™ge
,Åy≥«mê
	gVÆue
,Åy≥«mê
	gRólBody
,Åy≥«mê
	gRedu˘i⁄
>

468 
VÆue
 
	$∑øŒñ_ªdu˚
–c⁄° 
R™ge
& 
ønge
, c⁄° 
VÆue
& 
idítôy
, c⁄° 
RólBody
& 
ªÆ_body
, c⁄° 
Redu˘i⁄
& 
ªdu˘i⁄
,

469 c⁄° 
auto_∑πôi⁄î
& 
∑πôi⁄î
, 
èsk_group_c⁄ãxt
& 
c⁄ãxt
 ) {

470 
öã∫Æ
::
œmbda_ªdu˚_body
<
R™ge
,
VÆue
,
RólBody
,
Redu˘i⁄
> 
	`body
(
idítôy
, 
ªÆ_body
, 
ªdu˘i⁄
);

471 
öã∫Æ
::
°¨t_ªdu˚
<
R™ge
,öã∫Æ::
œmbda_ªdu˚_body
<R™ge,
VÆue
,
RólBody
,
Redu˘i⁄
>,c⁄° 
auto_∑πôi⁄î
>

472 ::
	`run
–
ønge
, 
body
, 
∑πôi⁄î
, 
c⁄ãxt
 );

473  
body
.
	`ªsu…
();

474 
	}
}

478 
	gãm∂©e
<
ty≥«me
 
	gR™ge
,Åy≥«mê
	gVÆue
,Åy≥«mê
	gRólBody
,Åy≥«mê
	gRedu˘i⁄
>

479 
VÆue
 
	$∑øŒñ_ªdu˚
–c⁄° 
R™ge
& 
ønge
, c⁄° 
VÆue
& 
idítôy
, c⁄° 
RólBody
& 
ªÆ_body
, c⁄° 
Redu˘i⁄
& 
ªdu˘i⁄
,

480 
afföôy_∑πôi⁄î
& 
∑πôi⁄î
, 
èsk_group_c⁄ãxt
& 
c⁄ãxt
 ) {

481 
öã∫Æ
::
œmbda_ªdu˚_body
<
R™ge
,
VÆue
,
RólBody
,
Redu˘i⁄
> 
	`body
(
idítôy
, 
ªÆ_body
, 
ªdu˘i⁄
);

482 
öã∫Æ
::
°¨t_ªdu˚
<
R™ge
,öã∫Æ::
œmbda_ªdu˚_body
<R™ge,
VÆue
,
RólBody
,
Redu˘i⁄
>,
afföôy_∑πôi⁄î
>

483 ::
	`run
–
ønge
, 
body
, 
∑πôi⁄î
, 
c⁄ãxt
 );

484  
body
.
	`ªsu…
();

485 
	}
}

490 
	gãm∂©e
<
ty≥«me
 
	gR™ge
,Åy≥«mê
	gBody
>

491 
	$∑øŒñ_dëîmöi°ic_ªdu˚
–c⁄° 
R™ge
& 
ønge
, 
Body
& 
body
 ) {

492 
öã∫Æ
::
°¨t_dëîmöi°ic_ªdu˚
<
R™ge
,
Body
>::
	`run
–
ønge
, 
body
 );

493 
	}
}

495 #i‡
__TBB_TASK_GROUP_CONTEXT


498 
	gãm∂©e
<
ty≥«me
 
	gR™ge
,Åy≥«mê
	gBody
>

499 
	$∑øŒñ_dëîmöi°ic_ªdu˚
–c⁄° 
R™ge
& 
ønge
, 
Body
& 
body
, 
èsk_group_c⁄ãxt
& 
c⁄ãxt
 ) {

500 
öã∫Æ
::
°¨t_dëîmöi°ic_ªdu˚
<
R™ge
,
Body
>::
	`run
–
ønge
, 
body
, 
c⁄ãxt
 );

501 
	}
}

509 
	gãm∂©e
<
ty≥«me
 
	gR™ge
,Åy≥«mê
	gVÆue
,Åy≥«mê
	gRólBody
,Åy≥«mê
	gRedu˘i⁄
>

510 
VÆue
 
	$∑øŒñ_dëîmöi°ic_ªdu˚
–c⁄° 
R™ge
& 
ønge
, c⁄° 
VÆue
& 
idítôy
, c⁄° 
RólBody
& 
ªÆ_body
, c⁄° 
Redu˘i⁄
& 
ªdu˘i⁄
 ) {

511 
öã∫Æ
::
œmbda_ªdu˚_body
<
R™ge
,
VÆue
,
RólBody
,
Redu˘i⁄
> 
	`body
(
idítôy
, 
ªÆ_body
, 
ªdu˘i⁄
);

512 
öã∫Æ
::
°¨t_dëîmöi°ic_ªdu˚
<
R™ge
,öã∫Æ::
œmbda_ªdu˚_body
<R™ge,
VÆue
,
RólBody
,
Redu˘i⁄
> >

513 ::
	`run
(
ønge
, 
body
);

514  
body
.
	`ªsu…
();

515 
	}
}

517 #i‡
__TBB_TASK_GROUP_CONTEXT


520 
	gãm∂©e
<
ty≥«me
 
	gR™ge
,Åy≥«mê
	gVÆue
,Åy≥«mê
	gRólBody
,Åy≥«mê
	gRedu˘i⁄
>

521 
VÆue
 
	$∑øŒñ_dëîmöi°ic_ªdu˚
–c⁄° 
R™ge
& 
ønge
, c⁄° 
VÆue
& 
idítôy
, c⁄° 
RólBody
& 
ªÆ_body
, c⁄° 
Redu˘i⁄
& 
ªdu˘i⁄
,

522 
èsk_group_c⁄ãxt
& 
c⁄ãxt
 ) {

523 
öã∫Æ
::
œmbda_ªdu˚_body
<
R™ge
,
VÆue
,
RólBody
,
Redu˘i⁄
> 
	`body
(
idítôy
, 
ªÆ_body
, 
ªdu˘i⁄
);

524 
öã∫Æ
::
°¨t_dëîmöi°ic_ªdu˚
<
R™ge
,öã∫Æ::
œmbda_ªdu˚_body
<R™ge,
VÆue
,
RólBody
,
Redu˘i⁄
> >

525 ::
	`run
–
ønge
, 
body
, 
c⁄ãxt
 );

526  
body
.
	`ªsu…
();

527 
	}
}

	@viper/concurrentqueue-src/benchmarks/tbb/parallel_scan.h

21 #i‚de‡
__TBB_∑øŒñ_sˇn_H


22 
	#__TBB_∑øŒñ_sˇn_H


	)

24 
	~"èsk.h
"

25 
	~"Æig√d_•a˚.h
"

26 
	~<√w
>

27 
	~"∑πôi⁄î.h
"

29 
«me•a˚
 
	gtbb
 {

33 
	s¥e_sˇn_èg
 {

34 
boﬁ
 
is_föÆ_sˇn
(Ë{ 
	gÁl£
;}

39 
	sföÆ_sˇn_èg
 {

40 
boﬁ
 
is_föÆ_sˇn
(Ë{ 
	gåue
;}

44 
«me•a˚
 
	göã∫Æ
 {

48 
	gãm∂©e
<
ty≥«me
 
	gR™ge
,Åy≥«mê
	gBody
>

49 ˛as†
	cföÆ_sum
: 
public
 
èsk
 {

50 
public
:

51 
Body
 
my_body
;

52 
	g¥iv©e
:

53 
Æig√d_•a˚
<
R™ge
> 
my_ønge
;

55 
Body
* 
	gmy_°uff_œ°
;

56 
	gpublic
:

57 
föÆ_sum
–
Body
& 
body_
 ) :

58 
my_body
(
body_
,
•lô
())

60 
pois⁄_poöãr
(
my_°uff_œ°
);

62 ~
föÆ_sum
() {

63 
	gmy_ønge
.
begö
()->~
R™ge
();

65 
föish_c⁄°ru˘i⁄
–c⁄° 
R™ge
& 
ønge_
, 
Body
* 
°uff_œ°_
 ) {

66 
√w
–
my_ønge
.
begö
(ËË
R™ge
(
ønge_
);

67 
	gmy_°uff_œ°
 = 
°uff_œ°_
;

69 
	g¥iv©e
:

70  
èsk
* 
execuã
() {

71 
my_body
–*
my_ønge
.
begö
(), 
föÆ_sˇn_èg
() );

72 if–
	gmy_°uff_œ°
 )

73 
	gmy_°uff_œ°
->
assign
(
my_body
);

74  
	gNULL
;

80 
	gãm∂©e
<
ty≥«me
 
	gR™ge
,Åy≥«mê
	gBody
>

81 ˛as†
	csum_node
: 
public
 
èsk
 {

82 
föÆ_sum
<
	tR™ge
,
	tBody
> 
	tföÆ_sum_ty≥
;

83 
	gpublic
:

84 
föÆ_sum_ty≥
 *
my_öcomög
;

85 
föÆ_sum_ty≥
 *
	gmy_body
;

86 
Body
 *
	gmy_°uff_œ°
;

87 
	g¥iv©e
:

88 
föÆ_sum_ty≥
 *
my_À·_sum
;

89 
sum_node
 *
	gmy_À·
;

90 
sum_node
 *
	gmy_right
;

91 
boﬁ
 
	gmy_À·_is_föÆ
;

92 
R™ge
 
	gmy_ønge
;

93 
sum_node
–c⁄° 
R™ge
 
ønge_
, 
boﬁ
 
À·_is_föÆ_
 ) :

94 
my_À·_sum
(
NULL
),

95 
my_À·
(
NULL
),

96 
my_right
(
NULL
),

97 
my_À·_is_föÆ
(
À·_is_föÆ_
),

98 
my_ønge
(
ønge_
)

101 
pois⁄_poöãr
(
my_body
);

102 
pois⁄_poöãr
(
my_öcomög
);

104 
èsk
* 
¸óã_chûd
–c⁄° 
R™ge
& 
ønge_
, 
föÆ_sum_ty≥
& 
f
, 
sum_node
* 
n
, föÆ_sum_ty≥* 
öcomög_
, 
Body
* 
°uff_œ°_
 ) {

105 if–!
	gn
 ) {

106 
	gf
.
ªcy˛e_as_chûd_of
–*
this
 );

107 
	gf
.
föish_c⁄°ru˘i⁄
–
ønge_
, 
°uff_œ°_
 );

108  &
	gf
;

110 
	gn
->
	gmy_body
 = &
f
;

111 
	gn
->
	gmy_öcomög
 = 
öcomög_
;

112 
	gn
->
	gmy_°uff_œ°
 = 
°uff_œ°_
;

113  
	gn
;

116  
èsk
* 
execuã
() {

117 if–
	gmy_body
 ) {

118 if–
	gmy_öcomög
 )

119 
	gmy_À·_sum
->
	gmy_body
.
ªvî£_joö
–
my_öcomög
->
my_body
 );

120 
ªcy˛e_as_c⁄töu©i⁄
();

121 
	gsum_node
& 
	gc
 = *
this
;

122 
èsk
* 
	gb
 = 
c
.
¸óã_chûd
(
R™ge
(
my_ønge
,
•lô
()),*
my_À·_sum
,
my_right
,my_À·_sum,
my_°uff_œ°
);

123 
èsk
* 
	ga
 = 
my_À·_is_föÆ
 ? 
NULL
 : 
c
.
¸óã_chûd
(
my_ønge
,*
my_body
,
my_À·
,
my_öcomög
,NULL);

124 
£t_ªf_cou¡
–(
a
!=
NULL
)+(
b
!=NULL) );

125 
	gmy_body
 = 
NULL
;

126 if–
	ga
 ) 
•awn
(*
b
);

127 
	ga
 = 
b
;

128  
	ga
;

130  
	gNULL
;

133 
	gãm∂©e
<
ty≥«me
 
	gR™ge_
,ty≥«mê
	gBody_
,ty≥«mê
	gP¨tôi⁄î_
>

134 
‰õnd
 
˛ass
 
	g°¨t_sˇn
;

136 
	gãm∂©e
<
ty≥«me
 
	gR™ge_
,ty≥«mê
	gBody_
>

137 
‰õnd
 
˛ass
 
	gföish_sˇn
;

142 
	gãm∂©e
<
ty≥«me
 
	gR™ge
,Åy≥«mê
	gBody
>

143 ˛as†
	cföish_sˇn
: 
public
 
èsk
 {

144 
sum_node
<
	tR™ge
,
	tBody
> 
	tsum_node_ty≥
;

145 
	gföÆ_sum
<
	tR™ge
,
	tBody
> 
	tföÆ_sum_ty≥
;

146 
föÆ_sum_ty≥
** c⁄° 
	gmy_sum
;

147 
	gsum_node_ty≥
*& 
	gmy_ªtu∫_¶Ÿ
;

148 
	gpublic
:

149 
föÆ_sum_ty≥
* 
my_right_zombõ
;

150 
	gsum_node_ty≥
& 
	gmy_ªsu…
;

152  
èsk
* 
execuã
() {

153 
__TBB_ASSERT
–
my_ªsu…
.
ªf_cou¡
()==(my_ªsu….
my_À·
!=
NULL
)+(my_ªsu….
my_right
!=NULL), NULL );

154 if–
	gmy_ªsu…
.
	gmy_À·
 )

155 
	gmy_ªsu…
.
	gmy_À·_is_föÆ
 = 
Ál£
;

156 if–
	gmy_right_zombõ
 && 
	gmy_sum
 )

157 ((*
	gmy_sum
)->
	gmy_body
).
ªvî£_joö
(
my_ªsu…
.
my_À·_sum
->
my_body
);

158 
__TBB_ASSERT
–!
my_ªtu∫_¶Ÿ
, 
NULL
 );

159 if–
	gmy_right_zombõ
 || 
	gmy_ªsu…
.
	gmy_right
 ) {

160 
	gmy_ªtu∫_¶Ÿ
 = &
my_ªsu…
;

162 
de°roy
–
my_ªsu…
 );

164 if–
	gmy_right_zombõ
 && !
	gmy_sum
 && !
	gmy_ªsu…
.
	gmy_right
 ) {

165 
de°roy
(*
my_right_zombõ
);

166 
	gmy_right_zombõ
 = 
NULL
;

168  
	gNULL
;

171 
föish_sˇn
–
sum_node_ty≥
*& 
ªtu∫_¶Ÿ_
, 
föÆ_sum_ty≥
** 
sum_
, sum_node_ty≥& 
ªsu…_
 ) :

172 
my_sum
(
sum_
),

173 
my_ªtu∫_¶Ÿ
(
ªtu∫_¶Ÿ_
),

174 
my_right_zombõ
(
NULL
),

175 
my_ªsu…
(
ªsu…_
)

177 
__TBB_ASSERT
–!
my_ªtu∫_¶Ÿ
, 
NULL
 );

183 
	gãm∂©e
<
ty≥«me
 
	gR™ge
,Åy≥«mê
	gBody
,Åy≥«mê
	gP¨tôi⁄î
=
sim∂e_∑πôi⁄î
>

184 ˛as†
	c°¨t_sˇn
: 
public
 
èsk
 {

185 
sum_node
<
	tR™ge
,
	tBody
> 
	tsum_node_ty≥
;

186 
	gföÆ_sum
<
	tR™ge
,
	tBody
> 
	tföÆ_sum_ty≥
;

187 
föÆ_sum_ty≥
* 
	gmy_body
;

189 
föÆ_sum_ty≥
** 
	gmy_sum
;

190 
sum_node_ty≥
** 
	gmy_ªtu∫_¶Ÿ
;

192 
sum_node_ty≥
* 
	gmy_∑ª¡_sum
;

193 
boﬁ
 
	gmy_is_föÆ
;

194 
boﬁ
 
	gmy_is_right_chûd
;

195 
R™ge
 
	gmy_ønge
;

196 
ty≥«me
 
	gP¨tôi⁄î
::
∑πôi⁄_ty≥
 
my_∑πôi⁄
;

197  
èsk
* 
execuã
();

198 
	gpublic
:

199 
°¨t_sˇn
–
sum_node_ty≥
*& 
ªtu∫_¶Ÿ_
, sèπ_sˇn& 
∑ª¡_
, sum_node_ty≥* 
∑ª¡_sum_
 ) :

200 
my_body
(
∑ª¡_
.my_body),

201 
my_sum
(
∑ª¡_
.my_sum),

202 
my_ªtu∫_¶Ÿ
(&
ªtu∫_¶Ÿ_
),

203 
my_∑ª¡_sum
(
∑ª¡_sum_
),

204 
my_is_föÆ
(
∑ª¡_
.my_is_final),

205 
my_is_right_chûd
(
Ál£
),

206 
my_ønge
(
∑ª¡_
.my_ønge,
•lô
()),

207 
my_∑πôi⁄
(
∑ª¡_
.my_∑πôi⁄,
•lô
())

209 
__TBB_ASSERT
–!*
my_ªtu∫_¶Ÿ
, 
NULL
 );

212 
°¨t_sˇn
–
sum_node_ty≥
*& 
ªtu∫_¶Ÿ_
, c⁄° 
R™ge
& 
ønge_
, 
föÆ_sum_ty≥
& 
body_
, c⁄° 
P¨tôi⁄î
& 
∑πôi⁄î_
) :

213 
my_body
(&
body_
),

214 
my_sum
(
NULL
),

215 
my_ªtu∫_¶Ÿ
(&
ªtu∫_¶Ÿ_
),

216 
my_∑ª¡_sum
(
NULL
),

217 
my_is_föÆ
(
åue
),

218 
my_is_right_chûd
(
Ál£
),

219 
my_ønge
(
ønge_
),

220 
my_∑πôi⁄
(
∑πôi⁄î_
)

222 
__TBB_ASSERT
–!*
my_ªtu∫_¶Ÿ
, 
NULL
 );

225 
run
–c⁄° 
R™ge
& 
ønge_
, 
Body
& 
body_
, c⁄° 
P¨tôi⁄î
& 
∑πôi⁄î_
 ) {

226 if–!
	gønge_
.
em±y
() ) {

227 
	göã∫Æ
::
	t°¨t_sˇn
<
	tR™ge
,
	tBody
,
	tP¨tôi⁄î
> 
	t°¨t_∑ss1_ty≥
;

228 
	göã∫Æ
::
sum_node
<
R™ge
,
	gBody
>* 
	groŸ
 = 
NULL
;

229 
	göã∫Æ
::
	tföÆ_sum
<
	tR™ge
,
	tBody
> 
	tföÆ_sum_ty≥
;

230 
föÆ_sum_ty≥
* 
	gãmp_body
 = 
√w
(
èsk
::
Æloˇã_roŸ
()ËföÆ_sum_ty≥–
body_
 );

231 
	g°¨t_∑ss1_ty≥
& 
	g∑ss1
 = *
√w
(
èsk
::
Æloˇã_roŸ
()Ë
°¨t_∑ss1_ty≥
(

232  
roŸ
,

233 
ønge_
,

234 *
ãmp_body
,

235 
∑πôi⁄î_
 );

236 
	gèsk
::
•awn_roŸ_™d_waô
–
∑ss1
 );

237 if–
	groŸ
 ) {

238 
	groŸ
->
	gmy_body
 = 
ãmp_body
;

239 
	groŸ
->
	gmy_öcomög
 = 
NULL
;

240 
	groŸ
->
	gmy_°uff_œ°
 = &
body_
;

241 
	gèsk
::
•awn_roŸ_™d_waô
–*
roŸ
 );

243 
	gbody_
.
assign
(
ãmp_body
->
my_body
);

244 
	gãmp_body
->
föish_c⁄°ru˘i⁄
–
ønge_
, 
NULL
 );

245 
	gãmp_body
->
de°roy
(*
ãmp_body
);

251 
	gãm∂©e
<
ty≥«me
 
	gR™ge
,Åy≥«mê
	gBody
,Åy≥«mê
	gP¨tôi⁄î
>

252 
èsk
* 
	g°¨t_sˇn
<
	gR™ge
,
	gBody
,
	gP¨tôi⁄î
>::
execuã
() {

253 
öã∫Æ
::
	tföish_sˇn
<
	tR™ge
,
	tBody
> 
	tföish_∑ss1_ty≥
;

254 
föish_∑ss1_ty≥
* 
	gp
 = 
my_∑ª¡_sum
 ? 
°©ic_ˇ°
<föish_∑ss1_ty≥*>–
∑ª¡
(ËË: 
NULL
;

258 
boﬁ
 
	gåót_as_°ﬁí
 = 
my_is_right_chûd
 && (
is_°ﬁí_èsk
(Ë|| 
my_body
!=
p
->
my_ªsu…
.
my_À·_sum
);

259 if–
	gåót_as_°ﬁí
 ) {

261 
	gp
->
	gmy_right_zombõ
 = 
my_body
 = 
√w
–
Æloˇã_roŸ
(ËË
föÆ_sum_ty≥
(my_body->my_body);

262 
	gmy_is_föÆ
 = 
Ál£
;

264 
èsk
* 
	g√xt_èsk
 = 
NULL
;

265 if–(
	gmy_is_right_chûd
 && !
	gåót_as_°ﬁí
Ë|| !
	gmy_ønge
.
is_divisibÀ
(Ë|| 
	gmy_∑πôi⁄
.
should_execuã_ønge
(*
this
) ) {

266 if–
	gmy_is_föÆ
 )

267 (
	gmy_body
->my_body)–
	gmy_ønge
, 
föÆ_sˇn_èg
() );

268 if–
	gmy_sum
 )

269 (
	gmy_body
->my_body)–
	gmy_ønge
, 
¥e_sˇn_èg
() );

270 if–
	gmy_sum
 )

271 *
	gmy_sum
 = 
my_body
;

272 
__TBB_ASSERT
–!*
my_ªtu∫_¶Ÿ
, 
NULL
 );

274 
sum_node_ty≥
* 
	gªsu…
;

275 if–
	gmy_∑ª¡_sum
 )

276 
	gªsu…
 = 
√w
(
Æloˇã_addôi⁄Æ_chûd_of
(*
my_∑ª¡_sum
)Ë
sum_node_ty≥
(
my_ønge
, 
my_is_föÆ
);

278 
	gªsu…
 = 
√w
(
èsk
::
Æloˇã_roŸ
()Ë
sum_node_ty≥
(
my_ønge
, 
my_is_föÆ
);

279 
	gföish_∑ss1_ty≥
& 
	gc
 = *
√w
–
Æloˇã_c⁄töu©i⁄
()Ë
föish_∑ss1_ty≥
(*
my_ªtu∫_¶Ÿ
,
my_sum
,*
ªsu…
);

281 
	g°¨t_sˇn
& 
	gb
 = *
√w
–
c
.
Æloˇã_chûd
(ËË
°¨t_sˇn
– 
ªsu…
->
my_right
, *
this
,Ñesult );

282 
	gb
.
	gmy_is_right_chûd
 = 
åue
;

286 
ªcy˛e_as_chûd_of
(
c
);

287 
	gc
.
£t_ªf_cou¡
(2);

288 
	gc
.
•awn
(
b
);

289 
	gmy_sum
 = &
ªsu…
->
my_À·_sum
;

290 
	gmy_ªtu∫_¶Ÿ
 = &
ªsu…
->
my_À·
;

291 
	gmy_is_right_chûd
 = 
Ál£
;

292 
	g√xt_èsk
 = 
this
;

293 
	gmy_∑ª¡_sum
 = 
ªsu…
;

294 
__TBB_ASSERT
–!*
my_ªtu∫_¶Ÿ
, 
NULL
 );

296  
	g√xt_èsk
;

323 
	gãm∂©e
<
ty≥«me
 
	gR™ge
,Åy≥«mê
	gBody
>

324 
	$∑øŒñ_sˇn
–c⁄° 
R™ge
& 
ønge
, 
Body
& 
body
 ) {

325 
öã∫Æ
::
°¨t_sˇn
<
R™ge
,
Body
,
__TBB_DEFAULT_PARTITIONER
>::
	`run
(
ønge
,
body
,
	`__TBB_DEFAULT_PARTITIONER
());

326 
	}
}

330 
	gãm∂©e
<
ty≥«me
 
	gR™ge
,Åy≥«mê
	gBody
>

331 
	$∑øŒñ_sˇn
–c⁄° 
R™ge
& 
ønge
, 
Body
& 
body
, c⁄° 
sim∂e_∑πôi⁄î
& 
∑πôi⁄î
 ) {

332 
öã∫Æ
::
°¨t_sˇn
<
R™ge
,
Body
,
sim∂e_∑πôi⁄î
>::
	`run
(
ønge
,
body
,
∑πôi⁄î
);

333 
	}
}

337 
	gãm∂©e
<
ty≥«me
 
	gR™ge
,Åy≥«mê
	gBody
>

338 
	$∑øŒñ_sˇn
–c⁄° 
R™ge
& 
ønge
, 
Body
& 
body
, c⁄° 
auto_∑πôi⁄î
& 
∑πôi⁄î
 ) {

339 
öã∫Æ
::
°¨t_sˇn
<
R™ge
,
Body
,
auto_∑πôi⁄î
>::
	`run
(
ønge
,
body
,
∑πôi⁄î
);

340 
	}
}

	@viper/concurrentqueue-src/benchmarks/tbb/parallel_sort.h

21 #i‚de‡
__TBB_∑øŒñ_s‹t_H


22 
	#__TBB_∑øŒñ_s‹t_H


	)

24 
	~"∑øŒñ_f‹.h
"

25 
	~"blocked_ønge.h
"

26 
	~"öã∫Æ/_ønge_ôî©‹.h
"

27 
	~<Æg‹ôhm
>

28 
	~<ôî©‹
>

29 
	~<fun˘i⁄Æ
>

31 
«me•a˚
 
	gtbb
 {

34 
«me•a˚
 
	göã∫Æ
 {

40 
	gãm∂©e
<
ty≥«me
 
	gR™domAc˚ssIãøt‹
,Åy≥«mê
	gCom∑ª
>

41 ˛as†
	cquick_s‹t_ønge
: 
¥iv©e
 
no_assign
 {

43 
ölöe
 
size_t
 
medün_of_thªe
(c⁄° 
R™domAc˚ssIãøt‹
 &
¨øy
, size_à
l
, size_à
m
, size_à
r
) const {

44  
comp
(
¨øy
[
l
],áºay[
m
]Ë? ( comp◊ºay[m],áºay[
r
]Ë? 
	gm
 : ( comp–¨øy[l],áºay[r]Ë? 
	gr
 :Ü ) )

45 : ( 
comp
(
¨øy
[
r
],áºay[
m
]Ë? 
	gm
 : ( comp–¨øy[r],áºay[
l
] ) ? 
	gr
 :Ü ) );

48 
ölöe
 
size_t
 
p£udo_medün_of_nöe
–c⁄° 
R™domAc˚ssIãøt‹
 &
¨øy
, c⁄° 
quick_s‹t_ønge
 &
ønge
 ) const {

49 
size_t
 
	goff£t
 = 
ønge
.
size
/8u;

50  
medün_of_thªe
(
¨øy
,

51 
medün_of_thªe
(
¨øy
, 0, 
off£t
, offset*2),

52 
medün_of_thªe
(
¨øy
, 
off£t
*3, offset*4, offset*5),

53 
medün_of_thªe
(
¨øy
, 
off£t
*6, off£t*7, 
ønge
.
size
 - 1) );

57 
	gpublic
:

59 c⁄° 
size_t
 
gøösize
 = 500;

60 c⁄° 
	gCom∑ª
 &
	gcomp
;

61 
R™domAc˚ssIãøt‹
 
	gbegö
;

62 
size_t
 
	gsize
;

64 
quick_s‹t_ønge
–
R™domAc˚ssIãøt‹
 
begö_
, 
size_t
 
size_
, c⁄° 
Com∑ª
 &
comp_
 ) :

65 
comp
(
comp_
), 
begö
(
begö_
), 
size
(
size_
) {}

67 
boﬁ
 
em±y
(Ëc⁄° { 
	gsize
==0;}

68 
boﬁ
 
is_divisibÀ
(Ëc⁄° { 
	gsize
>=
gøösize
;}

70 
quick_s‹t_ønge
–quick_s‹t_ønge& 
ønge
, 
•lô
 ) : 
comp
(range.comp) {

71 
usög
 
°d
::
sw≠
;

72 
R™domAc˚ssIãøt‹
 
	g¨øy
 = 
ønge
.
begö
;

73 
R™domAc˚ssIãøt‹
 
	gkey0
 = 
ønge
.
begö
;

74 
size_t
 
	gm
 = 
p£udo_medün_of_nöe
(
¨øy
, 
ønge
);

75 i‡(
	gm
Ë
sw≠
 ( 
¨øy
[0],áºay[
m
] );

77 
size_t
 
	gi
=0;

78 
size_t
 
	gj
=
ønge
.
size
;

81 
__TBB_ASSERT
–
i
<
j
, 
NULL
 );

84 --
	gj
;

85 
__TBB_ASSERT
–
i
<=
j
, "bad orderingÑelation?" );

86 }  
comp
–*
key0
, 
¨øy
[
j
] ));

88 
__TBB_ASSERT
–
i
<=
j
, 
NULL
 );

89 if–
	gi
==
j
 ) 
∑πôi⁄
;

90 ++
	gi
;

91 }  
comp
–
¨øy
[
i
],*
key0
 ));

92 if–
	gi
==
j
 ) 
∑πôi⁄
;

93 
sw≠
–
¨øy
[
i
],áºay[
j
] );

95 
	g∑πôi⁄
:

97 
sw≠
–
¨øy
[
j
], *
key0
 );

101 
	gi
=
j
+1;

102 
	gbegö
 = 
¨øy
+
i
;

103 
	gsize
 = 
ønge
.
size
-
i
;

104 
	gønge
.
	gsize
 = 
j
;

108 #i‡
__TBB_TASK_GROUP_CONTEXT


111 
	gãm∂©e
<
ty≥«me
 
	gR™domAc˚ssIãøt‹
,Åy≥«mê
	gCom∑ª
>

112 ˛as†
	cquick_s‹t_¥ëe°_body
 : 
öã∫Æ
::
no_assign
 {

113 c⁄° 
Com∑ª
 &
comp
;

115 
	gpublic
:

116 
quick_s‹t_¥ëe°_body
(c⁄° 
Com∑ª
 &
_comp
Ë: 
comp
(_comp) {}

118 
›î©‹
()–c⁄° 
blocked_ønge
<
R™domAc˚ssIãøt‹
>& 
ønge
 ) const {

119 
èsk
 &
my_èsk
 =Åask::
£lf
();

120 
R™domAc˚ssIãøt‹
 
	gmy_íd
 = 
ønge
.
íd
();

122 
	gi
 = 0;

123 
R™domAc˚ssIãøt‹
 
	gk
 = 
ønge
.
begö
(); k !
my_íd
; ++k, ++
	gi
) {

124 i‡–
	gi
%64 =0 && 
my_èsk
.
is_ˇn˚Œed
() ) ;

127 i‡–
comp
–*(
k
), *(k-1) ) ) {

128 
	gmy_èsk
.
ˇn˚l_group_executi⁄
();

139 
	gãm∂©e
<
ty≥«me
 
	gR™domAc˚ssIãøt‹
,Åy≥«mê
	gCom∑ª
>

140 
	squick_s‹t_body
 {

141 
›î©‹
()–c⁄° 
	gquick_s‹t_ønge
<
	gR™domAc˚ssIãøt‹
,
	gCom∑ª
>& 
	gønge
 ) const {

143 
	g°d
::
s‹t
–
ønge
.
begö
,Ñ™ge.begö +Ñ™ge.
size
,Ñ™ge.
comp
 );

149 
	gãm∂©e
<
ty≥«me
 
	gR™domAc˚ssIãøt‹
,Åy≥«mê
	gCom∑ª
>

150 
∑øŒñ_quick_s‹t
–
R™domAc˚ssIãøt‹
 
begö
, R™domAc˚ssIãøt‹ 
íd
, c⁄° 
Com∑ª
& 
comp
 ) {

151 #i‡
__TBB_TASK_GROUP_CONTEXT


152 
èsk_group_c⁄ãxt
 
	gmy_c⁄ãxt
;

153 c⁄° 
	g£rül_cutoff
 = 9;

155 
__TBB_ASSERT
–
begö
 + 
£rül_cutoff
 < 
íd
, "min_parallel_size is smallerÅhan serial cutoff?" );

156 
R™domAc˚ssIãøt‹
 
	gk
;

157  
	gk
 = 
begö
 ; k !begö + 
£rül_cutoff
; ++k ) {

158 i‡–
comp
–*(
k
+1), *k ) ) {

159 
	gdo_∑øŒñ_quick_s‹t
;

163 
∑øŒñ_f‹
–
blocked_ønge
<
R™domAc˚ssIãøt‹
>(
k
+1, 
íd
),

164 
quick_s‹t_¥ëe°_body
<
R™domAc˚ssIãøt‹
,
Com∑ª
>(
comp
),

165 
auto_∑πôi⁄î
(),

166 
my_c⁄ãxt
);

168 i‡(
	gmy_c⁄ãxt
.
is_group_executi⁄_ˇn˚Œed
())

169 
	gdo_∑øŒñ_quick_s‹t
:

171 
∑øŒñ_f‹
–
quick_s‹t_ønge
<
R™domAc˚ssIãøt‹
,
Com∑ª
>(
begö
, 
íd
-begö, 
comp
 ),

172 
quick_s‹t_body
<
R™domAc˚ssIãøt‹
,
Com∑ª
>(),

173 
auto_∑πôi⁄î
() );

194 
	gãm∂©e
<
ty≥«me
 
	gR™domAc˚ssIãøt‹
,Åy≥«mê
	gCom∑ª
>

195 
	$∑øŒñ_s‹t
–
R™domAc˚ssIãøt‹
 
begö
, R™domAc˚ssIãøt‹ 
íd
, c⁄° 
Com∑ª
& 
comp
) {

196 c⁄° 
mö_∑øŒñ_size
 = 500;

197 if–
íd
 > 
begö
 ) {

198 i‡(
íd
 - 
begö
 < 
mö_∑øŒñ_size
) {

199 
°d
::
	`s‹t
(
begö
, 
íd
, 
comp
);

201 
öã∫Æ
::
	`∑øŒñ_quick_s‹t
(
begö
, 
íd
, 
comp
);

204 
	}
}

208 
	gãm∂©e
<
ty≥«me
 
	gR™domAc˚ssIãøt‹
>

209 
ölöe
 
	$∑øŒñ_s‹t
–
R™domAc˚ssIãøt‹
 
begö
, R™domAc˚ssIãøt‹ 
íd
 ) {

210 
	`∑øŒñ_s‹t
–
begö
, 
íd
, 
°d
::
Àss
< 
ty≥«me
 std::
ôî©‹_åaôs
<
R™domAc˚ssIãøt‹
>::
vÆue_ty≥
 >() );

211 
	}
}

215 
	gãm∂©e
<
ty≥«me
 
	gR™ge
,Åy≥«mê
	gCom∑ª
>

216 
	$∑øŒñ_s‹t
(
R™ge
& 
∫g
, c⁄° 
Com∑ª
& 
comp
) {

217 
	`∑øŒñ_s‹t
(
tbb
::
öã∫Æ
::
	`fú°
(
∫g
),Åbb::öã∫Æ::
	`œ°
‘ng), 
comp
);

218 
	}
}

222 
	gãm∂©e
<
ty≥«me
 
	gR™ge
,Åy≥«mê
	gCom∑ª
>

223 
	$∑øŒñ_s‹t
(c⁄° 
R™ge
& 
∫g
, c⁄° 
Com∑ª
& 
comp
) {

224 
	`∑øŒñ_s‹t
(
tbb
::
öã∫Æ
::
	`fú°
(
∫g
),Åbb::öã∫Æ::
	`œ°
‘ng), 
comp
);

225 
	}
}

229 
	gãm∂©e
<
ty≥«me
 
	gR™ge
>

230 
	$∑øŒñ_s‹t
(
R™ge
& 
∫g
) {

231 
	`∑øŒñ_s‹t
(
tbb
::
öã∫Æ
::
	`fú°
(
∫g
),Åbb::öã∫Æ::
	`œ°
(rng));

232 
	}
}

236 
	gãm∂©e
<
ty≥«me
 
	gR™ge
>

237 
	$∑øŒñ_s‹t
(c⁄° 
R™ge
& 
∫g
) {

238 
	`∑øŒñ_s‹t
(
tbb
::
öã∫Æ
::
	`fú°
(
∫g
),Åbb::öã∫Æ::
	`œ°
(rng));

239 
	}
}

243 
	gãm∂©e
<
ty≥«me
 
	gT
>

244 
ölöe
 
	$∑øŒñ_s‹t
–
T
 * 
begö
, T * 
íd
 ) {

245 
	`∑øŒñ_s‹t
–
begö
, 
íd
, 
°d
::
Àss
< 
T
 >() );

246 
	}
}

	@viper/concurrentqueue-src/benchmarks/tbb/parallel_while.h

21 #i‚de‡
__TBB_∑øŒñ_whûe


22 
	#__TBB_∑øŒñ_whûe


	)

24 
	~"èsk.h
"

25 
	~<√w
>

27 
«me•a˚
 
	gtbb
 {

29 
	gãm∂©e
<
ty≥«me
 
	gBody
>

30 
˛ass
 
	g∑øŒñ_whûe
;

33 
«me•a˚
 
	göã∫Æ
 {

35 
	gãm∂©e
<
ty≥«me
 
	gSåóm
,Åy≥«mê
	gBody
> 
˛ass
 
	gwhûe_èsk
;

40 
	gãm∂©e
<
ty≥«me
 
	gBody
>

41 ˛as†
	cwhûe_ôî©i⁄_èsk
: 
public
 
èsk
 {

42 c⁄° 
Body
& 
my_body
;

43 
ty≥«me
 
	gBody
::
¨gumít_ty≥
 
my_vÆue
;

44  
èsk
* 
execuã
() {

45 
my_body
(
my_vÆue
);

46  
	gNULL
;

48 
whûe_ôî©i⁄_èsk
–c⁄° 
ty≥«me
 
Body
::
¨gumít_ty≥
& 
vÆue
, c⁄° Body& 
body
 ) :

49 
my_body
(
body
), 
my_vÆue
(
vÆue
)

51 
	gãm∂©e
<
ty≥«me
 
	gBody_
> 
‰õnd
 
˛ass
 
	gwhûe_group_èsk
;

52 
‰õnd
 
˛ass
 
	gtbb
::
∑øŒñ_whûe
<
Body
>;

58 
	gãm∂©e
<
ty≥«me
 
	gBody
>

59 ˛as†
	cwhûe_group_èsk
: 
public
 
èsk
 {

60 c⁄° 
size_t
 
max_¨g_size
 = 4;

61 c⁄° 
	gBody
& 
	gmy_body
;

62 
size_t
 
	gsize
;

63 
ty≥«me
 
	gBody
::
¨gumít_ty≥
 
my_¨g
[
max_¨g_size
];

64 
whûe_group_èsk
–c⁄° 
Body
& 
body
 ) : 
my_body
(body), 
size
(0) {}

65  
èsk
* 
execuã
() {

66 
	gwhûe_ôî©i⁄_èsk
<
	tBody
> 
	tôî©i⁄_ty≥
;

67 
__TBB_ASSERT
–
size
>0, 
NULL
 );

68 
èsk_li°
 
	gli°
;

69 
èsk
* 
	gt
;

70 
size_t
 
	gk
=0;

72 
	gt
 = 
√w
–
Æloˇã_chûd
(ËË
ôî©i⁄_ty≥
(
my_¨g
[
k
],
my_body
);

73 if–++
	gk
==
size
 ) ;

74 
	gli°
.
push_back
(*
t
);

76 
£t_ªf_cou¡
((
k
+1));

77 
•awn
(
li°
);

78 
•awn_™d_waô_f‹_Æl
(*
t
);

79  
	gNULL
;

81 
	gãm∂©e
<
ty≥«me
 
	gSåóm
,Åy≥«mê
	gBody_
> 
‰õnd
 
˛ass
 
	gwhûe_èsk
;

87 
	gãm∂©e
<
ty≥«me
 
	gSåóm
,Åy≥«mê
	gBody
>

88 ˛as†
	cwhûe_èsk
: 
public
 
èsk
 {

89 
Såóm
& 
my_°ªam
;

90 c⁄° 
	gBody
& 
	gmy_body
;

91 
	gem±y_èsk
& 
	gmy_b¨rõr
;

92  
èsk
* 
execuã
() {

93 
	gwhûe_group_èsk
<
	tBody
> 
	tblock_ty≥
;

94 
	gblock_ty≥
& 
	gt
 = *
√w
–
Æloˇã_addôi⁄Æ_chûd_of
(
my_b¨rõr
ËË
block_ty≥
(
my_body
);

95 
size_t
 
	gk
=0;

96  
	gmy_°ªam
.
p›_if_¥e£¡
(
t
.
my_¨g
[
k
]) ) {

97 if–++
	gk
==
block_ty≥
::
max_¨g_size
 ) {

99 
ªcy˛e_to_ªexecuã
();

103 if–
	gk
==0 ) {

104 
de°roy
(
t
);

105  
	gNULL
;

107 
	gt
.
	gsize
 = 
k
;

108  &
	gt
;

111 
whûe_èsk
–
Såóm
& 
°ªam
, c⁄° 
Body
& 
body
, 
em±y_èsk
& 
b¨rõr
 ) :

112 
my_°ªam
(
°ªam
),

113 
my_body
(
body
),

114 
my_b¨rõr
(
b¨rõr
)

116 
‰õnd
 
˛ass
 
	gtbb
::
∑øŒñ_whûe
<
Body
>;

128 
	gãm∂©e
<
ty≥«me
 
	gBody
>

129 ˛as†
	c∑øŒñ_whûe
: 
öã∫Æ
::
no_c›y
 {

130 
public
:

132 
∑øŒñ_whûe
(Ë: 
my_body
(
NULL
), 
my_b¨rõr
(NULL) {}

135 ~
∑øŒñ_whûe
() {

136 if–
	gmy_b¨rõr
 ) {

137 
	gmy_b¨rõr
->
de°roy
(*
my_b¨rõr
);

138 
	gmy_b¨rõr
 = 
NULL
;

143 
ty≥«me
 
	tBody
::
	t¨gumít_ty≥
 
	tvÆue_ty≥
;

149 
	gãm∂©e
<
ty≥«me
 
	gSåóm
>

150 
run
–
Såóm
& 
°ªam
, c⁄° 
Body
& 
body
 );

154 
add
–c⁄° 
vÆue_ty≥
& 
ôem
 );

156 
	g¥iv©e
:

157 c⁄° 
Body
* 
my_body
;

158 
em±y_èsk
* 
	gmy_b¨rõr
;

161 
	gãm∂©e
<
ty≥«me
 
	gBody
>

162 
	gãm∂©e
<
ty≥«me
 
	gSåóm
>

163 
	g∑øŒñ_whûe
<
	gBody
>::
	$run
–
Såóm
& 
°ªam
, c⁄° 
Body
& 
body
 ) {

164 
usög
 
«me•a˚
 
öã∫Æ
;

165 
em±y_èsk
& 
b¨rõr
 = *
	`√w
–
èsk
::
	`Æloˇã_roŸ
(ËË
	`em±y_èsk
();

166 
my_body
 = &
body
;

167 
my_b¨rõr
 = &
b¨rõr
;

168 
my_b¨rõr
->
	`£t_ªf_cou¡
(2);

169 
whûe_èsk
<
Såóm
,
Body
>& 
w
 = *
	`√w
–
my_b¨rõr
->
	`Æloˇã_chûd
(ËËwhûe_èsk<Såóm,Body>–
°ªam
, 
body
, 
b¨rõr
 );

170 
my_b¨rõr
->
	`•awn_™d_waô_f‹_Æl
(
w
);

171 
my_b¨rõr
->
	`de°roy
(*my_barrier);

172 
my_b¨rõr
 = 
NULL
;

173 
my_body
 = 
NULL
;

174 
	}
}

176 
	gãm∂©e
<
ty≥«me
 
	gBody
>

177 
	g∑øŒñ_whûe
<
	gBody
>::
	$add
–c⁄° 
vÆue_ty≥
& 
ôem
 ) {

178 
	`__TBB_ASSERT
(
my_b¨rõr
,"attemptÅoáddÅoÖarallel_whileÅhat isÇotÑunning");

179 
öã∫Æ
::
	twhûe_ôî©i⁄_èsk
<
	tBody
> 
	tôî©i⁄_ty≥
;

180 
ôî©i⁄_ty≥
& 
i
 = *
	`√w
–
èsk
::
	`Æloˇã_addôi⁄Æ_chûd_of
(*
my_b¨rõr
ËË
	`ôî©i⁄_ty≥
(
ôem
,*
my_body
);

181 
èsk
::
	`£lf
().
	`•awn
–
i
 );

182 
	}
}

	@viper/concurrentqueue-src/benchmarks/tbb/partitioner.h

21 #i‚de‡
__TBB_∑πôi⁄î_H


22 
	#__TBB_∑πôi⁄î_H


	)

24 #i‚de‡
__TBB_INITIAL_CHUNKS


26 
	#__TBB_INITIAL_CHUNKS
 2

	)

28 #i‚de‡
__TBB_RANGE_POOL_CAPACITY


30 
	#__TBB_RANGE_POOL_CAPACITY
 8

	)

32 #i‚de‡
__TBB_INIT_DEPTH


34 
	#__TBB_INIT_DEPTH
 5

	)

36 #i‚de‡
__TBB_DEMAND_DEPTH_ADD


38 
	#__TBB_DEMAND_DEPTH_ADD
 2

	)

40 #i‚de‡
__TBB_STATIC_THRESHOLD


42 
	#__TBB_STATIC_THRESHOLD
 40000

	)

44 #i‡
__TBB_DEFINE_MIC


45 
	#__TBB_NONUNIFORM_TASK_CREATION
 1

	)

46 #ifde‡
__TBB_machöe_time_°amp


47 
	#__TBB_USE_MACHINE_TIME_STAMPS
 1

	)

48 
	#__TBB_èsk_duøti⁄
(Ë
__TBB_STATIC_THRESHOLD


	)

52 
	~"èsk.h
"

53 
	~"Æig√d_•a˚.h
"

54 
	~"©omic.h
"

56 #i‡
deföed
(
_MSC_VER
Ë&& !deföed(
__INTEL_COMPILER
)

58 #¥agm®
w¨nög
 (
push
)

59 #¥agm®
w¨nög
 (
dißbÀ
: 4244)

62 
«me•a˚
 
	gtbb
 {

64 
˛ass
 
	gauto_∑πôi⁄î
;

65 
˛ass
 
	gsim∂e_∑πôi⁄î
;

66 
˛ass
 
	gafföôy_∑πôi⁄î
;

67 
«me•a˚
 
	göãrÁ˚7
 {

68 
«me•a˚
 
	göã∫Æ
 {

69 
˛ass
 
	gafföôy_∑πôi⁄_ty≥
;

73 
«me•a˚
 
	göã∫Æ
 {

74 
size_t
 
__TBB_EXPORTED_FUNC
 
gë_öôül_auto_∑πôi⁄î_divis‹
();

77 ˛as†
	cafföôy_∑πôi⁄î_ba£_v3
: 
no_c›y
 {

78 
‰õnd
 
˛ass
 
tbb
::
afföôy_∑πôi⁄î
;

79 
‰õnd
 
˛ass
 
	gtbb
::
öãrÁ˚7
::
öã∫Æ
::
afföôy_∑πôi⁄_ty≥
;

82 
afföôy_id
* 
	gmy_¨øy
;

84 
size_t
 
	gmy_size
;

86 
afföôy_∑πôi⁄î_ba£_v3
(Ë: 
my_¨øy
(
NULL
), 
my_size
(0) {}

88 ~
afföôy_∑πôi⁄î_ba£_v3
(Ë{
ªsize
(0);}

91 
__TBB_EXPORTED_METHOD
 
ªsize
–
Á˘‹
 );

95 ˛as†
	c∑πôi⁄_ty≥_ba£
 {

96 
	gpublic
:

97 
£t_afföôy
–
èsk
 & ) {}

98 
nŸe_afföôy
–
èsk
::
afföôy_id
 ) {}

99 
èsk
* 
c⁄töue_a·î_execuã_ønge
(Ë{ 
NULL
;}

100 
boﬁ
 
decide_whëhî_to_dñay
(Ë{ 
	gÁl£
;}

101 
•awn_‹_dñay
–
boﬁ
, 
èsk
& 
b
 ) {

102 
	gèsk
::
•awn
(
b
);

106 
	gãm∂©e
<
ty≥«me
 
	gR™ge
,Åy≥«mê
	gBody
,Åy≥«mê
	gP¨tôi⁄î
> 
˛ass
 
	g°¨t_sˇn
;

110 
«me•a˚
 
	g£rül
 {

111 
«me•a˚
 
	göãrÁ˚7
 {

112 
	gãm∂©e
<
ty≥«me
 
	gR™ge
,Åy≥«mê
	gBody
,Åy≥«mê
	gP¨tôi⁄î
> 
˛ass
 
	g°¨t_f‹
;

116 
«me•a˚
 
	göãrÁ˚7
 {

118 
«me•a˚
 
	göã∫Æ
 {

119 
usög
 
«me•a˚
 
	gtbb
::
öã∫Æ
;

120 
	gãm∂©e
<
ty≥«me
 
	gR™ge
,Åy≥«mê
	gBody
,Åy≥«mê
	gP¨tôi⁄î
> 
˛ass
 
	g°¨t_f‹
;

121 
	gãm∂©e
<
ty≥«me
 
	gR™ge
,Åy≥«mê
	gBody
,Åy≥«mê
	gP¨tôi⁄î
> 
˛ass
 
	g°¨t_ªdu˚
;

124 ˛as†
	cÊag_èsk
: 
public
 
èsk
 {

125 
public
:

126 
tbb
::
©omic
<
boﬁ
> 
my_chûd_°ﬁí
;

127 
Êag_èsk
(Ë{ 
	gmy_chûd_°ﬁí
 = 
Ál£
; }

128 
èsk
* 
execuã
(Ë{  
	gNULL
; }

129 
m¨k_èsk_°ﬁí
(
èsk
 &
t
) {

130 
	gtbb
::
©omic
<
boﬁ
> &
Êag
 = 
°©ic_ˇ°
<
Êag_èsk
*>(
t
.
∑ª¡
())->
my_chûd_°ﬁí
;

131 #i‡
TBB_USE_THREADING_TOOLS


133 
	gÊag
.
	g„tch_™d_°‹e
<
	gªÀa£
>(
	gåue
);

135 
	gÊag
 = 
åue
;

138 
boﬁ
 
is_≥î_°ﬁí
(
èsk
 &
t
) {

139  
	g°©ic_ˇ°
<
	gÊag_èsk
*>(
	gt
.
∑ª¡
())->
	gmy_chûd_°ﬁí
;

146 
	tdïth_t
;

149 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
dïth_t
 
	gMaxC≠acôy
>

150 ˛as†
	cønge_ve˘‹
 {

151 
dïth_t
 
	gmy_hód
;

152 
dïth_t
 
	gmy_èû
;

153 
dïth_t
 
	gmy_size
;

154 
dïth_t
 
	gmy_dïth
[
MaxC≠acôy
];

155 
	gtbb
::
Æig√d_•a˚
<
T
, 
	gMaxC≠acôy
> 
	gmy_poﬁ
;

157 
	gpublic
:

159 
ønge_ve˘‹
(c⁄° 
T
& 
ñem
Ë: 
my_hód
(0), 
my_èû
(0), 
my_size
(1) {

160 
	gmy_dïth
[0] = 0;

161 
√w
–
°©ic_ˇ°
<*>(
my_poﬁ
.
begö
()ËË
T
(
ñem
);

163 ~
ønge_ve˘‹
() {

164  !
em±y
(ËË
p›_back
();

166 
boﬁ
 
em±y
(Ëc⁄° {  
	gmy_size
 == 0; }

167 
dïth_t
 
size
(Ëc⁄° {  
	gmy_size
; }

170 
•lô_to_fûl
(
dïth_t
 
max_dïth
) {

171  
	gmy_size
 < 
	gMaxC≠acôy
 && 
is_divisibÀ
(
max_dïth
) ) {

172 
dïth_t
 
	g¥ev
 = 
my_hód
;

173 
	gmy_hód
 = (
my_hód
 + 1Ë% 
MaxC≠acôy
;

174 
√w
(
my_poﬁ
.
begö
()+
my_hód
Ë
T
(my_poﬁ.begö()[
¥ev
]);

175 
	gmy_poﬁ
.
begö
()[
¥ev
].~
T
();

176 
√w
(
my_poﬁ
.
begö
()+
¥ev
Ë
T
(my_poﬁ.begö()[
my_hód
], 
•lô
());

177 
	gmy_dïth
[
my_hód
] = ++
my_dïth
[
¥ev
];

178 
	gmy_size
++;

181 
p›_back
() {

182 
__TBB_ASSERT
(
my_size
 > 0, "range_vector::pop_back() withÉmpty size");

183 
	gmy_poﬁ
.
begö
()[
my_hód
].~
T
();

184 
	gmy_size
--;

185 
	gmy_hód
 = (
my_hód
 + 
MaxC≠acôy
 - 1) % MaxCapacity;

187 
p›_‰⁄t
() {

188 
__TBB_ASSERT
(
my_size
 > 0, "range_vector::pop_front() withÉmpty size");

189 
	gmy_poﬁ
.
begö
()[
my_èû
].~
T
();

190 
	gmy_size
--;

191 
	gmy_èû
 = (
my_èû
 + 1Ë% 
MaxC≠acôy
;

193 
	gT
& 
back
() {

194 
__TBB_ASSERT
(
my_size
 > 0, "range_vector::back() withÉmpty size");

195  
	gmy_poﬁ
.
begö
()[
my_hód
];

197 
	gT
& 
‰⁄t
() {

198 
__TBB_ASSERT
(
my_size
 > 0, "range_vector::front() withÉmpty size");

199  
	gmy_poﬁ
.
begö
()[
my_èû
];

202 
dïth_t
 
‰⁄t_dïth
() {

203 
__TBB_ASSERT
(
my_size
 > 0, "range_vector::front_depth() withÉmpty size");

204  
	gmy_dïth
[
my_èû
];

206 
dïth_t
 
back_dïth
() {

207 
__TBB_ASSERT
(
my_size
 > 0, "range_vector::back_depth() withÉmpty size");

208  
	gmy_dïth
[
my_hód
];

210 
boﬁ
 
is_divisibÀ
(
dïth_t
 
max_dïth
) {

211  
back_dïth
(Ë< 
	gmax_dïth
 && 
back
().
is_divisibÀ
();

216 
	gãm∂©e
 <
ty≥«me
 
	gP¨tôi⁄
>

217 
	s∑πôi⁄_ty≥_ba£
 {

218 
•lô
 
	t•lô_ty≥
;

220 
£t_afföôy
–
èsk
 & ) {}

221 
nŸe_afföôy
–
èsk
::
afföôy_id
 ) {}

222 
boﬁ
 
check_beög_°ﬁí
(
èsk
 &Ë{  
Ál£
; }

223 
boﬁ
 
check_f‹_dem™d
(
èsk
 &Ë{  
	gÁl£
; }

224 
boﬁ
 
is_divisibÀ
(Ë{  
	gåue
; }

225 
dïth_t
 
max_dïth
() {  0; }

226 
Æign_dïth
(
dïth_t
) { }

227 
	gãm∂©e
 <
ty≥«me
 
	gR™ge
> 
•lô_ty≥
 
gë_•lô
(Ë{  
•lô
(); }

230 
	gP¨tôi⁄
& 
£lf
(Ë{  *
	g°©ic_ˇ°
<P¨tôi⁄*>(
	gthis
); }

231 
	gãm∂©e
<
ty≥«me
 
	gSèπTy≥
,Åy≥«mê
	gR™ge
>

232 
execuã
(
SèπTy≥
 &
°¨t
, 
R™ge
 &
ønge
) {

240 i‡–
	gønge
.
is_divisibÀ
() ) {

241 i‡–
£lf
().
is_divisibÀ
() ) {

243 
ty≥«me
 
	gP¨tôi⁄
::
•lô_ty≥
 
•lô_obj
 = 
£lf
().
ãm∂©e
 
gë_•lô
<
R™ge
>();

244 
	g°¨t
.
of„r_w‹k
–
•lô_obj
 );

245 }  
	gønge
.
is_divisibÀ
(Ë&& 
£lf
().is_divisible() );

248 if–!
	gønge
.
is_divisibÀ
(Ë|| !
£lf
().
max_dïth
() )

249 
	g°¨t
.
run_body
–
ønge
 );

251 
	göã∫Æ
::
ønge_ve˘‹
<
R™ge
, 
	gP¨tôi⁄
::
ønge_poﬁ_size
> 
ønge_poﬁ
(
ønge
);

253 
	gønge_poﬁ
.
•lô_to_fûl
(
£lf
().
max_dïth
());

254 if–
£lf
().
check_f‹_dem™d
–
°¨t
 ) ) {

255 if–
	gønge_poﬁ
.
size
() > 1 ) {

256 
	g°¨t
.
of„r_w‹k
–
ønge_poﬁ
.
‰⁄t
(),Ñ™ge_poﬁ.
‰⁄t_dïth
() );

257 
	gønge_poﬁ
.
p›_‰⁄t
();

260 if–
	gønge_poﬁ
.
is_divisibÀ
(
£lf
().
max_dïth
()) )

263 
	g°¨t
.
run_body
–
ønge_poﬁ
.
back
() );

264 
	gønge_poﬁ
.
p›_back
();

265 }  !
	gønge_poﬁ
.
em±y
(Ë&& !
	g°¨t
.
is_ˇn˚Œed
() );

271 
	gãm∂©e
 <
ty≥«me
 
	gP¨tôi⁄
>

272 
	gad≠tive_∑πôi⁄_ty≥_ba£
 : 
∑πôi⁄_ty≥_ba£
<
P¨tôi⁄
> {

273 
size_t
 
my_divis‹
;

274 
dïth_t
 
	gmy_max_dïth
;

275 
ad≠tive_∑πôi⁄_ty≥_ba£
(Ë: 
my_max_dïth
(
__TBB_INIT_DEPTH
) {

276 
my_divis‹
 = 
tbb
::
öã∫Æ
::
gë_öôül_auto_∑πôi⁄î_divis‹
() / 4;

277 
__TBB_ASSERT
(
my_divis‹
, "initial value of get_initial_auto_partitioner_divisor() isÇot valid");

279 
ad≠tive_∑πôi⁄_ty≥_ba£
◊d≠tive_∑πôi⁄_ty≥_ba£ &
§c
, 
•lô
) {

280 
	gmy_max_dïth
 = 
§c
.
my_max_dïth
;

281 #i‡
TBB_USE_ASSERT


282 
size_t
 
	gﬁd_divis‹
 = 
§c
.
my_divis‹
;

285 #i‡
__TBB_INITIAL_TASK_IMBALANCE


286 if–
	g§c
.
	gmy_divis‹
 <1 ) 
my_divis‹
 = 0;

287 
	gmy_divis‹
 = 
§c
.
my_divis‹
 = (src.my_divisor + 1u) / 2u;

289 
	gmy_divis‹
 = 
§c
.
my_divis‹
 / 2u;

290 
	g§c
.
	gmy_divis‹
 = 
§c
.
my_divis‹
 - my_divisor;

291 i‡(
	gmy_divis‹
Ë
	g§c
.
	gmy_max_dïth
 +
°©ic_ˇ°
<
dïth_t
>(
__TBB_Log2
(
§c
.
my_divis‹
 / my_divisor));

297 
__TBB_ASSERT
–(
ﬁd_divis‹
 <1 && 
my_divis‹
 == 0) ||

298 (
ﬁd_divis‹
 > 1 && 
my_divis‹
 !0), 
NULL
);

300 
ad≠tive_∑πôi⁄_ty≥_ba£
◊d≠tive_∑πôi⁄_ty≥_ba£ &
§c
, c⁄° 
¥›‹ti⁄Æ_•lô
& 
•lô_obj
) {

301 
	gmy_max_dïth
 = 
§c
.
my_max_dïth
;

302 
	gmy_divis‹
 = 
size_t
((
§c
.
my_divis‹
Ë* (
•lô_obj
.
right
())

303 / (
•lô_obj
.
À·
(Ë+ s∂ô_obj.
right
()));

304 
	g§c
.
	gmy_divis‹
 -
my_divis‹
;

306 
boﬁ
 
check_beög_°ﬁí
–
èsk
 &
t
) {

307 if–!
	gmy_divis‹
 ) {

308 
	gmy_divis‹
 = 1;

309 if–
	gt
.
is_°ﬁí_èsk
(Ë&&Å.
∑ª¡
()->
ªf_cou¡
() >= 2 ) {

310 #i‡
TBB_USE_EXCEPTIONS


312 
__TBB_ASSERT
(
dy«mic_ˇ°
<
Êag_èsk
*>(
t
.
∑ª¡
()), 0);

317 
	gÊag_èsk
::
m¨k_èsk_°ﬁí
(
t
);

318 if–!
	gmy_max_dïth
 ) my_max_depth++;

319 
	gmy_max_dïth
 +
__TBB_DEMAND_DEPTH_ADD
;

320  
	gåue
;

323  
	gÁl£
;

325 
Æign_dïth
(
dïth_t
 
ba£
) {

326 
__TBB_ASSERT
(
ba£
 <
my_max_dïth
, 0);

327 
	gmy_max_dïth
 -
ba£
;

329 
dïth_t
 
max_dïth
(Ë{  
	gmy_max_dïth
; }

333 
	gãm∂©e
<
boﬁ
 
	gC
, 
ty≥«me
 
	gT
 = > 
	síabÀ_if
 { 
T
 
	tty≥
; };

334 
	gãm∂©e
<
ty≥«me
 
	gT
> 
	gíabÀ_if
<
	gÁl£
, T> { };

343 
	gãm∂©e
 <
ty≥«me
 
	gR™ge
>

344 ˛as†
	cis_ønge_divisibÀ_ö_¥›‹ti⁄
 {

345 
	g¥iv©e
:

346 
	tyes
[1];

347 
	tno
 [2];

349 
	gãm∂©e
 <
ty≥«me
 
	gønge_ty≥
> 
	gyes
& 
decide
—y≥«mê
íabÀ_if
<
ønge_ty≥
::
is_divisibÀ_ö_¥›‹ti⁄
>::
ty≥
 *);

350 
	gãm∂©e
 <
ty≥«me
 
	gønge_ty≥
> 
	gno
& 
decide
(...);

351 
	gpublic
:

354 c⁄° 
boﬁ
 
vÆue
 = ((
decide
<
R™ge
>(0)Ë=(
yes
));

358 
˛ass
 
	gafföôy_∑πôi⁄_ty≥
 : 
public
 
ad≠tive_∑πôi⁄_ty≥_ba£
<
afföôy_∑πôi⁄_ty≥
> {

359 c⁄° 
Á˘‹_powî
 = 4;

360 c⁄° 
	gÁ˘‹
 = 1<<
Á˘‹_powî
;

362 
	g°¨t
 = 0,

363 
	grun
,

364 
	g∑ss


365 } 
	gmy_dñay
;

366 #ifde‡
__TBB_USE_MACHINE_TIME_STAMPS


367 
machöe_tsc_t
 
	gmy_d°_tsc
;

369 
size_t
 
	gmy_begö
;

370 
	gtbb
::
öã∫Æ
::
afföôy_id
* 
my_¨øy
;

371 
	gpublic
:

372 
¥›‹ti⁄Æ_•lô
 
	t•lô_ty≥
;

374 
afföôy_∑πôi⁄_ty≥
–
tbb
::
öã∫Æ
::
afföôy_∑πôi⁄î_ba£_v3
& 
≠
 )

375 : 
ad≠tive_∑πôi⁄_ty≥_ba£
<
afföôy_∑πôi⁄_ty≥
>(),

376 
my_dñay
(
°¨t
)

377 #ifde‡
__TBB_USE_MACHINE_TIME_STAMPS


378 , 
my_d°_tsc
(0)

381 
__TBB_ASSERT
–(
Á˘‹
&(factor-1))==0, "factor must beÖower ofÅwo" );

382 
	gmy_divis‹
 *
Á˘‹
;

383 
	g≠
.
ªsize
(
Á˘‹
);

384 
	gmy_¨øy
 = 
≠
.
my_¨øy
;

385 
	gmy_begö
 = 0;

386 
	gmy_max_dïth
 = 
Á˘‹_powî
 + 1;

387 
__TBB_ASSERT
–
my_max_dïth
 < 
__TBB_RANGE_POOL_CAPACITY
, 0 );

389 
afföôy_∑πôi⁄_ty≥
◊fföôy_∑πôi⁄_ty≥& 
p
, 
•lô
)

390 : 
ad≠tive_∑πôi⁄_ty≥_ba£
<
afföôy_∑πôi⁄_ty≥
>(
p
, 
•lô
()),

391 
my_dñay
(
∑ss
),

392 #ifde‡
__TBB_USE_MACHINE_TIME_STAMPS


393 
my_d°_tsc
(0),

395 
my_¨øy
(
p
.my_array) {

397 
__TBB_ASSERT
(
my_divis‹
 + 
p
.my_divis‹ <
Á˘‹
, 
NULL
);

398 
	gmy_begö
 = 
p
.
my_begö
 +Ö.
my_divis‹
;

400 
afföôy_∑πôi⁄_ty≥
◊fföôy_∑πôi⁄_ty≥& 
p
, c⁄° 
¥›‹ti⁄Æ_•lô
& 
•lô_obj
)

401 : 
ad≠tive_∑πôi⁄_ty≥_ba£
<
afföôy_∑πôi⁄_ty≥
>(
p
, 
	g•lô_obj
),

402 
my_dñay
(
°¨t
),

403 #ifde‡
__TBB_USE_MACHINE_TIME_STAMPS


404 
my_d°_tsc
(0),

406 
my_¨øy
(
p
.my_array) {

407 
size_t
 
	gtŸÆ_divis‹
 = 
my_divis‹
 + 
p
.my_divisor;

408 
__TBB_ASSERT
(
tŸÆ_divis‹
 % 
Á˘‹
 =0, 
NULL
);

409 
	gmy_divis‹
 = (
my_divis‹
 + 
Á˘‹
/2) & (0u - factor);

410 i‡(!
	gmy_divis‹
)

411 
	gmy_divis‹
 = 
Á˘‹
;

412 i‡(
	gmy_divis‹
 =
tŸÆ_divis‹
)

413 
my_divis‹
 = 
tŸÆ_divis‹
 - 
Á˘‹
;

414 
	gp
.
	gmy_divis‹
 = 
tŸÆ_divis‹
 - 
my_divis‹
;

415 
__TBB_ASSERT
(
my_divis‹
 && 
p
.my_divis‹, 
NULL
);

416 
	gmy_begö
 = 
p
.
my_begö
 +Ö.
my_divis‹
;

418 
£t_afföôy
–
èsk
 &
t
 ) {

419 if–
	gmy_divis‹
 ) {

420 if–!
	gmy_¨øy
[
my_begö
] ) {

422 
	gmy_¨øy
[
my_begö
] = 
afföôy_id
(my_begö / 
Á˘‹
 + 1);

424 
	gt
.
£t_afföôy
–
my_¨øy
[
my_begö
] );

427 
nŸe_afföôy
–
èsk
::
afföôy_id
 
id
 ) {

428 if–
my_divis‹
 )

429 
my_¨øy
[
my_begö
] = 
id
;

431 
boﬁ
 
check_f‹_dem™d
–
èsk
 &
t
 ) {

432 if–
	g∑ss
 =
my_dñay
 ) {

433 if–
my_divis‹
 > 1 )

434  
åue
;

435 if–
	gmy_divis‹
 && 
	gmy_max_dïth
 ) {

436 
	gmy_divis‹
 = 0;

437  
	gåue
;

439 if–
	gÊag_èsk
::
is_≥î_°ﬁí
(
t
) ) {

440 
my_max_dïth
 +
__TBB_DEMAND_DEPTH_ADD
;

441  
	gåue
;

443 } if–
	g°¨t
 =
my_dñay
 ) {

444 #i‚de‡
__TBB_USE_MACHINE_TIME_STAMPS


445 
my_dñay
 = 
∑ss
;

447 
	gmy_d°_tsc
 = 
__TBB_machöe_time_°amp
(Ë+ 
__TBB_èsk_duøti⁄
();

448 
	gmy_dñay
 = 
run
;

449 } if–
	grun
 =
my_dñay
 ) {

450 if–
__TBB_machöe_time_°amp
(Ë< 
my_d°_tsc
 ) {

451 
__TBB_ASSERT
(
my_max_dïth
 > 0, 
NULL
);

452  
	gÁl£
;

454 
	gmy_dñay
 = 
∑ss
;

455  
	gåue
;

458  
	gÁl£
;

460 
boﬁ
 
is_divisibÀ
() {

461  
	gmy_divis‹
 > 
	gÁ˘‹
;

464 #i‡
_MSC_VER
 && !
deföed
(
__INTEL_COMPILER
)

466 #¥agm®
w¨nög
–
push
 )

467 #¥agm®
w¨nög
–
dißbÀ
: 4127 )

469 
	gãm∂©e
 <
ty≥«me
 
	gR™ge
>

470 
•lô_ty≥
 
gë_•lô
() {

471 i‡(
	gis_ønge_divisibÀ_ö_¥›‹ti⁄
<
	gR™ge
>::
vÆue
) {

472 
size_t
 
size
 = 
my_divis‹
 / 
Á˘‹
;

473 #i‡
__TBB_NONUNIFORM_TASK_CREATION


474 
size_t
 
	gright
 = (
size
 + 2) / 3;

476 
size_t
 
	gright
 = 
size
 / 2;

478 
size_t
 
	gÀ·
 = 
size
 - 
right
;

479  
•lô_ty≥
(
À·
, 
right
);

481  
•lô_ty≥
(1, 1);

484 #i‡
_MSC_VER
 && !
deföed
(
__INTEL_COMPILER
)

485 #¥agm®
w¨nög
–
p›
 )

488 c⁄° 
	gønge_poﬁ_size
 = 
__TBB_RANGE_POOL_CAPACITY
;

491 
˛ass
 
	gauto_∑πôi⁄_ty≥
: 
public
 
ad≠tive_∑πôi⁄_ty≥_ba£
<
auto_∑πôi⁄_ty≥
> {

492 
public
:

493 
auto_∑πôi⁄_ty≥
–c⁄° 
auto_∑πôi⁄î
& ) {

494 
my_divis‹
 *
__TBB_INITIAL_CHUNKS
;

496 
auto_∑πôi⁄_ty≥
–auto_∑πôi⁄_ty≥& 
§c
, 
•lô
)

497 : 
ad≠tive_∑πôi⁄_ty≥_ba£
<
auto_∑πôi⁄_ty≥
>(
§c
, 
•lô
()) {}

499 
boﬁ
 
is_divisibÀ
() {

500 if–
	gmy_divis‹
 > 1 )  
	gåue
;

501 if–
	gmy_divis‹
 && 
	gmy_max_dïth
 ) {

503 
	gmy_max_dïth
--;

504 
	gmy_divis‹
 = 0;

505  
	gåue
;

506 }  
	gÁl£
;

508 
boﬁ
 
check_f‹_dem™d
(
èsk
 &
t
) {

509 if–
	gÊag_èsk
::
is_≥î_°ﬁí
(
t
) ) {

510 
my_max_dïth
 +
__TBB_DEMAND_DEPTH_ADD
;

511  
	gåue
;

512 }  
	gÁl£
;

515 c⁄° 
	gønge_poﬁ_size
 = 
__TBB_RANGE_POOL_CAPACITY
;

518 
˛ass
 
	gsim∂e_∑πôi⁄_ty≥
: 
public
 
∑πôi⁄_ty≥_ba£
<
sim∂e_∑πôi⁄_ty≥
> {

519 
public
:

520 
sim∂e_∑πôi⁄_ty≥
–c⁄° 
sim∂e_∑πôi⁄î
& ) {}

521 
sim∂e_∑πôi⁄_ty≥
–c⁄° sim∂e_∑πôi⁄_ty≥&, 
•lô
 ) {}

523 
	gãm∂©e
<
ty≥«me
 
	gSèπTy≥
,Åy≥«mê
	gR™ge
>

524 
execuã
(
SèπTy≥
 &
°¨t
, 
R™ge
 &
ønge
) {

525 
•lô_ty≥
 
	g•lô_obj
 = 
•lô
();

526  
	gønge
.
is_divisibÀ
() )

527 
	g°¨t
.
of„r_w‹k
–
•lô_obj
 );

528 
	g°¨t
.
run_body
–
ønge
 );

534 ˛as†
	cﬁd_auto_∑πôi⁄_ty≥
: 
public
 
tbb
::
öã∫Æ
::
∑πôi⁄_ty≥_ba£
 {

535 
size_t
 
num_chunks
;

536 c⁄° 
size_t
 
	gVICTIM_CHUNKS
 = 4;

537 
	gpublic
:

538 
boﬁ
 
should_execuã_ønge
(c⁄° 
èsk
 &
t
) {

539 if–
num_chunks
<
VICTIM_CHUNKS
 && 
t
.
is_°ﬁí_èsk
() )

540 
num_chunks
 = 
VICTIM_CHUNKS
;

541  
	gnum_chunks
==1;

543 
ﬁd_auto_∑πôi⁄_ty≥
–c⁄° 
auto_∑πôi⁄î
& )

544 : 
num_chunks
(
öã∫Æ
::
gë_öôül_auto_∑πôi⁄î_divis‹
()*
__TBB_INITIAL_CHUNKS
/4) {}

545 
ﬁd_auto_∑πôi⁄_ty≥
–c⁄° 
afföôy_∑πôi⁄î
& )

546 : 
num_chunks
(
öã∫Æ
::
gë_öôül_auto_∑πôi⁄î_divis‹
()*
__TBB_INITIAL_CHUNKS
/4) {}

547 
ﬁd_auto_∑πôi⁄_ty≥
–ﬁd_auto_∑πôi⁄_ty≥& 
±
, 
•lô
 ) {

548 
	gnum_chunks
 = 
±
.
num_chunks
 = (pt.num_chunks+1u) / 2u;

559 ˛as†
	csim∂e_∑πôi⁄î
 {

560 
	gpublic
:

561 
sim∂e_∑πôi⁄î
() {}

562 
¥iv©e
:

563 
ãm∂©e
<
ty≥«me
 
R™ge
,Åy≥«mê
	gBody
,Åy≥«mê
	gP¨tôi⁄î
> 
‰õnd
 
˛ass
 
	g£rül
::
öãrÁ˚7
::
°¨t_f‹
;

564 
	gãm∂©e
<
ty≥«me
 
	gR™ge
,Åy≥«mê
	gBody
,Åy≥«mê
	gP¨tôi⁄î
> 
‰õnd
 
˛ass
 
	göãrÁ˚7
::
öã∫Æ
::
°¨t_f‹
;

565 
	gãm∂©e
<
ty≥«me
 
	gR™ge
,Åy≥«mê
	gBody
,Åy≥«mê
	gP¨tôi⁄î
> 
‰õnd
 
˛ass
 
	göãrÁ˚7
::
öã∫Æ
::
°¨t_ªdu˚
;

566 
	gãm∂©e
<
ty≥«me
 
	gR™ge
,Åy≥«mê
	gBody
,Åy≥«mê
	gP¨tôi⁄î
> 
‰õnd
 
˛ass
 
	göã∫Æ
::
°¨t_sˇn
;

568 ˛as†
	c∑πôi⁄_ty≥
: 
public
 
öã∫Æ
::
∑πôi⁄_ty≥_ba£
 {

569 
public
:

570 
boﬁ
 
should_execuã_ønge
(c⁄° 
èsk
& ) { 
Ál£
;}

571 
∑πôi⁄_ty≥
–c⁄° 
sim∂e_∑πôi⁄î
& ) {}

572 
∑πôi⁄_ty≥
–c⁄°Ö¨tôi⁄_ty≥&, 
•lô
 ) {}

575 
	göãrÁ˚7
::
	töã∫Æ
::
	tsim∂e_∑πôi⁄_ty≥
 
	tèsk_∑πôi⁄_ty≥
;

578 
	göãrÁ˚7
::
	töã∫Æ
::
	tsim∂e_∑πôi⁄_ty≥
::
	t•lô_ty≥
 split_type;

585 ˛as†
	cauto_∑πôi⁄î
 {

586 
	gpublic
:

587 
auto_∑πôi⁄î
() {}

589 
¥iv©e
:

590 
ãm∂©e
<
ty≥«me
 
R™ge
,Åy≥«mê
	gBody
,Åy≥«mê
	gP¨tôi⁄î
> 
‰õnd
 
˛ass
 
	g£rül
::
öãrÁ˚7
::
°¨t_f‹
;

591 
	gãm∂©e
<
ty≥«me
 
	gR™ge
,Åy≥«mê
	gBody
,Åy≥«mê
	gP¨tôi⁄î
> 
‰õnd
 
˛ass
 
	göãrÁ˚7
::
öã∫Æ
::
°¨t_f‹
;

592 
	gãm∂©e
<
ty≥«me
 
	gR™ge
,Åy≥«mê
	gBody
,Åy≥«mê
	gP¨tôi⁄î
> 
‰õnd
 
˛ass
 
	göãrÁ˚7
::
öã∫Æ
::
°¨t_ªdu˚
;

593 
	gãm∂©e
<
ty≥«me
 
	gR™ge
,Åy≥«mê
	gBody
,Åy≥«mê
	gP¨tôi⁄î
> 
‰õnd
 
˛ass
 
	göã∫Æ
::
°¨t_sˇn
;

595 
	göãrÁ˚7
::
	töã∫Æ
::
	tﬁd_auto_∑πôi⁄_ty≥
 
	t∑πôi⁄_ty≥
;

597 
	göãrÁ˚7
::
	töã∫Æ
::
	tauto_∑πôi⁄_ty≥
 
	tèsk_∑πôi⁄_ty≥
;

600 
	göãrÁ˚7
::
	töã∫Æ
::
	tauto_∑πôi⁄_ty≥
::
	t•lô_ty≥
 split_type;

604 ˛as†
	cafföôy_∑πôi⁄î
: 
öã∫Æ
::
afföôy_∑πôi⁄î_ba£_v3
 {

605 
public
:

606 
afföôy_∑πôi⁄î
() {}

608 
¥iv©e
:

609 
ãm∂©e
<
ty≥«me
 
R™ge
,Åy≥«mê
	gBody
,Åy≥«mê
	gP¨tôi⁄î
> 
‰õnd
 
˛ass
 
	g£rül
::
öãrÁ˚7
::
°¨t_f‹
;

610 
	gãm∂©e
<
ty≥«me
 
	gR™ge
,Åy≥«mê
	gBody
,Åy≥«mê
	gP¨tôi⁄î
> 
‰õnd
 
˛ass
 
	göãrÁ˚7
::
öã∫Æ
::
°¨t_f‹
;

611 
	gãm∂©e
<
ty≥«me
 
	gR™ge
,Åy≥«mê
	gBody
,Åy≥«mê
	gP¨tôi⁄î
> 
‰õnd
 
˛ass
 
	göãrÁ˚7
::
öã∫Æ
::
°¨t_ªdu˚
;

612 
	gãm∂©e
<
ty≥«me
 
	gR™ge
,Åy≥«mê
	gBody
,Åy≥«mê
	gP¨tôi⁄î
> 
‰õnd
 
˛ass
 
	göã∫Æ
::
°¨t_sˇn
;

614 
	göãrÁ˚7
::
	töã∫Æ
::
	tﬁd_auto_∑πôi⁄_ty≥
 
	t∑πôi⁄_ty≥
;

616 
	göãrÁ˚7
::
	töã∫Æ
::
	tafföôy_∑πôi⁄_ty≥
 
	tèsk_∑πôi⁄_ty≥
;

619 
	göãrÁ˚7
::
	töã∫Æ
::
	tafföôy_∑πôi⁄_ty≥
::
	t•lô_ty≥
 split_type;

624 #i‡
deföed
(
_MSC_VER
Ë&& !deföed(
__INTEL_COMPILER
)

625 #¥agm®
w¨nög
 (
p›
)

627 #unde‡
__TBB_INITIAL_CHUNKS


628 #unde‡
__TBB_RANGE_POOL_CAPACITY


629 #unde‡
__TBB_INIT_DEPTH


	@viper/concurrentqueue-src/benchmarks/tbb/pipeline.cpp

21 
	~"tbb/pùñöe.h
"

22 
	~"tbb/•ö_muãx.h
"

23 
	~"tbb/ˇche_Æig√d_Æloˇt‹.h
"

24 
	~"ôt_nŸify.h
"

25 
	~"£m≠h‹e.h
"

26 
	~"és.h
"

29 
«me•a˚
 
	gtbb
 {

31 
«me•a˚
 
	göã∫Æ
 {

34 
	sèsk_öfo
 {

35 * 
	gmy_obje˘
;

37 
Tokí
 
	gmy_tokí
;

39 
boﬁ
 
	gmy_tokí_ªady
;

41 
boﬁ
 
	gis_vÆid
;

43 
ª£t
() {

44 
	gmy_obje˘
 = 
NULL
;

45 
	gmy_tokí
 = 0;

46 
	gmy_tokí_ªady
 = 
Ál£
;

47 
	gis_vÆid
 = 
Ál£
;

52 ˛as†
	cöput_buf„r
 : 
no_c›y
 {

53 
‰õnd
 
˛ass
 
tbb
::
öã∫Æ
::
pùñöe_roŸ_èsk
;

54 
‰õnd
 
˛ass
 
	gtbb
::
fûãr
;

55 
‰õnd
 
˛ass
 
	gtbb
::
thªad_bound_fûãr
;

56 
‰õnd
 
˛ass
 
	gtbb
::
öã∫Æ
::
°age_èsk
;

57 
‰õnd
 
˛ass
 
	gtbb
::
pùñöe
;

59 
Tokí
 
	tsize_ty≥
;

62 
èsk_öfo
* 
	g¨øy
;

65 
£m≠h‹e
* 
	gmy_£m
;

69 
size_ty≥
 
	g¨øy_size
;

73 
Tokí
 
	glow_tokí
;

76 
•ö_muãx
 
	g¨øy_muãx
;

80 
grow
–
size_ty≥
 
möimum_size
 );

84 c⁄° 
size_ty≥
 
	göôül_buf„r_size
 = 4;

87 
Tokí
 
	ghigh_tokí
;

90 
boﬁ
 
	gis_‹dîed
;

93 
boﬁ
 
	gis_bound
;

96 
	gbasic_és
<
	töçå_t
> 
	tíd_of_öput_és_t
;

97 
íd_of_öput_és_t
 
	gíd_of_öput_és
;

98 
boﬁ
 
	gíd_of_öput_és_Æloˇãd
;

100 
¸óã_£ma
(
size_t
 
öôül_tokís
Ë{ 
__TBB_ASSERT
(!
my_£m
,
NULL
); 
	gmy_£m
 = 
√w
 
öã∫Æ
::
£m≠h‹e
(initial_tokens); }

101 
‰ì_£ma
(Ë{ 
__TBB_ASSERT
(
my_£m
,
NULL
); 
dñëe
 
	gmy_£m
; }

102 
£ma_P
(Ë{ 
__TBB_ASSERT
(
my_£m
,
NULL
); 
	gmy_£m
->
P
(); }

103 
£ma_V
(Ë{ 
__TBB_ASSERT
(
my_£m
,
NULL
); 
	gmy_£m
->
V
(); }

105 
	gpublic
:

107 
öput_buf„r
–
boﬁ
 
is_‹dîed_
, boﬁ 
is_bound_
 ) :

108 
¨øy
(
NULL
), 
my_£m
(NULL), 
¨øy_size
(0),

109 
low_tokí
(0), 
high_tokí
(0),

110 
is_‹dîed
(
is_‹dîed_
), 
is_bound
(
is_bound_
),

111 
íd_of_öput_és_Æloˇãd
(
Ál£
) {

112 
grow
(
öôül_buf„r_size
);

113 
__TBB_ASSERT
–
¨øy
, 
NULL
 );

114 if(
	gis_bound
Ë
¸óã_£ma
(0);

118 ~
öput_buf„r
() {

119 
__TBB_ASSERT
–
¨øy
, 
NULL
 );

120 
	gˇche_Æig√d_Æloˇt‹
<
	gèsk_öfo
>().
dóŒoˇã
(
¨øy
,
¨øy_size
);

121 
pois⁄_poöãr
–
¨øy
 );

122 if(
	gmy_£m
) {

123 
‰ì_£ma
();

125 if(
	gíd_of_öput_és_Æloˇãd
) {

126 
de°roy_my_és
();

139 
boﬁ
 
put_tokí
–
èsk_öfo
& 
öfo_
, boﬁ 
f‹˚_put
 = 
Ál£
 ) {

141 
öfo_
.
is_vÆid
 = 
åue
;

142 
	g•ö_muãx
::
sc›ed_lock
 
lock
–
¨øy_muãx
 );

143 
Tokí
 
	gtokí
;

144 
boﬁ
 
	gwas_em±y
 = !
¨øy
[
low_tokí
&(
¨øy_size
-1)].
is_vÆid
;

145 if–
	gis_‹dîed
 ) {

146 if–!
	göfo_
.
	gmy_tokí_ªady
 ) {

147 
	göfo_
.
	gmy_tokí
 = 
high_tokí
++;

148 
	göfo_
.
	gmy_tokí_ªady
 = 
åue
;

150 
	gtokí
 = 
öfo_
.
my_tokí
;

152 
	gtokí
 = 
high_tokí
++;

153 
__TBB_ASSERT
–(
tokídiff_t
)(
tokí
-
low_tokí
)>=0, 
NULL
 );

154 if–
	gtokí
!=
low_tokí
 || 
is_bound
 || 
f‹˚_put
 ) {

157 if–
tokí
-
low_tokí
>=
¨øy_size
 )

158 
grow
–
tokí
-
low_tokí
+1 );

159 
ITT_NOTIFY
–
sync_ªÀasög
, 
this
 );

160 
	g¨øy
[
tokí
&(
¨øy_size
-1)] = 
öfo_
;

161 if(
	gwas_em±y
 && 
	gis_bound
) {

162 
£ma_V
();

164  
	gåue
;

167  
	gÁl£
;

177 
	gãm∂©e
<
ty≥«me
 
	gSègeTask
>

178 
nŸe_d⁄e
–
Tokí
 
tokí
, 
SègeTask
& 
•aw√r
 ) {

179 
èsk_öfo
 
	gwakì
;

180 
	gwakì
.
ª£t
();

182 
	g•ö_muãx
::
sc›ed_lock
 
lock
–
¨øy_muãx
 );

183 if–!
	gis_‹dîed
 || 
	gtokí
==
low_tokí
 ) {

185 
èsk_öfo
& 
ôem
 = 
¨øy
[++
low_tokí
 & (
¨øy_size
-1)];

186 
ITT_NOTIFY
–
sync_acquúed
, 
this
 );

187 
	gwakì
 = 
ôem
;

188 
	gôem
.
	gis_vÆid
 = 
Ál£
;

191 if–
	gwakì
.
	gis_vÆid
 )

192 
	g•aw√r
.
•awn_°age_èsk
(
wakì
);

195 #i‡
__TBB_TASK_GROUP_CONTEXT


197 
˛ór
–
fûãr
* 
my_fûãr
 ) {

198 
	gt
=
low_tokí
;

199  
size_ty≥
 
	gi
=0; i<
	g¨øy_size
; ++i, ++
	gt
 ){

200 
	gèsk_öfo
& 
	gãmp
 = 
¨øy
[
t
&(
¨øy_size
-1)];

201 i‡(
	gãmp
.
	gis_vÆid
 ) {

202 
	gmy_fûãr
->
föÆize
(
ãmp
.
my_obje˘
);

203 
	gãmp
.
	gis_vÆid
 = 
Ál£
;

212 
boﬁ
 
ªtu∫_ôem
(
èsk_öfo
& 
öfo
, boﬁ 
adv™˚
) {

213 
	g•ö_muãx
::
sc›ed_lock
 
lock
–
¨øy_muãx
 );

214 
	gèsk_öfo
& 
	gôem
 = 
¨øy
[
low_tokí
&(
¨øy_size
-1)];

215 
ITT_NOTIFY
–
sync_acquúed
, 
this
 );

216 if–
	gôem
.
	gis_vÆid
 ) {

217 
	göfo
 = 
ôem
;

218 
	gôem
.
	gis_vÆid
 = 
Ál£
;

219 i‡(
	gadv™˚
Ë
	glow_tokí
++;

220  
	gåue
;

222  
	gÁl£
;

226 
boﬁ
 
has_ôem
(Ë{ 
	g•ö_muãx
::
sc›ed_lock
 
lock
(
¨øy_muãx
);  
	g¨øy
[
low_tokí
&(
¨øy_size
 -1)].
	gis_vÆid
; }

229 
¸óã_my_és
(Ë{ 
	g°©us
 = 
íd_of_öput_és
.
¸óã
(); if(°©usË
h™dÀ_≥º‹
(
°©us
, "TLSÇŸáŒoˇãd f‹ fûãr"); 
	gíd_of_öput_és_Æloˇãd
 = 
åue
; }

230 
de°roy_my_és
(Ë{ 
	g°©us
 = 
íd_of_öput_és
.
de°roy
(); if(°©usË
h™dÀ_≥º‹
(
°©us
, "FailedÅo destroy filter TLS"); }

231 
boﬁ
 
my_és_íd_of_öput
(Ë{  
	gíd_of_öput_és
.
gë
() != 0; }

232 
£t_my_és_íd_of_öput
(Ë{ 
	gíd_of_öput_és
.
£t
(1); }

235 
	göput_buf„r
::
grow
–
size_ty≥
 
möimum_size
 ) {

236 
size_ty≥
 
ﬁd_size
 = 
¨øy_size
;

237 
size_ty≥
 
	g√w_size
 = 
ﬁd_size
 ? 2*ﬁd_sizê: 
öôül_buf„r_size
;

238  
	g√w_size
<
	gmöimum_size
 )

239 
	g√w_size
*=2;

240 
èsk_öfo
* 
	g√w_¨øy
 = 
ˇche_Æig√d_Æloˇt‹
<èsk_öfo>().
Æloˇã
(
√w_size
);

241 
èsk_öfo
* 
	gﬁd_¨øy
 = 
¨øy
;

242  
size_ty≥
 
	gi
=0; i<
	g√w_size
; ++i )

243 
	g√w_¨øy
[
i
].
	gis_vÆid
 = 
Ál£
;

244 
	gt
=
low_tokí
;

245  
size_ty≥
 
	gi
=0; i<
	gﬁd_size
; ++i, ++
	gt
 )

246 
	g√w_¨øy
[
t
&(
√w_size
-1)] = 
ﬁd_¨øy
[t&(
ﬁd_size
-1)];

247 
	g¨øy
 = 
√w_¨øy
;

248 
	g¨øy_size
 = 
√w_size
;

249 if–
	gﬁd_¨øy
 )

250 
	gˇche_Æig√d_Æloˇt‹
<
	gèsk_öfo
>().
dóŒoˇã
(
ﬁd_¨øy
,
ﬁd_size
);

253 
˛ass
 
	g°age_èsk
: 
public
 
èsk
,Öubli¯
	gèsk_öfo
 {

254 
	g¥iv©e
:

255 
‰õnd
 
˛ass
 
tbb
::
pùñöe
;

256 
	gpùñöe
& 
	gmy_pùñöe
;

257 
fûãr
* 
	gmy_fûãr
;

259 
boﬁ
 
	gmy_©_°¨t
;

261 
	gpublic
:

264 
°age_èsk
–
pùñöe
&Öipeline ) :

265 
my_pùñöe
(
pùñöe
),

266 
my_fûãr
(
pùñöe
.
fûãr_li°
),

267 
my_©_°¨t
(
åue
)

269 
	gèsk_öfo
::
ª£t
();

272 
°age_èsk
–
pùñöe
&Öùñöe, 
fûãr
* 
fûãr_
, c⁄° 
èsk_öfo
& 
öfo
 ) :

273 
èsk_öfo
(
öfo
),

274 
my_pùñöe
(
pùñöe
),

275 
my_fûãr
(
fûãr_
),

276 
my_©_°¨t
(
Ál£
)

279 
ª£t
() {

280 
	gèsk_öfo
::
ª£t
();

281 
	gmy_fûãr
 = 
my_pùñöe
.
fûãr_li°
;

282 
	gmy_©_°¨t
 = 
åue
;

285  
èsk
* 
execuã
();

286 #i‡
__TBB_TASK_GROUP_CONTEXT


287 ~
°age_èsk
()

289 i‡(
	gmy_fûãr
 && 
	gmy_obje˘
 && (my_fûãr->
	gmy_fûãr_mode
 & 
	gfûãr
::
vîsi⁄_mask
Ë>
__TBB_PIPELINE_VERSION
(4)) {

290 
__TBB_ASSERT
(
is_ˇn˚Œed
(), "TryingÅo finalizeÅheÅaskÅhat wasn't cancelled");

291 
	gmy_fûãr
->
föÆize
(
my_obje˘
);

292 
	gmy_obje˘
 = 
NULL
;

297 
•awn_°age_èsk
(c⁄° 
èsk_öfo
& 
öfo
)

299 
°age_èsk
* 
	g˛⁄e
 = 
√w
 (
Æloˇã_addôi⁄Æ_chûd_of
(*
∑ª¡
()))

300 
°age_èsk
–
my_pùñöe
, 
my_fûãr
, 
öfo
 );

301 
•awn
(*
˛⁄e
);

305 
èsk
* 
	g°age_èsk
::
execuã
() {

306 
__TBB_ASSERT
–!
my_©_°¨t
 || !
my_obje˘
, 
NULL
 );

307 
__TBB_ASSERT
–!
my_fûãr
->
is_bound
(), 
NULL
 );

308 if–
	gmy_©_°¨t
 ) {

309 if–
	gmy_fûãr
->
is_£rül
() ) {

310 
	gmy_obje˘
 = (*
my_fûãr
)(
my_obje˘
);

311 if–
	gmy_obje˘
 || ( 
	gmy_fûãr
->
obje˘_may_be_nuŒ
(Ë&& !
	gmy_pùñöe
.
	gíd_of_öput
) )

313 if–
	gmy_fûãr
->
is_‹dîed
() ) {

314 
	gmy_tokí
 = 
my_pùñöe
.
tokí_cou¡î
++;

315 
	gmy_tokí_ªady
 = 
åue
;

316 } if–(
	gmy_fûãr
->
	gmy_fûãr_mode
 & my_fûãr->
	gvîsi⁄_mask
Ë>
__TBB_PIPELINE_VERSION
(5) ) {

317 if–
my_pùñöe
.
has_thªad_bound_fûãrs
 )

318 
my_pùñöe
.
tokí_cou¡î
++;

320 if–!
	gmy_fûãr
->
	g√xt_fûãr_ö_pùñöe
 ) {

321 
ª£t
();

322 
	g¥o˚ss_™Ÿhî_°age
;

324 
ITT_NOTIFY
–
sync_ªÀasög
, &
my_pùñöe
.
öput_tokís
 );

325 if–--
	gmy_pùñöe
.
	göput_tokís
>0 )

326 
•awn
–*
√w
–
Æloˇã_addôi⁄Æ_chûd_of
(*
∑ª¡
()ËË
°age_èsk
–
my_pùñöe
 ) );

329 
	gmy_pùñöe
.
	gíd_of_öput
 = 
åue
;

330  
	gNULL
;

333 if–
	gmy_pùñöe
.
	gíd_of_öput
 )

334  
	gNULL
;

335 if–(
	gmy_fûãr
->
	gmy_fûãr_mode
 & my_fûãr->
	gvîsi⁄_mask
Ë>
__TBB_PIPELINE_VERSION
(5) ) {

336 if–
my_pùñöe
.
has_thªad_bound_fûãrs
 )

337 
my_pùñöe
.
tokí_cou¡î
++;

339 
ITT_NOTIFY
–
sync_ªÀasög
, &
my_pùñöe
.
öput_tokís
 );

340 if–--
	gmy_pùñöe
.
	göput_tokís
>0 )

341 
•awn
–*
√w
–
Æloˇã_addôi⁄Æ_chûd_of
(*
∑ª¡
()ËË
°age_èsk
–
my_pùñöe
 ) );

342 
	gmy_obje˘
 = (*
my_fûãr
)(
my_obje˘
);

343 if–!
	gmy_obje˘
 && (!
	gmy_fûãr
->
obje˘_may_be_nuŒ
(Ë|| my_fûãr->
	gmy_öput_buf„r
->
my_és_íd_of_öput
()) )

345 
	gmy_pùñöe
.
	gíd_of_öput
 = 
åue
;

346 if–(
	gmy_fûãr
->
	gmy_fûãr_mode
 & my_fûãr->
	gvîsi⁄_mask
Ë>
__TBB_PIPELINE_VERSION
(5) ) {

347 if–
my_pùñöe
.
has_thªad_bound_fûãrs
 )

348 
my_pùñöe
.
tokí_cou¡î
--;

350  
	gNULL
;

353 
	gmy_©_°¨t
 = 
Ál£
;

355 
	gmy_obje˘
 = (*
my_fûãr
)(
my_obje˘
);

356 if–
	gmy_fûãr
->
is_£rül
() )

357 
	gmy_fûãr
->
	gmy_öput_buf„r
->
nŸe_d⁄e
(
my_tokí
, *
this
);

359 
	gmy_fûãr
 = 
my_fûãr
->
√xt_fûãr_ö_pùñöe
;

360 if–
	gmy_fûãr
 ) {

362 if–
	gmy_fûãr
->
is_£rül
() ) {

364 if–
	gmy_fûãr
->
	gmy_öput_buf„r
->
put_tokí
(*
this
) ){

366 if–
	gmy_fûãr
->
is_bound
() ) {

369 
	gmy_fûãr
 = 
my_fûãr
->
√xt_fûãr_ö_pùñöe
;

370 }  
	gmy_fûãr
 && my_fûãr->
is_bound
() );

372 if–
	gmy_fûãr
 && my_fûãr->
	gmy_öput_buf„r
->
ªtu∫_ôem
(*
this
, !
my_fûãr
->
is_£rül
()))

373 
	g¥o˚ss_™Ÿhî_°age
;

375 
	gmy_fûãr
 = 
NULL
;

376  
	gNULL
;

381 
size_t
 
	g¡okís_avaû
 = ++
my_pùñöe
.
öput_tokís
;

382 if(
	gmy_pùñöe
.
	gfûãr_li°
->
is_bound
() ) {

383 if(
	g¡okís_avaû
 == 1) {

384 
my_pùñöe
.
fûãr_li°
->
my_öput_buf„r
->
£ma_V
();

386  
	gNULL
;

388 if–
	g¡okís_avaû
>1

389 || 
	gmy_pùñöe
.
	gíd_of_öput
 ) {

390  
	gNULL
;

392 
ITT_NOTIFY
–
sync_acquúed
, &
my_pùñöe
.
öput_tokís
 );

394 
ª£t
();

396 
	g¥o˚ss_™Ÿhî_°age
:

400 
ªcy˛e_as_c⁄töu©i⁄
();

401  
	gthis
;

404 ˛as†
	cpùñöe_roŸ_èsk
: 
public
 
èsk
 {

405 
pùñöe
& 
my_pùñöe
;

406 
boﬁ
 
	gdo_£gmít_sˇ¬ög
;

408  
èsk
* 
execuã
() {

409 if–!
	gmy_pùñöe
.
	gíd_of_öput
 )

410 if–!
	gmy_pùñöe
.
	gfûãr_li°
->
is_bound
() )

411 if–
	gmy_pùñöe
.
	göput_tokís
 > 0 ) {

412 
ªcy˛e_as_c⁄töu©i⁄
();

413 
£t_ªf_cou¡
(1);

414  
√w
–
Æloˇã_chûd
(ËË
°age_èsk
–
my_pùñöe
 );

416 if–
	gdo_£gmít_sˇ¬ög
 ) {

417 
fûãr
* 
	gcuºít_fûãr
 = 
my_pùñöe
.
fûãr_li°
->
√xt_£gmít
;

420 
fûãr
* 
	gfú°_suôabÀ_fûãr
 = 
cuºít_fûãr
;

421  
	gcuºít_fûãr
 ) {

422 
__TBB_ASSERT
–!
cuºít_fûãr
->
is_bound
(), "filter isÅhread-bound?" );

423 
__TBB_ASSERT
–
cuºít_fûãr
->
¥ev_fûãr_ö_pùñöe
->
is_bound
(), "previous filter isÇotÅhread-bound?" );

424 if–!
	gmy_pùñöe
.
	gíd_of_öput
 || 
	gcuºít_fûãr
->
has_m‹e_w‹k
())

426 
èsk_öfo
 
	göfo
;

427 
	göfo
.
ª£t
();

428 if–
	gcuºít_fûãr
->
	gmy_öput_buf„r
->
ªtu∫_ôem
(
öfo
, !
cuºít_fûãr
->
is_£rül
()) ) {

429 
£t_ªf_cou¡
(1);

430 
ªcy˛e_as_c⁄töu©i⁄
();

431  
√w
–
Æloˇã_chûd
(ËË
°age_èsk
–
my_pùñöe
, 
cuºít_fûãr
, 
öfo
);

433 
	gcuºít_fûãr
 = 
cuºít_fûãr
->
√xt_£gmít
;

434 if–!
	gcuºít_fûãr
 ) {

435 if–!
	gmy_pùñöe
.
	gíd_of_öput
 ) {

436 
ªcy˛e_as_c⁄töu©i⁄
();

437  
	gthis
;

439 
	gcuºít_fûãr
 = 
fú°_suôabÀ_fûãr
;

440 
__TBB_Yõld
();

445 
	gfú°_suôabÀ_fûãr
 = 
fú°_suôabÀ_fûãr
->
√xt_£gmít
;

446 
	gcuºít_fûãr
 = 
fú°_suôabÀ_fûãr
;

449  
	gNULL
;

451 if–!
	gmy_pùñöe
.
	gíd_of_öput
 ) {

452 
ªcy˛e_as_c⁄töu©i⁄
();

453  
	gthis
;

455  
	gNULL
;

458 
	gpublic
:

459 
pùñöe_roŸ_èsk
–
pùñöe
&Öùñöê): 
my_pùñöe
’ùñöe), 
do_£gmít_sˇ¬ög
(
Ál£
)

461 
__TBB_ASSERT
–
my_pùñöe
.
fûãr_li°
, 
NULL
 );

462 
fûãr
* 
	gfú°
 = 
my_pùñöe
.
fûãr_li°
;

463 if–(
	gfú°
->
	gmy_fûãr_mode
 & fú°->
	gvîsi⁄_mask
Ë>
__TBB_PIPELINE_VERSION
(5) ) {

465 
fûãr
* 
hód_of_¥evious_£gmít
 = 
fú°
;

466  
fûãr
* 
	gsubfûãr
=
fú°
->
√xt_fûãr_ö_pùñöe
;

467 
	gsubfûãr
!=
NULL
;

468 
	gsubfûãr
=
subfûãr
->
√xt_fûãr_ö_pùñöe
 )

470 if–
subfûãr
->
¥ev_fûãr_ö_pùñöe
->
is_bound
() && !subfilter->is_bound() ) {

471 
do_£gmít_sˇ¬ög
 = 
åue
;

472 
	ghód_of_¥evious_£gmít
->
	g√xt_£gmít
 = 
subfûãr
;

473 
	ghód_of_¥evious_£gmít
 = 
subfûãr
;

480 #i‡
_MSC_VER
 && !
deföed
(
__INTEL_COMPILER
)

483 #¥agm®
w¨nög
 (
dißbÀ
: 4127)

487 ˛as†
	cpùñöe_˛ó√r
: 
öã∫Æ
::
no_c›y
 {

488 
pùñöe
& 
my_pùñöe
;

489 
	gpublic
:

490 
pùñöe_˛ó√r
(
pùñöe
& 
_pùñöe
) :

491 
my_pùñöe
(
_pùñöe
)

493 ~
pùñöe_˛ó√r
(){

494 #i‡
__TBB_TASK_GROUP_CONTEXT


495 i‡(
my_pùñöe
.
íd_cou¡î
->
is_ˇn˚Œed
())

496 
my_pùñöe
.
˛ór_fûãrs
();

498 
	gmy_pùñöe
.
	gíd_cou¡î
 = 
NULL
;

504 
	gpùñöe
::
	$öje˘_tokí
–
èsk
& ) {

505 
	`__TBB_ASSERT
(
Ál£
,"illegal callÅo inject_token");

506 
	}
}

508 #i‡
__TBB_TASK_GROUP_CONTEXT


509 
	gpùñöe
::
	$˛ór_fûãrs
() {

510  
fûãr
* 
f
 = 
fûãr_li°
; f; f = f->
√xt_fûãr_ö_pùñöe
 ) {

511 i‡((
f
->
my_fûãr_mode
 & 
fûãr
::
vîsi⁄_mask
Ë>
	`__TBB_PIPELINE_VERSION
(4))

512 if–
öã∫Æ
::
öput_buf„r
* 
b
 = 
f
->
my_öput_buf„r
 )

513 
b
->
	`˛ór
(
f
);

515 
	}
}

518 
	gpùñöe
::
	$pùñöe
() :

519 
	`fûãr_li°
(
NULL
),

520 
	`fûãr_íd
(
NULL
),

521 
	`íd_cou¡î
(
NULL
),

522 
	`íd_of_öput
(
Ál£
),

523 
	$has_thªad_bound_fûãrs
(
Ál£
)

525 
tokí_cou¡î
 = 0;

526 
öput_tokís
 = 0;

527 
	}
}

529 
	gpùñöe
::~
	$pùñöe
() {

530 
	`˛ór
();

531 
	}
}

533 
	gpùñöe
::
	$˛ór
() {

534 
fûãr
* 
√xt
;

535  
fûãr
* 
f
 = 
fûãr_li°
; f; f=
√xt
 ) {

536 if–
öã∫Æ
::
öput_buf„r
* 
b
 = 
f
->
my_öput_buf„r
 ) {

537 
dñëe
 
b
;

538 
f
->
my_öput_buf„r
 = 
NULL
;

540 
√xt
=
f
->
√xt_fûãr_ö_pùñöe
;

541 
f
->
√xt_fûãr_ö_pùñöe
 = 
fûãr
::
	`nŸ_ö_pùñöe
();

542 i‡–(
f
->
my_fûãr_mode
 & 
fûãr
::
vîsi⁄_mask
Ë>
	`__TBB_PIPELINE_VERSION
(3) ) {

543 
f
->
¥ev_fûãr_ö_pùñöe
 = 
fûãr
::
	`nŸ_ö_pùñöe
();

544 
f
->
my_pùñöe
 = 
NULL
;

546 i‡–(
f
->
my_fûãr_mode
 & 
fûãr
::
vîsi⁄_mask
Ë>
	`__TBB_PIPELINE_VERSION
(5) )

547 
f
->
√xt_£gmít
 = 
NULL
;

549 
fûãr_li°
 = 
fûãr_íd
 = 
NULL
;

550 
	}
}

552 
	gpùñöe
::
	$add_fûãr
–
fûãr
& 
fûãr_
 ) {

553 #i‡
TBB_USE_ASSERT


554 i‡–(
fûãr_
.
my_fûãr_mode
 & 
fûãr
::
vîsi⁄_mask
Ë>
	`__TBB_PIPELINE_VERSION
(3) )

555 
	`__TBB_ASSERT
–
fûãr_
.
¥ev_fûãr_ö_pùñöe
==
fûãr
::
	`nŸ_ö_pùñöe
(), "filterálreadyÖart ofÖipeline?" );

556 
	`__TBB_ASSERT
–
fûãr_
.
√xt_fûãr_ö_pùñöe
==
fûãr
::
	`nŸ_ö_pùñöe
(), "filterálreadyÖart ofÖipeline?" );

557 
	`__TBB_ASSERT
–!
íd_cou¡î
, "invocation ofádd_filter onÑunningÖipeline" );

559 i‡–(
fûãr_
.
my_fûãr_mode
 & 
fûãr
::
vîsi⁄_mask
Ë>
	`__TBB_PIPELINE_VERSION
(3) ) {

560 
fûãr_
.
my_pùñöe
 = 
this
;

561 
fûãr_
.
¥ev_fûãr_ö_pùñöe
 = 
fûãr_íd
;

562 i‡–
fûãr_li°
 =
NULL
)

563 
fûãr_li°
 = &
fûãr_
;

565 
fûãr_íd
->
√xt_fûãr_ö_pùñöe
 = &
fûãr_
;

566 
fûãr_
.
√xt_fûãr_ö_pùñöe
 = 
NULL
;

567 
fûãr_íd
 = &
fûãr_
;

571 if–!
fûãr_íd
 )

572 
fûãr_íd
 = 
ªöãΩªt_ˇ°
<
fûãr
*>(&
fûãr_li°
);

574 *
ªöãΩªt_ˇ°
<
fûãr
**>(
fûãr_íd
Ë&
fûãr_
;

575 
fûãr_íd
 = 
ªöãΩªt_ˇ°
<
fûãr
*>(&
fûãr_
.
√xt_fûãr_ö_pùñöe
);

576 *
ªöãΩªt_ˇ°
<
fûãr
**>(
fûãr_íd
Ë
NULL
;

578 if–(
fûãr_
.
my_fûãr_mode
 & fûãr_.
vîsi⁄_mask
Ë>
	`__TBB_PIPELINE_VERSION
(5) ) {

579 if–
fûãr_
.
	`is_£rül
() ) {

580 if–
fûãr_
.
	`is_bound
() )

581 
has_thªad_bound_fûãrs
 = 
åue
;

582 
fûãr_
.
my_öput_buf„r
 = 
√w
 
öã∫Æ
::
	`öput_buf„r
–fûãr_.
	`is_‹dîed
(), fûãr_.
	`is_bound
() );

585 if(
fûãr_
.
¥ev_fûãr_ö_pùñöe
) {

586 if(
fûãr_
.
¥ev_fûãr_ö_pùñöe
->
	`is_bound
()) {

588 
fûãr_
.
my_öput_buf„r
 = 
√w
 
öã∫Æ
::
	`öput_buf„r
– 
Ál£
, false );

592 if(
fûãr_
.
	`obje˘_may_be_nuŒ
() ) {

594 
fûãr_
.
my_öput_buf„r
 = 
√w
 
öã∫Æ
::
	`öput_buf„r
– 
Ál£
, false );

595 
fûãr_
.
my_öput_buf„r
->
	`¸óã_my_és
();

600 if–
fûãr_
.
	`is_£rül
() ) {

601 
fûãr_
.
my_öput_buf„r
 = 
√w
 
öã∫Æ
::
	`öput_buf„r
–fûãr_.
	`is_‹dîed
(), 
Ál£
 );

605 
	}
}

607 
	gpùñöe
::
	$ªmove_fûãr
–
fûãr
& 
fûãr_
 ) {

608 
	`__TBB_ASSERT
–
fûãr_
.
¥ev_fûãr_ö_pùñöe
!=
fûãr
::
	`nŸ_ö_pùñöe
(), "filterÇotÖart ofÖipeline" );

609 
	`__TBB_ASSERT
–
fûãr_
.
√xt_fûãr_ö_pùñöe
!=
fûãr
::
	`nŸ_ö_pùñöe
(), "filterÇotÖart ofÖipeline" );

610 
	`__TBB_ASSERT
–!
íd_cou¡î
, "invocation ofÑemove_filter onÑunningÖipeline" );

611 i‡(&
fûãr_
 =
fûãr_li°
)

612 
fûãr_li°
 = 
fûãr_
.
√xt_fûãr_ö_pùñöe
;

614 
	`__TBB_ASSERT
–
fûãr_
.
¥ev_fûãr_ö_pùñöe
, "filterÜist broken?" );

615 
fûãr_
.
¥ev_fûãr_ö_pùñöe
->
√xt_fûãr_ö_pùñöe
 = filter_.next_filter_in_pipeline;

617 i‡(&
fûãr_
 =
fûãr_íd
)

618 
fûãr_íd
 = 
fûãr_
.
¥ev_fûãr_ö_pùñöe
;

620 
	`__TBB_ASSERT
–
fûãr_
.
√xt_fûãr_ö_pùñöe
, "filterÜist broken?" );

621 
fûãr_
.
√xt_fûãr_ö_pùñöe
->
¥ev_fûãr_ö_pùñöe
 = filter_.prev_filter_in_pipeline;

623 if–
öã∫Æ
::
öput_buf„r
* 
b
 = 
fûãr_
.
my_öput_buf„r
 ) {

624 
dñëe
 
b
;

625 
fûãr_
.
my_öput_buf„r
 = 
NULL
;

627 
fûãr_
.
√xt_fûãr_ö_pùñöe
 = fûãr_.
¥ev_fûãr_ö_pùñöe
 = 
fûãr
::
	`nŸ_ö_pùñöe
();

628 i‡–(
fûãr_
.
my_fûãr_mode
 & 
fûãr
::
vîsi⁄_mask
Ë>
	`__TBB_PIPELINE_VERSION
(5) )

629 
fûãr_
.
√xt_£gmít
 = 
NULL
;

630 
fûãr_
.
my_pùñöe
 = 
NULL
;

631 
	}
}

633 
	gpùñöe
::
run
–
size_t
 
max_numbî_of_live_tokís


634 #i‡
__TBB_TASK_GROUP_CONTEXT


635 , 
tbb
::
èsk_group_c⁄ãxt
& 
c⁄ãxt


638 
__TBB_ASSERT
–
max_numbî_of_live_tokís
>0, "pipeline::run must haveátÜeast oneÅoken" );

639 
__TBB_ASSERT
–!
íd_cou¡î
, "pipelineálreadyÑunning?" );

640 if–
	gfûãr_li°
 ) {

641 
	göã∫Æ
::
pùñöe_˛ó√r
 
my_pùñöe_˛ó√r
(*
this
);

642 
	gíd_of_öput
 = 
Ál£
;

643 
	göput_tokís
 = 
öã∫Æ
::
Tokí
(
max_numbî_of_live_tokís
);

644 if(
	ghas_thªad_bound_fûãrs
) {

646 if(
	gfûãr_li°
->
is_bound
()) {

647 
	gfûãr_li°
->
	gmy_öput_buf„r
->
£ma_V
();

650 #i‡
__TBB_TASK_GROUP_CONTEXT


651 
	gíd_cou¡î
 = 
√w
–
èsk
::
Æloˇã_roŸ
(
c⁄ãxt
ËË
öã∫Æ
::
pùñöe_roŸ_èsk
–*
this
 );

653 
	gíd_cou¡î
 = 
√w
–
èsk
::
Æloˇã_roŸ
(ËË
öã∫Æ
::
pùñöe_roŸ_èsk
–*
this
 );

656 
	gèsk
::
•awn_roŸ_™d_waô
–*
íd_cou¡î
 );

658 if(
	ghas_thªad_bound_fûãrs
) {

659 
fûãr
* 
	gf
 = 
fûãr_li°
->
√xt_fûãr_ö_pùñöe
; f; f=
f
->next_filter_in_pipeline) {

660 if(
f
->
is_bound
()) {

661 
f
->
my_öput_buf„r
->
£ma_V
();

668 #i‡
__TBB_TASK_GROUP_CONTEXT


669 
	gpùñöe
::
	$run
–
size_t
 
max_numbî_of_live_tokís
 ) {

670 if–
fûãr_li°
 ) {

673 
uöçå_t
 
˘x_åaôs
 = 
fûãr_li°
->
my_fûãr_mode
 & 
fûãr
::
exa˘_ex˚±i⁄_¥›ag©i⁄
 ?

674 
èsk_group_c⁄ãxt
::
deÁu…_åaôs
 :

675 
èsk_group_c⁄ãxt
::
deÁu…_åaôs
 & ~èsk_group_c⁄ãxt::
exa˘_ex˚±i⁄
;

676 
èsk_group_c⁄ãxt
 
	`c⁄ãxt
—ask_group_c⁄ãxt::
bound
, 
˘x_åaôs
);

677 
	`run
(
max_numbî_of_live_tokís
, 
c⁄ãxt
);

679 
	}
}

682 
boﬁ
 
	gfûãr
::
	$has_m‹e_w‹k
() {

683 
	`__TBB_ASSERT
(
my_pùñöe
, 
NULL
);

684 
	`__TBB_ASSERT
(
my_öput_buf„r
, "has_more_work() called for filter withÇo input buffer");

685  (
öã∫Æ
::
tokídiff_t
)(
my_pùñöe
->
tokí_cou¡î
 - 
my_öput_buf„r
->
low_tokí
) != 0;

686 
	}
}

688 
	gfûãr
::~
	$fûãr
() {

689 i‡–(
my_fûãr_mode
 & 
vîsi⁄_mask
Ë>
	`__TBB_PIPELINE_VERSION
(3) ) {

690 i‡–
√xt_fûãr_ö_pùñöe
 !
fûãr
::
	`nŸ_ö_pùñöe
() )

691 
my_pùñöe
->
	`ªmove_fûãr
(*
this
);

693 
	`__TBB_ASSERT
–
¥ev_fûãr_ö_pùñöe
 =
fûãr
::
	`nŸ_ö_pùñöe
(), "probably filterÜist is broken" );

695 
	`__TBB_ASSERT
–
√xt_fûãr_ö_pùñöe
==
fûãr
::
	`nŸ_ö_pùñöe
(), "cannot destroy filterÅhat isÖart ofÖipeline" );

697 
	}
}

700 
	gfûãr
::
	$£t_íd_of_öput
() {

701 
	`__TBB_ASSERT
(
my_öput_buf„r
, 
NULL
);

702 
	`__TBB_ASSERT
(
	`obje˘_may_be_nuŒ
(), 
NULL
);

703 if(
	`is_£rül
()) {

704 
my_pùñöe
->
íd_of_öput
 = 
åue
;

707 
	`__TBB_ASSERT
(
my_öput_buf„r
->
íd_of_öput_és_Æloˇãd
, 
NULL
);

708 
my_öput_buf„r
->
	`£t_my_és_íd_of_öput
();

710 
	}
}

712 
	gthªad_bound_fûãr
::
ªsu…_ty≥
 
thªad_bound_fûãr
::
	$¥o˚ss_ôem
() {

713  
	`öã∫Æ_¥o˚ss_ôem
(
åue
);

714 
	}
}

716 
	gthªad_bound_fûãr
::
ªsu…_ty≥
 
thªad_bound_fûãr
::
	$åy_¥o˚ss_ôem
() {

717  
	`öã∫Æ_¥o˚ss_ôem
(
Ál£
);

718 
	}
}

720 
	gthªad_bound_fûãr
::
ªsu…_ty≥
 
thªad_bound_fûãr
::
	$öã∫Æ_¥o˚ss_ôem
(
boﬁ
 
is_blockög
) {

721 
	`__TBB_ASSERT
(
my_pùñöe
 !
NULL
,"It'sÇot supposedÅhatÖrocess_item is called forá filterÅhat isÇot ináÖipeline.");

722 
öã∫Æ
::
èsk_öfo
 
öfo
;

723 
öfo
.
	`ª£t
();

725 if–
my_pùñöe
->
íd_of_öput
 && !
	`has_m‹e_w‹k
() )

726  
íd_of_°ªam
;

728 if–!
¥ev_fûãr_ö_pùñöe
 ) {

729 if–
my_pùñöe
->
íd_of_öput
 )

730  
íd_of_°ªam
;

731  
my_pùñöe
->
öput_tokís
 == 0 ) {

732 if–!
is_blockög
 )

733  
ôem_nŸ_avaûabÀ
;

734 
my_öput_buf„r
->
	`£ma_P
();

736 
öfo
.
my_obje˘
 = (*
this
)(info.my_object);

737 if–
öfo
.
my_obje˘
 ) {

738 
	`__TBB_ASSERT
(
my_pùñöe
->
öput_tokís
 > 0, "Token failed inÅhread-bound filter");

739 
my_pùñöe
->
öput_tokís
--;

740 if–
	`is_‹dîed
() ) {

741 
öfo
.
my_tokí
 = 
my_pùñöe
->
tokí_cou¡î
;

742 
öfo
.
my_tokí_ªady
 = 
åue
;

744 
my_pùñöe
->
tokí_cou¡î
++;

746 
my_pùñöe
->
íd_of_öput
 = 
åue
;

747  
íd_of_°ªam
;

750  !
my_öput_buf„r
->
	`has_ôem
() ) {

751 if–!
is_blockög
 ) {

752  
ôem_nŸ_avaûabÀ
;

754 
my_öput_buf„r
->
	`£ma_P
();

755 if–
my_pùñöe
->
íd_of_öput
 && !
	`has_m‹e_w‹k
() ) {

756  
íd_of_°ªam
;

759 if–!
my_öput_buf„r
->
	`ªtu∫_ôem
(
öfo
, 
åue
) ) {

760 
	`__TBB_ASSERT
(
Ál£
,"return_item failed");

762 
öfo
.
my_obje˘
 = (*
this
)(info.my_object);

764 if–
√xt_fûãr_ö_pùñöe
 ) {

765 i‡–!
√xt_fûãr_ö_pùñöe
->
my_öput_buf„r
->
	`put_tokí
(
öfo
, 
åue
) ) {

766 
	`__TBB_ASSERT
(
Ál£
, "Couldn'tÖutÅokenáfterÅhread-bound buffer");

769 
size_t
 
¡okís_avaû
 = ++(
my_pùñöe
->
öput_tokís
);

770 if–
my_pùñöe
->
fûãr_li°
->
	`is_bound
() ) {

771 if–
¡okís_avaû
 == 1 ) {

772 
my_pùñöe
->
fûãr_li°
->
my_öput_buf„r
->
	`£ma_V
();

777  
suc˚ss
;

778 
	}
}

	@viper/concurrentqueue-src/benchmarks/tbb/pipeline.h

21 #i‚de‡
__TBB_pùñöe_H


22 
	#__TBB_pùñöe_H


	)

24 
	~"©omic.h
"

25 
	~"èsk.h
"

26 
	~"tbb_Æloˇt‹.h
"

27 
	~<c°ddef
>

29 #i‡
__TBB_CPP11_TYPE_PROPERTIES_PRESENT
 || 
__TBB_TR1_TYPE_PROPERTIES_IN_STD_PRESENT


30 
	~<ty≥_åaôs
>

33 
«me•a˚
 
	gtbb
 {

35 
˛ass
 
	gpùñöe
;

36 
˛ass
 
	gfûãr
;

39 
«me•a˚
 
	göã∫Æ
 {

42 
	#__TBB_PIPELINE_VERSION
(
x
Ë(()(x-2)<<1)

	)

44 
	tTokí
;

45 
	ttokídiff_t
;

46 
˛ass
 
	g°age_èsk
;

47 
˛ass
 
	göput_buf„r
;

48 
˛ass
 
	gpùñöe_roŸ_èsk
;

49 
˛ass
 
	gpùñöe_˛ó√r
;

53 
«me•a˚
 
	göãrÁ˚6
 {

54 
	gãm∂©e
<
ty≥«me
 
	gT
,Åy≥«mê
	gU
> 
˛ass
 
	gfûãr_t
;

56 
«me•a˚
 
	göã∫Æ
 {

57 
˛ass
 
	gpùñöe_¥oxy
;

65 ˛as†
	cfûãr
: 
öã∫Æ
::
no_c›y
 {

66 
¥iv©e
:

68 
fûãr
* 
nŸ_ö_pùñöe
(Ë{ 
ªöãΩªt_ˇ°
<fûãr*>(
öçå_t
(-1));}

69 
	g¥Ÿe˘ed
:

71 c⁄° 
fûãr_is_£rül
 = 0x1;

76 c⁄° 
	gfûãr_is_out_of_‹dî
 = 0x1<<4;

79 c⁄° 
	gfûãr_is_bound
 = 0x1<<5;

82 c⁄° 
	gfûãr_may_emô_nuŒ
 = 0x1<<6;

85 c⁄° 
	gexa˘_ex˚±i⁄_¥›ag©i⁄
 =

86 #i‡
TBB_USE_CAPTURED_EXCEPTION


92 c⁄° 
	gcuºít_vîsi⁄
 = 
__TBB_PIPELINE_VERSION
(5);

93 c⁄° 
	gvîsi⁄_mask
 = 0x7<<1;

94 
	gpublic
:

95 
	emode
 {

97 
∑øŒñ
 = 
cuºít_vîsi⁄
 | 
fûãr_is_out_of_‹dî
,

99 
	g£rül_ö_‹dî
 = 
cuºít_vîsi⁄
 | 
fûãr_is_£rül
,

101 
	g£rül_out_of_‹dî
 = 
cuºít_vîsi⁄
 | 
fûãr_is_£rül
 | 
fûãr_is_out_of_‹dî
,

103 
	g£rül
 = 
£rül_ö_‹dî


105 
	g¥Ÿe˘ed
:

106 
fûãr
–
boﬁ
 
is_£rül_
 ) :

107 
√xt_fûãr_ö_pùñöe
(
nŸ_ö_pùñöe
()),

108 
my_öput_buf„r
(
NULL
),

109 
my_fûãr_mode
(
°©ic_ˇ°
<>((
is_£rül_
 ? 
£rül
 : 
∑øŒñ
Ë| 
exa˘_ex˚±i⁄_¥›ag©i⁄
)),

110 
¥ev_fûãr_ö_pùñöe
(
nŸ_ö_pùñöe
()),

111 
my_pùñöe
(
NULL
),

112 
√xt_£gmít
(
NULL
)

115 
fûãr
–
mode
 
fûãr_mode
 ) :

116 
√xt_fûãr_ö_pùñöe
(
nŸ_ö_pùñöe
()),

117 
my_öput_buf„r
(
NULL
),

118 
my_fûãr_mode
(
°©ic_ˇ°
<>(
fûãr_mode
 | 
exa˘_ex˚±i⁄_¥›ag©i⁄
)),

119 
¥ev_fûãr_ö_pùñöe
(
nŸ_ö_pùñöe
()),

120 
my_pùñöe
(
NULL
),

121 
√xt_£gmít
(
NULL
)

125 
__TBB_EXPORTED_METHOD
 
£t_íd_of_öput
();

127 
	gpublic
:

129 
boﬁ
 
is_£rül
() const {

130  
boﬁ
–
my_fûãr_mode
 & 
fûãr_is_£rül
 );

134 
boﬁ
 
is_‹dîed
() const {

135  (
	gmy_fûãr_mode
 & (
	gfûãr_is_out_of_‹dî
|
	gfûãr_is_£rül
))==
fûãr_is_£rül
;

139 
boﬁ
 
is_bound
() const {

140  ( 
	gmy_fûãr_mode
 & 
	gfûãr_is_bound
 )==
fûãr_is_bound
;

144 
boﬁ
 
obje˘_may_be_nuŒ
() {

145  ( 
	gmy_fûãr_mode
 & 
	gfûãr_may_emô_nuŒ
 ) =
fûãr_may_emô_nuŒ
;

150 
vútuÆ
 * 
›î©‹
()–* 
	gôem
 ) = 0;

154 
vútuÆ
 
	g__TBB_EXPORTED_METHOD
 ~
fûãr
();

156 #i‡
__TBB_TASK_GROUP_CONTEXT


160 
vútuÆ
 
föÆize
( * ) {};

163 
	g¥iv©e
:

165 
fûãr
* 
√xt_fûãr_ö_pùñöe
;

170 
boﬁ
 
has_m‹e_w‹k
();

174 
	göã∫Æ
::
öput_buf„r
* 
my_öput_buf„r
;

176 
‰õnd
 
˛ass
 
	göã∫Æ
::
°age_èsk
;

177 
‰õnd
 
˛ass
 
	göã∫Æ
::
pùñöe_roŸ_èsk
;

178 
‰õnd
 
˛ass
 
	gpùñöe
;

179 
‰õnd
 
˛ass
 
	gthªad_bound_fûãr
;

182 c⁄° 
	gmy_fûãr_mode
;

185 
fûãr
* 
	g¥ev_fûãr_ö_pùñöe
;

188 
pùñöe
* 
	gmy_pùñöe
;

192 
fûãr
* 
	g√xt_£gmít
;

197 ˛as†
	cthªad_bound_fûãr
: 
public
 
fûãr
 {

198 
public
:

199 
	eªsu…_ty≥
 {

201 
suc˚ss
,

203 
	gôem_nŸ_avaûabÀ
,

205 
	gíd_of_°ªam


207 
	g¥Ÿe˘ed
:

208 
thªad_bound_fûãr
(
mode
 
fûãr_mode
):

209 
fûãr
(
°©ic_ˇ°
<
mode
>(
fûãr_mode
 | fûãr::
fûãr_is_bound
))

211 
__TBB_ASSERT
(
fûãr_mode
 & 
fûãr
::
fûãr_is_£rül
, "thread-bound filters must be serial");

213 
	gpublic
:

220 
ªsu…_ty≥
 
__TBB_EXPORTED_METHOD
 
åy_¥o˚ss_ôem
();

227 
ªsu…_ty≥
 
__TBB_EXPORTED_METHOD
 
¥o˚ss_ôem
();

229 
	g¥iv©e
:

231 
ªsu…_ty≥
 
öã∫Æ_¥o˚ss_ôem
(
boﬁ
 
is_blockög
);

236 ˛as†
	cpùñöe
 {

237 
	gpublic
:

239 
__TBB_EXPORTED_METHOD
 
pùñöe
();

243 
vútuÆ
 
	g__TBB_EXPORTED_METHOD
 ~
pùñöe
();

246 
__TBB_EXPORTED_METHOD
 
add_fûãr
–
fûãr
& 
fûãr_
 );

249 
__TBB_EXPORTED_METHOD
 
run
–
size_t
 
max_numbî_of_live_tokís
 );

251 #i‡
__TBB_TASK_GROUP_CONTEXT


253 
__TBB_EXPORTED_METHOD
 
run
–
size_t
 
max_numbî_of_live_tokís
, 
tbb
::
èsk_group_c⁄ãxt
& 
c⁄ãxt
 );

257 
__TBB_EXPORTED_METHOD
 
˛ór
();

259 
	g¥iv©e
:

260 
‰õnd
 
˛ass
 
öã∫Æ
::
°age_èsk
;

261 
‰õnd
 
˛ass
 
	göã∫Æ
::
pùñöe_roŸ_èsk
;

262 
‰õnd
 
˛ass
 
	gfûãr
;

263 
‰õnd
 
˛ass
 
	gthªad_bound_fûãr
;

264 
‰õnd
 
˛ass
 
	göã∫Æ
::
pùñöe_˛ó√r
;

265 
‰õnd
 
˛ass
 
	gtbb
::
öãrÁ˚6
::
öã∫Æ
::
pùñöe_¥oxy
;

268 
fûãr
* 
	gfûãr_li°
;

271 
fûãr
* 
	gfûãr_íd
;

274 
èsk
* 
	gíd_cou¡î
;

277 
	g©omic
<
	göã∫Æ
::
Tokí
> 
öput_tokís
;

280 
	g©omic
<
	göã∫Æ
::
Tokí
> 
tokí_cou¡î
;

283 
boﬁ
 
	gíd_of_öput
;

286 
boﬁ
 
	ghas_thªad_bound_fûãrs
;

289 
ªmove_fûãr
–
fûãr
& 
fûãr_
 );

292 
__TBB_EXPORTED_METHOD
 
öje˘_tokí
–
èsk
& 
£lf
 );

294 #i‡
__TBB_TASK_GROUP_CONTEXT


296 
˛ór_fûãrs
();

304 
«me•a˚
 
	göãrÁ˚6
 {

306 
«me•a˚
 
	göã∫Æ
 {

307 
	gãm∂©e
<
ty≥«me
 
	gT
,Åy≥«mê
	gU
,Åy≥«mê
	gBody
> 
˛ass
 
	gc⁄¸ëe_fûãr
;

311 ˛as†
	cÊow_c⁄åﬁ
 {

312 
boﬁ
 
	gis_pùñöe_°›≥d
;

313 
Êow_c⁄åﬁ
(Ë{ 
	gis_pùñöe_°›≥d
 = 
Ál£
; }

314 
	gãm∂©e
<
ty≥«me
 
	gT
,Åy≥«mê
	gU
,Åy≥«mê
	gBody
> 
‰õnd
 
˛ass
 
	göã∫Æ
::
c⁄¸ëe_fûãr
;

315 
	gpublic
:

316 
°›
(Ë{ 
is_pùñöe_°›≥d
 = 
åue
; }

320 
«me•a˚
 
	göã∫Æ
 {

322 
	gãm∂©e
<
ty≥«me
 
	gT
> 
	stbb_œrge_obje˘
 {íum { 
	gvÆue
 = (
T
) > (*) }; };

325 #i‡ 
__TBB_CPP11_TYPE_PROPERTIES_PRESENT


326 
	gãm∂©e
<
ty≥«me
 
	gT
> 
	stbb_åivüŒy_c›yabÀ
 {Énum { 
	gvÆue
 = 
°d
::
is_åivüŒy_c›yabÀ
<
T
>::
vÆue
 }; };

327 #ñi‡
__TBB_TR1_TYPE_PROPERTIES_IN_STD_PRESENT


328 
	gãm∂©e
<
ty≥«me
 
	gT
> 
	stbb_åivüŒy_c›yabÀ
 {Énum { 
	gvÆue
 = 
°d
::
has_åivül_c›y_c⁄°ru˘‹
<
T
>::
vÆue
 }; };

331 
	gãm∂©e
<
ty≥«me
 
	gT
> 
	stbb_åivüŒy_c›yabÀ
 {Énum { 
	gvÆue
 = 
Ál£
 }; };

332 
	gãm∂©e
<
ty≥«me
 
	gT
> 
	gtbb_åivüŒy_c›yabÀ
 <T*> {Énum { 
	gvÆue
 = 
åue
 }; };

333 
	gãm∂©e
<> 
	gtbb_åivüŒy_c›yabÀ
 <> {Énum { 
	gvÆue
 = 
åue
 }; };

334 
	gãm∂©e
<> 
	gtbb_åivüŒy_c›yabÀ
 <> {Énum { 
	gvÆue
 = 
åue
 }; };

335 
	gãm∂©e
<> 
	gtbb_åivüŒy_c›yabÀ
 <> {Énum { 
	gvÆue
 = !
tbb_œrge_obje˘
<>::
vÆue
 }; };

336 
	gãm∂©e
<> 
	gtbb_åivüŒy_c›yabÀ
 <> {Énum { 
	gvÆue
 = !
tbb_œrge_obje˘
<>::
vÆue
 }; };

337 
	gãm∂©e
<> 
	gtbb_åivüŒy_c›yabÀ
 <> {Énum { 
	gvÆue
 = !
tbb_œrge_obje˘
<>::
vÆue
 }; };

338 
	gãm∂©e
<> 
	gtbb_åivüŒy_c›yabÀ
 <> {Énum { 
	gvÆue
 = !
tbb_œrge_obje˘
<>::
vÆue
 }; };

339 
	gãm∂©e
<> 
	gtbb_åivüŒy_c›yabÀ
 <> {Énum { 
	gvÆue
 = !
tbb_œrge_obje˘
<>::
vÆue
 }; };

340 
	gãm∂©e
<> 
	gtbb_åivüŒy_c›yabÀ
 <> {Énum { 
	gvÆue
 = !
tbb_œrge_obje˘
<>::
vÆue
 }; };

343 
	gãm∂©e
<
ty≥«me
 
	gT
> 
	sis_œrge_obje˘
 {íum { 
	gvÆue
 = 
tbb_œrge_obje˘
<
T
>::
vÆue
 || !
tbb_åivüŒy_c›yabÀ
<T>::value }; };

345 
	gãm∂©e
<
ty≥«me
 
	gT
, 
	gboﬁ
> 
˛ass
 
	gtokí_hñ≥r
;

348 
	gãm∂©e
<
ty≥«me
 
	gT
>

349 
˛ass
 
	gtokí_hñ≥r
<
	gT
, 
	gåue
> {

350 
	gpublic
:

351 
ty≥«me
 
	ttbb
::
	ttbb_Æloˇt‹
<
	tT
> 
	tÆloˇt‹
;

352 
T
* 
	tpoöãr
;

353 
T
 
	tvÆue_ty≥
;

354 
poöãr
 
¸óã_tokí
(c⁄° 
vÆue_ty≥
 & 
sour˚
) {

355 
poöãr
 
	gouçut_t
 = 
Æloˇt‹
().
Æloˇã
(1);

356  
√w
 (
ouçut_t
Ë
T
(
sour˚
);

358 
	gvÆue_ty≥
 & 
tokí
(
poöãr
 & 
t
Ë{  *
	gt
;}

359 * 
ˇ°_to_void_±r
(
poöãr
 
ªf
Ë{  (*Ë
	gªf
; }

360 
poöãr
 
ˇ°_‰om_void_±r
(* 
ªf
Ë{  (
	gpoöãr
)
	gªf
; }

361 
de°roy_tokí
(
poöãr
 
tokí
) {

362 
Æloˇt‹
().
de°roy
(
tokí
);

363 
Æloˇt‹
().
dóŒoˇã
(
tokí
,1);

368 
	gãm∂©e
<
ty≥«me
 
	gT
>

369 
˛ass
 
	gtokí_hñ≥r
<
	gT
*, 
	gÁl£
 > {

370 
	gpublic
:

371 
T
* 
	tpoöãr
;

372 
T
* 
	tvÆue_ty≥
;

373 
poöãr
 
¸óã_tokí
(c⁄° 
vÆue_ty≥
 & 
sour˚
Ë{  
	gsour˚
; }

374 
	gvÆue_ty≥
 & 
tokí
(
poöãr
 & 
t
Ë{  
	gt
;}

375 * 
ˇ°_to_void_±r
(
poöãr
 
ªf
Ë{  (*)
	gªf
; }

376 
poöãr
 
ˇ°_‰om_void_±r
(* 
ªf
Ë{  (
	gpoöãr
)
	gªf
; }

377 
de°roy_tokí
–
poöãr
 ) {}

381 
	gãm∂©e
<
ty≥«me
 
	gT
>

382 
˛ass
 
	gtokí_hñ≥r
<
	gT
, 
	gÁl£
> {

384 
T
 
	ga˘uÆ_vÆue
;

385 * 
	gvoid_ovîœy
;

386 } 
	tty≥_to_void_±r_m≠
;

387 
	gpublic
:

388 
T
 
	tpoöãr
;

389 
T
 
	tvÆue_ty≥
;

390 
poöãr
 
¸óã_tokí
(c⁄° 
vÆue_ty≥
 & 
sour˚
) {

391  
	gsour˚
; }

392 
	gvÆue_ty≥
 & 
tokí
(
poöãr
 & 
t
Ë{  
	gt
;}

393 * 
ˇ°_to_void_±r
(
poöãr
 
ªf
) {

394 
ty≥_to_void_±r_m≠
 
	gmym≠
;

395 
	gmym≠
.
	gvoid_ovîœy
 = 
NULL
;

396 
	gmym≠
.
	ga˘uÆ_vÆue
 = 
ªf
;

397  
	gmym≠
.
	gvoid_ovîœy
;

399 
poöãr
 
ˇ°_‰om_void_±r
(* 
ªf
) {

400 
ty≥_to_void_±r_m≠
 
	gmym≠
;

401 
	gmym≠
.
	gvoid_ovîœy
 = 
ªf
;

402  
	gmym≠
.
	ga˘uÆ_vÆue
;

404 
de°roy_tokí
–
poöãr
 ) {}

407 
	gãm∂©e
<
ty≥«me
 
	gT
,Åy≥«mê
	gU
,Åy≥«mê
	gBody
>

408 ˛as†
	cc⁄¸ëe_fûãr
: 
public
 
tbb
::
fûãr
 {

409 c⁄° 
Body
& 
my_body
;

410 
	gtokí_hñ≥r
<
	tT
,
	tis_œrge_obje˘
<T>::
	tvÆue
 > 
	tt_hñ≥r
;

411 
ty≥«me
 
	tt_hñ≥r
::
	tpoöãr
 
	tt_poöãr
;

412 
	gtokí_hñ≥r
<
	tU
,
	tis_œrge_obje˘
<U>::
	tvÆue
 > 
	tu_hñ≥r
;

413 
ty≥«me
 
	tu_hñ≥r
::
	tpoöãr
 
	tu_poöãr
;

415  * 
›î©‹
()(* 
	göput
) {

416 
t_poöãr
 
	gãmp_öput
 = 
t_hñ≥r
::
ˇ°_‰om_void_±r
(
öput
);

417 
u_poöãr
 
	gouçut_u
 = 
u_hñ≥r
::
¸óã_tokí
(
my_body
(
t_hñ≥r
::
tokí
(
ãmp_öput
)));

418 
	gt_hñ≥r
::
de°roy_tokí
(
ãmp_öput
);

419  
	gu_hñ≥r
::
ˇ°_to_void_±r
(
ouçut_u
);

422  
föÆize
(* 
öput
) {

423 
t_poöãr
 
	gãmp_öput
 = 
t_hñ≥r
::
ˇ°_‰om_void_±r
(
öput
);

424 
	gt_hñ≥r
::
de°roy_tokí
(
ãmp_öput
);

427 
	gpublic
:

428 
c⁄¸ëe_fûãr
(
tbb
::
fûãr
::
mode
 
fûãr_mode
, c⁄° 
Body
& 
body
Ë: fûãr(fûãr_mode), 
my_body
(body) {}

432 
	gãm∂©e
<
ty≥«me
 
	gU
,Åy≥«mê
	gBody
>

433 
˛ass
 
	gc⁄¸ëe_fûãr
<,
	gU
,
	gBody
>: 
public
 
fûãr
 {

434 c⁄° 
Body
& 
my_body
;

435 
	gtokí_hñ≥r
<
	tU
, 
	tis_œrge_obje˘
<U>::
	tvÆue
 > 
	tu_hñ≥r
;

436 
ty≥«me
 
	tu_hñ≥r
::
	tpoöãr
 
	tu_poöãr
;

438  * 
›î©‹
()(*) {

439 
Êow_c⁄åﬁ
 
	gc⁄åﬁ
;

440 
u_poöãr
 
	gouçut_u
 = 
u_hñ≥r
::
¸óã_tokí
(
my_body
(
c⁄åﬁ
));

441 if(
	gc⁄åﬁ
.
	gis_pùñöe_°›≥d
) {

442 
	gu_hñ≥r
::
de°roy_tokí
(
ouçut_u
);

443 
£t_íd_of_öput
();

444  
	gNULL
;

446  
	gu_hñ≥r
::
ˇ°_to_void_±r
(
ouçut_u
);

449 
	gpublic
:

450 
c⁄¸ëe_fûãr
(
tbb
::
fûãr
::
mode
 
fûãr_mode
, c⁄° 
Body
& 
body
) :

451 
fûãr
(
°©ic_ˇ°
<
tbb
::fûãr::
mode
>(
fûãr_mode
 | 
fûãr_may_emô_nuŒ
)),

452 
my_body
(
body
)

456 
	gãm∂©e
<
ty≥«me
 
	gT
,Åy≥«mê
	gBody
>

457 
˛ass
 
	gc⁄¸ëe_fûãr
<
	gT
,,
	gBody
>: 
public
 
fûãr
 {

458 c⁄° 
Body
& 
my_body
;

459 
	gtokí_hñ≥r
<
	tT
, 
	tis_œrge_obje˘
<T>::
	tvÆue
 > 
	tt_hñ≥r
;

460 
ty≥«me
 
	tt_hñ≥r
::
	tpoöãr
 
	tt_poöãr
;

462  * 
›î©‹
()(* 
	göput
) {

463 
t_poöãr
 
	gãmp_öput
 = 
t_hñ≥r
::
ˇ°_‰om_void_±r
(
öput
);

464 
my_body
(
t_hñ≥r
::
tokí
(
ãmp_öput
));

465 
	gt_hñ≥r
::
de°roy_tokí
(
ãmp_öput
);

466  
	gNULL
;

468  
föÆize
(* 
öput
) {

469 
t_poöãr
 
	gãmp_öput
 = 
t_hñ≥r
::
ˇ°_‰om_void_±r
(
öput
);

470 
	gt_hñ≥r
::
de°roy_tokí
(
ãmp_öput
);

473 
	gpublic
:

474 
c⁄¸ëe_fûãr
(
tbb
::
fûãr
::
mode
 
fûãr_mode
, c⁄° 
Body
& 
body
Ë: fûãr(fûãr_mode), 
my_body
(body) {}

477 
	gãm∂©e
<
ty≥«me
 
	gBody
>

478 
˛ass
 
	gc⁄¸ëe_fûãr
<,,
	gBody
>: 
public
 
fûãr
 {

479 c⁄° 
Body
& 
my_body
;

482  * 
›î©‹
()(*) {

483 
Êow_c⁄åﬁ
 
	gc⁄åﬁ
;

484 
my_body
(
c⁄åﬁ
);

485 * 
	gouçut
 = 
c⁄åﬁ
.
is_pùñöe_°›≥d
 ? 
NULL
 : (*)(
öçå_t
)-1;

486  
	gouçut
;

488 
	gpublic
:

489 
c⁄¸ëe_fûãr
(
fûãr
::
mode
 
fûãr_mode
, c⁄° 
Body
& 
body
Ë: fûãr(fûãr_mode), 
my_body
(body) {}

494 ˛as†
	cpùñöe_¥oxy
 {

495 
	gtbb
::
pùñöe
 
my_pùe
;

496 
	gpublic
:

497 
pùñöe_¥oxy
–c⁄° 
fûãr_t
<,>& 
fûãr_chaö
 );

498 ~
pùñöe_¥oxy
() {

499  
fûãr
* 
	gf
 = 
my_pùe
.
fûãr_li°
 )

500 
dñëe
 
f
;

502 
	gtbb
::
pùñöe
* 
›î©‹
->(Ë{  &
my_pùe
; }

507 ˛as†
	cfûãr_node
: 
tbb
::
öã∫Æ
::
no_c›y
 {

509 
tbb
::
©omic
<
öçå_t
> 
ªf_cou¡
;

510 
	g¥Ÿe˘ed
:

511 
fûãr_node
() {

512 
ªf_cou¡
 = 0;

513 #ifde‡
__TBB_TEST_FILTER_NODE_COUNT


514 ++(
	g__TBB_TEST_FILTER_NODE_COUNT
);

517 
	gpublic
:

519 
vútuÆ
 
add_to
–
pùñöe
& ) = 0;

521 
add_ªf
(Ë{++
	gªf_cou¡
;}

523 
ªmove_ªf
() {

524 
__TBB_ASSERT
(
ªf_cou¡
>0,"ref_count underflow");

525 if–--
	gªf_cou¡
==0 )

526 
dñëe
 
this
;

528 
	gvútuÆ
 ~
fûãr_node
() {

529 #ifde‡
__TBB_TEST_FILTER_NODE_COUNT


530 --(
	g__TBB_TEST_FILTER_NODE_COUNT
);

536 
	gãm∂©e
<
ty≥«me
 
	gT
,Åy≥«mê
	gU
,Åy≥«mê
	gBody
>

537 ˛as†
	cfûãr_node_Àaf
: 
public
 
fûãr_node
 {

538 c⁄° 
tbb
::
fûãr
::
mode
 mode;

539 c⁄° 
Body
 
	gbody
;

540  
add_to
–
pùñöe
& 
p
 ) {

541 
	gc⁄¸ëe_fûãr
<
	gT
,
	gU
,
	gBody
>* 
	gf
 = 
√w
 
c⁄¸ëe_fûãr
<
T
,U,Body>(
	gmode
,
	gbody
);

542 
	gp
.
add_fûãr
–*
f
 );

544 
	gpublic
:

545 
fûãr_node_Àaf
–
tbb
::
fûãr
::
mode
 
m
, c⁄° 
Body
& 
b
 ) : mode(m), 
body
(b) {}

549 ˛as†
	cfûãr_node_joö
: 
public
 
fûãr_node
 {

550 
‰õnd
 
˛ass
 
fûãr_node
;

551 
	gfûãr_node
& 
	gÀ·
;

552 
	gfûãr_node
& 
	gright
;

553  ~
fûãr_node_joö
() {

554 
	gÀ·
.
ªmove_ªf
();

555 
	gright
.
ªmove_ªf
();

557  
add_to
–
pùñöe
& 
p
 ) {

558 
	gÀ·
.
add_to
(
p
);

559 
	gright
.
add_to
(
p
);

561 
	gpublic
:

562 
fûãr_node_joö
–
fûãr_node
& 
x
, fûãr_node& 
y
 ) : 
À·
(x), 
right
(y) {

563 
	gÀ·
.
add_ªf
();

564 
	gright
.
add_ªf
();

572 
	gãm∂©e
<
ty≥«me
 
	gT
,Åy≥«mê
	gU
,Åy≥«mê
	gBody
>

573 
	gfûãr_t
<
	gT
,
	gU
> 
make_fûãr
(
tbb
::
fûãr
::
mode
 mode, c⁄° 
Body
& 
body
) {

574  
√w
 
	göã∫Æ
::
fûãr_node_Àaf
<
T
,
	gU
,
	gBody
>(
	gmode
, 
	gbody
);

577 
	gãm∂©e
<
ty≥«me
 
	gT
,Åy≥«mê
	gV
,Åy≥«mê
	gU
>

578 
	gfûãr_t
<
	gT
,
	gU
> 
	g›î©‹
& (c⁄° fûãr_t<T,
	gV
>& 
	gÀ·
, c⁄° fûãr_t<V,U>& 
	gright
) {

579 
__TBB_ASSERT
(
À·
.
roŸ
,"cannot use default-constructed filter_tásÜeftárgument of '&'");

580 
__TBB_ASSERT
(
right
.
roŸ
,"cannot use default-constructed filter_tásÑightárgument of '&'");

581  
√w
 
	göã∫Æ
::
fûãr_node_joö
(*
À·
.
roŸ
,*
right
.root);

585 
	gãm∂©e
<
ty≥«me
 
	gT
,Åy≥«mê
	gU
>

586 ˛as†
	cfûãr_t
 {

587 
	göã∫Æ
::
	tfûãr_node
 filter_node;

588 
fûãr_node
* 
	groŸ
;

589 
fûãr_t
–
fûãr_node
* 
roŸ_
 ) : 
roŸ
(root_) {

590 
roŸ
->
add_ªf
();

592 
‰õnd
 
˛ass
 
	göã∫Æ
::
pùñöe_¥oxy
;

593 
	gãm∂©e
<
ty≥«me
 
	gT_
,Åy≥«mê
	gU_
,Åy≥«mê
	gBody
>

594 
‰õnd
 
	gfûãr_t
<
	gT_
,
	gU_
> 
make_fûãr
(
tbb
::
fûãr
::
mode
, c⁄° 
Body
& );

595 
	gãm∂©e
<
ty≥«me
 
	gT_
,Åy≥«mê
	gV_
,Åy≥«mê
	gU_
>

596 
‰õnd
 
	gfûãr_t
<
	gT_
,
	gU_
> 
	g›î©‹
& (c⁄° fûãr_t<T_,
	gV_
>& , const filter_t<V_,U_>& );

597 
	gpublic
:

598 
fûãr_t
(Ë: 
roŸ
(
NULL
) {}

599 
fûãr_t
–c⁄° fûãr_t<
T
,
U
>& 
rhs
 ) : 
roŸ
(rhs.root) {

600 if–
roŸ
 )ÑoŸ->
add_ªf
();

602 
	gãm∂©e
<
ty≥«me
 
	gBody
>

603 
fûãr_t
–
tbb
::
fûãr
::
mode
 mode, c⁄° 
Body
& 
body
 ) :

604 
roŸ
–
√w
 
öã∫Æ
::
fûãr_node_Àaf
<
T
,
U
,
Body
>(
mode
, 
body
) ) {

605 
	groŸ
->
add_ªf
();

608 
	g›î©‹
=–c⁄° 
fûãr_t
<
T
,
	gU
>& 
	grhs
 ) {

611 
fûãr_node
* 
	gﬁd
 = 
roŸ
;

612 
	groŸ
 = 
rhs
.
roŸ
;

613 if–
	groŸ
 )ÑoŸ->
add_ªf
();

614 if–
	gﬁd
 ) old->
ªmove_ªf
();

616 ~
fûãr_t
() {

617 if–
	groŸ
 )ÑoŸ->
ªmove_ªf
();

619 
˛ór
() {

621 if–
	groŸ
 ) {

622 
fûãr_node
* 
	gﬁd
 = 
roŸ
;

623 
	groŸ
 = 
NULL
;

624 
	gﬁd
->
ªmove_ªf
();

629 
ölöe
 
	göã∫Æ
::
pùñöe_¥oxy
::pùñöe_¥oxy–c⁄° 
fûãr_t
<,>& 
fûãr_chaö
 ) : 
my_pùe
() {

630 
__TBB_ASSERT
–
fûãr_chaö
.
roŸ
, "cannotápplyÖarallel_pipelineÅo default-constructed filter_t" );

631 
	gfûãr_chaö
.
	groŸ
->
add_to
(
my_pùe
);

634 
ölöe
 
∑øŒñ_pùñöe
(
size_t
 
max_numbî_of_live_tokís
, c⁄° 
fûãr_t
<,>& 
fûãr_chaö


635 #i‡
__TBB_TASK_GROUP_CONTEXT


636 , 
tbb
::
èsk_group_c⁄ãxt
& 
c⁄ãxt


639 
öã∫Æ
::
pùñöe_¥oxy
 
pùe
(
fûãr_chaö
);

641 
	gpùe
->
run
(
max_numbî_of_live_tokís


642 #i‡
__TBB_TASK_GROUP_CONTEXT


643 , 
c⁄ãxt


648 #i‡
__TBB_TASK_GROUP_CONTEXT


649 
ölöe
 
∑øŒñ_pùñöe
(
size_t
 
max_numbî_of_live_tokís
, c⁄° 
fûãr_t
<,>& 
fûãr_chaö
) {

650 
	gtbb
::
èsk_group_c⁄ãxt
 
c⁄ãxt
;

651 
∑øŒñ_pùñöe
(
max_numbî_of_live_tokís
, 
fûãr_chaö
, 
c⁄ãxt
);

657 
usög
 
	göãrÁ˚6
::
Êow_c⁄åﬁ
;

658 
usög
 
	göãrÁ˚6
::
fûãr_t
;

659 
usög
 
	göãrÁ˚6
::
make_fûãr
;

660 
usög
 
	göãrÁ˚6
::
∑øŒñ_pùñöe
;

	@viper/concurrentqueue-src/benchmarks/tbb/private_server.cpp

21 
	~"rml_tbb.h
"

22 
	~"../£rvî/thªad_m⁄ô‹.h
"

23 
	~"tbb/©omic.h
"

24 
	~"tbb/ˇche_Æig√d_Æloˇt‹.h
"

25 
	~"scheduÀr_comm⁄.h
"

26 
	~"govîn‹.h
"

27 
	~"tbb_misc.h
"

29 
usög
 
	grml
::
öã∫Æ
::
thªad_m⁄ô‹
;

31 
«me•a˚
 
	gtbb
 {

32 
«me•a˚
 
	göã∫Æ
 {

33 
«me•a˚
 
	grml
 {

35 
	gthªad_m⁄ô‹
::
	th™dÀ_ty≥
 
	tthªad_h™dÀ
;

37 
˛ass
 
	g¥iv©e_£rvî
;

39 ˛as†
	c¥iv©e_w‹kî
: 
no_c›y
 {

47 
	e°©e_t
 {

49 
°_öô
,

51 
	g°_°¨tög
,

53 
	g°_n‹mÆ
,

55 
	g°_quô


57 
	g©omic
<
	g°©e_t
> 
	gmy_°©e
;

60 
	g¥iv©e_£rvî
& 
	gmy_£rvî
;

63 
	gtbb_˛õ¡
& 
	gmy_˛õ¡
;

66 c⁄° 
size_t
 
	gmy_ödex
;

71 
thªad_m⁄ô‹
 
	gmy_thªad_m⁄ô‹
;

74 
thªad_h™dÀ
 
	gmy_h™dÀ
;

77 
¥iv©e_w‹kî
* 
	gmy_√xt
;

79 
‰õnd
 
˛ass
 
	g¥iv©e_£rvî
;

82 
run
();

85 
wake_‹_œunch
();

88 
°¨t_shutdown
();

90 
__RML_DECL_THREAD_ROUTINE
 
thªad_routöe
–* 
¨g
 );

92 
ªÀa£_h™dÀ
(
thªad_h™dÀ
 
my_h™dÀ
);

94 
	g¥Ÿe˘ed
:

95 
¥iv©e_w‹kî
–
¥iv©e_£rvî
& 
£rvî
, 
tbb_˛õ¡
& 
˛õ¡
, c⁄° 
size_t
 
i
 ) :

96 
my_£rvî
(
£rvî
),

97 
my_˛õ¡
(
˛õ¡
),

98 
my_ödex
(
i
)

100 
	gmy_°©e
 = 
°_öô
;

104 c⁄° 
size_t
 
	gˇche_löe_size
 = 
tbb
::
öã∫Æ
::
NFS_MaxLöeSize
;

107 #i‡
_MSC_VER
 && !
deföed
(
__INTEL_COMPILER
)

109 #¥agm®
w¨nög
(
push
)

110 #¥agm®
w¨nög
(
dißbÀ
:4510 4610)

112 ˛as†
	c∑dded_¥iv©e_w‹kî
: 
public
 
¥iv©e_w‹kî
 {

113 
∑d
[
ˇche_löe_size
 - (
¥iv©e_w‹kî
)%cache_line_size];

114 
	gpublic
:

115 
∑dded_¥iv©e_w‹kî
–
¥iv©e_£rvî
& 
£rvî
, 
tbb_˛õ¡
& 
˛õ¡
, c⁄° 
size_t
 
i
 )

116 : 
¥iv©e_w‹kî
(
£rvî
,
˛õ¡
,
i
Ë{ 
suµªss_unu£d_w¨nög
(
∑d
); }

118 #i‡
_MSC_VER
 && !
deföed
(
__INTEL_COMPILER
)

119 #¥agm®
w¨nög
(
p›
)

122 
˛ass
 
	g¥iv©e_£rvî
: 
public
 
tbb_£rvî
, 
	gno_c›y
 {

123 
	gtbb_˛õ¡
& 
	gmy_˛õ¡
;

126 c⁄° 
	gtbb_˛õ¡
::
size_ty≥
 
my_n_thªad
;

129 c⁄° 
size_t
 
	gmy_°ack_size
;

136 
	g©omic
<> 
	gmy_¶ack
;

139 
	g©omic
<> 
	gmy_ªf_cou¡
;

141 
∑dded_¥iv©e_w‹kî
* 
	gmy_thªad_¨øy
;

144 
	gtbb
::
©omic
<
¥iv©e_w‹kî
*> 
my_a¶ìp_li°_roŸ
;

147 
scheduÀr_muãx_ty≥
 
	ta¶ìp_li°_muãx_ty≥
;

148 
a¶ìp_li°_muãx_ty≥
 
	gmy_a¶ìp_li°_muãx
;

150 #i‡
TBB_USE_ASSERT


151 
	g©omic
<> 
	gmy_√t_¶ack_ªque°s
;

157 
¥›ag©e_chaö_ªa˘i⁄
() {

159 if–
	gmy_a¶ìp_li°_roŸ
 )

160 
wake_some
(0);

164 
boﬁ
 
åy_ö£π_ö_a¶ìp_li°
–
¥iv©e_w‹kî
& 
t
 );

167 
wake_some
–
addôi⁄Æ_¶ack
 );

169 
	gvútuÆ
 ~
¥iv©e_£rvî
();

171 
ªmove_£rvî_ªf
() {

172 if–--
	gmy_ªf_cou¡
==0 ) {

173 
my_˛õ¡
.
acknowÀdge_˛o£_c⁄√˘i⁄
();

174 
	gthis
->~
¥iv©e_£rvî
();

175 
	gtbb
::
ˇche_Æig√d_Æloˇt‹
<
¥iv©e_£rvî
>().
dóŒoˇã
–
this
, 1 );

179 
‰õnd
 
˛ass
 
	g¥iv©e_w‹kî
;

180 
	gpublic
:

181 
¥iv©e_£rvî
–
tbb_˛õ¡
& 
˛õ¡
 );

183  
vîsi⁄_ty≥
 
vîsi⁄
() const {

187  
ªque°_˛o£_c⁄√˘i⁄
–
boﬁ
 ) {

188  
size_t
 
	gi
=0; i<
	gmy_n_thªad
; ++i )

189 
	gmy_thªad_¨øy
[
i
].
°¨t_shutdown
();

190 
ªmove_£rvî_ªf
();

193  
yõld
(Ë{
__TBB_Yõld
();}

195  
ödïídít_thªad_numbî_ch™ged
–Ë{
__TBB_ASSERT
(
Ál£
,
NULL
);}

197  
deÁu…_c⁄cuºícy
(Ëc⁄° {  
	ggovîn‹
::
deÁu…_num_thªads
() - 1; }

199  
adju°_job_cou¡_e°im©e
–
dñè
 );

201 #i‡
_WIN32
||
_WIN64


202  
ªgi°î_ma°î
 ( ::
rml
::
£rvî
::
executi⁄_ªsour˚_t
& ) {}

203  
uƒegi°î_ma°î
 ( ::
rml
::
£rvî
::
executi⁄_ªsour˚_t
 ) {}

210 #i‡
_MSC_VER
 && !
deföed
(
__INTEL_COMPILER
)

212 #¥agm®
w¨nög
(
push
)

213 #¥agm®
w¨nög
(
dißbÀ
:4189)

215 #i‡
__MINGW32__
 && 
__GNUC__
==4 &&
__GNUC_MINOR__
>=2 && !
__MINGW64__


217 
__©åibuã__
((
f‹˚_Æign_¨g_poöãr
))

219 
__RML_DECL_THREAD_ROUTINE
 
	g¥iv©e_w‹kî
::
thªad_routöe
–* 
¨g
 ) {

220 
¥iv©e_w‹kî
* 
£lf
 = 
°©ic_ˇ°
<¥iv©e_w‹kî*>(
¨g
);

221 
AVOID_64K_ALIASING
–
£lf
->
my_ödex
 );

222 #i‡
_XBOX


223 
	gHWThªadIndex
 = 
__TBB_XBOX360_GëH¨dw¨eThªadIndex
(
i
);

224 
XSëThªadPro˚ss‹
(
GëCuºítThªad
(), 
HWThªadIndex
);

226 
	g£lf
->
run
();

229 #i‡
_MSC_VER
 && !
deföed
(
__INTEL_COMPILER
)

230 #¥agm®
w¨nög
(
p›
)

233 
	g¥iv©e_w‹kî
::
ªÀa£_h™dÀ
(
thªad_h™dÀ
 
h™dÀ
) {

234 i‡(
govîn‹
::
√edsWaôW‹kîs
())

235 
thªad_m⁄ô‹
::
joö
(
h™dÀ
);

237 
	gthªad_m⁄ô‹
::
dëach_thªad
(
h™dÀ
);

240 
	g¥iv©e_w‹kî
::
°¨t_shutdown
() {

241 
°©e_t
 
s
;

244 
	gs
 = 
my_°©e
;

245 
__TBB_ASSERT
–
s
!=
°_quô
, 
NULL
 );

246 }  
	gmy_°©e
.
com∑ª_™d_sw≠
–
°_quô
, 
s
 )!=s );

247 if–
	gs
==
°_n‹mÆ
 || 
s
==
°_°¨tög
 ) {

251 
my_thªad_m⁄ô‹
.
nŸify
();

255 i‡(
	gs
==
°_n‹mÆ
)

256 
ªÀa£_h™dÀ
(
my_h™dÀ
);

257 } if–
	gs
==
°_öô
 ) {

259 
my_£rvî
.
ªmove_£rvî_ªf
();

263 
	g¥iv©e_w‹kî
::
run
() {

264 
my_£rvî
.
¥›ag©e_chaö_ªa˘i⁄
();

270 ::
rml
::
job
& 
j
 = *
my_˛õ¡
.
¸óã_⁄e_job
();

271  
	gmy_°©e
!=
°_quô
 ) {

272 if–
my_£rvî
.
my_¶ack
>=0 ) {

273 
my_˛õ¡
.
¥o˚ss
(
j
);

275 
	gthªad_m⁄ô‹
::
cookõ
 
c
;

277 
	gmy_thªad_m⁄ô‹
.
¥ï¨e_waô
(
c
);

279 if–
	gmy_°©e
!=
°_quô
 && 
my_£rvî
.
åy_ö£π_ö_a¶ìp_li°
(*
this
) ) {

280 
my_thªad_m⁄ô‹
.
commô_waô
(
c
);

281 
	gmy_£rvî
.
¥›ag©e_chaö_ªa˘i⁄
();

284 
	gmy_thªad_m⁄ô‹
.
ˇn˚l_waô
();

288 
	gmy_˛õ¡
.
˛ónup
(
j
);

290 ++
	gmy_£rvî
.
	gmy_¶ack
;

291 
	gmy_£rvî
.
ªmove_£rvî_ªf
();

294 
ölöe
 
	g¥iv©e_w‹kî
::
wake_‹_œunch
() {

295 if–
my_°©e
==
°_öô
 && my_°©e.
com∑ª_™d_sw≠
–
°_°¨tög
, st_init )==st_init ) {

297 #i‡
USE_WINTHREAD


298 
my_h™dÀ
 = 
thªad_m⁄ô‹
::
œunch
–
thªad_routöe
, 
this
, 
my_£rvî
.
my_°ack_size
, &this->
my_ödex
 );

299 #ñi‡
USE_PTHREAD


301 
afföôy_hñ≥r
 
	gÂa
;

302 
	gÂa
.
¥Ÿe˘_afföôy_mask
();

303 
	gmy_h™dÀ
 = 
thªad_m⁄ô‹
::
œunch
–
thªad_routöe
, 
this
, 
my_£rvî
.
my_°ack_size
 );

307 
°©e_t
 
	gs
 = 
my_°©e
.
com∑ª_™d_sw≠
–
°_n‹mÆ
, 
°_°¨tög
 );

308 i‡(
	g°_°¨tög
 !
s
) {

312 
__TBB_ASSERT
–
s
==
°_quô
, 
NULL
 );

313 
ªÀa£_h™dÀ
(
my_h™dÀ
);

317 
	gmy_thªad_m⁄ô‹
.
nŸify
();

323 
	g¥iv©e_£rvî
::
¥iv©e_£rvî
–
tbb_˛õ¡
& 
˛õ¡
 ) :

324 
my_˛õ¡
(
˛õ¡
),

325 
my_n_thªad
(
˛õ¡
.
max_job_cou¡
()),

326 
my_°ack_size
(
˛õ¡
.
mö_°ack_size
()),

327 
my_thªad_¨øy
(
NULL
)

329 
	gmy_ªf_cou¡
 = 
my_n_thªad
+1;

330 
	gmy_¶ack
 = 0;

331 #i‡
TBB_USE_ASSERT


332 
	gmy_√t_¶ack_ªque°s
 = 0;

334 
	gmy_a¶ìp_li°_roŸ
 = 
NULL
;

335 
	gmy_thªad_¨øy
 = 
tbb
::
ˇche_Æig√d_Æloˇt‹
<
∑dded_¥iv©e_w‹kî
>().
Æloˇã
–
my_n_thªad
 );

336 
mem£t
–
my_thªad_¨øy
, 0, (
¥iv©e_w‹kî
)*
my_n_thªad
 );

337  
size_t
 
	gi
=0; i<
	gmy_n_thªad
; ++i ) {

338 
¥iv©e_w‹kî
* 
	gt
 = 
√w
–&
my_thªad_¨øy
[
i
] ) 
∑dded_¥iv©e_w‹kî
–*
this
, 
˛õ¡
, i );

339 
	gt
->
	gmy_√xt
 = 
my_a¶ìp_li°_roŸ
;

340 
	gmy_a¶ìp_li°_roŸ
 = 
t
;

344 
	g¥iv©e_£rvî
::~
¥iv©e_£rvî
() {

345 
__TBB_ASSERT
–
my_√t_¶ack_ªque°s
==0, 
NULL
 );

346  
size_t
 
	gi
=
my_n_thªad
; i--; )

347 
	gmy_thªad_¨øy
[
i
].~
∑dded_¥iv©e_w‹kî
();

348 
	gtbb
::
ˇche_Æig√d_Æloˇt‹
<
∑dded_¥iv©e_w‹kî
>().
dóŒoˇã
–
my_thªad_¨øy
, 
my_n_thªad
 );

349 
	gtbb
::
öã∫Æ
::
pois⁄_poöãr
–
my_thªad_¨øy
 );

352 
ölöe
 
boﬁ
 
	g¥iv©e_£rvî
::
åy_ö£π_ö_a¶ìp_li°
–
¥iv©e_w‹kî
& 
t
 ) {

353 
a¶ìp_li°_muãx_ty≥
::
sc›ed_lock
 
lock
;

354 if–!
	glock
.
åy_acquúe
(
my_a¶ìp_li°_muãx
) )

355  
	gÁl£
;

358 
	gk
 = ++
my_¶ack
;

359 if–
	gk
<=0 ) {

360 
t
.
my_√xt
 = 
my_a¶ìp_li°_roŸ
;

361 
	gmy_a¶ìp_li°_roŸ
 = &
t
;

362  
	gåue
;

364 --
	gmy_¶ack
;

365  
	gÁl£
;

369 
	g¥iv©e_£rvî
::
wake_some
–
addôi⁄Æ_¶ack
 ) {

370 
__TBB_ASSERT
–
addôi⁄Æ_¶ack
>=0, 
NULL
 );

371 
¥iv©e_w‹kî
* 
	gwakì
[2];

372 
¥iv©e_w‹kî
**
	gw
 = 
wakì
;

374 
	ga¶ìp_li°_muãx_ty≥
::
sc›ed_lock
 
lock
(
my_a¶ìp_li°_muãx
);

375  
	gmy_a¶ìp_li°_roŸ
 && 
	gw
<
	gwakì
+2 ) {

376 if–
	gaddôi⁄Æ_¶ack
>0 ) {

377 i‡(
	gaddôi⁄Æ_¶ack
+
	gmy_¶ack
<=0)

379 --
	gaddôi⁄Æ_¶ack
;

382 
	gﬁd
;

384 
	gﬁd
 = 
my_¶ack
;

385 if–
	gﬁd
<=0 ) 
d⁄e
;

386 }  
	gmy_¶ack
.
com∑ª_™d_sw≠
(
ﬁd
-1,old)!=old );

389 
	gmy_a¶ìp_li°_roŸ
 = (*
w
++ = 
my_a¶ìp_li°_roŸ
)->
my_√xt
;

391 if–
	gaddôi⁄Æ_¶ack
 ) {

393 
	gmy_¶ack
 +
addôi⁄Æ_¶ack
;

396 
	gd⁄e
:

397  
w
>
wakì
 )

398 (*--
w
)->
wake_‹_œunch
();

401 
	g¥iv©e_£rvî
::
adju°_job_cou¡_e°im©e
–
dñè
 ) {

402 #i‡
TBB_USE_ASSERT


403 
my_√t_¶ack_ªque°s
+=
dñè
;

405 if–
	gdñè
<0 ) {

406 
	gmy_¶ack
+=
dñè
;

407 } if–
	gdñè
>0 ) {

408 
wake_some
–
dñè
 );

413 
tbb_£rvî
* 
make_¥iv©e_£rvî
–
tbb_˛õ¡
& 
˛õ¡
 ) {

414  
√w
–
tbb
::
ˇche_Æig√d_Æloˇt‹
<
¥iv©e_£rvî
>().
Æloˇã
(1ËË¥iv©e_£rvî(
˛õ¡
);

	@viper/concurrentqueue-src/benchmarks/tbb/queuing_mutex.cpp

21 
	~"tbb/queuög_muãx.h
"

22 
	~"tbb/tbb_machöe.h
"

23 
	~"tbb/tbb_°ddef.h
"

24 
	~"tbb_misc.h
"

25 
	~"ôt_nŸify.h
"

27 
«me•a˚
 
	gtbb
 {

29 
usög
 
«me•a˚
 
	göã∫Æ
;

32 
	gqueuög_muãx
::
sc›ed_lock
::
acquúe
–
queuög_muãx
& 
m
 )

34 
__TBB_ASSERT
–!
this
->
muãx
, "scoped_lock isálready holdingá mutex");

38 
	gmuãx
 = &
m
;

39 
	g√xt
 = 
NULL
;

40 
	ggoög
 = 0;

44 
sc›ed_lock
* 
	g¥ed
 = 
m
.
q_èû
.
„tch_™d_°‹e
<
tbb
::
ªÀa£
>(
this
);

45 if–
	g¥ed
 ) {

46 
ITT_NOTIFY
(
sync_¥ï¨e
, 
muãx
);

47 #i‡
TBB_USE_ASSERT


48 
__TBB_c⁄åﬁ_c⁄si°ícy_hñ≥r
();

49 
__TBB_ASSERT
–!
¥ed
->
√xt
, "theÖredecessor hasánother successor!");

51 
	g¥ed
->
	g√xt
 = 
this
;

52 
•ö_waô_whûe_eq
–
goög
, 0ul );

54 
ITT_NOTIFY
(
sync_acquúed
, 
muãx
);

58 
__TBB_lﬂd_wôh_acquúe
(
goög
);

62 
boﬁ
 
	gqueuög_muãx
::
sc›ed_lock
::
åy_acquúe
–
queuög_muãx
& 
m
 )

64 
__TBB_ASSERT
–!
this
->
muãx
, "scoped_lock isálready holdingá mutex");

68 
	g√xt
 = 
NULL
;

69 
	ggoög
 = 0;

73 if–
	gm
.
	gq_èû
.
	gcom∑ª_™d_sw≠
<
	gtbb
::
ªÀa£
>(
this
, 
	gNULL
) )

74  
	gÁl£
;

79 
__TBB_lﬂd_wôh_acquúe
(
goög
);

80 
	gmuãx
 = &
m
;

81 
ITT_NOTIFY
(
sync_acquúed
, 
muãx
);

82  
	gåue
;

86 
	gqueuög_muãx
::
sc›ed_lock
::
ªÀa£
( )

88 
__TBB_ASSERT
(
this
->
muãx
!=
NULL
, "noÜockácquired");

90 
ITT_NOTIFY
(
sync_ªÀasög
, 
muãx
);

91 if–!
	g√xt
 ) {

92 if–
	gthis
 =
muãx
->
q_èû
.
com∑ª_™d_sw≠
<
tbb
::
ªÀa£
>(
NULL
,Åhis) ) {

94 
	gd⁄e
;

97 
•ö_waô_whûe_eq
–
√xt
, (
sc›ed_lock
*)0 );

99 
__TBB_ASSERT
(
√xt
,
NULL
);

100 
__TBB_°‹e_wôh_ªÀa£
(
√xt
->
goög
, 1);

101 
	gd⁄e
:

102 
öôülize
();

105 
	gqueuög_muãx
::
öã∫Æ_c⁄°ru˘
() {

106 
ITT_SYNC_CREATE
(
this
, 
_T
("tbb::queuing_mutex"), _T(""));

	@viper/concurrentqueue-src/benchmarks/tbb/queuing_mutex.h

21 #i‚de‡
__TBB_queuög_muãx_H


22 
	#__TBB_queuög_muãx_H


	)

24 
	~"tbb_c⁄fig.h
"

26 #i‡!
TBB_USE_EXCEPTIONS
 && 
_MSC_VER


28 #¥agm®
w¨nög
 (
push
)

29 #¥agm®
w¨nög
 (
dißbÀ
: 4530)

32 
	~<c°rög
>

34 #i‡!
TBB_USE_EXCEPTIONS
 && 
_MSC_VER


35 #¥agm®
w¨nög
 (
p›
)

38 
	~"©omic.h
"

39 
	~"tbb_¥ofûög.h
"

41 
«me•a˚
 
	gtbb
 {

45 ˛as†
	cqueuög_muãx
 : 
öã∫Æ
::
muãx_c›y_dïªˇãd_™d_dißbÀd
 {

46 
public
:

48 
queuög_muãx
() {

49 
q_èû
 = 
NULL
;

50 #i‡
TBB_USE_THREADING_TOOLS


51 
öã∫Æ_c⁄°ru˘
();

58 ˛as†
	csc›ed_lock
: 
öã∫Æ
::
no_c›y
 {

60 
öôülize
() {

61 
muãx
 = 
NULL
;

62 #i‡
TBB_USE_ASSERT


63 
	göã∫Æ
::
pois⁄_poöãr
(
√xt
);

67 
	gpublic
:

70 
sc›ed_lock
(Ë{
öôülize
();}

73 
sc›ed_lock
–
queuög_muãx
& 
m
 ) {

74 
öôülize
();

75 
acquúe
(
m
);

79 ~
sc›ed_lock
() {

80 if–
	gmuãx
 ) 
ªÀa£
();

84 
__TBB_EXPORTED_METHOD
 
acquúe
–
queuög_muãx
& 
m
 );

87 
boﬁ
 
__TBB_EXPORTED_METHOD
 
åy_acquúe
–
queuög_muãx
& 
m
 );

90 
__TBB_EXPORTED_METHOD
 
ªÀa£
();

92 
	g¥iv©e
:

94 
queuög_muãx
* 
muãx
;

97 
sc›ed_lock
 *
	g√xt
;

103 
uöçå_t
 
	ggoög
;

106 
__TBB_EXPORTED_METHOD
 
öã∫Æ_c⁄°ru˘
();

109 c⁄° 
boﬁ
 
	gis_rw_muãx
 = 
Ál£
;

110 c⁄° 
boﬁ
 
	gis_ªcursive_muãx
 = 
Ál£
;

111 c⁄° 
boﬁ
 
	gis_Áú_muãx
 = 
åue
;

113 
	g¥iv©e
:

115 
©omic
<
sc›ed_lock
*> 
q_èû
;

119 
__TBB_DEFINE_PROFILING_SET_NAME
(
queuög_muãx
)

	@viper/concurrentqueue-src/benchmarks/tbb/queuing_rw_mutex.cpp

25 
	~"tbb/queuög_rw_muãx.h
"

26 
	~"tbb/tbb_machöe.h
"

27 
	~"tbb/tbb_°ddef.h
"

28 
	~"tbb/tbb_machöe.h
"

29 
	~"ôt_nŸify.h
"

32 
«me•a˚
 
	gtbb
 {

34 
usög
 
«me•a˚
 
	göã∫Æ
;

37 
	e°©e_t_Êags
 {

38 
	gSTATE_NONE
 = 0,

39 
	gSTATE_WRITER
 = 1<<0,

40 
	gSTATE_READER
 = 1<<1,

41 
	gSTATE_READER_UNBLOCKNEXT
 = 1<<2,

42 
	gSTATE_ACTIVEREADER
 = 1<<3,

43 
	gSTATE_UPGRADE_REQUESTED
 = 1<<4,

44 
	gSTATE_UPGRADE_WAITING
 = 1<<5,

45 
	gSTATE_UPGRADE_LOSER
 = 1<<6,

46 
	gSTATE_COMBINED_WAITINGREADER
 = 
STATE_READER
 | 
STATE_READER_UNBLOCKNEXT
,

47 
	gSTATE_COMBINED_READER
 = 
STATE_COMBINED_WAITINGREADER
 | 
STATE_ACTIVEREADER
,

48 
	gSTATE_COMBINED_UPGRADING
 = 
STATE_UPGRADE_WAITING
 | 
STATE_UPGRADE_LOSER


51 c⁄° 
	gRELEASED
 = 0;

52 c⁄° 
	gACQUIRED
 = 1;

54 
ölöe
 
boﬁ
 
	gqueuög_rw_muãx
::
sc›ed_lock
::
åy_acquúe_öã∫Æ_lock
()

56  
as_©omic
(
my_öã∫Æ_lock
).
com∑ª_™d_sw≠
<
tbb
::
acquúe
>(
ACQUIRED
,
	gRELEASED
Ë=
RELEASED
;

59 
ölöe
 
	gqueuög_rw_muãx
::
sc›ed_lock
::
acquúe_öã∫Æ_lock
()

63  !
åy_acquúe_öã∫Æ_lock
() ) {

64 
__TBB_Pau£
(1);

68 
ölöe
 
	gqueuög_rw_muãx
::
sc›ed_lock
::
ªÀa£_öã∫Æ_lock
()

70 
__TBB_°‹e_wôh_ªÀa£
(
my_öã∫Æ_lock
,
RELEASED
);

73 
ölöe
 
	gqueuög_rw_muãx
::
sc›ed_lock
::
waô_f‹_ªÀa£_of_öã∫Æ_lock
()

75 
•ö_waô_u¡û_eq
(
my_öã∫Æ_lock
, 
RELEASED
);

78 
ölöe
 
	gqueuög_rw_muãx
::
sc›ed_lock
::
unblock_‹_waô_⁄_öã∫Æ_lock
–
uöçå_t
 
Êag
 ) {

79 if–
Êag
 )

80 
waô_f‹_ªÀa£_of_öã∫Æ_lock
();

82 
ªÀa£_öã∫Æ_lock
();

85 #i‡
deföed
(
_MSC_VER
Ë&& !deföed(
__INTEL_COMPILER
)

87 #¥agm®
w¨nög
 (
push
)

88 #¥agm®
w¨nög
 (
dißbÀ
: 4311 4312)

92 
	gãm∂©e
<
ty≥«me
 
	gT
>

93 ˛as†
	cåicky_©omic_poöãr
: 
no_c›y
 {

94 
public
:

95 
ty≥«me
 
	t©omic_£À˘‹
<(
	tT
*)>::
	tw‹d
 word;

97 
	gãm∂©e
<
mem‹y_£m™tics
 
	gM
>

98 
T
* 
„tch_™d_add
–T* vﬁ©ûê* 
loˇti⁄
, 
w‹d
 
addíd
 ) {

99  
	gªöãΩªt_ˇ°
<
	gT
*>–
	g©omic_åaôs
<(T*),
	gM
>::
„tch_™d_add
(
loˇti⁄
, 
addíd
) );

101 
	gãm∂©e
<
mem‹y_£m™tics
 
	gM
>

102 
T
* 
„tch_™d_°‹e
–T* vﬁ©ûê* 
loˇti⁄
, T* 
vÆue
 ) {

103  
	gªöãΩªt_ˇ°
<
	gT
*>–
	g©omic_åaôs
<(T*),
	gM
>::
„tch_™d_°‹e
(
loˇti⁄
, 
ªöãΩªt_ˇ°
<
w‹d
>(
vÆue
)) );

105 
	gãm∂©e
<
mem‹y_£m™tics
 
	gM
>

106 
T
* 
com∑ª_™d_sw≠
–T* vﬁ©ûê* 
loˇti⁄
, T* 
vÆue
, T* 
com∑ønd
 ) {

107  
	gªöãΩªt_ˇ°
<
	gT
*>(

108 
	g©omic_åaôs
<(
	gT
*),
	gM
>::
com∑ª_™d_sw≠
(
loˇti⁄
, 
ªöãΩªt_ˇ°
<
w‹d
>(
vÆue
),

109 
ªöãΩªt_ˇ°
<
w‹d
>(
com∑ønd
))

113 
	gT
* & 
	gªf
;

114 
åicky_©omic_poöãr
–
T
*& 
‹igöÆ
 ) : 
ªf
(original) {};

115 
åicky_©omic_poöãr
–
T
* vﬁ©ûê& 
‹igöÆ
 ) : 
ªf
(original) {};

116 
T
* 
	g›î©‹
&–
w‹d
 
	g›î™d2
 ) const {

117  
	gªöãΩªt_ˇ°
<
	gT
*>–ªöãΩªt_ˇ°<
	gw‹d
>(
	gªf
Ë& 
	g›î™d2
 );

119 
T
* 
	g›î©‹
|–
w‹d
 
	g›î™d2
 ) const {

120  
	gªöãΩªt_ˇ°
<
	gT
*>–ªöãΩªt_ˇ°<
	gw‹d
>(
	gªf
Ë| 
	g›î™d2
 );

124 
	gåicky_©omic_poöãr
<
	tqueuög_rw_muãx
::
	tsc›ed_lock
> 
	tåicky_poöãr
;

126 #i‡
deföed
(
_MSC_VER
Ë&& !
	$deföed
(
__INTEL_COMPILER
)

128 #¥agm®
	$w¨nög
 (
p›
)

132 c⁄° 
åicky_poöãr
::
w‹d
 
FLAG
 = 0x1;

134 
ölöe


135 
uöçå_t
 
	$gë_Êag
–
queuög_rw_muãx
::
sc›ed_lock
* 
±r
 ) {

136  
	`uöçå_t
(
±r
Ë& 
FLAG
;

137 
	}
}

144 
	gqueuög_rw_muãx
::
sc›ed_lock
::
	$acquúe
–
queuög_rw_muãx
& 
m
, 
boﬁ
 
wrôe
 )

146 
	`__TBB_ASSERT
–!
my_muãx
, "scoped_lock isálready holdingá mutex");

150 
my_muãx
 = &
m
;

151 
	`__TBB_°‹e_ªœxed
(
my_¥ev
 , (
sc›ed_lock
*)0);

152 
	`__TBB_°‹e_ªœxed
(
my_√xt
 , (
sc›ed_lock
*)0);

153 
	`__TBB_°‹e_ªœxed
(
my_goög
, 0);

154 
my_°©e
 = 
	`°©e_t
(
wrôe
 ? 
STATE_WRITER
 : 
STATE_READER
);

155 
my_öã∫Æ_lock
 = 
RELEASED
;

157 
queuög_rw_muãx
::
sc›ed_lock
* 
¥ed
 = 
m
.
q_èû
.
„tch_™d_°‹e
<
tbb
::
ªÀa£
>(
this
);

159 if–
wrôe
 ) {

161 if–
¥ed
 ) {

162 
	`ITT_NOTIFY
(
sync_¥ï¨e
, 
my_muãx
);

163 
¥ed
 = 
	`åicky_poöãr
’ªdË& ~
FLAG
;

164 
	`__TBB_ASSERT
–!–
	`uöçå_t
(
¥ed
Ë& 
FLAG
 ), "use of corruptedÖointer!" );

165 #i‡
TBB_USE_ASSERT


166 
	`__TBB_c⁄åﬁ_c⁄si°ícy_hñ≥r
();

167 
	`__TBB_ASSERT
–!
	`__TBB_lﬂd_ªœxed
(
¥ed
->
my_√xt
), "theÖredecessor hasánother successor!");

169 
	`__TBB_°‹e_wôh_ªÀa£
(
¥ed
->
my_√xt
,
this
);

170 
	`•ö_waô_u¡û_eq
(
my_goög
, 1);

174 #i‡
DO_ITT_NOTIFY


175 
boﬁ
 
sync_¥ï¨e_d⁄e
 = 
Ál£
;

177 if–
¥ed
 ) {

178 
¥ed_°©e
;

179 
	`__TBB_ASSERT
–!
	`__TBB_lﬂd_ªœxed
(
my_¥ev
), "theÖredecessor isálready set" );

180 if–
	`uöçå_t
(
¥ed
Ë& 
FLAG
 ) {

182 
¥ed_°©e
 = 
STATE_UPGRADE_WAITING
;

183 
¥ed
 = 
	`åicky_poöãr
’ªdË& ~
FLAG
;

187 
¥ed_°©e
 = 
¥ed
->
my_°©e
.
com∑ª_™d_sw≠
<
tbb
::
acquúe
>(
STATE_READER_UNBLOCKNEXT
, 
STATE_READER
);

189 
	`__TBB_°‹e_ªœxed
(
my_¥ev
, 
¥ed
);

190 
	`__TBB_ASSERT
–!–
	`uöçå_t
(
¥ed
Ë& 
FLAG
 ), "use of corruptedÖointer!" );

191 #i‡
TBB_USE_ASSERT


192 
	`__TBB_c⁄åﬁ_c⁄si°ícy_hñ≥r
();

193 
	`__TBB_ASSERT
–!
	`__TBB_lﬂd_ªœxed
(
¥ed
->
my_√xt
), "theÖredecessor hasánother successor!");

195 
	`__TBB_°‹e_wôh_ªÀa£
(
¥ed
->
my_√xt
,
this
);

196 if–
¥ed_°©e
 !
STATE_ACTIVEREADER
 ) {

197 #i‡
DO_ITT_NOTIFY


198 
sync_¥ï¨e_d⁄e
 = 
åue
;

199 
	`ITT_NOTIFY
(
sync_¥ï¨e
, 
my_muãx
);

201 
	`•ö_waô_u¡û_eq
(
my_goög
, 1);

206 
ﬁd_°©e
 = 
my_°©e
.
com∑ª_™d_sw≠
<
tbb
::
acquúe
>(
STATE_ACTIVEREADER
, 
STATE_READER
);

207 if–
ﬁd_°©e
!=
STATE_READER
 ) {

208 #i‡
DO_ITT_NOTIFY


209 if–!
sync_¥ï¨e_d⁄e
 )

210 
	`ITT_NOTIFY
(
sync_¥ï¨e
, 
my_muãx
);

213 
	`__TBB_ASSERT
–
my_°©e
==
STATE_READER_UNBLOCKNEXT
, "unexpected state" );

214 
	`•ö_waô_whûe_eq
(
my_√xt
, (
sc›ed_lock
*)
NULL
);

217 
my_°©e
 = 
STATE_ACTIVEREADER
;

218 
	`__TBB_°‹e_wôh_ªÀa£
(
my_√xt
->
my_goög
,1);

222 
	`ITT_NOTIFY
(
sync_acquúed
, 
my_muãx
);

226 
	`__TBB_lﬂd_wôh_acquúe
(
my_goög
);

227 
	}
}

230 
boﬁ
 
	gqueuög_rw_muãx
::
sc›ed_lock
::
	$åy_acquúe
–
queuög_rw_muãx
& 
m
, 
boﬁ
 
wrôe
 )

232 
	`__TBB_ASSERT
–!
my_muãx
, "scoped_lock isálready holdingá mutex");

234 if–
lﬂd
<
ªœxed
>(
m
.
q_èû
) )

235  
Ál£
;

239 
	`__TBB_°‹e_ªœxed
(
my_¥ev
, (
sc›ed_lock
*)0);

240 
	`__TBB_°‹e_ªœxed
(
my_√xt
, (
sc›ed_lock
*)0);

241 
	`__TBB_°‹e_ªœxed
(
my_goög
, 0);

242 
my_°©e
 = 
	`°©e_t
(
wrôe
 ? 
STATE_WRITER
 : 
STATE_ACTIVEREADER
);

243 
my_öã∫Æ_lock
 = 
RELEASED
;

247 if–
m
.
q_èû
.
com∑ª_™d_sw≠
<
tbb
::
ªÀa£
>(
this
, 
NULL
) )

248  
Ál£
;

252 
	`__TBB_lﬂd_wôh_acquúe
(
my_goög
);

253 
my_muãx
 = &
m
;

254 
	`ITT_NOTIFY
(
sync_acquúed
, 
my_muãx
);

255  
åue
;

256 
	}
}

259 
	gqueuög_rw_muãx
::
sc›ed_lock
::
	$ªÀa£
( )

261 
	`__TBB_ASSERT
(
my_muãx
!=
NULL
, "noÜockácquired");

263 
	`ITT_NOTIFY
(
sync_ªÀasög
, 
my_muãx
);

265 if–
my_°©e
 =
STATE_WRITER
 ) {

271 
sc›ed_lock
* 
n
 = 
	`__TBB_lﬂd_wôh_acquúe
(
my_√xt
);

272 if–!
n
 ) {

273 if–
this
 =
my_muãx
->
q_èû
.
com∑ª_™d_sw≠
<
tbb
::
ªÀa£
>(
NULL
,Åhis) ) {

275 
d⁄e
;

277 
	`•ö_waô_whûe_eq
–
my_√xt
, (
sc›ed_lock
*)
NULL
 );

278 
n
 = 
	`__TBB_lﬂd_wôh_acquúe
(
my_√xt
);

280 
	`__TBB_°‹e_ªœxed
(
n
->
my_goög
, 2);

281 if–
n
->
my_°©e
==
STATE_UPGRADE_WAITING
 ) {

283 
	`acquúe_öã∫Æ_lock
();

284 
queuög_rw_muãx
::
sc›ed_lock
* 
tmp
 = 
åicky_poöãr
::
„tch_™d_°‹e
<
tbb
::
ªÀa£
>(&(
n
->
my_¥ev
), 
NULL
);

285 
n
->
my_°©e
 = 
STATE_UPGRADE_LOSER
;

286 
	`__TBB_°‹e_wôh_ªÀa£
(
n
->
my_goög
,1);

287 
	`unblock_‹_waô_⁄_öã∫Æ_lock
(
	`gë_Êag
(
tmp
));

289 
	`__TBB_ASSERT
–
my_°©e
 & (
STATE_COMBINED_WAITINGREADER
 | 
STATE_WRITER
), "unexpected state" );

290 
	`__TBB_ASSERT
–!–
	`uöçå_t
(
	`__TBB_lﬂd_ªœxed
(
n
->
my_¥ev
)Ë& 
FLAG
 ), "use of corruptedÖointer!" );

291 
	`__TBB_°‹e_ªœxed
(
n
->
my_¥ev
, (
sc›ed_lock
*)0);

292 
	`__TBB_°‹e_wôh_ªÀa£
(
n
->
my_goög
,1);

297 
queuög_rw_muãx
::
sc›ed_lock
 *
tmp
 = 
NULL
;

298 
ªåy
:

300 
queuög_rw_muãx
::
sc›ed_lock
 *
¥ed
 = 
åicky_poöãr
::
„tch_™d_add
<
tbb
::
acquúe
>(&
my_¥ev
, 
FLAG
);

302 if–
¥ed
 ) {

303 if–!(
¥ed
->
	`åy_acquúe_öã∫Æ_lock
()) )

307 
tmp
 = 
åicky_poöãr
::
com∑ª_™d_sw≠
<
tbb
::
ªÀa£
>(&
my_¥ev
, 
¥ed
, 
	`åicky_poöãr
’ªdË| 
FLAG
 );

308 if–!(
	`uöçå_t
(
tmp
Ë& 
FLAG
) ) {

310 
	`•ö_waô_whûe_eq
–
my_¥ev
, 
	`åicky_poöãr
(
¥ed
)|
FLAG
 );

312 
¥ed
->
	`ªÀa£_öã∫Æ_lock
();

316 
tmp
 = 
NULL
;

317 
ªåy
;

319 
	`__TBB_ASSERT
(
¥ed
 &&Öªd->
my_öã∫Æ_lock
==
ACQUIRED
, "predecessor'sÜock isÇotácquired");

320 
	`__TBB_°‹e_ªœxed
(
my_¥ev
, 
¥ed
);

321 
	`acquúe_öã∫Æ_lock
();

323 
	`__TBB_°‹e_wôh_ªÀa£
(
¥ed
->
my_√xt
,
ªöãΩªt_ˇ°
<
sc›ed_lock
 *>(
NULL
));

325 if–!
	`__TBB_lﬂd_ªœxed
(
my_√xt
Ë&& 
this
 !
my_muãx
->
q_èû
.
com∑ª_™d_sw≠
<
tbb
::
ªÀa£
>(
¥ed
,Åhis) ) {

326 
	`•ö_waô_whûe_eq
–
my_√xt
, (*)
NULL
 );

328 
	`__TBB_ASSERT
–!
	`gë_Êag
(
	`__TBB_lﬂd_ªœxed
(
my_√xt
)), "use of corruptedÖointer" );

331 if–
sc›ed_lock
 *c⁄° 
l_√xt
 = 
	`__TBB_lﬂd_wôh_acquúe
(
my_√xt
) ) {

333 
tmp
 = 
åicky_poöãr
::
„tch_™d_°‹e
<
tbb
::
ªÀa£
>(&(
l_√xt
->
my_¥ev
), 
¥ed
);

335 
	`__TBB_ASSERT
(
	`__TBB_lﬂd_ªœxed
(
my_¥ev
)==
¥ed
, 
NULL
);

336 
	`__TBB_°‹e_wôh_ªÀa£
(
¥ed
->
my_√xt
, my_next);

339 
¥ed
->
	`ªÀa£_öã∫Æ_lock
();

342 
	`acquúe_öã∫Æ_lock
();

343 
sc›ed_lock
* 
n
 = 
	`__TBB_lﬂd_wôh_acquúe
(
my_√xt
);

344 if–!
n
 ) {

345 if–
this
 !
my_muãx
->
q_èû
.
com∑ª_™d_sw≠
<
tbb
::
ªÀa£
>(
NULL
,Åhis) ) {

346 
	`•ö_waô_whûe_eq
–
my_√xt
, (
sc›ed_lock
*)
NULL
 );

347 
n
 = 
	`__TBB_lﬂd_ªœxed
(
my_√xt
);

349 
u∆ock_£lf
;

352 
	`__TBB_°‹e_ªœxed
(
n
->
my_goög
, 2);

353 
tmp
 = 
åicky_poöãr
::
„tch_™d_°‹e
<
tbb
::
ªÀa£
>(&(
n
->
my_¥ev
), 
NULL
);

354 
	`__TBB_°‹e_wôh_ªÀa£
(
n
->
my_goög
,1);

356 
u∆ock_£lf
:

357 
	`unblock_‹_waô_⁄_öã∫Æ_lock
(
	`gë_Êag
(
tmp
));

359 
d⁄e
:

360 
	`•ö_waô_whûe_eq
–
my_goög
, 2 );

362 
	`öôülize
();

363 
	}
}

365 
boﬁ
 
	gqueuög_rw_muãx
::
sc›ed_lock
::
	$downgøde_to_ªadî
()

367 
	`__TBB_ASSERT
–
my_°©e
==
STATE_WRITER
, "no senseÅo downgradeáÑeader" );

369 
	`ITT_NOTIFY
(
sync_ªÀasög
, 
my_muãx
);

371 if–! 
	`__TBB_lﬂd_wôh_acquúe
(
my_√xt
) ) {

372 
my_°©e
 = 
STATE_READER
;

373 if–
this
==
my_muãx
->
q_èû
 ) {

374 
ﬁd_°©e
 = 
my_°©e
.
com∑ª_™d_sw≠
<
tbb
::
ªÀa£
>(
STATE_ACTIVEREADER
, 
STATE_READER
);

375 if–
ﬁd_°©e
==
STATE_READER
 ) {

377  
åue
;

381 
	`•ö_waô_whûe_eq
–
my_√xt
, (*)
NULL
 );

383 
sc›ed_lock
 *c⁄° 
n
 = 
	`__TBB_lﬂd_ªœxed
(
my_√xt
);

384 
	`__TBB_ASSERT
–
n
, "stillÇo successorátÅhisÖoint!" );

385 if–
n
->
my_°©e
 & 
STATE_COMBINED_WAITINGREADER
 )

386 
	`__TBB_°‹e_wôh_ªÀa£
(
n
->
my_goög
,1);

387 if–
n
->
my_°©e
==
STATE_UPGRADE_WAITING
 )

389 
n
->
my_°©e
 = 
STATE_UPGRADE_LOSER
;

390 
my_°©e
 = 
STATE_ACTIVEREADER
;

391  
åue
;

392 
	}
}

394 
boﬁ
 
	gqueuög_rw_muãx
::
sc›ed_lock
::
	$upgøde_to_wrôî
()

396 
	`__TBB_ASSERT
–
my_°©e
==
STATE_ACTIVEREADER
, "onlyáctiveÑeader can be upgraded" );

398 
queuög_rw_muãx
::
sc›ed_lock
 * 
tmp
;

399 
queuög_rw_muãx
::
sc›ed_lock
 * 
me
 = 
this
;

401 
	`ITT_NOTIFY
(
sync_ªÀasög
, 
my_muãx
);

402 
my_°©e
 = 
STATE_UPGRADE_REQUESTED
;

403 
ªque°ed
:

404 
	`__TBB_ASSERT
–!(
	`uöçå_t
(
	`__TBB_lﬂd_ªœxed
(
my_√xt
)Ë& 
FLAG
), "use of corruptedÖointer!" );

405 
	`acquúe_öã∫Æ_lock
();

406 if–
this
 !
my_muãx
->
q_èû
.
com∑ª_™d_sw≠
<
tbb
::
ªÀa£
>(
	`åicky_poöãr
(
me
)|
FLAG
,Åhis) ) {

407 
	`•ö_waô_whûe_eq
–
my_√xt
, (*)
NULL
 );

408 
queuög_rw_muãx
::
sc›ed_lock
 * 
n
;

409 
n
 = 
åicky_poöãr
::
„tch_™d_add
<
tbb
::
acquúe
>(&
my_√xt
, 
FLAG
);

410 
n_°©e
 = 
n
->
my_°©e
;

412 if–
n_°©e
 & 
STATE_COMBINED_WAITINGREADER
 )

413 
	`__TBB_°‹e_wôh_ªÀa£
(
n
->
my_goög
,1);

414 
tmp
 = 
åicky_poöãr
::
„tch_™d_°‹e
<
tbb
::
ªÀa£
>(&(
n
->
my_¥ev
), 
this
);

415 
	`unblock_‹_waô_⁄_öã∫Æ_lock
(
	`gë_Êag
(
tmp
));

416 if–
n_°©e
 & (
STATE_COMBINED_READER
 | 
STATE_UPGRADE_REQUESTED
) ) {

418 
tmp
 = 
	`åicky_poöãr
(
n
)|
FLAG
;

419  
©omic_backoff
 
b
; 
	`__TBB_lﬂd_ªœxed
(
my_√xt
)==
tmp
; b.
	`∑u£
() ) {

420 if–
my_°©e
 & 
STATE_COMBINED_UPGRADING
 ) {

421 if–
	`__TBB_lﬂd_wôh_acquúe
(
my_√xt
)==
tmp
 )

422 
	`__TBB_°‹e_ªœxed
(
my_√xt
, 
n
);

423 
waôög
;

426 
	`__TBB_ASSERT
(
	`__TBB_lﬂd_ªœxed
(
my_√xt
Ë!(
	`åicky_poöãr
(
n
)|
FLAG
), 
NULL
);

427 
ªque°ed
;

429 
	`__TBB_ASSERT
–
n_°©e
 & (
STATE_WRITER
 | 
STATE_UPGRADE_WAITING
), "unexpected state");

430 
	`__TBB_ASSERT
–(
	`åicky_poöãr
(
n
)|
FLAG
Ë=
	`__TBB_lﬂd_ªœxed
(
my_√xt
), 
NULL
);

431 
	`__TBB_°‹e_ªœxed
(
my_√xt
, 
n
);

435 
	`ªÀa£_öã∫Æ_lock
();

437 
my_°©e
.
com∑ª_™d_sw≠
<
tbb
::
acquúe
>(
STATE_UPGRADE_WAITING
, 
STATE_UPGRADE_REQUESTED
);

439 
waôög
:

440 
	`__TBB_ASSERT
–!–
	`öçå_t
(
	`__TBB_lﬂd_ªœxed
(
my_√xt
)Ë& 
FLAG
 ), "use of corruptedÖointer!" );

441 
	`__TBB_ASSERT
–
my_°©e
 & 
STATE_COMBINED_UPGRADING
, "wrong stateát upgrade waiting_retry" );

442 
	`__TBB_ASSERT
–
me
==
this
, 
NULL
 );

443 
	`ITT_NOTIFY
(
sync_¥ï¨e
, 
my_muãx
);

445 
my_muãx
->
q_èû
.
com∑ª_™d_sw≠
<
tbb
::
ªÀa£
>–
this
, 
	`åicky_poöãr
(
me
)|
FLAG
 );

446 
queuög_rw_muãx
::
sc›ed_lock
 * 
¥ed
;

447 
¥ed
 = 
åicky_poöãr
::
„tch_™d_add
<
tbb
::
acquúe
>(&
my_¥ev
, 
FLAG
);

448 if–
¥ed
 ) {

449 
boﬁ
 
suc˚ss
 = 
¥ed
->
	`åy_acquúe_öã∫Æ_lock
();

450 
¥ed
->
my_°©e
.
com∑ª_™d_sw≠
<
tbb
::
ªÀa£
>(
STATE_UPGRADE_WAITING
, 
STATE_UPGRADE_REQUESTED
);

451 if–!
suc˚ss
 ) {

452 
tmp
 = 
åicky_poöãr
::
com∑ª_™d_sw≠
<
tbb
::
ªÀa£
>(&
my_¥ev
, 
¥ed
, 
	`åicky_poöãr
’ªd)|
FLAG
 );

453 if–
	`uöçå_t
(
tmp
Ë& 
FLAG
 ) {

454 
	`•ö_waô_whûe_eq
(
my_¥ev
, 
¥ed
);

455 
¥ed
 = 
	`__TBB_lﬂd_ªœxed
(
my_¥ev
);

457 
	`•ö_waô_whûe_eq
–
my_¥ev
, 
	`åicky_poöãr
(
¥ed
)|
FLAG
 );

458 
¥ed
->
	`ªÀa£_öã∫Æ_lock
();

461 
	`__TBB_°‹e_ªœxed
(
my_¥ev
, 
¥ed
);

462 
¥ed
->
	`ªÀa£_öã∫Æ_lock
();

463 
	`•ö_waô_whûe_eq
(
my_¥ev
, 
¥ed
);

464 
¥ed
 = 
	`__TBB_lﬂd_ªœxed
(
my_¥ev
);

466 if–
¥ed
 )

467 
waôög
;

470 
	`__TBB_°‹e_ªœxed
(
my_¥ev
, 
¥ed
);

472 
	`__TBB_ASSERT
–!
¥ed
 && !
	`__TBB_lﬂd_ªœxed
(
my_¥ev
), 
NULL
 );

476 
	`waô_f‹_ªÀa£_of_öã∫Æ_lock
();

478 
	`•ö_waô_whûe_eq
–
my_goög
, 2 );

481 
	`__TBB_c⁄åﬁ_c⁄si°ícy_hñ≥r
();

483 
boﬁ
 
ªsu…
 = ( 
my_°©e
 !
STATE_UPGRADE_LOSER
 );

484 
my_°©e
 = 
STATE_WRITER
;

485 
	`__TBB_°‹e_ªœxed
(
my_goög
, 1);

487 
	`ITT_NOTIFY
(
sync_acquúed
, 
my_muãx
);

488  
ªsu…
;

489 
	}
}

491 
	gqueuög_rw_muãx
::
	$öã∫Æ_c⁄°ru˘
() {

492 
	`ITT_SYNC_CREATE
(
this
, 
	`_T
("tbb::queuing_rw_mutex"), _T(""));

493 
	}
}

	@viper/concurrentqueue-src/benchmarks/tbb/queuing_rw_mutex.h

21 #i‚de‡
__TBB_queuög_rw_muãx_H


22 
	#__TBB_queuög_rw_muãx_H


	)

24 
	~"tbb_c⁄fig.h
"

26 #i‡!
TBB_USE_EXCEPTIONS
 && 
_MSC_VER


28 #¥agm®
w¨nög
 (
push
)

29 #¥agm®
w¨nög
 (
dißbÀ
: 4530)

32 
	~<c°rög
>

34 #i‡!
TBB_USE_EXCEPTIONS
 && 
_MSC_VER


35 #¥agm®
w¨nög
 (
p›
)

38 
	~"©omic.h
"

39 
	~"tbb_¥ofûög.h
"

41 
«me•a˚
 
	gtbb
 {

47 ˛as†
	cqueuög_rw_muãx
 : 
öã∫Æ
::
muãx_c›y_dïªˇãd_™d_dißbÀd
 {

48 
public
:

50 
queuög_rw_muãx
() {

51 
q_èû
 = 
NULL
;

52 #i‡
TBB_USE_THREADING_TOOLS


53 
öã∫Æ_c⁄°ru˘
();

58 ~
queuög_rw_muãx
() {

59 #i‡
TBB_USE_ASSERT


60 
__TBB_ASSERT
–!
q_èû
, "destruction ofánácquired mutex");

67 ˛as†
	csc›ed_lock
: 
öã∫Æ
::
no_c›y
 {

69 
öôülize
() {

70 
my_muãx
 = 
NULL
;

71 #i‡
TBB_USE_ASSERT


72 
	gmy_°©e
 = 0xFF;

73 
	göã∫Æ
::
pois⁄_poöãr
(
my_√xt
);

74 
	göã∫Æ
::
pois⁄_poöãr
(
my_¥ev
);

78 
	gpublic
:

81 
sc›ed_lock
(Ë{
öôülize
();}

84 
sc›ed_lock
–
queuög_rw_muãx
& 
m
, 
boﬁ
 
wrôe
=
åue
 ) {

85 
öôülize
();

86 
acquúe
(
m
,
wrôe
);

90 ~
sc›ed_lock
() {

91 if–
	gmy_muãx
 ) 
ªÀa£
();

95 
acquúe
–
queuög_rw_muãx
& 
m
, 
boﬁ
 
wrôe
=
åue
 );

98 
boﬁ
 
åy_acquúe
–
queuög_rw_muãx
& 
m
, boﬁ 
wrôe
=
åue
 );

101 
ªÀa£
();

105 
boﬁ
 
upgøde_to_wrôî
();

108 
boﬁ
 
downgøde_to_ªadî
();

110 
	g¥iv©e
:

112 
queuög_rw_muãx
* 
my_muãx
;

115 
sc›ed_lock
 *
__TBB_©omic
 
	gmy_¥ev
, *__TBB_©omi¯
	gmy_√xt
;

117 
	t°©e_t
;

120 
	g©omic
<
	g°©e_t
> 
	gmy_°©e
;

124 
__TBB_©omic
 
	gmy_goög
;

127 
	gmy_öã∫Æ_lock
;

130 
acquúe_öã∫Æ_lock
();

134 
boﬁ
 
åy_acquúe_öã∫Æ_lock
();

137 
ªÀa£_öã∫Æ_lock
();

140 
waô_f‹_ªÀa£_of_öã∫Æ_lock
();

143 
unblock_‹_waô_⁄_öã∫Æ_lock
–
uöçå_t
 );

146 
__TBB_EXPORTED_METHOD
 
öã∫Æ_c⁄°ru˘
();

149 c⁄° 
boﬁ
 
	gis_rw_muãx
 = 
åue
;

150 c⁄° 
boﬁ
 
	gis_ªcursive_muãx
 = 
Ál£
;

151 c⁄° 
boﬁ
 
	gis_Áú_muãx
 = 
åue
;

153 
	g¥iv©e
:

155 
©omic
<
sc›ed_lock
*> 
q_èû
;

159 
__TBB_DEFINE_PROFILING_SET_NAME
(
queuög_rw_muãx
)

	@viper/concurrentqueue-src/benchmarks/tbb/reader_writer_lock.cpp

21 
	~"tbb/ªadî_wrôî_lock.h
"

22 
	~"tbb/tbb_machöe.h
"

23 
	~"tbb/tbb_ex˚±i⁄.h
"

24 
	~"ôt_nŸify.h
"

26 #i‡
deföed
(
_MSC_VER
Ë&& deföed(
_Wp64
)

28 #¥agm®
w¨nög
 (
dißbÀ
: 4244)

31 
«me•a˚
 
	gtbb
 {

32 
«me•a˚
 
	göãrÁ˚5
 {

34 c⁄° 
uöçå_t
 
	gWFLAG1
 = 0x1;

35 c⁄° 
uöçå_t
 
	gWFLAG2
 = 0x2;

36 c⁄° 
uöçå_t
 
	gRFLAG
 = 0x4;

37 c⁄° 
uöçå_t
 
	gRC_INCR
 = 0x8;

41 
ölöe
 
uöçå_t
 
„tch_™d_‹
(
©omic
<uöçå_t>& 
›î™d
, uöçå_à
vÆue
) {

42 
	gtbb
::
öã∫Æ
::
©omic_backoff
 
b
;;
	gb
.
∑u£
()) {

43 
uöçå_t
 
	gﬁd
 = 
›î™d
;

44 
uöçå_t
 
	gªsu…
 = 
›î™d
.
com∑ª_™d_sw≠
(
ﬁd
|
vÆue
, old);

45 i‡(
	gªsu…
==
ﬁd
Ë 
ªsu…
;

50 
ölöe
 
uöçå_t
 
„tch_™d_™d
(
©omic
<uöçå_t>& 
›î™d
, uöçå_à
vÆue
) {

51 
	gtbb
::
öã∫Æ
::
©omic_backoff
 
b
;;
	gb
.
∑u£
()) {

52 
uöçå_t
 
	gﬁd
 = 
›î™d
;

53 
uöçå_t
 
	gªsu…
 = 
›î™d
.
com∑ª_™d_sw≠
(
ﬁd
&
vÆue
, old);

54 i‡(
	gªsu…
==
ﬁd
Ë 
ªsu…
;

60 
	gãm∂©e
<
ty≥«me
 
	gT
,Åy≥«mê
	gU
>

61 
•ö_waô_whûe_geq
–c⁄° vﬁ©ûê
T
& 
loˇti⁄
, 
U
 
vÆue
 ) {

62 
	gtbb
::
öã∫Æ
::
©omic_backoff
 
backoff
;

63  
	gloˇti⁄
>=
vÆue
 ) 
backoff
.
∑u£
();

68 
	gãm∂©e
<
ty≥«me
 
	gT
,Åy≥«mê
	gU
>

69 
•ö_waô_u¡û_™d
–c⁄° vﬁ©ûê
T
& 
loˇti⁄
, 
U
 
vÆue
 ) {

70 
	gtbb
::
öã∫Æ
::
©omic_backoff
 
backoff
;

71  !(
	gloˇti⁄
 & 
	gvÆue
ËË
	gbackoff
.
∑u£
();

75 
	gªadî_wrôî_lock
::
öã∫Æ_c⁄°ru˘
() {

76 
ªadî_hód
 = 
NULL
;

77 
	gwrôî_hód
 = 
NULL
;

78 
	gwrôî_èû
 = 
NULL
;

79 
	grdr_cou¡_™d_Êags
 = 0;

80 
	gmy_cuºít_wrôî
 = 
tbb_thªad
::
id
();

81 #i‡
TBB_USE_THREADING_TOOLS


82 
ITT_SYNC_CREATE
(
this
, 
_T
("tbb::reader_writer_lock"), _T(""));

86 
	gªadî_wrôî_lock
::
öã∫Æ_de°roy
() {

87 
__TBB_ASSERT
(
rdr_cou¡_™d_Êags
==0, "reader_writer_lock destroyed withÖendingÑeaders/writers.");

88 
__TBB_ASSERT
(
ªadî_hód
==
NULL
, "reader_writer_lock destroyed withÖendingÑeaders.");

89 
__TBB_ASSERT
(
wrôî_èû
==
NULL
, "reader_writer_lock destroyed withÖending writers.");

90 
__TBB_ASSERT
(
wrôî_hód
==
NULL
, "reader_writer_lock destroyed withÖending/active writers.");

97 
	gªadî_wrôî_lock
::
lock
() {

98 i‡(
is_cuºít_wrôî
()) {

100 
tbb
::
öã∫Æ
::
throw_ex˚±i⁄
—bb::öã∫Æ::
eid_im¥›î_lock
);

103 
sc›ed_lock
 *
	ga_wrôî_lock
 = 
√w
 scoped_lock();

104 (Ë
°¨t_wrôe
(
a_wrôî_lock
);

111 
boﬁ
 
	gªadî_wrôî_lock
::
åy_lock
() {

112 i‡(
is_cuºít_wrôî
()) {

113  
Ál£
;

116 
sc›ed_lock
 *
	ga_wrôî_lock
 = 
√w
 scoped_lock();

117 
	ga_wrôî_lock
->
	g°©us
 = 
waôög_n⁄blockög
;

118  
°¨t_wrôe
(
a_wrôî_lock
);

122 
boﬁ
 
	gªadî_wrôî_lock
::
°¨t_wrôe
(
sc›ed_lock
 *
I
) {

123 
tbb_thªad
::
id
 id = 
this_tbb_thªad
::
gë_id
();

124 
sc›ed_lock
 *
	g¥ed
 = 
NULL
;

125 i‡(
	gI
->
	g°©us
 =
waôög_n⁄blockög
) {

126 i‡((
¥ed
 = 
wrôî_èû
.
com∑ª_™d_sw≠
(
I
, 
NULL
)) != NULL) {

127 
dñëe
 
I
;

128  
	gÁl£
;

132 
ITT_NOTIFY
(
sync_¥ï¨e
, 
this
);

133 
	g¥ed
 = 
wrôî_èû
.
„tch_™d_°‹e
(
I
);

135 i‡(
	g¥ed
)

136 
	g¥ed
->
	g√xt
 = 
I
;

138 
£t_√xt_wrôî
(
I
);

139 i‡(
	gI
->
	g°©us
 =
waôög_n⁄blockög
) {

140 i‡(
I
->
√xt
) {

141 
£t_√xt_wrôî
(
I
->
√xt
);

144 
	gwrôî_hód
.
„tch_™d_°‹e
(
NULL
);

145 i‡(
	gI
 !
wrôî_èû
.
com∑ª_™d_sw≠
(
NULL
, 
I
)) {

146 
•ö_waô_whûe_eq
(
I
->
√xt
, (
sc›ed_lock
 *)
NULL
);

147 
__TBB_ASSERT
(
I
->
√xt
, "There should beáÇode followingÅheÜast writer.");

148 
£t_√xt_wrôî
(
I
->
√xt
);

151 
dñëe
 
	gI
;

152  
	gÁl£
;

155 
•ö_waô_whûe_eq
(
I
->
°©us
, 
waôög
);

156 
ITT_NOTIFY
(
sync_acquúed
, 
this
);

157 
	gmy_cuºít_wrôî
 = 
id
;

158  
	gåue
;

161 
	gªadî_wrôî_lock
::
£t_√xt_wrôî
(
sc›ed_lock
 *
W
) {

162 
wrôî_hód
 = 
W
;

163 i‡(
	gW
->
	g°©us
 =
waôög_n⁄blockög
) {

164 i‡(
rdr_cou¡_™d_Êags
.
com∑ª_™d_sw≠
(
WFLAG1
+
WFLAG2
, 0) == 0) {

165 
W
->
°©us
 = 
a˘ive
;

169 i‡(
„tch_™d_‹
(
rdr_cou¡_™d_Êags
, 
WFLAG1
Ë& 
	gRFLAG
) {

170 
•ö_waô_u¡û_™d
(
rdr_cou¡_™d_Êags
, 
WFLAG2
);

173 
__TBB_AtomicOR
(&
rdr_cou¡_™d_Êags
, 
WFLAG2
);

175 
•ö_waô_whûe_geq
(
rdr_cou¡_™d_Êags
, 
RC_INCR
);

176 
	gW
->
	g°©us
 = 
a˘ive
;

184 
	gªadî_wrôî_lock
::
lock_ªad
() {

185 i‡(
is_cuºít_wrôî
()) {

187 
tbb
::
öã∫Æ
::
throw_ex˚±i⁄
—bb::öã∫Æ::
eid_im¥›î_lock
);

190 
sc›ed_lock_ªad
 
	ga_ªadî_lock
;

191 
°¨t_ªad
(&
a_ªadî_lock
);

197 
boﬁ
 
	gªadî_wrôî_lock
::
åy_lock_ªad
() {

198 i‡(
is_cuºít_wrôî
()) {

199  
Ál£
;

202 i‡(
	grdr_cou¡_™d_Êags
.
„tch_™d_add
(
RC_INCR
Ë& (
	gWFLAG1
+
	gWFLAG2
)) {

203 
	grdr_cou¡_™d_Êags
 -
RC_INCR
;

204  
	gÁl£
;

207 
ITT_NOTIFY
(
sync_acquúed
, 
this
);

208  
	gåue
;

213 
	gªadî_wrôî_lock
::
°¨t_ªad
(
sc›ed_lock_ªad
 *
I
) {

214 
ITT_NOTIFY
(
sync_¥ï¨e
, 
this
);

215 
	gI
->
	g√xt
 = 
ªadî_hód
.
„tch_™d_°‹e
(
I
);

216 i‡(!
	gI
->
	g√xt
) {

218 i‡(!(
„tch_™d_‹
(
rdr_cou¡_™d_Êags
, 
RFLAG
Ë& (
	gWFLAG1
+
	gWFLAG2
))) {

219 
unblock_ªadîs
();

222 
__TBB_ASSERT
(
I
->
°©us
 =
waôög
 || I->°©u†=
a˘ive
, "LockÑequests should be waiting oráctive before blocking.");

223 
•ö_waô_whûe_eq
(
I
->
°©us
, 
waôög
);

224 i‡(
	gI
->
	g√xt
) {

225 
__TBB_ASSERT
(
I
->
√xt
->
°©us
 =
waôög
, 
NULL
);

226 
	grdr_cou¡_™d_Êags
 +
RC_INCR
;

227 
	gI
->
	g√xt
->
	g°©us
 = 
a˘ive
;

229 
ITT_NOTIFY
(
sync_acquúed
, 
this
);

232 
	gªadî_wrôî_lock
::
unblock_ªadîs
() {

234 
__TBB_ASSERT
(
rdr_cou¡_™d_Êags
&
RFLAG
, 
NULL
);

235 
	grdr_cou¡_™d_Êags
 +
RC_INCR
-
RFLAG
;

236 
__TBB_ASSERT
(
rdr_cou¡_™d_Êags
 >
RC_INCR
, 
NULL
);

238 i‡(
	grdr_cou¡_™d_Êags
 & 
	gWFLAG1
 && !‘dr_cou¡_™d_Êag†& 
	gWFLAG2
)) {

239 
__TBB_AtomicOR
(&
rdr_cou¡_™d_Êags
, 
WFLAG2
);

242 
sc›ed_lock_ªad
 *
	ghód
 = 
ªadî_hód
.
„tch_™d_°‹e
(
NULL
);

243 
__TBB_ASSERT
(
hód
, 
NULL
);

244 
__TBB_ASSERT
(
hód
->
°©us
 =
waôög
, 
NULL
);

245 
	ghód
->
	g°©us
 = 
a˘ive
;

249 
	gªadî_wrôî_lock
::
u∆ock
() {

250 if–
my_cuºít_wrôî
!=
tbb_thªad
::
id
() ) {

252 
__TBB_ASSERT
(
is_cuºít_wrôî
(), "caller ofÑeader_writer_lock::unlock() doesÇot ownÅheÜock.");

253 
__TBB_ASSERT
(
wrôî_hód
, 
NULL
);

254 
__TBB_ASSERT
(
wrôî_hód
->
°©us
==
a˘ive
, 
NULL
);

255 
sc›ed_lock
 *
	ga_wrôî_lock
 = 
wrôî_hód
;

256 
íd_wrôe
(
a_wrôî_lock
);

257 
__TBB_ASSERT
(
a_wrôî_lock
 !
wrôî_hód
, "InternalÉrror: AboutÅoÅurn writer_head into danglingÑeference.");

258 
dñëe
 
	ga_wrôî_lock
;

260 
íd_ªad
();

264 
	gªadî_wrôî_lock
::
íd_wrôe
(
sc›ed_lock
 *
I
) {

265 
__TBB_ASSERT
(
I
==
wrôî_hód
, "InternalÉrror: can't unlockáÅhreadÅhat isÇot holdingÅheÜock.");

266 
	gmy_cuºít_wrôî
 = 
tbb_thªad
::
id
();

267 
ITT_NOTIFY
(
sync_ªÀasög
, 
this
);

268 i‡(
	gI
->
	g√xt
) {

269 
	gwrôî_hód
 = 
I
->
√xt
;

270 
	gwrôî_hód
->
	g°©us
 = 
a˘ive
;

273 
__TBB_ASSERT
(
wrôî_hód
, 
NULL
);

274 i‡(
„tch_™d_™d
(
rdr_cou¡_™d_Êags
, ~(
WFLAG1
+
WFLAG2
)Ë& 
	gRFLAG
) {

275 
unblock_ªadîs
();

277 
	gwrôî_hód
.
„tch_™d_°‹e
(
NULL
);

278 i‡(
	gI
 !
wrôî_èû
.
com∑ª_™d_sw≠
(
NULL
, 
I
)) {

279 
•ö_waô_whûe_eq
(
I
->
√xt
, (
sc›ed_lock
 *)
NULL
);

280 
__TBB_ASSERT
(
I
->
√xt
, "There should beáÇode followingÅheÜast writer.");

281 
£t_√xt_wrôî
(
I
->
√xt
);

286 
	gªadî_wrôî_lock
::
íd_ªad
() {

287 
ITT_NOTIFY
(
sync_ªÀasög
, 
this
);

288 
__TBB_ASSERT
(
rdr_cou¡_™d_Êags
 >
RC_INCR
, "unlock() called butÇoÑeaders holdÅheÜock.");

289 
	grdr_cou¡_™d_Êags
 -
RC_INCR
;

292 
ölöe
 
boﬁ
 
	gªadî_wrôî_lock
::
is_cuºít_wrôî
() {

293  
my_cuºít_wrôî
==
this_tbb_thªad
::
gë_id
();

297 
	gªadî_wrôî_lock
::
sc›ed_lock
::
öã∫Æ_c⁄°ru˘
 (
ªadî_wrôî_lock
& 
lock
) {

298 
muãx
 = &
lock
;

299 
	g√xt
 = 
NULL
;

300 
	g°©us
 = 
waôög
;

301 i‡(
	gmuãx
->
is_cuºít_wrôî
()) {

303 
	gtbb
::
öã∫Æ
::
throw_ex˚±i⁄
(
tbb
::öã∫Æ::
eid_im¥›î_lock
);

306 (Ë
	gmuãx
->
°¨t_wrôe
(
this
);

310 
ölöe
 
	gªadî_wrôî_lock
::
sc›ed_lock
::sc›ed_lock(Ë: 
muãx
(
NULL
), 
√xt
(NULL) {

311 
	g°©us
 = 
waôög
;

315 
	gªadî_wrôî_lock
::
sc›ed_lock_ªad
::
öã∫Æ_c⁄°ru˘
 (
ªadî_wrôî_lock
& 
lock
) {

316 
muãx
 = &
lock
;

317 
	g√xt
 = 
NULL
;

318 
	g°©us
 = 
waôög
;

319 i‡(
	gmuãx
->
is_cuºít_wrôî
()) {

321 
	gtbb
::
öã∫Æ
::
throw_ex˚±i⁄
(
tbb
::öã∫Æ::
eid_im¥›î_lock
);

324 
	gmuãx
->
°¨t_ªad
(
this
);

328 
ölöe
 
	gªadî_wrôî_lock
::
sc›ed_lock_ªad
::sc›ed_lock_ªad(Ë: 
muãx
(
NULL
), 
√xt
(NULL) {

329 
	g°©us
 = 
waôög
;

332 
	gªadî_wrôî_lock
::
sc›ed_lock
::
öã∫Æ_de°roy
() {

333 i‡(
muãx
) {

334 
__TBB_ASSERT
(
muãx
->
is_cuºít_wrôî
(), "~scoped_lock() destroyed byÅhread differentÅhanÅhreadÅhat holdsÜock.");

335 
	gmuãx
->
íd_wrôe
(
this
);

337 
	g°©us
 = 
övÆid
;

340 
	gªadî_wrôî_lock
::
sc›ed_lock_ªad
::
öã∫Æ_de°roy
() {

341 i‡(
muãx
)

342 
muãx
->
íd_ªad
();

343 
	g°©us
 = 
övÆid
;

	@viper/concurrentqueue-src/benchmarks/tbb/reader_writer_lock.h

21 #i‚de‡
__TBB_ªadî_wrôî_lock_H


22 
	#__TBB_ªadî_wrôî_lock_H


	)

24 
	~"tbb_thªad.h
"

25 
	~"tbb_Æloˇt‹.h
"

26 
	~"©omic.h
"

28 
«me•a˚
 
	gtbb
 {

29 
«me•a˚
 
	göãrÁ˚5
 {

34 ˛as†
	cªadî_wrôî_lock
 : 
tbb
::
öã∫Æ
::
no_c›y
 {

35 
public
:

36 
‰õnd
 
˛ass
 
sc›ed_lock
;

37 
‰õnd
 
˛ass
 
	gsc›ed_lock_ªad
;

74 
	e°©us_t
 { 
	gwaôög_n⁄blockög
, 
	gwaôög
, 
	ga˘ive
, 
	gövÆid
 };

77 
ªadî_wrôî_lock
() {

78 
öã∫Æ_c⁄°ru˘
();

82 ~
ªadî_wrôî_lock
() {

83 
öã∫Æ_de°roy
();

89 ˛as†
	csc›ed_lock
 : 
tbb
::
öã∫Æ
::
no_c›y
 {

90 
public
:

91 
‰õnd
 
˛ass
 
ªadî_wrôî_lock
;

94 
sc›ed_lock
(
ªadî_wrôî_lock
& 
lock
) {

95 
öã∫Æ_c⁄°ru˘
(
lock
);

99 ~
sc›ed_lock
() {

100 
öã∫Æ_de°roy
();

103 * 
›î©‹
 
√w
(
size_t
 
s
) {

104  
	gtbb
::
öã∫Æ
::
Æloˇã_vü_h™dÀr_v3
(
s
);

106 
›î©‹
 
dñëe
(* 
p
) {

107 
	gtbb
::
öã∫Æ
::
dóŒoˇã_vü_h™dÀr_v3
(
p
);

110 
	g¥iv©e
:

112 
ªadî_wrôî_lock
 *
muãx
;

114 
sc›ed_lock
* 
	g√xt
;

116 
	g©omic
<
	g°©us_t
> 
	g°©us
;

119 
sc›ed_lock
();

121 
__TBB_EXPORTED_METHOD
 
öã∫Æ_c⁄°ru˘
(
ªadî_wrôî_lock
&);

122 
__TBB_EXPORTED_METHOD
 
öã∫Æ_de°roy
();

126 ˛as†
	csc›ed_lock_ªad
 : 
tbb
::
öã∫Æ
::
no_c›y
 {

127 
public
:

128 
‰õnd
 
˛ass
 
ªadî_wrôî_lock
;

131 
sc›ed_lock_ªad
(
ªadî_wrôî_lock
& 
lock
) {

132 
öã∫Æ_c⁄°ru˘
(
lock
);

136 ~
sc›ed_lock_ªad
() {

137 
öã∫Æ_de°roy
();

140 * 
›î©‹
 
√w
(
size_t
 
s
) {

141  
	gtbb
::
öã∫Æ
::
Æloˇã_vü_h™dÀr_v3
(
s
);

143 
›î©‹
 
dñëe
(* 
p
) {

144 
	gtbb
::
öã∫Æ
::
dóŒoˇã_vü_h™dÀr_v3
(
p
);

147 
	g¥iv©e
:

149 
ªadî_wrôî_lock
 *
muãx
;

151 
sc›ed_lock_ªad
 *
	g√xt
;

153 
	g©omic
<
	g°©us_t
> 
	g°©us
;

156 
sc›ed_lock_ªad
();

158 
__TBB_EXPORTED_METHOD
 
öã∫Æ_c⁄°ru˘
(
ªadî_wrôî_lock
&);

159 
__TBB_EXPORTED_METHOD
 
öã∫Æ_de°roy
();

168 
__TBB_EXPORTED_METHOD
 
lock
();

175 
boﬁ
 
__TBB_EXPORTED_METHOD
 
åy_lock
();

182 
__TBB_EXPORTED_METHOD
 
lock_ªad
();

187 
boﬁ
 
__TBB_EXPORTED_METHOD
 
åy_lock_ªad
();

190 
__TBB_EXPORTED_METHOD
 
u∆ock
();

192 
	g¥iv©e
:

193 
__TBB_EXPORTED_METHOD
 
öã∫Æ_c⁄°ru˘
();

194 
__TBB_EXPORTED_METHOD
 
öã∫Æ_de°roy
();

198 
boﬁ
 
°¨t_wrôe
(
sc›ed_lock
 *);

200 
£t_√xt_wrôî
(
sc›ed_lock
 *
w
);

202 
íd_wrôe
(
sc›ed_lock
 *);

204 
boﬁ
 
is_cuºít_wrôî
();

208 
°¨t_ªad
(
sc›ed_lock_ªad
 *);

210 
unblock_ªadîs
();

212 
íd_ªad
();

215 
	g©omic
<
	gsc›ed_lock_ªad
*> 
	gªadî_hód
;

217 
	g©omic
<
	gsc›ed_lock
*> 
	gwrôî_hód
;

219 
	g©omic
<
	gsc›ed_lock
*> 
	gwrôî_èû
;

221 
	gtbb_thªad
::
id
 
my_cuºít_wrôî
;

223 
	g©omic
<
	guöçå_t
> 
	grdr_cou¡_™d_Êags
;

228 
usög
 
	göãrÁ˚5
::
ªadî_wrôî_lock
;

	@viper/concurrentqueue-src/benchmarks/tbb/recursive_mutex.cpp

21 
	~"tbb/ªcursive_muãx.h
"

22 
	~"ôt_nŸify.h
"

24 
«me•a˚
 
	gtbb
 {

26 
	gªcursive_muãx
::
sc›ed_lock
::
öã∫Æ_acquúe
–
ªcursive_muãx
& 
m
 ) {

27 #i‡
_WIN32
||
_WIN64


28  
m
.
°©e
 ) {

29 
INITIALIZED
:

35 
E¡îCrôiˇlSe˘i⁄
–&
m
.
im∂
 );

37 
	gDESTROYED
:

38 
__TBB_ASSERT
(
Ál£
,"recursive_mutex::scoped_lock: mutexálready destroyed");

41 
__TBB_ASSERT
(
Ál£
,"recursive_mutex::scoped_lock: illegal mutex state");

45 
	gîr‹_code
 = 
±hªad_muãx_lock
(&
m
.
im∂
);

46 if–
	gîr‹_code
 )

47 
	gtbb
::
öã∫Æ
::
h™dÀ_≥º‹
(
îr‹_code
,"recursive_mutex::scoped_lock:Öthread_mutex_lock failed");

49 
	gmy_muãx
 = &
m
;

52 
	gªcursive_muãx
::
sc›ed_lock
::
öã∫Æ_ªÀa£
() {

53 
__TBB_ASSERT
–
my_muãx
, "recursive_mutex::scoped_lock:Çot holdingá mutex" );

54 #i‡
_WIN32
||
_WIN64


55  
	gmy_muãx
->
	g°©e
 ) {

56 
	gINITIALIZED
:

57 
LóveCrôiˇlSe˘i⁄
–&
my_muãx
->
im∂
 );

59 
	gDESTROYED
:

60 
__TBB_ASSERT
(
Ál£
,"recursive_mutex::scoped_lock: mutexálready destroyed");

63 
__TBB_ASSERT
(
Ál£
,"recursive_mutex::scoped_lock: illegal mutex state");

67 
	gîr‹_code
 = 
±hªad_muãx_u∆ock
(&
my_muãx
->
im∂
);

68 
__TBB_ASSERT_EX
(!
îr‹_code
, "recursive_mutex::scoped_lock:Öthread_mutex_unlock failed");

70 
	gmy_muãx
 = 
NULL
;

73 
boﬁ
 
	gªcursive_muãx
::
sc›ed_lock
::
öã∫Æ_åy_acquúe
–
ªcursive_muãx
& 
m
 ) {

74 #i‡
_WIN32
||
_WIN64


75  
m
.
°©e
 ) {

76 
INITIALIZED
:

78 
	gDESTROYED
:

79 
__TBB_ASSERT
(
Ál£
,"recursive_mutex::scoped_lock: mutexálready destroyed");

82 
__TBB_ASSERT
(
Ál£
,"recursive_mutex::scoped_lock: illegal mutex state");

86 
boﬁ
 
	gªsu…
;

87 #i‡
_WIN32
||
_WIN64


88 
	gªsu…
 = 
TryE¡îCrôiˇlSe˘i⁄
(&
m
.
im∂
)!=0;

90 
	gªsu…
 = 
±hªad_muãx_åylock
(&
m
.
im∂
)==0;

92 if–
	gªsu…
 )

93 
	gmy_muãx
 = &
m
;

94  
	gªsu…
;

97 
	gªcursive_muãx
::
öã∫Æ_c⁄°ru˘
() {

98 #i‡
_WIN32
||
_WIN64


99 
InôülizeCrôiˇlSe˘i⁄Ex
(&
im∂
, 4000, 0);

100 
	g°©e
 = 
INITIALIZED
;

102 
±hªad_muãx©å_t
 
	gmtx_©å
;

103 
	gîr‹_code
 = 
±hªad_muãx©å_öô
–&
mtx_©å
 );

104 if–
	gîr‹_code
 )

105 
	gtbb
::
öã∫Æ
::
h™dÀ_≥º‹
(
îr‹_code
,"recursive_mutex:Öthread_mutexattr_init failed");

107 
±hªad_muãx©å_£ây≥
–&
mtx_©å
, 
PTHREAD_MUTEX_RECURSIVE
 );

108 
	gîr‹_code
 = 
±hªad_muãx_öô
–&
im∂
, &
mtx_©å
 );

109 if–
	gîr‹_code
 )

110 
	gtbb
::
öã∫Æ
::
h™dÀ_≥º‹
(
îr‹_code
,"recursive_mutex:Öthread_mutex_init failed");

111 
±hªad_muãx©å_de°roy
–&
mtx_©å
 );

113 
ITT_SYNC_CREATE
(&
im∂
, 
_T
("tbb::recursive_mutex"), _T(""));

116 
	gªcursive_muãx
::
öã∫Æ_de°roy
() {

117 #i‡
_WIN32
||
_WIN64


118  
°©e
 ) {

119 
INITIALIZED
:

120 
DñëeCrôiˇlSe˘i⁄
(&
im∂
);

122 
	gDESTROYED
:

123 
__TBB_ASSERT
(
Ál£
,"recursive_mutex:álready destroyed");

126 
__TBB_ASSERT
(
Ál£
,"recursive_mutex: illegal state for destruction");

129 
	g°©e
 = 
DESTROYED
;

131 
	gîr‹_code
 = 
±hªad_muãx_de°roy
(&
im∂
);

132 
__TBB_ASSERT_EX
(!
îr‹_code
,"recursive_mutex:Öthread_mutex_destroy failed");

	@viper/concurrentqueue-src/benchmarks/tbb/recursive_mutex.h

21 #i‚de‡
__TBB_ªcursive_muãx_H


22 
	#__TBB_ªcursive_muãx_H


	)

24 #i‡
_WIN32
||
_WIN64


25 
	~"machöe/wödows_≠i.h
"

27 
	~<±hªad.h
>

30 
	~<√w
>

31 
	~"Æig√d_•a˚.h
"

32 
	~"tbb_°ddef.h
"

33 
	~"tbb_¥ofûög.h
"

35 
«me•a˚
 
	gtbb
 {

39 ˛as†
	cªcursive_muãx
 : 
öã∫Æ
::
muãx_c›y_dïªˇãd_™d_dißbÀd
 {

40 
public
:

42 
ªcursive_muãx
() {

43 #i‡
TBB_USE_ASSERT
 || 
TBB_USE_THREADING_TOOLS


44 
öã∫Æ_c⁄°ru˘
();

46 #i‡
_WIN32
||
_WIN64


47 
InôülizeCrôiˇlSe˘i⁄Ex
(&
im∂
, 4000, 0);

49 
±hªad_muãx©å_t
 
	gmtx_©å
;

50 
	gîr‹_code
 = 
±hªad_muãx©å_öô
–&
mtx_©å
 );

51 if–
	gîr‹_code
 )

52 
	gtbb
::
öã∫Æ
::
h™dÀ_≥º‹
(
îr‹_code
,"recursive_mutex:Öthread_mutexattr_init failed");

54 
±hªad_muãx©å_£ây≥
–&
mtx_©å
, 
PTHREAD_MUTEX_RECURSIVE
 );

55 
	gîr‹_code
 = 
±hªad_muãx_öô
–&
im∂
, &
mtx_©å
 );

56 if–
	gîr‹_code
 )

57 
	gtbb
::
öã∫Æ
::
h™dÀ_≥º‹
(
îr‹_code
,"recursive_mutex:Öthread_mutex_init failed");

59 
±hªad_muãx©å_de°roy
–&
mtx_©å
 );

64 ~
ªcursive_muãx
() {

65 #i‡
TBB_USE_ASSERT


66 
öã∫Æ_de°roy
();

68 #i‡
_WIN32
||
_WIN64


69 
DñëeCrôiˇlSe˘i⁄
(&
im∂
);

71 
±hªad_muãx_de°roy
(&
im∂
);

77 
˛ass
 
	gsc›ed_lock
;

78 
‰õnd
 
˛ass
 
	gsc›ed_lock
;

83 ˛as†
	csc›ed_lock
: 
öã∫Æ
::
no_c›y
 {

84 
public
:

86 
sc›ed_lock
(Ë: 
my_muãx
(
NULL
) {};

89 
sc›ed_lock
–
ªcursive_muãx
& 
muãx
 ) {

90 #i‡
TBB_USE_ASSERT


91 
	gmy_muãx
 = &
muãx
;

93 
acquúe
–
muãx
 );

97 ~
sc›ed_lock
() {

98 if–
	gmy_muãx
 )

99 
ªÀa£
();

103 
acquúe
–
ªcursive_muãx
& 
muãx
 ) {

104 #i‡
TBB_USE_ASSERT


105 
öã∫Æ_acquúe
–
muãx
 );

107 
	gmy_muãx
 = &
muãx
;

108 
	gmuãx
.
lock
();

113 
boﬁ
 
åy_acquúe
–
ªcursive_muãx
& 
muãx
 ) {

114 #i‡
TBB_USE_ASSERT


115  
öã∫Æ_åy_acquúe
–
muãx
 );

117 
boﬁ
 
	gªsu…
 = 
muãx
.
åy_lock
();

118 if–
	gªsu…
 )

119 
	gmy_muãx
 = &
muãx
;

120  
	gªsu…
;

125 
ªÀa£
() {

126 #i‡
TBB_USE_ASSERT


127 
öã∫Æ_ªÀa£
();

129 
	gmy_muãx
->
u∆ock
();

130 
	gmy_muãx
 = 
NULL
;

134 
	g¥iv©e
:

136 
ªcursive_muãx
* 
my_muãx
;

139 
__TBB_EXPORTED_METHOD
 
öã∫Æ_acquúe
–
ªcursive_muãx
& 
m
 );

142 
boﬁ
 
__TBB_EXPORTED_METHOD
 
öã∫Æ_åy_acquúe
–
ªcursive_muãx
& 
m
 );

145 
__TBB_EXPORTED_METHOD
 
öã∫Æ_ªÀa£
();

147 
‰õnd
 
˛ass
 
	gªcursive_muãx
;

151 c⁄° 
boﬁ
 
	gis_rw_muãx
 = 
Ál£
;

152 c⁄° 
boﬁ
 
	gis_ªcursive_muãx
 = 
åue
;

153 c⁄° 
boﬁ
 
	gis_Áú_muãx
 = 
Ál£
;

158 
lock
() {

159 #i‡
TBB_USE_ASSERT


160 
	gÆig√d_•a˚
<
	gsc›ed_lock
> 
	gtmp
;

161 
√w
(
tmp
.
begö
()Ë
sc›ed_lock
(*
this
);

163 #i‡
_WIN32
||
_WIN64


164 
E¡îCrôiˇlSe˘i⁄
(&
im∂
);

166 
	gîr‹_code
 = 
±hªad_muãx_lock
(&
im∂
);

167 if–
	gîr‹_code
 )

168 
	gtbb
::
öã∫Æ
::
h™dÀ_≥º‹
(
îr‹_code
,"recursive_mutex:Öthread_mutex_lock failed");

175 
boﬁ
 
åy_lock
() {

176 #i‡
TBB_USE_ASSERT


177 
	gÆig√d_•a˚
<
	gsc›ed_lock
> 
	gtmp
;

178  (
√w
(
tmp
.
begö
()Ë
	gsc›ed_lock
)->
öã∫Æ_åy_acquúe
(*
this
);

180 #i‡
_WIN32
||
_WIN64


181  
TryE¡îCrôiˇlSe˘i⁄
(&
im∂
)!=0;

183  
±hªad_muãx_åylock
(&
im∂
)==0;

189 
u∆ock
() {

190 #i‡
TBB_USE_ASSERT


191 
	gÆig√d_•a˚
<
	gsc›ed_lock
> 
	gtmp
;

192 
	gsc›ed_lock
& 
	gs
 = *
tmp
.
begö
();

193 
	gs
.
	gmy_muãx
 = 
this
;

194 
	gs
.
öã∫Æ_ªÀa£
();

196 #i‡
_WIN32
||
_WIN64


197 
LóveCrôiˇlSe˘i⁄
(&
im∂
);

199 
±hªad_muãx_u∆ock
(&
im∂
);

205 #i‡
_WIN32
||
_WIN64


206 
LPCRITICAL_SECTION
 
	t«tive_h™dÀ_ty≥
;

208 
±hªad_muãx_t
* 
	t«tive_h™dÀ_ty≥
;

210 
«tive_h™dÀ_ty≥
 
«tive_h™dÀ
(Ë{  (
	g«tive_h™dÀ_ty≥
Ë&
	gim∂
; }

212 
	g¥iv©e
:

213 #i‡
_WIN32
||
_WIN64


214 
CRITICAL_SECTION
 
im∂
;

215 
	e°©e_t
 {

216 
	gINITIALIZED
=0x1234,

217 
	gDESTROYED
=0x789A,

218 } 
	g°©e
;

220 
±hªad_muãx_t
 
	gim∂
;

224 
__TBB_EXPORTED_METHOD
 
öã∫Æ_c⁄°ru˘
();

227 
__TBB_EXPORTED_METHOD
 
öã∫Æ_de°roy
();

230 
__TBB_DEFINE_PROFILING_SET_NAME
(
ªcursive_muãx
)

	@viper/concurrentqueue-src/benchmarks/tbb/runtime_loader.h

21 #i‚de‡
__TBB_ru¡ime_lﬂdî_H


22 
	#__TBB_ru¡ime_lﬂdî_H


	)

24 #i‡! 
TBB_PREVIEW_RUNTIME_LOADER


25 #îr‹ 
Së
 
TBB_PREVIEW_RUNTIME_LOADER
 
to
 
ö˛ude
 
ru¡ime_lﬂdî
.
h


28 
	~"tbb_°ddef.h
"

29 
	~<˛imôs
>

31 #i‡
_MSC_VER


32 #i‡! 
__TBB_NO_IMPLICIT_LINKAGE


33 #ifde‡
_DEBUG


34 #¥agm®
commít
–
lökî
, "/nodefaultlib:tbb_debug.lib" )

35 #¥agm®
commít
–
lökî
, "/defaultlib:tbbproxy_debug.lib" )

37 #¥agm®
commít
–
lökî
, "/nodefaultlib:tbb.lib" )

38 #¥agm®
commít
–
lökî
, "/defaultlib:tbbproxy.lib" )

43 
«me•a˚
 
	gtbb
 {

45 
«me•a˚
 
	göãrÁ˚6
 {

85 ˛as†
	cru¡ime_lﬂdî
 : 
tbb
::
öã∫Æ
::
no_c›y
 {

87 
public
:

90 
	eîr‹_mode
 {

91 
em_°©us
,

92 
	gem_throw
,

93 
	gem_ab‹t


97 
	eîr‹_code
 {

98 
	gec_ok
,

99 
	gec_bad_ˇŒ
,

100 
	gec_bad_¨g
,

101 
	gec_bad_lib
,

102 
	gec_bad_vî
,

103 
	gec_no_lib


107 
ru¡ime_lﬂdî
–
îr‹_mode
 
mode
 = 
em_ab‹t
 );

115 
ru¡ime_lﬂdî
(

116 c⁄° * 
∑th
[],

117 
mö_vî
 = 
TBB_INTERFACE_VERSION
,

118 
max_vî
 = 
INT_MAX
,

119 
îr‹_mode
 
mode
 = 
em_ab‹t


123 ~
ru¡ime_lﬂdî
();

150 
îr‹_code


151 
lﬂd
(

152 c⁄° * 
∑th
[],

153 
mö_vî
 = 
TBB_INTERFACE_VERSION
,

154 
max_vî
 = 
INT_MAX


163 
îr‹_code
 
°©us
();

165 
	g¥iv©e
:

167 
îr‹_mode
 c⁄° 
my_mode
;

168 
îr‹_code
 
	gmy_°©us
;

169 
boﬁ
 
	gmy_lﬂded
;

175 
usög
 
	göãrÁ˚6
::
ru¡ime_lﬂdî
;

	@viper/concurrentqueue-src/benchmarks/tbb/scalable_allocator.h

21 #i‚de‡
__TBB_sˇœbÀ_Æloˇt‹_H


22 
	#__TBB_sˇœbÀ_Æloˇt‹_H


	)

25 
	~<°ddef.h
>

26 #i‡!
_MSC_VER


27 
	~<°döt.h
>

30 #i‡!
deföed
(
__˝lu•lus
Ë&& 
__ICC
==1100

31 #¥agm®
w¨nög
 (
push
)

32 #¥agm®
w¨nög
 (
dißbÀ
: 991)

35 #ifde‡
__˝lu•lus


39 #i‡
_MSC_VER
 >= 1400

40 
	#__TBB_EXPORTED_FUNC
 
__cde˛


	)

42 
	#__TBB_EXPORTED_FUNC


	)

47 * 
__TBB_EXPORTED_FUNC
 
sˇœbÀ_mÆloc
 (
size_t
 
size
);

51 
__TBB_EXPORTED_FUNC
 
sˇœbÀ_‰ì
 (* 
±r
);

55 * 
__TBB_EXPORTED_FUNC
 
sˇœbÀ_ªÆloc
 (* 
±r
, 
size_t
 
size
);

59 * 
__TBB_EXPORTED_FUNC
 
sˇœbÀ_ˇŒoc
 (
size_t
 
nobj
, size_à
size
);

63 
__TBB_EXPORTED_FUNC
 
sˇœbÀ_posix_memÆign
 (** 
mem±r
, 
size_t
 
Æignmít
, size_à
size
);

67 * 
__TBB_EXPORTED_FUNC
 
sˇœbÀ_Æig√d_mÆloc
 (
size_t
 
size
, size_à
Æignmít
);

71 * 
__TBB_EXPORTED_FUNC
 
sˇœbÀ_Æig√d_ªÆloc
 (* 
±r
, 
size_t
 
size
, size_à
Æignmít
);

75 
__TBB_EXPORTED_FUNC
 
sˇœbÀ_Æig√d_‰ì
 (* 
±r
);

81 
size_t
 
__TBB_EXPORTED_FUNC
 
sˇœbÀ_msize
 (* 
±r
);

85 
TBBMALLOC_OK
,

86 
TBBMALLOC_INVALID_PARAM
,

87 
TBBMALLOC_UNSUPPORTED
,

88 
TBBMALLOC_NO_MEMORY
,

89 
TBBMALLOC_NO_EFFECT


90 } 
	tSˇœbÀAŒoˇti⁄Resu…
;

95 
TBBMALLOC_USE_HUGE_PAGES
,

97 
USE_HUGE_PAGES
 = 
TBBMALLOC_USE_HUGE_PAGES
,

100 
TBBMALLOC_SET_SOFT_HEAP_LIMIT


101 } 
	tAŒoˇti⁄ModeP¨am
;

105 
__TBB_EXPORTED_FUNC
 
sˇœbÀ_Æloˇti⁄_mode
(
∑øm
, 
öçå_t
 
vÆue
);

111 
TBBMALLOC_CLEAN_ALL_BUFFERS
,

114 
TBBMALLOC_CLEAN_THREAD_BUFFERS


115 } 
	tSˇœbÀAŒoˇti⁄Cmd
;

119 
__TBB_EXPORTED_FUNC
 
sˇœbÀ_Æloˇti⁄_comm™d
(
cmd
, *
∑øm
);

121 #ifde‡
__˝lu•lus


125 #ifde‡
__˝lu•lus


128 
«me•a˚
 
rml
 {

129 
˛ass
 
Mem‹yPoﬁ
;

131 *(*
	tøwAŒocTy≥
)(
	töçå_t
 
	tpoﬁ_id
, 
	tsize_t
 &
	tbyãs
);

132 (*
øwFªeTy≥
)(
	töçå_t
 
	tpoﬁ_id
, * 
	tøw_±r
, 
	tsize_t
 
	tøw_byãs
);

144 
	sMemPoﬁPﬁicy
 {

146 
TBBMALLOC_POOL_VERSION
 = 1

149 
øwAŒocTy≥
 
pAŒoc
;

150 
øwFªeTy≥
 
pFªe
;

152 
size_t
 
gønuœrôy
;

153 
vîsi⁄
;

156 
fixedPoﬁ
 : 1,

158 
kìpAŒMem‹y
 : 1,

159 
ª£rved
 : 30;

161 
MemPoﬁPﬁicy
(
øwAŒocTy≥
 
pAŒoc_
, 
øwFªeTy≥
 
pFªe_
,

162 
size_t
 
gønuœrôy_
 = 0, 
boﬁ
 
fixedPoﬁ_
 = 
Ál£
,

163 
boﬁ
 
kìpAŒMem‹y_
 = 
Ál£
) :

164 
pAŒoc
(
pAŒoc_
), 
pFªe
(
pFªe_
), 
gønuœrôy
(
gønuœrôy_
), 
vîsi⁄
(
TBBMALLOC_POOL_VERSION
),

165 
fixedPoﬁ
(
fixedPoﬁ_
), 
kìpAŒMem‹y
(
kìpAŒMem‹y_
),

166 
ª£rved
(0) {}

171 
	eMemPoﬁEº‹
 {

173 
POOL_OK
 = 
TBBMALLOC_OK
,

175 
INVALID_POLICY
 = 
TBBMALLOC_INVALID_PARAM
,

177 
UNSUPPORTED_POLICY
 = 
TBBMALLOC_UNSUPPORTED
,

179 
NO_MEMORY
 = 
TBBMALLOC_NO_MEMORY
,

181 
NO_EFFECT
 = 
TBBMALLOC_NO_EFFECT


184 
MemPoﬁEº‹
 
poﬁ_¸óã_v1
(
öçå_t
 
poﬁ_id
, c⁄° 
MemPoﬁPﬁicy
 *
pﬁicy
,

185 
rml
::
Mem‹yPoﬁ
 **
poﬁ
);

187 
boﬁ
 
poﬁ_de°roy
(
Mem‹yPoﬁ
* 
memPoﬁ
);

188 *
poﬁ_mÆloc
(
Mem‹yPoﬁ
* 
memPoﬁ
, 
size_t
 
size
);

189 *
poﬁ_ªÆloc
(
Mem‹yPoﬁ
* 
memPoﬁ
, *
obje˘
, 
size_t
 
size
);

190 *
poﬁ_Æig√d_mÆloc
(
Mem‹yPoﬁ
* 
mPoﬁ
, 
size_t
 
size
, size_à
Æignmít
);

191 *
poﬁ_Æig√d_ªÆloc
(
Mem‹yPoﬁ
* 
mPoﬁ
, *
±r
, 
size_t
 
size
, size_à
Æignmít
);

192 
boﬁ
 
poﬁ_ª£t
(
Mem‹yPoﬁ
* 
memPoﬁ
);

193 
boﬁ
 
poﬁ_‰ì
(
Mem‹yPoﬁ
 *
memPoﬁ
, *
obje˘
);

196 
	~<√w
>

199 #i‚de‡
__TBB_NO_IMPLICIT_LINKAGE


200 
	#__TBB_NO_IMPLICIT_LINKAGE
 1

	)

201 
	~"tbb_°ddef.h
"

202 #unde‡
__TBB_NO_IMPLICIT_LINKAGE


204 
	~"tbb_°ddef.h
"

207 #i‡
__TBB_ALLOCATOR_CONSTRUCT_VARIADIC


208 
	~<utûôy
>

211 
«me•a˚
 
tbb
 {

213 #i‡
_MSC_VER
 && !
deföed
(
__INTEL_COMPILER
)

215 #¥agm®
w¨nög
 (
push
)

216 #¥agm®
w¨nög
 (
dißbÀ
: 4100)

223 
ãm∂©e
<
ty≥«me
 
T
>

224 ˛as†
	csˇœbÀ_Æloˇt‹
 {

225 
public
:

226 
ty≥«me
 
	töã∫Æ
::
	tÆloˇt‹_ty≥
<
	tT
>::
	tvÆue_ty≥
 value_type;

227 
vÆue_ty≥
* 
	tpoöãr
;

228 c⁄° 
	tvÆue_ty≥
* 
	tc⁄°_poöãr
;

229 
vÆue_ty≥
& 
	tª„ªn˚
;

230 c⁄° 
	tvÆue_ty≥
& 
	tc⁄°_ª„ªn˚
;

231 
size_t
 
	tsize_ty≥
;

232 
±rdiff_t
 
	tdif„ªn˚_ty≥
;

233 
ãm∂©e
<
˛ass
 
U
> 
	sªböd
 {

234 
sˇœbÀ_Æloˇt‹
<
	tU
> 
	tŸhî
;

237 
sˇœbÀ_Æloˇt‹
(Ë
throw
() {}

238 
sˇœbÀ_Æloˇt‹
–c⁄° sˇœbÀ_Æloˇt‹& ) 
throw
() {}

239 
ãm∂©e
<
ty≥«me
 
U
> 
sˇœbÀ_Æloˇt‹
(c⁄° sˇœbÀ_Æloˇt‹<U>&Ë
throw
() {}

241 
poöãr
 
addªss
(
ª„ªn˚
 
x
) const { &x;}

242 
c⁄°_poöãr
 
addªss
(
c⁄°_ª„ªn˚
 
x
) const { &x;}

245 
poöãr
 
Æloˇã
–
size_ty≥
 
n
, const * =0 ) {

246  
°©ic_ˇ°
<
poöãr
>–
sˇœbÀ_mÆloc
–
n
 * (
vÆue_ty≥
) ) );

250 
dóŒoˇã
–
poöãr
 
p
, 
size_ty≥
 ) {

251 
sˇœbÀ_‰ì
–
p
 );

255 
size_ty≥
 
max_size
(Ëc⁄° 
throw
() {

256 
size_ty≥
 
absﬁuãmax
 = 
°©ic_ˇ°
<size_ty≥>(-1Ë/  (
vÆue_ty≥
);

257  (
absﬁuãmax
 > 0 ?ábsolutemax : 1);

259 #i‡
__TBB_ALLOCATOR_CONSTRUCT_VARIADIC


260 
ãm∂©e
<
ty≥«me
 
U
,Åy≥«me... 
Args
>

261 
c⁄°ru˘
(
U
 *
p
, 
Args
&&... 
¨gs
)

262 { ::
√w
((*)
p
Ë
U
(
°d
::
f‹w¨d
<
Args
>(
¨gs
)...); }

264 #i‡
__TBB_CPP11_RVALUE_REF_PRESENT


265 
c⁄°ru˘
–
poöãr
 
p
, 
vÆue_ty≥
&& 
vÆue
 ) { ::
√w
((*)’)ËvÆue_ty≥–
°d
::
move
( value ) ); }

267 
c⁄°ru˘
–
poöãr
 
p
, c⁄° 
vÆue_ty≥
& 
vÆue
 ) {::
√w
((*)(p)) value_type(value);}

269 
de°roy
–
poöãr
 
p
 ) {p->~
vÆue_ty≥
();}

272 #i‡
_MSC_VER
 && !
deföed
(
__INTEL_COMPILER
)

273 #¥agm®
w¨nög
 (
p›
)

278 
ãm∂©e
<>

279 
˛ass
 
sˇœbÀ_Æloˇt‹
<> {

280 
public
:

281 * 
	tpoöãr
;

282 c⁄° * 
	tc⁄°_poöãr
;

283 
	tvÆue_ty≥
;

284 
ãm∂©e
<
˛ass
 
U
> 
	sªböd
 {

285 
sˇœbÀ_Æloˇt‹
<
	tU
> 
	tŸhî
;

289 
ãm∂©e
<
ty≥«me
 
T
,Åy≥«mê
U
>

290 
ölöe
 
boﬁ
 
›î©‹
==–c⁄° 
sˇœbÀ_Æloˇt‹
<
T
>&, c⁄° sˇœbÀ_Æloˇt‹<
U
>& ) { 
åue
;}

292 
ãm∂©e
<
ty≥«me
 
T
,Åy≥«mê
U
>

293 
ölöe
 
boﬁ
 
›î©‹
!=–c⁄° 
sˇœbÀ_Æloˇt‹
<
T
>&, c⁄° sˇœbÀ_Æloˇt‹<
U
>& ) { 
Ál£
;}

297 #i‡
_MSC_VER


298 #i‡(
__TBB_BUILD
 || 
__TBBMALLOC_BUILD
Ë&& !
	$deföed
(
__TBBMALLOC_NO_IMPLICIT_LINKAGE
)

299 
	#__TBBMALLOC_NO_IMPLICIT_LINKAGE
 1

	)

302 #i‡!
__TBBMALLOC_NO_IMPLICIT_LINKAGE


303 #ifde‡
_DEBUG


304 #¥agm®
	`commít
(
lib
, "tbbmalloc_debug.lib")

306 #¥agm®
	`commít
(
lib
, "tbbmalloc.lib")

315 #i‡!
	`deföed
(
__˝lu•lus
Ë&& 
__ICC
==1100

316 #¥agm®
	$w¨nög
 (
p›
)

	@viper/concurrentqueue-src/benchmarks/tbb/scheduler.cpp

21 
	~"cu°om_scheduÀr.h
"

22 
	~"scheduÀr_utûôy.h
"

23 
	~"govîn‹.h
"

24 
	~"m¨kë.h
"

25 
	~"¨ía.h
"

26 
	~"maûbox.h
"

27 
	~"ob£rvî_¥oxy.h
"

28 
	~"tbb/tbb_machöe.h
"

29 
	~"tbb/©omic.h
"

31 
«me•a˚
 
	gtbb
 {

32 
«me•a˚
 
	göã∫Æ
 {

39 
gíîic_scheduÀr
* (*
AŒoˇãScheduÀrPå
)–
¨ía
*, 
size_t
 
ödex
 );

41 
ölöe
 
gíîic_scheduÀr
* 
Æloˇã_scheduÀr
 ( 
¨ía
* 
a
, 
size_t
 
ödex
 ) {

42  
AŒoˇãScheduÀrPå
(
a
, 
ödex
);

45 #i‡
__TBB_TASK_GROUP_CONTEXT


46 
c⁄ãxt_°©e_¥›ag©i⁄_muãx_ty≥
 
	gthe_c⁄ãxt_°©e_¥›ag©i⁄_muãx
;

48 
uöçå_t
 
	gthe_c⁄ãxt_°©e_¥›ag©i⁄_ïoch
 = 0;

53 
èsk_group_c⁄ãxt
 
the_dummy_c⁄ãxt
—ask_group_c⁄ãxt::
isﬁ©ed
);

56 
ScheduÀr_O√TimeInôüliz©i⁄
 ( 
boﬁ
 
ôt_¥e£¡
 ) {

57 
	gAŒoˇãScheduÀrPå
 = 
ôt_¥e£¡
 ? &
cu°om_scheduÀr
<
DeÁu…ScheduÀrTøôs
>::
Æloˇã_scheduÀr
 :

58 &
cu°om_scheduÀr
<
I¡ñScheduÀrTøôs
>::
Æloˇã_scheduÀr
;

59 #i‡
__TBB_TASK_GROUP_CONTEXT


61 
__TBB_ASSERT
(!(
èsk_group_c⁄ãxt
::
low_unu£d_°©e_bô
 & (èsk_group_c⁄ãxt::low_unu£d_°©e_bô-1)), 
NULL
);

62 
	gthe_dummy_c⁄ãxt
.
	gmy_°©e
 = 
èsk_group_c⁄ãxt
::
low_unu£d_°©e_bô
;

63 #i‡
__TBB_TASK_PRIORITY


65 
	gthe_dummy_c⁄ãxt
.
	gmy_¥i‹ôy
 = 
num_¥i‹ôy_Àvñs
 - 1;

76 
	gscheduÀr
::~
scheduÀr
( ) {}

82 #i‡
_MSC_VER
 && !
deföed
(
__INTEL_COMPILER
)

84 #¥agm®
w¨nög
(
push
)

85 #¥agm®
w¨nög
(
dißbÀ
:4355)

88 
gíîic_scheduÀr
::gíîic_scheduÀr–
¨ía
* 
a
, 
size_t
 
ödex
 )

89 : 
my_°ólög_thªshﬁd
(0)

90 , 
my_m¨kë
(
NULL
)

91 , 
my_øndom
–
this
 )

92 , 
my_‰ì_li°
(
NULL
)

93 #i‡
__TBB_HOARD_NONLOCAL_TASKS


94 , 
my_n⁄loˇl_‰ì_li°
(
NULL
)

96 , 
my_dummy_èsk
(
NULL
)

97 , 
my_ªf_cou¡
(1)

98 , 
my_auto_öôülized
(
Ál£
)

99 #i‡
__TBB_COUNT_TASK_NODES


100 , 
my_èsk_node_cou¡
(0)

102 , 
my_smÆl_èsk_cou¡
(1)

103 , 
my_ªtu∫_li°
(
NULL
)

104 #i‡
__TBB_TASK_GROUP_CONTEXT


105 , 
my_loˇl_˘x_li°_upd©e
(
make_©omic
(
uöçå_t
(0)))

107 #i‡
__TBB_TASK_PRIORITY


108 , 
my_ofÊﬂded_èsks
(
NULL
)

109 , 
my_ofÊﬂded_èsk_li°_èû_lök
(
NULL
)

110 , 
my_loˇl_ªlﬂd_ïoch
(0)

111 , 
my_poﬁ_ªshufÊög_≥ndög
(
Ál£
)

113 #i‡
__TBB_TASK_GROUP_CONTEXT


114 , 
my_n⁄loˇl_˘x_li°_upd©e
(
make_©omic
(
uöçå_t
(0)))

116 #i‡
__TBB_SURVIVE_THREAD_SWITCH
 && 
TBB_USE_ASSERT


117 , 
my_cûk_°©e
(
cs_n⁄e
)

120 
	gmy_¨ía_ödex
 = 
ödex
;

121 
	gmy_¨ía_¶Ÿ
 = 0;

122 
	gmy_¨ía
 = 
a
;

123 
	gmy_ö√rmo°_ru¬ög_èsk
 = 
NULL
;

124 
	gmy_di•©chög_èsk
 = 
NULL
;

125 
	gmy_afföôy_id
 = 0;

126 #i‡
__TBB_SCHEDULER_OBSERVER


127 
	gmy_œ°_globÆ_ob£rvî
 = 
NULL
;

128 
	gmy_œ°_loˇl_ob£rvî
 = 
NULL
;

130 #i‡
__TBB_TASK_PRIORITY


131 
	gmy_ªf_t›_¥i‹ôy
 = 
NULL
;

132 
	gmy_ªf_ªlﬂd_ïoch
 = 
NULL
;

135 
	gmy_dummy_èsk
 = &
Æloˇã_èsk
–(
èsk
), 
__TBB_CONTEXT_ARG
(
NULL
, NULL) );

136 #i‡
__TBB_TASK_GROUP_CONTEXT


137 
	gmy_c⁄ãxt_li°_hód
.
	gmy_¥ev
 = &
my_c⁄ãxt_li°_hód
;

138 
	gmy_c⁄ãxt_li°_hód
.
	gmy_√xt
 = &
my_c⁄ãxt_li°_hód
;

139 
ITT_SYNC_CREATE
(&
my_c⁄ãxt_li°_muãx
, 
SyncTy≥_ScheduÀr
, 
SyncObj_C⁄ãxtsLi°
);

141 
	gmy_dummy_èsk
->
¥efix
().
	gªf_cou¡
 = 2;

142 
ITT_SYNC_CREATE
(&
my_dummy_èsk
->
¥efix
().
ªf_cou¡
, 
SyncTy≥_ScheduÀr
, 
SyncObj_W‹kîLi„Cy˛eMgmt
);

143 
ITT_SYNC_CREATE
(&
my_ªtu∫_li°
, 
SyncTy≥_ScheduÀr
, 
SyncObj_TaskRëu∫Li°
);

144 
as£π_èsk_poﬁ_vÆid
();

145 #i‡
__TBB_SURVIVE_THREAD_SWITCH


146 
	gmy_cûk_unw©ch_thunk
.
	groutöe
 = 
NULL
;

150 #i‡
_MSC_VER
 && !
deföed
(
__INTEL_COMPILER
)

151 #¥agm®
w¨nög
(
p›
)

154 #i‡
TBB_USE_ASSERT
 > 1

155 
	ggíîic_scheduÀr
::
as£π_èsk_poﬁ_vÆid
() const {

156 
acquúe_èsk_poﬁ
();

157 
èsk
** 
	gç
 = 
my_¨ía_¶Ÿ
->
èsk_poﬁ_±r
;

158 
__TBB_ASSERT
–
my_¨ía_¶Ÿ
->
my_èsk_poﬁ_size
 >
mö_èsk_poﬁ_size
, 
NULL
 );

159 c⁄° 
size_t
 
	gH
 = 
__TBB_lﬂd_ªœxed
(
my_¨ía_¶Ÿ
->
hód
);

160 c⁄° 
size_t
 
	gT
 = 
__TBB_lﬂd_ªœxed
(
my_¨ía_¶Ÿ
->
èû
);

161 
__TBB_ASSERT
–
H
 <
T
, 
NULL
 );

162  
size_t
 
	gi
 = 0; i < 
	gH
; ++i )

163 
__TBB_ASSERT
–
ç
[
i
] =
pois⁄ed_±r
, "TaskÖool corrupted" );

164  
size_t
 
	gi
 = 
H
; i < 
	gT
; ++i ) {

165 
__TBB_ASSERT
–(
uöçå_t
)
ç
[
i
] + 1 > 1u, "nil or invalidÅaskÖointer inÅhe deque" );

166 
__TBB_ASSERT
–
ç
[
i
]->
¥efix
().
°©e
 =
èsk
::
ªady
 ||

167 
ç
[
i
]->
¥efix
().
exåa_°©e
 =
es_èsk_¥oxy
, "task inÅhe deque has invalid state" );

169  
size_t
 
	gi
 = 
T
; i < 
	gmy_¨ía_¶Ÿ
->
	gmy_èsk_poﬁ_size
; ++i )

170 
__TBB_ASSERT
–
ç
[
i
] =
pois⁄ed_±r
, "TaskÖool corrupted" );

171 
ªÀa£_èsk_poﬁ
();

175 
	ggíîic_scheduÀr
::
öô_°ack_öfo
 () {

178 
__TBB_ASSERT
–!
my_°ólög_thªshﬁd
, "StealingÅhreshold hasálready been calculated" );

179 
size_t
 
	g°ack_size
 = 
my_m¨kë
->
w‹kî_°ack_size
();

180 #i‡
USE_WINTHREAD


181 #i‡
deföed
(
_MSC_VER
)&&_MSC_VER<1400 && !
_WIN64


182 
NT_TIB
 *
	g±eb
 = (NT_TIB*)
__TBB_machöe_gë_cuºít_ãb
();

184 
NT_TIB
 *
	g±eb
 = (NT_TIB*)
NtCuºítTeb
();

186 
__TBB_ASSERT
–&
±eb
 <Öãb->
SèckBa£
 && &±eb >Öãb->
SèckLimô
, "invalid stack info in TEB" );

187 
__TBB_ASSERT
–
°ack_size
 >0, "stack_sizeÇot initialized?" );

195 i‡–
is_w‹kî
(Ë|| 
	g°ack_size
 < 
	gMByã
 )

196 
	gmy_°ólög_thªshﬁd
 = (
uöçå_t
)
±eb
->
SèckBa£
 - 
°ack_size
 / 2;

198 
	gmy_°ólög_thªshﬁd
 = (
uöçå_t
)
±eb
->
SèckBa£
 - 
MByã
 / 2;

205 *
	g°ack_ba£
 = &
°ack_size
;

206 #i‡
__löux__
 && !
__bg__


207 #i‡
__TBB_ùf


208 *
	grsb_ba£
 = 
__TBB_gë_b•
();

210 
size_t
 
	g≈_°ack_size
 = 0;

211 *
	g°ack_limô
 = 
NULL
;

212 
±hªad_©å_t
 
	g≈_©å_°ack
;

213 if–0 =
±hªad_gë©å_≈
(
±hªad_£lf
(), &
≈_©å_°ack
) ) {

214 i‡–0 =
±hªad_©å_gë°ack
(&
≈_©å_°ack
, &
°ack_limô
, &
≈_°ack_size
) ) {

215 #i‡
__TBB_ùf


216 
±hªad_©å_t
 
	g©å_°ack
;

217 i‡–0 =
±hªad_©å_öô
(&
©å_°ack
) ) {

218 i‡–0 =
±hªad_©å_gë°acksize
(&
©å_°ack
, &
°ack_size
) ) {

219 i‡–
	g≈_°ack_size
 < 
	g°ack_size
 ) {

222 
	grsb_ba£
 = 
°ack_limô
;

223 
	g°ack_size
 = 
≈_°ack_size
/2;

225 
	g°ack_limô
 = (*)
°ack_limô
 + 
°ack_size
;

231 
±hªad_©å_de°roy
(&
©å_°ack
);

234 
	gmy_rsb_°ólög_thªshﬁd
 = (
uöçå_t
)((*)
rsb_ba£
 + 
°ack_size
/2);

237 
	g°ack_size
 = 
size_t
((*)
°ack_ba£
 - (*)
°ack_limô
);

239 
±hªad_©å_de°roy
(&
≈_©å_°ack
);

242 
__TBB_ASSERT
–
°ack_size
>0, "stack size must beÖositive" );

243 
	gmy_°ólög_thªshﬁd
 = (
uöçå_t
)((*)
°ack_ba£
 - 
°ack_size
/2);

247 #i‡
__TBB_TASK_GROUP_CONTEXT


253 
	ggíîic_scheduÀr
::
˛ónup_loˇl_c⁄ãxt_li°
 () {

255 
boﬁ
 
waô_f‹_c⁄cuºít_de°royîs_to_Àave
 = 
Ál£
;

256 
uöçå_t
 
	gloˇl_cou¡_¢≠shŸ
 = 
my_c⁄ãxt_°©e_¥›ag©i⁄_ïoch
;

257 
	gmy_loˇl_˘x_li°_upd©e
.
	g°‹e
<
	gªœxed
>(1);

260 
	g•ö_muãx
::
sc›ed_lock
 
lock
;

263 
©omic_„n˚
();

265 i‡–
	gmy_n⁄loˇl_˘x_li°_upd©e
.
	glﬂd
<
	gªœxed
>(Ë|| 
	gloˇl_cou¡_¢≠shŸ
 !
the_c⁄ãxt_°©e_¥›ag©i⁄_ïoch
 )

266 
lock
.
acquúe
(
my_c⁄ãxt_li°_muãx
);

269 
c⁄ãxt_li°_node_t
 *
	gnode
 = 
my_c⁄ãxt_li°_hód
.
my_√xt
;

270  
	gnode
 !&
my_c⁄ãxt_li°_hód
 ) {

271 
èsk_group_c⁄ãxt
 &
˘x
 = 
__TBB_gë_obje˘_ªf
—ask_group_c⁄ãxt, 
my_node
, 
node
);

272 
__TBB_ASSERT
–
__TBB_lﬂd_ªœxed
(
˘x
.
my_köd
Ë!
èsk_group_c⁄ãxt
::
bödög_ªquúed
, "Onlyá context boundÅoáÑootÅask can be detached" );

273 
	gnode
 = 
node
->
my_√xt
;

274 
__TBB_ASSERT
–
is_Æive
(
˘x
.
my_vîsi⁄_™d_åaôs
), "Walked intoá destroyed context while detaching contexts fromÅheÜocalÜist" );

276 i‡–
	göã∫Æ
::
as_©omic
(
˘x
.
my_köd
).
„tch_™d_°‹e
(
èsk_group_c⁄ãxt
::
dëached
Ë=èsk_group_c⁄ãxt::
dyög
 )

277 
waô_f‹_c⁄cuºít_de°royîs_to_Àave
 = 
åue
;

280 
	gmy_loˇl_˘x_li°_upd©e
.
	g°‹e
<
	gªÀa£
>(0);

282 i‡–
	gwaô_f‹_c⁄cuºít_de°royîs_to_Àave
 )

283 
•ö_waô_u¡û_eq
–
my_n⁄loˇl_˘x_li°_upd©e
, 0u );

287 
	ggíîic_scheduÀr
::
‰ì_scheduÀr
() {

288 
__TBB_ASSERT
–!
my_¨ía_¶Ÿ
, 
NULL
 );

289 #i‡
__TBB_TASK_GROUP_CONTEXT


290 
˛ónup_loˇl_c⁄ãxt_li°
();

292 
	g‰ì_èsk
<
	gsmÆl_loˇl_èsk
>–*
	gmy_dummy_èsk
 );

294 #i‡
__TBB_HOARD_NONLOCAL_TASKS


295  
èsk
* 
	gt
 = 
my_n⁄loˇl_‰ì_li°
 ) {

296 
èsk_¥efix
& 
p
 = 
t
->
¥efix
();

297 
	gmy_n⁄loˇl_‰ì_li°
 = 
p
.
√xt
;

298 
__TBB_ASSERT
–
p
.
‹igö
 &&Ö.‹igö!=
this
, 
NULL
 );

299 
‰ì_n⁄loˇl_smÆl_èsk
(*
t
);

303 
öçå_t
 
	gk
 = 1;

305  
èsk
* 
	gt
 = 
my_‰ì_li°
 ) {

306 
my_‰ì_li°
 = 
t
->
¥efix
().
√xt
;

307 
dóŒoˇã_èsk
(*
t
);

308 ++
	gk
;

310 if–
	gmy_ªtu∫_li°
==
∂ugged_ªtu∫_li°
() )

312 
	gmy_‰ì_li°
 = (
èsk
*)
__TBB_FëchAndSt‹eW
–&
my_ªtu∫_li°
, (
öçå_t
)
∂ugged_ªtu∫_li°
() );

314 #i‡
__TBB_COUNT_TASK_NODES


315 
	gmy_m¨kë
->
upd©e_èsk_node_cou¡
–
my_èsk_node_cou¡
 );

318 
__TBB_ASSERT
–
my_smÆl_èsk_cou¡
>=
k
, "my_small_task_count corrupted" );

319 
	ggovîn‹
::
sign_off
(
this
);

320 if–
__TBB_FëchAndAddW
–&
my_smÆl_èsk_cou¡
, -
k
 )==k )

321 
NFS_Fªe
–
this
 );

324 
	gèsk
& 
	ggíîic_scheduÀr
::
Æloˇã_èsk
–
size_t
 
numbî_of_byãs
,

325 
__TBB_CONTEXT_ARG
(
èsk
* 
∑ª¡
, 
èsk_group_c⁄ãxt
* 
c⁄ãxt
) ) {

326 
GATHER_STATISTIC
(++
my_cou¡îs
.
a˘ive_èsks
);

327 
èsk
 *
	gt
;

328 if–
	gnumbî_of_byãs
<=
quick_èsk_size
 ) {

329 #i‡
__TBB_HOARD_NONLOCAL_TASKS


330 if–(
t
 = 
my_n⁄loˇl_‰ì_li°
) ) {

331 
GATHER_STATISTIC
(--
my_cou¡îs
.
‰ì_li°_Àngth
);

332 
__TBB_ASSERT
–
t
->
°©e
()==
èsk
::
‰ìd
, "freeÜist ofÅasks is corrupted" );

333 
	gmy_n⁄loˇl_‰ì_li°
 = 
t
->
¥efix
().
√xt
;

336 if–(
	gt
 = 
my_‰ì_li°
) ) {

337 
GATHER_STATISTIC
(--
my_cou¡îs
.
‰ì_li°_Àngth
);

338 
__TBB_ASSERT
–
t
->
°©e
()==
èsk
::
‰ìd
, "freeÜist ofÅasks is corrupted" );

339 
	gmy_‰ì_li°
 = 
t
->
¥efix
().
√xt
;

340 } if–
	gmy_ªtu∫_li°
 ) {

342 
	gt
 = (
èsk
*)
__TBB_FëchAndSt‹eW
–&
my_ªtu∫_li°
, 0 );

343 
__TBB_ASSERT
–
t
, "anotherÅhreadÉmptiedÅhe my_return_list" );

344 
__TBB_ASSERT
–
t
->
¥efix
().
‹igö
==
this
, "taskÑeturnedÅo wrong my_return_list" );

345 
ITT_NOTIFY
–
sync_acquúed
, &
my_ªtu∫_li°
 );

346 
	gmy_‰ì_li°
 = 
t
->
¥efix
().
√xt
;

348 
	gt
 = (
èsk
*)((*)
NFS_AŒoˇã
–1, 
èsk_¥efix_ª£rv©i⁄_size
+
quick_èsk_size
, 
NULL
 ) + 
	gèsk_¥efix_ª£rv©i⁄_size
 );

349 #i‡
__TBB_COUNT_TASK_NODES


350 ++
	gmy_èsk_node_cou¡
;

352 
	gt
->
¥efix
().
	g‹igö
 = 
this
;

353 
	gt
->
¥efix
().
	g√xt
 = 0;

354 ++
	gmy_smÆl_èsk_cou¡
;

356 #i‡
__TBB_PREFETCHING


357 
èsk
 *
	gt_√xt
 = 
t
->
¥efix
().
√xt
;

358 if–!
	gt_√xt
 ) {

359 #i‡
__TBB_HOARD_NONLOCAL_TASKS


360 if–
	gmy_‰ì_li°
 )

361 
	gt_√xt
 = 
my_‰ì_li°
;

364 if–
	gmy_ªtu∫_li°
 )

365 
	gt_√xt
 = 
my_‰ì_li°
 = (
èsk
*)
__TBB_FëchAndSt‹eW
–&
my_ªtu∫_li°
, 0 );

367 if–
	gt_√xt
 ) {

368 
__TBB_˛_¥e„tch
(
t_√xt
);

369 
__TBB_˛_¥e„tch
(&
t_√xt
->
¥efix
());

373 
GATHER_STATISTIC
(++
my_cou¡îs
.
big_èsks
);

374 
	gt
 = (
èsk
*)((*)
NFS_AŒoˇã
–1, 
èsk_¥efix_ª£rv©i⁄_size
+
numbî_of_byãs
, 
NULL
 ) + 
	gèsk_¥efix_ª£rv©i⁄_size
 );

375 #i‡
__TBB_COUNT_TASK_NODES


376 ++
	gmy_èsk_node_cou¡
;

378 
	gt
->
¥efix
().
	g‹igö
 = 
NULL
;

380 
	gèsk_¥efix
& 
	gp
 = 
t
->
¥efix
();

381 #i‡
__TBB_TASK_GROUP_CONTEXT


382 
	gp
.
	gc⁄ãxt
 = 
c⁄ãxt
;

385 
	gp
.
	gow√r
 = 
this
;

386 
	gp
.
	gªf_cou¡
 = 0;

388 
	gp
.
	gdïth
 = 0;

389 
	gp
.
	g∑ª¡
 = 
∑ª¡
;

392 
	gp
.
	gexåa_°©e
 = 0;

393 
	gp
.
	gafföôy
 = 0;

394 
	gp
.
	g°©e
 = 
èsk
::
Æloˇãd
;

395  *
	gt
;

398 
	ggíîic_scheduÀr
::
‰ì_n⁄loˇl_smÆl_èsk
–
èsk
& 
t
 ) {

399 
__TBB_ASSERT
–
t
.
°©e
()==
èsk
::
‰ìd
, 
NULL
 );

400 
	ggíîic_scheduÀr
& 
	gs
 = *
°©ic_ˇ°
<
gíîic_scheduÀr
*>(
t
.
¥efix
().
‹igö
);

401 
__TBB_ASSERT
–&
s
!=
this
, 
NULL
 );

403 
èsk
* 
	gﬁd
 = 
s
.
my_ªtu∫_li°
;

404 if–
	gﬁd
==
∂ugged_ªtu∫_li°
() )

407 
	gt
.
¥efix
().
	g√xt
 = 
ﬁd
;

408 
ITT_NOTIFY
–
sync_ªÀasög
, &
s
.
my_ªtu∫_li°
 );

409 if–
as_©omic
(
s
.
my_ªtu∫_li°
).
com∑ª_™d_sw≠
(&
t
, 
ﬁd
 )==old ) {

410 #i‡
__TBB_PREFETCHING


411 
__TBB_˛_evi˘
(&
t
.
¥efix
());

412 
__TBB_˛_evi˘
(&
t
);

417 
dóŒoˇã_èsk
(
t
);

418 if–
__TBB_FëchAndDe¸emítWªÀa£
–&
s
.
my_smÆl_èsk_cou¡
 )==1 ) {

421 
NFS_Fªe
–&
s
 );

425 
size_t
 
	ggíîic_scheduÀr
::
¥ï¨e_èsk_poﬁ
 ( size_à
num_èsks
 ) {

426 
size_t
 
T
 = 
__TBB_lﬂd_ªœxed
(
my_¨ía_¶Ÿ
->
èû
);

427 i‡–
	gT
 + 
	gnum_èsks
 <
my_¨ía_¶Ÿ
->
my_èsk_poﬁ_size
 )

428  
T
;

429 
acquúe_èsk_poﬁ
();

430 
size_t
 
	gH
 = 
__TBB_lﬂd_ªœxed
(
my_¨ía_¶Ÿ
->
hód
);

431 
	gT
 -
H
;

432 
size_t
 
	g√w_size
 = 
T
 + 
num_èsks
;

433 
__TBB_ASSERT
(!
my_¨ía_¶Ÿ
->
my_èsk_poﬁ_size
 || my_¨ía_¶Ÿ->my_èsk_poﬁ_sizê>
mö_èsk_poﬁ_size
, 
NULL
);

434 if–!
	gmy_¨ía_¶Ÿ
->
	gmy_èsk_poﬁ_size
 ) {

435 
__TBB_ASSERT
–!
ö_¨ía
(Ë&& !
my_¨ía_¶Ÿ
->
èsk_poﬁ_±r
, 
NULL
 );

436 if–
	g√w_size
 < 
	gmö_èsk_poﬁ_size
 )Çew_sizê
mö_èsk_poﬁ_size
;

437 
	gmy_¨ía_¶Ÿ
->
Æloˇã_èsk_poﬁ
–
√w_size
 );

442 i‡–
	g√w_size
 <
my_¨ía_¶Ÿ
->
my_èsk_poﬁ_size
 - 
mö_èsk_poﬁ_size
/4 ) {

444 
memmove
–
my_¨ía_¶Ÿ
->
èsk_poﬁ_±r
, my_¨ía_¶Ÿ->èsk_poﬁ_±∏+ 
H
, 
T
 * (
èsk
*) );

445 
	gmy_¨ía_¶Ÿ
->
fûl_wôh_ˇ«ry_∑âîn
–
T
, 
my_¨ía_¶Ÿ
->
èû
 );

446 
commô_ªloˇãd_èsks
(
T
);

451 i‡–
	g√w_size
 < 2 * 
	gmy_¨ía_¶Ÿ
->
	gmy_èsk_poﬁ_size
 )

452 
	g√w_size
 = 2 * 
my_¨ía_¶Ÿ
->
my_èsk_poﬁ_size
;

453 
èsk
** 
	gﬁd_poﬁ
 = 
my_¨ía_¶Ÿ
->
èsk_poﬁ_±r
;

454 
	gmy_¨ía_¶Ÿ
->
Æloˇã_èsk_poﬁ
–
√w_size
 );

455 
__TBB_ASSERT
–
T
 <
my_¨ía_¶Ÿ
->
my_èsk_poﬁ_size
, "newÅaskÖool isÅoo short" );

456 
mem˝y
–
my_¨ía_¶Ÿ
->
èsk_poﬁ_±r
, 
ﬁd_poﬁ
 + 
H
, 
T
 * (
èsk
*) );

457 
commô_ªloˇãd_èsks
(
T
);

458 
__TBB_ASSERT
–
ﬁd_poﬁ
, "attemptÅo free NULL TaskPool" );

459 
NFS_Fªe
–
ﬁd_poﬁ
 );

461 
as£π_èsk_poﬁ_vÆid
();

462  
	gT
;

470 
ölöe
 
	ggíîic_scheduÀr
::
acquúe_èsk_poﬁ
() const {

471 i‡–!
ö_¨ía
() )

473 
boﬁ
 
	gsync_¥ï¨e_d⁄e
 = 
Ál£
;

474  
©omic_backoff
 
	gb
;;b.
∑u£
() ) {

475 #i‡
TBB_USE_ASSERT


476 
__TBB_ASSERT
–
my_¨ía_¶Ÿ
 =
my_¨ía
->
my_¶Ÿs
 + 
my_¨ía_ödex
, "invalidárena slot index" );

479 
èsk
** 
	gç
 = 
my_¨ía_¶Ÿ
->
èsk_poﬁ
;

480 
__TBB_ASSERT
–
ç
 =
LockedTaskPoﬁ
 ||Å∞=
my_¨ía_¶Ÿ
->
èsk_poﬁ_±r
, "slot ownership corrupt?" );

482 if–
	gmy_¨ía_¶Ÿ
->
	gèsk_poﬁ
 !
LockedTaskPoﬁ
 &&

483 
as_©omic
(
my_¨ía_¶Ÿ
->
èsk_poﬁ
).
com∑ª_™d_sw≠
(
LockedTaskPoﬁ
, my_¨ía_¶Ÿ->
èsk_poﬁ_±r
 ) == my_arena_slot->task_pool_ptr )

486 
ITT_NOTIFY
(
sync_acquúed
, 
my_¨ía_¶Ÿ
);

489 if–!
	gsync_¥ï¨e_d⁄e
 ) {

491 
ITT_NOTIFY
(
sync_¥ï¨e
, 
my_¨ía_¶Ÿ
);

492 
	gsync_¥ï¨e_d⁄e
 = 
åue
;

496 
__TBB_ASSERT
–
my_¨ía_¶Ÿ
->
èsk_poﬁ
 =
LockedTaskPoﬁ
, "notÑeallyácquiredÅaskÖool" );

499 
ölöe
 
	ggíîic_scheduÀr
::
ªÀa£_èsk_poﬁ
() const {

500 i‡–!
ö_¨ía
() )

502 
__TBB_ASSERT
–
my_¨ía_¶Ÿ
, "weáreÇot inárena" );

503 
__TBB_ASSERT
–
my_¨ía_¶Ÿ
->
èsk_poﬁ
 =
LockedTaskPoﬁ
, "arena slot isÇotÜocked" );

504 
ITT_NOTIFY
(
sync_ªÀasög
, 
my_¨ía_¶Ÿ
);

505 
__TBB_°‹e_wôh_ªÀa£
–
my_¨ía_¶Ÿ
->
èsk_poﬁ
, my_¨ía_¶Ÿ->
èsk_poﬁ_±r
 );

514 
ölöe
 
èsk
** 
	ggíîic_scheduÀr
::
lock_èsk_poﬁ
–
¨ía_¶Ÿ
* 
vi˘im_¨ía_¶Ÿ
 ) const {

515 
èsk
** 
vi˘im_èsk_poﬁ
;

516 
boﬁ
 
	gsync_¥ï¨e_d⁄e
 = 
Ál£
;

517  
©omic_backoff
 
	gbackoff
;; ) {

518 
	gvi˘im_èsk_poﬁ
 = 
vi˘im_¨ía_¶Ÿ
->
èsk_poﬁ
;

522 i‡–
	gvi˘im_èsk_poﬁ
 =
Em±yTaskPoﬁ
 ) {

524 if–
sync_¥ï¨e_d⁄e
 )

525 
ITT_NOTIFY
(
sync_ˇn˚l
, 
vi˘im_¨ía_¶Ÿ
);

528 if–
	gvi˘im_èsk_poﬁ
 !
LockedTaskPoﬁ
 &&

529 
as_©omic
(
vi˘im_¨ía_¶Ÿ
->
èsk_poﬁ
).
com∑ª_™d_sw≠
(
LockedTaskPoﬁ
, 
vi˘im_èsk_poﬁ
 ) == victim_task_pool )

532 
ITT_NOTIFY
(
sync_acquúed
, 
vi˘im_¨ía_¶Ÿ
);

535 if–!
	gsync_¥ï¨e_d⁄e
 ) {

537 
ITT_NOTIFY
(
sync_¥ï¨e
, 
vi˘im_¨ía_¶Ÿ
);

538 
	gsync_¥ï¨e_d⁄e
 = 
åue
;

540 
GATHER_STATISTIC
–++
my_cou¡îs
.
thõves_c⁄Êi˘s
 );

542 #i‡
__TBB_STEALING_ABORT_ON_CONTENTION


543 if(!
	gbackoff
.
bounded_∑u£
()) {

549 if(
	gmy_¨ía
->
	gmy_limô
 >= 16)

550  
Em±yTaskPoﬁ
;

551 
__TBB_Yõld
();

554 
	gbackoff
.
∑u£
();

557 
__TBB_ASSERT
–
vi˘im_èsk_poﬁ
 =
Em±yTaskPoﬁ
 ||

558 (
vi˘im_¨ía_¶Ÿ
->
èsk_poﬁ
 =
LockedTaskPoﬁ
 && 
vi˘im_èsk_poﬁ
 != LockedTaskPool),

560  
	gvi˘im_èsk_poﬁ
;

563 
ölöe
 
	ggíîic_scheduÀr
::
u∆ock_èsk_poﬁ
–
¨ía_¶Ÿ
* 
vi˘im_¨ía_¶Ÿ
,

564 
èsk
** 
vi˘im_èsk_poﬁ
 ) const {

565 
__TBB_ASSERT
–
vi˘im_¨ía_¶Ÿ
, "empty victimárena slotÖointer" );

566 
__TBB_ASSERT
–
vi˘im_¨ía_¶Ÿ
->
èsk_poﬁ
 =
LockedTaskPoﬁ
, "victimárena slot isÇotÜocked" );

567 
ITT_NOTIFY
(
sync_ªÀasög
, 
vi˘im_¨ía_¶Ÿ
);

568 
__TBB_°‹e_wôh_ªÀa£
–
vi˘im_¨ía_¶Ÿ
->
èsk_poﬁ
, 
vi˘im_èsk_poﬁ
 );

572 
ölöe
 
èsk
* 
	ggíîic_scheduÀr
::
¥ï¨e_f‹_•awnög
–èsk* 
t
 ) {

573 
__TBB_ASSERT
–
t
->
°©e
()==
èsk
::
Æloˇãd
, "attemptÅo spawnÅaskÅhat isÇot in 'allocated' state" );

574 
	gt
->
¥efix
().
	g°©e
 = 
èsk
::
ªady
;

575 #i‡
TBB_USE_ASSERT


576 if–
èsk
* 
	g∑ª¡
 = 
t
->
∑ª¡
() ) {

577 
öã∫Æ
::
ª„ªn˚_cou¡
 
ªf_cou¡
 = 
∑ª¡
->
¥efix
().ref_count;

578 
__TBB_ASSERT
–
ªf_cou¡
>=0, "attemptÅo spawnÅask whoseÖarent hasáÑef_count<0" );

579 
__TBB_ASSERT
–
ªf_cou¡
!=0, "attemptÅo spawnÅask whoseÖarent hasáÑef_count==0 (forgotÅo set_ref_count?)" );

580 
	g∑ª¡
->
¥efix
().
	gexåa_°©e
 |
es_ªf_cou¡_a˘ive
;

583 
afföôy_id
 
	gd°_thªad
 = 
t
->
¥efix
().
afföôy
;

584 
__TBB_ASSERT
–
d°_thªad
 =0 || 
is_vîsi⁄_3_èsk
(*
t
),

586 if–
	gd°_thªad
 !0 && 
d°_thªad
 !
my_afföôy_id
 ) {

587 
èsk_¥oxy
& 
¥oxy
 = (èsk_¥oxy&)
Æloˇã_èsk
( (task_proxy),

588 
__TBB_CONTEXT_ARG
(
NULL
, NULL) );

590 
	g¥oxy
.
¥efix
().
	gexåa_°©e
 = 
es_èsk_¥oxy
;

591 
	g¥oxy
.
	goutbox
 = &
my_¨ía
->
maûbox
(
d°_thªad
);

593 
	g¥oxy
.
	gèsk_™d_èg
 = 
öçå_t
(
t
Ë| 
èsk_¥oxy
::
loˇti⁄_mask
;

594 #i‡
__TBB_TASK_PRIORITY


595 
	g¥oxy
.
¥efix
().
	gc⁄ãxt
 = 
t
->¥efix().
c⁄ãxt
;

597 
ITT_NOTIFY
–
sync_ªÀasög
, 
¥oxy
.
outbox
 );

599 
	g¥oxy
.
	goutbox
->
push
(
¥oxy
);

600  &
	g¥oxy
;

602  
	gt
;

607 
	ggíîic_scheduÀr
::
loˇl_•awn
–
èsk
& 
fú°
,Åask*& 
√xt
 ) {

608 
__TBB_ASSERT
–
govîn‹
::
is_£t
(
this
), 
NULL
 );

609 i‡–&
	gfú°
.
¥efix
().
	g√xt
 =&
√xt
 ) {

611 
size_t
 
T
 = 
¥ï¨e_èsk_poﬁ
( 1 );

612 
	gmy_¨ía_¶Ÿ
->
	gèsk_poﬁ_±r
[
T
] = 
¥ï¨e_f‹_•awnög
–&
fú°
 );

613 
commô_•aw√d_èsks
–
T
 + 1 );

617 
èsk
 *
	g¨r
[
mö_èsk_poﬁ_size
];

618 
	gÁ°_ªvî£_ve˘‹
<
	gèsk
*> 
èsks
(
¨r
, 
mö_èsk_poﬁ_size
);

619 
èsk
 *
	gt_√xt
 = 
NULL
;

620  
èsk
* 
	gt
 = &
fú°
; ;Å = 
t_√xt
 ) {

624 
boﬁ
 
íd
 = &
t
->
¥efix
().
√xt
 == &next;

625 
	gt_√xt
 = 
t
->
¥efix
().
√xt
;

626 
	gèsks
.
push_back
–
¥ï¨e_f‹_•awnög
(
t
) );

627 if–
	gíd
 )

630 
size_t
 
	gnum_èsks
 = 
èsks
.
size
();

631 
size_t
 
	gT
 = 
¥ï¨e_èsk_poﬁ
–
num_èsks
 );

632 
	gèsks
.
c›y_mem‹y
–
my_¨ía_¶Ÿ
->
èsk_poﬁ_±r
 + 
T
 );

633 
commô_•aw√d_èsks
–
T
 + 
num_èsks
 );

635 i‡–!
ö_¨ía
() )

636 
íãr_¨ía
();

637 
	gmy_¨ía
->
	gadvîti£_√w_w‹k
< 
	gåue
>();

638 
as£π_èsk_poﬁ_vÆid
();

641 
	ggíîic_scheduÀr
::
loˇl_•awn_roŸ_™d_waô
–
èsk
& 
fú°
,Åask*& 
√xt
 ) {

642 
__TBB_ASSERT
–
govîn‹
::
is_£t
(
this
), 
NULL
 );

643 
__TBB_ASSERT
–&
fú°
, 
NULL
 );

644 
auto_em±y_èsk
 
dummy
–
__TBB_CONTEXT_ARG
(
this
, 
fú°
.
¥efix
().
c⁄ãxt
) );

645 
	göã∫Æ
::
ª„ªn˚_cou¡
 
n
 = 0;

646  
èsk
* 
	gt
=&
fú°
; ;Å=
t
->
¥efix
().
√xt
 ) {

647 ++
n
;

648 
__TBB_ASSERT
–!
t
->
¥efix
().
∑ª¡
, "notáÑootÅask, orálreadyÑunning" );

649 
	gt
->
¥efix
().
	g∑ª¡
 = &
dummy
;

650 if–&
	gt
->
¥efix
().
	g√xt
==&
√xt
 ) ;

651 #i‡
__TBB_TASK_GROUP_CONTEXT


652 
__TBB_ASSERT
–
t
->
¥efix
().
c⁄ãxt
 =t->¥efix().
√xt
->prefix().context,

656 
	gdummy
.
¥efix
().
	gªf_cou¡
 = 
n
+1;

657 if–
	gn
>1 )

658 
loˇl_•awn
–*
fú°
.
¥efix
().
√xt
,Çext );

659 
loˇl_waô_f‹_Æl
–
dummy
, &
fú°
 );

662 
	gtbb
::
öã∫Æ
::
gíîic_scheduÀr
::
•awn
–
èsk
& 
fú°
,Åask*& 
√xt
 ) {

663 
	ggovîn‹
::
loˇl_scheduÀr
()->
loˇl_•awn
–
fú°
, 
√xt
 );

666 
	gtbb
::
öã∫Æ
::
gíîic_scheduÀr
::
•awn_roŸ_™d_waô
–
èsk
& 
fú°
,Åask*& 
√xt
 ) {

667 
	ggovîn‹
::
loˇl_scheduÀr
()->
loˇl_•awn_roŸ_™d_waô
–
fú°
, 
√xt
 );

670 
	gtbb
::
öã∫Æ
::
gíîic_scheduÀr
::
íqueue
–
èsk
& 
t
, * 
¥io
 ) {

671 
gíîic_scheduÀr
 *
	gs
 = 
govîn‹
::
loˇl_scheduÀr
();

673 
__TBB_ASSERT
–
s
->
my_¨ía
, "thread isÇot inányárena" );

674 
	gs
->
	gmy_¨ía
->
íqueue_èsk
(
t
, (
öçå_t
)
¥io
, 
s
->
my_øndom
 );

677 #i‡
__TBB_TASK_PRIORITY


678 ˛as†
	cauto_ödiˇt‹
 : 
no_c›y
 {

679 vﬁ©ûê
boﬁ
& 
my_ödiˇt‹
;

680 
	gpublic
:

681 
auto_ödiˇt‹
 ( vﬁ©ûê
boﬁ
& 
ödiˇt‹
 ) : 
my_ödiˇt‹
(ödiˇt‹Ë{ my_ödiˇt‹ = 
åue
 ;}

682 ~
auto_ödiˇt‹
 (Ë{ 
	gmy_ödiˇt‹
 = 
Ál£
; }

685 
èsk
* 
	ggíîic_scheduÀr
::
wönow_èsk_poﬁ
 () {

686 
GATHER_STATISTIC
–++
my_cou¡îs
.
¥io_wönowögs
 );

687 
__TBB_ASSERT
–
ö_¨ía
(), 
NULL
 );

688 
__TBB_ASSERT
–
my_ofÊﬂded_èsks
, "AtÜeast oneÅask isÉxpectedÅo beálready offloaded" );

695 
auto_ödiˇt‹
 
ödiˇt‹
(
my_poﬁ_ªshufÊög_≥ndög
);

698 
size_t
 
	gT0
 = 
__TBB_lﬂd_ªœxed
(
my_¨ía_¶Ÿ
->
èû
);

699 
__TBB_°‹e_ªœxed
–
my_¨ía_¶Ÿ
->
èû
, 
__TBB_lﬂd_ªœxed
(my_¨ía_¶Ÿ->
hód
) - 1 );

700 
©omic_„n˚
();

701 
size_t
 
	gH
 = 
__TBB_lﬂd_ªœxed
(
my_¨ía_¶Ÿ
->
hód
);

702 
size_t
 
	gT
 = 
__TBB_lﬂd_ªœxed
(
my_¨ía_¶Ÿ
->
èû
);

703 
__TBB_ASSERT
–(
öçå_t
)
T
 <(öçå_t)
T0
, 
NULL
);

704 
__TBB_ASSERT
–(
öçå_t
)
H
 >(öçå_t)
T
 || (H =
T0
 && T =T0), 
NULL
 );

705 
boﬁ
 
	gacquúed
 = 
Ál£
;

706 i‡–
	gH
 =
T
 ) {

708 i‡–
H
 >
T0
 ) {

710 
ª£t_deque_™d_Àave_¨ía
– 
Ál£
 );

711  
	gNULL
;

718 
	gacquúed
 = 
åue
;

719 
acquúe_èsk_poﬁ
();

720 
	gH
 = 
__TBB_lﬂd_ªœxed
(
my_¨ía_¶Ÿ
->
hód
);

721 i‡–
	gH
 >
T0
 ) {

722 
ª£t_deque_™d_Àave_¨ía
– 
åue
 );

723  
	gNULL
;

726 
size_t
 
	g§c
,

727 
	gd°
 = 
T0
;

729  
	g§c
 = 
H
; sr¯< 
	gT0
; ++src ) {

730 
	gèsk
 &
	gt
 = *
my_¨ía_¶Ÿ
->
èsk_poﬁ_±r
[
§c
];

731 
öçå_t
 
	gp
 = 
¥i‹ôy
(
t
);

732 i‡–
	gp
 < *
	gmy_ªf_t›_¥i‹ôy
 ) {

735 
	gd°
 = 
§c
;

736 
ofÊﬂd_èsk
–
t
, 
p
 );

740  ++
	g§c
; sr¯< 
	gT0
; ++src ) {

741 
	gèsk
 &
	gt
 = *
my_¨ía_¶Ÿ
->
èsk_poﬁ_±r
[
§c
];

742 
öçå_t
 
	gp
 = 
¥i‹ôy
(
t
);

743 i‡–
	gp
 < *
	gmy_ªf_t›_¥i‹ôy
 )

744 
ofÊﬂd_èsk
–
t
, 
p
 );

746 
	gmy_¨ía_¶Ÿ
->
	gèsk_poﬁ_±r
[
d°
++] = &
t
;

748 
__TBB_ASSERT
–
T0
 >
d°
, 
NULL
 );

749 
èsk
 *
	gt
 = 
H
 < 
d°
 ? 
my_¨ía_¶Ÿ
->
èsk_poﬁ_±r
[--d°] : 
NULL
;

750 i‡–
	gH
 =
d°
 ) {

752 
ª£t_deque_™d_Àave_¨ía
–
acquúed
 );

754 i‡–
	gacquúed
 ) {

755 
__TBB_ASSERT
–!
is_pois⁄ed
(
my_¨ía_¶Ÿ
->
èsk_poﬁ_±r
[
H
]), 
NULL
 );

756 
__TBB_°‹e_ªœxed
–
my_¨ía_¶Ÿ
->
èû
, 
d°
 );

757 
ªÀa£_èsk_poﬁ
();

760 
__TBB_ASSERT
–!
is_pois⁄ed
(
my_¨ía_¶Ÿ
->
èsk_poﬁ_±r
[
H
]), 
NULL
 );

763 
__TBB_°‹e_wôh_ªÀa£
–
my_¨ía_¶Ÿ
->
èû
, 
d°
 );

765 
	gmy_¨ía_¶Ÿ
->
fûl_wôh_ˇ«ry_∑âîn
–
d°
, 
T0
 );

766 
as£π_èsk_poﬁ_vÆid
();

767  
	gt
;

770 
èsk
* 
	ggíîic_scheduÀr
::
ªlﬂd_èsks
 (Åask*& 
ofÊﬂded_èsks
,Åask**& 
ofÊﬂded_èsk_li°_lök
, 
öçå_t
 
t›_¥i‹ôy
 ) {

771 
GATHER_STATISTIC
–++
my_cou¡îs
.
¥io_ªlﬂds
 );

772 
__TBB_ASSERT
–!
ö_¨ía
(), 
NULL
 );

773 
èsk
 *
	g¨r
[
mö_èsk_poﬁ_size
];

774 
	gÁ°_ªvî£_ve˘‹
<
	gèsk
*> 
èsks
(
¨r
, 
mö_èsk_poﬁ_size
);

775 
èsk
 **
	glök
 = &
ofÊﬂded_èsks
;

776 
èsk
 *
	gt
;

777  (
	gt
 = *
lök
) ) {

778 
èsk
** 
√xt_±r
 = &
t
->
¥efix
().
√xt_ofÊﬂded
;

779 i‡–
¥i‹ôy
(*
t
Ë>
t›_¥i‹ôy
 ) {

780 
èsks
.
push_back
–
t
 );

783 
èsk
* 
	g√xt
 = *
√xt_±r
;

784 
	gt
->
¥efix
().
	gow√r
 = 
this
;

785 
__TBB_ASSERT
–
t
->
¥efix
().
°©e
 =
èsk
::
ªady
 ||Å->¥efix().
exåa_°©e
 =
es_èsk_¥oxy
, 
NULL
 );

786 *
	glök
 = 
√xt
;

789 
	glök
 = 
√xt_±r
;

792 i‡–
	glök
 =&
ofÊﬂded_èsks
 ) {

793 
ofÊﬂded_èsks
 = 
NULL
;

794 #i‡
TBB_USE_ASSERT


795 
	gofÊﬂded_èsk_li°_lök
 = 
NULL
;

799 
__TBB_ASSERT
–
lök
, 
NULL
 );

801 *
	glök
 = 
NULL
;

802 
	gofÊﬂded_èsk_li°_lök
 = 
lök
;

804 
__TBB_ASSERT
–
lök
, 
NULL
 );

805 
size_t
 
	gnum_èsks
 = 
èsks
.
size
();

806 i‡–
	gnum_èsks
 ) {

807 
GATHER_STATISTIC
–++
my_cou¡îs
.
¥io_èsks_ªlﬂded
 );

808 
size_t
 
	gT
 = 
¥ï¨e_èsk_poﬁ
–
num_èsks
 );

809 
	gèsks
.
c›y_mem‹y
–
my_¨ía_¶Ÿ
->
èsk_poﬁ_±r
 + 
T
 );

810 i‡–--
	gnum_èsks
 ) {

811 
commô_•aw√d_èsks
–
T
 +
num_èsks
 );

812 
íãr_¨ía
();

813 
	gmy_¨ía
->
	gadvîti£_√w_w‹k
< 
	gåue
>();

815 
__TBB_ASSERT
–
T
 =
__TBB_lﬂd_ªœxed
(
my_¨ía_¶Ÿ
->
èû
), 
NULL
 );

816 
__TBB_ASSERT
–
T
 < 
my_¨ía_¶Ÿ
->
my_èsk_poﬁ_size
, 
NULL
 );

817 
	gt
 = 
my_¨ía_¶Ÿ
->
èsk_poﬁ_±r
[
T
];

818 
pois⁄_poöãr
(
my_¨ía_¶Ÿ
->
èsk_poﬁ_±r
[
T
]);

819 
as£π_èsk_poﬁ_vÆid
();

821  
	gt
;

824 
èsk
* 
	ggíîic_scheduÀr
::
ªlﬂd_èsks
 () {

825 
uöçå_t
 
ªlﬂd_ïoch
 = *
my_ªf_ªlﬂd_ïoch
;

826 
__TBB_ASSERT
–
my_ofÊﬂded_èsks
, 
NULL
 );

827 
__TBB_ASSERT
–
my_loˇl_ªlﬂd_ïoch
 <
ªlﬂd_ïoch


828 || 
my_loˇl_ªlﬂd_ïoch
 - 
ªlﬂd_ïoch
 > 
uöçå_t
(-1)/2,

830 i‡–
	gmy_loˇl_ªlﬂd_ïoch
 =
ªlﬂd_ïoch
 )

831  
NULL
;

832 
__TBB_ASSERT
–
my_ofÊﬂded_èsks
, 
NULL
 );

833 
öçå_t
 
	gt›_¥i‹ôy
 = 
ef„˘ive_ª„ªn˚_¥i‹ôy
();

834 
__TBB_ASSERT
–(
uöçå_t
)
t›_¥i‹ôy
 < (uöçå_t)
num_¥i‹ôy_Àvñs
, 
NULL
 );

835 
èsk
 *
	gt
 = 
ªlﬂd_èsks
–
my_ofÊﬂded_èsks
, 
my_ofÊﬂded_èsk_li°_èû_lök
, 
t›_¥i‹ôy
 );

836 i‡–
	gmy_ofÊﬂded_èsks
 && (
	gmy_¨ía
->
	gmy_bŸtom_¥i‹ôy
 >
t›_¥i‹ôy
 || !
my_¨ía
->
my_num_w‹kîs_ªque°ed
) ) {

845 
my_m¨kë
->
upd©e_¨ía_¥i‹ôy
–*
my_¨ía
, 
¥i‹ôy
(*
my_ofÊﬂded_èsks
) );

848 
	gmy_¨ía
->
	gadvîti£_√w_w‹k
< 
	gÁl£
>();

850 
	gmy_loˇl_ªlﬂd_ïoch
 = 
ªlﬂd_ïoch
;

851  
	gt
;

855 
ölöe
 
èsk
* 
	ggíîic_scheduÀr
::
gë_èsk
() {

856 
__TBB_ASSERT
–
ö_¨ía
(), 
NULL
 );

857 
èsk
* 
	gªsu…
 = 
NULL
;

858 
size_t
 
	gT
 = 
__TBB_lﬂd_ªœxed
(
my_¨ía_¶Ÿ
->
èû
);

859 
	gªåy
:

860 
__TBB_°‹e_ªœxed
(
my_¨ía_¶Ÿ
->
èû
, --
T
);

861 
©omic_„n˚
();

862 i‡–(
	göçå_t
)
__TBB_lﬂd_ªœxed
(
my_¨ía_¶Ÿ
->
hód
Ë> (öçå_t)
	gT
 ) {

863 
acquúe_èsk_poﬁ
();

864 
size_t
 
	gH
 = 
__TBB_lﬂd_ªœxed
(
my_¨ía_¶Ÿ
->
hód
);

865 i‡–(
	göçå_t
)
	gH
 <(
öçå_t
)
T
 ) {

867 
ªsu…
 = 
my_¨ía_¶Ÿ
->
èsk_poﬁ_±r
[
T
];

868 
__TBB_ASSERT
–!
is_pois⁄ed
(
ªsu…
), 
NULL
 );

869 
pois⁄_poöãr
–
my_¨ía_¶Ÿ
->
èsk_poﬁ_±r
[
T
] );

872 
__TBB_ASSERT
 ( 
H
 =
__TBB_lﬂd_ªœxed
(
my_¨ía_¶Ÿ
->
hód
)

873 && 
T
 =
__TBB_lﬂd_ªœxed
(
my_¨ía_¶Ÿ
->
èû
)

874 && 
H
 =
T
 + 1, "victim/thiefárbitrationálgorithm failure" );

876 i‡–(
	göçå_t
)
	gH
 < (öçå_t)
	gT
 )

877 
ªÀa£_èsk_poﬁ
();

879 
ª£t_deque_™d_Àave_¨ía
– 
åue
 );

882 
__TBB_c⁄åﬁ_c⁄si°ícy_hñ≥r
();

883 
	gªsu…
 = 
my_¨ía_¶Ÿ
->
èsk_poﬁ_±r
[
T
];

884 
__TBB_ASSERT
–!
is_pois⁄ed
(
ªsu…
), 
NULL
 );

885 
pois⁄_poöãr
–
my_¨ía_¶Ÿ
->
èsk_poﬁ_±r
[
T
] );

887 if–
	gªsu…
 && 
is_¥oxy
(*
ªsu…
) ) {

888 
	gèsk_¥oxy
 &
	gç
 = *(
èsk_¥oxy
*)
ªsu…
;

889 
	gªsu…
 = 
ç
.
exåa˘_èsk
<
èsk_¥oxy
::
poﬁ_bô
>();

890 if–!
	gªsu…
 ) {

892 
	g‰ì_èsk
<
	gsmÆl_èsk
>(
	gç
);

893 i‡–
ö_¨ía
() )

894 
	gªåy
;

895 
__TBB_ASSERT
–
is_quõs˚¡_loˇl_èsk_poﬁ_ª£t
(), 
NULL
 );

896  
	gNULL
;

898 
GATHER_STATISTIC
–++
my_cou¡îs
.
¥oxõs_execuãd
 );

900 
__TBB_ASSERT
–
is_vîsi⁄_3_èsk
(*
ªsu…
), "backwards compatibility with TBB 2.0 broken" );

902 
	gmy_ö√rmo°_ru¬ög_èsk
 = 
ªsu…
;

903 
	gªsu…
->
nŸe_afföôy
(
my_afföôy_id
);

905 
__TBB_ASSERT
–
ªsu…
 || 
is_quõs˚¡_loˇl_èsk_poﬁ_ª£t
(), 
NULL
 );

906  
	gªsu…
;

909 
èsk
* 
	ggíîic_scheduÀr
::
°ól_èsk
–
¨ía_¶Ÿ
& 
vi˘im_¶Ÿ
 ) {

910 
èsk
** 
vi˘im_poﬁ
 = 
lock_èsk_poﬁ
–&
vi˘im_¶Ÿ
 );

911 i‡–!
	gvi˘im_poﬁ
 )

912  
	gNULL
;

913 
èsk
* 
	gªsu…
 = 
NULL
;

914 
size_t
 
	gH
 = 
__TBB_lﬂd_ªœxed
(
vi˘im_¶Ÿ
.
hód
);

915 c⁄° 
size_t
 
	gH0
 = 
H
;

916 
	gskù_™d_bump
 = 0;

917 
	gªåy
:

918 
__TBB_°‹e_ªœxed
–
vi˘im_¶Ÿ
.
hód
, ++
H
 );

919 
©omic_„n˚
();

920 i‡–(
	göçå_t
)
	gH
 > (öçå_t)
__TBB_lﬂd_ªœxed
(
vi˘im_¶Ÿ
.
èû
) ) {

922 
GATHER_STATISTIC
–++
my_cou¡îs
.
thõf_backoffs
 );

923 
__TBB_°‹e_ªœxed
–
vi˘im_¶Ÿ
.
hód
, 
H0
 );

924 
	gskù_™d_bump
++;

925 
__TBB_ASSERT
 ( !
ªsu…
, 
NULL
 );

928 
__TBB_c⁄åﬁ_c⁄si°ícy_hñ≥r
();

929 
	gªsu…
 = 
vi˘im_poﬁ
[
H
-1];

930 
__TBB_ASSERT
–!
is_pois⁄ed
(
ªsu…
), 
NULL
 );

931 if–
is_¥oxy
(*
ªsu…
) ) {

932 
	gèsk_¥oxy
& 
	gç
 = *
°©ic_ˇ°
<
èsk_¥oxy
*>(
ªsu…
);

934 i‡–
	gèsk_¥oxy
::
is_sh¨ed
(
ç
.
èsk_™d_èg
Ë&&Åp.
outbox
->
ªcùõ¡_is_idÀ
() )

936 
GATHER_STATISTIC
–++
my_cou¡îs
.
¥oxõs_by∑s£d
 );

937 
	gªsu…
 = 
NULL
;

938 
__TBB_ASSERT
–
skù_™d_bump
 < 2, 
NULL
 );

939 
	gskù_™d_bump
 = 1;

940 
	gªåy
;

943 
__TBB_ASSERT
–
ªsu…
, 
NULL
 );

945 
ITT_NOTIFY
(
sync_acquúed
, (*)((
uöçå_t
)&
vi˘im_¶Ÿ
+(uintptr_t)));

946 c⁄° 
size_t
 
	gH1
 = 
H0
 + 1;

947 i‡–
	gH1
 < 
	gH
 ) {

958 
memmove
–
vi˘im_poﬁ
 + 
H1
, vi˘im_poﬁ + 
H0
, (
H
 - H1Ë* (
èsk
*) );

959 
__TBB_°‹e_wôh_ªÀa£
–
vi˘im_¶Ÿ
.
hód
, 
H1
 );

960 i‡–(
	göçå_t
)
	gH
 >(
öçå_t
)
__TBB_lﬂd_ªœxed
(
vi˘im_¶Ÿ
.
èû
) )

961 
skù_™d_bump
++;

963 
pois⁄_poöãr
–
vi˘im_poﬁ
[
H0
] );

966 
u∆ock_èsk_poﬁ
–&
vi˘im_¶Ÿ
, 
vi˘im_poﬁ
 );

967 
__TBB_ASSERT
–
skù_™d_bump
 <2, 
NULL
 );

968 #i‡
__TBB_PREFETCHING


969 
__TBB_˛_evi˘
(&
vi˘im_¶Ÿ
.
hód
);

970 
__TBB_˛_evi˘
(&
vi˘im_¶Ÿ
.
èû
);

972 if–--
	gskù_™d_bump
 > 0 ) {

974 
©omic_„n˚
();

975 
	gmy_¨ía
->
	gadvîti£_√w_w‹k
< 
	gåue
>();

977  
	gªsu…
;

980 
èsk
* 
	ggíîic_scheduÀr
::
gë_maûbox_èsk
() {

981 
__TBB_ASSERT
–
my_afföôy_id
>0, "not inárena" );

982  
èsk_¥oxy
* c⁄° 
	gç
 = 
my_öbox
.
p›
() ) {

983 i‡–
èsk
* 
ªsu…
 = 
ç
->
exåa˘_èsk
<
èsk_¥oxy
::
maûbox_bô
>() ) {

984 
ITT_NOTIFY
–
sync_acquúed
, 
my_öbox
.
outbox
() );

985 
	gªsu…
->
¥efix
().
	gexåa_°©e
 |
es_èsk_is_°ﬁí
;

986  
	gªsu…
;

989 
	g‰ì_èsk
<
	gno_ˇche_smÆl_èsk
>(*
	gç
);

991  
	gNULL
;

995 
	ggíîic_scheduÀr
::
íãr_¨ía
() {

996 
__TBB_ASSERT
 ( 
my_¨ía
, "noárena: initializationÇot completed?" );

997 
__TBB_ASSERT
 ( 
my_¨ía_ödex
 < 
my_¨ía
->
my_num_¶Ÿs
, "arena slot index is out-of-bound" );

998 
__TBB_ASSERT
 ( 
my_¨ía_¶Ÿ
 =&
my_¨ía
->
my_¶Ÿs
[
my_¨ía_ödex
], 
NULL
);

999 
__TBB_ASSERT
 ( 
my_¨ía_¶Ÿ
->
èsk_poﬁ
 =
Em±yTaskPoﬁ
, "someoneÉlse grabbed myárena slot?" );

1000 
__TBB_ASSERT
 ( 
__TBB_lﬂd_ªœxed
(
my_¨ía_¶Ÿ
->
hód
Ë< __TBB_lﬂd_ªœxed(my_¨ía_¶Ÿ->
èû
),

1003 
ITT_NOTIFY
(
sync_ªÀasög
, 
my_¨ía_¶Ÿ
);

1004 
__TBB_°‹e_wôh_ªÀa£
–
my_¨ía_¶Ÿ
->
èsk_poﬁ
, my_¨ía_¶Ÿ->
èsk_poﬁ_±r
 );

1007 
	ggíîic_scheduÀr
::
Àave_¨ía
() {

1008 
__TBB_ASSERT
–
ö_¨ía
(), "Not inárena" );

1010 
__TBB_ASSERT
–&
my_¨ía
->
my_¶Ÿs
[
my_¨ía_ödex
] =
my_¨ía_¶Ÿ
, "arena slotánd slot index mismatch" );

1011 
__TBB_ASSERT
 ( 
my_¨ía_¶Ÿ
->
èsk_poﬁ
 =
LockedTaskPoﬁ
, "TaskÖool must beÜocked whenÜeavingárena" );

1012 
__TBB_ASSERT
 ( 
is_quõs˚¡_loˇl_èsk_poﬁ_em±y
(), "CannotÜeaveárena whenÅheÅaskÖool isÇotÉmpty" );

1013 
ITT_NOTIFY
(
sync_ªÀasög
, &
my_¨ía
->
my_¶Ÿs
[
my_¨ía_ödex
]);

1017 
__TBB_°‹e_ªœxed
–
my_¨ía_¶Ÿ
->
èsk_poﬁ
, 
Em±yTaskPoﬁ
 );

1020 
gíîic_scheduÀr
* 
	ggíîic_scheduÀr
::
¸óã_w‹kî
–
m¨kë
& 
m
, 
size_t
 
ödex
 ) {

1021 
gíîic_scheduÀr
* 
	gs
 = 
Æloˇã_scheduÀr
–
NULL
, 
ödex
 );

1022 #i‡
__TBB_TASK_GROUP_CONTEXT


1023 
	gs
->
	gmy_dummy_èsk
->
¥efix
().
	gc⁄ãxt
 = &
the_dummy_c⁄ãxt
;

1025 
	gs
->
	gmy_c⁄ãxt_°©e_¥›ag©i⁄_ïoch
 = 
the_c⁄ãxt_°©e_¥›ag©i⁄_ïoch
;

1027 
	gs
->
	gmy_m¨kë
 = &
m
;

1028 
	gs
->
öô_°ack_öfo
();

1029 #i‡
__TBB_TASK_PRIORITY


1030 
	gs
->
	gmy_ªf_t›_¥i‹ôy
 = &
s
->
my_m¨kë
->
my_globÆ_t›_¥i‹ôy
;

1031 
	gs
->
	gmy_ªf_ªlﬂd_ïoch
 = &
s
->
my_m¨kë
->
my_globÆ_ªlﬂd_ïoch
;

1033  
	gs
;

1037 
gíîic_scheduÀr
* 
	ggíîic_scheduÀr
::
¸óã_ma°î
–
¨ía
& 
a
 ) {

1038 
gíîic_scheduÀr
* 
s
 = 
Æloˇã_scheduÀr
–&
a
, 0 );

1039 
	gèsk
& 
	gt
 = *
s
->
my_dummy_èsk
;

1040 
	gs
->
	gmy_ö√rmo°_ru¬ög_èsk
 = &
t
;

1041 
	gs
->
	gmy_di•©chög_èsk
 = &
t
;

1042 
	gt
.
¥efix
().
	gªf_cou¡
 = 1;

1043 
	ggovîn‹
::
sign_⁄
(
s
);

1044 
__TBB_ASSERT
–&
èsk
::
£lf
()==&
t
, "governor::sign_on failed?" );

1045 #i‡
__TBB_TASK_GROUP_CONTEXT


1049 
	gt
.
¥efix
().
	gc⁄ãxt
 = 
a
.
my_deÁu…_˘x
;

1051 
	gs
->
	gmy_m¨kë
 = 
a
.
my_m¨kë
;

1052 
__TBB_ASSERT
–
s
->
my_¨ía_ödex
 == 0, "MasterÅhread must occupyÅhe first slot in itsárena" );

1053 
	gs
->
©èch_maûbox
(1);

1054 
	gs
->
	gmy_¨ía_¶Ÿ
 = 
a
.
my_¶Ÿs
 + 0;

1055 
	gs
->
	gmy_¨ía_¶Ÿ
->
	gmy_scheduÀr
 = 
s
;

1056 #i‡
_WIN32
||
_WIN64


1057 
__TBB_ASSERT
–
s
->
my_m¨kë
, 
NULL
 );

1058 
	gs
->
	gmy_m¨kë
->
ªgi°î_ma°î
–
s
->
ma°î_exec_ªsour˚
 );

1060 
	gs
->
öô_°ack_öfo
();

1061 #i‡
__TBB_TASK_GROUP_CONTEXT


1063 
	gs
->
	gmy_c⁄ãxt_°©e_¥›ag©i⁄_ïoch
 = 
the_c⁄ãxt_°©e_¥›ag©i⁄_ïoch
;

1065 #i‡
__TBB_TASK_PRIORITY


1071 
	gs
->
	gmy_ªf_t›_¥i‹ôy
 = &
s
->
my_¨ía
->
my_t›_¥i‹ôy
;

1072 
	gs
->
	gmy_ªf_ªlﬂd_ïoch
 = &
s
->
my_¨ía
->
my_ªlﬂd_ïoch
;

1074 #i‡
__TBB_SCHEDULER_OBSERVER


1076 
__TBB_ASSERT
–
a
.
my_ob£rvîs
.
em±y
(), "Just createdárena cannot haveány observersássociated with it" );

1077 
	gthe_globÆ_ob£rvî_li°
.
nŸify_íåy_ob£rvîs
–
s
->
my_œ°_globÆ_ob£rvî
, 
Ál£
 );

1079  
	gs
;

1082 
	ggíîic_scheduÀr
::
˛ónup_w‹kî
–* 
¨g
, 
boﬁ
 
w‹kî
 ) {

1083 
	ggíîic_scheduÀr
& 
	gs
 = *(
gíîic_scheduÀr
*)
¨g
;

1084 
__TBB_ASSERT
–!
s
.
my_¨ía_¶Ÿ
, "cleaning upáttached worker" );

1085 #i‡
__TBB_SCHEDULER_OBSERVER


1086 i‡–
	gw‹kî
 )

1087 
	gthe_globÆ_ob£rvî_li°
.
nŸify_exô_ob£rvîs
–
s
.
my_œ°_globÆ_ob£rvî
, 
åue
 );

1089 
	gs
.
‰ì_scheduÀr
();

1092 
	ggíîic_scheduÀr
::
˛ónup_ma°î
() {

1093 
gíîic_scheduÀr
& 
s
 = *
this
;

1094 
__TBB_ASSERT
–
s
.
my_¨ía_¶Ÿ
, 
NULL
);

1095 #i‡
__TBB_SCHEDULER_OBSERVER


1096 
	gs
.
	gmy_¨ía
->
	gmy_ob£rvîs
.
nŸify_exô_ob£rvîs
–
s
.
my_œ°_loˇl_ob£rvî
, 
Ál£
 );

1097 
	gthe_globÆ_ob£rvî_li°
.
nŸify_exô_ob£rvîs
–
s
.
my_œ°_globÆ_ob£rvî
, 
Ál£
 );

1099 if–
ö_¨ía
() ) {

1100 
acquúe_èsk_poﬁ
();

1101 i‡–
	gmy_¨ía_¶Ÿ
->
	gèsk_poﬁ
 =
Em±yTaskPoﬁ
 ||

1102 
__TBB_lﬂd_ªœxed
(
my_¨ía_¶Ÿ
->
hód
Ë>__TBB_lﬂd_ªœxed(my_¨ía_¶Ÿ->
èû
) )

1105 
Àave_¨ía
();

1109 
ªÀa£_èsk_poﬁ
();

1110 
__TBB_ASSERT
 ( 
govîn‹
::
is_£t
(
this
), "TLS slot is cleared beforeÅheÅaskÖool cleanup" );

1111 
	gs
.
loˇl_waô_f‹_Æl
–*
s
.
my_dummy_èsk
, 
NULL
 );

1112 
__TBB_ASSERT
–!
ö_¨ía
(), 
NULL
 );

1113 
__TBB_ASSERT
 ( 
govîn‹
::
is_£t
(
this
), "OtherÅhreadÑeused our TLS key duringÅheÅaskÖool cleanup" );

1116 
__TBB_ASSERT
–
s
.
my_m¨kë
, 
NULL
 );

1117 
m¨kë
 *
	gmy_m¨kë
 = 
s
.
my_m¨kë
;

1118 #i‡
_WIN32
||
_WIN64


1119 
	gs
.
	gmy_m¨kë
->
uƒegi°î_ma°î
–
s
.
ma°î_exec_ªsour˚
 );

1121 
¨ía
* 
	ga
 = 
s
.
my_¨ía
;

1122 
__TBB_ASSERT
(
a
->
my_¶Ÿs
+0 =
my_¨ía_¶Ÿ
, 
NULL
);

1123 #i‡
__TBB_STATISTICS


1124 *
	gmy_¨ía_¶Ÿ
->
	gmy_cou¡îs
 +
s
.
my_cou¡îs
;

1126 #i‡
__TBB_TASK_PRIORITY


1127 
__TBB_ASSERT
–
my_¨ía_¶Ÿ
->
my_scheduÀr
, 
NULL
 );

1130  
as_©omic
(
my_¨ía_¶Ÿ
->
my_scheduÀr
).
com∑ª_™d_sw≠
(
NULL
, 
this
) !=Åhis )

1131 
__TBB_Yõld
();

1132 
__TBB_ASSERT
–!
my_¨ía_¶Ÿ
->
my_scheduÀr
, 
NULL
 );

1134 
__TBB_°‹e_wôh_ªÀa£
(
my_¨ía_¶Ÿ
->
my_scheduÀr
, (
gíîic_scheduÀr
*)
NULL
);

1136 
	gmy_¨ía_¶Ÿ
 = 
NULL
;

1137 
	gs
.
‰ì_scheduÀr
();

1144 #i‡
__TBB_STATISTICS_EARLY_DUMP


1145 
GATHER_STATISTIC
–
a
->
dump_¨ía_°©i°ics
() );

1147 i‡(
	ggovîn‹
::
√edsWaôW‹kîs
())

1148 
my_m¨kë
->
¥ï¨e_waô_w‹kîs
();

1149 
	ga
->
	g⁄_thªad_Àavög
< 
	gåue
>();

1150 i‡(
	ggovîn‹
::
√edsWaôW‹kîs
())

1151 
my_m¨kë
->
waô_w‹kîs
();

	@viper/concurrentqueue-src/benchmarks/tbb/scheduler.h

21 #i‚de‡
_TBB_scheduÀr_H


22 
	#_TBB_scheduÀr_H


	)

24 
	~"scheduÀr_comm⁄.h
"

25 
	~"tbb/•ö_muãx.h
"

26 
	~"maûbox.h
"

27 
	~"tbb_misc.h
"

28 
	~"ôt_nŸify.h
"

29 
	~"../rml/ö˛ude/rml_tbb.h
"

31 #i‡
__TBB_SURVIVE_THREAD_SWITCH


32 
	~"cûk-tbb-öãr›.h
"

35 
«me•a˚
 
	gtbb
 {

36 
«me•a˚
 
	göã∫Æ
 {

38 
	gãm∂©e
<
ty≥«me
 
	gScheduÀrTøôs
> 
˛ass
 
	gcu°om_scheduÀr
;

39 
	g√°ed_¨ía_c⁄ãxt
;

45 #i‡
__TBB_TASK_GROUP_CONTEXT


46 
	sscheduÀr_li°_node_t
 {

47 
scheduÀr_li°_node_t
 *
	gmy_¥ev
,

48 *
	gmy_√xt
;

52 
	#Em±yTaskPoﬁ
 ((
èsk
**)0)

	)

53 
	#LockedTaskPoﬁ
 ((
èsk
**)~(
öçå_t
)0)

	)

55 
	#LockedMa°î
 ((
gíîic_scheduÀr
*)~(
öçå_t
)0)

	)

57 
	sscheduÀr_°©e
 {

59 
size_t
 
	gmy_¨ía_ödex
;

62 
¨ía_¶Ÿ
* 
	gmy_¨ía_¶Ÿ
;

65 
¨ía
* 
	gmy_¨ía
;

68 
èsk
* 
	gmy_ö√rmo°_ru¬ög_èsk
;

73 
èsk
* 
	gmy_di•©chög_èsk
;

75 
maû_öbox
 
	gmy_öbox
;

83 
afföôy_id
 
	gmy_afföôy_id
;

85 #i‡
__TBB_SCHEDULER_OBSERVER


87 
ob£rvî_¥oxy
* 
	gmy_œ°_globÆ_ob£rvî
;

90 
ob£rvî_¥oxy
* 
	gmy_œ°_loˇl_ob£rvî
;

92 #i‡
__TBB_TASK_PRIORITY


96 vﬁ©ûê
öçå_t
 *
	gmy_ªf_t›_¥i‹ôy
;

99 vﬁ©ûê
uöçå_t
 *
	gmy_ªf_ªlﬂd_ïoch
;

110 
˛ass
 
	ggíîic_scheduÀr
: 
public
 
scheduÀr
, 
	gpublic
 ::
rml
::
job
,Öubli¯
	gscheduÀr_°©e
 {

111 
	gpublic
:

114 c⁄° 
size_t
 
quick_èsk_size
 = 256-
èsk_¥efix_ª£rv©i⁄_size
;

116 
boﬁ
 
is_vîsi⁄_3_èsk
–
èsk
& 
t
 ) {

117  (
	gt
.
¥efix
().
	gexåa_°©e
 & 0x0F)>=0x1;

121 
uöçå_t
 
	gmy_°ólög_thªshﬁd
;

122 #i‡
__TBB_ùf


124 
uöçå_t
 
	gmy_rsb_°ólög_thªshﬁd
;

127 c⁄° 
size_t
 
	gnuŒ_¨ía_ödex
 = ~size_t(0);

130 
ölöe
 
boﬁ
 
ö_¨ía
 () const;

132 
ölöe
 
boﬁ
 
is_loˇl_èsk_poﬁ_quõs˚¡
 () const;

134 
ölöe
 
boﬁ
 
is_quõs˚¡_loˇl_èsk_poﬁ_em±y
 () const;

136 
ölöe
 
boﬁ
 
is_quõs˚¡_loˇl_èsk_poﬁ_ª£t
 () const;

139 
m¨kë
* 
	gmy_m¨kë
;

142 
Fa°R™dom
 
	gmy_øndom
;

145 
èsk
* 
	gmy_‰ì_li°
;

147 #i‡
__TBB_HOARD_NONLOCAL_TASKS


149 
èsk
* 
	gmy_n⁄loˇl_‰ì_li°
;

153 
èsk
* 
	gmy_dummy_èsk
;

157 
	gmy_ªf_cou¡
;

159 
ölöe
 
©èch_maûbox
–
afföôy_id
 
id
 );

164 
boﬁ
 
	gmy_auto_öôülized
;

166 #i‡
__TBB_COUNT_TASK_NODES


168 
öçå_t
 
	gmy_èsk_node_cou¡
;

172 
öô_°ack_öfo
 ();

175 
boﬁ
 
ˇn_°ól
 () {

176 
	g™ch‹
;

178 #i‡
__TBB_ùf


179  
	gmy_°ólög_thªshﬁd
 < (
	guöçå_t
)&
	g™ch‹
 && (uöçå_t)
__TBB_gë_b•
(Ë< 
	gmy_rsb_°ólög_thªshﬁd
;

181  
	gmy_°ólög_thªshﬁd
 < (
	guöçå_t
)&
	g™ch‹
;

186 
do_íãr_¨ía
();

190 
íãr_¨ía
();

194 
Àave_¨ía
();

199 
ölöe
 
ª£t_deque_™d_Àave_¨ía
 ( 
boﬁ
 
locked
 );

203 
èsk
** 
lock_èsk_poﬁ
–
¨ía_¶Ÿ
* 
vi˘im_¨ía_¶Ÿ
 ) const;

207 
u∆ock_èsk_poﬁ
–
¨ía_¶Ÿ
* 
vi˘im_¨ía_¶Ÿ
, 
èsk
** 
vi˘im_èsk_poﬁ
 ) const;

212 
acquúe_èsk_poﬁ
() const;

217 
ªÀa£_èsk_poﬁ
() const;

221 
èsk
* 
¥ï¨e_f‹_•awnög
–èsk* 
t
 );

224 
ölöe
 
commô_•aw√d_èsks
–
size_t
 
√w_èû
 );

228 
ölöe
 
commô_ªloˇãd_èsks
–
size_t
 
√w_èû
 );

234 
èsk
* 
gë_èsk
();

243 
èsk
* 
gë_maûbox_èsk
();

246 
boﬁ
 
is_¥oxy
–c⁄° 
èsk
& 
t
 ) {

247  
	gt
.
¥efix
().
	gexåa_°©e
==
es_èsk_¥oxy
;

251 
èsk
* 
°ól_èsk
–
¨ía_¶Ÿ
& 
vi˘im_¨ía_¶Ÿ
 );

255 c⁄° 
size_t
 
	gmö_èsk_poﬁ_size
 = 64;

260 
size_t
 
¥ï¨e_èsk_poﬁ
–size_à
n
 );

263 
gíîic_scheduÀr
* 
¸óã_ma°î
–
¨ía
& 
a
 );

266 
˛ónup_ma°î
();

269 
gíîic_scheduÀr
* 
¸óã_w‹kî
–
m¨kë
& 
m
, 
size_t
 
ödex
 );

272 
˛ónup_w‹kî
–* 
¨g
, 
boﬁ
 
w‹kî
 );

274 
	g¥Ÿe˘ed
:

275 
ãm∂©e
<
ty≥«me
 
ScheduÀrTøôs
> 
‰õnd
 
˛ass
 
cu°om_scheduÀr
;

276 
gíîic_scheduÀr
–
¨ía
*, 
size_t
 
ödex
 );

278 
	gpublic
:

279 #i‡
TBB_USE_ASSERT
 > 1

282 
as£π_èsk_poﬁ_vÆid
 () const;

284 
as£π_èsk_poﬁ_vÆid
() const {}

287 #i‡
__TBB_TASK_ARENA


288 
√°ed_¨ía_íåy
(
¨ía
*, 
√°ed_¨ía_c⁄ãxt
 &, 
boﬁ
);

289 
√°ed_¨ía_exô
(
√°ed_¨ía_c⁄ãxt
 &);

290 
waô_u¡û_em±y
();

294 
•awn
–
èsk
& 
fú°
,Åask*& 
√xt
 );

297 
•awn_roŸ_™d_waô
–
èsk
& 
fú°
,Åask*& 
√xt
 );

300 
íqueue
–
èsk
&, * 
ª£rved
 );

302 
loˇl_•awn
–
èsk
& 
fú°
,Åask*& 
√xt
 );

303 
loˇl_•awn_roŸ_™d_waô
–
èsk
& 
fú°
,Åask*& 
√xt
 );

304 
vútuÆ
 
loˇl_waô_f‹_Æl
–
èsk
& 
∑ª¡
,Åask* 
chûd
 ) = 0;

307 
‰ì_scheduÀr
();

311 
	gèsk
& 
Æloˇã_èsk
–
size_t
 
numbî_of_byãs
,

312 
__TBB_CONTEXT_ARG
(
èsk
* 
∑ª¡
, 
èsk_group_c⁄ãxt
* 
c⁄ãxt
) );

316 
	gãm∂©e
<
‰ì_èsk_höt
 
	gh
>

317 
‰ì_èsk
–
èsk
& 
t
 );

320 
ölöe
 
dóŒoˇã_èsk
–
èsk
& 
t
 );

323 
ölöe
 
boﬁ
 
is_w‹kî
();

329 
ölöe
 
boﬁ
 
ma°î_ouãrmo°_Àvñ
 () const;

332 
ölöe
 
boﬁ
 
w‹kî_ouãrmo°_Àvñ
 () const;

334 #i‡
__TBB_TASK_GROUP_CONTEXT


341 
ölöe
 
èsk_group_c⁄ãxt
* 
deÁu…_c⁄ãxt
 ();

345 
numbî_of_w‹kîs_ö_my_¨ía
();

347 #i‡
__TBB_COUNT_TASK_NODES


348 
öçå_t
 
gë_èsk_node_cou¡
–
boﬁ
 
cou¡_¨ía_w‹kîs
 = 
Ál£
 );

352 
èsk
* 
∂ugged_ªtu∫_li°
(Ë{ (
	gèsk
*)(
	göçå_t
)(-1);}

355 
öçå_t
 
	gmy_smÆl_èsk_cou¡
;

358 
èsk
* 
	gmy_ªtu∫_li°
;

362 
vútuÆ
 
èsk
* 
ª˚ive_‹_°ól_èsk
–
__TBB_©omic
 
ª„ªn˚_cou¡
& 
com∂ëi⁄_ªf_cou¡
,

363 
boﬁ
 
ªtu∫_if_no_w‹k
 ) = 0;

366 
‰ì_n⁄loˇl_smÆl_èsk
–
èsk
& 
t
 );

368 #i‡
__TBB_TASK_GROUP_CONTEXT


370 
	g_∑ddög1
[
NFS_MaxLöeSize
 - (
c⁄ãxt_li°_node_t
)];

373 
c⁄ãxt_li°_node_t
 
	gmy_c⁄ãxt_li°_hód
;

377 
•ö_muãx
 
	gmy_c⁄ãxt_li°_muãx
;

386 
uöçå_t
 
	gmy_c⁄ãxt_°©e_¥›ag©i⁄_ïoch
;

392 
	gtbb
::
©omic
<
uöçå_t
> 
my_loˇl_˘x_li°_upd©e
;

394 #i‡
__TBB_TASK_PRIORITY


396 
ölöe
 
öçå_t
 
ef„˘ive_ª„ªn˚_¥i‹ôy
 () const;

400 
èsk
* 
	gmy_ofÊﬂded_èsks
;

403 
èsk
** 
	gmy_ofÊﬂded_èsk_li°_èû_lök
;

406 
uöçå_t
 
	gmy_loˇl_ªlﬂd_ïoch
;

409 vﬁ©ûê
boﬁ
 
	gmy_poﬁ_ªshufÊög_≥ndög
;

413 
èsk
* 
ªlﬂd_èsks
 ();

415 
èsk
* 
ªlﬂd_èsks
 (Åask*& 
ofÊﬂded_èsks
,Åask**& 
ofÊﬂded_èsk_li°_lök
, 
öçå_t
 
t›_¥i‹ôy
 );

419 
èsk
* 
wönow_èsk_poﬁ
 ();

422 
ölöe
 
ofÊﬂd_èsk
 ( 
èsk
& 
t
, 
öçå_t
 
èsk_¥i‹ôy
 );

427 
˛ónup_loˇl_c⁄ãxt_li°
 ();

431 
	gãm∂©e
 <
ty≥«me
 
	gT
>

432 
¥›ag©e_èsk_group_°©e
 ( 
T
 
èsk_group_c⁄ãxt
::*
m±r_°©e
,Åask_group_c⁄ãxt& 
§c
, T 
√w_°©e
 );

435 
as£π_c⁄ãxt_vÆid
(c⁄° 
èsk_group_c⁄ãxt
 *
tgc
) {

436 
suµªss_unu£d_w¨nög
(
tgc
);

437 #i‡
TBB_USE_ASSERT


438 
__TBB_ASSERT
(
tgc
, 
NULL
);

439 
uöçå_t
 
	g˘x
 = 
tgc
->
my_vîsi⁄_™d_åaôs
;

440 
__TBB_ASSERT
(
is_Æive
(
˘x
), "referencedÅask_group_context was destroyed");

441 c⁄° *
	gmsg
 = "task_group_context is invalid";

442 
__TBB_ASSERT
(!(
˘x
&~(3|(7<<
èsk_group_c⁄ãxt
::
åaôs_off£t
))), 
msg
);

443 
__TBB_ASSERT
(
tgc
->
my_köd
 < 
èsk_group_c⁄ãxt
::
dyög
, 
msg
);

444 
__TBB_ASSERT
(
tgc
->
my_ˇn˚Œ©i⁄_ªque°ed
 =0 ||Ågc->my_ˇn˚Œ©i⁄_ªque°ed =1, 
msg
);

445 
__TBB_ASSERT
(
tgc
->
my_°©e
 < 
èsk_group_c⁄ãxt
::
low_unu£d_°©e_bô
, 
msg
);

446 if(
	gtgc
->
	gmy_köd
 !
èsk_group_c⁄ãxt
::
isﬁ©ed
) {

447 
__TBB_ASSERT
(
tgc
->
my_ow√r
, 
msg
);

448 
__TBB_ASSERT
(
tgc
->
my_node
.
my_√xt
 &&Ågc->my_node.
my_¥ev
, 
msg
);

450 #i‡
__TBB_TASK_PRIORITY


451 
as£π_¥i‹ôy_vÆid
(
tgc
->
my_¥i‹ôy
);

453 if(
	gtgc
->
	gmy_∑ª¡
)

454 #i‡
TBB_USE_ASSERT
 > 1

455 
as£π_c⁄ãxt_vÆid
(
tgc
->
my_∑ª¡
);

457 
__TBB_ASSERT
(
is_Æive
(
tgc
->
my_∑ª¡
->
my_vîsi⁄_™d_åaôs
), 
msg
);

463 #i‡
_WIN32
||
_WIN64


464 
	g¥iv©e
:

466 ::
rml
::
£rvî
::
executi⁄_ªsour˚_t
 
ma°î_exec_ªsour˚
;

467 
	gpublic
:

470 #i‡
__TBB_TASK_GROUP_CONTEXT


473 
tbb
::
©omic
<
uöçå_t
> 
my_n⁄loˇl_˘x_li°_upd©e
;

476 #i‡
__TBB_SURVIVE_THREAD_SWITCH


477 
__cûk_tbb_unw©ch_thunk
 
	gmy_cûk_unw©ch_thunk
;

478 #i‡
TBB_USE_ASSERT


481 
	ecûk_°©e_t
 {

482 
	gcs_n⁄e
=0xF000,

483 
	gcs_ru¬ög
,

484 
	gcs_limbo
,

485 
	gcs_‰ìd


487 
cûk_°©e_t
 
	gmy_cûk_°©e
;

491 #i‡
__TBB_STATISTICS


495 
muèbÀ
 
°©i°ics_cou¡îs
 
	gmy_cou¡îs
;

504 
	~"¨ía.h
"

505 
	~"govîn‹.h
"

507 
«me•a˚
 
	gtbb
 {

508 
«me•a˚
 
	göã∫Æ
 {

510 
ölöe
 
boﬁ
 
	ggíîic_scheduÀr
::
ö_¨ía
 () const {

511 
__TBB_ASSERT
(
my_¨ía_¶Ÿ
, 0);

512  
	gmy_¨ía_¶Ÿ
->
	gèsk_poﬁ
 !
Em±yTaskPoﬁ
;

515 
ölöe
 
boﬁ
 
	ggíîic_scheduÀr
::
is_loˇl_èsk_poﬁ_quõs˚¡
 () const {

516 
__TBB_ASSERT
(
my_¨ía_¶Ÿ
, 0);

517 
èsk
** 
	gç
 = 
my_¨ía_¶Ÿ
->
èsk_poﬁ
;

518  
	gç
 =
Em±yTaskPoﬁ
 || 
ç
 =
LockedTaskPoﬁ
;

521 
ölöe
 
boﬁ
 
	ggíîic_scheduÀr
::
is_quõs˚¡_loˇl_èsk_poﬁ_em±y
 () const {

522 
__TBB_ASSERT
–
is_loˇl_èsk_poﬁ_quõs˚¡
(), "TaskÖool isÇot quiescent" );

523  
__TBB_lﬂd_ªœxed
(
my_¨ía_¶Ÿ
->
hód
Ë=__TBB_lﬂd_ªœxed(my_¨ía_¶Ÿ->
èû
);

526 
ölöe
 
boﬁ
 
	ggíîic_scheduÀr
::
is_quõs˚¡_loˇl_èsk_poﬁ_ª£t
 () const {

527 
__TBB_ASSERT
–
is_loˇl_èsk_poﬁ_quõs˚¡
(), "TaskÖool isÇot quiescent" );

528  
__TBB_lﬂd_ªœxed
(
my_¨ía_¶Ÿ
->
hód
Ë=0 && __TBB_lﬂd_ªœxed(my_¨ía_¶Ÿ->
èû
) == 0;

531 
ölöe
 
boﬁ
 
	ggíîic_scheduÀr
::
ma°î_ouãrmo°_Àvñ
 () const {

532  
my_di•©chög_èsk
 =
my_dummy_èsk
;

535 
ölöe
 
boﬁ
 
	ggíîic_scheduÀr
::
w‹kî_ouãrmo°_Àvñ
 () const {

536  !
my_di•©chög_èsk
;

539 #i‡
__TBB_TASK_GROUP_CONTEXT


540 
ölöe
 
èsk_group_c⁄ãxt
* 
	ggíîic_scheduÀr
::
deÁu…_c⁄ãxt
 () {

541  
my_dummy_èsk
->
¥efix
().
c⁄ãxt
;

545 
ölöe
 
	ggíîic_scheduÀr
::
©èch_maûbox
–
afföôy_id
 
id
 ) {

546 
__TBB_ASSERT
(
id
>0,
NULL
);

547 
	gmy_öbox
.
©èch
–
my_¨ía
->
maûbox
(
id
) );

548 
	gmy_afföôy_id
 = 
id
;

551 
ölöe
 
boﬁ
 
	ggíîic_scheduÀr
::
is_w‹kî
() {

552  
my_¨ía_ödex
 != 0;

555 
ölöe
 
	ggíîic_scheduÀr
::
numbî_of_w‹kîs_ö_my_¨ía
() {

556  
my_¨ía
->
my_max_num_w‹kîs
;

560 
ölöe
 
	ggíîic_scheduÀr
::
dóŒoˇã_èsk
–
èsk
& 
t
 ) {

561 #i‡
TBB_USE_ASSERT


562 
èsk_¥efix
& 
p
 = 
t
.
¥efix
();

563 
	gp
.
	g°©e
 = 0xFF;

564 
	gp
.
	gexåa_°©e
 = 0xFF;

565 
pois⁄_poöãr
(
p
.
√xt
);

567 
NFS_Fªe
((*)&
t
-
èsk_¥efix_ª£rv©i⁄_size
);

568 #i‡
__TBB_COUNT_TASK_NODES


569 --
	gmy_èsk_node_cou¡
;

573 #i‡
__TBB_COUNT_TASK_NODES


574 
ölöe
 
öçå_t
 
	ggíîic_scheduÀr
::
gë_èsk_node_cou¡
–
boﬁ
 
cou¡_¨ía_w‹kîs
 ) {

575  
my_èsk_node_cou¡
 + (
cou¡_¨ía_w‹kîs
? 
my_¨ía
->
w‹kîs_èsk_node_cou¡
(): 0);

579 
ölöe
 
	ggíîic_scheduÀr
::
ª£t_deque_™d_Àave_¨ía
 ( 
boﬁ
 
locked
 ) {

580 i‡–!
locked
 )

581 
acquúe_èsk_poﬁ
();

582 
__TBB_°‹e_ªœxed
–
my_¨ía_¶Ÿ
->
èû
, 0 );

583 
__TBB_°‹e_ªœxed
–
my_¨ía_¶Ÿ
->
hód
, 0 );

584 
Àave_¨ía
();

588 
ölöe
 
	ggíîic_scheduÀr
::
commô_•aw√d_èsks
–
size_t
 
√w_èû
 ) {

589 
__TBB_ASSERT
 ( 
√w_èû
 <
my_¨ía_¶Ÿ
->
my_èsk_poﬁ_size
, "task dequeÉnd was overwritten" );

591 
ITT_NOTIFY
(
sync_ªÀasög
, (*)((
uöçå_t
)
my_¨ía_¶Ÿ
+(uintptr_t)));

594 
__TBB_°‹e_wôh_ªÀa£
–
my_¨ía_¶Ÿ
->
èû
, 
√w_èû
 );

597 
	ggíîic_scheduÀr
::
commô_ªloˇãd_èsks
 ( 
size_t
 
√w_èû
 ) {

598 
__TBB_ASSERT
–
is_loˇl_èsk_poﬁ_quõs˚¡
(),

600 
__TBB_°‹e_ªœxed
–
my_¨ía_¶Ÿ
->
hód
, 0 );

603 
__TBB_°‹e_ªœxed
–
my_¨ía_¶Ÿ
->
èû
, 
√w_èû
 );

604 
ªÀa£_èsk_poﬁ
();

607 
	gãm∂©e
<
‰ì_èsk_höt
 
	ghöt
>

608 
	ggíîic_scheduÀr
::
‰ì_èsk
–
èsk
& 
t
 ) {

609 #i‡
__TBB_HOARD_NONLOCAL_TASKS


610 c⁄° 
h
 = 
höt
&(~
loˇl_èsk
);

612 c⁄° 
‰ì_èsk_höt
 
	gh
 = 
höt
;

614 
GATHER_STATISTIC
(--
my_cou¡îs
.
a˘ive_èsks
);

615 
	gèsk_¥efix
& 
	gp
 = 
t
.
¥efix
();

617 
__TBB_ASSERT
–
h
!=
smÆl_loˇl_èsk
 || 
p
.
‹igö
==
this
, 
NULL
 );

618 
__TBB_ASSERT
–!(
h
&
smÆl_èsk
Ë|| 
p
.
‹igö
, 
NULL
 );

619 
__TBB_ASSERT
–!(
h
&
loˇl_èsk
Ë|| (!
p
.
‹igö
 || 
uöçå_t
(p.origin) > uintptr_t(4096)), "local_task meansállocated");

620 
pois⁄_vÆue
(
p
.
dïth
);

621 
pois⁄_vÆue
(
p
.
ªf_cou¡
);

622 
pois⁄_poöãr
(
p
.
ow√r
);

623 
__TBB_ASSERT
–1L<<
t
.
°©e
(Ë& (1L<<
èsk
::
executög
|1L<<èsk::
Æloˇãd
), 
NULL
 );

624 
	gp
.
	g°©e
 = 
èsk
::
‰ìd
;

625 if–
	gh
==
smÆl_loˇl_èsk
 || 
p
.
‹igö
==
this
 ) {

626 
GATHER_STATISTIC
(++
my_cou¡îs
.
‰ì_li°_Àngth
);

627 
	gp
.
	g√xt
 = 
my_‰ì_li°
;

628 
	gmy_‰ì_li°
 = &
t
;

629 } if–!(
	gh
&
	gloˇl_èsk
Ë&& 
	gp
.
	g‹igö
 && 
uöçå_t
(
p
.
‹igö
) < uintptr_t(4096) ) {

632 } if–!(
	gh
&
	gloˇl_èsk
Ë&& 
	gp
.
	g‹igö
 ) {

633 
GATHER_STATISTIC
(++
my_cou¡îs
.
‰ì_li°_Àngth
);

634 #i‡
__TBB_HOARD_NONLOCAL_TASKS


635 if–!(
	gh
&
	gno_ˇche
) ) {

636 
	gp
.
	g√xt
 = 
my_n⁄loˇl_‰ì_li°
;

637 
	gmy_n⁄loˇl_‰ì_li°
 = &
t
;

640 
‰ì_n⁄loˇl_smÆl_èsk
(
t
);

642 
GATHER_STATISTIC
(--
my_cou¡îs
.
big_èsks
);

643 
dóŒoˇã_èsk
(
t
);

647 #i‡
__TBB_TASK_PRIORITY


648 
ölöe
 
öçå_t
 
	ggíîic_scheduÀr
::
ef„˘ive_ª„ªn˚_¥i‹ôy
 () const {

655  !
w‹kî_ouãrmo°_Àvñ
() ||

656 
my_¨ía
->
my_num_w‹kîs_ÆlŸãd
 < my_¨ía->
num_w‹kîs_a˘ive
()

657 ? *
my_ªf_t›_¥i‹ôy
 : 
my_¨ía
->
my_t›_¥i‹ôy
;

660 
ölöe
 
	ggíîic_scheduÀr
::
ofÊﬂd_èsk
 ( 
èsk
& 
t
, 
öçå_t
 ) {

661 
GATHER_STATISTIC
–++
my_cou¡îs
.
¥io_èsks_ofÊﬂded
 );

662 
__TBB_ASSERT
–
my_ofÊﬂded_èsk_li°_èû_lök
 && !*my_ofÊﬂded_èsk_li°_èû_lök, 
NULL
 );

663 #i‡
TBB_USE_ASSERT


664 
	gt
.
¥efix
().
	g°©e
 = 
èsk
::
ªady
;

666 
	gt
.
¥efix
().
	g√xt_ofÊﬂded
 = 
my_ofÊﬂded_èsks
;

667 
	gmy_ofÊﬂded_èsks
 = &
t
;

671 #i‡
__TBB_FP_CONTEXT


672 ˛as†
	c˝u_˘l_ív_hñ≥r
 {

673 
˝u_˘l_ív
 
	ggu¨d_˝u_˘l_ív
;

674 
˝u_˘l_ív
 
	gcuº_˝u_˘l_ív
;

675 
	gpublic
:

676 
˝u_˘l_ív_hñ≥r
() {

677 
gu¨d_˝u_˘l_ív
.
gë_ív
();

678 
	gcuº_˝u_˘l_ív
 = 
gu¨d_˝u_˘l_ív
;

680 ~
˝u_˘l_ív_hñ≥r
() {

681 i‡–
	gcuº_˝u_˘l_ív
 !
gu¨d_˝u_˘l_ív
 )

682 
gu¨d_˝u_˘l_ív
.
£t_ív
();

684 
£t_ív
–c⁄° 
èsk_group_c⁄ãxt
 *
˘x
 ) {

685 
	ggíîic_scheduÀr
::
as£π_c⁄ãxt_vÆid
(
˘x
);

686 c⁄° 
	g˝u_˘l_ív
 &
	g˘l
 = *
pu¬ed_ˇ°
<
˝u_˘l_ív
*>(&
˘x
->
my_˝u_˘l_ív
);

687 i‡–
	g˘l
 !
cuº_˝u_˘l_ív
 ) {

688 
cuº_˝u_˘l_ív
 = 
˘l
;

689 
	gcuº_˝u_˘l_ív
.
£t_ív
();

692 
ª°‹e_deÁu…
() {

693 i‡–
	gcuº_˝u_˘l_ív
 !
gu¨d_˝u_˘l_ív
 ) {

694 
gu¨d_˝u_˘l_ív
.
£t_ív
();

695 
	gcuº_˝u_˘l_ív
 = 
gu¨d_˝u_˘l_ív
;

700 
	s˝u_˘l_ív_hñ≥r
 {

701 
£t_ív
–
__TBB_CONTEXT_ARG1
(
èsk_group_c⁄ãxt
 *) ) {}

702 
ª°‹e_deÁu…
() {}

	@viper/concurrentqueue-src/benchmarks/tbb/scheduler_common.h

21 #i‚de‡
_TBB_scheduÀr_comm⁄_H


22 
	#_TBB_scheduÀr_comm⁄_H


	)

24 
	~"tbb/tbb_machöe.h
"

25 
	~"tbb/ˇche_Æig√d_Æloˇt‹.h
"

27 
	~<°rög.h
>

29 
	~"tbb_°©i°ics.h
"

31 #i‡
TBB_USE_ASSERT
 > 1

32 
	~<°dio.h
>

38 #i‚de‡
¥iv©e


39 
	#¥iv©e
 
public


	)

40 
	#undef_¥iv©e


	)

43 
	~"tbb/èsk.h
"

44 
	~"tbb/tbb_ex˚±i⁄.h
"

46 #ifde‡
undef_¥iv©e


47 #unde‡
¥iv©e


50 #i‚de‡
__TBB_SCHEDULER_MUTEX_TYPE


51 
	#__TBB_SCHEDULER_MUTEX_TYPE
 
tbb
::
•ö_muãx


	)

54 
	~"tbb/•ö_muãx.h
"

59 #i‡
__TBB_TASK_GROUP_CONTEXT


60 
	#__TBB_CONTEXT_ARG1
(
c⁄ãxt
Ë
	)
context

61 
	#__TBB_CONTEXT_ARG
(
¨g1
, 
c⁄ãxt
Ë¨g1, 
	)
context

63 
	#__TBB_CONTEXT_ARG1
(
c⁄ãxt
)

	)

64 
	#__TBB_CONTEXT_ARG
(
¨g1
, 
c⁄ãxt
Ë
	)
arg1

67 #i‡
DO_TBB_TRACE


68 
	~<c°dio
>

69 
	#TBB_TRACE
(
x
Ë(()
°d
::
¥ötf
 x)

	)

71 
	#TBB_TRACE
(
x
Ë(()(0))

	)

74 #i‡!
__TBB_CPU_CTL_ENV_PRESENT


75 
	~<„nv.h
>

78 #i‡
_MSC_VER
 && !
deföed
(
__INTEL_COMPILER
)

82 #¥agm®
w¨nög
 (
dißbÀ
: 4100 4127 4312 4244 4267 4706)

85 
«me•a˚
 
	gtbb
 {

86 
«me•a˚
 
	göãrÁ˚7
 {

87 
«me•a˚
 
	göã∫Æ
 {

88 
˛ass
 
	gèsk_¨ía_ba£
;

89 
˛ass
 
	gdñeg©ed_èsk
;

90 
˛ass
 
	gwaô_èsk
;

92 
«me•a˚
 
	göã∫Æ
 {

93 
usög
 
«me•a˚
 
	göãrÁ˚7
::
öã∫Æ
;

95 
˛ass
 
	g¨ía
;

96 
	gãm∂©e
<
ty≥«me
 
	gScheduÀrTøôs
> 
˛ass
 
	gcu°om_scheduÀr
;

97 
˛ass
 
	ggíîic_scheduÀr
;

98 
˛ass
 
	ggovîn‹
;

99 
˛ass
 
	gmaû_outbox
;

100 
˛ass
 
	gm¨kë
;

101 
˛ass
 
	gob£rvî_¥oxy
;

102 
˛ass
 
	gèsk_scheduÀr_ob£rvî_v3
;

104 #i‡
__TBB_TASK_PRIORITY


105 c⁄° 
öçå_t
 
	gnum_¥i‹ôy_Àvñs
 = 3;

106 c⁄° 
öçå_t
 
	gn‹mÆized_n‹mÆ_¥i‹ôy
 = (
num_¥i‹ôy_Àvñs
 - 1) / 2;

108 
ölöe
 
öçå_t
 
n‹mÆize_¥i‹ôy
 ( 
¥i‹ôy_t
 
p
 ) {

109  
öçå_t
(
p
 - 
¥i‹ôy_low
Ë/ 
	g¥i‹ôy_°ride_v4
;

112 c⁄° 
¥i‹ôy_t
 
	g¥i‹ôy_‰om_n‹mÆized_ªp
[
num_¥i‹ôy_Àvñs
] = {

113 
¥i‹ôy_low
, 
¥i‹ôy_n‹mÆ
, 
¥i‹ôy_high


116 
ölöe
 
as£π_¥i‹ôy_vÆid
 ( 
öçå_t
 
p
 ) {

117 
__TBB_ASSERT_EX
–
p
 >0 &&Ö < 
num_¥i‹ôy_Àvñs
, 
NULL
 );

120 
ölöe
 
	göçå_t
& 
¥i‹ôy
 ( 
èsk
& 
t
 ) {

121  
	gt
.
¥efix
().
	gc⁄ãxt
->
	gmy_¥i‹ôy
;

126 
__TBB_SCHEDULER_MUTEX_TYPE
 
	tscheduÀr_muãx_ty≥
;

128 #i‡
__TBB_TASK_GROUP_CONTEXT


139 
uöçå_t
 
the_c⁄ãxt_°©e_¥›ag©i⁄_ïoch
;

143 
scheduÀr_muãx_ty≥
 
	tc⁄ãxt_°©e_¥›ag©i⁄_muãx_ty≥
;

144 
c⁄ãxt_°©e_¥›ag©i⁄_muãx_ty≥
 
the_c⁄ãxt_°©e_¥›ag©i⁄_muãx
;

148 c⁄° 
size_t
 
	gèsk_Æignmít
 = 32;

152 c⁄° 
size_t
 
	gèsk_¥efix_ª£rv©i⁄_size
 = (((
öã∫Æ
::
èsk_¥efix
)-1)/
èsk_Æignmít
+1)*task_alignment;

155 
	eèsk_exåa_°©e
 {

157 
	ges_vîsi⁄_1_èsk
 = 0,

159 
	ges_vîsi⁄_3_èsk
 = 1,

161 
	ges_èsk_íqueued
 = 0x10,

163 
	ges_èsk_¥oxy
 = 0x20,

165 
	ges_ªf_cou¡_a˘ive
 = 0x40,

167 
	ges_èsk_is_°ﬁí
 = 0x80

170 
ölöe
 
ª£t_exåa_°©e
 ( 
èsk
 *
t
 ) {

171 
	gt
->
¥efix
().
	gexåa_°©e
 &~(
es_èsk_is_°ﬁí
 | 
es_èsk_íqueued
);

175 
	e‰ì_èsk_höt
 {

177 
	gno_höt
=0,

179 
	gloˇl_èsk
=1,

182 
	gsmÆl_èsk
=2,

185 
	gsmÆl_loˇl_èsk
=3,

187 
	gno_ˇche
 = 4,

189 
	gno_ˇche_smÆl_èsk
 = 
no_ˇche
 | 
smÆl_èsk


196 #i‡
TBB_USE_ASSERT


198 c⁄° 
uöçå_t
 
	gvíom
 = 
tbb
::
öã∫Æ
::
£À˘_size_t_c⁄°™t
<0xDEADBEEFU,0xDDEEAADDDEADBEEFULL>::
vÆue
;

200 
	gãm∂©e
 <
ty≥«me
 
	gT
>

201 
pois⁄_vÆue
 ( 
T
& 
vÆ
 ) { 
	gvÆ
 = * 
pu¬ed_ˇ°
<T*>(&
víom
); }

204 
ölöe
 
boﬁ
 
is_Æive
–
uöçå_t
 
v
 ) {  
	gv
 !
víom
; }

208 
ölöe
 
as£π_èsk_vÆid
–c⁄° 
èsk
&Åask ) {

209 
__TBB_ASSERT
–&
èsk
!=
NULL
, NULL );

210 
__TBB_ASSERT
–!
is_pois⁄ed
(&
èsk
), 
NULL
 );

211 
__TBB_ASSERT
–(
uöçå_t
)&
èsk
 % 
èsk_Æignmít
 == 0, "misalignedÅask" );

212 #i‡
__TBB_RECYCLE_TO_ENQUEUE


213 
__TBB_ASSERT
–()
èsk
.
°©e
()<=(Èask::
to_íqueue
, "corruptÅask (invalid state)" );

215 
__TBB_ASSERT
–()
èsk
.
°©e
()<=(Èask::
ªcy˛e
, "corruptÅask (invalid state)" );

223 
	#pois⁄_vÆue
(
g
Ë(()0)

	)

225 
ölöe
 
as£π_èsk_vÆid
–c⁄° 
èsk
& ) {}

233 #i‡
__TBB_TASK_GROUP_CONTEXT


234 
ölöe
 
boﬁ
 
C⁄cuºítWaôsE«bÀd
 ( 
èsk
& 
t
 ) {

235  (
	gt
.
¥efix
().
	gc⁄ãxt
->
	gmy_vîsi⁄_™d_åaôs
 & 
	gèsk_group_c⁄ãxt
::
c⁄cuºít_waô
) != 0;

238 
ölöe
 
boﬁ
 
C™˚Œ©i⁄InfoPª£¡
 ( 
èsk
& 
t
 ) {

239  
	gt
.
¥efix
().
	gc⁄ãxt
->
	gmy_ˇn˚Œ©i⁄_ªque°ed
 != 0;

242 #i‡
TBB_USE_CAPTURED_EXCEPTION


243 
ölöe
 
tbb_ex˚±i⁄
* 
TbbCuºítEx˚±i⁄
–
èsk_group_c⁄ãxt
*,Åbb_ex˚±i⁄* 
§c
Ë{  
	g§c
->
move
(); }

244 
ölöe
 
tbb_ex˚±i⁄
* 
TbbCuºítEx˚±i⁄
–
èsk_group_c⁄ãxt
*, 
ˇ±uªd_ex˚±i⁄
* 
§c
Ë{  
	g§c
; }

248 
	#TbbCuºítEx˚±i⁄
(
c⁄ãxt
, 
TbbC≠tuªdEx˚±i⁄
) \

249 
c⁄ãxt
->
my_vîsi⁄_™d_åaôs
 & 
èsk_group_c⁄ãxt
::
exa˘_ex˚±i⁄
 \

250 ? 
tbb_ex˚±i⁄_±r
::
	`Æloˇã
() \

251 : 
tbb_ex˚±i⁄_±r
::
	`Æloˇã
–*(
TbbC≠tuªdEx˚±i⁄
Ë);

	)

254 
	#TbbRegi°îCuºítEx˚±i⁄
(
c⁄ãxt
, 
TbbC≠tuªdEx˚±i⁄
) \

255 i‡–
c⁄ãxt
->
	`ˇn˚l_group_executi⁄
() ) { \

257 
c⁄ãxt
->
my_ex˚±i⁄
 = 
	`TbbCuºítEx˚±i⁄
–c⁄ãxt, 
TbbC≠tuªdEx˚±i⁄
 ); \

258 }

	)

260 
	#TbbC©chAŒ
(
c⁄ãxt
) \

261 
	`ˇtch
 ( 
tbb_ex˚±i⁄
& 
exc
 ) { \

262 
	`TbbRegi°îCuºítEx˚±i⁄
–
c⁄ãxt
, &
exc
 ); \

263 } 
	`ˇtch
 ( 
°d
::
ex˚±i⁄
& 
exc
 ) { \

264 
	`TbbRegi°îCuºítEx˚±i⁄
–
c⁄ãxt
, 
ˇ±uªd_ex˚±i⁄
::
	`Æloˇã
(
	`ty≥id
(
exc
).
	`«me
(),Éxc.
	`wh©
()) ); \

265 } 
	`ˇtch
 ( ... ) { \

266 
	`TbbRegi°îCuºítEx˚±i⁄
–
c⁄ãxt
, 
ˇ±uªd_ex˚±i⁄
::
	`Æloˇã
("...", "UnidentifiedÉxception") );\

267 }

	)

271 
ölöe
 
boﬁ
 
C⁄cuºítWaôsE«bÀd
 ( 
èsk
& 
t
 ) {  
	gÁl£
; }

278 
	s¨ía_¶Ÿ_löe1
 {

282 
gíîic_scheduÀr
* 
	gmy_scheduÀr
;

288 
èsk
* *
__TBB_©omic
 
	gèsk_poﬁ
;

292 
__TBB_©omic
 
size_t
 
	ghód
;

295 
	s¨ía_¶Ÿ_löe2
 {

298 
	ghöt_f‹_p›
;

302 
__TBB_©omic
 
size_t
 
	gèû
;

305 
size_t
 
	gmy_èsk_poﬁ_size
;

308 
èsk
* *
__TBB_©omic
 
	gèsk_poﬁ_±r
;

310 #i‡
__TBB_STATISTICS


312 
°©i°ics_cou¡îs
 *
	gmy_cou¡îs
;

316 
	g¨ía_¶Ÿ
 : 
∑dded
<
¨ía_¶Ÿ_löe1
>, 
	g∑dded
<
	g¨ía_¶Ÿ_löe2
> {

317 #i‡
TBB_USE_ASSERT


318 
fûl_wôh_ˇ«ry_∑âîn
 ( 
size_t
 
fú°
, size_à
œ°
 ) {

319  
size_t
 
	gi
 = 
fú°
; i < 
	gœ°
; ++i )

320 
pois⁄_poöãr
(
èsk_poﬁ_±r
[
i
]);

323 
fûl_wôh_ˇ«ry_∑âîn
 ( 
size_t
, size_t ) {}

326 
Æloˇã_èsk_poﬁ
–
size_t
 
n
 ) {

327 
size_t
 
	gbyã_size
 = ((
n
 * (
èsk
*Ë+ 
NFS_MaxLöeSize
 - 1) / NFS_MaxLineSize) * NFS_MaxLineSize;

328 
	gmy_èsk_poﬁ_size
 = 
byã_size
 / (
èsk
*);

329 
	gèsk_poﬁ_±r
 = (
èsk
**)
NFS_AŒoˇã
–1, 
byã_size
, 
NULL
 );

332 
fûl_wôh_ˇ«ry_∑âîn
–0, 
my_èsk_poﬁ_size
 );

336 
‰ì_èsk_poﬁ
( ) {

337 #i‡!
__TBB_TASK_ARENA


338 
__TBB_ASSERT
–!
èsk_poﬁ
 , 
NULL
);

342 if–
	gèsk_poﬁ_±r
 ) {

343 
__TBB_ASSERT
–
my_èsk_poﬁ_size
, 
NULL
);

344 
NFS_Fªe
–
èsk_poﬁ_±r
 );

345 
	gèsk_poﬁ_±r
 = 
NULL
;

346 
	gmy_èsk_poﬁ_size
 = 0;

351 #i‡!
__TBB_CPU_CTL_ENV_PRESENT


352 ˛as†
	c˝u_˘l_ív
 {

353 
„nv_t
 *
	gmy_„nv_±r
;

354 
	gpublic
:

355 
˝u_˘l_ív
(Ë: 
my_„nv_±r
(
NULL
) {}

356 ~
˝u_˘l_ív
() {

357 i‡–
my_„nv_±r
 )

358 
tbb
::
öã∫Æ
::
NFS_Fªe
–(*)
my_„nv_±r
 );

366 
˝u_˘l_ív
–c⁄° cpu_˘l_ív &
§c
 ) : 
my_„nv_±r
(
NULL
) {

367 *
this
 = 
§c
;

369 
	g˝u_˘l_ív
& 
	g›î©‹
=–c⁄° 
˝u_˘l_ív
 &
§c
 ) {

370 
__TBB_ASSERT
–
§c
.
my_„nv_±r
, 
NULL
 );

371 i‡–!
	gmy_„nv_±r
 )

372 
	gmy_„nv_±r
 = (
„nv_t
*)
tbb
::
öã∫Æ
::
NFS_AŒoˇã
(1, („nv_t), 
NULL
);

373 *
	gmy_„nv_±r
 = *
§c
.
my_„nv_±r
;

374  *
	gthis
;

376 
boﬁ
 
	g›î©‹
!=–c⁄° 
˝u_˘l_ív
 &
˘l
 ) const {

377 
__TBB_ASSERT
–
my_„nv_±r
, "cpu_ctl_env isÇot initialized." );

378 
__TBB_ASSERT
–
˘l
.
my_„nv_±r
, "cpu_ctl_env isÇot initialized." );

379  
memcmp
–(*)
my_„nv_±r
, (*)
˘l
.my_„nv_±r, (
„nv_t
) );

381 
gë_ív
 () {

382 i‡–!
	gmy_„nv_±r
 )

383 
	gmy_„nv_±r
 = (
„nv_t
*)
tbb
::
öã∫Æ
::
NFS_AŒoˇã
(1, („nv_t), 
NULL
);

384 
„gëív
–
my_„nv_±r
 );

386 c⁄° 
	g˝u_˘l_ív
& 
£t_ív
 () const {

387 
__TBB_ASSERT
–
my_„nv_±r
, "cpu_ctl_env isÇot initialized." );

388 
„£ãnv
–
my_„nv_±r
 );

389  *
	gthis
;

	@viper/concurrentqueue-src/benchmarks/tbb/scheduler_utility.h

21 #i‚de‡
_TBB_scheduÀr_utûôy_H


22 
	#_TBB_scheduÀr_utûôy_H


	)

24 
	~"scheduÀr.h
"

26 
«me•a˚
 
	gtbb
 {

27 
«me•a˚
 
	göã∫Æ
 {

34 ˛as†
	cauto_em±y_èsk
 {

35 
èsk
* 
	gmy_èsk
;

36 
gíîic_scheduÀr
* 
	gmy_scheduÀr
;

37 
	gpublic
:

38 
auto_em±y_èsk
 ( 
__TBB_CONTEXT_ARG
(
gíîic_scheduÀr
 *
s
, 
èsk_group_c⁄ãxt
* 
c⁄ãxt
) )

39 : 
my_èsk
–
√w
(&
s
->
Æloˇã_èsk
((
em±y_èsk
), 
__TBB_CONTEXT_ARG
(
NULL
, 
c⁄ãxt
)))Émpty_task )

40 , 
my_scheduÀr
(
s
)

43 ~
auto_em±y_èsk
 (Ë{ 
	gmy_scheduÀr
->
	g‰ì_èsk
<
	gsmÆl_loˇl_èsk
>(*
	gmy_èsk
); }

45 
›î©‹
 
	gèsk
& (Ë{  *
	gmy_èsk
; }

46 
èsk
* 
	g›î©‹
 & (Ë{  
	gmy_èsk
; }

47 
	gèsk_¥efix
& 
¥efix
 (Ë{  
	gmy_èsk
->prefix(); }

59 
	gãm∂©e
<
ty≥«me
 
	gT
, 
size_t
 
	gmax_£gmíts
 = 16>

60 ˛as†
	cÁ°_ªvî£_ve˘‹


62 
public
:

63 
Á°_ªvî£_ve˘‹
 ( 
T
* 
öôül_£gmít
, 
size_t
 
£gmít_size
 )

64 : 
m_cur_£gmít
(
öôül_£gmít
)

65 , 
m_cur_£gmít_size
(
£gmít_size
)

66 , 
m_pos
(
£gmít_size
)

67 , 
m_num_£gmíts
(0)

68 , 
m_size
(0)

70 
__TBB_ASSERT
 ( 
öôül_£gmít
 && 
£gmít_size
, "Nonempty initial segment must be supplied");

73 ~
Á°_ªvî£_ve˘‹
 ()

75  
size_t
 
	gi
 = 1; i < 
	gm_num_£gmíts
; ++i )

76 
NFS_Fªe
–
m_£gmíts
[
i
] );

79 
size_t
 
size
 (Ëc⁄° {  
	gm_size
 + 
	gm_cur_£gmít_size
 - 
	gm_pos
; }

81 
push_back
 ( c⁄° 
T
& 
vÆ
 )

83 i‡–!
	gm_pos
 ) {

84 i‡–!
	gm_num_£gmíts
 ) 
	gm_£gmíts
[
m_num_£gmíts
++] = 
m_cur_£gmít
;

85 
	gm_size
 +
m_cur_£gmít_size
;

86 
	gm_cur_£gmít_size
 *= 2;

87 
	gm_pos
 = 
m_cur_£gmít_size
;

88 
	gm_£gmíts
[
m_num_£gmíts
++] = 
m_cur_£gmít
 = (
T
*)
NFS_AŒoˇã
–
m_cur_£gmít_size
, (T), 
NULL
 );

89 
__TBB_ASSERT
 ( 
m_num_£gmíts
 < 
max_£gmíts
, "Maximal capacityÉxceeded" );

91 
	gm_cur_£gmít
[--
m_pos
] = 
vÆ
;

96 
c›y_mem‹y
 ( 
T
* 
d°
 ) const

98 
size_t
 
	gsz
 = 
m_cur_£gmít_size
 - 
m_pos
;

99 
mem˝y
–
d°
, 
m_cur_£gmít
 + 
m_pos
, 
sz
 * (
T
) );

100 
	gd°
 +
sz
;

101 
	gsz
 = 
m_cur_£gmít_size
 / 2;

102  
	gi
 = ()
m_num_£gmíts
 - 2; i >= 0; --i ) {

103 
mem˝y
–
d°
, 
m_£gmíts
[
i
], 
sz
 * (
T
) );

104 
	gd°
 +
sz
;

105 
	gsz
 /= 2;

109 
	g¥Ÿe˘ed
:

111 
T
 *
m_cur_£gmít
;

114 
size_t
 
	gm_cur_£gmít_size
;

117 
size_t
 
	gm_pos
;

120 
T
 *
	gm_£gmíts
[
max_£gmíts
];

123 
size_t
 
	gm_num_£gmíts
;

126 
size_t
 
	gm_size
;

	@viper/concurrentqueue-src/benchmarks/tbb/semaphore.cpp

21 
	~"£m≠h‹e.h
"

22 #i‡
__TBB_USE_SRWLOCK


23 
	~"dy«mic_lök.h
"

24 
	~"tbb_misc.h
"

27 
«me•a˚
 
	gtbb
 {

28 
«me•a˚
 
	göã∫Æ
 {

31 #i‡
__TBB_USE_SRWLOCK


33 
	g©omic
<
	gdo_⁄˚_°©e
> 
	gc⁄cm⁄_moduÀ_öôed
;

35 
WINAPI
 
öô_bö£m_usög_evít
–
SRWLOCK
* 
h_
 )

37 
§wl_‹_h™dÀ
* 
	gsh±r
 = (§wl_‹_h™dÀ*Ë
h_
;

38 
	gsh±r
->
	gh
 = 
Cª©eEvítEx
–
NULL
, NULL, 0, 
EVENT_ALL_ACCESS
|
SEMAPHORE_ALL_ACCESS
 );

41 
WINAPI
 
acquúe_bö£m_usög_evít
–
SRWLOCK
* 
h_
 )

43 
§wl_‹_h™dÀ
* 
	gsh±r
 = (§wl_‹_h™dÀ*Ë
h_
;

44 
WaôF‹SögÀObje˘Ex
–
sh±r
->
h
, 
INFINITE
, 
FALSE
 );

47 
WINAPI
 
ªÀa£_bö£m_usög_evít
–
SRWLOCK
* 
h_
 )

49 
§wl_‹_h™dÀ
* 
	gsh±r
 = (§wl_‹_h™dÀ*Ë
h_
;

50 
SëEvít
–
sh±r
->
h
 );

53 (
WINAPI
 *
	g__TBB_öô_bö£m
)–
	gSRWLOCK
* ) = ((WINAPI *)(
SRWLOCK
*))&
öô_bö£m_usög_evít
;

54 (
WINAPI
 *
	g__TBB_acquúe_bö£m
)–
	gSRWLOCK
* ) = ((WINAPI *)(
SRWLOCK
*))&
acquúe_bö£m_usög_evít
;

55 (
WINAPI
 *
	g__TBB_ªÀa£_bö£m
)–
	gSRWLOCK
* ) = ((WINAPI *)(
SRWLOCK
*))&
ªÀa£_bö£m_usög_evít
;

58 c⁄° 
dy«mic_lök_des¸ùt‹
 
	gSRWLLökTabÀ
[] = {

59 
DLD
(
InôülizeSRWLock
, 
__TBB_öô_bö£m
),

60 
DLD
(
AcquúeSRWLockEx˛usive
, 
__TBB_acquúe_bö£m
),

61 
DLD
(
Rñó£SRWLockEx˛usive
, 
__TBB_ªÀa£_bö£m
)

64 
ölöe
 
öô_c⁄cm⁄_moduÀ
()

66 
__TBB_ASSERT
–(
uöçå_t
)
__TBB_öô_bö£m
==(uöçå_t)&
öô_bö£m_usög_evít
, 
NULL
 );

67 if–
dy«mic_lök
–"Kî√l32.dŒ", 
SRWLLökTabÀ
, (SRWLLökTabÀ)/(
dy«mic_lök_des¸ùt‹
) ) ) {

68 
__TBB_ASSERT
–(
uöçå_t
)
__TBB_öô_bö£m
!=(uöçå_t)&
öô_bö£m_usög_evít
, 
NULL
 );

69 
__TBB_ASSERT
–(
uöçå_t
)
__TBB_acquúe_bö£m
!=(uöçå_t)&
acquúe_bö£m_usög_evít
, 
NULL
 );

70 
__TBB_ASSERT
–(
uöçå_t
)
__TBB_ªÀa£_bö£m
!=(uöçå_t)&
ªÀa£_bö£m_usög_evít
, 
NULL
 );

74 
	gbö¨y_£m≠h‹e
::
bö¨y_£m≠h‹e
() {

75 
©omic_do_⁄˚
–&
öô_c⁄cm⁄_moduÀ
, 
c⁄cm⁄_moduÀ_öôed
 );

77 
__TBB_öô_bö£m
–&
my_£m
.
lock
 );

78 if–(
	guöçå_t
)
	g__TBB_öô_bö£m
!=(
uöçå_t
)&
öô_bö£m_usög_evít
 )

79 
P
();

82 
	gbö¨y_£m≠h‹e
::~
bö¨y_£m≠h‹e
() {

83 if–(
uöçå_t
)
__TBB_öô_bö£m
==(uöçå_t)&
öô_bö£m_usög_evít
 )

84 
Clo£H™dÀ
–
my_£m
.
h
 );

87 
	gbö¨y_£m≠h‹e
::
P
(Ë{ 
__TBB_acquúe_bö£m
–&
my_£m
.
lock
 ); }

89 
	gbö¨y_£m≠h‹e
::
V
(Ë{ 
__TBB_ªÀa£_bö£m
–&
my_£m
.
lock
 ); }

	@viper/concurrentqueue-src/benchmarks/tbb/semaphore.h

21 #i‚de‡
__TBB_tbb_£m≠h‹e_H


22 
	#__TBB_tbb_£m≠h‹e_H


	)

24 
	~"tbb/tbb_°ddef.h
"

26 #i‡
_WIN32
||
_WIN64


27 
	~"tbb/machöe/wödows_≠i.h
"

29 #ñi‡
__APPLE__


30 
	~<mach/£m≠h‹e.h
>

31 
	~<mach/èsk.h
>

32 
	~<mach/mach_öô.h
>

33 
	~<mach/îr‹.h
>

36 
	~<£m≠h‹e.h
>

37 #ifde‡
TBB_USE_DEBUG


38 
	~<î∫o.h
>

42 
«me•a˚
 
	gtbb
 {

43 
«me•a˚
 
	göã∫Æ
 {

46 #i‡
_WIN32
||
_WIN64


47 
LONG
 
	t£m_cou¡_t
;

49 ˛as†
	c£m≠h‹e
 : 
no_c›y
 {

50 c⁄° 
max_£m≠h‹e_˙t
 = 
MAXLONG
;

51 
	gpublic
:

53 
£m≠h‹e
(
size_t
 
°¨t_˙t_
 = 0Ë{
öô_£m≠h‹e
(start_cnt_);}

55 ~
£m≠h‹e
(Ë{
Clo£H™dÀ
–
£m
 );}

57 
P
(Ë{
WaôF‹SögÀObje˘Ex
–
£m
, 
INFINITE
, 
FALSE
 );}

59 
V
(Ë{
Rñó£Sem≠h‹e
–
£m
, 1, 
NULL
 );}

60 
	g¥iv©e
:

61 
HANDLE
 
£m
;

62 
öô_£m≠h‹e
(
size_t
 
°¨t_˙t_
) {

63 
	g£m
 = 
Cª©eSem≠h‹eEx
–
NULL
, 
LONG
(
°¨t_˙t_
), 
max_£m≠h‹e_˙t
, NULL, 0, 
SEMAPHORE_ALL_ACCESS
 );

66 #ñi‡
__APPLE__


68 ˛as†
	c£m≠h‹e
 : 
no_c›y
 {

69 
public
:

71 
£m≠h‹e
(
°¨t_˙t_
 = 0Ë: 
£m
(°¨t_˙t_Ë{ 
öô_£m≠h‹e
(start_cnt_); }

73 ~
£m≠h‹e
() {

74 
kîn_ªtu∫_t
 
	gªt
 = 
£m≠h‹e_de°roy
–
mach_èsk_£lf
(), 
£m
 );

75 
__TBB_ASSERT_EX
–
ªt
==
îr_n⁄e
, 
NULL
 );

78 
P
() {

79 
	gªt
;

81 
	gªt
 = 
£m≠h‹e_waô
–
£m
 );

82 }  
	gªt
==
KERN_ABORTED
 );

83 
__TBB_ASSERT
–
ªt
==
KERN_SUCCESS
, "semaphore_wait() failed" );

86 
V
(Ë{ 
£m≠h‹e_sig«l
–
£m
 ); }

87 
	g¥iv©e
:

88 
£m≠h‹e_t
 
£m
;

89 
öô_£m≠h‹e
(
°¨t_˙t_
) {

90 
kîn_ªtu∫_t
 
	gªt
 = 
£m≠h‹e_¸óã
–
mach_èsk_£lf
(), &
£m
, 
SYNC_POLICY_FIFO
, 
°¨t_˙t_
 );

91 
__TBB_ASSERT_EX
–
ªt
==
îr_n⁄e
, "failedÅo createá semaphore" );

95 
uöt32_t
 
	t£m_cou¡_t
;

97 ˛as†
	c£m≠h‹e
 : 
no_c›y
 {

98 
public
:

100 
£m≠h‹e
(
°¨t_˙t_
 = 0 ) { 
öô_£m≠h‹e
( start_cnt_ ); }

103 ~
£m≠h‹e
() {

104 
	gªt
 = 
£m_de°roy
–&
£m
 );

105 
__TBB_ASSERT_EX
–!
ªt
, 
NULL
 );

108 
P
() {

109  
£m_waô
–&
£m
 )!=0 )

110 
__TBB_ASSERT
–
î∫o
==
EINTR
, 
NULL
 );

113 
V
(Ë{ 
£m_po°
–&
£m
 ); }

114 
	g¥iv©e
:

115 
£m_t
 
£m
;

116 
öô_£m≠h‹e
(
°¨t_˙t_
) {

117 
	gªt
 = 
£m_öô
–&
£m
, 0, 
°¨t_˙t_
 );

118 
__TBB_ASSERT_EX
–!
ªt
, 
NULL
 );

125 #i‡
_WIN32
||
_WIN64


126 #i‡!
__TBB_USE_SRWLOCK


128 ˛as†
	cbö¨y_£m≠h‹e
 : 
no_c›y
 {

129 
public
:

131 
bö¨y_£m≠h‹e
(Ë{ 
my_£m
 = 
Cª©eEvítEx
–
NULL
, NULL, 0, 
EVENT_ALL_ACCESS
 ); }

133 ~
bö¨y_£m≠h‹e
(Ë{ 
Clo£H™dÀ
–
my_£m
 ); }

135 
P
(Ë{ 
WaôF‹SögÀObje˘Ex
–
my_£m
, 
INFINITE
, 
FALSE
 ); }

137 
V
(Ë{ 
SëEvít
–
my_£m
 ); }

138 
	g¥iv©e
:

139 
HANDLE
 
my_£m
;

143 
	u§wl_‹_h™dÀ
 {

144 
SRWLOCK
 
	glock
;

145 
HANDLE
 
	gh
;

149 ˛as†
	cbö¨y_£m≠h‹e
 : 
no_c›y
 {

150 
public
:

152 
bö¨y_£m≠h‹e
();

154 ~
bö¨y_£m≠h‹e
();

156 
P
();

158 
V
();

159 
	g¥iv©e
:

160 
§wl_‹_h™dÀ
 
my_£m
;

163 #ñi‡
__APPLE__


165 ˛as†
	cbö¨y_£m≠h‹e
 : 
no_c›y
 {

166 
public
:

168 
bö¨y_£m≠h‹e
(Ë: 
my_£m
(0) {

169 
kîn_ªtu∫_t
 
ªt
 = 
£m≠h‹e_¸óã
–
mach_èsk_£lf
(), &
my_£m
, 
SYNC_POLICY_FIFO
, 0 );

170 
__TBB_ASSERT_EX
–
ªt
==
îr_n⁄e
, "failedÅo createá semaphore" );

173 ~
bö¨y_£m≠h‹e
() {

174 
kîn_ªtu∫_t
 
	gªt
 = 
£m≠h‹e_de°roy
–
mach_èsk_£lf
(), 
my_£m
 );

175 
__TBB_ASSERT_EX
–
ªt
==
îr_n⁄e
, 
NULL
 );

178 
P
() {

179 
	gªt
;

181 
	gªt
 = 
£m≠h‹e_waô
–
my_£m
 );

182 }  
	gªt
==
KERN_ABORTED
 );

183 
__TBB_ASSERT
–
ªt
==
KERN_SUCCESS
, "semaphore_wait() failed" );

186 
V
(Ë{ 
£m≠h‹e_sig«l
–
my_£m
 ); }

187 
	g¥iv©e
:

188 
£m≠h‹e_t
 
my_£m
;

192 #i‡
__TBB_USE_FUTEX


193 ˛as†
	cbö¨y_£m≠h‹e
 : 
no_c›y
 {

194 
public
:

196 
bö¨y_£m≠h‹e
(Ë{ 
my_£m
 = 1; }

198 ~
bö¨y_£m≠h‹e
() {}

200 
P
() {

201 
	gs
;

202 if–(
	gs
 = 
my_£m
.
com∑ª_™d_sw≠
( 1, 0 ))!=0 ) {

203 if–
s
!=2 )

204 
s
 = 
my_£m
.
„tch_™d_°‹e
( 2 );

205  
	gs
!=0 ) {

206 
fuãx_waô
–&
my_£m
, 2 );

207 
	gs
 = 
my_£m
.
„tch_™d_°‹e
( 2 );

212 
V
() {

213 
__TBB_ASSERT
–
my_£m
>=1, "multiple V()'s ináÑow?" );

214 if–
	gmy_£m
--!=1 ) {

216 
my_£m
 = 0;

217 
fuãx_wakeup_⁄e
–&
my_£m
 );

220 
	g¥iv©e
:

221 
©omic
<> 
my_£m
;

224 
uöt32_t
 
	t£m_cou¡_t
;

226 ˛as†
	cbö¨y_£m≠h‹e
 : 
no_c›y
 {

227 
public
:

229 
bö¨y_£m≠h‹e
() {

230 
ªt
 = 
£m_öô
–&
my_£m
, 0, 0 );

231 
__TBB_ASSERT_EX
–!
ªt
, 
NULL
 );

234 ~
bö¨y_£m≠h‹e
() {

235 
	gªt
 = 
£m_de°roy
–&
my_£m
 );

236 
__TBB_ASSERT_EX
–!
ªt
, 
NULL
 );

239 
P
() {

240  
£m_waô
–&
my_£m
 )!=0 )

241 
__TBB_ASSERT
–
î∫o
==
EINTR
, 
NULL
 );

244 
V
(Ë{ 
£m_po°
–&
my_£m
 ); }

245 
	g¥iv©e
:

246 
£m_t
 
my_£m
;

	@viper/concurrentqueue-src/benchmarks/tbb/spin_mutex.cpp

21 
	~"tbb/tbb_machöe.h
"

22 
	~"tbb/•ö_muãx.h
"

23 
	~"ôt_nŸify.h
"

24 
	~"tbb_misc.h
"

26 
«me•a˚
 
	gtbb
 {

28 
	g•ö_muãx
::
sc›ed_lock
::
öã∫Æ_acquúe
–
•ö_muãx
& 
m
 ) {

29 
__TBB_ASSERT
–!
my_muãx
, "already holdingáÜock oná spin_mutex" );

30 
ITT_NOTIFY
(
sync_¥ï¨e
, &
m
);

31 
__TBB_LockByã
(
m
.
Êag
);

32 
	gmy_muãx
 = &
m
;

33 
ITT_NOTIFY
(
sync_acquúed
, &
m
);

36 
	g•ö_muãx
::
sc›ed_lock
::
öã∫Æ_ªÀa£
() {

37 
__TBB_ASSERT
–
my_muãx
, "release on spin_mutex::scoped_lockÅhat isÇot holdingáÜock" );

39 
ITT_NOTIFY
(
sync_ªÀasög
, 
my_muãx
);

40 
__TBB_U∆ockByã
(
my_muãx
->
Êag
);

41 
	gmy_muãx
 = 
NULL
;

44 
boﬁ
 
	g•ö_muãx
::
sc›ed_lock
::
öã∫Æ_åy_acquúe
–
•ö_muãx
& 
m
 ) {

45 
__TBB_ASSERT
–!
my_muãx
, "already holdingáÜock oná spin_mutex" );

46 
boﬁ
 
	gªsu…
 = boﬁ–
__TBB_TryLockByã
(
m
.
Êag
) );

47 if–
	gªsu…
 ) {

48 
	gmy_muãx
 = &
m
;

49 
ITT_NOTIFY
(
sync_acquúed
, &
m
);

51  
	gªsu…
;

54 
	g•ö_muãx
::
öã∫Æ_c⁄°ru˘
() {

55 
ITT_SYNC_CREATE
(
this
, 
_T
("tbb::spin_mutex"), _T(""));

	@viper/concurrentqueue-src/benchmarks/tbb/spin_mutex.h

21 #i‚de‡
__TBB_•ö_muãx_H


22 
	#__TBB_•ö_muãx_H


	)

24 
	~<c°ddef
>

25 
	~<√w
>

26 
	~"Æig√d_•a˚.h
"

27 
	~"tbb_°ddef.h
"

28 
	~"tbb_machöe.h
"

29 
	~"tbb_¥ofûög.h
"

30 
	~"öã∫Æ/_muãx_∑ddög.h
"

32 
«me•a˚
 
	gtbb
 {

40 ˛as†
	c•ö_muãx
 : 
öã∫Æ
::
muãx_c›y_dïªˇãd_™d_dißbÀd
 {

42 
__TBB_©omic_Êag
 
Êag
;

44 
	gpublic
:

47 
•ö_muãx
(Ë: 
Êag
(0) {

48 #i‡
TBB_USE_THREADING_TOOLS


49 
öã∫Æ_c⁄°ru˘
();

54 ˛as†
	csc›ed_lock
 : 
öã∫Æ
::
no_c›y
 {

55 
¥iv©e
:

57 
•ö_muãx
* 
my_muãx
;

63 
__TBB_Fœg
 
	gmy_u∆ock_vÆue
;

66 
__TBB_EXPORTED_METHOD
 
öã∫Æ_acquúe
–
•ö_muãx
& 
m
 );

69 
boﬁ
 
__TBB_EXPORTED_METHOD
 
öã∫Æ_åy_acquúe
–
•ö_muãx
& 
m
 );

72 
__TBB_EXPORTED_METHOD
 
öã∫Æ_ªÀa£
();

74 
‰õnd
 
˛ass
 
	g•ö_muãx
;

76 
	gpublic
:

78 
sc›ed_lock
(Ë: 
my_muãx
(
NULL
), 
my_u∆ock_vÆue
(0) {}

81 
sc›ed_lock
–
•ö_muãx
& 
m
 ) : 
my_u∆ock_vÆue
(0) {

82 
öã∫Æ
::
suµªss_unu£d_w¨nög
(
my_u∆ock_vÆue
);

83 #i‡
TBB_USE_THREADING_TOOLS
||
TBB_USE_ASSERT


84 
	gmy_muãx
=
NULL
;

85 
öã∫Æ_acquúe
(
m
);

87 
	gmy_muãx
=&
m
;

88 
__TBB_LockByã
(
m
.
Êag
);

93 
acquúe
–
•ö_muãx
& 
m
 ) {

94 #i‡
TBB_USE_THREADING_TOOLS
||
TBB_USE_ASSERT


95 
öã∫Æ_acquúe
(
m
);

97 
	gmy_muãx
 = &
m
;

98 
__TBB_LockByã
(
m
.
Êag
);

104 
boﬁ
 
åy_acquúe
–
•ö_muãx
& 
m
 ) {

105 #i‡
TBB_USE_THREADING_TOOLS
||
TBB_USE_ASSERT


106  
öã∫Æ_åy_acquúe
(
m
);

108 
boﬁ
 
	gªsu…
 = 
__TBB_TryLockByã
(
m
.
Êag
);

109 if–
	gªsu…
 )

110 
	gmy_muãx
 = &
m
;

111  
	gªsu…
;

116 
ªÀa£
() {

117 #i‡
TBB_USE_THREADING_TOOLS
||
TBB_USE_ASSERT


118 
öã∫Æ_ªÀa£
();

120 
__TBB_U∆ockByã
(
my_muãx
->
Êag
);

121 
	gmy_muãx
 = 
NULL
;

126 ~
sc›ed_lock
() {

127 if–
	gmy_muãx
 ) {

128 #i‡
TBB_USE_THREADING_TOOLS
||
TBB_USE_ASSERT


129 
öã∫Æ_ªÀa£
();

131 
__TBB_U∆ockByã
(
my_muãx
->
Êag
);

138 
__TBB_EXPORTED_METHOD
 
öã∫Æ_c⁄°ru˘
();

141 c⁄° 
boﬁ
 
	gis_rw_muãx
 = 
Ál£
;

142 c⁄° 
boﬁ
 
	gis_ªcursive_muãx
 = 
Ál£
;

143 c⁄° 
boﬁ
 
	gis_Áú_muãx
 = 
Ál£
;

148 
lock
() {

149 #i‡
TBB_USE_THREADING_TOOLS


150 
	gÆig√d_•a˚
<
	gsc›ed_lock
> 
	gtmp
;

151 
√w
(
tmp
.
begö
()Ë
sc›ed_lock
(*
this
);

153 
__TBB_LockByã
(
Êag
);

159 
boﬁ
 
åy_lock
() {

160 #i‡
TBB_USE_THREADING_TOOLS


161 
	gÆig√d_•a˚
<
	gsc›ed_lock
> 
	gtmp
;

162  (
√w
(
tmp
.
begö
()Ë
	gsc›ed_lock
)->
öã∫Æ_åy_acquúe
(*
this
);

164  
__TBB_TryLockByã
(
Êag
);

169 
u∆ock
() {

170 #i‡
TBB_USE_THREADING_TOOLS


171 
	gÆig√d_•a˚
<
	gsc›ed_lock
> 
	gtmp
;

172 
	gsc›ed_lock
& 
	gs
 = *
tmp
.
begö
();

173 
	gs
.
	gmy_muãx
 = 
this
;

174 
	gs
.
öã∫Æ_ªÀa£
();

176 
__TBB_°‹e_wôh_ªÀa£
(
Êag
, 0);

180 
‰õnd
 
˛ass
 
	gsc›ed_lock
;

183 
__TBB_DEFINE_PROFILING_SET_NAME
(
•ö_muãx
)

187 #i‡–
__TBB_x86_32
 || 
__TBB_x86_64
 )

188 
	~"öã∫Æ/_x86_ñidög_muãx_im∂.h
"

191 
«me•a˚
 
	gtbb
 {

203 #i‡–
__TBB_x86_32
 || 
__TBB_x86_64
 )

204 
	göãrÁ˚7
::
	töã∫Æ
::
	t∑dded_muãx
<
	töãrÁ˚7
::öã∫Æ::
	tx86_ñidög_muãx
,
	tÁl£
> 
	t•ecuœtive_•ö_muãx
;

206 
	göãrÁ˚7
::
	töã∫Æ
::
	t∑dded_muãx
<
	t•ö_muãx
,
	tÁl£
> 
	t•ecuœtive_•ö_muãx
;

208 
__TBB_DEFINE_PROFILING_SET_NAME
(
•ecuœtive_•ö_muãx
)

	@viper/concurrentqueue-src/benchmarks/tbb/spin_rw_mutex.cpp

21 
	~"tbb/•ö_rw_muãx.h
"

22 
	~"tbb/tbb_machöe.h
"

23 
	~"tbb/©omic.h
"

24 
	~"ôt_nŸify.h
"

26 #i‡
deföed
(
_MSC_VER
Ë&& deföed(
_Wp64
)

28 #¥agm®
w¨nög
 (
dißbÀ
: 4244)

31 
«me•a˚
 
	gtbb
 {

33 
	gãm∂©e
<
ty≥«me
 
	gT
>

34 
ölöe
 
T
 
CAS
(vﬁ©ûêT &
addr
, T 
√wv
, T 
ﬁdv
) {

37  
	gtbb
::
öã∫Æ
::
as_©omic
(
addr
).
com∑ª_™d_sw≠
–
√wv
, 
ﬁdv
 );

41 
boﬁ
 
	g•ö_rw_muãx_v3
::
öã∫Æ_acquúe_wrôî
()

43 
ITT_NOTIFY
(
sync_¥ï¨e
, 
this
);

44  
	göã∫Æ
::
©omic_backoff
 
backoff
;;
	gbackoff
.
∑u£
() ){

45 
°©e_t
 
	gs
 = 
c⁄°_ˇ°
<vﬁ©ûê°©e_t&>(
°©e
);

46 if–!(
	gs
 & 
	gBUSY
) ) {

47 if–
CAS
(
°©e
, 
WRITER
, 
s
)==s )

49 
	gbackoff
.
ª£t
();

50 } if–!(
	gs
 & 
	gWRITER_PENDING
) ) {

51 
__TBB_AtomicOR
(&
°©e
, 
WRITER_PENDING
);

54 
ITT_NOTIFY
(
sync_acquúed
, 
this
);

55  
	gÁl£
;

59 
	g•ö_rw_muãx_v3
::
öã∫Æ_ªÀa£_wrôî
()

61 
ITT_NOTIFY
(
sync_ªÀasög
, 
this
);

62 
__TBB_AtomicAND
–&
°©e
, 
READERS
 );

66 
	g•ö_rw_muãx_v3
::
öã∫Æ_acquúe_ªadî
()

68 
ITT_NOTIFY
(
sync_¥ï¨e
, 
this
);

69  
	göã∫Æ
::
©omic_backoff
 
b
;;
	gb
.
∑u£
() ){

70 
°©e_t
 
	gs
 = 
c⁄°_ˇ°
<vﬁ©ûê°©e_t&>(
°©e
);

71 if–!(
	gs
 & (
	gWRITER
|
	gWRITER_PENDING
)) ) {

72 
°©e_t
 
	gt
 = (°©e_t)
__TBB_FëchAndAddW
–&
°©e
, (
öçå_t
Ë
ONE_READER
 );

73 if–!–
	gt
&
	gWRITER
 ))

76 
__TBB_FëchAndAddW
–&
°©e
, -(
öçå_t
)
ONE_READER
 );

80 
ITT_NOTIFY
(
sync_acquúed
, 
this
);

81 
__TBB_ASSERT
–
°©e
 & 
READERS
, "invalid state ofáÑeadÜock:ÇoÑeaders" );

86 
boﬁ
 
	g•ö_rw_muãx_v3
::
öã∫Æ_upgøde
()

88 
°©e_t
 
s
 = 
°©e
;

89 
__TBB_ASSERT
–
s
 & 
READERS
, "invalid state before upgrade:ÇoÑeaders " );

93  (
	gs
 & 
	gREADERS
)==
ONE_READER
 || !(
s
 & 
WRITER_PENDING
) ) {

94 
°©e_t
 
ﬁd_s
 = 
s
;

95 if–(
	gs
=
CAS
(
°©e
, 
s
 | 
WRITER
 | 
WRITER_PENDING
, s))==
ﬁd_s
 ) {

96 
ITT_NOTIFY
(
sync_¥ï¨e
, 
this
);

97 
	göã∫Æ
::
©omic_backoff
 
backoff
;

98  (
	g°©e
 & 
	gREADERS
Ë!
ONE_READER
 ) 
backoff
.
∑u£
();

99 
__TBB_ASSERT
((
°©e
&(
WRITER_PENDING
|
WRITER
))==(WRITER_PENDING|WRITER),"invalid state when upgradingÅo writer");

101 
__TBB_FëchAndAddW
–&
°©e
, - (
öçå_t
)(
ONE_READER
+
WRITER_PENDING
));

102 
ITT_NOTIFY
(
sync_acquúed
, 
this
);

103  
	gåue
;

107 
öã∫Æ_ªÀa£_ªadî
();

108  
öã∫Æ_acquúe_wrôî
();

112 
	g•ö_rw_muãx_v3
::
öã∫Æ_downgøde
() {

113 
ITT_NOTIFY
(
sync_ªÀasög
, 
this
);

114 
__TBB_FëchAndAddW
–&
°©e
, (
öçå_t
)(
ONE_READER
-
WRITER
));

115 
__TBB_ASSERT
–
°©e
 & 
READERS
, "invalid stateáfter downgrade:ÇoÑeaders" );

119 
	g•ö_rw_muãx_v3
::
öã∫Æ_ªÀa£_ªadî
()

121 
__TBB_ASSERT
–
°©e
 & 
READERS
, "invalid state ofáÑeadÜock:ÇoÑeaders" );

122 
ITT_NOTIFY
(
sync_ªÀasög
, 
this
);

123 
__TBB_FëchAndAddWªÀa£
–&
°©e
,-(
öçå_t
)
ONE_READER
);

127 
boﬁ
 
	g•ö_rw_muãx_v3
::
öã∫Æ_åy_acquúe_wrôî
()

130 
°©e_t
 
s
 = 
°©e
;

131 if–!(
	gs
 & 
	gBUSY
) )

132 if–
CAS
(
°©e
, 
WRITER
, 
s
)==s ) {

133 
ITT_NOTIFY
(
sync_acquúed
, 
this
);

134  
	gåue
;

136  
	gÁl£
;

140 
boﬁ
 
	g•ö_rw_muãx_v3
::
öã∫Æ_åy_acquúe_ªadî
()

143 
°©e_t
 
s
 = 
°©e
;

144 if–!(
	gs
 & (
	gWRITER
|
	gWRITER_PENDING
)) ) {

145 
°©e_t
 
	gt
 = (°©e_t)
__TBB_FëchAndAddW
–&
°©e
, (
öçå_t
Ë
ONE_READER
 );

146 if–!–
	gt
&
	gWRITER
 )) {

147 
ITT_NOTIFY
(
sync_acquúed
, 
this
);

148  
	gåue
;

151 
__TBB_FëchAndAddW
–&
°©e
, -(
öçå_t
)
ONE_READER
 );

153  
	gÁl£
;

156 
	g•ö_rw_muãx_v3
::
öã∫Æ_c⁄°ru˘
() {

157 
ITT_SYNC_CREATE
(
this
, 
_T
("tbb::spin_rw_mutex"), _T(""));

	@viper/concurrentqueue-src/benchmarks/tbb/spin_rw_mutex.h

21 #i‚de‡
__TBB_•ö_rw_muãx_H


22 
	#__TBB_•ö_rw_muãx_H


	)

24 
	~"tbb_°ddef.h
"

25 
	~"tbb_machöe.h
"

26 
	~"tbb_¥ofûög.h
"

27 
	~"öã∫Æ/_muãx_∑ddög.h
"

29 
«me•a˚
 
	gtbb
 {

31 #i‡
__TBB_TSX_AVAILABLE


32 
«me•a˚
 
	göãrÁ˚8
 {Çame•a˚ 
	göã∫Æ
 {

33 
˛ass
 
	gx86_πm_rw_muãx
;

37 
˛ass
 
	g•ö_rw_muãx_v3
;

38 
•ö_rw_muãx_v3
 
	t•ö_rw_muãx
;

42 ˛as†
	c•ö_rw_muãx_v3
 : 
öã∫Æ
::
muãx_c›y_dïªˇãd_™d_dißbÀd
 {

46 
boﬁ
 
__TBB_EXPORTED_METHOD
 
öã∫Æ_acquúe_wrôî
();

50 
__TBB_EXPORTED_METHOD
 
öã∫Æ_ªÀa£_wrôî
();

53 
__TBB_EXPORTED_METHOD
 
öã∫Æ_acquúe_ªadî
();

56 
boﬁ
 
__TBB_EXPORTED_METHOD
 
öã∫Æ_upgøde
();

60 
__TBB_EXPORTED_METHOD
 
öã∫Æ_downgøde
();

63 
__TBB_EXPORTED_METHOD
 
öã∫Æ_ªÀa£_ªadî
();

66 
boﬁ
 
__TBB_EXPORTED_METHOD
 
öã∫Æ_åy_acquúe_wrôî
();

69 
boﬁ
 
__TBB_EXPORTED_METHOD
 
öã∫Æ_åy_acquúe_ªadî
();

72 
	gpublic
:

74 
•ö_rw_muãx_v3
(Ë: 
°©e
(0) {

75 #i‡
TBB_USE_THREADING_TOOLS


76 
öã∫Æ_c⁄°ru˘
();

80 #i‡
TBB_USE_ASSERT


82 ~
•ö_rw_muãx_v3
() {

83 
__TBB_ASSERT
–!
°©e
, "destruction ofánácquired mutex");

90 ˛as†
	csc›ed_lock
 : 
öã∫Æ
::
no_c›y
 {

91 #i‡
__TBB_TSX_AVAILABLE


92 
‰õnd
 
˛ass
 
tbb
::
öãrÁ˚8
::
öã∫Æ
::
x86_πm_rw_muãx
;

94 
•ö_rw_muãx
 *
öã∫Æ_gë_muãx
(Ëc⁄° {  
	gmuãx
; }

95 
öã∫Æ_£t_muãx
(
•ö_rw_muãx
* 
m
Ë{ 
	gmuãx
 = m; }

97 
	gpublic
:

100 
sc›ed_lock
(Ë: 
muãx
(
NULL
), 
is_wrôî
(
Ál£
) {}

103 
sc›ed_lock
–
•ö_rw_muãx
& 
m
, 
boﬁ
 
wrôe
 = 
åue
 ) : 
muãx
(
NULL
) {

104 
acquúe
(
m
, 
wrôe
);

108 ~
sc›ed_lock
() {

109 if–
	gmuãx
 ) 
ªÀa£
();

113 
acquúe
–
•ö_rw_muãx
& 
m
, 
boﬁ
 
wrôe
 = 
åue
 ) {

114 
__TBB_ASSERT
–!
muãx
, "holding mutexálready" );

115 
	gis_wrôî
 = 
wrôe
;

116 
	gmuãx
 = &
m
;

117 if–
	gwrôe
 ) 
	gmuãx
->
öã∫Æ_acquúe_wrôî
();

118 
	gmuãx
->
öã∫Æ_acquúe_ªadî
();

123 
boﬁ
 
upgøde_to_wrôî
() {

124 
__TBB_ASSERT
–
muãx
, "lock isÇotácquired" );

125 
__TBB_ASSERT
–!
is_wrôî
, "notáÑeader" );

126 
	gis_wrôî
 = 
åue
;

127  
	gmuãx
->
öã∫Æ_upgøde
();

131 
ªÀa£
() {

132 
__TBB_ASSERT
–
muãx
, "lock isÇotácquired" );

133 
•ö_rw_muãx
 *
	gm
 = 
muãx
;

134 
	gmuãx
 = 
NULL
;

135 #i‡
TBB_USE_THREADING_TOOLS
||
TBB_USE_ASSERT


136 if–
	gis_wrôî
 ) 
	gm
->
öã∫Æ_ªÀa£_wrôî
();

137 
	gm
->
öã∫Æ_ªÀa£_ªadî
();

139 if–
	gis_wrôî
 ) 
__TBB_AtomicAND
–&
m
->
°©e
, 
READERS
 );

140 
__TBB_FëchAndAddWªÀa£
–&
m
->
°©e
, -(
öçå_t
)
ONE_READER
);

145 
boﬁ
 
downgøde_to_ªadî
() {

146 
__TBB_ASSERT
–
muãx
, "lock isÇotácquired" );

147 
__TBB_ASSERT
–
is_wrôî
, "notá writer" );

148 #i‡
TBB_USE_THREADING_TOOLS
||
TBB_USE_ASSERT


149 
	gmuãx
->
öã∫Æ_downgøde
();

151 
__TBB_FëchAndAddW
–&
muãx
->
°©e
, ((
öçå_t
)
ONE_READER
-
WRITER
));

153 
	gis_wrôî
 = 
Ál£
;

154  
	gåue
;

158 
boﬁ
 
åy_acquúe
–
•ö_rw_muãx
& 
m
, boﬁ 
wrôe
 = 
åue
 ) {

159 
__TBB_ASSERT
–!
muãx
, "holding mutexálready" );

160 
boﬁ
 
	gªsu…
;

161 
	gis_wrôî
 = 
wrôe
;

162 
	gªsu…
 = 
wrôe
? 
m
.
öã∫Æ_åy_acquúe_wrôî
()

163 : 
m
.
öã∫Æ_åy_acquúe_ªadî
();

164 if–
	gªsu…
 )

165 
	gmuãx
 = &
m
;

166  
	gªsu…
;

169 
	g¥Ÿe˘ed
:

172 
•ö_rw_muãx
* 
muãx
;

176 
boﬁ
 
	gis_wrôî
;

180 c⁄° 
boﬁ
 
	gis_rw_muãx
 = 
åue
;

181 c⁄° 
boﬁ
 
	gis_ªcursive_muãx
 = 
Ál£
;

182 c⁄° 
boﬁ
 
	gis_Áú_muãx
 = 
Ál£
;

187 
lock
(Ë{
öã∫Æ_acquúe_wrôî
();}

191 
boﬁ
 
åy_lock
(Ë{ 
öã∫Æ_åy_acquúe_wrôî
();}

194 
u∆ock
() {

195 #i‡
TBB_USE_THREADING_TOOLS
||
TBB_USE_ASSERT


196 if–
	g°©e
&
	gWRITER
 ) 
öã∫Æ_ªÀa£_wrôî
();

197 
öã∫Æ_ªÀa£_ªadî
();

199 if–
	g°©e
&
	gWRITER
 ) 
__TBB_AtomicAND
–&
°©e
, 
READERS
 );

200 
__TBB_FëchAndAddWªÀa£
–&
°©e
, -(
öçå_t
)
ONE_READER
);

207 
lock_ªad
(Ë{
öã∫Æ_acquúe_ªadî
();}

211 
boﬁ
 
åy_lock_ªad
(Ë{ 
öã∫Æ_åy_acquúe_ªadî
();}

213 
	g¥Ÿe˘ed
:

214 
öçå_t
 
	t°©e_t
;

215 c⁄° 
°©e_t
 
	gWRITER
 = 1;

216 c⁄° 
°©e_t
 
	gWRITER_PENDING
 = 2;

217 c⁄° 
°©e_t
 
	gREADERS
 = ~(
WRITER
 | 
WRITER_PENDING
);

218 c⁄° 
°©e_t
 
	gONE_READER
 = 4;

219 c⁄° 
°©e_t
 
	gBUSY
 = 
WRITER
 | 
READERS
;

224 
°©e_t
 
	g°©e
;

226 
	g¥iv©e
:

227 
__TBB_EXPORTED_METHOD
 
öã∫Æ_c⁄°ru˘
();

230 
__TBB_DEFINE_PROFILING_SET_NAME
(
•ö_rw_muãx
)

234 #i‡
__TBB_TSX_AVAILABLE


235 
	~"öã∫Æ/_x86_πm_rw_muãx_im∂.h
"

238 
«me•a˚
 
	gtbb
 {

239 
«me•a˚
 
	göãrÁ˚8
 {

249 #i‡
__TBB_TSX_AVAILABLE


250 
	göãrÁ˚7
::
	töã∫Æ
::
	t∑dded_muãx
<
	ttbb
::
	töãrÁ˚8
::öã∫Æ::
	tx86_πm_rw_muãx
,
	tåue
> 
	t•ecuœtive_•ö_rw_muãx
;

252 
	göãrÁ˚7
::
	töã∫Æ
::
	t∑dded_muãx
<
	ttbb
::
	t•ö_rw_muãx
,
	tåue
> 
	t•ecuœtive_•ö_rw_muãx
;

256 
usög
 
	göãrÁ˚8
::
•ecuœtive_•ö_rw_muãx
;

257 
__TBB_DEFINE_PROFILING_SET_NAME
(
•ecuœtive_•ö_rw_muãx
)

	@viper/concurrentqueue-src/benchmarks/tbb/task.cpp

22 
	~"scheduÀr_comm⁄.h
"

23 
	~"govîn‹.h
"

24 
	~"scheduÀr.h
"

25 
	~"ôt_nŸify.h
"

27 
	~"tbb/ˇche_Æig√d_Æloˇt‹.h
"

28 
	~"tbb/∑πôi⁄î.h
"

30 
	~<√w
>

32 
«me•a˚
 
	gtbb
 {

34 
usög
 
«me•a˚
 
	g°d
;

36 
«me•a˚
 
	göã∫Æ
 {

41 
	gèsk
& 
	gÆloˇã_roŸ_¥oxy
::
Æloˇã
–
size_t
 
size
 ) {

42 
öã∫Æ
::
gíîic_scheduÀr
* 
v
 = 
govîn‹
::
loˇl_scheduÀr
();

43 
__TBB_ASSERT
–
v
, "thread didÇotáctivateáÅask_scheduler_init object?" );

44 #i‡
__TBB_TASK_GROUP_CONTEXT


45 
	gèsk_¥efix
& 
	gp
 = 
v
->
my_ö√rmo°_ru¬ög_èsk
->
¥efix
();

47 
ITT_STACK_CREATE
(
p
.
c⁄ãxt
->
ôt_ˇŒî
);

50  
	gv
->
Æloˇã_èsk
–
size
, 
__TBB_CONTEXT_ARG
(
NULL
, 
p
.
c⁄ãxt
) );

53 
	gÆloˇã_roŸ_¥oxy
::
‰ì
–
èsk
&Åask ) {

54 
öã∫Æ
::
gíîic_scheduÀr
* 
v
 = 
govîn‹
::
loˇl_scheduÀr
();

55 
__TBB_ASSERT
–
v
, "thread doesÇot have initializedÅask_scheduler_init object?" );

56 #i‡
__TBB_TASK_GROUP_CONTEXT


59 
	gv
->
	g‰ì_èsk
<
	gloˇl_èsk
>–
	gèsk
 );

62 #i‡
__TBB_TASK_GROUP_CONTEXT


66 
	gèsk
& 
	gÆloˇã_roŸ_wôh_c⁄ãxt_¥oxy
::
Æloˇã
–
size_t
 
size
 ) const {

67 
öã∫Æ
::
gíîic_scheduÀr
* 
s
 = 
govîn‹
::
loˇl_scheduÀr
();

68 
__TBB_ASSERT
–
s
, "Scheduleráuto-initialization failed?" );

69 
	gèsk
& 
	gt
 = 
s
->
Æloˇã_èsk
–
size
, 
NULL
, &
my_c⁄ãxt
 );

72 i‡–
__TBB_lﬂd_ªœxed
(
my_c⁄ãxt
.
my_köd
Ë=
èsk_group_c⁄ãxt
::
bödög_ªquúed
 ) {

76 i‡–
s
->
my_ö√rmo°_ru¬ög_èsk
 =s->
my_dummy_èsk
 )

77 
__TBB_°‹e_ªœxed
(
my_c⁄ãxt
.
my_köd
, 
èsk_group_c⁄ãxt
::
isﬁ©ed
);

79 
	gmy_c⁄ãxt
.
böd_to
–
s
 );

81 #i‡
__TBB_FP_CONTEXT


82 i‡–
__TBB_lﬂd_ªœxed
(
my_c⁄ãxt
.
my_köd
Ë=
èsk_group_c⁄ãxt
::
isﬁ©ed
 &&

83 !(
my_c⁄ãxt
.
my_vîsi⁄_™d_åaôs
 & 
èsk_group_c⁄ãxt
::
Â_£âögs
) )

84 
my_c⁄ãxt
.
c›y_Â_£âögs
–*
s
->
my_¨ía
->
my_deÁu…_˘x
 );

86 
ITT_STACK_CREATE
(
my_c⁄ãxt
.
ôt_ˇŒî
);

87  
	gt
;

90 
	gÆloˇã_roŸ_wôh_c⁄ãxt_¥oxy
::
‰ì
–
èsk
&Åask ) const {

91 
öã∫Æ
::
gíîic_scheduÀr
* 
v
 = 
govîn‹
::
loˇl_scheduÀr
();

92 
__TBB_ASSERT
–
v
, "thread doesÇot have initializedÅask_scheduler_init object?" );

94 
	gv
->
	g‰ì_èsk
<
	gloˇl_èsk
>–
	gèsk
 );

101 
	gèsk
& 
	gÆloˇã_c⁄töu©i⁄_¥oxy
::
Æloˇã
–
size_t
 
size
 ) const {

102 
èsk
& 
t
 = *(—ask*)
this
);

103 
as£π_èsk_vÆid
(
t
);

104 
gíîic_scheduÀr
* 
	gs
 = 
govîn‹
::
loˇl_scheduÀr
();

105 
èsk
* 
	g∑ª¡
 = 
t
.
∑ª¡
();

106 
	gt
.
¥efix
().
	g∑ª¡
 = 
NULL
;

107  
	gs
->
Æloˇã_èsk
–
size
, 
__TBB_CONTEXT_ARG
(
∑ª¡
, 
t
.
¥efix
().
c⁄ãxt
) );

110 
	gÆloˇã_c⁄töu©i⁄_¥oxy
::
‰ì
–
èsk
& 
myèsk
 ) const {

112 ((
èsk
*)
this
)->
¥efix
().
∑ª¡
 = 
myèsk
.parent();

113 
	ggovîn‹
::
loˇl_scheduÀr
()->
‰ì_èsk
<
loˇl_èsk
>(
myèsk
);

119 
	gèsk
& 
	gÆloˇã_chûd_¥oxy
::
Æloˇã
–
size_t
 
size
 ) const {

120 
èsk
& 
t
 = *(—ask*)
this
);

121 
as£π_èsk_vÆid
(
t
);

122 
gíîic_scheduÀr
* 
	gs
 = 
govîn‹
::
loˇl_scheduÀr
();

123  
	gs
->
Æloˇã_èsk
–
size
, 
__TBB_CONTEXT_ARG
(&
t
,Å.
¥efix
().
c⁄ãxt
) );

126 
	gÆloˇã_chûd_¥oxy
::
‰ì
–
èsk
& 
myèsk
 ) const {

127 
govîn‹
::
loˇl_scheduÀr
()->
‰ì_èsk
<
loˇl_èsk
>(
myèsk
);

133 
	gèsk
& 
	gÆloˇã_addôi⁄Æ_chûd_of_¥oxy
::
Æloˇã
–
size_t
 
size
 ) const {

134 
∑ª¡
.
ö¸emít_ªf_cou¡
();

135 
gíîic_scheduÀr
* 
	gs
 = 
govîn‹
::
loˇl_scheduÀr
();

136  
	gs
->
Æloˇã_èsk
–
size
, 
__TBB_CONTEXT_ARG
(&
∑ª¡
,Ö¨ít.
¥efix
().
c⁄ãxt
) );

139 
	gÆloˇã_addôi⁄Æ_chûd_of_¥oxy
::
‰ì
–
èsk
&Åask ) const {

147 
∑ª¡
.
öã∫Æ_de¸emít_ªf_cou¡
();

148 
	ggovîn‹
::
loˇl_scheduÀr
()->
‰ì_èsk
<
loˇl_èsk
>(
èsk
);

154 
size_t
 
gë_öôül_auto_∑πôi⁄î_divis‹
() {

155 c⁄° 
size_t
 
	gX_FACTOR
 = 4;

156  
	gX_FACTOR
 * (1+
	ggovîn‹
::
loˇl_scheduÀr
()->
numbî_of_w‹kîs_ö_my_¨ía
());

162 
	gafföôy_∑πôi⁄î_ba£_v3
::
ªsize
–
Á˘‹
 ) {

164 
size_t
 
√w_size
 = 
Á˘‹
 ? fa˘‹*(1+
govîn‹
::
loˇl_scheduÀr
()->
numbî_of_w‹kîs_ö_my_¨ía
()) : 0;

165 if–
	g√w_size
!=
my_size
 ) {

166 if–
my_¨øy
 ) {

167 
NFS_Fªe
–
my_¨øy
 );

169 
	gmy_¨øy
 = 
NULL
;

170 
	gmy_size
 = 0;

172 if–
	g√w_size
 ) {

173 
	gmy_¨øy
 = 
°©ic_ˇ°
<
afföôy_id
*>(
NFS_AŒoˇã
(
√w_size
,◊fföôy_id), 
NULL
 ));

174 
mem£t
–
my_¨øy
, 0, (
afföôy_id
)*
√w_size
 );

175 
	gmy_size
 = 
√w_size
;

182 
usög
 
«me•a˚
 
	gtbb
::
öã∫Æ
;

188 
	gèsk
::
öã∫Æ_£t_ªf_cou¡
–
cou¡
 ) {

189 
__TBB_ASSERT
–
cou¡
>=0, "count mustÇot beÇegative" );

190 
	gèsk_¥efix
 &
	gp
 = 
¥efix
();

191 
__TBB_ASSERT
(
p
.
ªf_cou¡
==1 &&Ö.
°©e
==
Æloˇãd
 && 
£lf
().
∑ª¡
()==
this


192 || !(
p
.
exåa_°©e
 & 
es_ªf_cou¡_a˘ive
), "ref_countÑace detected");

193 
ITT_NOTIFY
(
sync_ªÀasög
, &
p
.
ªf_cou¡
);

194 
	gp
.
	gªf_cou¡
 = 
cou¡
;

197 
	göã∫Æ
::
ª„ªn˚_cou¡
 
èsk
::
öã∫Æ_de¸emít_ªf_cou¡
() {

198 
ITT_NOTIFY
–
sync_ªÀasög
, &
¥efix
().
ªf_cou¡
 );

199 
	göã∫Æ
::
ª„ªn˚_cou¡
 
k
 = 
__TBB_FëchAndDe¸emítWªÀa£
–&
¥efix
().
ªf_cou¡
 );

200 
__TBB_ASSERT
–
k
>=1, "task'sÑeference count underflowed" );

201 if–
	gk
==1 )

202 
ITT_NOTIFY
–
sync_acquúed
, &
¥efix
().
ªf_cou¡
 );

203  
	gk
-1;

206 
	gèsk
&Åask::
£lf
() {

207 
gíîic_scheduÀr
 *
v
 = 
govîn‹
::
loˇl_scheduÀr
();

208 
	gv
->
as£π_èsk_poﬁ_vÆid
();

209 
__TBB_ASSERT
–
v
->
my_ö√rmo°_ru¬ög_èsk
, 
NULL
 );

210  *
	gv
->
	gmy_ö√rmo°_ru¬ög_èsk
;

213 
boﬁ
 
	gèsk
::
is_ow√d_by_cuºít_thªad
() const {

214  
åue
;

217 
	göãrÁ˚5
::
öã∫Æ
::
èsk_ba£
::
de°roy
–
èsk
& 
vi˘im
 ) {

221 
__TBB_ASSERT
–(
öçå_t
)
vi˘im
.
¥efix
().
ªf_cou¡
 <= 1, "Task being destroyed mustÇot have children" );

222 
__TBB_ASSERT
–
vi˘im
.
°©e
()==
èsk
::
Æloˇãd
, "illegal state for victimÅask" );

223 
èsk
* 
	g∑ª¡
 = 
vi˘im
.
∑ª¡
();

224 
	gvi˘im
.~
èsk
();

225 if–
	g∑ª¡
 ) {

226 
__TBB_ASSERT
–
∑ª¡
->
°©e
()!=
èsk
::
‰ìd
 &&Ö¨ít->°©e()!Òask::
ªady
,

230 
	g∑ª¡
->
öã∫Æ_de¸emít_ªf_cou¡
();

233 
	ggovîn‹
::
loˇl_scheduÀr
()->
‰ì_èsk
<
no_ˇche
>–
vi˘im
 );

236 
	gèsk
::
•awn_™d_waô_f‹_Æl
–
èsk_li°
& 
li°
 ) {

237 
gíîic_scheduÀr
* 
s
 = 
govîn‹
::
loˇl_scheduÀr
();

238 
èsk
* 
	gt
 = 
li°
.
fú°
;

239 if–
	gt
 ) {

240 if–&
	gt
->
¥efix
().
	g√xt
!=
li°
.
√xt_±r
 )

241 
s
->
loˇl_•awn
–*
t
->
¥efix
().
√xt
, *
li°
.
√xt_±r
 );

242 
	gli°
.
˛ór
();

244 
	gs
->
loˇl_waô_f‹_Æl
–*
this
, 
t
 );

250 
	gèsk
::
nŸe_afföôy
–
afföôy_id
 ) {

253 #i‡
__TBB_TASK_GROUP_CONTEXT


254 
èsk
::
ch™ge_group
 ( 
èsk_group_c⁄ãxt
& 
˘x
 ) {

255 
¥efix
().
c⁄ãxt
 = &
˘x
;

256 
	göã∫Æ
::
gíîic_scheduÀr
* 
s
 = 
govîn‹
::
loˇl_scheduÀr
();

257 i‡–
__TBB_lﬂd_ªœxed
(
˘x
.
my_köd
Ë=
èsk_group_c⁄ãxt
::
bödög_ªquúed
 ) {

261 i‡–
s
->
my_ö√rmo°_ru¬ög_èsk
 =s->
my_dummy_èsk
 )

262 
__TBB_°‹e_ªœxed
(
˘x
.
my_köd
, 
èsk_group_c⁄ãxt
::
isﬁ©ed
);

264 
	g˘x
.
böd_to
–
s
 );

266 #i‡
__TBB_FP_CONTEXT


267 i‡–
__TBB_lﬂd_ªœxed
(
˘x
.
my_köd
Ë=
èsk_group_c⁄ãxt
::
isﬁ©ed
 &&

268 !(
˘x
.
my_vîsi⁄_™d_åaôs
 & 
èsk_group_c⁄ãxt
::
Â_£âögs
) )

269 
˘x
.
c›y_Â_£âögs
–*
s
->
my_¨ía
->
my_deÁu…_˘x
 );

271 
ITT_STACK_CREATE
(
˘x
.
ôt_ˇŒî
);

	@viper/concurrentqueue-src/benchmarks/tbb/task.h

21 #i‚de‡
__TBB_èsk_H


22 
	#__TBB_èsk_H


	)

24 
	~"tbb_°ddef.h
"

25 
	~"tbb_machöe.h
"

26 
	~<˛imôs
>

28 
___ôt_ˇŒî
 *
	t__ôt_ˇŒî
;

30 
«me•a˚
 
	gtbb
 {

32 
˛ass
 
	gèsk
;

33 
˛ass
 
	gèsk_li°
;

34 
˛ass
 
	gèsk_group_c⁄ãxt
;

38 #i‡
_MSC_VER
 || (
__GNUC__
==3 && 
__GNUC_MINOR__
<3)

39 
	#__TBB_TASK_BASE_ACCESS
 
public


	)

41 
	#__TBB_TASK_BASE_ACCESS
 
¥iv©e


	)

44 
«me•a˚
 
	göã∫Æ
 {

46 ˛as†
	cÆloˇã_addôi⁄Æ_chûd_of_¥oxy
: 
no_assign
 {

48 
èsk
* 
£lf
;

49 
	gèsk
& 
	g∑ª¡
;

50 
	gpublic
:

51 
ex∂icô
 
Æloˇã_addôi⁄Æ_chûd_of_¥oxy
–
èsk
& 
∑ª¡_
 ) : 
£lf
(
NULL
), 
∑ª¡
(parent_) {}

52 
	gèsk
& 
__TBB_EXPORTED_METHOD
 
Æloˇã
–
size_t
 
size
 ) const;

53 
__TBB_EXPORTED_METHOD
 
‰ì
–
èsk
& ) const;

56 
	s˝u_˘l_ív_•a˚
 { 
	g•a˚
[(
öã∫Æ
::
uöt64_t
)/()]; };

59 
«me•a˚
 
	göãrÁ˚5
 {

60 
«me•a˚
 
	göã∫Æ
 {

67 ˛as†
	cèsk_ba£
: 
tbb
::
öã∫Æ
::
no_c›y
 {

68 
__TBB_TASK_BASE_ACCESS
:

69 
‰õnd
 
˛ass
 
tbb
::
èsk
;

72 
•awn
–
èsk
& 
t
 );

75 
•awn
–
èsk_li°
& 
li°
 );

80 
	gtbb
::
öã∫Æ
::
Æloˇã_addôi⁄Æ_chûd_of_¥oxy
 
Æloˇã_addôi⁄Æ_chûd_of
–
èsk
& 
t
 ) {

81  
tbb
::
öã∫Æ
::
Æloˇã_addôi⁄Æ_chûd_of_¥oxy
(
t
);

89 
__TBB_EXPORTED_FUNC
 
de°roy
–
èsk
& 
vi˘im
 );

95 
«me•a˚
 
	göã∫Æ
 {

97 ˛as†
	cscheduÀr
: 
no_c›y
 {

98 
public
:

100 
vútuÆ
 
•awn
–
èsk
& 
fú°
,Åask*& 
√xt
 ) = 0;

103 
vútuÆ
 
waô_f‹_Æl
–
èsk
& 
∑ª¡
,Åask* 
chûd
 ) = 0;

106 
vútuÆ
 
•awn_roŸ_™d_waô
–
èsk
& 
fú°
,Åask*& 
√xt
 ) = 0;

110 
	gvútuÆ
 ~
scheduÀr
() = 0;

113 
vútuÆ
 
íqueue
–
èsk
& 
t
, * 
ª£rved
 ) = 0;

118 
öçå_t
 
	tª„ªn˚_cou¡
;

121 
	tafföôy_id
;

123 #i‡
__TBB_TASK_GROUP_CONTEXT


124 
˛ass
 
	ggíîic_scheduÀr
;

126 
	sc⁄ãxt_li°_node_t
 {

127 
c⁄ãxt_li°_node_t
 *
	gmy_¥ev
,

128 *
	gmy_√xt
;

131 ˛as†
	cÆloˇã_roŸ_wôh_c⁄ãxt_¥oxy
: 
no_assign
 {

132 
èsk_group_c⁄ãxt
& 
my_c⁄ãxt
;

133 
	gpublic
:

134 
Æloˇã_roŸ_wôh_c⁄ãxt_¥oxy
 ( 
èsk_group_c⁄ãxt
& 
˘x
 ) : 
my_c⁄ãxt
(ctx) {}

135 
èsk
& 
__TBB_EXPORTED_METHOD
 
Æloˇã
–
size_t
 
size
 ) const;

136 
__TBB_EXPORTED_METHOD
 
‰ì
–
èsk
& ) const;

140 ˛as†
	cÆloˇã_roŸ_¥oxy
: 
no_assign
 {

141 
public
:

142 
èsk
& 
__TBB_EXPORTED_FUNC
 
Æloˇã
–
size_t
 
size
 );

143 
__TBB_EXPORTED_FUNC
 
‰ì
–
èsk
& );

146 ˛as†
	cÆloˇã_c⁄töu©i⁄_¥oxy
: 
no_assign
 {

147 
public
:

148 
èsk
& 
__TBB_EXPORTED_METHOD
 
Æloˇã
–
size_t
 
size
 ) const;

149 
__TBB_EXPORTED_METHOD
 
‰ì
–
èsk
& ) const;

152 ˛as†
	cÆloˇã_chûd_¥oxy
: 
no_assign
 {

153 
public
:

154 
èsk
& 
__TBB_EXPORTED_METHOD
 
Æloˇã
–
size_t
 
size
 ) const;

155 
__TBB_EXPORTED_METHOD
 
‰ì
–
èsk
& ) const;

170 ˛as†
	cèsk_¥efix
 {

171 
	g¥iv©e
:

172 
‰õnd
 
˛ass
 
tbb
::
èsk
;

173 
‰õnd
 
˛ass
 
	gtbb
::
öãrÁ˚5
::
öã∫Æ
::
èsk_ba£
;

174 
‰õnd
 
˛ass
 
	gtbb
::
èsk_li°
;

175 
‰õnd
 
˛ass
 
	göã∫Æ
::
scheduÀr
;

176 
‰õnd
 
˛ass
 
	göã∫Æ
::
Æloˇã_roŸ_¥oxy
;

177 
‰õnd
 
˛ass
 
	göã∫Æ
::
Æloˇã_chûd_¥oxy
;

178 
‰õnd
 
˛ass
 
	göã∫Æ
::
Æloˇã_c⁄töu©i⁄_¥oxy
;

179 
‰õnd
 
˛ass
 
	göã∫Æ
::
Æloˇã_addôi⁄Æ_chûd_of_¥oxy
;

181 #i‡
__TBB_TASK_GROUP_CONTEXT


186 
èsk_group_c⁄ãxt
 *
	gc⁄ãxt
;

195 
scheduÀr
* 
	g‹igö
;

197 #i‡
__TBB_TASK_PRIORITY


203 
scheduÀr
* 
	gow√r
;

205 #i‡
__TBB_TASK_PRIORITY


208 
èsk
* 
	g√xt_ofÊﬂded
;

216 
	gtbb
::
èsk
* 
∑ª¡
;

223 
__TBB_©omic
 
ª„ªn˚_cou¡
 
	gªf_cou¡
;

228 
	gdïth
;

232 
	g°©e
;

241 
	gexåa_°©e
;

243 
afföôy_id
 
	gafföôy
;

246 
	gtbb
::
èsk
* 
√xt
;

249 
	gtbb
::
èsk
&Åask(Ë{ *
ªöãΩªt_ˇ°
<
tbb
::èsk*>(
this
+1);}

255 #i‡
__TBB_TASK_GROUP_CONTEXT


257 #i‡
__TBB_TASK_PRIORITY


258 
«me•a˚
 
	göã∫Æ
 {

259 c⁄° 
	g¥i‹ôy_°ride_v4
 = 
INT_MAX
 / 4;

262 
	e¥i‹ôy_t
 {

263 
	g¥i‹ôy_n‹mÆ
 = 
öã∫Æ
::
¥i‹ôy_°ride_v4
 * 2,

264 
	g¥i‹ôy_low
 = 
¥i‹ôy_n‹mÆ
 - 
öã∫Æ
::
¥i‹ôy_°ride_v4
,

265 
	g¥i‹ôy_high
 = 
¥i‹ôy_n‹mÆ
 + 
öã∫Æ
::
¥i‹ôy_°ride_v4


270 #i‡
TBB_USE_CAPTURED_EXCEPTION


271 
˛ass
 
	gtbb_ex˚±i⁄
;

273 
«me•a˚
 
	göã∫Æ
 {

274 
˛ass
 
	gtbb_ex˚±i⁄_±r
;

278 
˛ass
 
	gèsk_scheduÀr_öô
;

279 
«me•a˚
 
	göãrÁ˚7
 { 
˛ass
 
	gèsk_¨ía
; }

302 ˛as†
	cèsk_group_c⁄ãxt
 : 
öã∫Æ
::
no_c›y
 {

303 
¥iv©e
:

304 
‰õnd
 
˛ass
 
öã∫Æ
::
gíîic_scheduÀr
;

305 
‰õnd
 
˛ass
 
	gèsk_scheduÀr_öô
;

306 
‰õnd
 
˛ass
 
	göãrÁ˚7
::
èsk_¨ía
;

308 #i‡
TBB_USE_CAPTURED_EXCEPTION


309 
tbb_ex˚±i⁄
 
	tex˚±i⁄_c⁄èöî_ty≥
;

311 
	göã∫Æ
::
	ttbb_ex˚±i⁄_±r
 
	tex˚±i⁄_c⁄èöî_ty≥
;

314 
	evîsi⁄_åaôs_w‹d_œyout
 {

315 
	gåaôs_off£t
 = 16,

316 
	gvîsi⁄_mask
 = 0xFFFF,

317 
	gåaôs_mask
 = 0xFFFFu»<< 
åaôs_off£t


320 
	gpublic
:

321 
	eköd_ty≥
 {

322 
isﬁ©ed
,

323 
	gbound


326 
	eåaôs_ty≥
 {

327 
	gexa˘_ex˚±i⁄
 = 0x0001u»<< 
åaôs_off£t
,

328 #i‡
__TBB_FP_CONTEXT


329 
	gÂ_£âögs
 = 0x0002u»<< 
åaôs_off£t
,

331 
	gc⁄cuºít_waô
 = 0x0004u»<< 
åaôs_off£t
,

332 #i‡
TBB_USE_CAPTURED_EXCEPTION


333 
	gdeÁu…_åaôs
 = 0

335 
deÁu…_åaôs
 = 
exa˘_ex˚±i⁄


339 
	g¥iv©e
:

340 
	e°©e
 {

341 
may_have_chûdªn
 = 1,

343 
	g√xt_°©e_vÆue
, 
	glow_unu£d_°©e_bô
 = (
√xt_°©e_vÆue
-1)*2

349 
__TBB_©omic
 
köd_ty≥
 
	gmy_köd
;

350 
uöçå_t
 
	g_my_köd_Æig√r
;

354 
èsk_group_c⁄ãxt
 *
	gmy_∑ª¡
;

359 
	göã∫Æ
::
c⁄ãxt_li°_node_t
 
my_node
;

362 
__ôt_ˇŒî
 
	gôt_ˇŒî
;

368 
	g_Àadög_∑ddög
[
öã∫Æ
::
NFS_MaxLöeSize


369 - 2 * (
uöçå_t
)- (*Ë- (
öã∫Æ
::
c⁄ãxt_li°_node_t
)

370 - (
__ôt_ˇŒî
)

371 #i‡
__TBB_FP_CONTEXT


372 - (
öã∫Æ
::
˝u_˘l_ív_•a˚
)

376 #i‡
__TBB_FP_CONTEXT


380 
	göã∫Æ
::
˝u_˘l_ív_•a˚
 
my_˝u_˘l_ív
;

384 
uöçå_t
 
	gmy_ˇn˚Œ©i⁄_ªque°ed
;

390 
uöçå_t
 
	gmy_vîsi⁄_™d_åaôs
;

393 
ex˚±i⁄_c⁄èöî_ty≥
 *
	gmy_ex˚±i⁄
;

396 
	göã∫Æ
::
gíîic_scheduÀr
 *
my_ow√r
;

399 
uöçå_t
 
	gmy_°©e
;

401 #i‡
__TBB_TASK_PRIORITY


403 
öçå_t
 
	gmy_¥i‹ôy
;

408 
	g_åaûög_∑ddög
[
öã∫Æ
::
NFS_MaxLöeSize
 - 2 * (
uöçå_t
) - 2 * (*)

409 #i‡
__TBB_TASK_PRIORITY


410 - (
öçå_t
)

414 
	gpublic
:

444 
èsk_group_c⁄ãxt
 ( 
köd_ty≥
 
ªœti⁄_wôh_∑ª¡
 = 
bound
,

445 
uöçå_t
 
åaôs
 = 
deÁu…_åaôs
 )

446 : 
my_köd
(
ªœti⁄_wôh_∑ª¡
)

447 , 
my_vîsi⁄_™d_åaôs
(2 | 
åaôs
)

449 
öô
();

453 
	g__TBB_EXPORTED_METHOD
 ~
èsk_group_c⁄ãxt
 ();

463 
__TBB_EXPORTED_METHOD
 
ª£t
 ();

473 
boﬁ
 
__TBB_EXPORTED_METHOD
 
ˇn˚l_group_executi⁄
 ();

476 
boﬁ
 
__TBB_EXPORTED_METHOD
 
is_group_executi⁄_ˇn˚Œed
 () const;

485 
__TBB_EXPORTED_METHOD
 
ªgi°î_≥ndög_ex˚±i⁄
 ();

487 #i‡
__TBB_FP_CONTEXT


496 
__TBB_EXPORTED_METHOD
 
ˇ±uª_Â_£âögs
 ();

499 #i‡
__TBB_TASK_PRIORITY


501 
£t_¥i‹ôy
 ( 
¥i‹ôy_t
 );

504 
¥i‹ôy_t
 
¥i‹ôy
 () const;

507 
	g¥Ÿe˘ed
:

510 
__TBB_EXPORTED_METHOD
 
öô
 ();

512 
	g¥iv©e
:

513 
‰õnd
 
˛ass
 
èsk
;

514 
‰õnd
 
˛ass
 
	göã∫Æ
::
Æloˇã_roŸ_wôh_c⁄ãxt_¥oxy
;

516 c⁄° 
köd_ty≥
 
	gbödög_ªquúed
 = 
bound
;

517 c⁄° 
köd_ty≥
 
	gbödög_com∂ëed
 = köd_ty≥(
bound
+1);

518 c⁄° 
köd_ty≥
 
	gdëached
 = köd_ty≥(
bödög_com∂ëed
+1);

519 c⁄° 
köd_ty≥
 
	gdyög
 = köd_ty≥(
dëached
+1);

522 
	gãm∂©e
 <
ty≥«me
 
	gT
>

523 
¥›ag©e_èsk_group_°©e
 ( 
T
 
èsk_group_c⁄ãxt
::*
m±r_°©e
,Åask_group_c⁄ãxt& 
§c
, T 
√w_°©e
 );

526 
böd_to
 ( 
öã∫Æ
::
gíîic_scheduÀr
 *
loˇl_sched
 );

529 
ªgi°î_wôh
 ( 
öã∫Æ
::
gíîic_scheduÀr
 *
loˇl_sched
 );

531 #i‡
__TBB_FP_CONTEXT


534 
c›y_Â_£âögs
–c⁄° 
èsk_group_c⁄ãxt
 &
§c
 );

542 ˛as†
	cèsk
: 
__TBB_TASK_BASE_ACCESS
 
öãrÁ˚5
::
öã∫Æ
::
èsk_ba£
 {

545 
__TBB_EXPORTED_METHOD
 
öã∫Æ_£t_ªf_cou¡
–
cou¡
 );

548 
	göã∫Æ
::
ª„ªn˚_cou¡
 
__TBB_EXPORTED_METHOD
 
öã∫Æ_de¸emít_ªf_cou¡
();

550 
	g¥Ÿe˘ed
:

552 
èsk
(Ë{
¥efix
().
exåa_°©e
=1;}

554 
	gpublic
:

556 
vútuÆ
 ~
èsk
() {}

559 
vútuÆ
 
èsk
* 
execuã
() = 0;

562 
	e°©e_ty≥
 {

564 
	gexecutög
,

566 
	gªexecuã
,

568 
	gªady
,

570 
	gÆloˇãd
,

572 
	g‰ìd
,

574 
	gªcy˛e


575 #i‡
__TBB_RECYCLE_TO_ENQUEUE


577 ,
	gto_íqueue


586 
	göã∫Æ
::
Æloˇã_roŸ_¥oxy
 
Æloˇã_roŸ
() {

587  
öã∫Æ
::
Æloˇã_roŸ_¥oxy
();

590 #i‡
__TBB_TASK_GROUP_CONTEXT


592 
	göã∫Æ
::
Æloˇã_roŸ_wôh_c⁄ãxt_¥oxy
 
Æloˇã_roŸ
–
èsk_group_c⁄ãxt
& 
˘x
 ) {

593  
öã∫Æ
::
Æloˇã_roŸ_wôh_c⁄ãxt_¥oxy
(
˘x
);

599 
	göã∫Æ
::
Æloˇã_c⁄töu©i⁄_¥oxy
& 
Æloˇã_c⁄töu©i⁄
() {

600  *
ªöãΩªt_ˇ°
<
öã∫Æ
::
Æloˇã_c⁄töu©i⁄_¥oxy
*>(
this
);

604 
	göã∫Æ
::
Æloˇã_chûd_¥oxy
& 
Æloˇã_chûd
() {

605  *
ªöãΩªt_ˇ°
<
öã∫Æ
::
Æloˇã_chûd_¥oxy
*>(
this
);

609 
usög
 
	gèsk_ba£
::
Æloˇã_addôi⁄Æ_chûd_of
;

611 #i‡
__TBB_DEPRECATED_TASK_INTERFACE


617 
__TBB_EXPORTED_METHOD
 
de°roy
–
èsk
& 
t
 );

620 
usög
 
	gèsk_ba£
::
de°roy
;

634 
ªcy˛e_as_c⁄töu©i⁄
() {

635 
__TBB_ASSERT
–
¥efix
().
°©e
==
executög
, "executeÇotÑunning?" );

636 
¥efix
().
	g°©e
 = 
Æloˇãd
;

642 
ªcy˛e_as_ß„_c⁄töu©i⁄
() {

643 
__TBB_ASSERT
–
¥efix
().
°©e
==
executög
, "executeÇotÑunning?" );

644 
¥efix
().
	g°©e
 = 
ªcy˛e
;

648 
ªcy˛e_as_chûd_of
–
èsk
& 
√w_∑ª¡
 ) {

649 
	göã∫Æ
::
èsk_¥efix
& 
p
 = 
¥efix
();

650 
__TBB_ASSERT
–
¥efix
().
°©e
==
executög
||¥efix().°©e==
Æloˇãd
, "executeÇotÑunning, orálreadyÑecycled" );

651 
__TBB_ASSERT
–
¥efix
().
ªf_cou¡
==0, "no childÅasksállowed whenÑecycledásá child" );

652 
__TBB_ASSERT
–
p
.
∑ª¡
==
NULL
, "parent must beÇull" );

653 
__TBB_ASSERT
–
√w_∑ª¡
.
¥efix
().
°©e
<=
ªcy˛e
, "corruptÖarent's state" );

654 
__TBB_ASSERT
–
√w_∑ª¡
.
¥efix
().
°©e
!=
‰ìd
, "parentálready freed" );

655 
	gp
.
	g°©e
 = 
Æloˇãd
;

656 
	gp
.
	g∑ª¡
 = &
√w_∑ª¡
;

657 #i‡
__TBB_TASK_GROUP_CONTEXT


658 
	gp
.
	gc⁄ãxt
 = 
√w_∑ª¡
.
¥efix
().
c⁄ãxt
;

664 
ªcy˛e_to_ªexecuã
() {

665 
__TBB_ASSERT
–
¥efix
().
°©e
==
executög
, "executeÇotÑunning, orálreadyÑecycled" );

666 
__TBB_ASSERT
–
¥efix
().
ªf_cou¡
==0, "no childÅasksállowed whenÑecycled forÑeexecution" );

667 
¥efix
().
	g°©e
 = 
ªexecuã
;

670 #i‡
__TBB_RECYCLE_TO_ENQUEUE


673 
ªcy˛e_to_íqueue
() {

674 
__TBB_ASSERT
–
¥efix
().
°©e
==
executög
, "executeÇotÑunning, orálreadyÑecycled" );

675 
¥efix
().
	g°©e
 = 
to_íqueue
;

684 
£t_ªf_cou¡
–
cou¡
 ) {

685 #i‡
TBB_USE_THREADING_TOOLS
||
TBB_USE_ASSERT


686 
öã∫Æ_£t_ªf_cou¡
(
cou¡
);

688 
¥efix
().
	gªf_cou¡
 = 
cou¡
;

694 
ö¸emít_ªf_cou¡
() {

695 
__TBB_FëchAndIn¸emítWacquúe
–&
¥efix
().
ªf_cou¡
 );

700 
de¸emít_ªf_cou¡
() {

701 #i‡
TBB_USE_THREADING_TOOLS
||
TBB_USE_ASSERT


702  (
öã∫Æ_de¸emít_ªf_cou¡
());

704  (
__TBB_FëchAndDe¸emítWªÀa£
–&
¥efix
().
ªf_cou¡
 ))-1;

709 
usög
 
	gèsk_ba£
::
•awn
;

712 
•awn_™d_waô_f‹_Æl
–
èsk
& 
chûd
 ) {

713 
¥efix
().
	gow√r
->
waô_f‹_Æl
–*
this
, &
chûd
 );

717 
__TBB_EXPORTED_METHOD
 
•awn_™d_waô_f‹_Æl
–
èsk_li°
& 
li°
 );

720 
•awn_roŸ_™d_waô
–
èsk
& 
roŸ
 ) {

721 
	groŸ
.
¥efix
().
	gow√r
->
•awn_roŸ_™d_waô
–
roŸ
,ÑoŸ.¥efix().
√xt
 );

727 
•awn_roŸ_™d_waô
–
èsk_li°
& 
roŸ_li°
 );

731 
waô_f‹_Æl
() {

732 
¥efix
().
	gow√r
->
waô_f‹_Æl
–*
this
, 
NULL
 );

736 #i‡
__TBB_TASK_PRIORITY


748 
íqueue
–
èsk
& 
t
 ) {

749 
	gt
.
¥efix
().
	gow√r
->
íqueue
–
t
, 
NULL
 );

752 #i‡
__TBB_TASK_PRIORITY


754 
íqueue
–
èsk
& 
t
, 
¥i‹ôy_t
 
p
 ) {

755 
__TBB_ASSERT
–
p
 =
¥i‹ôy_low
 ||Ö =
¥i‹ôy_n‹mÆ
 ||Ö =
¥i‹ôy_high
, "InvalidÖriorityÜevel value" );

756 
	gt
.
¥efix
().
	gow√r
->
íqueue
–
t
, (*)
p
 );

761 
	gèsk
& 
__TBB_EXPORTED_FUNC
 
£lf
();

764 
èsk
* 
∑ª¡
(Ëc⁄° { 
¥efix
().
	g∑ª¡
;}

767 
£t_∑ª¡
(
èsk
* 
p
) {

768 #i‡
__TBB_TASK_GROUP_CONTEXT


769 
__TBB_ASSERT
(
¥efix
().
c⁄ãxt
 =
p
->prefix().context, "TheÅasks must be inÅhe same context");

771 
¥efix
().
	g∑ª¡
 = 
p
;

774 #i‡
__TBB_TASK_GROUP_CONTEXT


777 
èsk_group_c⁄ãxt
* 
c⁄ãxt
(Ë{ 
¥efix
().
	gc⁄ãxt
;}

780 
èsk_group_c⁄ãxt
* 
group
 (Ë{  
¥efix
().
	gc⁄ãxt
; }

784 
boﬁ
 
is_°ﬁí_èsk
() const {

785  (
¥efix
().
	gexåa_°©e
 & 0x80)!=0;

793 
°©e_ty≥
 
°©e
(Ëc⁄° { sèã_ty≥(
¥efix
().state);}

796 
ªf_cou¡
() const {

797 #i‡
TBB_USE_ASSERT


798 
	göã∫Æ
::
ª„ªn˚_cou¡
 
ªf_cou¡_
 = 
¥efix
().
ªf_cou¡
;

799 
__TBB_ASSERT
–
ªf_cou¡_
==(ref_count_), "integer overflowÉrror");

801  (
¥efix
().
	gªf_cou¡
);

805 
boﬁ
 
__TBB_EXPORTED_METHOD
 
is_ow√d_by_cuºít_thªad
() const;

813 
	göã∫Æ
::
	tafföôy_id
áffinity_id;

816 
£t_afföôy
–
afföôy_id
 
id
 ) {
¥efix
().
	gafföôy
 = id;}

819 
afföôy_id
 
afföôy
(Ëc⁄° { 
¥efix
().
	gafföôy
;}

826 
vútuÆ
 
__TBB_EXPORTED_METHOD
 
nŸe_afföôy
–
afföôy_id
 
id
 );

828 #i‡
__TBB_TASK_GROUP_CONTEXT


840 
__TBB_EXPORTED_METHOD
 
ch™ge_group
 ( 
èsk_group_c⁄ãxt
& 
˘x
 );

844 
boﬁ
 
ˇn˚l_group_executi⁄
 (Ë{  
¥efix
().
	gc⁄ãxt
->cancel_group_execution(); }

847 
boﬁ
 
is_ˇn˚Œed
 (Ëc⁄° {  
¥efix
().
	gc⁄ãxt
->
is_group_executi⁄_ˇn˚Œed
(); }

849 
boﬁ
 
is_ˇn˚Œed
 (Ëc⁄° {  
	gÁl£
; }

852 #i‡
__TBB_TASK_PRIORITY


854 
£t_group_¥i‹ôy
 ( 
¥i‹ôy_t
 
p
 ) { 
¥efix
().
	gc⁄ãxt
->
£t_¥i‹ôy
(p); }

857 
¥i‹ôy_t
 
group_¥i‹ôy
 (Ëc⁄° {  
¥efix
().
	gc⁄ãxt
->
¥i‹ôy
(); }

861 
	g¥iv©e
:

862 
‰õnd
 
˛ass
 
öãrÁ˚5
::
öã∫Æ
::
èsk_ba£
;

863 
‰õnd
 
˛ass
 
	gèsk_li°
;

864 
‰õnd
 
˛ass
 
	göã∫Æ
::
scheduÀr
;

865 
‰õnd
 
˛ass
 
	göã∫Æ
::
Æloˇã_roŸ_¥oxy
;

866 #i‡
__TBB_TASK_GROUP_CONTEXT


867 
‰õnd
 
˛ass
 
	göã∫Æ
::
Æloˇã_roŸ_wôh_c⁄ãxt_¥oxy
;

869 
‰õnd
 
˛ass
 
	göã∫Æ
::
Æloˇã_c⁄töu©i⁄_¥oxy
;

870 
‰õnd
 
˛ass
 
	göã∫Æ
::
Æloˇã_chûd_¥oxy
;

871 
‰õnd
 
˛ass
 
	göã∫Æ
::
Æloˇã_addôi⁄Æ_chûd_of_¥oxy
;

875 
	göã∫Æ
::
èsk_¥efix
& 
¥efix
–
öã∫Æ
::
vîsi⁄_èg
* = 
NULL
 ) const {

876  
ªöãΩªt_ˇ°
<
öã∫Æ
::
èsk_¥efix
*>(
c⁄°_ˇ°
<
èsk
*>(
this
))[-1];

882 ˛as†
	cem±y_èsk
: 
public
 
èsk
 {

883  
èsk
* 
execuã
() {

884  
NULL
;

889 
«me•a˚
 
	göã∫Æ
 {

890 
	gãm∂©e
<
ty≥«me
 
	gF
>

891 ˛as†
	cfun˘i⁄_èsk
 : 
public
 
èsk
 {

892 
F
 
my_func
;

893  
èsk
* 
execuã
() {

894 
my_func
();

895  
	gNULL
;

897 
	gpublic
:

898 
fun˘i⁄_èsk
–c⁄° 
F
& 
f
 ) : 
my_func
(f) {}

906 ˛as†
	cèsk_li°
: 
öã∫Æ
::
no_c›y
 {

907 
¥iv©e
:

908 
èsk
* 
fú°
;

909 
èsk
** 
	g√xt_±r
;

910 
‰õnd
 
˛ass
 
	gèsk
;

911 
‰õnd
 
˛ass
 
	göãrÁ˚5
::
öã∫Æ
::
èsk_ba£
;

912 
	gpublic
:

914 
èsk_li°
(Ë: 
fú°
(
NULL
), 
√xt_±r
(&first) {}

917 ~
èsk_li°
() {}

920 
boﬁ
 
em±y
(Ëc⁄° { !
	gfú°
;}

923 
push_back
–
èsk
&Åask ) {

924 
	gèsk
.
¥efix
().
	g√xt
 = 
NULL
;

925 *
	g√xt_±r
 = &
èsk
;

926 
	g√xt_±r
 = &
èsk
.
¥efix
().
√xt
;

930 
	gèsk
& 
p›_‰⁄t
() {

931 
__TBB_ASSERT
–!
em±y
(), "attemptÅoÖop item fromÉmptyÅask_list" );

932 
èsk
* 
	gªsu…
 = 
fú°
;

933 
	gfú°
 = 
ªsu…
->
¥efix
().
√xt
;

934 if–!
	gfú°
 ) 
	g√xt_±r
 = &
fú°
;

935  *
	gªsu…
;

939 
˛ór
() {

940 
	gfú°
=
NULL
;

941 
	g√xt_±r
=&
fú°
;

945 
ölöe
 
	göãrÁ˚5
::
öã∫Æ
::
èsk_ba£
::
	$•awn
–
èsk
& 
t
 ) {

946 
t
.
	`¥efix
().
ow√r
->
	`•awn
–t,Å.¥efix().
√xt
 );

947 
	}
}

949 
ölöe
 
	göãrÁ˚5
::
öã∫Æ
::
èsk_ba£
::
	$•awn
–
èsk_li°
& 
li°
 ) {

950 if–
èsk
* 
t
 = 
li°
.
fú°
 ) {

951 
t
->
	`¥efix
().
ow√r
->
	`•awn
–*t, *
li°
.
√xt_±r
 );

952 
li°
.
	`˛ór
();

954 
	}
}

956 
ölöe
 
	gèsk
::
	$•awn_roŸ_™d_waô
–
èsk_li°
& 
roŸ_li°
 ) {

957 if–
èsk
* 
t
 = 
roŸ_li°
.
fú°
 ) {

958 
t
->
	`¥efix
().
ow√r
->
	`•awn_roŸ_™d_waô
–*t, *
roŸ_li°
.
√xt_±r
 );

959 
roŸ_li°
.
	`˛ór
();

961 
	}
}

965 
ölöe
 *
›î©‹
 
	$√w
–
size_t
 
byãs
, c⁄° 
tbb
::
öã∫Æ
::
Æloˇã_roŸ_¥oxy
& ) {

966  &
tbb
::
öã∫Æ
::
Æloˇã_roŸ_¥oxy
::
	`Æloˇã
(
byãs
);

967 
	}
}

969 
ölöe
 
›î©‹
 
	$dñëe
–* 
èsk
, c⁄° 
tbb
::
öã∫Æ
::
Æloˇã_roŸ_¥oxy
& ) {

970 
tbb
::
öã∫Æ
::
Æloˇã_roŸ_¥oxy
::
	`‰ì
–*
°©ic_ˇ°
<tbb::
èsk
*>(task) );

971 
	}
}

973 #i‡
__TBB_TASK_GROUP_CONTEXT


974 
ölöe
 *
›î©‹
 
	$√w
–
size_t
 
byãs
, c⁄° 
tbb
::
öã∫Æ
::
Æloˇã_roŸ_wôh_c⁄ãxt_¥oxy
& 
p
 ) {

975  &
p
.
	`Æloˇã
(
byãs
);

976 
	}
}

978 
ölöe
 
›î©‹
 
	$dñëe
–* 
èsk
, c⁄° 
tbb
::
öã∫Æ
::
Æloˇã_roŸ_wôh_c⁄ãxt_¥oxy
& 
p
 ) {

979 
p
.
	`‰ì
–*
°©ic_ˇ°
<
tbb
::
èsk
*>(task) );

980 
	}
}

983 
ölöe
 *
›î©‹
 
	$√w
–
size_t
 
byãs
, c⁄° 
tbb
::
öã∫Æ
::
Æloˇã_c⁄töu©i⁄_¥oxy
& 
p
 ) {

984  &
p
.
	`Æloˇã
(
byãs
);

985 
	}
}

987 
ölöe
 
›î©‹
 
	$dñëe
–* 
èsk
, c⁄° 
tbb
::
öã∫Æ
::
Æloˇã_c⁄töu©i⁄_¥oxy
& 
p
 ) {

988 
p
.
	`‰ì
–*
°©ic_ˇ°
<
tbb
::
èsk
*>(task) );

989 
	}
}

991 
ölöe
 *
›î©‹
 
	$√w
–
size_t
 
byãs
, c⁄° 
tbb
::
öã∫Æ
::
Æloˇã_chûd_¥oxy
& 
p
 ) {

992  &
p
.
	`Æloˇã
(
byãs
);

993 
	}
}

995 
ölöe
 
›î©‹
 
	$dñëe
–* 
èsk
, c⁄° 
tbb
::
öã∫Æ
::
Æloˇã_chûd_¥oxy
& 
p
 ) {

996 
p
.
	`‰ì
–*
°©ic_ˇ°
<
tbb
::
èsk
*>(task) );

997 
	}
}

999 
ölöe
 *
›î©‹
 
	$√w
–
size_t
 
byãs
, c⁄° 
tbb
::
öã∫Æ
::
Æloˇã_addôi⁄Æ_chûd_of_¥oxy
& 
p
 ) {

1000  &
p
.
	`Æloˇã
(
byãs
);

1001 
	}
}

1003 
ölöe
 
›î©‹
 
	$dñëe
–* 
èsk
, c⁄° 
tbb
::
öã∫Æ
::
Æloˇã_addôi⁄Æ_chûd_of_¥oxy
& 
p
 ) {

1004 
p
.
	`‰ì
–*
°©ic_ˇ°
<
tbb
::
èsk
*>(task) );

1005 
	}
}

	@viper/concurrentqueue-src/benchmarks/tbb/task_arena.h

21 #i‚de‡
__TBB_èsk_¨ía_H


22 
	#__TBB_èsk_¨ía_H


	)

24 
	~"èsk.h
"

25 
	~"tbb_ex˚±i⁄.h
"

26 #i‡
TBB_USE_THREADING_TOOLS


27 
	~"©omic.h
"

30 #i‡
__TBB_TASK_ARENA


32 
«me•a˚
 
	gtbb
 {

35 
«me•a˚
 
	göã∫Æ
 {

38 
˛ass
 
	g¨ía
;

39 
˛ass
 
	gèsk_scheduÀr_ob£rvî_v3
;

43 
«me•a˚
 
	göãrÁ˚7
 {

45 
«me•a˚
 
	göã∫Æ
 {

46 
usög
 
«me•a˚
 
	gtbb
::
öã∫Æ
;

48 ˛as†
	cdñeg©e_ba£
 : 
no_assign
 {

49 
public
:

50 
vútuÆ
 
›î©‹
()() const = 0;

51 
	gvútuÆ
 ~
dñeg©e_ba£
() {}

54 
	gãm∂©e
<
ty≥«me
 
	gF
>

55 ˛as†
	cdñeg©ed_fun˘i⁄
 : 
public
 
dñeg©e_ba£
 {

56 
F
 &
my_func
;

57  
›î©‹
()() const {

58 
my_func
();

60 
	gpublic
:

61 
dñeg©ed_fun˘i⁄
 ( 
F
& 
f
 ) : 
my_func
(f) {}

64 ˛as†
	cèsk_¨ía_ba£
 {

65 
	g¥Ÿe˘ed
:

67 
öã∫Æ
::
¨ía
* 
my_¨ía
;

69 #i‡
__TBB_TASK_GROUP_CONTEXT


71 
èsk_group_c⁄ãxt
 *
	gmy_c⁄ãxt
;

75 
	gmy_max_c⁄cuºícy
;

78 
	gmy_ma°î_¶Ÿs
;

81 
öçå_t
 
	gmy_vîsi⁄_™d_åaôs
;

84 
	gdeÁu…_Êags
 = 0

85 #i‡
__TBB_TASK_GROUP_CONTEXT


86 | (
èsk_group_c⁄ãxt
::
deÁu…_åaôs
 &Åask_group_c⁄ãxt::
exa˘_ex˚±i⁄
)

87 , 
	gexa˘_ex˚±i⁄_Êag
 = 
èsk_group_c⁄ãxt
::
exa˘_ex˚±i⁄


91 
èsk_¨ía_ba£
(
max_c⁄cuºícy
, 
ª£rved_f‹_ma°îs
)

92 : 
my_¨ía
(0)

93 #i‡
__TBB_TASK_GROUP_CONTEXT


94 , 
my_c⁄ãxt
(0)

96 , 
my_max_c⁄cuºícy
(
max_c⁄cuºícy
)

97 , 
my_ma°î_¶Ÿs
(
ª£rved_f‹_ma°îs
)

98 , 
my_vîsi⁄_™d_åaôs
(
deÁu…_Êags
)

101 
__TBB_EXPORTED_METHOD
 
öã∫Æ_öôülize
( );

102 
__TBB_EXPORTED_METHOD
 
öã∫Æ_ãrmö©e
( );

103 
__TBB_EXPORTED_METHOD
 
öã∫Æ_íqueue
–
èsk
&, 
öçå_t
 ) const;

104 
__TBB_EXPORTED_METHOD
 
öã∫Æ_execuã
–
dñeg©e_ba£
& ) const;

105 
__TBB_EXPORTED_METHOD
 
öã∫Æ_waô
() const;

106 
__TBB_EXPORTED_FUNC
 
öã∫Æ_cuºít_¶Ÿ
();

107 
	gpublic
:

109 c⁄° 
autom©ic
 = -1;

121 ˛as†
	cèsk_¨ía
 : 
public
 
öã∫Æ
::
èsk_¨ía_ba£
 {

122 
‰õnd
 
˛ass
 
tbb
::
öã∫Æ
::
èsk_scheduÀr_ob£rvî_v3
;

123 
boﬁ
 
	gmy_öôülized
;

125 
	gpublic
:

132 
èsk_¨ía
(
max_c⁄cuºícy
 = 
autom©ic
, 
ª£rved_f‹_ma°îs
 = 1)

133 : 
èsk_¨ía_ba£
(
max_c⁄cuºícy
, 
ª£rved_f‹_ma°îs
)

134 , 
my_öôülized
(
Ál£
)

138 
èsk_¨ía
(c⁄°Åask_¨í®&
s
)

139 : 
èsk_¨ía_ba£
(
s
.
my_max_c⁄cuºícy
, s.
my_ma°î_¶Ÿs
)

140 , 
my_öôülized
(
Ál£
)

144 
ölöe
 
öôülize
() {

145 if–!
	gmy_öôülized
 ) {

146 
öã∫Æ_öôülize
();

147 #i‡
TBB_USE_THREADING_TOOLS


149 
	göã∫Æ
::
as_©omic
(
my_öôülized
).
„tch_™d_°‹e
<
ªÀa£
>(
åue
);

151 
	gmy_öôülized
 = 
åue
;

157 
ölöe
 
öôülize
(
max_c⁄cuºícy
, 
ª£rved_f‹_ma°îs
 = 1) {

158 
__TBB_ASSERT
–!
my_¨ía
, "ImpossibleÅo modify settings ofánálready initializedÅask_arena");

159 if–!
	gmy_öôülized
 ) {

160 
	gmy_max_c⁄cuºícy
 = 
max_c⁄cuºícy
;

161 
	gmy_ma°î_¶Ÿs
 = 
ª£rved_f‹_ma°îs
;

162 
öôülize
();

168 
ölöe
 
ãrmö©e
() {

169 if–
	gmy_öôülized
 ) {

170 
öã∫Æ_ãrmö©e
();

171 
	gmy_öôülized
 = 
Ál£
;

177 ~
èsk_¨ía
() {

178 
ãrmö©e
();

183 
boﬁ
 
is_a˘ive
(Ëc⁄° {  
	gmy_öôülized
; }

187 
	gãm∂©e
<
ty≥«me
 
	gF
>

188 
íqueue
–c⁄° 
F
& 
f
 ) {

189 
öôülize
();

190 #i‡
__TBB_TASK_GROUP_CONTEXT


191 
öã∫Æ_íqueue
–*
√w
–
èsk
::
Æloˇã_roŸ
(*
my_c⁄ãxt
ËË
öã∫Æ
::
fun˘i⁄_èsk
<
F
>(
f
), 0 );

193 
öã∫Æ_íqueue
–*
√w
–
èsk
::
Æloˇã_roŸ
(ËË
öã∫Æ
::
fun˘i⁄_èsk
<
F
>(
f
), 0 );

197 #i‡
__TBB_TASK_PRIORITY


200 
	gãm∂©e
<
ty≥«me
 
	gF
>

201 
íqueue
–c⁄° 
F
& 
f
, 
¥i‹ôy_t
 
p
 ) {

202 
__TBB_ASSERT
–
p
 =
¥i‹ôy_low
 ||Ö =
¥i‹ôy_n‹mÆ
 ||Ö =
¥i‹ôy_high
, "InvalidÖriorityÜevel value" );

203 
öôülize
();

204 #i‡
__TBB_TASK_GROUP_CONTEXT


205 
öã∫Æ_íqueue
–*
√w
–
èsk
::
Æloˇã_roŸ
(*
my_c⁄ãxt
ËË
öã∫Æ
::
fun˘i⁄_èsk
<
F
>(
f
), (
öçå_t
)
p
 );

207 
öã∫Æ_íqueue
–*
√w
–
èsk
::
Æloˇã_roŸ
(ËË
öã∫Æ
::
fun˘i⁄_èsk
<
F
>(
f
), (
öçå_t
)
p
 );

215 
	gãm∂©e
<
ty≥«me
 
	gF
>

216 
execuã
(
F
& 
f
) {

217 
öôülize
();

218 
	göã∫Æ
::
dñeg©ed_fun˘i⁄
<
F
> 
d
(
f
);

219 
öã∫Æ_execuã
–
d
 );

225 
	gãm∂©e
<
ty≥«me
 
	gF
>

226 
execuã
(c⁄° 
F
& 
f
) {

227 
öôülize
();

228 
	göã∫Æ
::
dñeg©ed_fun˘i⁄
<c⁄° 
F
> 
d
(
f
);

229 
öã∫Æ_execuã
–
d
 );

232 #i‡
__TBB_EXTRA_DEBUG


236 
debug_waô_u¡û_em±y
() {

237 
öôülize
();

238 
öã∫Æ_waô
();

243 
ölöe
 
cuºít_thªad_ödex
() {

244  
öã∫Æ_cuºít_¶Ÿ
();

250 
usög
 
	göãrÁ˚7
::
èsk_¨ía
;

	@viper/concurrentqueue-src/benchmarks/tbb/task_group.h

21 #i‚de‡
__TBB_èsk_group_H


22 
	#__TBB_èsk_group_H


	)

24 
	~"èsk.h
"

25 
	~"tbb_ex˚±i⁄.h
"

27 #i‡
__TBB_TASK_GROUP_CONTEXT


29 
«me•a˚
 
	gtbb
 {

31 
«me•a˚
 
	göã∫Æ
 {

32 
	gãm∂©e
<
ty≥«me
 
	gF
> 
˛ass
 
	gèsk_h™dÀ_èsk
;

35 
˛ass
 
	gèsk_group
;

36 
˛ass
 
	g°ru˘uªd_èsk_group
;

38 
	gãm∂©e
<
ty≥«me
 
	gF
>

39 ˛as†
	cèsk_h™dÀ
 : 
öã∫Æ
::
no_assign
 {

40 
ãm∂©e
<
ty≥«me
 
_F
> 
‰õnd
 
˛ass
 
öã∫Æ
::
èsk_h™dÀ_èsk
;

41 
‰õnd
 
˛ass
 
	gèsk_group
;

42 
‰õnd
 
˛ass
 
	g°ru˘uªd_èsk_group
;

44 c⁄° 
öçå_t
 
	gscheduÀd
 = 0x1;

46 
F
 
	gmy_func
;

47 
öçå_t
 
	gmy_°©e
;

49 
m¨k_scheduÀd
 () {

51 i‡–
	gmy_°©e
 & 
	gscheduÀd
 )

52 
	göã∫Æ
::
throw_ex˚±i⁄
–
öã∫Æ
::
eid_övÆid_mu…ùÀ_schedulög
 );

53 
	gmy_°©e
 |
scheduÀd
;

55 
	gpublic
:

56 
èsk_h™dÀ
–c⁄° 
F
& 
f
 ) : 
my_func
(f), 
my_°©e
(0) {}

58 
›î©‹
(Ë(Ëc⁄° { 
my_func
(); }

61 
	eèsk_group_°©us
 {

62 
	gnŸ_com∂ëe
,

63 
	gcom∂ëe
,

64 
	gˇn˚Àd


67 
«me•a˚
 
	göã∫Æ
 {

69 
	gãm∂©e
<
ty≥«me
 
	gF
>

70 ˛as†
	cèsk_h™dÀ_èsk
 : 
public
 
èsk
 {

71 
èsk_h™dÀ
<
F
>& 
my_h™dÀ
;

72  
èsk
* 
execuã
() {

73 
my_h™dÀ
();

74  
	gNULL
;

76 
	gpublic
:

77 
èsk_h™dÀ_èsk
–
èsk_h™dÀ
<
F
>& 
h
 ) : 
my_h™dÀ
(hË{ h.
m¨k_scheduÀd
(); }

80 ˛as†
	cèsk_group_ba£
 : 
öã∫Æ
::
no_c›y
 {

81 
¥Ÿe˘ed
:

82 
em±y_èsk
* 
my_roŸ
;

83 
èsk_group_c⁄ãxt
 
	gmy_c⁄ãxt
;

85 
	gèsk
& 
ow√r
 (Ë{  *
	gmy_roŸ
; }

87 
	gãm∂©e
<
ty≥«me
 
	gF
>

88 
èsk_group_°©us
 
öã∫Æ_run_™d_waô
–
F
& 
f
 ) {

89 
	g__TBB_TRY
 {

90 i‡–!
	gmy_c⁄ãxt
.
is_group_executi⁄_ˇn˚Œed
() )

91 
f
();

92 } 
__TBB_CATCH
( ... ) {

93 
	gmy_c⁄ãxt
.
ªgi°î_≥ndög_ex˚±i⁄
();

95  
waô
();

98 
	gãm∂©e
<
ty≥«me
 
	gF
,Åy≥«mê
	gTask
>

99 
öã∫Æ_run
–
F
& 
f
 ) {

100 
ow√r
().
•awn
–*
√w
–ow√r().
Æloˇã_addôi⁄Æ_chûd_of
(*
my_roŸ
ËË
Task
(
f
) );

103 
	gpublic
:

104 
èsk_group_ba£
–
uöçå_t
 
åaôs
 = 0 )

105 : 
my_c⁄ãxt
(
èsk_group_c⁄ãxt
::
bound
,Åask_group_c⁄ãxt::
deÁu…_åaôs
 | 
åaôs
)

107 
my_roŸ
 = 
√w
–
èsk
::
Æloˇã_roŸ
(
my_c⁄ãxt
ËË
em±y_èsk
;

108 
	gmy_roŸ
->
£t_ªf_cou¡
(1);

111 ~
èsk_group_ba£
(Ë
__TBB_NOEXCEPT
(
Ál£
) {

112 if–
	gmy_roŸ
->
ªf_cou¡
() > 1 ) {

113 
boﬁ
 
	g°ack_unwödög_ö_¥ogªss
 = 
°d
::
unˇught_ex˚±i⁄
();

116 i‡–!
is_ˇn˚lög
() )

117 
ˇn˚l
();

118 
	g__TBB_TRY
 {

119 
	gmy_roŸ
->
waô_f‹_Æl
();

120 } 
__TBB_CATCH
 (...) {

121 
	gèsk
::
de°roy
(*
my_roŸ
);

122 
__TBB_RETHROW
();

124 
	gèsk
::
de°roy
(*
my_roŸ
);

125 i‡–!
	g°ack_unwödög_ö_¥ogªss
 )

126 
	göã∫Æ
::
throw_ex˚±i⁄
–
öã∫Æ
::
eid_missög_waô
 );

129 
	gèsk
::
de°roy
(*
my_roŸ
);

133 
	gãm∂©e
<
ty≥«me
 
	gF
>

134 
run
–
èsk_h™dÀ
<
F
>& 
h
 ) {

135 
	göã∫Æ_run
< 
	gèsk_h™dÀ
<
	gF
>, 
	göã∫Æ
::
èsk_h™dÀ_èsk
<
F
> >–
h
 );

138 
èsk_group_°©us
 
waô
() {

139 
	g__TBB_TRY
 {

140 
	gmy_roŸ
->
waô_f‹_Æl
();

141 } 
__TBB_CATCH
( ... ) {

142 
	gmy_c⁄ãxt
.
ª£t
();

143 
__TBB_RETHROW
();

145 i‡–
	gmy_c⁄ãxt
.
is_group_executi⁄_ˇn˚Œed
() ) {

146 
	gmy_c⁄ãxt
.
ª£t
();

147  
	gˇn˚Àd
;

149  
	gcom∂ëe
;

152 
boﬁ
 
is_ˇn˚lög
() {

153  
	gmy_c⁄ãxt
.
is_group_executi⁄_ˇn˚Œed
();

156 
ˇn˚l
() {

157 
	gmy_c⁄ãxt
.
ˇn˚l_group_executi⁄
();

163 ˛as†
	cèsk_group
 : 
public
 
öã∫Æ
::
èsk_group_ba£
 {

164 
public
:

165 
èsk_group
 (Ë: 
èsk_group_ba£
–
èsk_group_c⁄ãxt
::
c⁄cuºít_waô
 ) {}

167 #i‡
__SUNPRO_CC


168 
ãm∂©e
<
ty≥«me
 
F
>

169 
run
–
èsk_h™dÀ
<
F
>& 
h
 ) {

170 
öã∫Æ_run
< 
èsk_h™dÀ
<
F
>, 
	göã∫Æ
::
èsk_h™dÀ_èsk
<F> >–
h
 );

173 
usög
 
	gèsk_group_ba£
::
run
;

176 
	gãm∂©e
<
ty≥«me
 
	gF
>

177 
run
–c⁄° 
F
& 
f
 ) {

178 
	göã∫Æ_run
< c⁄° 
	gF
, 
	göã∫Æ
::
fun˘i⁄_èsk
<
F
> >–
f
 );

181 
	gãm∂©e
<
ty≥«me
 
	gF
>

182 
èsk_group_°©us
 
run_™d_waô
–c⁄° 
F
& 
f
 ) {

183  
	göã∫Æ_run_™d_waô
<c⁄° 
	gF
>–
	gf
 );

186 
	gãm∂©e
<
ty≥«me
 
	gF
>

187 
èsk_group_°©us
 
run_™d_waô
–
èsk_h™dÀ
<
F
>& 
h
 ) {

188 
	gh
.
m¨k_scheduÀd
();

189  
	göã∫Æ_run_™d_waô
< 
	gèsk_h™dÀ
<
	gF
> >–
	gh
 );

193 ˛as†
	c°ru˘uªd_èsk_group
 : 
public
 
öã∫Æ
::
èsk_group_ba£
 {

194 
public
:

195 
ãm∂©e
<
ty≥«me
 
F
>

196 
èsk_group_°©us
 
run_™d_waô
 ( 
èsk_h™dÀ
<
F
>& 
h
 ) {

197 
h
.
m¨k_scheduÀd
();

198  
	göã∫Æ_run_™d_waô
< 
	gèsk_h™dÀ
<
	gF
> >–
	gh
 );

201 
èsk_group_°©us
 
waô
() {

202 
èsk_group_°©us
 
	gªs
 = 
èsk_group_ba£
::
waô
();

203 
	gmy_roŸ
->
£t_ªf_cou¡
(1);

204  
	gªs
;

208 
ölöe


209 
boﬁ
 
	$is_cuºít_èsk_group_ˇn˚lög
() {

210  
èsk
::
	`£lf
().
	`is_ˇn˚Œed
();

211 
	}
}

213 
	gãm∂©e
<
˛ass
 
	gF
>

214 
	gèsk_h™dÀ
<
	gF
> 
	$make_èsk
–c⁄° 
F
& 
f
 ) {

215  
èsk_h™dÀ
<
F
>–
f
 );

216 
	}
}

	@viper/concurrentqueue-src/benchmarks/tbb/task_group_context.cpp

21 
	~"scheduÀr.h
"

23 
	~"ôt_nŸify.h
"

25 
«me•a˚
 
	gtbb
 {

27 #i‡
__TBB_TASK_GROUP_CONTEXT


29 
usög
 
«me•a˚
 
	göã∫Æ
;

35 
ölöe
 * 
du∂iˇã_°rög
 ( c⁄° * 
§c
 ) {

36 * 
	gd°
 = 
NULL
;

37 i‡–
	g§c
 ) {

38 
size_t
 
	gÀn
 = 
°æí
(
§c
) + 1;

39 
	gd°
 = (*)
Æloˇã_vü_h™dÀr_v3
(
Àn
);

40 
°∫˝y
 (
d°
, 
§c
, 
Àn
);

42  
	gd°
;

45 
	gˇ±uªd_ex˚±i⁄
::~
ˇ±uªd_ex˚±i⁄
 (Ë
throw
() {

46 
˛ór
();

49 
	gˇ±uªd_ex˚±i⁄
::
£t
 ( c⁄° * 
a_«me
, c⁄° * 
öfo
 ) 
throw
() {

50 
	gmy_ex˚±i⁄_«me
 = 
du∂iˇã_°rög
–
a_«me
 );

51 
	gmy_ex˚±i⁄_öfo
 = 
du∂iˇã_°rög
–
öfo
 );

54 
	gˇ±uªd_ex˚±i⁄
::
˛ór
 (Ë
throw
() {

55 
dóŒoˇã_vü_h™dÀr_v3
 (
c⁄°_ˇ°
<*>(
my_ex˚±i⁄_«me
));

56 
dóŒoˇã_vü_h™dÀr_v3
 (
c⁄°_ˇ°
<*>(
my_ex˚±i⁄_öfo
));

59 
ˇ±uªd_ex˚±i⁄
* 
	gˇ±uªd_ex˚±i⁄
::
move
 (Ë
throw
() {

60 
ˇ±uªd_ex˚±i⁄
 *
e
 = (ˇ±uªd_ex˚±i⁄*)
Æloˇã_vü_h™dÀr_v3
((captured_exception));

61 i‡–
	ge
 ) {

62 ::
√w
 (
e
Ë
ˇ±uªd_ex˚±i⁄
();

63 
	ge
->
	gmy_ex˚±i⁄_«me
 = 
my_ex˚±i⁄_«me
;

64 
	ge
->
	gmy_ex˚±i⁄_öfo
 = 
my_ex˚±i⁄_öfo
;

65 
	ge
->
	gmy_dy«mic
 = 
åue
;

66 
	gmy_ex˚±i⁄_«me
 = 
my_ex˚±i⁄_öfo
 = 
NULL
;

68  
	ge
;

71 
	gˇ±uªd_ex˚±i⁄
::
de°roy
 (Ë
throw
() {

72 
__TBB_ASSERT
 ( 
my_dy«mic
, "Method destroy can be used only on objects created by clone orállocate" );

73 i‡–
	gmy_dy«mic
 ) {

74 
	gthis
->
	gˇ±uªd_ex˚±i⁄
::~
ˇ±uªd_ex˚±i⁄
();

75 
dóŒoˇã_vü_h™dÀr_v3
 (
this
);

79 
ˇ±uªd_ex˚±i⁄
* 
	gˇ±uªd_ex˚±i⁄
::
Æloˇã
 ( c⁄° * 
a_«me
, c⁄° * 
öfo
 ) {

80 
ˇ±uªd_ex˚±i⁄
 *
	ge
 = (ˇ±uªd_ex˚±i⁄*)
Æloˇã_vü_h™dÀr_v3
( (captured_exception) );

81 i‡–
	ge
 ) {

82 ::
√w
 (
e
Ë
ˇ±uªd_ex˚±i⁄
(
a_«me
, 
öfo
);

83 
	ge
->
	gmy_dy«mic
 = 
åue
;

85  
	ge
;

88 c⁄° * 
	gˇ±uªd_ex˚±i⁄
::
«me
(Ëc⁄° 
throw
() {

89  
my_ex˚±i⁄_«me
;

92 c⁄° * 
	gˇ±uªd_ex˚±i⁄
::
wh©
(Ëc⁄° 
throw
() {

93  
my_ex˚±i⁄_öfo
;

101 #i‡!
TBB_USE_CAPTURED_EXCEPTION


103 
«me•a˚
 
	göã∫Æ
 {

105 
	gãm∂©e
<
ty≥«me
 
	gT
>

106 
tbb_ex˚±i⁄_±r
* 
AŒoˇãEx˚±i⁄C⁄èöî
–c⁄° 
T
& 
§c
 ) {

107 
tbb_ex˚±i⁄_±r
 *
	gïå
 = (tbb_ex˚±i⁄_±r*)
Æloˇã_vü_h™dÀr_v3
( (tbb_exception_ptr) );

108 i‡–
	gïå
 )

109 
√w
 (
ïå
Ë
tbb_ex˚±i⁄_±r
(
§c
);

110  
	gïå
;

113 
tbb_ex˚±i⁄_±r
* 
	gtbb_ex˚±i⁄_±r
::
Æloˇã
 () {

114  
AŒoˇãEx˚±i⁄C⁄èöî
–
°d
::
cuºít_ex˚±i⁄
() );

117 
tbb_ex˚±i⁄_±r
* 
	gtbb_ex˚±i⁄_±r
::
Æloˇã
 ( c⁄° 
tbb_ex˚±i⁄
& ) {

118  
AŒoˇãEx˚±i⁄C⁄èöî
–
°d
::
cuºít_ex˚±i⁄
() );

121 
tbb_ex˚±i⁄_±r
* 
	gtbb_ex˚±i⁄_±r
::
Æloˇã
 ( 
ˇ±uªd_ex˚±i⁄
& 
§c
 ) {

122 
tbb_ex˚±i⁄_±r
 *
ªs
 = 
AŒoˇãEx˚±i⁄C⁄èöî
–
§c
 );

123 
	g§c
.
de°roy
();

124  
	gªs
;

127 
	gtbb_ex˚±i⁄_±r
::
de°roy
 (Ë
throw
() {

128 
this
->
tbb_ex˚±i⁄_±r
::~tbb_exception_ptr();

129 
dóŒoˇã_vü_h™dÀr_v3
 (
this
);

140 
	gèsk_group_c⁄ãxt
::~
èsk_group_c⁄ãxt
 () {

141 i‡–
__TBB_lﬂd_ªœxed
(
my_köd
Ë=
bödög_com∂ëed
 ) {

142 i‡–
govîn‹
::
is_£t
(
my_ow√r
) ) {

144 
uöçå_t
 
loˇl_cou¡_¢≠shŸ
 = 
my_ow√r
->
my_c⁄ãxt_°©e_¥›ag©i⁄_ïoch
;

145 
	gmy_ow√r
->
	gmy_loˇl_˘x_li°_upd©e
.
	g°‹e
<
	gªœxed
>(1);

148 
©omic_„n˚
();

149 i‡–
	gmy_ow√r
->
	gmy_n⁄loˇl_˘x_li°_upd©e
.
	glﬂd
<
	gªœxed
>() ) {

150 
	g•ö_muãx
::
sc›ed_lock
 
lock
(
my_ow√r
->
my_c⁄ãxt_li°_muãx
);

151 
	gmy_node
.
	gmy_¥ev
->
	gmy_√xt
 = 
my_node
.
my_√xt
;

152 
	gmy_node
.
	gmy_√xt
->
	gmy_¥ev
 = 
my_node
.
my_¥ev
;

153 
	gmy_ow√r
->
	gmy_loˇl_˘x_li°_upd©e
.
	g°‹e
<
	gªœxed
>(0);

156 
	gmy_node
.
	gmy_¥ev
->
	gmy_√xt
 = 
my_node
.
my_√xt
;

157 
	gmy_node
.
	gmy_√xt
->
	gmy_¥ev
 = 
my_node
.
my_¥ev
;

161 
	gmy_ow√r
->
	gmy_loˇl_˘x_li°_upd©e
.
	g°‹e
<
	gªÀa£
>(0);

162 i‡–
	gloˇl_cou¡_¢≠shŸ
 !
the_c⁄ãxt_°©e_¥›ag©i⁄_ïoch
 ) {

167 
•ö_muãx
::
sc›ed_lock
 
lock
(
my_ow√r
->
my_c⁄ãxt_li°_muãx
);

175 i‡–
	göã∫Æ
::
as_©omic
(
my_köd
).
„tch_™d_°‹e
(
dyög
Ë=
dëached
 ) {

176 
my_node
.
my_¥ev
->
my_√xt
 = my_node.my_next;

177 
	gmy_node
.
	gmy_√xt
->
	gmy_¥ev
 = 
my_node
.
my_¥ev
;

181 
	gmy_ow√r
->
	gmy_n⁄loˇl_˘x_li°_upd©e
.
	g„tch_™d_ö¸emít
<
	gfuŒ_„n˚
>();

183 
•ö_waô_u¡û_eq
–
my_ow√r
->
my_loˇl_˘x_li°_upd©e
, 0u );

184 
	gmy_ow√r
->
	gmy_c⁄ãxt_li°_muãx
.
lock
();

185 
	gmy_node
.
	gmy_¥ev
->
	gmy_√xt
 = 
my_node
.
my_√xt
;

186 
	gmy_node
.
	gmy_√xt
->
	gmy_¥ev
 = 
my_node
.
my_¥ev
;

187 
	gmy_ow√r
->
	gmy_c⁄ãxt_li°_muãx
.
u∆ock
();

189 
	gmy_ow√r
->
	gmy_n⁄loˇl_˘x_li°_upd©e
.
	g„tch_™d_de¸emít
<
	gfuŒ_„n˚
>();

193 #i‡
__TBB_FP_CONTEXT


194 
	göã∫Æ
::
pu¬ed_ˇ°
<
˝u_˘l_ív
*>(&
my_˝u_˘l_ív
)->~cpu_ctl_env();

196 
pois⁄_vÆue
(
my_vîsi⁄_™d_åaôs
);

197 i‡–
	gmy_ex˚±i⁄
 )

198 
	gmy_ex˚±i⁄
->
de°roy
();

199 
ITT_STACK
(
ôt_ˇŒî
 !
ITT_CALLER_NULL
, 
ˇŒî_de°roy
, itt_caller);

202 
	gèsk_group_c⁄ãxt
::
öô
 () {

203 
__TBB_STATIC_ASSERT
 ( (
my_vîsi⁄_™d_åaôs
) >= 4, "Layout of my_version_and_traits must beÑeconsidered onÅhisÖlatform" );

204 
__TBB_STATIC_ASSERT
 ( (
èsk_group_c⁄ãxt
Ë=2 * 
NFS_MaxLöeSize
, "Context class has wrong size - checkÖaddingánd membersálignment" );

205 
__TBB_ASSERT
 ( (
uöçå_t
(
this
Ë& ((
my_ˇn˚Œ©i⁄_ªque°ed
) - 1)) == 0, "Context is improperlyáligned" );

206 
__TBB_ASSERT
 ( 
__TBB_lﬂd_ªœxed
(
my_köd
Ë=
isﬁ©ed
 || __TBB_lﬂd_ªœxed(my_ködË=
bound
, "Context can be created onlyás isolated or bound" );

207 
	gmy_∑ª¡
 = 
NULL
;

208 
	gmy_ˇn˚Œ©i⁄_ªque°ed
 = 0;

209 
	gmy_ex˚±i⁄
 = 
NULL
;

210 
	gmy_ow√r
 = 
NULL
;

211 
	gmy_°©e
 = 0;

212 
	gôt_ˇŒî
 = 
ITT_CALLER_NULL
;

213 #i‡
__TBB_TASK_PRIORITY


214 
	gmy_¥i‹ôy
 = 
n‹mÆized_n‹mÆ_¥i‹ôy
;

216 #i‡
__TBB_FP_CONTEXT


217 
__TBB_STATIC_ASSERT
–(
my_˝u_˘l_ív
Ë=(
öã∫Æ
::
uöt64_t
), "TheÑeserved space for FPU settingsáreÇotÉqual sizeof(uint64_t)" );

218 
__TBB_STATIC_ASSERT
–(
˝u_˘l_ív
Ë<(
my_˝u_˘l_ív
), "FPU settings storage doesÇot fitÅo uint64_t" );

219 
suµªss_unu£d_w¨nög
–
my_˝u_˘l_ív
.
•a˚
 );

221 
	g˝u_˘l_ív
 &
	g˘l
 = *
öã∫Æ
::
pu¬ed_ˇ°
<
˝u_˘l_ív
*>(&
my_˝u_˘l_ív
);

222 
√w
 ( &
˘l
 ) 
	g˝u_˘l_ív
;

223 i‡–
	gmy_vîsi⁄_™d_åaôs
 & 
	gÂ_£âögs
 )

224 
	g˘l
.
gë_ív
();

228 
	gèsk_group_c⁄ãxt
::
ªgi°î_wôh
 ( 
gíîic_scheduÀr
 *
loˇl_sched
 ) {

229 
__TBB_ASSERT
–
loˇl_sched
, 
NULL
 );

230 
	gmy_ow√r
 = 
loˇl_sched
;

232 
	gmy_node
.
	gmy_¥ev
 = &
loˇl_sched
->
my_c⁄ãxt_li°_hód
;

235 
	gloˇl_sched
->
	gmy_loˇl_˘x_li°_upd©e
.
	g°‹e
<
	gªœxed
>(1);

239 
©omic_„n˚
();

241 i‡–
	gloˇl_sched
->
	gmy_n⁄loˇl_˘x_li°_upd©e
.
	glﬂd
<
	gªœxed
>() ) {

242 
	g•ö_muãx
::
sc›ed_lock
 
lock
(
my_ow√r
->
my_c⁄ãxt_li°_muãx
);

243 
	gloˇl_sched
->
	gmy_c⁄ãxt_li°_hód
.
	gmy_√xt
->
	gmy_¥ev
 = &
my_node
;

244 
	gmy_node
.
	gmy_√xt
 = 
loˇl_sched
->
my_c⁄ãxt_li°_hód
.
my_√xt
;

245 
	gmy_ow√r
->
	gmy_loˇl_˘x_li°_upd©e
.
	g°‹e
<
	gªœxed
>(0);

246 
	gloˇl_sched
->
	gmy_c⁄ãxt_li°_hód
.
	gmy_√xt
 = &
my_node
;

249 
	gloˇl_sched
->
	gmy_c⁄ãxt_li°_hód
.
	gmy_√xt
->
	gmy_¥ev
 = &
my_node
;

250 
	gmy_node
.
	gmy_√xt
 = 
loˇl_sched
->
my_c⁄ãxt_li°_hód
.
my_√xt
;

251 
	gmy_ow√r
->
	gmy_loˇl_˘x_li°_upd©e
.
	g°‹e
<
	gªÀa£
>(0);

256 
__TBB_°‹e_wôh_ªÀa£
(
loˇl_sched
->
my_c⁄ãxt_li°_hód
.
my_√xt
, &
my_node
);

260 
	gèsk_group_c⁄ãxt
::
böd_to
 ( 
gíîic_scheduÀr
 *
loˇl_sched
 ) {

261 
__TBB_ASSERT
 ( 
__TBB_lﬂd_ªœxed
(
my_köd
Ë=
bödög_ªquúed
, "Already bound or isolated?" );

262 
__TBB_ASSERT
 ( !
my_∑ª¡
, "Parent is set before initial binding" );

263 
	gmy_∑ª¡
 = 
loˇl_sched
->
my_ö√rmo°_ru¬ög_èsk
->
¥efix
().
c⁄ãxt
;

264 #i‡
__TBB_FP_CONTEXT


266 i‡–!(
	gmy_vîsi⁄_™d_åaôs
 & 
	gÂ_£âögs
) )

267 
c›y_Â_£âögs
(*
my_∑ª¡
);

271 i‡–!(
	gmy_∑ª¡
->
	gmy_°©e
 & 
	gmay_have_chûdªn
) )

272 
	gmy_∑ª¡
->
	gmy_°©e
 |
may_have_chûdªn
;

273 i‡–
	gmy_∑ª¡
->my_parent ) {

285 
uöçå_t
 
	gloˇl_cou¡_¢≠shŸ
 = 
__TBB_lﬂd_wôh_acquúe
–
my_∑ª¡
->
my_ow√r
->
my_c⁄ãxt_°©e_¥›ag©i⁄_ïoch
 );

288 
	gmy_ˇn˚Œ©i⁄_ªque°ed
 = 
my_∑ª¡
->
my_ˇn˚Œ©i⁄_ªque°ed
;

289 #i‡
__TBB_TASK_PRIORITY


290 
	gmy_¥i‹ôy
 = 
my_∑ª¡
->
my_¥i‹ôy
;

292 
ªgi°î_wôh
–
loˇl_sched
 );

298 i‡–
	gloˇl_cou¡_¢≠shŸ
 !
the_c⁄ãxt_°©e_¥›ag©i⁄_ïoch
 ) {

300 
c⁄ãxt_°©e_¥›ag©i⁄_muãx_ty≥
::
sc›ed_lock
 
lock
(
the_c⁄ãxt_°©e_¥›ag©i⁄_muãx
);

301 
	gmy_ˇn˚Œ©i⁄_ªque°ed
 = 
my_∑ª¡
->
my_ˇn˚Œ©i⁄_ªque°ed
;

302 #i‡
__TBB_TASK_PRIORITY


303 
	gmy_¥i‹ôy
 = 
my_∑ª¡
->
my_¥i‹ôy
;

308 
ªgi°î_wôh
–
loˇl_sched
 );

312 
	gmy_ˇn˚Œ©i⁄_ªque°ed
 = 
my_∑ª¡
->
my_ˇn˚Œ©i⁄_ªque°ed
;

313 #i‡
__TBB_TASK_PRIORITY


314 
	gmy_¥i‹ôy
 = 
my_∑ª¡
->
my_¥i‹ôy
;

317 
__TBB_°‹e_ªœxed
(
my_köd
, 
bödög_com∂ëed
);

320 #i‡
__TBB_TASK_GROUP_CONTEXT


321 
	gãm∂©e
 <
ty≥«me
 
	gT
>

322 
	gèsk_group_c⁄ãxt
::
¥›ag©e_èsk_group_°©e
 ( 
T
 
èsk_group_c⁄ãxt
::*
m±r_°©e
,Åask_group_c⁄ãxt& 
§c
, T 
√w_°©e
 ) {

323 i‡(
	gthis
->*
	gm±r_°©e
 =
√w_°©e
) {

331 i‡(
this
 =&
§c
) {

338  
èsk_group_c⁄ãxt
 *
™˚°‹
 = 
my_∑ª¡
; 
	g™˚°‹
 !
NULL
;áncestor =áncestor->my_parent ) {

339 
__TBB_ASSERT
(
öã∫Æ
::
is_Æive
(
™˚°‹
->
my_vîsi⁄_™d_åaôs
), "contextÅree was corrupted");

340 i‡–
	g™˚°‹
 =&
§c
 ) {

341  
èsk_group_c⁄ãxt
 *
˘x
 = 
this
; 
	g˘x
 !
™˚°‹
; ctx = ctx->
my_∑ª¡
 )

342 
˘x
->*
m±r_°©e
 = 
√w_°©e
;

349 
	gãm∂©e
 <
ty≥«me
 
	gT
>

350 
	ggíîic_scheduÀr
::
¥›ag©e_èsk_group_°©e
 ( 
T
 
èsk_group_c⁄ãxt
::*
m±r_°©e
,Åask_group_c⁄ãxt& 
§c
, T 
√w_°©e
 ) {

351 
	g•ö_muãx
::
sc›ed_lock
 
lock
(
my_c⁄ãxt_li°_muãx
);

355 
c⁄ãxt_li°_node_t
 *
	gnode
 = 
__TBB_lﬂd_wôh_acquúe
(
my_c⁄ãxt_li°_hód
.
my_√xt
);

356  
	gnode
 !&
my_c⁄ãxt_li°_hód
 ) {

357 
èsk_group_c⁄ãxt
 &
˘x
 = 
__TBB_gë_obje˘_ªf
—ask_group_c⁄ãxt, 
my_node
, 
node
);

358 i‡–
	g˘x
.*
	gm±r_°©e
 !
√w_°©e
 )

359 
˘x
.
¥›ag©e_èsk_group_°©e
–
m±r_°©e
, 
§c
, 
√w_°©e
 );

360 
	gnode
 = 
node
->
my_√xt
;

361 
__TBB_ASSERT
–
is_Æive
(
˘x
.
my_vîsi⁄_™d_åaôs
), "Local contextÜist contains destroyed object" );

365 
__TBB_°‹e_wôh_ªÀa£
(
my_c⁄ãxt_°©e_¥›ag©i⁄_ïoch
, 
the_c⁄ãxt_°©e_¥›ag©i⁄_ïoch
);

368 
	gãm∂©e
 <
ty≥«me
 
	gT
>

369 
boﬁ
 
	gm¨kë
::
¥›ag©e_èsk_group_°©e
 ( 
T
 
èsk_group_c⁄ãxt
::*
m±r_°©e
,Åask_group_c⁄ãxt& 
§c
, T 
√w_°©e
 ) {

370 i‡–!(
	g§c
.
	gmy_°©e
 & 
	gèsk_group_c⁄ãxt
::
may_have_chûdªn
) )

371  
åue
;

375 
	gc⁄ãxt_°©e_¥›ag©i⁄_muãx_ty≥
::
sc›ed_lock
 
lock
(
the_c⁄ãxt_°©e_¥›ag©i⁄_muãx
);

376 i‡–
	g§c
.*
	gm±r_°©e
 !
√w_°©e
 )

378  
Ál£
;

380 
__TBB_FëchAndAddWªÀa£
(&
the_c⁄ãxt_°©e_¥›ag©i⁄_ïoch
, 1);

382 
	gnum_w‹kîs
 = 
my_num_w‹kîs
;

383  
	gi
 = 0; i < 
	gnum_w‹kîs
; ++i ) {

384 
gíîic_scheduÀr
 *
	gs
 = 
my_w‹kîs
[
i
];

386 i‡–
	gs
 )

387 
	gs
->
¥›ag©e_èsk_group_°©e
–
m±r_°©e
, 
§c
, 
√w_°©e
 );

390 
F‹EachAª«
(
a
) {

391 
	g¨ía_¶Ÿ
 &
	g¶Ÿ
 = 
a
.
my_¶Ÿs
[0];

392 
gíîic_scheduÀr
 *
	gs
 = 
¶Ÿ
.
my_scheduÀr
;

395 i‡–
	gs
 && 
as_©omic
(
¶Ÿ
.
my_scheduÀr
).
com∑ª_™d_sw≠
(
LockedMa°î
, 
s
) == s ) {

396 
__TBB_ASSERT
–
¶Ÿ
.
my_scheduÀr
 =
LockedMa°î
, 
NULL
 );

398 
__TBB_ASSERT
–
s
 !
LockedMa°î
, 
NULL
 );

399 
	gs
->
¥›ag©e_èsk_group_°©e
–
m±r_°©e
, 
§c
, 
√w_°©e
 );

400 
__TBB_°‹e_wôh_ªÀa£
–
¶Ÿ
.
my_scheduÀr
, 
s
 );

402 } 
EndF‹Each
();

403  
	gåue
;

406 
	gãm∂©e
 <
ty≥«me
 
	gT
>

407 
boﬁ
 
	g¨ía
::
¥›ag©e_èsk_group_°©e
 ( 
T
 
èsk_group_c⁄ãxt
::*
m±r_°©e
,Åask_group_c⁄ãxt& 
§c
, T 
√w_°©e
 ) {

408  
	gmy_m¨kë
->
¥›ag©e_èsk_group_°©e
–
m±r_°©e
, 
§c
, 
√w_°©e
 );

412 
boﬁ
 
	gèsk_group_c⁄ãxt
::
ˇn˚l_group_executi⁄
 () {

413 
__TBB_ASSERT
 ( 
my_ˇn˚Œ©i⁄_ªque°ed
 == 0 || my_cancellation_requested == 1, "Invalid cancellation state");

414 i‡–
	gmy_ˇn˚Œ©i⁄_ªque°ed
 || 
as_©omic
(
my_ˇn˚Œ©i⁄_ªque°ed
).
com∑ª_™d_sw≠
(1, 0) ) {

418  
	gÁl£
;

420 
	ggovîn‹
::
loˇl_scheduÀr
()->
my_¨ía
->
¥›ag©e_èsk_group_°©e
–&
èsk_group_c⁄ãxt
::
my_ˇn˚Œ©i⁄_ªque°ed
, *
this
, (
uöçå_t
)1 );

421  
	gåue
;

424 
boﬁ
 
	gèsk_group_c⁄ãxt
::
is_group_executi⁄_ˇn˚Œed
 () const {

425  
my_ˇn˚Œ©i⁄_ªque°ed
 != 0;

429 
	gèsk_group_c⁄ãxt
::
ª£t
 () {

433 i‡–
my_ex˚±i⁄
 ) {

434 
my_ex˚±i⁄
->
de°roy
();

435 
	gmy_ex˚±i⁄
 = 
NULL
;

437 
	gmy_ˇn˚Œ©i⁄_ªque°ed
 = 0;

440 #i‡
__TBB_FP_CONTEXT


442 
	gèsk_group_c⁄ãxt
::
ˇ±uª_Â_£âögs
 () {

446 
˝u_˘l_ív
 &
˘l
 = *
öã∫Æ
::
pu¬ed_ˇ°
<˝u_˘l_ív*>(&
my_˝u_˘l_ív
);

447 i‡–!(
	gmy_vîsi⁄_™d_åaôs
 & 
	gÂ_£âögs
) ) {

448 
√w
 ( &
˘l
 ) 
	g˝u_˘l_ív
;

449 
	gmy_vîsi⁄_™d_åaôs
 |
Â_£âögs
;

451 
	g˘l
.
gë_ív
();

454 
	gèsk_group_c⁄ãxt
::
c›y_Â_£âögs
–c⁄° 
èsk_group_c⁄ãxt
 &
§c
 ) {

455 
__TBB_ASSERT
–!(
my_vîsi⁄_™d_åaôs
 & 
Â_£âögs
), "The contextálready has FPU settings." );

456 
__TBB_ASSERT
–
§c
.
my_vîsi⁄_™d_åaôs
 & 
Â_£âögs
, "The source context doesÇot have FPU settings." );

458 
	g˝u_˘l_ív
 &
	g˘l
 = *
öã∫Æ
::
pu¬ed_ˇ°
<
˝u_˘l_ív
*>(&
my_˝u_˘l_ív
);

459 
	g˝u_˘l_ív
 &
	g§c_˘l
 = *
öã∫Æ
::
pu¬ed_ˇ°
<
˝u_˘l_ív
*>(&
§c
.
my_˝u_˘l_ív
);

460 
√w
 (&
˘l
Ë
˝u_˘l_ív
–
§c_˘l
 );

461 
	gmy_vîsi⁄_™d_åaôs
 |
Â_£âögs
;

465 
	gèsk_group_c⁄ãxt
::
ªgi°î_≥ndög_ex˚±i⁄
 () {

466 i‡–
my_ˇn˚Œ©i⁄_ªque°ed
 )

468 #i‡
TBB_USE_EXCEPTIONS


469 
	gåy
 {

470 
	gthrow
;

471 } 
TbbC©chAŒ
–
this
 );

475 #i‡
__TBB_TASK_PRIORITY


476 
	gèsk_group_c⁄ãxt
::
£t_¥i‹ôy
 ( 
¥i‹ôy_t
 
¥io
 ) {

477 
__TBB_ASSERT
–
¥io
 =
¥i‹ôy_low
 ||Öriÿ=
¥i‹ôy_n‹mÆ
 ||Öriÿ=
¥i‹ôy_high
, "InvalidÖriorityÜevel value" );

478 
öçå_t
 
	gp
 = 
n‹mÆize_¥i‹ôy
(
¥io
);

479 i‡–
	gmy_¥i‹ôy
 =
p
 && !(
my_°©e
 & 
èsk_group_c⁄ãxt
::
may_have_chûdªn
))

481 
	gmy_¥i‹ôy
 = 
p
;

482 
	göã∫Æ
::
gíîic_scheduÀr
* 
s
 = 
govîn‹
::
loˇl_scheduÀr_if_öôülized
();

483 i‡–!
	gs
 || !s->
	gmy_¨ía
->
¥›ag©e_èsk_group_°©e
(&
èsk_group_c⁄ãxt
::
my_¥i‹ôy
, *
this
, 
p
) )

491 
	gs
->
	gmy_m¨kë
->
upd©e_¨ía_¥i‹ôy
–*
s
->
my_¨ía
, 
p
 );

494 
¥i‹ôy_t
 
	gèsk_group_c⁄ãxt
::
¥i‹ôy
 () const {

495  
°©ic_ˇ°
<
¥i‹ôy_t
>(
¥i‹ôy_‰om_n‹mÆized_ªp
[
my_¥i‹ôy
]);

	@viper/concurrentqueue-src/benchmarks/tbb/task_scheduler_init.h

21 #i‚de‡
__TBB_èsk_scheduÀr_öô_H


22 
	#__TBB_èsk_scheduÀr_öô_H


	)

24 
	~"tbb_°ddef.h
"

25 
	~"limôs.h
"

27 
«me•a˚
 
	gtbb
 {

29 
	g°d
::
	tsize_t
 
	t°ack_size_ty≥
;

32 
«me•a˚
 
	göã∫Æ
 {

35 
˛ass
 
	gscheduÀr
;

53 ˛as†
	cèsk_scheduÀr_öô
: 
öã∫Æ
::
no_c›y
 {

54 
	eEx˚±i⁄Pr›ag©i⁄Mode
 {

55 
¥›ag©i⁄_mode_exa˘
 = 1u,

56 
	g¥›ag©i⁄_mode_ˇ±uªd
 = 2u,

57 
	g¥›ag©i⁄_mode_mask
 = 
¥›ag©i⁄_mode_exa˘
 | 
¥›ag©i⁄_mode_ˇ±uªd


59 #i‡
__TBB_SUPPORTS_WORKERS_WAITING_IN_TERMINATE


61 
	gwaô_w‹kîs_ö_ãrmö©e_Êag
 = 128u

66 
	göã∫Æ
::
scheduÀr
* 
my_scheduÀr
;

67 
	gpublic
:

70 c⁄° 
autom©ic
 = -1;

73 c⁄° 
	gde„ºed
 = -2;

87 
__TBB_EXPORTED_METHOD
 
öôülize
–
numbî_of_thªads
=
autom©ic
 );

91 
__TBB_EXPORTED_METHOD
 
öôülize
–
numbî_of_thªads
, 
°ack_size_ty≥
 
thªad_°ack_size
 );

94 
__TBB_EXPORTED_METHOD
 
ãrmö©e
();

97 #i‡
__TBB_SUPPORTS_WORKERS_WAITING_IN_TERMINATE


98 
èsk_scheduÀr_öô
–
numbî_of_thªads
=
autom©ic
, 
°ack_size_ty≥
 
thªad_°ack_size
=0, 
boﬁ
 
waô_w‹kîs_ö_ãrmö©e
 = 
Ál£
 ) : 
my_scheduÀr
(
NULL
)

100 
èsk_scheduÀr_öô
–
numbî_of_thªads
=
autom©ic
, 
°ack_size_ty≥
 
thªad_°ack_size
=0 ) : 
my_scheduÀr
(
NULL
)

110 
__TBB_ASSERT
–!(
thªad_°ack_size
 & 
¥›ag©i⁄_mode_mask
), "Requested stack size isÇotáligned" );

111 #i‡
TBB_USE_EXCEPTIONS


112 
	gthªad_°ack_size
 |
TBB_USE_CAPTURED_EXCEPTION
 ? 
¥›ag©i⁄_mode_ˇ±uªd
 : 
¥›ag©i⁄_mode_exa˘
;

114 #i‡
__TBB_SUPPORTS_WORKERS_WAITING_IN_TERMINATE


115 i‡(
	gwaô_w‹kîs_ö_ãrmö©e
)

116 
	gmy_scheduÀr
 = (
öã∫Æ
::
scheduÀr
*)
waô_w‹kîs_ö_ãrmö©e_Êag
;

118 
öôülize
–
numbî_of_thªads
, 
thªad_°ack_size
 );

122 ~
èsk_scheduÀr_öô
() {

123 if–
	gmy_scheduÀr
 )

124 
ãrmö©e
();

125 
	göã∫Æ
::
pois⁄_poöãr
–
my_scheduÀr
 );

145 
__TBB_EXPORTED_FUNC
 
deÁu…_num_thªads
 ();

148 
boﬁ
 
is_a˘ive
(Ëc⁄° {  
	gmy_scheduÀr
 !
NULL
; }

	@viper/concurrentqueue-src/benchmarks/tbb/task_scheduler_observer.h

21 #i‚de‡
__TBB_èsk_scheduÀr_ob£rvî_H


22 
	#__TBB_èsk_scheduÀr_ob£rvî_H


	)

24 
	~"©omic.h
"

25 #i‡
__TBB_TASK_ARENA


26 
	~"èsk_¨ía.h
"

29 #i‡
__TBB_SCHEDULER_OBSERVER


31 
«me•a˚
 
	gtbb
 {

32 
«me•a˚
 
	göãrÁ˚6
 {

33 
˛ass
 
	gèsk_scheduÀr_ob£rvî
;

35 
«me•a˚
 
	göã∫Æ
 {

37 
˛ass
 
	gob£rvî_¥oxy
;

38 
˛ass
 
	gob£rvî_li°
;

40 ˛as†
	cèsk_scheduÀr_ob£rvî_v3
 {

41 
‰õnd
 
˛ass
 
	gob£rvî_¥oxy
;

42 
‰õnd
 
˛ass
 
	gob£rvî_li°
;

43 
‰õnd
 
˛ass
 
	göãrÁ˚6
::
èsk_scheduÀr_ob£rvî
;

47 
ob£rvî_¥oxy
* 
	gmy_¥oxy
;

51 
	g©omic
<
	göçå_t
> 
	gmy_busy_cou¡
;

53 
	gpublic
:

59 
__TBB_EXPORTED_METHOD
 
ob£rve
–
boﬁ
 
°©e
=
åue
 );

62 
boﬁ
 
is_ob£rvög
(Ëc⁄° { 
	gmy_¥oxy
!=
NULL
;}

65 
èsk_scheduÀr_ob£rvî_v3
(Ë: 
my_¥oxy
(
NULL
Ë{ 
my_busy_cou¡
.
°‹e
<
ªœxed
>(0); }

75 
vútuÆ
 
⁄_scheduÀr_íåy
–
boﬁ
 ) {}

83 
vútuÆ
 
⁄_scheduÀr_exô
–
boﬁ
 ) {}

86 
	gvútuÆ
 ~
èsk_scheduÀr_ob£rvî_v3
(Ë{ if(
	gmy_¥oxy
Ë
ob£rve
(
Ál£
);}

91 #i‡
__TBB_ARENA_OBSERVER


92 
«me•a˚
 
	göãrÁ˚6
 {

93 ˛as†
	cèsk_scheduÀr_ob£rvî
 : 
public
 
öã∫Æ
::
èsk_scheduÀr_ob£rvî_v3
 {

94 
‰õnd
 
˛ass
 
öã∫Æ
::
èsk_scheduÀr_ob£rvî_v3
;

95 
‰õnd
 
˛ass
 
	göã∫Æ
::
ob£rvî_¥oxy
;

96 
‰õnd
 
˛ass
 
	göã∫Æ
::
ob£rvî_li°
;

101 c⁄° 
öçå_t
 
	gv6_åaô
 = (öçå_t)((~(
uöçå_t
)0 >> 1) + 1);

104 
öçå_t
 
	gmy_c⁄ãxt_èg
;

105 íum { 
	gglobÆ_èg
 = 0, 
	gim∂icô_èg
 = 1 };

107 
	gpublic
:

118 
èsk_scheduÀr_ob£rvî
–
boﬁ
 
loˇl
 = 
Ál£
 ) {

119 
my_c⁄ãxt_èg
 = 
loˇl
? 
im∂icô_èg
 : 
globÆ_èg
;

122 #i‡
__TBB_TASK_ARENA


127 
èsk_scheduÀr_ob£rvî
–
èsk_¨ía
 & 
a
) {

128 
	gmy_c⁄ãxt_èg
 = (
öçå_t
)&
a
;

135 
	gvútuÆ
 ~
èsk_scheduÀr_ob£rvî
(Ë{ if(
	gmy_¥oxy
Ë
ob£rve
(
Ál£
); }

140 
ob£rve
–
boﬁ
 
°©e
=
åue
 ) {

141 if–
°©e
 && !
my_¥oxy
 ) {

142 
__TBB_ASSERT
–!
my_busy_cou¡
, "Inconsistent state ofÅask_scheduler_observer instance");

143 
	gmy_busy_cou¡
.
	g°‹e
<
	gªœxed
>(
	gv6_åaô
);

145 
	göã∫Æ
::
èsk_scheduÀr_ob£rvî_v3
::
ob£rve
(
°©e
);

149 íum { 
	gkìp_awake
 = 
Ál£
, 
	gÆlow_¶ìp
 = 
åue
 };

154 
vútuÆ
 
boﬁ
 
may_¶ìp
(Ë{  
	gÆlow_¶ìp
; }

158 
usög
 
	göãrÁ˚6
::
èsk_scheduÀr_ob£rvî
;

160 
	gtbb
::
	töã∫Æ
::
	tèsk_scheduÀr_ob£rvî_v3
 
	tèsk_scheduÀr_ob£rvî
;

	@viper/concurrentqueue-src/benchmarks/tbb/task_stream.h

21 #i‚de‡
_TBB_èsk_°ªam_H


22 
	#_TBB_èsk_°ªam_H


	)

24 
	~"tbb/tbb_°ddef.h
"

25 
	~<deque
>

26 
	~<˛imôs
>

27 
	~"tbb/©omic.h
"

28 
	~"tbb/•ö_muãx.h
"

29 
	~"tbb/tbb_Æloˇt‹.h
"

30 
	~"scheduÀr_comm⁄.h
"

31 
	~"tbb_misc.h
"

33 
«me•a˚
 
	gtbb
 {

34 
«me•a˚
 
	göã∫Æ
 {

39 
	gãm∂©e
< 
ty≥«me
 
	gT
,Åy≥«mê
	gmuãx_t
 >

40 
	squeue_™d_muãx
 {

41 
	g°d
::
	tdeque
< 
	tT
, 
	ttbb_Æloˇt‹
<T> > 
	tqueue_ba£_t
;

43 
queue_ba£_t
 
	gmy_queue
;

44 
muãx_t
 
	gmy_muãx
;

46 
queue_™d_muãx
 (Ë: 
my_queue
(), 
my_muãx
() {}

47 ~
queue_™d_muãx
 () {}

50 c⁄° 
uöçå_t
 
	g⁄e
 = 1;

52 
ölöe
 
£t_⁄e_bô
–
uöçå_t
& 
de°
, 
pos
 ) {

53 
__TBB_ASSERT
–
pos
>=0, 
NULL
 );

54 
__TBB_ASSERT
–
pos
<32, 
NULL
 );

55 
__TBB_AtomicOR
–&
de°
, 
⁄e
<<
pos
 );

58 
ölöe
 
˛ór_⁄e_bô
–
uöçå_t
& 
de°
, 
pos
 ) {

59 
__TBB_ASSERT
–
pos
>=0, 
NULL
 );

60 
__TBB_ASSERT
–
pos
<32, 
NULL
 );

61 
__TBB_AtomicAND
–&
de°
, ~(
⁄e
<<
pos
) );

64 
ölöe
 
boﬁ
 
is_bô_£t
–
uöçå_t
 
vÆ
, 
pos
 ) {

65 
__TBB_ASSERT
–
pos
>=0, 
NULL
 );

66 
__TBB_ASSERT
–
pos
<32, 
NULL
 );

67  (
	gvÆ
 & (
	g⁄e
<<
	gpos
)) != 0;

71 ˛as†
	cèsk_°ªam
 : 
no_c›y
 {

72 
queue_™d_muãx
 <
	tèsk
*, 
	t•ö_muãx
> 
	tœ√_t
;

73 
uöçå_t
 
	gp›uœti⁄
;

74 
	g∑dded
<
	gœ√_t
>* 
	gœ√s
;

75 
	gN
;

77 
	gpublic
:

78 
èsk_°ªam
(Ë: 
p›uœti⁄
(), 
œ√s
()

82 
öôülize
–
n_œ√s
 ) {

83 c⁄° 
	gmax_œ√s
 =

84 #i‡
__TBB_MORE_FIFO_LANES


85 (
p›uœti⁄
Ë* 
CHAR_BIT
;

89 
	gN
 = 
n_œ√s
>=
max_œ√s
 ? max_œ√†:Ç_œ√s>2 ? 1<<(
__TBB_Log2
(n_lanes-1)+1) : 2;

90 
__TBB_ASSERT
–
N
==
max_œ√s
 || N>=
n_œ√s
 && ((N-1)&N)==0, "number ofÜanes miscalculated");

91 
__TBB_ASSERT
–
N
 <(
p›uœti⁄
Ë* 
CHAR_BIT
, 
NULL
 );

92 
	gœ√s
 = 
√w
 
∑dded
<
œ√_t
>[
N
];

93 
__TBB_ASSERT
–!
p›uœti⁄
, 
NULL
 );

96 ~
èsk_°ªam
(Ë{ i‡(
	gœ√s
Ë
	gdñëe
[]Üanes; }

99 
push
–
èsk
* 
sour˚
, 
Fa°R™dom
& 
øndom
 ) {

101 
	gidx
;

103 
	gidx
 = 
øndom
.
gë
(Ë& (
N
-1);

104 
	g•ö_muãx
::
sc›ed_lock
 
lock
;

105 if–
	glock
.
åy_acquúe
(
œ√s
[
idx
].
my_muãx
) ) {

106 
	gœ√s
[
idx
].
	gmy_queue
.
push_back
(
sour˚
);

107 
£t_⁄e_bô
–
p›uœti⁄
, 
idx
 );

114 
èsk
* 
p›
–& 
œ°_u£d_œ√
 ) {

115 
èsk
* 
	gªsu…
 = 
NULL
;

117 
	gidx
 = (
œ°_u£d_œ√
+1)&(
N
-1);

118  ; 
	gp›uœti⁄
; 
	gidx
=(
idx
+1)&(
N
-1) ) {

119 if–
is_bô_£t
–
p›uœti⁄
, 
idx
 ) ) {

120 
œ√_t
& 
œ√
 = 
œ√s
[
idx
];

121 
	g•ö_muãx
::
sc›ed_lock
 
lock
;

122 if–
	glock
.
åy_acquúe
(
œ√
.
my_muãx
Ë&& !
	gœ√
.
	gmy_queue
.
em±y
() ) {

123 
	gªsu…
 = 
œ√
.
my_queue
.
‰⁄t
();

124 
	gœ√
.
	gmy_queue
.
p›_‰⁄t
();

125 if–
	gœ√
.
	gmy_queue
.
em±y
() )

126 
˛ór_⁄e_bô
–
p›uœti⁄
, 
idx
 );

131 
	gœ°_u£d_œ√
 = 
idx
;

132  
	gªsu…
;

136 
boﬁ
 
em±y
() {

137  !
	gp›uœti⁄
;

143 
öçå_t
 
døö
() {

144 
öçå_t
 
	gªsu…
 = 0;

145 
	gi
=0; i<
	gN
; ++i) {

146 
	gœ√_t
& 
	gœ√
 = 
œ√s
[
i
];

147 
	g•ö_muãx
::
sc›ed_lock
 
lock
(
œ√
.
my_muãx
);

148 
	gœ√_t
::
queue_ba£_t
::
ôî©‹
 
ô
=
œ√
.
my_queue
.
begö
();

149 
	gô
!=
œ√
.
my_queue
.
íd
(); ++ô, ++
	gªsu…
)

151 
èsk
* 
	gt
 = *
ô
;

152 
	gtbb
::
èsk
::
de°roy
(*
t
);

154 
	gœ√
.
	gmy_queue
.
˛ór
();

155 
˛ór_⁄e_bô
–
p›uœti⁄
, 
i
 );

157  
	gªsu…
;

	@viper/concurrentqueue-src/benchmarks/tbb/tbb.h

21 #i‚de‡
__TBB_tbb_H


22 
	#__TBB_tbb_H


	)

32 #i‡
TBB_PREVIEW_AGGREGATOR


33 
	~"aggªg©‹.h
"

35 
	~"Æig√d_•a˚.h
"

36 
	~"©omic.h
"

37 
	~"blocked_ønge.h
"

38 
	~"blocked_ønge2d.h
"

39 
	~"blocked_ønge3d.h
"

40 
	~"ˇche_Æig√d_Æloˇt‹.h
"

41 
	~"comböabÀ.h
"

42 
	~"c⁄cuºít_hash_m≠.h
"

43 #i‡
TBB_PREVIEW_CONCURRENT_LRU_CACHE


44 
	~"c⁄cuºít_Ãu_ˇche.h
"

46 
	~"c⁄cuºít_¥i‹ôy_queue.h
"

47 
	~"c⁄cuºít_queue.h
"

48 
	~"c⁄cuºít_un‹dîed_m≠.h
"

49 
	~"c⁄cuºít_un‹dîed_£t.h
"

50 
	~"c⁄cuºít_ve˘‹.h
"

51 
	~"¸ôiˇl_£˘i⁄.h
"

52 
	~"íumîabÀ_thªad_•ecific.h
"

53 
	~"Êow_gøph.h
"

54 
	~"muãx.h
"

55 
	~"nuŒ_muãx.h
"

56 
	~"nuŒ_rw_muãx.h
"

57 
	~"∑øŒñ_do.h
"

58 
	~"∑øŒñ_f‹.h
"

59 
	~"∑øŒñ_f‹_óch.h
"

60 
	~"∑øŒñ_övoke.h
"

61 
	~"∑øŒñ_ªdu˚.h
"

62 
	~"∑øŒñ_sˇn.h
"

63 
	~"∑øŒñ_s‹t.h
"

64 
	~"∑πôi⁄î.h
"

65 
	~"pùñöe.h
"

66 
	~"queuög_muãx.h
"

67 
	~"queuög_rw_muãx.h
"

68 
	~"ªadî_wrôî_lock.h
"

69 
	~"ªcursive_muãx.h
"

70 
	~"•ö_muãx.h
"

71 
	~"•ö_rw_muãx.h
"

72 
	~"èsk.h
"

73 
	~"èsk_¨ía.h
"

74 
	~"èsk_group.h
"

75 
	~"èsk_scheduÀr_öô.h
"

76 
	~"èsk_scheduÀr_ob£rvî.h
"

77 
	~"tbb_Æloˇt‹.h
"

78 
	~"tbb_ex˚±i⁄.h
"

79 
	~"tbb_thªad.h
"

80 
	~"tick_cou¡.h
"

	@viper/concurrentqueue-src/benchmarks/tbb/tbb_allocator.h

21 #i‚de‡
__TBB_tbb_Æloˇt‹_H


22 
	#__TBB_tbb_Æloˇt‹_H


	)

24 
	~"tbb_°ddef.h
"

25 
	~<√w
>

26 #i‡
__TBB_ALLOCATOR_CONSTRUCT_VARIADIC


27 
	~<utûôy
>

30 #i‡!
TBB_USE_EXCEPTIONS
 && 
_MSC_VER


32 #¥agm®
w¨nög
 (
push
)

33 #¥agm®
w¨nög
 (
dißbÀ
: 4530)

36 
	~<c°rög
>

38 #i‡!
TBB_USE_EXCEPTIONS
 && 
_MSC_VER


39 #¥agm®
w¨nög
 (
p›
)

42 
«me•a˚
 
	gtbb
 {

45 
«me•a˚
 
	göã∫Æ
 {

49 
__TBB_EXPORTED_FUNC
 
dóŒoˇã_vü_h™dÀr_v3
–*
p
 );

53 * 
__TBB_EXPORTED_FUNC
 
Æloˇã_vü_h™dÀr_v3
–
size_t
 
n
 );

56 
boﬁ
 
__TBB_EXPORTED_FUNC
 
is_mÆloc_u£d_v3
();

60 #i‡
_MSC_VER
 && !
deföed
(
__INTEL_COMPILER
)

62 #¥agm®
w¨nög
 (
push
)

63 #¥agm®
w¨nög
 (
dißbÀ
: 4100)

72 
	gãm∂©e
<
ty≥«me
 
	gT
>

73 ˛as†
	ctbb_Æloˇt‹
 {

74 
	gpublic
:

75 
ty≥«me
 
	töã∫Æ
::
	tÆloˇt‹_ty≥
<
	tT
>::
	tvÆue_ty≥
 value_type;

76 
vÆue_ty≥
* 
	tpoöãr
;

77 c⁄° 
	tvÆue_ty≥
* 
	tc⁄°_poöãr
;

78 
	gvÆue_ty≥
& 
	tª„ªn˚
;

79 c⁄° 
	tvÆue_ty≥
& 
	tc⁄°_ª„ªn˚
;

80 
size_t
 
	tsize_ty≥
;

81 
±rdiff_t
 
	tdif„ªn˚_ty≥
;

82 
	gãm∂©e
<
ty≥«me
 
	gU
> 
	sªböd
 {

83 
	gtbb_Æloˇt‹
<
	tU
> 
	tŸhî
;

87 
	emÆloc_ty≥
 {

88 
	gsˇœbÀ
,

89 
	g°™d¨d


92 
tbb_Æloˇt‹
(Ë
throw
() {}

93 
tbb_Æloˇt‹
–c⁄°Åbb_Æloˇt‹& ) 
throw
() {}

94 
	gãm∂©e
<
ty≥«me
 
	gU
> 
tbb_Æloˇt‹
(c⁄°Åbb_Æloˇt‹<
U
>&Ë
throw
() {}

96 
poöãr
 
addªss
(
ª„ªn˚
 
x
Ëc⁄° { &
	gx
;}

97 
c⁄°_poöãr
 
addªss
(
c⁄°_ª„ªn˚
 
x
Ëc⁄° { &
	gx
;}

100 
poöãr
 
Æloˇã
–
size_ty≥
 
n
, const * = 0) {

101  
poöãr
(
öã∫Æ
::
Æloˇã_vü_h™dÀr_v3
–
n
 * (
vÆue_ty≥
) ));

105 
dóŒoˇã
–
poöãr
 
p
, 
size_ty≥
 ) {

106 
	göã∫Æ
::
dóŒoˇã_vü_h™dÀr_v3
(
p
);

110 
size_ty≥
 
max_size
(Ëc⁄° 
throw
() {

111 
size_ty≥
 
	gmax
 = 
°©ic_ˇ°
<size_ty≥>(-1Ë/  (
vÆue_ty≥
);

112  (
	gmax
 > 0 ? max : 1);

116 #i‡
__TBB_ALLOCATOR_CONSTRUCT_VARIADIC


117 
	gãm∂©e
<
ty≥«me
 
	gU
, 
	gty≥«me
... 
	gArgs
>

118 
c⁄°ru˘
(
U
 *
p
, 
Args
&&... 
¨gs
)

119 { ::
√w
((*)
p
Ë
U
(
°d
::
f‹w¨d
<
Args
>(
¨gs
)...); }

121 #i‡
__TBB_CPP11_RVALUE_REF_PRESENT


122 
c⁄°ru˘
–
poöãr
 
p
, 
vÆue_ty≥
&& 
vÆue
 ) {::
√w
((*)’)ËvÆue_ty≥(
°d
::
move
(value));}

124 
c⁄°ru˘
–
poöãr
 
p
, c⁄° 
vÆue_ty≥
& 
vÆue
 ) {::
√w
((*)(p)) value_type(value);}

128 
de°roy
–
poöãr
 
p
 ) {
	gp
->~
vÆue_ty≥
();}

131 
mÆloc_ty≥
 
Æloˇt‹_ty≥
() {

132  
	göã∫Æ
::
is_mÆloc_u£d_v3
(Ë? 
°™d¨d
 : 
sˇœbÀ
;

136 #i‡
_MSC_VER
 && !
	$deföed
(
__INTEL_COMPILER
)

137 #¥agm®
	$w¨nög
 (
p›
)

142 
ãm∂©e
<>

143 
˛ass
 
tbb_Æloˇt‹
<> {

144 
public
:

145 * 
	tpoöãr
;

146 c⁄° * 
	tc⁄°_poöãr
;

147 
	tvÆue_ty≥
;

148 
ãm∂©e
<
ty≥«me
 
U
> 
	sªböd
 {

149 
tbb_Æloˇt‹
<
	tU
> 
	tŸhî
;

151 
	}
};

153 
	gãm∂©e
<
ty≥«me
 
	gT
,Åy≥«mê
	gU
>

154 
ölöe
 
boﬁ
 
	g›î©‹
==–c⁄° 
tbb_Æloˇt‹
<
T
>&, c⁄° 
	gtbb_Æloˇt‹
<
	gU
>& ) { 
	gåue
;}

156 
	gãm∂©e
<
ty≥«me
 
	gT
,Åy≥«mê
	gU
>

157 
ölöe
 
boﬁ
 
	g›î©‹
!=–c⁄° 
tbb_Æloˇt‹
<
T
>&, c⁄° 
	gtbb_Æloˇt‹
<
	gU
>& ) { 
	gÁl£
;}

165 
	gãm∂©e
 <
ty≥«me
 
	gT
,Åem∂©e<ty≥«mê
	gX
> 
˛ass
 
	gAŒoˇt‹
 = 
tbb_Æloˇt‹
>

166 
˛ass
 
zîo_Æloˇt‹
 : 
public
 
AŒoˇt‹
<
T
>

168 
public
:

169 
AŒoˇt‹
<
	tT
> 
	tba£_Æloˇt‹_ty≥
;

170 
ty≥«me
 
	tba£_Æloˇt‹_ty≥
::
	tvÆue_ty≥
 value_type;

171 
ty≥«me
 
	tba£_Æloˇt‹_ty≥
::
	tpoöãr
Öointer;

172 
ty≥«me
 
	tba£_Æloˇt‹_ty≥
::
	tc⁄°_poöãr
 const_pointer;

173 
ty≥«me
 
	tba£_Æloˇt‹_ty≥
::
	tª„ªn˚
Ñeference;

174 
ty≥«me
 
	tba£_Æloˇt‹_ty≥
::
	tc⁄°_ª„ªn˚
 const_reference;

175 
ty≥«me
 
	tba£_Æloˇt‹_ty≥
::
	tsize_ty≥
 size_type;

176 
ty≥«me
 
	tba£_Æloˇt‹_ty≥
::
	tdif„ªn˚_ty≥
 difference_type;

177 
	gãm∂©e
<
ty≥«me
 
	gU
> 
	sªböd
 {

178 
	gzîo_Æloˇt‹
<
	tU
, 
	tAŒoˇt‹
> 
	tŸhî
;

181 
zîo_Æloˇt‹
(Ë
throw
() { }

182 
zîo_Æloˇt‹
(c⁄° zîo_Æloˇt‹ &
a
Ë
throw
(Ë: 
ba£_Æloˇt‹_ty≥
(á ) { }

183 
ãm∂©e
<
ty≥«me
 
U
>

184 
zîo_Æloˇt‹
(c⁄° zîo_Æloˇt‹<
U
> &
a
Ë
throw
(Ë: 
ba£_Æloˇt‹_ty≥
–
AŒoˇt‹
<U>(á ) ) { }

186 
poöãr
 
Æloˇã
(c⁄° 
size_ty≥
 
n
, c⁄° *
höt
 = 0 ) {

187 
poöãr
 
±r
 = 
ba£_Æloˇt‹_ty≥
::
Æloˇã
–
n
, 
höt
 );

188 
	g°d
::
mem£t
–
±r
, 0, 
n
 * (
vÆue_ty≥
) );

189  
	g±r
;

195 
	gãm∂©e
<ãm∂©e<
ty≥«me
 
	gT
> 
˛ass
 
	gAŒoˇt‹
>

196 
˛ass
 
	gzîo_Æloˇt‹
<, 
	gAŒoˇt‹
> : 
public
 
AŒoˇt‹
<> {

197 
public
:

198 
AŒoˇt‹
<> 
	tba£_Æloˇt‹_ty≥
;

199 
ty≥«me
 
	tba£_Æloˇt‹_ty≥
::
	tvÆue_ty≥
 value_type;

200 
ty≥«me
 
	tba£_Æloˇt‹_ty≥
::
	tpoöãr
Öointer;

201 
ty≥«me
 
	tba£_Æloˇt‹_ty≥
::
	tc⁄°_poöãr
 const_pointer;

202 
	gãm∂©e
<
ty≥«me
 
	gU
> 
	sªböd
 {

203 
	gzîo_Æloˇt‹
<
	tU
, 
	tAŒoˇt‹
> 
	tŸhî
;

207 
	gãm∂©e
<
ty≥«me
 
	gT1
,Åem∂©e<ty≥«mê
	gX1
> 
˛ass
 
	gB1
,Åy≥«mê
	gT2
,Åem∂©e<ty≥«mê
	gX2
> cœs†
	gB2
>

208 
ölöe
 
boﬁ
 
	g›î©‹
==–c⁄° 
zîo_Æloˇt‹
<
T1
,
	gB1
> &
	ga
, c⁄° 
	gzîo_Æloˇt‹
<
	gT2
,
	gB2
> &
	gb
) {

209  
	g°©ic_ˇ°
< 
	gB1
<
	gT1
> >(
	ga
Ë=
°©ic_ˇ°
< 
B2
<
T2
> >(
b
);

211 
	gãm∂©e
<
ty≥«me
 
	gT1
,Åem∂©e<ty≥«mê
	gX1
> 
˛ass
 
	gB1
,Åy≥«mê
	gT2
,Åem∂©e<ty≥«mê
	gX2
> cœs†
	gB2
>

212 
ölöe
 
boﬁ
 
	g›î©‹
!=–c⁄° 
zîo_Æloˇt‹
<
T1
,
	gB1
> &
	ga
, c⁄° 
	gzîo_Æloˇt‹
<
	gT2
,
	gB2
> &
	gb
) {

213  
	g°©ic_ˇ°
< 
	gB1
<
	gT1
> >(
	ga
Ë!
°©ic_ˇ°
< 
B2
<
T2
> >(
b
);

	@viper/concurrentqueue-src/benchmarks/tbb/tbb_assert_impl.h

27 
	~<c°dlib
>

28 
	~<°dio.h
>

29 
	~<°rög.h
>

30 
	~<°d¨g.h
>

31 #i‡
_MSC_VER


32 
	~<¸tdbg.h
>

35 #i‡
_MSC_VER
 >= 1400

36 
	#__TBB_EXPORTED_FUNC
 
__cde˛


	)

38 
	#__TBB_EXPORTED_FUNC


	)

41 
usög
 
«me•a˚
 
	g°d
;

43 #i‡
__TBBMALLOC_BUILD


44 
«me•a˚
 
	grml
 {Çame•a˚ 
	göã∫Æ
 {

46 
«me•a˚
 
	gtbb
 {

49 (*
	gas£πi⁄_h™dÀr_ty≥
)–c⁄° * 
	tfûíame
, 
	tlöe
, c⁄° * 
	tex¥essi⁄
, c⁄° * 
	tcommít
 );

51 
as£πi⁄_h™dÀr_ty≥
 
	gas£πi⁄_h™dÀr
;

53 
as£πi⁄_h™dÀr_ty≥
 
__TBB_EXPORTED_FUNC
 
£t_as£πi⁄_h™dÀr
–as£πi⁄_h™dÀr_ty≥ 
√w_h™dÀr
 ) {

54 
as£πi⁄_h™dÀr_ty≥
 
	gﬁd_h™dÀr
 = 
as£πi⁄_h™dÀr
;

55 
	gas£πi⁄_h™dÀr
 = 
√w_h™dÀr
;

56  
	gﬁd_h™dÀr
;

59 
__TBB_EXPORTED_FUNC
 
as£πi⁄_Áûuª
–c⁄° * 
fûíame
, 
löe
, c⁄° * 
ex¥essi⁄
, c⁄° * 
commít
 ) {

60 if–
as£πi⁄_h™dÀr_ty≥
 
	ga
 = 
as£πi⁄_h™dÀr
 ) {

61 (*
a
)(
fûíame
,
löe
,
ex¥essi⁄
,
commít
);

63 
boﬁ
 
	gÆªady_Áûed
;

64 if–!
	gÆªady_Áûed
 ) {

65 
	gÆªady_Áûed
 = 
åue
;

66 
Ârötf
–
°dîr
, "Assertion %s failed onÜine %d of file %s\n",

67 
ex¥essi⁄
, 
löe
, 
fûíame
 );

68 if–
	gcommít
 )

69 
Ârötf
–
°dîr
, "Dëaûed des¸ùti⁄: %s\n", 
commít
 );

70 #i‡
_MSC_VER
 && 
_DEBUG


71 if(1 =
_CπDbgRï‹t
(
_CRT_ASSERT
, 
fûíame
, 
löe
, "tbb_debug.dŒ", "%s\r\n%s", 
ex¥essi⁄
, 
commít
?comment:""))

72 
_CπDbgBªak
();

74 
fÊush
(
°dîr
);

75 
ab‹t
();

81 #i‡
deföed
(
_MSC_VER
)&&_MSC_VER<1400

82 
	#v¢¥ötf
 
_v¢¥ötf


	)

85 #i‡!
__TBBMALLOC_BUILD


86 
«me•a˚
 
	göã∫Æ
 {

88 
__TBB_EXPORTED_FUNC
 
ru¡ime_w¨nög
–c⁄° * 
f‹m©
, ... )

90 
	g°r
[1024]; 
mem£t
(
°r
, 0, 1024);

91 
va_li°
 
	g¨gs
; 
va_°¨t
(
¨gs
, 
f‹m©
);

92 
v¢¥ötf
–
°r
, 1024-1, 
f‹m©
, 
¨gs
);

93 
va_íd
(
¨gs
);

94 
Ârötf
–
°dîr
, "TBB W¨nög: %s\n", 
°r
);

99 #i‡
__TBBMALLOC_BUILD


	@viper/concurrentqueue-src/benchmarks/tbb/tbb_config.h

21 #i‚de‡
__TBB_tbb_c⁄fig_H


22 
	#__TBB_tbb_c⁄fig_H


	)

34 #i‡!
deföed
(
__TBB_SYMBOL
Ë&& 
__APPLE__


35 
	~<c°ddef
>

39 
	#__TBB_GCC_VERSION
 (
__GNUC__
 * 10000 + 
__GNUC_MINOR__
 * 100 + 
__GNUC_PATCHLEVEL__
)

	)

41 #i‡
__˛™g__


43 
	#__TBB_CLANG_VERSION
 (
__˛™g_maj‹__
 * 10000 + 
__˛™g_mö‹__
 * 100 + 
__˛™g_∑tchÀvñ__
)

	)

48 #i‡
_WIN32
||
_WIN64


49 #i‡
deföed
(
_M_X64
)||deföed(
__x86_64__
)

50 
	#__TBB_x86_64
 1

	)

51 #ñi‡
deföed
(
_M_IA64
)

52 
	#__TBB_ùf
 1

	)

53 #ñi‡
deföed
(
_M_IX86
)||deföed(
__i386__
)

54 
	#__TBB_x86_32
 1

	)

56 
	#__TBB_gíîic_¨ch
 1

	)

59 #i‡!
__löux__
 && !
__APPLE__


60 
	#__TBB_gíîic_os
 1

	)

62 #i‡
__x86_64__


63 
	#__TBB_x86_64
 1

	)

64 #ñi‡
__ü64__


65 
	#__TBB_ùf
 1

	)

66 #ñi‡
__i386__
||
__i386


67 
	#__TBB_x86_32
 1

	)

69 
	#__TBB_gíîic_¨ch
 1

	)

73 #i‡
__MIC__
 || 
__MIC2__


74 
	#__TBB_DEFINE_MIC
 1

	)

77 
	#__TBB_TSX_AVAILABLE
 (
__TBB_x86_32
 || 
__TBB_x86_64
Ë&& !
__TBB_DEFINE_MIC


	)

81 #i‡
__INTEL_COMPILER
 =9999 && 
__INTEL_COMPILER_BUILD_DATE
 == 20110811

83 #unde‡
__INTEL_COMPILER


84 
	#__INTEL_COMPILER
 1210

	)

87 #i‡
__TBB_GCC_VERSION
 >40400 && !
deföed
(
__INTEL_COMPILER
)

89 
	#__TBB_GCC_WARNING_SUPPRESSION_PRESENT
 1

	)

103 #i‡
__INTEL_COMPILER


109 #i‚de‡
__INTEL_CXX11_MODE__


110 
	#__INTEL_CXX11_MODE__
 ((
_MSC_VER
 && 
__STDC_HOSTED__
Ë|| 
__GXX_EXPERIMENTAL_CXX0X__
)

	)

113 
	#__TBB_CPP11_VARIADIC_TEMPLATES_PRESENT
 (
__INTEL_CXX11_MODE__
 && 
__VARIADIC_TEMPLATES
)

	)

116 
	#__TBB_CPP11_RVALUE_REF_PRESENT
 ((
__GXX_EXPERIMENTAL_CXX0X__
 && (
__TBB_GCC_VERSION
 >40300 || 
_LIBCPP_VERSION
Ë|| 
_MSC_VER
 >1600Ë&& 
__INTEL_COMPILER
 >1200)

	)

117 #i‡ 
_MSC_VER
 >= 1600

118 
	#__TBB_EXCEPTION_PTR_PRESENT
 ( 
__INTEL_COMPILER
 > 1300 \

120 || (
__INTEL_COMPILER
 =1300 && 
__INTEL_COMPILER_BUILD_DATE
 >= 20120530) \

121 || (
__INTEL_COMPILER
 =1210 && 
__INTEL_COMPILER_BUILD_DATE
 >20120410Ë)

	)

125 #ñi‡
__TBB_GCC_VERSION
 >= 40404 && __TBB_GCC_VERSION < 40600

126 
	#__TBB_EXCEPTION_PTR_PRESENT
 (
__GXX_EXPERIMENTAL_CXX0X__
 && 
__INTEL_COMPILER
 >1200)

	)

127 #ñi‡
__TBB_GCC_VERSION
 >= 40600

128 
	#__TBB_EXCEPTION_PTR_PRESENT
 (
__GXX_EXPERIMENTAL_CXX0X__
 && 
__INTEL_COMPILER
 >1300)

	)

130 
	#__TBB_EXCEPTION_PTR_PRESENT
 0

	)

132 
	#__TBB_MAKE_EXCEPTION_PTR_PRESENT
 (
_MSC_VER
 >1700 || (
__GXX_EXPERIMENTAL_CXX0X__
 && 
__TBB_GCC_VERSION
 >40600))

	)

133 
	#__TBB_STATIC_ASSERT_PRESENT
 (
__INTEL_CXX11_MODE__
 || 
_MSC_VER
 >1600)

	)

134 
	#__TBB_CPP11_TUPLE_PRESENT
 (
_MSC_VER
 >1600 || (
__GXX_EXPERIMENTAL_CXX0X__
 && 
__TBB_GCC_VERSION
 >40300))

	)

136 #i‡(
__˛™g__
 && 
__INTEL_COMPILER
 > 1400)

137 #i‡(
__has_„©uª
(
__cxx_gíîÆized_öôülizîs__
Ë&& 
__has_ö˛ude
(<
öôülizî_li°
>))

138 
	#__TBB_INITIALIZER_LISTS_PRESENT
 1

	)

142 
	#__TBB_INITIALIZER_LISTS_PRESENT
 
__INTEL_CXX11_MODE__
 && 
__INTEL_COMPILER
 >1400 && (
_MSC_VER
 >1800 || 
__TBB_GCC_VERSION
 >40400 || 
_LIBCPP_VERSION
)

	)

145 
	#__TBB_CONSTEXPR_PRESENT
 
__INTEL_CXX11_MODE__
 && 
__INTEL_COMPILER
 >1400

	)

146 
	#__TBB_DEFAULTED_AND_DELETED_FUNC_PRESENT
 
__INTEL_CXX11_MODE__
 && 
__INTEL_COMPILER
 >1200

	)

148 
	#__TBB_NOEXCEPT_PRESENT
 
__INTEL_CXX11_MODE__
 && 
__INTEL_COMPILER
 >1300 && (
__TBB_GCC_VERSION
 >40600 || 
_LIBCPP_VERSION
 || 
_MSC_VER
)

	)

149 
	#__TBB_CPP11_STD_BEGIN_END_PRESENT
 (
_MSC_VER
 >1700 || 
__GXX_EXPERIMENTAL_CXX0X__
 && 
__INTEL_COMPILER
 >1310 && (
__TBB_GCC_VERSION
 >40600 || 
_LIBCPP_VERSION
))

	)

150 
	#__TBB_CPP11_AUTO_PRESENT
 (
_MSC_VER
 >1600 || 
__GXX_EXPERIMENTAL_CXX0X__
 && 
__INTEL_COMPILER
 >1210)

	)

151 
	#__TBB_CPP11_DECLTYPE_PRESENT
 (
_MSC_VER
 >1600 || 
__GXX_EXPERIMENTAL_CXX0X__
 && 
__INTEL_COMPILER
 >1210)

	)

152 #ñi‡
__˛™g__


156 
	#__TBB_CPP11_VARIADIC_TEMPLATES_PRESENT
 (
	`__has_„©uª
(
__cxx_v¨üdic_ãm∂©es__
))

	)

157 
	#__TBB_CPP11_RVALUE_REF_PRESENT
 (
	`__has_„©uª
(
__cxx_rvÆue_ª„ªn˚s__
Ë&& (
__TBB_GCC_VERSION
 >40300 || 
_LIBCPP_VERSION
))

	)

159 
	#__TBB_EXCEPTION_PTR_PRESENT
 (
__˝lu•lus
 >201103L && 
_LIBCPP_VERSION
)

	)

160 
	#__TBB_MAKE_EXCEPTION_PTR_PRESENT
 (
__˝lu•lus
 >201103L && 
_LIBCPP_VERSION
)

	)

161 
	#__TBB_STATIC_ASSERT_PRESENT
 
	`__has_„©uª
(
__cxx_°©ic_as£π__
)

	)

164 #i‡(
__GXX_EXPERIMENTAL_CXX0X__
 && 
__has_ö˛ude
(<
tu∂e
>))

165 
	#__TBB_CPP11_TUPLE_PRESENT
 1

	)

167 #i‡(
__has_„©uª
(
__cxx_gíîÆized_öôülizîs__
Ë&& 
__has_ö˛ude
(<
öôülizî_li°
>))

168 
	#__TBB_INITIALIZER_LISTS_PRESENT
 1

	)

170 
	#__TBB_CONSTEXPR_PRESENT
 
	`__has_„©uª
(
__cxx_c⁄°ex¥__
)

	)

171 
	#__TBB_DEFAULTED_AND_DELETED_FUNC_PRESENT
 (
	`__has_„©uª
(
__cxx_deÁu…ed_fun˘i⁄s__
Ë&& __has_„©uª(
__cxx_dñëed_fun˘i⁄s__
))

	)

173 
	#__TBB_NOEXCEPT_PRESENT
 (
__˝lu•lus
 >201103L)

	)

174 
	#__TBB_CPP11_STD_BEGIN_END_PRESENT
 (
	`__has_„©uª
(
__cxx_ønge_f‹__
Ë&& 
_LIBCPP_VERSION
)

	)

175 
	#__TBB_CPP11_AUTO_PRESENT
 
	`__has_„©uª
(
__cxx_auto_ty≥__
)

	)

176 
	#__TBB_CPP11_DECLTYPE_PRESENT
 
	`__has_„©uª
(
__cxx_de˛ty≥__
)

	)

177 #ñi‡
__GNUC__


178 
	#__TBB_CPP11_VARIADIC_TEMPLATES_PRESENT
 
__GXX_EXPERIMENTAL_CXX0X__


	)

179 
	#__TBB_CPP11_RVALUE_REF_PRESENT
 
__GXX_EXPERIMENTAL_CXX0X__


	)

183 
	#__TBB_EXCEPTION_PTR_PRESENT
 (
__GXX_EXPERIMENTAL_CXX0X__
 && 
__TBB_GCC_VERSION
 >40404 && 
__GCC_HAVE_SYNC_COMPARE_AND_SWAP_4
)

	)

184 
	#__TBB_MAKE_EXCEPTION_PTR_PRESENT
 (
__GXX_EXPERIMENTAL_CXX0X__
 && 
__TBB_GCC_VERSION
 >40600)

	)

185 
	#__TBB_STATIC_ASSERT_PRESENT
 (
__GXX_EXPERIMENTAL_CXX0X__
 && 
__TBB_GCC_VERSION
 >40300)

	)

186 
	#__TBB_CPP11_TUPLE_PRESENT
 (
__GXX_EXPERIMENTAL_CXX0X__
 && 
__TBB_GCC_VERSION
 >40300)

	)

187 
	#__TBB_INITIALIZER_LISTS_PRESENT
 (
__GXX_EXPERIMENTAL_CXX0X__
 && 
__TBB_GCC_VERSION
 >40400)

	)

189 
	#__TBB_CONSTEXPR_PRESENT
 (
__GXX_EXPERIMENTAL_CXX0X__
 && 
__TBB_GCC_VERSION
 >40400)

	)

190 
	#__TBB_DEFAULTED_AND_DELETED_FUNC_PRESENT
 (
__GXX_EXPERIMENTAL_CXX0X__
 && 
__TBB_GCC_VERSION
 >40400)

	)

191 
	#__TBB_NOEXCEPT_PRESENT
 (
__GXX_EXPERIMENTAL_CXX0X__
 && 
__TBB_GCC_VERSION
 >40600)

	)

192 
	#__TBB_CPP11_STD_BEGIN_END_PRESENT
 (
__GXX_EXPERIMENTAL_CXX0X__
 && 
__TBB_GCC_VERSION
 >40600)

	)

193 
	#__TBB_CPP11_AUTO_PRESENT
 (
__GXX_EXPERIMENTAL_CXX0X__
 && 
__TBB_GCC_VERSION
 >40400)

	)

194 
	#__TBB_CPP11_DECLTYPE_PRESENT
 (
__GXX_EXPERIMENTAL_CXX0X__
 && 
__TBB_GCC_VERSION
 >40400)

	)

195 #ñi‡
_MSC_VER


196 
	#__TBB_CPP11_VARIADIC_TEMPLATES_PRESENT
 (
_MSC_VER
 >1800)

	)

197 
	#__TBB_CPP11_RVALUE_REF_PRESENT
 (
_MSC_VER
 >1600)

	)

198 
	#__TBB_EXCEPTION_PTR_PRESENT
 (
_MSC_VER
 >1600)

	)

199 
	#__TBB_STATIC_ASSERT_PRESENT
 (
_MSC_VER
 >1600)

	)

200 
	#__TBB_MAKE_EXCEPTION_PTR_PRESENT
 (
_MSC_VER
 >1700)

	)

201 
	#__TBB_CPP11_TUPLE_PRESENT
 (
_MSC_VER
 >1600)

	)

202 
	#__TBB_INITIALIZER_LISTS_PRESENT
 (
_MSC_VER
 >1800)

	)

203 
	#__TBB_CONSTEXPR_PRESENT
 0

	)

204 
	#__TBB_DEFAULTED_AND_DELETED_FUNC_PRESENT
 (
_MSC_VER
 >1800)

	)

205 
	#__TBB_NOEXCEPT_PRESENT
 0

	)

206 
	#__TBB_CPP11_STD_BEGIN_END_PRESENT
 (
_MSC_VER
 >1700)

	)

207 
	#__TBB_CPP11_AUTO_PRESENT
 (
_MSC_VER
 >1600)

	)

208 
	#__TBB_CPP11_DECLTYPE_PRESENT
 (
_MSC_VER
 >1600)

	)

210 
	#__TBB_CPP11_VARIADIC_TEMPLATES_PRESENT
 0

	)

211 
	#__TBB_CPP11_RVALUE_REF_PRESENT
 0

	)

212 
	#__TBB_EXCEPTION_PTR_PRESENT
 0

	)

213 
	#__TBB_STATIC_ASSERT_PRESENT
 0

	)

214 
	#__TBB_MAKE_EXCEPTION_PTR_PRESENT
 0

	)

215 
	#__TBB_CPP11_TUPLE_PRESENT
 0

	)

216 
	#__TBB_INITIALIZER_LISTS_PRESENT
 0

	)

217 
	#__TBB_CONSTEXPR_PRESENT
 0

	)

218 
	#__TBB_DEFAULTED_AND_DELETED_FUNC_PRESENT
 0

	)

219 
	#__TBB_NOEXCEPT_PRESENT
 0

	)

220 
	#__TBB_CPP11_STD_BEGIN_END_PRESENT
 0

	)

221 
	#__TBB_CPP11_AUTO_PRESENT
 0

	)

222 
	#__TBB_CPP11_DECLTYPE_PRESENT
 0

	)

227 
	#__TBB_CPP11_TYPE_PROPERTIES_PRESENT
 (
_LIBCPP_VERSION
 || 
_MSC_VER
 >1700)

	)

228 
	#__TBB_TR1_TYPE_PROPERTIES_IN_STD_PRESENT
 (
__GXX_EXPERIMENTAL_CXX0X__
 && 
__TBB_GCC_VERSION
 >40300 || 
_MSC_VER
 >1600)

	)

230 
	#__TBB_ALLOCATOR_TRAITS_PRESENT
 (
__˝lu•lus
 >201103L && 
_LIBCPP_VERSION
 || 
_MSC_VER
 >= 1700 || \

231 
__GXX_EXPERIMENTAL_CXX0X__
 && 
__TBB_GCC_VERSION
 >40700 && !(__TBB_GCC_VERSION =40700 && 
__TBB_DEFINE_MIC
) \

232 )

	)

236 #i‡
__INTEL_COMPILER
 && 
__GNUC__
 && 
__TBB_EXCEPTION_PTR_PRESENT
 && !
deföed
(
__GCC_HAVE_SYNC_COMPARE_AND_SWAP_4
)

237 
	#__GCC_HAVE_SYNC_COMPARE_AND_SWAP_4
 1

	)

241 #i‡
__MINGW32__
 && 
__TBB_EXCEPTION_PTR_PRESENT
 && !
deföed
(
_GLIBCXX_ATOMIC_BUILTINS_4
)

242 
	#_GLIBCXX_ATOMIC_BUILTINS_4


	)

245 #i‡
__GNUC__
 || 
__SUNPRO_CC
 || 
__IBMCPP__


247 
	#__TBB_ATTRIBUTE_ALIGNED_PRESENT
 1

	)

248 #ñi‡
_MSC_VER
 && (_MSC_VER >1300 || 
__INTEL_COMPILER
)

249 
	#__TBB_DECLSPEC_ALIGN_PRESENT
 1

	)

255 #i‡
__TBB_GCC_VERSION
 >40306 || 
__INTEL_COMPILER
 >= 1200

257 
	#__TBB_GCC_BUILTIN_ATOMICS_PRESENT
 1

	)

260 #i‡
__INTEL_COMPILER
 >= 1200

262 
	#__TBB_ICC_BUILTIN_ATOMICS_PRESENT
 1

	)

265 
	#__TBB_TSX_INTRINSICS_PRESENT
 ((
__RTM__
 || 
_MSC_VER
>=1700 || 
__INTEL_COMPILER
>=1300Ë&& !
__TBB_DEFINE_MIC
 && !
__ANDROID__
)

	)

269 #i‚de‡
TBB_USE_DEBUG


270 #ifde‡
_DEBUG


271 
	#TBB_USE_DEBUG
 
_DEBUG


	)

273 
	#TBB_USE_DEBUG
 0

	)

277 #i‚de‡
TBB_USE_ASSERT


278 
	#TBB_USE_ASSERT
 
TBB_USE_DEBUG


	)

281 #i‚de‡
TBB_USE_THREADING_TOOLS


282 
	#TBB_USE_THREADING_TOOLS
 
TBB_USE_DEBUG


	)

285 #i‚de‡
TBB_USE_PERFORMANCE_WARNINGS


286 #ifde‡
TBB_PERFORMANCE_WARNINGS


287 
	#TBB_USE_PERFORMANCE_WARNINGS
 
TBB_PERFORMANCE_WARNINGS


	)

289 
	#TBB_USE_PERFORMANCE_WARNINGS
 
TBB_USE_DEBUG


	)

293 #i‡!
deföed
(
__EXCEPTIONS
Ë&& !deföed(
_CPPUNWIND
Ë&& !deföed(
__SUNPRO_CC
Ë|| deföed(
_XBOX
)

294 #i‡
TBB_USE_EXCEPTIONS


295 #îr‹ 
Compû©i⁄
 
£âögs
 dÿ
nŸ
 
suµ‹t
 
ex˚±i⁄
 
h™dlög
. 
PÀa£
 dÿnŸ 
£t
 
TBB_USE_EXCEPTIONS
 
ma¸o
 
‹
 së 
ô
 
to
 0.

296 #ñi‡!
deföed
(
TBB_USE_EXCEPTIONS
)

297 
	#TBB_USE_EXCEPTIONS
 0

	)

299 #ñi‡!
deföed
(
TBB_USE_EXCEPTIONS
)

300 #i‡
__TBB_DEFINE_MIC


301 
	#TBB_USE_EXCEPTIONS
 0

	)

303 
	#TBB_USE_EXCEPTIONS
 1

	)

305 #ñi‡
TBB_USE_EXCEPTIONS
 && 
__TBB_DEFINE_MIC


306 #îr‹ 
PÀa£
 dÿ
nŸ
 
£t
 
TBB_USE_EXCEPTIONS
 
ma¸o
 
‹
 së 
ô
 
to
 0.

309 #i‚de‡
TBB_IMPLEMENT_CPP0X


311 #i‡
__GNUC__
==4 && 
__GNUC_MINOR__
>=4 && 
__GXX_EXPERIMENTAL_CXX0X__


312 
	#TBB_IMPLEMENT_CPP0X
 0

	)

313 #ñi‡
__˛™g__
 && 
__˝lu•lus
 >= 201103L

316 #i‡
__has_ö˛ude
(<
thªad
>Ë|| __has_ö˛ude(<
c⁄dôi⁄_v¨übÀ
>)

317 
	#TBB_IMPLEMENT_CPP0X
 0

	)

319 
	#TBB_IMPLEMENT_CPP0X
 1

	)

321 #ñi‡
_MSC_VER
>=1700

322 
	#TBB_IMPLEMENT_CPP0X
 0

	)

323 #ñi‡
__STDCPP_THREADS__


324 
	#TBB_IMPLEMENT_CPP0X
 0

	)

326 
	#TBB_IMPLEMENT_CPP0X
 1

	)

331 #i‚de‡
TBB_USE_CAPTURED_EXCEPTION


333 #i‡
__TBB_EXCEPTION_PTR_PRESENT
 && !
deföed
(
__ü64__
)

334 
	#TBB_USE_CAPTURED_EXCEPTION
 0

	)

336 
	#TBB_USE_CAPTURED_EXCEPTION
 1

	)

339 #i‡!
TBB_USE_CAPTURED_EXCEPTION
 && !
__TBB_EXCEPTION_PTR_PRESENT


340 #îr‹ 
Cuºít
 
ru¡ime
 
d€s
 
nŸ
 
suµ‹t
 
°d
::
ex˚±i⁄_±r
. 
Së
 
TBB_USE_CAPTURED_EXCEPTION
 
™d
 
make
 
suª
 
th©
 
your
 
code
 
is
 
ªady
 
to
 
ˇtch
 
tbb
::
ˇ±uªd_ex˚±i⁄
.

345 #i‡
TBB_USE_GCC_BUILTINS
 && !
__TBB_GCC_BUILTIN_ATOMICS_PRESENT


352 #i‚de‡
__TBB_WEAK_SYMBOLS_PRESENT


353 
	#__TBB_WEAK_SYMBOLS_PRESENT
 ( !
_WIN32
 && !
__APPLE__
 && !
__sun
 && (
__TBB_GCC_VERSION
 >40000 || 
__INTEL_COMPILER
 ) )

	)

357 #i‚de‡
__TBB_DYNAMIC_LOAD_ENABLED


358 
	#__TBB_DYNAMIC_LOAD_ENABLED
 1

	)

364 #i‡(
_WIN32
||
_WIN64
Ë&& (
__TBB_SOURCE_DIRECTLY_INCLUDED
 || 
TBB_USE_PREVIEW_BINARY
)

365 
	#__TBB_NO_IMPLICIT_LINKAGE
 1

	)

366 
	#__TBBMALLOC_NO_IMPLICIT_LINKAGE
 1

	)

369 #i‚de‡
__TBB_COUNT_TASK_NODES


370 
	#__TBB_COUNT_TASK_NODES
 
TBB_USE_ASSERT


	)

373 #i‚de‡
__TBB_TASK_GROUP_CONTEXT


374 
	#__TBB_TASK_GROUP_CONTEXT
 1

	)

377 #i‚de‡
__TBB_SCHEDULER_OBSERVER


378 
	#__TBB_SCHEDULER_OBSERVER
 1

	)

381 #i‚de‡
__TBB_FP_CONTEXT


382 
	#__TBB_FP_CONTEXT
 
__TBB_TASK_GROUP_CONTEXT


	)

385 #i‡
__TBB_FP_CONTEXT
 && !
__TBB_TASK_GROUP_CONTEXT


386 #îr‹ 
__TBB_FP_CONTEXT
 
ªquúes
 
__TBB_TASK_GROUP_CONTEXT
 
to
 
be
 
íabÀd


389 #i‚de‡
__TBB_TASK_ARENA


390 
	#__TBB_TASK_ARENA
 1

	)

392 #i‡
__TBB_TASK_ARENA


393 
	#__TBB_RECYCLE_TO_ENQUEUE
 
__TBB_BUILD


394 #i‡!
__TBB_SCHEDULER_OBSERVER


	)

395 #îr‹ 
__TBB_TASK_ARENA
 
ªquúes
 
__TBB_SCHEDULER_OBSERVER
 
to
 
be
 
íabÀd


399 #i‚de‡
__TBB_ARENA_OBSERVER


400 
	#__TBB_ARENA_OBSERVER
 ((
__TBB_BUILD
||
TBB_PREVIEW_LOCAL_OBSERVER
)&& 
__TBB_SCHEDULER_OBSERVER
)

	)

403 #i‚de‡
__TBB_SLEEP_PERMISSION


404 
	#__TBB_SLEEP_PERMISSION
 ((
__TBB_CPF_BUILD
||
TBB_PREVIEW_LOCAL_OBSERVER
)&& 
__TBB_SCHEDULER_OBSERVER
)

	)

407 #i‡
TBB_PREVIEW_FLOW_GRAPH_TRACE


408 
	#__TBB_NO_IMPLICIT_LINKAGE
 1

	)

411 #i‚de‡
__TBB_ITT_STRUCTURE_API


412 
	#__TBB_ITT_STRUCTURE_API
 ( !
__TBB_DEFINE_MIC
 && (
__TBB_CPF_BUILD
 || 
TBB_PREVIEW_FLOW_GRAPH_TRACE
Ë)

	)

415 #i‡
TBB_USE_EXCEPTIONS
 && !
__TBB_TASK_GROUP_CONTEXT


416 #îr‹ 
TBB_USE_EXCEPTIONS
 
ªquúes
 
__TBB_TASK_GROUP_CONTEXT
 
to
 
be
 
íabÀd


419 #i‚de‡
__TBB_TASK_PRIORITY


420 
	#__TBB_TASK_PRIORITY
 (!(
__TBB_CPF_BUILD
||
TBB_USE_PREVIEW_BINARY
)&&
__TBB_TASK_GROUP_CONTEXT
)

422 

	)

423 #i‡
__TBB_TASK_PRIORITY
 && !
__TBB_TASK_GROUP_CONTEXT


424 #îr‹ 
__TBB_TASK_PRIORITY
 
ªquúes
 
__TBB_TASK_GROUP_CONTEXT
 
to
 
be
 
íabÀd


427 #i‡
TBB_PREVIEW_WAITING_FOR_WORKERS
 || 
__TBB_BUILD


428 
	#__TBB_SUPPORTS_WORKERS_WAITING_IN_TERMINATE
 1

	)

431 #i‡!
deföed
(
__TBB_SURVIVE_THREAD_SWITCH
) && \

432 (
	g_WIN32
 || 
	g_WIN64
 || 
	g__APPLE__
 || (
	g__löux__
 && !
	g__ANDROID__
))

433 
	#__TBB_SURVIVE_THREAD_SWITCH
 1

	)

436 #i‚de‡
__TBB_DEFAULT_PARTITIONER


437 #i‡
TBB_DEPRECATED


439 
	#__TBB_DEFAULT_PARTITIONER
 
tbb
::
sim∂e_∑πôi⁄î


	)

442 
	#__TBB_DEFAULT_PARTITIONER
 
tbb
::
auto_∑πôi⁄î


	)

446 #i‚de‡
__TBB_USE_PROPORTIONAL_SPLIT_IN_BLOCKED_RANGES


447 
	#__TBB_USE_PROPORTIONAL_SPLIT_IN_BLOCKED_RANGES
 1

	)

450 #ifde‡
_VARIADIC_MAX


451 
	#__TBB_VARIADIC_MAX
 
_VARIADIC_MAX


	)

453 #i‡
_MSC_VER
 >= 1700

454 
	#__TBB_VARIADIC_MAX
 5

	)

456 
	#__TBB_VARIADIC_MAX
 10

	)

462 #i‡
deföed
(
WINAPI_FAMILY
Ë&& WINAPI_FAMILY =
WINAPI_FAMILY_APP


463 
	#__TBB_WIN8UI_SUPPORT
 1

	)

465 
	#__TBB_WIN8UI_SUPPORT
 0

	)

474 #i‡
__ANDROID__
 && 
__TBB_GCC_VERSION
 <40403 && !
__GCC_HAVE_SYNC_COMPARE_AND_SWAP_8


478 
	#__TBB_GCC_64BIT_ATOMIC_BUILTINS_BROKEN
 1

	)

479 #ñi‡
__TBB_x86_32
 && 
__TBB_GCC_VERSION
 =40102 && ! 
__GNUC_RH_RELEASE__


483 
	#__TBB_GCC_64BIT_ATOMIC_BUILTINS_BROKEN
 1

	)

486 #i‡
__GNUC__
 && 
__TBB_x86_64
 && 
__INTEL_COMPILER
 == 1200

487 
	#__TBB_ICC_12_0_INL_ASM_FSTCW_BROKEN
 1

	)

490 #i‡
_MSC_VER
 && 
__INTEL_COMPILER
 && (__INTEL_COMPILER<1110 || __INTEL_COMPILER==1110 && 
__INTEL_COMPILER_BUILD_DATE
 < 20091012)

494 
	#__TBB_DEFAULT_DTOR_THROW_SPEC_BROKEN
 1

	)

497 #i‡
deföed
(
_MSC_VER
Ë&& _MSC_VER < 1500 && !deföed(
__INTEL_COMPILER
)

500 
	#__TBB_TEMPLATE_FRIENDS_BROKEN
 1

	)

504 #i‡
__GLIBC__
==2 && 
__GLIBC_MINOR__
==3 || (
__APPLE__
 && ( 
__INTEL_COMPILER
==1200 && !
TBB_USE_DEBUG
))

507 
	#__TBB_THROW_ACROSS_MODULE_BOUNDARY_BROKEN
 1

	)

509 
	#__TBB_THROW_ACROSS_MODULE_BOUNDARY_BROKEN
 0

	)

512 #i‡(
_WIN32
||
_WIN64
Ë&& 
__INTEL_COMPILER
 == 1110

514 
	#__TBB_ICL_11_1_CODE_GEN_BROKEN
 1

	)

517 #i‡
__˛™g__
 || (
__GNUC__
==3 && 
__GNUC_MINOR__
==3 && !
deföed
(
__INTEL_COMPILER
))

519 
	#__TBB_PROTECTED_NESTED_CLASS_BROKEN
 1

	)

522 #i‡
__MINGW32__
 && 
__TBB_GCC_VERSION
 < 40200

525 
	#__TBB_SSE_STACK_ALIGNMENT_BROKEN
 1

	)

527 
	#__TBB_SSE_STACK_ALIGNMENT_BROKEN
 0

	)

530 #i‡
__GNUC__
==4 && 
__GNUC_MINOR__
==3 && 
__GNUC_PATCHLEVEL__
==0

532 
	#__TBB_GCC_OPTIMIZER_ORDERING_BROKEN
 1

	)

535 #i‡
__FªeBSD__


538 
	#__TBB_PRIO_INHERIT_BROKEN
 1

	)

542 
	#__TBB_PLACEMENT_NEW_EXCEPTION_SAFETY_BROKEN
 1

	)

545 #i‡(
__löux__
 || 
__APPLE__
Ë&& 
__i386__
 && 
deföed
(
__INTEL_COMPILER
)

548 
	#__TBB_ICC_ASM_VOLATILE_BROKEN
 1

	)

551 #i‡!
__INTEL_COMPILER
 && (
_MSC_VER
 || 
__GNUC__
==3 && 
__GNUC_MINOR__
<=2)

554 
	#__TBB_ALIGNOF_NOT_INSTANTIATED_TYPES_BROKEN
 1

	)

557 #i‡
__TBB_DEFINE_MIC


559 
	#__TBB_MAIN_THREAD_AFFINITY_BROKEN
 1

	)

562 #i‡
__GXX_EXPERIMENTAL_CXX0X__
 && !
deföed
(
__EXCEPTIONS
) && \

563 ((!
	g__INTEL_COMPILER
 && !
	g__˛™g__
 && (
	g__TBB_GCC_VERSION
>=40400 && 
__TBB_GCC_VERSION
<40600)) || \

564 (
__INTEL_COMPILER
<=1400 && (
__TBB_GCC_VERSION
>=40400 && __TBB_GCC_VERSION<=40801)))

570 
	#__TBB_LIBSTDCPP_EXCEPTION_HEADERS_BROKEN
 1

	)

572 
	#__TBB_LIBSTDCPP_EXCEPTION_HEADERS_BROKEN
 0

	)

575 #i‡
__INTEL_COMPILER
==1300 && 
__TBB_GCC_VERSION
>=40700 && 
deföed
(
__GXX_EXPERIMENTAL_CXX0X__
)

581 
	#__TBB_ICC_13_0_CPP11_STDLIB_SUPPORT_BROKEN
 1

	)

583 
	#__TBB_ICC_13_0_CPP11_STDLIB_SUPPORT_BROKEN
 0

	)

586 #i‡(
__GNUC__
==4 && 
__GNUC_MINOR__
==4 ) && !
deföed
(
__INTEL_COMPILER
Ë&& !deföed(
__˛™g__
)

588 
	#__TBB_GCC_STRICT_ALIASING_BROKEN
 1

	)

590 #i‡!
__TBB_GCC_WARNING_SUPPRESSION_PRESENT


591 #îr‹ 
W¨nög
 
suµªssi⁄
 
is
 
nŸ
 
suµ‹ãd
, 
should
.

596 #i‡
__TBB_GCC_VERSION
 =40102 && 
__PIC__
 && !
deföed
(
__INTEL_COMPILER
Ë&& !deföed(
__˛™g__
)

597 
	#__TBB_GCC_CAS8_BUILTIN_INLINING_BROKEN
 1

	)

600 #i‡
__TBB_x86_32
 && (
__löux__
 || 
__APPLE__
 || 
_WIN32
 || 
__sun
 || 
__ANDROID__
Ë&& (
__INTEL_COMPILER
 || (
__GNUC__
==3 && 
__GNUC_MINOR__
==3 ) || 
__SUNPRO_CC
)

605 
	#__TBB_FORCE_64BIT_ALIGNMENT_BROKEN
 1

	)

607 
	#__TBB_FORCE_64BIT_ALIGNMENT_BROKEN
 0

	)

610 #i‡
__TBB_DEFAULTED_AND_DELETED_FUNC_PRESENT
 && 
__TBB_GCC_VERSION
 < 40700 && !
deföed
(
__INTEL_COMPILER
Ë&& !deföed (
__˛™g__
)

611 
	#__TBB_ZERO_INIT_WITH_DEFAULTED_CTOR_BROKEN
 1

	)

614 #i‡
_MSC_VER
 && _MSC_VER <1800 && !
__INTEL_COMPILER


617 
	#__TBB_CONST_REF_TO_ARRAY_TEMPLATE_PARAM_BROKEN
 1

	)

621 
	#__TBB_IF_NO_COPY_CTOR_MOVE_SEMANTICS_BROKEN
 (
_MSC_VER
 && (
__INTEL_COMPILER
 >1300 && __INTEL_COMPILER <1310Ë&& !
__INTEL_CXX11_MODE__
)

	)

624 
	#__TBB_CPP11_IMPLICIT_MOVE_MEMBERS_GENERATION_FOR_DERIVED_BROKEN
 (
__TBB_CPP11_RVALUE_REF_PRESENT
 && \

625 –!
__INTEL_COMPILER
 && 
_MSC_VER
 && _MSC_VER <=1800 || __INTEL_COMPILER && __INTEL_COMPILER <1500 ))

	)

629 #i‡
deföed
(
_MSC_VER
Ë&& _MSC_VER>=1500 && !deföed(
__INTEL_COMPILER
)

631 
	#__TBB_MSVC_UNREACHABLE_CODE_IGNORED
 1

	)

634 
	#__TBB_ATOMIC_CTORS
 (
__TBB_CONSTEXPR_PRESENT
 && 
__TBB_DEFAULTED_AND_DELETED_FUNC_PRESENT
 && (!
__TBB_ZERO_INIT_WITH_DEFAULTED_CTOR_BROKEN
))

	)

636 
	#__TBB_ALLOCATOR_CONSTRUCT_VARIADIC
 (
__TBB_CPP11_VARIADIC_TEMPLATES_PRESENT
 && 
__TBB_CPP11_RVALUE_REF_PRESENT
)

	)

638 
	#__TBB_VARIADIC_PARALLEL_INVOKE
 (
TBB_PREVIEW_VARIADIC_PARALLEL_INVOKE
 && 
__TBB_CPP11_VARIADIC_TEMPLATES_PRESENT
 && 
__TBB_CPP11_RVALUE_REF_PRESENT
)

	)

	@viper/concurrentqueue-src/benchmarks/tbb/tbb_exception.h

21 #i‚de‡
__TBB_ex˚±i⁄_H


22 
	#__TBB_ex˚±i⁄_H


	)

24 
	~"tbb_°ddef.h
"

26 #i‡!
TBB_USE_EXCEPTIONS
 && 
_MSC_VER


28 #¥agm®
w¨nög
 (
push
)

29 #¥agm®
w¨nög
 (
dißbÀ
: 4530)

32 
	~<ex˚±i⁄
>

33 
	~<√w
>

34 
	~<°rög
>

36 #i‡!
TBB_USE_EXCEPTIONS
 && 
_MSC_VER


37 #¥agm®
w¨nög
 (
p›
)

40 
«me•a˚
 
	gtbb
 {

43 ˛as†
	cbad_œ°_Æloc
 : 
public
 
°d
::
bad_Æloc
 {

44 
public
:

45  c⁄° * 
wh©
(Ëc⁄° 
throw
();

46 #i‡
__TBB_DEFAULT_DTOR_THROW_SPEC_BROKEN


47  ~
bad_œ°_Æloc
(Ë
throw
() {}

52 ˛as†
	cim¥›î_lock
 : 
public
 
°d
::
ex˚±i⁄
 {

53 
public
:

54  c⁄° * 
wh©
(Ëc⁄° 
throw
();

58 ˛as†
	cu£r_ab‹t
 : 
public
 
°d
::
ex˚±i⁄
 {

59 
public
:

60  c⁄° * 
wh©
(Ëc⁄° 
throw
();

64 ˛as†
	cmissög_waô
 : 
public
 
°d
::
ex˚±i⁄
 {

65 
public
:

66  c⁄° * 
wh©
(Ëc⁄° 
throw
();

70 ˛as†
	cövÆid_mu…ùÀ_schedulög
 : 
public
 
°d
::
ex˚±i⁄
 {

71 
public
:

72  c⁄° * 
wh©
(Ëc⁄° 
throw
();

75 
«me•a˚
 
	göã∫Æ
 {

77 
__TBB_EXPORTED_FUNC
 
throw_bad_œ°_Æloc_ex˚±i⁄_v4
();

79 
	eex˚±i⁄_id
 {

80 
	geid_bad_Æloc
 = 1,

81 
	geid_bad_œ°_Æloc
,

82 
	geid_n⁄posôive_°ï
,

83 
	geid_out_of_ønge
,

84 
	geid_£gmít_ønge_îr‹
,

85 
	geid_ödex_ønge_îr‹
,

86 
	geid_missög_waô
,

87 
	geid_övÆid_mu…ùÀ_schedulög
,

88 
	geid_im¥›î_lock
,

89 
	geid_possibÀ_dódlock
,

90 
	geid_›î©i⁄_nŸ_≥rmôãd
,

91 
	geid_c⁄dv¨_waô_Áûed
,

92 
	geid_övÆid_lﬂd_Á˘‹
,

93 
	geid_ª£rved
,

94 
	geid_övÆid_sw≠
,

95 
	geid_ª£rv©i⁄_Àngth_îr‹
,

96 
	geid_övÆid_key
,

97 
	geid_u£r_ab‹t
,

98 
	geid_ª£rved1
,

99 #i‡
__TBB_SUPPORTS_WORKERS_WAITING_IN_TERMINATE


102 
	geid_blockög_sch_öô
 = 
eid_ª£rved1
,

104 
	geid_bad_ègged_msg_ˇ°
,

108 
	geid_max


114 
__TBB_EXPORTED_FUNC
 
throw_ex˚±i⁄_v4
 ( 
ex˚±i⁄_id
 );

117 
ölöe
 
throw_ex˚±i⁄
 ( 
ex˚±i⁄_id
 
eid
 ) { 
throw_ex˚±i⁄_v4
(eid); }

122 #i‡
__TBB_TASK_GROUP_CONTEXT


123 
	~"tbb_Æloˇt‹.h
"

124 
	~<ty≥öfo
>

126 
«me•a˚
 
	gtbb
 {

149 ˛as†
	ctbb_ex˚±i⁄
 : 
public
 
°d
::
ex˚±i⁄


154 * 
›î©‹
 
√w
 ( 
size_t
 );

156 
	gpublic
:

157 #i‡
__˛™g__


162 ~
tbb_ex˚±i⁄
(Ë
throw
() { ; }

167 
vútuÆ
 
tbb_ex˚±i⁄
* 
move
 (Ë
throw
() = 0;

172 
vútuÆ
 
de°roy
 (Ë
throw
() = 0;

179 
vútuÆ
 
throw_£lf
 () = 0;

182 
vútuÆ
 c⁄° * 
«me
(Ëc⁄° 
throw
() = 0;

185 
vútuÆ
 c⁄° * 
wh©
(Ëc⁄° 
throw
() = 0;

193 
›î©‹
 
dñëe
 ( * 
p
 ) {

194 
	göã∫Æ
::
dóŒoˇã_vü_h™dÀr_v3
(
p
);

203 ˛as†
	cˇ±uªd_ex˚±i⁄
 : 
public
 
tbb_ex˚±i⁄


205 
public
:

206 
ˇ±uªd_ex˚±i⁄
 ( c⁄° c≠tuªd_ex˚±i⁄& 
§c
 )

207 : 
tbb_ex˚±i⁄
(
§c
), 
my_dy«mic
(
Ál£
)

209 
£t
(
§c
.
my_ex˚±i⁄_«me
, src.
my_ex˚±i⁄_öfo
);

212 
ˇ±uªd_ex˚±i⁄
 ( c⁄° * 
«me_
, c⁄° * 
öfo
 )

213 : 
my_dy«mic
(
Ál£
)

215 
£t
(
«me_
, 
öfo
);

218 
	g__TBB_EXPORTED_METHOD
 ~
ˇ±uªd_ex˚±i⁄
 (Ë
throw
();

220 
	gˇ±uªd_ex˚±i⁄
& 
	g›î©‹
–c⁄° 
ˇ±uªd_ex˚±i⁄
& 
§c
 ) {

221 i‡–
this
 !&
§c
 ) {

222 
˛ór
();

223 
£t
(
§c
.
my_ex˚±i⁄_«me
, src.
my_ex˚±i⁄_öfo
);

225  *
	gthis
;

229 
ˇ±uªd_ex˚±i⁄
* 
__TBB_EXPORTED_METHOD
 
move
 (Ë
throw
();

232 
__TBB_EXPORTED_METHOD
 
de°roy
 (Ë
throw
();

235 
throw_£lf
 (Ë{ 
__TBB_THROW
(*
this
); }

238 c⁄° * 
__TBB_EXPORTED_METHOD
 
«me
(Ëc⁄° 
throw
();

241 c⁄° * 
__TBB_EXPORTED_METHOD
 
wh©
(Ëc⁄° 
throw
();

243 
__TBB_EXPORTED_METHOD
 
£t
 ( c⁄° * 
«me
, c⁄° * 
öfo
 ) 
throw
();

244 
__TBB_EXPORTED_METHOD
 
˛ór
 (Ë
throw
();

246 
	g¥iv©e
:

248 
ˇ±uªd_ex˚±i⁄
() {}

251 
ˇ±uªd_ex˚±i⁄
* 
Æloˇã
 ( c⁄° * 
«me
, c⁄° * 
öfo
 );

253 
boﬁ
 
	gmy_dy«mic
;

254 c⁄° * 
	gmy_ex˚±i⁄_«me
;

255 c⁄° * 
	gmy_ex˚±i⁄_öfo
;

263 
	gãm∂©e
<
ty≥«me
 
	gEx˚±i⁄D©a
>

264 ˛as†
	cmovabÀ_ex˚±i⁄
 : 
public
 
tbb_ex˚±i⁄


266 
movabÀ_ex˚±i⁄
<
	tEx˚±i⁄D©a
> 
	t£lf_ty≥
;

268 
	gpublic
:

269 
movabÀ_ex˚±i⁄
 ( c⁄° 
Ex˚±i⁄D©a
& 
d©a_
 )

270 : 
my_ex˚±i⁄_d©a
(
d©a_
)

271 , 
my_dy«mic
(
Ál£
)

272 , 
my_ex˚±i⁄_«me
(

273 #i‡
TBB_USE_EXCEPTIONS


274 
ty≥id
(
£lf_ty≥
).
«me
()

281 
movabÀ_ex˚±i⁄
 ( c⁄° movabÀ_ex˚±i⁄& 
§c
 ) 
throw
 ()

282 : 
tbb_ex˚±i⁄
(
§c
)

283 , 
my_ex˚±i⁄_d©a
(
§c
.my_exception_data)

284 , 
my_dy«mic
(
Ál£
)

285 , 
my_ex˚±i⁄_«me
(
§c
.my_exception_name)

288 ~
movabÀ_ex˚±i⁄
 (Ë
throw
() {}

290 c⁄° 
	gmovabÀ_ex˚±i⁄
& 
	g›î©‹
–c⁄° 
movabÀ_ex˚±i⁄
& 
§c
 ) {

291 i‡–
this
 !&
§c
 ) {

292 
my_ex˚±i⁄_d©a
 = 
§c
.my_exception_data;

293 
	gmy_ex˚±i⁄_«me
 = 
§c
.
my_ex˚±i⁄_«me
;

295  *
	gthis
;

298 
	gEx˚±i⁄D©a
& 
d©a
 (Ë
throw
(Ë{  
	gmy_ex˚±i⁄_d©a
; }

300 c⁄° 
	gEx˚±i⁄D©a
& 
d©a
 (Ëc⁄° 
throw
(Ë{  
	gmy_ex˚±i⁄_d©a
; }

302  c⁄° * 
«me
 (Ëc⁄° 
throw
(Ë{  
	gmy_ex˚±i⁄_«me
; }

304  c⁄° * 
wh©
 (Ëc⁄° 
throw
() {  "tbb::movable_exception"; }

307 
movabÀ_ex˚±i⁄
* 
move
 (Ë
throw
() {

308 * 
	ge
 = 
öã∫Æ
::
Æloˇã_vü_h™dÀr_v3
((
movabÀ_ex˚±i⁄
));

309 i‡–
	ge
 ) {

310 ::
√w
 (
e
Ë
movabÀ_ex˚±i⁄
(*
this
);

311 ((
	gmovabÀ_ex˚±i⁄
*)
	ge
)->
	gmy_dy«mic
 = 
åue
;

313  (
	gmovabÀ_ex˚±i⁄
*)
	ge
;

316 
de°roy
 (Ë
throw
() {

317 
__TBB_ASSERT
 ( 
my_dy«mic
, "Method destroy can be called only on dynamicallyállocated movable_exceptions" );

318 i‡–
	gmy_dy«mic
 ) {

319 
	gthis
->~
movabÀ_ex˚±i⁄
();

320 
	göã∫Æ
::
dóŒoˇã_vü_h™dÀr_v3
(
this
);

324 
throw_£lf
 (Ë{ 
__TBB_THROW
–*
this
 ); }

326 
	g¥Ÿe˘ed
:

328 
Ex˚±i⁄D©a
 
my_ex˚±i⁄_d©a
;

330 
	g¥iv©e
:

332 
boﬁ
 
my_dy«mic
;

336 c⁄° * 
	gmy_ex˚±i⁄_«me
;

339 #i‡!
TBB_USE_CAPTURED_EXCEPTION


340 
«me•a˚
 
	göã∫Æ
 {

345 ˛as†
	ctbb_ex˚±i⁄_±r
 {

346 
	g°d
::
ex˚±i⁄_±r
 
my_±r
;

348 
	gpublic
:

349 
tbb_ex˚±i⁄_±r
* 
Æloˇã
 ();

350 
tbb_ex˚±i⁄_±r
* 
Æloˇã
 ( c⁄° 
tbb_ex˚±i⁄
& 
èg
 );

352 
tbb_ex˚±i⁄_±r
* 
Æloˇã
 ( 
ˇ±uªd_ex˚±i⁄
& 
§c
 );

356 
de°roy
 (Ë
throw
();

359 
throw_£lf
 (Ë{ 
	g°d
::
ªthrow_ex˚±i⁄
(
my_±r
); }

361 
	g¥iv©e
:

362 
tbb_ex˚±i⁄_±r
 ( c⁄° 
°d
::
ex˚±i⁄_±r
& 
§c
 ) : 
my_±r
(src) {}

363 
tbb_ex˚±i⁄_±r
 ( c⁄° 
ˇ±uªd_ex˚±i⁄
& 
§c
 ) :

364 #i‡
__TBB_MAKE_EXCEPTION_PTR_PRESENT


365 
my_±r
(
°d
::
make_ex˚±i⁄_±r
(
§c
))

367 
my_±r
(
°d
::
c›y_ex˚±i⁄
(
§c
))

	@viper/concurrentqueue-src/benchmarks/tbb/tbb_machine.h

21 #i‚de‡
__TBB_machöe_H


22 
	#__TBB_machöe_H


	)

117 
	~"tbb_°ddef.h
"

119 
«me•a˚
 
	gtbb
 {

120 
«me•a˚
 
	göã∫Æ
 {

128 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
	g°d
::
size_t
 
S
>

129 
machöe_lﬂd_°‹e
;

131 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
	g°d
::
size_t
 
S
>

132 
machöe_lﬂd_°‹e_ªœxed
;

134 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
	g°d
::
size_t
 
S
>

135 
machöe_lﬂd_°‹e_£q_c°
;

140 
	gãm∂©e
<
size_t
 
	gS
> 
	g©omic_£À˘‹
;

142 
	gãm∂©e
<> 
	g©omic_£À˘‹
<1> {

143 
öt8_t
 
	tw‹d
;

144 
ölöe
 
w‹d
 
„tch_°‹e
 ( vﬁ©ûê* 
loˇti⁄
, w‹d 
vÆue
 );

147 
	gãm∂©e
<> 
	g©omic_£À˘‹
<2> {

148 
öt16_t
 
	tw‹d
;

149 
ölöe
 
w‹d
 
„tch_°‹e
 ( vﬁ©ûê* 
loˇti⁄
, w‹d 
vÆue
 );

152 
	gãm∂©e
<> 
	g©omic_£À˘‹
<4> {

153 #i‡
_MSC_VER
 && !
_WIN64


155 
öçå_t
 
	tw‹d
;

157 
öt32_t
 
	tw‹d
;

159 
ölöe
 
w‹d
 
„tch_°‹e
 ( vﬁ©ûê* 
loˇti⁄
, w‹d 
vÆue
 );

162 
	gãm∂©e
<> 
	g©omic_£À˘‹
<8> {

163 
öt64_t
 
	tw‹d
;

164 
ölöe
 
w‹d
 
„tch_°‹e
 ( vﬁ©ûê* 
loˇti⁄
, w‹d 
vÆue
 );

169 
	#__TBB_MACHINE_DEFINE_STORE8_GENERIC_FENCED
(
M
) \

170 
ölöe
 
__TBB_machöe_gíîic_°‹e8
##
	`M
(vﬁ©ûê*
±r
, 
öt64_t
 
vÆue
) { \

172 
öt64_t
 
ªsu…
 = *(vﬁ©ûêöt64_à*)
±r
; \

173 if–
__TBB_machöe_cmpswp8
##
	`M
(
±r
,
vÆue
,
ªsu…
)==result ) ; \

176 

	)

177 
	#__TBB_MACHINE_DEFINE_LOAD8_GENERIC_FENCED
(
M
) \

178 
ölöe
 
öt64_t
 
__TBB_machöe_gíîic_lﬂd8
##
	`M
(c⁄° vﬁ©ûê*
±r
) { \

181 c⁄° 
öt64_t
 
™yvÆue
 = 2305843009213693951LL; \

182  
__TBB_machöe_cmpswp8
##
	`M
(
c⁄°_ˇ°
<vﬁ©ûê*>(
±r
),
™yvÆue
,anyvalue); \

184 

	)

186 
	#__TBB_ENDIAN_UNSUPPORTED
 -1

	)

187 
	#__TBB_ENDIAN_LITTLE
 0

	)

188 
	#__TBB_ENDIAN_BIG
 1

	)

189 
	#__TBB_ENDIAN_DETECT
 2

	)

191 #i‡
_WIN32
||
_WIN64


193 #ifde‡
_MANAGED


194 #¥agm®
m™aged
(
push
, 
off
)

197 #i‡
__MINGW64__
 || 
__MINGW32__


198 "C" 
	$__de˛•ec
(
dŒimp‹t
Ë
__°dˇŒ
 
	`SwôchToThªad
( );

199 
	#__TBB_Yõld
(Ë
	`SwôchToThªad
()

	)

200 #i‡(
TBB_USE_GCC_BUILTINS
 && 
__TBB_GCC_BUILTIN_ATOMICS_PRESENT
)

201 
	~"machöe/gcc_gíîic.h
"

202 #ñi‡
__MINGW64__


203 
	~"machöe/löux_öãl64.h
"

204 #ñi‡
__MINGW32__


205 
	~"machöe/löux_ü32.h
"

207 #ñi‡(
TBB_USE_ICC_BUILTINS
 && 
__TBB_ICC_BUILTIN_ATOMICS_PRESENT
)

208 
	~"machöe/icc_gíîic.h
"

209 #ñi‡
	`deföed
(
_M_IX86
Ë&& !deföed(
__TBB_WIN32_USE_CL_BUILTINS
)

210 
	~"machöe/wödows_ü32.h
"

211 #ñi‡
	`deföed
(
_M_X64
)

212 
	~"machöe/wödows_öãl64.h
"

213 #ñi‡
	`deföed
(
_XBOX
)

214 
	~"machöe/xbox360_µc.h
"

215 #ñi‡
	`deföed
(
_M_ARM
Ë|| deföed(
__TBB_WIN32_USE_CL_BUILTINS
)

216 
	~"machöe/msvc_¨mv7.h
"

219 #ifde‡
_MANAGED


220 #¥agm®
	`m™aged
(
p›
)

223 #ñi‡
__TBB_DEFINE_MIC


225 
	~"machöe/mic_comm⁄.h
"

226 #i‡(
TBB_USE_ICC_BUILTINS
 && 
__TBB_ICC_BUILTIN_ATOMICS_PRESENT
)

227 
	~"machöe/icc_gíîic.h
"

229 
	~"machöe/löux_öãl64.h
"

232 #ñi‡
__löux__
 || 
__FªeBSD__
 || 
__NëBSD__


234 #i‡(
TBB_USE_GCC_BUILTINS
 && 
__TBB_GCC_BUILTIN_ATOMICS_PRESENT
)

235 
	~"machöe/gcc_gíîic.h
"

236 #ñi‡(
TBB_USE_ICC_BUILTINS
 && 
__TBB_ICC_BUILTIN_ATOMICS_PRESENT
)

237 
	~"machöe/icc_gíîic.h
"

238 #ñi‡
__i386__


239 
	~"machöe/löux_ü32.h
"

240 #ñi‡
__x86_64__


241 
	~"machöe/löux_öãl64.h
"

242 #ñi‡
__ü64__


243 
	~"machöe/löux_ü64.h
"

244 #ñi‡
__powîpc__


245 
	~"machöe/mac_µc.h
"

246 #ñi‡
__¨m__


247 
	~"machöe/gcc_¨mv7.h
"

248 #ñi‡
__TBB_GCC_BUILTIN_ATOMICS_PRESENT


249 
	~"machöe/gcc_gíîic.h
"

251 
	~"machöe/löux_comm⁄.h
"

253 #ñi‡
__APPLE__


255 #i‡(
TBB_USE_ICC_BUILTINS
 && 
__TBB_ICC_BUILTIN_ATOMICS_PRESENT
)

256 
	~"machöe/icc_gíîic.h
"

257 #ñi‡
__i386__


258 
	~"machöe/löux_ü32.h
"

259 #ñi‡
__x86_64__


260 
	~"machöe/löux_öãl64.h
"

261 #ñi‡
__POWERPC__


262 
	~"machöe/mac_µc.h
"

264 
	~"machöe/macos_comm⁄.h
"

266 #ñi‡
_AIX


268 
	~"machöe/ibm_aix51.h
"

270 #ñi‡
__sun
 || 
__SUNPRO_CC


272 
	#__asm__
 
asm


	)

273 
	#__vﬁ©ûe__
 vﬁ©ûe

	)

275 #i‡
__i386
 || 
__i386__


276 
	~"machöe/löux_ü32.h
"

277 #ñi‡
__x86_64__


278 
	~"machöe/löux_öãl64.h
"

279 #ñi‡
__•¨c


280 
	~"machöe/sunos_•¨c.h
"

282 
	~<sched.h
>

284 
	#__TBB_Yõld
(Ë
	`sched_yõld
()

	)

288 #i‚de‡
__TBB_64BIT_ATOMICS


289 
	#__TBB_64BIT_ATOMICS
 1

	)

295 #i‡
__TBB_USE_FENCED_ATOMICS


296 
	#__TBB_machöe_cmpswp1
 
__TBB_machöe_cmpswp1fuŒ_„n˚


	)

297 
	#__TBB_machöe_cmpswp2
 
__TBB_machöe_cmpswp2fuŒ_„n˚


	)

298 
	#__TBB_machöe_cmpswp4
 
__TBB_machöe_cmpswp4fuŒ_„n˚


	)

299 
	#__TBB_machöe_cmpswp8
 
__TBB_machöe_cmpswp8fuŒ_„n˚


	)

301 #i‡
__TBB_WORDSIZE
==8

302 
	#__TBB_machöe_„tchadd8
 
__TBB_machöe_„tchadd8fuŒ_„n˚


	)

303 
	#__TBB_machöe_„tch°‹e8
 
__TBB_machöe_„tch°‹e8fuŒ_„n˚


	)

304 
	#__TBB_FëchAndAddWªÀa£
(
P
,
V
Ë
	`__TBB_machöe_„tchadd8ªÀa£
(P,V)

	)

305 
	#__TBB_FëchAndIn¸emítWacquúe
(
P
Ë
	`__TBB_machöe_„tchadd8acquúe
(P,1)

	)

306 
	#__TBB_FëchAndDe¸emítWªÀa£
(
P
Ë
	`__TBB_machöe_„tchadd8ªÀa£
(P,(-1))

	)

308 
	#__TBB_machöe_„tchadd4
 
__TBB_machöe_„tchadd4fuŒ_„n˚


	)

309 
	#__TBB_machöe_„tch°‹e4
 
__TBB_machöe_„tch°‹e4fuŒ_„n˚


	)

310 
	#__TBB_FëchAndAddWªÀa£
(
P
,
V
Ë
	`__TBB_machöe_„tchadd4ªÀa£
(P,V)

	)

311 
	#__TBB_FëchAndIn¸emítWacquúe
(
P
Ë
	`__TBB_machöe_„tchadd4acquúe
(P,1)

	)

312 
	#__TBB_FëchAndDe¸emítWªÀa£
(
P
Ë
	`__TBB_machöe_„tchadd4ªÀa£
(P,(-1))

	)

315 
	#__TBB_FëchAndAddWªÀa£
(
P
,
V
Ë
	`__TBB_FëchAndAddW
(P,V)

	)

316 
	#__TBB_FëchAndIn¸emítWacquúe
(
P
Ë
	`__TBB_FëchAndAddW
(P,1)

	)

317 
	#__TBB_FëchAndDe¸emítWªÀa£
(
P
Ë
	`__TBB_FëchAndAddW
(P,(-1))

	)

320 #i‡
__TBB_WORDSIZE
==4

321 
	#__TBB_Com∑ªAndSw≠W
(
P
,
V
,
C
Ë
	`__TBB_machöe_cmpswp4
(P,V,C)

	)

322 
	#__TBB_FëchAndAddW
(
P
,
V
Ë
	`__TBB_machöe_„tchadd4
(P,V)

	)

323 
	#__TBB_FëchAndSt‹eW
(
P
,
V
Ë
	`__TBB_machöe_„tch°‹e4
(P,V)

	)

324 #ñi‡ 
__TBB_WORDSIZE
==8

325 #i‡
__TBB_USE_GENERIC_DWORD_LOAD_STORE
 || 
__TBB_USE_GENERIC_DWORD_FETCH_ADD
 || 
__TBB_USE_GENERIC_DWORD_FETCH_STORE


326 #îr‹ 
The£
 
ma¸os
 
should
 
⁄ly
 
be
 
u£d
 
⁄
 32-
bô
 
∂©f‹ms
.

329 
	#__TBB_Com∑ªAndSw≠W
(
P
,
V
,
C
Ë
	`__TBB_machöe_cmpswp8
(P,V,C)

	)

330 
	#__TBB_FëchAndAddW
(
P
,
V
Ë
	`__TBB_machöe_„tchadd8
(P,V)

	)

331 
	#__TBB_FëchAndSt‹eW
(
P
,
V
Ë
	`__TBB_machöe_„tch°‹e8
(P,V)

	)

333 #îr‹ 
Unsuµ‹ãd
 
machöe
 
w‹d
 
size
.

336 #i‚de‡
__TBB_Pau£


337 
ölöe
 
	$__TBB_Pau£
(
öt32_t
) {

338 
	`__TBB_Yõld
();

339 
	}
}

342 
«me•a˚
 
	gtbb
 {

345 
ölöe
 
©omic_„n˚
 (Ë{ 
__TBB_fuŒ_mem‹y_„n˚
(); }

347 
«me•a˚
 
	göã∫Æ
 {

351 ˛as†
	c©omic_backoff
 : 
no_c›y
 {

355 c⁄° 
öt32_t
 
LOOPS_BEFORE_YIELD
 = 16;

356 
öt32_t
 
	gcou¡
;

357 
	gpublic
:

361 
©omic_backoff
(Ë: 
cou¡
(1) {}

363 
©omic_backoff
–
boﬁ
 ) : 
cou¡
(1Ë{ 
∑u£
(); }

366 
∑u£
() {

367 if–
	gcou¡
<=
LOOPS_BEFORE_YIELD
 ) {

368 
__TBB_Pau£
(
cou¡
);

370 
	gcou¡
*=2;

373 
__TBB_Yõld
();

378 
boﬁ
 
bounded_∑u£
() {

379 if–
	gcou¡
<=
LOOPS_BEFORE_YIELD
 ) {

380 
__TBB_Pau£
(
cou¡
);

382 
	gcou¡
*=2;

383  
	gåue
;

385  
	gÁl£
;

389 
ª£t
() {

390 
	gcou¡
 = 1;

396 
	gãm∂©e
<
ty≥«me
 
	gT
,Åy≥«mê
	gU
>

397 
•ö_waô_whûe_eq
–c⁄° vﬁ©ûê
T
& 
loˇti⁄
, 
U
 
vÆue
 ) {

398 
©omic_backoff
 
	gbackoff
;

399  
	gloˇti⁄
==
vÆue
 ) 
backoff
.
∑u£
();

404 
	gãm∂©e
<
ty≥«me
 
	gT
,Åy≥«mê
	gU
>

405 
•ö_waô_u¡û_eq
–c⁄° vﬁ©ûê
T
& 
loˇti⁄
, c⁄° 
U
 
vÆue
 ) {

406 
©omic_backoff
 
	gbackoff
;

407  
	gloˇti⁄
!=
vÆue
 ) 
backoff
.
∑u£
();

410 
	gãm∂©e
 <
ty≥«me
 
	g¥ediˇã_ty≥
>

411 
•ö_waô_whûe
(
¥ediˇã_ty≥
 
c⁄dôi⁄
){

412 
©omic_backoff
 
	gbackoff
;

413  
c⁄dôi⁄
(ËË
	gbackoff
.
∑u£
();

419 #i‚de‡
__TBB_ENDIANNESS


420 
	#__TBB_ENDIANNESS
 
__TBB_ENDIAN_DETECT


	)

423 #i‡
__TBB_USE_GENERIC_PART_WORD_CAS
 && 
__TBB_ENDIANNESS
==
__TBB_ENDIAN_UNSUPPORTED


424 #îr‹ 
Gíîic
 
im∂emíèti⁄
 
of
 
∑π
-
w‹d
 
CAS
 
may
 
nŸ
 
be
 
u£d
 
wôh
 
__TBB_ENDIAN_UNSUPPORTED


427 #i‡
__TBB_ENDIANNESS
!=
__TBB_ENDIAN_UNSUPPORTED


437 
	gãm∂©e
<
ty≥«me
 
	gT
>

438 
ölöe
 
T
 
__TBB_MaskedCom∑ªAndSw≠
 (vﬁ©ûêT * c⁄° 
±r
, c⁄° T 
vÆue
, c⁄° T 
com∑ønd
 ) {

439 
	sídü¬ess
{ 
boﬁ
 
is_big_ídün
(){

440 #i‡
__TBB_ENDIANNESS
==
__TBB_ENDIAN_DETECT


441 c⁄° 
uöt32_t
 
	g¥obe
 = 0x03020100;

442  (((c⁄° *)(&
	g¥obe
))[0]==0x03);

443 #ñi‡
__TBB_ENDIANNESS
==
__TBB_ENDIAN_BIG
 || __TBB_ENDIANNESS==
__TBB_ENDIAN_LITTLE


444  
	g__TBB_ENDIANNESS
==
__TBB_ENDIAN_BIG
;

446 #îr‹ 
U√x≥˘ed
 
vÆue
 
of
 
__TBB_ENDIANNESS


450 c⁄° 
uöt32_t
 
	gbyã_off£t
 = (uöt32_tË((
uöçå_t
)
±r
 & 0x3);

451 vﬁ©ûê
uöt32_t
 * c⁄° 
	gÆig√d_±r
 = (uöt32_t*)((
uöçå_t
)
±r
 - 
byã_off£t
 );

454 c⁄° 
uöt32_t
 
	gbôs_to_shi·
 = 8*(
ídü¬ess
::
is_big_ídün
(Ë? (4 - (
T
Ë- (
byã_off£t
)) : byte_offset);

455 c⁄° 
uöt32_t
 
	gmask
 = (((uöt32_t)1<<((
T
)*8)Ë- 1 )<<
bôs_to_shi·
;

457 c⁄° 
uöt32_t
 
	gshi·ed_com∑ønd
 = ((uöt32_t)
com∑ønd
 << 
bôs_to_shi·
)&
mask
;

458 c⁄° 
uöt32_t
 
	gshi·ed_vÆue
 = ((uöt32_t)
vÆue
 << 
bôs_to_shi·
)&
mask
;

460  
©omic_backoff
 
	gb
;;b.
∑u£
() ) {

461 c⁄° 
uöt32_t
 
	gsuºoundögs
 = *
Æig√d_±r
 & ~
mask
 ;

462 c⁄° 
uöt32_t
 
	gbig_com∑ønd
 = 
suºoundögs
 | 
shi·ed_com∑ønd
 ;

463 c⁄° 
uöt32_t
 
	gbig_vÆue
 = 
suºoundögs
 | 
shi·ed_vÆue
 ;

466 c⁄° 
uöt32_t
 
	gbig_ªsu…
 = (uöt32_t)
__TBB_machöe_cmpswp4
–
Æig√d_±r
, 
big_vÆue
, 
big_com∑ønd
 );

467 if–
	gbig_ªsu…
 =
big_com∑ønd


468 || ((
big_ªsu…
 ^ 
big_com∑ønd
Ë& 
mask
) != 0)

470  
T
((
big_ªsu…
 & 
mask
Ë>> 
bôs_to_shi·
);

478 
	gãm∂©e
<
size_t
 
	gS
, 
ty≥«me
 
	gT
>

479 
ölöe
 
T
 
__TBB_Com∑ªAndSw≠Gíîic
 (vﬁ©ûê*
±r
, T 
vÆue
, T 
com∑ønd
 );

481 
	gãm∂©e
<>

482 
ölöe
 
öt8_t
 
	g__TBB_Com∑ªAndSw≠Gíîic
 <1,
	göt8_t
> (vﬁ©ûê*
	g±r
, i¡8_à
	gvÆue
, i¡8_à
	gcom∑ønd
 ) {

483 #i‡
__TBB_USE_GENERIC_PART_WORD_CAS


484  
	g__TBB_MaskedCom∑ªAndSw≠
<
	göt8_t
>((vﬁ©ûêöt8_à*)
	g±r
,
	gvÆue
,
	gcom∑ønd
);

486  
__TBB_machöe_cmpswp1
(
±r
,
vÆue
,
com∑ønd
);

490 
	gãm∂©e
<>

491 
ölöe
 
öt16_t
 
	g__TBB_Com∑ªAndSw≠Gíîic
 <2,
	göt16_t
> (vﬁ©ûê*
	g±r
, i¡16_à
	gvÆue
, i¡16_à
	gcom∑ønd
 ) {

492 #i‡
__TBB_USE_GENERIC_PART_WORD_CAS


493  
	g__TBB_MaskedCom∑ªAndSw≠
<
	göt16_t
>((vﬁ©ûêöt16_à*)
	g±r
,
	gvÆue
,
	gcom∑ønd
);

495  
__TBB_machöe_cmpswp2
(
±r
,
vÆue
,
com∑ønd
);

499 
	gãm∂©e
<>

500 
ölöe
 
öt32_t
 
	g__TBB_Com∑ªAndSw≠Gíîic
 <4,
	göt32_t
> (vﬁ©ûê*
	g±r
, i¡32_à
	gvÆue
, i¡32_à
	gcom∑ønd
 ) {

502  (
	göt32_t
)
__TBB_machöe_cmpswp4
(
±r
,
vÆue
,
com∑ønd
);

505 #i‡
__TBB_64BIT_ATOMICS


506 
	gãm∂©e
<>

507 
ölöe
 
öt64_t
 
	g__TBB_Com∑ªAndSw≠Gíîic
 <8,
	göt64_t
> (vﬁ©ûê*
	g±r
, i¡64_à
	gvÆue
, i¡64_à
	gcom∑ønd
 ) {

508  
__TBB_machöe_cmpswp8
(
±r
,
vÆue
,
com∑ønd
);

512 
	gãm∂©e
<
size_t
 
	gS
, 
ty≥«me
 
	gT
>

513 
ölöe
 
T
 
__TBB_FëchAndAddGíîic
 (vﬁ©ûê*
±r
, T 
addíd
) {

514 
T
 
	gªsu…
;

515  
©omic_backoff
 
	gb
;;b.
∑u£
() ) {

516 
	gªsu…
 = *
ªöãΩªt_ˇ°
<vﬁ©ûê
T
 *>(
±r
);

518 if–
	g__TBB_Com∑ªAndSw≠Gíîic
<
	gS
,
	gT
> ( 
	g±r
, 
	gªsu…
+
	gaddíd
,Ñesu… )==
ªsu…
 )

521  
	gªsu…
;

524 
	gãm∂©e
<
size_t
 
	gS
, 
ty≥«me
 
	gT
>

525 
ölöe
 
T
 
__TBB_FëchAndSt‹eGíîic
 (vﬁ©ûê*
±r
, T 
vÆue
) {

526 
T
 
	gªsu…
;

527  
©omic_backoff
 
	gb
;;b.
∑u£
() ) {

528 
	gªsu…
 = *
ªöãΩªt_ˇ°
<vﬁ©ûê
T
 *>(
±r
);

530 if–
	g__TBB_Com∑ªAndSw≠Gíîic
<
	gS
,
	gT
> ( 
	g±r
, 
	gvÆue
, 
	gªsu…
 )==
ªsu…
 )

533  
	gªsu…
;

536 #i‡
__TBB_USE_GENERIC_PART_WORD_CAS


537 
	#__TBB_machöe_cmpswp1
 
tbb
::
öã∫Æ
::
__TBB_Com∑ªAndSw≠Gíîic
<1,
öt8_t
>

	)

538 
	#__TBB_machöe_cmpswp2
 
tbb
::
öã∫Æ
::
__TBB_Com∑ªAndSw≠Gíîic
<2,
öt16_t
>

	)

541 #i‡
__TBB_USE_GENERIC_FETCH_ADD
 || 
__TBB_USE_GENERIC_PART_WORD_FETCH_ADD


542 
	#__TBB_machöe_„tchadd1
 
tbb
::
öã∫Æ
::
__TBB_FëchAndAddGíîic
<1,
öt8_t
>

	)

543 
	#__TBB_machöe_„tchadd2
 
tbb
::
öã∫Æ
::
__TBB_FëchAndAddGíîic
<2,
öt16_t
>

	)

546 #i‡
__TBB_USE_GENERIC_FETCH_ADD


547 
	#__TBB_machöe_„tchadd4
 
tbb
::
öã∫Æ
::
__TBB_FëchAndAddGíîic
<4,
öt32_t
>

	)

550 #i‡
__TBB_USE_GENERIC_FETCH_ADD
 || 
__TBB_USE_GENERIC_DWORD_FETCH_ADD


551 
	#__TBB_machöe_„tchadd8
 
tbb
::
öã∫Æ
::
__TBB_FëchAndAddGíîic
<8,
öt64_t
>

	)

554 #i‡
__TBB_USE_GENERIC_FETCH_STORE
 || 
__TBB_USE_GENERIC_PART_WORD_FETCH_STORE


555 
	#__TBB_machöe_„tch°‹e1
 
tbb
::
öã∫Æ
::
__TBB_FëchAndSt‹eGíîic
<1,
öt8_t
>

	)

556 
	#__TBB_machöe_„tch°‹e2
 
tbb
::
öã∫Æ
::
__TBB_FëchAndSt‹eGíîic
<2,
öt16_t
>

	)

559 #i‡
__TBB_USE_GENERIC_FETCH_STORE


560 
	#__TBB_machöe_„tch°‹e4
 
tbb
::
öã∫Æ
::
__TBB_FëchAndSt‹eGíîic
<4,
öt32_t
>

	)

563 #i‡
__TBB_USE_GENERIC_FETCH_STORE
 || 
__TBB_USE_GENERIC_DWORD_FETCH_STORE


564 
	#__TBB_machöe_„tch°‹e8
 
tbb
::
öã∫Æ
::
__TBB_FëchAndSt‹eGíîic
<8,
öt64_t
>

	)

567 #i‡
__TBB_USE_FETCHSTORE_AS_FULL_FENCED_STORE


568 
	#__TBB_MACHINE_DEFINE_ATOMIC_SELECTOR_FETCH_STORE
(
S
) \

569 
©omic_£À˘‹
<
S
>::
w‹d
átomic_£À˘‹<S>::
	`„tch_°‹e
 ( vﬁ©ûê* 
loˇti⁄
, w‹d 
vÆue
 ) { \

570  
__TBB_machöe_„tch°‹e
##
	`S
–
loˇti⁄
, 
vÆue
 ); \

571 }

	)

573 
__TBB_MACHINE_DEFINE_ATOMIC_SELECTOR_FETCH_STORE
(1)

574 
__TBB_MACHINE_DEFINE_ATOMIC_SELECTOR_FETCH_STORE
(2)

575 
__TBB_MACHINE_DEFINE_ATOMIC_SELECTOR_FETCH_STORE
(4)

576 
__TBB_MACHINE_DEFINE_ATOMIC_SELECTOR_FETCH_STORE
(8)

578 #unde‡
__TBB_MACHINE_DEFINE_ATOMIC_SELECTOR_FETCH_STORE


581 #i‡
__TBB_USE_GENERIC_DWORD_LOAD_STORE


583 #i‡! 
__TBB_USE_FENCED_ATOMICS


586 
	#__TBB_machöe_cmpswp8fuŒ_„n˚
 
__TBB_machöe_cmpswp8


	)

588 
__TBB_MACHINE_DEFINE_LOAD8_GENERIC_FENCED
(
fuŒ_„n˚
)

589 
__TBB_MACHINE_DEFINE_STORE8_GENERIC_FENCED
(
fuŒ_„n˚
)

591 #i‡! 
__TBB_USE_FENCED_ATOMICS


592 #unde‡
__TBB_machöe_cmpswp8fuŒ_„n˚


595 
	#__TBB_machöe_°‹e8
 
tbb
::
öã∫Æ
::
__TBB_machöe_gíîic_°‹e8fuŒ_„n˚


	)

596 
	#__TBB_machöe_lﬂd8
 
tbb
::
öã∫Æ
::
__TBB_machöe_gíîic_lﬂd8fuŒ_„n˚


	)

599 #i‡
__TBB_USE_GENERIC_HALF_FENCED_LOAD_STORE


610 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
size_t
 
	gS
>

611 
	smachöe_lﬂd_°‹e
 {

612 
T
 
lﬂd_wôh_acquúe
 ( c⁄° vﬁ©ûêT& 
loˇti⁄
 ) {

613 
T
 
	gto_ªtu∫
 = 
loˇti⁄
;

614 
__TBB_acquúe_c⁄si°ícy_hñ≥r
();

615  
	gto_ªtu∫
;

617 
°‹e_wôh_ªÀa£
 ( vﬁ©ûê
T
 &
loˇti⁄
, T 
vÆue
 ) {

618 
__TBB_ªÀa£_c⁄si°ícy_hñ≥r
();

619 
	gloˇti⁄
 = 
vÆue
;

624 #i‡
__TBB_WORDSIZE
==4 && 
__TBB_64BIT_ATOMICS


625 
	gãm∂©e
 <
ty≥«me
 
	gT
>

626 
	gmachöe_lﬂd_°‹e
<
	gT
,8> {

627 
T
 
lﬂd_wôh_acquúe
 ( c⁄° vﬁ©ûêT& 
loˇti⁄
 ) {

628  (
	gT
)
__TBB_machöe_lﬂd8
–(c⁄° vﬁ©ûê*)&
loˇti⁄
 );

630 
°‹e_wôh_ªÀa£
 ( vﬁ©ûê
T
& 
loˇti⁄
, T 
vÆue
 ) {

631 
__TBB_machöe_°‹e8
–(vﬁ©ûê*)&
loˇti⁄
, (
öt64_t
)
vÆue
 );

637 #i‡
__TBB_USE_GENERIC_SEQUENTIAL_CONSISTENCY_LOAD_STORE


638 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
size_t
 
	gS
>

639 
	smachöe_lﬂd_°‹e_£q_c°
 {

640 
T
 
lﬂd
 ( c⁄° vﬁ©ûêT& 
loˇti⁄
 ) {

641 
__TBB_fuŒ_mem‹y_„n˚
();

642  
	gmachöe_lﬂd_°‹e
<
	gT
,
	gS
>::
lﬂd_wôh_acquúe
–
loˇti⁄
 );

644 #i‡
__TBB_USE_FETCHSTORE_AS_FULL_FENCED_STORE


645 
°‹e
 ( vﬁ©ûê
T
 &
loˇti⁄
, T 
vÆue
 ) {

646 
	g©omic_£À˘‹
<
	gS
>::
„tch_°‹e
–(vﬁ©ûê*)&
loˇti⁄
, (
ty≥«me
 
©omic_£À˘‹
<
S
>::
w‹d
)
vÆue
 );

649 
°‹e
 ( vﬁ©ûê
T
 &
loˇti⁄
, T 
vÆue
 ) {

650 
	gmachöe_lﬂd_°‹e
<
	gT
,
	gS
>::
°‹e_wôh_ªÀa£
–
loˇti⁄
, 
vÆue
 );

651 
__TBB_fuŒ_mem‹y_„n˚
();

656 #i‡
__TBB_WORDSIZE
==4 && 
__TBB_64BIT_ATOMICS


659 
	gãm∂©e
 <
ty≥«me
 
	gT
>

660 
	gmachöe_lﬂd_°‹e_£q_c°
<
	gT
,8> {

661 
T
 
lﬂd
 ( c⁄° vﬁ©ûêT& 
loˇti⁄
 ) {

664 c⁄° 
öt64_t
 
	g™yvÆue
 = 2305843009213693951LL;

665  
__TBB_machöe_cmpswp8
–(vﬁ©ûê*)
c⁄°_ˇ°
<vﬁ©ûê
T
*>(&
loˇti⁄
), 
™yvÆue
,ányvalue );

667 
°‹e
 ( vﬁ©ûê
T
 &
loˇti⁄
, T 
vÆue
 ) {

668 
öt64_t
 
	gªsu…
 = (vﬁ©ûêöt64_t&)
loˇti⁄
;

669  
__TBB_machöe_cmpswp8
((vﬁ©ûê*)&
loˇti⁄
, (
öt64_t
)
vÆue
, 
ªsu…
) !=Ñesult )

670 
ªsu…
 = (vﬁ©ûê
öt64_t
&)
loˇti⁄
;

676 #i‡
__TBB_USE_GENERIC_RELAXED_LOAD_STORE


681 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
size_t
 
	gS
>

682 
	smachöe_lﬂd_°‹e_ªœxed
 {

683 
ölöe
 
T
 
lﬂd
 ( c⁄° vﬁ©ûêT& 
loˇti⁄
 ) {

684  
	gloˇti⁄
;

686 
ölöe
 
°‹e
 ( vﬁ©ûê
T
& 
loˇti⁄
, T 
vÆue
 ) {

687 
	gloˇti⁄
 = 
vÆue
;

691 #i‡
__TBB_WORDSIZE
==4 && 
__TBB_64BIT_ATOMICS


692 
	gãm∂©e
 <
ty≥«me
 
	gT
>

693 
	gmachöe_lﬂd_°‹e_ªœxed
<
	gT
,8> {

694 
ölöe
 
T
 
lﬂd
 ( c⁄° vﬁ©ûêT& 
loˇti⁄
 ) {

695  (
	gT
)
__TBB_machöe_lﬂd8
–(c⁄° vﬁ©ûê*)&
loˇti⁄
 );

697 
ölöe
 
°‹e
 ( vﬁ©ûê
T
& 
loˇti⁄
, T 
vÆue
 ) {

698 
__TBB_machöe_°‹e8
–(vﬁ©ûê*)&
loˇti⁄
, (
öt64_t
)
vÆue
 );

704 #unde‡
__TBB_WORDSIZE


706 
	gãm∂©e
<
ty≥«me
 
	gT
>

707 
ölöe
 
T
 
__TBB_lﬂd_wôh_acquúe
(c⁄° vﬁ©ûêT &
loˇti⁄
) {

708  
	gmachöe_lﬂd_°‹e
<
	gT
,(T)>::
lﬂd_wôh_acquúe
–
loˇti⁄
 );

710 
	gãm∂©e
<
ty≥«me
 
	gT
,Åy≥«mê
	gV
>

711 
ölöe
 
__TBB_°‹e_wôh_ªÀa£
(vﬁ©ûê
T
& 
loˇti⁄
, 
V
 
vÆue
) {

712 
	gmachöe_lﬂd_°‹e
<
	gT
,(T)>::
°‹e_wôh_ªÀa£
–
loˇti⁄
, 
T
(
vÆue
) );

715 
ölöe
 
__TBB_°‹e_wôh_ªÀa£
(vﬁ©ûê
size_t
& 
loˇti⁄
, size_à
vÆue
) {

716 
	gmachöe_lﬂd_°‹e
<
	gsize_t
,(size_t)>::
°‹e_wôh_ªÀa£
–
loˇti⁄
, 
vÆue
 );

719 
	gãm∂©e
<
ty≥«me
 
	gT
>

720 
ölöe
 
T
 
__TBB_lﬂd_fuŒ_„n˚
(c⁄° vﬁ©ûêT &
loˇti⁄
) {

721  
	gmachöe_lﬂd_°‹e_£q_c°
<
	gT
,(T)>::
lﬂd
–
loˇti⁄
 );

723 
	gãm∂©e
<
ty≥«me
 
	gT
,Åy≥«mê
	gV
>

724 
ölöe
 
__TBB_°‹e_fuŒ_„n˚
(vﬁ©ûê
T
& 
loˇti⁄
, 
V
 
vÆue
) {

725 
	gmachöe_lﬂd_°‹e_£q_c°
<
	gT
,(T)>::
°‹e
–
loˇti⁄
, 
T
(
vÆue
) );

728 
ölöe
 
__TBB_°‹e_fuŒ_„n˚
(vﬁ©ûê
size_t
& 
loˇti⁄
, size_à
vÆue
) {

729 
	gmachöe_lﬂd_°‹e_£q_c°
<
	gsize_t
,(size_t)>::
°‹e
–
loˇti⁄
, 
vÆue
 );

732 
	gãm∂©e
<
ty≥«me
 
	gT
>

733 
ölöe
 
T
 
__TBB_lﬂd_ªœxed
 (c⁄° vﬁ©ûêT& 
loˇti⁄
) {

734  
	gmachöe_lﬂd_°‹e_ªœxed
<
	gT
,(T)>::
lﬂd
–
c⁄°_ˇ°
<
T
&>(
loˇti⁄
) );

736 
	gãm∂©e
<
ty≥«me
 
	gT
,Åy≥«mê
	gV
>

737 
ölöe
 
__TBB_°‹e_ªœxed
 ( vﬁ©ûê
T
& 
loˇti⁄
, 
V
 
vÆue
 ) {

738 
	gmachöe_lﬂd_°‹e_ªœxed
<
	gT
,(T)>::
°‹e
–
c⁄°_ˇ°
<
T
&>(
loˇti⁄
), T(
vÆue
) );

741 
ölöe
 
__TBB_°‹e_ªœxed
 ( vﬁ©ûê
size_t
& 
loˇti⁄
, size_à
vÆue
 ) {

742 
	gmachöe_lﬂd_°‹e_ªœxed
<
	gsize_t
,(size_t)>::
°‹e
–
c⁄°_ˇ°
<
size_t
&>(
loˇti⁄
), 
vÆue
 );

752 #i‚de‡
__TBB_Ty≥WôhAlignmítAtLó°AsSåi˘


754 #i‡
__TBB_ATTRIBUTE_ALIGNED_PRESENT


756 
	#__TBB_DeföeTy≥WôhAlignmít
(
PowîOf2
) \

757 
__TBB_machöe_ty≥_wôh_Æignmít_
##
PowîOf2
 { \

758 
uöt32_t
 
membî
[
PowîOf2
/(uint32_t)]; \

759 } 
	`__©åibuã__
((
	`Æig√d
(
PowîOf2
)));

	)

760 
	#__TBB_Æignof
(
T
Ë
	`__Æignof__
(T)

	)

762 #ñi‡
__TBB_DECLSPEC_ALIGN_PRESENT


764 
	#__TBB_DeföeTy≥WôhAlignmít
(
PowîOf2
) \

765 
	`__de˛•ec
(
	`Æign
(
PowîOf2
)) \

766 
__TBB_machöe_ty≥_wôh_Æignmít_
##
PowîOf2
 { \

767 
uöt32_t
 
membî
[
PowîOf2
/(uint32_t)]; \

768 };

	)

769 
	#__TBB_Æignof
(
T
Ë
	`__Æignof
(T)

	)

772 #îr‹ 
Mu°
 
deföe
 
__TBB_Ty≥WôhAlignmítAtLó°AsSåi˘
(
T
)

777 
__TBB_DeföeTy≥WôhAlignmít
(16)

778 
__TBB_DeföeTy≥WôhAlignmít
(32)

779 
__TBB_DeföeTy≥WôhAlignmít
(64)

781 
__TBB_machöe_ty≥_wôh_Æignmít_64
 
	t__TBB_machöe_ty≥_wôh_°ri˘e°_Æignmít
;

784 
	gãm∂©e
<
size_t
 
	gN
> 
	gty≥_wôh_Æignmít
;

787 
	gãm∂©e
<> 
	gty≥_wôh_Æignmít
<1> { 
	gmembî
; };

788 
	gãm∂©e
<> 
	gty≥_wôh_Æignmít
<2> { 
uöt16_t
 
	gmembî
; };

789 
	gãm∂©e
<> 
	gty≥_wôh_Æignmít
<4> { 
uöt32_t
 
	gmembî
; };

790 
	gãm∂©e
<> 
	gty≥_wôh_Æignmít
<8> { 
uöt64_t
 
	gmembî
; };

791 
	gãm∂©e
<> 
	gty≥_wôh_Æignmít
<16> {
__TBB_machöe_ty≥_wôh_Æignmít_16
 
	gmembî
; };

792 
	gãm∂©e
<> 
	gty≥_wôh_Æignmít
<32> {
__TBB_machöe_ty≥_wôh_Æignmít_32
 
	gmembî
; };

793 
	gãm∂©e
<> 
	gty≥_wôh_Æignmít
<64> {
__TBB_machöe_ty≥_wôh_Æignmít_64
 
	gmembî
; };

795 #i‡
__TBB_ALIGNOF_NOT_INSTANTIATED_TYPES_BROKEN


799 
	gãm∂©e
<
size_t
 
	gSize
, 
ty≥«me
 
	gT
>

800 
	sw‹k_¨ound_Æignmít_bug
 {

801 c⁄° 
size_t
 
	gÆignmít
 = 
__TBB_Æignof
(
T
);

803 
	#__TBB_Ty≥WôhAlignmítAtLó°AsSåi˘
(
T
Ë
tbb
::
öã∫Æ
::
ty≥_wôh_Æignmít
<tbb::öã∫Æ::
w‹k_¨ound_Æignmít_bug
<(T),T>::
Æignmít
>

	)

805 
	#__TBB_Ty≥WôhAlignmítAtLó°AsSåi˘
(
T
Ë
tbb
::
öã∫Æ
::
ty≥_wôh_Æignmít
<
	`__TBB_Æignof
(T)>

	)

811 
	gãm∂©e
<
ty≥«me
 
	gT
>

812 
	sªvî£
 {

813 c⁄° 
T
 
	gbyã_èbÀ
[256];

817 
	gãm∂©e
<
ty≥«me
 
	gT
>

818 c⁄° 
T
 
	gªvî£
<
	gT
>::
byã_èbÀ
[256] = {

841 
usög
 
	gtbb
::
öã∫Æ
::
__TBB_lﬂd_wôh_acquúe
;

842 
usög
 
	gtbb
::
öã∫Æ
::
__TBB_°‹e_wôh_ªÀa£
;

845 
	#__TBB_lﬂd_acquúe
 
__TBB_lﬂd_wôh_acquúe


	)

846 
	#__TBB_°‹e_ªÀa£
 
__TBB_°‹e_wôh_ªÀa£


	)

848 #i‚de‡
__TBB_Log2


849 
ölöe
 
öçå_t
 
	$__TBB_Log2
–
uöçå_t
 
x
 ) {

850 if–
x
==0 )  -1;

851 
öçå_t
 
ªsu…
 = 0;

853 #i‡!
	`deföed
(
_M_ARM
)

854 
uöçå_t
 
tmp
;

855 if–(
x
)>4 && (
tmp
 = ((
uöt64_t
)x)>>32ËË{ xÒmp; 
ªsu…
 += 32; }

857 if–
uöçå_t
 
tmp
 = 
x
>>16 ) { xÒmp; 
ªsu…
 += 16; }

858 if–
uöçå_t
 
tmp
 = 
x
>>8 ) { xÒmp; 
ªsu…
 += 8; }

859 if–
uöçå_t
 
tmp
 = 
x
>>4 ) { xÒmp; 
ªsu…
 += 4; }

860 if–
uöçå_t
 
tmp
 = 
x
>>2 ) { xÒmp; 
ªsu…
 += 2; }

862  (
x
&2)? 
ªsu…
+1:Ñesult;

863 
	}
}

866 #i‚de‡
__TBB_AtomicOR


867 
ölöe
 
	$__TBB_AtomicOR
–vﬁ©ûê*
›î™d
, 
uöçå_t
 
addíd
 ) {

868  
tbb
::
öã∫Æ
::
©omic_backoff
 
b
;;b.
	`∑u£
() ) {

869 
uöçå_t
 
tmp
 = *(vﬁ©ûêuöçå_à*)
›î™d
;

870 
uöçå_t
 
ªsu…
 = 
	`__TBB_Com∑ªAndSw≠W
(
›î™d
, 
tmp
|
addíd
,Åmp);

871 if–
ªsu…
==
tmp
 ) ;

873 
	}
}

876 #i‚de‡
__TBB_AtomicAND


877 
ölöe
 
	$__TBB_AtomicAND
–vﬁ©ûê*
›î™d
, 
uöçå_t
 
addíd
 ) {

878  
tbb
::
öã∫Æ
::
©omic_backoff
 
b
;;b.
	`∑u£
() ) {

879 
uöçå_t
 
tmp
 = *(vﬁ©ûêuöçå_à*)
›î™d
;

880 
uöçå_t
 
ªsu…
 = 
	`__TBB_Com∑ªAndSw≠W
(
›î™d
, 
tmp
&
addíd
,Åmp);

881 if–
ªsu…
==
tmp
 ) ;

883 
	}
}

886 #i‡
__TBB_PREFETCHING


887 #i‚de‡
__TBB_˛_¥e„tch


888 #îr‹ 
This
 
∂©f‹m
 
d€s
 
nŸ
 
deföe
 
ˇche
 
m™agemít
 
¥imôives
 
ªquúed
 
__TBB_PREFETCHING


891 #i‚de‡
__TBB_˛_evi˘


892 
	#__TBB_˛_evi˘
(
p
)

	)

896 #i‚de‡
__TBB_Fœg


897 
	t__TBB_Fœg
;

899 
__TBB_©omic
 
	t__TBB_Fœg
 
	t__TBB_©omic_Êag
;

901 #i‚de‡
__TBB_TryLockByã


902 
ölöe
 
boﬁ
 
	$__TBB_TryLockByã
–
__TBB_©omic_Êag
 &
Êag
 ) {

903  
	`__TBB_machöe_cmpswp1
(&
Êag
,1,0)==0;

904 
	}
}

907 #i‚de‡
__TBB_LockByã


908 
ölöe
 
__TBB_Fœg
 
	$__TBB_LockByã
–
__TBB_©omic_Êag
& 
Êag
 ) {

909 
tbb
::
öã∫Æ
::
©omic_backoff
 
backoff
;

910  !
	`__TBB_TryLockByã
(
Êag
ËË
backoff
.
	`∑u£
();

912 
	}
}

915 #i‚de‡ 
__TBB_U∆ockByã


916 
	#__TBB_U∆ockByã
(
addr
Ë
	`__TBB_°‹e_wôh_ªÀa£
(◊ddr),0)

	)

920 #i‡–
__TBB_x86_32
 || 
__TBB_x86_64
 )

921 
ölöe
 
	$__TBB_TryLockByãElidedC™˚l
(Ë{ 
	`__TBB_machöe_åy_lock_ñided_ˇn˚l
(); 
	}
}

923 
ölöe
 
boﬁ
 
	$__TBB_TryLockByãElided
–
__TBB_©omic_Êag
& 
Êag
 ) {

924 
boﬁ
 
ªs
 = 
	`__TBB_machöe_åy_lock_ñided
–&
Êag
 )!=0;

928 if–!
ªs
 ) 
	`__TBB_TryLockByãElidedC™˚l
();

929  
ªs
;

930 
	}
}

932 
ölöe
 
	$__TBB_LockByãElided
–
__TBB_©omic_Êag
& 
Êag
 )

935 
tbb
::
öã∫Æ
::
	`•ö_waô_whûe_eq
–
Êag
, 1 );

936 if–
	`__TBB_machöe_åy_lock_ñided
–&
Êag
 ) )

940 
	`__TBB_TryLockByãElidedC™˚l
();

942 
	}
}

944 
ölöe
 
	$__TBB_U∆ockByãElided
–
__TBB_©omic_Êag
& 
Êag
 ) {

945 
	`__TBB_machöe_u∆ock_ñided
–&
Êag
 );

946 
	}
}

949 #i‚de‡
__TBB_Revî£Byã


950 
ölöe
 
	$__TBB_Revî£Byã
(
§c
) {

951  
tbb
::
öã∫Æ
::
ªvî£
<>::
byã_èbÀ
[
§c
];

952 
	}
}

955 
	gãm∂©e
<
ty≥«me
 
	gT
>

956 
T
 
	$__TBB_Revî£Bôs
(
T
 
§c
) {

957 
T
 
d°
;

958 *
‹igöÆ
 = (*Ë&
§c
;

959 *
ªvî£d
 = (*Ë&
d°
;

961  
i
 = (
T
)-1; i >= 0; i-- )

962 
ªvî£d
[
i
] = 
	`__TBB_Revî£Byã
–
‹igöÆ
[(
T
)-i-1] );

964  
d°
;

965 
	}
}

	@viper/concurrentqueue-src/benchmarks/tbb/tbb_main.cpp

21 
	~"tbb/tbb_c⁄fig.h
"

22 
	~"tbb_maö.h
"

23 
	~"govîn‹.h
"

24 
	~"m¨kë.h
"

25 
	~"tbb_misc.h
"

26 
	~"ôt_nŸify.h
"

28 
«me•a˚
 
	gtbb
 {

29 
«me•a˚
 
	göã∫Æ
 {

37 c⁄° 
	g_∑d
[
NFS_MaxLöeSize
 - ()] = {};

41 
	gbasic_és
<
	ggíîic_scheduÀr
*> 
	ggovîn‹
::
theTLS
;

42 
	ggovîn‹
::
DeÁu…NumbîOfThªads
;

43 
	grml
::
tbb_Á˘‹y
 
govîn‹
::
theRMLSîvîFa˘‹y
;

44 
boﬁ
 
	ggovîn‹
::
U£Priv©eRML
;

45 c⁄° 
èsk_scheduÀr_öô
 *
	ggovîn‹
::
BlockögTSI
;

46 #i‡
TBB_USE_ASSERT


47 
boﬁ
 
	ggovîn‹
::
IsBlockögTîmö©i⁄InProgªss
;

49 
boﬁ
 
	ggovîn‹
::
is_•ecuœti⁄_íabÀd
;

53 
m¨kë
* 
	gm¨kë
::
theM¨kë
;

54 
	gm¨kë
::
globÆ_m¨kë_muãx_ty≥
 
m¨kë
::
theM¨këMuãx
;

60 
	g©omic
<> 
	g__TBB_InôOn˚
::
cou¡
;

62 
__TBB_©omic_Êag
 
	g__TBB_InôOn˚
::
Inôüliz©i⁄Lock
;

65 
boﬁ
 
	g__TBB_InôOn˚
::
Inôüliz©i⁄D⁄e
;

67 #i‡
DO_ITT_NOTIFY


68 
boﬁ
 
	gITT_Pª£¡
;

69 
boﬁ
 
	gITT_Inôüliz©i⁄D⁄e
;

72 #i‡!(
_WIN32
||
_WIN64
Ë|| 
__TBB_SOURCE_DIRECTLY_INCLUDED


73 
__TBB_InôOn˚
 
	g__TBB_InôOn˚HiddíIn°™˚
;

80 
	ggíîic_scheduÀr
* (*
	gAŒoˇãScheduÀrPå
)–
	g¨ía
*, 
size_t
 
	gödex
 );

82 #i‡
__TBB_OLD_PRIMES_RNG


86 c⁄° 
	gPrimes
[] = {

113 
GëPrime
 ( 
£ed
 ) {

114  
	gPrimes
[
£ed
%((
Primes
)/(Primes[0]))];

122 
	g__TBB_InôOn˚
::
add_ªf
() {

123 if–++
cou¡
==1 )

124 
govîn‹
::
acquúe_ªsour˚s
();

127 
	g__TBB_InôOn˚
::
ªmove_ªf
() {

128 
k
 = --
cou¡
;

129 
__TBB_ASSERT
(
k
>=0,"removed __TBB_InitOnceÑefÅhat wasÇotádded?");

130 if–
	gk
==0 ) {

131 
govîn‹
::
ªÀa£_ªsour˚s
();

132 
ITT_FINI_ITTLIB
();

141 
öôülize_ˇche_Æig√d_Æloˇt‹
();

144 
ScheduÀr_O√TimeInôüliz©i⁄
 ( 
boﬁ
 
ôt_¥e£¡
 );

146 #i‡
DO_ITT_NOTIFY


148 #i‡
__TBB_ITT_STRUCTURE_API


150 
__ôt_domaö
 *
	gfgt_domaö
 = 
NULL
;

152 
	sªsour˚_°rög
 {

153 c⁄° *
	g°r
;

154 
__ôt_°rög_h™dÀ
 *
	gôt_°r_h™dÀ
;

160 
	#TBB_STRING_RESOURCE
–
ödex_«me
, 
°r
 ) { så, 
NULL
 },

	)

161 
ªsour˚_°rög
 
	g°rögs_f‹_ôt
[] = {

162 
	~"tbb/öã∫Æ/_tbb_°rögs.h
"

163 { "num_ªsour˚_°rögs", 
NULL
 }

165 #unde‡
TBB_STRING_RESOURCE


167 
__ôt_°rög_h™dÀ
 *
ITT_gë_°rög_h™dÀ
(
idx
) {

168 
__TBB_ASSERT
(
idx
 >0, 
NULL
);

169  
	gidx
 < 
	gNUM_STRINGS
 ? 
	g°rögs_f‹_ôt
[
idx
].
	gôt_°r_h™dÀ
 : 
NULL
;

172 
ITT_öô_domaös
() {

173 
	gfgt_domaö
 = 
__ôt_domaö_¸óã
–
_T
("tbb.flow") );

174 
	gfgt_domaö
->
	gÊags
 = 1;

177 
ITT_öô_°rögs
() {

178  
	gi
 = 0; i < 
	gNUM_STRINGS
; ++i ) {

179 #i‡
_WIN32
||
_WIN64


180 
	g°rögs_f‹_ôt
[
i
].
	gôt_°r_h™dÀ
 = 
__ôt_°rög_h™dÀ_¸óãA
–
°rögs_f‹_ôt
[i].
°r
 );

182 
	g°rögs_f‹_ôt
[
i
].
	gôt_°r_h™dÀ
 = 
__ôt_°rög_h™dÀ_¸óã
–
°rögs_f‹_ôt
[i].
°r
 );

187 
ITT_öô
() {

188 
ITT_öô_domaös
();

189 
ITT_öô_°rögs
();

196 
ITT_DoUnß„O√TimeInôüliz©i⁄
 () {

197 i‡–!
	gITT_Inôüliz©i⁄D⁄e
 ) {

198 
	gITT_Pª£¡
 = (
__TBB_lﬂd_ôäŸify
()!=0);

199 #i‡
__TBB_ITT_STRUCTURE_API


200 i‡(
	gITT_Pª£¡
Ë
ITT_öô
();

202 
	gITT_Inôüliz©i⁄D⁄e
 = 
åue
;

203 
ITT_SYNC_CREATE
(&
m¨kë
::
theM¨këMuãx
, 
SyncTy≥_GlobÆLock
, 
SyncObj_ScheduÀrInôüliz©i⁄
);

210 
ITT_DoO√TimeInôüliz©i⁄
() {

211 
__TBB_InôOn˚
::
lock
();

212 
ITT_DoUnß„O√TimeInôüliz©i⁄
();

213 
__TBB_InôOn˚
::
u∆ock
();

218 
DoO√TimeInôüliz©i⁄s
() {

219 
suµªss_unu£d_w¨nög
(
_∑d
);

220 
__TBB_InôOn˚
::
lock
();

222 if–!
__TBB_InôOn˚
::
Inôüliz©i⁄D⁄e
 ) {

223 
__TBB_InôOn˚
::
add_ªf
();

224 if–
GëBoﬁEnvú⁄mítV¨übÀ
("TBB_VERSION") )

225 
PrötVîsi⁄
();

226 
boﬁ
 
ôt_¥e£¡
 = 
Ál£
;

227 #i‡
DO_ITT_NOTIFY


228 
ITT_DoUnß„O√TimeInôüliz©i⁄
();

229 
ôt_¥e£¡
 = 
ITT_Pª£¡
;

231 
öôülize_ˇche_Æig√d_Æloˇt‹
();

232 
govîn‹
::
öôülize_rml_Á˘‹y
();

233 
ScheduÀr_O√TimeInôüliz©i⁄
–
ôt_¥e£¡
 );

235 
govîn‹
::
deÁu…_num_thªads
();

237 
govîn‹
::
¥öt_vîsi⁄_öfo
();

238 
PrötExåaVîsi⁄Info
–"Toﬁ†suµ‹t", 
ôt_¥e£¡
 ? "enabled" : "disabled" );

239 
__TBB_InôOn˚
::
Inôüliz©i⁄D⁄e
 = 
åue
;

241 
__TBB_InôOn˚
::
u∆ock
();

244 #i‡(
_WIN32
||
_WIN64
Ë&& !
__TBB_SOURCE_DIRECTLY_INCLUDED


246 "C" 
boﬁ
 
WINAPI
 
DŒMaö
–
HANDLE
 , 
DWORD
 
ªas⁄
, 
LPVOID
 ) {

247  
ªas⁄
 ) {

248 
DLL_PROCESS_ATTACH
:

249 
__TBB_InôOn˚
::
add_ªf
();

251 
DLL_PROCESS_DETACH
:

252 
__TBB_InôOn˚
::
ªmove_ªf
();

255 if–
__TBB_InôOn˚
::
öôüliz©i⁄_d⁄e
() ) {

257 
__TBB_InôOn˚
::
ªmove_ªf
();

260 
DLL_THREAD_DETACH
:

261 
govîn‹
::
ãrmö©e_auto_öôülized_scheduÀr
();

264  
åue
;

268 
ôt_°‹e_poöãr_wôh_ªÀa£_v3
–* 
d°
, * 
§c
 ) {

269 
ITT_NOTIFY
(
sync_ªÀasög
, 
d°
);

270 
__TBB_°‹e_wôh_ªÀa£
(*
°©ic_ˇ°
<**>(
d°
),
§c
);

273 * 
ôt_lﬂd_poöãr_wôh_acquúe_v3
–c⁄° * 
§c
 ) {

274 * 
ªsu…
 = 
__TBB_lﬂd_wôh_acquúe
(*
°©ic_ˇ°
<*c⁄°*>(
§c
));

275 
ITT_NOTIFY
(
sync_acquúed
, 
c⁄°_ˇ°
<*>(
§c
));

276  
ªsu…
;

279 #i‡
DO_ITT_NOTIFY


280 
ˇŒ_ôt_nŸify_v5
(
t
, *
±r
) {

281 
t
) {

282 0: 
ITT_NOTIFY
(
sync_¥ï¨e
, 
±r
); ;

283 1: 
ITT_NOTIFY
(
sync_ˇn˚l
, 
±r
); ;

284 2: 
ITT_NOTIFY
(
sync_acquúed
, 
±r
); ;

285 3: 
ITT_NOTIFY
(
sync_ªÀasög
, 
±r
); ;

289 
ˇŒ_ôt_nŸify_v5
(, * ) {}

292 #i‡
__TBB_ITT_STRUCTURE_API


294 #i‡
DO_ITT_NOTIFY


296 c⁄° 
__ôt_id
 
ôt_nuŒ_id
 = {0, 0, 0};

298 
ölöe
 
__ôt_domaö
* 
gë_ôt_domaö
–
ôt_domaö_íum
 
idx
 ) {

299  ( 
	gidx
 =
ITT_DOMAIN_FLOW
 ) ? 
fgt_domaö
 : 
NULL
;

302 
ölöe
 
ôt_id_make
(
__ôt_id
 *
id
, * 
addr
, 
exåa
) {

303 *
	gid
 = 
__ôt_id_make
(
addr
, 
exåa
);

306 
ölöe
 
ôt_id_¸óã
(c⁄° 
__ôt_domaö
 *
domaö
, 
__ôt_id
 
id
) {

307 
ITTNOTIFY_VOID_D1
(
id_¸óã
, 
domaö
, 
id
);

310 
ôt_make_èsk_group_v7
–
ôt_domaö_íum
 
domaö
, *
group
, 
group_exåa
,

311 *
∑ª¡
, 
∑ª¡_exåa
, 
°rög_ödex
 
«me_ödex
 ) {

312 i‡–
__ôt_domaö
 *
	gd
 = 
gë_ôt_domaö
–
domaö
 ) ) {

313 
__ôt_id
 
group_id
 = 
ôt_nuŒ_id
;

314 
__ôt_id
 
	g∑ª¡_id
 = 
ôt_nuŒ_id
;

315 
ôt_id_make
–&
group_id
, 
group
, 
group_exåa
 );

316 
ôt_id_¸óã
–
d
, 
group_id
 );

317 i‡–
	g∑ª¡
 ) {

318 
ôt_id_make
–&
∑ª¡_id
, 
∑ª¡
, 
∑ª¡_exåa
 );

320 
__ôt_°rög_h™dÀ
 *
	gn
 = 
ITT_gë_°rög_h™dÀ
(
«me_ödex
);

321 
ITTNOTIFY_VOID_D3
(
èsk_group
, 
d
, 
group_id
, 
∑ª¡_id
, 
n
);

325 
ôt_mëad©a_°r_add_v7
–
ôt_domaö_íum
 
domaö
, *
addr
, 
addr_exåa
,

326 
°rög_ödex
 
key
, c⁄° *
vÆue
 ) {

327 i‡–
__ôt_domaö
 *
	gd
 = 
gë_ôt_domaö
–
domaö
 ) ) {

328 
__ôt_id
 
id
 = 
ôt_nuŒ_id
;

329 
ôt_id_make
–&
id
, 
addr
, 
addr_exåa
 );

330 
__ôt_°rög_h™dÀ
 *
	gk
 = 
ITT_gë_°rög_h™dÀ
(
key
);

331 
size_t
 
	gvÆue_Àngth
 = 
°æí
–
vÆue
 );

332 #i‡
_WIN32
||
_WIN64


333 
ITTNOTIFY_VOID_D4
(
mëad©a_°r_addA
, 
d
, 
id
, 
k
, 
vÆue
, 
vÆue_Àngth
);

335 
ITTNOTIFY_VOID_D4
(
mëad©a_°r_add
, 
d
, 
id
, 
k
, 
vÆue
, 
vÆue_Àngth
);

340 
ôt_ªœti⁄_add_v7
–
ôt_domaö_íum
 
domaö
, *
addr0
, 
addr0_exåa
,

341 
ôt_ªœti⁄
 
ªœti⁄
, *
addr1
, 
addr1_exåa
 ) {

342 i‡–
__ôt_domaö
 *
	gd
 = 
gë_ôt_domaö
–
domaö
 ) ) {

343 
__ôt_id
 
id0
 = 
ôt_nuŒ_id
;

344 
__ôt_id
 
	gid1
 = 
ôt_nuŒ_id
;

345 
ôt_id_make
–&
id0
, 
addr0
, 
addr0_exåa
 );

346 
ôt_id_make
–&
id1
, 
addr1
, 
addr1_exåa
 );

347 
ITTNOTIFY_VOID_D3
(
ªœti⁄_add
, 
d
, 
id0
, (
__ôt_ªœti⁄
)
ªœti⁄
, 
id1
);

351 
ôt_èsk_begö_v7
–
ôt_domaö_íum
 
domaö
, *
èsk
, 
èsk_exåa
,

352 *
∑ª¡
, 
∑ª¡_exåa
, 
°rög_ödex
 ) {

353 i‡–
__ôt_domaö
 *
	gd
 = 
gë_ôt_domaö
–
domaö
 ) ) {

354 
__ôt_id
 
èsk_id
 = 
ôt_nuŒ_id
;

355 
__ôt_id
 
	g∑ª¡_id
 = 
ôt_nuŒ_id
;

356 
ôt_id_make
–&
èsk_id
, 
èsk
, 
èsk_exåa
 );

357 i‡–
	g∑ª¡
 ) {

358 
ôt_id_make
–&
∑ª¡_id
, 
∑ª¡
, 
∑ª¡_exåa
 );

360 
ITTNOTIFY_VOID_D3
(
èsk_begö
, 
d
, 
èsk_id
, 
∑ª¡_id
, 
NULL
 );

364 
ôt_èsk_íd_v7
–
ôt_domaö_íum
 
domaö
 ) {

365 i‡–
__ôt_domaö
 *
	gd
 = 
gë_ôt_domaö
–
domaö
 ) ) {

366 
ITTNOTIFY_VOID_D0
(
èsk_íd
, 
d
);

372 
ôt_make_èsk_group_v7
–
ôt_domaö_íum
 
domaö
, *
group
, 
group_exåa
,

373 *
∑ª¡
, 
∑ª¡_exåa
, 
°rög_ödex
 
«me_ödex
 ) { }

375 
ôt_mëad©a_°r_add_v7
–
ôt_domaö_íum
 
domaö
, *
addr
, 
addr_exåa
,

376 
°rög_ödex
 
key
, c⁄° *
vÆue
 ) { }

378 
ôt_ªœti⁄_add_v7
–
ôt_domaö_íum
 
domaö
, *
addr0
, 
addr0_exåa
,

379 
ôt_ªœti⁄
 
ªœti⁄
, *
addr1
, 
addr1_exåa
 ) { }

381 
ôt_èsk_begö_v7
–
ôt_domaö_íum
 
domaö
, *
èsk
, 
èsk_exåa
,

382 * , , 
°rög_ödex
 ) { }

384 
ôt_èsk_íd_v7
–
ôt_domaö_íum
 
domaö
 ) { }

390 * 
ôt_lﬂd_poöãr_v3
–c⁄° * 
§c
 ) {

392 * 
	gªsu…
 = *
°©ic_ˇ°
<*c⁄°*>(
§c
);

393  
	gªsu…
;

396 
ôt_£t_sync_«me_v3
–* 
obj
, c⁄° 
tch¨
* 
«me
) {

397 
ITT_SYNC_RENAME
(
obj
, 
«me
);

398 
suµªss_unu£d_w¨nög
(
obj
 && 
«me
);

	@viper/concurrentqueue-src/benchmarks/tbb/tbb_main.h

21 #i‚de‡
_TBB_tbb_maö_H


22 
	#_TBB_tbb_maö_H


	)

24 
	~"tbb/©omic.h
"

26 
«me•a˚
 
	gtbb
 {

28 
«me•a˚
 
	göã∫Æ
 {

30 
DoO√TimeInôüliz©i⁄s
 ();

39 ˛as†
	c__TBB_InôOn˚
 {

40 
‰õnd
 
DoO√TimeInôüliz©i⁄s
();

41 
‰õnd
 
ITT_DoUnß„O√TimeInôüliz©i⁄
 ();

43 
	g©omic
<> 
	gcou¡
;

46 
acquúe_ªsour˚s
();

49 
ªÀa£_ªsour˚s
();

52 
boﬁ
 
	gInôüliz©i⁄D⁄e
;

59 
__TBB_©omic_Êag
 
	gInôüliz©i⁄Lock
;

61 
	gpublic
:

62 
lock
(Ë{ 
__TBB_LockByã
–
Inôüliz©i⁄Lock
 ); }

64 
u∆ock
(Ë{ 
__TBB_U∆ockByã
–
Inôüliz©i⁄Lock
 ); }

66 
boﬁ
 
öôüliz©i⁄_d⁄e
(Ë{  
__TBB_lﬂd_wôh_acquúe
(
Inôüliz©i⁄D⁄e
); }

71 
__TBB_InôOn˚
(Ë{ 
add_ªf
(); }

75 ~
__TBB_InôOn˚
() {

76 
ªmove_ªf
();

79 if–
öôüliz©i⁄_d⁄e
() ) {

81 
ªmove_ªf
();

85 
add_ªf
();

88 
ªmove_ªf
();

	@viper/concurrentqueue-src/benchmarks/tbb/tbb_misc.cpp

24 
	~"tbb/tbb_°ddef.h
"

25 
	~"tbb_as£π_im∂.h
"

26 
	~"tbb/tbb_ex˚±i⁄.h
"

27 
	~"tbb/tbb_machöe.h
"

28 
	~"tbb_misc.h
"

29 
	~<c°dio
>

30 
	~<c°dlib
>

31 
	~<°dex˚±
>

33 #i‡
_WIN32
||
_WIN64


34 
	~"tbb/machöe/wödows_≠i.h
"

37 #i‡!
TBB_USE_EXCEPTIONS
 && 
_MSC_VER


39 #¥agm®
w¨nög
 (
push
)

40 #¥agm®
w¨nög
 (
dißbÀ
: 4530)

43 
	~<c°rög
>

45 #i‡!
TBB_USE_EXCEPTIONS
 && 
_MSC_VER


46 #¥agm®
w¨nög
 (
p›
)

49 
usög
 
«me•a˚
 
	g°d
;

51 
«me•a˚
 
	gtbb
 {

53 c⁄° * 
	gbad_œ°_Æloc
::
wh©
(Ëc⁄° 
throw
() {  "badállocation inÖrevious or concurrentáttempt"; }

54 c⁄° * 
	gim¥›î_lock
::
wh©
(Ëc⁄° 
throw
() {  "attemptedÑecursiveÜock on critical section orÇon-recursive mutex"; }

55 c⁄° * 
	gu£r_ab‹t
::
wh©
(Ëc⁄° 
throw
() {  "User-initiatedábort hasÅerminatedÅhis operation"; }

56 c⁄° * 
	gövÆid_mu…ùÀ_schedulög
::
wh©
(Ëc⁄° 
throw
() {  "The sameÅask_handle object cannot beÉxecuted moreÅhan once"; }

57 c⁄° * 
	gmissög_waô
::
wh©
(Ëc⁄° 
throw
() {  "wait() wasÇot called onÅhe structured_task_group"; }

59 
«me•a˚
 
	göã∫Æ
 {

61 #i‡
TBB_USE_EXCEPTIONS


62 
	#DO_THROW
(
exc
, 
öô_¨gs
Ë
throw
Éx¯öô_¨gs;

	)

64 
	#PRINT_ERROR_AND_ABORT
(
exc_«me
, 
msg
) \

65 
	`Ârötf
 (
°dîr
, "Exception %s with message %s would've beenÅhrown, " \

66 "i‡ex˚±i⁄ h™dlög wîênŸ dißbÀd. Ab‹tög.\n", 
exc_«me
, 
msg
); \

67 
	`fÊush
(
°dîr
); \

68 
	`ab‹t
();

	)

69 
	#DO_THROW
(
exc
, 
öô_¨gs
Ë
	`PRINT_ERROR_AND_ABORT
(#exc, #öô_¨gs)

	)

80 
h™dÀ_≥º‹
–
îr‹_code
, c⁄° * 
wh©
 ) {

81 
	gbuf
[256];

82 #i‡
_MSC_VER


83 
	#¢¥ötf
 
_¢¥ötf


	)

85 
	gwrôãn
 = 
¢¥ötf
(
buf
, (buf), "%s: %s", 
wh©
, 
°ªº‹
–
îr‹_code
 ));

87 
__TBB_ASSERT_EX
–
wrôãn
>0 && wrôãn<()(
buf
), "Error description isÅooÜong" );

89 
	gbuf
[(
buf
)-1] = 0;

90 #i‡
TBB_USE_EXCEPTIONS


91 
throw
 
ru¡ime_îr‹
(
buf
);

93 
PRINT_ERROR_AND_ABORT
–"ru¡ime_îr‹", 
buf
);

97 #i‡
_WIN32
||
_WIN64


98 
h™dÀ_wö_îr‹
–
îr‹_code
 ) {

99 
	gbuf
[512];

100 #i‡!
__TBB_WIN8UI_SUPPORT


101 
F‹m©MesßgeA
–
FORMAT_MESSAGE_FROM_SYSTEM
 | 
FORMAT_MESSAGE_IGNORE_INSERTS
,

102 
NULL
, 
îr‹_code
, 0, 
buf
, (buf), NULL );

105 
•rötf_s
((*)&
buf
, 512, "îr‹ codê%d", 
îr‹_code
);

107 #i‡
TBB_USE_EXCEPTIONS


108 
throw
 
ru¡ime_îr‹
(
buf
);

110 
PRINT_ERROR_AND_ABORT
–"ru¡ime_îr‹", 
buf
);

115 
throw_bad_œ°_Æloc_ex˚±i⁄_v4
() {

116 
throw_ex˚±i⁄_v4
(
eid_bad_œ°_Æloc
);

119 
throw_ex˚±i⁄_v4
 ( 
ex˚±i⁄_id
 
eid
 ) {

120 
__TBB_ASSERT
 ( 
eid
 > 0 &&Éid < 
eid_max
, "UnknownÉxception ID" );

121  
	geid
 ) {

122 
	geid_bad_Æloc
: 
DO_THROW
–
bad_Æloc
, () );

123 
	geid_bad_œ°_Æloc
: 
DO_THROW
–
bad_œ°_Æloc
, () );

124 
	geid_n⁄posôive_°ï
: 
DO_THROW
–
övÆid_¨gumít
, ("Step must beÖositive") );

125 
	geid_out_of_ønge
: 
DO_THROW
–
out_of_ønge
, ("Index out ofÑequested sizeÑange") );

126 
	geid_£gmít_ønge_îr‹
: 
DO_THROW
–
ønge_îr‹
, ("Index out ofállocated segment slots") );

127 
	geid_ödex_ønge_îr‹
: 
DO_THROW
–
ønge_îr‹
, ("Index isÇotállocated") );

128 
	geid_missög_waô
: 
DO_THROW
–
missög_waô
, () );

129 
	geid_övÆid_mu…ùÀ_schedulög
: 
DO_THROW
–
övÆid_mu…ùÀ_schedulög
, () );

130 
	geid_im¥›î_lock
: 
DO_THROW
–
im¥›î_lock
, () );

131 
	geid_possibÀ_dódlock
: 
DO_THROW
–
ru¡ime_îr‹
, ("Resource deadlock would occur") );

132 
	geid_›î©i⁄_nŸ_≥rmôãd
: 
DO_THROW
–
ru¡ime_îr‹
, ("OperationÇotÖermitted") );

133 
	geid_c⁄dv¨_waô_Áûed
: 
DO_THROW
–
ru¡ime_îr‹
, ("Wait on condition variable failed") );

134 
	geid_övÆid_lﬂd_Á˘‹
: 
DO_THROW
–
out_of_ønge
, ("Invalid hashÜoad factor") );

135 
	geid_ª£rved
: 
DO_THROW
–
out_of_ønge
, ("[backward compatibility] InvalidÇumber of buckets") );

136 
	geid_övÆid_sw≠
: 
DO_THROW
–
övÆid_¨gumít
, ("swap() is invalid onÇon-equalállocators") );

137 
	geid_ª£rv©i⁄_Àngth_îr‹
: 
DO_THROW
–
Àngth_îr‹
, ("reservation sizeÉxceedsÖermitted max size") );

138 
	geid_övÆid_key
: 
DO_THROW
–
out_of_ønge
, ("invalid key") );

139 
	geid_u£r_ab‹t
: 
DO_THROW
–
u£r_ab‹t
, () );

140 
	geid_bad_ègged_msg_ˇ°
: 
DO_THROW
–
ru¡ime_îr‹
, ("IllegalÅagged_msg cast") );

141 #i‡
__TBB_SUPPORTS_WORKERS_WAITING_IN_TERMINATE


142 
	geid_blockög_sch_öô
: 
DO_THROW
–
ru¡ime_îr‹
, ("Nesting of blockingÅermination is impossible") );

146 #i‡!
TBB_USE_EXCEPTIONS
 && 
__APPLE__


147 
out_of_ønge
 
e1
("");

148 
Àngth_îr‹
 
e2
("");

149 
ønge_îr‹
 
e3
("");

150 
övÆid_¨gumít
 
e4
("");

154 #i‡
_XBOX
 || 
__TBB_WIN8UI_SUPPORT


155 
boﬁ
 
GëBoﬁEnvú⁄mítV¨übÀ
–c⁄° * ) {  
	gÁl£
;}

157 
boﬁ
 
GëBoﬁEnvú⁄mítV¨übÀ
–c⁄° * 
«me
 ) {

158 if–c⁄° * 
	gs
 = 
gëív
(
«me
) )

159  
°rcmp
(
s
,"0") != 0;

160  
	gÁl£
;

164 
	~"tbb_vîsi⁄.h
"

167 c⁄° 
	gVîsi⁄Såög
[] = "\0" 
TBB_VERSION_STRINGS
;

169 
boﬁ
 
	gPrötVîsi⁄Fœg
 = 
Ál£
;

171 
PrötVîsi⁄
() {

172 
	gPrötVîsi⁄Fœg
 = 
åue
;

173 
Âuts
(
Vîsi⁄Såög
+1,
°dîr
);

176 
PrötExåaVîsi⁄Info
–c⁄° * 
ˇãg‹y
, c⁄° * 
f‹m©
, ... ) {

177 if–
	gPrötVîsi⁄Fœg
 ) {

178 
	g°r
[1024]; 
mem£t
(
°r
, 0, 1024);

179 
va_li°
 
	g¨gs
; 
va_°¨t
(
¨gs
, 
f‹m©
);

181 
v¢¥ötf
–
°r
, 1024-1, 
f‹m©
, 
¨gs
);

182 
va_íd
(
¨gs
);

183 
Ârötf
(
°dîr
, "TBB: %s\t%s\n", 
ˇãg‹y
, 
°r
 );

187 
PrötRMLVîsi⁄Info
–* 
¨g
, c⁄° * 
£rvî_öfo
 ) {

188 
PrötExåaVîsi⁄Info
–
£rvî_öfo
, (c⁄° *)
¨g
 );

192 #i‡
_MSC_VER


193 
	~<öåö.h
>

195 
boﬁ
 
˝u_has_•ecuœti⁄
() {

196 #i‡
__TBB_TSX_AVAILABLE


197 #i‡(
__INTEL_COMPILER
 || 
__GNUC__
 || 
_MSC_VER
 || 
__SUNPRO_CC
)

198 
boﬁ
 
	gªsu…
 = 
Ál£
;

199 c⁄° 
	ghÀ_ebx_mask
 = 1<<4;

200 #i‡
_MSC_VER


201 
	göfo
[4] = {0,0,0,0};

202 c⁄° 
	gªg_ebx
 = 1;

203 
__˝uidex
(
öfo
, 7, 0);

204 
	gªsu…
 = (
öfo
[
ªg_ebx
] & 
hÀ_ebx_mask
)!=0;

205 #ñi‡
__GNUC__
 || 
__SUNPRO_CC


206 
öt32_t
 
	gªg_ebx
 = 0;

207 
öt32_t
 
	gªg_óx
 = 7;

208 
öt32_t
 
	gªg_ecx
 = 0;

209 
__asm__
 
__vﬁ©ûe__
 ( "movl %%ebx, %%esi\n"

213 : "˜"(
ªg_ebx
Ë: "0" (
ªg_óx
), "c" (
ªg_ecx
) : "esi",

214 #i‡
__TBB_x86_64


219 
	gªsu…
 = (
ªg_ebx
 & 
hÀ_ebx_mask
)!=0 ;

221  
	gªsu…
;

223 #îr‹ 
S≥cuœti⁄
 
dëe˘i⁄
 
nŸ
 
íabÀd
 
compûî


226  
	gÁl£
;

232 "C" 
TBB_ru¡ime_öãrÁ˚_vîsi⁄
() {

233  
TBB_INTERFACE_VERSION
;

238 #i‡!
__TBB_RML_STATIC


239 #i‡
__TBB_x86_32


241 
	~"tbb/©omic.h
"

244 #i‡
_MSC_VER


245 
usög
 
tbb
::
öã∫Æ
::
öt64_t
;

249 "C" 
	$__TBB_machöe_°‹e8_¶ow_≥rf_w¨nög
–vﬁ©ûê*
±r
 ) {

251 c⁄° 
n
 = 4;

252 
tbb
::
©omic
<*> 
ˇche
[
n
];

253 
tbb
::
©omic
<> 
k
;

254  
i
=0; i<
n
; ++i )

255 if–
±r
==
ˇche
[
i
] )

256 
d⁄e
;

257 
ˇche
[(
k
++)%
n
] = 
c⁄°_ˇ°
<*>(
±r
);

258 
tbb
::
öã∫Æ
::
	`ru¡ime_w¨nög
–"©omi¯°‹ê⁄ mißlig√d 8-byãÜoˇti⁄ %∞i†¶ow", 
±r
 );

259 
d⁄e
:;

260 
	}
}

263 "C" 
	$__TBB_machöe_°‹e8_¶ow
–vﬁ©ûê*
±r
, 
öt64_t
 
vÆue
 ) {

264  
tbb
::
öã∫Æ
::
©omic_backoff
 
b
;;b.
	`∑u£
() ) {

265 
öt64_t
 
tmp
 = *(öt64_t*)
±r
;

266 if–
	`__TBB_machöe_cmpswp8
(
±r
,
vÆue
,
tmp
)==tmp )

269 
	}
}

274 #i‡
__TBB_ùf


278 "C" 
öçå_t
 
	$__TBB_machöe_lockbyã
–vﬁ©ûê& 
Êag
 ) {

279 
tbb
::
öã∫Æ
::
©omic_backoff
 
backoff
;

280  !
	`__TBB_TryLockByã
(
Êag
ËË
backoff
.
	`∑u£
();

282 
	}
}

	@viper/concurrentqueue-src/benchmarks/tbb/tbb_misc.h

21 #i‚de‡
_TBB_tbb_misc_H


22 
	#_TBB_tbb_misc_H


	)

24 
	~"tbb/tbb_°ddef.h
"

25 
	~"tbb/tbb_machöe.h
"

26 
	~"tbb/©omic.h
"

28 #i‡
__löux__
 || 
__FªeBSD__


29 
	~<sys/∑øm.h
>

30 #i‡
__FªeBSD_vîsi⁄
 >= 701000

31 
	~<sys/˝u£t.h
>

36 
	#__TBB_OS_AFFINITY_SYSCALL_PRESENT
 ((
__löux__
 && !
__ANDROID__
Ë|| (
__FªeBSD_vîsi⁄
 >701000))

	)

39 
	#__TBB_USE_OS_AFFINITY_SYSCALL
 (
__TBB_OS_AFFINITY_SYSCALL_PRESENT
 && !
__bg__
)

	)

41 
«me•a˚
 
	gtbb
 {

42 
«me•a˚
 
	göã∫Æ
 {

44 c⁄° 
size_t
 
	gMByã
 = 1024*1024;

46 #i‡
__TBB_WIN8UI_SUPPORT


50 c⁄° 
size_t
 
	gThªadSèckSize
 = 1*
MByã
;

52 c⁄° 
size_t
 
	gThªadSèckSize
 = ((
uöçå_t
Ë<4 ? 2 : 4 )*
MByã
;

55 #i‚de‡
__TBB_H¨dw¨eC⁄cuºícy


58 
AvaûabÀHwC⁄cuºícy
();

62 
ölöe
 
AvaûabÀHwC⁄cuºícy
() {

63 
	gn
 = 
__TBB_H¨dw¨eC⁄cuºícy
();

64  
	gn
 > 0 ?Ç : 1;

69 #i‡
_WIN32
||
_WIN64


73 
NumbîOfPro˚ss‹Groups
();

76 
FödPro˚ss‹GroupIndex
 ( 
¥o˚ss‹Index
 );

79 
MoveThªadI¡oPro˚ss‹Group
–* 
hThªad
, 
groupIndex
 );

84 
h™dÀ_wö_îr‹
–
îr‹_code
 );

87 
boﬁ
 
GëBoﬁEnvú⁄mítV¨übÀ
–c⁄° * 
«me
 );

90 
PrötVîsi⁄
();

93 
PrötExåaVîsi⁄Info
–c⁄° * 
ˇãg‹y
, c⁄° * 
f‹m©
, ... );

96 
PrötRMLVîsi⁄Info
–* 
¨g
, c⁄° * 
£rvî_öfo
 );

99 #i‡
deföed
(
mö
Ë|| deföed(
max
)

100 #unde‡
mö


101 #unde‡
max


108 
	gãm∂©e
<
ty≥«me
 
	gT1
,Åy≥«mê
	gT2
>

109 
T1
 
mö
 ( c⁄° T1& 
vÆ1
, c⁄° 
T2
& 
vÆ2
 ) {

110  
	gvÆ1
 < 
	gvÆ2
 ? vÆ1 : 
vÆ2
;

117 
	gãm∂©e
<
ty≥«me
 
	gT1
,Åy≥«mê
	gT2
>

118 
T1
 
max
 ( c⁄° T1& 
vÆ1
, c⁄° 
T2
& 
vÆ2
 ) {

119  
	gvÆ1
 < 
	gvÆ2
 ? vÆ2 : 
vÆ1
;

123 
	gãm∂©e
<> 
	söt_to_ty≥
 {};

130 
GëPrime
 ( 
£ed
 );

134 ˛as†
	cFa°R™dom
 {

135 
	g¥iv©e
:

136 #i‡
__TBB_OLD_PRIMES_RNG


137 
x
, 
	ga
;

138 c⁄° 
	gc
 = 1;

140 
	gx
, 
	gc
;

141 c⁄° 
	ga
 = 0x9e3779b1;

143 
	gpublic
:

145 
gë
() {

146  
gë
(
x
);

149 
gë
–& 
£ed
 ) {

150 
	gr
 = ()(
£ed
>>16);

151 
__TBB_ASSERT
(
c
&1, "c must be odd for bigÑngÖeriod");

152 
	g£ed
 = 
£ed
*
a
+
c
;

153  
	gr
;

156 
Fa°R™dom
–* 
unique_±r
 ) { 
öô
(
uöçå_t
(unique_ptr)); }

157 
Fa°R™dom
–
uöt32_t
 
£ed
Ë{ 
öô
(seed); }

158 
Fa°R™dom
–
uöt64_t
 
£ed
Ë{ 
öô
(seed); }

159 
	gãm∂©e
 <
ty≥«me
 
	gT
>

160 
öô
–
T
 
£ed
 ) {

161 
öô
(
£ed
,
öt_to_ty≥
<(seed)>());

163 
öô
–
uöt64_t
 
£ed
 , 
öt_to_ty≥
<8> ) {

164 
öô
(
uöt32_t
((
£ed
>>32)+£ed), 
öt_to_ty≥
<4>());

166 
öô
–
uöt32_t
 
£ed
, 
öt_to_ty≥
<4> ) {

167 #i‡
__TBB_OLD_PRIMES_RNG


168 
	gx
 = 
£ed
;

169 
	ga
 = 
GëPrime
–
£ed
 );

172 
	gc
 = (
£ed
|1)*0xba5703f5;

173 
	gx
 = 
c
^(
£ed
>>1);

184 
	gãm∂©e
<
ty≥«me
 
	gT1
,Åy≥«mê
	gT2
, 
˛ass
 
	gPªd
>

185 
T1
 
©omic_upd©e
 ( 
tbb
::
©omic
<T1>& 
d°
, 
T2
 
√wVÆue
, 
Pªd
 
com∑ª
 ) {

186 
T1
 
	gﬁdVÆue
 = 
d°
;

187  
com∑ª
(
ﬁdVÆue
, 
√wVÆue
) ) {

188 i‡–
	gd°
.
com∑ª_™d_sw≠
((
T1
)
√wVÆue
, 
ﬁdVÆue
) == oldValue )

190 
	gﬁdVÆue
 = 
d°
;

192  
	gﬁdVÆue
;

196 
	edo_⁄˚_°©e
 {

197 
	gdo_⁄˚_unöôülized
 = 0,

198 
	gdo_⁄˚_≥ndög
,

199 
	gdo_⁄˚_execuãd
,

200 
	göôüliz©i⁄_com∂ëe
 = 
do_⁄˚_execuãd


211 
	gãm∂©e
 <
ty≥«me
 
	gF
>

212 
©omic_do_⁄˚
 ( c⁄° 
F
& 
öôülizî
, 
©omic
<
do_⁄˚_°©e
>& 
°©e
 ) {

219  
	g°©e
 !
do_⁄˚_execuãd
 ) {

220 if–
°©e
 =
do_⁄˚_unöôülized
 ) {

221 if–
°©e
.
com∑ª_™d_sw≠
–
do_⁄˚_≥ndög
, 
do_⁄˚_unöôülized
 ) == do_once_uninitialized ) {

222 
run_öôülizî
–
öôülizî
, 
°©e
 );

226 
•ö_waô_whûe_eq
–
°©e
, 
do_⁄˚_≥ndög
 );

231 
ölöe
 
run_öôülizî
–(*
f
)(), 
©omic
<
do_⁄˚_°©e
>& 
°©e
 ) {

232 
f
();

233 
	g°©e
 = 
do_⁄˚_execuãd
;

237 
ölöe
 
run_öôülizî
–
boﬁ
 (*
f
)(), 
©omic
<
do_⁄˚_°©e
>& 
°©e
 ) {

238 
	g°©e
 = 
f
(Ë? 
do_⁄˚_execuãd
 : 
do_⁄˚_unöôülized
;

241 #i‡
__TBB_USE_OS_AFFINITY_SYSCALL


242 #i‡
__löux__


243 
˝u_£t_t
 
	tbasic_mask_t
;

244 #ñi‡
__FªeBSD_vîsi⁄
 >= 701000

245 
˝u£t_t
 
	tbasic_mask_t
;

247 #îr‹ 
afföôy_hñ≥r
 
is
 
nŸ
 
im∂emíãd
 
ö
 
this
 
OS


249 ˛as†
	cafföôy_hñ≥r
 : 
no_c›y
 {

250 
basic_mask_t
* 
thªadMask
;

251 
	gis_ch™ged
;

252 
	gpublic
:

253 
afföôy_hñ≥r
(Ë: 
thªadMask
(
NULL
), 
is_ch™ged
(0) {}

254 ~
afföôy_hñ≥r
();

255 
¥Ÿe˘_afföôy_mask
();

258 ˛as†
	cafföôy_hñ≥r
 : 
no_c›y
 {

259 
public
:

260 
¥Ÿe˘_afföôy_mask
() {}

264 
boﬁ
 
˝u_has_•ecuœti⁄
();

	@viper/concurrentqueue-src/benchmarks/tbb/tbb_misc_ex.cpp

24 
	~"tbb_misc.h
"

26 #i‡!
deföed
(
__TBB_H¨dw¨eC⁄cuºícy
)

28 
	~"dy«mic_lök.h
"

29 
	~<°dio.h
>

30 
	~<limôs.h
>

32 #i‡
_WIN32
||
_WIN64


33 
	~"tbb/machöe/wödows_≠i.h
"

34 #i‡
__TBB_WIN8UI_SUPPORT


35 
	~<thªad
>

38 
	~<uni°d.h
>

39 #i‡
__löux__


40 
	~<sys/sysöfo.h
>

41 
	~<°rög.h
>

42 
	~<sched.h
>

43 
	~<î∫o.h
>

44 #ñi‡
__sun


45 
	~<sys/sysöfo.h
>

46 #ñi‡
__FªeBSD__


47 
	~<î∫o.h
>

48 
	~<°rög.h
>

49 
	~<sys/∑øm.h
>

50 
	~<sys/˝u£t.h
>

54 
«me•a˚
 
	gtbb
 {

55 
«me•a˚
 
	göã∫Æ
 {

57 #i‡
__TBB_USE_OS_AFFINITY_SYSCALL


59 
£t_afföôy_mask
–
size_t
 
maskSize
, c⁄° 
basic_mask_t
* 
thªadMask
 ) {

60 #i‡
__löux__


61 if–
sched_£èfföôy
–0, 
maskSize
, 
thªadMask
 ) )

63 if–
˝u£t_£èfföôy
–
CPU_LEVEL_WHICH
, 
CPU_WHICH_TID
, -1, 
maskSize
, 
thªadMask
 ) )

65 
ru¡ime_w¨nög
( "setaffinity syscall failed" );

68 
gë_afföôy_mask
–
size_t
 
maskSize
, 
basic_mask_t
* 
thªadMask
 ) {

69 #i‡
__löux__


70 if–
sched_gëafföôy
–0, 
maskSize
, 
thªadMask
 ) )

72 if–
˝u£t_gëafföôy
–
CPU_LEVEL_WHICH
, 
CPU_WHICH_TID
, -1, 
maskSize
, 
thªadMask
 ) )

74 
ru¡ime_w¨nög
( "getaffinity syscall failed" );

77 
basic_mask_t
* 
	g¥o˚ss_mask
;

78 
	gnum_masks
;

79 
	s¥o˚ss_mask_˛ónup_hñ≥r
 {

80 ~
¥o˚ss_mask_˛ónup_hñ≥r
() {

81 if–
	g¥o˚ss_mask
 ) {

82 
	gdñëe
 [] 
	g¥o˚ss_mask
;

86 
¥o˚ss_mask_˛ónup_hñ≥r
 
	g¥o˚ss_mask_˛ónup
;

88 
	#curMaskSize
 (
basic_mask_t
Ë* 
num_masks


	)

89 
	gafföôy_hñ≥r
::~
afföôy_hñ≥r
() {

90 if–
thªadMask
 ) {

91 if–
is_ch™ged
 ) {

92 
£t_afföôy_mask
–
curMaskSize
, 
thªadMask
 );

94 
	gdñëe
 [] 
	gthªadMask
;

97 
	gafföôy_hñ≥r
::
¥Ÿe˘_afföôy_mask
() {

98 if–
thªadMask
 =
NULL
 && 
num_masks
 && 
¥o˚ss_mask
 ) {

99 
thªadMask
 = 
√w
 
basic_mask_t
 [
num_masks
];

100 
mem£t
–
thªadMask
, 0, 
curMaskSize
 );

101 
gë_afföôy_mask
–
curMaskSize
, 
thªadMask
 );

102 
	gis_ch™ged
 = 
memcmp
–
¥o˚ss_mask
, 
thªadMask
, 
curMaskSize
 );

103 if–
	gis_ch™ged
 ) {

104 
£t_afföôy_mask
–
curMaskSize
, 
¥o˚ss_mask
 );

108 #unde‡
curMaskSize


110 
	g©omic
<
	gdo_⁄˚_°©e
> 
	gh¨dw¨e_c⁄cuºícy_öfo
;

112 
	gtheNumProcs
;

114 
öôülize_h¨dw¨e_c⁄cuºícy_öfo
 () {

115 
	gîr
;

116 
	gavaûabÀProcs
 = 0;

117 
	gnumMasks
 = 1;

118 #i‡
__löux__


119 #i‡
__TBB_MAIN_THREAD_AFFINITY_BROKEN


120 
	gmaxProcs
 = 
INT_MAX
;

121 
	gpid
 = 0;

123 
	gmaxProcs
 = 
sysc⁄f
(
_SC_NPROCESSORS_ONLN
);

124 
	gpid
 = 
gëpid
();

126 
˝u_£t_t
 *
	g¥o˚ssMask
;

127 c⁄° 
size_t
 
	gBasicMaskSize
 = (
˝u_£t_t
);

129 
	gcurMaskSize
 = 
BasicMaskSize
 * 
numMasks
;

130 
	g¥o˚ssMask
 = 
√w
 
˝u_£t_t
[
numMasks
];

131 
mem£t
–
¥o˚ssMask
, 0, 
curMaskSize
 );

132 
	gîr
 = 
sched_gëafföôy
–
pid
, 
curMaskSize
, 
¥o˚ssMask
 );

133 i‡–!
	gîr
 || 
	gî∫o
 !
EINVAL
 || 
curMaskSize
 * 
CHAR_BIT
 >= 256 * 1024 )

135 
	gdñëe
[] 
	g¥o˚ssMask
;

136 
	gnumMasks
 <<= 1;

139 
	gmaxProcs
 = 
sysc⁄f
(
_SC_NPROCESSORS_ONLN
);

140 
˝u£t_t
 *
	g¥o˚ssMask
;

141 c⁄° 
size_t
 
	gBasicMaskSize
 = (
˝u£t_t
);

143 
	gcurMaskSize
 = 
BasicMaskSize
 * 
numMasks
;

144 
	g¥o˚ssMask
 = 
√w
 
˝u£t_t
[
numMasks
];

145 
mem£t
–
¥o˚ssMask
, 0, 
curMaskSize
 );

147 #i‡
__TBB_MAIN_THREAD_AFFINITY_BROKEN


148 
	gîr
 = 
˝u£t_gëafföôy
–
CPU_LEVEL_WHICH
, 
CPU_WHICH_TID
, -1, 
curMaskSize
, 
¥o˚ssMask
 );

150 
	gîr
 = 
˝u£t_gëafföôy
–
CPU_LEVEL_WHICH
, 
CPU_WHICH_PID
, -1, 
curMaskSize
, 
¥o˚ssMask
 );

152 i‡–!
	gîr
 || 
	gî∫o
 !
ERANGE
 || 
curMaskSize
 * 
CHAR_BIT
 >= 16 * 1024 )

154 
	gdñëe
[] 
	g¥o˚ssMask
;

155 
	gnumMasks
 <<= 1;

158 i‡–!
	gîr
 ) {

159  
	gm
 = 0; 
	gavaûabÀProcs
 < 
	gmaxProcs
 && m < 
	gnumMasks
; ++m ) {

160  
size_t
 
	gi
 = 0; (
	gavaûabÀProcs
 < 
	gmaxProcs
Ë&& (ò< 
BasicMaskSize
 * 
	gCHAR_BIT
); ++i ) {

161 i‡–
CPU_ISSET
–
i
, 
¥o˚ssMask
 + 
m
 ) )

162 ++
	gavaûabÀProcs
;

165 
	gnum_masks
 = 
numMasks
;

166 
	g¥o˚ss_mask
 = 
¥o˚ssMask
;

169 
	gavaûabÀProcs
 = (
maxProcs
 =
INT_MAX
Ë? 
sysc⁄f
(
_SC_NPROCESSORS_ONLN
) : maxProcs;

170 
	gdñëe
[] 
	g¥o˚ssMask
;

172 
	gtheNumProcs
 = 
avaûabÀProcs
 > 0 ?ávailableProcs : 1;

173 
__TBB_ASSERT
–
theNumProcs
 <
sysc⁄f
(
_SC_NPROCESSORS_ONLN
), 
NULL
 );

176 
AvaûabÀHwC⁄cuºícy
() {

177 
©omic_do_⁄˚
–&
öôülize_h¨dw¨e_c⁄cuºícy_öfo
, 
h¨dw¨e_c⁄cuºícy_öfo
 );

178  
	gtheNumProcs
;

181 #ñi‡
__ANDROID__


184 
AvaûabÀHwC⁄cuºícy
() {

185 
FILE
 *
	gÂ
 = 
f›í
("/sys/devices/system/cpu/present", "r");

186 i‡(
	gÂ
 =
NULL
)  1;

187 
	gnum_¨gs
, 
	glowî
, 
	guµî
, 
	gnum_˝us
=0;

188 (
	gnum_¨gs
 = 
fsˇnf
(
Â
, "%u-%u", &
lowî
, &
uµî
)Ë!
EOF
) {

189 
num_¨gs
) {

190 2: 
num_˝us
 +
uµî
 - 
lowî
 + 1; ;

191 1: 
num_˝us
 += 1; ;

193 
fsˇnf
(
Â
, ",");

195  (
	gnum_˝us
 > 0) ?Çum_cpus : 1;

198 #ñi‡
deföed
(
_SC_NPROCESSORS_ONLN
)

199 
AvaûabÀHwC⁄cuºícy
() {

200 
	gn
 = 
sysc⁄f
(
_SC_NPROCESSORS_ONLN
);

201  (
	gn
 > 0) ?Ç : 1;

204 #ñi‡
_WIN32
||
_WIN64


206 
	g©omic
<
	gdo_⁄˚_°©e
> 
	gh¨dw¨e_c⁄cuºícy_öfo
;

208 c⁄° 
WORD
 
	gTBB_ALL_PROCESSOR_GROUPS
 = 0xffff;

212 c⁄° 
WORD
 
	gMaxPro˚ss‹Groups
 = 64;

214 
	sPro˚ss‹GroupInfo
 {

215 
DWORD_PTR
 
	gmask
;

216 
	gnumProcs
;

217 
	gnumProcsRu¬ögTŸÆ
;

220 
	gNumGroups
;

229 
	gHﬁeIndex
;

232 
	gPro˚ss‹GroupInfo
::
NumGroups
 = 1;

233 
	gPro˚ss‹GroupInfo
::
HﬁeIndex
 = 0;

236 
Pro˚ss‹GroupInfo
 
	gthePro˚ss‹Groups
[
MaxPro˚ss‹Groups
];

238 
	sTBB_GROUP_AFFINITY
 {

239 
DWORD_PTR
 
	gMask
;

240 
WORD
 
	gGroup
;

241 
WORD
 
	gRe£rved
[3];

244 
DWORD
 (
WINAPI
 *
TBB_GëA˘ivePro˚ss‹Cou¡
)–
WORD
 
	ggroupIndex
 ) = 
NULL
;

245 
WORD
 (
WINAPI
 *
TBB_GëA˘ivePro˚ss‹GroupCou¡
)(Ë
NULL
;

246 
BOOL
 (
WINAPI
 *
TBB_SëThªadGroupAfföôy
)–
HANDLE
 
	ghThªad
,

247 c⁄° 
TBB_GROUP_AFFINITY
* 
	g√wAff
, TBB_GROUP_AFFINITY *
	g¥evAff
 );

248 
BOOL
 (
WINAPI
 *
TBB_GëThªadGroupAfföôy
)–
HANDLE
 
	ghThªad
, 
	gTBB_GROUP_AFFINITY
* );

250 c⁄° 
dy«mic_lök_des¸ùt‹
 
	gPro˚ss‹GroupsApiLökTabÀ
[] = {

251 
DLD
(
GëA˘ivePro˚ss‹Cou¡
, 
TBB_GëA˘ivePro˚ss‹Cou¡
)

252 , 
DLD
(
GëA˘ivePro˚ss‹GroupCou¡
, 
TBB_GëA˘ivePro˚ss‹GroupCou¡
)

253 , 
DLD
(
SëThªadGroupAfföôy
, 
TBB_SëThªadGroupAfföôy
)

254 , 
DLD
(
GëThªadGroupAfföôy
, 
TBB_GëThªadGroupAfföôy
)

257 
öôülize_h¨dw¨e_c⁄cuºícy_öfo
 () {

258 #i‡
__TBB_WIN8UI_SUPPORT


261 
	gthePro˚ss‹Groups
[0].
	gnumProcs
 = 
thePro˚ss‹Groups
[0].
numProcsRu¬ögTŸÆ
 = 
°d
::
thªad
::
h¨dw¨e_c⁄cuºícy
();

263 
dy«mic_lök
–"Kî√l32.dŒ", 
Pro˚ss‹GroupsApiLökTabÀ
,

264 (
Pro˚ss‹GroupsApiLökTabÀ
)/(
dy«mic_lök_des¸ùt‹
) );

265 
SYSTEM_INFO
 
	gsi
;

266 
GëN©iveSy°emInfo
(&
si
);

267 
DWORD_PTR
 
	g∑m
, 
	gßm
, 
	gm
 = 1;

268 
GëPro˚ssAfföôyMask
–
GëCuºítPro˚ss
(), &
∑m
, &
ßm
 );

269 
	g≈roc
 = 0;

270  
size_t
 
	gi
 = 0; i < (
	gDWORD_PTR
Ë* 
	gCHAR_BIT
; ++i, 
	gm
 <<= 1 ) {

271 i‡–
∑m
 & 
m
 )

272 ++
≈roc
;

274 
__TBB_ASSERT
–
≈roc
 <()
si
.
dwNumbîOfPro˚ss‹s
, 
NULL
 );

276 
	gthePro˚ss‹Groups
[0].
	gnumProcs
 = 
thePro˚ss‹Groups
[0].
numProcsRu¬ögTŸÆ
 = 
≈roc
;

278 i‡–
	g≈roc
 =()
si
.
dwNumbîOfPro˚ss‹s
 && 
TBB_GëA˘ivePro˚ss‹Cou¡
 ) {

280 
Pro˚ss‹GroupInfo
::
NumGroups
 = ()
TBB_GëA˘ivePro˚ss‹GroupCou¡
();

281 
__TBB_ASSERT
–
Pro˚ss‹GroupInfo
::
NumGroups
 <
MaxPro˚ss‹Groups
, 
NULL
 );

284 i‡–
	gPro˚ss‹GroupInfo
::
NumGroups
 > 
MaxPro˚ss‹Groups
 )

285 
Pro˚ss‹GroupInfo
::
NumGroups
 = 
MaxPro˚ss‹Groups
;

286 i‡–
	gPro˚ss‹GroupInfo
::
NumGroups
 > 1 ) {

287 
TBB_GROUP_AFFINITY
 
ga
;

288 i‡–
TBB_GëThªadGroupAfföôy
–
GëCuºítThªad
(), &
ga
 ) )

289 
	gPro˚ss‹GroupInfo
::
HﬁeIndex
 = 
ga
.
Group
;

290 
	g≈rocs
 = 0;

291  
WORD
 
	gi
 = 0; i < 
	gPro˚ss‹GroupInfo
::
NumGroups
; ++i ) {

292 
	gPro˚ss‹GroupInfo
 &
	gpgi
 = 
thePro˚ss‹Groups
[
i
];

293 
	gpgi
.
	gnumProcs
 = ()
TBB_GëA˘ivePro˚ss‹Cou¡
(
i
);

294 
__TBB_ASSERT
–
pgi
.
numProcs
 <()(
DWORD_PTR
Ë* 
CHAR_BIT
, 
NULL
 );

295 
	gpgi
.
	gmask
 = 
pgi
.
numProcs
 =(
DWORD_PTR
Ë* 
CHAR_BIT
 ? ~(DWORD_PTR)0 : (DWORD_PTR(1) <<Ögi.numProcs) - 1;

296 
	gpgi
.
	gnumProcsRu¬ögTŸÆ
 = 
≈rocs
 +
pgi
.
numProcs
;

298 
__TBB_ASSERT
–
≈rocs
 =()
TBB_GëA˘ivePro˚ss‹Cou¡
–
TBB_ALL_PROCESSOR_GROUPS
 ), 
NULL
 );

303 
PrötExåaVîsi⁄Info
("Pro˚ss‹ groups", "%d", 
Pro˚ss‹GroupInfo
::
NumGroups
);

304 i‡(
	gPro˚ss‹GroupInfo
::
NumGroups
>1)

305 
i
=0; 
	gi
<
	gPro˚ss‹GroupInfo
::
NumGroups
; ++i)

306 
PrötExåaVîsi⁄Info
–"----- Group", "%d: sizê%d", 
i
, 
thePro˚ss‹Groups
[i].
numProcs
);

309 
AvaûabÀHwC⁄cuºícy
() {

310 
©omic_do_⁄˚
–&
öôülize_h¨dw¨e_c⁄cuºícy_öfo
, 
h¨dw¨e_c⁄cuºícy_öfo
 );

311  
	gthePro˚ss‹Groups
[
Pro˚ss‹GroupInfo
::
NumGroups
 - 1].
numProcsRu¬ögTŸÆ
;

314 
NumbîOfPro˚ss‹Groups
() {

315 
__TBB_ASSERT
–
h¨dw¨e_c⁄cuºícy_öfo
 =
öôüliz©i⁄_com∂ëe
, "NumberOfProcessorGroups is used before AvailableHwConcurrency" );

316  
	gPro˚ss‹GroupInfo
::
NumGroups
;

320 
	#HﬁeAdju°ed
(
¥ocIdx
, 
gΩIdx
Ë’rocIdx + (
hﬁeIdx
 <gΩIdx))

	)

322 
FödPro˚ss‹GroupIndex
 ( 
¥ocIdx
 ) {

324 
	ghﬁeIdx
;

325 c⁄° 
	gnumProcs
 = 
thePro˚ss‹Groups
[
Pro˚ss‹GroupInfo
::
NumGroups
 - 1].
numProcsRu¬ögTŸÆ
;

326 i‡–
	g¥ocIdx
 >
numProcs
 - 1 ) {

327 
hﬁeIdx
 = 
INT_MAX
;

328 
	g¥ocIdx
 = (
¥ocIdx
 - 
numProcs
 + 1) %ÇumProcs;

331 
	ghﬁeIdx
 = 
Pro˚ss‹GroupInfo
::
HﬁeIndex
;

332 
__TBB_ASSERT
–
h¨dw¨e_c⁄cuºícy_öfo
 =
öôüliz©i⁄_com∂ëe
, "FindProcessorGroupIndex is used before AvailableHwConcurrency" );

334 
	gi
 = 
¥ocIdx
 / 
thePro˚ss‹Groups
[0].
numProcs
;

336 i‡(
	gi
 >
Pro˚ss‹GroupInfo
::
NumGroups
Ë
i
 = ProcessorGroupInfo::NumGroups-1;

338 i‡–
	gthePro˚ss‹Groups
[
i
].
	gnumProcsRu¬ögTŸÆ
 > 
HﬁeAdju°ed
(
¥ocIdx
, i) ) {

339  
	gthePro˚ss‹Groups
[
i
].
	gnumProcsRu¬ögTŸÆ
 -ÅhePro˚ss‹Groups[i].
	gnumProcs
 > 
HﬁeAdju°ed
(
¥ocIdx
, i) ) {

340 
__TBB_ASSERT
–
i
 > 0, 
NULL
 );

341 --
	gi
;

346 ++
	gi
;

347 }  
	gthePro˚ss‹Groups
[
i
].
	gnumProcsRu¬ögTŸÆ
 <
HﬁeAdju°ed
(
¥ocIdx
, i) );

349 
__TBB_ASSERT
–
i
 < 
Pro˚ss‹GroupInfo
::
NumGroups
, 
NULL
 );

350  
	gi
;

353 
MoveThªadI¡oPro˚ss‹Group
–* 
hThªad
, 
groupIndex
 ) {

354 
__TBB_ASSERT
–
h¨dw¨e_c⁄cuºícy_öfo
 =
öôüliz©i⁄_com∂ëe
, "MoveThreadIntoProcessorGroup is used before AvailableHwConcurrency" );

355 i‡–!
	gTBB_SëThªadGroupAfföôy
 )

357 
TBB_GROUP_AFFINITY
 
	gga
 = { 
thePro˚ss‹Groups
[
groupIndex
].
mask
, (
WORD
)groupIndex, {0,0,0} };

358 
TBB_SëThªadGroupAfföôy
–
hThªad
, &
ga
, 
NULL
 );

362 #îr‹ 
AvaûabÀHwC⁄cuºícy
 
is
 
nŸ
 
im∂emíãd
 
ö
 
this
 
OS


	@viper/concurrentqueue-src/benchmarks/tbb/tbb_profiling.h

21 #i‚de‡
__TBB_¥ofûög_H


22 
	#__TBB_¥ofûög_H


	)

24 
«me•a˚
 
	gtbb
 {

25 
«me•a˚
 
	göã∫Æ
 {

32 
	#TBB_STRING_RESOURCE
(
ödex_«me
,
°r
Ëödex_«me,

	)

33 
	e°rög_ödex
 {

34 
	~"öã∫Æ/_tbb_°rögs.h
"

35 
	gNUM_STRINGS


37 #unde‡
TBB_STRING_RESOURCE


39 
	eôt_ªœti⁄


41 
	g__ôt_ªœti⁄_is_unknown
 = 0,

42 
	g__ôt_ªœti⁄_is_dïídít_⁄
,

43 
	g__ôt_ªœti⁄_is_siblög_of
,

44 
	g__ôt_ªœti⁄_is_∑ª¡_of
,

45 
	g__ôt_ªœti⁄_is_c⁄töu©i⁄_of
,

46 
	g__ôt_ªœti⁄_is_chûd_of
,

47 
	g__ôt_ªœti⁄_is_c⁄töued_by
,

48 
	g__ôt_ªœti⁄_is_¥ede˚ss‹_to


55 #i‡(
_WIN32
||
_WIN64
||
__löux__
Ë&& !
__MINGW32__
 && 
TBB_USE_THREADING_TOOLS


57 #i‡
_WIN32
||
_WIN64


58 
	~<°dlib.h
>

60 
	~"tbb_°ddef.h
"

62 
«me•a˚
 
	gtbb
 {

63 
«me•a˚
 
	göã∫Æ
 {

65 #i‡
_WIN32
||
_WIN64


66 
__TBB_EXPORTED_FUNC
 
ôt_£t_sync_«me_v3
–*
obj
, c⁄° 
wch¨_t
* 
«me
 );

67 
ölöe
 
size_t
 
mu…ibyã_to_widech¨
–
wch¨_t
* 
wcs
, c⁄° * 
mbs
, size_à
bufsize
) {

68 #i‡
_MSC_VER
>=1400

69 
size_t
 
	gÀn
;

70 
mb°owcs_s
–&
Àn
, 
wcs
, 
bufsize
, 
mbs
, 
_TRUNCATE
 );

71  
	gÀn
;

73 
size_t
 
	gÀn
 = 
mb°owcs
–
wcs
, 
mbs
, 
bufsize
 );

74 if(
	gwcs
 && 
	gÀn
!=
size_t
(-1) )

75 
wcs
[
Àn
<
bufsize
-1?Üí: bufsize-1] = 
wch¨_t
('\0');

76  
	gÀn
+1;

80 
__TBB_EXPORTED_FUNC
 
ôt_£t_sync_«me_v3
–*
obj
, c⁄° * 
«me
 );

88 #i‡
_WIN32
||
_WIN64


89 
	#__TBB_DEFINE_PROFILING_SET_NAME
(
sync_obje˘_ty≥
) \

90 
«me•a˚
 
¥ofûög
 { \

91 
ölöe
 
	`£t_«me
–
sync_obje˘_ty≥
& 
obj
, c⁄° 
wch¨_t
* 
«me
 ) { \

92 
tbb
::
öã∫Æ
::
	`ôt_£t_sync_«me_v3
–&
obj
, 
«me
 ); \

94 
ölöe
 
	`£t_«me
–
sync_obje˘_ty≥
& 
obj
, c⁄° * 
«me
 ) { \

95 
size_t
 
Àn
 = 
tbb
::
öã∫Æ
::
	`mu…ibyã_to_widech¨
(
NULL
, 
«me
, 0); \

96 
wch¨_t
 *
w«me
 = 
√w
 wch¨_t[
Àn
]; \

97 
tbb
::
öã∫Æ
::
	`mu…ibyã_to_widech¨
(
w«me
, 
«me
, 
Àn
); \

98 
	`£t_«me
–
obj
, 
w«me
 ); \

99 
dñëe
[] 
w«me
; \

101 }

	)

103 
	#__TBB_DEFINE_PROFILING_SET_NAME
(
sync_obje˘_ty≥
) \

104 
«me•a˚
 
¥ofûög
 { \

105 
ölöe
 
	`£t_«me
–
sync_obje˘_ty≥
& 
obj
, c⁄° * 
«me
 ) { \

106 
tbb
::
öã∫Æ
::
	`ôt_£t_sync_«me_v3
–&
obj
, 
«me
 ); \

108 }

	)

113 #i‡
_WIN32
||
_WIN64


114 
	#__TBB_DEFINE_PROFILING_SET_NAME
(
sync_obje˘_ty≥
) \

115 
«me•a˚
 
¥ofûög
 { \

116 
ölöe
 
	`£t_«me
–
sync_obje˘_ty≥
&, c⁄° 
wch¨_t
* ) {} \

117 
ölöe
 
	`£t_«me
–
sync_obje˘_ty≥
&, const * ) {} \

118 }

	)

120 
	#__TBB_DEFINE_PROFILING_SET_NAME
(
sync_obje˘_ty≥
) \

121 
«me•a˚
 
¥ofûög
 { \

122 
ölöe
 
	`£t_«me
–
sync_obje˘_ty≥
&, const * ) {} \

123 }

	)

128 
	~"©omic.h
"

130 
«me•a˚
 
	gtbb
 {

131 
«me•a˚
 
	göã∫Æ
 {

133 
	enŸify_ty≥
 {
	g¥ï¨e
=0, 
	gˇn˚l
, 
	gacquúed
, 
	gªÀasög
};

135 c⁄° 
uöçå_t
 
	gNUM_NOTIFY_TYPES
 = 4;

137 
__TBB_EXPORTED_FUNC
 
ˇŒ_ôt_nŸify_v5
(
t
, *
±r
);

138 
__TBB_EXPORTED_FUNC
 
ôt_°‹e_poöãr_wôh_ªÀa£_v3
(*
d°
, *
§c
);

139 * 
__TBB_EXPORTED_FUNC
 
ôt_lﬂd_poöãr_wôh_acquúe_v3
(c⁄° *
§c
);

140 * 
__TBB_EXPORTED_FUNC
 
ôt_lﬂd_poöãr_v3
–c⁄° * 
§c
 );

141 #i‡
__TBB_ITT_STRUCTURE_API


142 
	eôt_domaö_íum
 { 
	gITT_DOMAIN_FLOW
=0 };

144 
__TBB_EXPORTED_FUNC
 
ôt_make_èsk_group_v7
–
ôt_domaö_íum
 
domaö
, *
group
, 
group_exåa
,

145 *
∑ª¡
, 
∑ª¡_exåa
, 
°rög_ödex
 
«me_ödex
 );

146 
__TBB_EXPORTED_FUNC
 
ôt_mëad©a_°r_add_v7
–
ôt_domaö_íum
 
domaö
, *
addr
, 
addr_exåa
,

147 
°rög_ödex
 
key
, c⁄° *
vÆue
 );

148 
__TBB_EXPORTED_FUNC
 
ôt_ªœti⁄_add_v7
–
ôt_domaö_íum
 
domaö
, *
addr0
, 
addr0_exåa
,

149 
ôt_ªœti⁄
 
ªœti⁄
, *
addr1
, 
addr1_exåa
 );

150 
__TBB_EXPORTED_FUNC
 
ôt_èsk_begö_v7
–
ôt_domaö_íum
 
domaö
, *
èsk
, 
èsk_exåa
,

151 *
∑ª¡
, 
∑ª¡_exåa
, 
°rög_ödex
 
«me_ödex
 );

152 
__TBB_EXPORTED_FUNC
 
ôt_èsk_íd_v7
–
ôt_domaö_íum
 
domaö
 );

156 
	gãm∂©e
 <
ty≥«me
 
	gT
,Åy≥«mê
	gU
>

157 
ölöe
 
ôt_°‹e_w‹d_wôh_ªÀa£
(
tbb
::
©omic
<
T
>& 
d°
, 
U
 
§c
) {

158 #i‡
TBB_USE_THREADING_TOOLS


160 
__TBB_ASSERT
((
T
) == (*), "Type must be word-sized.");

161 
ôt_°‹e_poöãr_wôh_ªÀa£_v3
(&
d°
, (*)
uöçå_t
(
§c
));

163 
	gd°
 = 
§c
;

167 
	gãm∂©e
 <
ty≥«me
 
	gT
>

168 
ölöe
 
T
 
ôt_lﬂd_w‹d_wôh_acquúe
(c⁄° 
tbb
::
©omic
<T>& 
§c
) {

169 #i‡
TBB_USE_THREADING_TOOLS


171 
__TBB_ASSERT
((
T
) == (*), "Type must be word-sized.");

172 #i‡
deföed
(
_MSC_VER
Ë&& !deföed(
__INTEL_COMPILER
)

174 #¥agm®
w¨nög
 (
push
)

175 #¥agm®
w¨nög
 (
dißbÀ
: 4311)

177 
T
 
	gªsu…
 = (T)
ôt_lﬂd_poöãr_wôh_acquúe_v3
(&
§c
);

178 #i‡
deföed
(
_MSC_VER
Ë&& !deföed(
__INTEL_COMPILER
)

179 #¥agm®
w¨nög
 (
p›
)

181  
	gªsu…
;

183  
	g§c
;

187 
	gãm∂©e
 <
ty≥«me
 
	gT
>

188 
ölöe
 
ôt_°‹e_w‹d_wôh_ªÀa£
(
T
& 
d°
, T 
§c
) {

189 #i‡
TBB_USE_THREADING_TOOLS


191 
__TBB_ASSERT
((
T
) == (*), "Type must be word-sized.");

192 
ôt_°‹e_poöãr_wôh_ªÀa£_v3
(&
d°
, (*)
§c
);

194 
__TBB_°‹e_wôh_ªÀa£
(
d°
, 
§c
);

198 
	gãm∂©e
 <
ty≥«me
 
	gT
>

199 
ölöe
 
T
 
ôt_lﬂd_w‹d_wôh_acquúe
(c⁄° T& 
§c
) {

200 #i‡
TBB_USE_THREADING_TOOLS


202 
__TBB_ASSERT
((
T
) == (*), "Type must be word-sized");

203  (
	gT
)
ôt_lﬂd_poöãr_wôh_acquúe_v3
(&
§c
);

205  
__TBB_lﬂd_wôh_acquúe
(
§c
);

209 
	gãm∂©e
 <
ty≥«me
 
	gT
>

210 
ölöe
 
ôt_hide_°‹e_w‹d
(
T
& 
d°
, T 
§c
) {

211 #i‡
TBB_USE_THREADING_TOOLS


213 
__TBB_ASSERT
((
T
) == (*), "Type must be word-sized");

214 
ôt_°‹e_poöãr_wôh_ªÀa£_v3
(&
d°
, (*)
§c
);

216 
	gd°
 = 
§c
;

221 
	gãm∂©e
 <
ty≥«me
 
	gT
>

222 
ölöe
 
T
 
ôt_hide_lﬂd_w‹d
(c⁄° T& 
§c
) {

223 #i‡
TBB_USE_THREADING_TOOLS


225 
__TBB_ASSERT
((
T
) == (*), "Type must be word-sized.");

226  (
	gT
)
ôt_lﬂd_poöãr_v3
(&
§c
);

228  
	g§c
;

232 #i‡
TBB_USE_THREADING_TOOLS


233 
ölöe
 
ˇŒ_ôt_nŸify
(
nŸify_ty≥
 
t
, *
±r
) {

234 
ˇŒ_ôt_nŸify_v5
(()
t
, 
±r
);

238 
ölöe
 
ˇŒ_ôt_nŸify
(
nŸify_ty≥
 , * ) {}

242 #i‡
__TBB_ITT_STRUCTURE_API


243 
ölöe
 
ôt_make_èsk_group
–
ôt_domaö_íum
 
domaö
, *
group
, 
group_exåa
,

244 *
∑ª¡
, 
∑ª¡_exåa
, 
°rög_ödex
 
«me_ödex
 ) {

245 
ôt_make_èsk_group_v7
–
domaö
, 
group
, 
group_exåa
, 
∑ª¡
, 
∑ª¡_exåa
, 
«me_ödex
 );

248 
ölöe
 
ôt_mëad©a_°r_add
–
ôt_domaö_íum
 
domaö
, *
addr
, 
addr_exåa
,

249 
°rög_ödex
 
key
, c⁄° *
vÆue
 ) {

250 
ôt_mëad©a_°r_add_v7
–
domaö
, 
addr
, 
addr_exåa
, 
key
, 
vÆue
 );

253 
ölöe
 
ôt_ªœti⁄_add
–
ôt_domaö_íum
 
domaö
, *
addr0
, 
addr0_exåa
,

254 
ôt_ªœti⁄
 
ªœti⁄
, *
addr1
, 
addr1_exåa
 ) {

255 
ôt_ªœti⁄_add_v7
–
domaö
, 
addr0
, 
addr0_exåa
, 
ªœti⁄
, 
addr1
, 
addr1_exåa
 );

258 
ölöe
 
ôt_èsk_begö
–
ôt_domaö_íum
 
domaö
, *
èsk
, 
èsk_exåa
,

259 *
∑ª¡
, 
∑ª¡_exåa
, 
°rög_ödex
 
«me_ödex
 ) {

260 
ôt_èsk_begö_v7
–
domaö
, 
èsk
, 
èsk_exåa
, 
∑ª¡
, 
∑ª¡_exåa
, 
«me_ödex
 );

263 
ölöe
 
ôt_èsk_íd
–
ôt_domaö_íum
 
domaö
 ) {

264 
ôt_èsk_íd_v7
–
domaö
 );

	@viper/concurrentqueue-src/benchmarks/tbb/tbb_statistics.cpp

21 
	~"tbb_°©i°ics.h
"

23 #i‡
__TBB_STATISTICS


25 
	~<˛imôs
>

26 
	~<c°d¨g
>

27 #i‡
__TBB_STATISTICS_STDOUT


28 
	~<c°dio
>

31 
	~"tbb/•ö_muãx.h
"

33 
«me•a˚
 
	gtbb
 {

34 
«me•a˚
 
	göã∫Æ
 {

39 c⁄° * 
	gSètGroupTôÀs
[] = {

46 c⁄° * 
	gSètFõldTôÀs
[] = {

47  "a˘ive", "‰ìd", "big", 
NULL
,

48  "tŸÆ", "w/ÿ•awn", 
NULL
,

49  "suc˚eded", "Áûed", "c⁄Êi˘s", "backoffs", 
NULL
,

50  "maûed", "ªvoked", "°ﬁí", "by∑s£d", "ign‹ed", 
NULL
,

51  "swôches", "roundåùs", "avg.c⁄c", "avg.ÆlŸ", 
NULL
,

52  "roundåùs", 
NULL
,

53  "¨.swôch", "mkt.swôch", "¨.ª£t", "ªf.fixup", "avg.¨.¥", "avg.mkt.¥", 
NULL
,

54  "wönows", "ªlﬂds", "‹ph™ed", "wönowed", "ªlﬂded", 
NULL


60 ˛as†
	c°©i°ics_loggî
 {

61 
	gpublic
:

62 
°©i°ics_loggî
 () {

63 
__TBB_ASSERT
–
sg_íd
 - 1 =1 << ((
SètGroupTôÀs
)/(*SètGroupTôÀsË- 1), 
NULL
 );

65 
	gmy_fûe
 = 
f›í
("statistics.txt","w");

66 if–!
	gmy_fûe
 )

67 
≥º‹
("fopen(\"statistics.txt\"\")");

69 
	ggroup_°¨t_fõld
[0] = 0;

70  
size_t
 
	gi
 = 0, 
	gj
 = 0; i < 
	gNumGroups
; ++i, ++j ) {

71 
__TBB_ASSERT
–
SètFõldTôÀs
[
j
], "Empty group occurred" );

72  
	gSètFõldTôÀs
[
j
] )

73 ++
	gj
;

74 
	ggroup_°¨t_fõld
[
i
 + 1] = 
j
 - i;

76 
__TBB_ASSERT
–
group_°¨t_fõld
[
NumGroups
] =
°©i°ics_cou¡îs
::
size
(),

78 
dump
–"%-*s", 
IDCﬁumnWidth
, "");

79 
¥o˚ss_groups
–&
°©i°ics_loggî
::
¥öt_group_tôÀ
 );

80 
dump
–"%-*s", 
IDCﬁumnWidth
, "ID");

81 
¥o˚ss_groups
–&
°©i°ics_loggî
::
¥öt_fõld_tôÀs
 );

84 ~
°©i°ics_loggî
 (Ë{ 
f˛o£
(
my_fûe
); }

86 
ªc‹d
–c⁄° 
°©i°ics_cou¡îs
& 
c
, 
size_t
 
id
 ) {

87 
	g•ö_muãx
::
sc›ed_lock
 
lock
(
my_muãx
);

88 
	gcou¡îs_to_dump
 = &
c
;

89 #i‡
__TBB_STATISTICS_TOTALS_ONLY


90 i‡–
	gid
 =
¨ía_cou¡îs_tŸÆ
 ) {

91 
dump
–"%-*s", 
IDCﬁumnWidth
, "Tot" );

92 
¥o˚ss_groups
–&
°©i°ics_loggî
::
¥öt_fõld_vÆues
 );

95 c⁄° * 
	gidSåög
 = 
NULL
;

96  
	gid
 ) {

98 
idSåög
 = "M"; ;

99 
	gw‹kîs_cou¡îs_tŸÆ
:

100 
idSåög
 = "Wtot"; ;

101 
	g¨ía_cou¡îs_tŸÆ
:

102 
idSåög
 = "Tot"; ;

104 
dump
–"W%-*u", 
IDCﬁumnWidth
 - 1, 
id
 );

106 i‡–
	gidSåög
 )

107 
dump
–"%-*s", 
IDCﬁumnWidth
, 
idSåög
 );

108 
¥o˚ss_groups
–&
°©i°ics_loggî
::
¥öt_fõld_vÆues
 );

111 
	g¥iv©e
:

112 c⁄° 
size_t
 
IDCﬁumnWidth
 = 5;

113 c⁄° 
size_t
 
	gSèti°icsCﬁumnWidth
 = 10;

114 c⁄° 
size_t
 
	gNumGroups
 = (
SètGroupTôÀs
)/(*);

117 
FILE
* 
	gmy_fûe
;

119 
•ö_muãx
 
	gmy_muãx
;

122 
size_t
 
	ggroup_°¨t_fõld
[
NumGroups
 + 1];

124 c⁄° 
°©i°ics_cou¡îs
* 
	gcou¡îs_to_dump
;

126 c⁄° 
size_t
 
	gNumFõlds
 = (
SètFõldTôÀs
)/(*SètFõldTôÀsË- 
NumGroups
;

127 
boﬁ
 
	gavîages_fõlds
[
NumFõlds
];

129 
dump
 ( c⁄°* 
fmt
, ... ) {

130 
va_li°
 
	g¨gs
;

131 i‡–
	gmy_fûe
 ) {

132 
va_°¨t
–
¨gs
, 
fmt
 );

133 
vÂrötf
–
my_fûe
, 
fmt
, 
¨gs
 );

134 
va_íd
–
¨gs
 );

136 #i‡
__TBB_STATISTICS_STDOUT


137 
va_°¨t
–
¨gs
, 
fmt
 );

138 
v¥ötf
–
fmt
, 
¨gs
 );

139 
va_íd
–
¨gs
 );

143 
¥o˚ss_groups
 ( (
°©i°ics_loggî
::*
≥r_group_a˘i⁄
)(
size_t
 
group_idx
) ) {

144  
size_t
 
i
 = 0, 
	ggroup_Êag
 = 1; 
	gi
 < 
	gNumGroups
; ++i, group_flag <<= 1 ) {

145 
__TBB_ASSERT
–
group_Êag
 < 
sg_íd
, "StatGroupTitles contents is incompatible with statistics_groups definition" );

146 i‡–
	g__TBB_A˘iveSèti°icsGroups
 & 
	ggroup_Êag
 )

147 (
	gthis
->*
	g≥r_group_a˘i⁄
)–
	gi
 );

149 
dump
( "\n" );

152 
¥öt_group_tôÀ
 ( 
size_t
 
group_idx
 ) {

153 
dump
–"%-*s", (
group_°¨t_fõld
[
group_idx
 + 1] - group_°¨t_fõld[group_idx]Ë* (
Sèti°icsCﬁumnWidth
 + 1),

154 
SètGroupTôÀs
[
group_idx
] );

157 
¥öt_fõld_tôÀs
 ( 
size_t
 
group_idx
 ) {

159 
size_t
 
	gi
 = 
group_°¨t_fõld
[
group_idx
] + group_idx;

160  
	gSètFõldTôÀs
[
i
] ) {

161 
	gavîages_fõlds
[
i
 - 
group_idx
] = 
°∫cmp
(
SètFõldTôÀs
[i], "avg.", 4) == 0;

162 
dump
–"%-*†", 
Sèti°icsCﬁumnWidth
, 
SètFõldTôÀs
[
i
++] );

166 
¥öt_fõld_vÆues
 ( 
size_t
 
group_idx
 ) {

167 
size_t
 
	gbegö
 = 
group_°¨t_fõld
[
group_idx
],

168 
	gíd
 = 
group_°¨t_fõld
[
group_idx
 + 1];

169  
size_t
 
	gi
 = 
begö
; i < 
	gíd
; ++i ) {

170 i‡–
	gavîages_fõlds
[
i
] )

171 
dump
–"%-*.2‡", 
Sèti°icsCﬁumnWidth
, ()
cou¡îs_to_dump
->
fõld
(
i
)/cou¡îs_to_dump->
èsks_execuãd
 );

173 
dump
–"%-*ld ", 
Sèti°icsCﬁumnWidth
, 
cou¡îs_to_dump
->
fõld
(
i
) );

178 
°©i°ics_loggî
 
	gthe_°©i°ics
;

180 
dump_°©i°ics
 ( c⁄° 
°©i°ics_cou¡îs
& 
c
, 
size_t
 
id
 ) {

181 
	gthe_°©i°ics
.
ªc‹d
(
c
, 
id
);

	@viper/concurrentqueue-src/benchmarks/tbb/tbb_statistics.h

21 #i‚de‡
_TBB_tbb_°©i°ics_H


22 
	#_TBB_tbb_°©i°ics_H


	)

63 
	~"tbb/tbb_°ddef.h
"

65 #i‚de‡
__TBB_STATISTICS


66 
	#__TBB_STATISTICS
 0

	)

69 #i‡
__TBB_STATISTICS


71 
	~<°rög.h
>

75 
	#__TBB_STATISTICS_STDOUT
 1

	)

80 
	#__TBB_STATISTICS_TOTALS_ONLY
 1

	)

86 
	#__TBB_STATISTICS_EARLY_DUMP
 1

	)

88 
	#GATHER_STATISTIC
(
x
Ë(x)

	)

90 
«me•a˚
 
	gtbb
 {

91 
«me•a˚
 
	göã∫Æ
 {

96 
	e°©i°ics_groups
 {

97 
	gsg_èsk_Æloˇti⁄
 = 0x01,

98 
	gsg_èsk_executi⁄
 = 0x02,

99 
	gsg_°ólög
 = 0x04,

100 
	gsg_afföôy
 = 0x08,

101 
	gsg_¨ía
 = 0x10,

102 
	gsg_m¨kë
 = 0x20,

103 
	gsg_¥io
 = 0x40,

104 
	gsg_¥io_ex
 = 0x80,

106 
	gsg_íd


110 c⁄° 
uöçå_t
 
	g__TBB_A˘iveSèti°icsGroups
 = 
sg_èsk_executi⁄
 | 
sg_°ólög
 | 
sg_afföôy
 | 
sg_¨ía
 | 
sg_m¨kë
;

115 
	s°©i°ics_cou¡îs
 {

116 
	tcou¡î_ty≥
;

124 
cou¡î_ty≥
 
	ga˘ive_èsks
;

126 
cou¡î_ty≥
 
	g‰ì_li°_Àngth
;

129 
cou¡î_ty≥
 
	gbig_èsks
;

134 
cou¡î_ty≥
 
	gèsks_execuãd
;

136 
cou¡î_ty≥
 
	g•awns_by∑s£d
;

141 
cou¡î_ty≥
 
	g°óls_commôãd
;

143 
cou¡î_ty≥
 
	g°óls_Áûed
;

145 
cou¡î_ty≥
 
	gthõves_c⁄Êi˘s
;

147 
cou¡î_ty≥
 
	gthõf_backoffs
;

152 
cou¡î_ty≥
 
	gmaûs_ª˚ived
;

155 
cou¡î_ty≥
 
	g¥oxõs_execuãd
;

157 
cou¡î_ty≥
 
	g¥oxõs_°ﬁí
;

159 
cou¡î_ty≥
 
	g¥oxõs_by∑s£d
;

161 
cou¡î_ty≥
 
	gafföôy_ign‹ed
;

166 
cou¡î_ty≥
 
	gg©e_swôches
;

168 
cou¡î_ty≥
 
	g¨ía_roundåùs
;

170 
cou¡î_ty≥
 
	gavg_¨ía_c⁄cuºícy
;

172 
cou¡î_ty≥
 
	gavg_assig√d_w‹kîs
;

177 
cou¡î_ty≥
 
	gm¨kë_roundåùs
;

182 
cou¡î_ty≥
 
	g¨ía_¥io_swôches
;

184 
cou¡î_ty≥
 
	gm¨kë_¥io_swôches
;

186 
cou¡î_ty≥
 
	g¨ía_¥io_ª£ts
;

188 
cou¡î_ty≥
 
	g¥io_ªf_fixups
;

190 
cou¡î_ty≥
 
	gavg_¨ía_¥io
;

192 
cou¡î_ty≥
 
	gavg_m¨kë_¥io
;

197 
cou¡î_ty≥
 
	g¥io_wönowögs
;

199 
cou¡î_ty≥
 
	g¥io_ªlﬂds
;

201 
cou¡î_ty≥
 
	g¥io_‹ph™ögs
;

203 
cou¡î_ty≥
 
	g¥io_èsks_ofÊﬂded
;

205 
cou¡î_ty≥
 
	g¥io_èsks_ªlﬂded
;

209 
°©i°ics_cou¡îs
(Ë{ 
ª£t
(); }

211 
ª£t
 (Ë{ 
mem£t
–
this
, 0, (
°©i°ics_cou¡îs
) ); }

213 
	gcou¡î_ty≥
& 
fõld
 ( 
size_t
 
ödex
 ) {  
	gªöãΩªt_ˇ°
<cou¡î_ty≥*>(
	gthis
)[index]; }

215 c⁄° 
	gcou¡î_ty≥
& 
fõld
 ( 
size_t
 
ödex
 ) c⁄° {  
	gªöãΩªt_ˇ°
<c⁄° cou¡î_ty≥*>(
	gthis
)[index]; }

217 
size_t
 
size
 (Ë{  (
	g°©i°ics_cou¡îs
Ë/ (
	gcou¡î_ty≥
); }

219 c⁄° 
	g°©i°ics_cou¡îs
& 
	g›î©‹
 +–c⁄° 
°©i°ics_cou¡îs
& 
rhs
 ) {

220  
size_t
 
i
 = 0; 
	gi
 < 
size
(); ++i )

221 
fõld
(
i
Ë+
rhs
.field(i);

222  *
	gthis
;

226 c⁄° 
size_t
 
	gw‹kîs_cou¡îs_tŸÆ
 = (size_t)-1;

227 c⁄° 
size_t
 
	g¨ía_cou¡îs_tŸÆ
 = (size_t)-2;

229 
dump_°©i°ics
 ( c⁄° 
°©i°ics_cou¡îs
& 
c
, 
size_t
 
id
 );

236 
	#GATHER_STATISTIC
(
x
Ë(()0)

	)

	@viper/concurrentqueue-src/benchmarks/tbb/tbb_stddef.h

21 #i‚de‡
__TBB_tbb_°ddef_H


22 
	#__TBB_tbb_°ddef_H


	)

25 
	#TBB_VERSION_MAJOR
 4

	)

26 
	#TBB_VERSION_MINOR
 3

	)

29 
	#TBB_INTERFACE_VERSION
 8000

	)

30 
	#TBB_INTERFACE_VERSION_MAJOR
 
TBB_INTERFACE_VERSION
/1000

	)

34 
	#TBB_COMPATIBLE_INTERFACE_VERSION
 2

	)

36 
	#__TBB_STRING_AUX
(
x
Ë#x

	)

37 
	#__TBB_STRING
(
x
Ë
	`__TBB_STRING_AUX
(x)

	)

40 #i‡!
deföed
 
RC_INVOKED


95 
	~"tbb_c⁄fig.h
"

97 #i‡
_MSC_VER
 >=1400

98 
	#__TBB_EXPORTED_FUNC
 
__cde˛


	)

99 
	#__TBB_EXPORTED_METHOD
 
__thisˇŒ


	)

101 
	#__TBB_EXPORTED_FUNC


	)

102 
	#__TBB_EXPORTED_METHOD


	)

105 #i‡
__INTEL_COMPILER
 || 
_MSC_VER


106 
	#__TBB_NOINLINE
(
de˛
Ë
	`__de˛•ec
(
noölöe
Ë
	)
decl

107 #ñi‡
__GNUC__


108 
	#__TBB_NOINLINE
(
de˛
Ëde˛ 
	`__©åibuã__
 ((
noölöe
))

	)

110 
	#__TBB_NOINLINE
(
de˛
Ë
	)
decl

113 #i‡
__TBB_NOEXCEPT_PRESENT


114 
	#__TBB_NOEXCEPT
(
ex¥essi⁄
Ë
	`n€x˚±
”x¥essi⁄)

	)

116 
	#__TBB_NOEXCEPT
(
ex¥essi⁄
)

	)

119 
	~<c°ddef
>

121 #i‡
_MSC_VER


122 
	#__TBB_tbb_wödef_H


	)

123 
	~"öã∫Æ/_tbb_wödef.h
"

124 #unde‡
__TBB_tbb_wödef_H


126 #i‡!
deföed
(
_MSC_VER
) || _MSC_VER>=1600

127 
	~<°döt.h
>

131 (*
	tas£πi⁄_h™dÀr_ty≥
)–c⁄° * 
	tfûíame
, 
	tlöe
, c⁄° * 
	tex¥essi⁄
, c⁄° * 
	tcommít
 );

133 #i‡
TBB_USE_ASSERT


135 
	#__TBB_ASSERT_NS
(
¥ediˇã
,
mesßge
,
ns
Ë(’ªdiˇã)?(()0Ë:Çs::
	`as£πi⁄_Áûuª
(
__FILE__
,
__LINE__
,#¥ediˇã,mesßge))

	)

140 #i‡
__TBBMALLOC_BUILD


141 
«me•a˚
 
rml
 {Çame•a˚ 
öã∫Æ
 {

142 
	#__TBB_ASSERT
(
¥ediˇã
,
mesßge
Ë
	`__TBB_ASSERT_NS
’ªdiˇã,mesßge,
rml
::
öã∫Æ
)

	)

144 
«me•a˚
 
tbb
 {

145 
	#__TBB_ASSERT
(
¥ediˇã
,
mesßge
Ë
	`__TBB_ASSERT_NS
’ªdiˇã,mesßge,
tbb
)

	)

148 
	#__TBB_ASSERT_EX
 
__TBB_ASSERT


	)

151 
as£πi⁄_h™dÀr_ty≥
 
__TBB_EXPORTED_FUNC
 
	`£t_as£πi⁄_h™dÀr
–as£πi⁄_h™dÀr_ty≥ 
√w_h™dÀr
 );

157 
__TBB_EXPORTED_FUNC
 
	`as£πi⁄_Áûuª
–c⁄° * 
fûíame
, 
löe
, c⁄° * 
ex¥essi⁄
, c⁄° * 
commít
 );

159 #i‡
__TBBMALLOC_BUILD


160 }
	}
}

167 
	#__TBB_ASSERT
(
¥ediˇã
,
commít
Ë(()0)

	)

169 
	#__TBB_ASSERT_EX
(
¥ediˇã
,
commít
Ë(()(1 && (¥ediˇã)))

	)

174 
«me•a˚
 
	gtbb
 {

176 #i‡
_MSC_VER
 && _MSC_VER<1600

177 
«me•a˚
 
	göã∫Æ
 {

178 
__öt8
 
	töt8_t
;

179 
__öt16
 
	töt16_t
;

180 
__öt32
 
	töt32_t
;

181 
__öt64
 
	töt64_t
;

182 
	t__öt8
 
	tuöt8_t
;

183 
	t__öt16
 
	tuöt16_t
;

184 
	t__öt32
 
	tuöt32_t
;

185 
	t__öt64
 
	tuöt64_t
;

188 
«me•a˚
 
	göã∫Æ
 {

189 
	gusög
 ::
öt8_t
;

190 
	gusög
 ::
öt16_t
;

191 
	gusög
 ::
öt32_t
;

192 
	gusög
 ::
öt64_t
;

193 
	gusög
 ::
uöt8_t
;

194 
	gusög
 ::
uöt16_t
;

195 
	gusög
 ::
uöt32_t
;

196 
	gusög
 ::
uöt64_t
;

200 
usög
 
	g°d
::
size_t
;

201 
usög
 
	g°d
::
±rdiff_t
;

208 "C" 
__TBB_EXPORTED_FUNC
 
TBB_ru¡ime_öãrÁ˚_vîsi⁄
();

215 ˛as†
	c•lô
 {

225 ˛as†
	c¥›‹ti⁄Æ_•lô
 {

226 
	gpublic
:

227 
¥›‹ti⁄Æ_•lô
(
size_t
 
_À·
 = 1, size_à
_right
 = 1Ë: 
my_À·
(_À·), 
my_right
(_right) { }

228 
¥›‹ti⁄Æ_•lô
(
•lô
Ë: 
my_À·
(1), 
my_right
(1) { }

230 
size_t
 
À·
(Ëc⁄° {  
	gmy_À·
; }

231 
size_t
 
right
(Ëc⁄° {  
	gmy_right
; }

233 
£t_¥›‹ti⁄
(
size_t
 
_À·
, size_à
_right
) {

234 
	gmy_À·
 = 
_À·
;

235 
	gmy_right
 = 
_right
;

239 
›î©‹
 
•lô
() const {  split(); }

240 
	g¥iv©e
:

241 
size_t
 
my_À·
, 
	gmy_right
;

248 
«me•a˚
 
	göã∫Æ
 {

254 c⁄° 
size_t
 
	gNFS_MaxLöeSize
 = 128;

275 
	#__TBB_©omic


276 

	)

277 
	gãm∂©e
<
˛ass
 
	gT
, 
size_t
 
	gS
, size_à
	gR
>

278 
	g∑dded_ba£
 : 
T
 {

279 
∑d
[
S
 - 
R
];

281 
	gãm∂©e
<
˛ass
 
	gT
, 
size_t
 
	gS
> 
	g∑dded_ba£
<T, S, 0> : 
T
 {};

284 
	gãm∂©e
<
˛ass
 
	gT
, 
size_t
 
	gS
 = 
NFS_MaxLöeSize
>

285 
∑dded
 : 
∑dded_ba£
<
T
, 
	gS
, (
	gT
) % S> {};

290 
	#__TBB_off£tof
(
˛ass_«me
, 
membî_«me
) \

291 ((
±rdiff_t
)&(
ªöãΩªt_ˇ°
<
˛ass_«me
*>(0x1000)->
membî_«me
Ë- 0x1000)

	)

294 
	#__TBB_gë_obje˘_ªf
(
˛ass_«me
, 
membî_«me
, 
membî_addr
) \

295 (*
ªöãΩªt_ˇ°
<
˛ass_«me
*>((*)
membî_addr
 - 
	`__TBB_off£tof
(˛ass_«me, 
membî_«me
)))

	)

298 
__TBB_EXPORTED_FUNC
 
h™dÀ_≥º‹
–
îr‹_code
, c⁄° * 
aux_öfo
 );

300 #i‡
TBB_USE_EXCEPTIONS


301 
	#__TBB_TRY
 
åy


	)

302 
	#__TBB_CATCH
(
e
Ë
	`ˇtch
”)

	)

303 
	#__TBB_THROW
(
e
Ë
throw
 
	)
e

304 
	#__TBB_RETHROW
(Ë
throw


	)

306 
ölöe
 
boﬁ
 
__TBB_Ál£
(Ë{  
	gÁl£
; }

307 
	#__TBB_TRY


	)

308 
	#__TBB_CATCH
(
e
Ëi‡–
tbb
::
öã∫Æ
::
	`__TBB_Ál£
(Ë)

	)

309 
	#__TBB_THROW
(
e
Ë(()0)

	)

310 
	#__TBB_RETHROW
(Ë(()0)

	)

314 
__TBB_EXPORTED_FUNC
 
ru¡ime_w¨nög
–c⁄° * 
f‹m©
, ... );

316 #i‡
TBB_USE_ASSERT


317 * c⁄° 
	gpois⁄ed_±r
 = 
ªöãΩªt_ˇ°
<*>(-1);

321 
	gãm∂©e
<
ty≥«me
 
	gT
>

322 
ölöe
 
pois⁄_poöãr
–
T
* 
__TBB_©omic
 & 
p
 ) { 
	gp
 = 
ªöãΩªt_ˇ°
<T*>(
pois⁄ed_±r
); }

325 
	gãm∂©e
<
ty≥«me
 
	gT
>

326 
ölöe
 
boﬁ
 
is_pois⁄ed
–
T
* 
p
 ) {  
	gp
 =
ªöãΩªt_ˇ°
<T*>(
pois⁄ed_±r
); }

328 
	gãm∂©e
<
ty≥«me
 
	gT
>

329 
ölöe
 
pois⁄_poöãr
–
T
* 
__TBB_©omic
 & ) { }

337 
	gãm∂©e
<
ty≥«me
 
	gT
,Åy≥«mê
	gU
>

338 
ölöe
 
T
 
pu¬ed_ˇ°
–
U
* 
±r
 ) {

339 
uöçå_t
 
	gx
 = 
ªöãΩªt_ˇ°
<uöçå_t>(
±r
);

340  
	gªöãΩªt_ˇ°
<
	gT
>(
	gx
);

344 ˛as†
	cno_assign
 {

346 
	g›î©‹
=–c⁄° 
no_assign
& );

347 
	gpublic
:

348 #i‡
__GNUC__


350 
no_assign
() {}

355 ˛as†
	cno_c›y
: 
no_assign
 {

357 
no_c›y
( constÇo_copy& );

358 
	gpublic
:

360 
no_c›y
() {}

363 #i‡
TBB_DEPRECATED_MUTEX_COPYING


364 ˛as†
	cmuãx_c›y_dïªˇãd_™d_dißbÀd
 {};

368 ˛as†
	cmuãx_c›y_dïªˇãd_™d_dißbÀd
 : 
no_c›y
 {};

372 
	gãm∂©e
<
ty≥«me
 
	gT
>

373 
ölöe
 
boﬁ
 
is_Æig√d
(
T
* 
poöãr
, 
uöçå_t
 
Æignmít
) {

374  0==((
uöçå_t
)
poöãr
 & (
Æignmít
-1));

378 
	gãm∂©e
<
ty≥«me
 
	göãgî_ty≥
>

379 
ölöe
 
boﬁ
 
is_powî_of_two
(
öãgî_ty≥
 
¨g
) {

380  
	g¨g
 && (0 =(
¨g
 & (arg - 1)));

384 
	gãm∂©e
<
ty≥«me
 
	g¨gumít_öãgî_ty≥
,Åy≥«mê
	gdivis‹_öãgî_ty≥
>

385 
ölöe
 
¨gumít_öãgî_ty≥
 
modulo_powî_of_two
◊rgumít_öãgî_ty≥ 
¨g
, 
divis‹_öãgî_ty≥
 
divis‹
) {

387 
__TBB_ASSERT
–
is_powî_of_two
(
divis‹
), "Divisor should beáÖower ofÅwo" );

388  (
	g¨g
 & (
	gdivis‹
 - 1));

395 
	gãm∂©e
<
ty≥«me
 
	g¨gumít_öãgî_ty≥
,Åy≥«mê
	gdivis‹_öãgî_ty≥
>

396 
ölöe
 
boﬁ
 
is_powî_of_two_Á˘‹
(
¨gumít_öãgî_ty≥
 
¨g
, 
divis‹_öãgî_ty≥
 
divis‹
) {

398 
__TBB_ASSERT
–
is_powî_of_two
(
divis‹
), "Divisor should beáÖower ofÅwo" );

399  0 =(
¨g
 & (¨g - 
divis‹
));

403 
	gãm∂©e
<
ty≥«me
 
	gT
>

404 
suµªss_unu£d_w¨nög
–c⁄° 
T
& ) {}

409 
	svîsi⁄_èg_v3
 {};

411 
vîsi⁄_èg_v3
 
	tvîsi⁄_èg
;

419 #i‡
__TBB_ALLOCATOR_TRAITS_PRESENT


420 
	~<mem‹y
>

423 #i‡
__TBB_CPP11_RVALUE_REF_PRESENT
 || 
_LIBCPP_VERSION


424 
	~<utûôy
>

427 
«me•a˚
 
	gtbb
 {

428 
«me•a˚
 
	göã∫Æ
 {

431 
	gãm∂©e
<
ty≥«me
 
	gT
>

432 
	sÆloˇt‹_ty≥
 {

433 
T
 
	tvÆue_ty≥
;

436 #i‡
_MSC_VER


438 
	gãm∂©e
<
ty≥«me
 
	gT
>

439 
	gÆloˇt‹_ty≥
<c⁄° 
	gT
> {

440 
T
 
	tvÆue_ty≥
;

446 
	gãm∂©e
 <
boﬁ
 
	gv
>

447 
	sboﬁ_c⁄°™t
 {

448 c⁄° 
boﬁ
 
	gvÆue
 = 
v
;

450 
	gboﬁ_c⁄°™t
<
	tåue
> 
	tåue_ty≥
;

451 
	gboﬁ_c⁄°™t
<
	tÁl£
> 
	tÁl£_ty≥
;

453 #i‡
__TBB_ALLOCATOR_TRAITS_PRESENT


454 
usög
 
	g°d
::
Æloˇt‹_åaôs
;

456 
	gãm∂©e
<
ty≥«me
 
	gÆloˇt‹
>

457 
	sÆloˇt‹_åaôs
{

458 
	gtbb
::
	töã∫Æ
::
	tÁl£_ty≥
 
	t¥›ag©e_⁄_c⁄èöî_move_assignmít
;

463 
	gãm∂©e
 <
	gu
, 
	guŒ
 >

464 
	s£À˘_size_t_c⁄°™t
 {

467 c⁄° 
size_t
 
	gvÆue
 = (size_t)(((size_t)==(
u
)Ë? u : 
uŒ
);

470 #i‡
__TBB_CPP11_RVALUE_REF_PRESENT


471 
usög
 
	g°d
::
move
;

472 #ñi‡
deföed
(
_LIBCPP_NAMESPACE
)

474 
usög
 
	g°d
::
_LIBCPP_NAMESPACE
::
move
;

476 
	gãm∂©e
 <
ty≥«me
 
	gT
>

477 
	gT
& 
move
–
T
& 
x
 ) {  
	gx
; }

480 
	gãm∂©e
 <
boﬁ
 
	gc⁄dôi⁄
>

481 
	gSTATIC_ASSERTION_FAILED
;

483 
	gãm∂©e
 <>

484 
	gSTATIC_ASSERTION_FAILED
<
	gÁl£
> {Énum {
	gvÆue
=1};};

486 
	gãm∂©e
<>

487 
	gSTATIC_ASSERTION_FAILED
<
	gåue
>;

492 #i‡ 
__TBB_STATIC_ASSERT_PRESENT


493 
	#__TBB_STATIC_ASSERT
(
c⁄dôi⁄
,
msg
Ë
	$°©ic_as£π
(
c⁄dôi⁄
,
msg
)

	)

496 
	#__TBB_STATIC_ASSERT_IMPL1
(
c⁄dôi⁄
,
msg
,
löe
) \

497 íum {
°©ic_as£π_⁄_löe_
##
löe
 = 
tbb
::
öã∫Æ
::
STATIC_ASSERTION_FAILED
<!(
c⁄dôi⁄
)>::
vÆue
}

499 
	#__TBB_STATIC_ASSERT_IMPL
(
c⁄dôi⁄
,
msg
,
löe
Ë
	$__TBB_STATIC_ASSERT_IMPL1
(
c⁄dôi⁄
,
msg
,
löe
)

	)

501 
	#__TBB_STATIC_ASSERT
(
c⁄dôi⁄
,
msg
Ë
	$__TBB_STATIC_ASSERT_IMPL
(
c⁄dôi⁄
,
msg
,
__LINE__
)

	)

	@viper/concurrentqueue-src/benchmarks/tbb/tbb_thread.cpp

21 #i‡
_WIN32
||
_WIN64


22 
	~<¥o˚ss.h
>

24 
	~<î∫o.h
>

25 
	~"tbb_misc.h
"

26 
	~"tbb/tbb_°ddef.h
"

27 
	~"tbb/tbb_thªad.h
"

28 
	~"tbb/tbb_Æloˇt‹.h
"

29 
	~"govîn‹.h
"

30 #i‡
__TBB_WIN8UI_SUPPORT


31 
	~<thªad
>

34 
«me•a˚
 
	gtbb
 {

35 
«me•a˚
 
	göã∫Æ
 {

38 * 
Æloˇã_˛osuª_v3
–
size_t
 
size
 )

40  
Æloˇã_vü_h™dÀr_v3
–
size
 );

44 
‰ì_˛osuª_v3
–*
±r
 )

46 
dóŒoˇã_vü_h™dÀr_v3
–
±r
 );

49 
	gtbb_thªad_v3
::
joö
()

51 i‡(!
joöabÀ
())

52 
h™dÀ_≥º‹
–
EINVAL
, "tbb_thread::join" );

53 i‡(
	gthis_tbb_thªad
::
gë_id
() == get_id())

54 
h™dÀ_≥º‹
–
EDEADLK
, "tbb_thread::join" );

55 #i‡
_WIN32
||
_WIN64


56 #i‡
__TBB_WIN8UI_SUPPORT


57 
	g°d
::
thªad
* 
thªad_tmp
=(
°d
::thªad*)
my_thªad_id
;

58 
	gthªad_tmp
->
joö
();

59 
dñëe
 
	gthªad_tmp
;

61 
DWORD
 
	g°©us
 = 
WaôF‹SögÀObje˘Ex
–
my_h™dÀ
, 
INFINITE
, 
FALSE
 );

62 i‡–
	g°©us
 =
WAIT_FAILED
 )

63 
h™dÀ_wö_îr‹
–
GëLa°Eº‹
() );

64 
BOOL
 
	g˛o£_°©
 = 
Clo£H™dÀ
–
my_h™dÀ
 );

65 i‡–
	g˛o£_°©
 == 0 )

66 
h™dÀ_wö_îr‹
–
GëLa°Eº‹
() );

67 
	gmy_thªad_id
 = 0;

70 
	g°©us
 = 
±hªad_joö
–
my_h™dÀ
, 
NULL
 );

71 if–
	g°©us
 )

72 
h™dÀ_≥º‹
–
°©us
, "pthread_join" );

74 
	gmy_h™dÀ
 = 0;

77 
	gtbb_thªad_v3
::
dëach
() {

78 i‡(!
joöabÀ
())

79 
h™dÀ_≥º‹
–
EINVAL
, "tbb_thread::detach" );

80 #i‡
_WIN32
||
_WIN64


81 
BOOL
 
	g°©us
 = 
Clo£H™dÀ
–
my_h™dÀ
 );

82 i‡–
	g°©us
 == 0 )

83 
h™dÀ_wö_îr‹
–
GëLa°Eº‹
() );

84 
	gmy_thªad_id
 = 0;

86 
	g°©us
 = 
±hªad_dëach
–
my_h™dÀ
 );

87 if–
	g°©us
 )

88 
h™dÀ_≥º‹
–
°©us
, "pthread_detach" );

90 
	gmy_h™dÀ
 = 0;

93 
	gtbb_thªad_v3
::
öã∫Æ_°¨t
–
__TBB_NATIVE_THREAD_ROUTINE_PTR
(
°¨t_routöe
),

94 * 
˛osuª
 ) {

95 #i‡
_WIN32
||
_WIN64


96 #i‡
__TBB_WIN8UI_SUPPORT


97 
	g°d
::
thªad
* 
thªad_tmp
=
√w
 
°d
::thªad(
°¨t_routöe
, 
˛osuª
);

98 
	gmy_h™dÀ
 = 
thªad_tmp
->
«tive_h™dÀ
();

102 
	gmy_thªad_id
 = (
size_t
)
thªad_tmp
;

104 
	gthªad_id
;

107 
uöçå_t
 
	g°©us
 = 
_begöthªadex
–
NULL
, 
ThªadSèckSize
, 
°¨t_routöe
,

108 
˛osuª
, 0, &
thªad_id
 );

109 if–
	g°©us
==0 )

110 
h™dÀ_≥º‹
(
î∫o
,"__beginthreadex");

112 
	gmy_h™dÀ
 = (
HANDLE
)
°©us
;

113 
	gmy_thªad_id
 = 
thªad_id
;

117 
±hªad_t
 
	gthªad_h™dÀ
;

118 
	g°©us
;

119 
±hªad_©å_t
 
	g°ack_size
;

120 
	g°©us
 = 
±hªad_©å_öô
–&
°ack_size
 );

121 if–
	g°©us
 )

122 
h™dÀ_≥º‹
–
°©us
, "pthread_attr_init" );

123 
	g°©us
 = 
±hªad_©å_£t°acksize
–&
°ack_size
, 
ThªadSèckSize
 );

124 if–
	g°©us
 )

125 
h™dÀ_≥º‹
–
°©us
, "pthread_attr_setstacksize" );

127 
	g°©us
 = 
±hªad_¸óã
–&
thªad_h™dÀ
, &
°ack_size
, 
°¨t_routöe
, 
˛osuª
 );

128 if–
	g°©us
 )

129 
h™dÀ_≥º‹
–
°©us
, "pthread_create" );

130 
	g°©us
 = 
±hªad_©å_de°roy
–&
°ack_size
 );

131 if–
	g°©us
 )

132 
h™dÀ_≥º‹
–
°©us
, "pthread_attr_destroy" );

134 
	gmy_h™dÀ
 = 
thªad_h™dÀ
;

138 
	gtbb_thªad_v3
::
h¨dw¨e_c⁄cuºícy
(Ë
__TBB_NOEXCEPT
(
åue
) {

139  
govîn‹
::
deÁu…_num_thªads
();

142 
	gtbb_thªad_v3
::
id
 
thªad_gë_id_v3
() {

143 #i‡
_WIN32
||
_WIN64


144  
tbb_thªad_v3
::
id
–
GëCuºítThªadId
() );

146  
	gtbb_thªad_v3
::
id
–
±hªad_£lf
() );

150 
move_v3
–
tbb_thªad_v3
& 
t1
,Åbb_thªad_v3& 
t2
 )

152 i‡(
	gt1
.
joöabÀ
())

153 
	gt1
.
dëach
();

154 
	gt1
.
	gmy_h™dÀ
 = 
t2
.
my_h™dÀ
;

155 
	gt2
.
	gmy_h™dÀ
 = 0;

156 #i‡
_WIN32
||
_WIN64


157 
	gt1
.
	gmy_thªad_id
 = 
t2
.
my_thªad_id
;

158 
	gt2
.
	gmy_thªad_id
 = 0;

162 
thªad_yõld_v3
()

164 
__TBB_Yõld
();

167 
thªad_¶ìp_v3
(c⁄° 
tick_cou¡
::
öãrvÆ_t
 &
i
)

169 #i‡
_WIN32
||
_WIN64


170 
tick_cou¡
 
t0
 =Åick_cou¡::
now
();

171 
tick_cou¡
 
	gt1
 = 
t0
;

173 
	gªmaödî
 = (
i
-(
t1
-
t0
)).
£c⁄ds
()*1e3;

174 if–
	gªmaödî
<=0 ) ;

175 
DWORD
 
	gt
 = 
ªmaödî
>=
INFINITE
 ? INFINITE-1 : DWORD(remainder);

176 #i‡!
__TBB_WIN8UI_SUPPORT


177 
SÀï
–
t
 );

179 
	g°d
::
chr⁄o
::
mûli£c⁄ds
 
¶ìp_time
–
t
 );

180 
	g°d
::
this_thªad
::
¶ìp_f‹
–
¶ìp_time
 );

182 
	gt1
 = 
tick_cou¡
::
now
();

185 
time•ec
 
	gªq
;

186 
	g£c
 = 
i
.
£c⁄ds
();

188 
	gªq
.
	gtv_£c
 = 
°©ic_ˇ°
<>(
£c
);

189 
	gªq
.
	gtv_n£c
 = 
°©ic_ˇ°
<>–(
£c
 - 
ªq
.
tv_£c
)*1e9 );

190 
«no¶ìp
(&
ªq
, 
NULL
);

	@viper/concurrentqueue-src/benchmarks/tbb/tbb_thread.h

21 #i‚de‡
__TBB_tbb_thªad_H


22 
	#__TBB_tbb_thªad_H


	)

24 
	~"tbb_°ddef.h
"

25 #i‡
_WIN32
||
_WIN64


26 
	~"machöe/wödows_≠i.h
"

27 
	#__TBB_NATIVE_THREAD_ROUTINE
 
WINAPI


	)

28 
	#__TBB_NATIVE_THREAD_ROUTINE_PTR
(
r
Ë(
WINAPI
*Ñ)–* )

	)

29 #i‡
__TBB_WIN8UI_SUPPORT


30 
size_t
 
	tthªad_id_ty≥
;

32 
DWORD
 
	tthªad_id_ty≥
;

35 
	#__TBB_NATIVE_THREAD_ROUTINE
 *

	)

36 
	#__TBB_NATIVE_THREAD_ROUTINE_PTR
(
r
Ë* (*r)–* )

	)

37 
	~<±hªad.h
>

40 
	~"tick_cou¡.h
"

42 #i‡!
TBB_USE_EXCEPTIONS
 && 
_MSC_VER


44 #¥agm®
w¨nög
 (
push
)

45 #¥agm®
w¨nög
 (
dißbÀ
: 4530)

48 
	~<iosfwd
>

50 #i‡!
TBB_USE_EXCEPTIONS
 && 
_MSC_VER


51 #¥agm®
w¨nög
 (
p›
)

54 
«me•a˚
 
	gtbb
 {

56 
«me•a˚
 
	göã∫Æ
 {

57 
˛ass
 
	gtbb_thªad_v3
;

60 
ölöe
 
sw≠
–
öã∫Æ
::
tbb_thªad_v3
& 
t1
, i¡î«l::tbb_thªad_v3& 
t2
 ) 
__TBB_NOEXCEPT
(
åue
);

62 
«me•a˚
 
	göã∫Æ
 {

65 * 
__TBB_EXPORTED_FUNC
 
Æloˇã_˛osuª_v3
–
size_t
 
size
 );

67 
__TBB_EXPORTED_FUNC
 
‰ì_˛osuª_v3
( * );

69 
	sthªad_˛osuª_ba£
 {

70 * 
›î©‹
 
√w
–
size_t
 
size
 ) { 
Æloˇã_˛osuª_v3
(size);}

71 
›î©‹
 
dñëe
–* 
±r
 ) {
‰ì_˛osuª_v3
(ptr);}

74 
	gãm∂©e
<
˛ass
 
	gF
> 
	gthªad_˛osuª_0
: 
thªad_˛osuª_ba£
 {

75 
F
 
fun˘i⁄
;

77 
__TBB_NATIVE_THREAD_ROUTINE
 
°¨t_routöe
–* 
c
 ) {

78 
thªad_˛osuª_0
 *
	g£lf
 = 
°©ic_ˇ°
<thªad_˛osuª_0*>(
c
);

79 
	g£lf
->
fun˘i⁄
();

80 
dñëe
 
	g£lf
;

83 
thªad_˛osuª_0
–c⁄° 
F
& 
f
 ) : 
fun˘i⁄
(f) {}

86 
	gãm∂©e
<
˛ass
 
	gF
, cœs†
	gX
> 
	gthªad_˛osuª_1
: 
thªad_˛osuª_ba£
 {

87 
F
 
fun˘i⁄
;

88 
X
 
	g¨g1
;

90 
__TBB_NATIVE_THREAD_ROUTINE
 
°¨t_routöe
–* 
c
 ) {

91 
thªad_˛osuª_1
 *
	g£lf
 = 
°©ic_ˇ°
<thªad_˛osuª_1*>(
c
);

92 
	g£lf
->
fun˘i⁄
(
£lf
->
¨g1
);

93 
dñëe
 
	g£lf
;

96 
thªad_˛osuª_1
–c⁄° 
F
& 
f
, c⁄° 
X
& 
x
 ) : 
fun˘i⁄
(f), 
¨g1
(x) {}

98 
	gãm∂©e
<
˛ass
 
	gF
, cœs†
	gX
, cœs†
	gY
> 
	gthªad_˛osuª_2
: 
thªad_˛osuª_ba£
 {

99 
F
 
fun˘i⁄
;

100 
X
 
	g¨g1
;

101 
Y
 
	g¨g2
;

103 
__TBB_NATIVE_THREAD_ROUTINE
 
°¨t_routöe
–* 
c
 ) {

104 
thªad_˛osuª_2
 *
	g£lf
 = 
°©ic_ˇ°
<thªad_˛osuª_2*>(
c
);

105 
	g£lf
->
fun˘i⁄
(
£lf
->
¨g1
, sñf->
¨g2
);

106 
dñëe
 
	g£lf
;

109 
thªad_˛osuª_2
–c⁄° 
F
& 
f
, c⁄° 
X
& 
x
, c⁄° 
Y
& 
y
 ) : 
fun˘i⁄
(f), 
¨g1
(x), 
¨g2
(y) {}

113 ˛as†
	ctbb_thªad_v3
 {

114 #i‡
__TBB_IF_NO_COPY_CTOR_MOVE_SEMANTICS_BROKEN


118 
	gpublic
:

120 
tbb_thªad_v3
(constÅbb_thread_v3&);

121 
	gpublic
:

122 #i‡
_WIN32
||
_WIN64


123 
HANDLE
 
	t«tive_h™dÀ_ty≥
;

125 
±hªad_t
 
	t«tive_h™dÀ_ty≥
;

128 
˛ass
 
	gid
;

130 
tbb_thªad_v3
(Ë
__TBB_NOEXCEPT
(
åue
Ë: 
my_h™dÀ
(0)

131 #i‡
_WIN32
||
_WIN64


132 , 
my_thªad_id
(0)

137 
	gãm∂©e
 <
˛ass
 
	gF
> 
ex∂icô
 
tbb_thªad_v3
(
F
 
f
) {

138 
	göã∫Æ
::
	tthªad_˛osuª_0
<
	tF
> 
	t˛osuª_ty≥
;

139 
öã∫Æ_°¨t
(
˛osuª_ty≥
::
°¨t_routöe
, 
√w
 closuª_ty≥(
f
));

142 
	gãm∂©e
 <
˛ass
 
	gF
, cœs†
	gX
> 
tbb_thªad_v3
(
F
 
f
, 
X
 
x
) {

143 
	göã∫Æ
::
	tthªad_˛osuª_1
<
	tF
,
	tX
> 
	t˛osuª_ty≥
;

144 
öã∫Æ_°¨t
(
˛osuª_ty≥
::
°¨t_routöe
, 
√w
 closuª_ty≥(
f
,
x
));

147 
	gãm∂©e
 <
˛ass
 
	gF
, cœs†
	gX
, cœs†
	gY
> 
tbb_thªad_v3
(
F
 
f
, 
X
 
x
, 
Y
 
y
) {

148 
	göã∫Æ
::
	tthªad_˛osuª_2
<
	tF
,
	tX
,
	tY
> 
	t˛osuª_ty≥
;

149 
öã∫Æ_°¨t
(
˛osuª_ty≥
::
°¨t_routöe
, 
√w
 closuª_ty≥(
f
,
x
,
y
));

152 #i‡
__TBB_CPP11_RVALUE_REF_PRESENT


153 
tbb_thªad_v3
—bb_thªad_v3&& 
x
Ë
__TBB_NOEXCEPT
(
åue
)

154 : 
my_h™dÀ
(
x
.my_handle)

155 #i‡
_WIN32
||
_WIN64


156 , 
my_thªad_id
(
x
.my_thread_id)

159 
	gx
.
öã∫Æ_wùe
();

161 
	gtbb_thªad_v3
& 
	g›î©‹
=(
tbb_thªad_v3
&& 
x
Ë
__TBB_NOEXCEPT
(
åue
) {

162 
öã∫Æ_move
(
x
);

163  *
	gthis
;

165 
	g¥iv©e
:

166 
tbb_thªad_v3
& 
›î©‹
=(c⁄°Åbb_thªad_v3& 
x
);

167 
	gpublic
:

169 
tbb_thªad_v3
& 
›î©‹
=—bb_thªad_v3& 
x
) {

170 
öã∫Æ_move
(
x
);

171  *
	gthis
;

175 
sw≠
–
tbb_thªad_v3
& 
t
 ) 
__TBB_NOEXCEPT
(
åue
Ë{
	gtbb
::sw≠–*
this
,Å );}

176 
boﬁ
 
joöabÀ
(Ëc⁄° 
__TBB_NOEXCEPT
(
åue
Ë{ 
	gmy_h™dÀ
!=0; }

178 
__TBB_EXPORTED_METHOD
 
joö
();

180 
__TBB_EXPORTED_METHOD
 
dëach
();

181 ~
tbb_thªad_v3
(Ë{if–
joöabÀ
(ËË
dëach
();}

182 
ölöe
 
id
 
gë_id
(Ëc⁄° 
__TBB_NOEXCEPT
(
åue
);

183 
«tive_h™dÀ_ty≥
 
«tive_h™dÀ
(Ë{  
	gmy_h™dÀ
; }

195 
__TBB_EXPORTED_FUNC
 
h¨dw¨e_c⁄cuºícy
(Ë
__TBB_NOEXCEPT
(
åue
);

196 
	g¥iv©e
:

197 
«tive_h™dÀ_ty≥
 
my_h™dÀ
;

198 #i‡
_WIN32
||
_WIN64


199 
thªad_id_ty≥
 
	gmy_thªad_id
;

202 
öã∫Æ_wùe
(Ë
__TBB_NOEXCEPT
(
åue
) {

203 
	gmy_h™dÀ
 = 0;

204 #i‡
_WIN32
||
_WIN64


205 
	gmy_thªad_id
 = 0;

208 
öã∫Æ_move
(
tbb_thªad_v3
& 
x
Ë
__TBB_NOEXCEPT
(
åue
) {

209 i‡(
joöabÀ
()Ë
dëach
();

210 
	gmy_h™dÀ
 = 
x
.
my_h™dÀ
;

211 #i‡
_WIN32
||
_WIN64


212 
	gmy_thªad_id
 = 
x
.
my_thªad_id
;

214 
	gx
.
öã∫Æ_wùe
();

218 
__TBB_EXPORTED_METHOD
 
öã∫Æ_°¨t
–
__TBB_NATIVE_THREAD_ROUTINE_PTR
(
°¨t_routöe
),

219 * 
˛osuª
 );

220 
‰õnd
 
__TBB_EXPORTED_FUNC
 
move_v3
–
tbb_thªad_v3
& 
t1
,Åbb_thªad_v3& 
t2
 );

221 
‰õnd
 
	gtbb
::
sw≠
–
tbb_thªad_v3
& 
t1
,Åbb_thªad_v3& 
t2
 ) 
__TBB_NOEXCEPT
(
åue
);

224 ˛as†
	ctbb_thªad_v3
::
id
 {

225 #i‡
_WIN32
||
_WIN64


226 
thªad_id_ty≥
 
my_id
;

227 
id
–
thªad_id_ty≥
 
id_
 ) : 
my_id
(id_) {}

229 
±hªad_t
 
my_id
;

230 
id
–
±hªad_t
 
id_
 ) : 
my_id
(id_) {}

232 
‰õnd
 
˛ass
 
tbb_thªad_v3
;

233 
	gpublic
:

234 
id
(Ë
__TBB_NOEXCEPT
(
åue
Ë: 
my_id
(0) {}

236 
‰õnd
 
boﬁ
 
›î©‹
==–
tbb_thªad_v3
::
id
 
x
, 
	gtbb_thªad_v3
::id 
y
 ) 
__TBB_NOEXCEPT
(
åue
);

237 
‰õnd
 
boﬁ
 
	g›î©‹
!=–
tbb_thªad_v3
::
id
 
x
, 
	gtbb_thªad_v3
::id 
y
 ) 
__TBB_NOEXCEPT
(
åue
);

238 
‰õnd
 
boﬁ
 
	g›î©‹
<–
	gtbb_thªad_v3
::
id
 
x
,Åbb_thªad_v3::id 
y
 ) 
__TBB_NOEXCEPT
(
åue
);

239 
‰õnd
 
boﬁ
 
	g›î©‹
<=–
tbb_thªad_v3
::
id
 
x
, 
	gtbb_thªad_v3
::id 
y
 ) 
__TBB_NOEXCEPT
(
åue
);

240 
‰õnd
 
boﬁ
 
	g›î©‹
>–
	gtbb_thªad_v3
::
id
 
x
,Åbb_thªad_v3::id 
y
 ) 
__TBB_NOEXCEPT
(
åue
);

241 
‰õnd
 
boﬁ
 
	g›î©‹
>=–
tbb_thªad_v3
::
id
 
x
, 
	gtbb_thªad_v3
::id 
y
 ) 
__TBB_NOEXCEPT
(
åue
);

243 
	gãm∂©e
<
˛ass
 
	gch¨T
, cœs†
	gåaôs
>

244 
‰õnd
 
	g°d
::
basic_o°ªam
<
ch¨T
, 
	gåaôs
>&

245 
	g›î©‹
<< (
	g°d
::
basic_o°ªam
<
ch¨T
, 
	gåaôs
> &
	gout
,

246 
	gtbb_thªad_v3
::
id
 id)

248 
out
 << 
id
.
my_id
;

249  
	gout
;

251 
‰õnd
 
	gtbb_thªad_v3
::
id
 
__TBB_EXPORTED_FUNC
 
thªad_gë_id_v3
();

254 
	gtbb_thªad_v3
::
id
 
tbb_thªad_v3
::
gë_id
(Ëc⁄° 
__TBB_NOEXCEPT
(
åue
) {

255 #i‡
_WIN32
||
_WIN64


256  
id
(
my_thªad_id
);

258  
id
(
my_h™dÀ
);

261 
__TBB_EXPORTED_FUNC
 
move_v3
–
tbb_thªad_v3
& 
t1
,Åbb_thªad_v3& 
t2
 );

262 
	gtbb_thªad_v3
::
id
 
__TBB_EXPORTED_FUNC
 
thªad_gë_id_v3
();

263 
__TBB_EXPORTED_FUNC
 
thªad_yõld_v3
();

264 
__TBB_EXPORTED_FUNC
 
thªad_¶ìp_v3
(c⁄° 
tick_cou¡
::
öãrvÆ_t
 &
i
);

266 
ölöe
 
boﬁ
 
	g›î©‹
==(
tbb_thªad_v3
::
id
 
x
, 
	gtbb_thªad_v3
::id 
y
Ë
__TBB_NOEXCEPT
(
åue
)

268  
x
.
my_id
 =
y
.my_id;

270 
ölöe
 
boﬁ
 
	g›î©‹
!=(
tbb_thªad_v3
::
id
 
x
, 
	gtbb_thªad_v3
::id 
y
Ë
__TBB_NOEXCEPT
(
åue
)

272  
x
.
my_id
 !
y
.my_id;

274 
ölöe
 
boﬁ
 
	g›î©‹
<(
	gtbb_thªad_v3
::
id
 
x
,Åbb_thªad_v3::id 
y
Ë
__TBB_NOEXCEPT
(
åue
)

276  
x
.
my_id
 < 
y
.my_id;

278 
ölöe
 
boﬁ
 
	g›î©‹
<=(
tbb_thªad_v3
::
id
 
x
, 
	gtbb_thªad_v3
::id 
y
Ë
__TBB_NOEXCEPT
(
åue
)

280  
x
.
my_id
 <
y
.my_id;

282 
ölöe
 
boﬁ
 
	g›î©‹
>(
	gtbb_thªad_v3
::
id
 
x
,Åbb_thªad_v3::id 
y
Ë
__TBB_NOEXCEPT
(
åue
)

284  
x
.
my_id
 > 
y
.my_id;

286 
ölöe
 
boﬁ
 
	g›î©‹
>=(
tbb_thªad_v3
::
id
 
x
, 
	gtbb_thªad_v3
::id 
y
Ë
__TBB_NOEXCEPT
(
åue
)

288  
x
.
my_id
 >
y
.my_id;

294 
	göã∫Æ
::
	ttbb_thªad_v3
 
	ttbb_thªad
;

296 
usög
 
	göã∫Æ
::
›î©‹
==;

297 
usög
 
	göã∫Æ
::
›î©‹
!=;

298 
usög
 
	göã∫Æ
::
›î©‹
<;

299 
usög
 
	göã∫Æ
::
›î©‹
>;

300 
usög
 
	göã∫Æ
::
›î©‹
<=;

301 
usög
 
	göã∫Æ
::
›î©‹
>=;

303 
ölöe
 
	$move
–
tbb_thªad
& 
t1
,Åbb_thªad& 
t2
 ) {

304 
öã∫Æ
::
	`move_v3
(
t1
, 
t2
);

305 
	}
}

307 
ölöe
 
	$sw≠
–
öã∫Æ
::
tbb_thªad_v3
& 
t1
, i¡î«l::tbb_thªad_v3& 
t2
 ) 
	$__TBB_NOEXCEPT
(
åue
) {

308 
tbb
::
tbb_thªad
::
«tive_h™dÀ_ty≥
 
h
 = 
t1
.
my_h™dÀ
;

309 
t1
.
my_h™dÀ
 = 
t2
.my_handle;

310 
t2
.
my_h™dÀ
 = 
h
;

311 #i‡
_WIN32
||
_WIN64


312 
thªad_id_ty≥
 
i
 = 
t1
.
my_thªad_id
;

313 
t1
.
my_thªad_id
 = 
t2
.my_thread_id;

314 
t2
.
my_thªad_id
 = 
i
;

316 
	}
}

318 
«me•a˚
 
	gthis_tbb_thªad
 {

319 
ölöe
 
	gtbb_thªad
::
id
 
gë_id
(Ë{  
öã∫Æ
::
thªad_gë_id_v3
(); }

321 
ölöe
 
yõld
(Ë{ 
	göã∫Æ
::
thªad_yõld_v3
(); }

323 
ölöe
 
¶ìp
(c⁄° 
tick_cou¡
::
öãrvÆ_t
 &
i
) {

324 
öã∫Æ
::
thªad_¶ìp_v3
(
i
);

	@viper/concurrentqueue-src/benchmarks/tbb/tbb_version.h

22 
	~"tbb/tbb_°ddef.h
"

25 #i‚de‡
ENDL


26 
	#ENDL
 "\n"

	)

28 
	~"vîsi⁄_°rög.vî
"

30 #i‚de‡
__TBB_VERSION_STRINGS


31 #¥agm®
mesßge
("Warning: version_string.ver isn't generatedÖroperly by version_info.sh script!")

33 
	#__TBB_VERSION_STRINGS
 \

39 "TBB: BUILD_COMMAND\tUnknown\n"

	)

41 #i‚de‡
__TBB_DATETIME


42 #ifde‡
RC_INVOKED


43 
	#__TBB_DATETIME
 "Unknown"

	)

45 
	#__TBB_DATETIME
 
__DATE__
 
__TIME__


	)

49 
	#__TBB_VERSION_NUMBER
(
N
Ë#N ": VERSION\t\t" 
	`__TBB_STRING
(
TBB_VERSION_MAJOR
.
TBB_VERSION_MINOR
Ë
ENDL


	)

50 
	#__TBB_INTERFACE_VERSION_NUMBER
(
N
Ë#N ": INTERFACE VERSION\t" 
	`__TBB_STRING
(
TBB_INTERFACE_VERSION
Ë
ENDL


	)

52 
	#__TBB_VERSION_DATETIME
(
N
Ë#N ": BUILD_DATE\t\t" 
__TBB_DATETIME
 
ENDL


	)

53 #i‚de‡
TBB_USE_DEBUG


54 
	#__TBB_VERSION_USE_DEBUG
(
N
Ë#N ": TBB_USE_DEBUG\tundeföed" 
ENDL


	)

55 #ñi‡
TBB_USE_DEBUG
==0

56 
	#__TBB_VERSION_USE_DEBUG
(
N
Ë#N ": TBB_USE_DEBUG\t0" 
ENDL


	)

57 #ñi‡
TBB_USE_DEBUG
==1

58 
	#__TBB_VERSION_USE_DEBUG
(
N
Ë#N ": TBB_USE_DEBUG\t1" 
ENDL


	)

59 #ñi‡
TBB_USE_DEBUG
==2

60 
	#__TBB_VERSION_USE_DEBUG
(
N
Ë#N ": TBB_USE_DEBUG\t2" 
ENDL


	)

62 #îr‹ 
U√x≥˘ed
 
vÆue
 
TBB_USE_DEBUG


71 #ifde‡
RC_INVOKED


72 
	#__TBB_VERSION_USE_ASSERT
(
N
)

	)

74 #i‚de‡
TBB_USE_ASSERT


75 
	#__TBB_VERSION_USE_ASSERT
(
N
Ë#N ": TBB_USE_ASSERT\tundeföed" 
ENDL


	)

76 #ñi‡
TBB_USE_ASSERT
==0

77 
	#__TBB_VERSION_USE_ASSERT
(
N
Ë#N ": TBB_USE_ASSERT\t0" 
ENDL


	)

78 #ñi‡
TBB_USE_ASSERT
==1

79 
	#__TBB_VERSION_USE_ASSERT
(
N
Ë#N ": TBB_USE_ASSERT\t1" 
ENDL


	)

80 #ñi‡
TBB_USE_ASSERT
==2

81 
	#__TBB_VERSION_USE_ASSERT
(
N
Ë#N ": TBB_USE_ASSERT\t2" 
ENDL


	)

83 #îr‹ 
U√x≥˘ed
 
vÆue
 
TBB_USE_ASSERT


87 #i‚de‡
__TBB_CPF_BUILD


88 
	#__TBB_VERSION_TBB_PREVIEW_BINARY
(
N
)

	)

90 
	#__TBB_VERSION_TBB_PREVIEW_BINARY
(
N
Ë#N ": TBB_PREVIEW_BINARY\t1" 
ENDL


	)

93 #ifde‡
RC_INVOKED


94 
	#__TBB_VERSION_DO_NOTIFY
(
N
)

	)

96 #i‚de‡
DO_ITT_NOTIFY


97 
	#__TBB_VERSION_DO_NOTIFY
(
N
Ë#N ": DO_ITT_NOTIFY\tundeföed" 
ENDL


	)

98 #ñi‡
DO_ITT_NOTIFY
==1

99 
	#__TBB_VERSION_DO_NOTIFY
(
N
Ë#N ": DO_ITT_NOTIFY\t1" 
ENDL


	)

100 #ñi‡
DO_ITT_NOTIFY
==0

101 
	#__TBB_VERSION_DO_NOTIFY
(
N
)

	)

103 #îr‹ 
U√x≥˘ed
 
vÆue
 
DO_ITT_NOTIFY


107 
	#TBB_VERSION_STRINGS_P
(
N
Ë
	`__TBB_VERSION_NUMBER
(NË
	`__TBB_INTERFACE_VERSION_NUMBER
(NË
	`__TBB_VERSION_DATETIME
(NË
	`__TBB_VERSION_STRINGS
(NË
	`__TBB_VERSION_USE_DEBUG
(NË
	`__TBB_VERSION_USE_ASSERT
(NË
	`__TBB_VERSION_TBB_PREVIEW_BINARY
(NË
	`__TBB_VERSION_DO_NOTIFY
(N)

	)

109 
	#TBB_VERSION_STRINGS
 
	`TBB_VERSION_STRINGS_P
(
TBB
)

	)

110 
	#TBBMALLOC_VERSION_STRINGS
 
	`TBB_VERSION_STRINGS_P
(
TBBmÆloc
)

	)

113 #i‚de‡
__TBB_VERSION_YMD


114 
	#__TBB_VERSION_YMD
 0, 0

	)

117 
	#TBB_VERNUMBERS
 
TBB_VERSION_MAJOR
, 
TBB_VERSION_MINOR
, 
__TBB_VERSION_YMD


	)

119 
	#TBB_VERSION
 
	`__TBB_STRING
(
TBB_VERNUMBERS
)

	)

	@viper/concurrentqueue-src/benchmarks/tbb/tbbmalloc_proxy.h

39 #i‚de‡
__TBB_tbbmÆloc_¥oxy_H


40 
	#__TBB_tbbmÆloc_¥oxy_H


	)

42 #i‡
_MSC_VER


44 #ifde‡
_DEBUG


45 #¥agm®
commít
(
lib
, "tbbmalloc_proxy_debug.lib")

47 #¥agm®
commít
(
lib
, "tbbmalloc_proxy.lib")

50 #i‡
deföed
(
_WIN64
)

51 #¥agm®
commít
(
lökî
, "/include:__TBB_malloc_proxy")

53 #¥agm®
commít
(
lökî
, "/include:___TBB_malloc_proxy")

59 "C" 
__TBB_mÆloc_¥oxy
();

60 
	s__TBB_mÆloc_¥oxy_ˇŒî
 {

61 
__TBB_mÆloc_¥oxy_ˇŒî
(Ë{ 
__TBB_mÆloc_¥oxy
(); }

62 } vﬁ©ûê
	g__TBB_mÆloc_¥oxy_hñ≥r_obje˘
;

	@viper/concurrentqueue-src/benchmarks/tbb/tick_count.h

21 #i‚de‡
__TBB_tick_cou¡_H


22 
	#__TBB_tick_cou¡_H


	)

24 
	~"tbb_°ddef.h
"

26 #i‡
_WIN32
||
_WIN64


27 
	~"machöe/wödows_≠i.h
"

28 #ñi‡
__löux__


29 
	~<˘ime
>

31 
	~<sys/time.h
>

34 
«me•a˚
 
	gtbb
 {

38 ˛as†
	ctick_cou¡
 {

39 
	gpublic
:

41 ˛as†
	cöãrvÆ_t
 {

42 
vÆue
;

43 
ex∂icô
 
öãrvÆ_t
–
vÆue_
 ) : 
vÆue
(value_) {}

44 
public
:

46 
öãrvÆ_t
(Ë: 
vÆue
(0) {};

49 
ex∂icô
 
öãrvÆ_t
–
£c
 );

52 
£c⁄ds
() const;

54 
‰õnd
 
˛ass
 
	gtbb
::
tick_cou¡
;

57 
‰õnd
 
öãrvÆ_t
 
	g›î©‹
-–c⁄° 
	gtick_cou¡
& 
	gt1
, c⁄°Åick_cou¡& 
	gt0
 );

60 
‰õnd
 
öãrvÆ_t
 
	g›î©‹
+–c⁄° 
	göãrvÆ_t
& 
	gi
, c⁄° i¡îvÆ_t& 
	gj
 ) {

61  
öãrvÆ_t
(
i
.
vÆue
+
j
.value);

65 
‰õnd
 
öãrvÆ_t
 
	g›î©‹
-–c⁄° 
	göãrvÆ_t
& 
	gi
, c⁄° i¡îvÆ_t& 
	gj
 ) {

66  
öãrvÆ_t
(
i
.
vÆue
-
j
.value);

70 
	göãrvÆ_t
& 
	g›î©‹
+=–c⁄° 
öãrvÆ_t
& 
i
 ) {
vÆue
 +i.vÆue;  *
	gthis
;}

73 
	göãrvÆ_t
& 
	g›î©‹
-=–c⁄° 
öãrvÆ_t
& 
i
 ) {
vÆue
 -i.vÆue;  *
	gthis
;}

74 
	g¥iv©e
:

75 
ticks_≥r_£c⁄d
(){

76 #i‡
_WIN32
||
_WIN64


77 
LARGE_INTEGER
 
qp‰eq
;

78 
	grvÆ
 = 
QuîyPîf‹m™˚Fªquícy
(&
qp‰eq
);

79 
__TBB_ASSERT_EX
(
rvÆ
, "QueryPerformanceFrequencyÑeturned zero");

80  
	g°©ic_ˇ°
<>(
	gqp‰eq
.
	gQuadP¨t
);

81 #ñi‡
__löux__


82  
	g°©ic_ˇ°
<>(1E9);

84  
	g°©ic_ˇ°
<>(1E6);

90 
tick_cou¡
(Ë: 
my_cou¡
(0) {};

93 
tick_cou¡
 
now
();

96 
‰õnd
 
öãrvÆ_t
 
	g›î©‹
-–c⁄° 
	gtick_cou¡
& 
	gt1
, c⁄°Åick_cou¡& 
	gt0
 );

99 
ªsﬁuti⁄
(Ë{  1.0 / 
	göãrvÆ_t
::
ticks_≥r_£c⁄d
(); }

101 
	g¥iv©e
:

102 
my_cou¡
;

105 
ölöe
 
tick_cou¡
 
	gtick_cou¡
::
	$now
() {

106 
tick_cou¡
 
ªsu…
;

107 #i‡
_WIN32
||
_WIN64


108 
LARGE_INTEGER
 
qp˙t
;

109 
rvÆ
 = 
	`QuîyPîf‹m™˚Cou¡î
(&
qp˙t
);

110 
	`__TBB_ASSERT_EX
(
rvÆ
, "QueryPerformanceCounter failed");

111 
ªsu…
.
my_cou¡
 = 
qp˙t
.
QuadP¨t
;

112 #ñi‡
__löux__


113 
time•ec
 
ts
;

114 
°©us
 = 
	`˛ock_gëtime
–
CLOCK_REALTIME
, &
ts
 );

115 
	`__TBB_ASSERT_EX
–
°©us
==0, "CLOCK_REALTIMEÇot supported" );

116 
ªsu…
.
my_cou¡
 = 
°©ic_ˇ°
<>(1000000000UL)*°©ic_ˇ°<>(
ts
.
tv_£c
Ë+ sètic_ˇ°<>—s.
tv_n£c
);

118 
timevÆ
 
tv
;

119 
°©us
 = 
	`gëtimeofday
(&
tv
, 
NULL
);

120 
	`__TBB_ASSERT_EX
–
°©us
==0, "gettimeofday failed" );

121 
ªsu…
.
my_cou¡
 = 
°©ic_ˇ°
<>(1000000)*°©ic_ˇ°<>(
tv
.
tv_£c
Ë+ sètic_ˇ°<>—v.
tv_u£c
);

123  
ªsu…
;

124 
	}
}

126 
ölöe
 
	gtick_cou¡
::
öãrvÆ_t
::
	$öãrvÆ_t
–
£c
 ) {

127 
vÆue
 = 
°©ic_ˇ°
<>(
£c
*
öãrvÆ_t
::
	`ticks_≥r_£c⁄d
());

128 
	}
}

130 
ölöe
 
	gtick_cou¡
::
öãrvÆ_t
 
›î©‹
-–c⁄° 
tick_cou¡
& 
t1
, c⁄°Åick_cou¡& 
	gt0
 ) {

131  
	gtick_cou¡
::
öãrvÆ_t
–
t1
.
my_cou¡
-
t0
.my_count );

134 
ölöe
 
	gtick_cou¡
::
öãrvÆ_t
::
	$£c⁄ds
() const {

135  
vÆue
*
tick_cou¡
::
	`ªsﬁuti⁄
();

136 
	}
}

	@viper/concurrentqueue-src/benchmarks/tbb/tls.h

21 #i‚de‡
_TBB_és_H


22 
	#_TBB_és_H


	)

24 #i‡
USE_PTHREAD


25 
	~<±hªad.h
>

27 
	~"tbb/machöe/wödows_≠i.h
"

30 
«me•a˚
 
	gtbb
 {

32 
«me•a˚
 
	göã∫Æ
 {

34 (*
	gés_dt‹_t
)(*);

37 
	gãm∂©e
 <
ty≥«me
 
	gT
>

38 ˛as†
	cbasic_és
 {

39 #i‡
USE_PTHREAD


40 
±hªad_key_t
 
	tés_key_t
;

41 
	gpublic
:

42 
¸óã
–
és_dt‹_t
 
dt‹
 = 
NULL
 ) {

43  
±hªad_key_¸óã
(&
my_key
, 
dt‹
);

45 
de°roy
(Ë{  
±hªad_key_dñëe
(
my_key
); }

46 
£t
–
T
 
vÆue
 ) { 
±hªad_£t•ecific
(
my_key
, (*)value); }

47 
T
 
gë
(Ë{  (
	gT
)
±hªad_gë•ecific
(
my_key
); }

49 
DWORD
 
	tés_key_t
;

50 
	gpublic
:

51 #i‡!
__TBB_WIN8UI_SUPPORT


52 
¸óã
() {

53 
és_key_t
 
tmp
 = 
TlsAŒoc
();

54 if–
	gtmp
==
TLS_OUT_OF_INDEXES
 )

55  
TLS_OUT_OF_INDEXES
;

56 
	gmy_key
 = 
tmp
;

59 
de°roy
(Ë{ 
TlsFªe
(
my_key
); 
	gmy_key
=0;  0; }

60 
£t
–
T
 
vÆue
 ) { 
TlsSëVÆue
(
my_key
, (
LPVOID
)value); }

61 
T
 
gë
(Ë{  (
	gT
)
TlsGëVÆue
(
my_key
); }

63 
¸óã
() {

64 
és_key_t
 
	gtmp
 = 
FlsAŒoc
(
NULL
);

65 if–
	gtmp
=(
DWORD
)0xFFFFFFFF )

66  (
DWORD
)0xFFFFFFFF;

67 
	gmy_key
 = 
tmp
;

70 
de°roy
(Ë{ 
FlsFªe
(
my_key
); 
	gmy_key
=0;  0; }

71 
£t
–
T
 
vÆue
 ) { 
FlsSëVÆue
(
my_key
, (
LPVOID
)value); }

72 
T
 
gë
(Ë{  (
	gT
)
FlsGëVÆue
(
my_key
); }

75 
	g¥iv©e
:

76 
és_key_t
 
my_key
;

81 
	gãm∂©e
 <
ty≥«me
 
	gT
>

82 
˛ass
 
	gés
 : 
public
 
basic_és
<
T
> {

83 
basic_és
<
	tT
> 
	tba£
;

84 
	gpublic
:

85 
és
(Ë{ 
ba£
::
¸óã
(); }

86 ~
és
(Ë{ 
	gba£
::
de°roy
(); }

87 
T
 
	g›î©‹
=(T 
vÆue
Ë{ 
ba£
::
£t
(vÆue);  
	gvÆue
; }

88 
›î©‹
 
T
(Ë{  
	gba£
::
gë
(); }

91 
	gãm∂©e
 <
ty≥«me
 
	gT
>

92 
˛ass
 
	gés
<
	gT
*> : 
basic_és
<
T
*> {

93 
basic_és
<
	tT
*> 
	tba£
;

94 
öã∫Æ_dt‹
(* 
±r
) {

95 i‡(
	g±r
Ë
dñëe
 (
T
*)ptr;

97 
T
* 
öã∫Æ_gë
() {

98 
T
* 
	gªsu…
 = 
ba£
::
gë
();

99 i‡(!
	gªsu…
) {

100 
	gªsu…
 = 
√w
 
T
;

101 
	gba£
::
£t
(
ªsu…
);

103  
	gªsu…
;

105 
	gpublic
:

106 
és
() {

107 #i‡
USE_PTHREAD


108 
ba£
::
¸óã
–
öã∫Æ_dt‹
 );

110 
	gba£
::
¸óã
();

113 ~
és
(Ë{ 
	gba£
::
de°roy
(); }

114 
T
* 
	g›î©‹
=(T* 
vÆue
Ë{ 
ba£
::
£t
(vÆue);  
	gvÆue
; }

115 
›î©‹
 
	gT
*(Ë{  
öã∫Æ_gë
(); }

116 
T
* 
	g›î©‹
->(Ë{  
öã∫Æ_gë
(); }

117 
	gT
& 
	g›î©‹
*(Ë{  *
öã∫Æ_gë
(); }

	@viper/concurrentqueue-src/benchmarks/tbb/tools_api/disable_warnings.h

21 
	~"ôäŸify_c⁄fig.h
"

23 #i‡
ITT_PLATFORM
==
ITT_PLATFORM_WIN


25 #¥agm®
w¨nög
 (
dißbÀ
: 593)

26 #¥agm®
w¨nög
 (
dißbÀ
: 344)

27 #¥agm®
w¨nög
 (
dißbÀ
: 174)

28 #¥agm®
w¨nög
 (
dißbÀ
: 4127)

29 #¥agm®
w¨nög
 (
dißbÀ
: 4306)

33 #i‡
deföed
 
__INTEL_COMPILER


35 #¥agm®
w¨nög
 (
dißbÀ
: 869)

36 #¥agm®
w¨nög
 (
dißbÀ
: 1418)

37 #¥agm®
w¨nög
 (
dißbÀ
: 1419)

	@viper/concurrentqueue-src/benchmarks/tbb/tools_api/internal/ittnotify.h

21 #i‚de‡
_INTERNAL_ITTNOTIFY_H_


22 
	#_INTERNAL_ITTNOTIFY_H_


	)

30 #i‚de‡
ITT_OS_WIN


31 
	#ITT_OS_WIN
 1

	)

34 #i‚de‡
ITT_OS_LINUX


35 
	#ITT_OS_LINUX
 2

	)

38 #i‚de‡
ITT_OS_MAC


39 
	#ITT_OS_MAC
 3

	)

42 #i‚de‡
ITT_OS


43 #i‡
deföed
 
WIN32
 || deföed 
_WIN32


44 
	#ITT_OS
 
ITT_OS_WIN


	)

45 #ñi‡
deföed
–
__APPLE__
 ) && deföed–
__MACH__
 )

46 
	#ITT_OS
 
ITT_OS_MAC


	)

48 
	#ITT_OS
 
ITT_OS_LINUX


	)

52 #i‚de‡
ITT_PLATFORM_WIN


53 
	#ITT_PLATFORM_WIN
 1

	)

56 #i‚de‡
ITT_PLATFORM_POSIX


57 
	#ITT_PLATFORM_POSIX
 2

	)

60 #i‚de‡
ITT_PLATFORM_MAC


61 
	#ITT_PLATFORM_MAC
 3

	)

64 #i‚de‡
ITT_PLATFORM


65 #i‡
ITT_OS
==
ITT_OS_WIN


66 
	#ITT_PLATFORM
 
ITT_PLATFORM_WIN


	)

67 #ñi‡
ITT_OS
==
ITT_OS_MAC


68 
	#ITT_PLATFORM
 
ITT_PLATFORM_MAC


	)

70 
	#ITT_PLATFORM
 
ITT_PLATFORM_POSIX


	)

74 #i‡
deföed
(
_UNICODE
Ë&& !deföed(
UNICODE
)

75 
	#UNICODE


	)

78 
	~<°ddef.h
>

79 #i‡
ITT_PLATFORM
==
ITT_PLATFORM_WIN


80 
	~<tch¨.h
>

82 
	~<°döt.h
>

83 #i‡
deföed
(
UNICODE
Ë|| deföed(
_UNICODE
)

84 
	~<wch¨.h
>

88 #i‚de‡
CDECL


89 #i‡
ITT_PLATFORM
==
ITT_PLATFORM_WIN


90 
	#CDECL
 
__cde˛


	)

92 #i‡
deföed
 
_M_IX86
 || deföed 
__i386__


93 
	#CDECL
 
	`__©åibuã__
 ((
cde˛
))

	)

95 
	#CDECL


	)

100 #i‚de‡
STDCALL


101 #i‡
ITT_PLATFORM
==
ITT_PLATFORM_WIN


102 
	#STDCALL
 
__°dˇŒ


	)

104 #i‡
deföed
 
_M_IX86
 || deföed 
__i386__


105 
	#STDCALL
 
	`__©åibuã__
 ((
°dˇŒ
))

	)

107 
	#STDCALL


	)

112 
	#ITTAPI
 
CDECL


	)

113 
	#LIBITTAPI
 
CDECL


	)

116 
	#ITTAPI_CALL
 
CDECL


	)

117 
	#LIBITTAPI_CALL
 
CDECL


	)

119 #i‡
ITT_PLATFORM
==
ITT_PLATFORM_WIN


121 
	#ITT_INLINE
 
__f‹˚ölöe


	)

122 
	#ITT_INLINE_ATTRIBUTE


	)

129 #ifde‡
__STRICT_ANSI__


130 
	#ITT_INLINE
 

	)

132 
	#ITT_INLINE
 
ölöe


	)

134 
	#ITT_INLINE_ATTRIBUTE
 
	`__©åibuã__
 ((
Æways_ölöe
, 
unu£d
))

	)

140 
	#ITT_JOIN_AUX
(
p
,
n
Ëp##
	)
n

141 
	#ITT_JOIN
(
p
,
n
Ë
	`ITT_JOIN_AUX
’,n)

	)

143 #ifde‡
ITT_MAJOR


144 #unde‡
ITT_MAJOR


146 #ifde‡
ITT_MINOR


147 #unde‡
ITT_MINOR


149 
	#ITT_MAJOR
 3

	)

150 
	#ITT_MINOR
 0

	)

153 
	#ITT_VERSIONIZE
(
x
) \

154 
	`ITT_JOIN
(
x
, \

155 
	`ITT_JOIN
(
_
, \

156 
	`ITT_JOIN
(
ITT_MAJOR
, \

157 
	`ITT_JOIN
(
_
, 
ITT_MINOR
))))

	)

159 #i‚de‡
INTEL_ITTNOTIFY_PREFIX


160 
	#INTEL_ITTNOTIFY_PREFIX
 
__ôt_


	)

162 #i‚de‡
INTEL_ITTNOTIFY_POSTFIX


163 
	#INTEL_ITTNOTIFY_POSTFIX
 
_±r_


	)

166 
	#ITTNOTIFY_NAME_AUX
(
n
Ë
	`ITT_JOIN
(
INTEL_ITTNOTIFY_PREFIX
,n)

	)

167 
	#ITTNOTIFY_NAME
(
n
Ë
	`ITT_VERSIONIZE
(
	`ITTNOTIFY_NAME_AUX
(
	`ITT_JOIN
“,
INTEL_ITTNOTIFY_POSTFIX
)))

	)

169 
	#ITTNOTIFY_VOID
(
n
Ë(!
	`ITTNOTIFY_NAME
“)Ë? ()0 : ITTNOTIFY_NAME“)

	)

170 
	#ITTNOTIFY_DATA
(
n
Ë(!
	`ITTNOTIFY_NAME
“)Ë? 0 : ITTNOTIFY_NAME“)

	)

172 
	#ITTNOTIFY_VOID_D0
(
n
,
d
Ë(!(d)->
Êags
Ë? ()0 : (!
	`ITTNOTIFY_NAME
“)Ë? ()0 : ITTNOTIFY_NAME“)(d)

	)

173 
	#ITTNOTIFY_VOID_D1
(
n
,
d
,
x
Ë(!(d)->
Êags
Ë? ()0 : (!
	`ITTNOTIFY_NAME
“)Ë? ()0 : ITTNOTIFY_NAME“)(d,x)

	)

174 
	#ITTNOTIFY_VOID_D2
(
n
,
d
,
x
,
y
Ë(!(d)->
Êags
Ë? ()0 : (!
	`ITTNOTIFY_NAME
“)Ë? ()0 : ITTNOTIFY_NAME“)(d,x,y)

	)

175 
	#ITTNOTIFY_VOID_D3
(
n
,
d
,
x
,
y
,
z
Ë(!(d)->
Êags
Ë? ()0 : (!
	`ITTNOTIFY_NAME
“)Ë? ()0 : ITTNOTIFY_NAME“)(d,x,y,z)

	)

176 
	#ITTNOTIFY_VOID_D4
(
n
,
d
,
x
,
y
,
z
,
a
Ë(!(d)->
Êags
Ë? ()0 : (!
	`ITTNOTIFY_NAME
“)Ë? ()0 : ITTNOTIFY_NAME“)(d,x,y,z,a)

	)

177 
	#ITTNOTIFY_VOID_D5
(
n
,
d
,
x
,
y
,
z
,
a
,
b
Ë(!(d)->
Êags
Ë? ()0 : (!
	`ITTNOTIFY_NAME
“)Ë? ()0 : ITTNOTIFY_NAME“)(d,x,y,z,a,b)

	)

178 
	#ITTNOTIFY_VOID_D6
(
n
,
d
,
x
,
y
,
z
,
a
,
b
,
c
Ë(!(d)->
Êags
Ë? ()0 : (!
	`ITTNOTIFY_NAME
“)Ë? ()0 : ITTNOTIFY_NAME“)(d,x,y,z,a,b,c)

	)

179 
	#ITTNOTIFY_DATA_D0
(
n
,
d
Ë(!(d)->
Êags
Ë? 0 : (!
	`ITTNOTIFY_NAME
“)Ë? 0 : ITTNOTIFY_NAME“)(d)

	)

180 
	#ITTNOTIFY_DATA_D1
(
n
,
d
,
x
Ë(!(d)->
Êags
Ë? 0 : (!
	`ITTNOTIFY_NAME
“)Ë? 0 : ITTNOTIFY_NAME“)(d,x)

	)

181 
	#ITTNOTIFY_DATA_D2
(
n
,
d
,
x
,
y
Ë(!(d)->
Êags
Ë? 0 : (!
	`ITTNOTIFY_NAME
“)Ë? 0 : ITTNOTIFY_NAME“)(d,x,y)

	)

182 
	#ITTNOTIFY_DATA_D3
(
n
,
d
,
x
,
y
,
z
Ë(!(d)->
Êags
Ë? 0 : (!
	`ITTNOTIFY_NAME
“)Ë? 0 : ITTNOTIFY_NAME“)(d,x,y,z)

	)

183 
	#ITTNOTIFY_DATA_D4
(
n
,
d
,
x
,
y
,
z
,
a
Ë(!(d)->
Êags
Ë? 0 : (!
	`ITTNOTIFY_NAME
“)Ë? 0 : ITTNOTIFY_NAME“)(d,x,y,z,a)

	)

184 
	#ITTNOTIFY_DATA_D5
(
n
,
d
,
x
,
y
,
z
,
a
,
b
Ë(!(d)->
Êags
Ë? 0 : (!
	`ITTNOTIFY_NAME
“)Ë? 0 : ITTNOTIFY_NAME“)(d,x,y,z,a,b)

	)

185 
	#ITTNOTIFY_DATA_D6
(
n
,
d
,
x
,
y
,
z
,
a
,
b
,
c
Ë(!(d)->
Êags
Ë? 0 : (!
	`ITTNOTIFY_NAME
“)Ë? 0 : ITTNOTIFY_NAME“)(d,x,y,z,a,b,c)

	)

187 #ifde‡
ITT_STUB


188 #unde‡
ITT_STUB


190 #ifde‡
ITT_STUBV


191 #unde‡
ITT_STUBV


193 
	#ITT_STUBV
(
≠i
,
ty≥
,
«me
,
¨gs
) \

194 
	`ty≥
 (
	t≠i
* 
	tITT_JOIN
(
	tITTNOTIFY_NAME
(
	t«me
),
	t_t
)Ë
	t¨gs
; \

195 
	`ITT_JOIN
(
	`ITTNOTIFY_NAME
(
«me
),
_t
ËITTNOTIFY_NAME“ame);

	)

196 
	#ITT_STUB
 
ITT_STUBV


	)

199 #ifde‡
__˝lu•lus


203 
	#INTEL_ITTNOTIFY_API_PRIVATE


	)

204 
	~"../ôäŸify.h
"

206 #ifde‡
__˝lu•lus


	@viper/concurrentqueue-src/benchmarks/tbb/tools_api/ittnotify.h

21 #i‚de‡
_ITTNOTIFY_H_


22 
	#_ITTNOTIFY_H_


	)

92 #i‚de‡
ITT_OS_WIN


93 
	#ITT_OS_WIN
 1

	)

96 #i‚de‡
ITT_OS_LINUX


97 
	#ITT_OS_LINUX
 2

	)

100 #i‚de‡
ITT_OS_MAC


101 
	#ITT_OS_MAC
 3

	)

104 #i‚de‡
ITT_OS


105 #i‡
deföed
 
WIN32
 || deföed 
_WIN32


106 
	#ITT_OS
 
ITT_OS_WIN


	)

107 #ñi‡
deföed
–
__APPLE__
 ) && deföed–
__MACH__
 )

108 
	#ITT_OS
 
ITT_OS_MAC


	)

110 
	#ITT_OS
 
ITT_OS_LINUX


	)

114 #i‚de‡
ITT_PLATFORM_WIN


115 
	#ITT_PLATFORM_WIN
 1

	)

118 #i‚de‡
ITT_PLATFORM_POSIX


119 
	#ITT_PLATFORM_POSIX
 2

	)

122 #i‚de‡
ITT_PLATFORM_MAC


123 
	#ITT_PLATFORM_MAC
 3

	)

126 #i‚de‡
ITT_PLATFORM


127 #i‡
ITT_OS
==
ITT_OS_WIN


128 
	#ITT_PLATFORM
 
ITT_PLATFORM_WIN


	)

129 #ñi‡
ITT_OS
==
ITT_OS_MAC


130 
	#ITT_PLATFORM
 
ITT_PLATFORM_MAC


	)

132 
	#ITT_PLATFORM
 
ITT_PLATFORM_POSIX


	)

136 #i‡
deföed
(
_UNICODE
Ë&& !deföed(
UNICODE
)

137 
	#UNICODE


	)

140 
	~<°ddef.h
>

141 #i‡
ITT_PLATFORM
==
ITT_PLATFORM_WIN


142 
	~<tch¨.h
>

144 
	~<°döt.h
>

145 #i‡
deföed
(
UNICODE
Ë|| deföed(
_UNICODE
)

146 
	~<wch¨.h
>

150 #i‚de‡
CDECL


151 #i‡
ITT_PLATFORM
==
ITT_PLATFORM_WIN


152 
	#CDECL
 
__cde˛


	)

154 #i‡
deföed
 
_M_IX86
 || deföed 
__i386__


155 
	#CDECL
 
	`__©åibuã__
 ((
cde˛
))

	)

157 
	#CDECL


	)

162 #i‚de‡
STDCALL


163 #i‡
ITT_PLATFORM
==
ITT_PLATFORM_WIN


164 
	#STDCALL
 
__°dˇŒ


	)

166 #i‡
deföed
 
_M_IX86
 || deföed 
__i386__


167 
	#STDCALL
 
	`__©åibuã__
 ((
°dˇŒ
))

	)

169 
	#STDCALL


	)

174 
	#ITTAPI
 
CDECL


	)

175 
	#LIBITTAPI
 
CDECL


	)

178 
	#ITTAPI_CALL
 
CDECL


	)

179 
	#LIBITTAPI_CALL
 
CDECL


	)

181 #i‡
ITT_PLATFORM
==
ITT_PLATFORM_WIN


183 
	#ITT_INLINE
 
__f‹˚ölöe


	)

184 
	#ITT_INLINE_ATTRIBUTE


	)

191 #ifde‡
__STRICT_ANSI__


192 
	#ITT_INLINE
 
ölöe


	)

194 
	#ITT_INLINE
 
ölöe


	)

196 
	#ITT_INLINE_ATTRIBUTE
 
	`__©åibuã__
 ((
Æways_ölöe
, 
unu£d
))

	)

200 #ifde‡
INTEL_ITTNOTIFY_ENABLE_LEGACY


201 #i‡
ITT_PLATFORM
==
ITT_PLATFORM_WIN


202 #¥agm®
mesßge
("WARNING!!! Deprecated API is used. Please undefine INTEL_ITTNOTIFY_ENABLE_LEGACY macro")

207 
	~"Àgacy/ôäŸify.h
"

212 
	#ITT_JOIN_AUX
(
p
,
n
Ëp##
	)
n

213 
	#ITT_JOIN
(
p
,
n
Ë
	`ITT_JOIN_AUX
’,n)

	)

215 #ifde‡
ITT_MAJOR


216 #unde‡
ITT_MAJOR


218 #ifde‡
ITT_MINOR


219 #unde‡
ITT_MINOR


221 
	#ITT_MAJOR
 3

	)

222 
	#ITT_MINOR
 0

	)

225 
	#ITT_VERSIONIZE
(
x
) \

226 
	`ITT_JOIN
(
x
, \

227 
	`ITT_JOIN
(
_
, \

228 
	`ITT_JOIN
(
ITT_MAJOR
, \

229 
	`ITT_JOIN
(
_
, 
ITT_MINOR
))))

	)

231 #i‚de‡
INTEL_ITTNOTIFY_PREFIX


232 
	#INTEL_ITTNOTIFY_PREFIX
 
__ôt_


	)

234 #i‚de‡
INTEL_ITTNOTIFY_POSTFIX


235 
	#INTEL_ITTNOTIFY_POSTFIX
 
_±r_


	)

238 
	#ITTNOTIFY_NAME_AUX
(
n
Ë
	`ITT_JOIN
(
INTEL_ITTNOTIFY_PREFIX
,n)

	)

239 
	#ITTNOTIFY_NAME
(
n
Ë
	`ITT_VERSIONIZE
(
	`ITTNOTIFY_NAME_AUX
(
	`ITT_JOIN
“,
INTEL_ITTNOTIFY_POSTFIX
)))

	)

241 
	#ITTNOTIFY_VOID
(
n
Ë(!
	`ITTNOTIFY_NAME
“)Ë? ()0 : ITTNOTIFY_NAME“)

	)

242 
	#ITTNOTIFY_DATA
(
n
Ë(!
	`ITTNOTIFY_NAME
“)Ë? 0 : ITTNOTIFY_NAME“)

	)

244 
	#ITTNOTIFY_VOID_D0
(
n
,
d
Ë(!(d)->
Êags
Ë? ()0 : (!
	`ITTNOTIFY_NAME
“)Ë? ()0 : ITTNOTIFY_NAME“)(d)

	)

245 
	#ITTNOTIFY_VOID_D1
(
n
,
d
,
x
Ë(!(d)->
Êags
Ë? ()0 : (!
	`ITTNOTIFY_NAME
“)Ë? ()0 : ITTNOTIFY_NAME“)(d,x)

	)

246 
	#ITTNOTIFY_VOID_D2
(
n
,
d
,
x
,
y
Ë(!(d)->
Êags
Ë? ()0 : (!
	`ITTNOTIFY_NAME
“)Ë? ()0 : ITTNOTIFY_NAME“)(d,x,y)

	)

247 
	#ITTNOTIFY_VOID_D3
(
n
,
d
,
x
,
y
,
z
Ë(!(d)->
Êags
Ë? ()0 : (!
	`ITTNOTIFY_NAME
“)Ë? ()0 : ITTNOTIFY_NAME“)(d,x,y,z)

	)

248 
	#ITTNOTIFY_VOID_D4
(
n
,
d
,
x
,
y
,
z
,
a
Ë(!(d)->
Êags
Ë? ()0 : (!
	`ITTNOTIFY_NAME
“)Ë? ()0 : ITTNOTIFY_NAME“)(d,x,y,z,a)

	)

249 
	#ITTNOTIFY_VOID_D5
(
n
,
d
,
x
,
y
,
z
,
a
,
b
Ë(!(d)->
Êags
Ë? ()0 : (!
	`ITTNOTIFY_NAME
“)Ë? ()0 : ITTNOTIFY_NAME“)(d,x,y,z,a,b)

	)

250 
	#ITTNOTIFY_VOID_D6
(
n
,
d
,
x
,
y
,
z
,
a
,
b
,
c
Ë(!(d)->
Êags
Ë? ()0 : (!
	`ITTNOTIFY_NAME
“)Ë? ()0 : ITTNOTIFY_NAME“)(d,x,y,z,a,b,c)

	)

251 
	#ITTNOTIFY_DATA_D0
(
n
,
d
Ë(!(d)->
Êags
Ë? 0 : (!
	`ITTNOTIFY_NAME
“)Ë? 0 : ITTNOTIFY_NAME“)(d)

	)

252 
	#ITTNOTIFY_DATA_D1
(
n
,
d
,
x
Ë(!(d)->
Êags
Ë? 0 : (!
	`ITTNOTIFY_NAME
“)Ë? 0 : ITTNOTIFY_NAME“)(d,x)

	)

253 
	#ITTNOTIFY_DATA_D2
(
n
,
d
,
x
,
y
Ë(!(d)->
Êags
Ë? 0 : (!
	`ITTNOTIFY_NAME
“)Ë? 0 : ITTNOTIFY_NAME“)(d,x,y)

	)

254 
	#ITTNOTIFY_DATA_D3
(
n
,
d
,
x
,
y
,
z
Ë(!(d)->
Êags
Ë? 0 : (!
	`ITTNOTIFY_NAME
“)Ë? 0 : ITTNOTIFY_NAME“)(d,x,y,z)

	)

255 
	#ITTNOTIFY_DATA_D4
(
n
,
d
,
x
,
y
,
z
,
a
Ë(!(d)->
Êags
Ë? 0 : (!
	`ITTNOTIFY_NAME
“)Ë? 0 : ITTNOTIFY_NAME“)(d,x,y,z,a)

	)

256 
	#ITTNOTIFY_DATA_D5
(
n
,
d
,
x
,
y
,
z
,
a
,
b
Ë(!(d)->
Êags
Ë? 0 : (!
	`ITTNOTIFY_NAME
“)Ë? 0 : ITTNOTIFY_NAME“)(d,x,y,z,a,b)

	)

257 
	#ITTNOTIFY_DATA_D6
(
n
,
d
,
x
,
y
,
z
,
a
,
b
,
c
Ë(!(d)->
Êags
Ë? 0 : (!
	`ITTNOTIFY_NAME
“)Ë? 0 : ITTNOTIFY_NAME“)(d,x,y,z,a,b,c)

	)

259 #ifde‡
ITT_STUB


260 #unde‡
ITT_STUB


262 #ifde‡
ITT_STUBV


263 #unde‡
ITT_STUBV


265 
	#ITT_STUBV
(
≠i
,
ty≥
,
«me
,
¨gs
) \

266 
	`ty≥
 (
	t≠i
* 
	tITT_JOIN
(
	tITTNOTIFY_NAME
(
	t«me
),
	t_t
)Ë
	t¨gs
; \

267 
	`ITT_JOIN
(
	`ITTNOTIFY_NAME
(
«me
),
_t
ËITTNOTIFY_NAME“ame);

	)

268 
	#ITT_STUB
 
ITT_STUBV


	)

271 #ifde‡
__˝lu•lus


304 
ITTAPI
 
__ôt_∑u£
();

306 
ITTAPI
 
__ôt_ªsume
();

309 #i‚de‡
INTEL_NO_MACRO_BODY


310 #i‚de‡
INTEL_NO_ITTNOTIFY_API


311 
ITT_STUBV
(
ITTAPI
, , 
∑u£
, ())

312 
ITT_STUBV
(
ITTAPI
, , 
ªsume
, ())

313 
	#__ôt_∑u£
 
	`ITTNOTIFY_VOID
(
∑u£
)

	)

314 
	#__ôt_∑u£_±r
 
	`ITTNOTIFY_NAME
(
∑u£
)

	)

315 
	#__ôt_ªsume
 
	`ITTNOTIFY_VOID
(
ªsume
)

	)

316 
	#__ôt_ªsume_±r
 
	`ITTNOTIFY_NAME
(
ªsume
)

	)

318 
	#__ôt_∑u£
()

	)

319 
	#__ôt_∑u£_±r
 0

	)

320 
	#__ôt_ªsume
()

	)

321 
	#__ôt_ªsume_±r
 0

	)

324 
	#__ôt_∑u£_±r
 0

	)

325 
	#__ôt_ªsume_±r
 0

	)

341 #i‡
ITT_PLATFORM
==
ITT_PLATFORM_WIN


342 
ITTAPI
 
__ôt_thªad_£t_«meA
(c⁄° *
«me
);

343 
ITTAPI
 
__ôt_thªad_£t_«meW
(c⁄° 
wch¨_t
 *
«me
);

344 #i‡
deföed
(
UNICODE
Ë|| deföed(
_UNICODE
)

345 
	#__ôt_thªad_£t_«me
 
__ôt_thªad_£t_«meW


	)

346 
	#__ôt_thªad_£t_«me_±r
 
__ôt_thªad_£t_«meW_±r


	)

348 
	#__ôt_thªad_£t_«me
 
__ôt_thªad_£t_«meA


	)

349 
	#__ôt_thªad_£t_«me_±r
 
__ôt_thªad_£t_«meA_±r


	)

352 
ITTAPI
 
__ôt_thªad_£t_«me
(c⁄° *
«me
);

356 #i‚de‡
INTEL_NO_MACRO_BODY


357 #i‚de‡
INTEL_NO_ITTNOTIFY_API


358 #i‡
ITT_PLATFORM
==
ITT_PLATFORM_WIN


359 
ITT_STUBV
(
ITTAPI
, , 
thªad_£t_«meA
, (c⁄° *
«me
))

360 
ITT_STUBV
(
ITTAPI
, , 
thªad_£t_«meW
, (c⁄° 
wch¨_t
 *
«me
))

362 
ITT_STUBV
(
ITTAPI
, , 
thªad_£t_«me
, (c⁄° *
«me
))

364 #i‡
ITT_PLATFORM
==
ITT_PLATFORM_WIN


365 
	#__ôt_thªad_£t_«meA
 
	`ITTNOTIFY_VOID
(
thªad_£t_«meA
)

	)

366 
	#__ôt_thªad_£t_«meA_±r
 
	`ITTNOTIFY_NAME
(
thªad_£t_«meA
)

	)

367 
	#__ôt_thªad_£t_«meW
 
	`ITTNOTIFY_VOID
(
thªad_£t_«meW
)

	)

368 
	#__ôt_thªad_£t_«meW_±r
 
	`ITTNOTIFY_NAME
(
thªad_£t_«meW
)

	)

370 
	#__ôt_thªad_£t_«me
 
	`ITTNOTIFY_VOID
(
thªad_£t_«me
)

	)

371 
	#__ôt_thªad_£t_«me_±r
 
	`ITTNOTIFY_NAME
(
thªad_£t_«me
)

	)

374 #i‡
ITT_PLATFORM
==
ITT_PLATFORM_WIN


375 
	#__ôt_thªad_£t_«meA
(
«me
)

	)

376 
	#__ôt_thªad_£t_«meA_±r
 0

	)

377 
	#__ôt_thªad_£t_«meW
(
«me
)

	)

378 
	#__ôt_thªad_£t_«meW_±r
 0

	)

380 
	#__ôt_thªad_£t_«me
(
«me
)

	)

381 
	#__ôt_thªad_£t_«me_±r
 0

	)

385 #i‡
ITT_PLATFORM
==
ITT_PLATFORM_WIN


386 
	#__ôt_thªad_£t_«meA_±r
 0

	)

387 
	#__ôt_thªad_£t_«meW_±r
 0

	)

389 
	#__ôt_thªad_£t_«me_±r
 0

	)

399 
ITTAPI
 
__ôt_thªad_ign‹e
();

402 #i‚de‡
INTEL_NO_MACRO_BODY


403 #i‚de‡
INTEL_NO_ITTNOTIFY_API


404 
ITT_STUBV
(
ITTAPI
, , 
thªad_ign‹e
, ())

405 
	#__ôt_thªad_ign‹e
 
	`ITTNOTIFY_VOID
(
thªad_ign‹e
)

	)

406 
	#__ôt_thªad_ign‹e_±r
 
	`ITTNOTIFY_NAME
(
thªad_ign‹e
)

	)

408 
	#__ôt_thªad_ign‹e
()

	)

409 
	#__ôt_thªad_ign‹e_±r
 0

	)

412 
	#__ôt_thªad_ign‹e_±r
 0

	)

433 
	#__ôt_suµªss_Æl_îr‹s
 0x7fffffff

	)

439 
	#__ôt_suµªss_thªadög_îr‹s
 0x000000ff

	)

445 
	#__ôt_suµªss_mem‹y_îr‹s
 0x0000ff00

	)

450 
ITTAPI
 
__ôt_suµªss_push
(
mask
);

453 #i‚de‡
INTEL_NO_MACRO_BODY


454 #i‚de‡
INTEL_NO_ITTNOTIFY_API


455 
ITT_STUBV
(
ITTAPI
, , 
suµªss_push
, (
mask
))

456 
	#__ôt_suµªss_push
 
	`ITTNOTIFY_VOID
(
suµªss_push
)

	)

457 
	#__ôt_suµªss_push_±r
 
	`ITTNOTIFY_NAME
(
suµªss_push
)

	)

459 
	#__ôt_suµªss_push
(
mask
)

	)

460 
	#__ôt_suµªss_push_±r
 0

	)

463 
	#__ôt_suµªss_push_±r
 0

	)

470 
ITTAPI
 
__ôt_suµªss_p›
();

473 #i‚de‡
INTEL_NO_MACRO_BODY


474 #i‚de‡
INTEL_NO_ITTNOTIFY_API


475 
ITT_STUBV
(
ITTAPI
, , 
suµªss_p›
, ())

476 
	#__ôt_suµªss_p›
 
	`ITTNOTIFY_VOID
(
suµªss_p›
)

	)

477 
	#__ôt_suµªss_p›_±r
 
	`ITTNOTIFY_NAME
(
suµªss_p›
)

	)

479 
	#__ôt_suµªss_p›
()

	)

480 
	#__ôt_suµªss_p›_±r
 0

	)

483 
	#__ôt_suµªss_p›_±r
 0

	)

491 
	e__ôt_suµªss_mode
 {

492 
__ôt_unsuµªss_ønge
,

493 
__ôt_suµªss_ønge


494 } 
	t__ôt_suµªss_mode_t
;

499 
ITTAPI
 
__ôt_suµªss_m¨k_ønge
(
__ôt_suµªss_mode_t
 
mode
, 
mask
, * 
addªss
, 
size_t
 
size
);

502 #i‚de‡
INTEL_NO_MACRO_BODY


503 #i‚de‡
INTEL_NO_ITTNOTIFY_API


504 
ITT_STUBV
(
ITTAPI
, , 
suµªss_m¨k_ønge
, (
__ôt_suµªss_mode_t
 
mode
, 
mask
, * 
addªss
, 
size_t
 
size
))

505 
	#__ôt_suµªss_m¨k_ønge
 
	`ITTNOTIFY_VOID
(
suµªss_m¨k_ønge
)

	)

506 
	#__ôt_suµªss_m¨k_ønge_±r
 
	`ITTNOTIFY_NAME
(
suµªss_m¨k_ønge
)

	)

508 
	#__ôt_suµªss_m¨k_ønge
(
mask
)

	)

509 
	#__ôt_suµªss_m¨k_ønge_±r
 0

	)

512 
	#__ôt_suµªss_m¨k_ønge_±r
 0

	)

520 
ITTAPI
 
__ôt_suµªss_˛ór_ønge
(
__ôt_suµªss_mode_t
 
mode
, 
mask
, * 
addªss
, 
size_t
 
size
);

523 #i‚de‡
INTEL_NO_MACRO_BODY


524 #i‚de‡
INTEL_NO_ITTNOTIFY_API


525 
ITT_STUBV
(
ITTAPI
, , 
suµªss_˛ór_ønge
, (
__ôt_suµªss_mode_t
 
mode
, 
mask
, * 
addªss
, 
size_t
 
size
))

526 
	#__ôt_suµªss_˛ór_ønge
 
	`ITTNOTIFY_VOID
(
suµªss_˛ór_ønge
)

	)

527 
	#__ôt_suµªss_˛ór_ønge_±r
 
	`ITTNOTIFY_NAME
(
suµªss_˛ór_ønge
)

	)

529 
	#__ôt_suµªss_˛ór_ønge
(
mask
)

	)

530 
	#__ôt_suµªss_˛ór_ønge_±r
 0

	)

533 
	#__ôt_suµªss_˛ór_ønge_±r
 0

	)

549 
	#__ôt_©å_b¨rõr
 1

	)

555 
	#__ôt_©å_muãx
 2

	)

568 #i‡
ITT_PLATFORM
==
ITT_PLATFORM_WIN


569 
ITTAPI
 
__ôt_sync_¸óãA
(*
addr
, c⁄° *
objty≥
, c⁄° *
obj«me
, 
©åibuã
);

570 
ITTAPI
 
__ôt_sync_¸óãW
(*
addr
, c⁄° 
wch¨_t
 *
objty≥
, c⁄° wch¨_à*
obj«me
, 
©åibuã
);

571 #i‡
deföed
(
UNICODE
Ë|| deföed(
_UNICODE
)

572 
	#__ôt_sync_¸óã
 
__ôt_sync_¸óãW


	)

573 
	#__ôt_sync_¸óã_±r
 
__ôt_sync_¸óãW_±r


	)

575 
	#__ôt_sync_¸óã
 
__ôt_sync_¸óãA


	)

576 
	#__ôt_sync_¸óã_±r
 
__ôt_sync_¸óãA_±r


	)

579 
ITTAPI
 
__ôt_sync_¸óã
 (*
addr
, c⁄° *
objty≥
, c⁄° *
obj«me
, 
©åibuã
);

583 #i‚de‡
INTEL_NO_MACRO_BODY


584 #i‚de‡
INTEL_NO_ITTNOTIFY_API


585 #i‡
ITT_PLATFORM
==
ITT_PLATFORM_WIN


586 
ITT_STUBV
(
ITTAPI
, , 
sync_¸óãA
, (*
addr
, c⁄° *
objty≥
, c⁄° *
obj«me
, 
©åibuã
))

587 
ITT_STUBV
(
ITTAPI
, , 
sync_¸óãW
, (*
addr
, c⁄° 
wch¨_t
 *
objty≥
, c⁄° wch¨_à*
obj«me
, 
©åibuã
))

589 
ITT_STUBV
(
ITTAPI
, , 
sync_¸óã
, (*
addr
, c⁄° * 
objty≥
, c⁄° * 
obj«me
, 
©åibuã
))

591 #i‡
ITT_PLATFORM
==
ITT_PLATFORM_WIN


592 
	#__ôt_sync_¸óãA
 
	`ITTNOTIFY_VOID
(
sync_¸óãA
)

	)

593 
	#__ôt_sync_¸óãA_±r
 
	`ITTNOTIFY_NAME
(
sync_¸óãA
)

	)

594 
	#__ôt_sync_¸óãW
 
	`ITTNOTIFY_VOID
(
sync_¸óãW
)

	)

595 
	#__ôt_sync_¸óãW_±r
 
	`ITTNOTIFY_NAME
(
sync_¸óãW
)

	)

597 
	#__ôt_sync_¸óã
 
	`ITTNOTIFY_VOID
(
sync_¸óã
)

	)

598 
	#__ôt_sync_¸óã_±r
 
	`ITTNOTIFY_NAME
(
sync_¸óã
)

	)

601 #i‡
ITT_PLATFORM
==
ITT_PLATFORM_WIN


602 
	#__ôt_sync_¸óãA
(
addr
, 
objty≥
, 
obj«me
, 
©åibuã
)

	)

603 
	#__ôt_sync_¸óãA_±r
 0

	)

604 
	#__ôt_sync_¸óãW
(
addr
, 
objty≥
, 
obj«me
, 
©åibuã
)

	)

605 
	#__ôt_sync_¸óãW_±r
 0

	)

607 
	#__ôt_sync_¸óã
(
addr
, 
objty≥
, 
obj«me
, 
©åibuã
)

	)

608 
	#__ôt_sync_¸óã_±r
 0

	)

612 #i‡
ITT_PLATFORM
==
ITT_PLATFORM_WIN


613 
	#__ôt_sync_¸óãA_±r
 0

	)

614 
	#__ôt_sync_¸óãW_±r
 0

	)

616 
	#__ôt_sync_¸óã_±r
 0

	)

629 #i‡
ITT_PLATFORM
==
ITT_PLATFORM_WIN


630 
ITTAPI
 
__ôt_sync_ª«meA
(*
addr
, c⁄° *
«me
);

631 
ITTAPI
 
__ôt_sync_ª«meW
(*
addr
, c⁄° 
wch¨_t
 *
«me
);

632 #i‡
deföed
(
UNICODE
Ë|| deföed(
_UNICODE
)

633 
	#__ôt_sync_ª«me
 
__ôt_sync_ª«meW


	)

634 
	#__ôt_sync_ª«me_±r
 
__ôt_sync_ª«meW_±r


	)

636 
	#__ôt_sync_ª«me
 
__ôt_sync_ª«meA


	)

637 
	#__ôt_sync_ª«me_±r
 
__ôt_sync_ª«meA_±r


	)

640 
ITTAPI
 
__ôt_sync_ª«me
(*
addr
, c⁄° *
«me
);

644 #i‚de‡
INTEL_NO_MACRO_BODY


645 #i‚de‡
INTEL_NO_ITTNOTIFY_API


646 #i‡
ITT_PLATFORM
==
ITT_PLATFORM_WIN


647 
ITT_STUBV
(
ITTAPI
, , 
sync_ª«meA
, (*
addr
, c⁄° *
«me
))

648 
ITT_STUBV
(
ITTAPI
, , 
sync_ª«meW
, (*
addr
, c⁄° 
wch¨_t
 *
«me
))

650 
ITT_STUBV
(
ITTAPI
, , 
sync_ª«me
, (*
addr
, c⁄° *
«me
))

652 #i‡
ITT_PLATFORM
==
ITT_PLATFORM_WIN


653 
	#__ôt_sync_ª«meA
 
	`ITTNOTIFY_VOID
(
sync_ª«meA
)

	)

654 
	#__ôt_sync_ª«meA_±r
 
	`ITTNOTIFY_NAME
(
sync_ª«meA
)

	)

655 
	#__ôt_sync_ª«meW
 
	`ITTNOTIFY_VOID
(
sync_ª«meW
)

	)

656 
	#__ôt_sync_ª«meW_±r
 
	`ITTNOTIFY_NAME
(
sync_ª«meW
)

	)

658 
	#__ôt_sync_ª«me
 
	`ITTNOTIFY_VOID
(
sync_ª«me
)

	)

659 
	#__ôt_sync_ª«me_±r
 
	`ITTNOTIFY_NAME
(
sync_ª«me
)

	)

662 #i‡
ITT_PLATFORM
==
ITT_PLATFORM_WIN


663 
	#__ôt_sync_ª«meA
(
addr
, 
«me
)

	)

664 
	#__ôt_sync_ª«meA_±r
 0

	)

665 
	#__ôt_sync_ª«meW
(
addr
, 
«me
)

	)

666 
	#__ôt_sync_ª«meW_±r
 0

	)

668 
	#__ôt_sync_ª«me
(
addr
, 
«me
)

	)

669 
	#__ôt_sync_ª«me_±r
 0

	)

673 #i‡
ITT_PLATFORM
==
ITT_PLATFORM_WIN


674 
	#__ôt_sync_ª«meA_±r
 0

	)

675 
	#__ôt_sync_ª«meW_±r
 0

	)

677 
	#__ôt_sync_ª«me_±r
 0

	)

686 
ITTAPI
 
__ôt_sync_de°roy
(*
addr
);

689 #i‚de‡
INTEL_NO_MACRO_BODY


690 #i‚de‡
INTEL_NO_ITTNOTIFY_API


691 
ITT_STUBV
(
ITTAPI
, , 
sync_de°roy
, (*
addr
))

692 
	#__ôt_sync_de°roy
 
	`ITTNOTIFY_VOID
(
sync_de°roy
)

	)

693 
	#__ôt_sync_de°roy_±r
 
	`ITTNOTIFY_NAME
(
sync_de°roy
)

	)

695 
	#__ôt_sync_de°roy
(
addr
)

	)

696 
	#__ôt_sync_de°roy_±r
 0

	)

699 
	#__ôt_sync_de°roy_±r
 0

	)

710 
ITTAPI
 
__ôt_sync_¥ï¨e
(* 
addr
);

713 #i‚de‡
INTEL_NO_MACRO_BODY


714 #i‚de‡
INTEL_NO_ITTNOTIFY_API


715 
ITT_STUBV
(
ITTAPI
, , 
sync_¥ï¨e
, (*
addr
))

716 
	#__ôt_sync_¥ï¨e
 
	`ITTNOTIFY_VOID
(
sync_¥ï¨e
)

	)

717 
	#__ôt_sync_¥ï¨e_±r
 
	`ITTNOTIFY_NAME
(
sync_¥ï¨e
)

	)

719 
	#__ôt_sync_¥ï¨e
(
addr
)

	)

720 
	#__ôt_sync_¥ï¨e_±r
 0

	)

723 
	#__ôt_sync_¥ï¨e_±r
 0

	)

730 
ITTAPI
 
__ôt_sync_ˇn˚l
(*
addr
);

733 #i‚de‡
INTEL_NO_MACRO_BODY


734 #i‚de‡
INTEL_NO_ITTNOTIFY_API


735 
ITT_STUBV
(
ITTAPI
, , 
sync_ˇn˚l
, (*
addr
))

736 
	#__ôt_sync_ˇn˚l
 
	`ITTNOTIFY_VOID
(
sync_ˇn˚l
)

	)

737 
	#__ôt_sync_ˇn˚l_±r
 
	`ITTNOTIFY_NAME
(
sync_ˇn˚l
)

	)

739 
	#__ôt_sync_ˇn˚l
(
addr
)

	)

740 
	#__ôt_sync_ˇn˚l_±r
 0

	)

743 
	#__ôt_sync_ˇn˚l_±r
 0

	)

750 
ITTAPI
 
__ôt_sync_acquúed
(*
addr
);

753 #i‚de‡
INTEL_NO_MACRO_BODY


754 #i‚de‡
INTEL_NO_ITTNOTIFY_API


755 
ITT_STUBV
(
ITTAPI
, , 
sync_acquúed
, (*
addr
))

756 
	#__ôt_sync_acquúed
 
	`ITTNOTIFY_VOID
(
sync_acquúed
)

	)

757 
	#__ôt_sync_acquúed_±r
 
	`ITTNOTIFY_NAME
(
sync_acquúed
)

	)

759 
	#__ôt_sync_acquúed
(
addr
)

	)

760 
	#__ôt_sync_acquúed_±r
 0

	)

763 
	#__ôt_sync_acquúed_±r
 0

	)

770 
ITTAPI
 
__ôt_sync_ªÀasög
(* 
addr
);

773 #i‚de‡
INTEL_NO_MACRO_BODY


774 #i‚de‡
INTEL_NO_ITTNOTIFY_API


775 
ITT_STUBV
(
ITTAPI
, , 
sync_ªÀasög
, (*
addr
))

776 
	#__ôt_sync_ªÀasög
 
	`ITTNOTIFY_VOID
(
sync_ªÀasög
)

	)

777 
	#__ôt_sync_ªÀasög_±r
 
	`ITTNOTIFY_NAME
(
sync_ªÀasög
)

	)

779 
	#__ôt_sync_ªÀasög
(
addr
)

	)

780 
	#__ôt_sync_ªÀasög_±r
 0

	)

783 
	#__ôt_sync_ªÀasög_±r
 0

	)

804 
ITTAPI
 
__ôt_fsync_¥ï¨e
(* 
addr
);

807 #i‚de‡
INTEL_NO_MACRO_BODY


808 #i‚de‡
INTEL_NO_ITTNOTIFY_API


809 
ITT_STUBV
(
ITTAPI
, , 
fsync_¥ï¨e
, (*
addr
))

810 
	#__ôt_fsync_¥ï¨e
 
	`ITTNOTIFY_VOID
(
fsync_¥ï¨e
)

	)

811 
	#__ôt_fsync_¥ï¨e_±r
 
	`ITTNOTIFY_NAME
(
fsync_¥ï¨e
)

	)

813 
	#__ôt_fsync_¥ï¨e
(
addr
)

	)

814 
	#__ôt_fsync_¥ï¨e_±r
 0

	)

817 
	#__ôt_fsync_¥ï¨e_±r
 0

	)

831 
ITTAPI
 
__ôt_fsync_ˇn˚l
(*
addr
);

834 #i‚de‡
INTEL_NO_MACRO_BODY


835 #i‚de‡
INTEL_NO_ITTNOTIFY_API


836 
ITT_STUBV
(
ITTAPI
, , 
fsync_ˇn˚l
, (*
addr
))

837 
	#__ôt_fsync_ˇn˚l
 
	`ITTNOTIFY_VOID
(
fsync_ˇn˚l
)

	)

838 
	#__ôt_fsync_ˇn˚l_±r
 
	`ITTNOTIFY_NAME
(
fsync_ˇn˚l
)

	)

840 
	#__ôt_fsync_ˇn˚l
(
addr
)

	)

841 
	#__ôt_fsync_ˇn˚l_±r
 0

	)

844 
	#__ôt_fsync_ˇn˚l_±r
 0

	)

858 
ITTAPI
 
__ôt_fsync_acquúed
(*
addr
);

861 #i‚de‡
INTEL_NO_MACRO_BODY


862 #i‚de‡
INTEL_NO_ITTNOTIFY_API


863 
ITT_STUBV
(
ITTAPI
, , 
fsync_acquúed
, (*
addr
))

864 
	#__ôt_fsync_acquúed
 
	`ITTNOTIFY_VOID
(
fsync_acquúed
)

	)

865 
	#__ôt_fsync_acquúed_±r
 
	`ITTNOTIFY_NAME
(
fsync_acquúed
)

	)

867 
	#__ôt_fsync_acquúed
(
addr
)

	)

868 
	#__ôt_fsync_acquúed_±r
 0

	)

871 
	#__ôt_fsync_acquúed_±r
 0

	)

885 
ITTAPI
 
__ôt_fsync_ªÀasög
(* 
addr
);

888 #i‚de‡
INTEL_NO_MACRO_BODY


889 #i‚de‡
INTEL_NO_ITTNOTIFY_API


890 
ITT_STUBV
(
ITTAPI
, , 
fsync_ªÀasög
, (*
addr
))

891 
	#__ôt_fsync_ªÀasög
 
	`ITTNOTIFY_VOID
(
fsync_ªÀasög
)

	)

892 
	#__ôt_fsync_ªÀasög_±r
 
	`ITTNOTIFY_NAME
(
fsync_ªÀasög
)

	)

894 
	#__ôt_fsync_ªÀasög
(
addr
)

	)

895 
	#__ôt_fsync_ªÀasög_±r
 0

	)

898 
	#__ôt_fsync_ªÀasög_±r
 0

	)

928 #i‡!
deföed
(
_ADVISOR_ANNOTATE_H_
Ë|| deföed(
ANNOTATE_EXPAND_NULL
)

930 * 
	t__ôt_modñ_sôe
;

931 * 
	t__ôt_modñ_sôe_ö°™˚
;

932 * 
	t__ôt_modñ_èsk
;

933 * 
	t__ôt_modñ_èsk_ö°™˚
;

940 
__ôt_modñ_dißbÀ_ob£rv©i⁄
,

941 
__ôt_modñ_dißbÀ_cﬁÀ˘i⁄


942 } 
	t__ôt_modñ_dißbÀ
;

958 
ITTAPI
 
__ôt_modñ_sôe_begö
(
__ôt_modñ_sôe
 *
sôe
, 
__ôt_modñ_sôe_ö°™˚
 *
ö°™˚
, c⁄° *
«me
);

959 #i‡
ITT_PLATFORM
==
ITT_PLATFORM_WIN


960 
ITTAPI
 
__ôt_modñ_sôe_begöW
(c⁄° 
wch¨_t
 *
«me
);

962 
ITTAPI
 
__ôt_modñ_sôe_begöA
(c⁄° *
«me
);

963 
ITTAPI
 
__ôt_modñ_sôe_begöAL
(c⁄° *
«me
, 
size_t
 
sôeNameLí
);

964 
ITTAPI
 
__ôt_modñ_sôe_íd
 (
__ôt_modñ_sôe
 *
sôe
, 
__ôt_modñ_sôe_ö°™˚
 *
ö°™˚
);

965 
ITTAPI
 
__ôt_modñ_sôe_íd_2
();

968 #i‚de‡
INTEL_NO_MACRO_BODY


969 #i‚de‡
INTEL_NO_ITTNOTIFY_API


970 
ITT_STUBV
(
ITTAPI
, , 
modñ_sôe_begö
, (
__ôt_modñ_sôe
 *
sôe
, 
__ôt_modñ_sôe_ö°™˚
 *
ö°™˚
, c⁄° *
«me
))

971 #i‡
ITT_PLATFORM
==
ITT_PLATFORM_WIN


972 
ITT_STUBV
(
ITTAPI
, , 
modñ_sôe_begöW
, (c⁄° 
wch¨_t
 *
«me
))

974 
ITT_STUBV
(
ITTAPI
, , 
modñ_sôe_begöA
, (c⁄° *
«me
))

975 
ITT_STUBV
(
ITTAPI
, , 
modñ_sôe_begöAL
, (c⁄° *
«me
, 
size_t
 
sôeNameLí
))

976 
ITT_STUBV
(
ITTAPI
, , 
modñ_sôe_íd
, (
__ôt_modñ_sôe
 *
sôe
, 
__ôt_modñ_sôe_ö°™˚
 *
ö°™˚
))

977 
ITT_STUBV
(
ITTAPI
, , 
modñ_sôe_íd_2
, ())

978 
	#__ôt_modñ_sôe_begö
 
	`ITTNOTIFY_VOID
(
modñ_sôe_begö
)

	)

979 
	#__ôt_modñ_sôe_begö_±r
 
	`ITTNOTIFY_NAME
(
modñ_sôe_begö
)

	)

980 #i‡
ITT_PLATFORM
==
ITT_PLATFORM_WIN


981 
	#__ôt_modñ_sôe_begöW
 
	`ITTNOTIFY_VOID
(
modñ_sôe_begöW
)

	)

982 
	#__ôt_modñ_sôe_begöW_±r
 
	`ITTNOTIFY_NAME
(
modñ_sôe_begöW
)

	)

984 
	#__ôt_modñ_sôe_begöA
 
	`ITTNOTIFY_VOID
(
modñ_sôe_begöA
)

	)

985 
	#__ôt_modñ_sôe_begöA_±r
 
	`ITTNOTIFY_NAME
(
modñ_sôe_begöA
)

	)

986 
	#__ôt_modñ_sôe_begöAL
 
	`ITTNOTIFY_VOID
(
modñ_sôe_begöAL
)

	)

987 
	#__ôt_modñ_sôe_begöAL_±r
 
	`ITTNOTIFY_NAME
(
modñ_sôe_begöAL
)

	)

988 
	#__ôt_modñ_sôe_íd
 
	`ITTNOTIFY_VOID
(
modñ_sôe_íd
)

	)

989 
	#__ôt_modñ_sôe_íd_±r
 
	`ITTNOTIFY_NAME
(
modñ_sôe_íd
)

	)

990 
	#__ôt_modñ_sôe_íd_2
 
	`ITTNOTIFY_VOID
(
modñ_sôe_íd_2
)

	)

991 
	#__ôt_modñ_sôe_íd_2_±r
 
	`ITTNOTIFY_NAME
(
modñ_sôe_íd_2
)

	)

993 
	#__ôt_modñ_sôe_begö
(
sôe
, 
ö°™˚
, 
«me
)

	)

994 
	#__ôt_modñ_sôe_begö_±r
 0

	)

995 #i‡
ITT_PLATFORM
==
ITT_PLATFORM_WIN


996 
	#__ôt_modñ_sôe_begöW
(
«me
)

	)

997 
	#__ôt_modñ_sôe_begöW_±r
 0

	)

999 
	#__ôt_modñ_sôe_begöA
(
«me
)

	)

1000 
	#__ôt_modñ_sôe_begöA_±r
 0

	)

1001 
	#__ôt_modñ_sôe_begöAL
(
«me
, 
sôeNameLí
)

	)

1002 
	#__ôt_modñ_sôe_begöAL_±r
 0

	)

1003 
	#__ôt_modñ_sôe_íd
(
sôe
, 
ö°™˚
)

	)

1004 
	#__ôt_modñ_sôe_íd_±r
 0

	)

1005 
	#__ôt_modñ_sôe_íd_2
()

	)

1006 
	#__ôt_modñ_sôe_íd_2_±r
 0

	)

1009 
	#__ôt_modñ_sôe_begö_±r
 0

	)

1010 #i‡
ITT_PLATFORM
==
ITT_PLATFORM_WIN


1011 
	#__ôt_modñ_sôe_begöW_±r
 0

	)

1013 
	#__ôt_modñ_sôe_begöA_±r
 0

	)

1014 
	#__ôt_modñ_sôe_begöAL_±r
 0

	)

1015 
	#__ôt_modñ_sôe_íd_±r
 0

	)

1016 
	#__ôt_modñ_sôe_íd_2_±r
 0

	)

1031 
ITTAPI
 
__ôt_modñ_èsk_begö
(
__ôt_modñ_èsk
 *
èsk
, 
__ôt_modñ_èsk_ö°™˚
 *
ö°™˚
, c⁄° *
«me
);

1032 #i‡
ITT_PLATFORM
==
ITT_PLATFORM_WIN


1033 
ITTAPI
 
__ôt_modñ_èsk_begöW
(c⁄° 
wch¨_t
 *
«me
);

1034 
ITTAPI
 
__ôt_modñ_ôî©i⁄_èskW
(c⁄° 
wch¨_t
 *
«me
);

1036 
ITTAPI
 
__ôt_modñ_èsk_begöA
(c⁄° *
«me
);

1037 
ITTAPI
 
__ôt_modñ_èsk_begöAL
(c⁄° *
«me
, 
size_t
 
èskNameLí
);

1038 
ITTAPI
 
__ôt_modñ_ôî©i⁄_èskA
(c⁄° *
«me
);

1039 
ITTAPI
 
__ôt_modñ_ôî©i⁄_èskAL
(c⁄° *
«me
, 
size_t
 
èskNameLí
);

1040 
ITTAPI
 
__ôt_modñ_èsk_íd
 (
__ôt_modñ_èsk
 *
èsk
, 
__ôt_modñ_èsk_ö°™˚
 *
ö°™˚
);

1041 
ITTAPI
 
__ôt_modñ_èsk_íd_2
();

1044 #i‚de‡
INTEL_NO_MACRO_BODY


1045 #i‚de‡
INTEL_NO_ITTNOTIFY_API


1046 
ITT_STUBV
(
ITTAPI
, , 
modñ_èsk_begö
, (
__ôt_modñ_èsk
 *
èsk
, 
__ôt_modñ_èsk_ö°™˚
 *
ö°™˚
, c⁄° *
«me
))

1047 #i‡
ITT_PLATFORM
==
ITT_PLATFORM_WIN


1048 
ITT_STUBV
(
ITTAPI
, , 
modñ_èsk_begöW
, (c⁄° 
wch¨_t
 *
«me
))

1049 
ITT_STUBV
(
ITTAPI
, , 
modñ_ôî©i⁄_èskW
, (c⁄° 
wch¨_t
 *
«me
))

1051 
ITT_STUBV
(
ITTAPI
, , 
modñ_èsk_begöA
, (c⁄° *
«me
))

1052 
ITT_STUBV
(
ITTAPI
, , 
modñ_èsk_begöAL
, (c⁄° *
«me
, 
size_t
 
èskNameLí
))

1053 
ITT_STUBV
(
ITTAPI
, , 
modñ_ôî©i⁄_èskA
, (c⁄° *
«me
))

1054 
ITT_STUBV
(
ITTAPI
, , 
modñ_ôî©i⁄_èskAL
, (c⁄° *
«me
, 
size_t
 
èskNameLí
))

1055 
ITT_STUBV
(
ITTAPI
, , 
modñ_èsk_íd
, (
__ôt_modñ_èsk
 *
èsk
, 
__ôt_modñ_èsk_ö°™˚
 *
ö°™˚
))

1056 
ITT_STUBV
(
ITTAPI
, , 
modñ_èsk_íd_2
, ())

1057 
	#__ôt_modñ_èsk_begö
 
	`ITTNOTIFY_VOID
(
modñ_èsk_begö
)

	)

1058 
	#__ôt_modñ_èsk_begö_±r
 
	`ITTNOTIFY_NAME
(
modñ_èsk_begö
)

	)

1059 #i‡
ITT_PLATFORM
==
ITT_PLATFORM_WIN


1060 
	#__ôt_modñ_èsk_begöW
 
	`ITTNOTIFY_VOID
(
modñ_èsk_begöW
)

	)

1061 
	#__ôt_modñ_èsk_begöW_±r
 
	`ITTNOTIFY_NAME
(
modñ_èsk_begöW
)

	)

1062 
	#__ôt_modñ_ôî©i⁄_èskW
 
	`ITTNOTIFY_VOID
(
modñ_ôî©i⁄_èskW
)

	)

1063 
	#__ôt_modñ_ôî©i⁄_èskW_±r
 
	`ITTNOTIFY_NAME
(
modñ_ôî©i⁄_èskW
)

	)

1065 
	#__ôt_modñ_èsk_begöA
 
	`ITTNOTIFY_VOID
(
modñ_èsk_begöA
)

	)

1066 
	#__ôt_modñ_èsk_begöA_±r
 
	`ITTNOTIFY_NAME
(
modñ_èsk_begöA
)

	)

1067 
	#__ôt_modñ_èsk_begöAL
 
	`ITTNOTIFY_VOID
(
modñ_èsk_begöAL
)

	)

1068 
	#__ôt_modñ_èsk_begöAL_±r
 
	`ITTNOTIFY_NAME
(
modñ_èsk_begöAL
)

	)

1069 
	#__ôt_modñ_ôî©i⁄_èskA
 
	`ITTNOTIFY_VOID
(
modñ_ôî©i⁄_èskA
)

	)

1070 
	#__ôt_modñ_ôî©i⁄_èskA_±r
 
	`ITTNOTIFY_NAME
(
modñ_ôî©i⁄_èskA
)

	)

1071 
	#__ôt_modñ_ôî©i⁄_èskAL
 
	`ITTNOTIFY_VOID
(
modñ_ôî©i⁄_èskAL
)

	)

1072 
	#__ôt_modñ_ôî©i⁄_èskAL_±r
 
	`ITTNOTIFY_NAME
(
modñ_ôî©i⁄_èskAL
)

	)

1073 
	#__ôt_modñ_èsk_íd
 
	`ITTNOTIFY_VOID
(
modñ_èsk_íd
)

	)

1074 
	#__ôt_modñ_èsk_íd_±r
 
	`ITTNOTIFY_NAME
(
modñ_èsk_íd
)

	)

1075 
	#__ôt_modñ_èsk_íd_2
 
	`ITTNOTIFY_VOID
(
modñ_èsk_íd_2
)

	)

1076 
	#__ôt_modñ_èsk_íd_2_±r
 
	`ITTNOTIFY_NAME
(
modñ_èsk_íd_2
)

	)

1078 
	#__ôt_modñ_èsk_begö
(
èsk
, 
ö°™˚
, 
«me
)

	)

1079 
	#__ôt_modñ_èsk_begö_±r
 0

	)

1080 #i‡
ITT_PLATFORM
==
ITT_PLATFORM_WIN


1081 
	#__ôt_modñ_èsk_begöW
(
«me
)

	)

1082 
	#__ôt_modñ_èsk_begöW_±r
 0

	)

1084 
	#__ôt_modñ_èsk_begöA
(
«me
)

	)

1085 
	#__ôt_modñ_èsk_begöA_±r
 0

	)

1086 
	#__ôt_modñ_èsk_begöAL
(
«me
, 
sôeNameLí
)

	)

1087 
	#__ôt_modñ_èsk_begöAL_±r
 0

	)

1088 
	#__ôt_modñ_ôî©i⁄_èskA
(
«me
)

	)

1089 
	#__ôt_modñ_ôî©i⁄_èskA_±r
 0

	)

1090 
	#__ôt_modñ_ôî©i⁄_èskAL
(
«me
, 
sôeNameLí
)

	)

1091 
	#__ôt_modñ_ôî©i⁄_èskAL_±r
 0

	)

1092 
	#__ôt_modñ_èsk_íd
(
èsk
, 
ö°™˚
)

	)

1093 
	#__ôt_modñ_èsk_íd_±r
 0

	)

1094 
	#__ôt_modñ_èsk_íd_2
()

	)

1095 
	#__ôt_modñ_èsk_íd_2_±r
 0

	)

1098 
	#__ôt_modñ_èsk_begö_±r
 0

	)

1099 #i‡
ITT_PLATFORM
==
ITT_PLATFORM_WIN


1100 
	#__ôt_modñ_èsk_begöW_±r
 0

	)

1102 
	#__ôt_modñ_èsk_begöA_±r
 0

	)

1103 
	#__ôt_modñ_èsk_begöAL_±r
 0

	)

1104 
	#__ôt_modñ_ôî©i⁄_èskA_±r
 0

	)

1105 
	#__ôt_modñ_ôî©i⁄_èskAL_±r
 0

	)

1106 
	#__ôt_modñ_èsk_íd_±r
 0

	)

1107 
	#__ôt_modñ_èsk_íd_2_±r
 0

	)

1123 
ITTAPI
 
__ôt_modñ_lock_acquúe
(*
lock
);

1124 
ITTAPI
 
__ôt_modñ_lock_acquúe_2
(*
lock
);

1125 
ITTAPI
 
__ôt_modñ_lock_ªÀa£
(*
lock
);

1126 
ITTAPI
 
__ôt_modñ_lock_ªÀa£_2
(*
lock
);

1129 #i‚de‡
INTEL_NO_MACRO_BODY


1130 #i‚de‡
INTEL_NO_ITTNOTIFY_API


1131 
ITT_STUBV
(
ITTAPI
, , 
modñ_lock_acquúe
, (*
lock
))

1132 
ITT_STUBV
(
ITTAPI
, , 
modñ_lock_acquúe_2
, (*
lock
))

1133 
ITT_STUBV
(
ITTAPI
, , 
modñ_lock_ªÀa£
, (*
lock
))

1134 
ITT_STUBV
(
ITTAPI
, , 
modñ_lock_ªÀa£_2
, (*
lock
))

1135 
	#__ôt_modñ_lock_acquúe
 
	`ITTNOTIFY_VOID
(
modñ_lock_acquúe
)

	)

1136 
	#__ôt_modñ_lock_acquúe_±r
 
	`ITTNOTIFY_NAME
(
modñ_lock_acquúe
)

	)

1137 
	#__ôt_modñ_lock_acquúe_2
 
	`ITTNOTIFY_VOID
(
modñ_lock_acquúe_2
)

	)

1138 
	#__ôt_modñ_lock_acquúe_2_±r
 
	`ITTNOTIFY_NAME
(
modñ_lock_acquúe_2
)

	)

1139 
	#__ôt_modñ_lock_ªÀa£
 
	`ITTNOTIFY_VOID
(
modñ_lock_ªÀa£
)

	)

1140 
	#__ôt_modñ_lock_ªÀa£_±r
 
	`ITTNOTIFY_NAME
(
modñ_lock_ªÀa£
)

	)

1141 
	#__ôt_modñ_lock_ªÀa£_2
 
	`ITTNOTIFY_VOID
(
modñ_lock_ªÀa£_2
)

	)

1142 
	#__ôt_modñ_lock_ªÀa£_2_±r
 
	`ITTNOTIFY_NAME
(
modñ_lock_ªÀa£_2
)

	)

1144 
	#__ôt_modñ_lock_acquúe
(
lock
)

	)

1145 
	#__ôt_modñ_lock_acquúe_±r
 0

	)

1146 
	#__ôt_modñ_lock_acquúe_2
(
lock
)

	)

1147 
	#__ôt_modñ_lock_acquúe_2_±r
 0

	)

1148 
	#__ôt_modñ_lock_ªÀa£
(
lock
)

	)

1149 
	#__ôt_modñ_lock_ªÀa£_±r
 0

	)

1150 
	#__ôt_modñ_lock_ªÀa£_2
(
lock
)

	)

1151 
	#__ôt_modñ_lock_ªÀa£_2_±r
 0

	)

1154 
	#__ôt_modñ_lock_acquúe_±r
 0

	)

1155 
	#__ôt_modñ_lock_acquúe_2_±r
 0

	)

1156 
	#__ôt_modñ_lock_ªÀa£_±r
 0

	)

1157 
	#__ôt_modñ_lock_ªÀa£_2_±r
 0

	)

1168 
ITTAPI
 
__ôt_modñ_ªc‹d_Æloˇti⁄
 (*
addr
, 
size_t
 
size
);

1169 
ITTAPI
 
__ôt_modñ_ªc‹d_dóŒoˇti⁄
(*
addr
);

1172 #i‚de‡
INTEL_NO_MACRO_BODY


1173 #i‚de‡
INTEL_NO_ITTNOTIFY_API


1174 
ITT_STUBV
(
ITTAPI
, , 
modñ_ªc‹d_Æloˇti⁄
, (*
addr
, 
size_t
 
size
))

1175 
ITT_STUBV
(
ITTAPI
, , 
modñ_ªc‹d_dóŒoˇti⁄
, (*
addr
))

1176 
	#__ôt_modñ_ªc‹d_Æloˇti⁄
 
	`ITTNOTIFY_VOID
(
modñ_ªc‹d_Æloˇti⁄
)

	)

1177 
	#__ôt_modñ_ªc‹d_Æloˇti⁄_±r
 
	`ITTNOTIFY_NAME
(
modñ_ªc‹d_Æloˇti⁄
)

	)

1178 
	#__ôt_modñ_ªc‹d_dóŒoˇti⁄
 
	`ITTNOTIFY_VOID
(
modñ_ªc‹d_dóŒoˇti⁄
)

	)

1179 
	#__ôt_modñ_ªc‹d_dóŒoˇti⁄_±r
 
	`ITTNOTIFY_NAME
(
modñ_ªc‹d_dóŒoˇti⁄
)

	)

1181 
	#__ôt_modñ_ªc‹d_Æloˇti⁄
(
addr
, 
size
)

	)

1182 
	#__ôt_modñ_ªc‹d_Æloˇti⁄_±r
 0

	)

1183 
	#__ôt_modñ_ªc‹d_dóŒoˇti⁄
(
addr
)

	)

1184 
	#__ôt_modñ_ªc‹d_dóŒoˇti⁄_±r
 0

	)

1187 
	#__ôt_modñ_ªc‹d_Æloˇti⁄_±r
 0

	)

1188 
	#__ôt_modñ_ªc‹d_dóŒoˇti⁄_±r
 0

	)

1197 
ITTAPI
 
__ôt_modñ_ödu˘i⁄_u£s
(* 
addr
, 
size_t
 
size
);

1200 #i‚de‡
INTEL_NO_MACRO_BODY


1201 #i‚de‡
INTEL_NO_ITTNOTIFY_API


1202 
ITT_STUBV
(
ITTAPI
, , 
modñ_ödu˘i⁄_u£s
, (*
addr
, 
size_t
 
size
))

1203 
	#__ôt_modñ_ödu˘i⁄_u£s
 
	`ITTNOTIFY_VOID
(
modñ_ödu˘i⁄_u£s
)

	)

1204 
	#__ôt_modñ_ödu˘i⁄_u£s_±r
 
	`ITTNOTIFY_NAME
(
modñ_ödu˘i⁄_u£s
)

	)

1206 
	#__ôt_modñ_ödu˘i⁄_u£s
(
addr
, 
size
)

	)

1207 
	#__ôt_modñ_ödu˘i⁄_u£s_±r
 0

	)

1210 
	#__ôt_modñ_ödu˘i⁄_u£s_±r
 0

	)

1220 
ITTAPI
 
__ôt_modñ_ªdu˘i⁄_u£s
(* 
addr
, 
size_t
 
size
);

1223 #i‚de‡
INTEL_NO_MACRO_BODY


1224 #i‚de‡
INTEL_NO_ITTNOTIFY_API


1225 
ITT_STUBV
(
ITTAPI
, , 
modñ_ªdu˘i⁄_u£s
, (*
addr
, 
size_t
 
size
))

1226 
	#__ôt_modñ_ªdu˘i⁄_u£s
 
	`ITTNOTIFY_VOID
(
modñ_ªdu˘i⁄_u£s
)

	)

1227 
	#__ôt_modñ_ªdu˘i⁄_u£s_±r
 
	`ITTNOTIFY_NAME
(
modñ_ªdu˘i⁄_u£s
)

	)

1229 
	#__ôt_modñ_ªdu˘i⁄_u£s
(
addr
, 
size
)

	)

1230 
	#__ôt_modñ_ªdu˘i⁄_u£s_±r
 0

	)

1233 
	#__ôt_modñ_ªdu˘i⁄_u£s_±r
 0

	)

1243 
ITTAPI
 
__ôt_modñ_ob£rve_u£s
(* 
addr
, 
size_t
 
size
);

1246 #i‚de‡
INTEL_NO_MACRO_BODY


1247 #i‚de‡
INTEL_NO_ITTNOTIFY_API


1248 
ITT_STUBV
(
ITTAPI
, , 
modñ_ob£rve_u£s
, (*
addr
, 
size_t
 
size
))

1249 
	#__ôt_modñ_ob£rve_u£s
 
	`ITTNOTIFY_VOID
(
modñ_ob£rve_u£s
)

	)

1250 
	#__ôt_modñ_ob£rve_u£s_±r
 
	`ITTNOTIFY_NAME
(
modñ_ob£rve_u£s
)

	)

1252 
	#__ôt_modñ_ob£rve_u£s
(
addr
, 
size
)

	)

1253 
	#__ôt_modñ_ob£rve_u£s_±r
 0

	)

1256 
	#__ôt_modñ_ob£rve_u£s_±r
 0

	)

1266 
ITTAPI
 
__ôt_modñ_˛ór_u£s
(* 
addr
);

1269 #i‚de‡
INTEL_NO_MACRO_BODY


1270 #i‚de‡
INTEL_NO_ITTNOTIFY_API


1271 
ITT_STUBV
(
ITTAPI
, , 
modñ_˛ór_u£s
, (*
addr
))

1272 
	#__ôt_modñ_˛ór_u£s
 
	`ITTNOTIFY_VOID
(
modñ_˛ór_u£s
)

	)

1273 
	#__ôt_modñ_˛ór_u£s_±r
 
	`ITTNOTIFY_NAME
(
modñ_˛ór_u£s
)

	)

1275 
	#__ôt_modñ_˛ór_u£s
(
addr
)

	)

1276 
	#__ôt_modñ_˛ór_u£s_±r
 0

	)

1279 
	#__ôt_modñ_˛ór_u£s_±r
 0

	)

1304 
ITTAPI
 
__ôt_modñ_dißbÀ_push
(
__ôt_modñ_dißbÀ
 
x
);

1305 
ITTAPI
 
__ôt_modñ_dißbÀ_p›
();

1306 
ITTAPI
 
__ôt_modñ_aggªg©e_èsk
(
size_t
 
x
);

1309 #i‚de‡
INTEL_NO_MACRO_BODY


1310 #i‚de‡
INTEL_NO_ITTNOTIFY_API


1311 
ITT_STUBV
(
ITTAPI
, , 
modñ_dißbÀ_push
, (
__ôt_modñ_dißbÀ
 
x
))

1312 
ITT_STUBV
(
ITTAPI
, , 
modñ_dißbÀ_p›
, ())

1313 
ITT_STUBV
(
ITTAPI
, , 
modñ_aggªg©e_èsk
, (
size_t
 
x
))

1314 
	#__ôt_modñ_dißbÀ_push
 
	`ITTNOTIFY_VOID
(
modñ_dißbÀ_push
)

	)

1315 
	#__ôt_modñ_dißbÀ_push_±r
 
	`ITTNOTIFY_NAME
(
modñ_dißbÀ_push
)

	)

1316 
	#__ôt_modñ_dißbÀ_p›
 
	`ITTNOTIFY_VOID
(
modñ_dißbÀ_p›
)

	)

1317 
	#__ôt_modñ_dißbÀ_p›_±r
 
	`ITTNOTIFY_NAME
(
modñ_dißbÀ_p›
)

	)

1318 
	#__ôt_modñ_aggªg©e_èsk
 
	`ITTNOTIFY_VOID
(
modñ_aggªg©e_èsk
)

	)

1319 
	#__ôt_modñ_aggªg©e_èsk_±r
 
	`ITTNOTIFY_NAME
(
modñ_aggªg©e_èsk
)

	)

1321 
	#__ôt_modñ_dißbÀ_push
(
x
)

	)

1322 
	#__ôt_modñ_dißbÀ_push_±r
 0

	)

1323 
	#__ôt_modñ_dißbÀ_p›
()

	)

1324 
	#__ôt_modñ_dißbÀ_p›_±r
 0

	)

1325 
	#__ôt_modñ_aggªg©e_èsk
(
x
)

	)

1326 
	#__ôt_modñ_aggªg©e_èsk_±r
 0

	)

1329 
	#__ôt_modñ_dißbÀ_push_±r
 0

	)

1330 
	#__ôt_modñ_dißbÀ_p›_±r
 0

	)

1331 
	#__ôt_modñ_aggªg©e_èsk_±r
 0

	)

1343 * 
	t__ôt_hóp_fun˘i⁄
;

1349 #i‡
ITT_PLATFORM
==
ITT_PLATFORM_WIN


1350 
__ôt_hóp_fun˘i⁄
 
ITTAPI
 
__ôt_hóp_fun˘i⁄_¸óãA
(c⁄° * 
«me
, c⁄° * 
domaö
);

1351 
__ôt_hóp_fun˘i⁄
 
ITTAPI
 
__ôt_hóp_fun˘i⁄_¸óãW
(c⁄° 
wch¨_t
* 
«me
, c⁄° wch¨_t* 
domaö
);

1352 #i‡
deföed
(
UNICODE
Ë|| deföed(
_UNICODE
)

1353 
	#__ôt_hóp_fun˘i⁄_¸óã
 
__ôt_hóp_fun˘i⁄_¸óãW


	)

1354 
	#__ôt_hóp_fun˘i⁄_¸óã_±r
 
__ôt_hóp_fun˘i⁄_¸óãW_±r


	)

1356 
	#__ôt_hóp_fun˘i⁄_¸óã
 
__ôt_hóp_fun˘i⁄_¸óãA


	)

1357 
	#__ôt_hóp_fun˘i⁄_¸óã_±r
 
__ôt_hóp_fun˘i⁄_¸óãA_±r


	)

1360 
__ôt_hóp_fun˘i⁄
 
ITTAPI
 
__ôt_hóp_fun˘i⁄_¸óã
(c⁄° * 
«me
, c⁄° * 
domaö
);

1364 #i‚de‡
INTEL_NO_MACRO_BODY


1365 #i‚de‡
INTEL_NO_ITTNOTIFY_API


1366 #i‡
ITT_PLATFORM
==
ITT_PLATFORM_WIN


1367 
ITT_STUB
(
ITTAPI
, 
__ôt_hóp_fun˘i⁄
, 
hóp_fun˘i⁄_¸óãA
, (c⁄° * 
«me
, c⁄° * 
domaö
))

1368 
ITT_STUB
(
ITTAPI
, 
__ôt_hóp_fun˘i⁄
, 
hóp_fun˘i⁄_¸óãW
, (c⁄° 
wch¨_t
* 
«me
, c⁄° wch¨_t* 
domaö
))

1370 
ITT_STUB
(
ITTAPI
, 
__ôt_hóp_fun˘i⁄
, 
hóp_fun˘i⁄_¸óã
, (c⁄° * 
«me
, c⁄° * 
domaö
))

1372 #i‡
ITT_PLATFORM
==
ITT_PLATFORM_WIN


1373 
	#__ôt_hóp_fun˘i⁄_¸óãA
 
	`ITTNOTIFY_DATA
(
hóp_fun˘i⁄_¸óãA
)

	)

1374 
	#__ôt_hóp_fun˘i⁄_¸óãA_±r
 
	`ITTNOTIFY_NAME
(
hóp_fun˘i⁄_¸óãA
)

	)

1375 
	#__ôt_hóp_fun˘i⁄_¸óãW
 
	`ITTNOTIFY_DATA
(
hóp_fun˘i⁄_¸óãW
)

	)

1376 
	#__ôt_hóp_fun˘i⁄_¸óãW_±r
 
	`ITTNOTIFY_NAME
(
hóp_fun˘i⁄_¸óãW
)

	)

1378 
	#__ôt_hóp_fun˘i⁄_¸óã
 
	`ITTNOTIFY_DATA
(
hóp_fun˘i⁄_¸óã
)

	)

1379 
	#__ôt_hóp_fun˘i⁄_¸óã_±r
 
	`ITTNOTIFY_NAME
(
hóp_fun˘i⁄_¸óã
)

	)

1382 #i‡
ITT_PLATFORM
==
ITT_PLATFORM_WIN


1383 
	#__ôt_hóp_fun˘i⁄_¸óãA
(
«me
, 
domaö
Ë(
__ôt_hóp_fun˘i⁄
)0

	)

1384 
	#__ôt_hóp_fun˘i⁄_¸óãA_±r
 0

	)

1385 
	#__ôt_hóp_fun˘i⁄_¸óãW
(
«me
, 
domaö
Ë(
__ôt_hóp_fun˘i⁄
)0

	)

1386 
	#__ôt_hóp_fun˘i⁄_¸óãW_±r
 0

	)

1388 
	#__ôt_hóp_fun˘i⁄_¸óã
(
«me
, 
domaö
Ë(
__ôt_hóp_fun˘i⁄
)0

	)

1389 
	#__ôt_hóp_fun˘i⁄_¸óã_±r
 0

	)

1393 #i‡
ITT_PLATFORM
==
ITT_PLATFORM_WIN


1394 
	#__ôt_hóp_fun˘i⁄_¸óãA_±r
 0

	)

1395 
	#__ôt_hóp_fun˘i⁄_¸óãW_±r
 0

	)

1397 
	#__ôt_hóp_fun˘i⁄_¸óã_±r
 0

	)

1405 
ITTAPI
 
__ôt_hóp_Æloˇã_begö
(
__ôt_hóp_fun˘i⁄
 
h
, 
size_t
 
size
, 
öôülized
);

1408 #i‚de‡
INTEL_NO_MACRO_BODY


1409 #i‚de‡
INTEL_NO_ITTNOTIFY_API


1410 
ITT_STUBV
(
ITTAPI
, , 
hóp_Æloˇã_begö
, (
__ôt_hóp_fun˘i⁄
 
h
, 
size_t
 
size
, 
öôülized
))

1411 
	#__ôt_hóp_Æloˇã_begö
 
	`ITTNOTIFY_VOID
(
hóp_Æloˇã_begö
)

	)

1412 
	#__ôt_hóp_Æloˇã_begö_±r
 
	`ITTNOTIFY_NAME
(
hóp_Æloˇã_begö
)

	)

1414 
	#__ôt_hóp_Æloˇã_begö
(
h
, 
size
, 
öôülized
)

	)

1415 
	#__ôt_hóp_Æloˇã_begö_±r
 0

	)

1418 
	#__ôt_hóp_Æloˇã_begö_±r
 0

	)

1425 
ITTAPI
 
__ôt_hóp_Æloˇã_íd
(
__ôt_hóp_fun˘i⁄
 
h
, ** 
addr
, 
size_t
 
size
, 
öôülized
);

1428 #i‚de‡
INTEL_NO_MACRO_BODY


1429 #i‚de‡
INTEL_NO_ITTNOTIFY_API


1430 
ITT_STUBV
(
ITTAPI
, , 
hóp_Æloˇã_íd
, (
__ôt_hóp_fun˘i⁄
 
h
, ** 
addr
, 
size_t
 
size
, 
öôülized
))

1431 
	#__ôt_hóp_Æloˇã_íd
 
	`ITTNOTIFY_VOID
(
hóp_Æloˇã_íd
)

	)

1432 
	#__ôt_hóp_Æloˇã_íd_±r
 
	`ITTNOTIFY_NAME
(
hóp_Æloˇã_íd
)

	)

1434 
	#__ôt_hóp_Æloˇã_íd
(
h
, 
addr
, 
size
, 
öôülized
)

	)

1435 
	#__ôt_hóp_Æloˇã_íd_±r
 0

	)

1438 
	#__ôt_hóp_Æloˇã_íd_±r
 0

	)

1445 
ITTAPI
 
__ôt_hóp_‰ì_begö
(
__ôt_hóp_fun˘i⁄
 
h
, * 
addr
);

1448 #i‚de‡
INTEL_NO_MACRO_BODY


1449 #i‚de‡
INTEL_NO_ITTNOTIFY_API


1450 
ITT_STUBV
(
ITTAPI
, , 
hóp_‰ì_begö
, (
__ôt_hóp_fun˘i⁄
 
h
, * 
addr
))

1451 
	#__ôt_hóp_‰ì_begö
 
	`ITTNOTIFY_VOID
(
hóp_‰ì_begö
)

	)

1452 
	#__ôt_hóp_‰ì_begö_±r
 
	`ITTNOTIFY_NAME
(
hóp_‰ì_begö
)

	)

1454 
	#__ôt_hóp_‰ì_begö
(
h
, 
addr
)

	)

1455 
	#__ôt_hóp_‰ì_begö_±r
 0

	)

1458 
	#__ôt_hóp_‰ì_begö_±r
 0

	)

1465 
ITTAPI
 
__ôt_hóp_‰ì_íd
(
__ôt_hóp_fun˘i⁄
 
h
, * 
addr
);

1468 #i‚de‡
INTEL_NO_MACRO_BODY


1469 #i‚de‡
INTEL_NO_ITTNOTIFY_API


1470 
ITT_STUBV
(
ITTAPI
, , 
hóp_‰ì_íd
, (
__ôt_hóp_fun˘i⁄
 
h
, * 
addr
))

1471 
	#__ôt_hóp_‰ì_íd
 
	`ITTNOTIFY_VOID
(
hóp_‰ì_íd
)

	)

1472 
	#__ôt_hóp_‰ì_íd_±r
 
	`ITTNOTIFY_NAME
(
hóp_‰ì_íd
)

	)

1474 
	#__ôt_hóp_‰ì_íd
(
h
, 
addr
)

	)

1475 
	#__ôt_hóp_‰ì_íd_±r
 0

	)

1478 
	#__ôt_hóp_‰ì_íd_±r
 0

	)

1485 
ITTAPI
 
__ôt_hóp_ªÆloˇã_begö
(
__ôt_hóp_fun˘i⁄
 
h
, * 
addr
, 
size_t
 
√w_size
, 
öôülized
);

1488 #i‚de‡
INTEL_NO_MACRO_BODY


1489 #i‚de‡
INTEL_NO_ITTNOTIFY_API


1490 
ITT_STUBV
(
ITTAPI
, , 
hóp_ªÆloˇã_begö
, (
__ôt_hóp_fun˘i⁄
 
h
, * 
addr
, 
size_t
 
√w_size
, 
öôülized
))

1491 
	#__ôt_hóp_ªÆloˇã_begö
 
	`ITTNOTIFY_VOID
(
hóp_ªÆloˇã_begö
)

	)

1492 
	#__ôt_hóp_ªÆloˇã_begö_±r
 
	`ITTNOTIFY_NAME
(
hóp_ªÆloˇã_begö
)

	)

1494 
	#__ôt_hóp_ªÆloˇã_begö
(
h
, 
addr
, 
√w_size
, 
öôülized
)

	)

1495 
	#__ôt_hóp_ªÆloˇã_begö_±r
 0

	)

1498 
	#__ôt_hóp_ªÆloˇã_begö_±r
 0

	)

1505 
ITTAPI
 
__ôt_hóp_ªÆloˇã_íd
(
__ôt_hóp_fun˘i⁄
 
h
, * 
addr
, ** 
√w_addr
, 
size_t
 
√w_size
, 
öôülized
);

1508 #i‚de‡
INTEL_NO_MACRO_BODY


1509 #i‚de‡
INTEL_NO_ITTNOTIFY_API


1510 
ITT_STUBV
(
ITTAPI
, , 
hóp_ªÆloˇã_íd
, (
__ôt_hóp_fun˘i⁄
 
h
, * 
addr
, ** 
√w_addr
, 
size_t
 
√w_size
, 
öôülized
))

1511 
	#__ôt_hóp_ªÆloˇã_íd
 
	`ITTNOTIFY_VOID
(
hóp_ªÆloˇã_íd
)

	)

1512 
	#__ôt_hóp_ªÆloˇã_íd_±r
 
	`ITTNOTIFY_NAME
(
hóp_ªÆloˇã_íd
)

	)

1514 
	#__ôt_hóp_ªÆloˇã_íd
(
h
, 
addr
, 
√w_addr
, 
√w_size
, 
öôülized
)

	)

1515 
	#__ôt_hóp_ªÆloˇã_íd_±r
 0

	)

1518 
	#__ôt_hóp_ªÆloˇã_íd_±r
 0

	)

1523 
ITTAPI
 
__ôt_hóp_öã∫Æ_ac˚ss_begö
();

1526 #i‚de‡
INTEL_NO_MACRO_BODY


1527 #i‚de‡
INTEL_NO_ITTNOTIFY_API


1528 
ITT_STUBV
(
ITTAPI
, , 
hóp_öã∫Æ_ac˚ss_begö
, ())

1529 
	#__ôt_hóp_öã∫Æ_ac˚ss_begö
 
	`ITTNOTIFY_VOID
(
hóp_öã∫Æ_ac˚ss_begö
)

	)

1530 
	#__ôt_hóp_öã∫Æ_ac˚ss_begö_±r
 
	`ITTNOTIFY_NAME
(
hóp_öã∫Æ_ac˚ss_begö
)

	)

1532 
	#__ôt_hóp_öã∫Æ_ac˚ss_begö
()

	)

1533 
	#__ôt_hóp_öã∫Æ_ac˚ss_begö_±r
 0

	)

1536 
	#__ôt_hóp_öã∫Æ_ac˚ss_begö_±r
 0

	)

1541 
ITTAPI
 
__ôt_hóp_öã∫Æ_ac˚ss_íd
();

1544 #i‚de‡
INTEL_NO_MACRO_BODY


1545 #i‚de‡
INTEL_NO_ITTNOTIFY_API


1546 
ITT_STUBV
(
ITTAPI
, , 
hóp_öã∫Æ_ac˚ss_íd
, ())

1547 
	#__ôt_hóp_öã∫Æ_ac˚ss_íd
 
	`ITTNOTIFY_VOID
(
hóp_öã∫Æ_ac˚ss_íd
)

	)

1548 
	#__ôt_hóp_öã∫Æ_ac˚ss_íd_±r
 
	`ITTNOTIFY_NAME
(
hóp_öã∫Æ_ac˚ss_íd
)

	)

1550 
	#__ôt_hóp_öã∫Æ_ac˚ss_íd
()

	)

1551 
	#__ôt_hóp_öã∫Æ_ac˚ss_íd_±r
 0

	)

1554 
	#__ôt_hóp_öã∫Æ_ac˚ss_íd_±r
 0

	)

1559 
ITTAPI
 
__ôt_hóp_ªc‹d_mem‹y_growth_begö
();

1562 #i‚de‡
INTEL_NO_MACRO_BODY


1563 #i‚de‡
INTEL_NO_ITTNOTIFY_API


1564 
ITT_STUBV
(
ITTAPI
, , 
hóp_ªc‹d_mem‹y_growth_begö
, ())

1565 
	#__ôt_hóp_ªc‹d_mem‹y_growth_begö
 
	`ITTNOTIFY_VOID
(
hóp_ªc‹d_mem‹y_growth_begö
)

	)

1566 
	#__ôt_hóp_ªc‹d_mem‹y_growth_begö_±r
 
	`ITTNOTIFY_NAME
(
hóp_ªc‹d_mem‹y_growth_begö
)

	)

1568 
	#__ôt_hóp_ªc‹d_mem‹y_growth_begö
()

	)

1569 
	#__ôt_hóp_ªc‹d_mem‹y_growth_begö_±r
 0

	)

1572 
	#__ôt_hóp_ªc‹d_mem‹y_growth_begö_±r
 0

	)

1577 
ITTAPI
 
__ôt_hóp_ªc‹d_mem‹y_growth_íd
();

1580 #i‚de‡
INTEL_NO_MACRO_BODY


1581 #i‚de‡
INTEL_NO_ITTNOTIFY_API


1582 
ITT_STUBV
(
ITTAPI
, , 
hóp_ªc‹d_mem‹y_growth_íd
, ())

1583 
	#__ôt_hóp_ªc‹d_mem‹y_growth_íd
 
	`ITTNOTIFY_VOID
(
hóp_ªc‹d_mem‹y_growth_íd
)

	)

1584 
	#__ôt_hóp_ªc‹d_mem‹y_growth_íd_±r
 
	`ITTNOTIFY_NAME
(
hóp_ªc‹d_mem‹y_growth_íd
)

	)

1586 
	#__ôt_hóp_ªc‹d_mem‹y_growth_íd
()

	)

1587 
	#__ôt_hóp_ªc‹d_mem‹y_growth_íd_±r
 0

	)

1590 
	#__ôt_hóp_ªc‹d_mem‹y_growth_íd_±r
 0

	)

1601 
	#__ôt_hóp_Àaks
 0x00000001

	)

1607 
	#__ôt_hóp_growth
 0x00000002

	)

1611 
ITTAPI
 
__ôt_hóp_ª£t_dëe˘i⁄
(
ª£t_mask
);

1614 #i‚de‡
INTEL_NO_MACRO_BODY


1615 #i‚de‡
INTEL_NO_ITTNOTIFY_API


1616 
ITT_STUBV
(
ITTAPI
, , 
hóp_ª£t_dëe˘i⁄
, (
ª£t_mask
))

1617 
	#__ôt_hóp_ª£t_dëe˘i⁄
 
	`ITTNOTIFY_VOID
(
hóp_ª£t_dëe˘i⁄
)

	)

1618 
	#__ôt_hóp_ª£t_dëe˘i⁄_±r
 
	`ITTNOTIFY_NAME
(
hóp_ª£t_dëe˘i⁄
)

	)

1620 
	#__ôt_hóp_ª£t_dëe˘i⁄
()

	)

1621 
	#__ôt_hóp_ª£t_dëe˘i⁄_±r
 0

	)

1624 
	#__ôt_hóp_ª£t_dëe˘i⁄_±r
 0

	)

1629 
ITTAPI
 
__ôt_hóp_ªc‹d
(
ªc‹d_mask
);

1632 #i‚de‡
INTEL_NO_MACRO_BODY


1633 #i‚de‡
INTEL_NO_ITTNOTIFY_API


1634 
ITT_STUBV
(
ITTAPI
, , 
hóp_ªc‹d
, (
ªc‹d_mask
))

1635 
	#__ôt_hóp_ªc‹d
 
	`ITTNOTIFY_VOID
(
hóp_ªc‹d
)

	)

1636 
	#__ôt_hóp_ªc‹d_±r
 
	`ITTNOTIFY_NAME
(
hóp_ªc‹d
)

	)

1638 
	#__ôt_hóp_ªc‹d
()

	)

1639 
	#__ôt_hóp_ªc‹d_±r
 0

	)

1642 
	#__ôt_hóp_ªc‹d_±r
 0

	)

1658 #¥agm®
∑ck
(
push
, 8)

1660 
	s___ôt_domaö


1662 vﬁ©ûê
Êags
;

1663 c⁄° * 
«meA
;

1664 #i‡
deföed
(
UNICODE
Ë|| deföed(
_UNICODE
)

1665 c⁄° 
wch¨_t
* 
«meW
;

1667 * 
«meW
;

1669 
exåa1
;

1670 * 
exåa2
;

1671 
___ôt_domaö
* 
√xt
;

1672 } 
	t__ôt_domaö
;

1674 #¥agm®
∑ck
(
p›
)

1687 #i‡
ITT_PLATFORM
==
ITT_PLATFORM_WIN


1688 
__ôt_domaö
* 
ITTAPI
 
__ôt_domaö_¸óãA
(c⁄° *
«me
);

1689 
__ôt_domaö
* 
ITTAPI
 
__ôt_domaö_¸óãW
(c⁄° 
wch¨_t
 *
«me
);

1690 #i‡
deföed
(
UNICODE
Ë|| deföed(
_UNICODE
)

1691 
	#__ôt_domaö_¸óã
 
__ôt_domaö_¸óãW


	)

1692 
	#__ôt_domaö_¸óã_±r
 
__ôt_domaö_¸óãW_±r


	)

1694 
	#__ôt_domaö_¸óã
 
__ôt_domaö_¸óãA


	)

1695 
	#__ôt_domaö_¸óã_±r
 
__ôt_domaö_¸óãA_±r


	)

1698 
__ôt_domaö
* 
ITTAPI
 
__ôt_domaö_¸óã
(c⁄° *
«me
);

1702 #i‚de‡
INTEL_NO_MACRO_BODY


1703 #i‚de‡
INTEL_NO_ITTNOTIFY_API


1704 #i‡
ITT_PLATFORM
==
ITT_PLATFORM_WIN


1705 
ITT_STUB
(
ITTAPI
, 
__ôt_domaö
*, 
domaö_¸óãA
, (c⁄° *
«me
))

1706 
ITT_STUB
(
ITTAPI
, 
__ôt_domaö
*, 
domaö_¸óãW
, (c⁄° 
wch¨_t
 *
«me
))

1708 
ITT_STUB
(
ITTAPI
, 
__ôt_domaö
*, 
domaö_¸óã
, (c⁄° *
«me
))

1710 #i‡
ITT_PLATFORM
==
ITT_PLATFORM_WIN


1711 
	#__ôt_domaö_¸óãA
 
	`ITTNOTIFY_DATA
(
domaö_¸óãA
)

	)

1712 
	#__ôt_domaö_¸óãA_±r
 
	`ITTNOTIFY_NAME
(
domaö_¸óãA
)

	)

1713 
	#__ôt_domaö_¸óãW
 
	`ITTNOTIFY_DATA
(
domaö_¸óãW
)

	)

1714 
	#__ôt_domaö_¸óãW_±r
 
	`ITTNOTIFY_NAME
(
domaö_¸óãW
)

	)

1716 
	#__ôt_domaö_¸óã
 
	`ITTNOTIFY_DATA
(
domaö_¸óã
)

	)

1717 
	#__ôt_domaö_¸óã_±r
 
	`ITTNOTIFY_NAME
(
domaö_¸óã
)

	)

1720 #i‡
ITT_PLATFORM
==
ITT_PLATFORM_WIN


1721 
	#__ôt_domaö_¸óãA
(
«me
Ë(
__ôt_domaö
*)0

	)

1722 
	#__ôt_domaö_¸óãA_±r
 0

	)

1723 
	#__ôt_domaö_¸óãW
(
«me
Ë(
__ôt_domaö
*)0

	)

1724 
	#__ôt_domaö_¸óãW_±r
 0

	)

1726 
	#__ôt_domaö_¸óã
(
«me
Ë(
__ôt_domaö
*)0

	)

1727 
	#__ôt_domaö_¸óã_±r
 0

	)

1731 #i‡
ITT_PLATFORM
==
ITT_PLATFORM_WIN


1732 
	#__ôt_domaö_¸óãA_±r
 0

	)

1733 
	#__ôt_domaö_¸óãW_±r
 0

	)

1735 
	#__ôt_domaö_¸óã_±r
 0

	)

1749 #¥agm®
∑ck
(
push
, 8)

1751 
	s___ôt_id


1753 
d1
, 
d2
, 
d3
;

1754 } 
	t__ôt_id
;

1756 #¥agm®
∑ck
(
p›
)

1759 c⁄° 
__ôt_id
 
__ôt_nuŒ
 = { 0, 0, 0 };

1772 
ITT_INLINE
 
__ôt_id
 
ITTAPI
 
__ôt_id_make
(* 
addr
, 
exåa
Ë
ITT_INLINE_ATTRIBUTE
;

1773 
ITT_INLINE
 
__ôt_id
 
ITTAPI
 
__ôt_id_make
(* 
addr
, 
exåa
)

1775 
__ôt_id
 
id
 = 
__ôt_nuŒ
;

1776 
id
.
d1
 = ()((
uöçå_t
)
addr
);

1777 
id
.
d2
 = ()
exåa
;

1778 
id
.
d3
 = ()0;

1779  
id
;

1794 
ITTAPI
 
__ôt_id_¸óã
(c⁄° 
__ôt_domaö
 *
domaö
, 
__ôt_id
 
id
);

1797 #i‚de‡
INTEL_NO_MACRO_BODY


1798 #i‚de‡
INTEL_NO_ITTNOTIFY_API


1799 
ITT_STUBV
(
ITTAPI
, , 
id_¸óã
, (c⁄° 
__ôt_domaö
 *
domaö
, 
__ôt_id
 
id
))

1800 
	#__ôt_id_¸óã
(
d
,
x
Ë
	`ITTNOTIFY_VOID_D1
(
id_¸óã
,d,x)

	)

1801 
	#__ôt_id_¸óã_±r
 
	`ITTNOTIFY_NAME
(
id_¸óã
)

	)

1803 
	#__ôt_id_¸óã
(
domaö
,
id
)

	)

1804 
	#__ôt_id_¸óã_±r
 0

	)

1807 
	#__ôt_id_¸óã_±r
 0

	)

1821 
ITTAPI
 
__ôt_id_de°roy
(c⁄° 
__ôt_domaö
 *
domaö
, 
__ôt_id
 
id
);

1824 #i‚de‡
INTEL_NO_MACRO_BODY


1825 #i‚de‡
INTEL_NO_ITTNOTIFY_API


1826 
ITT_STUBV
(
ITTAPI
, , 
id_de°roy
, (c⁄° 
__ôt_domaö
 *
domaö
, 
__ôt_id
 
id
))

1827 
	#__ôt_id_de°roy
(
d
,
x
Ë
	`ITTNOTIFY_VOID_D1
(
id_de°roy
,d,x)

	)

1828 
	#__ôt_id_de°roy_±r
 
	`ITTNOTIFY_NAME
(
id_de°roy
)

	)

1830 
	#__ôt_id_de°roy
(
domaö
,
id
)

	)

1831 
	#__ôt_id_de°roy_±r
 0

	)

1834 
	#__ôt_id_de°roy_±r
 0

	)

1847 #¥agm®
∑ck
(
push
, 8)

1849 
	s___ôt_°rög_h™dÀ


1851 c⁄° * 
°rA
;

1852 #i‡
deföed
(
UNICODE
Ë|| deföed(
_UNICODE
)

1853 c⁄° 
wch¨_t
* 
°rW
;

1855 * 
°rW
;

1857 
exåa1
;

1858 * 
exåa2
;

1859 
___ôt_°rög_h™dÀ
* 
√xt
;

1860 } 
	t__ôt_°rög_h™dÀ
;

1862 #¥agm®
∑ck
(
p›
)

1876 #i‡
ITT_PLATFORM
==
ITT_PLATFORM_WIN


1877 
__ôt_°rög_h™dÀ
* 
ITTAPI
 
__ôt_°rög_h™dÀ_¸óãA
(c⁄° *
«me
);

1878 
__ôt_°rög_h™dÀ
* 
ITTAPI
 
__ôt_°rög_h™dÀ_¸óãW
(c⁄° 
wch¨_t
 *
«me
);

1879 #i‡
deföed
(
UNICODE
Ë|| deföed(
_UNICODE
)

1880 
	#__ôt_°rög_h™dÀ_¸óã
 
__ôt_°rög_h™dÀ_¸óãW


	)

1881 
	#__ôt_°rög_h™dÀ_¸óã_±r
 
__ôt_°rög_h™dÀ_¸óãW_±r


	)

1883 
	#__ôt_°rög_h™dÀ_¸óã
 
__ôt_°rög_h™dÀ_¸óãA


	)

1884 
	#__ôt_°rög_h™dÀ_¸óã_±r
 
__ôt_°rög_h™dÀ_¸óãA_±r


	)

1887 
__ôt_°rög_h™dÀ
* 
ITTAPI
 
__ôt_°rög_h™dÀ_¸óã
(c⁄° *
«me
);

1891 #i‚de‡
INTEL_NO_MACRO_BODY


1892 #i‚de‡
INTEL_NO_ITTNOTIFY_API


1893 #i‡
ITT_PLATFORM
==
ITT_PLATFORM_WIN


1894 
ITT_STUB
(
ITTAPI
, 
__ôt_°rög_h™dÀ
*, 
°rög_h™dÀ_¸óãA
, (c⁄° *
«me
))

1895 
ITT_STUB
(
ITTAPI
, 
__ôt_°rög_h™dÀ
*, 
°rög_h™dÀ_¸óãW
, (c⁄° 
wch¨_t
 *
«me
))

1897 
ITT_STUB
(
ITTAPI
, 
__ôt_°rög_h™dÀ
*, 
°rög_h™dÀ_¸óã
, (c⁄° *
«me
))

1899 #i‡
ITT_PLATFORM
==
ITT_PLATFORM_WIN


1900 
	#__ôt_°rög_h™dÀ_¸óãA
 
	`ITTNOTIFY_DATA
(
°rög_h™dÀ_¸óãA
)

	)

1901 
	#__ôt_°rög_h™dÀ_¸óãA_±r
 
	`ITTNOTIFY_NAME
(
°rög_h™dÀ_¸óãA
)

	)

1902 
	#__ôt_°rög_h™dÀ_¸óãW
 
	`ITTNOTIFY_DATA
(
°rög_h™dÀ_¸óãW
)

	)

1903 
	#__ôt_°rög_h™dÀ_¸óãW_±r
 
	`ITTNOTIFY_NAME
(
°rög_h™dÀ_¸óãW
)

	)

1905 
	#__ôt_°rög_h™dÀ_¸óã
 
	`ITTNOTIFY_DATA
(
°rög_h™dÀ_¸óã
)

	)

1906 
	#__ôt_°rög_h™dÀ_¸óã_±r
 
	`ITTNOTIFY_NAME
(
°rög_h™dÀ_¸óã
)

	)

1909 #i‡
ITT_PLATFORM
==
ITT_PLATFORM_WIN


1910 
	#__ôt_°rög_h™dÀ_¸óãA
(
«me
Ë(
__ôt_°rög_h™dÀ
*)0

	)

1911 
	#__ôt_°rög_h™dÀ_¸óãA_±r
 0

	)

1912 
	#__ôt_°rög_h™dÀ_¸óãW
(
«me
Ë(
__ôt_°rög_h™dÀ
*)0

	)

1913 
	#__ôt_°rög_h™dÀ_¸óãW_±r
 0

	)

1915 
	#__ôt_°rög_h™dÀ_¸óã
(
«me
Ë(
__ôt_°rög_h™dÀ
*)0

	)

1916 
	#__ôt_°rög_h™dÀ_¸óã_±r
 0

	)

1920 #i‡
ITT_PLATFORM
==
ITT_PLATFORM_WIN


1921 
	#__ôt_°rög_h™dÀ_¸óãA_±r
 0

	)

1922 
	#__ôt_°rög_h™dÀ_¸óãW_±r
 0

	)

1924 
	#__ôt_°rög_h™dÀ_¸óã_±r
 0

	)

1931 
	t__ôt_time°amp
;

1934 c⁄° 
__ôt_time°amp
 
__ôt_time°amp_n⁄e
 = (__itt_timestamp)-1LL;

1945 
__ôt_time°amp
 
ITTAPI
 
__ôt_gë_time°amp
();

1948 #i‚de‡
INTEL_NO_MACRO_BODY


1949 #i‚de‡
INTEL_NO_ITTNOTIFY_API


1950 
ITT_STUB
(
ITTAPI
, 
__ôt_time°amp
, 
gë_time°amp
, ())

1951 
	#__ôt_gë_time°amp
 
	`ITTNOTIFY_DATA
(
gë_time°amp
)

	)

1952 
	#__ôt_gë_time°amp_±r
 
	`ITTNOTIFY_NAME
(
gë_time°amp
)

	)

1954 
	#__ôt_gë_time°amp
()

	)

1955 
	#__ôt_gë_time°amp_±r
 0

	)

1958 
	#__ôt_gë_time°amp_±r
 0

	)

1982 
ITTAPI
 
__ôt_ªgi⁄_begö
(c⁄° 
__ôt_domaö
 *
domaö
, 
__ôt_id
 
id
, __ôt_id 
∑ª¡id
, 
__ôt_°rög_h™dÀ
 *
«me
);

1993 
ITTAPI
 
__ôt_ªgi⁄_íd
(c⁄° 
__ôt_domaö
 *
domaö
, 
__ôt_id
 
id
);

1996 #i‚de‡
INTEL_NO_MACRO_BODY


1997 #i‚de‡
INTEL_NO_ITTNOTIFY_API


1998 
ITT_STUBV
(
ITTAPI
, , 
ªgi⁄_begö
, (c⁄° 
__ôt_domaö
 *
domaö
, 
__ôt_id
 
id
, __ôt_id 
∑ª¡id
, 
__ôt_°rög_h™dÀ
 *
«me
))

1999 
ITT_STUBV
(
ITTAPI
, , 
ªgi⁄_íd
, (c⁄° 
__ôt_domaö
 *
domaö
, 
__ôt_id
 
id
))

2000 
	#__ôt_ªgi⁄_begö
(
d
,
x
,
y
,
z
Ë
	`ITTNOTIFY_VOID_D3
(
ªgi⁄_begö
,d,x,y,z)

	)

2001 
	#__ôt_ªgi⁄_begö_±r
 
	`ITTNOTIFY_NAME
(
ªgi⁄_begö
)

	)

2002 
	#__ôt_ªgi⁄_íd
(
d
,
x
Ë
	`ITTNOTIFY_VOID_D1
(
ªgi⁄_íd
,d,x)

	)

2003 
	#__ôt_ªgi⁄_íd_±r
 
	`ITTNOTIFY_NAME
(
ªgi⁄_íd
)

	)

2005 
	#__ôt_ªgi⁄_begö
(
d
,
x
,
y
,
z
)

	)

2006 
	#__ôt_ªgi⁄_begö_±r
 0

	)

2007 
	#__ôt_ªgi⁄_íd
(
d
,
x
)

	)

2008 
	#__ôt_ªgi⁄_íd_±r
 0

	)

2011 
	#__ôt_ªgi⁄_begö_±r
 0

	)

2012 
	#__ôt_ªgi⁄_íd_±r
 0

	)

2035 
ITTAPI
 
__ôt_‰ame_begö_v3
(c⁄° 
__ôt_domaö
 *
domaö
, 
__ôt_id
 *
id
);

2046 
ITTAPI
 
__ôt_‰ame_íd_v3
(c⁄° 
__ôt_domaö
 *
domaö
, 
__ôt_id
 *
id
);

2061 
ITTAPI
 
__ôt_‰ame_submô_v3
(c⁄° 
__ôt_domaö
 *
domaö
, 
__ôt_id
 *
id
,

2062 
__ôt_time°amp
 
begö
, __ôt_time°am∞
íd
);

2065 #i‚de‡
INTEL_NO_MACRO_BODY


2066 #i‚de‡
INTEL_NO_ITTNOTIFY_API


2067 
ITT_STUBV
(
ITTAPI
, , 
‰ame_begö_v3
, (c⁄° 
__ôt_domaö
 *
domaö
, 
__ôt_id
 *
id
))

2068 
ITT_STUBV
(
ITTAPI
, , 
‰ame_íd_v3
, (c⁄° 
__ôt_domaö
 *
domaö
, 
__ôt_id
 *
id
))

2069 
ITT_STUBV
(
ITTAPI
, , 
‰ame_submô_v3
, (c⁄° 
__ôt_domaö
 *
domaö
, 
__ôt_id
 *
id
, 
__ôt_time°amp
 
begö
, __ôt_time°am∞
íd
))

2070 
	#__ôt_‰ame_begö_v3
(
d
,
x
Ë
	`ITTNOTIFY_VOID_D1
(
‰ame_begö_v3
,d,x)

	)

2071 
	#__ôt_‰ame_begö_v3_±r
 
	`ITTNOTIFY_NAME
(
‰ame_begö_v3
)

	)

2072 
	#__ôt_‰ame_íd_v3
(
d
,
x
Ë
	`ITTNOTIFY_VOID_D1
(
‰ame_íd_v3
,d,x)

	)

2073 
	#__ôt_‰ame_íd_v3_±r
 
	`ITTNOTIFY_NAME
(
‰ame_íd_v3
)

	)

2074 
	#__ôt_‰ame_submô_v3
(
d
,
x
,
b
,
e
Ë
	`ITTNOTIFY_VOID_D3
(
‰ame_submô_v3
,d,x,b,e)

	)

2075 
	#__ôt_‰ame_submô_v3_±r
 
	`ITTNOTIFY_NAME
(
‰ame_submô_v3
)

	)

2077 
	#__ôt_‰ame_begö_v3
(
domaö
,
id
)

	)

2078 
	#__ôt_‰ame_begö_v3_±r
 0

	)

2079 
	#__ôt_‰ame_íd_v3
(
domaö
,
id
)

	)

2080 
	#__ôt_‰ame_íd_v3_±r
 0

	)

2081 
	#__ôt_‰ame_submô_v3
(
domaö
,
id
,
begö
,
íd
)

	)

2082 
	#__ôt_‰ame_submô_v3_±r
 0

	)

2085 
	#__ôt_‰ame_begö_v3_±r
 0

	)

2086 
	#__ôt_‰ame_íd_v3_±r
 0

	)

2087 
	#__ôt_‰ame_submô_v3_±r
 0

	)

2108 
ITTAPI
 
__ôt_èsk_group
(c⁄° 
__ôt_domaö
 *
domaö
, 
__ôt_id
 
id
, __ôt_id 
∑ª¡id
, 
__ôt_°rög_h™dÀ
 *
«me
);

2111 #i‚de‡
INTEL_NO_MACRO_BODY


2112 #i‚de‡
INTEL_NO_ITTNOTIFY_API


2113 
ITT_STUBV
(
ITTAPI
, , 
èsk_group
, (c⁄° 
__ôt_domaö
 *
domaö
, 
__ôt_id
 
id
, __ôt_id 
∑ª¡id
, 
__ôt_°rög_h™dÀ
 *
«me
))

2114 
	#__ôt_èsk_group
(
d
,
x
,
y
,
z
Ë
	`ITTNOTIFY_VOID_D3
(
èsk_group
,d,x,y,z)

	)

2115 
	#__ôt_èsk_group_±r
 
	`ITTNOTIFY_NAME
(
èsk_group
)

	)

2117 
	#__ôt_èsk_group
(
d
,
x
,
y
,
z
)

	)

2118 
	#__ôt_èsk_group_±r
 0

	)

2121 
	#__ôt_èsk_group_±r
 0

	)

2154 
ITTAPI
 
__ôt_èsk_begö
(c⁄° 
__ôt_domaö
 *
domaö
, 
__ôt_id
 
èskid
, __ôt_id 
∑ª¡id
, 
__ôt_°rög_h™dÀ
 *
«me
);

2164 
ITTAPI
 
__ôt_èsk_begö_‚
(c⁄° 
__ôt_domaö
 *
domaö
, 
__ôt_id
 
èskid
, __ôt_id 
∑ª¡id
, * 
‚
);

2171 
ITTAPI
 
__ôt_èsk_íd
(c⁄° 
__ôt_domaö
 *
domaö
);

2174 #i‚de‡
INTEL_NO_MACRO_BODY


2175 #i‚de‡
INTEL_NO_ITTNOTIFY_API


2176 
ITT_STUBV
(
ITTAPI
, , 
èsk_begö
, (c⁄° 
__ôt_domaö
 *
domaö
, 
__ôt_id
 
id
, __ôt_id 
∑ª¡id
, 
__ôt_°rög_h™dÀ
 *
«me
))

2177 
ITT_STUBV
(
ITTAPI
, , 
èsk_begö_‚
, (c⁄° 
__ôt_domaö
 *
domaö
, 
__ôt_id
 
id
, __ôt_id 
∑ª¡id
, * 
‚
))

2178 
ITT_STUBV
(
ITTAPI
, , 
èsk_íd
, (c⁄° 
__ôt_domaö
 *
domaö
))

2179 
	#__ôt_èsk_begö
(
d
,
x
,
y
,
z
Ë
	`ITTNOTIFY_VOID_D3
(
èsk_begö
,d,x,y,z)

	)

2180 
	#__ôt_èsk_begö_±r
 
	`ITTNOTIFY_NAME
(
èsk_begö
)

	)

2181 
	#__ôt_èsk_begö_‚
(
d
,
x
,
y
,
z
Ë
	`ITTNOTIFY_VOID_D3
(
èsk_begö_‚
,d,x,y,z)

	)

2182 
	#__ôt_èsk_begö_‚_±r
 
	`ITTNOTIFY_NAME
(
èsk_begö_‚
)

	)

2183 
	#__ôt_èsk_íd
(
d
Ë
	`ITTNOTIFY_VOID_D0
(
èsk_íd
,d)

	)

2184 
	#__ôt_èsk_íd_±r
 
	`ITTNOTIFY_NAME
(
èsk_íd
)

	)

2186 
	#__ôt_èsk_begö
(
domaö
,
id
,
∑ª¡id
,
«me
)

	)

2187 
	#__ôt_èsk_begö_±r
 0

	)

2188 
	#__ôt_èsk_begö_‚
(
domaö
,
id
,
∑ª¡id
,
‚
)

	)

2189 
	#__ôt_èsk_begö_‚_±r
 0

	)

2190 
	#__ôt_èsk_íd
(
domaö
)

	)

2191 
	#__ôt_èsk_íd_±r
 0

	)

2194 
	#__ôt_èsk_begö_±r
 0

	)

2195 
	#__ôt_èsk_begö_‚_±r
 0

	)

2196 
	#__ôt_èsk_íd_±r
 0

	)

2221 
ITTAPI
 
__ôt_cou¡î_öc_v3
(c⁄° 
__ôt_domaö
 *
domaö
, 
__ôt_°rög_h™dÀ
 *
«me
);

2231 
ITTAPI
 
__ôt_cou¡î_öc_dñè_v3
(c⁄° 
__ôt_domaö
 *
domaö
, 
__ôt_°rög_h™dÀ
 *
«me
, 
dñè
);

2234 #i‚de‡
INTEL_NO_MACRO_BODY


2235 #i‚de‡
INTEL_NO_ITTNOTIFY_API


2236 
ITT_STUBV
(
ITTAPI
, , 
cou¡î_öc_v3
, (c⁄° 
__ôt_domaö
 *
domaö
, 
__ôt_°rög_h™dÀ
 *
«me
))

2237 
ITT_STUBV
(
ITTAPI
, , 
cou¡î_öc_dñè_v3
, (c⁄° 
__ôt_domaö
 *
domaö
, 
__ôt_°rög_h™dÀ
 *
«me
, 
dñè
))

2238 
	#__ôt_cou¡î_öc_v3
(
d
,
x
Ë
	`ITTNOTIFY_VOID_D1
(
cou¡î_öc_v3
,d,x)

	)

2239 
	#__ôt_cou¡î_öc_v3_±r
 
	`ITTNOTIFY_NAME
(
cou¡î_öc_v3
)

	)

2240 
	#__ôt_cou¡î_öc_dñè_v3
(
d
,
x
,
y
Ë
	`ITTNOTIFY_VOID_D2
(
cou¡î_öc_dñè_v3
,d,x,y)

	)

2241 
	#__ôt_cou¡î_öc_dñè_v3_±r
 
	`ITTNOTIFY_NAME
(
cou¡î_öc_dñè_v3
)

	)

2243 
	#__ôt_cou¡î_öc_v3
(
domaö
,
«me
)

	)

2244 
	#__ôt_cou¡î_öc_v3_±r
 0

	)

2245 
	#__ôt_cou¡î_öc_dñè_v3
(
domaö
,
«me
,
dñè
)

	)

2246 
	#__ôt_cou¡î_öc_dñè_v3_±r
 0

	)

2249 
	#__ôt_cou¡î_öc_v3_±r
 0

	)

2250 
	#__ôt_cou¡î_öc_dñè_v3_±r
 0

	)

2269 
__ôt_sc›e_unknown
 = 0,

2270 
__ôt_sc›e_globÆ
,

2271 
__ôt_sc›e_åack_group
,

2272 
__ôt_sc›e_åack
,

2273 
__ôt_sc›e_èsk
,

2274 
__ôt_sc›e_m¨kî


2275 } 
	t__ôt_sc›e
;

2278 
	#__ôt_m¨kî_sc›e_unknown
 
__ôt_sc›e_unknown


	)

2279 
	#__ôt_m¨kî_sc›e_globÆ
 
__ôt_sc›e_globÆ


	)

2280 
	#__ôt_m¨kî_sc›e_¥o˚ss
 
__ôt_sc›e_åack_group


	)

2281 
	#__ôt_m¨kî_sc›e_thªad
 
__ôt_sc›e_åack


	)

2282 
	#__ôt_m¨kî_sc›e_èsk
 
__ôt_sc›e_èsk


	)

2293 
ITTAPI
 
__ôt_m¨kî
(c⁄° 
__ôt_domaö
 *
domaö
, 
__ôt_id
 
id
, 
__ôt_°rög_h™dÀ
 *
«me
, 
__ôt_sc›e
 
sc›e
);

2296 #i‚de‡
INTEL_NO_MACRO_BODY


2297 #i‚de‡
INTEL_NO_ITTNOTIFY_API


2298 
ITT_STUBV
(
ITTAPI
, , 
m¨kî
, (c⁄° 
__ôt_domaö
 *
domaö
, 
__ôt_id
 
id
, 
__ôt_°rög_h™dÀ
 *
«me
, 
__ôt_sc›e
 
sc›e
))

2299 
	#__ôt_m¨kî
(
d
,
x
,
y
,
z
Ë
	`ITTNOTIFY_VOID_D3
(
m¨kî
,d,x,y,z)

	)

2300 
	#__ôt_m¨kî_±r
 
	`ITTNOTIFY_NAME
(
m¨kî
)

	)

2302 
	#__ôt_m¨kî
(
domaö
,
id
,
«me
,
sc›e
)

	)

2303 
	#__ôt_m¨kî_±r
 0

	)

2306 
	#__ôt_m¨kî_±r
 0

	)

2330 
__ôt_mëad©a_unknown
 = 0,

2331 
__ôt_mëad©a_u64
,

2332 
__ôt_mëad©a_s64
,

2333 
__ôt_mëad©a_u32
,

2334 
__ôt_mëad©a_s32
,

2335 
__ôt_mëad©a_u16
,

2336 
__ôt_mëad©a_s16
,

2337 
__ôt_mëad©a_Êﬂt
,

2338 
__ôt_mëad©a_doubÀ


2339 } 
	t__ôt_mëad©a_ty≥
;

2351 
ITTAPI
 
__ôt_mëad©a_add
(c⁄° 
__ôt_domaö
 *
domaö
, 
__ôt_id
 
id
, 
__ôt_°rög_h™dÀ
 *
key
, 
__ôt_mëad©a_ty≥
 
ty≥
, 
size_t
 
cou¡
, *
d©a
);

2354 #i‚de‡
INTEL_NO_MACRO_BODY


2355 #i‚de‡
INTEL_NO_ITTNOTIFY_API


2356 
ITT_STUBV
(
ITTAPI
, , 
mëad©a_add
, (c⁄° 
__ôt_domaö
 *
domaö
, 
__ôt_id
 
id
, 
__ôt_°rög_h™dÀ
 *
key
, 
__ôt_mëad©a_ty≥
 
ty≥
, 
size_t
 
cou¡
, *
d©a
))

2357 
	#__ôt_mëad©a_add
(
d
,
x
,
y
,
z
,
a
,
b
Ë
	`ITTNOTIFY_VOID_D5
(
mëad©a_add
,d,x,y,z,a,b)

	)

2358 
	#__ôt_mëad©a_add_±r
 
	`ITTNOTIFY_NAME
(
mëad©a_add
)

	)

2360 
	#__ôt_mëad©a_add
(
d
,
x
,
y
,
z
,
a
,
b
)

	)

2361 
	#__ôt_mëad©a_add_±r
 0

	)

2364 
	#__ôt_mëad©a_add_±r
 0

	)

2377 #i‡
ITT_PLATFORM
==
ITT_PLATFORM_WIN


2378 
ITTAPI
 
__ôt_mëad©a_°r_addA
(c⁄° 
__ôt_domaö
 *
domaö
, 
__ôt_id
 
id
, 
__ôt_°rög_h™dÀ
 *
key
, c⁄° *
d©a
, 
size_t
 
Àngth
);

2379 
ITTAPI
 
__ôt_mëad©a_°r_addW
(c⁄° 
__ôt_domaö
 *
domaö
, 
__ôt_id
 
id
, 
__ôt_°rög_h™dÀ
 *
key
, c⁄° 
wch¨_t
 *
d©a
, 
size_t
 
Àngth
);

2380 #i‡
deföed
(
UNICODE
Ë|| deföed(
_UNICODE
)

2381 
	#__ôt_mëad©a_°r_add
 
__ôt_mëad©a_°r_addW


	)

2382 
	#__ôt_mëad©a_°r_add_±r
 
__ôt_mëad©a_°r_addW_±r


	)

2384 
	#__ôt_mëad©a_°r_add
 
__ôt_mëad©a_°r_addA


	)

2385 
	#__ôt_mëad©a_°r_add_±r
 
__ôt_mëad©a_°r_addA_±r


	)

2388 
ITTAPI
 
__ôt_mëad©a_°r_add
(c⁄° 
__ôt_domaö
 *
domaö
, 
__ôt_id
 
id
, 
__ôt_°rög_h™dÀ
 *
key
, c⁄° *
d©a
, 
size_t
 
Àngth
);

2392 #i‚de‡
INTEL_NO_MACRO_BODY


2393 #i‚de‡
INTEL_NO_ITTNOTIFY_API


2394 #i‡
ITT_PLATFORM
==
ITT_PLATFORM_WIN


2395 
ITT_STUBV
(
ITTAPI
, , 
mëad©a_°r_addA
, (c⁄° 
__ôt_domaö
 *
domaö
, 
__ôt_id
 
id
, 
__ôt_°rög_h™dÀ
 *
key
, c⁄° *
d©a
, 
size_t
 
Àngth
))

2396 
ITT_STUBV
(
ITTAPI
, , 
mëad©a_°r_addW
, (c⁄° 
__ôt_domaö
 *
domaö
, 
__ôt_id
 
id
, 
__ôt_°rög_h™dÀ
 *
key
, c⁄° 
wch¨_t
 *
d©a
, 
size_t
 
Àngth
))

2398 
ITT_STUBV
(
ITTAPI
, , 
mëad©a_°r_add
, (c⁄° 
__ôt_domaö
 *
domaö
, 
__ôt_id
 
id
, 
__ôt_°rög_h™dÀ
 *
key
, c⁄° *
d©a
, 
size_t
 
Àngth
))

2400 #i‡
ITT_PLATFORM
==
ITT_PLATFORM_WIN


2401 
	#__ôt_mëad©a_°r_addA
(
d
,
x
,
y
,
z
,
a
Ë
	`ITTNOTIFY_VOID_D4
(
mëad©a_°r_addA
,d,x,y,z,a)

	)

2402 
	#__ôt_mëad©a_°r_addA_±r
 
	`ITTNOTIFY_NAME
(
mëad©a_°r_addA
)

	)

2403 
	#__ôt_mëad©a_°r_addW
(
d
,
x
,
y
,
z
,
a
Ë
	`ITTNOTIFY_VOID_D4
(
mëad©a_°r_addW
,d,x,y,z,a)

	)

2404 
	#__ôt_mëad©a_°r_addW_±r
 
	`ITTNOTIFY_NAME
(
mëad©a_°r_addW
)

	)

2406 
	#__ôt_mëad©a_°r_add
(
d
,
x
,
y
,
z
,
a
Ë
	`ITTNOTIFY_VOID_D4
(
mëad©a_°r_add
,d,x,y,z,a)

	)

2407 
	#__ôt_mëad©a_°r_add_±r
 
	`ITTNOTIFY_NAME
(
mëad©a_°r_add
)

	)

2410 #i‡
ITT_PLATFORM
==
ITT_PLATFORM_WIN


2411 
	#__ôt_mëad©a_°r_addA
(
d
,
x
,
y
,
z
,
a
)

	)

2412 
	#__ôt_mëad©a_°r_addA_±r
 0

	)

2413 
	#__ôt_mëad©a_°r_addW
(
d
,
x
,
y
,
z
,
a
)

	)

2414 
	#__ôt_mëad©a_°r_addW_±r
 0

	)

2416 
	#__ôt_mëad©a_°r_add
(
d
,
x
,
y
,
z
,
a
)

	)

2417 
	#__ôt_mëad©a_°r_add_±r
 0

	)

2421 #i‡
ITT_PLATFORM
==
ITT_PLATFORM_WIN


2422 
	#__ôt_mëad©a_°r_addA_±r
 0

	)

2423 
	#__ôt_mëad©a_°r_addW_±r
 0

	)

2425 
	#__ôt_mëad©a_°r_add_±r
 0

	)

2443 
ITTAPI
 
__ôt_mëad©a_add_wôh_sc›e
(c⁄° 
__ôt_domaö
 *
domaö
, 
__ôt_sc›e
 
sc›e
, 
__ôt_°rög_h™dÀ
 *
key
, 
__ôt_mëad©a_ty≥
 
ty≥
, 
size_t
 
cou¡
, *
d©a
);

2446 #i‚de‡
INTEL_NO_MACRO_BODY


2447 #i‚de‡
INTEL_NO_ITTNOTIFY_API


2448 
ITT_STUBV
(
ITTAPI
, , 
mëad©a_add_wôh_sc›e
, (c⁄° 
__ôt_domaö
 *
domaö
, 
__ôt_sc›e
 
sc›e
, 
__ôt_°rög_h™dÀ
 *
key
, 
__ôt_mëad©a_ty≥
 
ty≥
, 
size_t
 
cou¡
, *
d©a
))

2449 
	#__ôt_mëad©a_add_wôh_sc›e
(
d
,
x
,
y
,
z
,
a
,
b
Ë
	`ITTNOTIFY_VOID_D5
(
mëad©a_add_wôh_sc›e
,d,x,y,z,a,b)

	)

2450 
	#__ôt_mëad©a_add_wôh_sc›e_±r
 
	`ITTNOTIFY_NAME
(
mëad©a_add_wôh_sc›e
)

	)

2452 
	#__ôt_mëad©a_add_wôh_sc›e
(
d
,
x
,
y
,
z
,
a
,
b
)

	)

2453 
	#__ôt_mëad©a_add_wôh_sc›e_±r
 0

	)

2456 
	#__ôt_mëad©a_add_wôh_sc›e_±r
 0

	)

2472 #i‡
ITT_PLATFORM
==
ITT_PLATFORM_WIN


2473 
ITTAPI
 
__ôt_mëad©a_°r_add_wôh_sc›eA
(c⁄° 
__ôt_domaö
 *
domaö
, 
__ôt_sc›e
 
sc›e
, 
__ôt_°rög_h™dÀ
 *
key
, c⁄° *
d©a
, 
size_t
 
Àngth
);

2474 
ITTAPI
 
__ôt_mëad©a_°r_add_wôh_sc›eW
(c⁄° 
__ôt_domaö
 *
domaö
, 
__ôt_sc›e
 
sc›e
, 
__ôt_°rög_h™dÀ
 *
key
, c⁄° 
wch¨_t
 *
d©a
, 
size_t
 
Àngth
);

2475 #i‡
deföed
(
UNICODE
Ë|| deföed(
_UNICODE
)

2476 
	#__ôt_mëad©a_°r_add_wôh_sc›e
 
__ôt_mëad©a_°r_add_wôh_sc›eW


	)

2477 
	#__ôt_mëad©a_°r_add_wôh_sc›e_±r
 
__ôt_mëad©a_°r_add_wôh_sc›eW_±r


	)

2479 
	#__ôt_mëad©a_°r_add_wôh_sc›e
 
__ôt_mëad©a_°r_add_wôh_sc›eA


	)

2480 
	#__ôt_mëad©a_°r_add_wôh_sc›e_±r
 
__ôt_mëad©a_°r_add_wôh_sc›eA_±r


	)

2483 
ITTAPI
 
__ôt_mëad©a_°r_add_wôh_sc›e
(c⁄° 
__ôt_domaö
 *
domaö
, 
__ôt_sc›e
 
sc›e
, 
__ôt_°rög_h™dÀ
 *
key
, c⁄° *
d©a
, 
size_t
 
Àngth
);

2487 #i‚de‡
INTEL_NO_MACRO_BODY


2488 #i‚de‡
INTEL_NO_ITTNOTIFY_API


2489 #i‡
ITT_PLATFORM
==
ITT_PLATFORM_WIN


2490 
ITT_STUBV
(
ITTAPI
, , 
mëad©a_°r_add_wôh_sc›eA
, (c⁄° 
__ôt_domaö
 *
domaö
, 
__ôt_sc›e
 
sc›e
, 
__ôt_°rög_h™dÀ
 *
key
, c⁄° *
d©a
, 
size_t
 
Àngth
))

2491 
ITT_STUBV
(
ITTAPI
, , 
mëad©a_°r_add_wôh_sc›eW
, (c⁄° 
__ôt_domaö
 *
domaö
, 
__ôt_sc›e
 
sc›e
, 
__ôt_°rög_h™dÀ
 *
key
, c⁄° 
wch¨_t
 *
d©a
, 
size_t
 
Àngth
))

2493 
ITT_STUBV
(
ITTAPI
, , 
mëad©a_°r_add_wôh_sc›e
, (c⁄° 
__ôt_domaö
 *
domaö
, 
__ôt_sc›e
 
sc›e
, 
__ôt_°rög_h™dÀ
 *
key
, c⁄° *
d©a
, 
size_t
 
Àngth
))

2495 #i‡
ITT_PLATFORM
==
ITT_PLATFORM_WIN


2496 
	#__ôt_mëad©a_°r_add_wôh_sc›eA
(
d
,
x
,
y
,
z
,
a
Ë
	`ITTNOTIFY_VOID_D4
(
mëad©a_°r_add_wôh_sc›eA
,d,x,y,z,a)

	)

2497 
	#__ôt_mëad©a_°r_add_wôh_sc›eA_±r
 
	`ITTNOTIFY_NAME
(
mëad©a_°r_add_wôh_sc›eA
)

	)

2498 
	#__ôt_mëad©a_°r_add_wôh_sc›eW
(
d
,
x
,
y
,
z
,
a
Ë
	`ITTNOTIFY_VOID_D4
(
mëad©a_°r_add_wôh_sc›eW
,d,x,y,z,a)

	)

2499 
	#__ôt_mëad©a_°r_add_wôh_sc›eW_±r
 
	`ITTNOTIFY_NAME
(
mëad©a_°r_add_wôh_sc›eW
)

	)

2501 
	#__ôt_mëad©a_°r_add_wôh_sc›e
(
d
,
x
,
y
,
z
,
a
Ë
	`ITTNOTIFY_VOID_D4
(
mëad©a_°r_add_wôh_sc›e
,d,x,y,z,a)

	)

2502 
	#__ôt_mëad©a_°r_add_wôh_sc›e_±r
 
	`ITTNOTIFY_NAME
(
mëad©a_°r_add_wôh_sc›e
)

	)

2505 #i‡
ITT_PLATFORM
==
ITT_PLATFORM_WIN


2506 
	#__ôt_mëad©a_°r_add_wôh_sc›eA
(
d
,
x
,
y
,
z
,
a
)

	)

2507 
	#__ôt_mëad©a_°r_add_wôh_sc›eA_±r
 0

	)

2508 
	#__ôt_mëad©a_°r_add_wôh_sc›eW
(
d
,
x
,
y
,
z
,
a
)

	)

2509 
	#__ôt_mëad©a_°r_add_wôh_sc›eW_±r
 0

	)

2511 
	#__ôt_mëad©a_°r_add_wôh_sc›e
(
d
,
x
,
y
,
z
,
a
)

	)

2512 
	#__ôt_mëad©a_°r_add_wôh_sc›e_±r
 0

	)

2516 #i‡
ITT_PLATFORM
==
ITT_PLATFORM_WIN


2517 
	#__ôt_mëad©a_°r_add_wôh_sc›eA_±r
 0

	)

2518 
	#__ôt_mëad©a_°r_add_wôh_sc›eW_±r
 0

	)

2520 
	#__ôt_mëad©a_°r_add_wôh_sc›e_±r
 0

	)

2546 
__ôt_ªœti⁄_is_unknown
 = 0,

2547 
__ôt_ªœti⁄_is_dïídít_⁄
,

2548 
__ôt_ªœti⁄_is_siblög_of
,

2549 
__ôt_ªœti⁄_is_∑ª¡_of
,

2550 
__ôt_ªœti⁄_is_c⁄töu©i⁄_of
,

2551 
__ôt_ªœti⁄_is_chûd_of
,

2552 
__ôt_ªœti⁄_is_c⁄töued_by
,

2553 
__ôt_ªœti⁄_is_¥ede˚ss‹_to


2554 } 
	t__ôt_ªœti⁄
;

2564 
ITTAPI
 
__ôt_ªœti⁄_add_to_cuºít
(c⁄° 
__ôt_domaö
 *
domaö
, 
__ôt_ªœti⁄
 
ªœti⁄
, 
__ôt_id
 
èû
);

2574 
ITTAPI
 
__ôt_ªœti⁄_add
(c⁄° 
__ôt_domaö
 *
domaö
, 
__ôt_id
 
hód
, 
__ôt_ªœti⁄
 
ªœti⁄
, __ôt_id 
èû
);

2577 #i‚de‡
INTEL_NO_MACRO_BODY


2578 #i‚de‡
INTEL_NO_ITTNOTIFY_API


2579 
ITT_STUBV
(
ITTAPI
, , 
ªœti⁄_add_to_cuºít
, (c⁄° 
__ôt_domaö
 *
domaö
, 
__ôt_ªœti⁄
 
ªœti⁄
, 
__ôt_id
 
èû
))

2580 
ITT_STUBV
(
ITTAPI
, , 
ªœti⁄_add
, (c⁄° 
__ôt_domaö
 *
domaö
, 
__ôt_id
 
hód
, 
__ôt_ªœti⁄
 
ªœti⁄
, __ôt_id 
èû
))

2581 
	#__ôt_ªœti⁄_add_to_cuºít
(
d
,
x
,
y
Ë
	`ITTNOTIFY_VOID_D2
(
ªœti⁄_add_to_cuºít
,d,x,y)

	)

2582 
	#__ôt_ªœti⁄_add_to_cuºít_±r
 
	`ITTNOTIFY_NAME
(
ªœti⁄_add_to_cuºít
)

	)

2583 
	#__ôt_ªœti⁄_add
(
d
,
x
,
y
,
z
Ë
	`ITTNOTIFY_VOID_D3
(
ªœti⁄_add
,d,x,y,z)

	)

2584 
	#__ôt_ªœti⁄_add_±r
 
	`ITTNOTIFY_NAME
(
ªœti⁄_add
)

	)

2586 
	#__ôt_ªœti⁄_add_to_cuºít
(
d
,
x
,
y
)

	)

2587 
	#__ôt_ªœti⁄_add_to_cuºít_±r
 0

	)

2588 
	#__ôt_ªœti⁄_add
(
d
,
x
,
y
,
z
)

	)

2589 
	#__ôt_ªœti⁄_add_±r
 0

	)

2592 
	#__ôt_ªœti⁄_add_to_cuºít_±r
 0

	)

2593 
	#__ôt_ªœti⁄_add_±r
 0

	)

2599 #¥agm®
∑ck
(
push
, 8)

2601 
	s___ôt_˛ock_öfo


2603 
˛ock_‰eq
;

2604 
˛ock_ba£
;

2605 } 
	t__ôt_˛ock_öfo
;

2607 #¥agm®
∑ck
(
p›
)

2611 (
ITTAPI
 *
	t__ôt_gë_˛ock_öfo_‚
)(
	t__ôt_˛ock_öfo
* 
	t˛ock_öfo
, * 
	td©a
);

2615 #¥agm®
∑ck
(
push
, 8)

2617 
	s___ôt_˛ock_domaö


2619 
__ôt_˛ock_öfo
 
öfo
;

2620 
__ôt_gë_˛ock_öfo_‚
 
‚
;

2621 * 
‚_d©a
;

2622 
exåa1
;

2623 * 
exåa2
;

2624 
___ôt_˛ock_domaö
* 
√xt
;

2625 } 
	t__ôt_˛ock_domaö
;

2627 #¥agm®
∑ck
(
p›
)

2643 
__ôt_˛ock_domaö
* 
ITTAPI
 
__ôt_˛ock_domaö_¸óã
(
__ôt_gë_˛ock_öfo_‚
 
‚
, * 
‚_d©a
);

2646 #i‚de‡
INTEL_NO_MACRO_BODY


2647 #i‚de‡
INTEL_NO_ITTNOTIFY_API


2648 
ITT_STUB
(
ITTAPI
, 
__ôt_˛ock_domaö
*, 
˛ock_domaö_¸óã
, (
__ôt_gë_˛ock_öfo_‚
 
‚
, * 
‚_d©a
))

2649 
	#__ôt_˛ock_domaö_¸óã
 
	`ITTNOTIFY_DATA
(
˛ock_domaö_¸óã
)

	)

2650 
	#__ôt_˛ock_domaö_¸óã_±r
 
	`ITTNOTIFY_NAME
(
˛ock_domaö_¸óã
)

	)

2652 
	#__ôt_˛ock_domaö_¸óã
(
‚
,
‚_d©a
Ë(
__ôt_˛ock_domaö
*)0

	)

2653 
	#__ôt_˛ock_domaö_¸óã_±r
 0

	)

2656 
	#__ôt_˛ock_domaö_¸óã_±r
 0

	)

2664 
ITTAPI
 
__ôt_˛ock_domaö_ª£t
();

2667 #i‚de‡
INTEL_NO_MACRO_BODY


2668 #i‚de‡
INTEL_NO_ITTNOTIFY_API


2669 
ITT_STUBV
(
ITTAPI
, , 
˛ock_domaö_ª£t
, ())

2670 
	#__ôt_˛ock_domaö_ª£t
 
	`ITTNOTIFY_VOID
(
˛ock_domaö_ª£t
)

	)

2671 
	#__ôt_˛ock_domaö_ª£t_±r
 
	`ITTNOTIFY_NAME
(
˛ock_domaö_ª£t
)

	)

2673 
	#__ôt_˛ock_domaö_ª£t
()

	)

2674 
	#__ôt_˛ock_domaö_ª£t_±r
 0

	)

2677 
	#__ôt_˛ock_domaö_ª£t_±r
 0

	)

2692 
ITTAPI
 
__ôt_id_¸óã_ex
(c⁄° 
__ôt_domaö
* 
domaö
, 
__ôt_˛ock_domaö
* 
˛ock_domaö
, 
time°amp
, 
__ôt_id
 
id
);

2705 
ITTAPI
 
__ôt_id_de°roy_ex
(c⁄° 
__ôt_domaö
* 
domaö
, 
__ôt_˛ock_domaö
* 
˛ock_domaö
, 
time°amp
, 
__ôt_id
 
id
);

2708 #i‚de‡
INTEL_NO_MACRO_BODY


2709 #i‚de‡
INTEL_NO_ITTNOTIFY_API


2710 
ITT_STUBV
(
ITTAPI
, , 
id_¸óã_ex
, (c⁄° 
__ôt_domaö
 *
domaö
, 
__ôt_˛ock_domaö
* 
˛ock_domaö
, 
time°amp
, 
__ôt_id
 
id
))

2711 
ITT_STUBV
(
ITTAPI
, , 
id_de°roy_ex
, (c⁄° 
__ôt_domaö
 *
domaö
, 
__ôt_˛ock_domaö
* 
˛ock_domaö
, 
time°amp
, 
__ôt_id
 
id
))

2712 
	#__ôt_id_¸óã_ex
(
d
,
x
,
y
,
z
Ë
	`ITTNOTIFY_VOID_D3
(
id_¸óã_ex
,d,x,y,z)

	)

2713 
	#__ôt_id_¸óã_ex_±r
 
	`ITTNOTIFY_NAME
(
id_¸óã_ex
)

	)

2714 
	#__ôt_id_de°roy_ex
(
d
,
x
,
y
,
z
Ë
	`ITTNOTIFY_VOID_D3
(
id_de°roy_ex
,d,x,y,z)

	)

2715 
	#__ôt_id_de°roy_ex_±r
 
	`ITTNOTIFY_NAME
(
id_de°roy_ex
)

	)

2717 
	#__ôt_id_¸óã_ex
(
domaö
,
˛ock_domaö
,
time°amp
,
id
)

	)

2718 
	#__ôt_id_¸óã_ex_±r
 0

	)

2719 
	#__ôt_id_de°roy_ex
(
domaö
,
˛ock_domaö
,
time°amp
,
id
)

	)

2720 
	#__ôt_id_de°roy_ex_±r
 0

	)

2723 
	#__ôt_id_¸óã_ex_±r
 0

	)

2724 
	#__ôt_id_de°roy_ex_±r
 0

	)

2738 
ITTAPI
 
__ôt_èsk_begö_ex
(c⁄° 
__ôt_domaö
* 
domaö
, 
__ôt_˛ock_domaö
* 
˛ock_domaö
, 
time°amp
, 
__ôt_id
 
èskid
, __ôt_id 
∑ª¡id
, 
__ôt_°rög_h™dÀ
* 
«me
);

2750 
ITTAPI
 
__ôt_èsk_begö_‚_ex
(c⁄° 
__ôt_domaö
* 
domaö
, 
__ôt_˛ock_domaö
* 
˛ock_domaö
, 
time°amp
, 
__ôt_id
 
èskid
, __ôt_id 
∑ª¡id
, * 
‚
);

2759 
ITTAPI
 
__ôt_èsk_íd_ex
(c⁄° 
__ôt_domaö
* 
domaö
, 
__ôt_˛ock_domaö
* 
˛ock_domaö
, 
time°amp
);

2762 #i‚de‡
INTEL_NO_MACRO_BODY


2763 #i‚de‡
INTEL_NO_ITTNOTIFY_API


2764 
ITT_STUBV
(
ITTAPI
, , 
èsk_begö_ex
, (c⁄° 
__ôt_domaö
 *
domaö
, 
__ôt_˛ock_domaö
* 
˛ock_domaö
, 
time°amp
, 
__ôt_id
 
id
, __ôt_id 
∑ª¡id
, 
__ôt_°rög_h™dÀ
 *
«me
))

2765 
ITT_STUBV
(
ITTAPI
, , 
èsk_begö_‚_ex
, (c⁄° 
__ôt_domaö
 *
domaö
, 
__ôt_˛ock_domaö
* 
˛ock_domaö
, 
time°amp
, 
__ôt_id
 
id
, __ôt_id 
∑ª¡id
, * 
‚
))

2766 
ITT_STUBV
(
ITTAPI
, , 
èsk_íd_ex
, (c⁄° 
__ôt_domaö
 *
domaö
, 
__ôt_˛ock_domaö
* 
˛ock_domaö
, 
time°amp
))

2767 
	#__ôt_èsk_begö_ex
(
d
,
x
,
y
,
z
,
a
,
b
Ë
	`ITTNOTIFY_VOID_D5
(
èsk_begö_ex
,d,x,y,z,a,b)

	)

2768 
	#__ôt_èsk_begö_ex_±r
 
	`ITTNOTIFY_NAME
(
èsk_begö_ex
)

	)

2769 
	#__ôt_èsk_begö_‚_ex
(
d
,
x
,
y
,
z
,
a
,
b
Ë
	`ITTNOTIFY_VOID_D5
(
èsk_begö_‚_ex
,d,x,y,z,a,b)

	)

2770 
	#__ôt_èsk_begö_‚_ex_±r
 
	`ITTNOTIFY_NAME
(
èsk_begö_‚_ex
)

	)

2771 
	#__ôt_èsk_íd_ex
(
d
,
x
,
y
Ë
	`ITTNOTIFY_VOID_D2
(
èsk_íd_ex
,d,x,y)

	)

2772 
	#__ôt_èsk_íd_ex_±r
 
	`ITTNOTIFY_NAME
(
èsk_íd_ex
)

	)

2774 
	#__ôt_èsk_begö_ex
(
domaö
,
˛ock_domaö
,
time°amp
,
id
,
∑ª¡id
,
«me
)

	)

2775 
	#__ôt_èsk_begö_ex_±r
 0

	)

2776 
	#__ôt_èsk_begö_‚_ex
(
domaö
,
˛ock_domaö
,
time°amp
,
id
,
∑ª¡id
,
‚
)

	)

2777 
	#__ôt_èsk_begö_‚_ex_±r
 0

	)

2778 
	#__ôt_èsk_íd_ex
(
domaö
,
˛ock_domaö
,
time°amp
)

	)

2779 
	#__ôt_èsk_íd_ex_±r
 0

	)

2782 
	#__ôt_èsk_begö_ex_±r
 0

	)

2783 
	#__ôt_èsk_begö_‚_ex_±r
 0

	)

2784 
	#__ôt_èsk_íd_ex_±r
 0

	)

2798 
ITTAPI
 
__ôt_m¨kî_ex
(c⁄° 
__ôt_domaö
 *
domaö
, 
__ôt_˛ock_domaö
* 
˛ock_domaö
, 
time°amp
, 
__ôt_id
 
id
, 
__ôt_°rög_h™dÀ
 *
«me
, 
__ôt_sc›e
 
sc›e
);

2801 #i‚de‡
INTEL_NO_MACRO_BODY


2802 #i‚de‡
INTEL_NO_ITTNOTIFY_API


2803 
ITT_STUBV
(
ITTAPI
, , 
m¨kî_ex
, (c⁄° 
__ôt_domaö
 *
domaö
, 
__ôt_˛ock_domaö
* 
˛ock_domaö
, 
time°amp
, 
__ôt_id
 
id
, 
__ôt_°rög_h™dÀ
 *
«me
, 
__ôt_sc›e
 
sc›e
))

2804 
	#__ôt_m¨kî_ex
(
d
,
x
,
y
,
z
,
a
,
b
Ë
	`ITTNOTIFY_VOID_D5
(
m¨kî_ex
,d,x,y,z,a,b)

	)

2805 
	#__ôt_m¨kî_ex_±r
 
	`ITTNOTIFY_NAME
(
m¨kî_ex
)

	)

2807 
	#__ôt_m¨kî_ex
(
domaö
,
˛ock_domaö
,
time°amp
,
id
,
«me
,
sc›e
)

	)

2808 
	#__ôt_m¨kî_ex_±r
 0

	)

2811 
	#__ôt_m¨kî_ex_±r
 0

	)

2825 
ITTAPI
 
__ôt_ªœti⁄_add_to_cuºít_ex
(c⁄° 
__ôt_domaö
 *
domaö
, 
__ôt_˛ock_domaö
* 
˛ock_domaö
, 
time°amp
, 
__ôt_ªœti⁄
 
ªœti⁄
, 
__ôt_id
 
èû
);

2837 
ITTAPI
 
__ôt_ªœti⁄_add_ex
(c⁄° 
__ôt_domaö
 *
domaö
, 
__ôt_˛ock_domaö
* 
˛ock_domaö
, 
time°amp
, 
__ôt_id
 
hód
, 
__ôt_ªœti⁄
 
ªœti⁄
, __ôt_id 
èû
);

2840 #i‚de‡
INTEL_NO_MACRO_BODY


2841 #i‚de‡
INTEL_NO_ITTNOTIFY_API


2842 
ITT_STUBV
(
ITTAPI
, , 
ªœti⁄_add_to_cuºít_ex
, (c⁄° 
__ôt_domaö
 *
domaö
, 
__ôt_˛ock_domaö
* 
˛ock_domaö
, 
time°amp
, 
__ôt_ªœti⁄
 
ªœti⁄
, 
__ôt_id
 
èû
))

2843 
ITT_STUBV
(
ITTAPI
, , 
ªœti⁄_add_ex
, (c⁄° 
__ôt_domaö
 *
domaö
, 
__ôt_˛ock_domaö
* 
˛ock_domaö
, 
time°amp
, 
__ôt_id
 
hód
, 
__ôt_ªœti⁄
 
ªœti⁄
, __ôt_id 
èû
))

2844 
	#__ôt_ªœti⁄_add_to_cuºít_ex
(
d
,
x
,
y
,
z
,
a
Ë
	`ITTNOTIFY_VOID_D4
(
ªœti⁄_add_to_cuºít_ex
,d,x,y,z,a)

	)

2845 
	#__ôt_ªœti⁄_add_to_cuºít_ex_±r
 
	`ITTNOTIFY_NAME
(
ªœti⁄_add_to_cuºít_ex
)

	)

2846 
	#__ôt_ªœti⁄_add_ex
(
d
,
x
,
y
,
z
,
a
,
b
Ë
	`ITTNOTIFY_VOID_D5
(
ªœti⁄_add_ex
,d,x,y,z,a,b)

	)

2847 
	#__ôt_ªœti⁄_add_ex_±r
 
	`ITTNOTIFY_NAME
(
ªœti⁄_add_ex
)

	)

2849 
	#__ôt_ªœti⁄_add_to_cuºít_ex
(
domaö
,
˛ock_domaö
,
time°ame
,
ªœti⁄
,
èû
)

	)

2850 
	#__ôt_ªœti⁄_add_to_cuºít_ex_±r
 0

	)

2851 
	#__ôt_ªœti⁄_add_ex
(
domaö
,
˛ock_domaö
,
time°amp
,
hód
,
ªœti⁄
,
èû
)

	)

2852 
	#__ôt_ªœti⁄_add_ex_±r
 0

	)

2855 
	#__ôt_ªœti⁄_add_to_cuºít_ex_±r
 0

	)

2856 
	#__ôt_ªœti⁄_add_ex_±r
 0

	)

2861 
	e___ôt_åack_group_ty≥


2863 
__ôt_åack_group_ty≥_n‹mÆ
 = 0

2864 } 
	t__ôt_åack_group_ty≥
;

2868 #¥agm®
∑ck
(
push
, 8)

2870 
	s___ôt_åack_group


2872 
__ôt_°rög_h™dÀ
* 
«me
;

2873 
___ôt_åack
* 
åack
;

2874 
__ôt_åack_group_ty≥
 
tgty≥
;

2875 
exåa1
;

2876 * 
exåa2
;

2877 
___ôt_åack_group
* 
√xt
;

2878 } 
	t__ôt_åack_group
;

2880 #¥agm®
∑ck
(
p›
)

2887 
	e___ôt_åack_ty≥


2889 
__ôt_åack_ty≥_n‹mÆ
 = 0

2890 #ifde‡
INTEL_ITTNOTIFY_API_PRIVATE


2891 , 
__ôt_åack_ty≥_queue


2893 } 
	t__ôt_åack_ty≥
;

2896 #¥agm®
∑ck
(
push
, 8)

2898 
	s___ôt_åack


2900 
__ôt_°rög_h™dÀ
* 
«me
;

2901 
__ôt_åack_group
* 
group
;

2902 
__ôt_åack_ty≥
 
ây≥
;

2903 
exåa1
;

2904 * 
exåa2
;

2905 
___ôt_åack
* 
√xt
;

2906 } 
	t__ôt_åack
;

2908 #¥agm®
∑ck
(
p›
)

2914 
__ôt_åack_group
* 
ITTAPI
 
__ôt_åack_group_¸óã
(
__ôt_°rög_h™dÀ
* 
«me
, 
__ôt_åack_group_ty≥
 
åack_group_ty≥
);

2917 #i‚de‡
INTEL_NO_MACRO_BODY


2918 #i‚de‡
INTEL_NO_ITTNOTIFY_API


2919 
ITT_STUB
(
ITTAPI
, 
__ôt_åack_group
*, 
åack_group_¸óã
, (
__ôt_°rög_h™dÀ
* 
«me
, 
__ôt_åack_group_ty≥
 
åack_group_ty≥
))

2920 
	#__ôt_åack_group_¸óã
 
	`ITTNOTIFY_DATA
(
åack_group_¸óã
)

	)

2921 
	#__ôt_åack_group_¸óã_±r
 
	`ITTNOTIFY_NAME
(
åack_group_¸óã
)

	)

2923 
	#__ôt_åack_group_¸óã
(
«me
Ë(
__ôt_åack_group
*)0

	)

2924 
	#__ôt_åack_group_¸óã_±r
 0

	)

2927 
	#__ôt_åack_group_¸óã_±r
 0

	)

2934 
__ôt_åack
* 
ITTAPI
 
__ôt_åack_¸óã
(
__ôt_åack_group
* 
åack_group
, 
__ôt_°rög_h™dÀ
* 
«me
, 
__ôt_åack_ty≥
 
åack_ty≥
);

2937 #i‚de‡
INTEL_NO_MACRO_BODY


2938 #i‚de‡
INTEL_NO_ITTNOTIFY_API


2939 
ITT_STUB
(
ITTAPI
, 
__ôt_åack
*, 
åack_¸óã
, (
__ôt_åack_group
* 
åack_group
,
__ôt_°rög_h™dÀ
* 
«me
, 
__ôt_åack_ty≥
 
åack_ty≥
))

2940 
	#__ôt_åack_¸óã
 
	`ITTNOTIFY_DATA
(
åack_¸óã
)

	)

2941 
	#__ôt_åack_¸óã_±r
 
	`ITTNOTIFY_NAME
(
åack_¸óã
)

	)

2943 
	#__ôt_åack_¸óã
(
åack_group
,
«me
,
åack_ty≥
Ë(
__ôt_åack
*)0

	)

2944 
	#__ôt_åack_¸óã_±r
 0

	)

2947 
	#__ôt_åack_¸óã_±r
 0

	)

2954 
ITTAPI
 
__ôt_£t_åack
(
__ôt_åack
* 
åack
);

2957 #i‚de‡
INTEL_NO_MACRO_BODY


2958 #i‚de‡
INTEL_NO_ITTNOTIFY_API


2959 
ITT_STUBV
(
ITTAPI
, , 
£t_åack
, (
__ôt_åack
 *
åack
))

2960 
	#__ôt_£t_åack
 
	`ITTNOTIFY_VOID
(
£t_åack
)

	)

2961 
	#__ôt_£t_åack_±r
 
	`ITTNOTIFY_NAME
(
£t_åack
)

	)

2963 
	#__ôt_£t_åack
(
åack
)

	)

2964 
	#__ôt_£t_åack_±r
 0

	)

2967 
	#__ôt_£t_åack_±r
 0

	)

2980 
	t__ôt_evít
;

2987 #i‡
ITT_PLATFORM
==
ITT_PLATFORM_WIN


2988 
__ôt_evít
 
LIBITTAPI
 
__ôt_evít_¸óãA
(c⁄° *
«me
, 
«mñí
);

2989 
__ôt_evít
 
LIBITTAPI
 
__ôt_evít_¸óãW
(c⁄° 
wch¨_t
 *
«me
, 
«mñí
);

2990 #i‡
deföed
(
UNICODE
Ë|| deföed(
_UNICODE
)

2991 
	#__ôt_evít_¸óã
 
__ôt_evít_¸óãW


	)

2992 
	#__ôt_evít_¸óã_±r
 
__ôt_evít_¸óãW_±r


	)

2994 
	#__ôt_evít_¸óã
 
__ôt_evít_¸óãA


	)

2995 
	#__ôt_evít_¸óã_±r
 
__ôt_evít_¸óãA_±r


	)

2998 
__ôt_evít
 
LIBITTAPI
 
__ôt_evít_¸óã
(c⁄° *
«me
, 
«mñí
);

3002 #i‚de‡
INTEL_NO_MACRO_BODY


3003 #i‚de‡
INTEL_NO_ITTNOTIFY_API


3004 #i‡
ITT_PLATFORM
==
ITT_PLATFORM_WIN


3005 
ITT_STUB
(
LIBITTAPI
, 
__ôt_evít
, 
evít_¸óãA
, (c⁄° *
«me
, 
«mñí
))

3006 
ITT_STUB
(
LIBITTAPI
, 
__ôt_evít
, 
evít_¸óãW
, (c⁄° 
wch¨_t
 *
«me
, 
«mñí
))

3008 
ITT_STUB
(
LIBITTAPI
, 
__ôt_evít
, 
evít_¸óã
, (c⁄° *
«me
, 
«mñí
))

3010 #i‡
ITT_PLATFORM
==
ITT_PLATFORM_WIN


3011 
	#__ôt_evít_¸óãA
 
	`ITTNOTIFY_DATA
(
evít_¸óãA
)

	)

3012 
	#__ôt_evít_¸óãA_±r
 
	`ITTNOTIFY_NAME
(
evít_¸óãA
)

	)

3013 
	#__ôt_evít_¸óãW
 
	`ITTNOTIFY_DATA
(
evít_¸óãW
)

	)

3014 
	#__ôt_evít_¸óãW_±r
 
	`ITTNOTIFY_NAME
(
evít_¸óãW
)

	)

3016 
	#__ôt_evít_¸óã
 
	`ITTNOTIFY_DATA
(
evít_¸óã
)

	)

3017 
	#__ôt_evít_¸óã_±r
 
	`ITTNOTIFY_NAME
(
evít_¸óã
)

	)

3020 #i‡
ITT_PLATFORM
==
ITT_PLATFORM_WIN


3021 
	#__ôt_evít_¸óãA
(
«me
, 
«mñí
Ë(
__ôt_evít
)0

	)

3022 
	#__ôt_evít_¸óãA_±r
 0

	)

3023 
	#__ôt_evít_¸óãW
(
«me
, 
«mñí
Ë(
__ôt_evít
)0

	)

3024 
	#__ôt_evít_¸óãW_±r
 0

	)

3026 
	#__ôt_evít_¸óã
(
«me
, 
«mñí
Ë(
__ôt_evít
)0

	)

3027 
	#__ôt_evít_¸óã_±r
 0

	)

3031 #i‡
ITT_PLATFORM
==
ITT_PLATFORM_WIN


3032 
	#__ôt_evít_¸óãA_±r
 0

	)

3033 
	#__ôt_evít_¸óãW_±r
 0

	)

3035 
	#__ôt_evít_¸óã_±r
 0

	)

3044 
LIBITTAPI
 
__ôt_evít_°¨t
(
__ôt_evít
 
evít
);

3047 #i‚de‡
INTEL_NO_MACRO_BODY


3048 #i‚de‡
INTEL_NO_ITTNOTIFY_API


3049 
ITT_STUB
(
LIBITTAPI
, , 
evít_°¨t
, (
__ôt_evít
 
evít
))

3050 
	#__ôt_evít_°¨t
 
	`ITTNOTIFY_DATA
(
evít_°¨t
)

	)

3051 
	#__ôt_evít_°¨t_±r
 
	`ITTNOTIFY_NAME
(
evít_°¨t
)

	)

3053 
	#__ôt_evít_°¨t
(
evít
Ë()0

	)

3054 
	#__ôt_evít_°¨t_±r
 0

	)

3057 
	#__ôt_evít_°¨t_±r
 0

	)

3066 
LIBITTAPI
 
__ôt_evít_íd
(
__ôt_evít
 
evít
);

3069 #i‚de‡
INTEL_NO_MACRO_BODY


3070 #i‚de‡
INTEL_NO_ITTNOTIFY_API


3071 
ITT_STUB
(
LIBITTAPI
, , 
evít_íd
, (
__ôt_evít
 
evít
))

3072 
	#__ôt_evít_íd
 
	`ITTNOTIFY_DATA
(
evít_íd
)

	)

3073 
	#__ôt_evít_íd_±r
 
	`ITTNOTIFY_NAME
(
evít_íd
)

	)

3075 
	#__ôt_evít_íd
(
evít
Ë()0

	)

3076 
	#__ôt_evít_íd_±r
 0

	)

3079 
	#__ôt_evít_íd_±r
 0

	)

3098 
__ôt_e_fú°
 = 0,

3099 
__ôt_e_ch¨
 = 0,

3100 
__ôt_e_uch¨
,

3101 
__ôt_e_öt16
,

3102 
__ôt_e_uöt16
,

3103 
__ôt_e_öt32
,

3104 
__ôt_e_uöt32
,

3105 
__ôt_e_öt64
,

3106 
__ôt_e_uöt64
,

3107 
__ôt_e_Êﬂt
,

3108 
__ôt_e_doubÀ
,

3109 
__ôt_e_œ°
 = 
__ôt_e_doubÀ


3110 } 
	t__ôt_av_d©a_ty≥
;

3125 #i‡
ITT_PLATFORM
==
ITT_PLATFORM_WIN


3126 
ITTAPI
 
__ôt_av_ßveA
(*
d©a
, 
ønk
, c⁄° *
dimísi⁄s
, 
ty≥
, c⁄° *
fûeP©h
, 
cﬁumnOrdî
);

3127 
ITTAPI
 
__ôt_av_ßveW
(*
d©a
, 
ønk
, c⁄° *
dimísi⁄s
, 
ty≥
, c⁄° 
wch¨_t
 *
fûeP©h
, 
cﬁumnOrdî
);

3128 #i‡
deföed
(
UNICODE
Ë|| deföed(
_UNICODE
)

3129 
	#__ôt_av_ßve
 
__ôt_av_ßveW


	)

3130 
	#__ôt_av_ßve_±r
 
__ôt_av_ßveW_±r


	)

3132 
	#__ôt_av_ßve
 
__ôt_av_ßveA


	)

3133 
	#__ôt_av_ßve_±r
 
__ôt_av_ßveA_±r


	)

3136 
ITTAPI
 
__ôt_av_ßve
(*
d©a
, 
ønk
, c⁄° *
dimísi⁄s
, 
ty≥
, c⁄° *
fûeP©h
, 
cﬁumnOrdî
);

3140 #i‚de‡
INTEL_NO_MACRO_BODY


3141 #i‚de‡
INTEL_NO_ITTNOTIFY_API


3142 #i‡
ITT_PLATFORM
==
ITT_PLATFORM_WIN


3143 
ITT_STUB
(
ITTAPI
, , 
av_ßveA
, (*
d©a
, 
ønk
, c⁄° *
dimísi⁄s
, 
ty≥
, c⁄° *
fûeP©h
, 
cﬁumnOrdî
))

3144 
ITT_STUB
(
ITTAPI
, , 
av_ßveW
, (*
d©a
, 
ønk
, c⁄° *
dimísi⁄s
, 
ty≥
, c⁄° 
wch¨_t
 *
fûeP©h
, 
cﬁumnOrdî
))

3146 
ITT_STUB
(
ITTAPI
, , 
av_ßve
, (*
d©a
, 
ønk
, c⁄° *
dimísi⁄s
, 
ty≥
, c⁄° *
fûeP©h
, 
cﬁumnOrdî
))

3148 #i‡
ITT_PLATFORM
==
ITT_PLATFORM_WIN


3149 
	#__ôt_av_ßveA
 
	`ITTNOTIFY_DATA
(
av_ßveA
)

	)

3150 
	#__ôt_av_ßveA_±r
 
	`ITTNOTIFY_NAME
(
av_ßveA
)

	)

3151 
	#__ôt_av_ßveW
 
	`ITTNOTIFY_DATA
(
av_ßveW
)

	)

3152 
	#__ôt_av_ßveW_±r
 
	`ITTNOTIFY_NAME
(
av_ßveW
)

	)

3154 
	#__ôt_av_ßve
 
	`ITTNOTIFY_DATA
(
av_ßve
)

	)

3155 
	#__ôt_av_ßve_±r
 
	`ITTNOTIFY_NAME
(
av_ßve
)

	)

3158 #i‡
ITT_PLATFORM
==
ITT_PLATFORM_WIN


3159 
	#__ôt_av_ßveA
(
«me
)

	)

3160 
	#__ôt_av_ßveA_±r
 0

	)

3161 
	#__ôt_av_ßveW
(
«me
)

	)

3162 
	#__ôt_av_ßveW_±r
 0

	)

3164 
	#__ôt_av_ßve
(
«me
)

	)

3165 
	#__ôt_av_ßve_±r
 0

	)

3169 #i‡
ITT_PLATFORM
==
ITT_PLATFORM_WIN


3170 
	#__ôt_av_ßveA_±r
 0

	)

3171 
	#__ôt_av_ßveW_±r
 0

	)

3173 
	#__ôt_av_ßve_±r
 0

	)

3178 
ITTAPI
 
__ôt_íabÀ_©èch
();

3181 #i‚de‡
INTEL_NO_MACRO_BODY


3182 #i‚de‡
INTEL_NO_ITTNOTIFY_API


3183 
ITT_STUBV
(
ITTAPI
, , 
íabÀ_©èch
, ())

3184 
	#__ôt_íabÀ_©èch
 
	`ITTNOTIFY_VOID
(
íabÀ_©èch
)

	)

3185 
	#__ôt_íabÀ_©èch_±r
 
	`ITTNOTIFY_NAME
(
íabÀ_©èch
)

	)

3187 
	#__ôt_íabÀ_©èch
()

	)

3188 
	#__ôt_íabÀ_©èch_±r
 0

	)

3191 
	#__ôt_íabÀ_©èch_±r
 0

	)

3202 #ifde‡
__˝lu•lus


3208 #ifde‡
INTEL_ITTNOTIFY_API_PRIVATE


3210 #i‚de‡
_ITTNOTIFY_PRIVATE_


3211 
	#_ITTNOTIFY_PRIVATE_


	)

3213 #ifde‡
__˝lu•lus


3225 
ITTAPI
 
__ôt_èsk_begö_ovîœµed
(c⁄° 
__ôt_domaö
* 
domaö
, 
__ôt_id
 
èskid
, __ôt_id 
∑ª¡id
, 
__ôt_°rög_h™dÀ
* 
«me
);

3237 
ITTAPI
 
__ôt_èsk_begö_ovîœµed_ex
(c⁄° 
__ôt_domaö
* 
domaö
, 
__ôt_˛ock_domaö
* 
˛ock_domaö
, 
time°amp
, 
__ôt_id
 
èskid
, __ôt_id 
∑ª¡id
, 
__ôt_°rög_h™dÀ
* 
«me
);

3245 
ITTAPI
 
__ôt_èsk_íd_ovîœµed
(c⁄° 
__ôt_domaö
 *
domaö
, 
__ôt_id
 
èskid
);

3255 
ITTAPI
 
__ôt_èsk_íd_ovîœµed_ex
(c⁄° 
__ôt_domaö
* 
domaö
, 
__ôt_˛ock_domaö
* 
˛ock_domaö
, 
time°amp
, 
__ôt_id
 
èskid
);

3258 #i‚de‡
INTEL_NO_MACRO_BODY


3259 #i‚de‡
INTEL_NO_ITTNOTIFY_API


3260 
ITT_STUBV
(
ITTAPI
, , 
èsk_begö_ovîœµed
, (c⁄° 
__ôt_domaö
 *
domaö
, 
__ôt_id
 
èskid
, __ôt_id 
∑ª¡id
, 
__ôt_°rög_h™dÀ
 *
«me
))

3261 
ITT_STUBV
(
ITTAPI
, , 
èsk_begö_ovîœµed_ex
, (c⁄° 
__ôt_domaö
* 
domaö
, 
__ôt_˛ock_domaö
* 
˛ock_domaö
, 
time°amp
, 
__ôt_id
 
èskid
, __ôt_id 
∑ª¡id
, 
__ôt_°rög_h™dÀ
* 
«me
))

3262 
ITT_STUBV
(
ITTAPI
, , 
èsk_íd_ovîœµed
, (c⁄° 
__ôt_domaö
 *
domaö
, 
__ôt_id
 
èskid
))

3263 
ITT_STUBV
(
ITTAPI
, , 
èsk_íd_ovîœµed_ex
, (c⁄° 
__ôt_domaö
* 
domaö
, 
__ôt_˛ock_domaö
* 
˛ock_domaö
, 
time°amp
, 
__ôt_id
 
èskid
))

3264 
	#__ôt_èsk_begö_ovîœµed
(
d
,
x
,
y
,
z
Ë
	`ITTNOTIFY_VOID_D3
(
èsk_begö_ovîœµed
,d,x,y,z)

	)

3265 
	#__ôt_èsk_begö_ovîœµed_±r
 
	`ITTNOTIFY_NAME
(
èsk_begö_ovîœµed
)

	)

3266 
	#__ôt_èsk_begö_ovîœµed_ex
(
d
,
x
,
y
,
z
,
a
,
b
Ë
	`ITTNOTIFY_VOID_D5
(
èsk_begö_ovîœµed_ex
,d,x,y,z,a,b)

	)

3267 
	#__ôt_èsk_begö_ovîœµed_ex_±r
 
	`ITTNOTIFY_NAME
(
èsk_begö_ovîœµed_ex
)

	)

3268 
	#__ôt_èsk_íd_ovîœµed
(
d
,
x
Ë
	`ITTNOTIFY_VOID_D1
(
èsk_íd_ovîœµed
,d,x)

	)

3269 
	#__ôt_èsk_íd_ovîœµed_±r
 
	`ITTNOTIFY_NAME
(
èsk_íd_ovîœµed
)

	)

3270 
	#__ôt_èsk_íd_ovîœµed_ex
(
d
,
x
,
y
,
z
Ë
	`ITTNOTIFY_VOID_D3
(
èsk_íd_ovîœµed_ex
,d,x,y,z)

	)

3271 
	#__ôt_èsk_íd_ovîœµed_ex_±r
 
	`ITTNOTIFY_NAME
(
èsk_íd_ovîœµed_ex
)

	)

3273 
	#__ôt_èsk_begö_ovîœµed
(
domaö
,
èskid
,
∑ª¡id
,
«me
)

	)

3274 
	#__ôt_èsk_begö_ovîœµed_±r
 0

	)

3275 
	#__ôt_èsk_begö_ovîœµed_ex
(
domaö
,
˛ock_domaö
,
time°amp
,
èskid
,
∑ª¡id
,
«me
)

	)

3276 
	#__ôt_èsk_begö_ovîœµed_ex_±r
 0

	)

3277 
	#__ôt_èsk_íd_ovîœµed
(
domaö
,
èskid
)

	)

3278 
	#__ôt_èsk_íd_ovîœµed_±r
 0

	)

3279 
	#__ôt_èsk_íd_ovîœµed_ex
(
domaö
,
˛ock_domaö
,
time°amp
,
èskid
)

	)

3280 
	#__ôt_èsk_íd_ovîœµed_ex_±r
 0

	)

3283 
	#__ôt_èsk_begö_ovîœµed_±r
 0

	)

3284 
	#__ôt_èsk_begö_ovîœµed_ex_±r
 0

	)

3285 
	#__ôt_èsk_íd_ovîœµed_±r
 0

	)

3286 
	#__ôt_èsk_íd_ovîœµed_ex_±r
 0

	)

3300 
	t__ôt_m¨k_ty≥
;

3307 #i‡
ITT_PLATFORM
==
ITT_PLATFORM_WIN


3308 
__ôt_m¨k_ty≥
 
ITTAPI
 
__ôt_m¨k_¸óãA
(c⁄° *
«me
);

3309 
__ôt_m¨k_ty≥
 
ITTAPI
 
__ôt_m¨k_¸óãW
(c⁄° 
wch¨_t
 *
«me
);

3310 #i‡
deföed
(
UNICODE
Ë|| deföed(
_UNICODE
)

3311 
	#__ôt_m¨k_¸óã
 
__ôt_m¨k_¸óãW


	)

3312 
	#__ôt_m¨k_¸óã_±r
 
__ôt_m¨k_¸óãW_±r


	)

3314 
	#__ôt_m¨k_¸óã
 
__ôt_m¨k_¸óãA


	)

3315 
	#__ôt_m¨k_¸óã_±r
 
__ôt_m¨k_¸óãA_±r


	)

3318 
__ôt_m¨k_ty≥
 
ITTAPI
 
__ôt_m¨k_¸óã
(c⁄° *
«me
);

3322 #i‚de‡
INTEL_NO_MACRO_BODY


3323 #i‚de‡
INTEL_NO_ITTNOTIFY_API


3324 #i‡
ITT_PLATFORM
==
ITT_PLATFORM_WIN


3325 
ITT_STUB
(
ITTAPI
, 
__ôt_m¨k_ty≥
, 
m¨k_¸óãA
, (c⁄° *
«me
))

3326 
ITT_STUB
(
ITTAPI
, 
__ôt_m¨k_ty≥
, 
m¨k_¸óãW
, (c⁄° 
wch¨_t
 *
«me
))

3328 
ITT_STUB
(
ITTAPI
, 
__ôt_m¨k_ty≥
, 
m¨k_¸óã
, (c⁄° *
«me
))

3330 #i‡
ITT_PLATFORM
==
ITT_PLATFORM_WIN


3331 
	#__ôt_m¨k_¸óãA
 
	`ITTNOTIFY_DATA
(
m¨k_¸óãA
)

	)

3332 
	#__ôt_m¨k_¸óãA_±r
 
	`ITTNOTIFY_NAME
(
m¨k_¸óãA
)

	)

3333 
	#__ôt_m¨k_¸óãW
 
	`ITTNOTIFY_DATA
(
m¨k_¸óãW
)

	)

3334 
	#__ôt_m¨k_¸óãW_±r
 
	`ITTNOTIFY_NAME
(
m¨k_¸óãW
)

	)

3336 
	#__ôt_m¨k_¸óã
 
	`ITTNOTIFY_DATA
(
m¨k_¸óã
)

	)

3337 
	#__ôt_m¨k_¸óã_±r
 
	`ITTNOTIFY_NAME
(
m¨k_¸óã
)

	)

3340 #i‡
ITT_PLATFORM
==
ITT_PLATFORM_WIN


3341 
	#__ôt_m¨k_¸óãA
(
«me
Ë(
__ôt_m¨k_ty≥
)0

	)

3342 
	#__ôt_m¨k_¸óãA_±r
 0

	)

3343 
	#__ôt_m¨k_¸óãW
(
«me
Ë(
__ôt_m¨k_ty≥
)0

	)

3344 
	#__ôt_m¨k_¸óãW_±r
 0

	)

3346 
	#__ôt_m¨k_¸óã
(
«me
Ë(
__ôt_m¨k_ty≥
)0

	)

3347 
	#__ôt_m¨k_¸óã_±r
 0

	)

3351 #i‡
ITT_PLATFORM
==
ITT_PLATFORM_WIN


3352 
	#__ôt_m¨k_¸óãA_±r
 0

	)

3353 
	#__ôt_m¨k_¸óãW_±r
 0

	)

3355 
	#__ôt_m¨k_¸óã_±r
 0

	)

3372 #i‡
ITT_PLATFORM
==
ITT_PLATFORM_WIN


3373 
ITTAPI
 
__ôt_m¨kA
(
__ôt_m¨k_ty≥
 
mt
, c⁄° *
∑ømëî
);

3374 
ITTAPI
 
__ôt_m¨kW
(
__ôt_m¨k_ty≥
 
mt
, c⁄° 
wch¨_t
 *
∑ømëî
);

3375 #i‡
deföed
(
UNICODE
Ë|| deföed(
_UNICODE
)

3376 
	#__ôt_m¨k
 
__ôt_m¨kW


	)

3377 
	#__ôt_m¨k_±r
 
__ôt_m¨kW_±r


	)

3379 
	#__ôt_m¨k
 
__ôt_m¨kA


	)

3380 
	#__ôt_m¨k_±r
 
__ôt_m¨kA_±r


	)

3383 
ITTAPI
 
__ôt_m¨k
(
__ôt_m¨k_ty≥
 
mt
, c⁄° *
∑ømëî
);

3387 #i‚de‡
INTEL_NO_MACRO_BODY


3388 #i‚de‡
INTEL_NO_ITTNOTIFY_API


3389 #i‡
ITT_PLATFORM
==
ITT_PLATFORM_WIN


3390 
ITT_STUB
(
ITTAPI
, , 
m¨kA
, (
__ôt_m¨k_ty≥
 
mt
, c⁄° *
∑ømëî
))

3391 
ITT_STUB
(
ITTAPI
, , 
m¨kW
, (
__ôt_m¨k_ty≥
 
mt
, c⁄° 
wch¨_t
 *
∑ømëî
))

3393 
ITT_STUB
(
ITTAPI
, , 
m¨k
, (
__ôt_m¨k_ty≥
 
mt
, c⁄° *
∑ømëî
))

3395 #i‡
ITT_PLATFORM
==
ITT_PLATFORM_WIN


3396 
	#__ôt_m¨kA
 
	`ITTNOTIFY_DATA
(
m¨kA
)

	)

3397 
	#__ôt_m¨kA_±r
 
	`ITTNOTIFY_NAME
(
m¨kA
)

	)

3398 
	#__ôt_m¨kW
 
	`ITTNOTIFY_DATA
(
m¨kW
)

	)

3399 
	#__ôt_m¨kW_±r
 
	`ITTNOTIFY_NAME
(
m¨kW
)

	)

3401 
	#__ôt_m¨k
 
	`ITTNOTIFY_DATA
(
m¨k
)

	)

3402 
	#__ôt_m¨k_±r
 
	`ITTNOTIFY_NAME
(
m¨k
)

	)

3405 #i‡
ITT_PLATFORM
==
ITT_PLATFORM_WIN


3406 
	#__ôt_m¨kA
(
mt
, 
∑ømëî
Ë()0

	)

3407 
	#__ôt_m¨kA_±r
 0

	)

3408 
	#__ôt_m¨kW
(
mt
, 
∑ømëî
Ë()0

	)

3409 
	#__ôt_m¨kW_±r
 0

	)

3411 
	#__ôt_m¨k
(
mt
, 
∑ømëî
Ë()0

	)

3412 
	#__ôt_m¨k_±r
 0

	)

3416 #i‡
ITT_PLATFORM
==
ITT_PLATFORM_WIN


3417 
	#__ôt_m¨kA_±r
 0

	)

3418 
	#__ôt_m¨kW_±r
 0

	)

3420 
	#__ôt_m¨k_±r
 0

	)

3430 #i‡
ITT_PLATFORM
==
ITT_PLATFORM_WIN


3431 
ITTAPI
 
__ôt_m¨k_globÆA
(
__ôt_m¨k_ty≥
 
mt
, c⁄° *
∑ømëî
);

3432 
ITTAPI
 
__ôt_m¨k_globÆW
(
__ôt_m¨k_ty≥
 
mt
, c⁄° 
wch¨_t
 *
∑ømëî
);

3433 #i‡
deföed
(
UNICODE
Ë|| deföed(
_UNICODE
)

3434 
	#__ôt_m¨k_globÆ
 
__ôt_m¨k_globÆW


	)

3435 
	#__ôt_m¨k_globÆ_±r
 
__ôt_m¨k_globÆW_±r


	)

3437 
	#__ôt_m¨k_globÆ
 
__ôt_m¨k_globÆA


	)

3438 
	#__ôt_m¨k_globÆ_±r
 
__ôt_m¨k_globÆA_±r


	)

3441 
ITTAPI
 
__ôt_m¨k_globÆ
(
__ôt_m¨k_ty≥
 
mt
, c⁄° *
∑ømëî
);

3445 #i‚de‡
INTEL_NO_MACRO_BODY


3446 #i‚de‡
INTEL_NO_ITTNOTIFY_API


3447 #i‡
ITT_PLATFORM
==
ITT_PLATFORM_WIN


3448 
ITT_STUB
(
ITTAPI
, , 
m¨k_globÆA
, (
__ôt_m¨k_ty≥
 
mt
, c⁄° *
∑ømëî
))

3449 
ITT_STUB
(
ITTAPI
, , 
m¨k_globÆW
, (
__ôt_m¨k_ty≥
 
mt
, c⁄° 
wch¨_t
 *
∑ømëî
))

3451 
ITT_STUB
(
ITTAPI
, , 
m¨k_globÆ
, (
__ôt_m¨k_ty≥
 
mt
, c⁄° *
∑ømëî
))

3453 #i‡
ITT_PLATFORM
==
ITT_PLATFORM_WIN


3454 
	#__ôt_m¨k_globÆA
 
	`ITTNOTIFY_DATA
(
m¨k_globÆA
)

	)

3455 
	#__ôt_m¨k_globÆA_±r
 
	`ITTNOTIFY_NAME
(
m¨k_globÆA
)

	)

3456 
	#__ôt_m¨k_globÆW
 
	`ITTNOTIFY_DATA
(
m¨k_globÆW
)

	)

3457 
	#__ôt_m¨k_globÆW_±r
 
	`ITTNOTIFY_NAME
(
m¨k_globÆW
)

	)

3459 
	#__ôt_m¨k_globÆ
 
	`ITTNOTIFY_DATA
(
m¨k_globÆ
)

	)

3460 
	#__ôt_m¨k_globÆ_±r
 
	`ITTNOTIFY_NAME
(
m¨k_globÆ
)

	)

3463 #i‡
ITT_PLATFORM
==
ITT_PLATFORM_WIN


3464 
	#__ôt_m¨k_globÆA
(
mt
, 
∑ømëî
Ë()0

	)

3465 
	#__ôt_m¨k_globÆA_±r
 0

	)

3466 
	#__ôt_m¨k_globÆW
(
mt
, 
∑ømëî
Ë()0

	)

3467 
	#__ôt_m¨k_globÆW_±r
 0

	)

3469 
	#__ôt_m¨k_globÆ
(
mt
, 
∑ømëî
Ë()0

	)

3470 
	#__ôt_m¨k_globÆ_±r
 0

	)

3474 #i‡
ITT_PLATFORM
==
ITT_PLATFORM_WIN


3475 
	#__ôt_m¨k_globÆA_±r
 0

	)

3476 
	#__ôt_m¨k_globÆW_±r
 0

	)

3478 
	#__ôt_m¨k_globÆ_±r
 0

	)

3498 
ITTAPI
 
__ôt_m¨k_off
(
__ôt_m¨k_ty≥
 
mt
);

3501 #i‚de‡
INTEL_NO_MACRO_BODY


3502 #i‚de‡
INTEL_NO_ITTNOTIFY_API


3503 
ITT_STUB
(
ITTAPI
, , 
m¨k_off
, (
__ôt_m¨k_ty≥
 
mt
))

3504 
	#__ôt_m¨k_off
 
	`ITTNOTIFY_DATA
(
m¨k_off
)

	)

3505 
	#__ôt_m¨k_off_±r
 
	`ITTNOTIFY_NAME
(
m¨k_off
)

	)

3507 
	#__ôt_m¨k_off
(
mt
Ë()0

	)

3508 
	#__ôt_m¨k_off_±r
 0

	)

3511 
	#__ôt_m¨k_off_±r
 0

	)

3519 
ITTAPI
 
__ôt_m¨k_globÆ_off
(
__ôt_m¨k_ty≥
 
mt
);

3522 #i‚de‡
INTEL_NO_MACRO_BODY


3523 #i‚de‡
INTEL_NO_ITTNOTIFY_API


3524 
ITT_STUB
(
ITTAPI
, , 
m¨k_globÆ_off
, (
__ôt_m¨k_ty≥
 
mt
))

3525 
	#__ôt_m¨k_globÆ_off
 
	`ITTNOTIFY_DATA
(
m¨k_globÆ_off
)

	)

3526 
	#__ôt_m¨k_globÆ_off_±r
 
	`ITTNOTIFY_NAME
(
m¨k_globÆ_off
)

	)

3528 
	#__ôt_m¨k_globÆ_off
(
mt
Ë()0

	)

3529 
	#__ôt_m¨k_globÆ_off_±r
 0

	)

3532 
	#__ôt_m¨k_globÆ_off_±r
 0

	)

3546 
___ôt_cou¡î
 *
	t__ôt_cou¡î
;

3554 #i‡
ITT_PLATFORM
==
ITT_PLATFORM_WIN


3555 
__ôt_cou¡î
 
ITTAPI
 
__ôt_cou¡î_¸óãA
(c⁄° *
«me
, c⁄° *
domaö
);

3556 
__ôt_cou¡î
 
ITTAPI
 
__ôt_cou¡î_¸óãW
(c⁄° 
wch¨_t
 *
«me
, c⁄° wch¨_à*
domaö
);

3557 #i‡
deföed
(
UNICODE
Ë|| deföed(
_UNICODE
)

3558 
	#__ôt_cou¡î_¸óã
 
__ôt_cou¡î_¸óãW


	)

3559 
	#__ôt_cou¡î_¸óã_±r
 
__ôt_cou¡î_¸óãW_±r


	)

3561 
	#__ôt_cou¡î_¸óã
 
__ôt_cou¡î_¸óãA


	)

3562 
	#__ôt_cou¡î_¸óã_±r
 
__ôt_cou¡î_¸óãA_±r


	)

3565 
__ôt_cou¡î
 
ITTAPI
 
__ôt_cou¡î_¸óã
(c⁄° *
«me
, c⁄° *
domaö
);

3569 #i‚de‡
INTEL_NO_MACRO_BODY


3570 #i‚de‡
INTEL_NO_ITTNOTIFY_API


3571 #i‡
ITT_PLATFORM
==
ITT_PLATFORM_WIN


3572 
ITT_STUB
(
ITTAPI
, 
__ôt_cou¡î
, 
cou¡î_¸óãA
, (c⁄° *
«me
, c⁄° *
domaö
))

3573 
ITT_STUB
(
ITTAPI
, 
__ôt_cou¡î
, 
cou¡î_¸óãW
, (c⁄° 
wch¨_t
 *
«me
, c⁄° wch¨_à*
domaö
))

3575 
ITT_STUB
(
ITTAPI
, 
__ôt_cou¡î
, 
cou¡î_¸óã
, (c⁄° *
«me
, c⁄° *
domaö
))

3577 #i‡
ITT_PLATFORM
==
ITT_PLATFORM_WIN


3578 
	#__ôt_cou¡î_¸óãA
 
	`ITTNOTIFY_DATA
(
cou¡î_¸óãA
)

	)

3579 
	#__ôt_cou¡î_¸óãA_±r
 
	`ITTNOTIFY_NAME
(
cou¡î_¸óãA
)

	)

3580 
	#__ôt_cou¡î_¸óãW
 
	`ITTNOTIFY_DATA
(
cou¡î_¸óãW
)

	)

3581 
	#__ôt_cou¡î_¸óãW_±r
 
	`ITTNOTIFY_NAME
(
cou¡î_¸óãW
)

	)

3583 
	#__ôt_cou¡î_¸óã
 
	`ITTNOTIFY_DATA
(
cou¡î_¸óã
)

	)

3584 
	#__ôt_cou¡î_¸óã_±r
 
	`ITTNOTIFY_NAME
(
cou¡î_¸óã
)

	)

3587 #i‡
ITT_PLATFORM
==
ITT_PLATFORM_WIN


3588 
	#__ôt_cou¡î_¸óãA
(
«me
, 
domaö
)

	)

3589 
	#__ôt_cou¡î_¸óãA_±r
 0

	)

3590 
	#__ôt_cou¡î_¸óãW
(
«me
, 
domaö
)

	)

3591 
	#__ôt_cou¡î_¸óãW_±r
 0

	)

3593 
	#__ôt_cou¡î_¸óã
(
«me
, 
domaö
)

	)

3594 
	#__ôt_cou¡î_¸óã_±r
 0

	)

3598 #i‡
ITT_PLATFORM
==
ITT_PLATFORM_WIN


3599 
	#__ôt_cou¡î_¸óãA_±r
 0

	)

3600 
	#__ôt_cou¡î_¸óãW_±r
 0

	)

3602 
	#__ôt_cou¡î_¸óã_±r
 0

	)

3610 
ITTAPI
 
__ôt_cou¡î_de°roy
(
__ôt_cou¡î
 
id
);

3613 #i‚de‡
INTEL_NO_MACRO_BODY


3614 #i‚de‡
INTEL_NO_ITTNOTIFY_API


3615 
ITT_STUBV
(
ITTAPI
, , 
cou¡î_de°roy
, (
__ôt_cou¡î
 
id
))

3616 
	#__ôt_cou¡î_de°roy
 
	`ITTNOTIFY_VOID
(
cou¡î_de°roy
)

	)

3617 
	#__ôt_cou¡î_de°roy_±r
 
	`ITTNOTIFY_NAME
(
cou¡î_de°roy
)

	)

3619 
	#__ôt_cou¡î_de°roy
(
id
)

	)

3620 
	#__ôt_cou¡î_de°roy_±r
 0

	)

3623 
	#__ôt_cou¡î_de°roy_±r
 0

	)

3630 
ITTAPI
 
__ôt_cou¡î_öc
(
__ôt_cou¡î
 
id
);

3633 #i‚de‡
INTEL_NO_MACRO_BODY


3634 #i‚de‡
INTEL_NO_ITTNOTIFY_API


3635 
ITT_STUBV
(
ITTAPI
, , 
cou¡î_öc
, (
__ôt_cou¡î
 
id
))

3636 
	#__ôt_cou¡î_öc
 
	`ITTNOTIFY_VOID
(
cou¡î_öc
)

	)

3637 
	#__ôt_cou¡î_öc_±r
 
	`ITTNOTIFY_NAME
(
cou¡î_öc
)

	)

3639 
	#__ôt_cou¡î_öc
(
id
)

	)

3640 
	#__ôt_cou¡î_öc_±r
 0

	)

3643 
	#__ôt_cou¡î_öc_±r
 0

	)

3650 
ITTAPI
 
__ôt_cou¡î_öc_dñè
(
__ôt_cou¡î
 
id
, 
vÆue
);

3653 #i‚de‡
INTEL_NO_MACRO_BODY


3654 #i‚de‡
INTEL_NO_ITTNOTIFY_API


3655 
ITT_STUBV
(
ITTAPI
, , 
cou¡î_öc_dñè
, (
__ôt_cou¡î
 
id
, 
vÆue
))

3656 
	#__ôt_cou¡î_öc_dñè
 
	`ITTNOTIFY_VOID
(
cou¡î_öc_dñè
)

	)

3657 
	#__ôt_cou¡î_öc_dñè_±r
 
	`ITTNOTIFY_NAME
(
cou¡î_öc_dñè
)

	)

3659 
	#__ôt_cou¡î_öc_dñè
(
id
, 
vÆue
)

	)

3660 
	#__ôt_cou¡î_öc_dñè_±r
 0

	)

3663 
	#__ôt_cou¡î_öc_dñè_±r
 0

	)

3677 
___ôt_ˇŒî
 *
	t__ôt_ˇŒî
;

3683 
__ôt_ˇŒî
 
ITTAPI
 
__ôt_°ack_ˇŒî_¸óã
();

3686 #i‚de‡
INTEL_NO_MACRO_BODY


3687 #i‚de‡
INTEL_NO_ITTNOTIFY_API


3688 
ITT_STUB
(
ITTAPI
, 
__ôt_ˇŒî
, 
°ack_ˇŒî_¸óã
, ())

3689 
	#__ôt_°ack_ˇŒî_¸óã
 
	`ITTNOTIFY_DATA
(
°ack_ˇŒî_¸óã
)

	)

3690 
	#__ôt_°ack_ˇŒî_¸óã_±r
 
	`ITTNOTIFY_NAME
(
°ack_ˇŒî_¸óã
)

	)

3692 
	#__ôt_°ack_ˇŒî_¸óã
(Ë(
__ôt_ˇŒî
)0

	)

3693 
	#__ôt_°ack_ˇŒî_¸óã_±r
 0

	)

3696 
	#__ôt_°ack_ˇŒî_¸óã_±r
 0

	)

3703 
ITTAPI
 
__ôt_°ack_ˇŒî_de°roy
(
__ôt_ˇŒî
 
id
);

3706 #i‚de‡
INTEL_NO_MACRO_BODY


3707 #i‚de‡
INTEL_NO_ITTNOTIFY_API


3708 
ITT_STUBV
(
ITTAPI
, , 
°ack_ˇŒî_de°roy
, (
__ôt_ˇŒî
 
id
))

3709 
	#__ôt_°ack_ˇŒî_de°roy
 
	`ITTNOTIFY_VOID
(
°ack_ˇŒî_de°roy
)

	)

3710 
	#__ôt_°ack_ˇŒî_de°roy_±r
 
	`ITTNOTIFY_NAME
(
°ack_ˇŒî_de°roy
)

	)

3712 
	#__ôt_°ack_ˇŒî_de°roy
(
id
)

	)

3713 
	#__ôt_°ack_ˇŒî_de°roy_±r
 0

	)

3716 
	#__ôt_°ack_ˇŒî_de°roy_±r
 0

	)

3724 
ITTAPI
 
__ôt_°ack_ˇŒì_íãr
(
__ôt_ˇŒî
 
id
);

3727 #i‚de‡
INTEL_NO_MACRO_BODY


3728 #i‚de‡
INTEL_NO_ITTNOTIFY_API


3729 
ITT_STUBV
(
ITTAPI
, , 
°ack_ˇŒì_íãr
, (
__ôt_ˇŒî
 
id
))

3730 
	#__ôt_°ack_ˇŒì_íãr
 
	`ITTNOTIFY_VOID
(
°ack_ˇŒì_íãr
)

	)

3731 
	#__ôt_°ack_ˇŒì_íãr_±r
 
	`ITTNOTIFY_NAME
(
°ack_ˇŒì_íãr
)

	)

3733 
	#__ôt_°ack_ˇŒì_íãr
(
id
)

	)

3734 
	#__ôt_°ack_ˇŒì_íãr_±r
 0

	)

3737 
	#__ôt_°ack_ˇŒì_íãr_±r
 0

	)

3744 
ITTAPI
 
__ôt_°ack_ˇŒì_Àave
(
__ôt_ˇŒî
 
id
);

3747 #i‚de‡
INTEL_NO_MACRO_BODY


3748 #i‚de‡
INTEL_NO_ITTNOTIFY_API


3749 
ITT_STUBV
(
ITTAPI
, , 
°ack_ˇŒì_Àave
, (
__ôt_ˇŒî
 
id
))

3750 
	#__ôt_°ack_ˇŒì_Àave
 
	`ITTNOTIFY_VOID
(
°ack_ˇŒì_Àave
)

	)

3751 
	#__ôt_°ack_ˇŒì_Àave_±r
 
	`ITTNOTIFY_NAME
(
°ack_ˇŒì_Àave
)

	)

3753 
	#__ôt_°ack_ˇŒì_Àave
(
id
)

	)

3754 
	#__ôt_°ack_ˇŒì_Àave_±r
 0

	)

3757 
	#__ôt_°ack_ˇŒì_Àave_±r
 0

	)

3765 
	~<°d¨g.h
>

3768 
	e__ôt_îr‹_code


3770 
__ôt_îr‹_suc˚ss
 = 0,

3771 
__ôt_îr‹_no_moduÀ
 = 1,

3773 
__ôt_îr‹_no_symbﬁ
 = 2,

3775 
__ôt_îr‹_unknown_group
 = 3,

3777 
__ôt_îr‹_ˇ¡_ªad_ív
 = 4,

3779 
__ôt_îr‹_ív_too_l⁄g
 = 5,

3781 
__ôt_îr‹_sy°em
 = 6

3783 } 
	t__ôt_îr‹_code
;

3785 (
__ôt_îr‹_h™dÀr_t
)(
	t__ôt_îr‹_code
 
	tcode
, 
	tva_li°
);

3786 
__ôt_îr‹_h™dÀr_t
* 
__ôt_£t_îr‹_h™dÀr
(__itt_error_handler_t*);

3788 c⁄° * 
ITTAPI
 
__ôt_≠i_vîsi⁄
();

3792 #i‚de‡
INTEL_NO_MACRO_BODY


3793 #i‚de‡
INTEL_NO_ITTNOTIFY_API


3794 
	#__ôt_îr‹_h™dÀr
 
	`ITT_JOIN
(
INTEL_ITTNOTIFY_PREFIX
, 
îr‹_h™dÀr
)

	)

3795 
__ôt_îr‹_h™dÀr
(
__ôt_îr‹_code
 
code
, 
va_li°
 
¨gs
);

3796 c⁄° 
ITTNOTIFY_NAME
(
îr
);

3797 
	#__ôt_îr
 
	`ITTNOTIFY_NAME
(
îr
)

	)

3798 
ITT_STUB
(
ITTAPI
, c⁄° *, 
≠i_vîsi⁄
, ())

3799 
	#__ôt_≠i_vîsi⁄
 
	`ITTNOTIFY_DATA
(
≠i_vîsi⁄
)

	)

3800 
	#__ôt_≠i_vîsi⁄_±r
 
	`ITTNOTIFY_NAME
(
≠i_vîsi⁄
)

	)

3802 
	#__ôt_≠i_vîsi⁄
(Ë(c⁄° *)0

	)

3803 
	#__ôt_≠i_vîsi⁄_±r
 0

	)

3806 
	#__ôt_≠i_vîsi⁄_±r
 0

	)

3810 #ifde‡
__˝lu•lus


	@viper/concurrentqueue-src/benchmarks/tbb/tools_api/ittnotify_config.h

21 #i‚de‡
_ITTNOTIFY_CONFIG_H_


22 
	#_ITTNOTIFY_CONFIG_H_


	)

25 #i‚de‡
ITT_OS_WIN


26 
	#ITT_OS_WIN
 1

	)

29 #i‚de‡
ITT_OS_LINUX


30 
	#ITT_OS_LINUX
 2

	)

33 #i‚de‡
ITT_OS_MAC


34 
	#ITT_OS_MAC
 3

	)

37 #i‚de‡
ITT_OS


38 #i‡
deföed
 
WIN32
 || deföed 
_WIN32


39 
	#ITT_OS
 
ITT_OS_WIN


	)

40 #ñi‡
deföed
–
__APPLE__
 ) && deföed–
__MACH__
 )

41 
	#ITT_OS
 
ITT_OS_MAC


	)

43 
	#ITT_OS
 
ITT_OS_LINUX


	)

47 #i‚de‡
ITT_PLATFORM_WIN


48 
	#ITT_PLATFORM_WIN
 1

	)

51 #i‚de‡
ITT_PLATFORM_POSIX


52 
	#ITT_PLATFORM_POSIX
 2

	)

55 #i‚de‡
ITT_PLATFORM_MAC


56 
	#ITT_PLATFORM_MAC
 3

	)

59 #i‚de‡
ITT_PLATFORM


60 #i‡
ITT_OS
==
ITT_OS_WIN


61 
	#ITT_PLATFORM
 
ITT_PLATFORM_WIN


	)

62 #ñi‡
ITT_OS
==
ITT_OS_MAC


63 
	#ITT_PLATFORM
 
ITT_PLATFORM_MAC


	)

65 
	#ITT_PLATFORM
 
ITT_PLATFORM_POSIX


	)

69 #i‡
deföed
(
_UNICODE
Ë&& !deföed(
UNICODE
)

70 
	#UNICODE


	)

73 
	~<°ddef.h
>

74 #i‡
ITT_PLATFORM
==
ITT_PLATFORM_WIN


75 
	~<tch¨.h
>

77 
	~<°döt.h
>

78 #i‡
deföed
(
UNICODE
Ë|| deföed(
_UNICODE
)

79 
	~<wch¨.h
>

83 #i‚de‡
CDECL


84 #i‡
ITT_PLATFORM
==
ITT_PLATFORM_WIN


85 
	#CDECL
 
__cde˛


	)

87 #i‡
deföed
 
_M_IX86
 || deföed 
__i386__


88 
	#CDECL
 
	`__©åibuã__
 ((
cde˛
))

	)

90 
	#CDECL


	)

95 #i‚de‡
STDCALL


96 #i‡
ITT_PLATFORM
==
ITT_PLATFORM_WIN


97 
	#STDCALL
 
__°dˇŒ


	)

99 #i‡
deföed
 
_M_IX86
 || deföed 
__i386__


100 
	#STDCALL
 
	`__©åibuã__
 ((
°dˇŒ
))

	)

102 
	#STDCALL


	)

107 
	#ITTAPI
 
CDECL


	)

108 
	#LIBITTAPI
 
CDECL


	)

111 
	#ITTAPI_CALL
 
CDECL


	)

112 
	#LIBITTAPI_CALL
 
CDECL


	)

114 #i‡
ITT_PLATFORM
==
ITT_PLATFORM_WIN


116 
	#ITT_INLINE
 
__f‹˚ölöe


	)

117 
	#ITT_INLINE_ATTRIBUTE


	)

124 #ifde‡
__STRICT_ANSI__


125 
	#ITT_INLINE
 
ölöe


	)

127 
	#ITT_INLINE
 
ölöe


	)

129 
	#ITT_INLINE_ATTRIBUTE
 
	`__©åibuã__
 ((
Æways_ölöe
, 
unu£d
))

	)

133 #i‚de‡
ITT_ARCH_IA32


134 
	#ITT_ARCH_IA32
 1

	)

137 #i‚de‡
ITT_ARCH_IA32E


138 
	#ITT_ARCH_IA32E
 2

	)

141 #i‚de‡
ITT_ARCH_ARM


142 
	#ITT_ARCH_ARM
 4

	)

145 #i‚de‡
ITT_ARCH


146 #i‡
deföed
 
_M_IX86
 || deföed 
__i386__


147 
	#ITT_ARCH
 
ITT_ARCH_IA32


	)

148 #ñi‡
deföed
 
_M_X64
 || deföed 
_M_AMD64
 || deföed 
__x86_64__


149 
	#ITT_ARCH
 
ITT_ARCH_IA32E


	)

150 #ñi‡
deföed
 
_M_IA64
 || deföed 
__ü64__


151 
	#ITT_ARCH
 
ITT_ARCH_IA64


	)

152 #ñi‡
deföed
 
_M_ARM
 || 
__¨m__


153 
	#ITT_ARCH
 
ITT_ARCH_ARM


	)

157 #ifde‡
__˝lu•lus


158 
	#ITT_EXTERN_C
 "C"

	)

160 
	#ITT_EXTERN_C


	)

163 
	#ITT_TO_STR_AUX
(
x
Ë#x

	)

164 
	#ITT_TO_STR
(
x
Ë
	`ITT_TO_STR_AUX
(x)

	)

166 
	#__ITT_BUILD_ASSERT
(
ex¥
, 
suffix
) do { \

167 
__ôt_buûd_check_
##
suffix
[(
ex¥
) ? 1 : -1]; \

168 
__ôt_buûd_check_
##
suffix
[0] = 0; \

169 } 0)

	)

170 
	#_ITT_BUILD_ASSERT
(
ex¥
, 
suffix
Ë
	`__ITT_BUILD_ASSERT
(”x¥), suffix)

	)

171 
	#ITT_BUILD_ASSERT
(
ex¥
Ë
	`_ITT_BUILD_ASSERT
(”x¥), 
__LINE__
)

	)

173 
	#ITT_MAGIC
 { 0xED, 0xAB, 0xAB, 0xEC, 0x0D, 0xEE, 0xDA, 0x30 }

	)

176 
	#API_VERSION_BUILD
 20111111

	)

178 #i‚de‡
API_VERSION_NUM


179 
	#API_VERSION_NUM
 0.0.0

	)

182 
	#API_VERSION
 "ITT-API-Vîsi⁄ " 
	`ITT_TO_STR
(
API_VERSION_NUM
) \

183 " (" 
	`ITT_TO_STR
(
API_VERSION_BUILD
Ë")"

	)

186 #i‡
ITT_PLATFORM
==
ITT_PLATFORM_WIN


187 
	~<wödows.h
>

188 
HMODULE
 
	tlib_t
;

189 
DWORD
 
	tTIDT
;

190 
CRITICAL_SECTION
 
	tmuãx_t
;

191 
	#MUTEX_INITIALIZER
 { 0 }

	)

192 
	#°r⁄g_Æüs
(
«me
, 
Æü¢ame
Ë

	)

194 
	~<dlf˙.h
>

195 #i‡
deföed
(
UNICODE
Ë|| deföed(
_UNICODE
)

196 
	~<wch¨.h
>

198 #i‚de‡
_GNU_SOURCE


199 
	#_GNU_SOURCE
 1

	)

201 #i‚de‡
__USE_UNIX98


202 
	#__USE_UNIX98
 1

	)

204 
	~<±hªad.h
>

205 * 
	tlib_t
;

206 
±hªad_t
 
	tTIDT
;

207 
±hªad_muãx_t
 
	tmuãx_t
;

208 
	#MUTEX_INITIALIZER
 
PTHREAD_MUTEX_INITIALIZER


	)

209 
	#_°r⁄g_Æüs
(
«me
, 
Æü¢ame
) \

210 
	`__ty≥of
 (
«me
Ë
Æü¢ame
 
	`__©åibuã__
 ((
	`Æüs
 (#«me)));

	)

211 
	#°r⁄g_Æüs
(
«me
, 
Æü¢ame
Ë
	`_°r⁄g_Æüs
“ame,álü¢ame)

	)

214 #i‡
ITT_PLATFORM
==
ITT_PLATFORM_WIN


215 
	#__ôt_gë_¥oc
(
lib
, 
«me
Ë
	`GëProcAddªss
÷ib,Çame)

	)

216 
	#__ôt_muãx_öô
(
muãx
Ë
	`InôülizeCrôiˇlSe˘i⁄
(muãx)

	)

217 
	#__ôt_muãx_lock
(
muãx
Ë
	`E¡îCrôiˇlSe˘i⁄
(muãx)

	)

218 
	#__ôt_muãx_u∆ock
(
muãx
Ë
	`LóveCrôiˇlSe˘i⁄
(muãx)

	)

219 
	#__ôt_lﬂd_lib
(
«me
Ë
	`LﬂdLibøryA
“ame)

	)

220 
	#__ôt_u∆ﬂd_lib
(
h™dÀ
Ë
	`FªeLibøry
(h™dÀ)

	)

221 
	#__ôt_sy°em_îr‹
(Ë()
	`GëLa°Eº‹
()

	)

222 
	#__ôt_f°rcmp
(
s1
, 
s2
Ë
	`l°rcmpA
(s1, s2)

	)

223 
	#__ôt_f°æí
(
s
Ë
	`l°æíA
(s)

	)

224 
	#__ôt_f°r˝yn
(
s1
, 
s2
, 
l
Ë
	`l°r˝ynA
(s1, s2,Ü)

	)

225 
	#__ôt_f°rdup
(
s
Ë
	`_°rdup
(s)

	)

226 
	#__ôt_thªad_id
(Ë
	`GëCuºítThªadId
()

	)

227 
	#__ôt_thªad_yõld
(Ë
	`SwôchToThªad
()

	)

228 #i‚de‡
ITT_SIMPLE_INIT


229 
ITT_INLINE
 

230 
	$__ôt_öãæocked_ö¸emít
(vﬁ©ûê* 
±r
Ë
ITT_INLINE_ATTRIBUTE
;

231 
ITT_INLINE
 
	$__ôt_öãæocked_ö¸emít
(vﬁ©ûê* 
±r
)

233  
	`I¡îlockedIn¸emít
(
±r
);

234 
	}
}

237 
	#__ôt_gë_¥oc
(
lib
, 
«me
Ë
	`dlsym
÷ib,Çame)

	)

238 
	#__ôt_muãx_öô
(
muãx
) {\

239 
±hªad_muãx©å_t
 
muãx_©å
; \

240 
îr‹_code
 = 
	`±hªad_muãx©å_öô
(&
muãx_©å
); \

241 i‡(
îr‹_code
) \

242 
	`__ôt_ªp‹t_îr‹
(
__ôt_îr‹_sy°em
, "pthread_mutexattr_init", \

243 
îr‹_code
); \

244 
îr‹_code
 = 
	`±hªad_muãx©å_£ây≥
(&
muãx_©å
, \

245 
PTHREAD_MUTEX_RECURSIVE
); \

246 i‡(
îr‹_code
) \

247 
	`__ôt_ªp‹t_îr‹
(
__ôt_îr‹_sy°em
, "pthread_mutexattr_settype", \

248 
îr‹_code
); \

249 
îr‹_code
 = 
	`±hªad_muãx_öô
(
muãx
, &
muãx_©å
); \

250 i‡(
îr‹_code
) \

251 
	`__ôt_ªp‹t_îr‹
(
__ôt_îr‹_sy°em
, "pthread_mutex_init", \

252 
îr‹_code
); \

253 
îr‹_code
 = 
	`±hªad_muãx©å_de°roy
(&
muãx_©å
); \

254 i‡(
îr‹_code
) \

255 
	`__ôt_ªp‹t_îr‹
(
__ôt_îr‹_sy°em
, "pthread_mutexattr_destroy", \

256 
îr‹_code
); \

257 }

	)

258 
	#__ôt_muãx_lock
(
muãx
Ë
	`±hªad_muãx_lock
(muãx)

	)

259 
	#__ôt_muãx_u∆ock
(
muãx
Ë
	`±hªad_muãx_u∆ock
(muãx)

	)

260 
	#__ôt_lﬂd_lib
(
«me
Ë
	`dl›í
“ame, 
RTLD_LAZY
)

	)

261 
	#__ôt_u∆ﬂd_lib
(
h™dÀ
Ë
	`dl˛o£
(h™dÀ)

	)

262 
	#__ôt_sy°em_îr‹
(Ë
î∫o


	)

263 
	#__ôt_f°rcmp
(
s1
, 
s2
Ë
	`°rcmp
(s1, s2)

	)

264 
	#__ôt_f°æí
(
s
Ë
	`°æí
(s)

	)

265 
	#__ôt_f°r˝yn
(
s1
, 
s2
, 
l
Ë
	`°∫˝y
(s1, s2,Ü)

	)

266 
	#__ôt_f°rdup
(
s
Ë
	`°rdup
(s)

	)

267 
	#__ôt_thªad_id
(Ë
	`±hªad_£lf
()

	)

268 
	#__ôt_thªad_yõld
(Ë
	`sched_yõld
()

	)

269 #i‡
ITT_ARCH
==
ITT_ARCH_IA64


270 #ifde‡
__INTEL_COMPILER


271 
	#__TBB_machöe_„tchadd4
(
addr
, 
vÆ
Ë
	`__„tchadd4_acq
((*Ôddr, vÆ)

	)

275 #ñi‡
ITT_ARCH
==
ITT_ARCH_IA32
 || ITT_ARCH==
ITT_ARCH_IA32E


276 
ITT_INLINE
 

277 
	$__TBB_machöe_„tchadd4
(vﬁ©ûê* 
±r
, 
addíd
Ë
ITT_INLINE_ATTRIBUTE
;

278 
ITT_INLINE
 
	$__TBB_machöe_„tchadd4
(vﬁ©ûê* 
±r
, 
addíd
)

280 
ªsu…
;

281 
__asm__
 
	`__vﬁ©ûe__
("lock\nxadd %0,%1"

282 : "Ù"(
ªsu…
),"=m"(*(*)
±r
)

283 : "0"(
addíd
), "m"(*(*)
±r
)

285  
ªsu…
;

286 
	}
}

287 #ñi‡
ITT_ARCH
==
ITT_ARCH_ARM


288 
	#__TBB_machöe_„tchadd4
(
addr
, 
vÆ
Ë
	`__sync_„tch_™d_add
◊ddr, vÆ)

	)

290 #i‚de‡
ITT_SIMPLE_INIT


291 
ITT_INLINE
 

292 
	$__ôt_öãæocked_ö¸emít
(vﬁ©ûê* 
±r
Ë
ITT_INLINE_ATTRIBUTE
;

293 
ITT_INLINE
 
	$__ôt_öãæocked_ö¸emít
(vﬁ©ûê* 
±r
)

295  
	`__TBB_machöe_„tchadd4
(
±r
, 1) + 1L;

296 
	}
}

301 
	m__ôt_cﬁÀ˘i⁄_n‹mÆ
 = 0,

302 
	m__ôt_cﬁÀ˘i⁄_∑u£d
 = 1

303 } 
	t__ôt_cﬁÀ˘i⁄_°©e
;

306 
	m__ôt_thªad_n‹mÆ
 = 0,

307 
	m__ôt_thªad_ign‹ed
 = 1

308 } 
	t__ôt_thªad_°©e
;

310 #¥agm®
∑ck
(
push
, 8)

312 
	s___ôt_thªad_öfo


314 c⁄° * 
	m«meA
;

315 #i‡
deföed
(
UNICODE
Ë|| deföed(
_UNICODE
)

316 c⁄° 
wch¨_t
* 
	m«meW
;

318 * 
	m«meW
;

320 
TIDT
 
	mtid
;

321 
__ôt_thªad_°©e
 
	m°©e
;

322 
	mexåa1
;

323 * 
	mexåa2
;

324 
___ôt_thªad_öfo
* 
	m√xt
;

325 } 
	t__ôt_thªad_öfo
;

327 
	~"ôäŸify_ty≥s.h
"

329 
	s___ôt_≠i_öfo_20101001


331 c⁄° * 
	m«me
;

332 ** 
	mfunc_±r
;

333 * 
	möô_func
;

334 
__ôt_group_id
 
	mgroup
;

335 } 
	t__ôt_≠i_öfo_20101001
;

337 
	s___ôt_≠i_öfo


339 c⁄° * 
	m«me
;

340 ** 
	mfunc_±r
;

341 * 
	möô_func
;

342 * 
	mnuŒ_func
;

343 
__ôt_group_id
 
	mgroup
;

344 } 
	t__ôt_≠i_öfo
;

346 
	g___ôt_domaö
;

347 
	g___ôt_°rög_h™dÀ
;

349 
	s___ôt_globÆ


351 
	mmagic
[8];

352 
	mvîsi⁄_maj‹
;

353 
	mvîsi⁄_mö‹
;

354 
	mvîsi⁄_buûd
;

355 vﬁ©ûê
	m≠i_öôülized
;

356 vﬁ©ûê
	mmuãx_öôülized
;

357 vﬁ©ûê
	m©omic_cou¡î
;

358 
muãx_t
 
	mmuãx
;

359 
lib_t
 
	mlib
;

360 * 
	mîr‹_h™dÀr
;

361 c⁄° ** 
	mdŒ_∑th_±r
;

362 
__ôt_≠i_öfo
* 
	m≠i_li°_±r
;

363 
___ôt_globÆ
* 
	m√xt
;

365 
__ôt_thªad_öfo
* 
	mthªad_li°
;

366 
___ôt_domaö
* 
	mdomaö_li°
;

367 
___ôt_°rög_h™dÀ
* 
	m°rög_li°
;

368 
__ôt_cﬁÀ˘i⁄_°©e
 
	m°©e
;

369 } 
	t__ôt_globÆ
;

371 #¥agm®
∑ck
(
p›
)

373 
	#NEW_THREAD_INFO_W
(
g±r
,
h
,
h_èû
,
t
,
s
,
n
) { \

374 
h
 = (
__ôt_thªad_öfo
*)
	`mÆloc
((__itt_thread_info)); \

375 i‡(
h
 !
NULL
) { \

376 
h
->
tid
 = 
t
; \

377 
h
->
«meA
 = 
NULL
; \

378 
h
->
«meW
 = 
n
 ? 
	`_wcsdup
“Ë: 
NULL
; \

379 
h
->
°©e
 = 
s
; \

380 
h
->
exåa1
 = 0; \

381 
h
->
exåa2
 = 
NULL
; \

382 
h
->
√xt
 = 
NULL
; \

383 i‡(
h_èû
 =
NULL
) \

384 (
g±r
)->
thªad_li°
 = 
h
; \

386 
h_èû
->
√xt
 = 
h
; \

388 }

	)

390 
	#NEW_THREAD_INFO_A
(
g±r
,
h
,
h_èû
,
t
,
s
,
n
) { \

391 
h
 = (
__ôt_thªad_öfo
*)
	`mÆloc
((__itt_thread_info)); \

392 i‡(
h
 !
NULL
) { \

393 
h
->
tid
 = 
t
; \

394 
h
->
«meA
 = 
n
 ? 
	`__ôt_f°rdup
“Ë: 
NULL
; \

395 
h
->
«meW
 = 
NULL
; \

396 
h
->
°©e
 = 
s
; \

397 
h
->
exåa1
 = 0; \

398 
h
->
exåa2
 = 
NULL
; \

399 
h
->
√xt
 = 
NULL
; \

400 i‡(
h_èû
 =
NULL
) \

401 (
g±r
)->
thªad_li°
 = 
h
; \

403 
h_èû
->
√xt
 = 
h
; \

405 }

	)

407 
	#NEW_DOMAIN_W
(
g±r
,
h
,
h_èû
,
«me
) { \

408 
h
 = (
__ôt_domaö
*)
	`mÆloc
((__itt_domain)); \

409 i‡(
h
 !
NULL
) { \

410 
h
->
Êags
 = 0; \

411 
h
->
«meA
 = 
NULL
; \

412 
h
->
«meW
 = 
«me
 ? 
	`_wcsdup
“ameË: 
NULL
; \

413 
h
->
exåa1
 = 0; \

414 
h
->
exåa2
 = 
NULL
; \

415 
h
->
√xt
 = 
NULL
; \

416 i‡(
h_èû
 =
NULL
) \

417 (
g±r
)->
domaö_li°
 = 
h
; \

419 
h_èû
->
√xt
 = 
h
; \

421 }

	)

423 
	#NEW_DOMAIN_A
(
g±r
,
h
,
h_èû
,
«me
) { \

424 
h
 = (
__ôt_domaö
*)
	`mÆloc
((__itt_domain)); \

425 i‡(
h
 !
NULL
) { \

426 
h
->
Êags
 = 0; \

427 
h
->
«meA
 = 
«me
 ? 
	`__ôt_f°rdup
“ameË: 
NULL
; \

428 
h
->
«meW
 = 
NULL
; \

429 
h
->
exåa1
 = 0; \

430 
h
->
exåa2
 = 
NULL
; \

431 
h
->
√xt
 = 
NULL
; \

432 i‡(
h_èû
 =
NULL
) \

433 (
g±r
)->
domaö_li°
 = 
h
; \

435 
h_èû
->
√xt
 = 
h
; \

437 }

	)

439 
	#NEW_STRING_HANDLE_W
(
g±r
,
h
,
h_èû
,
«me
) { \

440 
h
 = (
__ôt_°rög_h™dÀ
*)
	`mÆloc
((__itt_string_handle)); \

441 i‡(
h
 !
NULL
) { \

442 
h
->
°rA
 = 
NULL
; \

443 
h
->
°rW
 = 
«me
 ? 
	`_wcsdup
“ameË: 
NULL
; \

444 
h
->
exåa1
 = 0; \

445 
h
->
exåa2
 = 
NULL
; \

446 
h
->
√xt
 = 
NULL
; \

447 i‡(
h_èû
 =
NULL
) \

448 (
g±r
)->
°rög_li°
 = 
h
; \

450 
h_èû
->
√xt
 = 
h
; \

452 }

	)

454 
	#NEW_STRING_HANDLE_A
(
g±r
,
h
,
h_èû
,
«me
) { \

455 
h
 = (
__ôt_°rög_h™dÀ
*)
	`mÆloc
((__itt_string_handle)); \

456 i‡(
h
 !
NULL
) { \

457 
h
->
°rA
 = 
«me
 ? 
	`__ôt_f°rdup
“ameË: 
NULL
; \

458 
h
->
°rW
 = 
NULL
; \

459 
h
->
exåa1
 = 0; \

460 
h
->
exåa2
 = 
NULL
; \

461 
h
->
√xt
 = 
NULL
; \

462 i‡(
h_èû
 =
NULL
) \

463 (
g±r
)->
°rög_li°
 = 
h
; \

465 
h_èû
->
√xt
 = 
h
; \

467 }

	)

	@viper/concurrentqueue-src/benchmarks/tbb/tools_api/ittnotify_static.c

21 
	~"ôäŸify_c⁄fig.h
"

23 #i‡
ITT_PLATFORM
==
ITT_PLATFORM_WIN


24 
	#PATH_MAX
 512

	)

26 
	~<limôs.h
>

27 
	~<dlf˙.h
>

28 
	~<î∫o.h
>

30 
	~<°dio.h
>

31 
	~<°dlib.h
>

32 
	~<°d¨g.h
>

33 
	~<°rög.h
>

35 
	#INTEL_NO_MACRO_BODY


	)

36 
	#INTEL_ITTNOTIFY_API_PRIVATE


	)

37 
	~"ôäŸify.h
"

38 
	~"Àgacy/ôäŸify.h
"

40 
	~"dißbÀ_w¨nögs.h
"

42 c⁄° 
	g≠i_vîsi⁄
[] = 
API_VERSION
 "\0\n@(#) $Revision: 336044 $\n";

44 
	#_N_
(
n
Ë
	`ITT_JOIN
(
INTEL_ITTNOTIFY_PREFIX
,n)

	)

46 #i‡
ITT_OS
==
ITT_OS_WIN


47 c⁄° * 
	gôäŸify_lib_«me
 = "libittnotify.dll";

48 #ñi‡
ITT_OS
==
ITT_OS_LINUX


49 c⁄° * 
	gôäŸify_lib_«me
 = "libittnotify.so";

50 #ñi‡
ITT_OS
==
ITT_OS_MAC


51 c⁄° * 
	gôäŸify_lib_«me
 = "libittnotify.dylib";

53 #îr‹ 
Unsuµ‹ãd
 
‹
 
unknown
 
OS
.

56 #ifde‡
__ANDROID__


57 
	~<™droid/log.h
>

58 
	~<°dio.h
>

59 
	~<uni°d.h
>

60 
	~<sys/ty≥s.h
>

61 
	~<sys/°©.h
>

62 
	~<f˙é.h
>

63 
	~<löux/limôs.h
>

65 #ifde‡
ITT_ANDROID_LOG


66 
	#ITT_ANDROID_LOG_TAG
 "INTEL_VTUNE_USERAPI"

	)

67 
	#ITT_ANDROID_LOGI
(...Ë(()
	`__™droid_log_¥öt
(
ANDROID_LOG_INFO
, 
ITT_ANDROID_LOG_TAG
, 
__VA_ARGS__
))

	)

68 
	#ITT_ANDROID_LOGW
(...Ë(()
	`__™droid_log_¥öt
(
ANDROID_LOG_WARN
, 
ITT_ANDROID_LOG_TAG
, 
__VA_ARGS__
))

	)

69 
	#ITT_ANDROID_LOGE
(...Ë(()
	`__™droid_log_¥öt
(
ANDROID_LOG_ERROR
,
ITT_ANDROID_LOG_TAG
, 
__VA_ARGS__
))

	)

70 
	#ITT_ANDROID_LOGD
(...Ë(()
	`__™droid_log_¥öt
(
ANDROID_LOG_DEBUG
,
ITT_ANDROID_LOG_TAG
, 
__VA_ARGS__
))

	)

72 
	#ITT_ANDROID_LOGI
(...)

	)

73 
	#ITT_ANDROID_LOGW
(...)

	)

74 
	#ITT_ANDROID_LOGE
(...)

	)

75 
	#ITT_ANDROID_LOGD
(...)

	)

79 
	#ANDROID_ITTNOTIFY_DEFAULT_PATH
 "/d©a/d©a/com.öãl.vtu√/öãl/libôäŸify.so"

	)

83 #i‚de‡
LIB_VAR_NAME


84 #i‡
ITT_ARCH
==
ITT_ARCH_IA32
 || ITT_ARCH==
ITT_ARCH_ARM


85 
	#LIB_VAR_NAME
 
INTEL_LIBITTNOTIFY32


	)

87 
	#LIB_VAR_NAME
 
INTEL_LIBITTNOTIFY64


	)

91 
	#ITT_MUTEX_INIT_AND_LOCK
(
p
) { \

92 i‡(!
p
.
muãx_öôülized
) \

94 i‡(
	`__ôt_öãæocked_ö¸emít
(&
p
.
©omic_cou¡î
) == 1) \

96 
	`__ôt_muãx_öô
(&
p
.
muãx
); \

97 
p
.
muãx_öôülized
 = 1; \

100 !
p
.
muãx_öôülized
) \

101 
	`__ôt_thªad_yõld
(); \

103 
	`__ôt_muãx_lock
(&
p
.
muãx
); \

104 }

	)

106 c⁄° 
_N_
(
îr
) = 0;

108 (
	t__ôt_öô_ôéib_t
)(c⁄° *, 
	t__ôt_group_id
);

111 #i‚de‡
__ôt_öô_ôéib_«me


112 
ITT_EXTERN_C
 
	$_N_
(
öô_ôéib
)(c⁄° *, 
__ôt_group_id
);

113 
__ôt_öô_ôéib_t
* 
__ôt_öô_ôéib_±r
 = 
	`_N_
(
öô_ôéib
);

114 
	#__ôt_öô_ôéib_«me
 
__ôt_öô_ôéib_±r


	)

117 (
	t__ôt_föi_ôéib_t
)();

120 #i‚de‡
__ôt_föi_ôéib_«me


121 
ITT_EXTERN_C
 
	$_N_
(
föi_ôéib
)();

122 
__ôt_föi_ôéib_t
* 
__ôt_föi_ôéib_±r
 = 
	`_N_
(
föi_ôéib
);

123 
	#__ôt_föi_ôéib_«me
 
__ôt_föi_ôéib_±r


	)

127 #unde‡
ITT_STUBV


128 #unde‡
ITT_STUB


129 
	#ITT_STUB
(
≠i
,
ty≥
,
«me
,
¨gs
,
∑øms
,
±r
,
group
,
f‹m©
) \

130 
ty≥
 
≠i
 
	`ITT_VERSIONIZE
(
	`ITT_JOIN
(
	`_N_
(
«me
),
_öô
)Ë
¨gs
;\

131 
ty≥
 
	t≠i
 
	tITT_JOIN
(
	t_N_
(
	t«me
),
	t_t
Ë
	t¨gs
; \

132 
ITT_EXTERN_C
 { 
	`ITT_JOIN
(
	`_N_
(
«me
),
_t
)* 
	`ITTNOTIFY_NAME
“ameË
	`ITT_VERSIONIZE
(ITT_JOIN(_N_“ame),
_öô
)); 
	}
} \

133 
ty≥
 
≠i
 
	`ITT_VERSIONIZE
(
	`ITT_JOIN
(
	`_N_
(
«me
),
_öô
)Ë
¨gs
 \

135 
	`__ôt_öô_ôéib_«me
(
NULL
, 
__ôt_group_Æl
); \

136 i‡(
	`ITTNOTIFY_NAME
(
«me
Ë&& ITTNOTIFY_NAME“ameË!
	`ITT_VERSIONIZE
(
	`ITT_JOIN
(
	`_N_
“ame),
_öô
))) \

137  
	`ITTNOTIFY_NAME
(
«me
Ë
∑øms
; \

139  (
ty≥
)0; \

140 }

	)

142 
	#ITT_STUBV
(
≠i
,
ty≥
,
«me
,
¨gs
,
∑øms
,
±r
,
group
,
f‹m©
) \

143 
ty≥
 
≠i
 
	`ITT_VERSIONIZE
(
	`ITT_JOIN
(
	`_N_
(
«me
),
_öô
)Ë
¨gs
;\

144 
ty≥
 
	t≠i
 
	tITT_JOIN
(
	t_N_
(
	t«me
),
	t_t
Ë
	t¨gs
; \

145 
ITT_EXTERN_C
 { 
	`ITT_JOIN
(
	`_N_
(
«me
),
_t
)* 
	`ITTNOTIFY_NAME
“ameË
	`ITT_VERSIONIZE
(ITT_JOIN(_N_“ame),
_öô
)); } \

146 
ty≥
 
≠i
 
	`ITT_VERSIONIZE
(
	`ITT_JOIN
(
	`_N_
(
«me
),
_öô
)Ë
¨gs
 \

148 
	`__ôt_öô_ôéib_«me
(
NULL
, 
__ôt_group_Æl
); \

149 i‡(
	`ITTNOTIFY_NAME
(
«me
Ë&& ITTNOTIFY_NAME“ameË!
	`ITT_VERSIONIZE
(
	`ITT_JOIN
(
	`_N_
“ame),
_öô
))) \

150 
	`ITTNOTIFY_NAME
(
«me
Ë
∑øms
; \

153 }

	)

155 #unde‡
__ITT_INTERNAL_INIT


156 
	~"ôäŸify_°©ic.h
"

158 #unde‡
ITT_STUB


159 #unde‡
ITT_STUBV


160 
	#ITT_STUB
(
≠i
,
ty≥
,
«me
,
¨gs
,
∑øms
,
±r
,
group
,
f‹m©
) \

161 
ty≥
 
≠i
 
	`ITT_VERSIONIZE
(
	`ITT_JOIN
(
	`_N_
(
«me
),
_öô
)Ë
¨gs
;\

162 
ty≥
 
	t≠i
 
	tITT_JOIN
(
	t_N_
(
	t«me
),
	t_t
Ë
	t¨gs
; \

163 
ITT_EXTERN_C
 { 
	`ITT_JOIN
(
	`_N_
(
«me
),
_t
)* 
	`ITTNOTIFY_NAME
“ameË
	`ITT_VERSIONIZE
(ITT_JOIN(_N_“ame),
_öô
)); }

	)

165 
	#ITT_STUBV
(
≠i
,
ty≥
,
«me
,
¨gs
,
∑øms
,
±r
,
group
,
f‹m©
) \

166 
ty≥
 
≠i
 
	`ITT_VERSIONIZE
(
	`ITT_JOIN
(
	`_N_
(
«me
),
_öô
)Ë
¨gs
;\

167 
ty≥
 
	t≠i
 
	tITT_JOIN
(
	t_N_
(
	t«me
),
	t_t
Ë
	t¨gs
; \

168 
ITT_EXTERN_C
 { 
	`ITT_JOIN
(
	`_N_
(
«me
),
_t
)* 
	`ITTNOTIFY_NAME
“ameË
	`ITT_VERSIONIZE
(ITT_JOIN(_N_“ame),
_öô
)); }

	)

170 
	#__ITT_INTERNAL_INIT


	)

171 
	~"ôäŸify_°©ic.h
"

172 #unde‡
__ITT_INTERNAL_INIT


174 
ITT_GROUP_LIST
(
group_li°
);

176 #¥agm®
∑ck
(
push
, 8)

178 
	s___ôt_group_Æüs


180 c⁄° * 
	mív_v¨
;

181 
__ôt_group_id
 
	mgroups
;

182 } 
	t__ôt_group_Æüs
;

184 
__ôt_group_Æüs
 
	ggroup_Æüs
[] = {

185 { "KMP_FOR_TPROFILE", (
__ôt_group_id
)(
__ôt_group_c⁄åﬁ
 | 
__ôt_group_thªad
 | 
__ôt_group_sync
 | 
__ôt_group_m¨k
) },

186 { "KMP_FOR_TCHECK", (
__ôt_group_id
)(
__ôt_group_c⁄åﬁ
 | 
__ôt_group_thªad
 | 
__ôt_group_sync
 | 
__ôt_group_fsync
 | 
__ôt_group_m¨k
 | 
__ôt_group_suµªss
) },

187 { 
NULL
, (
__ôt_group_n⁄e
) },

188 { 
≠i_vîsi⁄
, (
__ôt_group_n⁄e
) }

191 #¥agm®
∑ck
(
p›
)

193 #i‡
ITT_PLATFORM
==
ITT_PLATFORM_WIN


194 #¥agm®
w¨nög
(
push
)

195 #¥agm®
w¨nög
(
dißbÀ
: 4054)

198 
__ôt_≠i_öfo
 
	g≠i_li°
[] = {

200 #unde‡
ITT_STUB


201 #unde‡
ITT_STUBV


202 
	#ITT_STUB
(
≠i
,
ty≥
,
«me
,
¨gs
,
∑øms
,
«meödŒ
,
group
,
f‹m©
Ë{ 
	`ITT_TO_STR
(
	`ITT_JOIN
(
__ôt_
,«meödŒ)), (**)(*)&
	`ITTNOTIFY_NAME
“ame), (*)(
size_t
)&
	`ITT_VERSIONIZE
(ITT_JOIN(
	`_N_
“ame),
_öô
)), (*)(size_t)&ITT_VERSIONIZE(ITT_JOIN(_N_“ame),_öô)), (
__ôt_group_id
)(group)},

	)

203 
	#ITT_STUBV
 
ITT_STUB


	)

204 
	#__ITT_INTERNAL_INIT


	)

205 
	~"ôäŸify_°©ic.h
"

206 #unde‡
__ITT_INTERNAL_INIT


208 #unde‡
ITT_STUB


209 #unde‡
ITT_STUBV


210 
	#ITT_STUB
(
≠i
,
ty≥
,
«me
,
¨gs
,
∑øms
,
«meödŒ
,
group
,
f‹m©
Ë{
	`ITT_TO_STR
(
	`ITT_JOIN
(
__ôt_
,«meödŒ)), (**)(*)&
	`ITTNOTIFY_NAME
“ame), (*)(
size_t
)&
	`ITT_VERSIONIZE
(ITT_JOIN(
	`_N_
“ame),
_öô
)), 
NULL
, (
__ôt_group_id
)(group)},

	)

211 
	#ITT_STUBV
 
ITT_STUB


	)

212 
	~"ôäŸify_°©ic.h
"

213 {
NULL
, NULL, NULL, NULL, 
__ôt_group_n⁄e
}

216 #i‡
ITT_PLATFORM
==
ITT_PLATFORM_WIN


217 #¥agm®
w¨nög
(
p›
)

221 
__ôt_thªad_öfo
 
	göô_thªad_öfo
 = {

222 (c⁄° *)
NULL
,

223 #i‡
deföed
(
UNICODE
Ë|| deföed(
_UNICODE
)

224 (c⁄° 
wch¨_t
*)
NULL
,

226 (*)
NULL
,

229 
__ôt_thªad_n‹mÆ
,

231 (*)
NULL
,

232 (
__ôt_thªad_öfo
*)
NULL


236 
__ôt_domaö
 
	gnuŒ_domaö
 = {

238 (c⁄° *)
NULL
,

239 #i‡
deföed
(
UNICODE
Ë|| deföed(
_UNICODE
)

240 (c⁄° 
wch¨_t
*)
NULL
,

242 (*)
NULL
,

245 (*)
NULL
,

246 (
__ôt_domaö
*)
NULL


250 
__ôt_°rög_h™dÀ
 
	gnuŒ_°rög_h™dÀ
 = {

251 (c⁄° *)
NULL
,

252 #i‡
deföed
(
UNICODE
Ë|| deföed(
_UNICODE
)

253 (c⁄° 
wch¨_t
*)
NULL
,

255 (*)
NULL
,

258 (*)
NULL
,

259 (
__ôt_°rög_h™dÀ
*)
NULL


262 c⁄° 
	gdŒ_∑th
[
PATH_MAX
] = { 0 };

265 
__ôt_globÆ
 
_N_
(
_ôèpi_globÆ
) = {

266 
ITT_MAGIC
,

267 
ITT_MAJOR
, 
ITT_MINOR
, 
API_VERSION_BUILD
,

271 
MUTEX_INITIALIZER
,

272 
NULL
,

273 
NULL
,

274 (c⁄° **)&
dŒ_∑th
,

275 (
__ôt_≠i_öfo
*)&
≠i_li°
,

276 
NULL
,

277 (
__ôt_thªad_öfo
*)&
öô_thªad_öfo
,

278 (
__ôt_domaö
*)&
nuŒ_domaö
,

279 (
__ôt_°rög_h™dÀ
*)&
nuŒ_°rög_h™dÀ
,

280 
__ôt_cﬁÀ˘i⁄_n‹mÆ


283 (
	t__ôt_≠i_öô_t
)(
	t__ôt_globÆ
*, 
	t__ôt_group_id
);

284 (
	t__ôt_≠i_föi_t
)(
	t__ôt_globÆ
*);

288 #ifde‡
ITT_NOTIFY_EXT_REPORT


289 
ITT_EXTERN_C
 
	$_N_
(
îr‹_h™dÀr
)(
__ôt_îr‹_code
, 
va_li°
 
¨gs
);

292 #i‡
ITT_PLATFORM
==
ITT_PLATFORM_WIN


293 #¥agm®
	`w¨nög
(
push
)

294 #¥agm®
	`w¨nög
(
dißbÀ
: 4055)

297 
	$__ôt_ªp‹t_îr‹
(
__ôt_îr‹_code
 
code
, ...)

299 
va_li°
 
¨gs
;

300 
	`va_°¨t
(
¨gs
, 
code
);

301 i‡(
	`_N_
(
_ôèpi_globÆ
).
îr‹_h™dÀr
 !
NULL
)

303 
__ôt_îr‹_h™dÀr_t
* 
h™dÀr
 = (__ôt_îr‹_h™dÀr_t*)(
size_t
)
	`_N_
(
_ôèpi_globÆ
).
îr‹_h™dÀr
;

304 
	`h™dÀr
(
code
, 
¨gs
);

306 #ifde‡
ITT_NOTIFY_EXT_REPORT


307 
	`_N_
(
îr‹_h™dÀr
)(
code
, 
¨gs
);

309 
	`va_íd
(
¨gs
);

310 
	}
}

312 #i‡
ITT_PLATFORM
==
ITT_PLATFORM_WIN


313 #¥agm®
w¨nög
(
p›
)

316 #i‡
ITT_PLATFORM
==
ITT_PLATFORM_WIN


317 
__ôt_domaö
* 
ITTAPI
 
ITT_VERSIONIZE
(
ITT_JOIN
(
_N_
(
domaö_¸óãW
),
_öô
))(c⁄° 
wch¨_t
* 
	g«me
)

319 
__ôt_domaö
 *
	gh_èû
, *
	gh
;

321 i‡(!
_N_
(
_ôèpi_globÆ
).
	g≠i_öôülized
 && _N_(_ôèpi_globÆ).
	gthªad_li°
->
	gtid
 == 0)

323 
__ôt_öô_ôéib_«me
(
NULL
, 
__ôt_group_Æl
);

324 i‡(
ITTNOTIFY_NAME
(
domaö_¸óãW
Ë&& ITTNOTIFY_NAME(domaö_¸óãWË!
ITT_VERSIONIZE
(
ITT_JOIN
(
_N_
(domaö_¸óãW),
_öô
)))

325  
ITTNOTIFY_NAME
(
domaö_¸óãW
)(
	g«me
);

328 i‡(
	g«me
 =
NULL
)

329  
_N_
(
_ôèpi_globÆ
).
domaö_li°
;

331 
ITT_MUTEX_INIT_AND_LOCK
(
_N_
(
_ôèpi_globÆ
));

332 
	gh_èû
 = 
NULL
, 
	gh
 = 
_N_
(
_ôèpi_globÆ
).
domaö_li°
; h !NULL; h_èû = 
h
, h = h->
√xt
)

333 i‡(
h
->
«meW
 !
NULL
 && !
wcscmp
(h->«meW, 
«me
))

335 i‡(
	gh
 =
NULL
) {

336 
NEW_DOMAIN_W
(&
_N_
(
_ôèpi_globÆ
),
h
,
h_èû
,
«me
);

338 
__ôt_muãx_u∆ock
(&
_N_
(
_ôèpi_globÆ
).
muãx
);

339  
	gh
;

342 
__ôt_domaö
* 
ITTAPI
 
ITT_VERSIONIZE
(
ITT_JOIN
(
_N_
(
domaö_¸óãA
),
_öô
))(c⁄° * 
	g«me
)

344 
__ôt_domaö
* 
ITTAPI
 
ITT_VERSIONIZE
(
ITT_JOIN
(
_N_
(
domaö_¸óã
),
_öô
))(c⁄° * 
	g«me
)

347 
__ôt_domaö
 *
	gh_èû
, *
	gh
;

349 i‡(!
_N_
(
_ôèpi_globÆ
).
	g≠i_öôülized
 && _N_(_ôèpi_globÆ).
	gthªad_li°
->
	gtid
 == 0)

351 
__ôt_öô_ôéib_«me
(
NULL
, 
__ôt_group_Æl
);

352 #i‡
ITT_PLATFORM
==
ITT_PLATFORM_WIN


353 i‡(
ITTNOTIFY_NAME
(
domaö_¸óãA
Ë&& ITTNOTIFY_NAME(domaö_¸óãAË!
ITT_VERSIONIZE
(
ITT_JOIN
(
_N_
(domaö_¸óãA),
_öô
)))

354  
ITTNOTIFY_NAME
(
domaö_¸óãA
)(
	g«me
);

356 i‡(
ITTNOTIFY_NAME
(
domaö_¸óã
Ë&& ITTNOTIFY_NAME(domaö_¸óãË!
ITT_VERSIONIZE
(
ITT_JOIN
(
_N_
(domaö_¸óã),
_öô
)))

357  
ITTNOTIFY_NAME
(
domaö_¸óã
)(
	g«me
);

361 i‡(
	g«me
 =
NULL
)

362  
_N_
(
_ôèpi_globÆ
).
domaö_li°
;

364 
ITT_MUTEX_INIT_AND_LOCK
(
_N_
(
_ôèpi_globÆ
));

365 
	gh_èû
 = 
NULL
, 
	gh
 = 
_N_
(
_ôèpi_globÆ
).
domaö_li°
; h !NULL; h_èû = 
h
, h = h->
√xt
)

366 i‡(
h
->
«meA
 !
NULL
 && !
__ôt_f°rcmp
(h->«meA, 
«me
))

368 i‡(
	gh
 =
NULL
) {

369 
NEW_DOMAIN_A
(&
_N_
(
_ôèpi_globÆ
),
h
,
h_èû
,
«me
);

371 
__ôt_muãx_u∆ock
(&
_N_
(
_ôèpi_globÆ
).
muãx
);

372  
	gh
;

375 #i‡
ITT_PLATFORM
==
ITT_PLATFORM_WIN


376 
__ôt_°rög_h™dÀ
* 
ITTAPI
 
ITT_VERSIONIZE
(
ITT_JOIN
(
_N_
(
°rög_h™dÀ_¸óãW
),
_öô
))(c⁄° 
wch¨_t
* 
	g«me
)

378 
__ôt_°rög_h™dÀ
 *
	gh_èû
, *
	gh
;

380 i‡(!
_N_
(
_ôèpi_globÆ
).
	g≠i_öôülized
 && _N_(_ôèpi_globÆ).
	gthªad_li°
->
	gtid
 == 0)

382 
__ôt_öô_ôéib_«me
(
NULL
, 
__ôt_group_Æl
);

383 i‡(
ITTNOTIFY_NAME
(
°rög_h™dÀ_¸óãW
Ë&& ITTNOTIFY_NAME(°rög_h™dÀ_¸óãWË!
ITT_VERSIONIZE
(
ITT_JOIN
(
_N_
(°rög_h™dÀ_¸óãW),
_öô
)))

384  
ITTNOTIFY_NAME
(
°rög_h™dÀ_¸óãW
)(
	g«me
);

387 i‡(
	g«me
 =
NULL
)

388  
_N_
(
_ôèpi_globÆ
).
°rög_li°
;

390 
ITT_MUTEX_INIT_AND_LOCK
(
_N_
(
_ôèpi_globÆ
));

391 
	gh_èû
 = 
NULL
, 
	gh
 = 
_N_
(
_ôèpi_globÆ
).
°rög_li°
; h !NULL; h_èû = 
h
, h = h->
√xt
)

392 i‡(
h
->
°rW
 !
NULL
 && !
wcscmp
(h->°rW, 
«me
))

394 i‡(
	gh
 =
NULL
) {

395 
NEW_STRING_HANDLE_W
(&
_N_
(
_ôèpi_globÆ
),
h
,
h_èû
,
«me
);

397 
__ôt_muãx_u∆ock
(&
_N_
(
_ôèpi_globÆ
).
muãx
);

398  
	gh
;

401 
__ôt_°rög_h™dÀ
* 
ITTAPI
 
ITT_VERSIONIZE
(
ITT_JOIN
(
_N_
(
°rög_h™dÀ_¸óãA
),
_öô
))(c⁄° * 
	g«me
)

403 
__ôt_°rög_h™dÀ
* 
ITTAPI
 
ITT_VERSIONIZE
(
ITT_JOIN
(
_N_
(
°rög_h™dÀ_¸óã
),
_öô
))(c⁄° * 
	g«me
)

406 
__ôt_°rög_h™dÀ
 *
	gh_èû
, *
	gh
;

408 i‡(!
_N_
(
_ôèpi_globÆ
).
	g≠i_öôülized
 && _N_(_ôèpi_globÆ).
	gthªad_li°
->
	gtid
 == 0)

410 
__ôt_öô_ôéib_«me
(
NULL
, 
__ôt_group_Æl
);

411 #i‡
ITT_PLATFORM
==
ITT_PLATFORM_WIN


412 i‡(
ITTNOTIFY_NAME
(
°rög_h™dÀ_¸óãA
Ë&& ITTNOTIFY_NAME(°rög_h™dÀ_¸óãAË!
ITT_VERSIONIZE
(
ITT_JOIN
(
_N_
(°rög_h™dÀ_¸óãA),
_öô
)))

413  
ITTNOTIFY_NAME
(
°rög_h™dÀ_¸óãA
)(
	g«me
);

415 i‡(
ITTNOTIFY_NAME
(
°rög_h™dÀ_¸óã
Ë&& ITTNOTIFY_NAME(°rög_h™dÀ_¸óãË!
ITT_VERSIONIZE
(
ITT_JOIN
(
_N_
(°rög_h™dÀ_¸óã),
_öô
)))

416  
ITTNOTIFY_NAME
(
°rög_h™dÀ_¸óã
)(
	g«me
);

420 i‡(
	g«me
 =
NULL
)

421  
_N_
(
_ôèpi_globÆ
).
°rög_li°
;

423 
ITT_MUTEX_INIT_AND_LOCK
(
_N_
(
_ôèpi_globÆ
));

424 
	gh_èû
 = 
NULL
, 
	gh
 = 
_N_
(
_ôèpi_globÆ
).
°rög_li°
; h !NULL; h_èû = 
h
, h = h->
√xt
)

425 i‡(
h
->
°rA
 !
NULL
 && !
__ôt_f°rcmp
(h->°rA, 
«me
))

427 i‡(
	gh
 =
NULL
) {

428 
NEW_STRING_HANDLE_A
(&
_N_
(
_ôèpi_globÆ
),
h
,
h_èû
,
«me
);

430 
__ôt_muãx_u∆ock
(&
_N_
(
_ôèpi_globÆ
).
muãx
);

431  
	gh
;

436 
ITTAPI
 
ITT_VERSIONIZE
(
ITT_JOIN
(
_N_
(
∑u£
),
_öô
))()

438 i‡(!
_N_
(
_ôèpi_globÆ
).
	g≠i_öôülized
 && _N_(_ôèpi_globÆ).
	gthªad_li°
->
	gtid
 == 0)

440 
__ôt_öô_ôéib_«me
(
NULL
, 
__ôt_group_Æl
);

441 i‡(
ITTNOTIFY_NAME
(
∑u£
Ë&& ITTNOTIFY_NAME’au£Ë!
ITT_VERSIONIZE
(
ITT_JOIN
(
_N_
’au£),
_öô
)))

443 
ITTNOTIFY_NAME
(
∑u£
)();

447 
_N_
(
_ôèpi_globÆ
).
	g°©e
 = 
__ôt_cﬁÀ˘i⁄_∑u£d
;

450 
ITTAPI
 
ITT_VERSIONIZE
(
ITT_JOIN
(
_N_
(
ªsume
),
_öô
))()

452 i‡(!
_N_
(
_ôèpi_globÆ
).
	g≠i_öôülized
 && _N_(_ôèpi_globÆ).
	gthªad_li°
->
	gtid
 == 0)

454 
__ôt_öô_ôéib_«me
(
NULL
, 
__ôt_group_Æl
);

455 i‡(
ITTNOTIFY_NAME
(
ªsume
Ë&& ITTNOTIFY_NAME‘esumeË!
ITT_VERSIONIZE
(
ITT_JOIN
(
_N_
‘esume),
_öô
)))

457 
ITTNOTIFY_NAME
(
ªsume
)();

461 
_N_
(
_ôèpi_globÆ
).
	g°©e
 = 
__ôt_cﬁÀ˘i⁄_n‹mÆ
;

464 #i‡
ITT_PLATFORM
==
ITT_PLATFORM_WIN


465 
ITTAPI
 
ITT_VERSIONIZE
(
ITT_JOIN
(
_N_
(
thªad_£t_«meW
),
_öô
))(c⁄° 
wch¨_t
* 
	g«me
)

467 
TIDT
 
	gtid
 = 
__ôt_thªad_id
();

468 
__ôt_thªad_öfo
 *
	gh_èû
, *
	gh
;

470 i‡(!
_N_
(
_ôèpi_globÆ
).
	g≠i_öôülized
 && _N_(_ôèpi_globÆ).
	gthªad_li°
->
	gtid
 == 0)

472 
__ôt_öô_ôéib_«me
(
NULL
, 
__ôt_group_Æl
);

473 i‡(
ITTNOTIFY_NAME
(
thªad_£t_«meW
Ë&& ITTNOTIFY_NAME—hªad_£t_«meWË!
ITT_VERSIONIZE
(
ITT_JOIN
(
_N_
—hªad_£t_«meW),
_öô
)))

475 
ITTNOTIFY_NAME
(
thªad_£t_«meW
)(
	g«me
);

480 
__ôt_muãx_lock
(&
_N_
(
_ôèpi_globÆ
).
muãx
);

481 
	gh_èû
 = 
NULL
, 
	gh
 = 
_N_
(
_ôèpi_globÆ
).
thªad_li°
; h !NULL; h_èû = 
h
, h = h->
√xt
)

482 i‡(
h
->
tid
 ==Åid)

484 i‡(
	gh
 =
NULL
) {

485 
NEW_THREAD_INFO_W
(&
_N_
(
_ôèpi_globÆ
), 
h
, 
h_èû
, 
tid
, 
__ôt_thªad_n‹mÆ
, 
«me
);

489 
	gh
->
	g«meW
 = 
«me
 ? 
_wcsdup
“ameË: 
NULL
;

491 
__ôt_muãx_u∆ock
(&
_N_
(
_ôèpi_globÆ
).
muãx
);

494 
ITTAPI
 
ITT_VERSIONIZE
(
ITT_JOIN
(
_N_
(
thr_«me_£tW
),
_öô
))(c⁄° 
wch¨_t
* 
	g«me
, 
	g«mñí
)

496 
	g«mñí
 = 
«mñí
;

497 
ITT_VERSIONIZE
(
ITT_JOIN
(
_N_
(
thªad_£t_«meW
),
_öô
))(
	g«me
);

501 
ITTAPI
 
ITT_VERSIONIZE
(
ITT_JOIN
(
_N_
(
thªad_£t_«meA
),
_öô
))(c⁄° * 
	g«me
)

503 
ITTAPI
 
ITT_VERSIONIZE
(
ITT_JOIN
(
_N_
(
thªad_£t_«me
),
_öô
))(c⁄° * 
	g«me
)

506 
TIDT
 
	gtid
 = 
__ôt_thªad_id
();

507 
__ôt_thªad_öfo
 *
	gh_èû
, *
	gh
;

509 i‡(!
_N_
(
_ôèpi_globÆ
).
	g≠i_öôülized
 && _N_(_ôèpi_globÆ).
	gthªad_li°
->
	gtid
 == 0)

511 
__ôt_öô_ôéib_«me
(
NULL
, 
__ôt_group_Æl
);

512 #i‡
ITT_PLATFORM
==
ITT_PLATFORM_WIN


513 i‡(
ITTNOTIFY_NAME
(
thªad_£t_«meA
Ë&& ITTNOTIFY_NAME—hªad_£t_«meAË!
ITT_VERSIONIZE
(
ITT_JOIN
(
_N_
—hªad_£t_«meA),
_öô
)))

515 
ITTNOTIFY_NAME
(
thªad_£t_«meA
)(
	g«me
);

519 i‡(
ITTNOTIFY_NAME
(
thªad_£t_«me
Ë&& ITTNOTIFY_NAME—hªad_£t_«meË!
ITT_VERSIONIZE
(
ITT_JOIN
(
_N_
—hªad_£t_«me),
_öô
)))

521 
ITTNOTIFY_NAME
(
thªad_£t_«me
)(
	g«me
);

527 
__ôt_muãx_lock
(&
_N_
(
_ôèpi_globÆ
).
muãx
);

528 
	gh_èû
 = 
NULL
, 
	gh
 = 
_N_
(
_ôèpi_globÆ
).
thªad_li°
; h !NULL; h_èû = 
h
, h = h->
√xt
)

529 i‡(
h
->
tid
 ==Åid)

531 i‡(
	gh
 =
NULL
) {

532 
NEW_THREAD_INFO_A
(&
_N_
(
_ôèpi_globÆ
), 
h
, 
h_èû
, 
tid
, 
__ôt_thªad_n‹mÆ
, 
«me
);

536 
	gh
->
	g«meA
 = 
«me
 ? 
__ôt_f°rdup
“ameË: 
NULL
;

538 
__ôt_muãx_u∆ock
(&
_N_
(
_ôèpi_globÆ
).
muãx
);

541 #i‡
ITT_PLATFORM
==
ITT_PLATFORM_WIN


542 
ITTAPI
 
ITT_VERSIONIZE
(
ITT_JOIN
(
_N_
(
thr_«me_£tA
),
_öô
))(c⁄° * 
	g«me
, 
	g«mñí
)

544 
	g«mñí
 = 
«mñí
;

545 
ITT_VERSIONIZE
(
ITT_JOIN
(
_N_
(
thªad_£t_«meA
),
_öô
))(
	g«me
);

549 
ITTAPI
 
ITT_VERSIONIZE
(
ITT_JOIN
(
_N_
(
thr_«me_£t
),
_öô
))(c⁄° * 
	g«me
, 
	g«mñí
)

551 
ITT_VERSIONIZE
(
ITT_JOIN
(
_N_
(
thªad_£t_«me
),
_öô
))(
	g«me
);

556 
ITTAPI
 
ITT_VERSIONIZE
(
ITT_JOIN
(
_N_
(
thªad_ign‹e
),
_öô
))()

558 
TIDT
 
	gtid
 = 
__ôt_thªad_id
();

559 
__ôt_thªad_öfo
 *
	gh_èû
, *
	gh
;

561 i‡(!
_N_
(
_ôèpi_globÆ
).
	g≠i_öôülized
 && _N_(_ôèpi_globÆ).
	gthªad_li°
->
	gtid
 == 0)

563 
__ôt_öô_ôéib_«me
(
NULL
, 
__ôt_group_Æl
);

564 i‡(
ITTNOTIFY_NAME
(
thªad_ign‹e
Ë&& ITTNOTIFY_NAME—hªad_ign‹eË!
ITT_VERSIONIZE
(
ITT_JOIN
(
_N_
—hªad_ign‹e),
_öô
)))

566 
ITTNOTIFY_NAME
(
thªad_ign‹e
)();

571 
__ôt_muãx_lock
(&
_N_
(
_ôèpi_globÆ
).
muãx
);

572 
	gh_èû
 = 
NULL
, 
	gh
 = 
_N_
(
_ôèpi_globÆ
).
thªad_li°
; h !NULL; h_èû = 
h
, h = h->
√xt
)

573 i‡(
h
->
tid
 ==Åid)

575 i‡(
	gh
 =
NULL
) {

576 c⁄° * 
«me
 = "unknown";

577 
NEW_THREAD_INFO_A
(&
_N_
(
_ôèpi_globÆ
), 
h
, 
h_èû
, 
tid
, 
__ôt_thªad_ign‹ed
, 
«me
);

581 
	gh
->
	g°©e
 = 
__ôt_thªad_ign‹ed
;

583 
__ôt_muãx_u∆ock
(&
_N_
(
_ôèpi_globÆ
).
muãx
);

586 
ITTAPI
 
ITT_VERSIONIZE
(
ITT_JOIN
(
_N_
(
thr_ign‹e
),
_öô
))()

588 
ITT_VERSIONIZE
(
ITT_JOIN
(
_N_
(
thªad_ign‹e
),
_öô
))();

591 
ITTAPI
 
ITT_VERSIONIZE
(
ITT_JOIN
(
_N_
(
íabÀ_©èch
),
_öô
))()

593 #ifde‡
__ANDROID__


598 
£ãnv
(
ITT_TO_STR
(
LIB_VAR_NAME
), 
ANDROID_ITTNOTIFY_DEFAULT_PATH
, 0);

604 c⁄° * 
	$__ôt_f•lô
(c⁄° * 
s
, c⁄° * 
£p
, c⁄° ** 
out
, * 
Àn
)

606 
i
;

607 
j
;

609 i‡(!
s
 || !
£p
 || !
out
 || !
Àn
)

610  
NULL
;

612 
i
 = 0; 
s
[i]; i++)

614 
b
 = 0;

615 
j
 = 0; 
£p
[j]; j++)

616 i‡(
s
[
i
] =
£p
[
j
])

618 
b
 = 1;

621 i‡(!
b
)

625 i‡(!
s
[
i
])

626  
NULL
;

628 *
Àn
 = 0;

629 *
out
 = &
s
[
i
];

631 ; 
s
[
i
]; i++, (*
Àn
)++)

633 
b
 = 0;

634 
j
 = 0; 
£p
[j]; j++)

635 i‡(
s
[
i
] =
£p
[
j
])

637 
b
 = 1;

640 i‡(
b
)

644 ; 
s
[
i
]; i++)

646 
b
 = 0;

647 
j
 = 0; 
£p
[j]; j++)

648 i‡(
s
[
i
] =
£p
[
j
])

650 
b
 = 1;

653 i‡(!
b
)

657  &
s
[
i
];

658 
	}
}

665 c⁄° * 
	$__ôt_gë_ív_v¨
(c⁄° * 
«me
)

667 
	#MAX_ENV_VALUE_SIZE
 4086

	)

668 
ív_buff
[
MAX_ENV_VALUE_SIZE
];

669 * 
ív_vÆue
 = (*)
ív_buff
;

671 i‡(
«me
 !
NULL
)

673 #i‡
ITT_PLATFORM
==
ITT_PLATFORM_WIN


674 
size_t
 
max_Àn
 = 
MAX_ENV_VALUE_SIZE
 - (size_t)(
ív_vÆue
 - 
ív_buff
);

675 
DWORD
 
rc
 = 
	`GëEnvú⁄mítV¨übÀA
(
«me
, 
ív_vÆue
, (DWORD)
max_Àn
);

676 i‡(
rc
 >
max_Àn
)

677 
	`__ôt_ªp‹t_îr‹
(
__ôt_îr‹_ív_too_l⁄g
, 
«me
, (
size_t
)
rc
 - 1, (size_t)(
max_Àn
 - 1));

678 i‡(
rc
 > 0)

680 c⁄° * 
ªt
 = (c⁄° *)
ív_vÆue
;

681 
ív_vÆue
 +
rc
 + 1;

682  
ªt
;

689 
DWORD
 
îr
 = 
	`GëLa°Eº‹
();

690 i‡(
îr
 =
ERROR_SUCCESS
)

691  
ív_vÆue
;

693 i‡(
îr
 !
ERROR_ENVVAR_NOT_FOUND
)

694 
	`__ôt_ªp‹t_îr‹
(
__ôt_îr‹_ˇ¡_ªad_ív
, 
«me
, ()
îr
);

697 * 
ív
 = 
	`gëív
(
«me
);

698 i‡(
ív
 !
NULL
)

700 
size_t
 
Àn
 = 
	`°æí
(
ív
);

701 
size_t
 
max_Àn
 = 
MAX_ENV_VALUE_SIZE
 - (size_t)(
ív_vÆue
 - 
ív_buff
);

702 i‡(
Àn
 < 
max_Àn
)

704 c⁄° * 
ªt
 = (c⁄° *)
ív_vÆue
;

705 
	`°∫˝y
(
ív_vÆue
, 
ív
, 
Àn
 + 1);

706 
ív_vÆue
 +
Àn
 + 1;

707  
ªt
;

709 
	`__ôt_ªp‹t_îr‹
(
__ôt_îr‹_ív_too_l⁄g
, 
«me
, (
size_t
)
Àn
, (size_t)(
max_Àn
 - 1));

713  
NULL
;

714 
	}
}

716 c⁄° * 
	$__ôt_gë_lib_«me
()

718 c⁄° * 
lib_«me
 = 
	`__ôt_gë_ív_v¨
(
	`ITT_TO_STR
(
LIB_VAR_NAME
));

720 #ifde‡
__ANDROID__


721 i‡(
lib_«me
 =
NULL
)

723 c⁄° * c⁄° 
sy°em_wide_m¨kî_fûíame
 = "/data/local/tmp/com.intel.itt.collector_lib";

724 
ôt_m¨kî_fûe_fd
 = 
	`›í
(
sy°em_wide_m¨kî_fûíame
, 
O_RDONLY
);

725 
ssize_t
 
ªs
 = 0;

727 i‡(
ôt_m¨kî_fûe_fd
 == -1)

729 c⁄° 
pid_t
 
my_pid
 = 
	`gëpid
();

730 
cmdlöe_∑th
[
PATH_MAX
] = {0};

731 
∑ckage_«me
[
PATH_MAX
] = {0};

732 
≠p_ßndbox_fûe
[
PATH_MAX
] = {0};

733 
cmdlöe_fd
 = 0;

735 
	`ITT_ANDROID_LOGI
("UnableÅo open system-wide marker file.");

736 
	`¢¥ötf
(
cmdlöe_∑th
, 
PATH_MAX
 - 1, "/¥oc/%d/cmdlöe", 
my_pid
);

737 
	`ITT_ANDROID_LOGI
("CMD fûe: %s\n", 
cmdlöe_∑th
);

738 
cmdlöe_fd
 = 
	`›í
(
cmdlöe_∑th
, 
O_RDONLY
);

739 i‡(
cmdlöe_fd
 == -1)

741 
	`ITT_ANDROID_LOGE
("U«bÀÅÿ›í %†fûe!", 
cmdlöe_∑th
);

742  
lib_«me
;

744 
ªs
 = 
	`ªad
(
cmdlöe_fd
, 
∑ckage_«me
, 
PATH_MAX
 - 1);

745 i‡(
ªs
 == -1)

747 
	`ITT_ANDROID_LOGE
("U«bÀÅÿªad %†fûe!", 
cmdlöe_∑th
);

748 
ªs
 = 
	`˛o£
(
cmdlöe_fd
);

749 i‡(
ªs
 == -1)

751 
	`ITT_ANDROID_LOGE
("U«bÀÅÿ˛o£ %†fûe!", 
cmdlöe_∑th
);

753  
lib_«me
;

755 
ªs
 = 
	`˛o£
(
cmdlöe_fd
);

756 i‡(
ªs
 == -1)

758 
	`ITT_ANDROID_LOGE
("U«bÀÅÿ˛o£ %†fûe!", 
cmdlöe_∑th
);

759  
lib_«me
;

761 
	`ITT_ANDROID_LOGI
("Packagê«me: %s\n", 
∑ckage_«me
);

762 
	`¢¥ötf
(
≠p_ßndbox_fûe
, 
PATH_MAX
 - 1, "/d©a/d©a/%s/com.öãl.ôt.cﬁÀ˘‹_lib", 
∑ckage_«me
);

763 
	`ITT_ANDROID_LOGI
("Lib m¨kî fûê«me: %s\n", 
≠p_ßndbox_fûe
);

764 
ôt_m¨kî_fûe_fd
 = 
	`›í
(
≠p_ßndbox_fûe
, 
O_RDONLY
);

765 i‡(
ôt_m¨kî_fûe_fd
 == -1)

767 
	`ITT_ANDROID_LOGE
("UnableÅo openápp marker file!");

768  
lib_«me
;

773 
ôt_lib_«me
[
PATH_MAX
] = {0};

775 
ªs
 = 
	`ªad
(
ôt_m¨kî_fûe_fd
, 
ôt_lib_«me
, 
PATH_MAX
 - 1);

776 i‡(
ªs
 == -1)

778 
	`ITT_ANDROID_LOGE
("U«bÀÅÿªad %†fûe!", 
ôt_m¨kî_fûe_fd
);

779 
ªs
 = 
	`˛o£
(
ôt_m¨kî_fûe_fd
);

780 i‡(
ªs
 == -1)

782 
	`ITT_ANDROID_LOGE
("U«bÀÅÿ˛o£ %†fûe!", 
ôt_m¨kî_fûe_fd
);

784  
lib_«me
;

786 
	`ITT_ANDROID_LOGI
("ITT LibÖ©h: %s", 
ôt_lib_«me
);

787 
ªs
 = 
	`˛o£
(
ôt_m¨kî_fûe_fd
);

788 i‡(
ªs
 == -1)

790 
	`ITT_ANDROID_LOGE
("U«bÀÅÿ˛o£ %†fûe!", 
ôt_m¨kî_fûe_fd
);

791  
lib_«me
;

793 
	`ITT_ANDROID_LOGI
("SetÉnv");

794 
ªs
 = 
	`£ãnv
(
	`ITT_TO_STR
(
LIB_VAR_NAME
), 
ôt_lib_«me
, 0);

795 i‡(
ªs
 == -1)

797 
	`ITT_ANDROID_LOGE
("UnableÅo setÉnv var!");

798  
lib_«me
;

800 
lib_«me
 = 
	`__ôt_gë_ív_v¨
(
	`ITT_TO_STR
(
LIB_VAR_NAME
));

801 
	`ITT_ANDROID_LOGI
("ITT LibÖ©h fromÉnv: %s", 
ôt_lib_«me
);

806  
lib_«me
;

807 
	}
}

809 #i‚de‡
mö


810 
	#mö
(
a
,
b
Ë◊Ë< (bË? (aË: (b)

	)

813 
__ôt_group_id
 
	$__ôt_gë_groups
()

815 
i
;

816 
__ôt_group_id
 
ªs
 = 
__ôt_group_n⁄e
;

817 c⁄° * 
v¨_«me
 = "INTEL_ITTNOTIFY_GROUPS";

818 c⁄° * 
group_°r
 = 
	`__ôt_gë_ív_v¨
(
v¨_«me
);

820 i‡(
group_°r
 !
NULL
)

822 
Àn
;

823 
gr
[255];

824 c⁄° * 
chunk
;

825 (
group_°r
 = 
	`__ôt_f•lô
(group_°r, ",; ", &
chunk
, &
Àn
)Ë!
NULL
)

827 
	`__ôt_f°r˝yn
(
gr
, 
chunk
, (gr) - 1);

828 
gr
[
	`mö
(
Àn
, ()((gr) - 1))] = 0;

830 
i
 = 0; 
group_li°
[i].
«me
 !
NULL
; i++)

832 i‡(!
	`__ôt_f°rcmp
(
gr
, 
group_li°
[
i
].
«me
))

834 
ªs
 = (
__ôt_group_id
)‘e†| 
group_li°
[
i
].
id
);

842 
i
 = 0; 
group_li°
[i].
id
 !
__ôt_group_n⁄e
; i++)

843 i‡(
group_li°
[
i
].
id
 !
__ôt_group_Æl
 &&

844 
group_li°
[
i
].
id
 > 
__ôt_group_•lôãr_mö
 &&

845 
group_li°
[
i
].
id
 < 
__ôt_group_•lôãr_max
)

846 
ªs
 = (
__ôt_group_id
)‘e†| 
group_li°
[
i
].
id
);

847  
ªs
;

851 
i
 = 0; 
group_Æüs
[i].
ív_v¨
 !
NULL
; i++)

852 i‡(
	`__ôt_gë_ív_v¨
(
group_Æüs
[
i
].
ív_v¨
Ë!
NULL
)

853  
group_Æüs
[
i
].
groups
;

856  
ªs
;

857 
	}
}

859 
	$__ôt_lib_vîsi⁄
(
lib_t
 
lib
)

861 i‡(
lib
 =
NULL
)

863 i‡(
	`__ôt_gë_¥oc
(
lib
, "__itt_api_init"))

865 i‡(
	`__ôt_gë_¥oc
(
lib
, "__itt_api_version"))

868 
	}
}

880 
	$__ôt_nuŒify_Æl_poöãrs
()

882 
i
;

884 
i
 = 0; 
	`_N_
(
_ôèpi_globÆ
).
≠i_li°_±r
[i].
«me
 !
NULL
; i++)

885 *
	`_N_
(
_ôèpi_globÆ
).
≠i_li°_±r
[
i
].
func_±r
 = _N_(_ôèpi_globÆ).≠i_li°_±r[i].
nuŒ_func
;

886 
	}
}

888 #i‡
ITT_PLATFORM
==
ITT_PLATFORM_WIN


889 #¥agm®
w¨nög
(
push
)

890 #¥agm®
w¨nög
(
dißbÀ
: 4054)

891 #¥agm®
w¨nög
(
dißbÀ
: 4055)

894 
ITT_EXTERN_C
 
	$_N_
(
föi_ôéib
)()

896 
__ôt_≠i_föi_t
* 
__ôt_≠i_föi_±r
;

897 vﬁ©ûê
TIDT
 
cuºít_thªad
 = 0;

899 i‡(
	`_N_
(
_ôèpi_globÆ
).
≠i_öôülized
)

901 
	`__ôt_muãx_lock
(&
	`_N_
(
_ôèpi_globÆ
).
muãx
);

902 i‡(
	`_N_
(
_ôèpi_globÆ
).
≠i_öôülized
)

904 i‡(
cuºít_thªad
 == 0)

906 
cuºít_thªad
 = 
	`__ôt_thªad_id
();

907 
__ôt_≠i_föi_±r
 = (
__ôt_≠i_föi_t
*)(
size_t
)
	`__ôt_gë_¥oc
(
	`_N_
(
_ôèpi_globÆ
).
lib
, "__itt_api_fini");

908 i‡(
__ôt_≠i_föi_±r
)

909 
	`__ôt_≠i_föi_±r
(&
	`_N_
(
_ôèpi_globÆ
));

911 
	`__ôt_nuŒify_Æl_poöãrs
();

918 
	`_N_
(
_ôèpi_globÆ
).
≠i_öôülized
 = 0;

919 
cuºít_thªad
 = 0;

922 
	`__ôt_muãx_u∆ock
(&
	`_N_
(
_ôèpi_globÆ
).
muãx
);

924 
	}
}

926 
ITT_EXTERN_C
 
	$_N_
(
öô_ôéib
)(c⁄° * 
lib_«me
, 
__ôt_group_id
 
öô_groups
)

928 
i
;

929 
__ôt_group_id
 
groups
;

930 #ifde‡
ITT_COMPLETE_GROUP


931 
__ôt_group_id
 
zîo_group
 = 
__ôt_group_n⁄e
;

933 vﬁ©ûê
TIDT
 
cuºít_thªad
 = 0;

935 i‡(!
	`_N_
(
_ôèpi_globÆ
).
≠i_öôülized
)

937 #i‚de‡
ITT_SIMPLE_INIT


938 
	`ITT_MUTEX_INIT_AND_LOCK
(
	`_N_
(
_ôèpi_globÆ
));

941 i‡(!
	`_N_
(
_ôèpi_globÆ
).
≠i_öôülized
)

943 i‡(
cuºít_thªad
 == 0)

945 
cuºít_thªad
 = 
	`__ôt_thªad_id
();

946 
	`_N_
(
_ôèpi_globÆ
).
thªad_li°
->
tid
 = 
cuºít_thªad
;

947 i‡(
lib_«me
 =
NULL
)

948 
lib_«me
 = 
	`__ôt_gë_lib_«me
();

949 
groups
 = 
	`__ôt_gë_groups
();

950 i‡(
groups
 !
__ôt_group_n⁄e
 || 
lib_«me
 !
NULL
)

952 
	`_N_
(
_ôèpi_globÆ
).
lib
 = 
	`__ôt_lﬂd_lib
((
lib_«me
 =
NULL
Ë? 
ôäŸify_lib_«me
 :Üib_name);

954 i‡(
	`_N_
(
_ôèpi_globÆ
).
lib
 !
NULL
)

956 
__ôt_≠i_öô_t
* 
__ôt_≠i_öô_±r
;

957 
lib_vîsi⁄
 = 
	`__ôt_lib_vîsi⁄
(
	`_N_
(
_ôèpi_globÆ
).
lib
);

959 
lib_vîsi⁄
) {

961 
groups
 = 
__ôt_group_Àgacy
;

964 
i
 = 0; 
	`_N_
(
_ôèpi_globÆ
).
≠i_li°_±r
[i].
«me
 !
NULL
; i++)

966 i‡(
	`_N_
(
_ôèpi_globÆ
).
≠i_li°_±r
[
i
].
group
 & 
groups
 & 
öô_groups
)

968 *
	`_N_
(
_ôèpi_globÆ
).
≠i_li°_±r
[
i
].
func_±r
 = (*)
	`__ôt_gë_¥oc
(_N_(_ôèpi_globÆ).
lib
, _N_(_ôèpi_globÆ).≠i_li°_±r[i].
«me
);

969 i‡(*
	`_N_
(
_ôèpi_globÆ
).
≠i_li°_±r
[
i
].
func_±r
 =
NULL
)

972 *
	`_N_
(
_ôèpi_globÆ
).
≠i_li°_±r
[
i
].
func_±r
 = _N_(_ôèpi_globÆ).≠i_li°_±r[i].
nuŒ_func
;

973 
	`__ôt_ªp‹t_îr‹
(
__ôt_îr‹_no_symbﬁ
, 
lib_«me
, 
	`_N_
(
_ôèpi_globÆ
).
≠i_li°_±r
[
i
].
«me
);

974 #ifde‡
ITT_COMPLETE_GROUP


975 
zîo_group
 = (
__ôt_group_id
)(zîo_grou∞| 
	`_N_
(
_ôèpi_globÆ
).
≠i_li°_±r
[
i
].
group
);

980 *
	`_N_
(
_ôèpi_globÆ
).
≠i_li°_±r
[
i
].
func_±r
 = _N_(_ôèpi_globÆ).≠i_li°_±r[i].
nuŒ_func
;

983 i‡(
groups
 =
__ôt_group_Àgacy
)

986 
	`ITTNOTIFY_NAME
(
thªad_ign‹e
ËITTNOTIFY_NAME(
thr_ign‹e
);

987 #i‡
ITT_PLATFORM
==
ITT_PLATFORM_WIN


988 
	`ITTNOTIFY_NAME
(
sync_¸óãA
ËITTNOTIFY_NAME(
sync_£t_«meA
);

989 
	`ITTNOTIFY_NAME
(
sync_¸óãW
ËITTNOTIFY_NAME(
sync_£t_«meW
);

991 
	`ITTNOTIFY_NAME
(
sync_¸óã
ËITTNOTIFY_NAME(
sync_£t_«me
);

993 
	`ITTNOTIFY_NAME
(
sync_¥ï¨e
ËITTNOTIFY_NAME(
nŸify_sync_¥ï¨e
);

994 
	`ITTNOTIFY_NAME
(
sync_ˇn˚l
ËITTNOTIFY_NAME(
nŸify_sync_ˇn˚l
);

995 
	`ITTNOTIFY_NAME
(
sync_acquúed
ËITTNOTIFY_NAME(
nŸify_sync_acquúed
);

996 
	`ITTNOTIFY_NAME
(
sync_ªÀasög
ËITTNOTIFY_NAME(
nŸify_sync_ªÀasög
);

999 #ifde‡
ITT_COMPLETE_GROUP


1000 
i
 = 0; 
	`_N_
(
_ôèpi_globÆ
).
≠i_li°_±r
[i].
«me
 !
NULL
; i++)

1001 i‡(
	`_N_
(
_ôèpi_globÆ
).
≠i_li°_±r
[
i
].
group
 & 
zîo_group
)

1002 *
	`_N_
(
_ôèpi_globÆ
).
≠i_li°_±r
[
i
].
func_±r
 = _N_(_ôèpi_globÆ).≠i_li°_±r[i].
nuŒ_func
;

1006 
__ôt_≠i_öô_±r
 = (
__ôt_≠i_öô_t
*)(
size_t
)
	`__ôt_gë_¥oc
(
	`_N_
(
_ôèpi_globÆ
).
lib
, "__itt_api_init");

1007 i‡(
__ôt_≠i_öô_±r
)

1008 
	`__ôt_≠i_öô_±r
(&
	`_N_
(
_ôèpi_globÆ
), 
öô_groups
);

1014 
	`__ôt_nuŒify_Æl_poöãrs
();

1016 
	`__ôt_ªp‹t_îr‹
(
__ôt_îr‹_no_moduÀ
, 
lib_«me
,

1017 #i‡
ITT_PLATFORM
==
ITT_PLATFORM_WIN


1018 
	`__ôt_sy°em_îr‹
()

1020 
	`dÀº‹
()

1027 
	`__ôt_nuŒify_Æl_poöãrs
();

1029 
	`_N_
(
_ôèpi_globÆ
).
≠i_öôülized
 = 1;

1030 
cuºít_thªad
 = 0;

1032 i‡(
__ôt_föi_ôéib_±r
 =
	`_N_
(
föi_ôéib
)Ë
cuºít_thªad
 = 0;

1036 #i‚de‡
ITT_SIMPLE_INIT


1037 
	`__ôt_muãx_u∆ock
(&
	`_N_
(
_ôèpi_globÆ
).
muãx
);

1042 
i
 = 0; 
	`_N_
(
_ôèpi_globÆ
).
≠i_li°_±r
[i].
«me
 !
NULL
; i++)

1043 i‡(*
	`_N_
(
_ôèpi_globÆ
).
≠i_li°_±r
[
i
].
func_±r
 !_N_(_ôèpi_globÆ).≠i_li°_±r[i].
nuŒ_func
 &&

1044 
	`_N_
(
_ôèpi_globÆ
).
≠i_li°_±r
[
i
].
group
 & 
öô_groups
)

1047 
	}
}

1049 
ITT_EXTERN_C
 
__ôt_îr‹_h™dÀr_t
* 
	$_N_
(
£t_îr‹_h™dÀr
)(
__ôt_îr‹_h™dÀr_t
* 
h™dÀr
)

1051 
__ôt_îr‹_h™dÀr_t
* 
¥ev
 = (__ôt_îr‹_h™dÀr_t*)(
size_t
)
	`_N_
(
_ôèpi_globÆ
).
îr‹_h™dÀr
;

1052 
	`_N_
(
_ôèpi_globÆ
).
îr‹_h™dÀr
 = (*)(
size_t
)
h™dÀr
;

1053  
¥ev
;

1054 
	}
}

1056 #i‡
ITT_PLATFORM
==
ITT_PLATFORM_WIN


1057 #¥agm®
w¨nög
(
p›
)

	@viper/concurrentqueue-src/benchmarks/tbb/tools_api/ittnotify_static.h

21 
	~"ôäŸify_c⁄fig.h
"

23 #i‚de‡
ITT_FORMAT_DEFINED


24 #i‚de‡
ITT_FORMAT


25 
	#ITT_FORMAT


	)

27 #i‚de‡
ITT_NO_PARAMS


28 
	#ITT_NO_PARAMS


	)

36 #ifde‡
__ITT_INTERNAL_INIT


38 #i‚de‡
__ITT_INTERNAL_BODY


39 #i‡
ITT_PLATFORM
==
ITT_PLATFORM_WIN


40 
ITT_STUB
(
ITTAPI
, 
__ôt_domaö
*, 
domaö_¸óãA
, (c⁄° *
«me
), (
ITT_FORMAT
Çame), domaö_¸óãA, 
__ôt_group_°ru˘uª
, "\"%s\"")

41 
ITT_STUB
(
ITTAPI
, 
__ôt_domaö
*, 
domaö_¸óãW
, (c⁄° 
wch¨_t
 *
«me
), (
ITT_FORMAT
Çame), domaö_¸óãW, 
__ôt_group_°ru˘uª
, "\"%S\"")

43 
ITT_STUB
(
ITTAPI
, 
__ôt_domaö
*, 
domaö_¸óã
, (c⁄° *
«me
), (
ITT_FORMAT
Çame), domaö_¸óã, 
__ôt_group_°ru˘uª
, "\"%s\"")

46 #i‡
ITT_PLATFORM
==
ITT_PLATFORM_WIN


47 
ITT_STUB
(
ITTAPI
, 
__ôt_°rög_h™dÀ
*, 
°rög_h™dÀ_¸óãA
, (c⁄° *
«me
), (
ITT_FORMAT
Çame), såög_h™dÀ_¸óãA, 
__ôt_group_°ru˘uª
, "\"%s\"")

48 
ITT_STUB
(
ITTAPI
, 
__ôt_°rög_h™dÀ
*, 
°rög_h™dÀ_¸óãW
, (c⁄° 
wch¨_t
 *
«me
), (
ITT_FORMAT
Çame), såög_h™dÀ_¸óãW, 
__ôt_group_°ru˘uª
, "\"%S\"")

50 
ITT_STUB
(
ITTAPI
, 
__ôt_°rög_h™dÀ
*, 
°rög_h™dÀ_¸óã
, (c⁄° *
«me
), (
ITT_FORMAT
Çame), såög_h™dÀ_¸óã, 
__ôt_group_°ru˘uª
, "\"%s\"")

53 
ITT_STUBV
(
ITTAPI
, , 
∑u£
, (), (
ITT_NO_PARAMS
),Öau£, 
__ôt_group_c⁄åﬁ
 | 
__ôt_group_Àgacy
, "noárgs")

54 
ITT_STUBV
(
ITTAPI
, , 
ªsume
, (), (
ITT_NO_PARAMS
),Ñesume, 
__ôt_group_c⁄åﬁ
 | 
__ôt_group_Àgacy
, "noárgs")

56 #i‡
ITT_PLATFORM
==
ITT_PLATFORM_WIN


57 
ITT_STUBV
(
ITTAPI
, , 
thªad_£t_«meA
, (c⁄° *
«me
), (
ITT_FORMAT
Çame),Åhªad_£t_«meA, 
__ôt_group_thªad
, "\"%s\"")

58 
ITT_STUBV
(
ITTAPI
, , 
thªad_£t_«meW
, (c⁄° 
wch¨_t
 *
«me
), (
ITT_FORMAT
Çame),Åhªad_£t_«meW, 
__ôt_group_thªad
, "\"%S\"")

60 
ITT_STUBV
(
ITTAPI
, , 
thªad_£t_«me
, (c⁄° *
«me
), (
ITT_FORMAT
Çame),Åhªad_£t_«me, 
__ôt_group_thªad
, "\"%s\"")

62 
ITT_STUBV
(
ITTAPI
, , 
thªad_ign‹e
, (), (
ITT_NO_PARAMS
),Åhªad_ign‹e, 
__ôt_group_thªad
, "noárgs")

64 #i‡
ITT_PLATFORM
==
ITT_PLATFORM_WIN


65 
ITT_STUB
(
LIBITTAPI
, , 
thr_«me_£tA
, (c⁄° *
«me
, 
«mñí
), (
ITT_FORMAT
Çame,Çamñí),Åhr_«me_£tA, 
__ôt_group_thªad
 | 
__ôt_group_Àgacy
, "\"%s\", %d")

66 
ITT_STUB
(
LIBITTAPI
, , 
thr_«me_£tW
, (c⁄° 
wch¨_t
 *
«me
, 
«mñí
), (
ITT_FORMAT
Çame,Çamñí),Åhr_«me_£tW, 
__ôt_group_thªad
 | 
__ôt_group_Àgacy
, "\"%S\", %d")

68 
ITT_STUB
(
LIBITTAPI
, , 
thr_«me_£t
, (c⁄° *
«me
, 
«mñí
), (
ITT_FORMAT
Çame,Çamñí),Åhr_«me_£t, 
__ôt_group_thªad
 | 
__ôt_group_Àgacy
, "\"%s\", %d")

70 
ITT_STUBV
(
LIBITTAPI
, , 
thr_ign‹e
, (), (
ITT_NO_PARAMS
),Åhr_ign‹e, 
__ôt_group_thªad
 | 
__ôt_group_Àgacy
, "noárgs")

73 
ITT_STUBV
(
ITTAPI
, , 
íabÀ_©èch
, (), (
ITT_NO_PARAMS
),É«bÀ_©èch, 
__ôt_group_Æl
, "noárgs")

77 #i‡
ITT_PLATFORM
==
ITT_PLATFORM_WIN


78 
ITT_STUBV
(
ITTAPI
, , 
sync_¸óãA
, (*
addr
, c⁄° *
objty≥
, c⁄° *
obj«me
, 
©åibuã
), (
ITT_FORMAT
áddr, objty≥, obj«me,áâribuã), sync_¸óãA, 
__ôt_group_sync
 | 
__ôt_group_fsync
, "%p, \"%s\", \"%s\", %x")

79 
ITT_STUBV
(
ITTAPI
, , 
sync_¸óãW
, (*
addr
, c⁄° 
wch¨_t
 *
objty≥
, c⁄° wch¨_à*
obj«me
, 
©åibuã
), (
ITT_FORMAT
áddr, objty≥, obj«me,áâribuã), sync_¸óãW, 
__ôt_group_sync
 | 
__ôt_group_fsync
, "%p, \"%S\", \"%S\", %x")

80 
ITT_STUBV
(
ITTAPI
, , 
sync_ª«meA
, (*
addr
, c⁄° *
«me
), (
ITT_FORMAT
áddr,Çame), sync_ª«meA, 
__ôt_group_sync
 | 
__ôt_group_fsync
, "%p, \"%s\"")

81 
ITT_STUBV
(
ITTAPI
, , 
sync_ª«meW
, (*
addr
, c⁄° 
wch¨_t
 *
«me
), (
ITT_FORMAT
áddr,Çame), sync_ª«meW, 
__ôt_group_sync
 | 
__ôt_group_fsync
, "%p, \"%S\"")

83 
ITT_STUBV
(
ITTAPI
, , 
sync_¸óã
, (*
addr
, c⁄° *
objty≥
, c⁄° *
obj«me
, 
©åibuã
), (
ITT_FORMAT
áddr, objty≥, obj«me,áâribuã), sync_¸óã, 
__ôt_group_sync
 | 
__ôt_group_fsync
, "%p, \"%s\", \"%s\", %x")

84 
ITT_STUBV
(
ITTAPI
, , 
sync_ª«me
, (*
addr
, c⁄° *
«me
), (
ITT_FORMAT
áddr,Çame), sync_ª«me, 
__ôt_group_sync
 | 
__ôt_group_fsync
, "%p, \"%s\"")

86 
ITT_STUBV
(
ITTAPI
, , 
sync_de°roy
, (*
addr
), (
ITT_FORMAT
áddr), sync_de°roy, 
__ôt_group_sync
 | 
__ôt_group_fsync
, "%p")

88 
ITT_STUBV
(
ITTAPI
, , 
sync_¥ï¨e
, (* 
addr
), (
ITT_FORMAT
áddr), sync_¥ï¨e, 
__ôt_group_sync
, "%p")

89 
ITT_STUBV
(
ITTAPI
, , 
sync_ˇn˚l
, (*
addr
), (
ITT_FORMAT
áddr), sync_ˇn˚l, 
__ôt_group_sync
, "%p")

90 
ITT_STUBV
(
ITTAPI
, , 
sync_acquúed
, (*
addr
), (
ITT_FORMAT
áddr), sync_acquúed, 
__ôt_group_sync
, "%p")

91 
ITT_STUBV
(
ITTAPI
, , 
sync_ªÀasög
, (* 
addr
), (
ITT_FORMAT
áddr), sync_ªÀasög, 
__ôt_group_sync
, "%p")

93 
ITT_STUBV
(
ITTAPI
, , 
suµªss_push
, (
mask
), (
ITT_FORMAT
 mask), suµªss_push, 
__ôt_group_suµªss
, "%p")

94 
ITT_STUBV
(
ITTAPI
, , 
suµªss_p›
, (), (
ITT_NO_PARAMS
), suµªss_p›, 
__ôt_group_suµªss
, "noárgs")

95 
ITT_STUBV
(
ITTAPI
, , 
suµªss_m¨k_ønge
, (
__ôt_suµªss_mode_t
 
mode
, 
mask
, * 
addªss
, 
size_t
 
size
),(
ITT_FORMAT
 mode, mask,áddªss, size), suµªss_m¨k_ønge, 
__ôt_group_suµªss
, "%d, %p, %p, %d")

96 
ITT_STUBV
(
ITTAPI
, , 
suµªss_˛ór_ønge
,(
__ôt_suµªss_mode_t
 
mode
, 
mask
, * 
addªss
, 
size_t
 
size
),(
ITT_FORMAT
 mode, mask,áddªss, size), suµªss_˛ór_ønge,
__ôt_group_suµªss
, "%d, %p, %p, %d")

98 
ITT_STUBV
(
ITTAPI
, , 
fsync_¥ï¨e
, (* 
addr
), (
ITT_FORMAT
áddr), 
sync_¥ï¨e
, 
__ôt_group_fsync
, "%p")

99 
ITT_STUBV
(
ITTAPI
, , 
fsync_ˇn˚l
, (*
addr
), (
ITT_FORMAT
áddr), 
sync_ˇn˚l
, 
__ôt_group_fsync
, "%p")

100 
ITT_STUBV
(
ITTAPI
, , 
fsync_acquúed
, (*
addr
), (
ITT_FORMAT
áddr), 
sync_acquúed
, 
__ôt_group_fsync
, "%p")

101 
ITT_STUBV
(
ITTAPI
, , 
fsync_ªÀasög
, (* 
addr
), (
ITT_FORMAT
áddr), 
sync_ªÀasög
, 
__ôt_group_fsync
, "%p")

103 
ITT_STUBV
(
ITTAPI
, , 
modñ_sôe_begö
, (
__ôt_modñ_sôe
 *
sôe
, 
__ôt_modñ_sôe_ö°™˚
 *
ö°™˚
, c⁄° *
«me
), (
ITT_FORMAT
 sôe, in°™˚,Çame), modñ_sôe_begö, 
__ôt_group_modñ
, "%p, %p, \"%s\"")

104 
ITT_STUBV
(
ITTAPI
, , 
modñ_sôe_íd
, (
__ôt_modñ_sôe
 *
sôe
, 
__ôt_modñ_sôe_ö°™˚
 *
ö°™˚
), (
ITT_FORMAT
 sôe, in°™˚), modñ_sôe_íd, 
__ôt_group_modñ
, "%p, %p")

105 
ITT_STUBV
(
ITTAPI
, , 
modñ_èsk_begö
, (
__ôt_modñ_èsk
 *
èsk
, 
__ôt_modñ_èsk_ö°™˚
 *
ö°™˚
, c⁄° *
«me
), (
ITT_FORMAT
Åask, in°™˚,Çame), modñ_èsk_begö, 
__ôt_group_modñ
, "%p, %p, \"%s\"")

106 
ITT_STUBV
(
ITTAPI
, , 
modñ_èsk_íd
, (
__ôt_modñ_èsk
 *
èsk
, 
__ôt_modñ_èsk_ö°™˚
 *
ö°™˚
), (
ITT_FORMAT
Åask, in°™˚), modñ_èsk_íd, 
__ôt_group_modñ
, "%p, %p")

107 
ITT_STUBV
(
ITTAPI
, , 
modñ_lock_acquúe
, (*
lock
), (
ITT_FORMAT
Üock), modñ_lock_acquúe, 
__ôt_group_modñ
, "%p")

108 
ITT_STUBV
(
ITTAPI
, , 
modñ_lock_ªÀa£
, (*
lock
), (
ITT_FORMAT
Üock), modñ_lock_ªÀa£, 
__ôt_group_modñ
, "%p")

109 
ITT_STUBV
(
ITTAPI
, , 
modñ_ªc‹d_Æloˇti⁄
, (*
addr
, 
size_t
 
size
), (
ITT_FORMAT
áddr, size), modñ_ªc‹d_Æloˇti⁄, 
__ôt_group_modñ
, "%p, %d")

110 
ITT_STUBV
(
ITTAPI
, , 
modñ_ªc‹d_dóŒoˇti⁄
, (*
addr
), (
ITT_FORMAT
áddr), modñ_ªc‹d_dóŒoˇti⁄, 
__ôt_group_modñ
, "%p")

111 
ITT_STUBV
(
ITTAPI
, , 
modñ_ödu˘i⁄_u£s
, (* 
addr
, 
size_t
 
size
), (
ITT_FORMAT
áddr, size), modñ_ödu˘i⁄_u£s, 
__ôt_group_modñ
, "%p, %d")

112 
ITT_STUBV
(
ITTAPI
, , 
modñ_ªdu˘i⁄_u£s
, (* 
addr
, 
size_t
 
size
), (
ITT_FORMAT
áddr, size), modñ_ªdu˘i⁄_u£s, 
__ôt_group_modñ
, "%p, %d")

113 
ITT_STUBV
(
ITTAPI
, , 
modñ_ob£rve_u£s
, (* 
addr
, 
size_t
 
size
), (
ITT_FORMAT
áddr, size), modñ_ob£rve_u£s, 
__ôt_group_modñ
, "%p, %d")

114 
ITT_STUBV
(
ITTAPI
, , 
modñ_˛ór_u£s
, (* 
addr
), (
ITT_FORMAT
áddr), modñ_˛ór_u£s, 
__ôt_group_modñ
, "%p")

116 #i‚de‡
__ITT_INTERNAL_BODY


117 #i‡
ITT_PLATFORM
==
ITT_PLATFORM_WIN


118 
ITT_STUBV
(
ITTAPI
, , 
modñ_sôe_begöW
, (c⁄° 
wch¨_t
 *
«me
), (
ITT_FORMAT
Çame), modñ_sôe_begöW, 
__ôt_group_modñ
, "\"%s\"")

119 
ITT_STUBV
(
ITTAPI
, , 
modñ_èsk_begöW
, (c⁄° 
wch¨_t
 *
«me
), (
ITT_FORMAT
Çame), modñ_èsk_begöW, 
__ôt_group_modñ
, "\"%s\"")

120 
ITT_STUBV
(
ITTAPI
, , 
modñ_ôî©i⁄_èskW
, (c⁄° 
wch¨_t
 *
«me
), (
ITT_FORMAT
Çame), modñ_ôî©i⁄_èskW, 
__ôt_group_modñ
, "\"%s\"")

122 
ITT_STUBV
(
ITTAPI
, , 
modñ_sôe_begöA
, (c⁄° *
«me
), (
ITT_FORMAT
Çame), modñ_sôe_begöA, 
__ôt_group_modñ
, "\"%s\"")

123 
ITT_STUBV
(
ITTAPI
, , 
modñ_sôe_begöAL
, (c⁄° *
«me
, 
size_t
 
Àn
), (
ITT_FORMAT
Çame,Üí), modñ_sôe_begöAL, 
__ôt_group_modñ
, "\"%s\", %d")

124 
ITT_STUBV
(
ITTAPI
, , 
modñ_èsk_begöA
, (c⁄° *
«me
), (
ITT_FORMAT
Çame), modñ_èsk_begöA, 
__ôt_group_modñ
, "\"%s\"")

125 
ITT_STUBV
(
ITTAPI
, , 
modñ_èsk_begöAL
, (c⁄° *
«me
, 
size_t
 
Àn
), (
ITT_FORMAT
Çame,Üí), modñ_èsk_begöAL, 
__ôt_group_modñ
, "\"%s\", %d")

126 
ITT_STUBV
(
ITTAPI
, , 
modñ_ôî©i⁄_èskA
, (c⁄° *
«me
), (
ITT_FORMAT
Çame), modñ_ôî©i⁄_èskA, 
__ôt_group_modñ
, "\"%s\"")

127 
ITT_STUBV
(
ITTAPI
, , 
modñ_ôî©i⁄_èskAL
, (c⁄° *
«me
, 
size_t
 
Àn
), (
ITT_FORMAT
Çame,Üí), modñ_ôî©i⁄_èskAL, 
__ôt_group_modñ
, "\"%s\", %d")

128 
ITT_STUBV
(
ITTAPI
, , 
modñ_sôe_íd_2
, (), (
ITT_NO_PARAMS
), modñ_sôe_íd_2, 
__ôt_group_modñ
, "noárgs")

129 
ITT_STUBV
(
ITTAPI
, , 
modñ_èsk_íd_2
, (), (
ITT_NO_PARAMS
), modñ_èsk_íd_2, 
__ôt_group_modñ
, "noárgs")

130 
ITT_STUBV
(
ITTAPI
, , 
modñ_lock_acquúe_2
, (*
lock
), (
ITT_FORMAT
Üock), modñ_lock_acquúe_2, 
__ôt_group_modñ
, "%p")

131 
ITT_STUBV
(
ITTAPI
, , 
modñ_lock_ªÀa£_2
, (*
lock
), (
ITT_FORMAT
Üock), modñ_lock_ªÀa£_2, 
__ôt_group_modñ
, "%p")

132 
ITT_STUBV
(
ITTAPI
, , 
modñ_aggªg©e_èsk
, (
size_t
 
cou¡
), (
ITT_FORMAT
 cou¡), modñ_aggªg©e_èsk, 
__ôt_group_modñ
, "%d")

133 
ITT_STUBV
(
ITTAPI
, , 
modñ_dißbÀ_push
, (
__ôt_modñ_dißbÀ
 
x
), (
ITT_FORMAT
 x), modñ_dißbÀ_push, 
__ôt_group_modñ
, "%p")

134 
ITT_STUBV
(
ITTAPI
, , 
modñ_dißbÀ_p›
, (), (
ITT_NO_PARAMS
), modñ_dißbÀ_p›, 
__ôt_group_modñ
, "noárgs")

137 #i‚de‡
__ITT_INTERNAL_BODY


138 #i‡
ITT_PLATFORM
==
ITT_PLATFORM_WIN


139 
ITT_STUB
(
ITTAPI
, 
__ôt_hóp_fun˘i⁄
, 
hóp_fun˘i⁄_¸óãA
, (c⁄° *
«me
, c⁄° *
domaö
), (
ITT_FORMAT
Çame, domaö), hóp_fun˘i⁄_¸óãA, 
__ôt_group_hóp
, "\"%s\", \"%s\"")

140 
ITT_STUB
(
ITTAPI
, 
__ôt_hóp_fun˘i⁄
, 
hóp_fun˘i⁄_¸óãW
, (c⁄° 
wch¨_t
 *
«me
, c⁄° wch¨_à*
domaö
), (
ITT_FORMAT
Çame, domaö), hóp_fun˘i⁄_¸óãW, 
__ôt_group_hóp
, "\"%s\", \"%s\"")

142 
ITT_STUB
(
ITTAPI
, 
__ôt_hóp_fun˘i⁄
, 
hóp_fun˘i⁄_¸óã
, (c⁄° *
«me
, c⁄° *
domaö
), (
ITT_FORMAT
Çame, domaö), hóp_fun˘i⁄_¸óã, 
__ôt_group_hóp
, "\"%s\", \"%s\"")

145 
ITT_STUBV
(
ITTAPI
, , 
hóp_Æloˇã_begö
, (
__ôt_hóp_fun˘i⁄
 
h
, 
size_t
 
size
, 
öôülized
), (
ITT_FORMAT
 h, size, inôülized), hóp_Æloˇã_begö, 
__ôt_group_hóp
, "%p, %lu, %d")

146 
ITT_STUBV
(
ITTAPI
, , 
hóp_Æloˇã_íd
, (
__ôt_hóp_fun˘i⁄
 
h
, ** 
addr
, 
size_t
 
size
, 
öôülized
), (
ITT_FORMAT
 h,áddr, size, inôülized), hóp_Æloˇã_íd, 
__ôt_group_hóp
, "%p, %p, %lu, %d")

147 
ITT_STUBV
(
ITTAPI
, , 
hóp_‰ì_begö
, (
__ôt_hóp_fun˘i⁄
 
h
, * 
addr
), (
ITT_FORMAT
 h,áddr), hóp_‰ì_begö, 
__ôt_group_hóp
, "%p, %p")

148 
ITT_STUBV
(
ITTAPI
, , 
hóp_‰ì_íd
, (
__ôt_hóp_fun˘i⁄
 
h
, * 
addr
), (
ITT_FORMAT
 h,áddr), hóp_‰ì_íd, 
__ôt_group_hóp
, "%p, %p")

149 
ITT_STUBV
(
ITTAPI
, , 
hóp_ªÆloˇã_begö
, (
__ôt_hóp_fun˘i⁄
 
h
, * 
addr
, 
size_t
 
√w_size
, 
öôülized
), (
ITT_FORMAT
 h,áddr,Çew_size, inôülized), hóp_ªÆloˇã_begö, 
__ôt_group_hóp
, "%p, %p, %lu, %d")

150 
ITT_STUBV
(
ITTAPI
, , 
hóp_ªÆloˇã_íd
, (
__ôt_hóp_fun˘i⁄
 
h
, * 
addr
, ** 
√w_addr
, 
size_t
 
√w_size
, 
öôülized
), (
ITT_FORMAT
 h,áddr,Çew_addr,Çew_size, inôülized), hóp_ªÆloˇã_íd, 
__ôt_group_hóp
, "%p, %p, %p, %lu, %d")

151 
ITT_STUBV
(
ITTAPI
, , 
hóp_öã∫Æ_ac˚ss_begö
, (), (
ITT_NO_PARAMS
), hóp_öã∫Æ_ac˚ss_begö, 
__ôt_group_hóp
, "noárgs")

152 
ITT_STUBV
(
ITTAPI
, , 
hóp_öã∫Æ_ac˚ss_íd
, (), (
ITT_NO_PARAMS
), hóp_öã∫Æ_ac˚ss_íd, 
__ôt_group_hóp
, "noárgs")

153 
ITT_STUBV
(
ITTAPI
, , 
hóp_ªc‹d_mem‹y_growth_begö
, (), (
ITT_NO_PARAMS
), hóp_ªc‹d_mem‹y_growth_begö, 
__ôt_group_hóp
, "noárgs")

154 
ITT_STUBV
(
ITTAPI
, , 
hóp_ªc‹d_mem‹y_growth_íd
, (), (
ITT_NO_PARAMS
), hóp_ªc‹d_mem‹y_growth_íd, 
__ôt_group_hóp
, "noárgs")

155 
ITT_STUBV
(
ITTAPI
, , 
hóp_ª£t_dëe˘i⁄
, (
ª£t_mask
), (
ITT_FORMAT
Ñe£t_mask), hóp_ª£t_dëe˘i⁄, 
__ôt_group_hóp
, "%u")

156 
ITT_STUBV
(
ITTAPI
, , 
hóp_ªc‹d
, (
ªc‹d_mask
), (
ITT_FORMAT
Ñec‹d_mask), hóp_ªc‹d, 
__ôt_group_hóp
, "%u")

158 
ITT_STUBV
(
ITTAPI
, , 
id_¸óã
, (c⁄° 
__ôt_domaö
 *
domaö
, 
__ôt_id
 
id
), (
ITT_FORMAT
 domaö, id), id_¸óã, 
__ôt_group_°ru˘uª
, "%p, %lu")

159 
ITT_STUBV
(
ITTAPI
, , 
id_de°roy
, (c⁄° 
__ôt_domaö
 *
domaö
, 
__ôt_id
 
id
), (
ITT_FORMAT
 domaö, id), id_de°roy, 
__ôt_group_°ru˘uª
, "%p, %lu")

161 
ITT_STUB
(
ITTAPI
, 
__ôt_time°amp
, 
gë_time°amp
, (), (
ITT_NO_PARAMS
), gë_time°amp, 
__ôt_group_°ru˘uª
, "noárgs")

163 
ITT_STUBV
(
ITTAPI
, , 
ªgi⁄_begö
, (c⁄° 
__ôt_domaö
 *
domaö
, 
__ôt_id
 
id
, __ôt_id 
∑ª¡
, 
__ôt_°rög_h™dÀ
 *
«me
), (
ITT_FORMAT
 domaö, id,Ö¨ít,Çame),Ñegi⁄_begö, 
__ôt_group_°ru˘uª
, "%p, %lu, %lu, %p")

164 
ITT_STUBV
(
ITTAPI
, , 
ªgi⁄_íd
, (c⁄° 
__ôt_domaö
 *
domaö
, 
__ôt_id
 
id
), (
ITT_FORMAT
 domaö, id),Ñegi⁄_íd, 
__ôt_group_°ru˘uª
, "%p, %lu")

166 #i‚de‡
__ITT_INTERNAL_BODY


167 
ITT_STUBV
(
ITTAPI
, , 
‰ame_begö_v3
, (c⁄° 
__ôt_domaö
 *
domaö
, 
__ôt_id
 *
id
), (
ITT_FORMAT
 domaö, id), føme_begö_v3, 
__ôt_group_°ru˘uª
, "%p, %p")

168 
ITT_STUBV
(
ITTAPI
, , 
‰ame_íd_v3
, (c⁄° 
__ôt_domaö
 *
domaö
, 
__ôt_id
 *
id
), (
ITT_FORMAT
 domaö, id), føme_íd_v3, 
__ôt_group_°ru˘uª
, "%p, %p")

169 
ITT_STUBV
(
ITTAPI
, , 
‰ame_submô_v3
, (c⁄° 
__ôt_domaö
 *
domaö
, 
__ôt_id
 *
id
, 
__ôt_time°amp
 
begö
, __ôt_time°am∞
íd
), (
ITT_FORMAT
 domaö, id, begö,Énd), føme_submô_v3, 
__ôt_group_°ru˘uª
, "%p, %p, %lu, %lu")

172 
ITT_STUBV
(
ITTAPI
, , 
èsk_group
, (c⁄° 
__ôt_domaö
 *
domaö
, 
__ôt_id
 
id
, __ôt_id 
∑ª¡
, 
__ôt_°rög_h™dÀ
 *
«me
), (
ITT_FORMAT
 domaö, id,Ö¨ít,Çame),Åask_group, 
__ôt_group_°ru˘uª
, "%p, %lu, %lu, %p")

174 
ITT_STUBV
(
ITTAPI
, , 
èsk_begö
, (c⁄° 
__ôt_domaö
 *
domaö
, 
__ôt_id
 
id
, __ôt_id 
∑ª¡
, 
__ôt_°rög_h™dÀ
 *
«me
), (
ITT_FORMAT
 domaö, id,Ö¨ít,Çame),Åask_begö, 
__ôt_group_°ru˘uª
, "%p, %lu, %lu, %p")

175 
ITT_STUBV
(
ITTAPI
, , 
èsk_begö_‚
, (c⁄° 
__ôt_domaö
 *
domaö
, 
__ôt_id
 
id
, __ôt_id 
∑ª¡
, * 
‚
), (
ITT_FORMAT
 domaö, id,Ö¨ít, fn),Åask_begö_‚, 
__ôt_group_°ru˘uª
, "%p, %lu, %lu, %p")

176 
ITT_STUBV
(
ITTAPI
, , 
èsk_íd
, (c⁄° 
__ôt_domaö
 *
domaö
), (
ITT_FORMAT
 domaö),Åask_íd, 
__ôt_group_°ru˘uª
, "%p")

178 
ITT_STUBV
(
ITTAPI
, , 
cou¡î_öc_v3
, (c⁄° 
__ôt_domaö
 *
domaö
, 
__ôt_°rög_h™dÀ
 *
«me
), (
ITT_FORMAT
 domaö,Çame), cou¡î_öc_v3, 
__ôt_group_°ru˘uª
, "%p, %p")

179 
ITT_STUBV
(
ITTAPI
, , 
cou¡î_öc_dñè_v3
, (c⁄° 
__ôt_domaö
 *
domaö
, 
__ôt_°rög_h™dÀ
 *
«me
, 
vÆue
), (
ITT_FORMAT
 domaö,Çame, vÆue), cou¡î_öc_dñè_v3, 
__ôt_group_°ru˘uª
, "%p, %p, %lu")

181 
ITT_STUBV
(
ITTAPI
, , 
m¨kî
, (c⁄° 
__ôt_domaö
 *
domaö
, 
__ôt_id
 
id
, 
__ôt_°rög_h™dÀ
 *
«me
, 
__ôt_sc›e
 
sc›e
), (
ITT_FORMAT
 domaö, id,Çame, sc›e), m¨kî, 
__ôt_group_°ru˘uª
, "%p, %lu, %p, %d")

183 
ITT_STUBV
(
ITTAPI
, , 
mëad©a_add
, (c⁄° 
__ôt_domaö
 *
domaö
, 
__ôt_id
 
id
, 
__ôt_°rög_h™dÀ
 *
key
, 
__ôt_mëad©a_ty≥
 
ty≥
, 
size_t
 
cou¡
, *
d©a
), (
ITT_FORMAT
 domaö, id, key,Åy≥, cou¡, d©a), mëad©a_add, 
__ôt_group_°ru˘uª
, "%p, %lu, %p, %d, %lu, %p")

184 #i‡
ITT_PLATFORM
==
ITT_PLATFORM_WIN


185 
ITT_STUBV
(
ITTAPI
, , 
mëad©a_°r_addA
, (c⁄° 
__ôt_domaö
 *
domaö
, 
__ôt_id
 
id
, 
__ôt_°rög_h™dÀ
 *
key
, c⁄° * 
d©a
, 
size_t
 
Àngth
), (
ITT_FORMAT
 domaö, id, key, d©a,Üígth), mëad©a_°r_addA, 
__ôt_group_°ru˘uª
, "%p, %lu, %p, %p, %lu")

186 
ITT_STUBV
(
ITTAPI
, , 
mëad©a_°r_addW
, (c⁄° 
__ôt_domaö
 *
domaö
, 
__ôt_id
 
id
, 
__ôt_°rög_h™dÀ
 *
key
, c⁄° 
wch¨_t
* 
d©a
, 
size_t
 
Àngth
), (
ITT_FORMAT
 domaö, id, key, d©a,Üígth), mëad©a_°r_addW, 
__ôt_group_°ru˘uª
, "%p, %lu, %p, %p, %lu")

188 
ITT_STUBV
(
ITTAPI
, , 
mëad©a_°r_add
, (c⁄° 
__ôt_domaö
 *
domaö
, 
__ôt_id
 
id
, 
__ôt_°rög_h™dÀ
 *
key
, c⁄° * 
d©a
, 
size_t
 
Àngth
), (
ITT_FORMAT
 domaö, id, key, d©a,Üígth), mëad©a_°r_add, 
__ôt_group_°ru˘uª
, "%p, %lu, %p, %p, %lu")

191 
ITT_STUBV
(
ITTAPI
, , 
ªœti⁄_add_to_cuºít
, (c⁄° 
__ôt_domaö
 *
domaö
, 
__ôt_ªœti⁄
 
ªœti⁄
, 
__ôt_id
 
èû
), (
ITT_FORMAT
 domaö,Ññ©i⁄,Åaû),Ññ©i⁄_add_to_cuºít, 
__ôt_group_°ru˘uª
, "%p, %lu, %p")

192 
ITT_STUBV
(
ITTAPI
, , 
ªœti⁄_add
, (c⁄° 
__ôt_domaö
 *
domaö
, 
__ôt_id
 
hód
, 
__ôt_ªœti⁄
 
ªœti⁄
, __ôt_id 
èû
), (
ITT_FORMAT
 domaö, hód,Ññ©i⁄,Åaû),Ññ©i⁄_add, 
__ôt_group_°ru˘uª
, "%p, %p, %lu, %p")

194 #i‚de‡
__ITT_INTERNAL_BODY


195 #i‡
ITT_PLATFORM
==
ITT_PLATFORM_WIN


196 
ITT_STUB
(
LIBITTAPI
, 
__ôt_evít
, 
evít_¸óãA
, (c⁄° *
«me
, 
«mñí
), (
ITT_FORMAT
Çame,Çamñí),Évít_¸óãA, 
__ôt_group_m¨k
 | 
__ôt_group_Àgacy
, "\"%s\", %d")

197 
ITT_STUB
(
LIBITTAPI
, 
__ôt_evít
, 
evít_¸óãW
, (c⁄° 
wch¨_t
 *
«me
, 
«mñí
), (
ITT_FORMAT
Çame,Çamñí),Évít_¸óãW, 
__ôt_group_m¨k
 | 
__ôt_group_Àgacy
, "\"%S\", %d")

199 
ITT_STUB
(
LIBITTAPI
, 
__ôt_evít
, 
evít_¸óã
, (c⁄° *
«me
, 
«mñí
), (
ITT_FORMAT
Çame,Çamñí),Évít_¸óã, 
__ôt_group_m¨k
 | 
__ôt_group_Àgacy
, "\"%s\", %d")

201 
ITT_STUB
(
LIBITTAPI
, , 
evít_°¨t
, (
__ôt_evít
 
evít
), (
ITT_FORMAT
Évít),Évít_°¨t, 
__ôt_group_m¨k
 | 
__ôt_group_Àgacy
, "%d")

202 
ITT_STUB
(
LIBITTAPI
, , 
evít_íd
, (
__ôt_evít
 
evít
), (
ITT_FORMAT
Évít),Évít_íd, 
__ôt_group_m¨k
 | 
__ôt_group_Àgacy
, "%d")

205 #i‚de‡
__ITT_INTERNAL_BODY


206 #i‡
ITT_PLATFORM
==
ITT_PLATFORM_WIN


207 
ITT_STUBV
(
ITTAPI
, , 
sync_£t_«meA
, (*
addr
, c⁄° *
objty≥
, c⁄° *
obj«me
, 
©åibuã
), (
ITT_FORMAT
áddr, objty≥, obj«me,áâribuã), sync_£t_«meA, 
__ôt_group_sync
 | 
__ôt_group_fsync
 | 
__ôt_group_Àgacy
, "%p, \"%s\", \"%s\", %x")

208 
ITT_STUBV
(
ITTAPI
, , 
sync_£t_«meW
, (*
addr
, c⁄° 
wch¨_t
 *
objty≥
, c⁄° wch¨_à*
obj«me
, 
©åibuã
), (
ITT_FORMAT
áddr, objty≥, obj«me,áâribuã), sync_£t_«meW, 
__ôt_group_sync
 | 
__ôt_group_fsync
 | 
__ôt_group_Àgacy
, "%p, \"%S\", \"%S\", %x")

210 
ITT_STUBV
(
ITTAPI
, , 
sync_£t_«me
, (*
addr
, c⁄° *
objty≥
, c⁄° *
obj«me
, 
©åibuã
), (
ITT_FORMAT
áddr, objty≥, obj«me,áâribuã), sync_£t_«me, 
__ôt_group_sync
 | 
__ôt_group_fsync
 | 
__ôt_group_Àgacy
, "p, \"%s\", \"%s\", %x")

213 #i‡
ITT_PLATFORM
==
ITT_PLATFORM_WIN


214 
ITT_STUB
(
LIBITTAPI
, , 
nŸify_sync_«meA
, (*
p
, c⁄° *
objty≥
, 
ty≥Àn
, c⁄° *
obj«me
, 
«mñí
, 
©åibuã
), (
ITT_FORMAT
Ö, objty≥,Åy≥Àn, obj«me,Çamñí,áâribuã),ÇŸify_sync_«meA, 
__ôt_group_sync
 | 
__ôt_group_fsync
 | 
__ôt_group_Àgacy
, "%p, \"%s\", %d, \"%s\", %d, %x")

215 
ITT_STUB
(
LIBITTAPI
, , 
nŸify_sync_«meW
, (*
p
, c⁄° 
wch¨_t
 *
objty≥
, 
ty≥Àn
, c⁄° wch¨_à*
obj«me
, 
«mñí
, 
©åibuã
), (
ITT_FORMAT
Ö, objty≥,Åy≥Àn, obj«me,Çamñí,áâribuã),ÇŸify_sync_«meW, 
__ôt_group_sync
 | 
__ôt_group_fsync
 | 
__ôt_group_Àgacy
, "%p, \"%S\", %d, \"%S\", %d, %x")

217 
ITT_STUB
(
LIBITTAPI
, , 
nŸify_sync_«me
, (*
p
, c⁄° *
objty≥
, 
ty≥Àn
, c⁄° *
obj«me
, 
«mñí
, 
©åibuã
), (
ITT_FORMAT
Ö, objty≥,Åy≥Àn, obj«me,Çamñí,áâribuã),ÇŸify_sync_«me, 
__ôt_group_sync
 | 
__ôt_group_fsync
 | 
__ôt_group_Àgacy
, "%p, \"%s\", %d, \"%s\", %d, %x")

220 
ITT_STUBV
(
LIBITTAPI
, , 
nŸify_sync_¥ï¨e
, (*
p
), (
ITT_FORMAT
Ö),ÇŸify_sync_¥ï¨e, 
__ôt_group_sync
 | 
__ôt_group_fsync
 | 
__ôt_group_Àgacy
, "%p")

221 
ITT_STUBV
(
LIBITTAPI
, , 
nŸify_sync_ˇn˚l
, (*
p
), (
ITT_FORMAT
Ö),ÇŸify_sync_ˇn˚l, 
__ôt_group_sync
 | 
__ôt_group_fsync
 | 
__ôt_group_Àgacy
, "%p")

222 
ITT_STUBV
(
LIBITTAPI
, , 
nŸify_sync_acquúed
, (*
p
), (
ITT_FORMAT
Ö),ÇŸify_sync_acquúed, 
__ôt_group_sync
 | 
__ôt_group_fsync
 | 
__ôt_group_Àgacy
, "%p")

223 
ITT_STUBV
(
LIBITTAPI
, , 
nŸify_sync_ªÀasög
, (*
p
), (
ITT_FORMAT
Ö),ÇŸify_sync_ªÀasög, 
__ôt_group_sync
 | 
__ôt_group_fsync
 | 
__ôt_group_Àgacy
, "%p")

226 
ITT_STUBV
(
LIBITTAPI
, , 
mem‹y_ªad
, (*
addr
, 
size_t
 
size
), (
ITT_FORMAT
áddr, size), mem‹y_ªad, 
__ôt_group_Àgacy
, "%p, %lu")

227 
ITT_STUBV
(
LIBITTAPI
, , 
mem‹y_wrôe
, (*
addr
, 
size_t
 
size
), (
ITT_FORMAT
áddr, size), mem‹y_wrôe, 
__ôt_group_Àgacy
, "%p, %lu")

228 
ITT_STUBV
(
LIBITTAPI
, , 
mem‹y_upd©e
, (*
addr
, 
size_t
 
size
), (
ITT_FORMAT
áddr, size), mem‹y_upd©e, 
__ôt_group_Àgacy
, "%p, %lu")

230 
ITT_STUB
(
LIBITTAPI
, 
__ôt_°©e_t
, 
°©e_gë
, (), (
ITT_NO_PARAMS
), sèã_gë, 
__ôt_group_Àgacy
, "noárgs")

231 
ITT_STUB
(
LIBITTAPI
, 
__ôt_°©e_t
, 
°©e_£t
, (__ôt_°©e_à
s
), (
ITT_FORMAT
 s), sèã_£t, 
__ôt_group_Àgacy
, "%d")

232 
ITT_STUB
(
LIBITTAPI
, 
__ôt_obj_°©e_t
, 
obj_mode_£t
, (
__ôt_obj_¥›_t
 
p
, __ôt_obj_°©e_à
s
), (
ITT_FORMAT
Ö, s), obj_mode_£t, 
__ôt_group_Àgacy
, "%d, %d")

233 
ITT_STUB
(
LIBITTAPI
, 
__ôt_thr_°©e_t
, 
thr_mode_£t
, (
__ôt_thr_¥›_t
 
p
, __ôt_thr_°©e_à
s
), (
ITT_FORMAT
Ö, s),Åhr_mode_£t, 
__ôt_group_Àgacy
, "%d, %d")

235 #i‚de‡
__ITT_INTERNAL_BODY


236 #i‡
ITT_PLATFORM
==
ITT_PLATFORM_WIN


237 
ITT_STUB
(
ITTAPI
, 
__ôt_‰ame
, 
‰ame_¸óãA
, (c⁄° *
domaö
), (
ITT_FORMAT
 domaö), føme_¸óãA, 
__ôt_group_‰ame
, "\"%s\"")

238 
ITT_STUB
(
ITTAPI
, 
__ôt_‰ame
, 
‰ame_¸óãW
, (c⁄° 
wch¨_t
 *
domaö
), (
ITT_FORMAT
 domaö), føme_¸óãW, 
__ôt_group_‰ame
, "\"%s\"")

240 
ITT_STUB
(
ITTAPI
, 
__ôt_‰ame
, 
‰ame_¸óã
, (c⁄° *
domaö
), (
ITT_FORMAT
 domaö), føme_¸óã, 
__ôt_group_‰ame
, "\"%s\"")

243 
ITT_STUBV
(
ITTAPI
, , 
‰ame_begö
, (
__ôt_‰ame
 
‰ame
), (
ITT_FORMAT
 føme), føme_begö, 
__ôt_group_‰ame
, "%p")

244 
ITT_STUBV
(
ITTAPI
, , 
‰ame_íd
, (
__ôt_‰ame
 
‰ame
), (
ITT_FORMAT
 føme), føme_íd, 
__ôt_group_‰ame
, "%p")

246 #i‚de‡
__ITT_INTERNAL_BODY


247 #i‡
ITT_PLATFORM
==
ITT_PLATFORM_WIN


248 
ITT_STUB
(
ITTAPI
, 
__ôt_cou¡î
, 
cou¡î_¸óãA
, (c⁄° *
«me
, c⁄° *
domaö
), (
ITT_FORMAT
Çame, domaö), cou¡î_¸óãA, 
__ôt_group_cou¡î
, "\"%s\", \"%s\"")

249 
ITT_STUB
(
ITTAPI
, 
__ôt_cou¡î
, 
cou¡î_¸óãW
, (c⁄° 
wch¨_t
 *
«me
, c⁄° wch¨_à*
domaö
), (
ITT_FORMAT
Çame, domaö), cou¡î_¸óãW, 
__ôt_group_cou¡î
, "\"%s\", \"%s\"")

251 
ITT_STUB
(
ITTAPI
, 
__ôt_cou¡î
, 
cou¡î_¸óã
, (c⁄° *
«me
, c⁄° *
domaö
), (
ITT_FORMAT
Çame, domaö), cou¡î_¸óã, 
__ôt_group_cou¡î
, "\"%s\", \"%s\"")

254 
ITT_STUBV
(
ITTAPI
, , 
cou¡î_de°roy
, (
__ôt_cou¡î
 
id
), (
ITT_FORMAT
 id), cou¡î_de°roy, 
__ôt_group_cou¡î
, "%p")

255 
ITT_STUBV
(
ITTAPI
, , 
cou¡î_öc
, (
__ôt_cou¡î
 
id
), (
ITT_FORMAT
 id), cou¡î_öc, 
__ôt_group_cou¡î
, "%p")

256 
ITT_STUBV
(
ITTAPI
, , 
cou¡î_öc_dñè
, (
__ôt_cou¡î
 
id
, 
vÆue
), (
ITT_FORMAT
 id, vÆue), cou¡î_öc_dñè, 
__ôt_group_cou¡î
, "%p, %lu")

258 #i‚de‡
__ITT_INTERNAL_BODY


259 #i‡
ITT_PLATFORM
==
ITT_PLATFORM_WIN


260 
ITT_STUB
(
ITTAPI
, 
__ôt_m¨k_ty≥
, 
m¨k_¸óãA
, (c⁄° *
«me
), (
ITT_FORMAT
Çame), m¨k_¸óãA, 
__ôt_group_m¨k
, "\"%s\"")

261 
ITT_STUB
(
ITTAPI
, 
__ôt_m¨k_ty≥
, 
m¨k_¸óãW
, (c⁄° 
wch¨_t
 *
«me
), (
ITT_FORMAT
Çame), m¨k_¸óãW, 
__ôt_group_m¨k
, "\"%S\"")

263 
ITT_STUB
(
ITTAPI
, 
__ôt_m¨k_ty≥
, 
m¨k_¸óã
, (c⁄° *
«me
), (
ITT_FORMAT
Çame), m¨k_¸óã, 
__ôt_group_m¨k
, "\"%s\"")

266 #i‡
ITT_PLATFORM
==
ITT_PLATFORM_WIN


267 
ITT_STUB
(
ITTAPI
, , 
m¨kA
, (
__ôt_m¨k_ty≥
 
mt
, c⁄° *
∑ømëî
), (
ITT_FORMAT
 mt,Ö¨amëî), m¨kA, 
__ôt_group_m¨k
, "%d, \"%s\"")

268 
ITT_STUB
(
ITTAPI
, , 
m¨kW
, (
__ôt_m¨k_ty≥
 
mt
, c⁄° 
wch¨_t
 *
∑ømëî
), (
ITT_FORMAT
 mt,Ö¨amëî), m¨kW, 
__ôt_group_m¨k
, "%d, \"%S\"")

270 
ITT_STUB
(
ITTAPI
, , 
m¨k
, (
__ôt_m¨k_ty≥
 
mt
, c⁄° *
∑ømëî
), (
ITT_FORMAT
 mt,Ö¨amëî), m¨k, 
__ôt_group_m¨k
, "%d, \"%s\"")

272 
ITT_STUB
(
ITTAPI
, , 
m¨k_off
, (
__ôt_m¨k_ty≥
 
mt
), (
ITT_FORMAT
 mt), m¨k_off, 
__ôt_group_m¨k
, "%d")

273 #i‡
ITT_PLATFORM
==
ITT_PLATFORM_WIN


274 
ITT_STUB
(
ITTAPI
, , 
m¨k_globÆA
, (
__ôt_m¨k_ty≥
 
mt
, c⁄° *
∑ømëî
), (
ITT_FORMAT
 mt,Ö¨amëî), m¨k_globÆA, 
__ôt_group_m¨k
, "%d, \"%s\"")

275 
ITT_STUB
(
ITTAPI
, , 
m¨k_globÆW
, (
__ôt_m¨k_ty≥
 
mt
, c⁄° 
wch¨_t
 *
∑ømëî
), (
ITT_FORMAT
 mt,Ö¨amëî), m¨k_globÆW, 
__ôt_group_m¨k
, "%d, \"%S\"")

277 
ITT_STUB
(
ITTAPI
, , 
m¨k_globÆ
, (
__ôt_m¨k_ty≥
 
mt
, c⁄° *
∑ømëî
), (
ITT_FORMAT
 mt,Ö¨amëî), m¨k_globÆ, 
__ôt_group_m¨k
, "%d, \"%S\"")

279 
ITT_STUB
(
ITTAPI
, , 
m¨k_globÆ_off
, (
__ôt_m¨k_ty≥
 
mt
), (
ITT_FORMAT
 mt), m¨k_globÆ_off, 
__ôt_group_m¨k
, "%d")

281 #i‚de‡
__ITT_INTERNAL_BODY


282 
ITT_STUB
(
ITTAPI
, 
__ôt_ˇŒî
, 
°ack_ˇŒî_¸óã
, (), (
ITT_NO_PARAMS
), sèck_ˇŒî_¸óã, 
__ôt_group_°ôch
, "noárgs")

284 
ITT_STUBV
(
ITTAPI
, , 
°ack_ˇŒî_de°roy
, (
__ôt_ˇŒî
 
id
), (
ITT_FORMAT
 id), sèck_ˇŒî_de°roy, 
__ôt_group_°ôch
, "%p")

285 
ITT_STUBV
(
ITTAPI
, , 
°ack_ˇŒì_íãr
, (
__ôt_ˇŒî
 
id
), (
ITT_FORMAT
 id), sèck_ˇŒì_íãr, 
__ôt_group_°ôch
, "%p")

286 
ITT_STUBV
(
ITTAPI
, , 
°ack_ˇŒì_Àave
, (
__ôt_ˇŒî
 
id
), (
ITT_FORMAT
 id), sèck_ˇŒì_Àave, 
__ôt_group_°ôch
, "%p")

288 
ITT_STUB
(
ITTAPI
, 
__ôt_˛ock_domaö
*, 
˛ock_domaö_¸óã
, (
__ôt_gë_˛ock_öfo_‚
 
‚
, * 
‚_d©a
), (
ITT_FORMAT
 fn, fn_d©a), clock_domaö_¸óã, 
__ôt_group_°ru˘uª
, "%p, %p")

289 
ITT_STUBV
(
ITTAPI
, , 
˛ock_domaö_ª£t
, (), (
ITT_NO_PARAMS
), clock_domaö_ª£t, 
__ôt_group_°ru˘uª
, "noárgs")

290 
ITT_STUBV
(
ITTAPI
, , 
id_¸óã_ex
, (c⁄° 
__ôt_domaö
 *
domaö
, 
__ôt_˛ock_domaö
* 
˛ock_domaö
, 
time°amp
, 
__ôt_id
 
id
), (
ITT_FORMAT
 domaö, clock_domaö,Åime°amp, id), id_¸óã_ex, 
__ôt_group_°ru˘uª
, "%p, %p, %lu, %lu")

291 
ITT_STUBV
(
ITTAPI
, , 
id_de°roy_ex
, (c⁄° 
__ôt_domaö
 *
domaö
, 
__ôt_˛ock_domaö
* 
˛ock_domaö
, 
time°amp
, 
__ôt_id
 
id
), (
ITT_FORMAT
 domaö, clock_domaö,Åime°amp, id), id_de°roy_ex, 
__ôt_group_°ru˘uª
, "%p, %p, %lu, %lu")

292 
ITT_STUBV
(
ITTAPI
, , 
èsk_begö_ex
, (c⁄° 
__ôt_domaö
 *
domaö
, 
__ôt_˛ock_domaö
* 
˛ock_domaö
, 
time°amp
, 
__ôt_id
 
id
, __ôt_id 
∑ª¡id
, 
__ôt_°rög_h™dÀ
 *
«me
), (
ITT_FORMAT
 domaö, clock_domaö,Åime°amp, id,Ö¨ítid,Çame),Åask_begö_ex, 
__ôt_group_°ru˘uª
, "%p, %p, %lu, %lu, %lu, %p")

293 
ITT_STUBV
(
ITTAPI
, , 
èsk_begö_‚_ex
, (c⁄° 
__ôt_domaö
 *
domaö
, 
__ôt_˛ock_domaö
* 
˛ock_domaö
, 
time°amp
, 
__ôt_id
 
id
, __ôt_id 
∑ª¡id
, * 
‚
), (
ITT_FORMAT
 domaö, clock_domaö,Åime°amp, id,Ö¨ítid, fn),Åask_begö_‚_ex, 
__ôt_group_°ru˘uª
, "%p, %p, %lu, %lu, %lu, %p")

294 
ITT_STUBV
(
ITTAPI
, , 
èsk_íd_ex
, (c⁄° 
__ôt_domaö
 *
domaö
, 
__ôt_˛ock_domaö
* 
˛ock_domaö
, 
time°amp
), (
ITT_FORMAT
 domaö, clock_domaö,Åime°amp),Åask_íd_ex, 
__ôt_group_°ru˘uª
, "%p, %p, %lu")

295 
ITT_STUBV
(
ITTAPI
, , 
èsk_begö_ovîœµed
, (c⁄° 
__ôt_domaö
 *
domaö
, 
__ôt_id
 
id
, __ôt_id 
∑ª¡
, 
__ôt_°rög_h™dÀ
 *
«me
), (
ITT_FORMAT
 domaö, id,Ö¨ít,Çame),Åask_begö_ovîœµed, 
__ôt_group_°ru˘uª
, "%p, %lu, %lu, %p")

296 
ITT_STUBV
(
ITTAPI
, , 
èsk_begö_ovîœµed_ex
, (c⁄° 
__ôt_domaö
 *
domaö
, 
__ôt_˛ock_domaö
* 
˛ock_domaö
, 
time°amp
, 
__ôt_id
 
id
, __ôt_id 
∑ª¡id
, 
__ôt_°rög_h™dÀ
 *
«me
), (
ITT_FORMAT
 domaö, clock_domaö,Åime°amp, id,Ö¨ítid,Çame),Åask_begö_ovîœµed_ex, 
__ôt_group_°ru˘uª
, "%p, %p, %lu, %lu, %lu, %p")

297 
ITT_STUBV
(
ITTAPI
, , 
èsk_íd_ovîœµed
, (c⁄° 
__ôt_domaö
 *
domaö
, 
__ôt_id
 
id
), (
ITT_FORMAT
 domaö, id),Åask_íd_ovîœµed, 
__ôt_group_°ru˘uª
, "%p, %lu")

298 
ITT_STUBV
(
ITTAPI
, , 
èsk_íd_ovîœµed_ex
, (c⁄° 
__ôt_domaö
 *
domaö
, 
__ôt_˛ock_domaö
* 
˛ock_domaö
, 
time°amp
, 
__ôt_id
 
id
), (
ITT_FORMAT
 domaö, clock_domaö,Åime°amp, id),Åask_íd_ovîœµed_ex, 
__ôt_group_°ru˘uª
, "%p, %p, %lu, %lu")

299 
ITT_STUBV
(
ITTAPI
, , 
m¨kî_ex
, (c⁄° 
__ôt_domaö
 *
domaö
, 
__ôt_˛ock_domaö
* 
˛ock_domaö
, 
time°amp
, 
__ôt_id
 
id
, 
__ôt_°rög_h™dÀ
 *
«me
, 
__ôt_sc›e
 
sc›e
), (
ITT_FORMAT
 domaö, clock_domaö,Åime°amp, id,Çame, sc›e), m¨kî_ex, 
__ôt_group_°ru˘uª
, "%p, %p, %lu, %lu, %p, %d")

300 
ITT_STUBV
(
ITTAPI
, , 
mëad©a_add_wôh_sc›e
, (c⁄° 
__ôt_domaö
 *
domaö
, 
__ôt_sc›e
 
sc›e
, 
__ôt_°rög_h™dÀ
 *
key
, 
__ôt_mëad©a_ty≥
 
ty≥
, 
size_t
 
cou¡
, *
d©a
), (
ITT_FORMAT
 domaö, sc›e, key,Åy≥, cou¡, d©a), mëad©a_add_wôh_sc›e, 
__ôt_group_°ru˘uª
, "%p, %d, %p, %d, %lu, %p")

301 #i‡
ITT_PLATFORM
==
ITT_PLATFORM_WIN


302 
ITT_STUBV
(
ITTAPI
, , 
mëad©a_°r_add_wôh_sc›eA
, (c⁄° 
__ôt_domaö
 *
domaö
, 
__ôt_sc›e
 
sc›e
, 
__ôt_°rög_h™dÀ
 *
key
, c⁄° *
d©a
, 
size_t
 
Àngth
), (
ITT_FORMAT
 domaö, sc›e, key, d©a,Üígth), mëad©a_°r_add_wôh_sc›eA, 
__ôt_group_°ru˘uª
, "%p, %d, %p, %p, %lu")

303 
ITT_STUBV
(
ITTAPI
, , 
mëad©a_°r_add_wôh_sc›eW
, (c⁄° 
__ôt_domaö
 *
domaö
, 
__ôt_sc›e
 
sc›e
, 
__ôt_°rög_h™dÀ
 *
key
, c⁄° 
wch¨_t
 *
d©a
, 
size_t
 
Àngth
), (
ITT_FORMAT
 domaö, sc›e, key, d©a,Üígth), mëad©a_°r_add_wôh_sc›eW, 
__ôt_group_°ru˘uª
, "%p, %d, %p, %p, %lu")

305 
ITT_STUBV
(
ITTAPI
, , 
mëad©a_°r_add_wôh_sc›e
, (c⁄° 
__ôt_domaö
 *
domaö
, 
__ôt_sc›e
 
sc›e
, 
__ôt_°rög_h™dÀ
 *
key
, c⁄° *
d©a
, 
size_t
 
Àngth
), (
ITT_FORMAT
 domaö, sc›e, key, d©a,Üígth), mëad©a_°r_add_wôh_sc›e, 
__ôt_group_°ru˘uª
, "%p, %d, %p, %p, %lu")

307 
ITT_STUBV
(
ITTAPI
, , 
ªœti⁄_add_to_cuºít_ex
, (c⁄° 
__ôt_domaö
 *
domaö
, 
__ôt_˛ock_domaö
* 
˛ock_domaö
, 
time°amp
, 
__ôt_ªœti⁄
 
ªœti⁄
, 
__ôt_id
 
èû
), (
ITT_FORMAT
 domaö, clock_domaö,Åime°amp,Ññ©i⁄,Åaû),Ññ©i⁄_add_to_cuºít_ex, 
__ôt_group_°ru˘uª
, "%p, %p, %lu, %d, %lu")

308 
ITT_STUBV
(
ITTAPI
, , 
ªœti⁄_add_ex
, (c⁄° 
__ôt_domaö
 *
domaö
, 
__ôt_˛ock_domaö
* 
˛ock_domaö
, 
time°amp
, 
__ôt_id
 
hód
, 
__ôt_ªœti⁄
 
ªœti⁄
, __ôt_id 
èû
), (
ITT_FORMAT
 domaö, clock_domaö,Åime°amp, hód,Ññ©i⁄,Åaû),Ññ©i⁄_add_ex, 
__ôt_group_°ru˘uª
, "%p, %p, %lu, %lu, %d, %lu")

309 
ITT_STUB
(
ITTAPI
, 
__ôt_åack_group
*, 
åack_group_¸óã
, (
__ôt_°rög_h™dÀ
* 
«me
, 
__ôt_åack_group_ty≥
 
åack_group_ty≥
), (
ITT_FORMAT
Çame,Åøck_group_ty≥),Åøck_group_¸óã, 
__ôt_group_°ru˘uª
, "%p, %d")

310 
ITT_STUB
(
ITTAPI
, 
__ôt_åack
*, 
åack_¸óã
, (
__ôt_åack_group
* 
åack_group
,
__ôt_°rög_h™dÀ
* 
«me
, 
__ôt_åack_ty≥
 
åack_ty≥
), (
ITT_FORMAT
Åøck_group,Çame,Åøck_ty≥),Åøck_¸óã, 
__ôt_group_°ru˘uª
, "%p, %p, %d")

311 
ITT_STUBV
(
ITTAPI
, , 
£t_åack
, (
__ôt_åack
 *
åack
), (
ITT_FORMAT
Åøck), së_åack, 
__ôt_group_°ru˘uª
, "%p")

313 #i‚de‡
__ITT_INTERNAL_BODY


314 
ITT_STUB
(
ITTAPI
, c⁄° *, 
≠i_vîsi⁄
, (), (
ITT_NO_PARAMS
),ápi_vîsi⁄, 
__ôt_group_Æl
 & ~
__ôt_group_Àgacy
, "noárgs")

317 #i‚de‡
__ITT_INTERNAL_BODY


318 #i‡
ITT_PLATFORM
==
ITT_PLATFORM_WIN


319 
ITT_STUB
(
ITTAPI
, , 
av_ßveA
, (*
d©a
, 
ønk
, c⁄° *
dimísi⁄s
, 
ty≥
, c⁄° *
fûeP©h
, 
cﬁumnOrdî
), (
ITT_FORMAT
 d©a,Ñ™k, dimísi⁄s,Åy≥, fûeP©h, cﬁumnOrdî),áv_ßveA, 
__ôt_group_¨øys
, "%p, %d, %p, %d, \"%s\", %d")

320 
ITT_STUB
(
ITTAPI
, , 
av_ßveW
, (*
d©a
, 
ønk
, c⁄° *
dimísi⁄s
, 
ty≥
, c⁄° 
wch¨_t
 *
fûeP©h
, 
cﬁumnOrdî
), (
ITT_FORMAT
 d©a,Ñ™k, dimísi⁄s,Åy≥, fûeP©h, cﬁumnOrdî),áv_ßveW, 
__ôt_group_¨øys
, "%p, %d, %p, %d, \"%S\", %d")

322 
ITT_STUB
(
ITTAPI
, , 
av_ßve
, (*
d©a
, 
ønk
, c⁄° *
dimísi⁄s
, 
ty≥
, c⁄° *
fûeP©h
, 
cﬁumnOrdî
), (
ITT_FORMAT
 d©a,Ñ™k, dimísi⁄s,Åy≥, fûeP©h, cﬁumnOrdî),áv_ßve, 
__ôt_group_¨øys
, "%p, %d, %p, %d, \"%s\", %d")

	@viper/concurrentqueue-src/benchmarks/tbb/tools_api/ittnotify_types.h

21 #i‚de‡
_ITTNOTIFY_TYPES_H_


22 
	#_ITTNOTIFY_TYPES_H_


	)

24 
	e___ôt_group_id


26 
	m__ôt_group_n⁄e
 = 0,

27 
	m__ôt_group_Àgacy
 = 1<<0,

28 
	m__ôt_group_c⁄åﬁ
 = 1<<1,

29 
	m__ôt_group_thªad
 = 1<<2,

30 
	m__ôt_group_m¨k
 = 1<<3,

31 
	m__ôt_group_sync
 = 1<<4,

32 
	m__ôt_group_fsync
 = 1<<5,

33 
	m__ôt_group_jô
 = 1<<6,

34 
	m__ôt_group_modñ
 = 1<<7,

35 
	m__ôt_group_•lôãr_mö
 = 1<<7,

36 
	m__ôt_group_cou¡î
 = 1<<8,

37 
	m__ôt_group_‰ame
 = 1<<9,

38 
	m__ôt_group_°ôch
 = 1<<10,

39 
	m__ôt_group_hóp
 = 1<<11,

40 
	m__ôt_group_•lôãr_max
 = 1<<12,

41 
	m__ôt_group_°ru˘uª
 = 1<<12,

42 
	m__ôt_group_suµªss
 = 1<<13,

43 
	m__ôt_group_¨øys
 = 1<<14,

44 
	m__ôt_group_Æl
 = -1

45 } 
	t__ôt_group_id
;

47 #¥agm®
∑ck
(
push
, 8)

49 
	s___ôt_group_li°


51 
__ôt_group_id
 
	mid
;

52 c⁄° * 
	m«me
;

53 } 
	t__ôt_group_li°
;

55 #¥agm®
∑ck
(
p›
)

57 
	#ITT_GROUP_LIST
(
v¨«me
) \

58 
__ôt_group_li°
 
v¨«me
[] = { \

59 { 
__ôt_group_Æl
, "all" }, \

60 { 
__ôt_group_c⁄åﬁ
, "control" }, \

61 { 
__ôt_group_thªad
, "thread" }, \

62 { 
__ôt_group_m¨k
, "mark" }, \

63 { 
__ôt_group_sync
, "sync" }, \

64 { 
__ôt_group_fsync
, "fsync" }, \

65 { 
__ôt_group_jô
, "jit" }, \

66 { 
__ôt_group_modñ
, "model" }, \

67 { 
__ôt_group_cou¡î
, "counter" }, \

68 { 
__ôt_group_‰ame
, "frame" }, \

69 { 
__ôt_group_°ôch
, "stitch" }, \

70 { 
__ôt_group_hóp
, "heap" }, \

71 { 
__ôt_group_°ru˘uª
, "structure" }, \

72 { 
__ôt_group_suµªss
, "suppress" }, \

73 { 
__ôt_group_¨øys
, "arrays" }, \

74 { 
__ôt_group_n⁄e
, 
NULL
 } \

75 }

	)

	@viper/concurrentqueue-src/benchmarks/tbb/tools_api/legacy/ittnotify.h

21 #i‚de‡
_LEGACY_ITTNOTIFY_H_


22 
	#_LEGACY_ITTNOTIFY_H_


	)

30 #i‚de‡
ITT_OS_WIN


31 
	#ITT_OS_WIN
 1

	)

34 #i‚de‡
ITT_OS_LINUX


35 
	#ITT_OS_LINUX
 2

	)

38 #i‚de‡
ITT_OS_MAC


39 
	#ITT_OS_MAC
 3

	)

42 #i‚de‡
ITT_OS


43 #i‡
deföed
 
WIN32
 || deföed 
_WIN32


44 
	#ITT_OS
 
ITT_OS_WIN


	)

45 #ñi‡
deföed
–
__APPLE__
 ) && deföed–
__MACH__
 )

46 
	#ITT_OS
 
ITT_OS_MAC


	)

48 
	#ITT_OS
 
ITT_OS_LINUX


	)

52 #i‚de‡
ITT_PLATFORM_WIN


53 
	#ITT_PLATFORM_WIN
 1

	)

56 #i‚de‡
ITT_PLATFORM_POSIX


57 
	#ITT_PLATFORM_POSIX
 2

	)

60 #i‚de‡
ITT_PLATFORM_MAC


61 
	#ITT_PLATFORM_MAC
 3

	)

64 #i‚de‡
ITT_PLATFORM


65 #i‡
ITT_OS
==
ITT_OS_WIN


66 
	#ITT_PLATFORM
 
ITT_PLATFORM_WIN


	)

67 #ñi‡
ITT_OS
==
ITT_OS_MAC


68 
	#ITT_PLATFORM
 
ITT_PLATFORM_MAC


	)

70 
	#ITT_PLATFORM
 
ITT_PLATFORM_POSIX


	)

74 #i‡
deföed
(
_UNICODE
Ë&& !deföed(
UNICODE
)

75 
	#UNICODE


	)

78 
	~<°ddef.h
>

79 #i‡
ITT_PLATFORM
==
ITT_PLATFORM_WIN


80 
	~<tch¨.h
>

82 
	~<°döt.h
>

83 #i‡
deföed
(
UNICODE
Ë|| deföed(
_UNICODE
)

84 
	~<wch¨.h
>

88 #i‚de‡
CDECL


89 #i‡
ITT_PLATFORM
==
ITT_PLATFORM_WIN


90 
	#CDECL
 
__cde˛


	)

92 #i‡
deföed
 
_M_IX86
 || deföed 
__i386__


93 
	#CDECL
 
	`__©åibuã__
 ((
cde˛
))

	)

95 
	#CDECL


	)

100 #i‚de‡
STDCALL


101 #i‡
ITT_PLATFORM
==
ITT_PLATFORM_WIN


102 
	#STDCALL
 
__°dˇŒ


	)

104 #i‡
deföed
 
_M_IX86
 || deföed 
__i386__


105 
	#STDCALL
 
	`__©åibuã__
 ((
°dˇŒ
))

	)

107 
	#STDCALL


	)

112 
	#ITTAPI
 
CDECL


	)

113 
	#LIBITTAPI
 
CDECL


	)

116 
	#ITTAPI_CALL
 
CDECL


	)

117 
	#LIBITTAPI_CALL
 
CDECL


	)

119 #i‡
ITT_PLATFORM
==
ITT_PLATFORM_WIN


121 
	#ITT_INLINE
 
__f‹˚ölöe


	)

122 
	#ITT_INLINE_ATTRIBUTE


	)

129 #ifde‡
__STRICT_ANSI__


130 
	#ITT_INLINE
 
ölöe


	)

132 
	#ITT_INLINE
 
ölöe


	)

134 
	#ITT_INLINE_ATTRIBUTE
 
	`__©åibuã__
 ((
Æways_ölöe
, 
unu£d
))

	)

140 
	#ITT_JOIN_AUX
(
p
,
n
Ëp##
	)
n

141 
	#ITT_JOIN
(
p
,
n
Ë
	`ITT_JOIN_AUX
’,n)

	)

143 #ifde‡
ITT_MAJOR


144 #unde‡
ITT_MAJOR


146 #ifde‡
ITT_MINOR


147 #unde‡
ITT_MINOR


149 
	#ITT_MAJOR
 3

	)

150 
	#ITT_MINOR
 0

	)

153 
	#ITT_VERSIONIZE
(
x
) \

154 
	`ITT_JOIN
(
x
, \

155 
	`ITT_JOIN
(
_
, \

156 
	`ITT_JOIN
(
ITT_MAJOR
, \

157 
	`ITT_JOIN
(
_
, 
ITT_MINOR
))))

	)

159 #i‚de‡
INTEL_ITTNOTIFY_PREFIX


160 
	#INTEL_ITTNOTIFY_PREFIX
 
__ôt_


	)

162 #i‚de‡
INTEL_ITTNOTIFY_POSTFIX


163 
	#INTEL_ITTNOTIFY_POSTFIX
 
_±r_


	)

166 
	#ITTNOTIFY_NAME_AUX
(
n
Ë
	`ITT_JOIN
(
INTEL_ITTNOTIFY_PREFIX
,n)

	)

167 
	#ITTNOTIFY_NAME
(
n
Ë
	`ITT_VERSIONIZE
(
	`ITTNOTIFY_NAME_AUX
(
	`ITT_JOIN
“,
INTEL_ITTNOTIFY_POSTFIX
)))

	)

169 
	#ITTNOTIFY_VOID
(
n
Ë(!
	`ITTNOTIFY_NAME
“)Ë? ()0 : ITTNOTIFY_NAME“)

	)

170 
	#ITTNOTIFY_DATA
(
n
Ë(!
	`ITTNOTIFY_NAME
“)Ë? 0 : ITTNOTIFY_NAME“)

	)

172 
	#ITTNOTIFY_VOID_D0
(
n
,
d
Ë(!(d)->
Êags
Ë? ()0 : (!
	`ITTNOTIFY_NAME
“)Ë? ()0 : ITTNOTIFY_NAME“)(d)

	)

173 
	#ITTNOTIFY_VOID_D1
(
n
,
d
,
x
Ë(!(d)->
Êags
Ë? ()0 : (!
	`ITTNOTIFY_NAME
“)Ë? ()0 : ITTNOTIFY_NAME“)(d,x)

	)

174 
	#ITTNOTIFY_VOID_D2
(
n
,
d
,
x
,
y
Ë(!(d)->
Êags
Ë? ()0 : (!
	`ITTNOTIFY_NAME
“)Ë? ()0 : ITTNOTIFY_NAME“)(d,x,y)

	)

175 
	#ITTNOTIFY_VOID_D3
(
n
,
d
,
x
,
y
,
z
Ë(!(d)->
Êags
Ë? ()0 : (!
	`ITTNOTIFY_NAME
“)Ë? ()0 : ITTNOTIFY_NAME“)(d,x,y,z)

	)

176 
	#ITTNOTIFY_VOID_D4
(
n
,
d
,
x
,
y
,
z
,
a
Ë(!(d)->
Êags
Ë? ()0 : (!
	`ITTNOTIFY_NAME
“)Ë? ()0 : ITTNOTIFY_NAME“)(d,x,y,z,a)

	)

177 
	#ITTNOTIFY_VOID_D5
(
n
,
d
,
x
,
y
,
z
,
a
,
b
Ë(!(d)->
Êags
Ë? ()0 : (!
	`ITTNOTIFY_NAME
“)Ë? ()0 : ITTNOTIFY_NAME“)(d,x,y,z,a,b)

	)

178 
	#ITTNOTIFY_VOID_D6
(
n
,
d
,
x
,
y
,
z
,
a
,
b
,
c
Ë(!(d)->
Êags
Ë? ()0 : (!
	`ITTNOTIFY_NAME
“)Ë? ()0 : ITTNOTIFY_NAME“)(d,x,y,z,a,b,c)

	)

179 
	#ITTNOTIFY_DATA_D0
(
n
,
d
Ë(!(d)->
Êags
Ë? 0 : (!
	`ITTNOTIFY_NAME
“)Ë? 0 : ITTNOTIFY_NAME“)(d)

	)

180 
	#ITTNOTIFY_DATA_D1
(
n
,
d
,
x
Ë(!(d)->
Êags
Ë? 0 : (!
	`ITTNOTIFY_NAME
“)Ë? 0 : ITTNOTIFY_NAME“)(d,x)

	)

181 
	#ITTNOTIFY_DATA_D2
(
n
,
d
,
x
,
y
Ë(!(d)->
Êags
Ë? 0 : (!
	`ITTNOTIFY_NAME
“)Ë? 0 : ITTNOTIFY_NAME“)(d,x,y)

	)

182 
	#ITTNOTIFY_DATA_D3
(
n
,
d
,
x
,
y
,
z
Ë(!(d)->
Êags
Ë? 0 : (!
	`ITTNOTIFY_NAME
“)Ë? 0 : ITTNOTIFY_NAME“)(d,x,y,z)

	)

183 
	#ITTNOTIFY_DATA_D4
(
n
,
d
,
x
,
y
,
z
,
a
Ë(!(d)->
Êags
Ë? 0 : (!
	`ITTNOTIFY_NAME
“)Ë? 0 : ITTNOTIFY_NAME“)(d,x,y,z,a)

	)

184 
	#ITTNOTIFY_DATA_D5
(
n
,
d
,
x
,
y
,
z
,
a
,
b
Ë(!(d)->
Êags
Ë? 0 : (!
	`ITTNOTIFY_NAME
“)Ë? 0 : ITTNOTIFY_NAME“)(d,x,y,z,a,b)

	)

185 
	#ITTNOTIFY_DATA_D6
(
n
,
d
,
x
,
y
,
z
,
a
,
b
,
c
Ë(!(d)->
Êags
Ë? 0 : (!
	`ITTNOTIFY_NAME
“)Ë? 0 : ITTNOTIFY_NAME“)(d,x,y,z,a,b,c)

	)

187 #ifde‡
ITT_STUB


188 #unde‡
ITT_STUB


190 #ifde‡
ITT_STUBV


191 #unde‡
ITT_STUBV


193 
	#ITT_STUBV
(
≠i
,
ty≥
,
«me
,
¨gs
) \

194 
	`ty≥
 (
	t≠i
* 
	tITT_JOIN
(
	tITTNOTIFY_NAME
(
	t«me
),
	t_t
)Ë
	t¨gs
; \

195 
	`ITT_JOIN
(
	`ITTNOTIFY_NAME
(
«me
),
_t
ËITTNOTIFY_NAME“ame);

	)

196 
	#ITT_STUB
 
ITT_STUBV


	)

199 #ifde‡
__˝lu•lus


230 #i‚de‡
_ITTNOTIFY_H_


232 
ITTAPI
 
__ôt_∑u£
();

234 
ITTAPI
 
__ôt_ªsume
();

237 #i‚de‡
INTEL_NO_MACRO_BODY


238 #i‚de‡
INTEL_NO_ITTNOTIFY_API


239 
ITT_STUBV
(
ITTAPI
, , 
∑u£
, ())

240 
ITT_STUBV
(
ITTAPI
, , 
ªsume
, ())

241 
	#__ôt_∑u£
 
	`ITTNOTIFY_VOID
(
∑u£
)

	)

242 
	#__ôt_∑u£_±r
 
	`ITTNOTIFY_NAME
(
∑u£
)

	)

243 
	#__ôt_ªsume
 
	`ITTNOTIFY_VOID
(
ªsume
)

	)

244 
	#__ôt_ªsume_±r
 
	`ITTNOTIFY_NAME
(
ªsume
)

	)

246 
	#__ôt_∑u£
()

	)

247 
	#__ôt_∑u£_±r
 0

	)

248 
	#__ôt_ªsume
()

	)

249 
	#__ôt_ªsume_±r
 0

	)

252 
	#__ôt_∑u£_±r
 0

	)

253 
	#__ôt_ªsume_±r
 0

	)

271 #i‡
ITT_PLATFORM
==
ITT_PLATFORM_WIN


272 
LIBITTAPI
 
__ôt_thr_«me_£tA
(c⁄° *
«me
, 
«mñí
);

273 
LIBITTAPI
 
__ôt_thr_«me_£tW
(c⁄° 
wch¨_t
 *
«me
, 
«mñí
);

274 #i‡
deföed
(
UNICODE
Ë|| deföed(
_UNICODE
)

275 
	#__ôt_thr_«me_£t
 
__ôt_thr_«me_£tW


	)

276 
	#__ôt_thr_«me_£t_±r
 
__ôt_thr_«me_£tW_±r


	)

278 
	#__ôt_thr_«me_£t
 
__ôt_thr_«me_£tA


	)

279 
	#__ôt_thr_«me_£t_±r
 
__ôt_thr_«me_£tA_±r


	)

282 
LIBITTAPI
 
__ôt_thr_«me_£t
(c⁄° *
«me
, 
«mñí
);

286 #i‚de‡
INTEL_NO_MACRO_BODY


287 #i‚de‡
INTEL_NO_ITTNOTIFY_API


288 #i‡
ITT_PLATFORM
==
ITT_PLATFORM_WIN


289 
ITT_STUB
(
LIBITTAPI
, , 
thr_«me_£tA
, (c⁄° *
«me
, 
«mñí
))

290 
ITT_STUB
(
LIBITTAPI
, , 
thr_«me_£tW
, (c⁄° 
wch¨_t
 *
«me
, 
«mñí
))

292 
ITT_STUB
(
LIBITTAPI
, , 
thr_«me_£t
, (c⁄° *
«me
, 
«mñí
))

294 #i‡
ITT_PLATFORM
==
ITT_PLATFORM_WIN


295 
	#__ôt_thr_«me_£tA
 
	`ITTNOTIFY_DATA
(
thr_«me_£tA
)

	)

296 
	#__ôt_thr_«me_£tA_±r
 
	`ITTNOTIFY_NAME
(
thr_«me_£tA
)

	)

297 
	#__ôt_thr_«me_£tW
 
	`ITTNOTIFY_DATA
(
thr_«me_£tW
)

	)

298 
	#__ôt_thr_«me_£tW_±r
 
	`ITTNOTIFY_NAME
(
thr_«me_£tW
)

	)

300 
	#__ôt_thr_«me_£t
 
	`ITTNOTIFY_DATA
(
thr_«me_£t
)

	)

301 
	#__ôt_thr_«me_£t_±r
 
	`ITTNOTIFY_NAME
(
thr_«me_£t
)

	)

304 #i‡
ITT_PLATFORM
==
ITT_PLATFORM_WIN


305 
	#__ôt_thr_«me_£tA
(
«me
, 
«mñí
)

	)

306 
	#__ôt_thr_«me_£tA_±r
 0

	)

307 
	#__ôt_thr_«me_£tW
(
«me
, 
«mñí
)

	)

308 
	#__ôt_thr_«me_£tW_±r
 0

	)

310 
	#__ôt_thr_«me_£t
(
«me
, 
«mñí
)

	)

311 
	#__ôt_thr_«me_£t_±r
 0

	)

315 #i‡
ITT_PLATFORM
==
ITT_PLATFORM_WIN


316 
	#__ôt_thr_«me_£tA_±r
 0

	)

317 
	#__ôt_thr_«me_£tW_±r
 0

	)

319 
	#__ôt_thr_«me_£t_±r
 0

	)

328 
LIBITTAPI
 
__ôt_thr_ign‹e
();

331 #i‚de‡
INTEL_NO_MACRO_BODY


332 #i‚de‡
INTEL_NO_ITTNOTIFY_API


333 
ITT_STUBV
(
LIBITTAPI
, , 
thr_ign‹e
, ())

334 
	#__ôt_thr_ign‹e
 
	`ITTNOTIFY_VOID
(
thr_ign‹e
)

	)

335 
	#__ôt_thr_ign‹e_±r
 
	`ITTNOTIFY_NAME
(
thr_ign‹e
)

	)

337 
	#__ôt_thr_ign‹e
()

	)

338 
	#__ôt_thr_ign‹e_±r
 0

	)

341 
	#__ôt_thr_ign‹e_±r
 0

	)

357 
	#__ôt_©å_b¨rõr
 1

	)

363 
	#__ôt_©å_muãx
 2

	)

378 #i‡
ITT_PLATFORM
==
ITT_PLATFORM_WIN


379 
ITTAPI
 
__ôt_sync_£t_«meA
(*
addr
, c⁄° *
objty≥
, c⁄° *
obj«me
, 
©åibuã
);

380 
ITTAPI
 
__ôt_sync_£t_«meW
(*
addr
, c⁄° 
wch¨_t
 *
objty≥
, c⁄° wch¨_à*
obj«me
, 
©åibuã
);

381 #i‡
deföed
(
UNICODE
Ë|| deföed(
_UNICODE
)

382 
	#__ôt_sync_£t_«me
 
__ôt_sync_£t_«meW


	)

383 
	#__ôt_sync_£t_«me_±r
 
__ôt_sync_£t_«meW_±r


	)

385 
	#__ôt_sync_£t_«me
 
__ôt_sync_£t_«meA


	)

386 
	#__ôt_sync_£t_«me_±r
 
__ôt_sync_£t_«meA_±r


	)

389 
ITTAPI
 
__ôt_sync_£t_«me
(*
addr
, c⁄° * 
objty≥
, c⁄° * 
obj«me
, 
©åibuã
);

393 #i‚de‡
INTEL_NO_MACRO_BODY


394 #i‚de‡
INTEL_NO_ITTNOTIFY_API


395 #i‡
ITT_PLATFORM
==
ITT_PLATFORM_WIN


396 
ITT_STUBV
(
ITTAPI
, , 
sync_£t_«meA
, (*
addr
, c⁄° *
objty≥
, c⁄° *
obj«me
, 
©åibuã
))

397 
ITT_STUBV
(
ITTAPI
, , 
sync_£t_«meW
, (*
addr
, c⁄° 
wch¨_t
 *
objty≥
, c⁄° wch¨_à*
obj«me
, 
©åibuã
))

399 
ITT_STUBV
(
ITTAPI
, , 
sync_£t_«me
, (*
addr
, c⁄° *
objty≥
, c⁄° *
obj«me
, 
©åibuã
))

401 #i‡
ITT_PLATFORM
==
ITT_PLATFORM_WIN


402 
	#__ôt_sync_£t_«meA
 
	`ITTNOTIFY_VOID
(
sync_£t_«meA
)

	)

403 
	#__ôt_sync_£t_«meA_±r
 
	`ITTNOTIFY_NAME
(
sync_£t_«meA
)

	)

404 
	#__ôt_sync_£t_«meW
 
	`ITTNOTIFY_VOID
(
sync_£t_«meW
)

	)

405 
	#__ôt_sync_£t_«meW_±r
 
	`ITTNOTIFY_NAME
(
sync_£t_«meW
)

	)

407 
	#__ôt_sync_£t_«me
 
	`ITTNOTIFY_VOID
(
sync_£t_«me
)

	)

408 
	#__ôt_sync_£t_«me_±r
 
	`ITTNOTIFY_NAME
(
sync_£t_«me
)

	)

411 #i‡
ITT_PLATFORM
==
ITT_PLATFORM_WIN


412 
	#__ôt_sync_£t_«meA
(
addr
, 
objty≥
, 
obj«me
, 
©åibuã
)

	)

413 
	#__ôt_sync_£t_«meA_±r
 0

	)

414 
	#__ôt_sync_£t_«meW
(
addr
, 
objty≥
, 
obj«me
, 
©åibuã
)

	)

415 
	#__ôt_sync_£t_«meW_±r
 0

	)

417 
	#__ôt_sync_£t_«me
(
addr
, 
objty≥
, 
obj«me
, 
©åibuã
)

	)

418 
	#__ôt_sync_£t_«me_±r
 0

	)

422 #i‡
ITT_PLATFORM
==
ITT_PLATFORM_WIN


423 
	#__ôt_sync_£t_«meA_±r
 0

	)

424 
	#__ôt_sync_£t_«meW_±r
 0

	)

426 
	#__ôt_sync_£t_«me_±r
 0

	)

446 #i‡
ITT_PLATFORM
==
ITT_PLATFORM_WIN


447 
LIBITTAPI
 
__ôt_nŸify_sync_«meA
(*
addr
, c⁄° *
objty≥
, 
ty≥Àn
, c⁄° *
obj«me
, 
«mñí
, 
©åibuã
);

448 
LIBITTAPI
 
__ôt_nŸify_sync_«meW
(*
addr
, c⁄° 
wch¨_t
 *
objty≥
, 
ty≥Àn
, c⁄° wch¨_à*
obj«me
, 
«mñí
, 
©åibuã
);

449 #i‡
deföed
(
UNICODE
Ë|| deföed(
_UNICODE
)

450 
	#__ôt_nŸify_sync_«me
 
__ôt_nŸify_sync_«meW


	)

452 
	#__ôt_nŸify_sync_«me
 
__ôt_nŸify_sync_«meA


	)

455 
LIBITTAPI
 
__ôt_nŸify_sync_«me
(*
addr
, c⁄° *
objty≥
, 
ty≥Àn
, c⁄° *
obj«me
, 
«mñí
, 
©åibuã
);

459 #i‚de‡
INTEL_NO_MACRO_BODY


460 #i‚de‡
INTEL_NO_ITTNOTIFY_API


461 #i‡
ITT_PLATFORM
==
ITT_PLATFORM_WIN


462 
ITT_STUB
(
LIBITTAPI
, , 
nŸify_sync_«meA
, (*
addr
, c⁄° *
objty≥
, 
ty≥Àn
, c⁄° *
obj«me
, 
«mñí
, 
©åibuã
))

463 
ITT_STUB
(
LIBITTAPI
, , 
nŸify_sync_«meW
, (*
addr
, c⁄° 
wch¨_t
 *
objty≥
, 
ty≥Àn
, c⁄° wch¨_à*
obj«me
, 
«mñí
, 
©åibuã
))

465 
ITT_STUB
(
LIBITTAPI
, , 
nŸify_sync_«me
, (*
addr
, c⁄° *
objty≥
, 
ty≥Àn
, c⁄° *
obj«me
, 
«mñí
, 
©åibuã
))

467 #i‡
ITT_PLATFORM
==
ITT_PLATFORM_WIN


468 
	#__ôt_nŸify_sync_«meA
 
	`ITTNOTIFY_DATA
(
nŸify_sync_«meA
)

	)

469 
	#__ôt_nŸify_sync_«meA_±r
 
	`ITTNOTIFY_NAME
(
nŸify_sync_«meA
)

	)

470 
	#__ôt_nŸify_sync_«meW
 
	`ITTNOTIFY_DATA
(
nŸify_sync_«meW
)

	)

471 
	#__ôt_nŸify_sync_«meW_±r
 
	`ITTNOTIFY_NAME
(
nŸify_sync_«meW
)

	)

473 
	#__ôt_nŸify_sync_«me
 
	`ITTNOTIFY_DATA
(
nŸify_sync_«me
)

	)

474 
	#__ôt_nŸify_sync_«me_±r
 
	`ITTNOTIFY_NAME
(
nŸify_sync_«me
)

	)

477 #i‡
ITT_PLATFORM
==
ITT_PLATFORM_WIN


478 
	#__ôt_nŸify_sync_«meA
(
addr
, 
objty≥
, 
ty≥Àn
, 
obj«me
, 
«mñí
, 
©åibuã
)

	)

479 
	#__ôt_nŸify_sync_«meA_±r
 0

	)

480 
	#__ôt_nŸify_sync_«meW
(
addr
, 
objty≥
, 
ty≥Àn
, 
obj«me
, 
«mñí
, 
©åibuã
)

	)

481 
	#__ôt_nŸify_sync_«meW_±r
 0

	)

483 
	#__ôt_nŸify_sync_«me
(
addr
, 
objty≥
, 
ty≥Àn
, 
obj«me
, 
«mñí
, 
©åibuã
)

	)

484 
	#__ôt_nŸify_sync_«me_±r
 0

	)

488 #i‡
ITT_PLATFORM
==
ITT_PLATFORM_WIN


489 
	#__ôt_nŸify_sync_«meA_±r
 0

	)

490 
	#__ôt_nŸify_sync_«meW_±r
 0

	)

492 
	#__ôt_nŸify_sync_«me_±r
 0

	)

501 
LIBITTAPI
 
__ôt_nŸify_sync_¥ï¨e
(* 
addr
);

504 #i‚de‡
INTEL_NO_MACRO_BODY


505 #i‚de‡
INTEL_NO_ITTNOTIFY_API


506 
ITT_STUBV
(
LIBITTAPI
, , 
nŸify_sync_¥ï¨e
, (*
addr
))

507 
	#__ôt_nŸify_sync_¥ï¨e
 
	`ITTNOTIFY_VOID
(
nŸify_sync_¥ï¨e
)

	)

508 
	#__ôt_nŸify_sync_¥ï¨e_±r
 
	`ITTNOTIFY_NAME
(
nŸify_sync_¥ï¨e
)

	)

510 
	#__ôt_nŸify_sync_¥ï¨e
(
addr
)

	)

511 
	#__ôt_nŸify_sync_¥ï¨e_±r
 0

	)

514 
	#__ôt_nŸify_sync_¥ï¨e_±r
 0

	)

522 
LIBITTAPI
 
__ôt_nŸify_sync_ˇn˚l
(*
addr
);

525 #i‚de‡
INTEL_NO_MACRO_BODY


526 #i‚de‡
INTEL_NO_ITTNOTIFY_API


527 
ITT_STUBV
(
LIBITTAPI
, , 
nŸify_sync_ˇn˚l
, (*
addr
))

528 
	#__ôt_nŸify_sync_ˇn˚l
 
	`ITTNOTIFY_VOID
(
nŸify_sync_ˇn˚l
)

	)

529 
	#__ôt_nŸify_sync_ˇn˚l_±r
 
	`ITTNOTIFY_NAME
(
nŸify_sync_ˇn˚l
)

	)

531 
	#__ôt_nŸify_sync_ˇn˚l
(
addr
)

	)

532 
	#__ôt_nŸify_sync_ˇn˚l_±r
 0

	)

535 
	#__ôt_nŸify_sync_ˇn˚l_±r
 0

	)

543 
LIBITTAPI
 
__ôt_nŸify_sync_acquúed
(*
addr
);

546 #i‚de‡
INTEL_NO_MACRO_BODY


547 #i‚de‡
INTEL_NO_ITTNOTIFY_API


548 
ITT_STUBV
(
LIBITTAPI
, , 
nŸify_sync_acquúed
, (*
addr
))

549 
	#__ôt_nŸify_sync_acquúed
 
	`ITTNOTIFY_VOID
(
nŸify_sync_acquúed
)

	)

550 
	#__ôt_nŸify_sync_acquúed_±r
 
	`ITTNOTIFY_NAME
(
nŸify_sync_acquúed
)

	)

552 
	#__ôt_nŸify_sync_acquúed
(
addr
)

	)

553 
	#__ôt_nŸify_sync_acquúed_±r
 0

	)

556 
	#__ôt_nŸify_sync_acquúed_±r
 0

	)

564 
LIBITTAPI
 
__ôt_nŸify_sync_ªÀasög
(* 
addr
);

567 #i‚de‡
INTEL_NO_MACRO_BODY


568 #i‚de‡
INTEL_NO_ITTNOTIFY_API


569 
ITT_STUBV
(
LIBITTAPI
, , 
nŸify_sync_ªÀasög
, (*
addr
))

570 
	#__ôt_nŸify_sync_ªÀasög
 
	`ITTNOTIFY_VOID
(
nŸify_sync_ªÀasög
)

	)

571 
	#__ôt_nŸify_sync_ªÀasög_±r
 
	`ITTNOTIFY_NAME
(
nŸify_sync_ªÀasög
)

	)

573 
	#__ôt_nŸify_sync_ªÀasög
(
addr
)

	)

574 
	#__ôt_nŸify_sync_ªÀasög_±r
 0

	)

577 
	#__ôt_nŸify_sync_ªÀasög_±r
 0

	)

582 #i‚de‡
_ITTNOTIFY_H_


591 
	t__ôt_evít
;

598 #i‡
ITT_PLATFORM
==
ITT_PLATFORM_WIN


599 
__ôt_evít
 
LIBITTAPI
 
__ôt_evít_¸óãA
(c⁄° *
«me
, 
«mñí
);

600 
__ôt_evít
 
LIBITTAPI
 
__ôt_evít_¸óãW
(c⁄° 
wch¨_t
 *
«me
, 
«mñí
);

601 #i‡
deföed
(
UNICODE
Ë|| deföed(
_UNICODE
)

602 
	#__ôt_evít_¸óã
 
__ôt_evít_¸óãW


	)

603 
	#__ôt_evít_¸óã_±r
 
__ôt_evít_¸óãW_±r


	)

605 
	#__ôt_evít_¸óã
 
__ôt_evít_¸óãA


	)

606 
	#__ôt_evít_¸óã_±r
 
__ôt_evít_¸óãA_±r


	)

609 
__ôt_evít
 
LIBITTAPI
 
__ôt_evít_¸óã
(c⁄° *
«me
, 
«mñí
);

613 #i‚de‡
INTEL_NO_MACRO_BODY


614 #i‚de‡
INTEL_NO_ITTNOTIFY_API


615 #i‡
ITT_PLATFORM
==
ITT_PLATFORM_WIN


616 
ITT_STUB
(
LIBITTAPI
, 
__ôt_evít
, 
evít_¸óãA
, (c⁄° *
«me
, 
«mñí
))

617 
ITT_STUB
(
LIBITTAPI
, 
__ôt_evít
, 
evít_¸óãW
, (c⁄° 
wch¨_t
 *
«me
, 
«mñí
))

619 
ITT_STUB
(
LIBITTAPI
, 
__ôt_evít
, 
evít_¸óã
, (c⁄° *
«me
, 
«mñí
))

621 #i‡
ITT_PLATFORM
==
ITT_PLATFORM_WIN


622 
	#__ôt_evít_¸óãA
 
	`ITTNOTIFY_DATA
(
evít_¸óãA
)

	)

623 
	#__ôt_evít_¸óãA_±r
 
	`ITTNOTIFY_NAME
(
evít_¸óãA
)

	)

624 
	#__ôt_evít_¸óãW
 
	`ITTNOTIFY_DATA
(
evít_¸óãW
)

	)

625 
	#__ôt_evít_¸óãW_±r
 
	`ITTNOTIFY_NAME
(
evít_¸óãW
)

	)

627 
	#__ôt_evít_¸óã
 
	`ITTNOTIFY_DATA
(
evít_¸óã
)

	)

628 
	#__ôt_evít_¸óã_±r
 
	`ITTNOTIFY_NAME
(
evít_¸óã
)

	)

631 #i‡
ITT_PLATFORM
==
ITT_PLATFORM_WIN


632 
	#__ôt_evít_¸óãA
(
«me
, 
«mñí
Ë(
__ôt_evít
)0

	)

633 
	#__ôt_evít_¸óãA_±r
 0

	)

634 
	#__ôt_evít_¸óãW
(
«me
, 
«mñí
Ë(
__ôt_evít
)0

	)

635 
	#__ôt_evít_¸óãW_±r
 0

	)

637 
	#__ôt_evít_¸óã
(
«me
, 
«mñí
Ë(
__ôt_evít
)0

	)

638 
	#__ôt_evít_¸óã_±r
 0

	)

642 #i‡
ITT_PLATFORM
==
ITT_PLATFORM_WIN


643 
	#__ôt_evít_¸óãA_±r
 0

	)

644 
	#__ôt_evít_¸óãW_±r
 0

	)

646 
	#__ôt_evít_¸óã_±r
 0

	)

655 
LIBITTAPI
 
__ôt_evít_°¨t
(
__ôt_evít
 
evít
);

658 #i‚de‡
INTEL_NO_MACRO_BODY


659 #i‚de‡
INTEL_NO_ITTNOTIFY_API


660 
ITT_STUB
(
LIBITTAPI
, , 
evít_°¨t
, (
__ôt_evít
 
evít
))

661 
	#__ôt_evít_°¨t
 
	`ITTNOTIFY_DATA
(
evít_°¨t
)

	)

662 
	#__ôt_evít_°¨t_±r
 
	`ITTNOTIFY_NAME
(
evít_°¨t
)

	)

664 
	#__ôt_evít_°¨t
(
evít
Ë()0

	)

665 
	#__ôt_evít_°¨t_±r
 0

	)

668 
	#__ôt_evít_°¨t_±r
 0

	)

677 
LIBITTAPI
 
__ôt_evít_íd
(
__ôt_evít
 
evít
);

680 #i‚de‡
INTEL_NO_MACRO_BODY


681 #i‚de‡
INTEL_NO_ITTNOTIFY_API


682 
ITT_STUB
(
LIBITTAPI
, , 
evít_íd
, (
__ôt_evít
 
evít
))

683 
	#__ôt_evít_íd
 
	`ITTNOTIFY_DATA
(
evít_íd
)

	)

684 
	#__ôt_evít_íd_±r
 
	`ITTNOTIFY_NAME
(
evít_íd
)

	)

686 
	#__ôt_evít_íd
(
evít
Ë()0

	)

687 
	#__ôt_evít_íd_±r
 0

	)

690 
	#__ôt_evít_íd_±r
 0

	)

705 
LIBITTAPI
 
__ôt_mem‹y_ªad
(*
addr
, 
size_t
 
size
);

708 #i‚de‡
INTEL_NO_MACRO_BODY


709 #i‚de‡
INTEL_NO_ITTNOTIFY_API


710 
ITT_STUBV
(
LIBITTAPI
, , 
mem‹y_ªad
, (*
addr
, 
size_t
 
size
))

711 
	#__ôt_mem‹y_ªad
 
	`ITTNOTIFY_VOID
(
mem‹y_ªad
)

	)

712 
	#__ôt_mem‹y_ªad_±r
 
	`ITTNOTIFY_NAME
(
mem‹y_ªad
)

	)

714 
	#__ôt_mem‹y_ªad
(
addr
, 
size
)

	)

715 
	#__ôt_mem‹y_ªad_±r
 0

	)

718 
	#__ôt_mem‹y_ªad_±r
 0

	)

726 
LIBITTAPI
 
__ôt_mem‹y_wrôe
(*
addr
, 
size_t
 
size
);

729 #i‚de‡
INTEL_NO_MACRO_BODY


730 #i‚de‡
INTEL_NO_ITTNOTIFY_API


731 
ITT_STUBV
(
LIBITTAPI
, , 
mem‹y_wrôe
, (*
addr
, 
size_t
 
size
))

732 
	#__ôt_mem‹y_wrôe
 
	`ITTNOTIFY_VOID
(
mem‹y_wrôe
)

	)

733 
	#__ôt_mem‹y_wrôe_±r
 
	`ITTNOTIFY_NAME
(
mem‹y_wrôe
)

	)

735 
	#__ôt_mem‹y_wrôe
(
addr
, 
size
)

	)

736 
	#__ôt_mem‹y_wrôe_±r
 0

	)

739 
	#__ôt_mem‹y_wrôe_±r
 0

	)

747 
LIBITTAPI
 
__ôt_mem‹y_upd©e
(*
addªss
, 
size_t
 
size
);

750 #i‚de‡
INTEL_NO_MACRO_BODY


751 #i‚de‡
INTEL_NO_ITTNOTIFY_API


752 
ITT_STUBV
(
LIBITTAPI
, , 
mem‹y_upd©e
, (*
addr
, 
size_t
 
size
))

753 
	#__ôt_mem‹y_upd©e
 
	`ITTNOTIFY_VOID
(
mem‹y_upd©e
)

	)

754 
	#__ôt_mem‹y_upd©e_±r
 
	`ITTNOTIFY_NAME
(
mem‹y_upd©e
)

	)

756 
	#__ôt_mem‹y_upd©e
(
addr
, 
size
)

	)

757 
	#__ôt_mem‹y_upd©e_±r
 0

	)

760 
	#__ôt_mem‹y_upd©e_±r
 0

	)

771 
	t__ôt_°©e_t
;

774 
	e__ôt_obj_°©e
 {

775 
	g__ôt_obj_°©e_îr
 = 0,

776 
	g__ôt_obj_°©e_˛r
 = 1,

777 
	g__ôt_obj_°©e_£t
 = 2,

778 
	g__ôt_obj_°©e_u£
 = 3

779 } 
	t__ôt_obj_°©e_t
;

781 
	e__ôt_thr_°©e
 {

782 
	g__ôt_thr_°©e_îr
 = 0,

783 
	g__ôt_thr_°©e_˛r
 = 1,

784 
	g__ôt_thr_°©e_£t
 = 2

785 } 
	t__ôt_thr_°©e_t
;

787 
	e__ôt_obj_¥›
 {

788 
	g__ôt_obj_¥›_w©ch
 = 1,

789 
	g__ôt_obj_¥›_ign‹e
 = 2,

790 
	g__ôt_obj_¥›_sh¨abÀ
 = 3

791 } 
	t__ôt_obj_¥›_t
;

793 
	e__ôt_thr_¥›
 {

794 
	g__ôt_thr_¥›_quõt
 = 1

795 } 
	t__ôt_thr_¥›_t
;

802 
__ôt_°©e_t
 
LIBITTAPI
 
__ôt_°©e_gë
();

805 #i‚de‡
INTEL_NO_MACRO_BODY


806 #i‚de‡
INTEL_NO_ITTNOTIFY_API


807 
ITT_STUB
(
ITTAPI
, 
__ôt_°©e_t
, 
°©e_gë
, ())

808 
	#__ôt_°©e_gë
 
	`ITTNOTIFY_DATA
(
°©e_gë
)

	)

809 
	#__ôt_°©e_gë_±r
 
	`ITTNOTIFY_NAME
(
°©e_gë
)

	)

811 
	#__ôt_°©e_gë
(Ë(
__ôt_°©e_t
)0

	)

812 
	#__ôt_°©e_gë_±r
 0

	)

815 
	#__ôt_°©e_gë_±r
 0

	)

823 
__ôt_°©e_t
 
LIBITTAPI
 
__ôt_°©e_£t
(__ôt_°©e_à
s
);

826 #i‚de‡
INTEL_NO_MACRO_BODY


827 #i‚de‡
INTEL_NO_ITTNOTIFY_API


828 
ITT_STUB
(
ITTAPI
, 
__ôt_°©e_t
, 
°©e_£t
, (__ôt_°©e_à
s
))

829 
	#__ôt_°©e_£t
 
	`ITTNOTIFY_DATA
(
°©e_£t
)

	)

830 
	#__ôt_°©e_£t_±r
 
	`ITTNOTIFY_NAME
(
°©e_£t
)

	)

832 
	#__ôt_°©e_£t
(
s
Ë(
__ôt_°©e_t
)0

	)

833 
	#__ôt_°©e_£t_±r
 0

	)

836 
	#__ôt_°©e_£t_±r
 0

	)

844 
__ôt_thr_°©e_t
 
LIBITTAPI
 
__ôt_thr_mode_£t
(
__ôt_thr_¥›_t
 
p
, __ôt_thr_°©e_à
s
);

847 #i‚de‡
INTEL_NO_MACRO_BODY


848 #i‚de‡
INTEL_NO_ITTNOTIFY_API


849 
ITT_STUB
(
ITTAPI
, 
__ôt_thr_°©e_t
, 
thr_mode_£t
, (
__ôt_thr_¥›_t
 
p
, __ôt_thr_°©e_à
s
))

850 
	#__ôt_thr_mode_£t
 
	`ITTNOTIFY_DATA
(
thr_mode_£t
)

	)

851 
	#__ôt_thr_mode_£t_±r
 
	`ITTNOTIFY_NAME
(
thr_mode_£t
)

	)

853 
	#__ôt_thr_mode_£t
(
p
, 
s
Ë(
__ôt_thr_°©e_t
)0

	)

854 
	#__ôt_thr_mode_£t_±r
 0

	)

857 
	#__ôt_thr_mode_£t_±r
 0

	)

865 
__ôt_obj_°©e_t
 
LIBITTAPI
 
__ôt_obj_mode_£t
(
__ôt_obj_¥›_t
 
p
, __ôt_obj_°©e_à
s
);

868 #i‚de‡
INTEL_NO_MACRO_BODY


869 #i‚de‡
INTEL_NO_ITTNOTIFY_API


870 
ITT_STUB
(
ITTAPI
, 
__ôt_obj_°©e_t
, 
obj_mode_£t
, (
__ôt_obj_¥›_t
 
p
, __ôt_obj_°©e_à
s
))

871 
	#__ôt_obj_mode_£t
 
	`ITTNOTIFY_DATA
(
obj_mode_£t
)

	)

872 
	#__ôt_obj_mode_£t_±r
 
	`ITTNOTIFY_NAME
(
obj_mode_£t
)

	)

874 
	#__ôt_obj_mode_£t
(
p
, 
s
Ë(
__ôt_obj_°©e_t
)0

	)

875 
	#__ôt_obj_mode_£t_±r
 0

	)

878 
	#__ôt_obj_mode_£t_±r
 0

	)

892 
__ôt_‰ame_t
 *
	t__ôt_‰ame
;

897 #i‡
ITT_PLATFORM
==
ITT_PLATFORM_WIN


898 
__ôt_‰ame
 
ITTAPI
 
__ôt_‰ame_¸óãA
(c⁄° *
domaö
);

899 
__ôt_‰ame
 
ITTAPI
 
__ôt_‰ame_¸óãW
(c⁄° 
wch¨_t
 *
domaö
);

900 #i‡
deföed
(
UNICODE
Ë|| deföed(
_UNICODE
)

901 
	#__ôt_‰ame_¸óã
 
__ôt_‰ame_¸óãW


	)

902 
	#__ôt_‰ame_¸óã_±r
 
__ôt_‰ame_¸óãW_±r


	)

904 
	#__ôt_‰ame_¸óã
 
__ôt_‰ame_¸óãA


	)

905 
	#__ôt_‰ame_¸óã_±r
 
__ôt_‰ame_¸óãA_±r


	)

908 
__ôt_‰ame
 
ITTAPI
 
__ôt_‰ame_¸óã
(c⁄° *
domaö
);

912 #i‚de‡
INTEL_NO_MACRO_BODY


913 #i‚de‡
INTEL_NO_ITTNOTIFY_API


914 #i‡
ITT_PLATFORM
==
ITT_PLATFORM_WIN


915 
ITT_STUB
(
ITTAPI
, 
__ôt_‰ame
, 
‰ame_¸óãA
, (c⁄° *
domaö
))

916 
ITT_STUB
(
ITTAPI
, 
__ôt_‰ame
, 
‰ame_¸óãW
, (c⁄° 
wch¨_t
 *
domaö
))

918 
ITT_STUB
(
ITTAPI
, 
__ôt_‰ame
, 
‰ame_¸óã
, (c⁄° *
domaö
))

920 #i‡
ITT_PLATFORM
==
ITT_PLATFORM_WIN


921 
	#__ôt_‰ame_¸óãA
 
	`ITTNOTIFY_DATA
(
‰ame_¸óãA
)

	)

922 
	#__ôt_‰ame_¸óãA_±r
 
	`ITTNOTIFY_NAME
(
‰ame_¸óãA
)

	)

923 
	#__ôt_‰ame_¸óãW
 
	`ITTNOTIFY_DATA
(
‰ame_¸óãW
)

	)

924 
	#__ôt_‰ame_¸óãW_±r
 
	`ITTNOTIFY_NAME
(
‰ame_¸óãW
)

	)

926 
	#__ôt_‰ame_¸óã
 
	`ITTNOTIFY_DATA
(
‰ame_¸óã
)

	)

927 
	#__ôt_‰ame_¸óã_±r
 
	`ITTNOTIFY_NAME
(
‰ame_¸óã
)

	)

930 #i‡
ITT_PLATFORM
==
ITT_PLATFORM_WIN


931 
	#__ôt_‰ame_¸óãA
(
domaö
)

	)

932 
	#__ôt_‰ame_¸óãA_±r
 0

	)

933 
	#__ôt_‰ame_¸óãW
(
domaö
)

	)

934 
	#__ôt_‰ame_¸óãW_±r
 0

	)

936 
	#__ôt_‰ame_¸óã
(
domaö
)

	)

937 
	#__ôt_‰ame_¸óã_±r
 0

	)

941 #i‡
ITT_PLATFORM
==
ITT_PLATFORM_WIN


942 
	#__ôt_‰ame_¸óãA_±r
 0

	)

943 
	#__ôt_‰ame_¸óãW_±r
 0

	)

945 
	#__ôt_‰ame_¸óã_±r
 0

	)

951 
ITTAPI
 
__ôt_‰ame_begö
(
__ôt_‰ame
 
‰ame
);

953 
ITTAPI
 
__ôt_‰ame_íd
 (
__ôt_‰ame
 
‰ame
);

956 #i‚de‡
INTEL_NO_MACRO_BODY


957 #i‚de‡
INTEL_NO_ITTNOTIFY_API


958 
ITT_STUBV
(
ITTAPI
, , 
‰ame_begö
, (
__ôt_‰ame
 
‰ame
))

959 
ITT_STUBV
(
ITTAPI
, , 
‰ame_íd
, (
__ôt_‰ame
 
‰ame
))

960 
	#__ôt_‰ame_begö
 
	`ITTNOTIFY_VOID
(
‰ame_begö
)

	)

961 
	#__ôt_‰ame_begö_±r
 
	`ITTNOTIFY_NAME
(
‰ame_begö
)

	)

962 
	#__ôt_‰ame_íd
 
	`ITTNOTIFY_VOID
(
‰ame_íd
)

	)

963 
	#__ôt_‰ame_íd_±r
 
	`ITTNOTIFY_NAME
(
‰ame_íd
)

	)

965 
	#__ôt_‰ame_begö
(
‰ame
)

	)

966 
	#__ôt_‰ame_begö_±r
 0

	)

967 
	#__ôt_‰ame_íd
(
‰ame
)

	)

968 
	#__ôt_‰ame_íd_±r
 0

	)

971 
	#__ôt_‰ame_begö_±r
 0

	)

972 
	#__ôt_‰ame_íd_±r
 0

	)

977 #ifde‡
__˝lu•lus


	@viper/concurrentqueue-src/benchmarks/tbb/tools_api/prototype/ittnotify.h

21 #i‚de‡
_PROTOTYPE_ITTNOTIFY_H_


22 
	#_PROTOTYPE_ITTNOTIFY_H_


	)

30 #i‚de‡
ITT_OS_WIN


31 
	#ITT_OS_WIN
 1

	)

34 #i‚de‡
ITT_OS_LINUX


35 
	#ITT_OS_LINUX
 2

	)

38 #i‚de‡
ITT_OS_MAC


39 
	#ITT_OS_MAC
 3

	)

42 #i‚de‡
ITT_OS


43 #i‡
deföed
 
WIN32
 || deföed 
_WIN32


44 
	#ITT_OS
 
ITT_OS_WIN


	)

45 #ñi‡
deföed
–
__APPLE__
 ) && deföed–
__MACH__
 )

46 
	#ITT_OS
 
ITT_OS_MAC


	)

48 
	#ITT_OS
 
ITT_OS_LINUX


	)

52 #i‚de‡
ITT_PLATFORM_WIN


53 
	#ITT_PLATFORM_WIN
 1

	)

56 #i‚de‡
ITT_PLATFORM_POSIX


57 
	#ITT_PLATFORM_POSIX
 2

	)

60 #i‚de‡
ITT_PLATFORM_MAC


61 
	#ITT_PLATFORM_MAC
 3

	)

64 #i‚de‡
ITT_PLATFORM


65 #i‡
ITT_OS
==
ITT_OS_WIN


66 
	#ITT_PLATFORM
 
ITT_PLATFORM_WIN


	)

67 #ñi‡
ITT_OS
==
ITT_OS_MAC


68 
	#ITT_PLATFORM
 
ITT_PLATFORM_MAC


	)

70 
	#ITT_PLATFORM
 
ITT_PLATFORM_POSIX


	)

74 #i‡
deföed
(
_UNICODE
Ë&& !deföed(
UNICODE
)

75 
	#UNICODE


	)

78 
	~<°ddef.h
>

79 #i‡
ITT_PLATFORM
==
ITT_PLATFORM_WIN


80 
	~<tch¨.h
>

82 
	~<°döt.h
>

83 #i‡
deföed
(
UNICODE
Ë|| deföed(
_UNICODE
)

84 
	~<wch¨.h
>

88 #i‚de‡
CDECL


89 #i‡
ITT_PLATFORM
==
ITT_PLATFORM_WIN


90 
	#CDECL
 
__cde˛


	)

92 #i‡
deföed
 
_M_IX86
 || deföed 
__i386__


93 
	#CDECL
 
	`__©åibuã__
 ((
cde˛
))

	)

95 
	#CDECL


	)

100 #i‚de‡
STDCALL


101 #i‡
ITT_PLATFORM
==
ITT_PLATFORM_WIN


102 
	#STDCALL
 
__°dˇŒ


	)

104 #i‡
deföed
 
_M_IX86
 || deföed 
__i386__


105 
	#STDCALL
 
	`__©åibuã__
 ((
°dˇŒ
))

	)

107 
	#STDCALL


	)

112 
	#ITTAPI
 
CDECL


	)

113 
	#LIBITTAPI
 
CDECL


	)

116 
	#ITTAPI_CALL
 
CDECL


	)

117 
	#LIBITTAPI_CALL
 
CDECL


	)

119 #i‡
ITT_PLATFORM
==
ITT_PLATFORM_WIN


121 
	#ITT_INLINE
 
__f‹˚ölöe


	)

122 
	#ITT_INLINE_ATTRIBUTE


	)

129 #ifde‡
__STRICT_ANSI__


130 
	#ITT_INLINE
 

	)

132 
	#ITT_INLINE
 
ölöe


	)

134 
	#ITT_INLINE_ATTRIBUTE
 
	`__©åibuã__
 ((
Æways_ölöe
, 
unu£d
))

	)

140 
	#ITT_JOIN_AUX
(
p
,
n
Ëp##
	)
n

141 
	#ITT_JOIN
(
p
,
n
Ë
	`ITT_JOIN_AUX
’,n)

	)

143 #ifde‡
ITT_MAJOR


144 #unde‡
ITT_MAJOR


146 #ifde‡
ITT_MINOR


147 #unde‡
ITT_MINOR


149 
	#ITT_MAJOR
 3

	)

150 
	#ITT_MINOR
 0

	)

153 
	#ITT_VERSIONIZE
(
x
) \

154 
	`ITT_JOIN
(
x
, \

155 
	`ITT_JOIN
(
_
, \

156 
	`ITT_JOIN
(
ITT_MAJOR
, \

157 
	`ITT_JOIN
(
_
, 
ITT_MINOR
))))

	)

159 #i‚de‡
INTEL_ITTNOTIFY_PREFIX


160 
	#INTEL_ITTNOTIFY_PREFIX
 
__ôt_


	)

162 #i‚de‡
INTEL_ITTNOTIFY_POSTFIX


163 
	#INTEL_ITTNOTIFY_POSTFIX
 
_±r_


	)

166 
	#ITTNOTIFY_NAME_AUX
(
n
Ë
	`ITT_JOIN
(
INTEL_ITTNOTIFY_PREFIX
,n)

	)

167 
	#ITTNOTIFY_NAME
(
n
Ë
	`ITT_VERSIONIZE
(
	`ITTNOTIFY_NAME_AUX
(
	`ITT_JOIN
“,
INTEL_ITTNOTIFY_POSTFIX
)))

	)

169 
	#ITTNOTIFY_VOID
(
n
Ë(!
	`ITTNOTIFY_NAME
“)Ë? ()0 : ITTNOTIFY_NAME“)

	)

170 
	#ITTNOTIFY_DATA
(
n
Ë(!
	`ITTNOTIFY_NAME
“)Ë? 0 : ITTNOTIFY_NAME“)

	)

172 
	#ITTNOTIFY_VOID_D0
(
n
,
d
Ë(!(d)->
Êags
Ë? ()0 : (!
	`ITTNOTIFY_NAME
“)Ë? ()0 : ITTNOTIFY_NAME“)(d)

	)

173 
	#ITTNOTIFY_VOID_D1
(
n
,
d
,
x
Ë(!(d)->
Êags
Ë? ()0 : (!
	`ITTNOTIFY_NAME
“)Ë? ()0 : ITTNOTIFY_NAME“)(d,x)

	)

174 
	#ITTNOTIFY_VOID_D2
(
n
,
d
,
x
,
y
Ë(!(d)->
Êags
Ë? ()0 : (!
	`ITTNOTIFY_NAME
“)Ë? ()0 : ITTNOTIFY_NAME“)(d,x,y)

	)

175 
	#ITTNOTIFY_VOID_D3
(
n
,
d
,
x
,
y
,
z
Ë(!(d)->
Êags
Ë? ()0 : (!
	`ITTNOTIFY_NAME
“)Ë? ()0 : ITTNOTIFY_NAME“)(d,x,y,z)

	)

176 
	#ITTNOTIFY_VOID_D4
(
n
,
d
,
x
,
y
,
z
,
a
Ë(!(d)->
Êags
Ë? ()0 : (!
	`ITTNOTIFY_NAME
“)Ë? ()0 : ITTNOTIFY_NAME“)(d,x,y,z,a)

	)

177 
	#ITTNOTIFY_VOID_D5
(
n
,
d
,
x
,
y
,
z
,
a
,
b
Ë(!(d)->
Êags
Ë? ()0 : (!
	`ITTNOTIFY_NAME
“)Ë? ()0 : ITTNOTIFY_NAME“)(d,x,y,z,a,b)

	)

178 
	#ITTNOTIFY_VOID_D6
(
n
,
d
,
x
,
y
,
z
,
a
,
b
,
c
Ë(!(d)->
Êags
Ë? ()0 : (!
	`ITTNOTIFY_NAME
“)Ë? ()0 : ITTNOTIFY_NAME“)(d,x,y,z,a,b,c)

	)

179 
	#ITTNOTIFY_DATA_D0
(
n
,
d
Ë(!(d)->
Êags
Ë? 0 : (!
	`ITTNOTIFY_NAME
“)Ë? 0 : ITTNOTIFY_NAME“)(d)

	)

180 
	#ITTNOTIFY_DATA_D1
(
n
,
d
,
x
Ë(!(d)->
Êags
Ë? 0 : (!
	`ITTNOTIFY_NAME
“)Ë? 0 : ITTNOTIFY_NAME“)(d,x)

	)

181 
	#ITTNOTIFY_DATA_D2
(
n
,
d
,
x
,
y
Ë(!(d)->
Êags
Ë? 0 : (!
	`ITTNOTIFY_NAME
“)Ë? 0 : ITTNOTIFY_NAME“)(d,x,y)

	)

182 
	#ITTNOTIFY_DATA_D3
(
n
,
d
,
x
,
y
,
z
Ë(!(d)->
Êags
Ë? 0 : (!
	`ITTNOTIFY_NAME
“)Ë? 0 : ITTNOTIFY_NAME“)(d,x,y,z)

	)

183 
	#ITTNOTIFY_DATA_D4
(
n
,
d
,
x
,
y
,
z
,
a
Ë(!(d)->
Êags
Ë? 0 : (!
	`ITTNOTIFY_NAME
“)Ë? 0 : ITTNOTIFY_NAME“)(d,x,y,z,a)

	)

184 
	#ITTNOTIFY_DATA_D5
(
n
,
d
,
x
,
y
,
z
,
a
,
b
Ë(!(d)->
Êags
Ë? 0 : (!
	`ITTNOTIFY_NAME
“)Ë? 0 : ITTNOTIFY_NAME“)(d,x,y,z,a,b)

	)

185 
	#ITTNOTIFY_DATA_D6
(
n
,
d
,
x
,
y
,
z
,
a
,
b
,
c
Ë(!(d)->
Êags
Ë? 0 : (!
	`ITTNOTIFY_NAME
“)Ë? 0 : ITTNOTIFY_NAME“)(d,x,y,z,a,b,c)

	)

187 #ifde‡
ITT_STUB


188 #unde‡
ITT_STUB


190 #ifde‡
ITT_STUBV


191 #unde‡
ITT_STUBV


193 
	#ITT_STUBV
(
≠i
,
ty≥
,
«me
,
¨gs
) \

194 
	`ty≥
 (
	t≠i
* 
	tITT_JOIN
(
	tITTNOTIFY_NAME
(
	t«me
),
	t_t
)Ë
	t¨gs
; \

195 
	`ITT_JOIN
(
	`ITTNOTIFY_NAME
(
«me
),
_t
ËITTNOTIFY_NAME“ame);

	)

196 
	#ITT_STUB
 
ITT_STUBV


	)

199 #ifde‡
__˝lu•lus


209 #ifde‡
__˝lu•lus


	@viper/concurrentqueue-src/benchmarks/tbb/x86_rtm_rw_mutex.cpp

21 
	~"tbb/tbb_c⁄fig.h
"

22 #i‡
__TBB_TSX_AVAILABLE


23 
	~"tbb/•ö_rw_muãx.h
"

24 
	~"tbb/tbb_machöe.h
"

25 
	~"ôt_nŸify.h
"

26 
	~"govîn‹.h
"

27 
	~"tbb/©omic.h
"

32 #i‚de‡
__TBB_RW_MUTEX_DELAY_TEST


33 
	#__TBB_RW_MUTEX_DELAY_TEST
 1

	)

36 #i‡
deföed
(
_MSC_VER
Ë&& deföed(
_Wp64
)

38 #¥agm®
w¨nög
 (
dißbÀ
: 4244)

41 
«me•a˚
 
	gtbb
 {

43 
«me•a˚
 
	göãrÁ˚8
 {

44 
«me•a˚
 
	göã∫Æ
 {

49 
	g•ecuœti⁄_å™ß˘i⁄_ab‹ãd
 = 0x01,

50 
	g•ecuœti⁄_ˇn_ªåy
 = 0x02,

51 
	g•ecuœti⁄_memadd_c⁄Êi˘
 = 0x04,

52 
	g•ecuœti⁄_buf„r_ovîÊow
 = 0x08,

53 
	g•ecuœti⁄_bªakpoöt_hô
 = 0x10,

54 
	g•ecuœti⁄_√°ed_ab‹t
 = 0x20,

55 
	g•ecuœti⁄_xab‹t_mask
 = 0xFF000000,

56 
	g•ecuœti⁄_xab‹t_shi·
 = 24,

57 
	g•ecuœti⁄_ªåy
 = 
•ecuœti⁄_å™ß˘i⁄_ab‹ãd


58 | 
•ecuœti⁄_ˇn_ªåy


59 | 
•ecuœti⁄_memadd_c⁄Êi˘


63 c⁄° 
	gªåy_thªshﬁd_ªad
 = 10;

64 c⁄° 
	gªåy_thªshﬁd_wrôe
 = 10;

67 
	gx86_πm_rw_muãx
::
öã∫Æ_ªÀa£
(
x86_πm_rw_muãx
::
sc›ed_lock
& 
s
) {

68 
s
.
å™ß˘i⁄_°©e
) {

69 
RTM_å™ß˘ög_wrôî
:

70 
RTM_å™ß˘ög_ªadî
:

72 
__TBB_ASSERT
(
__TBB_machöe_is_ö_å™ß˘i⁄
(), "transaction_state &&Çot speculating");

73 #i‡
__TBB_RW_MUTEX_DELAY_TEST


74 if(
	gs
.
	gå™ß˘i⁄_°©e
 =
RTM_å™ß˘ög_ªadî
) {

75 if(
this
->
w_Êag
Ë
__TBB_machöe_å™ß˘i⁄_c⁄Êi˘_ab‹t
();

77 if(
	gthis
->
	g°©e
Ë
__TBB_machöe_å™ß˘i⁄_c⁄Êi˘_ab‹t
();

80 
__TBB_machöe_íd_å™ß˘i⁄
();

81 
	gs
.
	gmy_sc›ed_lock
.
öã∫Æ_£t_muãx
(
NULL
);

84 
	gRTM_ªÆ_ªadî
:

85 
__TBB_ASSERT
(!
this
->
w_Êag
, "w_flag set butÑeadÜockácquired");

86 
	gs
.
	gmy_sc›ed_lock
.
ªÀa£
();

88 
	gRTM_ªÆ_wrôî
:

89 
__TBB_ASSERT
(
this
->
w_Êag
, "w_flag unset but writeÜockácquired");

90 
	gthis
->
	gw_Êag
 = 
Ál£
;

91 
	gs
.
	gmy_sc›ed_lock
.
ªÀa£
();

93 
	gRTM_nŸ_ö_muãx
:

94 
__TBB_ASSERT
(
Ál£
, "RTM_not_in_mutex, but inÑelease");

96 
__TBB_ASSERT
(
Ál£
, "invalidÅransaction_state");

98 
	gs
.
	gå™ß˘i⁄_°©e
 = 
RTM_nŸ_ö_muãx
;

102 
	gx86_πm_rw_muãx
::
öã∫Æ_acquúe_wrôî
(
x86_πm_rw_muãx
::
sc›ed_lock
& 
s
, 
boﬁ
 
⁄ly_•ecuœã
)

104 
__TBB_ASSERT
(
s
.
å™ß˘i⁄_°©e
 =
RTM_nŸ_ö_muãx
, "scoped_lockálready inÅransaction");

105 if(
	gtbb
::
öã∫Æ
::
govîn‹
::
•ecuœti⁄_íabÀd
()) {

106 
num_ªåõs
 = 0;

107 
	gab‹t_code
;

109 
	gtbb
::
öã∫Æ
::
©omic_backoff
 
backoff
;

110 if(
	gthis
->
	g°©e
) {

111 if(
	g⁄ly_•ecuœã
) ;

113 
	gbackoff
.
∑u£
();

114 } 
	gthis
->
	g°©e
);

117 if(–
	gab‹t_code
 = 
__TBB_machöe_begö_å™ß˘i⁄
()) == ~()(0) )

120 #i‡!
__TBB_RW_MUTEX_DELAY_TEST


121 if(
this
->
°©e
) {

123 
__TBB_machöe_å™ß˘i⁄_c⁄Êi˘_ab‹t
();

126 
	gs
.
	gå™ß˘i⁄_°©e
 = 
RTM_å™ß˘ög_wrôî
;

127 
	gs
.
	gmy_sc›ed_lock
.
öã∫Æ_£t_muãx
(
this
);

130 ++
	gnum_ªåõs
;

131 }  (
	gab‹t_code
 & 
	g•ecuœti⁄_ªåy
Ë!0 && (
num_ªåõs
 < 
ªåy_thªshﬁd_wrôe
) );

134 if(
	g⁄ly_•ecuœã
) ;

135 
	gs
.
	gmy_sc›ed_lock
.
acquúe
(*
this
, 
åue
);

136 
__TBB_ASSERT
(!
w_Êag
, "Afterácquire for write, w_flagálreadyÅrue");

137 
	gw_Êag
 = 
åue
;

138 
	gs
.
	gå™ß˘i⁄_°©e
 = 
RTM_ªÆ_wrôî
;

146 
	gx86_πm_rw_muãx
::
öã∫Æ_acquúe_ªadî
(
x86_πm_rw_muãx
::
sc›ed_lock
& 
s
, 
boﬁ
 
⁄ly_•ecuœã
) {

147 
__TBB_ASSERT
(
s
.
å™ß˘i⁄_°©e
 =
RTM_nŸ_ö_muãx
, "scoped_lockálready inÅransaction");

148 if(
	gtbb
::
öã∫Æ
::
govîn‹
::
•ecuœti⁄_íabÀd
()) {

149 
num_ªåõs
 = 0;

150 
	gab‹t_code
;

152 
	gtbb
::
öã∫Æ
::
©omic_backoff
 
backoff
;

154 if(
	gw_Êag
) {

155 if(
	g⁄ly_•ecuœã
) ;

157 
	gbackoff
.
∑u£
();

158 } 
	gw_Êag
);

161 if((
	gab‹t_code
 = 
__TBB_machöe_begö_å™ß˘i⁄
()) == ~()(0) )

164 #i‡!
__TBB_RW_MUTEX_DELAY_TEST


165 if(
w_Êag
) {

166 
__TBB_machöe_å™ß˘i⁄_c⁄Êi˘_ab‹t
();

169 
	gs
.
	gå™ß˘i⁄_°©e
 = 
RTM_å™ß˘ög_ªadî
;

170 
	gs
.
	gmy_sc›ed_lock
.
öã∫Æ_£t_muãx
(
this
);

182 ++
	gnum_ªåõs
;

183 }  (
	gab‹t_code
 & 
	g•ecuœti⁄_ªåy
Ë!0 && (
num_ªåõs
 < 
ªåy_thªshﬁd_ªad
) );

186 if(
	g⁄ly_•ecuœã
) ;

187 
	gs
.
	gmy_sc›ed_lock
.
acquúe
–*
this
, 
Ál£
 );

188 
	gs
.
	gå™ß˘i⁄_°©e
 = 
RTM_ªÆ_ªadî
;

193 
boﬁ
 
	gx86_πm_rw_muãx
::
öã∫Æ_upgøde
(
x86_πm_rw_muãx
::
sc›ed_lock
& 
s
)

195 
s
.
å™ß˘i⁄_°©e
) {

196 
RTM_ªÆ_ªadî
: {

197 
s
.
å™ß˘i⁄_°©e
 = 
RTM_ªÆ_wrôî
;

198 
boﬁ
 
	gno_ªÀa£
 = 
s
.
my_sc›ed_lock
.
upgøde_to_wrôî
();

199 
__TBB_ASSERT
(!
w_Êag
, "After upgrade_to_writer, w_flagálreadyÅrue");

200 
	gw_Êag
 = 
åue
;

201  
	gno_ªÀa£
;

203 
	gRTM_å™ß˘ög_ªadî
:

204 
s
.
å™ß˘i⁄_°©e
 = 
RTM_å™ß˘ög_wrôî
;

207  
	gåue
;

209 
__TBB_ASSERT
(
Ál£
, "Invalid state for upgrade");

210  
	gÁl£
;

215 
boﬁ
 
	gx86_πm_rw_muãx
::
öã∫Æ_downgøde
(
x86_πm_rw_muãx
::
sc›ed_lock
& 
s
) {

216 
s
.
å™ß˘i⁄_°©e
) {

217 
RTM_ªÆ_wrôî
:

218 
s
.
å™ß˘i⁄_°©e
 = 
RTM_ªÆ_ªadî
;

219 
__TBB_ASSERT
(
w_Êag
, "Before downgrade_to_reader w_flagÇotÅrue");

220 
	gw_Êag
 = 
Ál£
;

221  
	gs
.
	gmy_sc›ed_lock
.
downgøde_to_ªadî
();

222 
	gRTM_å™ß˘ög_wrôî
:

223 #i‡
__TBB_RW_MUTEX_DELAY_TEST


224 if(
this
->
°©e
) {

225 
__TBB_machöe_å™ß˘i⁄_c⁄Êi˘_ab‹t
();

228 
	gs
.
	gå™ß˘i⁄_°©e
 = 
RTM_å™ß˘ög_ªadî
;

229  
	gåue
;

231 
__TBB_ASSERT
(
Ál£
, "Invalid state for downgrade");

232  
	gÁl£
;

241 
boﬁ
 
	gx86_πm_rw_muãx
::
öã∫Æ_åy_acquúe_wrôî
(
x86_πm_rw_muãx
::
sc›ed_lock
& 
s
)

243 
öã∫Æ_acquúe_wrôî
(
s
, 
åue
);

244 if(
	gs
.
	gå™ß˘i⁄_°©e
 =
RTM_å™ß˘ög_wrôî
) {

245  
åue
;

247 
__TBB_ASSERT
(
s
.
å™ß˘i⁄_°©e
 =
RTM_nŸ_ö_muãx
, "TryingÅoácquire writer which isálreadyállocated");

249 
boﬁ
 
	gªsu…
 = 
s
.
my_sc›ed_lock
.
åy_acquúe
(*
this
, 
åue
);

250 if(
	gªsu…
) {

252 
__TBB_ASSERT
(!
w_Êag
, "AfterÅry_acquire_writer, w_flagálreadyÅrue");

253 
	gw_Êag
 = 
åue
;

254 
	gs
.
	gå™ß˘i⁄_°©e
 = 
RTM_ªÆ_wrôî
;

256  
	gªsu…
;

259 
	gx86_πm_rw_muãx
::
öã∫Æ_c⁄°ru˘
() {

260 
ITT_SYNC_CREATE
(
this
, 
_T
("tbb::x86_rtm_rw_mutex"), _T(""));

	@viper/concurrentqueue-src/benchmarks/tbbqueue.h

1 #¥agm®
⁄˚


3 
	~<utûôy
>

5 
	~"tbb/c⁄cuºít_queue.h
"

6 
	~"wøµîs.h
"

8 
	gãm∂©e
<
ty≥«me
 
	gT
>

9 
	sTbbQueueWøµî


11 
	mpublic
:

12 
DummyTokí
 
	t¥odu˚r_tokí_t
;

13 
DummyTokí
 
	tc⁄sumî_tokí_t
;

15 
	mpublic
:

16 
ãm∂©e
<
ty≥«me
 
U
>

17 
ölöe
 
boﬁ
 
íqueue
(
U
&& 
ôem
)

19 
q
.
push
(
°d
::
f‹w¨d
<
U
>(
ôem
));

20  
	måue
;

23 
ölöe
 
boﬁ
 
åy_dequeue
(
T
& 
ôem
)

25  
	mq
.
åy_p›
(
ôem
);

29 
boﬁ
 
íqueue
(
¥odu˚r_tokí_t
 c⁄°&, 
T
 c⁄°&Ë{  
	mÁl£
; }

30 
boﬁ
 
åy_íqueue
(
¥odu˚r_tokí_t
, 
T
 c⁄°&Ë{  
	mÁl£
; }

31 
boﬁ
 
åy_dequeue
(
c⁄sumî_tokí_t
, 
T
& 
ôem
Ë{  
	mÁl£
; }

32 
	mãm∂©e
<
ty≥«me
 
	mIt
> 
boﬁ
 
íqueue_bulk
(
It
, 
size_t
Ë{  
	mÁl£
; }

33 
	mãm∂©e
<
ty≥«me
 
	mIt
> 
boﬁ
 
íqueue_bulk
(
¥odu˚r_tokí_t
 c⁄°&, 
It
, 
size_t
Ë{  
	mÁl£
; }

34 
	mãm∂©e
<
ty≥«me
 
	mIt
> 
size_t
 
åy_dequeue_bulk
(
It
, size_t) {  0; }

35 
	mãm∂©e
<
ty≥«me
 
	mIt
> 
size_t
 
åy_dequeue_bulk
(
c⁄sumî_tokí_t
, 
It
, size_t) {  0; }

37 
	m¥iv©e
:

38 
tbb
::
c⁄cuºít_queue
<
T
> 
q
;

	@viper/concurrentqueue-src/benchmarks/wrappers.h

1 #¥agm®
⁄˚


3 
	sDummyTokí


5 
	mãm∂©e
<
ty≥«me
 
	mTQueue
>

6 
DummyTokí
(
TQueue
 const&)

	@viper/concurrentqueue-src/blockingconcurrentqueue.h

8 #¥agm®
⁄˚


10 
	~"c⁄cuºítqueue.h
"

11 
	~"lightweight£m≠h‹e.h
"

13 
	~<ty≥_åaôs
>

14 
	~<˚ºno
>

15 
	~<mem‹y
>

16 
	~<chr⁄o
>

17 
	~<˘ime
>

19 
«me•a˚
 
	gmoodyˇmñ


24 
	gãm∂©e
<
ty≥«me
 
	gT
,Åy≥«mê
	gTøôs
 = 
C⁄cuºítQueueDeÁu…Tøôs
>

25 ˛as†
	cBlockögC⁄cuºítQueue


27 
¥iv©e
:

28 ::
moodyˇmñ
::
	tC⁄cuºítQueue
<
	tT
, 
	tTøôs
> ConcurrentQueue;

29 ::
moodyˇmñ
::
	tLightweightSem≠h‹e
 LightweightSemaphore;

31 
	gpublic
:

32 
ty≥«me
 
	tC⁄cuºítQueue
::
	t¥odu˚r_tokí_t
Öroducer_token_t;

33 
ty≥«me
 
	tC⁄cuºítQueue
::
	tc⁄sumî_tokí_t
 consumer_token_t;

35 
ty≥«me
 
	tC⁄cuºítQueue
::
	tödex_t
 index_t;

36 
ty≥«me
 
	tC⁄cuºítQueue
::
	tsize_t
 size_t;

37 
ty≥«me
 
	t°d
::
	tmake_sig√d
<
	tsize_t
>::
	tty≥
 
	tssize_t
;

39 c⁄° 
size_t
 
	gBLOCK_SIZE
 = 
C⁄cuºítQueue
::
BLOCK_SIZE
;

40 c⁄° 
size_t
 
	gEXPLICIT_BLOCK_EMPTY_COUNTER_THRESHOLD
 = 
C⁄cuºítQueue
::
EXPLICIT_BLOCK_EMPTY_COUNTER_THRESHOLD
;

41 c⁄° 
size_t
 
	gEXPLICIT_INITIAL_INDEX_SIZE
 = 
C⁄cuºítQueue
::
EXPLICIT_INITIAL_INDEX_SIZE
;

42 c⁄° 
size_t
 
	gIMPLICIT_INITIAL_INDEX_SIZE
 = 
C⁄cuºítQueue
::
IMPLICIT_INITIAL_INDEX_SIZE
;

43 c⁄° 
size_t
 
	gINITIAL_IMPLICIT_PRODUCER_HASH_SIZE
 = 
C⁄cuºítQueue
::
INITIAL_IMPLICIT_PRODUCER_HASH_SIZE
;

44 c⁄° 
	g°d
::
uöt32_t
 
EXPLICIT_CONSUMER_CONSUMPTION_QUOTA_BEFORE_ROTATE
 = 
C⁄cuºítQueue
::EXPLICIT_CONSUMER_CONSUMPTION_QUOTA_BEFORE_ROTATE;

45 c⁄° 
size_t
 
	gMAX_SUBQUEUE_SIZE
 = 
C⁄cuºítQueue
::
MAX_SUBQUEUE_SIZE
;

47 
	gpublic
:

58 
ex∂icô
 
BlockögC⁄cuºítQueue
(
size_t
 
ˇ∑côy
 = 6 * 
BLOCK_SIZE
)

59 : 
ö√r
(
ˇ∑côy
), 
£ma
(
¸óã
<
LightweightSem≠h‹e
, 
ssize_t
, >(0, ()
Tøôs
::
MAX_SEMA_SPINS
), &
BlockögC⁄cuºítQueue
::
ãm∂©e
 
de°roy
<LightweightSemaphore>)

61 
as£π
(
ªöãΩªt_ˇ°
<
C⁄cuºítQueue
*>((
BlockögC⁄cuºítQueue
*)1Ë=&((BlockögC⁄cuºítQueue*)1)->
ö√r
 && "BlockingConcurrentQueue must have ConcurrentQueueás its first member");

62 i‡(!
	g£ma
) {

63 
MOODYCAMEL_THROW
(
°d
::
bad_Æloc
());

67 
BlockögC⁄cuºítQueue
(
size_t
 
möC≠acôy
, size_à
maxEx∂icôProdu˚rs
, size_à
maxIm∂icôProdu˚rs
)

68 : 
ö√r
(
möC≠acôy
, 
maxEx∂icôProdu˚rs
, 
maxIm∂icôProdu˚rs
), 
£ma
(
¸óã
<
LightweightSem≠h‹e
, 
ssize_t
, >(0, ()
Tøôs
::
MAX_SEMA_SPINS
), &
BlockögC⁄cuºítQueue
::
ãm∂©e
 
de°roy
<LightweightSemaphore>)

70 
as£π
(
ªöãΩªt_ˇ°
<
C⁄cuºítQueue
*>((
BlockögC⁄cuºítQueue
*)1Ë=&((BlockögC⁄cuºítQueue*)1)->
ö√r
 && "BlockingConcurrentQueue must have ConcurrentQueueás its first member");

71 i‡(!
	g£ma
) {

72 
MOODYCAMEL_THROW
(
°d
::
bad_Æloc
());

77 
BlockögC⁄cuºítQueue
(BlockögC⁄cuºítQueuêc⁄°&Ë
	gMOODYCAMEL_DELETE_FUNCTION
;

78 
	gBlockögC⁄cuºítQueue
& 
	g›î©‹
=(
BlockögC⁄cuºítQueue
 c⁄°&Ë
MOODYCAMEL_DELETE_FUNCTION
;

86 
BlockögC⁄cuºítQueue
(BlockögC⁄cuºítQueue&& 
Ÿhî
Ë
	gMOODYCAMEL_NOEXCEPT


87 : 
ö√r
(
°d
::
move
(
Ÿhî
.ö√r)), 
£ma
(std::move(other.sema))

90 
ölöe
 
BlockögC⁄cuºítQueue
& 
›î©‹
=(BlockögC⁄cuºítQueue&& 
Ÿhî
Ë
MOODYCAMEL_NOEXCEPT


92  
sw≠_öã∫Æ
(
Ÿhî
);

100 
ölöe
 
sw≠
(
BlockögC⁄cuºítQueue
& 
Ÿhî
Ë
	gMOODYCAMEL_NOEXCEPT


102 
sw≠_öã∫Æ
(
Ÿhî
);

105 
	g¥iv©e
:

106 
BlockögC⁄cuºítQueue
& 
sw≠_öã∫Æ
(BlockögC⁄cuºítQueue& 
Ÿhî
)

108 i‡(
this
 =&
Ÿhî
) {

109  *
this
;

112 
	gö√r
.
sw≠
(
Ÿhî
.
ö√r
);

113 
	g£ma
.
sw≠
(
Ÿhî
.
£ma
);

114  *
	gthis
;

117 
	gpublic
:

123 
ölöe
 
boﬁ
 
íqueue
(
T
 c⁄°& 
ôem
)

125 i‡((
dëaûs
::
likñy
)(
ö√r
.
íqueue
(
ôem
))) {

126 
£ma
->
sig«l
();

127  
	gåue
;

129  
	gÁl£
;

137 
ölöe
 
boﬁ
 
íqueue
(
T
&& 
ôem
)

139 i‡((
	gdëaûs
::
likñy
)(
ö√r
.
íqueue
(
°d
::
move
(
ôem
)))) {

140 
£ma
->
sig«l
();

141  
	gåue
;

143  
	gÁl£
;

150 
ölöe
 
boﬁ
 
íqueue
(
¥odu˚r_tokí_t
 c⁄°& 
tokí
, 
T
 c⁄°& 
ôem
)

152 i‡((
	gdëaûs
::
likñy
)(
ö√r
.
íqueue
(
tokí
, 
ôem
))) {

153 
	g£ma
->
sig«l
();

154  
	gåue
;

156  
	gÁl£
;

163 
ölöe
 
boﬁ
 
íqueue
(
¥odu˚r_tokí_t
 c⁄°& 
tokí
, 
T
&& 
ôem
)

165 i‡((
	gdëaûs
::
likñy
)(
ö√r
.
íqueue
(
tokí
, 
°d
::
move
(
ôem
)))) {

166 
£ma
->
sig«l
();

167  
	gåue
;

169  
	gÁl£
;

178 
	gãm∂©e
<
ty≥«me
 
	gIt
>

179 
ölöe
 
boﬁ
 
íqueue_bulk
(
It
 
ôemFú°
, 
size_t
 
cou¡
)

181 i‡((
	gdëaûs
::
likñy
)(
ö√r
.
íqueue_bulk
(
°d
::
f‹w¨d
<
It
>(
ôemFú°
), 
cou¡
))) {

182 
	g£ma
->
sig«l
((
LightweightSem≠h‹e
::
ssize_t
)(ssize_t)
cou¡
);

183  
	gåue
;

185  
	gÁl£
;

194 
	gãm∂©e
<
ty≥«me
 
	gIt
>

195 
ölöe
 
boﬁ
 
íqueue_bulk
(
¥odu˚r_tokí_t
 c⁄°& 
tokí
, 
It
 
ôemFú°
, 
size_t
 
cou¡
)

197 i‡((
	gdëaûs
::
likñy
)(
ö√r
.
íqueue_bulk
(
tokí
, 
°d
::
f‹w¨d
<
It
>(
ôemFú°
), 
cou¡
))) {

198 
	g£ma
->
sig«l
((
LightweightSem≠h‹e
::
ssize_t
)(ssize_t)
cou¡
);

199  
	gåue
;

201  
	gÁl£
;

209 
ölöe
 
boﬁ
 
åy_íqueue
(
T
 c⁄°& 
ôem
)

211 i‡(
	gö√r
.
åy_íqueue
(
ôem
)) {

212 
	g£ma
->
sig«l
();

213  
	gåue
;

215  
	gÁl£
;

223 
ölöe
 
boﬁ
 
åy_íqueue
(
T
&& 
ôem
)

225 i‡(
	gö√r
.
åy_íqueue
(
°d
::
move
(
ôem
))) {

226 
£ma
->
sig«l
();

227  
	gåue
;

229  
	gÁl£
;

235 
ölöe
 
boﬁ
 
åy_íqueue
(
¥odu˚r_tokí_t
 c⁄°& 
tokí
, 
T
 c⁄°& 
ôem
)

237 i‡(
	gö√r
.
åy_íqueue
(
tokí
, 
ôem
)) {

238 
	g£ma
->
sig«l
();

239  
	gåue
;

241  
	gÁl£
;

247 
ölöe
 
boﬁ
 
åy_íqueue
(
¥odu˚r_tokí_t
 c⁄°& 
tokí
, 
T
&& 
ôem
)

249 i‡(
	gö√r
.
åy_íqueue
(
tokí
, 
°d
::
move
(
ôem
))) {

250 
£ma
->
sig«l
();

251  
	gåue
;

253  
	gÁl£
;

263 
	gãm∂©e
<
ty≥«me
 
	gIt
>

264 
ölöe
 
boﬁ
 
åy_íqueue_bulk
(
It
 
ôemFú°
, 
size_t
 
cou¡
)

266 i‡(
	gö√r
.
åy_íqueue_bulk
(
°d
::
f‹w¨d
<
It
>(
ôemFú°
), 
cou¡
)) {

267 
	g£ma
->
sig«l
((
LightweightSem≠h‹e
::
ssize_t
)(ssize_t)
cou¡
);

268  
	gåue
;

270  
	gÁl£
;

278 
	gãm∂©e
<
ty≥«me
 
	gIt
>

279 
ölöe
 
boﬁ
 
åy_íqueue_bulk
(
¥odu˚r_tokí_t
 c⁄°& 
tokí
, 
It
 
ôemFú°
, 
size_t
 
cou¡
)

281 i‡(
	gö√r
.
åy_íqueue_bulk
(
tokí
, 
°d
::
f‹w¨d
<
It
>(
ôemFú°
), 
cou¡
)) {

282 
	g£ma
->
sig«l
((
LightweightSem≠h‹e
::
ssize_t
)(ssize_t)
cou¡
);

283  
	gåue
;

285  
	gÁl£
;

293 
	gãm∂©e
<
ty≥«me
 
	gU
>

294 
ölöe
 
boﬁ
 
åy_dequeue
(
U
& 
ôem
)

296 i‡(
	g£ma
->
åyWaô
()) {

297 !
	gö√r
.
åy_dequeue
(
ôem
)) {

300  
	gåue
;

302  
	gÁl£
;

309 
	gãm∂©e
<
ty≥«me
 
	gU
>

310 
ölöe
 
boﬁ
 
åy_dequeue
(
c⁄sumî_tokí_t
& 
tokí
, 
U
& 
ôem
)

312 i‡(
	g£ma
->
åyWaô
()) {

313 !
	gö√r
.
åy_dequeue
(
tokí
, 
ôem
)) {

316  
	gåue
;

318  
	gÁl£
;

326 
	gãm∂©e
<
ty≥«me
 
	gIt
>

327 
ölöe
 
size_t
 
åy_dequeue_bulk
(
It
 
ôemFú°
, size_à
max
)

329 
size_t
 
	gcou¡
 = 0;

330 
	gmax
 = (
size_t
)
£ma
->
åyWaôM™y
((
LightweightSem≠h‹e
::
ssize_t
)(ssize_t)
max
);

331 
	gcou¡
 !
max
) {

332 
cou¡
 +
ö√r
.
ãm∂©e
 
åy_dequeue_bulk
<
It
&>(
ôemFú°
, 
	gmax
 - 
	gcou¡
);

334  
	gcou¡
;

342 
	gãm∂©e
<
ty≥«me
 
	gIt
>

343 
ölöe
 
size_t
 
åy_dequeue_bulk
(
c⁄sumî_tokí_t
& 
tokí
, 
It
 
ôemFú°
, size_à
max
)

345 
size_t
 
	gcou¡
 = 0;

346 
	gmax
 = (
size_t
)
£ma
->
åyWaôM™y
((
LightweightSem≠h‹e
::
ssize_t
)(ssize_t)
max
);

347 
	gcou¡
 !
max
) {

348 
cou¡
 +
ö√r
.
ãm∂©e
 
åy_dequeue_bulk
<
It
&>(
tokí
, 
	gôemFú°
, 
	gmax
 - 
	gcou¡
);

350  
	gcou¡
;

358 
	gãm∂©e
<
ty≥«me
 
	gU
>

359 
ölöe
 
waô_dequeue
(
U
& 
ôem
)

361 !
	g£ma
->
waô
()) {

364 !
	gö√r
.
åy_dequeue
(
ôem
)) {

376 
	gãm∂©e
<
ty≥«me
 
	gU
>

377 
ölöe
 
boﬁ
 
waô_dequeue_timed
(
U
& 
ôem
, 
°d
::
öt64_t
 
timeout_u£cs
)

379 i‡(!
£ma
->
waô
(
timeout_u£cs
)) {

380  
Ál£
;

382 !
	gö√r
.
åy_dequeue
(
ôem
)) {

385  
	gåue
;

392 
	gãm∂©e
<
ty≥«me
 
	gU
,Åy≥«mê
	gRï
,Åy≥«mê
	gPîiod
>

393 
ölöe
 
boﬁ
 
waô_dequeue_timed
(
U
& 
ôem
, 
°d
::
chr⁄o
::
duøti⁄
<
Rï
, 
Pîiod
> c⁄°& 
timeout
)

395  
waô_dequeue_timed
(
ôem
, 
°d
::
chr⁄o
::
duøti⁄_ˇ°
<°d::chr⁄o::
mi¸o£c⁄ds
>(
timeout
).
cou¡
());

401 
	gãm∂©e
<
ty≥«me
 
	gU
>

402 
ölöe
 
waô_dequeue
(
c⁄sumî_tokí_t
& 
tokí
, 
U
& 
ôem
)

404 !
	g£ma
->
waô
()) {

407 !
	gö√r
.
åy_dequeue
(
tokí
, 
ôem
)) {

419 
	gãm∂©e
<
ty≥«me
 
	gU
>

420 
ölöe
 
boﬁ
 
waô_dequeue_timed
(
c⁄sumî_tokí_t
& 
tokí
, 
U
& 
ôem
, 
°d
::
öt64_t
 
timeout_u£cs
)

422 i‡(!
£ma
->
waô
(
timeout_u£cs
)) {

423  
Ál£
;

425 !
	gö√r
.
åy_dequeue
(
tokí
, 
ôem
)) {

428  
	gåue
;

435 
	gãm∂©e
<
ty≥«me
 
	gU
,Åy≥«mê
	gRï
,Åy≥«mê
	gPîiod
>

436 
ölöe
 
boﬁ
 
waô_dequeue_timed
(
c⁄sumî_tokí_t
& 
tokí
, 
U
& 
ôem
, 
°d
::
chr⁄o
::
duøti⁄
<
Rï
, 
Pîiod
> c⁄°& 
timeout
)

438  
waô_dequeue_timed
(
tokí
, 
ôem
, 
°d
::
chr⁄o
::
duøti⁄_ˇ°
<°d::chr⁄o::
mi¸o£c⁄ds
>(
timeout
).
cou¡
());

446 
	gãm∂©e
<
ty≥«me
 
	gIt
>

447 
ölöe
 
size_t
 
waô_dequeue_bulk
(
It
 
ôemFú°
, size_à
max
)

449 
size_t
 
	gcou¡
 = 0;

450 
	gmax
 = (
size_t
)
£ma
->
waôM™y
((
LightweightSem≠h‹e
::
ssize_t
)(ssize_t)
max
);

451 
	gcou¡
 !
max
) {

452 
cou¡
 +
ö√r
.
ãm∂©e
 
åy_dequeue_bulk
<
It
&>(
ôemFú°
, 
	gmax
 - 
	gcou¡
);

454  
	gcou¡
;

464 
	gãm∂©e
<
ty≥«me
 
	gIt
>

465 
ölöe
 
size_t
 
waô_dequeue_bulk_timed
(
It
 
ôemFú°
, size_à
max
, 
°d
::
öt64_t
 
timeout_u£cs
)

467 
size_t
 
cou¡
 = 0;

468 
	gmax
 = (
size_t
)
£ma
->
waôM™y
((
LightweightSem≠h‹e
::
ssize_t
)(ssize_t)
max
, 
timeout_u£cs
);

469 
	gcou¡
 !
max
) {

470 
cou¡
 +
ö√r
.
ãm∂©e
 
åy_dequeue_bulk
<
It
&>(
ôemFú°
, 
	gmax
 - 
	gcou¡
);

472  
	gcou¡
;

480 
	gãm∂©e
<
ty≥«me
 
	gIt
,Åy≥«mê
	gRï
,Åy≥«mê
	gPîiod
>

481 
ölöe
 
size_t
 
waô_dequeue_bulk_timed
(
It
 
ôemFú°
, size_à
max
, 
°d
::
chr⁄o
::
duøti⁄
<
Rï
, 
Pîiod
> c⁄°& 
timeout
)

483  
	gwaô_dequeue_bulk_timed
<
	gIt
&>(
	gôemFú°
, 
	gmax
, 
	g°d
::
chr⁄o
::
duøti⁄_ˇ°
<
°d
::chr⁄o::
mi¸o£c⁄ds
>(
timeout
).
cou¡
());

491 
	gãm∂©e
<
ty≥«me
 
	gIt
>

492 
ölöe
 
size_t
 
waô_dequeue_bulk
(
c⁄sumî_tokí_t
& 
tokí
, 
It
 
ôemFú°
, size_à
max
)

494 
size_t
 
	gcou¡
 = 0;

495 
	gmax
 = (
size_t
)
£ma
->
waôM™y
((
LightweightSem≠h‹e
::
ssize_t
)(ssize_t)
max
);

496 
	gcou¡
 !
max
) {

497 
cou¡
 +
ö√r
.
ãm∂©e
 
åy_dequeue_bulk
<
It
&>(
tokí
, 
	gôemFú°
, 
	gmax
 - 
	gcou¡
);

499  
	gcou¡
;

509 
	gãm∂©e
<
ty≥«me
 
	gIt
>

510 
ölöe
 
size_t
 
waô_dequeue_bulk_timed
(
c⁄sumî_tokí_t
& 
tokí
, 
It
 
ôemFú°
, size_à
max
, 
°d
::
öt64_t
 
timeout_u£cs
)

512 
size_t
 
cou¡
 = 0;

513 
	gmax
 = (
size_t
)
£ma
->
waôM™y
((
LightweightSem≠h‹e
::
ssize_t
)(ssize_t)
max
, 
timeout_u£cs
);

514 
	gcou¡
 !
max
) {

515 
cou¡
 +
ö√r
.
ãm∂©e
 
åy_dequeue_bulk
<
It
&>(
tokí
, 
	gôemFú°
, 
	gmax
 - 
	gcou¡
);

517  
	gcou¡
;

525 
	gãm∂©e
<
ty≥«me
 
	gIt
,Åy≥«mê
	gRï
,Åy≥«mê
	gPîiod
>

526 
ölöe
 
size_t
 
waô_dequeue_bulk_timed
(
c⁄sumî_tokí_t
& 
tokí
, 
It
 
ôemFú°
, size_à
max
, 
°d
::
chr⁄o
::
duøti⁄
<
Rï
, 
Pîiod
> c⁄°& 
timeout
)

528  
	gwaô_dequeue_bulk_timed
<
	gIt
&>(
	gtokí
, 
	gôemFú°
, 
	gmax
, 
	g°d
::
chr⁄o
::
duøti⁄_ˇ°
<
°d
::chr⁄o::
mi¸o£c⁄ds
>(
timeout
).
cou¡
());

538 
ölöe
 
size_t
 
size_≠¥ox
() const

540  (
	gsize_t
)
	g£ma
->
avaûabÀAµrox
();

547 
boﬁ
 
is_lock_‰ì
()

549  
	gC⁄cuºítQueue
::
is_lock_‰ì
();

553 
	g¥iv©e
:

554 
ãm∂©e
<
ty≥«me
 
U
,Åy≥«mê
	gA1
,Åy≥«mê
	gA2
>

555 
ölöe
 
U
* 
¸óã
(
A1
&& 
a1
, 
A2
&& 
a2
)

557 * 
	gp
 = (
Tøôs
::
mÆloc
)((
U
));

558  
	gp
 !
nuŒ±r
 ? 
√w
 (
p
Ë
U
(
°d
::
f‹w¨d
<
A1
>(
a1
), std::f‹w¨d<
A2
>(
a2
)) :Çullptr;

561 
	gãm∂©e
<
ty≥«me
 
	gU
>

562 
ölöe
 
de°roy
(
U
* 
p
)

564 i‡(
	gp
 !
nuŒ±r
) {

565 
p
->~
U
();

567 (
	gTøôs
::
‰ì
)(
p
);

570 
	g¥iv©e
:

571 
C⁄cuºítQueue
 
ö√r
;

572 
	g°d
::
unique_±r
<
LightweightSem≠h‹e
, (*)(
	gLightweightSem≠h‹e
*)> 
	g£ma
;

576 
	gãm∂©e
<
ty≥«me
 
	gT
,Åy≥«mê
	gTøôs
>

577 
ölöe
 
sw≠
(
BlockögC⁄cuºítQueue
<
T
, 
Tøôs
>& 
a
, BlockögC⁄cuºítQueue<T, Tøôs>& 
b
Ë
	gMOODYCAMEL_NOEXCEPT


579 
	ga
.
sw≠
(
b
);

	@viper/concurrentqueue-src/build/msvc12/msvc_tbb_stubs.cpp

1 
	~"tbb/tbb_maö.h
"

2 
	~"tbb/ôt_nŸify.h
"

4 
	~<©omic
>

6 
«me•a˚
 
	gtbb
 {

7 
«me•a˚
 
	göã∫Æ
 {

10 
ˇŒ_ôt_nŸify_v5
(, * ) {}

12 
ôt_°‹e_poöãr_wôh_ªÀa£_v3
(* 
d°
, * 
§c
) {

13 
ITT_NOTIFY
(
sync_ªÀasög
, 
d°
);

14 
__TBB_°‹e_wôh_ªÀa£
(*
°©ic_ˇ°
<**>(
d°
), 
§c
);

20 #ifde‡
_WIN64


21 
__öt8
 
__TBB_machöe_cmpswp1
(vﬁ©ûê*
±r
, __öt8 
vÆue
, __öt8 
com∑ønd
) {

22  
_I¡îlockedCom∑ªExch™ge8
((
__öt8
*)
±r
, 
vÆue
, 
com∑ønd
);

27 
__öt64
 
__TBB_machöe_cmpswp8
(vﬁ©ûê*
±r
, __öt64 
vÆue
, __öt64 
com∑ønd
) {

28  
_I¡îlockedCom∑ªExch™ge64
((
__öt64
*)
±r
, 
vÆue
, 
com∑ønd
);

	@viper/concurrentqueue-src/build/msvc14/msvc_tbb_stubs.cpp

1 
	~"tbb/tbb_maö.h
"

2 
	~"tbb/ôt_nŸify.h
"

4 
	~<©omic
>

6 
«me•a˚
 
	gtbb
 {

7 
«me•a˚
 
	göã∫Æ
 {

10 
ˇŒ_ôt_nŸify_v5
(, * ) {}

12 
ôt_°‹e_poöãr_wôh_ªÀa£_v3
(* 
d°
, * 
§c
) {

13 
ITT_NOTIFY
(
sync_ªÀasög
, 
d°
);

14 
__TBB_°‹e_wôh_ªÀa£
(*
°©ic_ˇ°
<**>(
d°
), 
§c
);

20 #ifde‡
_WIN64


21 
__öt8
 
__TBB_machöe_cmpswp1
(vﬁ©ûê*
±r
, __öt8 
vÆue
, __öt8 
com∑ønd
) {

22  
_I¡îlockedCom∑ªExch™ge8
((
__öt8
*)
±r
, 
vÆue
, 
com∑ønd
);

27 
__öt64
 
__TBB_machöe_cmpswp8
(vﬁ©ûê*
±r
, __öt64 
vÆue
, __öt64 
com∑ønd
) {

28  
_I¡îlockedCom∑ªExch™ge64
((
__öt64
*)
±r
, 
vÆue
, 
com∑ønd
);

	@viper/concurrentqueue-src/build/msvc15/msvc_tbb_stubs.cpp

1 
	~"tbb/tbb_maö.h
"

2 
	~"tbb/ôt_nŸify.h
"

4 
	~<©omic
>

6 
«me•a˚
 
	gtbb
 {

7 
«me•a˚
 
	göã∫Æ
 {

10 
ˇŒ_ôt_nŸify_v5
(, * ) {}

12 
ôt_°‹e_poöãr_wôh_ªÀa£_v3
(* 
d°
, * 
§c
) {

13 
ITT_NOTIFY
(
sync_ªÀasög
, 
d°
);

14 
__TBB_°‹e_wôh_ªÀa£
(*
°©ic_ˇ°
<**>(
d°
), 
§c
);

20 #ifde‡
_WIN64


21 
__öt8
 
__TBB_machöe_cmpswp1
(vﬁ©ûê*
±r
, __öt8 
vÆue
, __öt8 
com∑ønd
) {

22  
_I¡îlockedCom∑ªExch™ge8
((
__öt8
*)
±r
, 
vÆue
, 
com∑ønd
);

27 
__öt64
 
__TBB_machöe_cmpswp8
(vﬁ©ûê*
±r
, __öt64 
vÆue
, __öt64 
com∑ønd
) {

28  
_I¡îlockedCom∑ªExch™ge64
((
__öt64
*)
±r
, 
vÆue
, 
com∑ønd
);

	@viper/concurrentqueue-src/build/msvc16/msvc_tbb_stubs.cpp

1 
	~"tbb/tbb_maö.h
"

2 
	~"tbb/ôt_nŸify.h
"

4 
	~<©omic
>

6 
«me•a˚
 
	gtbb
 {

7 
«me•a˚
 
	göã∫Æ
 {

10 
ˇŒ_ôt_nŸify_v5
(, * ) {}

12 
ôt_°‹e_poöãr_wôh_ªÀa£_v3
(* 
d°
, * 
§c
) {

13 
ITT_NOTIFY
(
sync_ªÀasög
, 
d°
);

14 
__TBB_°‹e_wôh_ªÀa£
(*
°©ic_ˇ°
<**>(
d°
), 
§c
);

20 #ifde‡
_WIN64


21 
__öt8
 
__TBB_machöe_cmpswp1
(vﬁ©ûê*
±r
, __öt8 
vÆue
, __öt8 
com∑ønd
) {

22  
_I¡îlockedCom∑ªExch™ge8
((
__öt8
*)
±r
, 
vÆue
, 
com∑ønd
);

27 
__öt64
 
__TBB_machöe_cmpswp8
(vﬁ©ûê*
±r
, __öt64 
vÆue
, __öt64 
com∑ønd
) {

28  
_I¡îlockedCom∑ªExch™ge64
((
__öt64
*)
±r
, 
vÆue
, 
com∑ønd
);

	@viper/concurrentqueue-src/c_api/blockingconcurrentqueue.cpp

1 
	~"c⁄cuºítqueue.h
"

2 
	~"../blockögc⁄cuºítqueue.h
"

4 
	gmoodyˇmñ
::
	tBlockögC⁄cuºítQueue
<*> 
	tMoodyˇmñBCQTy≥
, *
	tMoodyˇmñBCQPå
;

8 
moodyˇmñ_bcq_¸óã
(
MoodyˇmñBCQH™dÀ
* 
h™dÀ
)

10 
MoodyˇmñBCQPå
 
ªtvÆ
 = 
√w
 
MoodyˇmñBCQTy≥
;

11 i‡(
ªtvÆ
 =
nuŒ±r
) {

14 *
h™dÀ
 = 
ªtvÆ
;

18 
moodyˇmñ_bcq_de°roy
(
MoodyˇmñBCQH™dÀ
 
h™dÀ
)

20 
dñëe
 
ªöãΩªt_ˇ°
<
MoodyˇmñBCQPå
>(
h™dÀ
);

24 
moodyˇmñ_bcq_íqueue
(
MoodyˇmñBCQH™dÀ
 
h™dÀ
, 
MoodyˇmñVÆue
 
vÆue
)

26  
ªöãΩªt_ˇ°
<
MoodyˇmñBCQPå
>(
h™dÀ
)->
íqueue
(
vÆue
) ? 1 : 0;

29 
moodyˇmñ_bcq_waô_dequeue
(
MoodyˇmñBCQH™dÀ
 
h™dÀ
, 
MoodyˇmñVÆue
* 
vÆue
)

31 
ªöãΩªt_ˇ°
<
MoodyˇmñBCQPå
>(
h™dÀ
)->
waô_dequeue
(*
vÆue
);

35 
moodyˇmñ_bcq_åy_dequeue
(
MoodyˇmñBCQH™dÀ
 
h™dÀ
, 
MoodyˇmñVÆue
* 
vÆue
)

37  
ªöãΩªt_ˇ°
<
MoodyˇmñBCQPå
>(
h™dÀ
)->
åy_dequeue
(*
vÆue
) ? 1 : 0;

	@viper/concurrentqueue-src/c_api/concurrentqueue.cpp

1 
	~"c⁄cuºítqueue.h
"

2 
	~"../c⁄cuºítqueue.h
"

4 
	gmoodyˇmñ
::
	tC⁄cuºítQueue
<*> 
	tMoodyˇmñCQTy≥
, *
	tMoodyˇmñCQPå
;

8 
moodyˇmñ_cq_¸óã
(
MoodyˇmñCQH™dÀ
* 
h™dÀ
)

10 
MoodyˇmñCQPå
 
ªtvÆ
 = 
√w
 
MoodyˇmñCQTy≥
;

11 i‡(
ªtvÆ
 =
nuŒ±r
) {

14 *
h™dÀ
 = 
ªtvÆ
;

18 
moodyˇmñ_cq_de°roy
(
MoodyˇmñCQH™dÀ
 
h™dÀ
)

20 
dñëe
 
ªöãΩªt_ˇ°
<
MoodyˇmñCQPå
>(
h™dÀ
);

24 
moodyˇmñ_cq_íqueue
(
MoodyˇmñCQH™dÀ
 
h™dÀ
, 
MoodyˇmñVÆue
 
vÆue
)

26  
ªöãΩªt_ˇ°
<
MoodyˇmñCQPå
>(
h™dÀ
)->
íqueue
(
vÆue
) ? 1 : 0;

29 
moodyˇmñ_cq_åy_dequeue
(
MoodyˇmñCQH™dÀ
 
h™dÀ
, 
MoodyˇmñVÆue
* 
vÆue
)

31  
ªöãΩªt_ˇ°
<
MoodyˇmñCQPå
>(
h™dÀ
)->
åy_dequeue
(*
vÆue
) ? 1 : 0;

	@viper/concurrentqueue-src/c_api/concurrentqueue.h

1 #¥agm®
⁄˚


3 #ifde‡
__˝lu•lus


7 #i‚de‡
MOODYCAMEL_EXPORT


8 #ifde‡
_WIN32


9 #i‡
deföed
(
MOODYCAMEL_STATIC
)

10 
	#MOODYCAMEL_EXPORT


	)

11 #ñi‡
deföed
(
DLL_EXPORT
)

12 
	#MOODYCAMEL_EXPORT
 
	`__de˛•ec
(
dŒexp‹t
)

	)

14 
	#MOODYCAMEL_EXPORT
 
	`__de˛•ec
(
dŒimp‹t
)

	)

18 
	#MOODYCAMEL_EXPORT


	)

21 * 
	tMoodyˇmñCQH™dÀ
;

22 * 
	tMoodyˇmñBCQH™dÀ
;

23 * 
	tMoodyˇmñVÆue
;

25 
MOODYCAMEL_EXPORT
 
moodyˇmñ_cq_¸óã
(
MoodyˇmñCQH™dÀ
* 
h™dÀ
);

26 
MOODYCAMEL_EXPORT
 
moodyˇmñ_cq_de°roy
(
MoodyˇmñCQH™dÀ
 
h™dÀ
);

27 
MOODYCAMEL_EXPORT
 
moodyˇmñ_cq_íqueue
(
MoodyˇmñCQH™dÀ
 
h™dÀ
, 
MoodyˇmñVÆue
 
vÆue
);

28 
MOODYCAMEL_EXPORT
 
moodyˇmñ_cq_åy_dequeue
(
MoodyˇmñCQH™dÀ
 
h™dÀ
, 
MoodyˇmñVÆue
* 
vÆue
);

30 
MOODYCAMEL_EXPORT
 
moodyˇmñ_bcq_¸óã
(
MoodyˇmñBCQH™dÀ
* 
h™dÀ
);

31 
MOODYCAMEL_EXPORT
 
moodyˇmñ_bcq_de°roy
(
MoodyˇmñBCQH™dÀ
 
h™dÀ
);

32 
MOODYCAMEL_EXPORT
 
moodyˇmñ_bcq_íqueue
(
MoodyˇmñBCQH™dÀ
 
h™dÀ
, 
MoodyˇmñVÆue
 
vÆue
);

33 
MOODYCAMEL_EXPORT
 
moodyˇmñ_bcq_waô_dequeue
(
MoodyˇmñBCQH™dÀ
 
h™dÀ
, 
MoodyˇmñVÆue
* 
vÆue
);

34 
MOODYCAMEL_EXPORT
 
moodyˇmñ_bcq_åy_dequeue
(
MoodyˇmñBCQH™dÀ
 
h™dÀ
, 
MoodyˇmñVÆue
* 
vÆue
);

36 #ifde‡
__˝lu•lus


	@viper/concurrentqueue-src/concurrentqueue.h

32 #¥agm®
⁄˚


34 #i‡
deföed
(
__GNUC__
)

38 #¥agm®
GCC
 
dügno°ic
 
push


39 #¥agm®
GCC
 
dügno°ic
 
ign‹ed
 "-Wconversion"

41 #ifde‡
MCDBGQ_USE_RELACY


42 #¥agm®
GCC
 
dügno°ic
 
ign‹ed
 "-Wint-to-pointer-cast"

46 #i‡
deföed
(
_MSC_VER
Ë&& (!deföed(
_HAS_CXX17
) || !_HAS_CXX17)

49 #¥agm®
w¨nög
(
push
)

50 #¥agm®
w¨nög
(
dißbÀ
: 4127)

53 #i‡
deföed
(
__APPLE__
)

54 
	~"T¨gëC⁄dôi⁄Æs.h
"

57 #ifde‡
MCDBGQ_USE_RELACY


58 
	~"ªœcy/ªœcy_°d.hµ
"

59 
	~"ªœcy_shims.h
"

62 #unde‡
√w


63 #unde‡
dñëe


64 #unde‡
mÆloc


65 #unde‡
‰ì


67 
	~<©omic
>

68 
	~<ˇs£π
>

70 
	~<c°ddef
>

71 
	~<c°döt
>

72 
	~<c°dlib
>

73 
	~<ty≥_åaôs
>

74 
	~<Æg‹ôhm
>

75 
	~<utûôy
>

76 
	~<limôs
>

77 
	~<˛imôs
>

78 
	~<¨øy
>

79 
	~<thªad
>

82 
«me•a˚
 
	gmoodyˇmñ
 {Çame•a˚ 
	gdëaûs
 {

83 
	gãm∂©e
<
ty≥«me
 
	gthªad_id_t
> 
	sthªad_id_c⁄vîãr
 {

84 
thªad_id_t
 
	tthªad_id_numîic_size_t
;

85 
thªad_id_t
 
	tthªad_id_hash_t
;

86 
thªad_id_hash_t
 
¥ehash
(
thªad_id_t
 c⁄°& 
x
Ë{  
	gx
; }

89 #i‡
deföed
(
MCDBGQ_USE_RELACY
)

90 
«me•a˚
 
	gmoodyˇmñ
 {Çame•a˚ 
	gdëaûs
 {

91 
	g°d
::
	tuöt32_t
 
	tthªad_id_t
;

92 c⁄° 
thªad_id_t
 
	gövÆid_thªad_id
 = 0xFFFFFFFFU;

93 c⁄° 
thªad_id_t
 
	gövÆid_thªad_id2
 = 0xFFFFFFFEU;

94 
ölöe
 
thªad_id_t
 
thªad_id
(Ë{  
	gæ
::
thªad_ödex
(); }

96 #ñi‡
deföed
(
_WIN32
Ë|| deföed(
__WINDOWS__
Ë|| deföed(
__WIN32__
)

99 "C" 
	$__de˛•ec
(
dŒimp‹t
Ë
__°dˇŒ
 
	`GëCuºítThªadId
();

100 
«me•a˚
 
moodyˇmñ
 {Çame•a˚ 
dëaûs
 {

101 
	`°©ic_as£π
((Ë=(
°d
::
uöt32_t
), "Expected size of unsignedÜongÅo be 32 bits on Windows");

102 
°d
::
	tuöt32_t
 
	tthªad_id_t
;

103 c⁄° 
thªad_id_t
 
övÆid_thªad_id
 = 0;

104 c⁄° 
thªad_id_t
 
övÆid_thªad_id2
 = 0xFFFFFFFFU;

105 
ölöe
 
thªad_id_t
 
	`thªad_id
(Ë{  
°©ic_ˇ°
<thªad_id_t>(::
	`GëCuºítThªadId
()); }

106 } 
	}
}

107 #ñi‡
deföed
(
__¨m__
Ë|| deföed(
_M_ARM
Ë|| deföed(
__Ørch64__
Ë|| (deföed(
__APPLE__
Ë&& 
TARGET_OS_IPHONE
)

108 
«me•a˚
 
	gmoodyˇmñ
 {Çame•a˚ 
	gdëaûs
 {

109 
°©ic_as£π
((
°d
::
thªad
::
id
) == 4 || (std::thread::id) == 8, "std::thread::id isÉxpectedÅo beÉither 4 or 8 bytes");

111 
	g°d
::
	tthªad
::
	tid
 
	tthªad_id_t
;

112 c⁄° 
thªad_id_t
 
	gövÆid_thªad_id
;

117 
ölöe
 
thªad_id_t
 
thªad_id
(Ë{  
	g°d
::
this_thªad
::
gë_id
(); }

119 
	gãm∂©e
<
	g°d
::
size_t
> 
	sthªad_id_size
 { };

120 
	gãm∂©e
<> 
	gthªad_id_size
<4> { 
	g°d
::
	tuöt32_t
 
	tnumîic_t
; };

121 
	gãm∂©e
<> 
	gthªad_id_size
<8> { 
	g°d
::
	tuöt64_t
 
	tnumîic_t
; };

123 
	gãm∂©e
<> 
	gthªad_id_c⁄vîãr
<
	gthªad_id_t
> {

124 
	gthªad_id_size
<(
	tthªad_id_t
)>::
	tnumîic_t
 
	tthªad_id_numîic_size_t
;

125 #i‚de‡
__APPLE__


126 
	g°d
::
	tsize_t
 
	tthªad_id_hash_t
;

128 
thªad_id_numîic_size_t
 
	tthªad_id_hash_t
;

131 
thªad_id_hash_t
 
¥ehash
(
thªad_id_t
 c⁄°& 
x
)

133 #i‚de‡
__APPLE__


134  
	g°d
::
hash
<
°d
::
thªad
::
id
>()(
x
);

136  *
	gªöãΩªt_ˇ°
<
thªad_id_hash_t
 c⁄°*>(&
	gx
);

145 #i‡
deföed
(
__GNUC__
Ë|| deföed(
__INTEL_COMPILER
)

146 
	#MOODYCAMEL_THREADLOCAL
 
__thªad


	)

147 #ñi‡
deföed
(
_MSC_VER
)

148 
	#MOODYCAMEL_THREADLOCAL
 
	`__de˛•ec
(
thªad
)

	)

151 
	#MOODYCAMEL_THREADLOCAL
 
thªad_loˇl


	)

153 
«me•a˚
 
	gmoodyˇmñ
 {Çame•a˚ 
	gdëaûs
 {

154 
	g°d
::
	tuöçå_t
 
	tthªad_id_t
;

155 c⁄° 
thªad_id_t
 
	gövÆid_thªad_id
 = 0;

156 c⁄° 
thªad_id_t
 
	gövÆid_thªad_id2
 = 1;

157 
ölöe
 
thªad_id_t
 
thªad_id
(Ë{ 
MOODYCAMEL_THREADLOCAL
 
	gx
;  
	gªöãΩªt_ˇ°
<
	gthªad_id_t
>(&x); }

162 #i‚de‡
MOODYCAMEL_CONSTEXPR_IF


163 #i‡(
deföed
(
_MSC_VER
Ë&& deföed(
_HAS_CXX17
Ë&& _HAS_CXX17Ë|| 
__˝lu•lus
 > 201402L

164 
	#MOODYCAMEL_CONSTEXPR_IF
 
c⁄°ex¥


	)

165 
	#MOODYCAMEL_MAYBE_UNUSED
 [[
maybe_unu£d
]]

	)

167 
	#MOODYCAMEL_CONSTEXPR_IF
 

	)

168 
	#MOODYCAMEL_MAYBE_UNUSED


	)

173 #i‚de‡
MOODYCAMEL_EXCEPTIONS_ENABLED


174 #i‡(
deföed
(
_MSC_VER
Ë&& deföed(
_CPPUNWIND
)Ë|| (deföed(
__GNUC__
Ë&& deföed(
__EXCEPTIONS
)) || (!defined(_MSC_VER) && !defined(__GNUC__))

175 
	#MOODYCAMEL_EXCEPTIONS_ENABLED


	)

178 #ifde‡
MOODYCAMEL_EXCEPTIONS_ENABLED


179 
	#MOODYCAMEL_TRY
 
åy


	)

180 
	#MOODYCAMEL_CATCH
(...Ë
	`ˇtch
(
__VA_ARGS__
)

	)

181 
	#MOODYCAMEL_RETHROW
 
throw


	)

182 
	#MOODYCAMEL_THROW
(
ex¥
Ë
	`throw
 (ex¥)

	)

184 
	#MOODYCAMEL_TRY
 
	`MOODYCAMEL_CONSTEXPR_IF
 (
åue
)

	)

185 
	#MOODYCAMEL_CATCH
(...Ë
	`MOODYCAMEL_CONSTEXPR_IF
 (
Ál£
)

	)

186 
	#MOODYCAMEL_RETHROW


	)

187 
	#MOODYCAMEL_THROW
(
ex¥
)

	)

190 #i‚de‡
MOODYCAMEL_NOEXCEPT


191 #i‡!
deföed
(
MOODYCAMEL_EXCEPTIONS_ENABLED
)

192 
	#MOODYCAMEL_NOEXCEPT


	)

193 
	#MOODYCAMEL_NOEXCEPT_CTOR
(
ty≥
, 
vÆueTy≥
, 
ex¥
Ë
åue


	)

194 
	#MOODYCAMEL_NOEXCEPT_ASSIGN
(
ty≥
, 
vÆueTy≥
, 
ex¥
Ë
åue


	)

195 #ñi‡
deföed
(
_MSC_VER
Ë&& deföed(
_NOEXCEPT
) && _MSC_VER < 1800

198 
	#MOODYCAMEL_NOEXCEPT
 
_NOEXCEPT


	)

199 
	#MOODYCAMEL_NOEXCEPT_CTOR
(
ty≥
, 
vÆueTy≥
, 
ex¥
Ë(
°d
::
is_rvÆue_ª„ªn˚
<vÆueTy≥>::
vÆue
 && std::
is_move_c⁄°ru˘ibÀ
<ty≥>::vÆuê? std::
is_åivüŒy_move_c⁄°ru˘ibÀ
<ty≥>::vÆuê: std::
is_åivüŒy_c›y_c⁄°ru˘ibÀ
<ty≥>::vÆue)

	)

200 
	#MOODYCAMEL_NOEXCEPT_ASSIGN
(
ty≥
, 
vÆueTy≥
, 
ex¥
Ë((
°d
::
is_rvÆue_ª„ªn˚
<vÆueTy≥>::
vÆue
 && std::
is_move_assig«bÀ
<ty≥>::vÆuê? std::
is_åivüŒy_move_assig«bÀ
<ty≥>::vÆuê|| std::
is_nŸhrow_move_assig«bÀ
<ty≥>::vÆuê: std::
is_åivüŒy_c›y_assig«bÀ
<ty≥>::vÆuê|| std::
is_nŸhrow_c›y_assig«bÀ
<ty≥>::vÆueË&& 
	`MOODYCAMEL_NOEXCEPT_CTOR
—y≥, vÆueTy≥,Éx¥))

	)

201 #ñi‡
deföed
(
_MSC_VER
Ë&& deföed(
_NOEXCEPT
) && _MSC_VER < 1900

202 
	#MOODYCAMEL_NOEXCEPT
 
_NOEXCEPT


	)

203 
	#MOODYCAMEL_NOEXCEPT_CTOR
(
ty≥
, 
vÆueTy≥
, 
ex¥
Ë(
°d
::
is_rvÆue_ª„ªn˚
<vÆueTy≥>::
vÆue
 && std::
is_move_c⁄°ru˘ibÀ
<ty≥>::vÆuê? std::
is_åivüŒy_move_c⁄°ru˘ibÀ
<ty≥>::vÆuê|| std::
is_nŸhrow_move_c⁄°ru˘ibÀ
<ty≥>::vÆuê: std::
is_åivüŒy_c›y_c⁄°ru˘ibÀ
<ty≥>::vÆuê|| std::
is_nŸhrow_c›y_c⁄°ru˘ibÀ
<ty≥>::vÆue)

	)

204 
	#MOODYCAMEL_NOEXCEPT_ASSIGN
(
ty≥
, 
vÆueTy≥
, 
ex¥
Ë((
°d
::
is_rvÆue_ª„ªn˚
<vÆueTy≥>::
vÆue
 && std::
is_move_assig«bÀ
<ty≥>::vÆuê? std::
is_åivüŒy_move_assig«bÀ
<ty≥>::vÆuê|| std::
is_nŸhrow_move_assig«bÀ
<ty≥>::vÆuê: std::
is_åivüŒy_c›y_assig«bÀ
<ty≥>::vÆuê|| std::
is_nŸhrow_c›y_assig«bÀ
<ty≥>::vÆueË&& 
	`MOODYCAMEL_NOEXCEPT_CTOR
—y≥, vÆueTy≥,Éx¥))

	)

206 
	#MOODYCAMEL_NOEXCEPT
 
n€x˚±


	)

207 
	#MOODYCAMEL_NOEXCEPT_CTOR
(
ty≥
, 
vÆueTy≥
, 
ex¥
Ë
	`n€x˚±
”x¥)

	)

208 
	#MOODYCAMEL_NOEXCEPT_ASSIGN
(
ty≥
, 
vÆueTy≥
, 
ex¥
Ë
	`n€x˚±
”x¥)

	)

212 #i‚de‡
MOODYCAMEL_CPP11_THREAD_LOCAL_SUPPORTED


213 #ifde‡
MCDBGQ_USE_RELACY


214 
	#MOODYCAMEL_CPP11_THREAD_LOCAL_SUPPORTED


	)

219 #i‡(!
deföed
(
_MSC_VER
Ë|| _MSC_VER >1900Ë&& (!deföed(
__MINGW32__
Ë&& !deföed(
__MINGW64__
Ë|| !deföed(
__WINPTHREADS_VERSION
)Ë&& (!deföed(
__GNUC__
Ë|| __GNUC__ > 4 || (__GNUC__ =4 && 
__GNUC_MINOR__
 >8)Ë&& (!deföed(
__APPLE__
Ë|| !
TARGET_OS_IPHONE
Ë&& !deföed(
__¨m__
Ë&& !deföed(
_M_ARM
Ë&& !deföed(
__Ørch64__
)

228 #i‚de‡
MOODYCAMEL_DELETE_FUNCTION


229 #i‡
deföed
(
_MSC_VER
) && _MSC_VER < 1800

230 
	#MOODYCAMEL_DELETE_FUNCTION


	)

232 
	#MOODYCAMEL_DELETE_FUNCTION
 = 
dñëe


	)

236 
«me•a˚
 
	gmoodyˇmñ
 {Çame•a˚ 
	gdëaûs
 {

237 #i‚de‡
MOODYCAMEL_ALIGNAS


239 #i‡
deföed
(
_MSC_VER
) && _MSC_VER <= 1800

240 
	#MOODYCAMEL_ALIGNAS
(
Æignmít
Ë
	`__de˛•ec
(
	`Æign
◊lignmít))

	)

241 
	#MOODYCAMEL_ALIGNOF
(
obj
Ë
	`__Æignof
(obj)

	)

242 
	#MOODYCAMEL_ALIGNED_TYPE_LIKE
(
T
, 
obj
Ë
ty≥«me
 
dëaûs
::
Vs2013Alig√d
<
°d
::
Æignmít_of
<obj>::
vÆue
, T>::
ty≥


	)

243 
	gãm∂©e
<
	gAlign
, 
ty≥«me
 
	gT
> 
	sVs2013Alig√d
 { };

244 
	gãm∂©e
<
ty≥«me
 
	gT
> 
	gVs2013Alig√d
<1, T> { 
__de˛•ec
(
	tÆign
(1)Ë
	tT
 
	tty≥
; };

245 
	gãm∂©e
<
ty≥«me
 
	gT
> 
	gVs2013Alig√d
<2, T> { 
__de˛•ec
(
	tÆign
(2)Ë
	tT
 
	tty≥
; };

246 
	gãm∂©e
<
ty≥«me
 
	gT
> 
	gVs2013Alig√d
<4, T> { 
__de˛•ec
(
	tÆign
(4)Ë
	tT
 
	tty≥
; };

247 
	gãm∂©e
<
ty≥«me
 
	gT
> 
	gVs2013Alig√d
<8, T> { 
__de˛•ec
(
	tÆign
(8)Ë
	tT
 
	tty≥
; };

248 
	gãm∂©e
<
ty≥«me
 
	gT
> 
	gVs2013Alig√d
<16, T> { 
__de˛•ec
(
	tÆign
(16)Ë
	tT
 
	tty≥
; };

249 
	gãm∂©e
<
ty≥«me
 
	gT
> 
	gVs2013Alig√d
<32, T> { 
__de˛•ec
(
	tÆign
(32)Ë
	tT
 
	tty≥
; };

250 
	gãm∂©e
<
ty≥«me
 
	gT
> 
	gVs2013Alig√d
<64, T> { 
__de˛•ec
(
	tÆign
(64)Ë
	tT
 
	tty≥
; };

251 
	gãm∂©e
<
ty≥«me
 
	gT
> 
	gVs2013Alig√d
<128, T> { 
__de˛•ec
(
	tÆign
(128)Ë
	tT
 
	tty≥
; };

252 
	gãm∂©e
<
ty≥«me
 
	gT
> 
	gVs2013Alig√d
<256, T> { 
__de˛•ec
(
	tÆign
(256)Ë
	tT
 
	tty≥
; };

254 
	gãm∂©e
<
ty≥«me
 
	gT
> 
	sidítôy
 { 
T
 
	tty≥
; };

255 
	#MOODYCAMEL_ALIGNAS
(
Æignmít
Ë
	`Æig«s
◊lignmít)

	)

256 
	#MOODYCAMEL_ALIGNOF
(
obj
Ë
	`Æignof
(obj)

	)

257 
	#MOODYCAMEL_ALIGNED_TYPE_LIKE
(
T
, 
obj
Ë
	`Æig«s
(
	`Æignof
(obj)Ë
ty≥«me
 
dëaûs
::
idítôy
<T>::
ty≥


	)

266 
	#MOODYCAMEL_NO_TSAN


	)

267 #i‡
deföed
(
__has_„©uª
)

268 #i‡
__has_„©uª
(
thªad_ßnôizî
)

269 #unde‡
MOODYCAMEL_NO_TSAN


270 
	#MOODYCAMEL_NO_TSAN
 
	`__©åibuã__
((
	`no_ßnôize
("thªad")))

	)

275 
«me•a˚
 
	gmoodyˇmñ
 {Çame•a˚ 
	gdëaûs
 {

276 #i‡
deföed
(
__GNUC__
)

277 
ölöe
 
boﬁ
 (
likñy
)(boﬁ 
	gx
Ë{  
__buûtö_ex≥˘
((
x
), 
åue
); }

278 
ölöe
 
boﬁ
 (
u∆ikñy
)(boﬁ 
	gx
Ë{  
__buûtö_ex≥˘
((
x
), 
Ál£
); }

280 
ölöe
 
boﬁ
 (
likñy
)(boﬁ 
	gx
) {  x; }

281 
ölöe
 
boﬁ
 (
u∆ikñy
)(boﬁ 
	gx
) {  x; }

285 #ifde‡
MOODYCAMEL_QUEUE_INTERNAL_DEBUG


286 
	~"öã∫Æ/c⁄cuºítqueue_öã∫Æ_debug.h
"

289 
«me•a˚
 
	gmoodyˇmñ
 {

290 
«me•a˚
 
	gdëaûs
 {

291 
	gãm∂©e
<
ty≥«me
 
	gT
>

292 
	sc⁄°_numîic_max
 {

293 
°©ic_as£π
(
°d
::
is_öãgøl
<
T
>::
vÆue
, "const_numeric_max can only be used with integers");

294 c⁄° 
T
 
	gvÆue
 = 
°d
::
numîic_limôs
<T>::
is_sig√d


295 ? (
°©ic_ˇ°
<
T
>(1Ë<< ((TË* 
CHAR_BIT
 - 1)) - static_cast<T>(1)

296 : 
°©ic_ˇ°
<
T
>(-1);

299 #i‡
deföed
(
__GLIBCXX__
)

300 ::
max_Æign_t
 
	t°d_max_Æign_t
;

302 
	g°d
::
	tmax_Æign_t
 
	t°d_max_Æign_t
;

308 
°d_max_Æign_t
 
	gx
;

309 
	gy
;

310 * 
	gz
;

311 } 
	tmax_Æign_t
;

320 
	sC⁄cuºítQueueDeÁu…Tøôs


323 
	g°d
::
	tsize_t
 size_t;

335 
	g°d
::
	tsize_t
 
	tödex_t
;

342 c⁄° 
size_t
 
	gBLOCK_SIZE
 = 32;

349 c⁄° 
size_t
 
	gEXPLICIT_BLOCK_EMPTY_COUNTER_THRESHOLD
 = 32;

353 c⁄° 
size_t
 
	gEXPLICIT_INITIAL_INDEX_SIZE
 = 32;

357 c⁄° 
size_t
 
	gIMPLICIT_INITIAL_INDEX_SIZE
 = 32;

363 c⁄° 
size_t
 
	gINITIAL_IMPLICIT_PRODUCER_HASH_SIZE
 = 32;

368 c⁄° 
	g°d
::
uöt32_t
 
EXPLICIT_CONSUMER_CONSUMPTION_QUOTA_BEFORE_ROTATE
 = 256;

374 c⁄° 
size_t
 
	gMAX_SUBQUEUE_SIZE
 = 
dëaûs
::
c⁄°_numîic_max
<size_t>::
vÆue
;

380 c⁄° 
	gMAX_SEMA_SPINS
 = 10000;

383 #i‚de‡
MCDBGQ_USE_RELACY


386 #i‡
deföed
(
mÆloc
Ë|| deföed(
‰ì
)

389 
ölöe
 * 
WORKAROUND_mÆloc
(
size_t
 
size
Ë{  
mÆloc
(size); }

390 
ölöe
 
WORKAROUND_‰ì
(* 
±r
Ë{  
‰ì
(ptr); }

391 
ölöe
 * (
	gmÆloc
)(
size_t
 
	gsize
Ë{  
WORKAROUND_mÆloc
(
size
); }

392 
ölöe
 (
	g‰ì
)(* 
	g±r
Ë{  
WORKAROUND_‰ì
(
±r
); }

394 
ölöe
 * 
mÆloc
(
size_t
 
size
Ë{  
	g°d
::malloc(size); }

395 
ölöe
 
‰ì
(* 
±r
Ë{  
	g°d
::free(ptr); }

400 
ölöe
 * 
mÆloc
(
size_t
 
size
Ë{  
	gæ
::
æ_mÆloc
(size, 
$
); }

401 
ölöe
 
‰ì
(* 
±r
Ë{  
	gæ
::
æ_‰ì
’å, 
$
); }

413 
	gProdu˚rTokí
;

414 
	gC⁄sumîTokí
;

416 
	gãm∂©e
<
ty≥«me
 
	gT
,Åy≥«mê
	gTøôs
> 
˛ass
 
	gC⁄cuºítQueue
;

417 
	gãm∂©e
<
ty≥«me
 
	gT
,Åy≥«mê
	gTøôs
> 
˛ass
 
	gBlockögC⁄cuºítQueue
;

418 
˛ass
 
	gC⁄cuºítQueueTe°s
;

421 
«me•a˚
 
	gdëaûs


423 
	sC⁄cuºítQueueProdu˚rTy≥ÀssBa£


425 
C⁄cuºítQueueProdu˚rTy≥ÀssBa£
* 
	g√xt
;

426 
	g°d
::
©omic
<
boﬁ
> 
öa˘ive
;

427 
Produ˚rTokí
* 
	gtokí
;

429 
C⁄cuºítQueueProdu˚rTy≥ÀssBa£
()

430 : 
√xt
(
nuŒ±r
), 
öa˘ive
(
Ál£
), 
tokí
(nullptr)

435 
	gãm∂©e
<
boﬁ
 
	gu£32
> 
	s_hash_32_‹_64
 {

436 
ölöe
 
	g°d
::
uöt32_t
 
hash
(
°d
::uöt32_à
h
)

442 
h
 ^= h >> 16;

443 
	gh
 *= 0x85ebca6b;

444 
	gh
 ^
h
 >> 13;

445 
	gh
 *= 0xc2b2ae35;

446  
	gh
 ^ (h >> 16);

449 
	gãm∂©e
<> 
	g_hash_32_‹_64
<1> {

450 
ölöe
 
	g°d
::
uöt64_t
 
hash
(
°d
::uöt64_à
h
)

452 
h
 ^= h >> 33;

453 
	gh
 *= 0xff51afd7ed558ccd;

454 
	gh
 ^
h
 >> 33;

455 
	gh
 *= 0xc4ceb9fe1a85ec53;

456  
	gh
 ^ (h >> 33);

459 
	gãm∂©e
<
	g°d
::
size_t
 
size
> 
hash_32_‹_64
 : 
public
 
_hash_32_‹_64
<(size > 4)> { };

461 
ölöe
 
size_t
 
hash_thªad_id
(
thªad_id_t
 
id
)

463 
°©ic_as£π
((
thªad_id_t
) <= 8, "ExpectedáÖlatform whereÅhread IDsáreát most 64-bit values");

464  
	g°©ic_ˇ°
<
	gsize_t
>(
	ghash_32_‹_64
<(
	gthªad_id_c⁄vîãr
<
	gthªad_id_t
>::
thªad_id_hash_t
)>::
hash
(

465 
thªad_id_c⁄vîãr
<
thªad_id_t
>::
¥ehash
(
id
)));

468 
	gãm∂©e
<
ty≥«me
 
	gT
>

469 
ölöe
 
boﬁ
 
cúcuœr_Àss_th™
(
T
 
a
, T 
b
)

471 #ifde‡
_MSC_VER


472 #¥agm®
w¨nög
(
push
)

473 #¥agm®
w¨nög
(
dißbÀ
: 4554)

475 
°©ic_as£π
(
°d
::
is_öãgøl
<
T
>::
vÆue
 && !°d::
numîic_limôs
<T>::
is_sig√d
, "circular_less_than is intendedÅo be used only with unsigned integerÅypes");

476  
	g°©ic_ˇ°
<
	gT
>(
	ga
 - 
	gb
Ë> sètic_ˇ°<T>(°©ic_ˇ°<T>(1Ë<< sètic_ˇ°<T>((TË* 
	gCHAR_BIT
 - 1));

477 #ifde‡
_MSC_VER


478 #¥agm®
w¨nög
(
p›
)

482 
	gãm∂©e
<
ty≥«me
 
	gU
>

483 
ölöe
 * 
Æign_f‹
(* 
±r
)

485 c⁄° 
	g°d
::
size_t
 
Æignmít
 = 
°d
::
Æignmít_of
<
U
>::
vÆue
;

486  
	g±r
 + (
	gÆignmít
 - (
	gªöãΩªt_ˇ°
<
	g°d
::
uöçå_t
>(
±r
Ë% 
Æignmít
)) %álignment;

489 
	gãm∂©e
<
ty≥«me
 
	gT
>

490 
ölöe
 
T
 
˚û_to_pow_2
(T 
x
)

492 
°©ic_as£π
(
°d
::
is_öãgøl
<
T
>::
vÆue
 && !°d::
numîic_limôs
<T>::
is_sig√d
, "ceil_to_pow_2 is intendedÅo be used only with unsigned integerÅypes");

495 --
	gx
;

496 
	gx
 |
x
 >> 1;

497 
	gx
 |
x
 >> 2;

498 
	gx
 |
x
 >> 4;

499 
	g°d
::
size_t
 
i
 = 1; 
	gi
 < (
	gT
); i <<= 1) {

500 
x
 |x >> (
i
 << 3);

502 ++
	gx
;

503  
	gx
;

506 
	gãm∂©e
<
ty≥«me
 
	gT
>

507 
ölöe
 
sw≠_ªœxed
(
°d
::
©omic
<
T
>& 
À·
, std::©omic<T>& 
right
)

509 
T
 
ãmp
 = 
°d
::
move
(
À·
.
lﬂd
(°d::
mem‹y_‹dî_ªœxed
));

510 
	gÀ·
.
°‹e
(
°d
::
move
(
right
.
lﬂd
(°d::
mem‹y_‹dî_ªœxed
)), std::memory_order_relaxed);

511 
	gright
.
°‹e
(
°d
::
move
(
ãmp
), std::
mem‹y_‹dî_ªœxed
);

514 
	gãm∂©e
<
ty≥«me
 
	gT
>

515 
ölöe
 
T
 c⁄°& 
nomove
(T c⁄°& 
x
)

517  
	gx
;

520 
	gãm∂©e
<
boﬁ
 
	gE«bÀ
>

521 
	snomove_if


523 
	gãm∂©e
<
ty≥«me
 
	gT
>

524 
ölöe
 
T
 c⁄°& 
evÆ
(T c⁄°& 
x
)

526  
	gx
;

530 
	gãm∂©e
<>

531 
	gnomove_if
<
	gÁl£
>

533 
	gãm∂©e
<
ty≥«me
 
	gU
>

534 
ölöe
áutÿ
evÆ
(
U
&& 
x
)

535 -> 
de˛ty≥
(
°d
::
f‹w¨d
<
U
>(
x
))

537  
°d
::
f‹w¨d
<
U
>(
x
);

541 
	gãm∂©e
<
ty≥«me
 
	gIt
>

542 
ölöe
áutÿ
dîef_n€x˚±
(
It
& 
ô
Ë
	gMOODYCAMEL_NOEXCEPT
 -> 
de˛ty≥
(*it)

544  *
	gô
;

547 #i‡
deföed
(
__˛™g__
Ë|| !deföed(
__GNUC__
Ë|| __GNUC__ > 4 || (__GNUC__ =4 && 
__GNUC_MINOR__
 >= 8)

548 
	gãm∂©e
<
ty≥«me
 
	gT
> 
	gis_åivüŒy_de°ru˘ibÀ
 : 
°d
::
is_åivüŒy_de°ru˘ibÀ
<
T
> { };

550 
	gãm∂©e
<
ty≥«me
 
	gT
> 
	gis_åivüŒy_de°ru˘ibÀ
 : 
°d
::
has_åivül_de°ru˘‹
<
T
> { };

553 #ifde‡
MOODYCAMEL_CPP11_THREAD_LOCAL_SUPPORTED


554 #ifde‡
MCDBGQ_USE_RELACY


555 
RñacyThªadExôLi°íî
 
	tThªadExôLi°íî
;

556 
RñacyThªadExôNŸifõr
 
	tThªadExôNŸifõr
;

558 
	sThªadExôLi°íî


560 (*
	gˇŒback_t
)(*);

561 
ˇŒback_t
 
	gˇŒback
;

562 * 
	gu£rD©a
;

564 
ThªadExôLi°íî
* 
	g√xt
;

568 ˛as†
	cThªadExôNŸifõr


570 
	gpublic
:

571 
subs¸ibe
(
ThªadExôLi°íî
* 
li°íî
)

573 auto& 
ésIn°
 = 
ö°™˚
();

574 
	gli°íî
->
	g√xt
 = 
ésIn°
.
èû
;

575 
	gésIn°
.
	gèû
 = 
li°íî
;

578 
unsubs¸ibe
(
ThªadExôLi°íî
* 
li°íî
)

580 auto& 
	gésIn°
 = 
ö°™˚
();

581 
ThªadExôLi°íî
** 
	g¥ev
 = &
ésIn°
.
èû
;

582 autÿ
	g±r
 = 
ésIn°
.
èû
;Öå !
nuŒ±r
;Öå = 
±r
->
√xt
) {

583 i‡(
±r
 =
li°íî
) {

584 *
¥ev
 = 
±r
->
√xt
;

587 
	g¥ev
 = &
±r
->
√xt
;

591 
	g¥iv©e
:

592 
ThªadExôNŸifõr
(Ë: 
èû
(
nuŒ±r
) { }

593 
ThªadExôNŸifõr
(ThªadExôNŸifõ∏c⁄°&Ë
MOODYCAMEL_DELETE_FUNCTION
;

594 
	gThªadExôNŸifõr
& 
	g›î©‹
=(
ThªadExôNŸifõr
 c⁄°&Ë
MOODYCAMEL_DELETE_FUNCTION
;

596 ~
ThªadExôNŸifõr
()

599 
as£π
(
this
 =&
ö°™˚
() && "IfÅhisássert fails, youÜikely haveá buggy compiler! ChangeÅheÖreprocessor conditions suchÅhat MOODYCAMEL_CPP11_THREAD_LOCAL_SUPPORTED isÇoÜonger defined.");

600 autÿ
	g±r
 = 
èû
;Öå !
nuŒ±r
;Öå = 
±r
->
√xt
) {

601 
±r
->
ˇŒback
’å->
u£rD©a
);

606 
ölöe
 
	gThªadExôNŸifõr
& 
ö°™˚
()

608 
thªad_loˇl
 
ThªadExôNŸifõr
 
	gnŸifõr
;

609  
	gnŸifõr
;

612 
	g¥iv©e
:

613 
ThªadExôLi°íî
* 
èû
;

618 
	gãm∂©e
<
ty≥«me
 
	gT
> 
	s°©ic_is_lock_‰ì_num
 {Énum { 
	gvÆue
 = 0 }; };

619 
	gãm∂©e
<> 
	g°©ic_is_lock_‰ì_num
<sig√d > {Énum { 
	gvÆue
 = 
ATOMIC_CHAR_LOCK_FREE
 }; };

620 
	gãm∂©e
<> 
	g°©ic_is_lock_‰ì_num
<> {Énum { 
	gvÆue
 = 
ATOMIC_SHORT_LOCK_FREE
 }; };

621 
	gãm∂©e
<> 
	g°©ic_is_lock_‰ì_num
<> {Énum { 
	gvÆue
 = 
ATOMIC_INT_LOCK_FREE
 }; };

622 
	gãm∂©e
<> 
	g°©ic_is_lock_‰ì_num
<> {Énum { 
	gvÆue
 = 
ATOMIC_LONG_LOCK_FREE
 }; };

623 
	gãm∂©e
<> 
	g°©ic_is_lock_‰ì_num
<> {Énum { 
	gvÆue
 = 
ATOMIC_LLONG_LOCK_FREE
 }; };

624 
	gãm∂©e
<
ty≥«me
 
	gT
> 
	g°©ic_is_lock_‰ì
 : 
°©ic_is_lock_‰ì_num
<ty≥«mê
°d
::
make_sig√d
<
T
>::
ty≥
> { };

625 
	gãm∂©e
<> 
	g°©ic_is_lock_‰ì
<
	gboﬁ
> {Énum { 
	gvÆue
 = 
ATOMIC_BOOL_LOCK_FREE
 }; };

626 
	gãm∂©e
<
ty≥«me
 
	gU
> 
	g°©ic_is_lock_‰ì
<U*> {Énum { 
	gvÆue
 = 
ATOMIC_POINTER_LOCK_FREE
 }; };

630 
	sProdu˚rTokí


632 
	gãm∂©e
<
ty≥«me
 
	gT
,Åy≥«mê
	gTøôs
>

633 
ex∂icô
 
Produ˚rTokí
(
C⁄cuºítQueue
<
T
, 
Tøôs
>& 
queue
);

635 
	gãm∂©e
<
ty≥«me
 
	gT
,Åy≥«mê
	gTøôs
>

636 
ex∂icô
 
Produ˚rTokí
(
BlockögC⁄cuºítQueue
<
T
, 
Tøôs
>& 
queue
);

638 
Produ˚rTokí
(Produ˚rTokí&& 
Ÿhî
Ë
	gMOODYCAMEL_NOEXCEPT


639 : 
¥odu˚r
(
Ÿhî
.producer)

641 
Ÿhî
.
¥odu˚r
 = 
nuŒ±r
;

642 i‡(
	g¥odu˚r
 !
nuŒ±r
) {

643 
¥odu˚r
->
tokí
 = 
this
;

647 
ölöe
 
	gProdu˚rTokí
& 
	g›î©‹
=(
Produ˚rTokí
&& 
Ÿhî
Ë
MOODYCAMEL_NOEXCEPT


649 
sw≠
(
Ÿhî
);

650  *
	gthis
;

653 
sw≠
(
Produ˚rTokí
& 
Ÿhî
Ë
	gMOODYCAMEL_NOEXCEPT


655 
	g°d
::
sw≠
(
¥odu˚r
, 
Ÿhî
.producer);

656 i‡(
	g¥odu˚r
 !
nuŒ±r
) {

657 
¥odu˚r
->
tokí
 = 
this
;

659 i‡(
	gŸhî
.
	g¥odu˚r
 !
nuŒ±r
) {

660 
Ÿhî
.
¥odu˚r
->
tokí
 = &other;

672 
ölöe
 
boﬁ
 
vÆid
(Ëc⁄° {  
	g¥odu˚r
 !
nuŒ±r
; }

674 ~
Produ˚rTokí
()

676 i‡(
	g¥odu˚r
 !
nuŒ±r
) {

677 
¥odu˚r
->
tokí
 = 
nuŒ±r
;

678 
	g¥odu˚r
->
	göa˘ive
.
°‹e
(
åue
, 
°d
::
mem‹y_‹dî_ªÀa£
);

683 
Produ˚rTokí
(Produ˚rTokí c⁄°&Ë
	gMOODYCAMEL_DELETE_FUNCTION
;

684 
	gProdu˚rTokí
& 
	g›î©‹
=(
Produ˚rTokí
 c⁄°&Ë
MOODYCAMEL_DELETE_FUNCTION
;

686 
	g¥iv©e
:

687 
ãm∂©e
<
ty≥«me
 
T
,Åy≥«mê
	gTøôs
> 
‰õnd
 
˛ass
 
	gC⁄cuºítQueue
;

688 
‰õnd
 
˛ass
 
	gC⁄cuºítQueueTe°s
;

690 
	g¥Ÿe˘ed
:

691 
dëaûs
::
C⁄cuºítQueueProdu˚rTy≥ÀssBa£
* 
¥odu˚r
;

695 
	sC⁄sumîTokí


697 
	gãm∂©e
<
ty≥«me
 
	gT
,Åy≥«mê
	gTøôs
>

698 
ex∂icô
 
C⁄sumîTokí
(
C⁄cuºítQueue
<
T
, 
Tøôs
>& 
q
);

700 
	gãm∂©e
<
ty≥«me
 
	gT
,Åy≥«mê
	gTøôs
>

701 
ex∂icô
 
C⁄sumîTokí
(
BlockögC⁄cuºítQueue
<
T
, 
Tøôs
>& 
q
);

703 
C⁄sumîTokí
(C⁄sumîTokí&& 
Ÿhî
Ë
	gMOODYCAMEL_NOEXCEPT


704 : 
öôülOff£t
(
Ÿhî
.öôülOff£t), 
œ°KnownGlobÆOff£t
(Ÿhî.œ°KnownGlobÆOff£t), 
ôemsC⁄sumedFromCuºít
(Ÿhî.ôemsC⁄sumedFromCuºít), 
cuºítProdu˚r
(Ÿhî.cuºítProdu˚r), 
desúedProdu˚r
(other.desiredProducer)

708 
ölöe
 
	gC⁄sumîTokí
& 
	g›î©‹
=(
C⁄sumîTokí
&& 
Ÿhî
Ë
MOODYCAMEL_NOEXCEPT


710 
sw≠
(
Ÿhî
);

711  *
	gthis
;

714 
sw≠
(
C⁄sumîTokí
& 
Ÿhî
Ë
	gMOODYCAMEL_NOEXCEPT


716 
	g°d
::
sw≠
(
öôülOff£t
, 
Ÿhî
.initialOffset);

717 
	g°d
::
sw≠
(
œ°KnownGlobÆOff£t
, 
Ÿhî
.lastKnownGlobalOffset);

718 
	g°d
::
sw≠
(
ôemsC⁄sumedFromCuºít
, 
Ÿhî
.itemsConsumedFromCurrent);

719 
	g°d
::
sw≠
(
cuºítProdu˚r
, 
Ÿhî
.currentProducer);

720 
	g°d
::
sw≠
(
desúedProdu˚r
, 
Ÿhî
.desiredProducer);

724 
C⁄sumîTokí
(C⁄sumîTokí c⁄°&Ë
	gMOODYCAMEL_DELETE_FUNCTION
;

725 
	gC⁄sumîTokí
& 
	g›î©‹
=(
C⁄sumîTokí
 c⁄°&Ë
MOODYCAMEL_DELETE_FUNCTION
;

727 
	g¥iv©e
:

728 
ãm∂©e
<
ty≥«me
 
T
,Åy≥«mê
	gTøôs
> 
‰õnd
 
˛ass
 
	gC⁄cuºítQueue
;

729 
‰õnd
 
˛ass
 
	gC⁄cuºítQueueTe°s
;

731 
	g¥iv©e
:

732 
°d
::
uöt32_t
 
öôülOff£t
;

733 
	g°d
::
uöt32_t
 
œ°KnownGlobÆOff£t
;

734 
	g°d
::
uöt32_t
 
ôemsC⁄sumedFromCuºít
;

735 
	gdëaûs
::
C⁄cuºítQueueProdu˚rTy≥ÀssBa£
* 
cuºítProdu˚r
;

736 
	gdëaûs
::
C⁄cuºítQueueProdu˚rTy≥ÀssBa£
* 
desúedProdu˚r
;

741 
	gãm∂©e
<
ty≥«me
 
	gT
,Åy≥«mê
	gTøôs
>

742 
ölöe
 
sw≠
(
ty≥«me
 
C⁄cuºítQueue
<
T
, 
Tøôs
>::
Im∂icôProdu˚rKVP
& 
a
,Åy≥«mêC⁄cuºítQueue<T, Tøôs>::Im∂icôProdu˚rKVP& 
b
Ë
MOODYCAMEL_NOEXCEPT
;

745 
	gãm∂©e
<
ty≥«me
 
	gT
,Åy≥«mê
	gTøôs
 = 
C⁄cuºítQueueDeÁu…Tøôs
>

746 ˛as†
	cC⁄cuºítQueue


748 
public
:

749 ::
moodyˇmñ
::
	tProdu˚rTokí
 
	t¥odu˚r_tokí_t
;

750 ::
moodyˇmñ
::
	tC⁄sumîTokí
 
	tc⁄sumî_tokí_t
;

752 
ty≥«me
 
	tTøôs
::
	tödex_t
 index_t;

753 
ty≥«me
 
	tTøôs
::
	tsize_t
 size_t;

755 c⁄° 
size_t
 
	gBLOCK_SIZE
 = 
°©ic_ˇ°
<size_t>(
Tøôs
::
BLOCK_SIZE
);

756 c⁄° 
size_t
 
	gEXPLICIT_BLOCK_EMPTY_COUNTER_THRESHOLD
 = 
°©ic_ˇ°
<size_t>(
Tøôs
::
EXPLICIT_BLOCK_EMPTY_COUNTER_THRESHOLD
);

757 c⁄° 
size_t
 
	gEXPLICIT_INITIAL_INDEX_SIZE
 = 
°©ic_ˇ°
<size_t>(
Tøôs
::
EXPLICIT_INITIAL_INDEX_SIZE
);

758 c⁄° 
size_t
 
	gIMPLICIT_INITIAL_INDEX_SIZE
 = 
°©ic_ˇ°
<size_t>(
Tøôs
::
IMPLICIT_INITIAL_INDEX_SIZE
);

759 c⁄° 
size_t
 
	gINITIAL_IMPLICIT_PRODUCER_HASH_SIZE
 = 
°©ic_ˇ°
<size_t>(
Tøôs
::
INITIAL_IMPLICIT_PRODUCER_HASH_SIZE
);

760 c⁄° 
	g°d
::
uöt32_t
 
EXPLICIT_CONSUMER_CONSUMPTION_QUOTA_BEFORE_ROTATE
 = 
°©ic_ˇ°
<
°d
::uöt32_t>(
Tøôs
::EXPLICIT_CONSUMER_CONSUMPTION_QUOTA_BEFORE_ROTATE);

761 #ifde‡
_MSC_VER


762 #¥agm®
w¨nög
(
push
)

763 #¥agm®
w¨nög
(
dißbÀ
: 4307)

764 #¥agm®
w¨nög
(
dißbÀ
: 4309)

766 c⁄° 
size_t
 
	gMAX_SUBQUEUE_SIZE
 = (
dëaûs
::
c⁄°_numîic_max
<size_t>::
vÆue
 - 
°©ic_ˇ°
<size_t>(
Tøôs
::
MAX_SUBQUEUE_SIZE
Ë< 
BLOCK_SIZE
) ? details::const_numeric_max<size_t>::value : ((static_cast<size_t>(Traits::MAX_SUBQUEUE_SIZE) + (BLOCK_SIZE - 1)) / BLOCK_SIZE * BLOCK_SIZE);

767 #ifde‡
_MSC_VER


768 #¥agm®
w¨nög
(
p›
)

771 
°©ic_as£π
(!
°d
::
numîic_limôs
<
size_t
>::
is_sig√d
 && std::
is_öãgøl
<size_t>::
vÆue
, "Traits::size_t must beán unsigned integralÅype");

772 
°©ic_as£π
(!
°d
::
numîic_limôs
<
ödex_t
>::
is_sig√d
 && std::
is_öãgøl
<ödex_t>::
vÆue
, "Traits::index_t must beán unsigned integralÅype");

773 
°©ic_as£π
((
ödex_t
Ë>(
size_t
), "Traits::index_t must beátÜeastás wideás Traits::size_t");

774 
°©ic_as£π
((
BLOCK_SIZE
 > 1) && !(BLOCK_SIZE & (BLOCK_SIZE - 1)), "Traits::BLOCK_SIZE must beáÖower of 2 (andátÜeast 2)");

775 
°©ic_as£π
((
EXPLICIT_BLOCK_EMPTY_COUNTER_THRESHOLD
 > 1) && !(EXPLICIT_BLOCK_EMPTY_COUNTER_THRESHOLD & (EXPLICIT_BLOCK_EMPTY_COUNTER_THRESHOLD - 1)), "Traits::EXPLICIT_BLOCK_EMPTY_COUNTER_THRESHOLD must beáÖower of 2 (and greaterÅhan 1)");

776 
°©ic_as£π
((
EXPLICIT_INITIAL_INDEX_SIZE
 > 1) && !(EXPLICIT_INITIAL_INDEX_SIZE & (EXPLICIT_INITIAL_INDEX_SIZE - 1)), "Traits::EXPLICIT_INITIAL_INDEX_SIZE must beáÖower of 2 (and greaterÅhan 1)");

777 
°©ic_as£π
((
IMPLICIT_INITIAL_INDEX_SIZE
 > 1) && !(IMPLICIT_INITIAL_INDEX_SIZE & (IMPLICIT_INITIAL_INDEX_SIZE - 1)), "Traits::IMPLICIT_INITIAL_INDEX_SIZE must beáÖower of 2 (and greaterÅhan 1)");

778 
°©ic_as£π
((
INITIAL_IMPLICIT_PRODUCER_HASH_SIZE
 == 0) || !(INITIAL_IMPLICIT_PRODUCER_HASH_SIZE & (INITIAL_IMPLICIT_PRODUCER_HASH_SIZE - 1)), "Traits::INITIAL_IMPLICIT_PRODUCER_HASH_SIZE must beáÖower of 2");

779 
°©ic_as£π
(
INITIAL_IMPLICIT_PRODUCER_HASH_SIZE
 == 0 || INITIAL_IMPLICIT_PRODUCER_HASH_SIZE >= 1, "Traits::INITIAL_IMPLICIT_PRODUCER_HASH_SIZE must beátÜeast 1 (or 0Åo disable implicitÉnqueueing)");

781 
	gpublic
:

792 
ex∂icô
 
C⁄cuºítQueue
(
size_t
 
ˇ∑côy
 = 6 * 
BLOCK_SIZE
)

793 : 
¥odu˚rLi°Taû
(
nuŒ±r
),

794 
¥odu˚rCou¡
(0),

795 
öôülBlockPoﬁIndex
(0),

796 
√xtEx∂icôC⁄sumîId
(0),

797 
globÆEx∂icôC⁄sumîOff£t
(0)

799 
	gim∂icôProdu˚rHashResizeInProgªss
.
˛ór
(
°d
::
mem‹y_‹dî_ªœxed
);

800 
p›uœã_öôül_im∂icô_¥odu˚r_hash
();

801 
p›uœã_öôül_block_li°
(
ˇ∑côy
 / 
BLOCK_SIZE
 + ((capacity & (BLOCK_SIZE - 1)) == 0 ? 0 : 1));

803 #ifde‡
MOODYCAMEL_QUEUE_INTERNAL_DEBUG


808 
	gex∂icôProdu˚rs
.
°‹e
(
nuŒ±r
, 
°d
::
mem‹y_‹dî_ªœxed
);

809 
	gim∂icôProdu˚rs
.
°‹e
(
nuŒ±r
, 
°d
::
mem‹y_‹dî_ªœxed
);

816 
C⁄cuºítQueue
(
size_t
 
möC≠acôy
, size_à
maxEx∂icôProdu˚rs
, size_à
maxIm∂icôProdu˚rs
)

817 : 
¥odu˚rLi°Taû
(
nuŒ±r
),

818 
¥odu˚rCou¡
(0),

819 
öôülBlockPoﬁIndex
(0),

820 
√xtEx∂icôC⁄sumîId
(0),

821 
globÆEx∂icôC⁄sumîOff£t
(0)

823 
	gim∂icôProdu˚rHashResizeInProgªss
.
˛ór
(
°d
::
mem‹y_‹dî_ªœxed
);

824 
p›uœã_öôül_im∂icô_¥odu˚r_hash
();

825 
size_t
 
	gblocks
 = (((
möC≠acôy
 + 
BLOCK_SIZE
 - 1Ë/ BLOCK_SIZEË- 1Ë* (
maxEx∂icôProdu˚rs
 + 1Ë+ 2 * (maxEx∂icôProdu˚r†+ 
maxIm∂icôProdu˚rs
);

826 
p›uœã_öôül_block_li°
(
blocks
);

828 #ifde‡
MOODYCAMEL_QUEUE_INTERNAL_DEBUG


829 
	gex∂icôProdu˚rs
.
°‹e
(
nuŒ±r
, 
°d
::
mem‹y_‹dî_ªœxed
);

830 
	gim∂icôProdu˚rs
.
°‹e
(
nuŒ±r
, 
°d
::
mem‹y_‹dî_ªœxed
);

837 ~
C⁄cuºítQueue
()

840 autÿ
	g±r
 = 
¥odu˚rLi°Taû
.
lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
);

841 
	g±r
 !
nuŒ±r
) {

842 autÿ
√xt
 = 
±r
->
√xt_¥od
();

843 i‡(
	g±r
->
	gtokí
 !
nuŒ±r
) {

844 
±r
->
tokí
->
¥odu˚r
 = 
nuŒ±r
;

846 
de°roy
(
±r
);

847 
	g±r
 = 
√xt
;

851 
MOODYCAMEL_CONSTEXPR_IF
 (
INITIAL_IMPLICIT_PRODUCER_HASH_SIZE
 != 0) {

852 autÿ
hash
 = 
im∂icôProdu˚rHash
.
lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
);

853 
	ghash
 !
nuŒ±r
) {

854 autÿ
¥ev
 = 
hash
->prev;

855 i‡(
	g¥ev
 !
nuŒ±r
) {

856 
size_t
 
i
 = 0; 
	gi
 !
hash
->
ˇ∑côy
; ++i) {

857 
	ghash
->
	gíåõs
[
i
].~
Im∂icôProdu˚rKVP
();

859 
	ghash
->~
Im∂icôProdu˚rHash
();

860 (
	gTøôs
::
‰ì
)(
hash
);

862 
	ghash
 = 
¥ev
;

867 autÿ
	gblock
 = 
‰ìLi°
.
hód_unß„
();

868 
	gblock
 !
nuŒ±r
) {

869 autÿ
√xt
 = 
block
->
‰ìLi°Next
.
lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
);

870 i‡(
	gblock
->
	gdy«miˇŒyAŒoˇãd
) {

871 
de°roy
(
block
);

873 
	gblock
 = 
√xt
;

877 
de°roy_¨øy
(
öôülBlockPoﬁ
, 
öôülBlockPoﬁSize
);

881 
C⁄cuºítQueue
(C⁄cuºítQueuêc⁄°&Ë
	gMOODYCAMEL_DELETE_FUNCTION
;

882 
	gC⁄cuºítQueue
& 
	g›î©‹
=(
C⁄cuºítQueue
 c⁄°&Ë
MOODYCAMEL_DELETE_FUNCTION
;

890 
C⁄cuºítQueue
(C⁄cuºítQueue&& 
Ÿhî
Ë
	gMOODYCAMEL_NOEXCEPT


891 : 
¥odu˚rLi°Taû
(
Ÿhî
.¥odu˚rLi°Taû.
lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
)),

892 
¥odu˚rCou¡
(
Ÿhî
.¥odu˚rCou¡.
lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
)),

893 
öôülBlockPoﬁIndex
(
Ÿhî
.öôülBlockPoﬁIndex.
lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
)),

894 
öôülBlockPoﬁ
(
Ÿhî
.initialBlockPool),

895 
öôülBlockPoﬁSize
(
Ÿhî
.initialBlockPoolSize),

896 
‰ìLi°
(
°d
::
move
(
Ÿhî
.freeList)),

897 
√xtEx∂icôC⁄sumîId
(
Ÿhî
.√xtEx∂icôC⁄sumîId.
lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
)),

898 
globÆEx∂icôC⁄sumîOff£t
(
Ÿhî
.globÆEx∂icôC⁄sumîOff£t.
lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
))

901 
im∂icôProdu˚rHashResizeInProgªss
.
˛ór
(
°d
::
mem‹y_‹dî_ªœxed
);

902 
p›uœã_öôül_im∂icô_¥odu˚r_hash
();

903 
sw≠_im∂icô_¥odu˚r_hashes
(
Ÿhî
);

905 
	gŸhî
.
	g¥odu˚rLi°Taû
.
°‹e
(
nuŒ±r
, 
°d
::
mem‹y_‹dî_ªœxed
);

906 
	gŸhî
.
	g¥odu˚rCou¡
.
°‹e
(0, 
°d
::
mem‹y_‹dî_ªœxed
);

907 
	gŸhî
.
	g√xtEx∂icôC⁄sumîId
.
°‹e
(0, 
°d
::
mem‹y_‹dî_ªœxed
);

908 
	gŸhî
.
	gglobÆEx∂icôC⁄sumîOff£t
.
°‹e
(0, 
°d
::
mem‹y_‹dî_ªœxed
);

910 #ifde‡
MOODYCAMEL_QUEUE_INTERNAL_DEBUG


911 
	gex∂icôProdu˚rs
.
°‹e
(
Ÿhî
.
ex∂icôProdu˚rs
.
lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
), std::memory_order_relaxed);

912 
	gŸhî
.
	gex∂icôProdu˚rs
.
°‹e
(
nuŒ±r
, 
°d
::
mem‹y_‹dî_ªœxed
);

913 
	gim∂icôProdu˚rs
.
°‹e
(
Ÿhî
.
im∂icôProdu˚rs
.
lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
), std::memory_order_relaxed);

914 
	gŸhî
.
	gim∂icôProdu˚rs
.
°‹e
(
nuŒ±r
, 
°d
::
mem‹y_‹dî_ªœxed
);

917 
	gŸhî
.
	göôülBlockPoﬁIndex
.
°‹e
(0, 
°d
::
mem‹y_‹dî_ªœxed
);

918 
	gŸhî
.
	göôülBlockPoﬁSize
 = 0;

919 
	gŸhî
.
	göôülBlockPoﬁ
 = 
nuŒ±r
;

921 
ªown_¥odu˚rs
();

924 
ölöe
 
	gC⁄cuºítQueue
& 
	g›î©‹
=(
C⁄cuºítQueue
&& 
Ÿhî
Ë
MOODYCAMEL_NOEXCEPT


926  
sw≠_öã∫Æ
(
Ÿhî
);

934 
ölöe
 
sw≠
(
C⁄cuºítQueue
& 
Ÿhî
Ë
	gMOODYCAMEL_NOEXCEPT


936 
sw≠_öã∫Æ
(
Ÿhî
);

939 
	g¥iv©e
:

940 
C⁄cuºítQueue
& 
sw≠_öã∫Æ
(C⁄cuºítQueue& 
Ÿhî
)

942 i‡(
this
 =&
Ÿhî
) {

943  *
this
;

946 
	gdëaûs
::
sw≠_ªœxed
(
¥odu˚rLi°Taû
, 
Ÿhî
.producerListTail);

947 
	gdëaûs
::
sw≠_ªœxed
(
¥odu˚rCou¡
, 
Ÿhî
.producerCount);

948 
	gdëaûs
::
sw≠_ªœxed
(
öôülBlockPoﬁIndex
, 
Ÿhî
.initialBlockPoolIndex);

949 
	g°d
::
sw≠
(
öôülBlockPoﬁ
, 
Ÿhî
.initialBlockPool);

950 
	g°d
::
sw≠
(
öôülBlockPoﬁSize
, 
Ÿhî
.initialBlockPoolSize);

951 
	g‰ìLi°
.
sw≠
(
Ÿhî
.
‰ìLi°
);

952 
	gdëaûs
::
sw≠_ªœxed
(
√xtEx∂icôC⁄sumîId
, 
Ÿhî
.nextExplicitConsumerId);

953 
	gdëaûs
::
sw≠_ªœxed
(
globÆEx∂icôC⁄sumîOff£t
, 
Ÿhî
.globalExplicitConsumerOffset);

955 
sw≠_im∂icô_¥odu˚r_hashes
(
Ÿhî
);

957 
ªown_¥odu˚rs
();

958 
	gŸhî
.
ªown_¥odu˚rs
();

960 #ifde‡
MOODYCAMEL_QUEUE_INTERNAL_DEBUG


961 
	gdëaûs
::
sw≠_ªœxed
(
ex∂icôProdu˚rs
, 
Ÿhî
.explicitProducers);

962 
	gdëaûs
::
sw≠_ªœxed
(
im∂icôProdu˚rs
, 
Ÿhî
.implicitProducers);

965  *
	gthis
;

968 
	gpublic
:

974 
ölöe
 
boﬁ
 
íqueue
(
T
 c⁄°& 
ôem
)

976 
MOODYCAMEL_CONSTEXPR_IF
 (
INITIAL_IMPLICIT_PRODUCER_HASH_SIZE
 =0Ë 
Ál£
;

977  
	gö√r_íqueue
<
	gC™AŒoc
>(
	gôem
);

985 
ölöe
 
boﬁ
 
íqueue
(
T
&& 
ôem
)

987 
MOODYCAMEL_CONSTEXPR_IF
 (
INITIAL_IMPLICIT_PRODUCER_HASH_SIZE
 =0Ë 
Ál£
;

988  
	gö√r_íqueue
<
	gC™AŒoc
>(
	g°d
::
move
(
ôem
));

995 
ölöe
 
boﬁ
 
íqueue
(
¥odu˚r_tokí_t
 c⁄°& 
tokí
, 
T
 c⁄°& 
ôem
)

997  
	gö√r_íqueue
<
	gC™AŒoc
>(
	gtokí
, 
	gôem
);

1004 
ölöe
 
boﬁ
 
íqueue
(
¥odu˚r_tokí_t
 c⁄°& 
tokí
, 
T
&& 
ôem
)

1006  
	gö√r_íqueue
<
	gC™AŒoc
>(
	gtokí
, 
	g°d
::
move
(
ôem
));

1015 
	gãm∂©e
<
ty≥«me
 
	gIt
>

1016 
boﬁ
 
íqueue_bulk
(
It
 
ôemFú°
, 
size_t
 
cou¡
)

1018 
MOODYCAMEL_CONSTEXPR_IF
 (
INITIAL_IMPLICIT_PRODUCER_HASH_SIZE
 =0Ë 
Ál£
;

1019  
	gö√r_íqueue_bulk
<
	gC™AŒoc
>(
	gôemFú°
, 
	gcou¡
);

1028 
	gãm∂©e
<
ty≥«me
 
	gIt
>

1029 
boﬁ
 
íqueue_bulk
(
¥odu˚r_tokí_t
 c⁄°& 
tokí
, 
It
 
ôemFú°
, 
size_t
 
cou¡
)

1031  
	gö√r_íqueue_bulk
<
	gC™AŒoc
>(
	gtokí
, 
	gôemFú°
, 
	gcou¡
);

1039 
ölöe
 
boﬁ
 
åy_íqueue
(
T
 c⁄°& 
ôem
)

1041 
MOODYCAMEL_CONSTEXPR_IF
 (
INITIAL_IMPLICIT_PRODUCER_HASH_SIZE
 =0Ë 
Ál£
;

1042  
	gö√r_íqueue
<
	gC™nŸAŒoc
>(
	gôem
);

1050 
ölöe
 
boﬁ
 
åy_íqueue
(
T
&& 
ôem
)

1052 
MOODYCAMEL_CONSTEXPR_IF
 (
INITIAL_IMPLICIT_PRODUCER_HASH_SIZE
 =0Ë 
Ál£
;

1053  
	gö√r_íqueue
<
	gC™nŸAŒoc
>(
	g°d
::
move
(
ôem
));

1059 
ölöe
 
boﬁ
 
åy_íqueue
(
¥odu˚r_tokí_t
 c⁄°& 
tokí
, 
T
 c⁄°& 
ôem
)

1061  
	gö√r_íqueue
<
	gC™nŸAŒoc
>(
	gtokí
, 
	gôem
);

1067 
ölöe
 
boﬁ
 
åy_íqueue
(
¥odu˚r_tokí_t
 c⁄°& 
tokí
, 
T
&& 
ôem
)

1069  
	gö√r_íqueue
<
	gC™nŸAŒoc
>(
	gtokí
, 
	g°d
::
move
(
ôem
));

1079 
	gãm∂©e
<
ty≥«me
 
	gIt
>

1080 
boﬁ
 
åy_íqueue_bulk
(
It
 
ôemFú°
, 
size_t
 
cou¡
)

1082 
MOODYCAMEL_CONSTEXPR_IF
 (
INITIAL_IMPLICIT_PRODUCER_HASH_SIZE
 =0Ë 
Ál£
;

1083  
	gö√r_íqueue_bulk
<
	gC™nŸAŒoc
>(
	gôemFú°
, 
	gcou¡
);

1091 
	gãm∂©e
<
ty≥«me
 
	gIt
>

1092 
boﬁ
 
åy_íqueue_bulk
(
¥odu˚r_tokí_t
 c⁄°& 
tokí
, 
It
 
ôemFú°
, 
size_t
 
cou¡
)

1094  
	gö√r_íqueue_bulk
<
	gC™nŸAŒoc
>(
	gtokí
, 
	gôemFú°
, 
	gcou¡
);

1103 
	gãm∂©e
<
ty≥«me
 
	gU
>

1104 
boﬁ
 
åy_dequeue
(
U
& 
ôem
)

1108 
size_t
 
	gn⁄Em±yCou¡
 = 0;

1109 
Produ˚rBa£
* 
	gbe°
 = 
nuŒ±r
;

1110 
size_t
 
	gbe°Size
 = 0;

1111 autÿ
	g±r
 = 
¥odu˚rLi°Taû
.
lﬂd
(
°d
::
mem‹y_‹dî_acquúe
); 
	gn⁄Em±yCou¡
 < 3 &&Öå !
nuŒ±r
;Öå = 
±r
->
√xt_¥od
()) {

1112 autÿ
size
 = 
±r
->
size_≠¥ox
();

1113 i‡(
	gsize
 > 0) {

1114 i‡(
	gsize
 > 
	gbe°Size
) {

1115 
	gbe°Size
 = 
size
;

1116 
	gbe°
 = 
±r
;

1118 ++
	gn⁄Em±yCou¡
;

1124 i‡(
	gn⁄Em±yCou¡
 > 0) {

1125 i‡((
	gdëaûs
::
likñy
)(
be°
->
dequeue
(
ôem
))) {

1126  
åue
;

1128 autÿ
	g±r
 = 
¥odu˚rLi°Taû
.
lﬂd
(
°d
::
mem‹y_‹dî_acquúe
);Öå !
nuŒ±r
;Öå = 
±r
->
√xt_¥od
()) {

1129 i‡(
±r
 !
be°
 &&Öå->
dequeue
(
ôem
)) {

1130  
åue
;

1134  
	gÁl£
;

1146 
	gãm∂©e
<
ty≥«me
 
	gU
>

1147 
boﬁ
 
åy_dequeue_n⁄_öãæóved
(
U
& 
ôem
)

1149 autÿ
	g±r
 = 
¥odu˚rLi°Taû
.
lﬂd
(
°d
::
mem‹y_‹dî_acquúe
);Öå !
nuŒ±r
;Öå = 
±r
->
√xt_¥od
()) {

1150 i‡(
±r
->
dequeue
(
ôem
)) {

1151  
åue
;

1154  
	gÁl£
;

1161 
	gãm∂©e
<
ty≥«me
 
	gU
>

1162 
boﬁ
 
åy_dequeue
(
c⁄sumî_tokí_t
& 
tokí
, 
U
& 
ôem
)

1170 i‡(
	gtokí
.
	gdesúedProdu˚r
 =
nuŒ±r
 || 
tokí
.
œ°KnownGlobÆOff£t
 !
globÆEx∂icôC⁄sumîOff£t
.
lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
)) {

1171 i‡(!
upd©e_cuºít_¥odu˚r_a·î_rŸ©i⁄
(
tokí
)) {

1172  
Ál£
;

1178 i‡(
	g°©ic_ˇ°
<
	gProdu˚rBa£
*>(
	gtokí
.
	gcuºítProdu˚r
)->
dequeue
(
ôem
)) {

1179 i‡(++
	gtokí
.
	gôemsC⁄sumedFromCuºít
 =
EXPLICIT_CONSUMER_CONSUMPTION_QUOTA_BEFORE_ROTATE
) {

1180 
globÆEx∂icôC⁄sumîOff£t
.
„tch_add
(1, 
°d
::
mem‹y_‹dî_ªœxed
);

1182  
	gåue
;

1185 autÿ
	gèû
 = 
¥odu˚rLi°Taû
.
lﬂd
(
°d
::
mem‹y_‹dî_acquúe
);

1186 autÿ
	g±r
 = 
°©ic_ˇ°
<
Produ˚rBa£
*>(
tokí
.
cuºítProdu˚r
)->
√xt_¥od
();

1187 i‡(
	g±r
 =
nuŒ±r
) {

1188 
±r
 = 
èû
;

1190 
	g±r
 !
°©ic_ˇ°
<
Produ˚rBa£
*>(
tokí
.
cuºítProdu˚r
)) {

1191 i‡(
±r
->
dequeue
(
ôem
)) {

1192 
tokí
.
cuºítProdu˚r
 = 
±r
;

1193 
	gtokí
.
	gôemsC⁄sumedFromCuºít
 = 1;

1194  
	gåue
;

1196 
	g±r
 = 
±r
->
√xt_¥od
();

1197 i‡(
	g±r
 =
nuŒ±r
) {

1198 
±r
 = 
èû
;

1201  
	gÁl£
;

1209 
	gãm∂©e
<
ty≥«me
 
	gIt
>

1210 
size_t
 
åy_dequeue_bulk
(
It
 
ôemFú°
, size_à
max
)

1212 
size_t
 
	gcou¡
 = 0;

1213 autÿ
	g±r
 = 
¥odu˚rLi°Taû
.
lﬂd
(
°d
::
mem‹y_‹dî_acquúe
);Öå !
nuŒ±r
;Öå = 
±r
->
√xt_¥od
()) {

1214 
cou¡
 +
±r
->
dequeue_bulk
(
ôemFú°
, 
max
 - count);

1215 i‡(
	gcou¡
 =
max
) {

1219  
	gcou¡
;

1227 
	gãm∂©e
<
ty≥«me
 
	gIt
>

1228 
size_t
 
åy_dequeue_bulk
(
c⁄sumî_tokí_t
& 
tokí
, 
It
 
ôemFú°
, size_à
max
)

1230 i‡(
	gtokí
.
	gdesúedProdu˚r
 =
nuŒ±r
 || 
tokí
.
œ°KnownGlobÆOff£t
 !
globÆEx∂icôC⁄sumîOff£t
.
lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
)) {

1231 i‡(!
upd©e_cuºít_¥odu˚r_a·î_rŸ©i⁄
(
tokí
)) {

1236 
size_t
 
	gcou¡
 = 
°©ic_ˇ°
<
Produ˚rBa£
*>(
tokí
.
cuºítProdu˚r
)->
dequeue_bulk
(
ôemFú°
, 
max
);

1237 i‡(
	gcou¡
 =
max
) {

1238 i‡((
tokí
.
ôemsC⁄sumedFromCuºít
 +
°©ic_ˇ°
<
°d
::
uöt32_t
>(
max
)Ë>
EXPLICIT_CONSUMER_CONSUMPTION_QUOTA_BEFORE_ROTATE
) {

1239 
globÆEx∂icôC⁄sumîOff£t
.
„tch_add
(1, 
°d
::
mem‹y_‹dî_ªœxed
);

1241  
	gmax
;

1243 
	gtokí
.
	gôemsC⁄sumedFromCuºít
 +
°©ic_ˇ°
<
°d
::
uöt32_t
>(
cou¡
);

1244 
	gmax
 -
cou¡
;

1246 autÿ
	gèû
 = 
¥odu˚rLi°Taû
.
lﬂd
(
°d
::
mem‹y_‹dî_acquúe
);

1247 autÿ
	g±r
 = 
°©ic_ˇ°
<
Produ˚rBa£
*>(
tokí
.
cuºítProdu˚r
)->
√xt_¥od
();

1248 i‡(
	g±r
 =
nuŒ±r
) {

1249 
±r
 = 
èû
;

1251 
	g±r
 !
°©ic_ˇ°
<
Produ˚rBa£
*>(
tokí
.
cuºítProdu˚r
)) {

1252 autÿ
dequeued
 = 
±r
->
dequeue_bulk
(
ôemFú°
, 
max
);

1253 
	gcou¡
 +
dequeued
;

1254 i‡(
	gdequeued
 != 0) {

1255 
tokí
.
cuºítProdu˚r
 = 
±r
;

1256 
	gtokí
.
	gôemsC⁄sumedFromCuºít
 = 
°©ic_ˇ°
<
°d
::
uöt32_t
>(
dequeued
);

1258 i‡(
	gdequeued
 =
max
) {

1261 
	gmax
 -
dequeued
;

1262 
	g±r
 = 
±r
->
√xt_¥od
();

1263 i‡(
	g±r
 =
nuŒ±r
) {

1264 
±r
 = 
èû
;

1267  
	gcou¡
;

1278 
	gãm∂©e
<
ty≥«me
 
	gU
>

1279 
ölöe
 
boﬁ
 
åy_dequeue_‰om_¥odu˚r
(
¥odu˚r_tokí_t
 c⁄°& 
¥odu˚r
, 
U
& 
ôem
)

1281  
	g°©ic_ˇ°
<
	gEx∂icôProdu˚r
*>(
	g¥odu˚r
.¥odu˚r)->
dequeue
(
ôem
);

1291 
	gãm∂©e
<
ty≥«me
 
	gIt
>

1292 
ölöe
 
size_t
 
åy_dequeue_bulk_‰om_¥odu˚r
(
¥odu˚r_tokí_t
 c⁄°& 
¥odu˚r
, 
It
 
ôemFú°
, size_à
max
)

1294  
	g°©ic_ˇ°
<
	gEx∂icôProdu˚r
*>(
	g¥odu˚r
.¥odu˚r)->
dequeue_bulk
(
ôemFú°
, 
max
);

1304 
size_t
 
size_≠¥ox
() const

1306 
size_t
 
	gsize
 = 0;

1307 autÿ
	g±r
 = 
¥odu˚rLi°Taû
.
lﬂd
(
°d
::
mem‹y_‹dî_acquúe
);Öå !
nuŒ±r
;Öå = 
±r
->
√xt_¥od
()) {

1308 
size
 +
±r
->
size_≠¥ox
();

1310  
	gsize
;

1317 
boﬁ
 
is_lock_‰ì
()

1320 
	gdëaûs
::
°©ic_is_lock_‰ì
<
boﬁ
>::
vÆue
 == 2 &&

1321 
dëaûs
::
°©ic_is_lock_‰ì
<
size_t
>::
vÆue
 == 2 &&

1322 
dëaûs
::
°©ic_is_lock_‰ì
<
°d
::
uöt32_t
>::
vÆue
 == 2 &&

1323 
dëaûs
::
°©ic_is_lock_‰ì
<
ödex_t
>::
vÆue
 == 2 &&

1324 
dëaûs
::
°©ic_is_lock_‰ì
<*>::
vÆue
 == 2 &&

1325 
dëaûs
::
°©ic_is_lock_‰ì
<
ty≥«me
 dëaûs::
thªad_id_c⁄vîãr
<dëaûs::
thªad_id_t
>::
thªad_id_numîic_size_t
>::
vÆue
 == 2;

1329 
	g¥iv©e
:

1330 
‰õnd
 
Produ˚rTokí
;

1331 
‰õnd
 
	gC⁄sumîTokí
;

1332 
	gEx∂icôProdu˚r
;

1333 
‰õnd
 
	gEx∂icôProdu˚r
;

1334 
	gIm∂icôProdu˚r
;

1335 
‰õnd
 
	gIm∂icôProdu˚r
;

1336 
‰õnd
 
˛ass
 
	gC⁄cuºítQueueTe°s
;

1338 
	eAŒoˇti⁄Mode
 { 
	gC™AŒoc
, 
	gC™nŸAŒoc
 };

1345 
	gãm∂©e
<
AŒoˇti⁄Mode
 
	gˇnAŒoc
, 
ty≥«me
 
	gU
>

1346 
ölöe
 
boﬁ
 
ö√r_íqueue
(
¥odu˚r_tokí_t
 c⁄°& 
tokí
, 
U
&& 
ñemít
)

1348  
	g°©ic_ˇ°
<
	gEx∂icôProdu˚r
*>(
	gtokí
.
	g¥odu˚r
)->
	gC⁄cuºítQueue
::
Ex∂icôProdu˚r
::
ãm∂©e
 
íqueue
<
ˇnAŒoc
>(
°d
::
f‹w¨d
<
U
>(
ñemít
));

1351 
	gãm∂©e
<
AŒoˇti⁄Mode
 
	gˇnAŒoc
, 
ty≥«me
 
	gU
>

1352 
ölöe
 
boﬁ
 
ö√r_íqueue
(
U
&& 
ñemít
)

1354 autÿ
	g¥odu˚r
 = 
gë_‹_add_im∂icô_¥odu˚r
();

1355  
	g¥odu˚r
 =
nuŒ±r
 ? 
Ál£
 : 
¥odu˚r
->
C⁄cuºítQueue
::
Im∂icôProdu˚r
::
ãm∂©e
 
íqueue
<
ˇnAŒoc
>(
°d
::
f‹w¨d
<
U
>(
ñemít
));

1358 
	gãm∂©e
<
AŒoˇti⁄Mode
 
	gˇnAŒoc
, 
ty≥«me
 
	gIt
>

1359 
ölöe
 
boﬁ
 
ö√r_íqueue_bulk
(
¥odu˚r_tokí_t
 c⁄°& 
tokí
, 
It
 
ôemFú°
, 
size_t
 
cou¡
)

1361  
	g°©ic_ˇ°
<
	gEx∂icôProdu˚r
*>(
	gtokí
.
	g¥odu˚r
)->
	gC⁄cuºítQueue
::
Ex∂icôProdu˚r
::
ãm∂©e
 
íqueue_bulk
<
ˇnAŒoc
>(
ôemFú°
, 
	gcou¡
);

1364 
	gãm∂©e
<
AŒoˇti⁄Mode
 
	gˇnAŒoc
, 
ty≥«me
 
	gIt
>

1365 
ölöe
 
boﬁ
 
ö√r_íqueue_bulk
(
It
 
ôemFú°
, 
size_t
 
cou¡
)

1367 autÿ
	g¥odu˚r
 = 
gë_‹_add_im∂icô_¥odu˚r
();

1368  
	g¥odu˚r
 =
nuŒ±r
 ? 
Ál£
 : 
¥odu˚r
->
C⁄cuºítQueue
::
Im∂icôProdu˚r
::
ãm∂©e
 
íqueue_bulk
<
ˇnAŒoc
>(
ôemFú°
, 
	gcou¡
);

1371 
ölöe
 
boﬁ
 
upd©e_cuºít_¥odu˚r_a·î_rŸ©i⁄
(
c⁄sumî_tokí_t
& 
tokí
)

1374 autÿ
	gèû
 = 
¥odu˚rLi°Taû
.
lﬂd
(
°d
::
mem‹y_‹dî_acquúe
);

1375 i‡(
	gtokí
.
	gdesúedProdu˚r
 =
nuŒ±r
 && 
èû
 ==Çullptr) {

1376  
Ál£
;

1378 autÿ
	g¥odCou¡
 = 
¥odu˚rCou¡
.
lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
);

1379 autÿ
	gglobÆOff£t
 = 
globÆEx∂icôC⁄sumîOff£t
.
lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
);

1380 i‡((
	gdëaûs
::
u∆ikñy
)(
tokí
.
desúedProdu˚r
 =
nuŒ±r
)) {

1384 
°d
::
uöt32_t
 
off£t
 = 
¥odCou¡
 - 1 - (
tokí
.
öôülOff£t
 %ÖrodCount);

1385 
	gtokí
.
	gdesúedProdu˚r
 = 
èû
;

1386 
	g°d
::
uöt32_t
 
i
 = 0; 
	gi
 !
off£t
; ++i) {

1387 
	gtokí
.
	gdesúedProdu˚r
 = 
°©ic_ˇ°
<
Produ˚rBa£
*>(
tokí
.
desúedProdu˚r
)->
√xt_¥od
();

1388 i‡(
	gtokí
.
	gdesúedProdu˚r
 =
nuŒ±r
) {

1389 
tokí
.
desúedProdu˚r
 = 
èû
;

1394 
	g°d
::
uöt32_t
 
dñè
 = 
globÆOff£t
 - 
tokí
.
œ°KnownGlobÆOff£t
;

1395 i‡(
	gdñè
 >
¥odCou¡
) {

1396 
dñè
 = dñè % 
¥odCou¡
;

1398 
	g°d
::
uöt32_t
 
i
 = 0; 
	gi
 !
dñè
; ++i) {

1399 
	gtokí
.
	gdesúedProdu˚r
 = 
°©ic_ˇ°
<
Produ˚rBa£
*>(
tokí
.
desúedProdu˚r
)->
√xt_¥od
();

1400 i‡(
	gtokí
.
	gdesúedProdu˚r
 =
nuŒ±r
) {

1401 
tokí
.
desúedProdu˚r
 = 
èû
;

1405 
	gtokí
.
	gœ°KnownGlobÆOff£t
 = 
globÆOff£t
;

1406 
	gtokí
.
	gcuºítProdu˚r
 = 
tokí
.
desúedProdu˚r
;

1407 
	gtokí
.
	gôemsC⁄sumedFromCuºít
 = 0;

1408  
	gåue
;

1416 
	gãm∂©e
 <
ty≥«me
 
	gN
>

1417 
	sFªeLi°Node


1419 
FªeLi°Node
(Ë: 
‰ìLi°Refs
(0), 
‰ìLi°Next
(
nuŒ±r
) { }

1421 
	g°d
::
©omic
<
°d
::
uöt32_t
> 
‰ìLi°Refs
;

1422 
	g°d
::
©omic
<
N
*> 
‰ìLi°Next
;

1428 
	gãm∂©e
<
ty≥«me
 
	gN
>

1429 
	sFªeLi°


1431 
FªeLi°
(Ë: 
‰ìLi°Hód
(
nuŒ±r
) { }

1432 
FªeLi°
(FªeLi°&& 
Ÿhî
Ë: 
‰ìLi°Hód
(Ÿhî.‰ìLi°Hód.
lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
)Ë{ othî.‰ìLi°Hód.
°‹e
(
nuŒ±r
, std::memory_order_relaxed); }

1433 
sw≠
(
FªeLi°
& 
Ÿhî
Ë{ 
	gdëaûs
::
sw≠_ªœxed
(
‰ìLi°Hód
, other.freeListHead); }

1435 
FªeLi°
(FªeLi° c⁄°&Ë
	gMOODYCAMEL_DELETE_FUNCTION
;

1436 
	gFªeLi°
& 
	g›î©‹
=(
FªeLi°
 c⁄°&Ë
MOODYCAMEL_DELETE_FUNCTION
;

1438 
ölöe
 
add
(
N
* 
node
)

1440 #ifde‡
MCDBGQ_NOLOCKFREE_FREELIST


1441 
	gdebug
::
DebugLock
 
lock
(
muãx
);

1445 i‡(
	gnode
->
	g‰ìLi°Refs
.
„tch_add
(
SHOULD_BE_ON_FREELIST
, 
°d
::
mem‹y_‹dî_acq_ªl
) == 0) {

1448 
add_knowög_ªfcou¡_is_zîo
(
node
);

1452 
ölöe
 
N
* 
åy_gë
()

1454 #ifde‡
MCDBGQ_NOLOCKFREE_FREELIST


1455 
	gdebug
::
DebugLock
 
lock
(
muãx
);

1457 autÿ
	ghód
 = 
‰ìLi°Hód
.
lﬂd
(
°d
::
mem‹y_‹dî_acquúe
);

1458 
	ghód
 !
nuŒ±r
) {

1459 autÿ
¥evHód
 = 
hód
;

1460 autÿ
	gªfs
 = 
hód
->
‰ìLi°Refs
.
lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
);

1461 i‡((
	gªfs
 & 
	gREFS_MASK
Ë=0 || !
hód
->
‰ìLi°Refs
.
com∑ª_exch™ge_°r⁄g
(
ªfs
,Ñef†+ 1, 
°d
::
mem‹y_‹dî_acquúe
, std::
mem‹y_‹dî_ªœxed
)) {

1462 
hód
 = 
‰ìLi°Hód
.
lﬂd
(
°d
::
mem‹y_‹dî_acquúe
);

1468 autÿ
	g√xt
 = 
hód
->
‰ìLi°Next
.
lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
);

1469 i‡(
	g‰ìLi°Hód
.
com∑ª_exch™ge_°r⁄g
(
hód
, 
√xt
, 
°d
::
mem‹y_‹dî_acquúe
, std::
mem‹y_‹dî_ªœxed
)) {

1472 
as£π
((
hód
->
‰ìLi°Refs
.
lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
Ë& 
SHOULD_BE_ON_FREELIST
) == 0);

1475 
	ghód
->
	g‰ìLi°Refs
.
„tch_sub
(2, 
°d
::
mem‹y_‹dî_ªÀa£
);

1476  
	ghód
;

1482 
	gªfs
 = 
¥evHód
->
‰ìLi°Refs
.
„tch_sub
(1, 
°d
::
mem‹y_‹dî_acq_ªl
);

1483 i‡(
	gªfs
 =
SHOULD_BE_ON_FREELIST
 + 1) {

1484 
add_knowög_ªfcou¡_is_zîo
(
¥evHód
);

1488  
	gnuŒ±r
;

1492 
N
* 
hód_unß„
(Ëc⁄° {  
	g‰ìLi°Hód
.
lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
); }

1494 
	g¥iv©e
:

1495 
ölöe
 
add_knowög_ªfcou¡_is_zîo
(
N
* 
node
)

1505 autÿ
hód
 = 
‰ìLi°Hód
.
lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
);

1506 
	gåue
) {

1507 
	gnode
->
	g‰ìLi°Next
.
°‹e
(
hód
, 
°d
::
mem‹y_‹dî_ªœxed
);

1508 
	gnode
->
	g‰ìLi°Refs
.
°‹e
(1, 
°d
::
mem‹y_‹dî_ªÀa£
);

1509 i‡(!
	g‰ìLi°Hód
.
com∑ª_exch™ge_°r⁄g
(
hód
, 
node
, 
°d
::
mem‹y_‹dî_ªÀa£
, std::
mem‹y_‹dî_ªœxed
)) {

1511 i‡(
node
->
‰ìLi°Refs
.
„tch_add
(
SHOULD_BE_ON_FREELIST
 - 1, 
°d
::
mem‹y_‹dî_ªÀa£
) == 1) {

1519 
	g¥iv©e
:

1521 
°d
::
©omic
<
N
*> 
‰ìLi°Hód
;

1523 c⁄° 
	g°d
::
uöt32_t
 
REFS_MASK
 = 0x7FFFFFFF;

1524 c⁄° 
	g°d
::
uöt32_t
 
SHOULD_BE_ON_FREELIST
 = 0x80000000;

1526 #ifde‡
MCDBGQ_NOLOCKFREE_FREELIST


1527 
	gdebug
::
DebugMuãx
 
muãx
;

1536 
	eI¬îQueueC⁄ãxt
 { 
	gim∂icô_c⁄ãxt
 = 0, 
	gex∂icô_c⁄ãxt
 = 1 };

1538 
	sBlock


1540 
Block
()

1541 : 
√xt
(
nuŒ±r
), 
ñemítsCom∂ëñyDequeued
(0), 
‰ìLi°Refs
(0), 
‰ìLi°Next
“uŒ±r), 
shouldBeOnFªeLi°
(
Ál£
), 
dy«miˇŒyAŒoˇãd
(
åue
)

1543 #ifde‡
MCDBGQ_TRACKMEM


1544 
	gow√r
 = 
nuŒ±r
;

1548 
	gãm∂©e
<
I¬îQueueC⁄ãxt
 
	gc⁄ãxt
>

1549 
ölöe
 
boﬁ
 
is_em±y
() const

1551 
MOODYCAMEL_CONSTEXPR_IF
 (
c⁄ãxt
 =
ex∂icô_c⁄ãxt
 && 
BLOCK_SIZE
 <
EXPLICIT_BLOCK_EMPTY_COUNTER_THRESHOLD
) {

1553 
size_t
 
i
 = 0; 
	gi
 < 
	gBLOCK_SIZE
; ++i) {

1554 i‡(!
	gem±yFœgs
[
i
].
lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
)) {

1555  
Ál£
;

1560 
	g°d
::
©omic_thªad_„n˚
(
°d
::
mem‹y_‹dî_acquúe
);

1561  
	gåue
;

1565 i‡(
	gñemítsCom∂ëñyDequeued
.
lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
Ë=
BLOCK_SIZE
) {

1566 
°d
::
©omic_thªad_„n˚
(°d::
mem‹y_‹dî_acquúe
);

1567  
	gåue
;

1569 
as£π
(
ñemítsCom∂ëñyDequeued
.
lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
Ë<
BLOCK_SIZE
);

1570  
	gÁl£
;

1575 
	gãm∂©e
<
I¬îQueueC⁄ãxt
 
	gc⁄ãxt
>

1576 
ölöe
 
boﬁ
 
£t_em±y
(
MOODYCAMEL_MAYBE_UNUSED
 
ödex_t
 
i
)

1578 
MOODYCAMEL_CONSTEXPR_IF
 (
c⁄ãxt
 =
ex∂icô_c⁄ãxt
 && 
BLOCK_SIZE
 <
EXPLICIT_BLOCK_EMPTY_COUNTER_THRESHOLD
) {

1580 
as£π
(!
em±yFœgs
[
BLOCK_SIZE
 - 1 - 
°©ic_ˇ°
<
size_t
>(
i
 & sètic_ˇ°<
ödex_t
>(BLOCK_SIZE - 1))].
lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
));

1581 
	gem±yFœgs
[
BLOCK_SIZE
 - 1 - 
°©ic_ˇ°
<
size_t
>(
i
 & sètic_ˇ°<
ödex_t
>(BLOCK_SIZE - 1))].
°‹e
(
åue
, 
°d
::
mem‹y_‹dî_ªÀa£
);

1582  
	gÁl£
;

1586 autÿ
	g¥evVÆ
 = 
ñemítsCom∂ëñyDequeued
.
„tch_add
(1, 
°d
::
mem‹y_‹dî_ªÀa£
);

1587 
as£π
(
¥evVÆ
 < 
BLOCK_SIZE
);

1588  
	g¥evVÆ
 =
BLOCK_SIZE
 - 1;

1594 
	gãm∂©e
<
I¬îQueueC⁄ãxt
 
	gc⁄ãxt
>

1595 
ölöe
 
boﬁ
 
£t_m™y_em±y
(
MOODYCAMEL_MAYBE_UNUSED
 
ödex_t
 
i
, 
size_t
 
cou¡
)

1597 
MOODYCAMEL_CONSTEXPR_IF
 (
c⁄ãxt
 =
ex∂icô_c⁄ãxt
 && 
BLOCK_SIZE
 <
EXPLICIT_BLOCK_EMPTY_COUNTER_THRESHOLD
) {

1599 
°d
::
©omic_thªad_„n˚
(°d::
mem‹y_‹dî_ªÀa£
);

1600 
	gi
 = 
BLOCK_SIZE
 - 1 - 
°©ic_ˇ°
<
size_t
>(
i
 & sètic_ˇ°<
ödex_t
>(BLOCK_SIZE - 1)Ë- 
cou¡
 + 1;

1601 
size_t
 
	gj
 = 0; j !
cou¡
; ++j) {

1602 
as£π
(!
em±yFœgs
[
i
 + 
j
].
lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
));

1603 
	gem±yFœgs
[
i
 + 
j
].
°‹e
(
åue
, 
°d
::
mem‹y_‹dî_ªœxed
);

1605  
	gÁl£
;

1609 autÿ
	g¥evVÆ
 = 
ñemítsCom∂ëñyDequeued
.
„tch_add
(
cou¡
, 
°d
::
mem‹y_‹dî_ªÀa£
);

1610 
as£π
(
¥evVÆ
 + 
cou¡
 <
BLOCK_SIZE
);

1611  
	g¥evVÆ
 + 
	gcou¡
 =
BLOCK_SIZE
;

1615 
	gãm∂©e
<
I¬îQueueC⁄ãxt
 
	gc⁄ãxt
>

1616 
ölöe
 
£t_Æl_em±y
()

1618 
MOODYCAMEL_CONSTEXPR_IF
 (
c⁄ãxt
 =
ex∂icô_c⁄ãxt
 && 
BLOCK_SIZE
 <
EXPLICIT_BLOCK_EMPTY_COUNTER_THRESHOLD
) {

1620 
size_t
 
i
 = 0; 
	gi
 !
BLOCK_SIZE
; ++i) {

1621 
	gem±yFœgs
[
i
].
°‹e
(
åue
, 
°d
::
mem‹y_‹dî_ªœxed
);

1626 
	gñemítsCom∂ëñyDequeued
.
°‹e
(
BLOCK_SIZE
, 
°d
::
mem‹y_‹dî_ªœxed
);

1630 
	gãm∂©e
<
I¬îQueueC⁄ãxt
 
	gc⁄ãxt
>

1631 
ölöe
 
ª£t_em±y
()

1633 
MOODYCAMEL_CONSTEXPR_IF
 (
c⁄ãxt
 =
ex∂icô_c⁄ãxt
 && 
BLOCK_SIZE
 <
EXPLICIT_BLOCK_EMPTY_COUNTER_THRESHOLD
) {

1635 
size_t
 
i
 = 0; 
	gi
 !
BLOCK_SIZE
; ++i) {

1636 
	gem±yFœgs
[
i
].
°‹e
(
Ál£
, 
°d
::
mem‹y_‹dî_ªœxed
);

1641 
	gñemítsCom∂ëñyDequeued
.
°‹e
(0, 
°d
::
mem‹y_‹dî_ªœxed
);

1645 
ölöe
 
T
* 
	g›î©‹
[](
ödex_t
 
	gidx
Ë
	gMOODYCAMEL_NOEXCEPT
 {  
	g°©ic_ˇ°
<
	gT
*>(°©ic_ˇ°<*>(
	gñemíts
)Ë+ sètic_ˇ°<
	gsize_t
>(idx & sètic_ˇ°<
	gödex_t
>(
	gBLOCK_SIZE
 - 1)); }

1646 
ölöe
 
T
 c⁄°* 
	g›î©‹
[](
ödex_t
 
	gidx
Ëc⁄° 
	gMOODYCAMEL_NOEXCEPT
 {  
	g°©ic_ˇ°
<T c⁄°*>(°©ic_ˇ°<c⁄°*>(
	gñemíts
)Ë+ sètic_ˇ°<
	gsize_t
>(idx & sètic_ˇ°<
	gödex_t
>(
	gBLOCK_SIZE
 - 1)); }

1648 
	g¥iv©e
:

1649 
°©ic_as£π
(
°d
::
Æignmít_of
<
T
>::
vÆue
 <= (T), "The queue doesÇot supportÅypes withánálignment greaterÅhanÅheir sizeátÅhisÅime");

1650 
MOODYCAMEL_ALIGNED_TYPE_LIKE
([(
T
Ë* 
BLOCK_SIZE
], TË
	gñemíts
;

1651 
	gpublic
:

1652 
Block
* 
√xt
;

1653 
	g°d
::
©omic
<
size_t
> 
ñemítsCom∂ëñyDequeued
;

1654 
	g°d
::
©omic
<
boﬁ
> 
em±yFœgs
[
BLOCK_SIZE
 <
EXPLICIT_BLOCK_EMPTY_COUNTER_THRESHOLD
 ? BLOCK_SIZE : 1];

1655 
	gpublic
:

1656 
°d
::
©omic
<°d::
uöt32_t
> 
‰ìLi°Refs
;

1657 
	g°d
::
©omic
<
Block
*> 
‰ìLi°Next
;

1658 
	g°d
::
©omic
<
boﬁ
> 
shouldBeOnFªeLi°
;

1659 
boﬁ
 
	gdy«miˇŒyAŒoˇãd
;

1661 #ifde‡
MCDBGQ_TRACKMEM


1662 * 
	gow√r
;

1665 
°©ic_as£π
(
°d
::
Æignmít_of
<
Block
>::
vÆue
 >°d::Æignmít_of<
T
>::value, "InternalÉrror: Blocks must beátÜeastásálignedásÅheÅypeÅheyáre wrapping");

1668 #ifde‡
MCDBGQ_TRACKMEM


1669 
	gpublic
:

1670 
MemSèts
;

1671 
	g¥iv©e
:

1678 
Produ˚rBa£
 : 
public
 
dëaûs
::
C⁄cuºítQueueProdu˚rTy≥ÀssBa£


1680 
Produ˚rBa£
(
C⁄cuºítQueue
* 
∑ª¡_
, 
boﬁ
 
isEx∂icô_
) :

1681 
èûIndex
(0),

1682 
hódIndex
(0),

1683 
dequeueO±imi°icCou¡
(0),

1684 
dequeueOvîcommô
(0),

1685 
èûBlock
(
nuŒ±r
),

1686 
isEx∂icô
(
isEx∂icô_
),

1687 
∑ª¡
(
∑ª¡_
)

1691 
	gvútuÆ
 ~
Produ˚rBa£
() { }

1693 
	gãm∂©e
<
ty≥«me
 
	gU
>

1694 
ölöe
 
boﬁ
 
dequeue
(
U
& 
ñemít
)

1696 i‡(
	gisEx∂icô
) {

1697  
	g°©ic_ˇ°
<
	gEx∂icôProdu˚r
*>(
	gthis
)->
dequeue
(
ñemít
);

1700  
	g°©ic_ˇ°
<
	gIm∂icôProdu˚r
*>(
	gthis
)->
dequeue
(
ñemít
);

1704 
	gãm∂©e
<
ty≥«me
 
	gIt
>

1705 
ölöe
 
size_t
 
dequeue_bulk
(
It
& 
ôemFú°
, size_à
max
)

1707 i‡(
	gisEx∂icô
) {

1708  
	g°©ic_ˇ°
<
	gEx∂icôProdu˚r
*>(
	gthis
)->
dequeue_bulk
(
ôemFú°
, 
max
);

1711  
	g°©ic_ˇ°
<
	gIm∂icôProdu˚r
*>(
	gthis
)->
dequeue_bulk
(
ôemFú°
, 
max
);

1715 
ölöe
 
Produ˚rBa£
* 
√xt_¥od
(Ëc⁄° {  
	g°©ic_ˇ°
<
	gProdu˚rBa£
*>(
	g√xt
); }

1717 
ölöe
 
size_t
 
size_≠¥ox
() const

1719 autÿ
	gèû
 = 
èûIndex
.
lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
);

1720 autÿ
	ghód
 = 
hódIndex
.
lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
);

1721  
	gdëaûs
::
cúcuœr_Àss_th™
(
hód
, 
èû
Ë? 
	g°©ic_ˇ°
<
	gsize_t
>(
	gèû
 - 
	ghód
) : 0;

1724 
ölöe
 
ödex_t
 
gëTaû
(Ëc⁄° {  
	gèûIndex
.
lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
); }

1725 
	g¥Ÿe˘ed
:

1726 
°d
::
©omic
<
ödex_t
> 
èûIndex
;

1727 
	g°d
::
©omic
<
ödex_t
> 
hódIndex
;

1729 
	g°d
::
©omic
<
ödex_t
> 
dequeueO±imi°icCou¡
;

1730 
	g°d
::
©omic
<
ödex_t
> 
dequeueOvîcommô
;

1732 
Block
* 
	gèûBlock
;

1734 
	gpublic
:

1735 
boﬁ
 
isEx∂icô
;

1736 
C⁄cuºítQueue
* 
	g∑ª¡
;

1738 
	g¥Ÿe˘ed
:

1739 #ifde‡
MCDBGQ_TRACKMEM


1740 
‰õnd
 
MemSèts
;

1749 
	gEx∂icôProdu˚r
 : 
public
 
Produ˚rBa£


1751 
ex∂icô
 
Ex∂icôProdu˚r
(
C⁄cuºítQueue
* 
∑ª¡_
) :

1752 
Produ˚rBa£
(
∑ª¡_
, 
åue
),

1753 
blockIndex
(
nuŒ±r
),

1754 
¥_blockIndexSlŸsU£d
(0),

1755 
¥_blockIndexSize
(
EXPLICIT_INITIAL_INDEX_SIZE
 >> 1),

1756 
¥_blockIndexFr⁄t
(0),

1757 
¥_blockIndexE¡rõs
(
nuŒ±r
),

1758 
¥_blockIndexRaw
(
nuŒ±r
)

1760 
size_t
 
	gpoﬁBa£dIndexSize
 = 
dëaûs
::
˚û_to_pow_2
(
∑ª¡_
->
öôülBlockPoﬁSize
) >> 1;

1761 i‡(
	gpoﬁBa£dIndexSize
 > 
	g¥_blockIndexSize
) {

1762 
	g¥_blockIndexSize
 = 
poﬁBa£dIndexSize
;

1765 
√w_block_ödex
(0);

1768 ~
Ex∂icôProdu˚r
()

1773 i‡(
	gthis
->
	gèûBlock
 !
nuŒ±r
) {

1775 
Block
* 
hÆfDequeuedBlock
 = 
nuŒ±r
;

1776 i‡((
	gthis
->
	ghódIndex
.
lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
Ë& 
°©ic_ˇ°
<
ödex_t
>(
BLOCK_SIZE
 - 1)) != 0) {

1779 
size_t
 
i
 = (
¥_blockIndexFr⁄t
 - 
¥_blockIndexSlŸsU£d
Ë& (
¥_blockIndexSize
 - 1);

1780 
	gdëaûs
::
cúcuœr_Àss_th™
<
ödex_t
>(
¥_blockIndexE¡rõs
[
i
].
ba£
 + 
BLOCK_SIZE
, 
	gthis
->
	ghódIndex
.
lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
))) {

1781 
i
 = (ò+ 1Ë& (
¥_blockIndexSize
 - 1);

1783 
as£π
(
dëaûs
::
cúcuœr_Àss_th™
<
ödex_t
>(
¥_blockIndexE¡rõs
[
i
].
ba£
, 
this
->
hódIndex
.
lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
)));

1784 
	ghÆfDequeuedBlock
 = 
¥_blockIndexE¡rõs
[
i
].
block
;

1788 autÿ
	gblock
 = 
this
->
èûBlock
;

1790 
	gblock
 = 
block
->
√xt
;

1791 i‡(
	gblock
->
	gC⁄cuºítQueue
::
Block
::
ãm∂©e
 
is_em±y
<
ex∂icô_c⁄ãxt
>()) {

1795 
size_t
 
	gi
 = 0;

1796 i‡(
	gblock
 =
hÆfDequeuedBlock
) {

1797 
i
 = 
°©ic_ˇ°
<
size_t
>(
this
->
hódIndex
.
lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
Ë& sètic_ˇ°<
ödex_t
>(
BLOCK_SIZE
 - 1));

1801 autÿ
	gœ°VÆidIndex
 = (
this
->
èûIndex
.
lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
Ë& 
°©ic_ˇ°
<
ödex_t
>(
BLOCK_SIZE
 - 1)Ë=0 ? BLOCK_SIZE : sètic_ˇ°<
size_t
>(this->tailIndex.load(std::memory_order_relaxed) & static_cast<index_t>(BLOCK_SIZE - 1));

1802 
	gi
 !
BLOCK_SIZE
 && (
block
 !
this
->
èûBlock
 || 
i
 !
œ°VÆidIndex
)) {

1803 (*
block
)[
i
++]->~
T
();

1805 } 
	gblock
 !
this
->
èûBlock
);

1809 i‡(
	gthis
->
	gèûBlock
 !
nuŒ±r
) {

1810 autÿ
block
 = 
this
->
èûBlock
;

1812 autÿ
	g√xtBlock
 = 
block
->
√xt
;

1813 i‡(
	gblock
->
	gdy«miˇŒyAŒoˇãd
) {

1814 
de°roy
(
block
);

1817 
	gthis
->
	g∑ª¡
->
add_block_to_‰ì_li°
(
block
);

1819 
	gblock
 = 
√xtBlock
;

1820 } 
	gblock
 !
this
->
èûBlock
);

1824 autÿ
	ghódî
 = 
°©ic_ˇ°
<
BlockIndexHódî
*>(
¥_blockIndexRaw
);

1825 
	ghódî
 !
nuŒ±r
) {

1826 autÿ
¥ev
 = 
°©ic_ˇ°
<
BlockIndexHódî
*>(
hódî
->prev);

1827 
	ghódî
->~
BlockIndexHódî
();

1828 (
	gTøôs
::
‰ì
)(
hódî
);

1829 
	ghódî
 = 
¥ev
;

1833 
	gãm∂©e
<
AŒoˇti⁄Mode
 
	gÆlocMode
, 
ty≥«me
 
	gU
>

1834 
ölöe
 
boﬁ
 
íqueue
(
U
&& 
ñemít
)

1836 
ödex_t
 
	gcuºítTaûIndex
 = 
this
->
èûIndex
.
lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
);

1837 
ödex_t
 
	g√wTaûIndex
 = 1 + 
cuºítTaûIndex
;

1838 i‡((
	gcuºítTaûIndex
 & 
	g°©ic_ˇ°
<
	gödex_t
>(
	gBLOCK_SIZE
 - 1)) == 0) {

1840 autÿ
°¨tBlock
 = 
this
->
èûBlock
;

1841 autÿ
	g‹igöÆBlockIndexSlŸsU£d
 = 
¥_blockIndexSlŸsU£d
;

1842 i‡(
	gthis
->
	gèûBlock
 !
nuŒ±r
 && 
this
->
èûBlock
->
√xt
->
C⁄cuºítQueue
::
Block
::
ãm∂©e
 
is_em±y
<
ex∂icô_c⁄ãxt
>()) {

1844 
this
->
èûBlock
 =Åhis->èûBlock->
√xt
;

1845 
	gthis
->
	gèûBlock
->
	gC⁄cuºítQueue
::
Block
::
ãm∂©e
 
ª£t_em±y
<
ex∂icô_c⁄ãxt
>();

1857 autÿ
	ghód
 = 
this
->
hódIndex
.
lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
);

1858 
as£π
(!
dëaûs
::
cúcuœr_Àss_th™
<
ödex_t
>(
cuºítTaûIndex
, 
hód
));

1859 i‡(!
	gdëaûs
::
cúcuœr_Àss_th™
<
ödex_t
>(
hód
, 
	gcuºítTaûIndex
 + 
	gBLOCK_SIZE
)

1860 || (
	gMAX_SUBQUEUE_SIZE
 !
dëaûs
::
c⁄°_numîic_max
<
size_t
>::
vÆue
 && (
MAX_SUBQUEUE_SIZE
 =0 || MAX_SUBQUEUE_SIZE - 
BLOCK_SIZE
 < 
cuºítTaûIndex
 - 
hód
))) {

1864  
Ál£
;

1867 i‡(
	g¥_blockIndexRaw
 =
nuŒ±r
 || 
¥_blockIndexSlŸsU£d
 =
¥_blockIndexSize
) {

1872 
MOODYCAMEL_CONSTEXPR_IF
 (
ÆlocMode
 =
C™nŸAŒoc
) {

1873  
Ál£
;

1875 i‡(!
√w_block_ödex
(
¥_blockIndexSlŸsU£d
)) {

1876  
	gÁl£
;

1881 autÿ
	g√wBlock
 = 
this
->
∑ª¡
->
C⁄cuºítQueue
::
ãm∂©e
 
ªquisôi⁄_block
<
ÆlocMode
>();

1882 i‡(
	g√wBlock
 =
nuŒ±r
) {

1883  
Ál£
;

1885 #ifde‡
MCDBGQ_TRACKMEM


1886 
	g√wBlock
->
	gow√r
 = 
this
;

1888 
	g√wBlock
->
	gC⁄cuºítQueue
::
Block
::
ãm∂©e
 
ª£t_em±y
<
ex∂icô_c⁄ãxt
>();

1889 i‡(
	gthis
->
	gèûBlock
 =
nuŒ±r
) {

1890 
√wBlock
->
√xt
 =ÇewBlock;

1893 
	g√wBlock
->
	g√xt
 = 
this
->
èûBlock
->
√xt
;

1894 
	gthis
->
	gèûBlock
->
	g√xt
 = 
√wBlock
;

1896 
	gthis
->
	gèûBlock
 = 
√wBlock
;

1897 ++
	g¥_blockIndexSlŸsU£d
;

1900 
MOODYCAMEL_CONSTEXPR_IF
 (!
MOODYCAMEL_NOEXCEPT_CTOR
(
T
, 
U
, 
√w
 (
°©ic_ˇ°
<T*>(
nuŒ±r
)ËT(
°d
::
f‹w¨d
<U>(
ñemít
)))) {

1903 
MOODYCAMEL_TRY
 {

1904 
√w
 ((*
this
->
èûBlock
)[
cuºítTaûIndex
]Ë
T
(
°d
::
f‹w¨d
<
U
>(
ñemít
));

1906 
MOODYCAMEL_CATCH
 (...) {

1909 
	g¥_blockIndexSlŸsU£d
 = 
‹igöÆBlockIndexSlŸsU£d
;

1910 
	gthis
->
	gèûBlock
 = 
°¨tBlock
 =
nuŒ±r
 ? 
this
->
èûBlock
 : startBlock;

1911 
	gMOODYCAMEL_RETHROW
;

1915 ()
	g°¨tBlock
;

1916 ()
	g‹igöÆBlockIndexSlŸsU£d
;

1920 auto& 
	gíåy
 = 
blockIndex
.
lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
)->
íåõs
[
¥_blockIndexFr⁄t
];

1921 
	gíåy
.
	gba£
 = 
cuºítTaûIndex
;

1922 
	gíåy
.
	gblock
 = 
this
->
èûBlock
;

1923 
	gblockIndex
.
lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
)->
‰⁄t
.
°‹e
(
¥_blockIndexFr⁄t
, std::
mem‹y_‹dî_ªÀa£
);

1924 
	g¥_blockIndexFr⁄t
 = (
¥_blockIndexFr⁄t
 + 1Ë& (
¥_blockIndexSize
 - 1);

1926 
MOODYCAMEL_CONSTEXPR_IF
 (!
MOODYCAMEL_NOEXCEPT_CTOR
(
T
, 
U
, 
√w
 (
°©ic_ˇ°
<T*>(
nuŒ±r
)ËT(
°d
::
f‹w¨d
<U>(
ñemít
)))) {

1927 
this
->
èûIndex
.
°‹e
(
√wTaûIndex
, 
°d
::
mem‹y_‹dî_ªÀa£
);

1928  
	gåue
;

1933 
√w
 ((*
this
->
èûBlock
)[
cuºítTaûIndex
]Ë
T
(
°d
::
f‹w¨d
<
U
>(
ñemít
));

1935 
	gthis
->
	gèûIndex
.
°‹e
(
√wTaûIndex
, 
°d
::
mem‹y_‹dî_ªÀa£
);

1936  
	gåue
;

1939 
	gãm∂©e
<
ty≥«me
 
	gU
>

1940 
boﬁ
 
dequeue
(
U
& 
ñemít
)

1942 autÿ
	gèû
 = 
this
->
èûIndex
.
lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
);

1943 autÿ
	govîcommô
 = 
this
->
dequeueOvîcommô
.
lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
);

1944 i‡(
	gdëaûs
::
cúcuœr_Àss_th™
<
ödex_t
>(
this
->
dequeueO±imi°icCou¡
.
lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
Ë- 
ovîcommô
, 
	gèû
)) {

1961 
	g°d
::
©omic_thªad_„n˚
(
°d
::
mem‹y_‹dî_acquúe
);

1964 autÿ
	gmyDequeueCou¡
 = 
this
->
dequeueO±imi°icCou¡
.
„tch_add
(1, 
°d
::
mem‹y_‹dî_ªœxed
);

1976 
	gèû
 = 
this
->
èûIndex
.
lﬂd
(
°d
::
mem‹y_‹dî_acquúe
);

1977 i‡((
	gdëaûs
::
likñy
)(
dëaûs
::
cúcuœr_Àss_th™
<
ödex_t
>(
myDequeueCou¡
 - 
ovîcommô
, 
	gèû
))) {

1988 autÿ
	gödex
 = 
this
->
hódIndex
.
„tch_add
(1, 
°d
::
mem‹y_‹dî_acq_ªl
);

1993 autÿ
	gloˇlBlockIndex
 = 
blockIndex
.
lﬂd
(
°d
::
mem‹y_‹dî_acquúe
);

1994 autÿ
	gloˇlBlockIndexHód
 = 
loˇlBlockIndex
->
‰⁄t
.
lﬂd
(
°d
::
mem‹y_‹dî_acquúe
);

1999 autÿ
	ghódBa£
 = 
loˇlBlockIndex
->
íåõs
[
loˇlBlockIndexHód
].
ba£
;

2000 autÿ
	gblockBa£Index
 = 
ödex
 & ~
°©ic_ˇ°
<
ödex_t
>(
BLOCK_SIZE
 - 1);

2001 autÿ
	goff£t
 = 
°©ic_ˇ°
<
size_t
>(°©ic_ˇ°<
ty≥«me
 
°d
::
make_sig√d
<
ödex_t
>::
ty≥
>(
blockBa£Index
 - 
hódBa£
Ë/ 
BLOCK_SIZE
);

2002 autÿ
	gblock
 = 
loˇlBlockIndex
->
íåõs
[(
loˇlBlockIndexHód
 + 
off£t
Ë& (loˇlBlockIndex->
size
 - 1)].
block
;

2005 auto& 
	gñ
 = *((*
block
)[
ödex
]);

2006 i‡(!
MOODYCAMEL_NOEXCEPT_ASSIGN
(
T
, T&&, 
ñemít
 = 
°d
::
move
(
ñ
))) {

2009 
	sGu¨d
 {

2010 
Block
* 
block
;

2011 
ödex_t
 
	gödex
;

2013 ~
Gu¨d
()

2015 (*
	gblock
)[
ödex
]->~
T
();

2016 
	gblock
->
	gC⁄cuºítQueue
::
Block
::
ãm∂©e
 
£t_em±y
<
ex∂icô_c⁄ãxt
>(
ödex
);

2018 } 
	ggu¨d
 = { 
block
, 
ödex
 };

2020 
	gñemít
 = 
°d
::
move
(
ñ
);

2023 
	gñemít
 = 
°d
::
move
(
ñ
);

2024 
	gñ
.~
T
();

2025 
	gblock
->
	gC⁄cuºítQueue
::
Block
::
ãm∂©e
 
£t_em±y
<
ex∂icô_c⁄ãxt
>(
ödex
);

2028  
	gåue
;

2032 
	gthis
->
	gdequeueOvîcommô
.
„tch_add
(1, 
°d
::
mem‹y_‹dî_ªÀa£
);

2036  
	gÁl£
;

2039 
	gãm∂©e
<
AŒoˇti⁄Mode
 
	gÆlocMode
, 
ty≥«me
 
	gIt
>

2040 
boﬁ
 
MOODYCAMEL_NO_TSAN
 
íqueue_bulk
(
It
 
ôemFú°
, 
size_t
 
cou¡
)

2045 
ödex_t
 
	g°¨tTaûIndex
 = 
this
->
èûIndex
.
lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
);

2046 autÿ
	g°¨tBlock
 = 
this
->
èûBlock
;

2047 autÿ
	g‹igöÆBlockIndexFr⁄t
 = 
¥_blockIndexFr⁄t
;

2048 autÿ
	g‹igöÆBlockIndexSlŸsU£d
 = 
¥_blockIndexSlŸsU£d
;

2050 
Block
* 
	gfú°AŒoˇãdBlock
 = 
nuŒ±r
;

2053 
size_t
 
	gblockBa£Diff
 = ((
°¨tTaûIndex
 + 
cou¡
 - 1Ë& ~
°©ic_ˇ°
<
ödex_t
>(
BLOCK_SIZE
 - 1)) - ((startTailIndex - 1) & ~static_cast<index_t>(BLOCK_SIZE - 1));

2054 
ödex_t
 
	gcuºítTaûIndex
 = (
°¨tTaûIndex
 - 1Ë& ~
°©ic_ˇ°
<ödex_t>(
BLOCK_SIZE
 - 1);

2055 i‡(
	gblockBa£Diff
 > 0) {

2057 
	gblockBa£Diff
 > 0 && 
	gthis
->
	gèûBlock
 !
nuŒ±r
 && 
this
->
èûBlock
->
√xt
 !
fú°AŒoˇãdBlock
 &&Åhis->èûBlock->√xt->
C⁄cuºítQueue
::
Block
::
ãm∂©e
 
is_em±y
<
ex∂icô_c⁄ãxt
>()) {

2058 
blockBa£Diff
 -
°©ic_ˇ°
<
ödex_t
>(
BLOCK_SIZE
);

2059 
	gcuºítTaûIndex
 +
°©ic_ˇ°
<
ödex_t
>(
BLOCK_SIZE
);

2061 
	gthis
->
	gèûBlock
 = 
this
->
èûBlock
->
√xt
;

2062 
	gfú°AŒoˇãdBlock
 = 
fú°AŒoˇãdBlock
 =
nuŒ±r
 ? 
this
->
èûBlock
 : firstAllocatedBlock;

2064 auto& 
	gíåy
 = 
blockIndex
.
lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
)->
íåõs
[
¥_blockIndexFr⁄t
];

2065 
	gíåy
.
	gba£
 = 
cuºítTaûIndex
;

2066 
	gíåy
.
	gblock
 = 
this
->
èûBlock
;

2067 
	g¥_blockIndexFr⁄t
 = (
¥_blockIndexFr⁄t
 + 1Ë& (
¥_blockIndexSize
 - 1);

2071 
	gblockBa£Diff
 > 0) {

2072 
	gblockBa£Diff
 -
°©ic_ˇ°
<
ödex_t
>(
BLOCK_SIZE
);

2073 
	gcuºítTaûIndex
 +
°©ic_ˇ°
<
ödex_t
>(
BLOCK_SIZE
);

2075 autÿ
	ghód
 = 
this
->
hódIndex
.
lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
);

2076 
as£π
(!
dëaûs
::
cúcuœr_Àss_th™
<
ödex_t
>(
cuºítTaûIndex
, 
hód
));

2077 
boﬁ
 
	gfuŒ
 = !
dëaûs
::
cúcuœr_Àss_th™
<
ödex_t
>(
hód
, 
	gcuºítTaûIndex
 + 
	gBLOCK_SIZE
Ë|| (
	gMAX_SUBQUEUE_SIZE
 !dëaûs::
c⁄°_numîic_max
<
size_t
>::
vÆue
 && (
MAX_SUBQUEUE_SIZE
 =0 || MAX_SUBQUEUE_SIZE - 
BLOCK_SIZE
 < 
cuºítTaûIndex
 - head));

2078 i‡(
	g¥_blockIndexRaw
 =
nuŒ±r
 || 
¥_blockIndexSlŸsU£d
 =
¥_blockIndexSize
 || 
fuŒ
) {

2079 
MOODYCAMEL_CONSTEXPR_IF
 (
ÆlocMode
 =
C™nŸAŒoc
) {

2081 
¥_blockIndexFr⁄t
 = 
‹igöÆBlockIndexFr⁄t
;

2082 
	g¥_blockIndexSlŸsU£d
 = 
‹igöÆBlockIndexSlŸsU£d
;

2083 
	gthis
->
	gèûBlock
 = 
°¨tBlock
 =
nuŒ±r
 ? 
fú°AŒoˇãdBlock
 : startBlock;

2084  
	gÁl£
;

2086 i‡(
	gfuŒ
 || !
√w_block_ödex
(
‹igöÆBlockIndexSlŸsU£d
)) {

2088 
	g¥_blockIndexFr⁄t
 = 
‹igöÆBlockIndexFr⁄t
;

2089 
	g¥_blockIndexSlŸsU£d
 = 
‹igöÆBlockIndexSlŸsU£d
;

2090 
	gthis
->
	gèûBlock
 = 
°¨tBlock
 =
nuŒ±r
 ? 
fú°AŒoˇãdBlock
 : startBlock;

2091  
	gÁl£
;

2097 
	g‹igöÆBlockIndexFr⁄t
 = 
‹igöÆBlockIndexSlŸsU£d
;

2101 autÿ
	g√wBlock
 = 
this
->
∑ª¡
->
C⁄cuºítQueue
::
ãm∂©e
 
ªquisôi⁄_block
<
ÆlocMode
>();

2102 i‡(
	g√wBlock
 =
nuŒ±r
) {

2103 
¥_blockIndexFr⁄t
 = 
‹igöÆBlockIndexFr⁄t
;

2104 
	g¥_blockIndexSlŸsU£d
 = 
‹igöÆBlockIndexSlŸsU£d
;

2105 
	gthis
->
	gèûBlock
 = 
°¨tBlock
 =
nuŒ±r
 ? 
fú°AŒoˇãdBlock
 : startBlock;

2106  
	gÁl£
;

2109 #ifde‡
MCDBGQ_TRACKMEM


2110 
	g√wBlock
->
	gow√r
 = 
this
;

2112 
	g√wBlock
->
	gC⁄cuºítQueue
::
Block
::
ãm∂©e
 
£t_Æl_em±y
<
ex∂icô_c⁄ãxt
>();

2113 i‡(
	gthis
->
	gèûBlock
 =
nuŒ±r
) {

2114 
√wBlock
->
√xt
 =ÇewBlock;

2117 
	g√wBlock
->
	g√xt
 = 
this
->
èûBlock
->
√xt
;

2118 
	gthis
->
	gèûBlock
->
	g√xt
 = 
√wBlock
;

2120 
	gthis
->
	gèûBlock
 = 
√wBlock
;

2121 
	gfú°AŒoˇãdBlock
 = 
fú°AŒoˇãdBlock
 =
nuŒ±r
 ? 
this
->
èûBlock
 : firstAllocatedBlock;

2123 ++
	g¥_blockIndexSlŸsU£d
;

2125 auto& 
	gíåy
 = 
blockIndex
.
lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
)->
íåõs
[
¥_blockIndexFr⁄t
];

2126 
	gíåy
.
	gba£
 = 
cuºítTaûIndex
;

2127 
	gíåy
.
	gblock
 = 
this
->
èûBlock
;

2128 
	g¥_blockIndexFr⁄t
 = (
¥_blockIndexFr⁄t
 + 1Ë& (
¥_blockIndexSize
 - 1);

2133 autÿ
	gblock
 = 
fú°AŒoˇãdBlock
;

2134 
	gåue
) {

2135 
	gblock
->
	gC⁄cuºítQueue
::
Block
::
ãm∂©e
 
ª£t_em±y
<
ex∂icô_c⁄ãxt
>();

2136 i‡(
	gblock
 =
this
->
èûBlock
) {

2139 
	gblock
 = 
block
->
√xt
;

2142 
MOODYCAMEL_CONSTEXPR_IF
 (
MOODYCAMEL_NOEXCEPT_CTOR
(
T
, 
de˛ty≥
(*
ôemFú°
), 
√w
 (
°©ic_ˇ°
<T*>(
nuŒ±r
)ËT(
dëaûs
::
dîef_n€x˚±
(itemFirst)))) {

2143 
blockIndex
.
lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
)->
‰⁄t
.
°‹e
((
¥_blockIndexFr⁄t
 - 1Ë& (
¥_blockIndexSize
 - 1), std::
mem‹y_‹dî_ªÀa£
);

2148 
ödex_t
 
	g√wTaûIndex
 = 
°¨tTaûIndex
 + 
°©ic_ˇ°
<ödex_t>(
cou¡
);

2149 
	gcuºítTaûIndex
 = 
°¨tTaûIndex
;

2150 autÿ
	gídBlock
 = 
this
->
èûBlock
;

2151 
	gthis
->
	gèûBlock
 = 
°¨tBlock
;

2152 
as£π
((
°¨tTaûIndex
 & 
°©ic_ˇ°
<
ödex_t
>(
BLOCK_SIZE
 - 1)Ë!0 || 
fú°AŒoˇãdBlock
 !
nuŒ±r
 || 
cou¡
 == 0);

2153 i‡((
	g°¨tTaûIndex
 & 
	g°©ic_ˇ°
<
	gödex_t
>(
	gBLOCK_SIZE
 - 1)Ë=0 && 
fú°AŒoˇãdBlock
 !
nuŒ±r
) {

2154 
this
->
èûBlock
 = 
fú°AŒoˇãdBlock
;

2156 
	gåue
) {

2157 
ödex_t
 
	g°›Index
 = (
cuºítTaûIndex
 & ~
°©ic_ˇ°
<ödex_t>(
BLOCK_SIZE
 - 1)) + static_cast<index_t>(BLOCK_SIZE);

2158 i‡(
	gdëaûs
::
cúcuœr_Àss_th™
<
ödex_t
>(
√wTaûIndex
, 
	g°›Index
)) {

2159 
	g°›Index
 = 
√wTaûIndex
;

2161 
MOODYCAMEL_CONSTEXPR_IF
 (
MOODYCAMEL_NOEXCEPT_CTOR
(
T
, 
de˛ty≥
(*
ôemFú°
), 
√w
 (
°©ic_ˇ°
<T*>(
nuŒ±r
)ËT(
dëaûs
::
dîef_n€x˚±
(itemFirst)))) {

2162 
cuºítTaûIndex
 !
°›Index
) {

2163 
√w
 ((*
this
->
èûBlock
)[
cuºítTaûIndex
++]Ë
T
(*
ôemFú°
++);

2167 
	gMOODYCAMEL_TRY
 {

2168 
	gcuºítTaûIndex
 !
°›Index
) {

2176 
√w
 ((*
this
->
èûBlock
)[
cuºítTaûIndex
]Ë
T
(
dëaûs
::
nomove_if
<!
MOODYCAMEL_NOEXCEPT_CTOR
(T, 
de˛ty≥
(*
ôemFú°
),Çew (
°©ic_ˇ°
<T*>(
nuŒ±r
)ËT(dëaûs::
dîef_n€x˚±
(ôemFú°)))>::
evÆ
(*itemFirst));

2177 ++
	gcuºítTaûIndex
;

2178 ++
	gôemFú°
;

2181 
MOODYCAMEL_CATCH
 (...) {

2185 autÿ
	gc⁄°ru˘edSt›Index
 = 
cuºítTaûIndex
;

2186 autÿ
	gœ°BlockEnqueued
 = 
this
->
èûBlock
;

2188 
	g¥_blockIndexFr⁄t
 = 
‹igöÆBlockIndexFr⁄t
;

2189 
	g¥_blockIndexSlŸsU£d
 = 
‹igöÆBlockIndexSlŸsU£d
;

2190 
	gthis
->
	gèûBlock
 = 
°¨tBlock
 =
nuŒ±r
 ? 
fú°AŒoˇãdBlock
 : startBlock;

2192 i‡(!
	gdëaûs
::
is_åivüŒy_de°ru˘ibÀ
<
T
>::
vÆue
) {

2193 autÿ
block
 = 
°¨tBlock
;

2194 i‡((
	g°¨tTaûIndex
 & 
	g°©ic_ˇ°
<
	gödex_t
>(
	gBLOCK_SIZE
 - 1)) == 0) {

2195 
block
 = 
fú°AŒoˇãdBlock
;

2197 
	gcuºítTaûIndex
 = 
°¨tTaûIndex
;

2198 
	gåue
) {

2199 
	g°›Index
 = (
cuºítTaûIndex
 & ~
°©ic_ˇ°
<
ödex_t
>(
BLOCK_SIZE
 - 1)) + static_cast<index_t>(BLOCK_SIZE);

2200 i‡(
	gdëaûs
::
cúcuœr_Àss_th™
<
ödex_t
>(
c⁄°ru˘edSt›Index
, 
	g°›Index
)) {

2201 
	g°›Index
 = 
c⁄°ru˘edSt›Index
;

2203 
	gcuºítTaûIndex
 !
°›Index
) {

2204 (*
block
)[
cuºítTaûIndex
++]->~
T
();

2206 i‡(
	gblock
 =
œ°BlockEnqueued
) {

2209 
	gblock
 = 
block
->
√xt
;

2212 
	gMOODYCAMEL_RETHROW
;

2216 i‡(
	gthis
->
	gèûBlock
 =
ídBlock
) {

2217 
as£π
(
cuºítTaûIndex
 =
√wTaûIndex
);

2220 
	gthis
->
	gèûBlock
 = 
this
->
èûBlock
->
√xt
;

2223 
MOODYCAMEL_CONSTEXPR_IF
 (!
MOODYCAMEL_NOEXCEPT_CTOR
(
T
, 
de˛ty≥
(*
ôemFú°
), 
√w
 (
°©ic_ˇ°
<T*>(
nuŒ±r
)ËT(
dëaûs
::
dîef_n€x˚±
(itemFirst)))) {

2224 i‡(
fú°AŒoˇãdBlock
 !
nuŒ±r
)

2225 
blockIndex
.
lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
)->
‰⁄t
.
°‹e
((
¥_blockIndexFr⁄t
 - 1Ë& (
¥_blockIndexSize
 - 1), std::
mem‹y_‹dî_ªÀa£
);

2228 
	gthis
->
	gèûIndex
.
°‹e
(
√wTaûIndex
, 
°d
::
mem‹y_‹dî_ªÀa£
);

2229  
	gåue
;

2232 
	gãm∂©e
<
ty≥«me
 
	gIt
>

2233 
size_t
 
dequeue_bulk
(
It
& 
ôemFú°
, size_à
max
)

2235 autÿ
	gèû
 = 
this
->
èûIndex
.
lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
);

2236 autÿ
	govîcommô
 = 
this
->
dequeueOvîcommô
.
lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
);

2237 autÿ
	gdesúedCou¡
 = 
°©ic_ˇ°
<
size_t
>(
èû
 - (
this
->
dequeueO±imi°icCou¡
.
lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
Ë- 
ovîcommô
));

2238 i‡(
	gdëaûs
::
cúcuœr_Àss_th™
<
size_t
>(0, 
	gdesúedCou¡
)) {

2239 
	gdesúedCou¡
 = 
desúedCou¡
 < 
max
 ? desiredCount : max;

2240 
	g°d
::
©omic_thªad_„n˚
(
°d
::
mem‹y_‹dî_acquúe
);

2242 autÿ
	gmyDequeueCou¡
 = 
this
->
dequeueO±imi°icCou¡
.
„tch_add
(
desúedCou¡
, 
°d
::
mem‹y_‹dî_ªœxed
);

2244 
	gèû
 = 
this
->
èûIndex
.
lﬂd
(
°d
::
mem‹y_‹dî_acquúe
);

2245 autÿ
	ga˘uÆCou¡
 = 
°©ic_ˇ°
<
size_t
>(
èû
 - (
myDequeueCou¡
 - 
ovîcommô
));

2246 i‡(
	gdëaûs
::
cúcuœr_Àss_th™
<
size_t
>(0, 
	ga˘uÆCou¡
)) {

2247 
	ga˘uÆCou¡
 = 
desúedCou¡
 < 
a˘uÆCou¡
 ? desiredCount :áctualCount;

2248 i‡(
	ga˘uÆCou¡
 < 
	gdesúedCou¡
) {

2249 
	gthis
->
	gdequeueOvîcommô
.
„tch_add
(
desúedCou¡
 - 
a˘uÆCou¡
, 
°d
::
mem‹y_‹dî_ªÀa£
);

2254 autÿ
	gfú°Index
 = 
this
->
hódIndex
.
„tch_add
(
a˘uÆCou¡
, 
°d
::
mem‹y_‹dî_acq_ªl
);

2257 autÿ
	gloˇlBlockIndex
 = 
blockIndex
.
lﬂd
(
°d
::
mem‹y_‹dî_acquúe
);

2258 autÿ
	gloˇlBlockIndexHód
 = 
loˇlBlockIndex
->
‰⁄t
.
lﬂd
(
°d
::
mem‹y_‹dî_acquúe
);

2260 autÿ
	ghódBa£
 = 
loˇlBlockIndex
->
íåõs
[
loˇlBlockIndexHód
].
ba£
;

2261 autÿ
	gfú°BlockBa£Index
 = 
fú°Index
 & ~
°©ic_ˇ°
<
ödex_t
>(
BLOCK_SIZE
 - 1);

2262 autÿ
	goff£t
 = 
°©ic_ˇ°
<
size_t
>(°©ic_ˇ°<
ty≥«me
 
°d
::
make_sig√d
<
ödex_t
>::
ty≥
>(
fú°BlockBa£Index
 - 
hódBa£
Ë/ 
BLOCK_SIZE
);

2263 autÿ
	gödexIndex
 = (
loˇlBlockIndexHód
 + 
off£t
Ë& (
loˇlBlockIndex
->
size
 - 1);

2266 autÿ
	gödex
 = 
fú°Index
;

2268 autÿ
	gfú°IndexInBlock
 = 
ödex
;

2269 
ödex_t
 
	gídIndex
 = (
ödex
 & ~
°©ic_ˇ°
<ödex_t>(
BLOCK_SIZE
 - 1)) + static_cast<index_t>(BLOCK_SIZE);

2270 
	gídIndex
 = 
dëaûs
::
cúcuœr_Àss_th™
<
ödex_t
>(
fú°Index
 + 
°©ic_ˇ°
<ödex_t>(
a˘uÆCou¡
),ÉndIndexË? 
	gfú°Index
 + 
	g°©ic_ˇ°
<
	gödex_t
>(
	ga˘uÆCou¡
Ë: 
ídIndex
;

2271 autÿ
	gblock
 = 
loˇlBlockIndex
->
íåõs
[
ödexIndex
].
block
;

2272 i‡(
MOODYCAMEL_NOEXCEPT_ASSIGN
(
T
, T&&, 
dëaûs
::
dîef_n€x˚±
(
ôemFú°
Ë
°d
::
move
((*(*
block
)[
ödex
])))) {

2273 
ödex
 !
ídIndex
) {

2274 auto& 
ñ
 = *((*
block
)[
ödex
]);

2275 *
	gôemFú°
++ = 
°d
::
move
(
ñ
);

2276 
	gñ
.~
T
();

2277 ++
	gödex
;

2281 
	gMOODYCAMEL_TRY
 {

2282 
	gödex
 !
ídIndex
) {

2283 auto& 
ñ
 = *((*
block
)[
ödex
]);

2284 *
	gôemFú°
 = 
°d
::
move
(
ñ
);

2285 ++
	gôemFú°
;

2286 
	gñ
.~
T
();

2287 ++
	gödex
;

2290 
MOODYCAMEL_CATCH
 (...) {

2295 
	gblock
 = 
loˇlBlockIndex
->
íåõs
[
ödexIndex
].
block
;

2296 
	gödex
 !
ídIndex
) {

2297 (*
block
)[
ödex
++]->~
T
();

2299 
	gblock
->
	gC⁄cuºítQueue
::
Block
::
ãm∂©e
 
£t_m™y_em±y
<
ex∂icô_c⁄ãxt
>(
fú°IndexInBlock
, 
	g°©ic_ˇ°
<
	gsize_t
>(
	gídIndex
 - 
	gfú°IndexInBlock
));

2300 
	gödexIndex
 = (
ödexIndex
 + 1Ë& (
loˇlBlockIndex
->
size
 - 1);

2302 
	gfú°IndexInBlock
 = 
ödex
;

2303 
	gídIndex
 = (
ödex
 & ~
°©ic_ˇ°
<
ödex_t
>(
BLOCK_SIZE
 - 1)) + static_cast<index_t>(BLOCK_SIZE);

2304 
	gídIndex
 = 
dëaûs
::
cúcuœr_Àss_th™
<
ödex_t
>(
fú°Index
 + 
°©ic_ˇ°
<ödex_t>(
a˘uÆCou¡
),ÉndIndexË? 
	gfú°Index
 + 
	g°©ic_ˇ°
<
	gödex_t
>(
	ga˘uÆCou¡
Ë: 
ídIndex
;

2305 } 
	gödex
 !
fú°Index
 + 
a˘uÆCou¡
);

2307 
	gMOODYCAMEL_RETHROW
;

2310 
	gblock
->
	gC⁄cuºítQueue
::
Block
::
ãm∂©e
 
£t_m™y_em±y
<
ex∂icô_c⁄ãxt
>(
fú°IndexInBlock
, 
	g°©ic_ˇ°
<
	gsize_t
>(
	gídIndex
 - 
	gfú°IndexInBlock
));

2311 
	gödexIndex
 = (
ödexIndex
 + 1Ë& (
loˇlBlockIndex
->
size
 - 1);

2312 } 
	gödex
 !
fú°Index
 + 
a˘uÆCou¡
);

2314  
	ga˘uÆCou¡
;

2318 
	gthis
->
	gdequeueOvîcommô
.
„tch_add
(
desúedCou¡
, 
°d
::
mem‹y_‹dî_ªÀa£
);

2325 
	g¥iv©e
:

2326 
	sBlockIndexE¡ry


2328 
ödex_t
 
ba£
;

2329 
Block
* 
	gblock
;

2332 
	sBlockIndexHódî


2334 
size_t
 
	gsize
;

2335 
	g°d
::
©omic
<
size_t
> 
‰⁄t
;

2336 
BlockIndexE¡ry
* 
	gíåõs
;

2337 * 
	g¥ev
;

2341 
boﬁ
 
√w_block_ödex
(
size_t
 
numbîOfFûÀdSlŸsToExpo£
)

2343 autÿ
	g¥evBlockSizeMask
 = 
¥_blockIndexSize
 - 1;

2346 
	g¥_blockIndexSize
 <<= 1;

2347 autÿ
	g√wRawPå
 = 
°©ic_ˇ°
<*>((
Tøôs
::
mÆloc
)((
BlockIndexHódî
Ë+ 
°d
::
Æignmít_of
<
BlockIndexE¡ry
>::
vÆue
 - 1 + (BlockIndexE¡ryË* 
¥_blockIndexSize
));

2348 i‡(
	g√wRawPå
 =
nuŒ±r
) {

2349 
¥_blockIndexSize
 >>= 1;

2350  
	gÁl£
;

2353 autÿ
	g√wBlockIndexE¡rõs
 = 
ªöãΩªt_ˇ°
<
BlockIndexE¡ry
*>(
dëaûs
::
Æign_f‹
<BlockIndexE¡ry>(
√wRawPå
 + (
BlockIndexHódî
)));

2356 
size_t
 
	gj
 = 0;

2357 i‡(
	g¥_blockIndexSlŸsU£d
 != 0) {

2358 autÿ
i
 = (
¥_blockIndexFr⁄t
 - 
¥_blockIndexSlŸsU£d
Ë& 
¥evBlockSizeMask
;

2360 
	g√wBlockIndexE¡rõs
[
j
++] = 
¥_blockIndexE¡rõs
[
i
];

2361 
	gi
 = (
i
 + 1Ë& 
¥evBlockSizeMask
;

2362 } 
	gi
 !
¥_blockIndexFr⁄t
);

2366 autÿ
	ghódî
 = 
√w
 (
√wRawPå
Ë
BlockIndexHódî
;

2367 
	ghódî
->
	gsize
 = 
¥_blockIndexSize
;

2368 
	ghódî
->
	g‰⁄t
.
°‹e
(
numbîOfFûÀdSlŸsToExpo£
 - 1, 
°d
::
mem‹y_‹dî_ªœxed
);

2369 
	ghódî
->
	gíåõs
 = 
√wBlockIndexE¡rõs
;

2370 
	ghódî
->
	g¥ev
 = 
¥_blockIndexRaw
;

2372 
	g¥_blockIndexFr⁄t
 = 
j
;

2373 
	g¥_blockIndexE¡rõs
 = 
√wBlockIndexE¡rõs
;

2374 
	g¥_blockIndexRaw
 = 
√wRawPå
;

2375 
	gblockIndex
.
°‹e
(
hódî
, 
°d
::
mem‹y_‹dî_ªÀa£
);

2377  
	gåue
;

2380 
	g¥iv©e
:

2381 
°d
::
©omic
<
BlockIndexHódî
*> 
blockIndex
;

2384 
size_t
 
	g¥_blockIndexSlŸsU£d
;

2385 
size_t
 
	g¥_blockIndexSize
;

2386 
size_t
 
	g¥_blockIndexFr⁄t
;

2387 
BlockIndexE¡ry
* 
	g¥_blockIndexE¡rõs
;

2388 * 
	g¥_blockIndexRaw
;

2390 #ifde‡
MOODYCAMEL_QUEUE_INTERNAL_DEBUG


2391 
	gpublic
:

2392 
Ex∂icôProdu˚r
* 
√xtEx∂icôProdu˚r
;

2393 
	g¥iv©e
:

2396 #ifde‡
MCDBGQ_TRACKMEM


2397 
‰õnd
 
MemSèts
;

2406 
	gIm∂icôProdu˚r
 : 
public
 
Produ˚rBa£


2408 
Im∂icôProdu˚r
(
C⁄cuºítQueue
* 
∑ª¡_
) :

2409 
Produ˚rBa£
(
∑ª¡_
, 
Ál£
),

2410 
√xtBlockIndexC≠acôy
(
IMPLICIT_INITIAL_INDEX_SIZE
),

2411 
blockIndex
(
nuŒ±r
)

2413 
√w_block_ödex
();

2416 ~
Im∂icôProdu˚r
()

2423 #ifde‡
MOODYCAMEL_CPP11_THREAD_LOCAL_SUPPORTED


2425 i‡(!
	gthis
->
	göa˘ive
.
lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
)) {

2426 
dëaûs
::
ThªadExôNŸifõr
::
unsubs¸ibe
(&
thªadExôLi°íî
);

2431 autÿ
	gèû
 = 
this
->
èûIndex
.
lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
);

2432 autÿ
	gödex
 = 
this
->
hódIndex
.
lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
);

2433 
Block
* 
	gblock
 = 
nuŒ±r
;

2434 
as£π
(
ödex
 =
èû
 || 
dëaûs
::
cúcuœr_Àss_th™
(index,Åail));

2435 
boﬁ
 
	gf‹˚FªeLa°Block
 = 
ödex
 !
èû
;

2436 
	gödex
 !
èû
) {

2437 i‡((
ödex
 & 
°©ic_ˇ°
<
ödex_t
>(
BLOCK_SIZE
 - 1)Ë=0 || 
block
 =
nuŒ±r
) {

2438 i‡(
block
 !
nuŒ±r
) {

2440 
this
->
∑ª¡
->
add_block_to_‰ì_li°
(
block
);

2443 
	gblock
 = 
gë_block_ödex_íåy_f‹_ödex
(
ödex
)->
vÆue
.
lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
);

2446 ((*
	gblock
)[
ödex
])->~
T
();

2447 ++
	gödex
;

2452 i‡(
	gthis
->
	gèûBlock
 !
nuŒ±r
 && (
f‹˚FªeLa°Block
 || (
èû
 & 
°©ic_ˇ°
<
ödex_t
>(
BLOCK_SIZE
 - 1)) != 0)) {

2453 
this
->
∑ª¡
->
add_block_to_‰ì_li°
—his->
èûBlock
);

2457 autÿ
	gloˇlBlockIndex
 = 
blockIndex
.
lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
);

2458 i‡(
	gloˇlBlockIndex
 !
nuŒ±r
) {

2459 
size_t
 
i
 = 0; 
	gi
 !
loˇlBlockIndex
->
ˇ∑côy
; ++i) {

2460 
	gloˇlBlockIndex
->
	gödex
[
i
]->~
BlockIndexE¡ry
();

2463 autÿ
	g¥ev
 = 
loˇlBlockIndex
->
¥ev
;

2464 
	gloˇlBlockIndex
->~
BlockIndexHódî
();

2465 (
	gTøôs
::
‰ì
)(
loˇlBlockIndex
);

2466 
	gloˇlBlockIndex
 = 
¥ev
;

2467 } 
	gloˇlBlockIndex
 !
nuŒ±r
);

2471 
	gãm∂©e
<
AŒoˇti⁄Mode
 
	gÆlocMode
, 
ty≥«me
 
	gU
>

2472 
ölöe
 
boﬁ
 
íqueue
(
U
&& 
ñemít
)

2474 
ödex_t
 
	gcuºítTaûIndex
 = 
this
->
èûIndex
.
lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
);

2475 
ödex_t
 
	g√wTaûIndex
 = 1 + 
cuºítTaûIndex
;

2476 i‡((
	gcuºítTaûIndex
 & 
	g°©ic_ˇ°
<
	gödex_t
>(
	gBLOCK_SIZE
 - 1)) == 0) {

2478 autÿ
hód
 = 
this
->
hódIndex
.
lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
);

2479 
as£π
(!
dëaûs
::
cúcuœr_Àss_th™
<
ödex_t
>(
cuºítTaûIndex
, 
hód
));

2480 i‡(!
	gdëaûs
::
cúcuœr_Àss_th™
<
ödex_t
>(
hód
, 
	gcuºítTaûIndex
 + 
	gBLOCK_SIZE
Ë|| (
	gMAX_SUBQUEUE_SIZE
 !
dëaûs
::
c⁄°_numîic_max
<
size_t
>::
vÆue
 && (
MAX_SUBQUEUE_SIZE
 =0 || MAX_SUBQUEUE_SIZE - 
BLOCK_SIZE
 < 
cuºítTaûIndex
 - head))) {

2481  
Ál£
;

2483 #ifde‡
MCDBGQ_NOLOCKFREE_IMPLICITPRODBLOCKINDEX


2484 
	gdebug
::
DebugLock
 
lock
(
muãx
);

2487 
BlockIndexE¡ry
* 
	gidxE¡ry
;

2488 i‡(!
	gö£π_block_ödex_íåy
<
	gÆlocMode
>(
	gidxE¡ry
, 
	gcuºítTaûIndex
)) {

2489  
	gÁl£
;

2493 autÿ
	g√wBlock
 = 
this
->
∑ª¡
->
C⁄cuºítQueue
::
ãm∂©e
 
ªquisôi⁄_block
<
ÆlocMode
>();

2494 i‡(
	g√wBlock
 =
nuŒ±r
) {

2495 
ªwöd_block_ödex_èû
();

2496 
	gidxE¡ry
->
	gvÆue
.
°‹e
(
nuŒ±r
, 
°d
::
mem‹y_‹dî_ªœxed
);

2497  
	gÁl£
;

2499 #ifde‡
MCDBGQ_TRACKMEM


2500 
	g√wBlock
->
	gow√r
 = 
this
;

2502 
	g√wBlock
->
	gC⁄cuºítQueue
::
Block
::
ãm∂©e
 
ª£t_em±y
<
im∂icô_c⁄ãxt
>();

2504 
MOODYCAMEL_CONSTEXPR_IF
 (!
MOODYCAMEL_NOEXCEPT_CTOR
(
T
, 
U
, 
√w
 (
°©ic_ˇ°
<T*>(
nuŒ±r
)ËT(
°d
::
f‹w¨d
<U>(
ñemít
)))) {

2506 
MOODYCAMEL_TRY
 {

2507 
√w
 ((*
√wBlock
)[
cuºítTaûIndex
]Ë
T
(
°d
::
f‹w¨d
<
U
>(
ñemít
));

2509 
MOODYCAMEL_CATCH
 (...) {

2510 
ªwöd_block_ödex_èû
();

2511 
	gidxE¡ry
->
	gvÆue
.
°‹e
(
nuŒ±r
, 
°d
::
mem‹y_‹dî_ªœxed
);

2512 
	gthis
->
	g∑ª¡
->
add_block_to_‰ì_li°
(
√wBlock
);

2513 
	gMOODYCAMEL_RETHROW
;

2518 
	gidxE¡ry
->
	gvÆue
.
°‹e
(
√wBlock
, 
°d
::
mem‹y_‹dî_ªœxed
);

2520 
	gthis
->
	gèûBlock
 = 
√wBlock
;

2522 
MOODYCAMEL_CONSTEXPR_IF
 (!
MOODYCAMEL_NOEXCEPT_CTOR
(
T
, 
U
, 
√w
 (
°©ic_ˇ°
<T*>(
nuŒ±r
)ËT(
°d
::
f‹w¨d
<U>(
ñemít
)))) {

2523 
this
->
èûIndex
.
°‹e
(
√wTaûIndex
, 
°d
::
mem‹y_‹dî_ªÀa£
);

2524  
	gåue
;

2529 
√w
 ((*
this
->
èûBlock
)[
cuºítTaûIndex
]Ë
T
(
°d
::
f‹w¨d
<
U
>(
ñemít
));

2531 
	gthis
->
	gèûIndex
.
°‹e
(
√wTaûIndex
, 
°d
::
mem‹y_‹dî_ªÀa£
);

2532  
	gåue
;

2535 
	gãm∂©e
<
ty≥«me
 
	gU
>

2536 
boﬁ
 
dequeue
(
U
& 
ñemít
)

2539 
ödex_t
 
	gèû
 = 
this
->
èûIndex
.
lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
);

2540 
ödex_t
 
	govîcommô
 = 
this
->
dequeueOvîcommô
.
lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
);

2541 i‡(
	gdëaûs
::
cúcuœr_Àss_th™
<
ödex_t
>(
this
->
dequeueO±imi°icCou¡
.
lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
Ë- 
ovîcommô
, 
	gèû
)) {

2542 
	g°d
::
©omic_thªad_„n˚
(
°d
::
mem‹y_‹dî_acquúe
);

2544 
ödex_t
 
	gmyDequeueCou¡
 = 
this
->
dequeueO±imi°icCou¡
.
„tch_add
(1, 
°d
::
mem‹y_‹dî_ªœxed
);

2545 
	gèû
 = 
this
->
èûIndex
.
lﬂd
(
°d
::
mem‹y_‹dî_acquúe
);

2546 i‡((
	gdëaûs
::
likñy
)(
dëaûs
::
cúcuœr_Àss_th™
<
ödex_t
>(
myDequeueCou¡
 - 
ovîcommô
, 
	gèû
))) {

2547 
ödex_t
 
	gödex
 = 
this
->
hódIndex
.
„tch_add
(1, 
°d
::
mem‹y_‹dî_acq_ªl
);

2550 autÿ
	gíåy
 = 
gë_block_ödex_íåy_f‹_ödex
(
ödex
);

2553 autÿ
	gblock
 = 
íåy
->
vÆue
.
lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
);

2554 auto& 
	gñ
 = *((*
block
)[
ödex
]);

2556 i‡(!
MOODYCAMEL_NOEXCEPT_ASSIGN
(
T
, T&&, 
ñemít
 = 
°d
::
move
(
ñ
))) {

2557 #ifde‡
MCDBGQ_NOLOCKFREE_IMPLICITPRODBLOCKINDEX


2560 
debug
::
DebugLock
 
lock
(
¥odu˚r
->
muãx
);

2562 
	sGu¨d
 {

2563 
Block
* 
	gblock
;

2564 
ödex_t
 
	gödex
;

2565 
BlockIndexE¡ry
* 
	gíåy
;

2566 
C⁄cuºítQueue
* 
	g∑ª¡
;

2568 ~
Gu¨d
()

2570 (*
	gblock
)[
ödex
]->~
T
();

2571 i‡(
	gblock
->
	gC⁄cuºítQueue
::
Block
::
ãm∂©e
 
£t_em±y
<
im∂icô_c⁄ãxt
>(
ödex
)) {

2572 
íåy
->
vÆue
.
°‹e
(
nuŒ±r
, 
°d
::
mem‹y_‹dî_ªœxed
);

2573 
	g∑ª¡
->
add_block_to_‰ì_li°
(
block
);

2576 } 
	ggu¨d
 = { 
block
, 
ödex
, 
íåy
, 
this
->
∑ª¡
 };

2578 
	gñemít
 = 
°d
::
move
(
ñ
);

2581 
	gñemít
 = 
°d
::
move
(
ñ
);

2582 
	gñ
.~
T
();

2584 i‡(
	gblock
->
	gC⁄cuºítQueue
::
Block
::
ãm∂©e
 
£t_em±y
<
im∂icô_c⁄ãxt
>(
ödex
)) {

2586 #ifde‡
MCDBGQ_NOLOCKFREE_IMPLICITPRODBLOCKINDEX


2587 
debug
::
DebugLock
 
lock
(
muãx
);

2590 
	gíåy
->
	gvÆue
.
°‹e
(
nuŒ±r
, 
°d
::
mem‹y_‹dî_ªœxed
);

2592 
	gthis
->
	g∑ª¡
->
add_block_to_‰ì_li°
(
block
);

2596  
	gåue
;

2599 
	gthis
->
	gdequeueOvîcommô
.
„tch_add
(1, 
°d
::
mem‹y_‹dî_ªÀa£
);

2603  
	gÁl£
;

2606 #ifde‡
_MSC_VER


2607 #¥agm®
w¨nög
(
push
)

2608 #¥agm®
w¨nög
(
dißbÀ
: 4706)

2610 
	gãm∂©e
<
AŒoˇti⁄Mode
 
	gÆlocMode
, 
ty≥«me
 
	gIt
>

2611 
boﬁ
 
íqueue_bulk
(
It
 
ôemFú°
, 
size_t
 
cou¡
)

2622 
ödex_t
 
	g°¨tTaûIndex
 = 
this
->
èûIndex
.
lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
);

2623 autÿ
	g°¨tBlock
 = 
this
->
èûBlock
;

2624 
Block
* 
	gfú°AŒoˇãdBlock
 = 
nuŒ±r
;

2625 autÿ
	gídBlock
 = 
this
->
èûBlock
;

2628 
size_t
 
	gblockBa£Diff
 = ((
°¨tTaûIndex
 + 
cou¡
 - 1Ë& ~
°©ic_ˇ°
<
ödex_t
>(
BLOCK_SIZE
 - 1)) - ((startTailIndex - 1) & ~static_cast<index_t>(BLOCK_SIZE - 1));

2629 
ödex_t
 
	gcuºítTaûIndex
 = (
°¨tTaûIndex
 - 1Ë& ~
°©ic_ˇ°
<ödex_t>(
BLOCK_SIZE
 - 1);

2630 i‡(
	gblockBa£Diff
 > 0) {

2631 #ifde‡
MCDBGQ_NOLOCKFREE_IMPLICITPRODBLOCKINDEX


2632 
	gdebug
::
DebugLock
 
lock
(
muãx
);

2635 
	gblockBa£Diff
 -
°©ic_ˇ°
<
ödex_t
>(
BLOCK_SIZE
);

2636 
	gcuºítTaûIndex
 +
°©ic_ˇ°
<
ödex_t
>(
BLOCK_SIZE
);

2639 
BlockIndexE¡ry
* 
	gidxE¡ry
 = 
nuŒ±r
;

2640 
Block
* 
	g√wBlock
;

2641 
boﬁ
 
	gödexIn£πed
 = 
Ál£
;

2642 autÿ
	ghód
 = 
this
->
hódIndex
.
lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
);

2643 
as£π
(!
dëaûs
::
cúcuœr_Àss_th™
<
ödex_t
>(
cuºítTaûIndex
, 
hód
));

2644 
boﬁ
 
	gfuŒ
 = !
dëaûs
::
cúcuœr_Àss_th™
<
ödex_t
>(
hód
, 
	gcuºítTaûIndex
 + 
	gBLOCK_SIZE
Ë|| (
	gMAX_SUBQUEUE_SIZE
 !dëaûs::
c⁄°_numîic_max
<
size_t
>::
vÆue
 && (
MAX_SUBQUEUE_SIZE
 =0 || MAX_SUBQUEUE_SIZE - 
BLOCK_SIZE
 < 
cuºítTaûIndex
 - head));

2646 i‡(
	gfuŒ
 || !(
	gödexIn£πed
 = 
ö£π_block_ödex_íåy
<
ÆlocMode
>(
idxE¡ry
, 
	gcuºítTaûIndex
)Ë|| (
	g√wBlock
 = 
this
->
∑ª¡
->
C⁄cuºítQueue
::
ãm∂©e
 
ªquisôi⁄_block
<ÆlocMode>()Ë=
nuŒ±r
) {

2649 i‡(
ödexIn£πed
) {

2650 
ªwöd_block_ödex_èû
();

2651 
	gidxE¡ry
->
	gvÆue
.
°‹e
(
nuŒ±r
, 
°d
::
mem‹y_‹dî_ªœxed
);

2653 
	gcuºítTaûIndex
 = (
°¨tTaûIndex
 - 1Ë& ~
°©ic_ˇ°
<
ödex_t
>(
BLOCK_SIZE
 - 1);

2654 autÿ
	gblock
 = 
fú°AŒoˇãdBlock
; block !
nuŒ±r
; block = 
block
->
√xt
) {

2655 
cuºítTaûIndex
 +
°©ic_ˇ°
<
ödex_t
>(
BLOCK_SIZE
);

2656 
	gidxE¡ry
 = 
gë_block_ödex_íåy_f‹_ödex
(
cuºítTaûIndex
);

2657 
	gidxE¡ry
->
	gvÆue
.
°‹e
(
nuŒ±r
, 
°d
::
mem‹y_‹dî_ªœxed
);

2658 
ªwöd_block_ödex_èû
();

2660 
	gthis
->
	g∑ª¡
->
add_blocks_to_‰ì_li°
(
fú°AŒoˇãdBlock
);

2661 
	gthis
->
	gèûBlock
 = 
°¨tBlock
;

2663  
	gÁl£
;

2666 #ifde‡
MCDBGQ_TRACKMEM


2667 
	g√wBlock
->
	gow√r
 = 
this
;

2669 
	g√wBlock
->
	gC⁄cuºítQueue
::
Block
::
ãm∂©e
 
ª£t_em±y
<
im∂icô_c⁄ãxt
>();

2670 
	g√wBlock
->
	g√xt
 = 
nuŒ±r
;

2673 
	gidxE¡ry
->
	gvÆue
.
°‹e
(
√wBlock
, 
°d
::
mem‹y_‹dî_ªœxed
);

2677 i‡((
	g°¨tTaûIndex
 & 
	g°©ic_ˇ°
<
	gödex_t
>(
	gBLOCK_SIZE
 - 1)Ë!0 || 
fú°AŒoˇãdBlock
 !
nuŒ±r
) {

2678 
as£π
(
this
->
èûBlock
 !
nuŒ±r
);

2679 
	gthis
->
	gèûBlock
->
	g√xt
 = 
√wBlock
;

2681 
	gthis
->
	gèûBlock
 = 
√wBlock
;

2682 
	gídBlock
 = 
√wBlock
;

2683 
	gfú°AŒoˇãdBlock
 = 
fú°AŒoˇãdBlock
 =
nuŒ±r
 ? 
√wBlock
 : firstAllocatedBlock;

2684 } 
	gblockBa£Diff
 > 0);

2688 
ödex_t
 
	g√wTaûIndex
 = 
°¨tTaûIndex
 + 
°©ic_ˇ°
<ödex_t>(
cou¡
);

2689 
	gcuºítTaûIndex
 = 
°¨tTaûIndex
;

2690 
	gthis
->
	gèûBlock
 = 
°¨tBlock
;

2691 
as£π
((
°¨tTaûIndex
 & 
°©ic_ˇ°
<
ödex_t
>(
BLOCK_SIZE
 - 1)Ë!0 || 
fú°AŒoˇãdBlock
 !
nuŒ±r
 || 
cou¡
 == 0);

2692 i‡((
	g°¨tTaûIndex
 & 
	g°©ic_ˇ°
<
	gödex_t
>(
	gBLOCK_SIZE
 - 1)Ë=0 && 
fú°AŒoˇãdBlock
 !
nuŒ±r
) {

2693 
this
->
èûBlock
 = 
fú°AŒoˇãdBlock
;

2695 
	gåue
) {

2696 
ödex_t
 
	g°›Index
 = (
cuºítTaûIndex
 & ~
°©ic_ˇ°
<ödex_t>(
BLOCK_SIZE
 - 1)) + static_cast<index_t>(BLOCK_SIZE);

2697 i‡(
	gdëaûs
::
cúcuœr_Àss_th™
<
ödex_t
>(
√wTaûIndex
, 
	g°›Index
)) {

2698 
	g°›Index
 = 
√wTaûIndex
;

2700 
MOODYCAMEL_CONSTEXPR_IF
 (
MOODYCAMEL_NOEXCEPT_CTOR
(
T
, 
de˛ty≥
(*
ôemFú°
), 
√w
 (
°©ic_ˇ°
<T*>(
nuŒ±r
)ËT(
dëaûs
::
dîef_n€x˚±
(itemFirst)))) {

2701 
cuºítTaûIndex
 !
°›Index
) {

2702 
√w
 ((*
this
->
èûBlock
)[
cuºítTaûIndex
++]Ë
T
(*
ôemFú°
++);

2706 
	gMOODYCAMEL_TRY
 {

2707 
	gcuºítTaûIndex
 !
°›Index
) {

2708 
√w
 ((*
this
->
èûBlock
)[
cuºítTaûIndex
]Ë
T
(
dëaûs
::
nomove_if
<!
MOODYCAMEL_NOEXCEPT_CTOR
(T, 
de˛ty≥
(*
ôemFú°
),Çew (
°©ic_ˇ°
<T*>(
nuŒ±r
)ËT(dëaûs::
dîef_n€x˚±
(ôemFú°)))>::
evÆ
(*itemFirst));

2709 ++
	gcuºítTaûIndex
;

2710 ++
	gôemFú°
;

2713 
MOODYCAMEL_CATCH
 (...) {

2714 autÿ
	gc⁄°ru˘edSt›Index
 = 
cuºítTaûIndex
;

2715 autÿ
	gœ°BlockEnqueued
 = 
this
->
èûBlock
;

2717 i‡(!
	gdëaûs
::
is_åivüŒy_de°ru˘ibÀ
<
T
>::
vÆue
) {

2718 autÿ
block
 = 
°¨tBlock
;

2719 i‡((
	g°¨tTaûIndex
 & 
	g°©ic_ˇ°
<
	gödex_t
>(
	gBLOCK_SIZE
 - 1)) == 0) {

2720 
block
 = 
fú°AŒoˇãdBlock
;

2722 
	gcuºítTaûIndex
 = 
°¨tTaûIndex
;

2723 
	gåue
) {

2724 
	g°›Index
 = (
cuºítTaûIndex
 & ~
°©ic_ˇ°
<
ödex_t
>(
BLOCK_SIZE
 - 1)) + static_cast<index_t>(BLOCK_SIZE);

2725 i‡(
	gdëaûs
::
cúcuœr_Àss_th™
<
ödex_t
>(
c⁄°ru˘edSt›Index
, 
	g°›Index
)) {

2726 
	g°›Index
 = 
c⁄°ru˘edSt›Index
;

2728 
	gcuºítTaûIndex
 !
°›Index
) {

2729 (*
block
)[
cuºítTaûIndex
++]->~
T
();

2731 i‡(
	gblock
 =
œ°BlockEnqueued
) {

2734 
	gblock
 = 
block
->
√xt
;

2738 
	gcuºítTaûIndex
 = (
°¨tTaûIndex
 - 1Ë& ~
°©ic_ˇ°
<
ödex_t
>(
BLOCK_SIZE
 - 1);

2739 autÿ
	gblock
 = 
fú°AŒoˇãdBlock
; block !
nuŒ±r
; block = 
block
->
√xt
) {

2740 
cuºítTaûIndex
 +
°©ic_ˇ°
<
ödex_t
>(
BLOCK_SIZE
);

2741 autÿ
	gidxE¡ry
 = 
gë_block_ödex_íåy_f‹_ödex
(
cuºítTaûIndex
);

2742 
	gidxE¡ry
->
	gvÆue
.
°‹e
(
nuŒ±r
, 
°d
::
mem‹y_‹dî_ªœxed
);

2743 
ªwöd_block_ödex_èû
();

2745 
	gthis
->
	g∑ª¡
->
add_blocks_to_‰ì_li°
(
fú°AŒoˇãdBlock
);

2746 
	gthis
->
	gèûBlock
 = 
°¨tBlock
;

2747 
	gMOODYCAMEL_RETHROW
;

2751 i‡(
	gthis
->
	gèûBlock
 =
ídBlock
) {

2752 
as£π
(
cuºítTaûIndex
 =
√wTaûIndex
);

2755 
	gthis
->
	gèûBlock
 = 
this
->
èûBlock
->
√xt
;

2757 
	gthis
->
	gèûIndex
.
°‹e
(
√wTaûIndex
, 
°d
::
mem‹y_‹dî_ªÀa£
);

2758  
	gåue
;

2760 #ifde‡
_MSC_VER


2761 #¥agm®
w¨nög
(
p›
)

2764 
	gãm∂©e
<
ty≥«me
 
	gIt
>

2765 
size_t
 
dequeue_bulk
(
It
& 
ôemFú°
, size_à
max
)

2767 autÿ
	gèû
 = 
this
->
èûIndex
.
lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
);

2768 autÿ
	govîcommô
 = 
this
->
dequeueOvîcommô
.
lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
);

2769 autÿ
	gdesúedCou¡
 = 
°©ic_ˇ°
<
size_t
>(
èû
 - (
this
->
dequeueO±imi°icCou¡
.
lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
Ë- 
ovîcommô
));

2770 i‡(
	gdëaûs
::
cúcuœr_Àss_th™
<
size_t
>(0, 
	gdesúedCou¡
)) {

2771 
	gdesúedCou¡
 = 
desúedCou¡
 < 
max
 ? desiredCount : max;

2772 
	g°d
::
©omic_thªad_„n˚
(
°d
::
mem‹y_‹dî_acquúe
);

2774 autÿ
	gmyDequeueCou¡
 = 
this
->
dequeueO±imi°icCou¡
.
„tch_add
(
desúedCou¡
, 
°d
::
mem‹y_‹dî_ªœxed
);

2776 
	gèû
 = 
this
->
èûIndex
.
lﬂd
(
°d
::
mem‹y_‹dî_acquúe
);

2777 autÿ
	ga˘uÆCou¡
 = 
°©ic_ˇ°
<
size_t
>(
èû
 - (
myDequeueCou¡
 - 
ovîcommô
));

2778 i‡(
	gdëaûs
::
cúcuœr_Àss_th™
<
size_t
>(0, 
	ga˘uÆCou¡
)) {

2779 
	ga˘uÆCou¡
 = 
desúedCou¡
 < 
a˘uÆCou¡
 ? desiredCount :áctualCount;

2780 i‡(
	ga˘uÆCou¡
 < 
	gdesúedCou¡
) {

2781 
	gthis
->
	gdequeueOvîcommô
.
„tch_add
(
desúedCou¡
 - 
a˘uÆCou¡
, 
°d
::
mem‹y_‹dî_ªÀa£
);

2786 autÿ
	gfú°Index
 = 
this
->
hódIndex
.
„tch_add
(
a˘uÆCou¡
, 
°d
::
mem‹y_‹dî_acq_ªl
);

2789 autÿ
	gödex
 = 
fú°Index
;

2790 
BlockIndexHódî
* 
	gloˇlBlockIndex
;

2791 autÿ
	gödexIndex
 = 
gë_block_ödex_ödex_f‹_ödex
(
ödex
, 
loˇlBlockIndex
);

2793 autÿ
	gblockSèπIndex
 = 
ödex
;

2794 
ödex_t
 
	gídIndex
 = (
ödex
 & ~
°©ic_ˇ°
<ödex_t>(
BLOCK_SIZE
 - 1)) + static_cast<index_t>(BLOCK_SIZE);

2795 
	gídIndex
 = 
dëaûs
::
cúcuœr_Àss_th™
<
ödex_t
>(
fú°Index
 + 
°©ic_ˇ°
<ödex_t>(
a˘uÆCou¡
),ÉndIndexË? 
	gfú°Index
 + 
	g°©ic_ˇ°
<
	gödex_t
>(
	ga˘uÆCou¡
Ë: 
ídIndex
;

2797 autÿ
	gíåy
 = 
loˇlBlockIndex
->
ödex
[
ödexIndex
];

2798 autÿ
	gblock
 = 
íåy
->
vÆue
.
lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
);

2799 i‡(
MOODYCAMEL_NOEXCEPT_ASSIGN
(
T
, T&&, 
dëaûs
::
dîef_n€x˚±
(
ôemFú°
Ë
°d
::
move
((*(*
block
)[
ödex
])))) {

2800 
ödex
 !
ídIndex
) {

2801 auto& 
ñ
 = *((*
block
)[
ödex
]);

2802 *
	gôemFú°
++ = 
°d
::
move
(
ñ
);

2803 
	gñ
.~
T
();

2804 ++
	gödex
;

2808 
	gMOODYCAMEL_TRY
 {

2809 
	gödex
 !
ídIndex
) {

2810 auto& 
ñ
 = *((*
block
)[
ödex
]);

2811 *
	gôemFú°
 = 
°d
::
move
(
ñ
);

2812 ++
	gôemFú°
;

2813 
	gñ
.~
T
();

2814 ++
	gödex
;

2817 
MOODYCAMEL_CATCH
 (...) {

2819 
	gíåy
 = 
loˇlBlockIndex
->
ödex
[
ödexIndex
];

2820 
	gblock
 = 
íåy
->
vÆue
.
lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
);

2821 
	gödex
 !
ídIndex
) {

2822 (*
block
)[
ödex
++]->~
T
();

2825 i‡(
	gblock
->
	gC⁄cuºítQueue
::
Block
::
ãm∂©e
 
£t_m™y_em±y
<
im∂icô_c⁄ãxt
>(
blockSèπIndex
, 
	g°©ic_ˇ°
<
	gsize_t
>(
	gídIndex
 - 
	gblockSèπIndex
))) {

2826 #ifde‡
MCDBGQ_NOLOCKFREE_IMPLICITPRODBLOCKINDEX


2827 
	gdebug
::
DebugLock
 
lock
(
muãx
);

2829 
	gíåy
->
	gvÆue
.
°‹e
(
nuŒ±r
, 
°d
::
mem‹y_‹dî_ªœxed
);

2830 
	gthis
->
	g∑ª¡
->
add_block_to_‰ì_li°
(
block
);

2832 
	gödexIndex
 = (
ödexIndex
 + 1Ë& (
loˇlBlockIndex
->
ˇ∑côy
 - 1);

2834 
	gblockSèπIndex
 = 
ödex
;

2835 
	gídIndex
 = (
ödex
 & ~
°©ic_ˇ°
<
ödex_t
>(
BLOCK_SIZE
 - 1)) + static_cast<index_t>(BLOCK_SIZE);

2836 
	gídIndex
 = 
dëaûs
::
cúcuœr_Àss_th™
<
ödex_t
>(
fú°Index
 + 
°©ic_ˇ°
<ödex_t>(
a˘uÆCou¡
),ÉndIndexË? 
	gfú°Index
 + 
	g°©ic_ˇ°
<
	gödex_t
>(
	ga˘uÆCou¡
Ë: 
ídIndex
;

2837 } 
	gödex
 !
fú°Index
 + 
a˘uÆCou¡
);

2839 
	gMOODYCAMEL_RETHROW
;

2842 i‡(
	gblock
->
	gC⁄cuºítQueue
::
Block
::
ãm∂©e
 
£t_m™y_em±y
<
im∂icô_c⁄ãxt
>(
blockSèπIndex
, 
	g°©ic_ˇ°
<
	gsize_t
>(
	gídIndex
 - 
	gblockSèπIndex
))) {

2844 #ifde‡
MCDBGQ_NOLOCKFREE_IMPLICITPRODBLOCKINDEX


2845 
	gdebug
::
DebugLock
 
lock
(
muãx
);

2849 
	gíåy
->
	gvÆue
.
°‹e
(
nuŒ±r
, 
°d
::
mem‹y_‹dî_ªœxed
);

2851 
	gthis
->
	g∑ª¡
->
add_block_to_‰ì_li°
(
block
);

2853 
	gödexIndex
 = (
ödexIndex
 + 1Ë& (
loˇlBlockIndex
->
ˇ∑côy
 - 1);

2854 } 
	gödex
 !
fú°Index
 + 
a˘uÆCou¡
);

2856  
	ga˘uÆCou¡
;

2859 
	gthis
->
	gdequeueOvîcommô
.
„tch_add
(
desúedCou¡
, 
°d
::
mem‹y_‹dî_ªÀa£
);

2866 
	g¥iv©e
:

2868 c⁄° 
ödex_t
 
INVALID_BLOCK_BASE
 = 1;

2870 
	sBlockIndexE¡ry


2872 
	g°d
::
©omic
<
ödex_t
> 
key
;

2873 
	g°d
::
©omic
<
Block
*> 
vÆue
;

2876 
	sBlockIndexHódî


2878 
size_t
 
	gˇ∑côy
;

2879 
	g°d
::
©omic
<
size_t
> 
èû
;

2880 
BlockIndexE¡ry
* 
	gíåõs
;

2881 
BlockIndexE¡ry
** 
	gödex
;

2882 
BlockIndexHódî
* 
	g¥ev
;

2885 
	gãm∂©e
<
AŒoˇti⁄Mode
 
	gÆlocMode
>

2886 
ölöe
 
boﬁ
 
ö£π_block_ödex_íåy
(
BlockIndexE¡ry
*& 
idxE¡ry
, 
ödex_t
 
blockSèπIndex
)

2888 autÿ
	gloˇlBlockIndex
 = 
blockIndex
.
lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
);

2889 i‡(
	gloˇlBlockIndex
 =
nuŒ±r
) {

2890  
Ál£
;

2892 
size_t
 
	g√wTaû
 = (
loˇlBlockIndex
->
èû
.
lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
Ë+ 1Ë& (loˇlBlockIndex->
ˇ∑côy
 - 1);

2893 
	gidxE¡ry
 = 
loˇlBlockIndex
->
ödex
[
√wTaû
];

2894 i‡(
	gidxE¡ry
->
	gkey
.
lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
Ë=
INVALID_BLOCK_BASE
 ||

2895 
idxE¡ry
->
vÆue
.
lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
Ë=
nuŒ±r
) {

2897 
idxE¡ry
->
key
.
°‹e
(
blockSèπIndex
, 
°d
::
mem‹y_‹dî_ªœxed
);

2898 
	gloˇlBlockIndex
->
	gèû
.
°‹e
(
√wTaû
, 
°d
::
mem‹y_‹dî_ªÀa£
);

2899  
	gåue
;

2903 
MOODYCAMEL_CONSTEXPR_IF
 (
ÆlocMode
 =
C™nŸAŒoc
) {

2904  
Ál£
;

2906 i‡(!
√w_block_ödex
()) {

2907  
	gÁl£
;

2909 
	gloˇlBlockIndex
 = 
blockIndex
.
lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
);

2910 
	g√wTaû
 = (
loˇlBlockIndex
->
èû
.
lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
Ë+ 1Ë& (loˇlBlockIndex->
ˇ∑côy
 - 1);

2911 
	gidxE¡ry
 = 
loˇlBlockIndex
->
ödex
[
√wTaû
];

2912 
as£π
(
idxE¡ry
->
key
.
lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
Ë=
INVALID_BLOCK_BASE
);

2913 
	gidxE¡ry
->
	gkey
.
°‹e
(
blockSèπIndex
, 
°d
::
mem‹y_‹dî_ªœxed
);

2914 
	gloˇlBlockIndex
->
	gèû
.
°‹e
(
√wTaû
, 
°d
::
mem‹y_‹dî_ªÀa£
);

2915  
	gåue
;

2918 
ölöe
 
ªwöd_block_ödex_èû
()

2920 autÿ
	gloˇlBlockIndex
 = 
blockIndex
.
lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
);

2921 
	gloˇlBlockIndex
->
	gèû
.
°‹e
((
loˇlBlockIndex
->
èû
.
lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
Ë- 1Ë& (loˇlBlockIndex->
ˇ∑côy
 - 1), std::memory_order_relaxed);

2924 
ölöe
 
BlockIndexE¡ry
* 
gë_block_ödex_íåy_f‹_ödex
(
ödex_t
 
ödex
) const

2926 
BlockIndexHódî
* 
	gloˇlBlockIndex
;

2927 autÿ
	gidx
 = 
gë_block_ödex_ödex_f‹_ödex
(
ödex
, 
loˇlBlockIndex
);

2928  
	gloˇlBlockIndex
->
	gödex
[
idx
];

2931 
ölöe
 
size_t
 
gë_block_ödex_ödex_f‹_ödex
(
ödex_t
 
ödex
, 
BlockIndexHódî
*& 
loˇlBlockIndex
) const

2933 #ifde‡
MCDBGQ_NOLOCKFREE_IMPLICITPRODBLOCKINDEX


2934 
	gdebug
::
DebugLock
 
lock
(
muãx
);

2936 
	gödex
 &~
°©ic_ˇ°
<
ödex_t
>(
BLOCK_SIZE
 - 1);

2937 
	gloˇlBlockIndex
 = 
blockIndex
.
lﬂd
(
°d
::
mem‹y_‹dî_acquúe
);

2938 autÿ
	gèû
 = 
loˇlBlockIndex
->
èû
.
lﬂd
(
°d
::
mem‹y_‹dî_acquúe
);

2939 autÿ
	gèûBa£
 = 
loˇlBlockIndex
->
ödex
[
èû
]->
key
.
lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
);

2940 
as£π
(
èûBa£
 !
INVALID_BLOCK_BASE
);

2943 autÿ
	goff£t
 = 
°©ic_ˇ°
<
size_t
>(°©ic_ˇ°<
ty≥«me
 
°d
::
make_sig√d
<
ödex_t
>::
ty≥
>(
ödex
 - 
èûBa£
Ë/ 
BLOCK_SIZE
);

2944 
size_t
 
	gidx
 = (
èû
 + 
off£t
Ë& (
loˇlBlockIndex
->
ˇ∑côy
 - 1);

2945 
as£π
(
loˇlBlockIndex
->
ödex
[
idx
]->
key
.
lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
Ë=ödex &&ÜoˇlBlockIndex->ödex[idx]->
vÆue
.lﬂd(°d::mem‹y_‹dî_ªœxedË!
nuŒ±r
);

2946  
	gidx
;

2949 
boﬁ
 
√w_block_ödex
()

2951 autÿ
	g¥ev
 = 
blockIndex
.
lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
);

2952 
size_t
 
	g¥evC≠acôy
 = 
¥ev
 =
nuŒ±r
 ? 0 :Öªv->
ˇ∑côy
;

2953 autÿ
	gíåyCou¡
 = 
¥ev
 =
nuŒ±r
 ? 
√xtBlockIndexC≠acôy
 : 
¥evC≠acôy
;

2954 autÿ
	gøw
 = 
°©ic_ˇ°
<*>((
Tøôs
::
mÆloc
)(

2955 (
BlockIndexHódî
) +

2956 
°d
::
Æignmít_of
<
BlockIndexE¡ry
>::
vÆue
 - 1 + (BlockIndexE¡ryË* 
íåyCou¡
 +

2957 
°d
::
Æignmít_of
<
BlockIndexE¡ry
*>::
vÆue
 - 1 + (BlockIndexE¡ry*Ë* 
√xtBlockIndexC≠acôy
));

2958 i‡(
	gøw
 =
nuŒ±r
) {

2959  
Ál£
;

2962 autÿ
	ghódî
 = 
√w
 (
øw
Ë
BlockIndexHódî
;

2963 autÿ
	gíåõs
 = 
ªöãΩªt_ˇ°
<
BlockIndexE¡ry
*>(
dëaûs
::
Æign_f‹
<BlockIndexE¡ry>(
øw
 + (
BlockIndexHódî
)));

2964 autÿ
	gödex
 = 
ªöãΩªt_ˇ°
<
BlockIndexE¡ry
**>(
dëaûs
::
Æign_f‹
<BlockIndexE¡ry*>‘eöãΩªt_ˇ°<*>(
íåõs
Ë+ (BlockIndexE¡ryË* 
íåyCou¡
));

2965 i‡(
	g¥ev
 !
nuŒ±r
) {

2966 autÿ
¥evTaû
 = 
¥ev
->
èû
.
lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
);

2967 autÿ
	g¥evPos
 = 
¥evTaû
;

2968 
size_t
 
	gi
 = 0;

2970 
	g¥evPos
 = (
¥evPos
 + 1Ë& (
¥ev
->
ˇ∑côy
 - 1);

2971 
	gödex
[
i
++] = 
¥ev
->
ödex
[
¥evPos
];

2972 } 
	g¥evPos
 !
¥evTaû
);

2973 
as£π
(
i
 =
¥evC≠acôy
);

2975 
size_t
 
	gi
 = 0; i !
íåyCou¡
; ++i) {

2976 
√w
 (
íåõs
 + 
i
Ë
	gBlockIndexE¡ry
;

2977 
	gíåõs
[
i
].
	gkey
.
°‹e
(
INVALID_BLOCK_BASE
, 
°d
::
mem‹y_‹dî_ªœxed
);

2978 
	gödex
[
¥evC≠acôy
 + 
i
] = 
íåõs
 + i;

2980 
	ghódî
->
	g¥ev
 = 
¥ev
;

2981 
	ghódî
->
	gíåõs
 = 
íåõs
;

2982 
	ghódî
->
	gödex
 = 
ödex
;

2983 
	ghódî
->
	gˇ∑côy
 = 
√xtBlockIndexC≠acôy
;

2984 
	ghódî
->
	gèû
.
°‹e
((
¥evC≠acôy
 - 1Ë& (
√xtBlockIndexC≠acôy
 - 1), 
°d
::
mem‹y_‹dî_ªœxed
);

2986 
	gblockIndex
.
°‹e
(
hódî
, 
°d
::
mem‹y_‹dî_ªÀa£
);

2988 
	g√xtBlockIndexC≠acôy
 <<= 1;

2990  
	gåue
;

2993 
	g¥iv©e
:

2994 
size_t
 
√xtBlockIndexC≠acôy
;

2995 
	g°d
::
©omic
<
BlockIndexHódî
*> 
blockIndex
;

2997 #ifde‡
MOODYCAMEL_CPP11_THREAD_LOCAL_SUPPORTED


2998 
	gpublic
:

2999 
dëaûs
::
ThªadExôLi°íî
 
thªadExôLi°íî
;

3000 
	g¥iv©e
:

3003 #ifde‡
MOODYCAMEL_QUEUE_INTERNAL_DEBUG


3004 
public
:

3005 
Im∂icôProdu˚r
* 
√xtIm∂icôProdu˚r
;

3006 
	g¥iv©e
:

3009 #ifde‡
MCDBGQ_NOLOCKFREE_IMPLICITPRODBLOCKINDEX


3010 
muèbÀ
 
debug
::
DebugMuãx
 
muãx
;

3012 #ifde‡
MCDBGQ_TRACKMEM


3013 
‰õnd
 
	gMemSèts
;

3022 
p›uœã_öôül_block_li°
(
size_t
 
blockCou¡
)

3024 
	göôülBlockPoﬁSize
 = 
blockCou¡
;

3025 i‡(
	göôülBlockPoﬁSize
 == 0) {

3026 
öôülBlockPoﬁ
 = 
nuŒ±r
;

3030 
	göôülBlockPoﬁ
 = 
¸óã_¨øy
<
Block
>(
blockCou¡
);

3031 i‡(
	göôülBlockPoﬁ
 =
nuŒ±r
) {

3032 
öôülBlockPoﬁSize
 = 0;

3034 
size_t
 
	gi
 = 0; i < 
	göôülBlockPoﬁSize
; ++i) {

3035 
	göôülBlockPoﬁ
[
i
].
	gdy«miˇŒyAŒoˇãd
 = 
Ál£
;

3039 
ölöe
 
Block
* 
åy_gë_block_‰om_öôül_poﬁ
()

3041 i‡(
	göôülBlockPoﬁIndex
.
lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
Ë>
öôülBlockPoﬁSize
) {

3042  
nuŒ±r
;

3045 autÿ
	gödex
 = 
öôülBlockPoﬁIndex
.
„tch_add
(1, 
°d
::
mem‹y_‹dî_ªœxed
);

3047  
	gödex
 < 
	göôülBlockPoﬁSize
 ? (
	göôülBlockPoﬁ
 + indexË: 
nuŒ±r
;

3050 
ölöe
 
add_block_to_‰ì_li°
(
Block
* 
block
)

3052 #ifde‡
MCDBGQ_TRACKMEM


3053 
	gblock
->
	gow√r
 = 
nuŒ±r
;

3055 
	g‰ìLi°
.
add
(
block
);

3058 
ölöe
 
add_blocks_to_‰ì_li°
(
Block
* 
block
)

3060 
	gblock
 !
nuŒ±r
) {

3061 autÿ
√xt
 = 
block
->next;

3062 
add_block_to_‰ì_li°
(
block
);

3063 
	gblock
 = 
√xt
;

3067 
ölöe
 
Block
* 
åy_gë_block_‰om_‰ì_li°
()

3069  
	g‰ìLi°
.
åy_gë
();

3073 
	gãm∂©e
<
AŒoˇti⁄Mode
 
	gˇnAŒoc
>

3074 
Block
* 
ªquisôi⁄_block
()

3076 autÿ
	gblock
 = 
åy_gë_block_‰om_öôül_poﬁ
();

3077 i‡(
	gblock
 !
nuŒ±r
) {

3078  
block
;

3081 
	gblock
 = 
åy_gë_block_‰om_‰ì_li°
();

3082 i‡(
	gblock
 !
nuŒ±r
) {

3083  
block
;

3086 
MOODYCAMEL_CONSTEXPR_IF
 (
ˇnAŒoc
 =
C™AŒoc
) {

3087  
¸óã
<
Block
>();

3090  
	gnuŒ±r
;

3095 #ifde‡
MCDBGQ_TRACKMEM


3096 
	gpublic
:

3097 
	sMemSèts
 {

3098 
size_t
 
ÆloˇãdBlocks
;

3099 
size_t
 
	gu£dBlocks
;

3100 
size_t
 
	g‰ìBlocks
;

3101 
size_t
 
	gow√dBlocksEx∂icô
;

3102 
size_t
 
	gow√dBlocksIm∂icô
;

3103 
size_t
 
	gim∂icôProdu˚rs
;

3104 
size_t
 
	gex∂icôProdu˚rs
;

3105 
size_t
 
	gñemítsEnqueued
;

3106 
size_t
 
	gblockCœssByãs
;

3107 
size_t
 
	gqueueCœssByãs
;

3108 
size_t
 
	gim∂icôBlockIndexByãs
;

3109 
size_t
 
	gex∂icôBlockIndexByãs
;

3111 
‰õnd
 
˛ass
 
	gC⁄cuºítQueue
;

3113 
	g¥iv©e
:

3114 
MemSèts
 
gëF‹
(
C⁄cuºítQueue
* 
q
)

3116 
MemSèts
 
°©s
 = { 0 };

3118 
	g°©s
.
	gñemítsEnqueued
 = 
q
->
size_≠¥ox
();

3120 autÿ
	gblock
 = 
q
->
‰ìLi°
.
hód_unß„
();

3121 
	gblock
 !
nuŒ±r
) {

3122 ++
°©s
.
ÆloˇãdBlocks
;

3123 ++
	g°©s
.
	g‰ìBlocks
;

3124 
	gblock
 = 
block
->
‰ìLi°Next
.
lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
);

3127 autÿ
	g±r
 = 
q
->
¥odu˚rLi°Taû
.
lﬂd
(
°d
::
mem‹y_‹dî_acquúe
);Öå !
nuŒ±r
;Öå = 
±r
->
√xt_¥od
()) {

3128 
boﬁ
 
im∂icô
 = 
dy«mic_ˇ°
<
Im∂icôProdu˚r
*>(
±r
Ë!
nuŒ±r
;

3129 
	g°©s
.
	gim∂icôProdu˚rs
 +
im∂icô
 ? 1 : 0;

3130 
	g°©s
.
	gex∂icôProdu˚rs
 +
im∂icô
 ? 0 : 1;

3132 i‡(
	gim∂icô
) {

3133 autÿ
	g¥od
 = 
°©ic_ˇ°
<
Im∂icôProdu˚r
*>(
±r
);

3134 
	g°©s
.
	gqueueCœssByãs
 +(
Im∂icôProdu˚r
);

3135 autÿ
	ghód
 = 
¥od
->
hódIndex
.
lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
);

3136 autÿ
	gèû
 = 
¥od
->
èûIndex
.
lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
);

3137 autÿ
	ghash
 = 
¥od
->
blockIndex
.
lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
);

3138 i‡(
	ghash
 !
nuŒ±r
) {

3139 
size_t
 
i
 = 0; 
	gi
 !
hash
->
ˇ∑côy
; ++i) {

3140 i‡(
	ghash
->
	gödex
[
i
]->
	gkey
.
lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
Ë!
Im∂icôProdu˚r
::
INVALID_BLOCK_BASE
 && 
hash
->
ödex
[i]->
vÆue
.lﬂd(°d::mem‹y_‹dî_ªœxedË!
nuŒ±r
) {

3141 ++
°©s
.
ÆloˇãdBlocks
;

3142 ++
	g°©s
.
	gow√dBlocksIm∂icô
;

3145 
	g°©s
.
	gim∂icôBlockIndexByãs
 +
hash
->
ˇ∑côy
 * (
ty≥«me
 
Im∂icôProdu˚r
::
BlockIndexE¡ry
);

3146 ; 
	ghash
 !
nuŒ±r
; hash = 
hash
->
¥ev
) {

3147 
°©s
.
im∂icôBlockIndexByãs
 +(
ty≥«me
 
Im∂icôProdu˚r
::
BlockIndexHódî
Ë+ 
hash
->
ˇ∑côy
 * —y≥«mêIm∂icôProdu˚r::
BlockIndexE¡ry
*);

3150 ; 
	gdëaûs
::
cúcuœr_Àss_th™
<
ödex_t
>(
hód
, 
	gèû
); 
	ghód
 +
BLOCK_SIZE
) {

3152 ++
°©s
.
u£dBlocks
;

3156 autÿ
	g¥od
 = 
°©ic_ˇ°
<
Ex∂icôProdu˚r
*>(
±r
);

3157 
	g°©s
.
	gqueueCœssByãs
 +(
Ex∂icôProdu˚r
);

3158 autÿ
	gèûBlock
 = 
¥od
->
èûBlock
;

3159 
boﬁ
 
	gwasN⁄Em±y
 = 
Ál£
;

3160 i‡(
	gèûBlock
 !
nuŒ±r
) {

3161 autÿ
block
 = 
èûBlock
;

3163 ++
	g°©s
.
	gÆloˇãdBlocks
;

3164 i‡(!
	gblock
->
	gC⁄cuºítQueue
::
Block
::
ãm∂©e
 
is_em±y
<
ex∂icô_c⁄ãxt
>(Ë|| 
wasN⁄Em±y
) {

3165 ++
°©s
.
u£dBlocks
;

3166 
	gwasN⁄Em±y
 = 
wasN⁄Em±y
 || 
block
 !
èûBlock
;

3168 ++
	g°©s
.
	gow√dBlocksEx∂icô
;

3169 
	gblock
 = 
block
->
√xt
;

3170 } 
	gblock
 !
èûBlock
);

3172 autÿ
	gödex
 = 
¥od
->
blockIndex
.
lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
);

3173 
	gödex
 !
nuŒ±r
) {

3174 
°©s
.
ex∂icôBlockIndexByãs
 +(
ty≥«me
 
Ex∂icôProdu˚r
::
BlockIndexHódî
Ë+ 
ödex
->
size
 * —y≥«mêEx∂icôProdu˚r::
BlockIndexE¡ry
);

3175 
	gödex
 = 
°©ic_ˇ°
<
ty≥«me
 
Ex∂icôProdu˚r
::
BlockIndexHódî
*>(
ödex
->
¥ev
);

3180 autÿ
	g‰ìOnInôülPoﬁ
 = 
q
->
öôülBlockPoﬁIndex
.
lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
Ë>q->
öôülBlockPoﬁSize
 ? 0 : q->initialBlockPoolSize - q->initialBlockPoolIndex.load(std::memory_order_relaxed);

3181 
	g°©s
.
	gÆloˇãdBlocks
 +
‰ìOnInôülPoﬁ
;

3182 
	g°©s
.
	g‰ìBlocks
 +
‰ìOnInôülPoﬁ
;

3184 
	g°©s
.
	gblockCœssByãs
 = (
Block
Ë* 
°©s
.
ÆloˇãdBlocks
;

3185 
	g°©s
.
	gqueueCœssByãs
 +(
C⁄cuºítQueue
);

3187  
	g°©s
;

3192 
MemSèts
 
gëMemSèts
()

3194  
	gMemSèts
::
gëF‹
(
this
);

3196 
	g¥iv©e
:

3197 
‰õnd
 
MemSèts
;

3205 
Produ˚rBa£
* 
ªcy˛e_‹_¸óã_¥odu˚r
(
boﬁ
 
isEx∂icô
)

3207 
boﬁ
 
	gªcy˛ed
;

3208  
ªcy˛e_‹_¸óã_¥odu˚r
(
isEx∂icô
, 
ªcy˛ed
);

3211 
Produ˚rBa£
* 
ªcy˛e_‹_¸óã_¥odu˚r
(
boﬁ
 
isEx∂icô
, boﬁ& 
ªcy˛ed
)

3213 #ifde‡
MCDBGQ_NOLOCKFREE_IMPLICITPRODHASH


3214 
	gdebug
::
DebugLock
 
lock
(
im∂icôProdMuãx
);

3217 autÿ
	g±r
 = 
¥odu˚rLi°Taû
.
lﬂd
(
°d
::
mem‹y_‹dî_acquúe
);Öå !
nuŒ±r
;Öå = 
±r
->
√xt_¥od
()) {

3218 i‡(
±r
->
öa˘ive
.
lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
Ë&&Öå->
isEx∂icô
 == isExplicit) {

3219 
boﬁ
 
ex≥˘ed
 = 
åue
;

3220 i‡(
	g±r
->
	göa˘ive
.
com∑ª_exch™ge_°r⁄g
(
ex≥˘ed
, 
Ál£
, 
°d
::
mem‹y_‹dî_acquúe
, std::
mem‹y_‹dî_ªœxed
)) {

3222 
ªcy˛ed
 = 
åue
;

3223  
	g±r
;

3228 
	gªcy˛ed
 = 
Ál£
;

3229  
add_¥odu˚r
(
isEx∂icô
 ? 
°©ic_ˇ°
<
Produ˚rBa£
*>(
¸óã
<
Ex∂icôProdu˚r
>(
this
)Ë: cª©e<
Im∂icôProdu˚r
>(this));

3232 
Produ˚rBa£
* 
add_¥odu˚r
(Produ˚rBa£* 
¥odu˚r
)

3235 i‡(
	g¥odu˚r
 =
nuŒ±r
) {

3236  
nuŒ±r
;

3239 
	g¥odu˚rCou¡
.
„tch_add
(1, 
°d
::
mem‹y_‹dî_ªœxed
);

3242 autÿ
	g¥evTaû
 = 
¥odu˚rLi°Taû
.
lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
);

3244 
	g¥odu˚r
->
	g√xt
 = 
¥evTaû
;

3245 } !
	g¥odu˚rLi°Taû
.
com∑ª_exch™ge_wók
(
¥evTaû
, 
¥odu˚r
, 
°d
::
mem‹y_‹dî_ªÀa£
, std::
mem‹y_‹dî_ªœxed
));

3247 #ifde‡
MOODYCAMEL_QUEUE_INTERNAL_DEBUG


3248 i‡(
	g¥odu˚r
->
	gisEx∂icô
) {

3249 autÿ
	g¥evTaûEx∂icô
 = 
ex∂icôProdu˚rs
.
lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
);

3251 
	g°©ic_ˇ°
<
	gEx∂icôProdu˚r
*>(
	g¥odu˚r
)->
	g√xtEx∂icôProdu˚r
 = 
¥evTaûEx∂icô
;

3252 } !
	gex∂icôProdu˚rs
.
com∑ª_exch™ge_wók
(
¥evTaûEx∂icô
, 
°©ic_ˇ°
<
Ex∂icôProdu˚r
*>(
¥odu˚r
), 
°d
::
mem‹y_‹dî_ªÀa£
, std::
mem‹y_‹dî_ªœxed
));

3255 autÿ
	g¥evTaûIm∂icô
 = 
im∂icôProdu˚rs
.
lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
);

3257 
	g°©ic_ˇ°
<
	gIm∂icôProdu˚r
*>(
	g¥odu˚r
)->
	g√xtIm∂icôProdu˚r
 = 
¥evTaûIm∂icô
;

3258 } !
	gim∂icôProdu˚rs
.
com∑ª_exch™ge_wók
(
¥evTaûIm∂icô
, 
°©ic_ˇ°
<
Im∂icôProdu˚r
*>(
¥odu˚r
), 
°d
::
mem‹y_‹dî_ªÀa£
, std::
mem‹y_‹dî_ªœxed
));

3262  
	g¥odu˚r
;

3265 
ªown_¥odu˚rs
()

3270 autÿ
	g±r
 = 
¥odu˚rLi°Taû
.
lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
);Öå !
nuŒ±r
;Öå = 
±r
->
√xt_¥od
()) {

3271 
±r
->
∑ª¡
 = 
this
;

3280 
	sIm∂icôProdu˚rKVP


3282 
	g°d
::
©omic
<
dëaûs
::
thªad_id_t
> 
key
;

3283 
Im∂icôProdu˚r
* 
	gvÆue
;

3285 
Im∂icôProdu˚rKVP
(Ë: 
vÆue
(
nuŒ±r
) { }

3287 
Im∂icôProdu˚rKVP
(Im∂icôProdu˚rKVP&& 
Ÿhî
Ë
MOODYCAMEL_NOEXCEPT


3289 
key
.
°‹e
(
Ÿhî
.key.
lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
), std::memory_order_relaxed);

3290 
	gvÆue
 = 
Ÿhî
.
vÆue
;

3293 
ölöe
 
	gIm∂icôProdu˚rKVP
& 
	g›î©‹
=(
Im∂icôProdu˚rKVP
&& 
Ÿhî
Ë
MOODYCAMEL_NOEXCEPT


3295 
sw≠
(
Ÿhî
);

3296  *
	gthis
;

3299 
ölöe
 
sw≠
(
Im∂icôProdu˚rKVP
& 
Ÿhî
Ë
	gMOODYCAMEL_NOEXCEPT


3301 i‡(
	gthis
 !&
Ÿhî
) {

3302 
dëaûs
::
sw≠_ªœxed
(
key
, 
Ÿhî
.key);

3303 
	g°d
::
sw≠
(
vÆue
, 
Ÿhî
.value);

3308 
	gãm∂©e
<
ty≥«me
 
	gXT
,Åy≥«mê
	gXTøôs
>

3309 
‰õnd
 
	gmoodyˇmñ
::
sw≠
(
ty≥«me
 
C⁄cuºítQueue
<
XT
, 
XTøôs
>::
Im∂icôProdu˚rKVP
&,Åy≥«mêC⁄cuºítQueue<XT, XTøôs>::Im∂icôProdu˚rKVP&Ë
MOODYCAMEL_NOEXCEPT
;

3311 
	sIm∂icôProdu˚rHash


3313 
size_t
 
	gˇ∑côy
;

3314 
Im∂icôProdu˚rKVP
* 
	gíåõs
;

3315 
Im∂icôProdu˚rHash
* 
	g¥ev
;

3318 
ölöe
 
p›uœã_öôül_im∂icô_¥odu˚r_hash
()

3320 
MOODYCAMEL_CONSTEXPR_IF
 (
INITIAL_IMPLICIT_PRODUCER_HASH_SIZE
 == 0) {

3324 
	gim∂icôProdu˚rHashCou¡
.
°‹e
(0, 
°d
::
mem‹y_‹dî_ªœxed
);

3325 autÿ
	ghash
 = &
öôülIm∂icôProdu˚rHash
;

3326 
	ghash
->
	gˇ∑côy
 = 
INITIAL_IMPLICIT_PRODUCER_HASH_SIZE
;

3327 
	ghash
->
	gíåõs
 = &
öôülIm∂icôProdu˚rHashE¡rõs
[0];

3328 
size_t
 
	gi
 = 0; i !
INITIAL_IMPLICIT_PRODUCER_HASH_SIZE
; ++i) {

3329 
	göôülIm∂icôProdu˚rHashE¡rõs
[
i
].
	gkey
.
°‹e
(
dëaûs
::
övÆid_thªad_id
, 
°d
::
mem‹y_‹dî_ªœxed
);

3331 
	ghash
->
	g¥ev
 = 
nuŒ±r
;

3332 
	gim∂icôProdu˚rHash
.
°‹e
(
hash
, 
°d
::
mem‹y_‹dî_ªœxed
);

3336 
sw≠_im∂icô_¥odu˚r_hashes
(
C⁄cuºítQueue
& 
Ÿhî
)

3338 
MOODYCAMEL_CONSTEXPR_IF
 (
INITIAL_IMPLICIT_PRODUCER_HASH_SIZE
 == 0) {

3343 
	göôülIm∂icôProdu˚rHashE¡rõs
.
sw≠
(
Ÿhî
.
öôülIm∂icôProdu˚rHashE¡rõs
);

3344 
	göôülIm∂icôProdu˚rHash
.
	gíåõs
 = &
öôülIm∂icôProdu˚rHashE¡rõs
[0];

3345 
	gŸhî
.
	göôülIm∂icôProdu˚rHash
.
	gíåõs
 = &
Ÿhî
.
öôülIm∂icôProdu˚rHashE¡rõs
[0];

3347 
	gdëaûs
::
sw≠_ªœxed
(
im∂icôProdu˚rHashCou¡
, 
Ÿhî
.implicitProducerHashCount);

3349 
	gdëaûs
::
sw≠_ªœxed
(
im∂icôProdu˚rHash
, 
Ÿhî
.implicitProducerHash);

3350 i‡(
	gim∂icôProdu˚rHash
.
lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
Ë=&
Ÿhî
.
öôülIm∂icôProdu˚rHash
) {

3351 
im∂icôProdu˚rHash
.
°‹e
(&
öôülIm∂icôProdu˚rHash
, 
°d
::
mem‹y_‹dî_ªœxed
);

3354 
Im∂icôProdu˚rHash
* 
	ghash
;

3355 
	ghash
 = 
im∂icôProdu˚rHash
.
lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
); hash->
	g¥ev
 !&
Ÿhî
.
öôülIm∂icôProdu˚rHash
; hash = 
hash
->
¥ev
) {

3358 
	ghash
->
	g¥ev
 = &
öôülIm∂icôProdu˚rHash
;

3360 i‡(
	gŸhî
.
	gim∂icôProdu˚rHash
.
lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
Ë=&
öôülIm∂icôProdu˚rHash
) {

3361 
Ÿhî
.
im∂icôProdu˚rHash
.
°‹e
(&Ÿhî.
öôülIm∂icôProdu˚rHash
, 
°d
::
mem‹y_‹dî_ªœxed
);

3364 
Im∂icôProdu˚rHash
* 
	ghash
;

3365 
	ghash
 = 
Ÿhî
.
im∂icôProdu˚rHash
.
lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
); hash->
	g¥ev
 !&
öôülIm∂icôProdu˚rHash
; hash = 
hash
->
¥ev
) {

3368 
	ghash
->
	g¥ev
 = &
Ÿhî
.
öôülIm∂icôProdu˚rHash
;

3374 
Im∂icôProdu˚r
* 
gë_‹_add_im∂icô_¥odu˚r
()

3386 #ifde‡
MCDBGQ_NOLOCKFREE_IMPLICITPRODHASH


3387 
	gdebug
::
DebugLock
 
lock
(
im∂icôProdMuãx
);

3390 autÿ
	gid
 = 
dëaûs
::
thªad_id
();

3391 autÿ
	ghashedId
 = 
dëaûs
::
hash_thªad_id
(
id
);

3393 autÿ
	gmaöHash
 = 
im∂icôProdu˚rHash
.
lﬂd
(
°d
::
mem‹y_‹dî_acquúe
);

3394 
as£π
(
maöHash
 !
nuŒ±r
);

3395 autÿ
	ghash
 = 
maöHash
; hash !
nuŒ±r
; hash = 
hash
->
¥ev
) {

3397 autÿ
ödex
 = 
hashedId
;

3398 
	gåue
) {

3399 
	gödex
 &
hash
->
ˇ∑côy
 - 1;

3401 autÿ
	g¥obedKey
 = 
hash
->
íåõs
[
ödex
].
key
.
lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
);

3402 i‡(
	g¥obedKey
 =
id
) {

3408 autÿ
vÆue
 = 
hash
->
íåõs
[
ödex
].value;

3409 i‡(
	ghash
 !
maöHash
) {

3410 
ödex
 = 
hashedId
;

3411 
	gåue
) {

3412 
	gödex
 &
maöHash
->
ˇ∑côy
 - 1;

3413 
	g¥obedKey
 = 
maöHash
->
íåõs
[
ödex
].
key
.
lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
);

3414 autÿ
	gem±y
 = 
dëaûs
::
övÆid_thªad_id
;

3415 #ifde‡
MOODYCAMEL_CPP11_THREAD_LOCAL_SUPPORTED


3416 autÿ
	gªußbÀ
 = 
dëaûs
::
övÆid_thªad_id2
;

3417 i‡((
	g¥obedKey
 =
em±y
 && 
maöHash
->
íåõs
[
ödex
].
key
.
com∑ª_exch™ge_°r⁄g
”m±y, 
id
, 
°d
::
mem‹y_‹dî_ªœxed
, std::memory_order_relaxed)) ||

3418 (
¥obedKey
 =
ªußbÀ
 && 
maöHash
->
íåõs
[
ödex
].
key
.
com∑ª_exch™ge_°r⁄g
‘eußbÀ, 
id
, 
°d
::
mem‹y_‹dî_acquúe
, std::memory_order_acquire))) {

3420 i‡((
¥obedKey
 =
em±y
 && 
maöHash
->
íåõs
[
ödex
].
key
.
com∑ª_exch™ge_°r⁄g
”m±y, 
id
, 
°d
::
mem‹y_‹dî_ªœxed
, std::memory_order_relaxed))) {

3422 
maöHash
->
íåõs
[
ödex
].
vÆue
 = value;

3425 ++
	gödex
;

3429  
	gvÆue
;

3431 i‡(
	g¥obedKey
 =
dëaûs
::
övÆid_thªad_id
) {

3434 ++
	gödex
;

3439 autÿ
	g√wCou¡
 = 1 + 
im∂icôProdu˚rHashCou¡
.
„tch_add
(1, 
°d
::
mem‹y_‹dî_ªœxed
);

3440 
	gåue
) {

3442 i‡(
	g√wCou¡
 >(
maöHash
->
ˇ∑côy
 >> 1Ë&& !
im∂icôProdu˚rHashResizeInProgªss
.
ã°_™d_£t
(
°d
::
mem‹y_‹dî_acquúe
)) {

3447 
maöHash
 = 
im∂icôProdu˚rHash
.
lﬂd
(
°d
::
mem‹y_‹dî_acquúe
);

3448 i‡(
	g√wCou¡
 >(
maöHash
->
ˇ∑côy
 >> 1)) {

3449 autÿ
√wC≠acôy
 = 
maöHash
->
ˇ∑côy
 << 1;

3450 
	g√wCou¡
 >(
√wC≠acôy
 >> 1)) {

3451 
√wC≠acôy
 <<= 1;

3453 autÿ
	gøw
 = 
°©ic_ˇ°
<*>((
Tøôs
::
mÆloc
)((
Im∂icôProdu˚rHash
Ë+ 
°d
::
Æignmít_of
<
Im∂icôProdu˚rKVP
>::
vÆue
 - 1 + (Im∂icôProdu˚rKVPË* 
√wC≠acôy
));

3454 i‡(
	gøw
 =
nuŒ±r
) {

3456 
im∂icôProdu˚rHashCou¡
.
„tch_sub
(1, 
°d
::
mem‹y_‹dî_ªœxed
);

3457 
	gim∂icôProdu˚rHashResizeInProgªss
.
˛ór
(
°d
::
mem‹y_‹dî_ªœxed
);

3458  
	gnuŒ±r
;

3461 autÿ
	g√wHash
 = 
√w
 (
øw
Ë
Im∂icôProdu˚rHash
;

3462 
	g√wHash
->
	gˇ∑côy
 = 
°©ic_ˇ°
<
size_t
>(
√wC≠acôy
);

3463 
	g√wHash
->
	gíåõs
 = 
ªöãΩªt_ˇ°
<
Im∂icôProdu˚rKVP
*>(
dëaûs
::
Æign_f‹
<Im∂icôProdu˚rKVP>(
øw
 + (
Im∂icôProdu˚rHash
)));

3464 
size_t
 
	gi
 = 0; i !
√wC≠acôy
; ++i) {

3465 
√w
 (
√wHash
->
íåõs
 + 
i
Ë
	gIm∂icôProdu˚rKVP
;

3466 
	g√wHash
->
	gíåõs
[
i
].
	gkey
.
°‹e
(
dëaûs
::
övÆid_thªad_id
, 
°d
::
mem‹y_‹dî_ªœxed
);

3468 
	g√wHash
->
	g¥ev
 = 
maöHash
;

3469 
	gim∂icôProdu˚rHash
.
°‹e
(
√wHash
, 
°d
::
mem‹y_‹dî_ªÀa£
);

3470 
	gim∂icôProdu˚rHashResizeInProgªss
.
˛ór
(
°d
::
mem‹y_‹dî_ªÀa£
);

3471 
	gmaöHash
 = 
√wHash
;

3474 
	gim∂icôProdu˚rHashResizeInProgªss
.
˛ór
(
°d
::
mem‹y_‹dî_ªÀa£
);

3481 i‡(
	g√wCou¡
 < (
	gmaöHash
->
	gˇ∑côy
 >> 1) + (mainHash->capacity >> 2)) {

3482 
boﬁ
 
	gªcy˛ed
;

3483 autÿ
	g¥odu˚r
 = 
°©ic_ˇ°
<
Im∂icôProdu˚r
*>(
ªcy˛e_‹_¸óã_¥odu˚r
(
Ál£
, 
ªcy˛ed
));

3484 i‡(
	g¥odu˚r
 =
nuŒ±r
) {

3485 
im∂icôProdu˚rHashCou¡
.
„tch_sub
(1, 
°d
::
mem‹y_‹dî_ªœxed
);

3486  
	gnuŒ±r
;

3488 i‡(
	gªcy˛ed
) {

3489 
	gim∂icôProdu˚rHashCou¡
.
„tch_sub
(1, 
°d
::
mem‹y_‹dî_ªœxed
);

3492 #ifde‡
MOODYCAMEL_CPP11_THREAD_LOCAL_SUPPORTED


3493 
	g¥odu˚r
->
	gthªadExôLi°íî
.
	gˇŒback
 = &
C⁄cuºítQueue
::
im∂icô_¥odu˚r_thªad_exôed_ˇŒback
;

3494 
	g¥odu˚r
->
	gthªadExôLi°íî
.
	gu£rD©a
 = 
¥odu˚r
;

3495 
	gdëaûs
::
ThªadExôNŸifõr
::
subs¸ibe
(&
¥odu˚r
->
thªadExôLi°íî
);

3498 autÿ
	gödex
 = 
hashedId
;

3499 
	gåue
) {

3500 
	gödex
 &
maöHash
->
ˇ∑côy
 - 1;

3501 autÿ
	g¥obedKey
 = 
maöHash
->
íåõs
[
ödex
].
key
.
lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
);

3503 autÿ
	gem±y
 = 
dëaûs
::
övÆid_thªad_id
;

3504 #ifde‡
MOODYCAMEL_CPP11_THREAD_LOCAL_SUPPORTED


3505 autÿ
	gªußbÀ
 = 
dëaûs
::
övÆid_thªad_id2
;

3506 i‡((
	g¥obedKey
 =
em±y
 && 
maöHash
->
íåõs
[
ödex
].
key
.
com∑ª_exch™ge_°r⁄g
”m±y, 
id
, 
°d
::
mem‹y_‹dî_ªœxed
, std::memory_order_relaxed)) ||

3507 (
¥obedKey
 =
ªußbÀ
 && 
maöHash
->
íåõs
[
ödex
].
key
.
com∑ª_exch™ge_°r⁄g
‘eußbÀ, 
id
, 
°d
::
mem‹y_‹dî_acquúe
, std::memory_order_acquire))) {

3509 i‡((
¥obedKey
 =
em±y
 && 
maöHash
->
íåõs
[
ödex
].
key
.
com∑ª_exch™ge_°r⁄g
”m±y, 
id
, 
°d
::
mem‹y_‹dî_ªœxed
, std::memory_order_relaxed))) {

3511 
maöHash
->
íåõs
[
ödex
].
vÆue
 = 
¥odu˚r
;

3514 ++
	gödex
;

3516  
	g¥odu˚r
;

3522 
	gmaöHash
 = 
im∂icôProdu˚rHash
.
lﬂd
(
°d
::
mem‹y_‹dî_acquúe
);

3526 #ifde‡
MOODYCAMEL_CPP11_THREAD_LOCAL_SUPPORTED


3527 
im∂icô_¥odu˚r_thªad_exôed
(
Im∂icôProdu˚r
* 
¥odu˚r
)

3530 
	gdëaûs
::
ThªadExôNŸifõr
::
unsubs¸ibe
(&
¥odu˚r
->
thªadExôLi°íî
);

3533 #ifde‡
MCDBGQ_NOLOCKFREE_IMPLICITPRODHASH


3534 
	gdebug
::
DebugLock
 
lock
(
im∂icôProdMuãx
);

3536 autÿ
	ghash
 = 
im∂icôProdu˚rHash
.
lﬂd
(
°d
::
mem‹y_‹dî_acquúe
);

3537 
as£π
(
hash
 !
nuŒ±r
);

3538 autÿ
	gid
 = 
dëaûs
::
thªad_id
();

3539 autÿ
	ghashedId
 = 
dëaûs
::
hash_thªad_id
(
id
);

3540 
	gdëaûs
::
thªad_id_t
 
¥obedKey
;

3544 ; 
	ghash
 !
nuŒ±r
; hash = 
hash
->
¥ev
) {

3545 autÿ
ödex
 = 
hashedId
;

3547 
	gödex
 &
hash
->
ˇ∑côy
 - 1;

3548 
	g¥obedKey
 = 
hash
->
íåõs
[
ödex
].
key
.
lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
);

3549 i‡(
	g¥obedKey
 =
id
) {

3550 
hash
->
íåõs
[
ödex
].
key
.
°‹e
(
dëaûs
::
övÆid_thªad_id2
, 
°d
::
mem‹y_‹dî_ªÀa£
);

3553 ++
	gödex
;

3554 } 
	g¥obedKey
 !
dëaûs
::
övÆid_thªad_id
);

3558 
	g¥odu˚r
->
	göa˘ive
.
°‹e
(
åue
, 
°d
::
mem‹y_‹dî_ªÀa£
);

3561 
im∂icô_¥odu˚r_thªad_exôed_ˇŒback
(* 
u£rD©a
)

3563 autÿ
	g¥odu˚r
 = 
°©ic_ˇ°
<
Im∂icôProdu˚r
*>(
u£rD©a
);

3564 autÿ
	gqueue
 = 
¥odu˚r
->
∑ª¡
;

3565 
	gqueue
->
im∂icô_¥odu˚r_thªad_exôed
(
¥odu˚r
);

3573 
	gãm∂©e
<
ty≥«me
 
	gTAlign
>

3574 
ölöe
 * 
Æig√d_mÆloc
(
size_t
 
size
)

3576 
MOODYCAMEL_CONSTEXPR_IF
 (
°d
::
Æignmít_of
<
TAlign
>::
vÆue
 <°d::Æignmít_of<
dëaûs
::
max_Æign_t
>::value)

3577  (
Tøôs
::
mÆloc
)(
size
);

3579 
size_t
 
	gÆignmít
 = 
°d
::
Æignmít_of
<
TAlign
>::
vÆue
;

3580 * 
	gøw
 = (
Tøôs
::
mÆloc
)(
size
 + 
Æignmít
 - 1 + (*));

3581 i‡(!
	gøw
)

3582  
	gnuŒ±r
;

3583 * 
	g±r
 = 
dëaûs
::
Æign_f‹
<
TAlign
>(
ªöãΩªt_ˇ°
<*>(
øw
) + (*));

3584 *(
	gªöãΩªt_ˇ°
<**>(
	g±r
Ë- 1Ë
øw
;

3585  
	g±r
;

3589 
	gãm∂©e
<
ty≥«me
 
	gTAlign
>

3590 
ölöe
 
Æig√d_‰ì
(* 
±r
)

3592 
MOODYCAMEL_CONSTEXPR_IF
 (
°d
::
Æignmít_of
<
TAlign
>::
vÆue
 <°d::Æignmít_of<
dëaûs
::
max_Æign_t
>::value)

3593  (
Tøôs
::
‰ì
)(
±r
);

3595 (
	gTøôs
::
‰ì
)(
±r
 ? *(
ªöãΩªt_ˇ°
<**>’åË- 1Ë: 
nuŒ±r
);

3598 
	gãm∂©e
<
ty≥«me
 
	gU
>

3599 
ölöe
 
U
* 
¸óã_¨øy
(
size_t
 
cou¡
)

3601 
as£π
(
cou¡
 > 0);

3602 
U
* 
	gp
 = 
°©ic_ˇ°
<U*>(
Æig√d_mÆloc
<U>((UË* 
cou¡
));

3603 i‡(
	gp
 =
nuŒ±r
)

3604  
nuŒ±r
;

3606 
size_t
 
	gi
 = 0; i !
cou¡
; ++i)

3607 
√w
 (
p
 + 
i
Ë
U
();

3608  
	gp
;

3611 
	gãm∂©e
<
ty≥«me
 
	gU
>

3612 
ölöe
 
de°roy_¨øy
(
U
* 
p
, 
size_t
 
cou¡
)

3614 i‡(
	gp
 !
nuŒ±r
) {

3615 
as£π
(
cou¡
 > 0);

3616 
size_t
 
	gi
 = 
cou¡
; i != 0; )

3617 (
	gp
 + --
	gi
)->~
U
();

3619 
	gÆig√d_‰ì
<
	gU
>(
	gp
);

3622 
	gãm∂©e
<
ty≥«me
 
	gU
>

3623 
ölöe
 
U
* 
¸óã
()

3625 * 
	gp
 = 
Æig√d_mÆloc
<
U
>((U));

3626  
	gp
 !
nuŒ±r
 ? 
√w
 (
p
Ë
U
 :Çullptr;

3629 
	gãm∂©e
<
ty≥«me
 
	gU
,Åy≥«mê
	gA1
>

3630 
ölöe
 
U
* 
¸óã
(
A1
&& 
a1
)

3632 * 
	gp
 = 
Æig√d_mÆloc
<
U
>((U));

3633  
	gp
 !
nuŒ±r
 ? 
√w
 (
p
Ë
U
(
°d
::
f‹w¨d
<
A1
>(
a1
)) :Çullptr;

3636 
	gãm∂©e
<
ty≥«me
 
	gU
>

3637 
ölöe
 
de°roy
(
U
* 
p
)

3639 i‡(
	gp
 !
nuŒ±r
)

3640 
p
->~
U
();

3641 
	gÆig√d_‰ì
<
	gU
>(
	gp
);

3644 
	g¥iv©e
:

3645 
°d
::
©omic
<
Produ˚rBa£
*> 
¥odu˚rLi°Taû
;

3646 
	g°d
::
©omic
<
°d
::
uöt32_t
> 
¥odu˚rCou¡
;

3648 
	g°d
::
©omic
<
size_t
> 
öôülBlockPoﬁIndex
;

3649 
Block
* 
	göôülBlockPoﬁ
;

3650 
size_t
 
	göôülBlockPoﬁSize
;

3652 #i‚de‡
MCDBGQ_USEDEBUGFREELIST


3653 
	gFªeLi°
<
	gBlock
> 
	g‰ìLi°
;

3655 
	gdebug
::
DebugFªeLi°
<
Block
> 
‰ìLi°
;

3658 
	g°d
::
©omic
<
Im∂icôProdu˚rHash
*> 
im∂icôProdu˚rHash
;

3659 
	g°d
::
©omic
<
size_t
> 
im∂icôProdu˚rHashCou¡
;

3660 
Im∂icôProdu˚rHash
 
	göôülIm∂icôProdu˚rHash
;

3661 
	g°d
::
¨øy
<
Im∂icôProdu˚rKVP
, 
	gINITIAL_IMPLICIT_PRODUCER_HASH_SIZE
> 
	göôülIm∂icôProdu˚rHashE¡rõs
;

3662 
	g°d
::
©omic_Êag
 
im∂icôProdu˚rHashResizeInProgªss
;

3664 
	g°d
::
©omic
<
°d
::
uöt32_t
> 
√xtEx∂icôC⁄sumîId
;

3665 
	g°d
::
©omic
<
°d
::
uöt32_t
> 
globÆEx∂icôC⁄sumîOff£t
;

3667 #ifde‡
MCDBGQ_NOLOCKFREE_IMPLICITPRODHASH


3668 
	gdebug
::
DebugMuãx
 
im∂icôProdMuãx
;

3671 #ifde‡
MOODYCAMEL_QUEUE_INTERNAL_DEBUG


3672 
	g°d
::
©omic
<
Ex∂icôProdu˚r
*> 
ex∂icôProdu˚rs
;

3673 
	g°d
::
©omic
<
Im∂icôProdu˚r
*> 
im∂icôProdu˚rs
;

3678 
	gãm∂©e
<
ty≥«me
 
	gT
,Åy≥«mê
	gTøôs
>

3679 
	gProdu˚rTokí
::
Produ˚rTokí
(
C⁄cuºítQueue
<
T
, 
Tøôs
>& 
queue
)

3680 : 
¥odu˚r
(
queue
.
	$ªcy˛e_‹_¸óã_¥odu˚r
(
åue
))

3682 i‡(
¥odu˚r
 !
nuŒ±r
) {

3683 
¥odu˚r
->
tokí
 = 
this
;

3685 
	}
}

3687 
	gãm∂©e
<
ty≥«me
 
	gT
,Åy≥«mê
	gTøôs
>

3688 
	gProdu˚rTokí
::
Produ˚rTokí
(
BlockögC⁄cuºítQueue
<
T
, 
Tøôs
>& 
queue
)

3689 : 
¥odu˚r
(
ªöãΩªt_ˇ°
<
C⁄cuºítQueue
<
T
, 
Tøôs
>*>(&
queue
)->
	$ªcy˛e_‹_¸óã_¥odu˚r
(
åue
))

3691 i‡(
¥odu˚r
 !
nuŒ±r
) {

3692 
¥odu˚r
->
tokí
 = 
this
;

3694 
	}
}

3696 
	gãm∂©e
<
ty≥«me
 
	gT
,Åy≥«mê
	gTøôs
>

3697 
	gC⁄sumîTokí
::
C⁄sumîTokí
(
C⁄cuºítQueue
<
T
, 
Tøôs
>& 
queue
)

3698 : 
ôemsC⁄sumedFromCuºít
(0), 
cuºítProdu˚r
(
nuŒ±r
), 
	$desúedProdu˚r
(
nuŒ±r
)

3700 
öôülOff£t
 = 
queue
.
√xtEx∂icôC⁄sumîId
.
	`„tch_add
(1, 
°d
::
mem‹y_‹dî_ªÀa£
);

3701 
œ°KnownGlobÆOff£t
 = 
°©ic_ˇ°
<
°d
::
uöt32_t
>(-1);

3702 
	}
}

3704 
	gãm∂©e
<
ty≥«me
 
	gT
,Åy≥«mê
	gTøôs
>

3705 
	gC⁄sumîTokí
::
C⁄sumîTokí
(
BlockögC⁄cuºítQueue
<
T
, 
Tøôs
>& 
queue
)

3706 : 
ôemsC⁄sumedFromCuºít
(0), 
cuºítProdu˚r
(
nuŒ±r
), 
	$desúedProdu˚r
(
nuŒ±r
)

3708 
öôülOff£t
 = 
ªöãΩªt_ˇ°
<
C⁄cuºítQueue
<
T
, 
Tøôs
>*>(&
queue
)->
√xtEx∂icôC⁄sumîId
.
	`„tch_add
(1, 
°d
::
mem‹y_‹dî_ªÀa£
);

3709 
œ°KnownGlobÆOff£t
 = 
°©ic_ˇ°
<
°d
::
uöt32_t
>(-1);

3710 
	}
}

3712 
	gãm∂©e
<
ty≥«me
 
	gT
,Åy≥«mê
	gTøôs
>

3713 
ölöe
 
sw≠
(
C⁄cuºítQueue
<
T
, 
Tøôs
>& 
a
, C⁄cuºítQueue<T, Tøôs>& 
b
Ë
	gMOODYCAMEL_NOEXCEPT


3715 
	ga
.
sw≠
(
b
);

3718 
ölöe
 
	$sw≠
(
Produ˚rTokí
& 
a
, Produ˚rTokí& 
b
Ë
MOODYCAMEL_NOEXCEPT


3720 
a
.
	`sw≠
(
b
);

3721 
	}
}

3723 
ölöe
 
	$sw≠
(
C⁄sumîTokí
& 
a
, C⁄sumîTokí& 
b
Ë
MOODYCAMEL_NOEXCEPT


3725 
a
.
	`sw≠
(
b
);

3726 
	}
}

3728 
	gãm∂©e
<
ty≥«me
 
	gT
,Åy≥«mê
	gTøôs
>

3729 
ölöe
 
sw≠
(
ty≥«me
 
C⁄cuºítQueue
<
T
, 
Tøôs
>::
Im∂icôProdu˚rKVP
& 
a
,Åy≥«mêC⁄cuºítQueue<T, Tøôs>::Im∂icôProdu˚rKVP& 
b
Ë
MOODYCAMEL_NOEXCEPT


3731 
a
.
sw≠
(
b
);

3736 #i‡
deföed
(
_MSC_VER
Ë&& (!deföed(
_HAS_CXX17
) || !_HAS_CXX17)

3737 #¥agm®
w¨nög
(
p›
)

3740 #i‡
deföed
(
__GNUC__
)

3741 #¥agm®
GCC
 
dügno°ic
 
p›


	@viper/concurrentqueue-src/internal/concurrentqueue_internal_debug.h

1 #¥agm®
⁄˚


9 #i‡
deföed
(
_WIN32
Ë|| deföed(
__WINDOWS__
Ë|| deföed(
__WIN32__
)

10 
	#WIN32_LEAN_AND_MEAN


	)

11 
	~<wödows.h
>

12 
«me•a˚
 
	gmoodyˇmñ
 {Çame•a˚ 
	gdebug
 {

13 
	sDebugMuãx
 {

14 
DebugMuãx
(Ë{ 
InôülizeCrôiˇlSe˘i⁄AndSpöCou¡
(&
cs
, 0x400); }

15 ~
DebugMuãx
(Ë{ 
DñëeCrôiˇlSe˘i⁄
(&
cs
); }

17 
lock
(Ë{ 
E¡îCrôiˇlSe˘i⁄
(&
cs
); }

18 
u∆ock
(Ë{ 
LóveCrôiˇlSe˘i⁄
(&
cs
); }

20 
	g¥iv©e
:

21 
CRITICAL_SECTION
 
cs
;

25 
	~<muãx
>

26 
«me•a˚
 
	gmoodyˇmñ
 {Çame•a˚ 
	gdebug
 {

27 
	sDebugMuãx
 {

28 
lock
(Ë{ 
	gm
.lock(); }

29 
u∆ock
(Ë{ 
	gm
.unlock(); }

31 
	g¥iv©e
:

32 
°d
::
muãx
 
m
;

38 
«me•a˚
 
	gmoodyˇmñ
 {Çame•a˚ 
	gdebug
 {

39 
	sDebugLock
 {

40 
ex∂icô
 
DebugLock
(
DebugMuãx
& 
muãx
)

41 : 
muãx
(mutex)

43 
muãx
.
lock
();

46 ~
DebugLock
()

48 
	gmuãx
.
u∆ock
();

51 
	g¥iv©e
:

52 
DebugMuãx
& 
muãx
;

56 
	gãm∂©e
<
ty≥«me
 
	gN
>

57 
	sDebugFªeLi°
 {

58 
DebugFªeLi°
(Ë: 
hód
(
nuŒ±r
) { }

59 
DebugFªeLi°
(DebugFªeLi°&& 
Ÿhî
Ë: 
hód
(Ÿhî.hódË{ othî.hód = 
nuŒ±r
; }

60 
sw≠
(
DebugFªeLi°
& 
Ÿhî
Ë{ 
	g°d
::sw≠(
hód
, other.head); }

62 
ölöe
 
add
(
N
* 
node
)

64 
DebugLock
 
lock
(
muãx
);

65 
	gnode
->
	g‰ìLi°Next
 = 
hód
;

66 
	ghód
 = 
node
;

69 
ölöe
 
N
* 
åy_gë
()

71 
DebugLock
 
lock
(
muãx
);

72 i‡(
	ghód
 =
nuŒ±r
) {

73  
nuŒ±r
;

76 autÿ
	g¥evHód
 = 
hód
;

77 
	ghód
 = 
hód
->
‰ìLi°Next
;

78  
	g¥evHód
;

81 
N
* 
hód_unß„
(Ëc⁄° {  
	ghód
; }

83 
	g¥iv©e
:

84 
N
* 
hód
;

85 
DebugMuãx
 
	gmuãx
;

	@viper/concurrentqueue-src/lightweightsemaphore.h

6 #¥agm®
⁄˚


8 
	~<c°ddef
>

9 
	~<©omic
>

10 
	~<ty≥_åaôs
>

12 #i‡
deföed
(
_WIN32
)

19 
_SECURITY_ATTRIBUTES
;

20 
__de˛•ec
(
dŒimp‹t
Ë* 
__°dˇŒ
 
Cª©eSem≠h‹eW
(
_SECURITY_ATTRIBUTES
* 
ÕSem≠h‹eAâribuãs
, 
lInôülCou¡
, 
lMaximumCou¡
, c⁄° 
wch¨_t
* 
ÕName
);

21 
__de˛•ec
(
dŒimp‹t
Ë
__°dˇŒ
 
Clo£H™dÀ
(* 
hObje˘
);

22 
__de˛•ec
(
dŒimp‹t
Ë
__°dˇŒ
 
WaôF‹SögÀObje˘
(* 
hH™dÀ
, 
dwMûli£c⁄ds
);

23 
__de˛•ec
(
dŒimp‹t
Ë
__°dˇŒ
 
Rñó£Sem≠h‹e
(* 
hSem≠h‹e
, 
lRñó£Cou¡
, * 
ÕPªviousCou¡
);

25 #ñi‡
deföed
(
__MACH__
)

26 
	~<mach/mach.h
>

27 #ñi‡
deföed
(
__unix__
)

28 
	~<£m≠h‹e.h
>

31 
«me•a˚
 
moodyˇmñ


33 
«me•a˚
 
dëaûs


57 #i‡
deföed
(
_WIN32
)

58 ˛as†
	cSem≠h‹e


60 
¥iv©e
:

61 * 
m_hSema
;

63 
Sem≠h‹e
(c⁄° Sem≠h‹e& 
Ÿhî
Ë
MOODYCAMEL_DELETE_FUNCTION
;

64 
Sem≠h‹e
& 
›î©‹
=(c⁄° Sem≠h‹e& 
Ÿhî
Ë
MOODYCAMEL_DELETE_FUNCTION
;

66 
public
:

67 
Sem≠h‹e
(
öôülCou¡
 = 0)

69 
as£π
(
öôülCou¡
 >= 0);

70 c⁄° 
maxL⁄g
 = 0x7fffffff;

71 
m_hSema
 = 
Cª©eSem≠h‹eW
(
nuŒ±r
, 
öôülCou¡
, 
maxL⁄g
,Çullptr);

72 
as£π
(
m_hSema
);

75 ~
Sem≠h‹e
()

77 
Clo£H™dÀ
(
m_hSema
);

80 
boﬁ
 
waô
()

82 c⁄° 
öföôe
 = 0xffffffff;

83  
WaôF‹SögÀObje˘
(
m_hSema
, 
öföôe
) == 0;

86 
boﬁ
 
åy_waô
()

88  
WaôF‹SögÀObje˘
(
m_hSema
, 0) == 0;

91 
boﬁ
 
timed_waô
(
°d
::
uöt64_t
 
u£cs
)

93  
WaôF‹SögÀObje˘
(
m_hSema
, ()(
u£cs
 / 1000)) == 0;

96 
sig«l
(
cou¡
 = 1)

98 !
Rñó£Sem≠h‹e
(
m_hSema
, 
cou¡
, 
nuŒ±r
));

101 #ñi‡
deföed
(
__MACH__
)

106 ˛as†
	cSem≠h‹e


108 
¥iv©e
:

109 
£m≠h‹e_t
 
m_£ma
;

111 
Sem≠h‹e
(c⁄° Sem≠h‹e& 
Ÿhî
Ë
MOODYCAMEL_DELETE_FUNCTION
;

112 
Sem≠h‹e
& 
›î©‹
=(c⁄° Sem≠h‹e& 
Ÿhî
Ë
MOODYCAMEL_DELETE_FUNCTION
;

114 
public
:

115 
Sem≠h‹e
(
öôülCou¡
 = 0)

117 
as£π
(
öôülCou¡
 >= 0);

118 
kîn_ªtu∫_t
 
rc
 = 
£m≠h‹e_¸óã
(
mach_èsk_£lf
(), &
m_£ma
, 
SYNC_POLICY_FIFO
, 
öôülCou¡
);

119 
as£π
(
rc
 =
KERN_SUCCESS
);

120 ()
rc
;

123 ~
Sem≠h‹e
()

125 
£m≠h‹e_de°roy
(
mach_èsk_£lf
(), 
m_£ma
);

128 
boﬁ
 
waô
()

130  
£m≠h‹e_waô
(
m_£ma
Ë=
KERN_SUCCESS
;

133 
boﬁ
 
åy_waô
()

135  
timed_waô
(0);

138 
boﬁ
 
timed_waô
(
°d
::
uöt64_t
 
timeout_u£cs
)

140 
mach_time•ec_t
 
ts
;

141 
ts
.
tv_£c
 = 
°©ic_ˇ°
<>(
timeout_u£cs
 / 1000000);

142 
ts
.
tv_n£c
 = 
°©ic_ˇ°
<>((
timeout_u£cs
 % 1000000) * 1000);

145 
kîn_ªtu∫_t
 
rc
 = 
£m≠h‹e_timedwaô
(
m_£ma
, 
ts
);

146  
rc
 =
KERN_SUCCESS
;

149 
sig«l
()

151 
£m≠h‹e_sig«l
(
m_£ma
Ë!
KERN_SUCCESS
);

154 
sig«l
(
cou¡
)

156 
cou¡
-- > 0)

158 
£m≠h‹e_sig«l
(
m_£ma
Ë!
KERN_SUCCESS
);

162 #ñi‡
deföed
(
__unix__
)

166 ˛as†
	cSem≠h‹e


168 
¥iv©e
:

169 
£m_t
 
m_£ma
;

171 
Sem≠h‹e
(c⁄° Sem≠h‹e& 
Ÿhî
Ë
MOODYCAMEL_DELETE_FUNCTION
;

172 
Sem≠h‹e
& 
›î©‹
=(c⁄° Sem≠h‹e& 
Ÿhî
Ë
MOODYCAMEL_DELETE_FUNCTION
;

174 
public
:

175 
Sem≠h‹e
(
öôülCou¡
 = 0)

177 
as£π
(
öôülCou¡
 >= 0);

178 
rc
 = 
£m_öô
(&
m_£ma
, 0, 
°©ic_ˇ°
<>(
öôülCou¡
));

179 
as£π
(
rc
 == 0);

180 ()
rc
;

183 ~
Sem≠h‹e
()

185 
£m_de°roy
(&
m_£ma
);

188 
boﬁ
 
waô
()

191 
rc
;

193 
rc
 = 
£m_waô
(&
m_£ma
);

194 } 
rc
 =-1 && 
î∫o
 =
EINTR
);

195  
rc
 == 0;

198 
boﬁ
 
åy_waô
()

200 
rc
;

202 
rc
 = 
£m_åywaô
(&
m_£ma
);

203 } 
rc
 =-1 && 
î∫o
 =
EINTR
);

204  
rc
 == 0;

207 
boﬁ
 
timed_waô
(
°d
::
uöt64_t
 
u£cs
)

209 
time•ec
 
ts
;

210 c⁄° 
u£cs_ö_1_£c
 = 1000000;

211 c⁄° 
n£cs_ö_1_£c
 = 1000000000;

212 
˛ock_gëtime
(
CLOCK_REALTIME
, &
ts
);

213 
ts
.
tv_£c
 +(
time_t
)(
u£cs
 / 
u£cs_ö_1_£c
);

214 
ts
.
tv_n£c
 +()(
u£cs
 % 
u£cs_ö_1_£c
) * 1000;

217 i‡(
ts
.
tv_n£c
 >
n£cs_ö_1_£c
) {

218 
ts
.
tv_n£c
 -
n£cs_ö_1_£c
;

219 ++
ts
.
tv_£c
;

222 
rc
;

224 
rc
 = 
£m_timedwaô
(&
m_£ma
, &
ts
);

225 } 
rc
 =-1 && 
î∫o
 =
EINTR
);

226  
rc
 == 0;

229 
sig«l
()

231 
£m_po°
(&
m_£ma
) == -1);

234 
sig«l
(
cou¡
)

236 
cou¡
-- > 0)

238 
£m_po°
(&
m_£ma
) == -1);

243 #îr‹ 
Unsuµ‹ãd
 
∂©f‹m
! (
No
 
£m≠h‹e
 
wøµî
 
avaûabÀ
)

252 ˛as†
	cLightweightSem≠h‹e


254 
public
:

255 
°d
::
	tmake_sig√d
<
	t°d
::
	tsize_t
>::
	tty≥
 
	tssize_t
;

257 
¥iv©e
:

258 
°d
::
©omic
<
ssize_t
> 
m_cou¡
;

259 
dëaûs
::
Sem≠h‹e
 
m_£ma
;

260 
m_maxSpös
;

262 
boﬁ
 
waôWôhP¨tülSpönög
(
°d
::
öt64_t
 
timeout_u£cs
 = -1)

264 
ssize_t
 
ﬁdCou¡
;

265 
•ö
 = 
m_maxSpös
;

266 --
•ö
 >= 0)

268 
ﬁdCou¡
 = 
m_cou¡
.
lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
);

269 i‡((
ﬁdCou¡
 > 0Ë&& 
m_cou¡
.
com∑ª_exch™ge_°r⁄g
(ﬁdCou¡, oldCou¡ - 1, 
°d
::
mem‹y_‹dî_acquúe
, std::
mem‹y_‹dî_ªœxed
))

270  
åue
;

271 
°d
::
©omic_sig«l_„n˚
(°d::
mem‹y_‹dî_acquúe
);

273 
ﬁdCou¡
 = 
m_cou¡
.
„tch_sub
(1, 
°d
::
mem‹y_‹dî_acquúe
);

274 i‡(
ﬁdCou¡
 > 0)

275  
åue
;

276 i‡(
timeout_u£cs
 < 0)

278 i‡(
m_£ma
.
waô
())

279  
åue
;

281 i‡(
timeout_u£cs
 > 0 && 
m_£ma
.
timed_waô
((
°d
::
uöt64_t
)timeout_usecs))

282  
åue
;

288 
åue
)

290 
ﬁdCou¡
 = 
m_cou¡
.
lﬂd
(
°d
::
mem‹y_‹dî_acquúe
);

291 i‡(
ﬁdCou¡
 >0 && 
m_£ma
.
åy_waô
())

292  
åue
;

293 i‡(
ﬁdCou¡
 < 0 && 
m_cou¡
.
com∑ª_exch™ge_°r⁄g
(ﬁdCou¡, oldCou¡ + 1, 
°d
::
mem‹y_‹dî_ªœxed
, std::memory_order_relaxed))

294  
Ál£
;

298 
ssize_t
 
waôM™yWôhP¨tülSpönög
(ssize_à
max
, 
°d
::
öt64_t
 
timeout_u£cs
 = -1)

300 
as£π
(
max
 > 0);

301 
ssize_t
 
ﬁdCou¡
;

302 
•ö
 = 
m_maxSpös
;

303 --
•ö
 >= 0)

305 
ﬁdCou¡
 = 
m_cou¡
.
lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
);

306 i‡(
ﬁdCou¡
 > 0)

308 
ssize_t
 
√wCou¡
 = 
ﬁdCou¡
 > 
max
 ? oldCount - max : 0;

309 i‡(
m_cou¡
.
com∑ª_exch™ge_°r⁄g
(
ﬁdCou¡
, 
√wCou¡
, 
°d
::
mem‹y_‹dî_acquúe
, std::
mem‹y_‹dî_ªœxed
))

310  
ﬁdCou¡
 - 
√wCou¡
;

312 
°d
::
©omic_sig«l_„n˚
(°d::
mem‹y_‹dî_acquúe
);

314 
ﬁdCou¡
 = 
m_cou¡
.
„tch_sub
(1, 
°d
::
mem‹y_‹dî_acquúe
);

315 i‡(
ﬁdCou¡
 <= 0)

317 i‡((
timeout_u£cs
 =0Ë|| (timeout_u£c†< 0 && !
m_£ma
.
waô
()Ë|| (timeout_u£c†> 0 && !m_£ma.
timed_waô
((
°d
::
uöt64_t
)timeout_usecs)))

319 
åue
)

321 
ﬁdCou¡
 = 
m_cou¡
.
lﬂd
(
°d
::
mem‹y_‹dî_acquúe
);

322 i‡(
ﬁdCou¡
 >0 && 
m_£ma
.
åy_waô
())

324 i‡(
ﬁdCou¡
 < 0 && 
m_cou¡
.
com∑ª_exch™ge_°r⁄g
(ﬁdCou¡, oldCou¡ + 1, 
°d
::
mem‹y_‹dî_ªœxed
, std::memory_order_relaxed))

329 i‡(
max
 > 1)

330  1 + 
åyWaôM™y
(
max
 - 1);

334 
public
:

335 
LightweightSem≠h‹e
(
ssize_t
 
öôülCou¡
 = 0, 
maxSpös
 = 10000Ë: 
m_cou¡
(öôülCou¡), 
m_maxSpös
(maxSpins)

337 
as£π
(
öôülCou¡
 >= 0);

338 
as£π
(
maxSpös
 >= 0);

341 
boﬁ
 
åyWaô
()

343 
ssize_t
 
ﬁdCou¡
 = 
m_cou¡
.
lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
);

344 
ﬁdCou¡
 > 0)

346 i‡(
m_cou¡
.
com∑ª_exch™ge_wók
(
ﬁdCou¡
, oldCou¡ - 1, 
°d
::
mem‹y_‹dî_acquúe
, std::
mem‹y_‹dî_ªœxed
))

347  
åue
;

349  
Ál£
;

352 
boﬁ
 
waô
()

354  
åyWaô
(Ë|| 
waôWôhP¨tülSpönög
();

357 
boﬁ
 
waô
(
°d
::
öt64_t
 
timeout_u£cs
)

359  
åyWaô
(Ë|| 
waôWôhP¨tülSpönög
(
timeout_u£cs
);

363 
ssize_t
 
åyWaôM™y
(ssize_à
max
)

365 
as£π
(
max
 >= 0);

366 
ssize_t
 
ﬁdCou¡
 = 
m_cou¡
.
lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
);

367 
ﬁdCou¡
 > 0)

369 
ssize_t
 
√wCou¡
 = 
ﬁdCou¡
 > 
max
 ? oldCount - max : 0;

370 i‡(
m_cou¡
.
com∑ª_exch™ge_wók
(
ﬁdCou¡
, 
√wCou¡
, 
°d
::
mem‹y_‹dî_acquúe
, std::
mem‹y_‹dî_ªœxed
))

371  
ﬁdCou¡
 - 
√wCou¡
;

377 
ssize_t
 
waôM™y
(ssize_à
max
, 
°d
::
öt64_t
 
timeout_u£cs
)

379 
as£π
(
max
 >= 0);

380 
ssize_t
 
ªsu…
 = 
åyWaôM™y
(
max
);

381 i‡(
ªsu…
 =0 && 
max
 > 0)

382 
ªsu…
 = 
waôM™yWôhP¨tülSpönög
(
max
, 
timeout_u£cs
);

383  
ªsu…
;

386 
ssize_t
 
waôM™y
(ssize_à
max
)

388 
ssize_t
 
ªsu…
 = 
waôM™y
(
max
, -1);

389 
as£π
(
ªsu…
 > 0);

390  
ªsu…
;

393 
sig«l
(
ssize_t
 
cou¡
 = 1)

395 
as£π
(
cou¡
 >= 0);

396 
ssize_t
 
ﬁdCou¡
 = 
m_cou¡
.
„tch_add
(
cou¡
, 
°d
::
mem‹y_‹dî_ªÀa£
);

397 
ssize_t
 
toRñó£
 = -
ﬁdCou¡
 < 
cou¡
 ? -oldCount : count;

398 i‡(
toRñó£
 > 0)

400 
m_£ma
.
sig«l
(()
toRñó£
);

404 
°d
::
size_t
 
avaûabÀAµrox
() const

406 
ssize_t
 
cou¡
 = 
m_cou¡
.
lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
);

407  
cou¡
 > 0 ? 
°©ic_ˇ°
<
°d
::
size_t
>(count) : 0;

	@viper/concurrentqueue-src/tests/CDSChecker/corealgo.h

7 #¥agm®
⁄˚


9 
	~"modñ-checkî/ö˛ude/©omic
"

10 
	~"modñ-checkî/ö˛ude/libø˚.h
"

11 
	~"modñ-checkî/ö˛ude/modñ-as£π.h
"

13 #i‚de‡
CHAR_BIT


14 
	#CHAR_BIT
 8

	)

17 
	tödex_t
;

18 
	g°d
::
©omic
<
ödex_t
> 
hódIndex
;

19 
	g°d
::
©omic
<
ödex_t
> 
èûIndex
;

20 
	g°d
::
©omic
<
ödex_t
> 
dequeueOvîcommô
;

21 
	g°d
::
©omic
<
ödex_t
> 
dequeueO±imi°icCou¡
;

23 c⁄° 
	gBLOCK_SIZE
 = 256;

24 
	gblock
[
BLOCK_SIZE
];

26 
	$öô
()

28 
hódIndex
.
	`°‹e
(0, 
°d
::
mem‹y_‹dî_ªœxed
);

29 
èûIndex
.
	`°‹e
(0, 
°d
::
mem‹y_‹dî_ªœxed
);

30 
dequeueOvîcommô
.
	`°‹e
(0, 
°d
::
mem‹y_‹dî_ªœxed
);

31 
dequeueO±imi°icCou¡
.
	`°‹e
(0, 
°d
::
mem‹y_‹dî_ªœxed
);

32 
	}
}

34 
	gãm∂©e
<
ty≥«me
 
	gT
>

35 
ölöe
 
boﬁ
 
	$cúcuœr_Àss_th™
(
T
 
a
, T 
b
)

37  
°©ic_ˇ°
<
T
>(
a
 - 
b
Ë> sètic_ˇ°<T>(°©ic_ˇ°<T>(1Ë<< sètic_ˇ°<T>((TË* 
CHAR_BIT
 - 1));

38 
	}
}

40 
	$íqueue
(
ñemít
)

42 
ödex_t
 
cuºítTaûIndex
 = 
èûIndex
.
	`lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
);

43 
ödex_t
 
√wTaûIndex
 = 1 + 
cuºítTaûIndex
;

45 
	`°‹e_32
(&
block
[
cuºítTaûIndex
 & (
BLOCK_SIZE
 - 1)], 
ñemít
);

47 
èûIndex
.
	`°‹e
(
√wTaûIndex
, 
°d
::
mem‹y_‹dî_ªÀa£
);

48 
	}
}

50 
boﬁ
 
	$åy_dequeue
(& 
ñemít
)

52 autÿ
èû
 = 
èûIndex
.
	`lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
);

53 autÿ
ovîcommô
 = 
dequeueOvîcommô
.
	`lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
);

54 i‡(
cúcuœr_Àss_th™
<
ödex_t
>(
dequeueO±imi°icCou¡
.
	`lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
Ë- 
ovîcommô
, 
èû
)) {

71 
°d
::
	`©omic_thªad_„n˚
(°d::
mem‹y_‹dî_acquúe
);

74 autÿ
myDequeueCou¡
 = 
dequeueO±imi°icCou¡
.
	`„tch_add
(1, 
°d
::
mem‹y_‹dî_ªœxed
);

80 
	`MODEL_ASSERT
(
ovîcommô
 <
myDequeueCou¡
);

85 autÿ
√wTaû
 = 
èûIndex
.
	`lﬂd
(
°d
::
mem‹y_‹dî_acquúe
);

86 
	`MODEL_ASSERT
(
√wTaû
 >
èû
);

87 
èû
 = 
√wTaû
;

88 i‡(
cúcuœr_Àss_th™
<
ödex_t
>(
myDequeueCou¡
 - 
ovîcommô
, 
èû
)) {

93 autÿ
ödex
 = 
hódIndex
.
	`„tch_add
(1, 
°d
::
mem‹y_‹dî_acq_ªl
);

96 
ñemít
 = 
	`lﬂd_32
(&
block
[
ödex
 & (
BLOCK_SIZE
 - 1)]);

98  
åue
;

102 
dequeueOvîcommô
.
	`„tch_add
(1, 
°d
::
mem‹y_‹dî_ªÀa£
);

106  
Ál£
;

107 
	}
}

109 
	$size_≠¥ox
()

111 autÿ
èû
 = 
èûIndex
.
	`lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
);

112 autÿ
hód
 = 
hódIndex
.
	`lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
);

113  
	`cúcuœr_Àss_th™
(
hód
, 
èû
Ë? 
°©ic_ˇ°
<>(tail - head) : 0;

114 
	}
}

	@viper/concurrentqueue-src/tests/CDSChecker/enqueue_dequeue_many.cpp

5 
	~"modñ-checkî/ö˛ude/thªads.h
"

6 
	~"c‹ólgo.h
"

8 
	$c⁄sumî
(* 
∑øm
)

10 
id
 = *(*)
∑øm
;

11 & 
dequeueCou¡
 = *(*)
∑øm
;

12 
dequeueCou¡
 = 0;

14 
œ°
 = 0;

16 
ñemít
;

17 
boﬁ
 
suc˚ss
 = 
	`åy_dequeue
(
ñemít
);

18 i‡(
suc˚ss
) {

19 
	`MODEL_ASSERT
(
ñemít
 > 
œ°
);

20 
œ°
 = 
ñemít
;

21 ++
dequeueCou¡
;

23 
suc˚ss
 = 
	`åy_dequeue
(
ñemít
);

24 i‡(
suc˚ss
) {

25 
	`MODEL_ASSERT
(
ñemít
 > 
œ°
);

26 
œ°
 = 
ñemít
;

27 ++
dequeueCou¡
;

29 
	}
}

31 
	$¥odu˚r
(* 
∑øm
)

33 
i
 = 1; i <= 8; ++i)

34 
	`íqueue
(
i
);

36 
	`c⁄sumî
(
∑øm
);

37 
	}
}

39 
	$u£r_maö
(, **)

41 
	`öô
();

45 
w
 = 1, 
x
 = 2, 
y
 = 3, 
z
 = 4;

47 
thrd_t
 
a
, 
b
, 
c
, 
d
;

49 
	`thrd_¸óã
(&
a
, &
¥odu˚r
, &
w
);

50 
	`thrd_¸óã
(&
b
, &
c⁄sumî
, &
x
);

51 
	`thrd_¸óã
(&
c
, &
c⁄sumî
, &
y
);

52 
	`thrd_¸óã
(&
d
, &
c⁄sumî
, &
z
);

54 
	`thrd_joö
(
a
);

55 
	`thrd_joö
(
b
);

56 
	`thrd_joö
(
c
);

57 
	`thrd_joö
(
d
);

59 
	`MODEL_ASSERT
(
w
 + 
x
 + 
y
 + 
z
 + 
	`size_≠¥ox
() == 8);

62 
	}
}

	@viper/concurrentqueue-src/tests/CDSChecker/enqueue_dequeue_one.cpp

5 
	~"modñ-checkî/ö˛ude/thªads.h
"

6 
	~"c‹ólgo.h
"

8 
	$¥odu˚r_thªad
(*)

10 
	`íqueue
(1234);

11 
	}
}

13 
	$c⁄sumî_thªad
(*)

15 
ñemít
;

16 
boﬁ
 
ªsu…
 = 
	`åy_dequeue
(
ñemít
);

17 
	`MODEL_ASSERT
(!
ªsu…
 || 
ñemít
 == 1234);

19 i‡(
ªsu…
) {

20 
	`MODEL_ASSERT
(!
	`åy_dequeue
(
ñemít
));

22 
	}
}

24 
	$u£r_maö
(, **)

26 
	`öô
();

28 
thrd_t
 
p
, 
c
;

30 
	`thrd_¸óã
(&
p
, &
¥odu˚r_thªad
, 
nuŒ±r
);

31 
	`thrd_¸óã
(&
c
, &
c⁄sumî_thªad
, 
nuŒ±r
);

33 
	`thrd_joö
(
p
);

34 
	`thrd_joö
(
c
);

37 
	}
}

	@viper/concurrentqueue-src/tests/common/simplethread.cpp

3 
	~"sim∂ëhªad.h
"

5 #i‡
deföed
(
_WIN32
)

6 
	#WIN32_LEAN_AND_MEAN


	)

7 
	~<wödows.h
>

9 
	gSim∂eThªad
::
ThªadRef


11 
HANDLE
 
h™dÀ
;

13 
DWORD
 
WINAPI
 
ThªadProc
(
LPVOID
 
∑øm
)

15 autÿ
	gthªadRef
 = 
°©ic_ˇ°
<
ThªadRef
*>(
∑øm
);

16 
	gthªadRef
->
ˇŒbackFunc
(
thªadRef
->
ˇŒbackObj
);

20 
ThªadRef
(* 
ˇŒbackObj
, 
CÆlbackFunc
 
ˇŒbackFunc
)

21 : 
ˇŒbackObj
(ˇŒbackObj), 
ˇŒbackFunc
(callbackFunc)

25 * 
	gˇŒbackObj
;

26 
CÆlbackFunc
 
	gˇŒbackFunc
;

29 
	gSim∂eThªad
::
	$°¨tThªad
(* 
ˇŒbackObj
, 
CÆlbackFunc
 
ˇŒbackFunc
)

31 
thªad
 = 
√w
 
	`ThªadRef
(
ˇŒbackObj
, 
ˇŒbackFunc
);

32 
thªad
->
h™dÀ
 = 
	`Cª©eThªad
(
NULL
, 
SèckSize
, &
ThªadRef
::
ThªadProc
,Åhread, 0, NULL);

33 
	}
}

35 
	gSim∂eThªad
::
	$joö
()

37 i‡(
thªad
 !
nuŒ±r
 &&Åhªad->
h™dÀ
 !
NULL
) {

38 
	`WaôF‹SögÀObje˘
(
thªad
->
h™dÀ
, 
INFINITE
);

39 
	`Clo£H™dÀ
(
thªad
->
h™dÀ
);

40 
thªad
->
h™dÀ
 = 
NULL
;

42 
	}
}

44 
	~<thªad
>

46 
	gSim∂eThªad
::
ThªadRef


48 
°d
::
thªad
Åhread;

50 
thªadProc
(
ThªadRef
* 
thªadRef
)

52 
	gthªadRef
->
ˇŒbackFunc
(
thªadRef
->
ˇŒbackObj
);

55 
ThªadRef
(* 
ˇŒbackObj
, 
CÆlbackFunc
 
ˇŒbackFunc
)

56 : 
ˇŒbackObj
(ˇŒbackObj), 
ˇŒbackFunc
(callbackFunc)

60 * 
	gˇŒbackObj
;

61 
CÆlbackFunc
 
	gˇŒbackFunc
;

64 
	gSim∂eThªad
::
	$°¨tThªad
(* 
ˇŒbackObj
, 
CÆlbackFunc
 
ˇŒbackFunc
)

66 
thªad
 = 
√w
 
	`ThªadRef
(
ˇŒbackObj
, 
ˇŒbackFunc
);

67 
thªad
->thªad = 
°d
::
	`thªad
(&
ThªadRef
::
thªadProc
,Åhread);

68 
	}
}

70 
	gSim∂eThªad
::
	$joö
()

72 i‡(
thªad
 !
nuŒ±r
 &&Åhªad->thªad.
	`joöabÀ
()) {

73 
thªad
->thªad.
	`joö
();

75 
	}
}

78 
	gSim∂eThªad
::~
	$Sim∂eThªad
()

80 i‡(
thªad
 !
nuŒ±r
) {

81 
	`joö
();

82 
dñëe
 
thªad
;

84 
	}
}

	@viper/concurrentqueue-src/tests/common/simplethread.h

3 #¥agm®
⁄˚


10 
	~<utûôy
>

11 
	~<ty≥_åaôs
>

14 
«me•a˚
 
	gdëaûs


16 
	gãm∂©e
<
ty≥«me
 
	gTArg1
 = ,Åy≥«mê
	gTArg2
 = ,Åy≥«mê
	gTArg3
 = >

17 
	sArgWøµî


19 
ty≥«me
 
°d
::
ªmove_ª„ªn˚
<
TArg1
>::
ty≥
 
¨g1
;

20 
ty≥«me
 
	g°d
::
ªmove_ª„ªn˚
<
TArg2
>::
ty≥
 
¨g2
;

21 
ty≥«me
 
	g°d
::
ªmove_ª„ªn˚
<
TArg3
>::
ty≥
 
¨g3
;

22 
ArgWøµî
(ArgWøµî c⁄°& 
o
Ë: 
¨g1
(o.¨g1), 
¨g2
(o.¨g2), 
¨g3
(o.arg3) { }

23 
ArgWøµî
(ArgWøµî&& 
o
Ë: 
¨g1
(
°d
::
move
(o.¨g1)), 
¨g2
(°d::move(o.¨g2)), 
¨g3
(std::move(o.arg3)) { }

24 
ãm∂©e
<
ty≥«me
 
T
,Åy≥«mê
	gU
,Åy≥«mê
	gV
>

25 
ArgWøµî
(
T
&& 
a1
, 
U
&& 
a2
, 
V
&& 
a3
Ë: 
¨g1
(
°d
::
f‹w¨d
<T>◊1)), 
¨g2
(°d::f‹w¨d<U>◊2)), 
¨g3
(std::forward<V>(a3)) { }

26 
ãm∂©e
<
ty≥«me
 
TCÆlback
>

27 
ˇŒCÆlback
(
TCÆlback
&& 
ˇŒback
Ëc⁄° { 
°d
::
f‹w¨d
<TCÆlback>(ˇŒback)(°d::
move
(
¨g1
), 
	g°d
::move(
¨g2
), std::move(
¨g3
)); }

30 
	gãm∂©e
<
ty≥«me
 
	gTArg1
,Åy≥«mê
	gTArg2
>

31 
	gArgWøµî
<
	gTArg1
, 
	gTArg2
, >

33 
ty≥«me
 
	g°d
::
ªmove_ª„ªn˚
<
TArg1
>::
ty≥
 
¨g1
;

34 
ty≥«me
 
	g°d
::
ªmove_ª„ªn˚
<
TArg2
>::
ty≥
 
¨g2
;

35 
ArgWøµî
(ArgWøµî c⁄°& 
o
Ë: 
¨g1
(o.¨g1), 
¨g2
(o.arg2) { }

36 
ArgWøµî
(ArgWøµî&& 
o
Ë: 
¨g1
(
°d
::
move
(o.¨g1)), 
¨g2
(std::move(o.arg2)) { }

37 
ãm∂©e
<
ty≥«me
 
T
,Åy≥«mê
	gU
>

38 
ArgWøµî
(
T
&& 
a1
, 
U
&& 
a2
Ë: 
¨g1
(
°d
::
f‹w¨d
<T>◊1)), 
¨g2
(std::forward<U>(a2)) { }

39 
ãm∂©e
<
ty≥«me
 
TCÆlback
>

40 
ˇŒCÆlback
(
TCÆlback
&& 
ˇŒback
Ëc⁄° { 
°d
::
f‹w¨d
<TCÆlback>(ˇŒback)(°d::
move
(
¨g1
), 
	g°d
::move(
¨g2
)); }

43 
	gãm∂©e
<
ty≥«me
 
	gTArg1
>

44 
	gArgWøµî
<
	gTArg1
, , >

46 
ty≥«me
 
	g°d
::
ªmove_ª„ªn˚
<
TArg1
>::
ty≥
 
¨g1
;

47 
ArgWøµî
(ArgWøµî c⁄°& 
o
Ë: 
¨g1
(o.arg1) { }

48 
ArgWøµî
(ArgWøµî&& 
o
Ë: 
¨g1
(
°d
::
move
(o.arg1)) { }

49 
ãm∂©e
<
ty≥«me
 
T
>

50 
ArgWøµî
(
T
&& 
a1
Ë: 
¨g1
(
°d
::
f‹w¨d
<T>(a1)) { }

51 
ãm∂©e
<
ty≥«me
 
TCÆlback
>

52 
ˇŒCÆlback
(
TCÆlback
&& 
ˇŒback
Ëc⁄° { 
°d
::
f‹w¨d
<TCÆlback>(ˇŒback)(°d::
move
(
¨g1
)); }

55 
	gãm∂©e
<> 
	gArgWøµî
<, , >

57 
	gãm∂©e
<
ty≥«me
 
	gTCÆlback
> 
ˇŒCÆlback
(
TCÆlback
&& 
ˇŒback
Ëc⁄° { 
	g°d
::
f‹w¨d
<TCallback>(callback)(); }

62 ˛as†
	cSim∂eThªad


64 
	m¥iv©e
:

65 
ThªadRef
;

67 
	mãm∂©e
<
ty≥«me
 
	mTCÆlback
,Åy≥«mê
	mTArgs
>

68 
	sCÆlbackWøµî


70 
	mãm∂©e
<
ty≥«me
 
	mU
>

71 
CÆlbackWøµî
(
TCÆlback
&& 
ˇŒback
, 
U
&& 
¨gs
)

72 : 
ˇŒback
(
°d
::
f‹w¨d
<
TCÆlback
>(ˇŒback)), 
¨gs
(°d::f‹w¨d<
U
>(args))

76 
ˇŒAndDñëe
(* 
wøµî
)

78 autÿ
ty≥dWøµî
 = 
°©ic_ˇ°
<
CÆlbackWøµî
*>(
wøµî
);

79 
	mty≥dWøµî
->
	m¨gs
.
ˇŒCÆlback
(
°d
::
move
(
ty≥dWøµî
->
ˇŒback
));

80 
dñëe
 
	mty≥dWøµî
;

83 
ty≥«me
 
	m°d
::
deˇy
<
TCÆlback
>::
ty≥
 
ˇŒback
;

84 
TArgs
 
	m¨gs
;

87 (*
	tCÆlbackFunc
)(*);

89 
	`°¨tThªad
(* 
ˇŒbackObj
, 
CÆlbackFunc
 
ˇŒbackFunc
);

92 
public
:

93 c⁄° 
SèckSize
 = 4 * 1024;

95 
	$Sim∂eThªad
(Ë: 
	$thªad
(
nuŒ±r
Ë{ 
	}
}

97 
	$Sim∂eThªad
(
Sim∂eThªad
&& 
Ÿhî
)

98 : 
	$thªad
(
Ÿhî
.
thªad
)

100 
Ÿhî
.
thªad
 = 
nuŒ±r
;

101 
	}
}

103 
	gSim∂eThªad
& 
	g›î©‹
=(
Sim∂eThªad
&& 
Ÿhî
)

105 
thªad
 = 
Ÿhî
.thread;

106 
	gŸhî
.
	gthªad
 = 
nuŒ±r
;

107  *
	gthis
;

111 
	g¥iv©e
:

112 
Sim∂eThªad
(SimpleThread const&);

113 
	gSim∂eThªad
& 
	g›î©‹
=(
Sim∂eThªad
 const&);

114 
	gpublic
:

116 
ãm∂©e
<
ty≥«me
 
TCÆlback
>

117 
ex∂icô
 
	$Sim∂eThªad
(
TCÆlback
&& 
ˇŒback
)

119 autÿ
wøµî
 = 
√w
 
CÆlbackWøµî
<
TCÆlback
, ::
dëaûs
::
ArgWøµî
<>>(

120 
°d
::
f‹w¨d
<
TCÆlback
>(
ˇŒback
),

121 ::
dëaûs
::
ArgWøµî
<>()

123 
	`°¨tThªad
(
wøµî
, &
CÆlbackWøµî
<
TCÆlback
, ::
dëaûs
::
ArgWøµî
<>>::
ˇŒAndDñëe
);

124 
	}
}

126 
	gãm∂©e
<
ty≥«me
 
	gTCÆlback
,Åy≥«mê
	gTArg1
>

127 
ex∂icô
 
	$Sim∂eThªad
(
TCÆlback
&& 
ˇŒback
, 
TArg1
&& 
¨g1
)

129 autÿ
wøµî
 = 
√w
 
CÆlbackWøµî
<
TCÆlback
, ::
dëaûs
::
ArgWøµî
<
TArg1
>>(

130 
°d
::
f‹w¨d
<
TCÆlback
>(
ˇŒback
),

131 ::
dëaûs
::
ArgWøµî
<
TArg1
>(
°d
::
f‹w¨d
<TArg1>(
¨g1
))

133 
	`°¨tThªad
(
wøµî
, &
CÆlbackWøµî
<
TCÆlback
, ::
dëaûs
::
ArgWøµî
<
TArg1
>>::
ˇŒAndDñëe
);

134 
	}
}

136 
	gãm∂©e
<
ty≥«me
 
	gTCÆlback
,Åy≥«mê
	gTArg1
,Åy≥«mê
	gTArg2
>

137 
ex∂icô
 
	$Sim∂eThªad
(
TCÆlback
&& 
ˇŒback
, 
TArg1
&& 
¨g1
, 
TArg2
&& 
¨g2
)

139 autÿ
wøµî
 = 
√w
 
CÆlbackWøµî
<
TCÆlback
, ::
dëaûs
::
ArgWøµî
<
TArg1
, 
TArg2
>>(

140 
°d
::
f‹w¨d
<
TCÆlback
>(
ˇŒback
),

141 ::
dëaûs
::
ArgWøµî
<
TArg1
, 
TArg2
>(
°d
::
f‹w¨d
<TArg1>(
¨g1
), std::f‹w¨d<TArg2>(
¨g2
))

143 
	`°¨tThªad
(
wøµî
, &
CÆlbackWøµî
<
TCÆlback
, ::
dëaûs
::
ArgWøµî
<
TArg1
, 
TArg2
>>::
ˇŒAndDñëe
);

144 
	}
}

146 
	gãm∂©e
<
ty≥«me
 
	gTCÆlback
,Åy≥«mê
	gTArg1
,Åy≥«mê
	gTArg2
,Åy≥«mê
	gTArg3
>

147 
ex∂icô
 
	$Sim∂eThªad
(
TCÆlback
&& 
ˇŒback
, 
TArg1
&& 
¨g1
, 
TArg2
&& 
¨g2
, 
TArg3
&& 
¨g3
)

149 autÿ
wøµî
 = 
√w
 
CÆlbackWøµî
<
TCÆlback
, ::
dëaûs
::
ArgWøµî
<
TArg1
, 
TArg2
, 
TArg3
>>(

150 
°d
::
f‹w¨d
<
TCÆlback
>(
ˇŒback
),

151 ::
dëaûs
::
ArgWøµî
<
TArg1
, 
TArg2
, 
TArg3
>(
°d
::
f‹w¨d
<TArg1>(
¨g1
), std::f‹w¨d<TArg2>(
¨g2
), std::f‹w¨d<TArg3>(
¨g3
))

153 
	`°¨tThªad
(
wøµî
, &
CÆlbackWøµî
<
TCÆlback
, ::
dëaûs
::
ArgWøµî
<
TArg1
, 
TArg2
, 
TArg3
>>::
ˇŒAndDñëe
);

154 
	}
}

156 ~
Sim∂eThªad
();

158 
joö
();

160 
	g¥iv©e
:

161 
ThªadRef
* 
thªad
;

	@viper/concurrentqueue-src/tests/common/systemtime.cpp

3 
	~"sy°emtime.h
"

4 
	~<˛imôs
>

6 #i‡
deföed
(
_MSC_VER
) && _MSC_VER < 1700

7 
	~<öåö.h
>

8 
	#CompûîMemB¨
(Ë
	`_RódWrôeB¨rõr
()

	)

10 
	~<©omic
>

11 
	#CompûîMemB¨
(Ë
°d
::
	`©omic_sig«l_„n˚
(°d::
mem‹y_‹dî_£q_c°
)

	)

14 #i‡
deföed
(
ST_WINDOWS
)

16 
	~<wödows.h
>

18 
«me•a˚
 
	gmoodyˇmñ


21 
¶ìp
(
mûli£c⁄ds
)

23 ::
SÀï
(
mûli£c⁄ds
);

26 
Sy°emTime
 
gëSy°emTime
()

28 
LARGE_INTEGER
 
	gt
;

29 
CompûîMemB¨
();

30 i‡(!
QuîyPîf‹m™˚Cou¡î
(&
t
)) {

31  
	g°©ic_ˇ°
<
	gSy°emTime
>(-1);

33 
CompûîMemB¨
();

35  
	g°©ic_ˇ°
<
	gSy°emTime
>(
	gt
.
	gQuadP¨t
);

38 
gëTimeDñè
(
Sy°emTime
 
°¨t
)

40 
LARGE_INTEGER
 
	gt
;

41 
CompûîMemB¨
();

42 i‡(
	g°¨t
 =
°©ic_ˇ°
<
Sy°emTime
>(-1Ë|| !
QuîyPîf‹m™˚Cou¡î
(&
t
)) {

45 
CompûîMemB¨
();

47 autÿ
	gnow
 = 
°©ic_ˇ°
<
Sy°emTime
>(
t
.
QuadP¨t
);

49 
LARGE_INTEGER
 
	gf
;

50 i‡(!
QuîyPîf‹m™˚Fªquícy
(&
f
)) {

54 #i‡
deföed
(
__GNUC__
)

55 #¥agm®
GCC
 
dügno°ic
 
push


56 #¥agm®
GCC
 
dügno°ic
 
ign‹ed
 "-Wconversion"

58  
	g°©ic_ˇ°
<>(°©ic_ˇ°<
	g__öt64
>(
	gnow
 - 
	g°¨t
)Ë/ 
	gf
.
	gQuadP¨t
 * 1000;

59 #i‡
deföed
(
__GNUC__
)

60 #¥agm®
GCC
 
dügno°ic
 
p›


66 #ñi‡
deföed
(
ST_APPLE
)

68 
	~<mach/mach.h
>

69 
	~<mach/mach_time.h
>

70 
	~<uni°d.h
>

71 
	~<time.h
>

73 
«me•a˚
 
	gmoodyˇmñ


76 
¶ìp
(
mûli£c⁄ds
)

78 ::
u¶ìp
(
mûli£c⁄ds
 * 1000);

81 
Sy°emTime
 
gëSy°emTime
()

83 
CompûîMemB¨
();

84 
	g°d
::
uöt64_t
 
ªsu…
 = 
mach_absﬁuã_time
();

85 
CompûîMemB¨
();

87  
	gªsu…
;

90 
gëTimeDñè
(
Sy°emTime
 
°¨t
)

92 
CompûîMemB¨
();

93 
	g°d
::
uöt64_t
 
íd
 = 
mach_absﬁuã_time
();

94 
CompûîMemB¨
();

96 
mach_timeba£_öfo_d©a_t
 
	gtb
 = { 0 };

97 
mach_timeba£_öfo
(&
tb
);

98 
	gtoN™o
 = 
°©ic_ˇ°
<>(
tb
.
numî
Ë/Åb.
díom
;

100  
	g°©ic_ˇ°
<>(
	gíd
 - 
	g°¨t
Ë* 
	gtoN™o
 * 0.000001;

105 #ñi‡
deföed
(
ST_NIX
)

107 
	~<uni°d.h
>

109 
«me•a˚
 
	gmoodyˇmñ


112 
¶ìp
(
mûli£c⁄ds
)

114 ::
u¶ìp
(
mûli£c⁄ds
 * 1000);

117 
Sy°emTime
 
gëSy°emTime
()

119 
time•ec
 
	gt
;

120 
CompûîMemB¨
();

121 i‡(
˛ock_gëtime
(
CLOCK_MONOTONIC_RAW
, &
t
) != 0) {

122 
t
.
tv_£c
 = (
time_t
)-1;

123 
	gt
.
	gtv_n£c
 = -1;

125 
CompûîMemB¨
();

127  
	gt
;

130 
gëTimeDñè
(
Sy°emTime
 
°¨t
)

132 
time•ec
 
	gt
;

133 
CompûîMemB¨
();

134 i‡((
	g°¨t
.
	gtv_£c
 =(
time_t
)-1 && 
°¨t
.
tv_n£c
 =-1Ë|| 
˛ock_gëtime
(
CLOCK_MONOTONIC_RAW
, &
t
) != 0) {

137 
CompûîMemB¨
();

139  
	g°©ic_ˇ°
<>(°©ic_ˇ°<>(
	gt
.
	gtv_£c
Ë- sètic_ˇ°<>(
	g°¨t
.tv_£c)Ë* 1000 + —.
	gtv_n£c
 - start.tv_nsec) / 1000000;

	@viper/concurrentqueue-src/tests/common/systemtime.h

3 #¥agm®
⁄˚


5 #i‡
deföed
(
_WIN32
)

6 
	#ST_WINDOWS


	)

7 #ñi‡
deföed
(
__APPLE__
Ë&& deföed(
__MACH__
)

8 
	#ST_APPLE


	)

9 #ñi‡
deföed
(
__löux__
Ë|| deföed(
__FªeBSD__
Ë|| deföed(
BSD
)

10 
	#ST_NIX


	)

15 #i‡
deföed
(
ST_WINDOWS
)

16 
«me•a˚
 
	gmoodyˇmñ
 { 
	tSy°emTime
; }

17 #ñi‡
deföed
(
ST_APPLE
)

18 
	~<c°döt
>

19 
«me•a˚
 
	gmoodyˇmñ
 { 
	g°d
::
	tuöt64_t
 
	tSy°emTime
; }

20 #ñi‡
deföed
(
ST_NIX
)

21 
	~<time.h
>

22 
«me•a˚
 
	gmoodyˇmñ
 { 
time•ec
 
	tSy°emTime
; }

25 
«me•a˚
 
	gmoodyˇmñ


27 
¶ìp
(
mûli£c⁄ds
);

29 
Sy°emTime
 
gëSy°emTime
();

32 
gëTimeDñè
(
Sy°emTime
 
°¨t
);

	@viper/concurrentqueue-src/tests/corealgos.h

7 #¥agm®
⁄˚


9 
	~<©omic
>

10 
	~<c°döt
>

11 
	~<c°dlib
>

12 
	~<Æg‹ôhm
>

13 
	~<utûôy
>

14 
	~<limôs
>

15 
	~<ˇs£π
>

20 #i‚de‡
c‹ólgos_Æloˇt‹


21 
	sc‹ólgos_Æloˇt‹


23 
ölöe
 * 
mÆloc
(
°d
::
size_t
 
size
) {  std::malloc(size); }

24 
ölöe
 
‰ì
(* 
±r
Ë{ 
	m°d
::free(ptr); }

33 
«me•a˚
 
	gmoodyˇmñ
 {Çame•a˚ 
	gc‹ólgos
 {

35 
	sLi°Iãm


37 
Li°Iãm
()

38 : 
c⁄cuºítLi°Pªv
(
nuŒ±r
)

42 
public
:

43 
°d
::
©omic
<
Li°Iãm
*> 
c⁄cuºítLi°Pªv
;

46 
	gãm∂©e
<
ty≥«me
 
	gT
>

47 
	sC⁄cuºítAddO∆yLi°


49 
C⁄cuºítAddO∆yLi°
()

50 : 
èû_
(
nuŒ±r
)

54 
ölöe
 
T
* 
èû
(Ë{  
èû_
.
lﬂd
(
°d
::
mem‹y_‹dî_acquúe
); }

56 
add
(
T
* 
ñemít
)

58 
as£π
(
ñemít
 !
nuŒ±r
);

61 autÿ
	g¥evTaû
 = 
èû_
.
lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
);

63 
	gñemít
->
	gc⁄cuºítLi°Pªv
 = 
¥evTaû
;

64 } !
	gèû_
.
com∑ª_exch™ge_wók
(
¥evTaû
, 
ñemít
, 
°d
::
mem‹y_‹dî_ªÀa£
, std::
mem‹y_‹dî_ªœxed
));

67 
	g¥iv©e
:

68 
°d
::
©omic
<
T
*> 
èû_
;

79 #i‡
deföed
(
__APPLE__
)

80 
	~"T¨gëC⁄dôi⁄Æs.h
"

84 #i‡
deföed
(
_WIN32
Ë|| deföed(
__WINDOWS__
Ë|| deföed(
__WIN32__
)

87 "C" 
	$__de˛•ec
(
dŒimp‹t
Ë
__°dˇŒ
 
	`GëCuºítThªadId
();

88 
«me•a˚
 
moodyˇmñ
 {Çame•a˚ 
c‹ólgos
 {Çame•a˚ 
dëaûs
 {

89 
	`°©ic_as£π
((Ë=(
°d
::
uöt32_t
), "Expected size of unsignedÜongÅo be 32 bits on Windows");

90 
°d
::
	tuöt32_t
 
	tthªad_id_t
;

91 c⁄° 
thªad_id_t
 
övÆid_thªad_id
 = 0;

92 
ölöe
 
thªad_id_t
 
	`thªad_id
(Ë{  
°©ic_ˇ°
<thªad_id_t>(::
	`GëCuºítThªadId
()); }

93 } } 
	}
}

94 #ñi‡
deföed
(
__¨m__
Ë|| deföed(
_M_ARM
Ë|| deföed(
__Ørch64__
Ë|| (deföed(
__APPLE__
Ë&& 
TARGET_OS_IPHONE
)

95 
«me•a˚
 
	gmoodyˇmñ
 {Çame•a˚ 
	gc‹ólgos
 {Çame•a˚ 
	gdëaûs
 {

96 
	g°d
::
	tuöçå_t
 
	tthªad_id_t
;

97 c⁄° 
thªad_id_t
 
	gövÆid_thªad_id
 = 0;

98 
ölöe
 
thªad_id_t
 
thªad_id
(Ë{  
	g°d
::
hash
<
°d
::
thªad
::
id
>()(°d::
this_thªad
::
gë_id
()); }

104 #i‡
deföed
(
__GNUC__
Ë|| deföed(
__INTEL_COMPILER
)

105 
	#MOODYCAMEL_COREALGO_THREADLOCAL
 
__thªad


	)

106 #ñi‡
deföed
(
_MSC_VER
)

107 
	#MOODYCAMEL_COREALGO_THREADLOCAL
 
	`__de˛•ec
(
thªad
)

	)

110 
	#MOODYCAMEL_COREALGO_THREADLOCAL
 
thªad_loˇl


	)

112 
«me•a˚
 
	gmoodyˇmñ
 {Çame•a˚ 
	gc‹ólgos
 {Çame•a˚ 
	gdëaûs
 {

113 
	g°d
::
	tuöçå_t
 
	tthªad_id_t
;

114 c⁄° 
thªad_id_t
 
	gövÆid_thªad_id
 = 0;

115 
ölöe
 
thªad_id_t
 
thªad_id
(Ë{ 
MOODYCAMEL_COREALGO_THREADLOCAL
 
	gx
;  
	gªöãΩªt_ˇ°
<
	gthªad_id_t
>(&x); }

119 
«me•a˚
 
	gmoodyˇmñ
 {Çame•a˚ 
	gc‹ólgos
 {

121 
«me•a˚
 
	gdëaûs


123 
	gãm∂©e
<
boﬁ
 
	gu£32
> 
	s_hash_32_‹_64
 {

124 
ölöe
 
	g°d
::
size_t
 
hash
(
°d
::
uöt32_t
 
h
)

130 
h
 ^= h >> 16;

131 
	gh
 *= 0x85ebca6b;

132 
	gh
 ^
h
 >> 13;

133 
	gh
 *= 0xc2b2ae35;

134  
	g°©ic_ˇ°
<
	g°d
::
size_t
>(
h
 ^ (h >> 16));

137 
	gãm∂©e
<> 
	g_hash_32_‹_64
<1> {

138 
ölöe
 
	g°d
::
size_t
 
hash
(
°d
::
uöt64_t
 
h
)

140 
h
 ^= h >> 33;

141 
	gh
 *= 0xff51afd7ed558ccd;

142 
	gh
 ^
h
 >> 33;

143 
	gh
 *= 0xc4ceb9fe1a85ec53;

144  
	g°©ic_ˇ°
<
	g°d
::
size_t
>(
h
 ^ (h >> 33));

147 
	gãm∂©e
<
	g°d
::
size_t
 
size
> 
hash_32_‹_64
 : 
public
 
_hash_32_‹_64
<(size > 4)> { };

149 
ölöe
 
	g°d
::
size_t
 
hash_thªad_id
(
thªad_id_t
 
id
)

151 
°©ic_as£π
((
thªad_id_t
) <= 8, "ExpectedáÖlatform whereÅhread IDsáreát most 64-bit values");

152  
	ghash_32_‹_64
<(
	gthªad_id_t
)>::
hash
(
id
);

155 
	gãm∂©e
<
ty≥«me
 
	gU
>

156 
ölöe
 * 
Æign_f‹
(* 
±r
)

158 c⁄° 
	g°d
::
size_t
 
Æignmít
 = 
°d
::
Æignmít_of
<
U
>::
vÆue
;

159  
	g±r
 + (
	gÆignmít
 - (
	gªöãΩªt_ˇ°
<
	g°d
::
uöçå_t
>(
±r
Ë% 
Æignmít
)) %álignment;

164 
	gãm∂©e
<
ty≥«me
 
	gT
>

165 
	sThªadLoˇl


167 
ex∂icô
 
ThªadLoˇl
(
°d
::
size_t
 
öôülHashSize
)

168 : 
öôülHashE¡rõs
(
öôülHashSize
)

170 
as£π
(
öôülHashSize
 > 0 && (initialHashSize & (initialHashSize - 1)) == 0);

172 
	gªsizeInProgªss
.
˛ór
();

173 
	gcuºítHashCou¡
.
°‹e
(0, 
°d
::
mem‹y_‹dî_ªœxed
);

174 autÿ
	ghash
 = &
öôülHash
;

175 
	ghash
->
	gˇ∑côy
 = 
öôülHashSize
;

176 
	ghash
->
	gíåõs
 = &
öôülHashE¡rõs
[0];

177 
	g°d
::
size_t
 
i
 = 0; 
	gi
 !
öôülHashSize
; ++i) {

178 
	göôülHashE¡rõs
[
i
].
	gkey
.
°‹e
(
dëaûs
::
övÆid_thªad_id
, 
°d
::
mem‹y_‹dî_ªœxed
);

180 
	ghash
->
	g¥ev
 = 
nuŒ±r
;

181 
	gcuºítHash
.
°‹e
(
hash
, 
°d
::
mem‹y_‹dî_ªœxed
);

184 ~
ThªadLoˇl
()

187 autÿ
	g±r
 = 
ôems
.
èû
();

188 
	g±r
 !
nuŒ±r
) {

189 autÿ
¥ev
 = 
°©ic_ˇ°
<
T
*>(
±r
->
c⁄cuºítLi°Pªv
.
lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
));

190 
	g±r
->~
T
();

191 
	gc‹ólgos_Æloˇt‹
::
‰ì
(
±r
);

192 
	g±r
 = 
¥ev
;

196 autÿ
	ghash
 = 
cuºítHash
.
lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
);

197 
	ghash
 !
nuŒ±r
) {

198 autÿ
¥ev
 = 
hash
->prev;

199 i‡(
	g¥ev
 !
nuŒ±r
) {

200 
°d
::
size_t
 
i
 = 0; 
	gi
 !
hash
->
ˇ∑côy
; ++i) {

201 
	ghash
->
	gíåõs
[
i
].~
KeyVÆuePaú
();

203 
	ghash
->~
I¬îHash
();

204 
	gc‹ólgos_Æloˇt‹
::
‰ì
(
hash
);

206 
	ghash
 = 
¥ev
;

211 
T
* 
gë_‹_¸óã
()

223 autÿ
	gid
 = 
dëaûs
::
thªad_id
();

224 autÿ
	ghashedId
 = 
dëaûs
::
hash_thªad_id
(
id
);

226 autÿ
	gmaöHash
 = 
cuºítHash
.
lﬂd
(
°d
::
mem‹y_‹dî_acquúe
);

227 autÿ
	ghash
 = 
maöHash
; hash !
nuŒ±r
; hash = 
hash
->
¥ev
) {

229 autÿ
ödex
 = 
hashedId
;

230 
	gåue
) {

231 
	gödex
 &
hash
->
ˇ∑côy
 - 1;

233 autÿ
	g¥obedKey
 = 
hash
->
íåõs
[
ödex
].
key
.
lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
);

234 i‡(
	g¥obedKey
 =
id
) {

240 autÿ
vÆue
 = 
hash
->
íåõs
[
ödex
].value;

241 i‡(
	ghash
 !
maöHash
) {

242 
ödex
 = 
hashedId
;

243 
	gåue
) {

244 
	gödex
 &
maöHash
->
ˇ∑côy
 - 1;

245 
	g¥obedKey
 = 
maöHash
->
íåõs
[
ödex
].
key
.
lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
);

246 autÿ
	gex≥˘ed
 = 
dëaûs
::
övÆid_thªad_id
;

247 i‡(
	g¥obedKey
 =
ex≥˘ed
 && 
maöHash
->
íåõs
[
ödex
].
key
.
com∑ª_exch™ge_°r⁄g
”x≥˘ed, 
id
, 
°d
::
mem‹y_‹dî_ªœxed
)) {

248 
maöHash
->
íåõs
[
ödex
].
vÆue
 = value;

251 ++
	gödex
;

255  
	gvÆue
;

257 i‡(
	g¥obedKey
 =
dëaûs
::
övÆid_thªad_id
) {

260 ++
	gödex
;

265 autÿ
	g√wCou¡
 = 1 + 
cuºítHashCou¡
.
„tch_add
(1, 
°d
::
mem‹y_‹dî_ªœxed
);

266 
	gåue
) {

267 i‡(
	g√wCou¡
 >(
maöHash
->
ˇ∑côy
 >> 1Ë&& !
ªsizeInProgªss
.
ã°_™d_£t
(
°d
::
mem‹y_‹dî_acquúe
)) {

272 
maöHash
 = 
cuºítHash
.
lﬂd
(
°d
::
mem‹y_‹dî_acquúe
);

273 autÿ
	g√wC≠acôy
 = 
maöHash
->
ˇ∑côy
 << 1;

274 
	g√wCou¡
 >(
√wC≠acôy
 >> 1)) {

275 
√wC≠acôy
 <<= 1;

277 autÿ
	gøw
 = 
°©ic_ˇ°
<*>(
c‹ólgos_Æloˇt‹
::
mÆloc
((
I¬îHash
Ë+ 
°d
::
Æignmít_of
<
KeyVÆuePaú
>::
vÆue
 - 1 + (KeyVÆuePaúË* 
√wC≠acôy
));

278 i‡(
	gøw
 =
nuŒ±r
) {

280 
cuºítHashCou¡
.
„tch_add
((
uöt32_t
)-1, 
°d
::
mem‹y_‹dî_ªœxed
);

281 
	gªsizeInProgªss
.
˛ór
(
°d
::
mem‹y_‹dî_ªœxed
);

282  
	gnuŒ±r
;

285 autÿ
	g√wHash
 = 
√w
 (
øw
Ë
I¬îHash
;

286 
	g√wHash
->
	gˇ∑côy
 = 
√wC≠acôy
;

287 
	g√wHash
->
	gíåõs
 = 
ªöãΩªt_ˇ°
<
KeyVÆuePaú
*>(
dëaûs
::
Æign_f‹
<KeyVÆuePaú>(
øw
 + (
I¬îHash
)));

288 
	g°d
::
size_t
 
i
 = 0; 
	gi
 !
√wC≠acôy
; ++i) {

289 
√w
 (
√wHash
->
íåõs
 + 
i
Ë
	gKeyVÆuePaú
;

290 
	g√wHash
->
	gíåõs
[
i
].
	gkey
.
°‹e
(
dëaûs
::
övÆid_thªad_id
, 
°d
::
mem‹y_‹dî_ªœxed
);

292 
	g√wHash
->
	g¥ev
 = 
maöHash
;

293 
	gcuºítHash
.
°‹e
(
√wHash
, 
°d
::
mem‹y_‹dî_ªÀa£
);

294 
	gªsizeInProgªss
.
˛ór
(
°d
::
mem‹y_‹dî_ªÀa£
);

295 
	gmaöHash
 = 
√wHash
;

301 i‡(
	g√wCou¡
 < (
	gmaöHash
->
	gˇ∑côy
 >> 1) + (mainHash->capacity >> 2)) {

302 autÿ
	gñemít
 = (
T
*)
c‹ólgos_Æloˇt‹
::
mÆloc
((T));

303 i‡(
	gñemít
 =
nuŒ±r
) {

304  
nuŒ±r
;

306 
√w
 (
ñemít
Ë
T
();

307 
	gôems
.
add
(
ñemít
);

309 autÿ
	gödex
 = 
hashedId
;

310 
	gåue
) {

311 
	gödex
 &
maöHash
->
ˇ∑côy
 - 1;

312 autÿ
	g¥obedKey
 = 
maöHash
->
íåõs
[
ödex
].
key
.
lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
);

313 autÿ
	gex≥˘ed
 = 
dëaûs
::
övÆid_thªad_id
;

314 i‡(
	g¥obedKey
 =
ex≥˘ed
 && 
maöHash
->
íåõs
[
ödex
].
key
.
com∑ª_exch™ge_°r⁄g
”x≥˘ed, 
id
, 
°d
::
mem‹y_‹dî_ªœxed
)) {

315 
maöHash
->
íåõs
[
ödex
].
vÆue
 = 
ñemít
;

318 ++
	gödex
;

320  
	gñemít
;

326 
	gmaöHash
 = 
cuºítHash
.
lﬂd
(
°d
::
mem‹y_‹dî_acquúe
);

330 
	g¥iv©e
:

331 
	sKeyVÆuePaú


333 
°d
::
©omic
<
dëaûs
::
thªad_id_t
> 
key
;

334 
T
* 
	gvÆue
;

336 
KeyVÆuePaú
()

339 
KeyVÆuePaú
(KeyVÆuePaú c⁄°& 
Ÿhî
)

340 : 
key
(
Ÿhî
.key.
lﬂd
()), 
vÆue
(other.value)

343 
	gKeyVÆuePaú
& 
	g›î©‹
=(
KeyVÆuePaú
 c⁄°& 
Ÿhî
)

345 
key
.
°‹e
(
Ÿhî
.key.
lﬂd
());

346 
	gvÆue
 = 
Ÿhî
.
vÆue
;

347  *
	gthis
;

351 
	sI¬îHash


353 
	g°d
::
size_t
 
ˇ∑côy
;

354 
KeyVÆuePaú
* 
	gíåõs
;

355 
I¬îHash
* 
	g¥ev
;

358 
	g°d
::
©omic_Êag
 
ªsizeInProgªss
;

359 
	g°d
::
©omic
<
I¬îHash
*> 
cuºítHash
;

360 
	g°d
::
©omic
<
°d
::
size_t
> 
cuºítHashCou¡
;

361 
I¬îHash
 
	göôülHash
;

362 
	g°d
::
ve˘‹
<
KeyVÆuePaú
> 
öôülHashE¡rõs
;

363 
	gC⁄cuºítAddO∆yLi°
<
	gT
> 
	gôems
;

374 
	gãm∂©e
 <
ty≥«me
 
	gN
>

375 
	sFªeLi°Node


377 
FªeLi°Node
(Ë: 
‰ìLi°Refs
(0), 
‰ìLi°Next
(
nuŒ±r
) { }

379 
	g°d
::
©omic
<
°d
::
uöt32_t
> 
‰ìLi°Refs
;

380 
	g°d
::
©omic
<
N
*> 
‰ìLi°Next
;

382 
FªeLi°Node
(FªeLi°Nodêc⁄°& 
Ÿhî
)

383 : 
‰ìLi°Refs
(
Ÿhî
.‰ìLi°Refs.
lﬂd
()), 
‰ìLi°Next
(other.freeListNext.load())

386 
	gFªeLi°Node
& 
	g›î©‹
=(
FªeLi°Node
 c⁄°& 
Ÿhî
)

388 
‰ìLi°Refs
.
°‹e
(
Ÿhî
.‰ìLi°Refs.
lﬂd
());

389 
	g‰ìLi°Next
.
°‹e
(
Ÿhî
.
‰ìLi°Next
.
lﬂd
());

390  *
	gthis
;

397 
	gãm∂©e
<
ty≥«me
 
	gN
>

398 
	sFªeLi°


400 
FªeLi°
(Ë: 
‰ìLi°Hód
(
nuŒ±r
) { }

402 
ölöe
 
add
(
N
* 
node
)

406 i‡(
node
->
‰ìLi°Refs
.
„tch_add
(
SHOULD_BE_ON_FREELIST
, 
°d
::
mem‹y_‹dî_acq_ªl
) == 0) {

409 
add_knowög_ªfcou¡_is_zîo
(
node
);

413 
ölöe
 
N
* 
åy_gë
()

415 autÿ
	ghód
 = 
‰ìLi°Hód
.
lﬂd
(
°d
::
mem‹y_‹dî_acquúe
);

416 
	ghód
 !
nuŒ±r
) {

417 autÿ
¥evHód
 = 
hód
;

418 autÿ
	gªfs
 = 
hód
->
‰ìLi°Refs
.
lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
);

419 i‡((
	gªfs
 & 
	gREFS_MASK
Ë=0 || !
hód
->
‰ìLi°Refs
.
com∑ª_exch™ge_°r⁄g
(
ªfs
,Ñefs + 1,

420 
°d
::
mem‹y_‹dî_acquúe
, std::
mem‹y_‹dî_ªœxed
)) {

421 
hód
 = 
‰ìLi°Hód
.
lﬂd
(
°d
::
mem‹y_‹dî_acquúe
);

428 autÿ
	g√xt
 = 
hód
->
‰ìLi°Next
.
lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
);

429 i‡(
	g‰ìLi°Hód
.
com∑ª_exch™ge_°r⁄g
(
hód
, 
√xt
,

430 
°d
::
mem‹y_‹dî_acquúe
, std::
mem‹y_‹dî_ªœxed
)) {

434 
as£π
((
hód
->
‰ìLi°Refs
.
lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
Ë& 
SHOULD_BE_ON_FREELIST
) == 0);

437 
	ghód
->
	g‰ìLi°Refs
.
„tch_add
(-2u, 
°d
::
mem‹y_‹dî_ªÀa£
);

438  
	ghód
;

445 
	gªfs
 = 
¥evHód
->
‰ìLi°Refs
.
„tch_add
(-1u, 
°d
::
mem‹y_‹dî_acq_ªl
);

446 i‡(
	gªfs
 =
SHOULD_BE_ON_FREELIST
 + 1) {

447 
add_knowög_ªfcou¡_is_zîo
(
¥evHód
);

451  
	gnuŒ±r
;

455 
N
* 
hód_unß„
(Ëc⁄° {  
	g‰ìLi°Hód
.
lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
); }

457 
	g¥iv©e
:

458 
ölöe
 
add_knowög_ªfcou¡_is_zîo
(
N
* 
node
)

469 autÿ
hód
 = 
‰ìLi°Hód
.
lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
);

470 
	gåue
) {

471 
	gnode
->
	g‰ìLi°Next
.
°‹e
(
hód
, 
°d
::
mem‹y_‹dî_ªœxed
);

472 
	gnode
->
	g‰ìLi°Refs
.
°‹e
(1, 
°d
::
mem‹y_‹dî_ªÀa£
);

473 i‡(!
	g‰ìLi°Hód
.
com∑ª_exch™ge_°r⁄g
(
hód
, 
node
,

474 
°d
::
mem‹y_‹dî_ªÀa£
, std::
mem‹y_‹dî_ªœxed
)) {

476 i‡(
node
->
‰ìLi°Refs
.
„tch_add
(
SHOULD_BE_ON_FREELIST
 - 1, 
°d
::
mem‹y_‹dî_ªÀa£
) == 1) {

484 
	g¥iv©e
:

485 c⁄° 
°d
::
uöt32_t
 
REFS_MASK
 = 0x7FFFFFFF;

486 c⁄° 
	g°d
::
uöt32_t
 
SHOULD_BE_ON_FREELIST
 = 0x80000000;

490 
	g°d
::
©omic
<
N
*> 
‰ìLi°Hód
;

502 
	gãm∂©e
<
ty≥«me
 
	gTVÆue
>

503 
	sSPMCSequítülHashM≠


505 
ex∂icô
 
SPMCSequítülHashM≠
(
°d
::
size_t
 
öôülSize
)

506 : 
√xtC≠acôy
(
öôülSize
), 
ödex
(
nuŒ±r
)

508 
√w_ödex
();

511 ~
SPMCSequítülHashM≠
()

513 autÿ
	g±r
 = 
ödex
.
lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
);

514 i‡(
	g±r
 !
nuŒ±r
) {

515 
°d
::
size_t
 
i
 = 0; 
	gi
 !
±r
->
ˇ∑côy
; ++i) {

516 
	g±r
->
	gödex
[
i
]->~
IndexE¡ry
();

519 autÿ
	g¥ev
 = 
±r
->
¥ev
;

520 
	g±r
->~
IndexHódî
();

521 
	gc‹ólgos_Æloˇt‹
::
‰ì
(
±r
);

522 
	g±r
 = 
¥ev
;

523 } 
	g±r
 !
nuŒ±r
);

530 
ö£π
(
°d
::
uöt64_t
 
key
, 
TVÆue
* 
vÆue
)

532 
IndexE¡ry
* 
	gidxE¡ry
;

533 
ö£π_ödex_íåy
(
idxE¡ry
, 
key
);

534 
	gidxE¡ry
->
	gvÆue
.
°‹e
(
vÆue
, 
°d
::
mem‹y_‹dî_ªÀa£
);

541 
TVÆue
* 
föd
(
°d
::
uöt64_t
 
key
)

543 autÿ
idxE¡ry
 = 
gë_íåy_f‹_key
(
key
);

544 i‡(
	gidxE¡ry
 =
nuŒ±r
)

545  
nuŒ±r
;

546  
	gidxE¡ry
->
	gvÆue
.
lﬂd
(
°d
::
mem‹y_‹dî_acquúe
);

553 
TVÆue
* 
ªmove
(
°d
::
uöt64_t
 
key
)

555 autÿ
idxE¡ry
 = 
gë_íåy_f‹_key
(
key
);

556 i‡(
	gidxE¡ry
 =
nuŒ±r
)

557  
nuŒ±r
;

558 
TVÆue
* 
	gvÆ
 = 
nuŒ±r
;

559 !
	gidxE¡ry
->
	gvÆue
.
com∑ª_exch™ge_wók
(
vÆ
, 
nuŒ±r
, 
°d
::
mem‹y_‹dî_acquúe
, std::
mem‹y_‹dî_ªœxed
))

561  
	gvÆ
;

564 
	g¥iv©e
:

565 
	sIndexE¡ry


567 
°d
::
©omic
<°d::
uöt64_t
> 
key
;

568 
	g°d
::
©omic
<
TVÆue
*> 
vÆue
;

571 
	sIndexHódî


573 
	g°d
::
size_t
 
ˇ∑côy
;

574 
	g°d
::
©omic
<
°d
::
size_t
> 
èû
;

575 
IndexE¡ry
* 
	gíåõs
;

576 
IndexE¡ry
** 
	gödex
;

577 
IndexHódî
* 
	g¥ev
;

580 
ölöe
 
ö£π_ödex_íåy
(
IndexE¡ry
*& 
idxE¡ry
, 
°d
::
uöt64_t
 
key
)

582 autÿ
loˇlIndex
 = 
ödex
.
lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
);

583 autÿ
	g√wTaû
 = (
loˇlIndex
->
èû
.
lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
Ë+ 1Ë& (loˇlIndex->
ˇ∑côy
 - 1);

584 
	gidxE¡ry
 = 
loˇlIndex
->
ödex
[
√wTaû
];

585 i‡(
	gidxE¡ry
->
	gkey
.
lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
Ë=
INVALID_KEY
 ||

586 
idxE¡ry
->
vÆue
.
lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
Ë=
nuŒ±r
) {

588 
idxE¡ry
->
key
.
°‹e
(key, 
°d
::
mem‹y_‹dî_ªœxed
);

589 
	gloˇlIndex
->
	gèû
.
°‹e
(
√wTaû
, 
°d
::
mem‹y_‹dî_ªÀa£
);

594 
√w_ödex
();

595 
	gloˇlIndex
 = 
ödex
.
lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
);

596 
	g√wTaû
 = (
loˇlIndex
->
èû
.
lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
Ë+ 1Ë& (loˇlIndex->
ˇ∑côy
 - 1);

597 
	gidxE¡ry
 = 
loˇlIndex
->
ödex
[
√wTaû
];

598 
as£π
(
idxE¡ry
->
key
.
lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
Ë=
INVALID_KEY
);

599 
	gidxE¡ry
->
	gkey
.
°‹e
(
key
, 
°d
::
mem‹y_‹dî_ªœxed
);

600 
	gloˇlIndex
->
	gèû
.
°‹e
(
√wTaû
, 
°d
::
mem‹y_‹dî_ªÀa£
);

603 
ölöe
 
IndexE¡ry
* 
gë_íåy_f‹_key
(
°d
::
uöt64_t
 
key
) const

605 autÿ
loˇlIndex
 = 
ödex
.
lﬂd
(
°d
::
mem‹y_‹dî_acquúe
);

606 autÿ
	gèû
 = 
loˇlIndex
->
èû
.
lﬂd
(
°d
::
mem‹y_‹dî_acquúe
);

607 autÿ
	gèûBa£
 = 
loˇlIndex
->
ödex
[
èû
]->
key
.
lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
);

608 i‡(
	gèûBa£
 =
INVALID_KEY
) {

609  
nuŒ±r
;

611 autÿ
	goff£t
 = 
°©ic_ˇ°
<
°d
::
size_t
>(
key
 - 
èûBa£
);

612 
	g°d
::
size_t
 
idx
 = (
èû
 + 
off£t
Ë& (
loˇlIndex
->
ˇ∑côy
 - 1);

613 autÿ
	gíåy
 = 
loˇlIndex
->
ödex
[
idx
];

614  
	gíåy
->
	gkey
.
lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
Ë=
key
 ? 
íåy
 : 
nuŒ±r
;

617 
boﬁ
 
√w_ödex
()

619 autÿ
	g¥ev
 = 
ödex
.
lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
);

620 
	g°d
::
size_t
 
¥evC≠acôy
 = 
¥ev
 =
nuŒ±r
 ? 0 :Öªv->
ˇ∑côy
;

621 autÿ
	gíåyCou¡
 = 
¥ev
 =
nuŒ±r
 ? 
√xtC≠acôy
 : 
¥evC≠acôy
;

622 autÿ
	gøw
 = 
°©ic_ˇ°
<*>(
c‹ólgos_Æloˇt‹
::
mÆloc
(

623 (
IndexHódî
) +

624 
°d
::
Æignmít_of
<
IndexE¡ry
>::
vÆue
 - 1 + (IndexE¡ryË* 
íåyCou¡
 +

625 
°d
::
Æignmít_of
<
IndexE¡ry
*>::
vÆue
 - 1 + (IndexE¡ry*Ë* 
√xtC≠acôy
));

626 i‡(
	gøw
 =
nuŒ±r
) {

627  
Ál£
;

630 autÿ
	ghódî
 = 
√w
 (
øw
Ë
IndexHódî
;

631 autÿ
	gíåõs
 = 
ªöãΩªt_ˇ°
<
IndexE¡ry
*>(
dëaûs
::
Æign_f‹
<IndexE¡ry>(
øw
 + (
IndexHódî
)));

632 autÿ
	gidx
 = 
ªöãΩªt_ˇ°
<
IndexE¡ry
**>(
dëaûs
::
Æign_f‹
<IndexE¡ry*>‘eöãΩªt_ˇ°<*>(
íåõs
Ë+ (IndexE¡ryË* 
íåyCou¡
));

633 i‡(
	g¥ev
 !
nuŒ±r
) {

634 autÿ
¥evTaû
 = 
¥ev
->
èû
.
lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
);

635 autÿ
	g¥evPos
 = 
¥evTaû
;

636 
	g°d
::
size_t
 
i
 = 0;

638 
	g¥evPos
 = (
¥evPos
 + 1Ë& (
¥ev
->
ˇ∑côy
 - 1);

639 
	gidx
[
i
++] = 
¥ev
->
ödex
[
¥evPos
];

640 } 
	g¥evPos
 !
¥evTaû
);

641 
as£π
(
i
 =
¥evC≠acôy
);

643 
	g°d
::
size_t
 
i
 = 0; 
	gi
 !
íåyCou¡
; ++i) {

644 
√w
 (
íåõs
 + 
i
Ë
	gIndexE¡ry
;

645 
	gíåõs
[
i
].
	gkey
.
°‹e
(
INVALID_KEY
, 
°d
::
mem‹y_‹dî_ªœxed
);

646 
	gíåõs
[
i
].
	gvÆue
.
°‹e
(
nuŒ±r
, 
°d
::
mem‹y_‹dî_ªœxed
);

647 
	gidx
[
¥evC≠acôy
 + 
i
] = 
íåõs
 + i;

649 
	ghódî
->
	g¥ev
 = 
¥ev
;

650 
	ghódî
->
	gíåõs
 = 
íåõs
;

651 
	ghódî
->
	gödex
 = 
idx
;

652 
	ghódî
->
	gˇ∑côy
 = 
√xtC≠acôy
;

653 
	ghódî
->
	gèû
.
°‹e
((
¥evC≠acôy
 - 1Ë& (
√xtC≠acôy
 - 1), 
°d
::
mem‹y_‹dî_ªœxed
);

655 
	gödex
.
°‹e
(
hódî
, 
°d
::
mem‹y_‹dî_ªÀa£
);

657 
	g√xtC≠acôy
 <<= 1;

659  
	gåue
;

662 
	g¥iv©e
:

663 
°d
::
size_t
 
√xtC≠acôy
;

664 
	g°d
::
©omic
<
IndexHódî
*> 
ödex
;

666 c⁄° 
	g°d
::
uöt64_t
 
INVALID_KEY
 = ~(
°d
::uint64_t)0;

	@viper/concurrentqueue-src/tests/fuzztests/fuzztests.cpp

7 
	~<c°dio
>

8 
	~<c°dlib
>

9 
	~<c°rög
>

10 
	~<c°döt
>

11 
	~<˘ime
>

12 
	~<ˇs£π
>

13 
	~<°rög
>

14 
	~<øndom
>

15 
	~<©omic
>

16 
	~<f°ªam
>

17 
	~<iom™ù
>

18 
	~<ve˘‹
>

19 
	~<csig«l
>

20 
	~<muãx
>

21 
	~<ex˚±i⁄
>

22 
	~<c˘y≥
>

24 #ifde‡
_WIN32


25 
	#WIN32_LEAN_AND_MEAN


	)

26 #i‚de‡
NOMINMAX


27 
	#NOMINMAX


	)

29 
	~<wödows.h
>

32 
	~"../../c⁄cuºítqueue.h
"

33 
	~"../comm⁄/sim∂ëhªad.h
"

34 
	~"../comm⁄/sy°emtime.h
"

35 
	~"../c‹ólgos.h
"

37 
	$ÁûHook
()

40 
	}
}

42 
	#_STR
(
x
Ë#x

	)

43 
	#STR
(
x
Ë
	`_STR
(x)

	)

44 
	#ASSERT_OR_FAIL_THREAD
(
c⁄d
Ëi‡(!(c⁄d)Ë{ c⁄° * 
n
 = 
nuŒ±r
; 
ÁûRós⁄
.
	`com∑ª_exch™ge_°r⁄g
“, "as£πi⁄ faûed o¿löê" 
	`STR
(
__LINE__
Ë": " #c⁄d, 
°d
::
mem‹y_‹dî_ªœxed
, std::memory_order_relaxed); \

45 
Áûed
.
	`°‹e
(
åue
, 
°d
::
mem‹y_‹dî_ªœxed
); 
	`ÁûHook
(); ; }

	)

46 
	#FAIL_IF_THREAD_TIMEOUT
(Ëi‡(
	`gëTimeDñè
(
°¨tTime
Ë> 60000Ë{ c⁄° * 
n
 = 
nuŒ±r
; 
ÁûRós⁄
.
	`com∑ª_exch™ge_°r⁄g
“, "ã°Åimed ouà(dëe˘ed o¿löê" 
	`STR
(
__LINE__
Ë")", 
°d
::
mem‹y_‹dî_ªœxed
, std::memory_order_relaxed); \

47 
Áûed
.
	`°‹e
(
åue
, 
°d
::
mem‹y_‹dî_ªœxed
); 
	`ÁûHook
(); ; }

	)

48 
	#ASSERT_OR_FAIL
(
c⁄d
Ëi‡(!(c⁄d)Ë{ 
out_ÁûRós⁄
 = "as£πi⁄ faûed o¿löê" 
	`STR
(
__LINE__
Ë": " #c⁄d; 
ªsu…
 = 
Ál£
; 
	`ÁûHook
(); ; }

	)

51 
usög
 
«me•a˚
 
	gmoodyˇmñ
;

54 
	g°d
::
	tmö°d_ønd
 
	tRNG_t
;

56 
	eã°_ty≥
 {

57 
	mmu…ôhªad_¥odu˚
,

58 
	mmu…ôhªad_c⁄sume
,

59 
	mmu…ôhªad_¥odu˚_™d_c⁄sume
,

60 
	mcom∂ëñy_øndom
,

63 
	mc‹e_add_⁄ly_li°
,

64 
	mc‹e_thªad_loˇl
,

66 
	mTEST_TYPE_COUNT


69 
	g°d
::
uöt64_t
 
ã°_cou¡
[
TEST_TYPE_COUNT
] = { 0 };

70 
	g°d
::
uöt64_t
 
Áû_cou¡
[
TEST_TYPE_COUNT
] = { 0 };

71 c⁄° * 
	gã°_«mes
[
TEST_TYPE_COUNT
] = {

80 c⁄° 
	gSINGLE_SEED_ITERATIONS
 = 100;

81 c⁄° * 
	gLOG_FILE
 = "fuzztests.log";

84 
	gFuzzTøôs
 : 
public
 
C⁄cuºítQueueDeÁu…Tøôs


86 c⁄° 
size_t
 
BLOCK_SIZE
 = 8;

87 c⁄° 
size_t
 
	gEXPLICIT_INITIAL_INDEX_SIZE
 = 4;

88 c⁄° 
size_t
 
	gIMPLICIT_INITIAL_INDEX_SIZE
 = 4;

89 c⁄° 
size_t
 
	gINITIAL_IMPLCICIT_PRODUCER_HASH_SIZE
 = 1;

90 c⁄° 
	g°d
::
uöt32_t
 
EXPLICIT_CONSUMER_CONSUMPTION_QUOTA_BEFORE_ROTATE
 = 24;

93 
	gTe°Li°Iãm
 : 
c‹ólgos
::
Li°Iãm


95 
vÆue
;

97 
Te°Li°Iãm
(Ë: 
vÆue
(0) { }

98 
ex∂icô
 
Te°Li°Iãm
(
vÆue
) : value(value) { }

100 
ölöe
 
Te°Li°Iãm
* 
¥ev
(
°d
::
mem‹y_‹dî
 
‹dî
 = std::
mem‹y_‹dî_ªœxed
) const

102  
°©ic_ˇ°
<
Te°Li°Iãm
*>(
c⁄cuºítLi°Pªv
.
lﬂd
(
‹dî
));

107 
boﬁ
 
	$run_ã°
(
uöt64_t
 
£ed
, 
ôî©i⁄s
, 
ã°_ty≥
& 
out_ty≥
, c⁄° *& 
out_ÁûRós⁄
)

109 
boﬁ
 
ªsu…
 = 
åue
;

110 
RNG_t
 
	`ba£Rng
(()
£ed
);

112 
°d
::
unif‹m_öt_di°ributi⁄
<> 
	`øndTe°
(0, 
TEST_TYPE_COUNT
 - 1);

113 
°d
::
unif‹m_öt_di°ributi⁄
<> 
	`øndInôülSize
(0, 70);

115 autÿ
ty≥
 = 
°©ic_ˇ°
<
ã°_ty≥
>(
	`øndTe°
(
ba£Rng
));

116 
out_ty≥
 = 
ty≥
;

117 
ôî©i⁄
 = 0; iãøti⁄ !
ôî©i⁄s
; ++iteration) {

118 
RNG_t
 
	`∫g
(
ba£Rng
);

120 
°d
::
©omic
<
boﬁ
> 
	`Áûed
(
Ál£
);

121 
°d
::
©omic
<c⁄° *> 
ÁûRós⁄
;

122 
ÁûRós⁄
 = 
nuŒ±r
;

123 
Sy°emTime
 
°¨tTime
 = 
	`gëSy°emTime
();

125 
ty≥
) {

126 
mu…ôhªad_¥odu˚
:

128 c⁄° 
cou¡In¸emít
 = 
°d
::
unif‹m_öt_di°ributi⁄
<>(1, 1000)(
∫g
);

129 
cou¡
 = 
°d
::
unif‹m_öt_di°ributi⁄
<>(0, 500)(
∫g
Ë* 
cou¡In¸emít
;

130 
¥odCou¡
 = 
°d
::
unif‹m_öt_di°ributi⁄
<>(0, 6)(
∫g
);

131 
boﬁ
 
u£C⁄sumîTokí
 = 
°©ic_ˇ°
<boﬁ>(
°d
::
unif‹m_öt_di°ributi⁄
<>(0, 1)(
∫g
));

133 
C⁄cuºítQueue
<, 
FuzzTøôs
> 
	`q
(
	`øndInôülSize
(
∫g
));

135 
°d
::
ve˘‹
<
Sim∂eThªad
> 
	`¥odu˚rs
(
¥odCou¡
);

136 
°d
::
ve˘‹
<
boﬁ
> 
	`u£Produ˚rTokí
(
¥odCou¡
);

137 
i
 = 0; i !
¥odCou¡
; ++i) {

138 
u£Produ˚rTokí
[
i
] = 
°©ic_ˇ°
<
boﬁ
>(
°d
::
unif‹m_öt_di°ributi⁄
<>(0, 1)(
∫g
));

139 
¥odu˚rs
[
i
] = 
	`Sim∂eThªad
([&](i) {

140 
Produ˚rTokí
 
	`t
(
q
);

141 
j
 = 0; j !
cou¡
 && !
Áûed
.
	`lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
); j +
cou¡In¸emít
) {

142 i‡(
u£Produ˚rTokí
[
i
]) {

143 
k
 = 0; k !
cou¡In¸emít
; ++k) {

144 
	`ASSERT_OR_FAIL_THREAD
(
q
.
	`íqueue
(
t
, (
i
 << 24Ë| (
k
 + 
j
)));

148 
k
 = 0; k !
cou¡In¸emít
; ++k) {

149 
	`ASSERT_OR_FAIL_THREAD
(
q
.
	`íqueue
((
i
 << 24Ë| (
k
 + 
j
)));

152 
	`FAIL_IF_THREAD_TIMEOUT
();

154 }, 
i
);

157 
Sim∂eThªad
 
	`c⁄sumî
([&]() {

158 
ôem
;

159 
°d
::
ve˘‹
<> 
	`œ°Iãms
(
¥odCou¡
);

160 
C⁄sumîTokí
 
	`t
(
q
);

162 
i
 = 0; i !
¥odCou¡
; ++i) {

163 
œ°Iãms
[
i
] = -1;

166 
i
 = 0; i !
cou¡
 * 
¥odCou¡
 && !
Áûed
.
	`lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
);) {

167 i‡(
u£C⁄sumîTokí
) {

168 
j
 = 0; j != 10000; ++j) {

169 i‡(
q
.
	`åy_dequeue
(
t
, 
ôem
)) {

170 ++
i
;

171 
	`ASSERT_OR_FAIL_THREAD
((
ôem
 & 0xFFFFFFË< 
cou¡
);

172 
	`ASSERT_OR_FAIL_THREAD
((
ôem
 & 0xFFFFFFË=
œ°Iãms
[item >> 24] + 1);

173 
œ°Iãms
[
ôem
 >> 24] = (item & 0xFFFFFF);

178 
j
 = 0; j != 10000; ++j) {

179 i‡(
q
.
	`åy_dequeue
(
ôem
)) {

180 ++
i
;

181 
	`ASSERT_OR_FAIL_THREAD
((
ôem
 & 0xFFFFFFË< 
cou¡
);

182 
	`ASSERT_OR_FAIL_THREAD
((
ôem
 & 0xFFFFFFË=
œ°Iãms
[item >> 24] + 1);

183 
œ°Iãms
[
ôem
 >> 24] = (item & 0xFFFFFF);

187 
	`FAIL_IF_THREAD_TIMEOUT
();

191 
i
 = 0; i !
¥odCou¡
; ++i) {

192 
¥odu˚rs
[
i
].
	`joö
();

194 
c⁄sumî
.
	`joö
();

196 i‡(
Áûed
.
	`lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
)) {

200 
ôem
;

201 
	`ASSERT_OR_FAIL
(!
q
.
	`åy_dequeue
(
ôem
));

205 
mu…ôhªad_c⁄sume
:

207 c⁄° 
cou¡In¸emít
 = 
°d
::
unif‹m_öt_di°ributi⁄
<>(1, 1000)(
∫g
);

208 
cou¡
 = 
°d
::
unif‹m_öt_di°ributi⁄
<>(0, 500)(
∫g
Ë* 
cou¡In¸emít
;

209 
c⁄sCou¡
 = 
°d
::
unif‹m_öt_di°ributi⁄
<>(0, 6)(
∫g
);

210 
boﬁ
 
u£Produ˚rTokí
 = 
°©ic_ˇ°
<boﬁ>(
°d
::
unif‹m_öt_di°ributi⁄
<>(0, 1)(
∫g
));

211 
°d
::
©omic
<
boﬁ
> 
	`¥odu˚rD⁄e
(
Ál£
);

213 
C⁄cuºítQueue
<, 
FuzzTøôs
> 
	`q
(
	`øndInôülSize
(
∫g
));

215 
°d
::
ve˘‹
<
Sim∂eThªad
> 
	`c⁄sumîs
(
c⁄sCou¡
);

216 
°d
::
ve˘‹
<
boﬁ
> 
	`u£C⁄sumîTokí
(
c⁄sCou¡
);

217 
i
 = 0; i !
c⁄sCou¡
; ++i) {

218 
u£C⁄sumîTokí
[
i
] = 
°©ic_ˇ°
<
boﬁ
>(
°d
::
unif‹m_öt_di°ributi⁄
<>(0, 1)(
∫g
));

219 
c⁄sumîs
[
i
] = 
	`Sim∂eThªad
([&](i) {

220 
ôem
, 
œ°Iãm
 = -1;

221 
C⁄sumîTokí
 
	`t
(
q
);

223 
boﬁ
 
d⁄eC⁄sumög
 = 
Ál£
;

224 !
d⁄eC⁄sumög
 && !
Áûed
.
	`lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
)) {

225 autÿ
¥odu˚rD⁄eLoˇl
 = 
¥odu˚rD⁄e
.
	`lﬂd
(
°d
::
mem‹y_‹dî_acquúe
);

227 i‡(
u£C⁄sumîTokí
[
i
]) {

228 
j
 = 0; j != 10000; ++j) {

229 i‡(
q
.
	`åy_dequeue
(
t
, 
ôem
)) {

230 
	`ASSERT_OR_FAIL_THREAD
(
ôem
 >0 && iãm < 
cou¡
 * 
c⁄sCou¡
 && iãm > 
œ°Iãm
);

231 
œ°Iãm
 = 
ôem
;

233 i‡(
¥odu˚rD⁄eLoˇl
) {

234 
d⁄eC⁄sumög
 = 
åue
;

240 
j
 = 0; j != 10000; ++j) {

241 i‡(
q
.
	`åy_dequeue
(
ôem
)) {

242 
	`ASSERT_OR_FAIL_THREAD
(
ôem
 >0 && iãm < 
cou¡
 * 
c⁄sCou¡
 && iãm > 
œ°Iãm
);

243 
œ°Iãm
 = 
ôem
;

245 i‡(
¥odu˚rD⁄eLoˇl
) {

246 
d⁄eC⁄sumög
 = 
åue
;

251 
	`FAIL_IF_THREAD_TIMEOUT
();

253 }, 
i
);

256 
Sim∂eThªad
 
	`¥odu˚r
([&]() {

257 
Produ˚rTokí
 
	`t
(
q
);

258 
i
 = 0; i !
cou¡
 * 
c⁄sCou¡
 && !
Áûed
.
	`lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
); i +
cou¡In¸emít
) {

259 i‡(
u£Produ˚rTokí
) {

260 
j
 = 0; j !
cou¡In¸emít
; ++j) {

261 
	`ASSERT_OR_FAIL_THREAD
(
q
.
	`íqueue
(
t
, 
i
 + 
j
));

265 
j
 = 0; j !
cou¡In¸emít
; ++j) {

266 
	`ASSERT_OR_FAIL_THREAD
(
q
.
	`íqueue
(
i
 + 
j
));

269 
	`FAIL_IF_THREAD_TIMEOUT
();

271 
¥odu˚rD⁄e
.
	`°‹e
(
åue
, 
°d
::
mem‹y_‹dî_ªÀa£
);

274 
¥odu˚r
.
	`joö
();

275 
i
 = 0; i !
c⁄sCou¡
; ++i) {

276 
c⁄sumîs
[
i
].
	`joö
();

279 i‡(
Áûed
.
	`lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
)) {

283 
ôem
;

284 
	`ASSERT_OR_FAIL
(
c⁄sCou¡
 =0 || !
q
.
	`åy_dequeue
(
ôem
));

288 
mu…ôhªad_¥odu˚_™d_c⁄sume
:

290 c⁄° 
cou¡In¸emít
 = 
°d
::
unif‹m_öt_di°ributi⁄
<>(1, 1000)(
∫g
);

291 
cou¡
 = 
°d
::
unif‹m_öt_di°ributi⁄
<>(0, 500)(
∫g
Ë* 
cou¡In¸emít
;

292 
¥odCou¡
 = 
°d
::
unif‹m_öt_di°ributi⁄
<>(0, 6)(
∫g
);

293 
c⁄sCou¡
 = 
°d
::
unif‹m_öt_di°ributi⁄
<>(0, 6)(
∫g
);

294 
°d
::
©omic
<
boﬁ
> 
	`¥odu˚rsD⁄e
(
Ál£
);

296 
C⁄cuºítQueue
<, 
FuzzTøôs
> 
	`q
(
	`øndInôülSize
(
∫g
));

298 
°d
::
ve˘‹
<
Sim∂eThªad
> 
	`¥odu˚rs
(
¥odCou¡
);

299 
°d
::
ve˘‹
<
boﬁ
> 
	`u£Produ˚rTokí
(
¥odCou¡
);

300 
i
 = 0; i !
¥odCou¡
; ++i) {

301 
u£Produ˚rTokí
[
i
] = 
°©ic_ˇ°
<
boﬁ
>(
°d
::
unif‹m_öt_di°ributi⁄
<>(0, 1)(
∫g
));

302 
¥odu˚rs
[
i
] = 
	`Sim∂eThªad
([&](i) {

303 
Produ˚rTokí
 
	`t
(
q
);

304 
j
 = 0; j !
cou¡
 && !
Áûed
.
	`lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
); j +
cou¡In¸emít
) {

305 i‡(
u£Produ˚rTokí
[
i
]) {

306 
k
 = 0; k !
cou¡In¸emít
; ++k) {

307 
	`ASSERT_OR_FAIL_THREAD
(
q
.
	`íqueue
(
t
, (
i
 << 24Ë| (
k
 + 
j
)));

311 
k
 = 0; k !
cou¡In¸emít
; ++k) {

312 
	`ASSERT_OR_FAIL_THREAD
(
q
.
	`íqueue
((
i
 << 24Ë| (
k
 + 
j
)));

315 
	`FAIL_IF_THREAD_TIMEOUT
();

317 }, 
i
);

320 
°d
::
ve˘‹
<
Sim∂eThªad
> 
	`c⁄sumîs
(
c⁄sCou¡
);

321 
°d
::
ve˘‹
<
boﬁ
> 
	`u£C⁄sumîTokí
(
c⁄sCou¡
);

322 
i
 = 0; i !
c⁄sCou¡
; ++i) {

323 
u£C⁄sumîTokí
[
i
] = 
°©ic_ˇ°
<
boﬁ
>(
°d
::
unif‹m_öt_di°ributi⁄
<>(0, 1)(
∫g
));

324 
c⁄sumîs
[
i
] = 
	`Sim∂eThªad
([&](i) {

325 
ôem
;

326 
°d
::
ve˘‹
<> 
	`œ°Iãms
(
¥odCou¡
);

327 
C⁄sumîTokí
 
	`t
(
q
);

329 
j
 = 0; j !
¥odCou¡
; ++j) {

330 
œ°Iãms
[
j
] = -1;

333 
boﬁ
 
d⁄eC⁄sumög
 = 
Ál£
;

334 !
d⁄eC⁄sumög
 && !
Áûed
.
	`lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
)) {

335 autÿ
¥odu˚rsD⁄eLoˇl
 = 
¥odu˚rsD⁄e
.
	`lﬂd
(
°d
::
mem‹y_‹dî_acquúe
);

337 i‡(
u£C⁄sumîTokí
[
i
]) {

338 
j
 = 0; j != 10000; ++j) {

339 i‡(
q
.
	`åy_dequeue
(
t
, 
ôem
)) {

340 
	`ASSERT_OR_FAIL_THREAD
((
ôem
 & 0xFFFFFFË< 
cou¡
);

341 
	`ASSERT_OR_FAIL_THREAD
((
ôem
 & 0xFFFFFFË> 
œ°Iãms
[item >> 24]);

342 
œ°Iãms
[
ôem
 >> 24] = item & 0xFFFFFF;

344 i‡(
¥odu˚rsD⁄eLoˇl
) {

345 
d⁄eC⁄sumög
 = 
åue
;

351 
j
 = 0; j != 10000; ++j) {

352 i‡(
q
.
	`åy_dequeue
(
ôem
)) {

353 
	`ASSERT_OR_FAIL_THREAD
((
ôem
 & 0xFFFFFFË< 
cou¡
);

354 
	`ASSERT_OR_FAIL_THREAD
((
ôem
 & 0xFFFFFFË> 
œ°Iãms
[item >> 24]);

355 
œ°Iãms
[
ôem
 >> 24] = item & 0xFFFFFF;

357 i‡(
¥odu˚rsD⁄eLoˇl
) {

358 
d⁄eC⁄sumög
 = 
åue
;

363 
	`FAIL_IF_THREAD_TIMEOUT
();

365 }, 
i
);

368 
i
 = 0; i !
¥odCou¡
; ++i) {

369 
¥odu˚rs
[
i
].
	`joö
();

371 
¥odu˚rsD⁄e
.
	`°‹e
(
åue
, 
°d
::
mem‹y_‹dî_ªÀa£
);

372 
i
 = 0; i !
c⁄sCou¡
; ++i) {

373 
c⁄sumîs
[
i
].
	`joö
();

376 i‡(
Áûed
.
	`lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
)) {

380 
ôem
;

381 
	`ASSERT_OR_FAIL
(
c⁄sCou¡
 =0 || !
q
.
	`åy_dequeue
(
ôem
));

385 
com∂ëñy_øndom
:

387 
thªadCou¡
 = 
°d
::
unif‹m_öt_di°ributi⁄
<>(0, 32)(
∫g
);

389 
C⁄cuºítQueue
<, 
FuzzTøôs
> 
	`q
(
	`øndInôülSize
(
∫g
));

391 
°d
::
ve˘‹
<
Sim∂eThªad
> 
	`thªads
(
thªadCou¡
);

392 
°d
::
ve˘‹
<> 
	`£eds
(
thªadCou¡
);

393 
°d
::
ve˘‹
<> 
	`›Cou¡s
(
thªadCou¡
);

394 
œrge°OpCou¡
 = 0;

395 
i
 = 0; i !
thªadCou¡
; ++i) {

396 
›Cou¡s
[
i
] = 
°d
::
unif‹m_öt_di°ributi⁄
<>(0, 500000)(
∫g
);

397 i‡(
›Cou¡s
[
i
] > 
œrge°OpCou¡
) {

398 
œrge°OpCou¡
 = 
›Cou¡s
[
i
];

402 
°d
::
ve˘‹
<> 
	`ôemSèãs
(
œrge°OpCou¡
 * 
thªadCou¡
 * 2);

403 
°d
::
size_t
 
j
 = 0; j !
ôemSèãs
.
	`size
(); ++j) {

404 
ôemSèãs
[
j
] = 0;

406 
i
 = 0; i !
thªadCou¡
; ++i) {

407 
£eds
[
i
] = 
°d
::
unif‹m_öt_di°ributi⁄
<>(0, 0xFFFFFFFF)(
∫g
);

408 
thªads
[
i
] = 
	`Sim∂eThªad
([&](i) {

409 
RNG_t
 
	`∫g
(()
£eds
[
i
]);

410 
C⁄sumîTokí
 
	`˘
(
q
);

411 
Produ˚rTokí
 
	`±
(
q
);

412 
ôem
;

413 
›Cou¡
 = 
›Cou¡s
[
i
];

414 
°d
::
ve˘‹
<> 
	`œ°Iãms
(
thªadCou¡
 * 2);

415 
j
 = 0; j !
thªadCou¡
 * 2; ++j) {

416 
œ°Iãms
[
j
] = -1;

418 
j
 = 0; j < 
›Cou¡
 && !
Áûed
.
	`lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
); ++j) {

419 
›
 = 
°d
::
unif‹m_öt_di°ributi⁄
<>(0, 7)(
∫g
);

420 * 
°©e
;

421 
›
) {

423 
°©e
 = &
ôemSèãs
[(
i
 * 2Ë* 
œrge°OpCou¡
 + 
j
];

424 
	`ASSERT_OR_FAIL_THREAD
(*
°©e
 == 0);

425 *
°©e
 = 1;

426 
	`ASSERT_OR_FAIL_THREAD
(
q
.
	`íqueue
(
±
, ((
i
 * 2Ë<< 24Ë| 
j
));

429 
°©e
 = &
ôemSèãs
[(
i
 * 2 + 1Ë* 
œrge°OpCou¡
 + 
j
];

430 
	`ASSERT_OR_FAIL_THREAD
(*
°©e
 == 0);

431 *
°©e
 = 1;

432 
	`ASSERT_OR_FAIL_THREAD
(
q
.
	`íqueue
(((
i
 * 2 + 1Ë<< 24Ë| 
j
));

435 i‡(
q
.
	`åy_dequeue
(
˘
, 
ôem
)) {

436 
	`ASSERT_OR_FAIL_THREAD
((
ôem
 & 0xFFFFFFË>0 && (ôem & 0xFFFFFFË< ()
œrge°OpCou¡
);

437 
	`ASSERT_OR_FAIL_THREAD
((
ôem
 & 0xFFFFFFË> 
œ°Iãms
[item >> 24]);

438 
œ°Iãms
[
ôem
 >> 24] = item & 0xFFFFFF;

440 
°©e
 = &
ôemSèãs
[(
ôem
 >> 24Ë* 
œrge°OpCou¡
 + (item & 0xFFFFFF)];

441 
	`ASSERT_OR_FAIL_THREAD
(*
°©e
 == 1);

442 *
°©e
 = 2;

446 i‡(
q
.
	`åy_dequeue
(
ôem
)) {

447 
	`ASSERT_OR_FAIL_THREAD
((
ôem
 & 0xFFFFFFË>0 && (ôem & 0xFFFFFFË< ()
œrge°OpCou¡
);

448 
	`ASSERT_OR_FAIL_THREAD
((
ôem
 & 0xFFFFFFË> 
œ°Iãms
[item >> 24]);

449 
œ°Iãms
[
ôem
 >> 24] = item & 0xFFFFFF;

451 
°©e
 = &
ôemSèãs
[(
ôem
 >> 24Ë* 
œrge°OpCou¡
 + (item & 0xFFFFFF)];

452 
	`ASSERT_OR_FAIL_THREAD
(*
°©e
 == 1);

453 *
°©e
 = 2;

459 
°d
::
ve˘‹
<> 
	`bulkD©a
(°d::
	`mö
(
›Cou¡
 - 
j
, std::
unif‹m_öt_di°ributi⁄
<>(0, 1024)(
∫g
)));

460 
°d
::
size_t
 
k
 = 0; k !
bulkD©a
.
	`size
(); ++k) {

461 
°©e
 = &
ôemSèãs
[(
i
 * 2 + 
›
 - 4Ë* 
œrge°OpCou¡
 + 
j
 + 
k
];

462 
	`ASSERT_OR_FAIL_THREAD
(*
°©e
 == 0);

463 *
°©e
 = 1;

464 
bulkD©a
[
k
] = ((
i
 * 2 + 
›
 - 4Ë<< 24Ë| (
j
 + ()k);

466 i‡(
›
 == 4) {

467 
	`ASSERT_OR_FAIL_THREAD
(
q
.
	`íqueue_bulk
(
±
, 
bulkD©a
.
	`begö
(), bulkD©a.
	`size
()));

470 
	`ASSERT_OR_FAIL_THREAD
(
q
.
	`íqueue_bulk
(
bulkD©a
.
	`begö
(), bulkD©a.
	`size
()));

472 
j
 +()
bulkD©a
.
	`size
() - 1;

478 
°d
::
ve˘‹
<> 
	`bulkD©a
(°d::
	`mö
(
›Cou¡
 - 
j
, std::
unif‹m_öt_di°ributi⁄
<>(0, 1024)(
∫g
)));

479 
°d
::
size_t
 
cou¡
 = 0;

480 i‡(
›
 == 6) {

481 
cou¡
 = 
q
.
	`åy_dequeue_bulk
(
˘
, 
bulkD©a
.
	`begö
(), bulkD©a.
	`size
());

484 
cou¡
 = 
q
.
	`åy_dequeue_bulk
(
bulkD©a
.
	`begö
(), bulkD©a.
	`size
());

486 
°d
::
size_t
 
k
 = 0; k !
cou¡
; ++k) {

487 
ôem
 = 
bulkD©a
[
k
];

488 
	`ASSERT_OR_FAIL_THREAD
((
ôem
 & 0xFFFFFFË>0 && (ôem & 0xFFFFFFË< ()
œrge°OpCou¡
);

489 
	`ASSERT_OR_FAIL_THREAD
((
ôem
 & 0xFFFFFFË> 
œ°Iãms
[item >> 24]);

490 
œ°Iãms
[
ôem
 >> 24] = item & 0xFFFFFF;

492 
°©e
 = &
ôemSèãs
[(
ôem
 >> 24Ë* 
œrge°OpCou¡
 + (item & 0xFFFFFF)];

493 
	`ASSERT_OR_FAIL_THREAD
(*
°©e
 == 1);

494 *
°©e
 = 2;

496 i‡(
cou¡
 > 0) {

497 
j
 +()
cou¡
 - 1;

503 
	`as£π
(
Ál£
);

505 
	`FAIL_IF_THREAD_TIMEOUT
();

507 }, 
i
);

510 
i
 = 0; i !
thªadCou¡
; ++i) {

511 
thªads
[
i
].
	`joö
();

513 #i‡
MCDBGQ_TRACKMEM


514 autÿ
°©s
 = 
q
.
	`gëMemSèts
();

515 (()
°©s
);

518 
ôem
;

519 
q
.
	`åy_dequeue
(
ôem
)) {

520 * 
°©e
 = &
ôemSèãs
[(
ôem
 >> 24Ë* 
œrge°OpCou¡
 + (item & 0xFFFFFF)];

521 
	`ASSERT_OR_FAIL
(*
°©e
 == 1);

522 *
°©e
 = 2;

524 
°d
::
size_t
 
j
 = 0; j !
ôemSèãs
.
	`size
(); ++j) {

525 
	`ASSERT_OR_FAIL
(
ôemSèãs
[
j
] == 0 || itemStates[j] == 2);

528 i‡(
Áûed
.
	`lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
)) {

533 
c‹e_add_⁄ly_li°
:

535 
thªadCou¡
 = 
°d
::
unif‹m_öt_di°ributi⁄
<>(0, 48)(
∫g
);

536 
°d
::
ve˘‹
<
Sim∂eThªad
> 
	`thªads
(
thªadCou¡
);

537 
°d
::
ve˘‹
<> 
	`›Cou¡s
(
thªadCou¡
);

539 
i
 = 0; i !
thªadCou¡
; ++i) {

540 
›Cou¡s
[
i
] = 
°d
::
unif‹m_öt_di°ributi⁄
<>(0, 500000)(
∫g
);

543 
°d
::
size_t
 
ex≥˘edMemUßge
 = 0;

544 
i
 = 0; i !
thªadCou¡
; ++i) {

545 
ex≥˘edMemUßge
 +
›Cou¡s
[
i
] * (
Te°Li°Iãm
);

548 
c‹ólgos
::
C⁄cuºítAddO∆yLi°
<
Te°Li°Iãm
> 
li°
;

549 
i
 = 0; i !
thªadCou¡
; ++i) {

550 
thªads
[
i
] = 
	`Sim∂eThªad
([&](
tid
) {

551 autÿ
ãmp
 = 
ex≥˘edMemUßge
;

552 (()
ãmp
);

554 
›Cou¡
 = 
›Cou¡s
[
tid
];

555 
j
 = 0; j !
›Cou¡
; ++j) {

556 
li°
.
	`add
(
√w
 
	`Te°Li°Iãm
((
tid
 << 24Ë| 
j
));

558 }, 
i
);

560 
i
 = 0; i !
thªadCou¡
; ++i) {

561 
thªads
[
i
].
	`joö
();

563 
°d
::
ve˘‹
<> 
	`œ°Iãms
(
thªadCou¡
);

564 
i
 = 0; i !
thªadCou¡
; ++i) {

565 
œ°Iãms
[
i
] = 
›Cou¡s
[i];

567 autÿ
èû
 = 
li°
.
	`èû
();

568 
èû
 !
nuŒ±r
) {

569 autÿ
tid
 = 
èû
->
vÆue
 >> 24;

570 
	`ASSERT_OR_FAIL
(
œ°Iãms
[
tid
] - 1 =(
èû
->
vÆue
 & 0xFFFFFF));

571 --
œ°Iãms
[
tid
];

572 autÿ
√xt
 = 
èû
->
	`¥ev
();

573 
dñëe
 
èû
;

574 
èû
 = 
√xt
;

578 
c‹e_thªad_loˇl
:

580 
thªadCou¡
 = 
°d
::
unif‹m_öt_di°ributi⁄
<>(32, 256)(
∫g
);

581 
°d
::
ve˘‹
<
Sim∂eThªad
> 
	`thªads
(
thªadCou¡
);

582 
°d
::
ve˘‹
<> 
	`›Cou¡s
(
thªadCou¡
);

583 
°d
::
ve˘‹
<*> 
	`loˇlD©a
(
thªadCou¡
);

585 
i
 = 0; i !
thªadCou¡
; ++i) {

586 
›Cou¡s
[
i
] = 
°d
::
unif‹m_öt_di°ributi⁄
<>(10000, 250000)(
∫g
);

589 
c‹ólgos
::
ThªadLoˇl
<
Te°Li°Iãm
> 
	`és
(1);

590 
i
 = 0; i !
thªadCou¡
; ++i) {

591 
thªads
[
i
] = 
	`Sim∂eThªad
([&](
tid
) {

592 autÿ
p
 = 
és
.
	`gë_‹_¸óã
();

593 
	`ASSERT_OR_FAIL_THREAD
(
p
->
vÆue
 == 0);

594 
p
->
vÆue
 = 
tid
;

595 
loˇlD©a
[
tid
] = &
p
->
vÆue
;

597 
›Cou¡
 = 
›Cou¡s
[
tid
];

598 
j
 = 0; j !
›Cou¡
; ++j) {

599 autÿ
q
 = 
és
.
	`gë_‹_¸óã
();

600 
	`ASSERT_OR_FAIL_THREAD
(
q
 =
p
);

601 
	`ASSERT_OR_FAIL_THREAD
(
q
->
vÆue
 =
tid
);

602 
	`FAIL_IF_THREAD_TIMEOUT
();

604 }, 
i
);

606 
i
 = 0; i !
thªadCou¡
; ++i) {

607 
thªads
[
i
].
	`joö
();

609 
i
 = 0; i !
thªadCou¡
; ++i) {

610 
	`ASSERT_OR_FAIL
(
loˇlD©a
[
i
] !
nuŒ±r
);

611 
	`ASSERT_OR_FAIL
(*
loˇlD©a
[
i
] == i);

616 
	`as£π
(
Ál£
);

619 ++
ã°_cou¡
[
ty≥
];

620 i‡(
Áûed
.
	`lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
)) {

621 
out_ÁûRós⁄
 = 
ÁûRós⁄
.
	`lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
);

622 
ªsu…
 = 
Ál£
;

624 i‡(!
ªsu…
) {

625 ++
Áû_cou¡
[
ty≥
];

629  
ªsu…
;

630 
	}
}

633 c⁄° * 
	$time°amp
()

635 
buf
[32];

636 
time_t
 
time
 = 
°d
::
	`time
(
NULL
);

637 
	`°r˝y
(
buf
, 
°d
::
	`as˘ime
(°d::
	`loˇ…ime
(&
time
)));

638 
buf
[
	`°æí
(buf) - 1] = '\0';

639  
buf
;

640 
	}
}

642 "C" { (*
sig«l_h™dÀr_t
)(); }

643 
°d
::
©omic
<°d::
uöt64_t
> 
g_£ed
(0);

644 
	g°d
::
©omic_Êag
 
ªp‹ãd_sig«l_îr‹
 = 
ATOMIC_FLAG_INIT
;

645 
	g°d
::
©omic
<
sig«l_h™dÀr_t
> 
g_¥ev_sig£gv
(
nuŒ±r
);

646 
	g°d
::
©omic
<
sig«l_h™dÀr_t
> 
g_¥ev_sigabπ
(
nuŒ±r
);

647 
	g°d
::
muãx
 
g_sig«l_h™dÀr_muãx
;

649 
	$⁄_sig«l
(
sig«l
)

651 i‡(
ªp‹ãd_sig«l_îr‹
.
	`ã°_™d_£t
()) {

655 
°d
::
unique_lock
<°d::
muãx
> 
	`lock
(
g_sig«l_h™dÀr_muãx
);

656 autÿ
£ed
 = 
g_£ed
.
	`lﬂd
(
°d
::
mem‹y_‹dî_acquúe
);

660 c⁄° * 
îr‹
 = 
sig«l
 =
SIGABRT
 ?

665 
°d
::
of°ªam
 
	`fout
(
LOG_FILE
, std::
ios
::
≠p
);

666 
fout
 << "*** " << 
îr‹
 << "\¿ Sìd: " << 
°d
::
hex
 << 
£ed
 << std::
ídl
;

668 
°d
::
	`¥ötf
("*** %s\¿ Sìd: %08x%08x\n", 
îr‹
, (
uöt32_t
)(
£ed
 >> 32), (uint32_t)(seed));

669 
°d
::
	`fÊush
(
°dout
);

670 
	}
}

672 "C" 
	$sig«l_h™dÀr
(
sig«l
)

674 
	`⁄_sig«l
(
sig«l
);

675 i‡(
sig«l_h™dÀr_t
 
h™dÀr_‚
 = 
g_¥ev_sig£gv
.
	`lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
)) {

676 
	`h™dÀr_‚
(
sig«l
);

679 
°d
::
	`exô
(
sig«l
);

681 
	}
}

683 #ifde‡
_WIN32


684 
LONG
 
CALLBACK
 
	$£_h™dÀr
(
PEXCEPTION_POINTERS
 
öfo
)

686 i‡(
öfo
->
Ex˚±i⁄Rec‹d
->
Ex˚±i⁄Code
 =
EXCEPTION_ACCESS_VIOLATION
) {

687 
	`⁄_sig«l
(
SIGSEGV
);

689  
EXCEPTION_CONTINUE_SEARCH
;

690 
	}
}

693 
	$maö
(
¨gc
, ** 
¨gv
)

695 
boﬁ
 
sögÀSìd
 = 
Ál£
;

696 
uöt64_t
 
£ed
 = 0;

699 
°d
::
	`£tvbuf
(
°dout
, 
nuŒ±r
, 
_IONBF
, 0);

702 
°d
::
°rög
 
¥ogName
 = 
¨gv
[0];

703 autÿ
¶ash
 = 
¥ogName
.
	`föd_œ°_of
("/\\");

704 i‡(
¶ash
 !
°d
::
°rög
::
≈os
) {

705 
¥ogName
 =ÖrogName.
	`sub°r
(
¶ash
 + 1);

709 i‡(
¨gc
 > 1) {

710 
boﬁ
 
¥ötHñp
 = 
Ál£
;

711 
boﬁ
 
îr‹
 = 
Ál£
;

712 
i
 = 1; i < 
¨gc
; ++i) {

713 i‡(
°d
::
	`°rcmp
(
¨gv
[
i
], "--help") == 0) {

714 
¥ötHñp
 = 
åue
;

716 i‡(
°d
::
	`°rcmp
(
¨gv
[
i
], "--seed") == 0) {

717 i‡(
i
 + 1 =
¨gc
 || 
¨gv
[i + 1][0] == '-') {

718 
°d
::
	`¥ötf
("Expected seedÇumberárgument for --seed option.\n");

719 
îr‹
 = 
åue
;

723 ++
i
;

724 
£ed
 = 0;

726 
j
 = 0; 
¨gv
[
i
][j] != '\0'; ++j) {

727 
ch
 = 
°©ic_ˇ°
<>(
°d
::
	`tﬁowî
(
¨gv
[
i
][
j
]));

728 i‡(
j
 =1 && 
£ed
 =0 && 
ch
 == 'x') {

731 i‡(
ch
 >= 'a' && ch <= 'f') {

732 
£ed
 = (£ed << 4Ë| (10 + 
ch
 - 'a');

734 i‡(
ch
 >= '0' && ch <= '9') {

735 
£ed
 = (£ed << 4Ë| (
ch
 - '0');

738 
°d
::
	`¥ötf
("Ex≥˘ed hex sìdárgumít, found '%s' in°ód\n", 
¨gv
[
i
]);

739 
îr‹
 = 
åue
;

742 
sögÀSìd
 = 
åue
;

745 
°d
::
	`¥ötf
("Uƒecognized o±i⁄ '%s'.\n\n", 
¨gv
[
i
]);

746 
îr‹
 = 
åue
;

750 i‡(
îr‹
 || 
¥ötHñp
) {

751 
°d
::
	`¥ötf
("%s\¿ Des¸ùti⁄: Run†fuzzÅe°†‘™domized sèbûôyÅe°sËf‹ moodyˇmñ::C⁄cuºítQueue\n", 
¥ogName
.
	`c_°r
());

752 
°d
::
	`¥ötf
(" An infinite series ofÑandomÅestsáreÑun,Éach withá different seed.\nIfáÅest fails,Åhe seed forÅhatÅest isÑeported.\n");

753 
°d
::
	`¥ötf
(" --help PrintsÅhis help blurb\n");

754 
°d
::
	`¥ötf
(" --seed N Runs oneÅest withÅhe given seed\n");

755  
îr‹
 ? -1 : 0;

761 
boﬁ
 
logExi°s
 = 
åue
;

763 
°d
::
if°ªam
 
	`fö
(
LOG_FILE
);

764 i‡(!
fö
) {

765 
logExi°s
 = 
Ál£
;

769 
°d
::
of°ªam
 
	`fout
(
LOG_FILE
, std::
ios
::
≠p
);

770 i‡(
logExi°s
) {

771 
fout
 << "\n\n";

773 i‡(
sögÀSìd
) {

774 
°d
::
	`¥ötf
("Ru¬ög %d iãøti⁄†o‡sögÀÅe° wôh sìd %08x%08x.\n\n", 
SINGLE_SEED_ITERATIONS
, (
uöt32_t
)(
£ed
 >> 32), (uint32_t)(seed));

776 
fout
 << "--- NewÑu¿(" << 
	`time°amp
(Ë<< "): Executög " << 
SINGLE_SEED_ITERATIONS
 << " iãøti⁄†o‡®sögÀÅe° wôh sìd " << 
°d
::
hex
 << 
£ed
 << " ---" << std::
ídl
;

779 
°d
::
	`¥ötf
("RunningÑandom fuzzÅests for moodycamel::ConcurrentQueue.\n");

780 
°d
::
	`¥ötf
("Press CTRL+CÅoÉxit.\n");

781 
°d
::
	`¥ötf
("(Ru¿%†--hñ∞f‹ o±i⁄s.)\n\n", 
¥ogName
.
	`c_°r
());

783 
fout
 << "--- NewÑu¿(" << 
	`time°amp
(Ë<< "): ExecutögÑ™dom fuzzÅe°†---" << 
°d
::
ídl
;

787 
exôCode
 = 0;

788 
ã°_ty≥
 
ã°
;

789 c⁄° * 
ÁûRós⁄
;

790 i‡(
sögÀSìd
) {

791 i‡(!
	`run_ã°
(
£ed
, 
SINGLE_SEED_ITERATIONS
, 
ã°
, 
ÁûRós⁄
)) {

792 
exôCode
 = 1;

793 
°d
::
of°ªam
 
	`fout
(
LOG_FILE
, std::
ios
::
≠p
);

794 
fout
 << 
ã°_«mes
[
ã°
] << " faûed: " << 
ÁûRós⁄
 << 
°d
::
ídl
;

795 
°d
::
	`¥ötf
(" %†Áûed: %s\n", 
ã°_«mes
[
ã°
], 
ÁûRós⁄
);

798 
°d
::
of°ªam
 
	`fout
(
LOG_FILE
, std::
ios
::
≠p
);

799 
fout
 << 
ã°_«mes
[
ã°
] << " suc˚eded!" << 
°d
::
ídl
;

800 
°d
::
	`¥ötf
(" %†suc˚eded!\n", 
ã°_«mes
[
ã°
]);

804 #ifde‡
_WIN32


805 
	`AddVe˘‹edEx˚±i⁄H™dÀr
(1 , &
£_h™dÀr
);

808 
uöt32_t
 
ôî©i⁄
 = 0;

809 
åue
) {

810 
£ed
 = (
°©ic_ˇ°
<
uöt64_t
>(
°d
::
	`time
(
NULL
)Ë<< 32Ë| 
ôî©i⁄
++;

812 
£ed
 ^= seed >> 33;

813 
£ed
 *= 0xff51afd7ed558ccd;

814 
£ed
 ^= seed >> 33;

815 
£ed
 *= 0xc4ceb9fe1a85ec53;

817 
g_£ed
.
	`°‹e
(
£ed
, 
°d
::
mem‹y_‹dî_ªÀa£
);

818 
°d
::
	`sig«l
(
SIGSEGV
, 
sig«l_h™dÀr
);

819 
°d
::
	`sig«l
(
SIGABRT
, 
sig«l_h™dÀr
);

821 
boﬁ
 
ªsu…
;

822 
åy
 {

823 
ªsu…
 = 
	`run_ã°
(
£ed
, 2, 
ã°
, 
ÁûRós⁄
);

825 
	`ˇtch
 (
°d
::
ex˚±i⁄
 c⁄°& 
e
) {

826 
°d
::
of°ªam
 
	`fout
(
LOG_FILE
, std::
ios
::
≠p
);

827 
fout
 << "*** Ex˚±i⁄Åhrown: " << 
e
.
	`wh©
(Ë<< "\¿ Sìd: " << 
°d
::
hex
 << 
£ed
 << "\¿ Te°: " << 
ã°_«mes
[
ã°
] << std::
ídl
;

828 
°d
::
	`¥ötf
("*** Ex˚±i⁄Åhrown: %s\¿ Sìd: %08x%08x\¿ Te°: %s\n\n", 
e
.
	`wh©
(), (
uöt32_t
)(
£ed
 >> 32), (uöt32_t)(£ed), 
ã°_«mes
[
ã°
]);

829 
°d
::
	`exô
(2);

831 
	`ˇtch
 (...) {

832 
°d
::
of°ªam
 
	`fout
(
LOG_FILE
, std::
ios
::
≠p
);

833 
fout
 << "*** Unknow¿ex˚±i⁄Åhrown!\¿ Sìd: " << 
°d
::
hex
 << 
£ed
 << "\¿ Te°: " << 
ã°_«mes
[
ã°
] << std::
ídl
;

834 
°d
::
	`¥ötf
("*** Unknow¿ex˚±i⁄Åhrown!\¿ Sìd: %08x%08x\¿ Te°: %s\n\n", (
uöt32_t
)(
£ed
 >> 32), (uöt32_t)(£ed), 
ã°_«mes
[
ã°
]);

835 
°d
::
	`exô
(2);

838 
°d
::
	`sig«l
(
SIGSEGV
, 
SIG_DFL
);

839 
°d
::
	`sig«l
(
SIGABRT
, 
SIG_DFL
);

841 i‡(!
ªsu…
) {

842 
exôCode
 = 1;

843 
°d
::
of°ªam
 
	`fout
(
LOG_FILE
, std::
ios
::
≠p
);

844 
fout
 << "*** Faûuª dëe˘ed!\¿ Sìd: " << 
°d
::
hex
 << 
£ed
 << "\¿ Te°: " << 
ã°_«mes
[
ã°
] << "\¿ Rós⁄: " << 
ÁûRós⁄
 << std::
ídl
;

845 
°d
::
	`¥ötf
("*** Faûuª dëe˘ed!\¿ Sìd: %08x%08x\¿ Te°: %s\¿ Rós⁄: %s\n", (
uöt32_t
)(
£ed
 >> 32), (uöt32_t)(£ed), 
ã°_«mes
[
ã°
], 
ÁûRós⁄
);

848 i‡((
ôî©i⁄
 & 31) == 0) {

849 
°d
::
uöt64_t
 
tŸÆ
 = 0;

851 
bªakdown
[128 * 
TEST_TYPE_COUNT
];

852 * 
±r
 = 
bªakdown
;

853 
i
 = 0; i !
TEST_TYPE_COUNT
; ++i) {

854 
°d
::
	`•rötf
(
±r
, " %s: %Œu suc˚ssful, %Œu faûed\n", 
ã°_«mes
[
i
], ()(
ã°_cou¡
[i] - 
Áû_cou¡
[i]), ()fail_count[i]);

855 
±r
 +
°d
::
	`°æí
(ptr);

856 
tŸÆ
 +
ã°_cou¡
[
i
];

859 
°d
::
of°ªam
 
	`fout
(
LOG_FILE
, std::
ios
::
≠p
);

860 
fout
 << "Execuãd " << 
tŸÆ
 << "Åe°†sÿÁr:\n" << 
bªakdown
;

861 
°d
::
	`¥ötf
("Execuãd %ŒuÅe°†sÿÁr:\n%s", ()
tŸÆ
, 
bªakdown
);

866  
exôCode
;

867 
	}
}

	@viper/concurrentqueue-src/tests/relacy/freelist.cpp

3 
	~"ªœcy/ªœcy/ªœcy_°d.hµ
"

6 
	gãm∂©e
 <
ty≥«me
 
	gN
>

7 
	sFªeLi°Node


9 
FªeLi°Node
(Ë: 
‰ìLi°Refs
(0), 
‰ìLi°Next
(
nuŒ±r
) { }

11 
	m°d
::
©omic
<
°d
::
uöt32_t
> 
‰ìLi°Refs
;

12 
	m°d
::
©omic
<
N
*> 
‰ìLi°Next
;

18 
	gãm∂©e
<
ty≥«me
 
	gN
>

19 
	sFªeLi°


21 
FªeLi°
(Ë: 
‰ìLi°Hód
(
nuŒ±r
) { }

23 
ölöe
 
add
(
N
* 
node
)

27 i‡(
node
->
‰ìLi°Refs
.
„tch_add
(
SHOULD_BE_ON_FREELIST
, 
°d
::
mem‹y_‹dî_acq_ªl
) == 0) {

30 
add_knowög_ªfcou¡_is_zîo
(
node
);

34 
ölöe
 
N
* 
åy_gë
()

36 autÿ
	mhód
 = 
‰ìLi°Hód
.
lﬂd
(
°d
::
mem‹y_‹dî_acquúe
);

37 
	mhód
 !
nuŒ±r
) {

38 autÿ
¥evHód
 = 
hód
;

39 autÿ
	mªfs
 = 
hód
->
‰ìLi°Refs
.
lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
);

40 i‡((
	mªfs
 & 
	mREFS_MASK
Ë=0 || !
hód
->
‰ìLi°Refs
.
com∑ª_exch™ge_°r⁄g
(
ªfs
,Ñefs + 1,

41 
°d
::
mem‹y_‹dî_acquúe
, std::
mem‹y_‹dî_ªœxed
)) {

42 
hód
 = 
‰ìLi°Hód
.
lﬂd
(
°d
::
mem‹y_‹dî_acquúe
);

49 autÿ
	m√xt
 = 
hód
->
‰ìLi°Next
.
lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
);

50 i‡(
	m‰ìLi°Hód
.
com∑ª_exch™ge_°r⁄g
(
hód
, 
√xt
,

51 
°d
::
mem‹y_‹dî_acquúe
, std::
mem‹y_‹dî_ªœxed
)) {

55 
RL_ASSERT
((
hód
->
‰ìLi°Refs
.
lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
Ë& 
SHOULD_BE_ON_FREELIST
) == 0);

58 
	mhód
->
	m‰ìLi°Refs
.
„tch_add
(-2, 
°d
::
mem‹y_‹dî_ªÀa£
);

60  
	mhód
;

67 
	mªfs
 = 
¥evHód
->
‰ìLi°Refs
.
„tch_add
(-1, 
°d
::
mem‹y_‹dî_acq_ªl
);

68 i‡(
	mªfs
 =
SHOULD_BE_ON_FREELIST
 + 1) {

69 
add_knowög_ªfcou¡_is_zîo
(
¥evHód
);

73  
	mnuŒ±r
;

77 
N
* 
hód_unß„
(Ëc⁄° {  
	m‰ìLi°Hód
.
lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
); }

79 
	m¥iv©e
:

80 
ölöe
 
add_knowög_ªfcou¡_is_zîo
(
N
* 
node
)

91 autÿ
hód
 = 
‰ìLi°Hód
.
lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
);

92 
	måue
) {

93 
	mnode
->
	m‰ìLi°Next
.
°‹e
(
hód
, 
°d
::
mem‹y_‹dî_ªœxed
);

94 
	mnode
->
	m‰ìLi°Refs
.
°‹e
(1, 
°d
::
mem‹y_‹dî_ªÀa£
);

95 i‡(!
	m‰ìLi°Hód
.
com∑ª_exch™ge_°r⁄g
(
hód
, 
node
,

96 
°d
::
mem‹y_‹dî_ªÀa£
, std::
mem‹y_‹dî_ªœxed
)) {

98 i‡(
node
->
‰ìLi°Refs
.
„tch_add
(
SHOULD_BE_ON_FREELIST
 - 1, 
°d
::
mem‹y_‹dî_ªÀa£
) == 1) {

106 
	m¥iv©e
:

107 c⁄° 
°d
::
uöt32_t
 
REFS_MASK
 = 0x7FFFFFFF;

108 c⁄° 
	m°d
::
uöt32_t
 
SHOULD_BE_ON_FREELIST
 = 0x80000000;

112 
	m°d
::
©omic
<
N
*> 
‰ìLi°Hód
;

116 
	gTe°Node
 : 
FªeLi°Node
<
Te°Node
>

118 
vÆue
;

119 
Te°Node
() { }

120 
ex∂icô
 
Te°Node
(
vÆue
) : value(value) { }

123 
	gbasic_ã°
 : 
æ
::
ã°_suôe
<
basic_ã°
, 2>

125 
	gFªeLi°
<
	gTe°Node
> 
	g‰ìLi°
;

126 
Te°Node
 
	göôülNodes
[2];

128 
bef‹e
()

132 
thªad
(
tid
)

134 
Te°Node
* 
	gnode
 = &
öôülNodes
[
tid
];

135 
	gnode
->
	gvÆue
 = 
tid
;

136 
	g‰ìLi°
.
add
(
node
);

138 
	gnode
 = 
‰ìLi°
.
åy_gë
();

139 i‡(
	gnode
 !
nuŒ±r
) {

140 
‰ìLi°
.
add
(
node
);

144 
a·î
()

148 
öv¨ü¡
()

153 
	gfuŒ_ã°
 : 
æ
::
ã°_suôe
<
fuŒ_ã°
, 4>

155 
	gFªeLi°
<
	gTe°Node
> 
	g‰ìLi°
;

156 
Te°Node
 
	göôülNodes
[6];

158 
bef‹e
()

162 
thªad
(
tid
)

164 
Te°Node
* 
	gnode
;

165 
	gmyNodeCou¡
 = 
tid
 >= 4 ? 2 : 1;

166 
	gi
 = 0; i !
myNodeCou¡
; ++i) {

167 
	gnode
 = &
öôülNodes
[
tid
 + (tid >5 ? 1 : 0Ë+ 
i
];

168 
	gnode
->
	gvÆue
 = 
tid
;

169 
	g‰ìLi°
.
add
(
node
);

172 
	gi
 = 0; i != 3; ++i) {

173 
	gnode
 = 
‰ìLi°
.
åy_gë
();

174 i‡(
	gnode
 !
nuŒ±r
) {

175 
‰ìLi°
.
add
(
node
);

180 
a·î
()

184 
öv¨ü¡
()

189 
	$maö
()

191 
æ
::
ã°_∑øms
 
∑øms
;

194 
∑øms
.
£¨ch_ty≥
 = 
æ
::
sched_øndom
;

195 
∑øms
.
ôî©i⁄_cou¡
 = 1000000;

196 
æ
::
simuœã
<
basic_ã°
>(
∑øms
);

197 
æ
::
simuœã
<
fuŒ_ã°
>(
∑øms
);

200 
	}
}

	@viper/concurrentqueue-src/tests/relacy/integrated.cpp

8 
	#MCDBGQ_USE_RELACY


	)

9 
	~"../../c⁄cuºítqueue.h
"

11 
	~<°rög
>

13 
usög
 
«me•a˚
 
	gmoodyˇmñ
;

15 
	gSmÆlC⁄°™tTøôs
 : 
public
 
C⁄cuºítQueueDeÁu…Tøôs


17 c⁄° 
size_t
 
BLOCK_SIZE
 = 2;

18 c⁄° 
size_t
 
	gEXPLICIT_INITIAL_INDEX_SIZE
 = 2;

19 c⁄° 
size_t
 
	gIMPLICIT_INITIAL_INDEX_SIZE
 = 2;

20 c⁄° 
size_t
 
	gINITIAL_IMPLICIT_PRODUCER_HASH_SIZE
 = 1;

21 c⁄° 
	g°d
::
uöt32_t
 
EXPLICIT_CONSUMER_CONSUMPTION_QUOTA_BEFORE_ROTATE
 = 2;

24 
	gMediumC⁄°™tTøôs
 : 
public
 
C⁄cuºítQueueDeÁu…Tøôs


26 c⁄° 
size_t
 
BLOCK_SIZE
 = 4;

27 c⁄° 
size_t
 
	gEXPLICIT_INITIAL_INDEX_SIZE
 = 2;

28 c⁄° 
size_t
 
	gIMPLICIT_INITIAL_INDEX_SIZE
 = 4;

29 c⁄° 
size_t
 
	gINITIAL_IMPLICIT_PRODUCER_HASH_SIZE
 = 2;

30 c⁄° 
	g°d
::
uöt32_t
 
EXPLICIT_CONSUMER_CONSUMPTION_QUOTA_BEFORE_ROTATE
 = 4;

33 
	sFoo
 {

34 & 
˘‹Cou¡
(Ë{ 
	mc
;  c; }

35 & 
dt‹Cou¡
(Ë{ 
	mc
;  c; }

36 
ª£t
(Ë{ 
˘‹Cou¡
(Ë0; 
dt‹Cou¡
() = 0; }

38 
Foo
()

39 : 
id
(-2)

41 ++
˘‹Cou¡
();

44 
Foo
(
id
)

45 : 
id
(id)

47 ++
˘‹Cou¡
();

50 
Foo
(Foÿc⁄°& 
o
)

51 : 
id
(
o
.id)

53 ++
˘‹Cou¡
();

56 ~
Foo
()

58 
RL_ASSERT
(
id
 != -1);

59 ++
dt‹Cou¡
();

60 
	mid
 = -1;

63 
	mpublic
:

64 
id
;

69 
	gíqueue_ex∂icô_⁄e
 : 
æ
::
ã°_suôe
<
íqueue_ex∂icô_⁄e
, 2>

71 
	gC⁄cuºítQueue
<, 
	gSmÆlC⁄°™tTøôs
> 
	gq
;

73 
bef‹e
()

77 
thªad
(
tid
)

79 
	gRñacyThªadExôNŸifõr
::
nŸify_ªœcy_thªad_°¨t
();

81 
Produ˚rTokí
 
t
(
q
);

82 
	gq
.
íqueue
(
t
, 
tid
);

84 
	gRñacyThªadExôNŸifõr
::
nŸify_ªœcy_thªad_exô
();

87 
a·î
()

89 
	gtid0
, 
	gtid1
;

90 
RL_ASSERT
(
q
.
åy_dequeue
(
tid0
));

91 
RL_ASSERT
(
tid0
 == 0 ||Åid0 == 1);

92 
RL_ASSERT
(
q
.
åy_dequeue
(
tid1
));

93 
RL_ASSERT
(
tid1
 == 0 ||Åid1 == 1);

94 
RL_ASSERT
(
tid0
 !
tid1
);

95 
RL_ASSERT
(!
q
.
åy_dequeue
(
tid0
));

98 
öv¨ü¡
()

104 
	gíqueue_ex∂icô_m™y
 : 
æ
::
ã°_suôe
<
íqueue_ex∂icô_m™y
, 3>

106 
	gC⁄cuºítQueue
<, 
	gSmÆlC⁄°™tTøôs
> 
	gq
;

108 
bef‹e
()

112 
thªad
(
tid
)

114 
	gRñacyThªadExôNŸifõr
::
nŸify_ªœcy_thªad_°¨t
();

116 
Produ˚rTokí
 
t
(
q
);

117 
	gi
 = 0; i != 5; ++i) {

118 
	gq
.
íqueue
(
t
, 
tid
 * 10 + 
i
);

121 
	gRñacyThªadExôNŸifõr
::
nŸify_ªœcy_thªad_exô
();

124 
a·î
()

126 
	gôem
;

127 
	gi
 = 0; i != 15; ++i) {

128 
RL_ASSERT
(
q
.
åy_dequeue
(
ôem
));

130 
RL_ASSERT
(!
q
.
åy_dequeue
(
ôem
));

133 
öv¨ü¡
()

140 
	gdequeue_some_ex∂icô
 : 
æ
::
ã°_suôe
<
dequeue_some_ex∂icô
, 3>

142 
	gC⁄cuºítQueue
<, 
	gSmÆlC⁄°™tTøôs
> 
	gq
;

144 
bef‹e
()

148 
thªad
(
tid
)

150 
	gRñacyThªadExôNŸifõr
::
nŸify_ªœcy_thªad_°¨t
();

152 i‡(
	gtid
 <= 1) {

153 
ôem
;

154 
C⁄sumîTokí
 
t
(
q
);

155 
	gi
 = 0; i != 5; ++i) {

156 
	gq
.
åy_dequeue
(
t
, 
ôem
);

160 
Produ˚rTokí
 
t
(
q
);

161 
	gi
 = 0; i != 3; ++i) {

162 
	gq
.
íqueue
(
t
, 
tid
 * 10 + 
i
);

166 
	gRñacyThªadExôNŸifõr
::
nŸify_ªœcy_thªad_exô
();

169 
a·î
()

173 
öv¨ü¡
()

180 
	gªcy˛e_blocks_ex∂icô
 : 
æ
::
ã°_suôe
<
ªcy˛e_blocks_ex∂icô
, 3>

182 
	gC⁄cuºítQueue
<, 
	gSmÆlC⁄°™tTøôs
> 
	gq
;

183 
	g°d
::
ve˘‹
<
boﬁ
> 
£í
;

185 
bef‹e
()

187 
	g£í
.
ªsize
(8, 
Ál£
);

190 
thªad
(
tid
)

192 
	gRñacyThªadExôNŸifõr
::
nŸify_ªœcy_thªad_°¨t
();

194 i‡(
	gtid
 == 0) {

195 
Produ˚rTokí
 
t
(
q
);

196 
	gi
 = 0; i != 8; ++i) {

197 
	gq
.
íqueue
(
t
, 
i
);

201 
	gôem
;

202 
C⁄sumîTokí
 
t
(
q
);

203 
	gi
 = 0; i != 6; ++i) {

204 i‡(
	gq
.
åy_dequeue
(
t
, 
ôem
)) {

205 
RL_ASSERT
(!
£í
[
ôem
]);

206 
	g£í
[
ôem
] = 
åue
;

211 
	gRñacyThªadExôNŸifõr
::
nŸify_ªœcy_thªad_exô
();

214 
a·î
()

216 
	gôem
;

217 
	gq
.
åy_dequeue
(
ôem
)) {

218 
RL_ASSERT
(!
£í
[
ôem
]);

219 
	g£í
[
ôem
] = 
åue
;

221 autÿ
	gs
 : 
£í
) {

222 
RL_ASSERT
(
s
);

226 
öv¨ü¡
()

232 
	gex∑nd_block_ödex_ex∂icô
 : 
æ
::
ã°_suôe
<
ex∑nd_block_ödex_ex∂icô
, 4>

234 
	gC⁄cuºítQueue
<, 
	gSmÆlC⁄°™tTøôs
> 
	gq
;

235 
	g°d
::
ve˘‹
<
boﬁ
> 
£í
;

237 
bef‹e
()

239 
	g£í
.
ªsize
(12, 
Ál£
);

242 
thªad
(
tid
)

244 
	gRñacyThªadExôNŸifõr
::
nŸify_ªœcy_thªad_°¨t
();

246 i‡(
	gtid
 == 0) {

247 
Produ˚rTokí
 
t
(
q
);

248 
	gi
 = 0; i != 12; ++i) {

249 
	gq
.
íqueue
(
t
, 
i
);

253 
	gôem
;

254 
C⁄sumîTokí
 
t
(
q
);

255 
	gi
 = 0; i != 3; ++i) {

256 i‡(
	gq
.
åy_dequeue
(
t
, 
ôem
)) {

257 
RL_ASSERT
(!
£í
[
ôem
]);

258 
	g£í
[
ôem
] = 
åue
;

263 
	gRñacyThªadExôNŸifõr
::
nŸify_ªœcy_thªad_exô
();

266 
a·î
()

268 
	gôem
;

269 
	gq
.
åy_dequeue
(
ôem
)) {

270 
RL_ASSERT
(!
£í
[
ôem
]);

271 
	g£í
[
ôem
] = 
åue
;

273 autÿ
	gs
 : 
£í
) {

274 
RL_ASSERT
(
s
);

278 
öv¨ü¡
()

285 
	gíqueue_im∂icô_⁄e
 : 
æ
::
ã°_suôe
<
íqueue_im∂icô_⁄e
, 2>

287 
	gC⁄cuºítQueue
<, 
	gSmÆlC⁄°™tTøôs
> 
	gq
;

289 
bef‹e
()

293 
thªad
(
tid
)

295 
	gRñacyThªadExôNŸifõr
::
nŸify_ªœcy_thªad_°¨t
();

297 
	gq
.
íqueue
(
tid
);

299 
	gRñacyThªadExôNŸifõr
::
nŸify_ªœcy_thªad_exô
();

302 
a·î
()

304 
	gtid0
, 
	gtid1
;

305 
RL_ASSERT
(
q
.
åy_dequeue
(
tid0
));

306 
RL_ASSERT
(
tid0
 == 0 ||Åid0 == 1);

307 
RL_ASSERT
(
q
.
åy_dequeue
(
tid1
));

308 
RL_ASSERT
(
tid1
 == 0 ||Åid1 == 1);

309 
RL_ASSERT
(
tid0
 !
tid1
);

310 
RL_ASSERT
(!
q
.
åy_dequeue
(
tid0
));

313 
öv¨ü¡
()

319 
	gim∂icô_sim∂e
 : 
æ
::
ã°_suôe
<
im∂icô_sim∂e
, 3>

321 
	gC⁄cuºítQueue
<, 
	gSmÆlC⁄°™tTøôs
> 
	gq
;

322 
	g°d
::
ve˘‹
<
boﬁ
> 
£í
;

324 
bef‹e
()

326 
	g£í
.
ªsize
(5, 
Ál£
);

329 
thªad
(
tid
)

331 
	gRñacyThªadExôNŸifõr
::
nŸify_ªœcy_thªad_°¨t
();

333 i‡(
	gtid
 == 0) {

334 
i
 = 0; 
	gi
 != 5; ++i) {

335 
	gq
.
íqueue
(
i
);

339 
	gôem
;

340 
	gi
 = 0; i != 3; ++i) {

341 i‡(
	gq
.
åy_dequeue
(
ôem
)) {

342 
RL_ASSERT
(!
£í
[
ôem
]);

343 
	g£í
[
ôem
] = 
åue
;

348 
	gRñacyThªadExôNŸifõr
::
nŸify_ªœcy_thªad_exô
();

351 
a·î
()

353 
	gôem
;

354 
	gq
.
åy_dequeue
(
ôem
)) {

355 
RL_ASSERT
(!
£í
[
ôem
]);

356 
	g£í
[
ôem
] = 
åue
;

358 autÿ
	gs
 : 
£í
) {

359 
RL_ASSERT
(
s
);

363 
öv¨ü¡
()

370 
	gm™y_im∂icô_¥odu˚rs
 : 
æ
::
ã°_suôe
<
m™y_im∂icô_¥odu˚rs
, 6>

372 
	gC⁄cuºítQueue
<, 
	gSmÆlC⁄°™tTøôs
> 
	gq
;

373 
	g°d
::
ve˘‹
<
boﬁ
> 
£í
;

375 
bef‹e
()

377 
	g£í
.
ªsize
(18, 
Ál£
);

380 
thªad
(
tid
)

382 
	gRñacyThªadExôNŸifõr
::
nŸify_ªœcy_thªad_°¨t
();

384 
	gq
.
íqueue
(
tid
 * 3 + 0);

385 
	gq
.
íqueue
(
tid
 * 3 + 1);

386 
	gq
.
íqueue
(
tid
 * 3 + 2);

388 
	gôem
;

389 
	gi
 = 0; i != 2; ++i) {

390 i‡(
	gq
.
åy_dequeue
(
ôem
)) {

391 
RL_ASSERT
(!
£í
[
ôem
]);

392 
	g£í
[
ôem
] = 
åue
;

396 
	gRñacyThªadExôNŸifõr
::
nŸify_ªœcy_thªad_exô
();

399 
a·î
()

401 
	gôem
;

402 
	gq
.
åy_dequeue
(
ôem
)) {

403 
RL_ASSERT
(!
£í
[
ôem
]);

404 
	g£í
[
ôem
] = 
åue
;

406 autÿ
	gs
 : 
£í
) {

407 
RL_ASSERT
(
s
);

411 
öv¨ü¡
()

417 
	gim∂icô_¥odu˚r_ªu£
 : 
æ
::
ã°_suôe
<
im∂icô_¥odu˚r_ªu£
, 9>

419 
	gC⁄cuºítQueue
<, 
	gSmÆlC⁄°™tTøôs
> 
	gq
;

420 
	g°d
::
ve˘‹
<
boﬁ
> 
£í
;

422 
bef‹e
()

424 
	g£í
.
ªsize
(9, 
Ál£
);

427 
thªad
(
tid
)

429 
	gRñacyThªadExôNŸifõr
::
nŸify_ªœcy_thªad_°¨t
();

431 
	gq
.
íqueue
(
tid
);

433 
	gRñacyThªadExôNŸifõr
::
nŸify_ªœcy_thªad_exô
();

436 
a·î
()

438 
	gôem
;

439 
	gq
.
åy_dequeue
(
ôem
)) {

440 
RL_ASSERT
(!
£í
[
ôem
]);

441 
	g£í
[
ôem
] = 
åue
;

443 autÿ
	gs
 : 
£í
) {

444 
RL_ASSERT
(
s
);

448 
öv¨ü¡
()

454 
	gim∂icô_block_ªu£
 : 
æ
::
ã°_suôe
<
im∂icô_block_ªu£
, 4>

456 
	gC⁄cuºítQueue
<, 
	gSmÆlC⁄°™tTøôs
> 
	gq
;

457 
	g°d
::
ve˘‹
<
boﬁ
> 
£í
;

459 
bef‹e
()

461 
	g£í
.
ªsize
(28, 
Ál£
);

464 
thªad
(
tid
)

466 
	gRñacyThªadExôNŸifõr
::
nŸify_ªœcy_thªad_°¨t
();

468 
	gi
 = 0; i != 7; ++i) {

469 
	gq
.
íqueue
(
tid
 * 7 + 
i
);

472 
	gôem
;

473 
C⁄sumîTokí
 
t
(
q
);

474 
	gi
 = 0; i != 7; ++i) {

475 i‡(
	gq
.
åy_dequeue
(
t
, 
ôem
)) {

476 
RL_ASSERT
(!
£í
[
ôem
]);

477 
	g£í
[
ôem
] = 
åue
;

481 
	gRñacyThªadExôNŸifõr
::
nŸify_ªœcy_thªad_exô
();

484 
a·î
()

486 
	gôem
;

487 
	gq
.
åy_dequeue
(
ôem
)) {

488 
RL_ASSERT
(!
£í
[
ôem
]);

489 
	g£í
[
ôem
] = 
åue
;

491 autÿ
	gs
 : 
£í
) {

492 
RL_ASSERT
(
s
);

496 
öv¨ü¡
()

502 
	gmixed
 : 
æ
::
ã°_suôe
<
mixed
, 4>

504 
	gC⁄cuºítQueue
<, 
	gSmÆlC⁄°™tTøôs
> 
	gq
;

505 
	g°d
::
ve˘‹
<
boﬁ
> 
£í
;

507 
bef‹e
()

509 
	g£í
.
ªsize
(28, 
Ál£
);

512 
thªad
(
tid
)

514 
	gRñacyThªadExôNŸifõr
::
nŸify_ªœcy_thªad_°¨t
();

516 i‡(
	gtid
 <= 1) {

517 
i
 = 0; 
	gi
 != 7; ++i) {

518 
	gq
.
íqueue
(
tid
 * 7 + 
i
);

522 
Produ˚rTokí
 
t
(
q
);

523 
	gi
 = 0; i != 7; ++i) {

524 
	gq
.
íqueue
(
t
, 
tid
 * 7 + 
i
);

528 
	gôem
;

529 i‡(
	gtid
 & 1) {

530 
	gi
 = 0; i != 4; ++i) {

531 i‡(
	gq
.
åy_dequeue
(
ôem
)) {

532 
RL_ASSERT
(!
£í
[
ôem
]);

533 
	g£í
[
ôem
] = 
åue
;

538 
C⁄sumîTokí
 
t
(
q
);

539 
	gi
 = 0; i != 4; ++i) {

540 i‡(
	gq
.
åy_dequeue
(
t
, 
ôem
)) {

541 
RL_ASSERT
(!
£í
[
ôem
]);

542 
	g£í
[
ôem
] = 
åue
;

547 
	gRñacyThªadExôNŸifõr
::
nŸify_ªœcy_thªad_exô
();

550 
a·î
()

552 
	gôem
;

553 
	gq
.
åy_dequeue
(
ôem
)) {

554 
RL_ASSERT
(!
£í
[
ôem
]);

555 
	g£í
[
ôem
] = 
åue
;

557 autÿ
	gs
 : 
£í
) {

558 
RL_ASSERT
(
s
);

562 
öv¨ü¡
()

568 
	gÀ·ovîs_de°royed_ex∂icô
 : 
æ
::
ã°_suôe
<
À·ovîs_de°royed_ex∂icô
, 3>

570 
	gC⁄cuºítQueue
<
	gFoo
, 
	gMediumC⁄°™tTøôs
>* 
	gq
;

571 
	g°d
::
ve˘‹
<
boﬁ
> 
£í
;

573 
bef‹e
()

575 
	g£í
.
ªsize
(
æ
::
ønd
(32), 
Ál£
);

577 
	gq
 = 
√w
 
C⁄cuºítQueue
<
Foo
, 
	gMediumC⁄°™tTøôs
>();

578 
	gFoo
::
ª£t
();

581 
thªad
(
tid
)

583 
	gRñacyThªadExôNŸifõr
::
nŸify_ªœcy_thªad_°¨t
();

585 i‡(
	gtid
 == 0) {

586 
Produ˚rTokí
 
t
(*
q
);

587 
	gi
 = 0; i !()
£í
.
size
(); ++i) {

588 
	gq
->
íqueue
(
t
, 
Foo
(
i
));

592 
Foo
 
	gôem
;

593 
C⁄sumîTokí
 
t
(*
q
);

594 
	gi
 = 
æ
::
ønd
(17); i > 0; --i) {

595 i‡(
	gq
->
åy_dequeue
(
t
, 
ôem
)) {

596 
RL_ASSERT
(!
£í
[
ôem
.
id
]);

597 
	g£í
[
ôem
.
id
] = 
åue
;

602 
	gRñacyThªadExôNŸifõr
::
nŸify_ªœcy_thªad_exô
();

605 
a·î
()

607 
	g£íCou¡
 = 0;

609 autÿ
	gs
 : 
£í
) {

610 i‡(
s
) {

611 ++
£íCou¡
;

616 
RL_ASSERT
(
Foo
::
˘‹Cou¡
(Ë=
£í
.
size
() * 2 + 2);

617 
RL_ASSERT
(
Foo
::
dt‹Cou¡
(Ë=
£í
.
size
(Ë+ 
£íCou¡
 + 2);

618 
dñëe
 
	gq
;

620 
RL_ASSERT
(
Foo
::
˘‹Cou¡
(Ë=
£í
.
size
() * 2 + 2);

621 
RL_ASSERT
(
Foo
::
˘‹Cou¡
(Ë=Foo::
dt‹Cou¡
());

624 
öv¨ü¡
()

630 
	gÀ·ovîs_de°royed_im∂icô
 : 
æ
::
ã°_suôe
<
À·ovîs_de°royed_im∂icô
, 3>

632 
	gC⁄cuºítQueue
<
	gFoo
, 
	gMediumC⁄°™tTøôs
>* 
	gq
;

633 
	g°d
::
ve˘‹
<
boﬁ
> 
£í
;

635 
bef‹e
()

637 
	g£í
.
ªsize
(
æ
::
ønd
(32), 
Ál£
);

639 
	gq
 = 
√w
 
C⁄cuºítQueue
<
Foo
, 
	gMediumC⁄°™tTøôs
>();

640 
	gFoo
::
ª£t
();

643 
thªad
(
tid
)

645 
	gRñacyThªadExôNŸifõr
::
nŸify_ªœcy_thªad_°¨t
();

647 i‡(
	gtid
 == 0) {

648 
i
 = 0; 
	gi
 !()
£í
.
size
(); ++i) {

649 
	gq
->
íqueue
(
Foo
(
i
));

653 
Foo
 
	gôem
;

654 
	gi
 = 
æ
::
ønd
(17); i > 0; --i) {

655 i‡(
	gq
->
åy_dequeue
(
ôem
)) {

656 
RL_ASSERT
(!
£í
[
ôem
.
id
]);

657 
	g£í
[
ôem
.
id
] = 
åue
;

662 
	gRñacyThªadExôNŸifõr
::
nŸify_ªœcy_thªad_exô
();

665 
a·î
()

667 
	g£íCou¡
 = 0;

669 autÿ
	gs
 : 
£í
) {

670 i‡(
s
) {

671 ++
£íCou¡
;

676 
RL_ASSERT
(
Foo
::
˘‹Cou¡
(Ë=
£í
.
size
() * 2 + 2);

677 
RL_ASSERT
(
Foo
::
dt‹Cou¡
(Ë=
£í
.
size
(Ë+ 
£íCou¡
 + 2);

678 
dñëe
 
	gq
;

680 
RL_ASSERT
(
Foo
::
˘‹Cou¡
(Ë=
£í
.
size
() * 2 + 2);

681 
RL_ASSERT
(
Foo
::
˘‹Cou¡
(Ë=Foo::
dt‹Cou¡
());

684 
öv¨ü¡
()

690 
	gãm∂©e
<
ty≥«me
 
	gTTe°
>

691 
	$simuœã
(
ôî©i⁄s
)

699 
æ
::
ã°_∑øms
 
øndomP¨ams
;

700 
øndomP¨ams
.
£¨ch_ty≥
 = 
æ
::
sched_øndom
;

701 
øndomP¨ams
.
ôî©i⁄_cou¡
 = 
ôî©i⁄s
;

702 
æ
::
simuœã
<
TTe°
>(
øndomP¨ams
);

703 
	}
}

705 
	$maö
()

707 
simuœã
<
íqueue_ex∂icô_⁄e
>(1000000);

708 
simuœã
<
íqueue_ex∂icô_m™y
>(1000000);

709 
simuœã
<
dequeue_some_ex∂icô
>(1000000);

710 
simuœã
<
ªcy˛e_blocks_ex∂icô
>(1000000);

711 
simuœã
<
ex∑nd_block_ödex_ex∂icô
>(1000000);

712 
simuœã
<
íqueue_im∂icô_⁄e
>(1000000);

713 
simuœã
<
im∂icô_sim∂e
>(1000000);

714 
simuœã
<
m™y_im∂icô_¥odu˚rs
>(500000);

715 
simuœã
<
im∂icô_¥odu˚r_ªu£
>(1000000);

716 
simuœã
<
im∂icô_block_ªu£
>(1000000);

717 
simuœã
<
mixed
>(1000000);

718 
simuœã
<
À·ovîs_de°royed_ex∂icô
>(1000000);

719 
simuœã
<
À·ovîs_de°royed_im∂icô
>(1000000);

722 
	}
}

	@viper/concurrentqueue-src/tests/relacy/relacy/example/cli_ws_deque/cli_ws_deque.cpp

1 
	~"°dafx.h
"

2 
	~"../../ªœcy/ªœcy_˛i.hµ
"

5 
usög
 
	gæ
::
nv¨
;

6 
usög
 
	gæ
::
nvﬁ©ûe
;

7 
usög
 
	gæ
::
muãx
;

12 
	gãm∂©e
<
ty≥«me
 
	gT
>

13 ˛as†
	cws_deque


15 
	mpublic
:

16 
	$ws_deque
()

18 
	`m_mask
(
$
Ë
öôül_size
 - 1;

19 
	`m_hódIndex
(
$
) = 0;

20 
	`m_èûIndex
(
$
) = 0;

21 
	`m_¨øy
(
$
Ë
√w
 
nv¨
<
T
> [
öôül_size
];

22 
	`m_¨øySize
(
$
Ë
öôül_size
;

25 
boﬁ
 
	$IsEm±y
()

27  
	`m_hódIndex
(
$
Ë>
	`m_èûIndex
($);

28 
	}
}

30 
size_t
 
	$Cou¡
()

32  
	`m_èûIndex
(
$
Ë- 
	`m_hódIndex
($);

33 
	}
}

35 
	$push
(
T
 
ôem
)

37 
size_t
 
èû
 = 
	`m_èûIndex
(
$
);

38 i‡(
èû
 <
	`m_hódIndex
(
$
Ë+ 
	`m_mask
($))

40 
	`m_¨øy
(
$
)[
èû
 & 
	`m_mask
($)]($Ë
ôem
;

41 
	`m_èûIndex
(
$
Ë
èû
 + 1;

45 
m_f‹eignLock
.
	`lock
(
$
);

46 
size_t
 
hód
 = 
	`m_hódIndex
(
$
);

47 
size_t
 
cou¡
 = 
	`Cou¡
();

48 i‡(
cou¡
 >
	`m_mask
(
$
))

50 
size_t
 
¨øySize
 = 
	`m_¨øySize
(
$
);

51 
size_t
 
mask
 = 
	`m_mask
(
$
);

52 
nv¨
<
T
>* 
√wAºay
 = 
√w
Çv¨<T> [
¨øySize
 * 2];

53 
nv¨
<
T
>* 
¨r
 = 
	`m_¨øy
(
$
);

54 
size_t
 
i
 = 0; i !
cou¡
; ++i)

55 
√wAºay
[
i
](
$
Ë
¨r
[(ò+ 
hód
Ë& 
mask
]($);

56 
	`m_¨øy
(
$
Ë
√wAºay
;

57 
	`m_¨øySize
(
$
Ë
¨øySize
 * 2;

58 
	`m_hódIndex
(
$
) = 0;

59 
	`m_èûIndex
(
$
Ë
cou¡
;

60 
èû
 = 
cou¡
;

61 
	`m_mask
(
$
Ë(
mask
 * 2) | 1;

63 
	`m_¨øy
(
$
)[
èû
 & 
	`m_mask
($)]($Ë
ôem
;

64 
	`m_èûIndex
(
$
Ë
èû
 + 1;

65 
m_f‹eignLock
.
	`u∆ock
(
$
);

67 
	}
}

69 
boﬁ
 
	$p›
(
T
& 
ôem
)

71 
size_t
 
èû
 = 
	`m_èûIndex
(
$
);

72 i‡(
èû
 == 0)

73  
Ál£
;

74 
èû
 -= 1;

75 
æ
::
I¡îlocked
::
	`Exch™ge
(
m_èûIndex
, 
èû
, 
$
);

76 i‡(
	`m_hódIndex
(
$
Ë<
èû
)

78 
ôem
 = 
	`m_¨øy
(
$
)[
èû
 & 
	`m_mask
($)]($);

79  
åue
;

83 
m_f‹eignLock
.
	`lock
(
$
);

84 i‡(
	`m_hódIndex
(
$
Ë<
èû
)

86 
ôem
 = 
	`m_¨øy
(
$
)[
èû
 & 
	`m_mask
($)]($);

87 
m_f‹eignLock
.
	`u∆ock
(
$
);

88  
åue
;

92 
	`m_èûIndex
(
$
Ë
èû
 + 1;

93 
m_f‹eignLock
.
	`u∆ock
(
$
);

94  
Ál£
;

97 
	}
}

99 
boﬁ
 
	$°ól
(
T
& 
ôem
)

101 i‡(
Ál£
 =
m_f‹eignLock
.
	`åy_lock
(
$
))

102  
Ál£
;

103 
size_t
 
hód
 = 
	`m_hódIndex
(
$
);

104 
æ
::
I¡îlocked
::
	`Exch™ge
(
m_hódIndex
, 
hód
 + 1, 
$
);

105 i‡(
hód
 < 
	`m_èûIndex
(
$
))

107 
ôem
 = 
	`m_¨øy
(
$
)[
hód
 & 
	`m_mask
($)]($);

108 
m_f‹eignLock
.
	`u∆ock
(
$
);

109  
åue
;

113 
	`m_hódIndex
(
$
Ë
hód
;

114 
m_f‹eignLock
.
	`u∆ock
(
$
);

115  
Ál£
;

117 
	}
}

119 
	g¥iv©e
:

120 
size_t
 c⁄° 
öôül_size
 = 2;

121 
	gnv¨
<nv¨<
	gT
>*> 
	gm_¨øy
;

122 
	gnv¨
<
	gsize_t
> 
	gm_mask
;

123 
	gnv¨
<
	gsize_t
> 
	gm_¨øySize
;

124 
	gnvﬁ©ûe
<
	gsize_t
> 
	gm_hódIndex
;

125 
	gnvﬁ©ûe
<
	gsize_t
> 
	gm_èûIndex
;

126 
muãx
 
	gm_f‹eignLock
;

132 
	gws_deque_ã°
 : 
æ
::
ã°_suôe
<
ws_deque_ã°
, 2>

134 
	gws_deque
<> 
	gq
;

135 
boﬁ
 
	g°©e
 [2];

137 
bef‹e
()

139 
	g°©e
[0] = 
åue
;

140 
	g°©e
[1] = 
åue
;

143 
a·î
()

145 
RL_ASSERT
(
°©e
[0] =
Ál£
);

146 
RL_ASSERT
(
°©e
[1] =
Ál£
);

149 
thªad
(
ödex
)

151 i‡(0 =
ödex
)

153 
q
.
push
(1);

154 
	gq
.
push
(2);

156 
	gôem
 = 0;

157 
boﬁ
 
	gªs
 = 
q
.
p›
(
ôem
);

158 
RL_ASSERT
(
ªs
 && 
ôem
 == 2);

159 
RL_ASSERT
(
°©e
[1]);

160 
	g°©e
[1] = 
Ál£
;

162 
	gôem
 = 0;

163 
	gªs
 = 
q
.
p›
(
ôem
);

164 i‡(
	gªs
)

166 
RL_ASSERT
(
°©e
[0]);

167 
	g°©e
[0] = 
Ál£
;

170 
	gôem
 = 0;

171 
	gªs
 = 
q
.
p›
(
ôem
);

172 
RL_ASSERT
(
ªs
 =
Ál£
);

176 
	gôem
 = 0;

177 
boﬁ
 
	gªs
 = 
q
.
°ól
(
ôem
);

178 i‡(
	gªs
)

180 
RL_ASSERT
(
ôem
 == 1);

181 
RL_ASSERT
(
°©e
[0]);

182 
	g°©e
[0] = 
Ál£
;

191 
	$maö
()

193 
æ
::
simuœã
<
ws_deque_ã°
>();

194 
	}
}

	@viper/concurrentqueue-src/tests/relacy/relacy/example/cli_ws_deque/stdafx.cpp

1 
	~"°dafx.h
"

	@viper/concurrentqueue-src/tests/relacy/relacy/example/cli_ws_deque/stdafx.h

1 #¥agm®
⁄˚


4 
	~"../../ªœcy/pch.hµ
"

	@viper/concurrentqueue-src/tests/relacy/relacy/example/condvar/condvar.cpp

1 
	~"°dafx.h
"

2 
	~"../../ªœcy/ªœcy_°d.hµ
"

6 ˛as†
	cC⁄dV¨


8 
	mpublic
:

9 
C⁄dV¨
();

10 ~
C⁄dV¨
();

11 
E¡î
();

12 
Waô
();

13 
Rñó£
();

14 
Rñó£AŒ
();

15 
Lóve
();

17 
	m¥iv©e
:

18 
°d
::
©omic
<> 
m_lMuãx
;

19 
	m°d
::
©omic
<> 
m_dwWaôögF‹Sig«l
;

20 
HANDLE
 
	mm_xhEvtE¡î
;

21 
HANDLE
 
	mm_xhSemRñó£
;

24 
	gC⁄dV¨
::
	$C⁄dV¨
()

25 : 
	`m_xhEvtE¡î
(
	`Cª©eEvít
(0, 0, 0, 0))

26 , 
	`m_xhSemRñó£
(
	$Cª©eSem≠h‹e
(0, 0, 0x7FFFFFFF, 0))

28 
m_lMuãx
.
	`°‹e
(0, 
°d
::
mem‹y_‹dî_ªœxed
);

29 
m_dwWaôögF‹Sig«l
.
	`°‹e
(0, 
°d
::
mem‹y_‹dî_ªœxed
);

30 
	}
}

32 
	gC⁄dV¨
::~
	$C⁄dV¨
()

34 
	`Clo£H™dÀ
(
m_xhEvtE¡î
);

35 
	`Clo£H™dÀ
(
m_xhSemRñó£
);

36 
	}
}

38 
	gC⁄dV¨
::
	$E¡î
()

40 
lMuãx
 = 
m_lMuãx
.
	`lﬂd
(
°d
::
mem‹y_‹dî_£q_c°
);

43 if–
lMuãx
 >= 0 )

45 i‡(
m_lMuãx
.
	`com∑ª_exch™ge_wók
(
lMuãx
,ÜMuãx | 0x80000000u, 
°d
::
mem‹y_‹dî_£q_c°
))

50 i‡(
Ál£
 =
m_lMuãx
.
	`com∑ª_exch™ge_wók
(
lMuãx
,ÜMuãx + 1, 
°d
::
mem‹y_‹dî_£q_c°
))

52 
	`WaôF‹SögÀObje˘
(
m_xhEvtE¡î
, 
INFINITE
);

53 
	`RL_ASSERT
(
m_lMuãx
.
	`lﬂd
(
°d
::
mem‹y_‹dî_£q_c°
) < 0);

57 
	}
}

59 
	gC⁄dV¨
::
	$Waô
()

61 
dwWaôögF‹Sig«l
 = 
m_dwWaôögF‹Sig«l
.
	`lﬂd
(
°d
::
mem‹y_‹dî_£q_c°
);

62 
m_dwWaôögF‹Sig«l
.
	`°‹e
(
dwWaôögF‹Sig«l
 + 1, 
°d
::
mem‹y_‹dî_£q_c°
);

63 
	`RL_ASSERT
(
m_lMuãx
.
	`lﬂd
(
°d
::
mem‹y_‹dî_£q_c°
) < 0);

65 
lMuãx
 = 
m_lMuãx
.
	`lﬂd
(
°d
::
mem‹y_‹dî_£q_c°
);

68 
dwWaôögToOwn
 = 
lMuãx
 & 0x7FFFFFFFu;

69 
	`RL_ASSERT
(
dwWaôögToOwn
 >
dwWaôögF‹Sig«l
);

70 i‡(
dwWaôögToOwn
 =
dwWaôögF‹Sig«l
)

72 i‡(
m_lMuãx
.
	`com∑ª_exch™ge_wók
(
lMuãx
, 
dwWaôögToOwn
 + 1, 
°d
::
mem‹y_‹dî_£q_c°
))

77 
	`SëEvít
(
m_xhEvtE¡î
);

82 
	`WaôF‹SögÀObje˘
(
m_xhSemRñó£
, 
INFINITE
);

83 
	`WaôF‹SögÀObje˘
(
m_xhEvtE¡î
, 
INFINITE
);

85 
	`RL_ASSERT
(
m_lMuãx
.
	`lﬂd
(
°d
::
mem‹y_‹dî_£q_c°
) < 0);

86 
	}
}

88 
	gC⁄dV¨
::
	$Rñó£
()

90 
	`RL_ASSERT
(
m_lMuãx
.
	`lﬂd
(
°d
::
mem‹y_‹dî_£q_c°
) < 0);

91 
dwWaôögF‹Sig«l
 = 
m_dwWaôögF‹Sig«l
.
	`lﬂd
(
°d
::
mem‹y_‹dî_£q_c°
);

92 i‡(
dwWaôögF‹Sig«l
 != 0)

94 
m_dwWaôögF‹Sig«l
.
	`°‹e
(
dwWaôögF‹Sig«l
 - 1, 
°d
::
mem‹y_‹dî_£q_c°
);

95 
	`Rñó£Sem≠h‹e
(
m_xhSemRñó£
, 1, 0);

97 
	}
}

99 
	gC⁄dV¨
::
	$Rñó£AŒ
()

101 
	`RL_ASSERT
(
m_lMuãx
.
	`lﬂd
(
°d
::
mem‹y_‹dî_£q_c°
) < 0);

102 
dwWaôögF‹Sig«l
 = 
m_dwWaôögF‹Sig«l
.
	`lﬂd
(
°d
::
mem‹y_‹dî_£q_c°
);

103 i‡(
dwWaôögF‹Sig«l
 != 0)

105 
m_dwWaôögF‹Sig«l
.
	`°‹e
(0, 
°d
::
mem‹y_‹dî_£q_c°
);

106 
	`Rñó£Sem≠h‹e
(
m_xhSemRñó£
, 
dwWaôögF‹Sig«l
, 0);

108 
	}
}

110 
	gC⁄dV¨
::
	$Lóve
()

112 
lMuãx
 = 
m_lMuãx
.
	`lﬂd
(
°d
::
mem‹y_‹dî_£q_c°
);

113 
	`RL_ASSERT
(
lMuãx
 < 0);

116 
dwWaôögToOwn
 = 
lMuãx
 & 0x7FFFFFFFu;

117 
dwWaôögF‹Sig«l
 = 
m_dwWaôögF‹Sig«l
.
	`lﬂd
(
°d
::
mem‹y_‹dî_£q_c°
);

118 
	`RL_ASSERT
(
dwWaôögToOwn
 >
dwWaôögF‹Sig«l
);

119 i‡(
dwWaôögToOwn
 =
dwWaôögF‹Sig«l
)

121 i‡(
m_lMuãx
.
	`com∑ª_exch™ge_wók
(
lMuãx
,ÜMuãx & 0x7FFFFFFF, 
°d
::
mem‹y_‹dî_£q_c°
))

126 i‡(
Ál£
 =
m_lMuãx
.
	`com∑ª_exch™ge_wók
(
lMuãx
,ÜMuãx - 1, 
°d
::
mem‹y_‹dî_£q_c°
))

128 
	`SëEvít
(
m_xhEvtE¡î
);

132 
	}
}

134 
	gC⁄dV¨Te°
 : 
æ
::
ã°_suôe
<
C⁄dV¨Te°
, 3>

136 
VAR_T
(Ë
	g°age
;

137 
C⁄dV¨
 
	gcv
;

139 
bef‹e
()

141 
VAR
(
°age
) = 0;

144 
thªad
(
ödex
)

146 i‡(0 =
ödex
)

148 
cv
.
E¡î
();

149 
VAR
(
°age
) += 1;

150 
	gcv
.
Rñó£AŒ
();

151 
VAR
(
°age
) != 2)

152 
cv
.
Waô
();

153 
	gcv
.
Lóve
();

155 i‡(1 =
ödex
)

157 
cv
.
E¡î
();

158 
VAR
(
°age
) != 1)

159 
cv
.
Waô
();

160 
VAR
(
°age
) += 1;

161 
	gcv
.
Rñó£AŒ
();

162 
	gcv
.
Lóve
();

164 i‡(2 =
ödex
)

166 
cv
.
E¡î
();

167 
VAR
(
°age
) != 2)

168 
cv
.
Waô
();

169 
	gcv
.
Lóve
();

177 
	$maö
()

179 
æ
::
simuœã
<
C⁄dV¨Te°
>();

180 
	}
}

	@viper/concurrentqueue-src/tests/relacy/relacy/example/condvar/stdafx.cpp

1 
	~"°dafx.h
"

	@viper/concurrentqueue-src/tests/relacy/relacy/example/condvar/stdafx.h

1 #¥agm®
⁄˚


3 #ifde‡
NDEBUG


4 
	#_SECURE_SCL
 0

	)

7 
	#RL_MSVC_OUTPUT


	)

10 
	~"../../ªœcy/pch.hµ
"

11 
	~"../../ªœcy/ªœcy_°d.hµ
"

	@viper/concurrentqueue-src/tests/relacy/relacy/example/eao_blocking/eao_blocking.cpp

	@viper/concurrentqueue-src/tests/relacy/relacy/example/eventcount/eventcount.cpp

1 
	~"°dafx.h
"

3 
	~"../../ªœcy/wödows.h
"

5 
	#HANDLE
 
æ
::
HANDLE


	)

7 
	#Cª©eSem≠h‹eA
 
æ
::
	`RL_Cª©eSem≠h‹e
(
$
)

	)

8 
	#Cª©eSem≠h‹eW
 
æ
::
	`RL_Cª©eSem≠h‹e
(
$
)

	)

9 #i‚de‡
Cª©eSem≠h‹e


10 
	#Cª©eSem≠h‹e
 
Cª©eSem≠h‹eW


	)

14 
	#Clo£H™dÀ
 
æ
::
	`RL_Clo£H™dÀ
(
$
)

	)

17 
	~<°ddef.h
>

20 #i‡
deföed
(
WIN32
Ë&& deföed(
_MSC_VER
)

22 
	~<wödows.h
>

23 
	~<öåö.h
>

25 ˛as†
	c£m≠h‹e


27 
	mpublic
:

28 
	$£m≠h‹e
()

30 
h_
 = 
	`Cª©eSem≠h‹e
(0, 0, 
LONG_MAX
, 0);

33 ~
	$£m≠h‹e
()

35 
	`Clo£H™dÀ
(
h_
);

36 
	}
}

38 
	$waô
()

40 
	`WaôF‹SögÀObje˘
(
h_
, 
INFINITE
);

41 
	}
}

43 
	$po°
()

45 
	`Rñó£Sem≠h‹e
(
h_
, 1, 0);

46 
	}
}

48 
	g¥iv©e
:

49 
HANDLE
 
h_
;

51 
£m≠h‹e
(semaphore const&);

52 
	g£m≠h‹e
& 
	g›î©‹
 = (
£m≠h‹e
 const&);

55 ˛as†
	cmuãx


57 
	mpublic
:

58 
	$muãx
()

60 
	`InôülizeCrôiˇlSe˘i⁄
(&
cs_
);

63 ~
	$muãx
()

65 
	`DñëeCrôiˇlSe˘i⁄
(&
cs_
);

66 
	}
}

68 
	$lock
()

70 
	`E¡îCrôiˇlSe˘i⁄
(&
cs_
);

71 
	}
}

73 
	$u∆ock
()

75 
	`LóveCrôiˇlSe˘i⁄
(&
cs_
);

76 
	}
}

78 
	g¥iv©e
:

79 
CRITICAL_SECTION
 
cs_
;

81 
muãx
(mutex const&);

82 
	gmuãx
& 
	g›î©‹
 = (
muãx
 const&);

85 
	$fuŒ_mem‹y_„n˚
()

87 
	`_mm_m„n˚
();

88 
	}
}

90 
	#THREAD_LOCAL
 
	`__de˛•ec
(
thªad
)

	)

92 #ñi‡
deföed
(
POSIX
Ë&& deföed(
GCC
)

94 
	~<±hªad.h
>

95 
	~<£m≠h‹e.h
>

97 ˛as†
	c£m≠h‹e


99 
	mpublic
:

100 
	$£m≠h‹e
()

102 
	`£m_öô
(&
£m_
, 0, 0);

105 ~
	$£m≠h‹e
()

107 
	`£m_de°roy
(&
£m_
);

108 
	}
}

110 
	$waô
()

112 
	`£m_waô
(&
£m_
);

113 
	}
}

115 
	$po°
()

117 
	`£m_po°
(&
£m_
);

118 
	}
}

120 
	g¥iv©e
:

121 
£m_t
 
£m_
;

123 
£m≠h‹e
(semaphore const&);

124 
	g£m≠h‹e
& 
	g›î©‹
 = (
£m≠h‹e
 const&);

127 ˛as†
	cmuãx


129 
	mpublic
:

130 
	$muãx
()

132 
	`±hªad_muãx_öô
(&
muãx_
, 0);

135 ~
	$muãx
()

137 
	`±hªad_muãx_de°roy
(&
muãx_
);

138 
	}
}

140 
	$lock
()

142 
	`±hªad_muãx_lock
(&
muãx_
);

143 
	}
}

145 
	$u∆ock
()

147 
	`±hªad_muãx_u∆ock
(&
muãx_
);

148 
	}
}

150 
	g¥iv©e
:

151 
±hªad_muãx_t
 
muãx_
;

153 
muãx
(mutex const&);

154 
	gmuãx
& 
	g›î©‹
 = (
muãx
 const&);

157 
	$fuŒ_mem‹y_„n˚
()

159 
	`__sync_synchr⁄ize
();

160 
	}
}

162 
	#THREAD_LOCAL
 
__thªad


	)

168 ˛as†
	clock


170 
	mpublic
:

171 
	$lock
(
muãx
& 
m
)

172 : 
	$m_
(
m
)

174 
m
.
	`lock
();

177 ~
	$lock
()

179 
m_
.
	`u∆ock
();

180 
	}
}

182 
	g¥iv©e
:

183 
muãx
& 
m_
;

185 
lock
(lock const&);

186 
	glock
& 
	g›î©‹
 = (
lock
 const&);

195 ˛as†
	cdli°


197 
	mpublic
:

198 
	snode


200 
node
* 
¥ev_
;

201 
node
* 
	m√xt_
;

203 
node
()

205 
	m¥ev_
 = 0;

206 
	m√xt_
 = 0;

210 
	$dli°
()

212 
	`ª£t
();

213 
	}
}

215 
	$push
(
node
* 
n
)

217 
size_
 += 1;

218 
n
->
√xt_
 = 
hód_
.next_;

219 
n
->
¥ev_
 = &
hód_
;

220 
hód_
.
√xt_
->
¥ev_
 = 
n
;

221 
hód_
.
√xt_
 = 
n
;

222 
	}
}

224 
node
* 
	$p›
()

226 i‡(
size_
 == 0)

228 
node
* 
n
 = 
hód_
.
√xt_
;

229 
	`ªmove
(
n
);

230  
n
;

231 
	}
}

233 
	$ªmove
(
node
* 
n
)

235 
size_
 -= 1;

236 
n
->
¥ev_
->
√xt_
 =Ç->next_;

237 
n
->
√xt_
->
¥ev_
 =Ç->prev_;

238 
	}
}

240 
size_t
 
	$size
() const

242  
size_
;

243 
	}
}

245 
node
* 
	$begö
()

247  
hód_
.
√xt_
;

248 
	}
}

250 
	$Êush_to
(
dli°
& 
èrgë
)

252 i‡(
size_
)

254 
èrgë
.
size_
 = size_;

255 
èrgë
.
hód_
.
√xt_
 = head_.next_;

256 
èrgë
.
hód_
.
√xt_
->
¥ev_
 = &target.head_;

257 
èrgë
.
èû_
.
¥ev_
 =Åail_.prev_;

258 
èrgë
.
èû_
.
¥ev_
->
√xt_
 = &target.tail_;

262 
èrgë
.
	`ª£t
();

264 
	`ª£t
();

265 
	}
}

267 
boﬁ
 
	$nŸ_œ°
(
node
* 
n
)

269  
n
->
√xt_
 != 0;

270 
	}
}

272 
node
* 
	$gë_√xt
(
node
* 
n
)

274  
n
->
√xt_
;

275 
	}
}

277 
	g¥iv©e
:

278 
size_t
 vﬁ©ûê
size_
;

279 
node
 
	ghód_
;

280 
node
 
	gèû_
;

282 
	$ª£t
()

284 
size_
 = 0;

285 
hód_
.
√xt_
 = &
èû_
;

286 
hód_
.
¥ev_
 = 0;

287 
èû_
.
√xt_
 = 0;

288 
èû_
.
¥ev_
 = &
hód_
;

289 
	}
}

291 
dli°
(dlist const&);

292 
	gdli°
& 
	g›î©‹
 = (
dli°
 const&);

299 
	sec_thªad


301 
	mdli°
::
node
 
node_
;

302 
£m≠h‹e
 
	m£ma_
;

303 
	mïoch_
;

304 
boﬁ
 vﬁ©ûê
	mö_waô£t_
;

305 
boﬁ
 
	m•urious_
;

306 * 
	m˘x_
;

308 
ec_thªad
()

310 
	mïoch_
 = 0;

311 
	mö_waô£t_
 = 
Ál£
;

312 
	m•urious_
 = 
Ál£
;

313 
	m˘x_
 = 0;

316 ~
ec_thªad
()

318 i‡(
	m•urious_
)

319 
	m£ma_
.
waô
();

322 
ec_thªad
* 
cuºít
()

324 
THREAD_LOCAL
 
ec_thªad
* 
	mec_thªad_ö°™˚
 = 0;

325 
ec_thªad
* 
	mö°™˚
 = 
ec_thªad_ö°™˚
;

326 i‡(
	mö°™˚
 == 0)

328 
ö°™˚
 = 
√w
 
ec_thªad
;

329 
	mec_thªad_ö°™˚
 = 
ö°™˚
;

331  
	mö°™˚
;

336 
	m¥iv©e
:

337 
ec_thªad
(ec_thread const&);

338 
	mec_thªad
& 
	m›î©‹
 = (
ec_thªad
 const&);

345 ˛as†
	cevítcou¡


347 
	mpublic
:

348 
	$evítcou¡
()

350 
ïoch_
 = 0;

353 
	$¥ï¨e_waô
(* 
˘x
 = 0)

355 
ec_thªad
* 
th
 =Éc_thªad::
	`cuºít
();

357 i‡(
th
->
•urious_
)

359 
th
->
•urious_
 = 
Ál£
;

360 
th
->
£ma_
.
	`waô
();

362 
th
->
ö_waô£t_
 = 
åue
;

363 
th
->
˘x_
 = 
˘x
;

365 
lock
 
	`l
 (
mtx_
);

366 
th
->
ïoch_
 =Époch_;

367 
waô£t_
.
	`push
(&
th
->
node_
);

369 
	`fuŒ_mem‹y_„n˚
();

370 
	}
}

372 
	$waô
()

374 
ec_thªad
* 
th
 =Éc_thªad::
	`cuºít
();

376 i‡(
th
->
ïoch_
 ==Époch_)

377 
th
->
£ma_
.
	`waô
();

379 
	`ªtúe_waô
();

380 
	}
}

382 
	$ªtúe_waô
()

384 
ec_thªad
* 
th
 =Éc_thªad::
	`cuºít
();

386 
th
->
•urious_
 = 
åue
;

388 i‡(
th
->
ö_waô£t_
)

390 
lock
 
	`l
 (
mtx_
);

391 i‡(
th
->
ö_waô£t_
)

395 
th
->
ö_waô£t_
 = 
Ál£
;

396 
th
->
•urious_
 = 
Ál£
;

397 
waô£t_
.
	`ªmove
(&
th
->
node_
);

400 
	}
}

402 
	$nŸify_⁄e
()

404 
	`fuŒ_mem‹y_„n˚
();

405 
	`nŸify_⁄e_ªœxed
();

406 
	}
}

408 
	gãm∂©e
<
ty≥«me
 
	g¥ediˇã_t
>

409 
	$nŸify
(
¥ediˇã_t
 
¥ed
)

411 
	`fuŒ_mem‹y_„n˚
();

412 
	`nŸify_ªœxed
(
¥ed
);

413 
	}
}

415 
	$nŸify_Æl
()

417 
	`fuŒ_mem‹y_„n˚
();

418 
	`nŸify_Æl_ªœxed
();

419 
	}
}

421 
	$nŸify_⁄e_ªœxed
()

423 i‡(
waô£t_
.
	`size
() == 0)

425 
dli°
::
node
* 
n
;

427 
lock
 
	`l
 (
mtx_
);

428 
ïoch_
 += 1;

429 
n
 = 
waô£t_
.
	`p›
();

430 i‡(
n
)

431 
	`to_ec_thªad
(
n
)->
ö_waô£t_
 = 
Ál£
;

433 i‡(
n
)

435 
	`to_ec_thªad
(
n
)->
£ma_
.
	`po°
();

437 
	}
}

439 
	gãm∂©e
<
ty≥«me
 
	g¥ediˇã_t
>

440 
	$nŸify_ªœxed
(
¥ediˇã_t
 
¥ed
)

442 i‡(
waô£t_
.
	`size
() == 0)

444 
dli°
 
ãmp
;

446 
lock
 
	`l
 (
mtx_
);

447 
ïoch_
 += 1;

448 
size_t
 
size
 = 
waô£t_
.
	`size
();

449 
size_t
 
idx
 = 0;

450 
dli°
::
node
* 
n
 = 
waô£t_
.
	`begö
();

451 
dli°
::
	`nŸ_œ°
(
n
))

453 
dli°
::
node
* 
√xt
 = dli°::
	`gë_√xt
(
n
);

454 
ec_thªad
* 
th
 = 
	`to_ec_thªad
(
n
);

455 i‡(
	`¥ed
(
th
->
˘x_
, 
size
, 
idx
))

457 
waô£t_
.
	`ªmove
(
n
);

458 
ãmp
.
	`push
(
n
);

459 
th
->
ö_waô£t_
 = 
Ál£
;

461 
n
 = 
√xt
;

462 
idx
 += 1;

465 
dli°
::
node
* 
n
 = 
ãmp
.
	`begö
();

466 
dli°
::
	`nŸ_œ°
(
n
))

468 
dli°
::
node
* 
√xt
 = dli°::
	`gë_√xt
(
n
);

469 
	`to_ec_thªad
(
n
)->
£ma_
.
	`po°
();

470 
n
 = 
√xt
;

472 
	}
}

474 
	$nŸify_Æl_ªœxed
()

476 i‡(
waô£t_
.
	`size
() == 0)

478 
dli°
 
ãmp
;

480 
lock
 
	`l
 (
mtx_
);

481 
ïoch_
 += 1;

482 
waô£t_
.
	`Êush_to
(
ãmp
);

483 
dli°
::
node
* 
n
 = 
ãmp
.
	`begö
();

484 
dli°
::
	`nŸ_œ°
(
n
))

486 
	`to_ec_thªad
(
n
)->
ö_waô£t_
 = 
Ál£
;

487 
n
 = 
dli°
::
	`gë_√xt
(n);

490 
dli°
::
node
* 
n
 = 
ãmp
.
	`begö
();

491 
dli°
::
	`nŸ_œ°
(
n
))

493 
dli°
::
node
* 
√xt
 = dli°::
	`gë_√xt
(
n
);

494 
	`to_ec_thªad
(
n
)->
£ma_
.
	`po°
();

495 
n
 = 
√xt
;

497 
	}
}

499 
	g¥iv©e
:

500 
muãx
 
mtx_
;

501 
dli°
 
	gwaô£t_
;

502 vﬁ©ûê
	gïoch_
;

504 
ec_thªad
* 
	$to_ec_thªad
(
dli°
::
node
* 
n
)

506  (
ec_thªad
*)((*)
n
 - 
	`off£tof
”c_thªad, 
node_
));

507 
	}
}

509 
evítcou¡
(eventcount const&);

510 
	gevítcou¡
& 
	g›î©‹
 = (
evítcou¡
 const&);

517 
	sscheduÀr


519 
	stbb_thªad
 {};

521 
evítcou¡
 
	mec_
;

522 
tbb_thªad
* 
	mthªads_
;

523 
boﬁ
 vﬁ©ûê
	mis_≥rm™íéy_›í_
;

525 
waô_whûe_poﬁ_is_em±y
(
tbb_thªad
* 
th
)

527 i‡(
	mis_≥rm™íéy_›í_
)

529 
	mec_
.
¥ï¨e_waô
(
th
);

530 i‡(
poﬁ_is_em±y
())

531 
	mec_
.
waô
();

533 
	mec_
.
ªtúe_waô
();

536 
nŸify_about_√w_èsk_avaûabÀ
()

538 
	mec_
.
nŸify_⁄e_ªœxed
();

541 
nŸify_about_√w_èsk_avaûabÀ_wôh_¥e„ªn˚
(
tbb_thªad
* 
¥e„ªn˚
)

543 
	sloˇl


545 
tbb_thªad
* 
	m¥e„ªn˚_
;

546 
boﬁ
 
	mfúed_
;

548 
boﬁ
 
›î©‹
 (Ë(* 
	m˘x
, 
size_t
 
	mcou¡
, size_à
	midx
)

550 
tbb_thªad
* 
	mth
 = (tbb_thªad*)
˘x
;

551 i‡(
	mth
 =
¥e„ªn˚_
)

553 
fúed_
 = 
åue
;

554  
	måue
;

556 i‡(
	midx
 =
cou¡
 - 1 && 
fúed_
 =
Ál£
)

558  
åue
;

562  
	mÁl£
;

566 
	m¥ed
 = {
¥e„ªn˚
};

567 
	mec_
.
nŸify_ªœxed
(
¥ed
);

570 
nŸify_about_li°_of_èsks_avaûabÀ
(
size_t
 
tŸÆ_cou¡
, size_à
¥e„ªn˚_cou¡
, 
tbb_thªad
** 
¥e„ªn˚s
)

572 
	sloˇl


574 
size_t
 
	mªmaö_to_sig«l_
;

575 
size_t
 
	m¥e„ªn˚_cou¡_
;

576 
tbb_thªad
** 
	m¥e„ªn˚s_
;

578 
boﬁ
 
›î©‹
 (Ë(* 
	m˘x
, 
size_t
 
	mcou¡
, size_à
	midx
)

580 
tbb_thªad
* 
	mth
 = (tbb_thªad*)
˘x
;

581 
size_t
 
	mªmaö_ö_waô£t
 = 
cou¡
 - 
idx
;

582 i‡(
	mªmaö_ö_waô£t
 <
ªmaö_to_sig«l_
)

584  
åue
;

588 
size_t
 
	mi
 = 0; i !
¥e„ªn˚_cou¡_
; ++i)

590 i‡(
	m¥e„ªn˚s_
[
i
] =
th
)

592 
ªmaö_to_sig«l_
 -= 1;

593  
	måue
;

597  
	mÁl£
;

600 
	m¥ed
 = {
tŸÆ_cou¡
, 
¥e„ªn˚_cou¡
, 
¥e„ªn˚s
};

601 
	mec_
.
nŸify_ªœxed
(
¥ed
);

604 
boﬁ
 
poﬁ_is_em±y
()

606  
	måue
;

612 
	squeue


614 
	m¥odu˚r_idx_
;

615 
	mc⁄sumî_idx_
;

617 ** 
	mbuf„r_
;

619 
evítcou¡
 
	mec_
;

621 
íqueue
(* 
d©a
)

623 
	midx
 = ++
¥odu˚r_idx_
;

624 
	mbuf„r_
[
idx
] = 
d©a
;

626 
	sloˇl


628 
	midx_
;

629 
boﬁ
 
›î©‹
 (Ë(* 
	m˘x
, 
	msize_t
 , size_t )

631  
	midx_
 =*(*)
˘x
;

634 
	m¥ed
 = {
idx
};

635 
	mec_
.
nŸify
(
¥ed
);

638 * 
dequeue
()

640 
	midx
 = ++
c⁄sumî_idx_
;

641 * 
	md©a
 = 
buf„r_
[
idx
];

642 i‡(
	md©a
)

643  
	md©a
;

646 
	mec_
.
¥ï¨e_waô
(&
idx
);

647 
	md©a
 = 
buf„r_
[
idx
];

648 i‡(
	md©a
)

650 
	mec_
.
ªtúe_waô
();

651  
	md©a
;

653 
	mec_
.
waô
();

654 
	md©a
 = 
buf„r_
[
idx
];

655 i‡(
	md©a
)

657  
	md©a
;

665 ˛as†
	cc⁄dôi⁄_v¨übÀ


667 
evítcou¡
 
	mec_
;

669 
	mpublic
:

670 
	$waô
(
muãx
& 
mtx
)

672 
ec_
.
	`¥ï¨e_waô
();

673 
mtx
.
	`u∆ock
();

674 
ec_
.
	`waô
();

675 
mtx
.
	`lock
();

678 
	$sig«l
()

680 
ec_
.
	`nŸify_⁄e
();

681 
	}
}

683 
	$brﬂdˇ°
()

685 
ec_
.
	`nŸify_Æl
();

686 
	}
}

690 
	gevítcou¡_ã°
 : 
æ
::
ã°_suôe
<
evítcou¡_ã°
, 2>

692 
thªad
(
ödex
)

694 
dñëe
 
	gec_thªad
::
cuºít
();

695 ()
	gödex
;

701 
	$maö
()

703 
æ
::
ã°_∑øms
 
p
;

705 
æ
::
simuœã
<
evítcou¡_ã°
>(
p
);

706 
	}
}

	@viper/concurrentqueue-src/tests/relacy/relacy/example/eventcount/stdafx.cpp

5 
	~"°dafx.h
"

	@viper/concurrentqueue-src/tests/relacy/relacy/example/eventcount/stdafx.h

1 #¥agm®
⁄˚


3 
	#_WIN32_WINNT
 0x0500

	)

4 
	~<wödows.h
>

5 
	~<öåö.h
>

6 
	~<°ddef.h
>

8 
	~"../../ªœcy/pch.hµ
"

9 
	~"../../ªœcy/ªœcy_°d.hµ
"

	@viper/concurrentqueue-src/tests/relacy/relacy/example/examples/examples.cpp

1 
	~"°dafx.h
"

2 
	~"•sc_ovîwrôe_queue.hµ
"

3 
	~"amp_c⁄dv¨.hµ
"

6 
	$maö
()

8 
æ
::
ã°_∑øms
 
p
;

9 
p
.
ôî©i⁄_cou¡
 = 10000;

13 
æ
::
execuã
<
•sc_ovîwrôe_queue_ã°
, 2>(
p
);

14 
æ
::
simuœã
<
amp_c⁄dv¨_ã°
>(
p
);

15 
æ
::
simuœã
<
amp_c⁄dv¨_ã°2
>(
p
);

16 
	}
}

	@viper/concurrentqueue-src/tests/relacy/relacy/example/examples/stdafx.cpp

1 
	~"°dafx.h
"

	@viper/concurrentqueue-src/tests/relacy/relacy/example/examples/stdafx.h

1 #¥agm®
⁄˚


3 #ifde‡
NDEBUG


4 
	#_SECURE_SCL
 0

	)

7 
	#RL_FORCE_SEQ_CST


	)

8 
	#RL_MSVC_OUTPUT


	)

11 
	~"../../ªœcy/pch.hµ
"

12 
	~"../../ªœcy/ªœcy_°d.hµ
"

13 
	~"../../ªœcy/°dlib/wödows.hµ
"

	@viper/concurrentqueue-src/tests/relacy/relacy/example/java_ws_deque/java_ws_deque.cpp

1 
	~"°dafx.h
"

2 
	~"../../ªœcy/ªœcy_java.hµ
"

5 
usög
 
	gæ
::
jv¨
;

6 
usög
 
	gæ
::
jvﬁ©ûe
;

7 
usög
 
	gæ
::
muãx
;

12 
	gãm∂©e
<
ty≥«me
 
	gT
>

13 ˛as†
	cws_deque


15 
	mpublic
:

16 
	$ws_deque
()

18 
	`m_mask
(
$
Ë
öôül_size
 - 1;

19 
	`m_hódIndex
(
$
) = 0;

20 
	`m_èûIndex
(
$
) = 0;

21 
	`m_¨øy
(
$
Ë
√w
 
jv¨
<
T
> [
öôül_size
];

22 
	`m_¨øySize
(
$
Ë
öôül_size
;

25 
boﬁ
 
	$IsEm±y
()

27  
	`m_hódIndex
(
$
Ë>
	`m_èûIndex
($);

28 
	}
}

30 
size_t
 
	$Cou¡
()

32  
	`m_èûIndex
(
$
Ë- 
	`m_hódIndex
($);

33 
	}
}

35 
	$push
(
T
 
ôem
)

37 
size_t
 
èû
 = 
	`m_èûIndex
(
$
);

38 i‡(
èû
 <
	`m_hódIndex
(
$
Ë+ 
	`m_mask
($))

40 
	`m_¨øy
(
$
)[
èû
 & 
	`m_mask
($)]($Ë
ôem
;

41 
	`m_èûIndex
(
$
Ë
èû
 + 1;

45 
m_f‹eignLock
.
	`lock
(
$
);

46 
size_t
 
hód
 = 
	`m_hódIndex
(
$
);

47 
size_t
 
cou¡
 = 
	`Cou¡
();

48 i‡(
cou¡
 >
	`m_mask
(
$
))

50 
size_t
 
¨øySize
 = 
	`m_¨øySize
(
$
);

51 
size_t
 
mask
 = 
	`m_mask
(
$
);

52 
jv¨
<
T
>* 
√wAºay
 = 
√w
 jv¨<T> [
¨øySize
 * 2];

53 
jv¨
<
T
>* 
¨r
 = 
	`m_¨øy
(
$
);

54 
size_t
 
i
 = 0; i !
cou¡
; ++i)

55 
√wAºay
[
i
](
$
Ë
¨r
[(ò+ 
hód
Ë& 
mask
]($);

56 
	`m_¨øy
(
$
Ë
√wAºay
;

57 
	`m_¨øySize
(
$
Ë
¨øySize
 * 2;

58 
	`m_hódIndex
(
$
) = 0;

59 
	`m_èûIndex
(
$
Ë
cou¡
;

60 
èû
 = 
cou¡
;

61 
	`m_mask
(
$
Ë(
mask
 * 2) | 1;

63 
	`m_¨øy
(
$
)[
èû
 & 
	`m_mask
($)]($Ë
ôem
;

64 
	`m_èûIndex
(
$
Ë
èû
 + 1;

65 
m_f‹eignLock
.
	`u∆ock
(
$
);

67 
	}
}

69 
boﬁ
 
	$p›
(
T
& 
ôem
)

71 
size_t
 
èû
 = 
	`m_èûIndex
(
$
);

72 i‡(
èû
 == 0)

73  
Ál£
;

74 
èû
 -= 1;

75 
	`m_èûIndex
(
$
Ë
èû
;

76 i‡(
	`m_hódIndex
(
$
Ë<
èû
)

78 
ôem
 = 
	`m_¨øy
(
$
)[
èû
 & 
	`m_mask
($)]($);

79  
åue
;

83 
m_f‹eignLock
.
	`lock
(
$
);

84 i‡(
	`m_hódIndex
(
$
Ë<
èû
)

86 
ôem
 = 
	`m_¨øy
(
$
)[
èû
 & 
	`m_mask
($)]($);

87 
m_f‹eignLock
.
	`u∆ock
(
$
);

88  
åue
;

92 
	`m_èûIndex
(
$
Ë
èû
 + 1;

93 
m_f‹eignLock
.
	`u∆ock
(
$
);

94  
Ál£
;

97 
	}
}

99 
boﬁ
 
	$°ól
(
T
& 
ôem
)

101 i‡(
Ál£
 =
m_f‹eignLock
.
	`åy_lock
(
$
))

102  
Ál£
;

103 
size_t
 
hód
 = 
	`m_hódIndex
(
$
);

104 
	`m_hódIndex
(
$
Ë
hód
 + 1;

105 i‡(
hód
 < 
	`m_èûIndex
(
$
))

107 
ôem
 = 
	`m_¨øy
(
$
)[
hód
 & 
	`m_mask
($)]($);

108 
m_f‹eignLock
.
	`u∆ock
(
$
);

109  
åue
;

113 
	`m_hódIndex
(
$
Ë
hód
;

114 
m_f‹eignLock
.
	`u∆ock
(
$
);

115  
Ál£
;

117 
	}
}

119 
	g¥iv©e
:

120 
size_t
 c⁄° 
öôül_size
 = 2;

121 
	gjv¨
<jv¨<
	gT
>*> 
	gm_¨øy
;

122 
	gjv¨
<
	gsize_t
> 
	gm_mask
;

123 
	gjv¨
<
	gsize_t
> 
	gm_¨øySize
;

124 
	gjvﬁ©ûe
<
	gsize_t
> 
	gm_hódIndex
;

125 
	gjvﬁ©ûe
<
	gsize_t
> 
	gm_èûIndex
;

126 
muãx
 
	gm_f‹eignLock
;

132 
	gws_deque_ã°
 : 
æ
::
ã°_suôe
<
ws_deque_ã°
, 2>

134 
	gws_deque
<> 
	gq
;

135 
boﬁ
 
	g°©e
 [2];

137 
bef‹e
()

139 
	g°©e
[0] = 
åue
;

140 
	g°©e
[1] = 
åue
;

143 
a·î
()

145 
RL_ASSERT
(
°©e
[0] =
Ál£
);

146 
RL_ASSERT
(
°©e
[1] =
Ál£
);

149 
thªad
(
ödex
)

151 i‡(0 =
ödex
)

153 
q
.
push
(1);

154 
	gq
.
push
(2);

156 
	gôem
 = 0;

157 
boﬁ
 
	gªs
 = 
q
.
p›
(
ôem
);

158 
RL_ASSERT
(
ªs
 && 
ôem
 == 2);

159 
RL_ASSERT
(
°©e
[1]);

160 
	g°©e
[1] = 
Ál£
;

162 
	gôem
 = 0;

163 
	gªs
 = 
q
.
p›
(
ôem
);

164 i‡(
	gªs
)

166 
RL_ASSERT
(
°©e
[0]);

167 
	g°©e
[0] = 
Ál£
;

170 
	gôem
 = 0;

171 
	gªs
 = 
q
.
p›
(
ôem
);

172 
RL_ASSERT
(
ªs
 =
Ál£
);

176 
	gôem
 = 0;

177 
boﬁ
 
	gªs
 = 
q
.
°ól
(
ôem
);

178 i‡(
	gªs
)

180 
RL_ASSERT
(
ôem
 == 1);

181 
RL_ASSERT
(
°©e
[0]);

182 
	g°©e
[0] = 
Ál£
;

191 
	$maö
()

193 
æ
::
simuœã
<
ws_deque_ã°
>();

194 
	}
}

	@viper/concurrentqueue-src/tests/relacy/relacy/example/java_ws_deque/stdafx.cpp

1 
	~"°dafx.h
"

	@viper/concurrentqueue-src/tests/relacy/relacy/example/java_ws_deque/stdafx.h

1 #¥agm®
⁄˚


4 
	~"../../ªœcy/pch.hµ
"

	@viper/concurrentqueue-src/tests/relacy/relacy/example/mpmc/mpmc.cpp

1 
	~"°dafx.h
"

4 #ifde‡
RL_TEST


5 
	#ATOMIC
(
x
Ë
æ
::
©omic
<x>

	)

6 
	#VAR
(
x
Ë
æ
::
v¨
<x>

	)

7 
	#ATOMIC_FETCH_ADD
(
x
, 
v
Ë
	`x
(
$
).
	`„tch_add
(v)

	)

8 
	#ATOMIC_COMPARE_EXCHANGE
(
x
, 
c
, 
v
Ë
	`x
(
$
).
	`com∑ª_exch™ge
(c, v)

	)

9 
	#LOAD_ACQ
(
x
Ë
	`x
(
$
).
	`lﬂd
(
æ
::
mem‹y_‹dî_acquúe
)

	)

10 
	#STORE_REL
(
x
, 
v
Ë
	`x
(
$
).
	`°‹e
(v, 
æ
::
mem‹y_‹dî_ªÀa£
)

	)

12 
	#ATOMIC
(
x
Ëx vﬁ©ûe

	)

13 
	#VAR
(
x
Ë
	)
x

14 
	#ATOMIC_FETCH_ADD
(
x
, 
v
Ë
	`_I¡îlockedExch™geAdd
((*)&x, v)

	)

15 
	#ATOMIC_COMPARE_EXCHANGE
(
x
, 
c
, 
v
Ë
	`öãæocked_com∑ª_exch™ge
(x, c, v)

	)

16 
	#LOAD_ACQ
(
x
Ë
	)
x

17 
	#STORE_REL
(
x
, 
v
Ëx = 
	)
v

19 
	gãm∂©e
<
ty≥«me
 
	gT
>

20 
boﬁ
 
	$öãæocked_com∑ª_exch™ge
(
T
& 
x
, T& 
c
, T 
v
)

22 
T
 
c0
 = 
	`_I¡îlockedCom∑ªExch™ge
((*)&
x
), 
v
, 
c
);

23 i‡(
c0
 =
c
)

25  
åue
;

29 
c
 = 
c0
;

30  
Ál£
;

32 
	}
}

218 
	sthªad_node


220 
	mæ
::
v¨
<
thªad_node
*> 
√xt
;

221 
	mæ
::
v¨
<
size_t
> 
cou¡
;

222 
	mæ
::
v¨
<
size_t
> 
unc⁄sumed
;

223 
	mæ
::
HANDLE
 
£ma
;

224 
	mæ
::
CRITICAL_SECTION
 
mtx
;

228 
	$⁄_thªad_exô
(
thªad_node
*& 
t_thªad_node
)

230 
thªad_node
* 
hód
 = 
t_thªad_node
;

231 
thªad_node
* 
my
 = 0;

232 i‡(
hód
)

234 
æ
::
	`E¡îCrôiˇlSe˘i⁄
(&
hód
->
mtx
, 
$
);

235 
°d
::
	`©omic_thªad_„n˚
(
$
)(°d::
mem‹y_‹dî_£q_c°
);

236 i‡(
hód
->
	`√xt
(
$
))

238 
my
 = 
hód
->
	`√xt
(
$
);

239 
hód
->
	`√xt
(
$
Ë(
thªad_node
*)
my
->next($);

243 
my
 = 
hód
;

245 
°d
::
	`©omic_thªad_„n˚
(
$
)(°d::
mem‹y_‹dî_£q_c°
);

246 
æ
::
	`LóveCrôiˇlSe˘i⁄
(&
hód
->
mtx
, 
$
);

248 
my
->
	`unc⁄sumed
(
$
))

250 
æ
::
	`WaôF‹SögÀObje˘
(
my
->
£ma
,Ñl::
RL_INFINITE
, 
$
);

251 
my
->
	`unc⁄sumed
(
$
) -= 1;

254 
æ
::
	`DñëeCrôiˇlSe˘i⁄
(&
my
->
mtx
, 
$
);

255 
æ
::
	`Clo£H™dÀ
(
my
->
£ma
, 
$
);

256 
	`RL_DELETE
(
my
);

259 
	}
}

261 
	sevítcou¡


263 
evítcou¡
()

265 
roŸ
(
$
) = 0;

266 
	mæ
::
InôülizeCrôiˇlSe˘i⁄
(&
mtx
, 
$
);

269 ~
evítcou¡
()

271 
	mæ
::
DñëeCrôiˇlSe˘i⁄
(&
mtx
, 
$
);

274 
¥ï¨e_waô
(
thªad_node
*& 
t_thªad_node
)

276 
thªad_node
* 
	mmy
 = 0;

277 
thªad_node
* 
	mhód
 = 
t_thªad_node
;

278 i‡(
	mhód
)

280 
	mæ
::
E¡îCrôiˇlSe˘i⁄
(&
hód
->
mtx
, 
$
);

281 
	m°d
::
©omic_thªad_„n˚
(
$
)(
°d
::
mem‹y_‹dî_£q_c°
);

283 
RL_ASSERT
 (
roŸ
(
$
Ë!
hód
);

284 i‡(
	mhód
->
√xt
(
$
))

286 
	mmy
 = 
hód
->
√xt
(
$
);

287 
	mhód
->
√xt
(
$
Ë(
thªad_node
*)
my
->next($);

288 
	mmy
->
√xt
(
$
) = 0;

293 
RL_ASSERT
 (0 =
my
->
cou¡
(
$
));

297 
	mmy
 = 
hód
;

302 
RL_ASSERT
(0 =
my
->
cou¡
(
$
));

304 
	m°d
::
©omic_thªad_„n˚
(
$
)(
°d
::
mem‹y_‹dî_£q_c°
);

305 
	mæ
::
LóveCrôiˇlSe˘i⁄
(&
hód
->
mtx
, 
$
);

309 
	mmy
 = 
RL_NEW
 
thªad_node
;

310 
	mmy
->
√xt
(
$
) = 0;

311 
	mmy
->
cou¡
(
$
) = 0;

312 
	mmy
->
unc⁄sumed
(
$
) = 0;

313 
	mmy
->
	m£ma
 = 
æ
::
Cª©eSem≠h‹e
(0, 0, 
LONG_MAX
, 0, 
$
);

315 
	mæ
::
InôülizeCrôiˇlSe˘i⁄
(&
my
->
mtx
, 
$
);

318 
	mmy
->
unc⁄sumed
(
$
))

320 
	mæ
::
WaôF‹SögÀObje˘
(
my
->
£ma
, 
æ
::
RL_INFINITE
, 
$
);

321 
	mmy
->
unc⁄sumed
(
$
) -= 1;

324 
RL_ASSERT
(0 =
my
->
√xt
(
$
));

325 
RL_ASSERT
(0 =
my
->
cou¡
(
$
));

328 
	mæ
::
E¡îCrôiˇlSe˘i⁄
(&
mtx
, 
$
);

329 
	m°d
::
©omic_thªad_„n˚
(
$
)(
°d
::
mem‹y_‹dî_£q_c°
);

330 
RL_ASSERT
(
roŸ
(
$
Ë!
my
);

331 i‡(
roŸ
(
$
))

333 
	mmy
->
√xt
(
$
Ë(
thªad_node
*)(—hªad_node*)
roŸ
($))->next($);

334 ((
	mthªad_node
*)
roŸ
(
$
))->
√xt
($Ë
my
;

340 
	mmy
 = 
roŸ
(
$
);

344 
roŸ
(
$
Ë
my
;

350 ((
	mthªad_node
*)
roŸ
(
$
))->
cou¡
($) += 1;

351 
	m°d
::
©omic_thªad_„n˚
(
$
)(
°d
::
mem‹y_‹dî_£q_c°
);

352 
	mæ
::
LóveCrôiˇlSe˘i⁄
(&
mtx
, 
$
);

353 
	mt_thªad_node
 = 
my
;

356 
waô
(
thªad_node
*& 
t_thªad_node
)

358 
thªad_node
* 
	mhód
 = 
t_thªad_node
;

359 i‡(
	mhód
 =
roŸ
(
$
))

361 
æ
::
WaôF‹SögÀObje˘
(
hód
->
£ma
,Ñl::
RL_INFINITE
, 
$
);

365 
	mæ
::
E¡îCrôiˇlSe˘i⁄
(&
hód
->
mtx
, 
$
);

366 
	m°d
::
©omic_thªad_„n˚
(
$
)(
°d
::
mem‹y_‹dî_£q_c°
);

367 
	mhód
->
unc⁄sumed
(
$
) += 1;

368 
	m°d
::
©omic_thªad_„n˚
(
$
)(
°d
::
mem‹y_‹dî_£q_c°
);

369 
	mæ
::
LóveCrôiˇlSe˘i⁄
(&
hód
->
mtx
, 
$
);

373 
ªtúe_waô
(
thªad_node
*& 
t_thªad_node
)

375 
thªad_node
* 
	mhód
 = 
t_thªad_node
;

376 i‡(
	mhód
 =
roŸ
(
$
))

378 
æ
::
E¡îCrôiˇlSe˘i⁄
(&
mtx
, 
$
);

379 
	m°d
::
©omic_thªad_„n˚
(
$
)(
°d
::
mem‹y_‹dî_£q_c°
);

380 i‡(
	mhód
 =
roŸ
(
$
))

382 
thªad_node
* 
my
 = 0;

383 
	mhód
->
cou¡
(
$
) -= 1;

384 i‡(
	mhód
->
√xt
(
$
))

386 
	mmy
 = 
hód
->
√xt
(
$
);

387 
	mhód
->
√xt
(
$
Ë(
thªad_node
*)
my
->next($);

388 
	mmy
->
√xt
(
$
) = 0;

392 
	mmy
 = 
hód
;

393 
roŸ
(
$
) = 0;

395 
	m°d
::
©omic_thªad_„n˚
(
$
)(
°d
::
mem‹y_‹dî_£q_c°
);

396 
	mæ
::
LóveCrôiˇlSe˘i⁄
(&
mtx
, 
$
);

398 
	mt_thªad_node
 = 
my
;

401 
	m°d
::
©omic_thªad_„n˚
(
$
)(
°d
::
mem‹y_‹dî_£q_c°
);

402 
	mæ
::
LóveCrôiˇlSe˘i⁄
(&
mtx
, 
$
);

404 
	mæ
::
E¡îCrôiˇlSe˘i⁄
(&
hód
->
mtx
, 
$
);

405 
	m°d
::
©omic_thªad_„n˚
(
$
)(
°d
::
mem‹y_‹dî_£q_c°
);

406 
	mhód
->
unc⁄sumed
(
$
) += 1;

407 
	m°d
::
©omic_thªad_„n˚
(
$
)(
°d
::
mem‹y_‹dî_£q_c°
);

408 
	mæ
::
LóveCrôiˇlSe˘i⁄
(&
hód
->
mtx
, 
$
);

411 
sig«l_Æl
()

415 
thªad_node
* 
	mhód
 = 
roŸ
(
$
);

416 i‡(0 =
hód
)

418 
	mæ
::
E¡îCrôiˇlSe˘i⁄
(&
mtx
, 
$
);

419 
	m°d
::
©omic_thªad_„n˚
(
$
)(
°d
::
mem‹y_‹dî_£q_c°
);

420 i‡(
	mhód
 !
roŸ
(
$
))

422 
°d
::
©omic_thªad_„n˚
(
$
)(°d::
mem‹y_‹dî_£q_c°
);

423 
	mæ
::
LóveCrôiˇlSe˘i⁄
(&
mtx
, 
$
);

426 
size_t
 
	mcou¡
 = 
hód
->
cou¡
(
$
);

427 
	mhód
->
cou¡
(
$
) = 0;

428 
roŸ
(
$
) = 0;

429 
	m°d
::
©omic_thªad_„n˚
(
$
)(
°d
::
mem‹y_‹dî_£q_c°
);

430 
	mæ
::
LóveCrôiˇlSe˘i⁄
(&
mtx
, 
$
);

431 
	mæ
::
Rñó£Sem≠h‹e
(
hód
->
£ma
, 
cou¡
, 0, 
$
);

434 
	m°d
::
©omic
<
thªad_node
*> 
roŸ
;

435 
	mæ
::
CRITICAL_SECTION
 
mtx
;

442 
	gã°_ec
 : 
æ
::
ã°_suôe
<
ã°_ec
, 8>

444 
	g°d
::
©omic
<> 
x
 [2];

445 
evítcou¡
 
	gec
;

447 
bef‹e
()

449 
	gx
[0](
	g$
) = 0;

450 
	gx
[1](
	g$
) = 0;

453 
thªad
(
idx
)

455 i‡(
	gidx
 < 4)

457 
	gi
 = 0; i != 3; ++i)

459 
	gx
[
idx
 % 2](
	g$
).
„tch_add
(1);

460 
	gec
.
sig«l_Æl
();

465 
thªad_node
* 
	gmy
 = 0;

466 
	gi
 = 0; i != 3; ++i)

470 
	gcmp
 = 
x
[
idx
 % 2](
$
);

471 i‡(
	gcmp
 > 0)

473 i‡(
	gx
[
idx
 % 2](
	g$
).
com∑ª_exch™ge
(
cmp
, cmp - 1))

480 
	gec
.
¥ï¨e_waô
(
my
);

481 
	gcmp
 = 
x
[
idx
 % 2](
$
);

482 i‡(
	gcmp
 > 0)

484 
	gec
.
ªtúe_waô
(
my
);

487 
	gec
.
waô
(
my
);

488 
	gcmp
 = 
x
[
idx
 % 2](
$
);

489 i‡(
	gcmp
 > 0)

497 
⁄_thªad_exô
(
my
);

504 
	$maö
()

506 
æ
::
ã°_∑øms
 
p
;

507 
p
.
ôî©i⁄_cou¡
 = 20000000;

508 
p
.
öôül_°©e
 = "10000000";

509 
æ
::
simuœã
<
ã°_ec
>(
p
);

510 
	}
}

	@viper/concurrentqueue-src/tests/relacy/relacy/example/mpmc/pcx.h

1 #¥agm®
⁄˚


3 
	~<öåö.h
>

4 #¥agm®
öåösic
 (
_I¡îlockedExch™geAdd
)

5 #¥agm®
öåösic
 (
_I¡îlockedCom∑ªExch™ge
)

9 #ifde‡
PCX_DEBUG


10 
	~<s°ªam
>

11 
	~<wödows.h
>

15 
«me•a˚
 
	gæ


18 
size_t
 c⁄° 
	gˇchñöe_size
 = 64;

20 
	spcx_node


22 (*
	gpcx_dt‹_t
)(
	tpcx_node
*);

23 
ATOMIC
(
pcx_node
*Ë
	gpcx_√xt_
;

24 
ATOMIC
(
pcx_dt‹_t
Ë
	gpcx_dt‹_
;

27 
«me•a˚
 
	gpcx_öt


29 c⁄° 
	gw‹d_bôs
 = 32;

30 c⁄° 
	gcﬁÀ˘‹_bôs
 = 4;

31 c⁄° 
	gcﬁÀ˘‹_cou¡
 = 1 << 
cﬁÀ˘‹_bôs
;

32 c⁄° 
	gcou¡î_öc
 = 1 << (
cﬁÀ˘‹_bôs
 * 2);

33 c⁄° 
	gis_cuºít_öc
 = 1;

34 c⁄° 
	gback_lök_öc
 = 2;

36 
	gma°î
;

37 
	gcﬁÀ˘‹
;

39 
	sloˇl_cﬁÀ˘‹


41 
pcx_node
* 
	gde„r_hód_
;

42 
pcx_node
 
	gde„r_èû_
;

43 
	gde„r_size_
;

46 
	sthªad_öt


48 
	gpcx_öt
::
ma°î
* 
ma°î_
;

49 
	gpcx_öt
::
cﬁÀ˘‹
* 
cﬁÀ˘‹s_
;

50 
	gªcursi⁄_cou¡_
;

51 
	gis_acquúed_
;

52 
	gcﬁÀ˘‹_ödex_
;

53 
	gœ°_£í_cﬁÀ˘‹_ödex_
;

54 
	gÊush_èû_
;

55 
pcx_node
* 
	gde„r_hód_
;

56 
pcx_node
 
	gde„r_èû_
;

57 
	gde„r_size_
;

58 
	g¥omŸe_
;

59 
loˇl_cﬁÀ˘‹
 
	gloˇl_cﬁÀ˘‹s_
 [
cﬁÀ˘‹_cou¡
];

63 ˛as†
	cpcx_thªad
 : 
¥iv©e
 
pcx_öt
::
thªad_öt


65 
public
:

66 
pcx_thªad
& 
gë
();

68 
acquúe
();

69 
ªÀa£
();

70 
de„r
(
pcx_node
* 
node
,Öcx_node::
pcx_dt‹_t
 
dt‹
);

71 
Êush
();

72 
¥omŸe
();

73 
quõs˚¡
();

75 
öô
();

76 
deöô
();

78 
	g¥iv©e
:

79 
acquúe_im∂
();

80 
ªÀa£_im∂
(, );

81 
Êush_im∂
();

82 
loˇl_Êush
();

83 
quõs˚¡_im∂
();

84 
‰õnd
 
öô
();

85 
‰õnd
 
deöô
();

86 
‰õnd
 
thªad_ˇŒback
(
boﬁ
);

89 
«me•a˚
 
	gpcx_öt


91 
	sma°î


93 
	g∑d0_
 [64];

95 
	gg¨bage_thªshﬁd_
;

97 
	g∑d1_
 [64];

99 
	s°©e_∑π


101 
	gcuºít_cﬁÀ˘‹_
 : 
cﬁÀ˘‹_bôs
;

102 
	gcﬁÀ˘‹_èû_
 : 
cﬁÀ˘‹_bôs
;

103 
	gouãr_cou¡î_
 : 
w‹d_bôs
 - 2 * 
cﬁÀ˘‹_bôs
;

106 
	u°©e


108 
	gwhﬁe_
;

109 
°©e_∑π
 
	g∑π_
;

112 
°©e
 
	g°©e_
;

114 
	g∑d2_
 [64];

116 
°©e
 
	g°©e_c›y_
;

118 
	g∑d3_
 [64];

121 
	scﬁÀ˘‹


123 
	g∑d0_
 [64];

125 
pcx_node
* 
	gde„r_li°_hód_
;

126 
	gde„r_li°_size_
;

128 
	g∑d1_
 [64];

130 
	s°©e_∑π


132 
	gis_cuºít_
 : 1;

133 
	gback_lök_
 : 1;

134 
	g∑d_
 : 
cﬁÀ˘‹_bôs
 * 2 - 2;

135 
	gö√r_cou¡î_
 : 
w‹d_bôs
 - 2 * 
cﬁÀ˘‹_bôs
;

138 
	u°©e


140 
	gwhﬁe_
;

141 
°©e_∑π
 
	g∑π_
;

144 
°©e
 
	g°©e_
;

146 
	g∑d2_
 [64];

149 
__de˛•ec
(
£À˘™y
)

150 
ma°î
 
	gg_ma°î
;

151 
__de˛•ec
(
£À˘™y
)

152 
cﬁÀ˘‹
 
	gg_cﬁÀ˘‹s
 [
cﬁÀ˘‹_cou¡
];

153 
__de˛•ec
(
£À˘™y
, 
thªad
)

154 
thªad_öt
* 
	gg_thªad_ö°™˚
;

156 (
__°dˇŒ
 
	t¡_és_cb_t
)(*, , *);

157 
¡_és_cb_t
 
	g⁄_és_ˇŒback
;

159 #¥agm®
d©a_£g
(
push
, 
ﬁd_£g
)

160 #¥agm®
d©a_£g
(".CRT$XLB")

161 
__de˛•ec
(
£À˘™y
, 
dŒexp‹t
)

162 
¡_és_cb_t
* vﬁ©ûê
	gp_thªad_ˇŒback
 = 
⁄_és_ˇŒback
;

163 #¥agm®
d©a_£g
(
p›
, 
ﬁd_£g
)

165 
ölöe
 
__°dˇŒ
 
⁄_és_ˇŒback
(*, 
ªas⁄
, *)

167 i‡(1 =
ªas⁄
)

169 
öô
();

170 
thªad_ˇŒback
(
åue
);

172 i‡(0 =
ªas⁄
)

174 
thªad_ˇŒback
(
Ál£
);

175 
deöô
();

177 i‡(2 =
ªas⁄
)

179 
thªad_ˇŒback
(
åue
);

181 i‡(3 =
ªas⁄
)

183 
thªad_ˇŒback
(
Ál£
);

188 
ölöe
 
	$öô
()

190 
usög
 
«me•a˚
 
pcx_öt
;

191 
ma°î
& 
m
 = 
g_ma°î
;

192 
m
.
g¨bage_thªshﬁd_
 = 128;

193 
m
.
°©e_
.
∑π_
.
cuºít_cﬁÀ˘‹_
 = 0;

194 
m
.
°©e_
.
∑π_
.
cﬁÀ˘‹_èû_
 = 0;

195 
m
.
°©e_
.
∑π_
.
ouãr_cou¡î_
 = 0;

196 
m
.
°©e_c›y_
.
∑π_
.
cuºít_cﬁÀ˘‹_
 = 0;

197 
m
.
°©e_c›y_
.
∑π_
.
cﬁÀ˘‹_èû_
 = 0;

198 
m
.
°©e_c›y_
.
∑π_
.
ouãr_cou¡î_
 = 0;

199 
i
 = 0; i !
cﬁÀ˘‹_cou¡
; ++i)

201 
cﬁÀ˘‹
& 
c
 = 
g_cﬁÀ˘‹s
[
i
];

202 
c
.
de„r_li°_hód_
 = 0;

203 
c
.
de„r_li°_size_
 = 0;

204 
c
.
°©e_
.
∑π_
.
is_cuºít_
 = 1;

205 
c
.
°©e_
.
∑π_
.
back_lök_
 = 1;

206 
c
.
°©e_
.
∑π_
.
ö√r_cou¡î_
 = 0;

208 
g_cﬁÀ˘‹s
[0].
°©e_
.
∑π_
.
back_lök_
 = 0;

209 
	}
}

211 
ölöe
 
	$deöô
()

213 
usög
 
«me•a˚
 
pcx_öt
;

214 
pcx_thªad
::
	`gë
().
	`ªÀa£_im∂
(
g_ma°î
.
°©e_
.
∑π_
.
cuºít_cﬁÀ˘‹_
, 
is_cuºít_öc
);

215 
	}
}

217 
ölöe
 
	$thªad_ˇŒback
(
boﬁ
 
öô
)

219 i‡(
öô
)

221 
g_thªad_ö°™˚
 = 
RL_NEW
 
	`pcx_thªad
 ();

222 
pcx_thªad
::
	`gë
().
	`öô
();

226 
pcx_thªad
::
	`gë
().
	`deöô
();

227 
	`RL_DELETE
(
g_thªad_ö°™˚
);

228 
g_thªad_ö°™˚
 = 0;

230 
	}
}

232 
ölöe
 
	gpcx_thªad
&Öcx_thªad::
	$gë
()

234  
°©ic_ˇ°
<
pcx_thªad
&>(*
pcx_öt
::
g_thªad_ö°™˚
);

235 
	}
}

237 
ölöe
 
	gpcx_thªad
::
	$acquúe_im∂
()

239 
usög
 
«me•a˚
 
pcx_öt
;

240 c⁄° 
¥ev
 =

241 
	`_I¡îlockedExch™geAdd
(

242 &
ma°î_
->
°©e_
.
whﬁe_
, 
cou¡î_öc
);

243 
ma°î
::
°©e_∑π
 
u
 = {
¥ev
};

245 #ifde‡
PCX_DEBUG


246 
°d
::
o°rög°ªam
 
ss
;

247 
ss
 << "[PCX]Åhªad " << 
this
 << "ácquúê" << 
u
.
cuºít_cﬁÀ˘‹_
 << "\n";

248 
	`OuçutDebugSåögA
(
ss
.
	`°r
().
	`c_°r
());

251 i‡(
u
.
cuºít_cﬁÀ˘‹_
 =
Êush_èû_


252 && 
loˇl_cﬁÀ˘‹s_
[
Êush_èû_
].
de„r_size_
)

254 
	`loˇl_Êush
();

257  
u
.
cuºít_cﬁÀ˘‹_
;

258 
	}
}

260 
ölöe
 
	gpcx_thªad
::
	$ªÀa£_im∂
(
ödex
, 
cou¡
)

262 
usög
 
«me•a˚
 
pcx_öt
;

263 
cﬁÀ˘‹
& 
c
 = 
cﬁÀ˘‹s_
[
ödex
];

264 c⁄° 
¥ev
 =

265 
	`_I¡îlockedExch™geAdd
(

266 &
c
.
°©e_
.
whﬁe_
, ()-()
cou¡
);

268 #ifde‡
PCX_DEBUG


269 
°d
::
o°rög°ªam
 
ss
;

270 
ss
 << "[PCX]Åhªad " << 
this
 << "Ññó£ " << 
ödex
 << "\n";

271 
	`OuçutDebugSåögA
(
ss
.
	`°r
().
	`c_°r
());

274 i‡(0 =
¥ev
 - 
cou¡
)

276 
pcx_node
* 
cuº
 = 
c
.
de„r_li°_hód_
;

277 
cuº
)

279 
pcx_node
* 
√xt
 = 
cuº
->
pcx_√xt_
;

280 
cuº
->
	`pcx_dt‹_
(curr);

281 
cuº
 = 
√xt
;

283 
c
.
de„r_li°_hód_
 = 0;

284 
c
.
de„r_li°_size_
 = 0;

285 
c
.
°©e_
.
∑π_
.
back_lök_
 = 1;

286 
c
.
°©e_
.
∑π_
.
is_cuºít_
 = 1;

288 
u
;

289 i‡(
ödex
 !
cﬁÀ˘‹_cou¡
 - 1)

290 
u
 = 
cﬁÀ˘‹_cou¡
;

292 
u
 = -()(
cﬁÀ˘‹_cou¡
 * (collector_count - 1));

293 
	`_I¡îlockedExch™geAdd
(&
ma°î_
->
°©e_
.
whﬁe_
, 
u
);

295 
	`ªÀa£_im∂
((
ödex
 + 1Ë% 
cﬁÀ˘‹_cou¡
, 
back_lök_öc
);

297 
	}
}

299 
ölöe
 
	gpcx_thªad
::
	$Êush_im∂
()

301 
usög
 
«me•a˚
 
pcx_öt
;

302 
	`_mm_m„n˚
();

303 
ma°î
::
°©e
 sèã = 
ma°î_
->
°©e_
;

304 
œ°_£í_cﬁÀ˘‹_ödex_
 = 
°©e
.
∑π_
.
cuºít_cﬁÀ˘‹_
;

305 
cﬁÀ˘‹
& 
gc
 = 
cﬁÀ˘‹s_
[
°©e
.
∑π_
.
cuºít_cﬁÀ˘‹_
];

306 
loˇl_cﬁÀ˘‹
& 
lc
 = 
loˇl_cﬁÀ˘‹s_
[
°©e
.
∑π_
.
cuºít_cﬁÀ˘‹_
];

307 
lc
.
de„r_hód_
->
pcx_√xt_
 = 
de„r_èû_
.pcx_next_;

308 
lc
.
de„r_hód_
 = 
de„r_èû_
.
pcx_√xt_
;

309 
lc
.
de„r_size_
 += defer_size_;

310 
de„r_hód_
 = &
de„r_èû_
;

311 
de„r_èû_
.
pcx_√xt_
 = 0;

312 
de„r_size_
 = 0;

313 i‡(
ma°î_
->
g¨bage_thªshﬁd_
 < 
lc
.
de„r_size_
 || 
¥omŸe_
)

315 
ma°î
::
°©e
 
cmp
;

316 
ma°î
::
°©e
 
vÆ
;

319 
cmp
 = 
ma°î_
->
°©e_
;

320 i‡(
cmp
.
∑π_
.
cuºít_cﬁÀ˘‹_
 !
œ°_£í_cﬁÀ˘‹_ödex_
)

322 
¥omŸe_
 = 0;

325 
√xt_ödex
 = (
œ°_£í_cﬁÀ˘‹_ödex_
 + 1Ë% 
cﬁÀ˘‹_cou¡
;

326 i‡(
cmp
.
∑π_
.
cﬁÀ˘‹_èû_
 =
√xt_ödex
)

328 
vÆ
 = 
cmp
;

329 
vÆ
.
∑π_
.
cuºít_cﬁÀ˘‹_
 += 1;

330 
vÆ
.
∑π_
.
ouãr_cou¡î_
 = 0;

332 
cmp
.
whﬁe_
 !
	`_I¡îlockedCom∑ªExch™ge
(

333 (*)&
ma°î_
->
°©e_
.
whﬁe_
, 
vÆ
.whﬁe_, 
cmp
.whole_));

334 
œ°_£í_cﬁÀ˘‹_ödex_
 = 
vÆ
.
∑π_
.
cuºít_cﬁÀ˘‹_
;

335 
¥omŸe_
 = 0;

336 
	`_I¡îlockedIn¸emít
((*)&
ma°î_
->
°©e_c›y_
.
whﬁe_
);

337 
	`_I¡îlockedExch™geAdd
((*)&
gc
.
°©e_
.
whﬁe_
,

338 
cmp
.
∑π_
.
ouãr_cou¡î_
 * 
cou¡î_öc
 - 
is_cuºít_öc
);

340 
	}
}

342 
	$__de˛•ec
(
noölöe
)

343 
ölöe
 
pcx_thªad
::
	$loˇl_Êush
()

345 
usög
 
«me•a˚
 
pcx_öt
;

346 i‡(
Êush_èû_
 =
ma°î_
->
°©e_
.
∑π_
.
cﬁÀ˘‹_èû_
)

349 #ifde‡
PCX_DEBUG


350 
°d
::
o°rög°ªam
 
ss
;

351 
ss
 << "[PCX]Åhªad " << 
this
 << " flush " << 
Êush_èû_
 << "\n";

352 
	`OuçutDebugSåögA
(
ss
.
	`°r
().
	`c_°r
());

355 
loˇl_cﬁÀ˘‹
& 
lc
 = 
loˇl_cﬁÀ˘‹s_
[
Êush_èû_
];

356 
pcx_node
* 
cuº
 = 
lc
.
de„r_èû_
.
pcx_√xt_
;

357 
cuº
)

359 #ifde‡
PCX_DEBUG


360 
°d
::
o°rög°ªam
 
ss
;

361 
ss
 << "[PCX]Åhªad " << 
this
 << " de°roy " << 
cuº
 << "\n";

362 
	`OuçutDebugSåögA
(
ss
.
	`°r
().
	`c_°r
());

365 
pcx_node
* 
√xt
 = 
cuº
->
pcx_√xt_
;

366 
cuº
->
	`pcx_dt‹_
(curr);

367 
cuº
 = 
√xt
;

369 
lc
.
de„r_hód_
 = &lc.
de„r_èû_
;

370 
lc
.
de„r_èû_
.
pcx_√xt_
 = 0;

371 
lc
.
de„r_size_
 = 0;

372 
Êush_èû_
 = (Êush_èû_ + 1Ë% 
cﬁÀ˘‹_cou¡
;

373 
	}
}

375 
	$__de˛•ec
(
noölöe
)

376 
ölöe
 
pcx_thªad
::
	$quõs˚¡_im∂
()

378 
usög
 
«me•a˚
 
pcx_öt
;

379 i‡(
de„r_size_
)

380 
	`Êush_im∂
();

381 
	`ªÀa£_im∂
(
cﬁÀ˘‹_ödex_
, 
cou¡î_öc
);

382 
cﬁÀ˘‹_ödex_
 = 
	`acquúe_im∂
();

383 
	}
}

385 
ölöe
 
	gpcx_thªad
::
	$acquúe
()

387 
usög
 
«me•a˚
 
pcx_öt
;

388 
ªcursi⁄_cou¡_
 += 1;

389 i‡(1 !
ªcursi⁄_cou¡_
)

391 i‡(
is_acquúed_
)

393 
cﬁÀ˘‹_ödex_
 = 
	`acquúe_im∂
();

394 
œ°_£í_cﬁÀ˘‹_ödex_
 = 
cﬁÀ˘‹_ödex_
;

395 
is_acquúed_
 = 1;

396 
	}
}

398 
ölöe
 
	gpcx_thªad
::
	$ªÀa£
()

400 
usög
 
«me•a˚
 
pcx_öt
;

401 
ªcursi⁄_cou¡_
 -= 1;

402 i‡(0 =
ªcursi⁄_cou¡_
)

404 i‡(
ma°î_
->
°©e_c›y_
.
∑π_
.
cuºít_cﬁÀ˘‹_
 !
cﬁÀ˘‹_ödex_


405 || 
¥omŸe_
)

407 i‡(
de„r_size_
)

408 
	`Êush_im∂
();

409 
	`ªÀa£_im∂
(
cﬁÀ˘‹_ödex_
, 
cou¡î_öc
);

410 
is_acquúed_
 = 0;

413 i‡(
Êush_èû_
 !
œ°_£í_cﬁÀ˘‹_ödex_
)

415 
	`loˇl_Êush
();

417 
	}
}

419 
ölöe
 
	gpcx_thªad
::
	$quõs˚¡
()

421 i‡(
ma°î_
->
°©e_c›y_
.
∑π_
.
cuºít_cﬁÀ˘‹_
 !
cﬁÀ˘‹_ödex_


422 || 
¥omŸe_
)

424 
	`quõs˚¡_im∂
();

426 i‡(
Êush_èû_
 !
œ°_£í_cﬁÀ˘‹_ödex_
)

428 
	`loˇl_Êush
();

430 
	}
}

432 
ölöe
 
	gpcx_thªad
::
	$de„r
(
pcx_node
* 
node
,Öcx_node::
pcx_dt‹_t
 
dt‹
)

434 
usög
 
«me•a˚
 
pcx_öt
;

435 
node
->
pcx_√xt_
 = 0;

436 
node
->
pcx_dt‹_
 = 
dt‹
;

437 
de„r_hód_
->
pcx_√xt_
 = 
node
;

438 
de„r_hód_
 = 
node
;

439 
de„r_size_
 += 1;

440 
	}
}

442 
ölöe
 
	gpcx_thªad
::
	$Êush
()

444 
usög
 
«me•a˚
 
pcx_öt
;

445 i‡(
ªcursi⁄_cou¡_
)

447 i‡(0 =
is_acquúed_
)

449 i‡(
de„r_size_
)

450 
	`Êush_im∂
();

451 
	`ªÀa£_im∂
(
cﬁÀ˘‹_ödex_
, 
cou¡î_öc
);

452 
is_acquúed_
 = 0;

453 
	}
}

455 
ölöe
 
	gpcx_thªad
::
	$¥omŸe
()

457 
¥omŸe_
 = 1;

458 
	}
}

460 
ölöe
 
	gpcx_thªad
::
	$öô
()

462 
usög
 
«me•a˚
 
pcx_öt
;

463 
ma°î_
 = &
g_ma°î
;

464 
cﬁÀ˘‹s_
 = 
g_cﬁÀ˘‹s
;

465 
de„r_hód_
 = &
de„r_èû_
;

466 
de„r_èû_
.
pcx_√xt_
 = 0;

467 
i
 = 0; i !
cﬁÀ˘‹_cou¡
; ++i)

469 
loˇl_cﬁÀ˘‹s_
[
i
].
de„r_hód_
 = &loˇl_cﬁÀ˘‹s_[i].
de„r_èû_
;

471 
	}
}

473 
ölöe
 
	gpcx_thªad
::
	$deöô
()

475 
	`Êush
();

476 
	}
}

	@viper/concurrentqueue-src/tests/relacy/relacy/example/mpmc/stdafx.cpp

5 
	~"°dafx.h
"

	@viper/concurrentqueue-src/tests/relacy/relacy/example/mpmc/stdafx.h

1 #¥agm®
⁄˚


3 #¥agm®
w¨nög
 (
dißbÀ
: 4201)

6 
	#RL_MSVC_OUTPUT


	)

8 
	~"../../ªœcy/pch.hµ
"

9 
	~"../../ªœcy/ªœcy_°d.hµ
"

	@viper/concurrentqueue-src/tests/relacy/relacy/example/mutex_business_logic/mutex_business_logic.cpp

1 
	~"°dafx.h
"

2 
	~"../../ªœcy/ªœcy_°d.hµ
"

6 ˛as†
	cbusöess_logic


8 
	mpublic
:

9 
	taccou¡_id_t
;

10 
	tbÆ™˚_t
;

12 
	$busöess_logic
()

14 
	`±hªad_rwlock_öô
(&
accou¡s_gu¨d
, 0);

17 ~
	$busöess_logic
()

19 
	`±hªad_rwlock_de°roy
(&
accou¡s_gu¨d
);

20 
	}
}

22 
boﬁ
 
	$add_accou¡
(
accou¡_id_t
 
acc_id
, 
bÆ™˚_t
 
bÆ™˚
)

24 
	`±hªad_rwlock_wæock
(&
accou¡s_gu¨d
);

25 i‡(
accou¡s
.
	`föd
(
acc_id
Ë!accou¡s.
	`íd
())

27 
	`±hªad_rwlock_u∆ock
(&
accou¡s_gu¨d
);

28  
Ál£
;

30 
accou¡s
[
acc_id
].
bÆ™˚
 = balance;

31 
	`±hªad_rwlock_u∆ock
(&
accou¡s_gu¨d
);

32  
åue
;

33 
	}
}

35 
boﬁ
 
	$å™s„r_bÆ™˚
(
accou¡_id_t
 
acc_id1
,áccou¡_id_à
acc_id2
, 
bÆ™˚_t
 
amou¡
)

37 i‡(
acc_id1
 =
acc_id2
)

38  
åue
;

39 
	`±hªad_rwlock_rdlock
(&
accou¡s_gu¨d
);

40 i‡(
accou¡s
.
	`föd
(
acc_id1
Ë=accou¡s.
	`íd
()

41 || 
accou¡s
.
	`föd
(
acc_id2
Ë=accou¡s.
	`íd
())

43 
	`±hªad_rwlock_u∆ock
(&
accou¡s_gu¨d
);

44  
Ál£
;

46 
accou¡_öfo
& 
acc1
 = 
accou¡s
[
acc_id1
];

47 
accou¡_öfo
& 
acc2
 = 
accou¡s
[
acc_id2
];

48 i‡(
acc_id1
 > 
acc_id2
)

50 
	`±hªad_muãx_lock
(&
acc1
.
mtx
);

51 
	`±hªad_muãx_lock
(&
acc2
.
mtx
);

55 
	`±hªad_muãx_lock
(&
acc2
.
mtx
);

56 
	`±hªad_muãx_lock
(&
acc1
.
mtx
);

58 
	`±hªad_rwlock_u∆ock
(&
accou¡s_gu¨d
);

60 
acc1
.
bÆ™˚
 -
amou¡
;

61 
acc2
.
bÆ™˚
 +
amou¡
;

63 
	`±hªad_muãx_u∆ock
(&
acc1
.
mtx
);

64 
	`±hªad_muãx_u∆ock
(&
acc2
.
mtx
);

65  
åue
;

66 
	}
}

68 
	g¥iv©e
:

69 
	saccou¡_öfo


71 
bÆ™˚_t
 
bÆ™˚
;

72 
±hªad_muãx_t
 
	gmtx
;

74 
accou¡_öfo
()

75 : 
bÆ™˚
()

77 
±hªad_muãx_öô
(&
mtx
, 0);

80 
accou¡_öfo
◊ccou¡_öfÿc⁄°& 
acc
)

81 : 
bÆ™˚
(
acc
.balance)

83 
±hªad_muãx_öô
(&
mtx
, 0);

86 ~
accou¡_öfo
()

88 
±hªad_muãx_de°roy
(&
mtx
);

92 
	g°d
::
	tm≠
<
	taccou¡_id_t
, 
	taccou¡_öfo
> 
	taccou¡_m≠_t
;

93 
accou¡_m≠_t
 
	gaccou¡s
;

94 
±hªad_rwlock_t
 
	gaccou¡s_gu¨d
;

100 
	gbusöess_logic_ã°
 : 
æ
::
ã°_suôe
<
busöess_logic_ã°
, 2>

102 
busöess_logic
 
	gbl
;

104 
size_t
 c⁄° 
	gaccou¡_cou¡
 = 4;

106 
bef‹e
()

108 
size_t
 
	gi
 = 0; i !
accou¡_cou¡
; ++i)

110 
boﬁ
 
	grv
 = 
bl
.
add_accou¡
(
i
, i * 10.0);

111 
RL_ASSERT
(
rv
);

115 
thªad
()

117 
	gbusöess_logic
::
accou¡_id_t
 
acc1
 = 
æ
::
ønd
(
accou¡_cou¡
);

118 
	gbusöess_logic
::
accou¡_id_t
 
acc2
 = 
æ
::
ønd
(
accou¡_cou¡
);

119 
boﬁ
 
	grv
 = 
bl
.
å™s„r_bÆ™˚
(
acc1
, 
acc2
, 1.0);

120 
RL_ASSERT
(
rv
);

127 
	$maö
()

129 
æ
::
simuœã
<
busöess_logic_ã°
>();

130 
	}
}

	@viper/concurrentqueue-src/tests/relacy/relacy/example/mutex_business_logic/stdafx.cpp

1 
	~"°dafx.h
"

	@viper/concurrentqueue-src/tests/relacy/relacy/example/mutex_business_logic/stdafx.h

1 #¥agm®
⁄˚


3 #ifde‡
NDEBUG


4 
	#_SECURE_SCL
 0

	)

7 
	#RL_MSVC_OUTPUT


	)

10 
	~"../../ªœcy/pch.hµ
"

11 
	~"../../ªœcy/ªœcy_°d.hµ
"

	@viper/concurrentqueue-src/tests/relacy/relacy/example/peterson/peterson.cpp

1 
	~"°dafx.h
"

2 
	~"../../ªœcy/ªœcy_°d.hµ
"

3 
	~"../../ªœcy/wödows.h
"

6 
	g≥ãrs⁄_muãx_ã°
 : 
æ
::
ã°_suôe
<
≥ãrs⁄_muãx_ã°
, 2>

8 
	g°d
::
©omic
<> 
Êag0
;

9 
	g°d
::
©omic
<> 
Êag1
;

10 
	g°d
::
©omic
<> 
tu∫
;

12 
	gæ
::
v¨
<> 
d©a
;

14 
bef‹e
()

16 
Êag0
(
$
) = 0;

17 
Êag1
(
$
) = 0;

18 
tu∫
(
$
) = 0;

21 
thªad
(
ödex
)

23 i‡(0 =
ödex
)

25 
Êag0
(
$
).
°‹e
(1);

26 
tu∫
(
$
).
°‹e
(1);

28 
Êag1
(
$
).
lﬂd
()

29 && 1 =
tu∫
(
$
).
lﬂd
());

31 
d©a
(
$
) = 1;

33 
Êag0
(
$
).
°‹e
(0);

37 
Êag1
(
$
).
°‹e
(1);

38 
tu∫
(
$
).
°‹e
(0);

40 
Êag0
(
$
).
lﬂd
()

41 && 0 =
tu∫
(
$
).
lﬂd
());

43 
d©a
(
$
) = 2;

45 
Êag1
(
$
).
°‹e
(0);

53 
	g≥ãrs⁄_muãx_ã°2
 : 
æ
::
ã°_suôe
<
≥ãrs⁄_muãx_ã°2
, 2>

55 
	g°d
::
©omic
<> 
Êag0
;

56 
	g°d
::
©omic
<> 
Êag1
;

57 
	g°d
::
©omic
<> 
tu∫
;

59 
	gæ
::
v¨
<> 
d©a
;

61 
bef‹e
()

63 
Êag0
(
$
) = 0;

64 
Êag1
(
$
) = 0;

65 
tu∫
(
$
) = 0;

68 
thªad
(
ödex
)

70 i‡(0 =
ödex
)

72 
Êag0
.
°‹e
(1, 
æ
::
mem‹y_‹dî_ªœxed
);

73 
	gtu∫
.
exch™ge
(1, 
æ
::
mem‹y_‹dî_acq_ªl
);

75 
	gÊag1
.
lﬂd
(
æ
::
mem‹y_‹dî_acquúe
)

76 && 1 =
tu∫
.
lﬂd
(
æ
::
mem‹y_‹dî_ªœxed
))

77 
æ
::
yõld
(1, 
$
);

79 
d©a
(
$
) = 1;

81 
	gÊag0
.
°‹e
(0, 
æ
::
mem‹y_‹dî_ªÀa£
);

85 
	gÊag1
.
°‹e
(1, 
æ
::
mem‹y_‹dî_ªœxed
);

86 
	gtu∫
.
exch™ge
(0, 
æ
::
mem‹y_‹dî_acq_ªl
);

88 
	gÊag0
.
lﬂd
(
æ
::
mem‹y_‹dî_acquúe
)

89 && 0 =
tu∫
.
lﬂd
(
æ
::
mem‹y_‹dî_ªœxed
))

90 
æ
::
yõld
(1, 
$
);

92 
d©a
(
$
) = 2;

94 
	gÊag1
.
°‹e
(0, 
æ
::
mem‹y_‹dî_ªÀa£
);

102 
	g≥ãrs⁄_muãx_ã°3
 : 
æ
::
ã°_suôe
<
≥ãrs⁄_muãx_ã°3
, 2>

104 
	g°d
::
©omic
<> 
Êag0
;

105 
	g°d
::
©omic
<> 
Êag1
;

106 
	g°d
::
©omic
<> 
tu∫
;

108 
	gæ
::
v¨
<> 
d©a
;

110 
bef‹e
()

112 
Êag0
(
$
) = 0;

113 
Êag1
(
$
) = 0;

114 
tu∫
(
$
) = 0;

117 
thªad
(
ödex
)

119 i‡(0 =
ödex
)

121 
Êag0
.
°‹e
(1, 
°d
::
mem‹y_‹dî_ªœxed
);

122 
	g°d
::
©omic_thªad_„n˚
(
°d
::
mem‹y_‹dî_£q_c°
);

123 
	gtu∫
.
°‹e
(1, 
°d
::
mem‹y_‹dî_ªœxed
);

124 
	g°d
::
©omic_thªad_„n˚
(
°d
::
mem‹y_‹dî_£q_c°
);

126 
	gÊag1
.
lﬂd
(
°d
::
mem‹y_‹dî_acquúe
)

127 && 1 =
tu∫
.
lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
));

129 
d©a
(
$
) = 1;

131 
	gÊag0
.
°‹e
(0, 
°d
::
mem‹y_‹dî_ªÀa£
);

135 
	gÊag1
.
°‹e
(1, 
°d
::
mem‹y_‹dî_ªœxed
);

136 
	g°d
::
©omic_thªad_„n˚
(
°d
::
mem‹y_‹dî_£q_c°
);

137 
	gtu∫
.
°‹e
(0, 
°d
::
mem‹y_‹dî_ªœxed
);

138 
	g°d
::
©omic_thªad_„n˚
(
°d
::
mem‹y_‹dî_£q_c°
);

140 
	gÊag0
.
lﬂd
(
°d
::
mem‹y_‹dî_acquúe
)

141 && 0 =
tu∫
.
lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
));

143 
d©a
(
$
) = 2;

145 
	gÊag1
.
°‹e
(0, 
°d
::
mem‹y_‹dî_ªÀa£
);

153 
	g≥ãrs⁄_muãx_ã°4
 : 
æ
::
ã°_suôe
<
≥ãrs⁄_muãx_ã°4
, 2>

155 
	g°d
::
©omic
<> 
Êag0
;

156 
	g°d
::
©omic
<> 
Êag1
;

157 
	g°d
::
©omic
<> 
tu∫
;

159 
	gæ
::
v¨
<> 
d©a
;

161 
bef‹e
()

163 
Êag0
(
$
) = 0;

164 
Êag1
(
$
) = 0;

165 
tu∫
(
$
) = 0;

168 
thªad
(
ödex
)

170 i‡(0 =
ödex
)

172 
Êag0
.
exch™ge
(1, 
æ
::
mem‹y_‹dî_acq_ªl
);

173 
	gtu∫
.
°‹e
(1, 
æ
::
mem‹y_‹dî_ªÀa£
);

175 
	gÊag1
.
lﬂd
(
æ
::
mem‹y_‹dî_acquúe
)

176 && 1 =
tu∫
.
lﬂd
(
æ
::
mem‹y_‹dî_acquúe
))

177 
æ
::
yõld
(1, 
$
);

179 
d©a
(
$
) = 1;

181 
	gÊag0
.
°‹e
(0, 
æ
::
mem‹y_‹dî_ªÀa£
);

185 
	gÊag1
.
exch™ge
(1, 
æ
::
mem‹y_‹dî_acq_ªl
);

186 
	gtu∫
.
°‹e
(0, 
æ
::
mem‹y_‹dî_ªÀa£
);

188 
	gÊag0
.
lﬂd
(
æ
::
mem‹y_‹dî_acquúe
)

189 && 0 =
tu∫
.
lﬂd
(
æ
::
mem‹y_‹dî_ªœxed
))

190 
æ
::
yõld
(1, 
$
);

192 
d©a
(
$
) = 2;

194 
	gÊag1
.
°‹e
(0, 
æ
::
mem‹y_‹dî_ªÀa£
);

200 ˛as†
	cevítcou¡


202 
	mpublic
:

203 
	t°©e_t
;

205 
	$evítcou¡
()

207 
°©e_
.
	`°‹e
(0, 
°d
::
mem‹y_‹dî_ªœxed
);

208 
£ma_
 = 
	`Cª©eSem≠h‹e
(0, 0, 
LONG_MAX
, 0);

211 ~
	$evítcou¡
()

213 
	`Clo£H™dÀ
(
£ma_
);

214 
	}
}

216 
°©e_t
 
	$¥ï¨e
()

218  
°©e_
.
	`„tch_add
(
waôîs_öc
, 
°d
::
mem‹y_‹dî_£q_c°
);

219 
	}
}

221 
	$ªtúe
()

223 
°©e_
.
	`„tch_add
((
°©e_t
)-()
waôîs_öc
, 
°d
::
mem‹y_‹dî_£q_c°
);

224 
	}
}

226 
	$waô
(
°©e_t
 
cmp
)

228 
	`WaôF‹SögÀObje˘
(
£ma_
, 
INFINITE
);

229 
°©e_t
 
cmp0
 = 
°©e_
.
	`lﬂd
(
°d
::
mem‹y_‹dî_£q_c°
);

230 i‡((
cmp
 & 
gíî©i⁄_mask
Ë=(
cmp0
 & generation_mask))

232 
°©e_
.
	`„tch_add
((
°©e_t
)-()
waôîs_öc
, 
°d
::
mem‹y_‹dî_£q_c°
);

233 
	`Rñó£Sem≠h‹e
(
£ma_
, 1, 0);

234 
	`SwôchToThªad
();

236 
	}
}

238 
	$sig«l
()

240 
°d
::
	`©omic_thªad_„n˚
(°d::
mem‹y_‹dî_£q_c°
);

241 
	`sig«l_ªœxed
();

242 
	}
}

244 
	$sig«l_ªœxed
()

246 
°©e_t
 
cmp
 = 
°©e_
.
	`lﬂd
(
°d
::
mem‹y_‹dî_£q_c°
);

247 i‡(0 =(
cmp
 & 
waôîs_mask
))

251 
°©e_t
 
xchg
 = (
cmp
 & ~
waôîs_mask
Ë+ 
gíî©i⁄_öc
;

252 i‡(
°©e_
.
	`com∑ª_exch™ge_wók
(
cmp
, 
xchg
, 
°d
::
mem‹y_‹dî_£q_c°
))

254 
	`Rñó£Sem≠h‹e
(
£ma_
, 
cmp
 & 
waôîs_mask
, 0);

257 i‡(0 =(
cmp
 & 
waôîs_mask
))

260 
	}
}

262 
	g¥iv©e
:

263 
°d
::
©omic
<
°©e_t
> 
°©e_
;

264 
HANDLE
 
	g£ma_
;

266 
°©e_t
 c⁄° 
	gwaôîs_öc
 = 1;

267 
°©e_t
 c⁄° 
	gwaôîs_mask
 = (1 << 20) - 1;

268 
°©e_t
 c⁄° 
	ggíî©i⁄_öc
 = 1 << 20;

269 
°©e_t
 c⁄° 
	ggíî©i⁄_mask
 = ~
waôîs_mask
;

271 
evítcou¡
(eventcount const&);

272 
	gevítcou¡
& 
	g›î©‹
 = (
evítcou¡
 const&);

278 ˛as†
	cevítcou¡_blockög


280 
	mpublic
:

281 
	$evítcou¡_blockög
(
evítcou¡
& 
ec
)

282 : 
	$ec_
(
ec
)

284 
cmp_
 = 
ec_
.
	`¥ï¨e
();

285 
waô_
 = 
Ál£
;

288 
	$waô
()

290 
	`RL_ASSERT
(
Ál£
 =
waô_
);

291 
waô_
 = 
åue
;

292 
ec_
.
	`waô
(
cmp_
);

293 
	}
}

295 ~
	$evítcou¡_blockög
()

297 i‡(
Ál£
 =
waô_
)

298 
ec_
.
	`ªtúe
();

299 
	}
}

301 
	g¥iv©e
:

302 
evítcou¡
& 
ec_
;

303 
	gevítcou¡
::
°©e_t
 
cmp_
;

304 
boﬁ
 
	gwaô_
;

306 
evítcou¡_blockög
(eventcount_blocking const&);

307 
	gevítcou¡_blockög
& 
	g›î©‹
 = (
evítcou¡_blockög
 const&);

314 
	gsig«lög_ã°
 : 
æ
::
ã°_suôe
<
sig«lög_ã°
, 6>

322 
evítcou¡
 
	gec_
;

324 c⁄° 
	gmax_queue_Àngth
 = 4;

325 
	gqueue
 [
max_queue_Àngth
];

326 
	gqueue_hód
;

327 
	gqueue_èû
;

328 
	gqueue_hód_d©a
;

329 
	gqueue_èû_d©a
;

331 
bef‹e
()

338 
	gi
 = 0; i !
max_queue_Àngth
; ++i)

339 
	gqueue
[
i
] = 0;

340 
	gqueue_hód
 = 0;

341 
	gqueue_èû
 = 0;

342 
	gqueue_hód_d©a
 = 0;

343 
	gqueue_èû_d©a
 = 0;

346 
a·î
()

352 
	síqueue_desc


354 
	gpos
;

356 
ouçut
(
°d
::
o°ªam
& 
s
) const

358 
s
 << "íqueuê" << 
pos
;

362 
íqueue
()

364 
	gqueue
[
queue_hód
++] = ++
queue_hód_d©a
;

365 
RL_HIST_IMPL
(
æ
::
˘x
(), 
$
, 
íqueue_desc
Ë{
	gqueue_hód
 - 1} 
RL_HIST_END
();

366 
sig«l
();

369 
dequeue
()

371 
	gmy_pos
 = 
queue_èû
++;

374 i‡(
	gqueue
[
my_pos
])

376 
RL_ASSERT
(
queue
[
my_pos
] == my_pos + 1);

379 
waô
(
my_pos
);

383 
sig«l
()

385 
	gec_
.
sig«l
();

403 
waô
(
my_pos
)

405 
evítcou¡_blockög
 
block
 (
ec_
);

406 i‡(
	gqueue
[
my_pos
])

408 
	gblock
.
waô
();

433 
thªad
(
ödex
)

435 i‡(
	gödex
 < 
	gæ
::
ã°_suôe
<
sig«lög_ã°
, 6>::
∑øms
::
thªad_cou¡
/2+1)

437 
íqueue
();

441 
dequeue
();

449 
	$maö
()

451 
æ
::
ã°_∑øms
 
p
;

453 
p
.
£¨ch_ty≥
 = 
æ
::
sched_bound
;

460 
æ
::
simuœã
<
≥ãrs⁄_muãx_ã°
>();

461 
æ
::
simuœã
<
≥ãrs⁄_muãx_ã°2
>(
p
);

462 
æ
::
simuœã
<
≥ãrs⁄_muãx_ã°3
>();

463 
æ
::
simuœã
<
≥ãrs⁄_muãx_ã°4
>(
p
);

464 
	}
}

	@viper/concurrentqueue-src/tests/relacy/relacy/example/peterson/stdafx.cpp

1 
	~"°dafx.h
"

	@viper/concurrentqueue-src/tests/relacy/relacy/example/peterson/stdafx.h

1 #¥agm®
⁄˚


3 #ifde‡
NDEBUG


4 
	#_SECURE_SCL
 0

	)

7 
	#RL_MSVC_OUTPUT


	)

10 
	~"../../ªœcy/pch.hµ
"

11 
	~"../../ªœcy/ªœcy_°d.hµ
"

	@viper/concurrentqueue-src/tests/relacy/relacy/example/proxy_collector/proxy_collector.cpp

1 
	~"°dafx.h
"

2 
	~<°döt.h
>

3 
	~"../../ªœcy/ªœcy_°d.hµ
"

6 
	gpc_sys_™ch‹
;

7 
	gpc_ªgi⁄
;

8 
	gpc_ma°î
;

9 
pc_ªgi⁄
 
	tpc_node
;

10 (
	tpc_Â_dt‹
Ë(
	tpc_ªgi⁄
*);

12 
	spc_sys_™ch‹


14 
ªf˙t
;

15 
pc_ªgi⁄
* 
ªgi⁄
;

17 
	`pc_sys_™ch‹
()

21 
	`pc_sys_™ch‹
(
rc
, 
pc_ªgi⁄
* 
r
 = 0)

23 
ªf˙t
 = 
rc
;

24 
ªgi⁄
 = 
r
;

27 
boﬁ
 
›î©‹
 =(
pc_sys_™ch‹
 c⁄°& 
right
) const

29  
ªf˙t
 =
right
.refcnt

30 && 
ªgi⁄
 =
right
.region;

33 
pc_sys_™ch‹
 
›î©‹
 + (pc_sys_™ch‹ c⁄°& 
right
) const

35 
pc_sys_™ch‹
 
ªs
;

36 
ªs
.
ªf˙t
 =Ñef˙à+ 
right
.refcnt;

37 
ªs
.
ªgi⁄
 = (
pc_ªgi⁄
*)((
öçå_t
Ïegi⁄ + (öçå_t)
right
.region);

38  
ªs
;

41 
pc_sys_™ch‹
 
›î©‹
 - (pc_sys_™ch‹ c⁄°& 
right
) const

43 
pc_sys_™ch‹
 
ªs
;

44 
ªs
.
ªf˙t
 =Ñef˙à- 
right
.refcnt;

45 
ªs
.
ªgi⁄
 = (
pc_ªgi⁄
*)((
öçå_t
Ïegi⁄ - (öçå_t)
right
.region);

46  
ªs
;

50 
°d
::
o°ªam
& 
›î©‹
 << (°d::o°ªam& 
s
, 
pc_sys_™ch‹
 c⁄°& 
right
)

52  
s
 << "{" << 
right
.
ªf˙t
 << "," <<Ñight.
ªgi⁄
 << "}";

53 
	}
}

55 
	spc_ªgi⁄


57 
	m°d
::
©omic
<
pc_sys_™ch‹
> 
√xt
;

58 
	m°d
::
©omic
<
pc_ªgi⁄
*> 
de„r
;

60 
pc_ªgi⁄
()

62 
√xt
(
$
Ë
pc_sys_™ch‹
(0, 0);

63 
de„r
(
$
) = 0;

66 
lök
(
pc_ªgi⁄
* 
√xt
)

68 
	mde„r
.
°‹e
(
√xt
, 
æ
::
mem‹y_‹dî_ªœxed
);

71 
de„r_node
(
pc_ªgi⁄
* 
node
)

73 
pc_ªgi⁄
* 
	mªgi⁄
 = 
de„r
.
exch™ge
(
node
, 
æ
::
mem‹y_‹dî_ªÀa£
);

74 
	mnode
->
	mde„r
.
°‹e
(
ªgi⁄
, 
æ
::
mem‹y_‹dî_ªœxed
);

78 
	spc_ma°î


80 
	m°d
::
©omic
<
pc_sys_™ch‹
> 
hód
;

81 
pc_ªgi⁄
 
	m°ub_ªgi⁄
;

82 
pc_Â_dt‹
* 
	mÂ_dt‹
;

84 
pc_ma°î
(
pc_Â_dt‹
* c⁄° 
dt‹
)

86 
pc_sys_™ch‹
 
§c
 (0, &
°ub_ªgi⁄
);

87 
	mhód
.
°‹e
(
§c
, 
æ
::
mem‹y_‹dî_ªœxed
);

88 
	mÂ_dt‹
 = 
dt‹
;

91 
pc_ªgi⁄
* 
acquúe
()

93 
pc_sys_™ch‹
 
cmp
 (
hód
.
lﬂd
(
æ
::
mem‹y_‹dî_ªœxed
));

94 
pc_sys_™ch‹
 
	mxchg
;

97 
	mxchg
.
	mªf˙t
 = 
cmp
.
ªf˙t
 + 2;

98 
	mxchg
.
	mªgi⁄
 = 
cmp
.
ªgi⁄
;

100 
	mÁl£
 =
hód
.
com∑ª_exch™ge_wók
(
cmp
, 
xchg
, 
æ
::
mem‹y_‹dî_acquúe
));

101  
	mcmp
.
	mªgi⁄
;

104 
ªÀa£
(
pc_ªgi⁄
* 
ªgi⁄
)

106 
pc_sys_™ch‹
 
	m¥ev
 = 
ªgi⁄
->
√xt
.
„tch_sub
(2, 
æ
::
mem‹y_‹dî_acq_ªl
);

107 i‡(
	m¥ev
.
	mªf˙t
 == 3)

108 
sys_dt‹
(
ªgi⁄
);

111 
muèã
(
pc_ªgi⁄
* 
node
)

113 
pc_sys_™ch‹
 
§c
 (2, 0);

114 
	mnode
->
	m√xt
.
°‹e
(
§c
, 
æ
::
mem‹y_‹dî_ªœxed
);

115 
pc_sys_™ch‹
 
xchg
 (0, 
node
);

116 
pc_sys_™ch‹
 
	mcmp
 = 
hód
.
lﬂd
(
æ
::
mem‹y_‹dî_ªœxed
);

117 
	mÁl£
 =
hód
.
com∑ª_exch™ge_wók
(
cmp
, 
xchg
, 
°d
::
mem‹y_‹dî_acq_ªl
));

119 
pc_sys_™ch‹
 
	mcmp2
 = 
cmp
.
ªgi⁄
->
√xt
.
lﬂd
(
æ
::
mem‹y_‹dî_ªœxed
);

120 
pc_sys_™ch‹
 
	mxchg2
;

123 
	mxchg2
 = 
pc_sys_™ch‹
(
cmp2
.
ªf˙t
, 
node
);

125 
	mÁl£
 =
cmp
.
ªgi⁄
->
√xt
.
com∑ª_exch™ge_wók
(
cmp2
, 
xchg2
, 
æ
::
mem‹y_‹dî_ªÀa£
));

127 
pc_sys_™ch‹
 
	m¥ev
 = 
cmp
.
ªgi⁄
->
√xt
.
„tch_add
(cmp.
ªf˙t
 + 1, 
æ
::
mem‹y_‹dî_acq_ªl
);

128 i‡(
	m¥ev
.
	mªf˙t
 =-
cmp
.
ªf˙t
)

129 
sys_dt‹
(
cmp
.
ªgi⁄
);

132 
sys_dt‹
(
pc_ªgi⁄
* 
ªgi⁄
)

134 
	mª£t
 = 0;

135 
pc_ªgi⁄
* 
	mhód
 = 
ªgi⁄
;

136 
pc_ªgi⁄
* 
	mèû
 = 
ªgi⁄
;

137 
pc_sys_™ch‹
 
	mnx
 = 
ªgi⁄
->
√xt
.
lﬂd
(
æ
::
mem‹y_‹dî_ªœxed
);

138 
pc_ªgi⁄
* 
	m√xt
 = 
nx
.
ªgi⁄
;

140 
	m√xt
)

142 
pc_sys_™ch‹
 
	m¥ev
 = 
√xt
->√xt.
„tch_sub
(2, 
æ
::
mem‹y_‹dî_acq_ªl
);

143 i‡(
	m¥ev
.
	mªf˙t
 != 3)

145 
	mèû
 = 
√xt
;

146 
	mnx
 = 
√xt
->√xt.
lﬂd
(
æ
::
mem‹y_‹dî_ªœxed
);

147 
	m√xt
 = 
nx
.
ªgi⁄
;

150 
	mnx
 = 
èû
->
√xt
.
lﬂd
(
æ
::
mem‹y_‹dî_ªœxed
);

151 
	mnx
.
	mªgi⁄
 = 0;

152 
	mèû
->
	m√xt
.
°‹e
(
nx
, 
æ
::
mem‹y_‹dî_ªœxed
);

154 
	mhód
)

156 
	mnx
 = 
hód
->
√xt
.
lﬂd
(
æ
::
mem‹y_‹dî_ªœxed
);

157 
pc_ªgi⁄
* c⁄° 
	m√xt
 = 
nx
.
ªgi⁄
;

159 
pc_ªgi⁄
* 
	mde„r
 = 
hód
->
de„r
.
lﬂd
(
æ
::
mem‹y_‹dî_ªœxed
);

161 
	mnx
 = 
hód
->
√xt
.
lﬂd
(
æ
::
mem‹y_‹dî_ªœxed
);

162 
RL_ASSERT
(
nx
.
ªf˙t
 == 1);

164 i‡(
	mhód
 !&
°ub_ªgi⁄
)

166 
hód
->
de„r
.
°‹e
(de„r, 
æ
::
mem‹y_‹dî_ªœxed
);

167 
	mde„r
 = 
hód
;

171 
	mª£t
 = 1;

174 
	mde„r
)

176 
pc_ªgi⁄
* c⁄° 
	m√xt
 = 
de„r
->de„r.
lﬂd
(
æ
::
mem‹y_‹dî_ªœxed
);

177 
Â_dt‹
(
de„r
);

178 
	mde„r
 = 
√xt
;

180 
	mhód
 = 
√xt
;

183 i‡(
	mª£t
)

185 
	m°ub_ªgi⁄
.
	mde„r
.
°‹e
(0, 
æ
::
mem‹y_‹dî_ªœxed
);

186 
muèã
(&
°ub_ªgi⁄
);

194 
	sfoo_node


196 
pc_node
 
	mp˙
;

197 
	m°d
::
©omic
<
foo_node
*> 
√xt
;

198 
	mæ
::
v¨
<> 
d©a
;

201 
	$foo_node_dt‹
(
pc_node
* 
p˙
)

204 
foo_node
* c⁄° 
n
 = (foo_node*)
p˙
;

205 
dñëe
 
n
;

206 
	}
}

208 
	sfoo_li°


210 
	m°d
::
©omic
<
foo_node
*> 
hód
;

211 
pc_ma°î
 
	mpc
;

213 
foo_li°
()

214 : 
hód
(0)

215 , 
pc
(
foo_node_dt‹
)

220 
	g¥oxy_cﬁÀ˘‹_ã°
 : 
æ
::
ã°_suôe
<
¥oxy_cﬁÀ˘‹_ã°
, 4>

222 
foo_li°
 
	gm_li°
;

224 
bef‹e
()

226 
	gm_li°
.
hód
(
$
) = 0;

229 
a·î
()

231 
foo_node
* 
	gnode
 = 
√w
 foo_node;

232 
	gm_li°
.
	gpc
.
muèã
(&
node
->
p˙
);

235 
thªad
(
ödex
)

237 i‡(
	gödex
 < 2)

239 
pc_ªgi⁄
* 
	gp¸
 = 
m_li°
.
pc
.
acquúe
();

240 
	gi
 = 0; i != 4; ++i)

242 
foo_node
* 
	gnode
 = 
m_li°
.
hód
.
lﬂd
(
æ
::
mem‹y_‹dî_acquúe
);

243 
	gnode
)

245 
foo_node
* c⁄° 
	g√xt
 = 
node
->
√xt
.
lﬂd
(
æ
::
mem‹y_‹dî_acquúe
);

246 
öçå_t
 vﬁ©ûê
	gd©a
 = 
node
->
d©a
(
$
);

247 ()
	gd©a
;

248 
	gnode
 = 
√xt
;

250 i‡(2 =
i
)

252 
m_li°
.
pc
.
ªÀa£
(
p¸
);

253 
	gp¸
 = 
m_li°
.
pc
.
acquúe
();

256 
	gm_li°
.
	gpc
.
ªÀa£
(
p¸
);

260 
pc_ªgi⁄
* 
	gp¸
 = 
m_li°
.
pc
.
acquúe
();

261 
	gi
 = 0; i != 4; ++i)

263 i‡(0 =(
i
 % 2))

265 
foo_node
* 
node
 = 
√w
 foo_node;

266 
	gnode
->
d©a
(
$
) = 1;

267 
foo_node
* 
	gcmp
 = 
m_li°
.
hód
.
lﬂd
(
æ
::
mem‹y_‹dî_ªœxed
);

270 
	gnode
->
	g√xt
.
°‹e
(
cmp
, 
æ
::
mem‹y_‹dî_ªœxed
);

272 
	gÁl£
 =
m_li°
.
hód
.
com∑ª_exch™ge_wók
(
cmp
, 
node
, 
æ
::
mem‹y_‹dî_ªÀa£
));

276 
foo_node
* 
	gnode
 = 
m_li°
.
hód
.
lﬂd
(
æ
::
mem‹y_‹dî_acquúe
);

277 
foo_node
* 
	g√xt
;

280 i‡(0 =
node
)

282 
	g√xt
 = 
node
->
√xt
.
lﬂd
(
æ
::
mem‹y_‹dî_ªœxed
);

284 
	gÁl£
 =
m_li°
.
hód
.
com∑ª_exch™ge_wók
(
node
, 
√xt
, 
æ
::
mem‹y_‹dî_acquúe
));

286 i‡(
	gnode
)

290 
	gm_li°
.
	gpc
.
muèã
(&
node
->
p˙
);

298 i‡(
	gi
 % 2)

300 
	gm_li°
.
	gpc
.
ªÀa£
(
p¸
);

301 
	gp¸
 = 
m_li°
.
pc
.
acquúe
();

304 
	gm_li°
.
	gpc
.
ªÀa£
(
p¸
);

312 
	$maö
()

314 
æ
::
ã°_∑øms
 
∑øms
;

315 
∑øms
.
ôî©i⁄_cou¡
 = 1000;

316 
æ
::
simuœã
<
¥oxy_cﬁÀ˘‹_ã°
>(
∑øms
);

317 
	}
}

	@viper/concurrentqueue-src/tests/relacy/relacy/example/proxy_collector/stdafx.cpp

1 
	~"°dafx.h
"

	@viper/concurrentqueue-src/tests/relacy/relacy/example/proxy_collector/stdafx.h

1 #¥agm®
⁄˚


3 #ifde‡
NDEBUG


4 
	#_SECURE_SCL
 0

	)

7 
	~"../../ªœcy/pch.hµ
"

9 
	~<s°ªam
>

	@viper/concurrentqueue-src/tests/relacy/relacy/example/ref_counting/ref_counting.cpp

1 
	~"°dafx.h
"

3 
	~"../../ªœcy/ªœcy_°d.hµ
"

6 
	src_obje˘


8 
	m°d
::
©omic
<> 
rc
;

9 
	mæ
::
v¨
<> 
d©a
;

11 
acquúe
()

13 
	mrc
.
„tch_add
(1, 
æ
::
mem‹y_‹dî_acquúe
);

16 
ªÀa£
()

18 i‡(1 =
rc
.
„tch_sub
(1, 
æ
::
mem‹y_‹dî_ªÀa£
))

20 
rc
.
lﬂd
(
æ
::
mem‹y_‹dî_acquúe
);

21 
d©a
(
$
) = 0;

22 
dñëe
 
	mthis
;

26 
rc_obje˘
(
d©a
)

27 : 
rc
(1)

28 , 
d©a
(data)

36 
po°_to_ch™√l
(
æ
::
©omic
<
rc_obje˘
*>& 
ch
,Ñc_obje˘* 
obj
)

38 
	gobj
->
acquúe
();

39 
	gæ
::
backoff
 
b
;

42 
rc_obje˘
* 
	gcmp
 = 0;

43 i‡(
	gch
.
com∑ª_exch™ge_wók
(
cmp
, 
obj
, 
æ
::
mem‹y_‹dî_ªÀa£
))

45 
	gb
.
yõld
(
$
);

49 
rc_obje˘
* 
gë_‰om_ch™√l
(
æ
::
©omic
<rc_obje˘*>& 
ch
)

51  
ch
.
exch™ge
(0, 
æ
::
mem‹y_‹dî_acquúe
);

57 
	gªf_cou¡ög_ã°
 : 
æ
::
ã°_suôe
<
ªf_cou¡ög_ã°
, 2>

59 
	g°d
::
©omic
<
rc_obje˘
*> 
ch™√l
;

61 
bef‹e
()

63 
ch™√l
(
$
) = 0;

66 
thªad
(
ödex
)

68 i‡(0 =
ödex
)

70 
rc_obje˘
* 
obj
 = 
√w
Ñc_obje˘ (
ønd
());

71 
po°_to_ch™√l
(
ch™√l
, 
obj
);

72 
	gd©a
 = 
obj
->
d©a
(
$
);

73 ()
	gd©a
;

74 
	gobj
->
ªÀa£
();

76 i‡(1 =
ödex
)

78 
æ
::
backoff
 
b
;

81 
rc_obje˘
* 
	gobj
 = 
gë_‰om_ch™√l
(
ch™√l
);

82 i‡(
	gobj
)

84 
	gd©a
 = 
obj
->
d©a
(
$
);

85 ()
	gd©a
;

86 
	gobj
->
ªÀa£
();

91 
	gb
.
yõld
(
$
);

101 
	gªf_cou¡ög_ã°2
 : 
æ
::
ã°_suôe
<
ªf_cou¡ög_ã°2
, 3>

103 
	g°d
::
©omic
<
rc_obje˘
*> 
ch™√l01
;

104 
	g°d
::
©omic
<
rc_obje˘
*> 
ch™√l02
;

105 
	g°d
::
©omic
<
rc_obje˘
*> 
ch™√l12
;

106 
	g°d
::
©omic
<
rc_obje˘
*> 
ch™√l21
;

108 
bef‹e
()

110 
ch™√l01
(
$
) = 0;

111 
ch™√l02
(
$
) = 0;

112 
ch™√l12
(
$
) = 0;

113 
ch™√l21
(
$
) = 0;

116 
thªad
(
ödex
)

118 i‡(0 =
ödex
)

121 
rc_obje˘
* 
obj1
 = 
√w
Ñc_obje˘ (
ønd
());

122 
po°_to_ch™√l
(
ch™√l01
, 
obj1
);

123 vﬁ©ûê
	gd©a
 = 
obj1
->
d©a
(
$
);

124 ()
	gd©a
;

125 
	gobj1
->
ªÀa£
();

129 
rc_obje˘
* 
	gobj2
 = 
√w
Ñc_obje˘ (
ønd
());

130 
po°_to_ch™√l
(
ch™√l02
, 
obj2
);

131 vﬁ©ûê
	gd©a
 = 
obj2
->
d©a
(
$
);

132 ()
	gd©a
;

133 
	gobj2
->
ªÀa£
();

136 i‡(1 =
ödex
)

138 
æ
::
backoff
 
b
;

139 
boﬁ
 
	gch0
 = 
Ál£
;

140 
boﬁ
 
	gch2
 = 
Ál£
;

141 !
	gch0
 || !
	gch2
)

144 
rc_obje˘
* 
	gobj
 = 
gë_‰om_ch™√l
(
ch™√l01
);

145 i‡(
	gobj
)

147 
po°_to_ch™√l
(
ch™√l12
, 
obj
);

148 vﬁ©ûê
	gd©a
 = 
obj
->
d©a
(
$
);

149 ()
	gd©a
;

150 
	gobj
->
ªÀa£
();

151 
	gch0
 = 
åue
;

155 
	gb
.
yõld
(
$
);

159 
rc_obje˘
* 
	gobj
 = 
gë_‰om_ch™√l
(
ch™√l21
);

160 i‡(
	gobj
)

162 vﬁ©ûê
	gd©a
 = 
obj
->
d©a
(
$
);

163 ()
	gd©a
;

164 
	gobj
->
ªÀa£
();

165 
	gch2
 = 
åue
;

169 
	gb
.
yõld
(
$
);

176 
	gæ
::
backoff
 
b
;

177 
boﬁ
 
	gch0
 = 
Ál£
;

178 
boﬁ
 
	gch1
 = 
Ál£
;

179 !
	gch0
 || !
	gch1
)

182 
rc_obje˘
* 
	gobj
 = 
gë_‰om_ch™√l
(
ch™√l02
);

183 i‡(
	gobj
)

185 
po°_to_ch™√l
(
ch™√l21
, 
obj
);

186 vﬁ©ûê
	gd©a
 = 
obj
->
d©a
(
$
);

187 ()
	gd©a
;

188 
	gobj
->
ªÀa£
();

189 
	gch0
 = 
åue
;

193 
	gb
.
yõld
(
$
);

197 
rc_obje˘
* 
	gobj
 = 
gë_‰om_ch™√l
(
ch™√l12
);

198 i‡(
	gobj
)

200 vﬁ©ûê
	gd©a
 = 
obj
->
d©a
(
$
);

201 ()
	gd©a
;

202 
	gobj
->
ªÀa£
();

203 
	gch1
 = 
åue
;

207 
	gb
.
yõld
(
$
);

218 
	gªf_cou¡ög_ã°3
 : 
æ
::
ã°_suôe
<
ªf_cou¡ög_ã°3
, 2>

220 
	g°d
::
©omic
<
rc_obje˘
*> 
ch™√l
;

222 
bef‹e
()

224 
ch™√l
(
$
) = 0;

227 
thªad
(
ödex
)

229 i‡(0 =
ödex
)

231 
rc_obje˘
* 
obj
 = 
√w
Ñc_obje˘ (
ønd
());

232 
po°_to_ch™√l
(
ch™√l
, 
obj
);

233 vﬁ©ûê
	gd©a
 = 
obj
->
d©a
(
$
);

234 ()
	gd©a
;

235 
	gobj
->
ªÀa£
();

237 i‡(1 =
ödex
)

239 
æ
::
backoff
 
b
;

240 
rc_obje˘
* 
	gobj
 = 0;

243 
	gobj
 = 
gë_‰om_ch™√l
(
ch™√l
);

244 i‡(
	gobj
)

247 
	gb
.
yõld
(
$
);

249 
	gobj
->
acquúe
();

250 
	gobj
->
ªÀa£
();

253 
	gobj
->
ªÀa£
();

261 
	$maö
()

263 
æ
::
ã°_∑øms
 
∑øms
;

264 
∑øms
.
c⁄ãxt_bound
 = 2;

265 
∑øms
.
ôî©i⁄_cou¡
 = 10000;

266 
æ
::
simuœã
<
ªf_cou¡ög_ã°
>(
∑øms
);

267 
°d
::
cout
 << "cou¡: " << 
∑øms
.
°›_ôî©i⁄
 << std::
ídl
;

268 
	}
}

	@viper/concurrentqueue-src/tests/relacy/relacy/example/ref_counting/stdafx.cpp

1 
	~"°dafx.h
"

	@viper/concurrentqueue-src/tests/relacy/relacy/example/ref_counting/stdafx.h

1 #¥agm®
⁄˚


3 #ifde‡
NDEBUG


4 
	#_SECURE_SCL
 0

	)

7 
	~"../../ªœcy/pch.hµ
"

	@viper/concurrentqueue-src/tests/relacy/relacy/example/smr/smr.cpp

1 
	~"°dafx.h
"

3 
	~"../../ªœcy/ªœcy_°d.hµ
"

6 c⁄° 
	gthªad_cou¡
 = 3;

7 c⁄° 
	gnode_cou¡
 = 6;

10 
	gsmr_ã°
 : 
æ
::
ã°_suôe
<
smr_ã°
, 
	gthªad_cou¡
>

12 
	snode


14 
	g°d
::
©omic
<
node
*> 
√xt_
;

15 
	gæ
::
v¨
<> 
d©a_
;

18 
	g°d
::
©omic
<
node
*> 
hód_
;

20 
	g°d
::
©omic
<
node
*> 
hp_
 [
thªad_cou¡
];

21 
	gæ
::
v¨
<
node
*> 
de„r_
 [
thªad_cou¡
][thread_count];

22 
	gæ
::
v¨
<> 
de„r_size_
 [
thªad_cou¡
];

24 
bef‹e
()

26 
	ghód_
.
°‹e
(0, 
°d
::
mem‹y_‹dî_ªœxed
);

28 
size_t
 
	gi
 = 0; i !
thªad_cou¡
; ++i)

30 
	ghp_
[
i
].
°‹e
(0, 
°d
::
mem‹y_‹dî_ªœxed
);

31 
VAR
(
de„r_size_
[
i
]) = 0;

32 
size_t
 
	gj
 = 0; j !
thªad_cou¡
; ++j)

33 
VAR
(
de„r_
[
i
][
j
]) = 0;

37 
push
(
ödex
, 
d©a
)

39 
node
* 
	gn
 = 
√w
Çode ();

40 
	gn
->
VAR
(
d©a_
Ë
d©a
;

41 
node
* 
	g√xt
 = 
hód_
.
lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
);

44 
	gn
->
	g√xt_
.
°‹e
(
√xt
, 
æ
::
mem‹y_‹dî_ªœxed
);

45 i‡(
	ghód_
.
com∑ª_exch™ge_wók
(
√xt
, 
n
, 
æ
::
mem‹y_‹dî_ªÀa£
))

50 
p›
(
ödex
)

52 
node
* 
	gn
 = 0;

55 
	gn
 = 
smr_acquúe
(
ödex
, 
hód_
);

56 i‡(0 =
n
)

58 
node
* 
	g√xt
 = 
n
->
√xt_
.
lﬂd
(
æ
::
mem‹y_‹dî_ªœxed
);

59 i‡(
	ghód_
.
com∑ª_exch™ge_wók
(
n
, 
√xt
, 
æ
::
mem‹y_‹dî_acquúe
))

61 
smr_ªÀa£
(
ödex
);

63 
smr_ªÀa£
(
ödex
);

64 i‡(
	gn
)

66 
	gd©a
 = 
n
->
VAR
(
d©a_
);

67 
smr_de„r
(
ödex
, 
n
);

68  
	gd©a
;

76 
smr_pump
(
ödex
)

78 
node
* 
	ghp
 [
thªad_cou¡
] = {};

79 
size_t
 
	gi
 = 0; i !
thªad_cou¡
; ++i)

81 
	ghp
[
i
] = 
hp_
[i].
lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
);

84 
size_t
 
	gi
 = 0; i !
thªad_cou¡
; ++i)

86 
node
* 
	g¬
 = 
VAR
(
de„r_
[
ödex
][
i
]);

87 i‡(
	g¬
)

89 
size_t
 
	gj
 = 0; j !
thªad_cou¡
; ++j)

91 i‡(
	g¬
 =
hp
[
j
])

93 
¬
 = 0;

97 i‡(
	g¬
)

99 
VAR
(
de„r_
[
ödex
][
i
]) = 0;

100 
VAR
(
de„r_size_
[
ödex
]) -= 1;

101 
dñëe
 
	g¬
;

107 
smr_de„r
(
ödex
, 
node
* 
n
)

109 
	g°d
::
©omic_thªad_„n˚
(
°d
::
mem‹y_‹dî_£q_c°
);

111 
smr_pump
(
ödex
);

113 i‡(
VAR
(
de„r_size_
[
ödex
]Ë=
thªad_cou¡
)

115 
dñëe
 
n
;

119 
boﬁ
 
	gfound
 = 
Ál£
;

120 
size_t
 
	gi
 = 0; i !
thªad_cou¡
; ++i)

122 i‡(
VAR
(
de„r_
[
ödex
][
i
]) == 0)

124 
VAR
(
de„r_
[
ödex
][
i
]Ë
n
;

125 
	gfound
 = 
åue
;

129 
RL_ASSERT
(
found
);

130 
VAR
(
de„r_size_
[
ödex
]) += 1;

134 
node
* 
smr_acquúe
(
ödex
, 
°d
::
©omic
<node*>& 
n
)

136 
node
* 
v
 = 0;

139 
	gv
 = 
n
.
lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
);

140 
	ghp_
[
ödex
].
°‹e
(
v
, 
°d
::
mem‹y_‹dî_ªœxed
);

141 
	g°d
::
©omic_thªad_„n˚
(
°d
::
mem‹y_‹dî_£q_c°
);

142 
node
* 
	gv2
 = 
n
.
lﬂd
(
°d
::
mem‹y_‹dî_acquúe
);

143 i‡(
	gv2
 =
v
)

146  
	gv
;

149 
smr_ªÀa£
(
ödex
)

151 
	ghp_
[
ödex
].
°‹e
(0, 
°d
::
mem‹y_‹dî_ªœxed
);

154 
thªad
(
ödex
)

156 
	gi
 = 0; i !
node_cou¡
; ++i)

158 
push
(
ödex
, index * 
thªad_cou¡
 + 
i
 + 1);

160 
	gi
 = 0; i !
node_cou¡
; ++i)

162 
	gd©a
 = 
p›
(
ödex
);

163 
RL_ASSERT
(0 !
d©a
);

167 
a·î
()

169 
	gi
 = 0; i !::
thªad_cou¡
; ++i)

171 
smr_pump
(
i
);

179 
	$maö
()

181 
æ
::
ã°_∑øms
 
p
;

185 
p
.
ôî©i⁄_cou¡
 = 1000;

186 
æ
::
simuœã
<
smr_ã°
>(
p
);

187 
	}
}

	@viper/concurrentqueue-src/tests/relacy/relacy/example/smr/stdafx.cpp

1 
	~"°dafx.h
"

	@viper/concurrentqueue-src/tests/relacy/relacy/example/smr/stdafx.h

1 #¥agm®
⁄˚


3 #ifde‡
NDEBUG


4 
	#_SECURE_SCL
 0

	)

7 
	#RL_MSVC_OUTPUT


	)

9 
	~"../../ªœcy/pch.hµ
"

	@viper/concurrentqueue-src/tests/relacy/relacy/example/spsc_queue/spsc_queue.cpp

1 
	~"°dafx.h
"

2 
	~"../../ªœcy/ªœcy_°d.hµ
"

4 
	gãm∂©e
<
ty≥«me
 
	gT
>

5 ˛as†
	cn⁄blockög_•sc_queue


7 
	mpublic
:

8 
	$n⁄blockög_•sc_queue
()

10 
node
* 
n
 = 
√w
 
	`node
 ();

11 
	`VAR
(
hód
Ë
n
;

12 
	`VAR
(
èû
Ë
n
;

15 ~
	$n⁄blockög_•sc_queue
()

17 
	`RL_ASSERT
(
	`VAR
(
hód
Ë=VAR(
èû
));

18 
	`dñëe
 (
node
*)
	`VAR
(
hód
);

19 
	}
}

21 
	$íqueue
(
T
 
d©a
)

23 
node
* 
n
 = 
√w
 
	`node
 (
d©a
);

24 
	`VAR
(
hód
)->
√xt
.
	`°‹e
(
n
, 
°d
::
mem‹y_‹dî_ªÀa£
);

25 
	`VAR
(
hód
Ë
n
;

26 
	}
}

28 
boﬁ
 
	$dequeue
(
T
& 
d©a
)

30 
node
* 
t
 = 
	`VAR
(
èû
);

31 
node
* 
n
 = 
t
->
√xt
.
	`lﬂd
(
°d
::
mem‹y_‹dî_acquúe
);

32 i‡(0 =
n
)

33  
Ál£
;

34 
d©a
 = 
n
->
	`VAR
(data);

35 
dñëe
 
t
;

36 
	`VAR
(
èû
Ë
n
;

37  
åue
;

38 
	}
}

40 
	g¥iv©e
:

41 
	snode


43 
°d
::
©omic
<
node
*> 
√xt
;

44 
VAR_T
(
T
Ë
	gd©a
;

46 
node
(
T
 
d©a
 = T())

47 : 
√xt
(0)

48 , 
d©a
(data)

52 
	$VAR_T
(
node
*Ë
hód
;

53 
	$VAR_T
(
node
*Ë
èû
;

54 
	}
};

56 
	gn⁄blockög_•sc_queue_ã°
 : 
æ
::
ã°_suôe
<
n⁄blockög_•sc_queue_ã°
, 2>

58 
	gn⁄blockög_•sc_queue
<> 
	gq
;

60 
thªad
(
thªad_ödex
)

62 i‡(0 =
thªad_ödex
)

64 
q
.
íqueue
(11);

68 
	gd©a
 = 0;

69 
	gÁl£
 =
q
.
dequeue
(
d©a
))

71 
RL_ASSERT
(11 =
d©a
);

77 ˛as†
	cevítcou¡


79 
	mpublic
:

80 
	$evítcou¡
()

81 : 
	`cou¡
(0)

82 , 
	$waôîs
(0)

85 
	$sig«l_ªœxed
()

87 
cmp
 = 
cou¡
.
	`lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
);

88 
	`sig«l_im∂
(
cmp
);

89 
	}
}

91 
	$sig«l
()

93 
cmp
 = 
cou¡
.
	`„tch_add
(0, 
°d
::
mem‹y_‹dî_£q_c°
);

94 
	`sig«l_im∂
(
cmp
);

95 
	}
}

97 
	$gë
()

99 
cmp
 = 
cou¡
.
	`„tch_‹
(0x80000000, 
°d
::
mem‹y_‹dî_acquúe
);

100  
cmp
 & 0x7FFFFFFF;

101 
	}
}

103 
	$waô
(
cmp
)

105 
ec
 = 
cou¡
.
	`lﬂd
(
°d
::
mem‹y_‹dî_£q_c°
);

106 i‡(
cmp
 =(
ec
 & 0x7FFFFFFF))

108 
gu¨d
.
	`lock
(
$
);

109 
ec
 = 
cou¡
.
	`lﬂd
(
°d
::
mem‹y_‹dî_£q_c°
);

110 i‡(
cmp
 =(
ec
 & 0x7FFFFFFF))

112 
	`waôîs
(
$
) += 1;

113 
cv
.
	`waô
(
gu¨d
, 
$
);

115 
gu¨d
.
	`u∆ock
(
$
);

117 
	}
}

119 
	g¥iv©e
:

120 
°d
::
©omic
<> 
cou¡
;

121 
	$VAR_T
(Ë
waôîs
;

122 
°d
::
muãx
 
gu¨d
;

123 
°d
::
c⁄dôi⁄_v¨übÀ
 
cv
;

125 
	$sig«l_im∂
(
cmp
)

127 i‡(
cmp
 & 0x80000000)

129 
gu¨d
.
	`lock
(
$
);

130 
Ál£
 =
cou¡
.
	`com∑ª_exch™ge_wók
(
cmp
,

131 (
cmp
 + 1Ë& 0x7FFFFFFF, 
°d
::
mem‹y_‹dî_ªœxed
));

132 
w
 = 
	`VAR
(
waôîs
);

133 
	`VAR
(
waôîs
) = 0;

134 
gu¨d
.
	`u∆ock
(
$
);

135 i‡(
w
)

136 
cv
.
	`nŸify_Æl
(
$
);

138 
	}
}

143 
	gãm∂©e
<
ty≥«me
 
	gT
>

144 
˛ass
 
	g•sc_queue
 : 
n⁄blockög_•sc_queue
<
T
>

146 
public
:

147 
n⁄blockög_•sc_queue
<
	tT
> 
	tba£_t
;

149 
íqueue
(
T
 
d©a
)

151 
	gba£_t
::
íqueue
(
d©a
);

152 
	gec
.
	gsig«l
 ();

155 
T
 
dequeue
()

157 
T
 
	gd©a
;

158 
boﬁ
 
	gªs
 = 
ba£_t
::
dequeue
(
d©a
);

159 
	gÁl£
 =
ªs
)

161 
cmp
 = 
ec
.
gë
();

162 
	gªs
 = 
ba£_t
::
dequeue
(
d©a
);

163 i‡(
	gªs
)

165 
	gec
.
waô
(
cmp
);

166 
	gªs
 = 
ba£_t
::
dequeue
(
d©a
);

167 i‡(
	gªs
)

170  
	gd©a
;

173 
	g¥iv©e
:

174 
evítcou¡
 
ec
;

178 
	g•sc_queue_ã°
 : 
æ
::
ã°_suôe
<
•sc_queue_ã°
, 2>

180 
	g•sc_queue
<> 
	gq
;

182 
thªad
(
thªad_ödex
)

184 i‡(0 =
thªad_ödex
)

186 
q
.
íqueue
(11);

190 
	gd
 = 
q
.
dequeue
();

191 
RL_ASSERT
(11 =
d
);

197 
	$maö
()

199 
æ
::
simuœã
<
n⁄blockög_•sc_queue_ã°
>();

200 
æ
::
simuœã
<
•sc_queue_ã°
>();

201 
	}
}

	@viper/concurrentqueue-src/tests/relacy/relacy/example/spsc_queue/stdafx.cpp

1 
	~"°dafx.h
"

	@viper/concurrentqueue-src/tests/relacy/relacy/example/spsc_queue/stdafx.h

1 #¥agm®
⁄˚


3 #ifde‡
NDEBUG


4 
	#_SECURE_SCL
 0

	)

9 
	~"../../ªœcy/pch.hµ
"

10 
	~"../../ªœcy/ªœcy_°d.hµ
"

	@viper/concurrentqueue-src/tests/relacy/relacy/example/stack/stack.cpp

1 
	~"°dafx.h
"

3 
	~"../../ªœcy/ªœcy_°d.hµ
"

8 ˛as†
	c°ack


10 
	mpublic
:

11 
	$°ack
()

12 : 
	$hód_
(0)

16 
	$push
(
d©a
)

18 
æ
::
v¨
<
node
*> 
n
 = 
√w
 
	`node
 ();

19 
	`n
(
$
)->
	`d©a_
($Ë
d©a
;

20 
node
* 
√xt
 = 
hód_
.
	`lﬂd
(
æ
::
mem‹y_‹dî_ªœxed
);

23 
	`n
(
$
)->
√xt_
.
	`°‹e
(
√xt
, 
æ
::
mem‹y_‹dî_ªœxed
);

24 i‡(
hód_
.
	`com∑ª_exch™ge_wók
(
√xt
, 
	`n
(
$
), 
æ
::
mem‹y_‹dî_ªÀa£
))

27 
	}
}

29 
	$p›
()

31 
node
* 
n
 = 
hód_
.
	`lﬂd
(
æ
::
mem‹y_‹dî_ªœxed
);

34 i‡(0 =
n
)

36 
node
* 
√xt
 = 
n
->
√xt_
.
	`lﬂd
(
æ
::
mem‹y_‹dî_ªœxed
);

37 i‡(
hód_
.
	`com∑ª_exch™ge_wók
(
n
, 
√xt
, 
æ
::
mem‹y_‹dî_acquúe
))

40 i‡(
n
)

42 
d©a
 = 
n
->
	`d©a_
(
$
);

43 
dñëe
 
n
;

44  
d©a
;

50 
	}
}

52 
	g¥iv©e
:

53 
	snode


55 
°d
::
©omic
<
node
*> 
√xt_
;

56 
	gæ
::
v¨
<> 
d©a_
;

59 
	g°d
::
©omic
<
node
*> 
hód_
;

61 
°ack
(stack const&);

62 
	g°ack
& 
	g›î©‹
 = (
°ack
 const&);

68 
	g°ack_ã°
 : 
æ
::
ã°_suôe
<
°ack_ã°
, 4>

70 
°ack
 
	gs_
;

72 
	g¥odu˚d_cou¡_
;

73 
	gc⁄sumed_cou¡_
;

75 
bef‹e
()

77 
	g¥odu˚d_cou¡_
 = 0;

78 
	gc⁄sumed_cou¡_
 = 0;

81 
a·î
()

83 
	gæ
::
	tã°_suôe
<
	t°ack_ã°
, 4> 
	tba£_t
;

84 
RL_ASSERT
(
ba£_t
::
∑øms
::
thªad_cou¡
 =
¥odu˚d_cou¡_
);

85 
RL_ASSERT
(
ba£_t
::
∑øms
::
thªad_cou¡
 =
c⁄sumed_cou¡_
);

88 
thªad
()

90 
	gs_
.
push
(
ønd
() + 1);

91 
	g¥odu˚d_cou¡_
 += 1;

92 
	gd©a
 = 
s_
.
p›
();

93 
RL_ASSERT
(
d©a
);

94 
	gc⁄sumed_cou¡_
 += 1;

101 
	$maö
()

103 
æ
::
simuœã
<
°ack_ã°
>();

104 
	}
}

	@viper/concurrentqueue-src/tests/relacy/relacy/example/stack/stdafx.cpp

1 
	~"°dafx.h
"

	@viper/concurrentqueue-src/tests/relacy/relacy/example/stack/stdafx.h

1 #¥agm®
⁄˚


3 #ifde‡
NDEBUG


4 
	#_SECURE_SCL
 0

	)

7 
	~"../../ªœcy/pch.hµ
"

	@viper/concurrentqueue-src/tests/relacy/relacy/example/tbb_eventcount/eventcount.cpp

1 
	~"°dafx.h
"

3 
	~"../../ªœcy/wödows.h
"

20 
	~<°ddef.h
>

23 #i‡
deföed
(
WIN32
Ë&& deföed(
_MSC_VER
)

25 
	~<wödows.h
>

26 
	~<öåö.h
>

28 ˛as†
	c£m≠h‹e


30 
	mpublic
:

31 
	$£m≠h‹e
()

33 
h_
 = 
æ
::
	`Cª©eSem≠h‹e
(0, 0, 
LONG_MAX
, 0, 
$
);

36 ~
	$£m≠h‹e
()

38 
æ
::
	`Clo£H™dÀ
(
h_
, 
$
);

39 
	}
}

41 
	$waô
()

43 
æ
::
	`WaôF‹SögÀObje˘
(
h_
,Ñl::
RL_INFINITE
, 
$
);

44 
	}
}

46 
	$po°
()

48 
æ
::
	`Rñó£Sem≠h‹e
(
h_
, 1, 0, 
$
);

49 
	}
}

51 
	g¥iv©e
:

52 
æ
::
HANDLE
 
h_
;

54 
£m≠h‹e
(semaphore const&);

55 
	g£m≠h‹e
& 
	g›î©‹
 = (
£m≠h‹e
 const&);

58 ˛as†
	cmuãx


60 
	mpublic
:

61 
	$muãx
()

63 
æ
::
	`InôülizeCrôiˇlSe˘i⁄
(&
cs_
, 
$
);

66 ~
	$muãx
()

68 
æ
::
	`DñëeCrôiˇlSe˘i⁄
(&
cs_
, 
$
);

69 
	}
}

71 
	$lock
()

73 
æ
::
	`E¡îCrôiˇlSe˘i⁄
(&
cs_
, 
$
);

74 
	}
}

76 
	$u∆ock
()

78 
æ
::
	`LóveCrôiˇlSe˘i⁄
(&
cs_
, 
$
);

79 
	}
}

81 
	g¥iv©e
:

82 
æ
::
CRITICAL_SECTION
 
cs_
;

84 
muãx
(mutex const&);

85 
	gmuãx
& 
	g›î©‹
 = (
muãx
 const&);

95 #ñi‡
deföed
(
POSIX
Ë&& deföed(
GCC
)

97 
	~<±hªad.h
>

98 
	~<£m≠h‹e.h
>

100 ˛as†
	c£m≠h‹e


102 
	mpublic
:

103 
	$£m≠h‹e
()

105 
	`£m_öô
(&
£m_
, 0, 0);

108 ~
	$£m≠h‹e
()

110 
	`£m_de°roy
(&
£m_
);

111 
	}
}

113 
	$waô
()

115 
	`£m_waô
(&
£m_
);

116 
	}
}

118 
	$po°
()

120 
	`£m_po°
(&
£m_
);

121 
	}
}

123 
	g¥iv©e
:

124 
£m_t
 
£m_
;

126 
£m≠h‹e
(semaphore const&);

127 
	g£m≠h‹e
& 
	g›î©‹
 = (
£m≠h‹e
 const&);

130 ˛as†
	cmuãx


132 
	mpublic
:

133 
	$muãx
()

135 
	`±hªad_muãx_öô
(&
muãx_
, 0);

138 ~
	$muãx
()

140 
	`±hªad_muãx_de°roy
(&
muãx_
);

141 
	}
}

143 
	$lock
()

145 
	`±hªad_muãx_lock
(&
muãx_
);

146 
	}
}

148 
	$u∆ock
()

150 
	`±hªad_muãx_u∆ock
(&
muãx_
);

151 
	}
}

153 
	g¥iv©e
:

154 
±hªad_muãx_t
 
muãx_
;

156 
muãx
(mutex const&);

157 
	gmuãx
& 
	g›î©‹
 = (
muãx
 const&);

160 
	$fuŒ_mem‹y_„n˚
()

162 
	`__sync_synchr⁄ize
();

163 
	}
}

171 ˛as†
	clock


173 
	mpublic
:

174 
	$lock
(
muãx
& 
m
)

175 : 
	$m_
(
m
)

177 
m
.
	`lock
();

180 ~
	$lock
()

182 
m_
.
	`u∆ock
();

183 
	}
}

185 
	g¥iv©e
:

186 
muãx
& 
m_
;

188 
lock
(lock const&);

189 
	glock
& 
	g›î©‹
 = (
lock
 const&);

198 ˛as†
	cdli°


200 
	mpublic
:

201 
	snode


203 
æ
::
v¨
<
node
*> 
¥ev_
;

204 
	mæ
::
v¨
<
node
*> 
√xt_
;

206 
node
()

208 
¥ev_
(
$
) = 0;

209 
√xt_
(
$
) = 0;

213 
	$dli°
()

215 
	`ª£t
();

216 
	}
}

218 
	$push
(
node
* 
n
)

220 
size_t
 
s
 = 
	`size_
(
$
).
	`lﬂd
(
æ
::
mem‹y_‹dî_ªœxed
);

221 
	`size_
(
$
).
	`°‹e
(
s
 + 1, 
æ
::
mem‹y_‹dî_ªœxed
);

222 
n
->
	`√xt_
(
$
Ë
hód_
.next_($);

223 
n
->
	`¥ev_
(
$
Ë&
hód_
;

224 
hód_
.
	`√xt_
(
$
)->
	`¥ev_
($Ë
n
;

225 
hód_
.
	`√xt_
(
$
Ë
n
;

226 
	}
}

228 
node
* 
	$p›
()

230 i‡(
	`size_
(
$
).
	`lﬂd
(
æ
::
mem‹y_‹dî_ªœxed
) == 0)

232 
node
* 
n
 = 
hód_
.
	`√xt_
(
$
);

233 
	`ªmove
(
n
);

234  
n
;

235 
	}
}

237 
	$ªmove
(
node
* 
n
)

239 
size_t
 
s
 = 
	`size_
(
$
).
	`lﬂd
(
æ
::
mem‹y_‹dî_ªœxed
);

240 
	`size_
(
$
).
	`°‹e
(
s
 - 1, 
æ
::
mem‹y_‹dî_ªœxed
);

241 
n
->
	`¥ev_
(
$
)->
	`√xt_
($) =Ç->next_($);

242 
n
->
	`√xt_
(
$
)->
	`¥ev_
($) =Ç->prev_($);

243 
	}
}

245 
size_t
 
	$size
() const

247  
	`size_
(
$
).
	`lﬂd
(
æ
::
mem‹y_‹dî_ªœxed
);

248 
	}
}

250 
node
* 
	$begö
()

252  
hód_
.
	`√xt_
(
$
);

253 
	}
}

255 
	$Êush_to
(
dli°
& 
èrgë
)

257 i‡(
	`size_
(
$
).
	`lﬂd
(
æ
::
mem‹y_‹dî_ªœxed
))

259 
èrgë
.
	`size_
(
$
).
	`°‹e
(size_($).
	`lﬂd
(
æ
::
mem‹y_‹dî_ªœxed
));

260 
èrgë
.
hód_
.
	`√xt_
(
$
) = head_.next_($);

261 
èrgë
.
hód_
.
	`√xt_
(
$
)->
	`¥ev_
($) = &target.head_;

262 
èrgë
.
èû_
.
	`¥ev_
(
$
) =Åail_.prev_($);

263 
èrgë
.
èû_
.
	`¥ev_
(
$
)->
	`√xt_
($) = &target.tail_;

267 
èrgë
.
	`ª£t
();

269 
	`ª£t
();

270 
	}
}

272 
boﬁ
 
	$nŸ_œ°
(
node
* 
n
)

274  
n
->
	`√xt_
(
$
) != 0;

275 
	}
}

277 
node
* 
	$gë_√xt
(
node
* 
n
)

279  
n
->
	`√xt_
(
$
);

280 
	}
}

282 
	g¥iv©e
:

283 
æ
::
©omic
<
size_t
> 
size_
;

284 
node
 
	ghód_
;

285 
node
 
	gèû_
;

287 
	$ª£t
()

289 
	`size_
(
$
) = 0;

290 
hód_
.
	`√xt_
(
$
Ë&
èû_
;

291 
hód_
.
	`¥ev_
(
$
) = 0;

292 
èû_
.
	`√xt_
(
$
) = 0;

293 
èû_
.
	`¥ev_
(
$
Ë&
hód_
;

294 
	}
}

296 
dli°
(dlist const&);

297 
	gdli°
& 
	g›î©‹
 = (
dli°
 const&);

304 
	sec_thªad


306 
	mdli°
::
node
 
node_
;

307 
£m≠h‹e
 
	m£ma_
;

308 
	mæ
::
v¨
<> 
ïoch_
;

309 
	mæ
::
©omic
<
boﬁ
> 
ö_waô£t_
;

310 
	mæ
::
v¨
<
boﬁ
> 
•urious_
;

311 
	mæ
::
v¨
<*> 
˘x_
;

313 
ec_thªad
()

315 
ïoch_
(
$
) = 0;

316 
ö_waô£t_
(
$
Ë
Ál£
;

317 
•urious_
(
$
Ë
Ál£
;

318 
˘x_
(
$
) = 0;

321 ~
ec_thªad
()

323 i‡(
•urious_
(
$
))

324 
	m£ma_
.
waô
();

343 
	m¥iv©e
:

344 
ec_thªad
(ec_thread const&);

345 
	mec_thªad
& 
	m›î©‹
 = (
ec_thªad
 const&);

352 ˛as†
	cevítcou¡


354 
	mpublic
:

355 
	$evítcou¡
()

357 
	`ïoch_
(
$
) = 0;

360 
	$¥ï¨e_waô
(
ec_thªad
* 
th
 = 0, * 
˘x
 = 0)

362 
	`RL_ASSERT
(
th
);

364 i‡(
th
->
	`•urious_
(
$
))

366 
th
->
	`•urious_
(
$
Ë
Ál£
;

367 
th
->
£ma_
.
	`waô
();

369 
th
->
	`ö_waô£t_
(
$
).
	`°‹e
(
åue
, 
æ
::
mem‹y_‹dî_ªœxed
);

370 
th
->
	`˘x_
(
$
Ë
˘x
;

372 
lock
 
	`l
 (
mtx_
);

373 
th
->
	`ïoch_
(
$
Ëïoch_($).
	`lﬂd
(
æ
::
mem‹y_‹dî_ªœxed
);

374 
waô£t_
.
	`push
(&
th
->
node_
);

376 
æ
::
	`©omic_thªad_„n˚
(
$
)‘l::
mem‹y_‹dî_£q_c°
);

377 
	}
}

379 
	$commô_waô
(
ec_thªad
* 
th
 = 0)

381 
	`RL_ASSERT
(
th
);

384 i‡(
th
->
	`ö_waô£t_
(
$
).
	`lﬂd
(
æ
::
mem‹y_‹dî_acquúe
))

385 
th
->
£ma_
.
	`waô
();

387 
	`ˇn˚l_waô
(
åue
, 
th
);

388 
	}
}

390 
	$ˇn˚l_waô
(
boﬁ
 , 
ec_thªad
* 
th
 = 0)

392 
	`RL_ASSERT
(
th
);

394 
th
->
	`•urious_
(
$
Ë
åue
;

396 i‡(
th
->
	`ö_waô£t_
(
$
).
	`lﬂd
(
æ
::
mem‹y_‹dî_acquúe
))

398 
lock
 
	`l
 (
mtx_
);

399 i‡(
th
->
	`ö_waô£t_
(
$
).
	`lﬂd
(
æ
::
mem‹y_‹dî_ªœxed
))

403 
th
->
	`ö_waô£t_
(
$
).
	`°‹e
(
Ál£
, 
æ
::
mem‹y_‹dî_ªœxed
);

404 
th
->
	`•urious_
(
$
Ë
Ál£
;

405 
waô£t_
.
	`ªmove
(&
th
->
node_
);

419 
	}
}

421 
	$nŸify_⁄e
()

423 
æ
::
	`©omic_thªad_„n˚
(
$
)‘l::
mem‹y_‹dî_£q_c°
);

424 
	`nŸify_⁄e_ªœxed
();

425 
	}
}

427 
	gãm∂©e
<
ty≥«me
 
	g¥ediˇã_t
>

428 
	$nŸify
(
¥ediˇã_t
 
¥ed
)

430 
æ
::
	`©omic_thªad_„n˚
(
$
)‘l::
mem‹y_‹dî_£q_c°
);

431 
	`nŸify_ªœxed
(
¥ed
);

432 
	}
}

434 
	$nŸify_Æl
()

436 
æ
::
	`©omic_thªad_„n˚
(
$
)‘l::
mem‹y_‹dî_£q_c°
);

437 
	`nŸify_Æl_ªœxed
();

438 
	}
}

440 
	$nŸify_⁄e_ªœxed
()

442 i‡(
waô£t_
.
	`size
() == 0)

444 
dli°
::
node
* 
n
;

446 
lock
 
	`l
 (
mtx_
);

447 
ï
 = 
	`ïoch_
(
$
).
	`lﬂd
(
æ
::
mem‹y_‹dî_ªœxed
);

448 
	`ïoch_
(
$
).
	`°‹e
(
ï
 + 1, 
æ
::
mem‹y_‹dî_ªœxed
);

449 
n
 = 
waô£t_
.
	`p›
();

450 i‡(
n
)

451 
	`to_ec_thªad
(
n
)->
	`ö_waô£t_
(
$
).
	`°‹e
(
Ál£
, 
æ
::
mem‹y_‹dî_ªÀa£
);

453 i‡(
n
)

455 
	`to_ec_thªad
(
n
)->
£ma_
.
	`po°
();

457 
	}
}

459 
	gãm∂©e
<
ty≥«me
 
	g¥ediˇã_t
>

460 
	$nŸify_ªœxed
(
¥ediˇã_t
 
¥ed
)

462 i‡(
waô£t_
.
	`size
() == 0)

464 
dli°
 
ãmp
;

466 
lock
 
	`l
 (
mtx_
);

467 
ï
 = 
	`ïoch_
(
$
).
	`lﬂd
(
æ
::
mem‹y_‹dî_ªœxed
);

468 
	`ïoch_
(
$
).
	`°‹e
(
ï
 + 1, 
æ
::
mem‹y_‹dî_ªœxed
);

469 
size_t
 
size
 = 
waô£t_
.
	`size
();

470 
size_t
 
idx
 = 0;

471 
dli°
::
node
* 
n
 = 
waô£t_
.
	`begö
();

472 
dli°
::
	`nŸ_œ°
(
n
))

474 
dli°
::
node
* 
√xt
 = dli°::
	`gë_√xt
(
n
);

475 
ec_thªad
* 
th
 = 
	`to_ec_thªad
(
n
);

476 i‡(
	`¥ed
(
th
->
	`˘x_
(
$
), 
size
, 
idx
))

478 
waô£t_
.
	`ªmove
(
n
);

479 
ãmp
.
	`push
(
n
);

480 
th
->
	`ö_waô£t_
(
$
).
	`°‹e
(
Ál£
, 
æ
::
mem‹y_‹dî_ªÀa£
);

482 
n
 = 
√xt
;

483 
idx
 += 1;

486 
dli°
::
node
* 
n
 = 
ãmp
.
	`begö
();

487 
dli°
::
	`nŸ_œ°
(
n
))

489 
dli°
::
node
* 
√xt
 = dli°::
	`gë_√xt
(
n
);

490 
	`to_ec_thªad
(
n
)->
£ma_
.
	`po°
();

491 
n
 = 
√xt
;

493 
	}
}

495 
	$nŸify_Æl_ªœxed
()

497 i‡(
waô£t_
.
	`size
() == 0)

499 
dli°
 
ãmp
;

501 
lock
 
	`l
 (
mtx_
);

502 
waô£t_
.
	`Êush_to
(
ãmp
);

503 
dli°
::
node
* 
n
 = 
ãmp
.
	`begö
();

504 
dli°
::
	`nŸ_œ°
(
n
))

506 
	`to_ec_thªad
(
n
)->
	`ö_waô£t_
(
$
).
	`°‹e
(
Ál£
, 
æ
::
mem‹y_‹dî_ªÀa£
);

507 
n
 = 
dli°
::
	`gë_√xt
(n);

509 
ï
 = 
	`ïoch_
(
$
).
	`lﬂd
(
æ
::
mem‹y_‹dî_ªœxed
);

510 
	`ïoch_
(
$
).
	`°‹e
(
ï
 + 1, 
æ
::
mem‹y_‹dî_ªœxed
);

512 
dli°
::
node
* 
n
 = 
ãmp
.
	`begö
();

513 
dli°
::
	`nŸ_œ°
(
n
))

515 
dli°
::
node
* 
√xt
 = dli°::
	`gë_√xt
(
n
);

516 
	`to_ec_thªad
(
n
)->
£ma_
.
	`po°
();

517 
n
 = 
√xt
;

519 
	}
}

521 
˛ass
 
	gwaô_gu¨d
;

523 
	g¥iv©e
:

524 
muãx
 
mtx_
;

525 
dli°
 
	gwaô£t_
;

526 
	gæ
::
©omic
<>
ïoch_
;

528 
ec_thªad
* 
	$to_ec_thªad
(
dli°
::
node
* 
n
)

530  (
ec_thªad
*)((*)
n
 - 
	`off£tof
”c_thªad, 
node_
));

531 
	}
}

533 
evítcou¡
(eventcount const&);

534 
	gevítcou¡
& 
	g›î©‹
 = (
evítcou¡
 const&);

540 ˛as†
	cevítcou¡
::
waô_gu¨d


542 
public
:

543 
	$waô_gu¨d
(
evítcou¡
& 
ec
, 
ec_thªad
* 
th
 = 0, * 
˘x
 = 0)

544 : 
	`ec_
(
ec
)

545 , 
	`th_
(
th
)

546 , 
	$waô_
(
Ál£
)

548 
ec_
.
	`¥ï¨e_waô
(
th_
, 
˘x
);

551 
	$commô_waô
()

553 
	`as£π
(
Ál£
 =
waô_
);

554 
waô_
 = 
åue
;

555 
ec_
.
	`commô_waô
(
th_
);

556 
	}
}

558 ~
	$waô_gu¨d
()

560 i‡(
Ál£
 =
waô_
)

561 
ec_
.
	`ˇn˚l_waô
(
Ál£
, 
th_
);

562 
	}
}

564 
	g¥iv©e
:

565 
evítcou¡
& 
ec_
;

566 
ec_thªad
* 
	gth_
;

567 
boﬁ
 
	gwaô_
;

569 
waô_gu¨d
(wait_guard const&);

570 
	gwaô_gu¨d
& 
	g›î©‹
 = (
waô_gu¨d
 const&);

577 
	sscheduÀr


579 
	stbb_thªad


581 
ec_thªad
 
	mth
;

584 
evítcou¡
 
	mec_
;

585 
tbb_thªad
* 
	mthªads_
;

586 
boﬁ
 vﬁ©ûê
	mis_≥rm™íéy_›í_
;

588 
waô_whûe_poﬁ_is_em±y
(
tbb_thªad
* 
th
)

590 i‡(
	mis_≥rm™íéy_›í_
)

592 
	mevítcou¡
::
waô_gu¨d
 
waô
 (
ec_
, &
th
->th);

593 i‡(
poﬁ_is_em±y
())

594 
	mwaô
.
commô_waô
();

597 
nŸify_about_√w_èsk_avaûabÀ
()

599 
	mec_
.
nŸify_⁄e_ªœxed
();

602 
nŸify_about_√w_èsk_avaûabÀ_wôh_¥e„ªn˚
(
tbb_thªad
* 
¥e„ªn˚
)

604 
	sloˇl


606 
tbb_thªad
* 
	m¥e„ªn˚_
;

607 
boﬁ
 
	mfúed_
;

609 
boﬁ
 
›î©‹
 (Ë(* 
	m˘x
, 
size_t
 
	mcou¡
, size_à
	midx
)

611 
tbb_thªad
* 
	mth
 = (tbb_thªad*)
˘x
;

612 i‡(
	mth
 =
¥e„ªn˚_
)

614 
fúed_
 = 
åue
;

615  
	måue
;

617 i‡(
	midx
 =
cou¡
 - 1 && 
fúed_
 =
Ál£
)

619  
åue
;

623  
	mÁl£
;

627 
	m¥ed
 = {
¥e„ªn˚
};

628 
	mec_
.
nŸify_ªœxed
(
¥ed
);

631 
nŸify_about_li°_of_èsks_avaûabÀ
(
size_t
 
tŸÆ_cou¡
, size_à
¥e„ªn˚_cou¡
, 
tbb_thªad
** 
¥e„ªn˚s
)

633 
	sloˇl


635 
size_t
 
	mªmaö_to_sig«l_
;

636 
size_t
 
	m¥e„ªn˚_cou¡_
;

637 
tbb_thªad
** 
	m¥e„ªn˚s_
;

639 
boﬁ
 
›î©‹
 (Ë(* 
	m˘x
, 
size_t
 
	mcou¡
, size_à
	midx
)

641 
tbb_thªad
* 
	mth
 = (tbb_thªad*)
˘x
;

642 
size_t
 
	mªmaö_ö_waô£t
 = 
cou¡
 - 
idx
;

643 i‡(
	mªmaö_ö_waô£t
 <
ªmaö_to_sig«l_
)

645  
åue
;

649 
size_t
 
	mi
 = 0; i !
¥e„ªn˚_cou¡_
; ++i)

651 i‡(
	m¥e„ªn˚s_
[
i
] =
th
)

653 
ªmaö_to_sig«l_
 -= 1;

654  
	måue
;

658  
	mÁl£
;

661 
	m¥ed
 = {
tŸÆ_cou¡
, 
¥e„ªn˚_cou¡
, 
¥e„ªn˚s
};

662 
	mec_
.
nŸify_ªœxed
(
¥ed
);

665 
boﬁ
 
poﬁ_is_em±y
()

667  
	måue
;

673 
	squeue


675 
	mæ
::
©omic
<> 
¥odu˚r_idx_
;

676 
	mæ
::
©omic
<> 
c⁄sumî_idx_
;

678 
	mæ
::
©omic
<*>* 
buf„r_
;

680 
evítcou¡
 
	mec_
;

682 
queue
()

684 
¥odu˚r_idx_
(
$
) = 0;

685 
c⁄sumî_idx_
(
$
) = 0;

686 
	mbuf„r_
 = 
RL_NEW_ARR
(
æ
::
©omic
<*>, 10);

687 
size_t
 
	mi
 = 0; i != 10; ++i)

688 
	mbuf„r_
[
i
](
	m$
) = 0;

691 ~
queue
()

693 
RL_DELETE_ARR
(
buf„r_
);

696 
íqueue
(* 
d©a
)

698 
	midx
 = 
¥odu˚r_idx_
(
$
).
„tch_add
(1) + 1;

699 
	mbuf„r_
[
idx
](
	m$
).
°‹e
(
d©a
, 
æ
::
mem‹y_‹dî_ªœxed
);

701 
	sloˇl


703 
	midx_
;

704 
boﬁ
 
›î©‹
 (Ë(* 
	m˘x
, 
	msize_t
 , size_t )

706  
	midx_
 =(*(
æ
::
v¨
<>*)
˘x
)(
$
);

709 
	m¥ed
 = {
idx
};

710 
	mec_
.
nŸify
(
¥ed
);

713 * 
dequeue
(
ec_thªad
* 
th
)

715 
	midx
 = 
c⁄sumî_idx_
(
$
).
„tch_add
(1) + 1;

716 * 
	md©a
 = 
buf„r_
[
idx
](
$
).
lﬂd
(
æ
::
mem‹y_‹dî_ªœxed
);

717 i‡(
	md©a
)

718  
	md©a
;

721 
	mæ
::
v¨
<> 
idxv
 (
idx
);

722 
	mevítcou¡
::
waô_gu¨d
 
waô
 (
ec_
, 
th
, &
idxv
);

723 
	md©a
 = 
buf„r_
[
idx
](
$
).
lﬂd
(
æ
::
mem‹y_‹dî_ªœxed
);

724 i‡(
	md©a
)

726  
	md©a
;

728 
	mwaô
.
commô_waô
();

729 
idxv
(
$
) = 0;

730 
	md©a
 = 
buf„r_
[
idx
](
$
).
lﬂd
(
æ
::
mem‹y_‹dî_ªœxed
);

731 i‡(
	md©a
)

733  
	md©a
;

735 
	mæ
::
yõld
(
$
, 1);

743 ˛as†
	cc⁄dôi⁄_v¨übÀ


745 
evítcou¡
 
	mec_
;

747 
	mpublic
:

748 
	$waô
(
muãx
& 
mtx
, 
ec_thªad
* 
th
)

750 
evítcou¡
::
waô_gu¨d
 
	`waô
 (
ec_
, 
th
);

751 
mtx
.
	`u∆ock
();

752 
waô
.
	`commô_waô
();

753 
mtx
.
	`lock
();

756 
	$sig«l
()

758 
ec_
.
	`nŸify_⁄e
();

759 
	}
}

761 
	$brﬂdˇ°
()

763 
ec_
.
	`nŸify_Æl
();

764 
	}
}

768 
	gqueue_ã°
 : 
æ
::
ã°_suôe
<
queue_ã°
, 4>

770 
ec_thªad
 
	gthªads_
 [6];

771 
queue
 
	gq_
;

773 
thªad
(
ödex
)

775 i‡(
	gödex
 < 2)

777 
	gq_
.
íqueue
((*)(
ödex
*2+1));

778 
	gq_
.
íqueue
((*)(
ödex
*2+2));

782 
	gd©a1
 = ()
q_
.
dequeue
(&
thªads_
[
ödex
]);

783 
RL_ASSERT
(
d©a1
 >= 1 && data1 <= 6);

784 
	gd©a2
 = ()
q_
.
dequeue
(&
thªads_
[
ödex
]);

785 
RL_ASSERT
(
d©a2
 >= 1 && data2 <= 6);

790 
	gc⁄dv¨_ã°
 : 
æ
::
ã°_suôe
<
c⁄dv¨_ã°
, 3>

792 
	gæ
::
v¨
<> 
°age
;

793 
c⁄dôi⁄_v¨übÀ
 
	gcv
;

794 
muãx
 
	gmtx
;

795 
ec_thªad
 
	gth
 [3];

797 
bef‹e
()

799 
°age
(
$
) = 0;

802 
thªad
(
ödex
)

804 i‡(0 =
ödex
)

806 
mtx
.
lock
();

807 
°age
(
$
) += 1;

808 
	gcv
.
brﬂdˇ°
();

809 
°age
(
$
) != 2)

810 
cv
.
waô
(
mtx
, &
th
[
ödex
]);

811 
	gmtx
.
u∆ock
();

813 i‡(1 =
ödex
)

815 
mtx
.
lock
();

816 
°age
(
$
) != 1)

817 
cv
.
waô
(
mtx
, &
th
[
ödex
]);

818 
°age
(
$
) += 1;

819 
	gcv
.
brﬂdˇ°
();

820 
	gmtx
.
u∆ock
();

822 i‡(2 =
ödex
)

824 
mtx
.
lock
();

825 
°age
(
$
) != 2)

826 
cv
.
waô
(
mtx
, &
th
[
ödex
]);

827 
	gmtx
.
u∆ock
();

833 
	$maö
()

835 
æ
::
ã°_∑øms
 
p
;

836 
p
.
ôî©i⁄_cou¡
 = 100000000;

839 
æ
::
simuœã
<
queue_ã°
>(
p
);

841 
	}
}

	@viper/concurrentqueue-src/tests/relacy/relacy/example/tbb_eventcount/stdafx.cpp

5 
	~"°dafx.h
"

	@viper/concurrentqueue-src/tests/relacy/relacy/example/tbb_eventcount/stdafx.h

1 #¥agm®
⁄˚


4 
	~"../../ªœcy/pch.hµ
"

5 
	~"../../ªœcy/ªœcy_°d.hµ
"

	@viper/concurrentqueue-src/tests/relacy/relacy/example/ws_deque/stdafx.cpp

1 
	~"°dafx.h
"

	@viper/concurrentqueue-src/tests/relacy/relacy/example/ws_deque/stdafx.h

1 #¥agm®
⁄˚


3 #ifde‡
NDEBUG


4 
	#_SECURE_SCL
 0

	)

7 
	#RL_MSVC_OUTPUT


	)

10 
	~"../../ªœcy/pch.hµ
"

11 
	~"../../ªœcy/ªœcy_°d.hµ
"

	@viper/concurrentqueue-src/tests/relacy/relacy/example/ws_deque/ws_deque.cpp

1 
	~"°dafx.h
"

2 
	~"../../ªœcy/ªœcy_°d.hµ
"

5 
usög
 
«me•a˚
 
	g°d
;

6 
usög
 
	gæ
::
v¨
;

11 
	gãm∂©e
<
ty≥«me
 
	gT
>

12 ˛as†
	cws_deque


14 
	mpublic
:

15 
	$ws_deque
()

17 
	`VAR
(
m_mask
Ë
öôül_size
 - 1;

18 
m_hódIndex
.
	`°‹e
(0, 
mem‹y_‹dî_ªœxed
);

19 
m_èûIndex
.
	`°‹e
(0, 
mem‹y_‹dî_ªœxed
);

20 
	`VAR
(
m_¨øy
Ë
√w
 
©omic
<
T
> [
öôül_size
];

21 
	`VAR
(
m_¨øySize
Ë
öôül_size
;

24 ~
	$ws_deque
()

26 
dñëe
 [] 
	`VAR
(
m_¨øy
);

27 
	}
}

29 
boﬁ
 
	$IsEm±y
() const

31  
m_hódIndex
.
	`lﬂd
(
mem‹y_‹dî_acquúe
)

32 >
m_èûIndex
.
	`lﬂd
(
mem‹y_‹dî_acquúe
);

33 
	}
}

35 
size_t
 
	$Cou¡
() const

37  
m_èûIndex
.
	`lﬂd
(
mem‹y_‹dî_acquúe
)

38 - 
m_hódIndex
.
	`lﬂd
(
mem‹y_‹dî_acquúe
);

39 
	}
}

41 
	$push
(
T
 
ôem
)

43 
size_t
 
èû
 = 
m_èûIndex
.
	`lﬂd
(
mem‹y_‹dî_acquúe
);

44 i‡(
èû
 < 
m_hódIndex
.
	`lﬂd
(
mem‹y_‹dî_acquúe
Ë+ 
	`VAR
(
m_mask
))

46 
	`VAR
(
m_¨øy
)[
èû
 & VAR(
m_mask
)].
	`°‹e
(
ôem
, 
mem‹y_‹dî_ªœxed
);

47 
m_èûIndex
.
	`°‹e
(
èû
 + 1, 
mem‹y_‹dî_ªÀa£
);

51 
m_f‹eignLock
.
	`lock
(
$
);

52 
size_t
 
hód
 = 
m_hódIndex
.
	`lﬂd
(
mem‹y_‹dî_acquúe
);

53 
size_t
 
cou¡
 = 
	`Cou¡
();

54 i‡(
cou¡
 >
	`VAR
(
m_mask
))

56 
size_t
 
¨øySize
 = 
	`m_¨øySize
(
$
);

57 
size_t
 
mask
 = 
	`VAR
(
m_mask
);

58 
©omic
<
T
>* 
√wAºay
 = 
√w
átomic<T> [
¨øySize
 * 2];

59 
©omic
<
T
>* 
¨r
 = 
	`m_¨øy
(
$
);

61 
size_t
 
i
 = 0; i !
cou¡
; ++i)

62 
√wAºay
[
i
].
	`°‹e
(
¨r
[(ò+ 
hód
Ë& 
mask
].
	`lﬂd
(
mem‹y_‹dî_£q_c°
), 
mem‹y_‹dî_ªœxed
);

63 
dñëe
 [] 
	`VAR
(
m_¨øy
);

64 
	`VAR
(
m_¨øy
Ë
√wAºay
;

65 
	`VAR
(
m_¨øySize
Ë
¨øySize
 * 2;

66 
m_hódIndex
.
	`°‹e
(0, 
mem‹y_‹dî_ªÀa£
);

67 
m_èûIndex
.
	`°‹e
(
cou¡
, 
mem‹y_‹dî_ªÀa£
);

68 
èû
 = 
cou¡
;

69 
	`VAR
(
m_mask
Ë(
mask
 * 2) | 1;

71 
	`VAR
(
m_¨øy
)[
èû
 & VAR(
m_mask
)].
	`°‹e
(
ôem
, 
mem‹y_‹dî_ªœxed
);

72 
m_èûIndex
.
	`°‹e
(
èû
 + 1, 
mem‹y_‹dî_ªÀa£
);

73 
m_f‹eignLock
.
	`u∆ock
(
$
);

75 
	}
}

77 
boﬁ
 
	$p›
(
T
& 
ôem
)

79 
size_t
 
èû
 = 
m_èûIndex
.
	`lﬂd
(
mem‹y_‹dî_acquúe
);

80 i‡(
èû
 == 0)

81  
Ál£
;

82 
èû
 -= 1;

83 
m_èûIndex
.
	`°‹e
(
èû
, 
mem‹y_‹dî_ªÀa£
);

84 
	`©omic_thªad_„n˚
(
mem‹y_‹dî_£q_c°
);

85 i‡(
m_hódIndex
.
	`lﬂd
(
mem‹y_‹dî_acquúe
Ë<
èû
)

87 
ôem
 = 
	`VAR
(
m_¨øy
)[
èû
 & VAR(
m_mask
)].
	`lﬂd
(
mem‹y_‹dî_ªœxed
);

88  
åue
;

92 
m_f‹eignLock
.
	`lock
(
$
);

93 i‡(
m_hódIndex
.
	`lﬂd
(
mem‹y_‹dî_acquúe
Ë<
èû
)

95 
ôem
 = 
	`VAR
(
m_¨øy
)[
èû
 & VAR(
m_mask
)].
	`lﬂd
(
mem‹y_‹dî_ªœxed
);

96 
m_f‹eignLock
.
	`u∆ock
(
$
);

97  
åue
;

101 
m_èûIndex
.
	`°‹e
(
èû
 + 1, 
mem‹y_‹dî_ªÀa£
);

102 
m_f‹eignLock
.
	`u∆ock
(
$
);

103  
Ál£
;

106 
	}
}

108 
boﬁ
 
	$°ól
(
T
& 
ôem
)

110 i‡(
Ál£
 =
m_f‹eignLock
.
	`åy_lock
(
$
))

111  
Ál£
;

112 
size_t
 
hód
 = 
m_hódIndex
.
	`lﬂd
(
mem‹y_‹dî_acquúe
);

113 
m_hódIndex
.
	`°‹e
(
hód
 + 1, 
mem‹y_‹dî_ªÀa£
);

114 
	`©omic_thªad_„n˚
(
mem‹y_‹dî_£q_c°
);

115 i‡(
hód
 < 
m_èûIndex
.
	`lﬂd
(
mem‹y_‹dî_acquúe
))

117 
ôem
 = 
	`VAR
(
m_¨øy
)[
hód
 & VAR(
m_mask
)].
	`lﬂd
(
mem‹y_‹dî_ªœxed
);

118 
m_f‹eignLock
.
	`u∆ock
(
$
);

119  
åue
;

123 
m_hódIndex
.
	`°‹e
(
hód
, 
mem‹y_‹dî_ªÀa£
);

124 
m_f‹eignLock
.
	`u∆ock
(
$
);

125  
Ál£
;

127 
	}
}

129 
	g¥iv©e
:

130 
size_t
 c⁄° 
öôül_size
 = 2;

131 
	gv¨
<
	g©omic
<
	gT
>*> 
	gm_¨øy
;

132 
	gv¨
<
	gsize_t
> 
	gm_mask
;

133 
	gv¨
<
	gsize_t
> 
	gm_¨øySize
;

134 
	g©omic
<
	gsize_t
> 
	gm_hódIndex
;

135 
	g©omic
<
	gsize_t
> 
	gm_èûIndex
;

136 
muãx
 
	gm_f‹eignLock
;

142 
	gws_deque_ã°0
 : 
æ
::
ã°_suôe
<
ws_deque_ã°0
, 4>

144 
	gws_deque
<> 
	gq
;

146 
bef‹e
()

150 
a·î
()

154 
thªad
(
ödex
)

156 i‡(0 =
ödex
)

158 
size_t
 
i
 = 0; 
	gi
 != 4; ++i)

160 
	gq
.
push
(10);

163 
size_t
 
	gi
 = 0; i != 5; ++i)

165 
	gp
 = 0;

166 
boﬁ
 
	gªs
 = 
q
.
p›
(
p
);

167 
RL_ASSERT
(10 =
p
 || 
Ál£
 =
ªs
);

170 
size_t
 
	gi
 = 0; i != 4; ++i)

172 
	gq
.
push
(10);

173 
	gp
 = 0;

174 
boﬁ
 
	gªs
 = 
q
.
p›
(
p
);

175 
RL_ASSERT
(10 =
p
 || 
Ál£
 =
ªs
);

178 
size_t
 
	gi
 = 0; i != 4; ++i)

180 
	gq
.
push
(10);

181 
	gq
.
push
(10);

182 
	gp
 = 0;

183 
boﬁ
 
	gªs
 = 
q
.
p›
(
p
);

184 
RL_ASSERT
(10 =
p
 || 
Ál£
 =
ªs
);

185 
	gp
 = 0;

186 
	gªs
 = 
q
.
p›
(
p
);

187 
RL_ASSERT
(10 =
p
 || 
Ál£
 =
ªs
);

190 
size_t
 
	gi
 = 0; i != 4; ++i)

192 
	gq
.
push
(10);

193 
	gq
.
push
(10);

194 
	gq
.
push
(10);

195 
	gp
 = 0;

196 
boﬁ
 
	gªs
 = 
q
.
p›
(
p
);

197 
RL_ASSERT
(10 =
p
 || 
Ál£
 =
ªs
);

200 
size_t
 
	gi
 = 0; i != 14; ++i)

202 
	gq
.
push
(10);

203 
	gp
 = 0;

204 
boﬁ
 
	gªs
 = 
q
.
p›
(
p
);

205 
RL_ASSERT
(10 =
p
 || 
Ál£
 =
ªs
);

210 
size_t
 
	gi
 = 0; i != 4; ++i)

212 
	gp
 = 0;

213 
boﬁ
 
	gªs
 = 
q
.
°ól
(
p
);

214 
RL_ASSERT
(10 =
p
 || 
Ál£
 =
ªs
);

223 
	gws_deque_ã°
 : 
æ
::
ã°_suôe
<
ws_deque_ã°
, 2>

225 
	gws_deque
<> 
	gq
;

226 
boﬁ
 
	g°©e
 [2];

228 
bef‹e
()

230 
	g°©e
[0] = 
åue
;

231 
	g°©e
[1] = 
åue
;

234 
a·î
()

236 
RL_ASSERT
(
°©e
[0] =
Ál£
);

237 
RL_ASSERT
(
°©e
[1] =
Ál£
);

240 
thªad
(
ödex
)

242 i‡(0 =
ödex
)

244 
q
.
push
(1);

245 
	gq
.
push
(2);

247 
	gôem
 = 0;

248 
boﬁ
 
	gªs
 = 
q
.
p›
(
ôem
);

249 
RL_ASSERT
(
ªs
 && 
ôem
 == 2);

250 
RL_ASSERT
(
°©e
[1]);

251 
	g°©e
[1] = 
Ál£
;

253 
	gôem
 = 0;

254 
	gªs
 = 
q
.
p›
(
ôem
);

255 i‡(
	gªs
)

257 
RL_ASSERT
(
°©e
[0]);

258 
	g°©e
[0] = 
Ál£
;

261 
	gôem
 = 0;

262 
	gªs
 = 
q
.
p›
(
ôem
);

263 
RL_ASSERT
(
ªs
 =
Ál£
);

267 
	gôem
 = 0;

268 
boﬁ
 
	gªs
 = 
q
.
°ól
(
ôem
);

269 i‡(
	gªs
)

271 
RL_ASSERT
(
ôem
 == 1);

272 
RL_ASSERT
(
°©e
[0]);

273 
	g°©e
[0] = 
Ál£
;

282 
	$maö
()

284 
æ
::
simuœã
<
ws_deque_ã°0
>();

285 
æ
::
simuœã
<
ws_deque_ã°
>();

286 
	}
}

	@viper/concurrentqueue-src/tests/relacy/relacy/example/ws_deque2/stdafx.cpp

5 
	~"°dafx.h
"

	@viper/concurrentqueue-src/tests/relacy/relacy/example/ws_deque2/stdafx.h

1 #¥agm®
⁄˚


4 
	~"../../ªœcy/pch.hµ
"

5 
	~"../../ªœcy/ªœcy_°d.hµ
"

	@viper/concurrentqueue-src/tests/relacy/relacy/example/ws_deque2/ws_deque.cpp

1 
	~"°dafx.h
"

4 
	spdr


6 
__de˛•ec
(
thªad
Ë
pdr
* 
	mö°™˚
;

8 
size_t
 c⁄° 
	mde„r_limô
 = 1024;

10 (*
	mdt‹_f
)(*);

11 
	síåy_t


13 
dt‹_f
 
	mdt‹
;

14 * 
	m˘x
;

16 
íåy_t
 
	mde„r_li°
 [
de„r_limô
];

17 
size_t
 
	mpos
;

18 
size_t
 
	mpos0
;

19 
size_t
 
	mthªad_cou¡
;

21 
size_t
 
	mth
 [4];

23 
öô
(
size_t
 
cou¡
)

26 
	mö°™˚
 = 
this
;

28 
	mthªad_cou¡
 = 
cou¡
;

29 
	mpos
 = 0;

30 
	mpos0
 = 0;

31 
size_t
 
	mi
 = 0; i !
thªad_cou¡
; ++i)

33 
	mth
[
i
] = 
de„r_limô
;

37 
föi
()

39 
size_t
 
	mi
 = 0; i !
thªad_cou¡
; ++i)

41 
as£π
(
th
[
i
] =
de„r_limô
);

44 
size_t
 
	mi
 = 
pos0
; i !
pos
; ++i)

46 
as£π
(
de„r_li°
[
i
].
dt‹
);

47 
	mde„r_li°
[
i
].
dt‹
(
de„r_li°
[i].
˘x
);

49 
as£π
(
this
 =
ö°™˚
);

50 
	mö°™˚
 = 0;

53 
lock
()

55 
	m°d
::
©omic_thªad_„n˚
(
$
)(
°d
::
mem‹y_‹dî_£q_c°
);

57 
as£π
(
th
[
æ
::
˘x
().
thªadx_
->
ödex_
] =
de„r_limô
);

58 
	mth
[
æ
::
˘x
().
thªadx_
->
ödex_
] = 
pos
;

61 
u∆ock
()

63 
as£π
(
th
[
æ
::
˘x
().
thªadx_
->
ödex_
] !
de„r_limô
);

64 
	mth
[
æ
::
˘x
().
thªadx_
->
ödex_
] = 
de„r_limô
;

65 
pump
();

68 
	mãm∂©e
<
ty≥«me
 
	mT
>

69 
dt‹_im∂
(* 
p
)

71 
RL_DELETE
(
°©ic_ˇ°
<
T
*>(
p
));

74 
	mãm∂©e
<
ty≥«me
 
	mT
>

75 
de„r
(
T
* 
p
)

77 
	m°d
::
©omic_thªad_„n˚
(
$
)(
°d
::
mem‹y_‹dî_£q_c°
);

79 
as£π
(
pos
 < 
de„r_limô
);

80 
	míåy_t
& 
	me
 = 
de„r_li°
[
pos
++];

81 
	me
.
	mdt‹
 = &
pdr
::
dt‹_im∂
<
T
>;

82 
	me
.
	m˘x
 = 
p
;

83 
pump
();

86 
pump
()

88 i‡(
	mpos0
 =
pos
)

90 
size_t
 
	mmö_pos
 = 
pos
;

91 
size_t
 
	mi
 = 0; i !
thªad_cou¡
; ++i)

93 i‡(
	mth
[
i
] < 
	mmö_pos
)

94 
	mmö_pos
 = 
th
[
i
];

96 
size_t
 
	mi
 = 
pos0
; i !
mö_pos
; ++i)

98 
as£π
(
de„r_li°
[
i
].
dt‹
);

99 
	mde„r_li°
[
i
].
dt‹
(
de„r_li°
[i].
˘x
);

101 
	mpos0
 = 
mö_pos
;

105 
pdr
* 
	gpdr
::
ö°™˚
 = 0;

107 
	$pdr_lock
()

109 
	`as£π
(
pdr
::
ö°™˚
);

110 
pdr
::
ö°™˚
->
	`lock
();

111 
	}
}

113 
	$pdr_u∆ock
()

115 
	`as£π
(
pdr
::
ö°™˚
);

116 
pdr
::
ö°™˚
->
	`u∆ock
();

117 
	}
}

119 
	gãm∂©e
<
ty≥«me
 
	gT
>

120 
	$pdr_de„r
(
T
* 
p
)

122 
	`as£π
(
pdr
::
ö°™˚
);

123 
pdr
::
ö°™˚
->
	`de„r
(
p
);

124 
	}
}

128 ˛as†
	cws_deque


130 
	mpublic
:

132 
	$ws_deque
()

134 
bŸtom_
.
	`block_
(
$
) = 0;

135 
bŸtom_
.
ªÆ_block_id_
 = 0;

136 
bŸtom_
.
ªÆ_ödex_
 = 0;

137 
bŸtom_
.
block_id_
 = 0;

138 
bŸtom_
.
ödex_
 = 0;

139 
bŸtom_
.
block_£q_
 = 0;

140 
bŸtom_
.
check_‹dî_
 = 1;

142 
t›
::
öfo
 
t
 = {};

143 
t›_
.
	`block_
(
$
) = 0;

144 
t›_
.
	`öfo_
(
$
Ë
t
;

146 
	`Æloc_block
();

147 
bŸtom_
.
block_id_
 = bŸtom_.
	`block_
(
$
)->
hódî_
.
id_
;

148 
t›_
.
	`block_
(
$
Ë
bŸtom_
.block_($);

149 
t
.
t›_block_id_
 = 
°©ic_ˇ°
<>(
t›_
.
	`block_
(
$
).
	`lﬂd
()->
hódî_
.
id_
);

150 
t
.
bŸtom_block_id_
 = 
°©ic_ˇ°
<>(
t›_
.
	`block_
(
$
).
	`lﬂd
()->
hódî_
.
id_
);

151 
t›_
.
	`öfo_
(
$
Ë
t
;

154 ~
	$ws_deque
()

156 
block
* 
p
 = 
t›_
.
	`block_
(
$
), *
√xt
;Ö;Ö =Çext)

158 
√xt
 = 
p
->
hódî_
.
	`√xt_
(
$
).
	`lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
);

159 
	`RL_DELETE
(
p
);

161 
	}
}

163 
	$push
(* c⁄°& 
i
)

165 
	`pdr_lock
();

167 
	`push_unbÆ™˚d
(
i
);

168 
	`ªbÆ™˚
();

170 
	`pdr_u∆ock
();

171 
	}
}

173 
	$push_unbÆ™˚d
(* 
i
)

175 
	`RL_ASSERT
(
bŸtom_
.
	`block_
(
$
)->
hódî_
.
id_
);

177 
bŸtom_
.
	`block_
(
$
)->
d©a_
[bŸtom_.
ªÆ_ödex_
]($).
	`°‹e
(
i
, 
°d
::
mem‹y_‹dî_ªÀa£
);

179 i‡(
block
::
ôem_cou¡
 - 1 !
bŸtom_
.
ªÆ_ödex_
)

181 
bŸtom_
.
ªÆ_ödex_
 += 1;

185 
	`Æloc_block
();

187 
	}
}

189 
	$ªbÆ™˚
()

191 i‡(0 =--
bŸtom_
.
check_‹dî_
)

193 
	`check_bŸtom
();

195 
	}
}

197 * 
	$p›
()

199 
	`pdr_lock
();

201 
	`ªbÆ™˚
();

202 * 
p
 = 
	`p›_unbÆ™˚d
();

204 
	`pdr_u∆ock
();

206  
p
;

207 
	}
}

209 * 
	$p›_unbÆ™˚d
()

217 i‡((
bŸtom_
.
block_id_
 !bŸtom_.
ªÆ_block_id_


218 || 
bŸtom_
.
ödex_
 !bŸtom_.
ªÆ_ödex_
)

219 && 
bŸtom_
.
ªÆ_ödex_
)

221 
bŸtom_
.
ªÆ_ödex_
 -= 1;

222 * 
i
 = 
bŸtom_
.
	`block_
(
$
)->
d©a_
[bŸtom_.
ªÆ_ödex_
]($).
	`lﬂd
(
°d
::
mem‹y_‹dî_c⁄sume
);

223  
i
;

227  
	`p›_unbÆ™˚d_¶ow
();

229 
	}
}

231 * 
	$p›_unbÆ™˚d_¶ow
()

233 i‡(0 =
bŸtom_
.
ªÆ_ödex_
)

235 i‡(
bŸtom_
.
ªÆ_block_id_
 > bŸtom_.
block_id_
)

237  
	`p›_¶ow
();

246 * 
i
;

247 
p›_check_ªsu…
 c⁄° 
rv
 = 
	`p›_check
(
i
);

248 i‡(
p›_check_c⁄t
 !
rv
)

249  
p›_check_succ
 =
rv
 ? 
i
 : 0;

250  
	`p›_unbÆ™˚d
();

252 
	}
}

254 * 
	$°ól
()

256 
	`pdr_lock
();

258 
ªåy
:

261 
block
* 
ﬁd_b
 = 
t›_
.
	`block_
(
$
).
	`lﬂd
(
°d
::
mem‹y_‹dî_acquúe
);

262 
block
* 
b
 = 
ﬁd_b
;

263 
t›
::
öfo
 
ﬁd
 = 
t›_
.
	`öfo_
(
$
).
	`lﬂd
(
°d
::
mem‹y_‹dî_c⁄sume
);

265 i‡(
ﬁd
.
t›_ödex_
 =ﬁd.
bŸtom_ödex_


266 && 
ﬁd
.
t›_block_id_
 =ﬁd.
bŸtom_block_id_
)

268 
	`pdr_u∆ock
();

272 i‡(
b
->
hódî_
.
id_
 !
ﬁd
.
t›_block_id_
)

276 
b
 = b->
hódî_
.
	`√xt_
(
$
).
	`lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
);

280 i‡(0 =
b
)

281 
ªåy
;

285 
b
->
hódî_
.
id_
 !
ﬁd
.
t›_block_id_
);

287 i‡(
t›_
.
	`block_
(
$
).
	`com∑ª_sw≠
(
ﬁd_b
, 
b
, 
°d
::
mem‹y_‹dî_£q_c°
))

289 
block
* 
cur_b
 = 
ﬁd_b
;

292 
	`pdr_de„r
(
cur_b
);

293 
cur_b
 = cur_b->
hódî_
.
	`√xt_
(
$
).
	`lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
);

295 
cur_b
 !
b
);

299 
block
* 
√xt_block
 = 0;

300 
t›
::
öfo
 
mod
 = 
ﬁd
;

302 * 
i
 = 
b
->
d©a_
[
mod
.
t›_ödex_
](
$
).
	`lﬂd
(
°d
::
mem‹y_‹dî_c⁄sume
);

304 i‡(
block
::
ôem_cou¡
 - 1 =
mod
.
t›_ödex_
)

306 
√xt_block
 = 
b
->
hódî_
.
	`√xt_
(
$
).
	`lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
);

307 
mod
.
t›_block_id_
 += 1;

308 
mod
.
t›_ödex_
 = 0;

312 
mod
.
t›_ödex_
 += 1;

315 i‡(
t›_
.
	`öfo_
(
$
).
	`com∑ª_sw≠
(
ﬁd
, 
mod
, 
°d
::
mem‹y_‹dî_£q_c°
))

317 i‡(
√xt_block
)

319 i‡(
t›_
.
	`block_
(
$
).
	`com∑ª_sw≠
(
b
, 
√xt_block
))

321 
	`pdr_de„r
(
b
);

325 
	`pdr_u∆ock
();

326  
i
;

329 
	}
}

331 
	$size
() const

333 
t›
::
öfo
 c⁄°Å› = 
t›_
.
	`öfo_
(
$
).
	`lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
);

337 i‡(
bŸtom_
.
ªÆ_block_id_
 =
t›
.
t›_block_id_
)

339 c⁄° 
size
 = 
bŸtom_
.
ªÆ_ödex_
 - 
t›
.
t›_ödex_
;

340  
size
;

344 
size
 = 
bŸtom_
.
ªÆ_ödex_
;

345 
size
 +
block
::
ôem_cou¡
 - 
t›
.
t›_ödex_
;

346 
size
 +(
bŸtom_
.
ªÆ_block_id_
 - 
t›
.
t›_block_id_
 - 1Ë* 
block
::
ôem_cou¡
;

347  
size
;

349 
	}
}

351 
	g¥iv©e
:

352 
	sblock


354 
	shódî


356 
°d
::
©omic
<
block
*> 
√xt_
;

357 
	g°d
::
©omic
<
block
*> 
¥ev_
;

358 
ws_deque
* 
	gdeque_
;

359 
	gid_
;

362 ~
hódî
()

364 
	gid_
 = 0;

367 c⁄° 
	gôem_cou¡
 = 2;

369 
hódî
 
	ghódî_
;

370 
	g°d
::
©omic
<*> 
d©a_
 [
ôem_cou¡
];

373 
	sbŸtom


375 
	gæ
::
v¨
<
block
*> 
block_
;

377 
	gcheck_‹dî_
;

379 
	gªÆ_block_id_
;

380 
	gªÆ_ödex_
;

382 
	gblock_id_
;

383 
	gödex_
;

385 
	gblock_£q_
;

388 
	st›


390 
	söfo


392 
	gt›_ödex_
;

393 
	gt›_block_id_
;

394 
	gbŸtom_ödex_
;

395 
	gbŸtom_block_id_
;

397 
boﬁ
 
	g›î©‹
 =(
öfo
 c⁄°& 
x
) const

399  
t›_ödex_
 =
x
.top_index_

400 && 
t›_block_id_
 =
x
.top_block_id_

401 && 
bŸtom_ödex_
 =
x
.bottom_index_

402 && 
bŸtom_block_id_
 =
x
.bottom_block_id_;

405 
‰õnd
 
	g°d
::
o°ªam
& 
›î©‹
 << (
°d
::o°ªam& 
ss
, 
öfo
 c⁄°& 
	gx
)

407  
	gss
 << "{" << 
	gx
.
	gt›_ödex_


408 << "," << 
	gx
.
	gt›_block_id_


409 << "," << 
	gx
.
	gbŸtom_ödex_


410 << "," << 
	gx
.
	gbŸtom_block_id_
 << "}";

414 
	g°d
::
©omic
<
block
*> 
block_
;

415 
	g°d
::
©omic
<
öfo
> 
öfo_
;

418 
bŸtom
 
	gbŸtom_
;

420 
	g∑d1
 [64];

422 
t›
 
	gt›_
;

424 
	g∑d2
 [64];

426 
	$Æloc_block
()

430 
block
* 
b
 = 
bŸtom_
.
	`block_
(
$
Ë? bŸtom_.block_($)->
hódî_
.
	`√xt_
($).
	`lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
) : 0;

431 i‡(0 =
b
)

433 
b
 = 
RL_NEW
 
block
;

434 
b
->
hódî_
.
deque_
 = 
this
;

435 
bŸtom_
.
block_£q_
 += 1;

438 i‡(
bŸtom_
.
block_£q_
 > 0xffffË
__asm
 3;

440 
bŸtom_
.
block_£q_
 &= 0xffff;

441 
b
->
hódî_
.
id_
 = 
bŸtom_
.
block_£q_
;

442 
b
->
hódî_
.
	`¥ev_
(
$
).
	`°‹e
(
bŸtom_
.
	`block_
($), 
°d
::
mem‹y_‹dî_ªœxed
);

443 i‡(
bŸtom_
.
	`block_
(
$
))

444 
bŸtom_
.
	`block_
(
$
)->
hódî_
.
	`√xt_
($).
	`°‹e
(
b
, 
°d
::
mem‹y_‹dî_ªœxed
);

445 
b
->
hódî_
.
	`√xt_
(
$
).
	`°‹e
(0, 
°d
::
mem‹y_‹dî_ªœxed
);

449 
b
 = b;

450 
bŸtom_
.
block_£q_
 += 1;

453 
bŸtom_
.
	`block_
(
$
Ë
b
;

454 
bŸtom_
.
ªÆ_block_id_
 = 
b
->
hódî_
.
id_
;

455 
bŸtom_
.
ªÆ_ödex_
 = 0;

456 
	}
}

458 
	ep›_check_ªsu…
 {
	gp›_check_Áû
, 
	gp›_check_succ
, 
	gp›_check_c⁄t
};

460 
p›_check_ªsu…
 
	$p›_check
(*& 
i
)

462 
	`check_bŸtom
();

464 i‡(
bŸtom_
.
block_id_
 =bŸtom_.
ªÆ_block_id_


465 && 
bŸtom_
.
ödex_
 =bŸtom_.
ªÆ_ödex_
)

467 
t›
::
öfo
 c⁄°Å› = 
t›_
.
	`öfo_
(
$
).
	`lﬂd
(
°d
::
mem‹y_‹dî_£q_c°
);

469 i‡((
bŸtom_
.
block_id_
 =
t›
.
t›_block_id_


470 && 
bŸtom_
.
ödex_
 =()
t›
.
t›_ödex_
 + 1)

471 || (
bŸtom_
.
block_id_
 =()
t›
.
t›_block_id_
 + 1

472 && 
block
::
ôem_cou¡
 - 1 =
t›
.
t›_ödex_


473 && 0 =
bŸtom_
.
ödex_
 ))

475 
__asm
 3;

476 
i
 = 
	`°ól
();

477 i‡(
i
)

478  
p›_check_succ
;

481  
p›_check_Áû
;

484  
p›_check_c⁄t
;

485 
	}
}

487 * 
	$p›_¶ow
()

489 
bŸtom_
.
block_£q_
 -= 1;

490 
bŸtom_
.
block_£q_
 &= 0xffff;

491 
bŸtom_
.
	`block_
(
$
ËbŸtom_.block_($)->
hódî_
.
	`¥ev_
($).
	`lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
);

500 
bŸtom_
.
ªÆ_block_id_
 = bŸtom_.
	`block_
(
$
)->
hódî_
.
id_
;

501 
bŸtom_
.
ªÆ_ödex_
 = 
block
::
ôem_cou¡
 - 1;

503 
t›
::
öfo
 
i
 = 
t›_
.
	`öfo_
(
$
).
	`lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
);

505 
	`RL_ASSERT
(
bŸtom_
.
	`block_
(
$
)->
hódî_
.
id_
 =bŸtom_.
block_£q_
);

506 
	`RL_ASSERT
((
bŸtom_
.
ªÆ_block_id_
 =
i
.
bŸtom_block_id_
 && bŸtom_.
ªÆ_ödex_
 >i.
bŸtom_ödex_
)

507 || (
bŸtom_
.
ªÆ_block_id_
 > 
i
.
bŸtom_block_id_
));

509 * 
v
 = 
bŸtom_
.
	`block_
(
$
)->
d©a_
[
block
::
ôem_cou¡
 - 1]($).
	`lﬂd
(
°d
::
mem‹y_‹dî_c⁄sume
);

510  
v
;

511 
	}
}

513 
	$check_bŸtom
()

520 
t›
::
öfo
 
ﬁd
 = 
t›_
.
	`öfo_
(
$
).
	`lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
);

522 c⁄° 
t›_block_id
 = 
ﬁd
.
t›_block_id_
;

523 c⁄° 
t›_ödex
 = 
ﬁd
.
t›_ödex_
;

525 i‡(
bŸtom_
.
ªÆ_block_id_
 =
t›_block_id


526 && 
bŸtom_
.
ªÆ_ödex_
 =
t›_ödex
)

528 
bŸtom_
.
check_‹dî_
 = 2;

531 c⁄° 
s
 = 
	`size
();

532 c⁄° 
r
 = 
	`ª£rved
();

533 i‡(!(0 =
r
 || (∏> 1 && 4*∏> 3*
s
)))

537 
bŸtom_
.
check_‹dî_
 = 
s
 / 2 + 2;

540 
r2
 = 
s
*3/4 + 1;

541 i‡(
r2
 >
s
)

542 
r2
 = 
s
 - 1;

543 
bŸtom_block_id
;

544 
bŸtom_ödex
;

545 i‡(
r2
 + 
t›_ödex
 < 
block
::
ôem_cou¡
)

547 
bŸtom_block_id
 = 
t›_block_id
;

548 
bŸtom_ödex
 = 
t›_ödex
 + 
r2
;

552 c⁄° 
r3
 = 
r2
 + 
t›_ödex
;

553 
bŸtom_block_id
 = 
t›_block_id
 + 
r3
 / 
block
::
ôem_cou¡
;

554 
bŸtom_ödex
 = 
r3
 % 
block
::
ôem_cou¡
;

556 
t›
::
öfo
 
i
;

557 
i
.
t›_block_id_
 = 
°©ic_ˇ°
<>(
t›_block_id
);

558 
i
.
t›_ödex_
 = 
°©ic_ˇ°
<>(
t›_ödex
);

559 
i
.
bŸtom_block_id_
 = 
°©ic_ˇ°
<>(
bŸtom_block_id
);

560 
i
.
bŸtom_ödex_
 = 
°©ic_ˇ°
<>(
bŸtom_ödex
);

576 i‡(
t›_
.
	`öfo_
(
$
).
	`com∑ª_sw≠
(
ﬁd
, 
i
, 
°d
::
mem‹y_‹dî_£q_c°
))

578 
bŸtom_
.
block_id_
 = 
bŸtom_block_id
;

579 
bŸtom_
.
ödex_
 = 
bŸtom_ödex
;

581 
bŸtom_
.
check_‹dî_
 = 
s
 / 2 + 2;

586 
	}
}

588 
	$ª£rved
() const

590 i‡(
bŸtom_
.
ªÆ_block_id_
 =bŸtom_.
block_id_
)

592 c⁄° 
ª£rved
 = 
bŸtom_
.
ªÆ_ödex_
 - bŸtom_.
ödex_
;

593  
ª£rved
;

597 
ª£rved
 = 
bŸtom_
.
ªÆ_ödex_
;

598 
ª£rved
 +
block
::
ôem_cou¡
 - 
bŸtom_
.
ödex_
;

599 
ª£rved
 +(
bŸtom_
.
ªÆ_block_id_
 - bŸtom_.
block_id_
 - 1Ë* 
block
::
ôem_cou¡
;

600  
ª£rved
;

602 
	}
}

605 
	gx
 = 0;

607 
	gws_deque_ã°
 : 
æ
::
ã°_suôe
<
ws_deque_ã°
, 4>

609 
ws_deque
 
	gq
;

610 
pdr
 
	gp
;

612 
bef‹e
()

614 
	gp
.
öô
(4);

617 
a·î
()

619 
	gp
.
föi
();

622 
thªad
(
ödex
)

624 i‡(0 =
ödex
)

626 
size_t
 
i
 = 0; 
	gi
 != 4; ++i)

628 
	gq
.
push
((*)10);

631 
size_t
 
	gi
 = 0; i != 5; ++i)

633 * 
	gp
 = 
q
.
p›
();

634 
RL_ASSERT
((*)10 =
p
 || 0 ==Ö);

637 
size_t
 
	gi
 = 0; i != 4; ++i)

639 
	gq
.
push
((*)10);

640 * 
	gp
 = 
q
.
p›
();

641 
RL_ASSERT
((*)10 =
p
 || 0 ==Ö);

644 
size_t
 
	gi
 = 0; i != 4; ++i)

646 
	gq
.
push
((*)10);

647 
	gq
.
push
((*)10);

648 * 
	gp
 = 
q
.
p›
();

649 
RL_ASSERT
((*)10 =
p
 || 0 ==Ö);

650 
	gp
 = 
q
.
p›
();

651 
RL_ASSERT
((*)10 =
p
 || 0 ==Ö);

654 
size_t
 
	gi
 = 0; i != 4; ++i)

656 
	gq
.
push
((*)10);

657 
	gq
.
push
((*)10);

658 
	gq
.
push
((*)10);

659 * 
	gp
 = 
q
.
p›
();

660 
RL_ASSERT
((*)10 =
p
 || 0 ==Ö);

663 
size_t
 
	gi
 = 0; i != 14; ++i)

665 
	gq
.
push
((*)10);

666 * 
	gp
 = 
q
.
p›
();

667 
RL_ASSERT
((*)10 =
p
 || 0 ==Ö);

672 
size_t
 
	gi
 = 0; i != 4; ++i)

674 * 
	gp
 = 
q
.
°ól
();

675 
RL_ASSERT
((*)10 =
p
 || 0 ==Ö);

684 
	$maö
()

686 
æ
::
ã°_∑øms
 
p
;

687 
p
.
ôî©i⁄_cou¡
 = 1000000;

688 
æ
::
simuœã
<
ws_deque_ã°
>(
p
);

689 
	}
}

	@viper/concurrentqueue-src/tests/relacy/relacy/relacy/pthread.h

10 #i‚de‡
RL_PTHREAD_IFACE_HPP


11 
	#RL_PTHREAD_IFACE_HPP


	)

12 #ifde‡
_MSC_VER


13 #¥agm®
⁄˚


17 
	~"ªœcy.hµ
"

18 
	~"°dlib/±hªad.hµ
"

	@viper/concurrentqueue-src/tests/relacy/relacy/relacy/windows.h

10 #i‚de‡
RL_WINDOWS_IFACE_HPP


11 
	#RL_WINDOWS_IFACE_HPP


	)

12 #ifde‡
_MSC_VER


13 #¥agm®
⁄˚


17 
	~"ªœcy.hµ
"

18 
	~"°dlib/wödows.hµ
"

	@viper/concurrentqueue-src/tests/relacy/relacy/test/foo.cpp

1 
	~"°dafx.h
"

2 
	~"../ªœcy/ªœcy_°d.hµ
"

3 
	~"../ªœcy/wödows.h
"

4 
	~"../ªœcy/±hªad.h
"

	@viper/concurrentqueue-src/tests/relacy/relacy/test/g++/test.cpp

6 
	~"../../ªœcy/±hªad.h
"

8 ˛as†
	cqueue_t


10 
	mpublic
:

11 
	$queue_t
()

13 
	`VAR
(
hód
) = 0;

14 
	`VAR
(
èû
) = 0;

15 
	`±hªad_muãx_öô
(&
mtx
, 0);

16 
	`±hªad_c⁄d_öô
(&
cv
, 0);

19 ~
	$queue_t
()

21 
	`±hªad_muãx_de°roy
(&
mtx
);

22 
	`±hªad_c⁄d_de°roy
(&
cv
);

23 
	}
}

25 
	$íqueue
(* 
d©a
)

27 
node_t
* 
n
 = 
√w
Çode_t;

28 
n
->
	`VAR
(
√xt
) = 0;

29 
n
->
	`VAR
(
d©a
) = data;

30 
boﬁ
 
was_em±y
 = 
Ál£
;

32 
	`±hªad_muãx_lock
(&
mtx
);

33 i‡(
	`VAR
(
hód
) == 0)

35 
was_em±y
 = 
åue
;

36 
	`VAR
(
hód
Ë
n
;

37 
	`VAR
(
èû
Ë
n
;

41 
	`VAR
(
èû
)->VAR(
√xt
Ë
n
;

42 
	`VAR
(
èû
Ë
n
;

44 
	`±hªad_muãx_u∆ock
(&
mtx
);

46 i‡(
was_em±y
)

47 
	`±hªad_c⁄d_brﬂdˇ°
(&
cv
);

48 
	}
}

50 * 
	$dequeue
()

52 
node_t
* 
n
 = 0;

54 
	`±hªad_muãx_lock
(&
mtx
);

55 
	`VAR
(
hód
) == 0)

56 
	`±hªad_c⁄d_waô
(&
cv
, &
mtx
);

57 
n
 = 
	`VAR
(
hód
);

58 i‡(
n
->
	`VAR
(
√xt
) == 0)

59 
	`VAR
(
èû
) = 0;

60 
	`VAR
(
hód
Ë
n
->VAR(
√xt
);

61 
	`±hªad_muãx_u∆ock
(&
mtx
);

63 * 
d©a
 = 
n
->
	`VAR
(data);

64 
dñëe
 
n
;

65  
d©a
;

66 
	}
}

68 
	g¥iv©e
:

69 
	snode_t


71 
VAR_T
(
node_t
*Ë
√xt
;

72 
VAR_T
(*Ë
	gd©a
;

75 
	$VAR_T
(
node_t
*Ë
hód
;

76 
	$VAR_T
(
node_t
*Ë
èû
;

78 
±hªad_muãx_t
 
mtx
;

79 
±hªad_c⁄d_t
 
cv
;

80 
	}
};

82 * 
	$íqueue_thªad
(* 
˘x
)

84 
queue_t
* 
q
 = 
°©ic_ˇ°
<queue_t*>(
˘x
);

85 
size_t
 
i
 = 0; i != 4; i += 1)

86 
q
->
	`íqueue
((*)(
i
 + 1));

88 
	}
}

90 * 
	$dequeue_thªad
(* 
˘x
)

92 
queue_t
* 
q
 = 
°©ic_ˇ°
<queue_t*>(
˘x
);

93 
size_t
 
i
 = 0; i != 4; i += 1)

95 * 
d©a
 = 
q
->
	`dequeue
();

96 
	`as£π
(()(
uöçå_t
)
d©a
 >= 1 && ()(uintptr_t)data <= 4);

99 
	}
}

101 
	$queue_ã°
()

103 
queue_t
 
q
;

105 
±hªad_t
 
th
 [4];

106 
size_t
 
i
 = 0; i != 2; i += 1)

107 
	`±hªad_¸óã
(&
th
[
i
], 0, 
íqueue_thªad
, &
q
);

108 
size_t
 
i
 = 2; i != 4; i += 1)

109 
	`±hªad_¸óã
(&
th
[
i
], 0, 
dequeue_thªad
, &
q
);

111 * 
ªs
 = 0;

112 
size_t
 
i
 = 0; i != 4; i += 1)

113 
	`±hªad_joö
(
th
[
i
], &
ªs
);

114 
	}
}

116 
	$maö
()

118 
æ
::
ã°_∑øms
 
p
;

119 
p
.
ôî©i⁄_cou¡
 = 100000;

123 
æ
::
execuã
<
queue_ã°
, 4>(
p
);

124 
	}
}

	@viper/concurrentqueue-src/tests/relacy/relacy/test/iriw.cpp

1 
	~"../ªœcy/ªœcy_°d.hµ
"

3 
	gã°
 : 
æ
::
ã°_suôe
<
ã°
, 4> {

4 
	g°d
::
©omic
<> 
x_
;

5 
	g°d
::
©omic
<> 
y_
;

6 
	gr2x
, 
	gr2y
, 
	gr3x
, 
	gr3y
;

8 
bef‹e
() {

9 
	gx_
.
°‹e
(0, 
°d
::
mem‹y_‹dî_ªœxed
);

10 
	gy_
.
°‹e
(0, 
°d
::
mem‹y_‹dî_ªœxed
);

11 
	gr2x
 = 
r2y
 = 
r3x
 = 
r3y
 = 0;

14 
thªad
(
thªad_ödex
) {

15 
	gthªad_ödex
) {

17 
	gx_
.
°‹e
(1, 
°d
::
mem‹y_‹dî_ªœxed
);

20 
y_
.
°‹e
(1, 
°d
::
mem‹y_‹dî_ªœxed
);

23 
r2x
 = 
x_
.
lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
);

24 
	g°d
::
©omic_thªad_„n˚
(
°d
::
mem‹y_‹dî_£q_c°
);

25 
	gr2y
 = 
y_
.
lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
);

28 
r3y
 = 
y_
.
lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
);

29 
	g°d
::
©omic_thªad_„n˚
(
°d
::
mem‹y_‹dî_£q_c°
);

30 
	gr3x
 = 
x_
.
lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
);

35 
a·î
() {

38 
RL_ASSERT
(!(
r2x
 =1 && 
r3y
 =1 && 
r2y
 =0 && 
r3x
 == 0));

42 
	$maö
() {

43 
æ
::
ã°_∑øms
 
p
;

44 
p
.
ôî©i⁄_cou¡
 = 1000000;

45 
æ
::
simuœã
<
ã°
>(
p
);

46 
	}
}

	@viper/concurrentqueue-src/tests/relacy/relacy/test/jtest/jtest.cpp

1 
	~"°dafx.h
"

3 
	~"../../ªœcy/ªœcy_java.hµ
"

9 ˛as†
	c°ack


11 
	mpublic
:

12 
	$°ack
()

13 : 
	$hód_
(0)

17 
	$push
(
d©a
)

19 
æ
::
v¨
<
node
*> 
n
 = 
√w
 
	`node
 ();

20 
	`VAR
(
n
)->VAR(
d©a_
Ë
d©a
;

21 
node
* 
√xt
 = 
hód_
.
	`lﬂd
(
æ
::
mem‹y_‹dî_ªœxed
);

24 
	`VAR
(
n
)->
√xt_
.
	`°‹e
(
√xt
, 
æ
::
mem‹y_‹dî_ªœxed
);

25 i‡(
hód_
.
	`com∑ª_exch™ge_wók
(
√xt
, 
	`VAR
(
n
), 
æ
::
mem‹y_‹dî_ªÀa£
))

28 
	}
}

30 
	$p›
()

32 
node
* 
n
 = 
hód_
.
	`lﬂd
(
æ
::
mem‹y_‹dî_acquúe
);

35 i‡(0 =
n
)

37 
node
* 
√xt
 = 
n
->
√xt_
.
	`lﬂd
(
æ
::
mem‹y_‹dî_ªœxed
);

38 i‡(
hód_
.
	`com∑ª_exch™ge_wók
(
n
, 
√xt
, 
æ
::
mem‹y_‹dî_acquúe
))

41 i‡(
n
)

43 
d©a
 = 
n
->
	`VAR
(
d©a_
);

44  
d©a
;

50 
	}
}

52 
	g¥iv©e
:

53 
	snode


55 
æ
::
©omic
<
node
*> 
√xt_
;

56 
	gæ
::
v¨
<> 
d©a_
;

59 
	gæ
::
©omic
<
node
*> 
hód_
;

61 
°ack
(stack const&);

62 
	g°ack
& 
	g›î©‹
 = (
°ack
 const&);

68 
	g°ack_ã°
 : 
æ
::
ã°_suôe
<
°ack_ã°
, 4>

70 
°ack
 
	gs_
;

72 
	g¥odu˚d_cou¡_
;

73 
	gc⁄sumed_cou¡_
;

75 
bef‹e
()

77 
	g¥odu˚d_cou¡_
 = 0;

78 
	gc⁄sumed_cou¡_
 = 0;

81 
a·î
()

83 
	gæ
::
	tã°_suôe
<
	t°ack_ã°
, 4> 
	tba£_t
;

84 
RL_ASSERT
(
ba£_t
::
∑øms
::
thªad_cou¡
 =
¥odu˚d_cou¡_
);

85 
RL_ASSERT
(
ba£_t
::
∑øms
::
thªad_cou¡
 =
c⁄sumed_cou¡_
);

88 
thªad
()

90 
	gs_
.
push
(
ønd
() + 1);

91 
	g¥odu˚d_cou¡_
 += 1;

92 
	gd©a
 = 
s_
.
p›
();

93 
RL_ASSERT
(
d©a
);

94 
	gc⁄sumed_cou¡_
 += 1;

99 
	gã°_≠i
 : 
æ
::
ã°_suôe
<
ã°_≠i
, 1>

101 
thªad
()

103 
	gæ
::
jvﬁ©ûe
<> 
jv1
;

104 
	gæ
::
jvﬁ©ûe
<> 
jv2
 (2);

105 
	gæ
::
jvﬁ©ûe
<> 
jv3
 (
jv2
(
$
));

106 
	gæ
::
jvﬁ©ûe
<> 
jv4
 (
jv1
);

107 
jv1
(
$
Ë
jv3
($);

108 
jv1
(
$
) = 2;

109 ()
jv1
(
$
);

110 
jv1
(
$
) += 1;

111 
jv1
(
$
) -= 1;

112 
	gx
 = 
jv1
(
$
)++;

113 
	gx
 = 
jv1
(
$
)--;

114 
	gx
 = --
jv1
(
$
);

115 
	gx
 = ++
jv1
(
$
);

117 
	gæ
::
AtomicI¡egî
 
ai
, 
ai2
(1), 
ai3
(
x
), 
ai4
◊i(
$
)), 
ai5
(ai);

118 
	gx
 = 
ai
(
$
).
gë
();

119 
ai
(
$
).
£t
(1);

120 
	gx
 = 
ai
(
$
).
addAndGë
(2);

121 
boﬁ
 
	gb
 = 
ai
(
$
).
com∑ªAndSë
(1, 2);

122 ()
	gb
;

123 
	gx
 = 
ai
(
$
).
addAndGë
(2);

124 
	gx
 = 
ai
(
$
).
gëAndSë
(2);

128 
	gã°_£q_c°_vﬁ©ûes
 : 
æ
::
ã°_suôe
<
ã°_£q_c°_vﬁ©ûes
, 2>

130 
	gæ
::
jvﬁ©ûe
<> 
Êag0
;

131 
	gæ
::
jvﬁ©ûe
<> 
Êag1
;

132 
	gæ
::
jvﬁ©ûe
<> 
tu∫
;

134 
	gæ
::
v¨
<> 
d©a
;

136 
thªad
(
ödex
)

138 i‡(0 =
ödex
)

140 
Êag0
(
$
) = 1;

141 
tu∫
(
$
) = 1;

142 
Êag1
(
$
Ë&& 1 =
tu∫
($))

143 
æ
::
yõld
(1, 
$
);

144 
d©a
(
$
) = 1;

145 
Êag0
(
$
) = 0;

149 
Êag1
(
$
) = 1;

150 
tu∫
(
$
) = 0;

151 
Êag0
(
$
Ë&& 0 =
tu∫
($))

152 
æ
::
yõld
(1, 
$
);

153 
d©a
(
$
) = 2;

154 
Êag1
(
$
) = 0;

159 
	gã°_£q_c°_vﬁ©ûes2
 : 
æ
::
ã°_suôe
<
ã°_£q_c°_vﬁ©ûes2
, 4>

161 
	gæ
::
jvﬁ©ûe
<> 
x
;

162 
	gæ
::
jvﬁ©ûe
<> 
y
;

164 
	gr1
, 
	gr2
, 
	gr3
, 
	gr4
;

166 
bef‹e
()

168 
	gr1
 = 
r2
 = 
r3
 = 
r4
 = 0;

171 
thªad
(
ödex
)

173 i‡(0 =
ödex
)

175 
x
(
$
) = 0;

177 i‡(1 =
ödex
)

179 
y
(
$
) = 0;

181 i‡(2 =
ödex
)

183 
r1
 = 
x
(
$
);

184 
	gr2
 = 
y
(
$
);

186 i‡(3 =
ödex
)

188 
r3
 = 
y
(
$
);

189 
	gr4
 = 
x
(
$
);

193 
a·î
()

195 
RL_ASSERT
(
Ál£
 =(
r1
 && !
r2
 && 
r3
 && !
r4
));

199 
	gãm∂©e
<
	gex≥˘ed
>

200 
	gã°_unôülized_v¨
 : 
æ
::
ã°_suôe
<
ã°_unôülized_v¨
<
ex≥˘ed
>, 2, 
	gæ
::
ã°_ªsu…_u¡û_c⁄dôi⁄_hô
>

202 
æ
::
jv¨
<æ::jv¨<>*> 
www
;

204 
thªad
(
ödex
)

206 i‡(0 =
ödex
)

208 
www
(
$
Ë
√w
 
æ
::
jv¨
<> (1);

212 0 =
www
(
$
))

213 
æ
::
yõld
(1, 
$
);

214 
	gx
 = (*
www
(
$
))($);

215 
RL_UNTIL
(
x
 =
ex≥˘ed
);

221 
	$maö
()

223 
æ
::
simuœã_f
 
ã°s
[] =

226 &
æ
::
simuœã
<
ã°_unôülized_v¨
<1> >,

227 &
æ
::
simuœã
<
ã°_£q_c°_vﬁ©ûes
>,

228 &
æ
::
simuœã
<
ã°_£q_c°_vﬁ©ûes2
>,

229 &
æ
::
simuœã
<
ã°_≠i
>,

230 &
æ
::
simuœã
<
°ack_ã°
>,

233 
size_t
 
i
 = 0; i !(
ã°s
)/(*tests); ++i)

235 
æ
::
o°rög°ªam
 
°ªam
;

236 
æ
::
ã°_∑øms
 
∑øms
;

237 
∑øms
.
ôî©i⁄_cou¡
 = 10000;

238 
∑øms
.
ouçut_°ªam
 = &
°ªam
;

239 
∑øms
.
¥ogªss_°ªam
 = &
°ªam
;

240 
∑øms
.
c⁄ãxt_bound
 = 2;

241 
∑øms
.
executi⁄_dïth_limô
 = 500;

243 i‡(
Ál£
 =
ã°s
[
i
](
∑øms
))

245 
°d
::
cout
 << std::
ídl
;

246 
°d
::
cout
 << "FAILED" << std::
ídl
;

247 
°d
::
cout
 << 
°ªam
.
	`°r
();

252 
°d
::
cout
 << 
∑øms
.
ã°_«me
 << "...OK" << std::
ídl
;

256 
°d
::
cout
 << std::
ídl
 << "SUCCESS" << std::endl;

257 
	}
}

	@viper/concurrentqueue-src/tests/relacy/relacy/test/jtest/stdafx.cpp

1 
	~"°dafx.h
"

	@viper/concurrentqueue-src/tests/relacy/relacy/test/jtest/stdafx.h

1 #¥agm®
⁄˚


3 
	#RL_JAVA_MODE


	)

5 
	~"../../ªœcy/pch.hµ
"

	@viper/concurrentqueue-src/tests/relacy/relacy/test/main.cpp

1 
	~"°dafx.h
"

5 
	~"../ªœcy/ªœcy_°d.hµ
"

6 
	~"mem‹y_‹dî.hµ
"

7 
	~"„n˚.hµ
"

8 
	~"d©a_ø˚.hµ
"

9 
	~"muãx.hµ
"

10 
	~"c⁄dv¨.hµ
"

11 
	~"£m≠h‹e.hµ
"

12 
	~"evít.hµ
"

13 
	~"scheduÀr.hµ
"

14 
	~"com∑ª_sw≠.hµ
"

15 
	~"wfmo.hµ
"

16 
	~"thªad_loˇl.hµ
"

17 
	~"dyn_thªad.hµ
"

18 
	~"mem‹y.hµ
"

19 
	~"±hªad.hµ
"

20 
	~"wödows.hµ
"

21 
	~"addr_hash.hµ
"

22 
	~"fuãx.hµ
"

24 
	~"../ªœcy/wödows.h
"

25 
	~"../ªœcy/±hªad.h
"

27 
	~<c°dio
>

28 
	~<˛imôs
>

30 ˛as†
	cqueue_t


32 
	mpublic
:

33 
	$queue_t
()

35 
	`VAR
(
hód
) = 0;

36 
	`VAR
(
èû
) = 0;

37 
	`±hªad_muãx_öô
(&
mtx
, 0);

38 
	`±hªad_c⁄d_öô
(&
cv
, 0);

41 ~
	$queue_t
()

43 
	`±hªad_muãx_de°roy
(&
mtx
);

44 
	`±hªad_c⁄d_de°roy
(&
cv
);

45 
	}
}

47 
	$íqueue
(* 
d©a
)

49 
node_t
* 
n
 = 
√w
Çode_t;

50 
n
->
	`VAR
(
√xt
) = 0;

51 
n
->
	`VAR
(
d©a
) = data;

52 
boﬁ
 
was_em±y
 = 
Ál£
;

54 
	`±hªad_muãx_lock
(&
mtx
);

55 i‡(
	`VAR
(
hód
) == 0)

57 
was_em±y
 = 
åue
;

58 
	`VAR
(
hód
Ë
n
;

59 
	`VAR
(
èû
Ë
n
;

63 
	`VAR
(
èû
)->VAR(
√xt
Ë
n
;

64 
	`VAR
(
èû
Ë
n
;

66 
	`±hªad_muãx_u∆ock
(&
mtx
);

68 i‡(
was_em±y
)

69 
	`±hªad_c⁄d_brﬂdˇ°
(&
cv
);

70 
	}
}

72 * 
	$dequeue
()

74 
node_t
* 
n
 = 0;

76 
	`±hªad_muãx_lock
(&
mtx
);

77 
	`VAR
(
hód
) == 0)

78 
	`±hªad_c⁄d_waô
(&
cv
, &
mtx
);

79 
n
 = 
	`VAR
(
hód
);

80 i‡(
n
->
	`VAR
(
√xt
) == 0)

81 
	`VAR
(
èû
) = 0;

82 
	`VAR
(
hód
Ë
n
->VAR(
√xt
);

83 
	`±hªad_muãx_u∆ock
(&
mtx
);

85 * 
d©a
 = 
n
->
	`VAR
(data);

86 
dñëe
 
n
;

87  
d©a
;

88 
	}
}

90 
	g¥iv©e
:

91 
	snode_t


93 
VAR_T
(
node_t
*Ë
√xt
;

94 
VAR_T
(*Ë
	gd©a
;

97 
	$VAR_T
(
node_t
*Ë
hód
;

98 
	$VAR_T
(
node_t
*Ë
èû
;

100 
±hªad_muãx_t
 
mtx
;

101 
±hªad_c⁄d_t
 
cv
;

102 
	}
};

104 * 
	$íqueue_thªad
(* 
˘x
)

106 
queue_t
* 
q
 = 
°©ic_ˇ°
<queue_t*>(
˘x
);

107 
size_t
 
i
 = 0; i != 4; i += 1)

108 
q
->
	`íqueue
((*)(
i
 + 1));

110 
	}
}

112 * 
	$dequeue_thªad
(* 
˘x
)

114 
queue_t
* 
q
 = 
°©ic_ˇ°
<queue_t*>(
˘x
);

115 
size_t
 
i
 = 0; i != 4; i += 1)

117 * 
d©a
 = 
q
->
	`dequeue
();

118 
	`as£π
(()(
uöçå_t
)
d©a
 >= 1 && ()(uintptr_t)data <= 4);

121 
	}
}

123 
	$queue_ã°
()

125 
queue_t
 
q
;

127 
±hªad_t
 
th
 [4];

128 
size_t
 
i
 = 0; i != 2; i += 1)

129 
	`±hªad_¸óã
(&
th
[
i
], 0, 
íqueue_thªad
, &
q
);

130 
size_t
 
i
 = 2; i != 4; i += 1)

131 
	`±hªad_¸óã
(&
th
[
i
], 0, 
dequeue_thªad
, &
q
);

133 * 
ªs
 = 0;

134 
size_t
 
i
 = 0; i != 4; i += 1)

135 
	`±hªad_joö
(
th
[
i
], &
ªs
);

136 
	}
}

252 ˛as†
	cªcursive_timed_muãx


254 
	mpublic
:

255 
	$ªcursive_timed_muãx
()

257 
mtx
 = 
	`Cª©eMuãx
(0, 0, 0);

260 ~
	$ªcursive_timed_muãx
()

262 
	`Clo£H™dÀ
(
mtx
);

263 
	}
}

265 
	$lock
(
æ
::
debug_öfo_∑øm
 
öfo
)

267 
æ
::
	`æ_WaôF‹SögÀObje˘
(
mtx
, 
INFINITE
, 
öfo
);

268 
	}
}

270 
boﬁ
 
	$åy_lock
(
æ
::
debug_öfo_∑øm
 
öfo
)

272  
WAIT_OBJECT_0
 =
æ
::
	`æ_WaôF‹SögÀObje˘
(
mtx
, 0, 
öfo
);

273 
	}
}

275 
	$u∆ock
(
æ
::
debug_öfo_∑øm
 
öfo
)

277 
æ
::
	`æ_Rñó£Muãx
(
mtx
, 
öfo
);

278 
	}
}

280 
boﬁ
 
	$timed_lock
(
æ
::
debug_öfo_∑øm
 
öfo
, ... )

282  
WAIT_OBJECT_0
 =
æ
::
	`æ_WaôF‹SögÀObje˘
(
mtx
, 1, 
öfo
);

283 
	}
}

285 
	g¥iv©e
:

286 
HANDLE
 
mtx
;

288 
ªcursive_timed_muãx
(recursive_timed_mutex const&);

289 
	gªcursive_timed_muãx
& 
	g›î©‹
 = (
ªcursive_timed_muãx
 const&);

294 
	gªcursive_timed_muãx_ã°
 : 
æ
::
ã°_suôe
<
ªcursive_timed_muãx_ã°
, 3>

296 
ªcursive_timed_muãx
 
	gmtx
;

297 
VAR_T
(Ë
	gd©a
;

299 
thªad
(
idx
)

301 i‡(
	gidx
)

303 
	gmtx
.
lock
(
$
);

304 
	gmtx
.
lock
(
$
);

305 
VAR
(
d©a
) = 1;

306 
	gmtx
.
u∆ock
(
$
);

307 
	gmtx
.
u∆ock
(
$
);

311 i‡(
	gmtx
.
timed_lock
(
$
))

313 
VAR
(
d©a
) = 2;

314 
	gmtx
.
u∆ock
(
$
);

319 
a·î
()

326 
	$maö
()

376 
æ
::
simuœã_f
 
ã°s
[] =

379 &
æ
::
simuœã
<
ã°_FlushPro˚ssWrôeBuf„rs
>,

381 &
æ
::
simuœã
<
ã°_addr_hash
>,

382 &
æ
::
simuœã
<
ã°_addr_hash2
>,

384 &
æ
::
simuœã
<
ã°_mem‹y_Æloˇti⁄
>,

387 &
æ
::
simuœã
<
ã°_±hªad_thªad
>,

388 &
æ
::
simuœã
<
ã°_±hªad_muãx
>,

389 &
æ
::
simuœã
<
ã°_±hªad_rwlock
>,

390 &
æ
::
simuœã
<
ã°_±hªad_c⁄dv¨
>,

391 &
æ
::
simuœã
<
ã°_±hªad_c⁄dv¨2
>,

392 &
æ
::
simuœã
<
ã°_±hªad_£m
>,

394 &
æ
::
simuœã
<
cohîít_ªad_ªad_ã°
>,

395 &
æ
::
simuœã
<
‹dî_ªœxed_ã°
<0> >,

396 &
æ
::
simuœã
<
‹dî_ªœxed_ã°
<1> >,

397 &
æ
::
simuœã
<
‹dî_ªœxed_ã°
<2> >,

398 &
æ
::
simuœã
<
‹dî_ªœxed_ã°
<3> >,

399 &
æ
::
simuœã
<
‹dî_ªœxed_ã°
<4> >,

400 &
æ
::
simuœã
<
ª‹dî_sögÀ_v¨_ã°
>,

401 &
æ
::
simuœã
<
acq_ªl_ã°
>,

403 &
æ
::
simuœã
<
£q_c°_ã°
<0> >,

404 &
æ
::
simuœã
<
£q_c°_ã°
<1> >,

406 &
æ
::
simuœã
<
ª‹dîög_ã°
>,

407 &
æ
::
simuœã
<
ª‹dîög_ã°2
>,

409 &
æ
::
simuœã
<
ã°_wö_thªad
>,

410 &
æ
::
simuœã
<
ã°_wö_muãx
>,

411 &
æ
::
simuœã
<
ã°_wö_cs
>,

412 &
æ
::
simuœã
<
ã°_wö_c⁄dv¨
>,

413 &
æ
::
simuœã
<
ã°_wö_c⁄dv¨_§w
>,

414 &
æ
::
simuœã
<
ã°_wö_£m
>,

415 &
æ
::
simuœã
<
ã°_wö_evít
>,

417 &
æ
::
simuœã
<
modifiˇti⁄_‹dî_ã°
>,

418 &
æ
::
simuœã
<
å™sôive_ã°
>,

419 &
æ
::
simuœã
<
cc_å™sôive_ã°
>,

420 &
æ
::
simuœã
<
ocˇsi⁄Æ_ã°
>,

423 &
æ
::
simuœã
<
„n˚_synch_ã°
<0, 0> >,

424 &
æ
::
simuœã
<
„n˚_synch_ã°
<1, 0> >,

425 &
æ
::
simuœã
<
„n˚_synch_ã°
<2, 0> >,

426 &
æ
::
simuœã
<
„n˚_synch_ã°
<0, 1> >,

427 &
æ
::
simuœã
<
„n˚_synch_ã°
<1, 1> >,

428 &
æ
::
simuœã
<
„n˚_synch_ã°
<2, 1> >,

430 &
æ
::
simuœã
<
two_„n˚_synch_ã°
>,

431 &
æ
::
simuœã
<
£q_c°_„n˚_ã°
<0> >,

432 &
æ
::
simuœã
<
£q_c°_„n˚_ã°
<1> >,

435 &
æ
::
simuœã
<
ø˚_ld_ld_ã°
>,

436 &
æ
::
simuœã
<
ø˚_ld_°_ã°
>,

437 &
æ
::
simuœã
<
ø˚_°_°_ã°
>,

439 &
æ
::
simuœã
<
ø˚_£q_ld_ld_ã°
>,

440 &
æ
::
simuœã
<
ø˚_£q_ld_°_ã°
>,

441 &
æ
::
simuœã
<
ø˚_£q_°_ld_ã°
>,

442 &
æ
::
simuœã
<
ø˚_£q_°_°_ã°
>,

444 &
æ
::
simuœã
<
ø˚_unöô_ã°
>,

445 &
æ
::
simuœã
<
ø˚_ödúe˘_ã°
>,

448 &
æ
::
simuœã
<
ˇs_•urious_Áû_ã°
<0> >,

449 &
æ
::
simuœã
<
ˇs_•urious_Áû_ã°
<1> >,

450 &
æ
::
simuœã
<
ˇs_•urious_Áû_ã°
<2> >,

453 &
æ
::
simuœã
<
ã°_dódlock
>,

454 &
æ
::
simuœã
<
ã°_dódlock2
>,

455 &
æ
::
simuœã
<
ã°_muãx_de°u˘i⁄
>,

456 &
æ
::
simuœã
<
ã°_muãx_de°u˘i⁄2
>,

457 &
æ
::
simuœã
<
ã°_muãx_ªcursi⁄
>,

458 &
æ
::
simuœã
<
ã°_muãx_ªcursi⁄_îr‹
>,

459 &
æ
::
simuœã
<
ã°_muãx_u∆ock_îr‹
>,

460 &
æ
::
simuœã
<
ã°_muãx_Àak
>,

461 &
æ
::
simuœã
<
ã°_muãx
>,

462 &
æ
::
simuœã
<
ã°_muãx_åy_lock
>,

465 &
æ
::
simuœã
<
ã°_fuãx
>,

466 &
æ
::
simuœã
<
ã°_fuãx_dódlock
>,

467 &
æ
::
simuœã
<
ã°_fuãx_sync1
>,

468 &
æ
::
simuœã
<
ã°_fuãx_sync2
>,

469 &
æ
::
simuœã
<
ã°_fuãx_öå
>,

472 &
æ
::
simuœã
<
ã°_c⁄dv¨
>,

473 &
æ
::
simuœã
<
ã°_c⁄dv¨2
>,

476 &
æ
::
simuœã
<
ã°_£m≠h‹e
>,

477 &
æ
::
simuœã
<
ã°_£m≠h‹e_©omic
>,

480 &
æ
::
simuœã
<
ã°_evít_auto
>,

481 &
æ
::
simuœã
<
ã°_evít_m™uÆ
>,

482 &
æ
::
simuœã
<
ã°_evít_©omic
>,

485 &
æ
::
simuœã
<
ã°_wfmo_Æl
>,

486 &
æ
::
simuœã
<
ã°_wfmo_sögÀ
>,

487 &
æ
::
simuœã
<
ã°_wfmo_timeout
>,

488 &
æ
::
simuœã
<
ã°_wfmo_åy
>,

489 &
æ
::
simuœã
<
ã°_wfmo_mixed
>,

490 &
æ
::
simuœã
<
ã°_wfmo_mixed2
>,

491 &
æ
::
simuœã
<
ã°_wfmo_evít_Æl
>,

492 &
æ
::
simuœã
<
ã°_wfmo_evít_™y
>,

493 &
æ
::
simuœã
<
ã°_wfmo_©omic
>,

496 &
æ
::
simuœã
<
és_basic_ã°
>,

497 &
æ
::
simuœã
<
és_ª£t_ã°
>,

498 &
æ
::
simuœã
<
és_globÆ_ã°
>,

499 &
æ
::
simuœã
<
és_wö32_ã°
>,

502 &
æ
::
simuœã
<
dyn_thªad_basic_ã°
>,

503 &
æ
::
simuœã
<
dyn_thªad_wö32_ã°
>,

504 &
æ
::
simuœã
<
dyn_thªad_visibûôy_ã°
>,

508 
size_t
 
sched
 = 0; sched !
æ
::
sched_cou¡
; ++sched)

510 
°d
::
cout
 << 
	`f‹m©
((
æ
::
scheduÀr_ty≥_e
)
sched
Ë<< "Åe°s:" << std::
ídl
;

512 
size_t
 
i
 = 0; i !(
ã°s
)/(*tests); ++i)

515 i‡(
sched
 =
æ
::
sched_fuŒ


516 && (
ã°s
[
i
] =(
æ
::
simuœã_f
)&æ::
simuœã
<
ã°_±hªad_c⁄dv¨
>

517 || 
ã°s
[
i
] =(
æ
::
simuœã_f
)&æ::
simuœã
<
ã°_wö_c⁄dv¨
>))

520 
æ
::
o°rög°ªam
 
°ªam
;

521 
æ
::
ã°_∑øms
 
∑øms
;

522 
∑øms
.
£¨ch_ty≥
 = (
æ
::
scheduÀr_ty≥_e
)
sched
;

523 
∑øms
.
ôî©i⁄_cou¡
 =

524 (
∑øms
.
ã°_ªsu…
 =
æ
::
ã°_ªsu…_suc˚ss
 ? 100000 : 500);

525 
∑øms
.
ouçut_°ªam
 = &
°ªam
;

526 
∑øms
.
¥ogªss_°ªam
 = &
°ªam
;

527 
∑øms
.
c⁄ãxt_bound
 = 2;

528 
∑øms
.
executi⁄_dïth_limô
 = 500;

530 i‡(
Ál£
 =
ã°s
[
i
](
∑øms
))

532 
°d
::
cout
 << std::
ídl
;

533 
°d
::
cout
 << "FAILED" << std::
ídl
;

534 
°d
::
cout
 << 
°ªam
.
	`°r
();

535 
°d
::
cout
 << std::
ídl
;

540 
°d
::
cout
 << 
∑øms
.
ã°_«me
 << "...OK" << std::
ídl
;

543 
°d
::
cout
 << std::
ídl
;

546 
æ
::
simuœã_f
 
scheduÀr_ã°s
[] =

548 &
æ
::
simuœã
<
livñock_ã°
>,

549 &
æ
::
simuœã
<
yõld_livñock_ã°
>,

552 
°d
::
cout
 << "fuŒ sórch scheduÀ∏ã°s:" << std::
ídl
;

553 
size_t
 
i
 = 0; i !(
scheduÀr_ã°s
)/(*scheduler_tests); ++i)

555 
æ
::
o°rög°ªam
 
°ªam
;

556 
æ
::
ã°_∑øms
 
∑øms
;

557 
∑øms
.
£¨ch_ty≥
 = 
æ
::
sched_fuŒ
;

558 
∑øms
.
ouçut_°ªam
 = &
°ªam
;

559 
∑øms
.
¥ogªss_°ªam
 = &
°ªam
;

560 
∑øms
.
c⁄ãxt_bound
 = 2;

561 
∑øms
.
executi⁄_dïth_limô
 = 500;

563 i‡(
Ál£
 =
scheduÀr_ã°s
[
i
](
∑øms
))

565 
°d
::
cout
 << std::
ídl
;

566 
°d
::
cout
 << "FAILED" << std::
ídl
;

567 
°d
::
cout
 << 
°ªam
.
	`°r
();

572 
°d
::
cout
 << 
∑øms
.
ã°_«me
 << "...OK" << std::
ídl
;

575 
°d
::
cout
 << std::
ídl
;

577 
°d
::
cout
 << "SUCCESS" << std::
ídl
;

578 
	}
}

	@viper/concurrentqueue-src/tests/relacy/relacy/test/ntest/ntest.cpp

1 
	~"°dafx.h
"

2 
	~"../../ªœcy/ªœcy_˛i.hµ
"

4 
usög
 
	gæ
::
nv¨
;

5 
usög
 
	gæ
::
nvﬁ©ûe
;

6 
usög
 
	gæ
::
muãx
;

8 
	gãm∂©e
<
ty≥«me
 
	gT
>

9 ˛as†
	cws_deque


11 
	mpublic
:

12 
	$ws_deque
()

14 
	`m_mask
(
$
Ë
öôül_size
 - 1;

15 
	`m_hódIndex
(
$
) = 0;

16 
	`m_èûIndex
(
$
) = 0;

17 
	`m_¨øy
(
$
Ë
√w
 
nv¨
<
T
> [
öôül_size
];

18 
	`m_¨øySize
(
$
Ë
öôül_size
;

21 
boﬁ
 
	$IsEm±y
()

23  
	`m_hódIndex
(
$
Ë>
	`m_èûIndex
($);

24 
	}
}

26 
size_t
 
	$Cou¡
()

28  
	`m_èûIndex
(
$
Ë- 
	`m_hódIndex
($);

29 
	}
}

31 
	$push
(
T
 
ôem
)

33 
size_t
 
èû
 = 
	`m_èûIndex
(
$
);

37 i‡(
èû
 <
	`m_hódIndex
(
$
Ë+ 
	`m_mask
($))

39 
	`m_¨øy
(
$
)[
èû
 & 
	`m_mask
($)]($Ë
ôem
;

40 
	`m_èûIndex
(
$
Ë
èû
 + 1;

44 
m_f‹eignLock
.
	`lock
(
$
);

45 
size_t
 
hód
 = 
	`m_hódIndex
(
$
);

46 
size_t
 
cou¡
 = 
	`Cou¡
();

47 i‡(
cou¡
 >
	`m_mask
(
$
))

49 
size_t
 
¨øySize
 = 
	`m_¨øySize
(
$
);

50 
size_t
 
mask
 = 
	`m_mask
(
$
);

51 
nv¨
<
T
>* 
√wAºay
 = 
√w
Çv¨<T> [
¨øySize
 * 2];

52 
nv¨
<
T
>* 
¨r
 = 
	`m_¨øy
(
$
);

56 
size_t
 
i
 = 0; i !
cou¡
; ++i)

57 
√wAºay
[
i
](
$
Ë
¨r
[(ò+ 
hód
Ë& 
mask
]($);

58 
	`m_¨øy
(
$
Ë
√wAºay
;

59 
	`m_¨øySize
(
$
Ë
¨øySize
 * 2;

60 
	`m_hódIndex
(
$
) = 0;

61 
	`m_èûIndex
(
$
Ë
cou¡
;

62 
èû
 = 
cou¡
;

63 
	`m_mask
(
$
Ë(
mask
 * 2) | 1;

65 
	`m_¨øy
(
$
)[
èû
 & 
	`m_mask
($)]($Ë
ôem
;

66 
	`m_èûIndex
(
$
Ë
èû
 + 1;

67 
m_f‹eignLock
.
	`u∆ock
(
$
);

69 
	}
}

71 
boﬁ
 
	$p›
(
T
& 
ôem
)

73 
size_t
 
èû
 = 
	`m_èûIndex
(
$
);

78 i‡(
èû
 == 0)

79  
Ál£
;

80 
èû
 -= 1;

81 
æ
::
I¡îlocked
::
	`Exch™ge
(
m_èûIndex
, 
èû
, 
$
);

82 i‡(
	`m_hódIndex
(
$
Ë<
èû
)

84 
ôem
 = 
	`m_¨øy
(
$
)[
èû
 & 
	`m_mask
($)]($);

85  
åue
;

89 
m_f‹eignLock
.
	`lock
(
$
);

90 i‡(
	`m_hódIndex
(
$
Ë<
èû
)

92 
ôem
 = 
	`m_¨øy
(
$
)[
èû
 & 
	`m_mask
($)]($);

93 
m_f‹eignLock
.
	`u∆ock
(
$
);

94  
åue
;

98 
	`m_èûIndex
(
$
Ë
èû
 + 1;

99 
m_f‹eignLock
.
	`u∆ock
(
$
);

100  
Ál£
;

103 
	}
}

105 
boﬁ
 
	$°ól
(
T
& 
ôem
)

107 i‡(
Ál£
 =
m_f‹eignLock
.
	`åy_lock
(
$
))

108  
Ál£
;

109 
size_t
 
hód
 = 
	`m_hódIndex
(
$
);

110 
æ
::
I¡îlocked
::
	`Exch™ge
(
m_hódIndex
, 
hód
 + 1, 
$
);

111 i‡(
hód
 < 
	`m_èûIndex
(
$
))

113 
ôem
 = 
	`m_¨øy
(
$
)[
hód
 & 
	`m_mask
($)]($);

114 
m_f‹eignLock
.
	`u∆ock
(
$
);

115  
åue
;

119 
	`m_hódIndex
(
$
Ë
hód
;

120 
m_f‹eignLock
.
	`u∆ock
(
$
);

121  
Ál£
;

123 
	}
}

125 
	g¥iv©e
:

126 
size_t
 c⁄° 
öôül_size
 = 2;

127 
	gnv¨
<nv¨<
	gT
>*> 
	gm_¨øy
;

128 
	gnv¨
<
	gsize_t
> 
	gm_mask
;

129 
	gnv¨
<
	gsize_t
> 
	gm_¨øySize
;

130 
	gnvﬁ©ûe
<
	gsize_t
> 
	gm_hódIndex
;

131 
	gnvﬁ©ûe
<
	gsize_t
> 
	gm_èûIndex
;

132 
muãx
 
	gm_f‹eignLock
;

135 
	gws_deque_ã°
 : 
æ
::
ã°_suôe
<
ws_deque_ã°
, 2>

137 
	gws_deque
<> 
	gq
;

138 
boﬁ
 
	g°©e
 [2];

140 
bef‹e
()

142 
	g°©e
[0] = 
åue
;

143 
	g°©e
[1] = 
åue
;

146 
a·î
()

148 
RL_ASSERT
(
°©e
[0] =
Ál£
);

149 
RL_ASSERT
(
°©e
[1] =
Ál£
);

152 
thªad
(
ödex
)

154 i‡(0 =
ödex
)

156 
q
.
push
(1);

157 
	gq
.
push
(2);

159 
	gôem
 = 0;

160 
boﬁ
 
	gªs
 = 
q
.
p›
(
ôem
);

161 
RL_ASSERT
(
ªs
 && 
ôem
 == 2);

162 
RL_ASSERT
(
°©e
[1]);

163 
	g°©e
[1] = 
Ál£
;

165 
	gôem
 = 0;

166 
	gªs
 = 
q
.
p›
(
ôem
);

167 i‡(
	gªs
)

169 
RL_ASSERT
(
°©e
[0]);

170 
	g°©e
[0] = 
Ál£
;

173 
	gôem
 = 0;

174 
	gªs
 = 
q
.
p›
(
ôem
);

175 
RL_ASSERT
(
ªs
 =
Ál£
);

179 
	gôem
 = 0;

180 
boﬁ
 
	gªs
 = 
q
.
°ól
(
ôem
);

181 i‡(
	gªs
)

183 
RL_ASSERT
(
ôem
 == 1);

184 
RL_ASSERT
(
°©e
[0]);

185 
	g°©e
[0] = 
Ál£
;

193 
	gã°_≠i
 : 
æ
::
ã°_suôe
<
ã°_≠i
, 1>

195 
thªad
()

197 
	gæ
::
nv¨
<> 
cv1
, 
cv2
(3), 
cv3
(cv1(
$
)), 
cv4
(cv1);

198 
cv1
(
$
Ë
cv2
($);

199 
cv1
(
$
) = 1;

200 ()
cv1
(
$
);

201 
cv1
(
$
) += 1;

202 
cv1
(
$
) -= 1;

203 
cv1
(
$
)++;

204 
cv1
(
$
)--;

205 ++
cv1
(
$
);

206 --
cv1
(
$
);

208 
	gx
 = 
æ
::
I¡îlocked
::
Add
(
cv1
, 3, 
$
);

209 
	gx
 = 
æ
::
I¡îlocked
::
Com∑ªExch™ge
(
cv1
, 3, 
x
, 
$
);

210 
	gx
 = 
æ
::
I¡îlocked
::
Exch™ge
(
cv2
, 6, 
$
);

211 
	gx
 = 
æ
::
I¡îlocked
::
Ród
(
cv2
, 
$
);

212 
	gx
 = 
æ
::
I¡îlocked
::
In¸emít
(
cv2
, 
$
);

213 
	gx
 = 
æ
::
I¡îlocked
::
De¸emít
(
cv2
, 
$
);

215 
	gæ
::
Thªad
::
Mem‹yB¨rõr
(
$
);

216 
	gx
 = 
æ
::
Thªad
::
Vﬁ©ûeRód
(
cv1
, 
$
);

217 
	gæ
::
Thªad
::
Vﬁ©ûeWrôe
(
cv1
, 5, 
$
);

218 
	gæ
::
Thªad
::
SpöWaô
(1, 
$
);

227 
	gws_deque_ã°0
 : 
æ
::
ã°_suôe
<
ws_deque_ã°0
, 4>

229 
	gws_deque
<> 
	gq
;

231 
bef‹e
()

235 
a·î
()

239 
thªad
(
ödex
)

241 i‡(0 =
ödex
)

243 
size_t
 
i
 = 0; 
	gi
 != 4; ++i)

245 
	gq
.
push
(10);

248 
size_t
 
	gi
 = 0; i != 5; ++i)

250 
	gp
 = 0;

251 
boﬁ
 
	gªs
 = 
q
.
p›
(
p
);

252 
RL_ASSERT
(10 =
p
 || 
Ál£
 =
ªs
);

255 
size_t
 
	gi
 = 0; i != 4; ++i)

257 
	gq
.
push
(10);

258 
	gp
 = 0;

259 
boﬁ
 
	gªs
 = 
q
.
p›
(
p
);

260 
RL_ASSERT
(10 =
p
 || 
Ál£
 =
ªs
);

263 
size_t
 
	gi
 = 0; i != 4; ++i)

265 
	gq
.
push
(10);

266 
	gq
.
push
(10);

267 
	gp
 = 0;

268 
boﬁ
 
	gªs
 = 
q
.
p›
(
p
);

269 
RL_ASSERT
(10 =
p
 || 
Ál£
 =
ªs
);

270 
	gp
 = 0;

271 
	gªs
 = 
q
.
p›
(
p
);

272 
RL_ASSERT
(10 =
p
 || 
Ál£
 =
ªs
);

275 
size_t
 
	gi
 = 0; i != 4; ++i)

277 
	gq
.
push
(10);

278 
	gq
.
push
(10);

279 
	gq
.
push
(10);

280 
	gp
 = 0;

281 
boﬁ
 
	gªs
 = 
q
.
p›
(
p
);

282 
RL_ASSERT
(10 =
p
 || 
Ál£
 =
ªs
);

285 
size_t
 
	gi
 = 0; i != 14; ++i)

287 
	gq
.
push
(10);

288 
	gp
 = 0;

289 
boﬁ
 
	gªs
 = 
q
.
p›
(
p
);

290 
RL_ASSERT
(10 =
p
 || 
Ál£
 =
ªs
);

295 
size_t
 
	gi
 = 0; i != 4; ++i)

297 
	gp
 = 0;

298 
boﬁ
 
	gªs
 = 
q
.
°ól
(
p
);

299 
RL_ASSERT
(10 =
p
 || 
Ál£
 =
ªs
);

308 
	$maö
()

310 
æ
::
ã°_∑øms
 
p
;

311 
p
.
ôî©i⁄_cou¡
 = 1000;

312 
æ
::
simuœã
<
ws_deque_ã°0
>(
p
);

313 
æ
::
simuœã
<
ws_deque_ã°
>(
p
);

314 
æ
::
simuœã
<
ã°_≠i
>();

315 
	}
}

	@viper/concurrentqueue-src/tests/relacy/relacy/test/ntest/stdafx.cpp

1 
	~"°dafx.h
"

	@viper/concurrentqueue-src/tests/relacy/relacy/test/ntest/stdafx.h

1 #i‚de‡
STDAFX_H


2 
	#STDAFX_H


	)

3 #ifde‡
_MSC_VER


4 #¥agm®
⁄˚


8 
	~"../../ªœcy/pch.hµ
"

	@viper/concurrentqueue-src/tests/relacy/relacy/test/stdafx.cpp

1 
	~"°dafx.h
"

	@viper/concurrentqueue-src/tests/relacy/relacy/test/stdafx.h

1 #i‚de‡
STDAFX_H


2 
	#STDAFX_H


	)

3 #ifde‡
_MSC_VER


4 #¥agm®
⁄˚


7 #ifde‡
_MSC_VER


8 #¥agm®
w¨nög
 (
dißbÀ
: 4127)

11 #i‡
deföed
(
_MSC_VER
) && (_MSC_VER <= 1310)

17 #ifde‡
NDEBUG


18 
	#_SECURE_SCL
 0

	)

21 
	~"../ªœcy/pch.hµ
"

	@viper/concurrentqueue-src/tests/relacy/relacy_shims.h

1 #¥agm®
⁄˚


4 #unde‡
as£π


5 #ifde‡
NDEBUG


6 
	#as£π
(
x
)

	)

8 
	#as£π
(
x
Ë
	`RL_ASSERT
(x)

	)

12 
	sRñacyThªadExôLi°íî


14 (*
	mˇŒback_t
)(*);

15 
ˇŒback_t
 
	mˇŒback
;

16 * 
	mu£rD©a
;

18 
RñacyThªadExôLi°íî
* 
	m√xt
;

21 ˛as†
	cRñacyThªadExôNŸifõr


23 
	mpublic
:

24 
	$subs¸ibe
(
RñacyThªadExôLi°íî
* 
li°íî
)

26 auto& 
ésIn°
 = 
	`ö°™˚
();

27 
li°íî
->
√xt
 = 
ésIn°
.
èû
;

28 
ésIn°
.
èû
 = 
li°íî
;

31 
	$unsubs¸ibe
(
RñacyThªadExôLi°íî
* 
li°íî
)

33 auto& 
ésIn°
 = 
	`ö°™˚
();

34 
RñacyThªadExôLi°íî
** 
¥ev
 = &
ésIn°
.
èû
;

35 autÿ
±r
 = 
ésIn°
.
èû
;Öå !
nuŒ±r
;Öå =Öå->
√xt
) {

36 i‡(
±r
 =
li°íî
) {

37 *
¥ev
 = 
±r
->
√xt
;

40 
¥ev
 = &
±r
->
√xt
;

42 
	}
}

44 
	$nŸify_ªœcy_thªad_°¨t
()

46 
	`ö°™˚
().
èû
 = 
nuŒ±r
;

47 
	}
}

49 
	$nŸify_ªœcy_thªad_exô
()

51 autÿ
±r
 = 
	`ö°™˚
().
èû
;Öå !
nuŒ±r
;Öå =Öå->
√xt
) {

52 
±r
->
	`ˇŒback
’å->
u£rD©a
);

54 
	}
}

57 
	g¥iv©e
:

58 
	$RñacyThªadExôNŸifõr
(Ë: 
	$èû
(
nuŒ±r
Ë{ 
	}
}

60 
RñacyThªadExôNŸifõr
& 
	$ö°™˚
()

62 
RñacyThªadExôNŸifõr
 
ö°™˚s
[1024];

64 autÿ
tid
 = 
æ
::
	`thªad_ödex
();

65 
	`as£π
(
tid
 < 1024);

66  
ö°™˚s
[
tid
];

67 
	}
}

69 
	g¥iv©e
:

70 
RñacyThªadExôLi°íî
* 
èû
;

73 
«me•a˚
 
	g°d


76 
	s©omic_Êag
 {

77 
	g¥iv©e
:

78 
©omic_Êag
(atomic_flag const&);

79 
©omic_Êag
(atomic_flag&&);

80 
	g©omic_Êag
& 
	g›î©‹
=(
©omic_Êag
 const&);

81 
	g©omic_Êag
& 
	g›î©‹
=(
©omic_Êag
&&);

83 
	gpublic
:

84 
©omic_Êag
() { }

85 
©omic_Êag
(
boﬁ
 
öôülVÆue
Ë: 
vÆ
(initialValue ? 1 : 0) { }

87 
˛ór
()

89 
˛ór
(
°d
::
mem‹y_‹dî_£q_c°
);

92 
˛ór
(
æ
::
mem‹y_‹dî
 
‹dî
,Ñl::
debug_öfo_∑øm
 
d
)

94 
vÆ
.
°‹e
(0, 
‹dî
, 
d
);

97 
boﬁ
 
ã°_™d_£t
()

99  
ã°_™d_£t
(
°d
::
mem‹y_‹dî_£q_c°
);

102 
boﬁ
 
ã°_™d_£t
(
æ
::
mem‹y_‹dî
 
‹dî
,Ñl::
debug_öfo_∑øm
 
d
)

104  
vÆ
.
„tch_‹
(1, 
‹dî
, 
d
) != 0;

107 
	g¥iv©e
:

108 
°d
::
©omic
<> 
vÆ
;

	@viper/concurrentqueue-src/tests/relacy/spmchash.cpp

3 
	~"ªœcy/ªœcy/ªœcy_°d.hµ
"

5 
«me•a˚
 
	gdëaûs


7 
	gãm∂©e
<
ty≥«me
 
	gU
>

8 
ölöe
 * 
Æign_f‹
(* 
±r
)

10 c⁄° 
	g°d
::
size_t
 
Æignmít
 = 
°d
::
Æignmít_of
<
U
>::
vÆue
;

11  
	g±r
 + (
	gÆignmít
 - (
	gªöãΩªt_ˇ°
<
	g°d
::
uöçå_t
>(
±r
Ë% 
Æignmít
)) %álignment;

15 
	gãm∂©e
<
ty≥«me
 
	gTVÆue
>

16 
	sSPMCSequítülHashM≠


18 
ex∂icô
 
SPMCSequítülHashM≠
(
°d
::
size_t
 
öôülSize
)

19 : 
√xtC≠acôy
(
öôülSize
), 
ödex
(
nuŒ±r
)

21 
√w_ödex
();

24 ~
SPMCSequítülHashM≠
()

26 autÿ
	m±r
 = 
ödex
.
lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
);

27 i‡(
	m±r
 !
nuŒ±r
) {

28 
°d
::
size_t
 
i
 = 0; 
	mi
 !
±r
->
ˇ∑côy
; ++i) {

29 
	m±r
->
	mödex
[
i
]->~
IndexE¡ry
();

32 autÿ
	m¥ev
 = 
±r
->
¥ev
;

33 
	m±r
->~
IndexHódî
();

34 
‰ì
(
±r
);

35 
	m±r
 = 
¥ev
;

36 } 
	m±r
 !
nuŒ±r
);

43 
ö£π
(
°d
::
uöt64_t
 
key
, 
TVÆue
* 
vÆue
)

45 
IndexE¡ry
* 
	midxE¡ry
;

46 
ö£π_ödex_íåy
(
idxE¡ry
, 
key
);

47 
	midxE¡ry
->
	mvÆue
.
°‹e
(
vÆue
, 
°d
::
mem‹y_‹dî_ªÀa£
);

54 
TVÆue
* 
föd
(
°d
::
uöt64_t
 
key
)

56 autÿ
idxE¡ry
 = 
gë_íåy_f‹_key
(
key
);

57 i‡(
	midxE¡ry
 =
nuŒ±r
)

58  
nuŒ±r
;

59  
	midxE¡ry
->
	mvÆue
.
lﬂd
(
°d
::
mem‹y_‹dî_acquúe
);

66 
TVÆue
* 
ªmove
(
°d
::
uöt64_t
 
key
)

68 autÿ
idxE¡ry
 = 
gë_íåy_f‹_key
(
key
);

69 i‡(
	midxE¡ry
 =
nuŒ±r
)

70  
nuŒ±r
;

71 
TVÆue
* 
	mvÆ
 = 
nuŒ±r
;

72 !
	midxE¡ry
->
	mvÆue
.
com∑ª_exch™ge_wók
(
vÆ
, 
nuŒ±r
, 
°d
::
mem‹y_‹dî_acquúe
, std::
mem‹y_‹dî_ªœxed
))

74  
	mvÆ
;

77 
	m¥iv©e
:

78 
	sIndexE¡ry


80 
°d
::
©omic
<°d::
uöt64_t
> 
key
;

81 
	m°d
::
©omic
<
TVÆue
*> 
vÆue
;

84 
	sIndexHódî


86 
	m°d
::
size_t
 
ˇ∑côy
;

87 
	m°d
::
©omic
<
°d
::
size_t
> 
èû
;

88 
IndexE¡ry
* 
	míåõs
;

89 
IndexE¡ry
** 
	mödex
;

90 
IndexHódî
* 
	m¥ev
;

93 
ölöe
 
ö£π_ödex_íåy
(
IndexE¡ry
*& 
idxE¡ry
, 
°d
::
uöt64_t
 
key
)

95 autÿ
loˇlIndex
 = 
ödex
.
lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
);

96 autÿ
	m√wTaû
 = (
loˇlIndex
->
èû
.
lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
Ë+ 1Ë& (loˇlIndex->
ˇ∑côy
 - 1);

97 
	midxE¡ry
 = 
loˇlIndex
->
ödex
[
√wTaû
];

98 i‡(
	midxE¡ry
->
	mkey
.
lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
Ë=
INVALID_KEY
 ||

99 
idxE¡ry
->
vÆue
.
lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
Ë=
nuŒ±r
) {

101 
idxE¡ry
->
key
.
°‹e
(key, 
°d
::
mem‹y_‹dî_ªœxed
);

102 
	mloˇlIndex
->
	mèû
.
°‹e
(
√wTaû
, 
°d
::
mem‹y_‹dî_ªÀa£
);

107 
√w_ödex
();

108 
	mloˇlIndex
 = 
ödex
.
lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
);

109 
	m√wTaû
 = (
loˇlIndex
->
èû
.
lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
Ë+ 1Ë& (loˇlIndex->
ˇ∑côy
 - 1);

110 
	midxE¡ry
 = 
loˇlIndex
->
ödex
[
√wTaû
];

111 
as£π
(
idxE¡ry
->
key
.
lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
Ë=
INVALID_KEY
);

112 
	midxE¡ry
->
	mkey
.
°‹e
(
key
, 
°d
::
mem‹y_‹dî_ªœxed
);

113 
	mloˇlIndex
->
	mèû
.
°‹e
(
√wTaû
, 
°d
::
mem‹y_‹dî_ªÀa£
);

116 
ölöe
 
IndexE¡ry
* 
gë_íåy_f‹_key
(
°d
::
uöt64_t
 
key
) const

118 autÿ
loˇlIndex
 = 
ödex
.
lﬂd
(
°d
::
mem‹y_‹dî_acquúe
);

119 autÿ
	mèû
 = 
loˇlIndex
->
èû
.
lﬂd
(
°d
::
mem‹y_‹dî_acquúe
);

120 autÿ
	mèûBa£
 = 
loˇlIndex
->
ödex
[
èû
]->
key
.
lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
);

121 i‡(
	mèûBa£
 =
INVALID_KEY
) {

122  
nuŒ±r
;

124 autÿ
	moff£t
 = 
°©ic_ˇ°
<
°d
::
size_t
>(
key
 - 
èûBa£
);

125 
	m°d
::
size_t
 
idx
 = (
èû
 + 
off£t
Ë& (
loˇlIndex
->
ˇ∑côy
 - 1);

126 autÿ
	míåy
 = 
loˇlIndex
->
ödex
[
idx
];

127  
	míåy
->
	mkey
.
lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
Ë=
key
 ? 
íåy
 : 
nuŒ±r
;

130 
boﬁ
 
√w_ödex
()

132 autÿ
	m¥ev
 = 
ödex
.
lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
);

133 
	m°d
::
size_t
 
¥evC≠acôy
 = 
¥ev
 =
nuŒ±r
 ? 0 :Öªv->
ˇ∑côy
;

134 autÿ
	míåyCou¡
 = 
¥ev
 =
nuŒ±r
 ? 
√xtC≠acôy
 : 
¥evC≠acôy
;

135 autÿ
	møw
 = 
°©ic_ˇ°
<*>(
mÆloc
(

136 (
IndexHódî
) +

137 
°d
::
Æignmít_of
<
IndexE¡ry
>::
vÆue
 - 1 + (IndexE¡ryË* 
íåyCou¡
 +

138 
°d
::
Æignmít_of
<
IndexE¡ry
*>::
vÆue
 - 1 + (IndexE¡ry*Ë* 
√xtC≠acôy
));

139 i‡(
	møw
 =
nuŒ±r
) {

140  
Ál£
;

143 autÿ
	mhódî
 = 
√w
 (
øw
Ë
IndexHódî
;

144 autÿ
	míåõs
 = 
ªöãΩªt_ˇ°
<
IndexE¡ry
*>(
dëaûs
::
Æign_f‹
<IndexE¡ry>(
øw
 + (
IndexHódî
)));

145 autÿ
	midx
 = 
ªöãΩªt_ˇ°
<
IndexE¡ry
**>(
dëaûs
::
Æign_f‹
<IndexE¡ry*>‘eöãΩªt_ˇ°<*>(
íåõs
Ë+ (IndexE¡ryË* 
íåyCou¡
));

146 i‡(
	m¥ev
 !
nuŒ±r
) {

147 autÿ
¥evTaû
 = 
¥ev
->
èû
.
lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
);

148 autÿ
	m¥evPos
 = 
¥evTaû
;

149 
	m°d
::
size_t
 
i
 = 0;

151 
	m¥evPos
 = (
¥evPos
 + 1Ë& (
¥ev
->
ˇ∑côy
 - 1);

152 
	midx
[
i
++] = 
¥ev
->
ödex
[
¥evPos
];

153 } 
	m¥evPos
 !
¥evTaû
);

154 
as£π
(
i
 =
¥evC≠acôy
);

156 
	m°d
::
size_t
 
i
 = 0; 
	mi
 !
íåyCou¡
; ++i) {

157 
√w
 (
íåõs
 + 
i
Ë
	mIndexE¡ry
;

158 
	míåõs
[
i
].
	mkey
.
°‹e
(
INVALID_KEY
, 
°d
::
mem‹y_‹dî_ªœxed
);

159 
	míåõs
[
i
].
	mvÆue
.
°‹e
(
nuŒ±r
, 
°d
::
mem‹y_‹dî_ªœxed
);

160 
	midx
[
¥evC≠acôy
 + 
i
] = 
íåõs
 + i;

162 
	mhódî
->
	m¥ev
 = 
¥ev
;

163 
	mhódî
->
	míåõs
 = 
íåõs
;

164 
	mhódî
->
	mödex
 = 
idx
;

165 
	mhódî
->
	mˇ∑côy
 = 
√xtC≠acôy
;

166 
	mhódî
->
	mèû
.
°‹e
((
¥evC≠acôy
 - 1Ë& (
√xtC≠acôy
 - 1), 
°d
::
mem‹y_‹dî_ªœxed
);

168 
	mödex
.
°‹e
(
hódî
, 
°d
::
mem‹y_‹dî_ªÀa£
);

170 
	m√xtC≠acôy
 <<= 1;

172  
	måue
;

175 
	m¥iv©e
:

176 
°d
::
size_t
 
√xtC≠acôy
;

177 
	m°d
::
©omic
<
IndexHódî
*> 
ödex
;

179 c⁄° 
	m°d
::
uöt64_t
 
INVALID_KEY
 = ~(
°d
::uint64_t)0;

184 
	gãm∂©e
<
	gThªadCou¡
, 
	gNUM_VALUES
>

185 
	gã°
 : 
æ
::
ã°_suôe
<
ã°
<
ThªadCou¡
, 
	gNUM_VALUES
>, 
	gThªadCou¡
>

187 
	gSPMCSequítülHashM≠
<>* 
	ghash
;

188 
	gvÆues
[
NUM_VALUES
];

189 
	g°d
::
©omic
<> 
u£Cou¡s
[
NUM_VALUES
];

190 
	g°d
::
©omic
<
boﬁ
> 
ªmoved
[
NUM_VALUES
];

192 
bef‹e
()

194 
	ghash
 = 
√w
 
SPMCSequítülHashM≠
<>(2);

195 
	gi
 = 0; i !
NUM_VALUES
; ++i) {

196 
	gvÆues
[
i
] = i;

197 
	gu£Cou¡s
[
i
].
°‹e
(0, 
°d
::
mem‹y_‹dî_ªœxed
);

198 
	gªmoved
[
i
].
°‹e
(
Ál£
, 
°d
::
mem‹y_‹dî_ªœxed
);

202 
thªad
(
tid
)

204 i‡(
	gtid
 == 0) {

206 
i
 = 0; 
	gi
 !
NUM_VALUES
; ++i) {

207 
	ghash
->
ö£π
(
i
, &
vÆues
[i]);

208 
	gu£Cou¡s
[
i
].
°‹e
(
ThªadCou¡
 / 2, 
°d
::
mem‹y_‹dî_ªÀa£
);

213 
	gi
 = 0; i !
NUM_VALUES
; ++i) {

214 autÿ
	gu£Cou¡
 = 
u£Cou¡s
[
i
].
„tch_add
(-1, 
°d
::
mem‹y_‹dî_acquúe
);

215 autÿ
	gvÆ
 = 
hash
->
föd
(
i
);

216 
boﬁ
 
	gisRemoved
 = 
ªmoved
[
i
].
lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
);

217 autÿ
	gcuºít
 = 
u£Cou¡s
[
i
].
„tch_add
(0, 
°d
::
mem‹y_‹dî_ªÀa£
);

218 i‡(
	gu£Cou¡
 > 0 && (
	gcuºít
 > 0 || cuºíà=0 && 
u£Cou¡
 == 1)) {

219 
RL_ASSERT
(
vÆ
 !
nuŒ±r
 && *vÆ =
i
 && !
isRemoved
);

221 i‡(
	gu£Cou¡
 == 1) {

222 
vÆ
 = 
hash
->
ªmove
(
i
);

223 
RL_ASSERT
(
vÆ
 !
nuŒ±r
 && *vÆ =
i
 && !
ªmoved
[i].
lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
));

224 
	gªmoved
[
i
].
°‹e
(
åue
, 
°d
::
mem‹y_‹dî_ªÀa£
);

230 
a·î
()

232 
dñëe
 
	ghash
;

235 
öv¨ü¡
()

240 
	$maö
()

242 
æ
::
ã°_∑øms
 
∑øms
;

245 
∑øms
.
£¨ch_ty≥
 = 
æ
::
sched_øndom
;

246 
∑øms
.
ôî©i⁄_cou¡
 = 1000000;

247 
æ
::
simuœã
<
ã°
<2, 4>>(
∑øms
);

248 
æ
::
simuœã
<
ã°
<3, 4>>(
∑øms
);

249 
æ
::
simuœã
<
ã°
<4, 8>>(
∑øms
);

252 
	}
}

	@viper/concurrentqueue-src/tests/unittests/mallocmacro.cpp

1 
	#mÆloc
(
x
Ë
	`mÆloc
(x)

	)

2 
	#‰ì
(
x
Ë
	`‰ì
(x)

	)

4 
	~"../../blockögc⁄cuºítqueue.h
"

	@viper/concurrentqueue-src/tests/unittests/minitest.h

7 #¥agm®
⁄˚


9 
	~<c°dio
>

10 
	~<°rög
>

11 
	~<m≠
>

12 
	~<ve˘‹
>

13 
	~<ty≥_åaôs
>

14 
	~<ty≥öfo
>

16 #ifde‡
__GNUG__


17 
	~<cxxabi.h
>

18 
	~<c°dlib
>

23 
	#REGISTER_TEST
(
ã°Name
Ë
	`ªgi°îTe°
(#ã°Name, &
sub˛ass_t
::ã°Name)

	)

25 
	#ASSERT_OR_FAIL
(
ex¥
Ë{ i‡(!”x¥)Ë{ 
	`nŸifyTe°Faûed
(
__LINE__
, #ex¥);  
Ál£
; } }

	)

26 
	#SUCCEED
(Ë{  
åue
; }

	)

31 
	gãm∂©e
<
ty≥«me
 
	gTSub˛ass
>

32 ˛as†
	cTe°Cœss


34 
	mpublic
:

35 
	$nŸifyTe°Faûed
(
löe
, c⁄° * 
ex¥
)

37 
°d
::
	`¥ötf
(" FAILED!\¿ ******* As£πi⁄ faûed (löê%d): %s\n\n", 
löe
, 
ex¥
);

40 
boﬁ
 
	$vÆid©eTe°Name
(
°d
::
°rög
 c⁄°& 
which
) const

42  
ã°M≠
.
	`föd
(
which
Ë!ã°M≠.
	`íd
();

43 
	}
}

45 
gëAŒTe°Names
(
°d
::
ve˘‹
<°d::
°rög
>& 
«mes
) const

47 autÿ
ô
 = 
ã°M≠
.
cbegö
(); 
	gô
 !ã°M≠.
˚nd
(); ++it) {

48 
	g«mes
.
push_back
(
ô
->
fú°
);

52 
boﬁ
 
	$run
(
ôî©i⁄s
 = 1)

54 
boﬁ
 
suc˚ss
 = 
åue
;

55 autÿ
ô
 = 
ã°Vec
.
	`cbegö
(); ià!ã°Vec.
	`˚nd
(); ++it) {

56 i‡(!
	`execTe°
(*
ô
, 
ôî©i⁄s
)) {

57 
suc˚ss
 = 
Ál£
;

60  
suc˚ss
;

61 
	}
}

63 
boﬁ
 
run
(
°d
::
ve˘‹
<°d::
°rög
> c⁄°& 
which
, 
ôî©i⁄s
 = 1)

65 
boﬁ
 
suc˚ss
 = 
åue
;

66 autÿ
	gô
 = 
which
.
begö
(); ià!which.
íd
(); ++it) {

67 i‡(!
execTe°
(*
ã°M≠
.
föd
(*
ô
), 
ôî©i⁄s
)) {

68 
	gsuc˚ss
 = 
Ál£
;

71  
	gsuc˚ss
;

74 
	g¥Ÿe˘ed
:

75 
TSub˛ass
 
	tsub˛ass_t
;

77 
ªgi°îTe°
(c⁄° * 
«me
, 
	$boﬁ
 (
sub˛ass_t
::* 
mëhod
)())

79 
ã°Vec
.
	`push_back
(
°d
::
	`make_∑ú
(°d::
	`°rög
(
«me
), 
mëhod
));

80 
ã°M≠
[
°d
::
	`°rög
(
«me
)] = 
mëhod
;

81 
	}
}

83 
vútuÆ
 
boﬁ
 
	$¥eTe°
(Ë{  
åue
; 
	}
}

84 
vútuÆ
 
boﬁ
 
	$po°Te°
(
boﬁ
Ë{  
åue
; 
	}
}

86 
boﬁ
 
execTe°
(
°d
::
∑ú
<°d::
°rög
, boﬁ (
sub˛ass_t
::*)()> c⁄°& 
ã°Ref
, 
ôî©i⁄s
)

88 
	g°d
::
¥ötf
("%s::%s... \n", 
dem™gÀ_ty≥_«me
(
ty≥id
(
sub˛ass_t
).
«me
()).
c_°r
(), 
ã°Ref
.
fú°
.c_str());

90 
boﬁ
 
	gªsu…
 = 
åue
;

91 
	gi
 = 0; 
	gªsu…
 && i !
ôî©i⁄s
; ++i) {

92 
	gªsu…
 = 
¥eTe°
();

93 
	gåy
 {

94 
	gªsu…
 = 
ªsu…
 && (
°©ic_ˇ°
<
sub˛ass_t
*>(
this
)->*
ã°Ref
.
£c⁄d
)();

96 
ˇtch
 (...) {

97 
	g°d
::
¥ötf
(" FAILED!\n ******* UnhandledÉxceptionÅhrown\n\n");

98 
	gªsu…
 = 
Ál£
;

100 
	gªsu…
 = 
po°Te°
(
ªsu…
) &&Ñesult;

103 i‡(
	gªsu…
) {

104 
	g°d
::
¥ötf
("Öassed\n\n");

106  
	gªsu…
;

109 
	g¥iv©e
:

110 
°d
::
°rög
 
	$dem™gÀ_ty≥_«me
(c⁄° * 
«me
)

112 #ifde‡
__GNUG__


114 
°©us
 = -4;

115 * 
ªs
 = 
abi
::
	`__cxa_dem™gÀ
(
«me
, 
nuŒ±r
,ÇuŒ±r, &
°©us
);

117 c⁄° * c⁄° 
dem™gÀd_«me
 = (
°©us
 =0Ë? 
ªs
 : 
«me
;

118 
°d
::
°rög
 
	`ªt
(
dem™gÀd_«me
);

120 
°d
::
	`‰ì
(
ªs
);

121  
ªt
;

123  
«me
;

125 
	}
}

127 
	g¥Ÿe˘ed
:

128 
°d
::
ve˘‹
<°d::
∑ú
<°d::
°rög
, 
boﬁ
 (
TSub˛ass
::*)()> > 
ã°Vec
;

129 
	g°d
::
m≠
<
°d
::
°rög
, 
boﬁ
 (
TSub˛ass
::*)()> 
ã°M≠
;

	@viper/concurrentqueue-src/tests/unittests/unittests.cpp

7 
	#likñy
 
MAKE_SURE_LIKELY_MACRO_CAN_PEACEFULLY_COEXIST


	)

8 
	#u∆ikñy
 
MAKE_SURE_UNLIKELY_MACRO_CAN_PEACEFULLY_COEXIST


	)

10 
	~<c°dio
>

11 
	~<c°dlib
>

12 
	~<c°rög
>

13 
	~<°rög
>

14 
	~<c°ddef
>

15 
	~<°rög
>

16 
	~<ôî©‹
>

18 
	gMakeSuªCu°omNewC™Pó˚fuŒyC€xi°
;

19 * 
›î©‹
 
√w
(
size_t
 
size
, 
MakeSuªCu°omNewC™Pó˚fuŒyC€xi°
* 
x
);

20 
›î©‹
 
dñëe
(* 
±r
, 
MakeSuªCu°omNewC™Pó˚fuŒyC€xi°
* 
x
);

22 #ifde‡
_WIN32


23 #i‚de‡
NOMINMAX


24 
	#NOMINMAX


	)

26 
	~<wödows.h
>

29 
	~"möôe°.h
"

30 
	~"../comm⁄/sim∂ëhªad.h
"

31 
	~"../comm⁄/sy°emtime.h
"

32 
	~"../../c⁄cuºítqueue.h
"

33 
	~"../../blockögc⁄cuºítqueue.h
"

34 
	~"../../c_≠i/c⁄cuºítqueue.h
"

36 
	g«me•a˚
 {

37 
	såackög_Æloˇt‹


39 
	uèg
 {

40 
	g°d
::
size_t
 
size
;

41 #ifde‡
__GNUC__


42 
max_Æign_t
 
	gdummy
;

44 
	g°d
::
max_Æign_t
 
dummy
;

48 
ölöe
 * 
mÆloc
(
°d
::
size_t
 
size
)

50 autÿ
±r
 = 
°d
::
mÆloc
(
size
 + (
èg
));

51 i‡(
	g±r
) {

52 
	gªöãΩªt_ˇ°
<
	gèg
*>(
	g±r
)->
	gsize
 = 
size
;

53 
	gußge
.
„tch_add
(
size
, 
°d
::
mem‹y_‹dî_ªœxed
);

54  
	gªöãΩªt_ˇ°
<*>(
	g±r
Ë+ (
	gèg
);

56  
	gnuŒ±r
;

59 
ölöe
 
‰ì
(* 
±r
)

61 i‡(
	g±r
) {

62 
	g±r
 = 
ªöãΩªt_ˇ°
<*>(
±r
Ë- (
èg
);

63 autÿ
	gsize
 = 
ªöãΩªt_ˇ°
<
èg
*>(
±r
)->
size
;

64 
	gußge
.
„tch_add
(-
size
, 
°d
::
mem‹y_‹dî_ªœxed
);

66 
	g°d
::
‰ì
(
±r
);

69 
ölöe
 
	g°d
::
size_t
 
cuºít_ußge
(Ë{  
ußge
.
lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
); }

71 
	g¥iv©e
:

72 
°d
::
©omic
<°d::
size_t
> 
ußge
;

75 
	g°d
::
©omic
<
°d
::
size_t
> 
åackög_Æloˇt‹
::
ußge
(0);

78 
	sc‹ólgos_Æloˇt‹


80 
ölöe
 * 
mÆloc
(
°d
::
size_t
 
size
Ë{  
åackög_Æloˇt‹
::malloc(size); }

81 
ölöe
 
‰ì
(* 
±r
Ë{ 
	måackög_Æloˇt‹
::free(ptr); }

84 
	#c‹ólgos_Æloˇt‹
 
c‹ólgos_Æloˇt‹


	)

86 
	~"../c‹ólgos.h
"

88 
usög
 
«me•a˚
 
	gmoodyˇmñ
;

91 
«me•a˚
 
	gmoodyˇmñ


93 
	gMÆlocTøckögTøôs
 : 
public
 
C⁄cuºítQueueDeÁu…Tøôs


95 
ölöe
 * 
mÆloc
(
°d
::
size_t
 
size
Ë{  
åackög_Æloˇt‹
::malloc(size); }

96 
ölöe
 
‰ì
(* 
±r
Ë{ 
	gåackög_Æloˇt‹
::free(ptr); }

99 
	gãm∂©e
<
	g°d
::
size_t
 
BlockSize
 = 
C⁄cuºítQueueDeÁu…Tøôs
::
BLOCK_SIZE
, std::size_à
InôülIndexSize
 = C⁄cuºítQueueDeÁu…Tøôs::
EXPLICIT_INITIAL_INDEX_SIZE
>

100 
Te°Tøôs
 : 
public
 
MÆlocTøckögTøôs


102 
°d
::
	tsize_t
 size_t;

103 
uöt64_t
 
	tödex_t
;

105 c⁄° 
size_t
 
	gBLOCK_SIZE
 = 
BlockSize
;

106 c⁄° 
size_t
 
	gEXPLICIT_INITIAL_INDEX_SIZE
 = 
InôülIndexSize
;

107 c⁄° 
size_t
 
	gIMPLICIT_INITIAL_INDEX_SIZE
 = 
InôülIndexSize
 * 2;

109 
ölöe
 
ª£t
(Ë{ 
_mÆloc_cou¡
(Ë0; 
_‰ì_cou¡
() = 0; }

110 
ölöe
 
	g°d
::
©omic
<>& 
_mÆloc_cou¡
(Ë{ 
°d
::©omic<> 
c
;  
	gc
; }

111 
ölöe
 
mÆloc_cou¡
(Ë{  
_mÆloc_cou¡
().
lﬂd
(
°d
::
mem‹y_‹dî_£q_c°
); }

112 
ölöe
 
	g°d
::
©omic
<>& 
_‰ì_cou¡
(Ë{ 
°d
::©omic<> 
c
;  
	gc
; }

113 
ölöe
 
‰ì_cou¡
(Ë{  
_‰ì_cou¡
().
lﬂd
(
°d
::
mem‹y_‹dî_£q_c°
); }

115 
ölöe
 * 
mÆloc
(
C⁄cuºítQueueDeÁu…Tøôs
::
size_t
 
byãs
Ë{ ++
_mÆloc_cou¡
();  
	gåackög_Æloˇt‹
::malloc(bytes); }

116 
ölöe
 
‰ì
(* 
obj
Ë{ ++
_‰ì_cou¡
();  
	gåackög_Æloˇt‹
::free(obj); }

119 
	gSmÆlIndexTøôs
 : 
public
 
MÆlocTøckögTøôs


121 
uöt16_t
 
	tsize_t
;

122 
uöt16_t
 
	tödex_t
;

125 
	gExåaSmÆlIndexTøôs
 : 
public
 
MÆlocTøckögTøôs


127 
uöt8_t
 
	tsize_t
;

128 
uöt8_t
 
	tödex_t
;

131 
	gL¨geTøôs
 : 
public
 
MÆlocTøckögTøôs


133 c⁄° 
size_t
 
BLOCK_SIZE
 = 128;

134 c⁄° 
size_t
 
	gINITIAL_IMPLICIT_PRODUCER_HASH_SIZE
 = 128;

135 c⁄° 
size_t
 
	gIMPLICIT_INITIAL_INDEX_SIZE
 = 128;

139 
	sFoo


141 & 
√xtId
(Ë{ 
	gi
;  i; }

142 & 
¸óãCou¡
(Ë{ 
	gc
;  c; }

143 & 
de°royCou¡
(Ë{ 
	gc
;  c; }

144 
	gboﬁ
& 
de°royedInOrdî
(Ë{ 
boﬁ
 
	gd
 = 
åue
;  d; }

145 
ª£t
(Ë{ 
¸óãCou¡
(Ë0; 
de°royCou¡
(Ë0; 
√xtId
(Ë0; 
de°royedInOrdî
(Ë
åue
; 
œ°De°royedId
() = -1; }

147 
Foo
(Ë{ 
	gid
 = 
√xtId
()++; ++
¸óãCou¡
(); }

148 
Foo
(Foÿc⁄°&Ë
	gMOODYCAMEL_DELETE_FUNCTION
;

149 
Foo
(Foo&& 
Ÿhî
Ë{ 
	gid
 = othî.
id
; 
	gŸhî
.id = -1; }

150 
	g›î©‹
=(
Foo
&& 
Ÿhî
Ë{ 
id
 = othî.id; 
	gŸhî
.
	gid
 = -1; }

151 ~
Foo
()

153 ++
de°royCou¡
();

154 i‡(
	gid
 == -2) {

156 
de°royedInOrdî
(Ë
Ál£
;

158 i‡(
	gid
 != -1) {

159 i‡(
id
 <
œ°De°royedId
()) {

160 
de°royedInOrdî
(Ë
Ál£
;

162 
œ°De°royedId
(Ë
id
;

164 
	gid
 = -2;

167 
	g¥iv©e
:

168 
id
;

169 & 
œ°De°royedId
(Ë{ 
	gi
 = -1;  i; }

172 
	sC›yabÀ
 {

173 
C›yabÀ
(
id
Ë: 
c›õd
(
Ál£
), id(id) { }

174 
C›yabÀ
(C›yabÀ c⁄°& 
o
Ë: 
c›õd
(
åue
), 
id
(o.id) { }

175 
	g›î©‹
=(
C›yabÀ
 c⁄°& 
o
Ë{ 
c›õd
 = 
åue
; 
	gid
 = o.
id
; }

176 
boﬁ
 
	gc›õd
;

177 
	gid
;

180 
	sMovóbÀ
 {

181 
MovóbÀ
(
id
Ë: 
moved
(
Ál£
), 
c›õd
(false), id(id) { }

182 
MovóbÀ
(MovóbÀ&& 
o
Ë
	gMOODYCAMEL_NOEXCEPT
 : 
moved
(
åue
), 
c›õd
(o.c›õd), 
id
(o.id) { }

183 
	g›î©‹
=(
MovóbÀ
&& 
o
Ë
MOODYCAMEL_NOEXCEPT
 { 
moved
 = 
åue
; 
	gc›õd
 = o.
c›õd
; 
	gid
 = o.
id
; }

184 
boﬁ
 
	gmoved
;

185 
boﬁ
 
	gc›õd
;

186 
	gid
;

188 #i‡
deföed
(
_MSC_VER
) && _MSC_VER < 1800

193 
MovóbÀ
(MovóbÀ c⁄°& 
o
Ë
	gMOODYCAMEL_NOEXCEPT
 : 
moved
(o.moved), 
c›õd
(o.c›õd), 
id
(o.id) { }

194 
	g›î©‹
=(
MovóbÀ
 c⁄°& 
o
Ë
MOODYCAMEL_NOEXCEPT
 { 
moved
 = o.moved; 
	gc›õd
 = o.
c›õd
; 
	gid
 = o.
id
; }

196 
MovóbÀ
(MovóbÀ c⁄°& 
o
Ë
	gMOODYCAMEL_NOEXCEPT
 : 
moved
(o.moved), 
c›õd
(
åue
), 
id
(o.id) { }

197 
	g›î©‹
=(
MovóbÀ
 c⁄°& 
o
Ë
MOODYCAMEL_NOEXCEPT
 { 
moved
 = o.moved; 
	gc›õd
 = 
åue
; 
	gid
 = o.
id
; }

201 
	sThrowögMovabÀ
 {

202 
	g°d
::
©omic
<>& 
˘‹Cou¡
(Ë{ 
°d
::©omic<> 
c
;  
	gc
; }

203 
	g°d
::
©omic
<>& 
de°royCou¡
(Ë{ 
°d
::©omic<> 
c
;  
	gc
; }

204 
ª£t
(Ë{ 
˘‹Cou¡
(Ë0; 
de°royCou¡
() = 0; }

206 
ex∂icô
 
ThrowögMovabÀ
(
id
, 
boﬁ
 
throwOnC˘‹
 = 
Ál£
, boﬁ 
throwOnAssignmít
 = fÆ£, boﬁ 
throwOnSec⁄dC˘‹
 = false)

207 : 
id
(id), 
moved
(
Ál£
), 
c›õd
(Ál£), 
throwOnC˘‹
—hrowOnC˘‹), 
throwOnAssignmít
—hrowOnAssignmít), 
throwOnSec⁄dC˘‹
(throwOnSecondCctor)

209 
˘‹Cou¡
().
„tch_add
(1, 
°d
::
mem‹y_‹dî_ªœxed
);

212 
ThrowögMovabÀ
(ThrowögMovabÀ c⁄°& 
o
)

213 : 
id
(
o
.id), 
moved
(
Ál£
), 
c›õd
(
åue
), 
throwOnC˘‹
(o.throwOnC˘‹), 
throwOnAssignmít
(o.throwOnAssignmít), 
throwOnSec⁄dC˘‹
(false)

215 i‡(
	gthrowOnC˘‹
) {

216 
throw
 
	gthis
;

218 
˘‹Cou¡
().
„tch_add
(1, 
°d
::
mem‹y_‹dî_ªœxed
);

219 
	gthrowOnC˘‹
 = 
o
.
throwOnSec⁄dC˘‹
;

222 
ThrowögMovabÀ
(ThrowögMovabÀ&& 
o
)

223 : 
id
(
o
.id), 
moved
(
åue
), 
c›õd
(
Ál£
), 
throwOnC˘‹
(o.throwOnC˘‹), 
throwOnAssignmít
(o.throwOnAssignmít), 
throwOnSec⁄dC˘‹
(false)

225 i‡(
	gthrowOnC˘‹
) {

226 
throw
 
	gthis
;

228 
˘‹Cou¡
().
„tch_add
(1, 
°d
::
mem‹y_‹dî_ªœxed
);

229 
	gthrowOnC˘‹
 = 
o
.
throwOnSec⁄dC˘‹
;

232 ~
ThrowögMovabÀ
()

234 
de°royCou¡
().
„tch_add
(1, 
°d
::
mem‹y_‹dî_ªœxed
);

237 
	g›î©‹
=(
ThrowögMovabÀ
 c⁄°& 
o
)

239 
id
 = 
o
.id;

240 
	gmoved
 = 
Ál£
;

241 
	gc›õd
 = 
åue
;

242 
	gthrowOnC˘‹
 = 
o
.
throwOnC˘‹
;

243 
	gthrowOnAssignmít
 = 
o
.
throwOnAssignmít
;

244 
	gthrowOnSec⁄dC˘‹
 = 
o
.
throwOnSec⁄dC˘‹
;

245 i‡(
	gthrowOnAssignmít
) {

246 
throw
 
	gthis
;

250 
	g›î©‹
=(
ThrowögMovabÀ
&& 
o
)

252 
id
 = 
o
.id;

253 
	gmoved
 = 
åue
;

254 
	gc›õd
 = 
Ál£
;

255 
	gthrowOnC˘‹
 = 
o
.
throwOnC˘‹
;

256 
	gthrowOnAssignmít
 = 
o
.
throwOnAssignmít
;

257 
	gthrowOnSec⁄dC˘‹
 = 
o
.
throwOnSec⁄dC˘‹
;

258 i‡(
	gthrowOnAssignmít
) {

259 
throw
 
	gthis
;

263 
	gid
;

264 
boﬁ
 
	gmoved
;

265 
boﬁ
 
	gc›õd
;

267 
	gpublic
:

268 
boﬁ
 
throwOnC˘‹
;

269 
boﬁ
 
	gthrowOnAssignmít
;

270 
boﬁ
 
	gthrowOnSec⁄dC˘‹
;

273 #ifde‡
__¨m__


274 
	#SUPER_ALIGNMENT
 64

	)

276 
	#SUPER_ALIGNMENT
 128

	)

279 #ifde‡
_MSC_VER


280 #¥agm®
w¨nög
(
push
)

281 #¥agm®
w¨nög
(
dißbÀ
: 4324)

284 
MOODYCAMEL_ALIGNAS
(
SUPER_ALIGNMENT
Ë
	gVîyAlig√d
 {

285 
size_t
 
	gîr‹s
;

287 
	gvÆue
;

289 
VîyAlig√d
(Ë
	gMOODYCAMEL_NOEXCEPT
 : 
vÆue
(0) {

290 i‡(
ªöãΩªt_ˇ°
<
uöçå_t
>(
this
Ë% 
SUPER_ALIGNMENT
 != 0)

291 ++
îr‹s
;

294 
VîyAlig√d
(
vÆue
Ë
	gMOODYCAMEL_NOEXCEPT
 : value(value) {

295 i‡(
ªöãΩªt_ˇ°
<
uöçå_t
>(
this
Ë% 
SUPER_ALIGNMENT
 != 0)

296 ++
îr‹s
;

299 
VîyAlig√d
(VîyAlig√d&& 
x
Ë
	gMOODYCAMEL_NOEXCEPT
 : 
vÆue
(x.value) {

300 i‡(
ªöãΩªt_ˇ°
<
uöçå_t
>(
this
Ë% 
SUPER_ALIGNMENT
 != 0)

301 ++
îr‹s
;

302 
	gx
.
	gvÆue
 = 0;

305 
	gVîyAlig√d
& 
	g›î©‹
=(
VîyAlig√d
&& 
x
Ë
MOODYCAMEL_NOEXCEPT
 {

306 
°d
::
sw≠
(
vÆue
, 
x
.value);

307  *
	gthis
;

310 
VîyAlig√d
(VîyAlig√d c⁄°&Ë
	gMOODYCAMEL_DELETE_FUNCTION
;

311 
	gVîyAlig√d
& 
	g›î©‹
=(
VîyAlig√d
 c⁄°&Ë
MOODYCAMEL_DELETE_FUNCTION
;

313 
size_t
 
	gVîyAlig√d
::
îr‹s
 = 0;

315 #ifde‡
_MSC_VER


316 #¥agm®
w¨nög
(
p›
)

321 
˛ass
 
	gC⁄cuºítQueueTe°s
 : 
public
 
Te°Cœss
<
C⁄cuºítQueueTe°s
>

323 
public
:

324 
C⁄cuºítQueueTe°s
()

326 
REGISTER_TEST
(
¸óã_em±y_queue
);

327 
REGISTER_TEST
(
¸óã_tokí
);

328 
REGISTER_TEST
(
cúcuœr_Àss_th™
);

329 
REGISTER_TEST
(
íqueue_⁄e_ex∂icô
);

330 
REGISTER_TEST
(
íqueue_™d_dequeue_⁄e_ex∂icô
);

331 
REGISTER_TEST
(
íqueue_⁄e_im∂icô
);

332 
REGISTER_TEST
(
íqueue_™d_dequeue_⁄e_im∂icô
);

333 
REGISTER_TEST
(
íqueue_™d_dequeue_a_„w
);

334 
REGISTER_TEST
(
íqueue_bulk
);

335 
REGISTER_TEST
(
block_Æloc
);

336 
REGISTER_TEST
(
tokí_move
);

337 
REGISTER_TEST
(
mu…i_¥odu˚rs
);

338 
REGISTER_TEST
(
¥odu˚r_ªu£
);

339 
REGISTER_TEST
(
block_ªu£
);

340 
REGISTER_TEST
(
block_ªcy˛ög
);

341 
REGISTER_TEST
(
À·ovîs_de°royed
);

342 
REGISTER_TEST
(
block_ödex_ªsized
);

343 
REGISTER_TEST
(
åy_dequeue
);

344 
REGISTER_TEST
(
åy_dequeue_thªaded
);

345 
REGISTER_TEST
(
åy_dequeue_bulk
);

346 
REGISTER_TEST
(
åy_dequeue_bulk_thªaded
);

347 
REGISTER_TEST
(
im∂icô_¥odu˚r_hash
);

348 
REGISTER_TEST
(
ödex_wøµög
);

349 
REGISTER_TEST
(
subqueue_size_limô
);

350 
REGISTER_TEST
(
ex˚±i⁄s
);

351 
REGISTER_TEST
(
ã°_thªaded
);

352 
REGISTER_TEST
(
ã°_thªaded_bulk
);

353 
REGISTER_TEST
(
fuŒ_≠i
<
C⁄cuºítQueueDeÁu…Tøôs
>);

354 
REGISTER_TEST
(
fuŒ_≠i
<
SmÆlIndexTøôs
>);

355 
REGISTER_TEST
(
blockög_wøµîs
);

356 
REGISTER_TEST
(
timed_blockög_wøµîs
);

358 
REGISTER_TEST
(
c_≠i_¸óã
);

359 
REGISTER_TEST
(
c_≠i_íqueue
);

360 
REGISTER_TEST
(
c_≠i_åy_dequeue
);

361 
REGISTER_TEST
(
c_≠i_de°roy
);

364 
REGISTER_TEST
(
acquúe_™d_sig«l
);

365 
REGISTER_TEST
(
åy_acquúe_™d_sig«l
);

368 
REGISTER_TEST
(
c‹e_add_⁄ly_li°
);

369 
REGISTER_TEST
(
c‹e_thªad_loˇl
);

370 
REGISTER_TEST
(
c‹e_‰ì_li°
);

371 
REGISTER_TEST
(
c‹e_•mc_hash
);

373 
REGISTER_TEST
(
ex∂icô_°rögs_thªaded
);

374 
REGISTER_TEST
(
œrge_åaôs
);

377 
boﬁ
 
po°Te°
(boﬁ 
ã°Suc˚eded
Ë
	govîride


379 i‡(
	gã°Suc˚eded
) {

381 
ASSERT_OR_FAIL
(
åackög_Æloˇt‹
::
cuºít_ußge
() == 0);

383  
	gåue
;

387 
boﬁ
 
¸óã_em±y_queue
()

389 
	gC⁄cuºítQueue
<, 
	gMÆlocTøckögTøôs
> 
	gq
;

390  
	gåue
;

394 
boﬁ
 
¸óã_tokí
()

396 
	gC⁄cuºítQueue
<, 
	gMÆlocTøckögTøôs
> 
	gq
;

397 
Produ˚rTokí
 
tok
(
q
);

399  
	gåue
;

402 
boﬁ
 
cúcuœr_Àss_th™
()

405 
uöt32_t
 
	ga
, 
	gb
;

407 
	ga
 = 0; 
	gb
 = 100;

408 
ASSERT_OR_FAIL
(
dëaûs
::
cúcuœr_Àss_th™
(
a
, 
b
));

409 
ASSERT_OR_FAIL
(!
dëaûs
::
cúcuœr_Àss_th™
(
b
, 
a
));

411 
	ga
 = 100; 
	gb
 = 0;

412 
ASSERT_OR_FAIL
(!
dëaûs
::
cúcuœr_Àss_th™
(
a
, 
b
));

413 
ASSERT_OR_FAIL
(
dëaûs
::
cúcuœr_Àss_th™
(
b
, 
a
));

415 
	ga
 = 0; 
	gb
 = 0;

416 
ASSERT_OR_FAIL
(!
dëaûs
::
cúcuœr_Àss_th™
(
a
, 
b
));

417 
ASSERT_OR_FAIL
(!
dëaûs
::
cúcuœr_Àss_th™
(
b
, 
a
));

419 
	ga
 = 100; 
	gb
 = 100;

420 
ASSERT_OR_FAIL
(!
dëaûs
::
cúcuœr_Àss_th™
(
a
, 
b
));

421 
ASSERT_OR_FAIL
(!
dëaûs
::
cúcuœr_Àss_th™
(
b
, 
a
));

423 
	ga
 = 0; 
	gb
 = 1u << 31;

424 
ASSERT_OR_FAIL
(!
dëaûs
::
cúcuœr_Àss_th™
(
a
, 
b
));

425 
ASSERT_OR_FAIL
(!
dëaûs
::
cúcuœr_Àss_th™
(
b
, 
a
));

427 
	ga
 = 1; 
	gb
 = 1u << 31;

428 
ASSERT_OR_FAIL
(
dëaûs
::
cúcuœr_Àss_th™
(
a
, 
b
));

429 
ASSERT_OR_FAIL
(!
dëaûs
::
cúcuœr_Àss_th™
(
b
, 
a
));

431 
	ga
 = 0; 
	gb
 = (1u << 31) + 1;

432 
ASSERT_OR_FAIL
(!
dëaûs
::
cúcuœr_Àss_th™
(
a
, 
b
));

433 
ASSERT_OR_FAIL
(
dëaûs
::
cúcuœr_Àss_th™
(
b
, 
a
));

435 
	ga
 = 100; 
	gb
 = (1u << 31) + 1;

436 
ASSERT_OR_FAIL
(
dëaûs
::
cúcuœr_Àss_th™
(
a
, 
b
));

437 
ASSERT_OR_FAIL
(!
dëaûs
::
cúcuœr_Àss_th™
(
b
, 
a
));

439 
	ga
 = (1u << 31Ë+ 7; 
	gb
 = 5;

440 
ASSERT_OR_FAIL
(
dëaûs
::
cúcuœr_Àss_th™
(
a
, 
b
));

441 
ASSERT_OR_FAIL
(!
dëaûs
::
cúcuœr_Àss_th™
(
b
, 
a
));

443 
	ga
 = (1u << 16Ë+ 7; 
	gb
 = (1 << 16) + 5;

444 
ASSERT_OR_FAIL
(!
dëaûs
::
cúcuœr_Àss_th™
(
a
, 
b
));

445 
ASSERT_OR_FAIL
(
dëaûs
::
cúcuœr_Àss_th™
(
b
, 
a
));

447 
	ga
 = 0xFFFFFFFFu; 
	gb
 = 0;

448 
ASSERT_OR_FAIL
(
dëaûs
::
cúcuœr_Àss_th™
(
a
, 
b
));

449 
ASSERT_OR_FAIL
(!
dëaûs
::
cúcuœr_Àss_th™
(
b
, 
a
));

451 
	ga
 = 0xFFFFFFFFu; 
	gb
 = 0xFFFFFFu;

452 
ASSERT_OR_FAIL
(
dëaûs
::
cúcuœr_Àss_th™
(
a
, 
b
));

453 
ASSERT_OR_FAIL
(!
dëaûs
::
cúcuœr_Àss_th™
(
b
, 
a
));

457 
uöt16_t
 
	ga
, 
	gb
;

459 
	ga
 = 0; 
	gb
 = 100;

460 
ASSERT_OR_FAIL
(
dëaûs
::
cúcuœr_Àss_th™
(
a
, 
b
));

461 
ASSERT_OR_FAIL
(!
dëaûs
::
cúcuœr_Àss_th™
(
b
, 
a
));

463 
	ga
 = 100; 
	gb
 = 0;

464 
ASSERT_OR_FAIL
(!
dëaûs
::
cúcuœr_Àss_th™
(
a
, 
b
));

465 
ASSERT_OR_FAIL
(
dëaûs
::
cúcuœr_Àss_th™
(
b
, 
a
));

467 
	ga
 = 0; 
	gb
 = 0;

468 
ASSERT_OR_FAIL
(!
dëaûs
::
cúcuœr_Àss_th™
(
a
, 
b
));

469 
ASSERT_OR_FAIL
(!
dëaûs
::
cúcuœr_Àss_th™
(
b
, 
a
));

471 
	ga
 = 100; 
	gb
 = 100;

472 
ASSERT_OR_FAIL
(!
dëaûs
::
cúcuœr_Àss_th™
(
a
, 
b
));

473 
ASSERT_OR_FAIL
(!
dëaûs
::
cúcuœr_Àss_th™
(
b
, 
a
));

475 
	ga
 = 0; 
	gb
 = 1 << 15;

476 
ASSERT_OR_FAIL
(!
dëaûs
::
cúcuœr_Àss_th™
(
a
, 
b
));

477 
ASSERT_OR_FAIL
(!
dëaûs
::
cúcuœr_Àss_th™
(
b
, 
a
));

479 
	ga
 = 1; 
	gb
 = 1 << 15;

480 
ASSERT_OR_FAIL
(
dëaûs
::
cúcuœr_Àss_th™
(
a
, 
b
));

481 
ASSERT_OR_FAIL
(!
dëaûs
::
cúcuœr_Àss_th™
(
b
, 
a
));

483 
	ga
 = 0; 
	gb
 = (1 << 15) + 1;

484 
ASSERT_OR_FAIL
(!
dëaûs
::
cúcuœr_Àss_th™
(
a
, 
b
));

485 
ASSERT_OR_FAIL
(
dëaûs
::
cúcuœr_Àss_th™
(
b
, 
a
));

487 
	ga
 = 100; 
	gb
 = (1 << 15) + 1;

488 
ASSERT_OR_FAIL
(
dëaûs
::
cúcuœr_Àss_th™
(
a
, 
b
));

489 
ASSERT_OR_FAIL
(!
dëaûs
::
cúcuœr_Àss_th™
(
b
, 
a
));

491 
	ga
 = (1 << 15Ë+ 7; 
	gb
 = 5;

492 
ASSERT_OR_FAIL
(
dëaûs
::
cúcuœr_Àss_th™
(
a
, 
b
));

493 
ASSERT_OR_FAIL
(!
dëaûs
::
cúcuœr_Àss_th™
(
b
, 
a
));

495 
	ga
 = (1 << 15Ë+ 7; 
	gb
 = (1 << 15) + 5;

496 
ASSERT_OR_FAIL
(!
dëaûs
::
cúcuœr_Àss_th™
(
a
, 
b
));

497 
ASSERT_OR_FAIL
(
dëaûs
::
cúcuœr_Àss_th™
(
b
, 
a
));

499 
	ga
 = 0xFFFF; 
	gb
 = 0;

500 
ASSERT_OR_FAIL
(
dëaûs
::
cúcuœr_Àss_th™
(
a
, 
b
));

501 
ASSERT_OR_FAIL
(!
dëaûs
::
cúcuœr_Àss_th™
(
b
, 
a
));

503 
	ga
 = 0xFFFF; 
	gb
 = 0xFFF;

504 
ASSERT_OR_FAIL
(
dëaûs
::
cúcuœr_Àss_th™
(
a
, 
b
));

505 
ASSERT_OR_FAIL
(!
dëaûs
::
cúcuœr_Àss_th™
(
b
, 
a
));

508  
	gåue
;

512 
boﬁ
 
íqueue_⁄e_ex∂icô
()

514 
	gC⁄cuºítQueue
<, 
	gMÆlocTøckögTøôs
> 
	gq
;

515 
Produ˚rTokí
 
tok
(
q
);

517 
boﬁ
 
	gªsu…
 = 
q
.
íqueue
(
tok
, 17);

519 
ASSERT_OR_FAIL
(
ªsu…
);

520  
	gåue
;

523 
boﬁ
 
íqueue_™d_dequeue_⁄e_ex∂icô
()

525 
	gC⁄cuºítQueue
<, 
	gMÆlocTøckögTøôs
> 
	gq
;

526 
Produ˚rTokí
 
tok
(
q
);

528 
	gôem
 = 0;

529 
ASSERT_OR_FAIL
(
q
.
íqueue
(
tok
, 123));

530 
ASSERT_OR_FAIL
(
q
.
åy_dequeue_‰om_¥odu˚r
(
tok
, 
ôem
));

531 
ASSERT_OR_FAIL
(
ôem
 == 123);

533  
	gåue
;

536 
boﬁ
 
íqueue_⁄e_im∂icô
()

538 
	gC⁄cuºítQueue
<, 
	gMÆlocTøckögTøôs
> 
	gq
;

540 
boﬁ
 
	gªsu…
 = 
q
.
íqueue
(17);

542 
ASSERT_OR_FAIL
(
ªsu…
);

543  
	gåue
;

546 
boﬁ
 
íqueue_™d_dequeue_⁄e_im∂icô
()

548 
	gC⁄cuºítQueue
<, 
	gMÆlocTøckögTøôs
> 
	gq
;

550 
	gôem
 = 0;

551 
ASSERT_OR_FAIL
(
q
.
íqueue
(123));

552 
ASSERT_OR_FAIL
(
q
.
åy_dequeue
(
ôem
));

553 
ASSERT_OR_FAIL
(
ôem
 == 123);

555  
	gåue
;

558 
boﬁ
 
íqueue_™d_dequeue_a_„w
()

562 
	gC⁄cuºítQueue
<, 
	gTe°Tøôs
<16>> 
	gq
;

563 
Produ˚rTokí
 
tok
(
q
);

565 
	gi
 = 0; i != 99999; ++i) {

566 
ASSERT_OR_FAIL
(
q
.
íqueue
(
tok
, 
i
));

569 
	gôem
;

570 
	gi
 = 0; i != 99999; ++i) {

571 
ASSERT_OR_FAIL
(
q
.
åy_dequeue_‰om_¥odu˚r
(
tok
, 
ôem
));

572 
ASSERT_OR_FAIL
(
ôem
 =
i
);

574 
ASSERT_OR_FAIL
(!
q
.
åy_dequeue_‰om_¥odu˚r
(
tok
, 
ôem
));

579 
	gC⁄cuºítQueue
<, 
	gTe°Tøôs
<16>> 
	gq
;

580 
Produ˚rTokí
 
tok
(
q
);

582 
	gôem
;

583 
	gi
 = 0; i != 99999; ++i) {

584 
ASSERT_OR_FAIL
(
q
.
íqueue
(
tok
, 
i
));

585 
ASSERT_OR_FAIL
(
q
.
íqueue
(
tok
, 
i
 * 2));

586 
ASSERT_OR_FAIL
(
q
.
åy_dequeue_‰om_¥odu˚r
(
tok
, 
ôem
));

587 
ASSERT_OR_FAIL
(
ôem
 =(
i
 / 2) * (i % 2 == 0 ? 1 : 2));

590 
	gi
 = 0; i != 99999; ++i) {

591 
ASSERT_OR_FAIL
(
q
.
åy_dequeue_‰om_¥odu˚r
(
tok
, 
ôem
));

592 
ASSERT_OR_FAIL
(
ôem
 =((
i
 + 99999) / 2) * (i % 2 == 1 ? 1 : 2));

594 
ASSERT_OR_FAIL
(!
q
.
åy_dequeue_‰om_¥odu˚r
(
tok
, 
ôem
));

599 
	gC⁄cuºítQueue
<, 
	gTe°Tøôs
<16>> 
	gq
;

601 
	gi
 = 0; i != 99999; ++i) {

602 
ASSERT_OR_FAIL
(
q
.
íqueue
(
i
));

605 
	gôem
;

606 
	gi
 = 0; i != 99999; ++i) {

607 
ASSERT_OR_FAIL
(
q
.
åy_dequeue
(
ôem
));

608 
ASSERT_OR_FAIL
(
ôem
 =
i
);

610 
ASSERT_OR_FAIL
(!
q
.
åy_dequeue
(
ôem
));

614 
	gC⁄cuºítQueue
<, 
	gTe°Tøôs
<16>> 
	gq
;

616 
	gôem
;

617 
	gi
 = 0; i != 99999; ++i) {

618 
ASSERT_OR_FAIL
(
q
.
íqueue
(
i
));

619 
ASSERT_OR_FAIL
(
q
.
íqueue
(
i
 * 2));

620 
ASSERT_OR_FAIL
(
q
.
åy_dequeue
(
ôem
));

621 
ASSERT_OR_FAIL
(
ôem
 =(
i
 / 2) * (i % 2 == 0 ? 1 : 2));

624 
	gi
 = 0; i != 99999; ++i) {

625 
ASSERT_OR_FAIL
(
q
.
åy_dequeue
(
ôem
));

626 
ASSERT_OR_FAIL
(
ôem
 =((
i
 + 99999) / 2) * (i % 2 == 1 ? 1 : 2));

628 
ASSERT_OR_FAIL
(!
q
.
åy_dequeue
(
ôem
));

631  
	gåue
;

634 
boﬁ
 
íqueue_bulk
()

636 
	gTe°Tøôs
<2> 
	tTøôs2
;

637 
	gTe°Tøôs
<4> 
	tTøôs4
;

639 
	g¨r123
[] = { 1, 2, 3 };

640 
	g¨r1234
[] = { 1, 2, 3, 4 };

641 
	g¨r123456
[] = { 1, 2, 3, 4, 5, 6 };

643 
	gTøôs2
::
ª£t
();

646 
	gC⁄cuºítQueue
<, 
	gTøôs2
> 
q
(2);

647 
ASSERT_OR_FAIL
(
Tøôs2
::
mÆloc_cou¡
() == 1);

649 
	gq
.
íqueue_bulk
(
¨r123
, 3);

650 
ASSERT_OR_FAIL
(
Tøôs2
::
mÆloc_cou¡
() == 4);

652 
	gôem
;

653 
	gi
 = 0; i != 3; ++i) {

654 
ASSERT_OR_FAIL
(
q
.
åy_dequeue
(
ôem
));

655 
ASSERT_OR_FAIL
(
ôem
 =
i
 + 1);

657 
ASSERT_OR_FAIL
(!
q
.
åy_dequeue
(
ôem
));

660 
	gTøôs4
::
ª£t
();

663 
	gC⁄cuºítQueue
<, 
	gTøôs4
> 
q
(2);

664 
ASSERT_OR_FAIL
(
Tøôs4
::
mÆloc_cou¡
() == 1);

666 
	gq
.
íqueue_bulk
(
¨r1234
, 4);

667 
ASSERT_OR_FAIL
(
Tøôs4
::
mÆloc_cou¡
() == 3);

669 
	gôem
;

670 
	gi
 = 0; i != 4; ++i) {

671 
ASSERT_OR_FAIL
(
q
.
åy_dequeue
(
ôem
));

672 
ASSERT_OR_FAIL
(
ôem
 =
i
 + 1);

674 
ASSERT_OR_FAIL
(!
q
.
åy_dequeue
(
ôem
));

677 
	gTøôs2
::
ª£t
();

680 
	gC⁄cuºítQueue
<, 
	gTøôs2
> 
q
(2);

681 
ASSERT_OR_FAIL
(
Tøôs2
::
mÆloc_cou¡
() == 1);

683 
ASSERT_OR_FAIL
(!
q
.
åy_íqueue_bulk
(
¨r123
, 3));

684 
ASSERT_OR_FAIL
(
Tøôs2
::
mÆloc_cou¡
() == 3);

686 
	gôem
;

687 
ASSERT_OR_FAIL
(!
q
.
åy_dequeue
(
ôem
));

689 
ASSERT_OR_FAIL
(
q
.
åy_íqueue_bulk
(
¨r123
, 2));

690 
	gi
 = 0; i != 2; ++i) {

691 
ASSERT_OR_FAIL
(
q
.
åy_dequeue
(
ôem
));

692 
ASSERT_OR_FAIL
(
ôem
 =
i
 + 1);

694 
ASSERT_OR_FAIL
(!
q
.
åy_dequeue
(
ôem
));

698 
	gTøôs2
::
ª£t
();

701 
	gC⁄cuºítQueue
<, 
	gTøôs2
> 
q
(4);

702 
ASSERT_OR_FAIL
(
Tøôs2
::
mÆloc_cou¡
() == 1);

704 
	gq
.
íqueue_bulk
(
¨r1234
, 4);

705 
ASSERT_OR_FAIL
(
Tøôs2
::
mÆloc_cou¡
() == 3);

707 
	gôem
;

708 
	gi
 = 0; i != 4; ++i) {

709 
ASSERT_OR_FAIL
(
q
.
åy_dequeue
(
ôem
));

710 
ASSERT_OR_FAIL
(
ôem
 =
i
 + 1);

712 
ASSERT_OR_FAIL
(!
q
.
åy_dequeue
(
ôem
));

715 
	gTøôs4
::
ª£t
();

718 
	gC⁄cuºítQueue
<, 
	gTøôs4
> 
q
(4);

719 
ASSERT_OR_FAIL
(
Tøôs4
::
mÆloc_cou¡
() == 1);

721 
ASSERT_OR_FAIL
(
q
.
íqueue
(0));

723 
ASSERT_OR_FAIL
(
q
.
íqueue_bulk
(
¨r1234
, 4));

724 
ASSERT_OR_FAIL
(
Tøôs4
::
mÆloc_cou¡
() == 4);

726 
	gôem
;

727 
	gi
 = 0; i != 5; ++i) {

728 
ASSERT_OR_FAIL
(
q
.
åy_dequeue
(
ôem
));

729 
ASSERT_OR_FAIL
(
ôem
 =
i
);

731 
ASSERT_OR_FAIL
(!
q
.
åy_dequeue
(
ôem
));

734 
	gTøôs4
::
ª£t
();

737 
	gC⁄cuºítQueue
<, 
	gTøôs4
> 
q
(5);

738 
ASSERT_OR_FAIL
(
Tøôs4
::
mÆloc_cou¡
() == 1);

740 
ASSERT_OR_FAIL
(
q
.
íqueue
(0));

742 
ASSERT_OR_FAIL
(
q
.
íqueue_bulk
(
¨r1234
, 4));

743 
ASSERT_OR_FAIL
(
Tøôs4
::
mÆloc_cou¡
() == 3);

745 
	gôem
;

746 
	gi
 = 0; i != 5; ++i) {

747 
ASSERT_OR_FAIL
(
q
.
åy_dequeue
(
ôem
));

748 
ASSERT_OR_FAIL
(
ôem
 =
i
);

750 
ASSERT_OR_FAIL
(!
q
.
åy_dequeue
(
ôem
));

753 
	gTøôs2
::
ª£t
();

756 
	gC⁄cuºítQueue
<, 
	gTøôs2
> 
q
(4);

757 
ASSERT_OR_FAIL
(
Tøôs2
::
mÆloc_cou¡
() == 1);

759 
ASSERT_OR_FAIL
(
q
.
íqueue
(17));

760 
ASSERT_OR_FAIL
(
Tøôs2
::
mÆloc_cou¡
() == 3);

762 
ASSERT_OR_FAIL
(!
q
.
åy_íqueue_bulk
(
¨r123456
, 6));

763 
ASSERT_OR_FAIL
(
Tøôs2
::
mÆloc_cou¡
() == 3);

765 
	gôem
;

766 
ASSERT_OR_FAIL
(
q
.
åy_dequeue
(
ôem
));

767 
ASSERT_OR_FAIL
(
ôem
 == 17);

768 
ASSERT_OR_FAIL
(!
q
.
åy_dequeue
(
ôem
));

771 
	gTøôs2
::
ª£t
();

774 
	gC⁄cuºítQueue
<, 
	gTøôs2
> 
q
(3);

775 
ASSERT_OR_FAIL
(
Tøôs2
::
mÆloc_cou¡
() == 1);

777 
ASSERT_OR_FAIL
(
q
.
åy_íqueue_bulk
(
¨r123
, 0));

778 
ASSERT_OR_FAIL
(
Tøôs2
::
mÆloc_cou¡
() == 3);

780 
	gôem
;

781 
ASSERT_OR_FAIL
(!
q
.
åy_dequeue
(
ôem
));

786 
	gTøôs2
::
ª£t
();

789 
	gC⁄cuºítQueue
<, 
	gTøôs2
> 
q
(2);

790 
ASSERT_OR_FAIL
(
Tøôs2
::
mÆloc_cou¡
() == 1);

792 
Produ˚rTokí
 
tok
(
q
);

793 
ASSERT_OR_FAIL
(
Tøôs2
::
mÆloc_cou¡
() == 3);

795 
	gq
.
íqueue_bulk
(
tok
, 
¨r123
, 3);

796 
ASSERT_OR_FAIL
(
Tøôs2
::
mÆloc_cou¡
() == 4);

798 
	gôem
;

799 
	gi
 = 0; i != 3; ++i) {

800 
ASSERT_OR_FAIL
(
q
.
åy_dequeue
(
ôem
));

801 
ASSERT_OR_FAIL
(
ôem
 =
i
 + 1);

803 
ASSERT_OR_FAIL
(!
q
.
åy_dequeue
(
ôem
));

806 
	gTøôs4
::
ª£t
();

809 
	gC⁄cuºítQueue
<, 
	gTøôs4
> 
q
(2);

810 
ASSERT_OR_FAIL
(
Tøôs4
::
mÆloc_cou¡
() == 1);

812 
Produ˚rTokí
 
tok
(
q
);

813 
ASSERT_OR_FAIL
(
Tøôs4
::
mÆloc_cou¡
() == 3);

815 
	gq
.
íqueue_bulk
(
tok
, 
¨r1234
, 4);

816 
ASSERT_OR_FAIL
(
Tøôs4
::
mÆloc_cou¡
() == 3);

818 
	gôem
;

819 
	gi
 = 0; i != 4; ++i) {

820 
ASSERT_OR_FAIL
(
q
.
åy_dequeue
(
ôem
));

821 
ASSERT_OR_FAIL
(
ôem
 =
i
 + 1);

823 
ASSERT_OR_FAIL
(!
q
.
åy_dequeue
(
ôem
));

826 
	gTøôs2
::
ª£t
();

829 
	gC⁄cuºítQueue
<, 
	gTøôs2
> 
q
(2);

830 
ASSERT_OR_FAIL
(
Tøôs2
::
mÆloc_cou¡
() == 1);

832 
Produ˚rTokí
 
tok
(
q
);

833 
ASSERT_OR_FAIL
(
Tøôs2
::
mÆloc_cou¡
() == 3);

835 
ASSERT_OR_FAIL
(!
q
.
åy_íqueue_bulk
(
tok
, 
¨r123
, 3));

836 
ASSERT_OR_FAIL
(
Tøôs2
::
mÆloc_cou¡
() == 3);

838 
	gôem
;

839 
ASSERT_OR_FAIL
(!
q
.
åy_dequeue
(
ôem
));

841 
ASSERT_OR_FAIL
(
q
.
åy_íqueue_bulk
(
tok
, 
¨r123
, 2));

842 
	gi
 = 0; i != 2; ++i) {

843 
ASSERT_OR_FAIL
(
q
.
åy_dequeue
(
ôem
));

844 
ASSERT_OR_FAIL
(
ôem
 =
i
 + 1);

846 
ASSERT_OR_FAIL
(!
q
.
åy_dequeue
(
ôem
));

847 
ASSERT_OR_FAIL
(
Tøôs2
::
mÆloc_cou¡
() == 3);

850 
	gTøôs2
::
ª£t
();

853 
	gC⁄cuºítQueue
<, 
	gTøôs2
> 
q
(4);

854 
ASSERT_OR_FAIL
(
Tøôs2
::
mÆloc_cou¡
() == 1);

856 
Produ˚rTokí
 
tok
(
q
);

857 
ASSERT_OR_FAIL
(
Tøôs2
::
mÆloc_cou¡
() == 3);

859 
	gq
.
íqueue_bulk
(
tok
, 
¨r1234
, 4);

860 
ASSERT_OR_FAIL
(
Tøôs2
::
mÆloc_cou¡
() == 3);

862 
	gôem
;

863 
	gi
 = 0; i != 4; ++i) {

864 
ASSERT_OR_FAIL
(
q
.
åy_dequeue
(
ôem
));

865 
ASSERT_OR_FAIL
(
ôem
 =
i
 + 1);

867 
ASSERT_OR_FAIL
(!
q
.
åy_dequeue
(
ôem
));

870 
	gTøôs4
::
ª£t
();

873 
	gC⁄cuºítQueue
<, 
	gTøôs4
> 
q
(4);

874 
ASSERT_OR_FAIL
(
Tøôs4
::
mÆloc_cou¡
() == 1);

876 
Produ˚rTokí
 
tok
(
q
);

877 
ASSERT_OR_FAIL
(
Tøôs4
::
mÆloc_cou¡
() == 3);

879 
ASSERT_OR_FAIL
(
q
.
íqueue
(
tok
, 0));

881 
ASSERT_OR_FAIL
(
q
.
íqueue_bulk
(
tok
, 
¨r1234
, 4));

882 
ASSERT_OR_FAIL
(
Tøôs4
::
mÆloc_cou¡
() == 4);

884 
	gôem
;

885 
	gi
 = 0; i != 5; ++i) {

886 
ASSERT_OR_FAIL
(
q
.
åy_dequeue
(
ôem
));

887 
ASSERT_OR_FAIL
(
ôem
 =
i
);

889 
ASSERT_OR_FAIL
(!
q
.
åy_dequeue
(
ôem
));

892 
	gTøôs4
::
ª£t
();

895 
	gC⁄cuºítQueue
<, 
	gTøôs4
> 
q
(5);

896 
ASSERT_OR_FAIL
(
Tøôs4
::
mÆloc_cou¡
() == 1);

898 
Produ˚rTokí
 
tok
(
q
);

899 
ASSERT_OR_FAIL
(
Tøôs4
::
mÆloc_cou¡
() == 3);

901 
ASSERT_OR_FAIL
(
q
.
íqueue
(
tok
, 0));

903 
ASSERT_OR_FAIL
(
q
.
íqueue_bulk
(
tok
, 
¨r1234
, 4));

904 
ASSERT_OR_FAIL
(
Tøôs4
::
mÆloc_cou¡
() == 3);

906 
	gôem
;

907 
	gi
 = 0; i != 5; ++i) {

908 
ASSERT_OR_FAIL
(
q
.
åy_dequeue
(
ôem
));

909 
ASSERT_OR_FAIL
(
ôem
 =
i
);

911 
ASSERT_OR_FAIL
(!
q
.
åy_dequeue
(
ôem
));

914 
	gTøôs2
::
ª£t
();

917 
	gC⁄cuºítQueue
<, 
	gTøôs2
> 
q
(4);

918 
ASSERT_OR_FAIL
(
Tøôs2
::
mÆloc_cou¡
() == 1);

920 
Produ˚rTokí
 
tok
(
q
);

921 
ASSERT_OR_FAIL
(
Tøôs2
::
mÆloc_cou¡
() == 3);

923 
ASSERT_OR_FAIL
(
q
.
íqueue
(
tok
, 17));

924 
ASSERT_OR_FAIL
(
Tøôs2
::
mÆloc_cou¡
() == 3);

926 
ASSERT_OR_FAIL
(!
q
.
åy_íqueue_bulk
(
tok
, 
¨r123456
, 6));

927 
ASSERT_OR_FAIL
(
Tøôs2
::
mÆloc_cou¡
() == 3);

929 
	gôem
;

930 
ASSERT_OR_FAIL
(
q
.
åy_dequeue
(
ôem
));

931 
ASSERT_OR_FAIL
(
ôem
 == 17);

932 
ASSERT_OR_FAIL
(!
q
.
åy_dequeue
(
ôem
));

935 
	gTøôs2
::
ª£t
();

938 
	gC⁄cuºítQueue
<, 
	gTøôs2
> 
q
(3);

939 
ASSERT_OR_FAIL
(
Tøôs2
::
mÆloc_cou¡
() == 1);

941 
Produ˚rTokí
 
tok
(
q
);

942 
ASSERT_OR_FAIL
(
Tøôs2
::
mÆloc_cou¡
() == 3);

944 
ASSERT_OR_FAIL
(
q
.
åy_íqueue_bulk
(
tok
, 
¨r123
, 0));

945 
ASSERT_OR_FAIL
(
Tøôs2
::
mÆloc_cou¡
() == 3);

947 
	gôem
;

948 
ASSERT_OR_FAIL
(!
q
.
åy_dequeue
(
ôem
));

950 
ASSERT_OR_FAIL
(
q
.
íqueue
(
tok
, 17));

951 
ASSERT_OR_FAIL
(
q
.
åy_dequeue
(
ôem
));

952 
ASSERT_OR_FAIL
(
ôem
 == 17);

953 
ASSERT_OR_FAIL
(!
q
.
åy_dequeue
(
ôem
));

956 
	gTøôs4
::
ª£t
();

959 
	gC⁄cuºítQueue
<, 
	gTøôs4
> 
q
(8);

960 
ASSERT_OR_FAIL
(
Tøôs4
::
mÆloc_cou¡
() == 1);

962 
Produ˚rTokí
 
tok
(
q
);

963 
ASSERT_OR_FAIL
(
Tøôs4
::
mÆloc_cou¡
() == 3);

965 
	gi
 = 0; i != 5; ++i) {

966 
ASSERT_OR_FAIL
(
q
.
íqueue
(
tok
, 
i
));

968 
	gôem
;

969 
	gi
 = 0; i != 5; ++i) {

970 
ASSERT_OR_FAIL
(
q
.
åy_dequeue
(
ôem
));

971 
ASSERT_OR_FAIL
(
ôem
 =
i
);

973 
ASSERT_OR_FAIL
(!
q
.
åy_dequeue
(
ôem
));

975 
ASSERT_OR_FAIL
(
Tøôs4
::
mÆloc_cou¡
() == 3);

977 
ASSERT_OR_FAIL
(
q
.
íqueue_bulk
(
tok
, 
¨r123456
, 6));

978 
ASSERT_OR_FAIL
(
Tøôs4
::
mÆloc_cou¡
() == 3);

980 
	gi
 = 0; i != 6; ++i) {

981 
ASSERT_OR_FAIL
(
q
.
åy_dequeue
(
ôem
));

982 
ASSERT_OR_FAIL
(
ôem
 =
i
 + 1);

984 
ASSERT_OR_FAIL
(!
q
.
åy_dequeue
(
ôem
));

985 
ASSERT_OR_FAIL
(
Tøôs4
::
mÆloc_cou¡
() == 3);

988  
	gåue
;

991 
boﬁ
 
block_Æloc
()

993 
	gTe°Tøôs
<2> 
	tTøôs
;

994 
	gTøôs
::
ª£t
();

997 
	gC⁄cuºítQueue
<, 
	gTøôs
> 
q
(7);

998 
ASSERT_OR_FAIL
(
q
.
öôülBlockPoﬁSize
 == 4);

1000 
ASSERT_OR_FAIL
(
Tøôs
::
mÆloc_cou¡
() == 1);

1001 
ASSERT_OR_FAIL
(
Tøôs
::
‰ì_cou¡
() == 0);

1003 
Produ˚rTokí
 
tok
(
q
);

1004 
ASSERT_OR_FAIL
(
Tøôs
::
mÆloc_cou¡
() == 3);

1005 
ASSERT_OR_FAIL
(
Tøôs
::
‰ì_cou¡
() == 0);

1008 
	gi
 = 0; i != 9; ++i) {

1009 
ASSERT_OR_FAIL
(
q
.
íqueue
(
tok
, 
i
));

1012 
ASSERT_OR_FAIL
(
Tøôs
::
mÆloc_cou¡
() == 4);

1013 
ASSERT_OR_FAIL
(
Tøôs
::
‰ì_cou¡
() == 0);

1016 
ASSERT_OR_FAIL
(
q
.
íqueue
(
tok
, 9));

1017 
ASSERT_OR_FAIL
(
Tøôs
::
mÆloc_cou¡
() == 4);

1018 
ASSERT_OR_FAIL
(
Tøôs
::
‰ì_cou¡
() == 0);

1021 
ASSERT_OR_FAIL
(!
q
.
åy_íqueue
(
tok
, 10));

1022 
ASSERT_OR_FAIL
(
Tøôs
::
mÆloc_cou¡
() == 4);

1023 
ASSERT_OR_FAIL
(
Tøôs
::
‰ì_cou¡
() == 0);

1026 
	gôem
;

1027 
	gi
 = 0; i != 10; ++i) {

1028 
ASSERT_OR_FAIL
(
q
.
åy_dequeue_‰om_¥odu˚r
(
tok
, 
ôem
));

1029 
ASSERT_OR_FAIL
(
ôem
 =
i
);

1033 
ASSERT_OR_FAIL
(!
q
.
åy_dequeue_‰om_¥odu˚r
(
tok
, 
ôem
));

1034 
ASSERT_OR_FAIL
(
Tøôs
::
‰ì_cou¡
() == 0);

1037 
ASSERT_OR_FAIL
(
Tøôs
::
mÆloc_cou¡
() == 4);

1038 
ASSERT_OR_FAIL
(
Tøôs
::
‰ì_cou¡
() == 4);

1041 
	gTøôs
::
ª£t
();

1043 
	gC⁄cuºítQueue
<, 
	gTøôs
> 
q
(7);

1044 
ASSERT_OR_FAIL
(
q
.
öôülBlockPoﬁSize
 == 4);

1046 
ASSERT_OR_FAIL
(
q
.
íqueue
(39));

1048 
ASSERT_OR_FAIL
(
Tøôs
::
mÆloc_cou¡
() == 3);

1049 
ASSERT_OR_FAIL
(
Tøôs
::
‰ì_cou¡
() == 0);

1052 
	gi
 = 0; i != 8; ++i) {

1053 
ASSERT_OR_FAIL
(
q
.
íqueue
(
i
));

1056 
ASSERT_OR_FAIL
(
Tøôs
::
mÆloc_cou¡
() == 4);

1057 
ASSERT_OR_FAIL
(
Tøôs
::
‰ì_cou¡
() == 0);

1060 
ASSERT_OR_FAIL
(
q
.
íqueue
(8));

1061 
ASSERT_OR_FAIL
(
Tøôs
::
mÆloc_cou¡
() == 4);

1062 
ASSERT_OR_FAIL
(
Tøôs
::
‰ì_cou¡
() == 0);

1065 
ASSERT_OR_FAIL
(!
q
.
åy_íqueue
(9));

1066 
ASSERT_OR_FAIL
(
Tøôs
::
mÆloc_cou¡
() == 4);

1067 
ASSERT_OR_FAIL
(
Tøôs
::
‰ì_cou¡
() == 0);

1070 
	gôem
;

1071 
ASSERT_OR_FAIL
(
q
.
åy_dequeue
(
ôem
));

1072 
ASSERT_OR_FAIL
(
ôem
 == 39);

1073 
	gi
 = 0; i != 9; ++i) {

1074 
ASSERT_OR_FAIL
(
q
.
åy_dequeue
(
ôem
));

1075 
ASSERT_OR_FAIL
(
ôem
 =
i
);

1079 
ASSERT_OR_FAIL
(!
q
.
åy_dequeue
(
ôem
));

1080 
ASSERT_OR_FAIL
(
Tøôs
::
‰ì_cou¡
() == 0);

1083 
ASSERT_OR_FAIL
(
Tøôs
::
mÆloc_cou¡
() == 4);

1084 
ASSERT_OR_FAIL
(
Tøôs
::
‰ì_cou¡
() == 4);

1087 
	gTøôs
::
ª£t
();

1088 
	gVîyAlig√d
::
îr‹s
 = 0;

1090 
	gC⁄cuºítQueue
<
	gVîyAlig√d
, 
	gTøôs
> 
q
(7);

1091 
ASSERT_OR_FAIL
(
q
.
íqueue
(39));

1093 
ASSERT_OR_FAIL
(
Tøôs
::
mÆloc_cou¡
() == 3);

1094 
ASSERT_OR_FAIL
(
Tøôs
::
‰ì_cou¡
() == 0);

1095 
ASSERT_OR_FAIL
(
VîyAlig√d
::
îr‹s
 == 0);

1098 
	gi
 = 0; i != 8; ++i) {

1099 
ASSERT_OR_FAIL
(
q
.
íqueue
(
i
));

1100 
ASSERT_OR_FAIL
(
VîyAlig√d
::
îr‹s
 == 0);

1103 
ASSERT_OR_FAIL
(
Tøôs
::
mÆloc_cou¡
() == 4);

1104 
ASSERT_OR_FAIL
(
Tøôs
::
‰ì_cou¡
() == 0);

1107 
ASSERT_OR_FAIL
(
q
.
íqueue
(8));

1108 
ASSERT_OR_FAIL
(
Tøôs
::
mÆloc_cou¡
() == 4);

1109 
ASSERT_OR_FAIL
(
Tøôs
::
‰ì_cou¡
() == 0);

1110 
ASSERT_OR_FAIL
(
VîyAlig√d
::
îr‹s
 == 0);

1113 
ASSERT_OR_FAIL
(!
q
.
åy_íqueue
(9));

1114 
ASSERT_OR_FAIL
(
Tøôs
::
mÆloc_cou¡
() == 4);

1115 
ASSERT_OR_FAIL
(
Tøôs
::
‰ì_cou¡
() == 0);

1116 
ASSERT_OR_FAIL
(
VîyAlig√d
::
îr‹s
 == 0);

1119 
VîyAlig√d
 
	gôem
;

1120 
ASSERT_OR_FAIL
(
q
.
åy_dequeue
(
ôem
));

1121 
ASSERT_OR_FAIL
(
ôem
.
vÆue
 == 39);

1122 
	gi
 = 0; i != 9; ++i) {

1123 
ASSERT_OR_FAIL
(
q
.
åy_dequeue
(
ôem
));

1124 
ASSERT_OR_FAIL
(
ôem
.
vÆue
 =
i
);

1125 
ASSERT_OR_FAIL
(
VîyAlig√d
::
îr‹s
 == 0);

1129 
ASSERT_OR_FAIL
(!
q
.
åy_dequeue
(
ôem
));

1130 
ASSERT_OR_FAIL
(
Tøôs
::
‰ì_cou¡
() == 0);

1131 
ASSERT_OR_FAIL
(
VîyAlig√d
::
îr‹s
 == 0);

1134 
ASSERT_OR_FAIL
(
Tøôs
::
mÆloc_cou¡
() == 4);

1135 
ASSERT_OR_FAIL
(
Tøôs
::
‰ì_cou¡
() == 4);

1137  
	gåue
;

1140 
boﬁ
 
tokí_move
()

1142 
	gTe°Tøôs
<16> 
	tTøôs
;

1143 
	gTøôs
::
ª£t
();

1146 
	gC⁄cuºítQueue
<, 
	gTøôs
> 
	gq
;

1147 
Produ˚rTokí
 
t0
(
q
);

1149 
ASSERT_OR_FAIL
(
t0
.
vÆid
());

1151 
Produ˚rTokí
 
t1
(
°d
::
move
(
t0
));

1152 
ASSERT_OR_FAIL
(
t1
.
vÆid
());

1153 
ASSERT_OR_FAIL
(!
t0
.
vÆid
());

1155 
	gt1
 = 
°d
::
move
(
t1
);

1156 
ASSERT_OR_FAIL
(
t1
.
vÆid
());

1157 
ASSERT_OR_FAIL
(!
t0
.
vÆid
());

1159 
Produ˚rTokí
 
t2
(
q
);

1160 
	gt2
 = 
°d
::
move
(
t1
);

1161 
ASSERT_OR_FAIL
(
t2
.
vÆid
());

1162 
ASSERT_OR_FAIL
(
t1
.
vÆid
());

1163 
ASSERT_OR_FAIL
(!
t0
.
vÆid
());

1165 
	gt0
 = 
°d
::
move
(
t1
);

1166 
ASSERT_OR_FAIL
(
t2
.
vÆid
());

1167 
ASSERT_OR_FAIL
(!
t1
.
vÆid
());

1168 
ASSERT_OR_FAIL
(
t0
.
vÆid
());

1171 
ASSERT_OR_FAIL
(
Tøôs
::
mÆloc_cou¡
() == 5);

1172 
ASSERT_OR_FAIL
(
Tøôs
::
‰ì_cou¡
(Ë=Tøôs::
mÆloc_cou¡
());

1174  
	gåue
;

1177 
boﬁ
 
mu…i_¥odu˚rs
()

1179 
	gTe°Tøôs
<16> 
	tTøôs
;

1180 
	gTøôs
::
ª£t
();

1183 
	gC⁄cuºítQueue
<, 
	gTøôs
> 
	gq
;

1184 
Produ˚rTokí
 
t0
(
q
);

1185 
Produ˚rTokí
 
t1
(
q
);

1186 
Produ˚rTokí
 
t2
(
q
);

1187 
Produ˚rTokí
 
t3
(
q
);

1188 
Produ˚rTokí
 
t4
(
q
);

1190 
ASSERT_OR_FAIL
(
q
.
íqueue
(
t0
, 0));

1191 
ASSERT_OR_FAIL
(
q
.
íqueue
(
t1
, 1));

1192 
ASSERT_OR_FAIL
(
q
.
íqueue
(
t2
, 2));

1193 
ASSERT_OR_FAIL
(
q
.
íqueue
(
t3
, 3));

1194 
ASSERT_OR_FAIL
(
q
.
íqueue
(
t4
, 4));

1196 
	gôem
;

1197 
ASSERT_OR_FAIL
(
q
.
åy_dequeue_‰om_¥odu˚r
(
t0
, 
ôem
) && item == 0 && !q.try_dequeue_from_producer(t0, item));

1198 
ASSERT_OR_FAIL
(
q
.
åy_dequeue_‰om_¥odu˚r
(
t1
, 
ôem
) && item == 1 && !q.try_dequeue_from_producer(t1, item));

1199 
ASSERT_OR_FAIL
(
q
.
åy_dequeue_‰om_¥odu˚r
(
t2
, 
ôem
) && item == 2 && !q.try_dequeue_from_producer(t2, item));

1200 
ASSERT_OR_FAIL
(
q
.
åy_dequeue_‰om_¥odu˚r
(
t3
, 
ôem
) && item == 3 && !q.try_dequeue_from_producer(t3, item));

1201 
ASSERT_OR_FAIL
(
q
.
åy_dequeue_‰om_¥odu˚r
(
t4
, 
ôem
) && item == 4 && !q.try_dequeue_from_producer(t4, item));

1204 
ASSERT_OR_FAIL
(
Tøôs
::
mÆloc_cou¡
() == 11);

1205 
ASSERT_OR_FAIL
(
Tøôs
::
‰ì_cou¡
(Ë=Tøôs::
mÆloc_cou¡
());

1208 
	gTøôs
::
ª£t
();

1210 
	gC⁄cuºítQueue
<, 
	gTøôs
> 
	gq
;

1211 
	g°d
::
©omic
<
boﬁ
> 
suc˚ss
[5];

1212 
	g°d
::
©omic
<> 
d⁄e
(0);

1214 
	gi
 = 0; i != 5; ++i) {

1215 
	gsuc˚ss
[
i
].
°‹e
(
Ál£
, 
°d
::
mem‹y_‹dî_ªœxed
);

1218 
	gi
 = 0; i != 5; ++i) {

1219 
Sim∂eThªad
 
t
([&](
j
) {

1220 
suc˚ss
[
j
].
°‹e
(
q
.
íqueue
(j), 
°d
::
mem‹y_‹dî_ªœxed
);

1221 
d⁄e
.
„tch_add
(1, 
°d
::
mem‹y_‹dî_ªÀa£
);

1222 }, 
i
);

1223 
	gt
.
joö
();

1225 
	gd⁄e
.
lﬂd
(
°d
::
mem‹y_‹dî_acquúe
) != 5) {

1229 
	gi
 = 0; i != 5; ++i) {

1230 
ASSERT_OR_FAIL
(
suc˚ss
[
i
].
lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
));

1235 
boﬁ
 
	gôemDequeued
[5] = { 
Ál£
, false, false, false, false };

1236 
	gôem
;

1237 
	gi
 = 0; i != 5;) {

1238 i‡(
	gq
.
åy_dequeue
(
ôem
)) {

1239 
	gôemDequeued
[
ôem
] = 
åue
;

1240 ++
	gi
;

1243 
	gi
 = 0; i != 5; ++i) {

1244 
ASSERT_OR_FAIL
(
ôemDequeued
[
i
]);

1248 
ASSERT_OR_FAIL
(
Tøôs
::
mÆloc_cou¡
() <= 11 && Traits::malloc_count() >= 3);

1249 
ASSERT_OR_FAIL
(
Tøôs
::
‰ì_cou¡
(Ë=Tøôs::
mÆloc_cou¡
());

1251  
	gåue
;

1254 
boﬁ
 
¥odu˚r_ªu£
()

1256 
	gTe°Tøôs
<16> 
	tTøôs
;

1258 
	gTøôs
::
ª£t
();

1261 
	gC⁄cuºítQueue
<, 
	gTøôs
> 
	gq
;

1264 
Produ˚rTokí
 
t0
(
q
);

1268 
Produ˚rTokí
 
t1
(
q
);

1272 
Produ˚rTokí
 
t2
(
q
);

1273 
Produ˚rTokí
 
t3
(
q
);

1274 
Produ˚rTokí
 
t4
(
q
);

1275 
Produ˚rTokí
 
t5
(
q
);

1279 
Produ˚rTokí
 
t6
(
q
);

1280 
Produ˚rTokí
 
t7
(
q
);

1284 
Produ˚rTokí
 
t8
(
q
);

1285 
Produ˚rTokí
 
t9
(
q
);

1290 
Produ˚rTokí
 
t10
(
q
);

1291 
Produ˚rTokí
 
t11
(
q
);

1295 
ASSERT_OR_FAIL
(
Tøôs
::
mÆloc_cou¡
() == 9);

1296 
ASSERT_OR_FAIL
(
Tøôs
::
‰ì_cou¡
(Ë=Tøôs::
mÆloc_cou¡
());

1298 #ifde‡
MOODYCAMEL_CPP11_THREAD_LOCAL_SUPPORTED


1299 
	gTøôs
::
ª£t
();

1302 c⁄° 
	gMAX_THREADS
 = 48;

1303 
	gC⁄cuºítQueue
<, 
	gTøôs
> 
q
(
Tøôs
::
BLOCK_SIZE
 * (
MAX_THREADS
 + 1));

1304 
ASSERT_OR_FAIL
(
Tøôs
::
mÆloc_cou¡
() == 1);

1306 
Sim∂eThªad
 
t0
([&](Ë{ 
q
.
íqueue
(0); });

1307 
	gt0
.
joö
();

1308 
ASSERT_OR_FAIL
(
Tøôs
::
mÆloc_cou¡
() == 3);

1310 
Sim∂eThªad
 
t1
([&](Ë{ 
q
.
íqueue
(1); });

1311 
	gt1
.
joö
();

1312 
ASSERT_OR_FAIL
(
Tøôs
::
mÆloc_cou¡
() == 3);

1314 
Sim∂eThªad
 
t2
([&](Ë{ 
q
.
íqueue
(2); });

1315 
	gt2
.
joö
();

1316 
ASSERT_OR_FAIL
(
Tøôs
::
mÆloc_cou¡
() == 3);

1318 
	gq
.
íqueue
(3);

1319 
ASSERT_OR_FAIL
(
Tøôs
::
mÆloc_cou¡
() == 3);

1321 
	gôem
;

1322 
	gi
 = 0;

1323 
	gq
.
åy_dequeue
(
ôem
)) {

1324 
ASSERT_OR_FAIL
(
ôem
 =
i
);

1325 ++
	gi
;

1327 
ASSERT_OR_FAIL
(
i
 == 4);

1328 
ASSERT_OR_FAIL
(
Tøôs
::
mÆloc_cou¡
() == 3);

1330 
	g°d
::
ve˘‹
<
Sim∂eThªad
> 
thªads
(
MAX_THREADS
);

1331 
	gªp
 = 0;Ñep != 2; ++rep) {

1332 
	g°d
::
size_t
 
tid
 = 0; 
	gtid
 !
thªads
.
size
(); ++tid) {

1333 
	gthªads
[
tid
] = 
Sim∂eThªad
([&](
°d
::
size_t
Åid) {

1334 vﬁ©ûê
i
 = 0; i != 4096; ++i) {

1337 
q
.
íqueue
(()
tid
);

1338 vﬁ©ûê
i
 = 0; i != 4096; ++i) {

1341 }, 
tid
);

1343 
	g°d
::
size_t
 
tid
 = 0; 
	gtid
 !
thªads
.
size
(); ++tid) {

1344 
	gthªads
[
tid
].
joö
();

1346 
	g°d
::
ve˘‹
<
boﬁ
> 
£íIds
(
thªads
.
size
());

1347 
	g°d
::
size_t
 
i
 = 0; 
	gi
 !
thªads
.
size
(); ++i) {

1348 
ASSERT_OR_FAIL
(
q
.
åy_dequeue
(
ôem
));

1349 
ASSERT_OR_FAIL
(!
£íIds
[
ôem
]);

1350 
	g£íIds
[
ôem
] = 
åue
;

1352 
	g°d
::
size_t
 
i
 = 0; 
	gi
 !
£íIds
.
size
(); ++i) {

1353 
ASSERT_OR_FAIL
(
£íIds
[
i
]);

1355 
ASSERT_OR_FAIL
(
Tøôs
::
mÆloc_cou¡
(Ë<2 * 
MAX_THREADS
 + 1);

1358 
ASSERT_OR_FAIL
(
Tøôs
::
‰ì_cou¡
(Ë=Tøôs::
mÆloc_cou¡
());

1361 
	gTøôs
::
ª£t
();

1364 
	g°d
::
ve˘‹
<
Sim∂eThªad
> 
thªads
(32);

1365 
	g°d
::
ve˘‹
<
boﬁ
> 
suc˚ss
(
thªads
.
size
(), 
åue
);

1366 
	g°d
::
size_t
 
tid
 = 0; 
	gtid
 !
thªads
.
size
(); ++tid) {

1367 
	gthªads
[
tid
] = 
Sim∂eThªad
([&](
°d
::
size_t
Åid) {

1368 
i
 = 0; i != 5; ++i) {

1369 
C⁄cuºítQueue
<, 
MÆlocTøckögTøôs
> 
q
(1);

1370 
q
.
íqueue
(
i
);

1373 
C⁄cuºítQueue
<, 
MÆlocTøckögTøôs
> 
q
(15);

1374 
i
 = 0; i != 100; ++i) {

1375 
q
.
íqueue
(
i
);

1377 
ôem
;

1378 
i
 = 0; i != 100; ++i) {

1379 i‡(!
q
.
åy_dequeue
(
ôem
Ë|| iãm !
i
) {

1380 
suc˚ss
[
tid
] = 
Ál£
;

1383 i‡(
q
.
size_≠¥ox
() != 0) {

1384 
suc˚ss
[
tid
] = 
Ál£
;

1386 }, 
tid
);

1388 
	g°d
::
size_t
 
tid
 = 0; 
	gtid
 !
thªads
.
size
(); ++tid) {

1389 
	gthªads
[
tid
].
joö
();

1390 
ASSERT_OR_FAIL
(
suc˚ss
[
tid
]);

1393 
ASSERT_OR_FAIL
(
Tøôs
::
‰ì_cou¡
(Ë=Tøôs::
mÆloc_cou¡
());

1396  
	gåue
;

1399 
boﬁ
 
block_ªu£
()

1401 
	gôem
;

1403 
	gTe°Tøôs
<4> 
	tSmÆlBlocks
;

1404 
	gSmÆlBlocks
::
ª£t
();

1406 
	gC⁄cuºítQueue
<, 
	gSmÆlBlocks
> 
q
(8);

1407 
Produ˚rTokí
 
t
(
q
);

1409 
	gj
 = 0; j != 3; ++j) {

1410 
	gi
 = 0; i != 4; ++i) {

1411 
ASSERT_OR_FAIL
(
q
.
íqueue
(
t
, 
i
));

1413 
	gi
 = 0; i != 4; ++i) {

1414 
ASSERT_OR_FAIL
(
q
.
åy_dequeue_‰om_¥odu˚r
(
t
, 
ôem
));

1415 
ASSERT_OR_FAIL
(
ôem
 =
i
);

1418 
	gi
 = 0; i != 8; ++i) {

1419 
ASSERT_OR_FAIL
(
q
.
íqueue
(
t
, 
i
));

1421 
	gi
 = 0; i != 4; ++i) {

1422 
ASSERT_OR_FAIL
(
q
.
åy_dequeue_‰om_¥odu˚r
(
t
, 
ôem
));

1423 
ASSERT_OR_FAIL
(
ôem
 =
i
);

1425 
	gi
 = 0; i != 4; ++i) {

1426 
ASSERT_OR_FAIL
(
q
.
íqueue
(
t
, 
i
));

1428 
	gi
 = 0; i != 8; ++i) {

1429 
ASSERT_OR_FAIL
(
q
.
åy_dequeue_‰om_¥odu˚r
(
t
, 
ôem
));

1430 
ASSERT_OR_FAIL
(
ôem
 =((
i
 + 4) & 7));

1433 
ASSERT_OR_FAIL
(!
q
.
åy_dequeue_‰om_¥odu˚r
(
t
, 
ôem
));

1437 
ASSERT_OR_FAIL
(
SmÆlBlocks
::
mÆloc_cou¡
() == 3);

1438 
ASSERT_OR_FAIL
(
SmÆlBlocks
::
‰ì_cou¡
(Ë=SmÆlBlocks::
mÆloc_cou¡
());

1441 
	gTe°Tøôs
<8192> 
	tHugeBlocks
;

1442 
	gHugeBlocks
::
ª£t
();

1444 
	gC⁄cuºítQueue
<, 
	gHugeBlocks
> 
q
(8192 * 2);

1445 
Produ˚rTokí
 
t
(
q
);

1447 
	gj
 = 0; j != 3; ++j) {

1448 
	gi
 = 0; i != 8192; ++i) {

1449 
ASSERT_OR_FAIL
(
q
.
íqueue
(
t
, 
i
));

1451 
	gi
 = 0; i != 8192; ++i) {

1452 
ASSERT_OR_FAIL
(
q
.
åy_dequeue_‰om_¥odu˚r
(
t
, 
ôem
));

1453 
ASSERT_OR_FAIL
(
ôem
 =
i
);

1456 
	gi
 = 0; i != 8192 * 2; ++i) {

1457 
ASSERT_OR_FAIL
(
q
.
íqueue
(
t
, 
i
));

1459 
	gi
 = 0; i != 8192; ++i) {

1460 
ASSERT_OR_FAIL
(
q
.
åy_dequeue_‰om_¥odu˚r
(
t
, 
ôem
));

1461 
ASSERT_OR_FAIL
(
ôem
 =
i
);

1463 
	gi
 = 0; i != 8192; ++i) {

1464 
ASSERT_OR_FAIL
(
q
.
íqueue
(
t
, 
i
));

1466 
	gi
 = 0; i != 8192 * 2; ++i) {

1467 
ASSERT_OR_FAIL
(
q
.
åy_dequeue_‰om_¥odu˚r
(
t
, 
ôem
));

1468 
ASSERT_OR_FAIL
(
ôem
 =((
i
 + 8192) & (8192 * 2 - 1)));

1471 
ASSERT_OR_FAIL
(!
q
.
åy_dequeue_‰om_¥odu˚r
(
t
, 
ôem
));

1475 
ASSERT_OR_FAIL
(
HugeBlocks
::
mÆloc_cou¡
() == 3);

1476 
ASSERT_OR_FAIL
(
HugeBlocks
::
‰ì_cou¡
(Ë=HugeBlocks::
mÆloc_cou¡
());

1480 
	gSmÆlBlocks
::
ª£t
();

1482 
	gC⁄cuºítQueue
<, 
	gSmÆlBlocks
> 
q
(8);

1484 
	gj
 = 0; j != 3; ++j) {

1485 
	gi
 = 0; i != 4; ++i) {

1486 
ASSERT_OR_FAIL
(
q
.
íqueue
(
i
));

1488 
	gi
 = 0; i != 4; ++i) {

1489 
ASSERT_OR_FAIL
(
q
.
åy_dequeue
(
ôem
));

1490 
ASSERT_OR_FAIL
(
ôem
 =
i
);

1493 
	gi
 = 0; i != 8; ++i) {

1494 
ASSERT_OR_FAIL
(
q
.
íqueue
(
i
));

1496 
	gi
 = 0; i != 4; ++i) {

1497 
ASSERT_OR_FAIL
(
q
.
åy_dequeue
(
ôem
));

1498 
ASSERT_OR_FAIL
(
ôem
 =
i
);

1500 
	gi
 = 0; i != 4; ++i) {

1501 
ASSERT_OR_FAIL
(
q
.
íqueue
(
i
));

1503 
	gi
 = 0; i != 8; ++i) {

1504 
ASSERT_OR_FAIL
(
q
.
åy_dequeue
(
ôem
));

1505 
ASSERT_OR_FAIL
(
ôem
 =((
i
 + 4) & 7));

1508 
ASSERT_OR_FAIL
(!
q
.
åy_dequeue
(
ôem
));

1512 
ASSERT_OR_FAIL
(
SmÆlBlocks
::
mÆloc_cou¡
() == 3);

1513 
ASSERT_OR_FAIL
(
SmÆlBlocks
::
‰ì_cou¡
(Ë=SmÆlBlocks::
mÆloc_cou¡
());

1515 
	gHugeBlocks
::
ª£t
();

1517 
	gC⁄cuºítQueue
<, 
	gHugeBlocks
> 
q
(8192 * 2);

1519 
	gj
 = 0; j != 3; ++j) {

1520 
	gi
 = 0; i != 8192; ++i) {

1521 
ASSERT_OR_FAIL
(
q
.
íqueue
(
i
));

1523 
	gi
 = 0; i != 8192; ++i) {

1524 
ASSERT_OR_FAIL
(
q
.
åy_dequeue
(
ôem
));

1525 
ASSERT_OR_FAIL
(
ôem
 =
i
);

1528 
	gi
 = 0; i != 8192 * 2; ++i) {

1529 
ASSERT_OR_FAIL
(
q
.
íqueue
(
i
));

1531 
	gi
 = 0; i != 8192; ++i) {

1532 
ASSERT_OR_FAIL
(
q
.
åy_dequeue
(
ôem
));

1533 
ASSERT_OR_FAIL
(
ôem
 =
i
);

1535 
	gi
 = 0; i != 8192; ++i) {

1536 
ASSERT_OR_FAIL
(
q
.
íqueue
(
i
));

1538 
	gi
 = 0; i != 8192 * 2; ++i) {

1539 
ASSERT_OR_FAIL
(
q
.
åy_dequeue
(
ôem
));

1540 
ASSERT_OR_FAIL
(
ôem
 =((
i
 + 8192) & (8192 * 2 - 1)));

1543 
ASSERT_OR_FAIL
(!
q
.
åy_dequeue
(
ôem
));

1547 
ASSERT_OR_FAIL
(
HugeBlocks
::
mÆloc_cou¡
() == 3);

1548 
ASSERT_OR_FAIL
(
HugeBlocks
::
‰ì_cou¡
(Ë=HugeBlocks::
mÆloc_cou¡
());

1550  
	gåue
;

1553 
boﬁ
 
block_ªcy˛ög
()

1555 
	gTe°Tøôs
<4> 
	tSmÆlBlocks
;

1556 
	gSmÆlBlocks
::
ª£t
();

1558 
	gC⁄cuºítQueue
<, 
	gSmÆlBlocks
> 
q
(24);

1559 
Sim∂eThªad
 
	gthªads
[4];

1560 
	g°d
::
©omic
<
boﬁ
> 
suc˚ss
(
åue
);

1562 
	gi
 = 0; i != 4; ++i) {

1563 
	gthªads
[
i
] = 
Sim∂eThªad
([&](i) {

1564 
ôem
;

1565 
√xt
 = 0;

1566 
¥evIãms
[4] = { -1, -1, -1, -1 };

1567 
suc˚ssfulEnqueues
 = 0; successfulEnqueues < 10000;) {

1568 
j
 = 0; j != 12; ++j) {

1569 i‡(
q
.
åy_íqueue
((
i
 << 28Ë| 
√xt
++)) {

1570 ++
suc˚ssfulEnqueues
;

1573 
j
 = 0; j != 12; ++j) {

1574 i‡(
q
.
åy_dequeue
(
ôem
)) {

1575 i‡((
ôem
 & 0x0FFFFFFFË<
¥evIãms
[item >> 28]) {

1576 
suc˚ss
.
°‹e
(
Ál£
, 
°d
::
mem‹y_‹dî_ªœxed
);

1578 
¥evIãms
[
ôem
 >> 28] = item & 0x0FFFFFFF;

1582 }, 
i
);

1584 
	gi
 = 0; i != 4; ++i) {

1585 
	gthªads
[
i
].
joö
();

1588 
	gôem
;

1589 
	g¥evIãms
[4] = { -1, -1, -1, -1 };

1590 
	gq
.
åy_dequeue
(
ôem
)) {

1591 
ASSERT_OR_FAIL
((
ôem
 & 0x0FFFFFFFË> 
¥evIãms
[item >> 28]);

1592 
	g¥evIãms
[
ôem
 >> 28] = item & 0x0FFFFFFF;

1595 
ASSERT_OR_FAIL
(
suc˚ss
.
lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
));

1597  
	gåue
;

1600 
boﬁ
 
À·ovîs_de°royed
()

1602 
	gTe°Tøôs
<4> 
	tTøôs
;

1603 
	gTøôs
::
ª£t
();

1604 
	gFoo
::
ª£t
();

1606 
	gC⁄cuºítQueue
<
	gFoo
, 
	gTøôs
> 
q
(4);

1607 
Produ˚rTokí
 
t
(
q
);

1609 
Foo
 
	gôem
;

1610 
	gq
.
íqueue
(
t
, 
Foo
());

1611 
	gq
.
íqueue
(
t
, 
Foo
());

1612 
	gq
.
íqueue
(
t
, 
Foo
());

1613 
	gq
.
åy_dequeue_‰om_¥odu˚r
(
t
, 
ôem
);

1615 
ASSERT_OR_FAIL
(
Foo
::
¸óãCou¡
() == 4);

1616 
ASSERT_OR_FAIL
(
Foo
::
de°royCou¡
() == 7);

1617 
ASSERT_OR_FAIL
(
Foo
::
de°royedInOrdî
());

1619 
	gTøôs
::
ª£t
();

1620 
	gFoo
::
ª£t
();

1622 
	gC⁄cuºítQueue
<
	gFoo
, 
	gTøôs
> 
q
(4);

1623 
Produ˚rTokí
 
t
(
q
);

1625 
	gq
.
íqueue
(
t
, 
Foo
());

1626 
	gq
.
íqueue
(
t
, 
Foo
());

1627 
	gq
.
íqueue
(
t
, 
Foo
());

1628 
	gq
.
íqueue
(
t
, 
Foo
());

1630 
ASSERT_OR_FAIL
(
Foo
::
¸óãCou¡
() == 4);

1631 
ASSERT_OR_FAIL
(
Foo
::
de°royCou¡
() == 8);

1632 
ASSERT_OR_FAIL
(
Foo
::
de°royedInOrdî
());

1634 
	gTøôs
::
ª£t
();

1635 
	gFoo
::
ª£t
();

1637 
	gC⁄cuºítQueue
<
	gFoo
, 
	gTøôs
> 
q
(8);

1638 
Produ˚rTokí
 
t
(
q
);

1640 
	gi
 = 0; i != 8; ++i) {

1641 
	gq
.
íqueue
(
t
, 
Foo
());

1644 
ASSERT_OR_FAIL
(
Foo
::
¸óãCou¡
() == 8);

1645 
ASSERT_OR_FAIL
(
Foo
::
de°royCou¡
() == 16);

1646 
ASSERT_OR_FAIL
(
Foo
::
de°royedInOrdî
());

1648 
	gTøôs
::
ª£t
();

1649 
	gFoo
::
ª£t
();

1651 
	gC⁄cuºítQueue
<
	gFoo
, 
	gTøôs
> 
q
(12);

1652 
Produ˚rTokí
 
t
(
q
);

1655 
	gi
 = 0; i != 10; ++i) {

1656 
	gq
.
íqueue
(
t
, 
Foo
());

1660 
Foo
 
	gôem
;

1661 
ASSERT_OR_FAIL
(
q
.
åy_dequeue_‰om_¥odu˚r
(
t
, 
ôem
));

1662 
ASSERT_OR_FAIL
(
q
.
åy_dequeue_‰om_¥odu˚r
(
t
, 
ôem
));

1663 
ASSERT_OR_FAIL
(
q
.
åy_dequeue_‰om_¥odu˚r
(
t
, 
ôem
));

1665 
ASSERT_OR_FAIL
(
Foo
::
¸óãCou¡
() == 11);

1666 
ASSERT_OR_FAIL
(
Foo
::
de°royCou¡
() == 21);

1667 
ASSERT_OR_FAIL
(
Foo
::
de°royedInOrdî
());

1671 
	gTøôs
::
ª£t
();

1672 
	gFoo
::
ª£t
();

1674 
	gC⁄cuºítQueue
<
	gFoo
, 
	gTøôs
> 
q
(4);

1676 
Foo
 
	gôem
;

1677 
	gq
.
íqueue
(
Foo
());

1678 
	gq
.
íqueue
(
Foo
());

1679 
	gq
.
íqueue
(
Foo
());

1680 
	gq
.
åy_dequeue
(
ôem
);

1682 
ASSERT_OR_FAIL
(
Foo
::
¸óãCou¡
() == 4);

1683 
ASSERT_OR_FAIL
(
Foo
::
de°royCou¡
() == 7);

1684 
ASSERT_OR_FAIL
(
Foo
::
de°royedInOrdî
());

1686 
	gTøôs
::
ª£t
();

1687 
	gFoo
::
ª£t
();

1689 
	gC⁄cuºítQueue
<
	gFoo
, 
	gTøôs
> 
q
(4);

1691 
	gq
.
íqueue
(
Foo
());

1692 
	gq
.
íqueue
(
Foo
());

1693 
	gq
.
íqueue
(
Foo
());

1694 
	gq
.
íqueue
(
Foo
());

1696 
ASSERT_OR_FAIL
(
Foo
::
¸óãCou¡
() == 4);

1697 
ASSERT_OR_FAIL
(
Foo
::
de°royCou¡
() == 8);

1698 
ASSERT_OR_FAIL
(
Foo
::
de°royedInOrdî
());

1700 
	gTøôs
::
ª£t
();

1701 
	gFoo
::
ª£t
();

1703 
	gC⁄cuºítQueue
<
	gFoo
, 
	gTøôs
> 
q
(8);

1705 
	gi
 = 0; i != 8; ++i) {

1706 
	gq
.
íqueue
(
Foo
());

1709 
ASSERT_OR_FAIL
(
Foo
::
¸óãCou¡
() == 8);

1710 
ASSERT_OR_FAIL
(
Foo
::
de°royCou¡
() == 16);

1711 
ASSERT_OR_FAIL
(
Foo
::
de°royedInOrdî
());

1713 
	gTøôs
::
ª£t
();

1714 
	gFoo
::
ª£t
();

1716 
	gC⁄cuºítQueue
<
	gFoo
, 
	gTøôs
> 
q
(12);

1719 
	gi
 = 0; i != 10; ++i) {

1720 
	gq
.
íqueue
(
Foo
());

1724 
Foo
 
	gôem
;

1725 
ASSERT_OR_FAIL
(
q
.
åy_dequeue
(
ôem
));

1726 
ASSERT_OR_FAIL
(
q
.
åy_dequeue
(
ôem
));

1727 
ASSERT_OR_FAIL
(
q
.
åy_dequeue
(
ôem
));

1729 
ASSERT_OR_FAIL
(
Foo
::
¸óãCou¡
() == 11);

1730 
ASSERT_OR_FAIL
(
Foo
::
de°royCou¡
() == 21);

1731 
ASSERT_OR_FAIL
(
Foo
::
de°royedInOrdî
());

1733  
	gåue
;

1736 
boﬁ
 
block_ödex_ªsized
()

1738 
	gTe°Tøôs
<4, 2> 
	tTøôs
;

1739 
	gTøôs
::
ª£t
();

1740 
	gFoo
::
ª£t
();

1743 
	gC⁄cuºítQueue
<
	gFoo
, 
	gTøôs
> 
q
(8);

1744 
Produ˚rTokí
 
t
(
q
);

1746 
	gi
 = 0; i != 1024; ++i) {

1747 
	gq
.
íqueue
(
t
, 
Foo
());

1750 
	gi
 = 0; i != 1024; ++i) {

1751 
Foo
 
	gôem
;

1752 
	gq
.
åy_dequeue_‰om_¥odu˚r
(
t
, 
ôem
);

1756 
ASSERT_OR_FAIL
(
Tøôs
::
mÆloc_cou¡
() == 1 + 2 + 254 + 7);

1757 
ASSERT_OR_FAIL
(
Tøôs
::
‰ì_cou¡
(Ë=Tøôs::
mÆloc_cou¡
());

1759 
ASSERT_OR_FAIL
(
Foo
::
¸óãCou¡
() == 2048);

1760 
ASSERT_OR_FAIL
(
Foo
::
de°royCou¡
() == 3072);

1761 
ASSERT_OR_FAIL
(
Foo
::
de°royedInOrdî
());

1764 
	gTøôs
::
ª£t
();

1765 
	gFoo
::
ª£t
();

1767 
	gC⁄cuºítQueue
<
	gFoo
, 
	gTøôs
> 
q
(8);

1769 
	gi
 = 0; i != 1024; ++i) {

1770 
	gq
.
íqueue
(
Foo
());

1773 
	gi
 = 0; i != 1024; ++i) {

1774 
Foo
 
	gôem
;

1775 
	gq
.
åy_dequeue
(
ôem
);

1779 
ASSERT_OR_FAIL
(
Tøôs
::
mÆloc_cou¡
() == 1 + 2 + 254 + 6);

1780 
ASSERT_OR_FAIL
(
Tøôs
::
‰ì_cou¡
(Ë=Tøôs::
mÆloc_cou¡
());

1782 
ASSERT_OR_FAIL
(
Foo
::
¸óãCou¡
() == 2048);

1783 
ASSERT_OR_FAIL
(
Foo
::
de°royCou¡
() == 3072);

1784 
ASSERT_OR_FAIL
(
Foo
::
de°royedInOrdî
());

1786  
	gåue
;

1789 
boﬁ
 
åy_dequeue
()

1791 
	gC⁄cuºítQueue
<, 
	gMÆlocTøckögTøôs
> 
	gq
;

1792 
	gôem
;

1796 
	gi
 = 0; i != 50; ++i) {

1797 
Produ˚rTokí
 
t
(
q
);

1798 
	gj
 = 0; j != 100; ++j) {

1799 
ASSERT_OR_FAIL
(
q
.
íqueue
(
t
, 
i
 * 100 + 
j
));

1804 
	gi
 = 0; i != 50; ++i) {

1805 
	gj
 = 0; j != 100; ++j) {

1806 
ASSERT_OR_FAIL
(
q
.
åy_dequeue
(
ôem
));

1807 
ASSERT_OR_FAIL
(
ôem
 =
i
 * 100 + 
j
);

1810 
ASSERT_OR_FAIL
(!
q
.
åy_dequeue
(
ôem
));

1815 
	gi
 = 0; i != 25; ++i) {

1816 
	gj
 = 0; j != 100; ++j) {

1817 
ASSERT_OR_FAIL
(
q
.
íqueue
(
i
 * 100 + 
j
));

1820 
	gi
 = 25; i != 50; ++i) {

1821 
Produ˚rTokí
 
t
(
q
);

1822 
	gj
 = 0; j != 100; ++j) {

1823 
ASSERT_OR_FAIL
(
q
.
íqueue
(
t
, 
i
 * 100 + 
j
));

1826 
boﬁ
 
	gsuc˚ss
[5000];

1827 
	g°d
::
mem£t
(
suc˚ss
, 0, (success));

1828 
	gi
 = 0; i != 50; ++i) {

1829 
	gj
 = 0; j != 100; ++j) {

1830 
ASSERT_OR_FAIL
(
q
.
åy_dequeue
(
ôem
));

1831 
	gsuc˚ss
[
ôem
] = 
åue
;

1834 
	gi
 = 0; i != 5000; ++i) {

1835 
ASSERT_OR_FAIL
(
suc˚ss
[
i
]);

1837 
ASSERT_OR_FAIL
(!
q
.
åy_dequeue
(
ôem
));

1842 
	gi
 = 0; i != 25; ++i) {

1843 
	gj
 = 0; j != 100; ++j) {

1844 
ASSERT_OR_FAIL
(
q
.
íqueue
(
i
 * 100 + 
j
));

1847 
	gi
 = 25; i != 50; ++i) {

1848 
Produ˚rTokí
 
t
(
q
);

1849 
	gj
 = 0; j != 100; ++j) {

1850 
ASSERT_OR_FAIL
(
q
.
íqueue
(
t
, 
i
 * 100 + 
j
));

1853 
boﬁ
 
	gsuc˚ss
[5000];

1854 
	g°d
::
mem£t
(
suc˚ss
, 0, (success));

1855 
	gi
 = 0; i != 50; ++i) {

1856 
C⁄sumîTokí
 
t
(
q
);

1857 
	gj
 = 0; j != 100; ++j) {

1858 
ASSERT_OR_FAIL
(
q
.
åy_dequeue
(
t
, 
ôem
));

1859 
	gsuc˚ss
[
ôem
] = 
åue
;

1862 
	gi
 = 0; i != 5000; ++i) {

1863 
ASSERT_OR_FAIL
(
suc˚ss
[
i
]);

1865 
C⁄sumîTokí
 
t
(
q
);

1866 
ASSERT_OR_FAIL
(!
q
.
åy_dequeue
(
ôem
));

1867 
ASSERT_OR_FAIL
(!
q
.
åy_dequeue
(
t
, 
ôem
));

1868 
ASSERT_OR_FAIL
(!
q
.
åy_dequeue
(
ôem
));

1869 
ASSERT_OR_FAIL
(!
q
.
åy_dequeue
(
t
, 
ôem
));

1872  
	gåue
;

1875 
boﬁ
 
åy_dequeue_thªaded
()

1877 
	gôem
;

1878 
	gC⁄cuºítQueue
<, 
	gMÆlocTøckögTøôs
> 
	gq
;

1882 
Sim∂eThªad
 
	gthªads
[20];

1883 
	gi
 = 0; i != 10; ++i) {

1884 
	gthªads
[
i
] = 
Sim∂eThªad
([&](i) {

1885 
Produ˚rTokí
 
t
(
q
);

1886 
j
 = 0; j != 100; ++j) {

1887 
q
.
íqueue
(
t
, 
i
 * 10 + 
j
);

1889 }, 
i
);

1892 
	g°d
::
©omic
<> 
dequeueCou¡
(0);

1893 
	gi
 = 10; i != 20; ++i) {

1894 
	gthªads
[
i
] = 
Sim∂eThªad
([&]() {

1895 
ôem
;

1896 
C⁄sumîTokí
 
t
(
q
);

1897 
dequeueCou¡
.
lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
) != 1000) {

1898 i‡(
q
.
åy_dequeue
(
t
, 
ôem
)) {

1899 
dequeueCou¡
.
„tch_add
(1, 
°d
::
mem‹y_‹dî_ªœxed
);

1905 
	gi
 = 0; i != 20; ++i) {

1906 
	gthªads
[
i
].
joö
();

1909 
ASSERT_OR_FAIL
(!
q
.
åy_dequeue
(
ôem
));

1914 
Sim∂eThªad
 
	gthªads
[20];

1915 
	gi
 = 0; i != 10; ++i) {

1916 
	gthªads
[
i
] = 
Sim∂eThªad
([&](i) {

1917 
j
 = 0; j != 100; ++j) {

1918 
q
.
íqueue
(
i
 * 10 + 
j
);

1920 }, 
i
);

1923 
	g°d
::
©omic
<> 
dequeueCou¡
(0);

1924 
	gi
 = 10; i != 20; ++i) {

1925 
	gthªads
[
i
] = 
Sim∂eThªad
([&]() {

1926 
ôem
;

1927 
dequeueCou¡
.
lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
) != 1000) {

1928 i‡(
q
.
åy_dequeue
(
ôem
)) {

1929 
dequeueCou¡
.
„tch_add
(1, 
°d
::
mem‹y_‹dî_ªœxed
);

1935 
	gi
 = 0; i != 20; ++i) {

1936 
	gthªads
[
i
].
joö
();

1939 
ASSERT_OR_FAIL
(!
q
.
åy_dequeue
(
ôem
));

1942  
	gåue
;

1945 
boﬁ
 
åy_dequeue_bulk
()

1947 
	gTe°Tøôs
<4> 
	tTøôs
;

1948 
	gôems
[5];

1952 
	gTøôs
::
ª£t
();

1953 
	gC⁄cuºítQueue
<, 
	gTøôs
> 
	gq
;

1954 
Produ˚rTokí
 
tok
(
q
);

1956 
ASSERT_OR_FAIL
(
q
.
åy_dequeue_bulk
(
ôems
, 5) == 0);

1958 
	gq
.
íqueue
(
tok
, 17);

1959 
ASSERT_OR_FAIL
(
q
.
åy_dequeue_bulk
(
ôems
, 5) == 1);

1960 
ASSERT_OR_FAIL
(
ôems
[0] == 17);

1962 
ASSERT_OR_FAIL
(!
q
.
åy_dequeue
(
ôems
[0]));

1964 
	gi
 = 0; i != 4; ++i) {

1965 
	gq
.
íqueue
(
tok
, 
i
 + 1);

1967 
ASSERT_OR_FAIL
(
q
.
åy_dequeue_bulk
(
ôems
, 5) == 4);

1968 
	gi
 = 0; i != 4; ++i) {

1969 
ASSERT_OR_FAIL
(
ôems
[
i
] == i + 1);

1972 
ASSERT_OR_FAIL
(!
q
.
åy_dequeue
(
ôems
[0]));

1974 
	gi
 = 0; i != 5; ++i) {

1975 
	gq
.
íqueue
(
tok
, 
i
 + 1);

1977 
ASSERT_OR_FAIL
(
q
.
åy_dequeue_bulk
(
ôems
, 5) == 5);

1978 
	gi
 = 0; i != 5; ++i) {

1979 
ASSERT_OR_FAIL
(
ôems
[
i
] == i + 1);

1982 
ASSERT_OR_FAIL
(!
q
.
åy_dequeue
(
ôems
[0]));

1984 
	gi
 = 0; i != 6; ++i) {

1985 
	gq
.
íqueue
(
tok
, 
i
 + 1);

1987 
ASSERT_OR_FAIL
(
q
.
åy_dequeue_bulk
(
ôems
, 5) == 5);

1988 
	gi
 = 0; i != 5; ++i) {

1989 
ASSERT_OR_FAIL
(
ôems
[
i
] == i + 1);

1991 
ASSERT_OR_FAIL
(
q
.
åy_dequeue
(
ôems
[0]));

1992 
ASSERT_OR_FAIL
(
ôems
[0] == 6);

1993 
ASSERT_OR_FAIL
(!
q
.
åy_dequeue
(
ôems
[0]));

1995 
	gi
 = 0; i != 10; ++i) {

1996 
	gq
.
íqueue
(
tok
, 
i
 + 1);

1998 
	gk
 = 0; k != 2; ++k) {

1999 
ASSERT_OR_FAIL
(
q
.
åy_dequeue_bulk
(
ôems
, 5) == 5);

2000 
	gi
 = 0; i != 5; ++i) {

2001 
ASSERT_OR_FAIL
(
ôems
[
i
] =
k
 * 5 + i + 1);

2004 
ASSERT_OR_FAIL
(!
q
.
åy_dequeue
(
ôems
[0]));

2009 
	gTøôs
::
ª£t
();

2010 
	gC⁄cuºítQueue
<, 
	gTøôs
> 
	gq
;

2012 
ASSERT_OR_FAIL
(
q
.
åy_dequeue_bulk
(
ôems
, 5) == 0);

2014 
	gq
.
íqueue
(17);

2015 
ASSERT_OR_FAIL
(
q
.
åy_dequeue_bulk
(
ôems
, 5) == 1);

2016 
ASSERT_OR_FAIL
(
ôems
[0] == 17);

2018 
ASSERT_OR_FAIL
(!
q
.
åy_dequeue
(
ôems
[0]));

2020 
	gi
 = 0; i != 4; ++i) {

2021 
	gq
.
íqueue
(
i
 + 1);

2023 
ASSERT_OR_FAIL
(
q
.
åy_dequeue_bulk
(
ôems
, 5) == 4);

2024 
	gi
 = 0; i != 4; ++i) {

2025 
ASSERT_OR_FAIL
(
ôems
[
i
] == i + 1);

2028 
ASSERT_OR_FAIL
(!
q
.
åy_dequeue
(
ôems
[0]));

2030 
	gi
 = 0; i != 5; ++i) {

2031 
	gq
.
íqueue
(
i
 + 1);

2033 
ASSERT_OR_FAIL
(
q
.
åy_dequeue_bulk
(
ôems
, 5) == 5);

2034 
	gi
 = 0; i != 5; ++i) {

2035 
ASSERT_OR_FAIL
(
ôems
[
i
] == i + 1);

2038 
ASSERT_OR_FAIL
(!
q
.
åy_dequeue
(
ôems
[0]));

2040 
	gi
 = 0; i != 6; ++i) {

2041 
	gq
.
íqueue
(
i
 + 1);

2043 
ASSERT_OR_FAIL
(
q
.
åy_dequeue_bulk
(
ôems
, 5) == 5);

2044 
	gi
 = 0; i != 5; ++i) {

2045 
ASSERT_OR_FAIL
(
ôems
[
i
] == i + 1);

2047 
ASSERT_OR_FAIL
(
q
.
åy_dequeue
(
ôems
[0]));

2048 
ASSERT_OR_FAIL
(
ôems
[0] == 6);

2049 
ASSERT_OR_FAIL
(!
q
.
åy_dequeue
(
ôems
[0]));

2051 
	gi
 = 0; i != 10; ++i) {

2052 
	gq
.
íqueue
(
i
 + 1);

2054 
	gk
 = 0; k != 2; ++k) {

2055 
ASSERT_OR_FAIL
(
q
.
åy_dequeue_bulk
(
ôems
, 5) == 5);

2056 
	gi
 = 0; i != 5; ++i) {

2057 
ASSERT_OR_FAIL
(
ôems
[
i
] =
k
 * 5 + i + 1);

2060 
ASSERT_OR_FAIL
(!
q
.
åy_dequeue
(
ôems
[0]));

2063  
	gåue
;

2066 
boﬁ
 
åy_dequeue_bulk_thªaded
()

2068 
	gTe°Tøôs
<2> 
	tTøôs
;

2069 
	gdummy
;

2073 
	gTøôs
::
ª£t
();

2074 
	gC⁄cuºítQueue
<, 
	gTøôs
> 
	gq
;

2075 
Sim∂eThªad
 
	gthªads
[2];

2076 
boﬁ
 
	gsuc˚ss
[2] = { 
åue
,Årue };

2077 
	gi
 = 0; i != 2; ++i) {

2078 i‡(
	gi
 == 0) {

2079 
thªads
[
i
] = 
Sim∂eThªad
([&]() {

2081 
Produ˚rTokí
 
tok
(
q
);

2082 
i
 = 0; i != 32*1024; ++i) {

2083 
q
.
íqueue
(
tok
, 
i
);

2085 }, 
i
);

2088 
	gthªads
[
i
] = 
Sim∂eThªad
([&]() {

2090 
ôems
[5];

2091 
¥evIãm
 = -1;

2092 
i
 = 0; i != 32*1024;) {

2093 autÿ
dequeued
 = 
q
.
åy_dequeue_bulk
(
ôems
, 5);

2094 i‡(
dequeued
 > 0) {

2095 i‡(
dequeued
 > 5) {

2096 
suc˚ss
[
i
] = 
Ál£
;

2099 
°d
::
size_t
 
j
 = 0; j !
dequeued
; ++j) {

2100 i‡(
ôems
[
j
] !
¥evIãm
 + 1) {

2101 
suc˚ss
[
i
] = 
Ál£
;

2103 
¥evIãm
 = 
ôems
[
j
];

2105 
i
 +()
dequeued
;

2108 }, 
i
);

2111 
	gi
 = 0; i != 2; ++i) {

2112 
	gthªads
[
i
].
joö
();

2115 
ASSERT_OR_FAIL
(
suc˚ss
[0]);

2116 
ASSERT_OR_FAIL
(
suc˚ss
[1]);

2117 
ASSERT_OR_FAIL
(!
q
.
åy_dequeue
(
dummy
));

2122 
	gTøôs
::
ª£t
();

2123 
	gC⁄cuºítQueue
<, 
	gTøôs
> 
	gq
;

2124 
Sim∂eThªad
 
	gthªads
[2];

2125 
boﬁ
 
	gsuc˚ss
[2] = { 
åue
,Årue };

2126 
	gi
 = 0; i != 2; ++i) {

2127 i‡(
	gi
 == 0) {

2128 
thªads
[
i
] = 
Sim∂eThªad
([&]() {

2130 
i
 = 0; i != 32*1024; ++i) {

2131 
q
.
íqueue
(
i
);

2133 }, 
i
);

2136 
	gthªads
[
i
] = 
Sim∂eThªad
([&]() {

2138 
ôems
[5];

2139 
¥evIãm
 = -1;

2140 
i
 = 0; i != 32*1024;) {

2141 autÿ
dequeued
 = 
q
.
åy_dequeue_bulk
(
ôems
, 5);

2142 i‡(
dequeued
 > 0) {

2143 i‡(
dequeued
 > 5) {

2144 
suc˚ss
[
i
] = 
Ál£
;

2147 
°d
::
size_t
 
j
 = 0; j !
dequeued
; ++j) {

2148 i‡(
ôems
[
j
] !
¥evIãm
 + 1) {

2149 
suc˚ss
[
i
] = 
Ál£
;

2151 
¥evIãm
 = 
ôems
[
j
];

2153 
i
 +()
dequeued
;

2156 }, 
i
);

2159 
	gi
 = 0; i != 2; ++i) {

2160 
	gthªads
[
i
].
joö
();

2163 
ASSERT_OR_FAIL
(
suc˚ss
[0]);

2164 
ASSERT_OR_FAIL
(
suc˚ss
[1]);

2165 
ASSERT_OR_FAIL
(!
q
.
åy_dequeue
(
dummy
));

2170 
	gTøôs
::
ª£t
();

2171 
	gC⁄cuºítQueue
<, 
	gTøôs
> 
	gq
;

2173 
boﬁ
 
	gsuc˚ss
[20];

2174 
Sim∂eThªad
 
	gthªads
[20];

2175 
	gi
 = 0; i != 10; ++i) {

2176 
	gsuc˚ss
[
i
] = 
åue
;

2177 
	gthªads
[
i
] = 
Sim∂eThªad
([&](i) {

2178 
Produ˚rTokí
 
t
(
q
);

2179 i‡((
i
 & 1) == 1) {

2180 
j
 = 0; j != 100; ++j) {

2181 
q
.
íqueue
(
t
, 
i
 * 128 + 
j
);

2185 
j
 = 0; j != 100; ++j) {

2186 
q
.
íqueue
(
i
 * 128 + 
j
);

2189 }, 
i
);

2192 
	g°d
::
©omic
<
size_t
> 
dequeueCou¡
(0);

2193 
	gi
 = 10; i != 20; ++i) {

2194 
	gsuc˚ss
[
i
] = 
åue
;

2195 
	gthªads
[
i
] = 
Sim∂eThªad
([&](i) {

2196 
¥evIãms
[10];

2197 
j
 = 0; j != 10; ++j) {

2198 
¥evIãms
[
j
] = -1;

2200 
ôems
[15];

2201 
C⁄sumîTokí
 
t
(
q
);

2203 
dequeueCou¡
.
lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
) != 1000) {

2204 
size_t
 
cou¡
;

2205 i‡((
i
 & 1) == 1) {

2206 
cou¡
 = 
q
.
åy_dequeue_bulk
(
ôems
, 15);

2209 
cou¡
 = 
q
.
åy_dequeue_bulk
(
t
, 
ôems
, 15);

2212 i‡(
cou¡
 > 15) {

2213 
suc˚ss
[
i
] = 
Ál£
;

2215 
size_t
 
k
 = 0; k !
cou¡
; ++k) {

2216 i‡(
¥evIãms
[
ôems
[
k
] / 128] >= (items[k] & 127)) {

2217 
suc˚ss
[
i
] = 
Ál£
;

2219 
¥evIãms
[
ôems
[
k
] / 128] = items[k] & 127;

2221 
dequeueCou¡
.
„tch_add
(
cou¡
, 
°d
::
mem‹y_‹dî_ªœxed
);

2223 }, 
i
);

2226 
	gi
 = 0; i != 20; ++i) {

2227 
	gthªads
[
i
].
joö
();

2230 
	gôem
;

2231 
ASSERT_OR_FAIL
(!
q
.
åy_dequeue
(
ôem
));

2232 
	gi
 = 0; i != 20; ++i) {

2233 
ASSERT_OR_FAIL
(
suc˚ss
[
i
]);

2237  
	gåue
;

2240 
boﬁ
 
im∂icô_¥odu˚r_hash
()

2242 
	gj
 = 0; j != 5; ++j) {

2243 
	gC⁄cuºítQueue
<, 
	gMÆlocTøckögTøôs
> 
	gq
;

2244 
	g°d
::
ve˘‹
<
Sim∂eThªad
> 
thªads
;

2245 
	gi
 = 0; i != 20; ++i) {

2246 
	gthªads
.
push_back
(
Sim∂eThªad
([&]() {

2247 
q
.
íqueue
(7);

2251 autÿ
	gô
 = 
thªads
.
begö
(); ià!thªads.
íd
(); ++it) {

2252 
	gô
->
joö
();

2255 
	gôem
;

2256 
C⁄sumîTokí
 
t
(
q
);

2257 autÿ
	gi
 = 0; i != 20; ++i) {

2258 i‡((
	gj
 & 1) == 0) {

2259 
ASSERT_OR_FAIL
(
q
.
åy_dequeue
(
ôem
));

2262 
ASSERT_OR_FAIL
(
q
.
åy_dequeue
(
t
, 
ôem
));

2264 
ASSERT_OR_FAIL
(
ôem
 == 7);

2266 
ASSERT_OR_FAIL
(!
q
.
åy_dequeue
(
ôem
));

2269  
	gåue
;

2272 
boﬁ
 
ödex_wøµög
()

2276 
	gC⁄cuºítQueue
<, 
	gSmÆlIndexTøôs
> 
q
(16);

2277 
	gôem
;

2279 
	gi
 = 0; i != (1 << 18); ++i) {

2280 i‡((
	gi
 & 16) == 0) {

2281 
ASSERT_OR_FAIL
(
q
.
åy_íqueue
(
i
));

2284 
ASSERT_OR_FAIL
(
q
.
åy_dequeue
(
ôem
));

2285 
ASSERT_OR_FAIL
(
ôem
 =(
i
 - 16));

2288 
ASSERT_OR_FAIL
(!
q
.
åy_dequeue
(
ôem
));

2293 
	gC⁄cuºítQueue
<, 
	gSmÆlIndexTøôs
> 
q
(16);

2294 
Produ˚rTokí
 
tok
(
q
);

2295 
	gôem
;

2297 
	gi
 = 0; i != (1 << 18); ++i) {

2298 i‡((
	gi
 & 16) == 0) {

2299 
ASSERT_OR_FAIL
(
q
.
åy_íqueue
(
tok
, 
i
));

2302 
ASSERT_OR_FAIL
(
q
.
åy_dequeue_‰om_¥odu˚r
(
tok
, 
ôem
));

2303 
ASSERT_OR_FAIL
(
ôem
 =(
i
 - 16));

2306 
ASSERT_OR_FAIL
(!
q
.
åy_dequeue
(
ôem
));

2311 
	gC⁄cuºítQueue
<, 
	gExåaSmÆlIndexTøôs
> 
q
(1);

2312 
	gôem
;

2314 
	gi
 = 0; i != 4097; ++i) {

2315 
	gq
.
íqueue
(
i
);

2316 
ASSERT_OR_FAIL
(
q
.
åy_dequeue
(
ôem
));

2317 
ASSERT_OR_FAIL
(
ôem
 =
i
);

2319 
ASSERT_OR_FAIL
(!
q
.
åy_dequeue
(
ôem
));

2324 
	gC⁄cuºítQueue
<, 
	gExåaSmÆlIndexTøôs
> 
q
(1);

2325 
Produ˚rTokí
 
tok
(
q
);

2326 
	gôem
;

2328 
	gi
 = 0; i != 4097; ++i) {

2329 
	gq
.
íqueue
(
tok
, 
i
);

2330 
ASSERT_OR_FAIL
(
q
.
åy_dequeue
(
ôem
));

2331 
ASSERT_OR_FAIL
(
ôem
 =
i
);

2333 
ASSERT_OR_FAIL
(!
q
.
åy_dequeue
(
ôem
));

2336  
	gåue
;

2339 
	gSizeLimôTøôs
 : 
public
 
MÆlocTøckögTøôs


2341 c⁄° 
size_t
 
BLOCK_SIZE
 = 2;

2342 c⁄° 
size_t
 
	gMAX_SUBQUEUE_SIZE
 = 5;

2345 
boﬁ
 
subqueue_size_limô
()

2349 
	gC⁄cuºítQueue
<, 
	gSizeLimôTøôs
> 
	gq
;

2350 
Produ˚rTokí
 
t
(
q
);

2351 
	gôem
;

2353 
ASSERT_OR_FAIL
(
q
.
íqueue
(
t
, 1));

2354 
ASSERT_OR_FAIL
(
q
.
íqueue
(
t
, 2));

2355 
ASSERT_OR_FAIL
(
q
.
íqueue
(
t
, 3));

2356 
ASSERT_OR_FAIL
(
q
.
íqueue
(
t
, 4));

2357 
ASSERT_OR_FAIL
(
q
.
íqueue
(
t
, 5));

2358 
ASSERT_OR_FAIL
(
q
.
íqueue
(
t
, 6));

2359 
ASSERT_OR_FAIL
(!
q
.
íqueue
(
t
, 7));

2360 
ASSERT_OR_FAIL
(!
q
.
íqueue
(
t
, 8));

2362 
ASSERT_OR_FAIL
(
q
.
åy_dequeue
(
ôem
) && item == 1);

2363 
ASSERT_OR_FAIL
(!
q
.
íqueue
(
t
, 7));

2364 
ASSERT_OR_FAIL
(
q
.
åy_dequeue
(
ôem
) && item == 2);

2365 
ASSERT_OR_FAIL
(
q
.
íqueue
(
t
, 7));

2366 
ASSERT_OR_FAIL
(
q
.
íqueue
(
t
, 8));

2367 
ASSERT_OR_FAIL
(!
q
.
íqueue
(
t
, 9));

2369 
ASSERT_OR_FAIL
(
q
.
åy_dequeue
(
ôem
) && item == 3);

2370 
ASSERT_OR_FAIL
(!
q
.
íqueue
(
t
, 9));

2371 
ASSERT_OR_FAIL
(
q
.
åy_dequeue
(
ôem
) && item == 4);

2372 
ASSERT_OR_FAIL
(
q
.
íqueue
(
t
, 9));

2374 
	gi
 = 5; i <= 9; ++i) {

2375 
ASSERT_OR_FAIL
(
q
.
åy_dequeue
(
ôem
Ë&& iãm =
i
);

2377 
ASSERT_OR_FAIL
(
q
.
íqueue
(
t
, 10));

2378 
ASSERT_OR_FAIL
(
q
.
åy_dequeue
(
ôem
) && item == 10);

2379 
ASSERT_OR_FAIL
(!
q
.
åy_dequeue
(
ôem
));

2380 
	gi
 = 0; i != 6; ++i) {

2381 
ASSERT_OR_FAIL
(
q
.
åy_íqueue
(
t
, 
i
));

2383 
ASSERT_OR_FAIL
(!
q
.
åy_íqueue
(
t
, 7));

2384 
ASSERT_OR_FAIL
(!
q
.
íqueue
(
t
, 7));

2387 
	gôems
[6];

2388 
ASSERT_OR_FAIL
(
q
.
åy_dequeue_bulk
(
ôems
, 6) == 6);

2389 
ASSERT_OR_FAIL
(!
q
.
åy_íqueue_bulk
(
t
, 
ôems
, 7));

2390 
ASSERT_OR_FAIL
(!
q
.
íqueue_bulk
(
t
, 
ôems
, 7));

2391 
ASSERT_OR_FAIL
(
q
.
íqueue_bulk
(
t
, 
ôems
, 6));

2392 
ASSERT_OR_FAIL
(
q
.
åy_dequeue_bulk
(
ôems
, 6) == 6);

2393 
ASSERT_OR_FAIL
(
q
.
íqueue_bulk
(
t
, 
ôems
, 3));

2394 
ASSERT_OR_FAIL
(!
q
.
íqueue_bulk
(
t
, 
ôems
, 4));

2395 
ASSERT_OR_FAIL
(
q
.
íqueue_bulk
(
t
, 
ôems
, 3));

2396 
ASSERT_OR_FAIL
(!
q
.
íqueue_bulk
(
t
, 
ôems
, 1));

2397 
ASSERT_OR_FAIL
(!
q
.
íqueue
(
t
, 100));

2398 
ASSERT_OR_FAIL
(
q
.
åy_dequeue_bulk
(
ôems
, 1) == 1);

2399 
ASSERT_OR_FAIL
(!
q
.
íqueue
(
t
, 100));

2404 
	gC⁄cuºítQueue
<, 
	gSizeLimôTøôs
> 
	gq
;

2405 
	gôem
;

2407 
ASSERT_OR_FAIL
(
q
.
íqueue
(1));

2408 
ASSERT_OR_FAIL
(
q
.
íqueue
(2));

2409 
ASSERT_OR_FAIL
(
q
.
íqueue
(3));

2410 
ASSERT_OR_FAIL
(
q
.
íqueue
(4));

2411 
ASSERT_OR_FAIL
(
q
.
íqueue
(5));

2412 
ASSERT_OR_FAIL
(
q
.
íqueue
(6));

2413 
ASSERT_OR_FAIL
(!
q
.
íqueue
(7));

2414 
ASSERT_OR_FAIL
(!
q
.
íqueue
(8));

2416 
ASSERT_OR_FAIL
(
q
.
åy_dequeue
(
ôem
) && item == 1);

2417 
ASSERT_OR_FAIL
(!
q
.
íqueue
(7));

2418 
ASSERT_OR_FAIL
(
q
.
åy_dequeue
(
ôem
) && item == 2);

2419 
ASSERT_OR_FAIL
(
q
.
íqueue
(7));

2420 
ASSERT_OR_FAIL
(
q
.
íqueue
(8));

2421 
ASSERT_OR_FAIL
(!
q
.
íqueue
(9));

2423 
ASSERT_OR_FAIL
(
q
.
åy_dequeue
(
ôem
) && item == 3);

2424 
ASSERT_OR_FAIL
(!
q
.
íqueue
(9));

2425 
ASSERT_OR_FAIL
(
q
.
åy_dequeue
(
ôem
) && item == 4);

2426 
ASSERT_OR_FAIL
(
q
.
íqueue
(9));

2428 
	gi
 = 5; i <= 9; ++i) {

2429 
ASSERT_OR_FAIL
(
q
.
åy_dequeue
(
ôem
Ë&& iãm =
i
);

2431 
ASSERT_OR_FAIL
(
q
.
íqueue
(10));

2432 
ASSERT_OR_FAIL
(
q
.
åy_dequeue
(
ôem
) && item == 10);

2433 
ASSERT_OR_FAIL
(!
q
.
åy_dequeue
(
ôem
));

2434 
	gi
 = 0; i != 6; ++i) {

2435 
ASSERT_OR_FAIL
(
q
.
åy_íqueue
(
i
));

2437 
ASSERT_OR_FAIL
(!
q
.
åy_íqueue
(7));

2438 
ASSERT_OR_FAIL
(!
q
.
íqueue
(7));

2441 
	gôems
[6];

2442 
ASSERT_OR_FAIL
(
q
.
åy_dequeue_bulk
(
ôems
, 6) == 6);

2443 
ASSERT_OR_FAIL
(!
q
.
åy_íqueue_bulk
(
ôems
, 7));

2444 
ASSERT_OR_FAIL
(!
q
.
íqueue_bulk
(
ôems
, 7));

2445 
ASSERT_OR_FAIL
(
q
.
íqueue_bulk
(
ôems
, 6));

2446 
ASSERT_OR_FAIL
(
q
.
åy_dequeue_bulk
(
ôems
, 6) == 6);

2447 
ASSERT_OR_FAIL
(
q
.
íqueue_bulk
(
ôems
, 3));

2448 
ASSERT_OR_FAIL
(!
q
.
íqueue_bulk
(
ôems
, 4));

2449 
ASSERT_OR_FAIL
(
q
.
íqueue_bulk
(
ôems
, 3));

2450 
ASSERT_OR_FAIL
(!
q
.
íqueue_bulk
(
ôems
, 1));

2451 
ASSERT_OR_FAIL
(!
q
.
íqueue
(100));

2452 
ASSERT_OR_FAIL
(
q
.
åy_dequeue_bulk
(
ôems
, 1) == 1);

2453 
ASSERT_OR_FAIL
(!
q
.
íqueue
(100));

2456  
	gåue
;

2459 
boﬁ
 
ex˚±i⁄s
()

2461 
	gTe°Tøôs
<4, 2> 
	tTøôs
;

2466 
	gC⁄cuºítQueue
<
	gThrowögMovabÀ
, 
	gTøôs
> 
	gq
;

2467 
Produ˚rTokí
 
tok
(
q
);

2469 
	gThrowögMovabÀ
::
ª£t
();

2471 
boﬁ
 
	gthªw
 = 
Ál£
;

2472 
	gåy
 {

2473 
	gq
.
íqueue
(
tok
, 
ThrowögMovabÀ
(1, 
åue
));

2475 
ˇtch
 (
ThrowögMovabÀ
* 
m
) {

2476 
	gthªw
 = 
åue
;

2477 
ASSERT_OR_FAIL
(
m
->
id
 == 1);

2478 
ASSERT_OR_FAIL
(
m
->
moved
);

2480 
ASSERT_OR_FAIL
(
thªw
);

2481 
ASSERT_OR_FAIL
(
q
.
size_≠¥ox
() == 0);

2483 
ASSERT_OR_FAIL
(
q
.
íqueue
(
tok
, 
ThrowögMovabÀ
(2)));

2484 
ThrowögMovabÀ
 
ªsu…
(-1);

2485 
ASSERT_OR_FAIL
(
q
.
åy_dequeue
(
ªsu…
));

2486 
ASSERT_OR_FAIL
(
ªsu…
.
id
 == 2);

2487 
ASSERT_OR_FAIL
(
ªsu…
.
moved
);

2488 
ASSERT_OR_FAIL
(!
q
.
åy_dequeue
(
ªsu…
));

2490 
ASSERT_OR_FAIL
(
ThrowögMovabÀ
::
de°royCou¡
() == 3);

2493 
	gThrowögMovabÀ
::
ª£t
();

2494 
	gq
.
íqueue
(
tok
, 
ThrowögMovabÀ
(10));

2495 
	gq
.
íqueue
(
tok
, 
ThrowögMovabÀ
(11, 
Ál£
, 
åue
));

2496 
	gq
.
íqueue
(
tok
, 
ThrowögMovabÀ
(12));

2497 
ASSERT_OR_FAIL
(
q
.
size_≠¥ox
() == 3);

2499 
ASSERT_OR_FAIL
(
q
.
åy_dequeue
(
ªsu…
));

2500 
ASSERT_OR_FAIL
(
ªsu…
.
id
 == 10);

2501 
	gthªw
 = 
Ál£
;

2502 
	gåy
 {

2503 
	gq
.
åy_dequeue
(
ªsu…
);

2505 
ˇtch
 (
ThrowögMovabÀ
* 
m
) {

2506 
ASSERT_OR_FAIL
(
m
->
id
 == 11);

2507 
	gthªw
 = 
åue
;

2509 
ASSERT_OR_FAIL
(
thªw
);

2510 
ASSERT_OR_FAIL
(
q
.
size_≠¥ox
() == 1);

2512 
ASSERT_OR_FAIL
(
q
.
åy_dequeue
(
ªsu…
));

2513 
ASSERT_OR_FAIL
(
ªsu…
.
id
 == 12);

2514 
ASSERT_OR_FAIL
(
ªsu…
.
moved
);

2516 
ASSERT_OR_FAIL
(!
q
.
åy_dequeue
(
ªsu…
));

2517 
	gq
.
íqueue
(
tok
, 
ThrowögMovabÀ
(13));

2518 
ASSERT_OR_FAIL
(
q
.
size_≠¥ox
() == 1);

2519 
ASSERT_OR_FAIL
(
q
.
åy_dequeue
(
ªsu…
));

2520 
ASSERT_OR_FAIL
(
ªsu…
.
id
 == 13);

2521 
ASSERT_OR_FAIL
(!
q
.
åy_dequeue
(
ªsu…
));

2523 
ASSERT_OR_FAIL
(
ThrowögMovabÀ
::
de°royCou¡
() == 8);

2529 
	gC⁄cuºítQueue
<
	gThrowögMovabÀ
, 
	gTøôs
> 
	gq
;

2530 
Produ˚rTokí
 
tok
(
q
);

2532 
	gThrowögMovabÀ
::
ª£t
();

2534 
	gi
 = 0; i != 3; ++i) {

2535 
	gq
.
íqueue
(
tok
, 
ThrowögMovabÀ
(
i
));

2537 
boﬁ
 
	gthªw
 = 
Ál£
;

2538 
	gåy
 {

2539 
	gq
.
íqueue
(
tok
, 
ThrowögMovabÀ
(3, 
åue
));

2541 
ˇtch
 (
ThrowögMovabÀ
* 
m
) {

2542 
	gthªw
 = 
åue
;

2543 
ASSERT_OR_FAIL
(
m
->
id
 == 3);

2545 
ASSERT_OR_FAIL
(
thªw
);

2546 
ASSERT_OR_FAIL
(
q
.
size_≠¥ox
() == 3);

2548 
	gq
.
íqueue
(
tok
, 
ThrowögMovabÀ
(4));

2549 
	gthªw
 = 
Ál£
;

2550 
	gåy
 {

2551 
	gq
.
íqueue
(
tok
, 
ThrowögMovabÀ
(5, 
åue
));

2553 
ˇtch
 (
ThrowögMovabÀ
* 
m
) {

2554 
	gthªw
 = 
åue
;

2555 
ASSERT_OR_FAIL
(
m
->
id
 == 5);

2556 
ASSERT_OR_FAIL
(
m
->
moved
);

2558 
ASSERT_OR_FAIL
(
thªw
);

2559 
ASSERT_OR_FAIL
(
q
.
size_≠¥ox
() == 4);

2560 
	gq
.
íqueue
(
tok
, 
ThrowögMovabÀ
(6));

2562 
ThrowögMovabÀ
 
ªsu…
(-1);

2563 
ASSERT_OR_FAIL
(
q
.
åy_dequeue
(
ªsu…
));

2564 
ASSERT_OR_FAIL
(
ªsu…
.
id
 == 0);

2565 
ASSERT_OR_FAIL
(
q
.
åy_dequeue
(
ªsu…
));

2566 
ASSERT_OR_FAIL
(
ªsu…
.
id
 == 1);

2567 
ASSERT_OR_FAIL
(
q
.
åy_dequeue
(
ªsu…
));

2568 
ASSERT_OR_FAIL
(
ªsu…
.
id
 == 2);

2569 
ASSERT_OR_FAIL
(
q
.
åy_dequeue
(
ªsu…
));

2570 
ASSERT_OR_FAIL
(
ªsu…
.
id
 == 4);

2571 
ASSERT_OR_FAIL
(
q
.
åy_dequeue
(
ªsu…
));

2572 
ASSERT_OR_FAIL
(
ªsu…
.
id
 == 6);

2573 
ASSERT_OR_FAIL
(!
q
.
åy_dequeue
(
ªsu…
));

2575 
ASSERT_OR_FAIL
(
ThrowögMovabÀ
::
de°royCou¡
() == 12);

2578 
	gThrowögMovabÀ
::
ª£t
();

2579 
	gq
.
íqueue
(
tok
, 
ThrowögMovabÀ
(10, 
Ál£
, 
åue
));

2580 
	gq
.
íqueue
(
tok
, 
ThrowögMovabÀ
(11));

2581 
	gq
.
íqueue
(
tok
, 
ThrowögMovabÀ
(12));

2582 
	gq
.
íqueue
(
tok
, 
ThrowögMovabÀ
(13, 
Ál£
, 
åue
));

2583 
	gq
.
íqueue
(
tok
, 
ThrowögMovabÀ
(14, 
Ál£
, 
åue
));

2584 
	gq
.
íqueue
(
tok
, 
ThrowögMovabÀ
(15, 
Ál£
, 
åue
));

2585 
	gq
.
íqueue
(
tok
, 
ThrowögMovabÀ
(16));

2586 
ASSERT_OR_FAIL
(
q
.
size_≠¥ox
() == 7);

2588 
	gi
 = 10; i != 17; ++i) {

2589 i‡(
	gi
 =10 || (
i
 >= 13 && i <= 15)) {

2590 
thªw
 = 
Ál£
;

2591 
	gåy
 {

2592 
	gq
.
åy_dequeue
(
ªsu…
);

2594 
ˇtch
 (
ThrowögMovabÀ
* 
m
) {

2595 
ASSERT_OR_FAIL
(
m
->
id
 =
i
);

2596 
ASSERT_OR_FAIL
(
m
->
moved
);

2597 
	gthªw
 = 
åue
;

2599 
ASSERT_OR_FAIL
(
thªw
);

2602 
ASSERT_OR_FAIL
(
q
.
åy_dequeue
(
ªsu…
));

2603 
ASSERT_OR_FAIL
(
ªsu…
.
id
 =
i
);

2604 
ASSERT_OR_FAIL
(
ªsu…
.
moved
);

2606 
ASSERT_OR_FAIL
(
q
.
size_≠¥ox
(Ë=(
°d
::
uöt32_t
)(16 - 
i
));

2609 
ASSERT_OR_FAIL
(!
q
.
åy_dequeue
(
ªsu…
));

2610 
	gq
.
íqueue
(
tok
, 
ThrowögMovabÀ
(20));

2611 
ASSERT_OR_FAIL
(
q
.
size_≠¥ox
() == 1);

2612 
ASSERT_OR_FAIL
(
q
.
åy_dequeue
(
ªsu…
));

2613 
ASSERT_OR_FAIL
(
ªsu…
.
id
 == 20);

2614 
ASSERT_OR_FAIL
(!
q
.
åy_dequeue
(
ªsu…
));

2616 
ASSERT_OR_FAIL
(
ThrowögMovabÀ
::
de°royCou¡
() == 16);

2622 
	gC⁄cuºítQueue
<
	gThrowögMovabÀ
, 
	gTøôs
> 
	gq
;

2623 
Produ˚rTokí
 
tok
(
q
);

2625 
	gThrowögMovabÀ
::
ª£t
();

2626 
	g°d
::
ve˘‹
<
ThrowögMovabÀ
> 
ôems
;

2627 
	gôems
.
ª£rve
(5);

2628 
	gôems
.
push_back
(
ThrowögMovabÀ
(1));

2629 
	gôems
.
push_back
(
ThrowögMovabÀ
(2));

2630 
	gôems
.
push_back
(
ThrowögMovabÀ
(3));

2631 
	gôems
.
push_back
(
ThrowögMovabÀ
(4));

2632 
	gôems
.
push_back
(
ThrowögMovabÀ
(5));

2633 
	gôems
.
back
().
	gthrowOnC˘‹
 = 
åue
;

2635 
boﬁ
 
	gthªw
 = 
Ál£
;

2636 
	gåy
 {

2637 
	gq
.
íqueue_bulk
(
tok
, 
°d
::
make_move_ôî©‹
(
ôems
.
begö
()), 5);

2639 
ˇtch
 (
ThrowögMovabÀ
* 
m
) {

2640 
	gthªw
 = 
åue
;

2641 
ASSERT_OR_FAIL
(
m
->
id
 == 5);

2642 
ASSERT_OR_FAIL
(
m
->
c›õd
);

2644 
ASSERT_OR_FAIL
(
thªw
);

2645 
ASSERT_OR_FAIL
(
q
.
size_≠¥ox
() == 0);

2646 
	gq
.
íqueue
(
tok
, 
ThrowögMovabÀ
(6));

2648 
	gthªw
 = 
Ál£
;

2649 
	gåy
 {

2650 
	gq
.
íqueue_bulk
(
tok
, 
°d
::
make_move_ôî©‹
(
ôems
.
begö
()), 5);

2652 
ˇtch
 (
ThrowögMovabÀ
* 
m
) {

2653 
	gthªw
 = 
åue
;

2654 
ASSERT_OR_FAIL
(
m
->
id
 == 5);

2656 
ASSERT_OR_FAIL
(
thªw
);

2657 
ASSERT_OR_FAIL
(
q
.
size_≠¥ox
() == 1);

2659 
ThrowögMovabÀ
 
ªsu…
(-1);

2660 
ASSERT_OR_FAIL
(
q
.
åy_dequeue
(
ªsu…
));

2661 
ASSERT_OR_FAIL
(
ªsu…
.
id
 == 6);

2662 
ASSERT_OR_FAIL
(
ªsu…
.
moved
);

2663 
ASSERT_OR_FAIL
(!
q
.
åy_dequeue
(
ªsu…
));

2665 
ASSERT_OR_FAIL
(
ThrowögMovabÀ
::
de°royCou¡
() == 15);

2668 
	gThrowögMovabÀ
::
ª£t
();

2669 
	gq
.
íqueue
(
tok
, 
ThrowögMovabÀ
(10));

2670 
	gq
.
íqueue
(
tok
, 
ThrowögMovabÀ
(11));

2671 
	gq
.
íqueue
(
tok
, 
ThrowögMovabÀ
(12));

2672 
	gq
.
íqueue
(
tok
, 
ThrowögMovabÀ
(13));

2673 
	gq
.
íqueue
(
tok
, 
ThrowögMovabÀ
(14, 
Ál£
, 
åue
,Årue));

2674 
	gq
.
íqueue
(
tok
, 
ThrowögMovabÀ
(15));

2675 
ASSERT_OR_FAIL
(
q
.
size_≠¥ox
() == 6);

2677 
	g°d
::
ve˘‹
<
ThrowögMovabÀ
> 
ªsu…s
;

2678 
	gªsu…s
.
ª£rve
(5);

2679 
ASSERT_OR_FAIL
(
q
.
åy_dequeue_bulk
(
°d
::
back_ö£πî
(
ªsu…s
), 2));

2680 
ASSERT_OR_FAIL
(
ªsu…s
.
size
() == 2);

2681 
ASSERT_OR_FAIL
(
ªsu…s
[0].
id
 == 10);

2682 
ASSERT_OR_FAIL
(
ªsu…s
[1].
id
 == 11);

2683 
ASSERT_OR_FAIL
(
ªsu…s
[0].
moved
);

2684 
ASSERT_OR_FAIL
(
ªsu…s
[1].
moved
);

2685 
ASSERT_OR_FAIL
(
q
.
size_≠¥ox
() == 4);

2686 
	gthªw
 = 
Ál£
;

2687 
	gåy
 {

2688 
	gq
.
åy_dequeue_bulk
(
°d
::
back_ö£πî
(
ªsu…s
), 4);

2690 
ˇtch
 (
ThrowögMovabÀ
*) {

2693 
	gthªw
 = 
åue
;

2695 
ASSERT_OR_FAIL
(
thªw
);

2696 
ASSERT_OR_FAIL
(
q
.
size_≠¥ox
() == 0);

2697 
ASSERT_OR_FAIL
(!
q
.
åy_dequeue
(
ªsu…
));

2698 
ASSERT_OR_FAIL
(
q
.
åy_dequeue_bulk
(
°d
::
back_ö£πî
(
ªsu…s
), 1) == 0);

2700 
ASSERT_OR_FAIL
(
ªsu…s
.
size
() == 4);

2701 
ASSERT_OR_FAIL
(
ªsu…s
[2].
id
 == 12);

2702 
ASSERT_OR_FAIL
(
ªsu…s
[3].
id
 == 13);

2704 
ASSERT_OR_FAIL
(
ThrowögMovabÀ
::
de°royCou¡
() == 12);

2711 
	gC⁄cuºítQueue
<
	gThrowögMovabÀ
, 
	gTøôs
> 
	gq
;

2713 
	gThrowögMovabÀ
::
ª£t
();

2715 
boﬁ
 
	gthªw
 = 
Ál£
;

2716 
	gåy
 {

2717 
	gq
.
íqueue
(
ThrowögMovabÀ
(1, 
åue
));

2719 
ˇtch
 (
ThrowögMovabÀ
* 
m
) {

2720 
	gthªw
 = 
åue
;

2721 
ASSERT_OR_FAIL
(
m
->
id
 == 1);

2722 
ASSERT_OR_FAIL
(
m
->
moved
);

2724 
ASSERT_OR_FAIL
(
thªw
);

2725 
ASSERT_OR_FAIL
(
q
.
size_≠¥ox
() == 0);

2727 
ASSERT_OR_FAIL
(
q
.
íqueue
(
ThrowögMovabÀ
(2)));

2728 
ThrowögMovabÀ
 
ªsu…
(-1);

2729 
ASSERT_OR_FAIL
(
q
.
åy_dequeue
(
ªsu…
));

2730 
ASSERT_OR_FAIL
(
ªsu…
.
id
 == 2);

2731 
ASSERT_OR_FAIL
(
ªsu…
.
moved
);

2732 
ASSERT_OR_FAIL
(!
q
.
åy_dequeue
(
ªsu…
));

2734 
ASSERT_OR_FAIL
(
ThrowögMovabÀ
::
de°royCou¡
() == 3);

2737 
	gThrowögMovabÀ
::
ª£t
();

2738 
	gq
.
íqueue
(
ThrowögMovabÀ
(10));

2739 
	gq
.
íqueue
(
ThrowögMovabÀ
(11, 
Ál£
, 
åue
));

2740 
	gq
.
íqueue
(
ThrowögMovabÀ
(12));

2741 
ASSERT_OR_FAIL
(
q
.
size_≠¥ox
() == 3);

2743 
ASSERT_OR_FAIL
(
q
.
åy_dequeue
(
ªsu…
));

2744 
ASSERT_OR_FAIL
(
ªsu…
.
id
 == 10);

2745 
	gthªw
 = 
Ál£
;

2746 
	gåy
 {

2747 
	gq
.
åy_dequeue
(
ªsu…
);

2749 
ˇtch
 (
ThrowögMovabÀ
* 
m
) {

2750 
ASSERT_OR_FAIL
(
m
->
id
 == 11);

2751 
	gthªw
 = 
åue
;

2753 
ASSERT_OR_FAIL
(
thªw
);

2754 
ASSERT_OR_FAIL
(
q
.
size_≠¥ox
() == 1);

2756 
ASSERT_OR_FAIL
(
q
.
åy_dequeue
(
ªsu…
));

2757 
ASSERT_OR_FAIL
(
ªsu…
.
id
 == 12);

2758 
ASSERT_OR_FAIL
(
ªsu…
.
moved
);

2760 
ASSERT_OR_FAIL
(!
q
.
åy_dequeue
(
ªsu…
));

2761 
	gq
.
íqueue
(
ThrowögMovabÀ
(13));

2762 
ASSERT_OR_FAIL
(
q
.
size_≠¥ox
() == 1);

2763 
ASSERT_OR_FAIL
(
q
.
åy_dequeue
(
ªsu…
));

2764 
ASSERT_OR_FAIL
(
ªsu…
.
id
 == 13);

2765 
ASSERT_OR_FAIL
(!
q
.
åy_dequeue
(
ªsu…
));

2767 
ASSERT_OR_FAIL
(
ThrowögMovabÀ
::
de°royCou¡
() == 8);

2773 
	gC⁄cuºítQueue
<
	gThrowögMovabÀ
, 
	gTøôs
> 
	gq
;

2775 
	gThrowögMovabÀ
::
ª£t
();

2777 
	gi
 = 0; i != 3; ++i) {

2778 
	gq
.
íqueue
(
ThrowögMovabÀ
(
i
));

2780 
boﬁ
 
	gthªw
 = 
Ál£
;

2781 
	gåy
 {

2782 
	gq
.
íqueue
(
ThrowögMovabÀ
(3, 
åue
));

2784 
ˇtch
 (
ThrowögMovabÀ
* 
m
) {

2785 
	gthªw
 = 
åue
;

2786 
ASSERT_OR_FAIL
(
m
->
id
 == 3);

2788 
ASSERT_OR_FAIL
(
thªw
);

2789 
ASSERT_OR_FAIL
(
q
.
size_≠¥ox
() == 3);

2791 
	gq
.
íqueue
(
ThrowögMovabÀ
(4));

2792 
	gthªw
 = 
Ál£
;

2793 
	gåy
 {

2794 
	gq
.
íqueue
(
ThrowögMovabÀ
(5, 
åue
));

2796 
ˇtch
 (
ThrowögMovabÀ
* 
m
) {

2797 
	gthªw
 = 
åue
;

2798 
ASSERT_OR_FAIL
(
m
->
id
 == 5);

2799 
ASSERT_OR_FAIL
(
m
->
moved
);

2801 
ASSERT_OR_FAIL
(
thªw
);

2802 
ASSERT_OR_FAIL
(
q
.
size_≠¥ox
() == 4);

2803 
	gq
.
íqueue
(
ThrowögMovabÀ
(6));

2805 
ThrowögMovabÀ
 
ªsu…
(-1);

2806 
ASSERT_OR_FAIL
(
q
.
åy_dequeue
(
ªsu…
));

2807 
ASSERT_OR_FAIL
(
ªsu…
.
id
 == 0);

2808 
ASSERT_OR_FAIL
(
q
.
åy_dequeue
(
ªsu…
));

2809 
ASSERT_OR_FAIL
(
ªsu…
.
id
 == 1);

2810 
ASSERT_OR_FAIL
(
q
.
åy_dequeue
(
ªsu…
));

2811 
ASSERT_OR_FAIL
(
ªsu…
.
id
 == 2);

2812 
ASSERT_OR_FAIL
(
q
.
åy_dequeue
(
ªsu…
));

2813 
ASSERT_OR_FAIL
(
ªsu…
.
id
 == 4);

2814 
ASSERT_OR_FAIL
(
q
.
åy_dequeue
(
ªsu…
));

2815 
ASSERT_OR_FAIL
(
ªsu…
.
id
 == 6);

2816 
ASSERT_OR_FAIL
(!
q
.
åy_dequeue
(
ªsu…
));

2818 
ASSERT_OR_FAIL
(
ThrowögMovabÀ
::
de°royCou¡
() == 12);

2821 
	gThrowögMovabÀ
::
ª£t
();

2822 
	gq
.
íqueue
(
ThrowögMovabÀ
(10, 
Ál£
, 
åue
));

2823 
	gq
.
íqueue
(
ThrowögMovabÀ
(11));

2824 
	gq
.
íqueue
(
ThrowögMovabÀ
(12));

2825 
	gq
.
íqueue
(
ThrowögMovabÀ
(13, 
Ál£
, 
åue
));

2826 
	gq
.
íqueue
(
ThrowögMovabÀ
(14, 
Ál£
, 
åue
));

2827 
	gq
.
íqueue
(
ThrowögMovabÀ
(15, 
Ál£
, 
åue
));

2828 
	gq
.
íqueue
(
ThrowögMovabÀ
(16));

2829 
ASSERT_OR_FAIL
(
q
.
size_≠¥ox
() == 7);

2831 
	gi
 = 10; i != 17; ++i) {

2832 i‡(
	gi
 =10 || (
i
 >= 13 && i <= 15)) {

2833 
thªw
 = 
Ál£
;

2834 
	gåy
 {

2835 
	gq
.
åy_dequeue
(
ªsu…
);

2837 
ˇtch
 (
ThrowögMovabÀ
* 
m
) {

2838 
ASSERT_OR_FAIL
(
m
->
id
 =
i
);

2839 
ASSERT_OR_FAIL
(
m
->
moved
);

2840 
	gthªw
 = 
åue
;

2842 
ASSERT_OR_FAIL
(
thªw
);

2845 
ASSERT_OR_FAIL
(
q
.
åy_dequeue
(
ªsu…
));

2846 
ASSERT_OR_FAIL
(
ªsu…
.
id
 =
i
);

2847 
ASSERT_OR_FAIL
(
ªsu…
.
moved
);

2849 
ASSERT_OR_FAIL
(
q
.
size_≠¥ox
(Ë=(
°d
::
uöt32_t
)(16 - 
i
));

2852 
ASSERT_OR_FAIL
(!
q
.
åy_dequeue
(
ªsu…
));

2853 
	gq
.
íqueue
(
ThrowögMovabÀ
(20));

2854 
ASSERT_OR_FAIL
(
q
.
size_≠¥ox
() == 1);

2855 
ASSERT_OR_FAIL
(
q
.
åy_dequeue
(
ªsu…
));

2856 
ASSERT_OR_FAIL
(
ªsu…
.
id
 == 20);

2857 
ASSERT_OR_FAIL
(!
q
.
åy_dequeue
(
ªsu…
));

2859 
ASSERT_OR_FAIL
(
ThrowögMovabÀ
::
de°royCou¡
() == 16);

2865 
	gC⁄cuºítQueue
<
	gThrowögMovabÀ
, 
	gTøôs
> 
	gq
;

2867 
	gThrowögMovabÀ
::
ª£t
();

2868 
	g°d
::
ve˘‹
<
ThrowögMovabÀ
> 
ôems
;

2869 
	gôems
.
ª£rve
(5);

2870 
	gôems
.
push_back
(
ThrowögMovabÀ
(1));

2871 
	gôems
.
push_back
(
ThrowögMovabÀ
(2));

2872 
	gôems
.
push_back
(
ThrowögMovabÀ
(3));

2873 
	gôems
.
push_back
(
ThrowögMovabÀ
(4));

2874 
	gôems
.
push_back
(
ThrowögMovabÀ
(5));

2875 
	gôems
.
back
().
	gthrowOnC˘‹
 = 
åue
;

2877 
boﬁ
 
	gthªw
 = 
Ál£
;

2878 
	gåy
 {

2879 
	gq
.
íqueue_bulk
(
°d
::
make_move_ôî©‹
(
ôems
.
begö
()), 5);

2881 
ˇtch
 (
ThrowögMovabÀ
* 
m
) {

2882 
	gthªw
 = 
åue
;

2883 
ASSERT_OR_FAIL
(
m
->
id
 == 5);

2884 
ASSERT_OR_FAIL
(
m
->
c›õd
);

2886 
ASSERT_OR_FAIL
(
thªw
);

2887 
ASSERT_OR_FAIL
(
q
.
size_≠¥ox
() == 0);

2888 
	gq
.
íqueue
(
ThrowögMovabÀ
(6));

2890 
	gthªw
 = 
Ál£
;

2891 
	gåy
 {

2892 
	gq
.
íqueue_bulk
(
°d
::
make_move_ôî©‹
(
ôems
.
begö
()), 5);

2894 
ˇtch
 (
ThrowögMovabÀ
* 
m
) {

2895 
	gthªw
 = 
åue
;

2896 
ASSERT_OR_FAIL
(
m
->
id
 == 5);

2898 
ASSERT_OR_FAIL
(
thªw
);

2899 
ASSERT_OR_FAIL
(
q
.
size_≠¥ox
() == 1);

2901 
ThrowögMovabÀ
 
ªsu…
(-1);

2902 
ASSERT_OR_FAIL
(
q
.
åy_dequeue
(
ªsu…
));

2903 
ASSERT_OR_FAIL
(
ªsu…
.
id
 == 6);

2904 
ASSERT_OR_FAIL
(
ªsu…
.
moved
);

2905 
ASSERT_OR_FAIL
(!
q
.
åy_dequeue
(
ªsu…
));

2907 
ASSERT_OR_FAIL
(
ThrowögMovabÀ
::
de°royCou¡
() == 15);

2910 
	gThrowögMovabÀ
::
ª£t
();

2911 
	gq
.
íqueue
(
ThrowögMovabÀ
(10));

2912 
	gq
.
íqueue
(
ThrowögMovabÀ
(11));

2913 
	gq
.
íqueue
(
ThrowögMovabÀ
(12));

2914 
	gq
.
íqueue
(
ThrowögMovabÀ
(13));

2915 
	gq
.
íqueue
(
ThrowögMovabÀ
(14, 
Ál£
, 
åue
,Årue));

2916 
	gq
.
íqueue
(
ThrowögMovabÀ
(15));

2917 
ASSERT_OR_FAIL
(
q
.
size_≠¥ox
() == 6);

2919 
	g°d
::
ve˘‹
<
ThrowögMovabÀ
> 
ªsu…s
;

2920 
	gªsu…s
.
ª£rve
(5);

2921 
ASSERT_OR_FAIL
(
q
.
åy_dequeue_bulk
(
°d
::
back_ö£πî
(
ªsu…s
), 2));

2922 
ASSERT_OR_FAIL
(
ªsu…s
.
size
() == 2);

2923 
ASSERT_OR_FAIL
(
ªsu…s
[0].
id
 == 10);

2924 
ASSERT_OR_FAIL
(
ªsu…s
[1].
id
 == 11);

2925 
ASSERT_OR_FAIL
(
ªsu…s
[0].
moved
);

2926 
ASSERT_OR_FAIL
(
ªsu…s
[1].
moved
);

2927 
ASSERT_OR_FAIL
(
q
.
size_≠¥ox
() == 4);

2928 
	gthªw
 = 
Ál£
;

2929 
	gåy
 {

2930 
	gq
.
åy_dequeue_bulk
(
°d
::
back_ö£πî
(
ªsu…s
), 4);

2932 
ˇtch
 (
ThrowögMovabÀ
*) {

2933 
	gthªw
 = 
åue
;

2935 
ASSERT_OR_FAIL
(
thªw
);

2936 
ASSERT_OR_FAIL
(
q
.
size_≠¥ox
() == 0);

2937 
ASSERT_OR_FAIL
(!
q
.
åy_dequeue
(
ªsu…
));

2938 
ASSERT_OR_FAIL
(
q
.
åy_dequeue_bulk
(
°d
::
back_ö£πî
(
ªsu…s
), 1) == 0);

2940 
ASSERT_OR_FAIL
(
ªsu…s
.
size
() == 4);

2941 
ASSERT_OR_FAIL
(
ªsu…s
[2].
id
 == 12);

2942 
ASSERT_OR_FAIL
(
ªsu…s
[3].
id
 == 13);

2944 
ASSERT_OR_FAIL
(
ThrowögMovabÀ
::
de°royCou¡
() == 12);

2949 
	gC⁄cuºítQueue
<
	gThrowögMovabÀ
, 
	gTøôs
> 
	gq
;

2950 
	gThrowögMovabÀ
::
ª£t
();

2952 
	g°d
::
ve˘‹
<
Sim∂eThªad
> 
thªads
(6);

2953 
	g°d
::
size_t
 
tid
 = 0; 
	gtid
 !
thªads
.
size
(); ++tid) {

2954 
	gthªads
[
tid
] = 
Sim∂eThªad
([&](
°d
::
size_t
Åid) {

2955 
°d
::
ve˘‹
<
ThrowögMovabÀ
> 
öVec
;

2956 
öVec
.
push_back
(
ThrowögMovabÀ
(1));

2957 
öVec
.
push_back
(
ThrowögMovabÀ
(2));

2958 
öVec
.
push_back
(
ThrowögMovabÀ
(3));

2960 
°d
::
ve˘‹
<
ThrowögMovabÀ
> 
outVec
;

2961 
outVec
.
push_back
(
ThrowögMovabÀ
(-1));

2962 
outVec
.
push_back
(
ThrowögMovabÀ
(-1));

2963 
outVec
.
push_back
(
ThrowögMovabÀ
(-1));

2965 
Produ˚rTokí
 
tok
(
q
);

2966 
ThrowögMovabÀ
 
ªsu…
(-1);

2968 
°d
::
size_t
 
i
 = 0; i != 8192; ++i) {

2969 autÿ
magic
 = (
tid
 + 1Ë* 
i
 +Åid * 17 + i;

2970 autÿ
›
 = 
magic
 & 7;

2971 autÿ
˘‹Throw
 = (
magic
 & 0x10) != 0;

2972 autÿ
assignThrow
 = (
magic
 & 0x20) != 0;

2973 autÿ
throwOnNextC˘‹
 = (
magic
 & 0x40) != 0;

2974 
åy
 {

2975 
›
) {

2977 
q
.
íqueue
(
tok
, 
ThrowögMovabÀ
(()
i
, 
˘‹Throw
, 
assignThrow
, 
throwOnNextC˘‹
));

2980 
öVec
[
i
 & 3].
throwOnC˘‹
 = 
˘‹Throw
;

2981 
öVec
[
i
 & 3].
throwOnAssignmít
 = 
assignThrow
;

2982 
öVec
[
i
 & 3].
throwOnSec⁄dC˘‹
 = 
throwOnNextC˘‹
;

2983 
q
.
íqueue_bulk
(
tok
, 
öVec
.
begö
(), 3);

2986 
q
.
íqueue
(
ThrowögMovabÀ
(()
i
, 
˘‹Throw
, 
assignThrow
, 
throwOnNextC˘‹
));

2989 
öVec
[
i
 & 3].
throwOnC˘‹
 = 
˘‹Throw
;

2990 
öVec
[
i
 & 3].
throwOnAssignmít
 = 
assignThrow
;

2991 
öVec
[
i
 & 3].
throwOnSec⁄dC˘‹
 = 
throwOnNextC˘‹
;

2992 
q
.
íqueue_bulk
(
öVec
.
begö
(), 3);

2996 
q
.
åy_dequeue
(
ªsu…
);

3000 
q
.
åy_dequeue_bulk
(
outVec
.
d©a
(), 3);

3004 
ˇtch
 (
ThrowögMovabÀ
*) {

3007 }, 
tid
);

3009 
	g°d
::
size_t
 
i
 = 0; 
	gi
 !
thªads
.
size
(); ++i) {

3010 
	gthªads
[
i
].
joö
();

3013 
ThrowögMovabÀ
 
ªsu…
(-1);

3014 
	gåue
) {

3015 
	gåy
 {

3016 i‡(!
	gq
.
åy_dequeue
(
ªsu…
)) {

3020 
ˇtch
 (
ThrowögMovabÀ
*) {

3024 
ASSERT_OR_FAIL
(
ThrowögMovabÀ
::
de°royCou¡
(Ë+ 1 =ThrowögMovabÀ::
˘‹Cou¡
());

3027  
	gåue
;

3030 
boﬁ
 
ã°_thªaded
()

3032 
	gTe°Tøôs
<4> 
	tTøôs
;

3033 
	gTøôs
::
ª£t
();

3035 
boﬁ
 
	göOrdî
 = 
åue
;

3039 
	gC⁄cuºítQueue
<, 
	gTøôs
> 
	gq
;

3040 
Produ˚rTokí
 
t
(
q
);

3041 
Sim∂eThªad
 
a
([&]() {

3042 
i
 = 0; i != 123456; ++i) {

3043 
q
.
íqueue
(
t
, 
i
);

3046 
Sim∂eThªad
 
b
([&]() {

3047 
ôem
;

3048 
¥evIãm
 = -1;

3049 
åue
) {

3050 i‡(
q
.
åy_dequeue_‰om_¥odu˚r
(
t
, 
ôem
)) {

3051 i‡(
ôem
 == 123455) {

3054 
öOrdî
 = 
ôem
 =
¥evIãm
 + 1 && inOrder;

3055 
¥evIãm
 = 
ôem
;

3060 
	ga
.
joö
();

3061 
	gb
.
joö
();

3063 
ASSERT_OR_FAIL
(
öOrdî
);

3067 
	gC⁄cuºítQueue
<, 
	gTøôs
> 
	gq
;

3068 
Produ˚rTokí
 
t
(
q
);

3069 
Sim∂eThªad
 
a
([&]() {

3070 
i
 = 0; i != 123456; ++i) {

3071 
q
.
íqueue
(
t
, 
i
);

3074 
Sim∂eThªad
 
b
([&]() {

3075 
ôem
, 
¥evIãm
 = -1;

3076 
i
 = 0; i != 123456; ++i) {

3077 i‡(
q
.
åy_dequeue_‰om_¥odu˚r
(
t
, 
ôem
)) {

3078 
öOrdî
 = 
ôem
 > 
¥evIãm
 && inOrder;

3079 
¥evIãm
 = 
ôem
;

3083 
Sim∂eThªad
 
c
([&]() {

3084 
ôem
;

3085 
i
 = 0; i !123456; ++iË
q
.
åy_dequeue_‰om_¥odu˚r
(
t
, 
ôem
);

3087 
Sim∂eThªad
 
d
([&]() {

3088 
ôem
;

3089 
i
 = 0; i !123456; ++iË
q
.
åy_dequeue_‰om_¥odu˚r
(
t
, 
ôem
);

3092 
	ga
.
joö
();

3093 
	gb
.
joö
();

3094 
	gc
.
joö
();

3095 
	gd
.
joö
();

3097 
ASSERT_OR_FAIL
(
öOrdî
);

3099 
ASSERT_OR_FAIL
(
Tøôs
::
mÆloc_cou¡
(Ë=Tøôs::
‰ì_cou¡
());

3101  
	gåue
;

3104 
boﬁ
 
ã°_thªaded_bulk
()

3106 
	gTe°Tøôs
<2> 
	tTøôs
;

3109 
	gTøôs
::
ª£t
();

3111 
	gC⁄cuºítQueue
<, 
	gTøôs
> 
	gq
;

3112 
Sim∂eThªad
 
	gthªads
[2];

3113 
boﬁ
 
	gsuc˚ss
[2];

3115 
	g°uff
[] = { 1, 2, 3, 4, 5 };

3116 
	gi
 = 0; i != 2; ++i) {

3117 
	gsuc˚ss
[
i
] = 
åue
;

3119 i‡(
	gi
 == 0) {

3121 
thªads
[
i
] = 
Sim∂eThªad
([&](
j
) {

3122 
k
 = 0; k != 2048; ++k) {

3123 
suc˚ss
[
j
] = 
q
.
íqueue_bulk
(
°uff
, 5) && success[j];

3125 }, 
i
);

3129 
	gthªads
[
i
] = 
Sim∂eThªad
([&](
j
) {

3130 
ôem
;

3131 
¥evIãm
 = 0;

3132 
k
 = 0; k != 2048 * 5;) {

3133 i‡(
q
.
åy_dequeue
(
ôem
)) {

3134 i‡(
ôem
 !
¥evIãm
 + 1) {

3135 
suc˚ss
[
j
] = 
Ál£
;

3137 
¥evIãm
 = 
ôem
;

3138 i‡(
ôem
 == 5) {

3139 
¥evIãm
 = 0;

3141 ++
k
;

3144 }, 
i
);

3147 
	gi
 = 0; i != 2; ++i) {

3148 
	gthªads
[
i
].
joö
();

3151 
ASSERT_OR_FAIL
(
suc˚ss
[0]);

3152 
ASSERT_OR_FAIL
(
suc˚ss
[1]);

3156 
	gTøôs
::
ª£t
();

3158 
	gC⁄cuºítQueue
<, 
	gTøôs
> 
	gq
;

3159 
Sim∂eThªad
 
	gthªads
[2];

3160 
boﬁ
 
	gsuc˚ss
[2];

3162 
	g°uff
[] = { 1, 2, 3, 4, 5 };

3163 
	gi
 = 0; i != 2; ++i) {

3164 
	gsuc˚ss
[
i
] = 
åue
;

3166 i‡(
	gi
 == 0) {

3168 
thªads
[
i
] = 
Sim∂eThªad
([&](
j
) {

3169 
Produ˚rTokí
 
tok
(
q
);

3170 
k
 = 0; k != 2048; ++k) {

3171 
suc˚ss
[
j
] = 
q
.
íqueue_bulk
(
tok
, 
°uff
, 5) && success[j];

3173 }, 
i
);

3177 
	gthªads
[
i
] = 
Sim∂eThªad
([&](
j
) {

3178 
C⁄sumîTokí
 
tok
(
q
);

3179 
ôem
;

3180 
¥evIãm
 = 0;

3181 
k
 = 0; k != 2048 * 5;) {

3182 i‡(
q
.
åy_dequeue
(
tok
, 
ôem
)) {

3183 i‡(
ôem
 !
¥evIãm
 + 1) {

3184 
suc˚ss
[
j
] = 
Ál£
;

3186 
¥evIãm
 = 
ôem
;

3187 i‡(
ôem
 == 5) {

3188 
¥evIãm
 = 0;

3190 ++
k
;

3193 }, 
i
);

3196 
	gi
 = 0; i != 2; ++i) {

3197 
	gthªads
[
i
].
joö
();

3200 
ASSERT_OR_FAIL
(
suc˚ss
[0]);

3201 
ASSERT_OR_FAIL
(
suc˚ss
[1]);

3204  
	gåue
;

3207 
	gãm∂©e
<
ty≥«me
 
	gTøôs
>

3208 
boﬁ
 
fuŒ_≠i
()

3215 
	gC⁄cuºítQueue
<
	gC›yabÀ
, 
	gTøôs
> 
	gq
;

3216 
C›yabÀ
 
‹igöÆ
(12345);

3217 
ASSERT_OR_FAIL
(
q
.
íqueue
(
‹igöÆ
));

3218 
C›yabÀ
 
ôem
(0);

3219 
ASSERT_OR_FAIL
(
q
.
åy_dequeue
(
ôem
));

3220 
ASSERT_OR_FAIL
(
ôem
.
id
 == 12345);

3221 
ASSERT_OR_FAIL
(
ôem
.
c›õd
);

3222 
ASSERT_OR_FAIL
(!
q
.
åy_dequeue
(
ôem
));

3227 
	gC⁄cuºítQueue
<
	gMovóbÀ
, 
	gTøôs
> 
	gq
;

3228 
ASSERT_OR_FAIL
(
q
.
íqueue
(
MovóbÀ
(12345)));

3229 
MovóbÀ
 
ôem
(0);

3230 
ASSERT_OR_FAIL
(
q
.
åy_dequeue
(
ôem
));

3231 
ASSERT_OR_FAIL
(
ôem
.
id
 == 12345);

3232 
ASSERT_OR_FAIL
(
ôem
.
moved
);

3233 
ASSERT_OR_FAIL
(!
ôem
.
c›õd
);

3234 
ASSERT_OR_FAIL
(!
q
.
åy_dequeue
(
ôem
));

3237 
	gC⁄cuºítQueue
<
	gMovóbÀ
, 
	gTøôs
> 
	gq
;

3238 
MovóbÀ
 
‹igöÆ
(12345);

3239 
ASSERT_OR_FAIL
(
q
.
íqueue
(
°d
::
move
(
‹igöÆ
)));

3240 
MovóbÀ
 
ôem
(0);

3241 
ASSERT_OR_FAIL
(
q
.
åy_dequeue
(
ôem
));

3242 
ASSERT_OR_FAIL
(
ôem
.
id
 == 12345);

3243 
ASSERT_OR_FAIL
(
ôem
.
moved
);

3244 
ASSERT_OR_FAIL
(!
ôem
.
c›õd
);

3245 
ASSERT_OR_FAIL
(!
q
.
åy_dequeue
(
ôem
));

3248 
	gC⁄cuºítQueue
<
	gC›yabÀ
, 
	gTøôs
> 
	gq
;

3249 
ASSERT_OR_FAIL
(
q
.
íqueue
(
C›yabÀ
(12345)));

3250 
C›yabÀ
 
ôem
(0);

3251 
ASSERT_OR_FAIL
(
q
.
åy_dequeue
(
ôem
));

3252 
ASSERT_OR_FAIL
(
ôem
.
id
 == 12345);

3253 
ASSERT_OR_FAIL
(
ôem
.
c›õd
);

3254 
ASSERT_OR_FAIL
(!
q
.
åy_dequeue
(
ôem
));

3259 
	gC⁄cuºítQueue
<
	gC›yabÀ
, 
	gTøôs
> 
	gq
;

3260 
Produ˚rTokí
 
t
(
q
);

3261 
C›yabÀ
 
‹igöÆ
(12345);

3262 
ASSERT_OR_FAIL
(
q
.
íqueue
(
t
, 
‹igöÆ
));

3263 
C›yabÀ
 
ôem
(0);

3264 
ASSERT_OR_FAIL
(
q
.
åy_dequeue
(
ôem
));

3265 
ASSERT_OR_FAIL
(
ôem
.
id
 == 12345);

3266 
ASSERT_OR_FAIL
(
ôem
.
c›õd
);

3267 
ASSERT_OR_FAIL
(!
q
.
åy_dequeue
(
ôem
));

3272 
	gC⁄cuºítQueue
<
	gMovóbÀ
, 
	gTøôs
> 
	gq
;

3273 
Produ˚rTokí
 
t
(
q
);

3274 
ASSERT_OR_FAIL
(
q
.
íqueue
(
t
, 
MovóbÀ
(12345)));

3275 
MovóbÀ
 
ôem
(0);

3276 
ASSERT_OR_FAIL
(
q
.
åy_dequeue
(
ôem
));

3277 
ASSERT_OR_FAIL
(
ôem
.
id
 == 12345);

3278 
ASSERT_OR_FAIL
(
ôem
.
moved
);

3279 
ASSERT_OR_FAIL
(!
ôem
.
c›õd
);

3280 
ASSERT_OR_FAIL
(!
q
.
åy_dequeue
(
ôem
));

3283 
	gC⁄cuºítQueue
<
	gMovóbÀ
, 
	gTøôs
> 
	gq
;

3284 
Produ˚rTokí
 
t
(
q
);

3285 
MovóbÀ
 
‹igöÆ
(12345);

3286 
ASSERT_OR_FAIL
(
q
.
íqueue
(
t
, 
°d
::
move
(
‹igöÆ
)));

3287 
MovóbÀ
 
ôem
(0);

3288 
ASSERT_OR_FAIL
(
q
.
åy_dequeue
(
ôem
));

3289 
ASSERT_OR_FAIL
(
ôem
.
id
 == 12345);

3290 
ASSERT_OR_FAIL
(
ôem
.
moved
);

3291 
ASSERT_OR_FAIL
(!
ôem
.
c›õd
);

3292 
ASSERT_OR_FAIL
(!
q
.
åy_dequeue
(
ôem
));

3295 
	gC⁄cuºítQueue
<
	gC›yabÀ
, 
	gTøôs
> 
	gq
;

3296 
Produ˚rTokí
 
t
(
q
);

3297 
ASSERT_OR_FAIL
(
q
.
íqueue
(
t
, 
C›yabÀ
(12345)));

3298 
C›yabÀ
 
ôem
(0);

3299 
ASSERT_OR_FAIL
(
q
.
åy_dequeue
(
ôem
));

3300 
ASSERT_OR_FAIL
(
ôem
.
id
 == 12345);

3301 
ASSERT_OR_FAIL
(
ôem
.
c›õd
);

3302 
ASSERT_OR_FAIL
(!
q
.
åy_dequeue
(
ôem
));

3307 
	gC⁄cuºítQueue
<
	gC›yabÀ
, 
	gTøôs
> 
	gq
;

3308 
C›yabÀ
 
‹igöÆ
(12345);

3309 
ASSERT_OR_FAIL
(
q
.
åy_íqueue
(
‹igöÆ
));

3310 
C›yabÀ
 
ôem
(0);

3311 
ASSERT_OR_FAIL
(
q
.
åy_dequeue
(
ôem
));

3312 
ASSERT_OR_FAIL
(
ôem
.
id
 == 12345);

3313 
ASSERT_OR_FAIL
(
ôem
.
c›õd
);

3314 
ASSERT_OR_FAIL
(!
q
.
åy_dequeue
(
ôem
));

3319 
	gC⁄cuºítQueue
<
	gMovóbÀ
, 
	gTøôs
> 
	gq
;

3320 
ASSERT_OR_FAIL
(
q
.
åy_íqueue
(
MovóbÀ
(12345)));

3321 
MovóbÀ
 
ôem
(0);

3322 
ASSERT_OR_FAIL
(
q
.
åy_dequeue
(
ôem
));

3323 
ASSERT_OR_FAIL
(
ôem
.
id
 == 12345);

3324 
ASSERT_OR_FAIL
(
ôem
.
moved
);

3325 
ASSERT_OR_FAIL
(!
ôem
.
c›õd
);

3326 
ASSERT_OR_FAIL
(!
q
.
åy_dequeue
(
ôem
));

3329 
	gC⁄cuºítQueue
<
	gMovóbÀ
, 
	gTøôs
> 
	gq
;

3330 
MovóbÀ
 
‹igöÆ
(12345);

3331 
ASSERT_OR_FAIL
(
q
.
åy_íqueue
(
°d
::
move
(
‹igöÆ
)));

3332 
MovóbÀ
 
ôem
(0);

3333 
ASSERT_OR_FAIL
(
q
.
åy_dequeue
(
ôem
));

3334 
ASSERT_OR_FAIL
(
ôem
.
id
 == 12345);

3335 
ASSERT_OR_FAIL
(
ôem
.
moved
);

3336 
ASSERT_OR_FAIL
(!
ôem
.
c›õd
);

3337 
ASSERT_OR_FAIL
(!
q
.
åy_dequeue
(
ôem
));

3340 
	gC⁄cuºítQueue
<
	gC›yabÀ
, 
	gTøôs
> 
	gq
;

3341 
ASSERT_OR_FAIL
(
q
.
åy_íqueue
(
C›yabÀ
(12345)));

3342 
C›yabÀ
 
ôem
(0);

3343 
ASSERT_OR_FAIL
(
q
.
åy_dequeue
(
ôem
));

3344 
ASSERT_OR_FAIL
(
ôem
.
id
 == 12345);

3345 
ASSERT_OR_FAIL
(
ôem
.
c›õd
);

3346 
ASSERT_OR_FAIL
(!
q
.
åy_dequeue
(
ôem
));

3351 
	gC⁄cuºítQueue
<
	gC›yabÀ
, 
	gTøôs
> 
	gq
;

3352 
Produ˚rTokí
 
t
(
q
);

3353 
C›yabÀ
 
‹igöÆ
(12345);

3354 
ASSERT_OR_FAIL
(
q
.
åy_íqueue
(
t
, 
‹igöÆ
));

3355 
C›yabÀ
 
ôem
(0);

3356 
ASSERT_OR_FAIL
(
q
.
åy_dequeue
(
ôem
));

3357 
ASSERT_OR_FAIL
(
ôem
.
id
 == 12345);

3358 
ASSERT_OR_FAIL
(
ôem
.
c›õd
);

3359 
ASSERT_OR_FAIL
(!
q
.
åy_dequeue
(
ôem
));

3364 
	gC⁄cuºítQueue
<
	gMovóbÀ
, 
	gTøôs
> 
	gq
;

3365 
Produ˚rTokí
 
t
(
q
);

3366 
ASSERT_OR_FAIL
(
q
.
åy_íqueue
(
t
, 
MovóbÀ
(12345)));

3367 
MovóbÀ
 
ôem
(0);

3368 
ASSERT_OR_FAIL
(
q
.
åy_dequeue
(
ôem
));

3369 
ASSERT_OR_FAIL
(
ôem
.
id
 == 12345);

3370 
ASSERT_OR_FAIL
(
ôem
.
moved
);

3371 
ASSERT_OR_FAIL
(!
ôem
.
c›õd
);

3372 
ASSERT_OR_FAIL
(!
q
.
åy_dequeue
(
ôem
));

3375 
	gC⁄cuºítQueue
<
	gMovóbÀ
, 
	gTøôs
> 
	gq
;

3376 
Produ˚rTokí
 
t
(
q
);

3377 
MovóbÀ
 
‹igöÆ
(12345);

3378 
ASSERT_OR_FAIL
(
q
.
åy_íqueue
(
t
, 
°d
::
move
(
‹igöÆ
)));

3379 
MovóbÀ
 
ôem
(0);

3380 
ASSERT_OR_FAIL
(
q
.
åy_dequeue
(
ôem
));

3381 
ASSERT_OR_FAIL
(
ôem
.
id
 == 12345);

3382 
ASSERT_OR_FAIL
(
ôem
.
moved
);

3383 
ASSERT_OR_FAIL
(!
ôem
.
c›õd
);

3384 
ASSERT_OR_FAIL
(!
q
.
åy_dequeue
(
ôem
));

3387 
	gC⁄cuºítQueue
<
	gC›yabÀ
, 
	gTøôs
> 
	gq
;

3388 
Produ˚rTokí
 
t
(
q
);

3389 
ASSERT_OR_FAIL
(
q
.
åy_íqueue
(
t
, 
C›yabÀ
(12345)));

3390 
C›yabÀ
 
ôem
(0);

3391 
ASSERT_OR_FAIL
(
q
.
åy_dequeue
(
ôem
));

3392 
ASSERT_OR_FAIL
(
ôem
.
id
 == 12345);

3393 
ASSERT_OR_FAIL
(
ôem
.
c›õd
);

3394 
ASSERT_OR_FAIL
(!
q
.
åy_dequeue
(
ôem
));

3399 
	gC⁄cuºítQueue
<
	gC›yabÀ
, 
	gTøôs
> 
	gq
;

3400 
C›yabÀ
 
‹igöÆ
(12345);

3401 
ASSERT_OR_FAIL
(
q
.
íqueue_bulk
(&
‹igöÆ
, 1));

3402 
C›yabÀ
 
ôem
(0);

3403 
ASSERT_OR_FAIL
(
q
.
åy_dequeue
(
ôem
));

3404 
ASSERT_OR_FAIL
(
ôem
.
id
 == 12345);

3405 
ASSERT_OR_FAIL
(
ôem
.
c›õd
);

3406 
ASSERT_OR_FAIL
(!
q
.
åy_dequeue
(
ôem
));

3409 
	gC⁄cuºítQueue
<
	gMovóbÀ
, 
	gTøôs
> 
	gq
;

3410 
MovóbÀ
 
‹igöÆ
(12345);

3411 
ASSERT_OR_FAIL
(
q
.
íqueue_bulk
(
°d
::
make_move_ôî©‹
(&
‹igöÆ
), 1));

3412 
MovóbÀ
 
ôem
(0);

3413 
ASSERT_OR_FAIL
(
q
.
åy_dequeue
(
ôem
));

3414 
ASSERT_OR_FAIL
(
ôem
.
id
 == 12345);

3415 
ASSERT_OR_FAIL
(
ôem
.
moved
);

3416 
ASSERT_OR_FAIL
(!
ôem
.
c›õd
);

3417 
ASSERT_OR_FAIL
(!
q
.
åy_dequeue
(
ôem
));

3422 
	gC⁄cuºítQueue
<
	gC›yabÀ
, 
	gTøôs
> 
	gq
;

3423 
Produ˚rTokí
 
t
(
q
);

3424 
C›yabÀ
 
‹igöÆ
(12345);

3425 
ASSERT_OR_FAIL
(
q
.
íqueue_bulk
(
t
, &
‹igöÆ
, 1));

3426 
C›yabÀ
 
ôem
(0);

3427 
ASSERT_OR_FAIL
(
q
.
åy_dequeue
(
ôem
));

3428 
ASSERT_OR_FAIL
(
ôem
.
id
 == 12345);

3429 
ASSERT_OR_FAIL
(
ôem
.
c›õd
);

3430 
ASSERT_OR_FAIL
(!
q
.
åy_dequeue
(
ôem
));

3433 
	gC⁄cuºítQueue
<
	gMovóbÀ
, 
	gTøôs
> 
	gq
;

3434 
Produ˚rTokí
 
t
(
q
);

3435 
MovóbÀ
 
‹igöÆ
(12345);

3436 
ASSERT_OR_FAIL
(
q
.
íqueue_bulk
(
t
, 
°d
::
make_move_ôî©‹
(&
‹igöÆ
), 1));

3437 
MovóbÀ
 
ôem
(0);

3438 
ASSERT_OR_FAIL
(
q
.
åy_dequeue
(
ôem
));

3439 
ASSERT_OR_FAIL
(
ôem
.
id
 == 12345);

3440 
ASSERT_OR_FAIL
(
ôem
.
moved
);

3441 
ASSERT_OR_FAIL
(!
ôem
.
c›õd
);

3442 
ASSERT_OR_FAIL
(!
q
.
åy_dequeue
(
ôem
));

3447 
	gC⁄cuºítQueue
<
	gC›yabÀ
, 
	gTøôs
> 
	gq
;

3448 
C›yabÀ
 
‹igöÆ
(12345);

3449 
ASSERT_OR_FAIL
(
q
.
åy_íqueue_bulk
(&
‹igöÆ
, 1));

3450 
C›yabÀ
 
ôem
(0);

3451 
ASSERT_OR_FAIL
(
q
.
åy_dequeue
(
ôem
));

3452 
ASSERT_OR_FAIL
(
ôem
.
id
 == 12345);

3453 
ASSERT_OR_FAIL
(
ôem
.
c›õd
);

3454 
ASSERT_OR_FAIL
(!
q
.
åy_dequeue
(
ôem
));

3457 
	gC⁄cuºítQueue
<
	gMovóbÀ
, 
	gTøôs
> 
	gq
;

3458 
MovóbÀ
 
‹igöÆ
(12345);

3459 
ASSERT_OR_FAIL
(
q
.
åy_íqueue_bulk
(
°d
::
make_move_ôî©‹
(&
‹igöÆ
), 1));

3460 
MovóbÀ
 
ôem
(0);

3461 
ASSERT_OR_FAIL
(
q
.
åy_dequeue
(
ôem
));

3462 
ASSERT_OR_FAIL
(
ôem
.
id
 == 12345);

3463 
ASSERT_OR_FAIL
(
ôem
.
moved
);

3464 
ASSERT_OR_FAIL
(!
ôem
.
c›õd
);

3465 
ASSERT_OR_FAIL
(!
q
.
åy_dequeue
(
ôem
));

3470 
	gC⁄cuºítQueue
<
	gC›yabÀ
, 
	gTøôs
> 
	gq
;

3471 
Produ˚rTokí
 
t
(
q
);

3472 
C›yabÀ
 
‹igöÆ
(12345);

3473 
ASSERT_OR_FAIL
(
q
.
åy_íqueue_bulk
(
t
, &
‹igöÆ
, 1));

3474 
C›yabÀ
 
ôem
(0);

3475 
ASSERT_OR_FAIL
(
q
.
åy_dequeue
(
ôem
));

3476 
ASSERT_OR_FAIL
(
ôem
.
id
 == 12345);

3477 
ASSERT_OR_FAIL
(
ôem
.
c›õd
);

3478 
ASSERT_OR_FAIL
(!
q
.
åy_dequeue
(
ôem
));

3481 
	gC⁄cuºítQueue
<
	gMovóbÀ
, 
	gTøôs
> 
	gq
;

3482 
Produ˚rTokí
 
t
(
q
);

3483 
MovóbÀ
 
‹igöÆ
(12345);

3484 
ASSERT_OR_FAIL
(
q
.
åy_íqueue_bulk
(
t
, 
°d
::
make_move_ôî©‹
(&
‹igöÆ
), 1));

3485 
MovóbÀ
 
ôem
(0);

3486 
ASSERT_OR_FAIL
(
q
.
åy_dequeue
(
ôem
));

3487 
ASSERT_OR_FAIL
(
ôem
.
id
 == 12345);

3488 
ASSERT_OR_FAIL
(
ôem
.
moved
);

3489 
ASSERT_OR_FAIL
(!
ôem
.
c›õd
);

3490 
ASSERT_OR_FAIL
(!
q
.
åy_dequeue
(
ôem
));

3495 
	gC⁄cuºítQueue
<
	gC›yabÀ
, 
	gTøôs
> 
	gq
;

3496 
ASSERT_OR_FAIL
(
q
.
íqueue
(
C›yabÀ
(12345)));

3497 
C›yabÀ
 
ôem
(0);

3498 
ASSERT_OR_FAIL
(
q
.
åy_dequeue
(
ôem
));

3499 
ASSERT_OR_FAIL
(
ôem
.
id
 == 12345);

3500 
ASSERT_OR_FAIL
(
ôem
.
c›õd
);

3501 
ASSERT_OR_FAIL
(!
q
.
åy_dequeue
(
ôem
));

3504 
	gC⁄cuºítQueue
<
	gMovóbÀ
, 
	gTøôs
> 
	gq
;

3505 
ASSERT_OR_FAIL
(
q
.
íqueue
(
MovóbÀ
(12345)));

3506 
MovóbÀ
 
ôem
(0);

3507 
ASSERT_OR_FAIL
(
q
.
åy_dequeue
(
ôem
));

3508 
ASSERT_OR_FAIL
(
ôem
.
id
 == 12345);

3509 
ASSERT_OR_FAIL
(
ôem
.
moved
);

3510 
ASSERT_OR_FAIL
(!
ôem
.
c›õd
);

3511 
ASSERT_OR_FAIL
(!
q
.
åy_dequeue
(
ôem
));

3516 
	gC⁄cuºítQueue
<
	gC›yabÀ
, 
	gTøôs
> 
	gq
;

3517 
ASSERT_OR_FAIL
(
q
.
íqueue
(
C›yabÀ
(12345)));

3518 
C›yabÀ
 
ôem
(0);

3519 
C⁄sumîTokí
 
t
(
q
);

3520 
ASSERT_OR_FAIL
(
q
.
åy_dequeue
(
t
, 
ôem
));

3521 
ASSERT_OR_FAIL
(
ôem
.
id
 == 12345);

3522 
ASSERT_OR_FAIL
(
ôem
.
c›õd
);

3523 
ASSERT_OR_FAIL
(!
q
.
åy_dequeue
(
t
, 
ôem
));

3524 
ASSERT_OR_FAIL
(!
q
.
åy_dequeue
(
ôem
));

3527 
	gC⁄cuºítQueue
<
	gMovóbÀ
, 
	gTøôs
> 
	gq
;

3528 
ASSERT_OR_FAIL
(
q
.
íqueue
(
MovóbÀ
(12345)));

3529 
MovóbÀ
 
ôem
(0);

3530 
C⁄sumîTokí
 
t
(
q
);

3531 
ASSERT_OR_FAIL
(
q
.
åy_dequeue
(
t
, 
ôem
));

3532 
ASSERT_OR_FAIL
(
ôem
.
id
 == 12345);

3533 
ASSERT_OR_FAIL
(
ôem
.
moved
);

3534 
ASSERT_OR_FAIL
(!
ôem
.
c›õd
);

3535 
ASSERT_OR_FAIL
(!
q
.
åy_dequeue
(
t
, 
ôem
));

3536 
ASSERT_OR_FAIL
(!
q
.
åy_dequeue
(
ôem
));

3541 
	gC⁄cuºítQueue
<
	gC›yabÀ
, 
	gTøôs
> 
	gq
;

3542 
Produ˚rTokí
 
t
(
q
);

3543 
ASSERT_OR_FAIL
(
q
.
íqueue
(
t
, 
C›yabÀ
(12345)));

3544 
C›yabÀ
 
ôem
(0);

3545 
ASSERT_OR_FAIL
(
q
.
åy_dequeue_‰om_¥odu˚r
(
t
, 
ôem
));

3546 
ASSERT_OR_FAIL
(
ôem
.
id
 == 12345);

3547 
ASSERT_OR_FAIL
(
ôem
.
c›õd
);

3548 
ASSERT_OR_FAIL
(!
q
.
åy_dequeue_‰om_¥odu˚r
(
t
, 
ôem
));

3549 
ASSERT_OR_FAIL
(!
q
.
åy_dequeue
(
ôem
));

3552 
	gC⁄cuºítQueue
<
	gMovóbÀ
, 
	gTøôs
> 
	gq
;

3553 
Produ˚rTokí
 
t
(
q
);

3554 
ASSERT_OR_FAIL
(
q
.
íqueue
(
t
, 
MovóbÀ
(12345)));

3555 
MovóbÀ
 
ôem
(0);

3556 
ASSERT_OR_FAIL
(
q
.
åy_dequeue_‰om_¥odu˚r
(
t
, 
ôem
));

3557 
ASSERT_OR_FAIL
(
ôem
.
id
 == 12345);

3558 
ASSERT_OR_FAIL
(
ôem
.
moved
);

3559 
ASSERT_OR_FAIL
(!
ôem
.
c›õd
);

3560 
ASSERT_OR_FAIL
(!
q
.
åy_dequeue_‰om_¥odu˚r
(
t
, 
ôem
));

3561 
ASSERT_OR_FAIL
(!
q
.
åy_dequeue
(
ôem
));

3566 
	gC⁄cuºítQueue
<
	gC›yabÀ
, 
	gTøôs
> 
	gq
;

3567 
ASSERT_OR_FAIL
(
q
.
íqueue
(
C›yabÀ
(12345)));

3568 
C›yabÀ
 
ôem
(0);

3569 
ASSERT_OR_FAIL
(
q
.
åy_dequeue_bulk
(&
ôem
, 1) == 1);

3570 
ASSERT_OR_FAIL
(
ôem
.
id
 == 12345);

3571 
ASSERT_OR_FAIL
(
ôem
.
c›õd
);

3572 
ASSERT_OR_FAIL
(!
q
.
åy_dequeue_bulk
(&
ôem
, 1));

3575 
	gC⁄cuºítQueue
<
	gMovóbÀ
, 
	gTøôs
> 
	gq
;

3576 
ASSERT_OR_FAIL
(
q
.
íqueue
(
MovóbÀ
(12345)));

3577 
MovóbÀ
 
ôem
(0);

3578 
ASSERT_OR_FAIL
(
q
.
åy_dequeue_bulk
(&
ôem
, 1) == 1);

3579 
ASSERT_OR_FAIL
(
ôem
.
id
 == 12345);

3580 
ASSERT_OR_FAIL
(
ôem
.
moved
);

3581 
ASSERT_OR_FAIL
(!
ôem
.
c›õd
);

3582 
ASSERT_OR_FAIL
(!
q
.
åy_dequeue_bulk
(&
ôem
, 1));

3587 
	gC⁄cuºítQueue
<
	gC›yabÀ
, 
	gTøôs
> 
	gq
;

3588 
ASSERT_OR_FAIL
(
q
.
íqueue
(
C›yabÀ
(12345)));

3589 
C›yabÀ
 
ôem
(0);

3590 
C⁄sumîTokí
 
t
(
q
);

3591 
ASSERT_OR_FAIL
(
q
.
åy_dequeue_bulk
(
t
, &
ôem
, 1));

3592 
ASSERT_OR_FAIL
(
ôem
.
id
 == 12345);

3593 
ASSERT_OR_FAIL
(
ôem
.
c›õd
);

3594 
ASSERT_OR_FAIL
(!
q
.
åy_dequeue_bulk
(
t
, &
ôem
, 1));

3595 
ASSERT_OR_FAIL
(!
q
.
åy_dequeue_bulk
(&
ôem
, 1));

3598 
	gC⁄cuºítQueue
<
	gMovóbÀ
, 
	gTøôs
> 
	gq
;

3599 
ASSERT_OR_FAIL
(
q
.
íqueue
(
MovóbÀ
(12345)));

3600 
MovóbÀ
 
ôem
(0);

3601 
C⁄sumîTokí
 
t
(
q
);

3602 
ASSERT_OR_FAIL
(
q
.
åy_dequeue_bulk
(
t
, &
ôem
, 1));

3603 
ASSERT_OR_FAIL
(
ôem
.
id
 == 12345);

3604 
ASSERT_OR_FAIL
(
ôem
.
moved
);

3605 
ASSERT_OR_FAIL
(!
ôem
.
c›õd
);

3606 
ASSERT_OR_FAIL
(!
q
.
åy_dequeue_bulk
(
t
, &
ôem
, 1));

3607 
ASSERT_OR_FAIL
(!
q
.
åy_dequeue_bulk
(&
ôem
, 1));

3612 
	gC⁄cuºítQueue
<
	gC›yabÀ
, 
	gTøôs
> 
	gq
;

3613 
Produ˚rTokí
 
t
(
q
);

3614 
ASSERT_OR_FAIL
(
q
.
íqueue
(
t
, 
C›yabÀ
(12345)));

3615 
C›yabÀ
 
ôem
(0);

3616 
ASSERT_OR_FAIL
(
q
.
åy_dequeue_bulk_‰om_¥odu˚r
(
t
, &
ôem
, 1));

3617 
ASSERT_OR_FAIL
(
ôem
.
id
 == 12345);

3618 
ASSERT_OR_FAIL
(
ôem
.
c›õd
);

3619 
ASSERT_OR_FAIL
(!
q
.
åy_dequeue_bulk_‰om_¥odu˚r
(
t
, &
ôem
, 1));

3620 
ASSERT_OR_FAIL
(!
q
.
åy_dequeue
(
ôem
));

3623 
	gC⁄cuºítQueue
<
	gMovóbÀ
, 
	gTøôs
> 
	gq
;

3624 
Produ˚rTokí
 
t
(
q
);

3625 
ASSERT_OR_FAIL
(
q
.
íqueue
(
t
, 
MovóbÀ
(12345)));

3626 
MovóbÀ
 
ôem
(0);

3627 
ASSERT_OR_FAIL
(
q
.
åy_dequeue_bulk_‰om_¥odu˚r
(
t
, &
ôem
, 1));

3628 
ASSERT_OR_FAIL
(
ôem
.
id
 == 12345);

3629 
ASSERT_OR_FAIL
(
ôem
.
moved
);

3630 
ASSERT_OR_FAIL
(!
ôem
.
c›õd
);

3631 
ASSERT_OR_FAIL
(!
q
.
åy_dequeue_bulk_‰om_¥odu˚r
(
t
, &
ôem
, 1));

3632 
ASSERT_OR_FAIL
(!
q
.
åy_dequeue
(
ôem
));

3637 
	gC⁄cuºítQueue
<
	gFoo
, 
	gTøôs
> 
	gq
;

3638 
	gi
 = 0; i != 1234; ++i) {

3639 
	gq
.
íqueue
(
Foo
());

3641 
ASSERT_OR_FAIL
(
q
.
size_≠¥ox
() == 1234);

3646 
boﬁ
 
	glockFªe
 = 
C⁄cuºítQueue
<
Foo
, 
	gTøôs
>::
is_lock_‰ì
();

3647 #i‡
deföed
(
__amd64__
Ë|| deföed(
_M_X64
Ë|| deföed(
__x86_64__
Ë|| deföed(
_M_IX86
Ë|| deföed(
__i386__
Ë|| deföed(
_M_PPC
Ë|| deföed(
__powîpc__
)

3648 
ASSERT_OR_FAIL
(
lockFªe
);

3650 ()
	glockFªe
;

3656 
	gC⁄cuºítQueue
<, 
	gMÆlocTøckögTøôs
> 
q
(4);

3657 
Produ˚rTokí
 
t
(
q
);

3658 
	gi
 = 0; i != 1233; ++i) {

3659 
	gq
.
íqueue
(
i
);

3661 
	gi
 = 1234; i != 5678; ++i) {

3662 
	gq
.
íqueue
(
t
, 
i
);

3664 
ASSERT_OR_FAIL
(
q
.
size_≠¥ox
() == 5677);

3666 
	gC⁄cuºítQueue
<, 
	gMÆlocTøckögTøôs
> 
q2
(
°d
::
move
(
q
));

3667 
ASSERT_OR_FAIL
(
q
.
size_≠¥ox
() == 0);

3668 
ASSERT_OR_FAIL
(
q2
.
size_≠¥ox
() == 5677);

3670 
	gq2
.
íqueue
(
t
, 5678);

3671 
	gq2
.
íqueue
(1233);

3672 
ASSERT_OR_FAIL
(
q2
.
size_≠¥ox
() == 5679);

3674 
	gi
 = 1234; i != 0; --i) {

3675 
	gq
.
íqueue
(
i
);

3677 
ASSERT_OR_FAIL
(
q
.
size_≠¥ox
() == 1234);

3679 
	gôem
;

3680 
	gi
 = 0; i <= 5678; ++i) {

3681 
ASSERT_OR_FAIL
(
q2
.
åy_dequeue_n⁄_öãæóved
(
ôem
));

3682 
ASSERT_OR_FAIL
(
ôem
 =
i
);

3684 
ASSERT_OR_FAIL
(!
q2
.
åy_dequeue_n⁄_öãæóved
(
ôem
));

3685 
ASSERT_OR_FAIL
(
q2
.
size_≠¥ox
() == 0);

3687 
	gi
 = 1234; i != 0; --i) {

3688 
ASSERT_OR_FAIL
(
q
.
åy_dequeue_n⁄_öãæóved
(
ôem
));

3689 
ASSERT_OR_FAIL
(
ôem
 =
i
);

3691 
ASSERT_OR_FAIL
(!
q
.
åy_dequeue_n⁄_öãæóved
(
ôem
));

3692 
ASSERT_OR_FAIL
(
q
.
size_≠¥ox
() == 0);

3697 
	gC⁄cuºítQueue
<, 
	gMÆlocTøckögTøôs
> 
	gq1
, 
	gq2
, 
	gq3
;

3698 
Produ˚rTokí
 
t1
(
q1
), 
t2
(
q2
), 
t3
(
q3
);

3700 
	gi
 = 1234; i != 5678; ++i) {

3701 
	gq1
.
íqueue
(
t1
, 
i
);

3703 
	gi
 = 21234; i != 25678; ++i) {

3704 
	gq2
.
íqueue
(
t2
, 
i
);

3706 
	gi
 = 31234; i != 35678; ++i) {

3707 
	gq3
.
íqueue
(
t3
, 
i
);

3710 
	gi
 = 0; i != 1234; ++i) {

3711 
	gq1
.
íqueue
(
i
);

3713 
	gi
 = 20000; i != 21234; ++i) {

3714 
	gq2
.
íqueue
(
i
);

3716 
	gi
 = 30000; i != 31234; ++i) {

3717 
	gq3
.
íqueue
(
i
);

3721 
	gC⁄cuºítQueue
<, 
	gMÆlocTøckögTøôs
> 
	gãmp
;

3722 
	gãmp
 = 
°d
::
move
(
q1
);

3723 
	gq1
 = 
°d
::
move
(
q2
);

3724 
	gq2
 = 
°d
::
move
(
ãmp
);

3728 
sw≠
(
q2
, 
q3
);

3729 
	gq1
.
sw≠
(
q2
);

3730 
	gq1
.
sw≠
(
q2
);

3731 
	gq1
.
sw≠
(
q2
);

3732 
	gq2
.
sw≠
(
q3
);

3735 
	gôem
;

3736 
	gi
 = 30000; i != 35678; ++i) {

3737 
ASSERT_OR_FAIL
(
q1
.
åy_dequeue_n⁄_öãæóved
(
ôem
));

3738 
ASSERT_OR_FAIL
(
ôem
 =
i
);

3740 
ASSERT_OR_FAIL
(!
q1
.
åy_dequeue_n⁄_öãæóved
(
ôem
));

3741 
ASSERT_OR_FAIL
(
q1
.
size_≠¥ox
() == 0);

3743 
	gi
 = 0; i != 5678; ++i) {

3744 
ASSERT_OR_FAIL
(
q2
.
åy_dequeue_n⁄_öãæóved
(
ôem
));

3745 
ASSERT_OR_FAIL
(
ôem
 =
i
);

3747 
ASSERT_OR_FAIL
(!
q2
.
åy_dequeue_n⁄_öãæóved
(
ôem
));

3748 
ASSERT_OR_FAIL
(
q2
.
size_≠¥ox
() == 0);

3750 
	gi
 = 20000; i != 25678; ++i) {

3751 
ASSERT_OR_FAIL
(
q3
.
åy_dequeue_n⁄_öãæóved
(
ôem
));

3752 
ASSERT_OR_FAIL
(
ôem
 =
i
);

3754 
ASSERT_OR_FAIL
(!
q3
.
åy_dequeue_n⁄_öãæóved
(
ôem
));

3755 
ASSERT_OR_FAIL
(
q3
.
size_≠¥ox
() == 0);

3758  
	gåue
;

3762 
boﬁ
 
blockög_wøµîs
()

3764 
	gBlockögC⁄cuºítQueue
<, 
	tMÆlocTøckögTøôs
> 
	tQ
;

3765 
ASSERT_OR_FAIL
((
Q
::
is_lock_‰ì
(Ë=
C⁄cuºítQueue
<, 
MÆlocTøckögTøôs
>::is_lock_free()));

3769 
Q
 
	ga
, 
	gb
, 
	gc
;

3770 
	ga
 = 
°d
::
move
(
b
);

3771 
	gb
 = 
°d
::
move
(
c
);

3772 
	ga
 = 
°d
::
move
(
a
);

3773 
	gc
 = 
°d
::
move
(
b
);

3774 
	gb
 = 
Q
(
°d
::
move
(
b
));

3775 
usög
 
	g°d
::
sw≠
;

3776 
sw≠
(
a
, 
b
);

3777 
	ga
.
sw≠
(
c
);

3778 
	gc
.
sw≠
(
c
);

3783 
Q
 
	gq
;

3784 
ASSERT_OR_FAIL
(
q
.
íqueue
(1));

3785 
ASSERT_OR_FAIL
(
q
.
size_≠¥ox
() == 1);

3786 
	gôem
;

3787 
ASSERT_OR_FAIL
(
q
.
åy_dequeue
(
ôem
));

3788 
ASSERT_OR_FAIL
(
ôem
 == 1);

3789 
ASSERT_OR_FAIL
(!
q
.
åy_dequeue
(
ôem
));

3790 
ASSERT_OR_FAIL
(
q
.
size_≠¥ox
() == 0);

3792 
ASSERT_OR_FAIL
(
q
.
íqueue
(2));

3793 
ASSERT_OR_FAIL
(
q
.
íqueue
(3));

3794 
ASSERT_OR_FAIL
(
q
.
size_≠¥ox
() == 2);

3795 
	gq
.
waô_dequeue
(
ôem
);

3796 
ASSERT_OR_FAIL
(
ôem
 == 2);

3797 
ASSERT_OR_FAIL
(
q
.
size_≠¥ox
() == 1);

3798 
	gq
.
waô_dequeue
(
ôem
);

3799 
ASSERT_OR_FAIL
(
ôem
 == 3);

3800 
ASSERT_OR_FAIL
(!
q
.
åy_dequeue
(
ôem
));

3801 
ASSERT_OR_FAIL
(
q
.
size_≠¥ox
() == 0);

3806 
Q
 
	gq
;

3807 c⁄° 
	gTHREADS
 = 8;

3808 
Sim∂eThªad
 
	gthªads
[
THREADS
];

3809 
boﬁ
 
	gsuc˚ss
[
THREADS
];

3811 
	gi
 = 0; i !
THREADS
; ++i) {

3812 
	gsuc˚ss
[
i
] = 
åue
;

3814 i‡(
	gi
 % 2 == 0) {

3816 i‡(
i
 % 4 == 0) {

3817 
thªads
[
i
] = 
Sim∂eThªad
([&](
j
) {

3818 
°uff
[5];

3819 
k
 = 0; k != 2048; ++k) {

3820 
x
 = 0; x != 5; ++x) {

3821 
°uff
[
x
] = (
j
 << 16Ë| (
k
 * 5 + x);

3823 
suc˚ss
[
j
] = 
q
.
íqueue_bulk
(
°uff
, 5) && success[j];

3825 }, 
i
);

3828 
	gthªads
[
i
] = 
Sim∂eThªad
([&](
j
) {

3829 
k
 = 0; k != 4096; ++k) {

3830 
suc˚ss
[
j
] = 
q
.
íqueue
((j << 16Ë| 
k
) && success[j];

3832 }, 
i
);

3837 
	gthªads
[
i
] = 
Sim∂eThªad
([&](
j
) {

3838 
ôem
;

3839 
°d
::
ve˘‹
<> 
¥evIãms
(
THREADS
, -1);

3840 i‡(
j
 % 4 == 1) {

3841 
k
 = 0; k != 2048 * 5; ++k) {

3842 i‡(
q
.
åy_dequeue
(
ôem
)) {

3843 
thªad
 = 
ôem
 >> 16;

3844 
ôem
 &= 0xffff;

3845 i‡(
ôem
 <
¥evIãms
[
thªad
]) {

3846 
suc˚ss
[
j
] = 
Ál£
;

3848 
¥evIãms
[
thªad
] = 
ôem
;

3853 
ôems
[6];

3854 
k
 = 0; k < 4096; ++k) {

3855 i‡(
°d
::
size_t
 
dequeued
 = 
q
.
åy_dequeue_bulk
(
ôems
, 6)) {

3856 
°d
::
size_t
 
x
 = 0; x !
dequeued
; ++x) {

3857 
ôem
 = 
ôems
[
x
];

3858 
thªad
 = 
ôem
 >> 16;

3859 
ôem
 &= 0xffff;

3860 i‡(
ôem
 <
¥evIãms
[
thªad
]) {

3861 
suc˚ss
[
j
] = 
Ál£
;

3863 
¥evIãms
[
thªad
] = 
ôem
;

3868 }, 
i
);

3871 
	gi
 = 0; i !
THREADS
; ++i) {

3872 
	gthªads
[
i
].
joö
();

3875 
	gi
 = 0; i !
THREADS
; ++i) {

3876 
ASSERT_OR_FAIL
(
suc˚ss
[
i
]);

3882 
Q
 
	gq
;

3883 c⁄° 
	gTHREADS
 = 8;

3884 
Sim∂eThªad
 
	gthªads
[
THREADS
];

3885 
boﬁ
 
	gsuc˚ss
[
THREADS
];

3887 
	gi
 = 0; i !
THREADS
; ++i) {

3888 
	gsuc˚ss
[
i
] = 
åue
;

3890 i‡(
	gi
 % 2 == 0) {

3892 i‡(
i
 % 4 == 0) {

3893 
thªads
[
i
] = 
Sim∂eThªad
([&](
j
) {

3894 
°uff
[5];

3895 
k
 = 0; k != 2048; ++k) {

3896 
x
 = 0; x != 5; ++x) {

3897 
°uff
[
x
] = (
j
 << 16Ë| (
k
 * 5 + x);

3899 
suc˚ss
[
j
] = 
q
.
íqueue_bulk
(
°uff
, 5) && success[j];

3901 }, 
i
);

3904 
	gthªads
[
i
] = 
Sim∂eThªad
([&](
j
) {

3905 
k
 = 0; k != 4096; ++k) {

3906 
suc˚ss
[
j
] = 
q
.
íqueue
((j << 16Ë| 
k
) && success[j];

3908 }, 
i
);

3913 
	gthªads
[
i
] = 
Sim∂eThªad
([&](
j
) {

3914 
ôem
;

3915 
°d
::
ve˘‹
<> 
¥evIãms
(
THREADS
, -1);

3916 i‡(
j
 % 4 == 1) {

3917 
k
 = 0; k != 2048 * 5; ++k) {

3918 
q
.
waô_dequeue
(
ôem
);

3919 
thªad
 = 
ôem
 >> 16;

3920 
ôem
 &= 0xffff;

3921 i‡(
ôem
 <
¥evIãms
[
thªad
]) {

3922 
suc˚ss
[
j
] = 
Ál£
;

3924 
¥evIãms
[
thªad
] = 
ôem
;

3928 
ôems
[6];

3929 
k
;

3930 
k
 = 0; k < 4090; ) {

3931 i‡(
°d
::
size_t
 
dequeued
 = 
q
.
waô_dequeue_bulk
(
ôems
, 6)) {

3932 
°d
::
size_t
 
x
 = 0; x !
dequeued
; ++x) {

3933 
ôem
 = 
ôems
[
x
];

3934 
thªad
 = 
ôem
 >> 16;

3935 
ôem
 &= 0xffff;

3936 i‡(
ôem
 <
¥evIãms
[
thªad
]) {

3937 
suc˚ss
[
j
] = 
Ál£
;

3939 
¥evIãms
[
thªad
] = 
ôem
;

3941 
k
 +()
dequeued
;

3944 
suc˚ss
[
j
] = 
Ál£
;

3947 ; 
k
 != 4096; ++k) {

3948 
q
.
waô_dequeue
(
ôem
);

3949 
thªad
 = 
ôem
 >> 16;

3950 
ôem
 &= 0xffff;

3951 i‡(
ôem
 <
¥evIãms
[
thªad
]) {

3952 
suc˚ss
[
j
] = 
Ál£
;

3954 
¥evIãms
[
thªad
] = 
ôem
;

3957 }, 
i
);

3960 
	gi
 = 0; i !
THREADS
; ++i) {

3961 
	gthªads
[
i
].
joö
();

3964 
	gi
 = 0; i !
THREADS
; ++i) {

3965 
ASSERT_OR_FAIL
(
suc˚ss
[
i
]);

3967 
ASSERT_OR_FAIL
(
q
.
size_≠¥ox
() == 0);

3972 
Q
 
	gq
;

3973 
Produ˚rTokí
 
±
(
q
);

3974 
ASSERT_OR_FAIL
(
q
.
íqueue
(
±
, 1));

3975 
ASSERT_OR_FAIL
(
q
.
size_≠¥ox
() == 1);

3976 
	gôem
;

3977 
C⁄sumîTokí
 
˘
(
q
);

3978 
ASSERT_OR_FAIL
(
q
.
åy_dequeue
(
˘
, 
ôem
));

3979 
ASSERT_OR_FAIL
(
ôem
 == 1);

3980 
ASSERT_OR_FAIL
(!
q
.
åy_dequeue
(
˘
, 
ôem
));

3981 
ASSERT_OR_FAIL
(
q
.
size_≠¥ox
() == 0);

3983 
ASSERT_OR_FAIL
(
q
.
íqueue
(
±
, 2));

3984 
ASSERT_OR_FAIL
(
q
.
íqueue
(
±
, 3));

3985 
ASSERT_OR_FAIL
(
q
.
size_≠¥ox
() == 2);

3986 
	gq
.
waô_dequeue
(
˘
, 
ôem
);

3987 
ASSERT_OR_FAIL
(
ôem
 == 2);

3988 
ASSERT_OR_FAIL
(
q
.
size_≠¥ox
() == 1);

3989 
	gq
.
waô_dequeue
(
˘
, 
ôem
);

3990 
ASSERT_OR_FAIL
(
ôem
 == 3);

3991 
ASSERT_OR_FAIL
(!
q
.
åy_dequeue
(
˘
, 
ôem
));

3992 
ASSERT_OR_FAIL
(
q
.
size_≠¥ox
() == 0);

3997 
Q
 
	gq
;

3998 c⁄° 
	gTHREADS
 = 8;

3999 
Sim∂eThªad
 
	gthªads
[
THREADS
];

4000 
boﬁ
 
	gsuc˚ss
[
THREADS
];

4002 
	gi
 = 0; i !
THREADS
; ++i) {

4003 
	gsuc˚ss
[
i
] = 
åue
;

4005 i‡(
	gi
 % 2 == 0) {

4007 i‡(
i
 % 4 == 0) {

4008 
thªads
[
i
] = 
Sim∂eThªad
([&](
j
) {

4009 
Produ˚rTokí
 
t
(
q
);

4010 
°uff
[5];

4011 
k
 = 0; k != 2048; ++k) {

4012 
x
 = 0; x != 5; ++x) {

4013 
°uff
[
x
] = (
j
 << 16Ë| (
k
 * 5 + x);

4015 
suc˚ss
[
j
] = 
q
.
íqueue_bulk
(
t
, 
°uff
, 5) && success[j];

4017 }, 
i
);

4020 
	gthªads
[
i
] = 
Sim∂eThªad
([&](
j
) {

4021 
Produ˚rTokí
 
t
(
q
);

4022 
k
 = 0; k != 4096; ++k) {

4023 
suc˚ss
[
j
] = 
q
.
íqueue
(
t
, (j << 16Ë| 
k
) && success[j];

4025 }, 
i
);

4030 
	gthªads
[
i
] = 
Sim∂eThªad
([&](
j
) {

4031 
C⁄sumîTokí
 
t
(
q
);

4032 
ôem
;

4033 
°d
::
ve˘‹
<> 
¥evIãms
(
THREADS
, -1);

4034 i‡(
j
 % 4 == 1) {

4035 
k
 = 0; k != 2048 * 5; ++k) {

4036 i‡(
q
.
åy_dequeue
(
t
, 
ôem
)) {

4037 
thªad
 = 
ôem
 >> 16;

4038 
ôem
 &= 0xffff;

4039 i‡(
ôem
 <
¥evIãms
[
thªad
]) {

4040 
suc˚ss
[
j
] = 
Ál£
;

4042 
¥evIãms
[
thªad
] = 
ôem
;

4047 
ôems
[6];

4048 
k
 = 0; k < 4096; ++k) {

4049 i‡(
°d
::
size_t
 
dequeued
 = 
q
.
åy_dequeue_bulk
(
t
, 
ôems
, 6)) {

4050 
°d
::
size_t
 
x
 = 0; x !
dequeued
; ++x) {

4051 
ôem
 = 
ôems
[
x
];

4052 
thªad
 = 
ôem
 >> 16;

4053 
ôem
 &= 0xffff;

4054 i‡(
ôem
 <
¥evIãms
[
thªad
]) {

4055 
suc˚ss
[
j
] = 
Ál£
;

4057 
¥evIãms
[
thªad
] = 
ôem
;

4062 }, 
i
);

4065 
	gi
 = 0; i !
THREADS
; ++i) {

4066 
	gthªads
[
i
].
joö
();

4069 
	gi
 = 0; i !
THREADS
; ++i) {

4070 
ASSERT_OR_FAIL
(
suc˚ss
[
i
]);

4076 
Q
 
	gq
;

4077 c⁄° 
	gTHREADS
 = 8;

4078 
Sim∂eThªad
 
	gthªads
[
THREADS
];

4079 
boﬁ
 
	gsuc˚ss
[
THREADS
];

4081 
	gi
 = 0; i !
THREADS
; ++i) {

4082 
	gsuc˚ss
[
i
] = 
åue
;

4084 i‡(
	gi
 % 2 == 0) {

4086 i‡(
i
 % 4 == 0) {

4087 
thªads
[
i
] = 
Sim∂eThªad
([&](
j
) {

4088 
Produ˚rTokí
 
t
(
q
);

4089 
°uff
[5];

4090 
k
 = 0; k != 2048; ++k) {

4091 
x
 = 0; x != 5; ++x) {

4092 
°uff
[
x
] = (
j
 << 16Ë| (
k
 * 5 + x);

4094 
suc˚ss
[
j
] = 
q
.
íqueue_bulk
(
t
, 
°uff
, 5) && success[j];

4096 }, 
i
);

4099 
	gthªads
[
i
] = 
Sim∂eThªad
([&](
j
) {

4100 
Produ˚rTokí
 
t
(
q
);

4101 
k
 = 0; k != 4096; ++k) {

4102 
suc˚ss
[
j
] = 
q
.
íqueue
(
t
, (j << 16Ë| 
k
) && success[j];

4104 }, 
i
);

4109 
	gthªads
[
i
] = 
Sim∂eThªad
([&](
j
) {

4110 
C⁄sumîTokí
 
t
(
q
);

4111 
ôem
;

4112 
°d
::
ve˘‹
<> 
¥evIãms
(
THREADS
, -1);

4113 i‡(
j
 % 4 == 1) {

4114 
k
 = 0; k != 2048 * 5; ++k) {

4115 
q
.
waô_dequeue
(
t
, 
ôem
);

4116 
thªad
 = 
ôem
 >> 16;

4117 
ôem
 &= 0xffff;

4118 i‡(
ôem
 <
¥evIãms
[
thªad
]) {

4119 
suc˚ss
[
j
] = 
Ál£
;

4121 
¥evIãms
[
thªad
] = 
ôem
;

4125 
ôems
[6];

4126 
k
;

4127 
k
 = 0; k < 4090; ) {

4128 i‡(
°d
::
size_t
 
dequeued
 = 
q
.
waô_dequeue_bulk
(
t
, 
ôems
, 6)) {

4129 
°d
::
size_t
 
x
 = 0; x !
dequeued
; ++x) {

4130 
ôem
 = 
ôems
[
x
];

4131 
thªad
 = 
ôem
 >> 16;

4132 
ôem
 &= 0xffff;

4133 i‡(
ôem
 <
¥evIãms
[
thªad
]) {

4134 
suc˚ss
[
j
] = 
Ál£
;

4136 
¥evIãms
[
thªad
] = 
ôem
;

4138 
k
 +()
dequeued
;

4141 
suc˚ss
[
j
] = 
Ál£
;

4144 ; 
k
 != 4096; ++k) {

4145 
q
.
waô_dequeue
(
t
, 
ôem
);

4146 
thªad
 = 
ôem
 >> 16;

4147 
ôem
 &= 0xffff;

4148 i‡(
ôem
 <
¥evIãms
[
thªad
]) {

4149 
suc˚ss
[
j
] = 
Ál£
;

4151 
¥evIãms
[
thªad
] = 
ôem
;

4154 }, 
i
);

4157 
	gi
 = 0; i !
THREADS
; ++i) {

4158 
	gthªads
[
i
].
joö
();

4161 
	gi
 = 0; i !
THREADS
; ++i) {

4162 
ASSERT_OR_FAIL
(
suc˚ss
[
i
]);

4164 
ASSERT_OR_FAIL
(
q
.
size_≠¥ox
() == 0);

4167  
	gåue
;

4170 
boﬁ
 
timed_blockög_wøµîs
()

4172 
	gBlockögC⁄cuºítQueue
<, 
	tMÆlocTøckögTøôs
> 
	tQ
;

4176 
Q
 
	gq
;

4177 
	gôem
;

4178 
ASSERT_OR_FAIL
(!
q
.
waô_dequeue_timed
(
ôem
, 0));

4179 
ASSERT_OR_FAIL
(!
q
.
waô_dequeue_timed
(
ôem
, 1));

4180 
ASSERT_OR_FAIL
(!
q
.
waô_dequeue_timed
(
ôem
, 100));

4181 
ASSERT_OR_FAIL
(!
q
.
waô_dequeue_timed
(
ôem
, 
°d
::
chr⁄o
::
mûli£c⁄ds
(1)));

4182 
	gq
.
íqueue
(123);

4183 
ASSERT_OR_FAIL
(
q
.
waô_dequeue_timed
(
ôem
, 0));

4184 
ASSERT_OR_FAIL
(
ôem
 == 123);

4189 
Q
 
	gq
;

4190 c⁄° 
	gTHREADS
 = 8;

4191 
Sim∂eThªad
 
	gthªads
[
THREADS
];

4192 
boﬁ
 
	gsuc˚ss
[
THREADS
];

4194 
	gi
 = 0; i !
THREADS
; ++i) {

4195 
	gsuc˚ss
[
i
] = 
åue
;

4197 i‡(
	gi
 % 2 == 0) {

4199 i‡(
i
 % 4 == 0) {

4200 
thªads
[
i
] = 
Sim∂eThªad
([&](
j
) {

4201 
°uff
[5];

4202 
k
 = 0; k != 2048; ++k) {

4203 
x
 = 0; x != 5; ++x) {

4204 
°uff
[
x
] = (
j
 << 16Ë| (
k
 * 5 + x);

4206 
suc˚ss
[
j
] = 
q
.
íqueue_bulk
(
°uff
, 5) && success[j];

4208 }, 
i
);

4211 
	gthªads
[
i
] = 
Sim∂eThªad
([&](
j
) {

4212 
k
 = 0; k != 4096; ++k) {

4213 
suc˚ss
[
j
] = 
q
.
íqueue
((j << 16Ë| 
k
) && success[j];

4215 }, 
i
);

4220 
	gthªads
[
i
] = 
Sim∂eThªad
([&](
j
) {

4221 
ôem
;

4222 
°d
::
ve˘‹
<> 
¥evIãms
(
THREADS
, -1);

4223 i‡(
j
 % 4 == 1) {

4224 
k
 = 0; k != 2048 * 5; ++k) {

4225 i‡(!
q
.
waô_dequeue_timed
(
ôem
, 1000)) {

4226 --
k
;

4229 
thªad
 = 
ôem
 >> 16;

4230 
ôem
 &= 0xffff;

4231 i‡(
ôem
 <
¥evIãms
[
thªad
]) {

4232 
suc˚ss
[
j
] = 
Ál£
;

4234 
¥evIãms
[
thªad
] = 
ôem
;

4238 
ôems
[6];

4239 
k
;

4240 
k
 = 0; k < 4090; ) {

4241 i‡(
°d
::
size_t
 
dequeued
 = 
q
.
waô_dequeue_bulk_timed
(
ôems
, 6, 1000)) {

4242 
°d
::
size_t
 
x
 = 0; x !
dequeued
; ++x) {

4243 
ôem
 = 
ôems
[
x
];

4244 
thªad
 = 
ôem
 >> 16;

4245 
ôem
 &= 0xffff;

4246 i‡(
ôem
 <
¥evIãms
[
thªad
]) {

4247 
suc˚ss
[
j
] = 
Ál£
;

4249 
¥evIãms
[
thªad
] = 
ôem
;

4251 
k
 +()
dequeued
;

4254 ; 
k
 != 4096; ++k) {

4255 i‡(!
q
.
waô_dequeue_timed
(
ôem
, 
°d
::
chr⁄o
::
hours
(1))) {

4256 
suc˚ss
[
j
] = 
Ál£
;

4258 
thªad
 = 
ôem
 >> 16;

4259 
ôem
 &= 0xffff;

4260 i‡(
ôem
 <
¥evIãms
[
thªad
]) {

4261 
suc˚ss
[
j
] = 
Ál£
;

4263 
¥evIãms
[
thªad
] = 
ôem
;

4266 }, 
i
);

4269 
	gi
 = 0; i !
THREADS
; ++i) {

4270 
	gthªads
[
i
].
joö
();

4273 
	gi
 = 0; i !
THREADS
; ++i) {

4274 
ASSERT_OR_FAIL
(
suc˚ss
[
i
]);

4276 
ASSERT_OR_FAIL
(
q
.
size_≠¥ox
() == 0);

4278 
	gôem
;

4279 
ASSERT_OR_FAIL
(!
q
.
waô_dequeue_timed
(
ôem
, 0));

4284 
Q
 
	gq
;

4285 
Produ˚rTokí
 
±ok
(
q
);

4286 
C⁄sumîTokí
 
˘ok
(
q
);

4287 
	gôem
;

4288 
ASSERT_OR_FAIL
(!
q
.
waô_dequeue_timed
(
˘ok
, 
ôem
, 0));

4289 
ASSERT_OR_FAIL
(!
q
.
waô_dequeue_timed
(
˘ok
, 
ôem
, 1));

4290 
ASSERT_OR_FAIL
(!
q
.
waô_dequeue_timed
(
˘ok
, 
ôem
, 100));

4291 
ASSERT_OR_FAIL
(!
q
.
waô_dequeue_timed
(
˘ok
, 
ôem
, 
°d
::
chr⁄o
::
mûli£c⁄ds
(1)));

4292 
	gq
.
íqueue
(
±ok
, 123);

4293 
ASSERT_OR_FAIL
(
q
.
waô_dequeue_timed
(
˘ok
, 
ôem
, 0));

4294 
ASSERT_OR_FAIL
(
ôem
 == 123);

4299 
Q
 
	gq
;

4300 c⁄° 
	gTHREADS
 = 8;

4301 
Sim∂eThªad
 
	gthªads
[
THREADS
];

4302 
boﬁ
 
	gsuc˚ss
[
THREADS
];

4304 
	gi
 = 0; i !
THREADS
; ++i) {

4305 
	gsuc˚ss
[
i
] = 
åue
;

4307 i‡(
	gi
 % 2 == 0) {

4309 i‡(
i
 % 4 == 0) {

4310 
thªads
[
i
] = 
Sim∂eThªad
([&](
j
) {

4311 
Produ˚rTokí
 
tok
(
q
);

4312 
°uff
[5];

4313 
k
 = 0; k != 2048; ++k) {

4314 
x
 = 0; x != 5; ++x) {

4315 
°uff
[
x
] = (
j
 << 16Ë| (
k
 * 5 + x);

4317 
suc˚ss
[
j
] = 
q
.
íqueue_bulk
(
tok
, 
°uff
, 5) && success[j];

4319 }, 
i
);

4322 
	gthªads
[
i
] = 
Sim∂eThªad
([&](
j
) {

4323 
Produ˚rTokí
 
tok
(
q
);

4324 
k
 = 0; k != 4096; ++k) {

4325 
suc˚ss
[
j
] = 
q
.
íqueue
(
tok
, (j << 16Ë| 
k
) && success[j];

4327 }, 
i
);

4332 
	gthªads
[
i
] = 
Sim∂eThªad
([&](
j
) {

4333 
ôem
;

4334 
°d
::
ve˘‹
<> 
¥evIãms
(
THREADS
, -1);

4335 
C⁄sumîTokí
 
tok
(
q
);

4336 i‡(
j
 % 4 == 1) {

4337 
k
 = 0; k != 2048 * 5; ++k) {

4338 i‡(!
q
.
waô_dequeue_timed
(
tok
, 
ôem
, 1000)) {

4339 --
k
;

4342 
thªad
 = 
ôem
 >> 16;

4343 
ôem
 &= 0xffff;

4344 i‡(
ôem
 <
¥evIãms
[
thªad
]) {

4345 
suc˚ss
[
j
] = 
Ál£
;

4347 
¥evIãms
[
thªad
] = 
ôem
;

4351 
ôems
[6];

4352 
k
;

4353 
k
 = 0; k < 4090; ) {

4354 i‡(
°d
::
size_t
 
dequeued
 = 
q
.
waô_dequeue_bulk_timed
(
tok
, 
ôems
, 6, 1000)) {

4355 
°d
::
size_t
 
x
 = 0; x !
dequeued
; ++x) {

4356 
ôem
 = 
ôems
[
x
];

4357 
thªad
 = 
ôem
 >> 16;

4358 
ôem
 &= 0xffff;

4359 i‡(
ôem
 <
¥evIãms
[
thªad
]) {

4360 
suc˚ss
[
j
] = 
Ál£
;

4362 
¥evIãms
[
thªad
] = 
ôem
;

4364 
k
 +()
dequeued
;

4367 ; 
k
 != 4096; ++k) {

4368 i‡(!
q
.
waô_dequeue_timed
(
tok
, 
ôem
, 
°d
::
chr⁄o
::
hours
(1))) {

4369 
suc˚ss
[
j
] = 
Ál£
;

4371 
thªad
 = 
ôem
 >> 16;

4372 
ôem
 &= 0xffff;

4373 i‡(
ôem
 <
¥evIãms
[
thªad
]) {

4374 
suc˚ss
[
j
] = 
Ál£
;

4376 
¥evIãms
[
thªad
] = 
ôem
;

4379 }, 
i
);

4382 
	gi
 = 0; i !
THREADS
; ++i) {

4383 
	gthªads
[
i
].
joö
();

4386 
	gi
 = 0; i !
THREADS
; ++i) {

4387 
ASSERT_OR_FAIL
(
suc˚ss
[
i
]);

4389 
ASSERT_OR_FAIL
(
q
.
size_≠¥ox
() == 0);

4391 
	gôem
;

4392 
C⁄sumîTokí
 
tok
(
q
);

4393 
ASSERT_OR_FAIL
(!
q
.
waô_dequeue_timed
(
tok
, 
ôem
, 0));

4396  
	gåue
;

4400 
boﬁ
 
c_≠i_¸óã
()

4402 
MoodyˇmñCQH™dÀ
 
	gh™dÀ
;

4403 
	grc
 = 
moodyˇmñ_cq_¸óã
(&
h™dÀ
);

4404 
ASSERT_OR_FAIL
(
rc
 == 1);

4405 
ASSERT_OR_FAIL
(
h™dÀ
 !
nuŒ±r
);

4406 
moodyˇmñ_cq_de°roy
(
h™dÀ
);

4407  
	gåue
;

4410 
boﬁ
 
c_≠i_íqueue
()

4412 
MoodyˇmñCQH™dÀ
 
	gh™dÀ
;

4413 
	grc
 = 
moodyˇmñ_cq_¸óã
(&
h™dÀ
);

4414 
	gi
 = 10;

4415 
	grc
 = 
moodyˇmñ_cq_íqueue
(
h™dÀ
, &
i
);

4416 
ASSERT_OR_FAIL
(
rc
 == 1);

4417 
moodyˇmñ_cq_de°roy
(
h™dÀ
);

4418  
	gåue
;

4421 
boﬁ
 
c_≠i_åy_dequeue
()

4423 
MoodyˇmñCQH™dÀ
 
	gh™dÀ
;

4424 
	grc
 = 
moodyˇmñ_cq_¸óã
(&
h™dÀ
);

4426 
MoodyˇmñVÆue
 
	gn
;

4427 
	grc
 = 
moodyˇmñ_cq_åy_dequeue
(
h™dÀ
, &
n
);

4428 
ASSERT_OR_FAIL
(
rc
 == 0);

4430 
	gi
 = 10;

4431 
	grc
 = 
moodyˇmñ_cq_íqueue
(
h™dÀ
, &
i
);

4433 
MoodyˇmñVÆue
 
	gvÆue
;

4434 
	grc
 = 
moodyˇmñ_cq_åy_dequeue
(
h™dÀ
, &
vÆue
);

4435 
	gn
 = *
ªöãΩªt_ˇ°
<*>(
vÆue
);

4436 
ASSERT_OR_FAIL
(
rc
 == 1);

4437 
ASSERT_OR_FAIL
(
n
 == 10);

4439 
moodyˇmñ_cq_de°roy
(
h™dÀ
);

4440  
	gåue
;

4443 
boﬁ
 
c_≠i_de°roy
()

4445 
MoodyˇmñCQH™dÀ
 
	gh™dÀ
;

4446 
moodyˇmñ_cq_¸óã
(&
h™dÀ
);

4447 
moodyˇmñ_cq_de°roy
(
h™dÀ
);

4448  
	gåue
;

4451 
boﬁ
 
acquúe_™d_sig«l
()

4453 c⁄° 
	gTIMEOUT_US
 = 10 * 1000 * 1000;

4457 
LightweightSem≠h‹e
 
	gs
;

4458 
	gs
.
sig«l
();

4460 autÿ
	g‚Te°SögÀAcquúe
 = [&]() {

4461 
°d
::
size_t
 
k
 = 0; 
	gk
 < 200000; ++k) {

4462 
	gs
.
waô
(
TIMEOUT_US
);

4463 
	gs
.
sig«l
();

4467 
Sim∂eThªad
 
t1
(
‚Te°SögÀAcquúe
);

4468 
Sim∂eThªad
 
t2
(
‚Te°SögÀAcquúe
);

4470 
	gt1
.
joö
();

4471 
	gt2
.
joö
();

4473 
ASSERT_OR_FAIL
(
s
.
avaûabÀAµrox
() == 1);

4478 c⁄° 
	gTHREADS
 = 4;

4479 c⁄° 
	g°d
::
size_t
 
ITERATIONS
 = 200000;

4480 
Sim∂eThªad
 
	gthªads
[
THREADS
];

4481 c⁄° 
	g°d
::
size_t
 
¨øyIãmsToWaô
[
THREADS
] = { 1, 2, 3, 7 };

4482 
LightweightSem≠h‹e
 
	gs
;

4484 
	gi
 = 0; i !
THREADS
; ++i)

4485 
	gs
.
sig«l
(
ITERATIONS
 * 
¨øyIãmsToWaô
[
i
]);

4487 
	gi
 = 0; i !
THREADS
; ++i) {

4488 
	gthªads
[
i
] = 
Sim∂eThªad
([&](
tid
) {

4489 
°d
::
size_t
 
k
 = 0; k < 
ITERATIONS
; ++k)

4490 
s
.
waôM™y
(
¨øyIãmsToWaô
[
tid
], 
TIMEOUT_US
);

4491 }, 
i
);

4493 
	gi
 = 0; i !
THREADS
; ++i)

4494 
	gthªads
[
i
].
joö
();

4496 
ASSERT_OR_FAIL
(
s
.
avaûabÀAµrox
() == 0);

4499 c⁄° 
	gTHREADS
 = 5;

4500 c⁄° 
	g°d
::
size_t
 
ITERATIONS
 = 100000;

4501 
Sim∂eThªad
 
	gthªads
[
THREADS
];

4502 c⁄° 
	g°d
::
size_t
 
¨øyIãmsToWaô
[
THREADS
] = { 0, 1, 2, 3, 7 };

4503 
LightweightSem≠h‹e
 
	gs
;

4505 
	gi
 = 0; i !
THREADS
; ++i)

4506 
	gs
.
sig«l
(
ITERATIONS
 * 
¨øyIãmsToWaô
[
i
]);

4508 
	gi
 = 0; i !
THREADS
; ++i) {

4509 
	gthªads
[
i
] = 
Sim∂eThªad
([&](
tid
) {

4510 i‡(
tid
 == 0) {

4511 
°d
::
size_t
 
k
 = 0; k < 
ITERATIONS
 * (
THREADS
 - 1); ++k)

4512 
s
.
waô
(
TIMEOUT_US
);

4515 
°d
::
size_t
 
k
 = 0; k < 
ITERATIONS
; ++k) {

4516 
s
.
sig«l
();

4517 
s
.
waôM™y
(
¨øyIãmsToWaô
[
tid
], 
TIMEOUT_US
);

4520 }, 
i
);

4522 
	gi
 = 0; i !
THREADS
; ++i)

4523 
	gthªads
[
i
].
joö
();

4525 
ASSERT_OR_FAIL
(
s
.
avaûabÀAµrox
() == 0);

4528 
LightweightSem≠h‹e
 
	gs
;

4529 
ASSERT_OR_FAIL
(
s
.
avaûabÀAµrox
() == 0);

4530 
	gs
.
sig«l
();

4531 
ASSERT_OR_FAIL
(
s
.
avaûabÀAµrox
() == 1);

4532 
	gs
.
sig«l
();

4533 
ASSERT_OR_FAIL
(
s
.
avaûabÀAµrox
() == 2);

4534 
	gs
.
sig«l
(10);

4535 
ASSERT_OR_FAIL
(
s
.
avaûabÀAµrox
() == 12);

4536 
	gs
.
sig«l
(10);

4537 
ASSERT_OR_FAIL
(
s
.
avaûabÀAµrox
() == 22);

4539 
ASSERT_OR_FAIL
(
s
.
waô
());

4540 
ASSERT_OR_FAIL
(
s
.
avaûabÀAµrox
() == 21);

4541 
ASSERT_OR_FAIL
(
s
.
waô
());

4542 
ASSERT_OR_FAIL
(
s
.
avaûabÀAµrox
() == 20);

4543 
ASSERT_OR_FAIL
(
s
.
waôM™y
(10) == 10);

4544 
ASSERT_OR_FAIL
(
s
.
avaûabÀAµrox
() == 10);

4545 
ASSERT_OR_FAIL
(
s
.
waôM™y
(11) == 10);

4546 
ASSERT_OR_FAIL
(
s
.
avaûabÀAµrox
() == 0);

4548  
	gåue
;

4551 
boﬁ
 
åy_acquúe_™d_sig«l
()

4553 
LightweightSem≠h‹e
 
	gs
;

4555 
ASSERT_OR_FAIL
(
s
.
avaûabÀAµrox
() == 0);

4557 
	gs
.
sig«l
();

4558 
ASSERT_OR_FAIL
(
s
.
avaûabÀAµrox
() == 1);

4559 
ASSERT_OR_FAIL
(
s
.
åyWaôM™y
(2) == 1);

4560 
ASSERT_OR_FAIL
(
s
.
avaûabÀAµrox
() == 0);

4562 
	gs
.
sig«l
();

4563 
ASSERT_OR_FAIL
(
s
.
avaûabÀAµrox
() == 1);

4564 
ASSERT_OR_FAIL
(
s
.
åyWaôM™y
(3) == 1);

4565 
ASSERT_OR_FAIL
(
s
.
avaûabÀAµrox
() == 0);

4567 
	gs
.
sig«l
(10);

4568 
ASSERT_OR_FAIL
(
s
.
avaûabÀAµrox
() == 10);

4569 
ASSERT_OR_FAIL
(
s
.
åyWaôM™y
(100) == 10);

4570 
ASSERT_OR_FAIL
(
s
.
avaûabÀAµrox
() == 0);

4572 
	gs
.
sig«l
(10);

4573 
ASSERT_OR_FAIL
(
s
.
avaûabÀAµrox
() == 10);

4574 
ASSERT_OR_FAIL
(
s
.
åyWaôM™y
(5) == 5);

4575 
ASSERT_OR_FAIL
(
s
.
avaûabÀAµrox
() == 5);

4577 
ASSERT_OR_FAIL
(
s
.
åyWaô
());

4578 
ASSERT_OR_FAIL
(
s
.
avaûabÀAµrox
() == 4);

4580 
ASSERT_OR_FAIL
(
s
.
åyWaô
());

4581 
ASSERT_OR_FAIL
(
s
.
avaûabÀAµrox
() == 3);

4583  
	gåue
;

4586 
	gTe°Li°Iãm
 : 
c‹ólgos
::
Li°Iãm


4588 
vÆue
;

4590 
Te°Li°Iãm
()

4591 : 
vÆue
(0)

4593 
˘‹Cou¡
().
„tch_add
(1, 
°d
::
mem‹y_‹dî_ªœxed
);

4596 
ex∂icô
 
Te°Li°Iãm
(
vÆue
)

4597 : 
vÆue
(value)

4599 
˘‹Cou¡
().
„tch_add
(1, 
°d
::
mem‹y_‹dî_ªœxed
);

4602 ~
Te°Li°Iãm
()

4604 
dt‹Cou¡
().
„tch_add
(1, 
°d
::
mem‹y_‹dî_ªœxed
);

4607 
ölöe
 
Te°Li°Iãm
* 
¥ev
(
°d
::
mem‹y_‹dî
 
‹dî
 = std::
mem‹y_‹dî_ªœxed
) const

4609  
°©ic_ˇ°
<
Te°Li°Iãm
*>(
c⁄cuºítLi°Pªv
.
lﬂd
(
‹dî
));

4613 
ölöe
 
ª£t
()

4615 
˘‹Cou¡
().
°‹e
(0, 
°d
::
mem‹y_‹dî_ªœxed
);

4616 
dt‹Cou¡
().
°‹e
(0, 
°d
::
mem‹y_‹dî_ªœxed
);

4619 
ölöe
 
size_t
 
c⁄°ru˘ed
(Ë{  
˘‹Cou¡
().
lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
); }

4620 
ölöe
 
size_t
 
de°ru˘ed
(Ë{  
dt‹Cou¡
().
lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
); }

4622 
	g¥iv©e
:

4623 
ölöe
 
°d
::
©omic
<
size_t
>& 
˘‹Cou¡
(Ë{ °d::©omic<size_t> 
cou¡
(0);  
	gcou¡
; }

4624 
ölöe
 
	g°d
::
©omic
<
size_t
>& 
dt‹Cou¡
(Ë{ 
°d
::©omic<size_t> 
cou¡
(0);  
	gcou¡
; }

4627 
boﬁ
 
c‹e_add_⁄ly_li°
()

4629 autÿ
	gde°royLi°
 = [](
c‹ólgos
::
C⁄cuºítAddO∆yLi°
<
Te°Li°Iãm
>& 
li°
) {

4630 
size_t
 
cou¡
 = 0;

4632 autÿ
	gèû
 = 
li°
.
èû
();

4633 
	gèû
 !
nuŒ±r
) {

4634 autÿ
√xt
 = 
èû
->
¥ev
();

4635 
dñëe
 
	gèû
;

4636 ++
	gcou¡
;

4637 
	gèû
 = 
√xt
;

4639  
	gcou¡
;

4643 
	gc‹ólgos
::
C⁄cuºítAddO∆yLi°
<
Te°Li°Iãm
> 
li°
;

4644 
ASSERT_OR_FAIL
(
li°
.
èû
(Ë=
nuŒ±r
);

4646 
ASSERT_OR_FAIL
(
de°royLi°
(
li°
) == 0);

4650 
	gc‹ólgos
::
C⁄cuºítAddO∆yLi°
<
Te°Li°Iãm
> 
li°
;

4651 
	gi
 = 0; i != 1000; ++i) {

4652 
	gli°
.
add
(
√w
 
Te°Li°Iãm
(
i
));

4654 
	gi
 = 999;

4655 autÿ
	gèû
 = 
li°
.
èû
();Åaû !
nuŒ±r
;Åaû =Åaû->
¥ev
()) {

4656 
ASSERT_OR_FAIL
(
i
 =
èû
->
vÆue
);

4657 --
	gi
;

4659 
ASSERT_OR_FAIL
(
i
 == -1);

4661 
ASSERT_OR_FAIL
(
de°royLi°
(
li°
) == 1000);

4664 
	gª≥©s
 = 0;Ñepeats != 10; ++repeats) {

4665 
	gc‹ólgos
::
C⁄cuºítAddO∆yLi°
<
Te°Li°Iãm
> 
li°
;

4666 
	g°d
::
ve˘‹
<
Sim∂eThªad
> 
thªads
(8);

4667 
size_t
 
	gtid
 = 0;Åid !
thªads
.
size
(); ++tid) {

4668 
	gthªads
[
tid
] = 
Sim∂eThªad
([&](
size_t
Åid) {

4669 
i
 = 0; i != 1000; ++i) {

4670 
li°
.
add
(
√w
 
Te°Li°Iãm
(()((
tid
 << 16Ë| 
i
)));

4672 }, 
tid
);

4674 
size_t
 
	gtid
 = 0;Åid !
thªads
.
size
(); ++tid) {

4675 
	gthªads
[
tid
].
joö
();

4678 
	g°d
::
ve˘‹
<> 
¥evIãms
(
thªads
.
size
());

4679 
size_t
 
	gi
 = 0; i !
¥evIãms
.
size
(); ++i) {

4680 
	g¥evIãms
[
i
] = 1000;

4682 autÿ
	gèû
 = 
li°
.
èû
();Åaû !
nuŒ±r
;Åaû =Åaû->
¥ev
()) {

4683 autÿ
tid
 = 
èû
->
vÆue
 >> 16;

4684 autÿ
	gi
 = 
èû
->
vÆue
 & ((1 << 16) - 1);

4685 
ASSERT_OR_FAIL
(
¥evIãms
[
tid
] =
i
 + 1);

4686 
	g¥evIãms
[
tid
] = 
i
;

4689 
ASSERT_OR_FAIL
(
de°royLi°
(
li°
Ë=1000 * 
thªads
.
size
());

4692  
	gåue
;

4695 
boﬁ
 
c‹e_thªad_loˇl
()

4697 
	gTe°Li°Iãm
::
ª£t
();

4699 
	gc‹ólgos
::
ThªadLoˇl
<
Te°Li°Iãm
> 
loˇl
(4);

4701 
ASSERT_OR_FAIL
(
Te°Li°Iãm
::
c⁄°ru˘ed
() == 0);

4702 
ASSERT_OR_FAIL
(
Te°Li°Iãm
::
de°ru˘ed
() == 0);

4704 
	gTe°Li°Iãm
::
ª£t
();

4706 
	gc‹ólgos
::
ThªadLoˇl
<
Te°Li°Iãm
> 
loˇl
(4);

4707 
	gloˇl
.
gë_‹_¸óã
();

4709 
ASSERT_OR_FAIL
(
Te°Li°Iãm
::
c⁄°ru˘ed
() == 1);

4710 
ASSERT_OR_FAIL
(
Te°Li°Iãm
::
de°ru˘ed
() == 1);

4712 
	gTe°Li°Iãm
::
ª£t
();

4714 
	gc‹ólgos
::
ThªadLoˇl
<
Te°Li°Iãm
> 
loˇl
(4);

4715 autÿ
	gôem
 = 
loˇl
.
gë_‹_¸óã
();

4716 
	gôem
->
	gvÆue
 = 7;

4717 
	gôem
 = 
loˇl
.
gë_‹_¸óã
();

4718 
ASSERT_OR_FAIL
(
ôem
->
vÆue
 == 7);

4720 
ASSERT_OR_FAIL
(
Te°Li°Iãm
::
c⁄°ru˘ed
() == 1);

4721 
ASSERT_OR_FAIL
(
Te°Li°Iãm
::
de°ru˘ed
() == 1);

4724 
size_t
 
	göôülSize
 = 1; initialSize <= 4; initialSize <<= 1) {

4725 
ªps
 = 0; 
	gªps
 != 20; ++reps) {

4726 
	gTe°Li°Iãm
::
ª£t
();

4728 
	gc‹ólgos
::
ThªadLoˇl
<
Te°Li°Iãm
> 
loˇl
(
öôülSize
);

4729 
	g°d
::
ve˘‹
<
Sim∂eThªad
> 
thªads
(5 * 
öôülSize
);

4730 
	g°d
::
ve˘‹
<
boﬁ
> 
Áûed
(
thªads
.
size
());

4731 
	g°d
::
©omic
<
°d
::
size_t
> 
d⁄e
(0);

4732 
size_t
 
	gtid
 = 0;Åid !
thªads
.
size
(); ++tid) {

4733 
	gthªads
[
tid
] = 
Sim∂eThªad
([&](
size_t
Åid) {

4734 
Áûed
[
tid
] = 
Ál£
;

4735 autÿ
ôem
 = 
loˇl
.
gë_‹_¸óã
();

4736 
ôem
->
vÆue
 = ()
tid
;

4737 
i
 = 0; i != 1024; ++i) {

4738 
ôem
 = 
loˇl
.
gë_‹_¸óã
();

4739 i‡(
ôem
->
vÆue
 !()
tid
) {

4740 
Áûed
[
tid
] = 
åue
;

4743 
d⁄e
.
„tch_add
(1, 
°d
::
mem‹y_‹dî_£q_c°
);

4744 
d⁄e
.
lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
Ë!
thªads
.
size
()) {

4745 
moodyˇmñ
::
¶ìp
(1);

4747 }, 
tid
);

4749 
size_t
 
	gtid
 = 0;Åid !
thªads
.
size
(); ++tid) {

4750 
	gthªads
[
tid
].
joö
();

4751 
ASSERT_OR_FAIL
(!
Áûed
[
tid
]);

4753 
ASSERT_OR_FAIL
(
Te°Li°Iãm
::
c⁄°ru˘ed
(Ë=5 * 
öôülSize
);

4755 
ASSERT_OR_FAIL
(
Te°Li°Iãm
::
de°ru˘ed
(Ë=5 * 
öôülSize
);

4759  
	gåue
;

4762 
	gTe°Node
 : 
c‹ólgos
::
FªeLi°Node
<
Te°Node
>

4764 
vÆue
;

4765 
Te°Node
() { }

4766 
ex∂icô
 
Te°Node
(
vÆue
) : value(value) { }

4769 
boﬁ
 
c‹e_‰ì_li°
()

4773 
	gc‹ólgos
::
FªeLi°
<
Te°Node
> 
‰ìLi°
;

4774 
ASSERT_OR_FAIL
(
‰ìLi°
.
åy_gë
(Ë=
nuŒ±r
);

4776 
	g‰ìLi°
.
add
(
√w
 
Te°Node
(7));

4777 
Te°Node
* 
	gnode
 = 
‰ìLi°
.
åy_gë
();

4778 
ASSERT_OR_FAIL
(
node
 !
nuŒ±r
);

4779 
ASSERT_OR_FAIL
(
node
->
vÆue
 == 7);

4780 
ASSERT_OR_FAIL
(
‰ìLi°
.
åy_gë
(Ë=
nuŒ±r
);

4782 
	g‰ìLi°
.
add
(
node
);

4783 
	gnode
 = 
‰ìLi°
.
åy_gë
();

4784 
ASSERT_OR_FAIL
(
node
 !
nuŒ±r
);

4785 
ASSERT_OR_FAIL
(
node
->
vÆue
 == 7);

4786 
ASSERT_OR_FAIL
(
‰ìLi°
.
åy_gë
(Ë=
nuŒ±r
);

4787 
dñëe
 
	gnode
;

4792 
	gªp
 = 0;Ñep != 10; ++rep) {

4793 
	gc‹ólgos
::
FªeLi°
<
Te°Node
> 
‰ìLi°
;

4794 
	g°d
::
ve˘‹
<
Sim∂eThªad
> 
thªads
(
ªp
 < 8 ? 4 : 16);

4795 
	g°d
::
ve˘‹
<
boﬁ
> 
Áûed
(
thªads
.
size
());

4796 
	g°d
::
ve˘‹
<
Te°Node
> 
öôülNodes
(
thªads
.
size
());

4797 c⁄° 
	gOP_COUNT
 = 2048;

4798 
size_t
 
	gtid
 = 0;Åid !
thªads
.
size
(); ++tid) {

4799 
	gthªads
[
tid
] = 
Sim∂eThªad
([&](
size_t
Åid) {

4800 
°d
::
ve˘‹
<
boﬁ
> 
£íVÆues
(
thªads
.
size
(Ë* 
OP_COUNT
, 
Ál£
);

4801 
Áûed
[
tid
] = 
Ál£
;

4802 
Te°Node
* 
node
 = &
öôülNodes
[
tid
];

4803 
node
->
vÆue
 = (()
tid
 << 20) | 1;

4804 
‰ìLi°
.
add
(
node
);

4805 
i
 = 1; i !
OP_COUNT
 - 1; ++i) {

4806 
node
 = 
‰ìLi°
.
åy_gë
();

4807 i‡(
node
 !
nuŒ±r
) {

4808 autÿ
£í
 = 
£íVÆues
.
begö
(Ë+ ((
node
->
vÆue
 >> 20Ë* 
OP_COUNT
 + (node->value & 0xFFFFF));

4809 i‡(*
£í
) {

4810 
Áûed
[
tid
] = 
åue
;

4812 *
£í
 = 
åue
;

4814 
node
->
vÆue
 = (()
tid
 << 20Ë| (
i
 + 1);

4815 
‰ìLi°
.
add
(
node
);

4818 }, 
tid
);

4820 
size_t
 
	gtid
 = 0;Åid !
thªads
.
size
(); ++tid) {

4821 
	gthªads
[
tid
].
joö
();

4822 
ASSERT_OR_FAIL
(!
Áûed
[
tid
]);

4824 
size_t
 
	gtid
 = 0;Åid !
thªads
.
size
(); ++tid) {

4825 autÿ
	gnode
 = 
‰ìLi°
.
åy_gë
();

4826 
ASSERT_OR_FAIL
(
node
 !
nuŒ±r
);

4827 
ASSERT_OR_FAIL
(
node
->
vÆue
 != -1);

4828 
	gnode
->
	gvÆue
 = -1;

4830 autÿ
	gnode
 = 
‰ìLi°
.
åy_gë
();

4831 
ASSERT_OR_FAIL
(
node
 =
nuŒ±r
);

4835  
	gåue
;

4838 
boﬁ
 
c‹e_•mc_hash
()

4841 
	gªp
 = 0;Ñep != 20; ++rep) {

4842 
	gc‹ólgos
::
SPMCSequítülHashM≠
<> 
hash
(
ªp
 < 10 ? 2 : 4);

4843 
	g°d
::
ve˘‹
<
Sim∂eThªad
> 
thªads
(
ªp
 < 12 ? 4 : 16);

4844 
	g°d
::
ve˘‹
<
boﬁ
> 
Áûed
(
thªads
.
size
());

4846 c⁄° 
	gMAX_ENTRIES
 = 4096;

4847 
	g°d
::
ve˘‹
<> 
vÆues
(
MAX_ENTRIES
);

4848 
	g°d
::
¨øy
<
°d
::
©omic
<>, 
	gMAX_ENTRIES
> 
	gu£Cou¡s
;

4849 
	g°d
::
¨øy
<
°d
::
©omic
<
boﬁ
>, 
	gMAX_ENTRIES
> 
	gªmoved
;

4851 
	g°d
::
size_t
 
i
 = 0; 
	gi
 !
u£Cou¡s
.
size
(); ++i) {

4852 
	gu£Cou¡s
[
i
].
°‹e
(0, 
°d
::
mem‹y_‹dî_ªœxed
);

4853 
	gªmoved
[
i
].
°‹e
(
Ál£
, 
°d
::
mem‹y_‹dî_ªœxed
);

4856 
size_t
 
	gtid
 = 0;Åid !
thªads
.
size
(); ++tid) {

4857 
	gthªads
[
tid
] = 
Sim∂eThªad
([&](
size_t
Åid) {

4858 
Áûed
[
tid
] = 
Ál£
;

4860 i‡(
tid
 == 0) {

4862 
i
 = 0; i !
MAX_ENTRIES
; ++i) {

4863 
vÆues
[
i
] = i;

4864 
hash
.
ö£π
(
i
, &
vÆues
[i]);

4865 
u£Cou¡s
[
i
].
°‹e
(()
thªads
.
size
(Ë/ 2, 
°d
::
mem‹y_‹dî_ªÀa£
);

4870 
i
 = 
MAX_ENTRIES
 * 2; i != 0; --i) {

4871 
u£Cou¡
 = -1;

4872 i‡(
i
 < 
MAX_ENTRIES
) {

4873 
u£Cou¡
 = 
u£Cou¡s
[
i
].
„tch_add
(-1, 
°d
::
mem‹y_‹dî_acquúe
);

4876 * 
vÆ
;

4877 i‡(
u£Cou¡
 > 0) {

4878 
vÆ
 = 
hash
.
föd
(
i
);

4879 
boﬁ
 
isRemoved
 = 
ªmoved
[
i
].
lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
);

4880 
as£π
(
vÆ
 =
nuŒ±r
 || *val == *val);

4884 autÿ
cuºítU£Cou¡
 = 
u£Cou¡s
[
i
].
„tch_add
(0, 
°d
::
mem‹y_‹dî_ªÀa£
);

4885 i‡((
cuºítU£Cou¡
 > 0 || (cuºítU£Cou¡ =0 && 
u£Cou¡
 =1)Ë&& (
vÆ
 =
nuŒ±r
 || *vÆ !
i
 || 
isRemoved
)) {

4886 
Áûed
[
tid
] = 
åue
;

4889 i‡(
u£Cou¡
 == 1) {

4890 
vÆ
 = 
hash
.
ªmove
(
i
);

4891 i‡(
vÆ
 =
nuŒ±r
 || *vÆ !
i
 || 
ªmoved
[i].
lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
)) {

4892 
Áûed
[
tid
] = 
åue
;

4894 
ªmoved
[
i
].
°‹e
(
åue
, 
°d
::
mem‹y_‹dî_ªÀa£
);

4898 }, 
tid
);

4900 
size_t
 
	gtid
 = 0;Åid !
thªads
.
size
(); ++tid) {

4901 
	gthªads
[
tid
].
joö
();

4902 
ASSERT_OR_FAIL
(!
Áûed
[
tid
]);

4904 
	gi
 = 0; i !
MAX_ENTRIES
; ++i) {

4905 autÿ
	gvÆ
 = 
hash
.
föd
(
i
);

4906 i‡(
	gvÆ
 !
nuŒ±r
) {

4907 
ASSERT_OR_FAIL
(&
vÆues
[
i
] =
vÆ
 && *vÆ =ò&& !
ªmoved
[i].
lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
));

4910 
ASSERT_OR_FAIL
(
ªmoved
[
i
].
lﬂd
(
°d
::
mem‹y_‹dî_ªœxed
));

4912 autÿ
	gªmovedVÆ
 = 
hash
.
ªmove
(
i
);

4913 
ASSERT_OR_FAIL
(
ªmovedVÆ
 =
vÆ
);

4915 
	gi
 = 0; i !
MAX_ENTRIES
; ++i) {

4916 
ASSERT_OR_FAIL
(
hash
.
föd
(
i
Ë=
nuŒ±r
);

4917 
ASSERT_OR_FAIL
(
hash
.
ªmove
(
i
Ë=
nuŒ±r
);

4919 
ASSERT_OR_FAIL
(
hash
.
föd
(
MAX_ENTRIES
Ë=
nuŒ±r
);

4920 
ASSERT_OR_FAIL
(
hash
.
ªmove
(
MAX_ENTRIES
Ë=
nuŒ±r
);

4923  
	gåue
;

4926 
boﬁ
 
ex∂icô_°rögs_thªaded
()

4928 
	g°d
::
ve˘‹
<
Sim∂eThªad
> 
thªads
(8);

4929 
	gC⁄cuºítQueue
<
	g°d
::
°rög
, 
	gMÆlocTøckögTøôs
> 
q
(1024 * 1024);

4931 
size_t
 
	gtid
 = 0;Åid !
thªads
.
size
(); ++tid) {

4932 
	gthªads
[
tid
] = 
Sim∂eThªad
([&](
size_t
Åid) {

4933 c⁄° 
size_t
 
ITERATIONS
 = 100 * 1024;

4934 i‡(
tid
 % 2 == 0) {

4936 
Produ˚rTokí
 
t
(
q
);

4937 
size_t
 
i
 = 0; i !
ITERATIONS
; ++i) {

4938 
q
.
íqueue
(
t
, 
°d
::
°rög
("b™™a", 
i
 % 6));

4943 
°d
::
°rög
 
ôem
;

4944 
size_t
 
i
 = 0; i !
ITERATIONS
 / 2; ++i) {

4945 
q
.
åy_dequeue
(
ôem
);

4948 }, 
tid
);

4950 
size_t
 
	gtid
 = 0;Åid !
thªads
.
size
(); ++tid) {

4951 
	gthªads
[
tid
].
joö
();

4954  
	gåue
;

4957 
boﬁ
 
œrge_åaôs
()

4959 
	uEÀm
 { 
uöt32_t
 
	gx
; 
	gdummy
[156]; };

4961 
	gC⁄cuºítQueue
<
	gEÀm
, 
	gL¨geTøôs
> 
q
(10000, 0, 48);

4962 
	g°d
::
ve˘‹
<
Sim∂eThªad
> 
thªads
(48);

4963 
size_t
 
	gtid
 = 0;Åid !
thªads
.
size
(); ++tid) {

4964 
	gthªads
[
tid
] = 
Sim∂eThªad
([&](
size_t
Åid) {

4965 c⁄° 
size_t
 
ELEMENTS
 = 5000;

4966 i‡(
tid
 != 0) {

4968 
uöt32_t
 
i
 = 0; i !
ELEMENTS
; ++i)

4969 
q
.
åy_íqueue
(
EÀm
 { ((
uöt32_t
)
tid
 << 16Ë| 
i
 });

4973 
EÀm
 
ôem
[256];

4974 
size_t
 
i
 = 0; i !
ELEMENTS
 * 200; ++i)

4975 
q
.
åy_dequeue_bulk
(
ôem
, (item) / (item[0]));

4977 }, 
tid
);

4979 
size_t
 
	gtid
 = 0;Åid !
thªads
.
size
(); ++tid) {

4980 
	gthªads
[
tid
].
joö
();

4983  
	gåue
;

4990 
	$¥ötTe°s
(
C⁄cuºítQueueTe°s
 c⁄°& 
ã°s
)

4992 
°d
::
	`¥ötf
(" SupportedÅestsáre:\n");

4994 
°d
::
ve˘‹
<°d::
°rög
> 
«mes
;

4995 
ã°s
.
	`gëAŒTe°Names
(
«mes
);

4996 autÿ
ô
 = 
«mes
.
	`cbegö
(); ià!«mes.
	`˚nd
(); ++it) {

4997 
°d
::
	`¥ötf
(" %s\n", 
ô
->
	`c_°r
());

4999 
	}
}

5003 #i‡!
deföed
(
TARGET_OS_IPHONE
)

5004 
	$maö
(
¨gc
, ** 
¨gv
)

5006 
boﬁ
 
dißbÀProm±
 = 
Ál£
;

5007 
ôî©i⁄s
 = 8;

5008 
°d
::
ve˘‹
<°d::
°rög
> 
£À˘edTe°s
;

5011 
°d
::
	`£tvbuf
(
°dout
, 
nuŒ±r
, 
_IONBF
, 0);

5014 
°d
::
°rög
 
¥ogName
 = 
¨gv
[0];

5015 autÿ
¶ash
 = 
¥ogName
.
	`föd_œ°_of
("/\\");

5016 i‡(
¶ash
 !
°d
::
°rög
::
≈os
) {

5017 
¥ogName
 =ÖrogName.
	`sub°r
(
¶ash
 + 1);

5020 
C⁄cuºítQueueTe°s
 
ã°s
;

5023 i‡(
¨gc
 > 1) {

5024 
boﬁ
 
¥ötHñp
 = 
Ál£
;

5025 
boﬁ
 
¥öãdTe°s
 = 
Ál£
;

5026 
boﬁ
 
îr‹
 = 
Ál£
;

5027 
i
 = 1; i < 
¨gc
; ++i) {

5028 i‡(
°d
::
	`°rcmp
(
¨gv
[
i
], "--help") == 0) {

5029 
¥ötHñp
 = 
åue
;

5031 i‡(
°d
::
	`°rcmp
(
¨gv
[
i
], "--disable-prompt") == 0) {

5032 
dißbÀProm±
 = 
åue
;

5034 i‡(
°d
::
	`°rcmp
(
¨gv
[
i
], "--run") == 0) {

5035 i‡(
i
 + 1 =
¨gc
 || 
¨gv
[i + 1][0] == '-') {

5036 
°d
::
	`¥ötf
("ExpectedÅestÇameárgument for --run option.\n");

5037 i‡(!
¥öãdTe°s
) {

5038 
	`¥ötTe°s
(
ã°s
);

5039 
¥öãdTe°s
 = 
åue
;

5041 
îr‹
 = 
åue
;

5045 i‡(!
ã°s
.
	`vÆid©eTe°Name
(
¨gv
[++
i
])) {

5046 
°d
::
	`¥ötf
("UƒecognizedÅe° '%s'.\n", 
¨gv
[
i
]);

5047 i‡(!
¥öãdTe°s
) {

5048 
	`¥ötTe°s
(
ã°s
);

5049 
¥öãdTe°s
 = 
åue
;

5051 
îr‹
 = 
åue
;

5055 
£À˘edTe°s
.
	`push_back
(
¨gv
[
i
]);

5057 i‡(
°d
::
	`°rcmp
(
¨gv
[
i
], "--iterations") == 0) {

5058 i‡(
i
 + 1 =
¨gc
 || 
¨gv
[i + 1][0] == '-') {

5059 
°d
::
	`¥ötf
("Expected iteration countárgument for --iterations option.\n");

5060 
îr‹
 = 
åue
;

5064 
ôî©i⁄s
 = 
°©ic_ˇ°
<>(
°d
::
	`©oi
(
¨gv
[++
i
]));

5067 
°d
::
	`¥ötf
("Uƒecognized o±i⁄ '%s'.\n", 
¨gv
[
i
]);

5068 
îr‹
 = 
åue
;

5072 i‡(
îr‹
 || 
¥ötHñp
) {

5073 i‡(
îr‹
) {

5074 
°d
::
	`¥ötf
("\n");

5076 
°d
::
	`¥ötf
("%s\¿ Des¸ùti⁄: Run†unôÅe°†f‹ moodyˇmñ::C⁄cuºítQueue\n", 
¥ogName
.
	`c_°r
());

5077 
°d
::
	`¥ötf
(" --help PrintsÅhis help blurb\n");

5078 
°d
::
	`¥ötf
(" --runÅest Runs onlyÅhe specifiedÅest(s)\n");

5079 
°d
::
	`¥ötf
(" --iterations N Do N iterations ofÉachÅest\n");

5080 
°d
::
	`¥ötf
(" --disable-prompt DisablesÖrompt beforeÉxit whenÅheÅests finish\n");

5081  
îr‹
 ? -1 : 0;

5085 
exôCode
 = 0;

5087 
boﬁ
 
ªsu…
;

5088 i‡(
£À˘edTe°s
.
	`size
() > 0) {

5089 
°d
::
	`¥ötf
("Ru¬ög %d iãøti⁄%†o‡£À˘ed unôÅe°%†f‹ moodyˇmñ::C⁄cuºítQueue.\n\n", 
ôî©i⁄s
, iãøti⁄†=1 ? "" : "s", 
£À˘edTe°s
.
	`size
() == 1 ? "" : "s");

5090 
ªsu…
 = 
ã°s
.
	`run
(
£À˘edTe°s
, 
ôî©i⁄s
);

5093 
°d
::
	`¥ötf
("Ru¬ög %d iãøti⁄%†o‡Æ»unôÅe°†f‹ moodyˇmñ::C⁄cuºítQueue.\n(Ru¿%†--hñ∞f‹ othî o±i⁄s.)\n\n", 
ôî©i⁄s
, iãøti⁄†=1 ? "" : "s", 
¥ogName
.
	`c_°r
());

5094 
ªsu…
 = 
ã°s
.
	`run
(
ôî©i⁄s
);

5097 i‡(
ªsu…
) {

5098 
°d
::
	`¥ötf
("AŒ %°e°†∑s£d.\n", (
£À˘edTe°s
.
	`size
() > 0 ? "selected " : ""));

5101 
°d
::
	`¥ötf
("Test(s) failed!\n");

5102 
exôCode
 = 2;

5105 i‡(!
dißbÀProm±
) {

5106 
°d
::
	`¥ötf
("Press ENTERÅoÉxit.\n");

5107 
	`gëch¨
();

5109  
exôCode
;

5110 
	}
}

5114 
boﬁ
 
	$runAŒTe°s
() {

5115 
ôî©i⁄s
 = 8;

5116 
C⁄cuºítQueueTe°s
 
ã°s
;

5117  
ã°s
.
	`run
(
ôî©i⁄s
);

5118 
	}
}

	@viper/kvs.h

1 
	~"../ã°/ã°.h
"

3 
	~"vùî.hµ
"

5 
	sByã_8


7 
	md©a
[8];

9 
	sByã_100


11 
	md©a
[100];

13 
	sByã_200


15 
	md©a
[200];

18 
	gãm∂©e
 <
ty≥«me
 
	gK
,Åy≥«mê
	gV
>

19 ˛as†
	cKVS_vùî
 : 
public
 
KVS


21 
public
:

30 
°d
::
unique_±r
<
vùî
::
Vùî
<
K
, 
	mV
>> 
	mvùî_db
;

38 
vútuÆ
 
	$öô
(
num
,
key
,
vÆue
,
ªc‹d
)

40 
KVS
::
	`öô
(
num
,
key
,
vÆue
,
ªc‹d
);

41 
uöt64_t
 
öôül_size
 = 1024*1024*1024;

42 
öôül_size
*=10;

43 
vùî_db
 = 
vùî
::
Vùî
<
K
, 
V
>::
	`¸óã
("/m¡/pmem0/vùî", 
öôül_size
);

47 
	`¥ötf
("kvs_viper init\n");

56 
vútuÆ
 
	$ö£π_›
(* 
key
,* 
vÆue
)

59 
	}
}

60 
vútuÆ
 
	$ªad_›
(* 
key
,* 
ªsu…
)

63 
	}
}

64 
vútuÆ
 
	$upd©e_›
(* 
key
,* 
vÆue
)

67 
	}
}

68 
vútuÆ
 
	$dñëe_›
(* 
key
)

70 
	}
}

71 
vútuÆ
 
	$sˇn_›
(* 
key
,
˙t
,** 
sˇn_ªsu…
)

73 
	}
}

75 
vútuÆ
 
	$˛ón
()

80 
	}
}

83 
vútuÆ
 
	$run
(
Te°Quîy
* 
tqa
, 
›s
)

86 autÿ
v_˛õ¡
 = 
vùî_db
->
	`gë_˛õ¡
();

87 
V
 
ªsu…
;

88 
i
;

89 
i
=0;i<
›s
;i++)

100 i‡(
tqa
[
i
].
›
 == 1)

101 
v_˛õ¡
.
	`put
(*((
K
*)
tqa
[
i
].
key
),*((
V
*Èqa[i].
vÆue
));

102 i‡(
tqa
[
i
].
›
 == 2)

103 
v_˛õ¡
.
	`gë
(*((
K
*)
tqa
[
i
].
key
),&
ªsu…
);

104 i‡(
tqa
[
i
].
›
 == 3)

105 
v_˛õ¡
.
	`put
(*((
K
*)
tqa
[
i
].
key
),*((
V
*Èqa[i].
vÆue
));

118 
	}
}

	@/usr/include/arpa/inet.h

18 #i‚de‡
_ARPA_INET_H


19 
	#_ARPA_INET_H
 1

	)

21 
	~<„©uªs.h
>

22 
	~<√töë/ö.h
>

25 #i‚de‡
__sockÀn_t_deföed


26 
__sockÀn_t
 
	tsockÀn_t
;

27 
	#__sockÀn_t_deföed


	)

30 
__BEGIN_DECLS


34 
ö_addr_t
 
	$öë_addr
 (c⁄° *
__˝
Ë
__THROW
;

37 
ö_addr_t
 
	$öë_ aof
 (
ö_addr
 
__ö
Ë
__THROW
;

41 
ö_addr
 
	$öë_makóddr
 (
ö_addr_t
 
__√t
, in_addr_à
__ho°
)

42 
__THROW
;

45 
ö_addr_t
 
	$öë_√tof
 (
ö_addr
 
__ö
Ë
__THROW
;

49 
ö_addr_t
 
	$öë_√tw‹k
 (c⁄° *
__˝
Ë
__THROW
;

53 *
	$öë_¡ﬂ
 (
ö_addr
 
__ö
Ë
__THROW
;

58 
	$öë_±⁄
 (
__af
, c⁄° *
__ª°ri˘
 
__˝
,

59 *
__ª°ri˘
 
__buf
Ë
__THROW
;

64 c⁄° *
	$öë_¡›
 (
__af
, c⁄° *
__ª°ri˘
 
__˝
,

65 *
__ª°ri˘
 
__buf
, 
sockÀn_t
 
__Àn
)

66 
__THROW
;

70 #ifde‡
__USE_MISC


73 
	$öë_©⁄
 (c⁄° *
__˝
, 
ö_addr
 *
__öp
Ë
__THROW
;

77 *
	$öë_√è
 (
ö_addr_t
 
__√t
, *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

82 *
	$öë_√t_¡›
 (
__af
, c⁄° *
__˝
, 
__bôs
,

83 *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

88 
	$öë_√t_±⁄
 (
__af
, c⁄° *
__˝
,

89 *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

94 
	$öë_nßp_addr
 (c⁄° *
__˝
,

95 *
__buf
, 
__Àn
Ë
__THROW
;

99 *
	$öë_nßp_¡ﬂ
 (
__Àn
, c⁄° *
__˝
,

100 *
__buf
Ë
__THROW
;

103 
__END_DECLS


	@/usr/include/assert.h

22 #ifdef 
_ASSERT_H


24 #unde‡
_ASSERT_H


25 #unde‡
as£π


26 #unde‡
__ASSERT_VOID_CAST


28 #ifdef 
__USE_GNU


29 #unde‡
as£π_≥º‹


34 
	#_ASSERT_H
 1

	)

35 
	~<„©uªs.h
>

37 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,95)

38 
	#__ASSERT_VOID_CAST
 
°©ic_ˇ°
<>

	)

40 
	#__ASSERT_VOID_CAST
 ()

	)

48 #ifdef 
NDEBUG


50 
	#as£π
(
ex¥
Ë(
	`__ASSERT_VOID_CAST
 (0))

	)

58 #ifdef 
__USE_GNU


59 
	#as£π_≥º‹
(
î∫um
Ë(
	`__ASSERT_VOID_CAST
 (0))

	)

64 #i‚de‡
_ASSERT_H_DECLS


65 
	#_ASSERT_H_DECLS


	)

66 
__BEGIN_DECLS


69 
	$__as£π_Áû
 (c⁄° *
__as£πi⁄
, c⁄° *
__fûe
,

70 
__löe
, c⁄° *
__fun˘i⁄
)

71 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

74 
	$__as£π_≥º‹_Áû
 (
__î∫um
, c⁄° *
__fûe
,

75 
__löe
, c⁄° *
__fun˘i⁄
)

76 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

81 
	$__as£π
 (c⁄° *
__as£πi⁄
, c⁄° *
__fûe
, 
__löe
)

82 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

85 
__END_DECLS


91 #i‡
deföed
 
__˝lu•lus


92 
	#as£π
(
ex¥
) \

93 (
°©ic_ˇ°
 <
boﬁ
> (
ex¥
) \

95 : 
	`__as£π_Áû
 (#ex¥, 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
))

	)

96 #ñi‡!
deföed
 
__GNUC__
 || deföed 
__STRICT_ANSI__


97 
	#as£π
(
ex¥
) \

98 ((
ex¥
) \

99 ? 
	`__ASSERT_VOID_CAST
 (0) \

100 : 
	`__as£π_Áû
 (#ex¥, 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
))

	)

107 
	#as£π
(
ex¥
) \

108 ((Ë ((
ex¥
Ë? 1 : 0), 
	`__exãnsi⁄__
 ({ \

109 i‡(
ex¥
) \

112 
	`__as£π_Áû
 (#ex¥, 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
); \

113 
	}
}))

	)

116 #ifdef 
__USE_GNU


117 
	#as£π_≥º‹
(
î∫um
) \

118 (!(
î∫um
) \

119 ? 
	`__ASSERT_VOID_CAST
 (0) \

120 : 
	`__as£π_≥º‹_Áû
 ((
î∫um
), 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
))

	)

128 #i‡
deföed
 
__˝lu•lus
 ? 
__GNUC_PREREQ
 (2, 6) : __GNUC_PREREQ (2, 4)

129 
	#__ASSERT_FUNCTION
 
__exãnsi⁄__
 
__PRETTY_FUNCTION__


	)

131 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

132 
	#__ASSERT_FUNCTION
 
__func__


	)

134 
	#__ASSERT_FUNCTION
 ((c⁄° *Ë0)

	)

141 #i‡
deföed
 
__USE_ISOC11
 && !deföed 
__˝lu•lus


142 #unde‡
°©ic_as£π


143 
	#°©ic_as£π
 
_Sètic_as£π


	)

	@/usr/include/dlfcn.h

19 #i‚def 
_DLFCN_H


20 
	#_DLFCN_H
 1

	)

22 
	~<„©uªs.h
>

23 
	#__√ed_size_t


	)

24 
	~<°ddef.h
>

27 
	~<bôs/dlf˙.h
>

30 #ifde‡
__USE_GNU


35 
	#RTLD_NEXT
 ((*Ë-1l)

	)

40 
	#RTLD_DEFAULT
 ((*Ë0)

	)

44 
	tLmid_t
;

47 
	#LM_ID_BASE
 0

	)

48 
	#LM_ID_NEWLM
 -1

	)

52 
__BEGIN_DECLS


56 *
	$dl›í
 (c⁄° *
__fûe
, 
__mode
Ë
__THROWNL
;

60 
	$dl˛o£
 (*
__h™dÀ
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1));

64 *
	$dlsym
 (*
__ª°ri˘
 
__h™dÀ
,

65 c⁄° *
__ª°ri˘
 
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

67 #ifde‡
__USE_GNU


69 *
	$dlm›í
 (
Lmid_t
 
__nsid
, c⁄° *
__fûe
, 
__mode
Ë
__THROWNL
;

73 *
	$dlvsym
 (*
__ª°ri˘
 
__h™dÀ
,

74 c⁄° *
__ª°ri˘
 
__«me
,

75 c⁄° *
__ª°ri˘
 
__vîsi⁄
)

76 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

82 *
	$dÀº‹
 (Ë
__THROW
;

85 #ifde‡
__USE_GNU


90 c⁄° *
dli_‚ame
;

91 *
dli_fba£
;

92 c⁄° *
dli_¢ame
;

93 *
dli_ßddr
;

94 } 
	tDl_öfo
;

98 
	$dœddr
 (c⁄° *
__addªss
, 
Dl_öfo
 *
__öfo
)

99 
__THROW
 
	`__n⁄nuŒ
 ((2));

102 
	$dœddr1
 (c⁄° *
__addªss
, 
Dl_öfo
 *
__öfo
,

103 **
__exåa_öfo
, 
__Êags
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

111 
RTLD_DL_SYMENT
 = 1,

114 
RTLD_DL_LINKMAP
 = 2

123 
	$dlöfo
 (*
__ª°ri˘
 
__h™dÀ
,

124 
__ªque°
, *
__ª°ri˘
 
__¨g
)

125 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

131 
RTLD_DI_LMID
 = 1,

135 
RTLD_DI_LINKMAP
 = 2,

137 
RTLD_DI_CONFIGADDR
 = 3,

144 
RTLD_DI_SERINFO
 = 4,

145 
RTLD_DI_SERINFOSIZE
 = 5,

149 
RTLD_DI_ORIGIN
 = 6,

151 
RTLD_DI_PROFILENAME
 = 7,

152 
RTLD_DI_PROFILEOUT
 = 8,

157 
RTLD_DI_TLS_MODID
 = 9,

163 
RTLD_DI_TLS_DATA
 = 10,

165 
RTLD_DI_MAX
 = 10

173 *
dls_«me
;

174 
dls_Êags
;

175 } 
	tDl_£Ω©h
;

181 
size_t
 
dls_size
;

182 
dls_˙t
;

183 #i‡
	`__GNUC_PREREQ
 (3, 0)

188 
__exãnsi⁄__
 union

190 
Dl_£Ω©h
 
dls_£Ω©h
[0];

191 
Dl_£Ω©h
 
__dls_£Ω©h_∑d
[1];

194 
Dl_£Ω©h
 
dls_£Ω©h
[1];

196 } 
	tDl_£röfo
;

200 
__END_DECLS


	@/usr/include/errno.h

22 #i‚def 
_ERRNO_H


23 
	#_ERRNO_H
 1

	)

25 
	~<„©uªs.h
>

28 
	~<bôs/î∫o.h
>

32 #i‚de‡
__ASSEMBLER__


34 
__BEGIN_DECLS


37 *
	$__î∫o_loˇti⁄
 (Ë
__THROW
 
__©åibuã_c⁄°__
;

38 
	#î∫o
 (*
	`__î∫o_loˇti⁄
 ())

	)

40 #ifde‡
__USE_GNU


45 *
¥ogøm_övoˇti⁄_«me
;

46 *
¥ogøm_övoˇti⁄_sh‹t_«me
;

48 
	~<bôs/ty≥s/îr‹_t.h
>

52 
__END_DECLS


	@/usr/include/error.h

19 #i‚de‡
_ERROR_H


20 
	#_ERROR_H
 1

	)

22 
	~<„©uªs.h
>

25 
__BEGIN_DECLS


31 
	$îr‹
 (
__°©us
, 
__î∫um
, c⁄° *
__f‹m©
, ...)

32 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

34 
	$îr‹_©_löe
 (
__°©us
, 
__î∫um
, c⁄° *
__‚ame
,

35 
__löío
, c⁄° *
__f‹m©
, ...)

36 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 5, 6)));

41 (*
îr‹_¥öt_¥og«me
) ();

44 
îr‹_mesßge_cou¡
;

48 
îr‹_⁄e_≥r_löe
;

50 #ifde‡
__LDBL_COMPAT


51 
	~<bôs/îr‹-ldbl.h
>

56 #i‡
deföed
 
__exã∫_Æways_ölöe
 && deföed 
__va_¨g_∑ck


57 
	~<bôs/îr‹.h
>

61 
__END_DECLS


	@/usr/include/fcntl.h

22 #i‚def 
_FCNTL_H


23 
	#_FCNTL_H
 1

	)

25 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


31 
	~<bôs/ty≥s.h
>

35 
	~<bôs/f˙é.h
>

39 #ifde‡
__O_TMPFILE


40 
	#__OPEN_NEEDS_MODE
(
oÊag
) \

41 (((
oÊag
Ë& 
O_CREAT
Ë!0 || ((oÊagË& 
__O_TMPFILE
Ë=__O_TMPFILE)

	)

43 
	#__OPEN_NEEDS_MODE
(
oÊag
Ë(((oÊagË& 
O_CREAT
Ë!0)

	)

49 #i‚de‡
__mode_t_deföed


50 
__mode_t
 
	tmode_t
;

51 
	#__mode_t_deföed


	)

54 #i‚de‡
__off_t_deföed


55 #i‚de‡
__USE_FILE_OFFSET64


56 
__off_t
 
	toff_t
;

58 
__off64_t
 
	toff_t
;

60 
	#__off_t_deföed


	)

63 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


64 
__off64_t
 
	toff64_t
;

65 
	#__off64_t_deföed


	)

68 #i‚de‡
__pid_t_deföed


69 
__pid_t
 
	tpid_t
;

70 
	#__pid_t_deföed


	)

74 #ifde‡
__USE_XOPEN2K8


75 
	~<bôs/ty≥s/°ru˘_time•ec.h
>

77 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


78 
	~<bôs/°©.h
>

80 
	#S_IFMT
 
__S_IFMT


	)

81 
	#S_IFDIR
 
__S_IFDIR


	)

82 
	#S_IFCHR
 
__S_IFCHR


	)

83 
	#S_IFBLK
 
__S_IFBLK


	)

84 
	#S_IFREG
 
__S_IFREG


	)

85 #ifde‡
__S_IFIFO


86 
	#S_IFIFO
 
__S_IFIFO


	)

88 #ifde‡
__S_IFLNK


89 
	#S_IFLNK
 
__S_IFLNK


	)

91 #i‡(
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8
Ë&& deföed 
__S_IFSOCK


92 
	#S_IFSOCK
 
__S_IFSOCK


	)

97 
	#S_ISUID
 
__S_ISUID


	)

98 
	#S_ISGID
 
__S_ISGID


	)

100 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


102 
	#S_ISVTX
 
__S_ISVTX


	)

105 
	#S_IRUSR
 
__S_IREAD


	)

106 
	#S_IWUSR
 
__S_IWRITE


	)

107 
	#S_IXUSR
 
__S_IEXEC


	)

109 
	#S_IRWXU
 (
__S_IREAD
|
__S_IWRITE
|
__S_IEXEC
)

	)

111 
	#S_IRGRP
 (
S_IRUSR
 >> 3Ë

	)

112 
	#S_IWGRP
 (
S_IWUSR
 >> 3Ë

	)

113 
	#S_IXGRP
 (
S_IXUSR
 >> 3Ë

	)

115 
	#S_IRWXG
 (
S_IRWXU
 >> 3)

	)

117 
	#S_IROTH
 (
S_IRGRP
 >> 3Ë

	)

118 
	#S_IWOTH
 (
S_IWGRP
 >> 3Ë

	)

119 
	#S_IXOTH
 (
S_IXGRP
 >> 3Ë

	)

121 
	#S_IRWXO
 (
S_IRWXG
 >> 3)

	)

124 #ifdef 
__USE_MISC


125 #i‚de‡
R_OK


128 
	#R_OK
 4

	)

129 
	#W_OK
 2

	)

130 
	#X_OK
 1

	)

131 
	#F_OK
 0

	)

136 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


137 
	#SEEK_SET
 0

	)

138 
	#SEEK_CUR
 1

	)

139 
	#SEEK_END
 2

	)

147 #i‚de‡
__USE_FILE_OFFSET64


148 
f˙é
 (
__fd
, 
__cmd
, ...);

150 #ifde‡
__REDIRECT


151 
__REDIRECT
 (
f˙é
, (
__fd
, 
__cmd
, ...), 
f˙é64
);

153 
	#f˙é
 
f˙é64


	)

156 #ifde‡
__USE_LARGEFILE64


157 
f˙é64
 (
__fd
, 
__cmd
, ...);

167 #i‚de‡
__USE_FILE_OFFSET64


168 
	$›í
 (c⁄° *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

170 #ifde‡
__REDIRECT


171 
	`__REDIRECT
 (
›í
, (c⁄° *
__fûe
, 
__oÊag
, ...), 
›í64
)

172 
	`__n⁄nuŒ
 ((1));

174 
	#›í
 
›í64


	)

177 #ifde‡
__USE_LARGEFILE64


178 
	$›í64
 (c⁄° *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

181 #ifde‡
__USE_ATFILE


191 #i‚de‡
__USE_FILE_OFFSET64


192 
	$›í©
 (
__fd
, c⁄° *
__fûe
, 
__oÊag
, ...)

193 
	`__n⁄nuŒ
 ((2));

195 #ifde‡
__REDIRECT


196 
	`__REDIRECT
 (
›í©
, (
__fd
, c⁄° *
__fûe
, 
__oÊag
,

197 ...), 
›í©64
Ë
	`__n⁄nuŒ
 ((2));

199 
	#›í©
 
›í©64


	)

202 #ifde‡
__USE_LARGEFILE64


203 
	$›í©64
 (
__fd
, c⁄° *
__fûe
, 
__oÊag
, ...)

204 
	`__n⁄nuŒ
 ((2));

213 #i‚de‡
__USE_FILE_OFFSET64


214 
	$¸ót
 (c⁄° *
__fûe
, 
mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

216 #ifde‡
__REDIRECT


217 
	`__REDIRECT
 (
¸ót
, (c⁄° *
__fûe
, 
mode_t
 
__mode
),

218 
¸ót64
Ë
	`__n⁄nuŒ
 ((1));

220 
	#¸ót
 
¸ót64


	)

223 #ifde‡
__USE_LARGEFILE64


224 
	$¸ót64
 (c⁄° *
__fûe
, 
mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

227 #i‡!
deföed
 
F_LOCK
 && (deföed 
__USE_MISC
 || (deföed 
__USE_XOPEN_EXTENDED
 \

228 && !
deföed
 
__USE_POSIX
))

237 
	#F_ULOCK
 0

	)

238 
	#F_LOCK
 1

	)

239 
	#F_TLOCK
 2

	)

240 
	#F_TEST
 3

	)

242 #i‚de‡
__USE_FILE_OFFSET64


243 
	`lockf
 (
__fd
, 
__cmd
, 
off_t
 
__Àn
);

245 #ifde‡
__REDIRECT


246 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
), 
lockf64
);

248 
	#lockf
 
lockf64


	)

251 #ifde‡
__USE_LARGEFILE64


252 
	`lockf64
 (
__fd
, 
__cmd
, 
off64_t
 
__Àn
);

256 #ifde‡
__USE_XOPEN2K


259 #i‚de‡
__USE_FILE_OFFSET64


260 
	$posix_Ádvi£
 (
__fd
, 
off_t
 
__off£t
, off_à
__Àn
,

261 
__advi£
Ë
__THROW
;

263 #ifde‡
__REDIRECT_NTH


264 
	`__REDIRECT_NTH
 (
posix_Ádvi£
, (
__fd
, 
__off64_t
 
__off£t
,

265 
__off64_t
 
__Àn
, 
__advi£
),

266 
posix_Ádvi£64
);

268 
	#posix_Ádvi£
 
posix_Ádvi£64


	)

271 #ifde‡
__USE_LARGEFILE64


272 
	$posix_Ádvi£64
 (
__fd
, 
off64_t
 
__off£t
, off64_à
__Àn
,

273 
__advi£
Ë
__THROW
;

281 #i‚de‡
__USE_FILE_OFFSET64


282 
	`posix_ÁŒoˇã
 (
__fd
, 
off_t
 
__off£t
, off_à
__Àn
);

284 #ifde‡
__REDIRECT


285 
	`__REDIRECT
 (
posix_ÁŒoˇã
, (
__fd
, 
__off64_t
 
__off£t
,

286 
__off64_t
 
__Àn
),

287 
posix_ÁŒoˇã64
);

289 
	#posix_ÁŒoˇã
 
posix_ÁŒoˇã64


	)

292 #ifde‡
__USE_LARGEFILE64


293 
	`posix_ÁŒoˇã64
 (
__fd
, 
off64_t
 
__off£t
, off64_à
__Àn
);

299 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄
 \

300 && 
deföed
 
__va_¨g_∑ck_Àn


301 
	~<bôs/f˙é2.h
>

304 
__END_DECLS


	@/usr/include/fenv.h

22 #i‚de‡
_FENV_H


23 
	#_FENV_H
 1

	)

25 
	#__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION


	)

26 
	~<bôs/libc-hódî-°¨t.h
>

64 
	~<bôs/„nv.h
>

66 
__BEGIN_DECLS


71 
	$„˛óªx˚±
 (
__ex˚±s
Ë
__THROW
;

75 
	$„gëex˚±Êag
 (
„x˚±_t
 *
__Êagp
, 
__ex˚±s
Ë
__THROW
;

78 
	$„øi£ex˚±
 (
__ex˚±s
Ë
__THROW
;

80 #i‡
	`__GLIBC_USE
 (
IEC_60559_BFP_EXT_C2X
)

83 
	$„£ãx˚±
 (
__ex˚±s
Ë
__THROW
;

88 
	$„£ãx˚±Êag
 (c⁄° 
„x˚±_t
 *
__Êagp
, 
__ex˚±s
Ë
__THROW
;

92 
	$„ã°ex˚±
 (
__ex˚±s
Ë
__THROW
;

94 #i‡
	`__GLIBC_USE
 (
IEC_60559_BFP_EXT_C2X
)

97 
	$„ã°ex˚±Êag
 (c⁄° 
„x˚±_t
 *
__Êagp
, 
__ex˚±s
Ë
__THROW
;

104 
	$„gëround
 (Ë
__THROW
 
__©åibuã_puª__
;

107 
	$„£åound
 (
__roundög_dúe˘i⁄
Ë
__THROW
;

114 
	$„gëív
 (
„nv_t
 *
__ívp
Ë
__THROW
;

119 
	$„hﬁdex˚±
 (
„nv_t
 *
__ívp
Ë
__THROW
;

123 
	$„£ãnv
 (c⁄° 
„nv_t
 *
__ívp
Ë
__THROW
;

128 
	$„upd©ìnv
 (c⁄° 
„nv_t
 *
__ívp
Ë
__THROW
;

133 #i‡
	`__GLIBC_USE
 (
IEC_60559_BFP_EXT_C2X
)

136 
	$„gëmode
 (
„mode_t
 *
__modï
Ë
__THROW
;

140 
	$„£tmode
 (c⁄° 
„mode_t
 *
__modï
Ë
__THROW
;

144 #ifde‡
__OPTIMIZE__


145 
	~<bôs/„nvölöe.h
>

150 #i‡(
	`__GLIBC_USE
 (
IEC_60559_BFP_EXT_C2X
) \

151 && 
deföed
 
FE_INVALID
 \

152 && 
deföed
 
__SUPPORT_SNAN__
)

153 
	#FE_SNANS_ALWAYS_SIGNAL
 1

	)

156 #ifde‡
__USE_GNU


161 
	$„íabÀex˚±
 (
__ex˚±s
Ë
__THROW
;

166 
	$„dißbÀex˚±
 (
__ex˚±s
Ë
__THROW
;

169 
	$„gëex˚±
 (Ë
__THROW
;

172 
__END_DECLS


	@/usr/include/inttypes.h

22 #i‚de‡
_INTTYPES_H


23 
	#_INTTYPES_H
 1

	)

25 
	~<„©uªs.h
>

27 
	~<°döt.h
>

30 #i‚de‡
____gwch¨_t_deföed


31 #ifde‡
__˝lu•lus


32 
	#__gwch¨_t
 
wch¨_t


	)

33 #ñi‡
deföed
 
__WCHAR_TYPE__


34 
__WCHAR_TYPE__
 
	t__gwch¨_t
;

36 
	#__√ed_wch¨_t


	)

37 
	~<°ddef.h
>

38 
wch¨_t
 
	t__gwch¨_t
;

40 
	#____gwch¨_t_deföed
 1

	)

43 #i‡
__WORDSIZE
 == 64

44 
	#__PRI64_PREFIX
 "l"

	)

45 
	#__PRIPTR_PREFIX
 "l"

	)

47 
	#__PRI64_PREFIX
 "Œ"

	)

48 
	#__PRIPTR_PREFIX


	)

54 
	#PRId8
 "d"

	)

55 
	#PRId16
 "d"

	)

56 
	#PRId32
 "d"

	)

57 
	#PRId64
 
__PRI64_PREFIX
 "d"

	)

59 
	#PRIdLEAST8
 "d"

	)

60 
	#PRIdLEAST16
 "d"

	)

61 
	#PRIdLEAST32
 "d"

	)

62 
	#PRIdLEAST64
 
__PRI64_PREFIX
 "d"

	)

64 
	#PRIdFAST8
 "d"

	)

65 
	#PRIdFAST16
 
__PRIPTR_PREFIX
 "d"

	)

66 
	#PRIdFAST32
 
__PRIPTR_PREFIX
 "d"

	)

67 
	#PRIdFAST64
 
__PRI64_PREFIX
 "d"

	)

70 
	#PRIi8
 "i"

	)

71 
	#PRIi16
 "i"

	)

72 
	#PRIi32
 "i"

	)

73 
	#PRIi64
 
__PRI64_PREFIX
 "i"

	)

75 
	#PRIiLEAST8
 "i"

	)

76 
	#PRIiLEAST16
 "i"

	)

77 
	#PRIiLEAST32
 "i"

	)

78 
	#PRIiLEAST64
 
__PRI64_PREFIX
 "i"

	)

80 
	#PRIiFAST8
 "i"

	)

81 
	#PRIiFAST16
 
__PRIPTR_PREFIX
 "i"

	)

82 
	#PRIiFAST32
 
__PRIPTR_PREFIX
 "i"

	)

83 
	#PRIiFAST64
 
__PRI64_PREFIX
 "i"

	)

86 
	#PRIo8
 "o"

	)

87 
	#PRIo16
 "o"

	)

88 
	#PRIo32
 "o"

	)

89 
	#PRIo64
 
__PRI64_PREFIX
 "o"

	)

91 
	#PRIoLEAST8
 "o"

	)

92 
	#PRIoLEAST16
 "o"

	)

93 
	#PRIoLEAST32
 "o"

	)

94 
	#PRIoLEAST64
 
__PRI64_PREFIX
 "o"

	)

96 
	#PRIoFAST8
 "o"

	)

97 
	#PRIoFAST16
 
__PRIPTR_PREFIX
 "o"

	)

98 
	#PRIoFAST32
 
__PRIPTR_PREFIX
 "o"

	)

99 
	#PRIoFAST64
 
__PRI64_PREFIX
 "o"

	)

102 
	#PRIu8
 "u"

	)

103 
	#PRIu16
 "u"

	)

104 
	#PRIu32
 "u"

	)

105 
	#PRIu64
 
__PRI64_PREFIX
 "u"

	)

107 
	#PRIuLEAST8
 "u"

	)

108 
	#PRIuLEAST16
 "u"

	)

109 
	#PRIuLEAST32
 "u"

	)

110 
	#PRIuLEAST64
 
__PRI64_PREFIX
 "u"

	)

112 
	#PRIuFAST8
 "u"

	)

113 
	#PRIuFAST16
 
__PRIPTR_PREFIX
 "u"

	)

114 
	#PRIuFAST32
 
__PRIPTR_PREFIX
 "u"

	)

115 
	#PRIuFAST64
 
__PRI64_PREFIX
 "u"

	)

118 
	#PRIx8
 "x"

	)

119 
	#PRIx16
 "x"

	)

120 
	#PRIx32
 "x"

	)

121 
	#PRIx64
 
__PRI64_PREFIX
 "x"

	)

123 
	#PRIxLEAST8
 "x"

	)

124 
	#PRIxLEAST16
 "x"

	)

125 
	#PRIxLEAST32
 "x"

	)

126 
	#PRIxLEAST64
 
__PRI64_PREFIX
 "x"

	)

128 
	#PRIxFAST8
 "x"

	)

129 
	#PRIxFAST16
 
__PRIPTR_PREFIX
 "x"

	)

130 
	#PRIxFAST32
 
__PRIPTR_PREFIX
 "x"

	)

131 
	#PRIxFAST64
 
__PRI64_PREFIX
 "x"

	)

134 
	#PRIX8
 "X"

	)

135 
	#PRIX16
 "X"

	)

136 
	#PRIX32
 "X"

	)

137 
	#PRIX64
 
__PRI64_PREFIX
 "X"

	)

139 
	#PRIXLEAST8
 "X"

	)

140 
	#PRIXLEAST16
 "X"

	)

141 
	#PRIXLEAST32
 "X"

	)

142 
	#PRIXLEAST64
 
__PRI64_PREFIX
 "X"

	)

144 
	#PRIXFAST8
 "X"

	)

145 
	#PRIXFAST16
 
__PRIPTR_PREFIX
 "X"

	)

146 
	#PRIXFAST32
 
__PRIPTR_PREFIX
 "X"

	)

147 
	#PRIXFAST64
 
__PRI64_PREFIX
 "X"

	)

151 
	#PRIdMAX
 
__PRI64_PREFIX
 "d"

	)

152 
	#PRIiMAX
 
__PRI64_PREFIX
 "i"

	)

153 
	#PRIoMAX
 
__PRI64_PREFIX
 "o"

	)

154 
	#PRIuMAX
 
__PRI64_PREFIX
 "u"

	)

155 
	#PRIxMAX
 
__PRI64_PREFIX
 "x"

	)

156 
	#PRIXMAX
 
__PRI64_PREFIX
 "X"

	)

160 
	#PRIdPTR
 
__PRIPTR_PREFIX
 "d"

	)

161 
	#PRIiPTR
 
__PRIPTR_PREFIX
 "i"

	)

162 
	#PRIoPTR
 
__PRIPTR_PREFIX
 "o"

	)

163 
	#PRIuPTR
 
__PRIPTR_PREFIX
 "u"

	)

164 
	#PRIxPTR
 
__PRIPTR_PREFIX
 "x"

	)

165 
	#PRIXPTR
 
__PRIPTR_PREFIX
 "X"

	)

171 
	#SCNd8
 "hhd"

	)

172 
	#SCNd16
 "hd"

	)

173 
	#SCNd32
 "d"

	)

174 
	#SCNd64
 
__PRI64_PREFIX
 "d"

	)

176 
	#SCNdLEAST8
 "hhd"

	)

177 
	#SCNdLEAST16
 "hd"

	)

178 
	#SCNdLEAST32
 "d"

	)

179 
	#SCNdLEAST64
 
__PRI64_PREFIX
 "d"

	)

181 
	#SCNdFAST8
 "hhd"

	)

182 
	#SCNdFAST16
 
__PRIPTR_PREFIX
 "d"

	)

183 
	#SCNdFAST32
 
__PRIPTR_PREFIX
 "d"

	)

184 
	#SCNdFAST64
 
__PRI64_PREFIX
 "d"

	)

187 
	#SCNi8
 "hhi"

	)

188 
	#SCNi16
 "hi"

	)

189 
	#SCNi32
 "i"

	)

190 
	#SCNi64
 
__PRI64_PREFIX
 "i"

	)

192 
	#SCNiLEAST8
 "hhi"

	)

193 
	#SCNiLEAST16
 "hi"

	)

194 
	#SCNiLEAST32
 "i"

	)

195 
	#SCNiLEAST64
 
__PRI64_PREFIX
 "i"

	)

197 
	#SCNiFAST8
 "hhi"

	)

198 
	#SCNiFAST16
 
__PRIPTR_PREFIX
 "i"

	)

199 
	#SCNiFAST32
 
__PRIPTR_PREFIX
 "i"

	)

200 
	#SCNiFAST64
 
__PRI64_PREFIX
 "i"

	)

203 
	#SCNu8
 "hhu"

	)

204 
	#SCNu16
 "hu"

	)

205 
	#SCNu32
 "u"

	)

206 
	#SCNu64
 
__PRI64_PREFIX
 "u"

	)

208 
	#SCNuLEAST8
 "hhu"

	)

209 
	#SCNuLEAST16
 "hu"

	)

210 
	#SCNuLEAST32
 "u"

	)

211 
	#SCNuLEAST64
 
__PRI64_PREFIX
 "u"

	)

213 
	#SCNuFAST8
 "hhu"

	)

214 
	#SCNuFAST16
 
__PRIPTR_PREFIX
 "u"

	)

215 
	#SCNuFAST32
 
__PRIPTR_PREFIX
 "u"

	)

216 
	#SCNuFAST64
 
__PRI64_PREFIX
 "u"

	)

219 
	#SCNo8
 "hho"

	)

220 
	#SCNo16
 "ho"

	)

221 
	#SCNo32
 "o"

	)

222 
	#SCNo64
 
__PRI64_PREFIX
 "o"

	)

224 
	#SCNoLEAST8
 "hho"

	)

225 
	#SCNoLEAST16
 "ho"

	)

226 
	#SCNoLEAST32
 "o"

	)

227 
	#SCNoLEAST64
 
__PRI64_PREFIX
 "o"

	)

229 
	#SCNoFAST8
 "hho"

	)

230 
	#SCNoFAST16
 
__PRIPTR_PREFIX
 "o"

	)

231 
	#SCNoFAST32
 
__PRIPTR_PREFIX
 "o"

	)

232 
	#SCNoFAST64
 
__PRI64_PREFIX
 "o"

	)

235 
	#SCNx8
 "hhx"

	)

236 
	#SCNx16
 "hx"

	)

237 
	#SCNx32
 "x"

	)

238 
	#SCNx64
 
__PRI64_PREFIX
 "x"

	)

240 
	#SCNxLEAST8
 "hhx"

	)

241 
	#SCNxLEAST16
 "hx"

	)

242 
	#SCNxLEAST32
 "x"

	)

243 
	#SCNxLEAST64
 
__PRI64_PREFIX
 "x"

	)

245 
	#SCNxFAST8
 "hhx"

	)

246 
	#SCNxFAST16
 
__PRIPTR_PREFIX
 "x"

	)

247 
	#SCNxFAST32
 
__PRIPTR_PREFIX
 "x"

	)

248 
	#SCNxFAST64
 
__PRI64_PREFIX
 "x"

	)

252 
	#SCNdMAX
 
__PRI64_PREFIX
 "d"

	)

253 
	#SCNiMAX
 
__PRI64_PREFIX
 "i"

	)

254 
	#SCNoMAX
 
__PRI64_PREFIX
 "o"

	)

255 
	#SCNuMAX
 
__PRI64_PREFIX
 "u"

	)

256 
	#SCNxMAX
 
__PRI64_PREFIX
 "x"

	)

259 
	#SCNdPTR
 
__PRIPTR_PREFIX
 "d"

	)

260 
	#SCNiPTR
 
__PRIPTR_PREFIX
 "i"

	)

261 
	#SCNoPTR
 
__PRIPTR_PREFIX
 "o"

	)

262 
	#SCNuPTR
 
__PRIPTR_PREFIX
 "u"

	)

263 
	#SCNxPTR
 
__PRIPTR_PREFIX
 "x"

	)

266 
	g__BEGIN_DECLS


268 #i‡
__WORDSIZE
 == 64

273 
	mquŸ
;

274 
	mªm
;

275 } 
	timaxdiv_t
;

282 
__exãnsi⁄__
 
	mquŸ
;

283 
__exãnsi⁄__
 
	mªm
;

284 } 
	timaxdiv_t
;

290 
ötmax_t
 
	$imaxabs
 (
ötmax_t
 
__n
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

293 
imaxdiv_t
 
	$imaxdiv
 (
ötmax_t
 
__numî
, i¡max_à
__díom
)

294 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

297 
ötmax_t
 
	$°πoimax
 (c⁄° *
__ª°ri˘
 
__≈å
,

298 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

301 
uötmax_t
 
	$°πoumax
 (c⁄° *
__ª°ri˘
 
__≈å
,

302 ** 
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

305 
ötmax_t
 
	$wc°oimax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

306 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

307 
__THROW
;

310 
uötmax_t
 
	$wc°oumax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

311 
__gwch¨_t
 ** 
__ª°ri˘
 
__íd±r
, 
__ba£
)

312 
__THROW
;

314 #ifde‡
__USE_EXTERN_INLINES


316 #i‡
__WORDSIZE
 == 64

318 
	$__°πﬁ_öã∫Æ
 (c⁄° *
__ª°ri˘
 
__≈å
,

319 **
__ª°ri˘
 
__íd±r
,

320 
__ba£
, 
__group
)

321 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

323 
__exã∫_ölöe
 
ötmax_t


324 
	`__NTH
 (
	$°πoimax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

325 
ba£
))

327  
	`__°πﬁ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

328 
	}
}

330 
	$__°πoul_öã∫Æ
 (c⁄° *
__ª°ri˘
 
__≈å
,

331 ** 
__ª°ri˘
 
__íd±r
,

332 
__ba£
, 
__group
)

333 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

335 
__exã∫_ölöe
 
uötmax_t


336 
	`__NTH
 (
	$°πoumax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

337 
ba£
))

339  
	`__°πoul_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

340 
	}
}

342 
	$__wc°ﬁ_öã∫Æ
 (c⁄° 
__gwch¨_t
 * 
__ª°ri˘
 
__≈å
,

343 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
,

344 
__ba£
, 
__group
)

345 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

347 
__exã∫_ölöe
 
ötmax_t


348 
	`__NTH
 (
	$wc°oimax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

349 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

351  
	`__wc°ﬁ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

352 
	}
}

354 
	$__wc°oul_öã∫Æ
 (c⁄° 
__gwch¨_t
 *

355 
__ª°ri˘
 
__≈å
,

356 
__gwch¨_t
 **

357 
__ª°ri˘
 
__íd±r
,

358 
__ba£
, 
__group
)

359 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

361 
__exã∫_ölöe
 
uötmax_t


362 
	`__NTH
 (
	$wc°oumax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

363 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

365  
	`__wc°oul_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

366 
	}
}

370 
__exãnsi⁄__


371 
	$__°πﬁl_öã∫Æ
 (c⁄° *
__ª°ri˘
 
__≈å
,

372 **
__ª°ri˘
 
__íd±r
,

373 
__ba£
, 
__group
)

374 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

376 
__exã∫_ölöe
 
ötmax_t


377 
	`__NTH
 (
	$°πoimax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

378 
ba£
))

380  
	`__°πﬁl_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

381 
	}
}

383 
__exãnsi⁄__


384 
	$__°πouŒ_öã∫Æ
 (const *

385 
__ª°ri˘
 
__≈å
,

387 
__ª°ri˘
 
__íd±r
,

388 
__ba£
,

389 
__group
)

390 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

392 
__exã∫_ölöe
 
uötmax_t


393 
	`__NTH
 (
	$°πoumax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

394 
ba£
))

396  
	`__°πouŒ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

397 
	}
}

399 
__exãnsi⁄__


400 
	$__wc°ﬁl_öã∫Æ
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

401 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
,

402 
__ba£
, 
__group
)

403 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

405 
__exã∫_ölöe
 
ötmax_t


406 
	`__NTH
 (
	$wc°oimax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

407 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

409  
	`__wc°ﬁl_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

410 
	}
}

413 
__exãnsi⁄__


414 
	$__wc°ouŒ_öã∫Æ
 (c⁄° 
__gwch¨_t
 *

415 
__ª°ri˘
 
__≈å
,

416 
__gwch¨_t
 **

417 
__ª°ri˘
 
__íd±r
,

418 
__ba£
,

419 
__group
)

420 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

422 
__exã∫_ölöe
 
uötmax_t


423 
	`__NTH
 (
	$wc°oumax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

424 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

426  
	`__wc°ouŒ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

427 
	}
}

432 
	g__END_DECLS


	@/usr/include/libpmem.h

43 #i‚de‡
LIBPMEM_H


44 
	#LIBPMEM_H
 1

	)

46 
	~<sys/ty≥s.h
>

48 #ifde‡
_WIN32


49 
	~<pmemcom∑t.h
>

51 #i‚de‡
PMDK_UTF8_API


52 
	#pmem_m≠_fûe
 
pmem_m≠_fûeW


	)

53 
	#pmem_check_vîsi⁄
 
pmem_check_vîsi⁄W


	)

54 
	#pmem_îr‹msg
 
pmem_îr‹msgW


	)

56 
	#pmem_m≠_fûe
 
pmem_m≠_fûeU


	)

57 
	#pmem_check_vîsi⁄
 
pmem_check_vîsi⁄U


	)

58 
	#pmem_îr‹msg
 
pmem_îr‹msgU


	)

63 #ifde‡
__˝lu•lus


71 
	#PMEM_MIN_PART
 ((
size_t
)(1024 * 1024 * 2)Ë

	)

76 
	#PMEM_FILE_CREATE
 (1 << 0)

	)

77 
	#PMEM_FILE_EXCL
 (1 << 1)

	)

78 
	#PMEM_FILE_SPARSE
 (1 << 2)

	)

79 
	#PMEM_FILE_TMPFILE
 (1 << 3)

	)

81 #i‚de‡
_WIN32


82 *
pmem_m≠_fûe
(c⁄° *
∑th
, 
size_t
 
Àn
, 
Êags
, 
mode_t
 
mode
,

83 
size_t
 *
m≠≥d_À≈
, *
is_pmemp
);

85 *
pmem_m≠_fûeU
(c⁄° *
∑th
, 
size_t
 
Àn
, 
Êags
, 
mode_t
 
mode
,

86 
size_t
 *
m≠≥d_À≈
, *
is_pmemp
);

87 *
pmem_m≠_fûeW
(c⁄° 
wch¨_t
 *
∑th
, 
size_t
 
Àn
, 
Êags
, 
mode_t
 
mode
,

88 
size_t
 *
m≠≥d_À≈
, *
is_pmemp
);

91 
pmem_unm≠
(*
addr
, 
size_t
 
Àn
);

92 
pmem_is_pmem
(c⁄° *
addr
, 
size_t
 
Àn
);

93 
pmem_≥rsi°
(c⁄° *
addr
, 
size_t
 
Àn
);

94 
pmem_msync
(c⁄° *
addr
, 
size_t
 
Àn
);

95 
pmem_has_auto_Êush
();

96 
pmem_Êush
(c⁄° *
addr
, 
size_t
 
Àn
);

97 
pmem_dìp_Êush
(c⁄° *
addr
, 
size_t
 
Àn
);

98 
pmem_dìp_døö
(c⁄° *
addr
, 
size_t
 
Àn
);

99 
pmem_dìp_≥rsi°
(c⁄° *
addr
, 
size_t
 
Àn
);

100 
pmem_døö
();

101 
pmem_has_hw_døö
();

103 *
pmem_memmove_≥rsi°
(*
pmemde°
, c⁄° *
§c
, 
size_t
 
Àn
);

104 *
pmem_mem˝y_≥rsi°
(*
pmemde°
, c⁄° *
§c
, 
size_t
 
Àn
);

105 *
pmem_mem£t_≥rsi°
(*
pmemde°
, 
c
, 
size_t
 
Àn
);

106 *
pmem_memmove_nodøö
(*
pmemde°
, c⁄° *
§c
, 
size_t
 
Àn
);

107 *
pmem_mem˝y_nodøö
(*
pmemde°
, c⁄° *
§c
, 
size_t
 
Àn
);

108 *
pmem_mem£t_nodøö
(*
pmemde°
, 
c
, 
size_t
 
Àn
);

110 
	#PMEM_F_MEM_NODRAIN
 (1U << 0)

	)

112 
	#PMEM_F_MEM_NONTEMPORAL
 (1U << 1)

	)

113 
	#PMEM_F_MEM_TEMPORAL
 (1U << 2)

	)

115 
	#PMEM_F_MEM_WC
 (1U << 3)

	)

116 
	#PMEM_F_MEM_WB
 (1U << 4)

	)

118 
	#PMEM_F_MEM_NOFLUSH
 (1U << 5)

	)

120 
	#PMEM_F_MEM_VALID_FLAGS
 (
PMEM_F_MEM_NODRAIN
 | \

121 
PMEM_F_MEM_NONTEMPORAL
 | \

122 
PMEM_F_MEM_TEMPORAL
 | \

123 
PMEM_F_MEM_WC
 | \

124 
PMEM_F_MEM_WB
 | \

125 
PMEM_F_MEM_NOFLUSH
)

	)

127 *
pmem_memmove
(*
pmemde°
, c⁄° *
§c
, 
size_t
 
Àn
, 
Êags
);

128 *
pmem_mem˝y
(*
pmemde°
, c⁄° *
§c
, 
size_t
 
Àn
, 
Êags
);

129 *
pmem_mem£t
(*
pmemde°
, 
c
, 
size_t
 
Àn
, 
Êags
);

137 
	#PMEM_MAJOR_VERSION
 1

	)

138 
	#PMEM_MINOR_VERSION
 1

	)

140 #i‚de‡
_WIN32


141 c⁄° *
pmem_check_vîsi⁄
(
maj‹_ªquúed
,

142 
mö‹_ªquúed
);

144 c⁄° *
pmem_check_vîsi⁄U
(
maj‹_ªquúed
,

145 
mö‹_ªquúed
);

146 c⁄° 
wch¨_t
 *
pmem_check_vîsi⁄W
(
maj‹_ªquúed
,

147 
mö‹_ªquúed
);

150 #i‚de‡
_WIN32


151 c⁄° *
pmem_îr‹msg
();

153 c⁄° *
pmem_îr‹msgU
();

154 c⁄° 
wch¨_t
 *
pmem_îr‹msgW
();

157 #ifde‡
__˝lu•lus


	@/usr/include/limits.h

22 #i‚de‡
_LIBC_LIMITS_H_


23 
	#_LIBC_LIMITS_H_
 1

	)

25 
	#__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION


	)

26 
	~<bôs/libc-hódî-°¨t.h
>

32 
	#MB_LEN_MAX
 16

	)

37 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2

42 #i‚de‡
_LIMITS_H


43 
	#_LIMITS_H
 1

	)

45 
	~<bôs/w‹dsize.h
>

54 
	#CHAR_BIT
 8

	)

57 
	#SCHAR_MIN
 (-128)

	)

58 
	#SCHAR_MAX
 127

	)

61 
	#UCHAR_MAX
 255

	)

64 #ifde‡
__CHAR_UNSIGNED__


65 
	#CHAR_MIN
 0

	)

66 
	#CHAR_MAX
 
UCHAR_MAX


	)

68 
	#CHAR_MIN
 
SCHAR_MIN


	)

69 
	#CHAR_MAX
 
SCHAR_MAX


	)

73 
	#SHRT_MIN
 (-32768)

	)

74 
	#SHRT_MAX
 32767

	)

77 
	#USHRT_MAX
 65535

	)

80 
	#INT_MIN
 (-
INT_MAX
 - 1)

	)

81 
	#INT_MAX
 2147483647

	)

84 
	#UINT_MAX
 4294967295U

	)

87 #i‡
__WORDSIZE
 == 64

88 
	#LONG_MAX
 9223372036854775807L

	)

90 
	#LONG_MAX
 2147483647L

	)

92 
	#LONG_MIN
 (-
LONG_MAX
 - 1L)

	)

95 #i‡
__WORDSIZE
 == 64

96 
	#ULONG_MAX
 18446744073709551615UL

	)

98 
	#ULONG_MAX
 4294967295UL

	)

101 #ifde‡
__USE_ISOC99


104 
	#LLONG_MAX
 9223372036854775807LL

	)

105 
	#LLONG_MIN
 (-
LLONG_MAX
 - 1LL)

	)

108 
	#ULLONG_MAX
 18446744073709551615ULL

	)

122 #i‡
deföed
 
__GNUC__
 && !deföed 
_GCC_LIMITS_H_


124 #ö˛ude_√xà<
limôs
.
h
>

130 #i‡
deföed
 
__USE_ISOC99
 && deföed 
__GNUC__


131 #i‚de‡
LLONG_MIN


132 
	#LLONG_MIN
 (-
LLONG_MAX
-1)

	)

134 #i‚de‡
LLONG_MAX


135 
	#LLONG_MAX
 
__LONG_LONG_MAX__


	)

137 #i‚de‡
ULLONG_MAX


138 
	#ULLONG_MAX
 (
LLONG_MAX
 * 2ULL + 1)

	)

145 #i‡
__GLIBC_USE
 (
IEC_60559_BFP_EXT_C2X
)

146 #i‚de‡
CHAR_WIDTH


147 
	#CHAR_WIDTH
 8

	)

149 #i‚de‡
SCHAR_WIDTH


150 
	#SCHAR_WIDTH
 8

	)

152 #i‚de‡
UCHAR_WIDTH


153 
	#UCHAR_WIDTH
 8

	)

155 #i‚de‡
SHRT_WIDTH


156 
	#SHRT_WIDTH
 16

	)

158 #i‚de‡
USHRT_WIDTH


159 
	#USHRT_WIDTH
 16

	)

161 #i‚de‡
INT_WIDTH


162 
	#INT_WIDTH
 32

	)

164 #i‚de‡
UINT_WIDTH


165 
	#UINT_WIDTH
 32

	)

167 #i‚de‡
LONG_WIDTH


168 
	#LONG_WIDTH
 
__WORDSIZE


	)

170 #i‚de‡
ULONG_WIDTH


171 
	#ULONG_WIDTH
 
__WORDSIZE


	)

173 #i‚de‡
LLONG_WIDTH


174 
	#LLONG_WIDTH
 64

	)

176 #i‚de‡
ULLONG_WIDTH


177 
	#ULLONG_WIDTH
 64

	)

181 #ifdef 
__USE_POSIX


183 
	~<bôs/posix1_lim.h
>

186 #ifdef 
__USE_POSIX2


187 
	~<bôs/posix2_lim.h
>

190 #ifdef 
__USE_XOPEN


191 
	~<bôs/x›í_lim.h
>

	@/usr/include/linux/limits.h

2 #i‚de‡
_LINUX_LIMITS_H


3 
	#_LINUX_LIMITS_H


	)

5 
	#NR_OPEN
 1024

	)

7 
	#NGROUPS_MAX
 65536

	)

8 
	#ARG_MAX
 131072

	)

9 
	#LINK_MAX
 127

	)

10 
	#MAX_CANON
 255

	)

11 
	#MAX_INPUT
 255

	)

12 
	#NAME_MAX
 255

	)

13 
	#PATH_MAX
 4096

	)

14 
	#PIPE_BUF
 4096

	)

15 
	#XATTR_NAME_MAX
 255

	)

16 
	#XATTR_SIZE_MAX
 65536

	)

17 
	#XATTR_LIST_MAX
 65536

	)

19 
	#RTSIG_MAX
 32

	)

	@/usr/include/malloc.h

19 #i‚de‡
_MALLOC_H


20 
	#_MALLOC_H
 1

	)

22 
	~<„©uªs.h
>

23 
	~<°ddef.h
>

24 
	~<°dio.h
>

26 #ifde‡
_LIBC


27 
	#__MALLOC_HOOK_VOLATILE


	)

28 
	#__MALLOC_DEPRECATED


	)

30 
	#__MALLOC_HOOK_VOLATILE
 vﬁ©ûe

	)

31 
	#__MALLOC_DEPRECATED
 
__©åibuã_dïªˇãd__


	)

35 
__BEGIN_DECLS


38 *
	$mÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__


39 
	`__©åibuã_Æloc_size__
 ((1)Ë
__wur
;

42 *
	$ˇŒoc
 (
size_t
 
__nmemb
, size_à
__size
)

43 
__THROW
 
__©åibuã_mÆloc__
 
	`__©åibuã_Æloc_size__
 ((1, 2)Ë
__wur
;

50 *
	$ªÆloc
 (*
__±r
, 
size_t
 
__size
)

51 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
 
	`__©åibuã_Æloc_size__
 ((2));

58 *
	$ªÆloˇºay
 (*
__±r
, 
size_t
 
__nmemb
, size_à
__size
)

59 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
 
	`__©åibuã_Æloc_size__
 ((2, 3));

62 
	$‰ì
 (*
__±r
Ë
__THROW
;

65 *
	$memÆign
 (
size_t
 
__Æignmít
, size_à
__size
)

66 
__THROW
 
__©åibuã_mÆloc__
 
	`__©åibuã_Æloc_size__
 ((2)Ë
__wur
;

69 *
	$vÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__


70 
	`__©åibuã_Æloc_size__
 ((1)Ë
__wur
;

74 *
	$pvÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

78 *(*
__m‹ec‹e
Ë(
±rdiff_t
 
__size
);

81 *
	$__deÁu…_m‹ec‹e
 (
±rdiff_t
 
__size
)

82 
__THROW
 
__©åibuã_mÆloc__
;

86 
	smÆlöfo


88 
¨ía
;

89 
‹dblks
;

90 
smblks
;

91 
hblks
;

92 
hblkhd
;

93 
usmblks
;

94 
fsmblks
;

95 
u‹dblks
;

96 
f‹dblks
;

97 
kìpco°
;

101 
mÆlöfo
 
	$mÆlöfo
 (Ë
__THROW
;

104 #i‚de‡
M_MXFAST


105 
	#M_MXFAST
 1

	)

107 #i‚de‡
M_NLBLKS


108 
	#M_NLBLKS
 2

	)

110 #i‚de‡
M_GRAIN


111 
	#M_GRAIN
 3

	)

113 #i‚de‡
M_KEEP


114 
	#M_KEEP
 4

	)

118 
	#M_TRIM_THRESHOLD
 -1

	)

119 
	#M_TOP_PAD
 -2

	)

120 
	#M_MMAP_THRESHOLD
 -3

	)

121 
	#M_MMAP_MAX
 -4

	)

122 
	#M_CHECK_ACTION
 -5

	)

123 
	#M_PERTURB
 -6

	)

124 
	#M_ARENA_TEST
 -7

	)

125 
	#M_ARENA_MAX
 -8

	)

128 
	$mÆl›t
 (
__∑øm
, 
__vÆ
Ë
__THROW
;

132 
	$mÆloc_åim
 (
size_t
 
__∑d
Ë
__THROW
;

136 
size_t
 
	$mÆloc_ußbÀ_size
 (*
__±r
Ë
__THROW
;

139 
	$mÆloc_°©s
 (Ë
__THROW
;

142 
	$mÆloc_öfo
 (
__›ti⁄s
, 
FILE
 *
__Â
Ë
__THROW
;

145 (*
__MALLOC_HOOK_VOLATILE
 
__‰ì_hook
Ë(*
__±r
,

147 
__MALLOC_DEPRECATED
;

148 *(*
__MALLOC_HOOK_VOLATILE
 
__mÆloc_hook
)(
size_t
 
__size
,

150 
__MALLOC_DEPRECATED
;

151 *(*
__MALLOC_HOOK_VOLATILE
 
__ªÆloc_hook
)(*
__±r
,

152 
size_t
 
__size
,

154 
__MALLOC_DEPRECATED
;

155 *(*
__MALLOC_HOOK_VOLATILE
 
__memÆign_hook
)(
size_t
 
__Æignmít
,

156 
size_t
 
__size
,

158 
__MALLOC_DEPRECATED
;

159 (*
__MALLOC_HOOK_VOLATILE
 
__a·î_m‹ec‹e_hook
) ();

162 
__END_DECLS


	@/usr/include/netdb.h

22 #i‚def 
_NETDB_H


23 
	#_NETDB_H
 1

	)

25 
	~<„©uªs.h
>

27 
	~<√töë/ö.h
>

28 
	~<bôs/°döt-uöä.h
>

29 #ifde‡
__USE_MISC


32 
	~<Ωc/√tdb.h
>

35 #ifde‡
__USE_GNU


36 
	~<bôs/ty≥s/sigevít_t.h
>

37 
	~<bôs/ty≥s/°ru˘_time•ec.h
>

40 
	~<bôs/√tdb.h
>

43 
	#_PATH_HEQUIV
 "/ëc/ho°s.equiv"

	)

44 
	#_PATH_HOSTS
 "/ëc/ho°s"

	)

45 
	#_PATH_NETWORKS
 "/ëc/√tw‹ks"

	)

46 
	#_PATH_NSSWITCH_CONF
 "/ëc/nsswôch.c⁄f"

	)

47 
	#_PATH_PROTOCOLS
 "/ëc/¥Ÿocﬁs"

	)

48 
	#_PATH_SERVICES
 "/ëc/£rvi˚s"

	)

51 
	g__BEGIN_DECLS


53 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K8


56 
	#h_î∫o
 (*
	`__h_î∫o_loˇti⁄
 ())

	)

59 *
	$__h_î∫o_loˇti⁄
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

63 
	#HOST_NOT_FOUND
 1

	)

64 
	#TRY_AGAIN
 2

	)

66 
	#NO_RECOVERY
 3

	)

68 
	#NO_DATA
 4

	)

71 #ifde‡
__USE_MISC


72 
	#NETDB_INTERNAL
 -1

	)

73 
	#NETDB_SUCCESS
 0

	)

74 
	#NO_ADDRESS
 
NO_DATA


	)

77 #i‡
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_XOPEN_EXTENDED


79 
	#IPPORT_RESERVED
 1024

	)

82 #ifde‡
__USE_GNU


84 
	#SCOPE_DELIMITER
 '%'

	)

87 #ifde‡
__USE_MISC


90 
	$hîr‹
 (c⁄° *
__°r
Ë
__THROW
;

93 c⁄° *
	$h°ªº‹
 (
__îr_num
Ë
__THROW
;

98 
	sho°ít


100 *
h_«me
;

101 **
h_Æü£s
;

102 
h_addπy≥
;

103 
h_Àngth
;

104 **
h_addr_li°
;

105 #ifde‡
__USE_MISC


106 
	#h_addr
 
h_addr_li°
[0]

	)

115 
	`£tho°ít
 (
__°ay_›í
);

121 
	`ídho°ít
 ();

128 
ho°ít
 *
	`gëho°ít
 ();

135 
ho°ít
 *
	`gëho°byaddr
 (c⁄° *
__addr
, 
__sockÀn_t
 
__Àn
,

136 
__ty≥
);

142 
ho°ít
 *
	`gëho°by«me
 (c⁄° *
__«me
);

144 #ifde‡
__USE_MISC


153 
ho°ít
 *
	`gëho°by«me2
 (c⁄° *
__«me
, 
__af
);

165 
	`gëho°ít_r
 (
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

166 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

167 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

168 *
__ª°ri˘
 
__h_î∫›
);

170 
	`gëho°byaddr_r
 (c⁄° *
__ª°ri˘
 
__addr
, 
__sockÀn_t
 
__Àn
,

171 
__ty≥
,

172 
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

173 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

174 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

175 *
__ª°ri˘
 
__h_î∫›
);

177 
	`gëho°by«me_r
 (c⁄° *
__ª°ri˘
 
__«me
,

178 
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

179 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

180 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

181 *
__ª°ri˘
 
__h_î∫›
);

183 
	`gëho°by«me2_r
 (c⁄° *
__ª°ri˘
 
__«me
, 
__af
,

184 
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

185 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

186 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

187 *
__ª°ri˘
 
__h_î∫›
);

196 
	`£äëít
 (
__°ay_›í
);

202 
	`íd√ã¡
 ();

209 
√ã¡
 *
	`gë√ã¡
 ();

216 
√ã¡
 *
	`gë√tbyaddr
 (
uöt32_t
 
__√t
, 
__ty≥
);

222 
√ã¡
 *
	`gë√tby«me
 (c⁄° *
__«me
);

224 #ifdef 
__USE_MISC


235 
	`gë√ã¡_r
 (
√ã¡
 *
__ª°ri˘
 
__ªsu…_buf
,

236 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

237 
√ã¡
 **
__ª°ri˘
 
__ªsu…
,

238 *
__ª°ri˘
 
__h_î∫›
);

240 
	`gë√tbyaddr_r
 (
uöt32_t
 
__√t
, 
__ty≥
,

241 
√ã¡
 *
__ª°ri˘
 
__ªsu…_buf
,

242 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

243 
√ã¡
 **
__ª°ri˘
 
__ªsu…
,

244 *
__ª°ri˘
 
__h_î∫›
);

246 
	`gë√tby«me_r
 (c⁄° *
__ª°ri˘
 
__«me
,

247 
√ã¡
 *
__ª°ri˘
 
__ªsu…_buf
,

248 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

249 
√ã¡
 **
__ª°ri˘
 
__ªsu…
,

250 *
__ª°ri˘
 
__h_î∫›
);

255 
	s£rvít


257 *
s_«me
;

258 **
s_Æü£s
;

259 
s_p‹t
;

260 *
s_¥Ÿo
;

268 
	`£t£rvít
 (
__°ay_›í
);

274 
	`íd£rvít
 ();

281 
£rvít
 *
	`gë£rvít
 ();

288 
£rvít
 *
	`gë£rvby«me
 (c⁄° *
__«me
, c⁄° *
__¥Ÿo
);

295 
£rvít
 *
	`gë£rvbyp‹t
 (
__p‹t
, c⁄° *
__¥Ÿo
);

298 #ifdef 
__USE_MISC


306 
	`gë£rvít_r
 (
£rvít
 *
__ª°ri˘
 
__ªsu…_buf
,

307 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

308 
£rvít
 **
__ª°ri˘
 
__ªsu…
);

310 
	`gë£rvby«me_r
 (c⁄° *
__ª°ri˘
 
__«me
,

311 c⁄° *
__ª°ri˘
 
__¥Ÿo
,

312 
£rvít
 *
__ª°ri˘
 
__ªsu…_buf
,

313 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

314 
£rvít
 **
__ª°ri˘
 
__ªsu…
);

316 
	`gë£rvbyp‹t_r
 (
__p‹t
, c⁄° *
__ª°ri˘
 
__¥Ÿo
,

317 
£rvít
 *
__ª°ri˘
 
__ªsu…_buf
,

318 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

319 
£rvít
 **
__ª°ri˘
 
__ªsu…
);

324 
	s¥Ÿ€¡


326 *
p_«me
;

327 **
p_Æü£s
;

328 
p_¥Ÿo
;

336 
	`£çrŸ€¡
 (
__°ay_›í
);

342 
	`íd¥Ÿ€¡
 ();

349 
¥Ÿ€¡
 *
	`gë¥Ÿ€¡
 ();

355 
¥Ÿ€¡
 *
	`gë¥Ÿoby«me
 (c⁄° *
__«me
);

361 
¥Ÿ€¡
 *
	`gë¥Ÿobynumbî
 (
__¥Ÿo
);

364 #ifdef 
__USE_MISC


372 
	`gë¥Ÿ€¡_r
 (
¥Ÿ€¡
 *
__ª°ri˘
 
__ªsu…_buf
,

373 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

374 
¥Ÿ€¡
 **
__ª°ri˘
 
__ªsu…
);

376 
	`gë¥Ÿoby«me_r
 (c⁄° *
__ª°ri˘
 
__«me
,

377 
¥Ÿ€¡
 *
__ª°ri˘
 
__ªsu…_buf
,

378 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

379 
¥Ÿ€¡
 **
__ª°ri˘
 
__ªsu…
);

381 
	`gë¥Ÿobynumbî_r
 (
__¥Ÿo
,

382 
¥Ÿ€¡
 *
__ª°ri˘
 
__ªsu…_buf
,

383 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

384 
¥Ÿ€¡
 **
__ª°ri˘
 
__ªsu…
);

393 
	`£äëgª¡
 (c⁄° *
__√tgroup
);

401 
	`íd√tgª¡
 ();

410 
	`gë√tgª¡
 (**
__ª°ri˘
 
__ho°p
,

411 **
__ª°ri˘
 
__u£Ω
,

412 **
__ª°ri˘
 
__domaöp
);

421 
	`ö√tgr
 (c⁄° *
__√tgroup
, c⁄° *
__ho°
,

422 c⁄° *
__u£r
, c⁄° *
__domaö
);

430 
	`gë√tgª¡_r
 (**
__ª°ri˘
 
__ho°p
,

431 **
__ª°ri˘
 
__u£Ω
,

432 **
__ª°ri˘
 
__domaöp
,

433 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
);

437 #ifde‡
__USE_MISC


449 
	`rcmd
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

450 c⁄° *
__ª°ri˘
 
__locu£r
,

451 c⁄° *
__ª°ri˘
 
__ªmu£r
,

452 c⁄° *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
);

461 
	`rcmd_af
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

462 c⁄° *
__ª°ri˘
 
__locu£r
,

463 c⁄° *
__ª°ri˘
 
__ªmu£r
,

464 c⁄° *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
,

465 
ß_Ámûy_t
 
__af
);

477 
	`ªxec
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

478 c⁄° *
__ª°ri˘
 
__«me
,

479 c⁄° *
__ª°ri˘
 
__∑ss
,

480 c⁄° *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
);

489 
	`ªxec_af
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

490 c⁄° *
__ª°ri˘
 
__«me
,

491 c⁄° *
__ª°ri˘
 
__∑ss
,

492 c⁄° *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
,

493 
ß_Ámûy_t
 
__af
);

503 
	`ru£rok
 (c⁄° *
__rho°
, 
__su£r
,

504 c⁄° *
__ªmu£r
, c⁄° *
__locu£r
);

513 
	`ru£rok_af
 (c⁄° *
__rho°
, 
__su£r
,

514 c⁄° *
__ªmu£r
, c⁄° *
__locu£r
,

515 
ß_Ámûy_t
 
__af
);

526 
	`úu£rok
 (
uöt32_t
 
__øddr
, 
__su£r
,

527 c⁄° *
__ªmu£r
, c⁄° *
__locu£r
);

537 
	`úu£rok_af
 (c⁄° *
__øddr
, 
__su£r
,

538 c⁄° *
__ªmu£r
, c⁄° *
__locu£r
,

539 
ß_Ámûy_t
 
__af
);

549 
	`ºesvp‹t
 (*
__Æp‹t
);

558 
	`ºesvp‹t_af
 (*
__Æp‹t
, 
ß_Ámûy_t
 
__af
);

563 #ifde‡
__USE_XOPEN2K


565 
	saddröfo


567 
ai_Êags
;

568 
ai_Ámûy
;

569 
ai_sockty≥
;

570 
ai_¥Ÿocﬁ
;

571 
sockÀn_t
 
ai_addæí
;

572 
sockaddr
 *
ai_addr
;

573 *
ai_ˇn⁄«me
;

574 
addröfo
 *
ai_√xt
;

577 #ifde‡
__USE_GNU


579 
	sgaicb


581 c⁄° *
¨_«me
;

582 c⁄° *
¨_£rvi˚
;

583 c⁄° 
addröfo
 *
¨_ªque°
;

584 
addröfo
 *
¨_ªsu…
;

586 
__ªtu∫
;

587 
__glibc_ª£rved
[5];

591 
	#GAI_WAIT
 0

	)

592 
	#GAI_NOWAIT
 1

	)

596 
	#AI_PASSIVE
 0x0001

	)

597 
	#AI_CANONNAME
 0x0002

	)

598 
	#AI_NUMERICHOST
 0x0004

	)

599 
	#AI_V4MAPPED
 0x0008

	)

600 
	#AI_ALL
 0x0010

	)

601 
	#AI_ADDRCONFIG
 0x0020

	)

603 #ifde‡
__USE_GNU


604 
	#AI_IDN
 0x0040

	)

607 
	#AI_CANONIDN
 0x0080

	)

608 
	#AI_IDN_ALLOW_UNASSIGNED
 \

609 
	`__glibc_ma¸o_w¨nög
 ("AI_IDN_ALLOW_UNASSIGNED i†dïªˇãd"Ë0x0100

	)

610 
	#AI_IDN_USE_STD3_ASCII_RULES
 \

611 
	`__glibc_ma¸o_w¨nög
 ("AI_IDN_USE_STD3_ASCII_RULES i†dïªˇãd"Ë0x0200

	)

613 
	#AI_NUMERICSERV
 0x0400

	)

616 
	#EAI_BADFLAGS
 -1

	)

617 
	#EAI_NONAME
 -2

	)

618 
	#EAI_AGAIN
 -3

	)

619 
	#EAI_FAIL
 -4

	)

620 
	#EAI_FAMILY
 -6

	)

621 
	#EAI_SOCKTYPE
 -7

	)

622 
	#EAI_SERVICE
 -8

	)

623 
	#EAI_MEMORY
 -10

	)

624 
	#EAI_SYSTEM
 -11

	)

625 
	#EAI_OVERFLOW
 -12

	)

626 #ifde‡
__USE_GNU


627 
	#EAI_NODATA
 -5

	)

628 
	#EAI_ADDRFAMILY
 -9

	)

629 
	#EAI_INPROGRESS
 -100

	)

630 
	#EAI_CANCELED
 -101

	)

631 
	#EAI_NOTCANCELED
 -102

	)

632 
	#EAI_ALLDONE
 -103

	)

633 
	#EAI_INTR
 -104

	)

634 
	#EAI_IDN_ENCODE
 -105

	)

637 #ifde‡
__USE_MISC


638 
	#NI_MAXHOST
 1025

	)

639 
	#NI_MAXSERV
 32

	)

642 
	#NI_NUMERICHOST
 1

	)

643 
	#NI_NUMERICSERV
 2

	)

644 
	#NI_NOFQDN
 4

	)

645 
	#NI_NAMEREQD
 8

	)

646 
	#NI_DGRAM
 16

	)

647 #ifde‡
__USE_GNU


648 
	#NI_IDN
 32

	)

649 
	#NI_IDN_ALLOW_UNASSIGNED
 \

650 
	`__glibc_ma¸o_w¨nög
 ("NI_IDN_ALLOW_UNASSIGNED i†dïªˇãd"Ë64

	)

651 
	#NI_IDN_USE_STD3_ASCII_RULES
 \

652 
	`__glibc_ma¸o_w¨nög
 ("NI_IDN_USE_STD3_ASCII_RULES i†dïªˇãd"Ë128

	)

660 
	`gëaddröfo
 (c⁄° *
__ª°ri˘
 
__«me
,

661 c⁄° *
__ª°ri˘
 
__£rvi˚
,

662 c⁄° 
addröfo
 *
__ª°ri˘
 
__ªq
,

663 
addröfo
 **
__ª°ri˘
 
__∑i
);

666 
	$‰ìaddröfo
 (
addröfo
 *
__ai
Ë
__THROW
;

669 c⁄° *
	$gai_°ªº‹
 (
__ecode
Ë
__THROW
;

675 
	`gë«meöfo
 (c⁄° 
sockaddr
 *
__ª°ri˘
 
__ß
,

676 
sockÀn_t
 
__ßÀn
, *
__ª°ri˘
 
__ho°
,

677 
sockÀn_t
 
__ho°Àn
, *
__ª°ri˘
 
__£rv
,

678 
sockÀn_t
 
__£rvÀn
, 
__Êags
);

681 #ifde‡
__USE_GNU


690 
	`gëaddröfo_a
 (
__mode
, 
gaicb
 *
__li°
[
__ª°ri˘_¨r
],

691 
__ít
, 
sigevít
 *
__ª°ri˘
 
__sig
);

701 
	`gai_su•íd
 (c⁄° 
gaicb
 *c⁄° 
__li°
[], 
__ít
,

702 c⁄° 
time•ec
 *
__timeout
);

705 
	$gai_îr‹
 (
gaicb
 *
__ªq
Ë
__THROW
;

708 
	$gai_ˇn˚l
 (
gaicb
 *
__gaicbp
Ë
__THROW
;

711 
__END_DECLS


	@/usr/include/netinet/in.h

18 #i‚def 
_NETINET_IN_H


19 
	#_NETINET_IN_H
 1

	)

21 
	~<„©uªs.h
>

22 
	~<bôs/°döt-uöä.h
>

23 
	~<sys/sockë.h
>

24 
	~<bôs/ty≥s.h
>

27 
__BEGIN_DECLS


30 
uöt32_t
 
	tö_addr_t
;

31 
	sö_addr


33 
ö_addr_t
 
	ms_addr
;

37 
	~<bôs/ö.h
>

42 
	mIPPROTO_IP
 = 0,

43 
	#IPPROTO_IP
 
IPPROTO_IP


	)

44 
	mIPPROTO_ICMP
 = 1,

45 
	#IPPROTO_ICMP
 
IPPROTO_ICMP


	)

46 
	mIPPROTO_IGMP
 = 2,

47 
	#IPPROTO_IGMP
 
IPPROTO_IGMP


	)

48 
	mIPPROTO_IPIP
 = 4,

49 
	#IPPROTO_IPIP
 
IPPROTO_IPIP


	)

50 
	mIPPROTO_TCP
 = 6,

51 
	#IPPROTO_TCP
 
IPPROTO_TCP


	)

52 
	mIPPROTO_EGP
 = 8,

53 
	#IPPROTO_EGP
 
IPPROTO_EGP


	)

54 
	mIPPROTO_PUP
 = 12,

55 
	#IPPROTO_PUP
 
IPPROTO_PUP


	)

56 
	mIPPROTO_UDP
 = 17,

57 
	#IPPROTO_UDP
 
IPPROTO_UDP


	)

58 
	mIPPROTO_IDP
 = 22,

59 
	#IPPROTO_IDP
 
IPPROTO_IDP


	)

60 
	mIPPROTO_TP
 = 29,

61 
	#IPPROTO_TP
 
IPPROTO_TP


	)

62 
	mIPPROTO_DCCP
 = 33,

63 
	#IPPROTO_DCCP
 
IPPROTO_DCCP


	)

64 
	mIPPROTO_IPV6
 = 41,

65 
	#IPPROTO_IPV6
 
IPPROTO_IPV6


	)

66 
	mIPPROTO_RSVP
 = 46,

67 
	#IPPROTO_RSVP
 
IPPROTO_RSVP


	)

68 
	mIPPROTO_GRE
 = 47,

69 
	#IPPROTO_GRE
 
IPPROTO_GRE


	)

70 
	mIPPROTO_ESP
 = 50,

71 
	#IPPROTO_ESP
 
IPPROTO_ESP


	)

72 
	mIPPROTO_AH
 = 51,

73 
	#IPPROTO_AH
 
IPPROTO_AH


	)

74 
	mIPPROTO_MTP
 = 92,

75 
	#IPPROTO_MTP
 
IPPROTO_MTP


	)

76 
	mIPPROTO_BEETPH
 = 94,

77 
	#IPPROTO_BEETPH
 
IPPROTO_BEETPH


	)

78 
	mIPPROTO_ENCAP
 = 98,

79 
	#IPPROTO_ENCAP
 
IPPROTO_ENCAP


	)

80 
	mIPPROTO_PIM
 = 103,

81 
	#IPPROTO_PIM
 
IPPROTO_PIM


	)

82 
	mIPPROTO_COMP
 = 108,

83 
	#IPPROTO_COMP
 
IPPROTO_COMP


	)

84 
	mIPPROTO_SCTP
 = 132,

85 
	#IPPROTO_SCTP
 
IPPROTO_SCTP


	)

86 
	mIPPROTO_UDPLITE
 = 136,

87 
	#IPPROTO_UDPLITE
 
IPPROTO_UDPLITE


	)

88 
	mIPPROTO_MPLS
 = 137,

89 
	#IPPROTO_MPLS
 
IPPROTO_MPLS


	)

90 
	mIPPROTO_RAW
 = 255,

91 
	#IPPROTO_RAW
 
IPPROTO_RAW


	)

92 
	mIPPROTO_MAX


98 #i‡!
__USE_KERNEL_IPV6_DEFS


101 
	mIPPROTO_HOPOPTS
 = 0,

102 
	#IPPROTO_HOPOPTS
 
IPPROTO_HOPOPTS


	)

103 
	mIPPROTO_ROUTING
 = 43,

104 
	#IPPROTO_ROUTING
 
IPPROTO_ROUTING


	)

105 
	mIPPROTO_FRAGMENT
 = 44,

106 
	#IPPROTO_FRAGMENT
 
IPPROTO_FRAGMENT


	)

107 
	mIPPROTO_ICMPV6
 = 58,

108 
	#IPPROTO_ICMPV6
 
IPPROTO_ICMPV6


	)

109 
	mIPPROTO_NONE
 = 59,

110 
	#IPPROTO_NONE
 
IPPROTO_NONE


	)

111 
	mIPPROTO_DSTOPTS
 = 60,

112 
	#IPPROTO_DSTOPTS
 
IPPROTO_DSTOPTS


	)

113 
	mIPPROTO_MH
 = 135

114 
	#IPPROTO_MH
 
IPPROTO_MH


	)

119 
uöt16_t
 
	tö_p‹t_t
;

124 
	mIPPORT_ECHO
 = 7,

125 
	mIPPORT_DISCARD
 = 9,

126 
	mIPPORT_SYSTAT
 = 11,

127 
	mIPPORT_DAYTIME
 = 13,

128 
	mIPPORT_NETSTAT
 = 15,

129 
	mIPPORT_FTP
 = 21,

130 
	mIPPORT_TELNET
 = 23,

131 
	mIPPORT_SMTP
 = 25,

132 
	mIPPORT_TIMESERVER
 = 37,

133 
	mIPPORT_NAMESERVER
 = 42,

134 
	mIPPORT_WHOIS
 = 43,

135 
	mIPPORT_MTP
 = 57,

137 
	mIPPORT_TFTP
 = 69,

138 
	mIPPORT_RJE
 = 77,

139 
	mIPPORT_FINGER
 = 79,

140 
	mIPPORT_TTYLINK
 = 87,

141 
	mIPPORT_SUPDUP
 = 95,

144 
	mIPPORT_EXECSERVER
 = 512,

145 
	mIPPORT_LOGINSERVER
 = 513,

146 
	mIPPORT_CMDSERVER
 = 514,

147 
	mIPPORT_EFSSERVER
 = 520,

150 
	mIPPORT_BIFFUDP
 = 512,

151 
	mIPPORT_WHOSERVER
 = 513,

152 
	mIPPORT_ROUTESERVER
 = 520,

155 
	mIPPORT_RESERVED
 = 1024,

158 
	mIPPORT_USERRESERVED
 = 5000

166 
	#IN_CLASSA
(
a
Ë((((
ö_addr_t
)◊)Ë& 0x80000000Ë=0)

	)

167 
	#IN_CLASSA_NET
 0xff000000

	)

168 
	#IN_CLASSA_NSHIFT
 24

	)

169 
	#IN_CLASSA_HOST
 (0xfffffff‡& ~
IN_CLASSA_NET
)

	)

170 
	#IN_CLASSA_MAX
 128

	)

172 
	#IN_CLASSB
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xc0000000Ë=0x80000000)

	)

173 
	#IN_CLASSB_NET
 0xffff0000

	)

174 
	#IN_CLASSB_NSHIFT
 16

	)

175 
	#IN_CLASSB_HOST
 (0xfffffff‡& ~
IN_CLASSB_NET
)

	)

176 
	#IN_CLASSB_MAX
 65536

	)

178 
	#IN_CLASSC
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xe0000000Ë=0xc0000000)

	)

179 
	#IN_CLASSC_NET
 0xffffff00

	)

180 
	#IN_CLASSC_NSHIFT
 8

	)

181 
	#IN_CLASSC_HOST
 (0xfffffff‡& ~
IN_CLASSC_NET
)

	)

183 
	#IN_CLASSD
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xf0000000Ë=0xe0000000)

	)

184 
	#IN_MULTICAST
(
a
Ë
	`IN_CLASSD
◊)

	)

186 
	#IN_EXPERIMENTAL
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xe0000000Ë=0xe0000000)

	)

187 
	#IN_BADCLASS
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xf0000000Ë=0xf0000000)

	)

190 
	#INADDR_ANY
 ((
ö_addr_t
Ë0x00000000)

	)

192 
	#INADDR_BROADCAST
 ((
ö_addr_t
Ë0xffffffff)

	)

194 
	#INADDR_NONE
 ((
ö_addr_t
Ë0xffffffff)

	)

197 
	#IN_LOOPBACKNET
 127

	)

199 #i‚de‡
INADDR_LOOPBACK


200 
	#INADDR_LOOPBACK
 ((
ö_addr_t
Ë0x7f000001Ë

	)

204 
	#INADDR_UNSPEC_GROUP
 ((
ö_addr_t
Ë0xe0000000Ë

	)

205 
	#INADDR_ALLHOSTS_GROUP
 ((
ö_addr_t
Ë0xe0000001Ë

	)

206 
	#INADDR_ALLRTRS_GROUP
 ((
ö_addr_t
Ë0xe0000002Ë

	)

207 
	#INADDR_ALLSNOOPERS_GROUP
 ((
ö_addr_t
Ë0xe000006aË

	)

208 
	#INADDR_MAX_LOCAL_GROUP
 ((
ö_addr_t
Ë0xe00000ffË

	)

210 #i‡!
__USE_KERNEL_IPV6_DEFS


212 
	sö6_addr


216 
uöt8_t
 
	m__u6_addr8
[16];

217 
uöt16_t
 
	m__u6_addr16
[8];

218 
uöt32_t
 
	m__u6_addr32
[4];

219 } 
	m__ö6_u
;

220 
	#s6_addr
 
__ö6_u
.
__u6_addr8


	)

221 #ifde‡
__USE_MISC


222 
	#s6_addr16
 
__ö6_u
.
__u6_addr16


	)

223 
	#s6_addr32
 
__ö6_u
.
__u6_addr32


	)

228 c⁄° 
ö6_addr
 
ö6addr_™y
;

229 c⁄° 
ö6_addr
 
ö6addr_lo›back
;

230 
	#IN6ADDR_ANY_INIT
 { { { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } } }

	)

231 
	#IN6ADDR_LOOPBACK_INIT
 { { { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1 } } }

	)

233 
	#INET_ADDRSTRLEN
 16

	)

234 
	#INET6_ADDRSTRLEN
 46

	)

238 
	ssockaddr_ö


240 
__SOCKADDR_COMMON
 (
sö_
);

241 
ö_p‹t_t
 
	msö_p‹t
;

242 
ö_addr
 
	msö_addr
;

245 
	msö_zîo
[ (
sockaddr
)

246 - 
__SOCKADDR_COMMON_SIZE


247 -  (
ö_p‹t_t
)

248 -  (
ö_addr
)];

251 #i‡!
__USE_KERNEL_IPV6_DEFS


253 
	ssockaddr_ö6


255 
__SOCKADDR_COMMON
 (
sö6_
);

256 
ö_p‹t_t
 
	msö6_p‹t
;

257 
uöt32_t
 
	msö6_Êowöfo
;

258 
ö6_addr
 
	msö6_addr
;

259 
uöt32_t
 
	msö6_sc›e_id
;

263 #ifde‡
__USE_MISC


265 
	sù_mªq


268 
ö_addr
 
	mimr_mu…üddr
;

271 
ö_addr
 
	mimr_öãrÁ˚
;

274 
	sù_mªq_sour˚


277 
ö_addr
 
	mimr_mu…üddr
;

280 
ö_addr
 
	mimr_öãrÁ˚
;

283 
ö_addr
 
	mimr_sour˚addr
;

287 #i‡!
__USE_KERNEL_IPV6_DEFS


289 
	sùv6_mªq


292 
ö6_addr
 
	mùv6mr_mu…üddr
;

295 
	mùv6mr_öãrÁ˚
;

299 #ifde‡
__USE_MISC


301 
	sgroup_ªq


304 
uöt32_t
 
	mgr_öãrÁ˚
;

307 
sockaddr_°‹age
 
	mgr_group
;

310 
	sgroup_sour˚_ªq


313 
uöt32_t
 
	mg§_öãrÁ˚
;

316 
sockaddr_°‹age
 
	mg§_group
;

319 
sockaddr_°‹age
 
	mg§_sour˚
;

324 
	sù_msfûãr


327 
ö_addr
 
	mimsf_mu…üddr
;

330 
ö_addr
 
	mimsf_öãrÁ˚
;

333 
uöt32_t
 
	mimsf_fmode
;

336 
uöt32_t
 
	mimsf_num§c
;

338 
ö_addr
 
	mimsf_¶i°
[1];

341 
	#IP_MSFILTER_SIZE
(
num§c
Ë( (
ù_msfûãr
) \

342 -  (
ö_addr
) \

343 + (
num§c
Ë*  (
ö_addr
))

	)

345 
	sgroup_fûãr


348 
uöt32_t
 
	mgf_öãrÁ˚
;

351 
sockaddr_°‹age
 
	mgf_group
;

354 
uöt32_t
 
	mgf_fmode
;

357 
uöt32_t
 
	mgf_num§c
;

359 
sockaddr_°‹age
 
	mgf_¶i°
[1];

362 
	#GROUP_FILTER_SIZE
(
num§c
Ë( (
group_fûãr
) \

363 -  (
sockaddr_°‹age
) \

364 + ((
num§c
) \

365 *  (
sockaddr_°‹age
)))

	)

375 
uöt32_t
 
	$¡ohl
 (
uöt32_t
 
__√é⁄g
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

376 
uöt16_t
 
	$¡ohs
 (
uöt16_t
 
__√tsh‹t
)

377 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

378 
uöt32_t
 
	$ht⁄l
 (
uöt32_t
 
__ho°l⁄g
)

379 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

380 
uöt16_t
 
	$ht⁄s
 (
uöt16_t
 
__ho°sh‹t
)

381 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

383 
	~<ídün.h
>

386 
	~<bôs/byãsw≠.h
>

387 
	~<bôs/uöä-idítôy.h
>

389 #ifde‡
__OPTIMIZE__


393 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


396 
	#¡ohl
(
x
Ë
	`__uöt32_idítôy
 (x)

	)

397 
	#¡ohs
(
x
Ë
	`__uöt16_idítôy
 (x)

	)

398 
	#ht⁄l
(
x
Ë
	`__uöt32_idítôy
 (x)

	)

399 
	#ht⁄s
(
x
Ë
	`__uöt16_idítôy
 (x)

	)

401 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


402 
	#¡ohl
(
x
Ë
	`__bsw≠_32
 (x)

	)

403 
	#¡ohs
(
x
Ë
	`__bsw≠_16
 (x)

	)

404 
	#ht⁄l
(
x
Ë
	`__bsw≠_32
 (x)

	)

405 
	#ht⁄s
(
x
Ë
	`__bsw≠_16
 (x)

	)

410 #ifde‡
__GNUC__


411 
	#IN6_IS_ADDR_UNSPECIFIED
(
a
) \

412 (
__exãnsi⁄__
 \

413 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

414 
__a
->
__ö6_u
.
__u6_addr32
[0] == 0 \

415 && 
__a
->
__ö6_u
.
__u6_addr32
[1] == 0 \

416 && 
__a
->
__ö6_u
.
__u6_addr32
[2] == 0 \

417 && 
__a
->
__ö6_u
.
__u6_addr32
[3] =0; 
	}
}))

	)

419 
	#IN6_IS_ADDR_LOOPBACK
(
a
) \

420 (
__exãnsi⁄__
 \

421 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

422 
__a
->
__ö6_u
.
__u6_addr32
[0] == 0 \

423 && 
__a
->
__ö6_u
.
__u6_addr32
[1] == 0 \

424 && 
__a
->
__ö6_u
.
__u6_addr32
[2] == 0 \

425 && 
__a
->
__ö6_u
.
__u6_addr32
[3] =
	`ht⁄l
 (1); }))

	)

427 
	#IN6_IS_ADDR_LINKLOCAL
(
a
) \

428 (
__exãnsi⁄__
 \

429 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

430 (
__a
->
__ö6_u
.
__u6_addr32
[0] & 
	`ht⁄l
 (0xffc00000)Ë=ht⁄»(0x„800000); }))

	)

432 
	#IN6_IS_ADDR_SITELOCAL
(
a
) \

433 (
__exãnsi⁄__
 \

434 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

435 (
__a
->
__ö6_u
.
__u6_addr32
[0] & 
	`ht⁄l
 (0xffc00000)Ë=ht⁄»(0x„c00000); }))

	)

437 
	#IN6_IS_ADDR_V4MAPPED
(
a
) \

438 (
__exãnsi⁄__
 \

439 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

440 
__a
->
__ö6_u
.
__u6_addr32
[0] == 0 \

441 && 
__a
->
__ö6_u
.
__u6_addr32
[1] == 0 \

442 && 
__a
->
__ö6_u
.
__u6_addr32
[2] =
	`ht⁄l
 (0xffff); }))

	)

444 
	#IN6_IS_ADDR_V4COMPAT
(
a
) \

445 (
__exãnsi⁄__
 \

446 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

447 
__a
->
__ö6_u
.
__u6_addr32
[0] == 0 \

448 && 
__a
->
__ö6_u
.
__u6_addr32
[1] == 0 \

449 && 
__a
->
__ö6_u
.
__u6_addr32
[2] == 0 \

450 && 
	`¡ohl
 (
__a
->
__ö6_u
.
__u6_addr32
[3]Ë> 1; }))

	)

452 
	#IN6_ARE_ADDR_EQUAL
(
a
,
b
) \

453 (
__exãnsi⁄__
 \

454 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

455 c⁄° 
ö6_addr
 *
__b
 = (c⁄° ö6_add∏*Ë(
b
); \

456 
__a
->
__ö6_u
.
__u6_addr32
[0] =
__b
->__in6_u.__u6_addr32[0] \

457 && 
__a
->
__ö6_u
.
__u6_addr32
[1] =
__b
->__in6_u.__u6_addr32[1] \

458 && 
__a
->
__ö6_u
.
__u6_addr32
[2] =
__b
->__in6_u.__u6_addr32[2] \

459 && 
__a
->
__ö6_u
.
__u6_addr32
[3] =
__b
->__ö6_u.__u6_addr32[3]; }))

	)

461 
	#IN6_IS_ADDR_UNSPECIFIED
(
a
) \

462 (((c⁄° 
uöt32_t
 *Ë(
a
))[0] == 0 \

463 && ((c⁄° 
uöt32_t
 *Ë(
a
))[1] == 0 \

464 && ((c⁄° 
uöt32_t
 *Ë(
a
))[2] == 0 \

465 && ((c⁄° 
uöt32_t
 *Ë(
a
))[3] =0)

	)

467 
	#IN6_IS_ADDR_LOOPBACK
(
a
) \

468 (((c⁄° 
uöt32_t
 *Ë(
a
))[0] == 0 \

469 && ((c⁄° 
uöt32_t
 *Ë(
a
))[1] == 0 \

470 && ((c⁄° 
uöt32_t
 *Ë(
a
))[2] == 0 \

471 && ((c⁄° 
uöt32_t
 *Ë(
a
))[3] =
	`ht⁄l
 (1))

	)

473 
	#IN6_IS_ADDR_LINKLOCAL
(
a
) \

474 ((((c⁄° 
uöt32_t
 *Ë(
a
))[0] & 
	`ht⁄l
 (0xffc00000)) \

475 =
	`ht⁄l
 (0x„800000))

	)

477 
	#IN6_IS_ADDR_SITELOCAL
(
a
) \

478 ((((c⁄° 
uöt32_t
 *Ë(
a
))[0] & 
	`ht⁄l
 (0xffc00000)) \

479 =
	`ht⁄l
 (0x„c00000))

	)

481 
	#IN6_IS_ADDR_V4MAPPED
(
a
) \

482 ((((c⁄° 
uöt32_t
 *Ë(
a
))[0] == 0) \

483 && (((c⁄° 
uöt32_t
 *Ë(
a
))[1] == 0) \

484 && (((c⁄° 
uöt32_t
 *Ë(
a
))[2] =
	`ht⁄l
 (0xffff)))

	)

486 
	#IN6_IS_ADDR_V4COMPAT
(
a
) \

487 ((((c⁄° 
uöt32_t
 *Ë(
a
))[0] == 0) \

488 && (((c⁄° 
uöt32_t
 *Ë(
a
))[1] == 0) \

489 && (((c⁄° 
uöt32_t
 *Ë(
a
))[2] == 0) \

490 && (
	`¡ohl
 (((c⁄° 
uöt32_t
 *Ë(
a
))[3]Ë> 1))

	)

492 
	#IN6_ARE_ADDR_EQUAL
(
a
,
b
) \

493 ((((c⁄° 
uöt32_t
 *Ë(
a
))[0] =((c⁄° uöt32_à*Ë(
b
))[0]) \

494 && (((c⁄° 
uöt32_t
 *Ë(
a
))[1] =((c⁄° uöt32_à*Ë(
b
))[1]) \

495 && (((c⁄° 
uöt32_t
 *Ë(
a
))[2] =((c⁄° uöt32_à*Ë(
b
))[2]) \

496 && (((c⁄° 
uöt32_t
 *Ë(
a
))[3] =((c⁄° uöt32_à*Ë(
b
))[3]))

	)

499 
	#IN6_IS_ADDR_MULTICAST
(
a
Ë(((c⁄° 
uöt8_t
 *Ë◊))[0] =0xff)

	)

501 #ifde‡
__USE_MISC


503 
	$bödªsvp‹t
 (
__sockfd
, 
sockaddr_ö
 *
__sock_ö
Ë
__THROW
;

506 
	$bödªsvp‹t6
 (
__sockfd
, 
sockaddr_ö6
 *
__sock_ö
)

507 
__THROW
;

511 
	#IN6_IS_ADDR_MC_NODELOCAL
(
a
) \

512 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

513 && ((((c⁄° 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x1))

	)

515 
	#IN6_IS_ADDR_MC_LINKLOCAL
(
a
) \

516 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

517 && ((((c⁄° 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x2))

	)

519 
	#IN6_IS_ADDR_MC_SITELOCAL
(
a
) \

520 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

521 && ((((c⁄° 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x5))

	)

523 
	#IN6_IS_ADDR_MC_ORGLOCAL
(
a
) \

524 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

525 && ((((c⁄° 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x8))

	)

527 
	#IN6_IS_ADDR_MC_GLOBAL
(
a
) \

528 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

529 && ((((c⁄° 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0xe))

	)

532 #ifde‡
__USE_GNU


533 
cmsghdr
;

535 #i‡!
__USE_KERNEL_IPV6_DEFS


537 
	sö6_pktöfo


539 
ö6_addr
 
ùi6_addr
;

540 
ùi6_ifödex
;

544 
	sù6_mtuöfo


546 
sockaddr_ö6
 
ù6m_addr
;

547 
uöt32_t
 
ù6m_mtu
;

552 
	$öë6_›ti⁄_•a˚
 (
__nbyãs
)

553 
__THROW
 
__©åibuã_dïªˇãd__
;

554 
	$öë6_›ti⁄_öô
 (*
__bp
, 
cmsghdr
 **
__cmsgp
,

555 
__ty≥
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

556 
	$öë6_›ti⁄_≠≥nd
 (
cmsghdr
 *
__cmsg
,

557 c⁄° 
uöt8_t
 *
__ty≥p
, 
__mu…x
,

558 
__∂usy
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

559 
uöt8_t
 *
	$öë6_›ti⁄_Æloc
 (
cmsghdr
 *
__cmsg
, 
__d©Æí
,

560 
__mu…x
, 
__∂usy
)

561 
__THROW
 
__©åibuã_dïªˇãd__
;

562 
	$öë6_›ti⁄_√xt
 (c⁄° 
cmsghdr
 *
__cmsg
,

563 
uöt8_t
 **
__çåp
)

564 
__THROW
 
__©åibuã_dïªˇãd__
;

565 
	$öë6_›ti⁄_föd
 (c⁄° 
cmsghdr
 *
__cmsg
,

566 
uöt8_t
 **
__çåp
, 
__ty≥
)

567 
__THROW
 
__©åibuã_dïªˇãd__
;

571 
	$öë6_›t_öô
 (*
__extbuf
, 
sockÀn_t
 
__exéí
Ë
__THROW
;

572 
	$öë6_›t_≠≥nd
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
,

573 
uöt8_t
 
__ty≥
, 
sockÀn_t
 
__Àn
, uöt8_à
__Æign
,

574 **
__d©abuÂ
Ë
__THROW
;

575 
	$öë6_›t_föish
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
)

576 
__THROW
;

577 
	$öë6_›t_£t_vÆ
 (*
__d©abuf
, 
__off£t
, *
__vÆ
,

578 
sockÀn_t
 
__vÆÀn
Ë
__THROW
;

579 
	$öë6_›t_√xt
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
,

580 
uöt8_t
 *
__ty≥p
, 
sockÀn_t
 *
__À≈
,

581 **
__d©abuÂ
Ë
__THROW
;

582 
	$öë6_›t_föd
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
,

583 
uöt8_t
 
__ty≥
, 
sockÀn_t
 *
__À≈
,

584 **
__d©abuÂ
Ë
__THROW
;

585 
	$öë6_›t_gë_vÆ
 (*
__d©abuf
, 
__off£t
, *
__vÆ
,

586 
sockÀn_t
 
__vÆÀn
Ë
__THROW
;

590 
sockÀn_t
 
	$öë6_πh_•a˚
 (
__ty≥
, 
__£gmíts
Ë
__THROW
;

591 *
	$öë6_πh_öô
 (*
__bp
, 
sockÀn_t
 
__bp_Àn
, 
__ty≥
,

592 
__£gmíts
Ë
__THROW
;

593 
	$öë6_πh_add
 (*
__bp
, c⁄° 
ö6_addr
 *
__addr
Ë
__THROW
;

594 
	$öë6_πh_ªvî£
 (c⁄° *
__ö
, *
__out
Ë
__THROW
;

595 
	$öë6_πh_£gmíts
 (c⁄° *
__bp
Ë
__THROW
;

596 
ö6_addr
 *
	$öë6_πh_gëaddr
 (c⁄° *
__bp
, 
__ödex
)

597 
__THROW
;

603 
	$gëùv4sour˚fûãr
 (
__s
, 
ö_addr
 
__öãrÁ˚_addr
,

604 
ö_addr
 
__group
, 
uöt32_t
 *
__fmode
,

605 
uöt32_t
 *
__num§c
, 
ö_addr
 *
__¶i°
)

606 
__THROW
;

609 
	$£tùv4sour˚fûãr
 (
__s
, 
ö_addr
 
__öãrÁ˚_addr
,

610 
ö_addr
 
__group
, 
uöt32_t
 
__fmode
,

611 
uöt32_t
 
__num§c
,

612 c⁄° 
ö_addr
 *
__¶i°
)

613 
__THROW
;

617 
	$gësour˚fûãr
 (
__s
, 
uöt32_t
 
__öãrÁ˚_addr
,

618 c⁄° 
sockaddr
 *
__group
,

619 
sockÀn_t
 
__grou∂í
, 
uöt32_t
 *
__fmode
,

620 
uöt32_t
 *
__num§c
,

621 
sockaddr_°‹age
 *
__¶i°
Ë
__THROW
;

624 
	$£tsour˚fûãr
 (
__s
, 
uöt32_t
 
__öãrÁ˚_addr
,

625 c⁄° 
sockaddr
 *
__group
,

626 
sockÀn_t
 
__grou∂í
, 
uöt32_t
 
__fmode
,

627 
uöt32_t
 
__num§c
,

628 c⁄° 
sockaddr_°‹age
 *
__¶i°
Ë
__THROW
;

631 
__END_DECLS


	@/usr/include/pthread.h

18 #i‚de‡
_PTHREAD_H


19 
	#_PTHREAD_H
 1

	)

21 
	~<„©uªs.h
>

22 
	~<sched.h
>

23 
	~<time.h
>

25 
	~<bôs/ídün.h
>

26 
	~<bôs/±hªadty≥s.h
>

27 
	~<bôs/£tjmp.h
>

28 
	~<bôs/w‹dsize.h
>

29 
	~<bôs/ty≥s/°ru˘_time•ec.h
>

35 
	mPTHREAD_CREATE_JOINABLE
,

36 
	#PTHREAD_CREATE_JOINABLE
 
PTHREAD_CREATE_JOINABLE


	)

37 
	mPTHREAD_CREATE_DETACHED


38 
	#PTHREAD_CREATE_DETACHED
 
PTHREAD_CREATE_DETACHED


	)

45 
	mPTHREAD_MUTEX_TIMED_NP
,

46 
	mPTHREAD_MUTEX_RECURSIVE_NP
,

47 
	mPTHREAD_MUTEX_ERRORCHECK_NP
,

48 
	mPTHREAD_MUTEX_ADAPTIVE_NP


49 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


51 
	mPTHREAD_MUTEX_NORMAL
 = 
PTHREAD_MUTEX_TIMED_NP
,

52 
	mPTHREAD_MUTEX_RECURSIVE
 = 
PTHREAD_MUTEX_RECURSIVE_NP
,

53 
	mPTHREAD_MUTEX_ERRORCHECK
 = 
PTHREAD_MUTEX_ERRORCHECK_NP
,

54 
	mPTHREAD_MUTEX_DEFAULT
 = 
PTHREAD_MUTEX_NORMAL


56 #ifde‡
__USE_GNU


58 , 
	mPTHREAD_MUTEX_FAST_NP
 = 
PTHREAD_MUTEX_TIMED_NP


63 #ifde‡
__USE_XOPEN2K


67 
	mPTHREAD_MUTEX_STALLED
,

68 
	mPTHREAD_MUTEX_STALLED_NP
 = 
PTHREAD_MUTEX_STALLED
,

69 
	mPTHREAD_MUTEX_ROBUST
,

70 
	mPTHREAD_MUTEX_ROBUST_NP
 = 
PTHREAD_MUTEX_ROBUST


75 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


79 
	mPTHREAD_PRIO_NONE
,

80 
	mPTHREAD_PRIO_INHERIT
,

81 
	mPTHREAD_PRIO_PROTECT


86 
	#PTHREAD_MUTEX_INITIALIZER
 \

87 { { 
	`__PTHREAD_MUTEX_INITIALIZER
 (
PTHREAD_MUTEX_TIMED_NP
Ë} }

	)

88 #ifde‡
__USE_GNU


89 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
 \

90 { { 
	`__PTHREAD_MUTEX_INITIALIZER
 (
PTHREAD_MUTEX_RECURSIVE_NP
Ë} }

	)

91 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
 \

92 { { 
	`__PTHREAD_MUTEX_INITIALIZER
 (
PTHREAD_MUTEX_ERRORCHECK_NP
Ë} }

	)

93 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

94 { { 
	`__PTHREAD_MUTEX_INITIALIZER
 (
PTHREAD_MUTEX_ADAPTIVE_NP
Ë} }

	)

99 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


102 
	mPTHREAD_RWLOCK_PREFER_READER_NP
,

103 
	mPTHREAD_RWLOCK_PREFER_WRITER_NP
,

104 
	mPTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
,

105 
	mPTHREAD_RWLOCK_DEFAULT_NP
 = 
PTHREAD_RWLOCK_PREFER_READER_NP


110 
	#PTHREAD_RWLOCK_INITIALIZER
 \

111 { { 
	`__PTHREAD_RWLOCK_INITIALIZER
 (
PTHREAD_RWLOCK_DEFAULT_NP
Ë} }

	)

112 #ifde‡
__USE_GNU


113 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

114 { { 
	`__PTHREAD_RWLOCK_INITIALIZER
 (
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
Ë} }

	)

122 
	mPTHREAD_INHERIT_SCHED
,

123 
	#PTHREAD_INHERIT_SCHED
 
PTHREAD_INHERIT_SCHED


	)

124 
	mPTHREAD_EXPLICIT_SCHED


125 
	#PTHREAD_EXPLICIT_SCHED
 
PTHREAD_EXPLICIT_SCHED


	)

132 
	mPTHREAD_SCOPE_SYSTEM
,

133 
	#PTHREAD_SCOPE_SYSTEM
 
PTHREAD_SCOPE_SYSTEM


	)

134 
	mPTHREAD_SCOPE_PROCESS


135 
	#PTHREAD_SCOPE_PROCESS
 
PTHREAD_SCOPE_PROCESS


	)

142 
	mPTHREAD_PROCESS_PRIVATE
,

143 
	#PTHREAD_PROCESS_PRIVATE
 
PTHREAD_PROCESS_PRIVATE


	)

144 
	mPTHREAD_PROCESS_SHARED


145 
	#PTHREAD_PROCESS_SHARED
 
PTHREAD_PROCESS_SHARED


	)

151 
	#PTHREAD_COND_INITIALIZER
 { { {0}, {0}, {0, 0}, {0, 0}, 0, 0, {0, 0} } }

	)

155 
	s_±hªad_˛ónup_buf„r


157 (*
	m__routöe
) (*);

158 *
	m__¨g
;

159 
	m__ˇn˚…y≥
;

160 
_±hªad_˛ónup_buf„r
 *
	m__¥ev
;

166 
	mPTHREAD_CANCEL_ENABLE
,

167 
	#PTHREAD_CANCEL_ENABLE
 
PTHREAD_CANCEL_ENABLE


	)

168 
	mPTHREAD_CANCEL_DISABLE


169 
	#PTHREAD_CANCEL_DISABLE
 
PTHREAD_CANCEL_DISABLE


	)

173 
	mPTHREAD_CANCEL_DEFERRED
,

174 
	#PTHREAD_CANCEL_DEFERRED
 
PTHREAD_CANCEL_DEFERRED


	)

175 
	mPTHREAD_CANCEL_ASYNCHRONOUS


176 
	#PTHREAD_CANCEL_ASYNCHRONOUS
 
PTHREAD_CANCEL_ASYNCHRONOUS


	)

178 
	#PTHREAD_CANCELED
 ((*Ë-1)

	)

182 
	#PTHREAD_ONCE_INIT
 0

	)

185 #ifde‡
__USE_XOPEN2K


189 
	#PTHREAD_BARRIER_SERIAL_THREAD
 -1

	)

193 
__BEGIN_DECLS


198 
	$±hªad_¸óã
 (
±hªad_t
 *
__ª°ri˘
 
__√wthªad
,

199 c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

200 *(*
__°¨t_routöe
) (*),

201 *
__ª°ri˘
 
__¨g
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 3));

207 
	$±hªad_exô
 (*
__ªtvÆ
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

215 
	`±hªad_joö
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
);

217 #ifde‡
__USE_GNU


220 
	$±hªad_åyjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
Ë
__THROW
;

228 
	`±hªad_timedjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
,

229 c⁄° 
time•ec
 *
__ab°ime
);

238 
	`±hªad_˛ockjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
,

239 
˛ockid_t
 
__˛ockid
,

240 c⁄° 
time•ec
 *
__ab°ime
);

247 
	$±hªad_dëach
 (
±hªad_t
 
__th
Ë
__THROW
;

251 
±hªad_t
 
	$±hªad_£lf
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

254 
	$±hªad_equÆ
 (
±hªad_t
 
__thªad1
,Öthªad_à
__thªad2
)

255 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

263 
	$±hªad_©å_öô
 (
±hªad_©å_t
 *
__©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

266 
	$±hªad_©å_de°roy
 (
±hªad_©å_t
 *
__©å
)

267 
__THROW
 
	`__n⁄nuŒ
 ((1));

270 
	$±hªad_©å_gëdëach°©e
 (c⁄° 
±hªad_©å_t
 *
__©å
,

271 *
__dëach°©e
)

272 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

275 
	$±hªad_©å_£tdëach°©e
 (
±hªad_©å_t
 *
__©å
,

276 
__dëach°©e
)

277 
__THROW
 
	`__n⁄nuŒ
 ((1));

281 
	$±hªad_©å_gëgu¨dsize
 (c⁄° 
±hªad_©å_t
 *
__©å
,

282 
size_t
 *
__gu¨dsize
)

283 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

286 
	$±hªad_©å_£tgu¨dsize
 (
±hªad_©å_t
 *
__©å
,

287 
size_t
 
__gu¨dsize
)

288 
__THROW
 
	`__n⁄nuŒ
 ((1));

292 
	$±hªad_©å_gësched∑øm
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

293 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

294 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

297 
	$±hªad_©å_£tsched∑øm
 (
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

298 c⁄° 
sched_∑øm
 *
__ª°ri˘


299 
__∑øm
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

302 
	$±hªad_©å_gëschedpﬁicy
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


303 
__©å
, *
__ª°ri˘
 
__pﬁicy
)

304 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

307 
	$±hªad_©å_£tschedpﬁicy
 (
±hªad_©å_t
 *
__©å
, 
__pﬁicy
)

308 
__THROW
 
	`__n⁄nuŒ
 ((1));

311 
	$±hªad_©å_gëöhîôsched
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


312 
__©å
, *
__ª°ri˘
 
__öhîô
)

313 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

316 
	$±hªad_©å_£töhîôsched
 (
±hªad_©å_t
 *
__©å
,

317 
__öhîô
)

318 
__THROW
 
	`__n⁄nuŒ
 ((1));

322 
	$±hªad_©å_gësc›e
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

323 *
__ª°ri˘
 
__sc›e
)

324 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

327 
	$±hªad_©å_£tsc›e
 (
±hªad_©å_t
 *
__©å
, 
__sc›e
)

328 
__THROW
 
	`__n⁄nuŒ
 ((1));

331 
	$±hªad_©å_gë°ackaddr
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


332 
__©å
, **
__ª°ri˘
 
__°ackaddr
)

333 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__©åibuã_dïªˇãd__
;

339 
	$±hªad_©å_£t°ackaddr
 (
±hªad_©å_t
 *
__©å
,

340 *
__°ackaddr
)

341 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
;

344 
	$±hªad_©å_gë°acksize
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


345 
__©å
, 
size_t
 *
__ª°ri˘
 
__°acksize
)

346 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

351 
	$±hªad_©å_£t°acksize
 (
±hªad_©å_t
 *
__©å
,

352 
size_t
 
__°acksize
)

353 
__THROW
 
	`__n⁄nuŒ
 ((1));

355 #ifde‡
__USE_XOPEN2K


357 
	$±hªad_©å_gë°ack
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

358 **
__ª°ri˘
 
__°ackaddr
,

359 
size_t
 *
__ª°ri˘
 
__°acksize
)

360 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

365 
	$±hªad_©å_£t°ack
 (
±hªad_©å_t
 *
__©å
, *
__°ackaddr
,

366 
size_t
 
__°acksize
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

369 #ifde‡
__USE_GNU


372 
	$±hªad_©å_£èfföôy_≈
 (
±hªad_©å_t
 *
__©å
,

373 
size_t
 
__˝u£tsize
,

374 c⁄° 
˝u_£t_t
 *
__˝u£t
)

375 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

379 
	$±hªad_©å_gëafföôy_≈
 (c⁄° 
±hªad_©å_t
 *
__©å
,

380 
size_t
 
__˝u£tsize
,

381 
˝u_£t_t
 *
__˝u£t
)

382 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

385 
	$±hªad_gë©å_deÁu…_≈
 (
±hªad_©å_t
 *
__©å
)

386 
__THROW
 
	`__n⁄nuŒ
 ((1));

390 
	$±hªad_£èâr_deÁu…_≈
 (c⁄° 
±hªad_©å_t
 *
__©å
)

391 
__THROW
 
	`__n⁄nuŒ
 ((1));

396 
	$±hªad_gë©å_≈
 (
±hªad_t
 
__th
, 
±hªad_©å_t
 *
__©å
)

397 
__THROW
 
	`__n⁄nuŒ
 ((2));

405 
	$±hªad_£tsched∑øm
 (
±hªad_t
 
__èrgë_thªad
, 
__pﬁicy
,

406 c⁄° 
sched_∑øm
 *
__∑øm
)

407 
__THROW
 
	`__n⁄nuŒ
 ((3));

410 
	$±hªad_gësched∑øm
 (
±hªad_t
 
__èrgë_thªad
,

411 *
__ª°ri˘
 
__pﬁicy
,

412 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

413 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

416 
	$±hªad_£tsched¥io
 (
±hªad_t
 
__èrgë_thªad
, 
__¥io
)

417 
__THROW
;

420 #ifde‡
__USE_GNU


422 
	$±hªad_gë«me_≈
 (
±hªad_t
 
__èrgë_thªad
, *
__buf
,

423 
size_t
 
__buÊí
)

424 
__THROW
 
	`__n⁄nuŒ
 ((2));

427 
	$±hªad_£äame_≈
 (
±hªad_t
 
__èrgë_thªad
, c⁄° *
__«me
)

428 
__THROW
 
	`__n⁄nuŒ
 ((2));

432 #ifde‡
__USE_UNIX98


434 
	$±hªad_gëc⁄cuºícy
 (Ë
__THROW
;

437 
	$±hªad_£tc⁄cuºícy
 (
__Àvñ
Ë
__THROW
;

440 #ifde‡
__USE_GNU


445 
	$±hªad_yõld
 (Ë
__THROW
;

450 
	$±hªad_£èfföôy_≈
 (
±hªad_t
 
__th
, 
size_t
 
__˝u£tsize
,

451 c⁄° 
˝u_£t_t
 *
__˝u£t
)

452 
__THROW
 
	`__n⁄nuŒ
 ((3));

455 
	$±hªad_gëafföôy_≈
 (
±hªad_t
 
__th
, 
size_t
 
__˝u£tsize
,

456 
˝u_£t_t
 *
__˝u£t
)

457 
__THROW
 
	`__n⁄nuŒ
 ((3));

470 
	$±hªad_⁄˚
 (
±hªad_⁄˚_t
 *
__⁄˚_c⁄åﬁ
,

471 (*
__öô_routöe
Ë()Ë
	`__n⁄nuŒ
 ((1, 2));

482 
	`±hªad_£tˇn˚l°©e
 (
__°©e
, *
__ﬁd°©e
);

486 
	`±hªad_£tˇn˚…y≥
 (
__ty≥
, *
__ﬁdty≥
);

489 
	`±hªad_ˇn˚l
 (
±hªad_t
 
__th
);

494 
	`±hªad_ã°ˇn˚l
 ();

503 
__jmp_buf
 
__ˇn˚l_jmp_buf
;

504 
__mask_was_ßved
;

505 } 
__ˇn˚l_jmp_buf
[1];

506 *
__∑d
[4];

507 } 
	t__±hªad_unwöd_buf_t
 
	t__©åibuã__
 ((
	t__Æig√d__
));

510 #i‚de‡
__˛ónup_f˘_©åibuã


511 
	#__˛ónup_f˘_©åibuã


	)

516 
	s__±hªad_˛ónup_‰ame


518 (*
__ˇn˚l_routöe
) (*);

519 *
__ˇn˚l_¨g
;

520 
__do_ô
;

521 
__ˇn˚l_ty≥
;

524 #i‡
deföed
 
__GNUC__
 && deföed 
__EXCEPTIONS


525 #ifde‡
__˝lu•lus


527 ˛as†
	c__±hªad_˛ónup_˛ass


529 (*
__ˇn˚l_routöe
) (*);

530 *
__ˇn˚l_¨g
;

531 
__do_ô
;

532 
__ˇn˚l_ty≥
;

534 
public
:

535 
	$__±hªad_˛ónup_˛ass
 ((*
__f˘
Ë(*), *
__¨g
)

536 : 
	`__ˇn˚l_routöe
 (
__f˘
), 
	`__ˇn˚l_¨g
 (
__¨g
), 
	$__do_ô
 (1) { }

537 ~
	$__±hªad_˛ónup_˛ass
 (Ë{ i‡(
__do_ô
Ë
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); 
	}
}

538 
	$__£tdoô
 (
__√wvÆ
Ë{ 
__do_ô
 = __√wvÆ; 
	}
}

539 
	$__de„r
 (Ë{ 
	`±hªad_£tˇn˚…y≥
 (
PTHREAD_CANCEL_DEFERRED
,

540 &
__ˇn˚l_ty≥
); 
	}
}

541 
	$__ª°‹e
 (Ëc⁄° { 
	`±hªad_£tˇn˚…y≥
 (
__ˇn˚l_ty≥
, 0); 
	}
}

551 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

553 
__±hªad_˛ónup_˛ass
 
	`__˛‰ame
 (
routöe
, 
¨g
)

	)

557 
	#±hªad_˛ónup_p›
(
execuã
) \

558 
__˛‰ame
.
	`__£tdoô
 (
execuã
); \

559 } 0)

	)

561 #ifde‡
__USE_GNU


565 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

567 
__±hªad_˛ónup_˛ass
 
	`__˛‰ame
 (
routöe
, 
¨g
); \

568 
__˛‰ame
.
	`__de„r
 ()

	)

573 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

574 
__˛‰ame
.
	`__ª°‹e
 (); \

575 
__˛‰ame
.
	`__£tdoô
 (
execuã
); \

576 } 0)

	)

583 
__exã∫_ölöe
 

584 
	$__±hªad_˛ónup_routöe
 (
__±hªad_˛ónup_‰ame
 *
__‰ame
)

586 i‡(
__‰ame
->
__do_ô
)

587 
__‰ame
->
	`__ˇn˚l_routöe
 (__‰ame->
__ˇn˚l_¨g
);

588 
	}
}

597 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

599 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

600 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__±hªad_˛ónup_routöe
))) \

601 { .
__ˇn˚l_routöe
 = (
routöe
), .
__ˇn˚l_¨g
 = (
¨g
), \

602 .
__do_ô
 = 1 };

	)

606 
	#±hªad_˛ónup_p›
(
execuã
) \

607 
__˛‰ame
.
__do_ô
 = (
execuã
); \

608 } 0)

	)

610 #ifde‡
__USE_GNU


614 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

616 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

617 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__±hªad_˛ónup_routöe
))) \

618 { .
__ˇn˚l_routöe
 = (
routöe
), .
__ˇn˚l_¨g
 = (
¨g
), \

619 .
__do_ô
 = 1 }; \

620 (Ë
	`±hªad_£tˇn˚…y≥
 (
PTHREAD_CANCEL_DEFERRED
, \

621 &
__˛‰ame
.
__ˇn˚l_ty≥
)

	)

626 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

627 (Ë
	`±hªad_£tˇn˚…y≥
 (
__˛‰ame
.
__ˇn˚l_ty≥
, 
NULL
); \

628 
__˛‰ame
.
__do_ô
 = (
execuã
); \

629 } 0)

	)

640 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

642 
__±hªad_unwöd_buf_t
 
__ˇn˚l_buf
; \

643 (*
__ˇn˚l_routöe
Ë(*Ë(
routöe
); \

644 *
__ˇn˚l_¨g
 = (
¨g
); \

645 
__nŸ_fú°_ˇŒ
 = 
	`__sig£tjmp
 ((
__jmp_buf_èg
 *) (*) \

646 
__ˇn˚l_buf
.
__ˇn˚l_jmp_buf
, 0); \

647 i‡(
	`__glibc_u∆ikñy
 (
__nŸ_fú°_ˇŒ
)) \

649 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

650 
	`__±hªad_unwöd_√xt
 (&
__ˇn˚l_buf
); \

654 
	`__±hªad_ªgi°î_ˇn˚l
 (&
__ˇn˚l_buf
); \

655 dÿ{

	)

656 
__±hªad_ªgi°î_ˇn˚l
 (
__±hªad_unwöd_buf_t
 *
__buf
)

657 
__˛ónup_f˘_©åibuã
;

661 
	#±hªad_˛ónup_p›
(
execuã
) \

664 
	`__±hªad_uƒegi°î_ˇn˚l
 (&
__ˇn˚l_buf
); \

665 i‡(
execuã
) \

666 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

667 } 0)

	)

668 
	$__±hªad_uƒegi°î_ˇn˚l
 (
__±hªad_unwöd_buf_t
 *
__buf
)

669 
__˛ónup_f˘_©åibuã
;

671 #ifde‡
__USE_GNU


675 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

677 
__±hªad_unwöd_buf_t
 
__ˇn˚l_buf
; \

678 (*
__ˇn˚l_routöe
Ë(*Ë(
routöe
); \

679 *
__ˇn˚l_¨g
 = (
¨g
); \

680 
__nŸ_fú°_ˇŒ
 = 
	`__sig£tjmp
 ((
__jmp_buf_èg
 *) (*) \

681 
__ˇn˚l_buf
.
__ˇn˚l_jmp_buf
, 0); \

682 i‡(
	`__glibc_u∆ikñy
 (
__nŸ_fú°_ˇŒ
)) \

684 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

685 
	`__±hªad_unwöd_√xt
 (&
__ˇn˚l_buf
); \

689 
	`__±hªad_ªgi°î_ˇn˚l_de„r
 (&
__ˇn˚l_buf
); \

690 dÿ{

	)

691 
	`__±hªad_ªgi°î_ˇn˚l_de„r
 (
__±hªad_unwöd_buf_t
 *
__buf
)

692 
__˛ónup_f˘_©åibuã
;

697 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

700 
	`__±hªad_uƒegi°î_ˇn˚l_ª°‹e
 (&
__ˇn˚l_buf
); \

701 i‡(
execuã
) \

702 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

703 
	}
} 0)

	)

704 
	$__±hªad_uƒegi°î_ˇn˚l_ª°‹e
 (
__±hªad_unwöd_buf_t
 *
__buf
)

705 
__˛ónup_f˘_©åibuã
;

709 
	$__±hªad_unwöd_√xt
 (
__±hªad_unwöd_buf_t
 *
__buf
)

710 
__˛ónup_f˘_©åibuã
 
	`__©åibuã__
 ((
__n‹ëu∫__
))

711 #i‚de‡
SHARED


712 
	`__©åibuã__
 ((
__wók__
))

718 
__jmp_buf_èg
;

719 
	$__sig£tjmp
 (
__jmp_buf_èg
 *
__ív
, 
__ßvemask
Ë
__THROWNL
;

725 
	$±hªad_muãx_öô
 (
±hªad_muãx_t
 *
__muãx
,

726 c⁄° 
±hªad_muãx©å_t
 *
__muãx©å
)

727 
__THROW
 
	`__n⁄nuŒ
 ((1));

730 
	$±hªad_muãx_de°roy
 (
±hªad_muãx_t
 *
__muãx
)

731 
__THROW
 
	`__n⁄nuŒ
 ((1));

734 
	$±hªad_muãx_åylock
 (
±hªad_muãx_t
 *
__muãx
)

735 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

738 
	$±hªad_muãx_lock
 (
±hªad_muãx_t
 *
__muãx
)

739 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

741 #ifde‡
__USE_XOPEN2K


743 
	$±hªad_muãx_timedlock
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

744 c⁄° 
time•ec
 *
__ª°ri˘


745 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 2));

748 #ifde‡
__USE_GNU


749 
	$±hªad_muãx_˛ocklock
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

750 
˛ockid_t
 
__˛ockid
,

751 c⁄° 
time•ec
 *
__ª°ri˘


752 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 3));

756 
	$±hªad_muãx_u∆ock
 (
±hªad_muãx_t
 *
__muãx
)

757 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

761 
	$±hªad_muãx_gë¥io˚ûög
 (c⁄° 
±hªad_muãx_t
 *

762 
__ª°ri˘
 
__muãx
,

763 *
__ª°ri˘
 
__¥io˚ûög
)

764 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

768 
	$±hªad_muãx_£çrio˚ûög
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

769 
__¥io˚ûög
,

770 *
__ª°ri˘
 
__ﬁd_˚ûög
)

771 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

774 #ifde‡
__USE_XOPEN2K8


776 
	$±hªad_muãx_c⁄si°ít
 (
±hªad_muãx_t
 *
__muãx
)

777 
__THROW
 
	`__n⁄nuŒ
 ((1));

778 #ifde‡
__USE_GNU


779 
	$±hªad_muãx_c⁄si°ít_≈
 (
±hªad_muãx_t
 *
__muãx
)

780 
__THROW
 
	`__n⁄nuŒ
 ((1));

789 
	$±hªad_muãx©å_öô
 (
±hªad_muãx©å_t
 *
__©å
)

790 
__THROW
 
	`__n⁄nuŒ
 ((1));

793 
	$±hªad_muãx©å_de°roy
 (
±hªad_muãx©å_t
 *
__©å
)

794 
__THROW
 
	`__n⁄nuŒ
 ((1));

797 
	$±hªad_muãx©å_gëpsh¨ed
 (c⁄° 
±hªad_muãx©å_t
 *

798 
__ª°ri˘
 
__©å
,

799 *
__ª°ri˘
 
__psh¨ed
)

800 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

803 
	$±hªad_muãx©å_£çsh¨ed
 (
±hªad_muãx©å_t
 *
__©å
,

804 
__psh¨ed
)

805 
__THROW
 
	`__n⁄nuŒ
 ((1));

807 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


809 
	$±hªad_muãx©å_gëty≥
 (c⁄° 
±hªad_muãx©å_t
 *
__ª°ri˘


810 
__©å
, *
__ª°ri˘
 
__köd
)

811 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

816 
	$±hªad_muãx©å_£ây≥
 (
±hªad_muãx©å_t
 *
__©å
, 
__köd
)

817 
__THROW
 
	`__n⁄nuŒ
 ((1));

821 
	$±hªad_muãx©å_gë¥Ÿocﬁ
 (c⁄° 
±hªad_muãx©å_t
 *

822 
__ª°ri˘
 
__©å
,

823 *
__ª°ri˘
 
__¥Ÿocﬁ
)

824 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

828 
	$±hªad_muãx©å_£çrŸocﬁ
 (
±hªad_muãx©å_t
 *
__©å
,

829 
__¥Ÿocﬁ
)

830 
__THROW
 
	`__n⁄nuŒ
 ((1));

833 
	$±hªad_muãx©å_gë¥io˚ûög
 (c⁄° 
±hªad_muãx©å_t
 *

834 
__ª°ri˘
 
__©å
,

835 *
__ª°ri˘
 
__¥io˚ûög
)

836 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

839 
	$±hªad_muãx©å_£çrio˚ûög
 (
±hªad_muãx©å_t
 *
__©å
,

840 
__¥io˚ûög
)

841 
__THROW
 
	`__n⁄nuŒ
 ((1));

843 #ifde‡
__USE_XOPEN2K


845 
	$±hªad_muãx©å_gërobu°
 (c⁄° 
±hªad_muãx©å_t
 *
__©å
,

846 *
__robu°√ss
)

847 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

848 #ifde‡
__USE_GNU


849 
	$±hªad_muãx©å_gërobu°_≈
 (c⁄° 
±hªad_muãx©å_t
 *
__©å
,

850 *
__robu°√ss
)

851 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

855 
	$±hªad_muãx©å_£åobu°
 (
±hªad_muãx©å_t
 *
__©å
,

856 
__robu°√ss
)

857 
__THROW
 
	`__n⁄nuŒ
 ((1));

858 #ifde‡
__USE_GNU


859 
	$±hªad_muãx©å_£åobu°_≈
 (
±hªad_muãx©å_t
 *
__©å
,

860 
__robu°√ss
)

861 
__THROW
 
	`__n⁄nuŒ
 ((1));

866 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


871 
	$±hªad_rwlock_öô
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

872 c⁄° 
±hªad_rwlock©å_t
 *
__ª°ri˘


873 
__©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

876 
	$±hªad_rwlock_de°roy
 (
±hªad_rwlock_t
 *
__rwlock
)

877 
__THROW
 
	`__n⁄nuŒ
 ((1));

880 
	$±hªad_rwlock_rdlock
 (
±hªad_rwlock_t
 *
__rwlock
)

881 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

884 
	$±hªad_rwlock_åyrdlock
 (
±hªad_rwlock_t
 *
__rwlock
)

885 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

887 #ifde‡
__USE_XOPEN2K


889 
	$±hªad_rwlock_timedrdlock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

890 c⁄° 
time•ec
 *
__ª°ri˘


891 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 2));

894 #ifde‡
__USE_GNU


895 
	$±hªad_rwlock_˛ockrdlock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

896 
˛ockid_t
 
__˛ockid
,

897 c⁄° 
time•ec
 *
__ª°ri˘


898 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 3));

902 
	$±hªad_rwlock_wæock
 (
±hªad_rwlock_t
 *
__rwlock
)

903 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

906 
	$±hªad_rwlock_åywæock
 (
±hªad_rwlock_t
 *
__rwlock
)

907 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

909 #ifde‡
__USE_XOPEN2K


911 
	$±hªad_rwlock_timedwæock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

912 c⁄° 
time•ec
 *
__ª°ri˘


913 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 2));

916 #ifde‡
__USE_GNU


917 
	$±hªad_rwlock_˛ockwæock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

918 
˛ockid_t
 
__˛ockid
,

919 c⁄° 
time•ec
 *
__ª°ri˘


920 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 3));

924 
	$±hªad_rwlock_u∆ock
 (
±hªad_rwlock_t
 *
__rwlock
)

925 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

931 
	$±hªad_rwlock©å_öô
 (
±hªad_rwlock©å_t
 *
__©å
)

932 
__THROW
 
	`__n⁄nuŒ
 ((1));

935 
	$±hªad_rwlock©å_de°roy
 (
±hªad_rwlock©å_t
 *
__©å
)

936 
__THROW
 
	`__n⁄nuŒ
 ((1));

939 
	$±hªad_rwlock©å_gëpsh¨ed
 (c⁄° 
±hªad_rwlock©å_t
 *

940 
__ª°ri˘
 
__©å
,

941 *
__ª°ri˘
 
__psh¨ed
)

942 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

945 
	$±hªad_rwlock©å_£çsh¨ed
 (
±hªad_rwlock©å_t
 *
__©å
,

946 
__psh¨ed
)

947 
__THROW
 
	`__n⁄nuŒ
 ((1));

950 
	$±hªad_rwlock©å_gëköd_≈
 (c⁄° 
±hªad_rwlock©å_t
 *

951 
__ª°ri˘
 
__©å
,

952 *
__ª°ri˘
 
__¥ef
)

953 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

956 
	$±hªad_rwlock©å_£tköd_≈
 (
±hªad_rwlock©å_t
 *
__©å
,

957 
__¥ef
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

965 
	$±hªad_c⁄d_öô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

966 c⁄° 
±hªad_c⁄d©å_t
 *
__ª°ri˘
 
__c⁄d_©å
)

967 
__THROW
 
	`__n⁄nuŒ
 ((1));

970 
	$±hªad_c⁄d_de°roy
 (
±hªad_c⁄d_t
 *
__c⁄d
)

971 
__THROW
 
	`__n⁄nuŒ
 ((1));

974 
	$±hªad_c⁄d_sig«l
 (
±hªad_c⁄d_t
 *
__c⁄d
)

975 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

978 
	$±hªad_c⁄d_brﬂdˇ°
 (
±hªad_c⁄d_t
 *
__c⁄d
)

979 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

986 
	$±hªad_c⁄d_waô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

987 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
)

988 
	`__n⁄nuŒ
 ((1, 2));

997 
	$±hªad_c⁄d_timedwaô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

998 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

999 c⁄° 
time•ec
 *
__ª°ri˘
 
__ab°ime
)

1000 
	`__n⁄nuŒ
 ((1, 2, 3));

1002 #ifde‡
__USE_GNU


1010 
	$±hªad_c⁄d_˛ockwaô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

1011 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

1012 
__˛ockid_t
 
__˛ock_id
,

1013 c⁄° 
time•ec
 *
__ª°ri˘
 
__ab°ime
)

1014 
	`__n⁄nuŒ
 ((1, 2, 4));

1020 
	$±hªad_c⁄d©å_öô
 (
±hªad_c⁄d©å_t
 *
__©å
)

1021 
__THROW
 
	`__n⁄nuŒ
 ((1));

1024 
	$±hªad_c⁄d©å_de°roy
 (
±hªad_c⁄d©å_t
 *
__©å
)

1025 
__THROW
 
	`__n⁄nuŒ
 ((1));

1028 
	$±hªad_c⁄d©å_gëpsh¨ed
 (c⁄° 
±hªad_c⁄d©å_t
 *

1029 
__ª°ri˘
 
__©å
,

1030 *
__ª°ri˘
 
__psh¨ed
)

1031 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1034 
	$±hªad_c⁄d©å_£çsh¨ed
 (
±hªad_c⁄d©å_t
 *
__©å
,

1035 
__psh¨ed
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

1037 #ifde‡
__USE_XOPEN2K


1039 
	$±hªad_c⁄d©å_gë˛ock
 (c⁄° 
±hªad_c⁄d©å_t
 *

1040 
__ª°ri˘
 
__©å
,

1041 
__˛ockid_t
 *
__ª°ri˘
 
__˛ock_id
)

1042 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1045 
	$±hªad_c⁄d©å_£t˛ock
 (
±hªad_c⁄d©å_t
 *
__©å
,

1046 
__˛ockid_t
 
__˛ock_id
)

1047 
__THROW
 
	`__n⁄nuŒ
 ((1));

1051 #ifde‡
__USE_XOPEN2K


1056 
	$±hªad_•ö_öô
 (
±hªad_•ölock_t
 *
__lock
, 
__psh¨ed
)

1057 
__THROW
 
	`__n⁄nuŒ
 ((1));

1060 
	$±hªad_•ö_de°roy
 (
±hªad_•ölock_t
 *
__lock
)

1061 
__THROW
 
	`__n⁄nuŒ
 ((1));

1064 
	$±hªad_•ö_lock
 (
±hªad_•ölock_t
 *
__lock
)

1065 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1068 
	$±hªad_•ö_åylock
 (
±hªad_•ölock_t
 *
__lock
)

1069 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1072 
	$±hªad_•ö_u∆ock
 (
±hªad_•ölock_t
 *
__lock
)

1073 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1080 
	$±hªad_b¨rõr_öô
 (
±hªad_b¨rõr_t
 *
__ª°ri˘
 
__b¨rõr
,

1081 c⁄° 
±hªad_b¨rõøâr_t
 *
__ª°ri˘


1082 
__©å
, 
__cou¡
)

1083 
__THROW
 
	`__n⁄nuŒ
 ((1));

1086 
	$±hªad_b¨rõr_de°roy
 (
±hªad_b¨rõr_t
 *
__b¨rõr
)

1087 
__THROW
 
	`__n⁄nuŒ
 ((1));

1090 
	$±hªad_b¨rõr_waô
 (
±hªad_b¨rõr_t
 *
__b¨rõr
)

1091 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1095 
	$±hªad_b¨rõøâr_öô
 (
±hªad_b¨rõøâr_t
 *
__©å
)

1096 
__THROW
 
	`__n⁄nuŒ
 ((1));

1099 
	$±hªad_b¨rõøâr_de°roy
 (
±hªad_b¨rõøâr_t
 *
__©å
)

1100 
__THROW
 
	`__n⁄nuŒ
 ((1));

1103 
	$±hªad_b¨rõøâr_gëpsh¨ed
 (c⁄° 
±hªad_b¨rõøâr_t
 *

1104 
__ª°ri˘
 
__©å
,

1105 *
__ª°ri˘
 
__psh¨ed
)

1106 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1109 
	$±hªad_b¨rõøâr_£çsh¨ed
 (
±hªad_b¨rõøâr_t
 *
__©å
,

1110 
__psh¨ed
)

1111 
__THROW
 
	`__n⁄nuŒ
 ((1));

1123 
	$±hªad_key_¸óã
 (
±hªad_key_t
 *
__key
,

1124 (*
__de°r_fun˘i⁄
) (*))

1125 
__THROW
 
	`__n⁄nuŒ
 ((1));

1128 
	$±hªad_key_dñëe
 (
±hªad_key_t
 
__key
Ë
__THROW
;

1131 *
	$±hªad_gë•ecific
 (
±hªad_key_t
 
__key
Ë
__THROW
;

1134 
	$±hªad_£t•ecific
 (
±hªad_key_t
 
__key
,

1135 c⁄° *
__poöãr
Ë
__THROW
 ;

1138 #ifde‡
__USE_XOPEN2K


1140 
	$±hªad_gë˝u˛ockid
 (
±hªad_t
 
__thªad_id
,

1141 
__˛ockid_t
 *
__˛ock_id
)

1142 
__THROW
 
	`__n⁄nuŒ
 ((2));

1157 
	$±hªad_©f‹k
 ((*
__¥ï¨e
) (),

1158 (*
__∑ª¡
) (),

1159 (*
__chûd
Ë()Ë
__THROW
;

1162 #ifde‡
__USE_EXTERN_INLINES


1164 
__exã∫_ölöe
 

1165 
	`__NTH
 (
	$±hªad_equÆ
 (
±hªad_t
 
__thªad1
,Öthªad_à
__thªad2
))

1167  
__thªad1
 =
__thªad2
;

1168 
	}
}

1171 
	g__END_DECLS


	@/usr/include/sched.h

19 #i‚def 
_SCHED_H


20 
	#_SCHED_H
 1

	)

22 
	~<„©uªs.h
>

25 
	~<bôs/ty≥s.h
>

27 
	#__√ed_size_t


	)

28 
	#__√ed_NULL


	)

29 
	~<°ddef.h
>

31 
	~<bôs/ty≥s/time_t.h
>

32 
	~<bôs/ty≥s/°ru˘_time•ec.h
>

33 #i‚de‡
__USE_XOPEN2K


34 
	~<time.h
>

37 #i‚de‡
__pid_t_deföed


38 
__pid_t
 
	tpid_t
;

39 
	#__pid_t_deföed


	)

43 
	~<bôs/sched.h
>

44 
	~<bôs/˝u-£t.h
>

47 
	#sched_¥i‹ôy
 
sched_¥i‹ôy


	)

48 
	#__sched_¥i‹ôy
 
sched_¥i‹ôy


	)

51 
__BEGIN_DECLS


54 
	$sched_£ç¨am
 (
__pid_t
 
__pid
, c⁄° 
sched_∑øm
 *
__∑øm
)

55 
__THROW
;

58 
	$sched_gë∑øm
 (
__pid_t
 
__pid
, 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

61 
	$sched_£tscheduÀr
 (
__pid_t
 
__pid
, 
__pﬁicy
,

62 c⁄° 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

65 
	$sched_gëscheduÀr
 (
__pid_t
 
__pid
Ë
__THROW
;

68 
	$sched_yõld
 (Ë
__THROW
;

71 
	$sched_gë_¥i‹ôy_max
 (
__Æg‹ôhm
Ë
__THROW
;

74 
	$sched_gë_¥i‹ôy_mö
 (
__Æg‹ôhm
Ë
__THROW
;

77 
	$sched_º_gë_öãrvÆ
 (
__pid_t
 
__pid
, 
time•ec
 *
__t
Ë
__THROW
;

80 #ifde‡
__USE_GNU


82 
	#CPU_SETSIZE
 
__CPU_SETSIZE


	)

83 
	#CPU_SET
(
˝u
, 
˝u£ç
Ë
	`__CPU_SET_S
 (˝u,  (
˝u_£t_t
), cpu£ç)

	)

84 
	#CPU_CLR
(
˝u
, 
˝u£ç
Ë
	`__CPU_CLR_S
 (˝u,  (
˝u_£t_t
), cpu£ç)

	)

85 
	#CPU_ISSET
(
˝u
, 
˝u£ç
Ë
	`__CPU_ISSET_S
 (˝u,  (
˝u_£t_t
), \

86 
˝u£ç
)

	)

87 
	#CPU_ZERO
(
˝u£ç
Ë
	`__CPU_ZERO_S
 ( (
˝u_£t_t
), cpu£ç)

	)

88 
	#CPU_COUNT
(
˝u£ç
Ë
	`__CPU_COUNT_S
 ( (
˝u_£t_t
), cpu£ç)

	)

90 
	#CPU_SET_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_SET_S
 (˝u, sësize, cpu£ç)

	)

91 
	#CPU_CLR_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_CLR_S
 (˝u, sësize, cpu£ç)

	)

92 
	#CPU_ISSET_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_ISSET_S
 (cpu, setsize, \

93 
˝u£ç
)

	)

94 
	#CPU_ZERO_S
(
£tsize
, 
˝u£ç
Ë
	`__CPU_ZERO_S
 (£tsize, cpu£ç)

	)

95 
	#CPU_COUNT_S
(
£tsize
, 
˝u£ç
Ë
	`__CPU_COUNT_S
 (£tsize, cpu£ç)

	)

97 
	#CPU_EQUAL
(
˝u£ç1
, 
˝u£ç2
) \

98 
	`__CPU_EQUAL_S
 ( (
˝u_£t_t
), 
˝u£ç1
, 
˝u£ç2
)

	)

99 
	#CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

100 
	`__CPU_EQUAL_S
 (
£tsize
, 
˝u£ç1
, 
˝u£ç2
)

	)

102 
	#CPU_AND
(
de°£t
, 
§c£t1
, 
§c£t2
) \

103 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, &)

	)

104 
	#CPU_OR
(
de°£t
, 
§c£t1
, 
§c£t2
) \

105 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, |)

	)

106 
	#CPU_XOR
(
de°£t
, 
§c£t1
, 
§c£t2
) \

107 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, ^)

	)

108 
	#CPU_AND_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

109 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, &)

	)

110 
	#CPU_OR_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

111 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, |)

	)

112 
	#CPU_XOR_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

113 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, ^)

	)

115 
	#CPU_ALLOC_SIZE
(
cou¡
Ë
	`__CPU_ALLOC_SIZE
 (cou¡)

	)

116 
	#CPU_ALLOC
(
cou¡
Ë
	`__CPU_ALLOC
 (cou¡)

	)

117 
	#CPU_FREE
(
˝u£t
Ë
	`__CPU_FREE
 (˝u£t)

	)

121 
	$sched_£èfföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

122 c⁄° 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

125 
	$sched_gëafföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

126 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

129 
__END_DECLS


	@/usr/include/semaphore.h

18 #i‚de‡
_SEMAPHORE_H


19 
	#_SEMAPHORE_H
 1

	)

21 
	~<„©uªs.h
>

22 
	~<sys/ty≥s.h
>

23 #ifde‡
__USE_XOPEN2K


24 
	~<bôs/ty≥s/°ru˘_time•ec.h
>

28 
	~<bôs/£m≠h‹e.h
>

31 
__BEGIN_DECLS


35 
	$£m_öô
 (
£m_t
 *
__£m
, 
__psh¨ed
, 
__vÆue
)

36 
__THROW
 
	`__n⁄nuŒ
 ((1));

39 
	$£m_de°roy
 (
£m_t
 *
__£m
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

42 
£m_t
 *
	$£m_›í
 (c⁄° *
__«me
, 
__oÊag
, ...)

43 
__THROW
 
	`__n⁄nuŒ
 ((1));

46 
	$£m_˛o£
 (
£m_t
 *
__£m
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

49 
	$£m_u∆ök
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

55 
	$£m_waô
 (
£m_t
 *
__£m
Ë
	`__n⁄nuŒ
 ((1));

57 #ifde‡
__USE_XOPEN2K


62 
	$£m_timedwaô
 (
£m_t
 *
__ª°ri˘
 
__£m
,

63 c⁄° 
time•ec
 *
__ª°ri˘
 
__ab°ime
)

64 
	`__n⁄nuŒ
 ((1, 2));

67 #ifde‡
__USE_GNU


68 
	$£m_˛ockwaô
 (
£m_t
 *
__ª°ri˘
 
__£m
,

69 
˛ockid_t
 
˛ock
,

70 c⁄° 
time•ec
 *
__ª°ri˘
 
__ab°ime
)

71 
	`__n⁄nuŒ
 ((1, 3));

75 
	$£m_åywaô
 (
£m_t
 *
__£m
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1));

78 
	$£m_po°
 (
£m_t
 *
__£m
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1));

81 
	$£m_gëvÆue
 (
£m_t
 *
__ª°ri˘
 
__£m
, *__ª°ri˘ 
__svÆ
)

82 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

85 
__END_DECLS


	@/usr/include/signal.h

22 #i‚def 
_SIGNAL_H


23 
	#_SIGNAL_H


	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


29 
	~<bôs/ty≥s.h
>

30 
	~<bôs/signum.h
>

32 
	~<bôs/ty≥s/sig_©omic_t.h
>

34 #i‡
deföed
 
__USE_POSIX


35 
	~<bôs/ty≥s/sig£t_t.h
>

38 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


39 #i‚de‡
__pid_t_deföed


40 
__pid_t
 
	tpid_t
;

41 
	#__pid_t_deföed


	)

43 #ifde‡
__USE_XOPEN


45 #i‚de‡
__uid_t_deföed


46 
__uid_t
 
	tuid_t
;

47 
	#__uid_t_deföed


	)

51 #ifde‡
__USE_POSIX199309


53 
	~<bôs/ty≥s/°ru˘_time•ec.h
>

56 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_XOPEN_EXTENDED


57 
	~<bôs/ty≥s/sigöfo_t.h
>

58 
	~<bôs/sigöfo-c⁄°s.h
>

61 #ifde‡
__USE_MISC


62 
	~<bôs/ty≥s/sigvÆ_t.h
>

65 #ifde‡
__USE_POSIX199309


66 
	~<bôs/ty≥s/sigevít_t.h
>

67 
	~<bôs/sigevít-c⁄°s.h
>

72 (*
	t__sigh™dÀr_t
) ();

77 
__sigh™dÀr_t
 
	$__sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

78 
__THROW
;

79 #ifde‡
__USE_GNU


80 
__sigh™dÀr_t
 
	$sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

81 
__THROW
;

87 #ifde‡
__USE_MISC


88 
__sigh™dÀr_t
 
	$sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

89 
__THROW
;

92 #ifde‡
__REDIRECT_NTH


93 
__sigh™dÀr_t
 
	`__REDIRECT_NTH
 (
sig«l
,

94 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
),

95 
__sysv_sig«l
);

97 
	#sig«l
 
__sysv_sig«l


	)

101 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8


104 
__sigh™dÀr_t
 
	$bsd_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

105 
__THROW
;

111 #ifde‡
__USE_POSIX


112 
	$kûl
 (
__pid_t
 
__pid
, 
__sig
Ë
__THROW
;

115 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


119 
	$kûÕg
 (
__pid_t
 
__pgΩ
, 
__sig
Ë
__THROW
;

123 
	$øi£
 (
__sig
Ë
__THROW
;

125 #ifde‡
__USE_MISC


127 
__sigh™dÀr_t
 
	$ssig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

128 
__THROW
;

129 
	$gsig«l
 (
__sig
Ë
__THROW
;

132 #ifde‡
__USE_XOPEN2K8


134 
	`psig«l
 (
__sig
, c⁄° *
__s
);

137 
	`psigöfo
 (c⁄° 
sigöfo_t
 *
__pöfo
, c⁄° *
__s
);

149 #ifde‡
__USE_XOPEN_EXTENDED


150 #ifde‡
__GNUC__


151 
	$sig∑u£
 (
__sig
Ë
	`__asm__
 ("__xpg_sigpause");

153 
	`__sig∑u£
 (
__sig_‹_mask
, 
__is_sig
);

155 
	#sig∑u£
(
sig
Ë
	`__sig∑u£
 ((sig), 1)

	)

160 #ifde‡
__USE_MISC


167 
	#sigmask
(
sig
Ë(()(1u << ((sigË- 1)))

	)

170 
	$sigblock
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

173 
	$sig£tmask
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

176 
	$siggëmask
 (Ë
__THROW
 
__©åibuã_dïªˇãd__
;

180 #ifde‡
__USE_MISC


181 
	#NSIG
 
_NSIG


	)

184 #ifde‡
__USE_GNU


185 
__sigh™dÀr_t
 
	tsigh™dÀr_t
;

189 #ifde‡
__USE_MISC


190 
__sigh™dÀr_t
 
	tsig_t
;

193 #ifde‡
__USE_POSIX


196 
	$sigem±y£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

199 
	$sigfûl£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

202 
	$sigadd£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

205 
	$sigdñ£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

208 
	$sigismembî
 (c⁄° 
sig£t_t
 *
__£t
, 
__signo
)

209 
__THROW
 
	`__n⁄nuŒ
 ((1));

211 #ifde‡
__USE_GNU


213 
	$sigi£m±y£t
 (c⁄° 
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

216 
	$sig™d£t
 (
sig£t_t
 *
__£t
, c⁄° sig£t_à*
__À·
,

217 c⁄° 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

220 
	$sig‹£t
 (
sig£t_t
 *
__£t
, c⁄° sig£t_à*
__À·
,

221 c⁄° 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

226 
	~<bôs/siga˘i⁄.h
>

229 
	$sig¥ocmask
 (
__how
, c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
,

230 
sig£t_t
 *
__ª°ri˘
 
__o£t
Ë
__THROW
;

237 
	$sigsu•íd
 (c⁄° 
sig£t_t
 *
__£t
Ë
	`__n⁄nuŒ
 ((1));

240 
	$siga˘i⁄
 (
__sig
, c⁄° 
siga˘i⁄
 *
__ª°ri˘
 
__a˘
,

241 
siga˘i⁄
 *
__ª°ri˘
 
__ﬂ˘
Ë
__THROW
;

244 
	$sig≥ndög
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

247 #ifde‡
__USE_POSIX199506


252 
	$sigwaô
 (c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
, *__ª°ri˘ 
__sig
)

253 
	`__n⁄nuŒ
 ((1, 2));

256 #ifde‡
__USE_POSIX199309


261 
	$sigwaôöfo
 (c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
,

262 
sigöfo_t
 *
__ª°ri˘
 
__öfo
Ë
	`__n⁄nuŒ
 ((1));

269 
	$sigtimedwaô
 (c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
,

270 
sigöfo_t
 *
__ª°ri˘
 
__öfo
,

271 c⁄° 
time•ec
 *
__ª°ri˘
 
__timeout
)

272 
	`__n⁄nuŒ
 ((1));

276 
	$sigqueue
 (
__pid_t
 
__pid
, 
__sig
, c⁄° 
sigvÆ
 
__vÆ
)

277 
__THROW
;

282 #ifde‡
__USE_MISC


286 c⁄° *c⁄° 
_sys_sigli°
[
_NSIG
];

287 c⁄° *c⁄° 
sys_sigli°
[
_NSIG
];

291 
	~<bôs/sigc⁄ãxt.h
>

294 
	$sigªtu∫
 (
sigc⁄ãxt
 *
__s˝
Ë
__THROW
;

299 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


300 
	#__√ed_size_t


	)

301 
	~<°ddef.h
>

303 
	~<bôs/ty≥s/°ack_t.h
>

304 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


306 
	~<sys/uc⁄ãxt.h
>

310 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_MISC


314 
	$sigöãºu±
 (
__sig
, 
__öãºu±
Ë
__THROW
;

316 
	~<bôs/sig°ack.h
>

317 
	~<bôs/ss_Êags.h
>

321 
	$sigÆt°ack
 (c⁄° 
°ack_t
 *
__ª°ri˘
 
__ss
,

322 
°ack_t
 *
__ª°ri˘
 
__oss
Ë
__THROW
;

325 #i‡((
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

326 || 
deföed
 
__USE_MISC
)

327 
	~<bôs/ty≥s/°ru˘_sig°ack.h
>

330 #i‡((
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

331 || 
deföed
 
__USE_MISC
)

335 
	$sig°ack
 (
sig°ack
 *
__ss
, sig°ack *
__oss
)

336 
__THROW
 
__©åibuã_dïªˇãd__
;

339 #ifde‡
__USE_XOPEN_EXTENDED


343 
	$sighﬁd
 (
__sig
Ë
__THROW
;

346 
	$sigªl£
 (
__sig
Ë
__THROW
;

349 
	$sigign‹e
 (
__sig
Ë
__THROW
;

352 
__sigh™dÀr_t
 
	$sig£t
 (
__sig
, 
__sigh™dÀr_t
 
__di•
Ë
__THROW
;

355 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


358 
	~<bôs/±hªadty≥s.h
>

359 
	~<bôs/sigthªad.h
>

366 
	$__libc_cuºít_sigπmö
 (Ë
__THROW
;

368 
	$__libc_cuºít_sigπmax
 (Ë
__THROW
;

370 
	#SIGRTMIN
 (
	`__libc_cuºít_sigπmö
 ())

	)

371 
	#SIGRTMAX
 (
	`__libc_cuºít_sigπmax
 ())

	)

374 
	~<bôs/sig«l_ext.h
>

376 
__END_DECLS


	@/usr/include/stdint.h

22 #i‚de‡
_STDINT_H


23 
	#_STDINT_H
 1

	)

25 
	#__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION


	)

26 
	~<bôs/libc-hódî-°¨t.h
>

27 
	~<bôs/ty≥s.h
>

28 
	~<bôs/wch¨.h
>

29 
	~<bôs/w‹dsize.h
>

34 
	~<bôs/°döt-öä.h
>

37 
	~<bôs/°döt-uöä.h
>

43 
__öt_Àa°8_t
 
	töt_Àa°8_t
;

44 
__öt_Àa°16_t
 
	töt_Àa°16_t
;

45 
__öt_Àa°32_t
 
	töt_Àa°32_t
;

46 
__öt_Àa°64_t
 
	töt_Àa°64_t
;

49 
__uöt_Àa°8_t
 
	tuöt_Àa°8_t
;

50 
__uöt_Àa°16_t
 
	tuöt_Àa°16_t
;

51 
__uöt_Àa°32_t
 
	tuöt_Àa°32_t
;

52 
__uöt_Àa°64_t
 
	tuöt_Àa°64_t
;

58 sig√d 
	töt_Á°8_t
;

59 #i‡
__WORDSIZE
 == 64

60 
	töt_Á°16_t
;

61 
	töt_Á°32_t
;

62 
	töt_Á°64_t
;

64 
	töt_Á°16_t
;

65 
	töt_Á°32_t
;

66 
__exãnsi⁄__


67 
	töt_Á°64_t
;

71 
	tuöt_Á°8_t
;

72 #i‡
__WORDSIZE
 == 64

73 
	tuöt_Á°16_t
;

74 
	tuöt_Á°32_t
;

75 
	tuöt_Á°64_t
;

77 
	tuöt_Á°16_t
;

78 
	tuöt_Á°32_t
;

79 
__exãnsi⁄__


80 
	tuöt_Á°64_t
;

85 #i‡
__WORDSIZE
 == 64

86 #i‚de‡
__öçå_t_deföed


87 
	töçå_t
;

88 
	#__öçå_t_deföed


	)

90 
	tuöçå_t
;

92 #i‚de‡
__öçå_t_deföed


93 
	töçå_t
;

94 
	#__öçå_t_deföed


	)

96 
	tuöçå_t
;

101 
__ötmax_t
 
	tötmax_t
;

102 
__uötmax_t
 
	tuötmax_t
;

105 #i‡
__WORDSIZE
 == 64

106 
	#__INT64_C
(
c
Ë¯## 
L


	)

107 
	#__UINT64_C
(
c
Ë¯## 
UL


	)

109 
	#__INT64_C
(
c
Ë¯## 
LL


	)

110 
	#__UINT64_C
(
c
Ë¯## 
ULL


	)

116 
	#INT8_MIN
 (-128)

	)

117 
	#INT16_MIN
 (-32767-1)

	)

118 
	#INT32_MIN
 (-2147483647-1)

	)

119 
	#INT64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

121 
	#INT8_MAX
 (127)

	)

122 
	#INT16_MAX
 (32767)

	)

123 
	#INT32_MAX
 (2147483647)

	)

124 
	#INT64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

127 
	#UINT8_MAX
 (255)

	)

128 
	#UINT16_MAX
 (65535)

	)

129 
	#UINT32_MAX
 (4294967295U)

	)

130 
	#UINT64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

134 
	#INT_LEAST8_MIN
 (-128)

	)

135 
	#INT_LEAST16_MIN
 (-32767-1)

	)

136 
	#INT_LEAST32_MIN
 (-2147483647-1)

	)

137 
	#INT_LEAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

139 
	#INT_LEAST8_MAX
 (127)

	)

140 
	#INT_LEAST16_MAX
 (32767)

	)

141 
	#INT_LEAST32_MAX
 (2147483647)

	)

142 
	#INT_LEAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

145 
	#UINT_LEAST8_MAX
 (255)

	)

146 
	#UINT_LEAST16_MAX
 (65535)

	)

147 
	#UINT_LEAST32_MAX
 (4294967295U)

	)

148 
	#UINT_LEAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

152 
	#INT_FAST8_MIN
 (-128)

	)

153 #i‡
__WORDSIZE
 == 64

154 
	#INT_FAST16_MIN
 (-9223372036854775807L-1)

	)

155 
	#INT_FAST32_MIN
 (-9223372036854775807L-1)

	)

157 
	#INT_FAST16_MIN
 (-2147483647-1)

	)

158 
	#INT_FAST32_MIN
 (-2147483647-1)

	)

160 
	#INT_FAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

162 
	#INT_FAST8_MAX
 (127)

	)

163 #i‡
__WORDSIZE
 == 64

164 
	#INT_FAST16_MAX
 (9223372036854775807L)

	)

165 
	#INT_FAST32_MAX
 (9223372036854775807L)

	)

167 
	#INT_FAST16_MAX
 (2147483647)

	)

168 
	#INT_FAST32_MAX
 (2147483647)

	)

170 
	#INT_FAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

173 
	#UINT_FAST8_MAX
 (255)

	)

174 #i‡
__WORDSIZE
 == 64

175 
	#UINT_FAST16_MAX
 (18446744073709551615UL)

	)

176 
	#UINT_FAST32_MAX
 (18446744073709551615UL)

	)

178 
	#UINT_FAST16_MAX
 (4294967295U)

	)

179 
	#UINT_FAST32_MAX
 (4294967295U)

	)

181 
	#UINT_FAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

185 #i‡
__WORDSIZE
 == 64

186 
	#INTPTR_MIN
 (-9223372036854775807L-1)

	)

187 
	#INTPTR_MAX
 (9223372036854775807L)

	)

188 
	#UINTPTR_MAX
 (18446744073709551615UL)

	)

190 
	#INTPTR_MIN
 (-2147483647-1)

	)

191 
	#INTPTR_MAX
 (2147483647)

	)

192 
	#UINTPTR_MAX
 (4294967295U)

	)

197 
	#INTMAX_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

199 
	#INTMAX_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

202 
	#UINTMAX_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

208 #i‡
__WORDSIZE
 == 64

209 
	#PTRDIFF_MIN
 (-9223372036854775807L-1)

	)

210 
	#PTRDIFF_MAX
 (9223372036854775807L)

	)

212 #i‡
__WORDSIZE32_PTRDIFF_LONG


213 
	#PTRDIFF_MIN
 (-2147483647L-1)

	)

214 
	#PTRDIFF_MAX
 (2147483647L)

	)

216 
	#PTRDIFF_MIN
 (-2147483647-1)

	)

217 
	#PTRDIFF_MAX
 (2147483647)

	)

222 
	#SIG_ATOMIC_MIN
 (-2147483647-1)

	)

223 
	#SIG_ATOMIC_MAX
 (2147483647)

	)

226 #i‡
__WORDSIZE
 == 64

227 
	#SIZE_MAX
 (18446744073709551615UL)

	)

229 #i‡
__WORDSIZE32_SIZE_ULONG


230 
	#SIZE_MAX
 (4294967295UL)

	)

232 
	#SIZE_MAX
 (4294967295U)

	)

237 #i‚de‡
WCHAR_MIN


239 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

240 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

244 
	#WINT_MIN
 (0u)

	)

245 
	#WINT_MAX
 (4294967295u)

	)

248 
	#INT8_C
(
c
Ë
	)
c

249 
	#INT16_C
(
c
Ë
	)
c

250 
	#INT32_C
(
c
Ë
	)
c

251 #i‡
__WORDSIZE
 == 64

252 
	#INT64_C
(
c
Ë¯## 
L


	)

254 
	#INT64_C
(
c
Ë¯## 
LL


	)

258 
	#UINT8_C
(
c
Ë
	)
c

259 
	#UINT16_C
(
c
Ë
	)
c

260 
	#UINT32_C
(
c
Ë¯## 
U


	)

261 #i‡
__WORDSIZE
 == 64

262 
	#UINT64_C
(
c
Ë¯## 
UL


	)

264 
	#UINT64_C
(
c
Ë¯## 
ULL


	)

268 #i‡
__WORDSIZE
 == 64

269 
	#INTMAX_C
(
c
Ë¯## 
L


	)

270 
	#UINTMAX_C
(
c
Ë¯## 
UL


	)

272 
	#INTMAX_C
(
c
Ë¯## 
LL


	)

273 
	#UINTMAX_C
(
c
Ë¯## 
ULL


	)

276 #i‡
__GLIBC_USE
 (
IEC_60559_BFP_EXT_C2X
)

278 
	#INT8_WIDTH
 8

	)

279 
	#UINT8_WIDTH
 8

	)

280 
	#INT16_WIDTH
 16

	)

281 
	#UINT16_WIDTH
 16

	)

282 
	#INT32_WIDTH
 32

	)

283 
	#UINT32_WIDTH
 32

	)

284 
	#INT64_WIDTH
 64

	)

285 
	#UINT64_WIDTH
 64

	)

287 
	#INT_LEAST8_WIDTH
 8

	)

288 
	#UINT_LEAST8_WIDTH
 8

	)

289 
	#INT_LEAST16_WIDTH
 16

	)

290 
	#UINT_LEAST16_WIDTH
 16

	)

291 
	#INT_LEAST32_WIDTH
 32

	)

292 
	#UINT_LEAST32_WIDTH
 32

	)

293 
	#INT_LEAST64_WIDTH
 64

	)

294 
	#UINT_LEAST64_WIDTH
 64

	)

296 
	#INT_FAST8_WIDTH
 8

	)

297 
	#UINT_FAST8_WIDTH
 8

	)

298 
	#INT_FAST16_WIDTH
 
__WORDSIZE


	)

299 
	#UINT_FAST16_WIDTH
 
__WORDSIZE


	)

300 
	#INT_FAST32_WIDTH
 
__WORDSIZE


	)

301 
	#UINT_FAST32_WIDTH
 
__WORDSIZE


	)

302 
	#INT_FAST64_WIDTH
 64

	)

303 
	#UINT_FAST64_WIDTH
 64

	)

305 
	#INTPTR_WIDTH
 
__WORDSIZE


	)

306 
	#UINTPTR_WIDTH
 
__WORDSIZE


	)

308 
	#INTMAX_WIDTH
 64

	)

309 
	#UINTMAX_WIDTH
 64

	)

311 
	#PTRDIFF_WIDTH
 
__WORDSIZE


	)

312 
	#SIG_ATOMIC_WIDTH
 32

	)

313 
	#SIZE_WIDTH
 
__WORDSIZE


	)

314 
	#WCHAR_WIDTH
 32

	)

315 
	#WINT_WIDTH
 32

	)

	@/usr/include/stdio.h

23 #i‚de‡
_STDIO_H


24 
	#_STDIO_H
 1

	)

26 
	#__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION


	)

27 
	~<bôs/libc-hódî-°¨t.h
>

29 
	g__BEGIN_DECLS


31 
	#__√ed_size_t


	)

32 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

35 
	#__√ed___va_li°


	)

36 
	~<°d¨g.h
>

38 
	~<bôs/ty≥s.h
>

39 
	~<bôs/ty≥s/__Âos_t.h
>

40 
	~<bôs/ty≥s/__Âos64_t.h
>

41 
	~<bôs/ty≥s/__FILE.h
>

42 
	~<bôs/ty≥s/FILE.h
>

43 
	~<bôs/ty≥s/°ru˘_FILE.h
>

45 #ifde‡
__USE_GNU


46 
	~<bôs/ty≥s/cookõ_io_fun˘i⁄s_t.h
>

49 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


50 #ifde‡
__GNUC__


51 #i‚de‡
_VA_LIST_DEFINED


52 
__gnuc_va_li°
 
	tva_li°
;

53 
	#_VA_LIST_DEFINED


	)

56 
	~<°d¨g.h
>

60 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


61 #i‚de‡
__off_t_deföed


62 #i‚de‡
__USE_FILE_OFFSET64


63 
__off_t
 
	toff_t
;

65 
__off64_t
 
	toff_t
;

67 
	#__off_t_deföed


	)

69 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


70 
__off64_t
 
	toff64_t
;

71 
	#__off64_t_deföed


	)

75 #ifde‡
__USE_XOPEN2K8


76 #i‚de‡
__ssize_t_deföed


77 
__ssize_t
 
	tssize_t
;

78 
	#__ssize_t_deföed


	)

83 #i‚de‡
__USE_FILE_OFFSET64


84 
__Âos_t
 
	tÂos_t
;

86 
__Âos64_t
 
	tÂos_t
;

88 #ifde‡
__USE_LARGEFILE64


89 
__Âos64_t
 
	tÂos64_t
;

93 
	#_IOFBF
 0

	)

94 
	#_IOLBF
 1

	)

95 
	#_IONBF
 2

	)

99 
	#BUFSIZ
 8192

	)

104 
	#EOF
 (-1)

	)

109 
	#SEEK_SET
 0

	)

110 
	#SEEK_CUR
 1

	)

111 
	#SEEK_END
 2

	)

112 #ifde‡
__USE_GNU


113 
	#SEEK_DATA
 3

	)

114 
	#SEEK_HOLE
 4

	)

118 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


120 
	#P_tmpdú
 "/tmp"

	)

133 
	~<bôs/°dio_lim.h
>

137 
FILE
 *
°dö
;

138 
FILE
 *
°dout
;

139 
FILE
 *
°dîr
;

141 
	#°dö
 
°dö


	)

142 
	#°dout
 
°dout


	)

143 
	#°dîr
 
°dîr


	)

146 
	$ªmove
 (c⁄° *
__fûíame
Ë
__THROW
;

148 
	$ª«me
 (c⁄° *
__ﬁd
, c⁄° *
__√w
Ë
__THROW
;

150 #ifde‡
__USE_ATFILE


152 
	$ª«mót
 (
__ﬁdfd
, c⁄° *
__ﬁd
, 
__√wfd
,

153 c⁄° *
__√w
Ë
__THROW
;

156 #ifde‡
__USE_GNU


158 
	#RENAME_NOREPLACE
 (1 << 0)

	)

159 
	#RENAME_EXCHANGE
 (1 << 1)

	)

160 
	#RENAME_WHITEOUT
 (1 << 2)

	)

164 
	$ª«mót2
 (
__ﬁdfd
, c⁄° *
__ﬁd
, 
__√wfd
,

165 c⁄° *
__√w
, 
__Êags
Ë
__THROW
;

172 #i‚de‡
__USE_FILE_OFFSET64


173 
FILE
 *
	$tmpfûe
 (Ë
__wur
;

175 #ifde‡
__REDIRECT


176 
FILE
 *
	`__REDIRECT
 (
tmpfûe
, (), 
tmpfûe64
Ë
__wur
;

178 
	#tmpfûe
 
tmpfûe64


	)

182 #ifde‡
__USE_LARGEFILE64


183 
FILE
 *
	$tmpfûe64
 (Ë
__wur
;

187 *
	$tm≤am
 (*
__s
Ë
__THROW
 
__wur
;

189 #ifde‡
__USE_MISC


192 *
	$tm≤am_r
 (*
__s
Ë
__THROW
 
__wur
;

196 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


204 *
	$ãm≤am
 (c⁄° *
__dú
, c⁄° *
__pfx
)

205 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

213 
	`f˛o£
 (
FILE
 *
__°ªam
);

218 
	`fÊush
 (
FILE
 *
__°ªam
);

220 #ifde‡
__USE_MISC


227 
	`fÊush_u∆ocked
 (
FILE
 *
__°ªam
);

230 #ifde‡
__USE_GNU


237 
	`f˛o£Æl
 ();

241 #i‚de‡
__USE_FILE_OFFSET64


246 
FILE
 *
	$f›í
 (c⁄° *
__ª°ri˘
 
__fûíame
,

247 c⁄° *
__ª°ri˘
 
__modes
Ë
__wur
;

252 
FILE
 *
	$‰e›í
 (c⁄° *
__ª°ri˘
 
__fûíame
,

253 c⁄° *
__ª°ri˘
 
__modes
,

254 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

256 #ifde‡
__REDIRECT


257 
FILE
 *
	`__REDIRECT
 (
f›í
, (c⁄° *
__ª°ri˘
 
__fûíame
,

258 c⁄° *
__ª°ri˘
 
__modes
), 
f›í64
)

259 
__wur
;

260 
FILE
 *
	`__REDIRECT
 (
‰e›í
, (c⁄° *
__ª°ri˘
 
__fûíame
,

261 c⁄° *
__ª°ri˘
 
__modes
,

262 
FILE
 *
__ª°ri˘
 
__°ªam
), 
‰e›í64
)

263 
__wur
;

265 
	#f›í
 
f›í64


	)

266 
	#‰e›í
 
‰e›í64


	)

269 #ifde‡
__USE_LARGEFILE64


270 
FILE
 *
	$f›í64
 (c⁄° *
__ª°ri˘
 
__fûíame
,

271 c⁄° *
__ª°ri˘
 
__modes
Ë
__wur
;

272 
FILE
 *
	$‰e›í64
 (c⁄° *
__ª°ri˘
 
__fûíame
,

273 c⁄° *
__ª°ri˘
 
__modes
,

274 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

277 #ifdef 
__USE_POSIX


279 
FILE
 *
	$fd›í
 (
__fd
, c⁄° *
__modes
Ë
__THROW
 
__wur
;

282 #ifdef 
__USE_GNU


285 
FILE
 *
	$f›ícookõ
 (*
__ª°ri˘
 
__magic_cookõ
,

286 c⁄° *
__ª°ri˘
 
__modes
,

287 
cookõ_io_fun˘i⁄s_t
 
__io_funcs
Ë
__THROW
 
__wur
;

290 #i‡
deföed
 
__USE_XOPEN2K8
 || 
	`__GLIBC_USE
 (
LIB_EXT2
)

292 
FILE
 *
	$fmem›í
 (*
__s
, 
size_t
 
__Àn
, c⁄° *
__modes
)

293 
__THROW
 
__wur
;

298 
FILE
 *
	$›í_mem°ªam
 (**
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
 
__wur
;

304 
	$£tbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
Ë
__THROW
;

308 
	$£tvbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

309 
__modes
, 
size_t
 
__n
Ë
__THROW
;

311 #ifdef 
__USE_MISC


314 
	$£tbuf„r
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

315 
size_t
 
__size
Ë
__THROW
;

318 
	$£éöebuf
 (
FILE
 *
__°ªam
Ë
__THROW
;

326 
	`Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

327 c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

332 
	`¥ötf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

334 
	$•rötf
 (*
__ª°ri˘
 
__s
,

335 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROWNL
;

341 
	`vÂrötf
 (
FILE
 *
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

342 
__gnuc_va_li°
 
__¨g
);

347 
	`v¥ötf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, 
__gnuc_va_li°
 
__¨g
);

349 
	$v•rötf
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

350 
__gnuc_va_li°
 
__¨g
Ë
__THROWNL
;

352 #i‡
deföed
 
__USE_ISOC99
 || deföed 
__USE_UNIX98


354 
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

355 c⁄° *
__ª°ri˘
 
__f‹m©
, ...)

356 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

358 
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

359 c⁄° *
__ª°ri˘
 
__f‹m©
, 
__gnuc_va_li°
 
__¨g
)

360 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

363 #i‡
	`__GLIBC_USE
 (
LIB_EXT2
)

366 
	$va•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__f
,

367 
__gnuc_va_li°
 
__¨g
)

368 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 0))Ë
__wur
;

369 
	$__a•rötf
 (**
__ª°ri˘
 
__±r
,

370 c⁄° *
__ª°ri˘
 
__fmt
, ...)

371 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

372 
	$a•rötf
 (**
__ª°ri˘
 
__±r
,

373 c⁄° *
__ª°ri˘
 
__fmt
, ...)

374 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

377 #ifde‡
__USE_XOPEN2K8


379 
	$vd¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
,

380 
__gnuc_va_li°
 
__¨g
)

381 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

382 
	$d¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
, ...)

383 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

391 
	$fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

392 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

397 
	$sˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

399 
	$ssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

400 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

405 #i‡!
	`__GLIBC_USE
 (
DEPRECATED_SCANF
Ë&& !
deföed
 
__LDBL_COMPAT


406 #ifde‡
__REDIRECT


407 
	`__REDIRECT
 (
fsˇnf
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

408 c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

409 
__isoc99_fsˇnf
Ë
__wur
;

410 
	`__REDIRECT
 (
sˇnf
, (c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

411 
__isoc99_sˇnf
Ë
__wur
;

412 
	`__REDIRECT_NTH
 (
ssˇnf
, (c⁄° *
__ª°ri˘
 
__s
,

413 c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

414 
__isoc99_ssˇnf
);

416 
	$__isoc99_fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

417 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

418 
	$__isoc99_sˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

419 
	$__isoc99_ssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

420 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

421 
	#fsˇnf
 
__isoc99_fsˇnf


	)

422 
	#sˇnf
 
__isoc99_sˇnf


	)

423 
	#ssˇnf
 
__isoc99_ssˇnf


	)

427 #ifdef 
__USE_ISOC99


432 
	$vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

433 
__gnuc_va_li°
 
__¨g
)

434 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

440 
	$vsˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, 
__gnuc_va_li°
 
__¨g
)

441 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

444 
	$vssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

445 c⁄° *
__ª°ri˘
 
__f‹m©
, 
__gnuc_va_li°
 
__¨g
)

446 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

449 #i‡!
	`__GLIBC_USE
 (
DEPRECATED_SCANF
)

450 #i‡
deföed
 
__REDIRECT
 && !deföed 
__LDBL_COMPAT


451 
	`__REDIRECT
 (
vfsˇnf
,

452 (
FILE
 *
__ª°ri˘
 
__s
,

453 c⁄° *
__ª°ri˘
 
__f‹m©
, 
__gnuc_va_li°
 
__¨g
),

454 
__isoc99_vfsˇnf
)

455 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

456 
	`__REDIRECT
 (
vsˇnf
, (c⁄° *
__ª°ri˘
 
__f‹m©
,

457 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vsˇnf
)

458 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

459 
	`__REDIRECT_NTH
 (
vssˇnf
,

460 (c⁄° *
__ª°ri˘
 
__s
,

461 c⁄° *
__ª°ri˘
 
__f‹m©
,

462 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vssˇnf
)

463 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

464 #ñi‡!
deföed
 
__REDIRECT


465 
	$__isoc99_vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
,

466 c⁄° *
__ª°ri˘
 
__f‹m©
,

467 
__gnuc_va_li°
 
__¨g
Ë
__wur
;

468 
	$__isoc99_vsˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
,

469 
__gnuc_va_li°
 
__¨g
Ë
__wur
;

470 
	$__isoc99_vssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

471 c⁄° *
__ª°ri˘
 
__f‹m©
,

472 
__gnuc_va_li°
 
__¨g
Ë
__THROW
;

473 
	#vfsˇnf
 
__isoc99_vfsˇnf


	)

474 
	#vsˇnf
 
__isoc99_vsˇnf


	)

475 
	#vssˇnf
 
__isoc99_vssˇnf


	)

485 
	`fgëc
 (
FILE
 *
__°ªam
);

486 
	`gëc
 (
FILE
 *
__°ªam
);

492 
	`gëch¨
 ();

494 #ifde‡
__USE_POSIX199506


499 
	`gëc_u∆ocked
 (
FILE
 *
__°ªam
);

500 
	`gëch¨_u∆ocked
 ();

503 #ifde‡
__USE_MISC


510 
	`fgëc_u∆ocked
 (
FILE
 *
__°ªam
);

521 
	`Âutc
 (
__c
, 
FILE
 *
__°ªam
);

522 
	`putc
 (
__c
, 
FILE
 *
__°ªam
);

528 
	`putch¨
 (
__c
);

530 #ifde‡
__USE_MISC


537 
	`Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

540 #ifde‡
__USE_POSIX199506


545 
	`putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

546 
	`putch¨_u∆ocked
 (
__c
);

550 #i‡
deföed
 
__USE_MISC
 \

551 || (
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

553 
	`gëw
 (
FILE
 *
__°ªam
);

556 
	`putw
 (
__w
, 
FILE
 *
__°ªam
);

564 *
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

565 
__wur
;

567 #i‡
	`__GLIBC_USE
 (
DEPRECATED_GETS
)

577 *
	$gës
 (*
__s
Ë
__wur
 
__©åibuã_dïªˇãd__
;

580 #ifde‡
__USE_GNU


587 *
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
,

588 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

592 #i‡
deföed
 
__USE_XOPEN2K8
 || 
	`__GLIBC_USE
 (
LIB_EXT2
)

603 
__ssize_t
 
	$__gëdñim
 (**
__ª°ri˘
 
__löïå
,

604 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

605 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

606 
__ssize_t
 
	$gëdñim
 (**
__ª°ri˘
 
__löïå
,

607 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

608 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

616 
__ssize_t
 
	$gëlöe
 (**
__ª°ri˘
 
__löïå
,

617 
size_t
 *
__ª°ri˘
 
__n
,

618 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

626 
	`Âuts
 (c⁄° *
__ª°ri˘
 
__s
, 
FILE
 *__ª°ri˘ 
__°ªam
);

632 
	`puts
 (c⁄° *
__s
);

639 
	`ungëc
 (
__c
, 
FILE
 *
__°ªam
);

646 
size_t
 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

647 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

652 
size_t
 
	`fwrôe
 (c⁄° *
__ª°ri˘
 
__±r
, size_à
__size
,

653 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__s
);

655 #ifde‡
__USE_GNU


662 
	`Âuts_u∆ocked
 (c⁄° *
__ª°ri˘
 
__s
,

663 
FILE
 *
__ª°ri˘
 
__°ªam
);

666 #ifde‡
__USE_MISC


673 
size_t
 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

674 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

675 
size_t
 
	`fwrôe_u∆ocked
 (c⁄° *
__ª°ri˘
 
__±r
, size_à
__size
,

676 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
);

684 
	`f£ek
 (
FILE
 *
__°ªam
, 
__off
, 
__whí˚
);

689 
	$·ñl
 (
FILE
 *
__°ªam
Ë
__wur
;

694 
	`ªwöd
 (
FILE
 *
__°ªam
);

701 #i‡
deföed
 
__USE_LARGEFILE
 || deföed 
__USE_XOPEN2K


702 #i‚de‡
__USE_FILE_OFFSET64


707 
	`f£eko
 (
FILE
 *
__°ªam
, 
__off_t
 
__off
, 
__whí˚
);

712 
__off_t
 
	$·ñlo
 (
FILE
 *
__°ªam
Ë
__wur
;

714 #ifde‡
__REDIRECT


715 
	`__REDIRECT
 (
f£eko
,

716 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
),

717 
f£eko64
);

718 
__off64_t
 
	`__REDIRECT
 (
·ñlo
, (
FILE
 *
__°ªam
), 
·ñlo64
);

720 
	#f£eko
 
f£eko64


	)

721 
	#·ñlo
 
·ñlo64


	)

726 #i‚de‡
__USE_FILE_OFFSET64


731 
	`fgëpos
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos_t
 *__ª°ri˘ 
__pos
);

736 
	`f£ços
 (
FILE
 *
__°ªam
, c⁄° 
Âos_t
 *
__pos
);

738 #ifde‡
__REDIRECT


739 
	`__REDIRECT
 (
fgëpos
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

740 
Âos_t
 *
__ª°ri˘
 
__pos
), 
fgëpos64
);

741 
	`__REDIRECT
 (
f£ços
,

742 (
FILE
 *
__°ªam
, c⁄° 
Âos_t
 *
__pos
), 
f£ços64
);

744 
	#fgëpos
 
fgëpos64


	)

745 
	#f£ços
 
f£ços64


	)

749 #ifde‡
__USE_LARGEFILE64


750 
	`f£eko64
 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
);

751 
__off64_t
 
	$·ñlo64
 (
FILE
 *
__°ªam
Ë
__wur
;

752 
	`fgëpos64
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos64_t
 *__ª°ri˘ 
__pos
);

753 
	`f£ços64
 (
FILE
 *
__°ªam
, c⁄° 
Âos64_t
 *
__pos
);

757 
	$˛óªº
 (
FILE
 *
__°ªam
Ë
__THROW
;

759 
	$„of
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

761 
	$„º‹
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

763 #ifde‡
__USE_MISC


765 
	$˛óªº_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
;

766 
	$„of_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

767 
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

775 
	`≥º‹
 (c⁄° *
__s
);

781 
	~<bôs/sys_îæi°.h
>

784 #ifdef 
__USE_POSIX


786 
	$fûío
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

789 #ifde‡
__USE_MISC


791 
	$fûío_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

795 #ifde‡
__USE_POSIX2


800 
FILE
 *
	$p›í
 (c⁄° *
__comm™d
, c⁄° *
__modes
Ë
__wur
;

806 
	`p˛o£
 (
FILE
 *
__°ªam
);

810 #ifdef 
__USE_POSIX


812 *
	$˘îmid
 (*
__s
Ë
__THROW
;

816 #i‡(
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
Ë|| deföed 
__USE_GNU


818 *
	`cu£rid
 (*
__s
);

822 #ifdef 
__USE_GNU


823 
ob°ack
;

826 
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

827 c⁄° *
__ª°ri˘
 
__f‹m©
, ...)

828 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

829 
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

830 c⁄° *
__ª°ri˘
 
__f‹m©
,

831 
__gnuc_va_li°
 
__¨gs
)

832 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

836 #ifde‡
__USE_POSIX199506


840 
	$Êockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

844 
	$·rylockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

847 
	$fu∆ockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

850 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


853 
	~<bôs/gë›t_posix.h
>

858 
	`__uÊow
 (
FILE
 *);

859 
	`__ovîÊow
 (
FILE
 *, );

863 #ifde‡
__USE_EXTERN_INLINES


864 
	~<bôs/°dio.h
>

866 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


867 
	~<bôs/°dio2.h
>

869 #ifde‡
__LDBL_COMPAT


870 
	~<bôs/°dio-ldbl.h
>

873 
__END_DECLS


	@/usr/include/stdlib.h

22 #i‚def 
_STDLIB_H


24 
	#__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION


	)

25 
	~<bôs/libc-hódî-°¨t.h
>

28 
	#__√ed_size_t


	)

29 
	#__√ed_wch¨_t


	)

30 
	#__√ed_NULL


	)

31 
	~<°ddef.h
>

33 
	g__BEGIN_DECLS


35 
	#_STDLIB_H
 1

	)

37 #i‡(
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
Ë&& !deföed 
_SYS_WAIT_H


39 
	~<bôs/waôÊags.h
>

40 
	~<bôs/waô°©us.h
>

43 
	#WEXITSTATUS
(
°©us
Ë
	`__WEXITSTATUS
 (°©us)

	)

44 
	#WTERMSIG
(
°©us
Ë
	`__WTERMSIG
 (°©us)

	)

45 
	#WSTOPSIG
(
°©us
Ë
	`__WSTOPSIG
 (°©us)

	)

46 
	#WIFEXITED
(
°©us
Ë
	`__WIFEXITED
 (°©us)

	)

47 
	#WIFSIGNALED
(
°©us
Ë
	`__WIFSIGNALED
 (°©us)

	)

48 
	#WIFSTOPPED
(
°©us
Ë
	`__WIFSTOPPED
 (°©us)

	)

49 #ifde‡
__WIFCONTINUED


50 
	#WIFCONTINUED
(
°©us
Ë
	`__WIFCONTINUED
 (°©us)

	)

55 
	~<bôs/Êﬂä.h
>

60 
	mquŸ
;

61 
	mªm
;

62 } 
	tdiv_t
;

65 #i‚de‡
__ldiv_t_deföed


68 
	mquŸ
;

69 
	mªm
;

70 } 
	tldiv_t
;

71 
	#__ldiv_t_deföed
 1

	)

74 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__Œdiv_t_deföed


76 
__exãnsi⁄__
 struct

78 
	mquŸ
;

79 
	mªm
;

80 } 
	tŒdiv_t
;

81 
	#__Œdiv_t_deföed
 1

	)

86 
	#RAND_MAX
 2147483647

	)

91 
	#EXIT_FAILURE
 1

	)

92 
	#EXIT_SUCCESS
 0

	)

96 
	#MB_CUR_MAX
 (
	`__˘y≥_gë_mb_cur_max
 ())

	)

97 
size_t
 
	$__˘y≥_gë_mb_cur_max
 (Ë
__THROW
 
__wur
;

101 
	$©of
 (c⁄° *
__≈å
)

102 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

104 
	$©oi
 (c⁄° *
__≈å
)

105 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

107 
	$©ﬁ
 (c⁄° *
__≈å
)

108 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

110 #ifde‡
__USE_ISOC99


112 
__exãnsi⁄__
 
	$©ﬁl
 (c⁄° *
__≈å
)

113 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

117 
	$°πod
 (c⁄° *
__ª°ri˘
 
__≈å
,

118 **
__ª°ri˘
 
__íd±r
)

119 
__THROW
 
	`__n⁄nuŒ
 ((1));

121 #ifdef 
__USE_ISOC99


123 
	$°πof
 (c⁄° *
__ª°ri˘
 
__≈å
,

124 **
__ª°ri˘
 
__íd±r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

126 
	$°πﬁd
 (c⁄° *
__ª°ri˘
 
__≈å
,

127 **
__ª°ri˘
 
__íd±r
)

128 
__THROW
 
	`__n⁄nuŒ
 ((1));

133 #i‡
__HAVE_FLOAT16
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

134 
_Flﬂt16
 
	$°πof16
 (c⁄° *
__ª°ri˘
 
__≈å
,

135 **
__ª°ri˘
 
__íd±r
)

136 
__THROW
 
	`__n⁄nuŒ
 ((1));

139 #i‡
__HAVE_FLOAT32
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

140 
_Flﬂt32
 
	$°πof32
 (c⁄° *
__ª°ri˘
 
__≈å
,

141 **
__ª°ri˘
 
__íd±r
)

142 
__THROW
 
	`__n⁄nuŒ
 ((1));

145 #i‡
__HAVE_FLOAT64
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

146 
_Flﬂt64
 
	$°πof64
 (c⁄° *
__ª°ri˘
 
__≈å
,

147 **
__ª°ri˘
 
__íd±r
)

148 
__THROW
 
	`__n⁄nuŒ
 ((1));

151 #i‡
__HAVE_FLOAT128
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

152 
_Flﬂt128
 
	$°πof128
 (c⁄° *
__ª°ri˘
 
__≈å
,

153 **
__ª°ri˘
 
__íd±r
)

154 
__THROW
 
	`__n⁄nuŒ
 ((1));

157 #i‡
__HAVE_FLOAT32X
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

158 
_Flﬂt32x
 
	$°πof32x
 (c⁄° *
__ª°ri˘
 
__≈å
,

159 **
__ª°ri˘
 
__íd±r
)

160 
__THROW
 
	`__n⁄nuŒ
 ((1));

163 #i‡
__HAVE_FLOAT64X
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

164 
_Flﬂt64x
 
	$°πof64x
 (c⁄° *
__ª°ri˘
 
__≈å
,

165 **
__ª°ri˘
 
__íd±r
)

166 
__THROW
 
	`__n⁄nuŒ
 ((1));

169 #i‡
__HAVE_FLOAT128X
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

170 
_Flﬂt128x
 
	$°πof128x
 (c⁄° *
__ª°ri˘
 
__≈å
,

171 **
__ª°ri˘
 
__íd±r
)

172 
__THROW
 
	`__n⁄nuŒ
 ((1));

176 
	$°πﬁ
 (c⁄° *
__ª°ri˘
 
__≈å
,

177 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

178 
__THROW
 
	`__n⁄nuŒ
 ((1));

180 
	$°πoul
 (c⁄° *
__ª°ri˘
 
__≈å
,

181 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

182 
__THROW
 
	`__n⁄nuŒ
 ((1));

184 #ifde‡
__USE_MISC


186 
__exãnsi⁄__


187 
	$°πoq
 (c⁄° *
__ª°ri˘
 
__≈å
,

188 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

189 
__THROW
 
	`__n⁄nuŒ
 ((1));

191 
__exãnsi⁄__


192 
	$°πouq
 (c⁄° *
__ª°ri˘
 
__≈å
,

193 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

194 
__THROW
 
	`__n⁄nuŒ
 ((1));

197 #ifde‡
__USE_ISOC99


199 
__exãnsi⁄__


200 
	$°πﬁl
 (c⁄° *
__ª°ri˘
 
__≈å
,

201 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

202 
__THROW
 
	`__n⁄nuŒ
 ((1));

204 
__exãnsi⁄__


205 
	$°πouŒ
 (c⁄° *
__ª°ri˘
 
__≈å
,

206 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

207 
__THROW
 
	`__n⁄nuŒ
 ((1));

211 #i‡
	`__GLIBC_USE
 (
IEC_60559_BFP_EXT_C2X
)

212 
	$°r‰omd
 (*
__de°
, 
size_t
 
__size
, c⁄° *
__f‹m©
,

213 
__f
)

214 
__THROW
 
	`__n⁄nuŒ
 ((3));

216 
	$°r‰omf
 (*
__de°
, 
size_t
 
__size
, c⁄° *
__f‹m©
,

217 
__f
)

218 
__THROW
 
	`__n⁄nuŒ
 ((3));

220 
	$°r‰oml
 (*
__de°
, 
size_t
 
__size
, c⁄° *
__f‹m©
,

221 
__f
)

222 
__THROW
 
	`__n⁄nuŒ
 ((3));

225 #i‡
__HAVE_FLOAT16
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

226 
	$°r‰omf16
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

227 
_Flﬂt16
 
__f
)

228 
__THROW
 
	`__n⁄nuŒ
 ((3));

231 #i‡
__HAVE_FLOAT32
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

232 
	$°r‰omf32
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

233 
_Flﬂt32
 
__f
)

234 
__THROW
 
	`__n⁄nuŒ
 ((3));

237 #i‡
__HAVE_FLOAT64
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

238 
	$°r‰omf64
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

239 
_Flﬂt64
 
__f
)

240 
__THROW
 
	`__n⁄nuŒ
 ((3));

243 #i‡
__HAVE_FLOAT128
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

244 
	$°r‰omf128
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

245 
_Flﬂt128
 
__f
)

246 
__THROW
 
	`__n⁄nuŒ
 ((3));

249 #i‡
__HAVE_FLOAT32X
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

250 
	$°r‰omf32x
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

251 
_Flﬂt32x
 
__f
)

252 
__THROW
 
	`__n⁄nuŒ
 ((3));

255 #i‡
__HAVE_FLOAT64X
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

256 
	$°r‰omf64x
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

257 
_Flﬂt64x
 
__f
)

258 
__THROW
 
	`__n⁄nuŒ
 ((3));

261 #i‡
__HAVE_FLOAT128X
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

262 
	$°r‰omf128x
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

263 
_Flﬂt128x
 
__f
)

264 
__THROW
 
	`__n⁄nuŒ
 ((3));

268 #ifde‡
__USE_GNU


272 
	~<bôs/ty≥s/loˇÀ_t.h
>

274 
	$°πﬁ_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

275 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

276 
loˇÀ_t
 
__loc
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

278 
	$°πoul_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

279 **
__ª°ri˘
 
__íd±r
,

280 
__ba£
, 
loˇÀ_t
 
__loc
)

281 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

283 
__exãnsi⁄__


284 
	$°πﬁl_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

285 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

286 
loˇÀ_t
 
__loc
)

287 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

289 
__exãnsi⁄__


290 
	$°πouŒ_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

291 **
__ª°ri˘
 
__íd±r
,

292 
__ba£
, 
loˇÀ_t
 
__loc
)

293 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

295 
	$°πod_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

296 **
__ª°ri˘
 
__íd±r
, 
loˇÀ_t
 
__loc
)

297 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

299 
	$°πof_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

300 **
__ª°ri˘
 
__íd±r
, 
loˇÀ_t
 
__loc
)

301 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

303 
	$°πﬁd_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

304 **
__ª°ri˘
 
__íd±r
,

305 
loˇÀ_t
 
__loc
)

306 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

308 #i‡
__HAVE_FLOAT16


309 
_Flﬂt16
 
	$°πof16_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

310 **
__ª°ri˘
 
__íd±r
,

311 
loˇÀ_t
 
__loc
)

312 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

315 #i‡
__HAVE_FLOAT32


316 
_Flﬂt32
 
	$°πof32_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

317 **
__ª°ri˘
 
__íd±r
,

318 
loˇÀ_t
 
__loc
)

319 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

322 #i‡
__HAVE_FLOAT64


323 
_Flﬂt64
 
	$°πof64_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

324 **
__ª°ri˘
 
__íd±r
,

325 
loˇÀ_t
 
__loc
)

326 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

329 #i‡
__HAVE_FLOAT128


330 
_Flﬂt128
 
	$°πof128_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

331 **
__ª°ri˘
 
__íd±r
,

332 
loˇÀ_t
 
__loc
)

333 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

336 #i‡
__HAVE_FLOAT32X


337 
_Flﬂt32x
 
	$°πof32x_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

338 **
__ª°ri˘
 
__íd±r
,

339 
loˇÀ_t
 
__loc
)

340 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

343 #i‡
__HAVE_FLOAT64X


344 
_Flﬂt64x
 
	$°πof64x_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

345 **
__ª°ri˘
 
__íd±r
,

346 
loˇÀ_t
 
__loc
)

347 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

350 #i‡
__HAVE_FLOAT128X


351 
_Flﬂt128x
 
	$°πof128x_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

352 **
__ª°ri˘
 
__íd±r
,

353 
loˇÀ_t
 
__loc
)

354 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

359 #ifde‡
__USE_EXTERN_INLINES


360 
__exã∫_ölöe
 

361 
	`__NTH
 (
	$©oi
 (c⁄° *
__≈å
))

363  (Ë
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

364 
	}
}

365 
__exã∫_ölöe
 

366 
__NTH
 (
	$©ﬁ
 (c⁄° *
__≈å
))

368  
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

369 
	}
}

371 #ifde‡
__USE_ISOC99


372 
__exãnsi⁄__
 
__exã∫_ölöe
 

373 
__NTH
 (
	$©ﬁl
 (c⁄° *
__≈å
))

375  
	`°πﬁl
 (
__≈å
, (**Ë
NULL
, 10);

376 
	}
}

381 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


385 *
	$l64a
 (
__n
Ë
__THROW
 
__wur
;

388 
	$a64l
 (c⁄° *
__s
)

389 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

393 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


394 
	~<sys/ty≥s.h
>

401 
	$øndom
 (Ë
__THROW
;

404 
	$§™dom
 (
__£ed
Ë
__THROW
;

410 *
	$öô°©e
 (
__£ed
, *
__°©ebuf
,

411 
size_t
 
__°©ñí
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

415 *
	$£t°©e
 (*
__°©ebuf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

418 #ifde‡
__USE_MISC


423 
	søndom_d©a


425 
öt32_t
 *
Âå
;

426 
öt32_t
 *
Ωå
;

427 
öt32_t
 *
°©e
;

428 
ønd_ty≥
;

429 
ønd_deg
;

430 
ønd_£p
;

431 
öt32_t
 *
íd_±r
;

434 
	$øndom_r
 (
øndom_d©a
 *
__ª°ri˘
 
__buf
,

435 
öt32_t
 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

437 
	$§™dom_r
 (
__£ed
, 
øndom_d©a
 *
__buf
)

438 
__THROW
 
	`__n⁄nuŒ
 ((2));

440 
	$öô°©e_r
 (
__£ed
, *
__ª°ri˘
 
__°©ebuf
,

441 
size_t
 
__°©ñí
,

442 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

443 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

445 
	$£t°©e_r
 (*
__ª°ri˘
 
__°©ebuf
,

446 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

447 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

453 
	$ønd
 (Ë
__THROW
;

455 
	$§™d
 (
__£ed
Ë
__THROW
;

457 #ifde‡
__USE_POSIX199506


459 
	$ønd_r
 (*
__£ed
Ë
__THROW
;

463 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


467 
	$dønd48
 (Ë
__THROW
;

468 
	$î™d48
 (
__xsubi
[3]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

471 
	$Ã™d48
 (Ë
__THROW
;

472 
	$ƒ™d48
 (
__xsubi
[3])

473 
__THROW
 
	`__n⁄nuŒ
 ((1));

476 
	$mønd48
 (Ë
__THROW
;

477 
	$jønd48
 (
__xsubi
[3])

478 
__THROW
 
	`__n⁄nuŒ
 ((1));

481 
	$§™d48
 (
__£edvÆ
Ë
__THROW
;

482 *
	$£ed48
 (
__£ed16v
[3])

483 
__THROW
 
	`__n⁄nuŒ
 ((1));

484 
	$lc⁄g48
 (
__∑øm
[7]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

486 #ifde‡
__USE_MISC


490 
	sdønd48_d©a


492 
__x
[3];

493 
__ﬁd_x
[3];

494 
__c
;

495 
__öô
;

496 
__exãnsi⁄__
 
__a
;

501 
	$dønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

502 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

503 
	$î™d48_r
 (
__xsubi
[3],

504 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

505 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

508 
	$Ã™d48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

509 *
__ª°ri˘
 
__ªsu…
)

510 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

511 
	$ƒ™d48_r
 (
__xsubi
[3],

512 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

513 *
__ª°ri˘
 
__ªsu…
)

514 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

517 
	$mønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

518 *
__ª°ri˘
 
__ªsu…
)

519 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

520 
	$jønd48_r
 (
__xsubi
[3],

521 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

522 *
__ª°ri˘
 
__ªsu…
)

523 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

526 
	$§™d48_r
 (
__£edvÆ
, 
dønd48_d©a
 *
__buf„r
)

527 
__THROW
 
	`__n⁄nuŒ
 ((2));

529 
	$£ed48_r
 (
__£ed16v
[3],

530 
dønd48_d©a
 *
__buf„r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

532 
	$lc⁄g48_r
 (
__∑øm
[7],

533 
dønd48_d©a
 *
__buf„r
)

534 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

539 *
	$mÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__


540 
	`__©åibuã_Æloc_size__
 ((1)Ë
__wur
;

542 *
	$ˇŒoc
 (
size_t
 
__nmemb
, size_à
__size
)

543 
__THROW
 
__©åibuã_mÆloc__
 
	`__©åibuã_Æloc_size__
 ((1, 2)Ë
__wur
;

550 *
	$ªÆloc
 (*
__±r
, 
size_t
 
__size
)

551 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
 
	`__©åibuã_Æloc_size__
 ((2));

553 #ifde‡
__USE_MISC


559 *
	$ªÆloˇºay
 (*
__±r
, 
size_t
 
__nmemb
, size_à
__size
)

560 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__


561 
	`__©åibuã_Æloc_size__
 ((2, 3));

565 
	$‰ì
 (*
__±r
Ë
__THROW
;

567 #ifde‡
__USE_MISC


568 
	~<Æloˇ.h
>

571 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

572 || 
deföed
 
__USE_MISC


574 *
	$vÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__


575 
	`__©åibuã_Æloc_size__
 ((1)Ë
__wur
;

578 #ifde‡
__USE_XOPEN2K


580 
	$posix_memÆign
 (**
__mem±r
, 
size_t
 
__Æignmít
, size_à
__size
)

581 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

584 #ifde‡
__USE_ISOC11


586 *
	$Æig√d_Æloc
 (
size_t
 
__Æignmít
, size_à
__size
)

587 
__THROW
 
__©åibuã_mÆloc__
 
	`__©åibuã_Æloc_size__
 ((2)Ë
__wur
;

591 
	$ab‹t
 (Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

595 
	$©exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

597 #i‡
deföed
 
__USE_ISOC11
 || deföed 
__USE_ISOCXX11


599 #ifde‡
__˝lu•lus


600 "C++" 
	$©_quick_exô
 ((*
__func
) ())

601 
__THROW
 
	`__asm
 ("©_quick_exô"Ë
	`__n⁄nuŒ
 ((1));

603 
	$©_quick_exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

607 #ifdef 
__USE_MISC


610 
	$⁄_exô
 ((*
__func
Ë(
__°©us
, *
__¨g
), *__arg)

611 
__THROW
 
	`__n⁄nuŒ
 ((1));

617 
	$exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

619 #i‡
deföed
 
__USE_ISOC11
 || deföed 
__USE_ISOCXX11


623 
	$quick_exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

626 #ifde‡
__USE_ISOC99


629 
	$_Exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

634 *
	$gëív
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

636 #ifde‡
__USE_GNU


639 *
	$£cuª_gëív
 (c⁄° *
__«me
)

640 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

643 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


647 
	$puãnv
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

650 #ifde‡
__USE_XOPEN2K


653 
	$£ãnv
 (c⁄° *
__«me
, c⁄° *
__vÆue
, 
__ª∂a˚
)

654 
__THROW
 
	`__n⁄nuŒ
 ((2));

657 
	$un£ãnv
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

660 #ifdef 
__USE_MISC


664 
	$˛óªnv
 (Ë
__THROW
;

668 #i‡
deföed
 
__USE_MISC
 \

669 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
)

675 *
	$mkãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

678 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


687 #i‚de‡
__USE_FILE_OFFSET64


688 
	$mk°emp
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

690 #ifde‡
__REDIRECT


691 
	`__REDIRECT
 (
mk°emp
, (*
__ãm∂©e
), 
mk°emp64
)

692 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

694 
	#mk°emp
 
mk°emp64


	)

697 #ifde‡
__USE_LARGEFILE64


698 
	$mk°emp64
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

702 #ifde‡
__USE_MISC


709 #i‚de‡
__USE_FILE_OFFSET64


710 
	$mk°emps
 (*
__ãm∂©e
, 
__suffixÀn
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

712 #ifde‡
__REDIRECT


713 
	`__REDIRECT
 (
mk°emps
, (*
__ãm∂©e
, 
__suffixÀn
),

714 
mk°emps64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

716 
	#mk°emps
 
mk°emps64


	)

719 #ifde‡
__USE_LARGEFILE64


720 
	$mk°emps64
 (*
__ãm∂©e
, 
__suffixÀn
)

721 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

725 #ifde‡
__USE_XOPEN2K8


731 *
	$mkdãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

734 #ifde‡
__USE_GNU


741 #i‚de‡
__USE_FILE_OFFSET64


742 
	$mko°emp
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

744 #ifde‡
__REDIRECT


745 
	`__REDIRECT
 (
mko°emp
, (*
__ãm∂©e
, 
__Êags
), 
mko°emp64
)

746 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

748 
	#mko°emp
 
mko°emp64


	)

751 #ifde‡
__USE_LARGEFILE64


752 
	$mko°emp64
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

761 #i‚de‡
__USE_FILE_OFFSET64


762 
	$mko°emps
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

763 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

765 #ifde‡
__REDIRECT


766 
	`__REDIRECT
 (
mko°emps
, (*
__ãm∂©e
, 
__suffixÀn
,

767 
__Êags
), 
mko°emps64
)

768 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

770 
	#mko°emps
 
mko°emps64


	)

773 #ifde‡
__USE_LARGEFILE64


774 
	$mko°emps64
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

775 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

784 
	$sy°em
 (c⁄° *
__comm™d
Ë
__wur
;

787 #ifdef 
__USE_GNU


790 *
	$ˇn⁄iˇlize_fûe_«me
 (c⁄° *
__«me
)

791 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

794 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


800 *
	$ªÆ∑th
 (c⁄° *
__ª°ri˘
 
__«me
,

801 *
__ª°ri˘
 
__ªsﬁved
Ë
__THROW
 
__wur
;

806 #i‚de‡
__COMPAR_FN_T


807 
	#__COMPAR_FN_T


	)

808 (*
	t__com∑r_‚_t
) (const *, const *);

810 #ifdef 
__USE_GNU


811 
__com∑r_‚_t
 
	tcom∑ris⁄_‚_t
;

814 #ifde‡
__USE_GNU


815 (*
	t__com∑r_d_‚_t
) (const *, const *, *);

820 *
	$b£¨ch
 (c⁄° *
__key
, c⁄° *
__ba£
,

821 
size_t
 
__nmemb
, size_à
__size
, 
__com∑r_‚_t
 
__com∑r
)

822 
	`__n⁄nuŒ
 ((1, 2, 5)Ë
__wur
;

824 #ifde‡
__USE_EXTERN_INLINES


825 
	~<bôs/°dlib-b£¨ch.h
>

830 
	$qs‹t
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

831 
__com∑r_‚_t
 
__com∑r
Ë
	`__n⁄nuŒ
 ((1, 4));

832 #ifde‡
__USE_GNU


833 
	$qs‹t_r
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

834 
__com∑r_d_‚_t
 
__com∑r
, *
__¨g
)

835 
	`__n⁄nuŒ
 ((1, 4));

840 
	$abs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

841 
	$œbs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

843 #ifde‡
__USE_ISOC99


844 
__exãnsi⁄__
 
	$Œabs
 (
__x
)

845 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

852 
div_t
 
	$div
 (
__numî
, 
__díom
)

853 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

854 
ldiv_t
 
	$ldiv
 (
__numî
, 
__díom
)

855 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

857 #ifde‡
__USE_ISOC99


858 
__exãnsi⁄__
 
Œdiv_t
 
	$Œdiv
 (
__numî
,

859 
__díom
)

860 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

864 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

865 || 
deföed
 
__USE_MISC


872 *
	$ecvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

873 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

878 *
	$fcvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

879 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

884 *
	$gcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

885 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

888 #ifde‡
__USE_MISC


890 *
	$qecvt
 (
__vÆue
, 
__ndigô
,

891 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

892 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

893 *
	$qfcvt
 (
__vÆue
, 
__ndigô
,

894 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

895 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

896 *
	$qgcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

897 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

902 
	$ecvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

903 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

904 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

905 
	$fcvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

906 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

907 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

909 
	$qecvt_r
 (
__vÆue
, 
__ndigô
,

910 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

911 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

912 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

913 
	$qfcvt_r
 (
__vÆue
, 
__ndigô
,

914 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

915 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

916 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

922 
	$mbÀn
 (c⁄° *
__s
, 
size_t
 
__n
Ë
__THROW
;

925 
	$mbtowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

926 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

929 
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
Ë
__THROW
;

933 
size_t
 
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__pwcs
,

934 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

936 
size_t
 
	$wc°ombs
 (*
__ª°ri˘
 
__s
,

937 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__pwcs
, 
size_t
 
__n
)

938 
__THROW
;

941 #ifde‡
__USE_MISC


946 
	$Ωm©ch
 (c⁄° *
__ª•⁄£
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

950 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


957 
	$gësub›t
 (**
__ª°ri˘
 
__›ti⁄p
,

958 *c⁄° *
__ª°ri˘
 
__tokís
,

959 **
__ª°ri˘
 
__vÆuï
)

960 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3)Ë
__wur
;

966 #ifde‡
__USE_XOPEN2KXSI


968 
	$posix_›í±
 (
__oÊag
Ë
__wur
;

971 #ifde‡
__USE_XOPEN_EXTENDED


976 
	$gø¡±
 (
__fd
Ë
__THROW
;

980 
	$u∆ock±
 (
__fd
Ë
__THROW
;

985 *
	$±¢ame
 (
__fd
Ë
__THROW
 
__wur
;

988 #ifde‡
__USE_GNU


992 
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

993 
__THROW
 
	`__n⁄nuŒ
 ((2));

996 
	`gë±
 ();

999 #ifde‡
__USE_MISC


1003 
	$gëlﬂdavg
 (
__lﬂdavg
[], 
__√Àm
)

1004 
__THROW
 
	`__n⁄nuŒ
 ((1));

1007 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K


1010 
	$ây¶Ÿ
 (Ë
__THROW
;

1013 
	~<bôs/°dlib-Êﬂt.h
>

1016 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


1017 
	~<bôs/°dlib.h
>

1019 #ifde‡
__LDBL_COMPAT


1020 
	~<bôs/°dlib-ldbl.h
>

1023 
__END_DECLS


	@/usr/include/string.h

22 #i‚def 
_STRING_H


23 
	#_STRING_H
 1

	)

25 
	#__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION


	)

26 
	~<bôs/libc-hódî-°¨t.h
>

28 
	g__BEGIN_DECLS


31 
	#__√ed_size_t


	)

32 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

36 #i‡
deföed
 
__˝lu•lus
 && (
__GNUC_PREREQ
 (4, 4) \

37 || 
	$__glibc_˛™g_¥îeq
 (3, 5))

38 
	#__CORRECT_ISO_CPP_STRING_H_PROTO


	)

43 *
	$mem˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

44 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

47 *
	$memmove
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

48 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

53 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN
 || 
	`__GLIBC_USE
 (
ISOC2X
)

54 *
	$memc˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

55 
__c
, 
size_t
 
__n
)

56 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

61 *
	$mem£t
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

64 
	$memcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

65 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

68 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


71 *
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

72 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

73 c⁄° *
	`memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

74 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

76 #ifde‡
__OPTIMIZE__


77 
__exã∫_Æways_ölöe
 *

78 
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


80  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

83 
__exã∫_Æways_ölöe
 const *

84 
	`memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


86  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

89 
	}
}

91 *
	$memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

92 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

95 #ifde‡
__USE_GNU


98 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


99 "C++" *
	$øwmemchr
 (*
__s
, 
__c
)

100 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

101 "C++" c⁄° *
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

102 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

104 *
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

105 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

109 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


110 "C++" *
	$memrchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

111 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

112 "C++" c⁄° *
	$memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

113 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

115 *
	$memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

116 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

122 *
	$°r˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

123 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

125 *
	$°∫˝y
 (*
__ª°ri˘
 
__de°
,

126 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

127 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

130 *
	$°rˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

131 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

133 *
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

134 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

137 
	$°rcmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

138 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

140 
	$°∫cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

141 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

144 
	$°rcﬁl
 (c⁄° *
__s1
, c⁄° *
__s2
)

145 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

147 
size_t
 
	$°rx‰m
 (*
__ª°ri˘
 
__de°
,

148 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

149 
__THROW
 
	`__n⁄nuŒ
 ((2));

151 #ifde‡
__USE_XOPEN2K8


153 
	~<bôs/ty≥s/loˇÀ_t.h
>

156 
	$°rcﬁl_l
 (c⁄° *
__s1
, c⁄° *
__s2
, 
loˇÀ_t
 
__l
)

157 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

160 
size_t
 
	$°rx‰m_l
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
,

161 
loˇÀ_t
 
__l
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

164 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8
 \

165 || 
	`__GLIBC_USE
 (
LIB_EXT2
Ë|| 
	$__GLIBC_USE
 (
ISOC2X
))

167 *
	$°rdup
 (c⁄° *
__s
)

168 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

174 #i‡
deföed
 
__USE_XOPEN2K8
 || 
	`__GLIBC_USE
 (
LIB_EXT2
Ë|| __GLIBC_USE (
ISOC2X
)

175 *
	$°∫dup
 (c⁄° *
__°rög
, 
size_t
 
__n
)

176 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

179 #i‡
deföed
 
__USE_GNU
 && deföed 
__GNUC__


181 
	#°rdu∑
(
s
) \

182 (
__exãnsi⁄__
 \

184 c⁄° *
__ﬁd
 = (
s
); \

185 
size_t
 
__Àn
 = 
	`°æí
 (
__ﬁd
) + 1; \

186 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
); \

187 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

188 
	}
}))

	)

191 
	#°∫du∑
(
s
, 
n
) \

192 (
__exãnsi⁄__
 \

194 c⁄° *
__ﬁd
 = (
s
); \

195 
size_t
 
__Àn
 = 
	`°∫Àn
 (
__ﬁd
, (
n
)); \

196 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
 + 1); \

197 
__√w
[
__Àn
] = '\0'; \

198 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

199 }))

	)

203 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


206 *
°rchr
 (*
__s
, 
__c
)

207 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

208 c⁄° *
°rchr
 (c⁄° *
__s
, 
__c
)

209 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

211 #ifde‡
__OPTIMIZE__


212 
__exã∫_Æways_ölöe
 *

213 
°rchr
 (*
__s
, 
__c
Ë
	g__THROW


215  
__buûtö_°rchr
 (
__s
, 
__c
);

218 
__exã∫_Æways_ölöe
 const *

219 
°rchr
 (c⁄° *
__s
, 
__c
Ë
	g__THROW


221  
__buûtö_°rchr
 (
__s
, 
__c
);

226 *
	$°rchr
 (c⁄° *
__s
, 
__c
)

227 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

230 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


233 *
	`°ºchr
 (*
__s
, 
__c
)

234 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

235 c⁄° *
	`°ºchr
 (c⁄° *
__s
, 
__c
)

236 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

238 #ifde‡
__OPTIMIZE__


239 
__exã∫_Æways_ölöe
 *

240 
	`°ºchr
 (*
__s
, 
__c
Ë
__THROW


242  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

245 
__exã∫_Æways_ölöe
 const *

246 
	`°ºchr
 (c⁄° *
__s
, 
__c
Ë
__THROW


248  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

251 
	}
}

253 *
	$°ºchr
 (c⁄° *
__s
, 
__c
)

254 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

257 #ifde‡
__USE_GNU


260 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


261 "C++" *
	$°rch∫ul
 (*
__s
, 
__c
)

262 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

263 "C++" c⁄° *
	$°rch∫ul
 (c⁄° *
__s
, 
__c
)

264 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

266 *
	$°rch∫ul
 (c⁄° *
__s
, 
__c
)

267 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

273 
size_t
 
	$°rc•n
 (c⁄° *
__s
, c⁄° *
__ªje˘
)

274 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

277 
size_t
 
	$°r•n
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

278 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

280 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


283 *
	`°Ωbrk
 (*
__s
, c⁄° *
__ac˚±
)

284 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

285 c⁄° *
	`°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

286 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

288 #ifde‡
__OPTIMIZE__


289 
__exã∫_Æways_ölöe
 *

290 
	`°Ωbrk
 (*
__s
, c⁄° *
__ac˚±
Ë
__THROW


292  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

295 
__exã∫_Æways_ölöe
 const *

296 
	`°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
Ë
__THROW


298  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

301 
	}
}

303 *
	$°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

304 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

307 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


310 *
	`°r°r
 (*
__hay°ack
, c⁄° *
__√edÀ
)

311 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

312 c⁄° *
	`°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

313 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

315 #ifde‡
__OPTIMIZE__


316 
__exã∫_Æways_ölöe
 *

317 
	`°r°r
 (*
__hay°ack
, c⁄° *
__√edÀ
Ë
__THROW


319  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

322 
__exã∫_Æways_ölöe
 const *

323 
	`°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
Ë
__THROW


325  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

328 
	}
}

330 *
	$°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

331 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

336 *
	$°πok
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__dñim
)

337 
__THROW
 
	`__n⁄nuŒ
 ((2));

341 *
	$__°πok_r
 (*
__ª°ri˘
 
__s
,

342 c⁄° *
__ª°ri˘
 
__dñim
,

343 **
__ª°ri˘
 
__ßve_±r
)

344 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

345 #ifde‡
__USE_POSIX


346 *
	$°πok_r
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__dñim
,

347 **
__ª°ri˘
 
__ßve_±r
)

348 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

351 #ifde‡
__USE_GNU


353 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


354 "C++" *
	$°rˇ£°r
 (*
__hay°ack
, c⁄° *
__√edÀ
)

355 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

356 "C++" c⁄° *
	$°rˇ£°r
 (c⁄° *
__hay°ack
,

357 c⁄° *
__√edÀ
)

358 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

360 *
	$°rˇ£°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

361 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

365 #ifde‡
__USE_GNU


369 *
	$memmem
 (c⁄° *
__hay°ack
, 
size_t
 
__hay°ackÀn
,

370 c⁄° *
__√edÀ
, 
size_t
 
__√edÀÀn
)

371 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 3));

375 *
	$__memp˝y
 (*
__ª°ri˘
 
__de°
,

376 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

377 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

378 *
	$memp˝y
 (*
__ª°ri˘
 
__de°
,

379 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

380 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

385 
size_t
 
	$°æí
 (c⁄° *
__s
)

386 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

388 #ifdef 
__USE_XOPEN2K8


391 
size_t
 
	$°∫Àn
 (c⁄° *
__°rög
, 
size_t
 
__maxÀn
)

392 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

397 *
	$°ªº‹
 (
__î∫um
Ë
__THROW
;

398 #ifde‡
__USE_XOPEN2K


406 #i‡
deföed
 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


409 #ifde‡
__REDIRECT_NTH


410 
	`__REDIRECT_NTH
 (
°ªº‹_r
,

411 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
),

412 
__xpg_°ªº‹_r
Ë
	`__n⁄nuŒ
 ((2));

414 
	$__xpg_°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

415 
__THROW
 
	`__n⁄nuŒ
 ((2));

416 
	#°ªº‹_r
 
__xpg_°ªº‹_r


	)

421 *
	$°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

422 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

426 #ifde‡
__USE_XOPEN2K8


428 *
	$°ªº‹_l
 (
__î∫um
, 
loˇÀ_t
 
__l
Ë
__THROW
;

431 #ifde‡
__USE_MISC


432 
	~<°rögs.h
>

436 
	$ex∂icô_bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

440 *
	$°r£p
 (**
__ª°ri˘
 
__°rögp
,

441 c⁄° *
__ª°ri˘
 
__dñim
)

442 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

445 #ifdef 
__USE_XOPEN2K8


447 *
	$°rsig«l
 (
__sig
Ë
__THROW
;

450 *
	$__°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

451 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

452 *
	$°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

453 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

457 *
	$__°≤˝y
 (*
__ª°ri˘
 
__de°
,

458 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

459 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

460 *
	$°≤˝y
 (*
__ª°ri˘
 
__de°
,

461 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

462 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

465 #ifdef 
__USE_GNU


467 
	$°rvîscmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

468 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

471 *
	$°r‰y
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

474 *
	$mem‰ob
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

476 #i‚de‡
ba£«me


481 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


482 "C++" *
	$ba£«me
 (*
__fûíame
)

483 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

484 "C++" c⁄° *
	$ba£«me
 (c⁄° *
__fûíame
)

485 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

487 *
	$ba£«me
 (c⁄° *
__fûíame
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

492 #i‡
	`__GNUC_PREREQ
 (3,4)

493 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


495 
	~<bôs/°rög_f‹tifõd.h
>

499 
__END_DECLS


	@/usr/include/tbb/aligned_space.h

17 
	~"öã∫Æ/_dïªˇãd_hódî_mesßge_gu¨d.h
"

19 #i‡!
deföed
(
__TBB_show_dïªˇti⁄_mesßge_Æig√d_•a˚_H
Ë&& deföed(
__TBB_show_dïªˇãd_hódî_mesßge
)

20 
	#__TBB_show_dïªˇti⁄_mesßge_Æig√d_•a˚_H


	)

21 #¥agm®
mesßge
("TBB Warning:Åbb/aligned_space.h is deprecated. For details,Ölease see Deprecated Featuresáppendix inÅhe TBBÑeference manual.")

24 #i‡
deföed
(
__TBB_show_dïªˇãd_hódî_mesßge
)

25 #unde‡
__TBB_show_dïªˇãd_hódî_mesßge


28 #i‚de‡
__TBB_Æig√d_•a˚_H


29 
	#__TBB_Æig√d_•a˚_H


	)

31 
	#__TBB_Æig√d_•a˚_H_ö˛ude_¨ó


	)

32 
	~"öã∫Æ/_w¨nög_suµªss_íabÀ_nŸi˚.h
"

34 
	~"tbb_°ddef.h
"

35 
	~"tbb_machöe.h
"

37 
«me•a˚
 
	gtbb
 {

42 
	gãm∂©e
<
ty≥«me
 
	gT
,
size_t
 
	gN
=1>

43 
˛ass
 
__TBB_DEPRECATED_VERBOSE_MSG
("tbb::Æig√d_•a˚ i†dïªˇãd, u£ std::Æig√d_°‹age"Ë
Æig√d_•a˚
 {

44 
¥iv©e
:

45 
__TBB_Ty≥WôhAlignmítAtLó°AsSåi˘
(
	tT
Ë
	tñemít_ty≥
;

46 
ñemít_ty≥
 
	g¨øy
[((
T
)*
N
+(element_type)-1)/(element_type)];

47 
	gpublic
:

49 
T
* 
begö
(Ëc⁄° { 
öã∫Æ
::
pu¬ed_ˇ°
<T*>(
this
);}

52 
T
* 
íd
(Ëc⁄° { 
begö
()+
	gN
;}

57 
	~"öã∫Æ/_w¨nög_suµªss_dißbÀ_nŸi˚.h
"

58 #unde‡
__TBB_Æig√d_•a˚_H_ö˛ude_¨ó


	@/usr/include/tbb/atomic.h

17 
	~"öã∫Æ/_dïªˇãd_hódî_mesßge_gu¨d.h
"

19 #i‡!
deföed
(
__TBB_show_dïªˇti⁄_mesßge_©omic_H
Ë&& deföed(
__TBB_show_dïªˇãd_hódî_mesßge
)

20 
	#__TBB_show_dïªˇti⁄_mesßge_©omic_H


	)

21 #¥agm®
mesßge
("TBB Warning:Åbb/atomic.h is deprecated. For details,Ölease see Deprecated Featuresáppendix inÅhe TBBÑeference manual.")

24 #i‡
deföed
(
__TBB_show_dïªˇãd_hódî_mesßge
)

25 #unde‡
__TBB_show_dïªˇãd_hódî_mesßge


28 #i‚de‡
__TBB_©omic_H


29 
	#__TBB_©omic_H


	)

31 
	#__TBB_©omic_H_ö˛ude_¨ó


	)

32 
	~"öã∫Æ/_w¨nög_suµªss_íabÀ_nŸi˚.h
"

34 
	~<c°ddef
>

36 #i‡
_MSC_VER


37 
	#__TBB_LONG_LONG
 
__öt64


	)

39 
	#__TBB_LONG_LONG
 

	)

42 
	~"tbb_machöe.h
"

44 #i‡
_MSC_VER
 && !
__INTEL_COMPILER


46 #¥agm®
w¨nög
 (
push
)

47 #¥agm®
w¨nög
 (
dißbÀ
: 4244 4267 4512)

50 
«me•a˚
 
	gtbb
 {

53 
	emem‹y_£m™tics
 {

55 
	gfuŒ_„n˚
,

57 
	gacquúe
,

59 
	gªÀa£
,

61 
	gªœxed


65 
«me•a˚
 
	göã∫Æ
 {

67 #i‡
__TBB_ALIGNAS_PRESENT


68 
	#__TBB_DECL_ATOMIC_FIELD
(
t
,
f
,
a
Ë
	`Æig«s
◊Ëàf;

	)

69 #ñi‡
__TBB_ATTRIBUTE_ALIGNED_PRESENT


70 
	#__TBB_DECL_ATOMIC_FIELD
(
t
,
f
,
a
Ëà‡
	`__©åibuã__
 ((
	`Æig√d
◊)));

	)

71 #ñi‡
__TBB_DECLSPEC_ALIGN_PRESENT


72 
	#__TBB_DECL_ATOMIC_FIELD
(
t
,
f
,
a
Ë
	`__de˛•ec
(
	`Æign
◊)Ëàf;

	)

74 #îr‹ 
Do
 
nŸ
 
know
 
sy¡ax
 
f‹cög
 
Æignmít
.

77 
	gãm∂©e
<
size_t
 
	gS
>

78 
	g©omic_ªp
;

80 
	gãm∂©e
<>

81 
	g©omic_ªp
<1> {

82 
öt8_t
 
	tw‹d
;

84 
	gãm∂©e
<>

85 
	g©omic_ªp
<2> {

86 
öt16_t
 
	tw‹d
;

88 
	gãm∂©e
<>

89 
	g©omic_ªp
<4> {

90 #i‡
_MSC_VER
 && !
_WIN64


92 
öçå_t
 
	tw‹d
;

94 
öt32_t
 
	tw‹d
;

97 #i‡
__TBB_64BIT_ATOMICS


98 
	gãm∂©e
<>

99 
	g©omic_ªp
<8> {

100 
öt64_t
 
	tw‹d
;

104 
	gãm∂©e
<
ty≥«me
 
	gvÆue_ty≥
, 
size_t
 
	gsize
>

105 
	gÆig√d_°‹age
;

108 #i‡
__TBB_ATOMIC_CTORS


109 
	#ATOMIC_STORAGE_PARTIAL_SPECIALIZATION
(
S
) \

110 
ãm∂©e
<
ty≥«me
 
vÆue_ty≥
> \

111 
Æig√d_°‹age
<
vÆue_ty≥
,
S
> { \

112 
	`__TBB_DECL_ATOMIC_FIELD
(
vÆue_ty≥
,
my_vÆue
,
S
) \

113 
	`Æig√d_°‹age
() =  ; \

114 
c⁄°ex¥
 
	`Æig√d_°‹age
(
vÆue_ty≥
 
vÆue
):
	`my_vÆue
(value){} \

116 

	)

118 
	#ATOMIC_STORAGE_PARTIAL_SPECIALIZATION
(
S
) \

119 
ãm∂©e
<
ty≥«me
 
vÆue_ty≥
> \

120 
Æig√d_°‹age
<
vÆue_ty≥
,
S
> { \

121 
	`__TBB_DECL_ATOMIC_FIELD
(
vÆue_ty≥
,
my_vÆue
,
S
) \

123 

	)

126 
	gãm∂©e
<
ty≥«me
 
	gvÆue_ty≥
>

127 
	gÆig√d_°‹age
<
	gvÆue_ty≥
,1> {

128 
vÆue_ty≥
 
	gmy_vÆue
;

129 #i‡
__TBB_ATOMIC_CTORS


130 
Æig√d_°‹age
() =  ;

131 
c⁄°ex¥
 
Æig√d_°‹age
(
vÆue_ty≥
 
vÆue
):
my_vÆue
(value){}

135 
ATOMIC_STORAGE_PARTIAL_SPECIALIZATION
(2)

136 
ATOMIC_STORAGE_PARTIAL_SPECIALIZATION
(4)

137 #i‡
__TBB_64BIT_ATOMICS


138 
ATOMIC_STORAGE_PARTIAL_SPECIALIZATION
(8)

141 
	gãm∂©e
<
size_t
 
	gSize
, 
mem‹y_£m™tics
 
	gM
>

142 
	g©omic_åaôs
;

144 
	#__TBB_DECL_FENCED_ATOMIC_PRIMITIVES
(
S
,
M
) \

145 
ãm∂©e
<> 
©omic_åaôs
<
S
,
M
> { \

146 
©omic_ªp
<
	tS
>::
	tw‹d
 word; \

147 
ölöe
 
w‹d
 
	`com∑ª_™d_sw≠
–vﬁ©ûê* 
loˇti⁄
, w‹d 
√w_vÆue
, w‹d 
com∑ønd
 ) { \

148  
__TBB_machöe_cmpswp
##
S
##
	`M
(
loˇti⁄
,
√w_vÆue
,
com∑ønd
); \

150 
ölöe
 
w‹d
 
	`„tch_™d_add
–vﬁ©ûê* 
loˇti⁄
, w‹d 
addíd
 ) { \

151  
__TBB_machöe_„tchadd
##
S
##
	`M
(
loˇti⁄
,
addíd
); \

153 
ölöe
 
w‹d
 
	`„tch_™d_°‹e
–vﬁ©ûê* 
loˇti⁄
, w‹d 
vÆue
 ) { \

154  
__TBB_machöe_„tch°‹e
##
S
##
	`M
(
loˇti⁄
,
vÆue
); \

156 };

	)

158 
	#__TBB_DECL_ATOMIC_PRIMITIVES
(
S
) \

159 
ãm∂©e
<
mem‹y_£m™tics
 
M
> \

160 
©omic_åaôs
<
S
,
M
> { \

161 
©omic_ªp
<
	tS
>::
	tw‹d
 word; \

162 
ölöe
 
w‹d
 
	`com∑ª_™d_sw≠
–vﬁ©ûê* 
loˇti⁄
, w‹d 
√w_vÆue
, w‹d 
com∑ønd
 ) { \

163  
__TBB_machöe_cmpswp
##
	`S
(
loˇti⁄
,
√w_vÆue
,
com∑ønd
); \

165 
ölöe
 
w‹d
 
	`„tch_™d_add
–vﬁ©ûê* 
loˇti⁄
, w‹d 
addíd
 ) { \

166  
__TBB_machöe_„tchadd
##
	`S
(
loˇti⁄
,
addíd
); \

168 
ölöe
 
w‹d
 
	`„tch_™d_°‹e
–vﬁ©ûê* 
loˇti⁄
, w‹d 
vÆue
 ) { \

169  
__TBB_machöe_„tch°‹e
##
	`S
(
loˇti⁄
,
vÆue
); \

171 };

	)

173 
	gãm∂©e
<
mem‹y_£m™tics
 
	gM
>

174 
	g©omic_lﬂd_°‹e_åaôs
;

176 
	#__TBB_DECL_ATOMIC_LOAD_STORE_PRIMITIVES
(
M
) \

177 
ãm∂©e
<> 
©omic_lﬂd_°‹e_åaôs
<
M
> { \

178 
ãm∂©e
 <
ty≥«me
 
T
> \

179 
ölöe
 
T
 
	`lﬂd
–c⁄° vﬁ©ûêT& 
loˇti⁄
 ) { \

180  
__TBB_lﬂd_
##
	`M
–
loˇti⁄
 ); \

182 
ãm∂©e
 <
ty≥«me
 
T
> \

183 
ölöe
 
	`°‹e
–vﬁ©ûê
T
& 
loˇti⁄
, T 
vÆue
 ) { \

184 
__TBB_°‹e_
##
	`M
–
loˇti⁄
, 
vÆue
 ); \

186 }

	)

188 #i‡
__TBB_USE_FENCED_ATOMICS


189 
__TBB_DECL_FENCED_ATOMIC_PRIMITIVES
(1,
fuŒ_„n˚
)

190 
__TBB_DECL_FENCED_ATOMIC_PRIMITIVES
(2,
fuŒ_„n˚
)

191 
__TBB_DECL_FENCED_ATOMIC_PRIMITIVES
(4,
fuŒ_„n˚
)

192 
__TBB_DECL_FENCED_ATOMIC_PRIMITIVES
(1,
acquúe
)

193 
__TBB_DECL_FENCED_ATOMIC_PRIMITIVES
(2,
acquúe
)

194 
__TBB_DECL_FENCED_ATOMIC_PRIMITIVES
(4,
acquúe
)

195 
__TBB_DECL_FENCED_ATOMIC_PRIMITIVES
(1,
ªÀa£
)

196 
__TBB_DECL_FENCED_ATOMIC_PRIMITIVES
(2,
ªÀa£
)

197 
__TBB_DECL_FENCED_ATOMIC_PRIMITIVES
(4,
ªÀa£
)

198 
__TBB_DECL_FENCED_ATOMIC_PRIMITIVES
(1,
ªœxed
)

199 
__TBB_DECL_FENCED_ATOMIC_PRIMITIVES
(2,
ªœxed
)

200 
__TBB_DECL_FENCED_ATOMIC_PRIMITIVES
(4,
ªœxed
)

201 #i‡
__TBB_64BIT_ATOMICS


202 
__TBB_DECL_FENCED_ATOMIC_PRIMITIVES
(8,
fuŒ_„n˚
)

203 
__TBB_DECL_FENCED_ATOMIC_PRIMITIVES
(8,
acquúe
)

204 
__TBB_DECL_FENCED_ATOMIC_PRIMITIVES
(8,
ªÀa£
)

205 
__TBB_DECL_FENCED_ATOMIC_PRIMITIVES
(8,
ªœxed
)

208 
__TBB_DECL_ATOMIC_PRIMITIVES
(1)

209 
__TBB_DECL_ATOMIC_PRIMITIVES
(2)

210 
__TBB_DECL_ATOMIC_PRIMITIVES
(4)

211 #i‡
__TBB_64BIT_ATOMICS


212 
__TBB_DECL_ATOMIC_PRIMITIVES
(8)

216 
__TBB_DECL_ATOMIC_LOAD_STORE_PRIMITIVES
(
fuŒ_„n˚
);

217 
__TBB_DECL_ATOMIC_LOAD_STORE_PRIMITIVES
(
acquúe
);

218 
__TBB_DECL_ATOMIC_LOAD_STORE_PRIMITIVES
(
ªÀa£
);

219 
__TBB_DECL_ATOMIC_LOAD_STORE_PRIMITIVES
(
ªœxed
);

224 
	#__TBB_MINUS_ONE
(
T
Ë(
	`T
(T(0)-T(1)))

	)

229 
	gãm∂©e
<
ty≥«me
 
	gT
>

230 
	s©omic_im∂
 {

231 
	g¥Ÿe˘ed
:

232 
Æig√d_°‹age
<
T
,(
	gT
)> 
	gmy_°‹age
;

233 
	g¥iv©e
:

236 
ãm∂©e
<
ty≥«me
 
vÆue_ty≥
>

237 
	uc⁄vîãr
 {

238 
ty≥«me
 
	t©omic_ªp
<(
	tvÆue_ty≥
)>::
	tw‹d
 
	tbôs_ty≥
;

239 
c⁄vîãr
(){}

240 
c⁄vîãr
(
vÆue_ty≥
 
a_vÆue
Ë: 
vÆue
(a_value) {}

241 
vÆue_ty≥
 
vÆue
;

242 
bôs_ty≥
 
	gbôs
;

245 
	gãm∂©e
<
ty≥«me
 
	gvÆue_t
>

246 
ty≥«me
 
	gc⁄vîãr
<
	gvÆue_t
>::
bôs_ty≥
 
to_bôs
(
vÆue_t
 
vÆue
){

247  
c⁄vîãr
<
vÆue_t
>(
vÆue
).
bôs
;

249 
	gãm∂©e
<
ty≥«me
 
	gvÆue_t
>

250 
vÆue_t
 
to_vÆue
(
ty≥«me
 
c⁄vîãr
<vÆue_t>::
bôs_ty≥
 
bôs
){

251 
c⁄vîãr
<
vÆue_t
> 
u
;

252 
	gu
.
	gbôs
 = 
bôs
;

253  
	gu
.
	gvÆue
;

256 
	gãm∂©e
<
ty≥«me
 
	gvÆue_t
>

257 
	g±r_c⁄vîãr
;

259 
	gãm∂©e
<
ty≥«me
 
	gvÆue_t
>

260 
	g±r_c⁄vîãr
<
	gvÆue_t
 *> {

261 
±r_c⁄vîãr
(){}

262 
±r_c⁄vîãr
(
vÆue_t
* 
a_vÆue
Ë: 
vÆue
(a_value) {}

263 
vÆue_t
* 
vÆue
;

264 
uöçå_t
 
	gbôs
;

268 
	gãm∂©e
<
ty≥«me
 
	gvÆue_t
>

269 
ty≥«me
 
	gc⁄vîãr
<
	gvÆue_t
>::
bôs_ty≥
 & 
to_bôs_ªf
(
vÆue_t
& 
vÆue
){

272 #i‡!
__SUNPRO_CC


273  *(
ty≥«me
 
c⁄vîãr
<
vÆue_t
>::
bôs_ty≥
*)
±r_c⁄vîãr
<vÆue_t*>(&
vÆue
).
bôs
;

275  *(
ty≥«me
 
	gc⁄vîãr
<
	gvÆue_t
>::
bôs_ty≥
*)(&
vÆue
);

280 
	gpublic
:

281 
T
 
	tvÆue_ty≥
;

283 #i‡
__TBB_ATOMIC_CTORS


284 
©omic_im∂
() =  ;

285 
c⁄°ex¥
 
©omic_im∂
(
vÆue_ty≥
 
vÆue
):
my_°‹age
(value){}

287 
ãm∂©e
<
mem‹y_£m™tics
 
M
>

288 
vÆue_ty≥
 
„tch_™d_°‹e
–vÆue_ty≥ 
vÆue
 ) {

289  
to_vÆue
<
vÆue_ty≥
>(

290 
öã∫Æ
::
©omic_åaôs
<(
vÆue_ty≥
),
	gM
>::
„tch_™d_°‹e
–&
my_°‹age
.
my_vÆue
, 
to_bôs
(
vÆue
) )

294 
vÆue_ty≥
 
„tch_™d_°‹e
–vÆue_ty≥ 
vÆue
 ) {

295  
	g„tch_™d_°‹e
<
	gfuŒ_„n˚
>(
	gvÆue
);

298 
	gãm∂©e
<
mem‹y_£m™tics
 
	gM
>

299 
vÆue_ty≥
 
com∑ª_™d_sw≠
–vÆue_ty≥ 
vÆue
, vÆue_ty≥ 
com∑ønd
 ) {

300  
	gto_vÆue
<
	gvÆue_ty≥
>(

301 
	göã∫Æ
::
©omic_åaôs
<(
vÆue_ty≥
),
	gM
>::
com∑ª_™d_sw≠
–&
my_°‹age
.
my_vÆue
, 
to_bôs
(
vÆue
),Åo_bôs(
com∑ønd
) )

305 
vÆue_ty≥
 
com∑ª_™d_sw≠
–vÆue_ty≥ 
vÆue
, vÆue_ty≥ 
com∑ønd
 ) {

306  
	gcom∑ª_™d_sw≠
<
	gfuŒ_„n˚
>(
	gvÆue
,
	gcom∑ønd
);

309 
›î©‹
 
vÆue_ty≥
() const volatile {

310  
	gto_vÆue
<
	gvÆue_ty≥
>(

311 
__TBB_lﬂd_wôh_acquúe
–
to_bôs_ªf
(
my_°‹age
.
my_vÆue
) )

315 
	gãm∂©e
<
mem‹y_£m™tics
 
	gM
>

316 
vÆue_ty≥
 
lﬂd
 () const {

317  
	gto_vÆue
<
	gvÆue_ty≥
>(

318 
	göã∫Æ
::
©omic_lﬂd_°‹e_åaôs
<
M
>::
lﬂd
–
to_bôs_ªf
(
my_°‹age
.
my_vÆue
) )

322 
vÆue_ty≥
 
lﬂd
 () const {

323  
	glﬂd
<
	gacquúe
>();

326 
	gãm∂©e
<
mem‹y_£m™tics
 
	gM
>

327 
°‹e
 ( 
vÆue_ty≥
 
vÆue
 ) {

328 
	göã∫Æ
::
©omic_lﬂd_°‹e_åaôs
<
M
>::
°‹e
–
to_bôs_ªf
(
my_°‹age
.
my_vÆue
), 
to_bôs
(
vÆue
));

331 
°‹e
 ( 
vÆue_ty≥
 
vÆue
 ) {

332 
	g°‹e
<
	gªÀa£
>–
	gvÆue
 );

335 
	g¥Ÿe˘ed
:

336 
vÆue_ty≥
 
°‹e_wôh_ªÀa£
–vÆue_ty≥ 
rhs
 ) {

338 
__TBB_°‹e_wôh_ªÀa£
–
to_bôs_ªf
(
my_°‹age
.
my_vÆue
), 
to_bôs
(
rhs
) );

339  
	grhs
;

347 
	gãm∂©e
<
ty≥«me
 
	gI
,Åy≥«mê
	gD
,Åy≥«mê
	gSãpTy≥
>

348 
	g©omic_im∂_wôh_¨ôhmëic
: 
©omic_im∂
<
I
> {

349 
public
:

350 
I
 
	tvÆue_ty≥
;

351 #i‡ 
__TBB_ATOMIC_CTORS


352 
©omic_im∂_wôh_¨ôhmëic
() =  ;

353 
c⁄°ex¥
 
©omic_im∂_wôh_¨ôhmëic
(
vÆue_ty≥
 
vÆue
): 
©omic_im∂
<
I
>(value){}

355 
ãm∂©e
<
mem‹y_£m™tics
 
M
>

356 
vÆue_ty≥
 
„tch_™d_add
–
D
 
addíd
 ) {

357  
vÆue_ty≥
(
öã∫Æ
::
©omic_åaôs
<(vÆue_ty≥),
M
>::
„tch_™d_add
–&
this
->
my_°‹age
.
my_vÆue
, 
addíd
*(
SãpTy≥
) ));

360 
vÆue_ty≥
 
„tch_™d_add
–
D
 
addíd
 ) {

361  
	g„tch_™d_add
<
	gfuŒ_„n˚
>(
	gaddíd
);

364 
	gãm∂©e
<
mem‹y_£m™tics
 
	gM
>

365 
vÆue_ty≥
 
„tch_™d_ö¸emít
() {

366  
	g„tch_™d_add
<
	gM
>(1);

369 
vÆue_ty≥
 
„tch_™d_ö¸emít
() {

370  
„tch_™d_add
(1);

373 
	gãm∂©e
<
mem‹y_£m™tics
 
	gM
>

374 
vÆue_ty≥
 
„tch_™d_de¸emít
() {

375  
	g„tch_™d_add
<
	gM
>(
__TBB_MINUS_ONE
(
D
));

378 
vÆue_ty≥
 
„tch_™d_de¸emít
() {

379  
„tch_™d_add
(
__TBB_MINUS_ONE
(
D
));

382 
	gpublic
:

383 
vÆue_ty≥
 
›î©‹
+=–
D
 
vÆue
 ) {

384  
„tch_™d_add
(
vÆue
)+value;

387 
vÆue_ty≥
 
	g›î©‹
-=–
D
 
vÆue
 ) {

390  
›î©‹
+=(
D
(0)-
vÆue
);

393 
vÆue_ty≥
 
	g›î©‹
++() {

394  
„tch_™d_add
(1)+1;

397 
vÆue_ty≥
 
	g›î©‹
--() {

398  
„tch_™d_add
(
__TBB_MINUS_ONE
(
D
))-1;

401 
vÆue_ty≥
 
	g›î©‹
++() {

402  
„tch_™d_add
(1);

405 
vÆue_ty≥
 
	g›î©‹
--() {

406  
„tch_™d_add
(
__TBB_MINUS_ONE
(
D
));

416 
	gãm∂©e
<
ty≥«me
 
	gT
>

417 
__TBB_DEPRECATED_VERBOSE_MSG
("tbb::atomic is deprecated, use std::atomic")

418 
	g©omic
: 
öã∫Æ
::
©omic_im∂
<
T
> {

419 #i‡
__TBB_ATOMIC_CTORS


420 
©omic
() = ;

421 
c⁄°ex¥
 
©omic
(
T
 
¨g
): 
öã∫Æ
::
©omic_im∂
<T>(arg) {}

422 
c⁄°ex¥
 
©omic
<
T
>(c⁄°átomic<T>& 
rhs
): 
öã∫Æ
::
©omic_im∂
<T>(rhs) {}

424 
T
 
›î©‹
=–T 
rhs
 ) {

426  
this
->
°‹e_wôh_ªÀa£
(
rhs
);

428 
	g©omic
<
	gT
>& 
	g›î©‹
=–c⁄° 
©omic
<
T
>& 
rhs
 ) {
this
->
°‹e_wôh_ªÀa£
‘hs);  *
	gthis
;}

431 #i‡
__TBB_ATOMIC_CTORS


432 
	#__TBB_DECL_ATOMIC
(
T
) \

433 
ãm∂©e
<> 
	`__TBB_DEPRECATED_VERBOSE_MSG
("tbb::atomic is deprecated, use std::atomic") \

434 
©omic
<
T
>: 
öã∫Æ
::
©omic_im∂_wôh_¨ôhmëic
<T,T,> { \

435 
	`©omic
() = ; \

436 
c⁄°ex¥
 
	`©omic
(
T
 
¨g
): 
öã∫Æ
::
©omic_im∂_wôh_¨ôhmëic
<T,T,>(arg) {} \

437 
c⁄°ex¥
 
©omic
<
T
>(c⁄°átomic<T>& 
rhs
): \

438 
öã∫Æ
::
©omic_im∂_wôh_¨ôhmëic
<
T
,T,>(
rhs
) {} \

440 
T
 
›î©‹
=–T 
rhs
 ) { 
	`°‹e_wôh_ªÀa£
(rhs);} \

441 
©omic
<
T
>& 
›î©‹
=–c⁄°átomic<T>& 
rhs
 ) {
	`°‹e_wôh_ªÀa£
‘hs);  *
this
;} \

442 };

	)

444 
	#__TBB_DECL_ATOMIC
(
T
) \

445 
ãm∂©e
<> 
	`__TBB_DEPRECATED_VERBOSE_MSG
("tbb::atomic is deprecated, use std::atomic") \

446 
©omic
<
T
>: 
öã∫Æ
::
©omic_im∂_wôh_¨ôhmëic
<T,T,> { \

447 
T
 
›î©‹
=–T 
rhs
 ) { 
	`°‹e_wôh_ªÀa£
(rhs);} \

448 
©omic
<
T
>& 
›î©‹
=–c⁄°átomic<T>& 
rhs
 ) {
	`°‹e_wôh_ªÀa£
‘hs);  *
this
;} \

449 };

	)

452 #i‡
__TBB_64BIT_ATOMICS


454 
__TBB_DECL_ATOMIC
(
__TBB_LONG_LONG
)

455 
__TBB_DECL_ATOMIC
(
__TBB_LONG_LONG
)

459 
__TBB_DECL_ATOMIC
()

460 
__TBB_DECL_ATOMIC
()

462 #i‡
_MSC_VER
 && !
_WIN64


463 #i‡
__TBB_ATOMIC_CTORS


469 
	#__TBB_DECL_ATOMIC_ALT
(
T
,
U
) \

470 
ãm∂©e
<> 
	`__TBB_DEPRECATED_VERBOSE_MSG
("tbb::atomic is deprecated, use std::atomic") \

471 
©omic
<
T
>: 
öã∫Æ
::
©omic_im∂_wôh_¨ôhmëic
<T,T,> { \

472 
	`©omic
() =  ; \

473 
c⁄°ex¥
 
	`©omic
(
T
 
¨g
): 
öã∫Æ
::
©omic_im∂_wôh_¨ôhmëic
<T,T,>(arg) {} \

474 
c⁄°ex¥
 
©omic
<
T
>(c⁄°átomic<T>& 
rhs
): \

475 
öã∫Æ
::
©omic_im∂_wôh_¨ôhmëic
<
T
,T,>(
rhs
) {} \

477 
T
 
›î©‹
=–
U
 
rhs
 ) { 
	`°‹e_wôh_ªÀa£
(
	`T
(rhs));} \

478 
©omic
<
T
>& 
›î©‹
=–c⁄°átomic<T>& 
rhs
 ) {
	`°‹e_wôh_ªÀa£
‘hs);  *
this
;} \

479 };

	)

481 
	#__TBB_DECL_ATOMIC_ALT
(
T
,
U
) \

482 
ãm∂©e
<> 
	`__TBB_DEPRECATED_VERBOSE_MSG
("tbb::atomic is deprecated, use std::atomic") \

483 
©omic
<
T
>: 
öã∫Æ
::
©omic_im∂_wôh_¨ôhmëic
<T,T,> { \

484 
T
 
›î©‹
=–
U
 
rhs
 ) { 
	`°‹e_wôh_ªÀa£
(
	`T
(rhs));} \

485 
©omic
<
T
>& 
›î©‹
=–c⁄°átomic<T>& 
rhs
 ) {
	`°‹e_wôh_ªÀa£
‘hs);  *
this
;} \

486 };

	)

488 
__TBB_DECL_ATOMIC_ALT
(,
size_t
)

489 
__TBB_DECL_ATOMIC_ALT
(,
±rdiff_t
)

491 
__TBB_DECL_ATOMIC
()

492 
__TBB_DECL_ATOMIC
()

495 
__TBB_DECL_ATOMIC
()

496 
__TBB_DECL_ATOMIC
()

497 
__TBB_DECL_ATOMIC
()

498 
__TBB_DECL_ATOMIC
(signed )

499 
__TBB_DECL_ATOMIC
()

501 #i‡!
_MSC_VER
 || 
deföed
(
_NATIVE_WCHAR_T_DEFINED
)

502 
__TBB_DECL_ATOMIC
(
wch¨_t
)

506 
	gãm∂©e
<
ty≥«me
 
	gT
> 
__TBB_DEPRECATED_VERBOSE_MSG
("tbb::atomic is deprecated, use std::atomic")

507 
	g©omic
<
	gT
*>: 
öã∫Æ
::
©omic_im∂_wôh_¨ôhmëic
<
T
*,
	g±rdiff_t
,T> {

508 #i‡
__TBB_ATOMIC_CTORS


509 
©omic
() =  ;

510 
c⁄°ex¥
 
©omic
(
T
* 
¨g
): 
öã∫Æ
::
©omic_im∂_wôh_¨ôhmëic
<T*,
	g±rdiff_t
,
	gT
>(
	g¨g
) {}

511 
c⁄°ex¥
 
©omic
(c⁄°átomic<
T
*>& 
rhs
): 
öã∫Æ
::
©omic_im∂_wôh_¨ôhmëic
<T*,
	g±rdiff_t
,
	gT
>(
	grhs
) {}

513 
T
* 
	g›î©‹
=–T* 
rhs
 ) {

515  
this
->
°‹e_wôh_ªÀa£
(
rhs
);

517 
	g©omic
<
	gT
*>& 
	g›î©‹
=–c⁄° 
©omic
<
T
*>& 
rhs
 ) {

518 
this
->
°‹e_wôh_ªÀa£
(
rhs
);  *
	gthis
;

520 
T
* 
	g›î©‹
->() const {

521  (*
	gthis
);

526 
	gãm∂©e
<> 
__TBB_DEPRECATED_VERBOSE_MSG
("tbb::atomic is deprecated, use std::atomic")

527 
	g©omic
<*>: 
öã∫Æ
::
©omic_im∂
<*> {

528 #i‡
__TBB_ATOMIC_CTORS


529 
©omic
() =  ;

530 
c⁄°ex¥
 
©omic
(* 
¨g
): 
öã∫Æ
::
©omic_im∂
<*>(arg) {}

531 
c⁄°ex¥
 
©omic
(c⁄°átomic<*>& 
rhs
): 
öã∫Æ
::
©omic_im∂
<*>(rhs) {}

533 * 
›î©‹
=–* 
rhs
 ) {

535  
this
->
°‹e_wôh_ªÀa£
(
rhs
);

537 
	g©omic
<*>& 
	g›î©‹
=–c⁄° 
©omic
<*>& 
rhs
 ) {

538 
this
->
°‹e_wôh_ªÀa£
(
rhs
);  *
	gthis
;

545 
	gãm∂©e
 <
mem‹y_£m™tics
 
	gM
, 
ty≥«me
 
	gT
>

546 
T
 
lﬂd
 ( c⁄° 
©omic
<T>& 
a
 ) {  
	ga
.
ãm∂©e
 
	glﬂd
<
	gM
>(); }

548 
	gãm∂©e
 <
mem‹y_£m™tics
 
	gM
, 
ty≥«me
 
	gT
>

549 
°‹e
 ( 
©omic
<
T
>& 
a
, T 
vÆue
 ) { 
	ga
.
ãm∂©e
 
	g°‹e
<
	gM
>(
	gvÆue
); }

551 
«me•a˚
 
	göãrÁ˚6
{

553 
	gãm∂©e
<
ty≥«me
 
	gT
>

554 
	g©omic
<
	gT
> 
make_©omic
(
T
 
t
) {

555 
	g©omic
<
	gT
> 
	ga
;

556 
	g°‹e
<
	gªœxed
>(
	ga
,
	gt
);

557  
	ga
;

560 
usög
 
	göãrÁ˚6
::
make_©omic
;

562 
«me•a˚
 
	göã∫Æ
 {

563 
	gãm∂©e
<
mem‹y_£m™tics
 
	gM
, 
ty≥«me
 
	gT
 >

564 
sw≠
(
©omic
<
T
> & 
lhs
,átomic<T> & 
rhs
){

565 
T
 
	gtmp
 = 
lﬂd
<
M
>(
lhs
);

566 
	g°‹e
<
	gM
>(
	glhs
,
	glﬂd
<M>(
	grhs
));

567 
	g°‹e
<
	gM
>(
	grhs
,
	gtmp
);

571 
	gãm∂©e
<
ty≥«me
 
	gT
>

572 
ölöe
 
	g©omic
<
	gT
>& 
as_©omic
–
T
& 
t
 ) {

573  (
	g©omic
<
	gT
>&)
	gt
;

579 #i‡
_MSC_VER
 && !
__INTEL_COMPILER


580 #¥agm®
w¨nög
 (
p›
)

583 
	~"öã∫Æ/_w¨nög_suµªss_dißbÀ_nŸi˚.h
"

584 #unde‡
__TBB_©omic_H_ö˛ude_¨ó


	@/usr/include/tbb/cache_aligned_allocator.h

17 #i‚de‡
__TBB_ˇche_Æig√d_Æloˇt‹_H


18 
	#__TBB_ˇche_Æig√d_Æloˇt‹_H


	)

20 
	~<√w
>

21 
	~"tbb_°ddef.h
"

22 #i‡
__TBB_ALLOCATOR_CONSTRUCT_VARIADIC


23 
	~<utûôy
>

26 #i‡
__TBB_CPP17_MEMORY_RESOURCE_PRESENT


27 
	~<mem‹y_ªsour˚
>

30 
«me•a˚
 
	gtbb
 {

33 
«me•a˚
 
	göã∫Æ
 {

36 
size_t
 
__TBB_EXPORTED_FUNC
 
NFS_GëLöeSize
();

40 * 
__TBB_EXPORTED_FUNC
 
NFS_AŒoˇã
–
size_t
 
n_ñemít
, size_à
ñemít_size
, * 
höt
 );

45 
__TBB_EXPORTED_FUNC
 
NFS_Fªe
( * );

49 #i‡
_MSC_VER
 && !
deföed
(
__INTEL_COMPILER
)

51 #¥agm®
w¨nög
 (
push
)

52 #¥agm®
w¨nög
 (
dißbÀ
: 4100)

59 
	gãm∂©e
<
ty≥«me
 
	gT
>

60 ˛as†
	cˇche_Æig√d_Æloˇt‹
 {

61 
	gpublic
:

62 
ty≥«me
 
	töã∫Æ
::
	tÆloˇt‹_ty≥
<
	tT
>::
	tvÆue_ty≥
 value_type;

63 
vÆue_ty≥
* 
	tpoöãr
;

64 c⁄° 
	tvÆue_ty≥
* 
	tc⁄°_poöãr
;

65 
	gvÆue_ty≥
& 
	tª„ªn˚
;

66 c⁄° 
	tvÆue_ty≥
& 
	tc⁄°_ª„ªn˚
;

67 
size_t
 
	tsize_ty≥
;

68 
±rdiff_t
 
	tdif„ªn˚_ty≥
;

69 
	gãm∂©e
<
ty≥«me
 
	gU
> 
	sªböd
 {

70 
	gˇche_Æig√d_Æloˇt‹
<
	tU
> 
	tŸhî
;

72 
ˇche_Æig√d_Æloˇt‹
(Ë
throw
() {}

73 
ˇche_Æig√d_Æloˇt‹
–c⁄° cache_Æig√d_Æloˇt‹& ) 
throw
() {}

74 
	gãm∂©e
<
ty≥«me
 
	gU
> 
ˇche_Æig√d_Æloˇt‹
(c⁄° cache_Æig√d_Æloˇt‹<
U
>&Ë
throw
() {}

76 
poöãr
 
addªss
(
ª„ªn˚
 
x
Ëc⁄° { &
	gx
;}

77 
c⁄°_poöãr
 
addªss
(
c⁄°_ª„ªn˚
 
x
Ëc⁄° { &
	gx
;}

80 
poöãr
 
Æloˇã
–
size_ty≥
 
n
, c⁄° * 
höt
=0 ) {

82  
poöãr
(
öã∫Æ
::
NFS_AŒoˇã
–
n
, (
vÆue_ty≥
), 
c⁄°_ˇ°
<*>(
höt
) ));

86 
dóŒoˇã
–
poöãr
 
p
, 
size_ty≥
 ) {

87 
	göã∫Æ
::
NFS_Fªe
(
p
);

91 
size_ty≥
 
max_size
(Ëc⁄° 
throw
() {

92  (~
size_t
(0)-
	göã∫Æ
::
NFS_MaxLöeSize
)/(
vÆue_ty≥
);

96 #i‡
__TBB_ALLOCATOR_CONSTRUCT_VARIADIC


97 
	gãm∂©e
<
ty≥«me
 
	gU
, 
	gty≥«me
... 
	gArgs
>

98 
c⁄°ru˘
(
U
 *
p
, 
Args
&&... 
¨gs
)

99 { ::
√w
((*)
p
Ë
U
(
°d
::
f‹w¨d
<
Args
>(
¨gs
)...); }

101 #i‡
__TBB_CPP11_RVALUE_REF_PRESENT


102 
c⁄°ru˘
–
poöãr
 
p
, 
vÆue_ty≥
&& 
vÆue
 ) {::
√w
((*)’)ËvÆue_ty≥(
°d
::
move
(value));}

104 
c⁄°ru˘
–
poöãr
 
p
, c⁄° 
vÆue_ty≥
& 
vÆue
 ) {::
√w
((*)(p)) value_type(value);}

108 
de°roy
–
poöãr
 
p
 ) {
	gp
->~
vÆue_ty≥
();}

111 #i‡
_MSC_VER
 && !
	$deföed
(
__INTEL_COMPILER
)

112 #¥agm®
	$w¨nög
 (
p›
)

117 
ãm∂©e
<>

118 
˛ass
 
ˇche_Æig√d_Æloˇt‹
<> {

119 
public
:

120 * 
	tpoöãr
;

121 c⁄° * 
	tc⁄°_poöãr
;

122 
	tvÆue_ty≥
;

123 
ãm∂©e
<
ty≥«me
 
U
> 
	sªböd
 {

124 
ˇche_Æig√d_Æloˇt‹
<
	tU
> 
	tŸhî
;

126 
	}
};

128 
	gãm∂©e
<
ty≥«me
 
	gT
,Åy≥«mê
	gU
>

129 
ölöe
 
boﬁ
 
	g›î©‹
==–c⁄° 
ˇche_Æig√d_Æloˇt‹
<
T
>&, c⁄° 
	gˇche_Æig√d_Æloˇt‹
<
	gU
>& ) { 
	gåue
;}

131 
	gãm∂©e
<
ty≥«me
 
	gT
,Åy≥«mê
	gU
>

132 
ölöe
 
boﬁ
 
	g›î©‹
!=–c⁄° 
ˇche_Æig√d_Æloˇt‹
<
T
>&, c⁄° 
	gˇche_Æig√d_Æloˇt‹
<
	gU
>& ) { 
	gÁl£
;}

134 #i‡
__TBB_CPP17_MEMORY_RESOURCE_PRESENT


137 ˛as†
	cˇche_Æig√d_ªsour˚
 : 
public
 
°d
::
pmr
::
mem‹y_ªsour˚
 {

138 
public
:

139 
ˇche_Æig√d_ªsour˚
(Ë: cache_Æig√d_ªsour˚(
°d
::
pmr
::
gë_deÁu…_ªsour˚
()) {}

140 
ex∂icô
 
ˇche_Æig√d_ªsour˚
(
°d
::
pmr
::
mem‹y_ªsour˚
* 
up°ªam
Ë: 
m_up°ªam
(upstream) {}

142 
°d
::
pmr
::
mem‹y_ªsour˚
* 
up°ªam_ªsour˚
() const {

143  
m_up°ªam
;

146 
	g¥iv©e
:

148 * 
do_Æloˇã
(
size_t
 
byãs
, size_à
Æignmít
Ë
	govîride
 {

149 
size_t
 
	gˇche_löe_Æignmít
 = 
c‹ª˘_Æignmít
(
Æignmít
);

150 
uöçå_t
 
	gba£
 = (uöçå_t)
m_up°ªam
->
Æloˇã
(
c‹ª˘_size
(
byãs
Ë+ 
ˇche_löe_Æignmít
);

151 
__TBB_ASSERT
(
ba£
 != 0, "UpstreamÑesourceÑeturned NULL.");

152 #i‡
_MSC_VER
 && !
deföed
(
__INTEL_COMPILER
)

154 #¥agm®
w¨nög
(
push
)

155 #¥agm®
w¨nög
(
dißbÀ
: 4146 4706)

158 
uöçå_t
 
	gªsu…
 = (
ba£
 + 
ˇche_löe_Æignmít
) & -cache_line_alignment;

159 #i‡
_MSC_VER
 && !
deföed
(
__INTEL_COMPILER
)

160 #¥agm®
w¨nög
(
p›
)

163 ((
	guöçå_t
*)
	gªsu…
)[-1] = 
ba£
;

164  (*)
	gªsu…
;

167 
do_dóŒoˇã
(* 
±r
, 
size_t
 
byãs
, size_à
Æignmít
Ë
	govîride
 {

168 i‡(
	g±r
) {

170 
uöçå_t
 
	gba£
 = ((uöçå_t*)
±r
)[-1];

171 
	gm_up°ªam
->
dóŒoˇã
((*)
ba£
, 
c‹ª˘_size
(
byãs
Ë+ 
c‹ª˘_Æignmít
(
Æignmít
));

175 
boﬁ
 
do_is_equÆ
(c⁄° 
°d
::
pmr
::
mem‹y_ªsour˚
& 
Ÿhî
Ëc⁄° 
n€x˚±
 
ovîride
 {

176 i‡(
this
 =&
Ÿhî
Ë{  
åue
; }

177 #i‡
__TBB_USE_OPTIONAL_RTTI


178 c⁄° 
ˇche_Æig√d_ªsour˚
* 
	gŸhî_ªs
 = 
dy«mic_ˇ°
<c⁄° cache_Æig√d_ªsour˚*>(&
Ÿhî
);

179  
	gŸhî_ªs
 && (
	gthis
->
up°ªam_ªsour˚
(Ë=
Ÿhî_ªs
->upstream_resource());

181  
	gÁl£
;

185 
size_t
 
c‹ª˘_Æignmít
(size_à
Æignmít
) {

186 
__TBB_ASSERT
(
tbb
::
öã∫Æ
::
is_powî_of_two
(
Æignmít
), "Alignment isÇotáÖower of 2");

187 #i‡
__TBB_CPP17_HW_INTERFERENCE_SIZE_PRESENT


188 
size_t
 
	gˇche_löe_size
 = 
°d
::
h¨dw¨e_de°ru˘ive_öãr„ªn˚_size
;

190 
size_t
 
	gˇche_löe_size
 = 
öã∫Æ
::
NFS_GëLöeSize
();

192  
	gÆignmít
 < 
	gˇche_löe_size
 ? cache_löe_sizê: 
Æignmít
;

195 
size_t
 
c‹ª˘_size
(size_à
byãs
) {

198  
	gbyãs
 < (
	guöçå_t
Ë? (uöçå_tË: 
byãs
;

201 
	g°d
::
pmr
::
mem‹y_ªsour˚
* 
m_up°ªam
;

	@/usr/include/tbb/compat/condition_variable

17 
	~"../öã∫Æ/_dïªˇãd_hódî_mesßge_gu¨d.h
"

19 #i‡!
deföed
(
__TBB_show_dïªˇti⁄_mesßge_c⁄dôi⁄_v¨übÀ_H
Ë&& deföed(
__TBB_show_dïªˇãd_hódî_mesßge
)

20 
	#__TBB_show_dïªˇti⁄_mesßge_c⁄dôi⁄_v¨übÀ_H


	)

21 #¥agm®
mesßge
("TBB Warning:Åbb/compat/condition_variable is deprecated. For details,Ölease see Deprecated Featuresáppendix inÅhe TBBÑeference manual.")

24 #i‡
deföed
(
__TBB_show_dïªˇãd_hódî_mesßge
)

25 #unde‡
__TBB_show_dïªˇãd_hódî_mesßge


28 #i‚de‡
__TBB_c⁄dôi⁄_v¨übÀ_H


29 
	#__TBB_c⁄dôi⁄_v¨übÀ_H


	)

31 
	#__TBB_c⁄dôi⁄_v¨übÀ_H_ö˛ude_¨ó


	)

32 
	~"../öã∫Æ/_w¨nög_suµªss_íabÀ_nŸi˚.h
"

34 #i‡
_WIN32
||
_WIN64


35 
	~"../machöe/wödows_≠i.h
"

37 
«me•a˚
 
	gtbb
 {

38 
«me•a˚
 
	göãrÁ˚5
 {

39 
«me•a˚
 
	göã∫Æ
 {

40 
	sc⁄dôi⁄_v¨übÀ_usög_evít


43 
HANDLE
 
	gevít
;

45 
CRITICAL_SECTION
 
	gmuãx
;

47 
	gn_waôîs
;

49 
	gªÀa£_cou¡
;

51 
	gïoch
;

55 #i‚de‡
CONDITION_VARIABLE_INIT


56 * 
	tCONDITION_VARIABLE
;

57 
CONDITION_VARIABLE
* 
	tPCONDITION_VARIABLE
;

61 
	~<î∫o.h
>

62 
	~<±hªad.h
>

63 #i‡
__löux__


64 
	~<˘ime
>

66 
	~<sys/time.h
>

70 
	~"../tbb_°ddef.h
"

71 
	~"../muãx.h
"

72 
	~"../tbb_thªad.h
"

73 
	~"../tbb_ex˚±i⁄.h
"

74 
	~"../tbb_¥ofûög.h
"

76 
«me•a˚
 
	gtbb
 {

78 
«me•a˚
 
	göãrÁ˚5
 {

82 
__TBB_DEPRECATED_VERBOSE
 
	gde„r_lock_t
 { };

83 
__TBB_DEPRECATED_VERBOSE
 
	gåy_to_lock_t
 { };

84 
__TBB_DEPRECATED_VERBOSE
 
	gad›t_lock_t
 { };

85 
__TBB_DEPRECATED_VERBOSE
 c⁄° 
de„r_lock_t
 
	gde„r_lock
 = {};

86 
__TBB_DEPRECATED_VERBOSE
 c⁄° 
åy_to_lock_t
 
	gåy_to_lock
 = {};

87 
__TBB_DEPRECATED_VERBOSE
 c⁄° 
ad›t_lock_t
 
	gad›t_lock
 = {};

91 
	gãm∂©e
<
ty≥«me
 
	gM
>

92 ˛as†
	c__TBB_DEPRECATED_VERBOSE
 
	glock_gu¨d
 : 
tbb
::
öã∫Æ
::
no_c›y
 {

93 
public
:

95 
M
 
	tmuãx_ty≥
;

100 
ex∂icô
 
lock_gu¨d
(
muãx_ty≥
& 
m
Ë: 
pm
(mË{m.
lock
();}

104 
lock_gu¨d
(
muãx_ty≥
& 
m
, 
ad›t_lock_t
Ë: 
pm
(m) {}

107 ~
lock_gu¨d
(Ë{ 
pm
.
u∆ock
(); }

108 
	g¥iv©e
:

109 
muãx_ty≥
& 
pm
;

114 
	gãm∂©e
<
ty≥«me
 
	gM
>

115 ˛as†
	c__TBB_DEPRECATED_VERBOSE
 
	gunique_lock
 : 
tbb
::
öã∫Æ
::
no_c›y
 {

116 
‰õnd
 
˛ass
 
c⁄dôi⁄_v¨übÀ
;

117 
	gpublic
:

118 
M
 
	tmuãx_ty≥
;

124 
unique_lock
(Ë: 
pm
(
NULL
), 
owns
(
Ál£
) {}

130 
ex∂icô
 
unique_lock
(
muãx_ty≥
& 
m
Ë: 
pm
(&mË{m.
lock
(); 
	gowns
=
åue
;}

134 
unique_lock
(
muãx_ty≥
& 
m
, 
de„r_lock_t
Ë: 
pm
(&m), 
owns
(
Ál£
) {}

141 
unique_lock
(
muãx_ty≥
& 
m
, 
åy_to_lock_t
Ë: 
pm
(&mË{
owns
 = m.
åy_lock
();}

146 
unique_lock
(
muãx_ty≥
& 
m
, 
ad›t_lock_t
Ë: 
pm
(&m), 
owns
(
åue
) {}

151 
unique_lock
(
muãx_ty≥
& 
m
, c⁄° 
tick_cou¡
::
öãrvÆ_t
 &
i
Ë: 
pm
(&mË{
owns
 = 
åy_lock_f‹
( i );}

153 #i‡
__TBB_CPP11_RVALUE_REF_PRESENT


157 
unique_lock
(unique_lock && 
§c
): 
pm
(
NULL
), 
owns
(
Ál£
Ë{
	gthis
->
sw≠
(src);}

163 
	gunique_lock
& 
	g›î©‹
=(
unique_lock
 && 
§c
) {

164 i‡(
owns
)

165 
this
->
u∆ock
();

166 
	gpm
 = 
NULL
;

167 
	gthis
->
sw≠
(
§c
);

168  *
	gthis
;

173 ~
unique_lock
(Ë{ if–
	gowns
 ) 
	gpm
->
u∆ock
(); }

177 
lock
() {

178 if–
	gpm
 ) {

179 if–!
	gowns
 ) {

180 
	gpm
->
lock
();

181 
	gowns
 = 
åue
;

183 
throw_ex˚±i⁄_v4
–
tbb
::
öã∫Æ
::
eid_possibÀ_dódlock
 );

185 
throw_ex˚±i⁄_v4
–
tbb
::
öã∫Æ
::
eid_›î©i⁄_nŸ_≥rmôãd
 );

186 
__TBB_ASSERT
–
owns
, 
NULL
 );

191 
boﬁ
 
åy_lock
() {

192 if–
	gpm
 ) {

193 if–!
	gowns
 )

194 
	gowns
 = 
pm
->
åy_lock
();

196 
throw_ex˚±i⁄_v4
–
tbb
::
öã∫Æ
::
eid_possibÀ_dódlock
 );

198 
throw_ex˚±i⁄_v4
–
tbb
::
öã∫Æ
::
eid_›î©i⁄_nŸ_≥rmôãd
 );

199  
	gowns
;

203 
boﬁ
 
åy_lock_f‹
–c⁄° 
tick_cou¡
::
öãrvÆ_t
 &
i
 );

207 
u∆ock
() {

208 if–
	gowns
 ) {

209 
	gpm
->
u∆ock
();

210 
	gowns
 = 
Ál£
;

212 
throw_ex˚±i⁄_v4
–
tbb
::
öã∫Æ
::
eid_›î©i⁄_nŸ_≥rmôãd
 );

213 
__TBB_ASSERT
–!
owns
, 
NULL
 );

218 
sw≠
(
unique_lock
& 
u
) {

219 
muãx_ty≥
* 
	gt_pm
 = 
u
.
pm
; 
	gu
.
	gpm
 =Öm;Öm = 
t_pm
;

220 
boﬁ
 
	gt_owns
 = 
u
.
owns
; 
	gu
.
	gowns
 = owns; own†
t_owns
;

224 
muãx_ty≥
* 
ªÀa£
() {

225 
muãx_ty≥
* 
	go_pm
 = 
pm
;

226 
	gpm
 = 
NULL
;

227 
	gowns
 = 
Ál£
;

228  
	go_pm
;

233 
boﬁ
 
owns_lock
(Ëc⁄° {  
	gowns
; }

237  
›î©‹
 
boﬁ
(Ëc⁄° {  
	gowns
; }

240 
muãx_ty≥
* 
muãx
(Ëc⁄° {  
	gpm
; }

242 
	g¥iv©e
:

243 
muãx_ty≥
* 
pm
;

244 
boﬁ
 
	gowns
;

247 
	gãm∂©e
<
ty≥«me
 
	gM
>

248 
__TBB_DEPRECATED_VERBOSE
 
boﬁ
 
	gunique_lock
<
	gM
>::
åy_lock_f‹
–c⁄° 
tick_cou¡
::
öãrvÆ_t
 &
i
)

250 c⁄° 
unique_lock_tick
 = 100;

252 
boﬁ
 
	gªs
 = 
pm
->
åy_lock
();

253 
	gduøti⁄_ö_mi¸o
;

254 if–!
	gªs
 && (
	gduøti⁄_ö_mi¸o
=(
i
.
£c⁄ds
()*1e6))>
unique_lock_tick
 ) {

255 
tick_cou¡
::
öãrvÆ_t
 
i_100
–(
unique_lock_tick
)/1e6 );

257 
	gthis_tbb_thªad
::
¶ìp
(
i_100
);

258 
	gduøti⁄_ö_mi¸o
 -
unique_lock_tick
;

259 
	gªs
 = 
pm
->
åy_lock
();

260 }  !
	gªs
 && 
	gduøti⁄_ö_mi¸o
>
	gunique_lock_tick
 );

262  (
	gowns
=
ªs
);

266 
	gãm∂©e
<
ty≥«me
 
	gM
>

267 
sw≠
(
unique_lock
<
M
>& 
x
, unique_lock<M>& 
y
Ë{ 
	gx
.swap( y ); }

269 
«me•a˚
 
	göã∫Æ
 {

271 #i‡
_WIN32
||
_WIN64


272 
	uc⁄dv¨_im∂_t
 {

273 
c⁄dôi⁄_v¨übÀ_usög_evít
 
	gcv_evít
;

274 
CONDITION_VARIABLE
 
	gcv_«tive
;

276 
__TBB_EXPORTED_FUNC
 
öã∫Æ_öôülize_c⁄dôi⁄_v¨übÀ
–
c⁄dv¨_im∂_t
& 
cv
 );

277 
__TBB_EXPORTED_FUNC
 
öã∫Æ_de°roy_c⁄dôi⁄_v¨übÀ
–
c⁄dv¨_im∂_t
& 
cv
 );

278 
__TBB_EXPORTED_FUNC
 
öã∫Æ_c⁄dôi⁄_v¨übÀ_nŸify_⁄e
–
c⁄dv¨_im∂_t
& 
cv
 );

279 
__TBB_EXPORTED_FUNC
 
öã∫Æ_c⁄dôi⁄_v¨übÀ_nŸify_Æl
–
c⁄dv¨_im∂_t
& 
cv
 );

280 
boﬁ
 
__TBB_EXPORTED_FUNC
 
öã∫Æ_c⁄dôi⁄_v¨übÀ_waô
–
c⁄dv¨_im∂_t
& 
cv
, 
muãx
* 
mtx
, c⁄° 
tick_cou¡
::
öãrvÆ_t
* 
i
 = 
NULL
 );

283 
±hªad_c⁄d_t
 
	tc⁄dv¨_im∂_t
;

290 
	ecv_°©us
 { 
	gno_timeout
, 
	gtimeout
 };

295 ˛as†
	c__TBB_DEPRECATED_VERBOSE
 
	gc⁄dôi⁄_v¨übÀ
 : 
tbb
::
öã∫Æ
::
no_c›y
 {

296 
public
:

298 
c⁄dôi⁄_v¨übÀ
() {

299 #i‡
_WIN32
||
_WIN64


300 
öã∫Æ_öôülize_c⁄dôi⁄_v¨übÀ
–
my_cv
 );

302 
±hªad_c⁄d_öô
–&
my_cv
, 
NULL
 );

307 ~
c⁄dôi⁄_v¨übÀ
() {

309 #i‡
_WIN32
||
_WIN64


310 
öã∫Æ_de°roy_c⁄dôi⁄_v¨übÀ
–
my_cv
 );

312 
±hªad_c⁄d_de°roy
–&
my_cv
 );

317 
nŸify_⁄e
() {

318 #i‡
_WIN32
||
_WIN64


319 
öã∫Æ_c⁄dôi⁄_v¨übÀ_nŸify_⁄e
–
my_cv
 );

321 
±hªad_c⁄d_sig«l
–&
my_cv
 );

326 
nŸify_Æl
() {

327 #i‡
_WIN32
||
_WIN64


328 
öã∫Æ_c⁄dôi⁄_v¨übÀ_nŸify_Æl
–
my_cv
 );

330 
±hªad_c⁄d_brﬂdˇ°
–&
my_cv
 );

335 
waô
(
unique_lock
<
muãx
>& 
lock
);

338 
	gãm∂©e
 <
˛ass
 
	gPªdiˇã
>

339 
waô
(
unique_lock
<
muãx
>& 
lock
, 
Pªdiˇã
 
¥ed
) {

340  !
¥ed
() )

341 
waô
–
lock
 );

345 
cv_°©us
 
waô_f‹
(
unique_lock
<
muãx
>& 
lock
, c⁄° 
tick_cou¡
::
öãrvÆ_t
 &
i
 );

349 
	gãm∂©e
<
ty≥«me
 
	gPªdiˇã
>

350 
boﬁ
 
waô_f‹
(
unique_lock
<
muãx
>& 
lock
, c⁄° 
tick_cou¡
::
öãrvÆ_t
 &
i
, 
Pªdiˇã
 
¥ed
)

352  !
¥ed
() ) {

353 
cv_°©us
 
	g°
 = 
waô_f‹
–
lock
, 
i
 );

354 if–
	g°
==
timeout
 )

355  
¥ed
();

357  
	gåue
;

361 
	göã∫Æ
::
	tc⁄dv¨_im∂_t
* 
	t«tive_h™dÀ_ty≥
;

363 
«tive_h™dÀ_ty≥
 
«tive_h™dÀ
(Ë{  (
	g«tive_h™dÀ_ty≥
Ë&
	gmy_cv
; }

365 
	g¥iv©e
:

366 
öã∫Æ
::
c⁄dv¨_im∂_t
 
my_cv
;

370 #i‡
_WIN32
||
_WIN64


371 
ölöe
 
	gc⁄dôi⁄_v¨übÀ
::
waô
–
unique_lock
<
muãx
>& 
lock
 )

373 
__TBB_ASSERT
–
lock
.
owns
, 
NULL
 );

374 
	glock
.
	gowns
 = 
Ál£
;

375 if–!
öã∫Æ_c⁄dôi⁄_v¨übÀ_waô
–
my_cv
, 
lock
.
muãx
() ) ) {

376 
	gec
 = 
GëLa°Eº‹
();

378 
__TBB_ASSERT_EX
–
ec
!=
WAIT_TIMEOUT
&&ec!=
ERROR_TIMEOUT
, 
NULL
 );

379 
	glock
.
	gowns
 = 
åue
;

380 
throw_ex˚±i⁄_v4
–
tbb
::
öã∫Æ
::
eid_c⁄dv¨_waô_Áûed
 );

382 
	glock
.
	gowns
 = 
åue
;

385 
ölöe
 
cv_°©us
 
	gc⁄dôi⁄_v¨übÀ
::
waô_f‹
–
unique_lock
<
muãx
>& 
lock
, c⁄° 
tick_cou¡
::
öãrvÆ_t
& 
i
 )

387 
cv_°©us
 
rc
 = 
no_timeout
;

388 
__TBB_ASSERT
–
lock
.
owns
, 
NULL
 );

389 
	glock
.
	gowns
 = 
Ál£
;

391 if–!
öã∫Æ_c⁄dôi⁄_v¨übÀ_waô
–
my_cv
, 
lock
.
muãx
(), &
i
 ) ) {

392 
	gec
 = 
GëLa°Eº‹
();

393 if–
	gec
==
WAIT_TIMEOUT
 || 
ec
==
ERROR_TIMEOUT
 )

394 
rc
 = 
timeout
;

396 
	glock
.
	gowns
 = 
åue
;

397 
throw_ex˚±i⁄_v4
–
tbb
::
öã∫Æ
::
eid_c⁄dv¨_waô_Áûed
 );

400 
	glock
.
	gowns
 = 
åue
;

401  
	grc
;

405 
ölöe
 
	gc⁄dôi⁄_v¨übÀ
::
waô
–
unique_lock
<
muãx
>& 
lock
 )

407 
__TBB_ASSERT
–
lock
.
owns
, 
NULL
 );

408 
	glock
.
	gowns
 = 
Ál£
;

409 if–
±hªad_c⁄d_waô
–&
my_cv
, 
lock
.
muãx
()->
«tive_h™dÀ
() ) ) {

410 
	glock
.
	gowns
 = 
åue
;

411 
throw_ex˚±i⁄_v4
–
tbb
::
öã∫Æ
::
eid_c⁄dv¨_waô_Áûed
 );

414 
	glock
.
	gowns
 = 
åue
;

417 
ölöe
 
cv_°©us
 
	gc⁄dôi⁄_v¨übÀ
::
waô_f‹
–
unique_lock
<
muãx
>& 
lock
, c⁄° 
tick_cou¡
::
öãrvÆ_t
& 
i
 )

419 #i‡
__löux__


420 
time•ec
 
ªq
;

421 
	g£c
 = 
i
.
£c⁄ds
();

422 
˛ock_gëtime
–
CLOCK_REALTIME
, &
ªq
 );

423 
	gªq
.
	gtv_£c
 +
°©ic_ˇ°
<>(
£c
);

424 
	gªq
.
	gtv_n£c
 +
°©ic_ˇ°
<>–(
£c
 - static_cast<>(sec))*1e9 );

426 
timevÆ
 
	gtv
;

427 
time•ec
 
	gªq
;

428 
	g£c
 = 
i
.
£c⁄ds
();

429 
	g°©us
 = 
gëtimeofday
(&
tv
, 
NULL
);

430 
__TBB_ASSERT_EX
–
°©us
==0, "gettimeofday failed" );

431 
	gªq
.
	gtv_£c
 = 
tv
.
tv_£c
 + 
°©ic_ˇ°
<>(
£c
);

432 
	gªq
.
	gtv_n£c
 = 
tv
.
tv_u£c
*1000 + 
°©ic_ˇ°
<>–(
£c
 - static_cast<>(sec))*1e9 );

434 if–
	gªq
.
	gtv_n£c
>=1e9 ) {

435 
ªq
.
tv_£c
 += 1;

436 
	gªq
.
	gtv_n£c
 -
°©ic_ˇ°
<>(1e9);

438 
__TBB_ASSERT
–0<=
ªq
.
tv_n£c
 &&Ñeq.tv_n£c<1e9, 
NULL
 );

440 
	gec
;

441 
cv_°©us
 
	grc
 = 
no_timeout
;

442 
__TBB_ASSERT
–
lock
.
owns
, 
NULL
 );

443 
	glock
.
	gowns
 = 
Ál£
;

444 if––
	gec
=
±hªad_c⁄d_timedwaô
–&
my_cv
, 
lock
.
muãx
()->
«tive_h™dÀ
(), &
ªq
 ) ) ) {

445 if–
	gec
==
ETIMEDOUT
 )

446 
rc
 = 
timeout
;

448 
__TBB_ASSERT
–
lock
.
åy_lock
()==
Ál£
, 
NULL
 );

449 
	glock
.
	gowns
 = 
åue
;

450 
throw_ex˚±i⁄_v4
–
tbb
::
öã∫Æ
::
eid_c⁄dv¨_waô_Áûed
 );

453 
	glock
.
	gowns
 = 
åue
;

454  
	grc
;

460 
__TBB_DEFINE_PROFILING_SET_NAME
(
öãrÁ˚5
::
c⁄dôi⁄_v¨übÀ
)

464 #i‡
TBB_IMPLEMENT_CPP0X


466 
«me•a˚
 
°d
 {

468 
usög
 
tbb
::
öãrÁ˚5
::
de„r_lock_t
;

469 
usög
 
	gtbb
::
öãrÁ˚5
::
åy_to_lock_t
;

470 
usög
 
	gtbb
::
öãrÁ˚5
::
ad›t_lock_t
;

471 
usög
 
	gtbb
::
öãrÁ˚5
::
de„r_lock
;

472 
usög
 
	gtbb
::
öãrÁ˚5
::
åy_to_lock
;

473 
usög
 
	gtbb
::
öãrÁ˚5
::
ad›t_lock
;

474 
usög
 
	gtbb
::
öãrÁ˚5
::
lock_gu¨d
;

475 
usög
 
	gtbb
::
öãrÁ˚5
::
unique_lock
;

476 
usög
 
	gtbb
::
öãrÁ˚5
::
sw≠
;

477 
usög
 
	gtbb
::
öãrÁ˚5
::
c⁄dôi⁄_v¨übÀ
;

478 
usög
 
	gtbb
::
öãrÁ˚5
::
cv_°©us
;

479 
usög
 
	gtbb
::
öãrÁ˚5
::
timeout
;

480 
usög
 
	gtbb
::
öãrÁ˚5
::
no_timeout
;

486 
	~"../öã∫Æ/_w¨nög_suµªss_dißbÀ_nŸi˚.h
"

487 #unde‡
__TBB_c⁄dôi⁄_v¨übÀ_H_ö˛ude_¨ó


	@/usr/include/tbb/concurrent_hash_map.h

17 #i‚de‡
__TBB_c⁄cuºít_hash_m≠_H


18 
	#__TBB_c⁄cuºít_hash_m≠_H


	)

20 
	#__TBB_c⁄cuºít_hash_m≠_H_ö˛ude_¨ó


	)

21 
	~"öã∫Æ/_w¨nög_suµªss_íabÀ_nŸi˚.h
"

23 
	~"tbb_°ddef.h
"

24 
	~<ôî©‹
>

25 
	~<utûôy
>

26 
	~<c°rög
>

27 #ö˛udê
__TBB_STD_SWAP_HEADER


29 
	~"tbb_Æloˇt‹.h
"

30 
	~"•ö_rw_muãx.h
"

31 
	~"©omic.h
"

32 
	~"tbb_ex˚±i⁄.h
"

33 
	~"tbb_¥ofûög.h
"

34 
	~"Æig√d_•a˚.h
"

35 
	~"öã∫Æ/_tbb_hash_com∑ª_im∂.h
"

36 
	~"öã∫Æ/_ãm∂©e_hñ≥rs.h
"

37 
	~"öã∫Æ/_Æloˇt‹_åaôs.h
"

38 #i‡
__TBB_INITIALIZER_LISTS_PRESENT


39 
	~<öôülizî_li°
>

41 #i‡
TBB_USE_PERFORMANCE_WARNINGS
 || 
__TBB_STATISTICS


42 
	~<ty≥öfo
>

44 #i‡
__TBB_STATISTICS


45 
	~<°dio.h
>

47 #i‡
__TBB_CPP11_RVALUE_REF_PRESENT
 && 
__TBB_CPP11_VARIADIC_TEMPLATES_PRESENT
 && 
__TBB_CPP11_TUPLE_PRESENT


50 
	~<tu∂e
>

53 
«me•a˚
 
	gtbb
 {

55 
«me•a˚
 
	göãrÁ˚5
 {

57 
	gãm∂©e
<
ty≥«me
 
	gKey
,Åy≥«mê
	gT
,Åy≥«mê
	gHashCom∑ª
 = 
tbb_hash_com∑ª
<
Key
>,Åy≥«mê
	gA
 = 
tbb_Æloˇt‹
<
°d
::
∑ú
<const Key, T> > >

58 
˛ass
 
	gc⁄cuºít_hash_m≠
;

61 
«me•a˚
 
	göã∫Æ
 {

62 
usög
 
«me•a˚
 
	gtbb
::
öã∫Æ
;

66 
size_t
 
	thashcode_t
;

68 
	ghash_m≠_node_ba£
 : 
tbb
::
öã∫Æ
::
no_c›y
 {

70 
•ö_rw_muãx
 
	tmuãx_t
;

72 
	gmuãx_t
::
	tsc›ed_lock
 
	tsc›ed_t
;

74 
hash_m≠_node_ba£
 *
	g√xt
;

75 
muãx_t
 
	gmuãx
;

78 
hash_m≠_node_ba£
 *c⁄° 
	gªhash_ªq
 = 
ªöãΩªt_ˇ°
<hash_m≠_node_ba£*>(
size_t
(3));

80 
hash_m≠_node_ba£
 *c⁄° 
	gem±y_ªhashed
 = 
ªöãΩªt_ˇ°
<hash_m≠_node_ba£*>(
size_t
(0));

82 ˛as†
	chash_m≠_ba£
 {

83 
	gpublic
:

85 
size_t
 
	tsize_ty≥
;

87 
size_t
 
	thashcode_t
;

89 
size_t
 
	t£gmít_ödex_t
;

91 
hash_m≠_node_ba£
 
	tnode_ba£
;

93 
	gbuckë
 : 
tbb
::
öã∫Æ
::
no_c›y
 {

95 
•ö_rw_muãx
 
	tmuãx_t
;

97 
	gmuãx_t
::
	tsc›ed_lock
 
	tsc›ed_t
;

98 
muãx_t
 
	gmuãx
;

99 
node_ba£
 *
	gnode_li°
;

102 
size_ty≥
 c⁄° 
	gembedded_block
 = 1;

104 
size_ty≥
 c⁄° 
	gembedded_buckës
 = 1<<
embedded_block
;

106 
size_ty≥
 c⁄° 
	gfú°_block
 = 8;

108 
size_ty≥
 c⁄° 
	gpoöãrs_≥r_èbÀ
 = (
£gmít_ödex_t
) * 8;

110 
buckë
 *
	t£gmít_±r_t
;

112 
£gmít_±r_t
 
	t£gmíts_èbÀ_t
[
poöãrs_≥r_èbÀ
];

114 
	g©omic
<
	ghashcode_t
> 
	gmy_mask
;

116 
£gmíts_èbÀ_t
 
	gmy_èbÀ
;

118 
	g©omic
<
	gsize_ty≥
> 
	gmy_size
;

120 
buckë
 
	gmy_embedded_£gmít
[
embedded_buckës
];

121 #i‡
__TBB_STATISTICS


122 
	g©omic
<> 
	gmy_öfo_ªsizes
;

123 
muèbÀ
 
	g©omic
<> 
	gmy_öfo_ª°¨ts
;

124 
	g©omic
<> 
	gmy_öfo_ªhashes
;

127 
hash_m≠_ba£
() {

128 
	g°d
::
mem£t
(
my_èbÀ
, 0, (my_table));

129 
	gmy_mask
 = 0;

130 
	gmy_size
 = 0;

131 
	g°d
::
mem£t
(
my_embedded_£gmít
, 0, (my_embedded_segment));

132  
size_ty≥
 
	gi
 = 0; i < 
	gembedded_block
; i++ )

133 
	gmy_èbÀ
[
i
] = 
my_embedded_£gmít
 + 
£gmít_ba£
(i);

134 
	gmy_mask
 = 
embedded_buckës
 - 1;

135 
__TBB_ASSERT
–
embedded_block
 <
fú°_block
, "The first blockÇumber must includeÉmbedded blocks");

136 #i‡
__TBB_STATISTICS


137 
	gmy_öfo_ªsizes
 = 0;

138 
	gmy_öfo_ª°¨ts
 = 0;

139 
	gmy_öfo_ªhashes
 = 0;

144 
£gmít_ödex_t
 
£gmít_ödex_of
–
size_ty≥
 
ödex
 ) {

145  
£gmít_ödex_t
–
__TBB_Log2
–
ödex
|1 ) );

149 
£gmít_ödex_t
 
£gmít_ba£
–£gmít_ödex_à
k
 ) {

150  (
£gmít_ödex_t
(1)<<
	gk
 & ~segment_index_t(1));

154 
size_ty≥
 
£gmít_size
–
£gmít_ödex_t
 
k
 ) {

155  
size_ty≥
(1)<<
	gk
;

159 
boﬁ
 
is_vÆid
–*
±r
 ) {

160  
	gªöãΩªt_ˇ°
<
	guöçå_t
>(
	g±r
Ë> 
uöçå_t
(63);

164 
öô_buckës
–
£gmít_±r_t
 
±r
, 
size_ty≥
 
sz
, 
boﬁ
 
is_öôül
 ) {

165 if–
	gis_öôül
 ) 
	g°d
::
mem£t
–
°©ic_ˇ°
<*>(
±r
), 0, 
sz
*(
buckë
) );

166 
size_ty≥
 
	gi
 = 0; i < 
	gsz
; i++, 
	g±r
++) {

167 *
	gªöãΩªt_ˇ°
<
	göçå_t
*>(&
	g±r
->
	gmuãx
) = 0;

168 
	g±r
->
	gnode_li°
 = 
ªhash_ªq
;

173 
add_to_buckë
–
buckë
 *
b
, 
node_ba£
 *
n
 ) {

174 
__TBB_ASSERT
(
b
->
node_li°
 !
ªhash_ªq
, 
NULL
);

175 
	gn
->
	g√xt
 = 
b
->
node_li°
;

176 
	gb
->
	gnode_li°
 = 
n
;

180 
	gíabÀ_£gmít_Áûß„
 : 
tbb
::
öã∫Æ
::
no_c›y
 {

181 
£gmít_±r_t
 *
my_£gmít_±r
;

182 
íabÀ_£gmít_Áûß„
(
£gmíts_èbÀ_t
 &
èbÀ
, 
£gmít_ödex_t
 
k
Ë: 
my_£gmít_±r
(&table[k]) {}

183 ~
íabÀ_£gmít_Áûß„
() {

184 if–
my_£gmít_±r
 ) *my_segment_ptr = 0;

189 
	gãm∂©e
<
ty≥«me
 
	gAŒoˇt‹
>

190 
íabÀ_£gmít
–
£gmít_ödex_t
 
k
, c⁄° 
AŒoˇt‹
& 
Æloˇt‹
, 
boﬁ
 
is_öôül
 = 
Ál£
 ) {

191 
ty≥«me
 
	ttbb
::
	töã∫Æ
::
	tÆloˇt‹_ªböd
<
	tAŒoˇt‹
, 
	tbuckë
>::
	tty≥
 
	tbuckë_Æloˇt‹_ty≥
;

192 
	gtbb
::
	töã∫Æ
::
	tÆloˇt‹_åaôs
<
	tbuckë_Æloˇt‹_ty≥
> 
	tbuckë_Æloˇt‹_åaôs
;

193 
buckë_Æloˇt‹_ty≥
 
buckë_Æloˇt‹
(
Æloˇt‹
);

194 
__TBB_ASSERT
–
k
, "Zero segment must beÉmbedded" );

195 
íabÀ_£gmít_Áûß„
 
w©chdog
–
my_èbÀ
, 
k
 );

196 
size_ty≥
 
	gsz
;

197 
__TBB_ASSERT
–!
is_vÆid
(
my_èbÀ
[
k
]), "Wrong concurrentássignment");

198 if–
	gk
 >
fú°_block
 ) {

199 
sz
 = 
£gmít_size
–
k
 );

200 
£gmít_±r_t
 
	g±r
 = 
buckë_Æloˇt‹_åaôs
::
Æloˇã
(
buckë_Æloˇt‹
, 
sz
);

201 
öô_buckës
–
±r
, 
sz
, 
is_öôül
 );

202 
ôt_hide_°‹e_w‹d
–
my_èbÀ
[
k
], 
±r
 );

203 
	gsz
 <<= 1;

205 
__TBB_ASSERT
–
k
 =
embedded_block
, "Wrong segment index" );

206 
	gsz
 = 
£gmít_size
–
fú°_block
 );

207 
£gmít_±r_t
 
	g±r
 = 
buckë_Æloˇt‹_åaôs
::
Æloˇã
(
buckë_Æloˇt‹
, 
sz
 - 
embedded_buckës
);

208 
öô_buckës
–
±r
, 
sz
 - 
embedded_buckës
, 
is_öôül
 );

209 
	g±r
 -
£gmít_ba£
(
embedded_block
);

210 
£gmít_ödex_t
 
	gi
 = 
embedded_block
; i < 
	gfú°_block
; i++)

211 
ôt_hide_°‹e_w‹d
–
my_èbÀ
[
i
], 
±r
 + 
£gmít_ba£
(i) );

213 
ôt_°‹e_w‹d_wôh_ªÀa£
–
my_mask
, 
sz
-1 );

214 
	gw©chdog
.
	gmy_£gmít_±r
 = 0;

217 
	gãm∂©e
<
ty≥«me
 
	gAŒoˇt‹
>

218 
dñëe_£gmít
(
£gmít_ödex_t
 
s
, c⁄° 
AŒoˇt‹
& 
Æloˇt‹
) {

219 
ty≥«me
 
	ttbb
::
	töã∫Æ
::
	tÆloˇt‹_ªböd
<
	tAŒoˇt‹
, 
	tbuckë
>::
	tty≥
 
	tbuckë_Æloˇt‹_ty≥
;

220 
	gtbb
::
	töã∫Æ
::
	tÆloˇt‹_åaôs
<
	tbuckë_Æloˇt‹_ty≥
> 
	tbuckë_Æloˇt‹_åaôs
;

221 
buckë_Æloˇt‹_ty≥
 
buckë_Æloˇt‹
(
Æloˇt‹
);

222 
£gmít_±r_t
 
	gbuckës_±r
 = 
my_èbÀ
[
s
];

223 
size_ty≥
 
	gsz
 = 
£gmít_size
–
s
 ? s : 1 );

225 if–
	gs
 >
fú°_block
)

226 
buckë_Æloˇt‹_åaôs
::
dóŒoˇã
(
buckë_Æloˇt‹
, 
buckës_±r
, 
sz
);

227 if–
	gs
 =
embedded_block
 &&Émbedded_block !
fú°_block
 )

228 
buckë_Æloˇt‹_åaôs
::
dóŒoˇã
(
buckë_Æloˇt‹
, 
buckës_±r
,

229 
£gmít_size
(
fú°_block
Ë- 
embedded_buckës
);

230 if–
	gs
 >
embedded_block
 ) 
my_èbÀ
[
s
] = 0;

234 
buckë
 *
gë_buckë
–
hashcode_t
 
h
 ) c⁄° 
throw
() {

235 
£gmít_ödex_t
 
	gs
 = 
£gmít_ödex_of
–
h
 );

236 
	gh
 -
£gmít_ba£
(
s
);

237 
£gmít_±r_t
 
	g£g
 = 
my_èbÀ
[
s
];

238 
__TBB_ASSERT
–
is_vÆid
(
£g
), "hashcode must be cut by valid mask forállocated segments" );

239  &
	g£g
[
h
];

243 
m¨k_ªhashed_Àvñs
–
hashcode_t
 
h
 ) 
throw
 () {

244 
£gmít_ödex_t
 
	gs
 = 
£gmít_ödex_of
–
h
 );

245  
£gmít_±r_t
 
	g£g
 = 
my_èbÀ
[++
s
] )

246 if–
£g
[
h
].
node_li°
 =
ªhash_ªq
 ) {

247 
£g
[
h
].
node_li°
 = 
em±y_ªhashed
;

248 
m¨k_ªhashed_Àvñs
–
h
 + ((
hashcode_t
)1<<
s
) );

254 
ölöe
 
boﬁ
 
check_mask_ø˚
–c⁄° 
hashcode_t
 
h
, hashcode_à&
m
 ) const {

255 
hashcode_t
 
	gm_now
, 
	gm_ﬁd
 = 
m
;

256 
	gm_now
 = (
hashcode_t
Ë
ôt_lﬂd_w‹d_wôh_acquúe
–
my_mask
 );

257 if–
	gm_ﬁd
 !
m_now
 )

258  
check_ªhashög_cﬁlisi⁄
–
h
, 
m_ﬁd
, 
m
 = 
m_now
 );

259  
	gÁl£
;

263 
boﬁ
 
check_ªhashög_cﬁlisi⁄
–c⁄° 
hashcode_t
 
h
, hashcode_à
m_ﬁd
, hashcode_à
m
 ) const {

264 
__TBB_ASSERT
(
m_ﬁd
 !
m
, 
NULL
);

265 if–(
	gh
 & 
	gm_ﬁd
Ë!(
h
 & 
m
) ) {

268  ++
m_ﬁd
; !(
	gh
 & 
	gm_ﬁd
); m_old <<= 1 )

270 
	gm_ﬁd
 = (
m_ﬁd
<<1) - 1;

271 
__TBB_ASSERT
((
m_ﬁd
&(m_ﬁd+1))==0 && m_ﬁd <
m
, 
NULL
);

273 if–
ôt_lﬂd_w‹d_wôh_acquúe
(
gë_buckë
(
h
 & 
m_ﬁd
)->
node_li°
Ë!
ªhash_ªq
 )

275 #i‡
__TBB_STATISTICS


276 
my_öfo_ª°¨ts
++;

278  
	gåue
;

281  
	gÁl£
;

285 
£gmít_ödex_t
 
ö£π_√w_node
–
buckë
 *
b
, 
node_ba£
 *
n
, 
hashcode_t
 
mask
 ) {

286 
size_ty≥
 
	gsz
 = ++
my_size
;

287 
add_to_buckë
–
b
, 
n
 );

289 if–
	gsz
 >
mask
 ) {

290 
£gmít_ödex_t
 
√w_£g
 = 
__TBB_Log2
–
mask
+1 );

291 
__TBB_ASSERT
–
is_vÆid
(
my_èbÀ
[
√w_£g
-1]), "newállocations mustÇotÖublishÇew mask until segment hasállocated");

292 c⁄° 
£gmít_±r_t
 
	gis_Æloˇtög
 = (segment_ptr_t)2;

293 if–!
ôt_hide_lﬂd_w‹d
(
my_èbÀ
[
√w_£g
])

294 && 
as_©omic
(
my_èbÀ
[
√w_£g
]).
com∑ª_™d_sw≠
(
is_Æloˇtög
, 
NULL
) == NULL )

295  
√w_£g
;

301 
	gãm∂©e
<
ty≥«me
 
	gAŒoˇt‹
>

302 
ª£rve
(
size_ty≥
 
buckës
, c⁄° 
AŒoˇt‹
& 
Æloˇt‹
) {

303 if–!
	gbuckës
-- ) ;

304 
boﬁ
 
	gis_öôül
 = !
my_size
;

305  
size_ty≥
 
	gm
 = 
my_mask
; 
	gbuckës
 > m; m = my_mask )

306 
íabÀ_£gmít
–
£gmít_ödex_of
–
m
+1 ), 
Æloˇt‹
, 
is_öôül
 );

309 
öã∫Æ_sw≠
(
hash_m≠_ba£
 &
èbÀ
) {

310 
usög
 
	g°d
::
sw≠
;

311 
sw≠
(
this
->
my_mask
, 
èbÀ
.my_mask);

312 
sw≠
(
this
->
my_size
, 
èbÀ
.my_size);

313 
size_ty≥
 
	gi
 = 0; i < 
	gembedded_buckës
; i++)

314 
sw≠
(
this
->
my_embedded_£gmít
[
i
].
node_li°
, 
èbÀ
.my_embedded_segment[i].node_list);

315 
size_ty≥
 
	gi
 = 
embedded_block
; i < 
	gpoöãrs_≥r_èbÀ
; i++)

316 
sw≠
(
this
->
my_èbÀ
[
i
], 
èbÀ
.my_table[i]);

319 #i‡
__TBB_CPP11_RVALUE_REF_PRESENT


320 
öã∫Æ_move
(
hash_m≠_ba£
&& 
Ÿhî
) {

321 
	gmy_mask
 = 
Ÿhî
.
my_mask
;

322 
	gŸhî
.
	gmy_mask
 = 
embedded_buckës
 - 1;

323 
	gmy_size
 = 
Ÿhî
.
my_size
;

324 
	gŸhî
.
	gmy_size
 = 0;

326 
size_ty≥
 
	gi
 = 0; i < 
	gembedded_buckës
; ++i) {

327 
	gmy_embedded_£gmít
[
i
].
	gnode_li°
 = 
Ÿhî
.
my_embedded_£gmít
[i].
node_li°
;

328 
	gŸhî
.
	gmy_embedded_£gmít
[
i
].
	gnode_li°
 = 
NULL
;

331 
size_ty≥
 
	gi
 = 
embedded_block
; i < 
	gpoöãrs_≥r_èbÀ
; ++i) {

332 
	gmy_èbÀ
[
i
] = 
Ÿhî
.
my_èbÀ
[i];

333 
	gŸhî
.
	gmy_èbÀ
[
i
] = 
NULL
;

339 
	gãm∂©e
<
ty≥«me
 
	gIãøt‹
>

340 
˛ass
 
	ghash_m≠_ønge
;

345 
	gãm∂©e
<
ty≥«me
 
	gC⁄èöî
,Åy≥«mê
	gVÆue
>

346 
˛ass
 
	ghash_m≠_ôî©‹


347 : 
public
 
°d
::
ôî©‹
<°d::
f‹w¨d_ôî©‹_èg
,
	gVÆue
>

349 
C⁄èöî
 
	tm≠_ty≥
;

350 
ty≥«me
 
	tC⁄èöî
::
	tnode
Çode;

351 
	ghash_m≠_ba£
::
	tnode_ba£
Çode_base;

352 
	ghash_m≠_ba£
::
	tbuckë
 bucket;

354 
	gãm∂©e
<
ty≥«me
 
	gC
,Åy≥«mê
	gT
,Åy≥«mê
	gU
>

355 
‰õnd
 
boﬁ
 
	g›î©‹
==–c⁄° 
hash_m≠_ôî©‹
<
C
,
	gT
>& 
	gi
, c⁄° 
	ghash_m≠_ôî©‹
<
	gC
,
	gU
>& 
	gj
 );

357 
	gãm∂©e
<
ty≥«me
 
	gC
,Åy≥«mê
	gT
,Åy≥«mê
	gU
>

358 
‰õnd
 
boﬁ
 
	g›î©‹
!=–c⁄° 
hash_m≠_ôî©‹
<
C
,
	gT
>& 
	gi
, c⁄° 
	ghash_m≠_ôî©‹
<
	gC
,
	gU
>& 
	gj
 );

360 
	gãm∂©e
<
ty≥«me
 
	gC
,Åy≥«mê
	gT
,Åy≥«mê
	gU
>

361 
‰õnd
 
±rdiff_t
 
	g›î©‹
-–c⁄° 
	ghash_m≠_ôî©‹
<
	gC
,
	gT
>& 
	gi
, c⁄° hash_m≠_ôî©‹<C,
	gU
>& 
	gj
 );

363 
	gãm∂©e
<
ty≥«me
 
	gC
,Åy≥«mê
	gU
>

364 
‰õnd
 
˛ass
 
	ghash_m≠_ôî©‹
;

366 
	gãm∂©e
<
ty≥«me
 
	gI
>

367 
‰õnd
 
˛ass
 
	ghash_m≠_ønge
;

369 
adv™˚_to_√xt_buckë
() {

370 
size_t
 
	gk
 = 
my_ödex
+1;

371 
__TBB_ASSERT
–
my_buckë
, "advancingán invalid iterator?");

372  
	gk
 <
my_m≠
->
my_mask
 ) {

374 if–
k
&(k-2) )

375 ++
my_buckë
;

376 
	gmy_buckë
 = 
my_m≠
->
gë_buckë
–
k
 );

377 
	gmy_node
 = 
°©ic_ˇ°
<
node
*>–
my_buckë
->
node_li°
 );

378 if–
	ghash_m≠_ba£
::
is_vÆid
(
my_node
) ) {

379 
my_ödex
 = 
k
; ;

381 ++
	gk
;

383 
	gmy_buckë
 = 0; 
	gmy_node
 = 0; 
	gmy_ödex
 = 
k
;

385 #i‡!
deföed
(
_MSC_VER
Ë|| deföed(
__INTEL_COMPILER
)

386 
	gãm∂©e
<
ty≥«me
 
	gKey
,Åy≥«mê
	gT
,Åy≥«mê
	gHashCom∑ª
,Åy≥«mê
	gA
>

387 
‰õnd
 
˛ass
 
	göãrÁ˚5
::
c⁄cuºít_hash_m≠
;

389 
	gpublic
:

392 c⁄° 
C⁄èöî
 *
my_m≠
;

395 
size_t
 
	gmy_ödex
;

398 c⁄° 
buckë
 *
	gmy_buckë
;

401 
node
 *
	gmy_node
;

403 
hash_m≠_ôî©‹
–c⁄° 
C⁄èöî
 &
m≠
, 
size_t
 
ödex
, c⁄° 
buckë
 *
b
, 
node_ba£
 *
n
 );

405 
	gpublic
:

407 
hash_m≠_ôî©‹
(): 
my_m≠
(), 
my_ödex
(), 
my_buckë
(), 
my_node
() {}

408 
hash_m≠_ôî©‹
–c⁄° hash_m≠_ôî©‹<
C⁄èöî
,
ty≥«me
 C⁄èöî::
vÆue_ty≥
> &
Ÿhî
 ) :

409 
my_m≠
(
Ÿhî
.my_map),

410 
my_ödex
(
Ÿhî
.my_index),

411 
my_buckë
(
Ÿhî
.my_bucket),

412 
my_node
(
Ÿhî
.my_node)

415 
	ghash_m≠_ôî©‹
& 
	g›î©‹
=–c⁄° 
hash_m≠_ôî©‹
<
C⁄èöî
,
ty≥«me
 
	gC⁄èöî
::
vÆue_ty≥
> &
Ÿhî
 ) {

416 
my_m≠
 = 
Ÿhî
.my_map;

417 
	gmy_ödex
 = 
Ÿhî
.
my_ödex
;

418 
	gmy_buckë
 = 
Ÿhî
.
my_buckë
;

419 
	gmy_node
 = 
Ÿhî
.
my_node
;

420  *
	gthis
;

422 
	gVÆue
& 
	g›î©‹
*() const {

423 
__TBB_ASSERT
–
hash_m≠_ba£
::
is_vÆid
(
my_node
), "iterator uninitialized orátÉnd of container?" );

424  
	gmy_node
->
vÆue
();

426 
VÆue
* 
	g›î©‹
->() const { &operator*();}

427 
	ghash_m≠_ôî©‹
& 
	g›î©‹
++();

430 
hash_m≠_ôî©‹
 
	g›î©‹
++() {

431 
hash_m≠_ôî©‹
 
ﬁd
(*
this
);

432 
	g›î©‹
++();

433  
	gﬁd
;

437 
	gãm∂©e
<
ty≥«me
 
	gC⁄èöî
,Åy≥«mê
	gVÆue
>

438 
	ghash_m≠_ôî©‹
<
	gC⁄èöî
,
	gVÆue
>::
hash_m≠_ôî©‹
–c⁄° 
C⁄èöî
 &
m≠
, 
size_t
 
ödex
, c⁄° 
buckë
 *
b
, 
node_ba£
 *
n
 ) :

439 
my_m≠
(&
m≠
),

440 
my_ödex
(
ödex
),

441 
my_buckë
(
b
),

442 
my_node
–
°©ic_ˇ°
<
node
*>(
n
) )

444 if–
	gb
 && !
	ghash_m≠_ba£
::
is_vÆid
(
n
) )

445 
adv™˚_to_√xt_buckë
();

448 
	gãm∂©e
<
ty≥«me
 
	gC⁄èöî
,Åy≥«mê
	gVÆue
>

449 
	ghash_m≠_ôî©‹
<
	gC⁄èöî
,
	gVÆue
>& hash_m≠_ôî©‹<C⁄èöî,VÆue>::
›î©‹
++() {

450 
my_node
 = 
°©ic_ˇ°
<
node
*>–my_node->
√xt
 );

451 if–!
	gmy_node
 ) 
adv™˚_to_√xt_buckë
();

452  *
	gthis
;

455 
	gãm∂©e
<
ty≥«me
 
	gC⁄èöî
,Åy≥«mê
	gT
,Åy≥«mê
	gU
>

456 
boﬁ
 
	g›î©‹
==–c⁄° 
hash_m≠_ôî©‹
<
C⁄èöî
,
	gT
>& 
	gi
, c⁄° 
	ghash_m≠_ôî©‹
<
	gC⁄èöî
,
	gU
>& 
	gj
 ) {

457  
	gi
.
	gmy_node
 =
j
.
my_node
 && 
i
.
my_m≠
 == j.my_map;

460 
	gãm∂©e
<
ty≥«me
 
	gC⁄èöî
,Åy≥«mê
	gT
,Åy≥«mê
	gU
>

461 
boﬁ
 
	g›î©‹
!=–c⁄° 
hash_m≠_ôî©‹
<
C⁄èöî
,
	gT
>& 
	gi
, c⁄° 
	ghash_m≠_ôî©‹
<
	gC⁄èöî
,
	gU
>& 
	gj
 ) {

462  
	gi
.
	gmy_node
 !
j
.
my_node
 || 
i
.
my_m≠
 != j.my_map;

467 
	gãm∂©e
<
ty≥«me
 
	gIãøt‹
>

468 ˛as†
	chash_m≠_ønge
 {

469 
ty≥«me
 
	tIãøt‹
::
	tm≠_ty≥
 map_type;

470 
Iãøt‹
 
	gmy_begö
;

471 
Iãøt‹
 
	gmy_íd
;

472 
muèbÀ
 
Iãøt‹
 
	gmy_midpoöt
;

473 
size_t
 
	gmy_gøösize
;

475 
£t_midpoöt
() const;

476 
	gãm∂©e
<
ty≥«me
 
	gU
> 
‰õnd
 
˛ass
 
	ghash_m≠_ønge
;

477 
	gpublic
:

479 
°d
::
	tsize_t
 
	tsize_ty≥
;

480 
ty≥«me
 
	tIãøt‹
::
	tvÆue_ty≥
 value_type;

481 
ty≥«me
 
	tIãøt‹
::
	tª„ªn˚
Ñeference;

482 
ty≥«me
 
	tIãøt‹
::
	tdif„ªn˚_ty≥
 difference_type;

483 
Iãøt‹
 
	tôî©‹
;

486 
boﬁ
 
em±y
(Ëc⁄° { 
	gmy_begö
==
my_íd
;}

489 
boﬁ
 
is_divisibÀ
() const {

490  
	gmy_midpoöt
!=
my_íd
;

493 
hash_m≠_ønge
–hash_m≠_ønge& 
r
, 
•lô
 ) :

494 
my_íd
(
r
.my_end),

495 
my_gøösize
(
r
.my_grainsize)

497 
	gr
.
	gmy_íd
 = 
my_begö
 = 
r
.
my_midpoöt
;

498 
__TBB_ASSERT
–!
em±y
(), "Splitting despiteÅheÑange isÇot divisible" );

499 
__TBB_ASSERT
–!
r
.
em±y
(), "Splitting despiteÅheÑange isÇot divisible" );

500 
£t_midpoöt
();

501 
	gr
.
£t_midpoöt
();

504 
	gãm∂©e
<
ty≥«me
 
	gU
>

505 
hash_m≠_ønge
–hash_m≠_ønge<
U
>& 
r
) :

506 
my_begö
(
r
.my_begin),

507 
my_íd
(
r
.my_end),

508 
my_midpoöt
(
r
.my_midpoint),

509 
my_gøösize
(
r
.my_grainsize)

512 
hash_m≠_ønge
–c⁄° 
m≠_ty≥
 &
m≠
, 
size_ty≥
 
gøösize_
 = 1 ) :

513 
my_begö
–
Iãøt‹
–
m≠
, 0, m≠.
my_embedded_£gmít
, m≠.my_embedded_£gmít->
node_li°
 ) ),

514 
my_íd
–
Iãøt‹
–
m≠
, m≠.
my_mask
 + 1, 0, 0 ) ),

515 
my_gøösize
–
gøösize_
 )

517 
__TBB_ASSERT
–
gøösize_
>0, "grainsize must beÖositive" );

518 
£t_midpoöt
();

520 c⁄° 
	gIãøt‹
& 
begö
(Ëc⁄° { 
	gmy_begö
;}

521 c⁄° 
	gIãøt‹
& 
íd
(Ëc⁄° { 
	gmy_íd
;}

523 
size_ty≥
 
gøösize
(Ëc⁄° { 
	gmy_gøösize
;}

526 
	gãm∂©e
<
ty≥«me
 
	gIãøt‹
>

527 
	ghash_m≠_ønge
<
	gIãøt‹
>::
£t_midpoöt
() const {

529 
size_t
 
m
 = 
my_íd
.
my_ödex
-
my_begö
.my_index;

530 if–
	gm
 > 
	gmy_gøösize
 ) {

531 
	gm
 = 
my_begö
.
my_ödex
 + 
m
/2u;

532 
	ghash_m≠_ba£
::
buckë
 *
b
 = 
my_begö
.
my_m≠
->
gë_buckë
(
m
);

533 
	gmy_midpoöt
 = 
Iãøt‹
(*
my_begö
.
my_m≠
,
m
,
b
,b->
node_li°
);

535 
	gmy_midpoöt
 = 
my_íd
;

537 
__TBB_ASSERT
–
my_begö
.
my_ödex
 <
my_midpoöt
.my_index,

539 
__TBB_ASSERT
–
my_midpoöt
.
my_ödex
 <
my_íd
.my_index,

541 
__TBB_ASSERT
–
my_begö
 !
my_midpoöt
 || my_begö =
my_íd
,

548 #i‡
_MSC_VER
 && !
deföed
(
__INTEL_COMPILER
)

550 #¥agm®
w¨nög
–
push
 )

551 #¥agm®
w¨nög
–
dißbÀ
: 4127 )

584 
	gãm∂©e
<
ty≥«me
 
	gKey
,Åy≥«mê
	gT
,Åy≥«mê
	gHashCom∑ª
,Åy≥«mê
	gAŒoˇt‹
>

585 ˛as†
	cc⁄cuºít_hash_m≠
 : 
¥Ÿe˘ed
 
öã∫Æ
::
hash_m≠_ba£
 {

586 
ãm∂©e
<
ty≥«me
 
C⁄èöî
,Åy≥«mê
	gVÆue
>

587 
‰õnd
 
˛ass
 
	göã∫Æ
::
hash_m≠_ôî©‹
;

589 
	gãm∂©e
<
ty≥«me
 
	gI
>

590 
‰õnd
 
˛ass
 
	göã∫Æ
::
hash_m≠_ønge
;

592 
	gpublic
:

593 
Key
 
	tkey_ty≥
;

594 
T
 
	tm≠≥d_ty≥
;

595 
	g°d
::
	t∑ú
<c⁄° 
	tKey
,
	tT
> 
	tvÆue_ty≥
;

596 
	ghash_m≠_ba£
::
	tsize_ty≥
 size_type;

597 
±rdiff_t
 
	tdif„ªn˚_ty≥
;

598 
vÆue_ty≥
 *
	tpoöãr
;

599 c⁄° 
	tvÆue_ty≥
 *
	tc⁄°_poöãr
;

600 
	gvÆue_ty≥
 &
	tª„ªn˚
;

601 c⁄° 
	tvÆue_ty≥
 &
	tc⁄°_ª„ªn˚
;

602 
	göã∫Æ
::
	thash_m≠_ôî©‹
<
	tc⁄cuºít_hash_m≠
,
	tvÆue_ty≥
> 
	tôî©‹
;

603 
	göã∫Æ
::
	thash_m≠_ôî©‹
<
	tc⁄cuºít_hash_m≠
,c⁄° 
	tvÆue_ty≥
> 
	tc⁄°_ôî©‹
;

604 
	göã∫Æ
::
	thash_m≠_ønge
<
	tôî©‹
> 
	tønge_ty≥
;

605 
	göã∫Æ
::
	thash_m≠_ønge
<
	tc⁄°_ôî©‹
> 
	tc⁄°_ønge_ty≥
;

606 
AŒoˇt‹
 
	tÆloˇt‹_ty≥
;

608 
	g¥Ÿe˘ed
:

609 
‰õnd
 
˛ass
 
c⁄°_ac˚ss‹
;

610 
˛ass
 
	gnode
;

611 
ty≥«me
 
	ttbb
::
	töã∫Æ
::
	tÆloˇt‹_ªböd
<
	tAŒoˇt‹
, 
	tnode
>::
	tty≥
 
	tnode_Æloˇt‹_ty≥
;

612 
	gtbb
::
	töã∫Æ
::
	tÆloˇt‹_åaôs
<
	tnode_Æloˇt‹_ty≥
> 
	tnode_Æloˇt‹_åaôs
;

613 
node_Æloˇt‹_ty≥
 
	gmy_Æloˇt‹
;

614 
HashCom∑ª
 
	gmy_hash_com∑ª
;

616 ˛as†
	cnode
 : 
public
 
node_ba£
 {

617 
tbb
::
Æig√d_•a˚
<
vÆue_ty≥
> 
my_vÆue
;

618 
	gpublic
:

619 
vÆue_ty≥
* 
°‹age
(Ë{  
my_vÆue
.
begö
(); }

620 
	gvÆue_ty≥
& 
vÆue
(Ë{  *
°‹age
(); }

623 
dñëe_node
–
node_ba£
 *
n
 ) {

624 
	gnode_Æloˇt‹_åaôs
::
de°roy
(
my_Æloˇt‹
, 
°©ic_ˇ°
<
node
*>(
n
)->
°‹age
());

625 
	gnode_Æloˇt‹_åaôs
::
de°roy
(
my_Æloˇt‹
, 
°©ic_ˇ°
<
node
*>(
n
));

626 
	gnode_Æloˇt‹_åaôs
::
dóŒoˇã
(
my_Æloˇt‹
, 
°©ic_ˇ°
<
node
*>(
n
), 1);

629 
	gnode_sc›ed_gu¨d
 : 
tbb
::
öã∫Æ
::
no_c›y
 {

630 
node
* 
my_node
;

631 
	gnode_Æloˇt‹_ty≥
& 
	gmy_Æloc
;

633 
node_sc›ed_gu¨d
(
node
* 
n
, 
node_Æloˇt‹_ty≥
& 
Æloc
Ë: 
my_node
“), 
my_Æloc
(alloc) {}

634 ~
node_sc›ed_gu¨d
() {

635 if(
	gmy_node
) {

636 
	gnode_Æloˇt‹_åaôs
::
de°roy
(
my_Æloc
, 
my_node
);

637 
	gnode_Æloˇt‹_åaôs
::
dóŒoˇã
(
my_Æloc
, 
my_node
, 1);

640 
dismiss
(Ë{ 
	gmy_node
 = 
NULL
; }

643 #i‡
__TBB_CPP11_RVALUE_REF_PRESENT
 && 
__TBB_CPP11_VARIADIC_TEMPLATES_PRESENT


644 
	gãm∂©e
<
	gty≥«me
... 
	gArgs
>

645 
node
* 
¸óã_node
(
node_Æloˇt‹_ty≥
& 
Æloˇt‹
, 
Args
&&... 
¨gs
)

647 
	gãm∂©e
<
ty≥«me
 
	gArg1
,Åy≥«mê
	gArg2
>

648 
node
* 
¸óã_node
(
node_Æloˇt‹_ty≥
& 
Æloˇt‹
, 
__TBB_FORWARDING_REF
(
Arg1
Ë
¨g1
, __TBB_FORWARDING_REF(
Arg2
Ë
¨g2
)

651 
node
* 
	gnode_±r
 = 
node_Æloˇt‹_åaôs
::
Æloˇã
(
Æloˇt‹
, 1);

652 
node_sc›ed_gu¨d
 
gu¨d
(
node_±r
, 
Æloˇt‹
);

653 
	gnode_Æloˇt‹_åaôs
::
c⁄°ru˘
(
Æloˇt‹
, 
node_±r
);

654 #i‡
__TBB_CPP11_RVALUE_REF_PRESENT
 && 
__TBB_CPP11_VARIADIC_TEMPLATES_PRESENT


655 
	gnode_Æloˇt‹_åaôs
::
c⁄°ru˘
(
Æloˇt‹
, 
node_±r
->
°‹age
(), 
°d
::
f‹w¨d
<
Args
>(
¨gs
)...);

657 
	gnode_Æloˇt‹_åaôs
::
c⁄°ru˘
(
Æloˇt‹
, 
node_±r
->
°‹age
(), 
tbb
::
öã∫Æ
::
f‹w¨d
<
Arg1
>(
¨g1
),Åbb::öã∫Æ::f‹w¨d<
Arg2
>(
¨g2
));

659 
	ggu¨d
.
dismiss
();

660  
	gnode_±r
;

663 
node
* 
Æloˇã_node_c›y_c⁄°ru˘
(
node_Æloˇt‹_ty≥
& 
Æloˇt‹
, c⁄° 
Key
 &
key
, c⁄° 
T
 * 
t
){

664  
¸óã_node
(
Æloˇt‹
, 
key
, *
t
);

667 #i‡
__TBB_CPP11_RVALUE_REF_PRESENT


668 
node
* 
Æloˇã_node_move_c⁄°ru˘
(
node_Æloˇt‹_ty≥
& 
Æloˇt‹
, c⁄° 
Key
 &
key
, c⁄° 
T
 * 
t
){

669  
¸óã_node
(
Æloˇt‹
, 
key
, 
°d
::
move
(*
c⁄°_ˇ°
<
T
*>(
t
)));

673 
node
* 
Æloˇã_node_deÁu…_c⁄°ru˘
(
node_Æloˇt‹_ty≥
& 
Æloˇt‹
, c⁄° 
Key
 &
key
, c⁄° 
T
 * ){

674 #i‡
__TBB_CPP11_RVALUE_REF_PRESENT
 && 
__TBB_CPP11_VARIADIC_TEMPLATES_PRESENT
 && 
__TBB_CPP11_TUPLE_PRESENT


676  
¸óã_node
(
Æloˇt‹
, 
°d
::
põ˚wi£_c⁄°ru˘
,

677 
°d
::
f‹w¨d_as_tu∂e
(
key
), std::forward_as_tuple());

681 
T
 
	gobj
 = T();

682  
¸óã_node
(
Æloˇt‹
, 
key
, 
tbb
::
öã∫Æ
::
move
(
obj
));

686 
node
* 
do_nŸ_Æloˇã_node
(
node_Æloˇt‹_ty≥
& , c⁄° 
Key
 &, c⁄° 
T
 * ){

687 
__TBB_ASSERT
(
Ál£
,"this dummy function shouldÇot be called");

688  
	gNULL
;

691 
node
 *
£¨ch_buckë
–c⁄° 
key_ty≥
 &
key
, 
buckë
 *
b
 ) const {

692 
node
 *
	gn
 = 
°©ic_ˇ°
<node*>–
b
->
node_li°
 );

693  
is_vÆid
(
n
Ë&& !
	gmy_hash_com∑ª
.
equÆ
(
key
,Ç->
vÆue
().
fú°
) )

694 
	gn
 = 
°©ic_ˇ°
<
node
*>–
n
->
√xt
 );

695 
__TBB_ASSERT
(
n
 !
öã∫Æ
::
ªhash_ªq
, "Search can beÉxecuted only forÑehashed bucket");

696  
	gn
;

700 ˛as†
	cbuckë_ac˚ss‹
 : 
public
 
buckë
::
sc›ed_t
 {

701 
buckë
 *
my_b
;

702 
	gpublic
:

703 
buckë_ac˚ss‹
–
c⁄cuºít_hash_m≠
 *
ba£
, c⁄° 
hashcode_t
 
h
, 
boﬁ
 
wrôî
 = 
Ál£
 ) { 
acquúe
( base, h, writer ); }

705 
ölöe
 
acquúe
–
c⁄cuºít_hash_m≠
 *
ba£
, c⁄° 
hashcode_t
 
h
, 
boﬁ
 
wrôî
 = 
Ál£
 ) {

706 
my_b
 = 
ba£
->
gë_buckë
–
h
 );

708 if–
ôt_lﬂd_w‹d_wôh_acquúe
(
my_b
->
node_li°
Ë=
öã∫Æ
::
ªhash_ªq


709 && 
åy_acquúe
–
my_b
->
muãx
, 
åue
 ) )

711 if–
	gmy_b
->
	gnode_li°
 =
öã∫Æ
::
ªhash_ªq
 ) 
ba£
->
ªhash_buckë
–
my_b
, 
h
 );

713 
	gbuckë
::
sc›ed_t
::
acquúe
–
my_b
->
muãx
, 
wrôî
 );

714 
__TBB_ASSERT
–
my_b
->
node_li°
 !
öã∫Æ
::
ªhash_ªq
, 
NULL
);

717 
boﬁ
 
is_wrôî
(Ë{  
	gbuckë
::
sc›ed_t
::is_writer; }

719 
buckë
 *
›î©‹
(Ë(Ë{  
	gmy_b
; }

723 
ªhash_buckë
–
buckë
 *
b_√w
, c⁄° 
hashcode_t
 
h
 ) {

724 
__TBB_ASSERT
–*(
öçå_t
*)(&
b_√w
->
muãx
), "b_new must beÜocked (for write)");

725 
__TBB_ASSERT
–
h
 > 1, "TheÜowermost buckets can't beÑehashed" );

726 
__TBB_°‹e_wôh_ªÀa£
(
b_√w
->
node_li°
, 
öã∫Æ
::
em±y_ªhashed
);

727 
hashcode_t
 
	gmask
 = ( 1u<<
__TBB_Log2
–
h
 ) ) - 1;

728 #i‡
__TBB_STATISTICS


729 
	gmy_öfo_ªhashes
++;

732 
buckë_ac˚ss‹
 
b_ﬁd
–
this
, 
h
 & 
mask
 );

734 
	gmask
 = (
mask
<<1) | 1;

735 
__TBB_ASSERT
–(
mask
&(mask+1))==0 && (
h
 & maskË=h, 
NULL
 );

736 
	gª°¨t
:

737  
node_ba£
 **
p
 = &
b_ﬁd
()->
node_li°
, *
	gn
 = 
__TBB_lﬂd_wôh_acquúe
(*p); 
is_vÆid
(
n
);Ç = *p ) {

738 
hashcode_t
 
c
 = 
my_hash_com∑ª
.
hash
–
°©ic_ˇ°
<
node
*>(
n
)->
vÆue
().
fú°
 );

739 #i‡
TBB_USE_ASSERT


740 
hashcode_t
 
	gbmask
 = 
h
 & (
mask
>>1);

741 
	gbmask
 = 
bmask
==0? 1 : ( 1u<<(
__TBB_Log2
( bmask )+1 ) ) - 1;

742 
__TBB_ASSERT
–(
c
 & 
bmask
Ë=(
h
 & bmask), "hash() function changed for key inÅable" );

744 if–(
	gc
 & 
	gmask
Ë=
h
 ) {

745 if–!
b_ﬁd
.
is_wrôî
() )

746 if–!
b_ﬁd
.
upgøde_to_wrôî
() ) {

747 
ª°¨t
;

749 *
	gp
 = 
n
->
√xt
;

750 
add_to_buckë
–
b_√w
, 
n
 );

751 } 
	gp
 = &
n
->
√xt
;

755 
	sˇŒ_˛ór_⁄_Àave
 {

756 
c⁄cuºít_hash_m≠
* 
	gmy_ch_m≠
;

757 
ˇŒ_˛ór_⁄_Àave
–
c⁄cuºít_hash_m≠
* 
a_ch_m≠
 ) : 
my_ch_m≠
(a_ch_map) {}

758 
dismiss
(Ë{
my_ch_m≠
 = 0;}

759 ~
ˇŒ_˛ór_⁄_Àave
(){

760 i‡(
	gmy_ch_m≠
){

761 
	gmy_ch_m≠
->
˛ór
();

765 
	gpublic
:

767 
˛ass
 
ac˚ss‹
;

769 ˛as†
	cc⁄°_ac˚ss‹
 : 
¥iv©e
 
node
::
sc›ed_t
 {

770 
‰õnd
 
˛ass
 
c⁄cuºít_hash_m≠
<
Key
,
	gT
,
	gHashCom∑ª
,
	gAŒoˇt‹
>;

771 
‰õnd
 
˛ass
 
	gac˚ss‹
;

772 
	gpublic
:

774 c⁄° 
	tty≥«me
 
	tc⁄cuºít_hash_m≠
::
	tvÆue_ty≥
 value_type;

777 
boﬁ
 
em±y
(Ëc⁄° {  !
	gmy_node
; }

780 
ªÀa£
() {

781 if–
	gmy_node
 ) {

782 
	gnode
::
sc›ed_t
::
ªÀa£
();

783 
	gmy_node
 = 0;

788 
c⁄°_ª„ªn˚
 
	g›î©‹
*() const {

789 
__TBB_ASSERT
–
my_node
, "attemptÅo dereferenceÉmptyáccessor" );

790  
	gmy_node
->
vÆue
();

794 
c⁄°_poöãr
 
	g›î©‹
->() const {

795  &
	g›î©‹
*();

799 
c⁄°_ac˚ss‹
(Ë: 
my_node
(
NULL
) {}

802 ~
c⁄°_ac˚ss‹
() {

803 
my_node
 = 
NULL
;

805 
	g¥Ÿe˘ed
:

806 
boﬁ
 
is_wrôî
(Ë{  
node
::
sc›ed_t
::is_writer; }

807 
node
 *
	gmy_node
;

808 
hashcode_t
 
	gmy_hash
;

812 ˛as†
	cac˚ss‹
: 
public
 
c⁄°_ac˚ss‹
 {

813 
public
:

815 
ty≥«me
 
	tc⁄cuºít_hash_m≠
::
	tvÆue_ty≥
 value_type;

818 
ª„ªn˚
 
	g›î©‹
*() const {

819 
__TBB_ASSERT
–
this
->
my_node
, "attemptÅo dereferenceÉmptyáccessor" );

820  
	gthis
->
	gmy_node
->
vÆue
();

824 
poöãr
 
	g›î©‹
->() const {

825  &
	g›î©‹
*();

830 
ex∂icô
 
c⁄cuºít_hash_m≠
–c⁄° 
Æloˇt‹_ty≥
 &
a
 =állocator_type() )

831 : 
öã∫Æ
::
hash_m≠_ba£
(), 
my_Æloˇt‹
(
a
)

834 
ex∂icô
 
c⁄cuºít_hash_m≠
–c⁄° 
HashCom∑ª
& 
com∑ª
, c⁄° 
Æloˇt‹_ty≥
& 
a
 =állocator_type() )

835 : 
öã∫Æ
::
hash_m≠_ba£
(), 
my_Æloˇt‹
(
a
), 
my_hash_com∑ª
(
com∑ª
)

839 
c⁄cuºít_hash_m≠
–
size_ty≥
 
n
, c⁄° 
Æloˇt‹_ty≥
 &
a
 =állocator_type() )

840 : 
öã∫Æ
::
hash_m≠_ba£
(), 
my_Æloˇt‹
(
a
)

842 
ª£rve
–
n
, 
my_Æloˇt‹
 );

845 
c⁄cuºít_hash_m≠
–
size_ty≥
 
n
, c⁄° 
HashCom∑ª
& 
com∑ª
, c⁄° 
Æloˇt‹_ty≥
& 
a
 =állocator_type() )

846 : 
öã∫Æ
::
hash_m≠_ba£
(), 
my_Æloˇt‹
(
a
), 
my_hash_com∑ª
(
com∑ª
)

848 
ª£rve
–
n
, 
my_Æloˇt‹
 );

852 
c⁄cuºít_hash_m≠
–c⁄° c⁄cuºít_hash_m≠ &
èbÀ
 )

853 : 
öã∫Æ
::
hash_m≠_ba£
(),

854 
my_Æloˇt‹
(
node_Æloˇt‹_åaôs
::
£À˘_⁄_c⁄èöî_c›y_c⁄°ru˘i⁄
(
èbÀ
.
gë_Æloˇt‹
()))

856 
ˇŒ_˛ór_⁄_Àave
 
sc›e_gu¨d
(
this
);

857 
öã∫Æ_c›y
(
èbÀ
);

858 
	gsc›e_gu¨d
.
dismiss
();

861 
c⁄cuºít_hash_m≠
–c⁄° c⁄cuºít_hash_m≠ &
èbÀ
, c⁄° 
Æloˇt‹_ty≥
 &
a
)

862 : 
öã∫Æ
::
hash_m≠_ba£
(), 
my_Æloˇt‹
(
a
)

864 
ˇŒ_˛ór_⁄_Àave
 
sc›e_gu¨d
(
this
);

865 
öã∫Æ_c›y
(
èbÀ
);

866 
	gsc›e_gu¨d
.
dismiss
();

869 #i‡
__TBB_CPP11_RVALUE_REF_PRESENT


871 
c⁄cuºít_hash_m≠
–c⁄cuºít_hash_m≠ &&
èbÀ
 )

872 : 
öã∫Æ
::
hash_m≠_ba£
(), 
my_Æloˇt‹
(
°d
::
move
(
èbÀ
.
gë_Æloˇt‹
()))

874 
öã∫Æ_move
(
°d
::
move
(
èbÀ
));

878 
c⁄cuºít_hash_m≠
–c⁄cuºít_hash_m≠ &&
èbÀ
, c⁄° 
Æloˇt‹_ty≥
 &
a
 )

879 : 
öã∫Æ
::
hash_m≠_ba£
(), 
my_Æloˇt‹
(
a
)

881 i‡(
	ga
 =
èbÀ
.
gë_Æloˇt‹
()){

882 
öã∫Æ_move
(
°d
::
move
(
èbÀ
));

884 
ˇŒ_˛ór_⁄_Àave
 
sc›e_gu¨d
(
this
);

885 
öã∫Æ_c›y
(
°d
::
make_move_ôî©‹
(
èbÀ
.
begö
()), std::make_move_ôî©‹—abÀ.
íd
()),ÅabÀ.
size
());

886 
	gsc›e_gu¨d
.
dismiss
();

892 
	gãm∂©e
<
ty≥«me
 
	gI
>

893 
c⁄cuºít_hash_m≠
–
I
 
fú°
, I 
œ°
, c⁄° 
Æloˇt‹_ty≥
 &
a
 =állocator_type() )

894 : 
öã∫Æ
::
hash_m≠_ba£
(), 
my_Æloˇt‹
(
a
)

896 
ˇŒ_˛ór_⁄_Àave
 
sc›e_gu¨d
(
this
);

897 
öã∫Æ_c›y
(
fú°
, 
œ°
, 
°d
::
di°™˚
(first,Üast));

898 
	gsc›e_gu¨d
.
dismiss
();

901 
	gãm∂©e
<
ty≥«me
 
	gI
>

902 
c⁄cuºít_hash_m≠
–
I
 
fú°
, I 
œ°
, c⁄° 
HashCom∑ª
& 
com∑ª
, c⁄° 
Æloˇt‹_ty≥
& 
a
 =állocator_type() )

903 : 
öã∫Æ
::
hash_m≠_ba£
(), 
my_Æloˇt‹
(
a
), 
my_hash_com∑ª
(
com∑ª
)

905 
ˇŒ_˛ór_⁄_Àave
 
sc›e_gu¨d
(
this
);

906 
öã∫Æ_c›y
(
fú°
, 
œ°
, 
°d
::
di°™˚
(first,Üast));

907 
	gsc›e_gu¨d
.
dismiss
();

910 #i‡
__TBB_INITIALIZER_LISTS_PRESENT


912 
c⁄cuºít_hash_m≠
–
°d
::
öôülizî_li°
<
vÆue_ty≥
> 
û
, c⁄° 
Æloˇt‹_ty≥
 &
a
 =állocator_type() )

913 : 
öã∫Æ
::
hash_m≠_ba£
(), 
my_Æloˇt‹
(
a
)

915 
ˇŒ_˛ór_⁄_Àave
 
sc›e_gu¨d
(
this
);

916 
öã∫Æ_c›y
(
û
.
begö
(), il.
íd
(), il.
size
());

917 
	gsc›e_gu¨d
.
dismiss
();

920 
c⁄cuºít_hash_m≠
–
°d
::
öôülizî_li°
<
vÆue_ty≥
> 
û
, c⁄° 
HashCom∑ª
& 
com∑ª
, c⁄° 
Æloˇt‹_ty≥
& 
a
 =állocator_type() )

921 : 
öã∫Æ
::
hash_m≠_ba£
(), 
my_Æloˇt‹
(
a
), 
my_hash_com∑ª
(
com∑ª
)

923 
ˇŒ_˛ór_⁄_Àave
 
sc›e_gu¨d
(
this
);

924 
öã∫Æ_c›y
(
û
.
begö
(), il.
íd
(), il.
size
());

925 
	gsc›e_gu¨d
.
dismiss
();

931 
	gc⁄cuºít_hash_m≠
& 
	g›î©‹
=–c⁄° 
c⁄cuºít_hash_m≠
 &
èbÀ
 ) {

932 if–
this
!=&
èbÀ
 ) {

933 
ty≥«me
 
	tnode_Æloˇt‹_åaôs
::
	t¥›ag©e_⁄_c⁄èöî_c›y_assignmít
 
	tpocˇ_ty≥
;

934 
˛ór
();

935 
	gtbb
::
öã∫Æ
::
Æloˇt‹_c›y_assignmít
(
my_Æloˇt‹
, 
èbÀ
.my_Æloˇt‹, 
pocˇ_ty≥
());

936 
öã∫Æ_c›y
(
èbÀ
);

938  *
	gthis
;

941 #i‡
__TBB_CPP11_RVALUE_REF_PRESENT


943 
	gc⁄cuºít_hash_m≠
& 
	g›î©‹
=–
c⁄cuºít_hash_m≠
 &&
èbÀ
 ) {

944 if(
this
 !&
èbÀ
) {

945 
ty≥«me
 
	tnode_Æloˇt‹_åaôs
::
	t¥›ag©e_⁄_c⁄èöî_move_assignmít
 
	tpocma_ty≥
;

946 
öã∫Æ_move_assign
(
°d
::
move
(
èbÀ
), 
pocma_ty≥
());

948  *
	gthis
;

952 #i‡
__TBB_INITIALIZER_LISTS_PRESENT


954 
	gc⁄cuºít_hash_m≠
& 
	g›î©‹
=–
°d
::
öôülizî_li°
<
vÆue_ty≥
> 
û
 ) {

955 
˛ór
();

956 
öã∫Æ_c›y
(
û
.
begö
(), il.
íd
(), il.
size
());

957  *
	gthis
;

965 
ªhash
(
size_ty≥
 
n
 = 0);

968 
˛ór
();

971 ~
c⁄cuºít_hash_m≠
(Ë{ 
˛ór
(); }

976 
ønge_ty≥
 
ønge
–
size_ty≥
 
gøösize
=1 ) {

977  
ønge_ty≥
–*
this
, 
gøösize
 );

979 
c⁄°_ønge_ty≥
 
ønge
–
size_ty≥
 
gøösize
=1 ) const {

980  
c⁄°_ønge_ty≥
–*
this
, 
gøösize
 );

986 
ôî©‹
 
begö
(Ë{  iãøt‹–*
this
, 0, 
my_embedded_£gmít
, my_embedded_£gmít->
node_li°
 ); }

987 
ôî©‹
 
íd
(Ë{  iãøt‹–*
this
, 0, 0, 0 ); }

988 
c⁄°_ôî©‹
 
begö
(Ëc⁄° {  c⁄°_ôî©‹–*
this
, 0, 
my_embedded_£gmít
, my_embedded_£gmít->
node_li°
 ); }

989 
c⁄°_ôî©‹
 
íd
(Ëc⁄° {  c⁄°_ôî©‹–*
this
, 0, 0, 0 ); }

990 
	g°d
::
∑ú
<
ôî©‹
, 
	gôî©‹
> 
equÆ_ønge
–c⁄° 
Key
& 
key
 ) {  
öã∫Æ_equÆ_ønge
–key, 
íd
() ); }

991 
	g°d
::
∑ú
<
c⁄°_ôî©‹
, 
	gc⁄°_ôî©‹
> 
equÆ_ønge
–c⁄° 
Key
& 
key
 ) c⁄° {  
öã∫Æ_equÆ_ønge
–key, 
íd
() ); }

994 
size_ty≥
 
size
(Ëc⁄° {  
	gmy_size
; }

997 
boﬁ
 
em±y
(Ëc⁄° {  
	gmy_size
 == 0; }

1000 
size_ty≥
 
max_size
(Ëc⁄° { (~size_ty≥(0))/(
	gnode
);}

1003 
size_ty≥
 
buckë_cou¡
(Ëc⁄° {  
	gmy_mask
+1; }

1006 
Æloˇt‹_ty≥
 
gë_Æloˇt‹
(Ëc⁄° {  
	gthis
->
	gmy_Æloˇt‹
; }

1009 
sw≠
–
c⁄cuºít_hash_m≠
 &
èbÀ
 );

1016 
size_ty≥
 
cou¡
–c⁄° 
Key
 &
key
 ) const {

1017  
	gc⁄°_ˇ°
<
	gc⁄cuºít_hash_m≠
*>(
	gthis
)->
lookup
–
Ál£
, 
key
, 
NULL
, NULL, fÆ£, &
do_nŸ_Æloˇã_node
 );

1022 
boﬁ
 
föd
–
c⁄°_ac˚ss‹
 &
ªsu…
, c⁄° 
Key
 &
key
 ) const {

1023 
	gªsu…
.
ªÀa£
();

1024  
	gc⁄°_ˇ°
<
	gc⁄cuºít_hash_m≠
*>(
	gthis
)->
lookup
–
Ál£
, 
key
, 
NULL
, &
ªsu…
, fÆ£, &
do_nŸ_Æloˇã_node
 );

1029 
boﬁ
 
föd
–
ac˚ss‹
 &
ªsu…
, c⁄° 
Key
 &
key
 ) {

1030 
	gªsu…
.
ªÀa£
();

1031  
lookup
–
Ál£
, 
key
, 
NULL
, &
ªsu…
, 
åue
, &
do_nŸ_Æloˇã_node
 );

1036 
boﬁ
 
ö£π
–
c⁄°_ac˚ss‹
 &
ªsu…
, c⁄° 
Key
 &
key
 ) {

1037 
	gªsu…
.
ªÀa£
();

1038  
lookup
–
åue
, 
key
, 
NULL
, &
ªsu…
, 
Ál£
, &
Æloˇã_node_deÁu…_c⁄°ru˘
 );

1043 
boﬁ
 
ö£π
–
ac˚ss‹
 &
ªsu…
, c⁄° 
Key
 &
key
 ) {

1044 
	gªsu…
.
ªÀa£
();

1045  
lookup
–
åue
, 
key
, 
NULL
, &
ªsu…
,Årue, &
Æloˇã_node_deÁu…_c⁄°ru˘
 );

1050 
boﬁ
 
ö£π
–
c⁄°_ac˚ss‹
 &
ªsu…
, c⁄° 
vÆue_ty≥
 &
vÆue
 ) {

1051 
	gªsu…
.
ªÀa£
();

1052  
lookup
–
åue
, 
vÆue
.
fú°
, &vÆue.
£c⁄d
, &
ªsu…
, 
Ál£
, &
Æloˇã_node_c›y_c⁄°ru˘
 );

1057 
boﬁ
 
ö£π
–
ac˚ss‹
 &
ªsu…
, c⁄° 
vÆue_ty≥
 &
vÆue
 ) {

1058 
	gªsu…
.
ªÀa£
();

1059  
lookup
–
åue
, 
vÆue
.
fú°
, &vÆue.
£c⁄d
, &
ªsu…
,Årue, &
Æloˇã_node_c›y_c⁄°ru˘
 );

1064 
boﬁ
 
ö£π
–c⁄° 
vÆue_ty≥
 &
vÆue
 ) {

1065  
lookup
–
åue
, 
vÆue
.
fú°
, &vÆue.
£c⁄d
, 
NULL
, 
Ál£
, &
Æloˇã_node_c›y_c⁄°ru˘
 );

1068 #i‡
__TBB_CPP11_RVALUE_REF_PRESENT


1071 
boﬁ
 
ö£π
–
c⁄°_ac˚ss‹
 &
ªsu…
, 
vÆue_ty≥
 && 
vÆue
 ) {

1072  
gíîic_move_ö£π
(
ªsu…
, 
°d
::
move
(
vÆue
));

1077 
boﬁ
 
ö£π
–
ac˚ss‹
 &
ªsu…
, 
vÆue_ty≥
 && 
vÆue
 ) {

1078  
gíîic_move_ö£π
(
ªsu…
, 
°d
::
move
(
vÆue
));

1083 
boﬁ
 
ö£π
–
vÆue_ty≥
 && 
vÆue
 ) {

1084  
gíîic_move_ö£π
(
ac˚ss‹_nŸ_u£d
(), 
°d
::
move
(
vÆue
));

1087 #i‡
__TBB_CPP11_VARIADIC_TEMPLATES_PRESENT


1090 
	gãm∂©e
<
	gty≥«me
... 
	gArgs
>

1091 
boﬁ
 
em∂a˚
–
c⁄°_ac˚ss‹
 &
ªsu…
, 
Args
&&... 
¨gs
 ) {

1092  
gíîic_em∂a˚
(
ªsu…
, 
°d
::
f‹w¨d
<
Args
>(
¨gs
)...);

1097 
	gãm∂©e
<
	gty≥«me
... 
	gArgs
>

1098 
boﬁ
 
em∂a˚
–
ac˚ss‹
 &
ªsu…
, 
Args
&&... 
¨gs
 ) {

1099  
gíîic_em∂a˚
(
ªsu…
, 
°d
::
f‹w¨d
<
Args
>(
¨gs
)...);

1104 
	gãm∂©e
<
	gty≥«me
... 
	gArgs
>

1105 
boﬁ
 
em∂a˚
–
Args
&&... 
¨gs
 ) {

1106  
gíîic_em∂a˚
(
ac˚ss‹_nŸ_u£d
(), 
°d
::
f‹w¨d
<
Args
>(
¨gs
)...);

1112 
	gãm∂©e
<
ty≥«me
 
	gI
>

1113 
ö£π
–
I
 
fú°
, I 
œ°
 ) {

1114  ; 
	gfú°
 !
œ°
; ++first )

1115 
ö£π
–*
fú°
 );

1118 #i‡
__TBB_INITIALIZER_LISTS_PRESENT


1120 
ö£π
–
°d
::
öôülizî_li°
<
vÆue_ty≥
> 
û
 ) {

1121 
ö£π
–
û
.
begö
(), il.
íd
() );

1127 
boﬁ
 
îa£
–c⁄° 
Key
& 
key
 );

1131 
boﬁ
 
îa£
–
c⁄°_ac˚ss‹
& 
ôem_ac˚ss‹
 ) {

1132  
ex˛ude
–
ôem_ac˚ss‹
 );

1137 
boﬁ
 
îa£
–
ac˚ss‹
& 
ôem_ac˚ss‹
 ) {

1138  
ex˛ude
–
ôem_ac˚ss‹
 );

1141 
	g¥Ÿe˘ed
:

1143 
boﬁ
 
lookup
(boﬁ 
›_ö£π
, c⁄° 
Key
 &
key
, c⁄° 
T
 *
t
, 
c⁄°_ac˚ss‹
 *
ªsu…
, boﬁ 
wrôe
, 
node
* (*
Æloˇã_node
)(
node_Æloˇt‹_ty≥
& , c⁄° Key &, c⁄° T * ),Çodê*
tmp_n
 = 0 ) ;

1145 
	sac˚ss‹_nŸ_u£d
 { 
ªÀa£
(){}};

1146 
‰õnd
 
c⁄°_ac˚ss‹
* 
ac˚ss‹_loˇti⁄
–
ac˚ss‹_nŸ_u£d
 c⁄°& ){  
	gNULL
;}

1147 
‰õnd
 
c⁄°_ac˚ss‹
* 
ac˚ss‹_loˇti⁄
–c⁄°_ac˚ss‹ & 
a
 ) {  &
	ga
;}

1149 
‰õnd
 
boﬁ
 
is_wrôe_ac˚ss_√eded
–
ac˚ss‹
 c⁄°& ) {  
	gåue
;}

1150 
‰õnd
 
boﬁ
 
is_wrôe_ac˚ss_√eded
–
c⁄°_ac˚ss‹
 c⁄°& ) {  
	gÁl£
;}

1151 
‰õnd
 
boﬁ
 
is_wrôe_ac˚ss_√eded
–
ac˚ss‹_nŸ_u£d
 c⁄°& ) {  
	gÁl£
;}

1153 #i‡
__TBB_CPP11_RVALUE_REF_PRESENT


1154 
	gãm∂©e
<
ty≥«me
 
	gAc˚ss‹
>

1155 
boﬁ
 
gíîic_move_ö£π
–
Ac˚ss‹
 && 
ªsu…
, 
vÆue_ty≥
 && 
vÆue
 ) {

1156 
	gªsu…
.
ªÀa£
();

1157  
lookup
–
åue
, 
vÆue
.
fú°
, &vÆue.
£c⁄d
, 
ac˚ss‹_loˇti⁄
(
ªsu…
), 
is_wrôe_ac˚ss_√eded
‘esu…), &
Æloˇã_node_move_c⁄°ru˘
 );

1160 #i‡
__TBB_CPP11_VARIADIC_TEMPLATES_PRESENT


1161 
	gãm∂©e
<
ty≥«me
 
	gAc˚ss‹
, 
	gty≥«me
... 
	gArgs
>

1162 
boﬁ
 
gíîic_em∂a˚
–
Ac˚ss‹
 && 
ªsu…
, 
Args
 &&... 
¨gs
 ) {

1163 
	gªsu…
.
ªÀa£
();

1164 
node
 * 
	gnode_±r
 = 
¸óã_node
(
my_Æloˇt‹
, 
°d
::
f‹w¨d
<
Args
>(
¨gs
)...);

1165  
lookup
–
åue
, 
node_±r
->
vÆue
().
fú°
, 
NULL
, 
ac˚ss‹_loˇti⁄
(
ªsu…
), 
is_wrôe_ac˚ss_√eded
‘esu…), &
do_nŸ_Æloˇã_node
,Çode_ptr );

1171 
boﬁ
 
ex˛ude
–
c⁄°_ac˚ss‹
 &
ôem_ac˚ss‹
 );

1174 
	gãm∂©e
<
ty≥«me
 
	gI
>

1175 
	g°d
::
∑ú
<
I
, 
	gI
> 
öã∫Æ_equÆ_ønge
–c⁄° 
Key
& 
key
, I 
íd
 ) const;

1178 
öã∫Æ_c›y
–c⁄° 
c⁄cuºít_hash_m≠
& 
sour˚
 );

1180 
	gãm∂©e
<
ty≥«me
 
	gI
>

1181 
öã∫Æ_c›y
–
I
 
fú°
, I 
œ°
, 
size_ty≥
 
ª£rve_size
 );

1183 #i‡
__TBB_CPP11_RVALUE_REF_PRESENT


1185 
öã∫Æ_move_assign
(
c⁄cuºít_hash_m≠
&& 
Ÿhî
, 
tbb
::
öã∫Æ
::
åaôs_åue_ty≥
) {

1186 
tbb
::
öã∫Æ
::
Æloˇt‹_move_assignmít
(
my_Æloˇt‹
, 
Ÿhî
.my_Æloˇt‹,Åbb::öã∫Æ::
åaôs_åue_ty≥
());

1187 
öã∫Æ_move
(
°d
::
move
(
Ÿhî
));

1190 
öã∫Æ_move_assign
(
c⁄cuºít_hash_m≠
&& 
Ÿhî
, 
tbb
::
öã∫Æ
::
åaôs_Ál£_ty≥
) {

1191 i‡(
this
->
my_Æloˇt‹
 =
Ÿhî
.my_allocator) {

1192 
öã∫Æ_move
(
°d
::
move
(
Ÿhî
));

1195 
öã∫Æ_c›y
(
°d
::
make_move_ôî©‹
(
Ÿhî
.
begö
()), std::make_move_ôî©‹(Ÿhî.
íd
()), othî.
size
());

1203 
c⁄°_poöãr
 
öã∫Æ_Á°_föd
–c⁄° 
Key
& 
key
 ) const {

1204 
hashcode_t
 
	gh
 = 
my_hash_com∑ª
.
hash
–
key
 );

1205 
hashcode_t
 
	gm
 = (hashcode_tË
ôt_lﬂd_w‹d_wôh_acquúe
–
my_mask
 );

1206 
node
 *
	gn
;

1207 
	gª°¨t
:

1208 
__TBB_ASSERT
((
m
&(m+1))==0, "data structure is invalid");

1209 
buckë
 *
	gb
 = 
gë_buckë
–
h
 & 
m
 );

1211 if–
ôt_lﬂd_w‹d_wôh_acquúe
(
b
->
node_li°
Ë=
öã∫Æ
::
ªhash_ªq
 )

1213 
buckë
::
sc›ed_t
 
lock
;

1214 if–
	glock
.
åy_acquúe
–
b
->
muãx
, 
åue
 ) ) {

1215 if–
	gb
->
	gnode_li°
 =
öã∫Æ
::
ªhash_ªq
)

1216 
c⁄°_ˇ°
<
c⁄cuºít_hash_m≠
*>(
this
)->
ªhash_buckë
–
b
, 
h
 & 
m
 );

1218 
	glock
.
acquúe
–
b
->
muãx
, 
Ál£
 );

1219 
__TBB_ASSERT
(
b
->
node_li°
!=
öã∫Æ
::
ªhash_ªq
,
NULL
);

1221 
	gn
 = 
£¨ch_buckë
–
key
, 
b
 );

1222 if–
	gn
 )

1223  
	gn
->
°‹age
();

1224 if–
check_mask_ø˚
–
h
, 
m
 ) )

1225 
	gª°¨t
;

1230 #i‡
__TBB_CPP17_DEDUCTION_GUIDES_PRESENT


1231 
«me•a˚
 
	göã∫Æ
 {

1232 
usög
 
«me•a˚
 
	gtbb
::
öã∫Æ
;

1234 
	gãm∂©e
<ãm∂©e<
	gty≥«me
...> 
ty≥«me
 
	gM≠
,Åy≥«mê
	gKey
,Åy≥«mê
	gT
,Åy≥«me... 
	gArgs
>

1235 
usög
 
	ghash_m≠_t
 = 
M≠
<

1236 
Key
, 
	gT
,

1237 
	g°d
::
c⁄dôi⁄Æ_t
< (...(
Args
)>0Ë&& !
is_Æloˇt‹_v
< 
∑ck_ñemít_t
<0, 
	gArgs
...> >,

1238 
	g∑ck_ñemít_t
<0, 
	gArgs
...>, 
	gtbb_hash_com∑ª
<
	gKey
> >,

1239 
	g°d
::
c⁄dôi⁄Æ_t
< (...(
Args
)>0Ë&& 
is_Æloˇt‹_v
< 
∑ck_ñemít_t
<...(Args)-1, 
	gArgs
...> >,

1240 
	g∑ck_ñemít_t
<...(
	gArgs
)-1, Args...>, 
	gtbb_Æloˇt‹
<
	g°d
::
∑ú
<c⁄° 
Key
, 
	gT
> > >

1245 
	gãm∂©e
<
ty≥«me
 
	gI
, 
	gty≥«me
... 
	gArgs
>

1246 
c⁄cuºít_hash_m≠
(
I
, I, 
Args
...)

1247 -> 
	göã∫Æ
::
hash_m≠_t
<
c⁄cuºít_hash_m≠
, i¡î«l::
ôî©‹_key_t
<
I
>,öã∫Æ::
ôî©‹_m≠≥d_t
<I>, 
	gArgs
...>;

1251 
	gãm∂©e
<
ty≥«me
 
	gKey
,Åy≥«mê
	gT
,Åy≥«mê
	gCom∑ªOrAŒoˇt‹
>

1252 
c⁄cuºít_hash_m≠
(
°d
::
öôülizî_li°
<°d::
∑ú
<c⁄° 
Key
, 
T
>>, 
Com∑ªOrAŒoˇt‹
)

1253 -> 
	göã∫Æ
::
hash_m≠_t
<
c⁄cuºít_hash_m≠
, 
	gKey
, 
	gT
, 
	gCom∑ªOrAŒoˇt‹
>;

1257 
	gãm∂©e
<
ty≥«me
 
	gKey
,Åy≥«mê
	gT
,Åy≥«mê
	gHashCom∑ª
,Åy≥«mê
	gA
>

1258 
boﬁ
 
	gc⁄cuºít_hash_m≠
<
	gKey
,
	gT
,
	gHashCom∑ª
,
	gA
>::
lookup
–boﬁ 
›_ö£π
, c⁄° 
Key
 &
key
, c⁄° 
T
 *
t
, 
c⁄°_ac˚ss‹
 *
ªsu…
, boﬁ 
wrôe
, 
node
* (*
Æloˇã_node
)(
node_Æloˇt‹_ty≥
& , c⁄° Key&, c⁄° T*),Çodê*
tmp_n
 ) {

1259 
__TBB_ASSERT
–!
ªsu…
 || !ªsu…->
my_node
, 
NULL
 );

1260 
boﬁ
 
	gªtu∫_vÆue
;

1261 
hashcode_t
 c⁄° 
	gh
 = 
my_hash_com∑ª
.
hash
–
key
 );

1262 
hashcode_t
 
	gm
 = (hashcode_tË
ôt_lﬂd_w‹d_wôh_acquúe
–
my_mask
 );

1263 
£gmít_ödex_t
 
	ggrow_£gmít
 = 0;

1264 
node
 *
	gn
;

1265 
	gª°¨t
:

1267 
__TBB_ASSERT
((
m
&(m+1))==0, "data structure is invalid");

1268 
	gªtu∫_vÆue
 = 
Ál£
;

1270 
buckë_ac˚ss‹
 
b
–
this
, 
h
 & 
m
 );

1273 
	gn
 = 
£¨ch_buckë
–
key
, 
b
() );

1274 if–
	g›_ö£π
 ) {

1276 if–!
	gn
 ) {

1277 if–!
	gtmp_n
 ) {

1278 
	gtmp_n
 = 
Æloˇã_node
(
my_Æloˇt‹
, 
key
, 
t
);

1280 if–!
	gb
.
is_wrôî
(Ë&& !b.
upgøde_to_wrôî
() ) {

1282 
	gn
 = 
£¨ch_buckë
–
key
, 
b
() );

1283 if–
is_vÆid
(
n
) ) {

1284 
	gb
.
downgøde_to_ªadî
();

1285 
	gexi°s
;

1288 if–
check_mask_ø˚
(
h
, 
m
) )

1289 
	gª°¨t
;

1291 
	ggrow_£gmít
 = 
ö£π_√w_node
–
b
(), 
n
 = 
tmp_n
, 
m
 );

1292 
	gtmp_n
 = 0;

1293 
	gªtu∫_vÆue
 = 
åue
;

1296 if–!
	gn
 ) {

1297 if–
check_mask_ø˚
–
h
, 
m
 ) )

1298 
	gª°¨t
;

1299  
	gÁl£
;

1301 
	gªtu∫_vÆue
 = 
åue
;

1303 
	gexi°s
:

1304 if–!
ªsu…
 ) 
check_growth
;

1307 if–!
	gªsu…
->
åy_acquúe
–
n
->
muãx
, 
wrôe
 ) ) {

1308  
	gtbb
::
öã∫Æ
::
©omic_backoff
 
backoff
(
åue
);; ) {

1309 if–
	gªsu…
->
åy_acquúe
–
n
->
muãx
, 
wrôe
 ) ) ;

1310 if–!
	gbackoff
.
bounded_∑u£
() ) {

1312 
	gb
.
ªÀa£
();

1313 
__TBB_ASSERT
–!
›_ö£π
 || !
ªtu∫_vÆue
, "Can'tácquireÇew item inÜocked bucket?" );

1314 
__TBB_Yõld
();

1315 
	gm
 = (
hashcode_t
Ë
ôt_lﬂd_w‹d_wôh_acquúe
–
my_mask
 );

1316 
	gª°¨t
;

1321 
	gªsu…
->
	gmy_node
 = 
n
;

1322 
	gªsu…
->
	gmy_hash
 = 
h
;

1323 
	gcheck_growth
:

1325 if–
grow_£gmít
 ) {

1326 #i‡
__TBB_STATISTICS


1327 
my_öfo_ªsizes
++;

1329 
íabÀ_£gmít
–
grow_£gmít
, 
my_Æloˇt‹
 );

1331 if–
	gtmp_n
 )

1332 
dñëe_node
–
tmp_n
 );

1333  
	gªtu∫_vÆue
;

1336 
	gãm∂©e
<
ty≥«me
 
	gKey
,Åy≥«mê
	gT
,Åy≥«mê
	gHashCom∑ª
,Åy≥«mê
	gA
>

1337 
	gãm∂©e
<
ty≥«me
 
	gI
>

1338 
	g°d
::
∑ú
<
I
, 
	gI
> 
	gc⁄cuºít_hash_m≠
<
	gKey
,
	gT
,
	gHashCom∑ª
,
	gA
>::
öã∫Æ_equÆ_ønge
–c⁄° 
Key
& 
key
, I 
íd_
 ) const {

1339 
hashcode_t
 
	gh
 = 
my_hash_com∑ª
.
hash
–
key
 );

1340 
hashcode_t
 
	gm
 = 
my_mask
;

1341 
__TBB_ASSERT
((
m
&(m+1))==0, "data structure is invalid");

1342 
	gh
 &
m
;

1343 
buckë
 *
	gb
 = 
gë_buckë
–
h
 );

1344  
	gb
->
	gnode_li°
 =
öã∫Æ
::
ªhash_ªq
 ) {

1345 
m
 = ( 1u<<
__TBB_Log2
–
h
 ) ) - 1;

1346 
	gb
 = 
gë_buckë
–
h
 &
m
 );

1348 
node
 *
	gn
 = 
£¨ch_buckë
–
key
, 
b
 );

1349 if–!
	gn
 )

1350  
	g°d
::
make_∑ú
(
íd_
,Énd_);

1351 
ôî©‹
 
lowî
(*
this
, 
h
, 
b
, 
n
), 
uµî
(lower);

1352  
	g°d
::
make_∑ú
(
lowî
, ++
uµî
);

1355 
	gãm∂©e
<
ty≥«me
 
	gKey
,Åy≥«mê
	gT
,Åy≥«mê
	gHashCom∑ª
,Åy≥«mê
	gA
>

1356 
boﬁ
 
	gc⁄cuºít_hash_m≠
<
	gKey
,
	gT
,
	gHashCom∑ª
,
	gA
>::
ex˛ude
–
c⁄°_ac˚ss‹
 &
ôem_ac˚ss‹
 ) {

1357 
__TBB_ASSERT
–
ôem_ac˚ss‹
.
my_node
, 
NULL
 );

1358 
node_ba£
 *c⁄° 
	gn
 = 
ôem_ac˚ss‹
.
my_node
;

1359 
hashcode_t
 c⁄° 
	gh
 = 
ôem_ac˚ss‹
.
my_hash
;

1360 
hashcode_t
 
	gm
 = (hashcode_tË
ôt_lﬂd_w‹d_wôh_acquúe
–
my_mask
 );

1363 
buckë_ac˚ss‹
 
b
–
this
, 
h
 & 
m
, 
åue
 );

1364 
node_ba£
 **
	gp
 = &
b
()->
node_li°
;

1365  *
	gp
 && *∞!
n
 )

1366 
p
 = &(*p)->
√xt
;

1367 if–!*
	gp
 ) {

1368 if–
check_mask_ø˚
–
h
, 
m
 ) )

1370 
	gôem_ac˚ss‹
.
ªÀa£
();

1371  
	gÁl£
;

1373 
__TBB_ASSERT
–*
p
 =
n
, 
NULL
 );

1374 *
	gp
 = 
n
->
√xt
;

1375 
	gmy_size
--;

1377 } 
	gåue
);

1378 if–!
	gôem_ac˚ss‹
.
is_wrôî
() )

1379 
	gôem_ac˚ss‹
.
upgøde_to_wrôî
();

1380 
	gôem_ac˚ss‹
.
ªÀa£
();

1381 
dñëe_node
–
n
 );

1382  
	gåue
;

1385 
	gãm∂©e
<
ty≥«me
 
	gKey
,Åy≥«mê
	gT
,Åy≥«mê
	gHashCom∑ª
,Åy≥«mê
	gA
>

1386 
boﬁ
 
	gc⁄cuºít_hash_m≠
<
	gKey
,
	gT
,
	gHashCom∑ª
,
	gA
>::
îa£
–c⁄° 
Key
 &
key
 ) {

1387 
node_ba£
 *
n
;

1388 
hashcode_t
 c⁄° 
	gh
 = 
my_hash_com∑ª
.
hash
–
key
 );

1389 
hashcode_t
 
	gm
 = (hashcode_tË
ôt_lﬂd_w‹d_wôh_acquúe
–
my_mask
 );

1390 
	gª°¨t
:

1393 
buckë_ac˚ss‹
 
b
–
this
, 
h
 & 
m
 );

1394 
	g£¨ch
:

1395 
node_ba£
 **
p
 = &
b
()->
node_li°
;

1396 
	gn
 = *
p
;

1397  
is_vÆid
(
n
Ë&& !
	gmy_hash_com∑ª
.
equÆ
(
key
, 
°©ic_ˇ°
<
node
*>“)->
vÆue
().
fú°
 ) ) {

1398 
	gp
 = &
n
->
√xt
;

1399 
	gn
 = *
p
;

1401 if–!
	gn
 ) {

1402 if–
check_mask_ø˚
–
h
, 
m
 ) )

1403 
	gª°¨t
;

1404  
	gÁl£
;

1406 if–!
	gb
.
is_wrôî
(Ë&& !b.
upgøde_to_wrôî
() ) {

1407 if–
check_mask_ø˚
–
h
, 
m
 ) )

1408 
	gª°¨t
;

1409 
	g£¨ch
;

1411 *
	gp
 = 
n
->
√xt
;

1412 
	gmy_size
--;

1415 
ty≥«me
 
	gnode
::
sc›ed_t
 
ôem_lockî
–
n
->
muãx
, 
åue
 );

1418 
dñëe_node
–
n
 );

1419  
	gåue
;

1422 
	gãm∂©e
<
ty≥«me
 
	gKey
,Åy≥«mê
	gT
,Åy≥«mê
	gHashCom∑ª
,Åy≥«mê
	gA
>

1423 
	gc⁄cuºít_hash_m≠
<
	gKey
,
	gT
,
	gHashCom∑ª
,
	gA
>::
sw≠
(
c⁄cuºít_hash_m≠
<
Key
,
T
,
HashCom∑ª
,
A
> &
èbÀ
) {

1424 
ty≥«me
 
	tnode_Æloˇt‹_åaôs
::
	t¥›ag©e_⁄_c⁄èöî_sw≠
 
	tpocs_ty≥
;

1425 i‡(
	gthis
 !&
èbÀ
 && (
pocs_ty≥
::
vÆue
 || 
my_Æloˇt‹
 ==Åable.my_allocator)) {

1426 
usög
 
°d
::
sw≠
;

1427 
	gtbb
::
öã∫Æ
::
Æloˇt‹_sw≠
(
this
->
my_Æloˇt‹
, 
èbÀ
.my_Æloˇt‹, 
pocs_ty≥
());

1428 
sw≠
(
this
->
my_hash_com∑ª
, 
èbÀ
.my_hash_compare);

1429 
öã∫Æ_sw≠
(
èbÀ
);

1433 
	gãm∂©e
<
ty≥«me
 
	gKey
,Åy≥«mê
	gT
,Åy≥«mê
	gHashCom∑ª
,Åy≥«mê
	gA
>

1434 
	gc⁄cuºít_hash_m≠
<
	gKey
,
	gT
,
	gHashCom∑ª
,
	gA
>::
ªhash
(
size_ty≥
 
sz
) {

1435 
ª£rve
–
sz
, 
my_Æloˇt‹
 );

1436 
hashcode_t
 
	gmask
 = 
my_mask
;

1437 
hashcode_t
 
	gb
 = (
mask
+1)>>1;

1438 
__TBB_ASSERT
((
b
&(b-1))==0, 
NULL
);

1439 
buckë
 *
	gbp
 = 
gë_buckë
–
b
 );

1440 ; 
	gb
 <
mask
; b++, 
	gbp
++ ) {

1441 
node_ba£
 *
	gn
 = 
bp
->
node_li°
;

1442 
__TBB_ASSERT
–
is_vÆid
(
n
Ë||Ç =
öã∫Æ
::
em±y_ªhashed
 ||Ç =öã∫Æ::
ªhash_ªq
, "Broken internal structure" );

1443 
__TBB_ASSERT
–*
ªöãΩªt_ˇ°
<
öçå_t
*>(&
bp
->
muãx
) == 0, "concurrent or unexpectedlyÅerminated operation duringÑehash()Éxecution" );

1444 if–
	gn
 =
öã∫Æ
::
ªhash_ªq
 ) {

1445 
hashcode_t
 
h
 = 
b
; 
buckë
 *
	gb_ﬁd
 = 
bp
;

1447 
__TBB_ASSERT
–
h
 > 1, "TheÜowermost buckets can't beÑehashed" );

1448 
hashcode_t
 
	gm
 = ( 1u<<
__TBB_Log2
–
h
 ) ) - 1;

1449 
	gb_ﬁd
 = 
gë_buckë
–
h
 &
m
 );

1450 }  
	gb_ﬁd
->
	gnode_li°
 =
öã∫Æ
::
ªhash_ªq
 );

1452 
m¨k_ªhashed_Àvñs
–
h
 );

1453  
node_ba£
 **
	gp
 = &
b_ﬁd
->
node_li°
, *
	gq
 = *
p
; 
is_vÆid
(
q
); q = *p ) {

1454 
hashcode_t
 
c
 = 
my_hash_com∑ª
.
hash
–
°©ic_ˇ°
<
node
*>(
q
)->
vÆue
().
fú°
 );

1455 if–(
	gc
 & 
	gmask
Ë!
h
 ) {

1456 *
p
 = 
q
->
√xt
;

1457 
buckë
 *
	gb_√w
 = 
gë_buckë
–
c
 & 
mask
 );

1458 
__TBB_ASSERT
–
b_√w
->
node_li°
 !
öã∫Æ
::
ªhash_ªq
, "hash() function changed for key inÅable or internalÉrror" );

1459 
add_to_buckë
–
b_√w
, 
q
 );

1460 } 
	gp
 = &
q
->
√xt
;

1464 #i‡
TBB_USE_PERFORMANCE_WARNINGS


1465 
	gcuºít_size
 = (
my_size
), 
	gbuckës
 = (
mask
)+1, 
	gem±y_buckës
 = 0, 
	govîp›uœãd_buckës
 = 0;

1466 
boﬁ
 
	gªp‹ãd
 = 
Ál£
;

1468 #i‡
TBB_USE_ASSERT
 || 
TBB_USE_PERFORMANCE_WARNINGS


1469  
	gb
 = 0; b <
mask
; b++ ) {

1470 if–
	gb
 & (b-2ËË++
	gbp
;

1471 
	gbp
 = 
gë_buckë
–
b
 );

1472 
node_ba£
 *
	gn
 = 
bp
->
node_li°
;

1473 
__TBB_ASSERT
–*
ªöãΩªt_ˇ°
<
öçå_t
*>(&
bp
->
muãx
) == 0, "concurrent or unexpectedlyÅerminated operation duringÑehash()Éxecution" );

1474 
__TBB_ASSERT
–
is_vÆid
(
n
Ë||Ç =
öã∫Æ
::
em±y_ªhashed
, "Broken internal structure" );

1475 #i‡
TBB_USE_PERFORMANCE_WARNINGS


1476 if–
	gn
 =
öã∫Æ
::
em±y_ªhashed
 ) 
em±y_buckës
++;

1477 if–
	gn
->
	g√xt
 ) 
	govîp›uœãd_buckës
++;

1479 #i‡
TBB_USE_ASSERT


1480  ; 
is_vÆid
(
n
); 
	gn
 =Ç->
√xt
 ) {

1481 
hashcode_t
 
h
 = 
my_hash_com∑ª
.
hash
–
°©ic_ˇ°
<
node
*>(
n
)->
vÆue
().
fú°
 ) & 
mask
;

1482 
__TBB_ASSERT
–
h
 =
b
, "hash() function changed for key inÅable or internalÉrror" );

1487 #i‡
TBB_USE_PERFORMANCE_WARNINGS


1488 if–
	gbuckës
 > 
	gcuºít_size
Ë
	gem±y_buckës
 -
buckës
 - 
cuºít_size
;

1489 
	govîp›uœãd_buckës
 -
cuºít_size
 - 
buckës
;

1490 if–!
	gªp‹ãd
 && 
	gbuckës
 >512 && ( 2*
em±y_buckës
 > 
cuºít_size
 || 2*
ovîp›uœãd_buckës
 > current_size ) ) {

1491 
tbb
::
öã∫Æ
::
ru¡ime_w¨nög
(

1493 #i‡
__TBB_USE_OPTIONAL_RTTI


1494 
ty≥id
(*
this
).
«me
(),

1498 
cuºít_size
, 
em±y_buckës
, 
ovîp›uœãd_buckës
 );

1499 
	gªp‹ãd
 = 
åue
;

1504 
	gãm∂©e
<
ty≥«me
 
	gKey
,Åy≥«mê
	gT
,Åy≥«mê
	gHashCom∑ª
,Åy≥«mê
	gA
>

1505 
	gc⁄cuºít_hash_m≠
<
	gKey
,
	gT
,
	gHashCom∑ª
,
	gA
>::
˛ór
() {

1506 
hashcode_t
 
m
 = 
my_mask
;

1507 
__TBB_ASSERT
((
m
&(m+1))==0, "data structure is invalid");

1508 #i‡
TBB_USE_ASSERT
 || 
TBB_USE_PERFORMANCE_WARNINGS
 || 
__TBB_STATISTICS


1509 #i‡
TBB_USE_PERFORMANCE_WARNINGS
 || 
__TBB_STATISTICS


1510 
	gcuºít_size
 = (
my_size
), 
	gbuckës
 = (
m
)+1, 
	gem±y_buckës
 = 0, 
	govîp›uœãd_buckës
 = 0;

1511 
boﬁ
 
	gªp‹ãd
 = 
Ál£
;

1513 
buckë
 *
	gbp
 = 0;

1515  
£gmít_ödex_t
 
	gb
 = 0; b <
m
; b++ ) {

1516 if–
	gb
 & (b-2ËË++
	gbp
;

1517 
	gbp
 = 
gë_buckë
–
b
 );

1518 
node_ba£
 *
	gn
 = 
bp
->
node_li°
;

1519 
__TBB_ASSERT
–
is_vÆid
(
n
Ë||Ç =
öã∫Æ
::
em±y_ªhashed
 ||Ç =öã∫Æ::
ªhash_ªq
, "Broken internal structure" );

1520 
__TBB_ASSERT
–*
ªöãΩªt_ˇ°
<
öçå_t
*>(&
bp
->
muãx
) == 0, "concurrent or unexpectedlyÅerminated operation during clear()Éxecution" );

1521 #i‡
TBB_USE_PERFORMANCE_WARNINGS
 || 
__TBB_STATISTICS


1522 if–
	gn
 =
öã∫Æ
::
em±y_ªhashed
 ) 
em±y_buckës
++;

1523 if–
	gn
 =
öã∫Æ
::
ªhash_ªq
 ) 
buckës
--;

1524 if–
	gn
->
	g√xt
 ) 
	govîp›uœãd_buckës
++;

1526 #i‡
__TBB_EXTRA_DEBUG


1527 ; 
is_vÆid
(
n
); 
	gn
 =Ç->
√xt
 ) {

1528 
hashcode_t
 
h
 = 
my_hash_com∑ª
.
hash
–
°©ic_ˇ°
<
node
*>(
n
)->
vÆue
().
fú°
 );

1529 
	gh
 &
m
;

1530 
__TBB_ASSERT
–
h
 =
b
 || 
gë_buckë
(h)->
node_li°
 =
öã∫Æ
::
ªhash_ªq
, "hash() function changed for key inÅable or internalÉrror" );

1534 #i‡
TBB_USE_PERFORMANCE_WARNINGS
 || 
__TBB_STATISTICS


1535 #i‡
__TBB_STATISTICS


1536 
¥ötf
( "items=%d buckets: capacity=%dÑehashed=%dÉmpty=%d overpopulated=%d"

1538 
cuºít_size
, (
m
+1), 
buckës
, 
em±y_buckës
, 
ovîp›uœãd_buckës
,

1539 (
my_öfo_ªsizes
), (
my_öfo_ªhashes
), (
my_öfo_ª°¨ts
) );

1540 
	gmy_öfo_ªsizes
 = 0;

1541 
	gmy_öfo_ª°¨ts
 = 0;

1542 
	gmy_öfo_ªhashes
 = 0;

1544 if–
	gbuckës
 > 
	gcuºít_size
Ë
	gem±y_buckës
 -
buckës
 - 
cuºít_size
;

1545 
	govîp›uœãd_buckës
 -
cuºít_size
 - 
buckës
;

1546 if–!
	gªp‹ãd
 && 
	gbuckës
 >512 && ( 2*
em±y_buckës
 > 
cuºít_size
 || 2*
ovîp›uœãd_buckës
 > current_size ) ) {

1547 
tbb
::
öã∫Æ
::
ru¡ime_w¨nög
(

1549 #i‡
__TBB_USE_OPTIONAL_RTTI


1550 
ty≥id
(*
this
).
«me
(),

1554 
cuºít_size
, 
em±y_buckës
, 
ovîp›uœãd_buckës
 );

1555 
	gªp‹ãd
 = 
åue
;

1559 
	gmy_size
 = 0;

1560 
£gmít_ödex_t
 
	gs
 = 
£gmít_ödex_of
–
m
 );

1561 
__TBB_ASSERT
–
s
+1 =
poöãrs_≥r_èbÀ
 || !
my_èbÀ
[s+1], "wrong mask or concurrent grow" );

1563 
__TBB_ASSERT
–
is_vÆid
–
my_èbÀ
[
s
] ), "wrong mask or concurrent grow" );

1564 
£gmít_±r_t
 
	gbuckës_±r
 = 
my_èbÀ
[
s
];

1565 
size_ty≥
 
	gsz
 = 
£gmít_size
–
s
 ? s : 1 );

1566  
£gmít_ödex_t
 
	gi
 = 0; i < 
	gsz
; i++ )

1567  
node_ba£
 *
	gn
 = 
buckës_±r
[
i
].
node_li°
; 
is_vÆid
(
n
);Ç = buckets_ptr[i].node_list ) {

1568 
buckës_±r
[
i
].
node_li°
 = 
n
->
√xt
;

1569 
dñëe_node
–
n
 );

1571 
dñëe_£gmít
(
s
, 
my_Æloˇt‹
);

1572 } 
	gs
-- > 0);

1573 
	gmy_mask
 = 
embedded_buckës
 - 1;

1576 
	gãm∂©e
<
ty≥«me
 
	gKey
,Åy≥«mê
	gT
,Åy≥«mê
	gHashCom∑ª
,Åy≥«mê
	gA
>

1577 
	gc⁄cuºít_hash_m≠
<
	gKey
,
	gT
,
	gHashCom∑ª
,
	gA
>::
öã∫Æ_c›y
–c⁄° 
c⁄cuºít_hash_m≠
& 
sour˚
 ) {

1578 
hashcode_t
 
mask
 = 
sour˚
.
my_mask
;

1579 if–
	gmy_mask
 =
mask
 ) {

1580 
ª£rve
–
sour˚
.
my_size
, 
my_Æloˇt‹
 );

1581 
buckë
 *
	gd°
 = 0, *
	g§c
 = 0;

1582 
boﬁ
 
	gªhash_ªquúed
 = 
Ál£
;

1583  
hashcode_t
 
	gk
 = 0; k <
mask
; k++ ) {

1584 if–
	gk
 & (k-2ËË++
	gd°
,
	g§c
++;

1585 { 
	gd°
 = 
gë_buckë
–
k
 ); 
	g§c
 = 
sour˚
.get_bucket( k ); }

1586 
__TBB_ASSERT
–
d°
->
node_li°
 !
öã∫Æ
::
ªhash_ªq
, "Invalid bucket in destinationÅable");

1587 
node
 *
	gn
 = 
°©ic_ˇ°
<node*>–
§c
->
node_li°
 );

1588 if–
	gn
 =
öã∫Æ
::
ªhash_ªq
 ) {

1589 
ªhash_ªquúed
 = 
åue
;

1590 
	gd°
->
	gnode_li°
 = 
öã∫Æ
::
ªhash_ªq
;

1591 } ; 
	gn
;Ç = 
°©ic_ˇ°
<
node
*>–
n
->
√xt
 ) ) {

1592 
node
* 
node_±r
 = 
¸óã_node
(
my_Æloˇt‹
, 
n
->
vÆue
().
fú°
,Ç->vÆue().
£c⁄d
);

1593 
add_to_buckë
–
d°
, 
node_±r
);

1594 ++
	gmy_size
;

1597 if–
	gªhash_ªquúed
 ) 
ªhash
();

1598 } 
öã∫Æ_c›y
–
sour˚
.
begö
(), sour˚.
íd
(), sour˚.
my_size
 );

1601 
	gãm∂©e
<
ty≥«me
 
	gKey
,Åy≥«mê
	gT
,Åy≥«mê
	gHashCom∑ª
,Åy≥«mê
	gA
>

1602 
	gãm∂©e
<
ty≥«me
 
	gI
>

1603 
	gc⁄cuºít_hash_m≠
<
	gKey
,
	gT
,
	gHashCom∑ª
,
	gA
>::
öã∫Æ_c›y
(
I
 
fú°
, I 
œ°
, 
size_ty≥
 
ª£rve_size
) {

1604 
ª£rve
–
ª£rve_size
, 
my_Æloˇt‹
 );

1605 
hashcode_t
 
	gm
 = 
my_mask
;

1606 ; 
	gfú°
 !
œ°
; ++first) {

1607 
hashcode_t
 
	gh
 = 
my_hash_com∑ª
.
hash
–(*
fú°
).first );

1608 
buckë
 *
	gb
 = 
gë_buckë
–
h
 & 
m
 );

1609 
__TBB_ASSERT
–
b
->
node_li°
 !
öã∫Æ
::
ªhash_ªq
, "Invalid bucket in destinationÅable");

1610 
node
* 
	gnode_±r
 = 
¸óã_node
(
my_Æloˇt‹
, (*
fú°
).fú°, (*fú°).
£c⁄d
);

1611 
add_to_buckë
–
b
, 
node_±r
 );

1612 ++
	gmy_size
;

1618 
usög
 
	göãrÁ˚5
::
c⁄cuºít_hash_m≠
;

1621 
	gãm∂©e
<
ty≥«me
 
	gKey
,Åy≥«mê
	gT
,Åy≥«mê
	gHashCom∑ª
,Åy≥«mê
	gA1
,Åy≥«mê
	gA2
>

1622 
ölöe
 
boﬁ
 
	g›î©‹
==(c⁄° 
c⁄cuºít_hash_m≠
<
Key
, 
	gT
, 
	gHashCom∑ª
, 
	gA1
> &
	ga
, c⁄° 
	gc⁄cuºít_hash_m≠
<
	gKey
, T, HashCom∑ª, 
	gA2
> &
	gb
) {

1623 if(
	ga
.
size
(Ë!
b
.size()Ë 
Ál£
;

1624 
ty≥«me
 
	gc⁄cuºít_hash_m≠
<
	gKey
, 
	gT
, 
	gHashCom∑ª
, 
	gA1
>::
c⁄°_ôî©‹
 
i
(
a
.
begö
()), 
i_íd
◊.
íd
());

1625 
ty≥«me
 
	gc⁄cuºít_hash_m≠
<
	gKey
, 
	gT
, 
	gHashCom∑ª
, 
	gA2
>::
c⁄°_ôî©‹
 
j
, 
j_íd
(
b
.
íd
());

1626 ; 
	gi
 !
i_íd
; ++i) {

1627 
	gj
 = 
b
.
equÆ_ønge
(
i
->
fú°
).first;

1628 if–
	gj
 =
j_íd
 || !(
i
->
£c⁄d
 =
j
->£c⁄dËË 
Ál£
;

1630  
	gåue
;

1633 
	gãm∂©e
<
ty≥«me
 
	gKey
,Åy≥«mê
	gT
,Åy≥«mê
	gHashCom∑ª
,Åy≥«mê
	gA1
,Åy≥«mê
	gA2
>

1634 
ölöe
 
boﬁ
 
	g›î©‹
!=(c⁄° 
c⁄cuºít_hash_m≠
<
Key
, 
	gT
, 
	gHashCom∑ª
, 
	gA1
> &
	ga
, c⁄° 
	gc⁄cuºít_hash_m≠
<
	gKey
, T, HashCom∑ª, 
	gA2
> &
	gb
)

1635 {  !(
	ga
 =
b
); }

1637 
	gãm∂©e
<
ty≥«me
 
	gKey
,Åy≥«mê
	gT
,Åy≥«mê
	gHashCom∑ª
,Åy≥«mê
	gA
>

1638 
ölöe
 
sw≠
(
c⁄cuºít_hash_m≠
<
Key
, 
T
, 
HashCom∑ª
, 
A
> &
a
, c⁄cuºít_hash_m≠<Key, T, HashCom∑ª, A> &
b
)

1639 { 
	ga
.
sw≠
–
b
 ); }

1641 #i‡
_MSC_VER
 && !
	$deföed
(
__INTEL_COMPILER
)

1642 #¥agm®
	$w¨nög
–
p›
 )

1645 
	}
}

1647 
	~"öã∫Æ/_w¨nög_suµªss_dißbÀ_nŸi˚.h
"

1648 #unde‡
__TBB_c⁄cuºít_hash_m≠_H_ö˛ude_¨ó


	@/usr/include/tbb/concurrent_queue.h

17 #i‚de‡
__TBB_c⁄cuºít_queue_H


18 
	#__TBB_c⁄cuºít_queue_H


	)

20 
	#__TBB_c⁄cuºít_queue_H_ö˛ude_¨ó


	)

21 
	~"öã∫Æ/_w¨nög_suµªss_íabÀ_nŸi˚.h
"

23 
	~"öã∫Æ/_c⁄cuºít_queue_im∂.h
"

24 
	~"öã∫Æ/_Æloˇt‹_åaôs.h
"

26 
«me•a˚
 
	gtbb
 {

28 
«me•a˚
 
	g°ri˘_µl
 {

34 
	gãm∂©e
<
ty≥«me
 
	gT
,Åy≥«mê
	gA
 = 
ˇche_Æig√d_Æloˇt‹
<
T
> >

35 
˛ass
 
c⁄cuºít_queue
: 
public
 
öã∫Æ
::
c⁄cuºít_queue_ba£_v3
<
T
> {

36 
ãm∂©e
<
ty≥«me
 
C⁄èöî
,Åy≥«mê
VÆue
> 
‰õnd
 
˛ass
 
öã∫Æ
::
c⁄cuºít_queue_ôî©‹
;

39 
ty≥«me
 
	ttbb
::
	töã∫Æ
::
	tÆloˇt‹_ªböd
<
	tA
, >::
	tty≥
 
	t∑ge_Æloˇt‹_ty≥
;

40 
∑ge_Æloˇt‹_ty≥
 
	gmy_Æloˇt‹
;

43 
vútuÆ
 *
Æloˇã_block
–
size_t
 
n
 ) 
	g__TBB_ovîride
 {

44 *
	gb
 = 
ªöãΩªt_ˇ°
<*>(
my_Æloˇt‹
.
Æloˇã
–
n
 ));

45 if–!
	gb
 )

46 
	göã∫Æ
::
throw_ex˚±i⁄
(
öã∫Æ
::
eid_bad_Æloc
);

47  
	gb
;

51 
vútuÆ
 
dóŒoˇã_block
–*
b
, 
size_t
 
n
 ) 
	g__TBB_ovîride
 {

52 
	gmy_Æloˇt‹
.
dóŒoˇã
–
ªöãΩªt_ˇ°
<*>(
b
), 
n
 );

55 
c›y_c⁄°ru˘_ôem
(
T
* 
loˇti⁄
, c⁄° * 
§c
){

56 
√w
 (
loˇti⁄
Ë
T
(*
°©ic_ˇ°
<c⁄° T*>(
§c
));

59 #i‡
__TBB_CPP11_RVALUE_REF_PRESENT


60 
move_c⁄°ru˘_ôem
(
T
* 
loˇti⁄
, c⁄° * 
§c
) {

61 
√w
 (
loˇti⁄
Ë
T
–
°d
::
move
(*
°©ic_ˇ°
<T*>(
c⁄°_ˇ°
<*>(
§c
))) );

64 
	gpublic
:

66 
T
 
	tvÆue_ty≥
;

69 
	gT
& 
	tª„ªn˚
;

72 c⁄° 
	tT
& 
	tc⁄°_ª„ªn˚
;

75 
size_t
 
	tsize_ty≥
;

78 
±rdiff_t
 
	tdif„ªn˚_ty≥
;

81 
A
 
	tÆloˇt‹_ty≥
;

84 
ex∂icô
 
c⁄cuºít_queue
(c⁄° 
Æloˇt‹_ty≥
& 
a
 =állocator_type()) :

85 
my_Æloˇt‹
–
a
 )

90 
ãm∂©e
<
ty≥«me
 
I≈utIãøt‹
>

91 
c⁄cuºít_queue
–
I≈utIãøt‹
 
begö
, I≈utIãøt‹ 
íd
, c⁄° 
Æloˇt‹_ty≥
& 
a
 =állocator_type()) :

92 
my_Æloˇt‹
–
a
 )

94  ; 
	gbegö
 !
íd
; ++begin )

95 
	gthis
->
push
(*
begö
);

99 
c⁄cuºít_queue
–c⁄° c⁄cuºít_queue& 
§c
, c⁄° 
Æloˇt‹_ty≥
& 
a
 =állocator_type()) :

100 
öã∫Æ
::
c⁄cuºít_queue_ba£_v3
<
T
>(), 
my_Æloˇt‹
–
a
 )

102 
	gthis
->
assign
–
§c
, 
c›y_c⁄°ru˘_ôem
 );

105 #i‡
__TBB_CPP11_RVALUE_REF_PRESENT


107 
c⁄cuºít_queue
–c⁄cuºít_queue&& 
§c
 ) :

108 
öã∫Æ
::
c⁄cuºít_queue_ba£_v3
<
T
>(), 
my_Æloˇt‹
–
°d
::
move
(
§c
.my_allocator) )

110 
this
->
öã∫Æ_sw≠
–
§c
 );

113 
c⁄cuºít_queue
–c⁄cuºít_queue&& 
§c
, c⁄° 
Æloˇt‹_ty≥
& 
a
 ) :

114 
öã∫Æ
::
c⁄cuºít_queue_ba£_v3
<
T
>(), 
my_Æloˇt‹
–
a
 )

118 if–
	gmy_Æloˇt‹
 =
§c
.
my_Æloˇt‹
) {

119 
this
->
öã∫Æ_sw≠
–
§c
 );

122 
	gthis
->
assign
–
§c
, 
move_c⁄°ru˘_ôem
 );

123 
	g§c
.
˛ór
();

129 ~
c⁄cuºít_queue
();

132 
push
–c⁄° 
T
& 
sour˚
 ) {

133 
	gthis
->
öã∫Æ_push
–&
sour˚
, 
c›y_c⁄°ru˘_ôem
 );

136 #i‡
__TBB_CPP11_RVALUE_REF_PRESENT


137 
push
–
T
&& 
sour˚
 ) {

138 
	gthis
->
öã∫Æ_push
–&
sour˚
, 
move_c⁄°ru˘_ôem
 );

141 #i‡
__TBB_CPP11_VARIADIC_TEMPLATES_PRESENT


142 
	gãm∂©e
<
	gty≥«me
... 
	gArgumíts
>

143 
em∂a˚
–
Argumíts
&&... 
¨gs
 ) {

144 
push
–
T
(
°d
::
f‹w¨d
<
Argumíts
>–
¨gs
 )...) );

152 
boﬁ
 
åy_p›
–
T
& 
ªsu…
 ) {

153  
	gthis
->
öã∫Æ_åy_p›
–&
ªsu…
 );

157 
size_ty≥
 
unß„_size
(Ëc⁄° { 
	gthis
->
öã∫Æ_size
();}

160 
boﬁ
 
em±y
(Ëc⁄° { 
	gthis
->
öã∫Æ_em±y
();}

163 
˛ór
() ;

166 
Æloˇt‹_ty≥
 
gë_Æloˇt‹
(Ëc⁄° {  
	gthis
->
	gmy_Æloˇt‹
; }

168 
	göã∫Æ
::
	tc⁄cuºít_queue_ôî©‹
<
	tc⁄cuºít_queue
,
	tT
> 
	tôî©‹
;

169 
	göã∫Æ
::
	tc⁄cuºít_queue_ôî©‹
<
	tc⁄cuºít_queue
,c⁄° 
	tT
> 
	tc⁄°_ôî©‹
;

174 
ôî©‹
 
unß„_begö
(Ë{ iãøt‹(*
this
);}

175 
ôî©‹
 
unß„_íd
() { iterator();}

176 
c⁄°_ôî©‹
 
unß„_begö
(Ëc⁄° { c⁄°_ôî©‹(*
this
);}

177 
c⁄°_ôî©‹
 
unß„_íd
() const { const_iterator();}

180 #i‡
__TBB_CPP17_DEDUCTION_GUIDES_PRESENT


182 
	gãm∂©e
<
ty≥«me
 
	gI≈utIãøt‹
,

183 
ty≥«me
 
	gT
 =Åy≥«mê
°d
::
ôî©‹_åaôs
<
I≈utIãøt‹
>::
vÆue_ty≥
,

184 
ty≥«me
 
	gA
 = 
ˇche_Æig√d_Æloˇt‹
<
T
>

185 > 
c⁄cuºít_queue
(
I≈utIãøt‹
, I≈utIãøt‹, c⁄° 
A
& = A())

186 -> 
c⁄cuºít_queue
<
T
, 
	gA
>;

189 
	gãm∂©e
<
ty≥«me
 
	gT
, 
˛ass
 
	gA
>

190 
	gc⁄cuºít_queue
<
	gT
,
	gA
>::~
c⁄cuºít_queue
() {

191 
˛ór
();

192 
	gthis
->
öã∫Æ_föish_˛ór
();

195 
	gãm∂©e
<
ty≥«me
 
	gT
, 
˛ass
 
	gA
>

196 
	gc⁄cuºít_queue
<
	gT
,
	gA
>::
˛ór
() {

197 
T
 
vÆue
;

198  !
em±y
(ËË
åy_p›
(
vÆue
);

209 
	gãm∂©e
<
ty≥«me
 
	gT
, 
˛ass
 
	gA
 = 
ˇche_Æig√d_Æloˇt‹
<
T
> >

210 ˛as†
	cc⁄cuºít_bounded_queue
: 
public
 
öã∫Æ
::
c⁄cuºít_queue_ba£_v8
 {

211 
ãm∂©e
<
ty≥«me
 
C⁄èöî
,Åy≥«mê
VÆue
> 
‰õnd
 
˛ass
 
öã∫Æ
::
c⁄cuºít_queue_ôî©‹
;

212 
ty≥«me
 
	ttbb
::
	töã∫Æ
::
	tÆloˇt‹_ªböd
<
	tA
, >::
	tty≥
 
	t∑ge_Æloˇt‹_ty≥
;

215 
∑ge_Æloˇt‹_ty≥
 
	gmy_Æloˇt‹
;

217 
ty≥«me
 
	tc⁄cuºít_queue_ba£_v3
::
	t∑dded_∑ge
<
	tT
>Öadded_page;

218 
ty≥«me
 
	tc⁄cuºít_queue_ba£_v3
::
	tc›y_•ecifics
 copy_specifics;

221 ˛as†
	cde°royî
: 
öã∫Æ
::
no_c›y
 {

222 
T
& 
my_vÆue
;

223 
	gpublic
:

224 
de°royî
–
T
& 
vÆue
 ) : 
my_vÆue
(value) {}

225 ~
de°royî
(Ë{
my_vÆue
.~
T
();}

228 
	gT
& 
gë_ªf
–
∑ge
& 
p
, 
size_t
 
ödex
 ) {

229 
__TBB_ASSERT
–
ödex
<
ôems_≥r_∑ge
, 
NULL
 );

230  (&
	g°©ic_ˇ°
<
	g∑dded_∑ge
*>(°©ic_ˇ°<*>(&
	gp
))->
	gœ°
)[
ödex
];

233 
vútuÆ
 
c›y_ôem
–
∑ge
& 
d°
, 
size_t
 
ödex
, c⁄° * 
§c
 ) 
	g__TBB_ovîride
 {

234 
√w
–&
gë_ªf
(
d°
,
ödex
ËË
T
(*
°©ic_ˇ°
<c⁄° T*>(
§c
));

237 #i‡
__TBB_CPP11_RVALUE_REF_PRESENT


238 
vútuÆ
 
move_ôem
–
∑ge
& 
d°
, 
size_t
 
ödex
, c⁄° * 
§c
 ) 
	g__TBB_ovîride
 {

239 
√w
–&
gë_ªf
(
d°
,
ödex
ËË
T
–
°d
::
move
(*
°©ic_ˇ°
<T*>(
c⁄°_ˇ°
<*>(
§c
))) );

242 
vútuÆ
 
move_ôem
–
∑ge
&, 
size_t
, c⁄° * ) 
	g__TBB_ovîride
 {

243 
__TBB_ASSERT
–
Ál£
, "Unreachable code" );

247 
vútuÆ
 
c›y_∑ge_ôem
–
∑ge
& 
d°
, 
size_t
 
dödex
, c⁄°Öage& 
§c
, size_à
södex
 ) 
	g__TBB_ovîride
 {

248 
√w
–&
gë_ªf
(
d°
,
dödex
ËË
T
–gë_ªf–
c⁄°_ˇ°
<
∑ge
&>(
§c
), 
södex
 ) );

251 #i‡
__TBB_CPP11_RVALUE_REF_PRESENT


252 
vútuÆ
 
move_∑ge_ôem
–
∑ge
& 
d°
, 
size_t
 
dödex
, c⁄°Öage& 
§c
, size_à
södex
 ) 
	g__TBB_ovîride
 {

253 
√w
–&
gë_ªf
(
d°
,
dödex
ËË
T
–
°d
::
move
(gë_ªf–
c⁄°_ˇ°
<
∑ge
&>(
§c
), 
södex
 )) );

256 
vútuÆ
 
move_∑ge_ôem
–
∑ge
&, 
size_t
, c⁄°Öage&, size_àË
	g__TBB_ovîride
 {

257 
__TBB_ASSERT
–
Ál£
, "Unreachable code" );

261 
vútuÆ
 
assign_™d_de°roy_ôem
–* 
d°
, 
∑ge
& 
§c
, 
size_t
 
ödex
 ) 
	g__TBB_ovîride
 {

262 
	gT
& 
	g‰om
 = 
gë_ªf
(
§c
,
ödex
);

263 
de°royî
 
d
(
‰om
);

264 *
	g°©ic_ˇ°
<
	gT
*>(
	gd°
Ë
tbb
::
öã∫Æ
::
move
–
‰om
 );

267 
vútuÆ
 
∑ge
 *
Æloˇã_∑ge
(Ë
	g__TBB_ovîride
 {

268 
size_t
 
	gn
 = (
∑dded_∑ge
Ë+ (
ôems_≥r_∑ge
-1)*(
T
);

269 
∑ge
 *
	gp
 = 
ªöãΩªt_ˇ°
<∑ge*>(
my_Æloˇt‹
.
Æloˇã
–
n
 ));

270 if–!
	gp
 )

271 
	göã∫Æ
::
throw_ex˚±i⁄
(
öã∫Æ
::
eid_bad_Æloc
);

272  
	gp
;

275 
vútuÆ
 
dóŒoˇã_∑ge
–
∑ge
 *
p
 ) 
	g__TBB_ovîride
 {

276 
size_t
 
	gn
 = (
∑dded_∑ge
Ë+ (
ôems_≥r_∑ge
-1)*(
T
);

277 
	gmy_Æloˇt‹
.
dóŒoˇã
–
ªöãΩªt_ˇ°
<*>(
p
), 
n
 );

280 
	gpublic
:

282 
T
 
	tvÆue_ty≥
;

285 
A
 
	tÆloˇt‹_ty≥
;

288 
	gT
& 
	tª„ªn˚
;

291 c⁄° 
	tT
& 
	tc⁄°_ª„ªn˚
;

296 
	g°d
::
	t±rdiff_t
 
	tsize_ty≥
;

299 
	g°d
::
	t±rdiff_t
 
	tdif„ªn˚_ty≥
;

302 
ex∂icô
 
c⁄cuºít_bounded_queue
(c⁄° 
Æloˇt‹_ty≥
& 
a
 =állocator_type()) :

303 
c⁄cuºít_queue_ba£_v8
–(
T
Ë), 
my_Æloˇt‹
–
a
 )

308 
c⁄cuºít_bounded_queue
–c⁄° c⁄cuºít_bounded_queue& 
§c
, c⁄° 
Æloˇt‹_ty≥
& 
a
 =állocator_type())

309 : 
c⁄cuºít_queue_ba£_v8
–(
T
Ë), 
my_Æloˇt‹
–
a
 )

311 
assign
–
§c
 );

314 #i‡
__TBB_CPP11_RVALUE_REF_PRESENT


316 
c⁄cuºít_bounded_queue
–c⁄cuºít_bounded_queue&& 
§c
 )

317 : 
c⁄cuºít_queue_ba£_v8
–(
T
Ë), 
my_Æloˇt‹
–
°d
::
move
(
§c
.my_allocator) )

319 
öã∫Æ_sw≠
–
§c
 );

322 
c⁄cuºít_bounded_queue
–c⁄cuºít_bounded_queue&& 
§c
, c⁄° 
Æloˇt‹_ty≥
& 
a
 )

323 : 
c⁄cuºít_queue_ba£_v8
–(
T
Ë), 
my_Æloˇt‹
–
a
 )

327 if–
	gmy_Æloˇt‹
 =
§c
.
my_Æloˇt‹
) {

328 
this
->
öã∫Æ_sw≠
–
§c
 );

331 
	gthis
->
move_c⁄ã¡
–
§c
 );

332 
	g§c
.
˛ór
();

338 
	gãm∂©e
<
ty≥«me
 
	gI≈utIãøt‹
>

339 
c⁄cuºít_bounded_queue
–
I≈utIãøt‹
 
begö
, I≈utIãøt‹ 
íd
,

340 c⁄° 
Æloˇt‹_ty≥
& 
a
 =állocator_type())

341 : 
c⁄cuºít_queue_ba£_v8
–(
T
Ë), 
my_Æloˇt‹
–
a
 )

343  ; 
	gbegö
 !
íd
; ++begin )

344 
öã∫Æ_push_if_nŸ_fuŒ
(&*
begö
);

348 ~
c⁄cuºít_bounded_queue
();

351 
push
–c⁄° 
T
& 
sour˚
 ) {

352 
öã∫Æ_push
–&
sour˚
 );

355 #i‡
__TBB_CPP11_RVALUE_REF_PRESENT


357 
push
–
T
&& 
sour˚
 ) {

358 
öã∫Æ_push_move
–&
sour˚
 );

361 #i‡
__TBB_CPP11_VARIADIC_TEMPLATES_PRESENT


362 
	gãm∂©e
<
	gty≥«me
... 
	gArgumíts
>

363 
em∂a˚
–
Argumíts
&&... 
¨gs
 ) {

364 
push
–
T
(
°d
::
f‹w¨d
<
Argumíts
>–
¨gs
 )...) );

371 
p›
–
T
& 
de°ö©i⁄
 ) {

372 
öã∫Æ_p›
–&
de°ö©i⁄
 );

375 #i‡
TBB_USE_EXCEPTIONS


377 
ab‹t
() {

378 
öã∫Æ_ab‹t
();

385 
boﬁ
 
åy_push
–c⁄° 
T
& 
sour˚
 ) {

386  
öã∫Æ_push_if_nŸ_fuŒ
–&
sour˚
 );

389 #i‡
__TBB_CPP11_RVALUE_REF_PRESENT


393 
boﬁ
 
åy_push
–
T
&& 
sour˚
 ) {

394  
öã∫Æ_push_move_if_nŸ_fuŒ
–&
sour˚
 );

396 #i‡
__TBB_CPP11_VARIADIC_TEMPLATES_PRESENT


397 
	gãm∂©e
<
	gty≥«me
... 
	gArgumíts
>

398 
boﬁ
 
åy_em∂a˚
–
Argumíts
&&... 
¨gs
 ) {

399  
åy_push
–
T
(
°d
::
f‹w¨d
<
Argumíts
>–
¨gs
 )...) );

407 
boﬁ
 
åy_p›
–
T
& 
de°ö©i⁄
 ) {

408  
öã∫Æ_p›_if_¥e£¡
–&
de°ö©i⁄
 );

415 
size_ty≥
 
size
(Ëc⁄° { 
öã∫Æ_size
();}

418 
boﬁ
 
em±y
(Ëc⁄° { 
öã∫Æ_em±y
();}

421 
size_ty≥
 
ˇ∑côy
() const {

422  
	gmy_ˇ∑côy
;

428 
£t_ˇ∑côy
–
size_ty≥
 
√w_ˇ∑côy
 ) {

429 
öã∫Æ_£t_ˇ∑côy
–
√w_ˇ∑côy
, (
T
) );

433 
Æloˇt‹_ty≥
 
gë_Æloˇt‹
(Ëc⁄° {  
	gthis
->
	gmy_Æloˇt‹
; }

436 
˛ór
() ;

438 
	göã∫Æ
::
	tc⁄cuºít_queue_ôî©‹
<
	tc⁄cuºít_bounded_queue
,
	tT
> 
	tôî©‹
;

439 
	göã∫Æ
::
	tc⁄cuºít_queue_ôî©‹
<
	tc⁄cuºít_bounded_queue
,c⁄° 
	tT
> 
	tc⁄°_ôî©‹
;

444 
ôî©‹
 
unß„_begö
(Ë{ iãøt‹(*
this
);}

445 
ôî©‹
 
unß„_íd
() { iterator();}

446 
c⁄°_ôî©‹
 
unß„_begö
(Ëc⁄° { c⁄°_ôî©‹(*
this
);}

447 
c⁄°_ôî©‹
 
unß„_íd
() const { const_iterator();}

451 #i‡
__TBB_CPP17_DEDUCTION_GUIDES_PRESENT


453 
	gãm∂©e
<
ty≥«me
 
	gI≈utIãøt‹
,

454 
ty≥«me
 
	gT
 =Åy≥«mê
°d
::
ôî©‹_åaôs
<
I≈utIãøt‹
>::
vÆue_ty≥
,

455 
ty≥«me
 
	gA
 = 
ˇche_Æig√d_Æloˇt‹
<
T
>

456 > 
c⁄cuºít_bounded_queue
(
I≈utIãøt‹
, I≈utIãøt‹, c⁄° 
A
& = A())

457 -> 
c⁄cuºít_bounded_queue
<
T
, 
	gA
>;

460 
	gãm∂©e
<
ty≥«me
 
	gT
, 
˛ass
 
	gA
>

461 
	gc⁄cuºít_bounded_queue
<
	gT
,
	gA
>::~
	$c⁄cuºít_bounded_queue
() {

462 
	`˛ór
();

463 
	`öã∫Æ_föish_˛ór
();

464 
	}
}

466 
	gãm∂©e
<
ty≥«me
 
	gT
, 
˛ass
 
	gA
>

467 
	gc⁄cuºít_bounded_queue
<
	gT
,
	gA
>::
	$˛ór
() {

468 
T
 
vÆue
;

469  
	`åy_p›
(
vÆue
) ) ;

470 
	}
}

472 
usög
 
	g°ri˘_µl
::
c⁄cuºít_queue
;

476 
	~"öã∫Æ/_w¨nög_suµªss_dißbÀ_nŸi˚.h
"

477 #unde‡
__TBB_c⁄cuºít_queue_H_ö˛ude_¨ó


	@/usr/include/tbb/concurrent_vector.h

17 #i‚de‡
__TBB_c⁄cuºít_ve˘‹_H


18 
	#__TBB_c⁄cuºít_ve˘‹_H


	)

20 
	#__TBB_c⁄cuºít_ve˘‹_H_ö˛ude_¨ó


	)

21 
	~"öã∫Æ/_w¨nög_suµªss_íabÀ_nŸi˚.h
"

23 
	~"tbb_°ddef.h
"

24 
	~"tbb_ex˚±i⁄.h
"

25 
	~"©omic.h
"

26 
	~"ˇche_Æig√d_Æloˇt‹.h
"

27 
	~"blocked_ønge.h
"

28 
	~"tbb_machöe.h
"

29 
	~"tbb_¥ofûög.h
"

30 
	~<√w
>

31 
	~<c°rög
>

32 #ö˛udê
__TBB_STD_SWAP_HEADER


33 
	~<Æg‹ôhm
>

34 
	~<ôî©‹
>

36 
	~"öã∫Æ/_Æloˇt‹_åaôs.h
"

38 #i‡
_MSC_VER
==1500 && !
__INTEL_COMPILER


40 #¥agm®
w¨nög
–
push
 )

41 #¥agm®
w¨nög
–
dißbÀ
: 4985 )

43 
	~<limôs
>

44 #i‡
_MSC_VER
==1500 && !
__INTEL_COMPILER


45 #¥agm®
w¨nög
–
p›
 )

48 #i‡
__TBB_INITIALIZER_LISTS_PRESENT


49 
	~<öôülizî_li°
>

52 #i‡
deföed
(
_MSC_VER
Ë&& !deföed(
__INTEL_COMPILER
)

54 #¥agm®
w¨nög
 (
push
)

55 #i‡
deföed
(
_Wp64
)

56 #¥agm®
w¨nög
 (
dißbÀ
: 4267)

58 #¥agm®
w¨nög
 (
dißbÀ
: 4127)

61 
«me•a˚
 
	gtbb
 {

63 
	gãm∂©e
<
ty≥«me
 
	gT
, 
˛ass
 
	gA
 = 
ˇche_Æig√d_Æloˇt‹
<
T
> >

64 
˛ass
 
c⁄cuºít_ve˘‹
;

67 
«me•a˚
 
	göã∫Æ
 {

69 
	gãm∂©e
<
ty≥«me
 
	gC⁄èöî
,Åy≥«mê
	gVÆue
>

70 
˛ass
 
	gve˘‹_ôî©‹
;

73 *c⁄° 
	gve˘‹_Æloˇti⁄_îr‹_Êag
 = 
ªöãΩªt_ˇ°
<*>(
size_t
(63));

76 
	gãm∂©e
<
ty≥«me
 
	gT
>

77 
h™dÀ_unc⁄°ru˘ed_ñemíts
(
T
* 
¨øy
, 
size_t
 
n_of_ñemíts
){

78 
	g°d
::
mem£t
–
°©ic_ˇ°
<*>(
¨øy
), 0, 
n_of_ñemíts
 * –
T
 ) );

83 ˛as†
	cc⁄cuºít_ve˘‹_ba£_v3
 {

84 
	g¥Ÿe˘ed
:

87 
size_t
 
	t£gmít_ödex_t
;

88 
size_t
 
	tsize_ty≥
;

93 
	gdeÁu…_öôül_£gmíts
 = 1,

95 
	gpoöãrs_≥r_sh‹t_èbÀ
 = 3,

96 
	gpoöãrs_≥r_l⁄g_èbÀ
 = (
£gmít_ödex_t
) * 8

99 
	s£gmít_nŸ_u£d
 {};

100 
	s£gmít_Æloˇãd
 {};

101 
	s£gmít_Æloˇti⁄_Áûed
 {};

103 
˛ass
 
	g£gmít_t
;

104 ˛as†
	c£gmít_vÆue_t
 {

105 * 
	g¨øy
;

106 
	g¥iv©e
:

108 
‰õnd
 
˛ass
 
£gmít_t
;

109 
ex∂icô
 
£gmít_vÆue_t
(* 
™_¨øy
):
¨øy
(an_array) {}

110 
public
:

111 
‰õnd
 
boﬁ
 
›î©‹
==(
£gmít_vÆue_t
 c⁄°& 
lhs
, 
	g£gmít_nŸ_u£d
 ) {  
	glhs
.
	g¨øy
 == 0;}

112 
‰õnd
 
boﬁ
 
	g›î©‹
==(
£gmít_vÆue_t
 c⁄°& 
lhs
, 
	g£gmít_Æloˇãd
Ë{  
	glhs
.
	g¨øy
 > 
	göã∫Æ
::
ve˘‹_Æloˇti⁄_îr‹_Êag
;}

113 
‰õnd
 
boﬁ
 
	g›î©‹
==(
£gmít_vÆue_t
 c⁄°& 
lhs
, 
	g£gmít_Æloˇti⁄_Áûed
Ë{  
	glhs
.
	g¨øy
 =
öã∫Æ
::
ve˘‹_Æloˇti⁄_îr‹_Êag
;}

114 
	gãm∂©e
<
ty≥«me
 
	g¨gumít_ty≥
>

115 
‰õnd
 
boﬁ
 
	g›î©‹
!=(
£gmít_vÆue_t
 c⁄°& 
lhs
, 
¨gumít_ty≥
 
	g¨g
Ë{  ! (
	glhs
 =
¨g
);}

117 
	gãm∂©e
<
ty≥«me
 
	gT
>

118 
T
* 
poöãr
(Ëc⁄° {  
	g°©ic_ˇ°
<
	gT
*>(
	gc⁄°_ˇ°
<*>(
	g¨øy
)); }

121 
‰õnd
 
íf‹˚_£gmít_Æloˇãd
(
£gmít_vÆue_t
 c⁄°& 
s
, 
öã∫Æ
::
ex˚±i⁄_id
 
ex˚±i⁄
 = 
eid_bad_œ°_Æloc
){

122 if(
s
 !
£gmít_Æloˇãd
()){

123 
öã∫Æ
::
throw_ex˚±i⁄
(
ex˚±i⁄
);

128 ˛as†
	c£gmít_t
 {

129 
	g©omic
<*> 
	g¨øy
;

130 
	gpublic
:

131 
£gmít_t
(){ 
°‹e
<
ªœxed
>(
£gmít_nŸ_u£d
());}

135 
£gmít_t
(£gmít_àc⁄°& 
rhs
 ){ 
	g¨øy
.
	g°‹e
<
	gªœxed
>(
	grhs
.¨øy.
	glﬂd
<relaxed>());}

137 
sw≠
(
£gmít_t
 & 
rhs
 ){

138 
	gtbb
::
öã∫Æ
::
sw≠
<
ªœxed
>(
¨øy
, 
	grhs
.
	g¨øy
);

141 
	g£gmít_t
& 
	g›î©‹
=(
£gmít_t
 c⁄°& 
rhs
 ){

142 
¨øy
.
°‹e
<
ªœxed
>(
rhs
.¨øy.
lﬂd
<relaxed>());

143  *
	gthis
;

146 
	gãm∂©e
<
mem‹y_£m™tics
 
	gM
>

147 
£gmít_vÆue_t
 
lﬂd
(Ëc⁄° {  segmít_vÆue_t(
¨øy
.lﬂd<
M
>());}

149 
	gãm∂©e
<
mem‹y_£m™tics
 
	gM
>

150 
°‹e
(
£gmít_nŸ_u£d
) {

151 
	g¨øy
.
	g°‹e
<
	gM
>(0);

154 
	gãm∂©e
<
mem‹y_£m™tics
 
	gM
>

155 
°‹e
(
£gmít_Æloˇti⁄_Áûed
) {

156 
__TBB_ASSERT
(
lﬂd
<
ªœxed
>(Ë!
£gmít_Æloˇãd
(),"transition from \"allocated\"Åo \"allocation failed\" stateÜooksÇon-logical");

157 
	g¨øy
.
	g°‹e
<
	gM
>(
	göã∫Æ
::
ve˘‹_Æloˇti⁄_îr‹_Êag
);

160 
	gãm∂©e
<
mem‹y_£m™tics
 
	gM
>

161 
°‹e
(* 
Æloˇãd_£gmít_poöãr
Ë
__TBB_NOEXCEPT
(
åue
) {

162 
__TBB_ASSERT
(
£gmít_vÆue_t
(
Æloˇãd_£gmít_poöãr
Ë=
£gmít_Æloˇãd
(),

164 
	g¨øy
.
	g°‹e
<
	gM
>(
	gÆloˇãd_£gmít_poöãr
);

167 #i‡
TBB_USE_ASSERT


168 ~
£gmít_t
() {

169 
__TBB_ASSERT
(
lﬂd
<
ªœxed
>(Ë!
£gmít_Æloˇãd
(), "should have been freed by clear" );

173 
‰õnd
 
sw≠
(
£gmít_t
 & , segmít_à& ) 
__TBB_NOEXCEPT
(
åue
);

178 * (*
	gve˘‹_Æloˇt‹_±r
)(
	gc⁄cuºít_ve˘‹_ba£_v3
 &, 
	gsize_t
);

181 
	g©omic
<
	gsize_ty≥
> 
	gmy_fú°_block
;

184 
	g©omic
<
	gsize_ty≥
> 
	gmy_óæy_size
;

187 
	g©omic
<
	g£gmít_t
*> 
	gmy_£gmít
;

190 
£gmít_t
 
	gmy_°‹age
[
poöãrs_≥r_sh‹t_èbÀ
];

194 
c⁄cuºít_ve˘‹_ba£_v3
() {

203 
	gmy_óæy_size
.
	g°‹e
<
	gªœxed
>(0);

204 
	gmy_fú°_block
.
	g°‹e
<
	gªœxed
>(0);

205 
	gmy_£gmít
.
	g°‹e
<
	gªœxed
>(
	gmy_°‹age
);

208 
	g__TBB_EXPORTED_METHOD
 ~
c⁄cuºít_ve˘‹_ba£_v3
();

214 
£gmít_ödex_t
 
£gmít_ödex_of
–
size_ty≥
 
ödex
 ) {

215  
£gmít_ödex_t
–
__TBB_Log2
–
ödex
|1 ) );

218 
£gmít_ödex_t
 
£gmít_ba£
–£gmít_ödex_à
k
 ) {

219  (
£gmít_ödex_t
(1)<<
	gk
 & ~segment_index_t(1));

222 
ölöe
 
£gmít_ödex_t
 
£gmít_ba£_ödex_of
–£gmít_ödex_à&
ödex
 ) {

223 
£gmít_ödex_t
 
	gk
 = 
£gmít_ödex_of
–
ödex
 );

224 
	gödex
 -
£gmít_ba£
(
k
);

225  
	gk
;

228 
size_ty≥
 
£gmít_size
–
£gmít_ödex_t
 
k
 ) {

229  
£gmít_ödex_t
(1)<<
	gk
;

233 
boﬁ
 
is_fú°_ñemít_ö_£gmít
(
size_ty≥
 
ñemít_ödex
){

237 
__TBB_ASSERT
(
ñemít_ödex
, "there should beÇoÇeedÅo call "

239  
is_powî_of_two_©_Àa°
–
ñemít_ödex
, 2 );

243 (
__TBB_EXPORTED_FUNC
 *
	töã∫Æ_¨øy_›1
)(* 
	tbegö
, 
	tsize_ty≥
 
	tn
 );

246 (
__TBB_EXPORTED_FUNC
 *
	töã∫Æ_¨øy_›2
)(* 
	td°
, c⁄° * 
	t§c
, 
	tsize_ty≥
 
	tn
 );

249 
	söã∫Æ_£gmíts_èbÀ
 {

250 
£gmít_ödex_t
 
	gfú°_block
;

251 
£gmít_t
 
	gèbÀ
[
poöãrs_≥r_l⁄g_èbÀ
];

254 
__TBB_EXPORTED_METHOD
 
öã∫Æ_ª£rve
–
size_ty≥
 
n
, size_ty≥ 
ñemít_size
, size_ty≥ 
max_size
 );

255 
size_ty≥
 
__TBB_EXPORTED_METHOD
 
öã∫Æ_ˇ∑côy
() const;

256 
öã∫Æ_grow
–
size_ty≥
 
°¨t
, size_ty≥ 
föish
, size_ty≥ 
ñemít_size
, 
öã∫Æ_¨øy_›2
 
öô
, c⁄° *
§c
 );

257 
size_ty≥
 
__TBB_EXPORTED_METHOD
 
öã∫Æ_grow_by
–size_ty≥ 
dñè
, size_ty≥ 
ñemít_size
, 
öã∫Æ_¨øy_›2
 
öô
, c⁄° *
§c
 );

258 * 
__TBB_EXPORTED_METHOD
 
öã∫Æ_push_back
–
size_ty≥
 
ñemít_size
, size_ty≥& 
ödex
 );

259 
£gmít_ödex_t
 
__TBB_EXPORTED_METHOD
 
öã∫Æ_˛ór
–
öã∫Æ_¨øy_›1
 
de°roy
 );

260 * 
__TBB_EXPORTED_METHOD
 
öã∫Æ_com∑˘
–
size_ty≥
 
ñemít_size
, *
èbÀ
, 
öã∫Æ_¨øy_›1
 
de°roy
, 
öã∫Æ_¨øy_›2
 
c›y
 );

261 
__TBB_EXPORTED_METHOD
 
öã∫Æ_c›y
–c⁄° 
c⁄cuºít_ve˘‹_ba£_v3
& 
§c
, 
size_ty≥
 
ñemít_size
, 
öã∫Æ_¨øy_›2
 
c›y
 );

262 
__TBB_EXPORTED_METHOD
 
öã∫Æ_assign
–c⁄° 
c⁄cuºít_ve˘‹_ba£_v3
& 
§c
, 
size_ty≥
 
ñemít_size
,

263 
öã∫Æ_¨øy_›1
 
de°roy
, 
öã∫Æ_¨øy_›2
 
assign
, i¡î«l_¨øy_›2 
c›y
 );

265 
__TBB_EXPORTED_METHOD
 
öã∫Æ_throw_ex˚±i⁄
(
size_ty≥
) const;

266 
__TBB_EXPORTED_METHOD
 
öã∫Æ_sw≠
(
c⁄cuºít_ve˘‹_ba£_v3
& 
v
);

268 
__TBB_EXPORTED_METHOD
 
öã∫Æ_ªsize
–
size_ty≥
 
n
, size_ty≥ 
ñemít_size
, size_ty≥ 
max_size
, c⁄° *
§c
,

269 
öã∫Æ_¨øy_›1
 
de°roy
, 
öã∫Æ_¨øy_›2
 
öô
 );

270 
size_ty≥
 
__TBB_EXPORTED_METHOD
 
öã∫Æ_grow_to_©_Àa°_wôh_ªsu…
–size_ty≥ 
√w_size
, size_ty≥ 
ñemít_size
, 
öã∫Æ_¨øy_›2
 
öô
, c⁄° *
§c
 );

273 
__TBB_EXPORTED_METHOD
 
öã∫Æ_grow_to_©_Àa°
–
size_ty≥
 
√w_size
, size_ty≥ 
ñemít_size
, 
öã∫Æ_¨øy_›2
 
öô
, c⁄° *
§c
 );

274 
	g¥iv©e
:

276 
˛ass
 
hñ≥r
;

277 
‰õnd
 
˛ass
 
	ghñ≥r
;

279 
	gãm∂©e
<
ty≥«me
 
	gC⁄èöî
,Åy≥«mê
	gVÆue
>

280 
‰õnd
 
˛ass
 
	gve˘‹_ôî©‹
;

284 
ölöe
 
sw≠
(
c⁄cuºít_ve˘‹_ba£_v3
::
£gmít_t
 & 
lhs
, c⁄cuºít_ve˘‹_ba£_v3::£gmít_à& 
rhs
Ë
__TBB_NOEXCEPT
(
åue
) {

285 
lhs
.
sw≠
(
rhs
);

288 
c⁄cuºít_ve˘‹_ba£_v3
 
	tc⁄cuºít_ve˘‹_ba£
;

293 
	gãm∂©e
<
ty≥«me
 
	gC⁄èöî
,Åy≥«mê
	gVÆue
>

294 ˛as†
	cve˘‹_ôî©‹


297 
C⁄èöî
* 
	gmy_ve˘‹
;

300 
size_t
 
	gmy_ödex
;

304 
muèbÀ
 
VÆue
* 
	gmy_ôem
;

306 
	gãm∂©e
<
ty≥«me
 
	gC
,Åy≥«mê
	gT
>

307 
‰õnd
 
	gve˘‹_ôî©‹
<
	gC
,
	gT
> 
	g›î©‹
+–
±rdiff_t
 
	goff£t
, c⁄° ve˘‹_ôî©‹<C,T>& 
	gv
 );

309 
	gãm∂©e
<
ty≥«me
 
	gC
,Åy≥«mê
	gT
,Åy≥«mê
	gU
>

310 
‰õnd
 
boﬁ
 
	g›î©‹
==–c⁄° 
ve˘‹_ôî©‹
<
C
,
	gT
>& 
	gi
, c⁄° 
	gve˘‹_ôî©‹
<
	gC
,
	gU
>& 
	gj
 );

312 
	gãm∂©e
<
ty≥«me
 
	gC
,Åy≥«mê
	gT
,Åy≥«mê
	gU
>

313 
‰õnd
 
boﬁ
 
	g›î©‹
<–c⁄° 
	gve˘‹_ôî©‹
<
	gC
,
	gT
>& 
	gi
, c⁄° ve˘‹_ôî©‹<C,
	gU
>& 
	gj
 );

315 
	gãm∂©e
<
ty≥«me
 
	gC
,Åy≥«mê
	gT
,Åy≥«mê
	gU
>

316 
‰õnd
 
±rdiff_t
 
	g›î©‹
-–c⁄° 
	gve˘‹_ôî©‹
<
	gC
,
	gT
>& 
	gi
, c⁄° ve˘‹_ôî©‹<C,
	gU
>& 
	gj
 );

318 
	gãm∂©e
<
ty≥«me
 
	gC
,Åy≥«mê
	gU
>

319 
‰õnd
 
˛ass
 
	göã∫Æ
::
ve˘‹_ôî©‹
;

321 #i‡!
__TBB_TEMPLATE_FRIENDS_BROKEN


322 
	gãm∂©e
<
ty≥«me
 
	gT
, 
˛ass
 
	gA
>

323 
‰õnd
 
˛ass
 
	gtbb
::
c⁄cuºít_ve˘‹
;

325 
	gpublic
:

328 
ve˘‹_ôî©‹
–c⁄° 
C⁄èöî
& 
ve˘‹
, 
size_t
 
ödex
, *
±r
 = 0 ) :

329 
my_ve˘‹
(
c⁄°_ˇ°
<
C⁄èöî
*>(&
ve˘‹
)),

330 
my_ödex
(
ödex
),

331 
my_ôem
(
°©ic_ˇ°
<
VÆue
*>(
±r
))

334 
	gpublic
:

336 
ve˘‹_ôî©‹
(Ë: 
my_ve˘‹
(
NULL
), 
my_ödex
(~
size_t
(0)), 
my_ôem
(NULL) {}

338 
ve˘‹_ôî©‹
–c⁄° ve˘‹_ôî©‹<
C⁄èöî
,
ty≥«me
 C⁄èöî::
vÆue_ty≥
>& 
Ÿhî
 ) :

339 
my_ve˘‹
(
Ÿhî
.my_vector),

340 
my_ödex
(
Ÿhî
.my_index),

341 
my_ôem
(
Ÿhî
.my_item)

344 
	gve˘‹_ôî©‹
& 
	g›î©‹
=–c⁄° 
ve˘‹_ôî©‹
<
C⁄èöî
,
ty≥«me
 
	gC⁄èöî
::
vÆue_ty≥
>& 
Ÿhî
 )

346 
my_ve˘‹
=
Ÿhî
.my_vector;

347 
	gmy_ödex
=
Ÿhî
.
my_ödex
;

348 
	gmy_ôem
=
Ÿhî
.
my_ôem
;

349  *
	gthis
;

352 
ve˘‹_ôî©‹
 
	g›î©‹
+–
±rdiff_t
 
	goff£t
 ) const {

353  
ve˘‹_ôî©‹
–*
my_ve˘‹
, 
my_ödex
+
off£t
 );

355 
	gve˘‹_ôî©‹
 &
	g›î©‹
+=–
±rdiff_t
 
off£t
 ) {

356 
my_ödex
+=
off£t
;

357 
	gmy_ôem
 = 
NULL
;

358  *
	gthis
;

360 
ve˘‹_ôî©‹
 
	g›î©‹
-–
±rdiff_t
 
	goff£t
 ) const {

361  
ve˘‹_ôî©‹
–*
my_ve˘‹
, 
my_ödex
-
off£t
 );

363 
	gve˘‹_ôî©‹
 &
	g›î©‹
-=–
±rdiff_t
 
off£t
 ) {

364 
my_ödex
-=
off£t
;

365 
	gmy_ôem
 = 
NULL
;

366  *
	gthis
;

368 
	gVÆue
& 
	g›î©‹
*() const {

369 
VÆue
* 
	gôem
 = 
my_ôem
;

370 if–!
	gôem
 ) {

371 
	gôem
 = 
my_ôem
 = &
my_ve˘‹
->
öã∫Æ_subs¸ùt
(
my_ödex
);

373 
__TBB_ASSERT
–
ôem
==&
my_ve˘‹
->
öã∫Æ_subs¸ùt
(
my_ödex
), "corrupt cache" );

374  *
	gôem
;

376 
	gVÆue
& 
	g›î©‹
[]–
±rdiff_t
 
	gk
 ) const {

377  
	gmy_ve˘‹
->
öã∫Æ_subs¸ùt
(
my_ödex
+
k
);

379 
VÆue
* 
	g›î©‹
->() const { &operator*();}

382 
	gve˘‹_ôî©‹
& 
	g›î©‹
++() {

383 
size_t
 
	gñemít_ödex
 = ++
my_ödex
;

384 if–
	gmy_ôem
 ) {

386 if–
	gc⁄cuºít_ve˘‹_ba£
::
is_fú°_ñemít_ö_£gmít
(
ñemít_ödex
)) {

389 
my_ôem

NULL
;

391 ++
	gmy_ôem
;

394  *
	gthis
;

398 
	gve˘‹_ôî©‹
& 
	g›î©‹
--() {

399 
__TBB_ASSERT
–
my_ödex
>0, "operator--()áppliedÅo iteratorálreadyát beginning of concurrent_vector" );

400 
size_t
 
	gñemít_ödex
 = 
my_ödex
--;

401 if–
	gmy_ôem
 ) {

402 if(
	gc⁄cuºít_ve˘‹_ba£
::
is_fú°_ñemít_ö_£gmít
(
ñemít_ödex
)) {

405 
my_ôem

NULL
;

407 --
	gmy_ôem
;

410  *
	gthis
;

414 
ve˘‹_ôî©‹
 
	g›î©‹
++() {

415 
ve˘‹_ôî©‹
 
	gªsu…
 = *
this
;

416 
	g›î©‹
++();

417  
	gªsu…
;

421 
ve˘‹_ôî©‹
 
	g›î©‹
--() {

422 
ve˘‹_ôî©‹
 
	gªsu…
 = *
this
;

423 
	g›î©‹
--();

424  
	gªsu…
;

429 
±rdiff_t
 
	tdif„ªn˚_ty≥
;

430 
VÆue
 
	tvÆue_ty≥
;

431 
VÆue
* 
	tpoöãr
;

432 
	gVÆue
& 
	tª„ªn˚
;

433 
	g°d
::
	tøndom_ac˚ss_ôî©‹_èg
 
	tôî©‹_ˇãg‹y
;

436 
	gãm∂©e
<
ty≥«me
 
	gC⁄èöî
,Åy≥«mê
	gT
>

437 
	gve˘‹_ôî©‹
<
	gC⁄èöî
,
	gT
> 
	g›î©‹
+–
±rdiff_t
 
	goff£t
, c⁄° ve˘‹_ôî©‹<C⁄èöî,T>& 
	gv
 ) {

438  
	gve˘‹_ôî©‹
<
	gC⁄èöî
,
	gT
>–*
	gv
.
	gmy_ve˘‹
, v.
	gmy_ödex
+
	goff£t
 );

441 
	gãm∂©e
<
ty≥«me
 
	gC⁄èöî
,Åy≥«mê
	gT
,Åy≥«mê
	gU
>

442 
boﬁ
 
	g›î©‹
==–c⁄° 
ve˘‹_ôî©‹
<
C⁄èöî
,
	gT
>& 
	gi
, c⁄° 
	gve˘‹_ôî©‹
<
	gC⁄èöî
,
	gU
>& 
	gj
 ) {

443  
	gi
.
	gmy_ödex
==
j
.
my_ödex
 && 
i
.
my_ve˘‹
 == j.my_vector;

446 
	gãm∂©e
<
ty≥«me
 
	gC⁄èöî
,Åy≥«mê
	gT
,Åy≥«mê
	gU
>

447 
boﬁ
 
	g›î©‹
!=–c⁄° 
ve˘‹_ôî©‹
<
C⁄èöî
,
	gT
>& 
	gi
, c⁄° 
	gve˘‹_ôî©‹
<
	gC⁄èöî
,
	gU
>& 
	gj
 ) {

448  !(
	gi
==
j
);

451 
	gãm∂©e
<
ty≥«me
 
	gC⁄èöî
,Åy≥«mê
	gT
,Åy≥«mê
	gU
>

452 
boﬁ
 
	g›î©‹
<–c⁄° 
	gve˘‹_ôî©‹
<
	gC⁄èöî
,
	gT
>& 
	gi
, c⁄° ve˘‹_ôî©‹<C⁄èöî,
	gU
>& 
	gj
 ) {

453  
	gi
.
	gmy_ödex
<
	gj
.my_index;

456 
	gãm∂©e
<
ty≥«me
 
	gC⁄èöî
,Åy≥«mê
	gT
,Åy≥«mê
	gU
>

457 
boﬁ
 
	g›î©‹
>–c⁄° 
	gve˘‹_ôî©‹
<
	gC⁄èöî
,
	gT
>& 
	gi
, c⁄° ve˘‹_ôî©‹<C⁄èöî,
	gU
>& 
	gj
 ) {

458  
	gj
<
	gi
;

461 
	gãm∂©e
<
ty≥«me
 
	gC⁄èöî
,Åy≥«mê
	gT
,Åy≥«mê
	gU
>

462 
boﬁ
 
	g›î©‹
>=–c⁄° 
ve˘‹_ôî©‹
<
C⁄èöî
,
	gT
>& 
	gi
, c⁄° 
	gve˘‹_ôî©‹
<
	gC⁄èöî
,
	gU
>& 
	gj
 ) {

463  !(
	gi
<
	gj
);

466 
	gãm∂©e
<
ty≥«me
 
	gC⁄èöî
,Åy≥«mê
	gT
,Åy≥«mê
	gU
>

467 
boﬁ
 
	g›î©‹
<=–c⁄° 
ve˘‹_ôî©‹
<
C⁄èöî
,
	gT
>& 
	gi
, c⁄° 
	gve˘‹_ôî©‹
<
	gC⁄èöî
,
	gU
>& 
	gj
 ) {

468  !(
	gj
<
	gi
);

471 
	gãm∂©e
<
ty≥«me
 
	gC⁄èöî
,Åy≥«mê
	gT
,Åy≥«mê
	gU
>

472 
±rdiff_t
 
	g›î©‹
-–c⁄° 
	gve˘‹_ôî©‹
<
	gC⁄èöî
,
	gT
>& 
	gi
, c⁄° ve˘‹_ôî©‹<C⁄èöî,
	gU
>& 
	gj
 ) {

473  
±rdiff_t
(
i
.
my_ödex
)-±rdiff_t(
j
.my_index);

476 
	gãm∂©e
<
ty≥«me
 
	gT
, 
˛ass
 
	gA
>

477 ˛as†
	cÆloˇt‹_ba£
 {

478 
	gpublic
:

479 
ty≥«me
 
	ttbb
::
	töã∫Æ
::
	tÆloˇt‹_ªböd
<
	tA
, 
	tT
>::
	tty≥
 
	tÆloˇt‹_ty≥
;

480 
Æloˇt‹_ty≥
 
	gmy_Æloˇt‹
;

481 
Æloˇt‹_ba£
(c⁄° 
Æloˇt‹_ty≥
 &
a
 =áŒoˇt‹_ty≥(ËË: 
my_Æloˇt‹
(a) {}

549 
	gãm∂©e
<
ty≥«me
 
	gT
, 
˛ass
 
	gA
>

550 
˛ass
 
	gc⁄cuºít_ve˘‹
: 
¥Ÿe˘ed
 
öã∫Æ
::
Æloˇt‹_ba£
<
T
, 
	gA
>,

551 
¥iv©e
 
	göã∫Æ
::
c⁄cuºít_ve˘‹_ba£
 {

552 
¥iv©e
:

553 
ãm∂©e
<
ty≥«me
 
I
>

554 
˛ass
 
gíîic_ønge_ty≥
: 
public
 
blocked_ønge
<
I
> {

555 
public
:

556 
T
 
	tvÆue_ty≥
;

557 
	gT
& 
	tª„ªn˚
;

558 c⁄° 
	tT
& 
	tc⁄°_ª„ªn˚
;

559 
I
 
	tôî©‹
;

560 
±rdiff_t
 
	tdif„ªn˚_ty≥
;

561 
gíîic_ønge_ty≥
–
I
 
begö_
, I 
íd_
, 
size_t
 
gøösize_
 = 1Ë: 
blocked_ønge
<I>(begö_,
	gíd_
,
	ggøösize_
) {}

562 
	gãm∂©e
<
ty≥«me
 
	gU
>

563 
gíîic_ønge_ty≥
–c⁄° gíîic_ønge_ty≥<
U
>& 
r
Ë: 
blocked_ønge
<
I
>‘.
begö
(),
	gr
.
íd
(),r.
gøösize
()) {}

564 
gíîic_ønge_ty≥
–gíîic_ønge_ty≥& 
r
, 
•lô
 ) : 
blocked_ønge
<
I
>(r,split()) {}

567 
	gãm∂©e
<
ty≥«me
 
	gC
,Åy≥«mê
	gU
>

568 
‰õnd
 
˛ass
 
	göã∫Æ
::
ve˘‹_ôî©‹
;

570 
	gpublic
:

574 
öã∫Æ
::
	tc⁄cuºít_ve˘‹_ba£_v3
::
	tsize_ty≥
 size_type;

575 
ty≥«me
 
	töã∫Æ
::
	tÆloˇt‹_ba£
<
	tT
, 
	tA
>::
	tÆloˇt‹_ty≥
állocator_type;

577 
T
 
	tvÆue_ty≥
;

578 
±rdiff_t
 
	tdif„ªn˚_ty≥
;

579 
	gT
& 
	tª„ªn˚
;

580 c⁄° 
	tT
& 
	tc⁄°_ª„ªn˚
;

581 
T
 *
	tpoöãr
;

582 c⁄° 
	tT
 *
	tc⁄°_poöãr
;

584 
	göã∫Æ
::
	tve˘‹_ôî©‹
<
	tc⁄cuºít_ve˘‹
,
	tT
> 
	tôî©‹
;

585 
	göã∫Æ
::
	tve˘‹_ôî©‹
<
	tc⁄cuºít_ve˘‹
,c⁄° 
	tT
> 
	tc⁄°_ôî©‹
;

587 #i‡!
deföed
(
_MSC_VER
Ë|| 
_CPPLIB_VER
>=300

589 
	g°d
::
	tªvî£_ôî©‹
<
	tôî©‹
>Ñeverse_iterator;

590 
	g°d
::
	tªvî£_ôî©‹
<
	tc⁄°_ôî©‹
> 
	tc⁄°_ªvî£_ôî©‹
;

593 
	g°d
::
	tªvî£_ôî©‹
<
	tôî©‹
,
	tT
,T&,T*>Ñeverse_iterator;

594 
	g°d
::
	tªvî£_ôî©‹
<
	tc⁄°_ôî©‹
,
	tT
,c⁄° T&,c⁄° T*> 
	tc⁄°_ªvî£_ôî©‹
;

600 
	ggíîic_ønge_ty≥
<
	tôî©‹
> 
	tønge_ty≥
;

601 
	ggíîic_ønge_ty≥
<
	tc⁄°_ôî©‹
> 
	tc⁄°_ønge_ty≥
;

608 
ex∂icô
 
c⁄cuºít_ve˘‹
(c⁄° 
Æloˇt‹_ty≥
 &
a
 =állocator_type())

609 : 
öã∫Æ
::
Æloˇt‹_ba£
<
T
, 
	gA
>(
	ga
), 
	göã∫Æ
::
c⁄cuºít_ve˘‹_ba£
()

611 
ve˘‹_Æloˇt‹_±r
 = &
öã∫Æ_Æloˇt‹
;

616 #i‡
__TBB_INITIALIZER_LISTS_PRESENT


618 
c⁄cuºít_ve˘‹
(
°d
::
öôülizî_li°
<
T
> 
öô_li°
, c⁄° 
Æloˇt‹_ty≥
 &
a
 =állocator_type())

619 : 
öã∫Æ
::
Æloˇt‹_ba£
<
T
, 
	gA
>(
	ga
), 
	göã∫Æ
::
c⁄cuºít_ve˘‹_ba£
()

621 
ve˘‹_Æloˇt‹_±r
 = &
öã∫Æ_Æloˇt‹
;

622 
	g__TBB_TRY
 {

623 
öã∫Æ_assign_ôî©‹s
(
öô_li°
.
begö
(), inô_li°.
íd
());

624 } 
__TBB_CATCH
(...) {

625 
£gmít_t
 *
	gèbÀ
 = 
my_£gmít
.
lﬂd
<
ªœxed
>();;

626 
öã∫Æ_‰ì_£gmíts
–
èbÀ
, 
öã∫Æ_˛ór
(&
de°roy_¨øy
), 
my_fú°_block
.
lﬂd
<
ªœxed
>());

627 
__TBB_RETHROW
();

634 
c⁄cuºít_ve˘‹
–c⁄° c⁄cuºít_ve˘‹& 
ve˘‹
, c⁄° 
Æloˇt‹_ty≥
& 
a
 =állocator_type() )

635 : 
öã∫Æ
::
Æloˇt‹_ba£
<
T
, 
	gA
>(
	ga
), 
	göã∫Æ
::
c⁄cuºít_ve˘‹_ba£
()

637 
ve˘‹_Æloˇt‹_±r
 = &
öã∫Æ_Æloˇt‹
;

638 
	g__TBB_TRY
 {

639 
öã∫Æ_c›y
(
ve˘‹
, (
T
), &
c›y_¨øy
);

640 } 
__TBB_CATCH
(...) {

641 
£gmít_t
 *
	gèbÀ
 = 
my_£gmít
.
lﬂd
<
ªœxed
>();

642 
öã∫Æ_‰ì_£gmíts
–
èbÀ
, 
öã∫Æ_˛ór
(&
de°roy_¨øy
), 
my_fú°_block
.
lﬂd
<
ªœxed
>());

643 
__TBB_RETHROW
();

647 #i‡
__TBB_CPP11_RVALUE_REF_PRESENT


650 
c⁄cuºít_ve˘‹
–c⁄cuºít_ve˘‹&& 
sour˚
)

651 : 
öã∫Æ
::
Æloˇt‹_ba£
<
T
, 
	gA
>(
	g°d
::
move
(
sour˚
)), 
	göã∫Æ
::
c⁄cuºít_ve˘‹_ba£
()

653 
ve˘‹_Æloˇt‹_±r
 = &
öã∫Æ_Æloˇt‹
;

654 
	gc⁄cuºít_ve˘‹_ba£_v3
::
öã∫Æ_sw≠
(
sour˚
);

657 
c⁄cuºít_ve˘‹
–c⁄cuºít_ve˘‹&& 
sour˚
, c⁄° 
Æloˇt‹_ty≥
& 
a
)

658 : 
öã∫Æ
::
Æloˇt‹_ba£
<
T
, 
	gA
>(
	ga
), 
	göã∫Æ
::
c⁄cuºít_ve˘‹_ba£
()

660 
ve˘‹_Æloˇt‹_±r
 = &
öã∫Æ_Æloˇt‹
;

663 i‡(
	ga
 =
sour˚
.
my_Æloˇt‹
) {

664 
c⁄cuºít_ve˘‹_ba£_v3
::
öã∫Æ_sw≠
(
sour˚
);

666 
	g__TBB_TRY
 {

667 
öã∫Æ_c›y
(
sour˚
, (
T
), &
move_¨øy
);

668 } 
__TBB_CATCH
(...) {

669 
£gmít_t
 *
	gèbÀ
 = 
my_£gmít
.
lﬂd
<
ªœxed
>();

670 
öã∫Æ_‰ì_£gmíts
–
èbÀ
, 
öã∫Æ_˛ór
(&
de°roy_¨øy
), 
my_fú°_block
.
lﬂd
<
ªœxed
>());

671 
__TBB_RETHROW
();

679 
	gãm∂©e
<
˛ass
 
	gM
>

680 
c⁄cuºít_ve˘‹
–c⁄° c⁄cuºít_ve˘‹<
T
, 
M
>& 
ve˘‹
, c⁄° 
Æloˇt‹_ty≥
& 
a
 =állocator_type() )

681 : 
öã∫Æ
::
Æloˇt‹_ba£
<
T
, 
	gA
>(
	ga
), 
	göã∫Æ
::
c⁄cuºít_ve˘‹_ba£
()

683 
ve˘‹_Æloˇt‹_±r
 = &
öã∫Æ_Æloˇt‹
;

684 
	g__TBB_TRY
 {

685 
öã∫Æ_c›y
(
ve˘‹
.
öã∫Æ_ve˘‹_ba£
(), (
T
), &
c›y_¨øy
);

686 } 
__TBB_CATCH
(...) {

687 
£gmít_t
 *
	gèbÀ
 = 
my_£gmít
.
lﬂd
<
ªœxed
>();

688 
öã∫Æ_‰ì_£gmíts
–
èbÀ
, 
öã∫Æ_˛ór
(&
de°roy_¨øy
), 
my_fú°_block
.
lﬂd
<
ªœxed
>() );

689 
__TBB_RETHROW
();

694 
ex∂icô
 
c⁄cuºít_ve˘‹
(
size_ty≥
 
n
)

696 
	gve˘‹_Æloˇt‹_±r
 = &
öã∫Æ_Æloˇt‹
;

697 
	g__TBB_TRY
 {

698 
öã∫Æ_ªsize
–
n
, (
T
), 
max_size
(), 
NULL
, &
de°roy_¨øy
, &
öôülize_¨øy
 );

699 } 
__TBB_CATCH
(...) {

700 
£gmít_t
 *
	gèbÀ
 = 
my_£gmít
.
lﬂd
<
ªœxed
>();

701 
öã∫Æ_‰ì_£gmíts
–
èbÀ
, 
öã∫Æ_˛ór
(&
de°roy_¨øy
), 
my_fú°_block
.
lﬂd
<
ªœxed
>() );

702 
__TBB_RETHROW
();

707 
c⁄cuºít_ve˘‹
(
size_ty≥
 
n
, 
c⁄°_ª„ªn˚
 
t
, c⁄° 
Æloˇt‹_ty≥
& 
a
 =állocator_type())

708 : 
öã∫Æ
::
Æloˇt‹_ba£
<
T
, 
	gA
>(
	ga
)

710 
	gve˘‹_Æloˇt‹_±r
 = &
öã∫Æ_Æloˇt‹
;

711 
	g__TBB_TRY
 {

712 
öã∫Æ_ªsize
–
n
, (
T
), 
max_size
(), 
°©ic_ˇ°
<c⁄° *>(&
t
), &
de°roy_¨øy
, &
öôülize_¨øy_by
 );

713 } 
__TBB_CATCH
(...) {

714 
£gmít_t
 *
	gèbÀ
 = 
my_£gmít
.
lﬂd
<
ªœxed
>();

715 
öã∫Æ_‰ì_£gmíts
–
èbÀ
, 
öã∫Æ_˛ór
(&
de°roy_¨øy
), 
my_fú°_block
.
lﬂd
<
ªœxed
>() );

716 
__TBB_RETHROW
();

721 
	gãm∂©e
<
˛ass
 
	gI
>

722 
c⁄cuºít_ve˘‹
(
I
 
fú°
, I 
œ°
, c⁄° 
Æloˇt‹_ty≥
 &
a
 =állocator_type())

723 : 
öã∫Æ
::
Æloˇt‹_ba£
<
T
, 
	gA
>(
	ga
)

725 
	gve˘‹_Æloˇt‹_±r
 = &
öã∫Æ_Æloˇt‹
;

726 
	g__TBB_TRY
 {

727 
öã∫Æ_assign_ønge
(
fú°
, 
œ°
, 
°©ic_ˇ°
<
is_öãgî_èg
<
°d
::
numîic_limôs
<
I
>::
is_öãgî
> *>(0) );

728 } 
__TBB_CATCH
(...) {

729 
£gmít_t
 *
	gèbÀ
 = 
my_£gmít
.
lﬂd
<
ªœxed
>();

730 
öã∫Æ_‰ì_£gmíts
–
èbÀ
, 
öã∫Æ_˛ór
(&
de°roy_¨øy
), 
my_fú°_block
.
lﬂd
<
ªœxed
>() );

731 
__TBB_RETHROW
();

736 
	gc⁄cuºít_ve˘‹
& 
	g›î©‹
=–c⁄° 
c⁄cuºít_ve˘‹
& 
ve˘‹
 ) {

737 if–
this
 !&
ve˘‹
 )

738 
öã∫Æ_assign
(
ve˘‹
, (
T
), &
de°roy_¨øy
, &
assign_¨øy
, &
c›y_¨øy
);

739  *
	gthis
;

742 #i‡
__TBB_CPP11_RVALUE_REF_PRESENT


745 
	gc⁄cuºít_ve˘‹
& 
	g›î©‹
=–
c⁄cuºít_ve˘‹
&& 
Ÿhî
 ) {

746 
__TBB_ASSERT
(
this
 !&
Ÿhî
, "MoveássignmentÅo itself isÖrohibited ");

747 
ty≥«me
 
	ttbb
::
	töã∫Æ
::
	tÆloˇt‹_åaôs
<
	tA
>::
	t¥›ag©e_⁄_c⁄èöî_move_assignmít
 
	tpocma_t
;

748 if(
	gpocma_t
::
vÆue
 || 
this
->
my_Æloˇt‹
 =
Ÿhî
.my_allocator) {

749 
c⁄cuºít_ve˘‹
 
åash
 (
°d
::
move
(*
this
));

750 
öã∫Æ_sw≠
(
Ÿhî
);

751 
	gtbb
::
öã∫Æ
::
Æloˇt‹_move_assignmít
(
this
->
my_Æloˇt‹
, 
Ÿhî
.my_Æloˇt‹, 
pocma_t
());

753 
öã∫Æ_assign
(
Ÿhî
, (
T
), &
de°roy_¨øy
, &
move_assign_¨øy
, &
move_¨øy
);

755  *
	gthis
;

761 
	gãm∂©e
<
˛ass
 
	gM
>

762 
	gc⁄cuºít_ve˘‹
& 
	g›î©‹
=–c⁄° 
c⁄cuºít_ve˘‹
<
T
, 
	gM
>& 
	gve˘‹
 ) {

763 if–
	g°©ic_ˇ°
<*>–
	gthis
 ) !
°©ic_ˇ°
<c⁄° *>–&
ve˘‹
 ) )

764 
öã∫Æ_assign
(
ve˘‹
.
öã∫Æ_ve˘‹_ba£
(),

765 (
T
), &
de°roy_¨øy
, &
assign_¨øy
, &
c›y_¨øy
);

766  *
	gthis
;

769 #i‡
__TBB_INITIALIZER_LISTS_PRESENT


771 
	gc⁄cuºít_ve˘‹
& 
	g›î©‹
=–
°d
::
öôülizî_li°
<
T
> 
öô_li°
 ) {

772 
öã∫Æ_˛ór
(&
de°roy_¨øy
);

773 
öã∫Æ_assign_ôî©‹s
(
öô_li°
.
begö
(), inô_li°.
íd
());

774  *
	gthis
;

783 
ôî©‹
 
grow_by
–
size_ty≥
 
dñè
 ) {

784  
ôî©‹
(*
this
, 
dñè
 ? 
öã∫Æ_grow_by
–dñè, (
T
), &
öôülize_¨øy
, 
NULL
 ) : 
my_óæy_size
.
lﬂd
());

789 
ôî©‹
 
grow_by
–
size_ty≥
 
dñè
, 
c⁄°_ª„ªn˚
 
t
 ) {

790  
ôî©‹
(*
this
, 
dñè
 ? 
öã∫Æ_grow_by
–dñè, (
T
), &
öôülize_¨øy_by
, 
°©ic_ˇ°
<c⁄° *>(&
t
ËË: 
my_óæy_size
.
lﬂd
());

794 
	gãm∂©e
<
ty≥«me
 
	gI
>

795 
ôî©‹
 
grow_by
–
I
 
fú°
, I 
œ°
 ) {

796 
ty≥«me
 
	g°d
::
ôî©‹_åaôs
<
I
>::
dif„ªn˚_ty≥
 
dñè
 = 
°d
::
di°™˚
(
fú°
, 
œ°
);

797 
__TBB_ASSERT
–
dñè
 >0, 
NULL
);

799  
ôî©‹
(*
this
, 
dñè
 ? 
öã∫Æ_grow_by
(dñè, (
T
), &
c›y_ønge
<
I
>, 
°©ic_ˇ°
<c⁄° *>(&
fú°
)Ë: 
my_óæy_size
.
lﬂd
());

802 #i‡
__TBB_INITIALIZER_LISTS_PRESENT


804 
ôî©‹
 
grow_by
–
°d
::
öôülizî_li°
<
T
> 
öô_li°
 ) {

805  
grow_by
–
öô_li°
.
begö
(), inô_li°.
íd
() );

814 
ôî©‹
 
grow_to_©_Àa°
–
size_ty≥
 
n
 ) {

815 
size_ty≥
 
	gm
=0;

816 if–
	gn
 ) {

817 
	gm
 = 
öã∫Æ_grow_to_©_Àa°_wôh_ªsu…
–
n
, (
T
), &
öôülize_¨øy
, 
NULL
 );

818 if–
	gm
>
	gn
 ) m=
n
;

820  
ôî©‹
(*
this
, 
m
);

825 
ôî©‹
 
grow_to_©_Àa°
–
size_ty≥
 
n
, 
c⁄°_ª„ªn˚
 
t
 ) {

826 
size_ty≥
 
	gm
=0;

827 if–
	gn
 ) {

828 
	gm
 = 
öã∫Æ_grow_to_©_Àa°_wôh_ªsu…
–
n
, (
T
), &
öôülize_¨øy_by
, &
t
);

829 if–
	gm
>
	gn
 ) m=
n
;

831  
ôî©‹
(*
this
, 
m
);

836 
ôî©‹
 
push_back
–
c⁄°_ª„ªn˚
 
ôem
 )

838 
push_back_hñ≥r
 
¥ﬁog
(*
this
);

839 
√w
(
¥ﬁog
.
öã∫Æ_push_back_ªsu…
()Ë
T
(
ôem
);

840  
	g¥ﬁog
.
ªtu∫_ôî©‹_™d_dismiss
();

843 #i‡ 
__TBB_CPP11_RVALUE_REF_PRESENT


846 
ôî©‹
 
push_back
–
T
&& 
ôem
 )

848 
push_back_hñ≥r
 
¥ﬁog
(*
this
);

849 
√w
(
¥ﬁog
.
öã∫Æ_push_back_ªsu…
()Ë
T
(
°d
::
move
(
ôem
));

850  
	g¥ﬁog
.
ªtu∫_ôî©‹_™d_dismiss
();

852 #i‡
__TBB_CPP11_VARIADIC_TEMPLATES_PRESENT


855 
	gãm∂©e
<
	gty≥«me
... 
	gArgs
>

856 
ôî©‹
 
em∂a˚_back
–
Args
&&... 
¨gs
 )

858 
push_back_hñ≥r
 
¥ﬁog
(*
this
);

859 
√w
(
¥ﬁog
.
öã∫Æ_push_back_ªsu…
()Ë
T
(
°d
::
f‹w¨d
<
Args
>(
¨gs
)...);

860  
	g¥ﬁog
.
ªtu∫_ôî©‹_™d_dismiss
();

867 
ª„ªn˚
 
	g›î©‹
[]–
size_ty≥
 
	gödex
 ) {

868  
öã∫Æ_subs¸ùt
(
ödex
);

872 
c⁄°_ª„ªn˚
 
	g›î©‹
[]–
size_ty≥
 
	gödex
 ) const {

873  
öã∫Æ_subs¸ùt
(
ödex
);

877 
ª„ªn˚
 
©
–
size_ty≥
 
ödex
 ) {

878  
öã∫Æ_subs¸ùt_wôh_ex˚±i⁄s
(
ödex
);

882 
c⁄°_ª„ªn˚
 
©
–
size_ty≥
 
ödex
 ) const {

883  
öã∫Æ_subs¸ùt_wôh_ex˚±i⁄s
(
ödex
);

887 
ønge_ty≥
 
ønge
–
size_t
 
gøösize
 = 1 ) {

888  
ønge_ty≥
–
begö
(), 
íd
(), 
gøösize
 );

892 
c⁄°_ønge_ty≥
 
ønge
–
size_t
 
gøösize
 = 1 ) const {

893  
c⁄°_ønge_ty≥
–
begö
(), 
íd
(), 
gøösize
 );

900 
size_ty≥
 
size
() const {

901 
size_ty≥
 
	gsz
 = 
my_óæy_size
, 
	g˝
 = 
öã∫Æ_ˇ∑côy
();

902  
	g˝
 < 
	gsz
 ? c∞: 
sz
;

906 
boﬁ
 
em±y
(Ëc⁄° { !
	gmy_óæy_size
;}

909 
size_ty≥
 
ˇ∑côy
(Ëc⁄° { 
öã∫Æ_ˇ∑côy
();}

914 
ª£rve
–
size_ty≥
 
n
 ) {

915 if–
	gn
 )

916 
öã∫Æ_ª£rve
(
n
, (
T
), 
max_size
());

920 
ªsize
–
size_ty≥
 
n
 ) {

921 
öã∫Æ_ªsize
–
n
, (
T
), 
max_size
(), 
NULL
, &
de°roy_¨øy
, &
öôülize_¨øy
 );

925 
ªsize
–
size_ty≥
 
n
, 
c⁄°_ª„ªn˚
 
t
 ) {

926 
öã∫Æ_ªsize
–
n
, (
T
), 
max_size
(), 
°©ic_ˇ°
<c⁄° *>(&
t
), &
de°roy_¨øy
, &
öôülize_¨øy_by
 );

930 
shrök_to_fô
();

933 
size_ty≥
 
max_size
(Ëc⁄° { (~size_ty≥(0))/(
	gT
);}

940 
ôî©‹
 
begö
(Ë{ iãøt‹(*
this
,0);}

942 
ôî©‹
 
íd
(Ë{ iãøt‹(*
this
,
size
());}

944 
c⁄°_ôî©‹
 
begö
(Ëc⁄° { c⁄°_ôî©‹(*
this
,0);}

946 
c⁄°_ôî©‹
 
íd
(Ëc⁄° { c⁄°_ôî©‹(*
this
,
size
());}

948 
c⁄°_ôî©‹
 
cbegö
(Ëc⁄° { c⁄°_ôî©‹(*
this
,0);}

950 
c⁄°_ôî©‹
 
˚nd
(Ëc⁄° { c⁄°_ôî©‹(*
this
,
size
());}

952 
ªvî£_ôî©‹
 
rbegö
(Ë{Ñevî£_ôî©‹(
íd
());}

954 
ªvî£_ôî©‹
 
ªnd
(Ë{Ñevî£_ôî©‹(
begö
());}

956 
c⁄°_ªvî£_ôî©‹
 
rbegö
(Ëc⁄° { c⁄°_ªvî£_ôî©‹(
íd
());}

958 
c⁄°_ªvî£_ôî©‹
 
ªnd
(Ëc⁄° { c⁄°_ªvî£_ôî©‹(
begö
());}

960 
c⁄°_ªvî£_ôî©‹
 
¸begö
(Ëc⁄° { c⁄°_ªvî£_ôî©‹(
íd
());}

962 
c⁄°_ªvî£_ôî©‹
 
¸íd
(Ëc⁄° { c⁄°_ªvî£_ôî©‹(
begö
());}

964 
ª„ªn˚
 
‰⁄t
() {

965 
__TBB_ASSERT
–
size
()>0, 
NULL
);

966 c⁄° 
	g£gmít_vÆue_t
& 
	g£gmít_vÆue
 = 
my_£gmít
[0].
ãm∂©e
 
lﬂd
<
ªœxed
>();

967  (
	g£gmít_vÆue
.
ãm∂©e
 
	gpoöãr
<
	gT
>())[0];

970 
c⁄°_ª„ªn˚
 
‰⁄t
() const {

971 
__TBB_ASSERT
–
size
()>0, 
NULL
);

972 c⁄° 
	g£gmít_vÆue_t
& 
	g£gmít_vÆue
 = 
my_£gmít
[0].
ãm∂©e
 
lﬂd
<
ªœxed
>();

973  (
	g£gmít_vÆue
.
ãm∂©e
 
	gpoöãr
<c⁄° 
	gT
>())[0];

976 
ª„ªn˚
 
back
() {

977 
__TBB_ASSERT
–
size
()>0, 
NULL
);

978  
öã∫Æ_subs¸ùt
–
size
()-1 );

981 
c⁄°_ª„ªn˚
 
back
() const {

982 
__TBB_ASSERT
–
size
()>0, 
NULL
);

983  
öã∫Æ_subs¸ùt
–
size
()-1 );

986 
Æloˇt‹_ty≥
 
gë_Æloˇt‹
(Ëc⁄° {  
	gthis
->
	gmy_Æloˇt‹
; }

989 
assign
(
size_ty≥
 
n
, 
c⁄°_ª„ªn˚
 
t
) {

990 
˛ór
();

991 
öã∫Æ_ªsize
–
n
, (
T
), 
max_size
(), 
°©ic_ˇ°
<c⁄° *>(&
t
), &
de°roy_¨øy
, &
öôülize_¨øy_by
 );

995 
	gãm∂©e
<
˛ass
 
	gI
>

996 
assign
(
I
 
fú°
, I 
œ°
) {

997 
˛ór
(); 
öã∫Æ_assign_ønge
–
fú°
, 
œ°
, 
°©ic_ˇ°
<
is_öãgî_èg
<
°d
::
numîic_limôs
<
I
>::
is_öãgî
> *>(0) );

1000 #i‡
__TBB_INITIALIZER_LISTS_PRESENT


1002 
assign
(
°d
::
öôülizî_li°
<
T
> 
öô_li°
) {

1003 
˛ór
(); 
öã∫Æ_assign_ôî©‹s
–
öô_li°
.
begö
(), inô_li°.
íd
());

1008 
sw≠
(
c⁄cuºít_ve˘‹
 &
ve˘‹
) {

1009 
ty≥«me
 
	ttbb
::
	töã∫Æ
::
	tÆloˇt‹_åaôs
<
	tA
>::
	t¥›ag©e_⁄_c⁄èöî_sw≠
 
	tpocs_t
;

1010 if–
	gthis
 !&
ve˘‹
 && (
this
->
my_Æloˇt‹
 =ve˘‹.my_Æloˇt‹ || 
pocs_t
::
vÆue
) ) {

1011 
c⁄cuºít_ve˘‹_ba£_v3
::
öã∫Æ_sw≠
(
°©ic_ˇ°
<c⁄cuºít_ve˘‹_ba£_v3&>(
ve˘‹
));

1012 
	gtbb
::
öã∫Æ
::
Æloˇt‹_sw≠
(
this
->
my_Æloˇt‹
, 
ve˘‹
.my_Æloˇt‹, 
pocs_t
());

1018 
˛ór
() {

1019 
öã∫Æ_˛ór
(&
de°roy_¨øy
);

1023 ~
c⁄cuºít_ve˘‹
() {

1024 
£gmít_t
 *
	gèbÀ
 = 
my_£gmít
.
lﬂd
<
ªœxed
>();

1025 
öã∫Æ_‰ì_£gmíts
–
èbÀ
, 
öã∫Æ_˛ór
(&
de°roy_¨øy
), 
my_fú°_block
.
lﬂd
<
ªœxed
>() );

1029 c⁄° 
	göã∫Æ
::
c⁄cuºít_ve˘‹_ba£_v3
 &
öã∫Æ_ve˘‹_ba£
(Ëc⁄° {  *
this
; }

1030 
	g¥iv©e
:

1032 *
öã∫Æ_Æloˇt‹
(
öã∫Æ
::
c⁄cuºít_ve˘‹_ba£_v3
 &
vb
, 
size_t
 
k
) {

1033  
	g°©ic_ˇ°
<
	gc⁄cuºít_ve˘‹
<
	gT
, 
	gA
>&>(
	gvb
).
	gmy_Æloˇt‹
.
Æloˇã
(
k
);

1036 
öã∫Æ_‰ì_£gmíts
(
£gmít_t
 
èbÀ
[], 
£gmít_ödex_t
 
k
, segmít_ödex_à
fú°_block
);

1039 
	gT
& 
öã∫Æ_subs¸ùt
–
size_ty≥
 
ödex
 ) const;

1042 
	gT
& 
öã∫Æ_subs¸ùt_wôh_ex˚±i⁄s
–
size_ty≥
 
ödex
 ) const;

1045 
öã∫Æ_assign_n
(
size_ty≥
 
n
, 
c⁄°_poöãr
 
p
) {

1046 
öã∫Æ_ªsize
–
n
, (
T
), 
max_size
(), 
°©ic_ˇ°
<c⁄° *>(
p
), &
de°roy_¨øy
,Ö? &
öôülize_¨øy_by
 : &
öôülize_¨øy
 );

1056 
	gãm∂©e
<
boﬁ
 
	gB
> 
˛ass
 
	gis_öãgî_èg
;

1059 
	gãm∂©e
<
˛ass
 
	gI
>

1060 
öã∫Æ_assign_ønge
(
I
 
fú°
, I 
œ°
, 
is_öãgî_èg
<
åue
> *) {

1061 
öã∫Æ_assign_n
(
°©ic_ˇ°
<
size_ty≥
>(
fú°
), &°©ic_ˇ°<
T
&>(
œ°
));

1064 
	gãm∂©e
<
˛ass
 
	gI
>

1065 
öã∫Æ_assign_ønge
(
I
 
fú°
, I 
œ°
, 
is_öãgî_èg
<
Ál£
> *) {

1066 
öã∫Æ_assign_ôî©‹s
(
fú°
, 
œ°
);

1069 
	gãm∂©e
<
˛ass
 
	gI
>

1070 
öã∫Æ_assign_ôî©‹s
(
I
 
fú°
, I 
œ°
);

1075 
__TBB_EXPORTED_FUNC
 
öôülize_¨øy
–* 
begö
, c⁄° *, 
size_ty≥
 
n
 );

1078 
__TBB_EXPORTED_FUNC
 
öôülize_¨øy_by
–* 
begö
, c⁄° * 
§c
, 
size_ty≥
 
n
 );

1081 
__TBB_EXPORTED_FUNC
 
c›y_¨øy
–* 
d°
, c⁄° * 
§c
, 
size_ty≥
 
n
 );

1083 #i‡
__TBB_MOVE_IF_NOEXCEPT_PRESENT


1085 
__TBB_EXPORTED_FUNC
 
move_¨øy_if_n€x˚±
–* 
d°
, c⁄° * 
§c
, 
size_ty≥
 
n
 );

1088 #i‡
__TBB_CPP11_RVALUE_REF_PRESENT


1090 
__TBB_EXPORTED_FUNC
 
move_¨øy
–* 
d°
, c⁄° * 
§c
, 
size_ty≥
 
n
 );

1093 
__TBB_EXPORTED_FUNC
 
move_assign_¨øy
–* 
d°
, c⁄° * 
§c
, 
size_ty≥
 
n
 );

1096 
	gãm∂©e
<
ty≥«me
 
	gIãøt‹
>

1097 
__TBB_EXPORTED_FUNC
 
c›y_ønge
–* 
d°
, c⁄° * 
p_ty≥_îa£d_ôî©‹
, 
size_ty≥
 
n
 );

1100 
__TBB_EXPORTED_FUNC
 
assign_¨øy
–* 
d°
, c⁄° * 
§c
, 
size_ty≥
 
n
 );

1103 
__TBB_EXPORTED_FUNC
 
de°roy_¨øy
–* 
begö
, 
size_ty≥
 
n
 );

1106 ˛as†
	cöã∫Æ_lo›_guide
 : 
öã∫Æ
::
no_c›y
 {

1107 
public
:

1108 c⁄° 
poöãr
 
¨øy
;

1109 c⁄° 
size_ty≥
 
	gn
;

1110 
size_ty≥
 
	gi
;

1112 c⁄° 
T
* 
as_c⁄°_poöãr
(c⁄° *
±r
Ë{  
	g°©ic_ˇ°
<c⁄° 
	gT
 *>(
	g±r
); }

1113 
T
* 
as_poöãr
(c⁄° *
§c
Ë{  
	g°©ic_ˇ°
<
	gT
*>(
	gc⁄°_ˇ°
<*>(
	g§c
)); }

1115 
öã∫Æ_lo›_guide
(
size_ty≥
 
¡rüls
, *
±r
)

1116 : 
¨øy
(
as_poöãr
(
±r
)), 
n
(
¡rüls
), 
i
(0) {}

1117 
öô
(Ë{ ; 
	gi
 < 
	gn
; ++iË
√w
–&
¨øy
[
i
] ) 
T
(); }

1118 
öô
(c⁄° *
§c
Ë{ ; 
	gi
 < 
	gn
; ++iË
√w
–&
¨øy
[
i
] ) 
T
(*
as_c⁄°_poöãr
(src)); }

1119 
c›y
(c⁄° *
§c
Ë{ ; 
	gi
 < 
	gn
; ++iË
√w
–&
¨øy
[
i
] ) 
T
(
as_c⁄°_poöãr
(src)[i]); }

1120 
assign
(c⁄° *
§c
Ë{ ; 
	gi
 < 
	gn
; ++iË
	g¨øy
[
i
] = 
as_c⁄°_poöãr
(src)[i]; }

1121 #i‡
__TBB_CPP11_RVALUE_REF_PRESENT


1122 
move_assign
(c⁄° *
§c
Ë{ ; 
	gi
 < 
	gn
; ++iË
	g¨øy
[
i
] = 
°d
::
move
(
as_poöãr
(src)[i]); }

1123 
move_c⁄°ru˘
(c⁄° *
§c
Ë{ ; 
	gi
 < 
	gn
; ++iË
√w
–&
¨øy
[
i
] ) 
T
–
°d
::
move
(
as_poöãr
(src)[i]) ); }

1125 #i‡
__TBB_MOVE_IF_NOEXCEPT_PRESENT


1126 
move_c⁄°ru˘_if_n€x˚±
(c⁄° *
§c
Ë{ ; 
	gi
 < 
	gn
; ++iË
√w
–&
¨øy
[
i
] ) 
T
–
°d
::
move_if_n€x˚±
(
as_poöãr
(src)[i]) ); }

1130 
	gãm∂©e
<
˛ass
 
	gI
> 
ôî©e
(
I
 &
§c
Ë{ ; 
	gi
 < 
	gn
; ++i, ++
	g§c
Ë
√w
–&
¨øy
[
i
] ) 
T
( *src ); }

1131 ~
öã∫Æ_lo›_guide
() {

1132 if(
	gi
 < 
	gn
) {

1133 
	göã∫Æ
::
h™dÀ_unc⁄°ru˘ed_ñemíts
(
¨øy
+
i
, 
n
-i);

1138 
	gpush_back_hñ≥r
 : 
öã∫Æ
::
no_c›y
{

1139 
ñemít_c⁄°ru˘i⁄_gu¨d
 : 
öã∫Æ
::
no_c›y
{

1140 
poöãr
 
ñemít
;

1142 
ñemít_c⁄°ru˘i⁄_gu¨d
(
poöãr
 
™_ñemít
Ë: 
ñemít
 (an_element){}

1143 
dismiss
(){ 
ñemít
 = 
NULL
; }

1144 ~
ñemít_c⁄°ru˘i⁄_gu¨d
(){

1145 i‡(
	gñemít
){

1146 
	göã∫Æ
::
h™dÀ_unc⁄°ru˘ed_ñemíts
(
ñemít
, 1);

1151 
	gc⁄cuºít_ve˘‹
 & 
	gv
;

1152 
size_ty≥
 
	gk
;

1153 
ñemít_c⁄°ru˘i⁄_gu¨d
 
	gg
;

1155 
push_back_hñ≥r
(
c⁄cuºít_ve˘‹
 & 
ve˘‹
) :

1156 
v
(
ve˘‹
),

1157 
g
 (
°©ic_ˇ°
<
T
*>(
v
.
öã∫Æ_push_back
((T),
k
)))

1160 
poöãr
 
öã∫Æ_push_back_ªsu…
(){  
	gg
.
	gñemít
;}

1161 
ôî©‹
 
ªtu∫_ôî©‹_™d_dismiss
(){

1162 
poöãr
 
	g±r
 = 
g
.
ñemít
;

1163 
	gg
.
dismiss
();

1164  
ôî©‹
(
v
, 
k
, 
±r
);

1169 #i‡
__TBB_CPP17_DEDUCTION_GUIDES_PRESENT


1171 
	gãm∂©e
<
ty≥«me
 
	gI
,

1172 
ty≥«me
 
	gT
 =Åy≥«mê
°d
::
ôî©‹_åaôs
<
I
>::
vÆue_ty≥
,

1173 
ty≥«me
 
	gA
 = 
ˇche_Æig√d_Æloˇt‹
<
T
>

1174 > 
c⁄cuºít_ve˘‹
(
I
, I, c⁄° 
A
& = A())

1175 -> 
c⁄cuºít_ve˘‹
<
T
, 
	gA
>;

1178 
	gãm∂©e
<
ty≥«me
 
	gT
,Åy≥«mê
	gA1
,Åy≥«mê
	gA2
>

1179 
c⁄cuºít_ve˘‹
(c⁄° c⁄cuºít_ve˘‹<
T
, 
A1
> &, c⁄° 
A2
 &)

1180 -> 
	gc⁄cuºít_ve˘‹
<
	gT
, 
	gA2
>;

1183 
	gãm∂©e
<
ty≥«me
 
	gT
,Åy≥«mê
	gA
 = 
ˇche_Æig√d_Æloˇt‹
<
T
>

1184 > 
c⁄cuºít_ve˘‹
(
°d
::
öôülizî_li°
<
T
>, c⁄° 
A
& = A())

1185 -> 
c⁄cuºít_ve˘‹
<
T
, 
	gA
>;

1188 #i‡
deföed
(
_MSC_VER
Ë&& !
	$deföed
(
__INTEL_COMPILER
)

1189 #¥agm®
	$w¨nög
 (
push
)

1190 #¥agm®
	$w¨nög
 (
dißbÀ
: 4701)

1192 
ãm∂©e
<
ty≥«me
 
T
, 
˛ass
 
A
>

1193 
c⁄cuºít_ve˘‹
<
T
, 
A
>::
	$shrök_to_fô
() {

1194 
öã∫Æ_£gmíts_èbÀ
 
ﬁd
;

1195 
__TBB_TRY
 {

1196 
öã∫Æ_¨øy_›2
 
c›y_‹_move_¨øy
 =

1197 #i‡
__TBB_MOVE_IF_NOEXCEPT_PRESENT


1198 &
move_¨øy_if_n€x˚±


1200 &
c›y_¨øy


1203 if–
	`öã∫Æ_com∑˘
–(
T
), &
ﬁd
, &
de°roy_¨øy
, 
c›y_‹_move_¨øy
 ) )

1204 
	`öã∫Æ_‰ì_£gmíts
–
ﬁd
.
èbÀ
, 
poöãrs_≥r_l⁄g_èbÀ
, old.
fú°_block
 );

1205 } 
	`__TBB_CATCH
(...) {

1206 if–
ﬁd
.
fú°_block
 )

1207 
	`öã∫Æ_‰ì_£gmíts
–
ﬁd
.
èbÀ
, 1, old.
fú°_block
 );

1208 
	`__TBB_RETHROW
();

1210 
	}
}

1211 #i‡
deföed
(
_MSC_VER
Ë&& !
	$deföed
(
__INTEL_COMPILER
)

1212 #¥agm®
	$w¨nög
 (
p›
)

1215 
ãm∂©e
<
ty≥«me
 
T
, 
˛ass
 
A
>

1216 
c⁄cuºít_ve˘‹
<
T
, 
A
>::
	$öã∫Æ_‰ì_£gmíts
(
£gmít_t
 
èbÀ
[], 
£gmít_ödex_t
 
k
, segmít_ödex_à
fú°_block
) {

1218  
k
 > 
fú°_block
 ) {

1219 --
k
;

1220 
£gmít_vÆue_t
 
£gmít_vÆue
 = 
èbÀ
[
k
].
lﬂd
<
ªœxed
>();

1221 
èbÀ
[
k
].
°‹e
<
ªœxed
>(
	`£gmít_nŸ_u£d
());

1222 if–
£gmít_vÆue
 =
	`£gmít_Æloˇãd
() )

1223 
this
->
my_Æloˇt‹
.
	`dóŒoˇã
–(
£gmít_vÆue
.
poöãr
<
T
>()), 
	`£gmít_size
(
k
) );

1225 
£gmít_vÆue_t
 
£gmít_vÆue
 = 
èbÀ
[0].
lﬂd
<
ªœxed
>();

1226 if–
£gmít_vÆue
 =
	`£gmít_Æloˇãd
() ) {

1227 
	`__TBB_ASSERT
–
fú°_block
 > 0, 
NULL
 );

1228 
k
 > 0Ë
èbÀ
[--k].
°‹e
<
ªœxed
>(
	`£gmít_nŸ_u£d
());

1229 
this
->
my_Æloˇt‹
.
	`dóŒoˇã
–(
£gmít_vÆue
.
poöãr
<
T
>()), 
	`£gmít_size
(
fú°_block
) );

1231 
	}
}

1233 
	gãm∂©e
<
ty≥«me
 
	gT
, 
˛ass
 
	gA
>

1234 
	gT
& 
	gc⁄cuºít_ve˘‹
<T, 
	gA
>::
	$öã∫Æ_subs¸ùt
–
size_ty≥
 
ödex
 ) const {

1236 
	`__TBB_ASSERT
–
ödex
 < 
my_óæy_size
, "index out of bounds" );

1237 
size_ty≥
 
j
 = 
ödex
;

1238 
£gmít_ödex_t
 
k
 = 
	`£gmít_ba£_ödex_of
–
j
 );

1239 
	`__TBB_ASSERT
–
my_£gmít
.
lﬂd
<
acquúe
>(Ë!
my_°‹age
 || 
k
 < 
poöãrs_≥r_sh‹t_èbÀ
, "index is beingállocated" );

1244 
£gmít_vÆue_t
 
£gmít_vÆue
 = 
my_£gmít
[
k
].
ãm∂©e
 
lﬂd
<
ªœxed
>();

1245 
	`__TBB_ASSERT
–
£gmít_vÆue
 !
	`£gmít_Æloˇti⁄_Áûed
(), "the instance is broken by badállocation. Useát() instead" );

1246 
	`__TBB_ASSERT
–
£gmít_vÆue
 !
	`£gmít_nŸ_u£d
(), "index is beingállocated" );

1247  (–
£gmít_vÆue
.
poöãr
<
T
>()))[
j
];

1248 
	}
}

1250 
	gãm∂©e
<
ty≥«me
 
	gT
, 
˛ass
 
	gA
>

1251 
	gT
& 
	gc⁄cuºít_ve˘‹
<T, 
	gA
>::
	$öã∫Æ_subs¸ùt_wôh_ex˚±i⁄s
–
size_ty≥
 
ödex
 ) const {

1252 if–
ödex
 >
my_óæy_size
 )

1253 
öã∫Æ
::
	`throw_ex˚±i⁄
(öã∫Æ::
eid_out_of_ønge
);

1254 
size_ty≥
 
j
 = 
ödex
;

1255 
£gmít_ödex_t
 
k
 = 
	`£gmít_ba£_ödex_of
–
j
 );

1257 if–
my_£gmít
.
lﬂd
<
acquúe
>(Ë=
my_°‹age
 && 
k
 >
poöãrs_≥r_sh‹t_èbÀ
 )

1258 
öã∫Æ
::
	`throw_ex˚±i⁄
(öã∫Æ::
eid_£gmít_ønge_îr‹
);

1263 
£gmít_vÆue_t
 
£gmít_vÆue
 = 
my_£gmít
[
k
].
ãm∂©e
 
lﬂd
<
ªœxed
>();

1264 
	`íf‹˚_£gmít_Æloˇãd
(
£gmít_vÆue
, 
öã∫Æ
::
eid_ödex_ønge_îr‹
);

1265  (
£gmít_vÆue
.
poöãr
<
T
>())[
j
];

1266 
	}
}

1268 
	gãm∂©e
<
ty≥«me
 
	gT
, 
˛ass
 
	gA
>Åem∂©e<˛as†
	gI
>

1269 
	gc⁄cuºít_ve˘‹
<
	gT
, 
	gA
>::
	$öã∫Æ_assign_ôî©‹s
(
I
 
fú°
, I 
œ°
) {

1270 
	`__TBB_ASSERT
(
my_óæy_size
 =0, 
NULL
);

1271 
size_ty≥
 
n
 = 
°d
::
	`di°™˚
(
fú°
, 
œ°
);

1272 if–!
n
 ) ;

1273 
	`öã∫Æ_ª£rve
(
n
, (
T
), 
	`max_size
());

1274 
my_óæy_size
 = 
n
;

1275 
£gmít_ödex_t
 
k
 = 0;

1277 
size_ty≥
 
sz
 = 
	`£gmít_size
–
my_fú°_block
 );

1278  
sz
 < 
n
 ) {

1279 
öã∫Æ_lo›_guide
 
	`lo›
(
sz
, 
my_£gmít
[
k
].
ãm∂©e
 
lﬂd
<
ªœxed
>().ãm∂©ê
poöãr
<>());

1280 
lo›
.
	`ôî©e
(
fú°
);

1281 
n
 -
sz
;

1282 if–!
k
 ) k = 
my_fú°_block
;

1283 { ++
k
; 
sz
 <<= 1; }

1285 
öã∫Æ_lo›_guide
 
	`lo›
(
n
, 
my_£gmít
[
k
].
ãm∂©e
 
lﬂd
<
ªœxed
>().ãm∂©ê
poöãr
<>());

1286 
lo›
.
	`ôî©e
(
fú°
);

1287 
	}
}

1289 
	gãm∂©e
<
ty≥«me
 
	gT
, 
˛ass
 
	gA
>

1290 
	gc⁄cuºít_ve˘‹
<
	gT
, 
	gA
>::
	$öôülize_¨øy
–* 
begö
, c⁄° *, 
size_ty≥
 
n
 ) {

1291 
öã∫Æ_lo›_guide
 
	`lo›
(
n
, 
begö
); 
lo›
.
	`öô
();

1292 
	}
}

1294 
	gãm∂©e
<
ty≥«me
 
	gT
, 
˛ass
 
	gA
>

1295 
	gc⁄cuºít_ve˘‹
<
	gT
, 
	gA
>::
	$öôülize_¨øy_by
–* 
begö
, c⁄° *
§c
, 
size_ty≥
 
n
 ) {

1296 
öã∫Æ_lo›_guide
 
	`lo›
(
n
, 
begö
); 
lo›
.
	`öô
(
§c
);

1297 
	}
}

1299 
	gãm∂©e
<
ty≥«me
 
	gT
, 
˛ass
 
	gA
>

1300 
	gc⁄cuºít_ve˘‹
<
	gT
, 
	gA
>::
	$c›y_¨øy
–* 
d°
, c⁄° * 
§c
, 
size_ty≥
 
n
 ) {

1301 
öã∫Æ_lo›_guide
 
	`lo›
(
n
, 
d°
); 
lo›
.
	`c›y
(
§c
);

1302 
	}
}

1304 #i‡
__TBB_CPP11_RVALUE_REF_PRESENT


1305 
	gãm∂©e
<
ty≥«me
 
	gT
, 
˛ass
 
	gA
>

1306 
	gc⁄cuºít_ve˘‹
<
	gT
, 
	gA
>::
	$move_¨øy
–* 
d°
, c⁄° * 
§c
, 
size_ty≥
 
n
 ) {

1307 
öã∫Æ_lo›_guide
 
	`lo›
(
n
, 
d°
); 
lo›
.
	`move_c⁄°ru˘
(
§c
);

1308 
	}
}

1309 
	gãm∂©e
<
ty≥«me
 
	gT
, 
˛ass
 
	gA
>

1310 
	gc⁄cuºít_ve˘‹
<
	gT
, 
	gA
>::
	$move_assign_¨øy
–* 
d°
, c⁄° * 
§c
, 
size_ty≥
 
n
 ) {

1311 
öã∫Æ_lo›_guide
 
	`lo›
(
n
, 
d°
); 
lo›
.
	`move_assign
(
§c
);

1312 
	}
}

1315 #i‡
__TBB_MOVE_IF_NOEXCEPT_PRESENT


1316 
	gãm∂©e
<
ty≥«me
 
	gT
, 
˛ass
 
	gA
>

1317 
	gc⁄cuºít_ve˘‹
<
	gT
, 
	gA
>::
	$move_¨øy_if_n€x˚±
–* 
d°
, c⁄° * 
§c
, 
size_ty≥
 
n
 ) {

1318 
öã∫Æ_lo›_guide
 
	`lo›
(
n
, 
d°
); 
lo›
.
	`move_c⁄°ru˘_if_n€x˚±
(
§c
);

1319 
	}
}

1322 
	gãm∂©e
<
ty≥«me
 
	gT
, 
˛ass
 
	gA
>

1323 
	gãm∂©e
<
ty≥«me
 
	gI
>

1324 
	gc⁄cuºít_ve˘‹
<
	gT
, 
	gA
>::
	$c›y_ønge
–* 
d°
, c⁄° * 
p_ty≥_îa£d_ôî©‹
, 
size_ty≥
 
n
 ){

1325 
öã∫Æ_lo›_guide
 
	`lo›
(
n
, 
d°
);

1326 
lo›
.
	`ôî©e
–*(
°©ic_ˇ°
<
I
*>(
c⁄°_ˇ°
<*>(
p_ty≥_îa£d_ôî©‹
))) );

1327 
	}
}

1329 
	gãm∂©e
<
ty≥«me
 
	gT
, 
˛ass
 
	gA
>

1330 
	gc⁄cuºít_ve˘‹
<
	gT
, 
	gA
>::
	$assign_¨øy
–* 
d°
, c⁄° * 
§c
, 
size_ty≥
 
n
 ) {

1331 
öã∫Æ_lo›_guide
 
	`lo›
(
n
, 
d°
); 
lo›
.
	`assign
(
§c
);

1332 
	}
}

1334 #i‡
deföed
(
_MSC_VER
Ë&& !
	$deföed
(
__INTEL_COMPILER
)

1336 #¥agm®
	$w¨nög
 (
push
)

1337 #¥agm®
	$w¨nög
 (
dißbÀ
: 4189)

1339 
ãm∂©e
<
ty≥«me
 
T
, 
˛ass
 
A
>

1340 
c⁄cuºít_ve˘‹
<
T
, 
A
>::
	$de°roy_¨øy
–* 
begö
, 
size_ty≥
 
n
 ) {

1341 
T
* 
¨øy
 = 
°©ic_ˇ°
<T*>(
begö
);

1342  
size_ty≥
 
j
=
n
; j>0; --j )

1343 
¨øy
[
j
-1].~
	`T
();

1344 
	}
}

1345 #i‡
deföed
(
_MSC_VER
Ë&& !
	$deföed
(
__INTEL_COMPILER
)

1346 #¥agm®
	$w¨nög
 (
p›
)

1350 
ãm∂©e
<
ty≥«me
 
T
, 
˛ass
 
A1
, cœs†
A2
>

1351 
ölöe
 
boﬁ
 
›î©‹
==(c⁄° 
c⁄cuºít_ve˘‹
<
T
, 
A1
> &
a
, c⁄° c⁄cuºít_ve˘‹<T, 
A2
> &
b
) {

1354 if(
a
.
	`size
(Ë!
b
.size()Ë 
Ál£
;

1355 
ty≥«me
 
c⁄cuºít_ve˘‹
<
T
, 
A1
>::
c⁄°_ôî©‹
 
	`i
(
a
.
	`begö
());

1356 
ty≥«me
 
c⁄cuºít_ve˘‹
<
T
, 
A2
>::
c⁄°_ôî©‹
 
	`j
(
b
.
	`begö
());

1357 ; 
i
 !
a
.
	`íd
(); ++i, ++
j
)

1358 if–!(*
i
 =*
j
ËË 
Ál£
;

1359  
åue
;

1360 
	}
}

1362 
	gãm∂©e
<
ty≥«me
 
	gT
, 
˛ass
 
	gA1
, cœs†
	gA2
>

1363 
ölöe
 
boﬁ
 
	g›î©‹
!=(c⁄° 
c⁄cuºít_ve˘‹
<
T
, 
	gA1
> &
	ga
, c⁄° 
	gc⁄cuºít_ve˘‹
<
	gT
, 
	gA2
> &
	gb
)

1364 {  !(
	ga
 =
b
); }

1366 
	gãm∂©e
<
ty≥«me
 
	gT
, 
˛ass
 
	gA1
, cœs†
	gA2
>

1367 
ölöe
 
boﬁ
 
	g›î©‹
<(c⁄° 
	gc⁄cuºít_ve˘‹
<
	gT
, 
	gA1
> &
	ga
, c⁄° c⁄cuºít_ve˘‹<T, 
	gA2
> &
	gb
)

1368 {  (
	g°d
::
Àxicogøphiˇl_com∑ª
(
a
.
begö
(),á.
íd
(), 
b
.begin(), b.end())); }

1370 
	gãm∂©e
<
ty≥«me
 
	gT
, 
˛ass
 
	gA1
, cœs†
	gA2
>

1371 
ölöe
 
boﬁ
 
	g›î©‹
>(c⁄° 
	gc⁄cuºít_ve˘‹
<
	gT
, 
	gA1
> &
	ga
, c⁄° c⁄cuºít_ve˘‹<T, 
	gA2
> &
	gb
)

1372 {  
	gb
 < 
	ga
; }

1374 
	gãm∂©e
<
ty≥«me
 
	gT
, 
˛ass
 
	gA1
, cœs†
	gA2
>

1375 
ölöe
 
boﬁ
 
	g›î©‹
<=(c⁄° 
c⁄cuºít_ve˘‹
<
T
, 
	gA1
> &
	ga
, c⁄° 
	gc⁄cuºít_ve˘‹
<
	gT
, 
	gA2
> &
	gb
)

1376 {  !(
	gb
 < 
	ga
); }

1378 
	gãm∂©e
<
ty≥«me
 
	gT
, 
˛ass
 
	gA1
, cœs†
	gA2
>

1379 
ölöe
 
boﬁ
 
	g›î©‹
>=(c⁄° 
c⁄cuºít_ve˘‹
<
T
, 
	gA1
> &
	ga
, c⁄° 
	gc⁄cuºít_ve˘‹
<
	gT
, 
	gA2
> &
	gb
)

1380 {  !(
	ga
 < 
	gb
); }

1382 
	gãm∂©e
<
ty≥«me
 
	gT
, 
˛ass
 
	gA
>

1383 
ölöe
 
sw≠
(
c⁄cuºít_ve˘‹
<
T
, 
A
> &
a
, c⁄cuºít_ve˘‹<T, A> &
b
)

1384 { 
	ga
.
sw≠
–
b
 ); }

1388 #i‡
deföed
(
_MSC_VER
Ë&& !deföed(
__INTEL_COMPILER
)

1389 #¥agm®
w¨nög
 (
p›
)

1393 #unde‡
__TBB_c⁄cuºít_ve˘‹_H_ö˛ude_¨ó


1394 
	~"öã∫Æ/_w¨nög_suµªss_dißbÀ_nŸi˚.h
"

	@/usr/include/tbb/critical_section.h

17 
	~"öã∫Æ/_dïªˇãd_hódî_mesßge_gu¨d.h
"

19 #i‡!
deföed
(
__TBB_show_dïªˇti⁄_mesßge_¸ôiˇl_£˘i⁄_H
Ë&& deföed(
__TBB_show_dïªˇãd_hódî_mesßge
)

20 
	#__TBB_show_dïªˇti⁄_mesßge_¸ôiˇl_£˘i⁄_H


	)

21 #¥agm®
mesßge
("TBB Warning:Åbb/critical_section.h is deprecated. For details,Ölease see Deprecated Featuresáppendix inÅhe TBBÑeference manual.")

24 #i‡
deföed
(
__TBB_show_dïªˇãd_hódî_mesßge
)

25 #unde‡
__TBB_show_dïªˇãd_hódî_mesßge


28 #i‚de‡
_TBB_CRITICAL_SECTION_H_


29 
	#_TBB_CRITICAL_SECTION_H_


	)

31 
	#__TBB_¸ôiˇl_£˘i⁄_H_ö˛ude_¨ó


	)

32 
	~"öã∫Æ/_w¨nög_suµªss_íabÀ_nŸi˚.h
"

34 #i‡
_WIN32
||
_WIN64


35 
	~"machöe/wödows_≠i.h
"

37 
	~<±hªad.h
>

38 
	~<î∫o.h
>

41 
	~"tbb_°ddef.h
"

42 
	~"tbb_thªad.h
"

43 
	~"tbb_ex˚±i⁄.h
"

45 
	~"tbb_¥ofûög.h
"

47 
«me•a˚
 
	gtbb
 {

49 
«me•a˚
 
	göã∫Æ
 {

50 ˛as†
	c¸ôiˇl_£˘i⁄_v4
 : 
öã∫Æ
::
no_c›y
 {

51 #i‡
_WIN32
||
_WIN64


52 
CRITICAL_SECTION
 
my_im∂
;

54 
±hªad_muãx_t
 
	gmy_im∂
;

56 
	gtbb_thªad
::
id
 
my_tid
;

57 
	gpublic
:

59 
__TBB_EXPORTED_METHOD
 
öã∫Æ_c⁄°ru˘
();

61 
¸ôiˇl_£˘i⁄_v4
() {

62 #i‡
_WIN32
||
_WIN64


63 
InôülizeCrôiˇlSe˘i⁄Ex
–&
my_im∂
, 4000, 0 );

65 
±hªad_muãx_öô
(&
my_im∂
, 
NULL
);

67 
öã∫Æ_c⁄°ru˘
();

70 ~
¸ôiˇl_£˘i⁄_v4
() {

71 
__TBB_ASSERT
(
my_tid
 =
tbb_thªad
::
id
(), "Destroyingá still-held critical section");

72 #i‡
_WIN32
||
_WIN64


73 
DñëeCrôiˇlSe˘i⁄
(&
my_im∂
);

75 
±hªad_muãx_de°roy
(&
my_im∂
);

79 ˛as†
	csc›ed_lock
 : 
öã∫Æ
::
no_c›y
 {

80 
¥iv©e
:

81 
¸ôiˇl_£˘i⁄_v4
 &
my_¸ô
;

82 
	gpublic
:

83 
sc›ed_lock
–
¸ôiˇl_£˘i⁄_v4
& 
lock_me
Ë:
my_¸ô
(lock_me) {

84 
my_¸ô
.
lock
();

87 ~
sc›ed_lock
() {

88 
	gmy_¸ô
.
u∆ock
();

92 
lock
() {

93 
	gtbb_thªad
::
id
 
loˇl_tid
 = 
this_tbb_thªad
::
gë_id
();

94 if(
	gloˇl_tid
 =
my_tid
Ë
throw_ex˚±i⁄
–
eid_im¥›î_lock
 );

95 #i‡
_WIN32
||
_WIN64


96 
E¡îCrôiˇlSe˘i⁄
–&
my_im∂
 );

98 
	grvÆ
 = 
±hªad_muãx_lock
(&
my_im∂
);

99 
__TBB_ASSERT_EX
(!
rvÆ
, "critical_section::lock:Öthread_mutex_lock failed");

101 
__TBB_ASSERT
(
my_tid
 =
tbb_thªad
::
id
(), 
NULL
);

102 
	gmy_tid
 = 
loˇl_tid
;

105 
boﬁ
 
åy_lock
() {

106 
boﬁ
 
	ggŸlock
;

107 
	gtbb_thªad
::
id
 
loˇl_tid
 = 
this_tbb_thªad
::
gë_id
();

108 if(
	gloˇl_tid
 =
my_tid
Ë 
Ál£
;

109 #i‡
_WIN32
||
_WIN64


110 
	ggŸlock
 = 
TryE¡îCrôiˇlSe˘i⁄
–&
my_im∂
 ) != 0;

112 
	grvÆ
 = 
±hªad_muãx_åylock
(&
my_im∂
);

114 
__TBB_ASSERT
(
rvÆ
 =0 ||ÑvÆ =
EBUSY
, "critical_section::trylock:Öthread_mutex_trylock failed");

115 
	ggŸlock
 = 
rvÆ
 == 0;

117 if(
	ggŸlock
) {

118 
	gmy_tid
 = 
loˇl_tid
;

120  
	ggŸlock
;

123 
u∆ock
() {

124 
__TBB_ASSERT
(
this_tbb_thªad
::
gë_id
(Ë=
my_tid
, "thread unlocking critical_section isÇotÅhreadÅhatÜocked it");

125 
	gmy_tid
 = 
tbb_thªad
::
id
();

126 #i‡
_WIN32
||
_WIN64


127 
LóveCrôiˇlSe˘i⁄
–&
my_im∂
 );

129 
	grvÆ
 = 
±hªad_muãx_u∆ock
(&
my_im∂
);

130 
__TBB_ASSERT_EX
(!
rvÆ
, "critical_section::unlock:Öthread_mutex_unlock failed");

134 c⁄° 
boﬁ
 
	gis_rw_muãx
 = 
Ál£
;

135 c⁄° 
boﬁ
 
	gis_ªcursive_muãx
 = 
Ál£
;

136 c⁄° 
boﬁ
 
	gis_Áú_muãx
 = 
åue
;

139 
__TBB_DEPRECATED_VERBOSE_MSG
("tbb::¸ôiˇl_£˘i⁄ i†dïªˇãd, u£ std::muãx"Ë
	göã∫Æ
::
	t¸ôiˇl_£˘i⁄_v4
 
	t¸ôiˇl_£˘i⁄
;

141 
__TBB_DEFINE_PROFILING_SET_NAME
(
¸ôiˇl_£˘i⁄
)

144 
	~"öã∫Æ/_w¨nög_suµªss_dißbÀ_nŸi˚.h
"

145 #unde‡
__TBB_¸ôiˇl_£˘i⁄_H_ö˛ude_¨ó


	@/usr/include/tbb/internal/_concurrent_queue_impl.h

17 #i‚de‡
__TBB__c⁄cuºít_queue_im∂_H


18 
	#__TBB__c⁄cuºít_queue_im∂_H


	)

20 #i‚de‡
__TBB_c⁄cuºít_queue_H


21 #îr‹ 
Do
 
nŸ
 #ö˛udê
this
 
öã∫Æ
 
fûe
 
dúe˘ly
; 
u£
 
public
 
TBB
 
hódîs
 
ö°ód
.

24 
	~"../tbb_°ddef.h
"

25 
	~"../tbb_machöe.h
"

26 
	~"../©omic.h
"

27 
	~"../•ö_muãx.h
"

28 
	~"../ˇche_Æig√d_Æloˇt‹.h
"

29 
	~"../tbb_ex˚±i⁄.h
"

30 
	~"../tbb_¥ofûög.h
"

31 
	~<√w
>

32 #ö˛udê
__TBB_STD_SWAP_HEADER


33 
	~<ôî©‹
>

35 
«me•a˚
 
	gtbb
 {

37 #i‡!
__TBB_TEMPLATE_FRIENDS_BROKEN


40 
«me•a˚
 
	g°ri˘_µl
 {

41 
	gãm∂©e
<
ty≥«me
 
	gT
,Åy≥«mê
	gA
> 
˛ass
 
	gc⁄cuºít_queue
;

44 
	gãm∂©e
<
ty≥«me
 
	gT
,Åy≥«mê
	gA
> 
˛ass
 
	gc⁄cuºít_bounded_queue
;

49 
«me•a˚
 
	g°ri˘_µl
 {

52 
«me•a˚
 
	göã∫Æ
 {

54 
usög
 
«me•a˚
 
	gtbb
::
öã∫Æ
;

56 
size_t
 
	ttickë
;

58 
	gãm∂©e
<
ty≥«me
 
	gT
> 
˛ass
 
	gmi¸o_queue
 ;

59 
	gãm∂©e
<
ty≥«me
 
	gT
> 
˛ass
 
	gmi¸o_queue_p›_föÆizî
 ;

60 
	gãm∂©e
<
ty≥«me
 
	gT
> 
˛ass
 
	gc⁄cuºít_queue_ba£_v3
;

61 
	gãm∂©e
<
ty≥«me
 
	gT
> 
	gc⁄cuºít_queue_ªp
;

67 
	gc⁄cuºít_queue_ªp_ba£
 : 
no_c›y
 {

68 
ãm∂©e
<
ty≥«me
 
T
> 
‰õnd
 
˛ass
 
mi¸o_queue
;

69 
	gãm∂©e
<
ty≥«me
 
	gT
> 
‰õnd
 
˛ass
 
	gc⁄cuºít_queue_ba£_v3
;

71 
	g¥Ÿe˘ed
:

73 c⁄° 
size_t
 
phi
 = 3;

75 
	gpublic
:

77 c⁄° 
size_t
 
n_queue
 = 8;

80 
	s∑ge
 {

81 
∑ge
* 
	g√xt
;

82 
uöçå_t
 
	gmask
;

85 
	g©omic
<
	gtickë
> 
	ghód_cou¡î
;

86 
	g∑d1
[
NFS_MaxLöeSize
-(
©omic
<
tickë
>)];

87 
	g©omic
<
	gtickë
> 
	gèû_cou¡î
;

88 
	g∑d2
[
NFS_MaxLöeSize
-(
©omic
<
tickë
>)];

91 
size_t
 
	gôems_≥r_∑ge
;

94 
size_t
 
	gôem_size
;

97 
	g©omic
<
	gsize_t
> 
	gn_övÆid_íåõs
;

99 
	g∑d3
[
NFS_MaxLöeSize
-(
size_t
)-(size_t)-(
©omic
<size_t>)];

102 
ölöe
 
boﬁ
 
is_vÆid_∑ge
(c⁄° 
c⁄cuºít_queue_ªp_ba£
::
∑ge
* 
p
) {

103  
uöçå_t
(
p
)>1;

110 ˛as†
	cc⁄cuºít_queue_∑ge_Æloˇt‹


112 
	gãm∂©e
<
ty≥«me
 
	gT
> 
‰õnd
 
˛ass
 
	gmi¸o_queue
 ;

113 
	gãm∂©e
<
ty≥«me
 
	gT
> 
‰õnd
 
˛ass
 
	gmi¸o_queue_p›_föÆizî
 ;

114 
	g¥Ÿe˘ed
:

115 
vútuÆ
 ~
c⁄cuºít_queue_∑ge_Æloˇt‹
() {}

116 
¥iv©e
:

117 
vútuÆ
 
c⁄cuºít_queue_ªp_ba£
::
∑ge
* 
Æloˇã_∑ge
() = 0;

118 
vútuÆ
 
dóŒoˇã_∑ge
–
c⁄cuºít_queue_ªp_ba£
::
∑ge
* 
p
 ) = 0;

121 #i‡
_MSC_VER
 && !
deföed
(
__INTEL_COMPILER
)

123 #¥agm®
w¨nög
–
push
 )

124 #¥agm®
w¨nög
–
dißbÀ
: 4146 )

130 
	gãm∂©e
<
ty≥«me
 
	gT
>

131 ˛as†
	cmi¸o_queue
 : 
no_c›y
 {

132 
public
:

133 (*
ôem_c⁄°ru˘‹_t
)(
	tT
* 
	tloˇti⁄
, c⁄° * 
	t§c
);

134 
	g¥iv©e
:

135 
c⁄cuºít_queue_ªp_ba£
::
	t∑ge
Öage;

138 ˛as†
	cde°royî
: 
no_c›y
 {

139 
T
& 
my_vÆue
;

140 
	gpublic
:

141 
de°royî
–
T
& 
vÆue
 ) : 
my_vÆue
(value) {}

142 ~
de°royî
(Ë{
my_vÆue
.~
T
();}

145 
c›y_ôem
–
∑ge
& 
d°
, 
size_t
 
dödex
, c⁄° * 
§c
, 
ôem_c⁄°ru˘‹_t
 
c⁄°ru˘_ôem
 ) {

146 
c⁄°ru˘_ôem
–&
gë_ªf
(
d°
, 
dödex
), 
§c
 );

149 
c›y_ôem
–
∑ge
& 
d°
, 
size_t
 
dödex
, c⁄°Öage& 
§c
, size_à
södex
,

150 
ôem_c⁄°ru˘‹_t
 
c⁄°ru˘_ôem
 )

152 
	gT
& 
	g§c_ôem
 = 
gë_ªf
–
c⁄°_ˇ°
<
∑ge
&>(
§c
), 
södex
 );

153 
c⁄°ru˘_ôem
–&
gë_ªf
(
d°
, 
dödex
), 
°©ic_ˇ°
<c⁄° *>(&
§c_ôem
) );

156 
assign_™d_de°roy_ôem
–* 
d°
, 
∑ge
& 
§c
, 
size_t
 
ödex
 ) {

157 
	gT
& 
	g‰om
 = 
gë_ªf
(
§c
,
ödex
);

158 
de°royî
 
d
(
‰om
);

159 *
	g°©ic_ˇ°
<
	gT
*>(
	gd°
Ë
tbb
::
öã∫Æ
::
move
–
‰om
 );

162 
•ö_waô_u¡û_my_tu∫
–
©omic
<
tickë
>& 
cou¡î
,Åickë 
k
, 
c⁄cuºít_queue_ªp_ba£
& 
rb
 ) const ;

164 
	gpublic
:

165 
‰õnd
 
˛ass
 
mi¸o_queue_p›_föÆizî
<
T
>;

167 
	g∑dded_∑ge
: 
∑ge
 {

169 
∑dded_∑ge
();

171 
	g›î©‹
=–c⁄° 
∑dded_∑ge
& );

173 
T
 
	gœ°
;

176 
	gT
& 
gë_ªf
–
∑ge
& 
p
, 
size_t
 
ödex
 ) {

177  (&
	g°©ic_ˇ°
<
	g∑dded_∑ge
*>(°©ic_ˇ°<*>(&
	gp
))->
	gœ°
)[
ödex
];

180 
	g©omic
<
	g∑ge
*> 
	ghód_∑ge
;

181 
	g©omic
<
	gtickë
> 
	ghód_cou¡î
;

183 
	g©omic
<
	g∑ge
*> 
	gèû_∑ge
;

184 
	g©omic
<
	gtickë
> 
	gèû_cou¡î
;

186 
•ö_muãx
 
	g∑ge_muãx
;

188 
push
–c⁄° * 
ôem
, 
tickë
 
k
, 
c⁄cuºít_queue_ba£_v3
<
T
>& 
ba£
,

189 
ôem_c⁄°ru˘‹_t
 
c⁄°ru˘_ôem
 ) ;

191 
boﬁ
 
p›
–* 
d°
, 
tickë
 
k
, 
c⁄cuºít_queue_ba£_v3
<
T
>& 
ba£
 ) ;

193 
	gmi¸o_queue
& 
assign
–c⁄° 
mi¸o_queue
& 
§c
, 
c⁄cuºít_queue_ba£_v3
<
T
>& 
ba£
,

194 
ôem_c⁄°ru˘‹_t
 
c⁄°ru˘_ôem
 ) ;

196 
∑ge
* 
make_c›y
–
c⁄cuºít_queue_ba£_v3
<
T
>& 
ba£
, c⁄°Öage* 
§c_∑ge
, 
size_t
 
begö_ö_∑ge
,

197 
size_t
 
íd_ö_∑ge
, 
tickë
& 
g_ödex
, 
ôem_c⁄°ru˘‹_t
 
c⁄°ru˘_ôem
 ) ;

199 
övÆid©e_∑ge_™d_ªthrow
–
tickë
 
k
 ) ;

202 
	gãm∂©e
<
ty≥«me
 
	gT
>

203 
	gmi¸o_queue
<
	gT
>::
•ö_waô_u¡û_my_tu∫
–
©omic
<
tickë
>& 
cou¡î
,Åickë 
k
, 
c⁄cuºít_queue_ªp_ba£
& 
rb
 ) const {

204  
©omic_backoff
 
b
(
åue
);;
	gb
.
∑u£
() ) {

205 
tickë
 
	gc
 = 
cou¡î
;

206 if–
	gc
==
k
 ) ;

207 if–
	gc
&1 ) {

208 ++
	grb
.
	gn_övÆid_íåõs
;

209 
throw_ex˚±i⁄
–
eid_bad_œ°_Æloc
 );

214 
	gãm∂©e
<
ty≥«me
 
	gT
>

215 
	gmi¸o_queue
<
	gT
>::
push
–c⁄° * 
ôem
, 
tickë
 
k
, 
c⁄cuºít_queue_ba£_v3
<
T
>& 
ba£
,

216 
ôem_c⁄°ru˘‹_t
 
c⁄°ru˘_ôem
 )

218 
	gk
 &-
c⁄cuºít_queue_ªp_ba£
::
n_queue
;

219 
∑ge
* 
	gp
 = 
NULL
;

220 
size_t
 
	gödex
 = 
modulo_powî_of_two
–
k
/
c⁄cuºít_queue_ªp_ba£
::
n_queue
, 
ba£
.
my_ªp
->
ôems_≥r_∑ge
);

221 if–!
	gödex
 ) {

222 
	g__TBB_TRY
 {

223 
	gc⁄cuºít_queue_∑ge_Æloˇt‹
& 
	g∑
 = 
ba£
;

224 
	gp
 = 
∑
.
Æloˇã_∑ge
();

225 } 
__TBB_CATCH
 (...) {

226 ++
	gba£
.
	gmy_ªp
->
	gn_övÆid_íåõs
;

227 
övÆid©e_∑ge_™d_ªthrow
–
k
 );

229 
	gp
->
	gmask
 = 0;

230 
	gp
->
	g√xt
 = 
NULL
;

233 if–
	gèû_cou¡î
 !
k
 ) 
•ö_waô_u¡û_my_tu∫
–
èû_cou¡î
, k, *
ba£
.
my_ªp
 );

234 
ˇŒ_ôt_nŸify
(
acquúed
, &
èû_cou¡î
);

236 if–
	gp
 ) {

237 
	g•ö_muãx
::
sc›ed_lock
 
lock
–
∑ge_muãx
 );

238 
∑ge
* 
	gq
 = 
èû_∑ge
;

239 if–
is_vÆid_∑ge
(
q
) )

240 
	gq
->
	g√xt
 = 
p
;

242 
	ghód_∑ge
 = 
p
;

243 
	gèû_∑ge
 = 
p
;

245 
	gp
 = 
èû_∑ge
;

248 
	g__TBB_TRY
 {

249 
c›y_ôem
–*
p
, 
ödex
, 
ôem
, 
c⁄°ru˘_ôem
 );

251 
ôt_hide_°‹e_w‹d
(
p
->
mask
,Ö->mask | 
uöçå_t
(1)<<
ödex
);

252 
ˇŒ_ôt_nŸify
(
ªÀasög
, &
èû_cou¡î
);

253 
	gèû_cou¡î
 +
c⁄cuºít_queue_ªp_ba£
::
n_queue
;

254 } 
__TBB_CATCH
 (...) {

255 ++
	gba£
.
	gmy_ªp
->
	gn_övÆid_íåõs
;

256 
ˇŒ_ôt_nŸify
(
ªÀasög
, &
èû_cou¡î
);

257 
	gèû_cou¡î
 +
c⁄cuºít_queue_ªp_ba£
::
n_queue
;

258 
__TBB_RETHROW
();

262 
	gãm∂©e
<
ty≥«me
 
	gT
>

263 
boﬁ
 
	gmi¸o_queue
<
	gT
>::
p›
–* 
d°
, 
tickë
 
k
, 
c⁄cuºít_queue_ba£_v3
<
T
>& 
ba£
 ) {

264 
	gk
 &-
c⁄cuºít_queue_ªp_ba£
::
n_queue
;

265 if–
	ghód_cou¡î
!=
k
 ) 
•ö_waô_u¡û_eq
–
hód_cou¡î
, k );

266 
ˇŒ_ôt_nŸify
(
acquúed
, &
hód_cou¡î
);

267 if–
	gèû_cou¡î
==
k
 ) 
•ö_waô_whûe_eq
–
èû_cou¡î
, k );

268 
ˇŒ_ôt_nŸify
(
acquúed
, &
èû_cou¡î
);

269 
∑ge
 *
	gp
 = 
hód_∑ge
;

270 
__TBB_ASSERT
–
p
, 
NULL
 );

271 
size_t
 
	gödex
 = 
modulo_powî_of_two
–
k
/
c⁄cuºít_queue_ªp_ba£
::
n_queue
, 
ba£
.
my_ªp
->
ôems_≥r_∑ge
 );

272 
boﬁ
 
	gsuc˚ss
 = 
Ál£
;

274 
	gmi¸o_queue_p›_föÆizî
<
	gT
> 
föÆizî
–*
this
, 
ba£
, 
k
+
c⁄cuºít_queue_ªp_ba£
::
n_queue
, 
ödex
==ba£.
my_ªp
->
ôems_≥r_∑ge
-1 ? 
p
 : 
NULL
 );

275 if–
	gp
->
	gmask
 & 
uöçå_t
(1)<<
	gödex
 ) {

276 
	gsuc˚ss
 = 
åue
;

277 
assign_™d_de°roy_ôem
–
d°
, *
p
, 
ödex
 );

279 --
	gba£
.
	gmy_ªp
->
	gn_övÆid_íåõs
;

282  
	gsuc˚ss
;

285 
	gãm∂©e
<
ty≥«me
 
	gT
>

286 
	gmi¸o_queue
<
	gT
>& mi¸o_queue<T>::
assign
–c⁄° 
mi¸o_queue
<
T
>& 
§c
, 
c⁄cuºít_queue_ba£_v3
<T>& 
ba£
,

287 
ôem_c⁄°ru˘‹_t
 
c⁄°ru˘_ôem
 )

289 
	ghód_cou¡î
 = 
§c
.
hód_cou¡î
;

290 
	gèû_cou¡î
 = 
§c
.
èû_cou¡î
;

292 c⁄° 
∑ge
* 
	g§˝
 = 
§c
.
hód_∑ge
;

293 if–
is_vÆid_∑ge
(
§˝
) ) {

294 
tickë
 
	gg_ödex
 = 
hód_cou¡î
;

295 
	g__TBB_TRY
 {

296 
size_t
 
	gn_ôems
 = (
èû_cou¡î
-
hód_cou¡î
)/
c⁄cuºít_queue_ªp_ba£
::
n_queue
;

297 
size_t
 
	gödex
 = 
modulo_powî_of_two
–
hód_cou¡î
/
c⁄cuºít_queue_ªp_ba£
::
n_queue
, 
ba£
.
my_ªp
->
ôems_≥r_∑ge
 );

298 
size_t
 
	gíd_ö_fú°_∑ge
 = (
ödex
+
n_ôems
<
ba£
.
my_ªp
->
ôems_≥r_∑ge
)?(index+n_items):base.my_rep->items_per_page;

300 
	ghód_∑ge
 = 
make_c›y
–
ba£
, 
§˝
, 
ödex
, 
íd_ö_fú°_∑ge
, 
g_ödex
, 
c⁄°ru˘_ôem
 );

301 
∑ge
* 
	gcur_∑ge
 = 
hód_∑ge
;

303 if–
	g§˝
 !
§c
.
èû_∑ge
 ) {

304  
§˝
 = sr˝->
√xt
; 
	g§˝
!=
§c
.
èû_∑ge
; srcp=srcp->next ) {

305 
cur_∑ge
->
√xt
 = 
make_c›y
–
ba£
, 
§˝
, 0, ba£.
my_ªp
->
ôems_≥r_∑ge
, 
g_ödex
, 
c⁄°ru˘_ôem
 );

306 
	gcur_∑ge
 = 
cur_∑ge
->
√xt
;

309 
__TBB_ASSERT
–
§˝
==
§c
.
èû_∑ge
, 
NULL
 );

310 
size_t
 
	gœ°_ödex
 = 
modulo_powî_of_two
–
èû_cou¡î
/
c⁄cuºít_queue_ªp_ba£
::
n_queue
, 
ba£
.
my_ªp
->
ôems_≥r_∑ge
 );

311 if–
	gœ°_ödex
==0 ) 
œ°_ödex
 = 
ba£
.
my_ªp
->
ôems_≥r_∑ge
;

313 
	gcur_∑ge
->
	g√xt
 = 
make_c›y
–
ba£
, 
§˝
, 0, 
œ°_ödex
, 
g_ödex
, 
c⁄°ru˘_ôem
 );

314 
	gcur_∑ge
 = 
cur_∑ge
->
√xt
;

316 
	gèû_∑ge
 = 
cur_∑ge
;

317 } 
__TBB_CATCH
 (...) {

318 
övÆid©e_∑ge_™d_ªthrow
–
g_ödex
 );

321 
	ghód_∑ge
 = 
èû_∑ge
 = 
NULL
;

323  *
	gthis
;

326 
	gãm∂©e
<
ty≥«me
 
	gT
>

327 
	gmi¸o_queue
<
	gT
>::
övÆid©e_∑ge_™d_ªthrow
–
tickë
 
k
 ) {

329 
∑ge
* 
övÆid_∑ge
 = (∑ge*)
uöçå_t
(1);

331 
	g•ö_muãx
::
sc›ed_lock
 
lock
–
∑ge_muãx
 );

332 
ôt_°‹e_w‹d_wôh_ªÀa£
(
èû_cou¡î
, 
k
+
c⁄cuºít_queue_ªp_ba£
::
n_queue
+1);

333 
∑ge
* 
	gq
 = 
èû_∑ge
;

334 if–
is_vÆid_∑ge
(
q
) )

335 
	gq
->
	g√xt
 = 
övÆid_∑ge
;

337 
	ghód_∑ge
 = 
övÆid_∑ge
;

338 
	gèû_∑ge
 = 
övÆid_∑ge
;

340 
__TBB_RETHROW
();

343 
	gãm∂©e
<
ty≥«me
 
	gT
>

344 
	gc⁄cuºít_queue_ªp_ba£
::
∑ge
* 
mi¸o_queue
<
T
>::
make_c›y
–
c⁄cuºít_queue_ba£_v3
<T>& 
ba£
,

345 c⁄° 
c⁄cuºít_queue_ªp_ba£
::
∑ge
* 
§c_∑ge
, 
size_t
 
begö_ö_∑ge
, size_à
íd_ö_∑ge
,

346 
tickë
& 
g_ödex
, 
ôem_c⁄°ru˘‹_t
 
c⁄°ru˘_ôem
 )

348 
	gc⁄cuºít_queue_∑ge_Æloˇt‹
& 
	g∑
 = 
ba£
;

349 
∑ge
* 
	g√w_∑ge
 = 
∑
.
Æloˇã_∑ge
();

350 
	g√w_∑ge
->
	g√xt
 = 
NULL
;

351 
	g√w_∑ge
->
	gmask
 = 
§c_∑ge
->
mask
;

352  ; 
	gbegö_ö_∑ge
!=
íd_ö_∑ge
; ++begö_ö_∑ge, ++
	gg_ödex
 )

353 if–
	g√w_∑ge
->
	gmask
 & 
uöçå_t
(1)<<
	gbegö_ö_∑ge
 )

354 
c›y_ôem
–*
√w_∑ge
, 
begö_ö_∑ge
, *
§c_∑ge
, begö_ö_∑ge, 
c⁄°ru˘_ôem
 );

355  
	g√w_∑ge
;

358 
	gãm∂©e
<
ty≥«me
 
	gT
>

359 ˛as†
	cmi¸o_queue_p›_föÆizî
: 
no_c›y
 {

360 
c⁄cuºít_queue_ªp_ba£
::
	t∑ge
Öage;

361 
tickë
 
	gmy_tickë
;

362 
	gmi¸o_queue
<
	gT
>& 
	gmy_queue
;

363 
∑ge
* 
	gmy_∑ge
;

364 
	gc⁄cuºít_queue_∑ge_Æloˇt‹
& 
	gÆloˇt‹
;

365 
	gpublic
:

366 
mi¸o_queue_p›_föÆizî
–
mi¸o_queue
<
T
>& 
queue
, 
c⁄cuºít_queue_ba£_v3
<T>& 
b
, 
tickë
 
k
, 
∑ge
* 
p
 ) :

367 
my_tickë
(
k
), 
my_queue
(
queue
), 
my_∑ge
(
p
), 
Æloˇt‹
(
b
)

369 ~
mi¸o_queue_p›_föÆizî
() ;

372 
	gãm∂©e
<
ty≥«me
 
	gT
>

373 
	gmi¸o_queue_p›_föÆizî
<
	gT
>::~
mi¸o_queue_p›_föÆizî
() {

374 
∑ge
* 
p
 = 
my_∑ge
;

375 if–
is_vÆid_∑ge
(
p
) ) {

376 
	g•ö_muãx
::
sc›ed_lock
 
lock
–
my_queue
.
∑ge_muãx
 );

377 
∑ge
* 
	gq
 = 
p
->
√xt
;

378 
	gmy_queue
.
	ghód_∑ge
 = 
q
;

379 if–!
is_vÆid_∑ge
(
q
) ) {

380 
	gmy_queue
.
	gèû_∑ge
 = 
NULL
;

383 
ôt_°‹e_w‹d_wôh_ªÀa£
(
my_queue
.
hód_cou¡î
, 
my_tickë
);

384 if–
is_vÆid_∑ge
(
p
) ) {

385 
	gÆloˇt‹
.
dóŒoˇã_∑ge
–
p
 );

389 #i‡
_MSC_VER
 && !
deföed
(
__INTEL_COMPILER
)

390 #¥agm®
w¨nög
–
p›
 )

393 
	gãm∂©e
<
ty≥«me
 
	gT
> 
˛ass
 
	gc⁄cuºít_queue_ôî©‹_ªp
 ;

394 
	gãm∂©e
<
ty≥«me
 
	gT
> 
˛ass
 
	gc⁄cuºít_queue_ôî©‹_ba£_v3
;

400 
	gãm∂©e
<
ty≥«me
 
	gT
>

401 
	gc⁄cuºít_queue_ªp
 : 
public
 
c⁄cuºít_queue_ªp_ba£
 {

402 
mi¸o_queue
<
T
> 
¨øy
[
n_queue
];

405 
size_t
 
ödex
–
tickë
 
k
 ) {

406  
k
*
	gphi
%
	gn_queue
;

409 
	gmi¸o_queue
<
	gT
>& 
choo£
–
tickë
 
k
 ) {

411  
	g¨øy
[
ödex
(
k
)];

420 
	gãm∂©e
<
ty≥«me
 
	gT
>

421 ˛as†
	cc⁄cuºít_queue_ba£_v3
: 
public
 
c⁄cuºít_queue_∑ge_Æloˇt‹
 {

422 
¥iv©e
:

424 
c⁄cuºít_queue_ªp
<
T
>* 
my_ªp
;

426 
‰õnd
 
	gc⁄cuºít_queue_ªp
<
	gT
>;

427 
‰õnd
 
˛ass
 
	gmi¸o_queue
<
	gT
>;

428 
‰õnd
 
˛ass
 
	gc⁄cuºít_queue_ôî©‹_ªp
<
	gT
>;

429 
‰õnd
 
˛ass
 
	gc⁄cuºít_queue_ôî©‹_ba£_v3
<
	gT
>;

431 
	g¥Ÿe˘ed
:

432 
ty≥«me
 
	tc⁄cuºít_queue_ªp
<
	tT
>::
	t∑ge
Öage;

434 
	g¥iv©e
:

435 
ty≥«me
 
	tmi¸o_queue
<
	tT
>::
	t∑dded_∑ge
Öadded_page;

436 
ty≥«me
 
	tmi¸o_queue
<
	tT
>::
	tôem_c⁄°ru˘‹_t
 item_constructor_t;

438 
vútuÆ
 
∑ge
 *
Æloˇã_∑ge
(Ë
	g__TBB_ovîride
 {

439 
	gc⁄cuºít_queue_ªp
<
	gT
>& 
	gr
 = *
my_ªp
;

440 
size_t
 
	gn
 = (
∑dded_∑ge
Ë+ (
r
.
ôems_≥r_∑ge
-1)*(
T
);

441  
	gªöãΩªt_ˇ°
<
	g∑ge
*>(
Æloˇã_block
 ( 
n
 ));

444 
vútuÆ
 
dóŒoˇã_∑ge
–
c⁄cuºít_queue_ªp_ba£
::
∑ge
 *
p
 ) 
__TBB_ovîride
 {

445 
c⁄cuºít_queue_ªp
<
T
>& 
r
 = *
my_ªp
;

446 
size_t
 
	gn
 = (
∑dded_∑ge
Ë+ (
r
.
ôems_≥r_∑ge
-1)*(
T
);

447 
dóŒoˇã_block
–
ªöãΩªt_ˇ°
<*>(
p
), 
n
 );

451 
vútuÆ
 *
Æloˇã_block
–
size_t
 
n
 ) = 0;

454 
vútuÆ
 
dóŒoˇã_block
–*
p
, 
size_t
 
n
 ) = 0;

456 
	g¥Ÿe˘ed
:

457 
c⁄cuºít_queue_ba£_v3
();

459 
	gvútuÆ
 ~
c⁄cuºít_queue_ba£_v3
() {

460 #i‡
TBB_USE_ASSERT


461 
size_t
 
	gnq
 = 
my_ªp
->
n_queue
;

462  
size_t
 
	gi
=0; i<
	gnq
; i++ )

463 
__TBB_ASSERT
–
my_ªp
->
¨øy
[
i
].
èû_∑ge
==
NULL
, "pages wereÇot freedÖroperly" );

465 
	gˇche_Æig√d_Æloˇt‹
<
	gc⁄cuºít_queue_ªp
<
	gT
> >().
dóŒoˇã
(
my_ªp
,1);

469 
öã∫Æ_push
–c⁄° * 
§c
, 
ôem_c⁄°ru˘‹_t
 
c⁄°ru˘_ôem
 ) {

470 
	gc⁄cuºít_queue_ªp
<
	gT
>& 
	gr
 = *
my_ªp
;

471 
tickë
 
	gk
 = 
r
.
èû_cou¡î
++;

472 
	gr
.
choo£
(
k
).
push
–
§c
, k, *
this
, 
c⁄°ru˘_ôem
 );

477 
boﬁ
 
öã∫Æ_åy_p›
–* 
d°
 ) ;

480 
size_t
 
öã∫Æ_size
() const ;

483 
boﬁ
 
öã∫Æ_em±y
() const ;

487 
öã∫Æ_föish_˛ór
() ;

490 
öã∫Æ_throw_ex˚±i⁄
() const {

491 
throw_ex˚±i⁄
–
eid_bad_Æloc
 );

495 
assign
–c⁄° 
c⁄cuºít_queue_ba£_v3
& 
§c
, 
ôem_c⁄°ru˘‹_t
 
c⁄°ru˘_ôem
 ) ;

497 #i‡
__TBB_CPP11_RVALUE_REF_PRESENT


499 
öã∫Æ_sw≠
–
c⁄cuºít_queue_ba£_v3
& 
§c
 ) {

500 
	g°d
::
sw≠
–
my_ªp
, 
§c
.my_rep );

505 
	gãm∂©e
<
ty≥«me
 
	gT
>

506 
	gc⁄cuºít_queue_ba£_v3
<
	gT
>::
c⁄cuºít_queue_ba£_v3
() {

507 c⁄° 
size_t
 
ôem_size
 = (
T
);

508 
	gmy_ªp
 = 
ˇche_Æig√d_Æloˇt‹
<
c⁄cuºít_queue_ªp
<
T
> >().
Æloˇã
(1);

509 
__TBB_ASSERT
–(
size_t
)
my_ªp
 % 
NFS_GëLöeSize
()==0, "alignmentÉrror" );

510 
__TBB_ASSERT
–(
size_t
)&
my_ªp
->
hód_cou¡î
 % 
NFS_GëLöeSize
()==0, "alignmentÉrror" );

511 
__TBB_ASSERT
–(
size_t
)&
my_ªp
->
èû_cou¡î
 % 
NFS_GëLöeSize
()==0, "alignmentÉrror" );

512 
__TBB_ASSERT
–(
size_t
)&
my_ªp
->
¨øy
 % 
NFS_GëLöeSize
()==0, "alignmentÉrror" );

513 
mem£t
(
°©ic_ˇ°
<*>(
my_ªp
),0,(
c⁄cuºít_queue_ªp
<
T
>));

514 
	gmy_ªp
->
	gôem_size
 = 
ôem_size
;

515 
	gmy_ªp
->
	gôems_≥r_∑ge
 = 
ôem_size
<= 8 ? 32 :

516 
ôem_size
<= 16 ? 16 :

517 
ôem_size
<= 32 ? 8 :

518 
ôem_size
<= 64 ? 4 :

519 
ôem_size
<=128 ? 2 :

523 
	gãm∂©e
<
ty≥«me
 
	gT
>

524 
boﬁ
 
	gc⁄cuºít_queue_ba£_v3
<
	gT
>::
öã∫Æ_åy_p›
–* 
d°
 ) {

525 
c⁄cuºít_queue_ªp
<
T
>& 
r
 = *
my_ªp
;

526 
tickë
 
	gk
;

528 
	gk
 = 
r
.
hód_cou¡î
;

530 if–(
	g±rdiff_t
)(
	gr
.
	gèû_cou¡î
-
	gk
)<=0 ) {

532  
Ál£
;

535 
tickë
 
	gtk
=
k
;

536 #i‡
deföed
(
_MSC_VER
Ë&& deföed(
_Wp64
)

537 #¥agm®
w¨nög
 (
push
)

538 #¥agm®
w¨nög
 (
dißbÀ
: 4267)

540 
	gk
 = 
r
.
hód_cou¡î
.
com∑ª_™d_sw≠
–
tk
+1,Åk );

541 #i‡
deföed
(
_MSC_VER
Ë&& deföed(
_Wp64
)

542 #¥agm®
w¨nög
 (
p›
)

544 if–
	gk
==
tk
 )

548 }  !
	gr
.
choo£
–
k
 ).
p›
–
d°
, k, *
this
 ) );

549  
	gåue
;

552 
	gãm∂©e
<
ty≥«me
 
	gT
>

553 
size_t
 
	gc⁄cuºít_queue_ba£_v3
<
	gT
>::
öã∫Æ_size
() const {

554 
c⁄cuºít_queue_ªp
<
T
>& 
r
 = *
my_ªp
;

555 
__TBB_ASSERT
–(
±rdiff_t
)<=(
size_t
), 
NULL
 );

556 
tickë
 
	ghc
 = 
r
.
hód_cou¡î
;

557 
size_t
 
	gnõ
 = 
r
.
n_övÆid_íåõs
;

558 
tickë
 
	gtc
 = 
r
.
èû_cou¡î
;

559 
__TBB_ASSERT
–
hc
!=
tc
 || !
nõ
, 
NULL
 );

560 
±rdiff_t
 
	gsz
 = 
tc
-
hc
-
nõ
;

561  
	gsz
<0 ? 0 : 
size_t
(
sz
);

564 
	gãm∂©e
<
ty≥«me
 
	gT
>

565 
boﬁ
 
	gc⁄cuºít_queue_ba£_v3
<
	gT
>::
öã∫Æ_em±y
() const {

566 
c⁄cuºít_queue_ªp
<
T
>& 
r
 = *
my_ªp
;

567 
tickë
 
	gtc
 = 
r
.
èû_cou¡î
;

568 
tickë
 
	ghc
 = 
r
.
hód_cou¡î
;

570  
	gtc
==
r
.
èû_cou¡î
 && 
tc
==
hc
+r.
n_övÆid_íåõs
 ;

573 
	gãm∂©e
<
ty≥«me
 
	gT
>

574 
	gc⁄cuºít_queue_ba£_v3
<
	gT
>::
öã∫Æ_föish_˛ór
() {

575 
c⁄cuºít_queue_ªp
<
T
>& 
r
 = *
my_ªp
;

576 
size_t
 
	gnq
 = 
r
.
n_queue
;

577  
size_t
 
	gi
=0; i<
	gnq
; ++i ) {

578 
∑ge
* 
	gç
 = 
r
.
¨øy
[
i
].
èû_∑ge
;

579 if–
is_vÆid_∑ge
(
ç
) ) {

580 
__TBB_ASSERT
–
r
.
¨øy
[
i
].
hód_∑ge
==
ç
, "at most oneÖage shouldÑemain" );

581 
dóŒoˇã_∑ge
–
ç
 );

582 
	gr
.
	g¨øy
[
i
].
	gèû_∑ge
 = 
NULL
;

584 
__TBB_ASSERT
–!
is_vÆid_∑ge
(
r
.
¨øy
[
i
].
hód_∑ge
), "headÖageÖointer corrupt?" );

588 
	gãm∂©e
<
ty≥«me
 
	gT
>

589 
	gc⁄cuºít_queue_ba£_v3
<
	gT
>::
assign
–c⁄° 
c⁄cuºít_queue_ba£_v3
& 
§c
,

590 
ôem_c⁄°ru˘‹_t
 
c⁄°ru˘_ôem
 )

592 
	gc⁄cuºít_queue_ªp
<
	gT
>& 
	gr
 = *
my_ªp
;

593 
	gr
.
	gôems_≥r_∑ge
 = 
§c
.
my_ªp
->
ôems_≥r_∑ge
;

596 
	gr
.
	ghód_cou¡î
 = 
§c
.
my_ªp
->
hód_cou¡î
;

597 
	gr
.
	gèû_cou¡î
 = 
§c
.
my_ªp
->
èû_cou¡î
;

598 
	gr
.
	gn_övÆid_íåõs
 = 
§c
.
my_ªp
->
n_övÆid_íåõs
;

601  
size_t
 
	gi
 = 0; i < 
	gr
.
	gn_queue
; ++i )

602 
	gr
.
	g¨øy
[
i
].
assign
–
§c
.
my_ªp
->
¨øy
[i], *
this
, 
c⁄°ru˘_ôem
);

604 
__TBB_ASSERT
–
r
.
hód_cou¡î
==
§c
.
my_ªp
->hód_cou¡î &&Ñ.
èû_cou¡î
==src.my_rep->tail_counter,

608 
	gãm∂©e
<
ty≥«me
 
	gC⁄èöî
,Åy≥«mê
	gVÆue
> 
˛ass
 
	gc⁄cuºít_queue_ôî©‹
;

610 
	gãm∂©e
<
ty≥«me
 
	gT
>

611 ˛as†
	cc⁄cuºít_queue_ôî©‹_ªp
: 
no_assign
 {

612 
ty≥«me
 
	tmi¸o_queue
<
	tT
>::
	t∑dded_∑ge
Öadded_page;

613 
	gpublic
:

614 
tickë
 
hód_cou¡î
;

615 c⁄° 
	gc⁄cuºít_queue_ba£_v3
<
	gT
>& 
	gmy_queue
;

616 
ty≥«me
 
	gc⁄cuºít_queue_ba£_v3
<
	gT
>::
∑ge
* 
¨øy
[
c⁄cuºít_queue_ªp
<
T
>::
n_queue
];

617 
c⁄cuºít_queue_ôî©‹_ªp
–c⁄° 
c⁄cuºít_queue_ba£_v3
<
T
>& 
queue
 ) :

618 
hód_cou¡î
(
queue
.
my_ªp
->head_counter),

619 
my_queue
(
queue
)

621  
size_t
 
	gk
=0; k<
	gc⁄cuºít_queue_ªp
<
	gT
>::
n_queue
; ++k )

622 
	g¨øy
[
k
] = 
queue
.
my_ªp
->
¨øy
[k].
hód_∑ge
;

626 
boﬁ
 
gë_ôem
–
T
*& 
ôem
, 
size_t
 
k
 ) ;

629 
	gãm∂©e
<
ty≥«me
 
	gT
>

630 
boﬁ
 
	gc⁄cuºít_queue_ôî©‹_ªp
<
	gT
>::
gë_ôem
–
T
*& 
ôem
, 
size_t
 
k
 ) {

631 if–
	gk
==
my_queue
.
my_ªp
->
èû_cou¡î
 ) {

632 
ôem
 = 
NULL
;

633  
	gåue
;

635 
ty≥«me
 
	gc⁄cuºít_queue_ba£_v3
<
	gT
>::
∑ge
* 
p
 = 
¨øy
[
c⁄cuºít_queue_ªp
<
T
>::
ödex
(
k
)];

636 
__TBB_ASSERT
(
p
,
NULL
);

637 
size_t
 
	gi
 = 
modulo_powî_of_two
–
k
/
c⁄cuºít_queue_ªp
<
T
>::
n_queue
, 
my_queue
.
my_ªp
->
ôems_≥r_∑ge
 );

638 
	gôem
 = &
mi¸o_queue
<
T
>::
gë_ªf
(*
p
,
i
);

639  (
	gp
->
	gmask
 & 
uöçå_t
(1)<<
	gi
)!=0;

645 
	gãm∂©e
<
ty≥«me
 
	gVÆue
>

646 ˛as†
	cc⁄cuºít_queue_ôî©‹_ba£_v3
 {

649 
	gc⁄cuºít_queue_ôî©‹_ªp
<
	gVÆue
>* 
	gmy_ªp
;

651 
	gãm∂©e
<
ty≥«me
 
	gC
,Åy≥«mê
	gT
,Åy≥«mê
	gU
>

652 
‰õnd
 
boﬁ
 
	g›î©‹
==–c⁄° 
c⁄cuºít_queue_ôî©‹
<
C
,
	gT
>& 
	gi
, c⁄° 
	gc⁄cuºít_queue_ôî©‹
<
	gC
,
	gU
>& 
	gj
 );

654 
	gãm∂©e
<
ty≥«me
 
	gC
,Åy≥«mê
	gT
,Åy≥«mê
	gU
>

655 
‰õnd
 
boﬁ
 
	g›î©‹
!=–c⁄° 
c⁄cuºít_queue_ôî©‹
<
C
,
	gT
>& 
	gi
, c⁄° 
	gc⁄cuºít_queue_ôî©‹
<
	gC
,
	gU
>& 
	gj
 );

656 
	g¥Ÿe˘ed
:

658 
VÆue
* 
my_ôem
;

661 
c⁄cuºít_queue_ôî©‹_ba£_v3
(Ë: 
my_ªp
(
NULL
), 
my_ôem
(NULL) {

662 #i‡
__TBB_GCC_OPTIMIZER_ORDERING_BROKEN


663 
__TBB_compûî_„n˚
();

668 
c⁄cuºít_queue_ôî©‹_ba£_v3
–c⁄° c⁄cuºít_queue_ôî©‹_ba£_v3& 
i
 )

669 : 
my_ªp
(
NULL
), 
my_ôem
(NULL) {

670 
assign
(
i
);

673 
	gc⁄cuºít_queue_ôî©‹_ba£_v3
& 
	g›î©‹
=–c⁄° 
c⁄cuºít_queue_ôî©‹_ba£_v3
& 
i
 ) {

674 
assign
(
i
);

675  *
	gthis
;

679 
c⁄cuºít_queue_ôî©‹_ba£_v3
–c⁄° 
c⁄cuºít_queue_ba£_v3
<
VÆue
>& 
queue
 ) ;

682 
assign
–c⁄° 
c⁄cuºít_queue_ôî©‹_ba£_v3
<
VÆue
>& 
Ÿhî
 ) ;

685 
adv™˚
() ;

688 ~
c⁄cuºít_queue_ôî©‹_ba£_v3
() {

689 
	gˇche_Æig√d_Æloˇt‹
<
	gc⁄cuºít_queue_ôî©‹_ªp
<
	gVÆue
> >().
dóŒoˇã
(
my_ªp
, 1);

690 
	gmy_ªp
 = 
NULL
;

694 
	gãm∂©e
<
ty≥«me
 
	gVÆue
>

695 
	gc⁄cuºít_queue_ôî©‹_ba£_v3
<
	gVÆue
>::
c⁄cuºít_queue_ôî©‹_ba£_v3
–c⁄° 
c⁄cuºít_queue_ba£_v3
<
VÆue
>& 
queue
 ) {

696 
my_ªp
 = 
ˇche_Æig√d_Æloˇt‹
<
c⁄cuºít_queue_ôî©‹_ªp
<
VÆue
> >().
Æloˇã
(1);

697 
√w
–
my_ªp
 ) 
	gc⁄cuºít_queue_ôî©‹_ªp
<
	gVÆue
>(
	gqueue
);

698 
size_t
 
	gk
 = 
my_ªp
->
hód_cou¡î
;

699 if–!
	gmy_ªp
->
gë_ôem
(
my_ôem
, 
k
ËË
adv™˚
();

702 
	gãm∂©e
<
ty≥«me
 
	gVÆue
>

703 
	gc⁄cuºít_queue_ôî©‹_ba£_v3
<
	gVÆue
>::
assign
–c⁄° 
c⁄cuºít_queue_ôî©‹_ba£_v3
<
VÆue
>& 
Ÿhî
 ) {

704 if–
my_ªp
!=
Ÿhî
.my_rep ) {

705 if–
my_ªp
 ) {

706 
ˇche_Æig√d_Æloˇt‹
<
c⁄cuºít_queue_ôî©‹_ªp
<
VÆue
> >().
dóŒoˇã
(
my_ªp
, 1);

707 
	gmy_ªp
 = 
NULL
;

709 if–
	gŸhî
.
	gmy_ªp
 ) {

710 
	gmy_ªp
 = 
ˇche_Æig√d_Æloˇt‹
<
c⁄cuºít_queue_ôî©‹_ªp
<
VÆue
> >().
Æloˇã
(1);

711 
√w
–
my_ªp
 ) 
	gc⁄cuºít_queue_ôî©‹_ªp
<
	gVÆue
>–*
	gŸhî
.
	gmy_ªp
 );

714 
	gmy_ôem
 = 
Ÿhî
.
my_ôem
;

717 
	gãm∂©e
<
ty≥«me
 
	gVÆue
>

718 
	gc⁄cuºít_queue_ôî©‹_ba£_v3
<
	gVÆue
>::
adv™˚
() {

719 
__TBB_ASSERT
–
my_ôem
, "attemptÅo increment iteratorÖastÉnd of queue" );

720 
size_t
 
	gk
 = 
my_ªp
->
hód_cou¡î
;

721 c⁄° 
	gc⁄cuºít_queue_ba£_v3
<
	gVÆue
>& 
	gqueue
 = 
my_ªp
->
my_queue
;

722 #i‡
TBB_USE_ASSERT


723 
VÆue
* 
	gtmp
;

724 
	gmy_ªp
->
gë_ôem
(
tmp
,
k
);

725 
__TBB_ASSERT
–
my_ôem
==
tmp
, 
NULL
 );

727 
size_t
 
	gi
 = 
modulo_powî_of_two
–
k
/
c⁄cuºít_queue_ªp
<
VÆue
>::
n_queue
, 
queue
.
my_ªp
->
ôems_≥r_∑ge
 );

728 if–
	gi
==
queue
.
my_ªp
->
ôems_≥r_∑ge
-1 ) {

729 
ty≥«me
 
c⁄cuºít_queue_ba£_v3
<
VÆue
>::
∑ge
*& 
roŸ
 = 
my_ªp
->
¨øy
[
c⁄cuºít_queue_ªp
<VÆue>::
ödex
(
k
)];

730 
	groŸ
 = 
roŸ
->
√xt
;

733 
	gmy_ªp
->
	ghód_cou¡î
 = ++
k
;

734 if–!
	gmy_ªp
->
gë_ôem
(
my_ôem
, 
k
ËË
adv™˚
();

739 
	gãm∂©e
<
ty≥«me
 
	gT
> 
	stbb_ªmove_cv
 {
T
 
	tty≥
;};

740 
	gãm∂©e
<
ty≥«me
 
	gT
> 
	gtbb_ªmove_cv
<c⁄° T> {
T
 
	tty≥
;};

741 
	gãm∂©e
<
ty≥«me
 
	gT
> 
	gtbb_ªmove_cv
<vﬁ©ûêT> {
T
 
	tty≥
;};

742 
	gãm∂©e
<
ty≥«me
 
	gT
> 
	gtbb_ªmove_cv
<c⁄° vﬁ©ûêT> {
T
 
	tty≥
;};

747 
	gãm∂©e
<
ty≥«me
 
	gC⁄èöî
,Åy≥«mê
	gVÆue
>

748 
˛ass
 
	gc⁄cuºít_queue_ôî©‹
: 
public
 
c⁄cuºít_queue_ôî©‹_ba£_v3
<
ty≥«me
 
tbb_ªmove_cv
<
VÆue
>::
ty≥
>,

749 
public
 
	g°d
::
ôî©‹
<
°d
::
f‹w¨d_ôî©‹_èg
,
	gVÆue
> {

750 #i‡!
__TBB_TEMPLATE_FRIENDS_BROKEN


751 
	gãm∂©e
<
ty≥«me
 
	gT
, 
˛ass
 
	gA
>

752 
‰õnd
 
	g˛ass
 ::
tbb
::
°ri˘_µl
::
c⁄cuºít_queue
;

754 
	gpublic
:

757 
ex∂icô
 
c⁄cuºít_queue_ôî©‹
–c⁄° 
c⁄cuºít_queue_ba£_v3
<
ty≥«me
 
tbb_ªmove_cv
<
VÆue
>::
ty≥
>& 
queue
 ) :

758 
c⁄cuºít_queue_ôî©‹_ba£_v3
<
ty≥«me
 
tbb_ªmove_cv
<
VÆue
>::
ty≥
>(
queue
)

762 
public
:

763 
c⁄cuºít_queue_ôî©‹
() {}

767 
c⁄cuºít_queue_ôî©‹
–c⁄° c⁄cuºít_queue_ôî©‹<
C⁄èöî
,
ty≥«me
 C⁄èöî::
vÆue_ty≥
>& 
Ÿhî
 ) :

768 
c⁄cuºít_queue_ôî©‹_ba£_v3
<
ty≥«me
 
tbb_ªmove_cv
<
VÆue
>::
ty≥
>(
Ÿhî
)

772 
c⁄cuºít_queue_ôî©‹
& 
›î©‹
=–c⁄° c⁄cuºít_queue_ôî©‹<
C⁄èöî
,
ty≥«me
 
	gC⁄èöî
::
vÆue_ty≥
>& 
Ÿhî
 ) {

773 
c⁄cuºít_queue_ôî©‹_ba£_v3
<
ty≥«me
 
tbb_ªmove_cv
<
VÆue
>::
ty≥
>::
›î©‹
=(
Ÿhî
);

774  *
	gthis
;

778 
	gVÆue
& 
	g›î©‹
*() const {

779  *
	g°©ic_ˇ°
<
	gVÆue
*>(
	gthis
->
	gmy_ôem
);

782 
VÆue
* 
	g›î©‹
->() const { &operator*();}

785 
	gc⁄cuºít_queue_ôî©‹
& 
	g›î©‹
++() {

786 
	gthis
->
adv™˚
();

787  *
	gthis
;

791 
VÆue
* 
	g›î©‹
++() {

792 
VÆue
* 
	gªsu…
 = &
›î©‹
*();

793 
	g›î©‹
++();

794  
	gªsu…
;

799 
	gãm∂©e
<
ty≥«me
 
	gC
,Åy≥«mê
	gT
,Åy≥«mê
	gU
>

800 
boﬁ
 
	g›î©‹
==–c⁄° 
c⁄cuºít_queue_ôî©‹
<
C
,
	gT
>& 
	gi
, c⁄° 
	gc⁄cuºít_queue_ôî©‹
<
	gC
,
	gU
>& 
	gj
 ) {

801  
	gi
.
	gmy_ôem
==
j
.
my_ôem
;

804 
	gãm∂©e
<
ty≥«me
 
	gC
,Åy≥«mê
	gT
,Åy≥«mê
	gU
>

805 
boﬁ
 
	g›î©‹
!=–c⁄° 
c⁄cuºít_queue_ôî©‹
<
C
,
	gT
>& 
	gi
, c⁄° 
	gc⁄cuºít_queue_ôî©‹
<
	gC
,
	gU
>& 
	gj
 ) {

806  
	gi
.
	gmy_ôem
!=
j
.
my_ôem
;

816 
«me•a˚
 
	göã∫Æ
 {

818 
˛ass
 
	gc⁄cuºít_queue_ªp
;

819 
˛ass
 
	gc⁄cuºít_queue_ôî©‹_ªp
;

820 
˛ass
 
	gc⁄cuºít_queue_ôî©‹_ba£_v3
;

821 
	gãm∂©e
<
ty≥«me
 
	gC⁄èöî
,Åy≥«mê
	gVÆue
> 
˛ass
 
	gc⁄cuºít_queue_ôî©‹
;

826 ˛as†
	cc⁄cuºít_queue_ba£_v3
: 
no_c›y
 {

827 
¥iv©e
:

829 
c⁄cuºít_queue_ªp
* 
my_ªp
;

831 
‰õnd
 
˛ass
 
	gc⁄cuºít_queue_ªp
;

832 
‰õnd
 
	gmi¸o_queue
;

833 
‰õnd
 
˛ass
 
	gmi¸o_queue_p›_föÆizî
;

834 
‰õnd
 
˛ass
 
	gc⁄cuºít_queue_ôî©‹_ªp
;

835 
‰õnd
 
˛ass
 
	gc⁄cuºít_queue_ôî©‹_ba£_v3
;

836 
	g¥Ÿe˘ed
:

838 
	s∑ge
 {

839 
∑ge
* 
√xt
;

840 
uöçå_t
 
	gmask
;

844 
±rdiff_t
 
	gmy_ˇ∑côy
;

847 
size_t
 
	gôems_≥r_∑ge
;

850 
size_t
 
	gôem_size
;

852 
	ec›y_•ecifics
 { 
	gc›y
, 
	gmove
 };

854 #i‡
__TBB_PROTECTED_NESTED_CLASS_BROKEN


855 
	gpublic
:

857 
ãm∂©e
<
ty≥«me
 
T
>

858 
∑dded_∑ge
: 
∑ge
 {

860 
∑dded_∑ge
();

862 
	g›î©‹
=–c⁄° 
∑dded_∑ge
& );

864 
T
 
	gœ°
;

867 
	g¥iv©e
:

868 
vútuÆ
 
c›y_ôem
–
∑ge
& 
d°
, 
size_t
 
ödex
, c⁄° * 
§c
 ) = 0;

869 
vútuÆ
 
assign_™d_de°roy_ôem
–* 
d°
, 
∑ge
& 
§c
, 
size_t
 
ödex
 ) = 0;

870 
	g¥Ÿe˘ed
:

871 
__TBB_EXPORTED_METHOD
 
c⁄cuºít_queue_ba£_v3
–
size_t
 
ôem_size
 );

872 
vútuÆ
 
	g__TBB_EXPORTED_METHOD
 ~
c⁄cuºít_queue_ba£_v3
();

875 
__TBB_EXPORTED_METHOD
 
öã∫Æ_push
–c⁄° * 
§c
 );

878 
__TBB_EXPORTED_METHOD
 
öã∫Æ_p›
–* 
d°
 );

881 
__TBB_EXPORTED_METHOD
 
öã∫Æ_ab‹t
();

884 
boﬁ
 
__TBB_EXPORTED_METHOD
 
öã∫Æ_push_if_nŸ_fuŒ
–c⁄° * 
§c
 );

888 
boﬁ
 
__TBB_EXPORTED_METHOD
 
öã∫Æ_p›_if_¥e£¡
–* 
d°
 );

891 
±rdiff_t
 
__TBB_EXPORTED_METHOD
 
öã∫Æ_size
() const;

894 
boﬁ
 
__TBB_EXPORTED_METHOD
 
öã∫Æ_em±y
() const;

897 
__TBB_EXPORTED_METHOD
 
öã∫Æ_£t_ˇ∑côy
–
±rdiff_t
 
ˇ∑côy
, 
size_t
 
ñemít_size
 );

900 
vútuÆ
 
∑ge
 *
Æloˇã_∑ge
() = 0;

903 
vútuÆ
 
dóŒoˇã_∑ge
–
∑ge
 *
p
 ) = 0;

907 
__TBB_EXPORTED_METHOD
 
öã∫Æ_föish_˛ór
() ;

910 
__TBB_EXPORTED_METHOD
 
öã∫Æ_throw_ex˚±i⁄
() const;

913 
__TBB_EXPORTED_METHOD
 
assign
–c⁄° 
c⁄cuºít_queue_ba£_v3
& 
§c
 ) ;

915 #i‡
__TBB_CPP11_RVALUE_REF_PRESENT


917 
öã∫Æ_sw≠
–
c⁄cuºít_queue_ba£_v3
& 
§c
 ) {

918 
	g°d
::
sw≠
–
my_ˇ∑côy
, 
§c
.my_capacity );

919 
	g°d
::
sw≠
–
ôems_≥r_∑ge
, 
§c
.items_per_page );

920 
	g°d
::
sw≠
–
ôem_size
, 
§c
.item_size );

921 
	g°d
::
sw≠
–
my_ªp
, 
§c
.my_rep );

926 
öã∫Æ_ö£π_ôem
–c⁄° * 
§c
, 
c›y_•ecifics
 
›_ty≥
 );

929 
boﬁ
 
öã∫Æ_ö£π_if_nŸ_fuŒ
–c⁄° * 
§c
, 
c›y_•ecifics
 
›_ty≥
 );

932 
öã∫Æ_assign
–c⁄° 
c⁄cuºít_queue_ba£_v3
& 
§c
, 
c›y_•ecifics
 
›_ty≥
 );

933 
	g¥iv©e
:

934 
vútuÆ
 
c›y_∑ge_ôem
–
∑ge
& 
d°
, 
size_t
 
dödex
, c⁄°Öage& 
§c
, size_à
södex
 ) = 0;

940 ˛as†
	cc⁄cuºít_queue_ba£_v8
: 
public
 
c⁄cuºít_queue_ba£_v3
 {

941 
¥Ÿe˘ed
:

942 
c⁄cuºít_queue_ba£_v8
–
size_t
 
ôem_sz
 ) : 
c⁄cuºít_queue_ba£_v3
( item_sz ) {}

945 
__TBB_EXPORTED_METHOD
 
move_c⁄ã¡
–
c⁄cuºít_queue_ba£_v8
& 
§c
 ) ;

948 
boﬁ
 
__TBB_EXPORTED_METHOD
 
öã∫Æ_push_move_if_nŸ_fuŒ
–c⁄° * 
§c
 );

951 
__TBB_EXPORTED_METHOD
 
öã∫Æ_push_move
–c⁄° * 
§c
 );

952 
	g¥iv©e
:

953 
‰õnd
 
mi¸o_queue
;

954 
vútuÆ
 
move_∑ge_ôem
–
∑ge
& 
d°
, 
size_t
 
dödex
, c⁄°Öage& 
§c
, size_à
södex
 ) = 0;

955 
vútuÆ
 
move_ôem
–
∑ge
& 
d°
, 
size_t
 
ödex
, c⁄° * 
§c
 ) = 0;

960 ˛as†
	cc⁄cuºít_queue_ôî©‹_ba£_v3
 {

963 
c⁄cuºít_queue_ôî©‹_ªp
* 
	gmy_ªp
;

965 
	gãm∂©e
<
ty≥«me
 
	gC
,Åy≥«mê
	gT
,Åy≥«mê
	gU
>

966 
‰õnd
 
boﬁ
 
	g›î©‹
==–c⁄° 
c⁄cuºít_queue_ôî©‹
<
C
,
	gT
>& 
	gi
, c⁄° 
	gc⁄cuºít_queue_ôî©‹
<
	gC
,
	gU
>& 
	gj
 );

968 
	gãm∂©e
<
ty≥«me
 
	gC
,Åy≥«mê
	gT
,Åy≥«mê
	gU
>

969 
‰õnd
 
boﬁ
 
	g›î©‹
!=–c⁄° 
c⁄cuºít_queue_ôî©‹
<
C
,
	gT
>& 
	gi
, c⁄° 
	gc⁄cuºít_queue_ôî©‹
<
	gC
,
	gU
>& 
	gj
 );

971 
öôülize
–c⁄° 
c⁄cuºít_queue_ba£_v3
& 
queue
, 
size_t
 
off£t_of_d©a
 );

972 
	g¥Ÿe˘ed
:

974 * 
my_ôem
;

977 
c⁄cuºít_queue_ôî©‹_ba£_v3
(Ë: 
my_ªp
(
NULL
), 
my_ôem
(NULL) {}

980 
c⁄cuºít_queue_ôî©‹_ba£_v3
–c⁄° c⁄cuºít_queue_ôî©‹_ba£_v3& 
i
 ) : 
my_ªp
(
NULL
), 
my_ôem
(NULL) {

981 
assign
(
i
);

984 
	gc⁄cuºít_queue_ôî©‹_ba£_v3
& 
	g›î©‹
=–c⁄° 
c⁄cuºít_queue_ôî©‹_ba£_v3
& 
i
 ) {

985 
assign
(
i
);

986  *
	gthis
;

991 
__TBB_EXPORTED_METHOD
 
c⁄cuºít_queue_ôî©‹_ba£_v3
–c⁄° 
c⁄cuºít_queue_ba£_v3
& 
queue
 );

994 
__TBB_EXPORTED_METHOD
 
c⁄cuºít_queue_ôî©‹_ba£_v3
–c⁄° 
c⁄cuºít_queue_ba£_v3
& 
queue
, 
size_t
 
off£t_of_d©a
 );

997 
__TBB_EXPORTED_METHOD
 
assign
–c⁄° 
c⁄cuºít_queue_ôî©‹_ba£_v3
& 
i
 );

1000 
__TBB_EXPORTED_METHOD
 
adv™˚
();

1003 
	g__TBB_EXPORTED_METHOD
 ~
c⁄cuºít_queue_ôî©‹_ba£_v3
();

1006 
c⁄cuºít_queue_ôî©‹_ba£_v3
 
	tc⁄cuºít_queue_ôî©‹_ba£
;

1011 
	gãm∂©e
<
ty≥«me
 
	gC⁄èöî
,Åy≥«mê
	gVÆue
>

1012 
˛ass
 
	gc⁄cuºít_queue_ôî©‹
: 
public
 
c⁄cuºít_queue_ôî©‹_ba£
,

1013 
public
 
	g°d
::
ôî©‹
<
°d
::
f‹w¨d_ôî©‹_èg
,
	gVÆue
> {

1015 #i‡!
__TBB_TEMPLATE_FRIENDS_BROKEN


1016 
	gãm∂©e
<
ty≥«me
 
	gT
, 
˛ass
 
	gA
>

1017 
‰õnd
 
	g˛ass
 ::
tbb
::
c⁄cuºít_bounded_queue
;

1019 
	gpublic
:

1023 
ex∂icô
 
c⁄cuºít_queue_ôî©‹
–c⁄° 
c⁄cuºít_queue_ba£_v3
& 
queue
 ) :

1024 
c⁄cuºít_queue_ôî©‹_ba£_v3
(
queue
,
__TBB_off£tof
(
c⁄cuºít_queue_ba£_v3
::
∑dded_∑ge
<
VÆue
>,
œ°
))

1028 
	gpublic
:

1029 
c⁄cuºít_queue_ôî©‹
() {}

1033 
c⁄cuºít_queue_ôî©‹
–c⁄° c⁄cuºít_queue_ôî©‹<
C⁄èöî
,
ty≥«me
 C⁄èöî::
vÆue_ty≥
>& 
Ÿhî
 ) :

1034 
c⁄cuºít_queue_ôî©‹_ba£_v3
(
Ÿhî
)

1038 
c⁄cuºít_queue_ôî©‹
& 
›î©‹
=–c⁄° c⁄cuºít_queue_ôî©‹<
C⁄èöî
,
ty≥«me
 
	gC⁄èöî
::
vÆue_ty≥
>& 
Ÿhî
 ) {

1039 
c⁄cuºít_queue_ôî©‹_ba£_v3
::
›î©‹
=(
Ÿhî
);

1040  *
	gthis
;

1044 
	gVÆue
& 
	g›î©‹
*() const {

1045  *
	g°©ic_ˇ°
<
	gVÆue
*>(
	gmy_ôem
);

1048 
VÆue
* 
	g›î©‹
->() const { &operator*();}

1051 
	gc⁄cuºít_queue_ôî©‹
& 
	g›î©‹
++() {

1052 
adv™˚
();

1053  *
	gthis
;

1057 
VÆue
* 
	g›î©‹
++() {

1058 
VÆue
* 
	gªsu…
 = &
›î©‹
*();

1059 
	g›î©‹
++();

1060  
	gªsu…
;

1065 
	gãm∂©e
<
ty≥«me
 
	gC
,Åy≥«mê
	gT
,Åy≥«mê
	gU
>

1066 
boﬁ
 
	g›î©‹
==–c⁄° 
c⁄cuºít_queue_ôî©‹
<
C
,
	gT
>& 
	gi
, c⁄° 
	gc⁄cuºít_queue_ôî©‹
<
	gC
,
	gU
>& 
	gj
 ) {

1067  
	gi
.
	gmy_ôem
==
j
.
my_ôem
;

1070 
	gãm∂©e
<
ty≥«me
 
	gC
,Åy≥«mê
	gT
,Åy≥«mê
	gU
>

1071 
boﬁ
 
	g›î©‹
!=–c⁄° 
c⁄cuºít_queue_ôî©‹
<
C
,
	gT
>& 
	gi
, c⁄° 
	gc⁄cuºít_queue_ôî©‹
<
	gC
,
	gU
>& 
	gj
 ) {

1072  
	gi
.
	gmy_ôem
!=
j
.
my_ôem
;

	@/usr/include/tbb/internal/_flow_graph_types_impl.h

17 #i‚de‡
__TBB__Êow_gøph_ty≥s_im∂_H


18 
	#__TBB__Êow_gøph_ty≥s_im∂_H


	)

20 #i‚de‡
__TBB_Êow_gøph_H


21 #îr‹ 
Do
 
nŸ
 #ö˛udê
this
 
öã∫Æ
 
fûe
 
dúe˘ly
; 
u£
 
public
 
TBB
 
hódîs
 
ö°ód
.

26 
«me•a˚
 
	göã∫Æ
 {

39 
	gãm∂©e
<
ty≥«me
 
	gKp
,Åy≥«mê
	gKHashp
,Åy≥«mê
	gTp
>

40 
	sKeyTøô
 {

41 
Kp
 
	tK
;

42 
Tp
 
	tT
;

43 
	göã∫Æ
::
	tty≥_to_key_fun˘i⁄_body
<
	tT
,
	tK
> 
	tTtoK
;

44 
KHashp
 
	tKHash
;

48 
	gãm∂©e
<
	gN
,Åem∂©e<
	g˛ass
> 
˛ass
 
	gPT
, 
ty≥«me
 
	gTy≥Tu∂e
>

49 
	gwøp_tu∂e_ñemíts
;

53 
	gãm∂©e
<
	gN
,Åem∂©e<
	g˛ass
> 
˛ass
 
	gPT
, 
ty≥«me
 
	gKeyTøôs
,Åy≥«mê
	gTy≥Tu∂e
>

54 
	gwøp_key_tu∂e_ñemíts
;

56 #i‡
__TBB_CPP11_VARIADIC_TEMPLATES_PRESENT
 && 
__TBB_CPP11_VARIADIC_TUPLE_PRESENT


57 
	gãm∂©e
<
	gN
,Åem∂©e<
	g˛ass
> 
˛ass
 
	gPT
, 
	gty≥«me
... 
	gArgs
>

58 
	gwøp_tu∂e_ñemíts
<
	gN
, 
	gPT
, 
	gtbb
::
Êow
::
tu∂e
<
Args
...> >{

59 
ty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e
<
	tPT
<
	tArgs
>... > 
	tty≥
;

62 
	gãm∂©e
<
	gN
,Åem∂©e<
	g˛ass
> 
˛ass
 
	gPT
, 
ty≥«me
 
	gKeyTøôs
, 
	gty≥«me
... 
	gArgs
>

63 
	gwøp_key_tu∂e_ñemíts
<
	gN
, 
	gPT
, 
	gKeyTøôs
, 
	gtbb
::
Êow
::
tu∂e
<
Args
...> > {

64 
ty≥«me
 
	tKeyTøôs
::
	tkey_ty≥
 
	tK
;

65 
ty≥«me
 
	tKeyTøôs
::
	thash_com∑ª_ty≥
 
	tKHash
;

66 
ty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e
<
	tPT
<
	tKeyTøô
<
	tK
, 
	tKHash
, 
	tArgs
> >... > 
	tty≥
;

69 
	gãm∂©e
<ãm∂©e<
	g˛ass
> 
˛ass
 
	gPT
, 
ty≥«me
 
	gTy≥Tu∂e
>

70 
	gwøp_tu∂e_ñemíts
<1, 
	gPT
, 
	gTy≥Tu∂e
> {

71 
ty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e
<

72 
	tPT
<
	tty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<0,
	tTy≥Tu∂e
>::
	tty≥
> >

73 
	tty≥
;

76 
	gãm∂©e
<ãm∂©e<
	g˛ass
> 
˛ass
 
	gPT
, 
ty≥«me
 
	gKeyTøôs
,Åy≥«mê
	gTy≥Tu∂e
>

77 
	gwøp_key_tu∂e_ñemíts
<1, 
	gPT
, 
	gKeyTøôs
, 
	gTy≥Tu∂e
 > {

78 
ty≥«me
 
	tKeyTøôs
::
	tkey_ty≥
 
	tK
;

79 
ty≥«me
 
	tKeyTøôs
::
	thash_com∑ª_ty≥
 
	tKHash
;

80 
	gKeyTøô
<
	tK
, 
	tKHash
, 
	tty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<0,
	tTy≥Tu∂e
>::
	tty≥
> 
	tKeyTøô0
;

81 
ty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e
< 
	tPT
<
	tKeyTøô0
> > 
	tty≥
;

84 
	gãm∂©e
<ãm∂©e<
	g˛ass
> 
˛ass
 
	gPT
, 
ty≥«me
 
	gTy≥Tu∂e
>

85 
	gwøp_tu∂e_ñemíts
<2, 
	gPT
, 
	gTy≥Tu∂e
> {

86 
ty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e
<

87 
	tPT
<
	tty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<0,
	tTy≥Tu∂e
>::
	tty≥
>,

88 
	tPT
<
	tty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<1,
	tTy≥Tu∂e
>::
	tty≥
> >

89 
	tty≥
;

92 
	gãm∂©e
<ãm∂©e<
	g˛ass
> 
˛ass
 
	gPT
, 
ty≥«me
 
	gKeyTøôs
,Åy≥«mê
	gTy≥Tu∂e
>

93 
	gwøp_key_tu∂e_ñemíts
<2, 
	gPT
, 
	gKeyTøôs
, 
	gTy≥Tu∂e
> {

94 
ty≥«me
 
	tKeyTøôs
::
	tkey_ty≥
 
	tK
;

95 
ty≥«me
 
	tKeyTøôs
::
	thash_com∑ª_ty≥
 
	tKHash
;

96 
	gKeyTøô
<
	tK
, 
	tKHash
, 
	tty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<0,
	tTy≥Tu∂e
>::
	tty≥
> 
	tKeyTøô0
;

97 
	gKeyTøô
<
	tK
, 
	tKHash
, 
	tty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<1,
	tTy≥Tu∂e
>::
	tty≥
> 
	tKeyTøô1
;

98 
ty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e
< 
	tPT
<
	tKeyTøô0
>, PT<
	tKeyTøô1
> > 
	tty≥
;

101 
	gãm∂©e
<ãm∂©e<
	g˛ass
> 
˛ass
 
	gPT
, 
ty≥«me
 
	gTy≥Tu∂e
>

102 
	gwøp_tu∂e_ñemíts
<3, 
	gPT
, 
	gTy≥Tu∂e
> {

103 
ty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e
<

104 
	tPT
<
	tty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<0,
	tTy≥Tu∂e
>::
	tty≥
>,

105 
	tPT
<
	tty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<1,
	tTy≥Tu∂e
>::
	tty≥
>,

106 
	tPT
<
	tty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<2,
	tTy≥Tu∂e
>::
	tty≥
> >

107 
	tty≥
;

110 
	gãm∂©e
<ãm∂©e<
	g˛ass
> 
˛ass
 
	gPT
, 
ty≥«me
 
	gKeyTøôs
,Åy≥«mê
	gTy≥Tu∂e
>

111 
	gwøp_key_tu∂e_ñemíts
<3, 
	gPT
, 
	gKeyTøôs
, 
	gTy≥Tu∂e
> {

112 
ty≥«me
 
	tKeyTøôs
::
	tkey_ty≥
 
	tK
;

113 
ty≥«me
 
	tKeyTøôs
::
	thash_com∑ª_ty≥
 
	tKHash
;

114 
	gKeyTøô
<
	tK
, 
	tKHash
, 
	tty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<0,
	tTy≥Tu∂e
>::
	tty≥
> 
	tKeyTøô0
;

115 
	gKeyTøô
<
	tK
, 
	tKHash
, 
	tty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<1,
	tTy≥Tu∂e
>::
	tty≥
> 
	tKeyTøô1
;

116 
	gKeyTøô
<
	tK
, 
	tKHash
, 
	tty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<2,
	tTy≥Tu∂e
>::
	tty≥
> 
	tKeyTøô2
;

117 
ty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e
< 
	tPT
<
	tKeyTøô0
>, PT<
	tKeyTøô1
>, PT<
	tKeyTøô2
> > 
	tty≥
;

120 
	gãm∂©e
<ãm∂©e<
	g˛ass
> 
˛ass
 
	gPT
, 
ty≥«me
 
	gTy≥Tu∂e
>

121 
	gwøp_tu∂e_ñemíts
<4, 
	gPT
, 
	gTy≥Tu∂e
> {

122 
ty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e
<

123 
	tPT
<
	tty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<0,
	tTy≥Tu∂e
>::
	tty≥
>,

124 
	tPT
<
	tty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<1,
	tTy≥Tu∂e
>::
	tty≥
>,

125 
	tPT
<
	tty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<2,
	tTy≥Tu∂e
>::
	tty≥
>,

126 
	tPT
<
	tty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<3,
	tTy≥Tu∂e
>::
	tty≥
> >

127 
	tty≥
;

130 
	gãm∂©e
<ãm∂©e<
	g˛ass
> 
˛ass
 
	gPT
, 
ty≥«me
 
	gKeyTøôs
,Åy≥«mê
	gTy≥Tu∂e
>

131 
	gwøp_key_tu∂e_ñemíts
<4, 
	gPT
, 
	gKeyTøôs
, 
	gTy≥Tu∂e
> {

132 
ty≥«me
 
	tKeyTøôs
::
	tkey_ty≥
 
	tK
;

133 
ty≥«me
 
	tKeyTøôs
::
	thash_com∑ª_ty≥
 
	tKHash
;

134 
	gKeyTøô
<
	tK
, 
	tKHash
, 
	tty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<0,
	tTy≥Tu∂e
>::
	tty≥
> 
	tKeyTøô0
;

135 
	gKeyTøô
<
	tK
, 
	tKHash
, 
	tty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<1,
	tTy≥Tu∂e
>::
	tty≥
> 
	tKeyTøô1
;

136 
	gKeyTøô
<
	tK
, 
	tKHash
, 
	tty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<2,
	tTy≥Tu∂e
>::
	tty≥
> 
	tKeyTøô2
;

137 
	gKeyTøô
<
	tK
, 
	tKHash
, 
	tty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<3,
	tTy≥Tu∂e
>::
	tty≥
> 
	tKeyTøô3
;

138 
ty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e
< 
	tPT
<
	tKeyTøô0
>, PT<
	tKeyTøô1
>, PT<
	tKeyTøô2
>,

139 
	tPT
<
	tKeyTøô3
> > 
	tty≥
;

142 
	gãm∂©e
<ãm∂©e<
	g˛ass
> 
˛ass
 
	gPT
, 
ty≥«me
 
	gTy≥Tu∂e
>

143 
	gwøp_tu∂e_ñemíts
<5, 
	gPT
, 
	gTy≥Tu∂e
> {

144 
ty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e
<

145 
	tPT
<
	tty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<0,
	tTy≥Tu∂e
>::
	tty≥
>,

146 
	tPT
<
	tty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<1,
	tTy≥Tu∂e
>::
	tty≥
>,

147 
	tPT
<
	tty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<2,
	tTy≥Tu∂e
>::
	tty≥
>,

148 
	tPT
<
	tty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<3,
	tTy≥Tu∂e
>::
	tty≥
>,

149 
	tPT
<
	tty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<4,
	tTy≥Tu∂e
>::
	tty≥
> >

150 
	tty≥
;

153 
	gãm∂©e
<ãm∂©e<
	g˛ass
> 
˛ass
 
	gPT
, 
ty≥«me
 
	gKeyTøôs
,Åy≥«mê
	gTy≥Tu∂e
>

154 
	gwøp_key_tu∂e_ñemíts
<5, 
	gPT
, 
	gKeyTøôs
, 
	gTy≥Tu∂e
> {

155 
ty≥«me
 
	tKeyTøôs
::
	tkey_ty≥
 
	tK
;

156 
ty≥«me
 
	tKeyTøôs
::
	thash_com∑ª_ty≥
 
	tKHash
;

157 
	gKeyTøô
<
	tK
, 
	tKHash
, 
	tty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<0,
	tTy≥Tu∂e
>::
	tty≥
> 
	tKeyTøô0
;

158 
	gKeyTøô
<
	tK
, 
	tKHash
, 
	tty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<1,
	tTy≥Tu∂e
>::
	tty≥
> 
	tKeyTøô1
;

159 
	gKeyTøô
<
	tK
, 
	tKHash
, 
	tty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<2,
	tTy≥Tu∂e
>::
	tty≥
> 
	tKeyTøô2
;

160 
	gKeyTøô
<
	tK
, 
	tKHash
, 
	tty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<3,
	tTy≥Tu∂e
>::
	tty≥
> 
	tKeyTøô3
;

161 
	gKeyTøô
<
	tK
, 
	tKHash
, 
	tty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<4,
	tTy≥Tu∂e
>::
	tty≥
> 
	tKeyTøô4
;

162 
ty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e
< 
	tPT
<
	tKeyTøô0
>, PT<
	tKeyTøô1
>, PT<
	tKeyTøô2
>,

163 
	tPT
<
	tKeyTøô3
>, PT<
	tKeyTøô4
> > 
	tty≥
;

166 #i‡
__TBB_VARIADIC_MAX
 >= 6

167 
	gãm∂©e
<ãm∂©e<
	g˛ass
> 
˛ass
 
	gPT
, 
ty≥«me
 
	gTy≥Tu∂e
>

168 
	gwøp_tu∂e_ñemíts
<6, 
	gPT
, 
	gTy≥Tu∂e
> {

169 
ty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e
<

170 
	tPT
<
	tty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<0,
	tTy≥Tu∂e
>::
	tty≥
>,

171 
	tPT
<
	tty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<1,
	tTy≥Tu∂e
>::
	tty≥
>,

172 
	tPT
<
	tty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<2,
	tTy≥Tu∂e
>::
	tty≥
>,

173 
	tPT
<
	tty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<3,
	tTy≥Tu∂e
>::
	tty≥
>,

174 
	tPT
<
	tty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<4,
	tTy≥Tu∂e
>::
	tty≥
>,

175 
	tPT
<
	tty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<5,
	tTy≥Tu∂e
>::
	tty≥
> >

176 
	tty≥
;

179 
	gãm∂©e
<ãm∂©e<
	g˛ass
> 
˛ass
 
	gPT
, 
ty≥«me
 
	gKeyTøôs
,Åy≥«mê
	gTy≥Tu∂e
>

180 
	gwøp_key_tu∂e_ñemíts
<6, 
	gPT
, 
	gKeyTøôs
, 
	gTy≥Tu∂e
> {

181 
ty≥«me
 
	tKeyTøôs
::
	tkey_ty≥
 
	tK
;

182 
ty≥«me
 
	tKeyTøôs
::
	thash_com∑ª_ty≥
 
	tKHash
;

183 
	gKeyTøô
<
	tK
, 
	tKHash
, 
	tty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<0,
	tTy≥Tu∂e
>::
	tty≥
> 
	tKeyTøô0
;

184 
	gKeyTøô
<
	tK
, 
	tKHash
, 
	tty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<1,
	tTy≥Tu∂e
>::
	tty≥
> 
	tKeyTøô1
;

185 
	gKeyTøô
<
	tK
, 
	tKHash
, 
	tty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<2,
	tTy≥Tu∂e
>::
	tty≥
> 
	tKeyTøô2
;

186 
	gKeyTøô
<
	tK
, 
	tKHash
, 
	tty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<3,
	tTy≥Tu∂e
>::
	tty≥
> 
	tKeyTøô3
;

187 
	gKeyTøô
<
	tK
, 
	tKHash
, 
	tty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<4,
	tTy≥Tu∂e
>::
	tty≥
> 
	tKeyTøô4
;

188 
	gKeyTøô
<
	tK
, 
	tKHash
, 
	tty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<5,
	tTy≥Tu∂e
>::
	tty≥
> 
	tKeyTøô5
;

189 
ty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e
< 
	tPT
<
	tKeyTøô0
>, PT<
	tKeyTøô1
>, PT<
	tKeyTøô2
>, PT<
	tKeyTøô3
>,

190 
	tPT
<
	tKeyTøô4
>, PT<
	tKeyTøô5
> > 
	tty≥
;

194 #i‡
__TBB_VARIADIC_MAX
 >= 7

195 
	gãm∂©e
<ãm∂©e<
	g˛ass
> 
˛ass
 
	gPT
, 
ty≥«me
 
	gTy≥Tu∂e
>

196 
	gwøp_tu∂e_ñemíts
<7, 
	gPT
, 
	gTy≥Tu∂e
> {

197 
ty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e
<

198 
	tPT
<
	tty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<0,
	tTy≥Tu∂e
>::
	tty≥
>,

199 
	tPT
<
	tty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<1,
	tTy≥Tu∂e
>::
	tty≥
>,

200 
	tPT
<
	tty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<2,
	tTy≥Tu∂e
>::
	tty≥
>,

201 
	tPT
<
	tty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<3,
	tTy≥Tu∂e
>::
	tty≥
>,

202 
	tPT
<
	tty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<4,
	tTy≥Tu∂e
>::
	tty≥
>,

203 
	tPT
<
	tty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<5,
	tTy≥Tu∂e
>::
	tty≥
>,

204 
	tPT
<
	tty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<6,
	tTy≥Tu∂e
>::
	tty≥
> >

205 
	tty≥
;

208 
	gãm∂©e
<ãm∂©e<
	g˛ass
> 
˛ass
 
	gPT
, 
ty≥«me
 
	gKeyTøôs
,Åy≥«mê
	gTy≥Tu∂e
>

209 
	gwøp_key_tu∂e_ñemíts
<7, 
	gPT
, 
	gKeyTøôs
, 
	gTy≥Tu∂e
> {

210 
ty≥«me
 
	tKeyTøôs
::
	tkey_ty≥
 
	tK
;

211 
ty≥«me
 
	tKeyTøôs
::
	thash_com∑ª_ty≥
 
	tKHash
;

212 
	gKeyTøô
<
	tK
, 
	tKHash
, 
	tty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<0,
	tTy≥Tu∂e
>::
	tty≥
> 
	tKeyTøô0
;

213 
	gKeyTøô
<
	tK
, 
	tKHash
, 
	tty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<1,
	tTy≥Tu∂e
>::
	tty≥
> 
	tKeyTøô1
;

214 
	gKeyTøô
<
	tK
, 
	tKHash
, 
	tty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<2,
	tTy≥Tu∂e
>::
	tty≥
> 
	tKeyTøô2
;

215 
	gKeyTøô
<
	tK
, 
	tKHash
, 
	tty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<3,
	tTy≥Tu∂e
>::
	tty≥
> 
	tKeyTøô3
;

216 
	gKeyTøô
<
	tK
, 
	tKHash
, 
	tty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<4,
	tTy≥Tu∂e
>::
	tty≥
> 
	tKeyTøô4
;

217 
	gKeyTøô
<
	tK
, 
	tKHash
, 
	tty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<5,
	tTy≥Tu∂e
>::
	tty≥
> 
	tKeyTøô5
;

218 
	gKeyTøô
<
	tK
, 
	tKHash
, 
	tty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<6,
	tTy≥Tu∂e
>::
	tty≥
> 
	tKeyTøô6
;

219 
ty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e
< 
	tPT
<
	tKeyTøô0
>, PT<
	tKeyTøô1
>, PT<
	tKeyTøô2
>, PT<
	tKeyTøô3
>,

220 
	tPT
<
	tKeyTøô4
>, PT<
	tKeyTøô5
>, PT<
	tKeyTøô6
> > 
	tty≥
;

224 #i‡
__TBB_VARIADIC_MAX
 >= 8

225 
	gãm∂©e
<ãm∂©e<
	g˛ass
> 
˛ass
 
	gPT
, 
ty≥«me
 
	gTy≥Tu∂e
>

226 
	gwøp_tu∂e_ñemíts
<8, 
	gPT
, 
	gTy≥Tu∂e
> {

227 
ty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e
<

228 
	tPT
<
	tty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<0,
	tTy≥Tu∂e
>::
	tty≥
>,

229 
	tPT
<
	tty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<1,
	tTy≥Tu∂e
>::
	tty≥
>,

230 
	tPT
<
	tty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<2,
	tTy≥Tu∂e
>::
	tty≥
>,

231 
	tPT
<
	tty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<3,
	tTy≥Tu∂e
>::
	tty≥
>,

232 
	tPT
<
	tty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<4,
	tTy≥Tu∂e
>::
	tty≥
>,

233 
	tPT
<
	tty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<5,
	tTy≥Tu∂e
>::
	tty≥
>,

234 
	tPT
<
	tty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<6,
	tTy≥Tu∂e
>::
	tty≥
>,

235 
	tPT
<
	tty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<7,
	tTy≥Tu∂e
>::
	tty≥
> >

236 
	tty≥
;

239 
	gãm∂©e
<ãm∂©e<
	g˛ass
> 
˛ass
 
	gPT
, 
ty≥«me
 
	gKeyTøôs
,Åy≥«mê
	gTy≥Tu∂e
>

240 
	gwøp_key_tu∂e_ñemíts
<8, 
	gPT
, 
	gKeyTøôs
, 
	gTy≥Tu∂e
> {

241 
ty≥«me
 
	tKeyTøôs
::
	tkey_ty≥
 
	tK
;

242 
ty≥«me
 
	tKeyTøôs
::
	thash_com∑ª_ty≥
 
	tKHash
;

243 
	gKeyTøô
<
	tK
, 
	tKHash
, 
	tty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<0,
	tTy≥Tu∂e
>::
	tty≥
> 
	tKeyTøô0
;

244 
	gKeyTøô
<
	tK
, 
	tKHash
, 
	tty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<1,
	tTy≥Tu∂e
>::
	tty≥
> 
	tKeyTøô1
;

245 
	gKeyTøô
<
	tK
, 
	tKHash
, 
	tty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<2,
	tTy≥Tu∂e
>::
	tty≥
> 
	tKeyTøô2
;

246 
	gKeyTøô
<
	tK
, 
	tKHash
, 
	tty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<3,
	tTy≥Tu∂e
>::
	tty≥
> 
	tKeyTøô3
;

247 
	gKeyTøô
<
	tK
, 
	tKHash
, 
	tty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<4,
	tTy≥Tu∂e
>::
	tty≥
> 
	tKeyTøô4
;

248 
	gKeyTøô
<
	tK
, 
	tKHash
, 
	tty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<5,
	tTy≥Tu∂e
>::
	tty≥
> 
	tKeyTøô5
;

249 
	gKeyTøô
<
	tK
, 
	tKHash
, 
	tty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<6,
	tTy≥Tu∂e
>::
	tty≥
> 
	tKeyTøô6
;

250 
	gKeyTøô
<
	tK
, 
	tKHash
, 
	tty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<7,
	tTy≥Tu∂e
>::
	tty≥
> 
	tKeyTøô7
;

251 
ty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e
< 
	tPT
<
	tKeyTøô0
>, PT<
	tKeyTøô1
>, PT<
	tKeyTøô2
>, PT<
	tKeyTøô3
>,

252 
	tPT
<
	tKeyTøô4
>, PT<
	tKeyTøô5
>, PT<
	tKeyTøô6
>, PT<
	tKeyTøô7
> > 
	tty≥
;

256 #i‡
__TBB_VARIADIC_MAX
 >= 9

257 
	gãm∂©e
<ãm∂©e<
	g˛ass
> 
˛ass
 
	gPT
, 
ty≥«me
 
	gTy≥Tu∂e
>

258 
	gwøp_tu∂e_ñemíts
<9, 
	gPT
, 
	gTy≥Tu∂e
> {

259 
ty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e
<

260 
	tPT
<
	tty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<0,
	tTy≥Tu∂e
>::
	tty≥
>,

261 
	tPT
<
	tty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<1,
	tTy≥Tu∂e
>::
	tty≥
>,

262 
	tPT
<
	tty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<2,
	tTy≥Tu∂e
>::
	tty≥
>,

263 
	tPT
<
	tty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<3,
	tTy≥Tu∂e
>::
	tty≥
>,

264 
	tPT
<
	tty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<4,
	tTy≥Tu∂e
>::
	tty≥
>,

265 
	tPT
<
	tty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<5,
	tTy≥Tu∂e
>::
	tty≥
>,

266 
	tPT
<
	tty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<6,
	tTy≥Tu∂e
>::
	tty≥
>,

267 
	tPT
<
	tty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<7,
	tTy≥Tu∂e
>::
	tty≥
>,

268 
	tPT
<
	tty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<8,
	tTy≥Tu∂e
>::
	tty≥
> >

269 
	tty≥
;

272 
	gãm∂©e
<ãm∂©e<
	g˛ass
> 
˛ass
 
	gPT
, 
ty≥«me
 
	gKeyTøôs
,Åy≥«mê
	gTy≥Tu∂e
>

273 
	gwøp_key_tu∂e_ñemíts
<9, 
	gPT
, 
	gKeyTøôs
, 
	gTy≥Tu∂e
> {

274 
ty≥«me
 
	tKeyTøôs
::
	tkey_ty≥
 
	tK
;

275 
ty≥«me
 
	tKeyTøôs
::
	thash_com∑ª_ty≥
 
	tKHash
;

276 
	gKeyTøô
<
	tK
, 
	tKHash
, 
	tty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<0,
	tTy≥Tu∂e
>::
	tty≥
> 
	tKeyTøô0
;

277 
	gKeyTøô
<
	tK
, 
	tKHash
, 
	tty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<1,
	tTy≥Tu∂e
>::
	tty≥
> 
	tKeyTøô1
;

278 
	gKeyTøô
<
	tK
, 
	tKHash
, 
	tty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<2,
	tTy≥Tu∂e
>::
	tty≥
> 
	tKeyTøô2
;

279 
	gKeyTøô
<
	tK
, 
	tKHash
, 
	tty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<3,
	tTy≥Tu∂e
>::
	tty≥
> 
	tKeyTøô3
;

280 
	gKeyTøô
<
	tK
, 
	tKHash
, 
	tty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<4,
	tTy≥Tu∂e
>::
	tty≥
> 
	tKeyTøô4
;

281 
	gKeyTøô
<
	tK
, 
	tKHash
, 
	tty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<5,
	tTy≥Tu∂e
>::
	tty≥
> 
	tKeyTøô5
;

282 
	gKeyTøô
<
	tK
, 
	tKHash
, 
	tty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<6,
	tTy≥Tu∂e
>::
	tty≥
> 
	tKeyTøô6
;

283 
	gKeyTøô
<
	tK
, 
	tKHash
, 
	tty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<7,
	tTy≥Tu∂e
>::
	tty≥
> 
	tKeyTøô7
;

284 
	gKeyTøô
<
	tK
, 
	tKHash
, 
	tty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<8,
	tTy≥Tu∂e
>::
	tty≥
> 
	tKeyTøô8
;

285 
ty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e
< 
	tPT
<
	tKeyTøô0
>, PT<
	tKeyTøô1
>, PT<
	tKeyTøô2
>, PT<
	tKeyTøô3
>,

286 
	tPT
<
	tKeyTøô4
>, PT<
	tKeyTøô5
>, PT<
	tKeyTøô6
>, PT<
	tKeyTøô7
>, PT<
	tKeyTøô8
> > 
	tty≥
;

290 #i‡
__TBB_VARIADIC_MAX
 >= 10

291 
	gãm∂©e
<ãm∂©e<
	g˛ass
> 
˛ass
 
	gPT
, 
ty≥«me
 
	gTy≥Tu∂e
>

292 
	gwøp_tu∂e_ñemíts
<10, 
	gPT
, 
	gTy≥Tu∂e
> {

293 
ty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e
<

294 
	tPT
<
	tty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<0,
	tTy≥Tu∂e
>::
	tty≥
>,

295 
	tPT
<
	tty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<1,
	tTy≥Tu∂e
>::
	tty≥
>,

296 
	tPT
<
	tty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<2,
	tTy≥Tu∂e
>::
	tty≥
>,

297 
	tPT
<
	tty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<3,
	tTy≥Tu∂e
>::
	tty≥
>,

298 
	tPT
<
	tty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<4,
	tTy≥Tu∂e
>::
	tty≥
>,

299 
	tPT
<
	tty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<5,
	tTy≥Tu∂e
>::
	tty≥
>,

300 
	tPT
<
	tty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<6,
	tTy≥Tu∂e
>::
	tty≥
>,

301 
	tPT
<
	tty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<7,
	tTy≥Tu∂e
>::
	tty≥
>,

302 
	tPT
<
	tty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<8,
	tTy≥Tu∂e
>::
	tty≥
>,

303 
	tPT
<
	tty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<9,
	tTy≥Tu∂e
>::
	tty≥
> >

304 
	tty≥
;

307 
	gãm∂©e
<ãm∂©e<
	g˛ass
> 
˛ass
 
	gPT
, 
ty≥«me
 
	gKeyTøôs
,Åy≥«mê
	gTy≥Tu∂e
>

308 
	gwøp_key_tu∂e_ñemíts
<10, 
	gPT
, 
	gKeyTøôs
, 
	gTy≥Tu∂e
> {

309 
ty≥«me
 
	tKeyTøôs
::
	tkey_ty≥
 
	tK
;

310 
ty≥«me
 
	tKeyTøôs
::
	thash_com∑ª_ty≥
 
	tKHash
;

311 
	gKeyTøô
<
	tK
, 
	tKHash
, 
	tty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<0,
	tTy≥Tu∂e
>::
	tty≥
> 
	tKeyTøô0
;

312 
	gKeyTøô
<
	tK
, 
	tKHash
, 
	tty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<1,
	tTy≥Tu∂e
>::
	tty≥
> 
	tKeyTøô1
;

313 
	gKeyTøô
<
	tK
, 
	tKHash
, 
	tty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<2,
	tTy≥Tu∂e
>::
	tty≥
> 
	tKeyTøô2
;

314 
	gKeyTøô
<
	tK
, 
	tKHash
, 
	tty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<3,
	tTy≥Tu∂e
>::
	tty≥
> 
	tKeyTøô3
;

315 
	gKeyTøô
<
	tK
, 
	tKHash
, 
	tty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<4,
	tTy≥Tu∂e
>::
	tty≥
> 
	tKeyTøô4
;

316 
	gKeyTøô
<
	tK
, 
	tKHash
, 
	tty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<5,
	tTy≥Tu∂e
>::
	tty≥
> 
	tKeyTøô5
;

317 
	gKeyTøô
<
	tK
, 
	tKHash
, 
	tty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<6,
	tTy≥Tu∂e
>::
	tty≥
> 
	tKeyTøô6
;

318 
	gKeyTøô
<
	tK
, 
	tKHash
, 
	tty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<7,
	tTy≥Tu∂e
>::
	tty≥
> 
	tKeyTøô7
;

319 
	gKeyTøô
<
	tK
, 
	tKHash
, 
	tty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<8,
	tTy≥Tu∂e
>::
	tty≥
> 
	tKeyTøô8
;

320 
	gKeyTøô
<
	tK
, 
	tKHash
, 
	tty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<9,
	tTy≥Tu∂e
>::
	tty≥
> 
	tKeyTøô9
;

321 
ty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e
< 
	tPT
<
	tKeyTøô0
>, PT<
	tKeyTøô1
>, PT<
	tKeyTøô2
>, PT<
	tKeyTøô3
>,

322 
	tPT
<
	tKeyTøô4
>, PT<
	tKeyTøô5
>, PT<
	tKeyTøô6
>, PT<
	tKeyTøô7
>, PT<
	tKeyTøô8
>,

323 
	tPT
<
	tKeyTøô9
> > 
	tty≥
;

328 #i‡
__TBB_CPP11_VARIADIC_TEMPLATES_PRESENT


329 
	gãm∂©e
< ... 
	gS
 > cœs†
	c£quí˚
 {};

331 
	gãm∂©e
< 
	gN
, ... 
	gS
 >

332 
	gmake_£quí˚
 : 
make_£quí˚
 < 
N
 - 1, 
	gN
 - 1, 
	gS
... > {};

334 
	gãm∂©e
< ... 
	gS
 >

335 
	gmake_£quí˚
 < 0, 
	gS
... > {

336 
	g£quí˚
<
	tS
...> 
	tty≥
;

340 #i‡
__TBB_INITIALIZER_LISTS_PRESENT


342 
	gãm∂©e
 <
ty≥«me
 
	gT
>

343 ˛as†
	cöôülizî_li°_wøµî
 {

344 
	gpublic
:

345 
T
 
	tvÆue_ty≥
;

346 c⁄° 
	tT
& 
	tª„ªn˚
;

347 c⁄° 
	tT
& 
	tc⁄°_ª„ªn˚
;

348 
size_t
 
	tsize_ty≥
;

350 
T
* 
	tôî©‹
;

351 c⁄° 
	tT
* 
	tc⁄°_ôî©‹
;

353 
öôülizî_li°_wøµî
–
°d
::
öôülizî_li°
<
T
> 
û
 ) 
__TBB_NOEXCEPT
–
åue
 ) : 
my_begö
–
°©ic_ˇ°
<T*>(
mÆloc
–û.
size
()*( T ) )) ) {

354 
ôî©‹
 
d°
 = 
my_begö
;

355  
ty≥«me
 
	g°d
::
öôülizî_li°
<
T
>::
c⁄°_ôî©‹
 
§c
 = 
û
.
begö
(); 
	g§c
 !û.
íd
(); ++src )

356 
√w
 (
d°
++Ë
T
–*
§c
 );

357 
	gmy_íd
 = 
d°
;

360 
öôülizî_li°_wøµî
–c⁄° inôülizî_li°_wøµî<
T
>& 
ûw
 ) 
__TBB_NOEXCEPT
–
åue
 ) : 
my_begö
–
°©ic_ˇ°
<T*>(
mÆloc
–ûw.
size
()*( T ) )) ) {

361 
ôî©‹
 
d°
 = 
my_begö
;

362  
ty≥«me
 
	g°d
::
öôülizî_li°
<
T
>::
c⁄°_ôî©‹
 
§c
 = 
ûw
.
begö
(); 
	g§c
 !ûw.
íd
(); ++src )

363 
√w
 (
d°
++Ë
T
–*
§c
 );

364 
	gmy_íd
 = 
d°
;

367 #i‡
__TBB_CPP11_RVALUE_REF_PRESENT


368 
öôülizî_li°_wøµî
–öôülizî_li°_wøµî<
T
>&& 
ûw
 ) 
__TBB_NOEXCEPT
–
åue
 ) : 
my_begö
–ûw.my_begö ), 
my_íd
( ilw.my_end ) {

369 
	gûw
.
	gmy_begö
 = 
ûw
.
my_íd
 = 
NULL
;

373 ~
öôülizî_li°_wøµî
() {

374 i‡–
	gmy_begö
 )

375 
‰ì
–
my_begö
 );

378 
c⁄°_ôî©‹
 
begö
(Ëc⁄° 
__TBB_NOEXCEPT
(
åue
Ë{  
	gmy_begö
; }

379 
c⁄°_ôî©‹
 
íd
(Ëc⁄° 
__TBB_NOEXCEPT
(
åue
Ë{  
	gmy_íd
; }

380 
size_t
 
size
(Ëc⁄° 
__TBB_NOEXCEPT
(
åue
Ë{  (
	gsize_t
)(
	gmy_íd
 - 
	gmy_begö
); }

382 
	g¥iv©e
:

383 
ôî©‹
 
my_begö
;

384 
ôî©‹
 
	gmy_íd
;

390 
	gãm∂©e
<
ty≥«me
 
	gT1
,Åy≥«mê
	gT2
, 
size_t
 
	gREM
>

391 
	sty≥_∂us_Æign
 {

392 
	gfú°
[(
T1
)];

393 
T2
 
	g£c⁄d
;

394 
	gfûl1
[
REM
];

397 
	gãm∂©e
<
ty≥«me
 
	gT1
,Åy≥«mê
	gT2
>

398 
	gty≥_∂us_Æign
<
	gT1
,
	gT2
,0> {

399 
	gfú°
[(
T1
)];

400 
T2
 
	g£c⁄d
;

403 
	gãm∂©e
<
˛ass
 
	gU
> 
	sÆignmít_of
 {

404 °ru˘ { 
	gt
; 
U
 
	g∑dded
; } 
	tã°_Æignmít
;

405 c⁄° 
size_t
 
	gvÆue
 = (
ã°_Æignmít
Ë- (
U
);

411 
	gãm∂©e
<
ty≥«me
 
	gT1
,Åy≥«mê
	gT2
>

412 
	sÆig√d_∑ú
 {

413 c⁄° 
size_t
 
	gt1_Æign
 = 
Æignmít_of
<
T1
>::
vÆue
;

414 c⁄° 
size_t
 
	gt2_Æign
 = 
Æignmít_of
<
T2
>::
vÆue
;

415 
	gty≥_∂us_Æign
<
	tT1
, 
	tT2
, 0 > 
	tju°_∑ú
;

416 c⁄° 
size_t
 
	gmax_Æign
 = 
t1_Æign
 < 
t2_Æign
 ?Å2_align :Å1_align;

417 c⁄° 
size_t
 
	gexåa_byãs
 = (
ju°_∑ú
Ë% 
max_Æign
;

418 c⁄° 
size_t
 
	gªmaödî
 = 
exåa_byãs
 ? 
max_Æign
 -Éxtra_bytes : 0;

419 
	gpublic
:

420 
ty≥_∂us_Æign
<
	tT1
,
	tT2
,
	tªmaödî
> 
	tty≥
;

425 
	sdeÁu…_c⁄°ru˘ed
 { };

432 
	sWøµîBa£
 {

433 
	gvútuÆ
 ~
WøµîBa£
() {}

434 
vútuÆ
 
C›yTo
(* ) const { }

440 
	gãm∂©e
<
ty≥«me
 
	gT
>

441 
	gWøµî
: 
public
 
WøµîBa£
 {

442 
T
 
	tvÆue_ty≥
;

443 
T
* 
	tpoöãr_ty≥
;

444 
	g¥iv©e
:

445 
T
 
vÆue_•a˚
;

446 
	gpublic
:

447 c⁄° 
vÆue_ty≥
 &
vÆue
(Ëc⁄° {  
vÆue_•a˚
; }

449 
	g¥iv©e
:

450 
Wøµî
();

453 
	s_unwöd_•a˚
 {

454 
poöãr_ty≥
 
	g•a˚
;

455 
_unwöd_•a˚
(
poöãr_ty≥
 
p
Ë: 
•a˚
(p) {}

456 ~
_unwöd_•a˚
() {

457 if(
•a˚
Ë(Ë
√w
 (•a˚Ë
Wøµî
<
deÁu…_c⁄°ru˘ed
>(default_constructed());

460 
	gpublic
:

461 
ex∂icô
 
Wøµî
–c⁄° 
T
& 
Ÿhî
 ) : 
vÆue_•a˚
(other) { }

462 
ex∂icô
 
Wøµî
(c⁄° Wøµî& 
Ÿhî
Ë: 
vÆue_•a˚
(other.value_space) { }

464 
C›yTo
(* 
√wS∑˚
Ëc⁄° 
__TBB_ovîride
 {

465 
_unwöd_•a˚
 
gu¨d
((
poöãr_ty≥
)
√wS∑˚
);

466 (Ë
√w
(
√wS∑˚
Ë
Wøµî
(
vÆue_•a˚
);

467 
	ggu¨d
.
	g•a˚
 = 
NULL
;

469 ~
Wøµî
() { }

473 
	gãm∂©e
<
ty≥«me
 
	gT
, 
size_t
 
	gN
>

474 
	gWøµî
<
	gT
[
N
]> : 
public
 
WøµîBa£
 {

475 
T
 
	tvÆue_ty≥
;

476 
T
* 
	tpoöãr_ty≥
;

478 
T
 
	tAºayTy≥
[
N
];

479 
	g¥iv©e
:

484 c⁄° 
size_t
 
•a˚_size
 = (
AºayTy≥
) / ();

485 
	gvÆue_•a˚
[
•a˚_size
];

490 
	s_unwöd_˛ass
 {

491 
poöãr_ty≥
 
	g•a˚
;

492 
	gÆªady_buût
;

493 
_unwöd_˛ass
(
poöãr_ty≥
 
p
Ë: 
•a˚
’), 
Æªady_buût
(0) {}

494 ~
_unwöd_˛ass
() {

495 if(
	g•a˚
) {

496 
size_t
 
	gi
 = 
Æªady_buût
; i > 0 ; --òË
	g•a˚
[
i
-1].~
vÆue_ty≥
();

497 (Ë
√w
(
•a˚
Ë
	gWøµî
<
	gdeÁu…_c⁄°ru˘ed
>(
deÁu…_c⁄°ru˘ed
());

501 
	gpublic
:

502 c⁄° 
AºayTy≥
 &
vÆue
() const {

503 *
vp
 = 
c⁄°_ˇ°
<*>(
vÆue_•a˚
);

504  
	gªöãΩªt_ˇ°
<
	gAºayTy≥
 &>(*
	gvp
);

507 
	g¥iv©e
:

508 
Wøµî
();

509 
	gpublic
:

511 
ex∂icô
 
Wøµî
(c⁄° 
AºayTy≥
& 
Ÿhî
) {

512 
_unwöd_˛ass
 
gu¨d
((
poöãr_ty≥
)
vÆue_•a˚
);

513 
poöãr_ty≥
 
	gvp
 = 
ªöãΩªt_ˇ°
<poöãr_ty≥>(&
vÆue_•a˚
);

514 
size_t
 
	gi
 = 0; i < 
	gN
; ++i ) {

515 (Ë
√w
(
vp
++Ë
vÆue_ty≥
(
Ÿhî
[
i
]);

516 ++(
	ggu¨d
.
	gÆªady_buût
);

518 
	ggu¨d
.
	g•a˚
 = 
NULL
;

520 
ex∂icô
 
Wøµî
(c⁄° Wøµî& 
Ÿhî
Ë: 
WøµîBa£
() {

522 
_unwöd_˛ass
 
gu¨d
((
poöãr_ty≥
)
vÆue_•a˚
);

523 
poöãr_ty≥
 
	gdp
 = 
ªöãΩªt_ˇ°
<poöãr_ty≥>(
vÆue_•a˚
);

524 
poöãr_ty≥
 
	g•
 = 
ªöãΩªt_ˇ°
<poöãr_ty≥>(
c⁄°_ˇ°
<*>(
Ÿhî
.
vÆue_•a˚
));

525 
size_t
 
	gi
 = 0; i < 
	gN
; ++i, ++
	gdp
, ++
	g•
) {

526 (Ë
√w
(
dp
Ë
vÆue_ty≥
(*
•
);

527 ++(
	ggu¨d
.
	gÆªady_buût
);

529 
	ggu¨d
.
	g•a˚
 = 
NULL
;

532 
C›yTo
(* 
√wS∑˚
Ëc⁄° 
	g__TBB_ovîride
 {

533 (Ë
√w
(
√wS∑˚
Ë
Wøµî
(*
this
);

536 ~
Wøµî
() {

538 
poöãr_ty≥
 
	gvp
 = 
ªöãΩªt_ˇ°
<poöãr_ty≥>(&
vÆue_•a˚
);

539 
size_t
 
	gi
 = 
N
; i > 0 ; --òË
	gvp
[
i
-1].~
vÆue_ty≥
();

547 
	gãm∂©e
<
	gboﬁ
, 
˛ass
 
	gT1
, cœs†
	gT2
> 
	gpick_⁄e
;

548 
	gãm∂©e
<
˛ass
 
	gT1
, cœs†
	gT2
> 
	gpick_⁄e
<
	gåue
 , T1, T2> { 
T1
 
	tty≥
; };

549 
	gãm∂©e
<
˛ass
 
	gT1
, cœs†
	gT2
> 
	gpick_⁄e
<
	gÁl£
, T1, T2> { 
T2
 
	tty≥
; };

551 
	gãm∂©e
<Åem∂©e<
	g˛ass
> 
˛ass
 
	gSñe˘‹
, 
ty≥«me
 
	gT1
,Åy≥«mê
	gT2
 >

552 
	spick_max
 {

553 
ty≥«me
 
	tpick_⁄e
< (
	tSñe˘‹
<
	tT1
>::
	tvÆue
 > Sñe˘‹<
	tT2
>::vÆue), T1, T2 >::
	tty≥
Åype;

556 
	gãm∂©e
<
ty≥«me
 
	gT
> 
	ssize_of
 { c⁄° 
	gvÆue
 = (
T
); };

558 
	gãm∂©e
< 
size_t
 
	gN
, 
˛ass
 
	gTu∂e
,Åem∂©e<
	g˛ass
> cœs†
	gSñe˘‹
 > 
	spick_tu∂e_max
 {

559 
ty≥«me
 
	tpick_tu∂e_max
<
	tN
-1, 
	tTu∂e
, 
	tSñe˘‹
>::
	tty≥
 
	tLe·MaxTy≥
;

560 
ty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<
	tN
-1, 
	tTu∂e
>::
	tty≥
 
	tThisTy≥
;

561 
ty≥«me
 
	tpick_max
<
	tSñe˘‹
, 
	tLe·MaxTy≥
, 
	tThisTy≥
>::
	tty≥
Åype;

564 
	gãm∂©e
< 
˛ass
 
	gTu∂e
,Åem∂©e<
	g˛ass
> cœs†
	gSñe˘‹
 > 
	gpick_tu∂e_max
<0, Tuple, Selector> {

565 
ty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<0, 
	tTu∂e
>::
	tty≥
Åype;

569 
	gãm∂©e
<
˛ass
 
	gQ
, 
size_t
 
	gN
, cœs†
	gTu∂e
>

570 
	sis_ñemít_of
 {

571 
ty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<
	tN
-1, 
	tTu∂e
>::
	tty≥
 
	tT_i
;

572 c⁄° 
boﬁ
 
	gvÆue
 = 
tbb
::
öã∫Æ
::
is_ßme_ty≥
<
Q
,
	gT_i
>::
vÆue
 || 
is_ñemít_of
<Q,
	gN
-1,
	gTu∂e
>::value;

575 
	gãm∂©e
<
˛ass
 
	gQ
, cœs†
	gTu∂e
>

576 
	gis_ñemít_of
<
	gQ
,0,
	gTu∂e
> {

577 
ty≥«me
 
	ttbb
::
	tÊow
::
	ttu∂e_ñemít
<0, 
	tTu∂e
>::
	tty≥
 
	tT_i
;

578 c⁄° 
boﬁ
 
	gvÆue
 = 
tbb
::
öã∫Æ
::
is_ßme_ty≥
<
Q
,
	gT_i
>::
vÆue
;

584 
	gãm∂©e
<
ty≥«me
 
	gT
> 
	gERROR_Ty≥_NŸ_Ælowed_In_Tagged_Msg_NŸ_Membî_Of_Tu∂e
;

586 
	gãm∂©e
<
ty≥«me
 
	gT
, 
boﬁ
 
	gBUILD_IT
> 
	gdo_if
;

587 
	gãm∂©e
<
ty≥«me
 
	gT
>

588 
	gdo_if
<
	gT
, 
	gåue
> {

589 
c⁄°ru˘
(*
myS∑˚
, c⁄° 
T
& 
x
) {

590 (Ë
√w
(
myS∑˚
Ë
	gWøµî
<
	gT
>(
	gx
);

593 
	gãm∂©e
<
ty≥«me
 
	gT
>

594 
	gdo_if
<
	gT
, 
	gÁl£
> {

595 
c⁄°ru˘
(* , c⁄° 
T
& 
x
) {

598 
	gERROR_Ty≥_NŸ_Ælowed_In_Tagged_Msg_NŸ_Membî_Of_Tu∂e
<
	gT
>::
bad_ty≥
(
x
);

607 
usög
 
	gtbb
::
öã∫Æ
::
pu¬ed_ˇ°
;

608 
	sègged_nuŒ_ty≥
 {};

609 
	gãm∂©e
<
ty≥«me
 
	gTagTy≥
,Åy≥«mê
	gT0
,Åy≥«mê
	gT1
=
ègged_nuŒ_ty≥
,Åy≥«mê
	gT2
Òagged_nuŒ_ty≥,Åy≥«mê
	gT3
=tagged_null_type,

610 
ty≥«me
 
	gT4
=
ègged_nuŒ_ty≥
,Åy≥«mê
	gT5
Òagged_nuŒ_ty≥,Åy≥«mê
	gT6
=tagged_null_type,

611 
ty≥«me
 
	gT7
=
ègged_nuŒ_ty≥
,Åy≥«mê
	gT8
Òagged_nuŒ_ty≥,Åy≥«mê
	gT9
=tagged_null_type>

612 ˛as†
	cègged_msg
 {

613 
tbb
::
	tÊow
::
	ttu∂e
<
	tT0
, 
	tT1
, 
	tT2
, 
	tT3
, 
	tT4


615 #i‡
	t__TBB_VARIADIC_MAX
 >= 6

616 , 
	tT5


618 #i‡
	t__TBB_VARIADIC_MAX
 >= 7

619 , 
	tT6


621 #i‡
	t__TBB_VARIADIC_MAX
 >= 8

622 , 
	tT7


624 #i‡
	t__TBB_VARIADIC_MAX
 >= 9

625 , 
	tT8


627 #i‡
	t__TBB_VARIADIC_MAX
 >= 10

628 , 
	tT9


630 > 
	tTu∂e
;

632 
	g¥iv©e
:

633 ˛as†
	cv¨ü¡
 {

634 c⁄° 
size_t
 
N
 = 
tbb
::
Êow
::
tu∂e_size
<
Tu∂e
>::
vÆue
;

635 
ty≥«me
 
	tpick_tu∂e_max
<
	tN
, 
	tTu∂e
, 
	tÆignmít_of
>::
	tty≥
 
	tAlignTy≥
;

636 
ty≥«me
 
	tpick_tu∂e_max
<
	tN
, 
	tTu∂e
, 
	tsize_of
>::
	tty≥
 
	tMaxSizeTy≥
;

637 c⁄° 
size_t
 
	gMaxNByãs
 = ((
Wøµî
<
MaxSizeTy≥
>)+(
AlignTy≥
)-1);

638 c⁄° 
size_t
 
	gMaxNEÀmíts
 = 
MaxNByãs
/(
AlignTy≥
);

639 
ty≥«me
 
	ttbb
::
	tÆig√d_•a˚
<
	tAlignTy≥
, 
	tMaxNEÀmíts
> 
	tS∑˚Ty≥
;

640 
S∑˚Ty≥
 
	gmy_•a˚
;

641 c⁄° 
size_t
 
	gMaxSize
 = (
S∑˚Ty≥
);

643 
	gpublic
:

644 
v¨ü¡
(Ë{ (Ë
√w
(&
my_•a˚
Ë
Wøµî
<
deÁu…_c⁄°ru˘ed
>(default_constructed()); }

646 
	gãm∂©e
<
ty≥«me
 
	gT
>

647 
v¨ü¡
–c⁄° 
T
& 
x
 ) {

648 
	gdo_if
<
	gT
, 
	gis_ñemít_of
<T, 
	gN
, 
	gTu∂e
>::
vÆue
>::
c⁄°ru˘
(&
my_•a˚
,
x
);

651 
v¨ü¡
(c⁄° v¨ü¡& 
Ÿhî
) {

652 c⁄° 
WøµîBa£
 * 
	gh
 = 
pu¬ed_ˇ°
<c⁄° WøµîBa£ *>(&(
Ÿhî
.
my_•a˚
));

653 
	gh
->
C›yTo
(&
my_•a˚
);

658 
	g›î©‹
=–c⁄° 
v¨ü¡
& 
rhs
 ) {

659 if(&
rhs
 !
this
) {

660 
WøµîBa£
 *
h
 = 
pu¬ed_ˇ°
<WøµîBa£ *>(&
my_•a˚
);

661 
	gh
->~
WøµîBa£
();

662 c⁄° 
WøµîBa£
 *
	gch
 = 
pu¬ed_ˇ°
<c⁄° WøµîBa£ *>(&(
rhs
.
my_•a˚
));

663 
	gch
->
C›yTo
(&
my_•a˚
);

667 
	gãm∂©e
<
ty≥«me
 
	gU
>

668 c⁄° 
	gU
& 
v¨ü¡_ˇ°_to
() const {

669 c⁄° 
	gWøµî
<
	gU
> *
	gh
 = 
dy«mic_ˇ°
<c⁄° 
Wøµî
<
U
>*>(
pu¬ed_ˇ°
<c⁄° 
WøµîBa£
 *>(&
my_•a˚
));

670 if(!
	gh
) {

671 
	gtbb
::
öã∫Æ
::
throw_ex˚±i⁄
(
tbb
::öã∫Æ::
eid_bad_ègged_msg_ˇ°
);

673  
	gh
->
vÆue
();

675 
	gãm∂©e
<
ty≥«me
 
	gU
>

676 
boﬁ
 
v¨ü¡_is_a
(Ëc⁄° {  
	gdy«mic_ˇ°
<c⁄° 
	gWøµî
<
	gU
>*>(
	gpu¬ed_ˇ°
<c⁄° 
	gWøµîBa£
 *>(&
	gmy_•a˚
)Ë!
NULL
; }

678 
boﬁ
 
v¨ü¡_is_deÁu…_c⁄°ru˘ed
(Ëc⁄° { 
	gv¨ü¡_is_a
<
	gdeÁu…_c⁄°ru˘ed
>();}

680 ~
v¨ü¡
() {

681 
WøµîBa£
 *
	gh
 = 
pu¬ed_ˇ°
<WøµîBa£ *>(&
my_•a˚
);

682 
	gh
->~
WøµîBa£
();

686 
TagTy≥
 
	gmy_èg
;

687 
v¨ü¡
 
	gmy_msg
;

689 
	gpublic
:

690 
ègged_msg
(): 
my_èg
(
TagTy≥
(~0)), 
my_msg
(){}

692 
	gãm∂©e
<
ty≥«me
 
	gT
,Åy≥«mê
	gR
>

693 
ègged_msg
(
T
 c⁄° &
ödex
, 
R
 c⁄° &
vÆue
Ë: 
my_èg
(ödex), 
my_msg
(value) {}

695 #i‡
__TBB_CONST_REF_TO_ARRAY_TEMPLATE_PARAM_BROKEN


696 
	gãm∂©e
<
ty≥«me
 
	gT
,Åy≥«mê
	gR
, 
size_t
 
	gN
>

697 
ègged_msg
(
T
 c⁄° &
ödex
, 
R
 (&
vÆue
)[
N
]Ë: 
my_èg
(ödex), 
my_msg
(value) {}

700 
£t_èg
(
TagTy≥
 c⁄° &
ödex
Ë{
	gmy_èg
 = index;}

701 
TagTy≥
 
èg
(Ëc⁄° { 
	gmy_èg
;}

703 
	gãm∂©e
<
ty≥«me
 
	gV
>

704 c⁄° 
	gV
& 
ˇ°_to
(Ëc⁄° { 
	gmy_msg
.
ãm∂©e
 
	gv¨ü¡_ˇ°_to
<V>();}

706 
	gãm∂©e
<
ty≥«me
 
	gV
>

707 
boﬁ
 
is_a
(Ëc⁄° { 
	gmy_msg
.
ãm∂©e
 
	gv¨ü¡_is_a
<
	gV
>();}

709 
boﬁ
 
is_deÁu…_c⁄°ru˘ed
(Ëc⁄° { 
	gmy_msg
.
v¨ü¡_is_deÁu…_c⁄°ru˘ed
();}

713 
	gãm∂©e
<
ty≥«me
 
	gV
,Åy≥«mê
	gT
>

714 c⁄° 
	gV
& 
	$ˇ°_to
(
T
 c⁄° &
t
Ë{ Å.
ãm∂©e
 
ˇ°_to
<
V
>(); 
	}
}

716 
	gãm∂©e
<
ty≥«me
 
	gV
,Åy≥«mê
	gT
>

717 
boﬁ
 
	$is_a
(
T
 c⁄° &
t
Ë{ Å.
ãm∂©e
 
is_a
<
V
>(); 
	}
}

719 
	e›_°©
 { 
	gWAIT
 = 0, 
	gSUCCEEDED
, 
	gFAILED
 };

	@/usr/include/tbb/internal/_tbb_strings.h

17 
TBB_STRING_RESOURCE
(
FLOW_BROADCAST_NODE
, "broadcast_node")

18 
TBB_STRING_RESOURCE
(
FLOW_BUFFER_NODE
, "buffer_node")

19 
TBB_STRING_RESOURCE
(
FLOW_CONTINUE_NODE
, "continue_node")

20 
TBB_STRING_RESOURCE
(
FLOW_FUNCTION_NODE
, "function_node")

21 
TBB_STRING_RESOURCE
(
FLOW_JOIN_NODE_QUEUEING
, "join_node (queueing)")

22 
TBB_STRING_RESOURCE
(
FLOW_JOIN_NODE_RESERVING
, "join_node (reserving)")

23 
TBB_STRING_RESOURCE
(
FLOW_JOIN_NODE_TAG_MATCHING
, "join_node (tag_matching)")

24 
TBB_STRING_RESOURCE
(
FLOW_LIMITER_NODE
, "limiter_node")

25 
TBB_STRING_RESOURCE
(
FLOW_MULTIFUNCTION_NODE
, "multifunction_node")

26 
TBB_STRING_RESOURCE
(
FLOW_OR_NODE
, "or_node")

27 
TBB_STRING_RESOURCE
(
FLOW_OVERWRITE_NODE
, "overwrite_node")

28 
TBB_STRING_RESOURCE
(
FLOW_PRIORITY_QUEUE_NODE
, "priority_queue_node")

29 
TBB_STRING_RESOURCE
(
FLOW_QUEUE_NODE
, "queue_node")

30 
TBB_STRING_RESOURCE
(
FLOW_SEQUENCER_NODE
, "sequencer_node")

31 
TBB_STRING_RESOURCE
(
FLOW_SOURCE_NODE
, "source_node")

32 
TBB_STRING_RESOURCE
(
FLOW_SPLIT_NODE
, "split_node")

33 
TBB_STRING_RESOURCE
(
FLOW_WRITE_ONCE_NODE
, "write_once_node")

34 
TBB_STRING_RESOURCE
(
FLOW_BODY
, "body")

35 
TBB_STRING_RESOURCE
(
FLOW_GRAPH
, "graph")

36 
TBB_STRING_RESOURCE
(
FLOW_NODE
, "node")

37 
TBB_STRING_RESOURCE
(
FLOW_INPUT_PORT
, "input_port")

38 
TBB_STRING_RESOURCE
(
FLOW_INPUT_PORT_0
, "input_port_0")

39 
TBB_STRING_RESOURCE
(
FLOW_INPUT_PORT_1
, "input_port_1")

40 
TBB_STRING_RESOURCE
(
FLOW_INPUT_PORT_2
, "input_port_2")

41 
TBB_STRING_RESOURCE
(
FLOW_INPUT_PORT_3
, "input_port_3")

42 
TBB_STRING_RESOURCE
(
FLOW_INPUT_PORT_4
, "input_port_4")

43 
TBB_STRING_RESOURCE
(
FLOW_INPUT_PORT_5
, "input_port_5")

44 
TBB_STRING_RESOURCE
(
FLOW_INPUT_PORT_6
, "input_port_6")

45 
TBB_STRING_RESOURCE
(
FLOW_INPUT_PORT_7
, "input_port_7")

46 
TBB_STRING_RESOURCE
(
FLOW_INPUT_PORT_8
, "input_port_8")

47 
TBB_STRING_RESOURCE
(
FLOW_INPUT_PORT_9
, "input_port_9")

48 
TBB_STRING_RESOURCE
(
FLOW_OUTPUT_PORT
, "output_port")

49 
TBB_STRING_RESOURCE
(
FLOW_OUTPUT_PORT_0
, "output_port_0")

50 
TBB_STRING_RESOURCE
(
FLOW_OUTPUT_PORT_1
, "output_port_1")

51 
TBB_STRING_RESOURCE
(
FLOW_OUTPUT_PORT_2
, "output_port_2")

52 
TBB_STRING_RESOURCE
(
FLOW_OUTPUT_PORT_3
, "output_port_3")

53 
TBB_STRING_RESOURCE
(
FLOW_OUTPUT_PORT_4
, "output_port_4")

54 
TBB_STRING_RESOURCE
(
FLOW_OUTPUT_PORT_5
, "output_port_5")

55 
TBB_STRING_RESOURCE
(
FLOW_OUTPUT_PORT_6
, "output_port_6")

56 
TBB_STRING_RESOURCE
(
FLOW_OUTPUT_PORT_7
, "output_port_7")

57 
TBB_STRING_RESOURCE
(
FLOW_OUTPUT_PORT_8
, "output_port_8")

58 
TBB_STRING_RESOURCE
(
FLOW_OUTPUT_PORT_9
, "output_port_9")

59 
TBB_STRING_RESOURCE
(
FLOW_OBJECT_NAME
, "object_name")

60 
TBB_STRING_RESOURCE
(
FLOW_NULL
, "null")

61 
TBB_STRING_RESOURCE
(
FLOW_INDEXER_NODE
, "indexer_node")

62 
TBB_STRING_RESOURCE
(
FLOW_COMPOSITE_NODE
, "composite_node")

63 
TBB_STRING_RESOURCE
(
FLOW_ASYNC_NODE
, "async_node")

64 
TBB_STRING_RESOURCE
(
FLOW_OPENCL_NODE
, "opencl_node")

65 
TBB_STRING_RESOURCE
(
ALGORITHM
, "tbb_algorithm")

66 
TBB_STRING_RESOURCE
(
PARALLEL_FOR
, "tbb_parallel_for")

67 
TBB_STRING_RESOURCE
(
PARALLEL_DO
, "tbb_parallel_do")

68 
TBB_STRING_RESOURCE
(
PARALLEL_INVOKE
, "tbb_parallel_invoke")

69 
TBB_STRING_RESOURCE
(
PARALLEL_REDUCE
, "tbb_parallel_reduce")

70 
TBB_STRING_RESOURCE
(
PARALLEL_SCAN
, "tbb_parallel_scan")

71 
TBB_STRING_RESOURCE
(
PARALLEL_SORT
, "tbb_parallel_sort")

72 
TBB_STRING_RESOURCE
(
CUSTOM_CTX
, "tbb_custom")

73 
TBB_STRING_RESOURCE
(
FLOW_TASKS
, "tbb_flow_graph")

74 
TBB_STRING_RESOURCE
(
PARALLEL_FOR_TASK
, "tbb_parallel_for_task")

76 
TBB_STRING_RESOURCE
(
USER_EVENT
, "fgt_user_event")

77 #i‡
__TBB_CPF_BUILD
 || (
TBB_PREVIEW_FLOW_GRAPH_TRACE
 && 
TBB_USE_THREADING_TOOLS
)

78 
TBB_STRING_RESOURCE
(
CODE_ADDRESS
, "code_address")

	@/usr/include/tbb/machine/windows_api.h

17 #i‚de‡
__TBB_machöe_wödows_≠i_H


18 
	#__TBB_machöe_wödows_≠i_H


	)

20 #i‡
_WIN32
 || 
_WIN64


22 
	~<wödows.h
>

24 #i‡
_WIN32_WINNT
 < 0x0600

27 #i‡!
deföed
(
WINBASEAPI
Ë|| (
_WIN32_WINNT
 < 0x0501 && 
_MSC_VER
 == 1400)

28 
	#__TBB_WINBASEAPI
 "C"

	)

30 
	#__TBB_WINBASEAPI
 
WINBASEAPI


	)

32 
__TBB_WINBASEAPI
 
BOOL
 
WINAPI
 
TryE¡îCrôiˇlSe˘i⁄
–
LPCRITICAL_SECTION
 );

33 
__TBB_WINBASEAPI
 
BOOL
 
WINAPI
 
InôülizeCrôiˇlSe˘i⁄AndSpöCou¡
–
LPCRITICAL_SECTION
, 
DWORD
 );

35 
	#InôülizeCrôiˇlSe˘i⁄Ex
 
ölöeInôülizeCrôiˇlSe˘i⁄Ex


	)

36 
	#Cª©eSem≠h‹eEx
 
ölöeCª©eSem≠h‹eEx


	)

37 
	#Cª©eEvítEx
 
ölöeCª©eEvítEx


	)

38 
ölöe
 
BOOL
 
WINAPI
 
	$ölöeInôülizeCrôiˇlSe˘i⁄Ex
–
LPCRITICAL_SECTION
 
ÕCrôiˇlSe˘i⁄
, 
DWORD
 
dwSpöCou¡
, DWORD )

40  
	`InôülizeCrôiˇlSe˘i⁄AndSpöCou¡
–
ÕCrôiˇlSe˘i⁄
, 
dwSpöCou¡
 );

41 
	}
}

42 
ölöe
 
HANDLE
 
WINAPI
 
	$ölöeCª©eSem≠h‹eEx
–
LPSECURITY_ATTRIBUTES
 
ÕSem≠h‹eAâribuãs
, 
LONG
 
lInôülCou¡
, LONG 
lMaximumCou¡
, 
LPCTSTR
 
ÕName
, 
DWORD
, DWORD )

44  
	`Cª©eSem≠h‹e
–
ÕSem≠h‹eAâribuãs
, 
lInôülCou¡
, 
lMaximumCou¡
, 
ÕName
 );

45 
	}
}

46 
ölöe
 
HANDLE
 
WINAPI
 
	$ölöeCª©eEvítEx
–
LPSECURITY_ATTRIBUTES
 
ÕEvítAâribuãs
, 
LPCTSTR
 
ÕName
, 
DWORD
 
dwFœgs
, DWORD )

48 
BOOL
 
m™uÆ_ª£t
 = 
dwFœgs
&0x00000001 ? 
TRUE
 : 
FALSE
;

49 
BOOL
 
öôül_£t
 = 
dwFœgs
&0x00000002 ? 
TRUE
 : 
FALSE
;

50  
	`Cª©eEvít
–
ÕEvítAâribuãs
, 
m™uÆ_ª£t
, 
öôül_£t
, 
ÕName
 );

51 
	}
}

54 #i‡
deföed
(
RTL_SRWLOCK_INIT
)

55 #i‚de‡
__TBB_USE_SRWLOCK


57 
	#__TBB_USE_SRWLOCK
 0

	)

62 #îr‹ 
tbb
/
machöe
/
wödows_≠i
.
h
 
should
 
⁄ly
 
be
 
u£d
 
Wödows
 
ba£d
 
∂©f‹ms


	@/usr/include/tbb/mutex.h

17 
	~"öã∫Æ/_dïªˇãd_hódî_mesßge_gu¨d.h
"

19 #i‡!
deföed
(
__TBB_show_dïªˇti⁄_mesßge_muãx_H
Ë&& deföed(
__TBB_show_dïªˇãd_hódî_mesßge
)

20 
	#__TBB_show_dïªˇti⁄_mesßge_muãx_H


	)

21 #¥agm®
mesßge
("TBB Warning:Åbb/mutex.h is deprecated. For details,Ölease see Deprecated Featuresáppendix inÅhe TBBÑeference manual.")

24 #i‡
deföed
(
__TBB_show_dïªˇãd_hódî_mesßge
)

25 #unde‡
__TBB_show_dïªˇãd_hódî_mesßge


28 #i‚de‡
__TBB_muãx_H


29 
	#__TBB_muãx_H


	)

31 
	#__TBB_muãx_H_ö˛ude_¨ó


	)

32 
	~"öã∫Æ/_w¨nög_suµªss_íabÀ_nŸi˚.h
"

34 #i‡
_WIN32
||
_WIN64


35 
	~"machöe/wödows_≠i.h
"

37 
	~<±hªad.h
>

40 
	~<√w
>

41 
	~"Æig√d_•a˚.h
"

42 
	~"tbb_°ddef.h
"

43 
	~"tbb_¥ofûög.h
"

45 
«me•a˚
 
	gtbb
 {

49 
˛ass
 
__TBB_DEPRECATED_VERBOSE_MSG
("tbb::¸ôiˇl_£˘i⁄ i†dïªˇãd, u£ std::muãx"Ë
	gmuãx
 : 
öã∫Æ
::
muãx_c›y_dïªˇãd_™d_dißbÀd
 {

50 
public
:

52 
muãx
() {

53 #i‡
TBB_USE_ASSERT
 || 
TBB_USE_THREADING_TOOLS


54 
öã∫Æ_c⁄°ru˘
();

56 #i‡
_WIN32
||
_WIN64


57 
InôülizeCrôiˇlSe˘i⁄Ex
(&
im∂
, 4000, 0);

59 
	gîr‹_code
 = 
±hªad_muãx_öô
(&
im∂
,
NULL
);

60 if–
	gîr‹_code
 )

61 
	gtbb
::
öã∫Æ
::
h™dÀ_≥º‹
(
îr‹_code
,"mutex:Öthread_mutex_init failed");

66 ~
muãx
() {

67 #i‡
TBB_USE_ASSERT


68 
öã∫Æ_de°roy
();

70 #i‡
_WIN32
||
_WIN64


71 
DñëeCrôiˇlSe˘i⁄
(&
im∂
);

73 
±hªad_muãx_de°roy
(&
im∂
);

79 
˛ass
 
	gsc›ed_lock
;

80 
‰õnd
 
˛ass
 
	gsc›ed_lock
;

85 ˛as†
	csc›ed_lock
 : 
öã∫Æ
::
no_c›y
 {

86 
public
:

88 
sc›ed_lock
(Ë: 
my_muãx
(
NULL
) {};

91 
sc›ed_lock
–
muãx
& mutex ) {

92 
acquúe
–
muãx
 );

96 ~
sc›ed_lock
() {

97 if–
	gmy_muãx
 )

98 
ªÀa£
();

102 
acquúe
–
muãx
& mutex ) {

103 #i‡
TBB_USE_ASSERT


104 
öã∫Æ_acquúe
(
muãx
);

106 
	gmuãx
.
lock
();

107 
	gmy_muãx
 = &
muãx
;

112 
boﬁ
 
åy_acquúe
–
muãx
& mutex ) {

113 #i‡
TBB_USE_ASSERT


114  
öã∫Æ_åy_acquúe
 (
muãx
);

116 
boﬁ
 
	gªsu…
 = 
muãx
.
åy_lock
();

117 if–
	gªsu…
 )

118 
	gmy_muãx
 = &
muãx
;

119  
	gªsu…
;

124 
ªÀa£
() {

125 #i‡
TBB_USE_ASSERT


126 
öã∫Æ_ªÀa£
 ();

128 
	gmy_muãx
->
u∆ock
();

129 
	gmy_muãx
 = 
NULL
;

133 
	g¥iv©e
:

135 
muãx
* 
my_muãx
;

138 
__TBB_EXPORTED_METHOD
 
öã∫Æ_acquúe
–
muãx
& 
m
 );

141 
boﬁ
 
__TBB_EXPORTED_METHOD
 
öã∫Æ_åy_acquúe
–
muãx
& 
m
 );

144 
__TBB_EXPORTED_METHOD
 
öã∫Æ_ªÀa£
();

146 
‰õnd
 
˛ass
 
	gmuãx
;

150 c⁄° 
boﬁ
 
	gis_rw_muãx
 = 
Ál£
;

151 c⁄° 
boﬁ
 
	gis_ªcursive_muãx
 = 
Ál£
;

152 c⁄° 
boﬁ
 
	gis_Áú_muãx
 = 
Ál£
;

157 
lock
() {

158 #i‡
TBB_USE_ASSERT


159 
	gÆig√d_•a˚
<
	gsc›ed_lock
> 
	gtmp
;

160 
√w
(
tmp
.
begö
()Ë
sc›ed_lock
(*
this
);

162 #i‡
_WIN32
||
_WIN64


163 
E¡îCrôiˇlSe˘i⁄
(&
im∂
);

165 
	gîr‹_code
 = 
±hªad_muãx_lock
(&
im∂
);

166 if–
	gîr‹_code
 )

167 
	gtbb
::
öã∫Æ
::
h™dÀ_≥º‹
(
îr‹_code
,"mutex:Öthread_mutex_lock failed");

174 
boﬁ
 
åy_lock
() {

175 #i‡
TBB_USE_ASSERT


176 
	gÆig√d_•a˚
<
	gsc›ed_lock
> 
	gtmp
;

177 
	gsc›ed_lock
& 
	gs
 = *
tmp
.
begö
();

178 
	gs
.
	gmy_muãx
 = 
NULL
;

179  
	gs
.
öã∫Æ_åy_acquúe
(*
this
);

181 #i‡
_WIN32
||
_WIN64


182  
TryE¡îCrôiˇlSe˘i⁄
(&
im∂
)!=0;

184  
±hªad_muãx_åylock
(&
im∂
)==0;

190 
u∆ock
() {

191 #i‡
TBB_USE_ASSERT


192 
	gÆig√d_•a˚
<
	gsc›ed_lock
> 
	gtmp
;

193 
	gsc›ed_lock
& 
	gs
 = *
tmp
.
begö
();

194 
	gs
.
	gmy_muãx
 = 
this
;

195 
	gs
.
öã∫Æ_ªÀa£
();

197 #i‡
_WIN32
||
_WIN64


198 
LóveCrôiˇlSe˘i⁄
(&
im∂
);

200 
±hªad_muãx_u∆ock
(&
im∂
);

206 #i‡
_WIN32
||
_WIN64


207 
LPCRITICAL_SECTION
 
	t«tive_h™dÀ_ty≥
;

209 
±hªad_muãx_t
* 
	t«tive_h™dÀ_ty≥
;

211 
«tive_h™dÀ_ty≥
 
«tive_h™dÀ
(Ë{  (
	g«tive_h™dÀ_ty≥
Ë&
	gim∂
; }

213 
	e°©e_t
 {

214 
	gINITIALIZED
=0x1234,

215 
	gDESTROYED
=0x789A,

216 
	gHELD
=0x56CD

218 
	g¥iv©e
:

219 #i‡
_WIN32
||
_WIN64


220 
CRITICAL_SECTION
 
im∂
;

221 
°©e_t
 
	g°©e
;

223 
±hªad_muãx_t
 
	gim∂
;

227 
__TBB_EXPORTED_METHOD
 
öã∫Æ_c⁄°ru˘
();

230 
__TBB_EXPORTED_METHOD
 
öã∫Æ_de°roy
();

232 #i‡
_WIN32
||
_WIN64


233 
	gpublic
:

235 
£t_°©e
–
°©e_t
 
to
 ) { 
°©e
 =Åo; }

239 
__TBB_DEFINE_PROFILING_SET_NAME
(
muãx
)

243 
	~"öã∫Æ/_w¨nög_suµªss_dißbÀ_nŸi˚.h
"

244 #unde‡
__TBB_muãx_H_ö˛ude_¨ó


	@/usr/include/tbb/partitioner.h

17 #i‚de‡
__TBB_∑πôi⁄î_H


18 
	#__TBB_∑πôi⁄î_H


	)

20 
	#__TBB_∑πôi⁄î_H_ö˛ude_¨ó


	)

21 
	~"öã∫Æ/_w¨nög_suµªss_íabÀ_nŸi˚.h
"

23 #i‚de‡
__TBB_INITIAL_CHUNKS


25 
	#__TBB_INITIAL_CHUNKS
 2

	)

27 #i‚de‡
__TBB_RANGE_POOL_CAPACITY


29 
	#__TBB_RANGE_POOL_CAPACITY
 8

	)

31 #i‚de‡
__TBB_INIT_DEPTH


33 
	#__TBB_INIT_DEPTH
 5

	)

35 #i‚de‡
__TBB_DEMAND_DEPTH_ADD


37 
	#__TBB_DEMAND_DEPTH_ADD
 1

	)

39 #i‚de‡
__TBB_STATIC_THRESHOLD


41 
	#__TBB_STATIC_THRESHOLD
 40000

	)

43 #i‡
__TBB_DEFINE_MIC


44 
	#__TBB_NONUNIFORM_TASK_CREATION
 1

	)

45 #ifde‡
__TBB_time_°amp


46 
	#__TBB_USE_MACHINE_TIME_STAMPS
 1

	)

47 
	#__TBB_èsk_duøti⁄
(Ë
__TBB_STATIC_THRESHOLD


	)

51 
	~"èsk.h
"

52 
	~"èsk_¨ía.h
"

53 
	~"Æig√d_•a˚.h
"

54 
	~"©omic.h
"

55 
	~"öã∫Æ/_ãm∂©e_hñ≥rs.h
"

57 #i‡
deföed
(
_MSC_VER
Ë&& !deföed(
__INTEL_COMPILER
)

59 #¥agm®
w¨nög
 (
push
)

60 #¥agm®
w¨nög
 (
dißbÀ
: 4244)

63 
«me•a˚
 
	gtbb
 {

65 
˛ass
 
	gauto_∑πôi⁄î
;

66 
˛ass
 
	gsim∂e_∑πôi⁄î
;

67 
˛ass
 
	g°©ic_∑πôi⁄î
;

68 
˛ass
 
	gafföôy_∑πôi⁄î
;

70 
«me•a˚
 
	göãrÁ˚9
 {

71 
«me•a˚
 
	göã∫Æ
 {

72 
˛ass
 
	gafföôy_∑πôi⁄_ty≥
;

76 
«me•a˚
 
	göã∫Æ
 {

77 
size_t
 
__TBB_EXPORTED_FUNC
 
gë_öôül_auto_∑πôi⁄î_divis‹
();

80 ˛as†
	cafföôy_∑πôi⁄î_ba£_v3
: 
no_c›y
 {

81 
‰õnd
 
˛ass
 
tbb
::
afföôy_∑πôi⁄î
;

82 
‰õnd
 
˛ass
 
	gtbb
::
öãrÁ˚9
::
öã∫Æ
::
afföôy_∑πôi⁄_ty≥
;

85 
afföôy_id
* 
	gmy_¨øy
;

87 
size_t
 
	gmy_size
;

89 
afföôy_∑πôi⁄î_ba£_v3
(Ë: 
my_¨øy
(
NULL
), 
my_size
(0) {}

91 ~
afföôy_∑πôi⁄î_ba£_v3
(Ë{
ªsize
(0);}

94 
__TBB_EXPORTED_METHOD
 
ªsize
–
Á˘‹
 );

98 ˛as†
	c∑πôi⁄_ty≥_ba£
 {

99 
	gpublic
:

100 
£t_afföôy
–
èsk
 & ) {}

101 
nŸe_afföôy
–
èsk
::
afföôy_id
 ) {}

102 
èsk
* 
c⁄töue_a·î_execuã_ønge
(Ë{ 
NULL
;}

103 
boﬁ
 
decide_whëhî_to_dñay
(Ë{ 
	gÁl£
;}

104 
•awn_‹_dñay
–
boﬁ
, 
èsk
& 
b
 ) {

105 
	gèsk
::
•awn
(
b
);

109 
	gãm∂©e
<
ty≥«me
 
	gR™ge
,Åy≥«mê
	gBody
,Åy≥«mê
	gP¨tôi⁄î
> 
˛ass
 
	g°¨t_sˇn
;

113 
«me•a˚
 
	g£rül
 {

114 
«me•a˚
 
	göãrÁ˚9
 {

115 
	gãm∂©e
<
ty≥«me
 
	gR™ge
,Åy≥«mê
	gBody
,Åy≥«mê
	gP¨tôi⁄î
> 
˛ass
 
	g°¨t_f‹
;

119 
«me•a˚
 
	göãrÁ˚9
 {

121 
«me•a˚
 
	göã∫Æ
 {

122 
usög
 
«me•a˚
 
	gtbb
::
öã∫Æ
;

123 
	gãm∂©e
<
ty≥«me
 
	gR™ge
,Åy≥«mê
	gBody
,Åy≥«mê
	gP¨tôi⁄î
> 
˛ass
 
	g°¨t_f‹
;

124 
	gãm∂©e
<
ty≥«me
 
	gR™ge
,Åy≥«mê
	gBody
,Åy≥«mê
	gP¨tôi⁄î
> 
˛ass
 
	g°¨t_ªdu˚
;

125 
	gãm∂©e
<
ty≥«me
 
	gR™ge
,Åy≥«mê
	gBody
,Åy≥«mê
	gP¨tôi⁄î
> 
˛ass
 
	g°¨t_dëîmöi°ic_ªdu˚
;

128 ˛as†
	cÊag_èsk
: 
public
 
èsk
 {

129 
public
:

130 
tbb
::
©omic
<
boﬁ
> 
my_chûd_°ﬁí
;

131 
Êag_èsk
(Ë{ 
	gmy_chûd_°ﬁí
 = 
Ál£
; }

132 
èsk
* 
execuã
(Ë
	g__TBB_ovîride
 {  
	gNULL
; }

133 
m¨k_èsk_°ﬁí
(
èsk
 &
t
) {

134 
	gtbb
::
©omic
<
boﬁ
> &
Êag
 = 
°©ic_ˇ°
<
Êag_èsk
*>(
t
.
∑ª¡
())->
my_chûd_°ﬁí
;

135 #i‡
TBB_USE_THREADING_TOOLS


137 
	gÊag
.
	g„tch_™d_°‹e
<
	gªÀa£
>(
	gåue
);

139 
	gÊag
 = 
åue
;

142 
boﬁ
 
is_≥î_°ﬁí
(
èsk
 &
t
) {

143  
	g°©ic_ˇ°
<
	gÊag_èsk
*>(
	gt
.
∑ª¡
())->
	gmy_chûd_°ﬁí
;

150 
	tdïth_t
;

153 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
dïth_t
 
	gMaxC≠acôy
>

154 ˛as†
	cønge_ve˘‹
 {

155 
dïth_t
 
	gmy_hód
;

156 
dïth_t
 
	gmy_èû
;

157 
dïth_t
 
	gmy_size
;

158 
dïth_t
 
	gmy_dïth
[
MaxC≠acôy
];

159 
	gtbb
::
Æig√d_•a˚
<
T
, 
	gMaxC≠acôy
> 
	gmy_poﬁ
;

161 
	gpublic
:

163 
ønge_ve˘‹
(c⁄° 
T
& 
ñem
Ë: 
my_hód
(0), 
my_èû
(0), 
my_size
(1) {

164 
	gmy_dïth
[0] = 0;

165 
√w
–
°©ic_ˇ°
<*>(
my_poﬁ
.
begö
()ËË
T
(
ñem
);

167 ~
ønge_ve˘‹
() {

168  !
em±y
(ËË
p›_back
();

170 
boﬁ
 
em±y
(Ëc⁄° {  
	gmy_size
 == 0; }

171 
dïth_t
 
size
(Ëc⁄° {  
	gmy_size
; }

174 
•lô_to_fûl
(
dïth_t
 
max_dïth
) {

175  
	gmy_size
 < 
	gMaxC≠acôy
 && 
is_divisibÀ
(
max_dïth
) ) {

176 
dïth_t
 
	g¥ev
 = 
my_hód
;

177 
	gmy_hód
 = (
my_hód
 + 1Ë% 
MaxC≠acôy
;

178 
√w
(
my_poﬁ
.
begö
()+
my_hód
Ë
T
(my_poﬁ.begö()[
¥ev
]);

179 
	gmy_poﬁ
.
begö
()[
¥ev
].~
T
();

180 
√w
(
my_poﬁ
.
begö
()+
¥ev
Ë
T
(my_poﬁ.begö()[
my_hód
], 
•lô
());

181 
	gmy_dïth
[
my_hód
] = ++
my_dïth
[
¥ev
];

182 
	gmy_size
++;

185 
p›_back
() {

186 
__TBB_ASSERT
(
my_size
 > 0, "range_vector::pop_back() withÉmpty size");

187 
	gmy_poﬁ
.
begö
()[
my_hód
].~
T
();

188 
	gmy_size
--;

189 
	gmy_hód
 = (
my_hód
 + 
MaxC≠acôy
 - 1) % MaxCapacity;

191 
p›_‰⁄t
() {

192 
__TBB_ASSERT
(
my_size
 > 0, "range_vector::pop_front() withÉmpty size");

193 
	gmy_poﬁ
.
begö
()[
my_èû
].~
T
();

194 
	gmy_size
--;

195 
	gmy_èû
 = (
my_èû
 + 1Ë% 
MaxC≠acôy
;

197 
	gT
& 
back
() {

198 
__TBB_ASSERT
(
my_size
 > 0, "range_vector::back() withÉmpty size");

199  
	gmy_poﬁ
.
begö
()[
my_hód
];

201 
	gT
& 
‰⁄t
() {

202 
__TBB_ASSERT
(
my_size
 > 0, "range_vector::front() withÉmpty size");

203  
	gmy_poﬁ
.
begö
()[
my_èû
];

206 
dïth_t
 
‰⁄t_dïth
() {

207 
__TBB_ASSERT
(
my_size
 > 0, "range_vector::front_depth() withÉmpty size");

208  
	gmy_dïth
[
my_èû
];

210 
dïth_t
 
back_dïth
() {

211 
__TBB_ASSERT
(
my_size
 > 0, "range_vector::back_depth() withÉmpty size");

212  
	gmy_dïth
[
my_hód
];

214 
boﬁ
 
is_divisibÀ
(
dïth_t
 
max_dïth
) {

215  
back_dïth
(Ë< 
	gmax_dïth
 && 
back
().
is_divisibÀ
();

220 
	gãm∂©e
 <
ty≥«me
 
	gP¨tôi⁄
>

221 
	s∑πôi⁄_ty≥_ba£
 {

222 
•lô
 
	t•lô_ty≥
;

224 
£t_afföôy
–
èsk
 & ) {}

225 
nŸe_afföôy
–
èsk
::
afföôy_id
 ) {}

226 
boﬁ
 
check_beög_°ﬁí
(
èsk
 &Ë{  
Ál£
; }

227 
boﬁ
 
check_f‹_dem™d
(
èsk
 &Ë{  
	gÁl£
; }

228 
boﬁ
 
is_divisibÀ
(Ë{  
	gåue
; }

229 
dïth_t
 
max_dïth
() {  0; }

230 
Æign_dïth
(
dïth_t
) { }

231 
	gãm∂©e
 <
ty≥«me
 
	gR™ge
> 
•lô_ty≥
 
gë_•lô
(Ë{  
•lô
(); }

232 
	gP¨tôi⁄
& 
£lf
(Ë{  *
	g°©ic_ˇ°
<P¨tôi⁄*>(
	gthis
); }

234 
	gãm∂©e
<
ty≥«me
 
	gSèπTy≥
,Åy≥«mê
	gR™ge
>

235 
w‹k_bÆ™˚
(
SèπTy≥
 &
°¨t
, 
R™ge
 &
ønge
) {

236 
	g°¨t
.
run_body
–
ønge
 );

239 
	gãm∂©e
<
ty≥«me
 
	gSèπTy≥
,Åy≥«mê
	gR™ge
>

240 
execuã
(
SèπTy≥
 &
°¨t
, 
R™ge
 &
ønge
) {

248 i‡–
	gønge
.
is_divisibÀ
() ) {

249 i‡–
£lf
().
is_divisibÀ
() ) {

251 
ty≥«me
 
	gP¨tôi⁄
::
•lô_ty≥
 
•lô_obj
 = 
£lf
().
ãm∂©e
 
gë_•lô
<
R™ge
>();

252 
	g°¨t
.
of„r_w‹k
–
•lô_obj
 );

253 }  
	gønge
.
is_divisibÀ
(Ë&& 
£lf
().is_divisible() );

256 
£lf
().
w‹k_bÆ™˚
(
°¨t
, 
ønge
);

261 
	gãm∂©e
 <
ty≥«me
 
	gP¨tôi⁄
>

262 
	gad≠tive_mode
 : 
∑πôi⁄_ty≥_ba£
<
P¨tôi⁄
> {

263 
P¨tôi⁄
 
	tmy_∑πôi⁄
;

264 
size_t
 
	gmy_divis‹
;

269 c⁄° 
	gÁ˘‹
 = 1;

270 
ad≠tive_mode
(Ë: 
my_divis‹
(
tbb
::
öã∫Æ
::
gë_öôül_auto_∑πôi⁄î_divis‹
(Ë/ 4 * 
my_∑πôi⁄
::
Á˘‹
) {}

271 
ad≠tive_mode
◊d≠tive_modê&
§c
, 
•lô
Ë: 
my_divis‹
(
do_•lô
(src, split())) {}

273 
size_t
 
do_•lô
(
ad≠tive_mode
 &
§c
, 
•lô
) {

274  
	g§c
.
	gmy_divis‹
 /= 2u;

283 
	gãm∂©e
 <
ty≥«me
 
	gR™ge
, 
	gty≥«me
 = >

284 
	s¥›‹ti⁄_hñ≥r
 {

285 
¥›‹ti⁄Æ_•lô
 
gë_•lô
(
size_t
) { Öroportional_split(1,1); }

287 
	gãm∂©e
 <
ty≥«me
 
	gR™ge
>

288 
	g¥›‹ti⁄_hñ≥r
<
	gR™ge
, 
ty≥«me
 
	gíabÀ_if
<R™ge::
is_•lôèbÀ_ö_¥›‹ti⁄
, >::
ty≥
> {

289 
¥›‹ti⁄Æ_•lô
 
gë_•lô
(
size_t
 
n
) {

290 #i‡
__TBB_NONUNIFORM_TASK_CREATION


291 
size_t
 
right
 = (
n
 + 2) / 3;

293 
size_t
 
	gright
 = 
n
 / 2;

295 
size_t
 
	gÀ·
 = 
n
 - 
right
;

296  
¥›‹ti⁄Æ_•lô
(
À·
, 
right
);

301 
	gãm∂©e
 <
ty≥«me
 
	gP¨tôi⁄
>

302 
	g¥›‹ti⁄Æ_mode
 : 
ad≠tive_mode
<
P¨tôi⁄
> {

303 
P¨tôi⁄
 
	tmy_∑πôi⁄
;

304 
usög
 
	g∑πôi⁄_ty≥_ba£
<
	gP¨tôi⁄
>::
£lf
;

306 
¥›‹ti⁄Æ_mode
(Ë: 
ad≠tive_mode
<
P¨tôi⁄
>() {}

307 
¥›‹ti⁄Æ_mode
’r›‹ti⁄Æ_modê&
§c
, 
•lô
Ë: 
ad≠tive_mode
<
P¨tôi⁄
>(src, split()) {}

308 
¥›‹ti⁄Æ_mode
’r›‹ti⁄Æ_modê&
§c
, c⁄° 
¥›‹ti⁄Æ_•lô
& 
•lô_obj
Ë{ 
£lf
().
	gmy_divis‹
 = 
do_•lô
(src, split_obj); }

309 
size_t
 
do_•lô
(
¥›‹ti⁄Æ_mode
 &
§c
, c⁄° 
¥›‹ti⁄Æ_•lô
& 
•lô_obj
) {

310 #i‡
__TBB_ENABLE_RANGE_FEEDBACK


311 
size_t
 
	gp‹ti⁄
 = size_t((
§c
.
my_divis‹
Ë* (
•lô_obj
.
right
())

312 / (
•lô_obj
.
À·
(Ë+ s∂ô_obj.
right
()) + 0.5f);

314 
size_t
 
	gp‹ti⁄
 = 
•lô_obj
.
right
(Ë* 
my_∑πôi⁄
::
Á˘‹
;

316 
	gp‹ti⁄
 = (
p‹ti⁄
 + 
my_∑πôi⁄
::
Á˘‹
/2) & (0ul - my_partition::factor);

317 #i‡
__TBB_ENABLE_RANGE_FEEDBACK


319 i‡(!
	gp‹ti⁄
)

320 
	gp‹ti⁄
 = 
my_∑πôi⁄
::
Á˘‹
;

321 i‡(
	gp‹ti⁄
 =
§c
.
my_divis‹
)

322 
p‹ti⁄
 = 
§c
.
my_divis‹
 - 
my_∑πôi⁄
::
Á˘‹
;

324 
	g§c
.
	gmy_divis‹
 -
p‹ti⁄
;

325  
	gp‹ti⁄
;

327 
boﬁ
 
is_divisibÀ
() {

328  
£lf
().
	gmy_divis‹
 > 
	gmy_∑πôi⁄
::
Á˘‹
;

330 
	gãm∂©e
 <
ty≥«me
 
	gR™ge
>

331 
¥›‹ti⁄Æ_•lô
 
gë_•lô
() {

333  
	g¥›‹ti⁄_hñ≥r
<
	gR™ge
>::
gë_•lô
–
£lf
().
my_divis‹
 / 
my_∑πôi⁄
::
Á˘‹
 );

337 
size_t
 
gë_öôül_∑πôi⁄_hód
() {

338 
	gcuºít_ödex
 = 
tbb
::
this_èsk_¨ía
::
cuºít_thªad_ödex
();

339 i‡(
	gcuºít_ödex
 =
tbb
::
èsk_¨ía
::
nŸ_öôülized
)

340 
cuºít_ödex
 = 0;

341  
size_t
(
cuºít_ödex
);

345 
	gãm∂©e
 <
ty≥«me
 
	gP¨tôi⁄
>

346 
	glöór_afföôy_mode
 : 
¥›‹ti⁄Æ_mode
<
P¨tôi⁄
> {

347 
size_t
 
my_hód
;

348 
size_t
 
	gmy_max_afföôy
;

349 
usög
 
	g¥›‹ti⁄Æ_mode
<
	gP¨tôi⁄
>::
£lf
;

350 
löór_afföôy_mode
(Ë: 
¥›‹ti⁄Æ_mode
<
P¨tôi⁄
>(), 
my_hód
(
gë_öôül_∑πôi⁄_hód
()),

351 
my_max_afföôy
(
£lf
().
my_divis‹
) {}

352 
löór_afföôy_mode
÷öór_afföôy_modê&
§c
, 
•lô
Ë: 
¥›‹ti⁄Æ_mode
<
P¨tôi⁄
>(src, split())

353 , 
my_hód
((
§c
.my_hód + src.
my_divis‹
Ë% src.
my_max_afföôy
), my_max_affinity(src.my_max_affinity) {}

354 
löór_afföôy_mode
÷öór_afföôy_modê&
§c
, c⁄° 
¥›‹ti⁄Æ_•lô
& 
•lô_obj
Ë: 
¥›‹ti⁄Æ_mode
<
P¨tôi⁄
>(§c, 
	g•lô_obj
)

355 , 
my_hód
((
§c
.my_hód + src.
my_divis‹
Ë% src.
my_max_afföôy
), my_max_affinity(src.my_max_affinity) {}

356 
£t_afföôy
–
èsk
 &
t
 ) {

357 if–
£lf
().
	gmy_divis‹
 )

358 
	gt
.
£t_afföôy
–
afföôy_id
(
my_hód
) + 1 );

363 
	gãm∂©e
<
˛ass
 
	gMode
>

364 
	gdy«mic_gøösize_mode
 : 
Mode
 {

365 
usög
 
Mode
::
£lf
;

366 #ifde‡
__TBB_USE_MACHINE_TIME_STAMPS


367 
	gtbb
::
öã∫Æ
::
machöe_tsc_t
 
my_d°_tsc
;

370 
	gbegö
 = 0,

371 
	grun
,

372 
	g∑ss


373 } 
	gmy_dñay
;

374 
dïth_t
 
	gmy_max_dïth
;

375 c⁄° 
	gønge_poﬁ_size
 = 
__TBB_RANGE_POOL_CAPACITY
;

376 
dy«mic_gøösize_mode
(): 
Mode
()

377 #ifde‡
__TBB_USE_MACHINE_TIME_STAMPS


378 , 
my_d°_tsc
(0)

380 , 
my_dñay
(
begö
)

381 , 
my_max_dïth
(
__TBB_INIT_DEPTH
) {}

382 
dy«mic_gøösize_mode
(dy«mic_gøösize_mode& 
p
, 
•lô
)

383 : 
Mode
(
p
, 
•lô
())

384 #ifde‡
__TBB_USE_MACHINE_TIME_STAMPS


385 , 
my_d°_tsc
(0)

387 , 
my_dñay
(
∑ss
)

388 , 
my_max_dïth
(
p
.my_max_depth) {}

389 
dy«mic_gøösize_mode
(dy«mic_gøösize_mode& 
p
, c⁄° 
¥›‹ti⁄Æ_•lô
& 
•lô_obj
)

390 : 
Mode
(
p
, 
•lô_obj
)

391 #ifde‡
__TBB_USE_MACHINE_TIME_STAMPS


392 , 
my_d°_tsc
(0)

394 , 
my_dñay
(
begö
)

395 , 
my_max_dïth
(
p
.my_max_depth) {}

396 
boﬁ
 
check_beög_°ﬁí
(
èsk
 &
t
) {

397 if–!(
£lf
().
	gmy_divis‹
 / 
	gMode
::
my_∑πôi⁄
::
Á˘‹
) ) {

398 
£lf
().
my_divis‹
 = 1;

399 if–
	gt
.
is_°ﬁí_èsk
(Ë&&Å.
∑ª¡
()->
ªf_cou¡
() >= 2 ) {

400 #i‡
__TBB_USE_OPTIONAL_RTTI


402 
__TBB_ASSERT
(
dy«mic_ˇ°
<
Êag_èsk
*>(
t
.
∑ª¡
()), 0);

407 
	gÊag_èsk
::
m¨k_èsk_°ﬁí
(
t
);

408 if–!
	gmy_max_dïth
 ) my_max_depth++;

409 
	gmy_max_dïth
 +
__TBB_DEMAND_DEPTH_ADD
;

410  
	gåue
;

413  
	gÁl£
;

415 
dïth_t
 
max_dïth
(Ë{  
	gmy_max_dïth
; }

416 
Æign_dïth
(
dïth_t
 
ba£
) {

417 
__TBB_ASSERT
(
ba£
 <
my_max_dïth
, 0);

418 
	gmy_max_dïth
 -
ba£
;

420 
	gãm∂©e
<
ty≥«me
 
	gSèπTy≥
,Åy≥«mê
	gR™ge
>

421 
w‹k_bÆ™˚
(
SèπTy≥
 &
°¨t
, 
R™ge
 &
ønge
) {

422 if–!
	gønge
.
is_divisibÀ
(Ë|| !
£lf
().
max_dïth
() ) {

423 
	g°¨t
.
run_body
–
ønge
 );

426 
	göã∫Æ
::
ønge_ve˘‹
<
R™ge
, 
	gønge_poﬁ_size
> 
ønge_poﬁ
(
ønge
);

428 
	gønge_poﬁ
.
•lô_to_fûl
(
£lf
().
max_dïth
());

429 if–
£lf
().
check_f‹_dem™d
–
°¨t
 ) ) {

430 if–
	gønge_poﬁ
.
size
() > 1 ) {

431 
	g°¨t
.
of„r_w‹k
–
ønge_poﬁ
.
‰⁄t
(),Ñ™ge_poﬁ.
‰⁄t_dïth
() );

432 
	gønge_poﬁ
.
p›_‰⁄t
();

435 if–
	gønge_poﬁ
.
is_divisibÀ
(
£lf
().
max_dïth
()) )

438 
	g°¨t
.
run_body
–
ønge_poﬁ
.
back
() );

439 
	gønge_poﬁ
.
p›_back
();

440 }  !
	gønge_poﬁ
.
em±y
(Ë&& !
	g°¨t
.
is_ˇn˚Œed
() );

443 
boﬁ
 
check_f‹_dem™d
–
èsk
 &
t
 ) {

444 if–
	g∑ss
 =
my_dñay
 ) {

445 if–
£lf
().
my_divis‹
 > 1 )

446  
åue
;

447 if–
£lf
().
	gmy_divis‹
 && 
	gmy_max_dïth
 ) {

448 
£lf
().
	gmy_divis‹
 = 0;

449  
	gåue
;

451 if–
	gÊag_èsk
::
is_≥î_°ﬁí
(
t
) ) {

452 
my_max_dïth
 +
__TBB_DEMAND_DEPTH_ADD
;

453  
	gåue
;

455 } if–
	gbegö
 =
my_dñay
 ) {

456 #i‚de‡
__TBB_USE_MACHINE_TIME_STAMPS


457 
my_dñay
 = 
∑ss
;

459 
	gmy_d°_tsc
 = 
__TBB_time_°amp
(Ë+ 
__TBB_èsk_duøti⁄
();

460 
	gmy_dñay
 = 
run
;

461 } if–
	grun
 =
my_dñay
 ) {

462 if–
__TBB_time_°amp
(Ë< 
my_d°_tsc
 ) {

463 
__TBB_ASSERT
(
my_max_dïth
 > 0, 
NULL
);

464 
	gmy_max_dïth
--;

465  
	gÁl£
;

467 
	gmy_dñay
 = 
∑ss
;

468  
	gåue
;

471  
	gÁl£
;

475 
˛ass
 
	gauto_∑πôi⁄_ty≥
: 
public
 
dy«mic_gøösize_mode
<
ad≠tive_mode
<
auto_∑πôi⁄_ty≥
> > {

476 
public
:

477 
auto_∑πôi⁄_ty≥
–c⁄° 
auto_∑πôi⁄î
& )

478 : 
dy«mic_gøösize_mode
<
ad≠tive_mode
<
auto_∑πôi⁄_ty≥
> >() {

479 
my_divis‹
 *
__TBB_INITIAL_CHUNKS
;

481 
auto_∑πôi⁄_ty≥
–auto_∑πôi⁄_ty≥& 
§c
, 
•lô
)

482 : 
dy«mic_gøösize_mode
<
ad≠tive_mode
<
auto_∑πôi⁄_ty≥
> >(
§c
, 
•lô
()) {}

483 
boﬁ
 
is_divisibÀ
() {

484 if–
	gmy_divis‹
 > 1 )  
	gåue
;

485 if–
	gmy_divis‹
 && 
	gmy_max_dïth
 ) {

487 
	gmy_max_dïth
--;

488 
	gmy_divis‹
 = 0;

489  
	gåue
;

490 }  
	gÁl£
;

492 
boﬁ
 
check_f‹_dem™d
(
èsk
 &
t
) {

493 if–
	gÊag_èsk
::
is_≥î_°ﬁí
(
t
) ) {

494 
my_max_dïth
 +
__TBB_DEMAND_DEPTH_ADD
;

495  
	gåue
;

496 }  
	gÁl£
;

500 
˛ass
 
	gsim∂e_∑πôi⁄_ty≥
: 
public
 
∑πôi⁄_ty≥_ba£
<
sim∂e_∑πôi⁄_ty≥
> {

501 
public
:

502 
sim∂e_∑πôi⁄_ty≥
–c⁄° 
sim∂e_∑πôi⁄î
& ) {}

503 
sim∂e_∑πôi⁄_ty≥
–c⁄° sim∂e_∑πôi⁄_ty≥&, 
•lô
 ) {}

505 
	gãm∂©e
<
ty≥«me
 
	gSèπTy≥
,Åy≥«mê
	gR™ge
>

506 
execuã
(
SèπTy≥
 &
°¨t
, 
R™ge
 &
ønge
) {

507 
•lô_ty≥
 
	g•lô_obj
 = 
•lô
();

508  
	gønge
.
is_divisibÀ
() )

509 
	g°¨t
.
of„r_w‹k
–
•lô_obj
 );

510 
	g°¨t
.
run_body
–
ønge
 );

514 
˛ass
 
	g°©ic_∑πôi⁄_ty≥
 : 
public
 
löór_afföôy_mode
<
°©ic_∑πôi⁄_ty≥
> {

515 
public
:

516 
¥›‹ti⁄Æ_•lô
 
	t•lô_ty≥
;

517 
°©ic_∑πôi⁄_ty≥
–c⁄° 
°©ic_∑πôi⁄î
& )

518 : 
löór_afföôy_mode
<
°©ic_∑πôi⁄_ty≥
>() {}

519 
°©ic_∑πôi⁄_ty≥
–°©ic_∑πôi⁄_ty≥& 
p
, 
•lô
 )

520 : 
löór_afföôy_mode
<
°©ic_∑πôi⁄_ty≥
>(
p
, 
•lô
()) {}

521 
°©ic_∑πôi⁄_ty≥
–°©ic_∑πôi⁄_ty≥& 
p
, c⁄° 
¥›‹ti⁄Æ_•lô
& 
•lô_obj
 )

522 : 
löór_afföôy_mode
<
°©ic_∑πôi⁄_ty≥
>(
p
, 
	g•lô_obj
) {}

525 
˛ass
 
	gafföôy_∑πôi⁄_ty≥
 : 
public
 
dy«mic_gøösize_mode
<
löór_afföôy_mode
<
afföôy_∑πôi⁄_ty≥
> > {

526 c⁄° 
Á˘‹_powî
 = 4;

527 
	gtbb
::
öã∫Æ
::
afföôy_id
* 
my_¨øy
;

528 
	gpublic
:

529 c⁄° 
Á˘‹
 = 1 << 
Á˘‹_powî
;

530 
¥›‹ti⁄Æ_•lô
 
	t•lô_ty≥
;

531 
afföôy_∑πôi⁄_ty≥
–
tbb
::
öã∫Æ
::
afföôy_∑πôi⁄î_ba£_v3
& 
≠
 )

532 : 
dy«mic_gøösize_mode
<
löór_afföôy_mode
<
afföôy_∑πôi⁄_ty≥
> >() {

533 
__TBB_ASSERT
–(
Á˘‹
&(factor-1))==0, "factor must beÖower ofÅwo" );

534 
	g≠
.
ªsize
(
Á˘‹
);

535 
	gmy_¨øy
 = 
≠
.
my_¨øy
;

536 
	gmy_max_dïth
 = 
Á˘‹_powî
 + 1;

537 
__TBB_ASSERT
–
my_max_dïth
 < 
__TBB_RANGE_POOL_CAPACITY
, 0 );

539 
afföôy_∑πôi⁄_ty≥
◊fföôy_∑πôi⁄_ty≥& 
p
, 
•lô
)

540 : 
dy«mic_gøösize_mode
<
löór_afföôy_mode
<
afföôy_∑πôi⁄_ty≥
> >(
p
, 
•lô
())

541 , 
my_¨øy
(
p
.my_array) {}

542 
afföôy_∑πôi⁄_ty≥
◊fföôy_∑πôi⁄_ty≥& 
p
, c⁄° 
¥›‹ti⁄Æ_•lô
& 
•lô_obj
)

543 : 
dy«mic_gøösize_mode
<
löór_afföôy_mode
<
afföôy_∑πôi⁄_ty≥
> >(
p
, 
	g•lô_obj
)

544 , 
my_¨øy
(
p
.my_array) {}

545 
£t_afföôy
–
èsk
 &
t
 ) {

546 if–
	gmy_divis‹
 ) {

547 if–!
	gmy_¨øy
[
my_hód
] )

549 
	gt
.
£t_afföôy
–
afföôy_id
(
my_hód
 / 
Á˘‹
 + 1) );

551 
	gt
.
£t_afföôy
–
my_¨øy
[
my_hód
] );

554 
nŸe_afföôy
–
èsk
::
afföôy_id
 
id
 ) {

555 if–
my_divis‹
 )

556 
my_¨øy
[
my_hód
] = 
id
;

561 ˛as†
	cﬁd_auto_∑πôi⁄_ty≥
: 
public
 
tbb
::
öã∫Æ
::
∑πôi⁄_ty≥_ba£
 {

562 
size_t
 
num_chunks
;

563 c⁄° 
size_t
 
	gVICTIM_CHUNKS
 = 4;

564 
	gpublic
:

565 
boﬁ
 
should_execuã_ønge
(c⁄° 
èsk
 &
t
) {

566 if–
num_chunks
<
VICTIM_CHUNKS
 && 
t
.
is_°ﬁí_èsk
() )

567 
num_chunks
 = 
VICTIM_CHUNKS
;

568  
	gnum_chunks
==1;

570 
ﬁd_auto_∑πôi⁄_ty≥
–c⁄° 
auto_∑πôi⁄î
& )

571 : 
num_chunks
(
öã∫Æ
::
gë_öôül_auto_∑πôi⁄î_divis‹
()*
__TBB_INITIAL_CHUNKS
/4) {}

572 
ﬁd_auto_∑πôi⁄_ty≥
–c⁄° 
afföôy_∑πôi⁄î
& )

573 : 
num_chunks
(
öã∫Æ
::
gë_öôül_auto_∑πôi⁄î_divis‹
()*
__TBB_INITIAL_CHUNKS
/4) {}

574 
ﬁd_auto_∑πôi⁄_ty≥
–ﬁd_auto_∑πôi⁄_ty≥& 
±
, 
•lô
 ) {

575 
	gnum_chunks
 = 
±
.
num_chunks
 = (pt.num_chunks+1u) / 2u;

586 ˛as†
	csim∂e_∑πôi⁄î
 {

587 
	gpublic
:

588 
sim∂e_∑πôi⁄î
() {}

589 
¥iv©e
:

590 
ãm∂©e
<
ty≥«me
 
R™ge
,Åy≥«mê
	gBody
,Åy≥«mê
	gP¨tôi⁄î
> 
‰õnd
 
˛ass
 
	g£rül
::
öãrÁ˚9
::
°¨t_f‹
;

591 
	gãm∂©e
<
ty≥«me
 
	gR™ge
,Åy≥«mê
	gBody
,Åy≥«mê
	gP¨tôi⁄î
> 
‰õnd
 
˛ass
 
	göãrÁ˚9
::
öã∫Æ
::
°¨t_f‹
;

592 
	gãm∂©e
<
ty≥«me
 
	gR™ge
,Åy≥«mê
	gBody
,Åy≥«mê
	gP¨tôi⁄î
> 
‰õnd
 
˛ass
 
	göãrÁ˚9
::
öã∫Æ
::
°¨t_ªdu˚
;

593 
	gãm∂©e
<
ty≥«me
 
	gR™ge
,Åy≥«mê
	gBody
,Åy≥«mê
	gP¨tôi⁄î
> 
‰õnd
 
˛ass
 
	göãrÁ˚9
::
öã∫Æ
::
°¨t_dëîmöi°ic_ªdu˚
;

594 
	gãm∂©e
<
ty≥«me
 
	gR™ge
,Åy≥«mê
	gBody
,Åy≥«mê
	gP¨tôi⁄î
> 
‰õnd
 
˛ass
 
	göã∫Æ
::
°¨t_sˇn
;

596 ˛as†
	c∑πôi⁄_ty≥
: 
public
 
öã∫Æ
::
∑πôi⁄_ty≥_ba£
 {

597 
public
:

598 
boﬁ
 
should_execuã_ønge
(c⁄° 
èsk
& ) { 
Ál£
;}

599 
∑πôi⁄_ty≥
–c⁄° 
sim∂e_∑πôi⁄î
& ) {}

600 
∑πôi⁄_ty≥
–c⁄°Ö¨tôi⁄_ty≥&, 
•lô
 ) {}

603 
	göãrÁ˚9
::
	töã∫Æ
::
	tsim∂e_∑πôi⁄_ty≥
 
	tèsk_∑πôi⁄_ty≥
;

606 
	göãrÁ˚9
::
	töã∫Æ
::
	tsim∂e_∑πôi⁄_ty≥
::
	t•lô_ty≥
 split_type;

613 ˛as†
	cauto_∑πôi⁄î
 {

614 
	gpublic
:

615 
auto_∑πôi⁄î
() {}

617 
¥iv©e
:

618 
ãm∂©e
<
ty≥«me
 
R™ge
,Åy≥«mê
	gBody
,Åy≥«mê
	gP¨tôi⁄î
> 
‰õnd
 
˛ass
 
	g£rül
::
öãrÁ˚9
::
°¨t_f‹
;

619 
	gãm∂©e
<
ty≥«me
 
	gR™ge
,Åy≥«mê
	gBody
,Åy≥«mê
	gP¨tôi⁄î
> 
‰õnd
 
˛ass
 
	göãrÁ˚9
::
öã∫Æ
::
°¨t_f‹
;

620 
	gãm∂©e
<
ty≥«me
 
	gR™ge
,Åy≥«mê
	gBody
,Åy≥«mê
	gP¨tôi⁄î
> 
‰õnd
 
˛ass
 
	göãrÁ˚9
::
öã∫Æ
::
°¨t_ªdu˚
;

621 
	gãm∂©e
<
ty≥«me
 
	gR™ge
,Åy≥«mê
	gBody
,Åy≥«mê
	gP¨tôi⁄î
> 
‰õnd
 
˛ass
 
	göã∫Æ
::
°¨t_sˇn
;

623 
	göãrÁ˚9
::
	töã∫Æ
::
	tﬁd_auto_∑πôi⁄_ty≥
 
	t∑πôi⁄_ty≥
;

625 
	göãrÁ˚9
::
	töã∫Æ
::
	tauto_∑πôi⁄_ty≥
 
	tèsk_∑πôi⁄_ty≥
;

628 
	göãrÁ˚9
::
	töã∫Æ
::
	tauto_∑πôi⁄_ty≥
::
	t•lô_ty≥
 split_type;

632 ˛as†
	c°©ic_∑πôi⁄î
 {

633 
	gpublic
:

634 
°©ic_∑πôi⁄î
() {}

635 
¥iv©e
:

636 
ãm∂©e
<
ty≥«me
 
R™ge
,Åy≥«mê
	gBody
,Åy≥«mê
	gP¨tôi⁄î
> 
‰õnd
 
˛ass
 
	g£rül
::
öãrÁ˚9
::
°¨t_f‹
;

637 
	gãm∂©e
<
ty≥«me
 
	gR™ge
,Åy≥«mê
	gBody
,Åy≥«mê
	gP¨tôi⁄î
> 
‰õnd
 
˛ass
 
	göãrÁ˚9
::
öã∫Æ
::
°¨t_f‹
;

638 
	gãm∂©e
<
ty≥«me
 
	gR™ge
,Åy≥«mê
	gBody
,Åy≥«mê
	gP¨tôi⁄î
> 
‰õnd
 
˛ass
 
	göãrÁ˚9
::
öã∫Æ
::
°¨t_ªdu˚
;

639 
	gãm∂©e
<
ty≥«me
 
	gR™ge
,Åy≥«mê
	gBody
,Åy≥«mê
	gP¨tôi⁄î
> 
‰õnd
 
˛ass
 
	göãrÁ˚9
::
öã∫Æ
::
°¨t_dëîmöi°ic_ªdu˚
;

640 
	gãm∂©e
<
ty≥«me
 
	gR™ge
,Åy≥«mê
	gBody
,Åy≥«mê
	gP¨tôi⁄î
> 
‰õnd
 
˛ass
 
	göã∫Æ
::
°¨t_sˇn
;

642 
	göãrÁ˚9
::
	töã∫Æ
::
	tﬁd_auto_∑πôi⁄_ty≥
 
	t∑πôi⁄_ty≥
;

644 
	göãrÁ˚9
::
	töã∫Æ
::
	t°©ic_∑πôi⁄_ty≥
 
	tèsk_∑πôi⁄_ty≥
;

647 
	göãrÁ˚9
::
	töã∫Æ
::
	t°©ic_∑πôi⁄_ty≥
::
	t•lô_ty≥
 split_type;

651 ˛as†
	cafföôy_∑πôi⁄î
: 
öã∫Æ
::
afföôy_∑πôi⁄î_ba£_v3
 {

652 
public
:

653 
afföôy_∑πôi⁄î
() {}

655 
¥iv©e
:

656 
ãm∂©e
<
ty≥«me
 
R™ge
,Åy≥«mê
	gBody
,Åy≥«mê
	gP¨tôi⁄î
> 
‰õnd
 
˛ass
 
	g£rül
::
öãrÁ˚9
::
°¨t_f‹
;

657 
	gãm∂©e
<
ty≥«me
 
	gR™ge
,Åy≥«mê
	gBody
,Åy≥«mê
	gP¨tôi⁄î
> 
‰õnd
 
˛ass
 
	göãrÁ˚9
::
öã∫Æ
::
°¨t_f‹
;

658 
	gãm∂©e
<
ty≥«me
 
	gR™ge
,Åy≥«mê
	gBody
,Åy≥«mê
	gP¨tôi⁄î
> 
‰õnd
 
˛ass
 
	göãrÁ˚9
::
öã∫Æ
::
°¨t_ªdu˚
;

659 
	gãm∂©e
<
ty≥«me
 
	gR™ge
,Åy≥«mê
	gBody
,Åy≥«mê
	gP¨tôi⁄î
> 
‰õnd
 
˛ass
 
	göã∫Æ
::
°¨t_sˇn
;

661 
	göãrÁ˚9
::
	töã∫Æ
::
	tﬁd_auto_∑πôi⁄_ty≥
 
	t∑πôi⁄_ty≥
;

663 
	göãrÁ˚9
::
	töã∫Æ
::
	tafföôy_∑πôi⁄_ty≥
 
	tèsk_∑πôi⁄_ty≥
;

666 
	göãrÁ˚9
::
	töã∫Æ
::
	tafföôy_∑πôi⁄_ty≥
::
	t•lô_ty≥
 split_type;

671 #i‡
deföed
(
_MSC_VER
Ë&& !deföed(
__INTEL_COMPILER
)

672 #¥agm®
w¨nög
 (
p›
)

674 #unde‡
__TBB_INITIAL_CHUNKS


675 #unde‡
__TBB_RANGE_POOL_CAPACITY


676 #unde‡
__TBB_INIT_DEPTH


678 
	~"öã∫Æ/_w¨nög_suµªss_dißbÀ_nŸi˚.h
"

679 #unde‡
__TBB_∑πôi⁄î_H_ö˛ude_¨ó


	@/usr/include/tbb/pipeline.h

17 #i‚de‡
__TBB_pùñöe_H


18 
	#__TBB_pùñöe_H


	)

20 
	#__TBB_pùñöe_H_ö˛ude_¨ó


	)

21 
	~"öã∫Æ/_w¨nög_suµªss_íabÀ_nŸi˚.h
"

23 
	~"©omic.h
"

24 
	~"èsk.h
"

25 
	~"tbb_Æloˇt‹.h
"

26 
	~<c°ddef
>

28 #i‡
__TBB_CPP11_TYPE_PROPERTIES_PRESENT


29 
	~<ty≥_åaôs
>

32 
«me•a˚
 
	gtbb
 {

34 
˛ass
 
	gpùñöe
;

35 
˛ass
 
	gfûãr
;

38 
«me•a˚
 
	göã∫Æ
 {

41 
	#__TBB_PIPELINE_VERSION
(
x
Ë(()(x-2)<<1)

	)

43 
	tTokí
;

44 
	ttokídiff_t
;

45 
˛ass
 
	g°age_èsk
;

46 
˛ass
 
	göput_buf„r
;

47 
˛ass
 
	gpùñöe_roŸ_èsk
;

48 
˛ass
 
	gpùñöe_˛ó√r
;

52 
«me•a˚
 
	göãrÁ˚6
 {

53 
	gãm∂©e
<
ty≥«me
 
	gT
,Åy≥«mê
	gU
> 
˛ass
 
	gfûãr_t
;

55 
«me•a˚
 
	göã∫Æ
 {

56 
˛ass
 
	gpùñöe_¥oxy
;

64 ˛as†
	cfûãr
: 
öã∫Æ
::
no_c›y
 {

65 
¥iv©e
:

67 
fûãr
* 
nŸ_ö_pùñöe
(Ë{  
ªöãΩªt_ˇ°
<fûãr*>(
öçå_t
(-1)); }

68 
	g¥Ÿe˘ed
:

70 c⁄° 
fûãr_is_£rül
 = 0x1;

75 c⁄° 
	gfûãr_is_out_of_‹dî
 = 0x1<<4;

78 c⁄° 
	gfûãr_is_bound
 = 0x1<<5;

81 c⁄° 
	gfûãr_may_emô_nuŒ
 = 0x1<<6;

84 c⁄° 
	gexa˘_ex˚±i⁄_¥›ag©i⁄
 =

85 #i‡
TBB_USE_CAPTURED_EXCEPTION


91 c⁄° 
	gcuºít_vîsi⁄
 = 
__TBB_PIPELINE_VERSION
(5);

92 c⁄° 
	gvîsi⁄_mask
 = 0x7<<1;

93 
	gpublic
:

94 
	emode
 {

96 
∑øŒñ
 = 
cuºít_vîsi⁄
 | 
fûãr_is_out_of_‹dî
,

98 
	g£rül_ö_‹dî
 = 
cuºít_vîsi⁄
 | 
fûãr_is_£rül
,

100 
	g£rül_out_of_‹dî
 = 
cuºít_vîsi⁄
 | 
fûãr_is_£rül
 | 
fûãr_is_out_of_‹dî
,

102 
	g£rül
 = 
£rül_ö_‹dî


104 
	g¥Ÿe˘ed
:

105 
ex∂icô
 
fûãr
–
boﬁ
 
is_£rül_
 ) :

106 
√xt_fûãr_ö_pùñöe
(
nŸ_ö_pùñöe
()),

107 
my_öput_buf„r
(
NULL
),

108 
my_fûãr_mode
(
°©ic_ˇ°
<>((
is_£rül_
 ? 
£rül
 : 
∑øŒñ
Ë| 
exa˘_ex˚±i⁄_¥›ag©i⁄
)),

109 
¥ev_fûãr_ö_pùñöe
(
nŸ_ö_pùñöe
()),

110 
my_pùñöe
(
NULL
),

111 
√xt_£gmít
(
NULL
)

114 
ex∂icô
 
fûãr
–
mode
 
fûãr_mode
 ) :

115 
√xt_fûãr_ö_pùñöe
(
nŸ_ö_pùñöe
()),

116 
my_öput_buf„r
(
NULL
),

117 
my_fûãr_mode
(
°©ic_ˇ°
<>(
fûãr_mode
 | 
exa˘_ex˚±i⁄_¥›ag©i⁄
)),

118 
¥ev_fûãr_ö_pùñöe
(
nŸ_ö_pùñöe
()),

119 
my_pùñöe
(
NULL
),

120 
√xt_£gmít
(
NULL
)

124 
__TBB_EXPORTED_METHOD
 
£t_íd_of_öput
();

126 
	gpublic
:

128 
boﬁ
 
is_£rül
() const {

129  
boﬁ
–
my_fûãr_mode
 & 
fûãr_is_£rül
 );

133 
boﬁ
 
is_‹dîed
() const {

134  (
	gmy_fûãr_mode
 & (
	gfûãr_is_out_of_‹dî
|
	gfûãr_is_£rül
))==
fûãr_is_£rül
;

138 
boﬁ
 
is_bound
() const {

139  ( 
	gmy_fûãr_mode
 & 
	gfûãr_is_bound
 )==
fûãr_is_bound
;

143 
boﬁ
 
obje˘_may_be_nuŒ
() {

144  ( 
	gmy_fûãr_mode
 & 
	gfûãr_may_emô_nuŒ
 ) =
fûãr_may_emô_nuŒ
;

149 
vútuÆ
 * 
›î©‹
()–* 
	gôem
 ) = 0;

153 
vútuÆ
 
	g__TBB_EXPORTED_METHOD
 ~
fûãr
();

155 #i‡
__TBB_TASK_GROUP_CONTEXT


159 
vútuÆ
 
föÆize
( * ) {}

162 
	g¥iv©e
:

164 
fûãr
* 
√xt_fûãr_ö_pùñöe
;

169 
boﬁ
 
has_m‹e_w‹k
();

173 
	göã∫Æ
::
öput_buf„r
* 
my_öput_buf„r
;

175 
‰õnd
 
˛ass
 
	göã∫Æ
::
°age_èsk
;

176 
‰õnd
 
˛ass
 
	göã∫Æ
::
pùñöe_roŸ_èsk
;

177 
‰õnd
 
˛ass
 
	gpùñöe
;

178 
‰õnd
 
˛ass
 
	gthªad_bound_fûãr
;

181 c⁄° 
	gmy_fûãr_mode
;

184 
fûãr
* 
	g¥ev_fûãr_ö_pùñöe
;

187 
pùñöe
* 
	gmy_pùñöe
;

191 
fûãr
* 
	g√xt_£gmít
;

196 ˛as†
	cthªad_bound_fûãr
: 
public
 
fûãr
 {

197 
public
:

198 
	eªsu…_ty≥
 {

200 
suc˚ss
,

202 
	gôem_nŸ_avaûabÀ
,

204 
	gíd_of_°ªam


206 
	g¥Ÿe˘ed
:

207 
ex∂icô
 
thªad_bound_fûãr
(
mode
 
fûãr_mode
):

208 
fûãr
(
°©ic_ˇ°
<
mode
>(
fûãr_mode
 | fûãr::
fûãr_is_bound
))

210 
__TBB_ASSERT
(
fûãr_mode
 & 
fûãr
::
fûãr_is_£rül
, "thread-bound filters must be serial");

212 
	gpublic
:

219 
ªsu…_ty≥
 
__TBB_EXPORTED_METHOD
 
åy_¥o˚ss_ôem
();

226 
ªsu…_ty≥
 
__TBB_EXPORTED_METHOD
 
¥o˚ss_ôem
();

228 
	g¥iv©e
:

230 
ªsu…_ty≥
 
öã∫Æ_¥o˚ss_ôem
(
boﬁ
 
is_blockög
);

235 
˛ass
 
__TBB_DEPRECATED_MSG
("tbb::pùñöêi†dïªˇãd, u£Åbb::∑øŒñ_pùñöe"Ë
	gpùñöe
 {

236 
	gpublic
:

238 
__TBB_EXPORTED_METHOD
 
pùñöe
();

242 
vútuÆ
 
	g__TBB_EXPORTED_METHOD
 ~
pùñöe
();

245 
__TBB_EXPORTED_METHOD
 
add_fûãr
–
fûãr
& 
fûãr_
 );

248 
__TBB_EXPORTED_METHOD
 
run
–
size_t
 
max_numbî_of_live_tokís
 );

250 #i‡
__TBB_TASK_GROUP_CONTEXT


252 
__TBB_EXPORTED_METHOD
 
run
–
size_t
 
max_numbî_of_live_tokís
, 
tbb
::
èsk_group_c⁄ãxt
& 
c⁄ãxt
 );

256 
__TBB_EXPORTED_METHOD
 
˛ór
();

258 
	g¥iv©e
:

259 
‰õnd
 
˛ass
 
öã∫Æ
::
°age_èsk
;

260 
‰õnd
 
˛ass
 
	göã∫Æ
::
pùñöe_roŸ_èsk
;

261 
‰õnd
 
˛ass
 
	gfûãr
;

262 
‰õnd
 
˛ass
 
	gthªad_bound_fûãr
;

263 
‰õnd
 
˛ass
 
	göã∫Æ
::
pùñöe_˛ó√r
;

264 
‰õnd
 
˛ass
 
	gtbb
::
öãrÁ˚6
::
öã∫Æ
::
pùñöe_¥oxy
;

267 
fûãr
* 
	gfûãr_li°
;

270 
fûãr
* 
	gfûãr_íd
;

273 
èsk
* 
	gíd_cou¡î
;

276 
	g©omic
<
	göã∫Æ
::
Tokí
> 
öput_tokís
;

279 
	g©omic
<
	göã∫Æ
::
Tokí
> 
tokí_cou¡î
;

282 
boﬁ
 
	gíd_of_öput
;

285 
boﬁ
 
	ghas_thªad_bound_fûãrs
;

288 
ªmove_fûãr
–
fûãr
& 
fûãr_
 );

291 
__TBB_EXPORTED_METHOD
 
öje˘_tokí
–
èsk
& 
£lf
 );

293 #i‡
__TBB_TASK_GROUP_CONTEXT


295 
˛ór_fûãrs
();

303 
«me•a˚
 
	göãrÁ˚6
 {

305 
«me•a˚
 
	göã∫Æ
 {

306 
	gãm∂©e
<
ty≥«me
 
	gT
,Åy≥«mê
	gU
,Åy≥«mê
	gBody
> 
˛ass
 
	gc⁄¸ëe_fûãr
;

310 ˛as†
	cÊow_c⁄åﬁ
 {

311 
boﬁ
 
	gis_pùñöe_°›≥d
;

312 
Êow_c⁄åﬁ
(Ë{ 
	gis_pùñöe_°›≥d
 = 
Ál£
; }

313 
	gãm∂©e
<
ty≥«me
 
	gT
,Åy≥«mê
	gU
,Åy≥«mê
	gBody
> 
‰õnd
 
˛ass
 
	göã∫Æ
::
c⁄¸ëe_fûãr
;

314 
	gpublic
:

315 
°›
(Ë{ 
is_pùñöe_°›≥d
 = 
åue
; }

319 
«me•a˚
 
	göã∫Æ
 {

322 #i‡ 
__TBB_CPP11_TYPE_PROPERTIES_PRESENT


323 
	gãm∂©e
<
ty≥«me
 
	gT
> 
	stbb_åivüŒy_c›yabÀ
 {Énum { 
	gvÆue
 = 
°d
::
is_åivüŒy_c›yabÀ
<
T
>::
vÆue
 }; };

325 
	gãm∂©e
<
ty≥«me
 
	gT
> 
	stbb_åivüŒy_c›yabÀ
 {Énum { 
	gvÆue
 = 
Ál£
 }; };

326 
	gãm∂©e
<
ty≥«me
 
	gT
> 
	gtbb_åivüŒy_c›yabÀ
 < T* > {Énum { 
	gvÆue
 = 
åue
 }; };

327 
	gãm∂©e
<> 
	gtbb_åivüŒy_c›yabÀ
 < 
	gboﬁ
 > {Énum { 
	gvÆue
 = 
åue
 }; };

328 
	gãm∂©e
<> 
	gtbb_åivüŒy_c›yabÀ
 < > {Énum { 
	gvÆue
 = 
åue
 }; };

329 
	gãm∂©e
<> 
	gtbb_åivüŒy_c›yabÀ
 < sig√d > {Énum { 
	gvÆue
 = 
åue
 }; };

330 
	gãm∂©e
<> 
	gtbb_åivüŒy_c›yabÀ
 <> {Énum { 
	gvÆue
 = 
åue
 }; };

331 
	gãm∂©e
<> 
	gtbb_åivüŒy_c›yabÀ
 < > {Énum { 
	gvÆue
 = 
åue
 }; };

332 
	gãm∂©e
<> 
	gtbb_åivüŒy_c›yabÀ
 <> {Énum { 
	gvÆue
 = 
åue
 }; };

333 
	gãm∂©e
<> 
	gtbb_åivüŒy_c›yabÀ
 < > {Énum { 
	gvÆue
 = 
åue
 }; };

334 
	gãm∂©e
<> 
	gtbb_åivüŒy_c›yabÀ
 <> {Énum { 
	gvÆue
 = 
åue
 }; };

335 
	gãm∂©e
<> 
	gtbb_åivüŒy_c›yabÀ
 < > {Énum { 
	gvÆue
 = 
åue
 }; };

336 
	gãm∂©e
<> 
	gtbb_åivüŒy_c›yabÀ
 <> {Énum { 
	gvÆue
 = 
åue
 }; };

337 
	gãm∂©e
<> 
	gtbb_åivüŒy_c›yabÀ
 < > {Énum { 
	gvÆue
 = 
åue
 }; };

338 
	gãm∂©e
<> 
	gtbb_åivüŒy_c›yabÀ
 <> {Énum { 
	gvÆue
 = 
åue
 }; };

339 
	gãm∂©e
<> 
	gtbb_åivüŒy_c›yabÀ
 < > {Énum { 
	gvÆue
 = 
åue
 }; };

340 
	gãm∂©e
<> 
	gtbb_åivüŒy_c›yabÀ
 < > {Énum { 
	gvÆue
 = 
åue
 }; };

341 
	gãm∂©e
<> 
	gtbb_åivüŒy_c›yabÀ
 < > {Énum { 
	gvÆue
 = 
åue
 }; };

342 #i‡!
_MSC_VER
 || 
deföed
(
_NATIVE_WCHAR_T_DEFINED
)

343 
	gãm∂©e
<> 
	gtbb_åivüŒy_c›yabÀ
 < 
	gwch¨_t
 > {Énum { 
	gvÆue
 = 
åue
 }; };

347 
	gãm∂©e
<
ty≥«me
 
	gT
>

348 
	su£_Æloˇt‹
 {

349 íum { 
	gvÆue
 = (
T
Ë> (*Ë|| !
tbb_åivüŒy_c›yabÀ
<T>::
vÆue
 };

354 
	gãm∂©e
<
ty≥«me
 
	gT
, 
boﬁ
 
	gAŒoˇã
> 
˛ass
 
	gtokí_hñ≥r
;

357 
	gãm∂©e
<
ty≥«me
 
	gT
>

358 
˛ass
 
	gtokí_hñ≥r
<
	gT
, 
	gåue
> {

359 
	gpublic
:

360 
ty≥«me
 
	ttbb
::
	ttbb_Æloˇt‹
<
	tT
> 
	tÆloˇt‹
;

361 
T
* 
	tpoöãr
;

362 
T
 
	tvÆue_ty≥
;

363 #i‡
__TBB_CPP11_RVALUE_REF_PRESENT


364 
poöãr
 
¸óã_tokí
(
vÆue_ty≥
 && 
sour˚
)

366 
poöãr
 
¸óã_tokí
(c⁄° 
vÆue_ty≥
 & 
sour˚
)

369 
poöãr
 
	gouçut_t
 = 
Æloˇt‹
().
Æloˇã
(1);

370  
√w
 (
ouçut_t
Ë
T
(
tbb
::
öã∫Æ
::
move
(
sour˚
));

372 
	gvÆue_ty≥
 & 
tokí
(
poöãr
 & 
t
Ë{  *
	gt
; }

373 * 
ˇ°_to_void_±r
(
poöãr
 
ªf
Ë{  (*Ë
	gªf
; }

374 
poöãr
 
ˇ°_‰om_void_±r
(* 
ªf
Ë{  (
	gpoöãr
)
	gªf
; }

375 
de°roy_tokí
(
poöãr
 
tokí
) {

376 
Æloˇt‹
().
de°roy
(
tokí
);

377 
Æloˇt‹
().
dóŒoˇã
(
tokí
,1);

382 
	gãm∂©e
<
ty≥«me
 
	gT
>

383 
˛ass
 
	gtokí_hñ≥r
<
	gT
*, 
	gÁl£
> {

384 
	gpublic
:

385 
T
* 
	tpoöãr
;

386 
T
* 
	tvÆue_ty≥
;

387 
poöãr
 
¸óã_tokí
(c⁄° 
vÆue_ty≥
 & 
sour˚
Ë{  
	gsour˚
; }

388 
	gvÆue_ty≥
 & 
tokí
(
poöãr
 & 
t
Ë{  
	gt
; }

389 * 
ˇ°_to_void_±r
(
poöãr
 
ªf
Ë{  (*)
	gªf
; }

390 
poöãr
 
ˇ°_‰om_void_±r
(* 
ªf
Ë{  (
	gpoöãr
)
	gªf
; }

391 
de°roy_tokí
–
poöãr
 ) {}

395 
	gãm∂©e
<
ty≥«me
 
	gT
>

396 
˛ass
 
	gtokí_hñ≥r
<
	gT
, 
	gÁl£
> {

398 
T
 
	ga˘uÆ_vÆue
;

399 * 
	gvoid_ovîœy
;

400 } 
	tty≥_to_void_±r_m≠
;

401 
	gpublic
:

402 
T
 
	tpoöãr
;

403 
T
 
	tvÆue_ty≥
;

404 
poöãr
 
¸óã_tokí
(c⁄° 
vÆue_ty≥
 & 
sour˚
Ë{  
	gsour˚
; }

405 
	gvÆue_ty≥
 & 
tokí
(
poöãr
 & 
t
Ë{  
	gt
; }

406 * 
ˇ°_to_void_±r
(
poöãr
 
ªf
) {

407 
ty≥_to_void_±r_m≠
 
	gmym≠
;

408 
	gmym≠
.
	gvoid_ovîœy
 = 
NULL
;

409 
	gmym≠
.
	ga˘uÆ_vÆue
 = 
ªf
;

410  
	gmym≠
.
	gvoid_ovîœy
;

412 
poöãr
 
ˇ°_‰om_void_±r
(* 
ªf
) {

413 
ty≥_to_void_±r_m≠
 
	gmym≠
;

414 
	gmym≠
.
	gvoid_ovîœy
 = 
ªf
;

415  
	gmym≠
.
	ga˘uÆ_vÆue
;

417 
de°roy_tokí
–
poöãr
 ) {}

421 
	gãm∂©e
<
ty≥«me
 
	gT
,Åy≥«mê
	gU
,Åy≥«mê
	gBody
>

422 ˛as†
	cc⁄¸ëe_fûãr
: 
public
 
tbb
::
fûãr
 {

423 c⁄° 
Body
& 
my_body
;

424 
	gtokí_hñ≥r
<
	tT
,
	tu£_Æloˇt‹
<T>::
	tvÆue
> 
	tt_hñ≥r
;

425 
ty≥«me
 
	tt_hñ≥r
::
	tpoöãr
 
	tt_poöãr
;

426 
	gtokí_hñ≥r
<
	tU
,
	tu£_Æloˇt‹
<U>::
	tvÆue
> 
	tu_hñ≥r
;

427 
ty≥«me
 
	tu_hñ≥r
::
	tpoöãr
 
	tu_poöãr
;

429 * 
›î©‹
()(* 
	göput
Ë
	g__TBB_ovîride
 {

430 
t_poöãr
 
	gãmp_öput
 = 
t_hñ≥r
::
ˇ°_‰om_void_±r
(
öput
);

431 
u_poöãr
 
	gouçut_u
 = 
u_hñ≥r
::
¸óã_tokí
(
my_body
(
tbb
::
öã∫Æ
::
move
(
t_hñ≥r
::
tokí
(
ãmp_öput
))));

432 
	gt_hñ≥r
::
de°roy_tokí
(
ãmp_öput
);

433  
	gu_hñ≥r
::
ˇ°_to_void_±r
(
ouçut_u
);

436 
föÆize
(* 
öput
Ë
	g__TBB_ovîride
 {

437 
t_poöãr
 
	gãmp_öput
 = 
t_hñ≥r
::
ˇ°_‰om_void_±r
(
öput
);

438 
	gt_hñ≥r
::
de°roy_tokí
(
ãmp_öput
);

441 
	gpublic
:

442 
c⁄¸ëe_fûãr
(
tbb
::
fûãr
::
mode
 
fûãr_mode
, c⁄° 
Body
& 
body
Ë: fûãr(fûãr_mode), 
my_body
(body) {}

446 
	gãm∂©e
<
ty≥«me
 
	gU
,Åy≥«mê
	gBody
>

447 
˛ass
 
	gc⁄¸ëe_fûãr
<,
	gU
,
	gBody
>: 
public
 
fûãr
 {

448 c⁄° 
Body
& 
my_body
;

449 
	gtokí_hñ≥r
<
	tU
, 
	tu£_Æloˇt‹
<U>::
	tvÆue
> 
	tu_hñ≥r
;

450 
ty≥«me
 
	tu_hñ≥r
::
	tpoöãr
 
	tu_poöãr
;

452 * 
›î©‹
()(*Ë
	g__TBB_ovîride
 {

453 
Êow_c⁄åﬁ
 
	gc⁄åﬁ
;

454 
u_poöãr
 
	gouçut_u
 = 
u_hñ≥r
::
¸óã_tokí
(
my_body
(
c⁄åﬁ
));

455 if(
	gc⁄åﬁ
.
	gis_pùñöe_°›≥d
) {

456 
	gu_hñ≥r
::
de°roy_tokí
(
ouçut_u
);

457 
£t_íd_of_öput
();

458  
	gNULL
;

460  
	gu_hñ≥r
::
ˇ°_to_void_±r
(
ouçut_u
);

463 
	gpublic
:

464 
c⁄¸ëe_fûãr
(
tbb
::
fûãr
::
mode
 
fûãr_mode
, c⁄° 
Body
& 
body
) :

465 
fûãr
(
°©ic_ˇ°
<
tbb
::fûãr::
mode
>(
fûãr_mode
 | 
fûãr_may_emô_nuŒ
)),

466 
my_body
(
body
)

471 
	gãm∂©e
<
ty≥«me
 
	gT
,Åy≥«mê
	gBody
>

472 
˛ass
 
	gc⁄¸ëe_fûãr
<
	gT
,,
	gBody
>: 
public
 
fûãr
 {

473 c⁄° 
Body
& 
my_body
;

474 
	gtokí_hñ≥r
<
	tT
, 
	tu£_Æloˇt‹
<T>::
	tvÆue
> 
	tt_hñ≥r
;

475 
ty≥«me
 
	tt_hñ≥r
::
	tpoöãr
 
	tt_poöãr
;

477 * 
›î©‹
()(* 
	göput
Ë
	g__TBB_ovîride
 {

478 
t_poöãr
 
	gãmp_öput
 = 
t_hñ≥r
::
ˇ°_‰om_void_±r
(
öput
);

479 
my_body
(
tbb
::
öã∫Æ
::
move
(
t_hñ≥r
::
tokí
(
ãmp_öput
)));

480 
	gt_hñ≥r
::
de°roy_tokí
(
ãmp_öput
);

481  
	gNULL
;

483 
föÆize
(* 
öput
Ë
	g__TBB_ovîride
 {

484 
t_poöãr
 
	gãmp_öput
 = 
t_hñ≥r
::
ˇ°_‰om_void_±r
(
öput
);

485 
	gt_hñ≥r
::
de°roy_tokí
(
ãmp_öput
);

488 
	gpublic
:

489 
c⁄¸ëe_fûãr
(
tbb
::
fûãr
::
mode
 
fûãr_mode
, c⁄° 
Body
& 
body
Ë: fûãr(fûãr_mode), 
my_body
(body) {}

492 
	gãm∂©e
<
ty≥«me
 
	gBody
>

493 
˛ass
 
	gc⁄¸ëe_fûãr
<,,
	gBody
>: 
public
 
fûãr
 {

494 c⁄° 
Body
& 
my_body
;

496 * 
›î©‹
()(*Ë
	g__TBB_ovîride
 {

497 
Êow_c⁄åﬁ
 
	gc⁄åﬁ
;

498 
my_body
(
c⁄åﬁ
);

499 * 
	gouçut
 = 
c⁄åﬁ
.
is_pùñöe_°›≥d
 ? 
NULL
 : (*)(
öçå_t
)-1;

500  
	gouçut
;

502 
	gpublic
:

503 
c⁄¸ëe_fûãr
(
fûãr
::
mode
 
fûãr_mode
, c⁄° 
Body
& 
body
Ë: fûãr(fûãr_mode), 
my_body
(body) {}

508 ˛as†
	cpùñöe_¥oxy
 {

509 
	gtbb
::
pùñöe
 
my_pùe
;

510 
	gpublic
:

511 
pùñöe_¥oxy
–c⁄° 
fûãr_t
<,>& 
fûãr_chaö
 );

512 ~
pùñöe_¥oxy
() {

513  
fûãr
* 
	gf
 = 
my_pùe
.
fûãr_li°
 )

514 
dñëe
 
f
;

516 
	gtbb
::
pùñöe
* 
›î©‹
->(Ë{  &
my_pùe
; }

521 ˛as†
	cfûãr_node
: 
tbb
::
öã∫Æ
::
no_c›y
 {

523 
tbb
::
©omic
<
öçå_t
> 
ªf_cou¡
;

524 
	g¥Ÿe˘ed
:

525 
fûãr_node
() {

526 
ªf_cou¡
 = 0;

527 #ifde‡
__TBB_TEST_FILTER_NODE_COUNT


528 ++(
	g__TBB_TEST_FILTER_NODE_COUNT
);

531 
	gpublic
:

533 
vútuÆ
 
add_to
–
pùñöe
& ) = 0;

535 
add_ªf
(Ë{ ++
	gªf_cou¡
; }

537 
ªmove_ªf
() {

538 
__TBB_ASSERT
(
ªf_cou¡
>0,"ref_count underflow");

539 if–--
	gªf_cou¡
==0 )

540 
dñëe
 
this
;

542 
	gvútuÆ
 ~
fûãr_node
() {

543 #ifde‡
__TBB_TEST_FILTER_NODE_COUNT


544 --(
	g__TBB_TEST_FILTER_NODE_COUNT
);

550 
	gãm∂©e
<
ty≥«me
 
	gT
,Åy≥«mê
	gU
,Åy≥«mê
	gBody
>

551 ˛as†
	cfûãr_node_Àaf
: 
public
 
fûãr_node
 {

552 c⁄° 
tbb
::
fûãr
::
mode
 mode;

553 c⁄° 
Body
 
	gbody
;

554 
add_to
–
pùñöe
& 
p
 ) 
	g__TBB_ovîride
 {

555 
	gc⁄¸ëe_fûãr
<
	gT
,
	gU
,
	gBody
>* 
	gf
 = 
√w
 
c⁄¸ëe_fûãr
<
T
,U,Body>(
	gmode
,
	gbody
);

556 
	gp
.
add_fûãr
–*
f
 );

558 
	gpublic
:

559 
fûãr_node_Àaf
–
tbb
::
fûãr
::
mode
 
m
, c⁄° 
Body
& 
b
 ) : mode(m), 
body
(b) {}

563 ˛as†
	cfûãr_node_joö
: 
public
 
fûãr_node
 {

564 
‰õnd
 
˛ass
 
fûãr_node
;

565 
	gfûãr_node
& 
	gÀ·
;

566 
	gfûãr_node
& 
	gright
;

567 ~
fûãr_node_joö
() {

568 
	gÀ·
.
ªmove_ªf
();

569 
	gright
.
ªmove_ªf
();

571 
add_to
–
pùñöe
& 
p
 ) 
	g__TBB_ovîride
 {

572 
	gÀ·
.
add_to
(
p
);

573 
	gright
.
add_to
(
p
);

575 
	gpublic
:

576 
fûãr_node_joö
–
fûãr_node
& 
x
, fûãr_node& 
y
 ) : 
À·
(x), 
right
(y) {

577 
	gÀ·
.
add_ªf
();

578 
	gright
.
add_ªf
();

586 
	gãm∂©e
<
ty≥«me
 
	gT
,Åy≥«mê
	gU
,Åy≥«mê
	gBody
>

587 
	gfûãr_t
<
	gT
,
	gU
> 
make_fûãr
(
tbb
::
fûãr
::
mode
 mode, c⁄° 
Body
& 
body
) {

588  
√w
 
	göã∫Æ
::
fûãr_node_Àaf
<
T
,
	gU
,
	gBody
>(
	gmode
, 
	gbody
);

591 
	gãm∂©e
<
ty≥«me
 
	gT
,Åy≥«mê
	gV
,Åy≥«mê
	gU
>

592 
	gfûãr_t
<
	gT
,
	gU
> 
	g›î©‹
& (c⁄° fûãr_t<T,
	gV
>& 
	gÀ·
, c⁄° fûãr_t<V,U>& 
	gright
) {

593 
__TBB_ASSERT
(
À·
.
roŸ
,"cannot use default-constructed filter_tásÜeftárgument of '&'");

594 
__TBB_ASSERT
(
right
.
roŸ
,"cannot use default-constructed filter_tásÑightárgument of '&'");

595  
√w
 
	göã∫Æ
::
fûãr_node_joö
(*
À·
.
roŸ
,*
right
.root);

599 
	gãm∂©e
<
ty≥«me
 
	gT
,Åy≥«mê
	gU
>

600 ˛as†
	cfûãr_t
 {

601 
	göã∫Æ
::
	tfûãr_node
 filter_node;

602 
fûãr_node
* 
	groŸ
;

603 
fûãr_t
–
fûãr_node
* 
roŸ_
 ) : 
roŸ
(root_) {

604 
roŸ
->
add_ªf
();

606 
‰õnd
 
˛ass
 
	göã∫Æ
::
pùñöe_¥oxy
;

607 
	gãm∂©e
<
ty≥«me
 
	gT_
,Åy≥«mê
	gU_
,Åy≥«mê
	gBody
>

608 
‰õnd
 
	gfûãr_t
<
	gT_
,
	gU_
> 
make_fûãr
(
tbb
::
fûãr
::
mode
, c⁄° 
Body
& );

609 
	gãm∂©e
<
ty≥«me
 
	gT_
,Åy≥«mê
	gV_
,Åy≥«mê
	gU_
>

610 
‰õnd
 
	gfûãr_t
<
	gT_
,
	gU_
> 
	g›î©‹
& (c⁄° fûãr_t<T_,
	gV_
>& , const filter_t<V_,U_>& );

611 
	gpublic
:

613 
fûãr_t
(Ë: 
roŸ
(
NULL
) {}

614 
fûãr_t
–c⁄° fûãr_t<
T
,
U
>& 
rhs
 ) : 
roŸ
(rhs.root) {

615 if–
roŸ
 )ÑoŸ->
add_ªf
();

617 
	gãm∂©e
<
ty≥«me
 
	gBody
>

618 
fûãr_t
–
tbb
::
fûãr
::
mode
 mode, c⁄° 
Body
& 
body
 ) :

619 
roŸ
–
√w
 
öã∫Æ
::
fûãr_node_Àaf
<
T
,
U
,
Body
>(
mode
, 
body
) ) {

620 
	groŸ
->
add_ªf
();

623 
	g›î©‹
=–c⁄° 
fûãr_t
<
T
,
	gU
>& 
	grhs
 ) {

626 
fûãr_node
* 
	gﬁd
 = 
roŸ
;

627 
	groŸ
 = 
rhs
.
roŸ
;

628 if–
	groŸ
 )ÑoŸ->
add_ªf
();

629 if–
	gﬁd
 ) old->
ªmove_ªf
();

631 ~
fûãr_t
() {

632 if–
	groŸ
 )ÑoŸ->
ªmove_ªf
();

634 
˛ór
() {

636 if–
	groŸ
 ) {

637 
fûãr_node
* 
	gﬁd
 = 
roŸ
;

638 
	groŸ
 = 
NULL
;

639 
	gﬁd
->
ªmove_ªf
();

644 
ölöe
 
	göã∫Æ
::
pùñöe_¥oxy
::pùñöe_¥oxy–c⁄° 
fûãr_t
<,>& 
fûãr_chaö
 ) : 
my_pùe
() {

645 
__TBB_ASSERT
–
fûãr_chaö
.
roŸ
, "cannotápplyÖarallel_pipelineÅo default-constructed filter_t" );

646 
	gfûãr_chaö
.
	groŸ
->
add_to
(
my_pùe
);

649 
ölöe
 
∑øŒñ_pùñöe
(
size_t
 
max_numbî_of_live_tokís
, c⁄° 
fûãr_t
<,>& 
fûãr_chaö


650 #i‡
__TBB_TASK_GROUP_CONTEXT


651 , 
tbb
::
èsk_group_c⁄ãxt
& 
c⁄ãxt


654 
öã∫Æ
::
pùñöe_¥oxy
 
pùe
(
fûãr_chaö
);

656 
	gpùe
->
run
(
max_numbî_of_live_tokís


657 #i‡
__TBB_TASK_GROUP_CONTEXT


658 , 
c⁄ãxt


663 #i‡
__TBB_TASK_GROUP_CONTEXT


664 
ölöe
 
∑øŒñ_pùñöe
(
size_t
 
max_numbî_of_live_tokís
, c⁄° 
fûãr_t
<,>& 
fûãr_chaö
) {

665 
	gtbb
::
èsk_group_c⁄ãxt
 
c⁄ãxt
;

666 
∑øŒñ_pùñöe
(
max_numbî_of_live_tokís
, 
fûãr_chaö
, 
c⁄ãxt
);

672 
usög
 
	göãrÁ˚6
::
Êow_c⁄åﬁ
;

673 
usög
 
	göãrÁ˚6
::
fûãr_t
;

674 
usög
 
	göãrÁ˚6
::
make_fûãr
;

675 
usög
 
	göãrÁ˚6
::
∑øŒñ_pùñöe
;

679 
	~"öã∫Æ/_w¨nög_suµªss_dißbÀ_nŸi˚.h
"

680 #unde‡
__TBB_pùñöe_H_ö˛ude_¨ó


	@/usr/include/tbb/queuing_mutex.h

17 #i‚de‡
__TBB_queuög_muãx_H


18 
	#__TBB_queuög_muãx_H


	)

20 
	#__TBB_queuög_muãx_H_ö˛ude_¨ó


	)

21 
	~"öã∫Æ/_w¨nög_suµªss_íabÀ_nŸi˚.h
"

23 
	~<c°rög
>

24 
	~"©omic.h
"

25 
	~"tbb_¥ofûög.h
"

27 
«me•a˚
 
	gtbb
 {

31 ˛as†
	cqueuög_muãx
 : 
öã∫Æ
::
muãx_c›y_dïªˇãd_™d_dißbÀd
 {

32 
public
:

34 
queuög_muãx
() {

35 
q_èû
 = 
NULL
;

36 #i‡
TBB_USE_THREADING_TOOLS


37 
öã∫Æ_c⁄°ru˘
();

44 ˛as†
	csc›ed_lock
: 
öã∫Æ
::
no_c›y
 {

46 
öôülize
() {

47 
muãx
 = 
NULL
;

48 
	ggoög
 = 0;

49 #i‡
TBB_USE_ASSERT


50 
	göã∫Æ
::
pois⁄_poöãr
(
√xt
);

54 
	gpublic
:

57 
sc›ed_lock
(Ë{
öôülize
();}

60 
sc›ed_lock
–
queuög_muãx
& 
m
 ) {

61 
öôülize
();

62 
acquúe
(
m
);

66 ~
sc›ed_lock
() {

67 if–
	gmuãx
 ) 
ªÀa£
();

71 
__TBB_EXPORTED_METHOD
 
acquúe
–
queuög_muãx
& 
m
 );

74 
boﬁ
 
__TBB_EXPORTED_METHOD
 
åy_acquúe
–
queuög_muãx
& 
m
 );

77 
__TBB_EXPORTED_METHOD
 
ªÀa£
();

79 
	g¥iv©e
:

81 
queuög_muãx
* 
muãx
;

84 
sc›ed_lock
 *
	g√xt
;

90 
uöçå_t
 
	ggoög
;

93 
__TBB_EXPORTED_METHOD
 
öã∫Æ_c⁄°ru˘
();

96 c⁄° 
boﬁ
 
	gis_rw_muãx
 = 
Ál£
;

97 c⁄° 
boﬁ
 
	gis_ªcursive_muãx
 = 
Ál£
;

98 c⁄° 
boﬁ
 
	gis_Áú_muãx
 = 
åue
;

100 
	g¥iv©e
:

102 
©omic
<
sc›ed_lock
*> 
q_èû
;

106 
__TBB_DEFINE_PROFILING_SET_NAME
(
queuög_muãx
)

110 
	~"öã∫Æ/_w¨nög_suµªss_dißbÀ_nŸi˚.h
"

111 #unde‡
__TBB_queuög_muãx_H_ö˛ude_¨ó


	@/usr/include/tbb/queuing_rw_mutex.h

17 #i‚de‡
__TBB_queuög_rw_muãx_H


18 
	#__TBB_queuög_rw_muãx_H


	)

20 
	#__TBB_queuög_rw_muãx_H_ö˛ude_¨ó


	)

21 
	~"öã∫Æ/_w¨nög_suµªss_íabÀ_nŸi˚.h
"

23 
	~<c°rög
>

24 
	~"©omic.h
"

25 
	~"tbb_¥ofûög.h
"

27 
«me•a˚
 
	gtbb
 {

33 ˛as†
	cqueuög_rw_muãx
 : 
öã∫Æ
::
muãx_c›y_dïªˇãd_™d_dißbÀd
 {

34 
public
:

36 
queuög_rw_muãx
() {

37 
q_èû
 = 
NULL
;

38 #i‡
TBB_USE_THREADING_TOOLS


39 
öã∫Æ_c⁄°ru˘
();

44 ~
queuög_rw_muãx
() {

45 #i‡
TBB_USE_ASSERT


46 
__TBB_ASSERT
–!
q_èû
, "destruction ofánácquired mutex");

53 ˛as†
	csc›ed_lock
: 
öã∫Æ
::
no_c›y
 {

55 
öôülize
() {

56 
my_muãx
 = 
NULL
;

57 
	gmy_öã∫Æ_lock
 = 0;

58 
	gmy_goög
 = 0;

59 #i‡
TBB_USE_ASSERT


60 
	gmy_°©e
 = 0xFF;

61 
	göã∫Æ
::
pois⁄_poöãr
(
my_√xt
);

62 
	göã∫Æ
::
pois⁄_poöãr
(
my_¥ev
);

66 
	gpublic
:

69 
sc›ed_lock
(Ë{
öôülize
();}

72 
sc›ed_lock
–
queuög_rw_muãx
& 
m
, 
boﬁ
 
wrôe
=
åue
 ) {

73 
öôülize
();

74 
acquúe
(
m
,
wrôe
);

78 ~
sc›ed_lock
() {

79 if–
	gmy_muãx
 ) 
ªÀa£
();

83 
acquúe
–
queuög_rw_muãx
& 
m
, 
boﬁ
 
wrôe
=
åue
 );

86 
boﬁ
 
åy_acquúe
–
queuög_rw_muãx
& 
m
, boﬁ 
wrôe
=
åue
 );

89 
ªÀa£
();

93 
boﬁ
 
upgøde_to_wrôî
();

96 
boﬁ
 
downgøde_to_ªadî
();

98 
	g¥iv©e
:

100 
queuög_rw_muãx
* 
my_muãx
;

103 
sc›ed_lock
 *
__TBB_©omic
 
	gmy_¥ev
, *__TBB_©omi¯
	gmy_√xt
;

105 
	t°©e_t
;

108 
	g©omic
<
	g°©e_t
> 
	gmy_°©e
;

112 
__TBB_©omic
 
	gmy_goög
;

115 
	gmy_öã∫Æ_lock
;

118 
acquúe_öã∫Æ_lock
();

122 
boﬁ
 
åy_acquúe_öã∫Æ_lock
();

125 
ªÀa£_öã∫Æ_lock
();

128 
waô_f‹_ªÀa£_of_öã∫Æ_lock
();

131 
unblock_‹_waô_⁄_öã∫Æ_lock
–
uöçå_t
 );

134 
__TBB_EXPORTED_METHOD
 
öã∫Æ_c⁄°ru˘
();

137 c⁄° 
boﬁ
 
	gis_rw_muãx
 = 
åue
;

138 c⁄° 
boﬁ
 
	gis_ªcursive_muãx
 = 
Ál£
;

139 c⁄° 
boﬁ
 
	gis_Áú_muãx
 = 
åue
;

141 
	g¥iv©e
:

143 
©omic
<
sc›ed_lock
*> 
q_èû
;

147 
__TBB_DEFINE_PROFILING_SET_NAME
(
queuög_rw_muãx
)

151 
	~"öã∫Æ/_w¨nög_suµªss_dißbÀ_nŸi˚.h
"

152 #unde‡
__TBB_queuög_rw_muãx_H_ö˛ude_¨ó


	@/usr/include/tbb/reader_writer_lock.h

17 
	~"öã∫Æ/_dïªˇãd_hódî_mesßge_gu¨d.h
"

19 #i‡!
deföed
(
__TBB_show_dïªˇti⁄_mesßge_ªadî_wrôî_lock_H
Ë&& deföed(
__TBB_show_dïªˇãd_hódî_mesßge
)

20 
	#__TBB_show_dïªˇti⁄_mesßge_ªadî_wrôî_lock_H


	)

21 #¥agm®
mesßge
("TBB Warning:Åbb/reader_writer_lock.h is deprecated. For details,Ölease see Deprecated Featuresáppendix inÅhe TBBÑeference manual.")

24 #i‡
deföed
(
__TBB_show_dïªˇãd_hódî_mesßge
)

25 #unde‡
__TBB_show_dïªˇãd_hódî_mesßge


28 #i‚de‡
__TBB_ªadî_wrôî_lock_H


29 
	#__TBB_ªadî_wrôî_lock_H


	)

31 
	#__TBB_ªadî_wrôî_lock_H_ö˛ude_¨ó


	)

32 
	~"öã∫Æ/_w¨nög_suµªss_íabÀ_nŸi˚.h
"

34 
	~"tbb_thªad.h
"

35 
	~"tbb_Æloˇt‹.h
"

36 
	~"©omic.h
"

38 
«me•a˚
 
	gtbb
 {

39 
«me•a˚
 
	göãrÁ˚5
 {

44 
˛ass
 
__TBB_DEPRECATED_VERBOSE_MSG
("tbb::reader_writer_lock is deprecated, use std::shared_mutex")

45 
	gªadî_wrôî_lock
 : 
tbb
::
öã∫Æ
::
no_c›y
 {

46 
public
:

47 
‰õnd
 
˛ass
 
sc›ed_lock
;

48 
‰õnd
 
˛ass
 
	gsc›ed_lock_ªad
;

85 
	e°©us_t
 { 
	gwaôög_n⁄blockög
, 
	gwaôög
, 
	ga˘ive
, 
	gövÆid
 };

88 
ªadî_wrôî_lock
() {

89 
öã∫Æ_c⁄°ru˘
();

93 ~
ªadî_wrôî_lock
() {

94 
öã∫Æ_de°roy
();

100 ˛as†
	csc›ed_lock
 : 
tbb
::
öã∫Æ
::
no_c›y
 {

101 
public
:

102 
‰õnd
 
˛ass
 
ªadî_wrôî_lock
;

105 
sc›ed_lock
(
ªadî_wrôî_lock
& 
lock
) {

106 
öã∫Æ_c⁄°ru˘
(
lock
);

110 ~
sc›ed_lock
() {

111 
öã∫Æ_de°roy
();

114 * 
›î©‹
 
√w
(
size_t
 
s
) {

115  
	gtbb
::
öã∫Æ
::
Æloˇã_vü_h™dÀr_v3
(
s
);

117 
›î©‹
 
dñëe
(* 
p
) {

118 
	gtbb
::
öã∫Æ
::
dóŒoˇã_vü_h™dÀr_v3
(
p
);

121 
	g¥iv©e
:

123 
ªadî_wrôî_lock
 *
muãx
;

125 
sc›ed_lock
* 
	g√xt
;

127 
	g©omic
<
	g°©us_t
> 
	g°©us
;

130 
sc›ed_lock
();

132 
__TBB_EXPORTED_METHOD
 
öã∫Æ_c⁄°ru˘
(
ªadî_wrôî_lock
&);

133 
__TBB_EXPORTED_METHOD
 
öã∫Æ_de°roy
();

137 ˛as†
	csc›ed_lock_ªad
 : 
tbb
::
öã∫Æ
::
no_c›y
 {

138 
public
:

139 
‰õnd
 
˛ass
 
ªadî_wrôî_lock
;

142 
sc›ed_lock_ªad
(
ªadî_wrôî_lock
& 
lock
) {

143 
öã∫Æ_c⁄°ru˘
(
lock
);

147 ~
sc›ed_lock_ªad
() {

148 
öã∫Æ_de°roy
();

151 * 
›î©‹
 
√w
(
size_t
 
s
) {

152  
	gtbb
::
öã∫Æ
::
Æloˇã_vü_h™dÀr_v3
(
s
);

154 
›î©‹
 
dñëe
(* 
p
) {

155 
	gtbb
::
öã∫Æ
::
dóŒoˇã_vü_h™dÀr_v3
(
p
);

158 
	g¥iv©e
:

160 
ªadî_wrôî_lock
 *
muãx
;

162 
sc›ed_lock_ªad
 *
	g√xt
;

164 
	g©omic
<
	g°©us_t
> 
	g°©us
;

167 
sc›ed_lock_ªad
();

169 
__TBB_EXPORTED_METHOD
 
öã∫Æ_c⁄°ru˘
(
ªadî_wrôî_lock
&);

170 
__TBB_EXPORTED_METHOD
 
öã∫Æ_de°roy
();

179 
__TBB_EXPORTED_METHOD
 
lock
();

186 
boﬁ
 
__TBB_EXPORTED_METHOD
 
åy_lock
();

193 
__TBB_EXPORTED_METHOD
 
lock_ªad
();

198 
boﬁ
 
__TBB_EXPORTED_METHOD
 
åy_lock_ªad
();

201 
__TBB_EXPORTED_METHOD
 
u∆ock
();

203 
	g¥iv©e
:

204 
__TBB_EXPORTED_METHOD
 
öã∫Æ_c⁄°ru˘
();

205 
__TBB_EXPORTED_METHOD
 
öã∫Æ_de°roy
();

209 
boﬁ
 
°¨t_wrôe
(
sc›ed_lock
 *);

211 
£t_√xt_wrôî
(
sc›ed_lock
 *
w
);

213 
íd_wrôe
(
sc›ed_lock
 *);

215 
boﬁ
 
is_cuºít_wrôî
();

219 
°¨t_ªad
(
sc›ed_lock_ªad
 *);

221 
unblock_ªadîs
();

223 
íd_ªad
();

226 
	g©omic
<
	gsc›ed_lock_ªad
*> 
	gªadî_hód
;

228 
	g©omic
<
	gsc›ed_lock
*> 
	gwrôî_hód
;

230 
	g©omic
<
	gsc›ed_lock
*> 
	gwrôî_èû
;

232 
	gtbb_thªad
::
id
 
my_cuºít_wrôî
;

234 
	g©omic
<
	guöçå_t
> 
	grdr_cou¡_™d_Êags
;

239 
usög
 
	göãrÁ˚5
::
ªadî_wrôî_lock
;

243 
	~"öã∫Æ/_w¨nög_suµªss_dißbÀ_nŸi˚.h
"

244 #unde‡
__TBB_ªadî_wrôî_lock_H_ö˛ude_¨ó


	@/usr/include/tbb/recursive_mutex.h

17 
	~"öã∫Æ/_dïªˇãd_hódî_mesßge_gu¨d.h
"

19 #i‡!
deföed
(
__TBB_show_dïªˇti⁄_mesßge_ªcursive_muãx_H
Ë&& deföed(
__TBB_show_dïªˇãd_hódî_mesßge
)

20 
	#__TBB_show_dïªˇti⁄_mesßge_ªcursive_muãx_H


	)

21 #¥agm®
mesßge
("TBB Warning:Åbb/recursive_mutex.h is deprecated. For details,Ölease see Deprecated Featuresáppendix inÅhe TBBÑeference manual.")

24 #i‡
deföed
(
__TBB_show_dïªˇãd_hódî_mesßge
)

25 #unde‡
__TBB_show_dïªˇãd_hódî_mesßge


28 #i‚de‡
__TBB_ªcursive_muãx_H


29 
	#__TBB_ªcursive_muãx_H


	)

31 
	#__TBB_ªcursive_muãx_H_ö˛ude_¨ó


	)

32 
	~"öã∫Æ/_w¨nög_suµªss_íabÀ_nŸi˚.h
"

34 #i‡
_WIN32
||
_WIN64


35 
	~"machöe/wödows_≠i.h
"

37 
	~<±hªad.h
>

40 
	~<√w
>

41 
	~"Æig√d_•a˚.h
"

42 
	~"tbb_°ddef.h
"

43 
	~"tbb_¥ofûög.h
"

45 
«me•a˚
 
	gtbb
 {

49 
˛ass
 
__TBB_DEPRECATED_VERBOSE_MSG
("tbb::recursive_mutex is deprecated, use std::recursive_mutex")

50 
	gªcursive_muãx
 : 
öã∫Æ
::
muãx_c›y_dïªˇãd_™d_dißbÀd
 {

51 
public
:

53 
ªcursive_muãx
() {

54 #i‡
TBB_USE_ASSERT
 || 
TBB_USE_THREADING_TOOLS


55 
öã∫Æ_c⁄°ru˘
();

57 #i‡
_WIN32
||
_WIN64


58 
InôülizeCrôiˇlSe˘i⁄Ex
(&
im∂
, 4000, 0);

60 
±hªad_muãx©å_t
 
	gmtx_©å
;

61 
	gîr‹_code
 = 
±hªad_muãx©å_öô
–&
mtx_©å
 );

62 if–
	gîr‹_code
 )

63 
	gtbb
::
öã∫Æ
::
h™dÀ_≥º‹
(
îr‹_code
,"recursive_mutex:Öthread_mutexattr_init failed");

65 
±hªad_muãx©å_£ây≥
–&
mtx_©å
, 
PTHREAD_MUTEX_RECURSIVE
 );

66 
	gîr‹_code
 = 
±hªad_muãx_öô
–&
im∂
, &
mtx_©å
 );

67 if–
	gîr‹_code
 )

68 
	gtbb
::
öã∫Æ
::
h™dÀ_≥º‹
(
îr‹_code
,"recursive_mutex:Öthread_mutex_init failed");

70 
±hªad_muãx©å_de°roy
–&
mtx_©å
 );

75 ~
ªcursive_muãx
() {

76 #i‡
TBB_USE_ASSERT


77 
öã∫Æ_de°roy
();

79 #i‡
_WIN32
||
_WIN64


80 
DñëeCrôiˇlSe˘i⁄
(&
im∂
);

82 
±hªad_muãx_de°roy
(&
im∂
);

88 
˛ass
 
	gsc›ed_lock
;

89 
‰õnd
 
˛ass
 
	gsc›ed_lock
;

94 ˛as†
	csc›ed_lock
: 
öã∫Æ
::
no_c›y
 {

95 
public
:

97 
sc›ed_lock
(Ë: 
my_muãx
(
NULL
) {};

100 
sc›ed_lock
–
ªcursive_muãx
& 
muãx
 ) {

101 #i‡
TBB_USE_ASSERT


102 
	gmy_muãx
 = &
muãx
;

104 
acquúe
–
muãx
 );

108 ~
sc›ed_lock
() {

109 if–
	gmy_muãx
 )

110 
ªÀa£
();

114 
acquúe
–
ªcursive_muãx
& 
muãx
 ) {

115 #i‡
TBB_USE_ASSERT


116 
öã∫Æ_acquúe
–
muãx
 );

118 
	gmy_muãx
 = &
muãx
;

119 
	gmuãx
.
lock
();

124 
boﬁ
 
åy_acquúe
–
ªcursive_muãx
& 
muãx
 ) {

125 #i‡
TBB_USE_ASSERT


126  
öã∫Æ_åy_acquúe
–
muãx
 );

128 
boﬁ
 
	gªsu…
 = 
muãx
.
åy_lock
();

129 if–
	gªsu…
 )

130 
	gmy_muãx
 = &
muãx
;

131  
	gªsu…
;

136 
ªÀa£
() {

137 #i‡
TBB_USE_ASSERT


138 
öã∫Æ_ªÀa£
();

140 
	gmy_muãx
->
u∆ock
();

141 
	gmy_muãx
 = 
NULL
;

145 
	g¥iv©e
:

147 
ªcursive_muãx
* 
my_muãx
;

150 
__TBB_EXPORTED_METHOD
 
öã∫Æ_acquúe
–
ªcursive_muãx
& 
m
 );

153 
boﬁ
 
__TBB_EXPORTED_METHOD
 
öã∫Æ_åy_acquúe
–
ªcursive_muãx
& 
m
 );

156 
__TBB_EXPORTED_METHOD
 
öã∫Æ_ªÀa£
();

158 
‰õnd
 
˛ass
 
	gªcursive_muãx
;

162 c⁄° 
boﬁ
 
	gis_rw_muãx
 = 
Ál£
;

163 c⁄° 
boﬁ
 
	gis_ªcursive_muãx
 = 
åue
;

164 c⁄° 
boﬁ
 
	gis_Áú_muãx
 = 
Ál£
;

169 
lock
() {

170 #i‡
TBB_USE_ASSERT


171 
	gÆig√d_•a˚
<
	gsc›ed_lock
> 
	gtmp
;

172 
√w
(
tmp
.
begö
()Ë
sc›ed_lock
(*
this
);

174 #i‡
_WIN32
||
_WIN64


175 
E¡îCrôiˇlSe˘i⁄
(&
im∂
);

177 
	gîr‹_code
 = 
±hªad_muãx_lock
(&
im∂
);

178 if–
	gîr‹_code
 )

179 
	gtbb
::
öã∫Æ
::
h™dÀ_≥º‹
(
îr‹_code
,"recursive_mutex:Öthread_mutex_lock failed");

186 
boﬁ
 
åy_lock
() {

187 #i‡
TBB_USE_ASSERT


188 
	gÆig√d_•a˚
<
	gsc›ed_lock
> 
	gtmp
;

189  (
√w
(
tmp
.
begö
()Ë
	gsc›ed_lock
)->
öã∫Æ_åy_acquúe
(*
this
);

191 #i‡
_WIN32
||
_WIN64


192  
TryE¡îCrôiˇlSe˘i⁄
(&
im∂
)!=0;

194  
±hªad_muãx_åylock
(&
im∂
)==0;

200 
u∆ock
() {

201 #i‡
TBB_USE_ASSERT


202 
	gÆig√d_•a˚
<
	gsc›ed_lock
> 
	gtmp
;

203 
	gsc›ed_lock
& 
	gs
 = *
tmp
.
begö
();

204 
	gs
.
	gmy_muãx
 = 
this
;

205 
	gs
.
öã∫Æ_ªÀa£
();

207 #i‡
_WIN32
||
_WIN64


208 
LóveCrôiˇlSe˘i⁄
(&
im∂
);

210 
±hªad_muãx_u∆ock
(&
im∂
);

216 #i‡
_WIN32
||
_WIN64


217 
LPCRITICAL_SECTION
 
	t«tive_h™dÀ_ty≥
;

219 
±hªad_muãx_t
* 
	t«tive_h™dÀ_ty≥
;

221 
«tive_h™dÀ_ty≥
 
«tive_h™dÀ
(Ë{  (
	g«tive_h™dÀ_ty≥
Ë&
	gim∂
; }

223 
	g¥iv©e
:

224 #i‡
_WIN32
||
_WIN64


225 
CRITICAL_SECTION
 
im∂
;

226 
	e°©e_t
 {

227 
	gINITIALIZED
=0x1234,

228 
	gDESTROYED
=0x789A,

229 } 
	g°©e
;

231 
±hªad_muãx_t
 
	gim∂
;

235 
__TBB_EXPORTED_METHOD
 
öã∫Æ_c⁄°ru˘
();

238 
__TBB_EXPORTED_METHOD
 
öã∫Æ_de°roy
();

241 
__TBB_DEFINE_PROFILING_SET_NAME
(
ªcursive_muãx
)

245 
	~"öã∫Æ/_w¨nög_suµªss_dißbÀ_nŸi˚.h
"

246 #unde‡
__TBB_ªcursive_muãx_H_ö˛ude_¨ó


	@/usr/include/tbb/spin_mutex.h

17 #i‚de‡
__TBB_•ö_muãx_H


18 
	#__TBB_•ö_muãx_H


	)

20 
	#__TBB_•ö_muãx_H_ö˛ude_¨ó


	)

21 
	~"öã∫Æ/_w¨nög_suµªss_íabÀ_nŸi˚.h
"

23 
	~<c°ddef
>

24 
	~<√w
>

25 
	~"Æig√d_•a˚.h
"

26 
	~"tbb_°ddef.h
"

27 
	~"tbb_machöe.h
"

28 
	~"tbb_¥ofûög.h
"

29 
	~"öã∫Æ/_muãx_∑ddög.h
"

31 
«me•a˚
 
	gtbb
 {

39 ˛as†
	c•ö_muãx
 : 
öã∫Æ
::
muãx_c›y_dïªˇãd_™d_dißbÀd
 {

41 
__TBB_©omic_Êag
 
Êag
;

43 
	gpublic
:

46 
•ö_muãx
(Ë: 
Êag
(0) {

47 #i‡
TBB_USE_THREADING_TOOLS


48 
öã∫Æ_c⁄°ru˘
();

53 ˛as†
	csc›ed_lock
 : 
öã∫Æ
::
no_c›y
 {

54 
¥iv©e
:

56 
•ö_muãx
* 
my_muãx
;

62 
__TBB_Fœg
 
	gmy_u∆ock_vÆue
;

65 
__TBB_EXPORTED_METHOD
 
öã∫Æ_acquúe
–
•ö_muãx
& 
m
 );

68 
boﬁ
 
__TBB_EXPORTED_METHOD
 
öã∫Æ_åy_acquúe
–
•ö_muãx
& 
m
 );

71 
__TBB_EXPORTED_METHOD
 
öã∫Æ_ªÀa£
();

73 
‰õnd
 
˛ass
 
	g•ö_muãx
;

75 
	gpublic
:

77 
sc›ed_lock
(Ë: 
my_muãx
(
NULL
), 
my_u∆ock_vÆue
(0) {}

80 
sc›ed_lock
–
•ö_muãx
& 
m
 ) : 
my_u∆ock_vÆue
(0) {

81 
öã∫Æ
::
suµªss_unu£d_w¨nög
(
my_u∆ock_vÆue
);

82 #i‡
TBB_USE_THREADING_TOOLS
||
TBB_USE_ASSERT


83 
	gmy_muãx
=
NULL
;

84 
öã∫Æ_acquúe
(
m
);

86 
	gmy_muãx
=&
m
;

87 
__TBB_LockByã
(
m
.
Êag
);

92 
acquúe
–
•ö_muãx
& 
m
 ) {

93 #i‡
TBB_USE_THREADING_TOOLS
||
TBB_USE_ASSERT


94 
öã∫Æ_acquúe
(
m
);

96 
	gmy_muãx
 = &
m
;

97 
__TBB_LockByã
(
m
.
Êag
);

103 
boﬁ
 
åy_acquúe
–
•ö_muãx
& 
m
 ) {

104 #i‡
TBB_USE_THREADING_TOOLS
||
TBB_USE_ASSERT


105  
öã∫Æ_åy_acquúe
(
m
);

107 
boﬁ
 
	gªsu…
 = 
__TBB_TryLockByã
(
m
.
Êag
);

108 if–
	gªsu…
 )

109 
	gmy_muãx
 = &
m
;

110  
	gªsu…
;

115 
ªÀa£
() {

116 #i‡
TBB_USE_THREADING_TOOLS
||
TBB_USE_ASSERT


117 
öã∫Æ_ªÀa£
();

119 
__TBB_U∆ockByã
(
my_muãx
->
Êag
);

120 
	gmy_muãx
 = 
NULL
;

125 ~
sc›ed_lock
() {

126 if–
	gmy_muãx
 ) {

127 #i‡
TBB_USE_THREADING_TOOLS
||
TBB_USE_ASSERT


128 
öã∫Æ_ªÀa£
();

130 
__TBB_U∆ockByã
(
my_muãx
->
Êag
);

137 
__TBB_EXPORTED_METHOD
 
öã∫Æ_c⁄°ru˘
();

140 c⁄° 
boﬁ
 
	gis_rw_muãx
 = 
Ál£
;

141 c⁄° 
boﬁ
 
	gis_ªcursive_muãx
 = 
Ál£
;

142 c⁄° 
boﬁ
 
	gis_Áú_muãx
 = 
Ál£
;

147 
lock
() {

148 #i‡
TBB_USE_THREADING_TOOLS


149 
	gÆig√d_•a˚
<
	gsc›ed_lock
> 
	gtmp
;

150 
√w
(
tmp
.
begö
()Ë
sc›ed_lock
(*
this
);

152 
__TBB_LockByã
(
Êag
);

158 
boﬁ
 
åy_lock
() {

159 #i‡
TBB_USE_THREADING_TOOLS


160 
	gÆig√d_•a˚
<
	gsc›ed_lock
> 
	gtmp
;

161  (
√w
(
tmp
.
begö
()Ë
	gsc›ed_lock
)->
öã∫Æ_åy_acquúe
(*
this
);

163  
__TBB_TryLockByã
(
Êag
);

168 
u∆ock
() {

169 #i‡
TBB_USE_THREADING_TOOLS


170 
	gÆig√d_•a˚
<
	gsc›ed_lock
> 
	gtmp
;

171 
	gsc›ed_lock
& 
	gs
 = *
tmp
.
begö
();

172 
	gs
.
	gmy_muãx
 = 
this
;

173 
	gs
.
öã∫Æ_ªÀa£
();

175 
__TBB_U∆ockByã
(
Êag
);

179 
‰õnd
 
˛ass
 
	gsc›ed_lock
;

182 
__TBB_DEFINE_PROFILING_SET_NAME
(
•ö_muãx
)

186 #i‡–
__TBB_x86_32
 || 
__TBB_x86_64
 )

187 
	~"öã∫Æ/_x86_ñidög_muãx_im∂.h
"

190 
«me•a˚
 
	gtbb
 {

202 #i‡–
__TBB_x86_32
 || 
__TBB_x86_64
 )

203 
	göãrÁ˚7
::
	töã∫Æ
::
	t∑dded_muãx
<
	töãrÁ˚7
::öã∫Æ::
	tx86_ñidög_muãx
,
	tÁl£
> 
	t•ecuœtive_•ö_muãx
;

205 
	göãrÁ˚7
::
	töã∫Æ
::
	t∑dded_muãx
<
	t•ö_muãx
,
	tÁl£
> 
	t•ecuœtive_•ö_muãx
;

207 
__TBB_DEFINE_PROFILING_SET_NAME
(
•ecuœtive_•ö_muãx
)

211 
	~"öã∫Æ/_w¨nög_suµªss_dißbÀ_nŸi˚.h
"

212 #unde‡
__TBB_•ö_muãx_H_ö˛ude_¨ó


	@/usr/include/tbb/spin_rw_mutex.h

17 #i‚de‡
__TBB_•ö_rw_muãx_H


18 
	#__TBB_•ö_rw_muãx_H


	)

20 
	~"tbb_°ddef.h
"

21 
	~"tbb_machöe.h
"

22 
	~"tbb_¥ofûög.h
"

23 
	~"öã∫Æ/_muãx_∑ddög.h
"

25 
«me•a˚
 
	gtbb
 {

27 #i‡
__TBB_TSX_AVAILABLE


28 
«me•a˚
 
	göãrÁ˚8
 {Çame•a˚ 
	göã∫Æ
 {

29 
˛ass
 
	gx86_πm_rw_muãx
;

33 
˛ass
 
	g•ö_rw_muãx_v3
;

34 
•ö_rw_muãx_v3
 
	t•ö_rw_muãx
;

38 ˛as†
	c•ö_rw_muãx_v3
 : 
öã∫Æ
::
muãx_c›y_dïªˇãd_™d_dißbÀd
 {

42 
boﬁ
 
__TBB_EXPORTED_METHOD
 
öã∫Æ_acquúe_wrôî
();

46 
__TBB_EXPORTED_METHOD
 
öã∫Æ_ªÀa£_wrôî
();

49 
__TBB_EXPORTED_METHOD
 
öã∫Æ_acquúe_ªadî
();

52 
boﬁ
 
__TBB_EXPORTED_METHOD
 
öã∫Æ_upgøde
();

56 
__TBB_EXPORTED_METHOD
 
öã∫Æ_downgøde
();

59 
__TBB_EXPORTED_METHOD
 
öã∫Æ_ªÀa£_ªadî
();

62 
boﬁ
 
__TBB_EXPORTED_METHOD
 
öã∫Æ_åy_acquúe_wrôî
();

65 
boﬁ
 
__TBB_EXPORTED_METHOD
 
öã∫Æ_åy_acquúe_ªadî
();

68 
	gpublic
:

70 
•ö_rw_muãx_v3
(Ë: 
°©e
(0) {

71 #i‡
TBB_USE_THREADING_TOOLS


72 
öã∫Æ_c⁄°ru˘
();

76 #i‡
TBB_USE_ASSERT


78 ~
•ö_rw_muãx_v3
() {

79 
__TBB_ASSERT
–!
°©e
, "destruction ofánácquired mutex");

86 ˛as†
	csc›ed_lock
 : 
öã∫Æ
::
no_c›y
 {

87 #i‡
__TBB_TSX_AVAILABLE


88 
‰õnd
 
˛ass
 
tbb
::
öãrÁ˚8
::
öã∫Æ
::
x86_πm_rw_muãx
;

90 
	gpublic
:

93 
sc›ed_lock
(Ë: 
muãx
(
NULL
), 
is_wrôî
(
Ál£
) {}

96 
sc›ed_lock
–
•ö_rw_muãx
& 
m
, 
boﬁ
 
wrôe
 = 
åue
 ) : 
muãx
(
NULL
) {

97 
acquúe
(
m
, 
wrôe
);

101 ~
sc›ed_lock
() {

102 if–
	gmuãx
 ) 
ªÀa£
();

106 
acquúe
–
•ö_rw_muãx
& 
m
, 
boﬁ
 
wrôe
 = 
åue
 ) {

107 
__TBB_ASSERT
–!
muãx
, "holding mutexálready" );

108 
	gis_wrôî
 = 
wrôe
;

109 
	gmuãx
 = &
m
;

110 if–
	gwrôe
 ) 
	gmuãx
->
öã∫Æ_acquúe_wrôî
();

111 
	gmuãx
->
öã∫Æ_acquúe_ªadî
();

116 
boﬁ
 
upgøde_to_wrôî
() {

117 
__TBB_ASSERT
–
muãx
, "mutex isÇotácquired" );

118 i‡(
	gis_wrôî
Ë 
	gåue
;

119 
	gis_wrôî
 = 
åue
;

120  
	gmuãx
->
öã∫Æ_upgøde
();

124 
ªÀa£
() {

125 
__TBB_ASSERT
–
muãx
, "mutex isÇotácquired" );

126 
•ö_rw_muãx
 *
	gm
 = 
muãx
;

127 
	gmuãx
 = 
NULL
;

128 #i‡
TBB_USE_THREADING_TOOLS
||
TBB_USE_ASSERT


129 if–
	gis_wrôî
 ) 
	gm
->
öã∫Æ_ªÀa£_wrôî
();

130 
	gm
->
öã∫Æ_ªÀa£_ªadî
();

132 if–
	gis_wrôî
 ) 
__TBB_AtomicAND
–&
m
->
°©e
, 
READERS
 );

133 
__TBB_FëchAndAddWªÀa£
–&
m
->
°©e
, -(
öçå_t
)
ONE_READER
);

138 
boﬁ
 
downgøde_to_ªadî
() {

139 
__TBB_ASSERT
–
muãx
, "mutex isÇotácquired" );

140 i‡(!
	gis_wrôî
Ë 
	gåue
;

141 #i‡
TBB_USE_THREADING_TOOLS
||
TBB_USE_ASSERT


142 
	gmuãx
->
öã∫Æ_downgøde
();

144 
__TBB_FëchAndAddW
–&
muãx
->
°©e
, ((
öçå_t
)
ONE_READER
-
WRITER
));

146 
	gis_wrôî
 = 
Ál£
;

147  
	gåue
;

151 
boﬁ
 
åy_acquúe
–
•ö_rw_muãx
& 
m
, boﬁ 
wrôe
 = 
åue
 ) {

152 
__TBB_ASSERT
–!
muãx
, "holding mutexálready" );

153 
boﬁ
 
	gªsu…
;

154 
	gis_wrôî
 = 
wrôe
;

155 
	gªsu…
 = 
wrôe
? 
m
.
öã∫Æ_åy_acquúe_wrôî
()

156 : 
m
.
öã∫Æ_åy_acquúe_ªadî
();

157 if–
	gªsu…
 )

158 
	gmuãx
 = &
m
;

159  
	gªsu…
;

162 
	g¥Ÿe˘ed
:

165 
•ö_rw_muãx
* 
muãx
;

169 
boﬁ
 
	gis_wrôî
;

173 c⁄° 
boﬁ
 
	gis_rw_muãx
 = 
åue
;

174 c⁄° 
boﬁ
 
	gis_ªcursive_muãx
 = 
Ál£
;

175 c⁄° 
boﬁ
 
	gis_Áú_muãx
 = 
Ál£
;

180 
lock
(Ë{
öã∫Æ_acquúe_wrôî
();}

184 
boﬁ
 
åy_lock
(Ë{ 
öã∫Æ_åy_acquúe_wrôî
();}

187 
u∆ock
() {

188 #i‡
TBB_USE_THREADING_TOOLS
||
TBB_USE_ASSERT


189 if–
	g°©e
&
	gWRITER
 ) 
öã∫Æ_ªÀa£_wrôî
();

190 
öã∫Æ_ªÀa£_ªadî
();

192 if–
	g°©e
&
	gWRITER
 ) 
__TBB_AtomicAND
–&
°©e
, 
READERS
 );

193 
__TBB_FëchAndAddWªÀa£
–&
°©e
, -(
öçå_t
)
ONE_READER
);

200 
lock_ªad
(Ë{
öã∫Æ_acquúe_ªadî
();}

204 
boﬁ
 
åy_lock_ªad
(Ë{ 
öã∫Æ_åy_acquúe_ªadî
();}

206 
	g¥Ÿe˘ed
:

207 
öçå_t
 
	t°©e_t
;

208 c⁄° 
°©e_t
 
	gWRITER
 = 1;

209 c⁄° 
°©e_t
 
	gWRITER_PENDING
 = 2;

210 c⁄° 
°©e_t
 
	gREADERS
 = ~(
WRITER
 | 
WRITER_PENDING
);

211 c⁄° 
°©e_t
 
	gONE_READER
 = 4;

212 c⁄° 
°©e_t
 
	gBUSY
 = 
WRITER
 | 
READERS
;

217 
°©e_t
 
	g°©e
;

219 
	g¥iv©e
:

220 
__TBB_EXPORTED_METHOD
 
öã∫Æ_c⁄°ru˘
();

223 
__TBB_DEFINE_PROFILING_SET_NAME
(
•ö_rw_muãx
)

227 #i‡
__TBB_TSX_AVAILABLE


228 
	~"öã∫Æ/_x86_πm_rw_muãx_im∂.h
"

231 
«me•a˚
 
	gtbb
 {

232 
«me•a˚
 
	göãrÁ˚8
 {

242 #i‡
__TBB_TSX_AVAILABLE


243 
	göãrÁ˚7
::
	töã∫Æ
::
	t∑dded_muãx
<
	ttbb
::
	töãrÁ˚8
::öã∫Æ::
	tx86_πm_rw_muãx
,
	tåue
> 
	t•ecuœtive_•ö_rw_muãx
;

245 
	göãrÁ˚7
::
	töã∫Æ
::
	t∑dded_muãx
<
	ttbb
::
	t•ö_rw_muãx
,
	tåue
> 
	t•ecuœtive_•ö_rw_muãx
;

249 
usög
 
	göãrÁ˚8
::
•ecuœtive_•ö_rw_muãx
;

250 
__TBB_DEFINE_PROFILING_SET_NAME
(
•ecuœtive_•ö_rw_muãx
)

	@/usr/include/tbb/task.h

17 #i‚de‡
__TBB_èsk_H


18 
	#__TBB_èsk_H


	)

20 
	#__TBB_èsk_H_ö˛ude_¨ó


	)

21 
	~"öã∫Æ/_w¨nög_suµªss_íabÀ_nŸi˚.h
"

23 
	~"tbb_°ddef.h
"

24 
	~"tbb_machöe.h
"

25 
	~"tbb_¥ofûög.h
"

26 
	~<˛imôs
>

28 
___ôt_ˇŒî
 *
	t__ôt_ˇŒî
;

30 
«me•a˚
 
	gtbb
 {

32 
˛ass
 
	gèsk
;

33 
˛ass
 
	gèsk_li°
;

34 
˛ass
 
	gèsk_group_c⁄ãxt
;

38 #i‡
_MSC_VER
 || (
__GNUC__
==3 && 
__GNUC_MINOR__
<3)

39 
	#__TBB_TASK_BASE_ACCESS
 
public


	)

41 
	#__TBB_TASK_BASE_ACCESS
 
¥iv©e


	)

44 
«me•a˚
 
	göã∫Æ
 {

46 ˛as†
	cÆloˇã_addôi⁄Æ_chûd_of_¥oxy
: 
no_assign
 {

48 
èsk
* 
£lf
;

49 
	gèsk
& 
	g∑ª¡
;

50 
	gpublic
:

51 
ex∂icô
 
Æloˇã_addôi⁄Æ_chûd_of_¥oxy
–
èsk
& 
∑ª¡_
 ) : 
£lf
(
NULL
), 
∑ª¡
(parent_) {

52 
suµªss_unu£d_w¨nög
–
£lf
 );

54 
	gèsk
& 
__TBB_EXPORTED_METHOD
 
Æloˇã
–
size_t
 
size
 ) const;

55 
__TBB_EXPORTED_METHOD
 
‰ì
–
èsk
& ) const;

58 
	s˝u_˘l_ív_•a˚
 { 
	g•a˚
[(
öã∫Æ
::
uöt64_t
)/()]; };

61 
«me•a˚
 
	göãrÁ˚5
 {

62 
«me•a˚
 
	göã∫Æ
 {

69 ˛as†
	cèsk_ba£
: 
tbb
::
öã∫Æ
::
no_c›y
 {

70 
__TBB_TASK_BASE_ACCESS
:

71 
‰õnd
 
˛ass
 
tbb
::
èsk
;

74 
•awn
–
èsk
& 
t
 );

77 
•awn
–
èsk_li°
& 
li°
 );

82 
	gtbb
::
öã∫Æ
::
Æloˇã_addôi⁄Æ_chûd_of_¥oxy
 
Æloˇã_addôi⁄Æ_chûd_of
–
èsk
& 
t
 ) {

83  
tbb
::
öã∫Æ
::
Æloˇã_addôi⁄Æ_chûd_of_¥oxy
(
t
);

91 
__TBB_EXPORTED_FUNC
 
de°roy
–
èsk
& 
vi˘im
 );

97 
«me•a˚
 
	göã∫Æ
 {

99 ˛as†
	cscheduÀr
: 
no_c›y
 {

100 
public
:

102 
vútuÆ
 
•awn
–
èsk
& 
fú°
,Åask*& 
√xt
 ) = 0;

105 
vútuÆ
 
waô_f‹_Æl
–
èsk
& 
∑ª¡
,Åask* 
chûd
 ) = 0;

108 
vútuÆ
 
•awn_roŸ_™d_waô
–
èsk
& 
fú°
,Åask*& 
√xt
 ) = 0;

112 
	gvútuÆ
 ~
scheduÀr
() = 0;

115 
vútuÆ
 
íqueue
–
èsk
& 
t
, * 
ª£rved
 ) = 0;

120 
öçå_t
 
	tª„ªn˚_cou¡
;

122 #i‡
__TBB_PREVIEW_RESUMABLE_TASKS


124 c⁄° 
ª„ªn˚_cou¡
 
	gab™d⁄_Êag
 =Ñe„ªn˚_cou¡(1Ë<< (‘e„ªn˚_cou¡)*
CHAR_BIT
 - 2);

128 
	tafföôy_id
;

130 #i‡
__TBB_TASK_ISOLATION


132 
öçå_t
 
	tisﬁ©i⁄_èg
;

133 c⁄° 
isﬁ©i⁄_èg
 
	gno_isﬁ©i⁄
 = 0;

136 #i‡
__TBB_TASK_GROUP_CONTEXT


137 
˛ass
 
	ggíîic_scheduÀr
;

139 
	sc⁄ãxt_li°_node_t
 {

140 
c⁄ãxt_li°_node_t
 *
	gmy_¥ev
,

141 *
	gmy_√xt
;

144 ˛as†
	cÆloˇã_roŸ_wôh_c⁄ãxt_¥oxy
: 
no_assign
 {

145 
èsk_group_c⁄ãxt
& 
my_c⁄ãxt
;

146 
	gpublic
:

147 
Æloˇã_roŸ_wôh_c⁄ãxt_¥oxy
 ( 
èsk_group_c⁄ãxt
& 
˘x
 ) : 
my_c⁄ãxt
(ctx) {}

148 
èsk
& 
__TBB_EXPORTED_METHOD
 
Æloˇã
–
size_t
 
size
 ) const;

149 
__TBB_EXPORTED_METHOD
 
‰ì
–
èsk
& ) const;

153 ˛as†
	cÆloˇã_roŸ_¥oxy
: 
no_assign
 {

154 
public
:

155 
èsk
& 
__TBB_EXPORTED_FUNC
 
Æloˇã
–
size_t
 
size
 );

156 
__TBB_EXPORTED_FUNC
 
‰ì
–
èsk
& );

159 ˛as†
	cÆloˇã_c⁄töu©i⁄_¥oxy
: 
no_assign
 {

160 
public
:

161 
èsk
& 
__TBB_EXPORTED_METHOD
 
Æloˇã
–
size_t
 
size
 ) const;

162 
__TBB_EXPORTED_METHOD
 
‰ì
–
èsk
& ) const;

165 ˛as†
	cÆloˇã_chûd_¥oxy
: 
no_assign
 {

166 
public
:

167 
èsk
& 
__TBB_EXPORTED_METHOD
 
Æloˇã
–
size_t
 
size
 ) const;

168 
__TBB_EXPORTED_METHOD
 
‰ì
–
èsk
& ) const;

171 #i‡
__TBB_PREVIEW_CRITICAL_TASKS


173 
make_¸ôiˇl
–
èsk
& 
t
 );

174 
boﬁ
 
is_¸ôiˇl
–
èsk
& 
t
 );

192 ˛as†
	cèsk_¥efix
 {

193 
	g¥iv©e
:

194 
‰õnd
 
˛ass
 
tbb
::
èsk
;

195 
‰õnd
 
˛ass
 
	gtbb
::
öãrÁ˚5
::
öã∫Æ
::
èsk_ba£
;

196 
‰õnd
 
˛ass
 
	gtbb
::
èsk_li°
;

197 
‰õnd
 
˛ass
 
	göã∫Æ
::
scheduÀr
;

198 
‰õnd
 
˛ass
 
	göã∫Æ
::
Æloˇã_roŸ_¥oxy
;

199 
‰õnd
 
˛ass
 
	göã∫Æ
::
Æloˇã_chûd_¥oxy
;

200 
‰õnd
 
˛ass
 
	göã∫Æ
::
Æloˇã_c⁄töu©i⁄_¥oxy
;

201 
‰õnd
 
˛ass
 
	göã∫Æ
::
Æloˇã_addôi⁄Æ_chûd_of_¥oxy
;

202 #i‡
__TBB_PREVIEW_CRITICAL_TASKS


203 
‰õnd
 
make_¸ôiˇl
–
èsk
& );

204 
‰õnd
 
boﬁ
 
is_¸ôiˇl
–
èsk
& );

207 #i‡
__TBB_TASK_ISOLATION


209 
isﬁ©i⁄_èg
 
	gisﬁ©i⁄
;

211 
öçå_t
 
	gª£rved_•a˚_f‹_èsk_isﬁ©i⁄_èg
;

214 #i‡
__TBB_TASK_GROUP_CONTEXT


219 
èsk_group_c⁄ãxt
 *
	gc⁄ãxt
;

228 
scheduÀr
* 
	g‹igö
;

230 #i‡
__TBB_TASK_PRIORITY
 || 
__TBB_PREVIEW_RESUMABLE_TASKS


236 
scheduÀr
* 
	gow√r
;

238 #i‡
__TBB_TASK_PRIORITY


241 
èsk
* 
	g√xt_ofÊﬂded
;

244 #i‡
__TBB_PREVIEW_RESUMABLE_TASKS


246 
scheduÀr
* 
	gab™d⁄ed_scheduÀr
;

248 #i‡
__TBB_TASK_PRIORITY
 || 
__TBB_PREVIEW_RESUMABLE_TASKS


256 
	gtbb
::
èsk
* 
∑ª¡
;

263 
__TBB_©omic
 
ª„ªn˚_cou¡
 
	gªf_cou¡
;

268 
	gdïth
;

272 
	g°©e
;

281 
	gexåa_°©e
;

283 
afföôy_id
 
	gafföôy
;

286 
	gtbb
::
èsk
* 
√xt
;

289 
	gtbb
::
èsk
&Åask(Ë{ *
ªöãΩªt_ˇ°
<
tbb
::èsk*>(
this
+1);}

295 #i‡
__TBB_TASK_GROUP_CONTEXT


297 #i‡
__TBB_TASK_PRIORITY


298 
«me•a˚
 
	göã∫Æ
 {

299 c⁄° 
	g¥i‹ôy_°ride_v4
 = 
INT_MAX
 / 4;

300 #i‡
__TBB_PREVIEW_CRITICAL_TASKS


302 c⁄° 
	g¥i‹ôy_¸ôiˇl
 = 
¥i‹ôy_°ride_v4
 * 3 +Öriority_stride_v4 / 3 * 2;

306 
	e¥i‹ôy_t
 {

307 
	g¥i‹ôy_n‹mÆ
 = 
öã∫Æ
::
¥i‹ôy_°ride_v4
 * 2,

308 
	g¥i‹ôy_low
 = 
¥i‹ôy_n‹mÆ
 - 
öã∫Æ
::
¥i‹ôy_°ride_v4
,

309 
	g¥i‹ôy_high
 = 
¥i‹ôy_n‹mÆ
 + 
öã∫Æ
::
¥i‹ôy_°ride_v4


314 #i‡
TBB_USE_CAPTURED_EXCEPTION


315 
˛ass
 
	gtbb_ex˚±i⁄
;

317 
«me•a˚
 
	göã∫Æ
 {

318 
˛ass
 
	gtbb_ex˚±i⁄_±r
;

322 
˛ass
 
	gèsk_scheduÀr_öô
;

323 
«me•a˚
 
	göãrÁ˚7
 { 
˛ass
 
	gèsk_¨ía
; }

324 
usög
 
	göãrÁ˚7
::
èsk_¨ía
;

347 ˛as†
	cèsk_group_c⁄ãxt
 : 
öã∫Æ
::
no_c›y
 {

348 
¥iv©e
:

349 
‰õnd
 
˛ass
 
öã∫Æ
::
gíîic_scheduÀr
;

350 
‰õnd
 
˛ass
 
	gèsk_scheduÀr_öô
;

351 
‰õnd
 
˛ass
 
	gèsk_¨ía
;

353 #i‡
TBB_USE_CAPTURED_EXCEPTION


354 
tbb_ex˚±i⁄
 
	tex˚±i⁄_c⁄èöî_ty≥
;

356 
	göã∫Æ
::
	ttbb_ex˚±i⁄_±r
 
	tex˚±i⁄_c⁄èöî_ty≥
;

359 
	evîsi⁄_åaôs_w‹d_œyout
 {

360 
	gåaôs_off£t
 = 16,

361 
	gvîsi⁄_mask
 = 0xFFFF,

362 
	gåaôs_mask
 = 0xFFFFu»<< 
åaôs_off£t


365 
	gpublic
:

366 
	eköd_ty≥
 {

367 
isﬁ©ed
,

368 
	gbound


371 
	eåaôs_ty≥
 {

372 
	gexa˘_ex˚±i⁄
 = 0x0001u»<< 
åaôs_off£t
,

373 #i‡
__TBB_FP_CONTEXT


374 
	gÂ_£âögs
 = 0x0002u»<< 
åaôs_off£t
,

376 
	gc⁄cuºít_waô
 = 0x0004u»<< 
åaôs_off£t
,

377 #i‡
TBB_USE_CAPTURED_EXCEPTION


378 
	gdeÁu…_åaôs
 = 0

380 
deÁu…_åaôs
 = 
exa˘_ex˚±i⁄


384 
	g¥iv©e
:

385 
	e°©e
 {

386 
may_have_chûdªn
 = 1,

388 
	g√xt_°©e_vÆue
, 
	glow_unu£d_°©e_bô
 = (
√xt_°©e_vÆue
-1)*2

394 
__TBB_©omic
 
köd_ty≥
 
	gmy_köd
;

395 
uöçå_t
 
	g_my_köd_Æig√r
;

399 
èsk_group_c⁄ãxt
 *
	gmy_∑ª¡
;

404 
	göã∫Æ
::
c⁄ãxt_li°_node_t
 
my_node
;

407 
__ôt_ˇŒî
 
	gôt_ˇŒî
;

413 
	g_Àadög_∑ddög
[
öã∫Æ
::
NFS_MaxLöeSize


414 - 2 * (
uöçå_t
)- (*Ë- (
öã∫Æ
::
c⁄ãxt_li°_node_t
)

415 - (
__ôt_ˇŒî
)

416 #i‡
__TBB_FP_CONTEXT


417 - (
öã∫Æ
::
˝u_˘l_ív_•a˚
)

421 #i‡
__TBB_FP_CONTEXT


425 
	göã∫Æ
::
˝u_˘l_ív_•a˚
 
my_˝u_˘l_ív
;

429 
uöçå_t
 
	gmy_ˇn˚Œ©i⁄_ªque°ed
;

435 
uöçå_t
 
	gmy_vîsi⁄_™d_åaôs
;

438 
ex˚±i⁄_c⁄èöî_ty≥
 *
	gmy_ex˚±i⁄
;

441 
	göã∫Æ
::
gíîic_scheduÀr
 *
my_ow√r
;

444 
uöçå_t
 
	gmy_°©e
;

446 #i‡
__TBB_TASK_PRIORITY


448 
öçå_t
 
	gmy_¥i‹ôy
;

452 
	göã∫Æ
::
°rög_ödex
 
my_«me
;

456 
	g_åaûög_∑ddög
[
öã∫Æ
::
NFS_MaxLöeSize
 - 2 * (
uöçå_t
) - 2 * (*)

457 #i‡
__TBB_TASK_PRIORITY


458 - (
öçå_t
)

460 - (
öã∫Æ
::
°rög_ödex
)

463 
	gpublic
:

493 
èsk_group_c⁄ãxt
 ( 
köd_ty≥
 
ªœti⁄_wôh_∑ª¡
 = 
bound
,

494 
uöçå_t
 
t
 = 
deÁu…_åaôs
 )

495 : 
my_köd
(
ªœti⁄_wôh_∑ª¡
)

496 , 
my_vîsi⁄_™d_åaôs
(3 | 
t
)

497 , 
my_«me
(
öã∫Æ
::
CUSTOM_CTX
)

499 
öô
();

503 
èsk_group_c⁄ãxt
 ( 
öã∫Æ
::
°rög_ödex
 
«me
 )

504 : 
my_köd
(
bound
)

505 , 
my_vîsi⁄_™d_åaôs
(3 | 
deÁu…_åaôs
)

506 , 
my_«me
(
«me
)

508 
öô
();

512 
	g__TBB_EXPORTED_METHOD
 ~
èsk_group_c⁄ãxt
 ();

522 
__TBB_EXPORTED_METHOD
 
ª£t
 ();

532 
boﬁ
 
__TBB_EXPORTED_METHOD
 
ˇn˚l_group_executi⁄
 ();

535 
boﬁ
 
__TBB_EXPORTED_METHOD
 
is_group_executi⁄_ˇn˚Œed
 () const;

544 
__TBB_EXPORTED_METHOD
 
ªgi°î_≥ndög_ex˚±i⁄
 ();

546 #i‡
__TBB_FP_CONTEXT


555 
__TBB_EXPORTED_METHOD
 
ˇ±uª_Â_£âögs
 ();

558 #i‡
__TBB_TASK_PRIORITY


560 
__TBB_DEPRECATED
 
£t_¥i‹ôy
 ( 
¥i‹ôy_t
 );

563 
__TBB_DEPRECATED
 
¥i‹ôy_t
 
¥i‹ôy
 () const;

567 
uöçå_t
 
åaôs
(Ëc⁄° {  
	gmy_vîsi⁄_™d_åaôs
 & 
	gåaôs_mask
; }

569 
	g¥Ÿe˘ed
:

572 
__TBB_EXPORTED_METHOD
 
öô
 ();

574 
	g¥iv©e
:

575 
‰õnd
 
˛ass
 
èsk
;

576 
‰õnd
 
˛ass
 
	göã∫Æ
::
Æloˇã_roŸ_wôh_c⁄ãxt_¥oxy
;

578 c⁄° 
köd_ty≥
 
	gbödög_ªquúed
 = 
bound
;

579 c⁄° 
köd_ty≥
 
	gbödög_com∂ëed
 = köd_ty≥(
bound
+1);

580 c⁄° 
köd_ty≥
 
	gdëached
 = köd_ty≥(
bödög_com∂ëed
+1);

581 c⁄° 
köd_ty≥
 
	gdyög
 = köd_ty≥(
dëached
+1);

584 
	gãm∂©e
 <
ty≥«me
 
	gT
>

585 
¥›ag©e_èsk_group_°©e
 ( 
T
 
èsk_group_c⁄ãxt
::*
m±r_°©e
,Åask_group_c⁄ãxt& 
§c
, T 
√w_°©e
 );

588 
böd_to
 ( 
öã∫Æ
::
gíîic_scheduÀr
 *
loˇl_sched
 );

591 
ªgi°î_wôh
 ( 
öã∫Æ
::
gíîic_scheduÀr
 *
loˇl_sched
 );

593 #i‡
__TBB_FP_CONTEXT


596 
c›y_Â_£âögs
–c⁄° 
èsk_group_c⁄ãxt
 &
§c
 );

604 ˛as†
	cèsk
: 
__TBB_TASK_BASE_ACCESS
 
öãrÁ˚5
::
öã∫Æ
::
èsk_ba£
 {

607 
__TBB_EXPORTED_METHOD
 
öã∫Æ_£t_ªf_cou¡
–
cou¡
 );

610 
	göã∫Æ
::
ª„ªn˚_cou¡
 
__TBB_EXPORTED_METHOD
 
öã∫Æ_de¸emít_ªf_cou¡
();

612 
	g¥Ÿe˘ed
:

614 
èsk
(Ë{
¥efix
().
exåa_°©e
=1;}

616 
	gpublic
:

618 
vútuÆ
 ~
èsk
() {}

621 
vútuÆ
 
èsk
* 
execuã
() = 0;

624 
	e°©e_ty≥
 {

626 
	gexecutög
,

628 
	gªexecuã
,

630 
	gªady
,

632 
	gÆloˇãd
,

634 
	g‰ìd
,

636 
	gªcy˛e


637 #i‡
__TBB_RECYCLE_TO_ENQUEUE


639 ,
	gto_íqueue


641 #i‡
__TBB_PREVIEW_RESUMABLE_TASKS


643 ,
	gto_ªsume


652 
	göã∫Æ
::
Æloˇã_roŸ_¥oxy
 
Æloˇã_roŸ
() {

653  
öã∫Æ
::
Æloˇã_roŸ_¥oxy
();

656 #i‡
__TBB_TASK_GROUP_CONTEXT


658 
	göã∫Æ
::
Æloˇã_roŸ_wôh_c⁄ãxt_¥oxy
 
Æloˇã_roŸ
–
èsk_group_c⁄ãxt
& 
˘x
 ) {

659  
öã∫Æ
::
Æloˇã_roŸ_wôh_c⁄ãxt_¥oxy
(
˘x
);

665 
	göã∫Æ
::
Æloˇã_c⁄töu©i⁄_¥oxy
& 
Æloˇã_c⁄töu©i⁄
() {

666  *
ªöãΩªt_ˇ°
<
öã∫Æ
::
Æloˇã_c⁄töu©i⁄_¥oxy
*>(
this
);

670 
	göã∫Æ
::
Æloˇã_chûd_¥oxy
& 
Æloˇã_chûd
() {

671  *
ªöãΩªt_ˇ°
<
öã∫Æ
::
Æloˇã_chûd_¥oxy
*>(
this
);

675 
usög
 
	gèsk_ba£
::
Æloˇã_addôi⁄Æ_chûd_of
;

677 #i‡
__TBB_DEPRECATED_TASK_INTERFACE


683 
__TBB_EXPORTED_METHOD
 
de°roy
–
èsk
& 
t
 );

686 
usög
 
	gèsk_ba£
::
de°roy
;

700 
ªcy˛e_as_c⁄töu©i⁄
() {

701 
__TBB_ASSERT
–
¥efix
().
°©e
==
executög
, "executeÇotÑunning?" );

702 
¥efix
().
	g°©e
 = 
Æloˇãd
;

708 
ªcy˛e_as_ß„_c⁄töu©i⁄
() {

709 
__TBB_ASSERT
–
¥efix
().
°©e
==
executög
, "executeÇotÑunning?" );

710 
¥efix
().
	g°©e
 = 
ªcy˛e
;

714 
ªcy˛e_as_chûd_of
–
èsk
& 
√w_∑ª¡
 ) {

715 
	göã∫Æ
::
èsk_¥efix
& 
p
 = 
¥efix
();

716 
__TBB_ASSERT
–
¥efix
().
°©e
==
executög
||¥efix().°©e==
Æloˇãd
, "executeÇotÑunning, orálreadyÑecycled" );

717 
__TBB_ASSERT
–
¥efix
().
ªf_cou¡
==0, "no childÅasksállowed whenÑecycledásá child" );

718 
__TBB_ASSERT
–
p
.
∑ª¡
==
NULL
, "parent must beÇull" );

719 
__TBB_ASSERT
–
√w_∑ª¡
.
¥efix
().
°©e
<=
ªcy˛e
, "corruptÖarent's state" );

720 
__TBB_ASSERT
–
√w_∑ª¡
.
¥efix
().
°©e
!=
‰ìd
, "parentálready freed" );

721 
	gp
.
	g°©e
 = 
Æloˇãd
;

722 
	gp
.
	g∑ª¡
 = &
√w_∑ª¡
;

723 #i‡
__TBB_TASK_GROUP_CONTEXT


724 
	gp
.
	gc⁄ãxt
 = 
√w_∑ª¡
.
¥efix
().
c⁄ãxt
;

730 
ªcy˛e_to_ªexecuã
() {

731 
__TBB_ASSERT
–
¥efix
().
°©e
==
executög
, "executeÇotÑunning, orálreadyÑecycled" );

732 
__TBB_ASSERT
–
¥efix
().
ªf_cou¡
==0, "no childÅasksállowed whenÑecycled forÑeexecution" );

733 
¥efix
().
	g°©e
 = 
ªexecuã
;

736 #i‡
__TBB_RECYCLE_TO_ENQUEUE


739 
ªcy˛e_to_íqueue
() {

740 
__TBB_ASSERT
–
¥efix
().
°©e
==
executög
, "executeÇotÑunning, orálreadyÑecycled" );

741 
¥efix
().
	g°©e
 = 
to_íqueue
;

750 
£t_ªf_cou¡
–
cou¡
 ) {

751 #i‡
TBB_USE_THREADING_TOOLS
||
TBB_USE_ASSERT


752 
öã∫Æ_£t_ªf_cou¡
(
cou¡
);

754 
¥efix
().
	gªf_cou¡
 = 
cou¡
;

760 
ö¸emít_ªf_cou¡
() {

761 
__TBB_FëchAndIn¸emítWacquúe
–&
¥efix
().
ªf_cou¡
 );

766 
add_ªf_cou¡
–
cou¡
 ) {

767 
	göã∫Æ
::
ˇŒ_ôt_nŸify
–
öã∫Æ
::
ªÀasög
, &
¥efix
().
ªf_cou¡
 );

768 
	göã∫Æ
::
ª„ªn˚_cou¡
 
k
 = 
cou¡
+
__TBB_FëchAndAddW
–&
¥efix
().
ªf_cou¡
, count );

769 
__TBB_ASSERT
–
k
>=0, "task'sÑeference count underflowed" );

770 if–
	gk
==0 )

771 
öã∫Æ
::
ˇŒ_ôt_nŸify
–öã∫Æ::
acquúed
, &
¥efix
().
ªf_cou¡
 );

772  (
	gk
);

777 
de¸emít_ªf_cou¡
() {

778 #i‡
TBB_USE_THREADING_TOOLS
||
TBB_USE_ASSERT


779  (
öã∫Æ_de¸emít_ªf_cou¡
());

781  (
__TBB_FëchAndDe¸emítWªÀa£
–&
¥efix
().
ªf_cou¡
 ))-1;

786 
usög
 
	gèsk_ba£
::
•awn
;

789 
•awn_™d_waô_f‹_Æl
–
èsk
& 
chûd
 ) {

790 
¥efix
().
	gow√r
->
waô_f‹_Æl
–*
this
, &
chûd
 );

794 
__TBB_EXPORTED_METHOD
 
•awn_™d_waô_f‹_Æl
–
èsk_li°
& 
li°
 );

797 
•awn_roŸ_™d_waô
–
èsk
& 
roŸ
 ) {

798 
	groŸ
.
¥efix
().
	gow√r
->
•awn_roŸ_™d_waô
–
roŸ
,ÑoŸ.¥efix().
√xt
 );

804 
•awn_roŸ_™d_waô
–
èsk_li°
& 
roŸ_li°
 );

808 
waô_f‹_Æl
() {

809 
¥efix
().
	gow√r
->
waô_f‹_Æl
–*
this
, 
NULL
 );

813 #i‡
__TBB_TASK_PRIORITY


825 
íqueue
–
èsk
& 
t
 ) {

826 
	gt
.
¥efix
().
	gow√r
->
íqueue
–
t
, 
NULL
 );

829 #i‡
__TBB_TASK_PRIORITY


831 
__TBB_DEPRECATED
 
íqueue
–
èsk
& 
t
, 
¥i‹ôy_t
 
p
 ) {

832 #i‡
__TBB_PREVIEW_CRITICAL_TASKS


833 
__TBB_ASSERT
(
p
 =
¥i‹ôy_low
 ||Ö =
¥i‹ôy_n‹mÆ
 ||Ö =
¥i‹ôy_high


834 || 
p
 =
öã∫Æ
::
¥i‹ôy_¸ôiˇl
, "InvalidÖriorityÜevel value");

836 
__TBB_ASSERT
(
p
 =
¥i‹ôy_low
 ||Ö =
¥i‹ôy_n‹mÆ
 ||Ö =
¥i‹ôy_high
, "InvalidÖriorityÜevel value");

838 
	gt
.
¥efix
().
	gow√r
->
íqueue
–
t
, (*)
p
 );

844 #i‡
__TBB_TASK_PRIORITY


845 
__TBB_DEPRECATED
 
ölöe
 
íqueue
–
èsk
& 
t
, 
èsk_¨ía
& 
¨ía
, 
¥i‹ôy_t
 
p
 =Öriority_t(0) );

847 
ölöe
 
íqueue
–
èsk
& 
t
, 
èsk_¨ía
& 
¨ía
);

851 
	gèsk
& 
__TBB_EXPORTED_FUNC
 
£lf
();

854 
èsk
* 
∑ª¡
(Ëc⁄° { 
¥efix
().
	g∑ª¡
;}

857 
£t_∑ª¡
(
èsk
* 
p
) {

858 #i‡
__TBB_TASK_GROUP_CONTEXT


859 
__TBB_ASSERT
(!
p
 || 
¥efix
().
c⁄ãxt
 ==Ö->prefix().context, "TheÅasks must be inÅhe same context");

861 
¥efix
().
	g∑ª¡
 = 
p
;

864 #i‡
__TBB_TASK_GROUP_CONTEXT


867 
èsk_group_c⁄ãxt
* 
c⁄ãxt
(Ë{ 
¥efix
().
	gc⁄ãxt
;}

870 
èsk_group_c⁄ãxt
* 
group
 (Ë{  
¥efix
().
	gc⁄ãxt
; }

874 
boﬁ
 
is_°ﬁí_èsk
() const {

875  (
¥efix
().
	gexåa_°©e
 & 0x80)!=0;

879 
boﬁ
 
is_íqueued_èsk
() const {

881  (
¥efix
().
	gexåa_°©e
 & 0x10)!=0;

884 #i‡
__TBB_PREVIEW_RESUMABLE_TASKS


886 * 
	tsu•íd_poöt
;

889 
	gãm∂©e
 <
ty≥«me
 
	gF
>

890 
su•íd
(
F
 
f
);

893 
ªsume
(
su•íd_poöt
 
èg
);

901 
°©e_ty≥
 
°©e
(Ëc⁄° { sèã_ty≥(
¥efix
().state);}

904 
ªf_cou¡
() const {

905 #i‡
TBB_USE_ASSERT


906 #i‡
__TBB_PREVIEW_RESUMABLE_TASKS


907 
	göã∫Æ
::
ª„ªn˚_cou¡
 
ªf_cou¡_
 = 
¥efix
().
ªf_cou¡
 & ~
öã∫Æ
::
ab™d⁄_Êag
;

909 
	göã∫Æ
::
ª„ªn˚_cou¡
 
ªf_cou¡_
 = 
¥efix
().
ªf_cou¡
;

911 
__TBB_ASSERT
–
ªf_cou¡_
==(ref_count_), "integer overflowÉrror");

913 #i‡
__TBB_PREVIEW_RESUMABLE_TASKS


914  (
¥efix
().
	gªf_cou¡
 & ~
	göã∫Æ
::
ab™d⁄_Êag
);

916  (
¥efix
().
	gªf_cou¡
);

921 
boﬁ
 
__TBB_EXPORTED_METHOD
 
is_ow√d_by_cuºít_thªad
() const;

929 
	göã∫Æ
::
	tafföôy_id
áffinity_id;

932 
£t_afföôy
–
afföôy_id
 
id
 ) {
¥efix
().
	gafföôy
 = id;}

935 
afföôy_id
 
afföôy
(Ëc⁄° { 
¥efix
().
	gafföôy
;}

942 
vútuÆ
 
__TBB_EXPORTED_METHOD
 
nŸe_afföôy
–
afföôy_id
 
id
 );

944 #i‡
__TBB_TASK_GROUP_CONTEXT


956 
__TBB_EXPORTED_METHOD
 
ch™ge_group
 ( 
èsk_group_c⁄ãxt
& 
˘x
 );

960 
boﬁ
 
ˇn˚l_group_executi⁄
 (Ë{  
¥efix
().
	gc⁄ãxt
->cancel_group_execution(); }

963 
boﬁ
 
is_ˇn˚Œed
 (Ëc⁄° {  
¥efix
().
	gc⁄ãxt
->
is_group_executi⁄_ˇn˚Œed
(); }

965 
boﬁ
 
is_ˇn˚Œed
 (Ëc⁄° {  
	gÁl£
; }

968 #i‡
__TBB_TASK_PRIORITY


970 
__TBB_DEPRECATED
 
£t_group_¥i‹ôy
 ( 
¥i‹ôy_t
 
p
 ) { 
¥efix
().
	gc⁄ãxt
->
£t_¥i‹ôy
(p); }

973 
__TBB_DEPRECATED
 
¥i‹ôy_t
 
group_¥i‹ôy
 (Ëc⁄° {  
¥efix
().
	gc⁄ãxt
->
¥i‹ôy
(); }

977 
	g¥iv©e
:

978 
‰õnd
 
˛ass
 
öãrÁ˚5
::
öã∫Æ
::
èsk_ba£
;

979 
‰õnd
 
˛ass
 
	gèsk_li°
;

980 
‰õnd
 
˛ass
 
	göã∫Æ
::
scheduÀr
;

981 
‰õnd
 
˛ass
 
	göã∫Æ
::
Æloˇã_roŸ_¥oxy
;

982 #i‡
__TBB_TASK_GROUP_CONTEXT


983 
‰õnd
 
˛ass
 
	göã∫Æ
::
Æloˇã_roŸ_wôh_c⁄ãxt_¥oxy
;

985 
‰õnd
 
˛ass
 
	göã∫Æ
::
Æloˇã_c⁄töu©i⁄_¥oxy
;

986 
‰õnd
 
˛ass
 
	göã∫Æ
::
Æloˇã_chûd_¥oxy
;

987 
‰õnd
 
˛ass
 
	göã∫Æ
::
Æloˇã_addôi⁄Æ_chûd_of_¥oxy
;

991 
	göã∫Æ
::
èsk_¥efix
& 
¥efix
–
öã∫Æ
::
vîsi⁄_èg
* = 
NULL
 ) const {

992  
ªöãΩªt_ˇ°
<
öã∫Æ
::
èsk_¥efix
*>(
c⁄°_ˇ°
<
èsk
*>(
this
))[-1];

994 #i‡
__TBB_PREVIEW_CRITICAL_TASKS


995 
‰õnd
 
	göã∫Æ
::
make_¸ôiˇl
–
èsk
& );

996 
‰õnd
 
boﬁ
 
	göã∫Æ
::
is_¸ôiˇl
–
èsk
& );

1000 #i‡
__TBB_PREVIEW_CRITICAL_TASKS


1001 
«me•a˚
 
	göã∫Æ
 {

1002 
ölöe
 
make_¸ôiˇl
–
èsk
& 
t
 ) { 
	gt
.
¥efix
().
	gexåa_°©e
 |= 0x8; }

1003 
ölöe
 
boﬁ
 
is_¸ôiˇl
–
èsk
& 
t
 ) {  boﬁ(—.
¥efix
().
exåa_°©e
 & 0x8) != 0); }

1007 #i‡
__TBB_PREVIEW_RESUMABLE_TASKS


1008 
«me•a˚
 
	göã∫Æ
 {

1009 
	gãm∂©e
 <
ty≥«me
 
	gF
>

1010 
su•íd_ˇŒback
(* 
u£r_ˇŒback
, 
èsk
::
su•íd_poöt
 
èg
) {

1012 
F
 
u£r_ˇŒback_c›y
 = *
°©ic_ˇ°
<F*>(
u£r_ˇŒback
);

1013 
u£r_ˇŒback_c›y
(
èg
);

1015 
__TBB_EXPORTED_FUNC
 
öã∫Æ_su•íd
(* 
su•íd_ˇŒback
, * 
u£r_ˇŒback
);

1016 
__TBB_EXPORTED_FUNC
 
öã∫Æ_ªsume
(
èsk
::
su•íd_poöt
);

1017 
	gèsk
::
su•íd_poöt
 
__TBB_EXPORTED_FUNC
 
öã∫Æ_cuºít_su•íd_poöt
();

1020 
	gãm∂©e
 <
ty≥«me
 
	gF
>

1021 
ölöe
 
	gèsk
::
su•íd
(
F
 
f
) {

1022 
öã∫Æ
::
öã∫Æ_su•íd
((*)öã∫Æ::
su•íd_ˇŒback
<
F
>, &
f
);

1024 
ölöe
 
	gèsk
::
ªsume
(
su•íd_poöt
 
èg
) {

1025 
öã∫Æ
::
öã∫Æ_ªsume
(
èg
);

1031 ˛as†
	cem±y_èsk
: 
public
 
èsk
 {

1032 
èsk
* 
execuã
(Ë
__TBB_ovîride
 {

1033  
NULL
;

1038 
«me•a˚
 
	göã∫Æ
 {

1039 
	gãm∂©e
<
ty≥«me
 
	gF
>

1040 ˛as†
	cfun˘i⁄_èsk
 : 
public
 
èsk
 {

1041 #i‡
__TBB_ALLOW_MUTABLE_FUNCTORS


1043 
F
 
my_func
;

1045 c⁄° 
F
 
	gmy_func
;

1047 
èsk
* 
execuã
(Ë
	g__TBB_ovîride
 {

1048 
my_func
();

1049  
	gNULL
;

1051 
	gpublic
:

1052 
fun˘i⁄_èsk
–c⁄° 
F
& 
f
 ) : 
my_func
(f) {}

1053 #i‡
__TBB_CPP11_RVALUE_REF_PRESENT


1054 
fun˘i⁄_èsk
–
F
&& 
f
 ) : 
my_func
–
°d
::
move
(f) ) {}

1063 ˛as†
	cèsk_li°
: 
öã∫Æ
::
no_c›y
 {

1064 
¥iv©e
:

1065 
èsk
* 
fú°
;

1066 
èsk
** 
	g√xt_±r
;

1067 
‰õnd
 
˛ass
 
	gèsk
;

1068 
‰õnd
 
˛ass
 
	göãrÁ˚5
::
öã∫Æ
::
èsk_ba£
;

1069 
	gpublic
:

1071 
èsk_li°
(Ë: 
fú°
(
NULL
), 
√xt_±r
(&first) {}

1074 ~
èsk_li°
() {}

1077 
boﬁ
 
em±y
(Ëc⁄° { !
	gfú°
;}

1080 
push_back
–
èsk
&Åask ) {

1081 
	gèsk
.
¥efix
().
	g√xt
 = 
NULL
;

1082 *
	g√xt_±r
 = &
èsk
;

1083 
	g√xt_±r
 = &
èsk
.
¥efix
().
√xt
;

1085 #i‡
__TBB_TODO


1088 
push_‰⁄t
–
èsk
&Åask ) {

1089 if–
em±y
() ) {

1090 
push_back
(
èsk
);

1092 
	gèsk
.
¥efix
().
	g√xt
 = 
fú°
;

1093 
	gfú°
 = &
èsk
;

1098 
	gèsk
& 
p›_‰⁄t
() {

1099 
__TBB_ASSERT
–!
em±y
(), "attemptÅoÖop item fromÉmptyÅask_list" );

1100 
èsk
* 
	gªsu…
 = 
fú°
;

1101 
	gfú°
 = 
ªsu…
->
¥efix
().
√xt
;

1102 if–!
	gfú°
 ) 
	g√xt_±r
 = &
fú°
;

1103  *
	gªsu…
;

1107 
˛ór
() {

1108 
	gfú°
=
NULL
;

1109 
	g√xt_±r
=&
fú°
;

1113 
ölöe
 
	göãrÁ˚5
::
öã∫Æ
::
èsk_ba£
::
•awn
–
èsk
& 
t
 ) {

1114 
t
.
¥efix
().
ow√r
->
•awn
–t,Å.¥efix().
√xt
 );

1117 
ölöe
 
	göãrÁ˚5
::
öã∫Æ
::
èsk_ba£
::
•awn
–
èsk_li°
& 
li°
 ) {

1118 if–
èsk
* 
t
 = 
li°
.
fú°
 ) {

1119 
t
->
¥efix
().
ow√r
->
•awn
–*t, *
li°
.
√xt_±r
 );

1120 
	gli°
.
˛ór
();

1124 
ölöe
 
	gèsk
::
•awn_roŸ_™d_waô
–
èsk_li°
& 
roŸ_li°
 ) {

1125 if–
èsk
* 
t
 = 
roŸ_li°
.
fú°
 ) {

1126 
t
->
¥efix
().
ow√r
->
•awn_roŸ_™d_waô
–*t, *
roŸ_li°
.
√xt_±r
 );

1127 
	groŸ_li°
.
˛ór
();

1133 
ölöe
 *
›î©‹
 
	$√w
–
size_t
 
byãs
, c⁄° 
tbb
::
öã∫Æ
::
Æloˇã_roŸ_¥oxy
& ) {

1134  &
tbb
::
öã∫Æ
::
Æloˇã_roŸ_¥oxy
::
	`Æloˇã
(
byãs
);

1135 
	}
}

1137 
ölöe
 
›î©‹
 
	$dñëe
–* 
èsk
, c⁄° 
tbb
::
öã∫Æ
::
Æloˇã_roŸ_¥oxy
& ) {

1138 
tbb
::
öã∫Æ
::
Æloˇã_roŸ_¥oxy
::
	`‰ì
–*
°©ic_ˇ°
<tbb::
èsk
*>(task) );

1139 
	}
}

1141 #i‡
__TBB_TASK_GROUP_CONTEXT


1142 
ölöe
 *
›î©‹
 
	$√w
–
size_t
 
byãs
, c⁄° 
tbb
::
öã∫Æ
::
Æloˇã_roŸ_wôh_c⁄ãxt_¥oxy
& 
p
 ) {

1143  &
p
.
	`Æloˇã
(
byãs
);

1144 
	}
}

1146 
ölöe
 
›î©‹
 
	$dñëe
–* 
èsk
, c⁄° 
tbb
::
öã∫Æ
::
Æloˇã_roŸ_wôh_c⁄ãxt_¥oxy
& 
p
 ) {

1147 
p
.
	`‰ì
–*
°©ic_ˇ°
<
tbb
::
èsk
*>(task) );

1148 
	}
}

1151 
ölöe
 *
›î©‹
 
	$√w
–
size_t
 
byãs
, c⁄° 
tbb
::
öã∫Æ
::
Æloˇã_c⁄töu©i⁄_¥oxy
& 
p
 ) {

1152  &
p
.
	`Æloˇã
(
byãs
);

1153 
	}
}

1155 
ölöe
 
›î©‹
 
	$dñëe
–* 
èsk
, c⁄° 
tbb
::
öã∫Æ
::
Æloˇã_c⁄töu©i⁄_¥oxy
& 
p
 ) {

1156 
p
.
	`‰ì
–*
°©ic_ˇ°
<
tbb
::
èsk
*>(task) );

1157 
	}
}

1159 
ölöe
 *
›î©‹
 
	$√w
–
size_t
 
byãs
, c⁄° 
tbb
::
öã∫Æ
::
Æloˇã_chûd_¥oxy
& 
p
 ) {

1160  &
p
.
	`Æloˇã
(
byãs
);

1161 
	}
}

1163 
ölöe
 
›î©‹
 
	$dñëe
–* 
èsk
, c⁄° 
tbb
::
öã∫Æ
::
Æloˇã_chûd_¥oxy
& 
p
 ) {

1164 
p
.
	`‰ì
–*
°©ic_ˇ°
<
tbb
::
èsk
*>(task) );

1165 
	}
}

1167 
ölöe
 *
›î©‹
 
	$√w
–
size_t
 
byãs
, c⁄° 
tbb
::
öã∫Æ
::
Æloˇã_addôi⁄Æ_chûd_of_¥oxy
& 
p
 ) {

1168  &
p
.
	`Æloˇã
(
byãs
);

1169 
	}
}

1171 
ölöe
 
›î©‹
 
	$dñëe
–* 
èsk
, c⁄° 
tbb
::
öã∫Æ
::
Æloˇã_addôi⁄Æ_chûd_of_¥oxy
& 
p
 ) {

1172 
p
.
	`‰ì
–*
°©ic_ˇ°
<
tbb
::
èsk
*>(task) );

1173 
	}
}

1175 
	~"öã∫Æ/_w¨nög_suµªss_dißbÀ_nŸi˚.h
"

1176 #unde‡
__TBB_èsk_H_ö˛ude_¨ó


	@/usr/include/tbb/task_scheduler_init.h

17 
	~"öã∫Æ/_dïªˇãd_hódî_mesßge_gu¨d.h
"

19 #i‡!
deföed
(
__TBB_show_dïªˇti⁄_mesßge_èsk_scheduÀr_öô_H
Ë&& deföed(
__TBB_show_dïªˇãd_hódî_mesßge
)

20 
	#__TBB_show_dïªˇti⁄_mesßge_èsk_scheduÀr_öô_H


	)

21 #¥agm®
mesßge
("TBB Warning:Åbb/task_scheduler_init.h is deprecated. For details,Ölease see Deprecated Featuresáppendix inÅhe TBBÑeference manual.")

24 #i‡
deföed
(
__TBB_show_dïªˇãd_hódî_mesßge
)

25 #unde‡
__TBB_show_dïªˇãd_hódî_mesßge


28 #i‚de‡
__TBB_èsk_scheduÀr_öô_H


29 
	#__TBB_èsk_scheduÀr_öô_H


	)

31 
	#__TBB_èsk_scheduÀr_öô_H_ö˛ude_¨ó


	)

32 
	~"öã∫Æ/_w¨nög_suµªss_íabÀ_nŸi˚.h
"

34 
	~"tbb_°ddef.h
"

35 
	~"limôs.h
"

36 #i‡
__TBB_SUPPORTS_WORKERS_WAITING_IN_TERMINATE


37 
	~<√w
>

40 
«me•a˚
 
	gtbb
 {

42 
	g°d
::
	tsize_t
 
	t°ack_size_ty≥
;

45 
«me•a˚
 
	göã∫Æ
 {

48 
˛ass
 
	gscheduÀr
;

66 ˛as†
	c__TBB_DEPRECATED_VERBOSE
 
	gèsk_scheduÀr_öô
: 
öã∫Æ
::
no_c›y
 {

67 
	eEx˚±i⁄Pr›ag©i⁄Mode
 {

68 
¥›ag©i⁄_mode_exa˘
 = 1u,

69 
	g¥›ag©i⁄_mode_ˇ±uªd
 = 2u,

70 
	g¥›ag©i⁄_mode_mask
 = 
¥›ag©i⁄_mode_exa˘
 | 
¥›ag©i⁄_mode_ˇ±uªd


74 
	göã∫Æ
::
scheduÀr
* 
my_scheduÀr
;

76 
boﬁ
 
öã∫Æ_ãrmö©e
–boﬁ 
blockög
 );

77 #i‡
__TBB_SUPPORTS_WORKERS_WAITING_IN_TERMINATE


78 
boﬁ
 
__TBB_EXPORTED_METHOD
 
öã∫Æ_blockög_ãrmö©e
–boﬁ 
throwög
 );

80 
	gpublic
:

83 c⁄° 
autom©ic
 = -1;

86 c⁄° 
	gde„ºed
 = -2;

100 
__TBB_EXPORTED_METHOD
 
öôülize
–
numbî_of_thªads
=
autom©ic
 );

104 
__TBB_EXPORTED_METHOD
 
öôülize
–
numbî_of_thªads
, 
°ack_size_ty≥
 
thªad_°ack_size
 );

107 
__TBB_EXPORTED_METHOD
 
ãrmö©e
();

109 #i‡
__TBB_SUPPORTS_WORKERS_WAITING_IN_TERMINATE


110 #i‡
TBB_USE_EXCEPTIONS


112 
blockög_ãrmö©e
() {

113 
öã∫Æ_blockög_ãrmö©e
– 
åue
 );

117 
boﬁ
 
blockög_ãrmö©e
(c⁄° 
°d
::
nŸhrow_t
&Ë
__TBB_NOEXCEPT
(
åue
) {

118  
öã∫Æ_blockög_ãrmö©e
– 
Ál£
 );

123 
èsk_scheduÀr_öô
–
numbî_of_thªads
=
autom©ic
, 
°ack_size_ty≥
 
thªad_°ack_size
=0 ) : 
my_scheduÀr
(
NULL
)

132 
__TBB_ASSERT
–!(
thªad_°ack_size
 & 
¥›ag©i⁄_mode_mask
), "Requested stack size isÇotáligned" );

133 #i‡
TBB_USE_EXCEPTIONS


134 
	gthªad_°ack_size
 |
TBB_USE_CAPTURED_EXCEPTION
 ? 
¥›ag©i⁄_mode_ˇ±uªd
 : 
¥›ag©i⁄_mode_exa˘
;

136 
öôülize
–
numbî_of_thªads
, 
thªad_°ack_size
 );

140 ~
èsk_scheduÀr_öô
() {

141 if–
	gmy_scheduÀr
 )

142 
ãrmö©e
();

143 
	göã∫Æ
::
pois⁄_poöãr
–
my_scheduÀr
 );

163 
__TBB_EXPORTED_FUNC
 
deÁu…_num_thªads
 ();

166 
boﬁ
 
is_a˘ive
(Ëc⁄° {  
	gmy_scheduÀr
 !
NULL
; }

171 
	~"öã∫Æ/_w¨nög_suµªss_dißbÀ_nŸi˚.h
"

172 #unde‡
__TBB_èsk_scheduÀr_öô_H_ö˛ude_¨ó


	@/usr/include/tbb/task_scheduler_observer.h

17 #i‚de‡
__TBB_èsk_scheduÀr_ob£rvî_H


18 
	#__TBB_èsk_scheduÀr_ob£rvî_H


	)

20 
	#__TBB_èsk_scheduÀr_ob£rvî_H_ö˛ude_¨ó


	)

21 
	~"öã∫Æ/_w¨nög_suµªss_íabÀ_nŸi˚.h
"

23 
	~"©omic.h
"

24 #i‡
__TBB_ARENA_OBSERVER


25 
	~"èsk_¨ía.h
"

28 #i‡
__TBB_SCHEDULER_OBSERVER


30 
«me•a˚
 
	gtbb
 {

31 
«me•a˚
 
	göãrÁ˚6
 {

32 
˛ass
 
	gèsk_scheduÀr_ob£rvî
;

34 
«me•a˚
 
	göã∫Æ
 {

36 
˛ass
 
	gob£rvî_¥oxy
;

37 
˛ass
 
	gob£rvî_li°
;

39 ˛as†
	cèsk_scheduÀr_ob£rvî_v3
 {

40 
‰õnd
 
˛ass
 
	gob£rvî_¥oxy
;

41 
‰õnd
 
˛ass
 
	gob£rvî_li°
;

42 
‰õnd
 
˛ass
 
	göãrÁ˚6
::
èsk_scheduÀr_ob£rvî
;

46 
ob£rvî_¥oxy
* 
	gmy_¥oxy
;

50 
	g©omic
<
	göçå_t
> 
	gmy_busy_cou¡
;

52 
	gpublic
:

58 
__TBB_EXPORTED_METHOD
 
ob£rve
–
boﬁ
 
°©e
=
åue
 );

61 
boﬁ
 
is_ob£rvög
(Ëc⁄° { 
	gmy_¥oxy
!=
NULL
;}

64 
èsk_scheduÀr_ob£rvî_v3
(Ë: 
my_¥oxy
(
NULL
Ë{ 
my_busy_cou¡
.
°‹e
<
ªœxed
>(0); }

74 
vútuÆ
 
⁄_scheduÀr_íåy
–
boﬁ
 ) {}

82 
vútuÆ
 
⁄_scheduÀr_exô
–
boﬁ
 ) {}

85 
	gvútuÆ
 ~
èsk_scheduÀr_ob£rvî_v3
(Ë{ if(
	gmy_¥oxy
Ë
ob£rve
(
Ál£
);}

90 #i‡
__TBB_ARENA_OBSERVER


91 
«me•a˚
 
	göãrÁ˚6
 {

92 ˛as†
	cèsk_scheduÀr_ob£rvî
 : 
public
 
öã∫Æ
::
èsk_scheduÀr_ob£rvî_v3
 {

93 
‰õnd
 
˛ass
 
öã∫Æ
::
èsk_scheduÀr_ob£rvî_v3
;

94 
‰õnd
 
˛ass
 
	göã∫Æ
::
ob£rvî_¥oxy
;

95 
‰õnd
 
˛ass
 
	göã∫Æ
::
ob£rvî_li°
;

100 c⁄° 
öçå_t
 
	gv6_åaô
 = (öçå_t)((~(
uöçå_t
)0 >> 1) + 1);

103 
öçå_t
 
	gmy_c⁄ãxt_èg
;

104 íum { 
	gglobÆ_èg
 = 0, 
	gim∂icô_èg
 = 1 };

106 
	gpublic
:

117 
ex∂icô
 
èsk_scheduÀr_ob£rvî
–
boﬁ
 
loˇl
 = 
Ál£
 ) {

118 #i‡ 
__TBB_ARENA_OBSERVER


119 
my_c⁄ãxt_èg
 = 
loˇl
? 
im∂icô_èg
 : 
globÆ_èg
;

121 
__TBB_ASSERT_EX
–!
loˇl
, 
NULL
 );

122 
	gmy_c⁄ãxt_èg
 = 
globÆ_èg
;

126 #i‡ 
__TBB_ARENA_OBSERVER


131 
ex∂icô
 
èsk_scheduÀr_ob£rvî
–
èsk_¨ía
 & 
a
) {

132 
	gmy_c⁄ãxt_èg
 = (
öçå_t
)&
a
;

139 
	gvútuÆ
 ~
èsk_scheduÀr_ob£rvî
(Ë{ if(
	gmy_¥oxy
Ë
ob£rve
(
Ál£
); }

144 
ob£rve
–
boﬁ
 
°©e
=
åue
 ) {

145 if–
°©e
 && !
my_¥oxy
 ) {

146 
__TBB_ASSERT
–!
my_busy_cou¡
, "Inconsistent state ofÅask_scheduler_observer instance");

147 
	gmy_busy_cou¡
.
	g°‹e
<
	gªœxed
>(
	gv6_åaô
);

149 
	göã∫Æ
::
èsk_scheduÀr_ob£rvî_v3
::
ob£rve
(
°©e
);

154 
usög
 
	göãrÁ˚6
::
èsk_scheduÀr_ob£rvî
;

156 
	gtbb
::
	töã∫Æ
::
	tèsk_scheduÀr_ob£rvî_v3
 
	tèsk_scheduÀr_ob£rvî
;

163 
	~"öã∫Æ/_w¨nög_suµªss_dißbÀ_nŸi˚.h
"

164 #unde‡
__TBB_èsk_scheduÀr_ob£rvî_H_ö˛ude_¨ó


	@/usr/include/tbb/tbb_allocator.h

17 #i‚de‡
__TBB_tbb_Æloˇt‹_H


18 
	#__TBB_tbb_Æloˇt‹_H


	)

20 
	~"tbb_°ddef.h
"

21 
	~<√w
>

22 #i‡
__TBB_ALLOCATOR_CONSTRUCT_VARIADIC


23 
	~<utûôy
>

25 
	~<c°rög
>

27 
«me•a˚
 
	gtbb
 {

30 
«me•a˚
 
	göã∫Æ
 {

34 
__TBB_EXPORTED_FUNC
 
dóŒoˇã_vü_h™dÀr_v3
–*
p
 );

38 * 
__TBB_EXPORTED_FUNC
 
Æloˇã_vü_h™dÀr_v3
–
size_t
 
n
 );

41 
boﬁ
 
__TBB_EXPORTED_FUNC
 
is_mÆloc_u£d_v3
();

45 #i‡
_MSC_VER
 && !
deföed
(
__INTEL_COMPILER
)

47 #¥agm®
w¨nög
 (
push
)

48 #¥agm®
w¨nög
 (
dißbÀ
: 4100)

57 
	gãm∂©e
<
ty≥«me
 
	gT
>

58 ˛as†
	ctbb_Æloˇt‹
 {

59 
	gpublic
:

60 
ty≥«me
 
	töã∫Æ
::
	tÆloˇt‹_ty≥
<
	tT
>::
	tvÆue_ty≥
 value_type;

61 
vÆue_ty≥
* 
	tpoöãr
;

62 c⁄° 
	tvÆue_ty≥
* 
	tc⁄°_poöãr
;

63 
	gvÆue_ty≥
& 
	tª„ªn˚
;

64 c⁄° 
	tvÆue_ty≥
& 
	tc⁄°_ª„ªn˚
;

65 
size_t
 
	tsize_ty≥
;

66 
±rdiff_t
 
	tdif„ªn˚_ty≥
;

67 
	gãm∂©e
<
ty≥«me
 
	gU
> 
	sªböd
 {

68 
	gtbb_Æloˇt‹
<
	tU
> 
	tŸhî
;

72 
	emÆloc_ty≥
 {

73 
	gsˇœbÀ
,

74 
	g°™d¨d


77 
tbb_Æloˇt‹
(Ë
throw
() {}

78 
tbb_Æloˇt‹
–c⁄°Åbb_Æloˇt‹& ) 
throw
() {}

79 
	gãm∂©e
<
ty≥«me
 
	gU
> 
tbb_Æloˇt‹
(c⁄°Åbb_Æloˇt‹<
U
>&Ë
throw
() {}

81 
poöãr
 
addªss
(
ª„ªn˚
 
x
Ëc⁄° { &
	gx
;}

82 
c⁄°_poöãr
 
addªss
(
c⁄°_ª„ªn˚
 
x
Ëc⁄° { &
	gx
;}

85 
poöãr
 
Æloˇã
–
size_ty≥
 
n
, const * = 0) {

86  
poöãr
(
öã∫Æ
::
Æloˇã_vü_h™dÀr_v3
–
n
 * (
vÆue_ty≥
) ));

90 
dóŒoˇã
–
poöãr
 
p
, 
size_ty≥
 ) {

91 
	göã∫Æ
::
dóŒoˇã_vü_h™dÀr_v3
(
p
);

95 
size_ty≥
 
max_size
(Ëc⁄° 
throw
() {

96 
size_ty≥
 
	gmax
 = 
°©ic_ˇ°
<size_ty≥>(-1Ë/  (
vÆue_ty≥
);

97  (
	gmax
 > 0 ? max : 1);

101 #i‡
__TBB_ALLOCATOR_CONSTRUCT_VARIADIC


102 
	gãm∂©e
<
ty≥«me
 
	gU
, 
	gty≥«me
... 
	gArgs
>

103 
c⁄°ru˘
(
U
 *
p
, 
Args
&&... 
¨gs
)

104 { ::
√w
((*)
p
Ë
U
(
°d
::
f‹w¨d
<
Args
>(
¨gs
)...); }

106 #i‡
__TBB_CPP11_RVALUE_REF_PRESENT


107 
c⁄°ru˘
–
poöãr
 
p
, 
vÆue_ty≥
&& 
vÆue
 ) {::
√w
((*)’)ËvÆue_ty≥(
°d
::
move
(value));}

109 
c⁄°ru˘
–
poöãr
 
p
, c⁄° 
vÆue_ty≥
& 
vÆue
 ) {::
√w
((*)(p)) value_type(value);}

113 
de°roy
–
poöãr
 
p
 ) {
	gp
->~
vÆue_ty≥
();}

116 
mÆloc_ty≥
 
Æloˇt‹_ty≥
() {

117  
	göã∫Æ
::
is_mÆloc_u£d_v3
(Ë? 
°™d¨d
 : 
sˇœbÀ
;

121 #i‡
_MSC_VER
 && !
	$deföed
(
__INTEL_COMPILER
)

122 #¥agm®
	$w¨nög
 (
p›
)

127 
ãm∂©e
<>

128 
˛ass
 
tbb_Æloˇt‹
<> {

129 
public
:

130 * 
	tpoöãr
;

131 c⁄° * 
	tc⁄°_poöãr
;

132 
	tvÆue_ty≥
;

133 
ãm∂©e
<
ty≥«me
 
U
> 
	sªböd
 {

134 
tbb_Æloˇt‹
<
	tU
> 
	tŸhî
;

136 
	}
};

138 
	gãm∂©e
<
ty≥«me
 
	gT
,Åy≥«mê
	gU
>

139 
ölöe
 
boﬁ
 
	g›î©‹
==–c⁄° 
tbb_Æloˇt‹
<
T
>&, c⁄° 
	gtbb_Æloˇt‹
<
	gU
>& ) { 
	gåue
;}

141 
	gãm∂©e
<
ty≥«me
 
	gT
,Åy≥«mê
	gU
>

142 
ölöe
 
boﬁ
 
	g›î©‹
!=–c⁄° 
tbb_Æloˇt‹
<
T
>&, c⁄° 
	gtbb_Æloˇt‹
<
	gU
>& ) { 
	gÁl£
;}

150 
	gãm∂©e
 <
ty≥«me
 
	gT
,Åem∂©e<ty≥«mê
	gX
> 
˛ass
 
	gAŒoˇt‹
 = 
tbb_Æloˇt‹
>

151 
˛ass
 
zîo_Æloˇt‹
 : 
public
 
AŒoˇt‹
<
T
>

153 
public
:

154 
AŒoˇt‹
<
	tT
> 
	tba£_Æloˇt‹_ty≥
;

155 
ty≥«me
 
	tba£_Æloˇt‹_ty≥
::
	tvÆue_ty≥
 value_type;

156 
ty≥«me
 
	tba£_Æloˇt‹_ty≥
::
	tpoöãr
Öointer;

157 
ty≥«me
 
	tba£_Æloˇt‹_ty≥
::
	tc⁄°_poöãr
 const_pointer;

158 
ty≥«me
 
	tba£_Æloˇt‹_ty≥
::
	tª„ªn˚
Ñeference;

159 
ty≥«me
 
	tba£_Æloˇt‹_ty≥
::
	tc⁄°_ª„ªn˚
 const_reference;

160 
ty≥«me
 
	tba£_Æloˇt‹_ty≥
::
	tsize_ty≥
 size_type;

161 
ty≥«me
 
	tba£_Æloˇt‹_ty≥
::
	tdif„ªn˚_ty≥
 difference_type;

162 
	gãm∂©e
<
ty≥«me
 
	gU
> 
	sªböd
 {

163 
	gzîo_Æloˇt‹
<
	tU
, 
	tAŒoˇt‹
> 
	tŸhî
;

166 
zîo_Æloˇt‹
(Ë
throw
() { }

167 
zîo_Æloˇt‹
(c⁄° zîo_Æloˇt‹ &
a
Ë
throw
(Ë: 
ba£_Æloˇt‹_ty≥
(á ) { }

168 
ãm∂©e
<
ty≥«me
 
U
>

169 
zîo_Æloˇt‹
(c⁄° zîo_Æloˇt‹<
U
> &
a
Ë
throw
(Ë: 
ba£_Æloˇt‹_ty≥
–
AŒoˇt‹
<U>(á ) ) { }

171 
poöãr
 
Æloˇã
(c⁄° 
size_ty≥
 
n
, c⁄° *
höt
 = 0 ) {

172 
poöãr
 
±r
 = 
ba£_Æloˇt‹_ty≥
::
Æloˇã
–
n
, 
höt
 );

173 
	g°d
::
mem£t
–
°©ic_ˇ°
<*>(
±r
), 0, 
n
 * (
vÆue_ty≥
) );

174  
	g±r
;

180 
	gãm∂©e
<ãm∂©e<
ty≥«me
 
	gT
> 
˛ass
 
	gAŒoˇt‹
>

181 
˛ass
 
	gzîo_Æloˇt‹
<, 
	gAŒoˇt‹
> : 
public
 
AŒoˇt‹
<> {

182 
public
:

183 
AŒoˇt‹
<> 
	tba£_Æloˇt‹_ty≥
;

184 
ty≥«me
 
	tba£_Æloˇt‹_ty≥
::
	tvÆue_ty≥
 value_type;

185 
ty≥«me
 
	tba£_Æloˇt‹_ty≥
::
	tpoöãr
Öointer;

186 
ty≥«me
 
	tba£_Æloˇt‹_ty≥
::
	tc⁄°_poöãr
 const_pointer;

187 
	gãm∂©e
<
ty≥«me
 
	gU
> 
	sªböd
 {

188 
	gzîo_Æloˇt‹
<
	tU
, 
	tAŒoˇt‹
> 
	tŸhî
;

192 
	gãm∂©e
<
ty≥«me
 
	gT1
,Åem∂©e<ty≥«mê
	gX1
> 
˛ass
 
	gB1
,Åy≥«mê
	gT2
,Åem∂©e<ty≥«mê
	gX2
> cœs†
	gB2
>

193 
ölöe
 
boﬁ
 
	g›î©‹
==–c⁄° 
zîo_Æloˇt‹
<
T1
,
	gB1
> &
	ga
, c⁄° 
	gzîo_Æloˇt‹
<
	gT2
,
	gB2
> &
	gb
) {

194  
	g°©ic_ˇ°
< 
	gB1
<
	gT1
> >(
	ga
Ë=
°©ic_ˇ°
< 
B2
<
T2
> >(
b
);

196 
	gãm∂©e
<
ty≥«me
 
	gT1
,Åem∂©e<ty≥«mê
	gX1
> 
˛ass
 
	gB1
,Åy≥«mê
	gT2
,Åem∂©e<ty≥«mê
	gX2
> cœs†
	gB2
>

197 
ölöe
 
boﬁ
 
	g›î©‹
!=–c⁄° 
zîo_Æloˇt‹
<
T1
,
	gB1
> &
	ga
, c⁄° 
	gzîo_Æloˇt‹
<
	gT2
,
	gB2
> &
	gb
) {

198  
	g°©ic_ˇ°
< 
	gB1
<
	gT1
> >(
	ga
Ë!
°©ic_ˇ°
< 
B2
<
T2
> >(
b
);

	@/usr/include/tbb/tbb_config.h

17 #i‚de‡
__TBB_tbb_c⁄fig_H


18 
	#__TBB_tbb_c⁄fig_H


	)

31 
	#__TBB_TODO
 0

	)

35 #i‡!
deföed
(
__TBB_SYMBOL
Ë&& !
__TBB_CONFIG_PREPROC_ONLY


36 
	~<c°ddef
>

41 
	#__TBB_GCC_VERSION
 (
__GNUC__
 * 10000 + 
__GNUC_MINOR__
 * 100 + 
__GNUC_PATCHLEVEL__
)

	)

45 #i‡
deföed
(
TBB_USE_GLIBCXX_VERSION
Ë&& !deföed(
_GLIBCXX_RELEASE
)

48 
	#__TBB_GLIBCXX_VERSION
 
TBB_USE_GLIBCXX_VERSION


	)

49 #ñi‡
_GLIBCXX_RELEASE
 && _GLIBCXX_RELEASE !
__GNUC__


51 
	#__TBB_GLIBCXX_VERSION
 (
_GLIBCXX_RELEASE
*10000)

	)

52 #ñi‡
__GLIBCPP__
 || 
__GLIBCXX__


54 
	#__TBB_GLIBCXX_VERSION
 
__TBB_GCC_VERSION


	)

57 #i‡
__˛™g__


59 
	#__TBB_CLANG_VERSION
 (
__˛™g_maj‹__
 * 10000 + 
__˛™g_mö‹__
 * 100 + 
__˛™g_∑tchÀvñ__
)

	)

63 #i‡
__ENVIRONMENT_IPHONE_OS_VERSION_MIN_REQUIRED__


64 
	#__TBB_IOS
 1

	)

67 #i‡
__APPLE__


68 #i‡
__INTEL_COMPILER
 && 
__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__
 > 1099 \

69 && 
	g__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__
 < 101000

71 
	#__TBB_MACOS_TARGET_VERSION
 (100000 + 10*(
__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__
 - 1000))

	)

73 
	#__TBB_MACOS_TARGET_VERSION
 
__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__


	)

79 #i‡
_WIN32
||
_WIN64


80 #i‡
deföed
(
_M_X64
)||deföed(
__x86_64__
)

81 
	#__TBB_x86_64
 1

	)

82 #ñi‡
deföed
(
_M_IA64
)

83 
	#__TBB_ùf
 1

	)

84 #ñi‡
deföed
(
_M_IX86
)||deföed(
__i386__
)

85 
	#__TBB_x86_32
 1

	)

87 
	#__TBB_gíîic_¨ch
 1

	)

90 #i‡!
__löux__
 && !
__APPLE__


91 
	#__TBB_gíîic_os
 1

	)

93 #i‡
__TBB_IOS


94 
	#__TBB_gíîic_¨ch
 1

	)

95 #ñi‡
__x86_64__


96 
	#__TBB_x86_64
 1

	)

97 #ñi‡
__ü64__


98 
	#__TBB_ùf
 1

	)

99 #ñi‡
__i386__
||
__i386


100 
	#__TBB_x86_32
 1

	)

102 
	#__TBB_gíîic_¨ch
 1

	)

106 #i‡
__MIC__
 || 
__MIC2__


107 
	#__TBB_DEFINE_MIC
 1

	)

110 
	#__TBB_TSX_AVAILABLE
 ((
__TBB_x86_32
 || 
__TBB_x86_64
Ë&& !
__TBB_DEFINE_MIC
)

	)

114 #i‡
__INTEL_COMPILER
 =9999 && 
__INTEL_COMPILER_BUILD_DATE
 == 20110811

116 #unde‡
__INTEL_COMPILER


117 
	#__INTEL_COMPILER
 1210

	)

120 #i‡
__˛™g__
 && !
__INTEL_COMPILER


121 
	#__TBB_USE_OPTIONAL_RTTI
 
	`__has_„©uª
(
cxx_πti
)

	)

122 #ñi‡
deföed
(
_CPPRTTI
)

123 
	#__TBB_USE_OPTIONAL_RTTI
 1

	)

125 
	#__TBB_USE_OPTIONAL_RTTI
 (
__GXX_RTTI
 || 
__RTTI
 || 
__INTEL_RTTI__
)

	)

128 #i‡
__TBB_GCC_VERSION
 >40400 && !
deföed
(
__INTEL_COMPILER
)

130 
	#__TBB_GCC_WARNING_SUPPRESSION_PRESENT
 1

	)

149 
	#__TBB_CPP11_PRESENT
 (
__˝lu•lus
 >201103L || 
_MSC_VER
 >1900)

	)

151 
	#__TBB_CPP17_FALLTHROUGH_PRESENT
 (
__˝lu•lus
 >201703L)

	)

152 
	#__TBB_FALLTHROUGH_PRESENT
 (
__TBB_GCC_VERSION
 >70000 && !
__INTEL_COMPILER
)

	)

158 #i‡
__INTEL_COMPILER
 && !
__INTEL_CXX11_MODE__


160 
	#__INTEL_CXX11_MODE__
 (
__GXX_EXPERIMENTAL_CXX0X__
 || (
_MSC_VER
 && 
__STDC_HOSTED__
))

	)

163 #i‡
__INTEL_COMPILER
 && (!
_MSC_VER
 || 
__INTEL_CXX11_MODE__
)

168 
	#__TBB_CPP11_VARIADIC_TEMPLATES_PRESENT
 (
__INTEL_CXX11_MODE__
 && 
__VARIADIC_TEMPLATES
)

	)

171 
	#__TBB_CPP11_RVALUE_REF_PRESENT
 ((
_MSC_VER
 >1700 || 
__GXX_EXPERIMENTAL_CXX0X__
 && (
__TBB_GLIBCXX_VERSION
 >40500 || 
_LIBCPP_VERSION
)Ë&& 
__INTEL_COMPILER
 >1400)

	)

172 
	#__TBB_IMPLICIT_MOVE_PRESENT
 (
__INTEL_CXX11_MODE__
 && 
__INTEL_COMPILER
 >1400 && (
_MSC_VER
 >1900 || 
__TBB_GCC_VERSION
 >40600 || 
__˛™g__
))

	)

173 #i‡ 
_MSC_VER
 >= 1600

174 
	#__TBB_EXCEPTION_PTR_PRESENT
 ( 
__INTEL_COMPILER
 > 1300 \

176 || (
__INTEL_COMPILER
 =1300 && 
__INTEL_COMPILER_BUILD_DATE
 >= 20120530) \

177 || (
__INTEL_COMPILER
 =1210 && 
__INTEL_COMPILER_BUILD_DATE
 >20120410Ë)

	)

181 #ñi‡
__TBB_GLIBCXX_VERSION
 >= 40404 && __TBB_GLIBCXX_VERSION < 40600

182 
	#__TBB_EXCEPTION_PTR_PRESENT
 (
__GXX_EXPERIMENTAL_CXX0X__
 && 
__INTEL_COMPILER
 >1200)

	)

183 #ñi‡
__TBB_GLIBCXX_VERSION
 >= 40600

184 
	#__TBB_EXCEPTION_PTR_PRESENT
 (
__GXX_EXPERIMENTAL_CXX0X__
 && 
__INTEL_COMPILER
 >1300)

	)

185 #ñi‡
_LIBCPP_VERSION


186 
	#__TBB_EXCEPTION_PTR_PRESENT
 
__GXX_EXPERIMENTAL_CXX0X__


	)

188 
	#__TBB_EXCEPTION_PTR_PRESENT
 0

	)

190 
	#__TBB_STATIC_ASSERT_PRESENT
 (
__INTEL_CXX11_MODE__
 || 
_MSC_VER
 >1600)

	)

191 
	#__TBB_CPP11_TUPLE_PRESENT
 (
_MSC_VER
 >1600 || 
__GXX_EXPERIMENTAL_CXX0X__
 && (
__TBB_GLIBCXX_VERSION
 >40300 || 
_LIBCPP_VERSION
))

	)

192 
	#__TBB_INITIALIZER_LISTS_PRESENT
 (
__INTEL_CXX11_MODE__
 && 
__INTEL_COMPILER
 >1400 && (
_MSC_VER
 >1800 || 
__TBB_GLIBCXX_VERSION
 >40400 || 
_LIBCPP_VERSION
))

	)

193 
	#__TBB_CONSTEXPR_PRESENT
 (
__INTEL_CXX11_MODE__
 && 
__INTEL_COMPILER
 >1400)

	)

194 
	#__TBB_DEFAULTED_AND_DELETED_FUNC_PRESENT
 (
__INTEL_CXX11_MODE__
 && 
__INTEL_COMPILER
 >1200)

	)

196 
	#__TBB_NOEXCEPT_PRESENT
 (
__INTEL_CXX11_MODE__
 && 
__INTEL_COMPILER
 >1300 && (
__TBB_GLIBCXX_VERSION
 >40600 || 
_LIBCPP_VERSION
 || 
_MSC_VER
))

	)

197 
	#__TBB_CPP11_STD_BEGIN_END_PRESENT
 (
_MSC_VER
 >1700 || 
__GXX_EXPERIMENTAL_CXX0X__
 && 
__INTEL_COMPILER
 >1310 && (
__TBB_GLIBCXX_VERSION
 >40600 || 
_LIBCPP_VERSION
))

	)

198 
	#__TBB_CPP11_AUTO_PRESENT
 (
_MSC_VER
 >1600 || 
__GXX_EXPERIMENTAL_CXX0X__
 && 
__INTEL_COMPILER
 >1210)

	)

199 
	#__TBB_CPP11_DECLTYPE_PRESENT
 (
_MSC_VER
 >1600 || 
__GXX_EXPERIMENTAL_CXX0X__
 && 
__INTEL_COMPILER
 >1210)

	)

200 
	#__TBB_CPP11_LAMBDAS_PRESENT
 (
__INTEL_CXX11_MODE__
 && 
__INTEL_COMPILER
 >1200)

	)

201 
	#__TBB_CPP11_DEFAULT_FUNC_TEMPLATE_ARGS_PRESENT
 (
_MSC_VER
 >1800 || 
__GXX_EXPERIMENTAL_CXX0X__
 && 
__INTEL_COMPILER
 >1210)

	)

202 
	#__TBB_OVERRIDE_PRESENT
 (
__INTEL_CXX11_MODE__
 && 
__INTEL_COMPILER
 >1400)

	)

203 
	#__TBB_ALIGNAS_PRESENT
 (
__INTEL_CXX11_MODE__
 && 
__INTEL_COMPILER
 >1500)

	)

204 
	#__TBB_CPP11_TEMPLATE_ALIASES_PRESENT
 (
__INTEL_CXX11_MODE__
 && 
__INTEL_COMPILER
 >1210)

	)

205 
	#__TBB_CPP14_INTEGER_SEQUENCE_PRESENT
 (
__˝lu•lus
 >201402L)

	)

206 
	#__TBB_CPP14_VARIABLE_TEMPLATES_PRESENT
 (
__˝lu•lus
 >201402L)

	)

207 
	#__TBB_CPP17_DEDUCTION_GUIDES_PRESENT
 (
__INTEL_COMPILER
 > 1910)

208 
	#__TBB_CPP17_INVOKE_RESULT_PRESENT
 (
__˝lu•lus
 >201703L)

	)

209 #ñi‡
__˛™g__


211 
	#__TBB_CPP11_VARIADIC_TEMPLATES_PRESENT
 
	`__has_„©uª
(
__cxx_v¨üdic_ãm∂©es__
)

	)

212 
	#__TBB_CPP11_RVALUE_REF_PRESENT
 (
	`__has_„©uª
(
__cxx_rvÆue_ª„ªn˚s__
Ë&& (
_LIBCPP_VERSION
 || 
__TBB_GLIBCXX_VERSION
 >40500))

	)

213 
	#__TBB_IMPLICIT_MOVE_PRESENT
 
	`__has_„©uª
(
cxx_im∂icô_moves
)

	)

215 
	#__TBB_EXCEPTION_PTR_PRESENT
 (
__˝lu•lus
 >201103L && (
_LIBCPP_VERSION
 || 
__TBB_GLIBCXX_VERSION
 >40600))

	)

216 
	#__TBB_STATIC_ASSERT_PRESENT
 
	`__has_„©uª
(
__cxx_°©ic_as£π__
)

	)

217 #i‡(
__˝lu•lus
 >201103L && 
__has_ö˛ude
(<
tu∂e
>))

218 
	#__TBB_CPP11_TUPLE_PRESENT
 1

	)

220 #i‡(
__has_„©uª
(
__cxx_gíîÆized_öôülizîs__
Ë&& 
__has_ö˛ude
(<
öôülizî_li°
>))

221 
	#__TBB_INITIALIZER_LISTS_PRESENT
 1

	)

223 
	#__TBB_CONSTEXPR_PRESENT
 
	`__has_„©uª
(
__cxx_c⁄°ex¥__
)

	)

224 
	#__TBB_DEFAULTED_AND_DELETED_FUNC_PRESENT
 (
	`__has_„©uª
(
__cxx_deÁu…ed_fun˘i⁄s__
Ë&& __has_„©uª(
__cxx_dñëed_fun˘i⁄s__
))

	)

226 
	#__TBB_NOEXCEPT_PRESENT
 (
__˝lu•lus
 >201103L)

	)

227 
	#__TBB_CPP11_STD_BEGIN_END_PRESENT
 (
	`__has_„©uª
(
__cxx_ønge_f‹__
Ë&& (
_LIBCPP_VERSION
 || 
__TBB_GLIBCXX_VERSION
 >40600))

	)

228 
	#__TBB_CPP11_AUTO_PRESENT
 
	`__has_„©uª
(
__cxx_auto_ty≥__
)

	)

229 
	#__TBB_CPP11_DECLTYPE_PRESENT
 
	`__has_„©uª
(
__cxx_de˛ty≥__
)

	)

230 
	#__TBB_CPP11_LAMBDAS_PRESENT
 
	`__has_„©uª
(
cxx_œmbdas
)

	)

231 
	#__TBB_CPP11_DEFAULT_FUNC_TEMPLATE_ARGS_PRESENT
 
	`__has_„©uª
(
cxx_deÁu…_fun˘i⁄_ãm∂©e_¨gs
)

	)

232 
	#__TBB_OVERRIDE_PRESENT
 
	`__has_„©uª
(
cxx_ovîride_c⁄åﬁ
)

	)

233 
	#__TBB_ALIGNAS_PRESENT
 
	`__has_„©uª
(
cxx_Æig«s
)

	)

234 
	#__TBB_CPP11_TEMPLATE_ALIASES_PRESENT
 
	`__has_„©uª
(
cxx_Æüs_ãm∂©es
)

	)

235 
	#__TBB_CPP14_INTEGER_SEQUENCE_PRESENT
 (
__˝lu•lus
 >201402L)

	)

236 
	#__TBB_CPP14_VARIABLE_TEMPLATES_PRESENT
 (
	`__has_„©uª
(
cxx_v¨übÀ_ãm∂©es
))

	)

237 
	#__TBB_CPP17_DEDUCTION_GUIDES_PRESENT
 (
	`__has_„©uª
(
__˝p_dedu˘i⁄_guides
))

	)

238 
	#__TBB_CPP17_INVOKE_RESULT_PRESENT
 (
	`__has_„©uª
(
__˝p_lib_is_övoˇbÀ
))

	)

239 #ñi‡
__GNUC__


240 
	#__TBB_CPP11_VARIADIC_TEMPLATES_PRESENT
 
__GXX_EXPERIMENTAL_CXX0X__


	)

241 
	#__TBB_CPP11_VARIADIC_FIXED_LENGTH_EXP_PRESENT
 (
__GXX_EXPERIMENTAL_CXX0X__
 && 
__TBB_GCC_VERSION
 >40700)

	)

242 
	#__TBB_CPP11_RVALUE_REF_PRESENT
 (
__GXX_EXPERIMENTAL_CXX0X__
 && 
__TBB_GCC_VERSION
 >40500)

	)

243 
	#__TBB_IMPLICIT_MOVE_PRESENT
 (
__GXX_EXPERIMENTAL_CXX0X__
 && 
__TBB_GCC_VERSION
 >40600)

	)

248 
	#__TBB_EXCEPTION_PTR_PRESENT
 (
__GXX_EXPERIMENTAL_CXX0X__
 && 
__TBB_GCC_VERSION
 >40404 && (
__GCC_HAVE_SYNC_COMPARE_AND_SWAP_4
 || (__TBB_GCC_VERSION >70000)))

	)

249 
	#__TBB_STATIC_ASSERT_PRESENT
 (
__GXX_EXPERIMENTAL_CXX0X__
 && 
__TBB_GCC_VERSION
 >40300)

	)

250 
	#__TBB_CPP11_TUPLE_PRESENT
 (
__GXX_EXPERIMENTAL_CXX0X__
 && 
__TBB_GCC_VERSION
 >40300)

	)

251 
	#__TBB_INITIALIZER_LISTS_PRESENT
 (
__GXX_EXPERIMENTAL_CXX0X__
 && 
__TBB_GCC_VERSION
 >40400)

	)

253 
	#__TBB_CONSTEXPR_PRESENT
 (
__GXX_EXPERIMENTAL_CXX0X__
 && 
__TBB_GCC_VERSION
 >40400)

	)

254 
	#__TBB_DEFAULTED_AND_DELETED_FUNC_PRESENT
 (
__GXX_EXPERIMENTAL_CXX0X__
 && 
__TBB_GCC_VERSION
 >40400)

	)

255 
	#__TBB_NOEXCEPT_PRESENT
 (
__GXX_EXPERIMENTAL_CXX0X__
 && 
__TBB_GCC_VERSION
 >40600)

	)

256 
	#__TBB_CPP11_STD_BEGIN_END_PRESENT
 (
__GXX_EXPERIMENTAL_CXX0X__
 && 
__TBB_GCC_VERSION
 >40600)

	)

257 
	#__TBB_CPP11_AUTO_PRESENT
 (
__GXX_EXPERIMENTAL_CXX0X__
 && 
__TBB_GCC_VERSION
 >40400)

	)

258 
	#__TBB_CPP11_DECLTYPE_PRESENT
 (
__GXX_EXPERIMENTAL_CXX0X__
 && 
__TBB_GCC_VERSION
 >40400)

	)

259 
	#__TBB_CPP11_LAMBDAS_PRESENT
 (
__GXX_EXPERIMENTAL_CXX0X__
 && 
__TBB_GCC_VERSION
 >40500)

	)

260 
	#__TBB_CPP11_DEFAULT_FUNC_TEMPLATE_ARGS_PRESENT
 (
__GXX_EXPERIMENTAL_CXX0X__
 && 
__TBB_GCC_VERSION
 >40300)

	)

261 
	#__TBB_OVERRIDE_PRESENT
 (
__GXX_EXPERIMENTAL_CXX0X__
 && 
__TBB_GCC_VERSION
 >40700)

	)

262 
	#__TBB_ALIGNAS_PRESENT
 (
__GXX_EXPERIMENTAL_CXX0X__
 && 
__TBB_GCC_VERSION
 >40800)

	)

263 
	#__TBB_CPP11_TEMPLATE_ALIASES_PRESENT
 (
__GXX_EXPERIMENTAL_CXX0X__
 && 
__TBB_GCC_VERSION
 >40700)

	)

264 
	#__TBB_CPP14_INTEGER_SEQUENCE_PRESENT
 (
__˝lu•lus
 >201402L && 
__TBB_GCC_VERSION
 >50000)

	)

265 
	#__TBB_CPP14_VARIABLE_TEMPLATES_PRESENT
 (
__˝lu•lus
 >201402L && 
__TBB_GCC_VERSION
 >50000)

	)

266 
	#__TBB_CPP17_DEDUCTION_GUIDES_PRESENT
 (
__˝p_dedu˘i⁄_guides
 >201606L)

	)

267 
	#__TBB_CPP17_INVOKE_RESULT_PRESENT
 (
__˝lu•lus
 >201703L && 
__TBB_GCC_VERSION
 >70000)

	)

268 #ñi‡
_MSC_VER


272 
	#__TBB_CPP11_VARIADIC_TEMPLATES_PRESENT
 (
_MSC_VER
 >1800)

	)

274 
	#__TBB_CPP11_RVALUE_REF_PRESENT
 (
_MSC_VER
 >1700 && (!
__INTEL_COMPILER
 || __INTEL_COMPILER >1400))

	)

275 
	#__TBB_IMPLICIT_MOVE_PRESENT
 (
_MSC_VER
 >1900)

	)

276 
	#__TBB_EXCEPTION_PTR_PRESENT
 (
_MSC_VER
 >1600)

	)

277 
	#__TBB_STATIC_ASSERT_PRESENT
 (
_MSC_VER
 >1600)

	)

278 
	#__TBB_CPP11_TUPLE_PRESENT
 (
_MSC_VER
 >1600)

	)

279 
	#__TBB_INITIALIZER_LISTS_PRESENT
 (
_MSC_VER
 >1800)

	)

280 
	#__TBB_CONSTEXPR_PRESENT
 (
_MSC_VER
 >1900)

	)

281 
	#__TBB_DEFAULTED_AND_DELETED_FUNC_PRESENT
 (
_MSC_VER
 >1800)

	)

282 
	#__TBB_NOEXCEPT_PRESENT
 (
_MSC_VER
 >1900)

	)

283 
	#__TBB_CPP11_STD_BEGIN_END_PRESENT
 (
_MSC_VER
 >1700)

	)

284 
	#__TBB_CPP11_AUTO_PRESENT
 (
_MSC_VER
 >1600)

	)

285 
	#__TBB_CPP11_DECLTYPE_PRESENT
 (
_MSC_VER
 >1600)

	)

286 
	#__TBB_CPP11_LAMBDAS_PRESENT
 (
_MSC_VER
 >1600)

	)

287 
	#__TBB_CPP11_DEFAULT_FUNC_TEMPLATE_ARGS_PRESENT
 (
_MSC_VER
 >1800)

	)

288 
	#__TBB_OVERRIDE_PRESENT
 (
_MSC_VER
 >1700)

	)

289 
	#__TBB_ALIGNAS_PRESENT
 (
_MSC_VER
 >1900)

	)

290 
	#__TBB_CPP11_TEMPLATE_ALIASES_PRESENT
 (
_MSC_VER
 >1800)

	)

291 
	#__TBB_CPP14_INTEGER_SEQUENCE_PRESENT
 (
_MSC_VER
 >1900)

	)

293 
	#__TBB_CPP14_VARIABLE_TEMPLATES_PRESENT
 (
_MSC_FULL_VER
 >190023918 && (!
__INTEL_COMPILER
 || __INTEL_COMPILER >1700))

	)

294 
	#__TBB_CPP17_DEDUCTION_GUIDES_PRESENT
 (
_MSVC_LANG
 >201703L && 
_MSC_VER
 >1914)

	)

295 
	#__TBB_CPP17_INVOKE_RESULT_PRESENT
 (
_MSVC_LANG
 >201703L && 
_MSC_VER
 >1911)

	)

297 
	#__TBB_CPP11_VARIADIC_TEMPLATES_PRESENT
 
__TBB_CPP11_PRESENT


	)

298 
	#__TBB_CPP11_RVALUE_REF_PRESENT
 
__TBB_CPP11_PRESENT


	)

299 
	#__TBB_IMPLICIT_MOVE_PRESENT
 
__TBB_CPP11_PRESENT


	)

300 
	#__TBB_EXCEPTION_PTR_PRESENT
 
__TBB_CPP11_PRESENT


	)

301 
	#__TBB_STATIC_ASSERT_PRESENT
 
__TBB_CPP11_PRESENT


	)

302 
	#__TBB_CPP11_TUPLE_PRESENT
 
__TBB_CPP11_PRESENT


	)

303 
	#__TBB_INITIALIZER_LISTS_PRESENT
 
__TBB_CPP11_PRESENT


	)

304 
	#__TBB_CONSTEXPR_PRESENT
 
__TBB_CPP11_PRESENT


	)

305 
	#__TBB_DEFAULTED_AND_DELETED_FUNC_PRESENT
 
__TBB_CPP11_PRESENT


	)

306 
	#__TBB_NOEXCEPT_PRESENT
 
__TBB_CPP11_PRESENT


	)

307 
	#__TBB_CPP11_STD_BEGIN_END_PRESENT
 
__TBB_CPP11_PRESENT


	)

308 
	#__TBB_CPP11_AUTO_PRESENT
 
__TBB_CPP11_PRESENT


	)

309 
	#__TBB_CPP11_DECLTYPE_PRESENT
 
__TBB_CPP11_PRESENT


	)

310 
	#__TBB_CPP11_LAMBDAS_PRESENT
 
__TBB_CPP11_PRESENT


	)

311 
	#__TBB_CPP11_DEFAULT_FUNC_TEMPLATE_ARGS_PRESENT
 
__TBB_CPP11_PRESENT


	)

312 
	#__TBB_OVERRIDE_PRESENT
 
__TBB_CPP11_PRESENT


	)

313 
	#__TBB_ALIGNAS_PRESENT
 
__TBB_CPP11_PRESENT


	)

314 
	#__TBB_CPP11_TEMPLATE_ALIASES_PRESENT
 
__TBB_CPP11_PRESENT


	)

315 
	#__TBB_CPP14_INTEGER_SEQUENCE_PRESENT
 (
__˝lu•lus
 >201402L)

	)

316 
	#__TBB_CPP14_VARIABLE_TEMPLATES_PRESENT
 (
__˝lu•lus
 >201402L)

	)

317 
	#__TBB_CPP17_DEDUCTION_GUIDES_PRESENT
 (
__˝lu•lus
 >201703L)

	)

318 
	#__TBB_CPP17_INVOKE_RESULT_PRESENT
 (
__˝lu•lus
 >201703L)

	)

323 
	#__TBB_CPP11_ARRAY_PRESENT
 (
_MSC_VER
 >1700 || 
_LIBCPP_VERSION
 || 
__GXX_EXPERIMENTAL_CXX0X__
 && 
__TBB_GLIBCXX_VERSION
 >40300)

	)

325 #i‚de‡
__TBB_CPP11_VARIADIC_FIXED_LENGTH_EXP_PRESENT


326 
	#__TBB_CPP11_VARIADIC_FIXED_LENGTH_EXP_PRESENT
 
__TBB_CPP11_VARIADIC_TEMPLATES_PRESENT


	)

328 
	#__TBB_CPP11_VARIADIC_TUPLE_PRESENT
 (!
_MSC_VER
 || _MSC_VER >1800)

	)

330 
	#__TBB_CPP11_TYPE_PROPERTIES_PRESENT
 (
_LIBCPP_VERSION
 || 
_MSC_VER
 >1700 || (
__TBB_GLIBCXX_VERSION
 >50000 && 
__GXX_EXPERIMENTAL_CXX0X__
))

	)

332 
	#__TBB_CPP11_IS_COPY_CONSTRUCTIBLE_PRESENT
 (
__GXX_EXPERIMENTAL_CXX0X__
 && 
__TBB_GLIBCXX_VERSION
 >40700 || 
__TBB_CPP11_TYPE_PROPERTIES_PRESENT
)

	)

335 
	#__TBB_MOVE_IF_NOEXCEPT_PRESENT
 (
__TBB_NOEXCEPT_PRESENT
 && (
__TBB_GLIBCXX_VERSION
 >40700 || 
_MSC_VER
 >1900 || 
_LIBCPP_VERSION
))

	)

336 
	#__TBB_ALLOCATOR_TRAITS_PRESENT
 (
__˝lu•lus
 >201103L && 
_LIBCPP_VERSION
 || 
_MSC_VER
 >= 1800 || \

337 
__GXX_EXPERIMENTAL_CXX0X__
 && 
__TBB_GLIBCXX_VERSION
 >40700 && !(__TBB_GLIBCXX_VERSION =40700 && 
__TBB_DEFINE_MIC
))

	)

338 
	#__TBB_MAKE_EXCEPTION_PTR_PRESENT
 (
__TBB_EXCEPTION_PTR_PRESENT
 && (
_MSC_VER
 >1700 || 
__TBB_GLIBCXX_VERSION
 >40600 || 
_LIBCPP_VERSION
 || 
__SUNPRO_CC
))

	)

341 
	#__TBB_CPP11_SMART_POINTERS_PRESENT
 ( 
_MSC_VER
 >1600 || 
_LIBCPP_VERSION
 \

342 || ((
__˝lu•lus
 >201103L || 
__GXX_EXPERIMENTAL_CXX0X__
) \

343 && (
__TBB_GLIBCXX_VERSION
 >40500 || __TBB_GLIBCXX_VERSION >40400 && 
__TBB_USE_OPTIONAL_RTTI
)Ë)

	)

345 
	#__TBB_CPP11_FUTURE_PRESENT
 (
_MSC_VER
 >1700 || 
__TBB_GLIBCXX_VERSION
 >40600 && 
__GXX_EXPERIMENTAL_CXX0X__
 || 
_LIBCPP_VERSION
)

	)

347 
	#__TBB_CPP11_GET_NEW_HANDLER_PRESENT
 (
_MSC_VER
 >1900 || 
__TBB_GLIBCXX_VERSION
 >40900 && 
__GXX_EXPERIMENTAL_CXX0X__
 || 
_LIBCPP_VERSION
)

	)

349 
	#__TBB_CPP17_UNCAUGHT_EXCEPTIONS_PRESENT
 (
_MSC_VER
 >1900 || 
__GLIBCXX__
 && 
__˝p_lib_unˇught_ex˚±i⁄s
 \

350 || 
_LIBCPP_VERSION
 >3700 && (!
__TBB_MACOS_TARGET_VERSION
 || __TBB_MACOS_TARGET_VERSION >101200))

	)

353 
	#__TBB_CPP17_MEMORY_RESOURCE_PRESENT
 (
_MSC_VER
 >1913 && (
_MSVC_LANG
 > 201402L || 
__˝lu•lus
 > 201402L) || \

354 
__GLIBCXX__
 && 
__˝p_lib_mem‹y_ªsour˚
 >201603)

	)

355 
	#__TBB_CPP17_HW_INTERFERENCE_SIZE_PRESENT
 (
_MSC_VER
 >1911)

	)

357 #i‡
_MSC_VER
>=1400 || 
_LIBCPP_VERSION
 || 
__GXX_EXPERIMENTAL_CXX0X__


358 
	#__TBB_STD_SWAP_HEADER
 <
utûôy
>

	)

360 
	#__TBB_STD_SWAP_HEADER
 <
Æg‹ôhm
>

	)

365 #i‡
__INTEL_COMPILER
 && 
__GNUC__
 && 
__TBB_EXCEPTION_PTR_PRESENT
 && !
deföed
(
__GCC_HAVE_SYNC_COMPARE_AND_SWAP_4
)

366 
	#__GCC_HAVE_SYNC_COMPARE_AND_SWAP_4
 1

	)

370 #i‡
__MINGW32__
 && 
__TBB_EXCEPTION_PTR_PRESENT
 && !
deföed
(
_GLIBCXX_ATOMIC_BUILTINS_4
)

371 
	#_GLIBCXX_ATOMIC_BUILTINS_4


	)

374 #i‡
__GNUC__
 || 
__SUNPRO_CC
 || 
__IBMCPP__


376 
	#__TBB_ATTRIBUTE_ALIGNED_PRESENT
 1

	)

377 #ñi‡
_MSC_VER
 && (_MSC_VER >1300 || 
__INTEL_COMPILER
)

378 
	#__TBB_DECLSPEC_ALIGN_PRESENT
 1

	)

385 #i‡
__TBB_GCC_VERSION
 >40306 || 
__INTEL_COMPILER
 >1200 || 
__˛™g__


387 
	#__TBB_GCC_BUILTIN_ATOMICS_PRESENT
 1

	)

390 #i‡
__TBB_GCC_VERSION
 >70000 && !
__INTEL_COMPILER
 && !
__˛™g__


393 
	#TBB_USE_GCC_BUILTINS
 1

	)

396 #i‡
__INTEL_COMPILER
 >= 1200

398 
	#__TBB_ICC_BUILTIN_ATOMICS_PRESENT
 1

	)

401 #i‡
_MSC_VER
>=1600 && (!
__INTEL_COMPILER
 || __INTEL_COMPILER>=1310)

402 
	#__TBB_MSVC_PART_WORD_INTERLOCKED_INTRINSICS_PRESENT
 1

	)

405 
	#__TBB_TSX_INTRINSICS_PRESENT
 ((
__RTM__
 || 
_MSC_VER
>=1700 || 
__INTEL_COMPILER
>=1300Ë&& !
__TBB_DEFINE_MIC
 && !
__ANDROID__
)

	)

408 
	#__TBB_CONCAT_AUX
(
A
,
B
ËA##
	)
B

411 
	#__TBB_CONCAT
(
A
,
B
Ë
	`__TBB_CONCAT_AUX
(A,B)

	)

413 
	#__TBB_IS_MACRO_EMPTY
(
A
,
IGNORED
Ë
	`__TBB_CONCAT_AUX
(
__TBB_MACRO_EMPTY
,A)

	)

414 
	#__TBB_MACRO_EMPTY
 1

	)

417 #i‚de‡
TBB_USE_DEBUG


425 #ifde‡
_DEBUG


427 
	#__TBB_IS__DEBUG_EMPTY
 (
	`__TBB_IS_MACRO_EMPTY
(
_DEBUG
,
IGNORED
)==
__TBB_MACRO_EMPTY
)

	)

428 #i‡
__TBB_IS__DEBUG_EMPTY


429 
	#TBB_USE_DEBUG
 1

	)

431 
	#TBB_USE_DEBUG
 
_DEBUG


	)

434 
	#TBB_USE_DEBUG
 0

	)

438 #i‚de‡
TBB_USE_ASSERT


439 
	#TBB_USE_ASSERT
 
TBB_USE_DEBUG


	)

442 #i‚de‡
TBB_USE_THREADING_TOOLS


443 
	#TBB_USE_THREADING_TOOLS
 
TBB_USE_DEBUG


	)

446 #i‚de‡
TBB_USE_PERFORMANCE_WARNINGS


447 #ifde‡
TBB_PERFORMANCE_WARNINGS


448 
	#TBB_USE_PERFORMANCE_WARNINGS
 
TBB_PERFORMANCE_WARNINGS


	)

450 
	#TBB_USE_PERFORMANCE_WARNINGS
 
TBB_USE_DEBUG


	)

454 #i‡
__TBB_DEFINE_MIC


455 #i‡
TBB_USE_EXCEPTIONS


456 #îr‹ 
The
 
∂©f‹m
 
d€s
 
nŸ
 
¥›îly
 
suµ‹t
 
ex˚±i⁄
 
h™dlög
. 
PÀa£
 dÿnŸ 
£t
 
TBB_USE_EXCEPTIONS
 
ma¸o
 
‹
 së 
ô
 
to
 0.

457 #ñi‡!
deföed
(
TBB_USE_EXCEPTIONS
)

458 
	#TBB_USE_EXCEPTIONS
 0

	)

460 #ñi‡!(
__EXCEPTIONS
 || 
deföed
(
_CPPUNWIND
Ë|| 
__SUNPRO_CC
)

461 #i‡
TBB_USE_EXCEPTIONS


462 #îr‹ 
Compû©i⁄
 
£âögs
 dÿ
nŸ
 
suµ‹t
 
ex˚±i⁄
 
h™dlög
. 
PÀa£
 dÿnŸ 
£t
 
TBB_USE_EXCEPTIONS
 
ma¸o
 
‹
 së 
ô
 
to
 0.

463 #ñi‡!
deföed
(
TBB_USE_EXCEPTIONS
)

464 
	#TBB_USE_EXCEPTIONS
 0

	)

466 #ñi‡!
deföed
(
TBB_USE_EXCEPTIONS
)

467 
	#TBB_USE_EXCEPTIONS
 1

	)

470 #i‚de‡
TBB_IMPLEMENT_CPP0X


472 #i‡
__˛™g__


474 #i‡(
__INTEL_COMPILER
 && (__INTEL_COMPILER < 1500 || __INTEL_COMPILER =1500 && 
__INTEL_COMPILER_UPDATE
 <= 1))

475 
	#TBB_IMPLEMENT_CPP0X
 (
__˝lu•lus
 < 201103L || !
_LIBCPP_VERSION
)

	)

477 
	#TBB_IMPLEMENT_CPP0X
 (
__˝lu•lus
 < 201103L || (!
	`__has_ö˛ude
(<
thªad
>Ë&& !__has_ö˛ude(<
c⁄dôi⁄_v¨übÀ
>)))

	)

479 #ñi‡
__GNUC__


480 
	#TBB_IMPLEMENT_CPP0X
 (
__TBB_GCC_VERSION
 < 40400 || !
__GXX_EXPERIMENTAL_CXX0X__
)

	)

481 #ñi‡
_MSC_VER


482 
	#TBB_IMPLEMENT_CPP0X
 (
_MSC_VER
 < 1700)

	)

485 
	#TBB_IMPLEMENT_CPP0X
 (!
__STDCPP_THREADS__
)

	)

490 #i‚de‡
TBB_USE_CAPTURED_EXCEPTION


492 #i‡
__TBB_EXCEPTION_PTR_PRESENT
 && !
deföed
(
__ü64__
)

493 
	#TBB_USE_CAPTURED_EXCEPTION
 0

	)

495 
	#TBB_USE_CAPTURED_EXCEPTION
 1

	)

498 #i‡!
TBB_USE_CAPTURED_EXCEPTION
 && !
__TBB_EXCEPTION_PTR_PRESENT


499 #îr‹ 
Cuºít
 
ru¡ime
 
d€s
 
nŸ
 
suµ‹t
 
°d
::
ex˚±i⁄_±r
. 
Së
 
TBB_USE_CAPTURED_EXCEPTION
 
™d
 
make
 
suª
 
th©
 
your
 
code
 
is
 
ªady
 
to
 
ˇtch
 
tbb
::
ˇ±uªd_ex˚±i⁄
.

504 #i‡
TBB_USE_GCC_BUILTINS
 && !
__TBB_GCC_BUILTIN_ATOMICS_PRESENT


513 #i‚de‡
__TBB_CONCURRENT_ORDERED_CONTAINERS_PRESENT


514 
	#__TBB_CONCURRENT_ORDERED_CONTAINERS_PRESENT
 ( 
__TBB_CPP11_RVALUE_REF_PRESENT
 && 
__TBB_CPP11_VARIADIC_TEMPLATES_PRESENT
 \

515 && 
__TBB_IMPLICIT_MOVE_PRESENT
 && 
__TBB_CPP11_AUTO_PRESENT
 && 
__TBB_CPP11_LAMBDAS_PRESENT
 && 
__TBB_CPP11_ARRAY_PRESENT
 \

516 && 
__TBB_INITIALIZER_LISTS_PRESENT
 )

	)

520 #i‚de‡
__TBB_WEAK_SYMBOLS_PRESENT


521 
	#__TBB_WEAK_SYMBOLS_PRESENT
 ( !
_WIN32
 && !
__APPLE__
 && !
__sun
 && (
__TBB_GCC_VERSION
 >40000 || 
__INTEL_COMPILER
 ) )

	)

525 #i‚de‡
__TBB_DYNAMIC_LOAD_ENABLED


526 
	#__TBB_DYNAMIC_LOAD_ENABLED
 1

	)

532 #i‡(
_WIN32
||
_WIN64
Ë&& (
__TBB_SOURCE_DIRECTLY_INCLUDED
 || 
TBB_USE_PREVIEW_BINARY
)

533 
	#__TBB_NO_IMPLICIT_LINKAGE
 1

	)

534 
	#__TBBMALLOC_NO_IMPLICIT_LINKAGE
 1

	)

537 #i‚de‡
__TBB_COUNT_TASK_NODES


538 
	#__TBB_COUNT_TASK_NODES
 
TBB_USE_ASSERT


	)

541 #i‚de‡
__TBB_TASK_GROUP_CONTEXT


542 
	#__TBB_TASK_GROUP_CONTEXT
 1

	)

545 #i‚de‡
__TBB_SCHEDULER_OBSERVER


546 
	#__TBB_SCHEDULER_OBSERVER
 1

	)

549 #i‚de‡
__TBB_FP_CONTEXT


550 
	#__TBB_FP_CONTEXT
 
__TBB_TASK_GROUP_CONTEXT


	)

553 #i‡
__TBB_FP_CONTEXT
 && !
__TBB_TASK_GROUP_CONTEXT


554 #îr‹ 
__TBB_FP_CONTEXT
 
ªquúes
 
__TBB_TASK_GROUP_CONTEXT
 
to
 
be
 
íabÀd


557 
	#__TBB_RECYCLE_TO_ENQUEUE
 
__TBB_BUILD


558 

	)

559 #i‚de‡
__TBB_ARENA_OBSERVER


560 
	#__TBB_ARENA_OBSERVER
 
__TBB_SCHEDULER_OBSERVER


	)

563 #i‚de‡
__TBB_TASK_ISOLATION


564 
	#__TBB_TASK_ISOLATION
 1

	)

567 #i‡
TBB_USE_EXCEPTIONS
 && !
__TBB_TASK_GROUP_CONTEXT


568 #îr‹ 
TBB_USE_EXCEPTIONS
 
ªquúes
 
__TBB_TASK_GROUP_CONTEXT
 
to
 
be
 
íabÀd


571 #i‚de‡
__TBB_TASK_PRIORITY


572 
	#__TBB_TASK_PRIORITY
 (
__TBB_TASK_GROUP_CONTEXT
)

	)

575 #i‡
__TBB_TASK_PRIORITY
 && !
__TBB_TASK_GROUP_CONTEXT


576 #îr‹ 
__TBB_TASK_PRIORITY
 
ªquúes
 
__TBB_TASK_GROUP_CONTEXT
 
to
 
be
 
íabÀd


579 #i‡
TBB_PREVIEW_NUMA_SUPPORT
 || 
__TBB_BUILD


580 
	#__TBB_NUMA_SUPPORT
 1

	)

583 #i‡
TBB_PREVIEW_WAITING_FOR_WORKERS
 || 
__TBB_BUILD


584 
	#__TBB_SUPPORTS_WORKERS_WAITING_IN_TERMINATE
 1

	)

587 #i‚de‡
__TBB_ENQUEUE_ENFORCED_CONCURRENCY


588 
	#__TBB_ENQUEUE_ENFORCED_CONCURRENCY
 1

	)

591 #i‡!
deföed
(
__TBB_SURVIVE_THREAD_SWITCH
) && \

592 (
	g_WIN32
 || 
	g_WIN64
 || 
	g__APPLE__
 || (
	g__löux__
 && !
	g__ANDROID__
))

593 
	#__TBB_SURVIVE_THREAD_SWITCH
 1

	)

596 #i‚de‡
__TBB_DEFAULT_PARTITIONER


597 
	#__TBB_DEFAULT_PARTITIONER
 
tbb
::
auto_∑πôi⁄î


	)

600 #i‚de‡
__TBB_USE_PROPORTIONAL_SPLIT_IN_BLOCKED_RANGES


601 
	#__TBB_USE_PROPORTIONAL_SPLIT_IN_BLOCKED_RANGES
 1

	)

604 #i‚de‡
__TBB_ENABLE_RANGE_FEEDBACK


605 
	#__TBB_ENABLE_RANGE_FEEDBACK
 0

	)

608 #ifde‡
_VARIADIC_MAX


609 
	#__TBB_VARIADIC_MAX
 
_VARIADIC_MAX


	)

611 #i‡
_MSC_VER
 == 1700

612 
	#__TBB_VARIADIC_MAX
 5

613 #ñi‡
_MSC_VER
 =1600

	)

614 
	#__TBB_VARIADIC_MAX
 10

615 #ñ£

	)

616 
	#__TBB_VARIADIC_MAX
 15

	)

623 #i‡!
deföed
(
__INTEL_COMPILER
Ë&& (!deföed(
TBB_SUPPRESS_DEPRECATED_MESSAGES
) || (TBB_SUPPRESS_DEPRECATED_MESSAGES == 0))

624 #i‡(
__˝lu•lus
 >= 201402L)

625 
	#__TBB_DEPRECATED
 [[
dïªˇãd
]]

	)

626 
	#__TBB_DEPRECATED_MSG
(
msg
Ë[[
	`dïªˇãd
(msg)]]

	)

627 #ñi‡
_MSC_VER


628 
	#__TBB_DEPRECATED
 
	`__de˛•ec
(
dïªˇãd
)

	)

629 
	#__TBB_DEPRECATED_MSG
(
msg
Ë
	`__de˛•ec
(
	`dïªˇãd
(msg))

	)

630 #ñi‡(
__GNUC__
 && 
__TBB_GCC_VERSION
 >40805Ë|| 
__˛™g__


631 
	#__TBB_DEPRECATED
 
	`__©åibuã__
((
dïªˇãd
))

	)

632 
	#__TBB_DEPRECATED_MSG
(
msg
Ë
	`__©åibuã__
((
	`dïªˇãd
(msg)))

	)

636 #i‡!
deföed
(
__TBB_DEPRECATED
)

637 
	#__TBB_DEPRECATED


	)

638 
	#__TBB_DEPRECATED_MSG
(
msg
)

	)

639 #ñi‡!
deföed
(
__TBB_SUPPRESS_INTERNAL_DEPRECATED_MESSAGES
)

641 
	#__TBB_SUPPRESS_INTERNAL_DEPRECATED_MESSAGES
 1

	)

644 #i‡
deföed
(
TBB_SUPPRESS_DEPRECATED_MESSAGES
) && (TBB_SUPPRESS_DEPRECATED_MESSAGES == 0)

645 
	#__TBB_DEPRECATED_VERBOSE
 
__TBB_DEPRECATED


	)

646 
	#__TBB_DEPRECATED_VERBOSE_MSG
(
msg
Ë
	`__TBB_DEPRECATED_MSG
(msg)

	)

648 
	#__TBB_DEPRECATED_VERBOSE


	)

649 
	#__TBB_DEPRECATED_VERBOSE_MSG
(
msg
)

	)

652 #i‡(!
deföed
(
TBB_SUPPRESS_DEPRECATED_MESSAGES
Ë|| (TBB_SUPPRESS_DEPRECATED_MESSAGES =0)Ë&& !
__TBB_CPP11_PRESENT


653 #¥agm®
mesßge
("TBB Warning: Support for C++98/03 is deprecated. Please useÅhe compilerÅhat supports C++11 featuresátÜeast.")

659 #i‡
deföed
(
WINAPI_FAMILY
Ë&& WINAPI_FAMILY =
WINAPI_FAMILY_APP


660 
	#__TBB_WIN8UI_SUPPORT
 1

	)

662 
	#__TBB_WIN8UI_SUPPORT
 0

	)

671 #i‡
__SIZEOF_POINTER__
 < 8 && 
__ANDROID__
 && 
__TBB_GCC_VERSION
 <40403 && !
__GCC_HAVE_SYNC_COMPARE_AND_SWAP_8


675 
	#__TBB_GCC_64BIT_ATOMIC_BUILTINS_BROKEN
 1

	)

676 #ñi‡
__TBB_x86_32
 && 
__TBB_GCC_VERSION
 =40102 && ! 
__GNUC_RH_RELEASE__


680 
	#__TBB_GCC_64BIT_ATOMIC_BUILTINS_BROKEN
 1

	)

683 #i‡
__GNUC__
 && 
__TBB_x86_64
 && 
__INTEL_COMPILER
 == 1200

684 
	#__TBB_ICC_12_0_INL_ASM_FSTCW_BROKEN
 1

	)

687 #i‡
_MSC_VER
 && 
__INTEL_COMPILER
 && (__INTEL_COMPILER<1110 || __INTEL_COMPILER==1110 && 
__INTEL_COMPILER_BUILD_DATE
 < 20091012)

691 
	#__TBB_DEFAULT_DTOR_THROW_SPEC_BROKEN
 1

	)

694 #i‡!
__INTEL_COMPILER
 && (
_MSC_VER
 && _MSC_VER < 1500 || 
__GNUC__
 && 
__TBB_GCC_VERSION
 < 40102)

697 
	#__TBB_TEMPLATE_FRIENDS_BROKEN
 1

	)

700 #i‡
__GLIBC__
==2 && 
__GLIBC_MINOR__
==3 || (
__APPLE__
 && ( 
__INTEL_COMPILER
==1200 && !
TBB_USE_DEBUG
))

703 
	#__TBB_THROW_ACROSS_MODULE_BOUNDARY_BROKEN
 1

	)

706 #i‡(
_WIN32
||
_WIN64
Ë&& 
__INTEL_COMPILER
 == 1110

708 
	#__TBB_ICL_11_1_CODE_GEN_BROKEN
 1

	)

711 #i‡
__˛™g__
 || (
__GNUC__
==3 && 
__GNUC_MINOR__
==3 && !
deföed
(
__INTEL_COMPILER
))

713 
	#__TBB_PROTECTED_NESTED_CLASS_BROKEN
 1

	)

716 #i‡
__MINGW32__
 && 
__TBB_GCC_VERSION
 < 40200

719 
	#__TBB_SSE_STACK_ALIGNMENT_BROKEN
 1

	)

722 #i‡
__TBB_GCC_VERSION
==40300 && !
__INTEL_COMPILER
 && !
__˛™g__


724 
	#__TBB_GCC_OPTIMIZER_ORDERING_BROKEN
 1

	)

727 #i‡
__FªeBSD__


730 
	#__TBB_PRIO_INHERIT_BROKEN
 1

	)

734 
	#__TBB_PLACEMENT_NEW_EXCEPTION_SAFETY_BROKEN
 1

	)

737 #i‡(
__löux__
 || 
__APPLE__
Ë&& 
__i386__
 && 
deföed
(
__INTEL_COMPILER
)

740 
	#__TBB_ICC_ASM_VOLATILE_BROKEN
 1

	)

743 #i‡!
__INTEL_COMPILER
 && (
_MSC_VER
 && _MSC_VER < 1700 || 
__GNUC__
==3 && 
__GNUC_MINOR__
<=2)

746 
	#__TBB_ALIGNOF_NOT_INSTANTIATED_TYPES_BROKEN
 1

	)

749 #i‡
__TBB_DEFINE_MIC


751 
	#__TBB_MAIN_THREAD_AFFINITY_BROKEN
 1

	)

754 #i‡
__GXX_EXPERIMENTAL_CXX0X__
 && !
deföed
(
__EXCEPTIONS
) && \

755 ((!
	g__INTEL_COMPILER
 && !
	g__˛™g__
 && (
	g__TBB_GCC_VERSION
>=40400 && 
__TBB_GCC_VERSION
<40600)) || \

756 (
__INTEL_COMPILER
<=1400 && (
__TBB_GLIBCXX_VERSION
>=40400 && __TBB_GLIBCXX_VERSION<=40801)))

762 
	#__TBB_LIBSTDCPP_EXCEPTION_HEADERS_BROKEN
 1

	)

765 #i‡
__INTEL_COMPILER
==1300 && 
__TBB_GLIBCXX_VERSION
>=40700 && 
deföed
(
__GXX_EXPERIMENTAL_CXX0X__
)

767 
	#__TBB_ICC_13_0_CPP11_STDLIB_SUPPORT_BROKEN
 1

	)

770 #i‡(
__GNUC__
==4 && 
__GNUC_MINOR__
==4 ) && !
deföed
(
__INTEL_COMPILER
Ë&& !deföed(
__˛™g__
)

772 
	#__TBB_GCC_STRICT_ALIASING_BROKEN
 1

	)

774 #i‡!
__TBB_GCC_WARNING_SUPPRESSION_PRESENT


775 #îr‹ 
W¨nög
 
suµªssi⁄
 
is
 
nŸ
 
suµ‹ãd
, 
should
.

780 #i‡
__TBB_GCC_VERSION
 =40102 && 
__PIC__
 && !
deföed
(
__INTEL_COMPILER
Ë&& !deföed(
__˛™g__
)

781 
	#__TBB_GCC_CAS8_BUILTIN_INLINING_BROKEN
 1

	)

784 #i‡
__TBB_x86_32
 && ( 
__INTEL_COMPILER
 || (
__GNUC__
==5 && 
__GNUC_MINOR__
>=2 && 
__GXX_EXPERIMENTAL_CXX0X__
) \

785 || (
	g__GNUC__
==3 && 
__GNUC_MINOR__
==3Ë|| (
__MINGW32__
 && 
__GNUC__
==4 && __GNUC_MINOR__==5Ë|| 
__SUNPRO_CC
 )

790 
	#__TBB_FORCE_64BIT_ALIGNMENT_BROKEN
 1

	)

793 
	#__TBB_FORCE_64BIT_ALIGNMENT_BROKEN
 0

	)

796 #i‡
__GNUC__
 && !
__INTEL_COMPILER
 && !
__˛™g__
 && 
__TBB_DEFAULTED_AND_DELETED_FUNC_PRESENT
 && 
__TBB_GCC_VERSION
 < 40700

797 
	#__TBB_ZERO_INIT_WITH_DEFAULTED_CTOR_BROKEN
 1

	)

800 #i‡
_MSC_VER
 && _MSC_VER <1800 && !
__INTEL_COMPILER


803 
	#__TBB_CONST_REF_TO_ARRAY_TEMPLATE_PARAM_BROKEN
 1

	)

807 
	#__TBB_IF_NO_COPY_CTOR_MOVE_SEMANTICS_BROKEN
 (
_MSC_VER
 && (
__INTEL_COMPILER
 >1300 && __INTEL_COMPILER <1310Ë&& !
__INTEL_CXX11_MODE__
)

	)

809 
	#__TBB_CPP11_DECLVAL_BROKEN
 (
_MSC_VER
 =1600 || (
__GNUC__
 && 
__TBB_GCC_VERSION
 < 40500Ë)

	)

811 
	#__TBB_COPY_FROM_NON_CONST_REF_BROKEN
 (
_MSC_VER
 =1700 && 
__INTEL_COMPILER
 && __INTEL_COMPILER < 1600)

	)

815 #i‡
__GXX_EXPERIMENTAL_CXX0X__
 && 
__GLIBCXX__
 && ((
__INTEL_COMPILER
 >=1300 && __INTEL_COMPILER <=1310 && 
__TBB_GLIBCXX_VERSION
>=40700) || (__TBB_GLIBCXX_VERSION < 40500))

816 
	#__TBB_UPCAST_OF_TUPLE_OF_REF_BROKEN
 1

	)

820 
	#__TBB_CPP11_DECLTYPE_OF_FUNCTION_RETURN_TYPE_BROKEN
 (
_MSC_VER
 =1600 && !
__INTEL_COMPILER
)

	)

823 #i‡
_MSC_VER
 && _MSC_VER <= 1800

824 
	#__TBB_IMPLICIT_COPY_DELETION_BROKEN
 1

	)

829 #i‡
deföed
(
_MSC_VER
Ë&& _MSC_VER>=1500 && !deföed(
__INTEL_COMPILER
)

831 
	#__TBB_MSVC_UNREACHABLE_CODE_IGNORED
 1

	)

834 
	#__TBB_ATOMIC_CTORS
 (
__TBB_CONSTEXPR_PRESENT
 && 
__TBB_DEFAULTED_AND_DELETED_FUNC_PRESENT
 && (!
__TBB_ZERO_INIT_WITH_DEFAULTED_CTOR_BROKEN
))

	)

838 #i‡
__ANDROID__


839 
	~<™droid/≠i-Àvñ.h
>

840 
	#__TBB_USE_DLOPEN_REENTRANCY_WORKAROUND
 (
__ANDROID_API__
 < 19)

	)

843 
	#__TBB_ALLOCATOR_CONSTRUCT_VARIADIC
 (
__TBB_CPP11_VARIADIC_TEMPLATES_PRESENT
 && 
__TBB_CPP11_RVALUE_REF_PRESENT
)

	)

845 
	#__TBB_VARIADIC_PARALLEL_INVOKE
 (
TBB_PREVIEW_VARIADIC_PARALLEL_INVOKE
 && 
__TBB_CPP11_VARIADIC_TEMPLATES_PRESENT
 && 
__TBB_CPP11_RVALUE_REF_PRESENT
)

	)

846 
	#__TBB_FLOW_GRAPH_CPP11_FEATURES
 (
__TBB_CPP11_VARIADIC_TEMPLATES_PRESENT
 \

847 && 
__TBB_CPP11_SMART_POINTERS_PRESENT
 && 
__TBB_CPP11_RVALUE_REF_PRESENT
 && 
__TBB_CPP11_AUTO_PRESENT
) \

848 && 
__TBB_CPP11_VARIADIC_TUPLE_PRESENT
 && 
__TBB_CPP11_DEFAULT_FUNC_TEMPLATE_ARGS_PRESENT
 \

849 && !
__TBB_UPCAST_OF_TUPLE_OF_REF_BROKEN


	)

850 
	#__TBB_PREVIEW_STREAMING_NODE
 (
__TBB_CPP11_VARIADIC_FIXED_LENGTH_EXP_PRESENT
 && 
__TBB_FLOW_GRAPH_CPP11_FEATURES
 \

851 && 
TBB_PREVIEW_FLOW_GRAPH_NODES
 && !
TBB_IMPLEMENT_CPP0X
 && !
__TBB_UPCAST_OF_TUPLE_OF_REF_BROKEN
)

	)

852 
	#__TBB_PREVIEW_OPENCL_NODE
 (
__TBB_PREVIEW_STREAMING_NODE
 && 
__TBB_CPP11_TEMPLATE_ALIASES_PRESENT
)

	)

853 
	#__TBB_PREVIEW_MESSAGE_BASED_KEY_MATCHING
 (
TBB_PREVIEW_FLOW_GRAPH_FEATURES
 || 
__TBB_PREVIEW_OPENCL_NODE
)

	)

854 
	#__TBB_PREVIEW_ASYNC_MSG
 (
TBB_PREVIEW_FLOW_GRAPH_FEATURES
 && 
__TBB_FLOW_GRAPH_CPP11_FEATURES
)

	)

857 #i‚de‡
__TBB_PREVIEW_FLOW_GRAPH_PRIORITIES


858 
	#__TBB_PREVIEW_FLOW_GRAPH_PRIORITIES
 
TBB_PREVIEW_FLOW_GRAPH_FEATURES


	)

862 #i‚de‡
__TBB_PREVIEW_RESUMABLE_TASKS


863 
	#__TBB_PREVIEW_RESUMABLE_TASKS
 ((
__TBB_CPF_BUILD
 || 
TBB_PREVIEW_RESUMABLE_TASKS
Ë&& !
__TBB_WIN8UI_SUPPORT
 && !
__ANDROID__
 && !
__TBB_ùf
)

	)

866 #i‚de‡
__TBB_PREVIEW_CRITICAL_TASKS


867 
	#__TBB_PREVIEW_CRITICAL_TASKS
 (
__TBB_CPF_BUILD
 || 
__TBB_PREVIEW_FLOW_GRAPH_PRIORITIES
 || 
__TBB_PREVIEW_RESUMABLE_TASKS
)

	)

870 #i‚de‡
__TBB_PREVIEW_FLOW_GRAPH_NODE_SET


871 
	#__TBB_PREVIEW_FLOW_GRAPH_NODE_SET
 (
TBB_PREVIEW_FLOW_GRAPH_FEATURES
 && 
__TBB_CPP11_PRESENT
 && 
__TBB_FLOW_GRAPH_CPP11_FEATURES
)

	)

	@/usr/include/tbb/tbb_exception.h

17 #i‚de‡
__TBB_ex˚±i⁄_H


18 
	#__TBB_ex˚±i⁄_H


	)

20 
	#__TBB_tbb_ex˚±i⁄_H_ö˛ude_¨ó


	)

21 
	~"öã∫Æ/_w¨nög_suµªss_íabÀ_nŸi˚.h
"

23 
	~"tbb_°ddef.h
"

24 
	~<ex˚±i⁄
>

25 
	~<√w
>

26 
	~<°rög
>

28 
«me•a˚
 
	gtbb
 {

31 ˛as†
	cbad_œ°_Æloc
 : 
public
 
°d
::
bad_Æloc
 {

32 
public
:

33 c⁄° * 
wh©
(Ëc⁄° 
throw
(Ë
__TBB_ovîride
;

34 #i‡
__TBB_DEFAULT_DTOR_THROW_SPEC_BROKEN


35 ~
bad_œ°_Æloc
(Ë
throw
(Ë
	g__TBB_ovîride
 {}

40 ˛as†
	c__TBB_DEPRECATED
 
	gim¥›î_lock
 : 
public
 
°d
::
ex˚±i⁄
 {

41 
public
:

42 c⁄° * 
wh©
(Ëc⁄° 
throw
(Ë
__TBB_ovîride
;

46 ˛as†
	cu£r_ab‹t
 : 
public
 
°d
::
ex˚±i⁄
 {

47 
public
:

48 c⁄° * 
wh©
(Ëc⁄° 
throw
(Ë
__TBB_ovîride
;

52 ˛as†
	cmissög_waô
 : 
public
 
°d
::
ex˚±i⁄
 {

53 
public
:

54 c⁄° * 
wh©
(Ëc⁄° 
throw
(Ë
__TBB_ovîride
;

58 ˛as†
	cövÆid_mu…ùÀ_schedulög
 : 
public
 
°d
::
ex˚±i⁄
 {

59 
public
:

60 c⁄° * 
wh©
(Ëc⁄° 
throw
(Ë
__TBB_ovîride
;

63 
«me•a˚
 
	göã∫Æ
 {

65 
__TBB_EXPORTED_FUNC
 
throw_bad_œ°_Æloc_ex˚±i⁄_v4
();

67 
	eex˚±i⁄_id
 {

68 
	geid_bad_Æloc
 = 1,

69 
	geid_bad_œ°_Æloc
,

70 
	geid_n⁄posôive_°ï
,

71 
	geid_out_of_ønge
,

72 
	geid_£gmít_ønge_îr‹
,

73 
	geid_ödex_ønge_îr‹
,

74 
	geid_missög_waô
,

75 
	geid_övÆid_mu…ùÀ_schedulög
,

76 
	geid_im¥›î_lock
,

77 
	geid_possibÀ_dódlock
,

78 
	geid_›î©i⁄_nŸ_≥rmôãd
,

79 
	geid_c⁄dv¨_waô_Áûed
,

80 
	geid_övÆid_lﬂd_Á˘‹
,

81 
	geid_ª£rved
,

82 
	geid_övÆid_sw≠
,

83 
	geid_ª£rv©i⁄_Àngth_îr‹
,

84 
	geid_övÆid_key
,

85 
	geid_u£r_ab‹t
,

86 
	geid_ª£rved1
,

87 #i‡
__TBB_SUPPORTS_WORKERS_WAITING_IN_TERMINATE


90 
	geid_blockög_thªad_joö_impossibÀ
 = 
eid_ª£rved1
,

92 
	geid_bad_ègged_msg_ˇ°
,

96 
	geid_max


102 
__TBB_EXPORTED_FUNC
 
throw_ex˚±i⁄_v4
 ( 
ex˚±i⁄_id
 );

105 
ölöe
 
throw_ex˚±i⁄
 ( 
ex˚±i⁄_id
 
eid
 ) { 
throw_ex˚±i⁄_v4
(eid); }

110 #i‡
__TBB_TASK_GROUP_CONTEXT


111 
	~"tbb_Æloˇt‹.h
"

112 
	~<ty≥öfo
>

114 
«me•a˚
 
	gtbb
 {

137 ˛as†
	c__TBB_DEPRECATED
 
	gtbb_ex˚±i⁄
 : 
public
 
°d
::
ex˚±i⁄


142 * 
›î©‹
 
√w
 ( 
size_t
 );

144 
	gpublic
:

145 #i‡
__˛™g__


150 ~
tbb_ex˚±i⁄
(Ë
throw
() { ; }

155 
vútuÆ
 
tbb_ex˚±i⁄
* 
move
(Ë
throw
() = 0;

160 
vútuÆ
 
de°roy
(Ë
throw
() = 0;

167 
vútuÆ
 
throw_£lf
() = 0;

170 
vútuÆ
 c⁄° * 
«me
(Ëc⁄° 
throw
() = 0;

173 
vútuÆ
 c⁄° * 
wh©
(Ëc⁄° 
throw
(Ë
	g__TBB_ovîride
 = 0;

181 
›î©‹
 
dñëe
 ( * 
p
 ) {

182 
	göã∫Æ
::
dóŒoˇã_vü_h™dÀr_v3
(
p
);

191 ˛as†
	c__TBB_DEPRECATED
 
	gˇ±uªd_ex˚±i⁄
 : 
public
 
tbb_ex˚±i⁄


193 
public
:

194 
ˇ±uªd_ex˚±i⁄
–c⁄° c≠tuªd_ex˚±i⁄& 
§c
 )

195 : 
tbb_ex˚±i⁄
(
§c
), 
my_dy«mic
(
Ál£
)

197 
£t
(
§c
.
my_ex˚±i⁄_«me
, src.
my_ex˚±i⁄_öfo
);

200 
ˇ±uªd_ex˚±i⁄
–c⁄° * 
«me_
, c⁄° * 
öfo
 )

201 : 
my_dy«mic
(
Ál£
)

203 
£t
(
«me_
, 
öfo
);

206 
	g__TBB_EXPORTED_METHOD
 ~
ˇ±uªd_ex˚±i⁄
(Ë
throw
();

208 
	gˇ±uªd_ex˚±i⁄
& 
	g›î©‹
–c⁄° 
ˇ±uªd_ex˚±i⁄
& 
§c
 ) {

209 i‡–
this
 !&
§c
 ) {

210 
˛ór
();

211 
£t
(
§c
.
my_ex˚±i⁄_«me
, src.
my_ex˚±i⁄_öfo
);

213  *
	gthis
;

216 
ˇ±uªd_ex˚±i⁄
* 
__TBB_EXPORTED_METHOD
 
move
(Ë
throw
(Ë
	g__TBB_ovîride
;

218 
__TBB_EXPORTED_METHOD
 
de°roy
(Ë
throw
(Ë
	g__TBB_ovîride
;

220 
throw_£lf
(Ë
	g__TBB_ovîride
 { 
__TBB_THROW
(*
this
); }

222 c⁄° * 
__TBB_EXPORTED_METHOD
 
«me
(Ëc⁄° 
throw
(Ë
	g__TBB_ovîride
;

224 c⁄° * 
__TBB_EXPORTED_METHOD
 
wh©
(Ëc⁄° 
throw
(Ë
	g__TBB_ovîride
;

226 
__TBB_EXPORTED_METHOD
 
£t
–c⁄° * 
«me
, c⁄° * 
öfo
 ) 
throw
();

227 
__TBB_EXPORTED_METHOD
 
˛ór
(Ë
throw
();

229 
	g¥iv©e
:

231 
ˇ±uªd_ex˚±i⁄
(Ë: 
my_dy«mic
(), 
my_ex˚±i⁄_«me
(), 
my_ex˚±i⁄_öfo
() {}

234 
ˇ±uªd_ex˚±i⁄
* 
Æloˇã
–c⁄° * 
«me
, c⁄° * 
öfo
 );

236 
boﬁ
 
	gmy_dy«mic
;

237 c⁄° * 
	gmy_ex˚±i⁄_«me
;

238 c⁄° * 
	gmy_ex˚±i⁄_öfo
;

246 
	gãm∂©e
<
ty≥«me
 
	gEx˚±i⁄D©a
>

247 ˛as†
	c__TBB_DEPRECATED
 
	gmovabÀ_ex˚±i⁄
 : 
public
 
tbb_ex˚±i⁄


249 
movabÀ_ex˚±i⁄
<
	tEx˚±i⁄D©a
> 
	t£lf_ty≥
;

251 
	gpublic
:

252 
movabÀ_ex˚±i⁄
–c⁄° 
Ex˚±i⁄D©a
& 
d©a_
 )

253 : 
my_ex˚±i⁄_d©a
(
d©a_
)

254 , 
my_dy«mic
(
Ál£
)

255 , 
my_ex˚±i⁄_«me
(

256 #i‡
TBB_USE_EXCEPTIONS


257 
ty≥id
(
£lf_ty≥
).
«me
()

264 
movabÀ_ex˚±i⁄
–c⁄° movabÀ_ex˚±i⁄& 
§c
 ) 
throw
 ()

265 : 
tbb_ex˚±i⁄
(
§c
)

266 , 
my_ex˚±i⁄_d©a
(
§c
.my_exception_data)

267 , 
my_dy«mic
(
Ál£
)

268 , 
my_ex˚±i⁄_«me
(
§c
.my_exception_name)

271 ~
movabÀ_ex˚±i⁄
(Ë
throw
() {}

273 c⁄° 
	gmovabÀ_ex˚±i⁄
& 
	g›î©‹
–c⁄° 
movabÀ_ex˚±i⁄
& 
§c
 ) {

274 i‡–
this
 !&
§c
 ) {

275 
my_ex˚±i⁄_d©a
 = 
§c
.my_exception_data;

276 
	gmy_ex˚±i⁄_«me
 = 
§c
.
my_ex˚±i⁄_«me
;

278  *
	gthis
;

281 
	gEx˚±i⁄D©a
& 
d©a
(Ë
throw
(Ë{  
	gmy_ex˚±i⁄_d©a
; }

283 c⁄° 
	gEx˚±i⁄D©a
& 
d©a
(Ëc⁄° 
throw
(Ë{  
	gmy_ex˚±i⁄_d©a
; }

285 c⁄° * 
«me
(Ëc⁄° 
throw
(Ë
	g__TBB_ovîride
 {  
	gmy_ex˚±i⁄_«me
; }

287 c⁄° * 
wh©
(Ëc⁄° 
throw
(Ë
	g__TBB_ovîride
 {  "tbb::movable_exception"; }

289 
movabÀ_ex˚±i⁄
* 
move
(Ë
throw
(Ë
	g__TBB_ovîride
 {

290 * 
	ge
 = 
öã∫Æ
::
Æloˇã_vü_h™dÀr_v3
((
movabÀ_ex˚±i⁄
));

291 i‡–
	ge
 ) {

292 ::
√w
 (
e
Ë
movabÀ_ex˚±i⁄
(*
this
);

293 ((
	gmovabÀ_ex˚±i⁄
*)
	ge
)->
	gmy_dy«mic
 = 
åue
;

295  (
	gmovabÀ_ex˚±i⁄
*)
	ge
;

297 
de°roy
(Ë
throw
(Ë
	g__TBB_ovîride
 {

298 
__TBB_ASSERT
 ( 
my_dy«mic
, "Method destroy can be called only on dynamicallyállocated movable_exceptions" );

299 i‡–
	gmy_dy«mic
 ) {

300 
	gthis
->~
movabÀ_ex˚±i⁄
();

301 
	göã∫Æ
::
dóŒoˇã_vü_h™dÀr_v3
(
this
);

304 
throw_£lf
(Ë
	g__TBB_ovîride
 { 
__TBB_THROW
–*
this
 ); }

306 
	g¥Ÿe˘ed
:

308 
Ex˚±i⁄D©a
 
my_ex˚±i⁄_d©a
;

310 
	g¥iv©e
:

312 
boﬁ
 
my_dy«mic
;

316 c⁄° * 
	gmy_ex˚±i⁄_«me
;

319 #i‡!
TBB_USE_CAPTURED_EXCEPTION


320 
«me•a˚
 
	göã∫Æ
 {

325 ˛as†
	ctbb_ex˚±i⁄_±r
 {

326 
	g°d
::
ex˚±i⁄_±r
 
my_±r
;

328 
	gpublic
:

329 
tbb_ex˚±i⁄_±r
* 
Æloˇã
();

330 
tbb_ex˚±i⁄_±r
* 
Æloˇã
–c⁄° 
tbb_ex˚±i⁄
& 
èg
 );

332 
tbb_ex˚±i⁄_±r
* 
Æloˇã
–
ˇ±uªd_ex˚±i⁄
& 
§c
 );

336 
de°roy
(Ë
throw
();

339 
throw_£lf
(Ë{ 
	g°d
::
ªthrow_ex˚±i⁄
(
my_±r
); }

341 
	g¥iv©e
:

342 
tbb_ex˚±i⁄_±r
–c⁄° 
°d
::
ex˚±i⁄_±r
& 
§c
 ) : 
my_±r
(src) {}

343 
tbb_ex˚±i⁄_±r
–c⁄° 
ˇ±uªd_ex˚±i⁄
& 
§c
 ) :

344 #i‡
__TBB_MAKE_EXCEPTION_PTR_PRESENT


345 
my_±r
(
°d
::
make_ex˚±i⁄_±r
(
§c
))

347 
my_±r
(
°d
::
c›y_ex˚±i⁄
(
§c
))

359 
	~"öã∫Æ/_w¨nög_suµªss_dißbÀ_nŸi˚.h
"

360 #unde‡
__TBB_tbb_ex˚±i⁄_H_ö˛ude_¨ó


	@/usr/include/tbb/tbb_machine.h

17 #i‚de‡
__TBB_machöe_H


18 
	#__TBB_machöe_H


	)

113 
	~"tbb_°ddef.h
"

115 
«me•a˚
 
	gtbb
 {

116 
«me•a˚
 
	göã∫Æ
 {

124 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
	g°d
::
size_t
 
S
>

125 
machöe_lﬂd_°‹e
;

127 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
	g°d
::
size_t
 
S
>

128 
machöe_lﬂd_°‹e_ªœxed
;

130 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
	g°d
::
size_t
 
S
>

131 
machöe_lﬂd_°‹e_£q_c°
;

136 
	gãm∂©e
<
size_t
 
	gS
> 
	g©omic_£À˘‹
;

138 
	gãm∂©e
<> 
	g©omic_£À˘‹
<1> {

139 
öt8_t
 
	tw‹d
;

140 
ölöe
 
w‹d
 
„tch_°‹e
 ( vﬁ©ûê* 
loˇti⁄
, w‹d 
vÆue
 );

143 
	gãm∂©e
<> 
	g©omic_£À˘‹
<2> {

144 
öt16_t
 
	tw‹d
;

145 
ölöe
 
w‹d
 
„tch_°‹e
 ( vﬁ©ûê* 
loˇti⁄
, w‹d 
vÆue
 );

148 
	gãm∂©e
<> 
	g©omic_£À˘‹
<4> {

149 #i‡
_MSC_VER
 && !
_WIN64


151 
öçå_t
 
	tw‹d
;

153 
öt32_t
 
	tw‹d
;

155 
ölöe
 
w‹d
 
„tch_°‹e
 ( vﬁ©ûê* 
loˇti⁄
, w‹d 
vÆue
 );

158 
	gãm∂©e
<> 
	g©omic_£À˘‹
<8> {

159 
öt64_t
 
	tw‹d
;

160 
ölöe
 
w‹d
 
„tch_°‹e
 ( vﬁ©ûê* 
loˇti⁄
, w‹d 
vÆue
 );

165 
	#__TBB_MACHINE_DEFINE_STORE8_GENERIC_FENCED
(
M
) \

166 
ölöe
 
__TBB_machöe_gíîic_°‹e8
##
	`M
(vﬁ©ûê*
±r
, 
öt64_t
 
vÆue
) { \

168 
öt64_t
 
ªsu…
 = *(vﬁ©ûêöt64_à*)
±r
; \

169 if–
__TBB_machöe_cmpswp8
##
	`M
(
±r
,
vÆue
,
ªsu…
)==result ) ; \

172 

	)

173 
	#__TBB_MACHINE_DEFINE_LOAD8_GENERIC_FENCED
(
M
) \

174 
ölöe
 
öt64_t
 
__TBB_machöe_gíîic_lﬂd8
##
	`M
(c⁄° vﬁ©ûê*
±r
) { \

177 c⁄° 
öt64_t
 
™yvÆue
 = 2305843009213693951LL; \

178  
__TBB_machöe_cmpswp8
##
	`M
(
c⁄°_ˇ°
<vﬁ©ûê*>(
±r
),
™yvÆue
,anyvalue); \

180 

	)

182 
	#__TBB_ENDIAN_UNSUPPORTED
 -1

	)

183 
	#__TBB_ENDIAN_LITTLE
 0

	)

184 
	#__TBB_ENDIAN_BIG
 1

	)

185 
	#__TBB_ENDIAN_DETECT
 2

	)

187 #i‡
_WIN32
||
_WIN64


189 #ifde‡
_MANAGED


190 #¥agm®
m™aged
(
push
, 
off
)

193 #i‡
__MINGW64__
 || 
__MINGW32__


194 "C" 
	$__de˛•ec
(
dŒimp‹t
Ë
__°dˇŒ
 
	`SwôchToThªad
( );

195 
	#__TBB_Yõld
(Ë
	`SwôchToThªad
()

	)

196 #i‡(
TBB_USE_GCC_BUILTINS
 && 
__TBB_GCC_BUILTIN_ATOMICS_PRESENT
)

197 
	~"machöe/gcc_gíîic.h
"

198 #ñi‡
__MINGW64__


199 
	~"machöe/löux_öãl64.h
"

200 #ñi‡
__MINGW32__


201 
	~"machöe/löux_ü32.h
"

203 #ñi‡(
TBB_USE_ICC_BUILTINS
 && 
__TBB_ICC_BUILTIN_ATOMICS_PRESENT
)

204 
	~"machöe/icc_gíîic.h
"

205 #ñi‡
	`deföed
(
_M_IX86
Ë&& !deföed(
__TBB_WIN32_USE_CL_BUILTINS
)

206 
	~"machöe/wödows_ü32.h
"

207 #ñi‡
	`deföed
(
_M_X64
)

208 
	~"machöe/wödows_öãl64.h
"

209 #ñi‡
	`deföed
(
_M_ARM
Ë|| deföed(
__TBB_WIN32_USE_CL_BUILTINS
)

210 
	~"machöe/msvc_¨mv7.h
"

213 #ifde‡
_MANAGED


214 #¥agm®
	`m™aged
(
p›
)

217 #ñi‡
__TBB_DEFINE_MIC


219 
	~"machöe/mic_comm⁄.h
"

220 #i‡(
TBB_USE_ICC_BUILTINS
 && 
__TBB_ICC_BUILTIN_ATOMICS_PRESENT
)

221 
	~"machöe/icc_gíîic.h
"

223 
	~"machöe/löux_öãl64.h
"

226 #ñi‡
__löux__
 || 
__FªeBSD__
 || 
__NëBSD__
 || 
__O≥nBSD__


228 #i‚de‡
TBB_USE_GCC_BUILTINS


229 
	#TBB_USE_GCC_BUILTINS
 1

	)

231 #i‡(
TBB_USE_GCC_BUILTINS
 && 
__TBB_GCC_BUILTIN_ATOMICS_PRESENT
)

232 
	~"machöe/gcc_gíîic.h
"

233 #ñi‡(
TBB_USE_ICC_BUILTINS
 && 
__TBB_ICC_BUILTIN_ATOMICS_PRESENT
)

234 
	~"machöe/icc_gíîic.h
"

235 #ñi‡
__i386__


236 
	~"machöe/löux_ü32.h
"

237 #ñi‡
__x86_64__


238 
	~"machöe/löux_öãl64.h
"

239 #ñi‡
__ü64__


240 
	~"machöe/löux_ü64.h
"

241 #ñi‡
__powîpc__


242 
	~"machöe/mac_µc.h
"

243 #ñi‡
__ARM_ARCH_7A__
 || 
__Ørch64__


244 
	~"machöe/gcc_¨m.h
"

245 #ñi‡
__TBB_GCC_BUILTIN_ATOMICS_PRESENT


246 
	~"machöe/gcc_gíîic.h
"

248 
	~"machöe/löux_comm⁄.h
"

250 #ñi‡
__APPLE__


252 #i‡(
TBB_USE_ICC_BUILTINS
 && 
__TBB_ICC_BUILTIN_ATOMICS_PRESENT
)

253 
	~"machöe/icc_gíîic.h
"

254 #ñi‡
__TBB_x86_32


255 
	~"machöe/löux_ü32.h
"

256 #ñi‡
__TBB_x86_64


257 
	~"machöe/löux_öãl64.h
"

258 #ñi‡
__POWERPC__


259 
	~"machöe/mac_µc.h
"

261 
	~"machöe/macos_comm⁄.h
"

263 #ñi‡
_AIX


265 
	~"machöe/ibm_aix51.h
"

267 #ñi‡
__sun
 || 
__SUNPRO_CC


269 
	#__asm__
 
asm


	)

270 
	#__vﬁ©ûe__
 vﬁ©ûe

	)

272 #i‡
__i386
 || 
__i386__


273 
	~"machöe/löux_ü32.h
"

274 #ñi‡
__x86_64__


275 
	~"machöe/löux_öãl64.h
"

276 #ñi‡
__•¨c


277 
	~"machöe/sunos_•¨c.h
"

279 
	~<sched.h
>

281 
	#__TBB_Yõld
(Ë
	`sched_yõld
()

	)

285 #i‚de‡
__TBB_64BIT_ATOMICS


286 
	#__TBB_64BIT_ATOMICS
 1

	)

292 #i‡
__TBB_USE_FENCED_ATOMICS


293 
	#__TBB_machöe_cmpswp1
 
__TBB_machöe_cmpswp1fuŒ_„n˚


	)

294 
	#__TBB_machöe_cmpswp2
 
__TBB_machöe_cmpswp2fuŒ_„n˚


	)

295 
	#__TBB_machöe_cmpswp4
 
__TBB_machöe_cmpswp4fuŒ_„n˚


	)

296 
	#__TBB_machöe_cmpswp8
 
__TBB_machöe_cmpswp8fuŒ_„n˚


	)

298 #i‡
__TBB_WORDSIZE
==8

299 
	#__TBB_machöe_„tchadd8
 
__TBB_machöe_„tchadd8fuŒ_„n˚


	)

300 
	#__TBB_machöe_„tch°‹e8
 
__TBB_machöe_„tch°‹e8fuŒ_„n˚


	)

301 
	#__TBB_FëchAndAddWªÀa£
(
P
,
V
Ë
	`__TBB_machöe_„tchadd8ªÀa£
(P,V)

	)

302 
	#__TBB_FëchAndIn¸emítWacquúe
(
P
Ë
	`__TBB_machöe_„tchadd8acquúe
(P,1)

	)

303 
	#__TBB_FëchAndDe¸emítWªÀa£
(
P
Ë
	`__TBB_machöe_„tchadd8ªÀa£
(P,(-1))

	)

305 
	#__TBB_machöe_„tchadd4
 
__TBB_machöe_„tchadd4fuŒ_„n˚


	)

306 
	#__TBB_machöe_„tch°‹e4
 
__TBB_machöe_„tch°‹e4fuŒ_„n˚


	)

307 
	#__TBB_FëchAndAddWªÀa£
(
P
,
V
Ë
	`__TBB_machöe_„tchadd4ªÀa£
(P,V)

	)

308 
	#__TBB_FëchAndIn¸emítWacquúe
(
P
Ë
	`__TBB_machöe_„tchadd4acquúe
(P,1)

	)

309 
	#__TBB_FëchAndDe¸emítWªÀa£
(
P
Ë
	`__TBB_machöe_„tchadd4ªÀa£
(P,(-1))

	)

312 
	#__TBB_FëchAndAddWªÀa£
(
P
,
V
Ë
	`__TBB_FëchAndAddW
(P,V)

	)

313 
	#__TBB_FëchAndIn¸emítWacquúe
(
P
Ë
	`__TBB_FëchAndAddW
(P,1)

	)

314 
	#__TBB_FëchAndDe¸emítWªÀa£
(
P
Ë
	`__TBB_FëchAndAddW
(P,(-1))

	)

317 #i‡
__TBB_WORDSIZE
==4

318 
	#__TBB_Com∑ªAndSw≠W
(
P
,
V
,
C
Ë
	`__TBB_machöe_cmpswp4
(P,V,C)

	)

319 
	#__TBB_FëchAndAddW
(
P
,
V
Ë
	`__TBB_machöe_„tchadd4
(P,V)

	)

320 
	#__TBB_FëchAndSt‹eW
(
P
,
V
Ë
	`__TBB_machöe_„tch°‹e4
(P,V)

	)

321 #ñi‡ 
__TBB_WORDSIZE
==8

322 #i‡
__TBB_USE_GENERIC_DWORD_LOAD_STORE
 || 
__TBB_USE_GENERIC_DWORD_FETCH_ADD
 || 
__TBB_USE_GENERIC_DWORD_FETCH_STORE


323 #îr‹ 
The£
 
ma¸os
 
should
 
⁄ly
 
be
 
u£d
 
⁄
 32-
bô
 
∂©f‹ms
.

326 
	#__TBB_Com∑ªAndSw≠W
(
P
,
V
,
C
Ë
	`__TBB_machöe_cmpswp8
(P,V,C)

	)

327 
	#__TBB_FëchAndAddW
(
P
,
V
Ë
	`__TBB_machöe_„tchadd8
(P,V)

	)

328 
	#__TBB_FëchAndSt‹eW
(
P
,
V
Ë
	`__TBB_machöe_„tch°‹e8
(P,V)

	)

330 #îr‹ 
Unsuµ‹ãd
 
machöe
 
w‹d
 
size
.

333 #i‚de‡
__TBB_Pau£


334 
ölöe
 
	$__TBB_Pau£
(
öt32_t
) {

335 
	`__TBB_Yõld
();

336 
	}
}

339 
«me•a˚
 
	gtbb
 {

342 
ölöe
 
©omic_„n˚
 (Ë{ 
__TBB_fuŒ_mem‹y_„n˚
(); }

344 
«me•a˚
 
	göã∫Æ
 {

348 ˛as†
	c©omic_backoff
 : 
no_c›y
 {

352 c⁄° 
öt32_t
 
LOOPS_BEFORE_YIELD
 = 16;

353 
öt32_t
 
	gcou¡
;

354 
	gpublic
:

358 
©omic_backoff
(Ë: 
cou¡
(1) {}

360 
©omic_backoff
–
boﬁ
 ) : 
cou¡
(1Ë{ 
∑u£
(); }

363 
∑u£
() {

364 if–
	gcou¡
<=
LOOPS_BEFORE_YIELD
 ) {

365 
__TBB_Pau£
(
cou¡
);

367 
	gcou¡
*=2;

370 
__TBB_Yõld
();

375 
boﬁ
 
bounded_∑u£
() {

376 
__TBB_Pau£
(
cou¡
);

377 if–
	gcou¡
<
	gLOOPS_BEFORE_YIELD
 ) {

379 
	gcou¡
*=2;

380  
	gåue
;

382  
	gÁl£
;

386 
ª£t
() {

387 
	gcou¡
 = 1;

393 
	gãm∂©e
<
ty≥«me
 
	gT
,Åy≥«mê
	gU
>

394 
•ö_waô_whûe_eq
–c⁄° vﬁ©ûê
T
& 
loˇti⁄
, 
U
 
vÆue
 ) {

395 
©omic_backoff
 
	gbackoff
;

396  
	gloˇti⁄
==
vÆue
 ) 
backoff
.
∑u£
();

401 
	gãm∂©e
<
ty≥«me
 
	gT
,Åy≥«mê
	gU
>

402 
•ö_waô_u¡û_eq
–c⁄° vﬁ©ûê
T
& 
loˇti⁄
, c⁄° 
U
 
vÆue
 ) {

403 
©omic_backoff
 
	gbackoff
;

404  
	gloˇti⁄
!=
vÆue
 ) 
backoff
.
∑u£
();

407 
	gãm∂©e
 <
ty≥«me
 
	g¥ediˇã_ty≥
>

408 
•ö_waô_whûe
(
¥ediˇã_ty≥
 
c⁄dôi⁄
){

409 
©omic_backoff
 
	gbackoff
;

410  
c⁄dôi⁄
(ËË
	gbackoff
.
∑u£
();

416 #i‚de‡
__TBB_ENDIANNESS


417 
	#__TBB_ENDIANNESS
 
__TBB_ENDIAN_DETECT


	)

420 #i‡
__TBB_USE_GENERIC_PART_WORD_CAS
 && 
__TBB_ENDIANNESS
==
__TBB_ENDIAN_UNSUPPORTED


421 #îr‹ 
Gíîic
 
im∂emíèti⁄
 
of
 
∑π
-
w‹d
 
CAS
 
may
 
nŸ
 
be
 
u£d
 
wôh
 
__TBB_ENDIAN_UNSUPPORTED


424 #i‡
__TBB_ENDIANNESS
!=
__TBB_ENDIAN_UNSUPPORTED


434 
	gãm∂©e
<
ty≥«me
 
	gT
>

435 
ölöe
 
T
 
__TBB_MaskedCom∑ªAndSw≠
 (vﬁ©ûêT * c⁄° 
±r
, c⁄° T 
vÆue
, c⁄° T 
com∑ønd
 ) {

436 
	sídü¬ess
{ 
boﬁ
 
is_big_ídün
(){

437 #i‡
__TBB_ENDIANNESS
==
__TBB_ENDIAN_DETECT


438 c⁄° 
uöt32_t
 
	g¥obe
 = 0x03020100;

439  (((c⁄° *)(&
	g¥obe
))[0]==0x03);

440 #ñi‡
__TBB_ENDIANNESS
==
__TBB_ENDIAN_BIG
 || __TBB_ENDIANNESS==
__TBB_ENDIAN_LITTLE


441  
	g__TBB_ENDIANNESS
==
__TBB_ENDIAN_BIG
;

443 #îr‹ 
U√x≥˘ed
 
vÆue
 
of
 
__TBB_ENDIANNESS


447 c⁄° 
uöt32_t
 
	gbyã_off£t
 = (uöt32_tË((
uöçå_t
)
±r
 & 0x3);

448 vﬁ©ûê
uöt32_t
 * c⁄° 
	gÆig√d_±r
 = (uöt32_t*)((
uöçå_t
)
±r
 - 
byã_off£t
 );

451 c⁄° 
uöt32_t
 
	gbôs_to_shi·
 = 8*(
ídü¬ess
::
is_big_ídün
(Ë? (4 - (
T
Ë- (
byã_off£t
)) : byte_offset);

452 c⁄° 
uöt32_t
 
	gmask
 = (((uöt32_t)1<<((
T
)*8)Ë- 1 )<<
bôs_to_shi·
;

454 c⁄° 
uöt32_t
 
	gshi·ed_com∑ønd
 = ((uöt32_t)
com∑ønd
 << 
bôs_to_shi·
)&
mask
;

455 c⁄° 
uöt32_t
 
	gshi·ed_vÆue
 = ((uöt32_t)
vÆue
 << 
bôs_to_shi·
)&
mask
;

457  
©omic_backoff
 
	gb
;;b.
∑u£
() ) {

458 c⁄° 
uöt32_t
 
	gsuºoundögs
 = *
Æig√d_±r
 & ~
mask
 ;

459 c⁄° 
uöt32_t
 
	gbig_com∑ønd
 = 
suºoundögs
 | 
shi·ed_com∑ønd
 ;

460 c⁄° 
uöt32_t
 
	gbig_vÆue
 = 
suºoundögs
 | 
shi·ed_vÆue
 ;

463 c⁄° 
uöt32_t
 
	gbig_ªsu…
 = (uöt32_t)
__TBB_machöe_cmpswp4
–
Æig√d_±r
, 
big_vÆue
, 
big_com∑ønd
 );

464 if–
	gbig_ªsu…
 =
big_com∑ønd


465 || ((
big_ªsu…
 ^ 
big_com∑ønd
Ë& 
mask
) != 0)

467  
T
((
big_ªsu…
 & 
mask
Ë>> 
bôs_to_shi·
);

475 
	gãm∂©e
<
size_t
 
	gS
, 
ty≥«me
 
	gT
>

476 
ölöe
 
T
 
__TBB_Com∑ªAndSw≠Gíîic
 (vﬁ©ûê*
±r
, T 
vÆue
, T 
com∑ønd
 );

478 
	gãm∂©e
<>

479 
ölöe
 
öt8_t
 
	g__TBB_Com∑ªAndSw≠Gíîic
 <1,
	göt8_t
> (vﬁ©ûê*
	g±r
, i¡8_à
	gvÆue
, i¡8_à
	gcom∑ønd
 ) {

480 #i‡
__TBB_USE_GENERIC_PART_WORD_CAS


481  
	g__TBB_MaskedCom∑ªAndSw≠
<
	göt8_t
>((vﬁ©ûêöt8_à*)
	g±r
,
	gvÆue
,
	gcom∑ønd
);

483  
__TBB_machöe_cmpswp1
(
±r
,
vÆue
,
com∑ønd
);

487 
	gãm∂©e
<>

488 
ölöe
 
öt16_t
 
	g__TBB_Com∑ªAndSw≠Gíîic
 <2,
	göt16_t
> (vﬁ©ûê*
	g±r
, i¡16_à
	gvÆue
, i¡16_à
	gcom∑ønd
 ) {

489 #i‡
__TBB_USE_GENERIC_PART_WORD_CAS


490  
	g__TBB_MaskedCom∑ªAndSw≠
<
	göt16_t
>((vﬁ©ûêöt16_à*)
	g±r
,
	gvÆue
,
	gcom∑ønd
);

492  
__TBB_machöe_cmpswp2
(
±r
,
vÆue
,
com∑ønd
);

496 
	gãm∂©e
<>

497 
ölöe
 
öt32_t
 
	g__TBB_Com∑ªAndSw≠Gíîic
 <4,
	göt32_t
> (vﬁ©ûê*
	g±r
, i¡32_à
	gvÆue
, i¡32_à
	gcom∑ønd
 ) {

499  (
	göt32_t
)
__TBB_machöe_cmpswp4
(
±r
,
vÆue
,
com∑ønd
);

502 #i‡
__TBB_64BIT_ATOMICS


503 
	gãm∂©e
<>

504 
ölöe
 
öt64_t
 
	g__TBB_Com∑ªAndSw≠Gíîic
 <8,
	göt64_t
> (vﬁ©ûê*
	g±r
, i¡64_à
	gvÆue
, i¡64_à
	gcom∑ønd
 ) {

505  
__TBB_machöe_cmpswp8
(
±r
,
vÆue
,
com∑ønd
);

509 
	gãm∂©e
<
size_t
 
	gS
, 
ty≥«me
 
	gT
>

510 
ölöe
 
T
 
__TBB_FëchAndAddGíîic
 (vﬁ©ûê*
±r
, T 
addíd
) {

511 
T
 
	gªsu…
;

512  
©omic_backoff
 
	gb
;;b.
∑u£
() ) {

513 
	gªsu…
 = *
ªöãΩªt_ˇ°
<vﬁ©ûê
T
 *>(
±r
);

515 if–
	g__TBB_Com∑ªAndSw≠Gíîic
<
	gS
,
	gT
> ( 
	g±r
, 
	gªsu…
+
	gaddíd
,Ñesu… )==
ªsu…
 )

518  
	gªsu…
;

521 
	gãm∂©e
<
size_t
 
	gS
, 
ty≥«me
 
	gT
>

522 
ölöe
 
T
 
__TBB_FëchAndSt‹eGíîic
 (vﬁ©ûê*
±r
, T 
vÆue
) {

523 
T
 
	gªsu…
;

524  
©omic_backoff
 
	gb
;;b.
∑u£
() ) {

525 
	gªsu…
 = *
ªöãΩªt_ˇ°
<vﬁ©ûê
T
 *>(
±r
);

527 if–
	g__TBB_Com∑ªAndSw≠Gíîic
<
	gS
,
	gT
> ( 
	g±r
, 
	gvÆue
, 
	gªsu…
 )==
ªsu…
 )

530  
	gªsu…
;

533 #i‡
__TBB_USE_GENERIC_PART_WORD_CAS


534 
	#__TBB_machöe_cmpswp1
 
tbb
::
öã∫Æ
::
__TBB_Com∑ªAndSw≠Gíîic
<1,
öt8_t
>

	)

535 
	#__TBB_machöe_cmpswp2
 
tbb
::
öã∫Æ
::
__TBB_Com∑ªAndSw≠Gíîic
<2,
öt16_t
>

	)

538 #i‡
__TBB_USE_GENERIC_FETCH_ADD
 || 
__TBB_USE_GENERIC_PART_WORD_FETCH_ADD


539 
	#__TBB_machöe_„tchadd1
 
tbb
::
öã∫Æ
::
__TBB_FëchAndAddGíîic
<1,
öt8_t
>

	)

540 
	#__TBB_machöe_„tchadd2
 
tbb
::
öã∫Æ
::
__TBB_FëchAndAddGíîic
<2,
öt16_t
>

	)

543 #i‡
__TBB_USE_GENERIC_FETCH_ADD


544 
	#__TBB_machöe_„tchadd4
 
tbb
::
öã∫Æ
::
__TBB_FëchAndAddGíîic
<4,
öt32_t
>

	)

547 #i‡
__TBB_USE_GENERIC_FETCH_ADD
 || 
__TBB_USE_GENERIC_DWORD_FETCH_ADD


548 
	#__TBB_machöe_„tchadd8
 
tbb
::
öã∫Æ
::
__TBB_FëchAndAddGíîic
<8,
öt64_t
>

	)

551 #i‡
__TBB_USE_GENERIC_FETCH_STORE
 || 
__TBB_USE_GENERIC_PART_WORD_FETCH_STORE


552 
	#__TBB_machöe_„tch°‹e1
 
tbb
::
öã∫Æ
::
__TBB_FëchAndSt‹eGíîic
<1,
öt8_t
>

	)

553 
	#__TBB_machöe_„tch°‹e2
 
tbb
::
öã∫Æ
::
__TBB_FëchAndSt‹eGíîic
<2,
öt16_t
>

	)

556 #i‡
__TBB_USE_GENERIC_FETCH_STORE


557 
	#__TBB_machöe_„tch°‹e4
 
tbb
::
öã∫Æ
::
__TBB_FëchAndSt‹eGíîic
<4,
öt32_t
>

	)

560 #i‡
__TBB_USE_GENERIC_FETCH_STORE
 || 
__TBB_USE_GENERIC_DWORD_FETCH_STORE


561 
	#__TBB_machöe_„tch°‹e8
 
tbb
::
öã∫Æ
::
__TBB_FëchAndSt‹eGíîic
<8,
öt64_t
>

	)

564 #i‡
__TBB_USE_FETCHSTORE_AS_FULL_FENCED_STORE


565 
	#__TBB_MACHINE_DEFINE_ATOMIC_SELECTOR_FETCH_STORE
(
S
) \

566 
©omic_£À˘‹
<
S
>::
w‹d
átomic_£À˘‹<S>::
	`„tch_°‹e
 ( vﬁ©ûê* 
loˇti⁄
, w‹d 
vÆue
 ) { \

567  
__TBB_machöe_„tch°‹e
##
	`S
–
loˇti⁄
, 
vÆue
 ); \

568 }

	)

570 
__TBB_MACHINE_DEFINE_ATOMIC_SELECTOR_FETCH_STORE
(1)

571 
__TBB_MACHINE_DEFINE_ATOMIC_SELECTOR_FETCH_STORE
(2)

572 
__TBB_MACHINE_DEFINE_ATOMIC_SELECTOR_FETCH_STORE
(4)

573 
__TBB_MACHINE_DEFINE_ATOMIC_SELECTOR_FETCH_STORE
(8)

575 #unde‡
__TBB_MACHINE_DEFINE_ATOMIC_SELECTOR_FETCH_STORE


578 #i‡
__TBB_USE_GENERIC_DWORD_LOAD_STORE


580 #i‡! 
__TBB_USE_FENCED_ATOMICS


583 
	#__TBB_machöe_cmpswp8fuŒ_„n˚
 
__TBB_machöe_cmpswp8


	)

585 
__TBB_MACHINE_DEFINE_LOAD8_GENERIC_FENCED
(
fuŒ_„n˚
)

586 
__TBB_MACHINE_DEFINE_STORE8_GENERIC_FENCED
(
fuŒ_„n˚
)

588 #i‡! 
__TBB_USE_FENCED_ATOMICS


589 #unde‡
__TBB_machöe_cmpswp8fuŒ_„n˚


592 
	#__TBB_machöe_°‹e8
 
tbb
::
öã∫Æ
::
__TBB_machöe_gíîic_°‹e8fuŒ_„n˚


	)

593 
	#__TBB_machöe_lﬂd8
 
tbb
::
öã∫Æ
::
__TBB_machöe_gíîic_lﬂd8fuŒ_„n˚


	)

596 #i‡
__TBB_USE_GENERIC_HALF_FENCED_LOAD_STORE


607 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
size_t
 
	gS
>

608 
	smachöe_lﬂd_°‹e
 {

609 
T
 
lﬂd_wôh_acquúe
 ( c⁄° vﬁ©ûêT& 
loˇti⁄
 ) {

610 
T
 
	gto_ªtu∫
 = 
loˇti⁄
;

611 
__TBB_acquúe_c⁄si°ícy_hñ≥r
();

612  
	gto_ªtu∫
;

614 
°‹e_wôh_ªÀa£
 ( vﬁ©ûê
T
 &
loˇti⁄
, T 
vÆue
 ) {

615 
__TBB_ªÀa£_c⁄si°ícy_hñ≥r
();

616 
	gloˇti⁄
 = 
vÆue
;

621 #i‡
__TBB_WORDSIZE
==4 && 
__TBB_64BIT_ATOMICS


622 
	gãm∂©e
 <
ty≥«me
 
	gT
>

623 
	gmachöe_lﬂd_°‹e
<
	gT
,8> {

624 
T
 
lﬂd_wôh_acquúe
 ( c⁄° vﬁ©ûêT& 
loˇti⁄
 ) {

625  (
	gT
)
__TBB_machöe_lﬂd8
–(c⁄° vﬁ©ûê*)&
loˇti⁄
 );

627 
°‹e_wôh_ªÀa£
 ( vﬁ©ûê
T
& 
loˇti⁄
, T 
vÆue
 ) {

628 
__TBB_machöe_°‹e8
–(vﬁ©ûê*)&
loˇti⁄
, (
öt64_t
)
vÆue
 );

634 #i‡
__TBB_USE_GENERIC_SEQUENTIAL_CONSISTENCY_LOAD_STORE


635 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
size_t
 
	gS
>

636 
	smachöe_lﬂd_°‹e_£q_c°
 {

637 
T
 
lﬂd
 ( c⁄° vﬁ©ûêT& 
loˇti⁄
 ) {

638 
__TBB_fuŒ_mem‹y_„n˚
();

639  
	gmachöe_lﬂd_°‹e
<
	gT
,
	gS
>::
lﬂd_wôh_acquúe
–
loˇti⁄
 );

641 #i‡
__TBB_USE_FETCHSTORE_AS_FULL_FENCED_STORE


642 
°‹e
 ( vﬁ©ûê
T
 &
loˇti⁄
, T 
vÆue
 ) {

643 
	g©omic_£À˘‹
<
	gS
>::
„tch_°‹e
–(vﬁ©ûê*)&
loˇti⁄
, (
ty≥«me
 
©omic_£À˘‹
<
S
>::
w‹d
)
vÆue
 );

646 
°‹e
 ( vﬁ©ûê
T
 &
loˇti⁄
, T 
vÆue
 ) {

647 
	gmachöe_lﬂd_°‹e
<
	gT
,
	gS
>::
°‹e_wôh_ªÀa£
–
loˇti⁄
, 
vÆue
 );

648 
__TBB_fuŒ_mem‹y_„n˚
();

653 #i‡
__TBB_WORDSIZE
==4 && 
__TBB_64BIT_ATOMICS


656 
	gãm∂©e
 <
ty≥«me
 
	gT
>

657 
	gmachöe_lﬂd_°‹e_£q_c°
<
	gT
,8> {

658 
T
 
lﬂd
 ( c⁄° vﬁ©ûêT& 
loˇti⁄
 ) {

661 c⁄° 
öt64_t
 
	g™yvÆue
 = 2305843009213693951LL;

662  
__TBB_machöe_cmpswp8
–(vﬁ©ûê*)
c⁄°_ˇ°
<vﬁ©ûê
T
*>(&
loˇti⁄
), 
™yvÆue
,ányvalue );

664 
°‹e
 ( vﬁ©ûê
T
 &
loˇti⁄
, T 
vÆue
 ) {

665 #i‡
__TBB_GCC_VERSION
 >= 40702

666 #¥agm®
GCC
 
dügno°ic
 
push


667 #¥agm®
GCC
 
dügno°ic
 
ign‹ed
 "-Wmaybe-uninitialized"

670 
öt64_t
 
	gªsu…
 = (vﬁ©ûêöt64_t&)
loˇti⁄
;

671 #i‡
__TBB_GCC_VERSION
 >= 40702

672 #¥agm®
GCC
 
dügno°ic
 
p›


674  
__TBB_machöe_cmpswp8
((vﬁ©ûê*)&
loˇti⁄
, (
öt64_t
)
vÆue
, 
ªsu…
) !=Ñesult )

675 
ªsu…
 = (vﬁ©ûê
öt64_t
&)
loˇti⁄
;

681 #i‡
__TBB_USE_GENERIC_RELAXED_LOAD_STORE


686 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
size_t
 
	gS
>

687 
	smachöe_lﬂd_°‹e_ªœxed
 {

688 
ölöe
 
T
 
lﬂd
 ( c⁄° vﬁ©ûêT& 
loˇti⁄
 ) {

689  
	gloˇti⁄
;

691 
ölöe
 
°‹e
 ( vﬁ©ûê
T
& 
loˇti⁄
, T 
vÆue
 ) {

692 
	gloˇti⁄
 = 
vÆue
;

696 #i‡
__TBB_WORDSIZE
==4 && 
__TBB_64BIT_ATOMICS


697 
	gãm∂©e
 <
ty≥«me
 
	gT
>

698 
	gmachöe_lﬂd_°‹e_ªœxed
<
	gT
,8> {

699 
ölöe
 
T
 
lﬂd
 ( c⁄° vﬁ©ûêT& 
loˇti⁄
 ) {

700  (
	gT
)
__TBB_machöe_lﬂd8
–(c⁄° vﬁ©ûê*)&
loˇti⁄
 );

702 
ölöe
 
°‹e
 ( vﬁ©ûê
T
& 
loˇti⁄
, T 
vÆue
 ) {

703 
__TBB_machöe_°‹e8
–(vﬁ©ûê*)&
loˇti⁄
, (
öt64_t
)
vÆue
 );

709 #unde‡
__TBB_WORDSIZE


711 
	gãm∂©e
<
ty≥«me
 
	gT
>

712 
ölöe
 
T
 
__TBB_lﬂd_wôh_acquúe
(c⁄° vﬁ©ûêT &
loˇti⁄
) {

713  
	gmachöe_lﬂd_°‹e
<
	gT
,(T)>::
lﬂd_wôh_acquúe
–
loˇti⁄
 );

715 
	gãm∂©e
<
ty≥«me
 
	gT
,Åy≥«mê
	gV
>

716 
ölöe
 
__TBB_°‹e_wôh_ªÀa£
(vﬁ©ûê
T
& 
loˇti⁄
, 
V
 
vÆue
) {

717 
	gmachöe_lﬂd_°‹e
<
	gT
,(T)>::
°‹e_wôh_ªÀa£
–
loˇti⁄
, 
T
(
vÆue
) );

720 
ölöe
 
__TBB_°‹e_wôh_ªÀa£
(vﬁ©ûê
size_t
& 
loˇti⁄
, size_à
vÆue
) {

721 
	gmachöe_lﬂd_°‹e
<
	gsize_t
,(size_t)>::
°‹e_wôh_ªÀa£
–
loˇti⁄
, 
vÆue
 );

724 
	gãm∂©e
<
ty≥«me
 
	gT
>

725 
ölöe
 
T
 
__TBB_lﬂd_fuŒ_„n˚
(c⁄° vﬁ©ûêT &
loˇti⁄
) {

726  
	gmachöe_lﬂd_°‹e_£q_c°
<
	gT
,(T)>::
lﬂd
–
loˇti⁄
 );

728 
	gãm∂©e
<
ty≥«me
 
	gT
,Åy≥«mê
	gV
>

729 
ölöe
 
__TBB_°‹e_fuŒ_„n˚
(vﬁ©ûê
T
& 
loˇti⁄
, 
V
 
vÆue
) {

730 
	gmachöe_lﬂd_°‹e_£q_c°
<
	gT
,(T)>::
°‹e
–
loˇti⁄
, 
T
(
vÆue
) );

733 
ölöe
 
__TBB_°‹e_fuŒ_„n˚
(vﬁ©ûê
size_t
& 
loˇti⁄
, size_à
vÆue
) {

734 
	gmachöe_lﬂd_°‹e_£q_c°
<
	gsize_t
,(size_t)>::
°‹e
–
loˇti⁄
, 
vÆue
 );

737 
	gãm∂©e
<
ty≥«me
 
	gT
>

738 
ölöe
 
T
 
__TBB_lﬂd_ªœxed
 (c⁄° vﬁ©ûêT& 
loˇti⁄
) {

739  
	gmachöe_lﬂd_°‹e_ªœxed
<
	gT
,(T)>::
lﬂd
–
c⁄°_ˇ°
<
T
&>(
loˇti⁄
) );

741 
	gãm∂©e
<
ty≥«me
 
	gT
,Åy≥«mê
	gV
>

742 
ölöe
 
__TBB_°‹e_ªœxed
 ( vﬁ©ûê
T
& 
loˇti⁄
, 
V
 
vÆue
 ) {

743 
	gmachöe_lﬂd_°‹e_ªœxed
<
	gT
,(T)>::
°‹e
–
c⁄°_ˇ°
<
T
&>(
loˇti⁄
), T(
vÆue
) );

746 
ölöe
 
__TBB_°‹e_ªœxed
 ( vﬁ©ûê
size_t
& 
loˇti⁄
, size_à
vÆue
 ) {

747 
	gmachöe_lﬂd_°‹e_ªœxed
<
	gsize_t
,(size_t)>::
°‹e
–
c⁄°_ˇ°
<
size_t
&>(
loˇti⁄
), 
vÆue
 );

757 #i‚de‡
__TBB_Ty≥WôhAlignmítAtLó°AsSåi˘


759 #i‡
__TBB_ALIGNAS_PRESENT


762 
	#__TBB_DeföeTy≥WôhAlignmít
(
PowîOf2
) \

763 
	`Æig«s
(
PowîOf2
Ë
__TBB_machöe_ty≥_wôh_Æignmít_
##PowerOf2 { \

764 
uöt32_t
 
membî
[
PowîOf2
/(uint32_t)]; \

765 };

	)

766 
	#__TBB_Æignof
(
T
Ë
	`Æignof
(T)

	)

768 #ñi‡
__TBB_ATTRIBUTE_ALIGNED_PRESENT


770 
	#__TBB_DeföeTy≥WôhAlignmít
(
PowîOf2
) \

771 
__TBB_machöe_ty≥_wôh_Æignmít_
##
PowîOf2
 { \

772 
uöt32_t
 
membî
[
PowîOf2
/(uint32_t)]; \

773 } 
	`__©åibuã__
((
	`Æig√d
(
PowîOf2
)));

	)

774 
	#__TBB_Æignof
(
T
Ë
	`__Æignof__
(T)

	)

776 #ñi‡
__TBB_DECLSPEC_ALIGN_PRESENT


778 
	#__TBB_DeföeTy≥WôhAlignmít
(
PowîOf2
) \

779 
	`__de˛•ec
(
	`Æign
(
PowîOf2
)) \

780 
__TBB_machöe_ty≥_wôh_Æignmít_
##
PowîOf2
 { \

781 
uöt32_t
 
membî
[
PowîOf2
/(uint32_t)]; \

782 };

	)

783 
	#__TBB_Æignof
(
T
Ë
	`__Æignof
(T)

	)

786 #îr‹ 
Mu°
 
deföe
 
__TBB_Ty≥WôhAlignmítAtLó°AsSåi˘
(
T
)

790 
__TBB_DeföeTy≥WôhAlignmít
(8)

791 
__TBB_DeföeTy≥WôhAlignmít
(16)

792 
__TBB_DeföeTy≥WôhAlignmít
(32)

793 
__TBB_DeföeTy≥WôhAlignmít
(64)

795 
__TBB_machöe_ty≥_wôh_Æignmít_64
 
	t__TBB_machöe_ty≥_wôh_°ri˘e°_Æignmít
;

798 
	gãm∂©e
<
size_t
 
	gN
> 
	gty≥_wôh_Æignmít
;

801 
	gãm∂©e
<> 
	gty≥_wôh_Æignmít
<1> { 
	gmembî
; };

802 
	gãm∂©e
<> 
	gty≥_wôh_Æignmít
<2> { 
uöt16_t
 
	gmembî
; };

803 
	gãm∂©e
<> 
	gty≥_wôh_Æignmít
<4> { 
uöt32_t
 
	gmembî
; };

804 
	gãm∂©e
<> 
	gty≥_wôh_Æignmít
<8> { 
__TBB_machöe_ty≥_wôh_Æignmít_8
 
	gmembî
; };

805 
	gãm∂©e
<> 
	gty≥_wôh_Æignmít
<16> {
__TBB_machöe_ty≥_wôh_Æignmít_16
 
	gmembî
; };

806 
	gãm∂©e
<> 
	gty≥_wôh_Æignmít
<32> {
__TBB_machöe_ty≥_wôh_Æignmít_32
 
	gmembî
; };

807 
	gãm∂©e
<> 
	gty≥_wôh_Æignmít
<64> {
__TBB_machöe_ty≥_wôh_Æignmít_64
 
	gmembî
; };

809 #i‡
__TBB_ALIGNOF_NOT_INSTANTIATED_TYPES_BROKEN


813 
	gãm∂©e
<
size_t
 
	gSize
, 
ty≥«me
 
	gT
>

814 
	sw‹k_¨ound_Æignmít_bug
 {

815 c⁄° 
size_t
 
	gÆignmít
 = 
__TBB_Æignof
(
T
);

817 
	#__TBB_Ty≥WôhAlignmítAtLó°AsSåi˘
(
T
Ë
tbb
::
öã∫Æ
::
ty≥_wôh_Æignmít
<tbb::öã∫Æ::
w‹k_¨ound_Æignmít_bug
<(T),T>::
Æignmít
>

	)

819 
	#__TBB_Ty≥WôhAlignmítAtLó°AsSåi˘
(
T
Ë
tbb
::
öã∫Æ
::
ty≥_wôh_Æignmít
<
	`__TBB_Æignof
(T)>

	)

825 
	gãm∂©e
<
ty≥«me
 
	gT
>

826 
	sªvî£
 {

827 c⁄° 
T
 
	gbyã_èbÀ
[256];

831 
	gãm∂©e
<
ty≥«me
 
	gT
>

832 c⁄° 
T
 
	gªvî£
<
	gT
>::
byã_èbÀ
[256] = {

855 
usög
 
	gtbb
::
öã∫Æ
::
__TBB_lﬂd_wôh_acquúe
;

856 
usög
 
	gtbb
::
öã∫Æ
::
__TBB_°‹e_wôh_ªÀa£
;

859 
	#__TBB_lﬂd_acquúe
 
__TBB_lﬂd_wôh_acquúe


	)

860 
	#__TBB_°‹e_ªÀa£
 
__TBB_°‹e_wôh_ªÀa£


	)

862 #i‚de‡
__TBB_Log2


863 
ölöe
 
öçå_t
 
	$__TBB_Log2
–
uöçå_t
 
x
 ) {

864 if–
x
==0 )  -1;

865 
öçå_t
 
ªsu…
 = 0;

867 #i‡!
	`deföed
(
_M_ARM
)

868 
uöçå_t
 
tmp_
;

869 if–(
x
)>4 && (
tmp_
 = ((
uöt64_t
)x)>>32ËË{ xÒmp_; 
ªsu…
 += 32; }

871 if–
uöçå_t
 
tmp
 = 
x
>>16 ) { xÒmp; 
ªsu…
 += 16; }

872 if–
uöçå_t
 
tmp
 = 
x
>>8 ) { xÒmp; 
ªsu…
 += 8; }

873 if–
uöçå_t
 
tmp
 = 
x
>>4 ) { xÒmp; 
ªsu…
 += 4; }

874 if–
uöçå_t
 
tmp
 = 
x
>>2 ) { xÒmp; 
ªsu…
 += 2; }

876  (
x
&2)? 
ªsu…
+1:Ñesult;

877 
	}
}

880 #i‚de‡
__TBB_AtomicOR


881 
ölöe
 
	$__TBB_AtomicOR
–vﬁ©ûê*
›î™d
, 
uöçå_t
 
addíd
 ) {

882  
tbb
::
öã∫Æ
::
©omic_backoff
 
b
;;b.
	`∑u£
() ) {

883 
uöçå_t
 
tmp
 = *(vﬁ©ûêuöçå_à*)
›î™d
;

884 
uöçå_t
 
ªsu…
 = 
	`__TBB_Com∑ªAndSw≠W
(
›î™d
, 
tmp
|
addíd
,Åmp);

885 if–
ªsu…
==
tmp
 ) ;

887 
	}
}

890 #i‚de‡
__TBB_AtomicAND


891 
ölöe
 
	$__TBB_AtomicAND
–vﬁ©ûê*
›î™d
, 
uöçå_t
 
addíd
 ) {

892  
tbb
::
öã∫Æ
::
©omic_backoff
 
b
;;b.
	`∑u£
() ) {

893 
uöçå_t
 
tmp
 = *(vﬁ©ûêuöçå_à*)
›î™d
;

894 
uöçå_t
 
ªsu…
 = 
	`__TBB_Com∑ªAndSw≠W
(
›î™d
, 
tmp
&
addíd
,Åmp);

895 if–
ªsu…
==
tmp
 ) ;

897 
	}
}

900 #i‡
__TBB_PREFETCHING


901 #i‚de‡
__TBB_˛_¥e„tch


902 #îr‹ 
This
 
∂©f‹m
 
d€s
 
nŸ
 
deföe
 
ˇche
 
m™agemít
 
¥imôives
 
ªquúed
 
__TBB_PREFETCHING


905 #i‚de‡
__TBB_˛_evi˘


906 
	#__TBB_˛_evi˘
(
p
)

	)

910 #i‚de‡
__TBB_Fœg


911 
	t__TBB_Fœg
;

913 
__TBB_©omic
 
	t__TBB_Fœg
 
	t__TBB_©omic_Êag
;

915 #i‚de‡
__TBB_TryLockByã


916 
ölöe
 
boﬁ
 
	$__TBB_TryLockByã
–
__TBB_©omic_Êag
 &
Êag
 ) {

917  
	`__TBB_machöe_cmpswp1
(&
Êag
,1,0)==0;

918 
	}
}

921 #i‚de‡
__TBB_LockByã


922 
ölöe
 
__TBB_Fœg
 
	$__TBB_LockByã
–
__TBB_©omic_Êag
& 
Êag
 ) {

923 
tbb
::
öã∫Æ
::
©omic_backoff
 
backoff
;

924  !
	`__TBB_TryLockByã
(
Êag
ËË
backoff
.
	`∑u£
();

926 
	}
}

929 #i‚de‡ 
__TBB_U∆ockByã


930 
	#__TBB_U∆ockByã
(
addr
Ë
	`__TBB_°‹e_wôh_ªÀa£
(◊ddr),0)

	)

934 #i‡–
__TBB_x86_32
 || 
__TBB_x86_64
 )

935 
ölöe
 
	$__TBB_TryLockByãElidedC™˚l
(Ë{ 
	`__TBB_machöe_åy_lock_ñided_ˇn˚l
(); 
	}
}

937 
ölöe
 
boﬁ
 
	$__TBB_TryLockByãElided
–
__TBB_©omic_Êag
& 
Êag
 ) {

938 
boﬁ
 
ªs
 = 
	`__TBB_machöe_åy_lock_ñided
–&
Êag
 )!=0;

942 if–!
ªs
 ) 
	`__TBB_TryLockByãElidedC™˚l
();

943  
ªs
;

944 
	}
}

946 
ölöe
 
	$__TBB_LockByãElided
–
__TBB_©omic_Êag
& 
Êag
 )

949 
tbb
::
öã∫Æ
::
	`•ö_waô_whûe_eq
–
Êag
, 1 );

950 if–
	`__TBB_machöe_åy_lock_ñided
–&
Êag
 ) )

954 
	`__TBB_TryLockByãElidedC™˚l
();

956 
	}
}

958 
ölöe
 
	$__TBB_U∆ockByãElided
–
__TBB_©omic_Êag
& 
Êag
 ) {

959 
	`__TBB_machöe_u∆ock_ñided
–&
Êag
 );

960 
	}
}

963 #i‚de‡
__TBB_Revî£Byã


964 
ölöe
 
	$__TBB_Revî£Byã
(
§c
) {

965  
tbb
::
öã∫Æ
::
ªvî£
<>::
byã_èbÀ
[
§c
];

966 
	}
}

969 
	gãm∂©e
<
ty≥«me
 
	gT
>

970 
T
 
	$__TBB_Revî£Bôs
(
T
 
§c
) {

971 
T
 
d°
;

972 *
‹igöÆ
 = (*Ë&
§c
;

973 *
ªvî£d
 = (*Ë&
d°
;

975  
i
 = (
T
)-1; i >= 0; i-- )

976 
ªvî£d
[
i
] = 
	`__TBB_Revî£Byã
–
‹igöÆ
[(
T
)-i-1] );

978  
d°
;

979 
	}
}

	@/usr/include/tbb/tbb_stddef.h

17 #i‚de‡
__TBB_tbb_°ddef_H


18 
	#__TBB_tbb_°ddef_H


	)

21 
	#TBB_VERSION_MAJOR
 2020

	)

22 
	#TBB_VERSION_MINOR
 1

	)

25 
	#TBB_INTERFACE_VERSION
 11101

	)

26 
	#TBB_INTERFACE_VERSION_MAJOR
 
TBB_INTERFACE_VERSION
/1000

	)

30 
	#TBB_COMPATIBLE_INTERFACE_VERSION
 2

	)

32 
	#__TBB_STRING_AUX
(
x
Ë#x

	)

33 
	#__TBB_STRING
(
x
Ë
	`__TBB_STRING_AUX
(x)

	)

36 #i‡!
deföed
 
RC_INVOKED


91 
	~"tbb_c⁄fig.h
"

93 #i‡
_MSC_VER
 >=1400

94 
	#__TBB_EXPORTED_FUNC
 
__cde˛


	)

95 
	#__TBB_EXPORTED_METHOD
 
__thisˇŒ


	)

97 
	#__TBB_EXPORTED_FUNC


	)

98 
	#__TBB_EXPORTED_METHOD


	)

101 #i‡
__INTEL_COMPILER
 || 
_MSC_VER


102 
	#__TBB_NOINLINE
(
de˛
Ë
	`__de˛•ec
(
noölöe
Ë
	)
decl

103 #ñi‡
__GNUC__


104 
	#__TBB_NOINLINE
(
de˛
Ëde˛ 
	`__©åibuã__
 ((
noölöe
))

	)

106 
	#__TBB_NOINLINE
(
de˛
Ë
	)
decl

109 #i‡
__TBB_NOEXCEPT_PRESENT


110 
	#__TBB_NOEXCEPT
(
ex¥essi⁄
Ë
	`n€x˚±
”x¥essi⁄)

	)

112 
	#__TBB_NOEXCEPT
(
ex¥essi⁄
)

	)

115 
	~<c°ddef
>

117 #i‡
_MSC_VER


118 
	#__TBB_tbb_wödef_H


	)

119 
	~"öã∫Æ/_tbb_wödef.h
"

120 #unde‡
__TBB_tbb_wödef_H


122 #i‡!
deföed
(
_MSC_VER
) || _MSC_VER>=1600

123 
	~<°döt.h
>

127 (*
	tas£πi⁄_h™dÀr_ty≥
)–c⁄° * 
	tfûíame
, 
	tlöe
, c⁄° * 
	tex¥essi⁄
, c⁄° * 
	tcommít
 );

129 #i‡
__TBBMALLOC_BUILD


130 
«me•a˚
 
rml
 {Çame•a˚ 
öã∫Æ
 {

131 
	#__TBB_ASSERT_RELEASE
(
¥ediˇã
,
mesßge
Ë(’ªdiˇã)?(()0Ë: 
rml
::
öã∫Æ
::
	`as£πi⁄_Áûuª
(
__FILE__
,
__LINE__
,#¥ediˇã,mesßge))

	)

133 
«me•a˚
 
tbb
 {

134 
	#__TBB_ASSERT_RELEASE
(
¥ediˇã
,
mesßge
Ë(’ªdiˇã)?(()0Ë: 
tbb
::
	`as£πi⁄_Áûuª
(
__FILE__
,
__LINE__
,#¥ediˇã,mesßge))

	)

138 
as£πi⁄_h™dÀr_ty≥
 
__TBB_EXPORTED_FUNC
 
	`£t_as£πi⁄_h™dÀr
–as£πi⁄_h™dÀr_ty≥ 
√w_h™dÀr
 );

144 
__TBB_EXPORTED_FUNC
 
	`as£πi⁄_Áûuª
–c⁄° * 
fûíame
, 
löe
, c⁄° * 
ex¥essi⁄
, c⁄° * 
commít
 );

146 #i‡
__TBBMALLOC_BUILD


147 }
	}
}

152 #i‡
TBB_USE_ASSERT


158 
	#__TBB_ASSERT
(
¥ediˇã
,
mesßge
Ë
	`__TBB_ASSERT_RELEASE
’ªdiˇã,mesßge)

	)

160 
	#__TBB_ASSERT_EX
 
__TBB_ASSERT


	)

165 
	#__TBB_ASSERT
(
¥ediˇã
,
commít
Ë(()0)

	)

167 
	#__TBB_ASSERT_EX
(
¥ediˇã
,
commít
Ë(()(1 && (¥ediˇã)))

	)

172 
«me•a˚
 
	gtbb
 {

174 
«me•a˚
 
	göã∫Æ
 {

175 #i‡
_MSC_VER
 && _MSC_VER<1600

176 
__öt8
 
	töt8_t
;

177 
__öt16
 
	töt16_t
;

178 
__öt32
 
	töt32_t
;

179 
__öt64
 
	töt64_t
;

180 
	t__öt8
 
	tuöt8_t
;

181 
	t__öt16
 
	tuöt16_t
;

182 
	t__öt32
 
	tuöt32_t
;

183 
	t__öt64
 
	tuöt64_t
;

185 
	gusög
 ::
öt8_t
;

186 
	gusög
 ::
öt16_t
;

187 
	gusög
 ::
öt32_t
;

188 
	gusög
 ::
öt64_t
;

189 
	gusög
 ::
uöt8_t
;

190 
	gusög
 ::
uöt16_t
;

191 
	gusög
 ::
uöt32_t
;

192 
	gusög
 ::
uöt64_t
;

196 
usög
 
	g°d
::
size_t
;

197 
usög
 
	g°d
::
±rdiff_t
;

204 "C" 
__TBB_EXPORTED_FUNC
 
TBB_ru¡ime_öãrÁ˚_vîsi⁄
();

210 
«me•a˚
 
	göã∫Æ
 {

216 c⁄° 
size_t
 
	gNFS_MaxLöeSize
 = 128;

237 
	#__TBB_©omic


238 

	)

239 #i‡
__TBB_OVERRIDE_PRESENT


240 
	#__TBB_ovîride
 
ovîride


	)

242 
	#__TBB_ovîride


244 

	)

245 #i‡
__TBB_CPP17_FALLTHROUGH_PRESENT


246 
	#__TBB_ÁŒthrough
 [[
ÁŒthrough
]]

	)

247 #ñi‡
__TBB_FALLTHROUGH_PRESENT


248 
	#__TBB_ÁŒthrough
 
	`__©åibuã__
 ((
ÁŒthrough
))

	)

250 
	#__TBB_ÁŒthrough


	)

253 
	gãm∂©e
<
˛ass
 
	gT
, 
size_t
 
	gS
, size_à
	gR
>

254 
	g∑dded_ba£
 : 
T
 {

255 
∑d
[
S
 - 
R
];

257 
	gãm∂©e
<
˛ass
 
	gT
, 
size_t
 
	gS
> 
	g∑dded_ba£
<T, S, 0> : 
T
 {};

260 
	gãm∂©e
<
˛ass
 
	gT
, 
size_t
 
	gS
 = 
NFS_MaxLöeSize
>

261 
∑dded
 : 
∑dded_ba£
<
T
, 
	gS
, (
	gT
) % S> {};

266 
	#__TBB_off£tof
(
˛ass_«me
, 
membî_«me
) \

267 ((
±rdiff_t
)&(
ªöãΩªt_ˇ°
<
˛ass_«me
*>(0x1000)->
membî_«me
Ë- 0x1000)

	)

270 
	#__TBB_gë_obje˘_ªf
(
˛ass_«me
, 
membî_«me
, 
membî_addr
) \

271 (*
ªöãΩªt_ˇ°
<
˛ass_«me
*>((*)
membî_addr
 - 
	`__TBB_off£tof
(˛ass_«me, 
membî_«me
)))

	)

274 
__TBB_EXPORTED_FUNC
 
h™dÀ_≥º‹
–
îr‹_code
, c⁄° * 
aux_öfo
 );

276 #i‡
TBB_USE_EXCEPTIONS


277 
	#__TBB_TRY
 
åy


	)

278 
	#__TBB_CATCH
(
e
Ë
	`ˇtch
”)

	)

279 
	#__TBB_THROW
(
e
Ë
throw
 
	)
e

280 
	#__TBB_RETHROW
(Ë
throw


	)

282 
ölöe
 
boﬁ
 
__TBB_Ál£
(Ë{  
	gÁl£
; }

283 
	#__TBB_TRY


	)

284 
	#__TBB_CATCH
(
e
Ëi‡–
tbb
::
öã∫Æ
::
	`__TBB_Ál£
(Ë)

	)

285 
	#__TBB_THROW
(
e
Ë
tbb
::
öã∫Æ
::
	`suµªss_unu£d_w¨nög
”)

	)

286 
	#__TBB_RETHROW
(Ë(()0)

	)

290 
__TBB_EXPORTED_FUNC
 
ru¡ime_w¨nög
–c⁄° * 
f‹m©
, ... );

292 #i‡
TBB_USE_ASSERT


293 * c⁄° 
	gpois⁄ed_±r
 = 
ªöãΩªt_ˇ°
<*>(-1);

297 
	gãm∂©e
<
ty≥«me
 
	gT
>

298 
ölöe
 
pois⁄_poöãr
–
T
* 
__TBB_©omic
 & 
p
 ) { 
	gp
 = 
ªöãΩªt_ˇ°
<T*>(
pois⁄ed_±r
); }

301 
	gãm∂©e
<
ty≥«me
 
	gT
>

302 
ölöe
 
boﬁ
 
is_pois⁄ed
–
T
* 
p
 ) {  
	gp
 =
ªöãΩªt_ˇ°
<T*>(
pois⁄ed_±r
); }

304 
	gãm∂©e
<
ty≥«me
 
	gT
>

305 
ölöe
 
pois⁄_poöãr
–
T
* 
__TBB_©omic
 & ) { }

313 
	gãm∂©e
<
ty≥«me
 
	gT
,Åy≥«mê
	gU
>

314 
ölöe
 
T
 
pu¬ed_ˇ°
–
U
* 
±r
 ) {

315 
uöçå_t
 
	gx
 = 
ªöãΩªt_ˇ°
<uöçå_t>(
±r
);

316  
	gªöãΩªt_ˇ°
<
	gT
>(
	gx
);

319 #i‡
__TBB_DEFAULTED_AND_DELETED_FUNC_PRESENT


322 ˛as†
	cno_assign
 {

323 
	gpublic
:

324 
›î©‹
=–c⁄° 
no_assign
& ) = 
dñëe
;

325 
no_assign
( constÇo_assign& ) = ;

326 
no_assign
() = ;

330 ˛as†
	cno_c›y
: 
no_assign
 {

331 
public
:

332 
no_c›y
–c⁄°Ço_c›y& ) = 
dñëe
;

333 
no_c›y
() = ;

339 ˛as†
	cno_assign
 {

341 
	g›î©‹
=–c⁄° 
no_assign
& );

342 
	gpublic
:

343 #i‡
__GNUC__


345 
no_assign
() {}

350 ˛as†
	cno_c›y
: 
no_assign
 {

352 
no_c›y
( constÇo_copy& );

353 
	gpublic
:

355 
no_c›y
() {}

360 #i‡
TBB_DEPRECATED_MUTEX_COPYING


361 ˛as†
	cmuãx_c›y_dïªˇãd_™d_dißbÀd
 {};

365 ˛as†
	cmuãx_c›y_dïªˇãd_™d_dißbÀd
 : 
no_c›y
 {};

369 
	gãm∂©e
<
ty≥«me
 
	gT
>

370 
ölöe
 
boﬁ
 
is_Æig√d
(
T
* 
poöãr
, 
uöçå_t
 
Æignmít
) {

371  0==((
uöçå_t
)
poöãr
 & (
Æignmít
-1));

375 
	gãm∂©e
<
ty≥«me
 
	göãgî_ty≥
>

376 
ölöe
 
boﬁ
 
is_powî_of_two
(
öãgî_ty≥
 
¨g
) {

377  
	g¨g
 && (0 =(
¨g
 & (arg - 1)));

381 
	gãm∂©e
<
ty≥«me
 
	g¨gumít_öãgî_ty≥
,Åy≥«mê
	gdivis‹_öãgî_ty≥
>

382 
ölöe
 
¨gumít_öãgî_ty≥
 
modulo_powî_of_two
◊rgumít_öãgî_ty≥ 
¨g
, 
divis‹_öãgî_ty≥
 
divis‹
) {

383 
__TBB_ASSERT
–
is_powî_of_two
(
divis‹
), "Divisor should beáÖower ofÅwo" );

384  (
	g¨g
 & (
	gdivis‹
 - 1));

391 
	gãm∂©e
<
ty≥«me
 
	g¨gumít_öãgî_ty≥
,Åy≥«mê
	gpowî2_öãgî_ty≥
>

392 
ölöe
 
boﬁ
 
is_powî_of_two_©_Àa°
(
¨gumít_öãgî_ty≥
 
¨g
, 
powî2_öãgî_ty≥
 
powî2
) {

393 
__TBB_ASSERT
–
is_powî_of_two
(
powî2
), "Divisor should beáÖower ofÅwo" );

394  0 =(
¨g
 & (¨g - 
powî2
));

398 
	gãm∂©e
<
ty≥«me
 
	gT1
> 
suµªss_unu£d_w¨nög
–c⁄° 
T1
& ) {}

399 
	gãm∂©e
<
ty≥«me
 
	gT1
,Åy≥«mê
	gT2
> 
suµªss_unu£d_w¨nög
–c⁄° 
T1
&, c⁄° 
T2
& ) {}

400 
	gãm∂©e
<
ty≥«me
 
	gT1
,Åy≥«mê
	gT2
,Åy≥«mê
	gT3
> 
suµªss_unu£d_w¨nög
–c⁄° 
T1
&, c⁄° 
T2
&, c⁄° 
T3
& ) {}

405 
	svîsi⁄_èg_v3
 {};

407 
vîsi⁄_èg_v3
 
	tvîsi⁄_èg
;

416 ˛as†
	c•lô
 {

426 ˛as†
	c¥›‹ti⁄Æ_•lô
: 
öã∫Æ
::
no_assign
 {

427 
public
:

428 
¥›‹ti⁄Æ_•lô
(
size_t
 
_À·
 = 1, size_à
_right
 = 1Ë: 
my_À·
(_À·), 
my_right
(_right) { }

430 
size_t
 
À·
(Ëc⁄° {  
	gmy_À·
; }

431 
size_t
 
right
(Ëc⁄° {  
	gmy_right
; }

434 
›î©‹
 
•lô
() const {  split(); }

436 #i‡
__TBB_ENABLE_RANGE_FEEDBACK


437 
£t_¥›‹ti⁄
(
size_t
 
_À·
, size_à
_right
) {

438 
	gmy_À·
 = 
_À·
;

439 
	gmy_right
 = 
_right
;

442 
	g¥iv©e
:

443 
size_t
 
my_À·
, 
	gmy_right
;

451 #i‡
__TBB_CPP11_SMART_POINTERS_PRESENT


452 
	~<mem‹y
>

455 #i‡
__TBB_CPP11_RVALUE_REF_PRESENT
 || 
__TBB_CPP11_DECLTYPE_PRESENT
 || 
_LIBCPP_VERSION


456 
	~<utûôy
>

459 
«me•a˚
 
	gtbb
 {

460 
«me•a˚
 
	göã∫Æ
 {

462 #i‡
__TBB_CPP11_SMART_POINTERS_PRESENT
 && 
__TBB_CPP11_RVALUE_REF_PRESENT
 && 
__TBB_CPP11_VARIADIC_TEMPLATES_PRESENT


463 
	gãm∂©e
<
ty≥«me
 
	gT
, 
	gty≥«me
... 
	gArgs
>

464 
	g°d
::
unique_±r
<
T
> 
make_unique
(
Args
&&... 
¨gs
) {

465  
°d
::
unique_±r
<
T
>(
√w
 T(°d::
f‹w¨d
<
Args
>(
¨gs
)...));

470 
	gãm∂©e
<
ty≥«me
 
	gT
>

471 
	sÆloˇt‹_ty≥
 {

472 
T
 
	tvÆue_ty≥
;

475 #i‡
_MSC_VER


477 
	gãm∂©e
<
ty≥«me
 
	gT
>

478 
	gÆloˇt‹_ty≥
<c⁄° 
	gT
> {

479 
T
 
	tvÆue_ty≥
;

485 
	gãm∂©e
 <
boﬁ
 
	gv
>

486 
	sboﬁ_c⁄°™t
 {

487 c⁄° 
boﬁ
 
	gvÆue
 = 
v
;

489 
	gboﬁ_c⁄°™t
<
	tåue
> 
	tåue_ty≥
;

490 
	gboﬁ_c⁄°™t
<
	tÁl£
> 
	tÁl£_ty≥
;

493 
	gãm∂©e
 <
	gu
, 
	guŒ
 >

494 
	s£À˘_size_t_c⁄°™t
 {

497 c⁄° 
size_t
 
	gvÆue
 = (size_t)(((size_t)==(
u
)Ë? u : 
uŒ
);

500 #i‡
__TBB_CPP11_RVALUE_REF_PRESENT


501 
usög
 
	g°d
::
move
;

502 
usög
 
	g°d
::
f‹w¨d
;

503 #ñi‡
deföed
(
_LIBCPP_NAMESPACE
)

505 
usög
 
	g°d
::
_LIBCPP_NAMESPACE
::
move
;

506 
usög
 
	g°d
::
_LIBCPP_NAMESPACE
::
f‹w¨d
;

509 
	gãm∂©e
 <
ty≥«me
 
	gT
>

510 
	gT
& 
move
–
T
& 
x
 ) {  
	gx
; }

511 
	gãm∂©e
 <
ty≥«me
 
	gT
>

512 
	gT
& 
f‹w¨d
–
T
& 
x
 ) {  
	gx
; }

516 #i‡
__TBB_CPP11_RVALUE_REF_PRESENT


517 
	#__TBB_FORWARDING_REF
(
A
ËA&&

	)

521 
	#__TBB_FORWARDING_REF
(
A
ËA&

	)

523 #i‡
__TBB_CPP11_VARIADIC_TEMPLATES_PRESENT


524 
	#__TBB_PARAMETER_PACK
 ...

	)

525 
	#__TBB_PACK_EXPANSION
(
A
ËA...

	)

527 
	#__TBB_PARAMETER_PACK


	)

528 
	#__TBB_PACK_EXPANSION
(
A
Ë
	)
A

531 #i‡
__TBB_CPP11_DECLTYPE_PRESENT


532 #i‡
__TBB_CPP11_DECLVAL_BROKEN


534 
	gãm∂©e
 <
˛ass
 
	gT
> 
__TBB_FORWARDING_REF
(
T
Ë
de˛vÆ
() ;

536 
usög
 
	g°d
::
de˛vÆ
;

540 
	gãm∂©e
 <
boﬁ
 
	gc⁄dôi⁄
>

541 
	gSTATIC_ASSERTION_FAILED
;

543 
	gãm∂©e
 <>

544 
	gSTATIC_ASSERTION_FAILED
<
	gÁl£
> {Énum {
	gvÆue
=1};};

546 
	gãm∂©e
<>

547 
	gSTATIC_ASSERTION_FAILED
<
	gåue
>;

552 #i‡
__TBB_STATIC_ASSERT_PRESENT


553 
	#__TBB_STATIC_ASSERT
(
c⁄dôi⁄
,
msg
Ë
	$°©ic_as£π
(
c⁄dôi⁄
,
msg
)

	)

556 
	#__TBB_STATIC_ASSERT_IMPL1
(
c⁄dôi⁄
,
msg
,
löe
) \

557 íum {
°©ic_as£π_⁄_löe_
##
löe
 = 
tbb
::
öã∫Æ
::
STATIC_ASSERTION_FAILED
<!(
c⁄dôi⁄
)>::
vÆue
}

559 
	#__TBB_STATIC_ASSERT_IMPL
(
c⁄dôi⁄
,
msg
,
löe
Ë
	$__TBB_STATIC_ASSERT_IMPL1
(
c⁄dôi⁄
,
msg
,
löe
)

	)

561 
	#__TBB_STATIC_ASSERT
(
c⁄dôi⁄
,
msg
Ë
	$__TBB_STATIC_ASSERT_IMPL
(
c⁄dôi⁄
,
msg
,
__LINE__
)

	)

	@/usr/include/tbb/tbb_thread.h

17 
	~"öã∫Æ/_dïªˇãd_hódî_mesßge_gu¨d.h
"

19 #i‡!
deföed
(
__TBB_show_dïªˇti⁄_mesßge_tbb_thªad_H
Ë&& deföed(
__TBB_show_dïªˇãd_hódî_mesßge
)

20 
	#__TBB_show_dïªˇti⁄_mesßge_tbb_thªad_H


	)

21 #¥agm®
mesßge
("TBB Warning:Åbb/tbb_thread.h is deprecated. For details,Ölease see Deprecated Featuresáppendix inÅhe TBBÑeference manual.")

24 #i‡
deföed
(
__TBB_show_dïªˇãd_hódî_mesßge
)

25 #unde‡
__TBB_show_dïªˇãd_hódî_mesßge


28 #i‚de‡
__TBB_tbb_thªad_H


29 
	#__TBB_tbb_thªad_H


	)

31 
	#__TBB_tbb_thªad_H_ö˛ude_¨ó


	)

32 
	~"öã∫Æ/_w¨nög_suµªss_íabÀ_nŸi˚.h
"

34 
	~"tbb_°ddef.h
"

36 #i‡
_WIN32
||
_WIN64


37 
	~"machöe/wödows_≠i.h
"

38 
	#__TBB_NATIVE_THREAD_ROUTINE
 
WINAPI


	)

39 
	#__TBB_NATIVE_THREAD_ROUTINE_PTR
(
r
Ë(
WINAPI
*Ñ)–* )

	)

40 
«me•a˚
 
	gtbb
 {Çame•a˚ 
	göã∫Æ
 {

41 #i‡
__TBB_WIN8UI_SUPPORT


42 
size_t
 
	tthªad_id_ty≥
;

44 
DWORD
 
	tthªad_id_ty≥
;

48 
	#__TBB_NATIVE_THREAD_ROUTINE
 *

	)

49 
	#__TBB_NATIVE_THREAD_ROUTINE_PTR
(
r
Ë* (*r)–* )

	)

50 
	~<±hªad.h
>

51 
«me•a˚
 
	gtbb
 {Çame•a˚ 
	göã∫Æ
 {

52 
±hªad_t
 
	tthªad_id_ty≥
;

56 
	~"©omic.h
"

57 
	~"öã∫Æ/_tbb_hash_com∑ª_im∂.h
"

58 
	~"tick_cou¡.h
"

60 #ö˛udê
__TBB_STD_SWAP_HEADER


61 
	~<iosfwd
>

63 
«me•a˚
 
	gtbb
 {

65 
«me•a˚
 
	göã∫Æ
 {

66 
˛ass
 
	gtbb_thªad_v3
;

69 
ölöe
 
sw≠
–
öã∫Æ
::
tbb_thªad_v3
& 
t1
, i¡î«l::tbb_thªad_v3& 
t2
 ) 
__TBB_NOEXCEPT
(
åue
);

71 
«me•a˚
 
	göã∫Æ
 {

74 * 
__TBB_EXPORTED_FUNC
 
Æloˇã_˛osuª_v3
–
size_t
 
size
 );

76 
__TBB_EXPORTED_FUNC
 
‰ì_˛osuª_v3
( * );

78 
	sthªad_˛osuª_ba£
 {

79 * 
›î©‹
 
√w
–
size_t
 
size
 ) { 
Æloˇã_˛osuª_v3
(size);}

80 
›î©‹
 
dñëe
–* 
±r
 ) {
‰ì_˛osuª_v3
(ptr);}

83 
	gãm∂©e
<
˛ass
 
	gF
> 
	gthªad_˛osuª_0
: 
thªad_˛osuª_ba£
 {

84 
F
 
fun˘i⁄
;

86 
__TBB_NATIVE_THREAD_ROUTINE
 
°¨t_routöe
–* 
c
 ) {

87 
thªad_˛osuª_0
 *
	g£lf
 = 
°©ic_ˇ°
<thªad_˛osuª_0*>(
c
);

88 
	g£lf
->
fun˘i⁄
();

89 
dñëe
 
	g£lf
;

92 
thªad_˛osuª_0
–c⁄° 
F
& 
f
 ) : 
fun˘i⁄
(f) {}

95 
	gãm∂©e
<
˛ass
 
	gF
, cœs†
	gX
> 
	gthªad_˛osuª_1
: 
thªad_˛osuª_ba£
 {

96 
F
 
fun˘i⁄
;

97 
X
 
	g¨g1
;

99 
__TBB_NATIVE_THREAD_ROUTINE
 
°¨t_routöe
–* 
c
 ) {

100 
thªad_˛osuª_1
 *
	g£lf
 = 
°©ic_ˇ°
<thªad_˛osuª_1*>(
c
);

101 
	g£lf
->
fun˘i⁄
(
£lf
->
¨g1
);

102 
dñëe
 
	g£lf
;

105 
thªad_˛osuª_1
–c⁄° 
F
& 
f
, c⁄° 
X
& 
x
 ) : 
fun˘i⁄
(f), 
¨g1
(x) {}

107 
	gãm∂©e
<
˛ass
 
	gF
, cœs†
	gX
, cœs†
	gY
> 
	gthªad_˛osuª_2
: 
thªad_˛osuª_ba£
 {

108 
F
 
fun˘i⁄
;

109 
X
 
	g¨g1
;

110 
Y
 
	g¨g2
;

112 
__TBB_NATIVE_THREAD_ROUTINE
 
°¨t_routöe
–* 
c
 ) {

113 
thªad_˛osuª_2
 *
	g£lf
 = 
°©ic_ˇ°
<thªad_˛osuª_2*>(
c
);

114 
	g£lf
->
fun˘i⁄
(
£lf
->
¨g1
, sñf->
¨g2
);

115 
dñëe
 
	g£lf
;

118 
thªad_˛osuª_2
–c⁄° 
F
& 
f
, c⁄° 
X
& 
x
, c⁄° 
Y
& 
y
 ) : 
fun˘i⁄
(f), 
¨g1
(x), 
¨g2
(y) {}

122 ˛as†
	ctbb_thªad_v3
 {

123 #i‡
__TBB_IF_NO_COPY_CTOR_MOVE_SEMANTICS_BROKEN


127 
	gpublic
:

129 
tbb_thªad_v3
(constÅbb_thread_v3&);

130 
	gpublic
:

131 #i‡
_WIN32
||
_WIN64


132 
HANDLE
 
	t«tive_h™dÀ_ty≥
;

134 
±hªad_t
 
	t«tive_h™dÀ_ty≥
;

137 
˛ass
 
	gid
;

139 
tbb_thªad_v3
(Ë
__TBB_NOEXCEPT
(
åue
Ë: 
my_h™dÀ
(0)

140 #i‡
_WIN32
||
_WIN64


141 , 
my_thªad_id
(0)

146 
	gãm∂©e
 <
˛ass
 
	gF
> 
ex∂icô
 
tbb_thªad_v3
(
F
 
f
) {

147 
	göã∫Æ
::
	tthªad_˛osuª_0
<
	tF
> 
	t˛osuª_ty≥
;

148 
öã∫Æ_°¨t
(
˛osuª_ty≥
::
°¨t_routöe
, 
√w
 closuª_ty≥(
f
));

151 
	gãm∂©e
 <
˛ass
 
	gF
, cœs†
	gX
> 
tbb_thªad_v3
(
F
 
f
, 
X
 
x
) {

152 
	göã∫Æ
::
	tthªad_˛osuª_1
<
	tF
,
	tX
> 
	t˛osuª_ty≥
;

153 
öã∫Æ_°¨t
(
˛osuª_ty≥
::
°¨t_routöe
, 
√w
 closuª_ty≥(
f
,
x
));

156 
	gãm∂©e
 <
˛ass
 
	gF
, cœs†
	gX
, cœs†
	gY
> 
tbb_thªad_v3
(
F
 
f
, 
X
 
x
, 
Y
 
y
) {

157 
	göã∫Æ
::
	tthªad_˛osuª_2
<
	tF
,
	tX
,
	tY
> 
	t˛osuª_ty≥
;

158 
öã∫Æ_°¨t
(
˛osuª_ty≥
::
°¨t_routöe
, 
√w
 closuª_ty≥(
f
,
x
,
y
));

161 #i‡
__TBB_CPP11_RVALUE_REF_PRESENT


162 
tbb_thªad_v3
—bb_thªad_v3&& 
x
Ë
__TBB_NOEXCEPT
(
åue
)

163 : 
my_h™dÀ
(
x
.my_handle)

164 #i‡
_WIN32
||
_WIN64


165 , 
my_thªad_id
(
x
.my_thread_id)

168 
	gx
.
öã∫Æ_wùe
();

170 
	gtbb_thªad_v3
& 
	g›î©‹
=(
tbb_thªad_v3
&& 
x
Ë
__TBB_NOEXCEPT
(
åue
) {

171 
öã∫Æ_move
(
x
);

172  *
	gthis
;

174 
	g¥iv©e
:

175 
tbb_thªad_v3
& 
›î©‹
=(c⁄°Åbb_thªad_v3& 
x
);

176 
	gpublic
:

178 
tbb_thªad_v3
& 
›î©‹
=—bb_thªad_v3& 
x
) {

179 
öã∫Æ_move
(
x
);

180  *
	gthis
;

184 
sw≠
–
tbb_thªad_v3
& 
t
 ) 
__TBB_NOEXCEPT
(
åue
Ë{
	gtbb
::sw≠–*
this
,Å );}

185 
boﬁ
 
joöabÀ
(Ëc⁄° 
__TBB_NOEXCEPT
(
åue
Ë{ 
	gmy_h™dÀ
!=0; }

187 
__TBB_EXPORTED_METHOD
 
joö
();

189 
__TBB_EXPORTED_METHOD
 
dëach
();

190 ~
tbb_thªad_v3
(Ë{if–
joöabÀ
(ËË
dëach
();}

191 
ölöe
 
id
 
gë_id
(Ëc⁄° 
__TBB_NOEXCEPT
(
åue
);

192 
«tive_h™dÀ_ty≥
 
«tive_h™dÀ
(Ë{  
	gmy_h™dÀ
; }

204 
__TBB_EXPORTED_FUNC
 
h¨dw¨e_c⁄cuºícy
(Ë
__TBB_NOEXCEPT
(
åue
);

205 
	g¥iv©e
:

206 
«tive_h™dÀ_ty≥
 
my_h™dÀ
;

207 #i‡
_WIN32
||
_WIN64


208 
thªad_id_ty≥
 
	gmy_thªad_id
;

211 
öã∫Æ_wùe
(Ë
__TBB_NOEXCEPT
(
åue
) {

212 
	gmy_h™dÀ
 = 0;

213 #i‡
_WIN32
||
_WIN64


214 
	gmy_thªad_id
 = 0;

217 
öã∫Æ_move
(
tbb_thªad_v3
& 
x
Ë
__TBB_NOEXCEPT
(
åue
) {

218 i‡(
joöabÀ
()Ë
dëach
();

219 
	gmy_h™dÀ
 = 
x
.
my_h™dÀ
;

220 #i‡
_WIN32
||
_WIN64


221 
	gmy_thªad_id
 = 
x
.
my_thªad_id
;

223 
	gx
.
öã∫Æ_wùe
();

227 
__TBB_EXPORTED_METHOD
 
öã∫Æ_°¨t
–
__TBB_NATIVE_THREAD_ROUTINE_PTR
(
°¨t_routöe
),

228 * 
˛osuª
 );

229 
‰õnd
 
__TBB_EXPORTED_FUNC
 
move_v3
–
tbb_thªad_v3
& 
t1
,Åbb_thªad_v3& 
t2
 );

230 
‰õnd
 
	gtbb
::
sw≠
–
tbb_thªad_v3
& 
t1
,Åbb_thªad_v3& 
t2
 ) 
__TBB_NOEXCEPT
(
åue
);

233 ˛as†
	ctbb_thªad_v3
::
id
 {

234 
thªad_id_ty≥
 
my_id
;

235 
id
–
thªad_id_ty≥
 
id_
 ) : 
my_id
(id_) {}

237 
‰õnd
 
˛ass
 
tbb_thªad_v3
;

238 
	gpublic
:

239 
id
(Ë
__TBB_NOEXCEPT
(
åue
Ë: 
my_id
(0) {}

241 
‰õnd
 
boﬁ
 
›î©‹
==–
tbb_thªad_v3
::
id
 
x
, 
	gtbb_thªad_v3
::id 
y
 ) 
__TBB_NOEXCEPT
(
åue
);

242 
‰õnd
 
boﬁ
 
	g›î©‹
!=–
tbb_thªad_v3
::
id
 
x
, 
	gtbb_thªad_v3
::id 
y
 ) 
__TBB_NOEXCEPT
(
åue
);

243 
‰õnd
 
boﬁ
 
	g›î©‹
<–
	gtbb_thªad_v3
::
id
 
x
,Åbb_thªad_v3::id 
y
 ) 
__TBB_NOEXCEPT
(
åue
);

244 
‰õnd
 
boﬁ
 
	g›î©‹
<=–
tbb_thªad_v3
::
id
 
x
, 
	gtbb_thªad_v3
::id 
y
 ) 
__TBB_NOEXCEPT
(
åue
);

245 
‰õnd
 
boﬁ
 
	g›î©‹
>–
	gtbb_thªad_v3
::
id
 
x
,Åbb_thªad_v3::id 
y
 ) 
__TBB_NOEXCEPT
(
åue
);

246 
‰õnd
 
boﬁ
 
	g›î©‹
>=–
tbb_thªad_v3
::
id
 
x
, 
	gtbb_thªad_v3
::id 
y
 ) 
__TBB_NOEXCEPT
(
åue
);

248 
	gãm∂©e
<
˛ass
 
	gch¨T
, cœs†
	gåaôs
>

249 
‰õnd
 
	g°d
::
basic_o°ªam
<
ch¨T
, 
	gåaôs
>&

250 
	g›î©‹
<< (
	g°d
::
basic_o°ªam
<
ch¨T
, 
	gåaôs
> &
	gout
,

251 
	gtbb_thªad_v3
::
id
 id)

253 
out
 << 
id
.
my_id
;

254  
	gout
;

256 
‰õnd
 
	gtbb_thªad_v3
::
id
 
__TBB_EXPORTED_FUNC
 
thªad_gë_id_v3
();

258 
‰õnd
 
ölöe
 
size_t
 
tbb_hashî
–c⁄° 
tbb_thªad_v3
::
id
& id ) {

259 
__TBB_STATIC_ASSERT
((
id
.
my_id
Ë<(
size_t
), "ImplementationássumesÅhatÅhread_id_type fits into machine word");

260  
	gtbb
::
tbb_hashî
(
id
.
my_id
);

264 
‰õnd
 
id
 
©omic_com∑ª_™d_sw≠
(id& 
loˇti⁄
, c⁄° id& 
vÆue
, c⁄° id& 
com∑ønd
){

265  
as_©omic
(
loˇti⁄
.
my_id
).
com∑ª_™d_sw≠
(
vÆue
.my_id, 
com∑ønd
.my_id);

269 
	gtbb_thªad_v3
::
id
 
tbb_thªad_v3
::
gë_id
(Ëc⁄° 
__TBB_NOEXCEPT
(
åue
) {

270 #i‡
_WIN32
||
_WIN64


271  
id
(
my_thªad_id
);

273  
id
(
my_h™dÀ
);

277 
__TBB_EXPORTED_FUNC
 
move_v3
–
tbb_thªad_v3
& 
t1
,Åbb_thªad_v3& 
t2
 );

278 
	gtbb_thªad_v3
::
id
 
__TBB_EXPORTED_FUNC
 
thªad_gë_id_v3
();

279 
__TBB_EXPORTED_FUNC
 
thªad_yõld_v3
();

280 
__TBB_EXPORTED_FUNC
 
thªad_¶ìp_v3
(c⁄° 
tick_cou¡
::
öãrvÆ_t
 &
i
);

282 
ölöe
 
boﬁ
 
	g›î©‹
==(
tbb_thªad_v3
::
id
 
x
, 
	gtbb_thªad_v3
::id 
y
Ë
__TBB_NOEXCEPT
(
åue
)

284  
x
.
my_id
 =
y
.my_id;

286 
ölöe
 
boﬁ
 
	g›î©‹
!=(
tbb_thªad_v3
::
id
 
x
, 
	gtbb_thªad_v3
::id 
y
Ë
__TBB_NOEXCEPT
(
åue
)

288  
x
.
my_id
 !
y
.my_id;

290 
ölöe
 
boﬁ
 
	g›î©‹
<(
	gtbb_thªad_v3
::
id
 
x
,Åbb_thªad_v3::id 
y
Ë
__TBB_NOEXCEPT
(
åue
)

292  
x
.
my_id
 < 
y
.my_id;

294 
ölöe
 
boﬁ
 
	g›î©‹
<=(
tbb_thªad_v3
::
id
 
x
, 
	gtbb_thªad_v3
::id 
y
Ë
__TBB_NOEXCEPT
(
åue
)

296  
x
.
my_id
 <
y
.my_id;

298 
ölöe
 
boﬁ
 
	g›î©‹
>(
	gtbb_thªad_v3
::
id
 
x
,Åbb_thªad_v3::id 
y
Ë
__TBB_NOEXCEPT
(
åue
)

300  
x
.
my_id
 > 
y
.my_id;

302 
ölöe
 
boﬁ
 
	g›î©‹
>=(
tbb_thªad_v3
::
id
 
x
, 
	gtbb_thªad_v3
::id 
y
Ë
__TBB_NOEXCEPT
(
åue
)

304  
x
.
my_id
 >
y
.my_id;

310 
__TBB_DEPRECATED_VERBOSE_MSG
("tbb::thªad i†dïªˇãd, u£ std::thªad"Ë
	göã∫Æ
::
	ttbb_thªad_v3
 
	ttbb_thªad
;

312 
usög
 
	göã∫Æ
::
›î©‹
==;

313 
usög
 
	göã∫Æ
::
›î©‹
!=;

314 
usög
 
	göã∫Æ
::
›î©‹
<;

315 
usög
 
	göã∫Æ
::
›î©‹
>;

316 
usög
 
	göã∫Æ
::
›î©‹
<=;

317 
usög
 
	göã∫Æ
::
›î©‹
>=;

319 
ölöe
 
	$move
–
tbb_thªad
& 
t1
,Åbb_thªad& 
t2
 ) {

320 
öã∫Æ
::
	`move_v3
(
t1
, 
t2
);

321 
	}
}

323 
ölöe
 
	$sw≠
–
öã∫Æ
::
tbb_thªad_v3
& 
t1
, i¡î«l::tbb_thªad_v3& 
t2
 ) 
	$__TBB_NOEXCEPT
(
åue
) {

324 
°d
::
	`sw≠
(
t1
.
my_h™dÀ
, 
t2
.my_handle);

325 #i‡
_WIN32
||
_WIN64


326 
°d
::
	`sw≠
(
t1
.
my_thªad_id
, 
t2
.my_thread_id);

328 
	}
}

330 
«me•a˚
 
	gthis_tbb_thªad
 {

331 
__TBB_DEPRECATED_VERBOSE
 
ölöe
 
	gtbb_thªad
::
id
 
gë_id
(Ë{  
öã∫Æ
::
thªad_gë_id_v3
(); }

333 
__TBB_DEPRECATED_VERBOSE
 
ölöe
 
yõld
(Ë{ 
	göã∫Æ
::
thªad_yõld_v3
(); }

335 
__TBB_DEPRECATED_VERBOSE
 
ölöe
 
¶ìp
(c⁄° 
tick_cou¡
::
öãrvÆ_t
 &
i
) {

336 
öã∫Æ
::
thªad_¶ìp_v3
(
i
);

342 
	~"öã∫Æ/_w¨nög_suµªss_dißbÀ_nŸi˚.h
"

343 #unde‡
__TBB_tbb_thªad_H_ö˛ude_¨ó


	@/usr/include/time.h

22 #i‚def 
_TIME_H


23 
	#_TIME_H
 1

	)

25 
	~<„©uªs.h
>

27 
	#__√ed_size_t


	)

28 
	#__√ed_NULL


	)

29 
	~<°ddef.h
>

33 
	~<bôs/time.h
>

37 
	~<bôs/ty≥s/˛ock_t.h
>

38 
	~<bôs/ty≥s/time_t.h
>

39 
	~<bôs/ty≥s/°ru˘_tm.h
>

41 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_ISOC11


42 
	~<bôs/ty≥s/°ru˘_time•ec.h
>

45 #ifde‡
__USE_POSIX199309


46 
	~<bôs/ty≥s/˛ockid_t.h
>

47 
	~<bôs/ty≥s/timî_t.h
>

48 
	~<bôs/ty≥s/°ru˘_ôimî•ec.h
>

49 
	gsigevít
;

52 #ifde‡
__USE_XOPEN2K


53 #i‚de‡
__pid_t_deföed


54 
__pid_t
 
	tpid_t
;

55 
	#__pid_t_deföed


	)

59 #ifde‡
__USE_XOPEN2K8


60 
	~<bôs/ty≥s/loˇÀ_t.h
>

63 #ifde‡
__USE_ISOC11


65 
	#TIME_UTC
 1

	)

68 
__BEGIN_DECLS


72 
˛ock_t
 
	$˛ock
 (Ë
__THROW
;

75 
time_t
 
	$time
 (
time_t
 *
__timî
Ë
__THROW
;

78 
	$dif·ime
 (
time_t
 
__time1
,Åime_à
__time0
)

79 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

82 
time_t
 
	$mktime
 (
tm
 *
__ç
Ë
__THROW
;

88 
size_t
 
	$°r·ime
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

89 c⁄° *
__ª°ri˘
 
__f‹m©
,

90 c⁄° 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

92 #ifde‡
__USE_XOPEN


95 *
	$°Ωtime
 (c⁄° *
__ª°ri˘
 
__s
,

96 c⁄° *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
)

97 
__THROW
;

100 #ifde‡
__USE_XOPEN2K8


104 
size_t
 
	$°r·ime_l
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

105 c⁄° *
__ª°ri˘
 
__f‹m©
,

106 c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

107 
loˇÀ_t
 
__loc
Ë
__THROW
;

110 #ifde‡
__USE_GNU


111 *
	$°Ωtime_l
 (c⁄° *
__ª°ri˘
 
__s
,

112 c⁄° *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
,

113 
loˇÀ_t
 
__loc
Ë
__THROW
;

119 
tm
 *
	$gmtime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

123 
tm
 *
	$loˇ…ime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

125 #i‡
deföed
 
__USE_POSIX
 || 
	`__GLIBC_USE
 (
ISOC2X
)

128 
tm
 *
	$gmtime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

129 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

133 
tm
 *
	$loˇ…ime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

134 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

139 *
	$as˘ime
 (c⁄° 
tm
 *
__ç
Ë
__THROW
;

142 *
	$˘ime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

144 #i‡
deföed
 
__USE_POSIX
 || 
	`__GLIBC_USE
 (
ISOC2X
)

149 *
	$as˘ime_r
 (c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

150 *
__ª°ri˘
 
__buf
Ë
__THROW
;

153 *
	$˘ime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

154 *
__ª°ri˘
 
__buf
Ë
__THROW
;

159 *
__tz«me
[2];

160 
__daylight
;

161 
__timez⁄e
;

164 #ifdef 
__USE_POSIX


166 *
tz«me
[2];

170 
	$tz£t
 (Ë
__THROW
;

173 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


174 
daylight
;

175 
timez⁄e
;

181 
	#__i¶óp
(
yór
) \

182 ((
yór
Ë% 4 =0 && ((yórË% 100 !0 || (yórË% 400 =0))

	)

185 #ifde‡
__USE_MISC


190 
time_t
 
	$timegm
 (
tm
 *
__ç
Ë
__THROW
;

193 
time_t
 
	$timñoˇl
 (
tm
 *
__ç
Ë
__THROW
;

196 
	$dysize
 (
__yór
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

200 #ifde‡
__USE_POSIX199309


205 
	`«no¶ìp
 (c⁄° 
time•ec
 *
__ªque°ed_time
,

206 
time•ec
 *
__ªmaöög
);

210 
	$˛ock_gëªs
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ªs
Ë
__THROW
;

213 
	$˛ock_gëtime
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ç
Ë
__THROW
;

216 
	$˛ock_£âime
 (
˛ockid_t
 
__˛ock_id
, c⁄° 
time•ec
 *
__ç
)

217 
__THROW
;

219 #ifde‡
__USE_XOPEN2K


224 
	`˛ock_«no¶ìp
 (
˛ockid_t
 
__˛ock_id
, 
__Êags
,

225 c⁄° 
time•ec
 *
__ªq
,

226 
time•ec
 *
__ªm
);

229 
	$˛ock_gë˝u˛ockid
 (
pid_t
 
__pid
, 
˛ockid_t
 *
__˛ock_id
Ë
__THROW
;

234 
	$timî_¸óã
 (
˛ockid_t
 
__˛ock_id
,

235 
sigevít
 *
__ª°ri˘
 
__evp
,

236 
timî_t
 *
__ª°ri˘
 
__timîid
Ë
__THROW
;

239 
	$timî_dñëe
 (
timî_t
 
__timîid
Ë
__THROW
;

242 
	$timî_£âime
 (
timî_t
 
__timîid
, 
__Êags
,

243 c⁄° 
ôimî•ec
 *
__ª°ri˘
 
__vÆue
,

244 
ôimî•ec
 *
__ª°ri˘
 
__ovÆue
Ë
__THROW
;

247 
	$timî_gëtime
 (
timî_t
 
__timîid
, 
ôimî•ec
 *
__vÆue
)

248 
__THROW
;

251 
	$timî_gëovîrun
 (
timî_t
 
__timîid
Ë
__THROW
;

255 #ifde‡
__USE_ISOC11


257 
	$time•ec_gë
 (
time•ec
 *
__ts
, 
__ba£
)

258 
__THROW
 
	`__n⁄nuŒ
 ((1));

262 #ifde‡
__USE_XOPEN_EXTENDED


274 
gëd©e_îr
;

283 
tm
 *
	`gëd©e
 (c⁄° *
__°rög
);

286 #ifde‡
__USE_GNU


297 
	`gëd©e_r
 (c⁄° *
__ª°ri˘
 
__°rög
,

298 
tm
 *
__ª°ri˘
 
__ªsbuÂ
);

301 
__END_DECLS


	@/usr/include/unistd.h

22 #i‚def 
_UNISTD_H


23 
	#_UNISTD_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


32 #ifde‡
__USE_XOPEN2K8


34 
	#_POSIX_VERSION
 200809L

	)

35 #ñi‡
deföed
 
__USE_XOPEN2K


37 
	#_POSIX_VERSION
 200112L

	)

38 #ñi‡
deföed
 
__USE_POSIX199506


40 
	#_POSIX_VERSION
 199506L

	)

41 #ñi‡
deföed
 
__USE_POSIX199309


43 
	#_POSIX_VERSION
 199309L

	)

46 
	#_POSIX_VERSION
 199009L

	)

52 #ifde‡
__USE_XOPEN2K8


53 
	#__POSIX2_THIS_VERSION
 200809L

	)

55 #ñi‡
deföed
 
__USE_XOPEN2K


57 
	#__POSIX2_THIS_VERSION
 200112L

	)

58 #ñi‡
deföed
 
__USE_POSIX199506


60 
	#__POSIX2_THIS_VERSION
 199506L

	)

63 
	#__POSIX2_THIS_VERSION
 199209L

	)

67 
	#_POSIX2_VERSION
 
__POSIX2_THIS_VERSION


	)

70 
	#_POSIX2_C_VERSION
 
__POSIX2_THIS_VERSION


	)

74 
	#_POSIX2_C_BIND
 
__POSIX2_THIS_VERSION


	)

78 
	#_POSIX2_C_DEV
 
__POSIX2_THIS_VERSION


	)

82 
	#_POSIX2_SW_DEV
 
__POSIX2_THIS_VERSION


	)

86 
	#_POSIX2_LOCALEDEF
 
__POSIX2_THIS_VERSION


	)

89 #ifde‡
__USE_XOPEN2K8


90 
	#_XOPEN_VERSION
 700

	)

91 #ñi‡
deföed
 
__USE_XOPEN2K


92 
	#_XOPEN_VERSION
 600

	)

93 #ñi‡
deföed
 
__USE_UNIX98


94 
	#_XOPEN_VERSION
 500

	)

96 
	#_XOPEN_VERSION
 4

	)

100 
	#_XOPEN_XCU_VERSION
 4

	)

103 
	#_XOPEN_XPG2
 1

	)

104 
	#_XOPEN_XPG3
 1

	)

105 
	#_XOPEN_XPG4
 1

	)

108 
	#_XOPEN_UNIX
 1

	)

112 
	#_XOPEN_ENH_I18N
 1

	)

115 
	#_XOPEN_LEGACY
 1

	)

202 
	~<bôs/posix_›t.h
>

205 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


206 
	~<bôs/ívú⁄míts.h
>

210 
	#STDIN_FILENO
 0

	)

211 
	#STDOUT_FILENO
 1

	)

212 
	#STDERR_FILENO
 2

	)

217 
	~<bôs/ty≥s.h
>

219 #i‚def 
__ssize_t_deföed


220 
__ssize_t
 
	tssize_t
;

221 
	#__ssize_t_deföed


	)

224 
	#__√ed_size_t


	)

225 
	#__√ed_NULL


	)

226 
	~<°ddef.h
>

228 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


231 #i‚de‡
__gid_t_deföed


232 
__gid_t
 
	tgid_t
;

233 
	#__gid_t_deföed


	)

236 #i‚de‡
__uid_t_deföed


237 
__uid_t
 
	tuid_t
;

238 
	#__uid_t_deföed


	)

241 #i‚de‡
__off_t_deföed


242 #i‚de‡
__USE_FILE_OFFSET64


243 
__off_t
 
	toff_t
;

245 
__off64_t
 
	toff_t
;

247 
	#__off_t_deföed


	)

249 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


250 
__off64_t
 
	toff64_t
;

251 
	#__off64_t_deföed


	)

254 #i‚de‡
__u£c⁄ds_t_deföed


255 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

256 
	#__u£c⁄ds_t_deföed


	)

259 #i‚de‡
__pid_t_deföed


260 
__pid_t
 
	tpid_t
;

261 
	#__pid_t_deföed


	)

265 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


266 #i‚de‡
__öçå_t_deföed


267 
__öçå_t
 
	töçå_t
;

268 
	#__öçå_t_deföed


	)

272 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


273 #i‚de‡
__sockÀn_t_deföed


274 
__sockÀn_t
 
	tsockÀn_t
;

275 
	#__sockÀn_t_deföed


	)

281 
	#R_OK
 4

	)

282 
	#W_OK
 2

	)

283 
	#X_OK
 1

	)

284 
	#F_OK
 0

	)

287 
	$ac˚ss
 (c⁄° *
__«me
, 
__ty≥
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

289 #ifde‡
__USE_GNU


292 
	$euidac˚ss
 (c⁄° *
__«me
, 
__ty≥
)

293 
__THROW
 
	`__n⁄nuŒ
 ((1));

296 
	$óc˚ss
 (c⁄° *
__«me
, 
__ty≥
)

297 
__THROW
 
	`__n⁄nuŒ
 ((1));

300 #ifde‡
__USE_ATFILE


304 
	$Ác˚sßt
 (
__fd
, c⁄° *
__fûe
, 
__ty≥
, 
__Êag
)

305 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

310 #i‚def 
_STDIO_H


311 
	#SEEK_SET
 0

	)

312 
	#SEEK_CUR
 1

	)

313 
	#SEEK_END
 2

	)

314 #ifde‡
__USE_GNU


315 
	#SEEK_DATA
 3

	)

316 
	#SEEK_HOLE
 4

	)

320 #i‡
deföed
 
__USE_MISC
 && !deföed 
L_SET


322 
	#L_SET
 
SEEK_SET


	)

323 
	#L_INCR
 
SEEK_CUR


	)

324 
	#L_XTND
 
SEEK_END


	)

333 #i‚de‡
__USE_FILE_OFFSET64


334 
__off_t
 
	$l£ek
 (
__fd
, 
__off_t
 
__off£t
, 
__whí˚
Ë
__THROW
;

336 #ifde‡
__REDIRECT_NTH


337 
__off64_t
 
	`__REDIRECT_NTH
 (
l£ek
,

338 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
),

339 
l£ek64
);

341 
	#l£ek
 
l£ek64


	)

344 #ifde‡
__USE_LARGEFILE64


345 
__off64_t
 
	$l£ek64
 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
)

346 
__THROW
;

353 
	`˛o£
 (
__fd
);

360 
ssize_t
 
	$ªad
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
Ë
__wur
;

366 
ssize_t
 
	$wrôe
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
Ë
__wur
;

368 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


369 #i‚de‡
__USE_FILE_OFFSET64


376 
ssize_t
 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

377 
__off_t
 
__off£t
Ë
__wur
;

384 
ssize_t
 
	$pwrôe
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
,

385 
__off_t
 
__off£t
Ë
__wur
;

387 #ifde‡
__REDIRECT


388 
ssize_t
 
	`__REDIRECT
 (
¥ód
, (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

389 
__off64_t
 
__off£t
),

390 
¥ód64
Ë
__wur
;

391 
ssize_t
 
	`__REDIRECT
 (
pwrôe
, (
__fd
, c⁄° *
__buf
,

392 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
),

393 
pwrôe64
Ë
__wur
;

395 
	#¥ód
 
¥ód64


	)

396 
	#pwrôe
 
pwrôe64


	)

400 #ifde‡
__USE_LARGEFILE64


404 
ssize_t
 
	$¥ód64
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

405 
__off64_t
 
__off£t
Ë
__wur
;

408 
ssize_t
 
	$pwrôe64
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
,

409 
__off64_t
 
__off£t
Ë
__wur
;

417 
	$pùe
 (
__pùedes
[2]Ë
__THROW
 
__wur
;

419 #ifde‡
__USE_GNU


422 
	$pùe2
 (
__pùedes
[2], 
__Êags
Ë
__THROW
 
__wur
;

432 
	$Æ¨m
 (
__£c⁄ds
Ë
__THROW
;

444 
	`¶ìp
 (
__£c⁄ds
);

446 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

447 || 
deföed
 
__USE_MISC


452 
__u£c⁄ds_t
 
	$uÆ¨m
 (
__u£c⁄ds_t
 
__vÆue
, __u£c⁄ds_à
__öãrvÆ
)

453 
__THROW
;

460 
	`u¶ìp
 (
__u£c⁄ds_t
 
__u£c⁄ds
);

469 
	`∑u£
 ();

473 
	$chown
 (c⁄° *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

474 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

476 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


478 
	$fchown
 (
__fd
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
Ë
__THROW
 
__wur
;

483 
	$lchown
 (c⁄° *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

484 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

488 #ifde‡
__USE_ATFILE


491 
	$fchow«t
 (
__fd
, c⁄° *
__fûe
, 
__uid_t
 
__ow√r
,

492 
__gid_t
 
__group
, 
__Êag
)

493 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

497 
	$chdú
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

499 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


501 
	$fchdú
 (
__fd
Ë
__THROW
 
__wur
;

511 *
	$gëcwd
 (*
__buf
, 
size_t
 
__size
Ë
__THROW
 
__wur
;

513 #ifdef 
__USE_GNU


517 *
	$gë_cuºít_dú_«me
 (Ë
__THROW
;

520 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

521 || 
deföed
 
__USE_MISC


525 *
	$gëwd
 (*
__buf
)

526 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
 
__wur
;

531 
	$dup
 (
__fd
Ë
__THROW
 
__wur
;

534 
	$dup2
 (
__fd
, 
__fd2
Ë
__THROW
;

536 #ifde‡
__USE_GNU


539 
	$dup3
 (
__fd
, 
__fd2
, 
__Êags
Ë
__THROW
;

543 **
__ívú⁄
;

544 #ifde‡
__USE_GNU


545 **
ívú⁄
;

551 
	$execve
 (c⁄° *
__∑th
, *c⁄° 
__¨gv
[],

552 *c⁄° 
__ívp
[]Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

554 #ifde‡
__USE_XOPEN2K8


557 
	$„xecve
 (
__fd
, *c⁄° 
__¨gv
[], *c⁄° 
__ívp
[])

558 
__THROW
 
	`__n⁄nuŒ
 ((2));

563 
	$execv
 (c⁄° *
__∑th
, *c⁄° 
__¨gv
[])

564 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

568 
	$exe˛e
 (c⁄° *
__∑th
, c⁄° *
__¨g
, ...)

569 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

573 
	$exe˛
 (c⁄° *
__∑th
, c⁄° *
__¨g
, ...)

574 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

578 
	$execvp
 (c⁄° *
__fûe
, *c⁄° 
__¨gv
[])

579 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

584 
	$exe˛p
 (c⁄° *
__fûe
, c⁄° *
__¨g
, ...)

585 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

587 #ifde‡
__USE_GNU


590 
	$execv≥
 (c⁄° *
__fûe
, *c⁄° 
__¨gv
[],

591 *c⁄° 
__ívp
[])

592 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

596 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


598 
	$ni˚
 (
__öc
Ë
__THROW
 
__wur
;

603 
	$_exô
 (
__°©us
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

609 
	~<bôs/c⁄‚ame.h
>

612 
	$∑thc⁄f
 (c⁄° *
__∑th
, 
__«me
)

613 
__THROW
 
	`__n⁄nuŒ
 ((1));

616 
	$Â©hc⁄f
 (
__fd
, 
__«me
Ë
__THROW
;

619 
	$sysc⁄f
 (
__«me
Ë
__THROW
;

621 #ifdef 
__USE_POSIX2


623 
size_t
 
	$c⁄f°r
 (
__«me
, *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

628 
__pid_t
 
	$gëpid
 (Ë
__THROW
;

631 
__pid_t
 
	$gëµid
 (Ë
__THROW
;

634 
__pid_t
 
	$gëpgΩ
 (Ë
__THROW
;

637 
__pid_t
 
	$__gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

638 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


639 
__pid_t
 
	$gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

646 
	$£çgid
 (
__pid_t
 
__pid
, __pid_à
__pgid
Ë
__THROW
;

648 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


660 
	$£çgΩ
 (Ë
__THROW
;

667 
__pid_t
 
	$£tsid
 (Ë
__THROW
;

669 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


671 
__pid_t
 
	$gësid
 (
__pid_t
 
__pid
Ë
__THROW
;

675 
__uid_t
 
	$gëuid
 (Ë
__THROW
;

678 
__uid_t
 
	$gëeuid
 (Ë
__THROW
;

681 
__gid_t
 
	$gëgid
 (Ë
__THROW
;

684 
__gid_t
 
	$gëegid
 (Ë
__THROW
;

689 
	$gëgroups
 (
__size
, 
__gid_t
 
__li°
[]Ë
__THROW
 
__wur
;

691 #ifdef 
__USE_GNU


693 
	$group_membî
 (
__gid_t
 
__gid
Ë
__THROW
;

700 
	$£tuid
 (
__uid_t
 
__uid
Ë
__THROW
 
__wur
;

702 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


705 
	$£åeuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
Ë
__THROW
 
__wur
;

708 #ifde‡
__USE_XOPEN2K


710 
	$£ãuid
 (
__uid_t
 
__uid
Ë
__THROW
 
__wur
;

717 
	$£tgid
 (
__gid_t
 
__gid
Ë
__THROW
 
__wur
;

719 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


722 
	$£åegid
 (
__gid_t
 
__rgid
, __gid_à
__egid
Ë
__THROW
 
__wur
;

725 #ifde‡
__USE_XOPEN2K


727 
	$£ãgid
 (
__gid_t
 
__gid
Ë
__THROW
 
__wur
;

730 #ifde‡
__USE_GNU


733 
	$gëªsuid
 (
__uid_t
 *
__ruid
, __uid_à*
__euid
, __uid_à*
__suid
)

734 
__THROW
;

738 
	$gëªsgid
 (
__gid_t
 *
__rgid
, __gid_à*
__egid
, __gid_à*
__sgid
)

739 
__THROW
;

743 
	$£åesuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
, __uid_à
__suid
)

744 
__THROW
 
__wur
;

748 
	$£åesgid
 (
__gid_t
 
__rgid
, __gid_à
__egid
, __gid_à
__sgid
)

749 
__THROW
 
__wur
;

756 
__pid_t
 
	$f‹k
 (Ë
__THROWNL
;

758 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

759 || 
deföed
 
__USE_MISC


764 
__pid_t
 
	$vf‹k
 (Ë
__THROW
;

770 *
	$ây«me
 (
__fd
Ë
__THROW
;

774 
	$ây«me_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

775 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

779 
	$ißây
 (
__fd
Ë
__THROW
;

781 #ifde‡
__USE_MISC


784 
	$ây¶Ÿ
 (Ë
__THROW
;

789 
	$lök
 (c⁄° *
__‰om
, c⁄° *
__to
)

790 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

792 #ifde‡
__USE_ATFILE


795 
	$lök©
 (
__‰omfd
, c⁄° *
__‰om
, 
__tofd
,

796 c⁄° *
__to
, 
__Êags
)

797 
__THROW
 
	`__n⁄nuŒ
 ((2, 4)Ë
__wur
;

800 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


802 
	$symlök
 (c⁄° *
__‰om
, c⁄° *
__to
)

803 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

808 
ssize_t
 
	$ªadlök
 (c⁄° *
__ª°ri˘
 
__∑th
,

809 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

810 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

813 #ifde‡
__USE_ATFILE


815 
	$symlök©
 (c⁄° *
__‰om
, 
__tofd
,

816 c⁄° *
__to
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

819 
ssize_t
 
	$ªadlök©
 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

820 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

821 
__THROW
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

825 
	$u∆ök
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

827 #ifde‡
__USE_ATFILE


829 
	$u∆ök©
 (
__fd
, c⁄° *
__«me
, 
__Êag
)

830 
__THROW
 
	`__n⁄nuŒ
 ((2));

834 
	$rmdú
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

838 
__pid_t
 
	$tcgëpgΩ
 (
__fd
Ë
__THROW
;

841 
	$tc£çgΩ
 (
__fd
, 
__pid_t
 
__pgΩ_id
Ë
__THROW
;

848 *
	`gëlogö
 ();

849 #ifde‡
__USE_POSIX199506


856 
	$gëlogö_r
 (*
__«me
, 
size_t
 
__«me_Àn
Ë
	`__n⁄nuŒ
 ((1));

859 #ifdef 
__USE_MISC


861 
	$£éogö
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

865 #ifdef 
__USE_POSIX2


869 
	~<bôs/gë›t_posix.h
>

873 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


877 
	$gëho°«me
 (*
__«me
, 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

881 #i‡
deföed
 
__USE_MISC


884 
	$£tho°«me
 (c⁄° *
__«me
, 
size_t
 
__Àn
)

885 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

889 
	$£tho°id
 (
__id
Ë
__THROW
 
__wur
;

895 
	$gëdomaö«me
 (*
__«me
, 
size_t
 
__Àn
)

896 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

897 
	$£tdomaö«me
 (c⁄° *
__«me
, 
size_t
 
__Àn
)

898 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

904 
	$vh™gup
 (Ë
__THROW
;

907 
	$ªvoke
 (c⁄° *
__fûe
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

915 
	$¥ofû
 (*
__ßm∂e_buf„r
, 
size_t
 
__size
,

916 
size_t
 
__off£t
, 
__sˇÀ
)

917 
__THROW
 
	`__n⁄nuŒ
 ((1));

923 
	$ac˘
 (c⁄° *
__«me
Ë
__THROW
;

927 *
	$gëu£rshñl
 (Ë
__THROW
;

928 
	$ídu£rshñl
 (Ë
__THROW
;

929 
	$£tu£rshñl
 (Ë
__THROW
;

935 
	$d´m⁄
 (
__nochdú
, 
__no˛o£
Ë
__THROW
 
__wur
;

939 #i‡
deföed
 
__USE_MISC
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

942 
	$chroŸ
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

946 *
	$gë∑ss
 (c⁄° *
__¥om±
Ë
	`__n⁄nuŒ
 ((1));

954 
	`fsync
 (
__fd
);

957 #ifde‡
__USE_GNU


960 
	$syncfs
 (
__fd
Ë
__THROW
;

964 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


967 
	`gëho°id
 ();

970 
	$sync
 (Ë
__THROW
;

973 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K


976 
	$gë∑gesize
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

981 
	$gëdèbÀsize
 (Ë
__THROW
;

987 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


990 #i‚de‡
__USE_FILE_OFFSET64


991 
	$åunˇã
 (c⁄° *
__fûe
, 
__off_t
 
__Àngth
)

992 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

994 #ifde‡
__REDIRECT_NTH


995 
	`__REDIRECT_NTH
 (
åunˇã
,

996 (c⁄° *
__fûe
, 
__off64_t
 
__Àngth
),

997 
åunˇã64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

999 
	#åunˇã
 
åunˇã64


	)

1002 #ifde‡
__USE_LARGEFILE64


1003 
	$åunˇã64
 (c⁄° *
__fûe
, 
__off64_t
 
__Àngth
)

1004 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1009 #i‡
deföed
 
__USE_POSIX199309
 \

1010 || 
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


1013 #i‚de‡
__USE_FILE_OFFSET64


1014 
	$·runˇã
 (
__fd
, 
__off_t
 
__Àngth
Ë
__THROW
 
__wur
;

1016 #ifde‡
__REDIRECT_NTH


1017 
	`__REDIRECT_NTH
 (
·runˇã
, (
__fd
, 
__off64_t
 
__Àngth
),

1018 
·runˇã64
Ë
__wur
;

1020 
	#·runˇã
 
·runˇã64


	)

1023 #ifde‡
__USE_LARGEFILE64


1024 
	$·runˇã64
 (
__fd
, 
__off64_t
 
__Àngth
Ë
__THROW
 
__wur
;

1030 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

1031 || 
deföed
 
__USE_MISC


1035 
	$brk
 (*
__addr
Ë
__THROW
 
__wur
;

1041 *
	$sbrk
 (
öçå_t
 
__dñè
Ë
__THROW
;

1045 #ifde‡
__USE_MISC


1056 
	$sysˇŒ
 (
__sy¢o
, ...Ë
__THROW
;

1061 #i‡(
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
Ë&& !deföed 
F_LOCK


1073 
	#F_ULOCK
 0

	)

1074 
	#F_LOCK
 1

	)

1075 
	#F_TLOCK
 2

	)

1076 
	#F_TEST
 3

	)

1078 #i‚de‡
__USE_FILE_OFFSET64


1079 
	$lockf
 (
__fd
, 
__cmd
, 
__off_t
 
__Àn
Ë
__wur
;

1081 #ifde‡
__REDIRECT


1082 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
),

1083 
lockf64
Ë
__wur
;

1085 
	#lockf
 
lockf64


	)

1088 #ifde‡
__USE_LARGEFILE64


1089 
	$lockf64
 (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
Ë
__wur
;

1094 #ifde‡
__USE_GNU


1099 
	#TEMP_FAILURE_RETRY
(
ex¥essi⁄
) \

1100 (
__exãnsi⁄__
 \

1101 ({ 
__ªsu…
; \

1102 dÿ
__ªsu…
 = (Ë(
ex¥essi⁄
); \

1103 
__ªsu…
 =-1L && 
î∫o
 =
EINTR
); \

1104 
__ªsu…
; 
	}
}))

	)

1107 
ssize_t
 
c›y_fûe_ønge
 (
__öfd
, 
__off64_t
 *
__pöoff
,

1108 
__outfd
, 
__off64_t
 *
__poutoff
,

1109 
size_t
 
__Àngth
, 
__Êags
);

1112 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_UNIX98


1115 
fd©async
 (
__fûdes
);

1118 #ifde‡
__USE_MISC


1124 *
	$¸y±
 (c⁄° *
__key
, c⁄° *
__ß…
)

1125 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1128 #ifdef 
__USE_XOPEN


1133 
	$swab
 (c⁄° *
__ª°ri˘
 
__‰om
, *__ª°ri˘ 
__to
,

1134 
ssize_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1141 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K


1143 *
	$˘îmid
 (*
__s
Ë
__THROW
;

1146 *
	`cu£rid
 (*
__s
);

1152 #i‡
deföed
 
__USE_UNIX98
 && !deföed 
__USE_XOPEN2K


1153 
	$±hªad_©f‹k
 ((*
__¥ï¨e
) (),

1154 (*
__∑ª¡
) (),

1155 (*
__chûd
Ë()Ë
__THROW
;

1158 #ifde‡
__USE_MISC


1161 
	$gëíå›y
 (*
__buf„r
, 
size_t
 
__Àngth
Ë
__wur
;

1165 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


1166 
	~<bôs/uni°d.h
>

1170 
	~<bôs/uni°d_ext.h
>

1172 
__END_DECLS


	@/usr/include/wchar.h

23 #i‚de‡
_WCHAR_H


24 
	#_WCHAR_H
 1

	)

26 
	#__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION


	)

27 
	~<bôs/libc-hódî-°¨t.h
>

30 
	~<bôs/Êﬂä.h
>

32 
	#__√ed_size_t


	)

33 
	#__√ed_wch¨_t


	)

34 
	#__√ed_NULL


	)

35 
	~<°ddef.h
>

37 
	#__√ed___va_li°


	)

38 
	~<°d¨g.h
>

40 
	~<bôs/wch¨.h
>

41 
	~<bôs/ty≥s/wöt_t.h
>

42 
	~<bôs/ty≥s/mb°©e_t.h
>

43 
	~<bôs/ty≥s/__FILE.h
>

45 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


46 
	~<bôs/ty≥s/FILE.h
>

48 #ifde‡
__USE_XOPEN2K8


49 
	~<bôs/ty≥s/loˇÀ_t.h
>

53 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

54 
	#__CORRECT_ISO_CPP_WCHAR_H_PROTO


	)

57 #i‚de‡
WCHAR_MIN


59 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

60 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

63 #i‚de‡
WEOF


64 
	#WEOF
 (0xffffffffu)

	)

74 #i‡(
deföed
 
__USE_XOPEN
 && !deföed 
__USE_GNU
 \

75 && !(
deföed
 
	g__USE_XOPEN2K
 && !deföed 
	g__USE_XOPEN2KXSI
))

76 
	~<bôs/w˘y≥-wch¨.h
>

79 
__BEGIN_DECLS


83 
	gtm
;

87 
wch¨_t
 *
	$wcs˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

88 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
)

89 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

92 
wch¨_t
 *
	$wc¢˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

93 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

94 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

97 
wch¨_t
 *
	$wcsˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

98 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
)

99 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

101 
wch¨_t
 *
	$wc¢ˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

102 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

103 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

106 
	$wcscmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
)

107 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

109 
	$wc¢cmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

110 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

112 #ifde‡
__USE_XOPEN2K8


114 
	$wcsˇ£cmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
Ë
__THROW
;

117 
	$wc¢ˇ£cmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

118 
size_t
 
__n
Ë
__THROW
;

122 
	$wcsˇ£cmp_l
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

123 
loˇÀ_t
 
__loc
Ë
__THROW
;

125 
	$wc¢ˇ£cmp_l
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

126 
size_t
 
__n
, 
loˇÀ_t
 
__loc
Ë
__THROW
;

131 
	$wcscﬁl
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
Ë
__THROW
;

135 
size_t
 
	$wcsx‰m
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

136 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

138 #ifde‡
__USE_XOPEN2K8


144 
	$wcscﬁl_l
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

145 
loˇÀ_t
 
__loc
Ë
__THROW
;

150 
size_t
 
	$wcsx‰m_l
 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

151 
size_t
 
__n
, 
loˇÀ_t
 
__loc
Ë
__THROW
;

154 
wch¨_t
 *
	$wcsdup
 (c⁄° 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_mÆloc__
;

158 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


159 "C++" 
wch¨_t
 *
	$wcschr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

160 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

161 "C++" c⁄° 
wch¨_t
 *
	$wcschr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

162 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

164 
wch¨_t
 *
	$wcschr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

165 
__THROW
 
__©åibuã_puª__
;

168 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


169 "C++" 
wch¨_t
 *
	$wc§chr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

170 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

171 "C++" c⁄° 
wch¨_t
 *
	$wc§chr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

172 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

174 
wch¨_t
 *
	$wc§chr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

175 
__THROW
 
__©åibuã_puª__
;

178 #ifde‡
__USE_GNU


181 
wch¨_t
 *
	$wcsch∫ul
 (c⁄° 
wch¨_t
 *
__s
, wch¨_à
__wc
)

182 
__THROW
 
__©åibuã_puª__
;

187 
size_t
 
	$wcsc•n
 (c⁄° 
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ªje˘
)

188 
__THROW
 
__©åibuã_puª__
;

191 
size_t
 
	$wcs•n
 (c⁄° 
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ac˚±
)

192 
__THROW
 
__©åibuã_puª__
;

194 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


195 "C++" 
wch¨_t
 *
	$wc•brk
 (
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ac˚±
)

196 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

197 "C++" c⁄° 
wch¨_t
 *
	$wc•brk
 (c⁄° 
wch¨_t
 *
__wcs
,

198 c⁄° 
wch¨_t
 *
__ac˚±
)

199 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

201 
wch¨_t
 *
	$wc•brk
 (c⁄° 
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ac˚±
)

202 
__THROW
 
__©åibuã_puª__
;

205 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


206 "C++" 
wch¨_t
 *
	$wcs°r
 (
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

207 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

208 "C++" c⁄° 
wch¨_t
 *
	$wcs°r
 (c⁄° 
wch¨_t
 *
__hay°ack
,

209 c⁄° 
wch¨_t
 *
__√edÀ
)

210 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

212 
wch¨_t
 *
	$wcs°r
 (c⁄° 
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

213 
__THROW
 
__©åibuã_puª__
;

217 
wch¨_t
 *
	$wc°ok
 (
wch¨_t
 *
__ª°ri˘
 
__s
,

218 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__dñim
,

219 
wch¨_t
 **
__ª°ri˘
 
__±r
Ë
__THROW
;

222 
size_t
 
	$wc¶í
 (c⁄° 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_puª__
;

224 #ifde‡
__USE_XOPEN


226 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


227 "C++" 
wch¨_t
 *
	$wcswcs
 (
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

228 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

229 "C++" c⁄° 
wch¨_t
 *
	$wcswcs
 (c⁄° 
wch¨_t
 *
__hay°ack
,

230 c⁄° 
wch¨_t
 *
__√edÀ
)

231 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

233 
wch¨_t
 *
	$wcswcs
 (c⁄° 
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

234 
__THROW
 
__©åibuã_puª__
;

238 #ifde‡
__USE_XOPEN2K8


240 
size_t
 
	$wc¢Àn
 (c⁄° 
wch¨_t
 *
__s
, 
size_t
 
__maxÀn
)

241 
__THROW
 
__©åibuã_puª__
;

246 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


247 "C++" 
wch¨_t
 *
	$wmemchr
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

248 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

249 "C++" c⁄° 
wch¨_t
 *
	$wmemchr
 (c⁄° 
wch¨_t
 *
__s
, wch¨_à
__c
,

250 
size_t
 
__n
)

251 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

253 
wch¨_t
 *
	$wmemchr
 (c⁄° 
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

254 
__THROW
 
__©åibuã_puª__
;

258 
	$wmemcmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

259 
__THROW
 
__©åibuã_puª__
;

262 
wch¨_t
 *
	$wmem˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

263 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

267 
wch¨_t
 *
	$wmemmove
 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

268 
__THROW
;

271 
wch¨_t
 *
	$wmem£t
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
Ë
__THROW
;

273 #ifde‡
__USE_GNU


276 
wch¨_t
 *
	$wmemp˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

277 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
)

278 
__THROW
;

284 
wöt_t
 
	$btowc
 (
__c
Ë
__THROW
;

288 
	$w˘ob
 (
wöt_t
 
__c
Ë
__THROW
;

292 
	$mbsöô
 (c⁄° 
mb°©e_t
 *
__ps
Ë
__THROW
 
__©åibuã_puª__
;

296 
size_t
 
	$mbπowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

297 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

298 
mb°©e_t
 *
__ª°ri˘
 
__p
Ë
__THROW
;

301 
size_t
 
	$w¸tomb
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wc
,

302 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

305 
size_t
 
	$__mbæí
 (c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

306 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

307 
size_t
 
	$mbæí
 (c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

308 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

310 #ifde‡
__USE_EXTERN_INLINES


316 
wöt_t
 
	$__btowc_Æüs
 (
__c
Ë
	`__asm
 ("btowc");

317 
__exã∫_ölöe
 
wöt_t


318 
	`__NTH
 (
	$btowc
 (
__c
))

319 {  (
	`__buûtö_c⁄°™t_p
 (
__c
) && __c >= '\0' && __c <= '\x7f'

320 ? (
wöt_t
Ë
__c
 : 
	`__btowc_Æüs
 (__c)); 
	}
}

322 
	$__w˘ob_Æüs
 (
wöt_t
 
__c
Ë
	`__asm
 ("wctob");

323 
__exã∫_ölöe
 

324 
	`__NTH
 (
	$w˘ob
 (
wöt_t
 
__wc
))

325 {  (
	`__buûtö_c⁄°™t_p
 (
__wc
Ë&& __w¯>
L
'\0' && __wc <= L'\x7f'

326 ? (Ë
__wc
 : 
	`__w˘ob_Æüs
 (__wc)); 
	}
}

328 
__exã∫_ölöe
 
size_t


329 
__NTH
 (
	$mbæí
 (c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

330 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

331 {  (
__ps
 !
NULL


332 ? 
	`mbπowc
 (
NULL
, 
__s
, 
__n
, 
__ps
Ë: 
	`__mbæí
 (__s, __n, NULL)); 
	}
}

337 
size_t
 
	$mb§towcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

338 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

339 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

343 
size_t
 
	$wc§tombs
 (*
__ª°ri˘
 
__d°
,

344 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

345 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

348 #ifdef 
__USE_XOPEN2K8


351 
size_t
 
	$mb¢πowcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

352 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

353 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

357 
size_t
 
	$wc¢πombs
 (*
__ª°ri˘
 
__d°
,

358 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

359 
size_t
 
__nwc
, size_à
__Àn
,

360 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

365 #ifde‡
__USE_XOPEN


367 
	$wcwidth
 (
wch¨_t
 
__c
Ë
__THROW
;

371 
	$wcswidth
 (c⁄° 
wch¨_t
 *
__s
, 
size_t
 
__n
Ë
__THROW
;

377 
	$wc°od
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

378 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

380 #ifde‡
__USE_ISOC99


382 
	$wc°of
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

383 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

384 
	$wc°ﬁd
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

385 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

390 #i‡
__HAVE_FLOAT16
 && 
deföed
 
__USE_GNU


391 
_Flﬂt16
 
	$wc°of16
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

392 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

395 #i‡
__HAVE_FLOAT32
 && 
deföed
 
__USE_GNU


396 
_Flﬂt32
 
	$wc°of32
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

397 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

400 #i‡
__HAVE_FLOAT64
 && 
deföed
 
__USE_GNU


401 
_Flﬂt64
 
	$wc°of64
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

402 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

405 #i‡
__HAVE_FLOAT128
 && 
deföed
 
__USE_GNU


406 
_Flﬂt128
 
	$wc°of128
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

407 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

410 #i‡
__HAVE_FLOAT32X
 && 
deföed
 
__USE_GNU


411 
_Flﬂt32x
 
	$wc°of32x
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

412 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

415 #i‡
__HAVE_FLOAT64X
 && 
deföed
 
__USE_GNU


416 
_Flﬂt64x
 
	$wc°of64x
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

417 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

420 #i‡
__HAVE_FLOAT128X
 && 
deföed
 
__USE_GNU


421 
_Flﬂt128x
 
	$wc°of128x
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

422 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

428 
	$wc°ﬁ
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

429 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

433 
	$wc°oul
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

434 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

435 
__THROW
;

437 #ifde‡
__USE_ISOC99


440 
__exãnsi⁄__


441 
	$wc°ﬁl
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

442 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

443 
__THROW
;

447 
__exãnsi⁄__


448 
	$wc°ouŒ
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

449 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

450 
__ba£
Ë
__THROW
;

453 #ifde‡
__USE_GNU


456 
__exãnsi⁄__


457 
	$wc°oq
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

458 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

459 
__THROW
;

463 
__exãnsi⁄__


464 
	$wc°ouq
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

465 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

466 
__ba£
Ë
__THROW
;

469 #ifde‡
__USE_GNU


473 
	$wc°ﬁ_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

474 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

475 
loˇÀ_t
 
__loc
Ë
__THROW
;

477 
	$wc°oul_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

478 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

479 
__ba£
, 
loˇÀ_t
 
__loc
Ë
__THROW
;

481 
__exãnsi⁄__


482 
	$wc°ﬁl_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

483 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

484 
__ba£
, 
loˇÀ_t
 
__loc
Ë
__THROW
;

486 
__exãnsi⁄__


487 
	$wc°ouŒ_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

488 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

489 
__ba£
, 
loˇÀ_t
 
__loc
)

490 
__THROW
;

492 
	$wc°od_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

493 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
loˇÀ_t
 
__loc
)

494 
__THROW
;

496 
	$wc°of_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

497 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
loˇÀ_t
 
__loc
)

498 
__THROW
;

500 
	$wc°ﬁd_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

501 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

502 
loˇÀ_t
 
__loc
Ë
__THROW
;

504 #i‡
__HAVE_FLOAT16


505 
_Flﬂt16
 
	$wc°of16_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

506 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

507 
loˇÀ_t
 
__loc
Ë
__THROW
;

510 #i‡
__HAVE_FLOAT32


511 
_Flﬂt32
 
	$wc°of32_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

512 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

513 
loˇÀ_t
 
__loc
Ë
__THROW
;

516 #i‡
__HAVE_FLOAT64


517 
_Flﬂt64
 
	$wc°of64_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

518 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

519 
loˇÀ_t
 
__loc
Ë
__THROW
;

522 #i‡
__HAVE_FLOAT128


523 
_Flﬂt128
 
	$wc°of128_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

524 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

525 
loˇÀ_t
 
__loc
Ë
__THROW
;

528 #i‡
__HAVE_FLOAT32X


529 
_Flﬂt32x
 
	$wc°of32x_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

530 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

531 
loˇÀ_t
 
__loc
Ë
__THROW
;

534 #i‡
__HAVE_FLOAT64X


535 
_Flﬂt64x
 
	$wc°of64x_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

536 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

537 
loˇÀ_t
 
__loc
Ë
__THROW
;

540 #i‡
__HAVE_FLOAT128X


541 
_Flﬂt128x
 
	$wc°of128x_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

542 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

543 
loˇÀ_t
 
__loc
Ë
__THROW
;

548 #ifde‡
__USE_XOPEN2K8


551 
wch¨_t
 *
	$w˝˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

552 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

556 
wch¨_t
 *
	$w˝n˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

557 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

558 
__THROW
;

564 #i‡
deföed
 
__USE_XOPEN2K8
 || 
	`__GLIBC_USE
 (
LIB_EXT2
)

567 
__FILE
 *
	$›í_wmem°ªam
 (
wch¨_t
 **
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
;

570 #i‡
deföed
 
__USE_ISOC95
 || deföed 
__USE_UNIX98


573 
	$fwide
 (
__FILE
 *
__Â
, 
__mode
Ë
__THROW
;

580 
	`fw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

581 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

587 
	`w¥ötf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

590 
	$sw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

591 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

592 
__THROW
 ;

598 
	`vfw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__s
,

599 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

600 
__gnuc_va_li°
 
__¨g
)

606 
	`vw¥ötf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

607 
__gnuc_va_li°
 
__¨g
)

611 
	$vsw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

612 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

613 
__gnuc_va_li°
 
__¨g
)

614 
__THROW
 ;

621 
	`fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

622 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

628 
	`wsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

631 
	$swsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

632 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

633 
__THROW
 ;

638 #i‡!
	`__GLIBC_USE
 (
DEPRECATED_SCANF
Ë&& !
deföed
 
__LDBL_COMPAT


639 #ifde‡
__REDIRECT


640 
	`__REDIRECT
 (
fwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__°ªam
,

641 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

642 
__isoc99_fwsˇnf
)

644 
	`__REDIRECT
 (
wsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

645 
__isoc99_wsˇnf
)

647 
	`__REDIRECT_NTH
 (
swsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

648 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

649 ...), 
__isoc99_swsˇnf
)

652 
	`__isoc99_fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

653 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

654 
	`__isoc99_wsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

655 
	$__isoc99_swsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

656 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

657 
__THROW
;

658 
	#fwsˇnf
 
__isoc99_fwsˇnf


	)

659 
	#wsˇnf
 
__isoc99_wsˇnf


	)

660 
	#swsˇnf
 
__isoc99_swsˇnf


	)

666 #ifde‡
__USE_ISOC99


671 
	`vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

672 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

673 
__gnuc_va_li°
 
__¨g
)

679 
	`vwsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

680 
__gnuc_va_li°
 
__¨g
)

683 
	$vswsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

684 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

685 
__gnuc_va_li°
 
__¨g
)

686 
__THROW
 ;

689 #i‡!
	`__GLIBC_USE
 (
DEPRECATED_SCANF
) \

690 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

691 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

692 #ifde‡
__REDIRECT


693 
	`__REDIRECT
 (
vfwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__s
,

694 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

695 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vfwsˇnf
)

697 
	`__REDIRECT
 (
vwsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

698 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vwsˇnf
)

700 
	`__REDIRECT_NTH
 (
vswsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

701 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

702 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vswsˇnf
)

705 
	`__isoc99_vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

706 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

707 
__gnuc_va_li°
 
__¨g
);

708 
	`__isoc99_vwsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

709 
__gnuc_va_li°
 
__¨g
);

710 
	$__isoc99_vswsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

711 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

712 
__gnuc_va_li°
 
__¨g
Ë
__THROW
;

713 
	#vfwsˇnf
 
__isoc99_vfwsˇnf


	)

714 
	#vwsˇnf
 
__isoc99_vwsˇnf


	)

715 
	#vswsˇnf
 
__isoc99_vswsˇnf


	)

726 
wöt_t
 
	`fgëwc
 (
__FILE
 *
__°ªam
);

727 
wöt_t
 
	`gëwc
 (
__FILE
 *
__°ªam
);

733 
wöt_t
 
	`gëwch¨
 ();

740 
wöt_t
 
	`Âutwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

741 
wöt_t
 
	`putwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

747 
wöt_t
 
	`putwch¨
 (
wch¨_t
 
__wc
);

755 
wch¨_t
 *
	`fgëws
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

756 
__FILE
 *
__ª°ri˘
 
__°ªam
);

762 
	`Âutws
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__ws
,

763 
__FILE
 *
__ª°ri˘
 
__°ªam
);

770 
wöt_t
 
	`ungëwc
 (wöt_à
__wc
, 
__FILE
 *
__°ªam
);

773 #ifde‡
__USE_GNU


781 
wöt_t
 
	`gëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

782 
wöt_t
 
	`gëwch¨_u∆ocked
 ();

790 
wöt_t
 
	`fgëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

798 
wöt_t
 
	`Âutwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

807 
wöt_t
 
	`putwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

808 
wöt_t
 
	`putwch¨_u∆ocked
 (
wch¨_t
 
__wc
);

817 
wch¨_t
 *
	`fgëws_u∆ocked
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

818 
__FILE
 *
__ª°ri˘
 
__°ªam
);

826 
	`Âutws_u∆ocked
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__ws
,

827 
__FILE
 *
__ª°ri˘
 
__°ªam
);

834 
size_t
 
	$wcs·ime
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

835 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

836 c⁄° 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

838 #ifde‡
__USE_GNU


841 
size_t
 
	$wcs·ime_l
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

842 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

843 c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

844 
loˇÀ_t
 
__loc
Ë
__THROW
;

848 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


849 
	~<bôs/wch¨2.h
>

852 #ifde‡
__LDBL_COMPAT


853 
	~<bôs/wch¨-ldbl.h
>

856 
__END_DECLS


	@/usr/include/alloca.h

18 #i‚def 
_ALLOCA_H


19 
	#_ALLOCA_H
 1

	)

21 
	~<„©uªs.h
>

23 
	#__√ed_size_t


	)

24 
	~<°ddef.h
>

26 
	g__BEGIN_DECLS


29 #unde‡
Æloˇ


32 *
	$Æloˇ
 (
size_t
 
__size
Ë
__THROW
;

34 #ifdef 
__GNUC__


35 
	#Æloˇ
(
size
Ë
	`__buûtö_Æloˇ
 (size)

	)

38 
__END_DECLS


	@/usr/include/endian.h

18 #i‚def 
_ENDIAN_H


19 
	#_ENDIAN_H
 1

	)

21 
	~<„©uªs.h
>

24 
	~<bôs/ídün.h
>

26 #ifde‡
__USE_MISC


27 
	#LITTLE_ENDIAN
 
__LITTLE_ENDIAN


	)

28 
	#BIG_ENDIAN
 
__BIG_ENDIAN


	)

29 
	#PDP_ENDIAN
 
__PDP_ENDIAN


	)

30 
	#BYTE_ORDER
 
__BYTE_ORDER


	)

33 #i‡
deföed
 
__USE_MISC
 && !deföed 
__ASSEMBLER__


35 
	~<bôs/byãsw≠.h
>

36 
	~<bôs/uöä-idítôy.h
>

38 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


39 
	#htobe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

40 
	#htﬁe16
(
x
Ë
	`__uöt16_idítôy
 (x)

	)

41 
	#be16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

42 
	#À16toh
(
x
Ë
	`__uöt16_idítôy
 (x)

	)

44 
	#htobe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

45 
	#htﬁe32
(
x
Ë
	`__uöt32_idítôy
 (x)

	)

46 
	#be32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

47 
	#À32toh
(
x
Ë
	`__uöt32_idítôy
 (x)

	)

49 
	#htobe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

50 
	#htﬁe64
(
x
Ë
	`__uöt64_idítôy
 (x)

	)

51 
	#be64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

52 
	#À64toh
(
x
Ë
	`__uöt64_idítôy
 (x)

	)

55 
	#htobe16
(
x
Ë
	`__uöt16_idítôy
 (x)

	)

56 
	#htﬁe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

57 
	#be16toh
(
x
Ë
	`__uöt16_idítôy
 (x)

	)

58 
	#À16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

60 
	#htobe32
(
x
Ë
	`__uöt32_idítôy
 (x)

	)

61 
	#htﬁe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

62 
	#be32toh
(
x
Ë
	`__uöt32_idítôy
 (x)

	)

63 
	#À32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

65 
	#htobe64
(
x
Ë
	`__uöt64_idítôy
 (x)

	)

66 
	#htﬁe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

67 
	#be64toh
(
x
Ë
	`__uöt64_idítôy
 (x)

	)

68 
	#À64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

	@/usr/include/features.h

18 #i‚def 
_FEATURES_H


19 
	#_FEATURES_H
 1

	)

120 #unde‡
__USE_ISOC11


121 #unde‡
__USE_ISOC99


122 #unde‡
__USE_ISOC95


123 #unde‡
__USE_ISOCXX11


124 #unde‡
__USE_POSIX


125 #unde‡
__USE_POSIX2


126 #unde‡
__USE_POSIX199309


127 #unde‡
__USE_POSIX199506


128 #unde‡
__USE_XOPEN


129 #unde‡
__USE_XOPEN_EXTENDED


130 #unde‡
__USE_UNIX98


131 #unde‡
__USE_XOPEN2K


132 #unde‡
__USE_XOPEN2KXSI


133 #unde‡
__USE_XOPEN2K8


134 #unde‡
__USE_XOPEN2K8XSI


135 #unde‡
__USE_LARGEFILE


136 #unde‡
__USE_LARGEFILE64


137 #unde‡
__USE_FILE_OFFSET64


138 #unde‡
__USE_MISC


139 #unde‡
__USE_ATFILE


140 #unde‡
__USE_GNU


141 #unde‡
__USE_FORTIFY_LEVEL


142 #unde‡
__KERNEL_STRICT_NAMES


143 #unde‡
__GLIBC_USE_ISOC2X


144 #unde‡
__GLIBC_USE_DEPRECATED_GETS


145 #unde‡
__GLIBC_USE_DEPRECATED_SCANF


149 #i‚de‡
_LOOSE_KERNEL_NAMES


150 
	#__KERNEL_STRICT_NAMES


	)

160 #i‡
deföed
 
__GNUC__
 && deföed 
__GNUC_MINOR__


161 
	#__GNUC_PREREQ
(
maj
, 
mö
) \

162 ((
__GNUC__
 << 16Ë+ 
__GNUC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

164 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë0

	)

171 #i‡
deföed
 
__˛™g_maj‹__
 && deföed 
__˛™g_mö‹__


172 
	#__glibc_˛™g_¥îeq
(
maj
, 
mö
) \

173 ((
__˛™g_maj‹__
 << 16Ë+ 
__˛™g_mö‹__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

175 
	#__glibc_˛™g_¥îeq
(
maj
, 
mö
Ë0

	)

179 
	#__GLIBC_USE
(
F
Ë
__GLIBC_USE_
 ## 
	)
F

185 #i‡(
deföed
 
_BSD_SOURCE
 || deföed 
_SVID_SOURCE
) \

186 && !
deföed
 
	g_DEFAULT_SOURCE


188 #unde‡
_DEFAULT_SOURCE


189 
	#_DEFAULT_SOURCE
 1

	)

193 #ifde‡
_GNU_SOURCE


194 #unde‡
_ISOC95_SOURCE


195 
	#_ISOC95_SOURCE
 1

	)

196 #unde‡
_ISOC99_SOURCE


197 
	#_ISOC99_SOURCE
 1

	)

198 #unde‡
_ISOC11_SOURCE


199 
	#_ISOC11_SOURCE
 1

	)

200 #unde‡
_ISOC2X_SOURCE


201 
	#_ISOC2X_SOURCE
 1

	)

202 #unde‡
_POSIX_SOURCE


203 
	#_POSIX_SOURCE
 1

	)

204 #unde‡
_POSIX_C_SOURCE


205 
	#_POSIX_C_SOURCE
 200809L

	)

206 #unde‡
_XOPEN_SOURCE


207 
	#_XOPEN_SOURCE
 700

	)

208 #unde‡
_XOPEN_SOURCE_EXTENDED


209 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

210 #unde‡
_LARGEFILE64_SOURCE


211 
	#_LARGEFILE64_SOURCE
 1

	)

212 #unde‡
_DEFAULT_SOURCE


213 
	#_DEFAULT_SOURCE
 1

	)

214 #unde‡
_ATFILE_SOURCE


215 
	#_ATFILE_SOURCE
 1

	)

220 #i‡(
deföed
 
_DEFAULT_SOURCE
 \

221 || (!
deföed
 
	g__STRICT_ANSI__
 \

222 && !
deföed
 
	g_ISOC99_SOURCE
 && !deföed 
	g_ISOC11_SOURCE
 \

223 && !
deföed
 
	g_ISOC2X_SOURCE
 \

224 && !
deföed
 
	g_POSIX_SOURCE
 && !deföed 
	g_POSIX_C_SOURCE
 \

225 && !
deföed
 
	g_XOPEN_SOURCE
))

226 #unde‡
_DEFAULT_SOURCE


227 
	#_DEFAULT_SOURCE
 1

	)

231 #i‡(
deföed
 
_ISOC2X_SOURCE
 \

232 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ > 201710L))

233 
	#__GLIBC_USE_ISOC2X
 1

	)

235 
	#__GLIBC_USE_ISOC2X
 0

	)

239 #i‡(
deföed
 
_ISOC11_SOURCE
 || deföed 
_ISOC2X_SOURCE
 \

240 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 201112L))

241 
	#__USE_ISOC11
 1

	)

245 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

246 || 
deföed
 
_ISOC2X_SOURCE
 \

247 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

248 
	#__USE_ISOC99
 1

	)

252 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

253 || 
deföed
 
_ISOC2X_SOURCE
 \

254 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199409L))

255 
	#__USE_ISOC95
 1

	)

258 #ifde‡
__˝lu•lus


260 #i‡
__˝lu•lus
 >= 201703L

261 
	#__USE_ISOC11
 1

	)

265 #i‡
__˝lu•lus
 >201103L || 
deföed
 
__GXX_EXPERIMENTAL_CXX0X__


266 
	#__USE_ISOCXX11
 1

	)

267 
	#__USE_ISOC99
 1

	)

274 #ifde‡
_DEFAULT_SOURCE


275 #i‡!
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE


276 
	#__USE_POSIX_IMPLICITLY
 1

	)

278 #unde‡
_POSIX_SOURCE


279 
	#_POSIX_SOURCE
 1

	)

280 #unde‡
_POSIX_C_SOURCE


281 
	#_POSIX_C_SOURCE
 200809L

	)

284 #i‡((!
deföed
 
__STRICT_ANSI__
 \

285 || (
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) >= 500)) \

286 && !
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE
)

287 
	#_POSIX_SOURCE
 1

	)

288 #i‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 500

289 
	#_POSIX_C_SOURCE
 2

	)

290 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 600

291 
	#_POSIX_C_SOURCE
 199506L

	)

292 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 700

293 
	#_POSIX_C_SOURCE
 200112L

	)

295 
	#_POSIX_C_SOURCE
 200809L

	)

297 
	#__USE_POSIX_IMPLICITLY
 1

	)

306 #i‡((!
deföed
 
_POSIX_C_SOURCE
 || (_POSIX_C_SOURCE - 0) < 199506L) \

307 && (
deföed
 
_REENTRANT
 || deföed 
_THREAD_SAFE
))

308 
	#_POSIX_SOURCE
 1

	)

309 #unde‡
_POSIX_C_SOURCE


310 
	#_POSIX_C_SOURCE
 199506L

	)

313 #i‡(
deföed
 
_POSIX_SOURCE
 \

314 || (
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >= 1) \

315 || 
deföed
 
_XOPEN_SOURCE
)

316 
	#__USE_POSIX
 1

	)

319 #i‡
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >2 || deföed 
_XOPEN_SOURCE


320 
	#__USE_POSIX2
 1

	)

323 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 199309L

324 
	#__USE_POSIX199309
 1

	)

327 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 199506L

328 
	#__USE_POSIX199506
 1

	)

331 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 200112L

332 
	#__USE_XOPEN2K
 1

	)

333 #unde‡
__USE_ISOC95


334 
	#__USE_ISOC95
 1

	)

335 #unde‡
__USE_ISOC99


336 
	#__USE_ISOC99
 1

	)

339 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 200809L

340 
	#__USE_XOPEN2K8
 1

	)

341 #unde‡
_ATFILE_SOURCE


342 
	#_ATFILE_SOURCE
 1

	)

345 #ifdef 
_XOPEN_SOURCE


346 
	#__USE_XOPEN
 1

	)

347 #i‡(
_XOPEN_SOURCE
 - 0) >= 500

348 
	#__USE_XOPEN_EXTENDED
 1

	)

349 
	#__USE_UNIX98
 1

	)

350 #unde‡
_LARGEFILE_SOURCE


351 
	#_LARGEFILE_SOURCE
 1

	)

352 #i‡(
_XOPEN_SOURCE
 - 0) >= 600

353 #i‡(
_XOPEN_SOURCE
 - 0) >= 700

354 
	#__USE_XOPEN2K8
 1

	)

355 
	#__USE_XOPEN2K8XSI
 1

	)

357 
	#__USE_XOPEN2K
 1

	)

358 
	#__USE_XOPEN2KXSI
 1

	)

359 #unde‡
__USE_ISOC95


360 
	#__USE_ISOC95
 1

	)

361 #unde‡
__USE_ISOC99


362 
	#__USE_ISOC99
 1

	)

365 #ifde‡
_XOPEN_SOURCE_EXTENDED


366 
	#__USE_XOPEN_EXTENDED
 1

	)

371 #ifde‡
_LARGEFILE_SOURCE


372 
	#__USE_LARGEFILE
 1

	)

375 #ifde‡
_LARGEFILE64_SOURCE


376 
	#__USE_LARGEFILE64
 1

	)

379 #i‡
deföed
 
_FILE_OFFSET_BITS
 && _FILE_OFFSET_BITS == 64

380 
	#__USE_FILE_OFFSET64
 1

	)

383 #i‡
deföed
 
_DEFAULT_SOURCE


384 
	#__USE_MISC
 1

	)

387 #ifdef 
_ATFILE_SOURCE


388 
	#__USE_ATFILE
 1

	)

391 #ifdef 
_GNU_SOURCE


392 
	#__USE_GNU
 1

	)

395 #i‡
deföed
 
_FORTIFY_SOURCE
 && _FORTIFY_SOURCE > 0 \

396 && 
__GNUC_PREREQ
 (4, 1Ë&& 
deföed
 
	g__OPTIMIZE__
 && __OPTIMIZE__ > 0

397 #i‡
_FORTIFY_SOURCE
 > 1

398 
	#__USE_FORTIFY_LEVEL
 2

	)

400 
	#__USE_FORTIFY_LEVEL
 1

	)

403 
	#__USE_FORTIFY_LEVEL
 0

	)

410 #i‡
deföed
 
__˝lu•lus
 ? __˝lu•lu†>201402L : deföed 
__USE_ISOC11


411 
	#__GLIBC_USE_DEPRECATED_GETS
 0

	)

413 
	#__GLIBC_USE_DEPRECATED_GETS
 1

	)

428 #i‡(
deföed
 
__USE_GNU
 \

429 && (
deföed
 
	g__˝lu•lus
 \

430 ? (
	g__˝lu•lus
 < 201103L && !
deföed
 
	g__GXX_EXPERIMENTAL_CXX0X__
) \

431 : (!
deföed
 
__STDC_VERSION__
 || __STDC_VERSION__ < 199901L)))

432 
	#__GLIBC_USE_DEPRECATED_SCANF
 1

	)

434 
	#__GLIBC_USE_DEPRECATED_SCANF
 0

	)

439 
	~<°dc-¥edef.h
>

447 #unde‡
__GNU_LIBRARY__


448 
	#__GNU_LIBRARY__
 6

	)

452 
	#__GLIBC__
 2

	)

453 
	#__GLIBC_MINOR__
 31

	)

455 
	#__GLIBC_PREREQ
(
maj
, 
mö
) \

456 ((
__GLIBC__
 << 16Ë+ 
__GLIBC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

459 #i‚de‡
__ASSEMBLER__


460 #i‚de‡
_SYS_CDEFS_H


461 
	~<sys/cdefs.h
>

466 #i‡
deföed
 
__USE_FILE_OFFSET64
 && !deföed 
__REDIRECT


467 
	#__USE_LARGEFILE
 1

	)

468 
	#__USE_LARGEFILE64
 1

	)

474 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

475 && !
deföed
 
	g__OPTIMIZE_SIZE__
 && !deföed 
	g__NO_INLINE__
 \

476 && 
deföed
 
	g__exã∫_ölöe


477 
	#__USE_EXTERN_INLINES
 1

	)

485 
	~<gnu/°ubs.h
>

	@/usr/include/rpc/netdb.h

36 #i‚de‡
_RPC_NETDB_H


37 
	#_RPC_NETDB_H
 1

	)

39 
	~<„©uªs.h
>

41 
	#__√ed_size_t


	)

42 
	~<°ddef.h
>

44 
__BEGIN_DECLS


46 
	sΩ˚¡


48 *
	mr_«me
;

49 **
	mr_Æü£s
;

50 
	mr_numbî
;

53 
	$£åp˚¡
 (
__°ay›í
Ë
__THROW
;

54 
	$ídΩ˚¡
 (Ë
__THROW
;

55 
Ω˚¡
 *
	$gëΩcby«me
 (c⁄° *
__«me
Ë
__THROW
;

56 
Ω˚¡
 *
	$gëΩcbynumbî
 (
__numbî
Ë
__THROW
;

57 
Ω˚¡
 *
	$gëΩ˚¡
 (Ë
__THROW
;

59 #ifde‡
__USE_MISC


60 
	$gëΩcby«me_r
 (c⁄° *
__«me
, 
Ω˚¡
 *
__ªsu…_buf
,

61 *
__buf„r
, 
size_t
 
__buÊí
,

62 
Ω˚¡
 **
__ªsu…
Ë
__THROW
;

64 
	$gëΩcbynumbî_r
 (
__numbî
, 
Ω˚¡
 *
__ªsu…_buf
,

65 *
__buf„r
, 
size_t
 
__buÊí
,

66 
Ω˚¡
 **
__ªsu…
Ë
__THROW
;

68 
	$gëΩ˚¡_r
 (
Ω˚¡
 *
__ªsu…_buf
, *
__buf„r
,

69 
size_t
 
__buÊí
, 
Ω˚¡
 **
__ªsu…
Ë
__THROW
;

72 
__END_DECLS


	@/usr/include/strings.h

18 #i‚def 
_STRINGS_H


19 
	#_STRINGS_H
 1

	)

21 
	~<„©uªs.h
>

22 
	#__√ed_size_t


	)

23 
	~<°ddef.h
>

26 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

27 
	#__CORRECT_ISO_CPP_STRINGS_H_PROTO


	)

30 
	g__BEGIN_DECLS


32 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K8


34 
	$bcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

35 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

38 
	$bc›y
 (c⁄° *
__§c
, *
__de°
, 
size_t
 
__n
)

39 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

42 
	$bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

45 #ifde‡
__CORRECT_ISO_CPP_STRINGS_H_PROTO


48 *
	`ödex
 (*
__s
, 
__c
)

49 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

50 c⁄° *
	`ödex
 (c⁄° *
__s
, 
__c
)

51 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

53 #i‡
deföed
 
__OPTIMIZE__


54 
__exã∫_Æways_ölöe
 *

55 
	`ödex
 (*
__s
, 
__c
Ë
__THROW


57  
	`__buûtö_ödex
 (
__s
, 
__c
);

60 
__exã∫_Æways_ölöe
 const *

61 
	`ödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


63  
	`__buûtö_ödex
 (
__s
, 
__c
);

66 
	}
}

68 *
	$ödex
 (c⁄° *
__s
, 
__c
)

69 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

73 #ifde‡
__CORRECT_ISO_CPP_STRINGS_H_PROTO


76 *
	`rödex
 (*
__s
, 
__c
)

77 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

78 c⁄° *
	`rödex
 (c⁄° *
__s
, 
__c
)

79 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

81 #i‡
deföed
 
__OPTIMIZE__


82 
__exã∫_Æways_ölöe
 *

83 
	`rödex
 (*
__s
, 
__c
Ë
__THROW


85  
	`__buûtö_rödex
 (
__s
, 
__c
);

88 
__exã∫_Æways_ölöe
 const *

89 
	`rödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


91  
	`__buûtö_rödex
 (
__s
, 
__c
);

94 
	}
}

96 *
	$rödex
 (c⁄° *
__s
, 
__c
)

97 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

101 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K8
 || deföed 
__USE_XOPEN2K8XSI


104 
	$ffs
 (
__i
Ë
__THROW
 
__©åibuã_c⁄°__
;

109 #ifdef 
__USE_MISC


110 
	$ff¶
 (
__l
Ë
__THROW
 
__©åibuã_c⁄°__
;

111 
__exãnsi⁄__
 
	$ff¶l
 (
__Œ
)

112 
__THROW
 
__©åibuã_c⁄°__
;

116 
	$°rˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

117 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

120 
	$°∫ˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

121 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

123 #ifdef 
__USE_XOPEN2K8


125 
	~<bôs/ty≥s/loˇÀ_t.h
>

128 
	$°rˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
, 
loˇÀ_t
 
__loc
)

129 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

133 
	$°∫ˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
,

134 
size_t
 
__n
, 
loˇÀ_t
 
__loc
)

135 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 4));

138 
__END_DECLS


140 #i‡
	`__GNUC_PREREQ
 (3,4Ë&& 
__USE_FORTIFY_LEVEL
 > 0 \

141 && 
deföed
 
__f‹tify_fun˘i⁄


143 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K8


144 
	~<bôs/°rögs_f‹tifõd.h
>

	@/usr/include/stdc-predef.h

18 #i‚def 
_STDC_PREDEF_H


19 
	#_STDC_PREDEF_H
 1

	)

36 #ifde‡
__GCC_IEC_559


37 #i‡
__GCC_IEC_559
 > 0

38 
	#__STDC_IEC_559__
 1

	)

41 
	#__STDC_IEC_559__
 1

	)

44 #ifde‡
__GCC_IEC_559_COMPLEX


45 #i‡
__GCC_IEC_559_COMPLEX
 > 0

46 
	#__STDC_IEC_559_COMPLEX__
 1

	)

49 
	#__STDC_IEC_559_COMPLEX__
 1

	)

58 
	#__STDC_ISO_10646__
 201706L

	)

	@
1
.
1
/usr/include
511
30375
ph/cceh.c
ph/cceh.h
ph/data.c
ph/data.h
ph/global.c
ph/global.h
ph/hash.c
ph/hash.h
ph/kvs.h
ph/query.c
ph/query.h
ph/thread.c
ph/thread.h
test/test.c
test/test.h
util/gen.c
viper/concurrentqueue-src/benchmarks/benchmarks.cpp
viper/concurrentqueue-src/benchmarks/boostqueue.h
viper/concurrentqueue-src/benchmarks/cpuid.cpp
viper/concurrentqueue-src/benchmarks/cpuid.h
viper/concurrentqueue-src/benchmarks/dlib/algs.h
viper/concurrentqueue-src/benchmarks/dlib/array.h
viper/concurrentqueue-src/benchmarks/dlib/array/array_kernel.h
viper/concurrentqueue-src/benchmarks/dlib/array/array_kernel_abstract.h
viper/concurrentqueue-src/benchmarks/dlib/array/array_tools.h
viper/concurrentqueue-src/benchmarks/dlib/array/array_tools_abstract.h
viper/concurrentqueue-src/benchmarks/dlib/assert.h
viper/concurrentqueue-src/benchmarks/dlib/binary_search_tree.h
viper/concurrentqueue-src/benchmarks/dlib/binary_search_tree/binary_search_tree_kernel_1.h
viper/concurrentqueue-src/benchmarks/dlib/binary_search_tree/binary_search_tree_kernel_2.h
viper/concurrentqueue-src/benchmarks/dlib/binary_search_tree/binary_search_tree_kernel_abstract.h
viper/concurrentqueue-src/benchmarks/dlib/binary_search_tree/binary_search_tree_kernel_c.h
viper/concurrentqueue-src/benchmarks/dlib/bound_function_pointer.h
viper/concurrentqueue-src/benchmarks/dlib/bound_function_pointer/bound_function_pointer_kernel_1.h
viper/concurrentqueue-src/benchmarks/dlib/bound_function_pointer/bound_function_pointer_kernel_abstract.h
viper/concurrentqueue-src/benchmarks/dlib/byte_orderer.h
viper/concurrentqueue-src/benchmarks/dlib/byte_orderer/byte_orderer_kernel_1.h
viper/concurrentqueue-src/benchmarks/dlib/byte_orderer/byte_orderer_kernel_abstract.h
viper/concurrentqueue-src/benchmarks/dlib/config.h
viper/concurrentqueue-src/benchmarks/dlib/console_progress_indicator.h
viper/concurrentqueue-src/benchmarks/dlib/enable_if.h
viper/concurrentqueue-src/benchmarks/dlib/error.h
viper/concurrentqueue-src/benchmarks/dlib/float_details.h
viper/concurrentqueue-src/benchmarks/dlib/hash.h
viper/concurrentqueue-src/benchmarks/dlib/interfaces/cmd_line_parser_option.h
viper/concurrentqueue-src/benchmarks/dlib/interfaces/enumerable.h
viper/concurrentqueue-src/benchmarks/dlib/interfaces/map_pair.h
viper/concurrentqueue-src/benchmarks/dlib/interfaces/remover.h
viper/concurrentqueue-src/benchmarks/dlib/is_kind.h
viper/concurrentqueue-src/benchmarks/dlib/logger.h
viper/concurrentqueue-src/benchmarks/dlib/logger/extra_logger_headers.h
viper/concurrentqueue-src/benchmarks/dlib/logger/logger_config_file.h
viper/concurrentqueue-src/benchmarks/dlib/logger/logger_kernel_1.h
viper/concurrentqueue-src/benchmarks/dlib/logger/logger_kernel_abstract.h
viper/concurrentqueue-src/benchmarks/dlib/map.h
viper/concurrentqueue-src/benchmarks/dlib/map/map_kernel_1.h
viper/concurrentqueue-src/benchmarks/dlib/map/map_kernel_abstract.h
viper/concurrentqueue-src/benchmarks/dlib/map/map_kernel_c.h
viper/concurrentqueue-src/benchmarks/dlib/member_function_pointer.h
viper/concurrentqueue-src/benchmarks/dlib/member_function_pointer/make_mfp.h
viper/concurrentqueue-src/benchmarks/dlib/member_function_pointer/make_mfp_abstract.h
viper/concurrentqueue-src/benchmarks/dlib/member_function_pointer/member_function_pointer_kernel_1.h
viper/concurrentqueue-src/benchmarks/dlib/member_function_pointer/member_function_pointer_kernel_abstract.h
viper/concurrentqueue-src/benchmarks/dlib/memory_manager.h
viper/concurrentqueue-src/benchmarks/dlib/memory_manager/memory_manager_kernel_1.h
viper/concurrentqueue-src/benchmarks/dlib/memory_manager/memory_manager_kernel_2.h
viper/concurrentqueue-src/benchmarks/dlib/memory_manager/memory_manager_kernel_3.h
viper/concurrentqueue-src/benchmarks/dlib/memory_manager/memory_manager_kernel_abstract.h
viper/concurrentqueue-src/benchmarks/dlib/memory_manager_global.h
viper/concurrentqueue-src/benchmarks/dlib/memory_manager_global/memory_manager_global_kernel_1.h
viper/concurrentqueue-src/benchmarks/dlib/memory_manager_global/memory_manager_global_kernel_abstract.h
viper/concurrentqueue-src/benchmarks/dlib/memory_manager_stateless.h
viper/concurrentqueue-src/benchmarks/dlib/memory_manager_stateless/memory_manager_stateless_kernel_1.h
viper/concurrentqueue-src/benchmarks/dlib/memory_manager_stateless/memory_manager_stateless_kernel_2.h
viper/concurrentqueue-src/benchmarks/dlib/memory_manager_stateless/memory_manager_stateless_kernel_abstract.h
viper/concurrentqueue-src/benchmarks/dlib/metaprogramming.h
viper/concurrentqueue-src/benchmarks/dlib/misc_api.h
viper/concurrentqueue-src/benchmarks/dlib/misc_api/misc_api_kernel_1.h
viper/concurrentqueue-src/benchmarks/dlib/misc_api/misc_api_kernel_2.h
viper/concurrentqueue-src/benchmarks/dlib/misc_api/misc_api_kernel_abstract.h
viper/concurrentqueue-src/benchmarks/dlib/misc_api/misc_api_shared.h
viper/concurrentqueue-src/benchmarks/dlib/misc_api/posix.h
viper/concurrentqueue-src/benchmarks/dlib/misc_api/windows.h
viper/concurrentqueue-src/benchmarks/dlib/noncopyable.h
viper/concurrentqueue-src/benchmarks/dlib/numeric_constants.h
viper/concurrentqueue-src/benchmarks/dlib/numerical_integration.h
viper/concurrentqueue-src/benchmarks/dlib/numerical_integration/integrate_function_adapt_simpson.h
viper/concurrentqueue-src/benchmarks/dlib/numerical_integration/integrate_function_adapt_simpson_abstract.h
viper/concurrentqueue-src/benchmarks/dlib/pipe.h
viper/concurrentqueue-src/benchmarks/dlib/pipe/pipe_kernel_1.h
viper/concurrentqueue-src/benchmarks/dlib/pipe/pipe_kernel_abstract.h
viper/concurrentqueue-src/benchmarks/dlib/platform.h
viper/concurrentqueue-src/benchmarks/dlib/queue.h
viper/concurrentqueue-src/benchmarks/dlib/queue/queue_kernel_1.h
viper/concurrentqueue-src/benchmarks/dlib/queue/queue_kernel_2.h
viper/concurrentqueue-src/benchmarks/dlib/queue/queue_kernel_abstract.h
viper/concurrentqueue-src/benchmarks/dlib/queue/queue_kernel_c.h
viper/concurrentqueue-src/benchmarks/dlib/queue/queue_sort_1.h
viper/concurrentqueue-src/benchmarks/dlib/queue/queue_sort_abstract.h
viper/concurrentqueue-src/benchmarks/dlib/ref.h
viper/concurrentqueue-src/benchmarks/dlib/revision.h
viper/concurrentqueue-src/benchmarks/dlib/serialize.h
viper/concurrentqueue-src/benchmarks/dlib/set.h
viper/concurrentqueue-src/benchmarks/dlib/set/set_compare_1.h
viper/concurrentqueue-src/benchmarks/dlib/set/set_compare_abstract.h
viper/concurrentqueue-src/benchmarks/dlib/set/set_kernel_1.h
viper/concurrentqueue-src/benchmarks/dlib/set/set_kernel_abstract.h
viper/concurrentqueue-src/benchmarks/dlib/set/set_kernel_c.h
viper/concurrentqueue-src/benchmarks/dlib/sliding_buffer.h
viper/concurrentqueue-src/benchmarks/dlib/sliding_buffer/circular_buffer.h
viper/concurrentqueue-src/benchmarks/dlib/sliding_buffer/circular_buffer_abstract.h
viper/concurrentqueue-src/benchmarks/dlib/sliding_buffer/sliding_buffer_kernel_1.h
viper/concurrentqueue-src/benchmarks/dlib/sliding_buffer/sliding_buffer_kernel_abstract.h
viper/concurrentqueue-src/benchmarks/dlib/sliding_buffer/sliding_buffer_kernel_c.h
viper/concurrentqueue-src/benchmarks/dlib/sockets.h
viper/concurrentqueue-src/benchmarks/dlib/sockets/posix.h
viper/concurrentqueue-src/benchmarks/dlib/sockets/sockets_extensions.h
viper/concurrentqueue-src/benchmarks/dlib/sockets/sockets_extensions_abstract.h
viper/concurrentqueue-src/benchmarks/dlib/sockets/sockets_kernel_1.h
viper/concurrentqueue-src/benchmarks/dlib/sockets/sockets_kernel_2.h
viper/concurrentqueue-src/benchmarks/dlib/sockets/sockets_kernel_abstract.h
viper/concurrentqueue-src/benchmarks/dlib/sockets/windows.h
viper/concurrentqueue-src/benchmarks/dlib/sort.h
viper/concurrentqueue-src/benchmarks/dlib/sparse_vector.h
viper/concurrentqueue-src/benchmarks/dlib/stack.h
viper/concurrentqueue-src/benchmarks/dlib/stack/stack_kernel_1.h
viper/concurrentqueue-src/benchmarks/dlib/stack/stack_kernel_abstract.h
viper/concurrentqueue-src/benchmarks/dlib/stack/stack_kernel_c.h
viper/concurrentqueue-src/benchmarks/dlib/stack_trace.h
viper/concurrentqueue-src/benchmarks/dlib/std_allocator.h
viper/concurrentqueue-src/benchmarks/dlib/stl_checked.h
viper/concurrentqueue-src/benchmarks/dlib/stl_checked/std_vector_c.h
viper/concurrentqueue-src/benchmarks/dlib/stl_checked/std_vector_c_abstract.h
viper/concurrentqueue-src/benchmarks/dlib/string.h
viper/concurrentqueue-src/benchmarks/dlib/string/string.h
viper/concurrentqueue-src/benchmarks/dlib/string/string_abstract.h
viper/concurrentqueue-src/benchmarks/dlib/test_for_odr_violations.h
viper/concurrentqueue-src/benchmarks/dlib/threads.h
viper/concurrentqueue-src/benchmarks/dlib/threads/async.h
viper/concurrentqueue-src/benchmarks/dlib/threads/async_abstract.h
viper/concurrentqueue-src/benchmarks/dlib/threads/auto_mutex_extension.h
viper/concurrentqueue-src/benchmarks/dlib/threads/auto_mutex_extension_abstract.h
viper/concurrentqueue-src/benchmarks/dlib/threads/auto_unlock_extension.h
viper/concurrentqueue-src/benchmarks/dlib/threads/auto_unlock_extension_abstract.h
viper/concurrentqueue-src/benchmarks/dlib/threads/create_new_thread_extension.h
viper/concurrentqueue-src/benchmarks/dlib/threads/create_new_thread_extension_abstract.h
viper/concurrentqueue-src/benchmarks/dlib/threads/multithreaded_object_extension.h
viper/concurrentqueue-src/benchmarks/dlib/threads/multithreaded_object_extension_abstract.h
viper/concurrentqueue-src/benchmarks/dlib/threads/parallel_for_extension.h
viper/concurrentqueue-src/benchmarks/dlib/threads/parallel_for_extension_abstract.h
viper/concurrentqueue-src/benchmarks/dlib/threads/posix.h
viper/concurrentqueue-src/benchmarks/dlib/threads/read_write_mutex_extension.h
viper/concurrentqueue-src/benchmarks/dlib/threads/read_write_mutex_extension_abstract.h
viper/concurrentqueue-src/benchmarks/dlib/threads/rmutex_extension.h
viper/concurrentqueue-src/benchmarks/dlib/threads/rmutex_extension_abstract.h
viper/concurrentqueue-src/benchmarks/dlib/threads/rsignaler_extension.h
viper/concurrentqueue-src/benchmarks/dlib/threads/rsignaler_extension_abstract.h
viper/concurrentqueue-src/benchmarks/dlib/threads/thread_function_extension.h
viper/concurrentqueue-src/benchmarks/dlib/threads/thread_function_extension_abstract.h
viper/concurrentqueue-src/benchmarks/dlib/threads/thread_pool_extension.h
viper/concurrentqueue-src/benchmarks/dlib/threads/thread_pool_extension_abstract.h
viper/concurrentqueue-src/benchmarks/dlib/threads/thread_specific_data_extension.h
viper/concurrentqueue-src/benchmarks/dlib/threads/thread_specific_data_extension_abstract.h
viper/concurrentqueue-src/benchmarks/dlib/threads/threaded_object_extension.h
viper/concurrentqueue-src/benchmarks/dlib/threads/threaded_object_extension_abstract.h
viper/concurrentqueue-src/benchmarks/dlib/threads/threads_kernel.h
viper/concurrentqueue-src/benchmarks/dlib/threads/threads_kernel_1.h
viper/concurrentqueue-src/benchmarks/dlib/threads/threads_kernel_2.h
viper/concurrentqueue-src/benchmarks/dlib/threads/threads_kernel_abstract.h
viper/concurrentqueue-src/benchmarks/dlib/threads/threads_kernel_shared.h
viper/concurrentqueue-src/benchmarks/dlib/threads/windows.h
viper/concurrentqueue-src/benchmarks/dlib/time_this.h
viper/concurrentqueue-src/benchmarks/dlib/timeout.h
viper/concurrentqueue-src/benchmarks/dlib/timeout/timeout.h
viper/concurrentqueue-src/benchmarks/dlib/timeout/timeout_abstract.h
viper/concurrentqueue-src/benchmarks/dlib/timer.h
viper/concurrentqueue-src/benchmarks/dlib/timer/timer.h
viper/concurrentqueue-src/benchmarks/dlib/timer/timer_abstract.h
viper/concurrentqueue-src/benchmarks/dlib/timer/timer_heavy.h
viper/concurrentqueue-src/benchmarks/dlib/timing.h
viper/concurrentqueue-src/benchmarks/dlib/tokenizer.h
viper/concurrentqueue-src/benchmarks/dlib/tokenizer/tokenizer_kernel_1.h
viper/concurrentqueue-src/benchmarks/dlib/tokenizer/tokenizer_kernel_abstract.h
viper/concurrentqueue-src/benchmarks/dlib/tokenizer/tokenizer_kernel_c.h
viper/concurrentqueue-src/benchmarks/dlib/uintn.h
viper/concurrentqueue-src/benchmarks/dlib/unicode.h
viper/concurrentqueue-src/benchmarks/dlib/unicode/unicode.h
viper/concurrentqueue-src/benchmarks/dlib/unicode/unicode_abstract.h
viper/concurrentqueue-src/benchmarks/dlib/unordered_pair.h
viper/concurrentqueue-src/benchmarks/dlib/vectorstream.h
viper/concurrentqueue-src/benchmarks/dlib/vectorstream/unserialize.h
viper/concurrentqueue-src/benchmarks/dlib/vectorstream/unserialize_abstract.h
viper/concurrentqueue-src/benchmarks/dlib/vectorstream/vectorstream.h
viper/concurrentqueue-src/benchmarks/dlib/vectorstream/vectorstream_abstract.h
viper/concurrentqueue-src/benchmarks/dlib/windows_magic.h
viper/concurrentqueue-src/benchmarks/dlibqueue.h
viper/concurrentqueue-src/benchmarks/lockbasedqueue.h
viper/concurrentqueue-src/benchmarks/simplelockfree.h
viper/concurrentqueue-src/benchmarks/stdqueue.h
viper/concurrentqueue-src/benchmarks/tbb/aggregator.h
viper/concurrentqueue-src/benchmarks/tbb/aligned_space.h
viper/concurrentqueue-src/benchmarks/tbb/arena.cpp
viper/concurrentqueue-src/benchmarks/tbb/arena.h
viper/concurrentqueue-src/benchmarks/tbb/atomic.h
viper/concurrentqueue-src/benchmarks/tbb/blocked_range.h
viper/concurrentqueue-src/benchmarks/tbb/blocked_range2d.h
viper/concurrentqueue-src/benchmarks/tbb/blocked_range3d.h
viper/concurrentqueue-src/benchmarks/tbb/cache_aligned_allocator.cpp
viper/concurrentqueue-src/benchmarks/tbb/cache_aligned_allocator.h
viper/concurrentqueue-src/benchmarks/tbb/cilk-tbb-interop.h
viper/concurrentqueue-src/benchmarks/tbb/combinable.h
viper/concurrentqueue-src/benchmarks/tbb/compat/ppl.h
viper/concurrentqueue-src/benchmarks/tbb/concurrent_hash_map.cpp
viper/concurrentqueue-src/benchmarks/tbb/concurrent_hash_map.h
viper/concurrentqueue-src/benchmarks/tbb/concurrent_lru_cache.h
viper/concurrentqueue-src/benchmarks/tbb/concurrent_monitor.cpp
viper/concurrentqueue-src/benchmarks/tbb/concurrent_monitor.h
viper/concurrentqueue-src/benchmarks/tbb/concurrent_priority_queue.h
viper/concurrentqueue-src/benchmarks/tbb/concurrent_queue.cpp
viper/concurrentqueue-src/benchmarks/tbb/concurrent_queue.h
viper/concurrentqueue-src/benchmarks/tbb/concurrent_unordered_map.h
viper/concurrentqueue-src/benchmarks/tbb/concurrent_unordered_set.h
viper/concurrentqueue-src/benchmarks/tbb/concurrent_vector.cpp
viper/concurrentqueue-src/benchmarks/tbb/concurrent_vector.h
viper/concurrentqueue-src/benchmarks/tbb/condition_variable.cpp
viper/concurrentqueue-src/benchmarks/tbb/critical_section.cpp
viper/concurrentqueue-src/benchmarks/tbb/critical_section.h
viper/concurrentqueue-src/benchmarks/tbb/custom_scheduler.h
viper/concurrentqueue-src/benchmarks/tbb/dynamic_link.cpp
viper/concurrentqueue-src/benchmarks/tbb/dynamic_link.h
viper/concurrentqueue-src/benchmarks/tbb/enumerable_thread_specific.h
viper/concurrentqueue-src/benchmarks/tbb/flow_graph.h
viper/concurrentqueue-src/benchmarks/tbb/governor.cpp
viper/concurrentqueue-src/benchmarks/tbb/governor.h
viper/concurrentqueue-src/benchmarks/tbb/ibm_aix51/atomic_support.c
viper/concurrentqueue-src/benchmarks/tbb/internal/_aggregator_impl.h
viper/concurrentqueue-src/benchmarks/tbb/internal/_concurrent_queue_impl.h
viper/concurrentqueue-src/benchmarks/tbb/internal/_concurrent_unordered_impl.h
viper/concurrentqueue-src/benchmarks/tbb/internal/_flow_graph_impl.h
viper/concurrentqueue-src/benchmarks/tbb/internal/_flow_graph_indexer_impl.h
viper/concurrentqueue-src/benchmarks/tbb/internal/_flow_graph_item_buffer_impl.h
viper/concurrentqueue-src/benchmarks/tbb/internal/_flow_graph_join_impl.h
viper/concurrentqueue-src/benchmarks/tbb/internal/_flow_graph_node_impl.h
viper/concurrentqueue-src/benchmarks/tbb/internal/_flow_graph_tagged_buffer_impl.h
viper/concurrentqueue-src/benchmarks/tbb/internal/_flow_graph_trace_impl.h
viper/concurrentqueue-src/benchmarks/tbb/internal/_flow_graph_types_impl.h
viper/concurrentqueue-src/benchmarks/tbb/internal/_mutex_padding.h
viper/concurrentqueue-src/benchmarks/tbb/internal/_range_iterator.h
viper/concurrentqueue-src/benchmarks/tbb/internal/_tbb_strings.h
viper/concurrentqueue-src/benchmarks/tbb/internal/_tbb_windef.h
viper/concurrentqueue-src/benchmarks/tbb/internal/_x86_eliding_mutex_impl.h
viper/concurrentqueue-src/benchmarks/tbb/internal/_x86_rtm_rw_mutex_impl.h
viper/concurrentqueue-src/benchmarks/tbb/intrusive_list.h
viper/concurrentqueue-src/benchmarks/tbb/itt_notify.cpp
viper/concurrentqueue-src/benchmarks/tbb/itt_notify.h
viper/concurrentqueue-src/benchmarks/tbb/machine/gcc_armv7.h
viper/concurrentqueue-src/benchmarks/tbb/machine/gcc_generic.h
viper/concurrentqueue-src/benchmarks/tbb/machine/gcc_ia32_common.h
viper/concurrentqueue-src/benchmarks/tbb/machine/gcc_itsx.h
viper/concurrentqueue-src/benchmarks/tbb/machine/ibm_aix51.h
viper/concurrentqueue-src/benchmarks/tbb/machine/icc_generic.h
viper/concurrentqueue-src/benchmarks/tbb/machine/linux_common.h
viper/concurrentqueue-src/benchmarks/tbb/machine/linux_ia32.h
viper/concurrentqueue-src/benchmarks/tbb/machine/linux_ia64.h
viper/concurrentqueue-src/benchmarks/tbb/machine/linux_intel64.h
viper/concurrentqueue-src/benchmarks/tbb/machine/mac_ppc.h
viper/concurrentqueue-src/benchmarks/tbb/machine/macos_common.h
viper/concurrentqueue-src/benchmarks/tbb/machine/mic_common.h
viper/concurrentqueue-src/benchmarks/tbb/machine/msvc_armv7.h
viper/concurrentqueue-src/benchmarks/tbb/machine/msvc_ia32_common.h
viper/concurrentqueue-src/benchmarks/tbb/machine/sunos_sparc.h
viper/concurrentqueue-src/benchmarks/tbb/machine/windows_api.h
viper/concurrentqueue-src/benchmarks/tbb/machine/windows_ia32.h
viper/concurrentqueue-src/benchmarks/tbb/machine/windows_intel64.h
viper/concurrentqueue-src/benchmarks/tbb/machine/xbox360_ppc.h
viper/concurrentqueue-src/benchmarks/tbb/mailbox.h
viper/concurrentqueue-src/benchmarks/tbb/market.cpp
viper/concurrentqueue-src/benchmarks/tbb/market.h
viper/concurrentqueue-src/benchmarks/tbb/memory_pool.h
viper/concurrentqueue-src/benchmarks/tbb/mutex.cpp
viper/concurrentqueue-src/benchmarks/tbb/mutex.h
viper/concurrentqueue-src/benchmarks/tbb/null_mutex.h
viper/concurrentqueue-src/benchmarks/tbb/null_rw_mutex.h
viper/concurrentqueue-src/benchmarks/tbb/observer_proxy.cpp
viper/concurrentqueue-src/benchmarks/tbb/observer_proxy.h
viper/concurrentqueue-src/benchmarks/tbb/parallel_do.h
viper/concurrentqueue-src/benchmarks/tbb/parallel_for.h
viper/concurrentqueue-src/benchmarks/tbb/parallel_for_each.h
viper/concurrentqueue-src/benchmarks/tbb/parallel_invoke.h
viper/concurrentqueue-src/benchmarks/tbb/parallel_reduce.h
viper/concurrentqueue-src/benchmarks/tbb/parallel_scan.h
viper/concurrentqueue-src/benchmarks/tbb/parallel_sort.h
viper/concurrentqueue-src/benchmarks/tbb/parallel_while.h
viper/concurrentqueue-src/benchmarks/tbb/partitioner.h
viper/concurrentqueue-src/benchmarks/tbb/pipeline.cpp
viper/concurrentqueue-src/benchmarks/tbb/pipeline.h
viper/concurrentqueue-src/benchmarks/tbb/private_server.cpp
viper/concurrentqueue-src/benchmarks/tbb/queuing_mutex.cpp
viper/concurrentqueue-src/benchmarks/tbb/queuing_mutex.h
viper/concurrentqueue-src/benchmarks/tbb/queuing_rw_mutex.cpp
viper/concurrentqueue-src/benchmarks/tbb/queuing_rw_mutex.h
viper/concurrentqueue-src/benchmarks/tbb/reader_writer_lock.cpp
viper/concurrentqueue-src/benchmarks/tbb/reader_writer_lock.h
viper/concurrentqueue-src/benchmarks/tbb/recursive_mutex.cpp
viper/concurrentqueue-src/benchmarks/tbb/recursive_mutex.h
viper/concurrentqueue-src/benchmarks/tbb/runtime_loader.h
viper/concurrentqueue-src/benchmarks/tbb/scalable_allocator.h
viper/concurrentqueue-src/benchmarks/tbb/scheduler.cpp
viper/concurrentqueue-src/benchmarks/tbb/scheduler.h
viper/concurrentqueue-src/benchmarks/tbb/scheduler_common.h
viper/concurrentqueue-src/benchmarks/tbb/scheduler_utility.h
viper/concurrentqueue-src/benchmarks/tbb/semaphore.cpp
viper/concurrentqueue-src/benchmarks/tbb/semaphore.h
viper/concurrentqueue-src/benchmarks/tbb/spin_mutex.cpp
viper/concurrentqueue-src/benchmarks/tbb/spin_mutex.h
viper/concurrentqueue-src/benchmarks/tbb/spin_rw_mutex.cpp
viper/concurrentqueue-src/benchmarks/tbb/spin_rw_mutex.h
viper/concurrentqueue-src/benchmarks/tbb/task.cpp
viper/concurrentqueue-src/benchmarks/tbb/task.h
viper/concurrentqueue-src/benchmarks/tbb/task_arena.h
viper/concurrentqueue-src/benchmarks/tbb/task_group.h
viper/concurrentqueue-src/benchmarks/tbb/task_group_context.cpp
viper/concurrentqueue-src/benchmarks/tbb/task_scheduler_init.h
viper/concurrentqueue-src/benchmarks/tbb/task_scheduler_observer.h
viper/concurrentqueue-src/benchmarks/tbb/task_stream.h
viper/concurrentqueue-src/benchmarks/tbb/tbb.h
viper/concurrentqueue-src/benchmarks/tbb/tbb_allocator.h
viper/concurrentqueue-src/benchmarks/tbb/tbb_assert_impl.h
viper/concurrentqueue-src/benchmarks/tbb/tbb_config.h
viper/concurrentqueue-src/benchmarks/tbb/tbb_exception.h
viper/concurrentqueue-src/benchmarks/tbb/tbb_machine.h
viper/concurrentqueue-src/benchmarks/tbb/tbb_main.cpp
viper/concurrentqueue-src/benchmarks/tbb/tbb_main.h
viper/concurrentqueue-src/benchmarks/tbb/tbb_misc.cpp
viper/concurrentqueue-src/benchmarks/tbb/tbb_misc.h
viper/concurrentqueue-src/benchmarks/tbb/tbb_misc_ex.cpp
viper/concurrentqueue-src/benchmarks/tbb/tbb_profiling.h
viper/concurrentqueue-src/benchmarks/tbb/tbb_statistics.cpp
viper/concurrentqueue-src/benchmarks/tbb/tbb_statistics.h
viper/concurrentqueue-src/benchmarks/tbb/tbb_stddef.h
viper/concurrentqueue-src/benchmarks/tbb/tbb_thread.cpp
viper/concurrentqueue-src/benchmarks/tbb/tbb_thread.h
viper/concurrentqueue-src/benchmarks/tbb/tbb_version.h
viper/concurrentqueue-src/benchmarks/tbb/tbbmalloc_proxy.h
viper/concurrentqueue-src/benchmarks/tbb/tick_count.h
viper/concurrentqueue-src/benchmarks/tbb/tls.h
viper/concurrentqueue-src/benchmarks/tbb/tools_api/disable_warnings.h
viper/concurrentqueue-src/benchmarks/tbb/tools_api/internal/ittnotify.h
viper/concurrentqueue-src/benchmarks/tbb/tools_api/ittnotify.h
viper/concurrentqueue-src/benchmarks/tbb/tools_api/ittnotify_config.h
viper/concurrentqueue-src/benchmarks/tbb/tools_api/ittnotify_static.c
viper/concurrentqueue-src/benchmarks/tbb/tools_api/ittnotify_static.h
viper/concurrentqueue-src/benchmarks/tbb/tools_api/ittnotify_types.h
viper/concurrentqueue-src/benchmarks/tbb/tools_api/legacy/ittnotify.h
viper/concurrentqueue-src/benchmarks/tbb/tools_api/prototype/ittnotify.h
viper/concurrentqueue-src/benchmarks/tbb/x86_rtm_rw_mutex.cpp
viper/concurrentqueue-src/benchmarks/tbbqueue.h
viper/concurrentqueue-src/benchmarks/wrappers.h
viper/concurrentqueue-src/blockingconcurrentqueue.h
viper/concurrentqueue-src/build/msvc12/msvc_tbb_stubs.cpp
viper/concurrentqueue-src/build/msvc14/msvc_tbb_stubs.cpp
viper/concurrentqueue-src/build/msvc15/msvc_tbb_stubs.cpp
viper/concurrentqueue-src/build/msvc16/msvc_tbb_stubs.cpp
viper/concurrentqueue-src/c_api/blockingconcurrentqueue.cpp
viper/concurrentqueue-src/c_api/concurrentqueue.cpp
viper/concurrentqueue-src/c_api/concurrentqueue.h
viper/concurrentqueue-src/concurrentqueue.h
viper/concurrentqueue-src/internal/concurrentqueue_internal_debug.h
viper/concurrentqueue-src/lightweightsemaphore.h
viper/concurrentqueue-src/tests/CDSChecker/corealgo.h
viper/concurrentqueue-src/tests/CDSChecker/enqueue_dequeue_many.cpp
viper/concurrentqueue-src/tests/CDSChecker/enqueue_dequeue_one.cpp
viper/concurrentqueue-src/tests/common/simplethread.cpp
viper/concurrentqueue-src/tests/common/simplethread.h
viper/concurrentqueue-src/tests/common/systemtime.cpp
viper/concurrentqueue-src/tests/common/systemtime.h
viper/concurrentqueue-src/tests/corealgos.h
viper/concurrentqueue-src/tests/fuzztests/fuzztests.cpp
viper/concurrentqueue-src/tests/relacy/freelist.cpp
viper/concurrentqueue-src/tests/relacy/integrated.cpp
viper/concurrentqueue-src/tests/relacy/relacy/example/cli_ws_deque/cli_ws_deque.cpp
viper/concurrentqueue-src/tests/relacy/relacy/example/cli_ws_deque/stdafx.cpp
viper/concurrentqueue-src/tests/relacy/relacy/example/cli_ws_deque/stdafx.h
viper/concurrentqueue-src/tests/relacy/relacy/example/condvar/condvar.cpp
viper/concurrentqueue-src/tests/relacy/relacy/example/condvar/stdafx.cpp
viper/concurrentqueue-src/tests/relacy/relacy/example/condvar/stdafx.h
viper/concurrentqueue-src/tests/relacy/relacy/example/eao_blocking/eao_blocking.cpp
viper/concurrentqueue-src/tests/relacy/relacy/example/eventcount/eventcount.cpp
viper/concurrentqueue-src/tests/relacy/relacy/example/eventcount/stdafx.cpp
viper/concurrentqueue-src/tests/relacy/relacy/example/eventcount/stdafx.h
viper/concurrentqueue-src/tests/relacy/relacy/example/examples/examples.cpp
viper/concurrentqueue-src/tests/relacy/relacy/example/examples/stdafx.cpp
viper/concurrentqueue-src/tests/relacy/relacy/example/examples/stdafx.h
viper/concurrentqueue-src/tests/relacy/relacy/example/java_ws_deque/java_ws_deque.cpp
viper/concurrentqueue-src/tests/relacy/relacy/example/java_ws_deque/stdafx.cpp
viper/concurrentqueue-src/tests/relacy/relacy/example/java_ws_deque/stdafx.h
viper/concurrentqueue-src/tests/relacy/relacy/example/mpmc/mpmc.cpp
viper/concurrentqueue-src/tests/relacy/relacy/example/mpmc/pcx.h
viper/concurrentqueue-src/tests/relacy/relacy/example/mpmc/stdafx.cpp
viper/concurrentqueue-src/tests/relacy/relacy/example/mpmc/stdafx.h
viper/concurrentqueue-src/tests/relacy/relacy/example/mutex_business_logic/mutex_business_logic.cpp
viper/concurrentqueue-src/tests/relacy/relacy/example/mutex_business_logic/stdafx.cpp
viper/concurrentqueue-src/tests/relacy/relacy/example/mutex_business_logic/stdafx.h
viper/concurrentqueue-src/tests/relacy/relacy/example/peterson/peterson.cpp
viper/concurrentqueue-src/tests/relacy/relacy/example/peterson/stdafx.cpp
viper/concurrentqueue-src/tests/relacy/relacy/example/peterson/stdafx.h
viper/concurrentqueue-src/tests/relacy/relacy/example/proxy_collector/proxy_collector.cpp
viper/concurrentqueue-src/tests/relacy/relacy/example/proxy_collector/stdafx.cpp
viper/concurrentqueue-src/tests/relacy/relacy/example/proxy_collector/stdafx.h
viper/concurrentqueue-src/tests/relacy/relacy/example/ref_counting/ref_counting.cpp
viper/concurrentqueue-src/tests/relacy/relacy/example/ref_counting/stdafx.cpp
viper/concurrentqueue-src/tests/relacy/relacy/example/ref_counting/stdafx.h
viper/concurrentqueue-src/tests/relacy/relacy/example/smr/smr.cpp
viper/concurrentqueue-src/tests/relacy/relacy/example/smr/stdafx.cpp
viper/concurrentqueue-src/tests/relacy/relacy/example/smr/stdafx.h
viper/concurrentqueue-src/tests/relacy/relacy/example/spsc_queue/spsc_queue.cpp
viper/concurrentqueue-src/tests/relacy/relacy/example/spsc_queue/stdafx.cpp
viper/concurrentqueue-src/tests/relacy/relacy/example/spsc_queue/stdafx.h
viper/concurrentqueue-src/tests/relacy/relacy/example/stack/stack.cpp
viper/concurrentqueue-src/tests/relacy/relacy/example/stack/stdafx.cpp
viper/concurrentqueue-src/tests/relacy/relacy/example/stack/stdafx.h
viper/concurrentqueue-src/tests/relacy/relacy/example/tbb_eventcount/eventcount.cpp
viper/concurrentqueue-src/tests/relacy/relacy/example/tbb_eventcount/stdafx.cpp
viper/concurrentqueue-src/tests/relacy/relacy/example/tbb_eventcount/stdafx.h
viper/concurrentqueue-src/tests/relacy/relacy/example/ws_deque/stdafx.cpp
viper/concurrentqueue-src/tests/relacy/relacy/example/ws_deque/stdafx.h
viper/concurrentqueue-src/tests/relacy/relacy/example/ws_deque/ws_deque.cpp
viper/concurrentqueue-src/tests/relacy/relacy/example/ws_deque2/stdafx.cpp
viper/concurrentqueue-src/tests/relacy/relacy/example/ws_deque2/stdafx.h
viper/concurrentqueue-src/tests/relacy/relacy/example/ws_deque2/ws_deque.cpp
viper/concurrentqueue-src/tests/relacy/relacy/relacy/pthread.h
viper/concurrentqueue-src/tests/relacy/relacy/relacy/windows.h
viper/concurrentqueue-src/tests/relacy/relacy/test/foo.cpp
viper/concurrentqueue-src/tests/relacy/relacy/test/g++/test.cpp
viper/concurrentqueue-src/tests/relacy/relacy/test/iriw.cpp
viper/concurrentqueue-src/tests/relacy/relacy/test/jtest/jtest.cpp
viper/concurrentqueue-src/tests/relacy/relacy/test/jtest/stdafx.cpp
viper/concurrentqueue-src/tests/relacy/relacy/test/jtest/stdafx.h
viper/concurrentqueue-src/tests/relacy/relacy/test/main.cpp
viper/concurrentqueue-src/tests/relacy/relacy/test/ntest/ntest.cpp
viper/concurrentqueue-src/tests/relacy/relacy/test/ntest/stdafx.cpp
viper/concurrentqueue-src/tests/relacy/relacy/test/ntest/stdafx.h
viper/concurrentqueue-src/tests/relacy/relacy/test/stdafx.cpp
viper/concurrentqueue-src/tests/relacy/relacy/test/stdafx.h
viper/concurrentqueue-src/tests/relacy/relacy_shims.h
viper/concurrentqueue-src/tests/relacy/spmchash.cpp
viper/concurrentqueue-src/tests/unittests/mallocmacro.cpp
viper/concurrentqueue-src/tests/unittests/minitest.h
viper/concurrentqueue-src/tests/unittests/unittests.cpp
viper/kvs.h
/usr/include/arpa/inet.h
/usr/include/assert.h
/usr/include/dlfcn.h
/usr/include/errno.h
/usr/include/error.h
/usr/include/fcntl.h
/usr/include/fenv.h
/usr/include/inttypes.h
/usr/include/libpmem.h
/usr/include/limits.h
/usr/include/linux/limits.h
/usr/include/malloc.h
/usr/include/netdb.h
/usr/include/netinet/in.h
/usr/include/pthread.h
/usr/include/sched.h
/usr/include/semaphore.h
/usr/include/signal.h
/usr/include/stdint.h
/usr/include/stdio.h
/usr/include/stdlib.h
/usr/include/string.h
/usr/include/tbb/aligned_space.h
/usr/include/tbb/atomic.h
/usr/include/tbb/cache_aligned_allocator.h
/usr/include/tbb/compat/condition_variable
/usr/include/tbb/concurrent_hash_map.h
/usr/include/tbb/concurrent_queue.h
/usr/include/tbb/concurrent_vector.h
/usr/include/tbb/critical_section.h
/usr/include/tbb/internal/_concurrent_queue_impl.h
/usr/include/tbb/internal/_flow_graph_types_impl.h
/usr/include/tbb/internal/_tbb_strings.h
/usr/include/tbb/machine/windows_api.h
/usr/include/tbb/mutex.h
/usr/include/tbb/partitioner.h
/usr/include/tbb/pipeline.h
/usr/include/tbb/queuing_mutex.h
/usr/include/tbb/queuing_rw_mutex.h
/usr/include/tbb/reader_writer_lock.h
/usr/include/tbb/recursive_mutex.h
/usr/include/tbb/spin_mutex.h
/usr/include/tbb/spin_rw_mutex.h
/usr/include/tbb/task.h
/usr/include/tbb/task_scheduler_init.h
/usr/include/tbb/task_scheduler_observer.h
/usr/include/tbb/tbb_allocator.h
/usr/include/tbb/tbb_config.h
/usr/include/tbb/tbb_exception.h
/usr/include/tbb/tbb_machine.h
/usr/include/tbb/tbb_stddef.h
/usr/include/tbb/tbb_thread.h
/usr/include/time.h
/usr/include/unistd.h
/usr/include/wchar.h
/usr/include/alloca.h
/usr/include/endian.h
/usr/include/features.h
/usr/include/rpc/netdb.h
/usr/include/strings.h
/usr/include/stdc-predef.h
